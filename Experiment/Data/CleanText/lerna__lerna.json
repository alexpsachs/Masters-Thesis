{
    "lock[bot]": "This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. This thread has been automatically locked because there has not been any recent activity after it was closed. Please open a new issue for related bugs.. ",
    "kittens": "Squash commits and this is GTM.\n. LGTM. We should probably add some integration tests where we just run a bunch of commands and check that the console output is right too.\n. Feel free. We don't get paid to work on this :)\n. @patrickheeney Ah right, my bad.\n@thejameskyle I don't see why we shouldn't just support this flag, especially since the addition is so simple. We've even had some packages inside babel/babel that were internal and weren't meant for public consumption.\n. Anyone wanna submit a patch?\n. We should add some command line flags instead of using environment variables.\n. Sounds like you're looking for just lerna updated then?\n. If you're doing this for security then it's pointless.\n. Any large company that uses a monorepo will already have developed solutions that solve this problem, and most of them wont even have it because of the way the codebases are architectured (only one version, master).\n. This would be awesome, a PR would be appreciated!\n. @amasad It was. Deduping is very ineffective unless you use ranges. I'm pretty strongly against this, it isn't the right tool for the job. If you want locked transitive dependencies then use a shrinkwrap.\n. npm goes bananas when you have symlinks and try to npm install inside of it.\n. Edit: Just to clarify, I would not have personally made this change. I do however respect the existing maintainers of the projects decision to do so. I do not consider this project to be mine.\nLocking this issue.\nIf you disagree with the license then you're welcome to use one of the alternatives or write your own.\nIf you're employed by a subsidiary listed, direct any questions about the usage of Lerna to your company lawyer. This license only applies to future versions, you're free to use old versions that do not contain this clause.\nIf you have concerns over the legality of relicensing. The MIT license allows sublicensing, which this falls under. Even still, all contributors implicitly agreed to the existing license, of which I am the original license holder, when they submitted code meaning we are within our rights to relicense.\nIf you're a contributor with active code in Lerna, and disagree with the relicense, feel free to privately message @jamiebuilds, @evocateur, or myself and we'll ensure that your contributions are either removed or rewritten to remove attribution.\nThanks everyone for your comments thus far.. Just to clarify, while I would not personally have chosen to go with the new sublicense, I do support the existing maintainers who have completely rewritten Lerna from what t was when I first started the project. I do not consider this project to be mine.\nLike the others have explained, this is making the license more restrictive, not submissive which makes the license change completely valid.\nThis is very different to the OpenSSL case where the entire license was changed. As far as I can tell, they didn\u2019t even need my permission to make this change.. This looks good although I'd prefer if the args assertion was present when the command isn't run.\n. ",
    "stefanbuck": "Scope packages are already supported, but the npm install overwrites the generated file. I've created an issue for that https://github.com/npm/npm/issues/11529\n. Fair point, but I just started with that monorepo and most of our dependencies are still spread across different repositories / systems. Also I thought it would be a nice addition to lerna. . Indeed, we do and it works partly. \nI added a .npmrc file in the repository root which point to our private registry. Adding a new decency at root level pulls the packages from our registry. If I add a new decency to a packages/file-matcher-helper it tries to pull this package from the public npm registry rather than our private one.\nMaybe I have to duplicate the .npmrc file across all packages folder.  . lerna add ... with a .npmrc in the root does the trick. . ",
    "patrickheeney": "This looks cool. I wonder if it could be a bit more flexible like lerna run --- make test-ci to support more than just npm run, although that would be a good default. \n. @thejameskyle Sorry, I missed this notification. Yes I have a private mono repo with private packages and some that get published to npm as public packages. The use case for this all the reasons you would use file:// or private packages.\n. There are dozens of use cases for private packages which I won't get into here. Not all my private packages are published to npm, but I would think supporting private packages would fall in line with the purpose of the tool: A tool for managing JavaScript projects with multiple packages (only public?).. \n. Perhaps you are also thinking that the mono repo is open source, it's not. We have a private git repo using lerna to manage it. We have some packages that sync to open source, but the mono repo is not. Lerna does not currently support private packages of any sort, this PR fixes that.\n. We have some local dependencies to the project that are not published to npm, but bundled with the project itself. Npm supports file:// based dependencies so I am looking for lerna to support it as well. Without this simple change, the packages do not get bootstrapped for local development. \n. I am not sure why the directory structure would matter with this, but I reckon something like:\n```\npackages/foo\npackages/foo/internal_modules/bar\npackages/baz\n// packages/foo/package.json\n\"dependencies\": {\n  \"bar\": \"file:./internal_modules/bar\"\n}\n```\nIf you don't understand the use case (of file:// packages), I don't want to keep pushing for local dependencies support. Perhaps I should look into other projects or rolling my own?\n. @kittens This is a PR that I took the time to write and submit? I wanted to contribute to the community and this repository, but I don't know how else to explain the importance of npm local packages, which this adds support for.\n. In case there was some confusion: My comments about rolling my own or searching for other projects was not intended to be snarky, but rather ask if my time would be better spent finding an alternative solution vs attempting to get this re-opened.\n. @kittens @hzoo It sounds like you are both in support of this (private / local packages). Should this be closed? If the PR in its current format can't be accepted, should I open an issue to discuss potential implementations of this feature?\n. This seems to be outside the scope of the project, closing this.\n. @evocateur I thought of the same as well and prototyped locally. One issue I ran into that you need a watcher when adding new files as they would need that shim to link the dependency files.\n@thejameskyle I am not sure that npm is the issue here or what the goal would be? The module code is frozen in npm so introducing new behavior to load files locally isn't something they are going to accept (don't have the link ready to cite this but its in a discussion about linking local modules).\n. Since originally posting this I have also moved onto pnpm with some custom scripts instead of using lerna. I have several issues open with pnpm which would prevent anyone using it on a complex app. It has an elusive bug which causes install to fail 50% of the time with a lot of dependencies (symlink + stream error). It also doesn't support optionalDependencies and some other npm features which causes some popular packages to fail installation. Manually working around these issues has solved this requirement for me. \nI have also tried patching require, using npm link, and expanding the proxy support to include all files. All of them ended up being brittle and unworkable for me. \n. This is a summary of some different options discussed above:\nIndex Proxy - This what lerna looks to be doing right now. It generates a proxy to require the real path of package.json main.\nCons: It only supports one entry file. Nested files does not work.\nProxy Everything - Lerna could be expanded to proxy all files to point to the real path so that require will work for nested paths. \nCons: How would it handle non-js files? What happens when you create new js files (manual step to rebuild the proxy? watchers?). \nNPM Link - Adapt lerna to npm link all packages. \nCons: Complex with lots of packages. Can only have one version of a dependency linked at a time. Other issues documented above and elsewhere.\nSymlink - Create a symlink process to link all the modules. Not sure this is possible on its own without the next point.\nCons: Will it work on windows smoothly? How to avoid complexity? Was mentioned above it had some issues with recursive node modules.\nGlobal Cache / Symlink - Using tools like pnpm or other projects that store all npm packages in a global cache. Then recursively symlink to link them. \nCons: Will it work on windows smoothly? Adds another dependency. Can't use npm directly for a few commands.\nPatch NPM - Patch the NPM require process to change its behavior.\nCons: NPM won't change how modules will load due to standardization. Patching the require process will be brittle and not future proof.\n\nI have done some extensive testing of all of these. My current thoughts:\nThe proxy everything approach is the easiest to roll into the project now. It is also error prone because of the inability to add new files, change paths, etc without a manual step to rebuild or initiate watchers. It seems like a perfect starting point.\nThe global cache / symlink approach I have been using outside of learna, but I'd like to roll this into it. A fork also exists to do something similar. I personally love this approach as it is what I think npm 3 should have been. However it does depart a bit from npm's default behavior. It is the best candidate that I have found to handle this seamlessly. \nThe others all have drawbacks that prevent this from likely working seamlessly.\nOne interesting thought is, can we use both approaches behind flags? Use proxy everything by default and enable the global cache / symlink with a flag. We are essentially just talking about two strategies to proxy the node_modules, so it may be doable. See this example.\nlerna bootstrap --strategy=copy\nAnother interesting thought, if this isn't bundled into core because of additional dependencies, can it be a plugin? By default the core project can only proxy everything but you can include a lerna-global-cache plugin that implements this strategy. There is a definite need for something like this and this could open it up to the community for other strategies instead of depending on something like pnpm directly. lerna shouldn't concern itself with how the modules are bootstraped, it just expects it to behave like npm does.\n// lerna requires() some root project level function to modify configuration\nlerna.__commands__['bootstrap'] = class GlobalCacheBootstrapCommand extends Command {}\nI know it was said in other issues that lerna doesn't want different types of structures between repos and wants to focus on one way of doing this. However, focusing on only one use case will not work for everyone. So the question becomes do you support multiple strategies out of the box, allow plugins to modify this behavior instead of forking, or reject this and similar use cases. \nEDIT: Added last two paragraphs.\n. This would fall under the Symlink section above which was tried and reverted. Those issues would likely need to be resolved in order to consider that option. \n. @ainscore Thanks for tracking that down! \nI did just that on my private repo. I symlinked all local packages first so that if you install one with a dependency on another, it can be resolved. I then used pnpm to install within each package and had it exclude any local packages since I added the symlink in the first step. I used pnpm for the global store, symlink everything, faster installation, and better install API. I assume you could likely do the same with npm. I haven't found any edge cases so far so maybe it would be a good place to start. Alternatively alle sounds like it could be a solution with much less hackery. \n. I will try to summarize this again as I think we have 3 different concepts that should be pursued and a lot of discussion that lead to this point. \nConcept 1: Modular API - https://github.com/lerna/lerna/issues/174. This would push all ideas into user-land, opening up the possibility for anyone to develop a different set of functionality like bootstrap strategies. It could also allow an code sharing between tools that may have similar goals but different approaches. With an API like this, we don't need to wait to explore the others here.\nConcept 2: Symlinks. Work around the nested problem by addressing the issues that we have identified by using symlinks. Make them cross-platform, symlink local dependencies, selectively install other dependencies, etc.\nConcept 3: Alle. That repo has a simple change to the structure that wouldn't require any symlinks. The drawbacks are minimal compared to symlinks.\nAll 3 of these have been explored and could be viable options for solving this. Hopefully we can get some feedback by the project maintainers to determine a direction, or directions, to push forward with.\n. @ainscore https://nodejs.org/api/modules.html#modules_loading_from_the_global_folders It sounds like NODE_PATH is for historic purposes and they encourage local node_modules solutions. They also list a few potential side effects. What if you had a private package called babel in packages/. You would have to ensure that every package name is unique among all of your dependencies and dependency's dependencies or it could also cause side effects. \n. I tried to add support for this in #10 but it was closed (also is outdated now). This may also work for my use case but it would need to support the other ways to declare relative dependencies:\n\"dependencies\": {\n    \"some-local-dependency\": \"file:../some-local-dependency\"\n},\nIt may be worthwhile to use the same logic npm uses internally to determine if this is a local dependency or not (https://github.com/npm/npm-package-arg).\n. I think the first step is something like you have done, which is to make sure the local file based packages can be bootstrapped at all. I haven't looked into it since #10, but back then private / local packages were excluded from lerna. \nThen likely the bootstrap process needs to be modified to detect that package-c needs to be linked from package-b. That is likely related to my other issue #11 since I currently solved it by symlinking all package dependencies as a last step after npm install (see Global Cache / Symlink approach in that issue).\n. > Right, but when is it linked?\nAt the root level this is how I am doing it at the moment:\n- Get a list of all project packages\n- Symlink them in node_modules project node_modules so they can be resolved\n- Diff local packages against package.json and pass non-local ones to npm install\n- Do the same for each package\nIf each package is installed separately then all the other non-local dependencies, then in theory by the time the dependency packages are installed you already have the right local one.\nI am also using pnpm because of global cache, faster, and easier to pass it CLI arguments. I don't think this easily supports multiple versions of the same local dependency (but could maybe?). I haven't had an issue with scripts but I imagine there is some scenario where this might not work?\n. I am all for this, but not this exact implementation. In #11 I discovered that everyone needs a different strategy because of different use cases. npm link has it's drawbacks that won't work for some. The existing behavior also won't work for some. In my testing I think this should be implemented as a strategy or a plugin into lerna. I think that is the only way to satisfy the different requirements. \n. In #11 I discussed the cons of npm link which this PR uses. I agree that getting in any working deep linking solution is better than getting in a perfect solution. However npm link has some issues, that in my opinion, will prevent it from working and cause more issues then it solves.\n. ",
    "hzoo": "Is this still WIP, needs review, or ready?\n. Sounds like a low complexity change to support; will be better when we have more tests?\nAlso we can add some more to the readme about this (support public, private, local) etc - or add to https://github.com/kittens/lerna/issues/48\n. To add to the discussion - https://github.com/boennemann/alle, I wrote up https://github.com/boennemann/alle/issues/1\n. agree with what @gigabo is saying - definetely seems like 1 is the way to go so no one has to wait on lerna itself - just build on top of it.\nEvery command is an independent command - should be free to test out a version of bootstrap or anything else and then we can include it in core if it works for everyone. I think we want to encourage fast local development/iteration on ideas/strategies that can eventually be added so everyone else can use it too?\n. Uhh well one of the changes is that bootstrap uses symlinks + you can use the packages key to specify the folders that will be packages https://github.com/lerna/lerna#lernajson including root (.)\nmade https://github.com/lerna/lerna/issues/589. Seems to work for me? git 2.6.3 on osx\n\n. Not sure, I extracted out what lerna publish was doing. \nIt looks like it is erroring on line 30. git describe sha-number\nAfter reading stack overflow, it looks like git describe only uses annotated tags by default and I guess none of the tags in the repo are annotated. \nIt looks like we could potentially do git describe --tags and it would work. @kittens?\nYeah that's probably it since we do that above that\njs\n  var lastTagCommit = execSync(\"git rev-list --tags --max-count=1\");\n  var lastTag       = execSync(\"git describe \" + lastTagCommit);\n. PR is https://github.com/kittens/lerna/pull/29\n. Oh I just tried git tags and was getting an error so was wondering if that was just me?\n\n. Haha weird.. maybe different versions or alias? http://stackoverflow.com/questions/1064499/how-to-get-a-list-of-all-git-tags\n. Code sucks but at least it prints out the labels now.\n. Almost done but it's needs to be generalized (just want to get it working for babel)\n. Didn't get to updating the readme but I would do that as well\nMaybe a screenshot or example of what it looks like (or just link to the next babel changelog release when we do it).\n. Can pr the one in the repo instead of my branch.\n. Yeah that would probably be better.\n. Yeah I think you're right on that.\nCould we do that only if it's a major version change? Thats kinda what FORCE_VERSION does (but it would update all packages).\n. TODO: figure out what to do with the hardcoded github tags (labels) https://github.com/kittens/lerna/pull/29/files#diff-98b51ca511528ecc68ea54d6adbf8f6bR8\n. rebased to master\nPotential changes to make:\n- [x] Use headings instead of bullets for the tags (less indentation, looks better)\n- [ ] Incorporate issues fixed if in the body/title (phab, github)\n- [x] Auto link to issue if (fixes T123 or fixes #123)\n- [x] add list of contributors at the end, total\n  - [ ] add how many previous PRs or if first contribution\n- [ ] time between pr and merge, between issue and fix, etc\n- [x] fix comma spacing (was a,b)\n- [ ] auto prepend to changelog? https://github.com/npm/npm/pull/11077/files#diff-4590fb6647766d4997c23f58054b47a3R7\nOther\n- [ ] After publish, leave a comment on each merged PR that it was released in version x.x.x)\n. Moved to a standalone repo https://github.com/lerna/lerna-changelog so gonna close\n. :+1: as much as I can check manually\n. It definitely was symlinks before - I forgot it it had to do with multiple copies of a package/babel-traverse or something - probably need to ask seb since I can't recall.\n. i'm :innocent:\n. I think we need more info to debug this one? Not sure where the error is happening\nWhat were doing is npm publish --tag prerelease for each pacakge,\nnpm dist-tag rm \" + name + \" prerelease, - if the error happens here, then it maybe it failed publishing?\nand then npm dist-tag add \" + name + \"@\" + NEW_VERSION + \" stable\n. Alright cool closing for now\n. a great idea. do we want to do the whole \"OWNERS\" file to track?\nHow to we how to configure/store data (this would go with the changelog - github project name, token, etc, issue labels, etc)\n. yay more configs .lernarc\n. We can add this to lerna.json now?\n. Yeah, just not implemented https://github.com/lerna/lerna/pull/294, and if you want to make a pr feel free\n. So that could just alias to a git diff of that package? and there's https://github.com/stevemao/diff-so-fancy which I saw yesterday\n. Configs is crazy too since every tool has one, but you're right it's probably better than everything else. At least this can replace the VERSION file so its same as before since this would include that as well?\n. Yeah for sure.\n. :+1: For sure, since we get a readme update and we probably don't need to publish just for that. (or even a test only change)?\n. Can update the readme for this one as well\n. Kk, we suddenly have a lot more commands\n. Oh maybe ls could provide more info (or maybe that is a different command)? It's the same as updated except all packages\nIt could print like: name, last version (useful for independent mode?), if changed, last update, last tag date, etc?\n. Do we need to add an entry to meow? Also update the readme with usage\n. Ok :+1:. If we are goina allow pre-releases then we should change this to temp (since the point of doing it was in case some of the packages failed to publish and we want to make sure they are all published at once).\n. Nah the name doesn't really matter since it's going to be deleted, I was just saying I agree with doing it\n. We'll probably catch it when the README is redone, but just noting here we should update the readme since its lerna-temp now\n. Alright, helps fix that use case and lerna init is explicit on what it does (although bootstrap/init sound a bit similar)\n. Although... npm init is a convention people probably know about so maybe that's fine\n. :+1: Just wanted to think about whether having an init/new/bootstrap was cool\n. Doing in https://github.com/lerna/lerna/pull/132\n. Yeah ok, so you don't publish what you didn't intend?\n. The fact that master works and 1.1.0 doesn't is weird\n. Ah --tags. I did that in https://github.com/kittens/lerna/pull/17 which was after\nWe could publish a 1.1.1 that's just with that extra commit\n. FYI, We published 1.1.1\n. :smile:, I think @kittens needs to turn travis on for the repo too (right now it only checks linting)\n. Travis is enabled now and runs npm run ci which is just lint atm\n. Maybe i'l just publish 1.1.1 (without uploading git tags to the repo or anythin) with that fix since we want to be using 2.0.\nAlthough you can use the prerelease tag too. { latest: '1.1.0', prerelease: '2.0.0-dev.05e9f0a' } or master.\nOr pin to the git sha of the fix 204b94cea287daba9cb8f0b8c1122072d7df3000\n. FYI, We published 1.1.1\n. I guess this can be closed then?\n. Yeah it might be simple to abstract the git stuff - I'm not sure how 1 to 1 the operations are so our tests would have to cover that too. We should wait for people to request since we aren't using it and don't know much about it ourselves?\n. @onigoetz sorry no, we've already been pretty overloaded with other issues!. ### Alright!!! An update to this issue: it should be fixed (via npm side)!\nSo I just published 6.22.0 yesterday and was thinking about publishing to the latest tag first instead of first lerna-temp then moving to latest but forgot. Then I was checking the readme's and it looked like they were already updated magically!?\nTurns out @bcoe had been working on fixing this issue, so it looks like it's all good for us on this one?\n\nit now renders the README directly from the package, rather than pulling it out at publish time.\n\n\nWe haven't published a new babel version in a month (>30 days)\nExample with babel-core:\nhttps://www.npmjs.com/package/babel-core\n\nhttps://github.com/babel/babel/pull/5101/files (5 days ago)\n\nEDIT:\n\ud83d\ude0d\ud83d\ude0d\ud83d\ude0d\ud83d\ude0d\ud83d\ude0d\ud83d\ude0d\n\ud83d\ude0d\ud83d\ude0d\ud83d\ude0d\ud83d\ude0d\ud83d\ude0d\ud83d\ude0d\n. Ok got it to successfully publish only the commits related to a merge.\n. Ok getting complicated.. can probably refactor a lot\n\nNow it will publish dependencies that use the packages that have been updated (babel-core if babel-generator updates)\n. I did find you that you can do ^1.1.1-canary. Could change all the dependencies to that instead of the exact release (or canary dist tag). Then we wouldn't have to update cross dependencies as much (only the first time for ^1.1.1.\nhttp://semver.npmjs.com/\n\n. since lerna bootstrap can be run multiple times, I think we can move this to https://github.com/lerna/lerna/issues/53\n. :+1: Yeah @thejameskyle mentioned he wanted to build tools on top of it as well\n. Thanks for the PR! Yeah we should add some instructions to the readme or make a contributing.md\n. Related to https://github.com/kittens/lerna/issues/59?\nWe haven't done a major release yet either in babel since creating this so not sure yet.\n. Since this skips user input it sounds like https://github.com/lerna/lerna/pull/135? I think we can close this in favor of that\n. Ok sounds good. Not sure we want to call it the master version although not sure I have better names - maybe even --repo-version or --monorepo-version?\n. I'm just not sure about the name for the flag, and then also a test or to for the option would be nice\n. Great, I think the last thing is to update the docs with the new option, maybe after https://github.com/lerna/lerna#--yes?\n. Awesome, thanks a lot! \ud83c\udf89 \n. Ok :+1: \n. :+1: \n. :+1: Yeah I think everyone assumes it is npm linking haha\n. Would you ever want to do anything else such that you might want to specify the version manually? Probably not right?\nWhat do you think about logging that info in the lerna updated/publish command as well? Basically something like Checking updated files since v6.8.1. I think this is important info to log\nAnd based on your suggestion, we just check the current branch - if it's master do the regular command, and if it's not do the 2nd one?\n. What's up with this PR?\n. Hey @cpojer! We haven't really used lerna with a major version yet so we are still figuring it out as well. Currently it's doing a git diff against files since the last tag.\nThis sounds similar to the issue of cross dependencies - https://github.com/kittens/lerna/issues/27\nRight now you can force a version by passing in FORCE_VERSION=* in process.env before running (https://github.com/kittens/lerna/blob/1.x/lib/commands/updated.js#L50)\nYeah for a major I think you're right just to be safe and make it simpler.\nAlso, you are using 1.x right (published 2.x as a prerelease).\n. Thought: Do we care about listing out the specific dependents for each package or just listing them all out?\nAre we filtering out packages that might be added again to dependents like a Set?\n. Sorry, so for the first question I mean the way we format the dependent packages could be like\n``` bash\nChanged Packages\n\npkg1\npkg-dep1\npkg-dep2\npkg2\npkg2-dep1\n```\n\nFor the 2nd, I just mean does the dependents array strip out duplicates (since dependencies can have the same dependency so it could be added 2x) - like for say babel-traverse updating.\n. Hmm yeah probably better to do the simple thing. Seeing a dep graph would be would nice for our monorepo though. I did see someone posted one on twitter although it looks deleted\n. \ud83d\udc4d  \n. Updated the readme, and added https://github.com/lerna/lerna#how-bootstrap-works - which I think covers this?\n. We are working on 2.0 and rewriting the readme; yeah we will do that too.\nBut to summarize you bootstrap your app once (it links (not using npm link)), then you just publish when necessary.\n. We have a better readme now, but we can add some more detailed guides - might be useful to add some gifs/instructions on a workflow like I showed at https://twitter.com/left_pad/status/733136037489315840\n. @gigabo Do you want to start a PR for this? I think we can just write the setup/usage for a few scenarios - maybe the one yall are using in react-server (independent mode, fixed mode, publishing, canary, etc)\n. Good point - what version is this for? (Although it's probably an issue on 2.x beta too)\n. Oh yeah is is a dup of https://github.com/kittens/lerna/issues/103 but thanks!\n. LGTM\n. Thanks for the issue! We aren't using lerna 2 on babel yet. Also you are running on npm 2 (we develop with npm 3 and recommend that for babel 6)\n. \ud83d\udc4d  \n. \ud83d\udc4d \n. Yeah that sounds good - kind of like force push\n. We can move this issue to the PR https://github.com/lerna/lerna/issues/160\n. Oops.. yeah must of copied the wrong one.\n. \ud83d\udc4d  \n. nice! lgtm if we want to support jsnext:main (why not)\n. I'm ok with doing this, so depends on james. - but if we want to do it as a plugin system yeah you'll need to wait\n. It's good now?\n. If that's it, https://github.com/lerna/lerna/pull/191\n. thanks!\n. We can squash in the merge now so it's ok\n. Fixed in https://github.com/lerna/lerna/issues/199\n. Ok going to close for now\n. Since lerna publish --skip-publish does read weird, it might be better to split it into a separate command that just updates git\n. The recursive issue was fixed and there's a simple cache now\n. If you do ^x.x.x-beta it should update all betas and more. http://semver.npmjs.com/\n\nIt would also get 2.0.1 and 2.1.0 if released\n. Ok lets go with locking it down atm then and reevaluate ^ later. Similar to flowconfig although in that case if you don't specify a version it allows any version and otherwise errors if it doesn't match\n. Ok great, I can rebase my changes on top since I didn't really change the intro\n. Ok I think that's everything? Need to combine the new/old intro and fixup stuff\nDo we want to link the readme/website somehow?\n. Ok if you want to move it over there we can do that - maybe we just leave the install/usage in the readme and a link to the website for more info?\n. Merged in https://github.com/lerna/lerna/pull/169!\n. I think we can add a test for this?\n. Nice haha\n. It should be adding to devDependencies now https://github.com/lerna/lerna/pull/131\n. \ud83d\ude1e  Oh.. https://github.com/lerna/lerna/pull/147 \n. Awesome! @joscha can you do a doc pr (or i'll do it later)\n. Ok weird that's a bug then - it does say Creating lerna.json. so it should since we don't expect a new project to have it\nhttps://github.com/lerna/lerna/issues/154\n. Basically update a package.json that isn't in the top level of packages?\n. We can do a check like if (!child_process.execSync) { } and use https://www.npmjs.com/package/sync-exec?\n. Ah that's why circleci failed for babel with lerna 2.x (since we are running 0.10 on it)\n. lol wat. thanks!\n. Yeah that probably would have to be an option, I guess opt-in to install peer to match npm 3?\n. That looks like what we're doing in babel currently. We don't want to link babel-runtime and want to use the 6.x version on npm so we depend on it at the top level and delete the other ones. - https://github.com/lerna/lerna/issues/117\n. Was it just copied wrong? https://github.com/lerna/lerna/pull/116/commits/ad9dc98c4d544f69d4c3068220989413ff499ebf\nShould we remove - https://github.com/lerna/lerna/blob/master/bin/lerna.js#L30\n. this LGTM\n. \ud83d\udc4d  Can you add a corresponding readme update?\n. Can you rebase again?\n. We can also merge as is and you can do another PR - if we want to support windows we should also setup CI on it via appveyor\n. Can merge what is here manually\n. https://github.com/lerna/lerna/pull/236 included this so closing!\n. \ud83d\udc4d \n. There's a merge conflict b/c of the last PR\n. blah I hope it's not because of the readme\n. Would be nice to use lerna here and do a canary release - can try a publish manually\n. Testing it out locally - do we want have an option to add a prefix or no? Like in babel everything is called babel-, and I assume when you import the packages are in like babel/generator and when you import you might want it to be called babel-generator (or for scoped modules)\nmaybe like lerna import ../generator --prefix generator or just the next be the new folder/package name like lerna import ../generator babel-generator `lerna import ../generator --name babel-generator\nNot a blocker and can be a further improvement\n. Another simple error we can add in is if you have already imported that repo in before (either by name or git log, package.json, etc)\n. Yeah I think so as well (new name) similar to git with branches/checkout\n. There's a docs fix to add, but other than that I'm good with landing this and we can improve as it's tested/used? \n. I think we should still change the readme since the line says Lerna assumes the repo has already been initialized with git init. - and now it will create it for you so maybe explain what you said: uses git/npm\n. Will link https://twitter.com/gr2m/status/738454783854563330 as a reference since it seems to be a general problem too\n\nIs there a CLI tool that lets me git clone multiple repositories, runs npm install and links them based on \"dependencies\" in package.json?\n. You can probably do a global gitignore (don't know how well it works) but totally fine with merging too\n. \ud83d\udc4d \n. Awesome!\n. nice, makes sense\n. Not sure what to do with this, closing. Right now there isn't - @nolanlawson was investigating this with pouchdb and lerna and would be probably better as a greenkeeper issue.\n. merge conflict here as well\n. Yeah I had to do that in babel today (rm -rf packages/*/node_modules, rm -rf node_modules) since I didn't see that babylon update caused tests to fail\n. \ud83d\udc4d \n. Kinda in https://github.com/lerna/lerna/issues/53 but could be cleared up to desired behavior/cli\n. @joscha the only related to github atm the is way we are getting labels and its just a ajax request and definetely can be substituted or removed in place of another place to tag commits (when the commit message itself, etc)\n. Seems like it \ud83c\udf85, thanks for the PR @sotojuan \n. Sorry, the readme/website is updated now (and yeah right now npm install installs the latest tag which is still 1.1.3\n. Yeah we're planning on writing a workflows/usage doc somewhere - https://github.com/lerna/lerna/issues/102. https://github.com/lerna/lerna#what-can-lerna-do the basics are: setup with lerna init, lerna bootstrap, and then lerna publish when necessary\n. Related to https://github.com/lerna/lerna/pull/181 as well? what's the difference between exec/spawn?\n. Sounds fine to me!\n. Ok - maybe later we can do the same as babel and setup circleci to run 0.10, or move on of those to appveyor for windows\n. Ok - maybe later we can do the same as babel and setup circleci to run 0.10, or move on of those to appveyor for windows\n. added circle ci for 0.10 as alternative - failing test is just a timeout\n. added circle ci for 0.10 as alternative - failing test is just a timeout\n. Just doing what we did in babel (don't have to)\n. Just doing what we did in babel (don't have to)\n. Was it because of sync-exec? What happens on beta.19?\n. Was it because of sync-exec? What happens on beta.19?\n. https://github.com/lerna/lerna/pull/220/files - need to look at this again I guess? It's checking if child.execSync is defined, otherwise not so I don't see why that would change any behavior. Maybe a publishing issue. If you aren't on 0.10 it should act exactly the same.\n. https://github.com/lerna/lerna/pull/220/files - need to look at this again I guess? It's checking if child.execSync is defined, otherwise not so I don't see why that would change any behavior. Maybe a publishing issue. If you aren't on 0.10 it should act exactly the same.\n. Can you not modify this in a .npmrc or something or does this have to be a lerna config change?\n. Can you not modify this in a .npmrc or something or does this have to be a lerna config change?\n. I'm trying to figure out the issue - might just need to republish or it's sync-exec - https://github.com/lerna/lerna/issues/221 but beta.19 should work.\n\nmight need to test master/beta.20 locally on windows to know\n. I'm trying to figure out the issue - might just need to republish or it's sync-exec - https://github.com/lerna/lerna/issues/221 but beta.19 should work.\nmight need to test master/beta.20 locally on windows to know\n. Right I kept thinking that was the only change but I see some other stuff like I added the add-module-exports plugin and also changed the main key in package.json\n. I think you would need to test on https://github.com/lerna/lerna/pull/236 since it's definetely not working right now \n. @Daniel15 @cchamberlain can everyone test on the latest version, beta 26?\n. Do you want to make the fix in a PR?\n. Just wanted to check if you wanted to (maybe you would of already then), otherwise I can\n. https://github.com/lerna/lerna/commit/02ffb9620e03e021ae75c4aa05f7d977596a32f0, thanks\n. is it an issue with beta.20 only? maybe we should revert the sync-exec package change and then either find another way or not support node 0.10\n. getVersionsForUpdates gets the next version to update to. If you're package is currently v1.0.0 and update it and do lerna publish --repo-version it doesn't know what version you want to update to. If you picked the same version you would get an error that it is trying to publish an existing version.\nIf you look at the other if/else branches in that code, it does 4 different checks otherwise (independent vs non-independent and canary vs non-canary). Another option that I want to add in would be using a github label/commit prefix to specify patch/minor/major so you wouldn't need a prompt.\n. > so we were thinking about having developers increment the versions manually using lerna publish --skip-npm\nI see, so you already updated the package.json version and want a way to use that, sounds ok to me maybe --package-version is the way to go here\n. In https://github.com/lerna/lerna/issues/236 now. closing\n. From http://staltz.com/setting-up-a-javascript-monorepo.html: packages are also in the root directory for https://github.com/cyclejs/cyclejs\n. There's already a few prs for windows - #230 like you mentioned as well as https://github.com/lerna/lerna/pull/171, https://github.com/lerna/lerna/pull/141. I would just rebase those changes into yours which has a lot of the work already done\n. Yeah there was https://github.com/lerna/lerna/pull/236#discussion-diff-70688445 so need to look at the test output more carefully- maybe it just needs to be rebased?\n. Yeah lets do it in a follow up pr then? It's been a too long for these changes so we should get them in.\n\ud83c\udf89 \n. Maybe you can look at https://github.com/lerna/lerna/pull/236 for reference, not sure either\n. Thoughts on moving this to lerna bootstrap-link or moving the old bootstrap to lerna boostrap-proxy?\n. I don't think we need the proxy method if symlinks work though. We should work on the lerna repo as our next priority so things can move faster outside of lerna\n. @rygine Thanks for your patience and work on this one! Hopefully we don't have to use the proxy method anymore\n. I see you are using beta.13, does updating help? (I know there are still some issues with logging)\n. Yeah we can talk about doing it by default later\n. Yeah that is an issue with non-independent mode in general since bumping 1 package means all packages will need to be updated to major version in the next update?\n. Ah it's probably since I removed 0.12 from the tests. No reason, I'l add both back\n. updated\n. Yeah makes sense. Maybe lerna exec should output the folder/package it is running from (or under a flag too)\n. Looking at the other publish flags, should we also change lerna publish --canary to lerna publish --version canary or something?\n. \ud83d\udc4d \n. Yeah there wasn't any description/context\n. Oh \ud83d\udc4d \n. Yeah \ud83d\udc4d \n. lerna import takes a path to a local git repo not a url like https://github.com/fusionstrings/tridev.git although it could potentially be a feature\n. Ah good point.. didn't really think of that at the time..\n. Can do this later\n. totally can, just gota rebase + move babel-eslint and plugins back since configs can't specify plugins yet (https://github.com/eslint/eslint/issues/3458)\n. Does either lerna run or lerna exec not cover it?\nhttps://github.com/lerna/lerna#run lerna run test would already run npm test in each package that has it\nIt sounds like instead you are saying you want something like a global lerna run test so you don't have to define it in each package? \n. We could do an option to not publish to the temp dist-tag which would fix this. (also fixes the readme issue technically as well). The only reason why we publish to lerna-temp then latest is to prevent publishing 1 package that succeeds when the others fail though if that makes sense.. I don't think we need the =* if we do this.\nbasically need to skip around doing\nhttps://github.com/lerna/lerna/blob/aeb775d1fec9988f9165cbfad82db2d4fb796c7b/src/commands/PublishCommand.js#L356-L408. Done in https://github.com/lerna/lerna/issues/620. Ah, yeah I just rebased with your wip branch. we'll want to use something like https://github.com/cloudflare/cf-ui/tree/master/scripts right?\n. Hmm that shouldn't be happening - https://github.com/lerna/lerna/blob/master/src/commands/PublishCommand.js#L394-L404\n. \ud83d\udc4d - can merge https://github.com/lerna/lerna/pull/192 first \n. Looks good to me! whoo merging on the \u2708\ufe0f \n. \ud83d\udc4d \n. Right npm run build does \"build\": \"babel src -d lib\", which compiles everything in src into lib.\nWhy do you need to push lib to github? Oh, well we modify the src files even though we are eventually running the lib files.\nIf you need to test your branch you can use npm link or even copy paste lib into node_modules\n. Thanks\n. The website repo is https://github.com/lerna/website - feel free to make a pull request to change it!\n. https://github.com/lerna/website/pull/5\n. What was the thinking behond making this an option? I think we would want this as default if it's the same behavior as npm?\n\ud83d\udc4d  though/\n. \ud83d\udc4d , easy to review\n. @thejameskyle I think it might of been better to discuss instead of closing? I think there were some discussions on slack as well and it might of felt weird to just close it and now lock the issue like that (even if you guys disagree). (I don't have an opinion on the particular issue atm)\n. Yeah it probably should of been 2.0 a while ago - I think we're just not sure the direction.\nI think we should make it a lerna repo before the 2.0 release though? https://github.com/lerna/lerna/issues/174.\n. Done in https://github.com/lerna/lerna/pull/329\n. Oops that was only for lerna updated\n. Right now it's node 0.10 but we could remove support since support is ending. I mostly kept it since babel supports node 0.10 still\n. cc @kittens @thejameskyle \n. > Make sure to hoist your dev dependencies to the top level and use yarn for that :)\nA good idea \ud83d\ude04, also try out --hoist to move up the devDeps (was added in https://github.com/lerna/lerna/releases/tag/v2.0.0-beta.35). Or can do it manually like we have in Babel. Curious what we need to do in Lerna that Yerna/oao/other tools are doing to support Yarn. Obviously we are going to be much slower to implement but I'd like to see this happen (since I would want it for Babel). In https://github.com/lerna/lerna/releases/tag/v2.0.0-beta.38, stay tuned for updates on Yarn's side in the near future!. Hm ya, I haven't had time to look into it, for some reason failing on node 4 for Babel https://github.com/babel/babel/pull/5396. I guess this was done in https://github.com/lerna/lerna/pull/386 already? Thanks for the work thou!. Might of been a while ago so I forgot - just that users wanted to specify versions before hand for CI and I wanted to use something like semantic release as well (github labels/commit message)\n. Looks like this was done in https://github.com/lerna/lerna/pull/367, need to make a release. Would it just be a pre-canned message or a prompt? Should be simple to do as an option \ud83d\udc4d \n. The relevant code is \nhttps://github.com/lerna/lerna/blob/524377cdc767afe50f1e2b4dd4f91d6df8934974/src/commands/LsCommand.js#L11-L12\n. I think this is what the canary feature should be doing (there are some open issues for it)?. Well lerna will only published packages that have updated using something like git diff (at least it shouldn't). Thanks!!. awesome. Ok released beta.36!. Babel uses codecov https://github.com/babel/babel/commit/db67d7fdce4feed8c2a1aaa4ee353eb4fd60a5df also does es6 coverage. Yea I don't think we would want lerna to do a git add . or commit for you? You would make all your changes and then run publish. It only creates a new commit for a package.json/version change. Thanks \ud83d\ude04 , we also have a slack if you want to join: https://slack.lernajs.io/. lol that's funny. Tested in the Babel 6.23 (npm link) release so, seems like it worked!! (and not much celebration since we had a different regression). We can make the breaking change but ok +1. @timdp Yep! That requires a rewrite of Lerna into Yarn and would likely take more than a little while. For everyone that wants to continue using Lerna in the meantime there's is and why we continue to work on in the first place. Thanks @wincent (first PR too \ud83d\ude04). anything that gives more info like a dryrun type command sounds good to me. offtopic: I know you mentioned you were frustrated at how things were going with Lerna earlier but I believe things are picking up again so would love to have your contributions (I'd like to work less on Lerna myself), thanks for the issue too!. Yeah probably a bug - free free to edit/merge. That's really cool! although I figured we should just remove that from the readme either that line or just use 2.0.0?. How did you find out about the project? What about the \"About\" section was confusing?\nIf people understand that Package = npm package, then yeah it's possible it could be helpful? Might need to make more to explain that it also means there are node_modules for each folder, including the top level repo. Is the picture providing that much more info that just writing it out in markdown? You can just point a user to the actual github repo which is more interactive as well.\nAt the same time using lerna a monorepo is a specific solution to a problem not everyone has. It's not worth just using for the sake of using just because some projects we see are using since it has it's own complexity/issues.. Curious how this will interop/relate to https://github.com/lerna/lerna-changelog, I guess unrelated then since this assumes the commit message format?. Please don't +1. Yeah it was only intended for backwards-compat in Babel. Like mentioned it wasn't meant for anyone to use, just for Babel since we had 100 pkgs and lots of dependencies where all of them were already using ^ so there was no reason to update all packages.. Also this was only made for the fixed versioning scheme (Babel), and also means that if you make a breaking change in one package that is a dependency you make a breaking change in all of them (why we haven't made a breaking change in babel).. I'm talking about the fixed versioning mode, never intended this flag to be used with independent mode (didn't think about it). I think the issue is that we don't know that if you bump a package A that is a dependency in B whether it is a major version or minor version.. yeah https://github.com/lerna/lerna/issues/742\nit was \"necessary\" because we didn't publish in topologicial order (although now we realize it didn't help for proxies/3rd party npm registries. yeah https://github.com/lerna/lerna/issues/742\nit was \"necessary\" because we didn't publish in topologicial order (although now we realize it didn't help for proxies/3rd party npm registries. yeah same request was made to Babel https://github.com/babel/babel/issues/5091. @popomore we have dropped node 0.10/0.12 as well so it's ok. @popomore we have dropped node 0.10/0.12 as well so it's ok. I'm sorry if it's broken, but I would just revert back, it's easy to revert back to a previous version with lerna since it's just 1 package. Maybe don't use ^ if you are as well.. Yeah it's definetely not handled yet (nothing on npm 5 is supported since we haven't tested). Thanks!. Cool thanks @bestander!. Nice work everyone!. yeah seems to be https://github.com/lerna/lerna/commit/4f4e99f59f8ae78d089b71b2b5350a3ab07d8242#commitcomment-22954721. fine to merge though. \ud83d\udc4d . thanks. Hi Tom!\nYeah we could do that (theres a lot of code that is reaching into internals already haha)\nDon't really have time to do it myself thou cc @evocateur?. nice thats a good change \ud83d\ude1b . Yeah that's what happened, also since we published like 100 pkgs and it would expire in between (had to just turn it off). Great point @kachkaev, it's definitely more of an issue with Lerna given multiple packages even if you have a fast connection (this would be the case with Babel).. Yeah totally not your fault and even if that wasn't the case (congrats by the way \ud83d\ude42), still lack of help overall. Printing this out as part of lerna publish\n. All this does is console.log the packages\n. Sounds good! although no babel on this (yet) - or we only support a certain node\n. Yeah I forgot to run lint after I pasted your snippet - I just added travis which will run lint for now\n. Is this supposed to be git tag, since git tags isn't a command I don't think\n. Just need to not hardcode this in\n. this should be pkg.name right? Would be nice to use destructuring on name here.\nOh or you are passing the actual object here? Either way it looks like this and https://github.com/kittens/lerna/pull/33/files#diff-d70dc1e24279c9a1a5e595ca8a33fe2aR35 should be same right\n. lol pkg.pkg looks weird\n. https://github.com/kittens/lerna/blob/master/lib/utils/checkUpdatedPackages.js#L25\nDo we want to check against the last tag? lastTag = execSync(\"git describe --tags \" + lastTagCommit);\nOr is that another cli parameter to pass in?\n. Ok, I saw in the OP you said last tag too. Yeah for sure\n. Yeah, we're using this as a baseline for the babel changelog https://github.com/babel/babel/releases\n. I think this is good to go in after you add the last tag stuff (I pasted it from another command, and you can make it a util if you want), or I can finish it up\n. Yeah good idea\n. Just commenting here if it was missed (the package.json files will be modified (dependencies and the version)), but we aren't commiting or creating a tag so the git state isn't empty so we reset.\n. Might not be necessary but just checks if its there so it doesn't error out\n. Don't update the version file, and use the current version\n. appends -canary.sha\n. Could refactor ls/index.js to return or something instead of this\n. Do we want to do this by default? (Is this related to another current issue?)\nIf I only modify pkg1 and other pkgs depend on it (say pkg2), then if we publish something that isn't covered in the range then all those dependencies wouldn't be updated.\nEx: in the case of babel-generator, if we only publish that then I think the users who want to use the newer version of it but only use babel-core wouldn't get the update?\nI think since I published babel-generator@6.5.2-canary.ab7533ed I would need to also publish babel-core@6.5.2-canary.ab7533ed so a user who does npm i babel-core@canary would get the updated babel-generator as well\n. :+1: \n. Instead of the getCurrentSHA, we could change this to be a default and either prompt the user or even better just use a passed in sha from the flag (flag.canary). Would be cool to support just passing in a PR number too\n. If we want we can move all these params into an object?\n. We can use this here since it should be set correctly\n. could change the wording here\n. I guess we could move this out into a function\n. Fixed since versions[pkg.name] wasn't working\nIf pkg.pkg.version has already been set, we can just use that everywhere instead of versions[pkg.name] right? In this case, the cross dependent versions are undefined (unless we should modify that instead)\n. https://github.com/hzoo/lerna/blob/publish-dev/lib/commands/publish/updateChangedPackages.js#L46-L58\nin updateChangedPackages we used to only change the updated packages.\nI changed it to run on all packages, and then set the version in pkg.pkg.version = version; at the end we rewrite the package.json\n. lol..\n. maybe better to switch these and do flags.independent check instead of !?\n. Kinda looks weird to see onSuccess(true) when it cancels but not a big deal\n. I see - there's 2 returns: \"master\" and fails lint\n. Not a bad assumption, but we assume the branch is always origin in these 2 lines - I guess that could go in config (https://github.com/kittens/lerna/issues/42)?\n. sorry \ud83d\ude22  same here \n. I think it's cool if we can just note it in the help command/readme, or in the log if we have one when pushing\n. \ud83d\udc4d  \n. Possibly explain that \"setting the repo to independent mode\" means adding the version key to independent\n. I guess we can update this too - Force a new publish.\nCould also explain that it bypasses the updated/git diff check if that's helpful\n. I think find was previously only getting the first dependency?\n. I think it was the case for if a package A depends on package B, and then package B depends on package A\n. Yeah jscs has autofix for all it's whitespace rules, and eslint supports it for some rules now as well.\nRunning eslint --fix on precommit wouldn't always be the best since it can have errors in cases? But yeah you can always just bypass it so though with -n.\n. Ok added some tests? Just copied the other one and made 2 packages depend on each other (which causes the issue)\n. We aren't using Babel polyfill or Babel runtime atm so no but we could\n. maybe a space to align Skip?\n. the style is currently \", if there isn't an eslint rule for it we should have it\n. If we want to be more verbose here, you can mention that the package x is imported into packages/x and maybe an example. You can even use lerna-changelog as the example?\n. Yeah you're right - maybe babel would of been a better example but all good\n. exising -> existing\n. Don't think we have any tests for Repository yet\n. can do packages/${packageName} here\n. Yeah the style has been to usually have whitespace between operators (we should add space-infix-ops)\n. We can merge and leave a TODO/issue to cleanup\n. Could be useful to give the example of just wanting to push a readme update\n. ?w=1 makes it a clean diff\n. can you add the ^?\n. Either that or just a if else\n``` js\npackages.filter(pkg => {\n  if (negate) {\n} else {\n}\n}\n```\n. Do we want to make a specific error message here or no? (if the package path doesn't have a package.json)\nErrored while running ImportCommand.initialize\nError: Cannot find module '/module/package.json'\n. yeah basically module.exports = exports['default']; that was removed in babel 6\n. Could leave a comment of an example package version of why it needs the quotes\n. Yeah that was looking weird\n. does this need to be rebased?\n. Should we just return false if it's private or are we allowing private in the other cases?\n. \ud83d\udc4d  Ok do you want to modify the pr to do that? Don't think we have any tests for this method yet\n. Oh I see I misunderstood. I thought you were agreeing with disabling canary with an early return\n. maybe spaces between the operators though\n. If filterPackages isn't used elsewhere maybe it should be private like _filterPackages and make this method filterPackages\n. Maybe add (only affects publish) like the others?. I guess we need to lint for this?. lol copied it from issue too. /s/interal/internal. the table doesn't render correctly atm - I think you need the |--|--| in between the first/2nd row. Is there a a docs page on yarnpkg.com for workspaces?. looks like a good change \ud83d\ude04 , should probably just turn this array into a set?. ",
    "RickWong": "@hzoo It's functionally ready. Not sure whether @kittens has more feedback.\n. I believe it's already in master: https://github.com/kittens/lerna/blob/2dddce0c8f1550578b1042e65fbccc7d22844d7f/lib%2Fcommands%2Fpublish.js#L148-L152\n. Hey thanks for the comment. How would you like to see this part? Perhaps the check could be moved to the individual command scripts?\n. \u221a Done what you literally said. I've also committed the ls command that I used to test the too-many-arguments warning with :)\n. ",
    "jamiebuilds": "Moving to #44\n. I'm confused, you have some packages in your lerna repo that are private and others that are not?\n. Closing due to inactivity.\n. I don't understand the use case of having public and private packages. If things are public then their source code should be public too. I don't want to support mixing these\n. I use lerna for a ton of private packages, it supports them fine. What you are asking for is local dependencies and mixing of local and remote, and I don't get the use case for that.\n. Could you create an example repo with the structure you have in mind?\n. Okay good luck\n. @kittens any reason we don't just symlink everything?\n. This should be fixed by #34, but be warned that we're not sure if this will cause other issues and we might revert it with another major bump.\n. Symlinking causes other issues with npm, we'll have to figure something else out.\n. It's not, we need to figure it out in another way\n. I want to narrow down the issue in npm and see if it can be patched.\n. @patrickheeney I tried symlinking previously however npm install has weird behavior around installing recursively through symlinks which I don't think is intentional.\n. We can copy all files if that solves things for you for now. I'm just wary about it and I would put it under and unstable flag.\nPlease reserve judgement on lerna though, it's still in its early stages and I want to figure all this out in the coming weeks\n. I don't remember exactly what happens, but it was doing something like trying to recursively install things\n. It fails if the repo does not have any existing tags\n\u279c  lerna-test git:(master) git rev-list --tags\nusage: git rev-list [OPTION] <commit-id>... [ -- paths... ]\n  limiting output:\n    --max-count=<n>\n    --max-age=<epoch>\n    --min-age=<epoch>\n    ...\n\u279c  lerna-test git:(master) git tag foo\n\u279c  lerna-test git:(master) git rev-list --tags\n9cc664aed644dfad93847d2a43e4a737e3107151\n. Done #19 \n. Why would this be git tag it's supposed to list them off?\n. Weird...\n\u279c  lerna git:(master) \u2717 git tags\nv1.0.1\nv1.0.2\nv1.0.3\nv1.0.4\nv1.0.5\nv1.1.0\n. Sorry, I'm rewriting a lot right now, this is going to fall out of date, but I'll make sure its something that we do.\n. Going to take on this PR in the refactored codebase. Is the only thing here that lerna needs to use the package.json#name for more things? Do you know which places those are?\n. Alright, I'll make that happen\n. Moving to: #33\n. I'm going to add more code comments to this\n. Okay this now works well\n. Only doing it on major versions sounds like the best solution. The question is if we recursively look up changed packages or bump them all.\nI'm concerned about how this would interact with #20 \n. Fixed in 2.0.0-beta.4\n. > _Deleted all the unrelated comments about publishing a release so that this issue can focus on testing._\n. I did this\n. This basically just adds support for the folder name being different than the package name.\n. I have a few more things to do before then, should be done within the next day or two\n. Talking to seb about it right now, seems to be working fine for the Babel repo and every test I can come up with. Idk if it was fixed by #31 \n. yolo\n. @hzoo Would you feel okay merging this now? I've been depending on this branch at work and it's been working fine.\n. I'm just going to merge this for now since the next release is going to be 2.0 and I want to make sure everything works with it.\n. The only thing I can think of is if the initial tagging is failing for some reason.\n. @dthree We might just have to close this one as cannot reproduce, but I'm going to add better logging for lerna (#49)\n. If you can give me a reproduction case I can try to diagnose this. However you want to do that is fine, I have a private npm server so I can test out publishing to it\n. Did you get a lerna-debug.log file?\n. I was wondering if we wanted to create a lerna.json file that could track information like \"version\", \"owners\", \"independent\" and anything else that might come up\n. Could just be package.json too. Better than having eight files to track different things.\n. If anyone wants to use scripts for this for now, you can use these: https://gist.github.com/thejameskyle/eba3a918a3db80ddc656\nJust dump those in a scripts/ directory and chmod +x them all. Then create an NPM_OWNERS file and add the current owners' npm usernames on individual lines and run ./scripts/npm-owner-update.sh. The other two scripts are there if you ever want to grant or revoke ownership to users.\n. Yeah, I was working on a PR this weekend for it\n. Move to #115 \n. Yeah just git diff of packages/ or packages/{package-name}/ since the last release. I assume the following would just work:\nlerna diff | diff-so-fancy\n. Moving to #45 \n. It could also just work on top of the package.json\n. Yup\n. I'm going to do this next, doing a couple of things:\n- Accept both lerna.json and package.json#lerna as config options\n  - Defaulting to lerna.json in lerna init unless package.json#lerna is defined)\n- If you run a command other than lerna init I'm going to check for the existence of a lerna config and if it does not exist, I'm going to tell the user to run lerna init\n- In lerna init if a VERSION file exists, I'm going to move the version to the lerna config and remove the VERSION file.\n- For now the only options that you can specify in a lerna config will be version and independent, everything else will come later.\nLet me know if theres anything else you think I should do.\n. Moving to #112\n. I'm thinking I want to do this in lerna.json instead:\njs\n{\n  \"lerna\": \"2.0.0-beta.7\",\n  \"version\": \"independent\",\n  \"publishConfig\": {\n    \"ignore\": [\n      \"test/**\"\n    ]\n  }\n}\n. #118 \n. Actually, I think we should completely rewrite the README before 2.0 \n. Sure, want to make a PR? Otherwise I can get to it tomorrow\n. Do you mean I should change it from lerna-temp to temp?\n. Oh okay cool\n. lerna new maybe?\n. Plenty of other tools use new ember/ng new, rails new, etc\n. Moving to #63 \n. Related: https://github.com/kittens/lerna/issues/27\n. This sounds like a separate issue\n. Fixed in 2.0.0-beta.4\n. Oh like a --dry-run flag\n. I'd rather just the --dry-run flag that give you a detailed run through of what it would do. This requires abstracting away operations that have side-effects into utilities that can be turned off via a flag, which I already wanted to do for logging (#49), I'll take this over because it will require abstraction of a lot of things.\n. It's a tough problem because some things depend on file system state. We need to do more work to read the entire file system that it cares about at the beginning and track it throughout the entire process. This will also help performance because there are places where we are re-reading files we already have in memory.\n. > That's what the --follow-tags option is for, right?\nIt should, can you test out the git push origin --follow-tags on a test repo to see if it works for you?\n\nsince v1.1.0 doesn't actually work for me\n\nWhy doesn't v1.1.0 work for you?\n. Hmm weird, that version of git should support --follow-tags, but I guess we can switch to two separate commands to ensure that they don't fail for anyone\n. Moving to #54 \n. This isn't going to work with #36, does git push git push --tags work for you?\n. That would work too, I'll merge the independent mode PR shortly. \n. @gigabo could you rebase this when you get a chance?\n. Hey @gigabo, just merged #36. Want to update this? I might just grab it and fix it up to merge it this weekend if you don't have time to do it.\n. Thanks!\n. I have to switch between npm profiles for different (public and private) registries\n. I'm going to just do a check at the beginning to make sure that you're logged in to the right registry.\n$ npm whoami\n$ npm config get registry\nLogging in is overkill, but I think the more checks we can do at the beginning is good.\n. heh... I think I'll just leave this open until there's actually CI and tests.\n. The reason this was done previously is because npm was installing over the \"linked\" packages. I wasn't able to figure out why so I reversed the order.\nI can see how this order is a problem for linking deps before they are published. I'll have to look into it more.\n. Fixed in 2.0.0-beta.4\n. Cool thanks\n. > We should wait for people to request since we aren't using it\nYeah that sounds good.\n. Is it worth supporting otherwise then?\n. I haven't tested it on windows, but I fixed the paths issue. Let me know if windows has any issues and I'll reopen\n. The README where? Individual packages should have their own README, the primary one at the root of the repo will not be published anywhere.\n. Weird... we're literally just cd-ing into the directory and running npm publish\n. This bug is hard to debug as I've had no problems with README's (https://www.npmjs.com/package/cf-component-modal)\n. I don't really want to put a hack like that into lerna. The publishing process is already very complex and that adds a lot of complexity\n. Locking this. I want an update just as much as everyone, but please just follow the actual issue on npm: ~~https://github.com/npm/newww/issues/389~~\nEdit (@gigabo): Looks like the npm ticket moved here: https://github.com/npm/registry/issues/42\n(Thanks @ben-eb & @bebraw for pointing that out)\n. @dendril want to create a separate issue for that?\n. Hmm, kinda annoying that this isn't a default that can be overridden. Is there a way to test if a pager supports colors?\n. Hmm makes sense, want to update your PR\n. Thanks\n. I don't understand why this wasn't a problem previously, lerna has always logged here\n. Moving to #71 \n. Closing in favor of #71 \n. Makes sense, it already should be dumping it into lerna-debug.log, but we can modify the logger to output the errors as well: https://github.com/kittens/lerna/blob/cdfd26ec17a4c672ee5f7f415bb0eacb22ea9723/lib/utils/logger.js#L13-L29\n. Well lerna bootstrap is actually really fast if you're only updating one package. However, we should have a larger discussion about instantiating new packages, adding/removing dependencies to them, and destroying them. \n. Cool, moving discussion to that PR\n. Mind rebasing?\n. That makes sense to me, it would simplify things I think.\nHowever, this will make https://github.com/kittens/lerna/issues/27 an issue not just for major versions but for minor and patch versions, so they'll have to be done at the same time.\n. Gonna close this since people should just use Yarn and have lockfiles \ud83d\ude1b \n. #115 \n. @justin-calleja I did this previously and it caused issues so I had to revert it.\n. Merging this ticket into https://github.com/kittens/lerna/issues/11 as a duplicate\n. Well according to travis this replaces deprecations with errors:\n```\n\neslint lib\n/home/travis/build/kittens/lerna/lib/commands/bootstrap/bootstrapPackages.js\n  1:1  error  Definition for rule 'keyword-spacing' was not found  keyword-spacing\n/home/travis/build/kittens/lerna/lib/commands/bootstrap/index.js\n  1:1  error  Definition for rule 'keyword-spacing' was not found  keyword-spacing\n/home/travis/build/kittens/lerna/lib/commands/bootstrap/linkDependencies.js\n  1:1  error  Definition for rule 'keyword-spacing' was not found  keyword-spacing\n``\n. It used to symlink packages, but thats actually a misnomer now as it instead creates a fakepackage.jsonandindex.js` file that point to the real location:\n\njs\nmodule.exports = require('/real/path/to/package-name');\nI need to rewrite the README\n. There was a previous PR about it, I still don't understand the use case of some modules being private and some public\n. 2.0.0-beta supports private packages\n. This is more related to https://github.com/kittens/lerna/issues/27\n. Fixed in 2.0.0-beta.4\n. --confirm does not skip the input prompts, just the confirmations.\n. We really need to solve this problem...\n. Moving to #110 \n. If you are in a separate branch for the older version I assume we can just change:\ndiff\n- git rev-list --tags --max-count=1           # get commit of last tag across branches\n+ git rev-list -n 1 $(git describe --tags)    # get commit of last tag in current branch\n[ref]\n. We don't want to do this because we want files to be manually added because it causes problems otherwise. Try manually git add the files before running lerna.\n. You can put package-specific scripts inside packages/:package_name/scripts/prepublish.js or packages/:package_name/scripts/postpublish.js. If you want to do something before lerna entirely, I recommend just running it before you run lerna with like an npm script or whatever.\n. Sorry I left this for so long, I'm not sure what you are asking for with customizing the publish directory. Do you mean running npm publish in a nested directory within each package?\n. Should this maybe be fixed within node-progress?\n. I just got added to the project by tj, if you want to make a PR we can continue over there\n. Fixed in 2.0.0-beta.4\n. Yeah, we should be recursively look up dependents of changed packages to prompt for version bumps. I'll try doing that now\n. Lerna will now include all cross-dependencies when publishing, if you want to force a new version for absolutely everything you can also use FORCE_VERSION=* lerna publish. Note that I'm going to make that something like lerna publish --force-version * in the next beta release.\n. Outputs:\n\u279c  __lerna git:(master) lerna updated\nLerna updated v1.1.1\nChecking for updated packages...\nChanged Packages:\n- lerna-test-package-2\nDependent Packages:\n- lerna-test-package-1\n. I'm not sure what you mean for either question\n. I'm not sure how to format that because you can have packages with more than one parent changed\n. Fixed in 2.0.0-beta.4\n. What do you mean by this\n. Added in #367 waiting on publish, but gonna close this\n. @Chrisui npm would break, but we might be able to make it happen with https://github.com/kittens/lerna/pull/101 in place now.\n. No it can tell based on what you have in the packages folder.\n. I think our docs mostly cover it at this point for this issue to be closed. Docs are always going to need improvement, don't need to leave an issue open forever about it.\n. What perf issues? It's significantly faster for me\n. Do you have a repo up somewhere that shows this?\n. I might be related to your version of npm, I'll do more testing with npm 2 since I use npm 3 for the most part\n. The original issue has been fixed in #105 \n@ianwremmel if you can demonstrate a perf issue please open a new issue\n. To be clear you do want to publish to npm though right?\n. Okay, I can probably add a --no-commit flag pretty fast.\n. Duplicate of #55\n. Oh I know why it's slower. (I wasn't thinking about the case where stuff is already installed before)\nWe're now doing:\nsh\n$ npm install external-package-1@1.0.0 external-package-2@1.0.0\nInstead of just npm install, so npm is fetching them every single time. This is likely even worse in npm 2.\nWe need to be explicit in what packages we install because otherwise it causes issues with local packages that you have not published yet.\nnpm really should not be fetching anything if the version you are asking to be installed is already installed, but we could also check for that on our end\n. Moving to #125 \n. @cpojer suggested --force-publish which I like\n. > 1. Should the ignore option work for all commands? (this may duplicate the new ignore option for publishing on the publish command)\nNo we definitely don't want to go down the path of that, although it does raise a concern about the naming.\njs\n{\n  publishConfig: { ignore: [\"path/to/file\"] },\n  bootstrapConfig: { ignore: [\"package-name\"] }\n}\nThis doesn't read well... Idk what to call it though.\n\n\nShould ignored packages also be removed from the packageGraph?\n\n\nI haven't really thought through the implementation. However, removing it from the packageGraph means you just never have access to that information which could cause problems down the road when we try to implement something else so I guess I would prefer that it didn't.\n\n\nIs logging ignored packages helpful? If so, is it ok to use the logger within a utility?\n\n\nIf you could log it in as debug information that would be useful for the lerna-debug.log files that get output on errors. And the logger already gets used in utilities so yeah that's fine.\n\n\nIs supporting globs desirable?\n\n\nI don't think that's necessary.\n\n\nWould it he helpful to add an ignorePackages config option to lerna.json to configure package exclusion per command?\n\n\nI'm not sure what you mean by this, but I don't think we should add ignore to every command right now.\n. You mean #168?\n. I need to add tests to this\n. Yeah I need to do more work on errors in general.\nDid you not get a lerna-debug.log file?\n. Yeah, then (unless you deleted it) it never was created which is a bug. Lerna never deletes them, just overwrites them the next time theres a process that errors\n. Is jsnext:main a rollup-specific thing?\n. I wonder if this is a good opportunity to create better hooks into lerna for 3rd-party integration stuff like this. Rather than trying to build in support for a bunch of different tools, we can build in support for extending Lerna.\n. Yeah, once the node community decides what they want lerna will definitely support it.\n. This should just require updating:\n- https://github.com/kittens/lerna/blob/3f84f9a19c76043441655120b66f65db46883997/src/commands/PublishCommand.js#L240-L243\n- https://github.com/kittens/lerna/blob/9246f288b57122bbf1121d4b6910c2232baf35c5/src/Package.js#L30-L49\n. No it's definitely not supported. I was saying that in order to support it those places need to be updated.\n. Ugh I always spell this word wrong. Thanks\n. Thanks for tackling this @joscha \n. Thanks!\n. Yeah, errors and error handling are definitely places I want to be focusing on. I'm not sure what that package would do to help though.,\n. I wouldn't be opposed to allowing the packages directory to be customizable, especially to account for nested directories. However I'm against allowing multiple directories because it would likely add a lot of complexity and I don't really see a huge benefit\n. The problem I have with it is that there's no reason it doesn't work within the packages organization. You could just as easily have \ncarte-blanche/\n  packages/\n    react/\n    source/\n    utils/\n    webpack-plugin/\n. What are the maven requirements?\n. Is customizing the location of the packages directory enough, or does it need to be split into multiple directories for this to work?\n. Okay, I guess we should do it then\n. Running lerna publish --skip-publish and then lerna publish --skip-git doesn't make a lot of sense. You'd effectively be bumping versions twice, and the\u00a0only solution otherwise would be for one to pick up where the last one left off which would be a weird behavior to introduce for the common-case.\nIt sounds like what you really want is a way to specify the next versions to be published by lerna inside CI without having to follow the prompts. sort of like:\n``` sh\nnon-independent:\n$ lerna publish --specify-version minor\nindependent:\n$ lerna publish --specify-version package-1:major package-2:minor package-3:1.2.3\n```\nHow you choose to get these versions into CI is a bit outside of the scope of Lerna, but you could easily write a script to do it.\n. Yeah, I followed that originally. I'm fine with adding a flag to --skip-npm, but my concern is over running lerna publish --skip-npm and then running lerna publish --skip-git to pick up where it left off, because that's not what it is. It's more like --skip-npm and then --only-npm (which is how I would name it), but that would be very unusual behavior to introduce to the lerna publish process and I don't want to do it.\nThere's two options here:\n- Add  something like lerna run that allows you to do something like lerna run npm publish (which would run npm publish in each package) - currently lerna run is for npm scripts so we would need something different like lerna exec\n- Add a way to specify versions for lerna publish like I suggested above. However, because your CI can't commit that doesn't fix the issue for you.\n. \ud83d\udc4d \n. I meant exec as a way of running any command, not just npm commands.\nFor example:\nsh\n$ lerna exec pwd\n/path/to/repo/packages/package-1\n/path/to/repo/packages/package-2\n/path/to/repo/packages/package-3\nSo an npm command would be:\nsh\n$ lerna exec npm publish\n. Thinking more about this could you make it similar to how you pass flags to npm run commands in that you need -- before it?\nsh\n$ lerna exec -- ls -ls subdirectory\nThis will make it easier to add flags in the future:\nsh\n$ lerna exec --debug -- ls -la subdirectory\n. Yeah, I would like to see both of those things\n. How does ^ interact with x.x.x-beta.x?\nAnd my plan in the future is to make the global CLI use the local version if it exists which would be the preferred way.\n. I don't know about the carrot range because I want the version in lerna.json to always match the version in devDependencies. We can either lock it down to the specific version or open them both up using semver.satisfies. What do you think?\n. I'm going to merge this as is for now\n. Cool, thanks @hzoo I also started rewriting the intro here: https://github.com/lerna/lerna/compare/rewrite-readme\n. Hmm, yeah I want to find a way of pulling in the same markdown content. That doesn't need to happen in this PR though\n. Actually I'm thinking we should centralize the documentation in the website repo. We can deal with translations there and it'd be better if everyone was linking to the same place. The one thing we lose is versioning.\n. What would break with current scripts? Are people using the output of Lerna already?\n. So we can do this as a one off, or we can modify PromptUtilities.confirm to accept the cli flags, and if --confirm or --yes or whatever it's named is passed we can just continue on.\nDepends on if we want to implement this globally. @hzoo what do you think?\n. It's in a mergeable state, I just want to think through the usage of prompts that aren't yes/no. Like the independent versioning. Maybe it's acceptable to just ignore that...\n. Actually could you rename --confirm to --yes to match stuff like npm's --yes flag or the yes bash command?\n. https://github.com/timoxley/npm-run\n. I want to encourage as many people to install locally as possible. I wouldn't mind having a separate lerna-cli package just to push people in the right direction. Other packages like gulp have had success doing this.\n. babel-cli doesn't resolve to the local version if you have one installed, it depends on babel-core itself\n. I don't want people messing around with there bash config\n. ping @NogsMPLS \n. Hmm, I'd almost rather extending the existing lerna run command to accept some way of filtering packages.\nsh\n$ lerna run script --matches-packages-idk-what-to-name-this-flag component-*\n. > the downside is that currently anything after the first argument to lerna is treated as the target script name\nI'm pretty sure meow takes care of that for us. But idk\nAnd yeah, I'd be happy to support this in some form. Lets see if you face any challenges when making a PR and work it out there.\n. Oh no #131 didn't update https://github.com/lerna/lerna/blob/master/src/commands/InitCommand.js#L38\n. \ud83d\ude1c \n. Fixed in #147\n. @joscha Can you rebase this onto master?\n. Alright, lets move to #152 then\n. You want to add an .editorconfig file too while you're at it?\n. Thanks!\n. Moving to #152\n. I do like the --scope name for this, nice suggestion.\n. Sorry, I've fallen behind on reviewing PRs because of other stuff going on right now.\nI would personally prefer using a helper for created a scoped set of packages using mini-match. The only reason I'm using inheritance today is to create a shared interface for every command.\n. > maybe that little github email nudge will bring him back\nlol, I don't think you understand how many notifications I get \ud83d\ude1c\nI'm happy with this\n. Hmm, this conflicts with the --version/-v that gets created by meow to show the installed version of lerna that you are executing. But I could see this working with the lerna get command I described in https://github.com/lerna/lerna/issues/133\n. I'm not entirely sure what you mean by this, what's the behavior you want from lerna?\n. I don't think we should get away from the defined structure of the repo, that adds a complexity to the project. Instead I think we should enable you to build it on your own if you really wanted to. I don't see why you would need to though.\n. Can you detail an actionable feature request? I'm not sure what to do with this.\n. I'm gonna have to learn more about how git subtrees work. I don't want super specific things in Lerna when I can open up the api and put them in user-space.\n. Can you push changes to a subtree repo from the parent repo? It seems like this would just cause conflicts all the time. In order to make this a pleasant experience we'd have to abstract away all of the git subtree commands.\nI'm hesitant to do that because I'm want to shift the mental model of Lerna to fit in better with Yarn since the plan is to merge the two tools. In which case the lerna workflow would become less tied to git within Yarn.. There isn't much being done with git right now. Aside from git tag and git commit there is only one other command git push and it's the only thing that interacts with your remote git repo.\ngit tag and git commit can be optional in Yarn+Lerna because packages don't have to exist in repositories. It could even detect if it's a mercurial repo and work with that instead.\nIn Yarn, lerna publish would also have to be broken into two separate commands yarn version and yarn publish which solves the CI-based publish scenario better.. done\n. Nice, thanks\n. Merged in #170 \n. @laurentdesmet is this handled by your PR #236?\n. Okay closing since #236 was merged\n. It was renamed improperly and I want to leave the alias since thats what it used to be called\n. Sorry about the confusion with flag names, I don't want it to turn into a mess, but haven't really thought about it holistically.\n. Manually rebased and merged\n. We've made a few breaking changes in the -beta releases, I'm fine doing this.\n. I really really like this. Thanks for doing this.\nCan you use the name \"external\" instead of \"foreign\"?\n. Can you add a test that --yes works?\n. > --yes was not supported. \nWeird, I thought PromptUtilities.confirm supported that all the time\n. Oh fucking hell, merged another one of your PRs and it needs another rebase. \ud83c\udccf \n. > maybe like lerna import ../generator --prefix generator or just the next be the new folder/package name like lerna import ../generator babel-generator `lerna import ../generator --name babel-generator\nI would prefer just setting a new name\n. Hmm that would be interesting to play around with\n. Yeah I'd like to see this\n. I don't know if I would remove that from the README though, I want people to know that this is really just git and npm behind the scenes.\n. Yeah I've run into this exact issue with React related stuff. I wouldn't mind adding a feature that allowed you to whitelist external dependencies that need to share a single instance that could be linked from the root node_modules.\nI think we'd have to use actual symlinks though... which we may need to explore again\n. Because you would need to symlink it into each package.\n. Errr... How do people want it to work?\n. I'd accept a PR for that\n. Want to open a PR that puts something about that in the README?\n. Without real symlinking this will end up breaking a lot of external packages that use other paths.\n. Yeah, there was an issue with npm creating a bunch of recursive directories. Maybe #263 will fix that\n. #190\n. Yeah, duplicate of #11. There were some issues, needs more investigating.\n. Whoops, yeah my bad\n. #182\n. So optionalDependencies is supposed to make it so that the install does not fail if a optional dependency build fails. I'm not sure how to make that work here\n. That seems like a poor experience when it goes wrong though. There isn't just one developer on a package and if users of a package can't contribute to a repo because of something like this then that will suck\n. Looks good, once this passes travis it's good to merge\n. Oh man I would love a lerna nuke command\n\nMind if I take this?\n\nYeah, go for it\n. Do you think its necessary to add a confirmation dialog before doing it?\n. I'm polling people on it https://twitter.com/thejameskyle/status/740692624839843840\n. > Why not a script in package.json that uses lerna exec -- rm -rf ./node_modules\nWell everyone ends up doing exactly that, so why not just have it included for them?\n. Thanks\n. Nice, this looks awesome. Thanks!\n. Looks like the tests aren't stubbing out npm completely which is causing it to fail in CI\n. I can take a look later. It might help if travis did cat lerna-debug.log if tests failed, so if you want to modify the script to do that it may help you debug CI.\n. Happy to merge this as is. But should there be a flag to force it to reinstall things?\n. Actually no, I'll wait for someone to request that.\n. I was considering at one point to have a replacement install command like this:\nsh\n$ lerna install [package] [dependency][@version] [--save,--save-dev,...]\nAnd if you installed a local dependency with the matching version or no version specified then Lerna would link them together.\nThere's probably a ticket for this already, but if there isn't there should be\n. Merging into #53 \n. This seems like an issue with npm to me\n. This seems like an issue with npm to me\n. How do the relative dependencies work when publishing that module?\n. It would be nice to have other integrations. But with your examples I was hoping to find a way to support stuff like them in one project: https://github.com/lerna/lerna-changelog/issues/23\n. >  as we are on bitbucket.\nWell why can't Atlasssian switch to GitHub :trollface: \nKidding, thats the sort of thing we want to abstract away.\n. It's not that fleshed out, but the basic idea is to have some form of providers that asynchronously return data in a format that can be used by lerna-changelog to generate a changelog file. That way you can swap out providers for different services and workflows.\n. If you want them to exist independently that would be fine, but I really would like to see you all collaborate on something that works for more people\n. I'm pretty sure that the timeout ones are because of something else erroring and causing done() never to be called, not that something is taking very long.\n. I'm not able to follow what is happening here\n. Duplicate of #11 \n. Duplicate of #11 \n. I don't know how good of an idea it is to have many different types of structures between Lerna repos. If someone wanted to build something on top of Lerna there would be way too many things they'd have to consider.\n. Yeah, I want to focus on just one way of handling things, whether that be pseudo-linking or real symlinks I don't know yet.\n. Yeah, I want to focus on just one way of handling things, whether that be pseudo-linking or real symlinks I don't know yet.\n. My understanding of this is that you want more than just the --skip-git flag, you want to make it so that lerna doesn't attempt to git add things that are gitignore'd?\n. My understanding of this is that you want more than just the --skip-git flag, you want to make it so that lerna doesn't attempt to git add things that are gitignore'd?\n. If we are unable to get real symlinks working, I wouldn't mind a system for creating pseudo-linked files like this one, but I want it to be more generic.\n. If we are unable to get real symlinks working, I wouldn't mind a system for creating pseudo-linked files like this one, but I want it to be more generic.\n. Sure, want to add 0.10 to the travis.yml?\n. Sure, want to add 0.10 to the travis.yml?\n. Why circle ci?\n. Why circle ci?\n. Yeah, I don't want circle ci for no reason. I'd rather just add 0.10 to the list of travis versions.\n. Yeah, I don't want circle ci for no reason. I'd rather just add 0.10 to the list of travis versions.\n. Why don't you have a packages directory?\nLerna does not link across separate repos, if thats what you are trying to do then you are misusing it.\n. Why don't you have a packages directory?\nLerna does not link across separate repos, if thats what you are trying to do then you are misusing it.\n. Lerna is a tool for managing single repositories with many packages.\n. Lerna is a tool for managing single repositories with many packages.\n. Idk what that means\n. Idk what that means\n. This issue is a mess, for help with the -4058 error go to #226. If you have a problem with something else, search for an issue and if it doesn't exist create a new one.\n. Put it in your package.json#publishConfig for each package\n. Oh geez, they really should just use the built in way of publishing packages to other registries. I'm not sure something like that should be supported. The publish process is complicated enough\n. See open issues\n. See open issues\n. Yup @gigabo is correct, @swashcap you might be using an old version of Lerna\n. Yup, git init needs to be run in the directory you want first. We should probably make this smarter\n. Not passing a value to --repo-version should be an error.\n. > Is it possible to place my modules in a different directory than packages?\nNo but I'm happy to allow for that.\n\nAlso, is it possible to link packages recursively under the packages folder For instance, with this structure?\n\nNo it is not possible, and I don't think it ever will be\n. See #365\n. We can just add quotes:\nsh\n$ npm install package@\"^1.0.0 || ^2.0.0\" ...\nThis seems to work\n. Moving to #235 \n. This worries me, it's completely changing how packages interact with node_modules in a very breaking way.\n. So you just want stdout to be output at all times?\n. It probably does support it within the individual package directories.\nShould it handle it at the top level or should config be added to lerna.json?\n. In general I would prefer people put stuff like that in every package. I want to keep it so that you could still cd packages/package-name && npm version minor && npm publish and that work fine\n. https://github.com/lerna/lerna/pull/241#issuecomment-232465217\n. This is more complex. If you have a package that gets a major bump and its dependents don't get bumped as well then they are no longer linked packages because they don't satisfy semver ranges.\nI would revert this until everything is covered\n. I think that is an issue regardless, I think it's best we just force all packages to be published to avoid weird states\n. > wait till after dropping node 0.10, 0.12\nwhy\n. --package-version is ambiguous to me, suggestions for a better name?\n. I wonder if this can be combined with --repo-version to make something more pleasant. Even allowing you to specify a version for the prompts.\nsh\n$ lerna publish --version [repo,package,major,minor,patch,1.2.3]\n. I'm aware of that, I've read what you've written and what I suggested covers that use case.\n. Yes, that's what it would do, I'd rather have one flag that combines multiple options of the same type of action than have an individual flag for every single different use case.\n. @davidfateh No need to land everything. If you just want to implement the following, that would be fine.\n``` sh\n$ lerna publish --version [repo,package]\nso that\n$ lerna publish --repo-version\nbecomes\n$ lerna publish --version repo\nand\n$ lerna publish --package-version\nbecomes\n$ lerna publish --version package\n```\n. > Looking at the other publish flags, should we also change lerna publish --canary to lerna publish --version canary or something?\n@hzoo I don't know how that would work with https://github.com/lerna/lerna/issues/277#issuecomment-232456862\n. ehh\u2013 you don't have a watch task running to see whenever you need to run npm install I don't see a need for this\n. > the watch command here is intended to run the build command within packages as i'm making changes\nI missed this, when I first read this I thought it was a watch version of lerna bootstrap. I blame having to wake up at 5:30am this morning\n. Yeah, the addition of watch tools makes it a bit heavy of a dependency but that could be easily fixed with in the long term plan I had for Lerna having a global CLI that calls out to an installed package (https://github.com/lerna/lerna/issues/138). The global cli can have all the watch tools installed globally and be used in tandem. Will just require some refactoring later.\n. oh man\u2013 I was fucking everything up this morning.\n. The way I choose to divide things up is push all common devDependencies to the top-level unless I'm importing those devDependencies within tests or something.\nFor example cf-ui depends on assert-equal-jsx in a lot of packages. Because it is a package that is imported within packages/*/test/*.js \n. You mean making sure that package-a and package-b both depend on the same semver range of lodash (i.e. \"^1.0.0\" === \"^1.0.0\")?\n. Hmm... if there is enough utility in it. I feel like lerna exec -- npm outdated would be what most people actually wanted\n. I'm worried about having canary as an option here because of https://github.com/lerna/lerna/issues/277#issuecomment-232456862\n. Yeah, I would prefer to just remove it.\n. Thanks\n. There shouldn't be any difference\n. I would just copy whatever flag npm already uses for this, I believe it's --no-progress\n. oi, that could be difficult to support.\n. I'm going to close this, we're going to push everyone to using Yarn eventually using a node api and won't be running commands.\n. What? According to my twitter feed, the node people love arguments\n. I cloned and installed your repo locally and used the same version of node that travis was. I wasn't able to reproduce you error.\nI'm going to close this, but if you have any more information that can help me debug then I will reopen it\n. cc @gigabo \n. Rather than errorring out can we be interactive and allow the user to take an action on a commit?\nEven if that means retrying to import over and over, but each time something doesn't work let the user do something that fixes it.\nJust throwing ideas out there\n. Has this started working since Windows support was added?\n. There's a bunch of issues about linking already, closing this\n. Moving to #276\n. Should we prefix this with LERNA_ or something?\n. Can we just follow the normal prompting for versions flow for canary?\n. @gigabo didn't you fix something with this?\n. I think the issue is that we're using an api that stores the buffer until the script is completed rather than streaming it.\n. What would people prefer of those two options?\n. What would be a sane choice for the maxBuffer then?\n. If we were just creating a string out of it would we have to mess with maxBuffer at all?\n. > I think a sane default would be some megabyte but there should be a configuration option in the lerna.json to define it.\nI would like to avoid the default solution to things always being another config option. I want to keep things simple and not end up with users having hundreds of options to configure\n. Maybe, never used it before.\n. It probably makes sense to run those scripts manually in Lerna for compatibility\n. Added in #358\n. cc @joscha @LoicMahieu (looks like you both worked on this command specifically)\n. The bash script works now, but people already want the packages directory to be portable and even be able to split it up into multiple directories. Features like lerna exec abstract away the problem so that Lerna is still scriptable.\n. If you want the lint to be installed at the top-level, whats the reasoning behind putting individual scripts within each package.json for it rather than one at the top-level?\n. Lerna does nothing special with npm dependencies outside of the cross package proxying. It doesn't even technically know about the top level node_modules\n. Duplicate of #11\n. Merging into #389\n. Why not merge?\n. This is missing pretty much the whole implementation\n. I've said this a few places, probably need to write a thing up about it.\nI actually prefer forcing people to duplicate all of these types configs. I prefer when every single package inside a Lerna repo is a fully working npm package. Meaning you could cd into the package and run npm install, npm publish, npm run [script] and all the rest and have everything still work.\nI prefer building tools that are easy to opt back out of, and Lerna very much fits that description right now. I don't want to end up in a place where people need to spend days untangling Lerna from their repos if they don't want to use it anymore. I consider that a feature. \nIn addition to that I think it makes Lerna easier to teach to people. There's nothing special about these packages, there's just a tool that orchestrates them.\nSo for your .npmignore files I would suggest putting them into each directory. I've done it and other projects do it:\n- https://github.com/cloudflare/cf-ui/blob/master/packages/cf-component-callout/.npmignore\n- https://github.com/babel/babel/blob/master/packages/babel-helper-function-name/.npmignore\n- https://github.com/facebook/jest/blob/master/packages/jest-changed-files/.npmignore\n. If you are using independent mode there isn't anything actually stopping you from keeping your packages in lockstep versions.\nI guess it sucks that you'd have to enter the same version a bunch of times, but that seems easier than some complicated to configure and support feature where we're half in independent mode, half in locked mode.\n. I don't know if I'd suggest using Lerna in that way. However, I do like lerna export for other reasons.\nAs I've said elsewhere I like the quality that lerna is easy to opt-out of. Having a lerna export command that maintains history would be cool.\n. Oh wait, I don't see a way for that to work. Commits can easily and often touch things outside of a single package so you'd have no way of cleanly splicing them.\n. This should work now that Lerna bootstrap uses symlinks\n. Yeah I have no idea how to solve this without forcing things to become published packages.\nMaybe you could update your tooling to use Lerna internally?\n. Yeah I think this should be the default and there should be a flag for also installing peerDeps... maybe not even a flag if npm wouldn't even do that\n. What is the official recommended way from npm on how to deal with peerDeps as a package author? To install them as devDeps as well?\n. Merging into #389\n. Moving to https://github.com/lerna/lerna/pull/365\n. I'd rather have consistency, hoisting dependencies has a lot of edge cases that can't be worked around in the npm model.\n. Anything you do here is going to have inconsistency even at an option level. It's the type of feature that you could implement one of ten ways and each person using Lerna is going to want a different thing.\nLerna insists a certain structure, the more that we remove from it the more confusing the entire experience of using Lerna becomes. If people are unwilling to follow the structure they can go off in their own paths.\nFeatures like this aren't worthwhile.\n. >  for any project that uses singleton modules like React\nThis is not true, we were able to use react across packages on https://github.com/cloudflare/cf-ui. Solve the problem where the problem exists don't push it down stream \n. The more functionality you add in Lerna the more you remove the ability to easily extend it with additional bits of functionality. When you remove guarantees you make software harder to consume.\n. Solve this by adding subtractive features like skipping the install step and only doing linking. A continuous stream of additive features will make it more difficult to use. Add hooks, not thirty separate feature requests.\n. I can't say anything right now, but just wait a bit and the performance problem should be solved soon.\n. > Solve the problem where the problem exists\nThe problem of singleton projects doesn't appear in the monorepo. Lerna handles them just fine as they are intended to be installed. If you were working outside of a monorepo in just a bunch of folders it would work exactly this way.\nThis issue arises when you start using something like browserify or webpack, those are the tools that need to de-duplicate things. Set it up there and fix your entire build chain. You're just going to have to solve it twice if you push it down into Lerna.\n\nThere is always a tradeoff between power and ease of use.\n\nThat's not true, prioritize low level APIs for extension, don't build high-level APIs. High level APIs are less powerful and less easy to use. Lower level APIs allow for people to build the things that they need. Read the extensible web manifesto if you need inspiration.\n\nWhat is the answer for devs who want this feature?\n\nThe answer is find a better solution, build on top of Lerna, if you need a hook request it. Don't push every bit of complexity into one location. You likely already have everything you need:\njs\n$ npm install\n$ lerna bootstrap --ignore react,react-dom\n$ npm install react react-dom\nAnd then add your resolves to Browserify and Webpack or whatever tool you are using.\nIf that doesn't work, think of the minimal lowest level API you need to make it work and request that. It's more likely to be useful to others.\n. > I investigated lerna bootstrap --ignore but I thought that only applied\n\nto packages that are part of the Lerna repo.\n\nAh, just as easy to add flags to the bootstrap process that supports not installing them. That's a very quick and clean diff that doesn't require any bike-shedding on the exact semantics.\n. Locking... if you want to continue this issue in a PR, I'll look at it. If you want to add a flag for skipping install of certain modules I would be happy to add that.\n. Does a lerna command run as part of the test suite?\n. Yeah, it probably should have been made an option.\nIs there something you can do to improve the performance of symlinks in Jest though?\n. Why does #332 not solve this?\n. Moving to #365\n. @Daniel15 Do you know how to handle this ^\n. Awesome!\n. @motiz88 are you going to change the dependency to https://github.com/motiz88/command-join/commit/41dfad5710bd29770ece5fb18ff076619128c8db?\n. If you get blocked on merging that into the main project you can do that, I would try making a PR first to see how they respond\n. Can you search for lerna.json across your entire file system to see if it got placed somewhere weird\n. This is a limitation of our use of spawn since it's just using a string. Maybe we can work around it like this: http://stackoverflow.com/questions/11717281/wildcards-in-child-process-spawn\n. Relevant code: https://github.com/lerna/lerna/blob/master/src/ChildProcessUtilities.js#L45-L56\n. Just published a module to handle this: https://github.com/thejameskyle/cross-glob-spawn\nI haven't yet tested it out on windows, but I think it will work since node uses it\n. I'll use it once I can test on Windows\n. Actually, we already have windows being tested in CI. I'll just see what happens.\n. I don't understand the need to do this. If you have dev scripts that you don't want to put in the top level package, why would you want the devDependencies at the top level? (other than file size which I don't think is a concern of lerna) If you want to something globally, I would do it globally.\n. I really don't want to add features like this unless there's a really good reason to do so. If we do stuff like this too often, Lerna starts to become magic.\n. If you want to reference a single thing in each one why not just reference something higher up in the file system? ../../\n. Also if something is being applied to every package, just do it at the top level. mocha packages/*/test/**/*.js or whatever\n. And finally, it's not that big of a deal to just install the same dependency into every single package. You would have done that anyways by having a bunch of separate repos.\n. Thanks\n. Merging into #259\n. This should be fixed by bootstrap using symlinks. \n. > but it really should be packages/babel-core/node_modules/babel-generator symlinks to packages/babel-generator/dist?\nNo it should not, that is not how npm works.. Lerna intentionally does not use the root .npmrc, see my comment over here: https://github.com/lerna/lerna/issues/296#issuecomment-261080345\n. Which package.json the repo-level one or one inside a package?\n. Ah okay, yeah we should validate package.json. But btw, a package.json is considered \"invalid\" if it does not have a name and version according to npm.\n. Yup, in general if there's an error from Lerna that is either not catching something early on or has a non-obvious message feel free to report that because we want to improve the experience\n. Ugh.... What? There's only 89 people. I'll ask Slack\n. Want to try again?\n. I apologize for not preserving your authorship of 10 changed characters, it has since been updated to reflect your contribution to the project.\n. Can you create a repo that reproduces this error?\n. Closes #401\n. I'm considering just using yarn instead of npm client since it's compatible and fixes a lot of issues we've had\n. That being blocked on supporting private packages etc\n. We would have to expose a specific API from Yarn for this purpose. That API would have to expose a lot of internal Yarn implementation details. It would probably be a mistake at this point to add.\nInstead the plan is to merge Lerna into Yarn as \"workspaces\". The Yarn team doesn't have time for that right now, but I'm hoping to get a chance to work on it within the next few months.. @cpojer I've already started working on a fully fledged RFC for it. I can share that soon. Should we be combining stdout and stderr into a single string to keep things in order?\n. Yarn will hopefully figure out the peerDependencies problem that npm currently has and when we switch to Yarn this should be part of that.\n371\n. I don't understand what is happening here, based on the test you updated:\n[\"npm\", [\"install\",\"package-1@^1.0.0\"], { cwd: path.join(testDir), stdio: STDIO_OPT }]}\nIt appears that you want top level dependencies to be installed as part of bootstrap instead of running npm install && lerna bootstrap?\n. ping\n. We're going to switch to Yarn eventually, and we'll use yarn.lock's as part of that.\n. This is an issue specific to other tools (Babel & Jest). Lerna does not do any compiling work with Babel (or with anything else).\n. Moving to #384 \n. Sigh, they really are shooting themselves in the foot working on a separate project. Could've improved that PR so much.\n. Just structurally it makes sense to rethink some things about what \"filtering\" means.\n. Moving to #386\n. Instead of using scope it makes more sense of me to use:\ndiff\nlerna ls [package]\n. You are building the bin files as they are installed?\n. This sounds like an issue with the project setup and npm. Can you create a repo that reproduces it for me?\n. Sorry this was left around, rebase and I'll merge\n. Has anyone else had this problem? I haven't heard any reports of people having issues installing Yarn globally on windows\n. We've discussed this before, @hzoo do you remember what APIs were suggested for this?\n. The other option we have here is to allow people to update the versions in their package.json's manually without running a publish or making any git tags and have a flag in Lerna that will use those versions during publish. It could have validation to ensure that the results of lerna updated have unpublished versions in their package.json files.\nIt could even be automated by a separate command:\n``` sh\n$ lerna pre-publish\ninteractive version updates\nin CI:\n$ lerna publish # maybe doesn't need flag?\nno need for interactive bits\n``\n. Hmm,--include-depsis ambiguous in certain commands I think. Can you rename it to--include-filtered-depsor something similarly descriptive?\n. lol maybe--include-filtered-deps-deps. So the original idea of--include-filtered-depswas to mean include the deps that were filtered out--scopeand--ignore.\n. There do seem to be valid errors in the AppVeyor results https://ci.appveyor.com/project/lerna/lerna/build/1.0.201/job/f6ngx7r1msgcotve#L1069\n. I'm sorry dude... I don't know what is happening in AppVeyor.\n. We should publish master\n. I would prefer this implemented as a flag--messageor-m. Otherwise people will immediately want some kind of template syntax for adding versions and what packages changed, that's just gonna get messy\n. Note that this should not change the git tag that is created, I would like to be able to use that with confidence.\n. Can you create a repo that reproduces this? Two separate npm processes shouldn't be touching the same directory. I'm not sure how this would happen\n. Sorry you went through this trouble, I'm gonna go with the implementation over in #365\n. Merging into #278\n. It might be better to just use whatever field it is already installed into. So if Lerna was installed independencieswe'll just continue to usedependencies`\n. That was intentional I believe.\nWe can do a couple of things:\njs\n$ lerna ls\n- x (private)\n- y\n- z\njs\n$ lerna ls --all\n- x (private)\n- y\n- z\njs\n$ lerna ls --all\n- x\n- y\n- z\n. You're trying to ignore the folder name but your package name is different: https://github.com/MRN-Code/coinstac/blob/master/packages/coinstac-decentralized-algorithm-integration/package.json#L2\n. We should change that to NODE_ENV=lerna-test since that's for our own test suite\n. Ah good point, we can just move it to a method and mock it in the tests\n. Lerna always looks for the last tagged commit. Why does your Jenkins need to tag every build?\n. Sure we could add that\n. Oh do we want a flag for this?\nI was planning on just enforcing the /^v[0-9]+\\.[0-9]+.[0-9]+$/ (vX.X.X) pattern when looking for git tags.\n. There is not\n. Oh, note that in independent mode the tags are different\nlocked      : v[version]\nindependent : [package]@[version]\n. Lerna has not been abandoned. We just maintain many projects.\nThere's a good chance Lerna is going to be merged into Yarn after awhile.\n. I'll leave this open and let people ask questions if they want to\n. There is not, and I currently oppose doing it. I want to wait until Yarn is able to support other languages and see if we can solve all the problems we need to in Lerna before we consider making them into the same tool and what that would look like.\n. Note that the majority of issues in this repo are feature requests. I just went through every single issue in the repo and marked them with tags in their titles.\nThere's very few bug reports and they are mostly small things. More than half of them are just a handful of cross-cutting issues related to stuff like stdout/stderr, globs in commands, error handling, etc.\nIn terms of the features people request, most of them are workflow things, almost all of them can be worked around for now, and only a handful are actually causing serious pain to (some) users.\nI'll go through the PRs next, but as of right now I see no reason for people to be concerned with the state of Lerna.\n. Such as?. Oh my god, when will someone create a CI service that doesn't get choked up all the time?. Duplicate of #161. Does the code from this comment not solve your use case? https://github.com/lerna/lerna/issues/89#issuecomment-200172189. Want to add a test?. object-assigned-sorted was bumped. Question @wtgtybhertgeghgtwtg, how the heck do you remember that username?. Hi @bcoe, thanks for opening this.\nI just wanted to make you aware of some plans for the future. We're planning on merging Lerna into Yarn through \"workspaces\" (sounds like npm has some related plans). I'm not sure a feature like this makes sense to be built directly into Yarn or npm, but definitely on top of it.\nI'm wondering how we can enable you to build features like this on top of Lerna and later Yarn so that you don't have to rethink everything in the future.\nOne thing I've always wanted in Lerna which is part of the plan for Yarn is lerna version. This would match npm/yarn version but for Lerna/Yarn workspaces. This would let you stage changes before publishing them.\nI think this functionality could be built on top of that and give you a lot more flexibility in the future.. I think Lerna should as much as possible try to model what would be built into Yarn or npm. People have and are going to continue building a lot of tooling on top of this functionality and it would be nice if that tooling didn't lock people in place.\nThere's a lot we can build into Lerna as an independent tool, but what's maybe more interesting is using Lerna as an experiment into how we can build features like workspaces into our package managers while finding the right extension points.\nIf we can build conventional-changelog tooling on top of Lerna, that tool can be easily reused if people want to switch to Yarn or npm.. lol, we could rename it --custom-magical-flag-for-babel-and-no-one-else-do-not-use-or-ill-bite-you. The only reason that's okay for Babel to do is because they have a good understanding of Lerna and almost never make major version bumps.. Moving to #707. @wyuenho Using --only-explicit-updates is exactly what got you in that scenario. You would not have had problems if you hadn't been using it, because you would have been alerted to the fact that you were updating more packages than you intended.. When you go to publish a set of updated packages, Lerna looks for the dependents because it needs to ensure that the packages stay in sync. Otherwise your repo ends up in a \"dirty\" state where Lerna is unsure if you intended to pin things to older versions. It will still link them, but they will fall behind (especially in independent mode).\nIf you didn't update dependents when making a major version bump, Lerna's linking would silently turn off and you'd have to go through and manually update everything.\nThe main reason that Babel wants to turn this off is because it exists in a world where npm2 is still in use by many of the project's users and deduping doesn't work as well as it should. The less versions of a dependency that exists the better deduping ends up working.\nWhen you go to publish your updated packages lerna publish will let you know about all the packages being updated, including unchanged dependents. In independent mode it will also ask you to provide a new version for each updated package/dependent to be published.\nThe only time you should ever disable this behavior is when you want to manually pin a dependency to an older version of a package. The only time you should want to do that is when you've made a breaking change and don't want to update everywhere yet. --scope and --ignore exist for this purpose. You can also manually pin a version range (which is what I would generally do).\nPublishing new versions of packages and creating git tags are both really cheap to do. If you are using npm3 or Yarn you should never notice any problems with just publishing new packages all the time.. Just pin your versions, it works just fine.. --force-publish adds packages to the publish, it does not exclude ones that will already be in it. I'm going to merge this, if there needs to be a separate feature request for something to aid with pinning dependents to specific versions then that is a separate issue. --only-explicit-updates was not designed for that purpose and using it that way is incorrect.. Good idea, I'll get started on that. Actually, I'm not sure how we'll be able to do it if we end up adding or removing companies from the list. It will have to be a versioned exception. Probably just easier to have it be custom. Well if some big company wants to help us write generic legal text that can replace this then that would be wonderful. Until then this is the best I'm comfortable attempting to do. Same reason as everyone else that opened this. I think @kittens has resolved this issue. > What are the criteria for inclusion in the ICE Collaborator list?\nPublic evidence that the company has agreed to work with ICE\n\nIf other companies fit the criteria, would this project accept pull requests to add them to the list?\n\nYes. For the record, there are only 69 (nice) lines of code in the repo which are still attributed to you @seansfkelley. Would you like those removed, or would you like your original commits removed from history and have everything rebased on top of it. Both are pretty easy. Lerna is not a subsidiary of Github. If you do not install Lerna, you do not have to worry about this license change. If you do install Lerna, but you are not one of the companies listed in the license or one of their subsidiaries, you do not have to worry about this license change.\nYou may still choose to worry, but you don't have to.. The text below that point is word for word the MIT License, so it is labelled correctly. The license as a whole is the MIT WITH abolish-ice-exception License (or it will be once it is registered with SPDX). maybe. To screw with companies that support ICE, was that not clear?. > The best thing feasible for Lerna at this point is you leaving the project.\nI left the Lerna project a long time ago, I've gone as far as to replace Lerna with a new tool called Bolt.\n\nThe irony is I 100% agree with your politics, but this is not the place to express them.\n\nAll technology is political, open source is especially political. It would not exist if not for political reasons. Open sourcing something is in itself a political act.\n\nI know this wasn't your intention but it sucks if I have to spend my evening checking a bunch of old repos because you'll maybe release this as a patch.\n\nWe'll release it as major\n. > especially as a former Facebook employee... come on\nOnce upon a time I thought I had to go work for those big corporations that I hate in order to do the kind of open source work I want to do. That turned out to be incredibly false. So I fucked off and told them to eat shit.. Cool story. I already said it would be a major version bump. Nice try. Microsoft either refuses to work with ICE in any capacity, or they stay on the list. How about a nicer format like: \njs\nchangedPackages.map(pkg =>  `- ${pkg}`).join('\\n');\n. @kittens is going to complain about the single quotes.\n. \u279c  lerna git:(master) \u2717 git tags\nv1.0.1\nv1.0.2\nv1.0.3\nv1.0.4\nv1.0.5\nv1.1.0\n. Nope, I need the whole pkg object elsewhere.\n. I didn't know what else to do :shrug:\n. > Do we want to check against the last tag?\nOh right duh.\n\nOr is that another cli parameter to pass in?\n\nI think this should just be a simple command to see everything since the last release\n. Maybe this could somehow default to process.env.PAGER\n. Can you pull this into it's own descriptive function?\n. Err... This really worries me, I don't want to do this since it's a very destructive operation. Is there a way you could pass the canary flag into npmPublishAsTemp and avoid having to do this?\n. Just to be more specific can this be packages/*/package.json?\n. Want to put this in gitUtils?\n. Are we actually updating the version in pkg.pkg.version or are we just updating the file?\n. Can you change this to use the logger?\n. \n. Trying to group together canary and non-independent mode since they are similar to one another\n. :expressionless:\n. Yeah, we could attempt to lookup what the tracked remote branch is:\n```\n$ repo git:(branch): git for-each-ref --format='%(upstream:short)' $(git symbolic-ref -q HEAD)\n\norigin/master\n```\n\nI don't know how reliable that would be though\n. export * from src is the correct way to expose everything\n. Can you make this return a boolean instead: \njs\n!!ChildProcessUtilities.execSync(\"git log\");\n. Oh never mind the previous comment, I see what you are doing.\nCould you actually move this to initialize() and create a version of hasCommit that doesn't throw and just returns a boolean?\n. Well it would stop as soon as it found a path where A depended on B. But I guess that doesn't necessarily speed it up because every path is going to be checked anyways.\nThere has to be a way of representing this data that makes it easy to check every path by simply folding dependencies over. But caching works well enough.\n. I don't think I previously handled cycles\n. This should be handling more than just a single argument. It needs to handle things like:\nlerna exec ls -la subdirectory\nIt'd probably be better if you exposed the entire process.argv on this.argv inside commands and then trim the lerna exec from the beginning simply passing the rest through.\n. This error message is no longer valid\n. Should we add a test case for this?\n. I think this can just be: if (this.flags.restrictTo) {\n. Can you fix the indentation in this file.\n@hzoo does jscs do any kind of auto-correction of code style? Or is there another tool that can do that for us?\n. I'm not sure about the name --restrict-to, any other ideas?\n\nAlso (separate from this PR), we really should fine a better way of documenting flags within the CLI help.\n. I think it's better that it doesn't run anything than trying to run everything\n. Yeah, I just don't like style linting, I just want tools that automatically and silently fix it for you.\n. I would consider --restrict-to without anything specified to be invalid input with an error that says so\n. I would rather structure this differently where we don't pass down ignore packages into the package graph and instead we do the check here if the package has been ignored.\nThis should remove a lot of the complexity of this feature.\n. > I haven't really thought through the implementation. However, removing it from the packageGraph means you just never have access to that information which could cause problems down the road when we try to implement something else so I guess I would prefer that it didn't.\nMy comment here was about completely removing packages that have been ignored from the packageGraph. Which you have not done here.\nI'm more concerned about having the logic for checking for ignored packages inside PackageUtilities.getPackages and Package.ignored. Those functions shouldn't have to be modified in order to implement this.\n. I need it to support older versions of node too\n. I don't know if inheritance is the best way to solve this. It should be just as easy to have a util that does this and it will get us away from using inheritance which complicates things\n. > (!flags ||\nI'm pretty sure flags is always an object\nI think you can just do:\njs\nflags.concurrency || 4\n. Just do:\njs\n\"g...m \\\"Init commit\\\"\"\n. Can you add a comment explaining what is happening here?\n. Why is this being set on this instead of just being passed in below?\n. The try-catch should happen in this util. It should be:\njs\nstatic isInitialized() {\n  try {\n    ChildProcessUtilities.execSync(\"git rev-parse\");\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\n. There's probably a better way to format this callback with the err and stderr output. But this is fine for now\n. comments should begin with # for the syntax highlighting to be correct\n. I think theres approximately 7 people in the universe that know what the ^ operator does. I'd rather have something longer that expresses what happens better.\n. This would probably be better:\nsh\n$ npm install --global lerna@^2.0.0-beta\n. This should check err at the beginning and call done(err) if it exists and stop\n. Can you call it something other than cp\n. \ud83d\udc4d \n. How does this handle dependencies of dependencies that haven't been bootstrapped?\n. Instead of writing checks like this, it'd be easier to have an API:\njs\nChildProcessUtilities.poorlyNamed__maybeWaitForEverythingToExit(finish);\nwhere poorlyNamed__maybeWaitForEverythingToExit did all of the above for you.\n. Although I guess that doesn't matter if this is the only place this check is going to happen\n. Why is alpha being turned into canary. We definitely do not want canary #166\n. --update-version [type]       Specify the type of version update: repo, package, canary\n. Object.assign({}, process.env, {PACKAGE_NAME: pkg.name})\n. Could children just be a counter?\njs\nchildren--;\nif (children === 0) {\n  // ...\n}\n. Missing ``\n. Why--update-version \"repo x.x.x\"instead of just--update-version x.x.x`\n. > We can simply say if the flag for --update-version isn't package then test it's a valid semver and move on with repo logic\nThat sounds like a better api\n. I'm tempted to say that we should leave allDependencies as is and have a bootstrapDependencies or filter out peerDeps. Maybe that's optimizing for the future too much though...\nActually... let's just do this, I don't think it'll cause any problems and if we need it in the future it's an easy refactor.\n. I actually wanted to get rid of the lerna version entirely\n. Yeah that makes more sense as an API\n. I don't know...\n. Instead of using !~ in these three places could you do this instead:\njs\ndependentPackages.indexOf(dependency) < 0\n. Ignore should definitely take precedence over scope.\n. I'm not sure why you need to do all this work. You should already have the package graph which will allow you to find the tree of dependencies of a single package.\n. ",
    "antigremlin": "Oh, thanks! Now I know how to escape strings the right way :)\n. ",
    "evocateur": "I've hit this too, it's especially nasty when you're trying to test stuff that is trying to import a subpath generated by Babel (const foo = require('my-sibling-package/lib/foo');). An approach like npm-sync can work for simple use cases, but clearly doesn't scale for a lerna-based monorepo.\nSymlinking is it's own ball of wax, since node's require() always calls realpath on the requested module path and thus it resolves the symlinks and now everything breaks because symlinks are. the. worst.\nMaybe expand the createLinkedDepFiles method to loop over non-npmignored files and require those as well?\n. @liuchong If you\u2019re not publishing any packages, don\u2019t use lerna. Relative imports are not bad.\nThat said, you can add \u201dprivate\u201d: true to the package.json of any package you do not want lerna to publish. Ensure that the private package is not a runtime dependency of anything you do publish, or the dependents will be broken when consumed outside your monorepo.. v2.0.0+ uses (and creates) annotated git tags. I'm fairly certain it was changed in one of the release candidates. https://stackoverflow.com/questions/5002555/can-a-lightweight-tag-be-converted-to-an-annotated-tag#5002886 describes how to migrate your last lightweight tag, which should then fix lerna updated for you.. @rufman I can assert with 100% confidence that lerna publish does create annotated tags. It has been over a year since that functionality was released.. Read the git docs about what the -m flag implies.\n\nOn Jul 6, 2018, at 15:32, Stephane Rufer notifications@github.com wrote:\n@evocateur when I ran lerna publish and then lerna updated the tag that was being referenced was not the tag that was just created, but an earlier one (an annotated tag from before the repo used lerna).\nChecking out the code it seems that there is no -a option in the tag command here: https://github.com/lerna/lerna/blob/master/commands/publish/lib/git-tag.js#L11\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. >Could this be the culprit? ...\n\n@btakita No, --tags is only necessary when you need to also match \"lightweight\" tags, which is not what lerna publish creates, I can assure you.. It probably wasn't annotated, which explains why git describe missed it. Lightweight tags are not appropriate to use for release tags, as documented:\n\nTag objects (created with -a, -s, or -u) are called \"annotated\" tags; they contain a creation date, the tagger name and e-mail, a tagging message, and an optional GnuPG signature. Whereas a \"lightweight\" tag is simply a name for an object (usually a commit object).\nAnnotated tags are meant for release while lightweight tags are meant for private or temporary object labels. For this reason, some git commands for naming objects (like git describe) will ignore lightweight tags by default.. @geekplux If you can provide more details and a consistent reproduction of your error, please open a new issue. Thanks!. Currently just lerna.json. Probably will expand in the 3.0 alpha when cosmiconfig is used, dunno yet.. If you go the package.json route, I would suggest namespacing it under lerna or somesuch, analogous to the way babel and eslint (and others) do it.\n\njson\n{\n  \"private\": true,\n  \"lerna\": {\n    \"version\": \"1.0.0\",\n    \"independent\": false,\n    \"owners\": []\n  },\n  \"devDependencies\": {\n    \"foo\": \"^1.0.0\"\n  }\n}\n. A simpler workaround is to not use default-pager at all, and just inherit stdio.\njs\nchild.spawn(\"git\", [\"diff\", lastCommit, \"--color\", filePath], {\n  stdio: \"inherit\"\n});\nThe advantage to this approach is that people who wish to configure their git's pager behaviour will be respected, and the default should \"just work\" as it doesn't attempt to be fancy (git is pretty decent at colors on a TTY by default).\nNow that I think about it some more, I think inheriting stdio is the way to go.\n. Let me know if you want me to squash the commits, should be good-to-go now.\n. Glad I could help :)\n. I ran it again this morning with the lerna master, with only two modules being published, and somewhat different results:\nsh\nLerna publish v1.1.1\nCurrent version: 0.0.3\nVersion file location: $REPO_ROOT/VERSION\nPackages location: $REPO_ROOT/packages\nChecking for updated packages...\nNew version (Leave blank for patch version): \n0.0.4\nPackages to be updated\n- @zillow/module-a@0.0.4\n- @zillow/module-b@0.0.4\nPublishing tagged packages...\nSetting latest npm tags...\nRemoving temporary npm dist-tag\nAdding monorepo npm dist-tag\n@zillow/module-a                                   \u2562\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u255fRemoving temporary npm dist-tag\nAdding monorepo npm dist-tag\nTo $ORIGIN\n   a9f125e..cd9c2a5  lerna-monorepo -> lerna-monorepo\nTo $ORIGIN\n * [new tag]         v0.0.4 -> v0.0.4\nSuccessfully published:\n - @zillow/module-a@0.0.4\n - @zillow/module-b@0.0.4\nOdd that the progress bar ended halfway. So the repetition of progress output observed previously is probably a really fun async race condition (after a fashion), probably completely dependent on environmental factors. It is difficult to test on live code, though. :/\nI'm tempted to write a PR to adopt npmlog, since it seems to be exactly what lerna needs (modulo the logification, which is a straightforward addition), and is very well-tested.\n. Looks good, thanks!\n. The versions (foo@1.0.0) aren't necessary in this form (npm i foo bar baz...), because npm recognizes they are in the package.json and uses the version range specified there. In other words, if \"glob\": \"^6.0.0\" is specified in dependencies, npm i glob will always install glob@^6.0.0.\nAs for speed, the only gains I can think of would be the omission of the dependencies unique to the local packages, and those are probably minimal at best. Regardless, this sounds like a good way to fix #59. I'll take a crack at it later today.\n. @jacobwgillespie What you describe is quite possible in stock npm (which is what lerna strives to emulate when it comes to publishing): a prepublish script to generate the artifacts and move them in-place, and a postpublish script to clean up the generated artifacts. I don't think you need to run npm publish in a different directory.\nOr, even simpler, just configure \"main\": \"dist/index.js\" in package.json? Use the files array to customize what is included in the tarball, perhaps.. How does this new package.json differ from the original?\n\nOn Mar 1, 2017, at 08:40, Jacob Gillespie notifications@github.com wrote:\n@evocateur you are correct, however in my case we wanted an entirely new package.json inside the resultant build. From what I can tell, that is the only file you cannot change through some combination of options during publishing without resorting to an entirely new directory.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. In general, we try to stay consistent with common npm idioms, such as honoring the package.json as the source of truth for \"how to express this module's dependencies\". We're not likely to implement this extension.. A files array with a generated main is the way to go. If you need a \"flat\" ES module, maybe instead use a rollup bundle in the module field and tree-shake?. Lerna manages monorepos of npm packages, not applications. The location of those managed packages defaults to ./packages in the root of the repository, but it can be configured anywhere in the monorepo (and in multiple locations, should you desire).. @light24bulbs A lot of scriptable options been implemented recently, but not released yet. Trying to finish #1091 first.. ava's pattern here looks really nice. Wouldn't even need that many changes to make work with our patterns.. @gre Forks should never run lerna publish. Lerna also has no opinion on what repository you clone from. --git-remote simply controls which remote the current branch is pushed to, overriding the default \"origin\".. @acostaf please open a new issue with complete reproduction details, thanks . Except git tags are instrumental to how versions are tracked and manipulated. So yeah, it's \"opinionated\" in the sense that my lizard-brain is opinionated about breathing.\n\nSo far, nobody has volunteered to help shoulder the load. As the only active maintainer of lerna, I do not possess the bandwidth or burning urgency for this particular feature. A well-factored, well-tested, and easily-maintained solution would not be rejected out-of-hand.. Thanks for the bump, whoever it was. This is a dead issue, as no pull requests have been forthcoming.. @Alxandr It's not really gonna happen until #174 picks up some steam. The subpath imports technically work now, but I wouldn't recommend that as subpath imports are essentially abusing what amounts to a private API, and is thus not guaranteed by semver (that is, it could break at any patch or minor version).. I'd be interested in driving this, I have some hacking time at work coming up soon.. Aside from a lack of explicit documentation, all of the individual commands are callable from node directly. All of the internals previously exposed as named exports are also available as distinct packages.\nThat being said, there is no (useful) main entry of the lerna package itself, and that could certainly be improved.. @light24bulbs \n\nAre you saying I can do const lerna = require('lerna')?\n\nNo, sorry, that's what I meant with \"no (useful) main entry\". I don't see a huge bonus from that entry, given the myriad individual packages now available.\n\nWhat are the commands that are exposed?\n\nLiterally all of them (with the @lerna scope, I couldn't figure out how to filter that part of the search). Here's how you could run lerna publish without the CLI:\n```js\n'use strict';\nconst lernaPublish = require('@lerna/publish');\nmodule.exports = main;\nasync function main() {\n  const cfg = {\n    cwd: process.cwd(),\n    // additional options...\n  };\nawait lernaPublish(cfg);\n  // nothing really useful returned by the command factory,\n  // but you can chain .then() and .catch() if you wanna\nconsole.log('\ud83c\udf89');\n}\n```\n\nScriptability could go a long way towards making Lerna more extensible.\n\nIt's great that Webpack is so flexible. It's not really one of the goals of lerna right now, especially with so few active maintainers. My focus right now is to make lerna a first-class CLI, using stdout and exit codes effectively to create compound behavior via pipe chains (the unix philosophy).. This was fixed in #507 with the introduction of --hoist.. I believe this has been addressed by the --hoist option.. @arunsn43 The directory name does not have to match the name field of package.json. It merely needs to be unique, and should be as similar as possible (like, the package name without the scope). I use scoped packages in directories that lack the scope name literally every day.. We need to stop mangling the package.json so much during install, this is just a bandaid.. Implemented in b73e19df. Your root node_modules contains lerna itself and many other devDependencies. lerna clean was not designed to be a general replacement for rm, only convenience for removing any node_modules directories under package locations.. @gigabo Can we close this PR now?. A lot of these issues I ironed out when switching to Jest in #635, and they were mostly synchronous fs race conditions during setup/teardown of a given test case. I'm in the process of converting a lot of these synchronous operations into mocked assertions (#714) with additional CLI integration tests.\nI'm going to close this, as Jest did indeed help, among many other recent optimizations.. It's effectively fixed if you --hoist or use yarn workspaces. Not a lot can be done to workaround the symlink issue for an unhoisted install.. I assume he meant the checks in https://github.com/sindresorhus/np/blob/master/lib/prerequisite.js, which seem very reasonable to me.. I have stubs for lerna upgrade and lerna remove in master right now (complementing the existing lerna add), I'm just trying to find time to implement them (as well as a graceful lerna outdated).. --force-publish and --force-publish=* are exactly the same. The necessity to quote shell glob characters when intended as a literal is not unique to lerna.. This was fixed in #758 (v2.0.0-rc.2). I agree that git filter-branch is often the best choice for this sort of thing; I also recognize that filter-branch is almost impossible to generalize (in any useful way), and will almost always be a one-off, custom thing.. Fixed in #684, my apologies I couldn't retain your commit authorship @jpnelson. You have to escape the $, or else it is evaluated prematurely.\n\nOn Jan 7, 2018, at 02:02, Vitali Zaidman notifications@github.com wrote:\nis this on 2.5.1 ?\nthis doesn't work for me:\nlerna exec -- echo $LERNA_ROOT_PATH\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.\n. https://github.com/lerna/lerna/blob/master/README.md#exec has two examples of escaping shell variables.\nOn Jan 7, 2018, at 21:33, Vitali Zaidman notifications@github.com wrote:\ncan you please give me an example? im sure im not the only bash noob around...\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @tdreyno I'd say #426 covers your hacked-in change, since beta 33.. Correct, v2.0.0-rc.1 does not properly increment canary versions yet. With annotated git tags, we have a much more useful git describe --long, though.. I was hoping to get around to proper incrementing with better git describe metadata, but implicit --exact sounds like a decent workaround for the time being.. @alan-agius4 Date.now() gives no authoritative information on the state of the tree when the publish was made. The hash is really intended as build metadata (and thus should be after the prerelease id and other dot-separated stuff, e.g. 1.0.4-alpha.0+deadbeef).\n\nHowever, until we restore the gitHead property that normally appears in the package tarball's package.json after a \"normal\" npm publish, we need to keep it there to provide a breadcrumb back to the exact state that the canary version was published from. (gitHead is missing because .git isn't in process.cwd() when we run npm publish from lerna). The yarn registry is just a proxy for the npm registry, right? This sounds like a yarn client bug.\n\nOn Feb 27, 2018, at 01:12, Pleun Vanderbauwhede notifications@github.com wrote:\nI'm very interested in getting this to work as currently our desired CI release flow cannot be covered with lerna. However, after playing around a bit I noticed that both 1.0.4-alpha.0+deadbeef and 1.0.4-alpha.0+sha.deadbeef are currently not accepted by the yarn registry.\nCommand failed: yarn publish --new-version 2.0.1-build.1519722155+61bd02c2 --tag test\nwarning package.json: No license field\nwarning package.json: No license field\nerror An unexpected error occurred: \"https://registry.yarnpkg.com/@company%2fapp-2: New versions must be valid semver.\".\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Since v2.0.0-rc.2, you can call dependency binaries from the root or leaves in lerna exec. So for the babel case, it's as simple as a regular npm script in your root package.json:\n\njson\n{\n  \"name\": \"monorepo-root\",\n  \"private\": true,\n  \"devDependencies\": {\n    \"babel-cli\": \"^6.24.1\",\n    \"lerna\": \"^2.0.0-rc.4\"\n  },\n  \"scripts\": {\n    \"babel\": \"lerna exec -- babel src -d lib\"\n  }\n}\nnpm run babel and Bob's your uncle.. @antonmedv Just like you do in npm >= 3; that is, they are also specified as devDependencies for the package that specifies the peerDependencies (so tests work, etc). For package consumers, you install them separately.. I believe this was fixed in https://github.com/lerna/lerna/commit/bed393e6b843b1f1559868d24d30dca8ab327440 (#761), released in v2.0.0-rc.2.. This has been fixed, as indicated in the linked issue. Use proper main and files fields in your package.json, do necessary ablutions in prepare lifecycle, problem solved.. And files allows you to include directories in the tarball that results from npm pack.. > that would also just include the \"dist\" in the name.\nYour consumers shouldn\u2019t be aware of package structure.\n. No, this issue was opened to remove a single path item in a subpath import, which is itself user-hostile pattern.. @danielo515 You can configure lerna with a --registry, pass extra arguments (such as --no-package-lock) to bootstrap via CLI or lerna.json, and control the access of a scoped package in each package.json's publishConfig block (just like any other package). We don't read the root .npmrc because we don't control npm's behavior in this regard, not because we hate users.\nHoisting is an installation optimization that takes advantage of the node module resolution algorithm to reduce duplicate work. It is not meant to do anything else.. If you need to test peerDependencies, they need to be specified as devDependencies too. That's just how things work with the weird beast that is peerDependencies.. A roadmap is forthcoming. The engines field is only a warning, as npm3 removed the engineStrict flag. We've already got node >= 4 in the engines field, that's good enough.. If your lerna-managed packages need a transpiler, it needs to run in prepublish and you probably should run lerna bootstrap prior to running npm test (such as from a pretest lifecycle phase).. Run jest from the root, not lerna. I would rename the test files to match the default pattern (*.test.js), and then it\u2019s basically zero-conf (jest does the transpilation for you).\n\nOn Apr 9, 2018, at 16:46, bobbwhy notifications@github.com wrote:\nI am having this issue.\nI am working on a project and try to run the tests with lerna run test.\nI get this:\nCouldn't find preset \"@babel/es2015\" relative to directory \"/Volumes/sites/apis/pheme/pheme_modules/app\"\n(I renamed packages in the settings to [project_name]_modules for auto fill in convenience when using terminal)\nI have tried the modulesPath option, but the error is always the same, showing the same module search path.\nI have all babel deps bootstrapped with the --hoist option, so they are installed in the lerna root.\nThe test command is in the app package as:\n\"test\": \"jest --runInBand\",\nand the jest config in package.json is below: (You will see that I set the modulePath as root, just to see if i could get a different error);\n\"jest\": { \"transform\": { \"^.+\\.jsx?$\": \"babel-jest\" }, \"modulePaths\": [\"/\"], \"testRegex\": \"/test/index.js\" }\nI also tried putting a symlink from [project]/node_modules/@babel to [project]/[package]/node_modules/@babel\nNothing.\nI am now going to try and transpile ahead of testing as per suggestion above.\nAny other ideas more than welcome. I really want to make lerna work for me, but have lost many hours today on it.\nthank you,\nRobert\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. No progress that I'm aware of. Does #607 solve this issue?. I would think --conventional-commits solves this in a more automated fashion.\nOn Jan 25, 2018, at 23:48, George notifications@github.com wrote:\nWould love to see this implemented. Unfortunately, I don't have the time to implement this myself, however, I wanted to share a somewhat hacky solution to programmatically update independently versioned packages. I created a POC script which given a map of package names pointing to a number representing the location of the bump strategy on the prompt, will programmatically answer the prompt. Needless to say, this is very hacky, as arbitrary changes to how the prompt is presented could break this script.\nimport childPty from 'child_pty';\nimport { EOL } from 'os';\nimport { Subject } from 'rx';\nconst enter = EOL;\n/ Option number in prompt /\nconst PATCH = '1';\nconst MINOR = '2';\nconst MAJOR = '3';\nconst publish = childPty.spawn('yarn', 'lerna publish'.split(' '));\n/*\n map of packages to bump strategy\n/\nconst updateMap = {\n  '@xo-union/sdk-membership': MINOR,\n  '@xo-union/store-conversations-redux': MAJOR,\n  '@xo-union/store-membership-redux': PATCH,\n  '@xo-union/store-membership': MINOR\n};\nconst alreadyAnswered = {};\nconst answers = new Subject();\npublish.stdout.on('data', (data) => {\n  const string = data.toString();\nconst waitingForAnswer = string.indexOf('Select a new version for') >= 0;\nif (waitingForAnswer) {\n    const packageName = string.match(/Select a new version for ([^\\s]+)/)[1];\nif (!alreadyAnswered[packageName]) {\n  answers.onNext(updateMap[packageName]);\n  answers.onNext(enter);\n  alreadyAnswered[packageName] = true;\n}\n\n}\nif (string.indexOf('Are you sure you want to publish the above changes?') >= 0) {\n    answers.onCompleted();\n  }\nprocess.stdout.write(data);\n});\nconst subscription = answers.subscribe({\n  onNext([ key ]) {\n    publish.stdin.write(key);\n  },\n  onCompleted() {\n    subscription.dispose();\n/* wire stdin to allow user to confirm changes */\nprocess.stdin.on('data', (data) => publish.stdin.write(data));\n\n}\n});\npublish.on('close', function () {\n  process.stdin.pause();\n});\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Oh yeah, I definitely understand that commit message formats are really hard to scale across a dev org with widely varying experience/interest/workflows. Many of the tools I\u2019ve seen to mitigate this (commitlint, cz, etc via git hooks) have the drawbacks of being Yet Another Tool and aggravating users with rejected pushes/commits.\n. I'm pretty sure we already have most, if not all of the changes from this PR.. Yes, a publishConfig that specifies an alternate registry will be honored. It has to be located in every package, however (./packages/*/package.json), not the \"root\" package.json.\n. We're on inquirer v3 now. Thanks for the contribution!. --skip-git is a poorly-named option, it has never meant \"skip all git operations ever\", it would be more accurate to name it --skip-git-commit-and-push. I took a stab at splitting lerna publish into lerna version && lerna publish a couple months ago, but I haven't landed it yet.. One thing I learned about npm run recently that might help this: calling npm run --json will give you a list of the scripts that exist for a given package. In fact, I'm using it right now in a CI script (with the --parseable flag instead, because bash) to run certain scripts only if they've been defined (e.g, npm run build will fail if \"scripts\": { \"build\": \"...\" } doesn't exist in package.json).\n\nCombined with a little filtering on npm --version, it would seem feasible to determine correctly what script one should be running during \"pre\" and \"post\" phases.. Once I'm back from holiday, I plan on making a compatibility pass to support this and other npm 4+ capabilities.\n\nOn Jul 19, 2017, at 10:31, Federico Zivolo notifications@github.com wrote:\nAre there updates on this? I'm using prepare to compile all my packages' sources but Lerna doesn't still seem to run the prepare script on bootstrap.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @dmfenton @gigabo I'm concerned that there are no tests validating the relative file symlinking during bootstrap, though I do appreciate the direct tests on the Package class.\n\nAlso, it concerns me that there is no restriction against publishing modules that have relative file dependencies (relative file devDependencies don't concern me, as they'll always be in the \"right place\" by virtue of the monorepo). I don't know offhand if npm itself throws an error in that case, so it's worth investigating.. @Brantron This just affects the save-prefix of the dependency (which is \"^\" by default, yielding ^1.2.3; --exact makes it \"\", yielding 1.2.3). @chrisdothtml Ooh, yeah, that does look likely.. @chrisdothtml That looks pretty good to me. A PR with a regression test would be great!\n(If we wanted to get suuuuuper finicky, we could actually set the --src-prefix and --dst-prefix to more ...robust? values, but I think that's an edge case we don't have to worry about right now). A proper public API would go a long way toward disentangling the commands from their CLI particulars, for sure.. This is fixed by #803 . I would think bootstrapConfig in lerna.json would be the natural place for such configuration, consulted in the existing BootstrapCommand when it decides how to \"link\" the sibling dependencies.\njson\n{\n  \"lerna\": \"2.0.0-beta.31\",\n  \"bootstrapConfig\": {\n    \"proxy\": true,\n    \"prefix\": \"/* @prefix etc */\"\n  }\n}\nI suppose you could make bootstrapConfig.proxy also accept { \"prefix\": \"value\" } for slightly better config fluency (answering the question of \"prefix for WHAT?\" in the example above).. For others experiencing this problem, git clean -fdx && npm i --cache-min=Infinity && lerna bootstrap will get you past this particular error.. @scottmas The biggest problem I can see with concurrently is that is has effectively no programmatic API whatsoever, which makes it a non-starter in my opinion. We can no doubt learn some lessons from the code, however.. hmm, guess we have to explicitly disableProgress() instead of assuming it will read it correctly.... That would be great!\n\nOn Apr 28, 2017, at 19:58, Cameron Westland notifications@github.com wrote:\n@evocateur want me to submit a patch?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @trotzig This could definitely use some README documentation, agreed.. I like the idea of a synthetic --watch flag more than overloading --stream.. lerna run --parallel build:watch\nOn Aug 24, 2017, at 23:10, Thomas Reggi notifications@github.com wrote:\nWhat's the current status with this issue? I want to watch multiple lerna packages at once to build each individually with each packages npm run build:watch script.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I am a big fan of the LinkUtilities abstraction.\n\nI am a little concerned about the ambiguity of adding a subcommand that echoes npm link's purpose, but actually does something very different. Would a flag like npm install's --ignore-scripts (which omits running any applicable lifecycle scripts defined in package.json) be more appropriate here?. @kopax No, not at present.. If you're comfortable with allowing CI to make commits and push tags, I would restrict non-canary publishing to master and adopt conventional commits (available via the --conventional-commits lerna flag).\nThe process for automated publishing in CI is not ideal right now, so I'd recommend against it in most cases. I hope to improve this in the future.. Not the only solution, but almost all of the currently-available solutions using only lerna are painful in one way or another.\nsemantic-release-monorepo is another approach.. Well, in that case, I guess why bother with lerna, then? There's lots of logic related to choosing \"what\" to publish. lerna publish --canary would get you most of the way there, but with no record of the changes, and a version number that is really awkward.. Lerna doesn't really support the separation of versioning and publishing very gracefully right now.. Our current maxBuffer is 500KiB (500 * 1024 bytes). Perhaps we should bump that up for lifecycle scripts during lerna publish?\nDoes anyone know what the drawbacks are of specifying an absurdly large number for this config value, aside from potentially egregious memory consumption?. @mrkstwrt A minimal repro in a separate issue will help us figure that out, thanks.. I'm going to close this because the thread has metamorphosed into a completely off-topic flytrap for grousing about #707.\nTo answer the original question, if you packages A, B, and C have no dependency relationship, publishing with changes present in only A & C will indeed ignore B, as has always been the case with lerna. However, if B has a dependency on A or C, it will be bumped, as explained many, many, many times across various issues.. I'm going to close this because the thread has metamorphosed into a completely off-topic flytrap for grousing about #707.\nTo answer the original question, if you packages A, B, and C have no dependency relationship, publishing with changes present in only A & C will indeed ignore B, as has always been the case with lerna. However, if B has a dependency on A or C, it will be bumped, as explained many, many, many times across various issues.. @gaearon Hopefully soon!. I was going to recommend avoiding a git tag -f next before it was changed, but now I'm not sure why git symbolic-ref --short -q HEAD works every time lerna is called except the last time...\nHow are you installing lerna globally? Or is this shell script called from an npm script (the build log is unclear)?. It's unclear where this line and others like it have found lerna in the Travis shell. I would expect it to find the local ./node_modules/.bin/lerna from npm i, but not in a general shell without an explicit npm i -g lerna.. So as near as I can figure, Travis is doing something to a file under .git/ before the after_success phase that is causing an error to occur when executing this command.\nhttps://github.com/travis-ci/travis-ci/issues/4745 seems to indicate as much. The error would be fatal: ref HEAD is not a symbolic ref, if we indeed logged it correctly.... I did a lot of digging, and it looks like we can use a different method to avoid the error (git rev-parse --abbrev-ref HEAD) and be a little more forgiving about operations on detached HEAD when doing a canary release (which doesn't care about committing changes anyway).\nI should have something later today.\n\nOn Mar 14, 2017, at 00:44, Aleksey Guryanov notifications@github.com wrote:\nThanks a bunch. So do you have any suggestions how to deal with it now?\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.\n. If we intend to support automated publishing in CI (where most, if not all, services will do a detached checkout), we'll have to figure out how to recover (in most cases, checking out the branch indicated by a variety of env vars depending on the service...). @Guria Sorry, I got distracted. A separate issue would be great. GitUtilities.getCurrentBranchDescription() should be using git rev-parse --abbrev-ref HEAD, and should not be blocking a --canary publish.. @nicojs That's definitely a configurable value, should the urge to create a PR for --max-buffer=<numBytes> strike.... I'm fairly certain execa already accepts a maxBuffer option, we just need to feed it into our calls.\nOn Apr 22, 2017, at 14:37, Nico Jansen notifications@github.com wrote:\n@evocateur that should be done in execa before we can create a PR here, correct?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @doug-wade sorry for the delay, :shipit: . That's a good point. Always a good thing to build on top of existing functionality.\nOn Feb 14, 2017, at 15:35, case notifications@github.com wrote:\nShouldn't this use the native npm init? Otherwise, it won't adhere to any custom .npm-init.js set and leave the end user with no way to customize it.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. It's too conflicted to apply to the current codebase. I do plan on implementing it soon, however.. It might even be as simple as testing for all three variants of the script (pre{script}, {script}, and post{script}), instead of just the script itself. No need for whitelisting, necessarily, since it's unlikely someone would expect a lifecycle that doesn't support pre/post to work.\n\njs\nthis.packagesWithScript = this.filteredPackages\n  .filter((pkg) => pkg.scripts && (\n    pkg.scripts[this.script] ||\n    pkg.scripts[`pre${this.script}`] ||\n    pkg.scripts[`post${this.script}`]\n  ));. >BTW lerna publish --help doesn't document --force-publish\n@tusharmath That\u2019s intentional.. Lerna doesn\u2019t stop you from running npm publish, it just coordinates multiple packages in the same repository.. We'll need this rebased with conflicts resolved before we can make headway on this.. Ignoring the complexity of resolving the merge conflicts, the prepublish/prepare/prepublishOnly kerfuffle has gotten even more confusing. (For example, do we replicate npm5's --ignore-prepublish flag?)\n\n\nprepublish: Run BEFORE the package is packed and published, as well as on local npm install without any arguments.\nprepare: Run both BEFORE the package is packed and published, and on local npm install without any arguments. This is run AFTER prepublish, but BEFORE prepublishOnly.\nprepublishOnly: Run BEFORE the package is prepared and packed, ONLY on npm publish.\n\n\nSo, at minimum, we're going to need two lifecycle event orders, one for lerna bootstrap and another for lerna publish. Oy. Digging around in the source of npm itself, here's the order as best I understand it (assume \"run lifecycle if present\" for all lifecycle events listed):\nlerna bootstrap:\n1. preinstall\n2. npm install --ignore-scripts\n3. postinstall\n4. prepublish\n5. prepare\nlerna publish:\n1. prepublish\n2. prepare\n3. prepublishOnly\n4. npm publish --ignore-scripts\n5. postpublish\nI don't agree that we need to be prickly about the exact npm version being used. It ignores yarn entirely, for one thing, and it also severely increases the complexity of the commands for a very minimal gain. It's incumbent on the user to choose which lifecycles they support.. @Andarist Go for it!. @pselden Not during lerna bootstrap, as prepublishOnly is meant to be run only during npm publish. As lerna publish always calls npm publish under the hood, it should always be running prepublishOnly (if present) at the normal time that npm does so (per package, not repo-wide).. This is how npm scripts work. \u201cprepublishOnly\u201d only runs during an execution of npm publish.\nYou should rename your custom \u201cpublish\u201d script to \u201crelease\u201d to avoid stomping on built-in npm script lifecyles. Then rename \u201cprepublishOnly\u201d to \u201cprerelease\u201d and it will work as you desire.\n\nOn Jun 14, 2018, at 15:55, Stefan Aichholzer notifications@github.com wrote:\n@evocateur -Using the latest version of lerna and prepublishOnly is never run, not in my case at least:\n\"scripts\": {\n  \"prepublishOnly\": \"npm test\",\n  \"pretest\": \"lerna bootstrap && eslint --quiet .\",\n  \"test\": \"nyc --reporter=lcov _mocha -R spec --timeout 500 test/index.js\",\n  \"posttest\": \"nyc report --reporter=text\",\n  \"publish\": \"lerna publish\"\n  }\nnpm run publish and it goes straight into asking me which version I'd like to assign to the new release.\nIf I use prepublish instead of prepublishOnly it works, but this is causing issues with my CI build, since it's being run as well. Running npm publish . directly works as well with prepublishOnly.\nAny ideas?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. It doesn\u2019t run npm publish for the root package.json, only leaves (packages/*/package.json by default).\nOn Jun 14, 2018, at 18:34, Stefan Aichholzer notifications@github.com wrote:\nThank you @evocateur -Worked!\nHowever, I thought lerna publish always runs npm publish under the hood, so prepublishOnly should also be run, no? -Which part did I miss..?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. If B is never published (a result of adding \"private\": true to its package.json), it certainly should never be specified in A's dependencies, as any consumer of A will never install correctly.\n\nAdding B to A's devDependencies should be fine, and it is not necessary to specify the file: url to get the symlinking for free (the version just has to satisfy version in the root lerna.json).. I'm willing to forgo npm outdated for packages/node_modules (which satisfies all common dependencies from packages/*/package.json), no fancy re-symlinking necessary. I'm more concerned about npm shrinkwrap in the root always failing due to extraneous dependencies.\n\nOn Jan 23, 2017, at 20:32, Ry Racherbaumer notifications@github.com wrote:\n@rygine commented on this pull request.\nIn src/commands/BootstrapCommand.js:\n\n+\n+    // determine where each dependency will be installed\n+    Object.keys(depsToInstall).forEach((name) => {\n+      const {versions, dependents} = depsToInstall[name];\n+\n+      let rootVersion;\n+\n+      if (scope && PackageUtilities.getFilteredPackage({name}, {scope, ignore})) {\n+\n+        // Get the most common version.\n+        const commonVersion = Object.keys(versions)\n+          .reduce((a, b) => versions[a] > versions[b] ? a : b);\n+\n+        // Get the version required by the repo root (if any).\n+        // If the root doesn't have a dependency on this package then we'll\n+        // install the most common dependency there.\n@evocateur i experimented with trying to get commands such as npm outdated to work by symlinking the hoisted deps at the root to the node_modules of each package. this caused lots of issues with the way npm treats symlinks. IMO, it wasn't worth it.\n\none of the other problems i ran into was forgetting to add a dependency to a package's package.json file because it was hoisted from another package and everything worked as expected. i thought of creating a tool for checking these sorts of things, but never got around to it.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. That's fair, as long as we only warn.\nOn Jan 23, 2017, at 20:33, Ry Racherbaumer notifications@github.com wrote:\n@rygine commented on this pull request.\nIn src/commands/BootstrapCommand.js:\n\n\n: ${name}@${rootVersion},\n});\n}\n+\n// Add less common versions to package installs.\nObject.keys(versions).forEach((version) => {\n+\n// Only install deps that can't be hoisted in the leaves.\nif (version === rootVersion) return;\n+\ndependents[version].forEach((pkg) => {\n+\nif (rootVersion) {\nthis.logger.warn(\n\"${pkg}\" package depends on ${name}@${version}, +\nwhich differs from the hoisted ${name}@${rootVersion}.\nyes, this warning has helped me out in the past too, especially if you want to have the same dependency version across all packages.\n\n\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. We definitely have room for improvement when it comes to recovering from failed publishing.. lerna publish from-git will restart the publish if the previous execution pushed upstream successfully but then failed during the upload to the registry. YMMV.. I would consider this fixed by the --hoist option. @danilosterrapid7 do you agree?. I consider the original issue solved. If the peerDependencies problem still exists, please open a separate issue with a repro.. Lerna is not a module bundler (like webpack or rollup), it just coordinates npm package development between related modules.. Parenthetically: I looked into inquirer's tests, and they're solid (and complicated, yikes). We do enough validation of internal PromptUtilities usage that I'm confident these changes are safe.. Yeah, no worries for now, mostly just recording for myself that this was in evidence elsewhere.\n\nWe'll likely have to do a fuller analysis of all the flags and such, not sure all the commands need such filtering...\n\nOn Jan 29, 2017, at 09:14, Robert Gay notifications@github.com wrote:\n@roblg commented on this pull request.\nIn src/commands/CleanCommand.js:\n\nimport PromptUtilities from \"../PromptUtilities\";\n import progressBar from \"../progressBar\";\n\nexport default class CleanCommand extends Command {\n   initialize(callback) {\n+    this.packagesToClean = this.filteredPackages;\n+    if (this.flags.includeFilteredDependencies) {\n+      this.packagesToClean = PackageUtilities.addDependencies(this.packagesToClean, this.packageGraph);\nYep, I mostly just blindly copied the pattern. I think if this were to be extended other commands in the future, it could make sense to pull the check up into Command.js, and modify the filteredPackages there, maybe? I haven't looked closely at that though.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Can you post the contents of (or link to a gist of) the lerna-debug.log file, please?\n\n(it should have been written in the repo root when the error happened). I think the temp file approach is an acceptable compromise, given the other complications. (Many thanks for the deep-dive investigation!)\n\nOn Mar 6, 2017, at 02:41, Pleun Vanderbauwhede notifications@github.com wrote:\nUsing temp files for commit messages with git commit -F seems to work consistently across systems. Could clean this up if this is an approach that would be considered.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. The tempfile approach has the most promise, for a variety of reasons (beyond Windows support alone). We would definitely welcome a PR for this problem based on that.. Fixed in #758 . Fixed in #758 . @joscha I understand this problem, and I could've sworn there were a couple other issues recently with basically the same problem. In any case...\n\nRight now, we are indeed making the assumption that lerna.json lives in the repo root, which we obtain in the normal git plumbing fashion (git rev-parse --show-toplevel). It's robust because it doesn't care what your CWD is, and so on.\nAlternatively, we could use a package like find-up to locate lerna.json, which would largely enable your desired pattern (with the caveat that you'd always need to run lerna commands with $CWD == /maven-project-a/, in your example).\nTODOs, as I see them:\n\n[ ] The Repository class needs to use findUp(\"lerna.json\") to set its rootPath property.\n[ ] We need to resolve the \"chicken vs egg\" problem for lerna init, namely that lerna.json won't exist (and thus all the Repository setup needs to be delayable or re-baseable?).\n[ ] lerna init should accept an optional argument specifying the root directory, otherwise defaulting to process.cwd().\n\nPRs welcome. :). I understand completely, @joscha. We'll leave this open so it's easier for others with the same issue to find.. What happens when you try to query a dist-tag from a registry where the package doesn't exist?\n\nOn Feb 1, 2017, at 15:41, Norbert Csaba Herczeg notifications@github.com wrote:\n@evocateur You mentioned dist-tag for this to apply to as well, but I fail to see what does that have to do with registries. Could you please elaborate on this?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Let's stay on this PR to maintain comment history. Feel free to force push into your branch to correct the errors, no need for a \"fresh\" branch.\n\nWe'll squash merge anyway, so no worries about noisy commits. :)\n\nOn Feb 11, 2017, at 09:52, Norbert Csaba Herczeg notifications@github.com wrote:\nWebstorm totally messed up my repo during conflict resolution, will create a proper one soon. Sorry for the inconvenience!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I too will soon enter the brave new world of auto-publishing from Jenkins, so I am sympathetic to this request. #607 is close to ready, but it doesn't completely cover your case here (since you don't want to increment all versions by a given semver keyword).\n\nIt sounds like we need a flag similar to --scope (although ugh the name) that is also complementary to --cd-version..... @spudly It may very well be an accident that PublishCommand filters out private packages redundantly. It's quite likely due to the fact that we're kind of overloading the concept of \"private\": true to mean \"do stuff to this package but don't actually publish it\" instead of the default \"never publish this package\".\nThe \"all private packages\" use-case seems kind of... \"Why use lerna at all?\" territory.\nFor the second use-case, to be honest, I'm not sure I agree that lerna should support it.\nIndeed, PublishCommand does appear to execute the prepublish phase for all updated packages, regardless of privacy, thus giving you a hook for running webpack/rollup/etc. Presumably this private prepublish generates a tarball somewhere, which an external process then uploads into an artifact repository, and so on.\nAt this point, why is it lerna's responsibility to choose the version number of this build artifact? The private package.json's version property is utterly irrelevant to the deployable artifact being created, as it cannot be consulted before the artifact is downloaded to determine its version (which is what the artifact's filename is for).\nI would like to get @gigabo and @hzoo's input on what the intentions were behind private: true filtering.. That\u2019s literally what happens now. Private packages versioned til the cows come home.. Hosted Dependencies have been supported for some time. They just need a \"committish\" hash (#v1.0.0 or #semver:^1.0.0) that matches the monorepo sibling's version.\nIt doesn't cover the tarball case, however.. Using gitlab from a subdomain instead of gitlab.com might be confusing the underlying library, hosted-git-info.\n\nOn Jul 16, 2018, at 06:10, rwong notifications@github.com wrote:\n@evocateur I tried it out just now and I can't seem to get it to work. I tried it with both lerna version 2.11.0 and 3.0.0-beta.20.\nThe way I had it working before, I had a package \"framework\" set to version 0.0.9 in the package.json. In the package pulling in \"framework\", I would switch between \"framework\": \"0.0.9\" which would symlink it locally, and \"framework\": \"https://git@gitlab.company.com/repo/framework.git\" which would allow the package to be built without lerna (each package is a git submodule with gitlab ci and can be developed as a standalone codebase... I use lerna when making changes to \"framework\" at the same time).\nI tried adding the version as per the examples: \"framework\": \"https://git@gitlab.company.com/repo/framework.git#v0.0.9\" which errored at first, but worked after I created a 0.0.9 tag in gitlab for \"framework\". However, lerna does not symlink it (no symlink in node_modules of the package pulling in \"framework\", and changes made to the local code in \"framework\" are not reflected in the other package.)\nThe gitlab repo is an internally hosted repo with \"public\" visibility if that makes a difference.\nCan you see if I'm doing anything immediately wrong? Otherwise I can try to create a repo to replicate this issue...\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Using gitlab from a subdomain instead of gitlab.com might be confusing the underlying library, hosted-git-info.\nOn Jul 16, 2018, at 06:10, rwong notifications@github.com wrote:\n@evocateur I tried it out just now and I can't seem to get it to work. I tried it with both lerna version 2.11.0 and 3.0.0-beta.20.\nThe way I had it working before, I had a package \"framework\" set to version 0.0.9 in the package.json. In the package pulling in \"framework\", I would switch between \"framework\": \"0.0.9\" which would symlink it locally, and \"framework\": \"https://git@gitlab.company.com/repo/framework.git\" which would allow the package to be built without lerna (each package is a git submodule with gitlab ci and can be developed as a standalone codebase... I use lerna when making changes to \"framework\" at the same time).\nI tried adding the version as per the examples: \"framework\": \"https://git@gitlab.company.com/repo/framework.git#v0.0.9\" which errored at first, but worked after I created a 0.0.9 tag in gitlab for \"framework\". However, lerna does not symlink it (no symlink in node_modules of the package pulling in \"framework\", and changes made to the local code in \"framework\" are not reflected in the other package.)\nThe gitlab repo is an internally hosted repo with \"public\" visibility if that makes a difference.\nCan you see if I'm doing anything immediately wrong? Otherwise I can try to create a repo to replicate this issue...\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. In my understanding, a peer dependency is only ever relevant to the runtime dependencies of a package, not build-time. When expressing a peer dependency, you generally also add it as a dev dependency so you can run tests and whatnot, since otherwise npm does not install it.\n\nFor the case you demonstrated, I would strongly recommend that you either remove the ordering dependency (and the peer), or make C a direct dependency of B. Abusing peerDependencies like this is a recipe for pain, trust me.\n(If B is often used standalone and for some reason you don't want consumers to also download C, then a dev dependency is appropriate). Definitely a dev dependency, then.\n\nOn Feb 5, 2017, at 01:38, Bnaya Peretz notifications@github.com wrote:\nIts relevant for build time because it contains d.ts files\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. That makes sense. Peer + dev dep is a very common pattern for this use case.\nOn Feb 5, 2017, at 11:44, Bnaya Peretz notifications@github.com wrote:\nSo as i see it, its a devDependency and peerDependency\nBecouse i need my package to share the exact same module instance (even when bundled when webpack, which requires additional setup)\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Ooh, then that means our method of identifying \"matching\" local versions is having difficulty with prerelease semver tags (it looks for the same name with a semver.satisfies() version range). So that's quite likely a big part of this bug.\nOn May 16, 2017, at 06:47, Bob Myers notifications@github.com wrote:\nThis occurred to me when the version field for the dependency was of the form v1.5.0-alpha1 or v1.5.0-alpha.1. When I changed the version to 1.5.0 all was well.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Interesting. I imagine that would need to be a special case in our comparison method.. @pascal1990: Don\u2019t use git dependencies. (Yours is not a lerna error, it\u2019s an npm problem)\nOn Jan 22, 2018, at 05:25, pascal1990 notifications@github.com wrote:\n@evocateur Please I have this issue\nweb3@1.0.0-beta.27 postinstall C:\\node\\wiz\\submodules\\oracles-web3-1.0\nlerna bootstrap\nlerna info version 2.8.0\nlerna info Bootstrapping 20 packages\nlerna info lifecycle preinstall\nlerna info Installing external dependencies\nlerna ERR! execute callback with error\nlerna ERR! Error: Command failed: npm install\nlerna ERR! npm ERR! Error while executing:\nlerna ERR! npm ERR! C:\\Program Files\\Git\\mingw64\\bin\\git.EXE ls-remote -h -t git://github.com/frozeman/WebSocket-Node.git\nlerna ERR! npm ERR!\nlerna ERR! npm ERR! fatal: unable to connect to github.com:\nlerna ERR! npm ERR! github.com[0: 192.30.255.112]: errno=No such file or directory\nlerna ERR! npm ERR! github.com[1: 192.30.255.113]: errno=No such file or directory\nlerna ERR! npm ERR!\nlerna ERR! npm ERR!\nlerna ERR! npm ERR! exited with error code: 128\nlerna ERR!\nlerna ERR! npm ERR! A complete log of this run can be found in:\nlerna ERR! npm ERR! C:\\Users\\c-fossoup\\AppData\\Roaming\\npm-cache_logs\\2018-01-22T13_08_22_019Z-debug.log\nlerna ERR!\nlerna ERR! at Promise.all.then.arr (C:\\node\\wiz\\submodules\\oracles-web3-1.0\\node_modules\\execa\\index.js:236:11)\nlerna ERR! at \n{ Error: Command failed: npm install\nnpm ERR! Error while executing:\nnpm ERR! C:\\Program Files\\Git\\mingw64\\bin\\git.EXE ls-remote -h -t git://github.com/frozeman/WebSocket-Node.git\nnpm ERR!\nnpm ERR! fatal: unable to connect to github.com:\nnpm ERR! github.com[0: 192.30.255.112]: errno=No such file or directory\nnpm ERR! github.com[1: 192.30.255.113]: errno=No such file or directory\nnpm ERR!\nnpm ERR!\nnpm ERR! exited with error code: 128\nnpm ERR! A complete log of this run can be found in:\nnpm ERR! C:\\Users\\c-fossoup\\AppData\\Roaming\\npm-cache_logs\\2018-01-22T13_08_22_019Z-debug.log\nat Promise.all.then.arr (C:\\node\\wiz\\submodules\\oracles-web3-1.0\\node_modules\\execa\\index.js:236:11)\nat \nat process._tickCallback (internal/process/next_tick.js:188:7)\ncode: 1,\nkilled: false,\nstdout: '',\nstderr: 'npm ERR! Error while executing:\\nnpm ERR! C:\\Program Files\\Git\\mingw64\\bin\\git.EXE ls-remote -h -t git://github.com/frozeman/WebSocket-Node.git\\nnpm ERR! \\nnpm ERR! fatal: unable to connect to github.com:\\nnpm ERR! github.com[0: 192.30.255.112]: errno=No such file or directory\\nnpm ERR! github.com[1: 192.30.255.113]: errno=No such file or directory\\nnpm ERR! \\nnpm ERR! \\nnpm ERR! exited with error code: 128\\n\\nnpm ERR! A complete log of this run can be found in:\\nnpm ERR! C:\\Users\\c-fossoup\\AppData\\Roaming\\npm-cache_logs\\2018-01-22T13_08_22_019Z-debug.log\\n',\nfailed: true,\nsignal: null,\ncmd: 'npm install',\ntimedOut: false,\nexitCode: 1 }\nnpm ERR! code ELIFECYCLE\nnpm ERR! errno 1\nnpm ERR! web3@1.0.0-beta.27 postinstall: lerna bootstrap\nnpm ERR! Exit status 1\nnpm ERR!\nnpm ERR! Failed at the web3@1.0.0-beta.27 postinstall script.\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\nnpm ERR! A complete log of this run can be found in:\nnpm ERR! C:\\Users\\c-fossoup\\AppData\\Roaming\\npm-cache_logs\\2018-01-22T13_08_22_175Z-debug.log\nnpm ERR! code ELIFECYCLE\nnpm ERR! errno 1\nnpm ERR! ico_wizard@0.2.0 installWeb3: cd submodules/oracles-web3-1.0 && npm install && cd ../../ && npm install submodules/oracles-web3-1.0/packages/web3\nnpm ERR! Exit status 1\nnpm ERR!\nnpm ERR! Failed at the ico_wizard@0.2.0 installWeb3 script.\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\nnpm ERR! A complete log of this run can be found in:\nnpm ERR! C:\\Users\\c-fossoup\\AppData\\Roaming\\npm-cache_logs\\2018-01-22T13_08_22_223Z-debug.log\nnpm ERR! code ELIFECYCLE\nnpm ERR! errno 1\nnpm ERR! ico_wizard@0.2.0 startWin: npm run installWeb3 && npm run generateFlatSoliditySafeMathLibContractWin && npm run generateFlatSolidityCrowdsaleNullFinalizeAgentContractWin && npm run generateFlatSolidityCrowdsaleFinalizeAgentContractWin && npm run generateFlatSolidityCrowdsaleContractWin && npm run generateFlatSolidityCrowdsaleTokenContractWin && npm run generateFlatSolidityCrowdsalePricingStrategyContractWin && npm run compileSafeMathLibExtContractWin && npm run compileCrowdsaleNullFinalizeAgentContractWin && npm run compileCrowdsaleFinalizeAgentContractWin && npm run compileCrowdsaleContractWin && npm run compileCrowdsaleTokenContractWin && npm run compileCrowdsalePricingStrategyContractWin && node scripts/start.js\nnpm ERR! Exit status 1\nnpm ERR!\nnpm ERR! Failed at the ico_wizard@0.2.0 startWin script.\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\nnpm ERR! A complete log of this run can be found in:\nnpm ERR! C:\\Users\\c-fossoup\\AppData\\Roaming\\npm-cache_logs\\2018-01-22T13_08_22_238Z-debug.log\ncould you help me\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. D'oh, I missed that because it wasn't using an instance property (this.logger.warning()). Or, rather, it was added in a recent PR.. It occurs to me, while waiting for Appveyor to get on with it already, that this means the test coverage missed this conditional. \ud83d\ude3f . Yeah, the create sub command doesn't exist yet. Probably will need to be reimplemented, given code drift since the original PR.. Add a ?w=1 querystring to the file diff to ignore whitespace: https://github.com/lerna/lerna/pull/581/files?w=1\n\nLiking this so far!. (Oddly enough, ignoring whitespace made the additions in the ExecCommand test to disappear, so it's not rocket surgery...). I forgot to close this when I actually published v2.0.0 \ud83c\udf54 . That is a rather disturbing oversight in our test cases, thanks!\nif (code) looks like the ticket, as that is pattern used elsewhere (including some callbacks that depend on the \"success\" being null, as they are conventional Node \"errbacks\" (callback(null, result) to indicate succcess).. @abellinii A good place to start would be ...ehh, kinda hard to find. Probably start with questions that you have about the packages config, and then investigate current tests and fixtures for possible demonstrations of current behavior? It's a bit haphazard right now, but it should be a bit more detailed than when this issue was first created.. Add a publishConfig block to the package.json of the scoped package you wish publish publicly:\njson\n{\n  \"publishConfig\": {\n    \"access\": \"public\"\n  }\n}. This is certainly problematic.\nDoes RunCommand.runScriptInPackage really need to re-log the error?\nMy thought is no, clearly the NpmUtilities are handling the logging of the error object itself. Removing the err argument to the error log here is pretty self-evidently a good thing.\nDo both NpmUtilities methods need to log?\nAgain, no. I'd go so far as to merge NpmUtilities.execInDir into NpmUtilities.runScriptInDir, as it is literally the only consumer of execInDir. If merging the methods is a bridge too far, remove the logifyAsync decorator from execInDir.\nDoes Command need to log the execution callback error every time?\nThis is the tricky bit. We'd have to do a lot of digging in the current commands to ensure that removing the error object here (or moving it to a different log level?) doesn't negatively impact the developer experience.\nPRs welcome for the first two questions above. We'll need to dig deeper into the Command changes, if any.\n. The logger appending the error regardless of level certainly is troubling.. Sounds good!\n\nOn Feb 11, 2017, at 11:27, Norbert Csaba Herczeg notifications@github.com wrote:\n@noherczeg commented on this pull request.\nIn src/commands/PublishCommand.js:\n\n@@ -338,14 +338,15 @@ export default class PublishCommand extends Command {\n     });\n\n this.progressBar.init(this.packagesToPublish.length);\n\n\nthis.npmRegistry = this.getOptions().registry;\nMoved to runPreparations() so every command has access to it. I hope it does not count as an overkill :)\n\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Once @doug-wade has a chance to review this, we'll be good to go.. A big complicated (well-commented) algorithm that collects all the dependencies for the entire tree and does a best-effort identification of the \"most common version\" for each dep and installs those first in the root, then loops through the rest of the dependencies and installs anything remaining (if anything, usually conflicting versions of hoisted dependencies) and then does the binary re-linking (if any).\n\nThe interesting parts start here. Indeed, you would expect a clean bootstrap with --hoist to be especially speedy.. I would clean first, install in root, and then bootstrap.\nlerna clean --yes && npm i && lerna bootstrap --hoist\n\nOn May 31, 2017, at 07:17, Prithvi Raju M notifications@github.com wrote:\nPruning all modules before hoist prevents me from trying to cache node_modules,, usually to skip npm spending time to re-install from scratch when my dependencies are not changed very frequently. Any other ways to get around to cache when intended to ?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. You're trying to cache ./packages/*/node_modules (the target of hoisting) in addition to ./node_modules (the source of hoisting)? I'm afraid I don't understand the issue you're having, as the root ./node_modules should stay stable throughout the hoisting process, and that should be all you need with fully-hoisted ./packages/*/node_modules (in which the pruning phase is basically a no-op).. For now, I manually hoist everything, and shrinkwrap the root as well. It's clearly not optimal for large numbers of package dependencies, however.\n\nI need to experiment with npm5's new monorepo-oriented capabilities; between it and yarn workspaces, we might be able to delegate all of this brittle logic to the package manager proper.\n\nOn May 31, 2017, at 22:09, Prithvi Raju M notifications@github.com wrote:\n@evocateur , Now i understand the pruning logic, my bad.\nI feel there should be an option to extract the temporary package.json created that has all the hoisted(computed) dependencies. Right now afaik the following happen:\nBacks up original package.json\nCreate a new package.json(temporarily) that has new computed dependencies. npm install this.\nReplace the backed up package.json.\nShouldn't there be an option where if a flag/config is passed, this temporary file can be extracted out before step 3 happens.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @gigabo Are you satisfied with this now?\n\nI'll look into the conflicts today.. @cif thanks, I appreciate it. I'm also in the process of rebasing, and so far I've found that upstream changes make it really tricksy.... in test/PublishCommand.js, the expectedOpts stuff should really be expectedEnv, allowing the cwd to change correctly in the stub assertions. I'm almost there.. Thanks @cif !. @seansfkelley This is the command in yerna you're talking about, correct?. lerna ls gained a whole bunch of new options in v3, mimicking most of was npm ls provides. It also respects all the filtering options, including --since. Would that be sufficient to consider this issue closed?. I like this idea. How difficult would it be to implement in lerna?. I'm interested in this, but I'm also hesitant because our current testing strategy would in all likelihood be insufficient validation. If I find myself with spare cycles, I'll play with this a bit.\nThanks @seansfkelley!. @natew Can you post (or link to gist) of your lerna.json and attempted command syntax? Thanks!. If you're using package scripts, use lerna run: it already ignores packages that don't contain a given script (such as \"build\"). You could even name the \"flavors\" differently, and invoke lerna run with different arguments.\n\nOn Aug 2, 2018, at 07:00, Jovica Aleksic notifications@github.com wrote:\nI am dealing with similar problems, in my case it's about transpiling and a yarn build step.\nI'm using ugly workarounds.\nSome of my packages just don't need a build step.\nI've been using \"build\": \"echo nothing to build\" in their package.json files for a while.\nI've been using different scopes in package names, in order to use --scope for controlling it.\nFor example, \"name\": \"project/package\" vs \"name\": \"project-lib/package\", then --scope my-project/* to avoid the -lib scope.\nIt all feels wrong..\nWhat did you guys end up doing?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @nfcampos Thanks! Now to investigate why the Travis build failed. --. Yeah, it probably was na\u00efve of me to use the process.pid. I'll see what I can do to make that more robust. (yarn's method seems pretty safe). I run lerna bootstrap from an npm script all the time (postinstall, so it runs whenever I install in the root). It is definitely designed (nay, _intended) to be used as a local executable (from devDependencies).\n\n@psirenny There was no lerna-debug.log output in the repo root after the error? How can we repro this?. @hulkish I use lerna with a private registry every day (via .npmrc config), so I can assure you that particular piece is not broken.. I suspect this is caused by the same underlying issue as #671: the lack of yarn --mutex in concurrent installs. This is the last bug I want to fix before cutting an official v2.0.0 release.. Would a second packages glob in lerna.json solve this? e.g.,\n{\n  \"lerna\": \"2.0.0-beta.37\",\n  \"packages\": [\n    \"packages/*\",\n    \"examples/*\"\n  ],\n  \"command\": {\n    \"bootstrap\": {\n      \"hoist\": true\n    },\n    \"publish\": {\n      \"ignore\": [\n        \"examples/*\"\n      ]\n    }\n  },\n  \"version\": \"$VERSION\"\n}\nOf course, the problem here is that command.publish.ignore operates on package names, not file paths. That's awkward. Alternatively, ensure that all the examples/* packages have \"private\": true in their package.json.\nWith this setup, you'd get the best of both worlds: ease of requiring \"live\" (not published-only) dependencies without the hassle of bifurcated source repositories?. Yes, it would, but if you're hoisting, they'll no doubt go a lot faster.. Yes, seems reasonable.. --parallel is generally more appropriate for watch tasks, though I would recommend running the watcher from the root in most cases.\n\nOn Nov 6, 2018, at 00:46, Jovica Aleksic notifications@github.com wrote:\nIs --stream and --concurrency the way to go when the number of packages increases?\nI have 14 packages currently, and I'm using \"watch\": \"lerna run watch --concurrency 20 --stream\"``.\nI wonder if the mechanism will scale well. Otherwise, I'd need to think about a custom solution (for example a script using nodemon to watch all packages at once)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Tools like jest already run very well from the root over any number of packages scattered across a monorepo. Tools like pectin are designed to run Babel-based Rollup builds with conventional configuration across an entire tree, with watching support built-in.\n\nLerna is not designed to watch your code for you. That is the job of other tools.. LGTM, thanks for your responsiveness @noherczeg!\nIf @gigabo has no objections, I will merge this tomorrow.. These are both available in the latest lerna@canary. I will do a release later today.. We support a custom location for the packages directory (which defaults to ./packages), does that not work?. @joscha Indeed! Thanks for finding this. Closing in favor of #555 . A .npmignore is only used to configure what is included in a package tarball, it does not change what gets linked (via npm link or lerna's symlink strategy).\nReact Native shouldn't be picking up .babelrc files from node_modules, but that's not lerna's bug. To workaround it, move the babel config into the babel property of package.json.. Is this a Webpack process that is triggering this node_modules consumption, or a direct babel-cli call?. I must admit total noobery when it comes to RN, I did not realize it was common practice to publish non-transpiled code and recurse through node_modules during the packaging phase. https://github.com/facebook/react-native/issues/10966 is a well-written overview of this state of affairs. \ud83d\ude28 \nAs for lerna's stance, I'm inclined to stick closer to the idioms and patterns of the larger npm community, which as the linked issue lays out is\n\n\npackage.json's \"main\" only points to ES5 commonJS\nnpm explore foo && npm install && npm test should work\n\n\nI understand the desire to co-locate application and library code, but I'm still leery of it, especially in light of RN's \"generally accepted pattern\" of transpiling node_modules by default.. I've re-titled and re-opened this issue so we can discuss this more deeply, and perhaps get feedback from other RN+lerna users.. My first inclination is toward treating lerna's bootstrap behaviour like npm link, warts and all.. @noherczeg I appreciate the suggestion!. While I agree that it is a bit presumptuous to git init for someone unconditionally, --skip-git was never designed to support working without git. Even skipping the init check won't make your build work, since there are other git commands used during lerna publish to decide what to publish in the first place.. I rewrote the commit message when I merged it, I'm not sure why the changelog generator didn't pick that up: https://github.com/lerna/lerna/commit/d246667b9b8513d2c3ac14a796d9dc04126a1294\n\nWe now check for changes since the most recent tag in the current branch, instead of the most recent tag in entire repository. This allows publishing older versions of a project in maintenance branches, as well as nightly releases from a feature branch.\nAdditionally, we now ensure that the user is in a non-detached branch because we can't publish without a valid git branch.. whoops, forgot [skip ci] \ud83d\ude3f . @akosyakov This really is more of an external validation issue, since nothing (except good sense) really stops you from installing a bunch of modules in a parent directory (or globally, for example) and using them in your module. It'll obviously fail, but that's not in the purview of lerna.. This is one of the reasons I've never felt especially comfortable with --hoist's behavior of installing the dependencies at the root of the repo (instead of the closest common directory, e.g. ./packages/node_modules for the default packages/* location).\n\nI'm assuming your lerna.json looks similar to this:\njson\n{\n  \"lerna\": \"2.0.0-beta.38\",\n  \"packages\": [\n    \"packages/*\"\n  ],\n  \"npmClient\": \"yarn\",\n  \"version\": \"0.0.0\"\n}\nI've had good luck with a yarn root, lerna --hoist (without the new npmClient option), and fully-specified dependencies and devDependencies of those hoisted sub-packages in the root. I don't have to use --npm-client yarn because npm install is never called during bootstrap (which I call from the postinstall lifecycle script, so yarn has already installed everything in the root).\nMy approach is obviously a laborious and error-prone process for projects with many (or conflicting) sub-package dependencies. I did it because of my dislike of --hoist just dumping stuff in the root regardless of what the root package.json specifies. I am in favor of changing the target of --hoist to the closest common directory, but also open to other solutions.. > What if the closest common directory is the root?\nThat's a valid result, certainly, but then we have decisions to make. Disable --hoist when --npm-client is yarn? Add a lerna hoist subcommand that adds missing package dependencies to the root's devDependencies, thus avoiding the yarn nukage?. This is already possible by using a combination of --force-publish and --ignore:\nlerna publish --force-publish=@platform/carousel-gallery --ignore='**'\nLerna is designed to automate the publish decision, and the complicated nature of supporting your use case is intentional.. Are you able to recover the npm-debug.log or lerna-debug.log files generated after that error?\nWhere is your .npmrc located in this case?. I suspect there is a difference in shell variables or resolved configuration between the CI process and your user account. I've never encountered this particular error before, and since I've not used npm 4 that much, I'm not sure if that's a contributing factor as well.. CI all failed for a variety of reasons \ud83d\ude2d . @bcoe Indeed! I'm a big fan of nyc and its underlying utilities.. @hzoo @gigabo @doug-wade I would appreciate a review, when you have a chance. I'm antsy to get this merged so testing further improvements is more robust.\nI realize it's a giant changelist, and I apologize for that in advance. I've gone through the whole thing and put comments on most of the significant bits. The vast majority of the changes were motivated by the multi-process nature of jest (when run locally or on Travis).\nI really wanted to codemod assert into jest's expect() syntax, but I'll save that for another time.\nI'm prepared to help rebase open PRs should conflicts arise.. I'm getting really tired of flapping tests on AppVeyor like this one. Running Jest sequentially for Windows builds really helps avoid this dumb environmental problem (while we address the underlying architectural race conditions with a better testing experience).\n```\n1) BootstrapCommand with hoisting should not hoist when disallowed:\n     Uncaught Error: Call 0 was expected to be: ChildProcessUtilities.spawn(\"npm\", [\"install\"], {\"cwd\":\"C:\\projects\\lerna\\tmp\\test-1489597978044-2\",\"stdio\":[\"ignore\",\"pipe\",\"pipe\"]}, ...), but was actually: ChildProcessUtilities.spawn(\"npm\", [\"install\"], {\"cwd\":\"C:\\projects\\lerna\\tmp\\test-1489597978044-2\\packages\\package-3\",\"stdio\":[\"ignore\",\"pipe\",\"pipe\"]}, , ...).\n      at Function. (C:/projects/lerna/test/_assertStubbedCalls.js:33:15)\n      at C:/projects/lerna/src/NpmUtilities.js:60:33\n      at Function. (C:/projects/lerna/test/BootstrapCommand.js:149:9)\n      at C:/projects/lerna/src/NpmUtilities.js:48:27\n      at C:/projects/lerna/src/logger.js:88:11\n      at FSReqWrap.oncomplete (fs.js:82:15)\nC:\\projects\\lerna\\src\\logger.js:151\n            throw error;\n            ^\nError: ENOENT: no such file or directory, rename 'C:\\projects\\lerna\\tmp\\test-1489597978044-2\\packages\\package-3\\package.json.lerna_backup' -> 'C:\\projects\\lerna\\tmp\\test-1489597978044-2\\packages\\package-3\\package.json'\n    at Error (native)\n    at Object.fs.renameSync (fs.js:681:18)\n    at renameSync (C:/projects/lerna/src/FileSystemUtilities.js:49:8)\n    at Function.descriptor.value (C:/projects/lerna/src/logger.js:107:26)\n    at EventEmitter.cleanup (C:/projects/lerna/src/NpmUtilities.js:32:29)\n    at emitTwo (events.js:92:20)\n    at EventEmitter.emit (events.js:172:7)\n    at emit (C:\\projects\\lerna\\node_modules\\signal-exit\\index.js:77:11)\n    at processEmit [as emit] (C:\\projects\\lerna\\node_modules\\signal-exit\\index.js:150:5)\n    at process.exit (node.js:819:17)\n    at done (C:\\projects\\lerna\\node_modules\\mocha\\bin_mocha:417:32)\n    at afterWrite (_stream_writable.js:355:3)\n    at nextTickCallbackWithManyArgs (node.js:533:18)\n    at process._tickCallback (node.js:431:17)\n```\n(chief among the improvements afforded by Jest: way better diffing of those expected calls). One step closer to dogfooding the whole stack :D\n\nOn Mar 16, 2017, at 17:44, Christoph Pojer notifications@github.com wrote:\nHey, wow, thanks for doing this.\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @JaKXz Indeed, jest does use istanbul's libs! I didn't mean to disparage nyc at all, but I do recall significant differences in the coverage display, even without --all (or jest's equivalent).\n\nWhen I spoke to @bcoe about this disparity, I recall he said something about the source maps were causing problems with dynamically-transpiled ES6, or something to that effect. It was a few weeks ago, and I can't remember offhand where the thread was.\nMore than anything, I think the jest transition yielded more accurate coverage reporting because we are no longer hacking babel-register into mocha, and benefitting from jest's \"batteries-included\" approach.. May I ask why you don't lint globally from the root?\nI understand there is a subset of lerna users that want to keep a given package's script executions and devDependencies \"package-local\", enabling focused development on a single package. I personally find \"repo-global\" linting and test running (with coverage reporting configured in one place) to be extremely beneficial.\neslint, for example, has a --cache option that makes repeated runs on a codebase that is largely unchanged much more efficient.\nThat being said, I am open to the idea of supporting the -- pattern for passing additional args to the script that npm run already supports:\n\n[You] can use custom arguments when executing scripts. The special option -- is used by getopt to delimit the end of the options. npm will pass all the arguments after the -- directly to your script:\nnpm run test -- --grep=\"pattern\"\nThe arguments will only be passed to the script specified after npm run and not to any pre or post script.\n\nIf package.json's scripts.test = \"mocha\", the above example would execute mocha --grep=\"pattern\". Does that sound reasonable?. Yeah, the way we associate \"packages that are in the same monorepo and should be linked\" is a simple semver.satisfy(pkg.version, needVersion), not an actual poll of the registry to resolve any tag (such as latest). So if you use a matching major, like ^1.0.0, it should work again.. Using the latest tag as a local dependency specifier is not supported by lerna.. @rtsao Yeah, I apologize, the PublishCommand tests are a bit verbose and hard to grok for newcomers. In fact, I'm not even sure if we're currently testing the other prompt values.... https://github.com/lerna/lerna/blob/master/test/PublishCommand.js#L143 is one place where you could add the new keyword options, just to make sure it's doing the right thing.\n(I have no idea why the test is telling various packages to go backward, ugh)\n(ugh there are no tests of the existing \"custom\" version prompt)\nScrew it, I've put you through enough torment already.. We're basically discussing a plugin system of sorts, yes? This is pretty exciting, and pretty daunting.\nExciting: this could be the way forward to allow all sorts of edge-casey options (version decisions in CI, lifecycle hooks, etc) to live in plugins instead of (further) complicating an already-complex codebase.\nDaunting: Figuring that all out in a way that doesn't totally break our current panoply of options and gnarlytotally rad callback salad.\nthat being said...\nlerna currently supports synchronous scripts/{pre,post}publish.js per-package lifecycle scripts, which as far as I can tell were historically used to do things that normal npm {pre,post}publish lifecycle scripts weren't able to accomplish(?).\nUnfortunately for this integration, the current pre/postpublish are called well after the git operations (except the final git push --tags origin, confusingly). Would similar scripts/pretag.js and scripts/posttag.js executions inside the commitAndTagUpdates() method be sufficient?\nIndependent Versioning:\n``diff\n   gitCommitAndTagVersionForUpdates() {\n+    this.updates.forEach((update) => this.execScript(update.package, \"pretag\"));\n+\n     const tags = this.updates.map((update) =>${update.package.name}@${this.updatesVersions[update.package.name]});\n     const message = this.flags.message || tags.reduce((msg, tag) => msg +${EOL} - ${tag},Publish${EOL}`);\n GitUtilities.commit(message);\n tags.forEach(GitUtilities.addTag);\n\n+\n+    this.updates.forEach((update) => this.execScript(update.package, \"posttag\"));\n+\n     return tags;\n   }\n```\nFixed Versioning:\ndiff\n   gitCommitAndTagVersion(version) {\n+    this.updates.forEach((update) => this.execScript(update.package, \"pretag\"));\n+\n     const tag = \"v\" + version;\n     const message = this.flags.message || tag;\n     GitUtilities.commit(message);\n     GitUtilities.addTag(tag);\n+\n+    this.updates.forEach((update) => this.execScript(update.package, \"posttag\"));\n+\n     return tag;\n   }\n(or like, make yet another method or two to encapsulate the repetition...). Indeed, I agree. My diffs were just spitballing the \"lowest-impact\" solution, but I'm not particularly wedded to them. There's a fair amount of refactoring involved with any solution, and I would like to get to a place where we can let computers make decisions for us.. Spitballing the interface in lerna.json, using npm scripts as a guide:\njson\n{\n  \"lerna\": \"2.0.0-beta.38\",\n  \"lifecycle\": {\n    \"version\": \"conventional-recommended-bump -p angular\",\n    \"pretag\": \"conventional-changelog -p angular\"\n  },\n  \"packages\": [\n    \"packages/*\"\n  ],\n  \"version\": \"independent\"\n}\nJust like npm scripts, preversion and version run before the version is bumped. We overload it only slightly by making the return value of the version script override the prompting.\npretag I'm a little more ambivalent about, since we don't really want to expose the generation of a tagname in the tag phase (or do we?). Perhaps consistency really is a hobgoblin in this case.\nThe simplest way to pass the important bits of information (the package name, location, and current version) would be ye olde -- followed by positional args <packageName> <location> <currentVersion>. Unless we can get away with just passing the packageJsonLocation and assuming the tool can read it and make intelligent decisions from that point forward?\nThis spitballing doesn't work 100% with the current CLI API of conventional-changelog and conventional-recommended-bump, but it feels more robust long-term than some sort of rickety argument interpolation or (worse?) env var scheme*.\n\nnpm does this with various npm_* prefixed env vars. Maybe robust enough?\n\njson\n{\n  \"lifecycle\": {\n    \"version\": \"conventional-recommended-bump -p angular -l ${LERNA_PACKAGE_NAME} --commit-path ${LERNA_PACKAGE_LOCATION}\",\n    \"pretag\": \"conventional-changelog -p angular -l ${LERNA_PACKAGE_NAME} --commit-path ${LERNA_PACKAGE_LOCATION} --pkg ${LERNA_PACKAGE_MANIFEST}\"\n  }\n}. I think the prefix is useful, especially when streaming. However, it should probably be changed to emit the relative path (packages/foo-module) instead of the package name, since the package name and directory name don't always coincide (e.g., when using a scoped package name but not a scope directory).\nFor your particular use-case, wouldn't it be sufficient to replace the scope prefix with packages? I'm not sure we want to customize log output for a single tool, given the capacity for filtering in the shell and whatnot.. I get something subtly different:\nbash\n[~/github]$ mkdir foo\n[~/github]$ cd foo/\n[~/github/foo]$ lerna init\nfatal: Not a git repository (or any of the parent directories): .git\nInitializing Git repository.\nLerna v2.0.0-beta.38\nCreating package.json.\nUpdating lerna.json.\nSuccessfully created Lerna files\n[~/github/foo] (master)$ ls -l\ntotal 16\ndrwxr-xr-x  9    306B Mar  7 13:24 .git/\n-rw-r--r--  1     91B Mar  7 13:24 lerna.json\n-rw-r--r--  1     60B Mar  7 13:24 package.json\nThat fact that your logging said \"Updating \" instead of \"Creating \" is suspicious.\nWhat are the versions of node, npm, and git in your shell?\nnode --version\nnpm --version\ngit --version. I think you've correctly identified the issue, @khaled. More and more, I think our \"assume the git root is always the place we want\" is a bit na\u00efve. Certainly in the case of lerna init, we should be using process.cwd() instead of git rev-parse --show-toplevel.. Indeed, that is weird!\nI did some digging in this area recently (for much the same reason, though indirectly), and the TL;DR is we should probably start using the --match arg of git describe when calling GitUtilities.getLastTag() in UpdatedPackagesCollector.collectUpdatedPackages() (it's weird that we never use the tag var anywhere else...).\nI think for the purposes of that initial hasTags check, we can just log \"Comparing with most recent tag\" and be done with it.\nI was noodling about git describe --match <glob> to address a slightly different issue when using --independent mode, but it's beyond the scope of this issue (and I kinda forgot what I was actually looking at it for \ud83d\ude1e ) .. I agree that it does tend to get quite verbose with scopes in the tag names when using --independent mode.\nSome questions that occur to me:\n What happens when all managed packages do not have the scope?\n What side-effects would removing full package names from the git tags have (if any)?\nIf we can reach consensus on those (and perhaps other) issues, I would prefer to enable this via lerna.json config rather than an explicitly documented CLI flag (the namespace is getting pretty cluttered, tbh).. We could probably try using the --mutex flag as described in this issue. I'm not sure how that would mess with lerna's --concurrency arg, though.\n@gigabo ?. Given the existing problems with yarn in multiple concurrent processes, I would think per-client presets would be the way to go.. Wondering if we could also employ npm-run-path here, in addition to properly merging process.env.... I suppose I'm left wondering why you would want to split these decisions? If you're just trying to gate a release on tests passing, that should be a prepublish lifecycle (or other agreed-upon process).\nWe definitely want to support automated publishing in CI (something like semantic-release), but I don't think we can safely support this split-decision approach in our current codebase.\nI can see an argument for improving lerna updated or lerna ls to support better filtering and perhaps even a --since=<commit-ish> flag that would make scripts like yours far easier.. Oh, I sympathize! I'm probably going to be in a similar situation at work Real Soon Now\u2122\ufe0f, so it's not completely hopeless.\nHowever, we've got a (growing) complexity problem with the codebase, and I'm trying to keep the stuff that can be an external script externalized for now. My dream is to make various parts of lerna pluggable, so we can simplify a bit of the core code and have cleaner integrations with special cases like yours.. appveyor is soooo slooooowwwww :(. Thanks @noherczeg !. @noherczeg Oops, I found another place we're losing the rest of process.env: NpmUtilities.installInDir()\nMinimal fix seems straightforward:\ndiff\n    if (registry) {\n-      opts.env = {npm_config_registry: registry};\n+      opts.env = Object.assign({}, process.env, {\n+        npm_config_registry: registry,\n+      });\n    }. Do you see that throwability as an extra flag (--strict) or a subcommand (lerna check)?\n\nOn Mar 10, 2017, at 05:44, Jason Quense notifications@github.com wrote:\n\ud83d\udc4d I'd also like the ability to make this throw in certain situations. As it is I wrote up a little script that uses hasMatchingDependency for each package as a lint step, to make sure we don't accidently get out of sync on package versions.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. What does the lerna.json for the monorepo package look like? What is the directory structure of the repository it is contained in?\n\nWith the default packages location ($GIT_ROOT/packages), a lerna monorepo only uses the root package.json for hosting shared devDependencies and lifecycle commands. That is to say, the root package.json (which contains the \"postinstall\": \"lerna bootstrap\" script) is never actually consumed as an npm dependency externally.\nIf, as I suspect, you are using multiple packages locations, one of them being the root, that does make the root package published for external consumption. In that case, you have two straightforward options:\n1. rename the postinstall script \"bootstrap\", thus avoiding the external lifecycle hook\n2. move the external package in the root back into the shared packages location\nThere are more complicated solutions, but in this case, the solution is not a change in lerna. The line you highlighted may very well be na\u00efve, but it does represent one of the fundamental design goals of lerna, and thus supporting the pattern you described here is extremely unlikely.. A published npm module shouldn't require a postinstall phase unless it is compiling native extensions. Lerna is not intended to be a runtime dependency.\n\nOn Mar 9, 2017, at 10:28, Evan Scott notifications@github.com wrote:\nHere's the structure:\nconsuming-package/\n    package.json\n    node_modules/\n        lerna-monorepo/\n            package.json\n            lerna.json\n            packages/\nI intentionally want lerna-monorepo to run bootstrap on postinstall, but because of how that utility works, lerna looks all the way to the top for lerna.json instead of where the command itself is actually invoked.\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Thanks all!. Has this issue re-occurred after you moved things into their expected place (packages/*/{src,test})?. @milesj Thanks for checking. I'm going to close this for now, since we don't have anything actionable. If that changes, by all means re-open this. . I am generally in favor of this (also p excited that you're getting excited about lerna :D). As I mentioned in #643, this feels like a plugin system, but I am not opposed to a more focused solution to avoid larger, more complicated refactoring.\n\n--conventional-commits seems like a reasonable flag. It would also be configurable in lerna.json as \"conventionalCommits\": true, either at the root or command.publish namespace.. We could certainly open up more customization to the --conventional-commits args (not everyone uses the angular style?), but I don't see it necessarily conflicting with lerna-changelog.\nIn fact, I'm kind of interested in seeing how this could be \"dogfooded\" on an eventual lerna-as-lerna-monorepo ( #174, aka \"yo dawg, i heard you liked lerna...\").\nFor one thing, it's nice (for unfortunate folks like me who will forever yearn for their company's code to be rescued from Bitbucketian horrors) that conventional-changelog doesn't depend explicitly on GitHub metadata to operate.. @bcoe oh hey, forgot to mention:\nsh\n$ npm dist-tag ls lerna\ncanary: 2.0.0-beta.38-18-g5043ad2\nlatest: 2.0.0-beta.38. @thejameskyle Is there a planning wiki/issue for \"workspaces\" that we can follow?. I'm not sure yarn or npm should be gaining a bunch of git-related abilities (counting commits, measuring tags, diffing a branch, etc), but anything to support easier parallel operations (publishing, managing dist-tags, and perhaps even hoisting) would be welcome.. Yes, exactly!\n\nOn Mar 13, 2017, at 21:46, Benjamin E. Coe notifications@github.com wrote:\n@bcoe commented on this pull request.\nIn src/ConventionalCommitUtilties.js:\n\n@@ -0,0 +1,61 @@\n+import ChildProcessUtilities from \"./ChildProcessUtilities\";\n+import FileSystemUtilities from \"./FileSystemUtilities\";\n+import logger from \"./logger\";\n+import semver from \"semver\";\n+\n+const CHANGELOG_HEADER = # Change Log\n+\n+All notable changes to this project will be documented in this file.\n+See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.;\n+\n+export default class ConventionalCommitUtilties {\n+  @logger.logifySync()\n+  static recommendVersion(name, version) {\n+    try {\n+      const pkgPath = ./packages/${name}/;\n@evocateur yeah, I noticed this when I started writing tests; wasn't sure how complex pkg.location could become.\n\nIt feels like changelog.location should then be something like path.resolve(pkg.location, 'changelog.md')?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I'm satisfied, let's hope Windows is too! Pretty excited for this, it's gonna make independent mode so much smoother.. I'm hoping #635 helps iron out some of those flapping tests. Thanks for your patience with the path issues (try saying that six times fast)!. Whoops, we forgot to update yarn.lock \ud83d\ude28 . follow up in https://github.com/lerna/lerna/pull/676. Thanks!. This would be a prerequisite for a useful git describe to solve #277 . #655 is surfacing the mismatched dependency warning, which is currently never enabled. It would be straightforward to convert hasMatchingDependency()'s second argument into an options object that consumes the value of a --strict flag, if present.. As indicated in this comment, this is largely implemented in recent release candidates. We appreciate the effort, but don't have any intention of re-implementing the npm's script lifecycle in lerna.. I am 1000% in support of this.\n\nI would like to loosen the init version check to use semver.satisfies instead of the current exact comparison, but otherwise feel like we could cut over to 2.0.0 very soon.. This is good context for #583. I want to dogfood our --canary feature in the master branch (via #174), too.. @bcoe I think that's a fair request. I floated the idea today of \"graduating\" to -rc versions in our next publish, with a solid semver to follow soon after. My goal for tomorrow is to get some sort of prerelease out the door.\nMeanwhile, I really want to automate a --canary build from master so folks whose contributions we accept can start using them immediately (with full caveat of \"nightly\" status). I think we've got a couple things to do first before that happens.. Well, semver is now happening. \ud83c\udf2d . Sounds like --mutex network:<nonDefaultPort> (docs) is the ticket. We would love a PR!\n(I can probably get to this later in the week, but many hands make light work...). process.env needs to be mocked in test/BootstrapCommand.js, pretty much the same way as here. Thanks @TheLarkInn!. @sccolbert What version of node + npm are you using?\nI suspect this might be an upstream issue with inquirer (and actually node.js): https://github.com/SBoudrias/Inquirer.js/issues/266. Curiouser and curiouser. What does your lerna.json look like, and what is the command that causes it to fail?. I wonder if --independent mode is combining with the single-target --force-publish in some weird way? I would have expected the arrow keys to fail in all cases, not just the case with --force-publish included.... No worries, glad it was resolved!. @bcoe We definitely have some opportunity to improve our contributor guide (such as, I dunno, mentioning yarn? \ud83e\udd13 ). Yikes, that's a pretty terrible experience.\nOne potential workaround, at least for npm, would be to specify the --global-style option when installing the non-hoisted dependencies. It does incur the cost of less deduping, but in our case, that's probably a distinction without a difference (this should be a rare occurrence).\nIf we used --global-style, this is what the tree would look like in your second case:\n.\n\u251c\u2500\u2500 node_modules\n\u2502   \u2514\u2500\u2500 lodash@4\n\u2514\u2500\u2500 my-package\n    \u2514\u2500\u2500 node-modules\n        \u2514\u2500\u2500 uses-old-lodash\n            \u2514\u2500\u2500 lodash@3\nI'm not sure what the yarn solution for this is. :/. cc @gigabo . Like I mentioned in the PR,  I'd be much happier with a solution that simply used npm install --global-style (regardless of --npm-client option) to deal with non-hoisted package dependencies. It should be a rare enough occurrence, in practice.. Right now, there is no way to split the enabled git operations (commit + tag + push).\nWhat version of lerna are you using?. The code that calls git push is currently located inside a method that is not called when you pass --skip-npm. This looks intentional, to me.\nIf you're doing this locally, why not just push manually after amending the commit?. Your CI doesn't let you lerna publish <args> && git push --tags origin?. Verrrry interesting. What does node -e 'console.log(os.cpus().length)' output?. zoiks, that does seem like it would be able to deal with it just fine.\nRandom shot in the dark: have you tried adding --no-sort? It often makes --stream kinda useless, since topologically sorting creates bottlenecks on purpose (to make sure dependencies run before dependents).\nlerna run watch --stream --no-sort. This PR is based on #664. Many thanks @noherczeg!. We recently (last week) eased this restriction to only affect commands that actually need git (publish, diff, etc). It doesn't solve it for rc4, but I hope to release it soon.\n\nOn May 8, 2017, at 01:49, Peter Mouland notifications@github.com wrote:\n@peter-mouland commented on this pull request.\nIn src/Command.js:\n\n@@ -83,8 +96,8 @@ export default class Command {\n   }\n\nrunValidations() {\n-    if (this.concurrency < 1) {\n-      this.logger.warn(\"command must be run with at least one thread.\");\n+    if (!GitUtilities.isInitialized()) {\nHi @evocateur,\nJust testing the upgrade path from v1-beta.36 to v2-rc.4 and come across this check. We noticed it as it started breaking on CI where it copies a previously cloned repo to another area to perform more tasks (rather than cloning again).\nI'm sure we can change our build setup easy enough - but I was just wondering what the reason is as to why Lerna needs to be executed in a git repo or if this check could be dropped?\nThanks for your help\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Internally, we are still calling npm publish --tag <tag>, even when using yarn to drive it (or as --npm-client.\n\nHowever, since v2.0.0-beta.38, there have been changes to NpmUtilities.publishTaggedInDir() that addressed an issue with missing process.env when the --registry flag was provided. The latest code also uses options.env.cwd passed to execSync() instead of an inline cd <dir> && npm publish execution.\nDoes lerna@canary (2.0.0-beta.38-18-g5043ad2) fix the issue?. This issue was resolved by #1145 and #1204, which is available since lerna v2.7.1.\n@jarzuaga Please open a new issue with logging output and other details, thanks.. Huh, I guess I can't get away with merging a four-line change with [skip ci]. A peer dependency alone is not sufficient to install it during local development, just as it is not sufficient when installing it in another package. This is no different in lerna as it is in npm, which is on-purpose (as we are simply calling npm install in a given directory).\nGenerally speaking, when you express peerDependencies in a package, you must also add them to the devDependencies to ensure the tests pass etc. Consumers that install such a package will get the benefit of peerDependencies, which is merely to assert that they have also installed another package at such and such semver range, while avoiding the (occasionally messy) complications of a direct dependency.. If hoist works, why not just do that?\nA proper entry in devDependencies for the peering module will also work.. If you have a proper dev dependency on the specified peer, it will work (exactly like a \u201cnormal\u201d npm package). Anything else is relying on an implicit resolution, which in my opinion should fail.\n\nOn Jul 11, 2018, at 03:16, Lukas Bombach notifications@github.com wrote:\nThis appears to be related: npm/npm#5875\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I appreciate the proof-of-concept!\n\nHowever, it looks suuuuper-complicated, and I'd rather not engage in too much hackery (aside from our current yarn bait-n-switch) with npm clients while work is underway to specify \"native\" behaviour that should solve this (yarn is coordinating with npm folks, too).\nIn the mean time, I'd be much happier with a solution that simply used npm install --global-style (regardless of npmClient option) to deal with non-hoisted package dependencies. It hits the sweet spot of \"already tested elsewhere\" and \"acceptable compromise of functionality\", for me.. @ryancole Package C in your example never requires/imports Package A in its source code, is that correct?\nWhen a package is required, node resolves all symlinks (using realpath or something like it) before loading the main file and starting the whole parse+execution dance. The transitive dependency (Package A) in your example should work as Package B requires it, unless I am missing something?. Lerna can't support myriad build tools and their violations of the node module resolution algorithm. The current symlinking approach is working as intended, as evidenced by the fact that any of these transitive associations work just fine when required in a node process, or indeed when the package is installed by a consumer.. Lerna can't support myriad build tools and their violations of the node module resolution algorithm. The current symlinking approach is working as intended, as evidenced by the fact that any of these transitive associations work just fine when required in a node process, or indeed when the package is installed by a consumer.. I could've sworn that was already the case that attempting to publish a package with private depenencies would throw an error.\nClearly it isn't, and I agree that it should.\nAs for the second expectation, I should hope that \"durable\" config in lerna.json would be sufficient to ignore certain paths (but I haven't tested this, and glancing at the publish tests, it doesn't appear that we've validated this assumption directly?).\njson\n{\n  \"lerna\": \"2.0.0-beta.38\",\n  \"command\": {\n    \"publish\": {\n      \"ignore\": [\n        \"append-transform\"\n      ]\n    }\n  },\n  \"version\": \"0.0.0\"\n}. Current progress here: https://github.com/lerna/lerna/compare/master...evocateur:relax-git-during-canary\nThere's still a few weird test issues :P. Are you passing --skip-git when calling lerna publish, perhaps? That's the first thing that springs to mind to explain why lerna isn't adding git tags during publish.\nNormally, when versioning independently, lerna adds a git tag for each published package in the format <packageName>@<version>. Skipping git operations would be the only non-error way to avoid this behaviour.\nIf you've recently converted to a lerna monorepo, you may have to do an initial \"kickstart\" publish to get the tags to cooperate. Alternatively, you could identify the commits where the individual packages were last published and manually add tags (git tag <packageName>@<version> <commit>)  for those packages.. Yes, that's way lerna is designed to work. It looks less noisy when you use the default \"fixed\" versioning (the tag names are fairly \"standard\" semver vX.x.x), but the requirement is the same in both versioning modes.. Release tags are an integral part of responsible git-based development. For the most part, lerna is intended as a coordinator of existing programs (git, npm, yarn) and their existing idioms/patterns to accomplish its goals.\nGit tags are the best solution for the question of \"how many commits since the last release?\". There are often many commits and pushes between releases of a given package, and we're trying to avoid rewriting git. \"Last pushed commits\" is far too ambiguous to be useful.. Awesome, thanks @wizardzloy !. Huh, theoretically lerna init should have updated lerna.json appropriately. Investigating.... Definitely a bug, didn't test against the git describe format I've been using for the canary releases. \ud83d\ude2c . @nicojs The latest canary (lerna@2.0.0-beta.38-40-g203f7eb) should work now.. We appreciate the PR! I think we need to have a discussion in #704 before we move further on this, since it is kinda awkward to simply remove an important part of the whole pattern.. This was finally fixed in #970, with docs updated in #985.. @peggyrayzis This is a great bug report, thanks!\nWe've definitely let the README drift in this regard, as pointed out in #591 and potentially updated in #703 (it doesn't indicate that you should create the directory, it just omits any reference to it).\nWe can do better than this, methinks. Would a prompt for \"Location of packages?\" (when not already defined) that defaults to \"./packages\" be helpful?\ncc @gigabo . @peggyrayzis Awesome!. I've used it when independently versioning to reduce the tag noise for changes that I know are compatible (using caret versions). I can appreciate that I'm an edge case, and I was blatantly abusing the flag just so my git tag list was a little less bloated.\nI see even less reason for a fixed versioning monorepo to use this, considering the drawbacks. I lean toward --update-dependencies-without-publish for renaming.. Pretty sure yarn run fix would make the tests pass. I think this is related to how npm installs binary executable files in Windows (using cmd-shim) and what we're actually doing, which is calling the link target directly.\nWe should probably be calling the script with proper \"local\" .bin paths prepended, using execa instead of rolling our own.. Possibly, yes; execa does have a \"preferLocal\" config that automatically adds locally installed CLI to the PATH var. However, that doesn't really work when calling it from a globally-installed lerna. We might need to figure out a different angle of attack.. I'm working on converting our internal child_process calls to use execa, which automatically adds npm bins to the PATH.\nI don't believe this issue would be avoided in local dependencies via npm script either, as it is not creating the cmd-shim that npm does.\n\nOn Apr 10, 2017, at 02:17, Nico Jansen notifications@github.com wrote:\nIMHO installing lerna globally is a bad practice. We just install it locally and put lerna bootstrap in postinstall. Is this issue fixed for local lerna installations?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I wonder if conventional-changelog could be configured as an optional dependency, with appropriate documentation and error messages when one attempts to use the flag without the dep installed?. @onigoetz I appreciate the detailed bug report and reproductions!\n\nBelieve it or not, I have a lot of experience/scars from running path/to/node path/to/npm/npm-cli.js <args> from a Maven execution in almost exactly the way you've described. I feel your pain.\nIn master, the npm commands with registry config were fixed to mixin process.env correctly. We definitely have other opportunities to move this process.env (and cwd) config munging (so git commands work more consistently, etc).\nDoes installing the current lerna@canary help alleviate your problem? (we hope to have a \"real\" release soon). Oh, also, specific to the Maven pattern here, I think the env vars npm_execpath and npm_node_execpath might be an interesting way to solve this, by ensuring that they're always present in the (cross-platform) opts.env object that we pass to all exec and execSync calls.\nnpm run env | grep execpath demonstrates their value. yarn provides them, but it doesn't support yarn run env unless you add a script \"env\": \"env | grep execpath\" to your package.json.. Thanks for the bug report! I'm going to close this as a duplicate of #552, but I hope you understand we're not ignoring Windows folks on purpose.\n551 is one effort to fix this, but it is unfortunately not a complete fix (and out of date, to boot). I would love to see the temp file fix described in this comment to be implemented, but I've got a lot on my plate and I'm not sure when I'll be able to get to it.. lerna@canary has support for --cd-version. We hope to cut an official release (tentatively 2.0.0-rc.0) soon.. That's very odd. We don't currently have any tests of lerna publish that attempt to use --ignore, though we do have coverage of the underlying filter method. We should probably fix that.. The yarn failures are likely due to issues discussed in #671.\nI wonder if this is an issue specific to create-react-app, or merely exacerbated by the amount of installing going on in a project like it? My gut-feeling is the latter, and would be consistent with an underlying root-cause of memory problems.\nI've got a few ideas to mitigate some of the memory issues (chiefly: use child_process.spawn instead of child_process.exec), but it'll likely be awhile before we're able to address them directly.. You should use the --no-sort flag whenever streaming results from a watch command. Apologies it's not well-documented.. With increasing adoption of yarn and soon always-on shrinkwrapping in npm (apps should already always shrinkwrap their dependencies), how would you indicate they should upgrade dependent A to pick up a bugfix in transitive B if you don't bump A's version? From the perspective of npm outdated when using a lockfile (yarn.lock or npm-shrinkwrap.json), not bumping A means there is no awareness of the need to upgrade.\nSo I guess I'm pretty skeptical we can account for all of the edge cases, and pretty confident it would be a never-ending bug farm. I consider the \"cost\" of new patch versions (registry bloat?) to be basically nil compared to their benefits (less footguns, more change awareness, simpler code paths, less bugs).. With increasing adoption of yarn and soon always-on shrinkwrapping in npm (apps should already always shrinkwrap their dependencies), how would you indicate they should upgrade dependent A to pick up a bugfix in transitive B if you don't bump A's version? From the perspective of npm outdated when using a lockfile (yarn.lock or npm-shrinkwrap.json), not bumping A means there is no awareness of the need to upgrade.\nSo I guess I'm pretty skeptical we can account for all of the edge cases, and pretty confident it would be a never-ending bug farm. I consider the \"cost\" of new patch versions (registry bloat?) to be basically nil compared to their benefits (less footguns, more change awareness, simpler code paths, less bugs).. Yarn\u2019s behavior when upgrading is irrelevant in this context.\n\nOn Mar 2, 2018, at 04:58, K\u00e9vin Berthommier notifications@github.com wrote:\nI think that when you have versions that are satisfied by the semver, we can only update the package-lock.json or the yarn.lock. Why not with an option?\nAs if we were doing yarn upgrade package instead of yarn upgrade package@^1.0.1.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. There are several threads that already explain the reasoning in detail. #707 is one of the bigger ones.\nOn Mar 2, 2018, at 08:24, K\u00e9vin Berthommier notifications@github.com wrote:\nWhy ? It updates the package in the semver's range without updating the package.json, which would avoid version spam while keeping the versions up to date, package-lock.json and yarn.lock too. It's a behavior like that we're looking for.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @bertho-zero Presumably because all of those packages have a dependency on @openagenda/labels. \"One other repo\" is irrelevant, as it constitutes a change for all of the dependents.\n\nTo summarize (yet again (and again (and again))), the failure modes of \"rely on ^ ranges and don't bump transitive dependents\" are insidious, almost impossible to predict, and difficult to recover from. Babel is a special case, and the maintainers themselves recognized the error of the previous option.\nThe \"annoying version spam\" isn't for the sake of the developer, it's for the consumers. If a breaking change is inadvertently released as a patch (it happens, we're only human), but only to a transitive dependency, how does anyone using a lockfile know that they should upgrade? When their code breaks? If you're not using a lockfile, you've already accepted the risk of non-deterministic breakage, and the \"annoying version spam\" is irrelevant.. @noherczeg Thanks for sticking with this, it's looking great so far!. Generally speaking, lerna-based monorepos have a single packages directory, sibling to lerna.json, that holds the managed packages (where \"package\" is defined as a directory that contains (at least) a package.json file):\njson\n{\n  \"lerna\": \"2.0.0-beta.38\",\n  \"version\": \"1.0.0\"\n}\ntxt\ndefault-monorepo/\n\u251c\u2500\u2500 lerna.json\n\u251c\u2500\u2500 package.json\n\u2514\u2500\u2500 packages\n    \u251c\u2500\u2500 package-1\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 package.json\n    \u251c\u2500\u2500 package-2\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 package.json\n    \u2514\u2500\u2500 package-3\n        \u2514\u2500\u2500 package.json\nThere is nothing stopping you, should you choose, to configure the packages elsewhere, such as all in the root. (In my experience, however, that gets messy very quickly):\njson\n{\n  \"lerna\": \"2.0.0-beta.38\",\n  \"packages\": [\n    \"package-*\"\n  ],\n  \"version\": \"1.0.0\"\n}\ntxt\nroot-glob/\n\u251c\u2500\u2500 lerna.json\n\u251c\u2500\u2500 package-1\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 package.json\n\u251c\u2500\u2500 package-2\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 package.json\n\u251c\u2500\u2500 package-3\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 package.json\n\u2514\u2500\u2500 package.json\nThe strings in the packages array of lerna.json are globs that match package directories (relative to the location of lerna.json). They can also be an explicit whitelist (\"packages\": [\"package-1\", \"package-2\", \"package-3\"] in this example), though I would imagine that gets rather unwieldy rather quickly.\nMany projects will configure multiple \"base\" directories for different uses, such as [\"packages/*\", \"examples/*\"], which enables example projects (for documentation) to use relative symlinks.\nI have to wonder, though: if all of your packages are private, why bother with lerna at all?. I would definitely avoid using TitleCase to name your modules. Idiomatic npm is lowercased, with dashes between words. What you require must also match the name property of the module's package.json, not necessarily the directory name.\nI'm trying to build a repro locally right now, and so far I've noticed that it indeed does not seem to work.... Okay, I had a typo in my packages config, \"packages\": [\"package-*\"] should work. Trying the explicit whitelist now.... I've validated it works with both globs and explicit whitelists. Here's my config:\njson\n{\n  \"lerna\": \"2.0.0-beta.38\",\n  \"packages\": [\n    \"package-*\"\n  ],\n  \"version\": \"1.0.0\"\n}\njson\n{\n  \"name\": \"root-glob-monorepo\",\n  \"private\": true,\n  \"scripts\": {\n    \"postinstall\": \"lerna bootstrap\",\n    \"test\": \"lerna run test\"\n  },\n  \"devDependencies\": {\n    \"lerna\": \"2.0.0-beta.38\"\n  }\n}\npackage-1/package.json:\njson\n{\n  \"name\": \"@example/package-1\",\n  \"private\": true,\n  \"version\": \"1.0.0\"\n}\npackage-2/package.json:\njson\n{\n  \"name\": \"package-2\",\n  \"private\": true,\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"@example/package-1\": \"^1.0.0\"\n  }\n}\npackage-3/package.json:\njson\n{\n  \"name\": \"package-3\",\n  \"private\": true,\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"@example/package-1\": \"^1.0.0\",\n    \"package-2\": \"^1.0.0\"\n  }\n}\nThe @example/ scope isn't necessary, just demonstrating that the package name and directory are not necessarily the same.. If you're never publishing these packages to any registry (public or private), then referencing via a relative path is the same difference, and much more robust cross-platform.\nLerna is designed to facilitate publishing multiple related packages from a single repository, enabling virtually the same workflow as the single-package-per-repository pattern. It just happens to support your usage, but there's no guarantee it will continue to do so. We certainly don't support importing lerna-bootstrapped modules from an external source directory.\nIf they are intended to be used as npm packages, you should publish and install them as such, not use shaky workarounds like git URLs in production. You should never npm install in production, but instead build a tarball from the result of npm install on a build machine and unpack the tarball into the production location.\nMy apologies if this sounds a bit preachy, but I'd rather you didn't contort yourself into a lerna-like shape just for the sake of using tools to avoid relative paths.\n. @shai32 Yes, lerna supports private modules. We're just calling npm, after all.\nNo, lerna will not support linking git dependencies in local directories. They'll be installed by npm the same way as always. I really don't recommend git dependencies, in general, they are a leaky abstraction.. If you're unable/unwilling to actually publish the packages, I would just use relative paths with a single package.json in the root. You don't appear to need any of the automatic versioning and other package management that lerna provides, and the sibling dependency symlinking is not needed when using relative paths.. Currently, lerna recognizes \"sibling\" dependencies (from the same monorepo) by their name and matching major version. So instead of the relative paths in package.json, just use a matching caret version range (e.g., \"^1.0.0\"). What you describe sounds otherwise perfectly reasonable.\n\nOn May 8, 2017, at 03:42, Wybe Minnebo notifications@github.com wrote:\nI've tried to go the same route with lerna (not publishing any packages yet), because:\nI would like to avoid tedious '../my-package', '../../my-package' and '../../../my-package' imports in code\nI would like to track dependencies of each individual package, rather than one monolithic package.json with everything\nI have no private registry set up yet, but intend to publish in the distant future\nFrom reading this issue/question I'm not quite sure if my attempt is quite the same as the OP's. My packages all have the dependencies that are from the same lerna repo defined in package.json as such (packages/some-other-package/package.json):\n\"dependencies\": {\n    \"my-package\": \"../my-package\"\n}\nGranted I need lerna's symlinking the most, but keeping the versions in sync is also quite nice because I would ideally allow any of the modules to report its own version number in error logs etc.\nInstalling any of the modules through npm (without lerna) works fine. Installing all of them through lerna bootstrap yields the following error (where \"fsds\" is my project name):\nlerna info version 2.0.0-rc.4\nlerna info Bootstrapping 11 packages\nlerna info lifecycle preinstall\nlerna info Installing external dependencies\nlerna ERR! execute Error: Command failed: npm install\nlerna ERR! execute npm ERR! addLocal Could not install /git/fsds/packages/fsds-util\nSome external dependencies are now installed, but nothing from my lerna project.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Thanks for the great description!\n\nIndeed, when we are installing dependencies in a given directory, we are not explicitly propagating process.env to the spawned subprocess (unless you've passed --registry config, which is then mixed in). I thought that meant it defaulted to process.env anyway, but this clearly indicates the wrongness of that assumption.\nDoes this repro if you try this with lerna@canary?. Thanks for checking. We would love a PR, if you're interested.. I do know that we explicitly don't pass any arguments to the client install command, largely to facilitate npm vs yarn differences. I'm not very sanguine about this, tbh.. It\u2019s because we mangle the package.json during installation, removing any distinction between prod and dev dependencies.\n\nOn Nov 13, 2017, at 06:53, Erik M\u00fcller notifications@github.com wrote:\nSo I guess that only bootstrapping prod dependencies is still not working and nobody knows why? (At least I didn't really get the problem because the environment seems to be passed correclty)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Lerna manages development and publishing of several packages. It makes no difference when publishing a package if the devDependencies are present. It is not a deployment platform.\nOn Jan 29, 2018, at 07:44, Nico Rehwaldt notifications@github.com wrote:\nNODE_ENV=foobar lerna ... should work now. At least as of my comment mid November.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Lerna is not a deployment tool.\nOn Apr 16, 2018, at 00:58, Ahmad Bamieh notifications@github.com wrote:\n@evocateur True, however with things AWS microservices, the node_modules must be uploaded with the source files to the lambda.\nWe are using lerna as a monorepo manager for our microservices and being unable to npm install production only is an issue.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. You meant publishConfig.registry in package.json, correct? I'm not aware of a root-level registry property.\n\njson\n  \"publishConfig\": {\n    \"registry\": \"http://my-awesome-registry.com\"\n  },\nIn any case, that's what npm uses when publishing, and only falling back to the .npmrc registry when publishConfig.registry doesn't exist. That's why the publish half-worked for you. As near as I can tell, the .npmrc value is the one that is propagated into the env var that we are passing through.\nAre you using the --registry flag of lerna publish, by any chance?. I don't suppose you can convince the Artifactory folks to fix their bug? A \"virtual\" registry that serves both public and private packages that doesn't understand how to deal with dist-tags is pretty broken, imo.\nPersonal opinions aside, passing --registry=<url> explicitly to lerna publish (or via lerna.json config such as command.publish.registry) is one way to work around this. It will use that value instead of anything provided by .npmrc or publishConfig.registry for all npm commands.\njson\n{\n  \"lerna\": \"2.0.0-beta.38\",\n  \"command\": {\n    \"publish\": {\n      \"registry\": \"<URL>\"\n    }\n  },\n  \"version\": \"1.0.0\"\n}\nFocusing the config to publish only allows using the .npmrc-based virtual registry when running lerna bootstrap, the only time we run npm install.. Yes, that should be the default, I agree. I believe @hzoo has already opened an issue to that effect.\n\nOn Apr 13, 2017, at 07:46, James DiGioia notifications@github.com wrote:\nAdding the registry to the lerna.json worked without errors. Is there a way to make --skip-temp-tag the default? I'm not sure what the purpose of that is or why/if it's necessary.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Yes, that should be the default, I agree. I believe @hzoo has already opened an issue to that effect.\nOn Apr 13, 2017, at 07:46, James DiGioia notifications@github.com wrote:\nAdding the registry to the lerna.json worked without errors. Is there a way to make --skip-temp-tag the default? I'm not sure what the purpose of that is or why/if it's necessary.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Hoisting actually takes advantage of node's module resolution algorithm: recursing up the tree looking for node_modules/<package> (when the argument to require/import isn't a local path, that is). Binaries are symlinked to afford the same convenience in npm script execution, as they need to be added to the shell PATH (which npm does automagically), not resolved as a node module.\n\nI do agree we could use better documentation in this area. I just spent a long thread earlier today explaining it to a colleague.\nThere are a couple lingering bugs with hoisting at the moment (sometimes transitive deps of un-hoisted deps override a hoisted version), but nothing intractable.. Indeed, you are correct on those points. I appreciate the clarity of your writing :)\neslint, for example, when attempting to resolve plugins specified in a package-local .eslintrc, probably fails loudly. One advantage of lerna is that you can do all the linting from the root, maintaining consistency and reducing duplication across packages. In fact, I recommend exactly this pattern for linting and running tests. (We can definitely do better at documenting common patterns)\nWith the new integration test pattern I merged last night, I hope to write more tests to automatically validate these sorts of behaviors with \"live\" code.. @kylecordes That would be great, thanks!. We don't plan on supporting git dependencies in the way you describe. We do support scoped packages, which are private by default (on the public registry).\nNothing about lerna stops you from using git dependencies; they are supported by npm itself after all. I don't, however, see them becoming an alternate method of \"linking\" monorepo siblings.. Resolving git tags as symlinked dependencies is not within the scope of lerna, and won't be accepted as a PR, sorry.. nvm use 4 && yarn ci\n\nOn Apr 26, 2017, at 17:57, James Newell notifications@github.com wrote:\n@evocateur The tests are all passing but npm is getting an exit status of 0 on node v4 without any visible error. How can I re-run the tests or debug the issue?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @jameslnewell Thanks for your patience!. Should be achievable with --since\nOn May 31, 2018, at 04:05, Ben Flowers notifications@github.com wrote:\nIs this still in the project? Don't see this in the README anymore and it is just what I am looking for!\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I've got a ton of changes coming soon in another branch that affects this. As @arcticShadow notes, we're not currently breaking the env in non-registry config cases anyway.. @zzarcon Thanks!. @am80l Please don't add \"+1\" comments. If you have a reproducible example or other context, that would be very helpful.. I'm a little confused why you would need this, if you already have lerna globally available?. I've found calling lerna from root package.json scripts to be more than sufficient for isolating a particular version. #694 makes the version check only complain about insufficient semver (usually major version mismatch or older lerna attempting to work on \"newer\" repo).\n\nFor example, run lerna bootstrap in the postinstall lifecycle, and you only need to run npm install (or yarn, if you're fancy) and it will always call the local lerna:\n```json\n\"name\": \"my-lerna-monorepo\",\n  \"private\": true,\n  \"scripts\": {\n    \"postinstall\": \"lerna bootstrap\",\n    \"test\": \"lerna run test\"\n  },\n  devDependencies: {\n    \"lerna\": \"^2.0.0-rc.0\"\n  }\n}\n``. Closing this as a duplicate of #138 . Thanks @cdaringe!. Oh geez, sorry! Will fix ASAP. I don't believe saddlinglerna publishwith yet another flag is worth the added complexity, in this case. I'd rather improve the existinglerna updatedandlerna diffcommands to suit this purpose.. @koddsson Wouldlerna diff in a separate shell work? If you pass--no-pager`, that seems like a bad experience when you've got more than a page worth of diff.... Thanks for understanding!. You'll need to update the test assertions here and here.\nThat being said, the behaviour of an inaugural lerna publish is a little unclear when the version is already 1.0.0. Ideally, we'd have an integration test for that.. Fantastic @kylecordes, thanks!. Yeah, we definitely need to start using a network mutex when bootstrapping with --npm-client=yarn enabled. You could set concurrency to 1 in lerna.json targeting only the bootstrap command like this:\njson\n{\n  \"lerna\": \"2.0.0-rc.1\",\n  \"command\": {\n    \"bootstrap\": {\n      \"npmClient\": \"yarn\",\n      \"concurrency\": 1\n    }\n  },\n  \"version\": \"1.0.0\"\n}\n(I namespaced the npmClient config under bootstrap because that's currently the only command that optionally uses a different npm client; all the other subcommands call npm regardless). A network mutex for --npm-client=yarn was added in #764, released in v2.0.0-rc.3. If your package published successfully to the registry but your repo didn't successfully push to origin, why not just git pull --rebase && git push origin --tags? Lerna is mostly just calling repetitive and boring commands for you, it isn't doing any special dark magic.. If your package published successfully to the registry but your repo didn't successfully push to origin, why not just git pull --rebase && git push origin --tags? Lerna is mostly just calling repetitive and boring commands for you, it isn't doing any special dark magic.. I agree, the logging can be improved (here, and in general).\n\nOn Apr 15, 2017, at 09:33, Victor Norgren notifications@github.com wrote:\nPerhaps error message could be improved at least? It's not immediately clear what's happening and why (when I tried to publish, I suddenly saw a bunch of error: failed to push some refs stack traces in the console, repeatedly). Those messages can be in the debug log sure, but perhaps common errors can be be more user friendly?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. hmm, yeah. I wonder if it would make sense to re-order the git push to before the npm publish?. @Vincent2015 npm adduser is the command you're looking for. This error isn't lerna's fault.. @Vincent2015 npm adduser is the command you're looking for. This error isn't lerna's fault.. Publishing to npm has absolutely no requirement on the git commit being present in a public repo, and the opposite is true as well. When a publish fails, you can simply go into the directory where it failed and type npm publish again. It's basically the same difference, as that's all lerna is doing anyway with respect to publishing packages to npm.\n\nI do agree that lerna's error handling and retry mechanisms need some improvement. Being able to publish the existing version without bumping would be a good start, for example.. @gitawego I appreciate the detailed bug report! We've already got an issue open on this bug, #708, so I'll close this and invite you to follow along there.. Not surprising, given that it's completely uncovered by tests (which we should fix)!. Not surprising, given that it's completely uncovered by tests (which we should fix)!. #728 fixed the --ignore flag behaviour with lerna publish, perhaps you could try lerna publish --ignore react-router-native ?. #728 fixed the --ignore flag behaviour with lerna publish, perhaps you could try lerna publish --ignore react-router-native ?. and yeah, that validate method looks fishy. and yeah, that validate method looks fishy. Yeah, if you're using yarn to install lerna, it breaks compatibility with npm and does not link transitive binaries. I'll have a fix out soon.\n\nOn Apr 17, 2017, at 19:21, Dylan Greene notifications@github.com wrote:\n@dylang commented on this pull request.\nIn src/FileSystemUtilities.js:\n\n   if (!exists) return callback();\n\n\n\n// Note: if rimraf moves the location of its executable, this will need to be updated\nChildProcessUtilities.spawn(require.resolve(\"rimraf/bin\"), [filePath], {}, callback);\nChildProcessUtilities.spawn(\"rimraf\", [\"--no-glob\", trailingSlash(dirPath)], {}, callback);\nThis lost the require.resolve, so it doesn't seem to work if rimraf is not in your path or a top-level dependency.\n\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.\n. We don't have the resources to commit to maintaining the 1.x release. It's likely broken in several other subtle ways, so this is as good a reason as any to stop promising that it will work.\n\nThanks for taking the time to make the pull request, @popomore!. Can you add an integration test for this?. Can you add an integration test for this?. oh noes Windows :P. Actually, my windows env var syntax was wrong, it should be %LERNA_PACKAGE_NAME% apparently. Please use the issue template: https://raw.githubusercontent.com/lerna/lerna/master/.github/ISSUE_TEMPLATE.md\nIn this case, git --version would also be appropriate.. I could have sworn we already throw an error when the local tree had uncommitted changes. In any case, thank you for investigating!\n\nOn May 16, 2017, at 01:49, Iyobo Eki notifications@github.com wrote:\nOkay looks like I found a fix for this.\nThis issue only comes up when I try to lerna import into a lerna repo with uncommited changes.\nCommit all changes in your monorepo and have a clean tree before attempting to import another package and it's git history. I suppose it makes sense :)\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. cc @kentaromiura @cpojer @bestander. @bestander Thanks for looking it over!. If you've gone to the trouble of open-sourcing something, extracting it into a separate repo and everything, then it should just become another external dependency in your monorepo. It's beyond the scope of lerna to automate npm link (which is notably never called, internally). You can still use npm link for local development, just like any npm package.. This looks like a path corruption problem during the patch mangling during the import execution. The regular expressions aren't handling Windows path separators correctly, if I had to guess.. Interesting! I don't use git on windows, is this always the case that git\nrequires POSIX-like slashes (/) as path delimiters?\n\nOn Tue, Oct 10, 2017 at 11:50 AM, Adam notifications@github.com wrote:\n\nI found a workaround for this issue. The core of the problem is that\npath.join in ImportCommand.js will concatenate paths with a backslash on\nWindows (source code here\nhttps://github.com/lerna/lerna/blob/master/src/commands/ImportCommand.js#L74\n).\nTo quickly/hackily fix this for myself, I added this line of code to\nlib/commands/ImportCommand.js directly after line 125 (note: this is\ntranspiled code):\nthis.targetDir = _path2.default.join(targetBase, externalRepoBase); // already on line 125this.targetDir = this.targetDir.replace(/\\/g, '/'); // I added this\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/lerna/lerna/issues/767#issuecomment-335571110, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAV5Qw16LEaECG0suOaTGNsaqakFn6-ks5sq7xPgaJpZM4M-QnR\n.\n. @brentertz Thanks for the great bug report! The repo repro will definitely help figure out the root cause.. I was up until 2am working on a resolution for this. Release will commence as soon as I get to my desk.\nOn Apr 18, 2017, at 09:22, Justin Wilaby notifications@github.com wrote:\nThis is a problem for us as well. Blocked a team of 6 devs for 8 hours :(\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Well, poop, v2.0.0-rc.3 didn't really solve this. Still taking about a minute to lerna bootstrap --hoist on the repo provided, and the logging is absolute shite so I have no idea why it's bogging down.. Thanks for the bug report! This has been fixed by #771, and will be released shortly.. Released in https://github.com/lerna/lerna/releases/tag/v2.0.0-rc.3. @Vincent2015 thanks for the detail!\n\nI believe we may have a problem with executing git rev-parse --abbrev-ref HEAD on Windows?\n(calling code is here). I'm in favor of supporting lifecycle scripts whenever we can. I don't envision actually calling npm version because of all the side effects, but running the scripts at the appropriate times seems very doable.. We can backfill the tests later, the gist you made clearly shows that this works as intended.. @ricky Awesome!. I don't think so, since the default package location (packages/*) doesn't have a globstar, and we're definitely not adding one to any provided config.\nBut wait! #768 has some nesting (\"packages/*\", \"packages/components/*\"), but no globstar. So I'm not sure. Gonna go play with the example repo and check.... Short answer: nope. I've got some better logging in a side branch, though, and so far it seems to be totally skipping --hoist when I run lerna bootstrap.... @noherczeg Figured it out!\ndiff\n   \"hoist\": {\n     group: \"Command Options:\",\n     describe: \"Install external dependencies matching [glob] to the repo root\",\n-    type: \"string\",\n     defaultDescription: \"'**'\",\n+    coerce: (arg) => {\n+      // `--hoist` is equivalent to `--hoist=**`.\n+      return arg === true ? \"**\" : arg;\n+    },\n   },\n   \"nohoist\": {\n     group: \"Command Options:\",\nIt was previously always resolving argv.hoist as \"\" when --hoist with no argument was passed (which, being \"falsey\", always failed the conditional here). Would have been nice to have an integration test for hoisting before this. Ah well.\nI'll PR this (mostly reverting #770, btw) after my monster logging changes.. @noherczeg Opened #778 to fix the --hoist bug.. Thanks @noherczeg!. I feel like that might be an AppVeyor platform issue? It's really unfortunate that there is no useful log output during the test to indicate what the issue could be.. Thanks @ricky!. What happens if you remove these lines from lerna.json?\ndiff\n{\n  \"lerna\": \"2.0.0-rc.3\",\n-  \"packages\": [\n-    \"packages/*\",\n-    \"packages/axl-storybook/demo\"\n-  ],\n  \"version\": \"0.0.0\"\n}\n(or move \"packages/axl-storybook/demo\" to \"demo\"?). @bcoe ?\nI'd rather it just be an extension of the existing --conventional-commits flag, basically turning the boolean into an implicit --conventional-commits angular.. @bcoe If one doesn't pass a preset to conventional-changelog, does it behave as specified at https://conventionalcommits.org/ ? I'm all for simplifying configuration in favor of strong defaults (dare I say, \"conventions\"? \ud83e\udd23). Would this output be sufficient?\n$ lerna clean --yes\nlerna info version 2.0.0-rc.3\nlerna info removing ${ABSOLUTE_CWD}/packages/immutable-insert-sorted/node_modules\nlerna info removing ${ABSOLUTE_CWD}/packages/immutable-remove-sorted/node_modules\nlerna info removing ${ABSOLUTE_CWD}/packages/immutable-shallow-merge/node_modules\nlerna info removing ${ABSOLUTE_CWD}/packages/numeric-keys-only/node_modules\nlerna info removing ${ABSOLUTE_CWD}/packages/pen-knife/node_modules\nlerna info removing ${ABSOLUTE_CWD}/packages/rem-record-selector/node_modules\nlerna info removing ${ABSOLUTE_CWD}/packages/rem-video-common/node_modules\nlerna info removing ${ABSOLUTE_CWD}/packages/wombo-bootstrap/node_modules\nlerna info removing ${ABSOLUTE_CWD}/src/admin/clients/node_modules\nlerna info removing ${ABSOLUTE_CWD}/src/admin/inspection-report/node_modules\nlerna info removing ${ABSOLUTE_CWD}/src/admin/videomoderation/node_modules\nlerna info removing ${ABSOLUTE_CWD}/src/admin/videos/node_modules\nlerna info removing ${ABSOLUTE_CWD}/src/admin/virtual-tours/node_modules\nlerna info removing ${ABSOLUTE_CWD}/src/inspections/landing/node_modules\nlerna info removing ${ABSOLUTE_CWD}/src/inspections/manage/node_modules\nlerna info removing ${ABSOLUTE_CWD}/src/property/videos/node_modules\nlerna info removing ${ABSOLUTE_CWD}/src/upload/videos/node_modules\nlerna success clean finished. The progress bar will still run, but the log messages will stream on stderr as demonstrated.. @Reinmar Thanks for the repro case!. @Reinmar That error seems to indicate there is invalid JSON in the package.json file? Did the lerna-debug.log give any hints?. That sounds very reasonable. Definitely worthy of further investigation.. That would definitely be a part of the fix.. The batches are required for the topological sorting (and not just in RunCommand, which is why this patch failed all the tests).\nWhat should happen: constrain the changes to RunCommand, which overrides this.toposort if this.options.stream is true. The assumption being, if you want to stream, you're probably running a watch script of some sort.\nYou'll still have the problem of concurrency, however, which isn't solved as easily. You can't start a dozen subprocess watchers at the same time governing hundreds of files total because you'll hit the EMFILE limit very quickly (as well as a lot of process thrashing). That's one reason I recommend \"hoisting\" all watcher processes to the root, so it's a single process that can juggle file handles appropriately.. This has been superseded by the --parallel flag, added in #796 . @douglasduteil No worries, thanks for volunteering :). It's not exactly accurate to say \"non-default packages locations are broken\", because clearly non-default packages locations that don't contain the string node_modules are just fine (I use it literally every day, so I'd know).\nIf you're using the \"alle\" approach referenced in this blog post and spitballed here, why bother with lerna still?\nI suppose it's simple enough to check if any of the packages members has the literal string node_modules in it, and omit the ignore: [\"**/node_modules**\"] glob config. Still mystified why this is considered a good idea, tbh.. Hoisting solves the vast majority of those slow bootstrapping cases.\n\nOn Apr 28, 2017, at 17:25, John Bragg notifications@github.com wrote:\nFWIW, the reason we've ended up on a hybrid approach is because lerna bootstrap is so unbelievably slow with dependencies spread all over. Lerna is still a great tool to run commands in all packages and publish new versions, even if you don't use the bootstrapping logic.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Can you run lerna bootstrap --loglevel silly 2&>lerna-bootstrap.log and stick lerna-bootstrap.log in a gist?. Cool, thanks. The log posted doesn't look like it's necessarily --npm-client=yarn's fault. Is the repo you're running this in public, by chance?. The log you posted was inconclusive, and seemed to indicate a different error. The logging was indeed switched to the same lib that npm itself uses. We don't pipe the installation logs, however, so there's no explicit notice that yarn is being used. It is definitely being used when properly configured, however.. Closing this as it appears to largely be a misinterpretation of the new logging. We've never emitted client logging during bootstrap, as it is intended to run concurrently and most of the time that's a very noisy prospect.. Hrm, yeah, this is a tricky case. It doesn't strike me as unique to Windows, though perhaps there are more readily apparent reasons for dynamically generating a CLI file on that platform? Perhaps a more useful demonstration would be \"bin\": \"lib/cli.js\", with lib/cli.js transpiled from src/cli.js during prepublish (or prepare, eventually).\n\nThe problem with splitting the bin symlinking from the directory symlinking is that you would break dependent modules that use a CLI command during prepublish that is provided by a sibling module.\nI'm actually a fan of your \"dirty\" solution, as it provides a few other benefits:\n the CLI options management (filtering/defaulting/validating) is now unit-testable without heinous mocking\n the actual bin file always has the correct executable permissions (echoing content with a shebang into a file is not sufficient to make it actually work)\n* the actual bin file is always CommonJS and never ignored by git, which lets npm operate on it consistently\nHonestly, I don't see the extra complexity of splitting the dependency symlinking phases as a maintainable solution.. Argh, I'm getting bitten by this line on Windows. \ud83d\ude21\u24c2\ufe0f. My goal is to release 2.0.0 this week.\n\nOn May 14, 2017, at 02:20, Aeneas notifications@github.com wrote:\nAwesome, exactly what I'm looking for! Would it be possible to release this change @evocateur ? :)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Thanks @noherczeg!. Why not just add another glob to the packages list in lerna.json? That's definitely supported, and gets you everything you want (with the added benefit of keeping version pins up-to-date in the examples (whose package.json files you would simply add \"private\": true to avoid publishing)).\n\nEverything except \"install released packages from npm instead of symbolic link\", that is. Why is that important in this context?\njson\n{\n  \"lerna\": \"2.0.0-rc.4\",\n  \"packages\": [\n    \"examples/*\",\n    \"packages/*\"\n  ],\n  \"version\": \"1.0.0\"\n}. Aside from the extra packages location, which is quite common and totally supported, I don't see the other request for \"released packages of sibling dependencies instead of symlinks\" happening. If you want examples to use released packages, don't add the examples directory as a lerna-managed target, and things will \"just work\".. https://github.com/lerna/lerna#updated. I do believe you've highlighted a real issue: lerna updated should exit non-zero (but not necessarily throw an error) when there are no updated packages. I would indeed expect it to act like a cheap filter for the more expensive lerna publish.\nI would also expect lerna publish to just shrug and exit 0 when there is nothing to do, perhaps logging a message to that effect. Pull requests welcome! :). @koddsson Opening a PR, even incomplete, would be a great help. I find discussing code easier when I can look at the code. :)\nAs for item 2, in lerna publish's integration test, you can run any number of git commands before you actually run the lerna command. It might be as simple as:\njs\nconst cwd = await initFixture(\"PublishCommand/normal\");\nawait execa(\"git\", [\"tag\", \"-a\", \"v1.0.0\", \"-m\", \"v1.0.0\"], { cwd });\n// then call lerna. Yep, this has not been released yet.. I am open to changing the hoist target to \"closest common directory,\" which in your example (and indeed the default packages location) would be packages/node_modules. As @gigabo pointed out in earlier discussions, sometimes \"closest common directory\" is the root, but at least there would be some wiggle room for cases like yours.\nHowever, the --hoist-targets solution as proposed would actually break all the children who depend on lodash, since node_modules resolution is always done with fully-resolved paths, not the symlink paths (and thus, none of the children in this example would have access to ../parent/node_modules/lodash).. No. Unpublishing packages is generally frowned upon.. @steezeburger You need to unpublish in reverse-topological order; that is, if any of your packages depend on other lerna-based packages, you need to unpublish those first, then the dependencies.\nhttps://docs.npmjs.com/cli/unpublish. Please fill out the relevant template parts and add a test, thanks!. I've kicked a new AppVeyor build, the failure looks oddly unrelated.\nIt's okay to omit the integration test for now, the unit test is plenty for this sort of thing.. Not that it changes the fact you've experienced this issue with the network mutex, but the mutex creation currently only prefers 42424, which get-port attempts to provide, falling back to a random port.. Would you mind adding a blurb about the mutex config in lerna.json in the --npm-client block of the README? I would do it myself, but I can't make edits to your clone's master branch. Thanks!. No, get-port returns a Promise, which when resolved calls BootstrapCommand's initialize callback appropriately. I agree that it must be wonkiness on yarn's side. Just need some documentation of the flag and we can get this merged.. @koddsson Thanks for understanding! I was just about to merge and didn't want to bother you with fiddly stuff. :). Contributions welcome.. @hiskind I think enabling yargs strict is a good idea. Pull request welcome!. If we don't prompt for them, what version are we supposed to use? Private packages are intended to still be versioned, just never published. I agree the messaging is misleading, and would appreciate a pull request separating them appropriately.. I understand :). Oh my, that's ...unfortunate. In independent mode, it sounds like we need to validate that every package has a valid version? I think the null is a raw result from semver.valid(), which really means our prompt validation needs some cleanup.\n\nOn May 16, 2017, at 06:26, Piotrek Koszuli\u0144ski notifications@github.com wrote:\nThere's an even bigger problem with private packages:\nLerna tries to release version null which even works for the first time, but fails for the second :D.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. A version is a fundamental part of an npm package, so no, I don\u2019t see how you opt-out of versioning a private package (short of no longer treating it as a package, then go to town I guess?).. Wow, thanks for digging into this! In the meant time, we could probably do much better with our \"internal\" error handling and reporting of those errors (especially JSON-related errors, which I myself just suffered the other day while adding a new test fixture that I inadvertently left a trailing comma in...).. This was fixed in #798, which has not been released yet. There are a couple of PRs I was hoping to land before cutting a proper v2.0.0.. Definitely a bug, it should be optional ([pkg]), not required (<pkg>). Also found that the progress bar wasn't being disabled properly. Sorry for the delay!. Presumably you're using \"independent\" versioning? (the \"skip\" for the default unified version is just Ctrl+C)\n\nThis is probably going to open up another can of worms, but skip and tag options don't feel appropriate for lerna publish, and diff is sufficiently covered by lerna diff [pkg], imo. Reasoning:\n\nskip: If changes have been detected in a non-private package or its dependencies, it should be published. skip is just another backdoor into #707, which we've already established is not supported by lerna.\ntag: If you're using lerna, you've implicitly agreed to let lerna manage the tags for you. You can always git tag yourself, but tags are significant in lerna and by doing that, you're kinda in uncharted territory in terms of lerna support. I mean, it'll work after a manual v2.0.1 (or my-package@2.0.1 with --independent) tag, for example, but it will no longer recognize changes before that tag as qualifying various packages for the next lerna publish.\ndiff: Piping a subshell into a prompt and then handling exit etc is ...not appealing. Moreover, I'm not certain it's possible, given our current infrastructure. I might be wrong, but that's my gut.. Thanks for reporting! I have a branch in-progress I just haven't had time to merge. It will definitely happen before the official v2.0.0 release.. This is fixed by #828 . Awesome repro, thank you!\n\n(Using d99de93 as the base, not the current head, which does have a lot of package.json changes)\ngit clone git@github.com:cerner/terra-core.git\ncd terra-core\ngit checkout -b lerna-updated-problem d99de93\nnpm i\n./node_modules/.bin/lerna updated. Ah, ok! Thanks again for taking the time to file an issue. :). There's absolutely no reason to have two package.json files in this case. Just put the module and main (pointing to files under dist) and dependencies in the right place (the package's \"root\" package.json) and call gulp build from the prepublish script.. I just merged #726, does that cover your use case?. I'm cool with --only-updated=[sinceRef] or a more explicit --since=ref, sure.\nWe definitely want to change the this.flags.onlyUpdated references to this.options.onlyUpdated to support \"durable\" config settings in lerna.json, I missed this during the previous PR.. Rebase and squash is fine, I like new tests :). @treshugart Just a quick note to say I haven't forgotten you, I'm just swamped at work and will try to carve out some time soon!. > ...[Most] (if not all) dependencies are listed in both the project root [...] and duplicated in each package's package.json.\nHave you tried --hoist yet? It sounds like you're pretty close to the ideal pattern for hoisting already. If everything gets hoisted, no lockfiles will be generated in the packages/* directories, and the root lockfile becomes the single source of truth.\nPersonally, I do exactly that: yarn.lock in the root, command.bootstrap.hoist = true in lerna.json, and the only thing that happens in packages/* during lerna bootstrap execution is symlinking and running prepublish. (Granted, I'm not using --npm-client=yarn, but same diff in this case)\nUnfortunately, there is currently no automated way to \"synchronize\" hoisted package versions, so whenever you update a version in the root, you'll have to manually bump the matching package versions under packages/*/package.json (it will warn you of a mismatch during the next lerna bootstrap if you don't sync). It's something I'd like to get around to at some point, though given the length of my todo list, it probably won't get done any time soon.... Ultimately, the choice to version lockfiles is up to the project. Lerna will work either way.. And yes, the node v4 failure was due to a timeout. That's unfortunate, and hopefully rare?. You need to use a matching semver range (e.g., ^1.0.0), not \"latest\", for lerna's algorithm to identify \"sibling\" packages that should be symlinked. This mismatch between recognized name and version range could probably be better surfaced as a warning. (The presence or absence of a scope is irrelevant in this case). The --parallel flag for lerna run and lerna exec hasn't been released yet, so you'll have to do --stream --concurrency=9999 for the time-being. I hope to cut a release soon.. I'm getting really tired of the node 4 AppVeyor build timing out during the integration tests. \ud83d\ude20 . I think you'll find the hoisted bootstrap process goes even quicker when you employ lerna's default symlinking strategy (the deps just need to have a compatible version, like caret same-major).. (also, boy am I getting tired of the integration tests timing out on AppVeyor \ud83d\ude20 ). I appreciate the follow-up. I think in the long-term, clients like npm 5 and a future version of yarn will make this symlink vs relative path dance less frustrating overall.\nIn the mean time, it probably wouldn't hurt to leave more of the original manifest intact, especially if we want to support some of the install filtering flags like --no-optional or --production. We can address that elsewhere, however.. The relative file: specifiers would be dramatically faster with npm 5+, no bootstrap required.\n\nOn Apr 24, 2018, at 18:50, trompx notifications@github.com wrote:\nHello @evocateur,\nAfter reading a lot of threads and browsing tenth of boilerplate repos, I have hard time to figure what is the best way to import local packages with the current version of lerna.\nI have a monorepo with multiple websites, all packages are private (will probably never published them) so basically I could just import with relative path, but just like trotzig, I like the way lerna mutualize the common dependencies in the root node_modules and speed up my setup.\nI followed the solved issues at the end of #501 but could not find a correct setup.\nWhen you say\nemploy lerna's default symlinking strategy\ndo you mean, set package in dependencies with a fixed version like:\n\"dependencies\": {\n    \"package-a\": \"^0.0.0\"\n}\nOr the way to go is:\n\"dependencies\": {\n    \"package-a\": \"file:../package-a\"\n}\nA note on private packages and relative path would be great on the main readme.\nThank you for this great tool anyway!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Local file: specifiers, then npm i packages/* (or if you have a single \u201centry\u201d module, just that one is sufficient). It\u2019s as easy as that. Lerna itself does it.\nOn Apr 25, 2018, at 04:50, trompx notifications@github.com wrote:\nSorry but I don't get it. If I don't bootstrap, I will not get any symlink if multiple packages use the same external library (like react, node-sass, immutable etc.) thus installing them in the local node_modules instead of the root one.\nWhat would be the command to get symlink for both external and local packages while using the file path for the local one (\"package-a\": \"file:../package-a\"), is lerna bootstrap --hoist all I need?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I'm increasingly desiring this myself, dealing with synchronization of hoisted modules with npm (so it's not just a yarn issue). While you could achieve most of this with a artisanally-crafted lerna exec --scope <glob> --\n yarn add <pkg> && lerna bootstrap --hoist, it has the awkward side-effects you've noted.\n\nI'm only concerned about the namespacing of the commands you suggest. add and remove are a bit ...broad? I'd feel better if the operation (add, remove, etc) was an argument of a single entry point, like lerna dependency (aliased to lerna dep for fewer keystrokes).\nHow does this API sound to you?\nbash\nlerna dep add [--dev] <dependency>[@version] [..glob]\nlerna dep remove <dependency> [..glob]\nlerna dep upgrade <dependency> [..glob]\nlerna dep sync [..glob]\nI figure allowing one or more package globs make sense, defaulting to ** like the --hoist option. We'd definitely want to support the yarn upgrade/npm install <pkg>@<latest> use case.\nThe sync subcommand would only be necessary for --hoist-configured repos, to facilitate manual root upgrades. Not sure if it's really necessary, but I definitely feel this specific pain (which would largely go away with the availability of the other proposed commands).. Still remains to be implemented.\n\nOn Mar 23, 2018, at 23:12, sachnk notifications@github.com wrote:\nHi --\nThanks for the great work. I'm currently using lerna add with no problems. Any recommended ways to achieve the corresponding lerna remove functionality?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. It would be sufficient to test whether it respects --production --no-optional, for example, by asserting that a modules under devDependencies and optionalDependencies didn't get installed.. Also, don't worry about making several commits, I'll be squashing the PR anyway.. Yeah, it's because pify is a transitive dependency of tempy, and thus will always be installed no matter the flags. I'd recommend choosing dependencies that don't have any dependencies themselves, so that the scope of the assertion is tightly focused.\n\nnormalize-newline, remove-trailing-separator, and balanced-match all fit the bill.\nThat being said, you're correct! We might want to focus on different flags, perhaps? Perhaps it would be easier to use --ignore-engines instead?. Of course, you're right! I apologize for my scattered attention.\n\nOn Jun 7, 2017, at 09:09, Pavel Strashkin notifications@github.com wrote:\n@xaka commented on this pull request.\nIn test/fixtures/BootstrapCommand/npm-client-args/npm:\n\n@@ -0,0 +1,3 @@\n+#!/usr/bin/env node\n+\n+require(\"fs\").writeFileSync(require(\"path\").resolve(__dirname, \"npm-debug.log\"), process.argv.slice(2));\nunfortunately bootstrap doesn't proxy npm client output\n\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I didn't realize the durable npmClientArgs from lerna.json and any additional CLI flags would be merged, not overridden, so my previous comment about the config naming is invalid. Still wish the integration test was a little less \"fake out npm\", but it works, and that's the ultimate goal.\n\nThanks @xaka for your patience. :). Augh, AppVeyor is exasperating. 2 out of 3 pass, so I'm calling it good.. Yes, sorry, I wasn't clear!\nWe already have tests for the --bail=true, and nobody would do that anyway.\nInstead, yargs should support prefixing an option with \"no-\" that also yields false. Let's test that case here instead of the already-tested default, just for completion's sake.\n(I personally find --no-bail to be the more \"fluent\" construction of this negation, if that makes sense)\n\nOn May 22, 2017, at 20:14, Ross Solomon notifications@github.com wrote:\n@rsolomon commented on this pull request.\nIn test/integration/lerna-exec.test.js:\n\n\n\"exec\",\n\"--bail=false\",\n\"--concurrency=1\",\n\"--\",\n\"npm run fail-or-succeed\",\n];\n+\nconst { stdout, stderr } = await execa(LERNA_BIN, args, { cwd });\nexpect(stderr).toMatch(\n\"Failed at the package-1@1.0.0 fail-or-succeed script 'echo \\\"failure!\\\" && exit 1'.\"\n);\nexpect(stdout).toMatch(\"failure!\");\nexpect(stdout).toMatch(\"success!\");\n});\n+\ntest.concurrent(\"--bail=true \", async () => {\n@evocateur apologies, but what do you mean by --no-bail? The bail=false test case is above on line 108, but I assume you mean something else. This is my first time diving into the Lerna codebase, so I'm probably just missing something :)\n\n\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. It looks completely unrelated, like somebody kicked a server over. I'll try kicking the build manually.. Awesome, it worked. Gotta love Windows \ud83d\ude44 . Awesome, thanks @loklaan!. Closing as a dupe of #704 . @smmJasoff other than the script @tomccabe suggested, there's really no way lerna can anticipate the behaviour of your network and npm config and current authorization (if any) and registry and strong nuclear force and and and...\n\nWe totally should have a --dry-run, too, but that won't really give you any more confidence that a given npm publish will work, other than what it intends to do.. Wouldn't git checkout master before yarn publish-ci be sufficient?. (assuming you want your CI to make commits and push them, with appropriate auth and whatnot). lerna publish makes a commit and pushes it to remote, by default. That\u2019s not ideal for a CI build. I would recommend passing --canary for that purpose.. Unlike semantic-release, lerna currently pushes a commit to the remote, not just tags. There\u2019s also currently no way to split the tagging and committing operations from CLI flags.\nThere are ways to \u201cre-attach\u201d the HEAD in CI, but they are largely dependent on CI environment variables, and thus complicated, arguably outside lerna\u2019s scope.\n\nOn Jul 7, 2018, at 00:36, Daniel Rodr\u00edguez Rivero notifications@github.com wrote:\nSorry, but I just don't understand. How the canary flag can help here ? I just want to automate the publish process and allow Lerna to push tags back to the repository.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @shilman Thanks for your patience!. I forgot my automagical \"fixes\" comment :shipit:. @emmenko described what should happen when using --independent versioning mode here.\n\nFor the default \"fixed\" versioning mode, should we preserve the original tag in the commit message somewhere? We might consider using npm version's %s placeholder, in that case.\n```bash\ncurrent default message\nv1.0.0\ncurrent --message \"Release\"\nRelease\nproposed --message \"Release %s finally!\"\nRelease v1.0.0 finally!\n``\n. Yeah, right now we always slap avin front of the new version, so that particular placeholder example would have yieldedvv1.0.0\ud83d\ude1d . Is your config any more complex than the default (spit out bylerna init`)? If so, it's really important for ruling out various classes of errors. Even anonymized it can still be valuable.\nThat said, how did you discover this? An errant git commit -am \"stuff\"?. If I had to guess, multiple onExit handlers might not be the best approach to cleaning up after install errors. Some minor bookkeeping and a single loop to restore currently-modified files might work better.\n\nOn Oct 2, 2017, at 05:33, Vasiliy Yorkin notifications@github.com wrote:\nI'm really suffering from the same problem. Almost every when time I got some postinstall error from one of subpackages (or any error at all) during install, my package.json is messed up and its content is replaced with lerna build artifacts. I guess its possible to reproduce this by just pressing ctrl+c before installation finish, not sure about this though.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I'm not sure I'm comfortable with making the staggeringly complex bootstrap command even more complex just to save a few cycles on CI. If such a solution were compact, easy to reason about, and well-tested, I'd be open to a PR.. @treshugart Sorry, yes, I meant to respond to @kanzelm3. I'm clearing my queue before I review #822, I appreciate your patience.. Yes, feel free to re-open when you have time, I was just trying to clear out stalled or out-of-date PRs.\nOn Oct 28, 2017, at 08:09, Alexandre Borela notifications@github.com wrote:\n@evocateur Sorry for the delay , I hadn't time to fix the issues in this pull, would this still be accepted or does this feature is already implemented in newer versions?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @danielo515 Sorry for the delayed response, but here's my understanding:\n\n\n--conventional-commits is currently only enabled when you use the \"independent\" versioning mode, not the default \"fixed\" versioning (the version field of lerna.json).\nOnly per-package CHANGELOG.md files are currently updated, not the root.\nEnabling --conventional-commits from lerna.json should look something like this:\njson\n{\n  \"lerna\": \"2.0.0-rc.5\",\n  \"command\": {\n    \"publish\": {\n      \"conventionalCommits\": true\n    }\n  },\n  \"version\": \"independent\"\n}\n. If you could reproduce a failing test case, that would be a great start to a pull request to fix it.. Again, a focused, minimal reproduction of these problems would go a long way toward figuring out a solution. We don't even know if this is a lerna bug or a conventional-commits bug, at this point.. Yeah, this behaviour also prevents us from supporting the \"only bootstrap production dependencies\" case (like npm install --only=production), as well.. > mangle the contents of yarn.lock\n\n\ud83d\ude28  uhhh, pardon my shock, but that's asking us to reverse-engineer yarn. Definitely not happening. Warn about --npm-client=yarn + --hoist, sure, that's possible.\nnpm install --global-style is important to avoid improper transitive dependency resolution for non-hoisted dependencies. If you want to use yarn everywhere, yarn will have to be extended to support that, which is obviously out of scope for lerna itself.. Workspaces don't manage anything related to version decisions (git stuff, basically), so lerna isn't being replaced entirely. Just as we call out to npm/yarn as much as possible, workspaces will help simplify lerna's logic.\n\nOn Jun 11, 2017, at 02:18, Thomas Fritz notifications@github.com wrote:\n@evocateur @MoOx Do you know what this would mean to lerna? Would Lerna then be obsolete? Or would Lerna just use this workspaces feature?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. If --hoist needs to do a leaf install (i.e., there are \"unhoisted\", possibly conflicting deps in the tree), then it will use npm because yarn does not support --global-install, which avoids leaking transitive dependencies incorrectly.. #1063 fixed this by making it error when --npm-client yarn and --hoist are used together, released in v2.5.0.. I've been bitten by this myself. We definitely need better error handling for this sort of error.. package.json is always going to be JSON. We should do better about catching errors and messaging appropriately.\nOn Jun 14, 2017, at 11:03, Andrey Fedorov notifications@github.com wrote:\n@evocateur would allowing for trailing commas in the project.json be a valid solution, as well? even though technically a deviation from the formal JSON spec, I would much prefer that to error-ing at all and would be willing to fix it.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. We really should figure out how to make the error logging less repetitive. In this instance, I'm not sure how useful the stack trace is anyway (except the origin), we don't care about the underlying library lines...\nOn Jul 26, 2017, at 06:55, Selwyn notifications@github.com wrote:\nThis issue has been solved by the looks of it. Wanted to pick it up but the error message is pretty clear though a bit verbose now:\nlerna info version 2.0.0\nlerna info versioning independent\nlerna ERR! EPACKAGES JSONError: Trailing comma in object at 10:3 in modules/my-project-package/package.json\nlerna ERR! EPACKAGES   },\nlerna ERR! EPACKAGES   ^\nlerna ERR! EPACKAGES     at module.exports (/home/selwyn/codeground/my-project/node_modules/parse-json/index.js:27:17)\nlerna ERR! EPACKAGES     at parse (/home/selwyn/codeground/my-project/node_modules/load-json-file/index.js:8:29)\nlerna ERR! EPACKAGES     at Function.module.exports.sync.fp [as sync] (/home/selwyn/codeground/my-project/node_modules/load-json-file/index.js:11:29)\nlerna ERR! EPACKAGES     at Function.module.exports.sync (/home/selwyn/codeground/my-project/node_modules/read-pkg/index.js:40:25)\nlerna ERR! EPACKAGES     at /home/selwyn/codeground/my-project/node_modules/lerna/lib/PackageUtilities.js:125:47\nlerna ERR! EPACKAGES     at Array.forEach (native)\nlerna ERR! EPACKAGES     at /home/selwyn/codeground/my-project/node_modules/lerna/lib/PackageUtilities.js:119:86\nlerna ERR! EPACKAGES     at Array.forEach (native)\nlerna ERR! EPACKAGES     at Function.getPackages (/home/selwyn/codeground/my-project/node_modules/lerna/lib/PackageUtilities.js:118:22)\nlerna ERR! EPACKAGES     at Repository.buildPackageGraph (/home/selwyn/codeground/my-project/node_modules/lerna/lib/Repository.js:82:51)\nlerna ERR! EPACKAGES  Errored while collecting packages and package graph { JSONError: Trailing comma in object at 10:3 in modules/my-project-package/package.json\nlerna ERR! EPACKAGES   },\nlerna ERR! EPACKAGES   ^\nlerna ERR! EPACKAGES     at module.exports (/home/selwyn/codeground/my-project/node_modules/parse-json/index.js:27:17)\nlerna ERR! EPACKAGES     at parse (/home/selwyn/codeground/my-project/node_modules/load-json-file/index.js:8:29)\nlerna ERR! EPACKAGES     at Function.module.exports.sync.fp [as sync] (/home/selwyn/codeground/my-project/node_modules/load-json-file/index.js:11:29)\nlerna ERR! EPACKAGES     at Function.module.exports.sync (/home/selwyn/codeground/my-project/node_modules/read-pkg/index.js:40:25)\nlerna ERR! EPACKAGES     at /home/selwyn/codeground/my-project/node_modules/lerna/lib/PackageUtilities.js:125:47\nlerna ERR! EPACKAGES     at Array.forEach (native)\nlerna ERR! EPACKAGES     at /home/selwyn/codeground/my-project/node_modules/lerna/lib/PackageUtilities.js:119:86\nlerna ERR! EPACKAGES     at Array.forEach (native)\nlerna ERR! EPACKAGES     at Function.getPackages (/home/selwyn/codeground/my-project/node_modules/lerna/lib/PackageUtilities.js:118:22)\nlerna ERR! EPACKAGES     at Repository.buildPackageGraph (/home/selwyn/codeground/my-project/node_modules/lerna/lib/Repository.js:82:51)\nlerna ERR! EPACKAGES   stack: 'JSONError: Trailing comma in object at 10:3 in modules/my-project-package/package.json\\n  },\\n  ^\\n    at module.exports (/home/selwyn/codeground/my-project/node_modules/parse-json/index.js:27:17)\\n    at parse (/home/selwyn/codeground/my-project/node_modules/load-json-file/index.js:8:29)\\n    at Function.module.exports.sync.fp [as sync] (/home/selwyn/codeground/my-project/node_modules/load-json-file/index.js:11:29)\\n    at Function.module.exports.sync (/home/selwyn/codeground/my-project/node_modules/read-pkg/index.js:40:25)\\n    at /home/selwyn/codeground/my-project/node_modules/lerna/lib/PackageUtilities.js:125:47\\n    at Array.forEach (native)\\n    at /home/selwyn/codeground/my-project/node_modules/lerna/lib/PackageUtilities.js:119:86\\n    at Array.forEach (native)\\n    at Function.getPackages (/home/selwyn/codeground/my-project/node_modules/lerna/lib/PackageUtilities.js:118:22)\\n    at Repository.buildPackageGraph (/home/selwyn/codeground/my-project/node_modules/lerna/lib/Repository.js:82:51)',\nlerna ERR! EPACKAGES   name: 'JSONError',\nlerna ERR! EPACKAGES   fileName: 'modules/my-project-package/package.json' }\nThoughts?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I think the error reporting improvements are part of the solution. I don't believe it is lerna's responsibility to fix invalid JSON. Normal npm commands will also fail with invalid package.json content, so we should aspire to useful error messages that help the developer fix the typo quickly and get on with their day.. Aside from the potential for --since, why not just a normal git diff HEAD..<tree-ish> -- ./packages ? There's nothing really special going on with lerna diff other than the \"since last release\" evaluation.. This is not surprising, but definitely needs to be addressed. Hopefully we can delegate most/all of the bootstrapping logic to npm@5.. Notably, if you \"manually\" hoist all the managed dependencies into the root (thus ensuring lerna bootstrap is mostly a no-op, aside from symlinking), it works with npm@5. Not ideal, but it's a more robust cross-platform workaround.. All dependencies in ./packages/*/package.json are literally added to ./package.json\n\nThus, when bootstrapping, everything already exists in the root and only symlinking is necessary.\n\nOn Jun 10, 2017, at 15:09, Maxime Thirouin notifications@github.com wrote:\n@evocateur what are you calling \"hoisting manually\"?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I just use relative file: specifiers for sibling dependencies now, don't even use lerna bootstrap anymore. Lerna's own source code demonstrates the usage. npm i packages/* and you're done.. @tivac Since lerna itself has no problem at all using npm ci with relative file specifiers in its windows builds, I'm inclined to believe that your recent issues migrating modular-css are due to dependencies misbehaving, not cross-platform incompatibility (that would be an issue for npm to fix).. No, it isn't. Again, it's more than likely a symptom of misbehaving dependencies, not Windows platform-ness. Relative file: specifiers in the root results in basically the same symlink structure as yarn workspaces.. > Should npm i from the root install the dependencies of those file: packages?\n\nYep! The whole tree becomes serialized in the package-lock.json, including relative file: siblings. It's pretty sweet.. Yeah, that PR eventually went back to file: without updating the summary. If you run lerna link convert (only needed once), it basically sets you up on the golden path.\nI agree I really need to get around to a blog post or something.... Yeah, sometimes I forget the CLI help isn't automatically shown in the README. And in this case, could definitely use more context. Along with that Lerna 3.0 blog post I've been meaning to write for a few months now...\n```\n$ npx lerna link -h\nlerna link\nSymlink together all packages that are dependencies of each other\nCommands:\n  lerna link convert  Replace local sibling version ranges with relative file: specifiers\nCommand Options:\n  --force-local  Force local sibling links regardless of version range match                                             [boolean]\n```\n(cut off repetitive global options). Shouldn't the lack of a version be an error? It's benign when it's a private package, I guess, but I'd rather avoid letting users think it's going to work without a proper version field.. A yellow \"MISSING\" would be perfect.. (and the test failure is indeed unrelated, a weird intermittent timeout). for sure!\n/me kicks timed-out travis build. I have no experience with Docker, so I'm afraid I can't offer any insight.. The inconsistency between scoped ls/bootstrap and run is certainly itchy. I am open to making it more consistent.. This was fixed waaaay back in v2.0.0 \ud83e\udd38\u200d\u2640\ufe0f . Appveyor needs node 8 too. Unfortunately the test failures aren't especially descriptive (differences in npm output, more than anything).. Judging by the latest Travis failures, it looks like some of the messages from npm 5 have changed. I'll have to run things locally to narrow it down.\nOnce npm 5 & yarn gain workspace support, a 2.x \"legacy\" branch seems reasonable while 3.x becomes master. In the immediate near-term, I'm pretty sure npm 5 won't necessitate a major bump.. What is the use case for this? If you're ignoring everything when you bootstrap, ....why bootstrap?. That seems fair. PRs welcome.. Yes, --hoist is what you're looking for. I can't promise any npm5-specific support, however it should still work?. If the leaves don't have a dependency on npm themselves, that will probably fail? Since node_modules/.bin/npm doesn't exist under each packages/* subdirectory.. I don't understand why you'd need to specify a local npmClient. Just ...why?. The root package.json, at the very least, is how you install lerna locally during a CI build. And, generally, where you place your testing and linting tools, which you run from the root instead of each package (slowly and repetitiously). The root can also hold all the \"hoisted\" packages, which speeds up bootstrapping when using the --hoist flag.\npostinstall is a really odd lifecycle, considering it is kinda-sorta deprecated (its siblings preinstall and install are explicitly called out, anyway).\nI don't think it's really appropriate for lerna to artificially call npm run postinstall on a package.json that it is not explicitly managing. You can always add the root as a managed location (in the packages array of lerna.json), which would then run postinstall along with the others.. Yes, \"manual\" hoisting is currently the safest way to make lerna bootstrap super quick.\nIf you're hoisting, it's currently unsafe to put lerna bootstrap in the postinstall of the root package.json, as lerna bootstrap --hoist runs npm install in the root first, thus triggering an endless cycle.\nHowever, you've presumably got other commands, like npm test and the like. You can either run an additional script in the root that calls lerna bootstrap, or call it from a \"pre\"-lifecycle hook, like \"pretest\" or \"prebuild\".\njson\n{\n  \"name\": \"my-monorepo\",\n  \"private\": true,\n  \"devDependencies\": {\n    \"eslint\": \"^3.19.0\",\n    \"jest\": \"^20.0.4\",\n    \"lerna\": \"^2.0.0-rc.5\"\n  },\n  \"scripts\": {\n    \"bootstrap\": \"lerna bootstrap --hoist\",\n    \"pretest\": \"npm run bootstrap && eslint packages\",\n    \"test\": \"jest\"\n  }\n}\nWith this root, npm install && npm test would be sufficient to ensure bootstrap is always run when needed.. @Andarist Wonderful, thanks!. I would argue that's what eslint-plugin-import is for (specifically import/no-unresolved).. In current master's test/RunCommand.js, this test fails:\n```js\n    it(\"does not error when no packages match\", (done) => {\n      const runCommand = new RunCommand([\"missing-script\"], {}, testDir);\n  runCommand.runValidations();\n  runCommand.runPreparations();\n\n  runCommand.runCommand(exitWithCode(0, (err) => {\n    if (err) return done.fail(err);\n\n    try {\n      expect(NpmUtilities.runScriptInDir).not.toBeCalled();\n      expect(output).not.toBeCalled();\n\n      done();\n    } catch (ex) {\n      done.fail(ex);\n    }\n  }));\n});\n\n\n  \u25cf RunCommand \u203a in a basic repo \u203a does not error when no packages match\nNo packages found with the npm script 'missing-script'\n\n  at RunCommand.initialize (src/commands/RunCommand.js:67:18)\n  at RunCommand._attempt (src/Command.js:377:2199)\n  at RunCommand.runCommand (src/Command.js:377:1912)\n  at Object.<anonymous> (test/RunCommand.js:84:18)\n\n``. and actually, you don't need to assert on the snapshot, asranInPackages` should never be called.. Yeah, I was afraid of that. I really need to fix that (non-errors exiting early shouldn't be non-zero exits).\nJust push up a commit that reverts it, including \"[skip ci]\" in the commit message, and I'll squash the PR so it'll look clean :). Thanks!. Just add the root to your packages list in lerna.json:\ndiff\n  \"packages\": [\n+    \".\",\n    \"packages/*\"\n  ],. The existing lifecycle hooks (prepublish, publish, & postpublish) aren't enough?\nI don't see something this fundamental to the purpose of lerna being overridable in any context.. You could conceivably chain some lerna exec calls, I suppose.\n```sh\nbump versions in changed packages, create tag(s) and push to remote\nlerna publish --skip-npm\ncreate ${packageName}-v${version}.tgz file in each package\nlerna exec -- npm pack\nrun a command to upload that tgz to tarball repository\nlerna exec -- rsync *.tgz \n```\nnpm pack is run during the npm publish process.. I get annoyed by those messages too, but I agree with @ricky that it's better to be explicit. Especially when hoisting from a root node_modules that is governed by a lockfile (yarn.lock, package-lock.json, or npm-shrinkwrap.json), you really need to be explicit.\nI have been noodling about adding a lerna hoist subcommand that would streamline some of these operations, similar to how yarn workspaces goes about things (but always from the root, not the package directory directly).. I don't know what's up with the AppVeyor failures, but they're not related to this PR.. This is an upstream regression in readline, and will be fixed accordingly.. Oh hey, yeah, that's definitely a bug.\nThis line should be looping through the new this.repository.packageParentDirs collection (like DiffCommand does here) to construct the arguments to GitUtilities.checkoutChanges (which would need to accept an array as the first argument, not a string, and be spread into the args of the execSync call).. It\u2019s likely there is a way to make git do this, perhaps a flag. lerna import is a generalized solution, and can\u2019t account for every edge case.\n\nOn Dec 4, 2017, at 22:15, Vitali Zaidman notifications@github.com wrote:\nAny workaround for this one? I can't rewrite the history of my package.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. If you're never going to publish a given package, make sure you set \"private\": true in its package.json. It will then be available to link during bootstrap, but in this case (for public packages), you really shouldn't be depending on a private package as that fundamentally breaks any consumer.\n\nIf you're not publishing any of these packages, I would strongly advise against using lerna. Just use a single package.json and a reasonable directory structure.\nWhen using lerna, you do not (generally) run npm install anywhere except the root of the repo (wherever lerna.json and the package.json sibling that holds the common devDependencies + test/lint scripts lives). lerna bootstrap is the way you install things in the managed packages. The association of \"sibling\" packages (subdirectories of ./packages, by default) is matched by package name (not strictly the directory name, but whatever is in the name property of ./packages/${package_name}/package.json) and semver-satisfying version range.\nGiven this structure:\n.\n\u251c\u2500\u2500 lerna.json\n\u251c\u2500\u2500 package.json\n\u2514\u2500\u2500 packages\n    \u251c\u2500\u2500 package-1\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 package.json\n    \u2514\u2500\u2500 package-2\n        \u2514\u2500\u2500 package.json\nWith these package.jsons under packages:\njson\n{\n  \"name\": \"@my-scope/package-1\",\n  \"version\": \"1.0.3\",\n  \"dependencies\": {\n    \"foo-bar-package-2\": \"^0.1.5\"\n  }\n}\njson\n{\n  \"name\": \"foo-bar-package-2\",\n  \"version\": \"1.1.0\",\n  \"dependencies\": {\n    \"@my-scope/package-1\": \"^1.0.0\"\n  }\n}\nThe following things should happen during lerna bootstrap:\n1. ./packages/package-1 is symlinked into ./packages/package-2/node_modules/@my-scope/package-1\n2. foo-bar-package-2@0.1.5 is not symlinked into ./packages/package-1/node_modules/..., but instead installed from npm (because the semver range does not satisfy the current repo version of @my-scope/package-1, which is 1.0.3)\nDoes that make sense?. The dependency range in the consumer cannot be *, it must match the private package. Also, a private local package should never be in dependencies of a published package, as that will break when anyone tries to install the published package.\n\nOn Dec 14, 2017, at 04:59, Piotrek Koszuli\u0144ski notifications@github.com wrote:\nI've checked that v2.5.1 gives the same result.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Why does your root package have local dependencies? Is it also published? (I don\u2019t recommend publishing your root package, btw)\n\nIf it isn\u2019t, just use a local file specifier (file:packages/my-package-directory) and npm5 will do the right thing.\n\nOn Feb 14, 2018, at 08:35, Piotrek Koszuli\u0144ski notifications@github.com wrote:\nHi again!\nI've stumbled upon this again. I tried to bootstrap a project which has this in the root package.json:\n\"dependencies\": {\n    \"@ckeditor/ckeditor5-font\": \"0.0.1\",\n  }\nAnd @ckeditor/ckeditor5-font's package.json looks like this:\n{\n  \"name\": \"@ckeditor/ckeditor5-font\",\n  \"version\": \"0.0.1\",\n  \"private\": true\n}\nlerna bootstrap logs this, unfortunately:\nlerna info hoist Installing hoisted dependencies into root\nlerna ERR! execute callback with error\nlerna ERR! Error: Command failed: npm install\nlerna ERR! npm ERR! code E404\nlerna ERR! npm ERR! 404 Not found : @ckeditor/ckeditor5-font\nlerna ERR! npm ERR! 404\nlerna ERR! npm ERR! 404  '@ckeditor/ckeditor5-font' is not in the npm registry.\nlerna ERR! npm ERR! 404 You should bug the author to publish it (or use the name yourself!)\nlerna ERR! npm ERR! 404\nlerna ERR! npm ERR! 404 Note that you can also install from a\nlerna ERR! npm ERR! 404 tarball, folder, http url, or git url.\nlerna ERR!\nlerna ERR! npm ERR! A complete log of this run can be found in:\nlerna ERR! npm ERR!     /Users/p/.npm/_logs/2018-02-14T16_30_11_944Z-debug.log\nlerna ERR!\nlerna ERR!     at Promise.all.then.arr (/usr/local/lib/node_modules/lerna/node_modules/execa/index.js:236:11)\n{ Error: Command failed: npm install\nnpm ERR! code E404\nnpm ERR! 404 Not found : @ckeditor/ckeditor5-font\nnpm ERR! 404\nnpm ERR! 404  '@ckeditor/ckeditor5-font' is not in the npm registry.\nnpm ERR! 404 You should bug the author to publish it (or use the name yourself!)\nnpm ERR! 404\nnpm ERR! 404 Note that you can also install from a\nnpm ERR! 404 tarball, folder, http url, or git url.\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /Users/p/.npm/_logs/2018-02-14T16_30_11_944Z-debug.log\nat Promise.all.then.arr (/usr/local/lib/node_modules/lerna/node_modules/execa/index.js:236:11)\nat process._tickCallback (internal/process/next_tick.js:103:7)\n\ncode: 1,\n  killed: false,\n  stdout: '',\n  stderr: 'npm ERR! code E404\\nnpm ERR! 404 Not found : @ckeditor/ckeditor5-font\\nnpm ERR! 404 \\nnpm ERR! 404  \\'@ckeditor/ckeditor5-font\\' is not in the npm registry.\\nnpm ERR! 404 You should bug the author to publish it (or use the name yourself!)\\nnpm ERR! 404 \\nnpm ERR! 404 Note that you can also install from a\\nnpm ERR! 404 tarball, folder, http url, or git url.\\n\\nnpm ERR! A complete log of this run can be found in:\\nnpm ERR!     /Users/p/.npm/_logs/2018-02-14T16_30_11_944Z-debug.log\\n',\n  failed: true,\n  signal: null,\n  cmd: 'npm install',\n  timedOut: false,\n  exitCode: 1 }\nHow can I force Lerna to not try to look for this package on npm? For the development purposes only I need to somehow work with it locally, before publishing it on npm.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. It\u2019s not clear to me why lerna \u201crequired\u201d you to publish that in-development module. If it can\u2019t live in a feature branch until it is ready, you should put \u201cprivate\u201d: true in the package.json so lerna publish doesn\u2019t cause it to be uploaded to the registry. There\u2019s literally nothing about how lerna works that \u201crequires\u201d publishing a module just to develop it.\n\nAlso, why is that SO user doing a deep import of non-transpiled code? That seems very bad in and of itself.\n\nOn Feb 26, 2018, at 05:29, Piotrek Koszuli\u0144ski notifications@github.com wrote:\nOur community stumbles upon these not-yet-completed packages and people are confused about them (see https://stackoverflow.com/questions/48943719/how-to-install-plugins-in-ckeditor-5). Is there something we could do? Would you be interested in accepting a PR if we changed this in Lerna? If yes, how should we approach this?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. A reproduction would go a long way toward diagnosing the actual issue.\nOn Feb 26, 2018, at 09:10, Piotrek Koszuli\u0144ski notifications@github.com wrote:\nI'm confused now too.\nThere\u2019s literally nothing about how lerna works that \u201crequires\u201d publishing a module just to develop it.\nWhat I'm trying to show you from the beginning is that Lerna crashes when I try to use a not-yet-published as a dependency of another package (for development purposes). Calling lerna bootstrap makes Lerna crash on this.\nSo far I thought that you don't agree that this is even a case. If you do, I can provide a repo or something where you could reproduce it.\nAlso, why is that SO user doing a deep import of non-transpiled code? That seems very bad in and of itself.\nI guess this is out of the scope of this issue ;)\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @Reinmar A \"rooted leaf\" (lerna.json \"packages\": [\".\", ...]) is generally not a good idea with lerna for a variety of reasons, this problem (lerna bootstrap --hoist) included.. I would really like to remove support for it, to be quite frank. It's generally nothing but problems for very little gain. If I get around to it, I won't remove it until the next major.\n\nUse relative file: specifiers (just like lerna itself does) and you can completely ignore lerna bootstrap and lerna clean. Run lerna link convert once, and a single npm ci in the root is all that is necessary.. @borekb Your problem is using Yarn. Don't do that, imo. You can't use file: specifiers with Yarn; if you insist on Yarn, switch to workspaces instead of lerna bootstrap.. Yarn literally does not support file: specifiers. Trust me when I say npm handles this 100% fine, otherwise I wouldn't be able to publish new versions of Lerna itself.. If you're using Yarn you might as well use workspaces.\nIf lerna add isn't recognizing the local package, an isolated reproduction would be appreciated.. lerna publish should never be modifying dependencies that it doesn't explicitly manage (the other siblings under ./packages). To be clear, you are seeing lerna publish modify non-managed dependency versions?. You should use --scope to limit the bootstrap actions to the affected package.\nsh\nlerna bootstrap --scope affected-package-name\nDisabling scripts during bootstrap is potentially dangerous, given that we're already breaking up the normal flow of the install lifecycle to begin with. I'd rather not introduce that footgun when other solutions exist.. For adding a dependency to a lerna-managed package.json, editing the file directly and then running lerna bootstrap is the correct method.. It's not recommended to shrinkwrap lerna-managed modules.. Yarn is a different beast. There really isn't any lerna-specific documentation either way, sorry.\n\nOn Jul 12, 2017, at 22:25, danoc notifications@github.com wrote:\n@evocateur \u2013 Does that mean the packages should also not have a yarn.lock? (Feel free to point me to documentation! \ud83d\ude04 )\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. This was fixed in #982, released in v2.1.0. lerna add was added in v2.5.0, which should address this use case.. We've been down this road before, and our stance hasn't changed. Versions are cheap, developer time is not, and we will always bump transitive dependents when their dependencies change.. As noted in #807, turns out https://github.com/lerna/lerna/blob/master/src/commands/PublishCommand.js#L128 should actually be callback(null, false) so we don't attempt to proceed with the execute() phase (where the erroneous git commit is being attempted on an unchanged tree).\n\nThis also means we'll have to modify the semantics of the writeLogFile() conditional to avoid writing out logs if a non-error wants to exit non-zero. I should think if (err) { would be more appropriate, as exiting early should never actually be caused by a legit error passed to the _attempt() callback.. This was fixed in #982 . That's a textbook case for a package, consumed as a dependency by the dependent modules. If it's required in any code that is included in published packages, it needs to be a package itself. Otherwise your packages are broken.. If you require() or import a module at runtime, it needs to either be a part of the package tarball (when published), or a dependency. So if this utils module is needed when consumers of your package require your module, then yes, it needs to be its own package published to npm.. @richburdon Can you provide an example repo? I'm a bit mystified by the context of this error.. @mocheng Can you provide an example repo? It would be interesting to see what differences with @wtgtybhertgeghgtwtg's setup are contributing to this problem.. @jacobp100 You should lerna bootstrap --hoist so your packages themselves can express the proper dependency and not be broken when others install them.. We could even add an integration test that validates the yargs behaviour. So weird, too, since you'd think an option that wasn't passed would default to undefined anyway. (An issue to raise upstream, perhaps?). Oy, that's a subtle bug. Maybe we should always pass npm_config_registry, defaulting the option to https://registry.npmjs.org/ so it always \"just works\" with custom --registry config?. #1145 may have fixed this, if we can trust that yarn publish to do the right thing, auth-wise?. This was hopefully fixed in https://github.com/lerna/lerna/releases/tag/v2.7.0, please try it out. 2.7.1 should have fixed the yarn publish issue, turns out it tries to prompt for \u201cnew version\u201d be default. Dunno if that solves the issue for you, though.\n\nOn Jan 14, 2018, at 11:34, Andrew notifications@github.com wrote:\n2.7.0 did not end up fixing this for me, @evocateur, although manually setting the registry through CLI options did work.\nMy setup is probably weird, though:\nUsing lerna 2.7.0\nUsing yarn 1.1.0\nUsing yarn workspaces\nyarn publish doesn't seem to play nicely with lerna publish, as it breaks when ran from a script.\nBecause of the point above, I'm configuring lerna to use npm when publishing\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Thanks @bestander!. looking now, thanks for understanding. That's a great idea! Is that documented anywhere? I'm not against including\nthat fix in this PR.\n\nOn Wed, Jul 5, 2017 at 9:53 PM, Simen Bekkhus notifications@github.com\nwrote:\n\nOh, npm 5 strikes again.\n\"lerna info version __TEST_VERSION__\n+package-3: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+package-3: \u2502                    npm update check failed                    \u2502\n+package-3: \u2502              Try running with sudo or get access              \u2502\n+package-3: \u2502             to the local update config store via              \u2502\n+package-3: \u2502 sudo chown -R $USER:$(id -gn $USER) C:\\\\Users\\\\appveyor\\\\.config \u2502\n+package-3: \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nExport NO_UPDATE_NOTIFIER in the tests?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/lerna/lerna/pull/899#issuecomment-313294717, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAV5SyAgrZCxbecRqfYQsfiidSqZLXDks5sLGhigaJpZM4OGFNC\n.\n. I don\u2019t understand why this \u201cflat\u201d package structure is better than just another npm package. \u201cbig-obese-monolith\u201d packages are an anti-pattern in npm. If you want to expose submodules directly, extract them into a separate package. Literally the reason Lerna was created in the first place.\nOn Dec 8, 2017, at 15:40, Andreas Brantmo notifications@github.com wrote:\nAs far as I know this is the only way to accomplish \"flat\" package structure (without the /dist or /lib section in the import path) unless skipping src/dist directories entirely, which isn't practicable if your source requires transpilation.\nLet's say I want to import only the tinyUtil module from the utils namespace inside my big-obese-package, what I would like it to look like is:\nimport tinyUtil from 'big-obese-package/utils/tiny-util';\nIf the source is ts/jsx/esnext etc, the recommended way of distributing the package is to transpile it to a dist directory (\"npmDistDirectory\" in @esakal's proposal), include package.json and publish. This doesn't seem to be possible with lerna at this moment, which is a pity.\nInstead I will need to transpile it to ./dist, reference it from the files prop in package.json and then accept the following import:\nimport tinyUtil from 'big-obese-package/dist/utils/tiny-util';\nAfter spending precious time on your API design, naming convention etc, this is a bitter tradeoff.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. In my experience, as well as observation of community packages over many years, coupling consumption of a given export to the literal directory structure of a tarball is an extremely hostile anti-pattern. Especially nowadays with ES module exports and whatnot combined with tree-shaking module bundlers, there\u2019s really no fundamental necessity for false-basedir publishing.\n\nLerna is designed around the way npm works. Packages are published from the same directory as the package.json, and construct their tarball from metadata contained therein. Publishing from a different directory with a modified dependency tree is not idiomatic npm, and lerna will not support it.\n\nOn Dec 8, 2017, at 17:06, Andreas Brantmo notifications@github.com wrote:\n@evocateur: I will not go into argument whether x is better than y - most often I am wrong. But if we ignore my poor choice of lorem-ipsum name (we can call it something else, such as \"tiny-lodash\"), I can't really see why lerna should hinder the author from using a nested structure within a package and at the same time provide \"semantic imports\".\nI came here to evaluate lerna as a tool for managing JavaScript projects with multiple packages, not as a tool to limit me on how to structure the internals of my packages (whether good or bad).\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I fail to see what typescript has to do with this non-idiomatic subdirectory pattern. You can publish npm modules with transpiled code and typings under dist just fine, no mangling of package.json required.\nOn Dec 28, 2017, at 21:58, Joe Woodhouse notifications@github.com wrote:\nAuthor of several typescript modules here who has hit the exact same issue, all my modules publish from a dist folder. Wish I'd known this before starting to use lerna! Would love this feature to be implemented, but will probably have to switch to something else instead now.\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.\n. That\u2019s literally what the main field is for. If you transpile into dist, and you have index.js as your entry, \u201dmain\u201d: \u201cdist/index.js\u201d works perfectly fine in your package.json file.\nOn Feb 4, 2018, at 07:38, Yordis Prieto notifications@github.com wrote:\n@evocateur btw, I do not see this related to Typescript only but any package that requires a build process and normally they will put the final package inside specific folder.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. > I can't just export everything [through] a single file (pkg.main) because that will work as long as you do not have any naming collision.\n\nYour packages are too big if that is the case. Embrace the patterns of the npm ecosystem.\n. If anyone wants this, fork lerna and do it yourself. This conversation is over.. I believe this was fixed by @treshugart in #898. I hope to publish it soon.. As far as I can tell, customizing the commit message during an --independent publish is already validated here: https://github.com/lerna/lerna/blob/1d7eb9eeff65d5a7de64dea73613b1bf6bfa8d57/test/PublishCommand.js#L680-L688. In the sense that you can override the heading of the independent publish message, yes, for several releases now. Still can\u2019t interpolate the placeholder, as there is no unitary version that makes any sense in independent mode.\n\nOn Feb 4, 2018, at 23:06, Daniel Rodr\u00edguez Rivero notifications@github.com wrote:\nSo it'd the new version which includes this fixed published?\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Yes.\nOn Feb 5, 2018, at 09:59, Daniel Rodr\u00edguez Rivero notifications@github.com wrote:\nIn the sense that you can override the heading of the independent publish message, yes, for several releases now\nAre we talking about doing it through lerna.json right ?\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @richburdon Yes. We're all volunteers with day jobs, doing the best we can, very reliant on community contributions.. I'll be the first to admit we don't have especially great integration test coverage for the --hoist flag. I use it daily with no issues, but that's because I know the kinks and I don't use yarn, etc.\n\nThe best help would be to isolate an integration test that reproduces these issues, which hopefully would go a long way toward identifying the fix. I really want to make lerna a great tool, but I (and other maintainers) need a lot of help.. Yes, I would recommend staying on npm4 for the time being. Also, explicitly adding all of your hoisted deps to the root package.json doesn't hurt (which makes all the packages/* installs basically symlink-only).. I was hoping the incrementing could be done with git describe --long semantics for the tagged part (-alpha.{commits since nearest tag}.{sha}), but this is better than our current --canary and I would like to get this breaking change in before v2.0.0 official.\nThanks @Craga89!. Already cut 2.0.0, no worries! I see no breaking change in slightly modifying the post-tag metadata.\n\nOn Jul 6, 2017, at 14:39, Craig Michael Thompson notifications@github.com wrote:\nI really like the idea of {commits since nearest tag} as it matches well to the current GitVersion implementation we have at work. I'll look into it in a different commit ASAP so we could potentially get it in before 2.0.0? When are you cutting for it?\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @Hypnosphi As of v2.1.0, lerna publish --canary --cd-version major. Unless you intend on publishing those packages consumed by the React app, I wouldn't recommend using lerna. Just use relative paths, they're not uncool.. You don't use relative paths if you're using npm link, of course.. If you're calling a CLI provided by a devDependency in a leaf package.json, it needs to be specified in that package.json. --hoist is a bootstrap optimization and does not remove the necessity for expressing proper package dev/dependencies.\n\nAs I've mentioned several times in the last week alone, npm link is not appropriate for the needs of a monorepo for a variety of reasons.. That's a decent summary. There are other issues with npm link at present, one of them being that it is soon to be rewritten according to a thread I saw somewhere...\n\nOn Aug 27, 2017, at 17:37, Michael Lun\u00f8e notifications@github.com wrote:\nCould you direct me to where you have mentioned that before and/or maybe elaborate a bit on why npm link is not appropriate for the needs of a monorepo?\nI did find a bit of info here is that the right place to look?\n11 (comment)\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.\n. So, the main problem I have with this patch is that once enabled, you've set yourself up for an inevitable footgun. Start assuming your local packages are always linked, regardless of semver expression, and it's a question of \"when\", not \"if\", you ship code with untested/incompatible APIs.\n\nI would much rather figure out why the versions drift in the first place. Do we need to improve our handling of pre-release versioning? Quite likely! There are a lot of subtleties about pre-* version comparison that are not well-tested in the current codebase.\nWe could almost certainly improve our matching algorithm without abandoning one of the core idioms of npm packages (that is, semver ranges that express semantic compatibility). Improving our messaging when these error cases are encountered would go a long way to helping understand why they occur in the first place.. As I suggested in #1082, I'd be more comfortable with this if it was renamed --force-local, avoiding the implicit condoning of ignoring semver. Yes, it still does ignore the semver range under the covers, but the public API doesn't have to admit that. \ud83d\ude09 . #1082 is only adding it for lerna link, not lerna bootstrap. It's a lot simpler there, and I kinda prefer it there vs bootstrap, which is already a terribly complex command. If you're okay with lerna link --force-local, feel free to close this PR.. closing as a duplicate of #853 . There's a lot of stuff todo re: npm5 and package-locks. I didn't even know package-lock.json was supposed to be ignored if not at the \"top-level\". Seems ambiguous, to me.. PRs welcome to add this solution to the documentation. Lerna always publishes packages in topological order; that is, dependencies before dependents.\nWe've already had the discussion about \"only bump changed dependencies\" several times. The answer is the same: we will always bump dependent versions when a dependency version changes.\nLerna only supports npm publish, as it is designed to aid publish npm packages.\nIf you need to inject a \"staging\" step in the publish process, you can pass --temp-tag to lerna publish and it will publish the changed modules under the lerna-temp dist-tag before switching them all to the latest dist-tag.. Conventionally speaking, the root package.json should never be depended on by the \"leaf nodes\" (the lerna-managed ./packages/*). I think the --force-publish solution is more than sufficient for this (hopfully) rare case.. No, because this isn\u2019t something that happens frequently enough to merit automation. No change to the Babel configuration \u201cjust happens.\u201d You\u2019re always capable of identifying if anything changed since the last release and cutting a release to \u201cclear the decks\u201d before a force-published Babel (or other root) change.. No, because this isn\u2019t something that happens frequently enough to merit automation. No change to the Babel configuration \u201cjust happens.\u201d You\u2019re always capable of identifying if anything changed since the last release and cutting a release to \u201cclear the decks\u201d before a force-published Babel (or other root) change.. Thanks @dlmr!. @KingScooty Just lerna publish --conventional-commits. That's it. No standard-version usage required, just commits in the angular format.. As long as those commitizen-generated messages actually get committed, that should be sufficient? That is, if you've successfully published with lerna before, and have vX.Y.Z-style git tags in the appropriate place so lerna can determine what has changed, etc.. If you could open a new issue with your version, config, and perhaps a small repro, that would be greatly appreciated!. If you're trying to install a lerna-managed package from a github version specifier (e.g., \"yargs\": \"myfork/yargs\"), I'm afraid that won't work. If you need to provide prerelease versions, I would suggest lerna publish --canary.. \"hoist\": \"{aws-sdk,graphql}\" should work.. We essentially want something like npm version <newVersion> --no-git-tag-version, which automatically updates the package-lock.json version key.. We added calling the version lifecycle scripts in #1029 (and made properly synchronous in #1030), if that helps any. We still have a few issues related to npm5 compatibility, one of them being calling npm to update the version as I described so the lockfile gets updated, too.. --nohoist is effectively an implicit negation. You can pass as many --nohoist=<glob> arguments as you want, they'll be iterated in order to filter the list. The glob itself should match the package name, not directory or any other value.\nsh\nlerna bootstrap --nohoist node-pty --nohoist electron-rebuild\nAlternatively, you can provide an array under command.bootstrap.nohoist in lerna.json:\njson\n{\n  \"lerna\": \"2.0.0\",\n  \"command\": {\n    \"bootstrap\": {\n      \"nohoist\": [\n        \"node-pty\",\n        \"electron-rebuild\"\n      ]\n    }\n  },\n  \"version\": \"1.0.1\"\n}. What you describe isn't really how lerna was intended to work. Whether or not you use --exact doesn't change the fact that lerna will always symlink local packages with a matching version. After publishing, the \"current state of the package\" is exactly what's on disk.\nYes, you can install non-matching versions of monorepo siblings, but that's not really meant to be a common part of the workflow. It's more of an escape hatch for packages that you don't have time to update to a new breaking API or somesuch.. It would help if you could provide a sample repo to reproduce this, or a log of some kind. Definitely the lerna.json.. We can't fix something we can't reproduce. I personally have never experienced node_modules being deleted during hundreds of lerna publish executions, that makes literally no sense.. pkg.private isn't appropriate for designating if a scoped module is public or not. It's used to decide whether or not to publish the package at all.\nYou should add a publishConfig block to the scoped packages you want to make public:\njson\n{\n  \"publishConfig\": {\n    \"access\": \"public\"\n  }\n}. Thanks @jezzay!. I think you need to do a --canary release in the feature branch, so it avoids adding tags and thereby doesn't break the awareness of \"changes since the last (non-canary) release\" publish decisions. #960 should help, here.. While I agree that npm5 support in lerna could be improved, I use npm5 + lerna successfully every day.. I use --hoist when bootstrapping and ensure all dependencies under packages/* are expressed identically in the root package.json. This effectively turns lerna bootstrap --hoist into a symlink-only operation, completely avoiding npm install under packages/*.\nIt's a bit more painful to update dependency versions (npm up <pkg> in the root and then manually copy the version specifier to any consumers), but at least it's easy to know when things are drifting out of date (npm outdated in the root) and completely avoids the nested lockfile issues.\nI've been meaning to write some scripts to streamline this, possibly as a lerna subcommand (or plugin command), although I might just switch to yarn workspaces once they're more mature.. (Also, as much as possible, I do all the build/test/etc stuff from the root, not many of my lerna-managed packages have devDependencies or lifecycle scripts of their own). @jquense Yep, that's the current burden. It's worth it, for me, considering the advantages.\nI've been noodling a lerna hoist subcommand that facilitates updating / removing / adding deps to variously filtered packages. I like the DX of yarn workspaces, but I also like staying in the root directory when developing.... 3.0-alpha.0 works perfectly in npm5\n\nOn Feb 21, 2018, at 18:18, Elliott Sprehn notifications@github.com wrote:\n@evocateur This is a problem for us too, lerna doesn't seem to work with npm5. Not everyone can use --hoist, and currently lerna both changes the package-lock.json each time you bootstrap (adding or removing the dev flags or the package name) and the symlinks also don't seem to always work. Everything worked fine with npm3 though, It'd be really excellent if lerna could support the same workflow in npm5. :)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @lukebatchelor Sorry for the test breaks, those are actually not related to this change. (my own dumb snapshot \"normalization\" is causing this problem because lerna's version happens to match that of one of the fixtures). There's nothing stopping folks from writing in their root package.json:\njson\n  \"scripts\": {\n    \"prebootstrap\": \"do thing\",\n    \"bootstrap\": \"lerna bootstrap\",\n    \"postbootstrap\": \"do other thing\"\n  }\nThat will work with npm run bootstrap out of the box.\n\nI'd rather focus on a cogent plugin API than rewrite npm scripts, if that makes sense?. Yes, lerna always uses npm to publish, regardless of npmClient configuration (which is only used for lerna bootstrap). You'll need to npm login --registry <myPrivateRegistry> --scope @ourScope to fix your issue.. lerna publish no longer shells out to a CLI client, so npmClient is irrelevant.. If you specify the dependency range identically everywhere, does it work?. Ok, that's good. The hoist algorithm emphasizes an identical range specifier to ensure the accuracy of what is hoisted.\nIn the ^4.x.x vs ^4.0.0 case, it wouldn't be harmful (although using carets with .x wildcards is a bit strange). However, ^10.9.0 cannot satisfy 10.x.x in all cases, and is thus warned about (10.x.x could resolve to 10.8.0, for example, and that doesn't satisfy ^10.9.0).\nThe situation right now managing the upgrade of hoisted dependency versions is very painful (manual, error-prone copy+paste in all affected package.json files). I hope to ease this pain in the near future with some sort of subcommand API.. In that particular instance, it seems to be the disjoint between exact and caret ranges. The warnings are meant to highlight disparities between hoisted range specifiers, though the wording is a bit confusing. The hoist resolution still works.\n. lerna.json must always be an ancestor of any configured packages directory. It doesn't have to be at the root of the repository, but that's by far the most common pattern, and avoids a lot of confusion.\nYou can certainly have other directories beneath lerna.json's location. You can even configure multiple packages locations, if you want, and they'll all be able to consume other local packages via lerna bootstrap symlinks.. Thanks @viliusl!. So that patch version selection for the appendM package was the last output from lerna publish? And no lerna-debug.log output?. We can ignore the appveyor failure, it's some weird permissions problem with the npm cache :P. I am certainly sympathetic to this request, though I'm not ready to do a breaking change for it.... I agree that the two should be split. I got started on it a couple weeks ago, but then I stalled (pesky day job/infant son): https://github.com/lerna/lerna/compare/master...evocateur:split-version-from-publish\nHistorically, I'm fairly certain lerna publish conflates npm version and npm publish because that's exactly what yarn publish does, and lerna publish was created by the creator of yarn. (Again, I disagree with that design decision, it's just ...a big piece of code...). #963 needs tests, and updating due to changes in #1020 . Does the solution described in https://github.com/lerna/lerna/issues/1161#issuecomment-359626768 get you closer to this sort of thing? It should get you \"partial\" publishing, and you could even add --since staging in the feature branches to get exactly what has changed in the branch.\n\nlerna publish --yes --skip-git --exact --cd-version=prerelease --preid=alpha.${COMMIT_SHA:0:6}\n\nI agree that --canary --since smells a bit more like abusing --canary than I'm entirely comfortable with. My understanding of --canary is that it was generally intended to be a \"nightly\" build of master, not \"in-development\" branches.\nThe reason it bumps everything is that (as highlighted in #277) it does not \"properly\" increment the prerelease tag, thus you can't use semver ranges like ^1.1.0-alpha.0 in your consumers and magically get all future canary builds from that compatible range (e.g., 1.1.0-alpha.1, 1.1.0-alpha.2, etc etc). You currently have to use the full explicit versions (1.1.0-alpha.{SHA}), and those packages should have explicit dependencies on the nightly stuff as of that commit, not \"ahead\" or \"behind\" from public packages.. I totally trust you, I just don't trust myself ;)\nOn Wed, Aug 9, 2017 at 5:10 PM, Darryl Hodgins notifications@github.com\nwrote:\n\nMy local, totally non-scientific, tests were pretty reasonable, but\nabsolutely: need something in the PR. Will add some! Thanks :)\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/lerna/lerna/pull/963#issuecomment-321414872, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAV5YnrEG2xNLyiwcuLyztRnLMpNo4nks5sWkpvgaJpZM4Ovsmh\n.\n. Sorry, no, this is not the correct fix.\n\nOne should never manually modify the version property of a package, especially not in a pull request. It is the job of the maintainer (during a release cycle) to make this change via npm version.. Thanks @darrylhodgins!. stderr is where all logging goes, and does not mean an error is occurring.. stdout is for output that might be piped. stderr is for logging (it's a very common unix idiom).. #174 was what I hoped would yield something like this. I really want to do this, but I'm in a release crunch right now and realistically won't have time for a few weeks yet.. @sdeleon28 Couple things:\n1. Your root package.json needs a workspaces key, which is missing.\n2. Your packages/package.json is not actually a package. The glob refers to every subdirectory of packages that contains a package.json, so it has to be something like packages/pkg-1/package.json.\nhttps://yarnpkg.com/blog/2017/08/02/introducing-workspaces/. The commands.bootstrap.ignore section is a list of package name globs equivalent to the --ignore CLI option. It's not a file-based glob that does any filtering on what is installed.\nWithout seeing the package.json of the packages having this problem, I can't say for sure, but I would guess that it's not symlinking to the sibling package because of a version mismatch between the dependent's pkg.dependencies[parent] value and the parent dependency's pkg.version.. Thanks!. I am definitely in favor of matching npm's behaviour here. Our error logging currently leaves something to be desired, as you've seen.\nOne potential wrinkle here is where --silent is passed in the args. In any case, I agree the logging needs some tweaking.. Lerna does not use npm link internally, as you've noted. After you've run lerna bootstrap, there's nothing stopping you from going into a package directory and running npm link.. Yeah, I've hit this too when hoisting. yarn link seems to avoid that build step, but that doesn't help when using npm.\nA workaround I've used is to just rm -rf node_modules in the directory you just linked, then run lerna bootstrap --scope <linkedPackage> from the root to restore the sibling symlinks and such. It's not ideal, but it works very well after that.\n\nOn Aug 26, 2017, at 07:58, veeramarni notifications@github.com wrote:\none problem, I noticed after running npm link on the specific package it loads all the dependencies under packages node_modules directory. I use --hoist to avoid downloading dependencies under the individual package. Is there a way we can run link without all dependencies under node_modules.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Thanks @anfedorov!. We're definitely open to improvements to our error logging!. Thanks @Andarist, this is great! Wish I knew why the Travis build on node 8 keeps timing out. :/. Thanks @Andarist!. How about right now? :shipit:\n\nhttps://github.com/lerna/lerna/releases/tag/v2.1.2. I don't suppose you could whip up a sample repo that reproduces this? I'm a little suspicious of the packages globs in lerna.json (lacking any other context).. My immediate hunch is that this is probably npm5-related, as I've seen lots of (seemingly) random CI failures on Windows due to permissions or ENOENT errors on \"shared\" files like caches and whatnot.\nWhat happens when you run the command without concurrency?\nlerna exec --concurrency=1 -- npm outdated. Your $PATH seems to have an old version of lerna installed.\nsh\n$ npm view lerna dist-tags\n{ latest: '2.1.0' }\n$ npm -g i lerna\n+ lerna@2.1.0\nadded 276 packages in 6.547s\n$ lerna -v\n2.1.0\n$ lerna init\nlerna info version 2.1.0\nlerna info Updating package.json\nlerna info Creating lerna.json\nlerna success Initialized Lerna files\nWhat version of node/npm/OS are you using?. Thanks @sapegin!. As soon as I get around to publishing what's currently on master (split lerna publish into lerna version + lerna publish), this will effectively be fixed.. https://github.com/lerna/lerna/releases/tag/v3.0.0. https://github.com/lerna/lerna/releases/tag/v3.0.0. Yikes. Any reason you included --force-publish=*? --canary should be sufficient, and publish to a dist-tag of canary (customizable via --npm-tag <name>.. (also, version of lerna/npm/node?). Your current setup is losing a lot of the advantages of lerna bootstrap --hoist with version mismatches and a postinstall that includes lerna bootstrap in the root, which notably in the --hoist case can get called recursively because --hoist calls npm install in the root first.\nnpx lerna bootstrap --loglevel=silly can provide insight here, but it's ridiculously noisy.\nAlso, not sure if I should use yarn or npm5 because both lockfiles are in the .gitignore, yet yarn.lock is still versioned? One or the other should be versioned in the root, and ignored in all leaf nodes (packages/*/package-lock.json, since your npmClient is explicitly npm).\nI think --canary is supposed to be partial? Anything that hasn't changed should be fine to stay on the previous version specifier, and only those that do need to have the -alpha.<sha> prerelease. Perhaps --cd-version premajor is more appropriate in the context of --canary? It's very complicated by the fact you're using independent versioning, which I really don't recommend for most cases.. @tkissing-work I'm really sorry for breaking this!\n@Jmsa Thanks so much for the investigation, it's a big help.\nI think it's pretty clear we need to reduce/remove the overloading of --canary as well as improve our tests to actually parse args with yargs instead of our synthetic constructor arguments. We have --preid and --since, after all, which should be documented as the preferred method of achieving --canary=<since> and --canary=<pre-release-id>.\nI'm going to start by restoring the default lerna publish --canary --yes behaviour ASAP, and then move toward fixing the other canary-related issues.. Once I fixed the unit tests to use the yargs parser, the errors became very clear:\nhttps://travis-ci.org/lerna/lerna/jobs/268804889#L1190. This has been fixed in v2.1.1 :). I'm going to cut a patch release today. Anything I catch in the (75% complete) refactoring of the other unit tests can follow in another patch.\n\nOn Aug 28, 2017, at 08:33, James Abercrombie notifications@github.com wrote:\nNice! Accurately failing tests = \ud83d\udc4d\nWhen do you envision these changes make their way into a new release?\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Released in v2.1.1. lerna publish just runs npm publish in each package that has updated since your last lerna publish (identified by an annotated git tag). You can run npm pack in a package directory to see what npm bundles into the tarball.\n\nThe files key of package.json controls what is included in the published package.. Thanks @jezzay!. omg, I'm getting so tired of the integration test timeouts, sorry about that :P. Yikes, this is pretty bad.\nPerhaps this console.log should be process.stdout.write()? And we can probably dispense with the fancy spread ...args and just call the single param message.. My question is: why is anybody running jest through lerna? Run it from the root, finish in a fraction of the time, thank me later.\n\nOn Mar 25, 2018, at 17:26, eritikass notifications@github.com wrote:\nRemoving mergeMultiline in lerna might not break anything (--parallel?), but it seems like it could also have larger implications since lerna run is not limited to running tests.\nCould we possibly discuss this option? What are the possible implications?\n2'nd that - jest is hugely popular and this is making usage of jest very problematic.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Great, so you can let bugs from transitive dependencies pass through. Brilliant strategy to save a few seconds.\nOn Mar 25, 2018, at 21:01, Alexey Raspopov notifications@github.com wrote:\n@evocateur, yarn lerna run test --since master on a branch allows you to run tests on the only packages that has changes.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Cursory googling indicates it\u2019s a Jest issue, but separate Jest \u201cprojects\u201d might let you configure different transforms on separate testMatch globs?\n\n(It\u2019s unfortunate that Vue Babel plugins can\u2019t play nicely with client & server code)\n\nOn Jul 2, 2018, at 07:04, J\u00fcrg Lehni notifications@github.com wrote:\n@evocateur regarding your question here:\nI have a monorepo in which different packages have different .babelrc files, for backend and frontend / vue.js specific code. I failed to find a nice way so far to set up jest from root in an easy way so it could run all the tests at once and still respect the different .babelrc settings, so I am using it through lerna exec instead.\nDo you know of an easy way to make this work from root? If not, then this would be an example of a reson for using lerna exec with Jest.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. This is one of the drawbacks of lerna: You can't use npm install in one of the managed package directories (packages/*). Generally speaking, you stay in the root of the repository when developing in a lerna monorepo, not the package subdirectory.\n\nFor now, it's best to just modify the package.json directly and run lerna bootstrap from the root. It will do all the install stuff for you, avoiding the problems you've encountered. If you want to avoid running bootstrap for all the other (non-affected) packages, you can pass a scope: lerna bootstrap --scope my-target-package-name. @Inkdpixels I've been noodling about something similar, recently. We'd also want to support upgrade and remove/rm. All these commands would support the package filtering flags (--scope, --ignore, --since, etc).\nlerna add <packageName>[@<version>] [--dev]\nlerna upgrade <packageName>[@<version>]\nlerna remove <packageName>\nI don't think want to force passing direct npm args after --, as we won't necessarily be doing that exactly (probably just direct edits of the scoped package.json files). Instead, you'd automatically run a similarly-scoped lerna bootstrap after any of these commands to ensure the resulting package state was correct.. By all means, please do!. Tomorrow morning (PDT), at the earliest. I nuked my brain today getting the integration tests to stop flaking on Windows.\n\nOn Oct 30, 2017, at 17:24, Ian Sutherland notifications@github.com wrote:\n\ud83c\udf89 Any idea when this will be released?\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.\n. This has been vexing me, and I don't have a local Windows env to experiment in. I suspect this is an environmental difference in making SSL requests in node v4, judging by the PEM errors in the logs.\n\nReally looking forward to dropping support for node v4, btw.. That's a fun thread. We're probably experiencing this as a side-effect of https://github.com/sindresorhus/execa/pull/88, which we picked up in a recent dependency bump. It's weird, because most of the time you do want the env to be propagated to the child, so I figured it was an okay change.\nIf we pass extendEnv: false (ugh) in the execa opts, I imagine we can probably avoid this?. No, that\u2019s a library option\n\nOn Dec 22, 2017, at 06:47, CodeTroopers notifications@github.com wrote:\nCan extendEnv: false be passed on the command line : lerna bootstrap --extendEnv=false?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Is this a \"clean\" bootstrap (i.e., after an initial clone or git clean -fdx && npm install), or is it after changes to package dependencies?\n\nIs there a lerna-debug.log available?. If you Ctrl+C out of the hanging process, it should write a lerna-debug.log in the same directory. Posting that in a Gist would be a big help in diagnosing the issue.. In my limited testing of yarn workspaces, I was under the impression that nesting workspaces was not supported?\n\nOn Oct 7, 2017, at 06:48, Patrick Dahms notifications@github.com wrote:\nI got the same error. Maybe it has something to do with yarn/lerna workspaces.\npackage.json important parts\n{\n  \"private\": true,\n  \"workspaces\": [\n    \"static/\",\n    \"/static/*\"\n  ]\n}\nlerna.json\n{\n    \"lerna\": \"2.4.0\",\n    \"packages\": [\n        \"static/\",\n        \"/static/*\"\n    ],\n    \"version\": \"independent\",\n    \"npmClient\": \"yarn\",\n    \"useWorkspaces\": true\n}\nExecutable    Version\nlerna --version   2.4.0\nyarn --version    1.1.0\nnode --version    8.6.0\nOS    Version\nmacOS Sierra  10.12.3\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. That\u2019s not a problem with lerna bootstrap, that\u2019s lerna diff. How do you expect it to diff changes when there is only one commit in the repo?\nOn Feb 26, 2018, at 06:41, \u0141ukasz Jagodzi\u0144ski notifications@github.com wrote:\nI have the same problem and in the logs it says:\n10 error initialize callback with error\n11 error Error: Can't diff. There are no commits in this repository, yet.\n11 error     at DiffCommand.initialize (/Users/lukejagodzinski/.nvm/versions/node/v6.10.3/lib/node_modules/lerna/lib/commands/DiffCommand.js:89:18)\nIt is a git repository and there is one commit\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Bootstrap literally does no git operations. It does not require git at all. The stack posted was from an execution of lerna diff, not bootstrap or run.\nOn Feb 26, 2018, at 09:04, Steven Hargrove notifications@github.com wrote:\nI feel like bootstrap should auto detect the scenario of one commit and allow the process to complete - instead of hanging indefinitely.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. lerna bootstrap when using yarn + --use-workspaces just calls yarn install in the root, nothing fancy. A loud warning would be preferable to a hard stop.. * If you're using Yarn workspaces, do not use lerna bootstrap.\n* If you're using lerna bootstrap, do not use a root postinstall lifecycle.\n\nIs there something ambiguous about these solutions?. @maciej-gurban yarn install by itself, with no postinstall hook in package.json, will never call lerna bootstrap automatically.\nJust remove the postinstall hook, they're a bad idea anyway. If you use Yarn workspaces you can completely skip calling lerna bootstrap.. > This is slightly confusing behavior when running scripts that wait to be terminated.\nThe alternative, opting-out of logging/inherited stdio, means (largely) useless concurrent console spam for the vast majority of lerna run use-cases. --stream isn't hard to add, but it's virtually impossible to detect when a given script will hang due to muffled stdio. Improved documentation/examples is always possible, and welcome.. Ooh, yeah, that's a promising idea for worst-case fallback. We could pass a timeout option to execa, but it's not immediately clear to me what value it should receive (and it wouldn't necessarily behave the same way as an activity monitor).. I did not realize yargs automatically localized its output! That is very cool.\nLike many mono-lingual Americans, I'm very bad at i18n, and I apologize for that. I definitely agree we should be making the assertions as robust as possible, which includes respecting localized output. I would appreciate any and all help you're willing to contribute toward this goal.\nIn this particular case, we're probably over-asserting; we shouldn't be testing yargs' behavior, just that we've configured yargs correctly (it throws an error when the argument validation fails).. I'm pretty sure yargs throws a specific sub-class of Error (YError?) that should give us a little more distinct properties to check. The stack might be useful, but feels brittle to me.. Ah yes, we can just expect(err.name).toBe('YError'):\nhttps://github.com/yargs/yargs/blob/master/lib/yerror.js. Go for it!\n\nOn Sep 3, 2017, at 08:51, Tyll Wei\u00df notifications@github.com wrote:\nAwesome, are you already on it? Otherwise I think @kevroadrunner also was interested on picking this up.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Git dependencies are one of the most complicated and error-prone features in all of npm, in my experience. Lerna isn't really meant to be consumed this way, it's meant to publish packages (but not always public packages).\n\nIf you're using lerna to develop packages, you can always publish them to an internal private registry, or as private (scoped) packages on the public registry. I would really recommend avoiding git dependencies altogether.. @ramasilveyra Perhaps as a Lerna plugin (API tbd, but it would be dependent on #174 at the very least), but I don't see that ever getting into core. Lerna facilitates the operation of npm/yarn over many packages in a single repository that are published to a registry in a coordinated fashion. It does not support consumption by non-package means (i.e., a git url).. I think we need to keep the stack, as useless as it is in the example you provided, simply because we can't know ahead of time where such a stack might originate from.\nAs for labeling the stream outputs, that seems reasonable, especially as they won't be interleaved.. If the stack is already part of the stderr, I'd say don't worry about printing the stack separately.\nIn terms of tests, I think it's sufficient to test a minimal Command subclass in test/Command.js that throws a package error (similar in style to this test).\n```js\n    describe(\"with package error\", () => {\n      const originalConsoleError = console.error;\n  beforeEach(() => {\n    console.error = jest.fn();\n  });\n  afterEach(() => {\n    console.error = originalConsoleError;\n  });\n\n  it(\"logs stdout and stderr of error from package\", async () => {\n    class PkgErrorCommand extends Command {\n      initialize(callback) {\n        callback(null, true);\n      }\n      execute(callback) {\n        // construct the error\n        const err = new Error(\"message\");\n        err.cmd = \"test-pkg-err\";\n        err.stdout = \"pkg-err-stdout\";\n        err.stderr = \"pkg-err-stderr\";\n        // add pkg property with stub info\n        err.pkg = {\n          name: \"pkg-err-name\"\n        };\n        // \"throw\" the error to reject .run() promise\n        callback(err);\n      }\n    }\n\n    try {\n      await new PkgErrorCommand([], {}, testDir).run();\n    } catch (err) {\n      // make assertions about caught err properties\n      // make assertions about console.error mock calls\n    }\n  });\n});\n\n```. Thanks @gauntface!. How about now? :)\nhttps://github.com/lerna/lerna/releases/tag/v2.2.0. The bootstrap algorithm is so complicated, I really don't see adding more conditional complexity across the entire command as worthwhile. There are certainly many opportunities for improving the bootstrap command, generally speaking. I don't think the changes you're requesting are one of them.\nLerna's current \"contract\" is that it always symlinks local dependencies, runs their lifecycle scripts, and streamlines the flow of concurrent, inter-related package development. Leaving aside the gigantic refactoring necessary to accomplish what you desire, I would consider it a fundamentally breaking change as well.\nMaking lerna bootstrap --since implicitly enable --include-filtered-dependencies, in my opinion, does a better job of fulfilling that contract. It is far easier to implement, document, and maintain in the long run.. In general, any way in which an npm package can be constructed or arranged is supported by lerna. It's just calling npm, after all.\nIn practice, a lerna monorepo affords certain optimizations, mostly derived from centralization of test and build scripts. If every package has the same build, then just run it from the root with appropriate config targeting the leaf packages.\nPersonally, I am not a huge fan of boilerplates, as they have a tendency to be abused and do not promote basic npm skills acquisition. Politically, lerna doesn't have an opinion about what module bundler or test runner etc that one uses. I have a couple private lerna repos, for example, that don't use a module bundler at all (as they are 100% CommonJS).\nSome random experiential opinions/observations:\n- Use babel-preset-env, and put the relevant config in a root .babelrc (or .babelrc.js, if you're living on the edge with v7)\n- yes, eslint from the root implies .eslintrc.yaml as a sibling of lerna.json.\n- yes, lerna is a dev dependency of the root package.json. Never use globally-installed build tools, that's just deferred, inevitable pain.\nAn \"examples\" directory would be interesting, although an extra burden to maintain. They also run the risk of boilerplating, which I'm keen to avoid. The documentation of the pattern itself can always use improvement, and is heartily encouraged to pull-request. :). @CapitanRedBeard I would appreciate a PR of docs demonstrating \"best practice\" setup examples!. @dmk255 Thanks for taking the time to create a live example! Here are some observations:\n\nThe root lint script should just call eslint --cache --ignore-path .gitignore ./packages/*/src\nNo tests?! (\"test\": \"jest\" would be sufficient in the root, finding all the matching tests under packages)\nlerna.json already has \"useWorkspaces\": true, you don't need the --use-workspaces flag when calling lerna bootstrap in the bootstrap script\nprebuild doesn't need to be a lerna exec, just call git clean -fdx packages\nThe lerna exec --parallel -- babel src -d lib --config-file ../../.babelrc call is duplicated twice in the scripts, I would extract that to its own script (\"build:babel\"?) and then you can call it from both places via npm run build:babel (with an extra arg for watch: \"watch\": \"npm run build:babel -- -w\")\n(I wouldn't use yarn to run nested scripts, it has troubles with concurrency in scripts). I am generally a favor of chaining such decisions in lifecycle scripts, but as we have the tools already to check the branch name and whatnot, this sounds reasonable.\n\nConfiguring this in lerna.json makes the most sense, but a flag for lerna publish would be necessary in any case to be consistent with the other configuration options. --allow-branch seems like a good name, it would require a string argument if the flag is passed, and that argument would be a glob (plain strings are globs too, e.g. --allow-branch master. It would implicitly default to ** (every branch), much like the --scope flag.\nHere's how it would look in a lerna.json:\njson\n{\n  \"lerna\": \"2.1.2\",\n  \"command\": {\n    \"publish\": {\n      \"allowBranch\": \"master\"\n    }\n  },\n  \"version\": \"1.2.3\"\n}. \"Allow publish in branch \" sounds meaningful to me. It is an optional whitelist, after all.\n\nOn Sep 4, 2017, at 14:01, Mike Bannister notifications@github.com wrote:\n*phrased\nOn Sep 4, 2017 5:01 PM, \"Mike Bannister\" notimpossiblemike@gmail.com\nwrote:\n\n\"Allow\" doesn't seem semantically sound... Shouldn't it be phased E.g.\n\"require\", \"demand\" or \"only\"?\nOn Sep 4, 2017 4:25 PM, \"Daniel Stockman\" notifications@github.com\nwrote:\n\nI am generally a favor of chaining such decisions in lifecycle scripts,\nbut as we have the tools already to check the branch name and whatnot, this\nsounds reasonable.\nConfiguring this in lerna.json makes the most sense, but a flag for lerna\npublish would be necessary in any case to be consistent with the other\nconfiguration options. --allow-branch seems like a good name, it would\nrequire a string argument if the flag is passed, and that argument would be\na glob (plain strings are globs too, e.g. --allow-branch master. It\nwould implicitly default to ** (every branch), much like the --scope\nflag.\nHere's how it would look in a lerna.json:\n{\n\"lerna\": \"2.1.2\",\n\"command\": {\n\"publish\": {\n\"allowBranch\": \"master\"\n}\n},\n\"version\": \"1.2.3\"\n}\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/lerna/lerna/issues/1007#issuecomment-327024206, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAer-ZQQ2-D1nXxVNnatzX58MXfMZkZpks5sfFylgaJpZM4PMHcB\n.\n\n\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n\n. --branches is too ambiguous, seemingly implying that you'll publish a branch?\n\nI would expect this option to be 85% of the time a single string, like \"master\" or \"live\" or \"next.\" However, I can see a strong case for allowing publishes from \"release/*\" or some other pattern chosen by other logic. I don't think plural is appropriate because the common use case will be a single branch name. A glob can match many things, true, but only a single glob is necessary.\n\nOn Sep 4, 2017, at 15:13, Mike Bannister notifications@github.com wrote:\nAh, OK, I think what's awkward about it is that branch is singular so it doesn't evoke something that's globbable to me. Perhaps go plural and then maybe you don't even need a verb to qualify it \"branches\"?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I still don't think the plurality is necessary. Common case will be a plain string, and a glob is still singular.\nOn Sep 4, 2017, at 15:58, Mike Bannister notifications@github.com wrote:\nHow bout --allow-branches ?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. The output of npm publish is not forwarded to the parent process (lerna itself). Trust me, the lifecycle scripts are always called, because lerna is only calling npm publish. The scripts/prepublish.js stuff is a legacy babel thing that I am rather inclined to deprecate/remove in the next few major version releases. It does not replace the lifecycle scripts present in a given package.json.. You might also consider chaining lerna bootstrap before lerna publish in a root npm script, as lerna publish doesn't really do any validation that things are symlinked and prepared (transpiled, etc). Perhaps even begin the chain with a git clean -fdx packages to get super-clean before a release, if that's your jam.. I need an example repo with a minimal reproduction to speak further. (also version of node/npm and OS, etc). Yeah, coulda told you private packages are never published. That's the whole point of private packages.\n\nIf you need build output for non-private siblings to depend on, run lerna bootstrap and that will run prepublish/prepare in the private package.\n\nOn Sep 12, 2017, at 08:28, Ognian notifications@github.com wrote:\nOK I stiered up a honets nest :-)\nAfter removing the private filter (removing the mentioned line) npm publish is indeed called, but if private=true npm publish is returning an error, therefore lerna is retrying the command and so on and so on...\nActualy what should be documented is that for private packages npm publish is never ever called for npm reasons and if someone wants this he should call the lifecycle methods likelerna run prepublish after lerna publish\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Unless you're hoisting dependencies (lerna bootstrap --hoist), lerna does run npm install in every package directory (with a little mangling of the package.json to avoid installing local siblings). I'm a bit mystified how you got this result, @IhostVlad. What's your lerna.json look like?. @chrisforrette Why not just install the published modules into a separate directory? I really wouldn't recommend creating an artifact from lerna bootstrapped source directories, they're not identical to how npm or yarn lays them out.. Cool, thanks @mfix22!. This doesn't sound like a Lerna issue.. Specify a main field in your package.json. This is how npm works, not lerna.. @nhducit Does your package.json have a workspaces config? Judging by the error message, perhaps not. It's required to make yarn workspaces function, and the contents of the array are identical to lerna's packages field in lerna.json.. @benediktvaldez That debug log indicates you have a postinstall lifecycle script in the root package.json that is also calling lerna bootstrap, causing a recursive loop. Remove the postinstall from the root package.json, and it should work fine.. Yep, it was definitely a \"postinstall\": \"lerna bootstrap\" in the package.json (since removed).. No worries, I misunderstood the arguments to Array.prototype.map() today. \ud83d\ude05 . Thanks for the example repo! This is something I've had on my mind recently; lerna does not currently consider a relative file path to be a valid indicator of \"sibling\"-ness (that is, a package it also manages and should symlink).\n\nThis is something I would like to support, especially since npm5 should theoretically support bootstrapping in this manner without heinous package.json mangling like we do today. We'll have to play it by ear, though.. Incredibly enough, I just commented on another issue not five minutes ago that our docs in this area are in need of improvement.\nAt a high level, there are two \"simple\" tests that a given package dependency must pass to be considered a sibling:\n1. It must match the name field of one of the package.json files collected from the packages glob[s] in lerna.json.\n   * The directory name of a given package has no bearing on this calculation, only the pkg.name field.\n2. The version range specified in the dependency must be satisfied (semver.satisfy()) by the version field in the local sibling's package.json.\n   * In practice, this usually boils down to \"same major version => is local package\".. Yarn workspaces require package.json configuration, as @christophehurpeau accurately pointed out.\n. 1. I don't see the required workspaces block in the root package.json.\n2. You should remove the postinstall lifecycle script, it's causing an infinite loop. (This is a known bug when hoisting or using yarn workspaces). I agree that peer dependencies, when used at all, should be as flexible as possible. The current handling of peer dependencies in lerna could use some improvement, definitely.\nThat said, if you aren't also expressing a dev dependency on a sibling package that you've expressed a peer dependency for, how are you even running your unit tests? Peer dependencies aren't installed by default, after all. (This pattern applies for all peer dependencies, not just lerna siblings)\nThe \"increment version of sibling consumer when a sibling dependency changes\" behavior has been discussed in detail several times, but the TL;DR: versions are cheap, it's not a violation of semver to express when dependencies have updated, and it's really not worth worrying about, tbh.. @ljharb Ah yes, that clarification I agree with, thank you.\n\nUpdating deps isn't a violation of semver; updating the bottom of the range for peer deps - because it's part of the API of the module - is absolutely semver-major.\n\nThe \"worth worrying about\" bit was not specifically aimed at peerDependencies, but the penchant for lerna to publish new versions of a dependent when the dependency changes.\nIn fact, I'm fully on-board the \"ignore peerDependencies in lerna publish\" boat, at this point. The dev dependency will need to be bumped as before, because that's currently how lerna recognizes a matching sibling that needs a local relative symlink, etc. Does simply abandoning any modification of peerDependencies work for enzyme?. #1187 is the first step toward resolving this, stopping lerna publish from making inappropriate semver-major changes to any local peerDependencies.. Seems like you'd need to prompt the user for a decision at some point. peerDependencies are fraught with hidden assumptions/expectations.. Sorry, yeah, the appveyor build is flapping a lot. I've been extremely busy, I'll take a look when I can.. Thanks!. I appreciate the PR, @achingbrain. I am not generally a fan of \"polymorphic\" options that we inherited from the more lenient meow cli parser. I would much prefer --preid to be used for this purpose, as @GeorgeTaveras1231 suggested (--canary would always be a boolean, never a string).\n--preid's implicit default is \"alpha\", which is exactly what the (implicit :P) default of --canary-as-string is now. I think that's the long-term solution. In the mean-time, this PR seems reasonable. It's not a breaking change, imo, because the functionality never worked as described during the non-beta 2.x cycle to date.. @achingbrain Thanks!. lerna bootstrap when useWorkspaces is enabled just calls yarn install once in the root. If the lifecycle scripts aren't being called, that's an issue with yarn, not lerna.. Is there any particular reason you're not hoisting react-native? (I've never used it, so I'm missing context). Our releases are pretty low-tech, literally copy+pasted from the output of lerna-changelog:\nsh\nnpm i -g lerna-changelog\nGITHUB_AUTH=$(cat ~/Dropbox/GITHUB_AUTH.txt) lerna-changelog | pbcopy\nWhich is, of course, the same output I copy+paste into the CHANGELOG.md. (Sometimes I edit it for brevity, and often add bloggy bits at the beginning).\n\nAs for automating changelogs with lerna, lerna publish currently supports conventional-commits (via the --conventional-commits flag or \"conventionalCommits\": true lerna.json config), which creates/updates CHANGELOG.md files on a per-package basis, requiring adherence to the angular commit convention. It has some rough edges, but it covers the 80% case for most people.\nUnfortunately, we do not have any other extensibility for \"operations during publish\" at this time.. There are no stupid questions! (Only scatter-brained maintainers :D)\nMy ultimate goal is to use lerna to manage lerna, ideally with conventional commits. I\u2019m stuck on Bitbucket for most of my internal lerna usage, so bringing the --conventional-commits experience up to par is the direction I would like to go in, definitely.\n\nOn Oct 15, 2017, at 15:44, Jonathan Carter notifications@github.com wrote:\n@evocateur Stupid question, but what is the guidance around lerna publish ---conventional-commits vs. lerna-changelog? I'm loving the conventional commits workflow, but I like the way that lerna-changelog allows you to customize the changelog format a bit. Is the desire to continue iterating on lerna publish ---conventional-commits to fill in that additional 20% of scenarios? Thanks!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Possibly! I get by with a cheesy manual copy+paste after the root changelog is written, but automation would be nice.\nOn May 10, 2018, at 14:36, am80l notifications@github.com wrote:\nI havn't tried, but is there some maybe way to use the conventional releaser-tools to accomplish this?\nhttps://github.com/conventional-changelog/releaser-tools\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. If you're using lerna bootstrap, add --loglevel=silly and it might become apparent? It's hard to say, since the warning itself could use improvement (although how much, I'm not certain, as it is a complex part of the codebase).\n\nGrepping packages for references to other packages should be sufficient to identify circular dependencies, however. A -> B -> A is the sort of thing this warning is (attempting to) highlight.. Dang, sorry, I coulda sworn there was more verbose logging around those bits. If you're comfortable editing files under node_modules, here is where that logging is from (in the transpiled output, ECYCLE is probably the easiest thing to search for). Maybe log packages and batch (after they are pushed on in that conditional)?\nAs I said, it's a very complex part of the codebase, I'm not even sure logging more detail is possible, given the nature of the comparison.. Oops! I agree that we need better logging there, if possible. I'm not exactly sure what that logging is, but I'm glad you were able to resolve your warning.. Or just batch.map((pkg) => pkg.name), even.\n\nOn Sep 26, 2017, at 17:04, Alexej Yaroshevich notifications@github.com wrote:\n@zxqfox commented on this pull request.\nIn src/PackageUtilities.js:\n\n@@ -201,6 +201,8 @@ export default class PackageUtilities {\n         batch.push(packages.reduce((a, b) => {\n           return (refCounts[a.name] || 0) > (refCounts[b.name] || 0) ? a : b;\n         }));\n+      \n+        log.silly(\"packages\", batch.reduce((pkgs, pkg) => pkgs.push(pkg.name), []).join(', '));\nlog.silly(\"packages\", batch.reduce((pkgs, pkg) => (pkgs.push(pkg.name), pkgs), [])) ^.^\n\nprob something like that could be easier to read:\nlog.silly(\"packages\", [].concat.apply([], batch.map(pkg => pkg.name)))\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. whoops, sorry, the integration tests seem to be borked :/. basically, yeah. I haven't had time to knit the integration tests back into the regular tests (as well as make them take less time). Looks great!. I'm not sure why the --- stuff is in the echo, but @jenniesyip's solution is the appropriate one, here.\n\nIn any case, lerna isn't doing anything more than calling npm run test (which is the same as calling npm test), so if you can run npm test successfully from the package directory in question, lerna should be able to run the tests successfully.. Ooh, thanks for confirming that. I am a bit stumped now, but at least it sounds like something we might be able to reproduce without trying to \u201ctrick\u201d npm.\n\nOn Oct 3, 2017, at 01:24, Daniel Rodr\u00edguez Rivero notifications@github.com wrote:\nHello @evocateur\nI don't see why the echo has typos. I can execute it on the console without problems\necho --- This module is not supported at this time. You should update it to conform to the new notification spec. ---\nAlso, if I go to the package directory and execute npm test the test runs and finishes without any problem. In fact, if I execute the following snippet it works\nfor d in $(ls packages)\ndo\n(cd d && npm t)\ndone\nit executes all the tests without problem. I expected lerna to be able to do the same.\nRegards\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Does lerna bootstrap --hoist mobx work as expected?. Huh, yeah, that is the behavior one would expect passing --hoist as a Boolean. Definitely a bug.. Nah, those appveyor tests have been flapping due to some unrelated reason. It's quite likely a re-run would just fail randomly in the node 8 matrix. We're fine here.. Looks great, thanks @cwmoo740!. Oh, and I don't see this as breaking, since they were never run previously, and moreover shouldn't have been run by a manual npm version inside the leaf package's directory.. I think we would want to use the concurrent batched async loop for this, rather than sync executions? It's a sticky part of the codebase, to be sure, but matching what the other lifecycle executions do should be sufficient?. Indeed, I totally spaced that the publish command does not generally worry about parallelism, unlike bootstrap, for example.. I've always felt the --scope flag, in addition to being a bit confusingly-named (contra --scope in almost any other npm context, which governs the @scope one uses to init a package with), should in most cases just be a series of trailing (optional) positional arguments. This is of course a breaking change. e.g.,\n\n```bash\nlerna run  [..pkgFilterGlobs] [--options...] -- \nlerna run build '@theia/core' --stream\nis equivalent to\nlerna run build --stream '@theia/core'\n``\nThe positionals are weeded out from flags, so ordering isn't especially important. I'm not sold on (but not 100% against) making--streamenabled by default, but that _can_ be added tolerna.json\"durable\" config that overrides the command defaults. You could omit--streamfromlerna runwith the followinglerna.json`:\njson\n{\n  \"lerna\": \"2.0.0\",\n  \"command\": {\n    \"run\": {\n      \"stream\": true\n    }\n  },\n  \"version\": \"1.2.3\"\n}\nThe double-dash (--) would be required in this case when passing any arguments to the wrapped call, unlike today where you can get away with passing unknown positional arguments without halting the parser with the double-dash.\n```bash\nlerna run build --stream '@theia/core' -- --silent\nforwarded as npm run build --silent,\nthe build script sees no additional args\nlerna run build --stream '@theia/core' -- --silent -- --production\nforwarded as npm run build --silent -- --production,\nwhich means your build script only sees --production\n```\nAlternatively...\n...run your whole build from the root. Jest makes it easy to run all the tests anywhere they might be, of course (same thing for eslint). Transpilers are a bit trickier, of course.\nI only specify devDependencies in the root, as well. A lot of my internal projects use Rollup to build. The \"normal\" rollup CLI is most convenient to use at the package level, which is necessitates the verbose \"run in a package but from the root\" you describe. So I wrote a shared rollup config that spiders the tree and looks for conventional patterns based on standard npm fields and minor package-level rollup config overrides. I really need to get around to open-sourcing it.... This isn't actually caused by \"useWorkspaces\": true, it's just that the separate code path it uses doesn't append npmClientArgs to the install command.\nIdeally, that whole \"build command, arguments, and options\" block would be extracted into a shared function so we don't have to maintain two code paths in the future.. Golly, I really need to fix that AppVeyor node v4 build. :/\nLooking great so far!. @gustaff-weldon Superb, thank you! Don't worry about rebasing, I will squash merge.. @RinatMullayanov To create a new package in a lerna repo, the simplest path is using npm init (just like creating a \"normal\" npm package):\n```bash\nmkdir -p packages/my-new-package\ncd packages/my-new-package\nnpm init\ncd ../..\nlerna ls\nmy-new-package is now in the list of recognized packages\n```\nAs for the meta-question, \"why use lerna?\": If you're not publishing npm packages to a registry (public or private), I wouldn't recommend using lerna. There's no shame in relative imports.. Right now the easiest way is to install it in the root, copy the dependency into the target package, and run lerna bootstrap --hoist. Even doing a direct npm install is fine, just bootstrap afterward and it should restore the symlinks.\n\nOn Oct 2, 2017, at 22:58, Rinat Mullayanov notifications@github.com wrote:\n@evocateur I asked how to add dependencies to external packages (lodash,webpack).\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Indeed, you've nailed it. I would even go so far to say that we should move all the loglevel config into the top of run(), as well as the log.resume() from the end of the constructor. In essence, no logging should be emitted until run() is called.. I went ahead and implemented the fix, verifying it on a local project as well as a unit test. Should be merged shortly.. This looks like a problem with the browser-stdout package? If you run npm cache clear and re-install/bootstrap, does it reproduce?. lerna updated is the command you're looking for. Unfortunately there's no error message when you enter a command that doesn't exist.\n\nWe tried enabling strict parsing with the CLI recently, but it broke some stuff that couldn't be broken without a major version. We'll probably enable it in the next major version, along with some other refactoring.. Ah, sorry. Yes, currently lerna requires a semver-matching version for a given \"sibling\" dependency, not a relative path.. A PR adding docs to clarify this requirement would be much appreciated!. Thanks!. Thanks @nhducit!. This also modifies the error message when --allow-branch is violated to be less \"here's how you override this config that was set for a reason\".. If you know what packages didn't publish successfully, you can npm publish directly from the leaf package directories.\nHowever, the larger issue is that the commits and tags etc should be rolled back in the event a publish command fails.. Sure, that works too. Not always possible on public repositories, though. I would like to figure out ways to mitigate this before it happens, though.. @morewry I'm finally making progress on #1091 (and many, many more issues around npm registry + credential validation) here: https://github.com/lerna/lerna/compare/one-time-password-to-rule-them-all. I have enabled 2FA for auth-and-writes on my own account, so I'm kinda motivated now. \ud83d\ude05. Yeah, that does sound like something worth erroring about.. Good call! I'd qualify this as a bugfix, as it should have never required git in the first place (unfortunately an easy thing to miss, given the default).. No worries, I'm probably gonna jump on the prettier bandwagon in this repo soon enough.. Do you have an example where this webpack bundling is failing to include a transitive dependency form a lerna-linked (aka \"sibling\") dependency?\nI use webpack to create bundles from lerna packages daily, and I haven't had any issues like this.\nGranted, I also explicitly --hoist everything to the root of the repo (adding to the dependencies of the root package.json), so most of my packages/*/node_modules directories are empty except for relative sibling symlinks. This isn't terribly common, despite being very handy (which I have intended to streamline for awhile, but haven't found the time...). Thanks for the detailed resolution! In my experience, the React alias configuration is the only method worth implementing to resolve singletons (like React) properly in webpack builds.\n\nOn Oct 8, 2017, at 08:25, Milen Igrachev notifications@github.com wrote:\nClosed #1049.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Whoops, probably shouldn't be passing npmGlobalStyle to the initial installInDir (here).\n\nSo I'll have a partial revert of a132b6e ready soon, thanks for raising this issue!. Sounds good to me!. Sounds good to me, thanks!\n\nOn Oct 10, 2017, at 04:18, Mario Nebl notifications@github.com wrote:\nI'd pick this up and go with printing a very human-friendly error message and failing loudly if BootstrapCommand detects --hoist and --npm-client=yarn\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Actually, you can't scope lerna publish. It's all or nothing, due to the manner in which git tags are used to detect changes since the last release (which is tagged).\n\nThere's not really a way around this, given how lerna works. Sorry.. As I noted above, this is impossible due to the manner in which lerna coordinates versions with git tags (and the diff since the last one is what indicates which packages should be published).\nIf they are both independent, and you don\u2019t want to publish them at the same time, then don\u2019t use lerna, it\u2019s clearly not necessary for your use case.. If your CI has ways of indicating when a tag has been created, lerna exec -- npm publish (after bootstrap) would accomplish this. Instead of making lerna publish more complicated, I'd rather focus on making --conventional-commits more useful/robust for the automated publishing in CI use-case.. @unregistered I was thinking of implementing a from-git value of the --cd-version option, similar to npm version's positional value of the same name. It would throw if the current commit wasn't tagged, of course. Pull out the paths to publish from git show HEAD --name-only --pretty=format:%D -- packages/*/package.json (adding appropriate package location globs as necessary), and jumping straight to the publish loop.\nlerna publish --cd-version from-git\nbtw, --no-private was added in v3.0.0-beta.1, so now lerna exec -- npm publish could skip packages with \"private\": true set in their package.json.. You would also need to pass --yes to the command in CI, of course, otherwise it would break due to hanging prompt. Here's some sketches of output and expected response:\n```sh\nindependent mode with valid tags\n$ git show HEAD --name-only --pretty=format:%D -- packages/*/package.json\ntag: @scope/package-1@2.9.1, tag: package-2@1.1.0\npackages/package-1/package.json\npackages/package-2/package.json\n``\nIn independent mode, the tags themselves are valid arguments tonpm-package-arg`, and we can map the names back to our internal Package objects. Pretty straightforward.\n```sh\nfixed mode with valid tag\n$ git show HEAD --name-only --pretty=format:%D -- packages/*/package.json\ntag: v1.8.0\npackages/package-1/package.json\npackages/package-2/package.json\n``\nFixed mode is a bit more wrinkly, requiring reverse lookups bypkg.manifestLocation` of the list of modified package.json files. Not too terribly difficult, really (except maybe windows because windows sucks).\n```sh\nno tags found, return no-op with appropriate logging\n$ git show HEAD --name-only --pretty=format:%D -- packages/*/package.json\nempty string\n``\nI figure throwing is not what we want, it should just behave the same as the \"no changes found\" case, which is just to exit.. To be clear, this would also pretty much require #961, usinglerna versioninstead of the wonky-lookinglerna publish --skip-npm`.\nIf it's desired to be completely automated, you'll need to use --conventional-commits. What exactly is \"awkward\" about that option in a CI context? The changelog generation?. Sounds like you want semantic-release, but with monorepo-awareness. Unfortunately, there isn't great support for that scenario right now. It's something I would definitely like to get to, though.. Indeed, that makes sense! If someone wants to pick this up, it would involve porting over the --npm-client from BootstrapCommand:\nhttps://github.com/lerna/lerna/blob/7dde757d9f788f49ae605f9a7e187326518ae63e/src/commands/BootstrapCommand.js#L39-L44\nand then passing to the various runScript* utilities:\nhttps://github.com/lerna/lerna/blob/7dde757d9f788f49ae605f9a7e187326518ae63e/src/NpmUtilities.js#L125-L146\n(switching to an options block for those utilities would be preferable to adding Yet Another Function Parameter). Thanks for your patience, I'm looking at the PR now.. If you're publishing the packages that you want to consume in the containers, I would think rm -rf node_modules && npm install in the container root directories would be sufficient.\nAt a higher level, lerna is expressly designed to be a development tool for maintaining several packages in the same repo. It's not meant to be a build tool in the sense you've described, and will likely never support direct application bundling and whatnot. It's just too far afield of \"arranging repository filesystems to resemble node-resolved installations of npm packages, and then sometimes maybe running npm publish\".\nI generate a variety of webpack bundles daily from a handful of lerna-based repos that manage a few dozen packages each without any avoidance of hoisting and symlinks. It all boils down to the bundling configuration, which is way outside the scope of a tool like lerna.. If you're never publishing packages to a registry (public or private), I\ndon't recommend using lerna. There is no shame in relative path imports.\nI would definitely separate the bundling and packaging of the \"shippable\"\nartifact and the relationship of the code. I don't see any reason to use\nlerna in your case.\nOn Tue, Oct 10, 2017 at 12:13 PM, Christopher Dieringer \nnotifications@github.com wrote:\n\ngreetings! \ud83c\udf7b\nrm -rf node_modules && npm install in the container root directories would\nbe sufficient\nin my use case, i'm not publishing packages. therefore, npm install\nfails. instead, my private packages exist exclusively in packages/.\nis it out of lerna scope to install all dependencies into a package, even\nif some of them are otherwise local/linked during bootstrap?\nand will likely never support direct application bundling and whatnot\nof course. agreed.\nbundling is an option, but not one i actually considered until you\nmentioned it. i just want to run install and have my package stand alone,\neven if dependencies are sourced locally and from the registry.\ndid i clarify/confuse any usage? if so, does your response change? thx!\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/lerna/lerna/issues/1061#issuecomment-335577724, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAV5XZPAEM-HD_uBEW_wcBKQ-bLDAF0ks5sq8HKgaJpZM4PzNbZ\n.\n. > for instance, i want to build containers for some packages/\nthis package production shipable/tarball-able/etc\n\nThose are both descriptions of bundling, whether that means running webpack/rollup first or not, it ultimately ends up in a tarball for deployment.\nYou don\u2019t need more than one package.json (in the root) to gain the benefit of \u201choisting\u201d for an entire tree. It\u2019s easy to prune dev dependencies before packing into the container if you\u2019re worried about download size.\nYou don\u2019t need to link packages you never publish, just require modules with relative paths. Like literally everybody did before lerna was a thing.. Lerna is not a deployment tool.. @ajhool Have fun forking.\n\nServerless monorepo projects will far outnumber the number of projects that need to publish a group of npm modules (I think)\n\nLOL, sorry for giving away stuff for free that isn't EXACTLY what you demand?!? Get a grip, dude.. Intent is irrelevant, impact is what matters.\nPeople doing \"serverless\" stuff shouldn't use Lerna. I don't know how to explain that multiple npm packages in the same repository is different than a single package in a repository, and maybe you shouldn't assume everything will be the same?\nI've made myself clear, I hope.. Thanks!. Thanks @marionebl, apologies for the delay!. I really don't recommend ignoring packages during tests. Part of the whole reason lerna exists is to run tests of related modules in parallel.\nAlternatively, you could always run the tests from the root, configuring the test runner to ignore the package in question.. Quite likely a bug. A minimal repro in a unit test would be a great PR (don't worry about fixing, necessarily).. What does your lerna.json look like?. This is a bad experience, I agree. I'm tempted to switch to cosmiconfig and stop worrying about dangling commas.... Published in v2.7.0. I don't really think this is something lerna can support, as we already have a fiendishly complex bootstrap algorithm and \"optional\" bootstrapping doesn't seem like it would even help here?. Not so much expected, as totally unanticipated. It\u2019s usually safe to npm link something into a lerna-managed package, but symlinking in an entire package wasn\u2019t really expected at all. It breaks so many of the expectations, such as all the code living in the same git repository, that I\u2019m not even sure we could support it in a robust way.\n\nOn Nov 2, 2017, at 18:00, Sawyer Hollenshead notifications@github.com wrote:\n@evocateur Thanks for the response. Is the broken symlinked dependency expected behavior though?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Sorry for the force push, I should really stop trying to use the dumb Github UI for resolving merge conflicts (it never, ever works).... @the0neWhoKnocks I appreciate the effort, but please understand that we are an entirely volunteer-run project. We get to PRs when we get to them.. We run our test suite on AppVeyor, which is a Windows-based CI service. I don\u2019t know the specs offhand.. This is related to #174, where I'd ultimately like to expose these sorts of things, as modularly as possible. So it's kind of a big refactor, which I've been delaying due to time constraints and the potential for causing conflicts in every open PR.\n\nI recently worked through (or closed) almost all open PRs, so that's not such a big concern now. Just gotta find the time.. I run jest from the root, testing all packages (works great with --watch). Similarly, I run rollup -c -w from the root, which builds packages as they change. The general idea, as with all lerna-related patterns, is that the watcher is run from the root and affects all packages equally.\nWe don't have great examples, that's true. Hopefully we can get to them, one day.. This very repo. npm test -- --watch or npx jest --watch, same diff.. Jest's --watch console output is really nice all by itself, there's no need to wrap it inside lerna exec or whatever. What output is \"ugly\" to you?. json\n{\n  \"name\": \"my-monorepo\",\n  \"private\": true,\n  \"scripts\": {\n    \"build\": \"rollup -c\",\n    \"release\": \"npm test && npm run build && lerna publish\",\n    \"pretest\": \"eslint packages\",\n    \"test\": \"jest\"\n  },\n  \"dependencies\": {\n    \"et\": \"cetera\"\n  }\n}\nnpm run release should then be documented as \"the way\" to publish new releases. A plugin system or lifecycle script specific to lerna would be nice, but it's realistically unlikely to happen any time soon, given I am the only active maintainer with a very busy day-job.. Thanks @spudly, this looks great!\nI would even argue that this is a bugfix, because this really is what we should have been doing all along. I mean, who wouldn't want this behaviour? If one uses prereleases at all, this is definitely an improvement.. Indeed, devDependencies in the root package.json can be used in all packages in the monorepo. This is generally used to co-locate test-related deps and config (jest, eslint, etc).\nA couple caveats:\n1. This only works for non-CLI devDependencies. If you need to run a CLI from a child package, that CLI needs to be in that package's devDependencies. (transpiling, flowcopy, etc)\n2. All dependencies for a given child package still need to be listed in that child's package.json. (obvious, perhaps? just clarifying)\nHoisting can optimize the installation of both dependencies and devDependencies in child packages. I highly recommend it.. @hannadrehman If you are publishing the packages, no, the dependencies need to stay in the leaf package manifests. If you're not publishing the packages, I wouldn't bother with Lerna and configure everything in the root, with multiple webpack entries for the various apps.\nUsing relative file: specifiers is even better than bootstrap hoisting, in my experience.. Thanks @gyoshev!. Thanks @amfio!. Just waiting for the gummed-up CI to finish, then I'll merge. Thanks for responding quickly!. Ugh, sorry, you might need to rebase to fix the \"unmergeable\" Appveyor error.. @Gurkenschreck @alampros's explanation is accurate.\nI'll also chime in that unless you're using yarn workspaces, one doesn't tend to run yarn/npm commands in the package directories directly, but from the root (npm test, various lerna commands, etc). This means most dependency manipulation is done by hand. There is at least one PR open right now (i need more hours in the day) to make this situation less manual, and suggestions/PRs for improvement are always welcome.. We have an \u201cadd\u201d subcommand now, as of 2.5.0, which should streamline this situation. Our documentation no doubt needs clarification, and perhaps example projects are in order. Any contribution on either topic would be very welcome.. I sympathize, as I've never understood why it's \"okay\" to have cycles in the first place. (I get that they happen in the real world, but I've never felt comfortable leaving them as-is)\nI'm open to a new flag that affects this behavior, for sure. I would wait for a major version to exit by default when encountering a cycle, but an opt-in flag seems doable in 2.x. How does --reject-cycles sound?\n```sh\n2.x\nlerna bootstrap                 # when cycle detected: warns\nlerna bootstrap --reject-cycles # when cycle detected: exits non-zero\nlerna.json config: { \"rejectCycles\": true }\n3.x+\nlerna bootstrap                 # when cycle detected: exits non-zero\nlerna bootstrap --allow-cycles  # when cycle detected: warns\nlerna.json config: { \"allowCycles\": true }\n```\nYou can negate options by prefixing with \"no\" (e.g., --no-reject-cycles), but that reads kinda clunky in this case. Since it would be a breaking change anyway, we could just rename the flag while inverting its purpose.\n. Circularity in CommonJS was only possible due to the dynamic nature of require(), so I guess the \u201cokay\u201d-ness is more accurately \u201ctolerated.\u201d\nIt\u2019s definitely a bad idea to intentionally create circular dependencies inside a single monorepo.\n\nOn Oct 25, 2017, at 23:09, Mario Giugno notifications@github.com wrote:\nNice stuff.\nI sympathize, as I've never understood why it's \"okay\" to have cycles in the first place.\nWho said that it's ok?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. .then(onFulfilled, onRejected) is effectively the same as .then(onFulfilled).catch(onRejected): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then\n\nThat being said, it's likely there are Promises being dropped on the floor, and there is room for improvement in this area. (The chain isn't 100% async/await, there are a lot of callbacks still). hmm, yeah, now that is quite likely...\n(it's mostly used in the test harnesses). Ah, indeed, you are right. Thanks for the fact-check.\n\nOn Oct 26, 2017, at 14:12, Elliott Sprehn notifications@github.com wrote:\n.then(onFulfilled, onRejected) is effectively the same as .then(onFulfilled).catch(onRejected): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then\nThey're not the same. If onFulfilled causes an error the first one will result in an unhandled rejection, while the second will run onRejected.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. ugggghhhh appveyor ;_;. What version range is being used to identify include-common, and is it identical to the version property in packages/common/package.json? If there is a mismatch, that's probably the source of the 404s (the dependencies/devDependencies split is irrelevant in this case).. I updated the guide to use only yarn commands for now. Thanks for raising the issue!. As @jquense noted in this comment:\nActually I have an idea, we do this for yarn workspaces. let's create a file that requires the built file that way the bin file always exists and can be symlinked.\ne.g. gatsby-cli/bin.js which just contains:\nrequire('lib/index.js')\nyou need to change the bin pointer in the package.json as well\n\nThis is the appropriate fix in all cases, in my experience. A package's bin should never be transpiled output due to permissions and shebangs and whatnot.. I'm worried that we'll have to re-prompt if publishes start failing (due to expired TOTP). Really exposes how un-tested and gnarly our current publish failure handling is. :/. Because it\u2019s using yarn to publish now, and who knows if they\u2019re compatible with npm 2FA?\n\nOn Mar 4, 2018, at 21:17, James Hegedus notifications@github.com wrote:\nThe above solution doesn't seem to work with Yarn & lerna as a devDep, eg:\nNPM_CONFIG_OTP=123456 yarn lerna publish\nIt still fails on the OTP during publication \ud83d\ude1e\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @iarna (from the npm team) suggested running npm pack initially and then prompting for the OTP and publishing the tarballs concurrently. I think approach this has lots of promise!. I have implemented the \"pack first, publish second\" algorithm, but unfortunately you still can't run the two phases separately, passing an up-to-date OTP before the publish phase only.\n\nI have a branch with tentative beginnings, mostly about querying the registry to see if 2FA is required. I haven't gotten around to refactoring the publish loop into an E401-catching, OTP-prompting, restartable queue, however...\n. Lerna no longer calls npm publish in a subprocess, so that solution is no longer possible.\n\nOn Mar 5, 2019, at 15:28, Richard Moore notifications@github.com wrote:\nCan you point me in the right direction as to which file I need to update/patch to change the studio to \"inherit\"?\nThanks!! :)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Assuming you have three npm packages (atoms, molecules, and organisms), lerna is meant to publish those \"in sequence\" with versioning identified by previous git tags (if any). lerna is basically a fancy way to run npm commands on n npm packages in the same git repository.\n\nIf you want a \"rollup\" package (named stuff-visibile-from-a-microscope? \ud83e\udd14 ), you'll need to add another child of packages/ that has dependencies on its siblings, and its main entry (specified in package.json) should re-export the sibling dependencies as you see fit.\nAs far as publishing goes, lerna doesn't do anything more than npm publish does (but in a slightly different order, to adapt to publishing multiple packages at once).\n\nThat being said, unless you want to publish your existing packages separately, a single npm package works just as well for creating a single distribution. YMMV. Oooh, that sounds interesting. It would also promote better factoring of the conventional-changelog-cli code. Also, a --dry-run flag, instead of actually writing it out...\nI'm not sure updated is the right place for it, but it does sound like the easiest, at first glance.. Shouldn't @babel/core be added to the devDependencies of the plugins as well, then? That's my understanding of the \"best practice\" when it comes to peerDependencies.\nI'm concerned about the disparity between local peers and external peers: this patch would enable the omission of a local peer from any other dependency type and yet require an external peer to also be included in devDependencies (or optional or \"regular\", but that's weird).. I'm mostly wary of potential footguns where lerna enables/promotes a behavior that is not possible during \"normal\" package development (1-1 package to repository). Adding peers to dev dependencies is an established pattern when using peerDependencies.. This is similar to #1076, with the same solution: we should be passing --update to the git add command, which avoids this git error entirely while respecting things that should be ignored.. Add \"private\": true to the package.json of the packages you don\u2019t want to publish to the registry.\n\nOn Jun 12, 2018, at 04:23, Jakub Sarnowski notifications@github.com wrote:\nI came into the same issue and would love to have an option to exclude some packages from publishing (but keeping them on install/bootstrap).\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Nope, sorry, lerna doesn\u2019t work that way.\n\nIt\u2019s really not that big of a deal to let lerna bump the version. It\u2019s not even a burden in the default fixed versioning mode.\n\nOn Jun 12, 2018, at 09:06, Jakub Sarnowski notifications@github.com wrote:\n@evocateur Sorry, I guess I didn't explain the problem properly. I'd like to ignore it completely, this is also not bumping the version in package.json. I know there is independent mode, but in this way I also have to specify the version for the private package - which is completely redundant as I won't publish it anyways.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Oh, yeah, apparently if you have a lerna.json in your $HOME directory, this situation will arise.\nhttps://github.com/lerna/lerna/blob/d9e0ec58e2b4f57a57439e1540b7834076d9d226/src/Repository.js#L18\n\nI think we need to make lerna init force the evaluation somehow to limit the lerna.json search to \"the directory I am currently in\" instead of recursive.. No, find-up (or something like it) is necessary, we just need to find a way to limit how much it recurses.\n\nOn Nov 3, 2017, at 14:27, Leo Hsieh notifications@github.com wrote:\n@evocateur I tested if I made code like this it will work\nconst lernaJsonLocation = (\n      // path.resolve(\".\", ...) starts from process.cwd()\n      path.resolve((cwd || \".\"), \"lerna.json\")\n);\njust remove this line\nfindUp.sync(\"lerna.json\", { cwd })\nand find-up dependency.\nBut I wonder what is the initial intention to do like that at first place, since this is the only place to use find-up module in the entire project.\nif this solution looks fine, I am ready to submit PR to fix this anytime, thanks.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Yeah, I was looking into cosmiconfig just yesterday, that sounds ideal.\n\nCosmic might even be useful for the overall \u201cdurable\u201d configuration defaulting via yargs.config(). Still noodling about that, though.\n\nOn Nov 4, 2017, at 09:00, Mario Nebl notifications@github.com wrote:\ncould we limit the search from cwd to git root? cosmiconfig has the stopDir config for this: https://github.com/davidtheclark/cosmiconfig/blob/master/README.md#stopdir\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Indeed, we tried to enable the strict yargs config, which would throw errors in this situation, but we ran into other problems when that was enabled (mostly due to how we allow unrecognized parameters to pass through to the wrapped command for lerna exec and lerna run).\n\nI appreciate the well-written issue, and support any PR to improve this experience. A \"did you mean?\" error output would be super cool, but even a \"default\" command that indicates you done goofed and outputs the existing help would be an improvement.. Cool, I can hotfix that right now. Thanks for digging in, @marionebl. Awesome, thanks!. I'm gonna release 2.5.1 as soon as I cover a few missed conditionals, and CI stops pooping the bed.... Fixed in https://github.com/lerna/lerna/releases/tag/v2.5.1, apologies for the delay. Thanks so much for the quick turnaround!. augh Windows failed due to a permissions error in the npm cache. Whatever, it passes locally, I'ma merge it.. Published in https://github.com/lerna/lerna/releases/tag/v2.5.1. @marionebl Is this ready for review?. Thanks @marionebl!. I'm not aware of any recommendation to add \".\" to the \"packages\" config in lerna.json. I really don't recommend it, as the root package.json should generally be used for managing all the common test/build scripts and dependencies.\nThere is a similar problem when you have a postinstall script in the root that calls lerna bootstrap --hoist, which then calls npm install in the root first, and then we're off to the races. Detecting various lifecycle-related env vars (and providing our own, to signal that we're running already) is one way we could work around this, but it has its own pitfalls.. I\u2019ve locked my machine a couple times with a recursive bootstrap --hoist called from a root postinstall. I would not mention it if it weren\u2019t an issue.\n\nOn Nov 16, 2017, at 00:35, Daniel Rodr\u00edguez Rivero notifications@github.com wrote:\nHello @evocateur\nI'm not aware of any recommendation to add \".\" to the \"packages\" config in lerna.json.\nOfficially not, but if you want your root package json version to be updated along with the rest of packages, this is one easy way.\nThere is a similar problem when you have a postinstall script in the root that calls lerna bootstrap --hoist\nThat's funny, because I do have a postinstall script which calls lerna bootstrap with hoist configured on lerna.json \ud83d\ude04 . But, as far as I know (and contrary to what I thought) postinstall is a life-cycle method that affects only to packages that are being installed. This means it is not triggered when you run npm install on your repo, but after a package is installed\nis one way we could work around this, but it has its own pitfalls.\nOr at least provide a couple of warnings on the readme. That is fast and easy.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. json\n{\n  \"name\": \"install-with-no-arguments\",\n  \"version\": \"1.0.0\",\n  \"description\": \"run a postinstall after npm install with no arguments\",\n  \"repository\": \"npm/avoid-warning\",\n  \"scripts\": {\n    \"postinstall\": \"echo ran postinstall\"\n  },\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"tiny-tarball\": \"^1.0.0\"\n  }\n}\n\n```\n$ nvm exec 8 npm install\nRunning node v8.9.1 (npm v5.5.1)\n\ninstall-with-no-arguments@1.0.0 postinstall /private/tmp\necho ran postinstall\n\nran postinstall\nup to date in 0.09s\n```\n```\n$ nvm exec 6 npm install\nRunning node v6.12.0 (npm v3.10.10)\n\ninstall-with-no-arguments@1.0.0 postinstall /private/tmp\necho ran postinstall\n\nran postinstall\n```\n```\n$ nvm exec 4 npm install\nRunning node v4.8.6 (npm v2.15.11)\nnpm WARN package.json install-with-no-arguments@1.0.0 No README data\n\ninstall-with-no-arguments@1.0.0 postinstall /private/tmp\necho ran postinstall\n\nran postinstall\n```\nlerna bootstrap --hoist always runs npm install (with no arguments) in the root before any other operations, and thus will always invoke a postinstall lifecycle, if it exists.. npm i is just an alias to npm install\n\nOn Nov 20, 2017, at 01:37, Daniel Rodr\u00edguez Rivero notifications@github.com wrote:\nHello @evocateur ,\nThat's the behavior I was expecting, but at some point it stopped working.\nI usually run npm i instead of npm install, could that make a difference ?\nIn any case, thank you very much for your detailed showcase.\nRegards\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @bennyn You're using yarn workspaces, which as I understand it means you should keep the dependencies in the packages (because yarn already dedupes stuff into the root for you).\n\n@vjpr I'm going to need an example reproduction, I can't diagnose it from the stack trace.. I suppose we need to figure out a way to avoid wrapping certain execa calls with promises. Passing--max-buffer (or configuring maxBuffer in lerna.json) should have worked, but really the underlying issue is that we shouldn't be buffering a certain class of execution that we never ever want the output from.\nPlaying around locally, it seems pretty much any time we call ChildProcessUtilities.exec() the only thing that matters is potential error output.... yes, I meant stdout, still piping stderr to catch any errors. These exec calls are for npm install and the like, whose stdout tends to be irrelevant.. The only thing we log right now from npm install/yarn install is an actual error, like when it can't find a package in the registry. Otherwise the output from highly-concurrent installations becomes a mishmash of unreadable spam.. Most install output is a feverish deluge of progress bar output. How do you propose logging that when multiple concurrent install processes are running?\n(spoiler: it's really not worth it). When hoisting, either with npm or yarn workspaces, you want to avoid postinstall in the root, as it can cause cycles. With yarn, you don\u2019t need it at all, since yarn install does the workspace setup immediately.\n\nOn Nov 13, 2017, at 02:23, Benny Neugebauer notifications@github.com wrote:\n@evocateur: Thanks for the hint!\nI put back the dependencies to their individual packages to make use of Yarn's workspaces feature. But I also noticed that I get the maxBuffer error when lerna bootstrap is executed within NPM's postinstall script. Therefore I created a separate script (npm run boot) in my package.json file to run lerna bootstrap:\n{\n  \"devDependencies\": {\n    \"lerna\": \"2.5.1\"\n  },\n  \"private\": true,\n  \"scripts\": {\n    \"boot\": \"lerna bootstrap\"\n  },\n  \"workspaces\": [\n    \"packages/*\"\n  ]\n}\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I don't recall, honestly, and it's quite likely it just wasn't needed by whomever implemented --parallel.. Actually, this is because lerna run is first calling npm run, so you have to pass -- twice to pass the args to the npm script itself. It's not ideal, but it's kind of necessary to preserve the ability to pass flags to npm (or yarn) itself.\n\nlerna run bin -- --silent -- --config ./path/to/config.js\nThis would run the script without the npm-inserted headers and whatnot, passing --config ... to the underlying npm script.. --scope belongs to lerna, not npm.\nlerna run bin --scope=bootme-cli -- -- --config ./examples\\.bootme.js\n(lerna run will only run the script where it exists, so if bootme-cli is the only one with a \"bin\" script, you don't need the --scope arg)\n(also, not sure why your're escaping the second . in the --config arg?). What stream is the expected result logged to? If it's not stdout (console.log, console.info), then you'll probably need to pass --stream to lerna run (by default it buffers stdout and emits it after the scripts complete).. >When using yarn as npm client you are incorrectly passing the -- flags. This is deprecated and returns a warning.\n@tommedema Open a new issue, please.. Duplicate of #1098 . Thanks!. Thanks @alan-agius4!. Thanks!. The changelog preset in lerna 2.x is unfortunately not passed into the recommended-bump cli (choosing the version), only to the conventional-changelog cli (that generates the actual changelog output).\nLerna 3.0\u2019s first alpha (available under the \u201cnext\u201d dist-tag) passes the preset to both APIs programmatically, perhaps that might solve your issue?\n\nOn Feb 22, 2018, at 18:50, Francesca Guiducci notifications@github.com wrote:\n@alan-agius4 This --changelog-preset option to customize --conventional-commits is exactly what I need right now, since my organization hosts code on bitbucket as well (I know...).\nHowever this new and exciting option doesn't seem to work for me. I'm using lerna v2.9.0 (but I also tried with v2.6.0), yarn 1.3.2, node 8.\nI'm trying to run lerna publish this way: lerna publish --skip-npm --skip-git --conventional-commits --changelog-preset angular-bitbucket but I get the same result of lerna publish --skip-npm --skip-git --conventional-commits (same command, but without --changelog-preset option).\nIt makes me think that --changelog-preset gets completely ignored, also because I get the same result even if I do --changelog-preset foo-bar or passing any other invalid changelog preset.\nShould I add anything to my package.json and/or install additional yarn dependencies?\nThank you\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Thanks @alan-agius4!. Your preset is also installed globally?\nOn Apr 6, 2018, at 04:14, K\u00e9vin Berthommier notifications@github.com wrote:\n@evocateur When I use the changelogPreset option with the value @openagenda/oa, it's works with:\n./node_modules/.bin/lerna publish\nBut the following command ignore my preset:\nlerna publish\nThe two lerna have the same version (2.9.0), @openagenda/oa is replaced by @openagenda/conventional-changelog-oa by conventional-changelog but not found/used by my global lerna.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. If I had to guess, it's a limitation of how conventional-changelog-cli resolves its preset argument. A similar limitation for eslint plugins/config that will fail if a global eslint is used (instead of the locally-installed copy).\n\nLerna 3 always uses the locally-installed version, even when called from a global installation. Also, conventional-changelog-cli has been replaced by direct conventional-changelog API calls, with a much better custom preset experience overall.. Thanks!. Like I posted, this isn't actually the problem.. Okay, this sounds like an upstream issue, then.. Yeah, that's an environmental problem with npm on Windows, as far as I can tell. I kicked it again to see if we win the dice roll.. lerna publish requires a remote to push changes to, which is part of the lerna's core value proposition. #1060 proposes adding --skip-git-push, but I'm skeptical. If you don't care about git, which seems to be the case if you decline to set up a remote, just --skip-git I guess?. If you make changes to a package that is itself a dependency of other sibling packages, then that version is bumped in the consumer packages and is thus a change, hence the new versions for packages that have no diff from the previous tag.\nClosing as a duplicate of #886, our reasoning is explained in #707.\nA vnull tag is probably due to an error during publish prompts, a variation on #853.. This is kinda-sorta a duplicate of #277. I can certainly appreciate the pain. Does JFrog support \"properly\" incrementing pre-release versions (basically, shunting the git sha into the \"build metadata\" slot)?\n\n1.1.0-alpha.0+deadbeef\n1.1.0-alpha.1+08213312\n1.1.0-alpha.2+21636f26\net cetera\n\nWe can get those from some fancy git describe options (might not work in shallow-cloned CI), or queries of the registry directly using https://www.npmjs.com/package/package-json to get the gitHead... wow I just went down quite a rabbit-hole. So, like, it's definitely something I've been thinking about.. Yep, you're right! I brainfarted on the spec.. Thanks, that's good to know.. TL;DR: Versions are cheap, developer time isn't.\nI hate to be flippant, but this particular issue is not up for debate. It has been hashed and rehashed so many times already, and the actual fact of past breakage when we allowed only explicit updates is incontrovertible.\nChangelogs for packages with dependency updates ...maybe \"Dependency updates\" would be a good log? It's accurate! The package actually did change, because a lerna-managed dependency changed, and therefore behavior may have changed in ways that older versions cannot deal with (semver is not a law, it's just humans trying (and often failing) to make fewer mistakes).. I could have sworn this check was happening, but I am quite likely mistaken. Adding validation here seems reasonable, for the simple case.\nHigh-level logic:\n1. Call git status --porcelain -- [...this.repository.packageParentDirs].\n    * With pathspec filters like DiffCommand to allow dirtiness in places lerna doesn't care about?\n2. Assert that call's stdout is empty; i.e., no staged changes, unstaged changes, or untracked files under the package directories.\n    * A new GitUtilities method would be clearest and easiest to test.\n3. If non-empty, throw a ValidationError like the other git checks.\nReference: https://stackoverflow.com/questions/2657935/checking-for-a-dirty-index-or-untracked-files-with-git. This has been fixed for quite some time.. I am partial to the lerna field in package.json (in managed packages as well as the root), as it would open up opportunities to customize other lerna behaviors on a fine-grained basis (using cosmiconfig instead of a hand-rolled solution).\nAs for tagging, if you're in a mixed mode (fixed + independent), I'd say we stick to the fixed mode \"single\" vX.Y.Z tag pattern. Simplifies a lot, really.. So, about the \"breaking change\"-ness...\nI don't see this change as breaking for existing calls from npm scripts, which is (especially in CI) by far the most common usage? I agree that it does constitute a very different flow for those that call lerna directly in their terminal. Semver is hard. \ud83d\ude1b \nI suppose I should suck it up and sketch out a 3.0 milestone, bundling a few more breaking changes (#174, ...?).. I think I'm going to take a stab at this over the holiday weekend. I have some Rollup plugins and package generator scripts that I need to open-source that would facilitate this much better.. I think I'm going to take a stab at this over the holiday weekend. I have some Rollup plugins and package generator scripts that I need to open-source that would facilitate this much better.. > This approach might make changes like this more likely to actually land while avoiding to disrupt all other feature development that might be going on.\nYes, I agree, thanks for clarifying my own scattered thoughts. :D\n\nIs this PR valuable for the changes you have in mind / does it inform your decisions a bit?\n\nYes! I didn't mean to imply I was going to ignore this. I think your explanation of the transition steps helped sell me on it. I started sketching out a directory structure, but I didn't really get anywhere meaningful yet:\n```txt\ncli/\n\u2514\u2500\u2500 package.json (name: lerna)\ncommands/\n\u251c\u2500\u2500 add\n\u251c\u2500\u2500 bootstrap\n\u251c\u2500\u2500 clean\n\u251c\u2500\u2500 diff\n\u251c\u2500\u2500 exec\n\u251c\u2500\u2500 import\n\u251c\u2500\u2500 init\n\u251c\u2500\u2500 link\n\u251c\u2500\u2500 list\n\u251c\u2500\u2500 publish\n\u251c\u2500\u2500 run\n\u2514\u2500\u2500 updated\ninternals/\n\u251c\u2500\u2500 command\n\u251c\u2500\u2500 config\n\u251c\u2500\u2500 conventional-changelog\n\u251c\u2500\u2500 git-utils\n\u251c\u2500\u2500 package\n\u251c\u2500\u2500 pkg-utils\n\u251c\u2500\u2500 process-utils\n\u2514\u2500\u2500 prompt-utils\njson\n  \"workspaces\": [\n    \"cli\",\n    \"commands/\",\n    \"internals/\"\n  ]\n``\nTheinternalsin this sketch are incomplete, as it is missing quite a few existing equivalents. I thought about naminginternals\"core\", but that felt weird. I also dislike the-utils` suffix, but what can you do?. > This approach might make changes like this more likely to actually land while avoiding to disrupt all other feature development that might be going on.\nYes, I agree, thanks for clarifying my own scattered thoughts. :D\n\nIs this PR valuable for the changes you have in mind / does it inform your decisions a bit?\n\nYes! I didn't mean to imply I was going to ignore this. I think your explanation of the transition steps helped sell me on it. I started sketching out a directory structure, but I didn't really get anywhere meaningful yet:\n```txt\ncli/\n\u2514\u2500\u2500 package.json (name: lerna)\ncommands/\n\u251c\u2500\u2500 add\n\u251c\u2500\u2500 bootstrap\n\u251c\u2500\u2500 clean\n\u251c\u2500\u2500 diff\n\u251c\u2500\u2500 exec\n\u251c\u2500\u2500 import\n\u251c\u2500\u2500 init\n\u251c\u2500\u2500 link\n\u251c\u2500\u2500 list\n\u251c\u2500\u2500 publish\n\u251c\u2500\u2500 run\n\u2514\u2500\u2500 updated\ninternals/\n\u251c\u2500\u2500 command\n\u251c\u2500\u2500 config\n\u251c\u2500\u2500 conventional-changelog\n\u251c\u2500\u2500 git-utils\n\u251c\u2500\u2500 package\n\u251c\u2500\u2500 pkg-utils\n\u251c\u2500\u2500 process-utils\n\u2514\u2500\u2500 prompt-utils\njson\n  \"workspaces\": [\n    \"cli\",\n    \"commands/\",\n    \"internals/\"\n  ]\n``\nTheinternalsin this sketch are incomplete, as it is missing quite a few existing equivalents. I thought about naminginternals\"core\", but that felt weird. I also dislike the-utils` suffix, but what can you do?. Yeah, there\u2019s a lot of room for better modularity.\n\nOn Jan 19, 2018, at 18:24, wtgtybhertgeghgtwtg notifications@github.com wrote:\nWould it be possible to move the conventional stuff into another package, as well?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Implemented in #1307. Thanks for the exploration, @marionebl!. This seems reasonable. I've opened a PR to address this, bumping up the warning to an error (I don't see the point of continuing if it will inevitably cause problems).. Yeah, this actually is a long-standing bug when postinstall is used for lerna bootstrap --hoist, and now with lerna bootstrap --use-workspaces, for the same reason: both call <npmClient> install in the root first, which always calls postinstall.\n\nFor your use case specifically, using workspaces and whatnot, yarn install in the root is identical to lerna bootstrap --use-workspaces (indeed, lerna is literally calling yarn install in the root). So just remove the postinstall and you're fine, as long as everyone (devs and CI) are using yarn (like they should).\nThe recursive looping from a post* lifecycle is annoying enough in general that I've started working on a fix that causes the lerna CLI to exit 0 when a lerna-provided environment variable is present, which would account for a \"nested\" execution during postinstall (while still allowing postinstall to call lerna at least once).. Yeah, as I mentioned in #1021, the fact that yarn doesn't run lifecycle scripts for workspaces during yarn install is a yarn bug, not lerna. \"postinstall\": \"lerna run prepublish\" would be an appropriate workaround in the meantime.. https://github.com/npm/npm/issues/17480\nhttps://github.com/zkat/cacache/pull/110\nI believe this should be fixed in the next npm release. I've noticed it in our own Windows-based CI builds, with no discernible pattern. I'm fairly certain it is not limited to @angular/core and @angluar/common, and I'd rather not do special gymnastics to account for package manager bugs.\nFor the time being, ....wait. You're using npm 3.10.8? Any chance you could upgrade to node 8 + npm 5? The paths in the error message are missing a delimiter before the @ sign, so this is definitely an npm bug.. To reduce (and possibly eliminate) the number of concurrent installs during lerna bootstrap, have you tried --hoist? In ideal circumstances, it can install everything in the root first, then merely symlink siblings instead of calling npm install in each of them.. It's always been possible to do just that (I use it almost every day). I updated the docs with a lerna.json example.. In #1018 we've already agreed that lerna really shouldn't be touching peerDependencies at all, since changes to the peer range (especially the bottom end) are semver-major, and often very hard to automate safely. The linked issue gets a little in the weeds toward the end, but fundamentally we shouldn't be doing anything to peerDependencies right now (or \"surprise\" changes, as described in #955).. I'm not a huge fan of relying on implicit dependencies' executables, but I understand it's a legacy thing that some direct dependencies will employ. I don't see this becoming a feature of lerna, chiefly because I'd rather focus on making the npm5 \"linklocal\" behavior of file: dependency specifiers fully-supported, which would then let the package managers manage the packages much better than lerna ever could.\nIn the hoisting context, those bins are generally present at the root anyway, and lerna exec already adds them to the PATH when called. That is, lerna exec -- eslint . in the provided example would work because ./node_modules/.bin/eslint exists due to the hoisted bootstrap. This doesn't help external tools that call those transitive dependency executables, of course. That's why I generally recommend condensing all the build/test dependencies in the root, and call them from the root, instead of the leaves.. > To be clear, are you saying this should be fixed with npm5's \"linklocal\" behavior? I would be open to starting an npm issue if that would help.\nActually, this \"linklocal\" behavior is already in npm5: https://github.com/npm/npm/pull/15900\nI was just hoping at some point that lerna could support relative directory links out of the box, and largely fix these sorts of issues (though maybe it's in the same bucket as yarn, in this case? I have no idea). It's a much shorter path, instead of re-implementing even more of npm's internals (which I really, really don't want to do).\nTo summarize a different way: Lerna's philosophy, whenever possible, is to delegate directly to the underlying package manager for all relevant actions. Until npm extracts a package[1] to make transitive collection of bins for a given dependency tree (relatively) easy, I don't think it makes much sense devoting a ton of time and effort at cobbling together our own (cross-platform?!) solution.\n[1]: https://github.com/zkat/cipm has been driving some great extractions, lately, and I'm hopeful that a \"package manager toolkit\" becomes a thing in the near future.. If you\u2019re calling ava from an npm script in the hoisted subpackage, just add ava to the devDependencies and lerna bootstrap --hoist will symlink it appropriately. The fact that a transitive dependency bin is linked in node_modules/.bin is not the same as a guarantee that you should be able to access it without specifying an explicit dependency relationship.\n\nOn Jan 13, 2018, at 08:06, Alexej Yaroshevich notifications@github.com wrote:\nActually, I didn't pay attention before to this problem but decided now to make an issue and found this one.\nIn my case I'm using npm 5 and just want to run hoisted binaries in subpackages without changing PATH env.\nLike running ava from ./packages/one cwd when ava binary exists in ./node_modules/.bin/ava.\nAs temporary solution I can add ../../node_modules/.bin to env PATH but it's risky. And looks like this issue not really about my problem but similar one.\nAny ideas?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Well, one possibility is that lerna run currently always calls npm run <scriptName> instead of yarn run <scriptName>. Travis might have a wonky version of npm, then?\n\nStreaming the output through two processes might be an issue, too?\nCalling a CLI via a relative path that reaches below the CWD of the lerna process might also be gumming things up.\nStrikes me that the examples packages should probably have a proper dependency on the ws package so the bin symlinks get properly setup and such?. Well, one possibility is that lerna run currently always calls npm run <scriptName> instead of yarn run <scriptName>. Travis might have a wonky version of npm, then?\nStreaming the output through two processes might be an issue, too?\nCalling a CLI via a relative path that reaches below the CWD of the lerna process might also be gumming things up.\nStrikes me that the examples packages should probably have a proper dependency on the ws package so the bin symlinks get properly setup and such?. \"private\": true actually does avoid publishing a given package, but it does still version it, if there are changes. The logging is a bit confusing on this fact.\nI agree with the command.publish.ignore -> ignoreFiles change, it was an unfortunate oversight.\n--scope and --ignore were only ever applicable to a subset of commands, (Only for 'run', 'exec', 'clean', 'ls', and 'bootstrap' commands) as the help text attempts to clarify. They aren't truly \"global\" options, and should be refactored into a shared yargs builder. The only intentional mechanism to ignore packages when publishing is \"private\": true in the package.json, and --scope application is a bug.. \"private\": true actually does avoid publishing a given package, but it does still version it, if there are changes. The logging is a bit confusing on this fact.\nI agree with the command.publish.ignore -> ignoreFiles change, it was an unfortunate oversight.\n--scope and --ignore were only ever applicable to a subset of commands, (Only for 'run', 'exec', 'clean', 'ls', and 'bootstrap' commands) as the help text attempts to clarify. They aren't truly \"global\" options, and should be refactored into a shared yargs builder. The only intentional mechanism to ignore packages when publishing is \"private\": true in the package.json, and --scope application is a bug.. > Is there a way to skip versioning some packages?\nRemove the package from the monorepo.\nLess flippantly: Why? Just to \"workaround\" #707? To express something about the quality of code in <packageToIgnore>?\nPart of the problem (that keeps prompting questions in this vein, I suspect) is that lerna (and yarn) conflate versioning with publishing. Unlike npm, which still has separate npm version and npm publish subcommands. I dunno. I feel like I keep answering the same questions over and over again.\nSo, currently, lerna publish:\n- can be told to skip all npm publish calls with --skip-npm (terrible option name)\n- can be told to skip git commit & git push with --skip-git (terrible option name, again)\n- will skip npm publish on a package with \"private\": true set in its package.json\n- should not* allow granular omission of version decisions because of how those changes are detected (since the last git tag, basically)\nIf you were able to ignore versioning (which implies \"and publishing\") a given package that may have changes, how do you propose to recognize those changes later, when you do want to publish it? Given the nature of git tags, in the default \"fixed\" versioning scheme, it's setting yourself up for a footgun.\nThere are tradeoffs to setting up a monorepo of npm packages. This is one of them.\n*: That you can do this right now with the right combination of options is not intended, undocumented, and liable to break at any time.. > The package in question is the output of a yeoman generator.\nPlace it in a location not addressed by lerna (e.g., mkdir integration && mv packages/generator integration/generator) and then use relative file: specifiers for the repo-local dependencies. npm i integration/generator in the root then makes it capable of finding those local dependencies, as well as auto-hoist any non-local dependencies.\nLerna does this itself with its helpers namespace, which are packages that the root depends on, are never published, and are only required in tests.. > (Side note, because I just read it and maybe it isn't widely known: file: is deprecated. You can use link: instead.)\nYou should inform npm folks, then: https://github.com/npm/npm/blob/latest/doc/spec/file-specifiers.md\nJust because Yarn does something doesn't make it \"official\". link: is invalid for npm5.. Once we stop drastically mangling the package.json during bootstrap, this should be solved.. Implemented (correctly) in b73e19df. Closing as a duplicate of #1091. I appreciate the effort, @cezaraugusto, but I think we can close this PR in favor of #1145, which should resolve the underlying issue (npmClient yarn + npm publish). Thanks!. It's a (somewhat brittle) way to determine if the local configuration of lerna is compatible with the running executable. since v2.0.0, it's been a semver comparison, so you never really have to edit it.. --stream is irrelevant to the repro, and --sort (this.toposort, helpfully...) is the default. The package candidates are filtered for the target script before they are topographically sorted. I don't know how you'd do it the other way around, but it sounds complicated.. The topographic sort returns a two-dimensional array of \u201cbatched\u201d packages, not a simple list. It\u2019s more complicated to filter out packages that do not have the script and still maintain the batching.\n\nOn Jan 30, 2018, at 02:57, Martijn Th\u00e9 notifications@github.com wrote:\nThe package candidates are filtered for the target script before they are topographically sorted. I don't know how you'd do it the other way around, but it sounds complicated.\nFiltering first and then sorting sounds like the problem indeed.\nWhy is sorting first, then filtering more complicated?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Thanks!. Yes, I plan on releasing it today. Thanks!\nOn Jan 11, 2018, at 02:29, Steven Silvester notifications@github.com wrote:\n@evocateur, were you planning to release this in 2.x? I ask because we still support node 4 and I saw that you are dropping support in 3.x. Congratulations on the newborn, and happy new year!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. My gut reaction is \"don't do that, why would you do that?\", but I realize this is unhelpful. In terms of lerna support, I'd say those two packages don't belong in the same monorepo if they've got such drastically different registry requirements.\n\nIf you're willing to run two lerna bootstrap commands, I suppose you could run one scoped to registry A and another scoped to registry B, but that will probably fail if package-a and package-b have a relationship of any kind (which is kinda the whole point of lerna? It's okay not to use lerna).\nlerna bootstrap --registry foo.com --scope package-a\nlerna bootstrap --registry bar.com --scope package-b\nThe normal solution is to place .npmrc files with registry = foo.com contents next to the afflicted package.json. If you're not hoisting/using yarn workspaces, this could work. If you are doing either of those, I'm afraid you're out of luck.. If you've configured all of your dev dependencies in the root anyway, this isn't generally a problem. I don't foresee lerna symlinking transitive dependencies at every level, because that is a fractal nightmare of bugs and edge-cases.. Yeah, I've been meaning to do this, a PR would be great!. Thanks!\n\nOn Jan 10, 2018, at 02:52, Jeremy Y notifications@github.com wrote:\n@evocateur Looks like you beat me to raising a PR for this :)\nThe changes in your PR look good \ud83d\udc4d\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. What I'm thinking, additionally:\n```diff\ndiff --git a/src/commands/PublishCommand.js b/src/commands/PublishCommand.js\nindex f1d3d994..f76c703b 100644\n--- a/src/commands/PublishCommand.js\n+++ b/src/commands/PublishCommand.js\n@@ -570,6 +570,9 @@ export default class PublishCommand extends Command {\n     const { exact, conventionalCommits } = this.options;\n     const changedFiles = [];\n\n\n// exec preversion lifecycle in root (before all updates)\n\nthis.runSyncScriptInPackage(this.repository.package, \"preversion\");\n+\n     this.updates.forEach((update) => {\n       const pkg = update.package;\n       const packageLocation = pkg.location;\n@@ -632,6 +635,9 @@ export default class PublishCommand extends Command {\n       }\n     }\n\n\n// exec version lifecycle in root (after all updates)\n\nthis.runSyncScriptInPackage(this.repository.package, \"version\");\n+\n     if (this.gitEnabled) {\n       changedFiles.forEach((file) => GitUtilities.addFile(file, this.execOpts));\n     }\n``. Yep, I definitely sympathize. #1140 fixed this, released in v2.7.0..execa(the library that wraps ourchild_processcalls) is [already doing this](https://github.com/sindresorhus/execa/blob/8fb8b6d6cdad24598b665aa4e8e4ae501306bbb4/index.js#L26) for us.. These modules that require _literally different versions ofnode`_ should not be in the same monorepo.. Lerna does not support managing multiple multi-package roots in the same repository. I'm confused just thinking about it.\n\nAs I explained in #1398, we can't support a --config flag because we also store the global version in lerna.json. I don't see a non-breaking (like, catastrophically breaking) way of changing that right now.. The location of lerna.json also determines where the \"root\" of a lerna project is based from. ./packages-a and ./packages-b should just be different package locations for a single lerna project.\nAnd if they need separate node configs to even work, they should be in separate repositories. They aren't related, and they aren't sharing symlinks.. > xcode-select: error: tool 'xcodebuild' requires Xcode, but active developer directory '/Library/Developer/CommandLineTools' is a command line tools instance\nYou need to fix the actual error (presumably installing Xcode), this isn't lerna's fault.. A \"cookbook\" of how-tos for popular patterns would be a great PR!. I use webpack in Lerna monorepos almost every day with no issues (and no symlinks: false). You need to transpile the packages and specify them correctly as dependencies. Webpack handles the rest without any special handling, as they are just npm modules.. OS X 10.13 (High Sierra). Symlinks on Windows are a world of pain, in my (intentionally limited) experience.. Yep, that's because lerna 2.x doesn't have any awareness of npm's configuration.\nIn lerna 3.x (master), it is certainly possible (with the vendored npm-conf lib). It would allow a root .npmrc to address all the leaf packages, theoretically. lerna bootstrap 3.x uses it already, though for a different purpose.\nAlthough, I'm a little mystified, why is lerna bootstrap changing your dependency ranges?. I don't know that it's strictly correct to consider the lerna.json version property (in fixed mode) with a \"set of packages as a unit of monorepo change.\" Git already does this for us, after all. It is not the case that a given \"fixed\" lerna version is applied to all packages during a build, it is only set on packages that have changed since the last release tag.\nThe only guarantee of \"known good state\" is a lockfile, whether yarn.lock or package-lock.json/npm-shrinkwrap.json. Any other implicated statement of \"known good\" by lerna versioning is purely accidental.. I believe this was fixed in #1145 + #1204. v2.7.1 has both fixes, and v2.8.0 is the latest.. Right now, because the --canary versions are not incrementing properly (#277), you can't simply put a range in the dependency field (^1.0.0-alpha.0) and expect the resolution to \"just work\".\nYou can, however, do lerna publish --cd-version prerelease to get the sort of behavior you describe. However, one big caveat: it creates git tags and whatnot, which is not always desirable/possible from CI.. I\u2019d be more comfortable outputting the generated canary version to a designated file that could be subsequently read by a CI script. Leaving a dirty tree after canary, even when opt-in, smells like a footgun to me.\n\nOn Jan 18, 2018, at 08:01, Christian Evans notifications@github.com wrote:\nSorry for the delayed response here! I guess what it comes down to for me is\n      if (this.options.canary) {\n        this.logger.info(\"canary\", \"Resetting git state\");\n        // reset since the package.json files are changed\n        this.repository.packageConfigs.forEach(pkgGlob => {\n          GitUtilities.checkoutChanges(${pkgGlob}/package.json, this.execOpts);\n        });\n      }\nthis block of code in publishPackagesToNpm. Would it be possible to have some flag that doesn't revert the package.json files so that my circleCI builds would know how to appropriately point to the canary releases?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. lerna exec just executes whatever you pass to it, it never consults scripts in a given package directory. lerna run only calls the named script in packages that contain it. So the package that is freezing needs to have a dev dependency on chalk-cli for that task script to work.. Not at the moment, as kebab-case is a pain to use in JS (and is automatically camelized by yargs).. Thanks!. Thing is, when lerna run executes the npm lifecycle, it's a subprocess that isn't technically a TTY and thus almost all CLI color modules (chalk, etc) will automatically disable colors.\n\nPass --stream to lerna run and it will pipe the output through, which should restore the colors.. Literally all --stream does is pipe the stdout directly into the parent process. It's not doing any stripping of color whatsoever. It is the wrapped CLI itself that is not detecting TTY, and thus disabling color (a reasonable default given color escapes are garbage output in most non-interactive terminal situations).\nSolutions:\n Pass explicit options (e.g, --color) to the wrapped CLIs so that they always output color escapes\n Run tests from the root, which is half the point of lerna in the first place.. Yes, eslint and jest from the root are almost trivially easy to set up, and even faster to run (with appropriate caching, in eslint\u2019s case). Otherwise you\u2019ve got tons of duplication in every leaf package, increasing the burden of maintenance.\nAll of your devDependencies should be moved to the root package.json, regardless of whether or not you hoist the dependencies (lerna bootstrap --hoist).\n\nOn Feb 27, 2018, at 23:14, Jonas Kello notifications@github.com wrote:\nYes, --colors works with both mocha and jest, thanks for explaining that! \ud83d\udc4d\nRun tests from the root, which is half the point of lerna in the first place.\nI'm not sure what this means. Do you mean have one test script in the root package.json that runs tests for all packages rather than putting test scripts in each sub-package's package.json?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. All the test/build scripts are run from the root, with normal npm/yarn commands, using config that allows them to find the relevant files under the workspace targets (which no longer have any devDependencies). Lerna run/exec becomes largely unnecessary, and indeed the scripts block can be removed entirely.\nOn Feb 28, 2018, at 23:50, Jonas Kello notifications@github.com wrote:\nI have all devDependencies in the root package.json and I am using yarn workspaces so I have hoisting. But I still have scripts in each package.json that is run through lerna run. Are you suggesting to move all scripts (test, start, build etc.) to the root package.json too, so the sub-packages have nothing in the script section? In which case, how do you run the scripts? Using lerna exec? (Sorry for going off-topic a bit, just curious to understand the recommendations).\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. No, the prepublish (if it exists) in every package to be published is always run (by npm/yarn), because we are just calling npm publish/yarn publish in those directories (which is done in topological dependency order, so dependents always have their local sibling devDependencies built).\n\nOf course, npm5 has deprecated prepublish and it should probably be replaced with prepare or prepublishOnly. I personally don't see much use in the scripts/<lifecycle>.js pattern, but I don't have any plans to remove it.\nThe problem with a prepublish in the root is that it (currently) will run any time anyone runs npm install with no arguments in the root, complete with scary looking log and possibly executing something you don't really want to have happen then.. It's already run by a previously executed npm pack. Ah, yes, that particular lifecycle does not appear to be run when publishing a tarball (as far as I recall when I traced through the npm source). It also doesn't run during npm pack (although \"prepack\" is run, and would be an acceptable replacement).. You should be running compilers to generate build output once, from the root. Or move to the prepack lifecycle, if typescript can't handle building multiple packages at once.. Seems like a Yarn problem? I don't experience this issue with Lerna 3 + relative file: specifiers.. PRs with a clear test and solution welcome.. I could have been better about messaging the fact my son was born just over three weeks ago, and it turns out it\u2019s really hard to do anything productive when taking care of an infant.\nWe do need more maintainers, and I would be happy to share the burden.. Sorry, got distracted by the birth of my son. Working on release now.. https://github.com/lerna/lerna/releases/tag/v2.6.0. If it's not possible now, I definitely want to make it so in the near future, as lerna itself moves to a multi-package setup. I was going to experiment with local file: dependencies, see what happens.. You can, if the targeted package (and all of its dependencies) are regular boring commonjs that can be laid out by npm. I wouldn\u2019t recommend otherwise.\n\nOn Jan 31, 2018, at 04:15, Grzegorz (Greg) Zi\u00f3\u0142kowski notifications@github.com wrote:\n@evocateur, why aren't those packages linked inside the top level node_modules folder? I think it could help to solve this issue and other similar unexpected errors when using --hoist flag like this error:\nWordPress/packages#68 (comment)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Probably not. I\u2019m working on some mad science to completely remove the bootstrap command, which seems more worthwhile, tbh.\nOn Feb 1, 2018, at 14:33, Grzegorz (Greg) Zi\u00f3\u0142kowski notifications@github.com wrote:\nAre there plans to add a flag which would teach Letna to do it as part of the bootstrap command?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. With npm5: Make all sibling dependencies in the leaves relative file: specifiers, and npm install packages/* in the root. That replaces lerna bootstrap entirely, automatically hoisting everything into a package-lock.json.\n\nI\u2019m working on making lerna publish capable of rewriting the relative links into the linked package\u2019s semver range (without committing that temporary change). Just gotta write some tests/docs and I can cut the first 3.0 alpha.\n\nOn Feb 1, 2018, at 23:00, Grzegorz (Greg) Zi\u00f3\u0142kowski notifications@github.com wrote:\n@danielo515 I'm about to do the same. Use post-install scripts to npm link all I need to use in the root folder.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Use yarn workspaces?\nOn Feb 6, 2018, at 01:07, David Daniel notifications@github.com wrote:\nThe poor rollout of npm5 and the lack of resources behind the client has veered us away from npm5 to yarn. A huge issue has been npm5's link which has exacerbated linking issues when working with multiple repos. It maybe that this exacerbated by bootstrap, so I can see why you're going down this path, but what about projects that do not use npm5 in favor of yarn?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Thanks!. #1317 fixed the \"upstream ahead of local clone\" problem, we still don't have preflight npm checks (such as npm whoami, etc).. I think matching npm's --ignore-scripts flag would be fine. A simple early exit based on this.options.ignoreScripts in runScriptInPackages() should do it.\n\nThanks for reminding me to remove the prepublish execution during bootstrap (for 3.0), it's clearly not necessary there.. I really have no idea, I assume --use-git-version folks always use --skip-npm when they call lerna publish, so the git tags get propagated but the registry is never sent a package tarball. I don't altogether understand the use-case, to be honest.. To be clear, Lerna will never actually do all that complicated git stuff for you. It just modifies the version pins appropriately.. http://blog.npmjs.org/post/169432444640/npm-operational-incident-6-jan-2018. Fudge, I forgot Jest 22 dropped support for node v4. Guess this will have to wait until the next major.... Closing in favor of #1210 . Huh, weird, I\u2019ll take a look. I\u2019m in the process of upgrading to Jest 22 in another PR, which dramatically refactored the integration tests. I\u2019ll probably just take this PR and fix it later, once we have an updated Jest.\n(Odd that Appveyor passed!). (We should definitely figure out a way to pass the custom preset to bump later, maybe it needs upstream fixes?). Ah, okay, that makes sense. Still weird that the recommended bump cli doesn\u2019t match the same options as conventional commits cli.\n\nOn Jan 9, 2018, at 07:36, Alan Agius notifications@github.com wrote:\nWell, the custom preset is this passed to convental-changelog-cli which is\nreally where it\u2019s needed.\nOn Tue, 09 Jan 2018 at 16:33, Daniel Stockman notifications@github.com\nwrote:\n\n(We should definitely figure out a way to pass the custom preset to bump\nlater, maybe it needs upstream fixes?)\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/lerna/lerna/pull/1185#issuecomment-356318708, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AQv-Wl7T0y7tFQlxjEtzCeZGXf9Tcldzks5tI4bPgaJpZM4RXcND\n.\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.\n\n. ugh, what is happening to CI these days... so many random failures. You can include \"[skip ci]\" in your commit messages to avoid running the test suite again (since it's irrelevant to documentation updates). That's pretty much the tradeoff of using --independent versioning: the tags are much more verbose. Using the default \"fixed\" versioning only uses one tag per release, because it only uses one version per release (e.g., v2.0.3).\n\nThere's no way around it, sorry.. This is very strange. Immediately I suspect yarn + registry via .npmrc, which yarn has squirrelly issues with (sometimes overriding it with the yarn registry). Can you try the latest version of lerna, 2.7.0?. Yeah, I would raise it with yarn folks, I really don't have great insight into their codebase.. Please re-open if the yarn issue is resolved and the problem persists with lerna.. Please re-open if the yarn issue is resolved and the problem persists with lerna.. The packages managed by lerna need to be valid npm packages in their own right. That is, you should be able to put the packages in a separate repo and publish them to npm and whatnot. The structure you are proposing does not pass that test.\nA nested tree of packages is supported. With this config:\njson\n{\n  \"lerna\": \"2.5.1\",\n  \"packages\": [\n    \"packages/**\"\n  ],\n  \"version\": \"1.0.0\"\n}\nthis tree will produce three packages\npackages/\n  app/\n    foo-app/\n      package.json\n    bar-app/\n      package.json\n  ui/\n    baz-ui/\n      package.json\n. What does your lerna.json look like? I don't understand the (very buried) request, files in the root are always ignored when determining if a package has changed.. > I also meant the root folder of the package and not the root folder of the project \ud83d\ude05, updated that in the description.\nOh good, thanks for clarifying!\nWouldn't a subsequent negation (to enable the subdirectories) work? ([\"entry.js\", \"!*/entry.js\"])\nI don't recall why I used matchBase: true, maybe I was smart and noted it in a commit message?. Why bother with --conventional-commits at all if you don't want it to compute the bump?\nIncidentally, you can pass --cd-version <semver-keyword> (using some unstable-sounding keyword like \"preminor\" or \"prepatch\" or \"prerelease\") to pre-empt the angular fix/feat/breaking calculation. The changelog generation should still work, if that's the only reason you're using --conventional-commits in this context.\n| Starting Version | lerna publish Flags | Result |\n| ---------------- | --------------------- | ------ |\n| v0.1.0 | --cd-version preminor --preid beta |  v0.2.0-beta.0 |\n| v0.2.0-alpha.0 | --cd-version prerelease | v0.2.0-alpha.1 |\n. I suppose that's fair. %v to indicate lack of preceding \"v\" is a little confusing to me, but they're all arbitrary strings anyway and documentation will clarify in any event. PRs welcome!. That\u2019s a good point, I didn\u2019t think about that.\n\nOn Jan 15, 2018, at 22:56, Dan Allen notifications@github.com wrote:\nActually, I would argue it makes a lot of sense because it contains just the version. It's very clear in the docs that the tag includes a leading \"v\", which would make it not part of the version.\nPR sent!\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. The warning is still valid from lerna's perspective, as there is no (maintainable) way to tell if the circularity is bad (except of course it is, circularity is always bad). The fact that one can employ circular dependencies in Node is not a reason to employ circular dependencies in Node. In my experience they are almost always a failure of module design, and perhaps one-in-a-million on purpose.. Note: devDependencies vs dependencies is a distinction without a difference when it comes to this circularity warning. It's not warning about runtime, it's warning about bootstrap instability.. I struggle to identify a single use case where circularity is preferred. Tools certainly should not have dependencies on the packages they help build/develop. If they do, there is almost always a better module boundary to be drawn.. Duplicate code in multiple packages is begging for extraction into a separate package. Whether or not the relationship is defined in devDependencies is irrelevant.. @Igmat That's fine, disagree with me. Lerna won't agree with you.. Ugh, I was afraid of something like this. #1145 made this actually use yarn, and yarn apparently has prompts during publish? Yuk.\n\nAnyway, https://github.com/yarnpkg/yarn/pull/2770 (and to a lesser extent https://github.com/yarnpkg/yarn/pull/3820) seem to indicate the answer is --non-interactive. We should probably be pass the flag to the new places where yarn might be running.. or --new-version, rather. Should be. I\u2019m less and less enamored of letting yarn publish as the bugs pile up.\n\nOn Feb 8, 2018, at 10:06, Alex Barry notifications@github.com wrote:\nIs this actually available to use? I'm on lerna 2.8.0, and get the following:\nlerna info version 2.8.0\nlerna info versioning independent\nlerna info Checking for updated packages...\nlerna info Comparing with initial commit.\nlerna info Checking for prereleased packages...\n? Select a new version for @myorg/component (currently 0.0.1) Patch (0.0.2)\nChanges:\n\n@myorg/component: 0.0.1 => 0.0.2\n\n? Are you sure you want to publish the above changes? Yes\nlerna info publish Publishing packages to npm...\nlerna ERR! publish Retrying failed publish: @myorg/component\nlerna ERR! publish Ran out of retries while publishing @myorg/component Error: Command failed: yarn publish --tag latest --new-version 0.0.2\nlerna ERR! publish error An unexpected error occurred: \"Can't answer a question unless a user TTY\".\nlerna ERR! publish [1/4] Bumping version...\nlerna ERR! publish info Current version: 0.0.2\nlerna ERR! publish [2/4] Logging in...\nlerna ERR! publish info npm username: mrozbarry\nlerna ERR! publish info npm email: **@gmail.com\nlerna ERR! publish info If you think this is a bug, please open a bug report with the information provided in \"/home/mrozbarry/code/work/repo/packages/component/yarn-error.log\".\nlerna ERR! publish info Visit https://yarnpkg.com/en/docs/cli/publish for documentation about this command.\nlerna ERR! publish\nlerna ERR! publish     at Promise.all.then.arr (/Users/alex/code/work/blue-couch/node_modules/execa/index.js:236:11)\nlerna ERR! publish     at \nlerna ERR! publish     at process._tickCallback (internal/process/next_tick.js:188:7)\nlerna ERR! execute callback with error\nlerna ERR! Error: Command failed: yarn publish --tag latest --new-version 0.0.2\nlerna ERR! error An unexpected error occurred: \"Can't answer a question unless a user TTY\".\nlerna ERR! [1/4] Bumping version...\nlerna ERR! info Current version: 0.0.2\nlerna ERR! [2/4] Logging in...\nlerna ERR! info npm username: mrozbarry\nlerna ERR! info npm email: alex.barry+npm@gmail.com\nlerna ERR! info If you think this is a bug, please open a bug report with the information provided in \"/home/mrozbarry/code/work/repo/packages/hco-dark/yarn-error.log\".\nlerna ERR! info Visit https://yarnpkg.com/en/docs/cli/publish for documentation about this command.\nlerna ERR!\nlerna ERR!     at Promise.all.then.arr (/home/mrozbarry/code/work/repo/node_modules/execa/index.js:236:11)\nlerna ERR!     at \n$ yarn -v\n1.3.2\n$ npm -v\n5.5.1\n$ node -v\n8.9.1\n$ $(yarn bin)/lerna -v\n2.8.0\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Great investigation, thanks!\n\nI don\u2019t see a problem with running yarn publish serially, allowing the process to inherit stdio (the only way the prompts could be forwarded). Yarn seems to have problems with parallelism in general, but at least we know now what\u2019s up with publish (in some contexts).\n\nOn Feb 9, 2018, at 05:08, Alex Barry notifications@github.com wrote:\nOkay, so I sorted things out. Turns out, yarn doesn't actually ask for your password/create a token on an npmjs account until you do a user-specific thing, ie publish. The problem is it does it via prompt, and only during publish (afaik).\nBasically, for yarn login, it will ask for my npmjs username and email address, but doesn't go any further. I may open a request with the yarn team for something like yarn authorize or yarn login --with-password. The only reason I found this out is by creating a new single-component npm package, and running through the steps and saw the prompt running the same set of commands that lerna would.\nIs there any reason why lerna can't forward the prompts/stdin? I'd be okay with yarn not being ran in parallel if that's the only blocker.\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Thanks for closing the loop, all the same :)\nOn Feb 26, 2018, at 01:31, Pleun Vanderbauwhede notifications@github.com wrote:\nOk.... mea culpa. Prerelease is run in a separate pipeline step which needs the .npmrc to be configured again with the right token to succeed publishing. Should've thought about that, but was thrown off a bit by the error message I was getting, my bad. Please ignore me :)\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Wow, that's a niche bug. Thanks for the notice!. lerna exec already runs the command in each targeted package (cwd: pkg.location), is process.cwd() not sufficient?. No, those should work fine as well, because the relative \u201clib\u201d is resolved to the current working directory. I\u2019ve used lerna exec -- rm -rf lib many times.\nOn Jan 16, 2018, at 01:26, houfio notifications@github.com wrote:\nLooks like I found another use case. I'm fairly sure there is no other way to do with without creating node scripts.\n\"clean\": \"lerna exec -- rimraf \\\\$LERNA_PACKAGE_PATH/lib\",\n\"typings\": \"lerna exec -- tsc --declaration --outDir \\\\$LERNA_PACKAGE_PATH/lib\",\n\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. No, that's not possible in npm (it's not a lerna issue, basically). A package has one name.. Here is the actual diff: https://github.com/evocateur/lerna/compare/run-immediately...back-to-commonjs. Here is the actual diff: https://github.com/evocateur/lerna/compare/back-to-commonjs...drop-node-4. Here is the actual diff: https://github.com/evocateur/lerna/compare/drop-node-4...finally-upgrade-jest. Here is the actual diff: https://github.com/evocateur/lerna/compare/finally-upgrade-jest...then-update-majors. https://github.com/yargs/yargs/pull/1043 will unblock the yargs 10 upgrade. I\u2019m not sure what\u2019s up with the test:watch script, I just use yarn jest --watch most of the time. If you\u2019re interested in figuring it out, go for it, but it\u2019s not high priority.. Ah, yes, that is a problem right now. Thanks for looking into it.\nOn Jan 18, 2018, at 08:27, Craig Bilner notifications@github.com wrote:\n@evocateur fyi - looks like it's to do with the way the tests borrow each others files so the tests can't run in parallel. Running in band works. Would be a larger rewrite of the tests.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Would symlinking the root LICENSE file into the package roots work? (just checked with npm pack, nope \ud83d\ude1e)\n\nSo yeah, either copy the LICENSE file into each root manually, or lerna can do it I guess. fstream-npm's implementation is probably \"good enough\" in terms of identifying if a root license file exists.. I don\u2019t disagree, I just don\u2019t have time right now.\n\nOn Feb 6, 2018, at 10:22, Honza Javorek notifications@github.com wrote:\nIt would be great if Lerna automatically dealt with this problem as it propagates to many packages using Lerna. Otherwise we who care about licensing need to go to every single monorepo maintainer and to ask them to add a custom mechanism to copy the licenses into the individual packages, which is, let's say, a long run.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. That sounds great, thank you!\n\nI would recommend an approach similar to how the prepublish and postpublish lifecycles are called in commands/publish/index.js: loop through all of the updated packages (this.updates) right before the publish method, letting you set up the bookkeeping necessary to preserve existing license files but clean up the temporary copies. Cleanup would be done all at once later when the publish loop resolves or rejects. The rejection cleanup should be sync, rethrowing the error so we don\u2019t lose it, but the resolved cleanup should be async (joining the existing promise chain).\n\nOn May 28, 2018, at 07:59, Honza Javorek notifications@github.com wrote:\nMy proposal would be:\nRight before publishing the package, look whether there is a license present in the sub package.\nIf yes, do nothing. If not, look whether there is a license in the root package.\nIf yes, copy the license to the sub package, temporarily. On success or failure remove the temporary file.\nIf there is no license in the sub package nor in the root package, print a warning the published package is not going to be licensed properly.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Yeah, we haven't adapted to OTP yet, sorry.\n\nbash\n$ npx semver --increment prerelease --preid beta 1.13.0\n1.13.1-beta.0\nWe literally call node's semver implementation here, and that's what we get. The section on prerelease identifiers disagrees with your assertion that 1.x.y-1 was the expected result of a prerelease of 1.x.y.\nJudging by the commit history in hadron-react, perhaps you didn't have an existing --preid of \"beta\" yet, and thus the existing 1.13.0-0 got confused? It's a little hard to tell what was intended by the publish commits (which is really on us, since we don't record the command executed anywhere, like, say, the footer of the commit message...). By selecting \"Prerelease\", you need to enter a string like \"alpha\" or \"beta\". Admittedly, that particular option is not well-tested.. Okay, so in that case what you really want is the \"Premajor\" choice, except it doesn't appear to be using the --preid option, which is definitely a bug. The perils of a poorly-tested feature.... Whoops, sorry about that.\nTechnically, yes, you are allowed to have a lerna-managed package in the root (aka, right next to lerna.json, wherever that file happens to be). In practice, I discourage that because the root was originally intended (and works best as) the place to co-locate all of your build/test tasks and devDependencies (and if you --hoist, dependencies) of all lerna-managed packages.\nTL;DR: You have a packages directory, that's where all the packages should live (in my opinion, and according to the principle of least astonishment).. Yes, it was a bad design decision that forced many complicated internal compromises, not to mention confusion from users.\n\nOn Jan 19, 2018, at 01:52, Ihor Chulinda notifications@github.com wrote:\n@evocateur thank you for fast answer and fix.\nThe ability to publish the root package.json will be removed in v3.0.\nIs this quote highlights official plans for lerna? If so, it probably means that I have to change my project structure.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. This was fixed in #1217, published in v2.8.0. I really, really don't recommend this pattern, but here you go: add \".\" to your lerna.json packages array, which makes the root package addressable by lerna publish operations (it is considered \"managed\" by lerna, but still private, so it will never actually publish it to a registry, just do the git things).\n\nThis ability to treat the root package.json as a lerna-managed package will be going away in lerna v3.0. The root package is better-suited to encapsulating the project-wide build/test infrastructure, and making it also published violates that separation of concerns. By convention, most people develop in a multi-package repo (aka \u201cmonorepo\u201d) from the root, not from individual package directories, and overloading the root package with non-dev concerns is a recipe for confusion.\nThere is also the potential for race conditions/ordering problems when the root package is evaluated alongside the other managed packages. It\u2019s also just plain confusing when there is a \u201cpackages\u201d directory that doesn\u2019t contain all the packages in the repository.\n\nOn Jan 18, 2018, at 17:05, Brandon Millman notifications@github.com wrote:\n@evocateur why do you warn against this pattern? what negative side effects might we see?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Yowsers, that's frustrating. If we're not calling yarn publish correctly, I suspect the yarn devs will have to tell us why. I only barely figured out --new-version (to avoid the silly prompt) by accident.. This seems reasonable. I've just opened #1220, though, which makes conflicting changes. The tests also need to be updated, so I'd wait until I merge #1220 first.. oh bother, i mucked up the spacing after a comma during the online conflict resolution \ud83d\udeaf . Thanks!. > This is not how prettier wants JSONs to look.\n\nPrettier is wrong, in this case.\nMore specifically, Prettier should not be mangling package.json files; those are the domain of package managers, which universally use JSON.stringify() to serialize their edits (npm i <pkg>, npm up, npm rm, etc).\n\nWhat's the reasoning behind making the release commit using --no-verify?\n\nLerna allows customization (to a point) of the commit message (using --message or the command.publish.message key in lerna.json), so presumably if a project cares about such things, there is a way to ensure that it automatically follows the commit message standards.\nAdditionally, as lerna publish creates an automated commit, we don't want to fail because of overly-strict/spurious validation. It is incumbent on the developer (or CI process) that calls lerna publish to have a pre-release validation process in place. You can even use the preversion or prepublishOnly lifecycle in the root package.json to do this.\n\nWould you be open to a PR that makes this optional (either way)?\n\nNo, I really don't think that needs to be an option, given the purpose and behaviour of lerna publish. Maybe documentation, sure, but there's lots of documentation missing right now.. Nope, it's in the 2.x branch: https://github.com/lerna/lerna/blob/2.x/CHANGELOG.md#v280-2018-01-19 (and the github releases page: https://github.com/lerna/lerna/releases). I can cherry-pick the changelog update, but I don't want the v2.8.0 tag cherry-picked into master. Eventually, I think we're going to need to move the 2.x changelog, or just use the Github Releases page exclusively.. If you're really concerned about backup space, any backup program worth its salt can be configured to ignore node_modules directories. lerna doesn't support an externally-linked packages location, and never will.\nI appreciate the effort, but this is far too much added complexity for the purported benefit. Thanks for understanding.\n(The edits to the README are much appreciated! I cherry-picked them into master). Thanks!. @Andarist Yep, alread done (not published yet): https://github.com/lerna/lerna/commit/0ec3bef7aa51c13c28225cf1372fa3110239fda6. Published in https://github.com/lerna/lerna/releases/tag/v2.9.0. The deeply nested callbacks are definitely on the chopping block. I rather like the idea of just calling init/exec from p-try and having a single catch block.\nThere are still a few cases where we need to exit early without a non-zero exit code (lerna publish with nothing to do), as well as potentially exit early without error logging but with a non-zero exit code (lerna updated when used as a piped filter).\nTL;DR: the exitCode was me making tests a bit easier (instead of checking/mutating process.exitCode all the time) for cases when \"is an error\" does not always correlate to \"exited early\". Yay complex legacy.... When working with lerna-managed packages, running npm commands directly in a managed directory (packages/* be default) is not guaranteed to work. It is not an npm bug, either, because lerna bootstrap is doing special things to the package.json when installing (to workaround the local packages, basically).\nCurrently, removing a dependency in a lerna-managed package requires manual editing of package.json and re-running lerna bootstrap from the root. (contrary to the best practice, which is indeed npm rm/uninstall)\nIn the future I hope to add a lerna remove subcommand that streamlines this process.. @jennasalau My apologies, I forgot a step. I have been using --hoist so long, I forgot the patterns when npm actually installs stuff in every package directory (which is pretty slow compared to lerna bootstrap --hoist, even with zippy npm these days).\nAnyway: Run lerna clean --yes --scope module-a before re-running lerna bootstrap.\nThe normal behavior of npm recognizing changes to package.json and manipulating package-lock.json to match will be restored when lerna clean nukes the node_modules. Turns out we have an over-eager optimization in lerna bootstrap that is attempting to save time avoiding a \"no-op\" install, and we're not respecting npm's ability to also make that judgement (and remove the deleted dependency).\nOnce again, my apologies. Thank you for having the patience to document a workaround! We (I, actually) could really use help implementing the lerna upgrade <dependencyName> and lerna remove <dependency> subcommands. Even documentation would be appreciated.. If we stopped mangling the package.json files so badly during bootstrap, we would have a better story. Also, supporting the relative file: protocol (which would require resolution during publish) would make it all \u201cjust work\u201d, for the most part.\nTo instruct folks that manually editing package.json files is the \u201cbest practice\u201d for modifying dependencies goes against my strongly-held belief that you should always use the various npm subcommands when doing those sorts of things. I realize it is certainly possible to manually edit and get (mostly) what you expect in a normal npm package scenario, but in my experience it is a lot more brittle and prone to breakage. Lerna definitely changes the context significantly.\nHere are the bullet points, such as they are:\nTo remove\n\u2022 Edit the target package.json, removing the dependency\n\u2022 Run lerna bootstrap in the root\nTo add\n\u2022 If hoisting, npm i <dependency> in root\n\u2022 Edit the target package.json, adding the dependency (if hoisting, just copy the line from the modified root package.json)\n\u2022 Run lerna bootstrap in the root\nTo upgrade (semver major):\n\u2022 If hoisting, npm i <dependency>@latest in root\n\u2022 Edit the target package.json files, upgrading the dependency version (if hoisting, just copy the line from the modified root package.json)\n\u2022 Run lerna bootstrap in the root\nTo update (when package-locked):\n\u2022 Same as semver major upgrade, except when hoisting, call npm up <dependency> in root instead of install.\n\nOn Jan 24, 2018, at 06:37, Thomas Lefebvre notifications@github.com wrote:\n@evocateur I'd be happy to help improving the documentation. I've been facing similar issues when removing or upgrading a dependency comes into the game. Although, I'm not sure what are the current best practices for removing and upgrading. If you could provide some bullet point of what needs to be done, I can come up with some documentation for them.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @aweber1 Thanks, that's good to know. I kinda dry-coded my bullet points \ud83d\ude05\n\nI'm planning on implementing lerna remove and lerna upgrade, since lerna is now a monorepo itself and the pain is felt directly.. @kamleshchandnani Well, there is a \"help wanted\" tag on this issue. I don't have many spare cycles these days, so we're at the mercy of folks pitching in to help implement these commands.. Without a minimal reproduction, I can't really diagnose the problem. Based on your description, it sounds like maybe the git tags aren't being propagated correctly between branches? A wild stab in the dark.. @greypants In lerna 2.x, I'm not sure anymore. I'm really itching to make 3.x latest, personally.\nIf I had to guess, it's because the tag might not be the \"first\" one accessible from the current branch. A reproducible example would be required to make further guesses/diagnoses.. The tags need to be annotated tags, not \u201clightweight\u201d tags. The difference is basically the -m argument (or -a, but -m implies -a).\n\nOn May 9, 2018, at 10:27, Dan Tello notifications@github.com wrote:\nSo we're narrowing this down. My coworker, @claytuna and I are both tagging releases, and for whatever reason, Lerna only respects my tags.\nI manually created a tag v3.3.2 and pushed it to github\nI ran lerna publish and \"Comparing with v3.3.2\" correctly logged\n@claytuna tried steps 1 and two with a new tag v4.0.1\nHe rean lerna publish and lerna is comparing with MY last tag instead of his newly created one: \"Comparing with v3.3.2\"\nBoth our tags show up when running git tag -l, and appear in Github.\nAny ideas about how different users might affect what's happening here?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. AppVeyor is very flaky, we can ignore it.. Sorry, I finished a dramatic refactoring that moved the target of the PR. I did a bulk close of current PRs without checking, my apologies.\n\nIf you\u2019d like to rebase, I\u2019ll certainly merge it.. @aruntk Could you resolve the conflict in this PR? I'd like to merge it. Thanks!. json\n{\n  \"lerna\": \"2.9.0\",\n  \"command\": {\n    \"bootstrap\": {\n      \"npmClientArgs\": [\"--no-package-lock\"]\n    }\n  },\n  \"version\": \"1.2.3\"\n}. It's because I'm not using lerna bootstrap, I'm using relative file: specifiers from the root.. So there's one complication here: lerna 2.x technically allows depending on sibling package names that have different semver major, which means they are installed from the registry instead of linked locally.\nI don't necessarily agree that it should be supported, it's just terribly confusing, but that's \"legacy\" for you. The first alpha of 3.x (which I am about to publish) provides an alternative: local file: specifiers that link automagically (with npm5), overwritten temporarily during lerna publish.. If you're using yarn workspaces, why not use a yarn workspace command to add the dependency?\n(yikes, the docs for yarn workspace are completely missing!)\nReading the code, I guess yarn workspace e2e add @bahmutov/add-typescript-to-cypress should work? I dunno, seems like an issue to raise with the yarn team.. Not right now, but once #174 lands there should be a package available with a JS API.. My first reaction to your description is: maybe don't use a monorepo? It sounds terribly convoluted.\nIn any case, it is fair to request that a scoped diff use independent tags instead of the globally most-recent. Until recently this wasn't possible because lerna used lightweight tags, but it's tractable now.. The documented workaround won't work because the package.json files are always mangled into a single list of dependencies. There's not really a way to fix that in lerna 2.x.. You shouldn\u2019t be using lerna to deploy your packages.\n\nOn Feb 16, 2018, at 10:16, Cyril Lakech notifications@github.com wrote:\nSo lerna does not follow the NodeJS ecosystem guidelines and a core feature of npm.\nDeploying dev dependencies in production is very often useless. We should avoid to deploy useless files on production environment.\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.\n. First of all, I want to clarify: Lerna manages the publishing of several packages from the same repository. Full-stop.\n\nIt does not manage Next apps.\nIt does not manage Docker containers.\nTo be quite frank, since Lerna 3 began supporting relative file: specifiers for local siblings, I haven\u2019t used the bootstrap command at all. Using relative file: specifiers forces you to (properly) hoist all of your dev dependencies to the root, and it uses only one lockfile (in the root) for the whole project. The lerna source itself currently uses this pattern.\nWith relative file: specifiers, npm prune --production would be sufficient to create a tree suitable for archiving.\n\nOn Jun 29, 2018, at 02:52, Pierre de la Martini\u00e8re notifications@github.com wrote:\n@evocateur I've been looking at different issues on Lerna to get this right, and I think there is a misunderstanding of what Lerna is/does.\nMy usecase if the following:\nlerna bootstrap\nbuild my app (let's say a Next.js app)\nin another CI job:\nget the build from the previous job\nat runtime, my app still needs to access some modules in node_modules obviously\nusually, npm run install --production does that perfectly (and it won't work with this usecase as the package we want to deploy has multiple other packages as deps)\nthen I run the app\nI am not sure if lerna bootstrap -- --production --no-optional installing devDepedencies in all my packages is a feature or a bug.\nMaybe we're doing things terribly wrong, but could you enlighten us?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. yep, both of your suggestions work (I prefer the former, --scope foo --scope bar). Replacing a version placeholder in an independent commit message doesn't make sense. The override of the message itself is already validated here: https://github.com/lerna/lerna/blob/1d7eb9eeff65d5a7de64dea73613b1bf6bfa8d57/test/PublishCommand.js#L680-L688. Thanks!. Sorry, this is way too complicated. Use --conventional-commits if you need this level of granular control.. Thanks!. Lerna is just calling git, it's the user's responsibility to ensure they have the proper authentication and whatnot. OS X has a git credential helper to cache those authentications, I don't know what Windows provides.. Pretty sure lerna 3.0-alpha.2 handles the rejection now, as everything is run inside a Promise chain now. Some up-front validation of \u201cis my remote in sync\u201d is more appropriate to avoid a non-fast-forward push.. Google?\n\nLerna doesn't cater to Angular2's weird \"flat publish\" pattern, so I'm not surprised few (if any) Angular projects use Lerna.. 1. Lerna manages packages, not applications.\n2. The general pattern among npm packages is to \"fix forward\" when a situation such as the one you described occurs.\n  (Application lockfiles make this trivial, nothing changes the build until a compatible future release of the dependency package is ready)\n3. That being said, nothing about Lerna specifically forbids you from creating a hotfix branch based off the v1.0.0 tag, make some fixes, and then publish v1.0.1 from that hotfix branch.\n  (This is presuming the fix already lives \"upstream\" in  v2+master and you don't need to do any horrible git flow-like gymnastics)\nThis is also somewhat predicated on the use of lockfiles (yarn.lock or package-lock.json, doesn't matter which), otherwise forking off a previous tag won't guarantee any sort of reproducibility etc etc.. Thanks!. I can't debug it if you don't provide context (lerna.json, repo structure, commands run, etc). Yeah, that's because the leaf node package.json files are always mangled during the npm install called from lerna bootstrap to exclude sibling dependencies.\nIt's kind of irrelevant from the npm perspective, however, as package-lock.json files are never published and are never consulted by consumers when the package is installed. Thus, it's an unfortunate side effect, but makes no difference in practice.. All of your dev dependencies should be in the root, anyway. It\u2019s half the point of a monorepo in the first place.\n\nOn Feb 14, 2018, at 16:58, William Wong notifications@github.com wrote:\nAlthough package-lock.json is not published to NPM, it is committed into GitHub. Every time a fresh Git clone + lerna bootstrap will result in a big modifications to all package-lock.json files under /packages/ folder.\nIn order to \"mitigate\" the side-effect, we will need to go under every package and do anything that will let npm touch the package-lock.json file, for example, npm install a package.\nIt just sounds kind of strange when lerna bootstrap is meant to install dependencies, but in fact, it modified some of the committed files.\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Also, the build/test/lint scripts, of course. Much faster bootstrap that way, too.\nOn Feb 14, 2018, at 19:15, William Wong notifications@github.com wrote:\nAll devDependencies in root package.json, that's an interesting metaphor I didn't try out yet. \ud83d\udc4d\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Your project is too large if that is the case.\nOn Feb 21, 2018, at 18:06, Elliott Sprehn notifications@github.com wrote:\nWe have a large project and can't have all the devDependencies at the root because there's different versions used by different packages. Can this be fixed in lerna instead?\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I\u2019m using npm5 + lerna 2.x daily with no issues; the 3.0 alpha completely replaces bootstrap with npm5\u2019s relative file: specifier symlinks (coincidentally, very similar to how yarn workspaces hoists things, but much cleaner). Since virtually nobody else has seen fit to contribute to lerna recently, I get to have opinions (founded in facts, but don\u2019t let that stop you from belittling them) about how multi-package repositories should work.\n\nTo be blunt, Google (to my knowledge) has contributed fuck-all to Lerna. Have fun forking.\n\nOn Feb 22, 2018, at 18:39, Elliott Sprehn notifications@github.com wrote:\nWhat makes you say that? We use lerna for our product which contains a number of submodules (server, cloud functions, web app, android, ios, etc.) since it removes the need to have lots of cross repo changes and working in a monorepo is how all our tooling works. Different clients might use different versions of certain build tools. Also not all tools are okay with symlinks inside node_modules, so hoisting all packages breaks some tools.\nWe really like using lerna, but it seems you're trying to pass judgement on how folks run their projects which makes it hard for us to use it. I'm not sure how you expect people to use lerna in an npm@5 world since it seems the default workflow from before stops working and you're forced into a very opinionated (--hoist + only devDependencies in the root) workflow instead. I guess we could fork lerna at Google, but that'd be unfortunate.\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @danny-andrews-snap You should be using npm ci in CI if you're versioning the lockfile, otherwise you're prone to developers forgetting to synchronize manual edits to package.json => package-lock.json.. I agree that the current message for \"dependency bump only\" with --conventional-commits is unfortunate, I don't know that bubbling up all the changes is really appropriate. Changelogs are meant to describe changes relevant to the package in question, and conflating transitive changes seems to violate that goal.. The preversion/version/postversion lifecycle is already supported in the root, which seems perfectly appropriate for your use case, and I'd rather not add a flag just to support a deprecated lifecycle script.. lerna run build --stream. Why aren't you building from the root, along with all other test/lint tasks?\n\nIn any case, --stream (and the related --parallel option) is the only way to get feedback from a script executed by lerna run as it is running. That being said, I doubt something like webpack --progress would work anyway, as the --progress flag implies a lot of console drawing shenanigans on a TTY.\nSo anyway, I suggest running webpack tasks that you want --progress from directly, in the root. I don't have time to debug what webpack's CLI is doing in that case that may or may not be interfering.. > multiple projects inside of the same monorepo that are totally unrelated\nThat's not a pattern lerna was meant to support. If there is no relationship between the managed packages, why bother with lerna at all?. It would seem pretty straightforward to have npm scripts in the root that call webpack path/to/app-a and webpack path/to/app-b, etc?. Yes, but that's irrelevant to the issue. The issue is anything like webpack that absolutely bombards stdio with data, along with progress bars that likely do not handle concurrent output from multiple processes very well, if at all.. I use lerna to develop apps almost every day. It does just fine.\nHowever, I do not publish those apps, they merely consume the local lerna packages (which are published, sharing bits of formerly-internal company logic). I have a webpack build that creates the tarball artifact for deployment in various server environments (test/staging/live, etc).\nWhether or not you publish the \"application\" packages to an npm registry is irrelevant in this context, however. The important distinction is that you do not use npm/yarn (or lerna) to deploy your code. npm and lerna are not meant for that job, and there emphatically will not be any explicit support for it from lerna.\nTL;DR: Your CI server should be creating an artifact that you use to deploy, not lerna/npm directly.. I would suggest not publishing tagged releases in feature branches. I guess that horse has left the barn already, however. If feature branches necessitate publishing, you could always lerna publish --canary until it gets merged properly into master.\n\nWe're trying to build independently versioned packages with multiple programmers. Each programmer desires to update the packages they changed independently. \n\nSounds like you shouldn't be using lerna, then?. Yep, just set up the right metadata as @7yp0 noted, and it will Just Work(tm).. You should not use lerna to deploy, for the same reason you don't use npm to deploy code into production: it is not a deployment tool.\nLerna helps you publish packages. Those packages should be installed in a build (taking care of the devDependencies \"problem\" automatically), that build should generate a tarball artifact, and that artifact should be what is used to deploy the app into production.. I don't see \"conventionalCommits\": true in your lerna.json? I assume lerna publish --conventional-commits is being passed. Ah, found it:\nlerna publish --conventional-commits --yes --force-publish=* -m \"chore: publish %s [ci skip]\"\nSo I'm a little puzzled why --force-publish=* is there, for starters.\nRe-reading the angular convention, it seems like most of the commits with \"BREAKING CHANGE:\" in the footer should have worked. I don't know necessarily if this is a lerna issue, or a conventional-commits problem.. Dang, that's really frustrating. I wonder if the conventional-changelog folks have any insight?. It might help cross-posting, though 2.x is just calling the various CLIs (conventional-recommended-bump and conventional-changelog-cli) with arguments that have been supported for almost a year.\nInstead of pushing to Travis, does a local test elicit the same incorrect result?\n```\nmake a commit in a feature branch that has \"BREAKING CHANGE: foo\"\nlerna publish --conventional-commits --skip-git --skip-npm --yes\n```\nThe resulting diff should, of course, show a v2.0 changelog.\nIf that doesn't work, perhaps try installing lerna@next locally and running the same command with the same (local) commit history? I recently refactored the conventional commits stuff to call the programmatic API directly, I wonder if upstream releases has mucked with the resolution of the 2.x CLI calls...\nnpm i -D lerna@next\nnpx lerna publish --conventional-commits --skip-git --skip-npm --yes\nDespite the alpha tag, I am actively using it \"in production\" of many of my private projects.. I don't understand how lerna@next would break your commitlint.\nI literally just reproduced a successful recognition of BREAKING CHANGE:\n```\n[~/z/npm/pectin] (scratch)$ npx lerna --version\n3.0.0-alpha.0\n[~/z/npm/pectin] (scratch)$ git show\ncommit 4322318efaaa588fb4e472958f257a4f3011517d (HEAD -> scratch)\nAuthor: Daniel Stockman daniel.stockman@gmail.com\nDate:   Tue Feb 20 17:32:34 2018 -0800\nfix(pectin-core): woo changes\n\nBREAKING CHANGE:\n\nWOO\n\ndiff --git a/packages/pectin-core/lib/pectin-core.js b/packages/pectin-core/lib/pectin-core.js\nindex 4f61991..030acb9 100644\n--- a/packages/pectin-core/lib/pectin-core.js\n+++ b/packages/pectin-core/lib/pectin-core.js\n@@ -1,5 +1,6 @@\n 'use strict';\n+// WOO CHANGES\n const getInput = require('./getInput');\n const getOutput = require('./getOutput');\n const getPlugins = require('./getPlugins');\n[~/z/npm/pectin] (scratch)$ lerna publish --conventional-commits --skip-git --skip-npm --yes\nChanges:\n - @zillow/pectin-core: 1.1.0 => 2.0.0\n - @zillow/pectin: 1.1.0 => 2.0.0\n - @zillow/rollup-config-pectin: 1.1.0 => 2.0.0\n[~/z/npm/pectin] (scratch)$ git diff --stat\n CHANGELOG.md                               | 17 +++++++++++++++++\n lerna.json                                 |  2 +-\n packages/pectin-core/CHANGELOG.md          | 17 +++++++++++++++++\n packages/pectin-core/package.json          |  8 ++++----\n packages/pectin/CHANGELOG.md               |  9 +++++++++\n packages/pectin/package.json               |  4 ++--\n packages/rollup-config-pectin/CHANGELOG.md |  9 +++++++++\n packages/rollup-config-pectin/package.json |  4 ++--\n 8 files changed, 61 insertions(+), 9 deletions(-)\n```\nRandom shot in the dark, but does conventional-changelog-cli work for you in a normal npm package repository, taking lerna out of the equasion?. If your git strategy is mangling/omitting annotated git tags, that could be the problem. I\u2019ve got integration tests that tell me you shouldn\u2019t need the \u201coops\u201d patch just to make a major bump, assuming annotated git tags are reachable.\n\nOn Feb 21, 2018, at 13:10, Flip notifications@github.com wrote:\nOkay so, if I jump into my repository, create a new branch, and commit a change with a message like\nfeat(build): update some lerna things\nmove to lerna@next\nremove lerna scopes for commitlint\nBREAKING CHANGE: woo finally shipping v2!\nit does a patch\nThen if I add all the changes lerna makes to changelogs and package.jsons and make a new commit with the exact same message, it does a major version bump\nLet's say I commit those changes with git commit -m 'fake' --no-verify and then do git commit --allow-empty with that same git commit message again... also a major bump\nSo it seems to work as expected but only after that initial (unintentional) patch is added\nIs our git strategy perhaps sabotaging us somehow?\nI'm going to try doing this live to see if it self corrects with lerna@next\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. A conventional breaking change still needs a subject line with either \u201cfix:\u201d or \u201cfeat:\u201d then two newlines (a new paragraph, the \u201cbody\u201d of the commit message) before the \u201cBREAKING CHANGE:\u201d description.\nOn Mar 12, 2018, at 07:52, Justin Conway notifications@github.com wrote:\nAlso having this issue on a brand new repo. Not doing anything crazy, just added the repo, added lerna to the root, created a package and made a commit message of BREAKING CHANGE: foo and ran lerna publish --conventional-commits --skip-npm --yes and it won't bump major versions:\nHowever feat: foo commits will give me a minor version bump.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Regardless of any solution to this, we still have the problem of how lerna recognizes changes: annotated git tags. We would have to get a lot more complicated with the parsing of those to recognize when things did and didn't change. Otherwise it becomes terribly difficult to figure out \"does this package need to be published\" on any given execution of lerna publish.. lerna publish will call the version lifecycle (preversion, version, and postversion) for all packages, including the root manifest. The root preversion is called before any package is modified, root version is called after all updated packages are modified, and root postversion is called after all changes have been committed.\n\npreversion: Run BEFORE bumping the package version.\nversion: Run AFTER bumping the package version, but BEFORE commit.\npostversion: Run AFTER bumping the package version, and AFTER commit.\n\n\nAlso, we just call npm publish in the package directories, any prepublishOnly and postpublish present will be called as well.\nThat said, you should just use the prepare lifecycle to build the SCSS into CSS, and include that output directory (e.g., dist) in the package's files array. You shouldn't need to modify versioned code like that, it's the whole point of using preprocessors like Sass in the first place.. I though auto-prefixing was the responsibility of whomever is compiling the CSS. I don't see why you need to do that, for a library source. (Consumers may have a different browser support matrix, for example, resulting in different prefix output). If the support matrix is already defined, you might as well commit those prefixes in the source code.\n\nOn Feb 21, 2018, at 06:15, Jani Kraner notifications@github.com wrote:\nnormally you would, but we need to provide the support for the browser matrix we've defined\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Why not just run your build scripts from the root? It's like half the value-proposition of Lerna itself (dedupe all your package-level linting/testing/building). Especially watchers, those should always be run in the root of any tree, not the leaves.\n\nPhilosophically, Lerna is intentionally \"dumb\" about this because at its core it is \"just\" a coordinator of existing functionality, gluing together a panoply of packages into a convenient unit. We don't re-implement npm run because the npm folks already did a good job of it.. Conveniently, #1278 does just that! (Except it doesn't support the semver: prefix right now)\nHowever, this will only be released in the 3.x line, not 2.x. In v2.8.0, you need to pass --use-git-version (or \"useGitVersion\": true in lerna.json) to use this functionality.\nAs mentioned in this comment, lerna doesn't provide any utilities for actually doing the git splitting stuff, just updating metadata on the publish side.. Yeah, a revamp of the docs is in order before 3.x general release.. Pretty sure this is because hosted-git-info doesn't recognize the gitlab.mycompany.com domain as a GitLab host. I don't know that there's a lot we can do about that directly, as npm doesn't seem to support that right now?\nhttps://github.com/npm/hosted-git-info/pull/30\nhttps://github.com/npm/npm/issues/19788. We're at the mercy of hosted-git-info right now, unfortunately. I don't want to maintain a re-implementation of it.. Nope, this is by design. #707 . That flag is gone entirely in lerna v3, just so you know.\n. Your example doesn't look terribly \"inconvenient\" to me? It's much cleaner than the \"independent\" mode tag spam, anyhow.\nI really fail to see the problem you're trying to describe. One git tag is made, in the example you posted, whenever lerna publishes a version. That's exactly how git tags work with \"normal\" npm packages (one-per-repo), and that's exactly the goal of lerna's default versioning mode.. In your updated example, a subsequent patch on package-c will be v0.1.1. That's the default \"fixed\"/\"universal\" versioning working as intended. There is an \"independent\" versioning mode that would allow you to choose v0.0.2 for package-c, but then it would also force you to choose independent versions for all the other packages.\nI recommend sticking with the default versioning, it's less complicated and works just fine.. Yep, yargs.config() supports the extend keyword, just haven't found the time to refactor the configuration mechanism yet.. Sure, as long as you\u2019re okay with it potentially breaking (not likely, though) in v3. I am planning on completely removing that method.\n\nOn Feb 26, 2018, at 08:48, fenduru notifications@github.com wrote:\nWould you consider a PR that adds another line here without completely refactoring the configuration mechanism?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. This is what the package.json files and main fields are for.\n\njson\n{\n  \"name\": \"my-leaf-package\",\n  \"version\": \"1.0.0\",\n  \"main\": \"dist/index.js\",\n  \"files\": [\n    \"dist\"\n  ],\n  \"dependencies\": {}\n}. As I suspected, you\u2019re using yarn to publish, so that\u2019s a yarn bug. I\u2019ve never been impressed by yarn\u2019s publish command, especially the files array handling. Lerna just calls yarn publish, it does not do anything that would affect tarball packaging.\n\nOn Mar 14, 2018, at 02:27, Ovidiu Chereche\u0219 notifications@github.com wrote:\n@evocateur do you know of any reason why Lerna would publish files outside package.json#files? I'm experiencing this but only in some cases.\nfiles NOT including src\nsrc gets published\nAny pointer to how to debug this is very appreciated! Related: react-cosmos/react-cosmos#611\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. That\u2019s because your \u201cmain\u201d property is wrong. It should be pointing to a file under dist, not lib.\nOn Mar 22, 2018, at 02:26, Juan notifications@github.com wrote:\nSame here.\nI have a local library with\n\"files\": [ \"dist/\" ],\nBut when running lerna link or lerna bootstrap, the library gets symlinked to the main library folder, not the to the dist/ one\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I didn't see your edit in my email, so my comment isn't valid, sorry. You're using \"root\" in the context of a leaf package, not the actual lerna root, and that confused me.\n\nWhy can't Angular just behave like literally hundreds of thousands of other npm packages? Why is it a special snowflake? It's kind of ridiculous, to be quite frank. Lerna will never support the \"packages/your_package_1/dist\" package spec because it isn't going to cater to an ornate \"solution\" that ignores almost a decade of precedent.. Literally nothing in that linked page describes a requirement for publishing a generated package.json in a dist subdirectory.\n\npublishing the a dist/ folder is quite common practice\n\nAs a member of the package tarball, as specified in the original package.json by the files array, main pointing to dist/{something}.js, and built during prepare/prepublishOnly lifecycles, sure. Demanding a separate cd ./dist before running npm publish is not common in the greater npm ecosystem.. I'm getting really good at linking this: https://docs.npmjs.com/files/package.json#files\nThere you go. Problem solved.\nBut hey, @johnmcase, feel free to insult me, that's a good strategy for convincing me to do something. I've given my reasons over and over again, and they haven't changed. Have fun forking.. Your package.json doesn't include the right dependencies? That seems like a problem independent of lerna.. This is why Angular is wrong to promote publishing from a generated subdirectory. npm link (or yarn, whatever) will literally never work with this ridiculous pattern.\n\nOn May 9, 2018, at 17:50, Sam J notifications@github.com wrote:\nIt also isn't just about publishing\nyarn link'ed modules need to point to the build folder as well.\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @pterblgh I don't see anything in the \"Angular Package Format\" spec that requires publishing from a subdirectory. It's also not clear to me why a leaf package.json needs to be mangled at all?. files + main, same as it's always been. src/index.js transpiles to dist/index.js, \"main\": \"dist/index.js\", \"files\": [\"dist\"]. I've been told that's not good enough for Angular, but I don't see why all the other semi-ludicrous \"phesom\" variants and their myriad package.json properties can't always be present in the package.json and outputs .gitignoreed and whitelisted in the files array.. I appreciate the reminder to speak with compassion. I hope you can appreciate how difficult it is to do as the only active maintainer of a mildly popular project who also happens to have a day job and a seven month-old.\n\nI found http://neugierig.org/software/blog/2018/07/options.html to be very timely, relevant reading. I think I have made it clear where I draw the line for Lerna. I hear Rush (Microsoft monorepo tool, not the band) handles the kind of subdirectory build pattern you\u2019re after.. I completely agree! Would you be willing to drive this documentation refactoring? I was hoping to get to something like this, but I\u2019ve got a lot of things on my plate (don\u2019t we all, heh). I will make an effort to be responsive to anything you can find the time to contribute.\n. Practically speaking, the first approach is the only approach. \ud83d\ude2d\nLet's start with the small, concise section (with maybe some deletions of really bad old examples). Thanks!. That's really weird. A minimal reproduction would be appreciated, if you have the time.. Oh, I believe you. My hope (crossing fingers and toes) is that recent refactoring in the command lifecycle will stop swallowing transient errors like this, and we can get better insight into the root cause(s).. @bobbwhy --scope arguments are globs of package names, which include a scope (if present).\n\nwhen I tried to yarn add into the app package\n\nYou ran yarn add from ./packages/app? Yeah, that will fail, as it no doubt had local dependencies also specified, perhaps unpublished?\nhttps://www.npmjs.com/package/constants itself has a big ol' disclaimer on it, so maybe don't use it?\n\nDO NOT USE: this library cannot be used because it's name conflicts with node's own internal module that goes by the same name.\nUse the renamed \"node-constants\" instead. Sorry for the inconvenience.. Oh yeah, definitely in that case you need to pass the full package name (including package scope). I really hate that --scope is misleading like that. lerna add @pheme/constants should work.. directory name is irrelevant, maybe don't pass --scope? lerna add should skip adding a package to itself.. Tag them all from your own fork\u2019s issues. I already give away all my work, it\u2019s not my job to make your fork easier. I thought I made it very clear that the discussion was over.. This sounds like a job for --conventional-commits.. Or just ...accept that it\u2019s a breaking change? I mean, it\u2019s pretty trivial to split the commits. I don\u2019t see how you even configure the convoluted solution you\u2019re proposing, since it would need to be different literally every time you pushed to CI.\nOn Feb 27, 2018, at 18:55, Bryan Wain notifications@github.com wrote:\nI saw that but I don't think conventional commits does what I'm describing.\nFor example, lets say i have a component in package1, and package2 uses it. Let's say they're both v1.0.0 right now (but independent) and that I make a breaking change to the component where i rename an option. In my commit, i rename the option in package1, and update the usage of it in package2 to pass the new option name.\nI want to bump package1 to 2.0.0 and package2 to 1.0.1. I have a single commit, and I could put BREAKING CHANGE in it to signify a major bump, but that would bump both packages to 2.0.0. It seems like I could make it work if i avoided squashing and made sure to do 1 commit per package, but that is kind of an artificial restriction and not being able to squash would be annoying to deal with.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. How exactly is this list of hints supposed to make its way into an automated CI process, though?\n\nI\u2019m increasingly convinced the \u201cindependent\u201d versioning mode was a mistake. All it does is make people throw random packages into a single repository and then complain when they have to version them at the same time.\n\nOn Feb 27, 2018, at 20:45, Bryan Wain notifications@github.com wrote:\nIt's not a breaking change to package2 though. Only package 1. Imagine package2 is lodash and package1 is some helper that lodash used under the hood. If I am an app that uses lodash, I don't need to change my usages of lodash when upgrading from the old version to the new one, so why would it be a major bump? Lodash hides the usage of package1 from me, so making it a breaking change just because package1 had a breaking change would be wrong. The same logic could apply to any dependency otherwise, not just ones in the same project.\nWhile it's not difficult to split the commits, probably the most important benefit of monorepo is to streamline changes that affect multiple packages at once, so artificially splitting a single change up into separate commits seems to somewhat defeat the purpose.\nThey are not necessarily the only solutions, but two that could work are the ones i described above.\nlerna publish --versions \"package1,major,package2,minor\"\nor\nlerna publish --versions-file \nit's a bit awkward to type that out manually, but they are there mainly for CI usage anyway, since the current version of publish that prompts you for each package works fine for a human.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. As nice as that would be, it\u2019s suuuuper out of scope for lerna directly. You\u2019ll need to bring it up with the conventional-changelog folks, or possibly develop a custom preset.\nOn Feb 28, 2018, at 22:16, Rhy Moore notifications@github.com wrote:\nWhen I use lerna publish --independent --conventional-commits --yes --message 'chore: release', I get what it sounds to me like you want in every case I've tested but one. That one is the one you want, but take a look. I'm pretty satisfied with the behavior, aside from this one case.\nI feel compelled to say here. I would be very unhappy using Lerna without independent versioning, and I'm not \"throwing random packages into a single repository and then complaining when I have to version them at the same time.\" I just want my tools to help me communicate accurately with semver instead of giving false alarms that a breaking change has occurred when actually an implementation detail changed.\nSay I have 10 different modules in packages/ without dependency relationships. I make commits on 3 of those modules: a, b, and c:\nIn module a I make a fix commit.\nIn module b I make a feat commit.\nIn module c I make a feat commit with a BREAKING CHANGE.\nModules d - j are unchanged.\nWhen I publish, I get the following:\nModule a gets a new patch version.\nModule b gets a new minor version.\nModule c gets a new major version.\nModules d - j are unchanged.\nSay these modules do have dependency relationships:\nModule d depends on a.\nModule e depends on b.\nModule f depends on c.\nModules g - j are loners.\nWhen I publish with the same changes to a, b, and c, I get the following:\nModule a gets a new patch version.\nModule b gets a new minor version.\nModule c gets a new major version.\nModule d gets a new patch version with a new minimum version for a.\nModule e gets a new patch version with a new minimum version for b.\nModule f gets a new patch version with a new minimum version for c.\nModules g - j are are unchanged.\nAs you mentioned, all this relies on making separate commits. This is the effect you'd get if you were developing directly on master. Which begs the question of pull requests and merges. There are two main cases:\nIf all these changes are completely unrelated tasks that just happen to affect modules in a dependency relationship with each other, you would ideally open separate pull requests. You can rebase, squash, or regular merge. This case is mostly straightforward.\nIf all of these changes were part of a related task, you would prefer to open a single pull request. This case is less straightforward. I get a different result with squash merges than with rebase or regular merges--but rebase and regular merges work as expected.\nWith a rebase or regular merge, module f gets a new patch version\nWith a squash merge, module f can end up a new major version\nIt's debatable whether it should be \"fixed\" and I don't know how feasible it is, but I think there's a case to be made, although I'm too tired to make it at this point. Overall I'm just not totally happy with how squash commits work with publish, even though I prefer them for ease of reasoning about history. Alternative ways of handling them might have too many downsides; I don't have enough context.\nI'll wrap up with how the squash case looks. In my tests, I intentionally didn't write my PR as a conventional commit. I just let it be the name of my branch and used Github's default commit message, which combines the commit messages of all of the squashed commits, like so:\ncommit xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nAuthor: Xxx Xxxxx xxxx@xxxxxx.xxx\nDate:   Xxx Xxx xx xx:xx:xx xxxx -xxxx\nExample/pullrequest (#xx)\n\n* feat(c): breaking change to c\n\nBREAKING CHANGE:\nchanged something in c's API\n\n* feat(b): add feature to b\n\n* fix(a): fix bug in a\n\nThe CHANGELOG for c, b, and a all get this entry:\n\n3.0.0 (xxxx-xx-xx)\n\nExample/pullrequest (#xx) (xxxxxxx)\n\nBREAKING CHANGES\n\n\nchanged something in c's API\n\n\nfeat(b): add feature to b\n\n\nfix(a): fix bug in a\nI'm tempted to think that if a commit looks like this, it'd be nice to provide special support for Github's default format for the purposes of the CHANGELOG, putting aside the matter of how the changes should be bumped. It'd just make it easier to if you were doing conventional commits along the way not to have to edit that default commit and still get a good CHANGELOG.\n\n\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I'm not too tickled about making lerna publish even more complicated, tbh. Improvements to --conventional-commits are welcome, though.. @fabioberger No, anything that requires custom configuration for each CI run is a non-starter. If you want complicated version decisions, use interactive mode.. Every single time package-1 changes, it's going to get a major semver bump? That strikes me as a footgun waiting to happen, and soon.. How does Jenkins determine that value? If it's not automated, that's per-run config that a human has to decide.. I really appreciate your efforts in this PR. The tests are so clean!\n\nIt inspired me to do a deeper refactoring (#1290) that accomplishes the same goal. I will definitely be crediting you in the changelog. Thanks again!. Yes, it is possible to detect if the process was killed via Ctrl+c or another signal. Is it really that valuable, in this context? I'm not so sure, in this context.\n(The linked issue is worth looking into, however). Hah, whoops, I forgot fs.copyFileSync isn't in node 6.x. #707 explains why this is not going to happen. Versions are cheap, basically.. The only way you would get git conflicts in leaf package manifests would be if you're publishing non-canary versions from multiple branches at the same time.\nSimple solution: don't do that.. This is a great bug report, thanks for the detail and repro!\nThis didn't make sense to me at first, but then the coffee kicked in, and it makes total sense. It's painfully clear that our unit tests for this feature aren't sufficient, we should have included an integration test, at the least.\nI have a hunch we might be able to selectively call a particular phase if we pass --ignore-scripts, but I'm not 100% sure. I'll have to dig through npm/yarn source to verify.. I made some progress in https://github.com/lerna/lerna/compare/master...evocateur:lifecycle-running, but it's incomplete.. I don\u2019t suppose your root package.json has a name property? Although, given the nature of the comparison, should probably be defaulting that. A new issue would be appreciated, thanks.\n\nOn Mar 5, 2018, at 03:16, Mike Stead notifications@github.com wrote:\n@evocateur I'm trying out v3.0.0-alpha.3 (looks like that had the fix in it) with the sample project above, and getting the following error now.\nlerna info auto-confirmed\nlerna sill addFiles [ 'lerna-lifecycle-issue/lerna.json' ]\nlerna sill run-lifecycle version undefined\nlerna info lifecycle undefined@undefined~version: undefined@undefined\nlerna-lifecycle-issue/node_modules/npm-lifecycle/index.js:83\n  return wd.lastIndexOf(pkg.name) !== wd.length - pkg.name.length\n                                                           ^\nTypeError: Cannot read property 'length' of undefined\n    at _incorrectWorkingDirectory (lerna-lifecycle-issue/node_modules/npm-lifecycle/index.js:83:60)\n    at lerna-lifecycle-issue/node_modules/npm-lifecycle/index.js:54:42\n    at lerna-lifecycle-issue/node_modules/npm-lifecycle/index.js:186:12\n    at lerna-lifecycle-issue/node_modules/graceful-fs/polyfills.js:287:18\n    at FSReqWrap.oncomplete (fs.js:155:5)\nerror Command failed with exit code 1.\nI can open a new ticket if you prefer?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @mikestead Thanks!. There's literally no way to determine what version to publish without git available. Sorry.. (Not even --cd-version provides that information). Without git to identify which packages have changed, this version bump would be applied to all packages, every single time, regardless of their internal changes.\n\nBasically, \u201cskip git\u201d is a terrible option name, as it does nothing more than skip the git commit and push, just as \u201cskip npm\u201d doesn\u2019t actually prevent all execution of npm/yarn, it just omits the publish command.. --conventional-commits does not support the format that lerna-changelog generates. You would need to find/write a preset for conventional-changelog to get the same output.\nDoes lerna publish --conventional-commits otherwise work? (I use it all the time in fixed mode and it updates the root fine). Your packages array is incorrect, it should be [\"packages/*\"].\n(I'm not sure --skip-git is helping, either)\nAlso, you need to add the new package to git, otherwise lerna has no idea if it has changed (added/modified/deleted) from the previous tag.. Without more context (or a reproduction) I\u2019m not sure I can help any more. I\u2019ve literally never had this problem, across multiple monorepos, with many new packages and such.\n\nOn Mar 1, 2018, at 19:30, kakuyogy notifications@github.com wrote:\n@evocateur i change lerna.json to\n{\n  \"lerna\": \"2.8.0\",\n  \"packages\": [\n    \"packages/\"\n  ],\n  \"commands\": {\n    \"publish\": {\n      \"ignore\": [\n        \"lego-example\"\n      ]\n    }\n  },\n  \"version\": \"independent\",\n  \"npmClient\": \"tnpm\"\n}\nalso miss.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. As I already noted just today in #1293, --skip-git is a misleading option name, as it only skips the commit and push, not all git operations.. It cannot choose the correct packages to publish, thus it is worthless without git.\nOn Mar 1, 2018, at 19:01, vrachels notifications@github.com wrote:\nAnd yet it's still a useful feature/tool without git, and didn't require major changes to get it working.\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.\n. You can\u2019t scope publishes.\nOn Mar 1, 2018, at 19:11, vrachels notifications@github.com wrote:\nEr, It was able to update and publish all packages. I don't see that as worthless. Heavy-handed, perhaps, and not the greatest long term solution, but definitely still useful to our project.\nEspecially with --scope capability, we can manually do (or write our own tooling to do) the only-publish-what-is-updated task.\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.\n. 1. That\u2019s not how lerna publish works.\n\n\nIf you \u201cknow the version\u201d, what\u2019s stopping you from looping through the packages and running npm publish yourself?\n\n\nOn May 14, 2018, at 23:56, Tom Erik St\u00f8wer notifications@github.com wrote:\nThe rejection of this PR seems a bit harsh. I can easily see use cases for this, in cases where in CI git is not available, just the cloned project files. npm is perfectly capable of publishing packages without the presence of git, why not lerna? If I know the version, why can't I simply provide it as an argument? And if the default behavior of lerna is to update all packages, whenever one of them changes (non-independent), this doesn't seem like a far-fetched addition.\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.\n. > if the default behavior of lerna is to update all packages\n\nThis was the quote I was responding to. That's not how lerna publish works.\n\"[Updating] all packages\" is a side-effect of having no existing tags. The \"normal\" publish process depends on git for determining what has changed since the last release (signified by an annotated git tag), and only publishes the packages that have changed since then.. > why there is a --repo-version argument\nLegacy! It just skips the prompt, basically. It isn't very useful beyond that.. Sorry, I don't develop on Windows. If it passes in AppVeyor, I'm not sure that's \"broken\"?. Odd, lerna v2.x should only attempt to publish a given package 5 times. v3 doesn't even bother with that, immediately rejecting the Promise chain. The general error handling/prevention of lerna publish with all of its sharp edge-cases certainly merits attention.\nHistorically, the retries were mostly in-place because the publish order wasn't topographically sorted, causing problems when a dependent was published before an updated dependency.. Ooh, one more reason to remove support for \".\" globs in the packages config.... Nope, it's just a proxy for yarn install, really. The extra flags are only really relevant when not using yarn workspaces, so you can ignore them.. It does exactly what we want the same way npm itself does it, which is a huge win. What native dependency are you referring to?\n. No worries, thanks for clarifying!\n\nOn Mar 3, 2018, at 11:26, wtgtybhertgeghgtwtg notifications@github.com wrote:\nI worded that really poorly and misunderstood the use.\nIt depends on node-gyp and then spawns a process that may or may not use that. But since it doesn't seem to use it itself and just provides it like NPM does, I don't think it'll be a concern outside of really rare edge cases.\nSorry.\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.\n. No, lerna explicitly does not support anything other than multiple package development inside a unitary git repo. In your case I would just use normal package dependencies in each consuming service.. Blowing away ./node_modules would blow away the lerna dev dependency, in your example. That's not ideal.\n\nIn general, lerna clean is ...kinda cheesy? It's not adding anything that git clean -fdx packages can't do, and slower! I don't recommend using lerna clean, tbh.\nClosing as \"wont-fix\" because it's not really a command that serves a useful purpose.. git clean -fdx is way better.. How is \"Remove the node_modules directory from all packages.\" in any way misleading? It does exactly what it says on the tin. The root node_modules is not a lerna-managed package.\nI didn't write the subcommand, nor do I use it day-to-day. I'm fine with removing it, in fact, but I could do without the presumptive accusations of misleading folks.. That's a yarn problem, then.. @hon2a That's certainly fair, I appreciate your persistence in clarifying (I think I missed the --hoist context, sorry).. lerna clean is such a redundant command, though. lerna exec -- rm -rf node_modules does the exact same thing, except faster.\nChain that with npm ci && npx lerna bootstrap and you\u2019re done. Use relative file specifiers, like lerna itself does, and all it takes is npm ci to reset everything (no lerna exec or bootstrap required).\nOption 2 is heroically out of scope for lerna, I\u2019d rather let package managers manage packages.\n\nOn Jul 7, 2018, at 06:10, Robert Saunders notifications@github.com wrote:\nI totally agree with @hon2a, working locally it is sometimes nice to clean out your node_modules directories and do a fresh install if you are running into some strange NPM issues. When running --hoist packages do get installed at the root and as a result the lerna clean command sort of breaks down and becomes less useful. To your point @evocateur, removing the root node_modules would remove your lerna dev dependancy (assuming you aren't using a globally installed version) which also isn't great. I think we have a couple of options here:\nUpdate the documentation to reflect this as a side effect of using --hoist.\nWhen using lerna clean remove any hoisted modules from the root node_modules folder.\nI'm not sure what the feasibility of the second option is but if we can discuss here about a possible solution I might be able to find time to put up a PR.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I'm pretty sure lerna v3.0.0-alpha.3 (lerna@next) supports this accurately. Would you mind testing that?. @compulim Thanks for checking!. lerna bootstrap when you're using Yarn workspaces is literally redundant? All lerna bootstrap --npm-client yarn --use-workspaces (CLI equivalent of your lerna.json config) does is call yarn install in the root. With a postinstall that calls lerna bootstrap again, it's just going further down the infinitely recursive rabbit-hole.\n\nShould we throw an error when people try lerna bootstrap --npm-client yarn --use-workspaces, telling them \"just use yarn\"?. That sounds like a yarn workspaces problem, then. Lerna is literally doing nothing special when you run bootstrap with workspaces enabled.. > I just tried it but it doesn't look like it resolves sibling packages. This is evident when you do testing for example.\nLiterally no context, example, etc etc etc. What \"it\" were you referring to?\n\nI think there is a difference of opinion there.\n\n899 (written by one of the yarn maintainers) disagrees with you.\nBootstrap has nothing at all to do with publishing. Lifecycles like prepublish, prepare, etc are all run by the npm client doing the publishing, not lerna (we only run a synthetic version lifecycle). If you're using yarn to bootstrap and publish, that's on yarn to fix their shit. npm does perfectly fine with lerna publish's responsibilities.\nIf lerna is calling yarn incorrectly, that's something we can fix. So far I have seen no evidence of this, however.. Closing as a duplicate of #1125. As I indicated here, I'm open to cosmiconfig replacing our hand-rolled solution.\nOne problem with a --config option is that we currently use the location of lerna.json as the \"logical root\" of the monorepo (to support those who want other things in the \"actual root\", where .git lives).\nAnother problem is where to store the current lerna version (in the default \"fixed\" versioning mode). Even independent mode still needs the lerna.json \"version\" field as a sentinel value.. @KingScooty Whoops, no, the gitHead is only meant to be present during npm publish, and not part of the git commit. gitHead is literally the revision just created, so it's kinda redundant, and only used for registry metadata. The working tree is always intended to be \"clean\" after lerna publish.\nThanks for the bug report! It looks like a pretty easy fix, just gotta move the annotateGitHead() call inside the right conditional.\nOf course, the deeper issue is that we're blocking certain git operations when we \"skip npm\", which isn't ideal...\n. Fixed in v3.0.0-beta.9 \ud83c\udf89 . I could have sworn that was already the case, but of course you\u2019re right. I almost hit this very bug in lerna itself yesterday when I published the first beta of lerna 3.0. Definitely not the intention of lerna to overwrite a leaf package publishConfig.. Short term plans for lerna 3:\n1. make --reject-cycles the default\n2. emphasize local file: specifiers, deprecate lerna bootstrap\n3. probably remove lerna link, as it's redundant(?)\n    - if you want everything always linked, just use local file: specifiers + npm install\nThe reason it currently doesn't respect that option is (mostly) because it's not doing any topographical sorting, which is where that analysis occurs. lerna link is simply blazing through the list of packages and symlinking willy-nilly.\nIs there any particular reason you're not using lerna bootstrap --reject-cycles?. If you\u2019re using yarn, why not use workspaces? It completely replaces bootstrap as well, with only minor config duplication.\n(I\u2019m pretty much ignoring yarn as much as possible right now, been bitten by too many edge-cases ...such as this one!)\n\nOn Mar 7, 2018, at 19:06, Adam Miller notifications@github.com wrote:\nSo, fun fact, as of npm/npm#15900, Yarn@1.5 and NPM@5 now have different behavior for the file: specifier. It appears yarn has no intention at this time of changing the behavior of file:. yarnpkg/yarn#4212\nBut! Yarn has the new link: dependency type with the same behavior as NPM's file:! yarnpkg/yarn#3359 The day is saved!...\nAlmost \ud83d\ude2cLerna appears to use node-pakage-arg under the hood (as of 3.0.0 at least) to parse dependency values, which does not implement Yarn's special link: dependency: https://github.com/lerna/lerna/blob/master/core/package-graph/index.js#L73\nSo, right now, Lerna just dies with an Error: Unsupported URL Type \"link:\" when you try and use Yarn's link: specifier.\nUnfortunately, you can't just use the file: specifier with Yarn right now either. As of yarn@1.5.1, when you yarn install in a workspace enabled project, with file: specifiers in your workspaces' dependencies, it will both symlink the modules into the project root, and copy a local version into the workspaces' node_modules.\nThis breaks Lerna, because as Lerna crawls the package graph and builds / tests each package in succession, the local module installed in each workspace's node_modules does not update with the built files (remember, no symlink), and all builds after the first layer in the package graph fail because it doesn't have access to the built output.\nSo, until Yarn either\nYarn adopt's NPM's file: specifier behavior, or;\nYarn fixes the existing bugs when using file: in a workspace enabled project, or;\nLerna provide support for yarn's link: specifier by replacing node-pakage-arg with something else, or by rewriting link: => file: it before passing it to node-pakage-arg\nthen Lerna will not work with local dependency references in Yarn \ud83d\ude22 (its been a long day)\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @amiller-gh I think that's a reasonable approach, given the hard-failure with the current setup. The depVal will always be there, it's not dependent on the presence of depNode.\n\nI'll probably go with this:\n```diff\ndiff --git a/core/package-graph/index.js b/core/package-graph/index.js\nindex 589338bb..12508375 100644\n--- a/core/package-graph/index.js\n+++ b/core/package-graph/index.js\n@@ -70,7 +70,11 @@ class PackageGraph extends Map {\n   Object.keys(graphDependencies).forEach(depName => {\n     const depNode = this.get(depName);\n\n\nconst resolved = npa.resolve(depName, graphDependencies[depName], currentNode.location);\n// Yarn decided to ignore https://github.com/npm/npm/pull/15900 and implemented \"link:\"\n// As they apparently have no intention of being compatible, we have to do it for them.\n// @see https://github.com/yarnpkg/yarn/issues/4212\nconst spec = graphDependencies[depName].replace(/^link:/, \"file:\");\nconst resolved = npa.resolve(depName, spec, currentNode.location); if (!depNode) {\n   // it's an external dependency, store the resolution and bail\n\n```\n\n\nThanks for all the detailed analysis!. Yep! Just added a test to verify :)\n```diff\ndiff --git a/commands/fixtures/yarn-link-spec/.yarnrc b/commands/fixtures/yarn-link-spec/.yarnrc\nnew file mode 100644\nindex 00000000..19daacaa\n--- /dev/null\n+++ b/commands/fixtures/yarn-link-spec/.yarnrc\n@@ -0,0 +1 @@\n+workspaces-experimental true\ndiff --git a/commands/fixtures/yarn-link-spec/lerna.json b/commands/fixtures/yarn-link-spec/lerna.json\nnew file mode 100644\nindex 00000000..cbf807a5\n--- /dev/null\n+++ b/commands/fixtures/yarn-link-spec/lerna.json\n@@ -0,0 +1,5 @@\n+{\n+  \"version\": \"1.0.0\",\n+  \"npmClient\": \"yarn\",\n+  \"useWorkspaces\": true\n+}\ndiff --git a/commands/fixtures/yarn-link-spec/package.json b/commands/fixtures/yarn-link-spec/package.json\nnew file mode 100644\nindex 00000000..707937ab\n--- /dev/null\n+++ b/commands/fixtures/yarn-link-spec/package.json\n@@ -0,0 +1,7 @@\n+{\n+  \"name\": \"yarn-link-spec\",\n+  \"private\": true,\n+  \"workspaces\": [\n+    \"workspaces/*\"\n+  ]\n+}\ndiff --git a/commands/fixtures/yarn-link-spec/workspaces/package-1/package.json b/commands/fixtures/yarn-link-spec/workspaces/package-1/package.json\nnew file mode 100644\nindex 00000000..8eb2fba2\n--- /dev/null\n+++ b/commands/fixtures/yarn-link-spec/workspaces/package-1/package.json\n@@ -0,0 +1,4 @@\n+{\n+  \"name\": \"package-1\",\n+  \"version\": \"1.0.0\"\n+}\ndiff --git a/commands/fixtures/yarn-link-spec/workspaces/package-2/package.json b/commands/fixtures/yarn-link-spec/workspaces/package-2/package.json\nnew file mode 100644\nindex 00000000..0e6aefb9\n--- /dev/null\n+++ b/commands/fixtures/yarn-link-spec/workspaces/package-2/package.json\n@@ -0,0 +1,7 @@\n+{\n+  \"name\": \"package-2\",\n+  \"version\": \"1.0.0\",\n+  \"dependencies\": {\n+    \"package-1\": \"link:../package-1\"\n+  }\n+}\ndiff --git a/commands/publish/tests/publish-command.test.js b/commands/publish/tests/publish-command.test.js\nindex b49cc699..1b710339 100644\n--- a/commands/publish/tests/publish-command.test.js\n+++ b/commands/publish/tests/publish-command.test.js\n@@ -1204,6 +1204,16 @@ describe(\"PublishCommand\", () => {\n         \"package-6\": \"6.0.0\",\n       });\n     });\n+\n+    it(\"works around npm-incompatible link: specifiers\", async () => {\n+      const testDir = await initFixture(\"yarn-link-spec\");\n+\n+      await lernaPublish(testDir)(\"--cd-version\", \"major\", \"--yes\");\n+\n+      expect(updatedPackageJSON(\"package-2\").dependencies).toMatchObject({\n+        \"package-1\": \"^2.0.0\",\n+      });\n+    });\n   });\ndescribe(\"in a cyclical repo\", () => {\ndiff --git a/core/package-graph/index.js b/core/package-graph/index.js\nindex 589338bb..12508375 100644\n--- a/core/package-graph/index.js\n+++ b/core/package-graph/index.js\n@@ -70,7 +70,11 @@ class PackageGraph extends Map {\n   Object.keys(graphDependencies).forEach(depName => {\n     const depNode = this.get(depName);\n\n\nconst resolved = npa.resolve(depName, graphDependencies[depName], currentNode.location);\n// Yarn decided to ignore https://github.com/npm/npm/pull/15900 and implemented \"link:\"\n// As they apparently have no intention of being compatible, we have to do it for them.\n// @see https://github.com/yarnpkg/yarn/issues/4212\nconst spec = graphDependencies[depName].replace(/^link:/, \"file:\");\nconst resolved = npa.resolve(depName, spec, currentNode.location); if (!depNode) {\n   // it's an external dependency, store the resolution and bail\n\n``. https://github.com/lerna/lerna/commit/ddfb517ab9a061876378a925467b60c8abf17534. You need to passtrue` for the value of the \u201crejectCycles\u201d key. (This option will soon be inverted, making it reject cycles by default)\n\n\n\nOn Apr 12, 2018, at 00:43, Vitali Zaidman notifications@github.com wrote:\ncan i use this in \"lerna.json\"?\nthis does not seem to work (loglevel works):\n{\n  \"lerna\": \"2.9.0\",\n  \"version\": \"2.0.0\",\n  \"packages\": [\n    \"packages/*\"\n  ],\n  \"command\": {\n    \"bootstrap\": {\n      \"loglevel\": \"verbose\",\n      \"reject-cycles\": \"\"\n    }\n  }\n}\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. https://github.com/lerna/lerna/releases/tag/v2.9.0\n\nI got tired of the manual steps required to update both the versioned file and the github release, sorry. At some point in the near future, I will probably move all changelogs to Github Releases (e.g., when implementing automated publishing via semantic-release).. Definitely!. @mishaor You got it, thanks!. Unit tests should be feasible with this sort of change. The loggingOutput() helper makes this pretty trivial.\n```js\nawait lernaPublish(testDir)(\"--skip-git\", \"--skip-npm\");\nconst logMessages = loggingOutput(\"info\");\nexpect(logMessages).toContain(\"Skipping git...\");\nexpect(logMessages).toContain(\"Skipping npm...\");\n``. If you open a PR the CI tests will run, and I can show you how to fix them.. #1319 fixed this. Yourci:testexample would benefit from aligned labels, but I'm not sure it's generalizable to alllerna run --parallelexecutions. I would recommend running all the tests from the root, instead.. By \"from the root\" I mean one call tojest(for example) that runs all the tests that it can find underpackages/**` (or wherever your leaf packages are), not executing an npm script in every leaf package.\n--parallel isn't really meant to be especially readable, it's just prefixed so stdio logging doesn't lose all context. Interleaved output is messy.\nlerna run --concurrency 100 would log in package-specific chunks (not prefixed, but identified by npm run output), while still running nearly in parallel. Although that option does sorta mangle the newlines and color output, so not ideal either.. > Would you be open to a command-line flag to enable it?\nYes, that sounds fair. --aligned, perhaps?. This sounds like a git problem, not a lerna problem. How is this related to lerna?. git add packages/my-new-package should be sufficient.. Just adding an empty directory won't actually add anything to git. You need to have files in the directory for git to add it to the index (and then the commit).\nmkdir packages/foo\ncd packages/foo\nnpm init --yes\ncd ../..\ngit add packages/foo\ngit commit -m \"feat: add packages/foo\". A pull at that moment has the potential to leave the tree in a severely conflicted state, and in situations (CI) where the resolution is not possible or straightforward.\n\nOn Mar 19, 2018, at 03:23, Victor Alloza notifications@github.com wrote:\nIt is still possible that during the publish to npm, changes are added to the remote; which would make the git push fail.\nMaybe I'm saying something stupid but, would git pull right before GitUtilities.pushWithTags solve the issue? Maybe there is a reason that I can't think of not to do that.\nI could open a PR with the changes if approved.\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.\n. > Not being able to push also leaves the remote in a conflicted state with npm registry\n\nThis is a fundamental problem with making commits in CI (which I generally dislike for this and other reasons). This is why semantic-release only adds tags, for example. We can probably come up with a better solution for this sort of thing.. useWorkspaces was only ever intended for yarn, setting npmClient \u201cnpm\u201d should be an error in that context. You should pick one or the other, otherwise your lockfiles will be out of sync.. \u201cworkspaces\u201d is owned by yarn right now, they\u2019ve already broken the format once, and I\u2019d rather not be coupled to an external config namespace (any more than we already are). If you\u2019re using npm, you don\u2019t need the workspaces config; if you\u2019re using yarn, you don\u2019t need the lerna.json \u201cpackages\u201d config (assuming \u201cuseWorkspaces\u201d: true is set at the root level).\n\nOn Mar 13, 2018, at 08:19, aholtkamp notifications@github.com wrote:\nHm...this was not explicitly stated in the documentation (or I might have missed something). The missing error leads to the assumption that this is just a bug. Everything else works fine in that constellation, \"lerna run\" delegates to the inner packages, even the \"lerna clean\" takes the sub packages into account again.\nIf changing this is no possibility, what about a \"useWorkspacesEntry\" configuration that just controls where the information is retrieved from (defaults to: useWorkspaces, if true use packageJson.workspaces and fallback to lernaJson.packages otherwise just use lernaJson.packages)?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Oh, and you might want to run npm run ci locally, just to make sure no integration test snapshots need updating. npm run integration -- -u will update the snapshots, if needed.. @mishaor I went ahead and made the edits I suggested, thanks so much for making the initial effort!. Please do! We've got lots of opportunities :). When using npm, the default user config is ~/.npmrc, not .cnpmrc.. I fail to understand why this lerna exec is even necessary? Literally half of lerna is devoted to publishing packages directly with full registry support.\nOn Nov 6, 2018, at 16:57, Laurie Jones notifications@github.com wrote:\nI am struggling through this at the moment trying to publish packages from CI. Is there no way to reference an .npmrc file in the project root rather than add one in each package?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. As I (or someone at my company) do that literally every day, this is news to me.\nOn Nov 6, 2018, at 17:37, Laurie Jones notifications@github.com wrote:\nFrom what I've read and experimented with, lerna publish does not support publishing private, scoped packages?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Well, okay, clearly the access config isn't necessary for private scoped packages, the docs are trying to address a far more common case (and not the default for scoped packages on the public registry).\nOn Nov 6, 2018, at 19:08, Jude notifications@github.com wrote:\nLerna will never publish packages which are marked as private (\"private\": true in the package.json).\nI was also confused about this suggestion, then I tried just publishing scoped packages without the public settings, and it just worked\ud83e\udd29\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. The publishConfig is correct. I don't recommend publishing from lerna exec. And you shouldn't need to pass from-package unless a previous lerna publish errored after the commit and tag were pushed.. One solution that works quite well (with npm) is relative file: specifiers between leaf packages and npm i packages/* in the root. lerna >=3.0.0-alpha.0 (npm i -D lerna@next) supports this seamlessly, resolving relative paths to the correct version range during publish. It works so well, this very repository itself does it.\n\nSymlink approaches like the one you describe have been considered before, many times. They almost always fail because it is too fiddly, has too many edge-cases, and has unintended side-effects with package managers.. Yeah, relative file specifiers completely replace lerna bootstrap with npm install in the root. Conflicting majors of dependencies should automatically nest under the leaf directory as a \u201cbundled\u201d dependency; otherwise dependencies are hoisted naturally.\nI personally consider sibling packages in a monorepo that have conflicting majors of a dependency to be a bug. They are related, after all, else why bother putting them in the monorepo in the first place?. There\u2019s no shame in developing npm packages \u201cthe old-fashioned way\u201d in their own repositories. npm link isn\u2019t terrible, nor is it always required (if the packages are truly independent, that is).\nYou\u2019re gonna have a bad time when your \u201ctruly independent\u201d modules want to version at the same time; despite choosing (potentially) different semver bumps, they are nevertheless coupled to the notion of \u201cI am ready for a release at this revision\u201d. A multi-package repository should not be a grab-bag for random packages. Lerna\u2019s goals do not include \u201creduce the number of git clones on my hard drive\u201d.\n\nOn Mar 22, 2018, at 08:41, Netanel Gilad notifications@github.com wrote:\nI personally consider sibling packages in a monorepo that have conflicting majors of a dependency to be a bug. They are related, after all, else why bother putting them in the monorepo in the first place?\nInteresting. Do you consider that as a design principle of lerna? It could be that my wanted use case is outside the scope of how lerna sees monorepos. For me, I see a monorepo as a tool to develop independent (not only version independent) packages along side each other for ease of development (no need to constantly yarn/npm link them) and easily publish those packages. But my emphasis was on independent, so that if one package should one day become it's own repo, I can just pluck that package out of the monorepo into it's own repo, and no other changes are needed, and the monorepo doesn't enforce any restrictions on the packages that it contains.\nYou gave me some food for thought, and maybe my need is for a different kind of tool (smells like a weekend project \ud83d\ude04), though I, personally, am not for fragmenting the JS community even more. If you feel this is out of scope, feel free to close this issue, otherwise I'd be happy to dive deeper.\nCheers @evocateur \ud83c\udf7b\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @Vunovati Thanks for the fix!. @Vunovati Sorry, meant to release it yesterday. Just published v3.0.0-beta.3, thanks again for the contribution!. I would just skip lerna bootstrap completely. Use relative file: specifiers between your dependencies, npm i packages/* in the root, and call npm ci* directly. Lerna itself does exactly this.\n\n* Caveat:\nUntil npm 5.8.0 becomes latest, there is a bug in npm ci that mangles local file: directory package.jsons. Installing either npm@next or cipm (and running it instead of npm ci) will workaround this problem for the time being.. Nope, the file: specifiers are overwritten with the current version range during lerna publish, so they're fully-functional npm packages that you treat like any other when consuming. (The versioned source code always preserves the file: specifiers)\nCompare @lerna/cli's dependencies:\nsource:\n\"dependencies\": {\n    \"@lerna/add\": \"file:../../commands/add\",\n    \"@lerna/bootstrap\": \"file:../../commands/bootstrap\",\n    \"@lerna/changed\": \"file:../../commands/changed\",\n    \"@lerna/clean\": \"file:../../commands/clean\",\n    \"@lerna/diff\": \"file:../../commands/diff\",\n    \"@lerna/exec\": \"file:../../commands/exec\",\n    \"@lerna/global-options\": \"file:../global-options\",\n    \"@lerna/import\": \"file:../../commands/import\",\n    \"@lerna/init\": \"file:../../commands/init\",\n    \"@lerna/link\": \"file:../../commands/link\",\n    \"@lerna/list\": \"file:../../commands/list\",\n    \"@lerna/publish\": \"file:../../commands/publish\",\n    \"@lerna/run\": \"file:../../commands/run\",\n    \"dedent\": \"^0.7.0\",\n    \"is-ci\": \"^1.0.10\",\n    \"npmlog\": \"^4.1.2\",\n    \"yargs\": \"^11.0.0\"\n  }\nnpm v --json @lerna/cli dependencies:\n{\n  \"@lerna/add\": \"^3.0.0-beta.3\",\n  \"@lerna/bootstrap\": \"^3.0.0-beta.3\",\n  \"@lerna/changed\": \"^3.0.0-beta.3\",\n  \"@lerna/clean\": \"^3.0.0-beta.3\",\n  \"@lerna/diff\": \"^3.0.0-beta.3\",\n  \"@lerna/exec\": \"^3.0.0-beta.3\",\n  \"@lerna/global-options\": \"^3.0.0-beta.3\",\n  \"@lerna/import\": \"^3.0.0-beta.3\",\n  \"@lerna/init\": \"^3.0.0-beta.3\",\n  \"@lerna/link\": \"^3.0.0-beta.3\",\n  \"@lerna/list\": \"^3.0.0-beta.3\",\n  \"@lerna/publish\": \"^3.0.0-beta.3\",\n  \"@lerna/run\": \"^3.0.0-beta.3\",\n  \"dedent\": \"^0.7.0\",\n  \"is-ci\": \"^1.0.10\",\n  \"npmlog\": \"^4.1.2\",\n  \"yargs\": \"^11.0.0\"\n}. > the binaries are not located for each file, so scripts are failing\nDo you have a specific example? In most cases this is a dev script that should be moved to the root anyway. No leaf devDependencies are installed when relative file specifiers are used in the root.. Move all the devDependencies to the root package.json.. @reggi I need an actual example to debug, I have no (possible) answer other than \"works on my repo\". Local file: dependencies should show up as symlinks under the root node_modules, otherwise they're being clobbered by other dependencies.\nYou also need all of the leaf packages to specify their sibling dependencies as relative file: specifiers; if they are caret versions (like lerna bootstrap --hoist needs) they will fail because they're installing from npm.. Correct, this pattern is npm5 only.. There are no PRs yet, if that\u2019s what you mean.\n\nOn Mar 22, 2018, at 19:32, Jeremiah Hall notifications@github.com wrote:\nFor repos with a large number of entries in lerna.json's packages configuration, this approach is complicated. Is there really no desire to make it possible to use npm ci instead of install?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @RobertWSaunders Yes, thanks!. No, but you can't --hoist if you're running npm ci, it's trying to install a bunch of hoisted dependencies in the root first. Not sure why you need the --unsafe-perm?. What version of lerna?. @chriseppstein Thanks, I'll check it out. Could have sworn the test coverage was decent on this score, but it isn't the first time the tests turned out to be misleading.... Published the fix in v3.0.0-beta.4. @DavideDaniel I have fun with commit messages that I know I'm squashing anyway.\n\nThe loc argument does need to match an existing package root location (default ./packages), so if it's outside of those configured directories, it probably won't work. There is likely room for improvement on the messaging, in this context.. @darrenjennings Yeah, it probably should be documented somewhere. There's a lot of documentation TODOs right now, which is among the largest pieces of work remaining before 3.0.0 leaves beta.. lerna link isn't necessary if you're doing lerna bootstrap --hoist (it's not doing the same thing as npm link, for one starters). lerna link is only symlinking local dependencies together, it's a weird workaround for people who didn't want to bootstrap correctly. With lerna 3, I would just use the relative file: specifiers and ignore lerna bootstrap and lerna link.\nIf you only have one CLI that you want to link, you could npm link it from the root bin. Lerna does it this way: https://github.com/lerna/lerna/blob/14fcc1b5646c13b6fd03259553f68d5d1af70788/package.json#L20-L22. Yes, but the sibling relative file: spec generally only needs one .., like file:../my-neighbor.\n\nOn Apr 16, 2018, at 04:31, Viktor Dzundza notifications@github.com wrote:\n@evocateur Did you mean that we can use npm i packages/* when set deps to file:../packages/ ?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. This is a duplicate of #707, #718, #1291, and several others. If you don't want component changes to bump the component library(?) it shouldn't be a monorepo.. Instead of --scope=pkg-*, just put \"private\": true in the app package.json files. Don't use 'latest' to point to a monorepo sibling, that breaks the relationship that lerna can see, and thus the versions never get updated. Apparently this is a now pattern? Huh.\n\nnow is charmingly obtuse about what they're actually doing when deploying, but if at some point it's just creating a webpack bundle and then uploading that, you should be fine to use local file: specifiers in the app manifests. If they're actually calling npm install on their hosted thingy, well, that's less workable.\nI have said before, and I'll say again, lerna is not for deploying applications. I don't really see this sort of thing making it into the CLI.. Yeah, I didn\u2019t mean the service itself was obtuse/bad, I actually quite like the pattern of \u201cone-click deploy\u201d where it makes sense. It is reassuring that they\u2019re just calling standard npm commands.\n\nOn Mar 20, 2018, at 07:52, Sean Connolly notifications@github.com wrote:\ncharmingly obtuse\nI chuckled at that.\nThanks for the tip with \"private: true\". now simply runs npm install, npm build and npm start for their npm deployments. I don't think its that obtuse and it works well for single apps, but it is restrictive and does not presently work well for multi-application deployments.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. When using Yarn workspaces, lerna bootstrap --hoist has literally no effect whatsoever, as all it does is run yarn install in the root. lerna link is a silly command, and I'm increasingly itching to delete it (and it's also not going to help you here, because you're not using lerna's linking algorithm, but yarn's).\n\nOne notable difference in the Yarn workspaces linking algorithm is that it does not bother with relative symlinks from packages/foo to packages/bar/node_modules, it just \"hoists\" all the packages/* (via symlink) in to the root node_modules, with appropriate scope directories as necessary. That means every leaf package can resolve every other leaf package, should it desire. (It's up to tools like eslint-plugin-import to validate which packages are actually listed in the closest package.json, etc)\nSo yes, I think this is a Yarn bug. That being said, I don't think having local dependencies (the leaf packages) that are identical to external package dependencies is helping anything.. Well, no? I can\u2019t fix \u201cdoesn\u2019t work\u201d without reproducible examples.\n\nOn Apr 16, 2018, at 05:15, Viktor Dzundza notifications@github.com wrote:\n@evocateur I see that even link --force-local doesn't work. Is that expected behaviour?\nExecutable    Version\nlerna --version   3.0.0-beta.17\nnpm --version 5.6.0\nyarn --version    VERSION\nnode --version    v9.11.1\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. * Your lerna.json's version property (which is 0.0.0 in the example) needs to match the version of the leaf packages, which are 3.0.0 in your posted examples.\n* The sibling dependency ranges cannot be expressed as >=0.0.0, they need to be ^3.0.0 (the caret range of the sibling version).\n    * \"@myorganization/ux\": \">=0.0.0\", => \"@myorganization/ux\": \"^3.0.0\",\n\nYarn is in fact different than npm. . > Is there any docs on thats differences?\nWell, I mean, lerna bootstrap --npm-client yarn --use-workspaces calls yarn install in the root (using yarn's largely-undocumented linking algorithm), and lerna bootstrap --hoist uses npm, using lerna's custom linking algorithm. I explained above why your examples were failing to link as expected.\nhttps://yarnpkg.com/en/docs/workspaces. The file: specifiers are overwritten during publish, resolved to the actual version range of the sibling package. If there are no changes in a package, lerna doesn't publish it. If there are changes in a local dependency of a package, that consuming package will also be published, since its local dependency version range has changed.. @AnaRobynn If the unchanged package has sibling dependencies that have changed (since the last tag), it will always publish a new version of the unchanged package as well (because versions are cheap, see #707).\nIf there are no changes (in package directories) in the entire repository since the last tag, lerna publish should exit early without any prompting or changes made.. > Does commands also add a gitHead property in my package.json, is that standard behavior?\nThe gitHead is only meant to be temporary during the execution of npm publish, \nthe latest 3.x beta has a fix for this (npx lerna@next ...). It is something that npm itself adds temporarily during publish, but lerna has to adapt it because the core method does not work when .git/ isn't in the CWD.\nA demo repo would be much easier to explain than talking past each other.. Why is the aliasing necessary? I've never used it myself, and with lerna packages, they're just \"normal\" npm packages from the perspective of babel/webpack.. I use dozens of lerna-based monorepos with babel-transpiled Webpack builds and I have never felt the need for a babel alias. import api from \"../../../Utils/api\"; is a code-smell that you should extract that file into a local lerna package, which makes it import api from \"@scope/api\";, far superior to any obfuscating alias.. I don't see this as a lerna bug, to be blunt. Inside a lerna-managed package, you should never be importing a relative path \"above\" your leaf package root (packages/my-package/), and we shouldn't be enabling footguns like this just to save some typing.. Yeah, the same problem exists for file:-hoisted trees as well. I'm almost done implementing lerna create; alongside the current lerna add I was envisioning lerna upgrade, lerna remove and lerna outdated.\nRecent refactoring has made figuring out the \"external\" dependencies of a given leaf package fairly straightforward. From there, we need to do two things per-dependency: figure out the version currently installed, and make request(s) to figure out wanted/latest (using either pacote or package-json). Then we knit them back together (when outdated) for the output.\nLots of overlap between the proposed implementation of lerna outdated and lerna upgrade (indeed, npm update itself currently uses npm outdated behind the scenes). Realistically, these new commands won't be implemented before lerna v3 gets out of beta, but they are definitely on the roadmap.. Sorry, haven't gotten around to it. Might as well reopen this to track it.. Is your root package also published? (I don't recommend that, btw)\nIf it's never published (i.e., \"private\": true in package.json), the version number is irrelevant, and you can just use a local file: specifier:\n\"devDependencies\": {\n    \"@my-namespace/my-tool\": \"file:packages/my-tool\"\n  },\nThis is how lerna itself provides private test helpers to all of the published packages: https://github.com/lerna/lerna/blob/master/package.json#L27-L48. Oh, that is useful information, since file: specifiers act differently in yarn vs npm (which is what lerna itself uses).\nInstead of adding a dependency on the leaf package to the root package, why not just call the leaf CLI directly? It's okay to hard-code \"internal\" paths, as you are in the same repo after all. It's on yarn to execute the proper script lifecycles that do the tranpsiling, etc.\n\"scripts\": {\n    \"docs\": \"./packages/my-tool/bin/my-tool\"\n  }\n(or whatever path the executable binary lives at). Any particular reason you're using an ancient version of node 6? Also, what version of lerna?. Ah, fair enough. packages/package-c/package.json contains a name property? How is the dependency on package-c specified in package-a?. What config is triggering this? Does the github issue template no longer include <!-- Please paste your lerna.json here -->?. Nevermind, I got a repro. The test snapshot isn't exactly clear. :/. Nope, just dealing with publish issues because I forgot a flag \ud83d\ude2d. I could have sworn #1254 covered this...\nReading the blog post, both fields (packages and nohoist) are expected to be arrays:\n// flow type definition:\nexport type WorkspacesConfig = {\n  packages?: Array<string>,\n  nohoist?: Array<string>,\n};\nSo I guess it's fair for lerna to do some bare-minimum validation that yes, this property is an Array, and throw an error otherwise. Beyond that, I'd say this is yarn's responsibility to validate.. So you're trying to exec something in some-package, but only if it has changed compared to an upstream ref? Or always in some-package, regardless of changes? I'm a bit confused, since the former case is the current behaviour, and the latter can be accomplished by just removing --since.\nAs for extending the filtered packages, there is --include-filtered-dependencies, which will re-add packages that were filtered out by --since if they are transitive dependencies of packages matched by --since. I don't think it really makes sense to have --scope extend the results of --since, but I could be wrong.. Ooh, I bet the (horrifically-named) --force-publish flag might be what you're looking for, instead of --scope? It seems to do the trick in my local testing:\n```\n$ lerna exec --since master --scope unchanged-pkg -- echo \\$LERNA_PACKAGE_NAME\nchanged-pkg\n$ lerna exec --since master --force-publish unchanged-pkg -- echo \\$LERNA_PACKAGE_NAME\nchanged-pkg\nunchanged-pkg\n```\nIt's not really documented anywhere, and it really should be named --force. It's a very complex option, allowing for boolean, string, or a list of string arguments (the strings are globs, just like scope/ignore).\nbash\n--force-publish # equivalent to \"*\", which is all packages\n--force-publish=*\n--force-publish=foo\n--force-publish=foo,bar # equivalent to the next line\n--force-publish foo --force-publish bar. I think --force is a better description of what it is doing, and only applicable in the context of --since. It's such an extreme edge case to scope --since, I'm almost tempted to make them exclusive options. Either you're filtering packages with changes since <ref>, or you're filtering packages by name globs.\nWe expect --since <ref> --scope <pkg> to be a no-op if <pkg> has not changed since <ref>, which seems a reasonable expectation given the semantics of the flags. --scope <pkg> --force <pkg> doesn't make sense.. You're forcing the argument (a glob) to also be included in the filtered packages, regardless of other constraints. This is an edge case.. Note that you're using yarn to publish, so the only expectation is that yarn reads the local .npmrc properly, not lerna.\nThat being said, consider that yarn publish (or npm publish, for that matter) is being executed with a CWD of the leaf package directory (packages/foo), not the lerna root (usually the repository root). Right now, you'll probably need to workaround this by setting environment variables (NPM_TOKEN, and possibly NPM_CONFIG_OTP if you need a one-time password).. Yeah, that is a bit weird. lerna bootstrap --hoist --npm-client yarn is definitely not intended to be valid, as yarn has several issues with concurrency that lerna's hoisting algorithm exposes quite painfully.\nI'm increasingly convinced that lerna add shouldn't be automatically chaining lerna bootstrap. It's really not that hard to do oneself, and it's not even desirable when calling lerna add several times in sequence.\nIn any case, it's also weird that lerna add is accepting options only valid for lerna bootstrap, and that should definitely stop. If chaining bootstrap is desirable, it should be limited to the command itself (along with durable \"commands.bootstrap\" config from lerna.json, if any), not consuming lerna add's argv.. yarn install with workspaces enabled completely replaces lerna bootstrap --hoist. Any warnings desired in that context is a yarn issue.\nnpm with relative file: specifiers (how lerna itself uses it) also completely replaces lerna bootstrap --hoist, with a completely package-locked tree and lightning-fast npm ci. You have to move devDependencies to the root (they aren't installed otherwise), but that should've been the case already in a monorepo.. The root package.json of a monorepo should be responsible for the monorepo (coordinating repetitive test/build/linting hoisted from the leaves), not a \"leaf\" package that it governs. In other words, publishing the root of a monorepo is violating a separation of concerns.\nThe fact that it's possible to do so in lerna today is the result of an API design mistake.. lerna ls will give you the package names pretty quickly, no need for manual inspection. It even has JSON output for programmatic munging.\n(Tangential: I really don't like the names --scope and --ignore, tbh. They should be named --include and --exclude)\n. Why can't the scripts be run from the root?\nI'm not a fan of this change, tbh. It's trivial to export the env var yourself when calling lerna run:\n\"scripts\": {\n  \"lint\": \"LERNA_ROOT_PATH=`pwd` lerna run ts-lint\"\n}. You... --force-publish everything on every release? That's, uh, interesting.\nNotably, you're using yarn to publish, so this isn't necessarily an npm bug. Who knows what demons lurk in the yarn codebase. In my experience, there are harsh edge-cases with yarn.. Yes. npm publish has a lot of battle-tested code in it, whereas yarn publish is in many ways less mature, despite copious test coverage. There are even some edge cases where incompatible decisions were made by the yarn team, so it's hard to say exactly where the issue lies.. Lerna is only able to read the exit code of the CLI it calls to publish (npm or yarn), so I\u2019m not really sure what lerna\u2019s responsibility is here, other than calling the binaries with the correct arguments.. You're deleting the tag, so lerna has literally no idea what the diff from the \"last release\" was. (Squashing would mangle the tag anyway)\nWhy not wait until the PR is merged to publish? I don't understand encumbering the developer with lerna publish --skip-npm. If you're using --conventional-commits, the process is quite automated. I don't recommend publishing from feature branches at all.. You can manually edit B's package.json to depend on \"A\": \"^1.0.0\" (if A was bumped to 2.0.0), and it will install the old version.\nHowever, this does mean that during development, until resolved, A and B are no longer linked, so any \"parallel\" development won't actually be parallel. Part of the advantage of a monorepo is that you can address those breaking changes at the same time, so even when the packages are versioned independently, they still maintain compatibility.. Well, that requires that A@^1.0.0 be published to the registry. This does effectively mean you lose the symlink that results from lerna bootstrap.. \"Private\" as in \"never published to any registry\" or \"published to a private registry, not https://registry.npmjs.org\"?\nI guess the assumption with a lerna-based monorepo is that you fix the consumer at the same time as the provider is being broken. It's one of the major value-propositions of a monorepo.. It's not lerna's responsibility to set a token, or even be aware of what that token is/where it is located. I agree we should probably run npm whoami (yarn equivalent ???) at the beginning of publish just so the inevitable error can be helpful/informative instead of damaging.. I have a hunch yarn has different opinions about how to resolve registry authentication. No actual proof, just bitter experience of several yarn-related lerna bugs due to inconsistent implementation of registry patterns.. Thanks!. @jeffora npm5, especially 5.8.0+ with npm ci, has been plenty fast and reliable for Zillow.\nOther bullet-pointy reasons, in no particular order:\n\nnpm has a more robust CLI, with better aliases/completion/docs\nBetter back-compat, battle-tested\nBetter config story (env + flags + file, etc)\nBetter concurrent reliability (yarn requires a mutex)\nnpm's humans are wonderful (I've met many of them and follow several on Twitter)\nBetter deduping/tree-flattening with npm\nnpm devs make contributions to yarn, can't say the reverse\nLiterally nothing (to my knowledge) in the yarn codebase is shared as an external library, which makes me less-inclined to be charitable with them\nyarn made opinionated choices about their CLI, which is totally their prerogative; I happen to disagree with many of the choices\nAn early contributor to lerna started asserting that yarn would eventually replace lerna's functionality, so it wasn't worth devoting energy to lerna. Kinda left a bad taste in my mouth.\nyarn pack is horrendously incompatible with npm pack\nyarn publish is the conflation of npm version + npm publish, without any useful documentation to that effect, and it bit me recently when I succumbed to the pressure of allowing yarn publish to be executed during lerna publish.\n\nI have no problem using yarn if a project I want to contribute towards is using it. I just don't personally want to deal with it.. @ZeeCoder \n\nOne of the edge-cases I've been having is that I cannot seem to publish brand new packages with Lerna\n\nI literally did just this, both in lerna itself a few weeks ago, and a new lerna-based repo for work yesterday. Of course, I'm using npm, not yarn, as my npmClient.. > you've mentioned removing lerna bootstrap\nEr, I should have said \"de-emphasize in favor of\"... I just pushed a commit that does the same yarn workspaces short-circuit in lerna bootstrap (only install the root) when it detects root file: local dependencies.\nBut yeah, for the most part, lerna bootstrap is increasingly \"legacy,\" whether replaced by yarn workspaces or npm local file: specifiers.\n\nensuring that sub-projects in a monorepo with common third-party dependencies share the same version\n\nIn my experience, it works exactly like npm already does when flattening a tree (because that's exactly what it's doing): dependency specifiers with semver-compatible ranges will be resolved to the same package in node_modules. Lerna's own package-lock.json demonstrates the auto-hoisting quite well.. @zkochan Thanks for dropping by!\nWow, pnpm recursive looks great. I admit I've never looked deeply into pnpm before, though I've known about it for awhile. I am definitely open to collaborating on making Lerna compatible with pnpm.\nSome brainstorming on compatibility:\n\n\nI see no reason we can't support a transparent pass-through to pnpm recursive link for lerna bootstrap --npm-client pnpm, like we currently do for Yarn workspaces and npm@>=5 relative file: specifiers. That's low-hanging fruit.\n\n\npnpm-workspace.yaml looks really nice, ye gods I am jealous of the YAML format (JSON is soooo finicky). Using that list of globs instead of lerna.json's packages field seems straightforward (again, much like how we read Yarn workspace config from the root package.json).\n\n\nSince pnpm delegates almost everything else relevant to lerna directly to npm, I think we might be good after we fix the two issues above?. #121 #191 #1136\nAdding optionalDependencies to the package graph (to ensure the externalDependencies are complete) means we also need to add support for leaf packages linked via optionalDependencies. Sounds weird, but it's the least-worst option, I suppose.. Implemented in b73e19df. Sounds reasonable to me.. I think you need to run yarn integration -u so the tests pass?\nI can port over to master, no worries.. Thanks!. Published in v2.9.1 and v3.0.0-beta.12. Oh dang, I forgot that could be a thing. Thanks for the bug report!\n(Homebrew's node has been a pain-in-the-arse from day one, in my experience, far preferable to use nvm).. Oh, sure, I didn't mean to imply I'm not going to fix this, I just completely forgot about this case.. Published in v3.0.0-beta.12. The builtin npmrc is a rare edge-case; if it isn\u2019t in the standard location, it\u2019s not likely to exist anywhere.\n\nOn Mar 30, 2018, at 06:31, Aleksander Heintz notifications@github.com wrote:\nWouldn't it be better to try to locate npm by way of where npm (ie. scan $PATH). That way you would get the noe the user is using (unless they specifically ran another one).\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.\n. The simplest way is to split them up (the problem is the &&, which isn't considered part of the lerna exec command, but a separate command entirely).\n\n\"prebuild\": \"lerna exec --parallel -- del-cli dist\",\n  \"build\": \"lerna exec --parallel -- babel src -d dist --ignore test.js\"\nIn theory, you might be able to escape the && so it gets added to the ---trailing args, but for clarity I would just split up the phases.. So, --skip-git is a terribly-named flag. It doesn't actually skip all git operations, just making commits and pushing to the remote. git tags are still necessary to determine the version.\nBecause lerna publish is actually the conflation of npm version and npm publish (not my choice), we're kinda stuck with this. What are you trying to accomplish, specifically?. If you don't have any git tags reachable from that branch, that's a deeper problem. Presumably lerna has successfully published on master before?\n(I don't recommend lerna publish on a branch, for this and many other reasons). lerna.json isn't meant to be an actively-edited file, but rather to serialize CLI options to make things consistent for all contributors. It also sounds like a maintenance nightmare.. This assumes that the current documentation is accurate and complete.... I need more context: lerna.json? Previous version released?\nWith fixed versioning (the default), it is intentional when doing a \"normal\" release to bump all current prereleased packages to the new \"normal\" release. The assumption is that you are \"graduating\" the prerelease out of alpha/beta/whatever, and no \"normal\"-versioned package (in a lerna context) should ever depend on prereleased local dependencies.. That\u2019s lerna diff, but it does not show dependent bumps.\n\nOn Apr 11, 2018, at 01:00, li.li notifications@github.com wrote:\nlerna updated should tell me what exactly updated in code level. what I changed ?\nlerna updated --detail ?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Nope, lerna diff doesn\u2019t show dependent bumps.\nOn Jun 14, 2018, at 14:16, Kevin Barabash notifications@github.com wrote:\nI'm having the same issue. lerna diff appears to be accurate. Could use it to determine which packages need updating?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. > Should lerna force a republish if a non-production dependency changed?\n\nOh, I didn\u2019t think that would happen. It sounds wrong, I agree. A test case repro would go a long way toward fixing it.. Check out #707 for why that will never happen. Sorry.\n\nOn Jun 14, 2018, at 18:10, Kevin Barabash notifications@github.com wrote:\nIf I have some packages that are all using ^1.0.0 of some dependency and then that dependency gets bumped to 1.1.0 I would expect the packages that depend on it not require publishing unless one of those packages actually uses the new feature added in 1.1.0 in which case I would need to change that package to use that new feature. I'd also update its deps to be ^1.1.0 since it now requires that new feature.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Most of that code is tested in the commands/publish tests, as there tends to be a lot of setup necessary and the validation is easier there.\nOn Jun 14, 2018, at 23:48, Francois Zaninotto notifications@github.com wrote:\nA test case repro would go a long way toward fixing it.\nI tracked down the code responsible for that in utils/collect-updates (I think), but there is no test around that I could use as an example for building a new test case.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. It's in the publish tests because it was only originally extracted to share with the \"changed\" subcommand (which used to be called \"updated\"), which uses the exact same logic to list what has changed since the last release. Doing tests under collect-updates would duplicate 80% of the existing tests under commands/publish.\n\nI started poking at it, and I've noticed some gaps in coverage from recent changes I made. I'm trying to figure out if it was intentional to have changes in devDependencies trigger package bumps.... Pretty sure --since wasn\u2019t implemented in 2.4.0? Anyway, why pass the flag anyway when it\u2019s identical to the current HEAD?\n\nOn Jul 11, 2018, at 07:57, Jonathan R Wickens notifications@github.com wrote:\nAt a more fundamental level when I run\nlerna updated --since=current-branch\nwith version 2.5.1 I get all the packages listed\nBut when I do it with 2.4.0 I get no packages listed (what I expected)\nSurely there's a test to make sure updated returns no packages when --since is set to HEAD ?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @t-kelly Thanks for the detailed analysis!\n\nI want to say that needsBump ternary was related to ensuring that \u201cgraduating\u201d a prerelease (alpha to beta, or release candidate to general release) would ensure nothing gets \u201cleft behind,\u201d even if nothing has changed since the immediately preceding prerelease.\nThere is almost definitely a bug there in independent mode. I don\u2019t remember if the \u201cgraduation\u201d scenario is completely handled in lerna publish or not.... @t-kelly Thanks for the detailed analysis!\nI want to say that needsBump ternary was related to ensuring that \u201cgraduating\u201d a prerelease (alpha to beta, or release candidate to general release) would ensure nothing gets \u201cleft behind,\u201d even if nothing has changed since the immediately preceding prerelease.\nThere is almost definitely a bug there in independent mode. I don\u2019t remember if the \u201cgraduation\u201d scenario is completely handled in lerna publish or not.... There is a significant refactoring of versioning and publishing about to land, so I haven't had time to look into this directly. I still don't have a clear reproduction.. @t-kelly If you're using the default versioning scheme, that's expected behavior if you're doing a non-prerelease.. I personally did a lot of context-sensitive (i.e., \"partial\") beta prereleases in lerna/lerna itself (using \"fixed\" versioning) and never encountered this issue, so I'd really like a complete picture (config, commands, repo state) to get to the bottom of it.. @randy-askin How does that change differ from the actual current value?\njs\nconst needsBump = (commandOptions.bump || \"\").startsWith(\"pre\"). Oh, jeez, you're totally right. Thanks for explaining it clearly to my toddler-addled brain. :). So I made the change and none of my unit tests failed, \ud83d\ude2d \n```diff\ndiff --git a/utils/collect-updates/collect-updates.js b/utils/collect-updates/collect-updates.js\nindex dfedf36..2dcce43 100644\n--- a/utils/collect-updates/collect-updates.js\n+++ b/utils/collect-updates/collect-updates.js\n@@ -56,10 +56,11 @@ function collectUpdates(filteredPackages, packageGraph, execOpts, commandOptions\n     candidates = new Set();\n const hasDiff = makeDiffPredicate(committish, execOpts, commandOptions.ignoreChanges);\n\n\nconst needsBump = (commandOptions.bump || \"\").startsWith(\"pre\")\n? () => false\n: / skip packages that have not been previously prereleased /\nnode => node.prereleaseId;\nconst needsBump =\n!commandOptions.bump || commandOptions.bump.startsWith(\"pre\")\n? () => false\n: / skip packages that have not been previously prereleased /\n\nnode => node.prereleaseId;\npackages.forEach((node, name) => {\n   if (forced.has(name) || needsBump(node) || hasDiff(node)) {\n```\n\n\n*straps on big-kid test-writing boots*. v3.10.1 hopefully fixes this. In the case of eslint and prettier, you should be using the direct calls anyway. lerna exec is a redundant wrapper in those cases.\nAs for quoting globs, I think you're right, the command is being zapped by shell interpretation twice: once when npm run executes the script value, and then again when lerna exec executes the double-dashed parameters. If you escape the single quotes (normally not necessary, of course), perhaps that might work?\nBut seriously, just call eslint and prettier directly. All linting, testing, and build-related tasks in a monorepo should be hoisted to the root.. A \"more correct\" solution to fixing the integration tests is passing \"--no-ci\" to the existing bootstrap calls and add another test that explicitly passes \"--ci\", with the appropriate fixture.. Yep, that's the pattern. I forgot bootstrap had its own integration fixtures, but no worries!. If you want to backfill changelogs, I would just use conventional-changelog-cli directly. You could even use lerna exec to run it in all packages:\n```\nnpm i -D conventional-changelog-cli\nnpx lerna exec --concurrency 1 --no-sort --stream -- \\\n  conventional-changelog \\\n    --preset angular \\\n    --infile CHANGELOG.md \\\n    --same-file \\\n    --release-count 0 \\\n    --lerna-package \\$LERNA_PACKAGE_NAME \\\n    --commit-path \\$PWD\nnpm rm conventional-changelog-cli\n```\n(escaping the env vars is important, otherwise they'll be evaluated too early, e.g., $PWD will be the root directory, not the package directory)\n\nThe since option of the publish command does not seem to be passed to the conventional-changelog call.\n\n--since is not a valid option for lerna publish. That it happens to work right now is a bug.. @ashoksudani If you're using lerna, lerna version --conventional-commits. If not, use the conventional-changelog CLI that I linked and demonstrated earlier in this thread.. I really appreciate you picking this up, and I'm sorry the unit tests on the 2.x branch for this feature are so brittle (they're dramatically improved in master, but not easily ported due to many other changes).\nLet's simplify the 2.x tests by replacing the brittle dedent-ed argument assertions (like here) with simple expect.stringContaining(\"I should be placed in the CHANGELOG\"), and so on. We can just take as a given that the rest of the boilerplate is working (I could have sworn there was an integration test to that effect in the 2.x branch).. @bcoe Can you check why the tests are actually failing? Appveyor output is inconclusive.. Is there a particular reason you can't use lerna@next? I switched to using the updated conventional-changelog API directly, and it's much cleaner.. > I corrected the tests and replaced the Array with a Set, I wait to see if it goes (on Node 4 which could also be removed in 3 weeks)\nlerna 2.x transpiles with Babel, so we shouldn't have to worry about Set(). I don't plan on removing Node v4 support from lerna 2.x.\n\n[...] modules not found if we launch the global lerna\n\n1122 (released in v3.0.0-alpha.0) makes a global lerna always use the local install. It's expected that lerna is always locally-installed, since this is the general npm best-practice (and required by CI, etc). I'm not convinced we need to support a global changelog preset from a global invocation of lerna.. The resolution of the conventional-changelog-cli -n (--config) option is very interesting:\njs\nconfig = require(path.resolve(process.cwd(), flags.config))\nI had never investigated that option before. TIL.... Published as v2.10.0. At some point, this PR was actually using conventional-changelog-preset-loader, but I don't recall why it was replaced with resolve-from.\nThat being said, I don't have the bandwidth to maintain lerna 2.x, and lerna@next should work just fine, since it actually uses the new API directly.. @fenduru Fair enough, I'll revert it.. https://github.com/lerna/lerna/releases/tag/v2.10.1. https://github.com/lerna/lerna/commit/a1bff40e65cb29b06aecbcafb3a9b4d0176b58cf should support this use case (while being backward-compatible with the new preset resolution rules).. That's not how lerna publish is meant to be used in combination with dist-tags. Basically, once lerna publish --npm-tag next has completed, it's up to you to use npm dist-tag to change the dist-tag pointer, not another lerna publish.\nlerna exec can be used to set the latest dist-tag to the value of the next dist-tag (if it exists):\nsh\nnpx lerna exec --no-bail --no-private --no-sort --stream -- '[ -n \"$(npm v . dist-tags.next)\" ] && npm dist-tag add ${LERNA_PACKAGE_NAME}@$(npm v . dist-tags.next) latest'\n(note the single quotes, they're important, delaying interpretation of the shell expressions). I would just upgrade to lerna@next, it removes this validation completely. It is an unfortunate relic of bad design decisions early in lerna's history (v1.x).. We already pass --no-verify directly to git commit, I don't see why we can't do that for git push too (and maybe condense those two calls into one?). It's silly to validate lerna commits and pushes, as it's implied that any validation has been done already.. Yeah, basically those two places I linked, and then modifying relevant unit test assertions. I don't think we really have to go whole-hog and have an integration test with a pre-push hook, we can just assume git knows what its doing.. As long as @myscope/button has a dependency on @myscope/icons, lerna bootstrap should create the correct symlinks (even for unpublished modules) such that Storybook \"just works\". I'm afraid I'll need more context (lerna.json, specific commands that were run, any lerna-debug.log output, etc) to accurately diagnose the issue.. (There's nothing special about Storybook, if you can import sibling packages into the button component and run it bundled in a browser, it should work in the tests). That's really weird, such an alias shouldn't be necessary at all (you shouldn't need to webpack at all just to run tests?). I wasn't aware Storybook ignores node_modules resolution semantics. I would raise the bug with them.. I use Jest from the root literally every day with lerna bootstrapped local modules without issue. You've got some config somewhere polluting things. There is absolutely no requirement for the symlinks to be in the root node_modules.. No, you have to transpile before running \"integration\" tests like that. I usually run it from the root in a \"pretest\" lifecycle.. It's a normal situation when compiling the output of an npm module (whether in a lerna monorepo or a \"normal\" npm package repository). I usually add a prepare lifecycle to the packages that transpiles immediately after lerna bootstrap, and then still do a recompile in pretest.. What does yarn info @company/proj report? If it errors, as I suspect it will, that means yarn can't see/disregards your npm registry config.. > All other use cases with NPM or Yarn work properly in any other reference frame.\nSchucks, I was hoping for an easy fix. I wonder if package-json might be the culprit? The underlying registry-url doesn't consult any yarn-specific config, and could possibly be missing the custom registry config somehow?. In a lerna-based monorepo: node -e 'require(\"package-json\")(\"@company/proj\").then(console.log)'\nIf it errors, then that's the culprit. If it doesn't, then it's somehow lerna's fault, and I really don't have time to debug that rabbit's hole right now.. @wsrast Good investigation, thanks! I suspect https://github.com/sindresorhus/package-json/issues/35 (opened 9 months ago) might be related to this (if it's an SSL problem)?\nYour research would merit opening an issue in package-json's repo, demonstrating a minimal reproduction. Not sure what the ultimate fix is, though it doesn't hurt to start the conversation there.. lerna should always be a dev dependency. Probably shouldn't require running from a lifecycle script, to account for npx lerna, etc. That being said, CI should be running lifecycle scripts anyway.... We could certainly call npm config get user-agent, I guess, but I'd rather not, since a global lerna really isn't expected to be used for anything but lerna init (itself a command of dubious value).\nWe already have an npm conf object available in bootstrap's initialize method, we should pass that in instead of reading it directly from process.env. Otherwise, it's just going to fail when you try to use a globally-installed lerna. \"Fail\" in the sense that it... works? But just not as fast.... \"../some-folder/**/packages/*\" is an extremely unexpected package location. It looks like a completely different monorepo, to be honest.\nNo, there isn't support for ignoring directories. If you need to ignore a directory, consider that that directory probably shouldn't be included in the monorepo?\nlerna run already ignores packages that don't have a given script. If it's impossible to properly split the monorepo, I would just change the script name that you want to partially target.. No, I don't think this is generally useful, nor a pattern that I want to promote. Lerna is meant to manage npm packages, not deployment pipelines or multiple monorepos.. It's not my opinion, it's my choice to explicitly support or not support patterns that I believe are out of scope for lerna. Every added feature/special case/\"just this once\" is additional maintenance burden, and that weighs rather heavily on one individual.. Thanks for understanding :). One project, one lerna.json, one monorepo. If you have multiple projects, they should be in multiple monorepos. Sorry.. This is one of the compromises lerna makes to facilitate concurrent publishing: the non-error logs are silenced to avoid confusing interleaved output. When errors occur, they are duly logged by lerna before exiting non-zero.\nWe do currently \"swallow\" lifecycle script errors (logged, but not breaking the publish process) during lerna publish. Would a --bail option that forces those to re-throw the exception and halt the publish process help you?. Yes, there is, of course. We could even pass our loglevel directly (it\u2019s the same value), but it would be noisy as hell without also making publish a sequential operation (that is, concurrency=1).\nI\u2019m of half a mind already to make publish sequential in order to make error handling and two-factor auth prompting work realistically.\n\nOn Apr 13, 2018, at 00:05, Daniel Rodr\u00edguez Rivero notifications@github.com wrote:\nHello @evocateur ,\nI think in this case it will be enough to be able to pass the --verboseoption to npm while publishing. While rethrowing errors may be useful to short-circuit automated processes, being able to see the verbose output of npm will be way more useful to debug them.\nIs there any way to pass the --verbose flag to npm when publishing ?\nRegards\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. No direct way via CLI flags, but you could specify the npm_config_loglevel env var. Still wouldn\u2019t be much use at the moment, since the stdio from the npm publish is still swallowed (except on errors, which dump a log of all loglevels).\n\nWe can probably pass args after -- to the publishes, but it\u2019ll be undocumented behavior.\n\nOn Apr 16, 2018, at 07:21, Daniel Rodr\u00edguez Rivero notifications@github.com wrote:\nbut it would be noisy as hell without also making publish a sequential operation (that is, concurrency=1).\nWe are desperate as hell, so seeing everything that is happening while debugging an issue that is driving us into madness sounds more like a bless than a problem. Specially knowing that you can deactivate it.\nIs there any way to pass the --verbose option to npm publish at the current lerna version ? no matter how.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Probably? Although it's terribly documented (if at all) right now.\n\nThe default export of @lerna/add, for example, could theoretically be used like this:\n```js\nconst lernaAdd = require('@lerna/add');\nlernaAdd({ pkg: ${module}@${myVersion} }).then(() => {\n  console.log('done!');\n});\n```\nI haven't tested it, though, so I might be mis-remembering.. We already have a --bail/--no-bail flag in a few commands, which defaults to true. I can see an argument for moving this to a global option, and modifying several loops and branches to consult the option to determine whether or not to re-throw caught errors.\nCommand Options:\n  --bail  Stop when the command fails in a package.      [default: true]\n          Pass --no-bail to continue despite failure.\nThe other bullet points seem way outside the scope of lerna itself, and would be more appropriate as a piped utility.. Exit codes are not exactly correlated to --no-bail semantics. An unexpected error should always exit non-zero, though there are likely untested exceptions to this.\n--no-bail was originally intended to allow lerna run and lerna exec to complete all of their chained executions regardless of individual script/shell exec failures. I want to say we're propagating any non-zero exit codes during a --no-bail command, but it is entirely likely they are being dropped unintentionally.. Dang, that's what I was afraid of. I can't think of a workaround off the top of my head, short of not passing --no-bail and letting lerna explode whenever a package exec fails...\nI'd even argue that it's a proper bug fix to propagate the non-zero exit code. Despite technically being a breaking change, it's actually the expected result of the feature.\nI guess we could add another flag, like --exit-code (naming is hard) to fix it without breaking. If --no-bail is passed without --exit-code, we should definitely warn extremely loudly about the lack of exit code preservation. Then in the next major version we make the correct behavior the default while removing the warning.. Yeah, because we're no longer using lerna-changelog, which that config is meant to address. I guess we could make a new conventional-changelog preset to replicate the decorations, but it's honestly not very high on my priority list.. Thanks!. here you go: https://github.com/lerna/lerna/releases/tag/v2.10.2. This is one reason you shouldn't publish from a feature branch.\nIgnoring merge commits and whatnot is actually the domain of conventional-changelog, not lerna (assuming you're using lerna publish --conventional-commits, you didn't include any config or other context).\nAgain, the simplest solution here is to prohibit non-canary publish from feature branches with --allow-branch master (or command.publish.allowBranch = \"master\" in lerna.json). Oh, yeah, that makes more sense. One of the drawbacks of non-canary releases in CI, at the moment. I would like to fix this, but it\u2019s a dramatic change that I haven\u2019t had time to fully-specify. Something akin to semantic-release, perhaps even reusing SR plugins or providing our own lifecycle plugin.\n\nOn Apr 16, 2018, at 22:59, Bo Chen notifications@github.com wrote:\nthanks for your reply.\nNo I am not publishing from feature branch. everything happens in master branch here. It's purely a timing issue -- while CI is building the project , another developer already commit a new change.\nwhen CI finishes, lerna will commit as well.\nSo the 2nd developer will have to merge in the lerna's commit, which will cause the same package to bump again (as lerna updates pacakge.json and CHNAGELOG.md)\ndoes that make sense?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. > I reckon it's more likely that the change needs to be made in conventional-version-bump\n\nDefinitely what I was thinking. There might be a better filter for its commit parser, for sure.. @Feiyang1 Please create a separate issue. Commenting on a closed issue isn't (normally) going to get you anywhere.. Those are the names of npm lifecycle scripts. An ecosystem convention has developed to \"namespace\" these scripts by using colons (\":\") to delimit namespace levels.\nIn your example, the script is named lerna:generate:models, and you would run it with the command npm run lerna:generate:models. The script calls lerna run itself, which finds lerna from the locally-installed node_modules.\nnpx lerna run --help will give you documentation for that command.. > \"Lerna won't publish packages which are marked as private\"\nThat's still true. Lerna has never made promises that nothing would be modified in a \"private\": true package during lerna publish.\nThe version bumps are necessary to retain lerna bootstrap symlinks (when one isn't using the superior relative file: specifiers pattern). That's not going to change, so I'd suggest avoiding a dependency on a specific format of the version number (intentional or not, it's ignored in a package.json version field).\nConsider, too, that you don't have to manage this private package with lerna. Being private, it's already devDependencies-only, and thus it should be safe to use either relative file: specifiers, or just hoist it to the root and use the node_modules resolution algorithm.\n. No, \"private\": true has one use: preventing accidental publish. It has absolutely nothing to say about what local packages can have a dev dependency on it.\nAnd really, if a private package in a monorepo has no local dependents or dependencies ...why bother putting it in the monorepo?. lerna publish will always bump dependents of packages that change (#707 has the gory details, I'm tired of re-re-re-explaining them). So if @org/package1 or @org/package2 have changes, it will cause privatepackage's version to be bumped (but not published). It's pretty innocent, really.. lerna bootstrap also works with npm@5, it's just that there are optimizations available with lerna@3 that allow you to completely ignore lerna bootstrap (much like lerna itself now does).\nSpecifically:\n1. All devDependencies are moved to the root\n   * (there's no reason you can't run eslint and jest from the root)\n2. All sibling dependencies are specified as relative file: specifiers\n3. Run npm i packages/* from the root once\nThen you can replace lerna bootstrap with npm install (and npm ci in CI), and it all \"Just Works\".. Yes, otherwise they'll never be installed by npm. You should be doing this anyway in a monorepo.. Running eslint from the root does not preclude custom config in each leaf package. A bit ornate, but not impossible.\nI don\u2019t plan on breaking the \u201cpretend we\u2019re not in a monorepo\u201d pattern, but I can\u2019t say I\u2019ll go out of my way to improve it at the expense of the golden path.\n\nOn Apr 17, 2018, at 07:15, djskinner notifications@github.com wrote:\nHmm, I think I'm going to have to go back to yarn workspaces as I just cannot get this to work for my requirements. For reasons I don't understand I simply cannot convince npm to add node_modules/.bin references to each package so that npm scripts work as expected yet yarn workspaces does this out of the box.\nYou should be doing this anyway in a monorepo.\nI can see some sense in putting all devDependencies in the root is a viable option for some projects but this isn't going to work for me. Each package needs its own lint/test/build requirements and it would be overly complex if not impossible to have a single command at the root that does the right job for each package. Additionally, after thinking it thought I subscribe to the view described here: #1343 (comment)\nWe prefer to keep our package scripts designed in a way that's independent from the monorepo layout, so that any per-package script works on its own and can be invoked e.g. via cd packages/{name}; npm run build.\nIs lerna not intended/intending to support this approach in the future?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. The git hosted versions require a special process of \"publishing\" them to separate git repositories, there's no implicit support of installing a monorepo package from a gitCommittish of that monorepo. That's not how npm git dependencies work.\n\n(Seriously, just don't use git dependencies. They're not the solution.)\nIn this specific case, it all boils down to how the core dependencies are specified: ^ range or --exact? If it's a range, then... well, probably they should both be pointing to the local dependency? If it's exact, in theory that means it could install the version that doesn't match the local dependency exactly from npm. But that won't work, because they're not published?\nIt's extremely odd to have intentional differences that do not differ by a major version, and I would frankly consider it a bug. A big reason to use multi-package repositories at all is to ensure local siblings always test against the latest, co-versioned dependency.\nNow I'm just confused. Can you show code that demonstrates what you're trying to do? (It sounds like you shouldn't be using lerna for this, to be honest). Lerna vs Yarn workspaces is somewhat orthogonal, here. It sounds like you want two separate repositories, and maybe share some sort of pattern library via private npm packages. \"Two separate teams\" is a dead giveaway that a monorepo isn't appropriate for all the code.\nI've never heard of react-native playing nice with any other packages in the same repo (tons of edge cases, weird resolution semantics, etc), but that's my own bias speaking. It's simplest to separate the concerns, and if you need to share packages, publish them to the registry with limited access (auth-required, etc).. \n\nThe only issue is that we don't want to use private npm packages in case when one team moves slower and wants to stay on older version of the shared code.\n\nThe beauty of packages is that you can specify exactly what you want; if one team doesn\u2019t even want to take patches, they can use an exact version. If one team needs to make a breaking change, bump the major and the other team can upgrade at their convenience.\nThis even works when the shared code is inside the monorepo; when the dependency version diverges from the local package\u2019s version, lerna will attempt to install it in the leaf package directly instead of symlinking the local sibling. To work, of course, it does require publishing the shared code to a registry.\n\nWould be nice to have it in private GitHub repo and for lerna to maintain feature parity between GitHub and npm hosted packages. Is it something you would consider useful functionality?\n\nI only really envisioned lerna\u2019s hosted git committish support to be limited to metadata (i.e., recognizing a local sibling based on an externally-extracted git dependency). Doing anything more means lerna starts to become a package manager, which is explicitly out of scope.. Yes, this is what lerna itself does.. This would have been useful information to include in the original bug report.. Why the --skip-npm? Probably not the cause, but definitely odd, if you do it after every commit.. > It seems like for Fixed mode, we should be iterating over all packages instead of the updated ones.\nI think you're right, logically, but in practice, it's mostly an aberration around how we handle major version bumps. I would definitely expect a conventional major bump in a fixed repo to bump all packages.\n...and as far as I can tell, it kinda means we would have to refactor collect-updates to take into account the recommendVersions() logic ...somehow. Oy.\nRight now, a workaround exists (for fixed versioning), although it is regrettably not exactly automatic: When you know there is a breaking change, pass --force-publish to lerna publish --conventional-commits, and it should(?) ensure that all packages are bumped to the new major. I haven' tested it, so caveat emptor.. I'm definitely sympathetic. This would be a breaking change, so I'm not sure this would make it into the 2.x branch.\n\nAfter force publishing, it appeared to pick up versioning correctly. Packages were bumped correctly based on feat, fix, & BREAKING CHANGES of the various commit messages since the last normal/real publish--although why that works differently from the lerna updated change detection is a little confusing to me.\n\nThat's because only lerna publish actually runs the conventional-changelog-related stuff, lerna updated only uses git tags to detect changes, and never decides version bumps.. --npm-tag controls the npm package dist-tag, not the annotated git tag (which is indeed skipped with --canary). It's an unfortunately-named option.\n--canary was originally intended to be the \"nightly\" release, run in CI. lerna publish was not originally designed to be run in CI, but it has gained various features over the years. It's certainly the direction that the industry wants to go.\nInstead of rewriting lerna publish to be more CI-friendly, I would rather figure out a way to integrate lerna-like versioning decisions into semantic-release, to be honest. It's got a very robust architecture, it's just missing a few of the git calculations and whatnot.. Yeah, I don't want to fundamentally change the order of operations in a maintenance branch. Probably gonna switch lerna 3.x to be latest in npm soon, anyway.. When an npm publish fails, now your public git history is at odds with what is present in the registry. Failed npm publish means you can go into the local directories and fix the problem. Once git is public, it's less tractable.. The answer is to only run one build at a time for branches that push commits back to origin. I don't know how else to contain the insanity, even pushing before npm publish is still liable to hit race conditions in such a chaotic situation.. I'm not sure what is relevant about your semantic-release example? It just skipped publishing? I'm not an expert on the tool, but I was under the impression semantic-release only pushes tags, not a generated commit, so it's not an apples-to-apples comparison.. We always have control over what commits are generated in CI. You can always do lerna publish --canary to avoid generating conflicting commits. Not ideal, I'll grant you, but it's what we have right now.\nBy the way, semantic-release seems to run its npm plugin before its github plugin during the publish phase, so it's not clear to me that your assertion is correct?. Lerna publish in CI without --canary really blows right now, to be blunt. I\u2019m saying spare yourself some pain and don\u2019t use it right now, it\u2019s clearly causing you way more pain than it is worth.\n\nOn Apr 24, 2018, at 07:52, Bo Chen notifications@github.com wrote:\n\"We always have control over what commits are generated in CI.\"\nI don't think we are talking about the same thing.\nI'm talking about in a team develop environment, where multiple developers can check in or merge into master at anytime. If right after lerna runs this line\nhttps://github.com/lerna/lerna/blob/2838260b7d0058249b2f0aee61e41d7de6bbe228/commands/publish/index.js#L101\nanother developer push some changes into master. what will happen?\nI don't think this issue is related to lerna's commit message\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I\u2019ve started a branch off master separating lerna version from lerna publish, which effectively runs git push before npm publish. It\u2019s kind of a giant task, however, and I won\u2019t likely be done until next week (at the earliest).\n\nIn the meantime, I can cut a 2.x prerelease under a special dist-tag that reverses it for you, if you like. I can\u2019t make it a normal 2.x release due to semver, but at least it would stop the bleeding.\n\nOn Apr 24, 2018, at 18:07, Bo Chen notifications@github.com wrote:\nShe\u2019ll I create a PR in 3.x swapping npm publish and git push?\nI think I have explained enough, and it\u2019s worth putting git push before non publish\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Thanks again for your patience @bochen2014, but I don't think we're going to land this on 2.x, it's a breaking change that I can't afford to make on what is in reality a maintenance branch. Let me know if lerna 3 needs changes to make this happen (I'm still working on the split of publish into version and publish phases...).\n\nCan you open a new issue about the incorrect exit code after a push failure, please? We should really figure that out, it's not ideal.. Yes, we agreed that git push should happen before npm publish. That would be part of the new lerna version command I'm working on, extracted from the current lerna publish.\nIn the near future, calling lerna publish will automatically call lerna version when necessary, which effectively reorders git push before npm publish.. Published in v2.11.0. Thanks for your patience, @bochen2014 . All of these test failures should be caught locally. npm test, like literally any other npm package.. There is a problem, but I don't see any evidence that your solution fixes it appropriately. How do you even know it fixes it without passing tests?. Sorry, I meant that you don\u2019t need to precalculate a new packages map just to check if it\u2019s the same size as the versions map. The other parts of that conditional are still appropriate, I\u2019m just not sure why you\u2019re eagerly re-mapping the packages.\n\nOn May 1, 2018, at 21:21, Bo Chen notifications@github.com wrote:\n@bochen2014 commented on this pull request.\nIn commands/publish/index.js:\n\n const tasks = [\n   () => this.getVersionsForUpdates(),\n   versions => {\n\n\nthis.updatesVersions = versions;\nconst packages =\nthis.filteredPackages.length === this.packageGraph.size\n? this.packageGraph\n: new Map(this.filteredPackages.map(({ name }) => [name, this.packageGraph.get(name)]));\nif (this.project.isIndependent() || versions.size === packages.size || this.options.canary) {\nhmmm,, let say versions.sizes = 3 while this.packages.size = 5\n\n\nif this.project.isIndependent, we don't want to bump all ; as this is only for fixed version\nif this.options.canary , I am not sure if should bump all or not. depends on your opinion on \"should we treat a canary a graduation?\"\nthe core question here is, when should a package be bumped? I think the answer should be,\nwhen it changes\nwhen it dependents on a package that changes\nin Fixed version, when the global version graduates\n3.1 a pre-release to a normal release is a graduation\n3.2 a major bump, e.g. 1.0.0->2.0.0 , or 0.1.0->0.2.0 , is a graduation\nshould canary fall into above 3 rules? I mean, you can decide and I'll just do it in the PR\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Looks great, thanks!. @codeNoobie I use 3.x \"in production\" every day, it's fine. The beta tag is just there because I'm lazy and still plan a couple technically breaking changes before 3.0 final.. lerna clean really isn't worthwhile when you're using Yarn workspaces. Just rm -rf node_modules if that's what you want.\n\nAlso, nuking the root node_modules is removing lerna (which should always be a local dev dependency), and that's not especially useful for a CLI to delete itself.. A README update would be nice, yeah. Largely copy+pastable.\n(The docs are generally in need of a dramatic overhaul, so don't worry if you can't get to it). (I really wish the tests would stop flaking on Appveyor :/). > I'd also like to see this feature in 2.x, should I just open another PR for the 2.x branch?\nYes please, that would be great.\nNo worries about the docs, like I said they're in dire need of rewriting already.. I would say that is an egregious yarn bug, lerna has literally no control over what the package manager clients do during npm publish/yarn publish.. We definitely need help with documentation! Let me know if you have spare cycles and want some pointers to the egregiously painful parts of the documentation :). As for the local lint failing, 2.x still uses Yarn, so maybe that's the issue? It currently passes for me in my local branch.\nIn any case, CI likes it, so I'ma merge and publish it. \ud83c\udf89 . Published in v2.11.0. --skip-git literally never guaranteed no git commands would be called.\n\nwe need to publish [the packages] for consumption by other teams, but those refactored packages aren't ready to be committed as the de-facto sources\n\nI don't understand how they're ready to be published, and yet not committed. Source code isn't set in stone. --canary is meant to be a \"nightly\" snapshot, not an end-run around source control.. Yeah, that's not a use-case lerna can support.. If you're using Yarn workspaces, that's part of the requirements of contributing to your repo. npm i -g yarn isn't rocket-science.\nWe store the global version in lerna.json right now, so unfortunately we're tied to that for the time-being. Sorry.. Just ...use npm, then? I don\u2019t understand why you persist with a package manager that can\u2019t be installed by a non-trivial number of your fellow developers.\nLike I said before, the global version is stored in lerna.json, so it\u2019s not going to happen with the current infrastructure.\n\nOn Apr 25, 2018, at 20:30, Hu Chen notifications@github.com wrote:\n@evocateur There are some limitations on our corp environment while someone working using Macbook got no issue installing yarn and others working on Windows machines do not have access to install yarn the proper way. So we hope we can create a separate config file for those users, otherwise, we need to create scripts with\n\"bootstrap:npm\": \"npm install --no-package-lock && lerna bootstrap --hoist --npm-client npm --no-use-workspaces -- --no-package-lock\"\nwhich is very ugly.\nMost projects (Jest, Webpack for example) support multiple ways of config and also support --config flag, I think it is a nice feature to have in lerna as well, I am happy to contribute to it and add this flag, any concern?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. In the \"fixed\" (default) versioning method, that's true. Independent versioning always uses ${packageName}@${version}, and that isn't likely to change.\n\nPresumably you're also setting npm's tag-version-prefix config to \"\"? If so, I think we can just read that and use it (in all non-independent cases, since it defaults to \"v\").. Well, I mean, right now lerna (v3.0.0-beta.18) does not respect this (since we're not calling npm version). We could add awareness of this fairly simply.. I would just use dist-tags, that\u2019s what they\u2019re for. Don\u2019t bother with a release branch or a second registry.\n\nOn Apr 30, 2018, at 06:53, Bo Chen notifications@github.com wrote:\nyep. I think we if add-preid in release branch , it may just work;\nwhen merging release into master, we can 'graduate' those pre-release and have a full publish.lerna already has this behaviour as explained somewhere else\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.\n. This was fixed in #1522 . What does this issue have to do with --no-sort?\n\nlerna bootstrap concurrency controls how many individual package directories are installed at one time. That's an expensive call (to npm install), no way to get around it. Topological order (the default) ensures no package tries to use something in a prepare lifecycle that isn't there (from a sibling package).\nIf your packages are small, go to town with --concurrency, the only thing it can hurt is your CPU's thermal paste.\nJavaScript is single-threaded, there is no multi-threading.. the topological sort is batched (run --loglevel=silly and look for \"batched\"), so each level can be operated as concurrently as possible. if you've got a big long chain of transitive dependencies, this might mean you do indeed experience a sequential run. maybe don't have huge snake graphs?\n--concurrency is a flag so users can tweak it (4 isn't appropriate for all uses, just most).. I believe you're looking for the --since option. Indeed, you're right. Here's the proof on the 2.x branch:\n``patch\ndiff --git a/test/integration/__snapshots__/lerna-publish.test.js.snap b/test/integration/__snapshots__/lerna-publish.test.js.snap\nindex a7404de5..9afddefd 100644\n--- a/test/integration/__snapshots__/lerna-publish.test.js.snap\n+++ b/test/integration/__snapshots__/lerna-publish.test.js.snap\n@@ -380,6 +380,17 @@ Changes:\n \";\n+exports[stdout: updates canary 1] = +\"\n+Changes:\n+ - package-1: 1.0.0 => 1.1.0-alpha.hash\n+ - package-2: 1.0.0 => 1.1.0-alpha.hash\n+ - package-3: 1.0.0 => 1.1.0-alpha.hash\n+ - package-4: 1.0.0 => 1.1.0-alpha.hash\n+ - package-5: 1.0.0 => 1.1.0-alpha.hash\n+\"\n+;\n+\n exports[stdout: updates fixed versions 1] = `\n \"\n Changes:\ndiff --git a/test/integration/lerna-publish.test.js b/test/integration/lerna-publish.test.js\nindex 76609fde..0518313a 100644\n--- a/test/integration/lerna-publish.test.js\n+++ b/test/integration/lerna-publish.test.js\n@@ -82,6 +82,18 @@ describe(\"lerna publish\", () => {\n     expect(stderr).toMatchSnapshot(\"stderr: canary default version\");\n   });\n\ntest.concurrent(\"updates canary after change\", async () => {\nconst cwd = await initFixture(\"PublishCommand/snake-graph-2.x\");\nconst args = [\"publish\", \"--canary\", \"--skip-npm\", \"--yes\"];\n+\nawait execa(\"git\", [\"tag\", \"v1.0.0\", \"-m\", \"v1.0.0\"], { cwd });\nawait commitChangeToPackage(cwd, \"package-3\", \"feat(package-3): Add foo\", { foo: true });\n+\nconst stdout = await execa.stdout(LERNA_BIN, args, { cwd });\nconst hash = await lastCommitId(cwd);\nexpect(stdout.replace(new RegExp(hash, \"g\"), \"hash\")).toMatchSnapshot(\"stdout: updates canary\");\n});\n+\n   test.concurrent(\"uses meta suffix from canary flag\", async () => {\n     const cwd = await initFixture(\"PublishCommand/normal\");\n     const args = [\"publish\", \"--canary=beta\", \"--skip-npm\", \"--yes\"];\nAnd here's master (3.x):patch\ndiff --git a/integration/snapshots/lerna-publish.test.js.snap b/integration/snapshots/lerna-publish.test.js.snap\nindex 2f7145f4..7893aa4f 100644\n--- a/integration/snapshots/lerna-publish.test.js.snap\n+++ b/integration/snapshots/lerna-publish.test.js.snap\n@@ -373,6 +373,14 @@ Array [\n ]\n `;\n\n+exports[lerna publish updates differential canary: stdout 1] = +\n+Changes:\n+ - package-3: 1.0.0 => 1.1.0-alpha.SHA\n+ - package-5: 1.0.0 => 1.1.0-alpha.SHA (private)\n+\n+;\n+\n exports[lerna publish updates fixed versions: commit 1] = `\n v1.0.1\ndiff --git a/integration/lerna-publish.test.js b/integration/lerna-publish.test.js\nindex c30dcdd3..3986a106 100644\n--- a/integration/lerna-publish.test.js\n+++ b/integration/lerna-publish.test.js\n@@ -97,6 +97,17 @@ describe(\"lerna publish\", () => {\n     expect(stdout).toMatchSnapshot(\"stdout\");\n   });\n\ntest(\"updates differential canary\", async () => {\nconst { cwd } = await cloneFixture(\"normal\");\nconst args = [\"publish\", \"--canary\", \"--skip-npm\", \"--yes\"];\n+\nawait gitTag(cwd, \"v1.0.0\");\nawait commitChangeToPackage(cwd, \"package-3\", \"feat(package-3): changed\", { changed: true });\n+\nconst { stdout } = await cliRunner(cwd)(...args);\nexpect(stdout).toMatchSnapshot(\"stdout\");\n});\n+\n   test(\"updates independent versions\", async () => {\n     const { cwd } = await cloneFixture(\"independent\");\n     const args = [\"publish\", \"--skip-npm\", \"--cd-version=major\", \"--yes\"];\n```\n\nSo I wish we had better tests like these in the first place. The current --canary tests are kinda crap, only testing the \"no tags ever, publish everything\" case, which masked this issue rather well.\nAll that said, I think I still prefer the 3.x behaviour as it is now, except I really have to fix #277 so the differential publish works as intended. The original spirit of --canary seems to match this experience better (why else create the complicated ${sha}^..${sha} commit comparator?), whereas 2.x seems to be a bug, an oversight due to fiendishly complicated code, or a weird undocumented historical artifact.. If you're in a non-canary publish that didn't select all of the located packages, it can't be short-circuited.\nMy brain is fried right now, so feel free to take out those lines and see if the tests pass. If they do pass, then it's reasonable to assume that we can just skip the last bit?. #707 etc etc etc etc ad infinitum. If these are both packages in the same monorepo, it is relatively trivial to create integration tests to ensure API compatibility. Indeed, this is one of the primary benefits of lerna in the first place.\nI mean, presumably all the tests run during the development cycle that yields a breaking change in B? If they didn\u2019t, that\u2019s a larger problem. Publishing from CI doesn\u2019t really change this equation, except perhaps to emphasize the importance of good tests.\n\nOn May 2, 2018, at 00:41, Ameer A. notifications@github.com wrote:\n@evocateur @bochen2014 the issue is not bumping A's version, the issue is bumping the version of B used in A in the first place! This would mean that A is now potentially broken since it isn't guaranteed to accommodate for the changes introduced by B.\nThat is, my issue is not that A is now A@1.0.1, my issue is that A is now using the newer version of B even though we can't know that this new version of B would retain the behaviors/APIs used by A (the idea being that A wasn't modified during this process).\nWe have no issues bumping A automatically (when it's dependencies are updated) when we guarantee that it won't break it, and we don't have this guarantee with a major upgrade in B. This is further exasperated when using CI to release new changes, especially into production environments.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. In that scenario, I would not recommend using a monorepo. Lerna is not a deployment tool.\nOn May 2, 2018, at 08:20, Ameer A. notifications@github.com wrote:\n@evocateur I fully understand your point about integration tests, but we don't always have the time to factor in breaking changes into each dependent (Lambda), and in most cases we can tolerate running the Lambda with an older dependency instead of delaying major releases of dependencies and/or other Lambdas in the same repo.\nThat is, it could mean delaying many releases because each release requires modifying a lot of things in the repo that could be outside the scope of the feature being introduced. And I think many people in the same scenario would rather release new features (while leaving some services using older versions of the libraries temporarily) than delaying feature releases in order to accommodate for big changes.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. > we\u2019re merely using it to managed shared code and resources between packages\n\nThere's absolutely nothing stopping you from doing that with \"normal\" npm packages in different repositories. Or, for that matter, moving the services out of the monorepo and consuming the shared code as a normal dependency that one can be as sluggish about updating as you please.\n\nbumping it\u2019s used version of a dependency when it receives a major upgrade would mean BREAKING that package\n\nYou mean you've never updated a major version of a dependency and it ...just worked? I mean, not all breaking changes are equal. They might have \"broken\" part of the API you never used, so it's by no means necessary to bump your own major when you bump the majors of dependencies.\nTo put it another way, if you do not have sufficient tests to ensure that major releases do not break existing sibling consumers, those sibling consumers should not be located in the same monorepo.. I dunno who owns that pointer thingy. @hzoo?. Thanks for the detailed bug report.\nThe packages layout looks fine, though I really don't recommend your root manifest (./package.json) also be a package managed by lerna.\nIf you're adding dependencies to the root package.json, why not just ...npm i underscore in the root? The error you've hit appears to be an npm error, unrelated to lerna add as far as I can tell. The root node_modules is probably in a bad state, somehow, and needs to be removed and re-installed.. > I guess in this constellation lerna and npm dont work well together.\nIt's not lerna & npm specifically, it's configuring the root package.json to also be a lerna-published package (one reason I don't recommend this pattern). The root manifest should only be used for hoisting devDependencies and build/test scripts, and all packages should live elsewhere, as configured in the packages array of lerna.json.. That config does not work, because lerna does not support nested packages. Just move @nsp/app into src/packages, problem solved.. We'd need to write a custom comparator, since PackageGraph nodes don't sort lexically by themselves. Same difference from always looping through packages (removing the short-circuit), like I requested.. In general, I don't recommend using 0.0.x version ranges, they're very odd (and impossible to communicate breaking changes with).. > packages/**, bin/** by default are git ignored\nWhy? If this is something git does by default, I wonder why I've literally never been bitten by this?\n\nif you use yarn to run the test\n\nDon't use yarn. It's right there in CONTRIBUTING.md\nWe already make pains to make testing suck less on Windows, as well as disable certain global git configurations. I think it's fair to ask contributors to read the contributing guidelines and have reasonably up-to-date tools. If there's something missing from CONTRIBUTING.md, by all means let's fix that documentation.. Why do you have bin/** in your global .gitignore? Who recommends that as a best practice?. Well, I don't know if you've noticed, this isn't a VisualStudio-based project. It's an npm-based project, where bin is an extremely common directory name.. No, there really isn't. --conventional-commits will ignore docs: prefixes when computing version bumps, but otherwise it's a change to the JS source, and lerna publish needs to be consistent.. That's actually unintentional, since --ignore in the context of collecting updated packages has been changed to --ignore-changes, and only applies to lerna publish.\nSeems like --since is the trigger, in this case. In any event, I recently fixed this (inadvertently) by only respecting --ignore-changes in this context. --ignore filters package names, not git diffs.. Fix published in 3.0.0-beta.19. You should be able to, now. Is that not the case with the latest beta?\nThe issue was ignore, which is processed before since, was unintentionally passed into the since calculation. It no longer does that.\n\nOn May 4, 2018, at 02:30, Inlustra notifications@github.com wrote:\n@evocateur So we're not able to run lerna exec in all packages that have changed since last publish? \ud83e\udd14\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. This error log does not indicate that the stdio buffer was exceeded:\n1253 error import fatal: git diff header lacks filename information when removing 1 leading pathname component (line 30388)\n\n--max-buffer doesn't conflict with the logic of --flatten, so I'm pretty sure that's a red herring. Does lerna 3.x (lerna@next) exhibit the same error? (I suspect not). Lerna 3 will always use the locally-installed version of lerna, if present, even if the global version is different. You\u2019ll need to run npm install after lerna init (not strictly necessary, could just npm i -D lerna@next directly, then npx lerna import --flatten ../repo/to/import).\nIt is still possible that a bug exists, git repositories are extremely variable, and the patch rewriting \u201cimport\u201d that lerna does is not the most robust method (because it has to be so general).\n\nOn May 8, 2018, at 06:48, Ilya Radchenko notifications@github.com wrote:\nSo I tried installing latest, did lerna init (it removed the version in lerna.json and updated the version in package.json). I ran the command again and got the same failure. The logs show the old version.\nI double checked that node_modules/lerna/package.json had the right version and did lerna -v outside the project and both said 3.0.0-beta.19, where the log says 2.11.0\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Lerna 3 is now latest, btw, not next. If yarn upgrade doesn't change the version ranges in the leaf package dependencies, then that's not lerna's problem? Unless it's a major, I'm sure yarn folks would disagree that the ranges should be modified.\n\nIn the latter case, concerning build tool upgrades, that's something that can be worked around with lerna publish --force-publish=*. It happens rarely enough, and intentionally, that I don't see the benefit of baking it into lerna. I don't want to even attempt to judge what two different(!) lockfile formats are expressing, in terms of relevant changes, related to n possible leaf packages.. 1. Because lerna !== yarn. npm update modifies dependency ranges when a package is upgraded, you'll have to ask the yarn maintainers why they chose a different behaviour.\n1. Because your leaf package.json didn't change, and thus at any time your consumers could be getting different versions of React (assuming the dependency was specified as \"react\": \"^16.3.0\"). From lerna's perspective, that's not a change to the package, it's just an in-band upgrade of an existing dependency. Those aren't generally considered candidates for a release...\n...Unless there are other changes in the package that utilize new features in 16.3.1, and then yarn upgrade is not sufficient, and you should be modifying the dependency range in the affected package.jsons. That's how npm packages have worked for years, and it's among the patterns that lerna is enabling, not replacing.. useWorkspaces literally hands off to yarn during lerna bootstrap, there's no other special logic implied by that option.. (other than where to get the package location globs, too). > maybe react 16.3.0 was buggy and 16.3.1 fixes it\nThat means you need to change the range specified in the leaf package.json, thus eliciting a git diff under a package location, which lerna will then version and publish during the next release. There's really no way around this requirement, it's exactly the same for any npm package, monorepo or not.\nIn other words, it doesn't matter how many times you publish a package if the affected dependency range isn't modified somehow. yarn upgrade's behaviour is fine for the most part (if you're using the default ^ range specifiers), as long as none of your code depends on features/bugfixes in later versions of the dependency. When consumed, npm and yarn both will evaluate it to whatever satisfying version already exists in the tree, OR install the latest satisfying version at the time of execution.. You'd need to check if the current commit contains changes to a package-lock.json && build all packages || build --since.\ngit diff --exit-code --name-only HEAD^ -- **/package-lock.json \\\n  && echo lockfile-changed=false \\\n  || echo lockfile-changed=true\nWorks on my local clone, but I haven't tested it in a shallow clone (\u00e0 la CI). You should be running tests from the root, it's half the reason to use lerna in the first place (instead of repeating it in every leaf package).\nThat being said, it's quite likely we're dropping it on the floor. Would you mind trying in lerna 3 (lerna@next)? I refactored a lot of the internal promise handling, so even if it's not doing the most graceful logging, it should be always catching the promise rejection.. I don't think underscores are valid characters in package names? The commit history is very erratic, I can't tell when --conventional-commits was enabled in lerna.json, for example. The root changelog messages also have a bunch of \"undefined\" where the name should be, so I'm not sure this is a lerna issue.\nYou may have better luck opening an issue in https://github.com/conventional-changelog/conventional-changelog, which is the utility that lerna uses to generate the changelogs.. The root package-lock.json, or the leaf package-locks (packages/*/package-lock.json)?. We're not calling npm version, just modifying the package.json directly and then calling npm publish. I try to avoid leaf package lockfiles, much like lerna itself does (requires lerna 3.x).. > Is there any reason not to?\nFor lerna 2.x, it's because I don't want to deal with that old codebase anymore.\nFor lerna 3.x (current master), it's a bandwidth issue. I'm only one person, and I have a day-job.. Sure, a PR would be great.. publish and bootstrap are completely separate operations, and bootstrap should not elicit unstaged changes. thus it needs to be updated during lerna publish. but it is not, at present, because i personally never use nested lockfiles.. Relative file: specifiers, just like the lerna source. It\u2019s a unified package-lock for the entire tree, no bootstrap required.\n(I really need to document this pattern, I feel like I\u2019ve repeated myself about eleventy-billion times over the past six months)\n\nOn Jun 25, 2018, at 22:00, Pat Cavit notifications@github.com wrote:\nI'm currently working around this by running\n\nnpx lerna exec -- npm i\nafter each lerna publish. It's not ideal but it at least gets things stabilized again.\n\n@evocateur what's your argument against nested lockfiles? I've got all my devDependencies hoisted to the root, but I still want to have consistent installs of the regular dependencies for everything in my packages dir.\nI'm currently using npm ci for installs and I definitely don't want to let it just randomly decide to upgrade a nested package.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @trippingtarballs The git add in your custom lifecycle script is perfectly appropriate. Just because you're using Lerna doesn't mean Lerna must do all the work.. Sorry, I just tried to look up some documentation on this, and it's embarrassingly absent, or at least so hard to find as to be missing...\n\nYes, the packages config in lerna.json is a list of globs that match directories containing a package.json, which is how lerna recognizes the \"leaf\" packages (vs the \"root\" package.json, which is intended to manage the dev dependencies and scripts for the entire repo).\nBy default, lerna initializes the packages list as [\"packages/*\"], but there's nothing stopping you from using [\"package1\", \"package2\"], etc (globs relative to the directory that lerna.json lives in, which is the root of the repo 99.9% of the time). The only restriction is that you can't directly nest them, but this is a restriction shared by \"normal\" npm packages as well.\nFor example, [\"packages/*\", \"src/**\"] matches this tree:\npackages/\n\u251c\u2500\u2500 foo-pkg\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 package.json\n\u251c\u2500\u2500 bar-pkg\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 package.json\n\u251c\u2500\u2500 baz-pkg\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 package.json\n\u2514\u2500\u2500 qux-pkg\n    \u2514\u2500\u2500 package.json\nsrc/\n\u251c\u2500\u2500 admin\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 my-app\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 package.json\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 stuff\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 package.json\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 things\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 package.json\n\u251c\u2500\u2500 profile\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 more-things\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 package.json\n\u251c\u2500\u2500 property\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 more-stuff\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 package.json\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 other-things\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 package.json\n\u2514\u2500\u2500 upload\n    \u2514\u2500\u2500 other-stuff\n        \u2514\u2500\u2500 package.json\nTL;DR: ./packages/* is considered a \"best-practice\", but is by no means a requirement for using lerna.. Awesome, thanks!. I suppose it's possible, although it has the potential to create a blizzard of noisy, hard-to-read output.\nI'd recommend just upgrading to lerna 3, run npx lerna link convert (which uses relative file: specifiers), and kick lerna bootstrap to the curb (all you need is npm install in the root). This is what the lerna codebase (in master) does today.. @anandsuresh Nope.\nI'm happy with relative file: specifiers and npm install instead of lerna bootstrap, personally.. - \"hoisting\" is intentional, as npm install packages/foo does not install devDependencies anyway (just like a \"normal\" npm install)\n- \"hoist\": false is irrelevant\n- \"foo\": \"file:packages/foo\" is the intended root specifier, i've never hit that bad relative path in the root (over about a dozen conversions of internal monorepos in the past couple months)\nsorry for the lack of docs. Yeah, I guess I never accounted for the \"use local devDependencies to influence topological sort\" case. Seems like maybe that loop should be aware of \"am i local or not\".\nTBH, I don't think that's a very useful trick, as it is completely ignored during lerna publish. Build order shouldn't be predicated on which tools they depend on.\nIf you're using relative file: specifiers, you never need to use lerna bootstrap or lerna link again. Just npm install (or npm ci) in the root.\nAs for node-sass, that sounds like a tool that isn't using node's module resolution algorithm correctly. FWIW, file: specifiers create an almost identical root node_modules layout (symlinks to local packages, etc) that Yarn Workspaces do. Both patterns rely on proper resolution of node_modules directories.. Ah, ok. Interesting. The lack of local bins (or at the very least, local bin resolution) is a somewhat distinct issue. I've been noodling about it, probably need a root postinstall lerna link bins or something.... --ignore only stops a given package from being bootstrapped from the \"root\", it doesn't stop transitive (local) dependencies from linking and building, etc. The only case where lerna bootstrap installs a local name from npm is when the version range is not satisfied by the local version.. I don\u2019t think filtering bootstrap makes sense at all. Then again, I\u2019ve largely stopped using bootstrap altogether.\n\nOn May 24, 2018, at 16:32, Inlustra notifications@github.com wrote:\n@evocateur We\u2019ve ended up working around it - but out of curiosity, what\u2019s the use case for such a thing? \ud83d\ude0a\nI feel like I\u2019m missing something, I guess the naming confused me \ud83d\ude05\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @ibezkrovnyi You shouldn't have 200 packages in a monorepo, maybe? Lerna isn't a replacement for proper separation of concerns.. @JabbyPanda Regardless of the actual number, bootstrapping in a monorepo will always incur costs beyond that of a \"normal\" package repository. This is how lerna bootstrap works, and it isn't likely to change given the existing complexity of the command.. Ah hell, bootstrap is explicitly filterable, so let's just do it the easy way: overwrite targetGraph when filteredPackages.length !== targetGraph.size.\n\n```diff\ndiff --git a/commands/bootstrap/index.js b/commands/bootstrap/index.js\nindex 29e2d3a..c4ff75e 100644\n--- a/commands/bootstrap/index.js\n+++ b/commands/bootstrap/index.js\n@@ -106,6 +106,11 @@ class BootstrapCommand extends Command {\n     chain = chain.then(() => getFilteredPackages(this.targetGraph, this.execOpts, this.options));\n     chain = chain.then(filteredPackages => {\n       this.filteredPackages = filteredPackages;\n+\n+      if (filteredPackages.length !== this.targetGraph.size) {\n+        // an explicit --scope, --ignore, or --since should only symlink the targeted packages, no others\n+        this.targetGraph = new PackageGraph(filteredPackages, \"allDependencies\", this.options.forceLocal);\n+      }\n     });\n chain = chain.then(() => {\n\n``. [v3.10.3](https://github.com/lerna/lerna/releases/tag/v3.10.3) has the fix. @krotscheck Sorry, I've been slammed at work. I agree with Doug, we shouldn't be automatically force-pushing.. I don't know why the Appveyor build is failing, it doesn't make any sense. :/. Still trying to get the dumb CI to pass, but this PR has waited long enough. Thanks for your patience, @krotscheck!. We don't show the (non-error) logs because publish is run concurrently, and a mishmash of interpolated output helps no one.. v3 _does_ retain the distinction betweendependenciesanddevDependencies(transform is [here](https://github.com/lerna/lerna/blob/ce5c4842e5c927beaa13779c6429a8d7c5b5a933/utils/npm-install/npm-install.js#L94)). It's not likely to get back-ported, just upgrade to lerna 3.. If you're using a lockfile, it needs to be versioned?. Thanks!.--canaryand--conventional-commits` are completely separate code paths.\nTo control the version bump of --canary, pass --cd-version <keyword> (keyword defaults to \"minor\" when using --canary).. Oh, I know. The two flags aren\u2019t meant to interact, and should probably throw an error or at least warn loudly? PRs to improve the documentation are always welcome!\n\nOn May 25, 2018, at 10:11, Robert Rossmann notifications@github.com wrote:\n@evocateur That is, unfortunately, not a viable option in independent versioning scheme as the version bump would be different for each package, depending on the contents of individual commits (due to --conventional-commits).\nIn my opinion, the current behaviour of this flag's combo is unintuitive, at least. It would be best if they could be somehow aware of each other, and if that is not something the project's maintainers are interested in, perhaps the docs could be made a bit more explicit about this...?\nThanks!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Lerna itself does conventional commits with a preid (beta, right now). Exact should be fine, though not really necessary in my experience.\n\nThe major difference between that arrangement and canary is that canary does not make any commits, and conventional commits etc always does. Non-canary is not presently very well-suited for CI publishing, for this reason.\n\nOn May 25, 2018, at 22:49, Gordon Smith notifications@github.com wrote:\n@evocateur What about lerna publish --exact --conventional-commits --preid=beta, what is the expected behavior there?\nI know that both the examples I gave above don't do what I would expect and I was just reaching out to see if any folks had a working process for releasing a \"rc\" build while using conventional-commits (I don't mind doing some manual stuff!!!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Lerna itself uses conventional commits with a prerelease preid (beta). You need to specify --cd-version prerelease. All the other stuff is way out of scope for lerna.\nOn Jun 14, 2018, at 20:32, sgendler-stem notifications@github.com wrote:\nIt certainly does SEEM like it shouldn't be that difficult to integrate --preid with the conventional commit recommended versions, since it seems like you could just add it as a suffix with a hyphen and call it good, but I'm guessing that there's going to be complexity added if doing a second pre-release publish, since that might end up with -suffix1-suffix2. It's too late in my day to try to unwind all of that logic and figure out the best way to specify the preid such that it actually gets passed to the semver library when the version is incremented, rather than doing a dumb string-append to semver's output, but this seems like it would go a long way toward making CI auto-publish workable.\nMy intended workflow is as follows:\nDeveloper submits pull-request to release branch with update.\ntrigger pre-release publish via conventional commits to increment versions correctly, but add a pre-release suffix of label.short_commit_hash.\nbuild docker images of pre-release services which depend on pre-release packages via npm install\npush docker image to repo with tag service-version, which is now next {semver}-{label}.{short_commit_hash}\nupdate sandbox infrastructure to run image:{semver}-{label}.{short_hash}\nlaunch integration test image. When it completes successfully, it trips a webhook that merges the pull request (or just approves it).\nDeveloper pushes changes to release branch (merges PR):\ntrigger release publish via conventional commits to increment versions correctly and publish to npm\nbuild docker images of services, which depend on released packages\npush docker image to repo with tag service-version, which is now next {semver}\nupdate staging infrastructure to run image:{semver}\nlaunch integration test image. When it completes successfully, trip a webhook that asks for release approval.\nRelease is approved\nupdate prod infrastructure to run image:{semver}\nFor now, I can modify my workflow to build the sandbox versions entirely from local monorepo packages and skip NPM for sandbox testing entirely. But that means I cannot exercise the npm publish process or build service images via npm install until I am pushing a production release to staging, which is a drag, since those things can break, too. It would be MUCH better to be able to specify a pre-release suffix when using conventional commits.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Basically, an explicit prerelease bump will always override the version recommended by conventional commits. The prerelease keyword is equivalent to the prepatch keyword as far as semver is concerned. There is no affordance for prereleases with vanilla conventional commits as far as I can tell, and Lerna is just calling the conventional-changelog API.. Because conventional commits has no concept of an automatic prerelease. prerelease is a specific semver convention that lerna applies, always overruling the version bump suggested by --conventional-commits.. @jenniesyip Thanks so much for the detailed analysis! I reopened this issue and added a tag that tells the bot to stay away, sorry about that.\n\nI'm a bit busy at work right now, but I hope to circle back by the end of the week. Much food for thought.. What does lerna diff report?. If every other local package depends on that package, they will also be bumped (because lerna bumps the dependency range of the package with changes). This is how lerna works.\n\nOn May 24, 2018, at 03:13, Marco Fugaro notifications@github.com wrote:\n@evocateur right now only this\nafter I committed some changes to the package accurapp-scripts, the lerna diff is showing me the changed lines only of the files inside accurapp-scripts I changed, nothing else.\nI tried to publish again after this, and it still prompts for every other package also.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. All I can think of is that your tags are missing, somehow, and lerna thinks it has to publish everything. Might be because you last published on a branch that was then merged into master, which corrupts the tag references.. No, by ensuring that the tags exist, are reachable from your current HEAD, and such. git describe is an easy way to test \u201creachability.\u201d\n\nIf the tags are missing or mangled, you\u2019ll need to restore them (as annotated tags) on the master branch. Then lerna will properly ignore packages that have not changed since the last release (annotated git tag).\n\nOn May 25, 2018, at 07:46, Marco Fugaro notifications@github.com wrote:\nHmm interesting, might be, how can I try to fix it? By removing the tags?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. As long as the most recent reachable tag is annotated (not lightweight), that\u2019s all you need.\nOn May 29, 2018, at 08:04, Marco Fugaro notifications@github.com wrote:\n@evocateur Thank you! I will check the tags.\nDoes lerna need EVERY past publish tags to be changed, or just the latest ones? Because the latest ones are already present in the same branch I'm publishing from (not master)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Please add more information, such as the lerna.json and other such information requested in the issue template.. --hoist is always an explicit flag, it is never \"on\" by default. Just don't pass it (or configure it from lerna.json, remove any \"hoist\": true fields).\n\nTo select individual packages to avoid hoisting, use --nohoist.. It's weird that publish even cares to distinguish between \"allDependencies\" vs \"dependencies\" when constructing the graph. Batching \"dependencies\" merely omits devDependencies, which is the traditional location for pairing with peerDependencies (and would \"solve\" your issue). There's a comment explanation, but it's still weird. (I'd rather just throw on all circularity, tbh)\nWe would need to improve the peerDependencies parsing to recognize local siblings, and I doubt that work would be easy to back-port into the 2.x branch. 3.x will be latest soon enough, however. \nNotably, since v2.7.0 lerna does not mutate peerDependencies during publish (#1187).. I don't really see this happening. Anything that you rarely install and never publish seems like it should be using local relative file: specifiers instead.. Add it to your lerna.json:\njson\n{\n  \"command\": {\n    \"bootstrap\": {\n      \"hoist\": true\n    }\n  },\n  \"packages\": [\"packages/*\"],\n  \"version\": \"1.2.3\"\n}\nAny flags passed on the CLI will overrule the keys configured in the command.* namespace.. The errors now are dumb timing issues, not logging issues, as far as I can tell.. Apologies for the long delay in review, I really appreciate Windows help!. Why not just have the binary files live as raw JS, importing a compiled \"implementation\" and calling it?\nThat being said, properly-expressed dependencies between the packages should elicit topologically-sorted execution of the lifecycle scripts during bootstrap. I have no experience with tsc's behaviour in this department, but I can guess it's doing a lexical iteration of package directories and failing due to this mismatch.. > The problem is that lerna is doing the link action at a time before any package has been built, so it fails to symlink the binaries that will be generated (obviously), and takes to effort to correct that later on.\nMy apologies for the incorrect assumptions. The bootstrap algorithm is fiendishly complex, but you\u2019re welcome to propose changes to accomplish your goal.. If you're using yarn workspaces, the bug you're experiencing is in Yarn, not lerna. lerna bootstrap just calls yarn in that case.\n\nOn Dec 9, 2018, at 17:02, Jeff Dolle notifications@github.com wrote:\nI just encountered this bug this past week.\nFor others struggling, my temporary solution was to delete the node_modules and reinstall dependencies for the dependent package. And because I use yarn workspaces, deleting the node modules and re-yarning doesn't need to redownload anything.\n\"fixSymlink\": \"rm -rf ./node_modules && yarn\",\n\"build\": \"yarn fixSymlink && someBin\",\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n.  #707 ad nauseam. Your CI process is wrong. stderr is where logging belongs.. To bootstrap? Just add hoist: true to your lerna.json:\njson\n{\n  \"command\": {\n    \"bootstrap\": {\n      \"hoist\": true\n    }\n  },\n  \"packages\": [\"packages/*\"],\n  \"version\": \"1.2.3\"\n}\nIf you're using --hoist with bootstrap, that's what you always want, and thus should be configuring it in lerna.json.. lerna add calls lerna bootstrap internally after making its changes, which merges in lerna.json config.. lerna bootstrap --no-ci doesn't work?. Hrm, okay, that wasn\u2019t intended. A CLI flag should always override file- or env-based configuration.\nOn Jun 5, 2018, at 03:09, matt brennan notifications@github.com wrote:\nI tried it and it didn't seem to work \ud83e\udd37\u200d\u2640\ufe0f Financial-Times/x-dash@8a18f7e\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Good catch!\nOn Jun 5, 2018, at 09:10, matt brennan notifications@github.com wrote:\ndid a bit of digging into yargs' parsing and it looks like .config() takes precedence over command line args\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I plan on releasing the next version of lerna 3 sometime this week.. I plan on releasing the next version of lerna 3 sometime this week.. Not intentional, no, but the result of a feature I personally haven't used in over a year. I'm not sure why you wouldn't want a faster install during a CI build.\n\nYou should still be able to pass --no-ci to disable it, which is relatively easy to encode into your CI scripts. Switching to relative file: specifiers that serialize the whole tree at the root would be better long-term than relying on lerna bootstrap.. Yeah, that's an unfortunate side-effect from how the options are configured. I should probably move this block into the base command constructor, where the options are merged with the config file.... @raymondfeng Next release should fix this for you properly.. You don't need to import an application that doesn't exist yet. Just add the lerna stuff (in the existing app1 repo) and then move the existing app into its new home.\n```\nmkdir -p packages/app1\ngit mv src test packages/app1/\ncp package.json packages/app1/\nnpx lerna init\nmodify root package.json appropriately\ngit commit -am \"chore: convert to lerna monorepo\"\n```. i don't understand angular's persistence with stupid module resolution tricks.\nwhat exactly are you trying replace the current linking with? huge wall of text doesn't parse very well.\n(lerna3 & npm5+ relative file: specifiers work great for me.). It's weird, there is code specifically designed to catch syntax errors in the package.json file...\nOooh, I bet it's the upgrade of cosmiconfig. I didn't make any effort to persist the rcStrictJson config, and that's probably swallowing the syntax error due to a more lenient parser. In combination with lacking a lerna.json file, possibly?. Well, after failing to reproduce by adding tests, it occurs to me that the manifest() getter is indeed swallowing the syntax errors when there is a valid lerna.json (cosmiconfig never gets to it, as it searches for lerna.json first).\nI think I have a fix.. The value of the root manifest's name field does not have any special requirements as far as lerna is concerned (other than being present and non-empty, same as npm). npm already enforces uniqueness, especially when using relative file: specifiers.. I think you\u2019ll find lerna 3 doesn\u2019t mangle as much as v2, if you insist on using the hacky bootstrap method.. I don't understand your reticence to \"hoist\" your devDependencies to the root. It's how lerna should have behaved in the first place, imo.. Lerna itself has been dogfooding the relative file specifiers for almost all of the 3.0 betas so far.\nNothing has changed (nor will change) to our support for \u201cindependent\u201d versioning. I switched a few internal monorepos to it just last week.\nA dev dependency that takes 15 minutes to install sounds like a nightmarish urban legend. I don\u2019t think it\u2019s lerna\u2019s responsibility to fix that, though you have my sympathy.\n\nOn Jun 14, 2018, at 19:36, Pat Cavit notifications@github.com wrote:\nLerna automatically rewrites local path dependencies to monorepo packages during publishing. It's how I've published the last 9-10 modular-css releases.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. You should still run eslint from the root, but nesting config files is definitely possible. I use the pattern myself in several private monorepos, and even the odd public one (hit t and search for eslintrc.yaml).\n\nNothing lerna does changes how eslint resolves its config files, so I'm going to close this.. I literally can't debug without an actual reproduction. Telling me what your tree looks like is worthless without the actual contents of the package.json files.. A local sibling\u2019s dependencies are only installed under that module, and symlinked into local dependents. All external top-level dependencies of a given local package are always installed.\n\nOn Jul 3, 2018, at 08:25, StrahilKazlachev notifications@github.com wrote:\nMy issue seems the same, quite hard to share.\nB depends on A.\npackages\nA - all is fine\nB - not fine, A dependencies are not installed\nDoing lerna exec -- npm i && lerna link does what I want.\nFrom bootstrap description\nnpm install all external dependencies of each package.\n@evocateur does this mean that the external dependencies of the linked packages will not be installed?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. If you\u2019re exploiting flat resolution to access a transitive dependency, you probably shouldn\u2019t be. I don\u2019t recommend bootstrap, anyway, preferring relative file: specifiers.\nOn Jul 3, 2018, at 09:14, StrahilKazlachev notifications@github.com wrote:\n@evocateur Do I understand correctly that when using bootstrap a local sibling external dependencies will stay \"under\" it(local-pkg-B/node_modules/local-pkg-A/node_modules/ext-dep-1) - loosing the flat structure in local-pkg-B/node_modules I would normally get with npm install?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I don\u2019t build packages with Webpack, but I\u2019ve had no difficulty with Webpack-based applications watching changes from Rollup-watched package output.\nOn Jul 15, 2018, at 07:33, Scott McPherson notifications@github.com wrote:\n@evocateur The problem that I ran into while using file specifiers when designing our front-end was that we have multiple core packages that are reused across four clients. They are all in the same mono repo. And the core packages are all started and built with webpack. When we use the file specifiers, we lost live reload, which made file specifiers unusable for our use case.\nHave you ran into this issue?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. i'd rather just make it an optional positional glob, processed in order.. Regardless of npm client being used, this isn't a Lerna problem. It handles the number of listeners that it adds right here. Lerna can't control what other programs do.. Thanks!. yeah, lerna add doesn't do that right now. lerna upgrade is not implemented yet.. It's something I'd like to do, and would certainly collaborate actively if someone wants to make a pull request.. why not lerna@3? i've been using it \"in production\" for months now.. Literally run lerna bootstrap with no options? (Assuming you have npm5 active in the $PATH)\nOn Jun 13, 2018, at 18:34, Matthew Herbst notifications@github.com wrote:\n@evocateur changing to lerna@3, while something we plan on doing, is well out-of-scope for the current project of switching from yarn to npm. Further, even when we switch to lerna@3, we are never going to move all of our dependencies into one place at the top. Not only does that break traditional package structure (including a myriad of tools), but it also locks us in to use Lerna/hoisting/using a mono-repo.\nI'd appreciate it if you could assist in the original question, which is how to generate package-lock.json files in Lerna, ideally per-package with local packages includes and devDependencies marked as such.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. The top-level manifest should be devoted to shared devDependencies, and shouldn\u2019t be a published package itself. Hoisted bootstrap really doesn\u2019t play well with lockfiles, which is among the reasons why I recommend using relative file: specifiers to express sibling dependencies (thus enabling the root lockfile to manage the entire tree, including the lerna-managed packages).\nOn Jun 13, 2018, at 19:06, Matthew Herbst notifications@github.com wrote:\nAlso, is there a way to run lerna bootstrap --hoist and not have --hoist change the top-level package-lock.json? We want to use --hoist when building for speed, but we want the top-level package-lock.json to reflect the top-level package.json.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. To use relative file specifiers:\nnpx lerna link convert\nnpm i packages/*\n\nNow you don't need lerna bootstrap, and everything is serialized in the root lockfile.\nTo update the lockfile for leaf package dependencies, npm i packages/* again. Any individual changes to leaf dependency ranges will necessitate running npm i.\nZillow's fork of airbnb/javascript does it: https://github.com/zillow/javascript/blob/latest/package.json. Pretty much exactly, except you only ever need to run lerna link convert once, regardless of bootstrap status. npm install itself handles all the linking seamlessly from that point on.\n\nOn Aug 5, 2018, at 10:48, Thomas Boyt notifications@github.com wrote:\nAh, thanks! I'll give this a shot.\nSo I assume a new best practices guide would look something like\nUse npx lerna link convert (or just npx lerna link if you haven't already bootstrapped?) to create relative file specifiers\nRun npm install packages/ to install every package in the repo as a dependency of the root project, which will result in file: dependencies in the root project\nPut all devDependencies in the root-level package.json, because presumedly npm install packages/ will not install devDependencies of the packages (I might be wrong on this/maybe there's a way to configure it?)\nWhen you add a new package, run npm install packages/newpackage from root, and re-run lerna link\nTo install the project fresh, just run npm install && npx lerna link in the root, and never run npx lerna bootstrap\nWonder if there are any hidden downside to this format, but it seems good to me. I'll give it a shot in my repo!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Sounds like serverless needs to fix something.\n\nnpm will automatically \"bundle\" conflicting majors under the relevant leaf node_modules. However, there is no way (that I am aware of) to tell npm to force this status.\nI don't recommend deploying from a lerna layout, in any case. Too many conflicting priorities that lerna itself will never likely support, as it is not a deployment tool.\n. The versioning mode makes no difference when using local file specifiers.\n\nOn Nov 6, 2018, at 08:52, Brian Muenzenmeyer notifications@github.com wrote:\nPretty much exactly, except you only ever need to run lerna link convert once, regardless of bootstrap status. npm install itself handles all the linking seamlessly from that point on.\n@evocateur @thomasboyt does this set up steps assume running lerna NOT in independent mode?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @zachwolf Thanks for the very clear reproduction! And yes! I have!\n\nA few things, sorry they're a bit jumbled in my head as I braindump:\n\n\nI am fairly certain npx lerna run yellow from the root of your example would still work, because lerna run still calls npm run <foo> in a subshell with execa, which adds parent node_modules/.bin to the PATH automagically via npm-run-path.\n\n\nHowever, this is not the case when you've, for example, run lerna link convert and are now using relative file: specifiers from the root. In a way, the file: specifiers are telling npm to treat the local packages as install targets, symlinking only the \"production\" dependencies. Because of the way the node_modules resolution algorithm works, it makes sense that code in those leaf directories can still require modules that are actually installed in the root node_modules directory.\n\n\nHowever, npm run itself only appends node_modules/.bin to the PATH once, for the CWD (the leaf directory, as your reproduction ably demonstrates). npm run does not do the fancy npm-run-path logic, but instead uses npm-lifecycle internally (lerna does too).\n\n\nThis npm-lifecycle behavior is frustrating to me for a number of reasons, especially various lifecycles that are called during lerna version and lerna publish that will fail if they don't use the grody relative paths in the lifecycle script (\"prepare\": \"../../node_modules/.bin/babel ...\" etc). I don't have a solution just yet, but it probably involves a PR upstream to npm-lifecycle (at worst,  a lightweight fork?).\nFor the most part, I cheat when explaining to folks the workaround for this issue, telling them they should always run dev scripts from the root, and using the lerna run cheat to paper over the missing binary resolution. I still believe one should run dev scripts from the root, but this obviously has shortcomings, especially in the version and publish lifecycles I described earlier.. hrm, weird. coulda sworn local siblings were detected already, as well as the versioning method (semver-satisfied or relative-file-spec).... I don't know why you would use yarn with lerna and not use yarn workspaces (which completely replaces lerna bootstrap).\nIn any case, lerna@3 no longer brutally mangles the entire manifest during bootstrap, it only slices out the local siblings.. That sounds complicated. Lerna 3 does what you want.. So I'm not sure this is lerna's responsibility? I mean, this sort of thing arguably belongs in a separate CLI, run once to copy licenses etc, or perhaps in a preversion lifecycle in order to validate that the licenses exist, and fail if necessary before lerna publish gets around to actually publishing. npm publish always includes LICENSE.md (and similar) when it finds them.\nIt is my understanding that the license field of package.json is also sufficient for this sort of thing? As long as it matches an SPDX identifier, it is not strictly necessary to include yet another copy+paste of the license text.. @honzajavorek Thanks for the push back, I understand a lot better now, and completely agree. Sorry for the scattered skepticism, I've been punishingly busy the last few weeks. I will rebase your changes, since I caused the conflicts.\nThanks again for all your efforts!. @honzajavorek Thanks for the push back, I understand a lot better now, and completely agree. Sorry for the scattered skepticism, I've been punishingly busy the last few weeks. I will rebase your changes, since I caused the conflicts.\nThanks again for all your efforts!. @StrahilKazlachev Definitely, I think we can tackle that in a separate PR.. @StrahilKazlachev Definitely, I think we can tackle that in a separate PR.. If you're using lerna@3, all you need to do is change your --preid (most convenient to do in a lerna.json \"durable\" configuration).\nFor example, I recently changed preid beta -> rc and then published everything, even \"unchanged\" packages.\nIf you're on lerna@2, lerna publish --force-publish and then choose the appropriate prerelease id should do the trick.. $ lerna -v\n3.0.0-beta.21\n```\n$ lerna add -h\nlerna add  [globs..]\nAdd a dependency to matched packages\nPositionals:\n  pkg    Package name to add as a dependency                                                    [string] [required]\n  globs  Optional package directory globs to match                                            [array] [default: []]\nCommand Options:\n  --dev, -D  Save to devDependencies\n```\nI don't think we need another alias, -D is expressive enough.. This is an npm problem, related to the fact you're hoisting. I've toyed with the idea of re-implementing npm outdated for lerna, but it's a bit beyond the capacity of one person (me, the only active maintainer).. You're hoisting, there's no possible way it used to work with the same config (the dependencies literally are not where npm expects them, hence the error). You shouldn't generally need to have lerna installed globally, thanks to npx. That logging seems to indicate lerna@2 is actually installed in the local node_modules.\nnpm -g rm lerna\nnpm i -D lerna@next\nnpx lerna ls. Yeah, --exact isn't supported right now. lerna add -h would describe it if it was enabled.\nYou can, however, pass an explicit version specifier and it will save the dependency as if --save-exact was passed to npm install:\nlerna add lodash@4.17.10. Err, didn't mean to close. Respecting --exact would be a nice PR.. You would need to create your own conventional-changelog preset, and then upgrade to lerna@3, which allows presets for the changelog generator as well as the version bumper (lerna@2 only supports passing presets for the latter).\nWriting a conventional-changelog preset is out of scope for lerna.. Out of beta? It probably should be already, since I\u2019ve been using it \u201cin production\u201d for months now.\n\nOn Jun 16, 2018, at 00:56, QingLeiLi notifications@github.com wrote:\nThanks for reply.\nI read the source code of lerna @ 3 roughly. It should meet my needs. I will try it.\nIs there a approximate date for the release of lerna @ 3?\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.\n. At this point, integration has stalled due to conflicting schedules (mostly my own, since I'm the only active maintainer of lerna and I have a very busy day-job). I'd like to improve the auto-publish in CI story, but I don't have a timetable right now.. The version field of the root manifest in a monorepo is irrelevant, as it should not itself be a published package. Using yarn workspaces doesn't make a difference in this regard.\nSome tools expect the repository version to be held by the root package.json\n\nIf they are designed to work in a monorepo, those tools are broken.\nIf not, which is much more common, those tools need to be updated to understand monorepos. Otherwise, their output is suspect, as the structure of a monorepo is not intended to mimic that of a \"traditional\" package repository (one package :: one repository).\nconventional-changelog made this transition, and is available on lerna publish via the --conventional-commits option.. \"packages\": [\"../shared-habit\"], isn't how Lerna works. You're looking for npm link.\n. Lerna 3 currently runs these lifecycles (in order, but not necessarily contiguous) for every package being published:\n\npreversion: before package version has been bumped\nversion: after a package version has been bumped, but before the package.json has been staged for commit.\npostversion: after the commit has been made\nprepare/prepublishOnly: before package tarball is created\nthis is probably the phase you're looking for, as lerna does indeed serialize the in-memory package.json between this phase and the previous (adding the gitHead property that npm publish normally does automatically)\npostpublish: after npm publish succeeds\n\nLerna automatically checks out any unstaged modifications made to package.json files after all publishes are finished.. @mcous Sorry for the delay, been really busy at work. I did some reorganizing that caused conflicts, so I'm gonna resolve those and merge this today. Thanks again for your patience!. @mcous Sorry for the delay, been really busy at work. I did some reorganizing that caused conflicts, so I'm gonna resolve those and merge this today. Thanks again for your patience!. CI failures are unrelated, no worries.. CI failures are unrelated, no worries.. We already use a library (get-port) that falls back to a random port if the preferred port isn't available.. Yeah, that particular part of the docs is wrong. It should have been something like @morewry described above.\n\nit publishes everything with changes plus the packages you've forced\n\nThere's nothing stopping you from going into the subdirectory of the desired packages and doing your own npm publish. --force-publish was not designed to do what you intend.\nMaybe publish more frequently if a large number of published packages in one changeset offends you?. Sorry, no, that's not what --force-publish is designed to do. #707, etc, etc, ad infinitum.. Actually, either command or commands is supported, but command is preferred and thus evident in the documentation. The commands namespace is deprecated in lerna v3.. This has been fixed in master, but is unlikely to make it into the 2.x release line as the codebase has changed dramatically.. --conventional-commits \"not working\" with the default fixed versioning mode is certainly news to me, since Lerna itself uses it. (You shouldn't pass \"independent\": false under command.publish, it's not controlled there)\n\nbut the remaining packages are still in v0.1.37\n\nThat's exactly how Lerna works. The only change since v0.1.37 was in packages/Button, and since no other package depends on @react-core/button, no other package is published.. Does this reproduce with lerna 3?. Linting should be run from the root.\n\nOn Jul 12, 2018, at 15:58, Jakub Jirutka notifications@github.com wrote:\nlerna 3.0.0-beta.21 -- lerna run lint --stream, even with --loglevel silent, produces annoyingly duplicated output when some script fail.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Exactly.\nOn Jul 13, 2018, at 02:07, Jakub Jirutka notifications@github.com wrote:\nLinting should be run from the root.\nWhat do you mean? That lint script should be in the root package.json and run for all packages at once?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. You should publish from master. I don't know why you have a separate branch, isolating the tags that lerna creates and whatnot. There is no difference between * and ^0.0.15-63 as the version specifier for a local sibling package.. #91 #901 #1282\n\nTL;DR: Point your leaf package.json main field to the transpiled output, and bob's your uncle.. This is how npm packages have worked for a decade. Lerna is just managing multiple packages in a single repository.. explanation in linked issue. It sounds like A and B in your example shouldn't be living in the same monorepo. How did B's bug not break A's unit/integration tests?. > In the example I gave above, package A is the main app, and package B is a subapp. If there's a bug in a subapp, I want to hard code its version in the app and but still allow changes to other subapps to be merged and pulled into the app.\nIt is for exactly this reason that I suggested the application live in a separate repository from the sub-applications, if you are unwilling to let the local links persist. The app repo\u2019s lockfile becomes the release gate, and (assuming the sub-apps do not depend on other sub-apps), you can achieve the behavior you desire.\nOtherwise, why not just \u201cfix forward\u201d once the bug is revealed? If you\u2019re just using lerna as infrastructure to coordinate several local paths into an eventual webpack bundle, you might as well treat the bug as an application-level priority.. It sounds like the module in question should be refactored into a factory, not a singleton. In any case, copying instead of linking is not in scope, sorry.. It\u2019s not lerna\u2019s job to keep third-party plugins functioning. It looks like it needs to be updated to the latest conventional-changelog interface.\n\nOn Jul 11, 2018, at 15:02, Anand Tiwary notifications@github.com wrote:\n@evocateur Any suggestions on this please?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Thanks!. Whoops, yeah, that's definitely happening.\n\nI've fixed it in master, which means lerna 3.x will have the fix as soon as I publish it. I don't have time to update the 2.x line, as it is a dramatically old codebase now, and I'm going to promote v3 out of beta soon.. @christophehurpeau Whoops, yes, that is definitely an oversight. It should definitely re-throw, perhaps based on an opt-out config option? (lerna run has --no-bail, for example). The exit codes for those two commands serve different purposes. If you need to run something after modules are actually published successfully, place it in a postpublish lifecycle in the root package.json file.. Are you passing --npm-client cnpm (or configuring \"npmClient\": \"cnpm\" in lerna.json)? I don't see anything blocking any --npm-client other than yarn from being called with --hoist.. I can't reproduce without your lerna.json and more detailed repo state.. @alampros Did the dist-tag next get set correctly?\nUh, whoops, I think I may have found a bug where --npm-tag isn't being passed correctly...\n(--canary and --conventional-commits have no relationship, as --canary skips lerna version logic). > Uh, whoops, I think I may have found a bug where --npm-tag isn't being passed correctly...\nSorry, false alarm. Still, itches enough that I'm going to add more tests so I can reassure myself.. @alampros Thanks for following up. Hrm, that's disturbing that the dist-tag wasn't set correctly. I'll add a test combining --canary and --conventional-commits and see if it behaves differently than I expect. I'm not sure why it would ignore --npm-tag (all of my tests so far indicate that it is respected, at least in the sense that lerna is passing opts.tag with the appropriate value).... Coincidentally, I'm working on making --npm-tag override publishConfig.tag when it is not latest, which I think makes more sense, especially in the --canary case.. Would you believe I had no tests around the presence or absence of publishConfig.tag?\n\nNarrator: He didn't.. v3.8.5 should fix this. It wasn't specific to gitlab, but it certainly was awkward, as your example demonstrates. Thanks for raising the issue!. The procedure was correct, but the lockfile output should only have included the fs-extra-related changes, not the bundled packages.\n\nIn lerna itself, you can also use the lerna add command (after running npm link in the repo root).. If you use relative file specifiers and upgrade to lerna 3, this error would be avoided. However, it then exposes another npm outdated error when everything is hoisted. So lerna outdated would still be useful for those situations.\nIf you\u2019re using yarn, you could use workspaces and get this sort of functionality as a yarn command, I believe.. Your root package.json shouldn't be a lerna-managed package itself. Yes, it is strictly possible to do that, but I really don't recommend it, for this and many other reasons.\nWithout providing your lerna.json config, I'm making a wild assumption, but the fix is to use your root package.json as dev dependency coordinator only, not a lerna-managed package.\nUse local file: specifiers and npm i packages/* once and you don't have to use lerna bootstrap at all, one npm ci to rule them all.. Your root package.json shouldn't be a lerna-managed package itself. Yes, it is strictly possible to do that, but I really don't recommend it, for this and many other reasons.\nWithout providing your lerna.json config, I'm making a wild assumption, but the fix is to use your root package.json as dev dependency coordinator only, not a lerna-managed package.\nUse local file: specifiers and npm i packages/* once and you don't have to use lerna bootstrap at all, one npm ci to rule them all.. If you're not publishing anything to an npm registry, just use relative path require/import.. You don't need to run a webpack build in every package, you should be able to run it from the root.\nClosing because this isn't a lerna problem, but a problem in whatever provides the encore executable.. Correct, I hope to cut a release by the end of the week.\n. Correct, I hope to cut a release by the end of the week.\n. This has been fixed with the release of v3.0.0-rc.0. What scenario causes this \u201cduplication\u201d that you\u2019re trying to avoid?. Your example repo appears to be lacking tags on master? That\u2019s kind of breaking lerna publish.\nWithout the tags that lerna publish creates, every publish is publishing the world, instead of just the packages that have changed since the last release (and their dependents). With proper tags, a change in a pagination component that has no other local dependents will only publish the pagination package, which sounds exactly what you\u2019re going for?\n(Also, consider using the --npm-tag option to control which dist-tag the package is published to instead of the default \u201clatest\u201d. Dist tags are the npm way to express release quality). There is a snapshot serializer that may need to be updated due to the version format change.\nI\u2019m still not a huge fan of passing in the numeric bit of the release ID. I\u2019m in the process of major refactoring in this area, FYI (splitting version command out of publish).. v2.1.4 of git seems rather old, since the latest release is v2.17.x.... @hbetts Thanks for all your contributions, they've been especially helpful lately!. lerna@next fixes this by renaming the option --ignore-changes/ignoreChanges, making clear that it is a list of file globs, not package names (like the other --ignore options).\nThe globs themselves should have globstars (**/*.md), implicit matchBase was too magical.. @yvele Yep, that's a feature that isn't very well documented. Basically, the scoping works at multiple levels, merged in reverse. So a root-level property will apply to every command, whereas a property scoped to command.publish will only apply to lerna publish (and lerna version, but that's a special case with publish).. You should just upgrade to lerna 3 and use relative file specifiers.. Using * as a dependency range is not generally recommended for npm packages (not specific to lerna). One of the assumptions lerna makes is that you\u2019re using the default ^ range, and it always updates bumped dependency ranges during publish.\nStar ranges for local sibling dependencies are not explicitly supported by lerna. That they have worked at all is largely an accident.\nIf you use relative file specifiers, lerna bootstrap is irrelevant. Just npm ci and you\u2019re done. Lerna 3 \u201ctraditional\u201d bootstrap with lockfiles in each leaf package doesn\u2019t change the guidance.. Unless it\u2019s independently versioned, it needs to be on the same major to be linked via semver range. You shouldn\u2019t use the 0.0.x range, literally every version bump at 0.0.x is a \u201cmajor\u201d bump.\n\nOn Jul 21, 2018, at 17:19, veeramarni notifications@github.com wrote:\nWell, if I change * to ^0.0.1, lerna still doesn't update the dependencies. I will try a quick test with Lerna 3 and see if it helps.\n{\n  \"name\": \"my-application/sub-tool\",\n  \"version\": \"0.0.15-63\",\n  \"dependencies\": {\n    \"@my-namespace/my-tool\": \"^1.0.0\"\n  }\n}\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I find it hard to believe development doesn't involve testing.. Lerna is meant to facilitate development of multiple npm packages. It's not meant to fix broken/slow packages.\n\nThat being said, does the issue repro with lerna@next?. You shouldn\u2019t use \u201cindependent\u201d versioning, then? The default \u201cfixed\u201d versioning mode does exactly what you\u2019re asking for.\nSent with GitHawk. How do you propose to synthesize multiple independent semantic versions into a single, concise, meaningful git tag?\nI definitely sympathize with this desire, but it's not a simple problem (and the problem isn't coding, it's conceptual).. #1864 is in the process of implementing this, at least for users of --conventional-commits.. Oh lovely, somebody changed the stdio semantics in core again.... So I was able to successfully publish 43 packages for lerna v3.0.0-rc.0 last night using node v10.7.0 + npm 6.2.0. I also promoted lerna 3 to the \"latest\" dist-tag, so I would recommend upgrading. I'm not likely to have bandwidth to debug lerna 2.x anytime soon.. Yeah, trying to get it released today.. Yeah, trying to get it released today.. https://github.com/lerna/lerna/releases/tag/v3.0.0. https://github.com/lerna/lerna/releases/tag/v3.0.0. You need to be in a branch with annotated tags reachable from HEAD.. --skip-git is the worst-named option ever, it only skips git commit and push. It doesn't remove the requirement for git.. Hah, thanks! You learn something every day. :). this.project.version points to the version field of lerna.json, which in independent mode is \"independent\". This is distinct from this.project.manifest.version, which is the (currently meaningless) version field of the root package.json.. @morgs32 My biggest concern with making tagged releases in feature branches is that the tags get mangled when merging.\nI'm not sure if rebase merge would be any safer, since if it was rebasing onto upstream commits, the SHAs would change and thus the annotated tag(s) would be \"broken\", as the SHA it points to no longer exists. However, I haven't tried rebase merge in a long time, and I don't recall if git rebase itself preserves tags.\nOne of my goals in the near future is to improve the \"auto-publish from CI\" experience, perhaps with a subcommand lerna publish release. I envision some configurable branch awareness that would publish untagged prereleases on feature branches (or PRs only?) and then on master (or latest, whatever your \"default\" branch is configured to be) it would publish with tags, even creating github releases with changelogs (if you're using conventional commits).\nSo please let me know if lerna publish from-git works after a rebase merge, I would like to figure this out, even if it is \"just\" a clarification to the documentation!. It's for backward-compatibility. The lerna version docs probably should be updated to use the correct namespace, though.\n\nOn Aug 12, 2018, at 05:11, Daniel Rodr\u00edguez Rivero notifications@github.com wrote:\nDo you configure lerna version by configuring publish on lerna.json ? Seems confusing\n. It's for backward-compatibility. The lerna version docs probably should be updated to use the correct namespace, though.\nOn Aug 12, 2018, at 05:11, Daniel Rodr\u00edguez Rivero notifications@github.com wrote:\nDo you configure lerna version by configuring publish on lerna.json ? Seems confusing\n. I'm going to need a clear reproduction that explains how numerous bootstrap unit tests are lying to me.. I have literally no idea, as you've failed to actually show the code demonstrating these problems.\nOn Jul 29, 2018, at 22:26, Heaven notifications@github.com wrote:\nAnd other question, why the package.json can't work? E.g. if project/package.json has a lint script field, it will say No packages found with the lifecycle script 'lint' if I run the lerna run lint command in project/ or project/pakacges/packageA\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Oh geez, no, this is totes a bug. Disturbed that none of the unit or integration tests caught this.... Yeah, that's fair. Thanks for the investigation!. v3.1.4 fixes this. Have you tried lerna link convert? It essentially does what you're asking (hoist devDependencies to the root), but instead of rickety lerna bootstrap logic, it lets npm manage the packages (which it does much better).\n\nThe end result of a one-time execution of lerna link convert is that lerna bootstrap is replaced by one npm install in the root (creating a lockfile for the whole tree). One caveat, if you transpile your packages, is that you'll need to move that action to the root \"prepare\" lifecycle (e.g., lerna exec -- babel src -d lib).. Presumably you're using a scope to identify these private packages? Scoping the registry in the root .npmrc is the solution.. Not intentional, but lerna clean is a pretty redundant command, imo. git clean -fdx packages works much better.. Re-reading the issue, it appears you called lerna run clean, which isn't the same as lerna clean:\n\nlerna run clean runs the \"clean\" script in any leaf package.json that contains it. lerna run does not support --yes, as it does not prompt anything.\nlerna clean removes node_modules under any leaf package location. 95% of the time it is identical but much slower than rm -rf packages/*/node_modules.. Yeah, sorry, lerna upgrade is still unimplemented.. It hasn't been released yet, sorry. Soon.. PRs welcome over at https://github.com/lerna/website, closing because this isn't actionable here.. Thanks for the example reproduction!. I believe this is the conventional changelog parser calling git log with a significant format. Lerna itself doesn't use git log internally.. The format.pretty conflict leading to unexpected output is a good issue to raise here. I consider this fixed, from lerna's perspective.. Hoisting doesn't make much sense when you also treat the root package as a lerna-managed package (\"packages\": [\".\"] in lerna.json). I really don't recommend a \"rooted\" leaf, the root manifest should only coordinate shared devDependencies and test scripts.. That's a good pattern that is perfectly capable of living as a sibling leaf under the packages directory. --hoist causes npm install to be run in the root first, with a mutated package.json including all hoisted dependencies, and apparently didn't expect local dependencies to live there too.. Answering \"n\" at the prompt to continue isn't stopping? That's pretty bad, if reproducible.\n\n^C once you've passed that prompt isn't really a deterministic thing, you could be halfway through uploads to the registry, and that really doesn't justify rolling back tags etc.. I guess I'll try a random lerna publish tomorrow and try to say \"no\" at the prompt.... I had lots of fun times hitting \"n\" to cancel the publish (lerna version, actually) prompt last night, so I'm going to need a clearer reproduction to make any progress debugging.. I had lots of fun times hitting \"n\" to cancel the publish (lerna version, actually) prompt last night, so I'm going to need a clearer reproduction to make any progress debugging.. This isn't going to fix the issue.. Running lerna updated on a repo that has never been published will always fail? There are a zillion tests that validate lerna publish without existing tags of any kind will work correctly.. No, sorry. That wouldn't solve the linked issue, either.. http://neugierig.org/software/blog/2018/07/options.html\n. Options are always more burden for the maintainer, they are not free. It's also mildly offensive to assert adding a feature \"shouldn't be much of a problem.\"\nOne immediate problem with your proposal: lerna stores the fixed version in lerna.json. How would you propose synchronizing that across multiple config files? (\"I use independent versioning\" isn't a solution). I believe this is a conventional-changelog issue, as Lerna itself merely passes arguments to conventional-changelog-core, we don't do any url munging.. Specifically here we are passing options.lernaPackage to conventional-changelog-core.. Lerna doesn't install packages, that's what npm and yarn do. Strikes me as an Artifactory problem if they can't support public registry APIs?. Your package has runtime dependencies on jest and ts-jest. That's not gonna fly.\nAlso, where is the source code? No homepage field in package.json means I can't locate its source, and I'm not in the habit of accepting dependencies I can't read first.. This should be fixed in v3.1.1.. Closed due to lack of response.. This is already documented here: https://github.com/lerna/lerna/tree/master/commands/bootstrap#--use-workspaces\nIs that not sufficient?. I appreciate the effort to document, believe me.\nI'm just not sure individual properties should necessarily be emphasized (especially non-universal ones) when it is the actual mechanism of \"durable\" configuration merging that is of interest. In other words, how CLI options are translated into a JSON configuration schema and merged with defaults.\n. Publish should never be filterable by arbitrary packages, and 3.0 fixes accidental allowance of these filters. You're silently breaking the ability of lerna publish from properly recognizing future changes in the previously-ignored packages.. lerna changed is meant to be a way to report what would be published if lerna publish (or lerna version) were run. Neither of those commands accept --since anymore, as it fundamentally breaks the contract of lerna's versioning scheme(s).\nThere are plenty of ways to check what changed since a given revision with git, I don't think lerna needs to duplicate those.. lerna changed is meant to be a way to report what would be published if lerna publish (or lerna version) were run. Neither of those commands accept --since anymore, as it fundamentally breaks the contract of lerna's versioning scheme(s).\nThere are plenty of ways to check what changed since a given revision with git, I don't think lerna needs to duplicate those.. @jlegrone That's what --canary was envisioned for. It even has properly-incrementing prerelease versions, now.\nThe exact same functionality as lerna changed --since in v2.x can be accomplished by lerna ls --since in v3.x.. 1. Not illegal, but I wouldn't recommend it. Wherever you configure lerna-managed packages to be located, it's best if there are only lerna-managed packages located there.\n\nExternal consumers should use normal npm dependencies, which the lerna monorepo is designed to provide via publishing to a registry. lerna import is meant to import single-package repositories (aka \"traditional\" packages) into a lerna-managed monorepo, not the other way around.. You're missing a version property as well. Even if independent, you still need it there.\n\nIn any case, lerna 3 removes the requirement for the lerna property of lerna.json. I would suggest upgrading.. Lerna doesn't do any commit parsing of its own, that's all conventional-changelog-recommended-bump. That particular message is the result of a local dependency of that package also receiving a patch bump, presumably from a valid fix: message.\nWere the repro steps done on a \"clean,\" just-published repository?. > [T]here is no local dependency to another package.\nOkay, just double-checking that there was no possible vector for lerna being responsible. This is an issue for conventional-changelog.\n\nthe demo repository only has a single package\n\nI don't see a demo repository linked?. Are the git tags annotated?. Without being able to see the actual git history, I'm afraid I can't help you any further.\nThe pattern you describe seems to be most common after a squash merge (or a regular merge with conflicts) mangles the lerna tags by changing the ref they originally pointed to.. I think I figured this out. TL;DR: the change detection isn't aware that the current commit has a release tag.. ```sh\nlocal\nnpx lerna version\nremote\nnpx lerna publish from-git\n``. I tried to cut a release yesterday but forgot I hadn't finished making the integration tests work with the new registry + token/access validations. I hope to get that done today.. I tried to cut a release yesterday but forgot I hadn't finished making the integration tests work with the new registry + token/access validations. I hope to get that done today.. https://github.com/lerna/lerna/releases/tag/v3.0.0\nhttps://github.com/lerna/lerna/releases/tag/v3.0.1. https://github.com/lerna/lerna/releases/tag/v3.0.0\nhttps://github.com/lerna/lerna/releases/tag/v3.0.1. Yeah, I didn't even realize this could happen. Definitely should be guarded somehow. And yes, it will need to default topatch`, probably, for the reasons you mentioned.\nI ran into another issue with --conventional-commits last night when trying to publish another release candidate (v3.0.0-rc.1, ideally). TL;DR, when there is also a prerelease bump (formerly --cd-version), the recommended bump plugin was still returning patch/minor/major, and that meant resolving to v3.0.0, which wasn't a prerelease.\nI messed around a little trying to fix it, but ultimately gave up and just cut a GA v3.0.0 release.. Yeah, I didn't even realize this could happen. Definitely should be guarded somehow. And yes, it will need to default to patch, probably, for the reasons you mentioned.\nI ran into another issue with --conventional-commits last night when trying to publish another release candidate (v3.0.0-rc.1, ideally). TL;DR, when there is also a prerelease bump (formerly --cd-version), the recommended bump plugin was still returning patch/minor/major, and that meant resolving to v3.0.0, which wasn't a prerelease.\nI messed around a little trying to fix it, but ultimately gave up and just cut a GA v3.0.0 release.. Ok, well, I fixed my issue.\nI wasn't able to repro the null level or releaseType: undefined with the default angular plugin. It always returns patch, no matter what commit message prefix I use (or don't use):\n{ level: 2,\n  reason: 'There are 0 BREAKING CHANGES and 0 features',\n  releaseType: 'patch' }\nI can put in a fallback to patch, I guess, but it isn't going to be well-tested.... Ok, well, I fixed my issue.\nI wasn't able to repro the null level or releaseType: undefined with the default angular plugin. It always returns patch, no matter what commit message prefix I use (or don't use):\n{ level: 2,\n  reason: 'There are 0 BREAKING CHANGES and 0 features',\n  releaseType: 'patch' }\nI can put in a fallback to patch, I guess, but it isn't going to be well-tested.... nevermind, figured out a repro, fix incoming.... nevermind, figured out a repro, fix incoming.... I really wish JFrog/Artifactory would fix their shit. It's not like the public registry API is an obfuscated proprietary secret.\nAnyway, time is finite and I realize bugs exist in all software. A --no-verify-registry option is a reasonable compromise.. I really wish JFrog/Artifactory would fix their shit. It's not like the public registry API is an obfuscated proprietary secret.\nAnyway, time is finite and I realize bugs exist in all software. A --no-verify-registry option is a reasonable compromise.. lerna version --conventional-commits --yes should work fine, is the error message not clear enough?. lerna version --conventional-commits --yes should work fine, is the error message not clear enough?. That being said, we have integration tests that validate passing --conventional-commits to lerna publish passes it through successfully. I'll need a reproduction of your case to verify if it's an actual bug.. That being said, we have integration tests that validate passing --conventional-commits to lerna publish passes it through successfully. I'll need a reproduction of your case to verify if it's an actual bug.. I just realized I forgot to add a hidden --skip-npm yargs option to lerna publish, so this would indeed fail despite the internal aliasing already in place. Silly unit tests lying to me.... I just realized I forgot to add a hidden --skip-npm yargs option to lerna publish, so this would indeed fail despite the internal aliasing already in place. Silly unit tests lying to me.... That's because lerna does not employ conventional-changelog-* to determine what changed, only what version to assign to those changes (and generate a changelog).\nIf you want lerna to ignore certain files when determining if a package has changed, use --ignore-changes. It can also be placed in lerna.json, at the root level, which is by far the most convenient:\njson\n{\n  \"version\": \"independent\",\n  \"ignoreChanges\": [\n    \"**/__fixtures__/**\",\n    \"**/__tests__/**\",\n    \"**/*.md\"\n  ]\n}\n(Placing it at the root means it will also apply to lerna diff, which makes for cleaner, more focused operation of that command overall). That's because lerna does not employ conventional-changelog-* to determine what changed, only what version to assign to those changes (and generate a changelog).\nIf you want lerna to ignore certain files when determining if a package has changed, use --ignore-changes. It can also be placed in lerna.json, at the root level, which is by far the most convenient:\njson\n{\n  \"version\": \"independent\",\n  \"ignoreChanges\": [\n    \"**/__fixtures__/**\",\n    \"**/__tests__/**\",\n    \"**/*.md\"\n  ]\n}\n(Placing it at the root means it will also apply to lerna diff, which makes for cleaner, more focused operation of that command overall). --no-git-tag-version is identical to the npm flag. It doesn't distinguish between tagging and committing because one without the other does not make sense in the context of lerna.\nIt's slowly dawning on me that the --amend flag was a huge mistake, since all it causes is pain, and doesn't even properly address existing tags that point to a non-existent ref after amending... At the very least, it should have HUGE warning messages and an explicit disclaimer of support if stuff goes sideways.. --no-git-tag-version is identical to the npm flag. It doesn't distinguish between tagging and committing because one without the other does not make sense in the context of lerna.\nIt's slowly dawning on me that the --amend flag was a huge mistake, since all it causes is pain, and doesn't even properly address existing tags that point to a non-existent ref after amending... At the very least, it should have HUGE warning messages and an explicit disclaimer of support if stuff goes sideways.. Throwing an informative error when --amend and --no-git-tag-version are passed together would be an acceptable PR.. Throwing an informative error when --amend and --no-git-tag-version are passed together would be an acceptable PR.. If you always want to publish a specific package,  you probably shouldn't be using lerna. You can always descend into the directory and call npm publish yourself.\nIn any case, --scope applied to lerna publish was always a bug, as it breaks fundamental assumptions of change detection. v3 merely fixed the bug.. If you always want to publish a specific package,  you probably shouldn't be using lerna. You can always descend into the directory and call npm publish yourself.\nIn any case, --scope applied to lerna publish was always a bug, as it breaks fundamental assumptions of change detection. v3 merely fixed the bug.. This is the fundamental trade off of a monorepo: when using git tags to detect changed packages, independently or not, you need to be okay with publishing whatever is \"ready\" at any given time. (This should already be the case if we're talking about the master branch). This is the fundamental trade off of a monorepo: when using git tags to detect changed packages, independently or not, you need to be okay with publishing whatever is \"ready\" at any given time. (This should already be the case if we're talking about the master branch). --scope will never work with lerna publish, lerna version, or lerna changed as of v3.0.0.. What specific lifecycle scripts with which lerna command?. What specific lifecycle scripts with which lerna command?. Yes, lerna explicitly runs the postpublish lifecycle after a package has been uploaded to the registry. I don't know why CI does not elicit the same behavior.. As far as I can tell (on mobile), that's a weird file-based lifecycle that basically only Babel ever used, and is only per-package, and as of v3 are opt-in with an option. They've never been run in the root of the repository.. The postpublish npm script is explicitly run in every package. A \"scripts/postpublish.js\" relative to a leaf package directory is only executed (via require()) if you pass --require-scripts.\n\nOn Aug 23, 2018, at 05:30, Daniel Rodr\u00edguez Rivero notifications@github.com wrote:\nThanks for looking at it @evocateur\nI thought it was a lerna thing. In any case, it is not run on the root what it is a problem, is te fact that it does not run the postpublish script on the package folder. I don't see any log about running it.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Ah, sorry, this seems to be an issue with Lerna 2.x, which I really don't have bandwidth to debug right now. If this issue persists with Lerna 3.x, please re-open.. The --git-remote needs to be the name of a configured git remote (like \"origin\" or \"upstream\"), not an url.. Whoops, sorry, I completely missed that.. Whoops, sorry, I completely missed that.. I put the bug tag on this issue, and I've already spent time thinking about how to fix it. I did not intend to break npm5. Have patience, please. . I put the bug tag on this issue, and I've already spent time thinking about how to fix it. I did not intend to break npm5. Have patience, please. . @panjiesw Thanks!. @panjiesw Thanks!. (Also, thank you for the feedback, I will be clearer in the future with my intention to fix!). (Also, thank you for the feedback, I will be clearer in the future with my intention to fix!). Lerna has created annotated tags (and required them to recognize previous releases) since late 2.x-beta. \"Creating a lot of tags\" is not a justification for keeping them lightweight, especially when they are used to demarcate releases.\n\nAnyway, lerna ls --since [ref] works for your use case.\n(One day I'd like to remove the entire lerna changed command in favor of a --changed flag for lerna ls; lerna has too many subcommands). Lerna has created annotated tags (and required them to recognize previous releases) since late 2.x-beta. \"Creating a lot of tags\" is not a justification for keeping them lightweight, especially when they are used to demarcate releases.\nAnyway, lerna ls --since [ref] works for your use case.\n(One day I'd like to remove the entire lerna changed command in favor of a --changed flag for lerna ls; lerna has too many subcommands). Yeah, that could be a good PR. The output of lerna ls -h does list it, but it tends to get lost in the giant list of options. (I need to figure out how to tell yargs to show a subset of the options without jumping through too many hoops...). I don't see your actual lerna.json, but I'll assume you're using npmClient yarn.\nPurportedly, the yarn registry is just a CDN alias (or whatever) to the public npm registry. Obviously, that's not exactly the case.\n\nRun npm publish in each leaf package\n\nThat's exactly what lerna used to do! Until someone convinced me to let them run yarn publish if they were using yarn, as if it made any damned difference...\nAnyway, the workaround for now is to set a scoped npmClient for the publish command in lerna.json:\njson\n{\n  \"command\": {\n    \"publish\": {\n      \"npmClient\": \"npm\"\n    }\n  }\n}. I don't see your actual lerna.json, but I'll assume you're using npmClient yarn.\nPurportedly, the yarn registry is just a CDN alias (or whatever) to the public npm registry. Obviously, that's not exactly the case.\n\nRun npm publish in each leaf package\n\nThat's exactly what lerna used to do! Until someone convinced me to let them run yarn publish if they were using yarn, as if it made any damned difference...\nAnyway, the workaround for now is to set a scoped npmClient for the publish command in lerna.json:\njson\n{\n  \"command\": {\n    \"publish\": {\n      \"npmClient\": \"npm\"\n    }\n  }\n}. Or maybe explicitly set --registry https://registry.npmjs.org/ so yarn doesn't use its stupid alias thing?. Or maybe explicitly set --registry https://registry.npmjs.org/ so yarn doesn't use its stupid alias thing?. Oh, okay, interesting. A couple things are happening here, as far as I can tell:\n\nYour custom registry isn't getting picked up by yarn (a yarn bug)\nTry adding \"registry\": \"https://verdaccio.mydomain.com/\" to your lerna.json?\n\n\n\nI'm not entirely certain Verdaccio even supports the npm ping or npm access endpoints, so the new registry + package access validation will probably fail\n\nI guess I'll just skip the validation if an explicitly configured registry does not match \"https://registry.npmjs.org/\".... Oh, okay, interesting. A couple things are happening here, as far as I can tell:\n\n\n\nYour custom registry isn't getting picked up by yarn (a yarn bug)\n\nTry adding \"registry\": \"https://verdaccio.mydomain.com/\" to your lerna.json?\n\n\nI'm not entirely certain Verdaccio even supports the npm ping or npm access endpoints, so the new registry + package access validation will probably fail\nI guess I'll just skip the validation if an explicitly configured registry does not match \"https://registry.npmjs.org/\".... And I suppose I could parse the npm config myself and always set npm_config_registry appropriately, but that gets prohibitively complex with scoped registries etc etc... That part I consider to be a Yarn bug.. And I suppose I could parse the npm config myself and always set npm_config_registry appropriately, but that gets prohibitively complex with scoped registries etc etc... That part I consider to be a Yarn bug.. > I tried it and while the publish is success (the packages are in the private registry), it produces wrong behavior: all related manifest (lerna.json, and packages package.json) doesn't get updated to the new version\n\n\n\nhrm, that seems wrong...\nOh, and packing into the root is just as easily done into a temp directory and then move the tarballs back into the leaf package dirs. Probably for the best, since it means any package-specific publishConfig etc will be properly followed. I think we can do that.. @schmkr Yep, exactly.. Yarn is mutilating the registry config for some obscure reason. I guess we could check for that error case, but I'd rather yarn fixed their pyrrhic registry proxy to correctly forward API calls. (Their proxy is probably stripping the auth fields, which would explain the 401 code)\nOne alternative is to specify the public npm registry in the command.publish.registry field, which should override yarn's incomplete proxy.. In a lerna monorepo, your build + test scripts should generally be run from the root, as that is the location you should spend most of your time at in the shell during development.\nRunning linters from the root is (relatively) trivial. I have no experience with Polymer, but maybe that's not a good fit for a lerna monorepo right now?\nAs explained in the linked issue, when using Yarn workspaces lerna bootstrap is effectively the same as yarn install, and can largely be removed from the development cycle.. @ZempTime Thanks in advance for following up :). There's a long-standing TODO in the current --conventional-commits implementation to replace the \"Version bump only\" message in a dependent package with an actual list of relevant changelog messages from the dependencies. Despite what the comment a few lines above the linked code says, whether or not --force-publish is involved is kinda irrelevant, it happens for all dependent packages that are bumped when their dependency (one or often more) has changes. The bump filter is called from the writeChangelog() promise chain here.\nIt should definitely be marked with some sort of heading to distinguish it (### Dependency Updates?), but I don't think this sort of functionality needs another CLI option to guard against it (YAGNI, imo).\nOne complicated factor (and the reason we basically gave up when implementing it at first) is that the calling code in lerna version would need to be turned into a two-pass loop (one pass to generate all the changelogs without writing, another to knit the dependencies' changes into the dependents' changelogs, and then write it all). Maybe that's three loops, I dunno. It arguably means splitting updateChangelog() into (at least) two methods, perhaps generateChangelog() and writeChangelog()?\nI don't think we need a special keyword in the message itself, we should just stick to what conventional-changelog-core gives us.. It sounds like most of the requirements for your use case could be fodder for a conventional-changelog preset passed to lerna, not a lerna logic change (except for figuring out how to transfer transitive dependency changes). Most of the --conventional-commits functionality is just passing flags to various conventional-changelog utilities.. I usually start digging into presets by examining conventional-changelog-angular, which is a pretty robust and feature-ful example of a conventional-changelog preset (it's what lerna defaults to, in fact). conventional-changelog-writer documents a lot of the significant configuration properties, and also provides a decent example of basic preset templates.. Here is where lerna configures conventional-changelog-core to detect changelog messages for a given package location. There's not a lot there, which is why I suggested a custom preset to make deeper changes to its output.. Can you try the latest version? I shifted some stuff around and it should now deal with empty JSON output better.... Thanks for checking!. Thanks!. We already have options for disabling these steps, --no-push (poorly documented in the readme, but very clear in lerna version -h output) and --no-git-tag-version.\nThis is far too convoluted of a solution for the problem of bad/missing documentation.. lerna version --conventional-commits --no-git-tag-version already exists for this kind of testing. Pass --no-push instead of --no-git-tag-version to see what kind of commit and tag(s) it would generate, and you can git reset --hard origin/master && git tag -d v${x.y.z} or whatever to throw away the test result.\nI don't want a deluge of prompts that make users get into the habit of mashing the y key just to proceed with things they already expected to happen.. Sure, I think it's fair to restore at least one confirmation prompt in the publish flow when VersionCommand decisions haven't already been made (so the lerna publish from-git and lerna publish --canary cases). I don't think it needs dramatic restructuring of the existing control flow, however.. I don't know why you need a prompt for everything? If you don't want to push or publish, lerna version --no-push has you covered. Then lerna publish from-git after you've validated the commit and tag(s) and manually pushed to remote.\nI literally did exactly that flow today, as I was publishing the lerna release that added a confirmation prompt to lerna publish...\n\nOn Aug 14, 2018, at 22:33, Jan Nicklas notifications@github.com wrote:\nUnfortunately the publish actions which manipulate foreign systems are split into two commands:\n-version (git push)\n-publish (npm publish)\nSo inside the version command we can only prompt for git push and in the publish command we can only prompt for npm publish\nHow would you structure the flow?\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.\n. The version command (which is called internally from the \"legacy\" lerna publish) will prompt for confirmation before making any changes, including git commit, tag, and push. This was already the case, btw, and now the confirmation message is clearer when run internally.\n\nThe other prompts I added today are for the lerna publish from-git case (lerna version already run seperately) and lerna publish --canary, neither of which makes any git commit/tag/push at all.\n\nOn Aug 14, 2018, at 23:03, Jan Nicklas notifications@github.com wrote:\nSorry I didn't see the commit.\nI am perfectly fine with only one confirmation for the entire publish process.\nIts probably even more important than confirming the version numbers.\nBut if I read that code correct your confirm would happen after the changes were already pushed to a foreign repository and would require force push permissions to repair that.\nCorrect?\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Each confirmation prompt presents the actions about to be taken, in terms of packages affected and versions to be published. That is the relevant user decision in the lerna workflow.\n\nHow exactly does it help to pepper a user with prompts to allow what are essentially implementation details to proceed?. Sorry, not going to happen. If you're concerned about lerna's well-tested and robust git operations, call lerna version --no-push and inspect the result, etc, etc. I keep repeating myself.. @Waidd Thanks for figuring this out! The git diff-tree options are incredibly dense and hard to read, I completely missed that.\nI was lazy about tests when writing this feature originally, but all I would do is validate the flags we expect to pass are passing. So no big deal.. Okay, well, I can assure you the snapshots do not need updating, and the CI build should pass once you revert the snapshot updates. We probably have to pass some flags to git or something, I don't know why it is trying to change the diff prefixes, it's completely unrelated to your change.\n\nOn Aug 14, 2018, at 21:38, Mo\u00efse FISCAL notifications@github.com wrote:\n@moe971 commented on this pull request.\nIn commands/diff/tests/snapshots/diff-command.test.js.snap:\n\nindex SHA..SHA 100644\n---- a/packages/package-1/package.json\n-+++ b/packages/package-1/package.json\n+--- c/packages/package-1/package.json\n++++ w/packages/package-1/package.json\nI'm on an english localization of git, just my OSX is in French. I revert my package-lock, ran npm ci the only diff is the new test. I have the same problems with snapshots.\n\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I don't think this solves #1214, as it's actually a separate code path (but certainly accesses similar properties).. I think passing an explicit --src-prefix=a/ and --dst-prefix=b/ will solve your local snapshot problems. Can you pull from master and execute npm run ci to verify for me? (no rush, just not certain how to reproduce on my own machine). Unless you're making changes to dependencies, I would run npm ci instead of npm i. All the lint errors are due to a bad node_modules state.\nOn Aug 15, 2018, at 23:27, Mo\u00efse FISCAL notifications@github.com wrote:\nI sync my repo,\nMy current commit match with 3.0.6 tag, I run npm i && npm run ci I've got 526 lint error for import/unresolved, did I miss something ?\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.\n. A list of globs in lerna.json isn't sufficient? How often do these sorts of things actually change?\n\njson\n{\n  \"version\": \"independent\",\n  \"ignoreChanges\": [\n    \"**/__fixtures__/**\",\n    \"**/__tests__/**\",\n    \"**/*.md\"\n  ]\n}. > Does ignoreChanges accept regex?\nIt's a list of globs, as documented.\n\nif a package suddenly includes a build item or folder this list would need to be updated\n\nYou're presumably adding this build output to the root .gitignore, yes? If so, you don't even need to bother with --ignore-changes.\nIf not, I would expect build artifacts that are intentionally versioned to be included in lerna's evaluations.. If changes to build tools affect package output, I would say that's very relevant for versioning. Any package migrated to a monorepo should take the opportunity to move its tooling to the root, and any package that \"can't\" do that shouldn't be in a monorepo in the first place.. Sorry, I didn't clarify that --conventional-commits is used by lerna to decide version numbers and generate changelogs only. That is, it does not use conventional-changelog-core to decide what changed. That is decided by collect-updates, using git tags and some fancy diffing.\n707 explains why the dependents get bumped when a dependency has a recognized change. Globs provided to --ignore-changes are the only way to filter what collect-updates recognizes.. I just explained what lerna does and does not use conventional commits for. To repeat, it does not use conventional commits to detect changes.\nLerna will never do that, to be absolutely clear.. Seriously, please read my twice duplicated explanation. What you're asking is impossible for lerna to do without breaking the fundamental contract of lerna, and thus will never, ever happen.\n. This looks like a TypeScript or Angular bug, not Lerna.\nOne thing to note is that lerna manages npm packages, not magical ng-packagr artifacts. Wherever your leaf package.json's main property points to is where node will resolve import (or require()) paths.. I'm afraid I don't understand what you mean by \"bootstrap internal packages while ignoring node_modules\".. Ah, yes, that sounds like it. Happy to help clarify usage expectations.. Essentially the same as #1539, and I appreciate the detailed context, that helps quite a lot. We'll need to replace package-json with pacote's new packument() API.. >This works on MY machine if I do, but on my colleague's mac, he receives an npm auth error after all the packages have been packed: ...\n@phun-ky --no-* prefixes are Boolean negations, so \"verifyAccess\": false is what you're looking for.. After your coworker successfully runs npm login, does the error persist?. What version of npm, etc etc, please.. @Inlustra Wonderful context, thank you! I do believe this might be related to older versions of npm.\nI know there is even a still-unfixed(!) bug since v5.7.0 related to \"legacy\" auth and npm Enterprise (possibly all third-party?) registries. npx npm@5.6.0 login is necessary, even with npm 6-latest, to create an auth token for our npm Enterprise instance (once created, it is no longer necessary to run npm@5.6.0).\nSo, in summary, it looks like Yet Another Version Test (npmClient === \"npm\" && npm -v < 5.6.0) is needed to condense the newly-split \"pack-then-publish\" routine into the legacy \"just-publish\" method.... Hrm, ok. A deeper issue, then.. * I don't recommend using yarn for publishing. There are far too many edge cases. I'm likely going to switch lerna to libnpmpublish soon.\n bump is a positional argument, not a flag.\n If the commits are made successfully, you can run lerna publish from-git to rerun only the publish steps (skipping git commit and tagging).. > should lerna actually push \"publish\" commit when no package were really published?\nI've personally gone both ways on this question, depending on the context. However, it's always been the case that npm publish does not care what the state of git is, whether it's been pushed or not, etc. npm version of course will blow up if your tree is dirty, but that's a separate concern.\nNowadays I err on the side of pushing early, then publishing, largely because it's more exasperating to find a bug in a new version of a package, only to find that the \"latest\" source code does not match the packaged code (basically, they forgot to git push). Publishing packages to a registry is also (by far) the more risky operation, whereas the git operations are quite fast and fairly reliable.\nYou can always pass --no-push and git push manually, for example:\nnpx lerna publish --no-push && git push. @pieh I appreciate the persistence! I definitely would like to figure out how to make lerna more robust for large projects like Gatsby. :). --no-verify-access was added in v3.0.4. First of all, I highly recommend you get out of the 0.x.y semver twilight zone. So, so many edge-cases and poor graph resolutions due to that semantic sinkhole.\nEvery minor version under a 0 major is considered breaking, so even when you're \"just adding features\" it's forcing your consumers to use npm i pkg@latest instead of npm update pkg. Not using npm update is a huge vector for duplicated packages, in my experience.\nBumping majors is always meant to be more work than minors and patches, and that includes updating peerDependencies.\n\nwe use lerna version --exact --force-publish to ensure every package gets published, even if that package doesn't contain any changes, just to keep the version numbers in sync\n\nThat... seems really unnecessary, even when using --exact dependency specifiers. If your whole monorepo is meant to be depended on at once, why not have a \"source\" (in the graph theory sense) package that depends on everything else? With a Rollup-based ESM \"module\" export, it's the same difference to bundlers like webpack.. Exact versions in peerDependencies are very brittle, in my experience. If\nthat level of specificity is necessary, it should be a direct dependency\n(or the peer module should be split on different boundaries, it might be\ntoo large, etc).\nMany in the npm community will tell you that any change to peerDependencies\nthat excludes previously matching version ranges should be considered a\nbreaking change, and I tend to agree with that assertion. I don't see Lerna\nsupporting the (potentially) constant update of peerDependencies in such\nfashion.\nOn Mon, Sep 10, 2018 at 4:35 PM Anand Tiwary notifications@github.com\nwrote:\n\nI have a similar use case. Package A depends on Package B. Package A has\nspecified exact version in peerDependencies for B. When I run lerna\nversion, it updates the devDependencies correctly, but doesn't update the\npeerDependency, leaving us in a broken state since Package A now depends on\nan older version of Package B.\nIs it currently not supported? Is it something we can add through a flag?\nHappy to create a PR for this.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/lerna/lerna/issues/1575#issuecomment-420095298, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAV5foyoIY0kwno5GJUtM_ooYynOSVtks5uZvc3gaJpZM4WBhhr\n.\n. What you've described is an inappropriate use of peerDependencies as I understand the npm community's conventions. I can certainly appreciate the desire to minimize the potential for bad nesting when updating dependencies, I have the same pressures at work from our various \"shared\" UI toolkits.\n\nHowever, because peerDependencies themselves only warn, not auto-install, they are not sufficient for tracking these sorts of centralized, highly-dependended-on packages. Consumers need to keep their dependency ranges as broad as possible (to facilitate deduping), and it is ultimately the responsibility of the artifact-generating repository (the \"public-facing\" one, in your example) to proactively ensure that the module is not duplicated and stays up-to-date (and, of course, use a lockfile).\n\nSome repositories are also following the exact versioning in peer dependencies. Angular would be an example.\n\nNot having any experience with Angular myself, I don't find that a very compelling argument. Unless every time Angular changes their exact peer they are also issuing a major version bump?. Am I correct in assuming package B always has a \"test\" script present?. Okay, just making sure. I'm a bit stumped, though I will note that --include-filtered-dependents isn't the most broadly-tested option. Pretty sure it isn't tested at all in combination with --since.. I wonder, are the packages you expect to be reported private, by any chance? lerna ls by default does not list private packages without the --all option.\nAlternatively, we could probably add better logging to lerna exec (or any command) when passing the --since option. For some time now, I've been meaning to audit the log levels in order to make verbose output more useful (without spamming), as well as improve the narrative explaining what is happening.. I fail to see how it is lerna's responsibility to ensure you have the correct git credentials. Assuming you meant npm credentials, since otherwise you wouldn't have been able to push commits/tags to remote.\nLerna v3 does all git operations (if any) and then all npm operations when lerna publish is called. If you fail to publish anything, immediately call lerna publish from-git after resolving your npm credentials issue. No new git commit or tags will be created, only packages published.\nHalf-tempted to make this the default behavior when lerna publish is run on a tagged release (after running lerna version, basically).. I don't see why successful git operations need to be rolled back just because the npm operations failed. There is no requirement from npm that the code it publishes be pushed upstream (or even committed, or even using git).\nThe git operations, if reverted and rerun immediately, would have identical results. Transactions are only necessary when that is not the case.\nI can see an argument for moving the npm auth validations before any local changes, or improving the error messaging if publish fails after successful versioning.. That's not really how lerna has ever worked, or expected to work. Lerna coordinates existing CLI to accomplish its goals, and the failure/revert case has always been manually running the commands.\nLerna isn't enterprise software, it is not transactional, and it has ways of recovering from registry auth failures in the way I described.. Awesome, thanks!. The only way you can depend on something in Node is to add them as dependencies in package.json. Lerna doesn't change that.\nYou can use relative file: specifiers in the root to expose the requires to non-package code. Run lerna link convert to migrate. (And remove \"useWorkspaces\" from lerna.json, you're not actually using Yarn as far as I can tell). You don't need to re-run lerna link convert after the first time. Once run, you don't need to run lerna bootstrap, as npm install will do it all for you. The git change is expected when you run lerna link convert.\nWhen publishing with relative file: specifiers, they are automatically replaced with the resolved version range. The source will be versioned with the relative paths, however.. Like I said, use npm, npm install once in the root. That's all you need when using relative file specifiers. lerna link convert sets it all up.. independent is irrelevant. you need to depend on your modules from the root package.json as relative file: specifiers. The leaf nodes should not have lockfiles. I can't help you any more.. You should use the root npm script lifecycle prepublishOnly to build all packages and modify the entries, then use a root postpublish to reset them. You can then allow lerna to do the git commit/tag/push, which now always happens before any npm publish is called.\nI really should write a blog post on that subject.... It's a little odd that you consider it necessary to modify the main property like this in the first place. Set to \"dist\" in the first place, it shouldn't need to change if you're properly building all the packages from the root.. By \"properly\" I meant running Babel or Rollup etc from the root instead of package by package. I could have sworn Flow had the capability of not needing such laborious handholding...\n\nOn Aug 19, 2018, at 12:54, Ovidiu Chereche\u0219 notifications@github.com wrote:\nIt's a little odd that you consider it necessary to modify the main property like this in the first place.\nIt's a bit different. The main property is set to index.js. But inside index.js there are some require calls that point to either src or dist, transformed by a customed script. Same concept, though.\nSet to \"dist\" in the first place, it shouldn't need to change if you're properly building all the packages from the root.\nThe reason why paths point to src by default is for Flow types to... flow across packages in development, and for test coverage to be calculated properly from integration tests (locally and in CI).\nNot sure what you mean by \"properly building all the packages from the root\".\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Or just add it to the .gitignore, like a normal file you want to ignore?. I'm not sure why you need to run the same nightly build repeatedly? The SHA is appended with a + to the version when publishing a canary release, which does require un-shallow git tags to properly increment the version.. That sounds very complicated. Lerna manages npm packages, not Docker images.. I am receptive to the argument for extracting the canary version generation logic into a separate package (I'll probably end up doing it anyway to support a planned lerna publish release subcommand), but I do not see lerna version --canary happening.\n\nTL;DR: In lerna v3, lerna publish makes changes to npm registries and lerna version makes changes to git repositories. --canary never makes changes to git repositories, therefore it belongs in the command that makes changes to npm registries.\nLerna v2 conflated the two, (not coincidentally) like yarn publish does with npm version and npm publish. One problem with v2's approach was exemplified by the --skip-npm and --skip-git options themselves, contributing to a gargantuan morass of increasingly unmaintainable conditional statements. I took the opportunity of a major version to cut that Gordian knot.\nThe v2 --canary option was another instance of an overloaded mess of conflicting semantics. It had its own method of setting a --preid, but no possible way to safely use ^ ranges because it didn't produce semver prerelease versions compatible with npm's resolution algorithm. It was poorly tested, difficult to support, and not especially useful, at the end of the day. Separating concerns into two commands helped clarify what --canary was for.\nI made a great effort in v3 to provide composable modules (almost 50 of them, so far) for folks to reuse and remix various bits of Lerna logic for their specific, perhaps esoteric, use cases. It's not perfect, but suggestions/PRs for module extraction are always welcome. It is certainly one of my goals to facilitate workflows that I don't believe belong in core via useful and expressive utility packages. The documentation definitely needs a lot of help, and I apologize for that.. --dry-run: #51\nEnsuring everything builds and tests pass is as simple as running <my-build-script> && npm t before your lerna publish execution. Or even running it during the root prepublishOnly lifecycle, for example.\nCanary version calculation is not especially complicated, working from parsed git describe output. The \"not especially complicated\" bits do need extraction, like I said above.\nlerna changed could gain that ability, I suppose. As it is right now, it's basically a shortcut for lerna ls --since, in terms of its actual output. (oh, and it exits non-zero when there are no changes, so that's different...). @sbaechler Canary version computation does not use npm dist-tags (like latest), it uses git tags (via git describe, as I linked to earlier) to determine the number of commits since the last release.. > The hashes are not sequential so the usual ^ versioning does not work.\n@sbaechler This is not the case since Lerna v3.0.0 (see #1522 for details).\nAs #1614 highlighted, there is still and edge case when you are attempting to publish a canary release using the default \"fixed\" versioning scheme before you've made any formal tagged releases. I fixed the independent fallback, but it's a static 1 default instead of a perhaps more appropriate git rev-list HEAD --count.\nSo right now, as of the Lerna v3, lerna publish --canary with existing tagged releases will always yield properly-incrementing prerelease version ranges.. Thanks for opening this issue, it's something I've thought about too.\nI'm personally leaning more toward the git-<subcommand> approach, which will resolve git-mycmd on the $PATH when git mycmd is called. (I've been googling for 20 minutes trying to find formal documentation, but so far only blog posts :P. Edit: tons of examples here)\nSo third-party lerna commands in this scheme would simply need to provide a lerna-<cmdname> executable, which would be located in the local node_modules/.bin that npm creates when you install a dependency with a bin field.\nHere's the steps I envisioned, roughly:\n1. Hook yargs' error handler to catch \"missing commands\"\n2. If caught, attempt to resolve lerna-<missingCommand> with which + npm-run-path\n3. If found, call the executable with the current argv, otherwise error like normal (\"did you mean?\", etc)\nThis \"dashed-prefix\" approach has admittedly more potential for namespace clobbering, but in practice I think it would be a lot easier to contribute to? It would remove the necessity for custom metadata per-package, and could even support global installations of custom commands. This approach would require extracting a \"setup all the global lerna cli stuff except for adding commands\" package, but that's something that should probably already exist anyway, given my previously-expressed goal of helpful modularity.\nA sketch of a third-party command executable:\n```js\n'use strict';\nconst lernaCli = require('@lerna/cli');\nconst myCmd = require('../lib/my-cmd');\n// myCmd is a yargs command module\n// lernaCli() returns a yargs instance,\n// which is then chained as desired...\nconst cli = lernaCli().command(myCmd);\n// call parse() to execute after configuration\ncli.parse(process.argv.slice(2));\n``. If you're extending the base Command class, you already getthis.project` and all the trimmings. None of the current commands \"flow context\" in the manner you describe.\nAs a contributor to yargs, it's news to me that it supports git-style subcommands out of the box. In any case, there's a neat trick I learned from npx that lets you replace the current process with a different cli, akin to exec in bash, so we don't have to worry about wrangling subprocesses.. The --no- prefix means it's a boolean negation, which means you use the camel-cased name without \"no\":\njson\n{\n  \"command\": {\n    \"version\": {\n      \"push\": false\n    }\n  }\n}. I don't maintain cz-lerna-changelog, so I can't speak to what \"should\" have happened. Lerna does not use conventional-changelog (via --conventional-commits) to determine what changed, it only uses the conventional commits to suggest the version bump and compile a changelog.\nTo control the recommended version bump as you desire, you need to commit the documentation update seperately. That's not really a divergence from how conventional-changelog has always worked.\nTo control which diffs are recognized by lerna as a \"changed\" package, use the --ignore-changes option. Note that lerna will always bump dependents who have dependencies that have changed, so you still need to separate the commits if you don't want the \"BREAKING CHANGE\" to \"bleed\" into the dependent package version bump.. @NemoOudeis No, lerna will publish banana because it did change: you removed a dependency. Working as intended.. As I explained in the linked issue, npm install is all that is necessary after converting to relative file: specifiers. lerna bootstrap is not needed anymore.\nIf you have build steps in npm script lifecycles (\"prepublish\", \"prepare\", etc) that were executed by lerna bootstrap, you should run them in a root prepare lifecycle, which is automatically run after npm install.. No, they are all dealt with by the root npm install. This takes advantage of the node_modules resolution algorithm.. Lerna manages the versioning and publishing of multiple npm packages in the same git repository. Period.\n\nbundle each individual package into a self-contained, deployable zip file\n\nThis is literally what npm publish does. Why not just install each published package in separate directories and archive that?\nBetter still, use the bundledDependencies field of the microservice package.jsons to delineate what dependencies should be included in the packed tarball. Then you can \"deploy\" the package wherever.. Lerna does nothing special except call npm install, no obfuscation of the environment or anything. It sounds like the Windows git credential manager is broken, or can't handle multiple concurrent requests (lerna bootstrap --concurrency 1 will run serially instead of 4 concurrent subprocesses). You can also pass --no-progress to disable the progress bar.. @imsobear You appear to have a version lifecycle that calls lerna version? That will be called recursively, so you should probably rename the script or remove it altogether.. If you've already run lerna version and you're on the same tagged commit, you need to run lerna publish from-git, otherwise it will fail just as you've reported.\nI've never heard of http://registry.npm.private.com/, but it sounds like it isn't API-compatible with the public npm registry. You can pass --no-verify-registry and --no-verify-access to lerna publish to disable those checks.. It was in the error messages as I was testing the feature.. Hah, whoops, that's because lerna's --scope argument should be named --include, and it's conflicting with pacote's scope (in the npm sense) option. Sorry about that.. I'm not really sure what to say, https://www.npmjs.com/package/@lerna/changed reflects the correct version, and I was just able to install the latest version successfully in a temp directory...\n```bash\n$ mkdir /tmp/clean-install\n$ cd /tmp/clean-install\n$ npm init -y\n$ npm i -D --prefer-online --cache=.local-cache lerna\n\nlerna@3.1.4\nadded 605 packages from 313 contributors and audited 35730 packages in 38.555s\n\n$ npm ls @lerna/changed\nclean-install@1.0.0 /private/tmp/clean-install\n\u2514\u2500\u252c lerna@3.1.4\n  \u2514\u2500\u252c @lerna/cli@3.1.4\n    \u2514\u2500\u2500 @lerna/changed@3.1.3\n```. @zachwolf You should have a lockfile if you're using Yarn, otherwise you can expect breakage like that all the time.\nlerna@3.0.0-beta.21 has a transitive dependency on @lerna/command@^3.0.0-beta.21, and ^3.0.0-beta.21 is certainly satisfied by 3.1.3 (play with https://semver.npmjs.com/ to demonstrate).. Closing this as an upstream issue.. Yeah, this is a dupe of #1593. I haven't been able to reproduce locally (with a fresh cache and --prefer-online), so I agree it's an npm issue.. --skip-git was the worst-named option because it never skipped all git operations, only git commit, git tag, and git push.\nThe ENOGIT error code should have been EDETACHED or something, cuz git obviously exists, you're just in a detached HEAD. git checkout -B \"${GIT_BRANCH#origin/*}\" \"${GIT_BRANCH}\" fixes that in Jenkins.\n\nWe are trying to use the skip git functionality because Jenkins/Maven take care of that in our company's CI process.\n\nTake care of ...what? Creating the commits and tags? That seems odd to me.\nIt's unclear why you're chaining lerna version x.y.z --no-git-tag-version --no-push && lerna publish --yes when you could just call lerna publish x.y.z --no-git-tag-version --yes?\n(--no-push is implied by --no-git-tag-version). How do you expect lerna to otherwise detect what has changed, and thus needs to be published? Magic?. @TimoWestland If you're not using lerna to create the tagged release, and thus the package.json changes, I don't know what to tell you. A GitHub release tag isn't sufficient, you need to run npx lerna version $BUMP --force-publish (one reason I don't like --force-publish is that it looks silly in this context, you're not actually publishing when running lerna version). Then you call npx lerna publish from-git --yes in CI to publish the lerna-tagged packages.. You should use a lockfile. (package-lock.json, npm-shrinkwrap.json, or yarn.lock). @jsnajdr Already done in https://github.com/lerna/lerna/commit/02a067f4a342137c1835b998d399f8778fee16a4 :)\nI would like to bundle lerna at some point, but right now that's a little awkward since npm's builtin bundledDependencies doesn't work in a monorepo (for complicated reasons) and I don't currently have a build step (which I rather like). Maybe when I succumb to the inevitable TypeScript conversion.... \n. That's how you configure nested subcommands with yargs. lerna link is a silly command I never should have acquiesced to. lerna link convert actually makes it useful. What's your point?. Running lerna link convert should have automatically added all your leaf packages as relative file: dependencies in the root. This is necessary to make npm file: specifiers work, it is not my \"opinion.\"\nIf you have one package that requires every other leaf package in the project (like Lerna itself), you can get away with a single root file: dependency.\nOnce set up, you never need to call lerna bootstrap or lerna link again.. That was intentional. Prereleases without a preid are dangerously non-communicative.. The --no- prefix is a Boolean negation. --preid is a string field. I don't want to mix up option types again.\nThe \"restrictive\"-ness is by design. If you don't like \"alpha,\" you can always pass a different (non-empty) value.. But those are changed packages, yes? Seems to me like it's working as intended. I have no idea how your flow actually works, so it's likely missing/mangling tags in some way.. Don't use such complicated branching? Also, don't publish from feature branches.\nAt the end of the day, new versions of identical code isn't going to break anyone. Unless you know of some git wizardry that always avoids the situation you describe but also always works for every other situation lerna is used in, I don't see this being fixed.. No, it's not currently possible, mostly because I haven't personally used the bootstrap command in almost a year. PRs welcome.. But that's... not a package? It should fail if you pass invalid locations to the packages config. I'm unclear why lerna even needs to be aware of the sandbox.. You could just as easily use relative file: specifiers for the former case, lerna bootstrap is not required. Likewise the latter. Even better for the former use case, if you really want to support it, is proper \"nightly\" prereleases (the original intention of --canary).\nThe lerna 2.x behavior was wrong, a completely unintentional side-effect. That it worked at all is an accident.. Yeah, lerna packages config does not support negation. Also, I don't recommend \"clashing\" globs (packages/* and packages/components/* are overlapping, the components directory should be a sibling of packages instead).. Sounds like you should be using the root version lifecycle to run the build?\n// preversion:  Run BEFORE bumping the package version.\n// version:     Run AFTER bumping the package version, but BEFORE commit.\n// postversion: Run AFTER bumping the package version, and AFTER commit.\n// @see https://docs.npmjs.com/misc/scripts\nThe root version lifecycle runs after all package versions have been bumped, but before the git commit.\n. Lerna calls the same lifecycle scripts during its execution. I could have sworn this was documented. Anyway, there are very clear unit tests of the lifecycle script functionality.. You generally should not rely on the \"install\" or \"uninstall\" lifecycle scripts, they are run on all executions of npm install and npm rm, even for external consumers.\nThat being said, lerna never calls either of those lifecycle scripts because it never uninstalls anything (that is, it never calls npm rm).. It sounds like you want to make lerna not act like lerna. Developing npm packages \"the old fashioned way\" still works. If you don't want sibling packages symlinked, I would suggest not using lerna.. That's expected behavior when you set hoist: true. Either don't hoist, or be okay with the root installation.. I'm not sure how much more visible I can make it?\nhttps://github.com/lerna/lerna/blob/master/commands/version/README.md#--conventional-commits. In most cases, yes, we do try to match existing npm cli semantics. In this instance, the ambiguity of targets forced a simplification of logic.\nWas lerna add --help not descriptive enough in its usage? How can we improve it?. If Alpha didn't itself require any adaptation to the breaking change, does that not constitute an acceptable dependency bump? Nobody consuming Bravo should care at all about the version of Alpha unless they also have a dependency on Alpha. The whole point of lerna is to manage the versioning and publishing of multiple related packages in a shared cadence.\n(If Bravo's tests don't adequately verify that Alpha's major bump did not break them, that's another matter, outside the scope of lerna). That sounds to me like you shouldn't have independent teams working in the same monorepo (or a monorepo at all). Doubly so if some teams insist on making breaking changes with any frequency.\nWhether or not you have 100% coverage is irrelevant. That you have integration tests alongside your unit tests is supremely relevant.. Sorry for the delay in response.\nI don't think it is appropriate for Lerna to be used as a tool to enforce\npolicies like \"no breaking changes\". That's more of a social problem, in my\nexperience. It's also something that Lerna only has one-dimensional insight\ninto, and only when using --conventional-commits: \"does a commit message\ncreated since the last release have the words BREAKING CHANGE somewhere in\nits body?\". Basically, Lerna only ever responds to human input, either\nimplicit or explicit; Lerna is not the enforcer.\nIntegration/end-to-end tests that fail when a public API breaks are the\nonly automated way to prevent breaking changes (and they're not 100%\nreliable at that, even with \"full\" coverage). That responsibility is out of\nscope for Lerna.\nOn Fri, Sep 7, 2018 at 2:19 AM Aur\u00e9lien Le Masson notifications@github.com\nwrote:\n\nFor our use case, we strongly believe that a command preventing automatic\nbumps of Breaking Changes would help a lot preventing bugs being shipped in\nproduction by imposing manual bumps and changelogs reading to test the\nimpact once a week.\nwould you be ok if we opened a PR to suggest an implementation of this\nfeature in Lerna?\n@evocateur https://github.com/evocateur what do you think? \ud83d\ude0a\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/lerna/lerna/issues/1609#issuecomment-419378159, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAV5f8Bu00NvGybqm_gaM2IimkE6hP8ks5uYjongaJpZM4WNw3x\n.\n. @pantoninho This won't happen. Read #707 for background.. If your convention is so dramatically different than lerna's (which is the convention used by 98% of the hundreds of thousands of packages in the npm registry), I'm afraid Lerna isn't going to work very well for you.\n\nIn any case, without error messages or isolated reproductions, I can't suggest alternatives.. v3.3.2 allows you to use --force-publish effectively with lerna publish --canary. It's not a perfect solution for the automated CI publish scenario, however.. That's exactly how fixed versioning works. It is not a mode that versions every package every release, but only when a package or one of its dependencies has a change since the previous release.. Because breaking changes are different. They're not satisfied by the default ^ semver range, so all packages need to be bumped in order for the local sibling dependencies to match.. To be clear, the default \"fixed\" versioning scheme does not publish all packages for non-major bump unless all packages (or their local dependencies) have changes since the previous release (annotated git tag). The non-major behavior has not changed since early lerna 2.x beta, only the \"bump all when major\" behavior is new.\nWhat exactly are you asking?. No, 2.x never did this when operating under normal circumstances. If it did, it means the git tags from previous releases were mangled or completely missing, thus causing lerna to think nothing had previously released, thereby choosing everything every time.\nIf your three example packages have no dependency relationship whatsoever (odd for a monorepo, tbh), then your example is 100% expected behavior.. Yeah, you don't want to pass --amend for that purpose. I now regret accepting the option in the first place.\nTo clarify, git is not \"effectively ignored\" when passing this option, it's just avoiding git commit and git tag; there are several other git commands that are always run regardless of --no-git-tag-version. I'm not sure why git-flow necessitates running lerna half-cocked.\nIn any case, when an existing pattern from npm exists (such as npm version), I try to match its behavior. Turns out --no-git-tag-version allows npm version to proceed on a dirty tree, and omitting it does not. So I'm fine with allowing --no-git-tag-version to skip dirty tree validation.\n. * amend has no use here, as amending a git commit that doesn't exist doesn't make sense (canary never commits).\n The npmTag does not affect the generated canary version string, that's preid.\n A null version means the package.json is lacking a version field?\nOr, as it turns out, a tag that it was not able to locate. Such as when an independently-versioned package has not been previously published. So that's definitely a bug.. Ah, yes, that makes sense. I think I have a fix, validating it right now.... #1633 fixes this, thank you for your patience.. Opening the PR itself was not actually the grounds for removal. Approvals are not impervious to reconsideration. I will be writing a blog post as soon as I am able to detail the full reasoning and context.. Yes, sorry about that, it should be re-opened now.. Hey, you know what's cool? Strangers on the internet assuming they know all the details of your thought process that led to a difficult decision. Super fun!\nFor the record, I was not pressured by anyone to revert, politically or otherwise. I do in fact have complex political beliefs, and they are decidedly on the \"punch Nazis erryday\" end of the spectrum.. I appreciate the discussions in good faith. Thank you all for your passion and perspectives.\nI will be updating our CoC to the latest version of the Contributor Covenant as soon as I have the spoons to figure out an appropriate email to configure it with.. Yes, @CamBurris is correct.. I'm not sure why you need to --force-publish --canary? Canary releases are already capable of deriving what is necessary to publish based on what changed in the previous release. It's designed to be run as a \"nightly\" build that runs on every commit pushed to master, for example.. @dotansimha Yes, I realized that it's actually because we're not passing options.forcePublish to collect-updates anymore. It's kinda intentional? But I probably made the wrong choice. There's a lot of ambiguity in the history of the option.\nI'm not entirely comfortable with where --canary is right now, conceptually. I'd like it to be more like semantic-release, with an option to propagate release tags etc back to the remote. And I'd really like to get away from any option that says \"force\" in it. Maybe --all is a better descriptor for the desired behavior?. @wereHamster Checksum diffing is way out of scope for Lerna itself. Since v3.2.0 there is support for a root postpack lifecycle that could conceivably run a script that finds all the packed tarballs at the root of package locations and checksum stuff then. You can't exactly change anything about the publish process then, except I guess mutating something in the tarball or exiting non-zero and halt the publish entirely.\nChanges external to a package aren't the concern of lerna for the same reason they're not a concern of npm: there's literally no way to do that without specific domain knowledge of an individual environment/ecosystem.. @wereHamster Sure, fine. PRs accepted.. Please have patience with me. I don't have a lot of spoons right now, between dealing with an unprecedented (for me) deluge of Twitter notifications and staving off suicidal ideation.. > It certainly appears to many as though your loyalty to your employer influenced the revert back to the old license.\nIt did not. Please stop repeating this baseless canard.. @benwiley4000 If you're looking for \"rancorous sniping and harmful drama\" you might try using a mirror.. Explain how me, the person who made the decision, not employed by Microsoft, was secretly paid by Microsoft to ruin open source. Should be an amusing story.. I made the decision after speaking with Sean. It is possible to talk to somebody and then make an independent decision. If that's hard to believe, it's not my problem.. And we're done. I'm going to spend the rest of the long weekend restoring my mental health. I'll resume my pariah duties on Tuesday.. @CamBurris Yep, exactly. Thanks for stepping up in issues recently, I really appreciate it.. Yes, please, that would be great! I wasn't even aware there was a new major available.. Briefly scanning the commits (no Github releases entered :/), https://github.com/conventional-changelog/conventional-changelog/pull/301 and https://github.com/conventional-changelog/conventional-changelog/pull/335 might prove challenging for our upgrade (some snapshots will need updating, at the very least).. @hbetts Yes, sorry, didn't mean for the comment to come across negatively. I still manually copy+paste the release notes into the Github release fields, which of course is prohibitive to do when versioning independently.. lerna publish from-git does exactly what you describe. You can effectively do lerna version && lerna publish from-git if you want to make the process appear more recoverable.. There's not a lot anyone can do without a compact reproduction. In any case, these lines look like the significant parts of the error message:\nerror: git diff header lacks filename information when removing 1 leading pathname component (line 845968)\nerror: could not build fake ancestor. I need more context to even begin debugging. The lerna.json would be a good start. This call retrieves the current tags, and this one locates the changed packages from the tagged revision in non-independent (\"fixed\") versioning mode.. It's a bit confusing that you would run lerna version and lerna publish from-git subsequently in the same CI build. Why not just lerna publish? It calls lerna version implicitly.. That's exactly what this code and this code does, respectively. Can you give me an isolated reproduction where this is not the case?. An isolated reproduction would be appreciated, thanks.. What was the exact command you tried? It's not clear from the repo you posted.\nI'm having difficulty reproducing in other lerna-based repositories with similar context (i.e., no recognized changes since the last tagged release). In pectin, for example:\n```\n$ git log --oneline \n8de783d (HEAD -> latest, origin/latest, origin/HEAD) chore: Add code of conduct\nb0a1690 chore: Add badges [skip ci]\nfa70a30 test: Fix mind-bending node v8.x problem with CLI tests\n1910d4d chore: Travis\n1f32de6 chore: Add lockfile and .yml files to 2-space overrides\na2674ca chore: add tabWidth overrides for yaml + json config files\n6e9c571 (tag: v1.0.0) chore(release): v1.0.0\n810de3e docs: Add #readme anchors to package links\nce2d5cb feat: open source\n$ npx lerna changed\nlerna notice cli v3.2.1\nlerna info Looking for changed packages since v1.0.0\nlerna info No changed packages found\n$ npx lerna changed --force-publish\nlerna notice cli v3.2.1\nlerna info Looking for changed packages since v1.0.0\n@pectin/api\n@pectin/babelrc\n@pectin/cli\n@pectin/core\nrollup-config-pectin\nrollup-plugin-main-entry\nrollup-plugin-subpath-externals\nlerna success found 7 packages ready to publish\n$ npx lerna changed --force-publish @pectin/cli\nlerna notice cli v3.2.1\nlerna info Looking for changed packages since v1.0.0\n@pectin/cli\nlerna success found 1 package ready to publish\n$ npx lerna version --force-publish @pectin/cli\nlerna notice cli v3.2.1\nlerna info current version 1.0.0\nlerna info Looking for changed packages since v1.0.0\nChanges:\n - @pectin/cli: 1.0.0 => 1.0.1\n? Are you sure you want to create these versions? (ynH) \n```\nDespite no changes to packages/*, both --force-publish and --force-publish <pkg> appear to work as expected. (lerna changed is a quicker/safer way to test flags for lerna version and lerna publish)\n. I'm not sure what lerna is supposed to publish when nothing has changed? This is one reason I dislike --force-publish in general: it leads to a false sense of purpose. If a given package didn't change, lerna won't publish it. Lerna certainly won't try to publish anything if there have been zero commits since the last release.. I'm so close to deleting the --force-publish option entirely, it has given me nothing but pain, recently.\nConvince me to keep it by contributing a PR to \"fix\" it. I'm done trying to make it work.. I would prefer it to be a positional argument in the same pattern as lerna publish from-git:\nlerna publish from-package\nOtherwise, sounds fine to me.. I guess I was initially thinking of this as a \"recover from broken publish after successful tagging/push\" mode, not a way to free oneself from using git tags properly. I'm also not a huge fan of version changes being made in a PR (or feature branch), since that is not the right time to make those choices*.\n\nWhen was the last time you accepted a PR to a \"traditional\" npm package that included a bump to the package.json version field?. Without git tags somewhere Lerna can't make decisions about what packages have changed. By using lerna publish from-package, you are essentially committing to always using the keyword, as no other arguments to lerna publish will make sense after breaking the git tag ceremony.. Lerna versions and publishes npm packages, it is not an application bundler.. Yeah, you're right, sorry. When a package is explicitly private, we shouldn't force folks to assign a version if they choose to remove it.\n\nThere is a huge caveat, however: If any of your local siblings try to depend on that private package, they're gonna have a bad time. I suppose that's fair, given your use case.. I think this might be a limitation of conventional-changelog? I mean, in the sense that I'm not entirely certain it would work, with multiple tags on the same commit. I could be wrong.. We call conventional-changelog-core programmatically at significant points during the versioning process, but yes, aside from resolving an optional preset and passing configuration, lerna does not itself do any of the commit parsing / text generation / etc. It might even be possible to pass the right options in the \"rooted\" independent changelog context, I'm just not sure what those are.. lerna publish was never meant to be filterable (--scope, --ignore, and --since), and v3 fixed this. lerna version is an extraction of logic from lerna publish, so the same intention applies.\nThe recommended way of cutting independent versions remains the same:\nlerna publish\nWhy was --since needed in the first place? I'm not sure what you mean by \"properly generate changelog and new semver\". Is --conventional-commits not working as you expect?. Yeah, totally. batchPackages is exactly the ticket, I would imagine a conditional between these two steps:\n```js\n    chain = chain.then(() => getFilteredPackages(this.packageGraph, this.execOpts, this.options));\nif (this.options.toposort) {\n  chain = chain.then(filteredPackages =>\n    batchPackages(filteredPackages)\n      // flatten batched packages for display\n      .reduce((arr, batch) => arr.concat(batch), [])\n  );\n}\n\nchain = chain.then(filteredPackages => {\n  this.result = listable.format(filteredPackages, this.options);\n});\n\n```. Yeah, it's tricky. I've been noodling about this for about an hour now.\nBasically, instead of using --no-bail to control the reject option passed to execa, we (probably?) need to always pass { reject: false } and do our own accounting (including setting process.exitCode, if necessary) after all the executions resolve. At least, that's how I'm exploring it right now.. Also, please move this change to a feature branch (not master) of your fork. Pretty sure you can modify the PR in-place, no need to close/re-open. Thanks!. The AppVeyor build is failing in master because apparently quoted shell arguments are hard for Windows, not your fault. I restarted the Travis builds, looks like they hit a cascade of timeouts for environmental reasons.. It sounds like you don't need npm packages at all? Webpack does fine on a large tree of relative references.\nIn any case, this is not a Lerna issue. I use webpack with lerna-managed packages (built by @pectin/cli) every day with no issues.. Treat them as npm packages. It is a best practice to always ship\nES5-compatible code in the main entry point. To do otherwise is extremely\nbrittle, even in situations where you think you control all the consumers.\nTranspiling into ES5-compatible JS for main is still a best-practice for\ndeveloping many inter-related packages in the same monorepository. Tools\nlike Pectin help streamline this, also allowing a module entry so\nbundlers like Webpack can tree-shake better.\nOn Thu, Sep 6, 2018 at 11:17 AM hannad rehman notifications@github.com\nwrote:\n\nout of curiosity what do u suggest?\nshould I put raw es6 in my packages and then import then in other\npackages. or should transpile es6 modules and then import it in other\npackages.\nformer will be faster in development. and later will obviously be slow\nwhen developing the common packages.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/lerna/lerna/issues/1656#issuecomment-419192304, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAV5eiQmS385rTz-_CynTmi4SOaMJOIks5uYWaugaJpZM4WcWBy\n.\n. Thanks for following up. Improved documentation is definitely on my todo list.. I think an option like --init-module would be a good way to do this, as it is essentially the same way the code is currently doing it (and matches npm init nicely). Instead of always passing the locally-resolved init script, it could optionally pass the resolved value of the --init-module option.\n\nHowever, you'd still have all the file creation and whatnot. I think a third-party command (discussed in #1584) would be a better approach for complete customization like that. (Or just use npm init with your custom init-module?). Yes, it's an unintentional oversight. As for lerna exec, you can echo $LERNA_PACKAGE_NAME as well.. A --toposort flag was added to lerna ls in v3.6.0. The default sorting is lexical directory sort (effectively alphabetical). It does not actually respect --sort.. I'm a little confused why the globstars (**) are necessary in your packages config? Recursively nesting package.json files is a bit odd when they're rooted in subdirectories already.\n(There's no strict requirement for the packages directory to exist in the path, either, but that's orthogonal). That sounds like a difference in git state, possibly with missing git tags. The state of node_modules is largely irrelevant to lerna publish in 2.x. Does the issue persist with lerna v3?. I'd appreciate any demonstration repo you can provide with this reproduction. There are too many variables to debug without actual code/tags/branches etc to look at.. @hbetts Thanks for the clarification!. It appears to be yarn \"helpfully\" making the git tag call, as Lerna most definitely does not attempt to create git tags during a --canary publish. To workaround it, configure npm as your command.publish.npmClient.\nAs for properly fixing it, I guess we need to read the yarn source to figure out which inscrutable CLI option is required to disable this \"helpful\" tagging. Or just revert to always using npm to publish, which is really what I'd rather do, for a whole bunch of reasons.... I found it: https://github.com/yarnpkg/yarn/blob/eb2b565bb9b948e87b11119482ebc184a9d66141/src/cli/commands/version.js#L149\nPassing --no-git-tag-version to yarn publish should fix this.. That sounds like a great idea! I imagine you'd want to structure the command somewhat similarly to lerna ls, at least initially. Let me know if I can help with any other pointers around the codebase.. Oh, and don't worry about the AppVeyor failures, I'm wrestling with line endings or something now in master.. I ended up fixing this in v3.3.2, thanks for identifying the root cause.. As explained in that PR, I don't think that is the case. More context here. The fact that tools like license-checker work without the file being present in the package tarball doesn't change the requirements of various licenses, such as MIT.\nThe license pattern is very broad, allowing any (English) spelling, case, or file extension (or none at all). It is very easy to provide a license file in the root of a monorepo, and in any case, this warning does not adversely affect the performance of lerna publish. If you want to hide it, --loglevel error will do the trick.\nThank you for opening this issue. I believe it is in the best interest for every participant in the open-source ecosystem to err on the side of caution when it comes to licenses, and it is beneficial to the community for Lerna to promote this pattern.. Ooh, yes, I agree! We should definitely clarify the message to be more actionable.. To be perfectly honest, I really don't like the --force-publish option. More often than not, it seems to lead people to believe they need to use it for purposes that are often mysterious to me.\nIn your case, I really don't see what the second publish is accomplishing? lerna version preminor has already established the tag, which every subsequent lerna publish prerelease will bump as expected. Publishing the exact same code with a new prerelease version does absolutely nothing to help \"avoid human errors opening a bad version\". Your example is also notably publishing the preminor version to the \"latest\" dist-tag, which is generally not a good idea with prereleases of any kind, much less a \"starting a new development cycle\" release.\nI don't want to sound like I'm claiming Lerna is perfect, because it quite frankly isn't, especially in a continuous deployment + automatic versioning scenario. lerna publish --canary, for example, is a fundamentally different behaviour than a tool like semantic-release. The prerelease bumps are even less flexible in a CI/CD pipeline, given Lerna's dependency on creating and publishing significant git changes.\nOne of my near-term goals, which I should really get around to properly documenting in a roadmap, is effectively a lerna release command that operates much better in terms of automated versioning during a CI/CD cycle.. Actually, lerna publish has never had a --no-bail option, unlike lerna exec or lerna run. Unfortunately, the \"recovery\" right now is, after it fails and leaves a mostly-dirty git tree, you have to go into the package directories one-by-one and run npm publish <packageName>-<version>.tgz. If the git tree has been cleaned already, you might be able to run npm publish in the leaf directories of the affected packages. And that ... really sucks.\n1648 gets closer to a \"recovery\" scenario that might help make this suck less. In an ideal world, recovering from a failed publish wouldn't require ignoring failures, the command would be smart enough to skip packages that already have matching versions available in the configured registry.. Yes, I would appreciate seeing what a solution could look like. I like the from-package positional argument I described in #1648 as a gate for the preflight version checks.. That's literally what your test script is configured to execute. You need to replace \"echo \\\"Error: no test specified\\\" && exit 1\" with an actual test command, like \"jest\" or \"mocha\".\nClosing as this is not a Lerna issue.. If you're using yarn, you might as well use yarn workspaces and let lerna focus on just versioning and publishing? lerna bootstrap is just calling npm install (or yarn install) in leaf package roots with a mangled package.json that removes local siblings.\nYou could always just blow away the node_modules and run lerna bootstrap again?\ngit clean -fdx packages && lerna bootstrap. I hadn't thought of that. Thanks for providing detailed context!\nI agree with this (and #1667) now, it makes sense to allow --force-publish to overrule what I thought was a clever optimization when the current revision is a tagged release.. Forgive me, but why can't you just run eslint . --cached from the root? Far faster than booting up lerna etc etc.. Best-of-breed testing tools (like eslint and jest) provide CLI options that can optimize the precommit experience dramatically, no Lerna required. Lerna's core competency is not detecting dirty trees in order to run precommit hooks.. > Why is detecting dirty trees an issue? Just because its not committed yet, doesn't mean the package has not been changed.\nWhy is lerna suddenly responsible for running all basic git commands ever?\nlerna changed is meant to preview the decisions of lerna publish, it is not a replacement for git diff. Perhaps renaming it from lerna updated (still an alias) to lerna changed is misleading?\n\nThis worked perfectly fine before the commit a few weeks ago.\n\nThat's not a strong argument, considering the behavior was largely unspecified before the change. That it worked to detect unstaged changes was an accident, not an intentional design decision.. I see a much stronger argument to adding support for --name-only to lerna diff (or passing any arbitrary flags to the underlying git diff call, for that matter), which would cover the pre-commit case quite well.\nI am sympathetic to your situation, please don't get me wrong. I was a little cranky yesterday, I'm sorry. I feel pretty strongly that one of the huge benefits of a monorepo is the ability to share all of the linting and testing config and always call it from the root, affording big speed benefits out of the box because most of those tools already provide partial run optimization. I want to focus lerna on its strengths, and part of that means identifying implicit or ambiguous behavior and making it explicit and specific.\nThe main problem with adding --dirty to lerna changed is that the command uses the same underlying mechanism (@lerna/collect-updates) to detect changes as lerna publish and lerna version. collect-updates is already fiendishly complex, and I'd like to avoid further complications. It also needs to stay consistent with lerna version, which demands a clean working tree (exactly like npm version, which is a very intentional design decision).\nIt's not an intractable problem, of course. I just don't have the bandwidth right now to tackle it myself. I am open to exploring it if you would like to open a PR.\nThank you for your patience.. Hmm, theoretically that should be redirecting the stdout, but I don't know how useful that is. Are you trying to use the results in a post-release reporter/notifier of some kind?. 1. It's really confusing when you title a new issue identically to a previously closed one.\n2. Reproduction needed, a failing test would be ideal.. 1. It's really confusing when you title a new issue identically to a previously closed one.\n2. Reproduction needed, a failing test would be ideal.. This doesn't strike me as a Lerna problem, but possibly Typescript or Yarn or Webpack (combined)? I don't use jQuery or Typescript, but I've literally never had the problem you describe here, across several dozen repositories and hundreds of modules.\nIt is very strange that your leaf package.json files point their main to a non-CommonJS file. That's not how npm packages are meant to work.. Lerna will bump dependents of packages with direct changes as well, conventional commits or not. #707 explains the reasoning.. If you are using relative file: specifiers, you don't need lerna bootstrap. Run lerna link convert once and you should be in business, npm install in the root will do everything you need (except build the packages, which you could do from a root prepare lifecycle with @pectin/cli).. Quite frankly, if you're never publishing any packages in your monorepo, I don't recommend using Lerna. Just use relative imports.\nThat being said, if you use relative file specifiers you need to also have a local file dependency in the root. You also need to run any prepare or prepublish scripts manually, as npm does not do that for local file specifiers.\nTL;DR: Until you're prepared to run lerna link convert, don't use file: specifiers.. @borekb Yes, root file:packages/foo specifiers should work. All your example packages are private, it doesn't look like you need Lerna?\n@RikkiGibson No, lerna does not support that.. @borekb Yes, root file:packages/foo specifiers should work. All your example packages are private, it doesn't look like you need Lerna?\n@RikkiGibson No, lerna does not support that.. @borekb oh, and there shouldn't be a lockfile in packages/app/, it's all handled in the root lockfile.. @borekb oh, and there shouldn't be a lockfile in packages/app/, it's all handled in the root lockfile.. @RikkiGibson That's what npm link is for (if isolated tests in the external package aren't sufficient).. @RikkiGibson That's what npm link is for (if isolated tests in the external package aren't sufficient).. Using relative file: specifiers, lerna is doing nothing related to symlinks. That's all npm.. I don't know why the stale bot closed this, I feel like it's misbehaving.\n@wbern lerna bootstrap --hoist is incompatible with relative file: specifiers. Use one or the other. I prefer the latter, personally.. Thanks!. Thanks!. Don't pass --parallel and it works exactly as you desire. I don't recommend running test tasks inside a \"build\" script. You should run the tests from the root after a successful build.. It's notable that --scope matches package names, not directories. I highly doubt you are the owner of the \"common\" package on npm.. (Scope applies perfectly well to lerna run, but it won't execute in packages that lack the target script). Are you calling Lerna from a Yarn-executed script, by chance? Also, you might consider upgrading Lerna, 3.4.0 adds much more useful authentication checks. A per-package publishConfig.registry field is another way to configure custom registries.. This is like the third issue today that is being caused by Yarn's incompatible registry proxy. I'm half tempted to detect their proxy and just overrule it with the public npm registry, it's the same damned thing (except for how broken Yarn's proxy is).\nI would have hoped Artifactory could get their shit together enough to implement such a basic authentication endpoint. But then they love to have multiple endpoints between install and publish, so \u00af\\_(\u30c4)_/\u00af . @fenduru Of course, but you'd also expect a third-party registry could maybe implement extremely basic endpoints to validate one's authentication? npm whoami is a pretty basic thing. 50% of the \"my lerna publish command failed\" issues I deal with are because of bad authentication credentials.\n@ixalon Does npm whoami work with the same registry config?. Still lacking any verifiable reproduction, so I'm not likely to make progress on this.. v3.8.4 gives up and stops expecting third-party registries to demonstrate any form of competence.. @lucasowens We need more details about the error, please. The lerna command alone is not sufficient. (what was the network error, what is your npm config, etc). Anyway, nevermind, gave up and skipped all the crap nexus and artifactory fail at. v3.8.4. Broken record: --skip-git wasn't skipping all git operations, just the commit and push. Git is necessary to determine which packages changed since the last release.. This can be worked around by passing the new --no-git-reset flag, introduced in #1791 .. As long as those packages have proper dependencies on the sibling packages that they must run after, that's ...exactly what happens? If you're hoping for a magical way to avoid configuring proper dependency relationships, I'm afraid you're going to be disappointed.\nlerna bootstrap, lerna exec, lerna run, and lerna publish all operate on packages in batched topological order (all dependents before dependencies) by default. To disable this topological sorting, you can pass --no-sort (though honestly I don't know why you would in 98% of cases).. As long as those packages have proper dependencies on the sibling packages that they must run after, that's ...exactly what happens? If you're hoping for a magical way to avoid configuring proper dependency relationships, I'm afraid you're going to be disappointed.\nlerna bootstrap, lerna exec, lerna run, and lerna publish all operate on packages in batched topological order (all dependents before dependencies) by default. To disable this topological sorting, you can pass --no-sort (though honestly I don't know why you would in 98% of cases).. You can't. A Lerna-managed monorepo doesn't work that way.. You can't. A Lerna-managed monorepo doesn't work that way.. Because it breaks the fundamental mechanism Lerna uses to determine which packages need to be published? Absolutely nothing stopping you from not placing several packages in the same monorepo that apparently shouldn't be.. Because it breaks the fundamental mechanism Lerna uses to determine which packages need to be published? Absolutely nothing stopping you from not placing several packages in the same monorepo that apparently shouldn't be.. --scope is not allowed for a tagged publish because that would fundamentally break the ability to properly publish the ignored packages. This is because lerna publish uses git tags to identify releases, and it does not distinguish between the target package, merely the \"most recent\" annotated git tag.\nThis is the compromise you must accept when you dump a bunch of packages into the same repository. They are no longer truly independent, even though the version numbers might seem to imply otherwise.\nIf you're not ready to publish a package, they should be made private (put \"private\": true in their respective package.json files. They will be versioned, yes, but never published to a registry. To avoid versioning them at all, you shouldn't merge them into master (or wherever you publish from).\nOne way to publish non-versioned prereleases is by using the --canary + --force-publish flags:\nnpx lerna publish --canary --force-publish <package-1>. --scope is not allowed for a tagged publish because that would fundamentally break the ability to properly publish the ignored packages. This is because lerna publish uses git tags to identify releases, and it does not distinguish between the target package, merely the \"most recent\" annotated git tag.\nThis is the compromise you must accept when you dump a bunch of packages into the same repository. They are no longer truly independent, even though the version numbers might seem to imply otherwise.\nIf you're not ready to publish a package, they should be made private (put \"private\": true in their respective package.json files. They will be versioned, yes, but never published to a registry. To avoid versioning them at all, you shouldn't merge them into master (or wherever you publish from).\nOne way to publish non-versioned prereleases is by using the --canary + --force-publish flags:\nnpx lerna publish --canary --force-publish <package-1>. The CLI option --use-workspaces is equivalent to the lerna.json key \"useWorkspaces\": true.. This does not fix #1583. You need tags to use Lerna. If Jenkins doesn't provide them, I don't see how that is Lerna's problem.. I'm afraid I'm going to need more detail, as I do these exact steps in lerna itself (and many other repos) and have never encountered this problem. It stands to reason that the method of locating the insertion point could be better (for example, it's searching for a brittle HTML substring that is no longer present in v5 of the angular changelog preset).\nWithout a failing test example, I don't know that I can make any confident diagnosis.. I'm afraid I'm going to need more detail, as I do these exact steps in lerna itself (and many other repos) and have never encountered this problem. It stands to reason that the method of locating the insertion point could be better (for example, it's searching for a brittle HTML substring that is no longer present in v5 of the angular changelog preset).\nWithout a failing test example, I don't know that I can make any confident diagnosis.. > A situation like this is extremely costly for organisations, and commercial / financial realities strongly discourage me from digging in to the lerna code.\nIt seems like it isn't costly enough to your organization if you can't justify spending time to contribute a fix.\n\nA much better solution to the multi-package scenario would be to lobby npm to provide better out of the box support for the scenario.\n\nThe npm cli team is very aware of this, and has told me directly that they plan on implementing the Yarn workspaces spec within the next year. They are a (growing!) team of two people, so please have patience.. > A situation like this is extremely costly for organisations, and commercial / financial realities strongly discourage me from digging in to the lerna code.\nIt seems like it isn't costly enough to your organization if you can't justify spending time to contribute a fix.\n\nA much better solution to the multi-package scenario would be to lobby npm to provide better out of the box support for the scenario.\n\nThe npm cli team is very aware of this, and has told me directly that they plan on implementing the Yarn workspaces spec within the next year. They are a (growing!) team of two people, so please have patience.. > Not sure what you're suggesting. What should I / my organization contribute a fix for?\n\n\"lerna add simply not working as advertised\"\n\"a dependency is not being linked correctly, resulting in two distinct instances of the package being loaded into memory\"\n\nI can't wait for the day when lerna can let package managers manage packages. Lerna isn't good at it, quite frankly. We can't fix bugs we're not aware of, however.. > Not sure what you're suggesting. What should I / my organization contribute a fix for?\n\n\"lerna add simply not working as advertised\"\n\"a dependency is not being linked correctly, resulting in two distinct instances of the package being loaded into memory\"\n\nI can't wait for the day when lerna can let package managers manage packages. Lerna isn't good at it, quite frankly. We can't fix bugs we're not aware of, however.. The answer to both questions is to use lerna version with appropriate flags and then lerna publish from-package. I'll have to add details later, almost off my bus.. Thanks!. Thanks!. I would suggest using npm to address npm packages. That's what lerna does. Lerna is not a Docker tool.. I would suggest using npm to address npm packages. That's what lerna does. Lerna is not a Docker tool.. Well, you probably need to provide an NPM_TOKEN env var in Travis, then?. Well, you probably need to provide an NPM_TOKEN env var in Travis, then?. @StarpTech \n\n(Currently missing) The versions from the package.json are used to create new git-tags\n\nThis would only apply in independent versioning mode, yes? In the default \"fixed\" versioning, the tag will already be present when a partial publish occurs.. I'm okay with not making the tags, it's overcomplicating the issue and teetering closer to patterns that I consider outside Lerna's scope.. If your initial publish failed, but the version tags got pushed, you can recover by calling lerna publish from-package, which will publish any package whose version is not present in the configured registry, irrespective of current tag etc.. I'm sorry, this fundamentally breaks the contract of lerna: Every package that has changed since the most recent git tag will be published with a new version. Skipping a package during publish is an enormous footgun, and will not be accepted.. I recommend the following:\nnpm i -D lerna@latest\nnpx lerna link convert\nThere's not a lot of migration documentation, sorry.. Yes! Lerna runs the version (preversion, version, and postversion), prepare, prepublishOnly, and pack (prepack and postpack) lifecycles in the root during lerna publish in addition to those run in each leaf package.\n\nroot preversion\nleaf preversion\nleaf version\nroot version\nleaf postversion\nroot postversion\nroot prepare\nroot prepublishOnly\nroot prepack\nleaf prepublishOnly\nleaf prepack\netc etc. Thanks, I appreciate it!\n. Yes, the options are confusingly-named --scope and --ignore (I would  like to rename them --include and --exclude, but it's pretty far down on my priority list). This is distinct from \"private\": true in a package.json, which only prevents that package from being published to a registry.. If your build steps are likely to fail, I would suggest running them before lerna publish to ensure they actually succeeded.. I really don't know what to say. https://www.npmjs.com/package/@lerna/run-parallel-batches definitely exists at 3.0.0. I would recommend enabling package-lock.json in the root, then running npx lerna link convert. Then you'll always have exactly what you expect, and npm ci will be much faster than lerna bootstrap could ever hope to be.. I don't see this as within Lerna's scope. Lerna isn't a watcher interface, nor does it provide one. There are packages available to retrieve Lerna's topological computation without burdening lerna exec with additional complexity.. General CLI:\nhttps://www.npmjs.com/package/chokidar-cli\nhttps://www.npmjs.com/package/nodemon\nhttps://www.npmjs.com/package/onchange\n\nBabel + Rollup:\nhttps://www.npmjs.com/package/@pectin/cli\nProgrammatic API:\nhttps://www.npmjs.com/package/glob-watcher\n. Sorry about the bot noise. I don't believe we have anything documented, as such. Pectin is a tool I wrote to streamline modules created with lerna create --es-module, it works out of the box with #zero-conf.. Babel isn't a module bundler, Rollup isn't a transpiler, and I wasn't aware I was stopping you from creating your own solution.. It's weird that the directory lacking a package.json is getting found in any case.. Don't address them as lerna packages? This is how lerna itself uses test-only packages that are never versioned or included in changelogs.. Unclear to me why you need lerna to manage those private packages. Relative file: paths work just fine, the \"test-only\" pattern I linked earlier is by no means limited to \"test-only\" packages.. --since needs a certain level of Git support, which could likely be better communicated/error-handled, but isn't going to be \"fixed\" by Lerna.. This is intentional, as the commit SHA is build metadata. It cannot use a . delimiter because then it would become a part of the prerelease specifier, which is inappropriate for the purpose of a canary version. Build metadata is necessary to ensure the uploaded tarball is unique, and is supported by the public registry.\nHere's the spec: https://semver.org/#spec-item-10\nHere's semver's support: https://github.com/npm/node-semver/blob/master/range.bnf#L12\nWith all due respect, this isn't going to change. ProGet needs to fix their support. Presumably you're paying for it, so they have incentive enough.. At least for the root install, sure. I'd recommend migrating away from lerna bootstrap, however. It's days are numbered.. @doug-wade The conditional assignment here needs to be guarded better, nothing needs to change in the options config. . This has been implemented in a recent release.. @sohkai run npx lerna link convert once, then just npm install (or npm ci) in the root.. Yes, but you need to lerna bootstrap in the monorepo, too. This means that if your leaf packages require a build, they must also be built for the linked application's import to succeed.. If you are running lerna bootstrap to generate lockfiles, you should never run npm install directly inside one of those leaves. Lerna mangles the leaf manifest appropriately to make npm ci succeed.\nAlternatively, run npx lerna link convert once and stop using lerna bootstrap.. --npm-tag controls the dist-tag, not the semver --preid. The two are actually orthogonal, you can use any string identifier as a dist-tag, it's just a pointer to a given version, which is an arbitrary semver-compatible string.\nSo yes, a prerelease that uses the beta preid under the beta dist-tag would need to use both --npm-tag and --preid options.. This will largely be fixed by #1708 , no extra complexity required.. That... is how scoped packages work? By default, they are private. \"private\": true in the package.json is a completely different context: it tells npm \"never publish this package ever\".\nhttps://docs.npmjs.com/files/package.json.html#private. No, you can't nest like this. You can, however, provide multiple (non-nested) package locations.\nWith this lerna.json:\njson\n{\n  \"packages\": [\n    \"my-company/*\",\n    \"not-my-company/*\",\n    \"some-org/*\"\n  ],\n  \"version\": \"...\"\n}\nYou can have this layout:\nmy-lerna-repo/\n  lerna.json\n  package.json\n  my-company\n    package-1/\n      package.json\n    package-2/\n      package.json\n  not-my-company\n    package-3/\n      package.json\n    package-4/\n      package.json\n  some-org\n    package-5/\n      package.json\n    package-6/\n      package.json\n...and they can all inter-depend as necessary.. It probably should, although perhaps not by default. In the dev/peer case, that does seem unnecessary.. > side note, mostly-unrelated: you definitely should not have a gitHead property versioned in your package.json files, that's a temporary property only meant to exist during publishing.\nMy opinion on using git-flow? Don't.\nIt's a bunch of ornate process that is largely unnecessary with the proper CI and continuous delivery infrastructure. Long-lived feature branches are an anti-pattern, in my experience. Tag releases clearly and consistently, and \"fix forward\" from master instead of \"hotfix\" branching.\nThat being said, Lerna depends on annotated git tags to identify the \"changed\" status of a given package, and hence its versioning/publishing. Lerna is optimized for \"Github flow\", which generally means PRs from forks into origin, and green builds in origin can be auto-published.\nSo instead of the contents of the package.json, you would need to ensure git tags generated at any given point aren't mangled by the various merge strategies (very difficult), or restrict Lerna tagging to the master branch (if you need to publish from a feature branch, do it as an untagged --canary or the like).. A .env file sounds like you're trying to use dotenv or something like it. Absolutely orthogonal to Lerna.. Lerna just runs things, it is not the reason your build is slow. I would recommend migrating away from lerna bootstrap --hoist and instead run lerna link convert once and then you only need to npm install once in the root from then on.\n(also, it's extremely weird to call npm install from inside an npm script). I think this is functionality better-suited to an external tool. npm init has plenty of customization options nowadays.. >  remove the \"lerna create\" command completely and rely on existing templating tools?\nYes, essentially. There are too many cross-cutting concerns for a module initializer, I should have never added this command (which fulfills my own requirements,  as I extracted it from a private tool I wrote).\nIt (and many other esoteric subcommands) would be better as a pluggable CLI, like git allows git-{addon} executables found in the path to be called as git {addon} and so forth.\nYou're basically asking to support --init-module, but lerna create has way too tightly-coupled filesystem modifications to make any third-party module initializer tractable. Of course, one could always bail early if --init-module was customized, but then you might as well run npm init --init-module=my-initializer-module?. lerna create is just a fancy wrapper around npm init. You can literally mkdir packages/foo && cd packages/foo && npm init and it will work. Use whatever create-* module to do the TS templating, or just use a Yeoman generator.. I would say you need to harmonize the version of typescript used in a given monorepo. Otherwise, I'm not sure that outdated dependent really belongs in that monorepo (if it can't be updated, why is it different from the others to such a degree?).. Sounds like a job for codemods, tbh. @SRGOM This is your first and only warning. Adhere to our code of conduct, or find another project.. I appreciate the contribution! I chose the other PR because it made the sentence read better overall.. @dzsodzso63 Sorry for the inactivity. Does lerna changed --include-merged-tags not work for you?\n(lerna changed accepts all flags that lerna version does, as documented). prerelease is identical to prepatch, in practice.\nThat being said, I'm not sure you need prereleases here? Essentially, you should never be publishing to the default latest dist-tag if you have a \"staging\" dist-tag (like \"next\"). The promotion of a given version (after test validation, or the like) only needs to use npm dist-tag, not overcomplicated lerna incantations.. Actually, this is lerna bootstrap that is resetting the leaf manifests, not lerna exec. Especially with --hoist, which is doing a whole bunch of mangling to the dependencies specs.\nI would recommend inserting a git add . before running lerna bootstrap.. Also, note that you don't need to install npm-check-updates globally to access the ncu binary from lerna exec; a local devDependencies install is sufficient (and more portable) as Lerna uses a library that automatically adds {root}/node_modules/.bin to the PATH when executing its script arguments.. lerna bootstrap is basically legacy code at this point, I haven't personally used it in over a year. I'd say the lerna run postinstall route is the correct one.. ```sh\nrun once\nnpx lerna link convert\nthereafter, in the root\nnpm install\nor npm ci, the whole tree is locked\n```. Yes, it hoists. I'm not sure I understand why you're even using lerna for what sounds like something that very much wants to be its own repository.\n\nOn Jan 4, 2019, at 18:18, Matthew Mirande notifications@github.com wrote:\ndoes that hoist everything to the root? honestly confused on what the\u201dhappy path\u201d is these days.\nmy packages require non-dev deps to be installed locally (not hoisted to the root) since vscode essentially zips up node_modules and includes them in the published extension.\nas it is today using learna v2, I\u2019m able to install all root and package deps via npm I at the top-level which also runs postinstall routines in each package. this bug was filed b/c this no longer works in V3. happy to do all of this using new / different lerna features but I don\u2019t know what those might be\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Thanks for being patient with me. :)\n\nOn further reflection, I had a hunch it might be related to the use of npm-lifecycle, which we now use instead of allowing the subprocess npm install to run the scripts. (Spoilers: yes, but not where I expected)\nAt first, I thought it was a bug in the library, but just now I read the source, and npm-lifecycle is indeed creating those env vars (instead of what I dreaded, something leftover in the npm CLI). So it's an issue with the pkg parameter (data in the makeEnv() function).\nTurns out the pkg we are passing in is an internal Package instance, not the actual package.json's JSON object. And instances of that class have a lot of non-enumerable fields and such.\nSo you're totally right, this is our bug, and I'mma fix it. Thanks for your persistence!. Published in v3.9.0. That's actually a side-effect of npm v5.10.0 and higher. They changed the lockfile format to include the requested ranges, not the resolved versions.. Thanks!. This isn't a lerna issue. Once the issue is resolved with execa, unless it's a major version, there's nothing for lerna to do.. How exactly does execa's preferLocal option cause this error? npm-run-path is what is actually modifying the env when preferLocal is true, but I don't see how it would prepend paths like /usr/bin by itself.. Looking deeper, I do indeed see the problem in npm-run-path. There is an open PR that needs some help. This option won't change in lerna because it is necessary to make hoisted executables work, as well as maintain parity with npm run semantics.. It sounds like you need to blow away the Artifactory cache that insists the package doesn't exist?\n\nOn Nov 5, 2018, at 15:03, Emelia Smith notifications@github.com wrote:\nI can\u2019t reproduce locally (logout, clear cache, npm view) \u2014 could you post the output of npm view @lerna/run-parallel-batches@^3.0.0 \u2014loglevel silly\nThanks!\n\nOn 5. Nov 2018, at 23:18, Ben Scott notifications@github.com wrote:\nIt's probably worth noting that the repository in which I'm using Lerna is a private scoped package that's being published to an internal instance of Artifactory. Our package is scoped and we have to log in to artifactory as well, so this could potentially be causing an issue, not sure.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Thanks!. from-git is a positional argument, not a flag.. I would just run npx lerna link convert and stop worrying about bootstrap or hoisting. I'm a little unclear why you need to keep the root in some legacy state, seems like the transition to lerna would be a good opportunity to shed that technical debt.... I don't believe altering the initial graph painting is the right place, it should be a method similar to PackageGraph's partitionCycles(), but instead returns a brand new PackageGraph with the unchanged siblings excluded.. @mjhenkes It's important to note that versioning (lerna version) is separate from publishing (lerna publish) today, it's just that lerna publish isn't quite quick enough on the uptake to realize this without a special from-git positional argument. You can pretty much call lerna publish from-git unconditionally in CI, as it will just no-op if the current revision lacks an annotated tag (or tags) created  by lerna version.. > deprecate automatic versioning, use lerna version first instead\n\n\nlerna version is already implicitly used by lerna publish, though the context and decisions around that are certainly up for debate. There shouldn't be a lot of duplication, though there is a lot of overlap (and doubtless things I missed when teasing the commands apart).\n\nseparate tagging as \u201clatest\u201d (dist-tag) from publishing the tarball\n\nThis was actually the default in early lerna 2.x, it would first publish to a lerna-temp dist-tag and then after all packages were published would loop through and move lerna-temp to latest. This pattern can be enabled in lerna 3 with the --temp-tag option.\nShould it be restored as the default? I'm not against it, I suppose. We still need to do better \"disaster recovery,\" in any case. Temporary dist-tags aren't going to solve the entire problem (not that you were implying that).\n\nremove execScripts\n\nBig \ud83d\udc4d. > switch to libnpmpublish instead of shelling out to npm/yarn\nThis is done as of v3.7.0 (v3.7.1 improved the logging a bit). I'm a little unclear where this particular build script is located: the leaf package.json or the root package.json?. Okay, thanks for clarifying. Have you tried putting single quotes around the expression after the -- (instead of the backslash escape)?. I would definitely remove the space in the path, independent of this issue. If this was a direct shell execution, you could do fancy inner-quoting, but because this is JSON, I'm not sure if this would work:\njson\n\"build\": \"lerna exec -- 'node \\\"${LERNA_ROOT_PATH}\\\"/scripts/build.js'\",\n. --canary no longer accepts an argument in lerna v3. Canary never tags or pushes git changes.\nIs your CI clone shallow, by any chance? If so, it's likely not deep enough to encompass the v4.0.0 annotated tag.. As long as there are reachable v3.x.x tags:\nnpx lerna publish premajor --canary. Well, I mean, once there is a reachable 4.x.x tag, then you can drop the premajor keyword argument (which defaults to prerelease when using --canary), and it will \"just work\".. Release a 0.1.0 range? I'm unclear why it's impossible for you to release a normal version at all. --canary was originally intended as a \"nightly\" build, not a replacement for prerelease or other ways of signifying \"in development\" status.. Got behind on issues over the holidays, sorry. I'm not sure this is in scope for lerna, to be quite frank. If you're going whole-hog on a monorepo, why can't you use globstars (**) instead?. I would appreciate a PR!\nThe problem with adding negative glob support to the existing packages config is that Yarn likely doesn't support it(?). I don't want to break Yarn workspaces if I can avoid it.\nWe already have logic to ignore node_modules when a ** is encountered in the package patterns. Could you extend that somehow?. @rix0rrr Yes, this is a \"regression\" in the sense that lerna 2.x half-obliterated the original package.json, only preserving dependencies and devDependencies. Lerna 3.x is less destructive, but apparently bundledDependencies slipped by (I'm not sure how you'd ensure the bundled local dep was actually the local code and not the registry version?).\n@mikea Short of not using bundledDependencies, no, there is no workaround as yet in lerna 3.x.. In terms of a fix, filtering out local package names should be inserted here, before the dependency range filter loops. Since bundledDependencies is just a list, it might look something like this:\njs\n// remove local dependencies from bundledDependencies, otherwise `npm install` breaks\nif (json.bundledDependencies) {\n  json.bundledDependencies = json.bundledDependencies.filter(depName => depMap.has(depName));\n}. Git submodules are not supported by lerna, sorry.. From the git-tag docs:\n\nAnnotated tags are meant for release while lightweight tags are meant for private or temporary object labels. For this reason, some git commands for naming objects (like git describe) will ignore lightweight tags by default.\n\nLerna uses annotated tags when versioning, uses git describe when determining previous releases, and neither of those will change.\nManual version tagging, if you need it, need only include a -m argument to remain compatible.. Sounds like you should make your own custom initializer. That's all lerna create is, after all. I suppose we could support a custom init-module, if you really wanted to keep using lerna create.. Don't confuse --src, just use --template.\nAlthough there's a bit more going on than just a template, I'd rather not reimplement yeoman inside lerna. I am happy to point to external clis or yeoman templates, in retrospect this probably wasn't a good command to add to lerna in the first place.\n\nOn Jan 5, 2019, at 13:41, Max Milton notifications@github.com wrote:\nI'd love to see this implemented in a way that developers can choose which template to create with. Either a list of options to select from or maybe something like a lerna create --src  flag?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Regardless of the complexity of the tree, npm package names are always required to be universally unique. This isn't a Lerna limitation, this is a fundamental requirement of npm.\n\nGoing out on a limb, it sounds like many folks in your gigantic monorepo might be \"overspecifying\" which things need to be lerna-managed npm packages and which things can just be a blob of code. Also, pretty sure I can't imagine such a broad glob (*/**) ever being explicitly supported by Lerna, it's just death by a thousand directory separators.. Global uniqueness of package names managed by Lerna isn't optional. If you want package.json files with duplicate names, don't configure them as lerna packages.\nIs it really that hard to configure a targeted list of package globs that don't use a globstar? I can appreciate the desire to avoid the burden of a whitelist, but this isn't exactly a frequently-changing configuration.. @elie222 No, --scope is not allowed for publish.\n@bengourley This is unfortunately not very graceful right now. If you still have the packed tarballs in your working directory, you can cd into those directories and publish them manually (npm publish <pkg-name>.tgz). #1708 will be an easier way to recover from a partial publish, at least until #1091 properly fixes your particular issue.. Yeah, that's probably better than trying to be fancy with globs. We already know which manifests changed, so the loop can be pretty simple.. The current documentation includes this important clause:\n\nNote that this only applies when using the default \"fixed\" versioning mode, as there is no \"global\" version when versioning independently.\n\n\"this\" in this sentence refers to the placeholder interpolation. The linked method is only called when versioning independently.. > when published these locations won't point to them. Does lerna swap them out before publish?\nYep. All local file: specifiers are temporarily resolved to the version range of the package they point to before being packed into the tarball. Lerna itself uses this pattern.\nYes, the pattern introduced by lerna link convert should be better-documented. For the time being, all I can point to is the source of lerna itself and a couple other public repos (https://github.com/zillow/javascript, https://github.com/evocateur/pectin, etc)\n\nIssue 3\n\nGenerally speaking, a monorepo's tests should be runnable from the root. It is up to the test runner to be flexible enough to run focused tests as desired (this is one reason among many that jest far outstrips mocha, imo). I suppose lerna exec --scope=my-package-name -- mocha would work for you, since lerna exec adds the root node_modules/.bin to the PATH when executing.. https://github.com/lerna/lerna/issues/1419#issuecomment-456182409 indicates we probably have an existing problem with lerna when it runs package scripts attempting to use binaries installed up the tree.... If you're using Yarn you might as well use Workspaces. Notably, Yarn does not support relative file: specifiers, they chose link: (Lerna works with both, although again, you might as well use yarn workspaces).\n\nOn Jan 22, 2019, at 17:08, Andrew Herron notifications@github.com wrote:\nYep. All local file: specifiers are temporarily resolved to the version range of the package they point to before being packed into the tarball. Lerna itself uses this pattern.\nI really wish this was documented better (I haven't found any reference to it yet other than this ticket). I am experimenting with migrating a large project to a monorepo and spent a bunch of time setting up a script to sed the incoming package.json files because it looked like lerna link convert wasn't giving me what I needed \ud83d\ude33\nI'm also seeing yarn warnings about colliding ranges as a result of running convert, I'm still determining whether I've done something wrong or it's an issue with the command.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. npmClient isn't want you're looking for, you're looking for the publishConfig.registry property of the target package.json files. So put your most common registry in the lerna.json property, but add a publishConfig with the different registry in each package you want to publish elsewhere.. Why not run the tests from the root? Far easier to skip lerna altogether when doing such things.. @mnutt I don't want to turn lerna into a general purpose error log parser, so I'm not really sure where this needs to happen. Controlling the linked output by loglevel sounds like a good start.. What if we passed --relative to git diff-tree? Would that work in this case?. A PR would be great!. --nohoist arguments are globs for dependency names (e.g., uuid or react*), not the names of lerna-managed local (aka \"leaf\") packages.. Without the actual error logs (or an isolated reproduction), I cannot begin to debug this problem. publishConfig itself is absolutely not a requirement for public unscoped packages that use the default registry and dist tag, lerna doesn't change almost 10 years of npm precedent in this regard.. Those package.json files definitely shouldn't have a gitHead property, those are only temporarily added by lerna publish, not meant to be versioned.. Sorry, without an actionable reproduction I can't make any progress on this. publishConfig is a completely optional property in a given package.json, except in the context noted.\n\nLike, copy+paste a test in https://github.com/lerna/lerna/blob/master/commands/publish/tests/publish-command.test.js (everyone else does) and prove to me that lerna can't publish packages that have no publishConfig property. I find it hard to believe this is the case.. It's not clear to me why lerna has to run this command, and I'm not a Docker whiz, but I assume --stream is necessary because otherwise no stdio is emitted and Docker is probably waiting for that. By default, lerna run batches up the stdio and only emits it after the subprocess has exited. --stream avoids this batching, immediately piping stdio to the current shell.. --mutex is a yarn-related flag, I doubt it has any effect on npm ci calls. I personally don't use lerna bootstrap anymore, and recommend migrating to relative file: specifiers, like the lerna source does.\n--concurrency is probably a good idea in CI environments, anyway, since they often have far fewer CPUs available and all the filesystem-intensive operations cause things to go much slower than normal. Could have sworn the default concurrency was 4, in any case.. Ugh, I wish I never allowed a lerna-managed package.json to omit the version field. It's a dirty hack for people who don't want to version private packages (which is irrelevant anyway because they're never published). I agree lerna add should validate that for a local package.. In your case, it's actually Yarn workspaces that is causing the problem ({ \"npmClient\": \"yarn\", \"useWorkspaces\": true } in your lerna.json). lerna bootstrap just calls yarn install instead of going down the rabbit-hole of logic that includes --ignore-scripts. Passing the flag after -- passes it directly to yarn, which is the correct path for passing flags directly to the package manager (the option happens to be named the same in both lerna, npm, and yarn).. I believe this is a duplicate of #1786, which should be fixed by the just-published lerna v3.5.1. Lerna creates a tarball (via npm pack) and then publishes it. Since this is an Artifactory issue, I would take it up with them.. #1804 was a bit closer to the origin of the problem. Thanks all the same!. I'm not sure what env NODE_DEBUG=libwsserver is supposed to do? env isn't called to set a value for a single execution. You might need to use cross-env?\nTangential: In lerna.json, npmClientArgs is the wrong place to pass arguments to lerna. Those are passed verbatim to yarn, in this instance. Pretty sure --conventional-commits and --hoist are meaningless to yarn. (--hoist should never be used with yarn workspaces, in any case). I'm saying that npmClientArgs is not the place to put arguments intended for lerna itself. --use-workspaces is already covered by useWorkspaces: true in your lerna.json.. Not generally, no. Once you import, that's it. Kill the old repo (or at least the subpath that was imported). Anything else is asking for trouble.. Hah, sorry, I had the fix sitting in my local master, unpushed (and then I pushed it today before I looked at open pull requests).. I think you're looking for the root prepare lifecycle?. No, a lifecycle to \"hook\" npm install with bootstrap. Or run npx lerna link convert once and stop bootstrapping altogether.\n\nOn Dec 20, 2018, at 22:22, William Bernting notifications@github.com wrote:\nAre you saying I should do my workaround in that script instead?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. https://github.com/lerna/lerna/commit/ea9dbbee12f9df86789f8739efc49fc612d9378d should have fixed the recursive lerna bootstrap from the prepare lifecycle (as well as prepublish, preinstall, install, and postinstall in the root). It was released in v3.9.1, but you might as well use v3.10.1 (latest).\n\nAll of those lifecycles are run during any leaf package npm install (if anything is not hoisted), as well as the root. They are also run in topological order here. (I don't like that they're being run twice, but I can't figure out a better way to ensure they are always run in a consistent fashion). The git operations are independent of the npm operations, though. npm has literally no opinion whether or not your code is actually versioned, tagged, or pushed to the remote.\nIn any case, you have a couple options:\n1. --no-push with explicit git push:\nlerna publish --no-push && git push\nYou could configure this in lerna.json like this:\njson\n{\n  \"command\": {\n    \"publish\": {\n      \"push\": false\n    }\n  },\n  ...\n}\n2. Recover from completely failed npm publish with from-git keyword:\nlerna publish from-git\nThis will skip the git commit and tagging and just rerun the npm publish steps.. \"A version already exists\" seems like a drastically bad state that should fail?\n\"No token\" we could probably do with better preparation during lerna publish, but is rather hampered by the use of a third-party registry that likely doesn't implement anything useful in terms of validating endpoints (e.g., npm ping, npm whoami, or npm profile get).. I'd rather enforce (via lerna.json's command.bootstrap.hoist property) that --hoist is always serialized into the config file, whenever lerna bootstrap --hoist is run. I don't think lerna add needs --hoist. Very shortly lerna add will support --no-bootstrap, so at least there's one additional workaround directly on lerna add.. Is this a duplicate of #1815?. Yes, because lerna add just calls lerna bootstrap at the end of its machinations (by default). Bootstrap is where the hoisting happens.. Why can't you explicitly install those devDependencies in the root instead? Node's module resolution algorithm has you covered if you need to require them in some build script. If they're a CLI, you can either use lerna exec (it adds the local root node_modules/.bin to the PATH) or relative paths from the leaf package's location (\"test\": \"../../node_modules/.bin/mocha test/*\").. > I prefer to keep the root as clean as possible and only add things to the root package.json that are specific to the monorepo.\nI would migrate away from lerna bootstrap --hoist, then: run lerna link convert once and from then on a simple npm install is all that is necessary. lerna bootstrap is a pile of hacks that I haven't used personally in over a year. Better to let package managers manage packages, I always say.. Not at the moment, no. I'm about to switch to libnpmpublish, so sure, why not. I'm tired of arguing.. https://github.com/lerna/lerna/releases/tag/v3.8.0. Thanks for opening this, you are correct: there has been no progress. I haven't had the time to devote to investigation, personally. Contributions welcome!. I don't know why stale bot failed to read its own config. This isn't stale.. It's a bit twisted up in various yargs-related command APIs...\nBut in theory:\n```js\nconst run = require(\"@lerna/run\");\n// argv is an object with certain significant values (most automatically provided by yargs)\n// the values here are the defaults\nconst argv = {\n  cwd: process.cwd(),\n  // \"script\" is the only required argument (\"test\", \"build\", \"foo:bar:baz\", etc)\n  script: '',\n  // \"--\" is an extremely awkward way to pass arguments to npm run, probably don't need it\n  \"--\": [],\n  npmClient: \"npm\",\n  bail: true,\n  prefix: true,\n  parallel: false,\n  stream: false,\n  // pretty much anything else documented in npx lerna run --help, but camelCased\n};\n(async () => {\n  await run(argv);\n  // \ud83c\udf89 \n}());\n```\nIt calls execa internally, so I'm not sure how you're going to get around that.. Also, the logging is a bit hostile to library usage patterns like this. (npmlog will be spamming your stderr with a bunch of output when you run it as I described, and there is currently no config option that you can override to disable this). I wouldn't recommend using a develop branch, it just makes things overly complicated.\nAs to why this isn't happening for canary releases, it looks like it was just an oversight.. Yep, you're right. This is what happens when I don't get enough sleep. \ud83d\ude22 . https://github.com/lerna/lerna/releases/tag/v3.10.0 has the fix. \"Restrict from the outside world\" indicates you either have a (misconfigured) private registry you intend to publish to, or you shouldn't be publishing the packages (and thus shouldn't be using lerna).. This is why it is always safer to run lerna version and lerna publish from-git (or whatever) in sequence. They are increasingly separate concerns, and in a future breaking release will be completely separated.. To be clear, only the options that lerna version provides that are used in lerna publish will be respected. Since lerna publish from-package skips nested execution of lerna version (as there is nothing to be done in that capacity), none of lerna version's validation will occur.\nPut another way: In cases where no git changes are going to be made (like from-package, from-git, or --canary), most of the git-related validation will be skipped. We still validate that the working tree is clean in all cases, however.\nNow that I've rephrased it twice, I tend to agree that lerna publish from-package should respect the --allow-branch config.\n(from-git doesn't make sense, since it only operates on existing tagged releases, and --canary is always \"off the grid\", since it never publishes versions that will override any existing release). Indeed, that would be nice. It should be as simple as:\n```patch\ndiff --git a/core/command/index.js b/core/command/index.js\nindex 4e6dee6..8f404f7 100644\n--- a/core/command/index.js\n+++ b/core/command/index.js\n@@ -251,6 +251,10 @@ class Command {\n       log.info(\"versioning\", \"independent\");\n     }\n\nif (!this.composed && this.options.ci) {\nlog.info(\"ci\", \"enabled\");\n\n}\n+\n     let chain = Promise.resolve();\nchain = chain.then(() => this.project.getPackages());\n```\n\n\nHowever, a bunch of integration test snapshots fail (npm run integration) and I'm not sure how to normalize them.... I'm afraid lerna changed doesn't work like that? I can assure you it does pass <bump> to collect-updates, which is the real engine of decision-making shared by lerna version, lerna publish, and lerna changed.\nWhat lerna changed does not do is report what the bumped version would be.\nIt would be clearer if you could create a failing test to demonstrate your use case.. You're passing an explicit version, which lerna always ingests untouched, instead of the prerelease keyword. It sounds like you want lerna changed to have an option to compute the next version (or versions) for you and report that.. you need to pass an extra -- to get it past npm.\n```bash\nlerna run foo -- bar --baz\n> npm run foo bar --baz\nscript process.argv.slice(2) === []\nlerna run foo -- -- bar --baz\n> npm run foo -- --bar\nscript process.argv.slice(2) === [\"bar\", \"--baz\"]\n. if you think the issue isn't closed, reopen it instead of creating a new issue. thanks. This command will automatically hoist things and use relative `file:` specifiers:\nlerna link convert\n```\nThis is terribly documented, I agree. There are many (unfortunate) reasons that various dev dependencies can't be hoisted, one need only search these issues to find plenty. If you want an example of the golden path, you can inspect the source of lerna itself; I practice what I preach.. I'm not sure why you'd need to install all the devDependencies in every package of the project. Why not just in the root? Does typescript not play well with the node resolution algorithm?. improvements to lerna add are welcome, btw. It's intended to be basically npm install as you described, and it is clearly lacking a few features (like, how do you distinguish between packages to install and packages to install them in?).. Okay, but as I noted in the parenthesis, how do you propose to solve the UI of such a command? npm install works the way it does, in part, because it only ever has to work on one package.json file. It's significantly more complicated with a lerna command.. In a monorepo, I always recommend operating from the root, never the leaf packages. The root is where your devDependencies and test scripts should be, after all. Lerna isn't designed to scope a command run from a subdirectory.\n\nOn Jan 3, 2019, at 07:49, Adam Doyle notifications@github.com wrote:\nThat's a fair point. npm doesn't have to deal with the requirement for managing multiple package.json files, and that does seem to complicate things.\nOut of curiosity, what is the use case for managing via lerna CLI the dependencies for a different package than the one that lives in your current directory? Is it something like: you're working on a package that consumes an in-house library and you realize that the library needs an additional dependency? In that case, wouldn't you have to cd to that project directory anyways to make the necessary changes to the source files?\nThe default behavior could be operate-on-the-project-within-current-filesystem-scope and the [arguably] less-common tasks such as \"go off and change dependency for one of my other packages in this monorepo\" could be relegated to a [more-verbose] flag like --scope.\nSample\nSample Project Hierachy\n\u250c project/\n\u251c\u2500\u2500\u2500\u252c packages/\n\u2502   \u251c\u2500\u2500\u252c library/\n\u2502   \u2502  \u2514\u2500\u2500\u2500 libmain.js\n\u2502   \u2502  \u2514\u2500\u2500\u2500 package.json\n\u2502   \u251c\u2500\u2500\u252c application1/\n\u2502   \u2502  \u2514\u2500\u2500\u2500 app1main.js\n\u2502   \u2502  \u2514\u2500\u2500\u2500 package.json\n\u2502   \u2514\u2500\u2500\u252c application2/\n\u2502      \u2514\u2500\u2500\u2500 app2main.js\n\u2502      \u2514\u2500\u2500\u2500 package.json\n\u2514\u2500\u2500\u2500 package.json\n\nExample Session\nAdding/removing external dependencies\ncd packages/library\nlerna install --save rxjs \u2190modify project/library/package.json to add rxjs as dependency\nlerna install --save-dev gulp \u2190modify project/library/package.json to add gulp as dev dependency\ncd ../application2\nlerna remove typescript \u2190modify project/application2/package.json to remove a dev dependency\nAdding/removing internal dependencies\ncd packages/application1\nlerna install --save ../library \u2190relative path\u00b9 disambiguates internal dependency from potentially same-named external libraries\nlerna remove library \u2190remove existing internal dependency\nHoisting\nHaven't really used hoisting much yet, so it's entirely possible I'm overlooking something related to that.\nNotes\n\u00b9 Other possible solutions for disambiguation include: (1) auto-select by prioritizing internal over external, or (2) automatically add all subdirectories of the packages/ directory upon any run of lerna CLI [or at least during lerna bootstrap], potentially supporting a blacklist and/or whitelist that is potentially modifiable via lerna CLI.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. lerna changed is only intended to interrogate the git repo for changes in a similar fashion to lerna version (which happens to be called by lerna publish when you don't pass from-git, from-package, or --canary). It's not a general-purpose tool for querying package state.. Tagging to avoid bot activity. I'm warming to this idea, tbh. Not strictly under lerna changed, but maybe a more generalized query API?. Excellent feedback, thanks!\n\n(I really want to rename lerna changed -> lerna status now, heh)\nIn keeping with the git command aesthetics, specifically git branch in this instance, I would prefer this was controlled by a flag like --remote instead of a positional keyword. But maybe that's too ambiguous. Open to bikeshedding.\nChiefly, I don't want to always run the network calls because most of the time, we shouldn't really (need to) be doing that. I think we already agree on this score. :)\nWe would need to extract get-unpublished-packages into its own module, but that's pretty straightforward.\nSo yes, you've convinced me, I'm ready to help answer questions / review a PR when you are.. Believe it or not, I definitely get questions fairly frequently (around once a week) about this sort of thing (or something like it) at my day job. It's usually in the context of \"I want to develop my React component and its app integration at the same time.\"\nThere's nothing wrong with keeping libraries/components alongside applications in the same lerna-managed monorepo, of course. The question of drawing module boundaries is a frequent one both inside and outside of a particular monorepo. Sometimes it's based on ownership, sometimes on problem domain, or in some cases, sheer size of the existing set of modules.\nHowever, I find in most cases that this desire (to link two lerna monorepos directly) is caused combination of two factors: poor unit test patterns & \"version shyness\" (for lack of a better term). I'll explain:\nPoor Unit Test Patterns\nI don't mean to discount the importance of integration/acceptance/end-to-end testing in the least, but I find most solutions to the problem described in this RFC to include better unit test methodology. That is, it should be possible to develop components in one monorepo independently of another monorepo.\nThe relationship between those two monorepos you describe, if there is one at all, is the package, not the symlink (just like any other npm package). Any changes to one package should be able to unit test their public API to a sufficient granularity to be assured that consumers will be able to use it as expected. Lerna is just glue to make those sorts of changes and improvements easier to a collection of interrelated packages. Lerna is not intended to be a general-purpose replacement for publishing npm packages to a registry.\nVersion Shyness\nI find very often that folks are extremely reticent to publish new versions of a package, and this reticence can be greatly exacerbated when it's a lerna-managed monorepo with dozens (or hundreds?! \ud83d\ude28) of sibling packages. Maybe it's just an old salt's perspective, but versions are just tarballs, and it's not against the rules to publish several versions (i.e., \"fix forward\") a day, if necessary. This philosophy works just as well for single modules as it does entire collections of lerna-managed siblings.\nNow, I would like to reiterate that solid testing practices (not \"100% test coverage\") are absolutely necessary to mitigate risk when it comes to \"version diarrhea\" (not my term, but it's colorful, neh?). That being said, I tend to believe that it is better to release new versions than to hang back inside endlessly complicated \"release\" branches and whatnot while waiting for your code to be validated by a consuming application's test process.\nIf you're using lockfiles (and you should), there's no way a newer version of a package gets automatically consumed by any existing users, it's always a manual step. You can even take it a step further and never explicitly publish a new latest dist-tag (e.g., lerna publish --npm-tag next), and only later (after validation in a test environment, etc) move the dist-tag pointer over to the new version (npm dist-tag add ${pkg}@${version} latest). Only then will consumers be informed (by npm outdated or greenkeeper-like services) that they might need to upgrade.\nTL;DR:\nI'm not currently convinced that this sort of feature is necessary in Lerna.. Thanks for the clarification! I was definitely speaking to a different category of users before.\nI think the \"simplest\" solution in your case is to merge the monorepos. I understand the desire to keep them separate, but it sounds a lot like your development patterns would be better served by a unified approach. (I put scare-quotes around \"simplest\" because I know from past experience that merging monorepos is anything but simple)\nI still believe your request to be outside of the scope of Lerna, mostly because it starts to tread on the territory of package managers like npm and yarn. yarn link is even easier to use than its npm cousin (in the context of a monorepo) because it doesn't run an install and break all your lerna-created symlinks.\nI can see an argument for making a lerna subcommand that papers over the weirdness of various package managers, but the larger concept of \"link two lerna monorepos\" is a bridge too far. I would definitely highlight an external tool for this purpose somewhere in Lerna's documentation.. Ooh, that's a neat project. Can't help wondering what \"yalc\" stands for.... Ah, yes, that would defeat my \"simple\" solution.. You're using Yarn workspaces, why bother with lerna bootstrap at all? It's just calling yarn install.. We should definitely improve the error message in this case, I agree.. Can you demonstrate what lerna command doesn't work with cnpm?. That's because it's documented under lerna version, here. Is that not clear enough?. > at least link to version page maybe? \nThat's literally what's happening:\n\nThe docs for --conventional-commits could certainly be beefed up, but they don't need to be moved. PRs welcome.. Also, for the specific question of \"how to add a local dependency?\", you have two options:\n\n\nlerna add\nnpx lerna add @my-org/core ./apps/admin\n    This command automatically runs lerna bootstrap, leaving the node_modules tree in the correct state.\n\n\nManual edit + lerna bootstrap\nIn apps/admin/package.json:\npatch\n   \"dependencies\": {\n+    \"@my-org/core\": \"file:../../packages/core\",\n     \"external-dependency\": \"^1.0.0\"\n   },\nThen npm install in the root (or npx lerna bootstrap, same diff). I am certainly sympathetic to using directory globs as filter arguments; I even added it to lerna add as trailing variadic positional arguments because I wanted to use it so badly. I'd rather it was a positional argument instead of a flag, but that decision largely depends on the current semantics of a given command.\n\n\nThe devil, as always, is in the details. I don't think this ability should be extended to all subcommands. What commands specifically do you want this directory glob filtering available to?. Why not just run webpack directly on those paths? It seems rather convoluted to do it with lerna.. I'm not a webpack expert, but it should be possible to use @lerna/project's getPackages() export in your root webpack.config.js to identify all the entry points and configure their respective outputs. Or use Pectin (my preference vs webpack for building packages), which incidentally demonstrates how to locate Lerna-managed packages and sort them topologically.. What specific execution are you attempting to run in a postinstall phase?\nNot having all the details, it seems like the workaround is to pass an explicit --npm-path npm argument to npm-run-all?. > since Lerna is overriding npm_execpath variable\nThat's not Lerna, that's npm-lifecycle, the official extraction of programmatic npm run. There's not much I can do from the Lerna side, as that env var is set no matter what I pass in (or set).\nIn this particular case, lerna run should never be called, because it isn't a general replacement for npm run, as npm-run-all seems to think. An explicit --npm-path is the easiest, clearest fix.\nAnother way of \"fixing\" this is to kick lerna bootstrap to the curb, run npx lerna link convert once, move the current postinstall to prepare, and live the glorious life of one root npm install (just like the lerna source).. Huh, ok, didn't know Verdaccio was so picky about the payload contents. It's basically because we're not using read-package-json, and thus normalize-package-data is skipped. Simple enough to fix.. Sure, I suppose I can't force everyone to use reasonable script names. The \"publish\" and \"version\" lifecycles are also called by npm publish and npm version, which are too close to npm run publish and npm run version for comfort. I personally recommend naming the script \"release\", npm run release is unambiguous and easily pre- and post-hooked.. Do you have an auth token in your npm config for that registry? In a .npmrc file, it would look something like\n//registry.npm.foo.com:_authToken=\"<base64String>\". Yeah, I figured it was a legacy auth-related problem. I really wish third-party registries would get on board the _authToken train.. Does this still reproduce with the latest lerna v3.8.4?. I personally dislike comma-delimited option values, but then again, I speak native glob. I'd be open to falling back to str.indexOf(',') > -1 && str.split(',') if the initial glob fails.\nI'd rather make globbing more intuitive, though, as positional args of some sort.. @mattfysh clone lerna and run this command and you'll find that it definitely ...does?\n```sh\n$ npx lerna ls --scope '{lerna,/cli}'\nlerna notice cli v3.10.6\nlerna info filter [ '{lerna,/cli}' ]\n@lerna/cli\nlerna\nlerna success found 2 packages\nthe following command yields identical output:\nnpx lerna ls --scope '{lerna,@lerna/cli}'\n```\nA silly logged reproduction (pass --loglevel silly) of your command that generated the EFILTER would be appreciated.. No worries, there's actually an existing issue to add directory name support. It's a bit tricky, however, considering directory names don't have to be unique like package names...\n\nOn Jan 23, 2019, at 23:36, Matt notifications@github.com wrote:\n@evocateur my bad, I was using the directory name, and not the package.json name. Sorry!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Manual npm ci in a leaf node is pretty much incompatible with lerna bootstrap.\n\nThis isn't the first request for selective bootstrapping, and my negative reaction in almost every instance is based on the fact that I don't want to turn lerna into a mind-reading program that attempts to understand which packages are not needed to run a given module.\nYou're better served by optimizing your build steps (I'm assuming you have a build step, since whatever the pkg.main is targeting doesn't exist) than making fancy bootstraps.. If you use relative file: specifiers to express the sibling dependencies(*), it locks the entire tree from the root. Still doesn't solve the underlying issue, but you'd be much more reproducible at least.\n(*): Run npx lerna link convert once, and future bootstrapping is just npm install (or npm ci) in the root.. The entire theme of this issue is one that has been brought up many times, and I have always responded in the negative. The desire for \"partial\" bootstrapping represents a code smell that you need to separate concerns better. Just to reiterate.\nBe that as it may, one reason (among many) that I recommend moving away from lerna bootstrap is that it mangles the leaf package.json such that any lockfile created in the leaf package root will always be inaccurate, as it will always omit the local sibling dependencies. There's no getting around this with lerna bootstrap.. The natural separation of concerns appears to be the applications. If they are truly owned by different teams altogether (or might as well be), they don't really need to be in the same monorepo.\n\ni'm not sure what do you mean by moving away from lerna bootstrap\n\nAs I mentioned above:\n\nRun npx lerna link convert once, and future bootstrapping is just npm install (or npm ci) in the root.. Yeah, this was fixed in https://github.com/lerna/lerna/commit/71174e4 (released in v3.10.3), forgot to link this issue. Go hog wild.. Not an anti-pattern at all (in v3), it's just a little dodgy since I haven't documented them well.\n\nnpm i -D @lerna/batch-packages @lerna/filter-packages @lerna/project\n```js\nconst batchPackages = require(\"@lerna/batch-packages\");\nconst filterPackages = require(\"@lerna/filter-packages\");\nconst { getPackages } = require(\"@lerna/project\");\nconst argv = require('minimist')(process.argv.slice(2));\nconst packages = getPackages(__dirname);\n// last boolean argument automatically filters out private packages\nconst filtered = filterPackages(packages, argv.scope, argv.ignore, false);\n// you probably don't want a two-dimensional array, so flatten it\nconst sorted = batchPackages(filtered).reduce((arr, batch) => arr.concat(batch), []);\n// et cetera\n```\n\ndocs for filter-packages\nsource of batch-packages\ngetPackages (actually a static method of the Project class, a lot of misdirection here, sorry). Here's an example in the wild, coincidentally of a Lerna + Rollup-related tool I wrote called pectin:\n\n```js\nconst os = require('os');\nconst pMap = require('p-map');\nconst batchPackages = require('@lerna/batch-packages');\nconst { getPackages } = require('@lerna/project');\nexports.findConfigs = findConfigs;\nasync function findConfigs({\n    cwd: startDir,\n    concurrency = os.cpus().length,\n    watch = !!process.env.ROLLUP_WATCH,\n} = {}) {\n    const lernaPackages = await getPackages(startDir);\n    const configs = await pMap(\n        // clones internal JSON, maps synthetic location to cwd property\n        flatBatched(lernaPackages).map(pkg => [pkg.toJSON(), pkg.location]),\n        ([pkg, cwd]) => generateConfig(pkg, { cwd, watch }),\n        { concurrency }\n    );\n// flatten then compact\nreturn configs.reduce((acc, val) => acc.concat(val), []).filter(x => Boolean(x));\n\n}\nfunction flatBatched(pkgList) {\n    // ensures packages are built in topological order, dependencies before dependents\n    const batches = batchPackages(pkgList);\nreturn batches.reduce((acc, batch) => acc.concat(batch), []);\n\n}\nasync function generateConfig(pkg, opts) {\n    // et cetera\n}\n``. Hrm, yeah, the302redirect is ...probably? not being handled correctly bynpm-registry-fetch`. Or we're not setting the correct config... or your registry proxy should be sending a different response code?\nI'll have to dig in, it's not immediately clear where this problem can be fixed.. This issue and its fix seem to indicate that redirects are handled automatically, but I haven't determined if they are handled for PUT requests.... I need a clear reproduction to make any progress diagnosing a fix.. @deiga Literally \"I'm seeing the same issue with my packages as well\", I can't read your mind, nor can I see your code. A reproduction would allow this.. I'm not asking to see your super-sekrit codes, I'm asking you to create a simple example in a public repository that reproduces the issue. Is that too hard to ask?. This is an upstream bug: https://github.com/mrmlnc/fast-glob/issues/144\nAs a reminder, one should always be using lockfiles to ensure issues like this don't happen randomly.. Lerna does not control fast-glob, thus there is nothing for Lerna to do in this situation.\nYou shouldn't install lerna globally, there's no need. It should only be in local devDependencies, just like any other dev tool (eslint, jest, etc).\nYes, I realize the website tells you to do just that. It should be updated to remove that recommendation. PRs welcome.. Lerna didn't \"break\", this was a bad publish from an upstream dependency. As the issue is now resolved, there is literally nothing for Lerna to do. Don't install lerna globally.. Yeah, the version bump suggestions and changelog generation are currently conflated behind the --conventional-commits option.\nI'd rather provide a boolean negated flag (--no-changelog) than overload the preset option (the preset also controls how the version bumps are suggested). PRs welcome.. Yeah, sorry about that, everyone. I thought I was being clever. Reverting it now.\n\nNarrator: He was not.. https://github.com/lerna/lerna/releases/tag/v3.9.1. @kirill-konshin If you move the postinstall to prepare does the issue persist?\n\n@joetidee That's not a postinstall error, that's a misconfigured sibling dependency. Does it succeed if you pass --force-local to your lerna bootstrap call?. If you didn't change the version of lerna, then why exactly weren't you also using a lockfile? Seems pretty odd to expect an install to stay stable over time without a lockfile.\nAnd yes, it appears my trick of checking the npm_lifecycle_event env var for a specific match isn't sufficient when the script is a nested execution. Sorry about the hassle.. v3.10.2 should resolve this.. > More important one is why breaking changes sneaked in minor version update.\nHumans make mistakes?. Forgive my ignorance of Dart, but do these packages live on the npm registry? If they don't use a package.json, I will make the assumption that they don't. A brief scan of docs says pub.dartlang.org is where Dart packages live. If your project isn't managing npm packages in some capacity, I'm not sure the Lerna \"brand\" is appropriate.\nI would prefer if you didn't use the Lerna name, but of course I can't stop you. It would be amusing to name it something related to Lerna's inspiration, the Hydra of Lerna (typhon?), or perhaps a town near Lerna (I think argos has a nice ring to it).\nI don't have the bandwidth to manage more projects under the lerna GitHub org, sorry. I also don't think Lerna has a monopoly on the concept of a monorepo, so it shouldn't be necessary to co-locate. I hope you can understand my reasons.\nGood luck!. I appreciate the discussion, of course! I agree that the patterns are likely very similar, and to be clear, I am perfectly fine with your intention to re-implement them in Dart.\nI'm not very confident, however, that much of the existing Lerna package infrastructure could be reused as-is, given the very tightly-coupled concepts of package.json and \"packages\" throughout the CLI. Perhaps that means some sort of dependency injection might be in order, but that's a bit outside of my maintainer bandwidth at the moment.. Is the error message unclear? I don't believe it is lerna's job to run all git commands for you.. @foo4u Fair enough.. PRs welcome, if the tags didn't make that clear.. https://github.com/npm/npm/issues/18380 (and many others) seems to indicate this is an upstream issue with npm. There isn't anything Lerna can do about it, sorry.. I believe yargs will throw an error when it fails to recognize --require-scripts, but it won't be a particularly helpful message by default.. The primarily interesting commit is 634b55e, which does not include the changes from the \"upstream\" PR.. @ThisIsMissEm I think I figured out a pattern that makes the inverted booleans more ergonomic (documented as --no-<thing> in the -h output, even).\nFor example, --no-progress is the only option that makes sense, as --progress is implied (where progress is even used, getting kinda itchy in the \"global\" options). This change makes --no-progress output in the --help, while keeping the shape of the resulting argv object (mostly) consistent:\npatch\n+    \"no-progress\": {\n+      describe: \"Disable progress bars. (Always off in CI)\",\n       type: \"boolean\",\n     },\n     progress: {\n-      defaultDescription: \"true\",\n-      describe: \"Enable progress bars. (Always off in CI)\\nPass --no-progress to disable.\",\n+      // proxy for --no-progress\n+      hidden: true,\n+      type: \"boolean\",\n+    },\nIt does technically add new noProgress keys, and can understand --no-no-progress flags, but I think we can ignore those, in practice. Dunno if I should port this upstream to yargs in a cleaner way, but figure this kinda-hacky solution is at least very... declarative? If a bit mysterious...\nThere's a bunch of other flag deprecations I want to remove in the semver major, so I'll be doing that soon enough.... this works globally across all commands:\n```diff\ndiff --git a/core/lerna/index.js b/core/lerna/index.js\nindex a46caba..dbfd308 100644\n--- a/core/lerna/index.js\n+++ b/core/lerna/index.js\n@@ -26,7 +26,7 @@ function main(argv) {\n     lernaVersion: pkg.version,\n   };\n\nreturn cli()\nconst parser = cli()\n     .command(addCmd)\n     .command(bootstrapCmd)\n     .command(changedCmd)\n@@ -40,6 +40,23 @@ function main(argv) {\n     .command(listCmd)\n     .command(publishCmd)\n     .command(runCmd)\n.command(versionCmd)\n.parse(argv, context);\n.command(versionCmd);\n+\ninvertBooleanOptions(parser);\n+\nreturn parser.parse(argv, context);\n+}\n+\n+function invertBooleanOptions(parser) {\nconst opts = parser.getOptions();\n+\nfor (const key of Object.keys(opts.key)) {\nif (key.startsWith(\"no-\")) {\n// --no-foo => inverted --foo\nparser.option(key.substring(3), {\nhidden: true,\ntype: \"boolean\",\n});\n}\n}\n }\n```\n\n\u2728 . The showCommit assertion pattern in https://github.com/lerna/lerna/blob/master/commands/version/tests/version-conventional-commits.test.js isn't sufficient? You might need to modify the mock in commands/__mocks__/@lerna/conventional-commits.js to make it more nuanced.. yep, just waiting for the remainder of the tests, then we're good to go. @milesj No worries, I completely understand.. I force-rebased your changes on top of recent work in master, so be sure to git pull before continuing.. Hot damn, it worked great!. @tunnckoCore Yes, currently it is required to write out the changelog files due to the way the code is currently factored: https://github.com/lerna/lerna/blob/45a05acf2d52a46f553fc1efadf9a32312aca82b/core/conventional-commits/lib/update-changelog.js#L48-L68\nThe docs aren't wrong, per se, but they are certainly omitting a case. I can add an error when --no-changelog is also passed to make it extra clear.. 030de9d6 should do the trick.. Not that I'm aware of, no.\n\nOn Mar 5, 2019, at 16:22, Lucas Azzola notifications@github.com wrote:\nIs there a issue to track supporting --no-changelog with --github-release?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. If you want to use npm ci with a lockfile of the entire tree, you need to call npx lerna link convert once and stop using lerna bootstrap.\n\nA much smaller workaround is to add --no-ci to the lerna bootstrap --hoist call. (I could have sworn we already disabled the use of npm ci internally when bootstrap was called with --hoist...). This seems like the wrong place to run npm update, tbh. When the preinstall lifecycle is run, it is perfectly acceptable to have process.env.npm_config_prefix defined, otherwise it might inherit the wrong value from an enclosing script shell (such as the root).. Also, note that v3.10.2 removed the extra root install lifecycle execution, as it caused more trouble than it was worth. Not sure what you'd expect from an npm update other than ...updates?. ...unless I'm completely wrong. Wouldn't be the first time this week, or even today. --. cuz like, yeah, just running npm run env | grep npm_config_prefix in the root of lerna's repo _definitely doesn't set it to the CWD. so i must have misread something somewhere when i was extracting that bit.\nthanks for your patience, @ibezkrovnyi. So, digging into it, npm_config_prefix is always set, it's just that it defaults to the global prefix (npm c get prefix), not the localPrefix (as it is referred to internally). Would that be sufficient?. No worries, thanks. Digging through the npm source, I'm fairly confident this value always defaults to the global prefix. Gonna push a patch that omits setting our custom value, and it should probably be fine for your use case.. v3.10.5. You're using Yarn Workspaces, this isn't a Lerna bug. All lerna bootstrap --npm-client yarn --use-workspaces does is call yarn install in the root.. You can't, sorry. I would think that sort of change constitutes a patch-level change, yes? Why the reticence to publish a new version?\n(Or just wait until other changes accrue in that package, it's not like documentation will break a consumer). It's pretty much the same with \"normal\" npm publish. New patch versions aren't especially a big deal, if you believe the typo fixes to be important.. Yeah, your server needs to stop stripping .git directories.\nJust because you're avoiding certain git operations doesn't mean all git calls are skipped. lerna version uses git to determine what changed since the last tagged release, and there's really no getting around that.. lerna version also needs to know what packages to apply the version to, not just the new version number itself. It doesn't appear that you're actually intending to propagate this version back to the repository, and you want it globally applied, so I'm not sure lerna version is appropriate in any case. Your workaround seems to be doing fine.. this.currentBranch is used several places, and moreover git is still required to detect changes, even in the default fixed mode. We don't just version everything every release, and independent versioning only changes what versions are assigned and what pattern of git tags to use, not the change detection itself.\n--push, --allow-branch, and --git-tag-version have no effect on collectUpdates (called here). It'll always return all packages, an implicit --force-publish, which is not how Lerna works.. Seems like you should be able to use Project References to run tsc for all of the given leaf nodes (--watch or not), not one-per-leaf. I don't use TS, though, so I'm probably wrong?\n\nCan lerna do it?\n\nThere's no generalizable pattern in the context of lerna's core mission, so I'm going to say \"no, this is out of scope.\" Adding options is all well and good, but the heuristic to determine \"i'm borked, plz halp\" is a nightmare of inconsistency and we really don't have the bandwidth to manage those.. Yeah, this has been a long-term disjunction for the project. I hardly ever look at the website repo, and ideally it would be some sort of Gatsby-based static website generated from a Travis hook of this repo.. The test coverage is indeed a little sparse around edge cases like this. Make that \"completely absent,\" if I'm being honest. \ud83d\ude05 I don't think anyone anticipated your structure, so a PR is perfectly welcome. :). Without the entire lerna-debug.log in addition to the exact scripts you called, I can't begin to diagnose. A wild guess, probably forgot to set process.exitCode somewhere in a .catch() handler.. Ah yes, much clearer, thanks!\nDefinitely missing some code in the catch handlers (or catch entirely) around the publish loop. It occurs to me that it should probably be handling the error directly in the utility that calls libnpmpublish:\npatch\n-      return publish(manifest, tarData, opts);\n+      return publish(manifest, tarData, opts).catch(err => {\n+        // ensure process exits non-zero\n+        process.exitCode = err.errno || 1;\n+\n+        // re-throw to break chain upstream\n+        throw err;\n+      });\n(dry-coded, definitely needs tests). https://github.com/lerna/lerna/commit/9e9ce0859f03636ed5f36a5e619a60de5b4c938b fixed this, forgot to tag the bug. published in v3.10.7. I would suggest not using globstars (**) in your packages config, then. It may feel like a lot of work, but in my experience it is better to be explicit about these sorts of things.\nI explain why we can't add support for negation in a similar issue. Yarn Workspaces don't even allow globstars, so negations are extremely unlikely.. You're passing --ignore-scripts to lerna bootstrap, thus it is passed on to the underlying npm command. Which scripts are you trying to ignore?\nNotably, v3.10.4 no longer uses npm ci when configured with --hoist. (#1865). We still have opportunity for more nuance here, since --ignore-scripts also controls whether or not lerna runs an additional \"synthetic\" script lifecycle in topological order. It's a bit awkward because I don't think the npm installs during lerna bootstrap are necessarily run in topological order.... Given the programmatic API available (via @lerna/* packages), I would consider this a great opportunity for a third-party tool. I'm not convinced it has broad enough utility to justify the maintenance burden.. If I had to guess, it was perhaps due to missing git history in the CI build (\"shallow\" clone)? --canary uses git describe under the covers to get the \"number of revisions since last release tag\", which it then uses for that incrementing prerelease number. The SHA isn't useful as a semver prerelease since it can't be used as a number when comparing against another version, and thus is stuck behind the + just to make the exact revision more easily traceable by humans.. Isn't 130 the exit code for SIGINT? Without reading the npm source, I can't tell you why that is the exit code. lerna bootstrap is just calling npm install, after all. You could modify your call to bootstrap to workaround this:\nnpx lerna bootstrap --hoist -- --no-optional. Oh, yeah, you're right. You might be able to --nohoist the offending optional deps, but then that doesn't have any awareness of cross-platform status. Ultimately we'd need to be smarter about what kind of dependency collection we are sticking the hoisted deps into.\nAt the end of the day, you can avoid all of this pain and suffering by allowing npm to deal with it all by using relative file: references (like Lerna itself does; run npx lerna link convert once and then npm install in the root). The drawback there is that lerna link convert doesn't currently have affordances for the \"type\" of dependency, and you'll kinda be in the same boat (without some manual fixes).. 1. gitHead provides metadata for packages in the registry, and is based on the existing behavior of npm publish.\n2. It is not meant to be versioned. lerna publish should always be resetting those changes, unless --no-git-reset is passed.\n3. gitHead is a temporary property only meant to exist during lerna publish when it is constructing the package tarballs. I don't know why it is appearing in your use case.\n4. git clean -fdx packages is meant to ensure that the build outputs of the various packages are cleaned before running pectin, not to clean temporary build metadata off the package.json files.. @MMT-LD You appear to have a publish script defined in a package.json somewhere? It probably shouldn't be named publish, as that is quite significant in npm-land. The EUNCOMMIT error indicates you tried to run lerna publish when there were unversioned changes in the working tree.. @revelt I'm not sure why your monorepo's lerna.json file has a lifecycle key, that looks like it should be a version script (that doesn't git add . indiscriminately).. yeah, I would recommend naming the script you place lerna publish in \"release\" so you don't run the risk of confusing npm run publish with npm publish, as well as the lifecycle overloading...\nAlso, \"prepublish\" is a deprecated lifecycle, you should be using \"prepare\" or \"prepublishOnly\".. This is outside the scope of lerna, sorry.. What you're describing is basically peerDependencies. Lerna isn't a package manager, so I'm not very keen on adding extra complexity for a situation that peerDependencies are perfectly suited to control.. If you specify all your leaf package dependencies on react as a peer with a reasonably broad range, you can control the exact version in the root. Peers are preferred for packages like React that are singletons.\nI don't see the point of a Lerna-specific wildcard because I don't want to manage packages (Lerna isn't a package manager) and the burden of changes of this nature are among the trade-offs one accepts when choosing the monorepo pattern.\nI'm certainly open to new sub commands to help streamline this sort of thing. lerna upgrade and lerna remove are two such commands that have long sought implementations.. From the root node_modules? Please post your lerna.json and the exact command you ran.. Gonna close this in favor of #1886, then.. You've identified one of the current wrinkles with Lerna, and the even more confusing answer is that ...they're both right? For legacy reasons, lerna version also reads the command.publish namespace, because often times users only call lerna publish, which automatically calls a nested lerna version when appropriate.\nHowever! I agree with your change here, it is much clearer. It has the benefit of being forward-compatible with the next major version of Lerna, which will be completely splitting lerna publish from lerna version, much like npm publish and npm version are separate commands today.\nPlease let me know if I can help answer any other questions you have about Lerna, especially if the docs need clarification. The docs themselves are probably the biggest \"opportunity for improvement\" in Lerna today, and I need all the help I can get. \ud83d\ude05 \nThank you!. As I explained elsewhere, we only use conventional commits to suggest the bump and generate changelogs. Use a different commit type or write your own changelog preset, this isn't changing.. If you don't want to maintain the packages, why haven't you deleted them from the repository? Use semver correctly and the legacy packages (which will live on in the registry no problem) will just continue on, oblivious.. To be clear, since you're using Yarn Workspaces, this isn't a Lerna problem. Take it up with the Yarn folks.. Yup, that's definitely a problem!\nQuick sketch of the fix, would appreciate a PR with a simple test added here:\n```patch\ndiff --git a/commands/publish/lib/get-unpublished-packages.js b/commands/publish/lib/get-unpublished-packages.js\nindex 4e5cbf2..fe83bd9 100644\n--- a/commands/publish/lib/get-unpublished-packages.js\n+++ b/commands/publish/lib/get-unpublished-packages.js\n@@ -11,6 +11,9 @@ function getUnpublishedPackages(packageGraph, opts) {\nlet chain = Promise.resolve();\n\n// don't bother attempting to get the packument for private packages\n\nconst graphNodesToCheck = Array.from(packageGraph.values()).filter(({ pkg }) => !pkg.private);\n+\n   const mapper = pkg =>\n     getPackument(pkg.name, opts).then(\n       packument => {\n@@ -24,7 +27,7 @@ function getUnpublishedPackages(packageGraph, opts) {\n       }\n     );\n\n\nchain = chain.then(() => pMap(packageGraph.values(), mapper, { concurrency: 4 }));\n\nchain = chain.then(() => pMap(graphNodesToCheck, mapper, { concurrency: 4 }));\n\nreturn chain.then(results => results.filter(Boolean));\n }\n``. You can pass your own [--changelog-preset](https://github.com/lerna/lerna/tree/master/commands/version#--changelog-preset) to avoid this. I don't want Lerna to get any _more_ tightly coupled toconventional-changelogthan it already is.. Actually, what yarn is doing is installing almost everything in the rootnode_modules`, which is resolved correctly when scripts run from the various leaf nodes.\nGenerally speaking, a package specified in peerDependencies should also be specified in devDependencies. That's how the pattern works for \"traditional\" npm packages, and in a monorepo it's best to just install those peers in the root and let the node module resolution algorithm do the work.\nThe best practice for monorepos, in my opinion, is to run all dev scripts from the root, not the leaf nodes. It helps reduce repetition, is often times faster, and avoids weird bugs like this.. Just install the license plugin in the root. Any leaf package that has a peer dependency on that license plugin will automagically get it due to how Node resolves imports. Lerna doesn't have to do anything.. My mistake, here's the solution: Install both the license plugin and Rollup in the root.\nIf you think that's too \"dirty\", then Build Scenario also needs a direct (dev) dependency on Rollup. This is no different than installing a package like eslint-config-airbnb which explicitly mentions installing it's peer dependencies.\nI closed this issue because it is not Lerna's job to replace package managers. I gave you the solution for npm, explained why Yarn appeared to work, and I don't know what else to say.. Parts of https://github.com/lerna/lerna/tree/master/commands/publish#--canary are out of date, but the shell block under that option is accurate. The custom --preid ${BRANCH} (or the like) is an acceptable requirement for concurrent development.. I need to know the exact command you attempted to execute (or the full error log), otherwise I'm stabbing in the dark.. I can agree that the duplicate tag error needs more graceful handling, but I don't agree that lerna should allow duplicate version tags to be created/consumed (even implicitly). It's fundamentally conflicting with lerna publish's basic operative contract: \"find all the packages changed since the last tagged release and publish them to a registry\".\nReal Soon Now\u2122 I'm going to completely sever lerna publish and lerna version (in a breaking change) so we can get some clarity about the responsibility of each command. One current factor muddying this discussion is that lerna publish, without any other arguments, will call lerna version internally (which is the actual command that attempts the git operations).\nlerna publish in and of itself (that is, without the implicit lerna version) should certainly be able to publish as many times as you want, according to the responses of your configured registry. Currently, however, this is not the case.\nThe reason I asked for the complete log is that there is a lot more debug information that could potentially be useful.. lerna publish and lerna version are already decoupled if you always use the from-git or from-package positional argument to lerna publish.\n$ lerna version\n$ lerna publish from-git\nnpm publish has never cared whether or not a given set of code that it publishes was versioned and tagged in git. Even if lerna publish without arguments (implicitly calling lerna version) fails during the \"upload tarballs to the registry\" part, there are more than enough tools in Lerna today to mitigate this occasional failure.\nThere's no need for \"atomic\" tag rollbacks or whatever, because the validity of a given commit + tag is not affected by the status of the tarballs present in the configured registry. It sucks when they get out of sync, sure, but that's not a problem Lerna (or any tool) can solve. The problem is \"humans,\" in this instance.\nTL;DR: Lerna won't support duplicate version tags, nor will it support publishing duplicate versions of a package to any registry, regardless of its (mis-)capabilities.. @WoodyWoodsta I appreciate your sensitive analysis (and digging through the issues to find those you linked)!\n1767 sketches out a lot of my goals for lerna publish in the next major version. One of them is to teach lerna publish how to automatically infer from-git, from-package, and \"nightly\"/--canary publish (which depends on lerna version being completely severed).. Oh geez, sorry about that. I coulda sworn all the presets used the same patterns for their default export...\nWe probably need to do something like this, from core.\n. Published in v3.10.8. Since v3.8.3 lerna publish no longer attempts to validate registry auth for any registry that isn't literally \"https://registry.npmjs.org/\" (https://github.com/lerna/lerna/commit/b44f2f9). I would try updating to the latest. The error itself is rather odd, since I run a very similar command whenever I publish Lerna itself.... Really wish JFrog/Artifactory/Nexus would get on board the bearer token auth train, legacy auth is extremely annoying.... At least the weird 'composed' of undefined bug is gone in recent versions?. \"access\": \"public\" is only necessary for scoped packages (@my-scope/pkg-name) that are published to the public registry, which treats scoped packages as private by default. If your registry does not support this awareness, the publishConfig.access field is completely ignorable.\nAs for npm publish still working, what version exactly of npm are we talking about? If it's <=6.5.0, it's still using the legacy registry client. v6.6.0 replaced all of that with libnpm-based extractions, which v6.7.0 includes a fix for a bug involving legacy auth.\nLerna has been using libnpm since v3.7.0 to publish instead of calling npm publish from a subprocess. If you use a lockfile, you may need to \"refresh\" lerna to pick up the patched version of libnpmpublish and npm-registry-fetch.\nnpm rm -D lerna && npm i -D lerna@latest\nThe original error described in this issue would likely happen if the installation of lerna was somehow nested, perhaps during a migration to a new version (post v3.10.0) that specifies sibling dependencies with exact version ranges (no ^). But that's a weird edge-case.. Thanks for following up!. Yeah, this seems fair. I think we've long yearned for some sort of distinction between dependencies and devDependencies when determining the transitive bumps.... Forgive me, but I'm rather non-plussed with JFrog's half-assed implementation of an npm registry. There are any number of reasons it could be failing, and I gave up trying a few patch releases ago to even figure out why.\n(eek, that's an old version of npm...)\nBriefly:\n- Maybe you can convince JFrog to implement bearer token auth instead of relying on legacy basic auth? It would make things sooooo much easier.\n- Is Artifactory even returning the right error status? I feel like they might be incorrectly returning the auth error when they meant to return 409 Conflict because @foo/bar@2.2.1 already exists...\n- Unless your global npmrc (assuming it's at $GLOBAL_PREFIX/etc/npmrc) has a nerf darts exactly matching //artifactory.local/api/npm/npm-local/:_auth=<user>:<base64-password>, I'm not sure that would work?\n- There might even be a just-fixed bug in the _auth nerf dart, although your local executions passing would seem to indicate that isn't the case...\nI'm not sure why lerna publish from-git would have a different auth flow from lerna publish prerelease (which merely calls lerna version internally instead of detecting the tagged packages immediately, skipping lerna version entirely). If your Jenkins job isn't doing a full clone of all the tags etc, this might be a problem?\nThe fact that your prerelease version has a .0 appended to it seems to indicate that there is some tag, somewhere.... Yeah, it's kinda a big question. I feel like I've answered it fifteen times already.. lerna publish merely uploads tarballs to an npm registry (public by default). The license of the software being published is what determines if it is \"open source\" or not. You certainly don't have to have the code hosted on a public GitHub repo to use lerna publish (or npm publish, for that matter).. That's up to your configured --registry or, if you're using scoped packages, what the value of the publishConfig.access property of a given leaf node's package.json is (it's \"private\" by default).\nTo be clear, whether or not a package is public or private has nothing to do with whether or not it is considered \"open source\" or not. That's a licensing decision, whichlerna publish does not affect in any way.. Assuming you're using lerna version when you \"create a tag\", all you need in CI would be lerna publish from-git --yes. Creating a tag from a Github release (or whatever) isn't sufficient, as there is more going on than just git tag when Lerna versions a release.\nI'm unclear why you think you need --force-publish (the * is implicit)? lerna version is already able to identify what changed since the last release and only version those packages (and their dependents).. \"external files\", like, outside the git repo? That doesn't sound safe, or supported, for that matter.\nlerna version does all the tagging and pushing for you, anything you do separately I can't exactly diagnose, and likely isn't working because it's not creating all the tags (if it's independently versioned, that is).. > lerna version $NEW_VERSION --force-publish=* --no-git-tag-version --no-push --yes;\nHonestly, I don't even know why you're using lerna version, you're 80% of the way to your own custom publisher.\nThings outside the package directories shouldn't be required by the packages, that's basic npm etiquette (no different than a \"traditional\" one-per-repo package).\nThis request is out of scope for lerna, sorry.. collect-updates is where the rubber hits the road. But in general terms, once we've identified the subpaths where packages live, we just loop through them and run git diff --name-only ${PREVIOUS_TAG} -- packages/${PACKAGE} and if there are changes that aren't ignored we add them to the list of packages to operate on.\nDeceptively simple.. All the commands that accept filter options link to these docs in their readmes: https://github.com/lerna/lerna/tree/master/core/filter-options#options\nThese tests are the best demonstration of what you can pass to --scope and --ignore:\nhttps://github.com/lerna/lerna/blob/c0a750e0f482c16dda2f922f235861283efbe94d/commands/list/tests/list-command.test.js#L305-L356\n\"glob\" is shell lingo for a pattern that matches files or directories. The best summary is here: https://github.com/isaacs/node-glob#glob-primer\nPRs welcome to improve the docs. \u2728 . I made it even clearer just the other day:\nhttps://github.com/lerna/lerna/blob/45a05acf2d52a46f553fc1efadf9a32312aca82b/core/filter-options/tests/get-filtered-packages.test.js#L54-L72. That should definitely fail, in my opinion. Lerna is not magic, and attempting to publish packages with private dependencies literally means you're publishing broken packages. If anything, Lerna should throw an error when this is attempted.\n(adding private local packages to devDependencies is perfectly fine, since no consumer ever installs devDependencies). This is actually expected, and demonstrates one of the limitations of automating Lerna right now.\nUnless you are using relative file: specifiers, Lerna establishes the relationship of local packages by \"matching\" the semver range of a local dependent in a local sibling's dependencies. If it does not semver.satisfy() (generally a different major than the local sibling), it is \"disconnected\" and will not be updated as you've described.\nIt is assumed that your tests are sufficient to validate that the local siblings continue to successfully interoperate. If that is not the case, I suggest you improve your test suite.\nWhen making breaking changes in a given leaf node, if any modification to local consumers is necessary (not all breaking changes break all consumers), you would make those adjustments in the same commit (or close to it, as your tests should have failed in the consumer after making an atomic commit in the origin package). This is one of the advantages of a monorepo, and Lerna expects that to be the case.\nArbitrarily choosing a minor bump when a dependency bumps its major is a bit awkward, sure, but it's \"less bad\" than the alternative, which is suddenly allowing your local packages to drift apart silently.. I agree that the \"version bump only\" message kinda sucks, but the fact that local dependents will be bumped when a local dependency changes is one of the bedrock principles of Lerna as it exists today and will not be changing.\n\nI am using Lerna to hold many packages which aren't necessarily maintained by the same groups or people.\n\nIf sufficient test coverage between modules isn't possible to determine whether or not a given breaking change is actually breaking, respectfully, I would suggest that they shouldn't be in the same monorepo. Lerna can't fix development processes, and it wasn't designed to replace proper package dependency relationships entirely.. I'll merge this once you've rebased.. Thanks!. Pretty sure lerna ls combined with --since would accomplish this? Without an argument, it just looks for the last release tag in the current branch. It accepts any git ref you can think of (tag, branch, sha). It always excludes merged tags.\nI'm a little unclear what your process is exactly because my eyes glaze over when trying to follow your explanation, sorry.\nnpx lerna ls --since. lerna changed is not filterable like lerna ls is. It's intentional, as lerna changed is meant to preview lerna publish and lerna version, neither of which are filterable by --scope or --ignore.\nAs for finding the last tag in all branches, surely git has enough flags and subcommands where one can do that without burdening lerna with yet more complexity.. You can choose exactly which dependencies to bootstrap with the --scope option. Any other local dependencies that don't match this argument will be installed from the registry.\nnpx lerna bootstrap --scope $my_singleton_package. stderr is for error messages and diagnostics (i.e., logging that is not program output). This blog post explains the history. An actual error is signified by a non-zero exit code, not messages sent to stderr. It would be nice if Powershell followed 30-year-old shell conventions.\nCursory googling indicates you can turn of this \"feature\": https://stackoverflow.com/a/44564657/5707\nThis is a bug with Powershell, not lerna, thus closing.. Clearly I'm not doing a good enough job of documenting the existing options for lerna publish, because there have been positional arguments available for several months now to help in just the sort of situation you're describing here.\nYou don't need --force-publish if you're on the commit generated by lerna version. lerna publish from-git is all you need in that context.. > My assumption is that running the same command should work.\nThat assumption unfortunately suffers from the fact that the repository context has changed, so it's not actually the \"same\" command, as it is operating with different tags etc. In the next major, lerna publish will no longer implicitly call lerna version (#1767), so your assumption in this case will have a better chance of matching the actual behavior.\n\nIdeally, in this specific example, lerna would check if I'm logged in before making any local changes and failing early.\n\nYour npm auth is orthogonal to your git auth. npm publish doesn't care whether or not the code being packaged is already pushed to the remote (or even in version control, for that matter). Lerna already verifies npm auth (if you're using the default public registry) before attempting to publish (but after implicitly versioning).. You should start by using a modern version of lerna, v2 is basically dead now. I also need your lerna.json, or maybe you could just tell me if you're using Yarn Workspaces (which if that's the case makes this a Yarn bug)?. As for the actual git dep, Lerna doesn't do anything fancy, you'll need to follow the correct syntax and let npm sort it out: https://docs.npmjs.com/about-packages-and-modules#npm-package-git-url-formats. If you can npm install in the root of the repo with that exact specifier successfully, then we might have a bug in lerna bootstrap. Until then, I can't say.. You shouldn't have an install script in any package. The only place you'd need lerna bootstrap would be a prepare script in the root, for example. Also, you should move all your devDependencies to the root (where you also presumably have lerna installed).. First of all, you're using Yarn, whose yarn publish command is not nearly as robust as npm publish. Secondly, you should update Lerna, 3.3.2 is extremely old (newer versions of Lerna don't even use subprocess CLI calls to publish anymore).\nWith modern versions of Lerna, you should be able to do the following to migrate the packages at their existing version to the new registry:\nbash\nnpx lerna publish from-package\nYou can run that command as many times as you like, as it only attempts to publish versions of a package that do not already exist on the configured registry.. This doesn't need to be built-in to lerna, one can already accomplish this by using the --message option or configuring command.version.message in lerna.json (same as the flag, but \"durable\" in the sense that nobody has to remember to add it, and the CI command becomes cleaner):\nbash\nlerna publish --message \"chore(release): Publish %s\\n\\n[ci skip]\"\njson\n{\n  \"command\": {\n    \"version\": {\n      \"message\": \"chore(release): Publish %s\\n\\n[ci skip]\"\n    }\n  },\n  \"version\": \"1.2.3\"\n}\nNote that when using independent versioning, no version placeholders are interpolated, and you might as well put the [ci skip] at the end of the subject, as the body of the commit message (a list of versions created) is appended to the message value.. Since the version of Lerna you're reporting didn't exist 7 days ago, I'm going to assume it was a different version of lerna, and quite possibly the underlying npm-registry-fetch library. Can you verify that for me, please?\nAs for publishing to the registry:\n\nIf none of the packages published successfully, but the git changes and tags were pushed, you can use this command to recover:\n\nnpx lerna publish from-git\n\nIf some of the packages successfully published during the initial lerna publish, you can use this command to publish the remaining:\n\nnpx lerna publish from-package\nIf possible, I would also appreciate a full lerna-debug.log, if you have it. Thanks.. > Im assuming i run this from the top level.\nYes, lerna commands should always be run from the top-level of a monorepo (wherever the lerna.json is).\nVerdaccio isn't being very helpful here, as a 500 gives no reason why the PUT failed. If a local Verdaccio works, that (probably?) means your authentication for the remote Verdaccio instance is insufficient, or some other problem with the remote instance that I'm not equipped to debug.. Yep, you've got it right.. Sure, I guess? Lerna itself would have no use for the property, of course. Here is where lerna create would need it, somehow. Notably, here is how one might compute the directory value.. I added repository.directory fields to Lerna itself in aec5023a. Thanks!. I don't have a lot of depth on the Github API, perhaps @milesj has some insight on this mysterious 404?. It's whatever Lerna installs, which in the last week would have been @octokit/request v2.3.0 and @octokit/rest v16.15.0.\n. Thanks!. --since was added long after --include-filtered-dependents, and there's not really any explicit guarantee that they work together in any specific way. --include-filtered-dependents and --include-filtered-dependencies were originally designed to work with --scope and --ignore, which they do quite ably.\nlerna ls --since has identical output to lerna changed because it's basically the same code path (only a little more roundabout). The reason updates always include dependents is largely explained in #707, and that isn't going to change.. Yes, we definitely should document that in https://github.com/lerna/lerna/blob/master/commands/version/README.md. Sorry, I'm unclear what the problem is. Could you demonstrate it in a simple example, perhaps?. git diff? Lerna is not a general replacement for everyday git commands.\nlerna version doesn't allow uncommitted changes, so lerna changed doesn't really have any need to recognize unversioned changes.. Surely your package directory names aren't that obfuscated or divergent from the package names?\n. The argument to --since has never claimed to be a glob, unless I'm mistaken?. collect-updates doesn't use the match option of describe-ref, and it shouldn't:\n\n--since can be any git ref, not just a tag name.\noptions.match is passed directly to git describe --match, which needs to be a glob.\n--since isn't a glob.\n\nThat said, I think I have a fix:\n```patch\ndiff --git a/utils/collect-updates/tests/collect-updates.test.js b/utils/collect-updates/tests/collect-updates.test.js\nindex 42ec603..63452e7 100644\n--- a/utils/collect-updates/tests/collect-updates.test.js\n+++ b/utils/collect-updates/tests/collect-updates.test.js\n@@ -257,6 +257,29 @@ describe(\"collectUpdates()\", () => {\n     expect(makeDiffPredicate).toHaveBeenLastCalledWith(\"beefcafe\", execOpts, undefined);\n   });\n\nit(\"does not exit early on tagged release when --since  is passed\", () => {\nchangedPackages.add(\"package-dag-1\");\n+\ndescribeRef.sync.mockReturnValueOnce({\nrefCount: \"0\",\n});\n+\nconst graph = buildGraph();\nconst pkgs = graph.rawPackageList;\nconst execOpts = { cwd: \"/test\" };\n+\nconst updates = collectUpdates(pkgs, graph, execOpts, {\nsince: \"deadbeef\",\n});\n+\nexpect(updates).toEqual([\nexpect.objectContaining({ name: \"package-dag-1\" }),\nexpect.objectContaining({ name: \"package-dag-2a\" }),\nexpect.objectContaining({ name: \"package-dag-2b\" }),\nexpect.objectContaining({ name: \"package-dag-3\" }),\n]);\n\n});\n+\n   it(\"ignores changes matched by --ignore-changes\", () => {\n     const graph = buildGraph();\n     const pkgs = graph.rawPackageList;\ndiff --git a/utils/collect-updates/collect-updates.js b/utils/collect-updates/collect-updates.js\nindex f0388e1..65aa5d6 100644\n--- a/utils/collect-updates/collect-updates.js\n+++ b/utils/collect-updates/collect-updates.js\n@@ -24,7 +24,7 @@ function collectUpdates(filteredPackages, packageGraph, execOpts, commandOptions\n     const { sha, refCount, lastTagName } = describeRef.sync(execOpts, commandOptions.includeMergedTags);\n     // TODO: warn about dirty tree?\n\n\nif (refCount === \"0\" && forced.size === 0) {\n\nif (refCount === \"0\" && forced.size === 0 && !committish) {\n       // no commits since previous release\n       log.notice(\"\", \"Current HEAD is already released, skipping change detection.\");\n\n``\n(the core of your issue is that you're runninglerna ls_on_ the tagged release, not that thegit describeneeds matching). published in [v3.12.1](https://github.com/lerna/lerna/releases/tag/v3.12.1). With a reasonably up-to-date lerna, you can runlerna publish` as many times as you have registries:\n```sh\ncreate tags and push commits\n$ npx lerna version\npublish tagged packages to the default registry\n$ npx lerna publish from-git --yes\nthen for each additional registry...\n$ npx lerna publish from-package --yes --registry ${MY_AWESOME_REGISTRY}\n$ npx lerna publish from-package --yes --registry ${MY_TUBULAR_REGISTRY}\net cetera\n```\nThe --yes flag skips repetitive prompts (decisions you've already made in lerna version, basically).. That sounds like a third-party registry problem, possibly coupled with an obscure npm bug? Extracting tar content of undefined failed isn't a message that Lerna generates itself. You'd need to locate the actual tarball in the designated registry (npm v $pkg dist.tarball) and curl it down manually to check it.. Sounds good to me, looks like #1931 beat you to it. :). (To be clear, I don't think we need a --maximize-concurrency flag, let's just change the default). Seems straightforward to me. PRs gladly accepted.. (My concerns aside, I'm in favor of this change). Yikes, that's a nasty surprise. Thanks for the heads up and opening the issue upstream!. (I'll leave this open until we get some resolution on npm/npm-packlist#24). Update to lerna v3.13.1 and you will no longer encounter this problem when running lerna publish. Yep, that certainly makes sense. A similar approach to #1908 is what I'm thinking (noodling locally right now). There are a couple more places we need to be aware of \"do i need git\", but it's actually not bad.\nI think a (simplified) --git-head option would be a nice DX improvement, to preserve the gitHead metadata available from the registry.. @samlecuyer How does this look?. Do you have conventional-changelog-eslint installed in devDependencies? Lerna only ships with conventional-changelog-angular \"built-in\".. (orthogonally, --require-scripts is going away in the next major, I recommend migrating to actual npm lifecycles, not the scripts/prepublish.js pattern). You can pass --loglevel silly to make the lerna logs extremely verbose.. Hah, good find! I didn't even consider that.... I'm a little confused by exactly when and where you expect the prepublishOnly lifecycle script to be executed. I can assure you that it is executed, when present, in a leaf node as well as the root (after all leaves).\nIf your leaf nodes don't express a dev dependency on rimraf, lerna bootstrap won't link it into the leaf node's node_modules.. Literally what pkg.publishConfig is for (and not specific to Lerna at all). access, registry, and tag are the relevant fields configurable under publishConfig.. I would suggest not conflating the two contexts at all and keep the JS and TS packages in separate monorepos.. Lerna batches packages into maximally-concurrent groups, respecting topological order by default. npx lerna ls --toposort shows you the (flattened) order derived from this.\nWithin each batch, the packages are generally sorted lexically (alphabetical by path). --concurrency determines how many packages at a time, per batch, are \"in flight\". The order of resolution within a batch is non-deterministic (Promises, yay). All packages in a batch will complete before the next batch is started (run-parallel-batches).\nIt's not documented very deeply because it's an implementation detail. All users need to know is that most operations are run as concurrently as possible, respecting topological order by default.. Not directly, though both lerna exec and lerna run will execute their arguments with maximal topological concurrency.\nProgrammatically, all the bits are available as separate packages, so it wouldn't be too hard to retrieve the same topologically batched package list that Lerna uses internally:\n```js\nconst { getPackages } = require('@lerna/project');\nconst batchPackages = require('@lerna/batch-packages');\n(async () {\n  const cwd = process.cwd();\n  const pkgs = await getPackages(cwd);\n  const batches = batchPackages(pkgs);\nfor (const batch of batches) {\n    // all packages in a batch are safe to operate on concurrently\n    for (const pkg of batch) {\n      console.log(pkg.name);\n      console.log(pkg.location); // absolute path to leaf directory\n    }\n  }\n}());. @wbern That's a separate issue, which I believe already exists (possibly in triplicate).. The debug file you posted is the output of lerna add npm@5, not lerna publish. What exactly are you trying to achieve? Can you attach a complete debug log from a failed lerna publish instead?\nThe code Lerna uses to publish packages to a registry is literally the same code (http://npm.im/libnpmpublish, etc) that npm@>=6.6.0 (changelog) uses to publish packages, which was itself extracted from npm.\nThis looks like it is an issue with the tar library, possibly dealing with incompatible transitive dependency versions?. If that is the case, they also don't need to be managed by Lerna. Use relative file: dependencies from the root, and move them outside the packages/ tree (or wherever you've configured lerna.json's packages).\nAlternately, you can set \"private\": true in the package.json of the modules you never want to publish. They'll still get a version, but that's only a big deal if you're versioning independently (you're not, it appears) and you're bothered by extra git tags (you shouldn't be).. Yep, sounds like a great opportunity for a PR!. Lerna isn't calling clean and build, it is calling the root prepare lifecycle (in all likelihood). It's been doing that for over six months now. I'm just spitballing, because I can't read your mind and see the package.json files in question.... lerna ls has never exited non-zero with no results. lerna changed does exit non-zero, as it was intended to be a filter for lerna publish in CI (for example). (lerna changed is equivalent to lerna ls --since)\nba54439 was a bit overzealously trying to avoid an empty console.log(). Perhaps testing result.text.length instead of result.count is more appropriate? It would still emit an empty array, in your case.\nI have a fix forthcoming.. As for the non-zero exit with no results, that's a breaking change. I largely agree with it, btw, as it matches the behavior of grep with no results.. It requires refactoring this block to separate changelog generation from writing out the files: https://github.com/lerna/lerna/blob/a7ad9b60d27b390fde21fd2837f2d97320c4603e/core/conventional-commits/lib/update-changelog.js#L51-L59. You're attempting a back-door --ignore for lerna publish, which will never happen. #707 etc etc etc. Lerna has either detected a change under the package, or one of its local dependencies has bumped. This behavior is not configurable, and will not change. Versions are cheap.. I have no idea what HTTP_NPM_SCOPE is. A header? An env var? Lerna uses the same publish mechanism as npm itself (since v6.6.0), does npm publish work with recent versions?. A lerna_debug.log from a failed publish would be appreciated.. The docs for project-scope are kinda vague on exactly what they should be used for. I'm cool with passing spec.scope (from npm-package-arg) there, instead.. This seems a bit too special-cased to be a top-level CLI option, better suited for a third-party tool that reuses existing lerna packages. lerna ls isn't meant to be a general replacement for npm ls, and only deals with a small subset of metadata. Lerna's PackageGraph would even do most of the collation for you.\n```js\n!/usr/bin/env node\nconst { getPackages } = require('@lerna/project');\nconst PackageGraph = require('@lerna/package-graph');\n(async function () {\n  const cwd = process.cwd(); // or process.argv?\n  const pkgs = await getPackages(cwd);\n  const graph = new PackageGraph(pkgs);\n  const json = {};\ngraph.forEach((node, name) => {\n    json[name] = [\n      ...node.externalDependencies.keys(),\n      ...node.localDependencies.keys(),\n    ].sort();\n  });\nconsole.log(JSON.stringify(json, null, 2));\n})();\n```\nCopy that code, paste it into a script file, and you can get output like this (when run on the lerna source):\nAdjacency graph of lerna/lerna\n browsers demand the next line be empty \njson\n{\n  \"@lerna/add\": [\n    \"@lerna/bootstrap\",\n    \"@lerna/command\",\n    \"@lerna/filter-options\",\n    \"@lerna/npm-conf\",\n    \"@lerna/validation-error\",\n    \"dedent\",\n    \"npm-package-arg\",\n    \"p-map\",\n    \"pacote\",\n    \"semver\"\n  ],\n  \"@lerna/bootstrap\": [\n    \"@lerna/batch-packages\",\n    \"@lerna/command\",\n    \"@lerna/filter-options\",\n    \"@lerna/has-npm-version\",\n    \"@lerna/npm-install\",\n    \"@lerna/package-graph\",\n    \"@lerna/pulse-till-done\",\n    \"@lerna/rimraf-dir\",\n    \"@lerna/run-lifecycle\",\n    \"@lerna/run-parallel-batches\",\n    \"@lerna/symlink-binary\",\n    \"@lerna/symlink-dependencies\",\n    \"@lerna/validation-error\",\n    \"dedent\",\n    \"get-port\",\n    \"multimatch\",\n    \"npm-package-arg\",\n    \"npmlog\",\n    \"p-finally\",\n    \"p-map\",\n    \"p-map-series\",\n    \"p-waterfall\",\n    \"read-package-tree\",\n    \"semver\"\n  ],\n  \"@lerna/changed\": [\n    \"@lerna/collect-updates\",\n    \"@lerna/command\",\n    \"@lerna/listable\",\n    \"@lerna/output\",\n    \"@lerna/version\"\n  ],\n  \"@lerna/clean\": [\n    \"@lerna/command\",\n    \"@lerna/filter-options\",\n    \"@lerna/prompt\",\n    \"@lerna/pulse-till-done\",\n    \"@lerna/rimraf-dir\",\n    \"p-map\",\n    \"p-map-series\",\n    \"p-waterfall\"\n  ],\n  \"@lerna/create\": [\n    \"@lerna/child-process\",\n    \"@lerna/command\",\n    \"@lerna/npm-conf\",\n    \"@lerna/validation-error\",\n    \"camelcase\",\n    \"dedent\",\n    \"fs-extra\",\n    \"globby\",\n    \"init-package-json\",\n    \"npm-package-arg\",\n    \"p-reduce\",\n    \"pacote\",\n    \"pify\",\n    \"semver\",\n    \"slash\",\n    \"validate-npm-package-license\",\n    \"validate-npm-package-name\",\n    \"whatwg-url\"\n  ],\n  \"@lerna/diff\": [\n    \"@lerna/child-process\",\n    \"@lerna/command\",\n    \"@lerna/validation-error\",\n    \"npmlog\"\n  ],\n  \"@lerna/exec\": [\n    \"@lerna/batch-packages\",\n    \"@lerna/child-process\",\n    \"@lerna/command\",\n    \"@lerna/filter-options\",\n    \"@lerna/run-parallel-batches\",\n    \"@lerna/validation-error\"\n  ],\n  \"@lerna/import\": [\n    \"@lerna/child-process\",\n    \"@lerna/command\",\n    \"@lerna/prompt\",\n    \"@lerna/pulse-till-done\",\n    \"@lerna/validation-error\",\n    \"dedent\",\n    \"fs-extra\",\n    \"p-map-series\"\n  ],\n  \"@lerna/init\": [\n    \"@lerna/child-process\",\n    \"@lerna/command\",\n    \"fs-extra\",\n    \"p-map\",\n    \"write-json-file\"\n  ],\n  \"@lerna/link\": [\n    \"@lerna/command\",\n    \"@lerna/package-graph\",\n    \"@lerna/symlink-dependencies\",\n    \"p-map\",\n    \"slash\"\n  ],\n  \"@lerna/list\": [\n    \"@lerna/command\",\n    \"@lerna/filter-options\",\n    \"@lerna/listable\",\n    \"@lerna/output\"\n  ],\n  \"@lerna/publish\": [\n    \"@lerna/batch-packages\",\n    \"@lerna/check-working-tree\",\n    \"@lerna/child-process\",\n    \"@lerna/collect-updates\",\n    \"@lerna/command\",\n    \"@lerna/describe-ref\",\n    \"@lerna/log-packed\",\n    \"@lerna/npm-conf\",\n    \"@lerna/npm-dist-tag\",\n    \"@lerna/npm-publish\",\n    \"@lerna/output\",\n    \"@lerna/pack-directory\",\n    \"@lerna/prompt\",\n    \"@lerna/pulse-till-done\",\n    \"@lerna/run-lifecycle\",\n    \"@lerna/run-parallel-batches\",\n    \"@lerna/validation-error\",\n    \"@lerna/version\",\n    \"figgy-pudding\",\n    \"fs-extra\",\n    \"libnpmaccess\",\n    \"npm-package-arg\",\n    \"npm-registry-fetch\",\n    \"npmlog\",\n    \"p-finally\",\n    \"p-map\",\n    \"p-pipe\",\n    \"p-reduce\",\n    \"pacote\",\n    \"semver\"\n  ],\n  \"@lerna/run\": [\n    \"@lerna/batch-packages\",\n    \"@lerna/command\",\n    \"@lerna/filter-options\",\n    \"@lerna/npm-run-script\",\n    \"@lerna/output\",\n    \"@lerna/run-parallel-batches\",\n    \"@lerna/timer\",\n    \"@lerna/validation-error\",\n    \"p-map\"\n  ],\n  \"@lerna/version\": [\n    \"@lerna/batch-packages\",\n    \"@lerna/check-working-tree\",\n    \"@lerna/child-process\",\n    \"@lerna/collect-updates\",\n    \"@lerna/command\",\n    \"@lerna/conventional-commits\",\n    \"@lerna/github-client\",\n    \"@lerna/output\",\n    \"@lerna/prompt\",\n    \"@lerna/run-lifecycle\",\n    \"@lerna/validation-error\",\n    \"chalk\",\n    \"dedent\",\n    \"minimatch\",\n    \"npmlog\",\n    \"p-map\",\n    \"p-pipe\",\n    \"p-reduce\",\n    \"p-waterfall\",\n    \"semver\",\n    \"slash\",\n    \"temp-write\"\n  ],\n  \"@lerna/child-process\": [\n    \"chalk\",\n    \"execa\",\n    \"strong-log-transformer\"\n  ],\n  \"@lerna/cli\": [\n    \"@lerna/global-options\",\n    \"dedent\",\n    \"npmlog\",\n    \"yargs\"\n  ],\n  \"@lerna/command\": [\n    \"@lerna/child-process\",\n    \"@lerna/package-graph\",\n    \"@lerna/project\",\n    \"@lerna/validation-error\",\n    \"@lerna/write-log-file\",\n    \"dedent\",\n    \"execa\",\n    \"is-ci\",\n    \"lodash\",\n    \"npmlog\"\n  ],\n  \"@lerna/conventional-commits\": [\n    \"@lerna/validation-error\",\n    \"conventional-changelog-angular\",\n    \"conventional-changelog-core\",\n    \"conventional-recommended-bump\",\n    \"fs-extra\",\n    \"get-stream\",\n    \"npm-package-arg\",\n    \"npmlog\",\n    \"pify\",\n    \"semver\"\n  ],\n  \"@lerna/filter-options\": [\n    \"@lerna/collect-updates\",\n    \"@lerna/filter-packages\",\n    \"dedent\"\n  ],\n  \"@lerna/global-options\": [],\n  \"lerna\": [\n    \"@lerna/add\",\n    \"@lerna/bootstrap\",\n    \"@lerna/changed\",\n    \"@lerna/clean\",\n    \"@lerna/cli\",\n    \"@lerna/create\",\n    \"@lerna/diff\",\n    \"@lerna/exec\",\n    \"@lerna/import\",\n    \"@lerna/init\",\n    \"@lerna/link\",\n    \"@lerna/list\",\n    \"@lerna/publish\",\n    \"@lerna/run\",\n    \"@lerna/version\",\n    \"import-local\",\n    \"npmlog\"\n  ],\n  \"@lerna/package-graph\": [\n    \"@lerna/validation-error\",\n    \"npm-package-arg\",\n    \"semver\"\n  ],\n  \"@lerna/package\": [\n    \"load-json-file\",\n    \"npm-package-arg\",\n    \"write-pkg\"\n  ],\n  \"@lerna/project\": [\n    \"@lerna/package\",\n    \"@lerna/validation-error\",\n    \"cosmiconfig\",\n    \"dedent\",\n    \"dot-prop\",\n    \"glob-parent\",\n    \"globby\",\n    \"load-json-file\",\n    \"npmlog\",\n    \"p-map\",\n    \"resolve-from\",\n    \"write-json-file\"\n  ],\n  \"@lerna/prompt\": [\n    \"inquirer\",\n    \"npmlog\"\n  ],\n  \"@lerna/validation-error\": [\n    \"npmlog\"\n  ],\n  \"@lerna/batch-packages\": [\n    \"@lerna/package-graph\",\n    \"@lerna/validation-error\",\n    \"npmlog\"\n  ],\n  \"@lerna/check-working-tree\": [\n    \"@lerna/describe-ref\",\n    \"@lerna/validation-error\"\n  ],\n  \"@lerna/collect-updates\": [\n    \"@lerna/child-process\",\n    \"@lerna/describe-ref\",\n    \"minimatch\",\n    \"npmlog\",\n    \"slash\"\n  ],\n  \"@lerna/create-symlink\": [\n    \"cmd-shim\",\n    \"fs-extra\",\n    \"npmlog\"\n  ],\n  \"@lerna/describe-ref\": [\n    \"@lerna/child-process\",\n    \"npmlog\"\n  ],\n  \"@lerna/filter-packages\": [\n    \"@lerna/validation-error\",\n    \"multimatch\",\n    \"npmlog\"\n  ],\n  \"@lerna/get-npm-exec-opts\": [\n    \"npmlog\"\n  ],\n  \"@lerna/get-packed\": [\n    \"fs-extra\",\n    \"ssri\",\n    \"tar\"\n  ],\n  \"@lerna/github-client\": [\n    \"@lerna/child-process\",\n    \"@octokit/plugin-enterprise-rest\",\n    \"@octokit/rest\",\n    \"git-url-parse\",\n    \"npmlog\"\n  ],\n  \"@lerna/has-npm-version\": [\n    \"@lerna/child-process\",\n    \"semver\"\n  ],\n  \"@lerna/listable\": [\n    \"@lerna/batch-packages\",\n    \"chalk\",\n    \"columnify\"\n  ],\n  \"@lerna/log-packed\": [\n    \"byte-size\",\n    \"columnify\",\n    \"has-unicode\",\n    \"npmlog\"\n  ],\n  \"@lerna/map-to-registry\": [\n    \"npm-package-arg\",\n    \"npmlog\"\n  ],\n  \"@lerna/npm-conf\": [\n    \"config-chain\",\n    \"pify\"\n  ],\n  \"@lerna/npm-dist-tag\": [\n    \"figgy-pudding\",\n    \"npm-package-arg\",\n    \"npm-registry-fetch\",\n    \"npmlog\"\n  ],\n  \"@lerna/npm-install\": [\n    \"@lerna/child-process\",\n    \"@lerna/get-npm-exec-opts\",\n    \"fs-extra\",\n    \"npm-package-arg\",\n    \"npmlog\",\n    \"signal-exit\",\n    \"write-pkg\"\n  ],\n  \"@lerna/npm-publish\": [\n    \"@lerna/run-lifecycle\",\n    \"figgy-pudding\",\n    \"fs-extra\",\n    \"libnpmpublish\",\n    \"npmlog\",\n    \"pify\",\n    \"read-package-json\"\n  ],\n  \"@lerna/npm-run-script\": [\n    \"@lerna/child-process\",\n    \"@lerna/get-npm-exec-opts\",\n    \"npmlog\"\n  ],\n  \"@lerna/output\": [\n    \"npmlog\"\n  ],\n  \"@lerna/pack-directory\": [\n    \"@lerna/get-packed\",\n    \"@lerna/package\",\n    \"@lerna/run-lifecycle\",\n    \"figgy-pudding\",\n    \"npm-packlist\",\n    \"npmlog\",\n    \"tar\",\n    \"temp-write\"\n  ],\n  \"@lerna/pulse-till-done\": [\n    \"npmlog\"\n  ],\n  \"@lerna/resolve-symlink\": [\n    \"fs-extra\",\n    \"npmlog\",\n    \"read-cmd-shim\"\n  ],\n  \"@lerna/rimraf-dir\": [\n    \"@lerna/child-process\",\n    \"npmlog\",\n    \"path-exists\",\n    \"rimraf\"\n  ],\n  \"@lerna/run-lifecycle\": [\n    \"@lerna/npm-conf\",\n    \"figgy-pudding\",\n    \"npm-lifecycle\",\n    \"npmlog\"\n  ],\n  \"@lerna/run-parallel-batches\": [\n    \"p-map\",\n    \"p-map-series\"\n  ],\n  \"@lerna/symlink-binary\": [\n    \"@lerna/create-symlink\",\n    \"@lerna/package\",\n    \"fs-extra\",\n    \"p-map\"\n  ],\n  \"@lerna/symlink-dependencies\": [\n    \"@lerna/create-symlink\",\n    \"@lerna/resolve-symlink\",\n    \"@lerna/symlink-binary\",\n    \"fs-extra\",\n    \"p-finally\",\n    \"p-map\",\n    \"p-map-series\"\n  ],\n  \"@lerna/timer\": [],\n  \"@lerna/write-log-file\": [\n    \"npmlog\",\n    \"write-file-atomic\"\n  ]\n}\n. To execute a thing only after success, from the CLI, would look like this:\nnpx lerna publish && node ./foo.js\nOr use a root postpublish lifecycle, as @tanhauhau pointed out. I can guarantee you it is being called after all changed packages have been published to the registry.. I'm not sure how you expect an illegally-formatted bin field to work? It should be a string (if you only have one bin, named identically to your package) or an object.. One problem with process.env.PAGER is that not everyone will have it, contrary to the expectation of default-pager. Inheriting stdio does not have this problem.\n. The public registry is always https://registry.npmjs.org/. This needs to support the configurable packages location(s), yes?\n(presumably picking the first location in the event multiple exist). Why not just use a .npmrc file in the root of the repository with that config? We'd still need to check it (and pass --registry <url> if present) when running npm operations in packages, but that's no different than currently.\nUsing the .npmrc file means we can use npm config get registry from the root and get the correct value, simplifying the various commands that need this. It also keeps the lerna.json focused, instead of duplicating information already available elsewhere.. As mentioned in https://github.com/lerna/lerna/pull/485, this should be https://registry.npmjs.org/.\n(it's very confusing to \"layer\" PRs like this. As far as I can tell only NpmUtilities.getConfig() is necessary in the other PR, and it's very noisy to have a bunch of duplicate changes in both PRs...). Is setConfig() meant to be used anywhere, or is this added just to make the API symmetrical?. Is this really worth a warning? I can see an argument for warning about devDependencies, but warning for production dependencies seems overwrought.. Having used this previously with asini, I'm concerned about how hoisting all packages, even ones not specified in the root package.json, all the way to the root makes future npm commands (ls, outdated, shrinkwrap, etc) basically worthless due to \"extraneous package\" errors.\nI am all for recognizing when the root package.json has a matching version already, and doing the appropriate binary linking if necessary. Could we perhaps install the \"common among packages but not in root\" dependencies in a sibling of the packages themselves? (In the case of multiple packages locations, the closest common ancestor would suffice)\nFor example, with the default 'packages/*' glob, any common dependencies not present in the root would install into ./packages/node_modules, thus preserving the usefulness of root npm commands while gaining the benefits of hoisting. Does that sound reasonable?. I was about to ask why not just mutate this.filteredPackages in place, but then I realized this is a pattern used elsewhere and it makes it more readable to boot. \ud83d\udc53 . I agree we need to remove this unused property, but I'm not sure this PR is the place for that.. Oy, we really have to get away from this fiddly manual formatting. (urge to refactor into yargs rising...)\nNone of the other commands list their positional arguments here, can we stay consistent with that until we move to a better argparser?. As long as there are no escaped double quotes inside message, yes. Perhaps we should JSON.stringify(message)?. I'm not sure publish is the only command that would need this; certainly bootstrap could also potentially need it (for example, dependencies on private modules that aren't co-located in the monorepo).\nWe should also allow this setting in lerna.json, accessed via the Command##getOptions() API.. I'm not a huge fan of this argument whitelisting, though I understand the purpose.\nInstead of direct flags, I would rather provide config like this via env vars passed in the options argument.\nconst command = (\"npm publish --tag \" + tag).trim()\nconst env = {\n  npm_config_registry: opts.registry\n};\nChildProcessUtilities.exec(\"cd \" + escapeArgs(directory) + \" && \" + command, { env }, callback);. this should use getOptions(). const doesn't prohibit object mutation, only reassignment to the identifier.. Let's keep this initial implementation as simple as possible. Is there a great need for Nexus3 support from lerna users?. This should be git symbolic-ref --short -q HEAD, not sed shenanigans. Thus, when an empty string, it represents a detached head state.. We really shouldn't be depending on the output of a porcelain command.\n```bash\ncorrect example from the linked blog post\nif branch=$(git symbolic-ref --short -q HEAD)\nthen\n  echo on branch $branch\nelse\n  echo not on any branch\nfi\n```\nDetermining if the branch is detached then becomes if (currentBranch === '') {. I don't think we should be prejudicing master here. It's also not Lerna's job to inform the user which branch they are on.. I'm definitely glad we're setting publishConfig.registry in the created package.json, that's key.. doh, yeah :/. Let's set this as an instance prop in the initialize method, like this.npmRegistry = this.getOptions().registry;. I thought the dist-tag commands passed the env var too?. This should be done once, in the initialize method.. Since this.toposort is never referenced until the initialize method of subclasses, it seems like we could wait to determine this in runPreparations() or something. My concern (perhaps unfounded?) is that calling getOptions() in the constructor might \"miss\" the otherCommandConfigs override? Do I just suck at class inheritance?. Thanks!. If we've skipped temp-tagging, why not just avoid the runParallelBatches call entirely?\n```\nconst {skipTempTag} = this.getOptions();\nif (skipTempTag) {\n  return callback();\n}\nthis.progressBar.init(...)\n```. I really dislike nested ternaries, especially all on one line. Wouldn't boolean defaults work here?\nreturn npmTag || (canary && \"canary\") || \"latest\";. Let's invert the ternary (const tag = skipTempTag ? this.getDistTag() : \"lerna-temp\";) and make sure there's a newline between this assignment and the next forEach block.. How about specifying the cwd option for execSync rather than the manual cd?. Can you put the ternary operators first, please? It is much easier to read, in my experience.\nversions[update.package.name] = (this.flags.cdVersion === \"current\")\n  ? update.package.version\n  : semver.inc(update.package.version, this.flags.cdVersion);. What is the use-case for --cd-version current?. missing colon here. I don't think we want to remove DEBUG_CALLS=true, here. Whoops, nevermind then. I don't have a dog in the hunt, just was concerned about PR scope.. Isn't this what Array.prototype.some() is for? (it short-circuits, too)\n```\n// reusable utility for both checks\nfunction hasUnsatisfiedDependencies(deps) {\n  return deps.some(dep => dep.isSatisfied !== true);\n}\nconst depsToInstallInRoot = hasUnsatisfiedDependencies(root)\n  // ...\n// further down\nif (hasUnsatisfiedDependencies(deps)) {\n  actions.push(\n  //...\n``. We should probably allow customization of the [identifier](https://github.com/npm/node-semver#prerelease-identifiers) argument tosemver.inc`, yes?\nOtherwise the output is a little terse:\njs\nsemver.inc(\"1.0.0\", \"prerelease\")       // => 1.0.1-0\nsemver.inc(\"1.0.0\", \"prerelease\", \"rc\") // => 1.0.1-rc.0\n// etc. I think your last suggestion hits the right balance of complexity and usefulness. (I just deleted a long-ish paragraph over-ruminating on all the cases). That's totally the right thing to do, since any non-null value overwrites everything, and we definitely want to transfer everything else.. Important as these whitespace changes are, let's fix this separately (I'll approve it and merge immediately). How in the world did it pass otherwise? If you npm run lint in master right now, it makes absolutely no complaint about this weird indentation.\n(the consistency apparently is trying to validate that the closing square bracket is on the same column as the opening square bracket, not the general indent, which is frustrating). We already describe the lerna.json \"durable\" config pattern elsewhere, I think this is implied (much like #598, which only made a single line change and no docs updated).. I think we should cache this getOptions() result outside of the forEach, since it will never change. I appreciate the disambiguating parentheses on the concatenation ternary.. I appreciate test cases, although I think in this case we've already covered the ability for \"durable\" getOptions() config to bubble up through the various levels (lerna.json vs CLI flags, etc).\nI won't say \"no\" to more tests, though. ^_^. I was playing with NpmUtilities.getExecOpts() locally during the contentious rebasing process yesterday, and I could have sworn I added it here, too. (technically ChildProcessUtilities.spawn() in this method, but same diff as far as the opts go). I think we should take the opportunity to reuse the new getExecOpts() method:\nconst opts = NpmUtilities.getExecOpts(directory, registry);\nopts.stdio = [\"ignore\", \"pipe\", \"pipe\"];\nLike all good refactorings, the rest of your (much appreciated!) tests won't need to be further modified. :)\n(we can leave the other exec opts cwd and env in this file alone for now, they're not aware of the registry for the moment). Let's spread this across multiple lines for readability, please.. I think this is the wrong place to change the evaluation of a given Command's rootPath property. In fact, I don't think Repository should ever be calling git init:\n```diff\ndiff --git a/src/Repository.js b/src/Repository.js\nindex c9870f1..9ab637c 100644\n--- a/src/Repository.js\n+++ b/src/Repository.js\n@@ -1,24 +1,20 @@\n-import GitUtilities from \"./GitUtilities\";\n+import path from \"path\";\n+import findUp from \"find-up\";\n import FileSystemUtilities from \"./FileSystemUtilities\";\n import PackageUtilities from \"./PackageUtilities\";\n import Package from \"./Package\";\n import NpmUtilities from \"./NpmUtilities\";\n-import path from \"path\";\n-import logger from \"./logger\";\nconst DEFAULT_PACKAGE_GLOB = \"packages/*\";\nexport default class Repository {\n   constructor() {\n-    if (!GitUtilities.isInitialized()) {\n-      logger.info(\"Initializing Git repository.\");\n-      GitUtilities.init();\n-    }\n+    // findUp returns null when not found, and path.resolve starts from process.cwd()\n+    const lernaJsonLocation = findUp.sync(\"lerna.json\") || path.resolve(\"lerna.json\");\n\nthis.rootPath = path.resolve(GitUtilities.getTopLevelDirectory());\nthis.lernaJsonLocation = path.join(this.rootPath, \"lerna.json\");\nthis.rootPath = path.dirname(lernaJsonLocation);\nthis.lernaJsonLocation = lernaJsonLocation;\n     this.packageJsonLocation = path.join(this.rootPath, \"package.json\");\n\nthis.packagesLocation = path.join(this.rootPath, \"packages\"); // TODO: Kill this.\n// Legacy\n this.versionLocation = path.join(this.rootPath, \"VERSION\");\n```\n\n\nInstead, lerna init should have that responsibility, as befits an \"init\" command. Normal commands don't need that baggage/overhead:\n```diff\ndiff --git a/src/commands/InitCommand.js b/src/commands/InitCommand.js\nindex b41c462..f6c04d0 100644\n--- a/src/commands/InitCommand.js\n+++ b/src/commands/InitCommand.js\n@@ -1,3 +1,4 @@\n+import GitUtilities from \"./GitUtilities\";\n import FileSystemUtilities from \"../FileSystemUtilities\";\n import Command from \"../Command\";\n import objectAssignSorted from \"object-assign-sorted\";\n@@ -8,7 +9,11 @@ export default class InitCommand extends Command {\n   runPreparations() {}\ninitialize(callback) {\n-    // Nothing to do...\n+    if (!GitUtilities.isInitialized()) {\n+      this.logger.info(\"Initializing Git repository.\");\n+      GitUtilities.init();\n+    }\n+\n     callback(null, true);\n   }\n``\n. Orthogonal to this PR, but I really like [dedent](https://github.com/dmnd/dedent) for readable indentation of multi-line template strings.. This won't support our customizable (and potentially multiple)packagesconfig. I would recommend instead simply passing the [Package](https://github.com/lerna/lerna/blob/master/src/Package.js) instance in and dereferencing the fields directly (such aspkg.location, which will give you what you want here).. I would prefer to encapsulate thechangelogLocationassignment insideupdateChangelog(). Perhaps return the changed location for pushing intochangedFiles`, then?\nIn fact, changelogs being important enough, regardless of how one generates them, I can justify adding a changelogLocation getter to the Package class, thus removing the need for a return value.\n```diff\ndiff --git a/src/Package.js b/src/Package.js\nindex 76a88da..d4d4bee 100644\n--- a/src/Package.js\n+++ b/src/Package.js\n@@ -17,6 +17,10 @@ export default class Package {\n     return this._location;\n   }\n\nget changelogLocation() {\nreturn path.join(this._location, \"CHANGELOG.md\");\n}\n+\n   get nodeModulesLocation() {\n     return path.join(this._location, \"node_modules\");\n   }\n``. The path here needs to usepath.normalizeso windows doesn't whine. It's implicitly called behind the scenes when you usepath.join()orpath.resolve(), too, though for this purpose a directnormalizecall seems appropriate.. Without this, the Windows builds have all sorts of impossible-to-debug race conditions with the filesystem operations (fixture copy, etc). _With_ it, it runs super fast (relative to \"normal\" multi-process Jest runs on Windows).. I got tired of my editor yelling at me with lint errors whenever I opened this file. Easy enough to start linting it automatically, as we no longer support node < v4.. This is pretty big. Contributors that run tests locally shouldn't have to remember to _also_yarn run lintto avoid silly lint errors breaking their PR builds.. Now that we're usingyarnin CI, this is less important. Without it, however, npm 2 (the default for node v4) would fail to run tests because babel-jest wasn't a sibling of jest.. Jest does aggressive pre-caching of package.json files, apparently, and this was seriously harshing the mellow of a CI process when booting up the tests. So we ignore it. \ud83d\ude0e . Passinggraceful-fstomkdirp` is an effort to minimize race conditions when conducting tons of parallel filesystem operations.\n\n(These were especially noticeable because jest by default tries to run as many tests in parallel processes as possible). This didn't need to be a statSync since the result was never used.. Apparently Jasmine uses this pattern, contra Mocha.. This started out as a parallel Promise.all(), but the synchronous process.chdir() inside initFixture()'s promise chain made that non-deterministic, hence the ordering.. This fixture used to be initialized for every test in this file, despite over half of them doing another fixture init (for filtering) and ignoring this. Seemed wasteful.. Somehow we got two blocks of filterPackages tests. I condensed them, using the public API instead of the \"private\" underscore-prefixed method.. I moved the process.env mocking into the tail-end of beforeEach because now (thanks to promises) I can be assured that all fixture initialization that needs the \"real\" env will not be harmed by this mock.. Using a real temp directory helps avoid lots of subtle bugs in the tests due to \"fall through\" into the parent git repo. Also, it's just cleaner, and in some cases even faster (since tempdirs are often located on ramdisks).. look ma, code reuse!. I encountered this issue when I ignored stderr in GitUtilities.isInitialized(). That was a fun debugging session.. Turns out that this block could never be entered because of the way we currently interpret the sort option.. The publishConfig and bootstrapConfig properties are already handled by Command.getOptions(), so it seemed safe to remove these.. It was bugging me that we were calling this every time, even if there were no deps.. Yeah, I'm fiddling with it in a new issue right now. Seems GH tables require a header row?. I'm pretty sure the default: \"info\" in the loglevel options above handles this, so no need to add the || \"info\".. I'd really like to use yargs.commandDir(), exposing command module metadata as named exports in each command.. If we demandCommand(), yargs handles this for us.. yargs.help() does this for free. If you use dashed-case keys in the option definitions, yargs always camelizes them.. We shouldn't be doing this, in my opinion. Filtering isn't necessary when command modules define their own options, and any garbage passed along will just be ignored anyway.. Command modules should supply a handler export that does the instantiation, not this file.\n```js\n// ...\nimport Command from \"../Command\";\nexport const command = \"bootstrap\";\nexport const describe = \"Link local packages together and install remaining package dependencies\";\nexport const builder = {\n  \"npm-client\": {\n    // ...\n  },\n  hoist: {\n    // ...\n  },\n  nohoist: {\n    // ...\n  },\n};\nexport function handler(argv) {\n  return new BootstrapCommand(argv._, argv).run();\n}\nexport default class BootstrapCommand extends Command {\n// ...\n```\nThe handler returns the result of instance.run() because I want to make run() return a Promise eventually, and that would be a handy when tests call the handler, etc.. I think we could just export this as globalOptions and configure yargs to group them as \"Global Options\". Thus, all subcommand --help output (e.g., lerna bootstrap --help would get them for free (as well as default lerna --help output).\n```js\n// bin/lerna.js\nconst globalOptions = require(\"../lib/Command\").globalOptions;\nyargs.options(globalOptions).group(Object.keys(globalOptions), \"Global Options:\");\n```\nBecause yargs options are global by default, we don't have to worry about applying global: true to every block here.. We'll need to add default: true here, too. (as --no-sort is automatically handled as a negation). Keys in the options object should be dash-cased, as the camelizing is automatic.. Since we're already providing the default through the options config, we shouldn't need the alternation here. Or the coercion, for that matter, since yargs will always make it a Number. We could even do the Math.max() business in a coerce config key.\njs\n  concurrency: {\n    describe: \"How many threads to use when parallelizing tasks\",\n    type: \"number\",\n    requiresArg: true,\n    default: 4,\n    coerce: (val) => Math.max(1, val)\n  },. I think we can stick with getOptions() if we're using command modules. The only command that currently uses the otherCommandConfigs getter (to share PublishCommand options) can just as easily import the builder object from PublishCommand itself and spread it into its own builder export.\n```js\n// ...\nimport { builder as publishOptions } from \"./PublishCommand\";\n// command export\n// describe export\nexport const builder = {\n  ...publishOptions,\n};\n// handler export\nexport default class UpdatedCommand extends Command {\n// ...\n```\n(the otherCommandConfigs bit is still necessary to read lerna.json stuff). Please don't reorder the imports for cosmetic reasons, it's a historical artifact that I'd rather not propagate.. As I've shown elsewhere, this should just be a named export, not a static property of the default export.. In the context of InitCommand, --exact is actually intended to pin the version of lerna that was used to initialize in package.json without a caret. \"Specify lerna dependency version in package.json without a caret (^)\" is probably better, here.. We should probably alphabetize the keys of this options object, just for ease of maintenance. (I think yargs alphabetizes them when listing --help?). If we're mocking the env here, shouldn't the env key here be env: mockEnv?. Hah, you're right! My brain is a bit mushy from my deep-diving into the tests. Oh snap! Good catch.. Tests look good to me. This belongs in ExecCommand and RunCommand, not the base class, yes?. Well, consider that those other commands really have no use for this flag, and might even be considered broken if they were to adhere to it. I would recommend a separate shared file to encapsulate, yes.. This needs to run in a seperate test.concurrent() block. It's not isolated enough, here. (which is testing the \"defaults\"). We've already got the bootstrap test installing locally and running from an npm script, I don't think we need another one here (just do the execa(LERNA_BIN...) part). They take so long to run :P\nBut yes, I would consider these validation that the same CLI flags work the same way with yargs as they did with meow.\n. The snapshots need to be \"stable\", that is, they can't have the temp directory in them, because that changes every run. To pass the --silent flag to npm (which omits the logging that contains the unstable tmpdir), add --, --silent to the args here. It's how I got the bootstrap integration lerna run test to have stable snapshots.\nI agree it's a bit weird, especially how we handle the \"extra args\" (the ones that follow -- aren't parsed by yargs or meow, but passed on to npm run, as args to npm, not the script.. I really don't think we need a \"lerna run\" from npm script integration test, we're already doing that in lerna-bootstrap.test.js.\nIn any case, the reason your tests are failing right now is that you're missing a local dependency on lerna here, like in the PublishCommand/integration fixture:\njson\n  \"devDependencies\": {\n    \"lerna\": \"__TEST_PKG_URL__\"\n  }. I'm not sure this property is necessary, as execa is handling this for us.. lerna exec -- npm view \\$LERNA_PACKAGE_NAME works perfectly fine as-is on master, for example.. Ah yes, I just reproduced it locally.\n```js\n  test.concurrent(\"$LERNA_PACKAGE_NAME\", () => {\n    return initFixture(\"ExecCommand/basic\").then((cwd) => {\n      const args = [\n        \"exec\",\n        \"echo\",\n        \"\\$LERNA_PACKAGE_NAME\",\n        \"--concurrency=1\",\n      ];\n  return execa(LERNA_BIN, args, { cwd }).then((result) => {\n    expect(result.stdout).toMatchSnapshot(\"echo: $LERNA_PACKAGE_NAME\");\n  });\n});\n\n});\n``. Interestingly, it doesn't seem to matter if you pass\"$LERNA_PACKAGE_NAME\",or\"\\$LERNA_PACKAGE_NAME\",in the integration test, but it certainly matters in the CLI command.. Try omitting--cd-version` entirely, and you'll see why I had to manually validate it.\nI've already noted this disparity upstream: https://github.com/yargs/yargs/issues/849. This is just p-filter, we really should just use the module.... We could probably batch this better, though it seems relatively low on the list of performance gains.. array flatten(), by any other name. and that's me, forgetting to add a newline.... An NpmUtilities.installInDir() test case with an assertion similar to this one would help keep our coverage up.\n```js\nconst config = { npmClient: \"yarn\" };\nconst npmGlobalStyle = true;\nNpmUtilities.installInDir(directory, dependencies, config, npmGlobalStyle, (err) => {\n  // ...\n  expect(ChildProcessUtilities.exec).lastCalledWith(\"npm\", [\"install\", \"--global-style\"], {\n    // ...\n. An assertion in [this test](https://github.com/lerna/lerna/blob/master/test/BootstrapCommand.js#L121) would be helpful:js\nexpect(NpmUtilities.installInDir).toBeCalledWith(\n  expect.stringContaining(\"package-dirname\"),\n  expect.arrayContaining([\"non-hoisted-dependency-name\"]),\n  expect.any(Object),\n  true, // npmGlobalStyle\n  expect.any(Function)\n);\n```\nOf course, this means our BootstrapCommand/basic fixture (or a new, hoist-focused variant) needs a non-hoistable external dependency in one of its packages.. I think we can just replace --skip-temp-tag with --use-temp-tag, since we're breaking the default behaviour anyway. Even if --skip-temp-tag is passed, it won't matter because that's what we'll be doing anyway.\nThe description of the flag would be similar to the existing docs, but slightly tweaked:\n\n--use-temp-tag\nWhen passed, this flag will alter the default publish process by first publishing all changed packages to a temporary dist-tag (lerna-temp) and then moving the new version(s) to the default dist-tag (latest).\nThis is not generally necessary, as Lerna will publish packages in topological order (all dependencies before dependents) by default.\n. --use-temp-tag scans a little better, here. Since it's a boolean option, you don't need to provide an explicit default: false since that's what happens anyway when the option is omitted.. I'd prefer to reverse this ternary, for clarity.\njs\nconst tag = this.options.useTempTag ? \"lerna-temp\" : this.getDistTag();. These lastCalledWith()s should be replaced by a expect(addedDistTagInDirectories(testDir)).toMatchSnapshot(\"[normal --use-temp-tag] npm dist-tag add\"); assertion.. This snapshot should be replaced by \nexpect(publishedTagInDirectories(testDir)).toMatchSnapshot(\"[independent --canary --npm-tag=next --yes --exact] npm publish --tag\");. Likewise with the other snapshots that have turned into empty objects, those aren't very useful and should be replaced by publishedTagInDirectories() where it makes sense.. While I was at it, I converted all the integration tests to async/await.. I made the No tags found! part of the message an actual warning, so it jumps out. No functional change.. I tried to resist it, but I organized all of the imports in every file, first grouped by source (dependency or local), then alphabetized(ish, in this case).. This is the npmlog default, and I didn't want to squash it during tests (where it is globally silenced).. These are actually errors, and should be logged as such.. Actually, GitUtilities.isInitialized() should already be passed this.execOpts, since this.repository.rootPath === this._execOpts.cwd \ud83d\ude2d \n(so, uh, that's a gaping hole in our unit tests that I caused). How about a few simple tests for get .execOpts in test/Command.js instead? The .toposort tests are a good model, and they would be more contextually relevant in that file.\nBasically, adding this test to ImportCommand is implying that only ImportCommand respects it, which is clearly not the case.. That being said, it is clearly important to ensure that ImportCommand is mixing this.execOpts into this.externalExecOpts correctly. (no mocking of ChildProcessUtilities.execSync() required)\n```js\nconst ONE_HUNDRED_MEGABYTES = 1000 * 1000 * 100;\nconst importCommand = new ImportCommand([externalDir], {\n  maxBuffer: ONE_HUNDRED_MEGABYTES,\n}, testDir);\n// runCommand() then...\nexpect(importCommand.execOpts).toHaveProperty(\"maxBuffer\", ONE_HUNDRED_MEGABYTES);\nexpect(importCommand.externalExecOpts).toHaveProperty(\"maxBuffer\", ONE_HUNDRED_MEGABYTES);\n``. Minor nit, but I wouldn't mind a newline above this inner conditional block, it helps readability. Discovered during the writing of new integration tests, without this explicittypeone could cause a mangling of the arguments passed in by innocently re-ordering them. Obviously not very ideal.. we should definitely break lint when something likeit.onlyis committed.... I'd rather this was some sort of class property optionally overridden (kinda like theotherCommandConfigs()getter) when a command requires git. The base class hasget requiresGit() { return true; }, and various commands that don't need git can opt-out by overriding the getter method.. I think we can just skip straight to theJSON.parse(consoleOutput())snapshot, as we really shouldn't be testing whether or notJSON.stringify()is working correctly.. This isn't necessary, actually, as all logging is emitted tostderrand only the JSON string is emitted tostdout. When you pipe the output, it only includesstdout` (unless you do fancy stdio redirects, of course).\nIt's too bad I didn't write a lerna ls integration test that could demonstrate this :/. This default is implicit for boolean options.. Let's move the json option descriptor into LsCommand and UpdatedCommand directly. It's an acceptable amount of duplication to maintain the benefit of targeted, relevant --help output. The description could be shorter, like \"Show information in JSON format\". (when in doubt, i copy npm's docs). They both use the same underlying utility, so the UpdatedCommand unit test is sufficient validation.. I appreciate this desire, and I use the -- pattern all the time with npm scripts, but I don't think it's appropriate here. The original command isn't that long or complicated, and despite a counterexample just two lines below this (\"fix\"), I'd rather not create another nested npm subprocess for a persistent, long-running command.. Definitely prefer a library method instead of require.. newlines are our friends. How do you pass multiple flags to --npm-client-args?. This needs to be defined for yargs in the builder export of BootstrapCommand.\nEven better, why not just accept all args after a -- to lerna bootstrap to be passed to the client execution?\nlerna bootstrap -- --ignore-engine --silent\nTo pass it via lerna.json, you'd need to pass an array of strings instead of a string:\njson\n\"npmClientArgs\": [\"--ignore-engine\", \"--silent\"]. Unfortunately that's not how execa works, you need to pass an array of arguments (or push multiple, in this case) if there are multiple arguments.. bootstrap is currently the only place we alternate on the value of npmClient, and it seems cleaner that way (supporting multiple arguments properly without re-implementing yargs, for example). This needs a npm-client-args config in the builder object above. Specifically, using this block starting at line 12:\n```js\nexport function handler(argv) {\n  return new BootstrapCommand([...argv.npmClientArgs], argv).run();\n}\nexport const command = \"bootstrap [npm-client-args..]\";\n```\nThis pattern is used in lerna exec (and run): https://github.com/lerna/lerna/blob/master/src/commands/ExecCommand.js#L8\nThus you can alias a collection of all unparsed positional arguments, as well as unparsed remainders behind --.\nlerna bootstrap --scope foo -- --bar\nlerna bootstrap --hoist -- --no-optional\nIt should still be retrievable from this.options.npmClientArgs, but it's also always present as an array (which might be empty).. Is --no-bail also supported? It might be more useful to test that variant here, instead of the default which we should trust yargs has already dealt with as we configured it (and all of our other \"intentional failure\" tests confirm).. This temporary dist-tag strategy was actually inverted recently, which means that by default we do not publish to the lerna-temp dist-tag first. Looks like we forgot a part of the docs to update!\nI think we could make this much easier to read by entirely removing the outer list, so all that remains is the inner numbered list, which you should probably un-indent so Github doesn't try to get too fancy with it.. Oh, and remove this temporary dist-tag blurb, while you're at it.. I'd say we should replace 7 with 8, no reason to test 7 anymore.. We also need an integration test that doesn't employ the npmClientArgs key in lerna.json (using the BootstrapCommand/basic fixture, for example). I'm pretty sure that fails right now, as is.. I don't think we need to write a file, just console.log the argv and assert on the command's stdout.. How about we just exit early here, instead of proceeding to the execute() phase after batching an empty array?\nreturn callback(null, false);. Per #887, we definitely need to pass false as the second argument to callback(), here. Otherwise it seems we attempt to make a git commit on no changes, and that's just wrong.. We test yargs usage in the integration tests, not unit tests. I've often thought of writing an arg bootstrapper to streamline this.. ugh, this noise really bothers me, should be fixed upstream.\nGlad you figured it out, all the same. :). My biggest frustration with this pattern is the disconnect between the dash-case options config and this camelCase defaults object. Again, glad it can be worked around, but squirmy about the solution.. Ideally, this would be the approach used for all unit tests of commands. The .run() method really needs to return a Promise, already... (out of scope for this PR, clearly). My only complaint with this usage is that it isn't as readable as lerna exec --only-updated. The nature of the beast, I suppose. (Aliases that are distinct long options are a bit awkward, and probably better to omit entirely).. I'm not sure why cross-env is necessary in this example? Also, the env var needs to be escaped (\\$LERNA_ROOT_PATH) to be resolved properly, as in the previous npm view example.. This should be this.repository.rootPath, it isn't always the case that a lerna command is run from the same location as lerna.json.. Yes, I think this would be a great example to reference when raising this upstream, which I also think would be a good idea.. I was noodling about using yargs' config() method (as described here) with the parsed lerna.json stuff, and it's certainly more elegant (and in practice the same idea as you propose).\nThe chicken & egg problem strikes us here, because the arg parsing (as currently constructed) has already finished by the time we read lerna.json and filter the command-specific durable config, etc. We should probably extract that chunk (config resolution and filtering) anyway, but it's a bit complex to contemplate.. I think this would be clearer as --use-workspaces, with the long-term goal of making it client-independent.. I don't think this is an appropriate place to whitelist commands; that's an implementation detail if workspaces are enabled at all. In this PR alone there's already an implicit \"ls\" member in this array, and that's not very clear. The useWorkspaces (the camelization of --use-workspaces) value should be a boolean.. This isn't sufficient because it doesn't pick up any potential --use-workspaces flag in the CLI args, only the \"durable\" config from a lerna.json (mostly equivalent to the relationship of yarn to a .yarnrc file, CLI flags always supersede the lerna.json values).. No symlinking happens in this case? Or is that handled by Yarn now? (I dug through https://github.com/yarnpkg/yarn/issues/3294 but my eyes glazed over before I could figure it out, sorry). Awesome, thanks for the explanation!. Whoops, I can fix momentarily.. A Set seems reasonable here, although out of scope for this PR.. This technically passes, but is incorrect. I need to fix this upstream. In the mean time, I will parse the test failures and merge stuff that passes everything else.\nYou'll want to remove the changes to this file so your PR doesn't conflict with the fixes I make in master.. We should provide a message to showHelpOnFail():\njs\n    .showHelpOnFail(false, \"Pass --help to see all available commands and options\")\nThe existing demandCommand() usage should also include a message, to account for cases when lerna is called without arguments.\njs\n    .demandCommand(1, \"A command is required\"). Messing around locally, without the extra \"A command is required\" message to demandCommand(), I was getting less-than-useful feedback like Unknown argument: nope.. Yes, thank you!. We should only allow --preid, like the semver cli. Oh, interesting, this is much better than a static whitelist.. This TODO seems satisfied? (but the one below is not). These are great tests, what happens when you bump a non-canary prepatch with another prepatch?\nI would expect 1.0.0-beta.0 bumps to 1.0.0-beta.1, but I don't see any tests to that effect.. I prefer the ordering in the other PR, patch -> minor -> major. I agree, that's a better name. Yep, your PR's loop-generated string is preferable here.. Hah, I learned something! That makes sense.. This needs to be called after ensureLernaJson, otherwise this.repository.lernaJson might not exist.. We don't need to check this, mkdirp is just a no-op on directories that already exist.\nIt's important to run this after this.ensureLernaJson() because we need to iterate through this.repository.packageConfigs and create every glob parent directory (using glob-parent) present.\n```js\n// at top of file\nimport fs from \"fs-extra\";\nimport globParent from \"glob-parent\";\n// in method\nthis.repository.packageConfigs\n  .map(pkgGlob => globParent(pkgGlob))\n  .forEach(pkgRoot => fs.ensureDirSync(pkgRoot));\n```\nThere's currently no FileSystemUtilities.mkdirpSync, and I'd rather not bother for such a one-off. Which makes testing awkward in the current mock-happy situation... ugh. We don't need this, it was only ever used once and with the new packageConfigs loop we don't ever use it.. With the packageConfigs loop, we'll need to test multiple globs, too.. I guess FileSystemUtilties.mkdirpSync() is justified, even for a one-off:\n```diff\ndiff --git a/src/FileSystemUtilities.js b/src/FileSystemUtilities.js\nindex e1a4b05..86bff7a 100644\n--- a/src/FileSystemUtilities.js\n+++ b/src/FileSystemUtilities.js\n@@ -27,6 +27,11 @@ export default class FileSystemUtilities {\n     fs.ensureDir(filePath, callback);\n   }\n\nstatic mkdirpSync(filePath) {\nlog.silly(\"mkdirpSync\", filePath);\nfs.ensureDirSync(filePath);\n\n}\n+\n   static readdirSync(filePath) {\n     log.silly(\"readdirSync\", filePath);\n     return fs.readdirSync(filePath);\ndiff --git a/test/FileSystemUtilities.js b/test/FileSystemUtilities.js\nindex e7b4c5d..b40ac2f 100644\n--- a/test/FileSystemUtilities.js\n+++ b/test/FileSystemUtilities.js\n@@ -39,6 +39,14 @@ describe(\"FileSystemUtilities\", () => {\n     });\n   });\n\n\ndescribe(\".mkdirpSync()\", () => {\n\nit(\"calls fs.ensureDirSync\", () => {\nconst dirPath = \"mkdirpSync/test\";\nFileSystemUtilities.mkdirpSync(dirPath);\nexpect(fs.ensureDirSync).lastCalledWith(dirPath);\n});\n});\n+\n   describe(\".readdirSync()\", () => {\n     it(\"calls fs.readdirSync\", () => {\n       const dirPath = \"readdirSync-test\";\n``. I don't think you chose the right merge resolution here.. Also, you should be usingyarn, not npm 5. That's the reason your builds are failing.. These files definitely should not have been deleted.. None of these test fixtures need the explicitnode_modulesthat were moved under this path.. hah, thanks!. Yeah, just updating the snapshots should be sufficient here.. As I understand it, we want to ensure that a given set of lifecycle scripts finishes in a package before any dependent packages start their prepublish+ lifecycles. SoPackageUtilities.runParallelBatches` is definitely appropriate here. I'm not the sharpest with the async loops, but what you describe sounds like the right approach.\n\nIn any case, lots of testing!. Actually, this.execScript is used for executing custom, non-npm lifecycle scripts that are just .js files living in a package-local scripts directory. They're a lerna-specific extension that allows you to do things outside the normal npm lifecycles. Admittedly, not something I use, but largely inherited from the babel project.\nI don't think we should extend this artificial pattern to the extra names, they're just arbitrary and never called during the normal npm publish lifecycles. npm publish is being called (in topological order) in NpmUtilities.publishTaggedInDir and it should automatically handle running the various lifecycles where appropriate, I think.\npackage-foo/\n - package.json\n - scripts/\n    - prepublish.js\n    - postpublish.js\n - src/\n    - index.js. We still support node v4, so we can't use Array#includes(). Can probably just restore the previous .some() iterator, or maybe just a plain old if (cdVersionOptions.indexOf(choice) === -1) { ? Not as fancy, but should get the job done.. Is this TODO still valid?. Yep!. It seems like --preid, in this case, should possibly be able to provide an override (or fallback?) for the existingId above. It wouldn't skip the prompt, I don't think, unless they pass --yes.\nIn any case, let's leave the TODO and address it later (dunno how useful it would be, really). \"should not link when options.semverIgnore is false\" ? I think this case is handled, anyway, with the other linking tests that have non-matching semver.. I know this is copypasta, but let's at least customize the name to match the directory.. So how does this get mismatched in the first place? If you did a lerna publish choosing prerelease, that should have also bumped package-2's version and its dependency on package-1. Also, it would have bumped the patch, since 1.0.0-alpha.x will always be \"less than\" 1.0.0.. I would lean toward removing it, as it's not really necessary to prove a negative.. This is the actual fix. The rest is just window-dressing so I could actually make the existing tests fail correctly.. When is this.repository.lernaJson.version ever falsey?. This isn't a map(), you don't need to return anything here (nor a couple lines above).. I'd rather the assertions be done in the test case itself, not the helper functions.\nAlso, in this context, testing stderr is just repetitive noise that doesn't need testing.. Just return await Promise.all([ ... here and do the destructuring and assertions in the test case, please.. Thanks!. We should be able to use dedent for this multi-line message. I'd also appreciate if this logic was extracted into a private instance method like this._logPackageError(err);. I love this refactoring!. I don't think this property is necessary?. I believe this getter is not necessary, since you're not mixing in any defaults from the parent class.. Would you updating this to the new pattern here?. The test needs to be updated to support the yargsRunner pattern:\n```js\nimport yargsRunner from \"./helpers/yargsRunner\";\n// file under test\nimport * as commandModule from \"../src/commands/LinkCommand\";\nconst run = yargsRunner(commandModule);\n```\nThe test case itself becomes much more compact:\n```js\n  describe(\"with local package dependencies\", () => {\n    beforeEach(stubSymlink);\n    afterEach(resetSymlink);\nit(\"should symlink all packages\", async () => {\n  const testDir = await initFixture(\"LinkCommand/basic\");\n  const lernaLink = run(testDir);\n  await lernaLink();\n\n  expect(symlinkedDirectories(testDir)).toMatchSnapshot();\n});\n\n});\n```\nThanks!. oh, yeah, please don't change this? It's being held back for a reason (I haven't had time to figure out why jest 20+ breaks). This should read\nand you are not on the branch `master`, lerna will prevent you from publishing.\nTo force a publish despite this config, pass the `--allow-branch` flag:\nand so on. Should be able to use dedent with multi-line template strings, here.. It now has them, thank you! (you can delete this empty test case, if you want). I thought execa automatically trimmed stdout?. This snapshot label should be stderr: canary default version, looks like copy+paste oversight.. I'd appreciate if the array of args was spread one-per-line for readability, thanks.. Thanks for extracting this method :). Please put newlines before the fs.writeFile() bits so the logical steps are a bit easier to follow, thanks.. Array.prototype.push() actually returns the new length value, not the array pushed into. The reduce callback will need to be slightly longer (returning pkgs after pushing into it), and I don't think you'll need the .join(', '), as the logger handles displaying arrays across multiple lines fairly well.. Indeed, good call!. These newlines are significant (and mostly consistent across the other test files), please keep them.. Pretty sure expect.any(Function) should work here? Or is this Jest 19 (not upgraded yet for reasons) biting us again?. That\u2019s true. I forgot that almost everything in publish is synchronous, unlike bootstrap where parallelism is important.. These aren't going to be very common, and should be documented separately (perhaps after --use-workspaces). Putting them here just confuses beginners.. let's spread these dependencies across multiple lines, just like npm formats it.. stray newline. useGitVersion should be referenced from this.options, which supports CLI flag overrides.\nThat being said, if --use-git-version requires --exact, we should throw an error here.. Triple backticks are meaningless in JS, just use a dedent-tagged template literal for a multiline string. (example). (and really, just copy that example's throwing, don't worry about an explicit this.logger.error call). Why can't this just be const parser = new GitVersionParser(\"\"); at the beginning of the describe block? Surely there's no internal statefulness that would require a fresh instance for every test case.... These stubs can be much more succinct:\njs\nserialize: jest.fn((pkg) => pkg),. expect(mockSerializer.deserialize).toBeCalled();\n(when only called 0 or 1 times, this is generally sufficient as an assertion). expect(mockSerializer.deserialize).toBeCalledWith(pkg._package);\nWe only dig into the guts of the mock when picking out non-continuous parameters (and we shouldn't be doing it as much as we do, tbh). expect(mockSerializer.serialize).not.toBeCalled();. For clarity, please include the original assertion, but negated:\njs\nexpect(pkg.toJSON()).not.toBe(pkg._package);\nexpect(pkg.toJSON()).toEqual(pkg._package);. hah whoops, thanks. woohoo!. This might as well be a function declaration instead of an expression, since you've no use for the lexical scope an arrow function would provide.\nAlso, fancy default parameters can refer to other (previously listed) parameters!\njs\nfunction createPackages(version, dependencyVersion = version) {. expect(mockParser.parseVersion).toHaveBeenCalledTimes(2);. This looks like a copy+paste error? Not sure why deserialize is being tested inside describe(\"serialize\") block.. When does this ever happen? Just being defensive?\n(It seems strange to assign the versionSerializer multiple times). I'd prefer the version parser be instantiated outside of the getPackageGraph() arguments, this ternary initially made me think you had forgotten the closing paren. Also, the version parser could be reused in the subsequent version serializer loop.\n```js\nconst { useGitVersion, gitVersionPrefix } = this.lernaJson;\n// FIXME: should be destructured from command.options to support CLI flag overrides\nconst versionParser = useGitVersion && new GitVersionParser(gitVersionPrefix);\nconst packages = PackageUtilities.getPackages(this);\nconst packageGraph = PackageUtilities.getPackageGraph(packages, false, versionParser);\nif (useGitVersion) {\n  packages.forEach((pkg) => {\n    pkg.versionSerializer = new VersionSerializer({\n      monorepoDependencies: packageGraph.get(pkg.name).dependencies,\n      versionParser,\n    });\n  });\n}\n``.graphDependenciessounds clearer to me, here. It's not the dependencies of the entire monorepo, after all.. Can we move thiscloneDeepinto the version serializer methods? It seems overly defensive for the non-serialized case.. We should pass an options object derived fromthis.optionswhen it is called from [Command.js](https://github.com/lerna/lerna/blob/5ea7e2d9a216bb2274e217401eb47db8661f6068/src/Command.js#L306) and use those properties instead ofthis.lernaJson. This allows us to support CLI flags (--use-git-version,--git-version-prefix`) and eventually argument validation with yargs.\n```diff\ndiff --git a/src/Command.js b/src/Command.js\nindex e5bb0c4..032cd01 100644\n--- a/src/Command.js\n+++ b/src/Command.js\n@@ -288,7 +288,7 @@ export default class Command {\n   }\nrunPreparations() {\n-    const { scope, ignore, registry, since } = this.options;\n+    const { scope, ignore, registry, since, useGitVersion, gitVersionPrefix } = this.options;\n if (scope) {\n   log.info(\"scope\", scope);\n\n@@ -303,7 +303,7 @@ export default class Command {\n     }\n try {\n\n\nthis.repository.buildPackageGraph();\nthis.repository.buildPackageGraph({ useGitVersion, gitVersionPrefix });\n       this.packages = this.repository.packages;\n       this.packageGraph = this.repository.packageGraph;\n       this.filteredPackages = PackageUtilities.filterPackages(this.packages, { scope, ignore });\n``\n(Sorry for the scattered review). (the same stuff in various tests is fine on one line). Yes, please.. Despite.toJSON()` currently being used only in one place, I think you've raised some good points that will ultimately help future use cases (such as when I actually get around to refactoring lerna into a lerna-managed monorepo and the Package class is exposed in a package of its own). I was being overly-cautious about performance in a place where it really, really doesn't matter (package.json files aren't particularly large, and not deeply nested at all).\n\nThanks for the clear explanation. :). Yeah, I totally understand the mixed feelings. I have them myself, about the Repository class in general. It's doing too many disparate things for my taste, but it's been low on the priority list to refactor...\nSo: It occurs to me that Repository itself shouldn't be storing packages and packageGraph in getters since there are literally two places in the entire codebase that they are referenced:\n1. in Command, right after the buildPackageGraph() is called\n2. in UpdatedPackagesCollector, where it violates separation of concern by reaching into (sub-)properties of the command instance just to retrieve mostly-static (i.e., unchanging) values.\nHere's what we can do: Move the creation of both the packages list and the packageGraph into Command, where it belongs, and completely remove the get packages and get packageGraph from Repository.\nThis means all the additional logic added here will be contained inside the place where this.options already exists. Something like this:\n```diff\ndiff --git a/src/Command.js b/src/Command.js\nindex 58659bb..aa4bc7f 100644\n--- a/src/Command.js\n+++ b/src/Command.js\n@@ -294,7 +294,8 @@ export default class Command {\n   }\nrunPreparations() {\n-    const { scope, ignore, registry, since } = this.options;\n+    const { rootPath, packageConfigs } = this.repository;\n+    const { scope, ignore, registry, since, useGitVersion, gitVersionPrefix } = this.options;\n if (scope) {\n   log.info(\"scope\", scope);\n\n@@ -309,10 +310,22 @@ export default class Command {\n     }\n try {\n\n\nthis.repository.buildPackageGraph();\nthis.packages = this.repository.packages;\nthis.packageGraph = this.repository.packageGraph;\nthis.filteredPackages = PackageUtilities.filterPackages(this.packages, { scope, ignore });\nconst versionParser = useGitVersion && new GitVersionParser(gitVersionPrefix);\nconst packages = PackageUtilities.getPackages({ rootPath, packageConfigs });\nconst packageGraph = PackageUtilities.getPackageGraph(packages, false, versionParser);\n+\nif (useGitVersion) {\npackages.forEach((pkg) => {\npkg.versionSerializer = new VersionSerializer({\ngraphDependencies: packageGraph.get(pkg.name).dependencies,\nversionParser,\n});\n});\n}\n+\nthis.packages = packages;\nthis.packageGraph = packageGraph;\n\nthis.filteredPackages = PackageUtilities.filterPackages(packages, { scope, ignore });\n// The UpdatedPackagesCollector requires that filteredPackages be present prior to checking for\n   // updates. That's okay because it further filters based on what's already been filtered.\ndiff --git a/src/Repository.js b/src/Repository.js\nindex 8316083..7f1e138 100644\n--- a/src/Repository.js\n+++ b/src/Repository.js\n@@ -8,7 +8,6 @@ import semver from \"semver\";\n\n\nimport dependencyIsSatisfied from \"./utils/dependencyIsSatisfied\";\n import Package from \"./Package\";\n-import PackageUtilities from \"./PackageUtilities\";\nconst DEFAULT_PACKAGE_GLOB = \"packages/*\";\n@@ -67,22 +66,6 @@ export default class Repository {\n       .map(parentDir => path.resolve(this.rootPath, parentDir));\n   }\n\nget packages() {\nif (!this._packages) {\nthis.buildPackageGraph();\n\n}\n\nreturn this._packages;\n\n}\n\nget packageGraph() {\nif (!this._packageGraph) {\nthis.buildPackageGraph();\n\n}\n\nreturn this._packageGraph;\n\n}\nget packageJson() {\n     if (!this._packageJson) {\n       try {\n@@ -117,11 +100,6 @@ export default class Repository {\n     return this.version === \"independent\";\n   }\n\n\nbuildPackageGraph() {\n\nthis._packages = PackageUtilities.getPackages(this);\nthis._packageGraph = PackageUtilities.getPackageGraph(this._packages);\n\n}\n   hasDependencyInstalled(depName, version) {\n     log.silly(\"hasDependencyInstalled\", \"ROOT\", depName, version);\n\ndiff --git a/src/UpdatedPackagesCollector.js b/src/UpdatedPackagesCollector.js\nindex 67d8ba5..5e51b60 100644\n--- a/src/UpdatedPackagesCollector.js\n+++ b/src/UpdatedPackagesCollector.js\n@@ -31,7 +31,7 @@ export default class UpdatedPackagesCollector {\n     this.logger = command.logger;\n     this.repository = command.repository;\n     this.packages = command.filteredPackages;\n-    this.packageGraph = command.repository.packageGraph;\n+    this.packageGraph = command.packageGraph;\n     this.options = command.options;\n   }\ndiff --git a/test/Repository.js b/test/Repository.js\nindex 1c21bfc..8b01475 100644\n--- a/test/Repository.js\n+++ b/test/Repository.js\n@@ -142,32 +142,6 @@ describe(\"Repository\", () => {\n     });\n   });\n\ndescribe(\"get .packages\", () => {\nit(\"returns the list of packages\", () => {\nconst repo = new Repository(testDir);\nexpect(repo.packages).toEqual([]);\n\n});\n\nit(\"caches the initial value\", () => {\nconst repo = new Repository(testDir);\nexpect(repo.packages).toBe(repo.packages);\n});\n\n});\n\ndescribe(\"get .packageGraph\", () => {\nit(\"returns the graph of packages\", () => {\nconst repo = new Repository(testDir);\nexpect(repo.packageGraph).toBeDefined();\nexpect(repo.packageGraph).toHaveProperty(\"nodes\", []);\nexpect(repo.packageGraph).toHaveProperty(\"nodesByName\", {});\n\n});\n\nit(\"caches the initial value\", () => {\nconst repo = new Repository(testDir);\nexpect(repo.packageGraph).toBe(repo.packageGraph);\n});\n\n});\n   describe(\"get .packageJson\", () => {\n     afterEach(() => {\n       readPkg.sync = readPkgSync;\n ```\n\n. we don't need this, just pass args on the CLI: yarn jest --watchAll --no-watchman. When is an error ever a literal string? This smells irrelevant to this PR.. please follow the existing style, space after keywords and before opening brace (if (...) {). Also, hard-coding packages is not appropriate here, as there could be multiple package locations that have any arbitrary directory name. We need to determine why Windows sometimes gives us absolute paths for the location property of Package objects, as passed in UpdatedPackagesCollector.. If the line is too long, the argument array should be spread across multiple lines.. The \"Branch merged\" commit is no longer imported into the target repo? That doesn't seem right.. This is definitely not correct. We're testing that the conflicted file was imported into the target repo, here.. literally not the test, please revert this entire file.. yarn jest calls the jest cli installed in local node_modules, actually. npx jest does the same thing in npm5.\nAlternatively, npm test -- --watchAll --no-watchman will do the same thing, using any version of npm.\nWe have a yarn.lock file, which implies we use yarn to manage our dependencies. As such, that means yarn is used to run scripts and such (most npm commands still work).\nWe should update the contributing guide, sorry for the confusion.. Thanks for this! I was hoping to get away from the brittle localized snapshots eventually, but this is a good addition regardless.. I can't believe we forgot to log the error \ud83d\ude05 . I'm a little leery of adding this flag to all executions of git commit. I have no idea how common GPG signing of commits is, although I definitely appreciate your reasoning.\nI'm okay with taking this now, but we'll have to note this very well in the changelog and be open to the possibility that we may need to revert it (or put it behind an option) in the future.. This was already fixed in https://github.com/lerna/lerna/pull/1059/files#diff-84077e6291e8b6b2a596aff7f258b0dd, but the PR view doesn't seem to incorporate those changes.\nI like your unit test, but you need to rebase and remove this block before I can merge it.. Does it require --flatten to skip the empty commits? The code (here or in #1059) doesn't seem to imply this.. The previous assertions about which git utilities are called is relevant to this test, but I don't think the publishedTagInDirectories snapshot is needed here (it's tested elsewhere).. Unless there is some sort of interaction between --skip-git-push and --skip-npm, I'm not sure how important this test case is. We've already established what --skip-npm does, after all, and --skip-git-push doesn't change anything about that?. When adding a toMatchSnapshot() in a test, it is appropriate to commit the update to the snapshot file.\nHowever, in this case, as I mentioned in the test above, I don't think this snapshot is necessary (it's almost verbatim from another snapshot).. I must admit my gut-reaction to this PR was \"this is going to be abused and it will cause far more damage than it is worth.\" Let me explain.\nLerna's core value proposition, from my perspective, is that it handles the boring, repetitive, but necessary steps of managing multiple npm packages according to community best-practices. One of those best-practices is that (if you're managing the version field in source control) you should always push the version bump commit and git tag to origin after calling npm publish. npm does not force you to do this, but it is nonetheless important to keep public git history consistent with public npm registry state.\nUntil we get to a place where lerna's internals are properly modularized and published as separate packages, I'm very reticent to add a footgun like this to address a perplexing CI requirement. If you've already accepted that a CI process will be injecting commits into your public history, what can't you accomplish with the current all-in-one approach? Adding generated changelogs to the commit?. How about instead we just add --update to the git add command? It's been around for almost ten years, and disallows adding new files (silently ignoring ignored files), which is okay since we're never adding new files anyway when publishing.\nI'd rather not do a bunch of extra calls to git when all we need to do is add an extra flag to an existing call.. Hah, awesome!. I probably would have combined this into one compound conditional (this.options.conventionalCommits && !this.repository.isIndependent()), but I am okay with this.. Thanks for the additions here, I hope we can stop skipping these tests soon.... Can we rename this --force-local, please? Even though it does ignore semver, in practice, I don't want to implicitly condone ignoring semver. It's pure semantics, yes, but I think --force-local better describes what is actually being accomplished, rather that how it is implemented.\nAlso, for boolean CLI options, it's not necessary to pass a value:\nsh\n$ lerna link --force-local\n(omitting the flag entirely is the equivalent of false, the default). Can you label the false please? I dislike long lists of arguments with sudden literals in the middle.\ndiff\n+const forceLocal = false;\nconst { filteredPackages, packageGraph, logger } = this;\n-PackageUtilities.symlinkPackages(filteredPackages, packageGraph, logger, false callback);\n+PackageUtilities.symlinkPackages(filteredPackages, packageGraph, logger, forceLocal, callback);. Renaming to --force-local, a better description would be\ntxt\nWhen passed, this flag causes the `link` command to always symlink local dependencies regardless of matching version range.. I'd prefer the \"pre\"-lifecycles be defined before their corresponding \"base\" lifecycle. All the other changes in this file are fine, just move preintegration back above integration, please.. Please move this first log.silly above the execSync call (but obviously after the formattedLocation initialization).. Thanks for adding these!. We also need to support arbitrary 3rd-party packages, too. If --hoist is enabled, the external dependency should be installed in the root package.json first.\nGuarding against installing a local dependency inside itself is good.. spaces are nice. What is argv.script here?. Command subclasses don't need constructors, it's all handled in the superclass.. Is it really necessary to add JSONFile? You should be using write-pkg, an existing dependency, to write the package.json back to disk, as it already handles alphabetizing the updated (dev-)dependencies.\nIf you use read-pkg instead of reading the string, you can just merge applicable into the targeted dependencyType and write it back without testing, since the serialization is always alphabetized anyway.\n```js\nconst manifestJson = readPkg.sync(manifestPath, { normalize: false });\nconst manifestDeps = manifestJson[dependencyType] || {};\n// overwrite updated dependencies\nmanifestJson[dependencyType] = {\n  ...manifestDeps,\n  ...applicable,\n};\nwritePkg.sync(manifestPath, manifestJson);\n``. Ah, I see why theconstructoris there. Actually, you don't needthis.flags, you can usethis.optionsto merge the updated scope onto.this.cwdshould bethis.repository.rootPath, which is equivalent for the purposes of calling another command.. Wondering why notconst pkg = this.getPackage(name);here?. This and the body ofpackageExists()seems to wishthis.packageswas aMap()`...\n...or maybe Set()<Package>? Noodling for higher-level refactoring, no worries in this PR.. These are brilliant tests, thanks!. should be dependencyType. I go cross-eyed typing \"dependency\" a lot \ud83d\ude2d . Given the current functionality, I'm not sure we need any more integration tests beyond the first. (variations based on args and whatnot are already covered in unit tests). (it occurs to me that the --hoist behaviour is already dealt with by calling bootstrap at the end of execute, as long as we are also passing along this.options instead of the flags). Oh, interesting! We should probably address this disparity in the future.. Revert this, and remove all the lib/* files you've added in this PR. They are build output, and never under version control.. I love the extracted functions, so much easier to read the flow of the program!. TIL: entries is an alias for toPairs. Vastly prefer this map/reduce chain to the previous imperative list creation.. This will change file permissions of source-controlled files, yes? I agree it's the right thing to do, but I'm worried people will be surprised by lerna bootstrap potentially resulting in a dirty working tree (because their code was broken in the first place).\n...eh, I'm fine with it. Let this be a lightning rod for future generations of CLI writers that quixotically resist setting their bin files as executable. \ud83e\udd37\u200d\u2642\ufe0f . If the source file doesn't exist, shouldn't we throw an error? #1090 illustrates a potential problem with attempting to symlink sibling bins that are based (incorrectly, imo) on transpiled output, which isn't generally present yet at this phase of the lerna bootstrap process.\nAlternatively, if it doesn't exist, shouldn't we completely avoid adding another job to the queue?\n``js\nif (FileSystemUtilities.existsSync(src)) { // could evenfilter()this beforereduce()`\n  acc.push((cb) => async.series([link, chmod], cb));\n}\nreturn acc;\n```\nI dunno. Kinda leaning toward throwing an informative error when the symlink source doesn't exist.. whoops, remove the .only here\nnote to self: should really lint that :/. Should probably name this finish to avoid shadowing the inner action cb parameters.. You'll want to pass { normalize: false } to be consistent with read-pkg usage elsewhere.\n(normalizing doesn't hurt in this case, just inconsistent). Fancy!. Is this empty block necessary? Not sure what options.check was supposed to enable.. We can use fs.accessSync here, which is easier to read (and handles the win32 exception for us!):\n``js\n    // constants directly onfs` export were soft-deprecated in node v6.3.0\n    // on windows, it just checks if the file is present, not executable-ness\n    const mode = (fs.constants || fs).X_OK;\nconst failed = files.filter(file => {\n  let isExecutable;\n\n  try {\n    fs.accessSync(path.join(pkg.location, file), mode);\n    isExecutable = true;\n  } catch() {}\n\n  return !isExecutable;\n});\n\n``\n.matchExecutableFile. This needs to be behind an option,--stream, just like [RunCommand does](https://github.com/lerna/lerna/blob/master/src/commands/RunCommand.js#L18-L23). Otherwise, it's a breaking change, and I'd like to avoid that.. This is only used a handful of places (compared to theexecOptshelper), just inline theexpect.objectContaining()call.. This should be in a separate test case (it()) in both modes to preserve the default cases. It only needs to assert one call, and none of the snapshots, of the existing--conventional-commits` tests.\n```patch\ndiff --git a/test/PublishCommand.js b/test/PublishCommand.js\nindex c6d14eb8..ae0e8dde 100644\n--- a/test/PublishCommand.js\n+++ b/test/PublishCommand.js\n@@ -905,6 +905,33 @@ describe(\"PublishCommand\", () => {\n           });\n         });\n       });\n+\n+      it(\"accepts --changelog-preset option\", () => {\n+        return run(testDir)(\n+          \"--conventional-commits\",\n+          \"--changelog-preset\",\n+          \"foo-bar\"\n+        ).then(() => {\n+          const name = \"package-3\";\n+          const version = \"3.0.0\";\n+          const location = path.join(testDir, \"packages\", name);\n+\n+          expect(ConventionalCommitUtilities.recommendIndependentVersion).toBeCalledWith(\n+            expect.objectContaining({ name, version }),\n+            expect.objectContaining({\n+              cwd: testDir,\n+              changelogPreset: \"foo-bar\",\n+            })\n+          );\n+          expect(ConventionalCommitUtilities.updateIndependentChangelog).toBeCalledWith(\n+            expect.objectContaining({ name, location }),\n+            expect.objectContaining({\n+              cwd: testDir,\n+              changelogPreset: \"foo-bar\",\n+            })\n+          );\n+        });\n+      });\n     });\n describe(\"fixed mode\", () => {\n\n@@ -960,6 +987,33 @@ describe(\"PublishCommand\", () => {\n           );\n         });\n       });\n+\n+      it(\"accepts --changelog-preset option\", () => {\n+        return run(testDir)(\n+          \"--conventional-commits\",\n+          \"--changelog-preset\",\n+          \"baz-qux\"\n+        ).then(() => {\n+          const name = \"package-5\";\n+          const version = \"1.0.0\";\n+          const location = path.join(testDir, \"packages\", name);\n+\n+          expect(ConventionalCommitUtilities.recommendFixedVersion).toBeCalledWith(\n+            expect.objectContaining({ name, version, location }),\n+            expect.objectContaining({\n+              cwd: testDir,\n+              changelogPreset: \"baz-qux\",\n+            })\n+          );\n+          expect(ConventionalCommitUtilities.updateFixedChangelog).toBeCalledWith(\n+            expect.objectContaining({ name, location }),\n+            expect.objectContaining({\n+              cwd: testDir,\n+              changelogPreset: \"baz-qux\",\n+            })\n+          );\n+        });\n+      });\n     });\n});\n```\n. Thanks for catching this missing indent!. Let's make this a lazy getter, so we only have to merge the options once:\n```patch\ndiff --git a/src/commands/PublishCommand.js b/src/commands/PublishCommand.js\nindex 9edf8ad5..65222478 100644\n--- a/src/commands/PublishCommand.js\n+++ b/src/commands/PublishCommand.js\n@@ -152,6 +152,20 @@ export default class PublishCommand extends Command {\n     });\n   }\n\nget changelogOpts() {\nif (!this._changelogOpts) {\nconst {\nchangelogPreset,\n} = this.options;\n+\nthis._changelogOpts = Object.assign({}, this.execOpts, {\nchangelogPreset,\n});\n}\n+\nreturn this._changelogOpts;\n}\n+\n   initialize(callback) {\n     this.gitRemote = this.options.gitRemote || \"origin\";\n     this.gitEnabled = !(this.options.canary || this.options.skipGit);\n```\n\nThen just pass this.changelogOpts to the various functions.. Thanks, this was bugging me. :). How is this different from what execa does by default in v0.8.0? I'd rather not incur the expensive iterating of process.env twice per call, if we can help it. We could even get rid of it in the existing conditional, given what execa already does.\nA recent investigation of Appveyor failures due to undefined env vars led to these PRs (the root cause mysteriously cleaned up with an updated version of a console emulator):\nhttps://github.com/IndigoUnited/node-cross-spawn/issues/80\nhttps://github.com/kentcdodds/kcd-scripts/pull/5. More detail: https://git-scm.com/docs/git-mailinfo#git-mailinfo--b. As enticing as the packageParentDirs are, we still need to support some weird configs (like \".\", ugh) for package locations. We should iterate over this.repository.packageConfigs, joining the filename to the glob:\njs\nthis.repository.packageConfigs.forEach(pkgGlob => {\n  GitUtilities.checkoutChanges(`${pkgGlob}/package.json`, this.execOpts);\n});\nThe test will stay the same, and the existing tests are sufficient for this feature.. Please revert this, it is actually testing that it trims trailing whitespace.. There should be a trailing newline in this file. Let's name this done, it's less likely to be confused with callback. We've been down the proxy road before (before symlinking sibling packages directly), and it was a rough one. I'd prefer to avoid it, if possible.. I'm okay with skipping rather than erroring, for now. The proxy idea makes me nervous because we're diverging from the original intent of the package.json. It's a signal, to me, that we're heading in the wrong direction.. Oh, no, I meant it as a compliment. Perfectly fine as-is.. Shouldn't this be returning true, so it gets included in the filtered list? fs.accessSync() doesn't return anything, though in this case the default undefined is okay because it properly omits an executable file from the list of failed candidates.. Also, npm recently extracted the bin-links package from core. Aside from the largely-undocumented API, long-term I think we would benefit from reusing such battle-tested code.. I like the (more recent) import-local pattern, which encapsulates the tricky stuff for us:\n```js\nconst importLocal = require(\"import-local\");\nif (importLocal(__filename)) {\n    require(\"npmlog\").verbose(\"cli\", \"using local version of lerna\");\n} else {\n    require(\"../lib/cli\")().parse(process.argv.slice(2));\n}\n. Where does `fail` come from? Seems a little odd to templatize a string that isn't interpolated.. Ah, that's why I didn't recognize it. I really wish we could upgrade to Jest 21, but something in Jest 20 broke how we run the integration tests.... Why did this file get all the whitespace formatting removed? This looks like bad publishes?. This should be a `postinstall` lifecycle, not a separate call?. This shouldn't be built on top of #1122, it's polluting the diff.. All of the jest stuff (config, deps,  and running) should be done from the root.. This doesn't seem like correct output?. This file is named `copyFixture.js` because it provides the `copyFixture` function. Not sure why the dash-cased rename?. Why `module.exports` instead of `export default`?. I don't think this kind of dependency will work, we need to be calling the locally built lerna.. Not sure why there's a dev dependency on `yarn`?. Hah, of course, you're right. I've been trying (and largely failing) to make tests reasonable for that one.. No, I'm a big believer in hoisting all testing and building to the root of a lerna repo, per-package stuff is a recipe for increased maintenance costs for little (if any) gain.. If we're going for node v8.x compatibility, we might as well convert stuff to CommonJS (require) and avoid the transpilation entirely. Nice and fast, but a lot more work.. We have a yarn.lock, this means developers should be using yarn, not npm, to install dependencies. I think it's safe to assume this, just as we didn't have a local dependency on npm when we used that to install packages.. Shouldn't this be `const file = path.resolve(cwd, \"foo\");`? Otherwise I don't see how this test is any different than the previous one.. It's a pity there's no built-in way to coerce paths to posix... (`path.posix.*` methods don't work with Windows paths, near as I can tell). hrm, I'm not sure, with yarn workspaces in play. I feel like a local path as a dependency in the root package should be possible?json\n\"dependencies\": {\n  \"lerna\": \"./packages/cli\"\n}\n``. I'm not sure, but I think we might need to still duplicate thepackagesconfig in lerna.json for the benefit oflerna-changelog`, the consumer of this config..... Revert this, please. You're literally breaking the entire package with this deletion.. All these conditionals are too complex. We literally control all callers of this method, if the signature changes then we can assume we can change it everywhere it is called.. This is perfectly acceptable, I'd prefer you didn't change code unrelated to the goal of the PR.\n(this includes all the random deleted newlines, they're there for a reason). This should default to the fully-qualified URL: \"https://registry.npmjs.org/\". I would rather we use a default command here than brittle filesystem parsing. It would greatly simplify the logic, too.\n``js\n    .command(\"*\", \"\", {}, (argv) => {\n      // a default command with no description catches typos or missing subcommands\n      log.error(\"lerna\",${argv._.length ? \"Invalid\" : \"Missing\"} command!`);\n      log.error(\"lerna\", \"Pass --help to see all available commands and options.\");\n  // exit non-zero instead of throw an error so the CLI can be usefully chained\n  process.exitCode = 1;\n})\n\n``. Oh, then... right now they\u2019ll have to specify that in the lerna options. This is one of the drawbacks to _always_ passing the registry env var.. \"intergration\" -> \"integration\"\n  . \"regsitry\" -> \"registry\". This should be titled \"Publishing to a private npm registry (Artifactory, npm Enterprise, etc)\", as it isn't necessarily specific to Artifactory alone.. We still need to respect the user's--registryargument, here, because not everyone actually _wants_ to use the default npm registry.. Specifically, theregistryshould be defaulted to the public one _only_ in the [publishTaggedInDir()method](https://github.com/lerna/lerna/blob/a20601c6e94b3f651b6a8474dd1b1f00269f6be2/src/NpmUtilities.js#L151), not universally.. There's actually noyarn dist-tagcommand. I don't see any reason to changeaddDistTag/removeDistTag/checkDistTag.. I believe this needs to beregistry: this.npmRegistry(set in [Command.js](https://github.com/lerna/lerna/blob/a20601c6e94b3f651b6a8474dd1b1f00269f6be2/src/Command.js#L314)), asthis.registrydoesn't exist.. This is just to make very _very_ explicit that we are never usingpeerDependencies` for version \"pairing\" (that is, identifying lerna-managed sibling dependencies by name + semver) in this test.\nThe relevant test is here: https://github.com/evocateur/lerna/blob/5f38efe0227578757fb64f02a4a891468047f408/test/PublishCommand.js#L145-L148\nLerna never ever ever ever touches peerDependencies now, not even to compute sibling relationships. The Package getter is just leftover because I was too squeamish about removing it completely (with the idea that we would eventually reuse it for the improved experienced described in #1018).. I think we can move this into the one test case that actually needs it, instead of copying over the directory fixture every single test.\npatch\n-    it(\"returns workspace packageConfigs\", () => {\n+    it(\"returns workspace packageConfigs\", async () => {\n+      const testDirWithWorkspaces = await initFixture(\"Repository/yarn-workspaces\");\n       const repo = new Repository(testDirWithWorkspaces);. I think we can avoid a solitary snapshot with a concise .toThrow(/workspaces need to be defined/) assertion here.. This should be \"EWORKSPACES\", to be consistent with other ValidationErrors. And if you use the \"EWORKSPACES\" prefix, the regex can be even simpler: .toThrow(/EWORKSPACES/). This should be a multiline tagged template string (using dedent, several examples of usage in src/Command.js).\nShould probably call them \"yarn workspaces\", too, to clarify their origin.. hah, whoops. I appreciate the clean tests!. Let's just set this as an instance property near the beginning of the initialize() method, no need to have a one-liner instance method.\nconst filteredLength = this.filteredPackages.length;\nthis.packageCountLabel = `${filteredLength} package${filteredLength > 1 's' : ''}`;\nin execute()'s inner callback:\nthis.logger.success(\"\", `Bootstrapped ${this.packageCountLabel}`);\nin bootstrapPackages():\nthis.logger.info(\"\", `Bootstrapping ${this.packageCountLabel}`);. We could just let conventional-changelog-preset-loader do the dirty work, but then we wouldn't get caching and more flexibility with scopes and such.. Actually, the original example is correct. lerna add module-1 won't add module-1 to itself.. Hah, 10+ years using git, and I've literally never used this git remote subcommand. Sweet!. The --count flag always separates the values with a tab, we should split on \"\\t\" here (execa already trims the stdout result). Unless you're accounting for other cases I'm not seeing?. parseInt() should be called with radix 10 here, not 0.. I'm learning all sorts of git tricks today, brilliant!. I think we could simply call the fetch from isBehindUpstream()? I don't see much value in separating it, kinda strikes me as an implementation detail of isBehindUpstream().. At the same time, publishing to npm and pushing to git are (intended to be) separate concerns (even if the implementation is currently kinda muddled). If the local checkout is behind upstream when making git commits and tags and pushing is enabled, it should always error, as that would inevitably error anyway once the push to remote was attempted later in the process.\nThat is, regardless of whether publishing to npm is enabled, if this.gitEnabled === true it is always an error if the upstream is ahead when publishing.. This should be throwing a new ValidationError(\"EBEHIND\", msg) with this message so it sets the process.exitCode to 1, indicating an error status. A return false keeps the process.exitCode as the default 0, which in unix-land means \"no errors, everything is okay\".\nWe never want lerna attempting to push a non-fast-forward commit/tag, after all. Instead of \"Skipping publishing\", maybe indicate what command to run to fix the problem? (Usually as simple as git pull, in my experience). Clearly we need to improve our git setup during integration tests. In fact, I think a bare repository initialized beforeAll and then cloned into each initFixture temp directory is the way to go. I'll work on implementing that today.. To this end, I've added a new cloneFixture() helper and an example of usage in https://github.com/lerna/lerna/commit/efbd77beac113e8e6436ecf68494df61ba02b7fc:\n```js\nconst { cwd, repository } = cloneFixture(\"normal\");\nconst cloneDir = tempy.directory();\n// simulate upstream change from another clone\nawait execa(\"git\", [\"clone\", repository, cloneDir]);\nawait fs.outputFile(path.join(cloneDir, \"README.md\"), \"upstream change\");\nawait gitAdd(cloneDir, \"-A\");\nawait gitCommit(cloneDir, \"upstream change\");\nawait execa(\"git\", [\"push\", \"origin\", \"master\"], { cwd: cloneDir });\ntry {\n  await cliRunner(cwd)(\"publish\");\n} catch (err) {\n  expect(err.message).toMatch(\"upstream ahead\");\n}\n``. Oh yeah, I forgot,npmlogtakes aprefixargument in addition to themessage`. The loggingOutput helper skips the prefix, focusing on the message. Sorry for the hassle.\nI'd prefer these logs to be added to the existing conditional wrappers instead of separate. Reads a bit cleaner.\n```diff\ndiff --git a/commands/publish/index.js b/commands/publish/index.js\nindex 5f83e350..59a65d04 100644\n--- a/commands/publish/index.js\n+++ b/commands/publish/index.js\n@@ -154,12 +154,16 @@ class PublishCommand extends Command {\n if (this.gitEnabled) {\n   tasks.push(() => this.commitAndTagUpdates());\n\n\n} else {\n\nthis.logger.info(\"execute\", \"Skipping git commit/push\");\n     }\ntasks.push(() => this.resolveLocalDependencyLinks());\n tasks.push(() => this.annotateGitHead());\n\n\nif (!this.options.skipNpm) {\n\nif (this.options.skipNpm) {\nthis.logger.info(\"execute\", \"Skipping publish to registry\");\n} else {\n       tasks.push(() => this.publishPackagesToNpm());\n     }\n ```\n\nThe changes to the log message reflect the actual intention of the flags (--skip-git doesn't skip all git executions, for example).. I think I'd rather just leave off the -- <formattedLocation> args if formattedLocation is empty. The git command works the same way in that case.\n```diff\ndiff --git a/core/git-utils/index.js b/core/git-utils/index.js\nindex bb11df0f..720ae11a 100644\n--- a/core/git-utils/index.js\n+++ b/core/git-utils/index.js\n@@ -134,15 +134,17 @@ function describeTag(ref, opts) {\n }\nfunction diffSinceIn(committish, location, opts) {\n+  const args = [\"diff\", \"--name-only\", committish];\n   const formattedLocation = slash(path.relative(opts.cwd, location));\n\nif (formattedLocation) {\n// avoid same-directory path.relative() === \"\"\nargs.push(\"--\", formattedLocation);\n\n}\n+\n   log.silly(\"diffSinceIn\", committish, formattedLocation);\n\n\nconst diff = ChildProcessUtilities.execSync(\n\n\"git\",\n[\"diff\", \"--name-only\", committish, \"--\", formattedLocation],\nopts\n);\nconst diff = ChildProcessUtilities.execSync(\"git\", args, opts);\n   log.silly(\"diff\", diff);\n\nreturn diff;\n``. I appreciate the test!. I don't think we should support \"legacy\"prepublish, as it is deprecated.. Instead ofPromise.all(), this should bepMap(this.updates, ({ pkg }) => {...}).this.updateswill likely be aSetsoon, and we may need to tune the concurrency.. This should be returned (just likethis.runPrepublishScripts) so we don't drop any rejections.. Since this needs to be returned inside the Promise chain too, I'd prefer if the actions in this method were composed into a chain similar to theexecute()` method:\n```js\nlet chain = this.runPrepublishScripts(rootPkg);\nchain = chain.then(() =>\n  pMap(this.updates, ({ pkg }) => {\n    this.execScript(pkg, \"prepublish\");\nreturn this.runPrepublishScripts(pkg);\n\n})\n);\ntracker.addWork(this.packagesToPublish.length);\nconst mapPackage = pkg => {\n  // ...\n};\nchain = chain.then(() => runParallelBatches(this.batchedPackages, this.concurrency, mapPackage));\nchain = chain.then(() => this.runPackageLifecycle(rootPkg, \"postpublish\"));\nreturn pFinally(chain, () => tracker.finish());\n``. Well, I mean, an uncaught rejection is going to halt then entire process in the next major version of Node, so I don't see how we avoid this, unless we wait to run all thepostpublish` lifecycles after all the publishes have succeeded.\nAnd even then, it's not guaranteed. I guess I'm willing to let a vanishingly-rare postpublish break the build if someone is foolish enough to write a postpublish script that exits non-zero? We've done the best we can, we can't account for everything.. Oh, and also, we already catch and log lifecycle errors in runPackageLifecycle, so it's basically just good hygiene to return it.. There's a good reason no existing unit tests of spawnStreaming() exist: stdio pipes are basically un-mockable in Jest, and a pain to deal with in any case. Better to add a test case in test/integration/lerna-exec.test.js and test/integration/lerna-run.test.js. . Let's revert this block, just test it in the integration tests.. Can we rename this --prefix, so the auto-negated --no-prefix works, as well as the lerna.json-based \"prefix\": false works? --prefix certainly has different meanings in other contexts, but it's pretty safe for lerna exec and lerna run.\nYou'll also need to add prefix: true, to the get defaultOptions() block in ExecCommand and RunCommand.. So the weird thing about our \"durable\" options and yargs is that we need to specify default: undefined here, otherwise yargs overwrites our lerna.json-based config. Sorry for the weirdness.. I'm not sure where this snapshot is coming from? Or the stderr: test --stream 2 addition.. Not a huge fan of copying in these names, but we might as well make it a Set so the test in changelogConfigPath can avoid the array .includes with allowedPresets.has(presetName). Where does pkg get used in this method?. The current integration tests seem to be choking on the result of this. Why can't you use the default export of conventionalChangelogPresetLoader?. I think we should take advantage of the existing (hidden) --ci flag, which is set automatically when lerna is called in a CI env (Travis, AppVeyor, etc). It would only take effect when npmClient === \"npm\", of course, and would be passed to npmInstall() as this.npmConfig.subCommand (defaulting to \"install\").. This should be removed, in favor of conditional assignment of this.npmConfig.subCommand:\njs\nif (npmClient === \"npm\" && this.options.ci && hasNpmCI()) {\n  this.npmConfig.subCommand = \"ci\";\n}\nI sketched out the implementation of hasNpmCI() here, where you can see test examples too.\ncommands/bootstrap/lib/make-npm-feature-predicate.js:\n```js\n\"use strict\";\nconst semver = require(\"semver\");\nmodule.exports = makeNpmFeaturePredicate;\nfunction makeNpmFeaturePredicate(range) {\n  return () => Boolean(semver.satisfies(getNpmVersion(), range));\n}\nfunction getNpmVersion() {\n  const userAgent = process.env.npm_config_user_agent;\nreturn (/npm\\/(\\d+.\\d+.\\d+)/.exec(userAgent) || [\"\"]).pop();\n}\n```\ncommands/bootstrap/index.js:\n```js\nconst makeNpmFeaturePredicate = require(\"./lib/make-npm-feature-predicate\");\n// https://github.com/npm/npm/releases/tag/v5.7.0\nconst hasNpmCI = makeNpmFeaturePredicate(\">=5.7.0\");\n. This options block should include `subCommand = \"install\"` instead of `npmCiMode`.js\nconst args = [subCommand];\n``. You'll need to pass explicit\"--ci\"here, as the unit test command runner does not decorate theciconfig likecore/cli` does.\nIt would also be nice to have a negative test against Yarn, as well as insufficient npm versions. Overwriting process.env.npm_config_user_agent with the values from the example tests would be necessary.. This is exactly the right approach (as far as my experience with jest goes). Due to the requirements of npm ci, this means we should indeed create another fixture with the correct package-lock.json files (the publish integration tests also use the fixtures used by the unit tests). I would just add one package, have it depend on tiny-tarball (simple, no transitive dependencies, very small package-lock), and that should be sufficient.. This should be resolved to the public registry, https://registry.npmjs.org/. Er, you missed a ? in the ternary.. The Bootstrapping (begin) and Bootstrapped (end) labels have been reversed, needs to be restored.. And the snapshots need to be updated for the bootstrap integration test. npm run integration -- -u. If we're adding an alias, we need a unit test (like this one) to cover it. You can also flip the order of --dev and the package argument in the existing test to cover the boolean-vs-string interpretation.. You shouldn't be changing this. If you want to assert the independent case, create a new fixture tree.. This isn't sufficient to determine the correct case, which is actually only necessary for major version bumps. The current test is also insufficient for this case.. This isn't at all what was discussed in the issue, patch or minor bumps should remain partial based on actual changes, as the local sibling dependencies are ^ ranges (by default).. Not a huge fan of copy-pasta like this, but it works.\nPlease add a test in ListCommand (the easiest for this sort of thing). You can copy this test and change the appropriate options.. > It feels a little odd to expose [breadthFirstSearch] as a method\nThere's precedent in this class with the prune method calling remove, so I think that's fine. It might even prove to be more useful in the future!\n```js\n  addDependencies(filteredPackages) {\n    return this.extendList(filteredPackages, \"localDependencies\");\n  }\naddDependents(filteredPackages) {\n    return this.extendList(filteredPackages, \"localDependents\");\n  }\nextendList(packageList, nodeProp) {\n    // shared code\n  }\n```\nextendList struck me as a little more descriptive than breadthFirstSearch. Well, fun fact, below 1.0.0 the minor versions are treated as majors (e.g., 0.3.0 does not satisfy ^0.2.0). So it's a bit more complicated than that.. Hah, whoops, I forgot 2.x is still using Arrays, and has no concept of localDependents or localDependencies.... Don\u2019t rewrite these into a loop, please.. Separate test cases, please. One initFixture per test case, just like all the others.\nAfter the existing initial dev test, you only need to make assertions on one package.. This doesn't belong here.. This will literally never work once a project has moved past v1.0.0. Same with the patch.. No, that's incorrect. --exact only affects the dependency range used, not the presence/absence of changes.. The breaking change detection should be a post-hoc loop, there's no reason to pass along currentVersion everywhere, it's still available on each pkg.version.. But this is semver.lt(), how is that relevant?. oh man, this is great! I never thought about that.... This should throw a new Error instance, but I'm not really sure how we get to this case anyway, because semver.diff() already throws when its arguments are invalid versions.. This should be a function external to the class, there's no reason to inline it here.. versions.size === this.packages.length is more than sufficient, you don't have to recreate the packages map above.. this.globalVersion already has this value, there's no need to collect it (it's already the next major, in a fixed version scenario). This could be clearer as a for-of loop:\n```js\nlet hasBreakingChange;\nfor (const [name, bump] of versions) {\n  hasBreakingChange = hasBreakingChange || isBreakingChange(this.packageGraph.get(name).version, bump);\n}\n. nextVersion should just be `this.globalVersion`. Just paste it into the bottom of the current file, it'll be fine.\nfunction isBreakingChange(currentVersion, nextVersion) {\n  ...\n}\n. So this is probably the reason there's still a separate loop. This is incorrect output for `lerna changed`, which should always report packages with changes in lexical (alphabetical) order. We might as well remove the short-circuit early return, because a mere `forEach` over the `packages` Map is _not_ an expensive proposition.. Indeed, simply remove the short-circuit entirely and no tests need change at all:patch\ndiff --git a/utils/collect-updates/collect-updates.js b/utils/collect-updates/collect-updates.js\nindex 300655f2..e90f2191 100644\n--- a/utils/collect-updates/collect-updates.js\n+++ b/utils/collect-updates/collect-updates.js\n@@ -65,12 +65,7 @@ function collectUpdates({\n   const dependents = collectDependents(candidates);\n   dependents.forEach(node => candidates.add(node));\n\nif (canary || packages.size === candidates.size) {\n\nlogger.verbose(\"updated\", \"(short-circuit)\");\n\nreturn Array.from(candidates);\n\n}\n\n// The result should always be in the same order as the input\n   const updates = [];\n\npackages.forEach((node, name) => {\n``. I'm not a huge fan of this extra argument (that is _usually_false). Can we move this to theopts` object instead?\nopts is just this.execOpts from the PublishCommand instance. In the constructor, when this.options.amend === true, we can set this.execOpts.amend = true. We want to avoid adding the execOpts prop when the option is falsey because otherwise the tests are a bear to update.\n. We don't need to override configureProperties(), just move this line near the top of initialize().. This solves most of #277, allowing ^ ranges of canary prereleases to evaluate correctly. Without the .0 after the prerelease id, semver attempts to parse the git SHA as a number, which leads to very erratic behavior as SHAs are not guaranteed to start with a number, etc.\nhttps://semver.npmjs.com/ is a good playground to demonstrate this. Try it with lerna at range ^3.0.0-beta.10, and you'll notice 3.0.0-beta.9 isn't highlighted:\n\nSemver ignores anything after the +, hence stashing the SHA there. It's meant to dedupe the tarball when attempting to upload, since there might be multiple foo-pkg@1.0.1-beta.4 (with different +SHA values) published. (This is why it's a good idea to use --exact with --canary when you're dealing with contentious feature branch publishes). The lockfile should not have changed (npm ci should be sufficient). Please revert this file. I'm not sure why these snapshots needed to be updated. Are you using a non-English localization of git?. I would prefer we chained the filter to the collectUpdates call:\n``js\n    this.updates = collectUpdates(\n      this.packageGraph.rawPackageList,\n      this.packageGraph,\n      this.execOpts,\n      this.options\n    ).filter(node => {\n      if (!node.version) {\n        // a package may be unversioned only if it is private\n        if (node.pkg.private) {\n          this.logger.info(\"version\", \"Skipping unversioned private package %j\", node.name);\n        } else {\n          throw new ValidationError(\n            \"ENOVERSION\",\n            dedent\n              A version field is required in ${node.name}'s package.json file.\n              If you wish to keep the package unversioned, it must be made private.\n            `\n          );\n        }\n      }\n  return !!node.version;\n});\n\n```\nAlso, instead of warning, we should definitely be throwing an error (which logs an error message) when a non-private package is missing a version field. I inlined the method because we really don't have a lot of logic to encapsulate.. That's not what the --tags option of git describe does. You're enabling \"lightweight\" tags to be consulted, which is not correct.. Why have you removed this?. I think we should ultimately be using pacote.packument() instead of calling npm-registry-fetch directly. It caches stuff, as well as handling this \"corgi doc\" header.. Using pacote instead will resolve this.. Of course I left out the link I was trying to add in the request for changes: https://github.com/lerna/lerna/blob/ad649bf965a6452d5f4aad8026f4ed62a548cada/commands/add/index.js#L165. Since this was already added in commands/version/command.js, you don't need to duplicate it here? versionOptions() was designed to avoid this duplication. It is hidden, true, but it still works.. This isn't actually testing --include-merged-tags, though. I'd rather the tests you added to changed-command.test.js be moved to a separate test file under commands/version/__tests__, like version-include-merged-tags.test.js.. This helper and the tests should be moved to a focused test file under the version command, as described previously. lerna changed is just a lightweight wrapper around the internals used by lerna version, it doesn't have any logic itself beyond the list output options.. This duplicated options block is not necessary. Adding a link to the docs under commands/version directly is fine.. Thanks for these helpers, they are handy :). This is not going to fly. Lightweight tags are not intended to be used for tagging releases.. I'm not sure we need an entire helper just to run git status, and in any case, a better snapshot would be tightly focused on just the modified files, which is already used elsewhere:\nsuggestion\n  const modified = await execa.stdout(\"git\", [\"ls-files\", \"--modified\"], { cwd });\nmodified in this case is just a newline-separated list of relative file paths, easily snapshotted inline.. This should be an instance of ValidationError (already imported in this file), otherwise it will dump a log and echo a stack, which really isn't what we want.. So basically all we're doing is adding a trailing $ to the combined regex? Huh.. Thanks so much for the test!. You're missing an explicit dependency on \"libnpm\": \"^2.0.1\" here. Oh, I suppose this defaults to github.com when the GHE_API_URL isn't defined. It's not very clear (i first opened this comment because I thought it was a bug). This is brilliant!. Hrm, maybe some awareness of \"prerelease-ness\" could be employed here? Not vital for the first implementation, but something to think about.. Could owner and repo be derived from project metadata? (root package.json repository.url field?). I don't think you need to create releases for every package when the versioning is not independent (i.e., \"fixed\"). You would only need to create one release, the \"root\", in that case.. Yes, that's a better idea.. These changes are just fallout from unrelated refactoring (prompted by removal of a dependency I thought was clear). In the end, I didn't make the effort to separate it.. The majority of these assertions were removed because they were completely redundant and obscured the actual point of the test case.. Most assertions on the final dist-tag now need to use the @lerna/npm-dist-tag mock, which explains all the new stuff in the mock helper. (@lerna/npm-publish is almost always called with lerna-temp dist-tag, which isn't very useful as an assertion). another mostly-unrelated change due to refactoring getUnpublishedPackages(). it definitely exposes that my mock isn't abstract enough, and should probably be a network mock instead.... We're using yargs' \"auto-negation\" feature here (any boolean option prefixed with no- is set to false), so it is a bit awkward, I agree. We can't use \"no-temp-tag\" as the key, otherwise it would need to be passed as --no-no-temp-tag.\n(I could be wrong, it's been awhile since I tried to make this clearer. It could also require upstream changes in yargs). I removed p-reduce from the main command script, forgot it was here, and then realized it could be implemented with more concurrency with p-map. (p-reduce executes serially). I had to add --no-temp-tag to all the end-to-end tests because we don't have a good solution for local testing with an actual registry, and none of the test packages are actually \"live\" on the public registry.. Actually, I think I will move this commit out of this PR. It's very noisy.. Hopefully this is clear enough?\n\n. This push needs to be guarded to only execute during --independent publish, otherwise \"fixed\" mode will be making too many releases (each package CHANGELOG.md is still updated with package-specific changes in fixed mode, but that isn't meant to be a separate release).\njs\nif (independentVersions) {\n  this.releaseNotes.push({\n    name: pkg.name,\n    notes: newEntry,\n  });\n}\nThe subsequent root push is still okay, that never runs in independent mode. And then the final loop to create github releases will be correct.\n. Much clearer, thanks!. You'll need to account for the --git-remote option here.. I think it would be clearer if @lerna/github-client exposed a parseGitRepo() method that returned this repo object, rather than embed the git config --get ... stuff in the version command. Does that make sense?\n(it would also make unit testing easier with more expressive mocking). Well, coincidentally, that's been a feature request from some users of independent mode, but the current output of the changelog generator isn't quite clean enough (imo) for that to make sense. Also, since independent mode creates tags for each individual package, that means the GitHub tags/releases page gets spammed with a bunch of empty tags (now).\nI'm not sure where we would put the \"rolled-up independent\" changelog. Much less what to call it. But the work you're doing lays the groundwork for future improvements in this area!. Do you mind if we rename this --github-release? --github just doesn't \"scope\" the flag enough for me (in the context of lerna version, \"github\"... what?). It also makes the option a bit more self-descriptive in the implementation.. Thanks!. @lerna/npm-uninstall looks like a copypaste of @lerna/npm-install. Why do we need it? We're already removing the entry in the package.json, etc. Running lerna bootstrap (like the add command does) should be sufficient to clean up the other stuff.. We should definitely still be doing this, instead of calling npm uninstall. Ensuring that ci: false is also passed makes sure we run npm install which will synchronize the lockfile and node_modules appropriately?. We're not removing the symlink, but the directory. In any case, I don't think we need this. Just bootstrap after serializing the modified dependencies.. Definitely remove this, please. Lerna itself uses npm, and in any case shouldn't be developing from a leaf dir.. Err, that branch is only reached when you are attempting a filtered bootstrap. (scope, ignore, or since)\nThe chained bootstrap should have none of these options, thus the raw bootstrap should actually deal with this?. Oh, right, I forgot Yarn doesn't want you to remove stuff when you modify package.json and run yarn install...\nSo yeah, I guess we do need npm-uninstall. I'd prefer it was less copypasta, but that's more work that isn't blocking.\nWe also, however, need to account for the --hoist case (the removed dependency doesn't exist at the leaf, but in the root) and relative file: specifiers, which need only re-run npm install in the root. lerna bootstrap already accounts for the file: specifier case, but I really don't want to burden that poor command with any more complexity.... Unclear why --force-publish has anything to do with skipping git operations.. Likewise, why does independent versioning require git?. This field isn't defined when this.gitRequired is checked in the parent Command class.. This field also isn't defined when the Command base class consults this getter.. Pretty sure whether or not --conventional-commits outputs a changelog file is irrelevant, what you're actually worried about is this.options.conventionalCommits.. Good logging changes here, but irrelevant in the context of the PR. I think I'll pull them in upstream.. In the event no tags are found, collect-updates acts as if you had passed --force-publish anyway.. That's certainly one way to resolve the warning, but it's not strictly what the warning is concerned about.\nHow about we add a second line to the warning instead, saying something like \n\"To fix this, add a LICENSE.md file in the root of this repository. See https://choosealicense.com for additional guidance.\". You'll need to update the option configuration's defaultDescription to reflect this, as well.. To make the tests pass, you'll need to mock out this result, otherwise it will always fail in environments other than your localhost (I have 12 logical cores on my laptop, for example).\n```patch\ndiff --git a/core/command/tests/command.test.js b/core/command/tests/command.test.js\nindex 9cbbc60..0724038 100644\n--- a/core/command/tests/command.test.js\n+++ b/core/command/tests/command.test.js\n@@ -9,6 +9,10 @@ const tempy = require(\"tempy\");\n// partially mocked\n const ChildProcessUtilities = require(\"@lerna/child-process\");\n+const os = require(\"os\");\n+\n+// normalize concurrency across different environments (localhost, CI, etc)\n+jest.spyOn(os, \"cpus\").mockImplementation(() => new Array(42));\n// helpers\n const initFixture = require(\"@lerna-test/init-fixture\")(__dirname);\n@@ -70,14 +74,14 @@ describe(\"core-command\", () => {\n       const command = testFactory({ concurrency: \"bla\" });\n       await command;\n\nexpect(command.concurrency).toBe(4);\n\nexpect(command.concurrency).toBe(42);\n     });\nit(\"should fall back to default if concurrency given is 0\", async () => {\n   const command = testFactory({ concurrency: 0 });\n   await command;\n\n\nexpect(command.concurrency).toBe(4);\n\n\nexpect(command.concurrency).toBe(42);\n     });\nit(\"should fall back to 1 if concurrency given is smaller than 1\", async () => {\n``\n. Looks great, thanks!. I ported this file's changes in 9b8dd9c, please rebase when you can.. I must admit I had a bad reaction when I first saw thissupercall, but now... I really like it! It does a good job of compartmentalizing the operations, as you'd expect a class method to do.. I'm not a fan of--force-localin the first place, and this isn't appropriate, as none of the listable commands accepts--force-local` (nor should they).. That's not an accurate statement. When your local dependent ranges are not satisfied, they are not considered local dependencies, thus they are not topologically ordered, as they have no topological relationship.. \n\n",
    "dchambers": "Sorry, just another me too message, but just to say that Lerna is unusable for my use-case at present without this feature.\nIf there are issues with sym-linking the directory, is it not possible to use the current approach of adding module.export = require() files, but for all files?\n. > We can copy all files if that solves things for you for now. I'm just wary about it and I would put it under and unstable flag.\nSounds good to me :+1:\n. Yay! Great work to everyone that helped to get this issue across the line :+1: \n. That's remarkably good timing! I just tried to use Lerna for the first time but found it doesn't currently work because I'm using scoped package names. Looking forward to a release containing your fix :smile: @thejameskyle.\n. @thejameskyle, any update on being able to use this feature?\n. ",
    "eirslett": "I use Windows, which, for all its goodness, doesn't have symlinks, so projects that rely on it are not possible to work on... npm handles linking very well :-)\n. @thejameskyle I think you may have misunderstood me a bit, this is what I want to achieve:\n1) Run lerna [some-command] (maybe the command would be called prepare or prepare-publish?) locally/manually/from a developer machine, answer the prompts to choose a new version, and it will update package.json files, commit the changes, tag the commit and push it, like this:\nhttps://github.com/openzipkin/zipkin-js/commit/b82aca8230b7643f4c4eea8e1df7ceacce309cba\nBut I don't want it to actually publish the packages to npm (npm publish). It should only do the \"change package.json, make commit, make tag, push upstream\" part. (And also detect which packages need to be published/version-bumped?)\n2) Then, in Travis CI, there is a git receive hook, which registers that a new tag has been pushed. That, in turn, will trigger the deployment system: upload the packages to npm. And this is where Travis could be configured to lint the code, build the package, run the tests etc, before then running something like lerna publish --skip-git so that it actually uploads the package to npm.\n(But doesn't make any changes to the code/do any git commits. CI isn't allowed to make commits to the git repository anyways, it only has read access)\n\nYou'd effectively be bumping versions twice\n\nThe version bump would only happen once, on the developer machine. When Travis receives the new code with the new git tag, the version would already be bumped (in the lerna-generated git commit)\n\nHow you choose to get these versions into CI is a bit outside of the scope of Lerna\n\nAgain, the version would be read from package.json which was recently updated by lerna, from the developer machine.\nI guess that on the CI side, we could use a simple, stupid script like for each package: cd package/$NAME && npm publish; not much logic needed. On the developer side though, we would need to be able to use Lerna to generate that git commit/tag/push etc.\n. >  It's more like --skip-npm and then --only-npm (which is how I would name it)\nThis is what Maven does: it uses release:prepare (only the git stuff) and release:perform (only the upload artifacts stuff). Maybe we could have two commands lerna prepare-publish and lerna perform-publish? lerna publish would then be an alias for \"lerna prepare-publish && lerna perform-publish\"?\nUsing lerna exec publish on the CI server would of course solve the 2nd step of the problem. So what's really needed here is the --skip-npm flag. In CI, It's also possible to do lerna run publish and have an npm script called \"publish\" in every package, which does \"npm publish\" (it's hacky, and more indirection, but doesn't need any new features in Lerna).\n\ncurrently lerna run is for npm scripts so we would need something different like lerna exec\n\nIt's a possibility to allow exceptions, like \"lerna run publish\" does \"npm publish\", \"lerna run rebuild\" runs npm rebuild. And if it doesn't exist in the list of exceptions ['publish', 'rebuild', ...] then it falls back to running the npm script. This would be a breaking change, but only in edge cases, like if somebody has created an npm script called \"rebuild\". I'm not sure if that's a breaking change you'd be willing to introduce in v2? (considering it's already in beta) It might not even be a good API decision.\n\n--only-npm (which is how I would name it\n\nI guess lerna publish --only-npm, which would be step 2 that runs on CI, in practice would be reduced to lerna run publish (or lerna exec publish if you wish) so we might not need a --only-npm flag in the first place. (Or is that what --skip-git already does?)\n\nI'm fine with adding a flag to --skip-npm\n\nGreat! Running lerna publish --skip-npm would basically be step 1 like I described.\n. Ok, I updated the PR now! \"lerna exec pwd\" works as intended. It's still two commits, but they can easily be squashed on merge if that's better!\n. Thanks @joscha , I'll close this in favor of #151 .\n. Where is the logic that handles everything before -- as flags to lerna, and everything after as the actual command?\n. fixed!\n. Isn't it possible to use Object.assign directly? (I'm not sure whether babel polyfills it or not, to be honest)\n. ",
    "ainscore": "@thejameskyle Are you able to provide more details on the weird behavior in npm install when symlinks are present?  Does it affect all versions or just a certain subset? \n. I think that the install behavior with symlinked packages has been fixed, though I'm not sure in which version of npm.  I'm hoping to find some time to narrow it down and provide results here.\n. It is nice to use a supported command, however, by using that you also limit yourself to linking one version of that package per npm installation on that system.\n. I didn't have much to go by, but based on the brief descriptions by @kittens  here: https://github.com/lerna/lerna/issues/78#issuecomment-192259563 and @thejameskyle here: https://github.com/lerna/lerna/issues/11#issuecomment-188005150, it would seem the issues with symlinks and npm are rooted in this npm bug https://github.com/npm/npm/issues/10343, which I believe at this point is partially patched though i haven't had a chance to figure out which versions, but at least npm 3.3.12 is affected, which was the latest around the time that the symlink experiments were happening.\nThe issue arrises when you have symlinked dependencies and then attempt to install a package by name, which Lerna does do in its install command: https://github.com/lerna/lerna/blob/ce3e1eddc65689ec92fcf3ec4a3096bc2cda4686/src/commands/BootstrapCommand.js#L185.\nWithout having much context on the internals, is it possible that, when bootstrapping, we could symlink local dependencies for a package first, and then run 'npm install' for the package, thus avoiding the install-by-name issue?\n. I did have one last thought in a similar vein to Concept3/alle, which is to use initialized environments a la virtualenv for python.  So in initializing the environment, lerna would add 'packages' to the NODE_PATH.  This would also remove the bootstrap phase like alle.  It too has its drawbacks as this type of setup can be confusing without shell support the way many shells have for virtualenv, but it would maintain the same folder structure that lerna currently has.\n. @patrickheeney I believe sub-dependencies would still be resolved through the normal node_modules way unless a sub-dependency was missing in which case it would search on the NODE_PATH ... or maybe I'm misunderstanding what you mean, but nevertheless, I agree, it is preferable to use a method more in line with the convention.\n. ",
    "bkniffler": "I just discovered lerna through the open-sourced cloudflare ui package, and this was the first thing I thought about when I've seen the index.js proxy method lerna uses (which is by the way a very clever solution!). I've been trying npm link and webpack/babel alias, but these solutions all have their drawbacks.\n@patrickheeney\nBut now that its so easy to maintain many packages with lerna I will just go and migrate the stuff that I import through import {x} from \"foo/bar\" to a new repository for import {x} from \"foo-bar\". This might not be applicable to all scenarios, but it can be a simple sufficient one for some. Especially since in most cases, everything you separate into a module folder that isn't within your root scope might be worth a reconsideration for separation into a new package.\n. Yes, absolutely! The whole point of lerna is to manage dependency versions, but I'd really like it to be less opinionated on how I organize my git repos (mono-repo vs multiple repos), my folders and how/what I publish.\nAfter giving it a few more thought, I suggest 3 things:\n- Respect private: true in a projects' package.json file and don't run the publishing then\n- Check if a project is a git repository and run scripts on that instead on always trying to use the mono-repo (or allow to completely exclude it by respecting .git-ignore, or with a custom property in lerna.json, but this is less important)\n- Add the externalPackages option mentioned above to include other folders\njson\n\"externalPackages\": {\n   \"xxx\": \"/user1/documents/xxx\"\n}\nI imagine these are big points that might involve a few changes after looking into the source code. What do you think though? \n. Thanks @gigabo!\nIts true, it respects private, my bad. But it will still fail if the file is gitignored, so its a different problem :(\nThanks also for the links.\nYes, I think it would be extremely useful. Working on a UI library, the server, utility libraries, tools and last but not least the applications, some of them being mono-repos, some of them being a repo per package, some not on npm, some private, some public, but all depending on one another isn't such an unusual scenario for people working on their full nodeJS + frontend stack, and using a more powerful lerna to prototype changes on your micro-packages in your final apps would be very cool and could encourage people to write better code.\nTo reevaluate my suggestions:\n- Have a sources or packages property that contains an array of folders. A folder could be either multiple packages (like with the current default packages directory) or a single package. \n- Allow for lerna.json in these folders to specify packages/package-specific options (like for example, if they should be published).\n- Use the nearest .git repository to perform git operations on each package using the cwd working-directory option on child_process (so adding a gitRoot property to the package class that is handed to git operations)\nWhat do you think?\nSorry, I know this is getting off-subject. Should I rename the issue, or is this something the authors are not interested in anyways?\n. ",
    "sheerun": "Why not symlink all the js files instead of just main?\n. I mean proxy\n. How about patching require instead?\n. ",
    "rygine": "i've created an updated bootstrapping process that allows for this via symlinks.\nmore info here: https://github.com/lerna/lerna/issues/215\n. the install command could take advantage of the scope flag. the ignore flag may land soon, which could be used as well.\nif you're currently in a package folder, it would make sense that lerna install would add something to that package, unless otherwise specified.\n. A few questions about this issue:\n1. Should the ignore option work for all commands? (this may duplicate the new ignore option for publishing on the publish command)\n2. Should ignored packages also be removed from the packageGraph?\n3. Is logging ignored packages helpful? If so, is it ok to use the logger within a utility?\n4. Is supporting globs desirable?\n5. Would it he helpful to add an ignorePackages config option to lerna.json to configure package exclusion per command?\nHere's the current diff: https://github.com/kittens/lerna/compare/master...rygine:ignore-packages\nJust trying to get an idea of the scope of this and what direction to take.\n. Since minmatch is already included, the glob matching came for free. I think another unit test should be added to include usage of lerna.json and bootstrapConfig. I didn't see one for the publish command. Thoughts?\n. @thejameskyle updated. looks much cleaner. thanks for the suggestions. if this works for you, i'll add a few more tests to cover invalid formats of the flag/config value and using a config value from lerna.json.\n. closing this PR from my personal account and re-opening from company account. sorry for the confusion.\n. @joscha hmm, --scope seems more suited to be a whitelist, where this would be a blacklist. maybe a more general --ignore flag would serve this purpose. i understand that negative matches could be applied to scope, but perhaps it would be confusing as it would not be readily apparent that --scope could be used that way.\nedit: for comparison, the babel cli has only and ignore flags.\n. the more i think about it, the more inclined i am make the flag name more generic. i think ignore would work well here. that way, it could apply to other commands, such as lerna run. the ignore flag would be opposite of the scope flag, unless that's renamed to something else like only. it makes sense to have both of these options when running commands.\ni like the way babel-cli has done it.\n. @joscha: I've added another commit that renames the flag to exclude as per your suggestion. I think that makes sense. Each command will have to process the flag separately. Once your PR is done, I think I could use your filterPackages utility in place of what I currently have.\n@thejameskyle: I remember you saying that you didn't want an ignore option to apply to all commands out of the box. I agree, and with this new generic naming (include and exclude), I think we can move forward and apply the flags to certain commands when it makes sense.\n. @hzoo @joscha @thejameskyle i've updated the PR to include usage of PackageUtilities.filterPackages from the latest commit. i had to slightly modify it to allow for negation. perhaps there's a better way of doing this.\ni settled on --ignore for the flag, and placed it beneath scope in the CLI help, with a similar message.\nthe new scope flag could easily be applied to the bootstrap command, and truthfully, i'm going to need it for my current project. the same goes for the ignore flag and other commands.\ni can do a PR for adding scope to the bootstrap command after this is merged.\n. @joscha i think specifying both should throw an error so that there's no confusion as to what gets precedence.\n. @hzoo docs added\n. done\n. needed to update the stub in the a unit test. should be good now.\n. this would be fixed using the updated bootstrapping process i've created, as long as they share the same version of the external dependency.\nmore info here: https://github.com/lerna/lerna/issues/215\n. @charlieschwabacher does this work with PR #237? how does this affect npm outdated? what are you using to bundle your source?\ni ran into a similar issue in webpack that was resolved with the right configuration.\n. I'm using webstorm, which has an /.idea folder. This should handle most other editors as well as some OS-specific stuff.\n. At my company, we've written a few CLI tools that are accessed via NPM scripts in each package. Bootstrapping did not factor this in and they would fail to run.\n. i'm noticing that the unit tests are non-deterministic, both locally and travis\n. @paulyoung, this functionality is actually covered in PR #237 as well.\n. @gigabo This should do it. I also uncovered a potential issue with the ignore flag during bootstrap. Fixed that as well.\n- Added symlink method to FileSystemUtilities\n- Added bin property to Package\n- Updated bootstrap to factor in dependencies with multiple binaries\n- Added test for package with multiple binaries\n- Refactored way ignored packages are determined (to be more like run command)\n- Updated unit test for ignored package\nWhen a package is ignored while bootstrapping, it should be completely taken out of the equation. This update alters the previous behavior of not bootstrapping an ignored package, but still treating it as though it was part of the process. If a package is ignored, it should be treated as an external dependency. The updated unit test reflects this.\n. @gigabo that's a good question. what exactly does ignore mean?\nmy initial thought was that it doesn't get any of its dependencies \"linked\" in the bootstrap, but i'm not sure that makes sense.\nfor example, check out this scenario:\n- packageA depends on packageB\n- packageC depends on packageA\ni run bootstrap and ignore packageA, which means that packageA does not have a \"linked\" or installed version of packageB. meanwhile, i bootstrap packageC and \"link\" to packageA like normal. now, when i import packageA into packageC, packageB will not be imported as no form of it exists in packageA/node_modules/.\nunder the new scenario, packageA would be installed as an external dependency of packageC and all would be well. i don't see much use for the ignore flag during bootstrap except for some edge-cases when you simply want to disregard a module.\nit is a bit confusing to think about. once i realized how things would be bootstrapped when you ignore a package, i'm not sure the original way of doing it would actually work.\n. @gigabo makes sense. amended the commit.\n. @gigabo I addressed your comments with an amended commit. For future reference, should I continue to amend commits, or just make another one for things like this?\n. I got this today on my machine, but it went away with another run.\nNode 6.2.1\n1) UpdatedCommand Basic should list changes with --force-publish [package,package]:\n     SyntaxError: Unexpected end of JSON input\n      at Object.parse (native)\n      at new Repository (Repository.js:22:29)\n      at UpdatedCommand.Command (Command.js:17:23)\n      at new UpdatedCommand (src/commands/UpdatedCommand.js:32:83)\n      at Context.<anonymous> (UpdatedCommand.js:79:30)\n      at _initFixture.js:33:5\n      at node_modules/cpr/lib/index.js:239:9\n      at Object.Stack.test (node_modules/cpr/lib/stack.js:31:27)\n      at node_modules/cpr/lib/stack.js:25:18\n      at FSReqWrap.oncomplete (fs.js:117:15)\nThis came up today on Travis, running the stable release.\n1) PublishCommand independent mode as canary \"before each\" hook for \"should publish the changed packages\":\n     done() invoked with non-Error: Error: ENOENT: no such file or directory, stat '/home/travis/build/lerna/lerna/tmp/test-1465582719756-16/lerna.json'\n  Error: done() invoked with non-Error: Error: ENOENT: no such file or directory, stat 'tmp/test-1465582719756-16/lerna.json'\n      at _initFixture.js:30:21\n      at node_modules/cpr/lib/index.js:239:9\n      at Object.Stack.test (node_modules/cpr/lib/stack.js:31:27)\n      at node_modules/cpr/lib/stack.js:25:18\n      at FSReqWrap.oncomplete (fs.js:117:15)\n. this would be fixed using the updated bootstrapping process i've created.\nmore info here: https://github.com/lerna/lerna/issues/215\n. I pretty much came to the same conclusion shortly after I finished working on this. I'm more inclined to have 1 standard bootstrap process. However, I'd like to optimize it using the same techniques outlined here.\n. I pretty much came to the same conclusion shortly after I finished working on this. I'm more inclined to have 1 standard bootstrap process. However, I'd like to optimize it using the same techniques outlined here.\n. this would be fixed using the updated bootstrapping process i've created.\nmore info here: https://github.com/lerna/lerna/issues/215\n. @bradleyayers PR #237 has been very active lately and is ready for final review/merge. give it a try and see if it works for you!\n. If you don't want to set your registry globally in .npmrc, you can use the publishConfig key in package.json to set a registry per package.\nhttps://docs.npmjs.com/files/package.json#publishconfig\n. If you don't want to set your registry globally in .npmrc, you can use the publishConfig key in package.json to set a registry per package.\nhttps://docs.npmjs.com/files/package.json#publishconfig\n. this is a complete refactor of the bootstrap command. i haven't tested on Windows, but it seems like it would work with admin access. not sure the junction type is appropriate when linking directories. would love to get some feedback from Windows developers.\nmy company is using this right now, and it's working great for us (we're on Mac).\ni'm sure there's optimizations that can be done. please take a look at the code and let me know what you think.\n. i could take out the \"optimization\" part and install dependencies in each package's folder like before, then symlink the packages to packages/node_modules. perhaps that would make more sense.\n. @gigabo interesting that NPM doesn't traverse directories like Node to look for dependencies. i guess it would make the command a bit more complex than it needs to be. but i think it would be helpful in determining installed versions that same way as Node resolves dependencies.\n. i'm thinking that maybe we could symlink the external dependencies to each package's node_modules folder, which i think would fix the npm outdated issue.\n. @sveisvei this PR needs a refactor, which i'm hoping to sort out this week. PR #192 handles binary linking and is ready to go.\n. @gigabo i'll work on this over the weekend. i have a few adjustments i'd like to make as well so that npm outdated works.\n. @gigabo having issues with paths in windows. what am i missing? i thought path.join would handle things properly, but it seems like it's using \\\\ as the path separator and expecting /.\n. path.resolve should produce the same thing as path.join. i don't have access to a windows machine to test on. not sure how to proceed. \ud83d\ude15 \n. i could potentially use normalize-path, but that seems hackish to me.\n@laurentdesmet thoughts?\nedit: normalize-path didn't seem to work. installing a windows VM for further testing. \ud83d\ude16 \n2nd edit: getting a windows environment up and running isn't a simple task. i don't have much time to explore this problem locally. i'll just rely on someone else to understand this issue.\n. @gigabo @hzoo finally found the issue!\nL#13 of src/Repository.js is getting the rootPath from running a git command. The result of running this command was a path that contained / (instead of \\) as the path separator. Running the result through path.resolve seems to fix the issue (as seen in the above linked diff).\nwindows tests are now passing!\n. I think your case (and probably others) could be handled gracefully by checking the root package.json and comparing versions with the \"local\" one in the /packages folder. There's a couple cases to consider, but I think they could all be covered.\n1. The monorepo depends on a version incompatible with the one in the /packages folder, which would lead to no symlink in the root /node_modules folder.\n2. One or more packages depend on a version incompatible with the one in the root package.json (if it exists), which would symlink the local /packages version to modules that depend on it.\n. I've installed a few modules manually at the root with no issues. Weird.\nEdit: Updating deps in a package folder and running lerna bootstrap again will cause this due to the packages being symlinked at the root. Workaround: remove package symlinks, install deps, re-add symlinks.\nSeems related to this: https://github.com/npm/npm/issues/9999\n. indeed. this approach requires a lot of diligence with your dependency management, which may be counter-productive. it's been working great at my company. but, we're not using lerna for its intended purpose of managing a public-facing, open-source project with many NPM modules that are being published at regular intervals. we're not publishing any more, and most of the dependencies are shared between the modules. we're mostly interested in the bootstrapping process to link everything together.\nto address your missing dependency scenario: if i forget to add a dependency to a package's package.json file, our CI would most likely pick it up with a build failure rather quickly (assuming we have test coverage).\nit's just as easy to go back to the original approach for package dependencies while still symlinking packages to packages/node_modules folder to prevent conflicts with the repos own dependencies. maybe that's the best approach for now?\nreally looking forward to lerna becoming a lerna repo so we can all make commands that fit our individual organization, and share them with others to adopt or adapt to their liking.\n. @nruhe i'm not sure i fully understand your question. can you elaborate a bit?\n. @gigabo I changed things up a bit to be more like the current bootstrap while still symlinking packages. No longer symlinking to the repo root. Back to packages/node_modules to avoid issues with installing modules that are dependents of symlinked modules.\nside note: after running this the first time, I found that more than a few dependencies weren't defined in some packages.  so much for previous theory! \ud83d\ude06 \nrandom thought: i wonder how much power is consumed installing dependencies in each package's folder as opposed to having a centralized \"cache\". the same for running lerna clean. so much disk I/O.\nfinal thought: AppVeyor is sooooooo sllllooooooooowwwwwwww \ud83d\ude12 \n. I tried that initially and ran into some webpack issues. Also, Webstorm completely died. It doesn't seem to be able to handle circular symlinks. Fixed by excluding those folders.\nI'll explore adding symlinks directly again.\nA possible solution to configurable package locations with packages/node_modules is to exclude certain folders. Seems to be a pretty standard pattern.\n. @gigabo I've added a commit to symlink directly in each package's node_modules folder.\nThis will symlink every directory in /packages. This could be optimized by walking the dependency tree to determine exactly which packages need a symlink. Simply symlinking packages listed in package.json is not enough if package-1 depends on package-2 which depends on package-3. This would mean package-3 also needs to be symlinked to package-1 even though it's not listed in package.json.\nOn a positive note, it seems to work just fine. I'm able to bootstrap all my packages and run a dev server for each of them without issue.\nUnfortunately, after bootstrapping Webstorm can no longer be used. It simply cannot handle the circular symlinks even though all of my node_modules folders have been excluded from indexing. Not sure what I can do to solve this. This will affect many developers. :(\n. It turns out my dependencies were not fully up to date. A side effect of having everything installed at the root. \ud83d\ude16 \nI actually had it like your patch before. Doh!\nEverything is working for me! (including Webstorm)\nI need to update the unit tests and include the patch. Will update soon.\n. @boxxxie @gigabo bootstrap thinks you already have the module/package installed and therefore skips the symlinking. this is for handling the use-case of a package depending on a different version of the one currently in /packages. does that make sense?\npossible solutions:\n1. check the dependency version wanted in package.json and if it satisfies the one in /packages, remove the folder and then symlink\n2. add something to the README to inform users that they should run lerna clean before switching to this new bootstrap\neither way, we should add a note in the README letting users know exactly what to expect.\n. @gigabo I added more intelligent checks for already installed dependencies. Check it out and let me know what you think. Need to add more unit tests.\n. @gigabo if you don't blink during the symlinking step, you might see the progress bar \ud83d\ude1c  (even on the babel repo)\n. @hzoo I think that could be an option. Is having 2 official bootstrap commands confusing to new users? Will this increase issues? Is there something the proxy method provides over (or in addition to) the linking strategy? \nMy original thinking was that a strategy could be applied individually to packages based on need, but that just adds another layer of complexity and configuration. See https://github.com/awakenetworks/lerna/blob/bootstrap-strategy/bootstrap_strategies.md.\nOnce lerna becomes a lerna repo, custom commands will allow new strategies to emerge and the proxy method can live on its own (or the linking method for that matter). I'm really looking forward to this.\nThere seems to be a definitive need for the linking strategy right now, and I'm not sure how far off the transition to a lerna-style repo will be.\nhttps://github.com/northbrookjs/northbrook uses symlinks too.\n. @seansfkelley good catch!\n@gigabo working on it!\n. @gigabo the regex is primitive, but i'm not sure it matters. \u00af(\u00ba_o)/\u00af added a scoped package to the basic bootstrap fixture. updated tests.\n@seansfkelley is this working for you now?\nedit: just reading your comment about directory names not matching for \"reasons.\" this won't handle that scenario.\n. @seansfkelley I just pushed an update that should work for you and the \"normal\" use case\n. @gigabo now using package graph\n. @seansfkelley ok, i'm not very familiar with how scoped modules are installed.\nis this right?\n\u251c /legacy-search\n   \u2514 /node_modules\n      \u2514 /@local\n         \u251c /legacy-client-logging\n         \u251c /legacy-frozen-library-singletons\n         \u2514 /legacy-series-search-commons\nedit: looks like it is. a little search goes a long way ;) will update! https://docs.npmjs.com/files/folders\n. @seansfkelley ok, give it a try now\nedit: @gigabo tested these changes with react-server and babel. all is well. ;)\n. @seansfkelley so your package names don't align with your directory names, right?\n. @AlastairTaft you may need to add a resolver to your webpack config.\nthis is what i have in my webpack config:\njavascript\nresolve: {\n  root: path.join(process.cwd(), 'node_modules'),\n},\nresolveLoader: {\n  root: path.join(process.cwd(), 'node_modules'),\n},\nnot sure if this is your issue, but this helped me.\n. @seansfkelley i didn't file a ticket as there were already a few related ones. i've added node_modules to my ignored files and folders and everything seems to be fine.\n. i'm also running into this when linting all packages\n. A few things to note:\n- the colorized output when a file changes is up for debate\n- unit tests aren't included as i don't think they are needed\n- when an error occurs, the watcher is stopped and the error is passed to the callback\n- the first argument is the relative path of the changed file, this could be an absolute path\n. @thejameskyle the watch command here is intended to run the build command within packages as i'm making changes. this is currently not possible with babel. sure, i can watch files in 1 package and have them build, but not all packages at the same time. am i missing something?\nthis way, i'm free to work on multiple dependent packages at the same time and have them rebuild and hot reload into my webpack dev server. i find this highly useful.\ni never intended the watcher to run npm install and don't see a use case for that.\nhow can i accomplish this without adding a watch command?\n. @doug-wade i don't understand your use case. if all of my modules are bootstrapped, and i want to start watching for changes at an arbitrary time, how do i accomplish that?\n. @doug-wade running npm install after a source file change makes absolutely no sense to me. i have no idea why it was even mentioned as a use case here. this is simply for transpiling changed source files so that it's picked up by a dev server during development.\nif i'm working on packageA which depends on packageB and packageC, i'd want to see the realtime changes of packageB or packageC. with this watcher, my webpack setup would pick up the changes and hot reload them for me.\nnote: the main entry for all my packages points to a transpiled version in the /dist folder.\n. @joscha is lerna not all about convenience and ease of use? i believe the clean command is a product of this thinking. :) while i'm sure some bash magic can achieve a similar end, it can look rather confusing to those not familiar with the command line. not to mention, the above command may not work on all platforms, creating a need to conjure up another way to achieve the same task.\nhow are you currently handling file changes during development?\ni've only rarely used sed and in the most basic way. a quick googling tells me it's not something you master in a few minutes. i was unable to get your command to do anything. i'm sure it's something on my end.\n. @thejameskyle @hzoo @gigabo @joscha is this still something to be considered for lerna right now? i know there's a push to gets things merged so that #174 can be implemented. in which case,  i can close this now and it can come back later as a separate lerna-command-watch module.\n. @nruhe that's exactly what my team is doing with this command. i just rebased. i'd love to get more feedback from others.\ni still need to add documentation.\n. yes, tests too!\ni'm thinking the only thing i could test is the value of this.packagesToWatch for packages that don't have the script. everything else seems to be covered.\n. Should the watch command also take flag values from lerna.json?\njs\n{\n  \"lerna\": \"2.0.0-beta.26\",\n  \"version\": \"1.0.0\",\n  \"watchConfig\": {\n    \"ignore\": \"my-ignored-component\"\n  }\n}\n. @thejameskyle does this feature fit into the scope of what Lerna is trying to do?\n. sure thing. will take a look in the next few days.. @nruhe @gigabo i've updated the PR. i think it's good to go. all tests seem to pass.\n@gigabo i don't have a test for when the ignore and scope flags are set. i didn't see this being tested in other commands that support both. is this something we should be testing?. @gigabo the AppVeyor failure seems to be completely unrelated. :/. @christophercliff PR #237 does exactly this\nit scans your packages and finds common external dependencies, which it then installs at the root node_modules folder. node will walk the directory tree and find the modules it needs there for your packages. this can potentially cause other issues though.\n. @patrickheeney @doug-wade I had a similar idea a while ago, but it didn't get any traction.\nhttps://github.com/lerna/lerna/issues/215\n. noticed that too. thought it may be a typo.\n. @tjbenton this is fixed via PR #192 \n. @thomasklein i believe this is working as intended. however, if all dependencies are hoisted, that's a different story. can you post your dependencies for each of those packages, and what kind of bootstrap you are running?. @thomasklein i think what you're experiencing is the correct behavior. the original issue filed had to do with package binaries (not dependency binaries) being symlink'd.  since each of your packages can operate independent of each other, they should all declare eslint as a dependency, if they rely on it.\ndoes that make sense?. as per the CLI help:\n--ignore [glob]      Ignores packages with names matching the given glob (Works only in combination with the 'bootstrap' command).\nthe ignore flag is only supported in the bootstrap command. submit a PR to add support for the exec command! \ud83d\ude04\nyou may also be able to use a negative glob to achieve the same effect with the scope flag.\n. @ianwremmel what about applying a more complex glob to get the desired effect?\nto match your example above:\nlerna exec --scope 'category-@(a|b)*' pwd\n. @ianwremmel update your glob\nsh\n\u279c  spark-js-sdk git:(master) \u2717 lerna exec pwd --scope \"@ciscospark/@(bin|test-helper)-*\"\nLerna v2.0.0-beta.28\nScoping to packages that match '@ciscospark/@(bin|test-helper)-*'\n/Users/ry/Projects/spark-js-sdk/packages/bin-sauce-connect\n/Users/ry/Projects/spark-js-sdk/packages/bin-walk\n/Users/ry/Projects/spark-js-sdk/packages/test-helper-automation\n/Users/ry/Projects/spark-js-sdk/packages/test-helper-chai\n/Users/ry/Projects/spark-js-sdk/packages/test-helper-file\n/Users/ry/Projects/spark-js-sdk/packages/test-helper-make-local-url\n/Users/ry/Projects/spark-js-sdk/packages/test-helper-mocha\n/Users/ry/Projects/spark-js-sdk/packages/test-helper-mock-spark\n/Users/ry/Projects/spark-js-sdk/packages/test-helper-retry\n/Users/ry/Projects/spark-js-sdk/packages/test-helper-server\n/Users/ry/Projects/spark-js-sdk/packages/test-helper-sinon\n/Users/ry/Projects/spark-js-sdk/packages/test-helper-test-users\n. This is a permissions error. Node needs to be run as administrator in order to create symlinks.\n. @seansfkelley does PR #237 achieve the same result as this?\n. this is a duplicate of https://github.com/lerna/lerna/issues/56\n. what if someone uses the scope and ignore options together? should we only allow one or the other? which one takes precedence?\nwhatever is decided, we'll need to update the documentation to reflect it.\nbin/lerna.js needs an update to show that the ignore option can also be used with exec. https://github.com/lerna/lerna/blob/master/bin/lerna.js#L30\n. \ud83d\udc4d \n. @laurentdesmet there are potentially a few downsides to hoisting:\n- hoisted modules can conflict with existing modules at the repo root. so, where do the hoisted modules go? with #332 on the horizon, we can't necessarily guarantee that hoisted modules are located up the directory tree without conflicting with the root.\n- npm outdated becomes broken. this may not be a deal breaker.\n- package.json dependencies may become stale as a result of modules being installed \"globally.\" this is more of a maintenance issue, but it has bitten me. \nthe last 2 issues may be solved with https://github.com/maxogden/dependency-check or https://github.com/dylang/npm-check.\neven with the above potential downsides, my team and i were using hoisted modules without any major issues for a few months.\n. > Long bootstrap time was a key reason for PouchDB dropping Lerna, for example.\nOur build time went from ~3 mins to ~8mins when we stopped hoisting. It's quickly becoming an issue. We've experimented with keeping node_modules folders around, but that's proving to be error prone when external dependencies need an update even though they meet the dependency requirements.\n\nFeatures like this aren't worthwhile.\n\nI'm not understanding this train of thought when there is clearly a need by the community. I do understand the need for consistency, but it seems that Lerna is being used for more and more use cases and the project should be open to fulfilling those needs.\nIf Lerna becomes a Lerna repo, this will be a non-issue as the community can create non-official commands to satisfy its needs.\n. >  investigated lerna bootstrap --ignore but I thought that only applied to packages that are part of the Lerna repo.\nthis is correct.\n\nThis issue arises when you start using something like browserify or webpack, those are the tools that need to de-duplicate things.\n\ni added a resolver to Webpack with a root of path.join(process.cwd(), 'node_modules') to handle the singleton problem.\n. this is a duplicate of https://github.com/lerna/lerna/issues/56\n. i'm not sure this will work for the symlink'd binaries. it is my understanding that a junction symlink is for directories only.\n. In other words, don't add an ignored package to the packages array in PackageUtilities.getPackages?\nI had it this way originally, but changed it based on the discussion we had in the issue.\n\nI haven't really thought through the implementation. However, removing it from the packageGraph means you just never have access to that information which could cause problems down the road when we try to implement something else so I guess I would prefer that it didn't.\n\nI don't see it affecting packageGraph in the current implementation.\nMaybe I'm not understanding your comment.\n. Ahh, that makes sense. Will update.\n. i knew there was a better way. this works! thanks. amending...\n. should i go back to the ternary operator i had before?\njavascript\npackages = packages.filter(pkg => negate ? !minimatch(pkg.name, glob) : minimatch(pkg.name, glob));\n. fixed\n. @gigabo i concur\n. i've neglected this PR in favor of PR #237, which accounts for this and also adds a .bin getter to Package as you mentioned above.\n. Agreed. Will update.\n. unfortunately, without a package.json in the /packages folder, NPM won't install anything there. using the --prefix and --global flags doesn't help much either as it creates /lib and /etc folders inside /packages.\n. this is slightly unrelated to the PR, but i moved the package filtering to the initialize method to mimic the behavior of lerna run for consistency. \n. want to keep track of bootstrapped packages within the class to display the number at the end, see L#35.\n. point taken. amended.\n. good catch. this was leftover from some previous code.\n. ahh yes. will fix.\n. make sense.\n. yep\n. It's currently bootstrap only based on this conversation: https://github.com/lerna/lerna/issues/117#issuecomment-218952045\nI think everyone is open to making it available for more commands, we just haven't discussed which commands would use it.\n. Good point. My thought was that srcFile would just be ignored if it's not needed. In my environment, I transpile single files as they are changed as Webpack freaks out when you remove and replace the /dist folder while it's running.\nWould it make sense to have a flag for this?\nHere's the watch command I run:\nlerna watch 'src/**/*.@(js|css)' build -- '-- --incremental'\nI know it looks weird. We have a tool that wraps babel and by default, it cleans /dist, then transpiles everything in /src to /dist. The incremental flag take a source file argument and just transpiles that.\n. Good catch!\n. skip = true also skips creating the binary links, which we don't want to do. it will just re-create the same symlink if it's already there.\n. i initially had one, but i never saw it. so i took it out.\n. we won't need the flag any more as that case will be covered by proper filtering, as you mentioned above.\n. correct! i'll filter them out, which will simplify the logic.\n. the final test! \ud83d\ude06 \n. init is the only command to use unlinkSync, and it checks for the file first. the confusing part is that it's calling FileSystemUtilities.unlinkSync(versionLocation, \"0.0.0\");.\nhttps://github.com/lerna/lerna/blob/master/src/commands/InitCommand.js#L87\nnot sure why that second argument is in there.\nnot sure this falls under this PR. i'll remove the change. it's out of scope and has no effect with these changes. i'll file a separate issue.\n. do we even want this check?\n. i don't see any version of unlinkSync in the history having a second argument. not sure why it's here.\n. @gigabo dependencyLinkLocation === installedDepLocation. my money is on this being a logic error.\ni've cleaned it up a bit:\n- use the same path variable for the installed dep. location and symlink\n- always use the built-in nodeModulesLocation on the package (missed this one)\n- check for false value instead of falsy value (should've known to do this)\n- add more clarity when package.json of a dep. is missing\nreact-server is bootstrapping successfully on my end now.\n. could this just be owners: this.repository.owners?\nor destructured in above, just owners.\n. should've been using this from the start. will handle scopes now.\n. i didn't even think to use the packageGraph! i'll update what i have now to use that.\n. > dependencyPackage.location is where the module actually is.\ncorrect!\nhowever, with scopes involved, the destination folder is actually node_modules/<@scope>/<name>, not just node_modules/<name>. i wanted a way to extract the scope and use that for building the path, hence Package.scope.\nfrom above: https://docs.npmjs.com/files/folders\n. > But the scope is part of the name, as returned by package.name, right?\n\ud83d\ude16  correct again! i've been looking at this code too long.\nwill update\n. found it while trying to figure how to destructure without conflicting with an already existing variable with the same name. cool stuff!\n. @bradleyayers hmmm. this should mean that there's already a symlink, but it's not pointing to the right location. this invalid symlink will be removed here: https://github.com/lerna/lerna/pull/237/files#diff-0d9bb533ff943e8e57f7829afef76ab5R250\nthe createBinaryLink method removes any existing symlink before creating a new one.\ncan you go into more detail about why it isn't working?\n. @bradleyayers that's the interesting part, FileSystemUtilities.symlink will remove an existing symlink before creating a new symlink. and if pkgDependencyLocation exists and is not a symlink, it's removed by rimraf.\nis your repo opensource? i'd like to try it out with your code base.\n. @bradleyayers I'm unable to reproduce this on my end. I edited /build/bin/postinstall.sh @ L#5 to point to my local lerna, which is at the latest commit of my enhanced-bootstrap branch. Everything works fine.\n``` sh\n\natlaskit@0.0.0 postinstall /Users/ry/Projects/atlaskit\n./build/bin/postinstall.sh\n\nLerna bootstrap...\nLerna v2.0.0-beta.26\nIndependent Versioning Mode\nBootstrapping 46 packages\nInstalling external dependencies\nSymlinking packages and binaries\nakutil-shared-styles is already installed for ak-editor-bitbucket. Replacing with symlink...\nPrepublishing packages\nEncountered a cycle in the dependency graph.  This may cause instability if dependencies are used during prepublish.\nEncountered a cycle in the dependency graph.  This may cause instability if dependencies are used during prepublish.\nSuccessfully bootstrapped 46 packages.\n``\n. what's weird is thatakutil-shared-stylesis installed normally inak-editor-bitbucketduring theInstalling external dependencies...step.\n. mac, el cap\n. i was about to comment to addpath.resolve()` here \ud83d\ude09 \nran into the same thing with #237 \n. isn't this tested below? https://github.com/lerna/lerna/pull/333/files#diff-0ba4dc63ef6e8436ee3268a9a8d8782eL80\n. why not pass the ignore flag as part of the constructor?\njavascript\nconst execCommand = new ExecCommand([\"ls\"], { ignore: \"package-1\" });\n. lines 34-38 are not necessary if you pass the ignore flag as part of the constructor.\n. these 3 lines can be removed (34-36). by that, i mean, they aren't necessary.\n. this is a bit confusing, because you can't set the ignore option in lerna.json for the exec command. and this line mentions bootstrapConfig, which is for bootstrap only.\n. @evocateur i experimented with trying to get commands such as npm outdated to work by symlinking the hoisted deps at the root to the node_modules of each package. this caused lots of issues with the way npm treats symlinks. IMO, it wasn't worth it.\none of the other problems i ran into was forgetting to add a dependency to a package's package.json file because it was hoisted from another package and everything worked as expected. i thought of creating a tool for checking these sorts of things, but never got around to it.. yes, this warning has helped me out in the past too, especially if you want to have the same dependency version across all packages.. ",
    "zkochan": "I just tried to link the packages manually via the npm link in my monorepo and it worked (on windows). From the thread it seems to me that nobody tried this solution yet.\nThis is what I did. I have package A and package B. Package A is in the dependencies of package B.\n1. I run npm link in package A\n2. I cd to package B and run npm link A\n3. I run npm install in package B\nResults. There is a symlink to package A in the node_modules of package B. npm install is successful and it does not override the symlink (I used npm v3.8.3 and node v5.10.0). I think the npm linking algorithm is smart enough* and can be used for a better bootstrapping in lerna.\n* - observation, I didn't look into the source code yet\n. Might be true. However, should we symlink manually if there is a builtin command for that in npm? IMHO, it is better to use the builtin npm link method because it'll be supported by npm itself\n. I haven't had a situation where I needed to link two versions of the same package. I am guessing it would be more logical to install the older version as an actual dependency.\n. In one of my projects I use a fork of lerna that uses pnpm instead of npm for installing dependencies + symlinking for connecting the packages. It works great!\nMaybe symlinking would work with npm as well. However, using pnpm on NodeJS >= v6.3.0 gives an interesting opportunity to use a shared storage for the dependencies https://github.com/rstacruz/pnpm/issues/244. As a consequence, dependencies are not only installed faster, but they are not downloaded separately for the different packages. This might be off topic, so if someone wants to give it a try I can write more details about it in a gist or somewhere else. Here's the project where I used this approach https://github.com/mosjs/mos/tree/0dadff422bc9e00b831845934cd3c6cd8fdba374\n. OK, great! I think I'll keep this issue open untill that one is done and a typescript strategy is implemented.\n. Hey @calebmer and @bradleyayers!\nI think we have to subscribe to this issue: Nested directory support\n. Well, I created a sample of how pnpm can be used for a monorepo here. I used lerna with pnpm for this project of mine, but I had to make a fork of lerna and replace npm usages with pnpm usages.\n. If it will be configurable, I would suggest to allow specifying patterns.\n. I have a project in which the subpackages are all in the root directory. They're just prefixed with some word. That's why I'd need the possibility to specify a pattern, not just one dir name.\n. Is it going to be merged? Lerna bootstrap is currently not usable on Windows\n. I might be able to work on this today. Have you pushed your latest changes?\n. @laurentdesmet, I rebased your changes on master and #171 then fixed the tests that were not passing on my Windows 10. I am going to make a pull request to your fork now\n. AppVeyor is slower than Travis, so the 3 timeout issues should be fixed by simply increasing the timeouts for those tests\nThe 4th failed test seems to be Windows related because the line ending didn't match. It is weird though that on my machine that test passed.\n. Good job! I am super happy the latest lerna will work on Windows with no more issues!\n. Yes, it uses real npm link and it fixes that issue.\n. yeah, it should. I'll close this one\n. You might be right...\nThere are some more important issues for now that lerna should resolve. Later we can return to this one.\nAlthough I would prefer having the possibility to configure these stuff via lerna instead of creating a fork.\n. I had similar issues. Has to be fixed after merging this pull request https://github.com/lerna/lerna/pull/236\n. This is ready, right? Just documentation has to be added.\n. @evocateur it was interesting to read your opinion about npm vs Yarn. I agree with those points.\nIn the early days of Lerna, I was trying to configure Lerna to work with pnpm. Unfortunately, the original author of Lerna was quite uncooperative :cry:  Later I discovered it was because he was waiting for Yarn to become public; he believed that Yarn was superior to pnpm/npm@4.\nI wonder what are your thoughts about pnpm? We recently implemented pnpm recursive commands that are doing operations concurrently in many packages (https://pnpm.js.org/docs/en/pnpm-recursive.html).\nNow many want to use pnpm in place of lerna but why reimplementing commands that already work well? So I am thinking maybe we could collaborate now if the current maintainers of Lerna are more open to pnpm. @Ciantic hard links/symlinks work well with Node. Some toolings have issues with symlinks (like react-native). Also, some tools don't like pnpm's non-flat node_modules. But most of these issues can be solved by using the shamefully-flatten config.\n@evocateur sounds good to me! :tada: . ",
    "matthewdavidson": "It would be nice to see a symlink / npm link based approach to solve this. It would open up Lerna for use in css/scss projects too e.g:\nPackage A:\njson\n{\n  \"name\": \"package-a\",\n  \"main\": \"index.scss\"\n}\nPackage B:\njson\n{\n  \"name\": \"package-b\",\n  \"dependencies\": {\n    \"package-a\": \"0.0.1\"\n  }\n}\nGiven that npm is being used more and more for front end projects - not just nodejs - this makes sense, doesn't it?\n. ",
    "cchamberlain": "npm link has its shortcomings (at least on Windows) which is the primary reason I switched to lerna. In nested linked projects, npm install will often not do what it would have done with non-linked packages.  Specifically it will not touch dependencies because they are part of another package that is linked and you will commonly get errors regarding missing dependencies. Fix is typically to nuke node_modules, and spend hours rebuilding / relinking all the projects.\nLerna's proxy style is a much closer reproduction of the real world with the caveat of not being able to import one-off files from the package. Creating 1:1 file mappings (module re-exports / soft links?) will allow lerna to remain decoupled from npm's bugs.\n. @thejameskyle \nI'm getting similiar results converting to a lerna monorepo on Windows 10. The commands were working from OSX last night but I get the error -4058 on Windows.\n\n\nlerna-debug.log in top level\nlerna(info)    Lerna v2.0.0-beta.20\nlerna(debug)   Attempting running BootstrapCommand.initialize\nlerna(debug)   Successfully ran BootstrapCommand.initialize\nlerna(debug)   Attempting running BootstrapCommand.execute\nlerna(info)    Linking all dependencies\nlerna(error)   Errored while running BootstrapCommand.execute\n    -4058\nes-proxy package.json deps\n\nkoaproxy-core package.json header\n\nversions\n\n. @thejameskyle \nI'm getting similiar results converting to a lerna monorepo on Windows 10. The commands were working from OSX last night but I get the error -4058 on Windows.\n\n\nlerna-debug.log in top level\nlerna(info)    Lerna v2.0.0-beta.20\nlerna(debug)   Attempting running BootstrapCommand.initialize\nlerna(debug)   Successfully ran BootstrapCommand.initialize\nlerna(debug)   Attempting running BootstrapCommand.execute\nlerna(info)    Linking all dependencies\nlerna(error)   Errored while running BootstrapCommand.execute\n    -4058\nes-proxy package.json deps\n\nkoaproxy-core package.json header\n\nversions\n\n. Yes.\n\n\nThank you!\n. Yes.\n\n\nThank you!\n. Oh wow 0.10, how legacy.\n. Oh wow 0.10, how legacy.\n. Maybe a const hasExecSync = !/v0\\.1?[01]\\.[0-9]+/.test(process.version) test instead?\n. Maybe a const hasExecSync = !/v0\\.1?[01]\\.[0-9]+/.test(process.version) test instead?\n. I tried out beta.24 on Windows to see if anything changed and I do not even receive an error anymore, it just stops. Any roadmap or PR / testing needed?\n\n. Appears to be fixed for me, thanks!\n. @thejameskyle is it safe to say that strictly non-cli build / deploy dependencies can be moved to the top?\n. Is there any difference between lerna publish --force-publish * and the readme documented lerna publish --force-publish=*?\n. Thanks. FWIW, the latter method is working fine for me without escaping, but I'm also on frankenstein zsh Windows.\n. @thejameskyle - I've not found a good use for peer dependencies. Most libs will have react as a dev and peer dependency but I always end up with multiple copies of react when using npm link and this approach. Personally, I write react libs as factories requiring React in to not burden myself and consumers with the multiple copies of React bugs.\n. @AlastairTaft - Sure, my default export is typically a function with signature:\nfooComponent.js (In npm foo-component lib) - 0 React npm dependencies\n``` js\nexport default function fooComponent ( dependencies ) {\n    const { React, ...otherHeavyDeps } = dependencies\nclass FooComponent extends React.Component {\n    /** implementation **/\n}\n\nreturn FooComponent\n\n}\n```\nThen within the consumers app, you can use my FooComponent without it having any peer or dev dependencies on react:\napp.js\n```\nimport React from 'react'\nimport { render } from 'react-dom'\nimport fooComponent from 'foo-component'\n// give factory the React / other dependencies, get back the component.\nconst FooComponent = fooComponent({ React })\nrender(, document.getElementById('root'))\n```\nThis pattern also gives a good place to provide configuration options for the library one level before props.  This example uses classes, but I always use react-stamp to create all my components (react-stamp employs the same factory philosophy).\nFor testing my react components, I'll create a separate project within the same lerna repo and that one takes on the heavy React dependencies.\nHere's a real world example if you'd like to see it in larger scale.\n. Thanks @rygine, appears that was it.\n. I don't think this is the case. My understanding is this:\nYou may install common devDependencies to the lerna repo root but not CLI dependencies. This means that if one of your packages runs a babel command via its npm scripts, you must have babel-cli defined as a dev dependency of that project. The only reason that installing common devDependencies to the repo root works at all is because of node's built-in resolution of node_modules when being required from node code (it walks up the file system until it finds a node_modules directory with the package in it - in this case that could be the repo root).\nThe CLI references called from npm scripts don't resolve the same way, rather they will be able to hit anything in the current projects node_modules/.bin OR the global npm bin.\nWould love to be corrected if I have anything off here.. ",
    "rtsao": "https://github.com/timoxley/linklocal supports Windows. Also I think Windows supports normal symlinks in Windows Vista and newer, so Windows shouldn't be an issue if creating a new implementation and only Vista and newer is to be supported.\n. This fixes https://github.com/lerna/lerna/issues/274, since actual npm link is used, right?\n. What about using https://github.com/feross/multistream (in conjunction with child_process.spawn)? Then output stream order could be preserved.\n. Is this ready to be merged? This would be awesome to have.\n. This PR solves the issue for me\n. You can do npm_config_registry=https://my.npm.registry.org lerna <command> for all commands.. I think this a better solution: https://github.com/lerna/lerna/pull/566. At a high-level, it seems somewhat weird to me that package-{a,b} gets expanded to an array but package-@(a|b) does not. I'm not sure why this is the case.\nThat said, the existing logic was clearly designed to handle arrays (it just so happens it didn't quite handle arrays correctly in the negation case and there were no tests for the array case) so I figured fixing this bug in this way seemed appropriate.. I briefly looked at the PublishCommand tests but it wasn't immediately apparent to me how I could have easily added tests for this. But I'll check again.. Thoughts on tests for this? After digging a little deeper, there's many layers of abstraction in terms of how the commands are tested, so I'm not sure about how best to add tests for this.. Yep, just realized :). Yeah I thought about this but figured rimraf was pretty stable. Alternatively https://github.com/thlorenz/resolve-bin could be used, but I didn't want to include another dependency.. To your idea, is ./.bin/rimraf guaranteed to be set in the same node_modules folder where ./rimraf/ is installed? I was worried this could differ across npm versions or yarn or something. But if that's not a problem, then yeah I like your idea. Would we need to use path.resolve in that case?\njs\npath.resolve(require.resolve(\"rimraf\"), \"../.bin/rimraf\"). @gigabo thoughts?. \ud83d\udc4d sounds good. I'll add a comment.. @gigabo @hzoo If everything looks good it'd be nice to get this released since lerna clean is basically broken right now.. I thought about doing that but didn't want to rock the boat in terms of the existing code. Agreed, that's much simpler, so I'll update the PR with that refactor. \ud83d\udc4d . Should it prompt you for an identifier if one already exists? Or maybe it prompts you but hitting enter will use the existing identifier (or no identifier if one does not exist).. I've updated the PR with this functionality. ",
    "gigabo": "Thanks for tracking down the history here @ainscore.\nAnd thanks for sticking with this @patrickheeney.  That summary is really useful.\nMy thoughts:\nConcept 1: I think #174 is a good direction for Lerna (for all of the reasons I outlined there), but I don't know how soon we'll be able to get there.  Even the first step of making the existing lerna module a package within a Lerna repo involves moving most of the code.  That will break all open PRs, and conflict with all half-baked code people are working on (probably more painful for me than anybody).  So I think step zero there is to clear as much of the PR backlog and fix as many open issues as possible.\nConcept 2: Symlinks seem worth trying again.  Even with the links that @ainscore dug up I'm still having trouble figuring out what exactly caused it to be reverted originally.  I think what we need here is a small, targeted PR that just tries a single strategy.  I still hold out hope that there is a strategy that will work for everyone.  That may just be wishful thinking, but IMO it would be ideal.\nConcept 3: The use of node_modules directories suggested in alle is cool.  It makes me a little nervous, though.  There's so much special handling of node_modules that I worry about unforeseen headaches.\nI'm most bullish on symlinks in the short term.  We have #237 and #263 open currently, though neither is up-to-date.  I'll ping the authors on those tickets to get them rebased.  I'll also need to review them carefully to understand how they're different.\nThis is, I think, the biggest road block for Lerna right now.  It's a hard problem, but worth solving.\n@hzoo, @thejameskyle - Please chime in if I've misunderstood or misrepresented anything here.\n. I don't think lerna updated actually gives me what I want here.\nHere's the output:\n``` bash\n$ lerna updated\nLerna updated v1.1.0\nCurrent version: 0.0.5\nVersion file location: /Users/bo/git/react-server/VERSION\nPackages location: /Users/bo/git/react-server/packages\nChecking packages...\n- react-server\n- react-server-gulp-module-tagger\n```\nWhat I'm looking for is: What exact changes will lerna make before publishing.\nI just want the opportunity to review the commit before it's pushed and published in my name. :)\n. Yes, exactly!  Though the partial work done during the dry run in general will be just fine and I wouldn't want to do it again for the actual publish.\n. So what about this for an interface:\nbash\n$ lerna publish --dry-run # Create the version commit\n$ lerna publish           # Push and publish (create commit if necessary)\n$ lerna publish --abort   # Revert the version commit (if present)\n. Exactly!  If that interface looks okay I'd be happy to set it up and submit a PR.\n. Sounds good.  Thanks @thejameskyle.\n. > can you test out the git push origin --follow-tags on a test repo to see if it works for you?\nWill do.\n\nWhy doesn't v1.1.0 work for you?\n\nFails thusly:\n```\nChecking packages...\nfatal: No annotated tags can describe 'a3a40d6877e075527f3c069923dd7ecec06f24f6'.\nHowever, there were unannotated tags: try --tags.\nThere was a problem publishing.\nError: Command failed: git describe a3a40d6877e075527f3c069923dd7ecec06f24f6\nfatal: No annotated tags can describe 'a3a40d6877e075527f3c069923dd7ecec06f24f6'.\nHowever, there were unannotated tags: try --tags.\nat checkExecSyncError (child_process.js:441:13)\nat Object.execSync (child_process.js:481:13)\nat execSync (/Users/bo/.nvm/versions/node/v4.2.3/lib/node_modules/lerna/lib/commands/updated.js:63:16)\nat exports.checkUpdatedPackages (/Users/bo/.nvm/versions/node/v4.2.3/lib/node_modules/lerna/lib/commands/updated.js:30:23)\nat Object.exports.execute (/Users/bo/.nvm/versions/node/v4.2.3/lib/node_modules/lerna/lib/commands/publish.js:27:23)\nat Object.<anonymous> (/Users/bo/.nvm/versions/node/v4.2.3/lib/node_modules/lerna/bin/lerna.js:41:9)\nat Module._compile (module.js:435:26)\nat Object.Module._extensions..js (module.js:442:10)\nat Module.load (module.js:356:32)\nat Function.Module._load (module.js:311:12)\n\n```\n. > can you test out the git push origin --follow-tags on a test repo to see if it works for you?\ngit push origin --follow-tags didn't work on my test repo either.  I had to push by hand.\nHere's the full output from the two commands:\n```\nbo@bo:bo-lerna-playground (master)$ git push origin --follow-tags\nwarning: push.default is unset; its implicit value is changing in\nGit 2.0 from 'matching' to 'simple'. To squelch this message\nand maintain the current behavior after the default changes, use:\ngit config --global push.default matching\nTo squelch this message and adopt the new behavior now, use:\ngit config --global push.default simple\nWhen push.default is set to 'matching', git will push local branches\nto the remote branches that already exist with the same name.\nIn Git 2.0, Git will default to the more conservative 'simple'\nbehavior, which only pushes the current branch to the corresponding\nremote branch that 'git pull' uses to update the current branch.\nSee 'git help config' and search for 'push.default' for further information.\n(the 'simple' mode was introduced in Git 1.7.11. Use the similar mode\n'current' instead of 'simple' if you sometimes use older versions of Git)\nCounting objects: 4, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 278 bytes | 0 bytes/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo git@github.com:gigabo/bo-lerna-playground.git\n   9e25299..74200b2  master -> master\nbo@bo:bo-lerna-playground (master)$ git push origin v0.0.1\nTotal 0 (delta 0), reused 0 (delta 0)\nTo git@github.com:gigabo/bo-lerna-playground.git\n * [new tag]         v0.0.1 -> v0.0.1\n```\n. > We could publish a 1.1.1 that's just with that extra commit\nYes, please. :)\n. > I guess we can switch to two separate commands to ensure that they don't fail for anyone\nHow's this?\n. Been using https://github.com/kittens/lerna/pull/54 locally.  Does the trick for me.\n. Thanks @hzoo.\n. Asini has this.  We should port that over.. Doesn't git push --tags push all tags?  That seems unsafe.\nWould this work with #36 if tags were passed to gitPushWithTags instead of version?\njavascript\nfunction gitPushWithTags(tags) {\n  execSync(\"git push\");\n  execSync(\"git push origin \" + tags.join(\" \"));\n}\n. Rebased.  I'll update for compatibility with independent mode when that lands, too.  Thanks.\n. Hi @thejameskyle, I missed this over the weekend.  I'll update this morning.\n. Updated and tested.\n. Hi @toddmoorega.  I ran into that error this week.  Turns out there's a fix in master that just hasn't been published yet.\nMy workaround was to just use master instead of v1.1.0 for now.\n. We're actually seeing the same thing.  Assumed we were doing something wrong.  Hadn't considered that it may be related to deploying with lerna.\nHere's our package and here's the corresponding npm page with missing README.\n. Maybe something to do with the package not living at the repo root?\nSeems more likely to be an npm bug than a lerna bug, honestly.\n. Awesome!  Finally! \ud83c\udf89 . Hi @christophercliff, what is the error you're seeing?\nWe're able to lerna publish the React Server repo, which has a few private packages.\n. Hmm... \ud83d\ude15 \nWonder why it's working for us, but not for you.  Doesn't look like it's the same as #286, but maybe similar?\n. Well... this was working for us.  Latest publish (on 2.0.0-beta.24) failed. :(\n@christophercliff - This was recently reported again in #303.  Will continue there.\n. Thanks for considering.  No real interest in just moving the directory here.  Feel free to close.\n. @mxstbr @Ondoher @nruhe Sorry for the delay.  Please take a look at #332 if you get a chance.\n. Configurable package locations are available in lerna@2.0.0-beta.31! \ud83c\udf89 . I'd actually like to use lerna publish --skip-npm occasionally to get READMEs updated (until https://github.com/npm/newww/issues/389 is fixed).  Let lerna get all of the versions updated and push the changes to github, but then manually cd into each package and npm publish by hand.  Unless there's a better workaround?\n. Oh, @eirslett #198 landed two months ago, but I forgot to close this ticket. \ud83d\ude2c \nPlease reopen (or open a new ticket) if that doesn't provide what you need!\n. @NogsMPLS Was this covered by #236?\n. The package.json template in a yeoman generator can't be treated like other packages.  It doesn't have a fixed package name.  It can't be depended on by anything else in the monorepo, but it can depend on others.\nI don't actually have a good idea for a general-case solution.  It would be nice to have the dependencies updated automatically by lerna, but it's kind of a special case.  I would guess that we won't be the last project to run into this, though, given the popularity of yo.\n. lerna-changelog is currently using:\n- \"lerna/lib/Repository\" for lernaJson (config object) and rootPath (repo root)\n- \"lerna/lib/progressBar\" just to present a lerna-like UI feel\nWish list:\n- Would like to get at a Package object, ideally given just a package name.  Doesn't look like such an interface exists even internally currently.  Something simple like: lerna.getPackageByName(<name>).  Want to use this to check package.isPrivate().\n. Pretty sweet progress bar experience with enough git history to import:\n\n. > Can you use the name \"external\" instead of \"foreign\"?\nYes, that's a better name.  Done.\n. --yes was not supported.  Added support and a test.\n. Looks like the latest build may have had a spurious failure in one environment.  I'm not able to retry.\n. Rebased.\n. Rebased again.\n\nblah I hope it's not because of the readme\n\nNope, lerna.js and index.js this time. \ud83d\ude1b \n. > packageName should be the folderName of the imported package not the package name itself\nThat makes sense to me.  I hope they're generally the same, but if they're not then choosing the old directory name for the new directory seems right.\n\nAnother simple error we can add in is if you have already imported that repo in before\n\nOoh, good one.\n. Rebased, added some tests, did these two things and got it running in node 0.10.\n. Need to rebase again and back out the changes to support node 0.10.\n. Rebased and updated docs.\n. Oh, this didn't actually wind up getting addressed by #237.\nThe functionality that was dropped is tracked in #334.\n. Hi @gmmorris thanks for bringing this back up.  I've opened https://github.com/lerna/lerna/pull/507 to port hoisting back from Asini.. I was seeing output like this from lerna run test:\n\nThis patch let me see the stderr output, which helped me track down what was actually going wrong.\n. Looks like a test failed on one of the environments.  npm run ci passed locally (and passes on the other two environments in travis).  Noticed that #179 also had an unexpected failure in one build environment, though the error output looks different.  Something intermittent going on?  I'm unable to restart the test to check.\n. Thanks for rerunning the tests.\n. Hi @lukebatchelor, thanks for reporting.  I think this is a duplicate of #11.  There's some discussion there.\n. Suggested here.\n. This seems like a good first step.  If people start running into failures due to optional deps then it seems not hard to handle them separately during bootstrap and just warn on failure or something.\n@hzoo - This LGTM. \ud83d\udc4d \n. > If a package is ignored, it should be treated as an external dependency.\nHmm... that's actually not what I'd naively expect.  \ud83d\ude15 \nI'd expect \"ignore package foo\" to skip doing anything in packages/foo, but to do the normal things in package/bar, including linking foo as an in-repo dep.  Am I just misunderstanding the --ignore flag?\n. @rygine - The behavior or --ignore is worth examining, but seems unrelated to handling packages with binaries.  Can that part be pulled out into a separate issue or PR?\n. > should I continue to amend commits, or just make another one for things like this?\nFrom my perspective it's nice to have a new commit so I can see clearly what changed.  PRs are typically squashed during merge, so it won't clutter the commit history on master.\n. @hzoo, @thejameskyle - Anything else you'd like to see here?  I want to use this!\n. Taking https://github.com/lerna/lerna/pull/300#issuecomment-238647550 as a \ud83d\udc4d  here.\nThanks for sticking with this @rygine.  This is a big improvement!\n. Rebased.\n. Rebased again and made to work with node 0.10.\nTracking down and killing orphaned processes by hand is a pain.  Any objections here?\n. Rebased again.\n. Heh, we've got this in our package.json:\nbash\n$ grep nuke package.json\n    \"nuke\": \"rm -r node_modules; for d in packages/*/node_modules; do echo $d; rm -r $d; done\"\nMind if I take this?\n. Output looks like:\n\n. Maybe not.  But it is rm -rf...\n. Added support for --yes, which reduces output:\nsh\n$ lerna clean --yes\nLerna v2.0.0-beta.16\nAll clean!\nHappy to remove the prompt altogether if you prefer, too.\n. Yeah, that's strange.\nIt's stubbing ChildProcessUtilities.exec, which is what NpmUtilities.installInDir uses.\nNot able to repro locally. \ud83d\ude15 \n. That whole test was actually invalid.  It was intended to test that dependency linking doesn't happen on warm bootstrap, but this patch actually didn't wind up addressing that (no real need -- it's cheap).\nIt was only incidentally passing locally because I had a premature call to done() in there.  It was a race that was just never lost on my laptop.\nThe remaining two new tests exercise the functionality that is actually provided by this patch.\n. This, plus #204, takes our bootstrap on a warm repo from ~8 minutes to a half second. \ud83d\ude80 \n. Your package that depends on my-sibling needs the dependency to be specified in its package.json.\nIf my-sibling hasn't been published yet you'll need to add that dependency yourself by editing the JSON file.  Once the dependency is added lerna bootstrap will create the \"link\" regardless of whether my-sibling has been published.\n. @spudly Actually a caret-ranged version dependency, like:\njs\n{\n  \"dependencies\": {\n    \"my-other-package\": \"^0.0.1\",\n  }\n}\n^ That assumes that the package.json for my-other-package has \"version\": \"0.0.1\", but my-other-package doesn't need to have been published yet.\nIncidentally Asini recently got an add command, which is basically a yarn-flavored version of what is described in https://github.com/lerna/lerna/issues/200#issuecomment-225063191.  Maybe we should port that over.. We only do it on private modules, so they don't get published.\n. Should probably actually be an error to do it on a public module...\n. > the other ways to declare relative dependencies\nOh yeah, good point.  Thanks for the link to npm-package-arg.\nI've actually realized since opening this that local dependencies are a little trickier than I originally thought.  Specifically, running npm install ../some-local-dependency isn't actually correct if some-local-dependency itself has non-local dependencies on packages that live in the repo.\nFor example with deps that look like:\npackage-a => \"../package-b\"\npackage-b => \"package-c@^1.0.0\"\nIf package-c lives in the repo it should be linked for package-b.\nNot sure what to do about that case.\n. > back then private / local packages were excluded from lerna.\nThey're npm installed now.  It actually works fine on the surface.  It's just with transitive dependencies that it starts to fall apart.\n\nthe bootstrap process needs to be modified to detect that package-c needs to be linked from package-b. \n\nRight, but when is it linked?  It can't happen before npm install, because the target in node_modules gets fresh copies of dependencies.  It can't happen after npm install, because the dependency may be used during install (in a prepublish script).  So, it would need to be linked during install.  I don't know that npm provides the hooks we would need to do this without reimplementing npm install at a high level.\n. Yes!. Somewhat related to #181, though in that case (lerna run) the output from each package is buffered and later emitted by Lerna.  In bootstrap it looks like the output is discarded, so Lerna could use spawn's stdio option to simply ignore it.\n. So the private packages aren't under revision control?\nWould you still like Lerna to update their dependencies (but just not try to commit the updates)?\n. > Respect private: true in a projects' package.json file and don't run the publishing then\nThis should already work.  We have private packages in our repo, and they haven't caused problems.\n\nCheck if a project is a git repository and run scripts on that instead on always trying to use the mono-repo\n\nThat's a cool idea.  It's a totally different way of thinking about Lerna.\nIt would, I think, be a pretty big change.\n\nAdd the externalPackages option mentioned above to include other folders\n\nThis has been suggested before.  Maybe worth reconsidering in this context.\n. Hi @AlastairTaft, sorry to hear you got left in a bad state by Lerna.  Unfortunately private packages don't work in 2.0.0-beta.26.  The fix from #321 landed in 2.0.0-beta.28.  An upgrade should get this working for you.\nIf you get a chance to try it out, and find that it does work correctly, please post back here and we'll close this ticket.\n. Hi @AlastairTaft I think there may be a few things going on here.\nFirstly there's an open issue with --force-publish=*.  Please be sure that shell expansion isn't foiling you here.\nSecondly, does your private package depend on your public package?  If so, Lerna should update the dependency version and the package version locally (within the repo).  It then lists the package as \"changed\".  But Lerna shouldn't publish the package (so npm view @luna/redacted-private-package shouldn't show you the new version.  If you do a git show v0.1.8 you should see that the package.json was updated, though.\n. Yeah, it's all a little confusing.  We recently added annotations for private packages in the updated command.  Maybe we should do something similar for the list of \"changes\" during publish, too...\n. ^ Filed #337 for that.\n@AlastairTaft Sounds like you're basically set here (modulo confusing log output).\nClosing for now.  Please reopen (or, better yet, file a new ticket) if you run into more trouble!\n. > Is there a reason to set the stdio to ignore instead of inherit?\nJust preservation of existing behavior.  Currently the only feedback from bootstrap is the progress bar that ticks after each package completes.  The output from the npm install processes is captured and discarded.  This patch just skips the capture part. ;)\n. > Put it in your package.json#publishConfig for each package\nPackages are not always tied to one registry.\nWe usually publish to the public registry, but sometimes publish a private registry.\nWhen we publish to our private registry we do:\nsh\n$ npm config set registry <private-registry>\n$ lerna publish\n$ npm config set registry https://registry.npmjs.com\nNot ideal, but it works.\n. Lerna skips packages that will later be linked when installing external dependencies during bootstrap.\n. Lerna skips packages that will later be linked when installing external dependencies during bootstrap.\n. Doesn't look like sync-exec is made to work on windows.\nBuilding paths with string concatenation all over.\nBut that should only be an issue on node 0.10, right?\nLooks like -4058 is ENOENT.\n. Yeah, seems like it must be something else.  Here's the full change set for beta-20.\nThe switch from exec to spawn in NpmUtilities.installInDir is another possibility.\nCould it be that npm is a .bat or .cmd file on windows?\n\n.bat and .cmd files are not executable on their own without a terminal and therefore cannot be launched using child_process.execFile() (or even child_process.spawn()).\n. \n\nSo... that change was made to fix #213.  Lerna was slurping up all output from npm and failing if it exceeded maxBuffer.  Don't want to regress there.\n@Daniel15 - Is there a common pattern for working around this limitation of spawn on windows?  Is win-spawn, or something like it, going to be the answer here?\n. @danderu I think #332 should provide what you're looking for here.\nPlease take a look if you get a chance.\n. Looks like cross-spawn-async has been superseded by cross-spawn:\n\nThis module is deprecated, use cross-spawn instead which no longer requires a build toolchain.\n. Hi @laurentdesmet - I just pushed a branch with this PR rebased onto current master, and appveyor failed on node 0.12.  Looks like it didn't make it past npm install.  Any idea what might be going on there?\n. Great!  Must have been a spurious failure... thanks for getting up to date.\n\nThe normalize-newline thing might be nice, but seems worth getting this merged in first.\nSo, this looks good to me.  @hzoo, @thejameskyle?\n. This is awesome.  It's a big change.  It helps with the deep-require problem (#11), but we've got at least one module in react-server that doesn't play well with it somehow (still investigating).  I wonder how common that is...\n. This renders lerna exec npm outdated useless. Npm reports all as MISSING. \ud83d\ude2c \n. Hi @rygine - Looks like this has diverged from master a little.  Please rebase if you get a chance.\n. Weird.  Looks like the test expectation is testDir, which comes from _initFixture.  It's using path.resolve() to generate.  Maybe that produces different output from path.join on windows?\n. Nice find @rygine!\nI'm pulling this down now to try it out and look through the diff carefully. \ud83d\udd2c \n. Hmm... ran into a conflict in the root node_modules/ right off the bat. \ud83d\ude16 \n\nPreviously discussed this here.  Sounds like the issue was the lack of a package.json.  Could we work around that by installing packages explicitly by name?\n. Actually, as I think about it more, using the packages/ directory wouldn't make sense with configurable package locations...\nMaybe the right answer is just to say if you depend on a package from within the repo at the repo root you'll get the repo version of that dependency going forward?  That would be consistent.\nFor now I'll just remove those deps and see where I get, but I think we should have some handling for that case one way or another before this lands.  Surely React Server isn't the only repo it would be an issue for.\n. What is this I don't even...\n\nCan't run npm i ... at the repo root after bootstrap?!\nedit: Looks like there's an open \"big bug\" on NPM that may be related. \ud83d\ude2c \n. Just realized another minor pitfall with this approach: It's really easy to miss adding a dep to a package when it starts using it.  If package-a depends on foo, it will already be available to package-b.  I might just throw a import foo from \"foo\" into some file in package-b and forget to add the dep.\n. Oh, also: If I go into packages/package-b and run npm i --save foo it will put the repo into a different state than would be produced by bootstrap.  Seems like a recipe for weirdness. \ud83d\ude2c \n. Awesome, thanks @rygine.  I'll try this out.\nYeah, AppVeyor... \ud83d\udc0c \n. @rygine - I tried this out with React Server, and it works great!\nMy main concern now is that using packages/node_modules/ is incompatible with configurable package locations.  Really there are only two viable options when packages could be anywhere in the repo:\n- At the repo root\n- In the packages themselves\nPutting the links at the repo root turned out to cause some weird issues, but what about putting the links in the packages themselves?  Would that work?\nIn other words, could we just replace the proxy modules that Lerna currently puts in each package's node_modules/ with directory symlinks?\n. > Simply symlinking packages listed in package.json is not enough\nHuh.  That's surprising.  Each package has access to its deps relative to its actual location.  Is node somehow caching the path through the symlink as the canonical location for a package and walking up that alternate tree to the root looking for deps?\n\nit seems to work just fine.\n\nAwesome!  Will try it out soon. \ud83c\udf89 \n\nWebstorm\n\nwat\nThat's... terrible.\n. > Simply symlinking packages listed in package.json is not enough\nSeems to be enough in React Server... what problems did you run into?\nI tested with this patch, and it worked great:\ndiff\ndiff --git a/src/commands/BootstrapCommand.js b/src/commands/BootstrapCommand.js\nindex 6a2a2b4..0ddb3f9 100644\n--- a/src/commands/BootstrapCommand.js\n+++ b/src/commands/BootstrapCommand.js\n@@ -193,7 +193,7 @@ export default class BootstrapCommand extends Command {\n     const actions = [];\n     this.filteredPackages.forEach((filteredPackage) => {\n       const packageLocation = path.join(this.repository.packagesLocation, filteredPackage.name);\n-      this.packages.map((pkg) => pkg.name)\n+      Object.keys(filteredPackage.allDependencies)\n         // filter out self\n         .filter((pkg) => pkg !== filteredPackage.name)\n         // filter out already install dependencies\nThat should help with webstorm, too, right?  There would only be cycles if there were actual cycles in the dependency graph.  That happens, but it seems not common (or always intentional).\n. Ooh, that's a good issue @boxxxie thanks for catching that!\n@rygine This definitely needs to provide a smooth migration for existing repos.\n. > check the dependency version wanted in package.json and if it satisfies the one in /packages, remove the folder and then symlink\nThis seems right.  If the repo package satisfies the dep then bootstrap should make a symlink.\nAn alternative would be to check if the repo package satisfies the dep and warn if we want to make a symlink but something else is installed there.  Then a lerna bootstrap --force or something could overwrite.  Not sure if that level of caution is really necessary, though.\n. Hmm... guess it's too fast.  Add a setTimeout() in there somewhere? \ud83d\ude08 \nThat's awesome.  Nice to have something that doesn't need a progress bar.\n. So... I think this is finally ready to go.  Looks good to me! \ud83d\udc4d \n. Oh, good issue @seansfkelley!  Thanks for trying this out and tracking down the problem!\n@rygine This will need to handle scoped packages.  Should be pretty simple.\n. @seansfkelley - Yeah, f11278a68f74d182f49634439b3681e50a29816e won't do it.  18b61c32fbec18f6068c3ea72a00242c29b2f458 should be right.\n. @rygine increased maxBuffer in Asini in https://github.com/asini/asini/pull/16.\nI've ported that over here in https://github.com/lerna/lerna/pull/442.. maxBuffer has been increased in lerna@2.0.0-beta.31.  Hope that does the trick!. Would this work for you?\nbash\nlerna publish --skip-git --repo-version=$VERSION\ngit commit -am \"[skip ci] $VERSION\"\ngit tag $VERSION\ngit push origin master $VERSION\nIt's a few extra steps, but if you're scripting it maybe it's not too bad?\n. Oh, yeah, with --canary that would be tricky...\nHaving a --skip-push would work here, but your original idea actually seems easier to work with: Configurable commit message.  How about something like --commit-message='[skip ci] $LERNA_PACKAGE_VERSION'?  The environment variable seems like a natural pair with $LERNA_PACKAGE_NAME.\nOh, wait... that won't work with --independent.  The commit message there is built up from all of the individual package@version pairs. \ud83d\ude16 \nDefinitely seems like there's something we could do here, but if you're not blocked on this I'd say let's wait and see if other people run into similar problems and a good solution emerges.\nClosing for now.  Please re-open if inspiration strikes!\n. Hi @darrylhodgins unfortunately I'm no longer a Lerna maintainer.\nI'd suggest pinging one of the remaining maintainers.  Thanks for adding your input here!\n. Hi @ianwremmel, #321 landed in lerna@2.0.0-beta.28.  That should get publish with private modules working correctly.  Please reopen (or start a new ticket) if you still run into trouble after upgrading.\n. @ianwremmel - Is this covered by #321?\n. I'm not sure generic \"tests\" are the best example here.  Sure, you can omit \"test\": \"mocha .\" from your package.json, but you still need actual tests in each package directory. ;)\nBut eslint?  nsp?  Yeah, might be nice.\nEither way, using a binary from a dependency at the repo root would be great!\n. Oh, nice this would be a handy option for updating READMEs!\nMaybe --skip-temp-tag?  Fits in with --skip-npm, --skip-git.... Hi @rotemmiz, thanks for putting together such a thorough report.\nThis is expected behavior for Lerna, given the current linking strategy for dependencies within the repo.  What negative impact is this having for you?\n. Thanks for reporting @bebraw.  Definitely a deficiency with Lerna (that I introduced with a faulty assumption).  Thanks for reporting.  Will get it fixed up for you.\n. Hi @bebraw and @jsonmaur.  This should be fixed in lerna@2.0.0-beta.25.  Thanks for reporting!\n. Thanks for the link @doug-wade.  I hadn't seen that.\nThe situation here is a little different.  It's a build time circular dependency rather than require time.  In order for the prepublish script to run, its dependencies must already be installed.  In the context of lerna bootstrap that means we must have created the proxy module and run the prepublish script in the dependency already.  If the dependency also depends on the dependent, then we don't know which of the two build first.  Either, both or neither may use the other during prepublish, so it may not matter which is built first.  But since we're just guessing, and the order may change between runs, we issue an instability warning.\nAs for the guess itself: I chose to pick the package with the most dependents.  This unlocks the most packages for the next batch, which increases potential concurrency and improves performance.\n. @hzoo, @thejameskyle - How does this patch look to you?\nThis has been reported twice now.  Should get something out soon to unblock people.\n. Just ran into this. :(\nMaybe related to #286?  I was not using --canary.\n. Just realized that previously all of our private packages were using relative dependencies, like:\njavascript\n    \"package-b\": \"../package-b\",\nThis was to work around #11.  But we recently eliminated deep requires, so we have normal dependencies that Lerna can link now.\nI guess this has been an issue with private packages for a while. \ud83d\ude2c \n. So, I think the right behavior here would be to update the dependency versions in private packages, but not try to actually publish them.\nWhat about lerna updated?  Private packages would be be modified by lerna publish, so they'd get updated.  Maybe output with a (private) tag?\n```\n$ lerna updated\nLerna v2.0.0-beta.24\nChecking for updated packages...\n\ngenerator-react-server\nreact-server\nreact-server-cli\nreact-server-core-middleware\nreact-server-data-bundle-cache\nreact-server-integration-tests (private)\nreact-server-test-pages (private)\n``\n. Hi @yvele, #321 landed inlerna@2.0.0-beta.28`.  That should get publish with private modules working correctly.  Please reopen (or start a new ticket) if you still run into trouble after upgrading.\n. Hi @jsonmaur, thanks for reporting.  This was previously reported in #299.  There's a patch ready in #302.  Just need to get that merged and published!\n\nGoing to close this now, since it's a dupe.\n. @steelbrain That would be great to have in Lerna.  Why only patch in your fork?\n. @bebraw Did the in-publish workaround get you past this?\n. Thanks @bebraw that looks like a reasonable workaround.  Maybe not ideal, but pretty straightforward.  The aggregate package setup you're using here strikes me as not so common.  I think unless this comes up again we can leave it at that.  Please reopen if you disagree.\n. > It has become common practice to expose a package's main CSS file via the style: '' descriptor in package.json.\nWhoa, that's cool.  I hadn't seen that, but it makes sense.  Any reading you can recommend?\n\nI'd be willing to submit a pull request\n\nAwesome!\n. @boxxxie - That's a recent addition to Lerna.  You might need to npm i to pick it up.\nsh\n$ grep eslint-config-babel package.json\n    \"eslint-config-babel\": \"^1.0.1\",\n. Thanks for the link @nruhe.  Does @boxxxie's PR look like it provides what you're looking for?\n. Hi @nruhe, this should work for you in lerna@2.0.0-beta.28, which includes #237.\nIf you get a chance, please verify and close if so.\n. Hi @boxxxie - Thanks for taking this on!\nLooks like travis is failing with some linter violations:\n\nYou can run the linter locally with npm run lint.\n. @boxxxie Sounds like you got this figured out.  The source is in src, but the published module uses lib, which is build by babel.  You can npm run build (or npm install) locally to compile.\n. Hi @hugoduncan, not sure if Lerna has a solution for that, actually.\nThe deps on sibling packages are linked by lerna during bootstrap, but as far as npm.commands.install is concerned they're just normal deps.  So, unless you've just published you won't get up-to-date modules.\n. Hi @christophercliff.  Not sure I understand.  What is failing?  Not the publish, but a subsequent bootstrap?  Or something else?  If you can provide an error message or, better yet, steps to reproduce the error that would help.\n. Do you mean literal x.x.x-beta.x?\nA version like 1.0.0-beta.3 should satisfy ^1.0.0-beta.2.\n\n. Okay, going to close this for now.  @christophercliff if you run into this again please reopen and paste the error output (and steps to reproduce, if possible) here.\n. Hi @loklaan - This looks great!  Thanks for adding tests.\nThe appveyor failures were spurious.  Took a couple of re-builds, but they're all green now.\nThis LGTM. \ud83d\udc4d \n. Ugh, yeah I think that's spurious.  I'm actually not able to kick off rebuilds on appveyor.\n@hzoo?\n. Going to merge this.  It's a real pain to publish in a repo with private modules without it.\n. Thanks @Scarysize.  This will go nicely with #321.\n. Hi @doug-wade I think this is expected behavior currently.  lerna exec bails out when it encounters an error.  Maybe it would be better to try all packages?  Maybe an option to try all packages?\n. > is the output after the first error erroneous, then?\nMore incidental.  Scripts are run concurrently, with up to four active at once.  The output after the first error is likely from the other children that were in-flight when the error was encountered.\n\na lerna-specific command for reasoning about dependencies \n\nYeah, looking at dependencies across all packages in the repo is an interesting topic.\nThere's some more discussion in #259.\n. Thanks @rygine!\n. Default output is unchanged:\n\nBut now log level can be adjusted:\n\n. This moved to Asini, too.\n. Oh actually wound up not needing to use kill.\n. @dtothefp Would lerna publish --canary --yes work for you?\n. @steelbrain Nice!  Looks like the main difference from a user perspective is this uses globs instead of directories?  It's also wrapping the items in objects ({\"glob\":\"...\"}).  My thought there is eventually we'll wind up with config for package groups.\n. Oh, it's still all packages!\nThe globs resolve to package.json files for packages that are managed by Lerna.\n. That reminds me... I'm missing documentation here!  Also new tests... \ud83d\ude05 \n. Oh, whoops meant to close this!  Moved to Asini.  Had some issues beyond documentation.\n. Asini is a fork of Lerna.  I need features that are unavailable in Lerna and ran into a situation where I'm unfortunately no longer comfortable contributing here.\n. This is great!  Thanks @steelbrain!\n. I think what @rygine originally did in #237 made sense: Hoist the most common version.\nIdeally packages within a repo will generally depend on compatible versions.\nA lerna pin dep@version command would help with that.\n. > What are the technical reasons that you can't hoist the dependencies?\nAny use of install path.\nFor example our module tagger generates logger names such as react-server.core.util.PageUtil using the path to a module relative to the installed location.\nIt may be possible to rework that specific package to use working directory, or module.parent, but I doubt we're the only module authors to have relied on the install location in some way.\n\neven with the above potential downsides, my team and i were using hoisted modules without any major issues for a few months.\n\nYeah, we've been manually hoisting deps in our internal (private, not managed by Lerna) repo for a while now.\nThe main down-side of manual hoisting is the actual dependency relationship is lost.  Which packages need React?  How about lodash?  Far nicer to maintain dependency relationships per package and automatically factor out the commonality (where possible) at the framework level.\n\nI'd rather have consistency\n\nHi @thejameskyle, welcome back!\nThat sounds like an argument for hoisting as an option rather than by default.\nGiven the benefits (listed above in the issue description) this is, in my opinion, actually critical for the continued success of Lerna.  Long bootstrap time was a key reason for PouchDB dropping Lerna, for example.  Another example is Redfin's internal monorepo, which we're hoping to manage with Lerna.  Hoisting is a prerequisite for us, both due to performance and enforcement of \"singleton\" modules such as React.\n. @thejameskyle What is your vision for the future of Lerna?\nDo you want Lerna to continue to improve in ways that make life easier for the developers who rely on it?  Do you want Lerna to continue to live at the heart of diverse and important projects?\nThese are the sort of features that are not just worthwhile, but necessary for Lerna to continue to grow and thrive.  I understand and appreciate the urge to keep software simple and focused.  Part of what makes Lerna such an important tool is that it addresses a single urgent need: Working more effectively in an environment with many node packages.  Features that improve that effectiveness do not detract from that focus.  They enhance it.\n. > If Lerna becomes a Lerna repo, this will be a non-issue\nIf Lerna becomes a Lerna repo this will be even more important, since it will affect us every day. \ud83d\ude06 \nBut, seriously, I don't think pluggable commands are going to be a panacea for satisfying everyone's needs with Lerna.  If lerna bootstrap doesn't work well, then it should be improved.  If the main purpose of pluggable commands is to finally allow devs to build a better bootstrap, that's a signal that Lerna has failed to welcome the sort of improvements from the community that allow an open source project succeed.\n. > Solve the problem where the problem exists\nIsn't Lerna a tool to help solve problems associated with monorepos?\n\nadditive features will make it more difficult to use.\n\nThere is always a tradeoff between power and ease of use.\nDoes an option to automatically hoist dependencies cross some threshold?\nWhat is the answer for devs who want this feature?\n\nwe were able to use react across packages\n\nWe also have solved some of the problems that dependency hoisting addresses.  We've manually factored deps into the repo root to improve performance.  We've used webpack configuration to make React a singleton in the client bundle.  It's a pain.  I'd rather not have to deal with that myself.  I'd rather the tool I use for managing my repo do it for me.\n. Yeah #174 is probably a major version change.\nBut 2.0 has been a long time coming... and we have some issues that IMO are more urgent:\n- Configurable package locations\n- Automatic hoisting of external deps\nI don't think those involve breaking changes (hoisting might, depending on whether it's optional).\nMaybe a for-real 2.0 could happen soon?  And the urgent usability issues could be 2.x?\nThen #174 as 3.0?\n. Gonna merge this.  Just a straightforward bug fix for ancient node.\n. Merging in to https://github.com/lerna/lerna/issues/431, since that's more complete.. Hi @Daniel15.  Did you try reducing concurrency with the --concurrency option?\nThe default is four child processes.  If reducing that helps, we could add a note about using --concurrency to limit memory usage to the README.\nCould even look at reducing automatically in low-memory environments...\n. Looking at this again, I think it may actually be different from #259.  If I'm reading this right, this issue is about pinning to exact versions within the repo, while #259 is about managing external deps.\n@Gongreg pointed out that https://github.com/lerna/lerna/pull/426 seems to address this issue.. Okay, let's see if we can get this thing into shape and out the door.\nThe AppVeyor failures look real.  I remember when we did this on Asini we had to make some tweaks to tests to get it working on Windows.  Might just be a matter of adding some normalize(...) wrappers in the BootstrapCommand tests?\n@rygine Does that sound right?  Or was there also an actual code change we did?. Looks like the tests had just somehow gotten weird when this was reopened from https://github.com/lerna/lerna/pull/332.\nI swapped out the first commit for a modified https://github.com/asini/asini/pull/1, and added a commit at the end to deal with tests that changed while this PR was in-flight.  Will merge this non-squash to preserve attribution for the contributions from @rygine and @bclinkinbeard.\nThis wound up with a nicer API than it started with.  Thanks everyone!. @thejameskyle If you're going to take my work please preserve authorship.\n. And this one?\nAlso worthwhile to preserve the original commit messages.  They're often helpful down the road.\n. Opened https://github.com/lerna/lerna/pull/605 for pluggable npm clients.\nsh\nlerna bootstrap --npm-client=yarn\nSo much faster! \ud83d\ude80 . FYI https://github.com/lerna/lerna/pull/638 addresses a major source of trouble with Yarn in beta.38.. @billschaller That should be addressed by #638 when it lands.  It didn't make it into beta.38, unfortunately.. Hi @lukebatchelor yep, that was a bug.  Nice catch!  It was resolved in https://github.com/asini/asini/pull/15.\nProbably easier to just put together a targeted patch to support --scope in bootstrap rather than try to start pulling stuff over from Asini.\n. This landed in lerna@2.0.0-beta.31! \ud83c\udf89 . Thanks @lukebatchelor merging should be fine.  Going to squash it onto master either way. \ud83d\udc79 \nFWIW the \"fix each conflict of each commit manually\" thing is actually a feature of rebasing.  It allows the resulting commits to apply cleanly on top of the new base for a linear history.  It can be a pain when there are a lot of them, but sometimes I find it's actually easier to see how they should be resolved when they pop up in the context of the individual commits that introduced them.\nSo, in Asini we followed this change set up with https://github.com/asini/asini/pull/15 and then https://github.com/asini/asini/pull/18.  Would you be interested in/willing to port those over here? \ud83d\ude01 . @lukebatchelor Please rebase this when you get a chance now that #386 has landed in master.. Hi @lukebatchelor yep, just getting back from the holidays.  Will take a look! \ud83d\udc40 . This looks good to me.\nAs for deps vs dependents I don't see that as a big issue.  deps is a common short form of depencies.  Don't really see it used for dependents much.  Not opposed to the long form if others feel strongly.\nThanks for your patience @lukebatchelor, and for the nice clean change set. \ud83d\udc4d . Thanks @lukebatchelor!. @ryb73 Yeah, that sounds worthwhile.  Thanks!. Yikes!  @cchamberlain Do you know if this is windows specific?. @seansfkelley #386 has merged.  Please rebase this when you get a chance.. @xaka I think @seansfkelley was planning to make some tweaks before we merge.. Awesome!  Thanks @seansfkelley!. @seansfkelley I updated the title to try to reflect the current state of what this provides.  Please improve it if you've got better wording.  It will go into the changelog entry for this PR.. I think those node 0.10 failures may actually be real.  It looks like inquirer@^1.0.0 depends on native Promises.  This might be blocked on dropping node v0.10 support.. Oh, this is cool!\nDoes it even need to be an option?  Seems like it would be useful as default behavior, maybe with a warning message if you're not currently on master?. @hzoo Is there a babel issue we can link to that tracks when support will be dropped there?. @L8D Interesting.\nSo this would be a flag that would leave the repo with uncommitted changes to package.json?\nI'm not sure I understand your current workflow.  Does --skip-git in the initial publish not give you what you need?. Oh!  Okay, that makes sense.\nSo... yeah that workflow is kind of awkward.\nWant to add a flag (and some documentation and tests \ud83d\ude01 )?. Oh boy, I hadn't heard about that yet.  Thanks for bringing it up @wizardzloy.\nDo you have a link to some documentation about this change?. Yeah, looks like we might have some work to do before npm 5 lands.\nThanks for the research @wizardzloy.  You interested in taking this on?. Seems like Lerna's behavior should be consistent with the active npm.\nSo I think we would need a hybrid of those two options?  If I'm understanding the release notes right in npm 4 prepublish is deprecated, but still supported.\n\nwe've added a prepare command that runs in the exact same cases where prepublish ran, and we've begun a deprecation cycle for prepublish itself only when run by npm install, which will now include a warning any time you use it that way.\n\nSo for npm 4 the logic should be equivalent to your option 1, but for npm < 4 we should just use prepublish without checking for prepare (since npm 3 doesn't even know about prepare).  And I guess if prepublish is totally de-supported in npm 5 we should eliminate the fallback there entirely. \ud83d\ude2c \nWe might also want to include a warning if we use prepublish on npm 4, similar to what npm itself does.\nThanks for tackling ths @wizardzloy!. Whoa, that looks cool @szarouski!\nNot sure where that would fit into the README. :thinking: \nMaybe see if you can find a natural place and make a PR?. Hmm... thanks for reporting this @JaapRood.\nSo, it sounds like:\n\nWindows requires an absolute destination (for junctions)\nLerna is therefore always using an absolute destination\nThis breaks heroku, which builds and then moves into place\n\nIs that right?  Would a solution here be to only convert to absolute destinations on windows?  That would leave build/move broken on Windows, but it would at least allow build to work on windows and also allow build/move to work in other environments.. Oh, I see that's exactly what you've suggested in the issue title. \ud83d\ude06 \nThat sounds great.  @JaapRood Are you interested in taking this on?. Interesting... I think I agree that it makes sense to link relative deps within the repo.  Lerna has generally followed a design guideline that packages in a Lerna repo should still work if they're taken out of the Lerna repo.  Relative deps break from that and tie your project to the layout of your repo.  But I don't see any reason for Lerna to prohibit that.  Maybe documentation could just include a word of caution.\nI would call this an enhancement rather than a bug, since it hasn't ever been supported (yet) as far as I can tell.\n@dmfenton Are you interested in taking this on?. @dmfenton Please rebase this when you get a chance.. @hzoo @rygine @evocateur I'd like to get some more eyes on this.\nIt seems straightforward, but it it also seems like it could introduce unexpected behavior?\nReally just want to make sure we've thought carefully about (and are fine with) the implications.. @L8D Why is this a hidden option?\nOr, asked another way, what makes this option useful?  Could you write that down as documentation so other users could more easily benefit from it?. @Gongreg Yeah it looks like it does.  Thanks for making that connection!. > I wasn't gonna spend time writing documentation\nsigh\nOkay, thanks @L8D.  Added https://github.com/lerna/lerna/issues/510 for documentation.. Also added https://github.com/lerna/lerna/issues/511 for durable configuration in lerna.json.. Nice @chrishelgert!  The color makes it really stand out.\nWant to give the output from lerna updated and lerna publish similar treatment?\nedit: Added https://github.com/lerna/lerna/issues/431 to track this.. Hi @tiagojsalmeida I think the --repo-version option may provide what you're looking for.. Oh, good issue @mAAdhaTTah.\nI think this should just be a matter of adding a package@version tag to the git repo.\nMaybe import could do that automatically? :thinking: . Thanks for verifying.  Interested in adding automatic tagging to import? \ud83d\ude01 . Oh, whoops, the publish portion of this was already covered in https://github.com/lerna/lerna/issues/337.\nI'll close that since this is more complete.. This landed in lerna@2.0.0-beta.31! \ud83c\udf89 . Yikes, that's a new one.  Thanks for reporting @ericwooley.\nIs <some-large-repo> up on GitHub, by any chance?  Looking for a way to repro this.. Okay, great.  Thanks for tracking down an open repro.\nIt looks from the error message like there may just be some filenames that we're failing to convert.  The import command does some search-and-replace on patch files produced by git am.. Like maybe something similar to https://github.com/lerna/lerna/pull/346, but for added files?. Yeah, if you wanted to use the actual command that import uses I think it would be:\ngit format-patch -1 a76cb3c23 --stdout. Easiest is probably to jump on slack.. Talked with @ericwooley a bit on slack, and it sounds like an added file with a space in the filename may be the culprit here.\nIn that case the diff looks like:\ndiff --git a/path/too/foo file.png b/path/to/foo file.png\nMy guess is this is tripping up the replacement pattern here, which looks specifically for non-whitespace in the filename.. That sounds like a good approach.  Thanks for taking this on @ericwooley!. Whoa... that move all of the history in to the packages/<my repo> path?\nHow is the commit history attached?  With a merge commit?\nThat sounds really promising!. > logging the file doesn't seem to work.\nOh, hmm... would be nice to preserve this. \ud83d\ude16 \nBut, on the other hand, we've had some issues with this import strategy for a long time.  A simpler solution that always works might still be better even if it doesn't provide perfect history?\nDo you have an idea about what the errors you're still seeing with your PR branch might be?. > Patch parsing is aggravating.\nYeah, it is. \ud83d\ude1e \nGlad you were able to get past this error.  Interested to learn what the next error is.. Based on previous discussion it looks like this was originally planned but may have just fallen through the cracks.\nThanks for resurrecting this @tofuness!. Thanks for taking this on @JaapRood!. Yep, please rebase.\nThe travis build checks out via git fetch origin +refs/pull/435/merge:, which makes sure it's running against current master.  Good thing in this case!. Once you rebase you can run npm test to see the failures locally.. Oh yeah that makes sense.  Sorry for leading you astray!. Nope, I think it's ready.  Thanks again @JaapRood!. Heh, well... AppVeyor passed, but it looks like this has a conflict with https://github.com/lerna/lerna/pull/386 which just merged before it.\n@chrishelgert Please rebase when you get a chance and we'll get this in!. Interesting... :thinking: \n@kwelch Could you provide some context here?  What does this patch provide?. I wouldn't call it an anti-pattern, but it's definitely not well supported right now.  I don't think it's part of the public API, either, so I worry a little bit about your relying on it. \ud83d\ude2c \nIs there a way you could use the CLI instead in your workflow?. Yes we definitely want a public API!\nNot sure I understand exactly what you're suggesting with the factory functions.. Hi @marekcirkos good question!  It seems like for bootstrap it shouldn't be necessary.\nInterested in tracking down what's causing it? \ud83d\ude01 . Oh!  Nice find!\nWell... maybe that could be more targeted.  What commands actually need to initialize it? :thinking: . :goberserk: \nThose whitespace warnings shouldn't be fatal...\nI wonder if we could use --ignore-whitespace or one of the other whitespace options to git am?. I wonder if we can do this without creating a new command?\nLike, with an option in lerna.json?\njs\n{\n  \"lerna\": \"2.0.0-beta.31\",\n  \"proxy\": true,\n  ...\n}\nThat way the bulk of bootstrap logic could be shared instead of duplicated.\nBug fixes / enhancements wouldn't need to be done in two places.\nWhat do you think?. Uh oh.  Thanks for reporting @lukebatchelor.\nA few details that might help:\n\nWhat  command were you running when you hit this?\nIs the repo open on GitHub by any chance, so we could try to repro?. Hmm... looks like it's originating from lerna-cz-changelog?\n\nI wonder if that's using PackageUtilities directly.... Oh, yep.  Nice find.  That's not part of the public interface for Lerna.\nThe change is pretty straightforward, though:\njavascript\nfunction getAllPackages () {\n  return PackageUtilities.getPackages(new Repository);\n}\nNeed to get https://github.com/lerna/lerna/issues/167 done!\nMeanwhile... I think the fix here is in cz-lerna-changelog. \ud83d\ude2c . @tofuness Yeah, this seems like a useful option.  Want to take this on?. Good point about just using spawn and good question about lerna-debug.log @seansfkelley.\nCould have lerna-debug.log keep a rolling tail of output, or could just disable collection for immediate output.  Seems easier and less side-effect-y to just disable for immediate output?  FWIW we worked around the issue you ran into in #372 in Asini by just disabling collection during tests.. Opened https://github.com/lerna/lerna/pull/608 for this. \ud83c\udf7b . Yeah, this would be awesome!. Good point @jeffwhelpley.\nThere's actually a PR in-flight for lerna run in dependency graph order: https://github.com/lerna/lerna/pull/412\nThat wouldn't help for watching, though, where all commands would be running at once.\nThat might be an argument in favor of a dedicated watch command as suggested by @rygine.. I think https://github.com/lerna/lerna/issues/446 is the main thing standing in the way of this.. @scottmas Lerna has a default concurrency of 4.  You can increase that with the --concurrency option.. Hi @casesandberg sorry you ran into trouble!\nThis looks like https://github.com/lerna/lerna/pull/444, which should be fixed with the next version of Lerna when it's published.\nMeanwhile I hope the workaround suggested by @posva will get you un-blocked.\nIf that doesn't work you could try this, which was suggested by @evocateur in #444:\nbash\ngit clean -fdx && npm i --cache-min=Infinity && lerna bootstrap. This is interesting.\nGoing to hold off on looking closely at it until #412 is in, since the diff is inflated right now.. Hi @Alex-fun the --force-publish flag is actually meant to cause a package to be published when it otherwise wouldn't (because it didn't have any changes).  It doesn't prevent other packages from being published.\nYou may be able to use the --scope flag to get the behavior you're looking for:\nlerna publish --scope lerna-1. Oh, interesting.  That's a subtle distinction.  Thanks for the improvement @xaka!. @heruan Yikes!  Sorry you ran into trouble.\nLerna uses git tags to keep track of published versions.  It looks like the tag for the version you were in the middle of publishing may have been created before the command failed.\nYou can see the latest tag with this command:\n$ git describe --abbrev=0 --tags\nv2.0.0-beta.31\nAnd you can see the associated commit using the tag name:\n$ git show v2.0.0-beta.31\nThe tag should refer to a commit on your current branch.  If you haven't made any commits since the failed publish then it should be HEAD.\nA few things to check:\n\nWere any of the packages actually published?  You can check with npm dist-tag ls <package-name>.  Packages may have been published but may not yet have received the latest tag.\nWere your branch and tag pushed to your remote repo?  The commits may exist only locally.\n\nIt's important to know the state of your packages in the npm registry and your repo in your remote repository before proceeding.. Hi @F1LT3R, sorry you're running into confusing behavior here.\nMy guess is it's not actually the use of console.error, but rather that the process with the failed assertion exits with a non-zero exit code.  Since the tests are run as part of your prepublish script an exit code signaling failure indicates that the prepublish failed.  A failed prepublish for any package means a failed bootstrap for Lerna!\nIf you want to run the tests but ignore failures during bootstrap you might be able to set up your package.json with something like this:\njavascript\n{\n  \"scripts\": {\n    \"prepublish\": \"do-my-build && (npm test || true)\",\n    ...\n  }\n}\nBut, then again, if you're ignoring the results of your tests then why run them?\nYour bootstrap would be faster without. \ud83d\udc79 . Hi @F1LT3R, looks like you may have packages/markserv-cli set up as a git submodule?\nLerna's publish command makes a git commit with the changes to the repo (version and dep updates) during publish.  You could try publishing with the --skip-git option.  That will leave the file changes as un-staged local modifications.. That's a cool structure, but unfortunately it's not well supported by Lerna.\nLerna expects all of the packages to live in a single repository (a \"monorepo\").  It provides an \"import\" command for pulling packages in, preserving their git history.  It doesn't know how to deal with multiple repos aside from that.. Nice catch @btiwaree!. Heh, thanks @sdgluck. :). Yeah, it's not really straightforward to automatically publish a new non-canary version right now.\nSomething like what np does might be nice:\nVersion can be:\n      patch | minor | major | prepatch | preminor | premajor | prerelease | 1.2.3\nIt looks like the grep you're using to produce your --repo-version is actually returning the current version?  It may be that you need to increment the patch level on that to get what you're looking for.  Also the -c (--canary) option you're including prohibits Lerna from tagging your newly published version as \"latest\", so npm won't provide it by default.. > I've never opened an issue on github before, this is my second month employed in IT :)\nWelcome! \ud83d\ude00 . Oh, interesting.  Should be possible.  Want to give it a shot? \ud83d\ude01 . Yes, this would be awesome!  It's been suggested before, so let's merge this into https://github.com/lerna/lerna/issues/142.\nEither of you interested in taking it on? \ud83d\ude01 . Thanks @szarouski this looks cool to me.\nThat gif is pretty big, though.  @hzoo how do you feel about it?. Hi @doug-wade sorry you ran into trouble.  There's a fix for this issue in master, but it hasn't been published yet. https://github.com/lerna/lerna/issues/451 has some suggestions for workarounds that should get you unblocked in the mean time.. Are the failing tests here just waiting for a rebase onto #557?. @doug-wade #484 just merged, so if you rebase AppVeyor should be happy (no more 0.12).. Will be nice to not have to worry about these anymore.  Thanks @doug-wade!. @doug-wade This is cool, thanks for putting it together!\nIf you get a chance please do the README/test thing. ;) . Good idea @emirotin!  Want to take it on? \ud83d\ude01 . Preserving the original commit messages still seems like a good default to me, so I'd prefer opt-in personally.. Yeah, @evocateur relaxed the check in Asini and it was really nice.  Want to port that over here?. @lukebatchelor It's opt-in with --hoist on the command-line or \"hoist\" in lerna.json.\nDefault behavior is unchanged.\nThe hoist option is boolean with no argument (hoist everything), but it takes an optional glob.  There is also a --no-hoist, which takes precedence, so you can easily hoist everything except some subset.\n@Reinmar That's awesome! \ud83d\ude80 . Reviewers please take a look at the original three PRs listed in the description above.  There are three distinct change sets here.  The main additional enhancement beyond hoisting is exposure of a .getOptions() method on command objects.  This provides values from both lerna.json and the command-line.  It allows for easy, consistent configuration of all flags at the global, command and invocation levels.. Updated to apply cleanly to current master.\nAny \ud83d\udc4d \ud83d\udc4e on this?  Would be nice to get React Server back onto Lerna.. >  I guess there's always --nohoist...\nThat's the default.  Nothing is hoisted without --hoist.. > I would prefer not to merge this until we've found a way to seed each modules' node_modules/.bin\nThe executable is linked into each dependent package.  That is one of the key benefits provided by automatic vs manual hoisting of devDependencies.\nThis broke recently in Asini (and horked React Server).  We haven't gotten to fixing it yet because we're hoping that we'll be able to migrate back to Lerna and halt development on Asini.  That regression is not part of this PR.. Yeah, looking into it now.  The port from Asini seems not to have gone well. :(. @noherczeg Hmm... actually I tracked down the hoist slowness to a poor interaction with https://github.com/lerna/lerna/pull/547.  Filed https://github.com/lerna/lerna/pull/568 as a patch for that.\nThat wouldn't affect where things are installed, though.  It just makes bootstrap slower than it needs to be.\nWhen you run bootstrap do you see warnings about version mismatches preventing hoisting?. I wonder if npm is swallowing your option.  You could try terminating npm's options, like:\nbash\nnpm run lerna bootstrap -- --hoist\nOr you could try putting \"hoist\": true into your lerna.json.. This is awesome!  Thanks @tdanecker!\nCould you also add a note about the new option to the README?. Removed the [feature] prefix from the title for inclusion in the changelog.. Thanks @dortzur!. @dortzur #507 has landed in master, so this.getOptions() is available in command objects! \ud83d\ude80 . Discussion moved to https://github.com/lerna/lerna/issues/521.. Hi @phra sorry you ran into trouble.  Lerna should install dependencies before running the prepublish script.\nCan you provide a repro for this?. Nice catch @xaka!. Thanks for reporting @MatthD.\nHmm... is this a bug?  Should --skip-npm push the commit and release tags?. Thanks for the suggestion @malonecj.  I think https://github.com/lerna/lerna/issues/395 should provide what you're looking for when it lands.  Please reopen if not.. Good idea @arekkas!  Fortunately lerna clean actually does support a --yes flag.\nI guess the docs just need to be updated to reflect that.. Yep, nice catch.  Merging into #492.. For React Server we use automatic hoisting (as provided by https://github.com/lerna/lerna/pull/507) to pull React to the root of the repo.. @hzoo Want me to regenerate this with lerna-changelog to get links in?. Updated and opened a PR to add the config: https://github.com/lerna/lerna/pull/531. Yeah, I just copied from React Server and deleted Performance and Security which Lerna doesn't have github labels for.  Please set it up however you like it.. Thanks @diogofcunha!. Looks cool!  You should add yourselves to the \"Who's using Lerna?\" section of the website.. Yeah, that would be handy.  Good suggestion @roblg.  Want to take it on? \ud83d\ude01 . Thanks @wtgtybhertgeghgtwtg.  IIRC the interface for inquirer changed between these two versions.  We may need to update our usage.. Thanks @roblg!. @roblg I've edited the title of the PR as prep for inclusion in the changlog.  Please tweak as you see fit.. Yeah, a test that actually runs through the shell would be nice.\nIf nothing else the existing tests will need to be updated.\n\n. Oh, good idea @wtgtybhertgeghgtwtg.  If it's already a transitive dep seems like we may as well.. Ugh, mid-air collision. Thanks @doug-wade!. Thanks for fixing this up @roblg.\nBTW - Now that #507 has landed this could be easily updated to support durable configuration via includeFilteredDependencies in lerna.json.  Command objects now have a this.getOptions() which retrieves merged options from config and the CLI.  Similar to https://github.com/lerna/lerna/issues/511.. Thanks @wtgtybhertgeghgtwtg! \ud83e\udd18 . Agreed, thanks @rtsao!. LGTM.  Thanks @rtsao!. Hi @guigrpa sorry you're running into trouble.  What Lerna command is failing for you?\nCan you link to the repository where this is happening?. Would be nice to have a coverage report.. Whoa, speedy @doug-wade is speedy. \ud83d\ude80 . What would we have to do to get a GitHub integration for this and see it in PRs?. Sorry for the trouble here.  This should be resolved in lerna@2.0.0-beta.37.. Nice catch @xtuc.  That was removed from the documentation when https://github.com/lerna/lerna/pull/365 stopped creating the folder, but looks it was added back into the documentation in https://github.com/lerna/lerna/pull/517.  I guess the resolution there should have been to update the website rather than the README.  Should be solved by building the website from the README, which I think is underway in https://github.com/lerna/website/pull/14.. Thanks @loganfsmyth, this is an important improvement.  I actually wonder if it should even be an option.  Is there ever a time when publishing out of dependency order is appropriate?. Yeah, I guess there's value in just being consistent across commands.  At least the default is to sort.\nIncidentally noticed that the sort option is only supported on the command-line.  Added https://github.com/lerna/lerna/pull/596 for durable config via lerna.json.. Looks like the master build failed after this landed.\n\n. Thanks for the patch @rtsao!\n\nit seems somewhat weird to me that package-{a,b} gets expanded\n\nThat is weird.  Is the shell expanding it?\nAre you in a directory where ./package-a/ and ./package-b/ are direct children?\n\ndidn't quite handle arrays correctly in the negation case\n\nNice catch!  Thanks for adding a test for it, too. \ud83c\udf89 . Hi @garthk sorry you're running into trouble.  Does this delay happen every time you run lerna bootstrap, or just the first time?  Are you able to link to the repo where you're seeing this behavior?. > Shouldn't it be called package-manager instead of npm-client or something?\nIt's the client that Lerna uses to connect to the npm registry.\nNPM calls yarn and the like \"third-party registry clients\".. @k3n Yep, you can use the --loglevel option.\nLerna also write all logs to a file on failure, so depending on your CI setup you may be able to cat that on failure.  For example in Travis you could do something like:\nyaml\nafter_failure:\n  - cat lerna-debug.log\n. Oh, wow.  This is great!  Thanks @cif!\nI think this addresses https://github.com/lerna/lerna/issues/461.. Yep, looks good.  Thanks @cif!. Hi @cyberthom scripts are actually run in parallel in separate child processes (with concurrency governed by the --concurrency option), but their output is captured and emitted only when child processes complete.\nI think https://github.com/lerna/lerna/pull/608 may provide what you're looking for, which is immediate output from child processes.. >  binaries (like eslint) are missing/unavailable to packages.\nOh, they sure are! \ud83e\udd26\u200d\u2642\ufe0f \nThat's... unfortunate.\n\nI am in favor of changing the target of --hoist to the closest common directory, but also open to other solutions.\n\nWhat if the closest common directory is the root?. Minimal repro of the problematic Yarn behavior:\nsh\n$ cat package.json\n{\n  \"dependencies\": {\n    \"eslint\": \"^3.16.1\"\n  }\n}\n$ npm i rimraf\n$ ls node_modules/.bin/\nrimraf\n$ yarn install\n$ ls node_modules/.bin/\neslint\nIt doesn't remove node_modules/rimraf/.  It just removes the link in node_modules/.bin.. Just put up https://github.com/lerna/lerna/pull/638 to address this.\nIt lets Yarn know about all of the dependencies we expect to wind up in any given location.. \nOh, nearly missed this.  Summary comments in the review box still aren't picked up by GitHub's slack integration, and they appear above the line-level comments with which they're associated, so they're really easy to miss.  I avoid them for this reason.\n\nIs this impossible to test?\n\nThat seems unlikely. \ud83d\ude10 . Yeah, could alternatively try with --concurrency=1.\nMay need to add support for passing options to npm clients.  Or have per-client presets internally?. Thanks @YasserKaddour!. @ryancole Lerna has a default concurrency of 4.  You can increase that with the --concurrency option.\nThis came up recently in https://github.com/lerna/lerna/issues/449#issuecomment-287184448, also.  A --watch option was suggested.  Seems to make sense.. > Not sure if bug, or just visual output doesn't represent what actually happens under the hood\nYep, just a matter of output.  Multiple --scope values are handled as an array.  The comma-separation is just how the array gets printed.\nYou could combine --scope=*api* and --scope=*site* in a single glob as --scope=*{api,site}*.. Whoa, this is cool!  Would definitely like to use this feature.\n. Oh, this actually conflicts with #54 also. :grimacing: \nHappy to update again if this lands first. \n. Added.\n. externalExecSync is also called from the execute method, so the options need to persist until then.\nCould, alternatively, attach only externalRepoPath to this and build up the exec options inside externalExecSync, if you'd prefer.\n. Added some more detail here.  I worry that using lerna-changelog as an example might be confusing, since it has \"lerna\" in the name, so I continued to use placeholders.\nI also lower-cased the section heading to match the changes from @kaicataldo over the weekend (which I've picked up via rebase).\n. Sure, though I've tended not to when concatenating a single string constant with a single variable, since a template string is actually longer in that case.  How about I add some space around the operator?  That's the same length, but involves less punctuation.  Seems to fit with context, too.\n. Whoops!  Thanks.\n. > we should add space-infix-ops\n188\n. :metal: Thanks, didn't see that.\n. Hey, I don't want to let this slip through the cracks, but I'm actually not sure what the TODO is here. \ud83d\ude05 \n. The diff is cluttered here due to indentation changes (added a nested describe layer).\nI've left the original test unchanged, and added three additional tests.\n. Beautiful.  Thank you.\n. Ooh, nice.  Didn't know about that.\n. Yeah, I spent some time trying to come up with a simpler check here.  What you posted above is nicer looking, but it is actually the inverse of what we want: It returns an error when the target directory does not exist.\n. I like it!  Always glad to be rid of a variable. \ud83d\udc79 \n. This is getting into the range where a template string might be more readable:\njavascript\nreturn `${dependency}@\"${allDependencies[dependency]}\"`;\n. Might be worth including a warning against using this with a major version bump.\n. With meow should this be --only-explicit-updates?\n. This might be safer to put into this.repository.packagesLocation.  It's possible that the repo root has a dependency on a package from within the repo, which would conflict with the symlink.  If the __ROOT__ deps went into packages/ then they would have a clean directory with no potential for conflict.\n. Would be nice to add a bin getter in src/Package.js for consistency. Then this could be:\njavascript\nconst srcBinLocation = path.join(linkSrc, dependency.bin);\n. bin can be an object.  Should probably support that here.\n. Actually, dependency.bin isn't guaranteed to be a string.\nCould normalize inside the getter to always return an object.  Else the logic here will need to account for that.\n. Great!  So it should be easy to back port. \ud83d\ude01 \nThe functionality provided by this PR is independently useful and, frankly, less controversial than #237.  I don't want it to get delayed by association.  I'd like to see this merge, independently, as soon as possible.  That would have the added benefit of reducing the scope of #237, which is pretty big.\n. Done.  Now childProcess.\n. Packages remain queued until their immediate dependencies have been bootstrapped.\nGiven:\nA -> B\nB -> D\nC -> D\nBatch order will be:\n[D]\n[B, C]\n[A]\nThis batch scheduler assumes that the dependency graph is acyclical.\n. > unrelated to the PR\nGenerally speaking, smaller more targeted PRs are easier to review and therefore tend to get merged more quickly.\nThis PR adds much needed functionality, but it has gone through a number of iterations that each included a different set of unrelated changes.  These other changes may also be valuable, but it would be easier to consider them on their own merit if they were showcased in dedicated PRs.\n. I think the binaries should be linked before runPrepublishForPackage.\nA package may have a prepublish script that uses a binary from a dependency.\n. What does this path.join do?\n. It doesn't look like the caller uses the type parameter?\nAll other asynchronous methods in FileSystemUtilities take the callback as the final argument.\n. Thanks, that makes it easier to read. \ud83d\udc4d \n. Maybe better to put the output from stdout before the error output, so that the errors are more likely to remain on-screen after exit?\n. Yes.  I initially thought I was going to have to propagate the signal through to children on CTRL-C, but it turns out that happens automatically.\nPushed a patch that simplifies this (and rebased).\n. Thanks for cleaning this up.  Easier to read this way.\n. Is --ignore bootstrap-only?  Would be nice if it worked for other commands...\n. Got it.  Thanks for the background.\n. Probably good to get stdout on error here, too.\nCan just follow the pattern you established in RunCommand.js.\n. Hmm... does it always make sense to automatically pass srcFile as an argument?\nWhat if I'm just doing lerna watch src/* prepublish?\n. Yeah, the file argument breaks if it's not expected:\n\nOne option would be to make the file available as an environment variable, similar to this.\nSo if I wanted to use it I could say:\nbash\nlerna watch src/* eslint -- --fix $LERNA_CHANGED_FILE\nThat would also allow custom placement of the source file argument within the arguments array, so it's not just forced to be at the beginning.\n. I think this will throw if there's nothing at path.  Should this try/catch or guard with pathExists.sync()?\n. Wait... haven't we already installed repo deps that don't satisfy semver as external dependencies by the time we get here?  We should be able to just filter those out above.\n. Should also skip if the symlink exists and is correct, right?\n. Would be nice to have a progress bar in here, even though it's quick.\n. Seems like this shouldn't need a flag...  Isn't the logic just:\njavascript\nif (directoryExists) {\n  warnAndemoveDirectory\n}\nif (wrongSymlinkExists) {\n  warnAndRemoveSymlink\n}\nif (!symlinkExists) {\n  makeSymlink\n}\n. Have you tried on babel? \ud83d\ude01 \n. Good question.  Presumably if we're calling unlinkSync we should be reasonably sure that there's something to unlink, and it's an exception otherwise.  I think that's the logic behind the behavior of the *Sync methods in node's standard library.\n. Code evolves. ;)\ndiff\n-        this.logger.info(\"Creating VERSION file.\");\n-        FileSystemUtilities.writeFileSync(versionLocation, \"0.0.0\");\n...\n+      this.logger.info(\"Removing old VERSION file.\");\n+      FileSystemUtilities.unlinkSync(versionLocation, \"0.0.0\");\nThis looks safe to remove.  Nice catch.\n. Hi @rygine - Just tried this out on my primary React Server repo (been testing on a fresh clone until now).\nRan into some unexpected errors:\n\nI think there a few things going on here:\n- The isDepSymlink !== dependencyLocation check is true when isDepSymlink is false.\n- I think this whole block should be looking at dependencyLinkLocation (defined below) instead of installedDepLocation.  In other words it looks like we're intending to check what exists in the location where we want to put a symlink, but are instead checking what exists at the actual package location...\n. Yep, that did the trick!\n. Looking at this again, I'd say it's better to remove the guard for now.\nThat would be more consistent with the other *Sync methods in FileSystemUtilities, too.\n. Oh, yeah.  Weird that the linter didn't catch that...\n. Looks like that linter rule got dropped accidentally.  Re-added and fixed this up.\nNice catch @hzoo!\n. Hmm... we should be able to get the location from the package object, which we can grab from the depedency graph.  That's a little more future proof against configurable package locations, too.\nIf you drop this map you should be able to get the package using the dependency name:\njavascript\nconst dependencyPackage = this.packageGraph.get(dependency);\nconst dependencyLocation = dependencyPackage.location;\n. Heh, looks like you did that while I was typing this. :D\n. This seems like it's getting more complicated than it needs to be...\ndependencyPackage.location is where the module actually is.\npath.join(dependentPackage.nodeModulesLocation, dependencyPackage.name) is where it needs to get linked to.\nSeems like we have everything we need without running a regexp over anything?\n. But the scope is part of the name, as returned by package.name, right?\nIt's just returning the name value from the package.json, which has the scope in it.\n. This is cool, btw.  Hadn't seen this destructuring syntax before.\n. :feelsgood: \n. The section below just got indented a bit.  Easier to view with a no whitespace diff.\n. Relative deps can be specified without the file:// as well.\nCan/should we handle those, also?. Seems not too fancy?  The supported dependency forms are pretty limited.\nI guess we can start with this, and I'll file a ticket for improving support.. Hmm... so this also doesn't check whether the referenced directory actually exists.\nWhat is the behavior if I have a typo in a relative dependency path?. It's not obvious to me just looking at this that it works.\nI mean, I know it does (thanks to your tests), but I'm not confident about operator precedence between ?: and +.  This would be a clearer for me with a set of parentheses.. Agreed.  I just want to know what to expect.\nRegardless of what this tool's job is, if someone encounters an error while using it they'll show up here for help. \ud83d\udc79 . Yep, sure is.  Thanks for checking!. Whoa, git am supports URL encoded filenames?  Nice find!. Oh!  I see, you're un-doing the URL encoding.\nI like this solution.  Much nicer than trying to make a regex that handles the spaces!. Is there any danger here of regex meta characters in a filename messing up the match?\nOr will the URL encoding take care of that?. So this is taking a path that was already absolute and making it relative?\nWhere are we making it absolute?  Can we just skip that part in non-windows environments?\nMy worry here is we might take a dep that was explicitly absolute and make it relative.. Yeah, sees nicer to have it at the end like this. \ud83d\udc4d . Thanks for the explanation. \ud83d\udc4d . I think this bit is unnecessary?  The type argument is ignored outside of windows.\n\nThe type argument can be set to 'dir', 'file', or 'junction' (default is 'file') and is only available on Windows (ignored on other platforms).\n\n. Yeah, wonky whenever we're not running interactively.\nMaybe a better check here would be whether we're connected to a tty?\njavascript\nif (process.stdout.isTTY) {\n    ...\n}. Filed https://github.com/lerna/lerna/issues/447.  Thanks for looking at this @taion.. Reading through the docs again it actually looks like a relative path would be fine on Windows, since it will be automatically converted to absolute?\n\nNote that Windows junction points require the destination path to be absolute. When using 'junction', the target argument will automatically be normalized to absolute path.\n\nAnd if the path coming in here is always absolute can we just skip this whole conditional?\nThen we could also avoid adding a dep on pathIsAbsolute.. Oh, this is nice to have factored out.  Thanks!. Oh, boy.  Yeah, I appreciate that making it opt-in for bootstrap is consistent.\nI guess a repo that does need it can just add it to lerna.json.. Might be nice to make it owner to be consistent with the npm owner command.. Nice that these are encapsulated so they can be stubbed for tests.. ... from package?. There's actually a name getter, so you should be able to just do pkg.name here.. Don't forget to update the class name here (still LsCommand).. Should we git add it, too?. I wonder if a nicer way to handle a registry in Lerna config would be to specify it on the command line when we use npm commands.  That way a change to the registry in lerna.json would have an immediate effect across packages.. Can we make this master in the newly created repo?. Should we delete the temporary branch?. :squint: 16 million ops/sec not enough here? ;)\n\n. I'm a little confused by the logic here, actually.  Looks like the outer if/else branch we're in here has already locked us into exporting a single pkg, and this.pkg actually isn't even used after this?. @seansfkelley That sounds great.\nThanks for the suggestion @doug-wade.. It means that something you wanted to have hoisted couldn't be hoisted.  That's at best going to slow down your bootstrap, and at worst going to cause errors due to multiple instances of a dependency when you expected one to be shared.  This warning has saved us a few times in React Server!. IMO it only really makes sense to put deps in the leaves or the root.  Anywhere else is going to either require special configuration or have weird behavior (or both).  Would a lerna clean help with the interference with npm commands at the root?\nActually come to think of it I don't think lerna clean will remove anything at the root. \ud83e\udd14 . Oh, good thinking handling this case.  Hadn't even considered it.. Huh?  Was this test just wrong?. Tags start with v, right?  Should this be v0.0.0?. Actually, come to think of it... should this use the version from lerna.json?. So do multi-line strings still work with this?. Ooh, nice can we use real Object.assign now! \ud83e\udd18 . Can/should we cache this?  Seems wasteful to shell out for it every time when it's constant.. Oh, I've just been doing $(npm bin)/mocha path/to/test.js.  Guess that's the same.\nNice addition to the docs!. Heads up: This is going to conflict with the automatic hoisting PR.\nMight help the merge to trim it down to just the add of owner for now and handle the reorder separately.. No trouble with this if called with a package/owner pair that's already set up?  Same with remove, below?. Should this warn and proceed?  Could be trying to remove an owner that was added before owners were stored in lerna config.. Ooh, nice tip @xaka!. Yeah, maybe premature optimization.. Nice! \ud83d\udca5 \ud83d\ude80 \ud83d\udc1b \ud83d\udc85 \ud83d\udcdd \ud83c\udfe0 . Linter's choking on the single-quotes here.. This relies on the internal structure of the rimraf package not changing.\nCould we combine this with a walk up to .bin so we can use the public interface?\nSomething like:\njavascript\npath.join(require.resolve(\"rimraf\"), \"../.bin/rimraf\"). Yeah, I guess relying on the relative location of the .bin/ directory isn't much different from relying on the location of bin.js in rimraf. \ud83d\ude06 \nI'd like to avoid adding a dep if possible.\nMaybe a comment to the effect of \"this will break if the location of the executable changes within rimraf\" would be enough to help us fix things up quickly in the unlikely case that it actually moves.. Yeah, that might be cleaner.  Will be an unnecessary stat in most cases, but that's cheap.. It's not that it fails, it's just slow compared to calling rimraf in-process.. Good call.  Added some tests.. Another good call.  Added some more tests.. This is causing the linter to fail.  Looks like it should just be removed?. This shouldn't be necessary.  this.flags in the context of the UpdatedPackagesCollector comes from the command's .getOptions(), which should pull in values from publishConfig automatically.\nIs this failing to pick up the option in some context?. @evocateur Good thought!  The constructor name is actually pulled from the object bound to this rather than the class where the method is defined, so it should work as intended in this case.\nHere's a small script to demonstrate:\n```js\nclass Foo {\n  constructor() {\n    console.log(this.constructor.name);\n  }\n}\nclass Bar extends Foo {}\nnew Bar;\n```\nThis prints Bar rather than Foo, since that's what is instantiated.\nThanks for thinking through this so carefully!. Hmmm... this is getting a little roundabout.  Maybe simpler at this point to just have a top-level if/else?\nLike:\njs\nif (negate) {\n  return glob.every((glob) => !minimatch(pkg.name, glob));\n} else {\n  return glob.some((glob) => minimatch(pkg.name, glob));\n}. :squint: [1,3,4,2]?\nIs that a consistent order, or are these just all racing against each other?. Whelp, the build passed, so... fixed forever! \ud83d\ude01 . That makes sense.  Thanks for checking!. Because that's the only command it's used for. \ud83d\ude01 \nMaybe better to say \"Must be a compatible npm registry client\"?. Hmm... actually I wonder if --repo-version is the right option for this.  That's really meant specifically for non-independent versioning.  And actually looking at this again it will only work correctly for independently versioned repos.  It won't update the version in lerna.json unless the return value from getVersionsForUpdates includes a version (singular) value.\nIt might actually be better to add a new option that works for both independent and non-independent repos.. Sounds interesting, but not sure I understand clearly.  Can you give an example of how you'd like to see it organized?. Seems fine to me.  We removed it in Asini, too.\nWe could actually also remove the cross-env, too, since that was just for getting the environment variable set consistently across environments.  Then we could drop the dep, I think.\n@hzoo @evocateur @doug-wade Any objection to dropping this?. Looking at the caller again I think in independent mode version (singular) is expected not to be set.  So this should either set versions (independent) or set version (not).  Kind of a weird interface. \ud83d\ude16 . Where is the actual publish happening with --skip-temp-tag?. I always just use js instead of json formatting for code blocks.  It's more forgiving if I mess something little like that up. \ud83d\ude05 \njson:\njson\n{\n    ...\n    \"foo\" {\n       \"bar\": \"baz\",\n    }\n}\njs:\njs\n{\n    ...\n    \"foo\" {\n       \"bar\": \"baz\",\n    }\n}. Previous thread: https://github.com/lerna/lerna/pull/607#discussion_r102284105. Ooh, nice!  Thanks, updated. \ud83d\udc4d . ",
    "k3n": "Is there a summary of what was actually implemented anywhere? I've read through this issue, the changes, and the docs, but I'm unclear what the net-net is.\nMy specific question is: in my root package.json I have a dependency foo. This dependency is also present as packages/foo. I would like the app to install whichever version of foo is currently present at packages/foo. Additionally, I'd like to be able to modify packages/foo and have the changes reflected in node_modules/foo. \nShould I use a simple file: link, or is there something else that I should do?\nThanks in advance.. Thank you, though I'm still battling through my problem.. Ok, I think my issue is that I was trying to have a 'top-level' module. Once I made everything a package, it works as expected.. @timoxley \nIs it --concurrency=1 or --concurrency 1 or either?\nThe docs demonstrate the latter.. Follow-up: is there any way to increase the log level?\nedit, I'm silly:\nhttps://github.com/lerna/lerna#--loglevel-silenterrorwarnsuccessinfoverbosesilly. @gigabo Thanks! Unfortunately, it's Jenkins, but hopefully I can do something similar there.\nAt current, I believe this is a resource (memory) issue, but that may change as I keep looking into it. I'll update once I learn more.. Does appear that this was a memory issue on the Docker host. Closing.. ",
    "shimmerjs": "I'm still experiencing issues symlinking when running lerna bootstrap.  I have 2 packages, one depends on the other, both are under packages/, lerna boostrap reports that it has symlinked the two, but packages/a/node_modules/b is not a symlink to packages/b, so changes are not propagated.  . @aga5tya I fixed this by specifying the dependencies with explicit versions (instead of latest) and then lerna bootstrap realized they needed to be linked.  Moving forward, publish will keep them in sync.  This is confusing behavior granted npm itself no longer is this strict about linking, but definitely workable.  Cheers.. ",
    "aga5tya": "I have the exact problem as @shimmerjs and @k3n,, i have to manually run lerna bootstrap to get the changes across, anything i am missing out on here ?. Pruning all modules before hoist prevents me from trying to cache node_modules,, usually to skip npm spending time to re-install from scratch when my common shared dependencies of packages are not changed very frequently. Any other ways to get around to cache when intended to ?. @evocateur: Not sure if i am clear, but the suggested commands do a clean install. \nMy need is to not re-install from scratch again as clean. Since my dependencies are intact, need to  ideally to avoid pruning and instead reuse already installed/hoisted packages. \nThis opens up possibilities to where i can use a separate docker image containing only node_modules hoised and reuse it whenever needed (more like an offline/cached bootstrap).. @evocateur , Now i understand the pruning logic, my bad. \nI feel there should be an option to extract the temporary package.json created that has all the hoisted(computed) dependencies. Right now afaik the following happen:\n1. Backs up original package.json\n2. Create a new package.json(temporarily) that has new computed dependencies. npm install this.\n3. Replace the backed up package.json.\nShouldn't there be an option where if a flag/config is passed, this temporary file can be extracted out before step 3 happens.. @danielo515 that sounds similar to what i want to achieve. Could you please point me onto some example repo? would help us alot.\nIdeally we need the node_modules deps to be part of a docker image and skip npm install (unless something gets changed in package.json) during re-building/re-deploying at production, for a docker image that has app code/package. Skipping npm install for deps and caching on repeat builds saves us around 5 mins. \nRight now i'm hoisting all dependencies using bootstrap command so i have a single node_modules directory at lerna root that packages utilize., But unclear as to how do i map these to docker images so they talk to each other on production environment (something like linking docker volumes/images)?. ",
    "liuchong": "I'm also want a feature which let me \"require/install/link a package without publish\". ",
    "natew": "Edit: testing out with regular npm prepublish\n. @RickWong that looks perfect, thank you\n. Tried with git versions 2.6 and 2.7:\ngit rev-list --tags --max-count=1\nusage: git rev-list [OPTION] <commit-id>... [ -- paths... ]\n  limiting output:\n    --max-count=<n>\n    --max-age=<epoch>\n    --min-age=<epoch>\n    --sparse\n    --no-merges\n    --min-parents=<n>\n    --no-min-parents\n    --max-parents=<n>\n    --no-max-parents\n    --remove-empty\n    --all\n    --branches\n    --tags\n    --remotes\n    --stdin\n    --quiet\n  ordering output:\n    --topo-order\n    --date-order\n    --reverse\n  formatting output:\n    --parents\n    --children\n    --objects | --objects-edge\n    --unpacked\n    --header | --pretty\n    --abbrev=<n> | --no-abbrev\n    --abbrev-commit\n    --left-right\n    --count\n  special purpose:\n    --bisect\n    --bisect-vars\n    --bisect-all\n. We've added it and are using it now in our branch :)\nhttps://github.com/motion/lerna/pull/4\n. Any update here? I'm trying to run lerna from Dockerfile, running into this which would require adding unnecessary git dep to docker.. anyone figure this out? I tried using negative glob: !(react) and no dice.. Thank you Daniel, was exactly what I was looking for.. Did not, it still installs basically everything into top level folder for some reason.. How would you run babel watchers at root? From what I understand it takes an in dir and and out dir, not multiple. For now I've just written my own script, outside lerna/npm, which has lowered memory usage now 800Mb.\nAlso it's all contextual. npm run is great, sure, but in this context, 20Mb overhead per package is not a great. I do think this issue falls a bit more on the babel side though, and I'm coordinating with them.. ",
    "GabeMedrash": "I'm having this same issue.\n. ",
    "danielo515": "Is this considered to be fixed ? I'm facing the exact same issue on 2.0.0-rc.5. Well, here I am again, facing this problem at 2.0.0. Thanks @evocateur,\nI'll check that link. For me it is failing on publish with --skip-npm on a brand new repo. I just checked the provided link, and it's something I already did. My repo one has two tags, the oldest one which is non annotated and another one which is annotated. Lerna update does not fail, but it does the publish . This is still happening randmoly.\nI have several annotated tags created by lerna (using lerna publish). I have added a couple of commits and run lerna publish and now it fails again with the same error. This never happened to me before, I can't understand what is wrong.\nAny help will be appreciated\nRegards. Ok, here I am again with a bit more of information. \nSeems that having the current branch unpublished to the remote makes this error to trigger. I don't see why this happens at all, but it happens. Maybe it's because lerna makes the assumption that I want to publish changes to the remote repository, and it does not check if that is possible beforehand to provide an useful error message.\nI have published the branch and now it works, but sadly lerna now says that there is no package to update, which is not true. How can I say to lerna what is the correct tag to compare with ?. Here I am wit some (I hope) more useful information.\nI just made a small change to a file (the version on the package.json) and now lerna detects the changes correctly and proposes the proper updates (I'm using conventional-changelog).\nSo in summary\n\nIf you are in a non-published branch, lerna will fail on publish or checking updated with the \"no tag can describe \" error\nIf you publish that branch later (after all the work is done ) lerna will not detect any change\nIf you made any change from that point, everything works fine again.\n\nHope that summary helps lerna developers to improve the tool or any other person facing this problem\nRegards. In my opinion this issue should be reopened. The bug exists and it's well documented and it is also very annoying.\nEven if you don't want to bug the root cause of the problem it would be ideal to provide any fallback mechanism. Maybe allowing to create a manual named tag using lerna or whatever we came up with. Also I want to note that all my tags are annotated:\nbash-3.2$ git tag -n99\ncase-results-service@0.2.0 case-results-service@0.2.0\ncase-results-service@0.3.0 case-results-service@0.3.0\ncase-results-service@1.0.0 case-results-service@1.0.0\ncase-results-service@2.0.0 case-results-service@2.0.0\nresults-service@2.0.0 results-service@2.0.0\nresults-service@3.0.0 results-service@3.0.0\nsekeleton       chore: First commit + skeleton\nv1.0.0          First version\nSo I'm a bit on a dead end here: all my tags are annotated, but I can not create a new tag because the current sha is not an annotated tag.\nI don't know what lerna actually expects and why this fails randomly. @thejameskyle what you said makes no sense.\nForcing people to duplicate any kind of stuff is never a good idea, giving choices IS.\nWhy can't I choose if lerna should use the root .npmrc file ? Just because, maybe, someday,someone may want to opt out ? So I am forced to include an absolutely useless file (because is the same stuff over and over again) on all the packages that I want to include on my monorepo even knowing that any of them is going to opt-out from my current repository ? \nSorry, but I see it as a waste of time.\nAs a general advice, since what you are building is a tool it is usually a good idea is to make it fit the need of the target users, and listening to their opinions and needs and giving solutions to them ( specially through options) is always a good idea.\nIf you want each package to behave like a normal package, why have you included hoisting ?\nAnd what about the other question ? Why is this working on MACOS ?\nRegards. Hello @evocateur \nI do use the --registry flag, but it has nothing to do with installing dependencies from private repositories. I also use publishConfig on each package, but none of those deals with the fact that I need to install deps from a private repository for ALL my packages. You said that you don't control npm behavior, but npm behavior is to use the closest .npmrc file, which is not happening in my case.\nPD: Thanks for the extra arguments documentation by the way, I'll use them.. Why don't you use lerna bootstrap as a post install script? Works for me . Deleting the node_modules folder is not an acceptable workaround.\nThis should be a hotfix and be released as soon as possible. I can't afford reinstalling all the dependencies each time that I generate a new module.\nRegards. Yes, but it is unreleased. If I install the latest version of lerna from npm I will not get the fix. > @danielo515 sorry for any confusion, I was agreeing with you. I meant \"there is a fix, and there has been for a long time, but its still not available to end users. \nNo problem! Thanks for clarifying. \n\nMaybe its time to cut a release?\n\nAgree. What's preventing that? . Is good to see how features are removed without providing a valid substitution. I think it is. The version bumping only happens when packages has dependants, and not the other way around . Well, what I have posted works for excluding the module at all. I only want to exclude it from the publish procedure, but I want to be able to detect changes, bump versions and all that stuff. I have some packages as private too, and it is detected by lerna. Are they also excluded from version bumping and git tagging? Because I don't want to exclude them from that, just publishing. \nRegards . Duplicated with #953. Never noticed there is such option. How should I deduct that I have to add a dash - before the packages? I though the [packages] was part of the command?\nI'll check it out . Dear @noherczeg , because your short answer was so short and misleading I understood it the wrong way. Now I see that what you posted is just the url. \nTo answer your question (is it a question?) No, the force publish does not fixes the situation. I don't want to type manually all the packages that have changed, and if I just use * I am forced to bump all packages, which is not good.\nThis same situation happens if the git publish fails. It is not easy to recover from those errors. Many thanks @blahah\nI'll agree with all you said.\nI'll try your suggestion on the next problem I will presumably get . @noherczeg I have re-read my answer and it was not very polite. I take for granted that every answer has good intention. It was my fault to answer you so impolitely, and I'm sorry about it. Please accept my apologies.. For those who are facing this situation where publish or git fails and the dependencies gets out of sync, I have created a small set of scripts to check that every package is using the correct version within the monorepo. Then a small report is shown:\n{\n    \"case-alerts-notifications-service\": {\n        \"deps\": [\n            {\n                \"found\": \"0.2.6\",\n                \"expected\": \"0.2.9\",\n                \"name\": \"case-alerts-db-connect\"\n            },\n            {\n                \"found\": \"0.3.1\",\n                \"expected\": \"0.3.4\",\n                \"name\": \"case-alerts-notifications-fetcher\"\n            },\n            {\n                \"found\": \"0.3.0\",\n                \"expected\": \"0.6.0\",\n                \"name\": \"case-alerts-notifications-formatter\"\n            },\n            {\n                \"found\": \"0.1.3\",\n                \"expected\": \"0.4.0\",\n                \"name\": \"case-notify-db-saver\"\n            }\n        ],\n        \"devDeps\": []\n    },\n    \"case-alerts-input-service\": {\n        \"deps\": [],\n        \"devDeps\": [\n            {\n                \"found\": \"^0.7.2\",\n                \"expected\": \"0.10.0\",\n                \"name\": \"case-alerts-test-utils\"\n            }\n        ]\n    }\n}\nHere are the scripts\n\nget_packages.js\n\n```\n'use strict';\nconst Fs = require('fs');\nconst ReadDir = Fs.readdirSync;\nconst Stat = Fs.statSync;\nconst getAllPackageNames = (basePath = __dirname) => {\nreturn ReadDir(basePath)\n    .map((d) => `${basePath}/${d}`)\n    .filter((d) => Stat(d).isDirectory())\n    .map((d) => ReadDir(d).filter((i) => (/package\\.json/i).test(i)).map((x) => `${d}/${x}`))\n    .reduce((all, p) => p.concat(all), []);\n\n};\nmodule.exports.getAllPackages = (dir) => getAllPackageNames(dir).map(require);\nmodule.exports.getVersions = (dir) => getAllPackageNames(dir).map((p) => ({ [require(p).name]: require(p).version }));\n```\n\ncheck_local_deps.js\n\n```\n!/usr/bin/env node\n'use strict';\nconst Packages = require('./get_packages');\nconst Path = require('path');\nconst pkgDir = Path.join(__dirname, '../', 'src');\nconst packages = Packages.getAllPackages(pkgDir);\nconst actualVersions = Packages\n    .getVersions(pkgDir)\n    .reduce((final, ver) => {\n    const key = Object.keys(ver)[0];\n    final[key] = ver[key];\n    return final;\n}, {});\n\nconst findMismatch = (toCheck, truth) => {\nconst keys = Object.keys(toCheck);\nreturn keys.map((k) => {\n\n    if (!truth.hasOwnProperty(k) || (toCheck[k].replace(/[\\^~]/, '') === truth[k])) {\n        return null;\n    }\n\n    return { found: toCheck[k], expected: truth[k], name: k };\n})\n    .filter((i) => i);\n\n};\nconst checkDeps = (report, pkg) => {\nconst deps = pkg.dependencies ? findMismatch(pkg.dependencies, actualVersions) : [];\nconst devDeps = pkg.devDependencies ? findMismatch(pkg.devDependencies, actualVersions) : [];\n\nif (deps.length > 0 || devDeps.length > 0) {\n    report[pkg.name] = {\n        deps,\n        devDeps\n    };\n}\n\nreturn report;\n\n};\nconst missMatchReport = packages.reduce(checkDeps, {});\nconsole.log(JSON.stringify(missMatchReport, null, 4));\n```\nHope this helps, and hope some kind of functionality like this is included in lerna. Sorry, it may be myself but I don't get exactly what does that mean evocateur. I want to know if this issue was also about peerDependencies. I found that peer dependencies are not being properly handled, resulting in weird errors (like instanceof not working properly). > Some public, some private (but deployable). Private packages are private because they are entry Apps that get deployed, not published as a library. They still need to be versioned, but not published to npm. (this is my use case)\nThis is exactly the usecase at my company. I don't see why lerna should not support it since it is a mono-repo and lerna is a tool for managing mono-repos. The PR has been merged. May close the issue?. Sorry, but I just don't understand. How the canary flag can help here ? I just want to automate the publish process and allow Lerna to push tags back to the repository.\nI tried several approaches and none of them works.  I tried passing the --git-remote flag\nlerna publish -- --yes --git-remote https://${GH_TOKEN}@github.com/${TRAVIS_REPO_SLUG}\nBut the same error happens. If I add --skip-git, then the tags are not created and I can not push them back later. I on a dead-end. In my case I fixed it by previously making a checkout on the CI system . Thank you @gastonelhordoy \nCould you provide me some guides about how to configure cz-lerna-changelog ? I tried installing it and trying to execute, but it does not work.. @gastonelhordoy  Ok, I finally figured it out. Now I'm testing it\nI would prefer to provide commit messages per package. I noticed that cz-lerna-changelog detects what packages have changed. Is it possible to configure it to promt per package?. That's the kind of behavior that I want to avoid.\nEach commit (in my opinion) should be a working snapshot of the repository at certain point in time. If you commit just parts of it you will have inconsistent states when you navigate through commits. I suffered that several times. I will find easier just to use package headers.... Yes, one way or the other :smile:\nBut then how does lerna decide which messages to include on each package changelog?. Thanks again @gastonelhordoy \nHowever I thought this was something included in lerna itself. You have mentioned (and I really  thank you for it) like 4 third party tools. I expected to need a tool for the commit wizard, and maybe for commit message validation, but I expected lerna to build the changelog files, make the automatic version bump based on git logs and that stuff.\nAlso I still need answer to the following\n\nHow to setup lerna to use conventional-changelog (for bump version during publish for example)\nThis is documented, my fault, just use --conventional-commits however this does not solves the last point\nHow can I invoke conventional-changelog through lerna.\nAs far as I understand, this does not makes any sense. Just use the commit wizard or the publish modifiers\nHow can I generate an automatic CHANGELOG file under each package directory\nI still have doubts about this\nHow can I enable conventional changelog by default on lerna.json\nI suspect that I just have to put conventional-commits under the command section of lerna.json, but I'm not sure\n\nThanks again\n. Thanks @evocateur for your response.\nI am indeed using the independent versioning mode in all my repositories. \n\nOnly per-package CHANGELOG.md files are currently updated, not the root.\n\nThen how do you build/bundle a global changelog?\nThanks for confirming the correct format on lerna.json,  I was thinking it should be like you described, but I was not sure.\nRegards. Dear @gastonelhordoy which commit validator are you using with husky? The only ones that I found do not allow line breaks on the commit message (which is a must have for lerna)\nRegards. @evocateur the way you suggested to include conventional commits on lerna.json is not working. It is ignored by lerna.. I think the problem @paulblyth and @enriquecaballero are reporting is different from my original request, which is a request for documentation about how to use lerna with conventional changelog.\nOne thing I would like to know, if how can I customize the links generation for example. By default it points to github, and I'm currently using bitbucket.\nRegards. You should explain what are your expectations and your target architecture. \nI have several lerna mono repos, where just some packages will become docker images. So I have a docker image on each package that needs it. Then I just do lerna run build to build all the packages that has a docker image.\nIs your architecture different?. Hello @aga5tya \nSadly I don't have any example repository, but I can provide you an outline\nsh\nlerna_repo\n|- package.json <- here is a global build command with a previous lerna publish\n|- lerna.json\n|- packages\n  |- web-service\n    |- package.json <- Here is the build command\n    |- Dockerfile <- Here I perform a npm install\nWhile in development I rely on lerna linking packages using symbolic links. Then, when I build any docker image, first I publish all the packages, and then those packages are installed inside the dockerfile like any other external package. For this task we have a private npm repository using verdaccio (the best fork of sinnopia).\nThis should work for your packages like any other external node.js package, and the same caching techniques should apply\nHope that works for you too.. @nkbt How is your build process different or which advantages does it have over the one that I proposed  (Just making a publish and npm install in the docker container)?. Hello @nkbt \n\nWell, you don't want to publish on every commit :). I was talking about building docker image on every commit with all sumlinked deps properly resolved to the latest local dev version, not published one.\n\nYour'e absolutely right about that. Sorry, I didn't saw the scenario clear at that moment.\nHow do you execute the script that you have posted ? Is it inside the docker file ? How do you pass the required vairables like BUILD_DIR or CWD ?\nThanks for sharing. > I can manually copy node_modules with a flag to follow symlinks,\nIf you do that you will have only the dependencies required by your package and your dependencies. What's the problem with that ?\nI've been thinking about this lately and recently I started working with docker multi-stage builds.\nI think that this is a great use-case for multi stage builds, where you can install lerna globally (or have an image with it already installed) install just the production dependencies and make a lerna bootstrap. Then on the final stage you can copy just the package that contains your service, with follow symlinks activated and boom, a good docker image.\nSomething like this:\n```\nFROM myLernaImage as deps\nWORKDIR /home/app\nRUN npm i --production && lerna bootstrap\nFROM node:8-slim\nWORKDIR /home/app\nCOPY ./packages/service .\nCOPY --from=deps /home/app/node_modules node_modules\n...\n```\nPlease note that this is just an outline, I'm not taking in account all the possibilities.. I still think multi stage builds are the simplest solution . So it'd the new version which includes this fixed published? . > In the sense that you can override the heading of the independent publish message, yes, for several releases now\nAre we talking about doing it through lerna.json right ?. Yes, in that case it works . Hello @evocateur ,\nYou're right about the syntax ^10.x.x is not very common. It is from an old time and I want to change it to just 10.x.x or just 10.x .\nAbout the resolution, I think it should always resolve to the higher version on the repo. For example, if you have 3 packages (like one of my cases) that requires a version 10.x and a package that requires 10.9 then you should resolve to that package. Of course this will require some analysis and logic, but would be much more comfortable for the end user than managing the versions manually.\nRegards. Hello,\nThis report may deserve it's own issue, but I'm reporting it here to avoid issues pollution. Today I just realized that lerna does not understand neither when you use the caret ^ for versioning, even when they resolve to the same version.\nHere is a log extract:\nlerna WARN EHOIST_PKG_VERSION \"case-alerts-inactivity-service\" package depends on lab@14.1.1, which differs from the hoisted lab@^14.1.1.\nlerna WARN EHOIST_PKG_VERSION \"case-alerts-evaluator\" package depends on case-kpi@^0.7.0, which differs from the hoisted case-kpi@0.7.0.\nlerna WARN EHOIST_PKG_VERSION \"case-alerts-notification-info\" package depends on case-kpi@^0.7.0, which differs from the hoisted case-kpi@0.7.0.. Any feedback on this?. Hello,\nYes, I have one dependency on the root package that points to one subpackage under src. I did this because I wanted one local package to be joisted and this seems to be the only solution. I have excludes the root package from publishing, but I did not from bootstrap. May this be the root of the problem ? In any case I find that deleting the package is some kind of bug or at least unwanted behavior. In my particular case it is necessary. I need to hoist the local package to avoid it getting its own version of certain shared library.  > If you're working in a feature branch, you shouldn't be modifying the version property of any package.json (this is identical to \"normal\" npm package development patterns).\nSo you should merge it into develop and create a release branch for the version bump ?. > Yes, this would whack any nohoist or root-conflicting leaf install, but it\u2019s an edge case, and infrequent.\nCould you expand on that? I'm a happy user of nohoist. Ok, seems it is not a problem for me since I configure both hoist and nohoist in lerna.json. I just tested locally and when I run lerna publish  on the root of the repo it correctly executes all the scripts, including post-publish ones. Can it make a difference in CI environments ? Could it be related to the synchronous nature of the publish steps ?\nI just activated verbose logging but I don't see anything that gives me a clue.. Oops,thanks. Is this correct @evocateur ? Do you configure lerna version by configuring publish on lerna.json ? Seems confusing. ",
    "nevir": "Ditto on 2.0.0. ",
    "yairkukielka": "@danielo515 I was getting this error when I was trying to run lerna update in master, where I didn't have any tag. I actually had a previous tag in a branch.\nTo fix it, I created manually a tag in master. After that, lerna update started working.\nTo create a tag manually, use something like @yourscope/packagename@0.0.1-alpha.1. I want lerna to use the package.json version number to publish without having to bump it since it was already bumped manually by the developer.\nIn my case, CI doesn't know if it's a breaking change or not, so I expect the developer to do this. So I would use the --yes flag but wouldn't wan't the prompt to ask me what version I want to release. When the branch is merged to master, that's when I expect lerna to just use the version in package.json to publish without new commits. \nSomething like this would be a nice feature:\npackage.json:\n{\n  \"name\": \"mypackage\",\n  \"version\": \"0.0.2\",\n}\nThis command:\nlerna publish --repo-version-exact\n would publish version 0.0.2 without bumping the version. ",
    "askz": "Other solution is to merge tag with \ngit merge <tag>. We run into the same issue.\nWe have a monorepo, but 1 or 2 packages are in submodules for external gig developement purposes (we do not want to give them access the entire repo)\n. ",
    "rufman": "This seems broken again. publish does not create an annotated tag, but updated only looks for annotated tags.. @evocateur when I ran lerna publish and then lerna updated the tag that was being referenced was not the tag that was just created, but an earlier one (an annotated tag from before the repo used lerna).  \nChecking out the code it seems that there is no -a option in the tag command here: https://github.com/lerna/lerna/blob/master/commands/publish/lib/git-tag.js#L11. ",
    "btakita": "I'm trying lerna for the first time. I'm running into the same error.\nI'm really confused over how lerna is supposed to work. Sorry if this is not helpful, but it would be great to understand what's going on.\n\u00af\\_(\u30c4)_/\u00af. Could this be the culprit?\nhttps://github.com/lerna/lerna/blob/master/utils/collect-updates/collect-updates.js#L30\nI changed the line to and it seems to work:\njavascript\ncommittish = childProcess.execSync(\"git\", [\"describe\", \"--tags\", \"--abbrev=0\"], execOpts);. I tried it again (without --tags) & the error is gone after publishing the packages (with --tags). Publish seems good as well. Not sure why it's working or why it didn't work before.\nISTR that there was a tag created by oao, but I'm not sure if that caused the problem.\nMaybe the tag created by oao was in a format that lerna did not expect (e.g. v2.0.4). ",
    "geekplux": "same error here. using lerna in an existing project.. ",
    "facundocabrera": "Is there any chance to get some attention from the project maintainers? I want to prevent any kind of diverge from the official version :smile: \nThanks again.\n. Cool! let me know if I can give you a hand in some way.\n. dist-tag should always use the package.json#name, having that in place lerna will work with scoped packages.\nexecSync(\"npm dist-tag rm \" + pkgObject.pkgName + \" prerelease\");\nexecSync(\"npm dist-tag add \" + pkgObject.pkgName + \"@\" + NEW_VERSION + \" stable\");\nexecSync(\"npm dist-tag add \" + pkgObject.pkgName + \"@\" + NEW_VERSION + \" latest\");\n. Yay! Thanks! \n. When will you tag lerna to test the changes?\n. \ud83d\ude31\ud83c\udf89 yeah!\n. @hzoo @thejameskyle I'm pretty new versioning packages using npm and feels pretty conformable with the canary strategy over custom tags in npm.\nThe question is, does it make sense to keep NPM_DIST_TAG over --canary or --tag name?\nFeel free to remove the comment if make noise.\nThanks! \n. Done #77.\nThanks!\n. ",
    "ahfarmer": "@hzoo have you considered using an existing changelog package like conventional-changelog?\nAll you have to do is create the changelog first, then git add it, then run lerna.\n. This change would really help me - any chance it can be merged @thejameskyle ?\nI'm trying to use lerna in an automated publish system. (Alongside commitizen and conventional-recommended-bump )\n. Oh yeah, duh. Thanks!\n. I currently use the non-formal programmatic API to find out which packages have changed on CI, and only test those packages (for speed reasons).\nWould love it if it was a formal API. What I'm doing is not ideal:\n```javascript\nconst logger = require('lerna/lib/logger');\nconst UpdatedPackagesCollector = require('lerna/lib/UpdatedPackagesCollector');\nconst Repository = require('lerna/lib/Repository');\nlogger.setLogLevel('silent');\nconst repo = new Repository();\nconst collector = new UpdatedPackagesCollector(repo, {}, {});\nconsole.log(collector.collectUpdatedPackages()); // but I don't actually log them - I use this information\n```. I really wanted this feature so I published this branch to npm here: @ahfarmer/lerna.\nFor those not familiar with scoped packages, the @ahfarmer/ is part of the package name. When this pull request is merged and an official release is pushed I will wait a week or two and then unpublish my package.\n. ",
    "cdaringe": "that's pretty cool, @ahfarmer!\n. whoa!  ok, turns out it doesn't sym link them, but it does create an index file where that requires in the other path! ok.  it was just a little misleading.  i will update the docs.\n. lerna some-action --log-level=verbose/warn/error  .  I wanted verbose output to see what's going on behind the scenes\n. still debating, folks?  just curious :)\n. yep\n. interesting. when i go to downgrade to beta26 in attempt to figure out if it was a regression...\nLerna version mismatch: The current version of lerna is 2.0.0-beta.26, but the Lerna version in `lerna.json` is 2.0.0-beta.28. You can either run `lerna init` again or install `lerna@2.0.0-beta.28`.\n```\n$: ~/node/counsel$ find . | grep lerna.json\nempty!\n```\n. Ya I did.  I'm unable to reproduce.  Downgrading and upgrading seemed to work, which isn't helpful :/\n. 10, 10+, borderrrliiinnnnnne 11! \ud83c\udf89 \n. Different projects, different lerna versions.  Iirc some lerna versions make sure that the running version matches that listed in the lerna.json.  peace of mind that the version that is running is always what is declared regardless of what shenanigans I'm doing globally.  I've always loved that feature of webpack. @zxqfox, same error as above. hi all.  thx for the leads.  whilst this was a configuration bug, the error message presented is arguably also a bug, from a UX perspective.  we ought consider detecting that bad state and throwing an expected error. greetings! \ud83c\udf7b \n\nrm -rf node_modules && npm install in the container root directories would be sufficient\n\nin my use case, i'm not publishing packages.  therefore, npm install fails.  instead, my private packages exist exclusively in packages/.\nis it out of lerna scope to install all dependencies into a package, even if some of them are otherwise local/linked during bootstrap?\n\nand will likely never support direct application bundling and whatnot\n\nof course.  agreed.\n\nbundling is an option, but not one i actually considered until you mentioned it.  i just want to run install and have my package stand alone, even if dependencies are sourced locally and from the registry.\ndid i clarify/confuse any usage?  if so, does your response change?  thx!\n. > There is no shame in relative path imports.\nsure. agreed.\n\nI don't see any reason to use lerna in your case.\n\ni could link all of the things manually (youch--i have ~10 pkgs), but dep reduction (hoisting+workspaces) & auto linking are still very much value add.  it a definite \"why not?\" situation at development time.\n\nI would definitely separate the bundling \n\njust to be clear, i'm not talking about bundling.  you've mentioned it twice now, but i'm not sure why.  perhaps we have different interpretations on what \"bundling\" means?  when in hear it, i assume it implies something like rollup/webpack with target ~= node.  is that your intent w/ it too?. @trxcllnt, that's a nice play.  i ended up doing a similar, but much simpler/less-robust strategy that meets the same intent.\ni see maybe a package coming out of this exercise.  lerna-delink/lerna-debootstrap/lerna-isolate/etc.\nthx @evocateur @trxcllnt.. ",
    "joscha": "We currently had to integrate lerna with commitizen and semantic-release.\nThere is a Commitizen Lerna adapter here: https://github.com/atlassian/cz-lerna-changelog\nAnd a lerna-semantic-release package here: https://github.com/atlassian/lerna-semantic-release\nCurrently we are not generating a changelog, yet, as semantic-release is tightly coupled to git, but potentially some of the work we did can be reused for this ticket.\n. we could use https://www.npmjs.com/package/debug - that way you can control what is logged with a glob and also redirect it if need be.\n. @thejameskyle I made the changes, let me know if that works for you. I can also squash the commits in case you'd like that.\n. Thank you for merging - one thing I thought with the errors we have now in quite a few places - would you be happy to integrate a PR that unifies and cleans up the errors using https://www.npmjs.com/package/define-error ?\n. I think exporting the errors and making them importable at the right places would be the first step. The package itself only makes sure that there is a proper stack trace attached.\n. This is awesome, is there anything else that needs to be done to bring this in a mergeable state? Like the -- functionality and/or a test with a command that has a few arguments?\n. @thejameskyle you can find the feature in #151 including a couple more tests and a fix for the test in this PR (it doesn't actually work properly).\n. Maybe we could adapt the git --porcelain flag for that. That way current scripts would continue working, just the output without --porcelain would allow composition and hide all debug output.\n. can't speak for other people, but we do:\n``` shell\nGet all packages so we now which ones to iterate through\nALL_PACKAGES=$($LERNA_LOC exec pwd\\\n| sed 1,2d)\n```\nThat's only one example - we had to write a script that uses npm link on packages, because the workaround with requiring the index.js doesn't work for packages that are mainly CSS/LESS/images. Basically the same problem as #11 and #263.\n. Either way would work for us I think - a generic one might make more sense, however then we need to find a way to propagate CLI flags to the PromptUtilities.\n. @thejameskyle could you please tell us if this is in a mergeable state or if you would want us to move the flag detection into the PromptUtilities logic in order for this to be integrated?\n. @thejameskyle f49ff60 has the changes\n. @hzoo I made the fix you asked for and added a test in #169 \n. @thejameskyle I thought about that, the downside is that currently anything after the first argument to lerna is treated as the target script name - adding another flag in between would mean that we potentially some script out there might break, but I guess as 2.0 is still in the flow that would be fine.\nmaybe lerna run --restrict-to component-* my-script? I'd be happy to provide a PR for this feature.\n. @thejameskyle I opened #145, please let me know if there are any changes you'd like me to make in order to integrate it.\n. @thejameskyle just did, sorry about that. Rebase is in 00ae218\n. @thejameskyle I made the changes for not running anything if --restrict-to is given but empty, they are in 36f22b5. Do you think we can brainstorm about the name again and wrap this up? I personally like --run-in as it conveys that its something todo with the run command, however if we want to re-use the flag for other commands, --restrict-to or --only-in might be better candidates.\n. #152 should be favored to this one.\n. will do, one sec. In 852930b.\n. @eirslett it seems to be handled by meow automatically. Everything before the -- lands in .flags.\n. #152 should be favored to this one.\n. @thejameskyle is there anything I can do to help this getting integrated into lerna? Would you like to me to change the inheritance-based code into a helper?\n. @thejameskyle I changed the implementation to use a helper. Just on a side note, I think it was a bit cleaner with inheritance. Anyway, the changes are in 5dd9e9f - I hope that brings it in a mergeable state.\n. @paulyoung I don't think so - last time I talked to @thejameskyle he was just preoccupied with other things - maybe that little github email nudge will bring him back \ud83d\ude09\n. @hzoo will do one - give me a few minutes!\n. @hzoo its in #197 - I also found that the concurrency PR #163 was merged in the meantime, so I added a fix that re-uses concurrency in the code that was just merged.\n. would you like me to rewrite this into lerna get version?\n. I updated the branch in #170 and also added a few tests around the empty/NaN/negative concurrency.\n. I think potentially we could use the --scope parameter introduced in #152 for this as well.\n. @rygine you are right, I guess it might be confusing ;)\n. I am happy to work on it to make it work for both black- and whitelisting.\nIt could be a generic --include and --exclude for example and the last\nof the two options given trumps the one before.\nCheers,\nJoscha\nOn 4 Jun 2016 8:10 AM, \"Ry Racherbaumer\" notifications@github.com wrote:\n\nthe more i think about it, the more inclined i am make the flag name more\ngeneric. i think ignore would work well here. that way, it could apply\nto other commands, such as lerna run. the ignore flag would be opposite\nof the scope flag, unless that's renamed to something else like only. it\nmakes sense to have both of these options when running commands.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/lerna/lerna/pull/168#issuecomment-223706775, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe/AALehsRsbr8sIDrIyj-TEx81QtAD3EhHks5qIKZLgaJpZM4IoCf-\n.\n. @rygine @thejameskyle does that mean I should rename the flag in #152 to --include? I am happy to do that if that finally makes it mergeable and integrated.\n. @rygine nice! What if you specify both --ignore and --scope? I guess ignore would trump scope?\n. @rygine fair enough, I guess the use case for such a thing is very slim anyway, as you can always express one through the other or just use a more specific glob.\n. Why not a script in package.json that uses lerna exec -- rm -rf ./node_modules\n. Sure, but then maybe it would be better to make this platform-independent with FileSystemUtilities.rimraf instead of calling out to the shell at all.\n. Nice work (8470e3d)!\n. We'd be happy to create some integrations, however one thing why didn't look at lerna changelog is, it assumes github as your platform, which is not correct for us, as we are on bitbucket.\n. :trollface: \ud83d\ude06  awesome, do you have a future in mind which integrates these three pieces of technology? If you do, maybe there is something I can work towards already?\n. and you would use the information of the files in the commit to find which components are affected by what or use something like conventional-changelog?\n. We could disable the progress bar I guess - makes it faster for npm v3\nanyway (https://github.com/npm/npm/issues/11283) \ud83d\ude02\nOn 24 Jun 2016 3:13 PM, \"Bo Borgerson\" notifications@github.com wrote:\nOuch. It's just emitting exit code on failure instead of the (no longer\ncaptured) stderr output.\nJust setting stdio: [\"ignore\", \"ignore\", \"inherit\"] can be pretty verbose\nwith warnings even in the success case. Not a great experience with the\nprogress bar. Guess we can capture stderr output with [\"ignore\",\n\"ignore\", \"pipe\"] without regressing on #213\nhttps://github.com/lerna/lerna/issues/213. I can put a patch for that\ntogether in the morning.\nThanks for reporting @joscha https://github.com/joscha!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/lerna/lerna/issues/247#issuecomment-228259795, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe/AALehtBZqMI7K4F5nz3d5q3I_GzN37UQks5qO2d-gaJpZM4I9dsm\n.\n. Is there anything missing before we can merge this?\n. awesome @gigabo - is there a way you can publish a new beta version that contains this fix?\n. nice, this would actually solve some problems we have around this!\n. can't this be done via lerna exec -- pwd | sed 1,2d and passing the returned folders to chokidar?\n. I like the idea of watching, but it seems to me as if this does not necessarily need to be a first-class citizen of lerna, as it can be composed, e.g.\nlerna exec -- pwd | sed 1,2d | sed -e 's/$/\\/**\\/*.js/' | xargs npm run watch -- --files\n. I get the convenience part ;) I think for me mass file watching is a relict of the past in most cases. Modern build tools would allow you to pass some entry points and watch the whole dependency graph, no matter what exact location those files are in - globs and directory thinking make refactors harder, so I prefer an import { x } from 'module' (that module gets then added to the watched graph) over an explicit npm run watch packages/module/**/*.js.\n\nUpdate: I think the implicit case I make here is, that glob pattern watching is something specific to the build tool used and not necessarily a problem that lerna has to/should solve. Or potentially solve, but not out of the box with a first-class command.\n. @staltz does  packageeee.json exist? \n. Thanks for the answer @doug-wade, the packages location is actually not the problem, adapting that path works fine. The problem lies in lerna thinking its not been lerna inited when the lerna managed package is not equal to the git root. I can create a gist to demonstrate the problem if that is easier?. sure, @doug-wade, repo is here: https://github.com/joscha/lerna-broken-nesting-example. @doug-wade were you able to verify the problem or is there anything else I can provide?. Thanks for the answer @evocateur - we had to abandon our plans to use lerna in the meantime, due to #377 and also a few comments here and there that suggested that lerna functionality might be picked up by yarn, so I won't be investing time in this issue for now. We can close the issue or leave it open (as I think other people might have similar issues and might be interested in following through the TODOs).. :tada: thanks @evocateur . refs #555 . I thought about that, but then lerna run test --restrict-to \" would not run anything - if that is the expected behaviour I am happy to change it.\n. O wait, never mind, I'll change it \ud83d\udc6f \n. we could add an .editorconfig file, or you can add the rules to eslint.\n. indentation fixed in 38b101b\n. simplified in f137619\n. - --include-packages\n- --match\n- --only\n- --run-in - this would convey that its only to be used in conjunction with run.\n@jpnelson any other ideas?\n. with editorconfig if the editor respected it, it would happen automatically. Alternatively I guess we could have a pre-commit hook that runs eslint with the --fix flag to do so, however that is quite a bit of overhead I think.\n. I opened #146 to add an eslint rule for a start.\n. just saw your comment @thejameskyle - if you want to not run anything in case an empty restriction is passed, then I think I need to add another check. Right now it will behave as if no restriction was given when passing an empty one (which I think might feel more natural).\n. I guess it depends on the runtime - object-assign was available already, so I just used it.\n. I changed it to --scope in #152 \n. I think it is the perfect problem to be solved by inheritance. Especially as then the concerns are also clearly separated for the tests as well, but I am happy to change it to whatever form you like it in order to get it integrated. Would you like me to change it to a helper? \n. I think it is good that it would throw, however I think me might need to add a test to make sure it doesn't accidentally get refactored away the next time somebody reads over that code?!\n. You are right, I just copied from the run command - both places fixed in de1828c\n. FileSystemUtilities.rimraf can be used here.\n. isn't that an xor? negate ^ minimatch(pkg.name, glob) should do it I think.\n. \ud83d\ude02 I think the name of the variable kinda gives the functionality away though...\n. this logic down here was flawed, as we update in case of !packageJson a few lines further up.\n. @lukebatchelor When we developed the feature I suggested ignore to trump scope: https://github.com/lerna/lerna/pull/168#issuecomment-224812225 - not sure why and when that might have changed.\n. ",
    "jasonmit": "Ran into this as well.  My fix was to tag every package with prerelease but agree that either the docs should mention thing or Handle the error case.\n. ",
    "dthree": "@jasonmit thanks - could you please explain exactly what you did to tag them properly? Can't get over this hump...\n. Yeah, I have no idea what I'm doing on tags, but honestly they're terribly documented in general. I tried going into each of my packages and doing:\nnpm dist-tag add mypkg@v0.0.7 prerelease\nHowever this didn't change anything on this error...\n. Yeah, it looks like it. But it's totally silent.\n. okay... question - what If I let you clone the git repo It's happening on?\n. Okay, that would be really amazing!\nI temporary threw up the project here on Github (haven't released it yet, so keeping it off Github generally for now).\nYou can just git clone this, and:\n1. Update ./packages/template.package.json to match your private NPM repos.\n2. Run gulp to replicate those package.json files to each sub package.\n3. Go nuts with lerna - it should be reproducible right there.\nThanks a million!\n. Oh snap - yeah, that's what it is. \nhttps://github.com/dthree/cash/tree/master/packages\n. ",
    "greenish": "Okay, I ran into the same problem and I think I can reproduce it:\nThe error happens when the folder name in packages/ doesn't match the package name in package.json\nSo a package in folder packages/core/ with { \"name\" : \"library-core\" } in package.json will produce the error. \n. ",
    "cpsubrian": "Ran into this also. I'm trying to manage a collection of namespaced modules so I can't name the folder the same as the package because of @org in the package name. AKA @org/my-module is the npm package name but the folder is my-module.\n. My package successfully published with master, so .. for me this issue is already resolved.\n. @abhishiv Hate to revive this but just wanted to comment that the publishConfig solution above worked great for me (put it in every sub-module's package.json).. ",
    "dtothefp": "@cpsubrian I'm running into the same problem of an @org name and getting the error\nErrored while running PublishCommand.execute\nError: Command failed: npm dist-tag add @org/<my_package>@0.2.2-alpha.8d13b88f canary\nnpm ERR! registry error parsing json\nnpm ERR! Darwin 15.6.0\nnpm ERR! argv \"/.nvm/versions/node/v6.5.0/bin/node\" \"/.nvm/versions/node/v6.5.0/bin/npm\" \"dist-tag\" \"add\" \"@org/<my_package>@0.2.2-alpha.8d13b88f\" \"canary\"\nnpm ERR! node v6.5.0\nnpm ERR! npm  v3.9.6\nNot sure if this is the same issue and/or how to resolve? I'm on lerna 2.0.0-beta.30\n. I have several packages that are linked/published by lerna https://github.com/dtothefp/build-boiler\nI feel like I'm having a similar problem that happens on every travis build. I run lerna bootstrap on travis and it seems to complete successfully \nhttps://travis-ci.org/dtothefp/build-boiler/builds/116948869\n\nBut upon running the build task in my module which depends upon some of my linked packages it seems the the npm link has failed\nError: Cannot find module '/home/travis/build/dtothefp/build-boiler/packages/boiler-utils'\n. @thejameskyle ok I made a new issue here https://github.com/kittens/lerna/issues/87. Seems like pretty common functionality to want to be able to run lerna builds and potentially publish in some sort of CI environment like Travis\n. After going through the lerna bootstrap code and seeing that is just writes a mock child module to the parent module's package.json I realized I made a dumb mistake and was not compiling my packages/*/src modules to dist before running lerna bootstrap. Dumb mistake so I'm closing this issue\n. Also, it seems that for a vundefined tag lerna will remove the version line from lerna.json. For, vnull it may replace the version value with null if I'm remembering correctly but I'm unable to reproduce recently. \nThis same issue is also reported here I believe:\nhttps://github.com/lerna/lerna/issues/912. I have the same issue, on top of this the version line will be removed be removed from lerna.json. This is bad if vnull or vundefined have not yet been pushed as the lerna.json missing the version will be pushed with the tag.\nNot so bad if the tags already exist but will cause confusion\n\n. ",
    "doug-wade": "I got this today with lerna 2.0.0-beta.30 -- I just got this error over and over in the console:\n```\nnpm ERR! prerelease is not a dist-tag on clefs\nnpm ERR!\nnpm ERR! If you need help, you may report this error at:\nnpm ERR!     https://github.com/npm/npm/issues\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /Users/dwade/foss/clefs/npm-debug.log\nat checkExecSyncError (child_process.js:488:13)\nat Object.execSync (child_process.js:528:13)\nat execSync (/Users/dwade/.config/yarn/global/node_modules/lerna/lib/commands/publish.js:74:18)\nat /Users/dwade/.config/yarn/global/node_modules/lerna/lib/commands/publish.js:184:13\nat /Users/dwade/.config/yarn/global/node_modules/async/lib/async.js:718:13\nat replenish (/Users/dwade/.config/yarn/global/node_modules/async/lib/async.js:319:21)\nat /Users/dwade/.config/yarn/global/node_modules/async/lib/async.js:330:15\nat _parallel (/Users/dwade/.config/yarn/global/node_modules/async/lib/async.js:717:9)\nat Object.async.parallelLimit (/Users/dwade/.config/yarn/global/node_modules/async/lib/async.js:735:9)\nat ship (/Users/dwade/.config/yarn/global/node_modules/lerna/lib/commands/publish.js:180:11)\n\n```\nI don't have have a prerelease tag of any kind:\ni-200077 foss/clefs \u2039master\u203a \u00bb git tag                                                                                                                                         130 \u21b5\nv0.0.1\nv0.0.2\nIt also calculated the wrong version for some packages\n. Well, that's embarrassing -- I didn't notice the npm run lint command, and was using the cli directly.  PR is now poorly named -- I'm actually just upgrading the linter version.\n. If I did, I don't have it any more.\n. At Redfin, we can't actually just make it work with the packages organization.  Our current layout is \nredfin/\n    maven-project/\n    react-server/\n    packages/\n        foo/\n        bar/\n        baz/\nSpecifically, we have a Spring MVC server that uses npm to manage its front-end dependencies.  It needs to live at the top level because of maven requirements.  We also have another top-level React Server instance that has a lot of relative file paths that point to it, for which a migration to packages/ would be non-trivial\nI would love to replace our internal npm build tool with lerna because lerna has a much simpler api, handles dependencies much faster, and has better Atlassian support but we simply can't move all of our node_modules into packages.\n. I talked to @roblg about it, and it turns out that mostly its the tooling we've built around our maven build system that assumes that our servers are children of the root directory.  Migrating to have our packages in packages/ instead would require us to change the way our distros are built and deployed, and how much of our build tooling is implemented (for instance, we have a fair bit of legacy code that is copied between our legacy Spring MVC server and our new React Server instance at build time to ease migration that we would have to retool.  There isn't any reason that, had we known that lerna would have this requirement two years ago when we started the React Server project to put all of our private node modules into a folder called packages, but we had no way of knowing at the time that would be a requirement.\n. It needs to be split into multiple directories.  In our case, we need some modules to be at the monorepo root, and some modules to be in a configurable directory (we call it redfin.npm).  We could actually do without the configurable directory (I could move redfin.npm to packages), but we can't do without allowing some modules to be at the monorepo root (i.e. siblings to lerna.json), and I'd like to be able to keep most of them in a redfin.npm/packages directory to prevent cluttering the monorepo root when we can avoid it.\n. Hi @NogsMPLS, we really appreciate you pitching in!  This has been open for quite some time, and hasn't seen any activity.  Please, feel free to open a new PR once you've rebased your branch if this issue is still affecting you.. When we run lerna publish, I'd like to see these dependency versions updated as well. \n. From a user's perspective: yeah, basically.\nThinking about the implementation, though, its slightly more complicated than that, since there are a lot of other package.jsons that you wouldn't want to search and update\ndougwade react-server/packages \u2039react-server-cli-help*\u203a \u00bb find . -name package.json -type f | wc -l\n4091\nMy ideal algorithm for updating versions would be to start at lerna.json and for each subdirectory except node_modules, check for a package.json and update it if it is found, then recurse on each subdirectory.\nThen, for the following project\nbar/\n    node_modules/\n        dep/\n            package.json\n    package.json\npackages/\n    foo/\n        node_modules/\n            dep/\n                package.json\n        package.json\n    generator-foo/\n        node_modules/\n            dep/\n                package.json\n        templates/\n            package.json\n        package.json\nlerna.json\non publish, lerna would update bar/package/json, packages/foo/package.json, packages/generator-foo/package.json, and packages/generator-foo/templates/package.json, but would not update bar/node_modules/dep/package.json, packages/foo/node_modules/dep/package.json, or packages/generator-foo/node_modules/dep/package.json.  But, strictly speaking, that's two separate issues, one to pick up bar/package/json, and one to pick up packages/generator-foo/templates/package.json -- this issue is to pick up packages/generator-foo/templates/package.json\n. I'd really rather we hold off merging this until we ensure that optionalDependencies are supported as optional, i.e. that bootstrap doesn't fail if they aren't installed.. \ud83d\udc4d \n. @jpnelson now that we're a lerna monorepo ourselves, I feel like a merger would be significantly easier, and I'm in favor of it.\nHowever, this issue is a discussion issue that hasn't seen any discussion in years, so I'm going to close it.. this has been implemented; closing. This was fixed in #719 . @giuseppeg I think that would work, but there is one rub: binaries on PATH take precedence over locally-installed dependencies, meaning that if you promote a dep to the root, then you can't override it for a local package.  What we do internally at Redfin is specify the path to the monorepo root in package.json, which isn't pretty, but it works, c.f.\n{\n  \"scripts\": {\n    \"test\": \"../../ava/cli.js tests.js\"\n  }\n}\nwhich means that if we want to upgrade some packages to a new version of ava, we can do so by using their locally-installed version.  I'm not sure how strong of an argument that is against what you're proposing, but it is, at least, something to consider.\n. @giladgray I'm fairly certain this was resolved in https://github.com/lerna/lerna/pull/599.  Does that meet your need?. I dig the lerna publish --version [repo,package,major,minor,patch,1.2.3] api -- I think its significantly clearer and easier than two separate args.\n. Since npm install calls prepublish internally, you could use npm install to run the build in watch mode (and check dependencies as a side-effect).  Generally, having a generic watch mode seems useful for transpiled modules.\n. @rygine Consider this commit that didn't merge to React Server.  Initially, as part of prepublish, I babelified the sources of my babel plugin, and then exported the transpiled javascript as main.  @thejameskyle says that we don't need a watch task to see when we need to run npm install, but in this case, a watch mode that would detect changes to src and run npm install because npm install runs prepublish.  With your implementation, it would make more sense to use watch to run npm run prepublish, but even running npm install would be a huge improvement.\nI've been implementing watch tasks as scripts, and then using lerna exec -- npm run watch, which works pretty okay, but is a lot of boilerplate.\n. @rygine the appveyor failure is likely unrelated.  We've dropped the version of node that failed -- wanna rebase and try again?. > In #11 I discovered that everyone needs a different strategy because of different use cases\nshouldn't prevent merging this pr.  when we fix #11, we can add the strategy flag -- getting any solution in that allows deep linking (i.e. require('my-package/foo);) is better than getter a perfect solution that allow deep linking.\n. \ud83d\udc4d  this would be great\n. @jpnelson it'd be awesome to get this merged.  We've dropped some of the nodes you were having CI troubles with -- wanna rebase and try again?. I would prefer the output ofnpm run` scripts to not be interleaved -- it would make it prohibitively difficult to read the output if you used the script to inform (for instance, when running a task that runs david for every dependency, you wouldn't be able to tell where deps were updated)\n. > What would be a sane choice for the maxBuffer then?\nAye, there's the rub \ud83d\ude09  -- npm silly logs can get pretty large; I've seen them be in excess of a mb.\n. > I'm happy to close this PR and the related issue for the time being\nclosing. It is not.  For react, hoisting to the monorepo root is the correct solution.. I'm not sure how much this matters, and maybe this is less closely related than it seems to me, but this strikes me as very different than how node handles cycles in module loading, where the first module is partially loaded, the second module requires the first module partially loaded, the second module finishes loading, and then the first module finishes loading.  Trying to emulate the way node modules are loaded when building modules probably doesn't make sense (at least, I'm inclined to say it doesn't), but the two ideas seem closely related enough in my mind, and the resolution implementation is different enough, that maybe it warrants a hint in the readme like the one that exec has about nondeterminism?\n. save_cache takes a list of directories which should be added to the cache; adding all of the node_modules of nested packages should do the trick.. @Guria you should be able to use a more complex glob, something like \nlerna bootstrap --scope \"(function-tree|cerebral|cerebral-forms|cerebral-provider-http|cerebral-router\". For the wayfaring traveller searching these here internets for what's going on, to work around it I for d in packages/*; do pushd $d; npm ls superagent; popd; done\n. @gigabo Interesting -- is the output after the first error erroneous, then?  \nThere doesn't seem to be a way for me to suppress the error from npm ls, which means I don't actually have a way using lerna to discover which packages have a given dependency, which seems like something I'd want to be able to do.  Adding the ability to continue after error seems like it would work, though I could also see a lerna-specific command for reasoning about dependencies (for instance, if you were trying to discover cycles in the dependency graph after encountering a warning).\n. we never received a response; closing. @motiz88 @olegskl last night we merged a change that hoists common dependencies to the monorepo root.  I suspect that this fulfills your usecase.  It accomplishes much the same thing (having a core set of dependencies that are installed only once while being available to every package) while giving some other guarantees that I think are an improvement.  One of the things that is really important for Lerna projects is that they operate independently as if they were well formed npm packages.  This is important to make onboarding for new developers easier, since if they are already familiar with yarn or npm, they can develop on a single module in a lerna repo using the tools they are used to.  This also makes it possible to import and export modules from a lerna repo, since each module is well-formed on its own.  By symlinking devDependencies listed at the root to leaf modules, you're creating a module that can't be npm installed and used (since the devDependencies aren't available), and a module that can't be exported (since its dependencies aren't listed), whereas by listing the full dependency closure in each module and then hoisting the dependencies, you have well-formed node_modules, singletons are respected, and you only install each dependency once.\nIf there's something I'm missing here, let me know, but I believe that we can decline this pr as redundant to #507.. @DxCx I have good news for you -- its out!  https://twitter.com/left_pad/status/826857968930992128. @busybeaver it seems like you have an invalid package.json -- I can repro this with npm:\n```\n\u00bb npm dist-tag ls\nnpm ERR! Linux 4.4.0-59-generic\nnpm ERR! argv \"/home/dwade/n/bin/node\" \"/home/dwade/n/bin/npm\" \"dist-tag\" \"ls\"\nnpm ERR! node v7.5.0\nnpm ERR! npm  v4.1.2\nnpm ERR! file /tmp/pretest/package.json\nnpm ERR! code EJSONPARSE\nnpm ERR! Failed to parse json\nnpm ERR! Unexpected token 'y' at 12:3\nnpm ERR!   y\nnpm ERR!   ^\nnpm ERR! File: /tmp/pretest/package.json\nnpm ERR! Failed to parse package.json data.\nnpm ERR! package.json must be actual JSON, not just JavaScript.\nnpm ERR! \nnpm ERR! This is not a bug in npm.\nnpm ERR! Tell the package author to fix their package.json file. JSON.parse\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /tmp/pretest/npm-debug.log\ndwade /tmp/pretest \u00bb cat package.json                                                                                   1 \u21b5\n{\n  \"name\": \"pretest\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"pretest\": \"echo 'pretest'\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  y\n}\n```\nI don't believe it's reasonable to expect npm dist-tag ls to work with invalid json, but even if it were, this issue would belong in the npm repo.  I'm going to close for now; if you have a repro with a valid package.json that succeeds with npm, or if I've misunderstood, we can revisit.. @jasonLaster does https://github.com/lerna/lerna/pull/365 cover your use case?  In particular, if you configure the main package in addition to packages/, they'll be linked together, which is that you're looking for, yeah?. This is fixed in npm 5; closing. Closing due to a lack of repro. we never received a response; closing. . This looks ready to merge to me \ud83d\udc4d \n. The fix has been sitting on master for three weeks :thinking: . @danielo515 sorry for any confusion, I was agreeing with you.  I meant \"there is a fix, and there has been for a long time, but its still not available to end users.  Maybe its time to cut a release?\". Thank you so much @thejameskyle @hzoo!  I really appreciate your quick response!  I see there was some madness with Travis; I really appreciate your pushing through.. @casesandberg hit the nail on the nose -- take a look at https://github.com/lerna/lerna/blob/master/src/NpmUtilities.js#L70. This was fixed in https://github.com/lerna/lerna/commit/e93970458d1bc75c4b14de5ec45b73a1fd985406; closing. I set packages I don't want published with \"private\": true in package.json to exclude it from the publishing procedure.. The tests failing on appveyor seem to be due to the $(git ...) command substitution at https://github.com/lerna/lerna/pull/475/files#diff-154eeef66f5acd021d530f6f5494e476R49.  Afaict, $() command substitution is supported in PowerShell, so I'm a little surprised.  Maybe you need \"'s around it or something?  Certainly splitting the two commands into two separate execSyncs would also solve it.. I, too, have been having trouble with the build failing on deprecated nodes.  I opened #484, which drops deprecated nodes, and have been building prs on that commit to side-step the issue.  It will mean that your pr merging will block on the deprecation, but it might be easier than playing dice with the build.. Fixed in https://github.com/lerna/lerna/pull/480; closing. The failing test is due to a difference between how normalize-path and path.join normalize paths on Windows (normalize-path, surprisingly, forces every path to use unix-like slashes, whereas path uses forward slashes on Windows).  Changing the assertion at https://github.com/lerna/lerna/blob/master/test/ImportCommand.js#L174 to use path.join instead should resolve your issue.. As to adding tests, I think you'll want a new test case here that tests a new import fixture that has packagePaths in their lerna.json. lgtm :+1: . Thanks for the quick response @gigabo.  I updated the docs and added tests, and did a little general cleanup and commenting.. rebased onto the latest master, and got the tests running -- wanna take a look @gigabo?. @gigabo yes. I'm closing this pending #485 merging to prevent confusion.. This failed on Windows on node 0.12: https://ci.appveyor.com/project/lerna/lerna/build/1.0.334/job/hvix4o53di1nutxp, so I rebased onto #484. Hi @evocateur!  Sorry for the long delay.  I've added a mess of tests, and tightened up the diff to only what's strictly necessary.  I think this one should be ready to merge.. \ud83d\udd14 @evocateur . yo @reggi I noticed you cleaned up a buncha issues -- thanks!. @gigabo OOoooooOOOohhh.  Sorry, I misunderstood what was afoot.  Lgtm.. iiuc @hzoo is working on one now. If that is the case, I doubt it'd be more than a couple of days.. And it's out! https://twitter.com/left_pad/status/826857968930992128 @noherczeg . It seems like your question was answer @ForbesLindesay, so I'm closing this in favor of https://github.com/lerna/website/issues/13, which would make this information more discoverable.  Lemme know if I've misunderstood.. Hi @afc163!  I think you've misunderstood how --force-publish-packages works.  The docs specify that  --force-publish-packages takes a list of packages to force the publish for, like --force-publish=package-2,package-4, or the wildcard *, like --force-publish=* to force publish all packages.  If you look at the first two cases you'll see it forcePublish does just that.  I'm sorry that the docs are confusing; I would be very grateful for a pr to clarify.. Sounds reasonable to me.. I took a crack at this last night for a couple of hours and didn't get very far.  While the prior work done does get us pretty far, the changes to the tests are pretty extensive, so be forewarned.. Also, I'm p sure this is a dupe of https://github.com/lerna/lerna/issues/492. Hi @gpittarelli!  I really dig saving 40K of disk space, but I'd really prefer that we use .npmignore rather than files/  With files if we add a new file and forget to update files, lerna will be broken for clients; if we use .npmignore, instead the risk is we might include files clients don't need.. > Is there way i can use those packages ?\nThere are two ways that I can think of, both of which you alluded to.  You can set a publishConfig in every one of your modules' package.json that points to your sinopia server (e.g. \"publishConfig\": { \"registry\": \"http://localhost:4873\" }).  There are plans to support a registry option in lerna.json and at the command line that would make this option simpler.  This solution is good if you want to share your modules with other developers without publishing to the public registry, or to deploy your modules to a production environment.  \nThe other option, best for local development, is to use npm link to link your lerna modules into the global node modules, and then link from the global node modules to other node modules on the local file system (you can do this in one command, like npm link relative/path/to/lerna/module . from the directory at the root of the module you want to use your lerna modules).\n\nWill lerna will do npm link for all the packages something like that?\n\nIt does not -- Lerna locally symlinks packages, but doesn't use npm link and doesn't link through the global node modules folder, so they're not available in other packages.  I think we'd be resistant to making Lerna do that by default, given how strongly node discourages use of the global node modules folder, but it might be reasonable to add a link command that symlinks all required lerna modules to an outside dependent, if there is need, since I think this'd be rough to do with lerna exec.\n\nDo lerna support private registries ?\n\nI think until we have automated tests, the answer is technically no.  However, I use a local verdaccio instance for development, and there's a lot of people using sinopia, so I'd be surprised if Lerna stopped working with private registries any time soon.. Closing in favor of https://github.com/lerna/website/issues/12. While generally I agree with @noherczeg that we should prefer JavaScript native constructs and functions, I find @wtgtybhertgeghgtwtg \"it would reduce the dependencies\" argument pretty compelling -- long install times can make CI builds particularly onerous.  There's also a fair number of utilities in lodash that aren't present as js constructs, like flatten and zip.  These may seem (or even be) trivial to implement, I'd still prefer to write fewer of these small helpful functions ourselves, and offload as much of that complexity to lodash as possible.  We'll just have to be vigilant in code reviews to make sure we're using native constructs when appropriate, and that seems reasonable to me (since the performance boosts are negligible, and we're already paying the price to install the dependency).  I think this is a home run @wtgtybhertgeghgtwtg.. You can use the packages option in lerna.json to configure maven-project-a/packages/ to be where your lerna modules are located, which should allow you to structure your project however is most convenient for maven.  Does that cover your use case, or is there something more I'm missing?. @joscha I think in this case a repro repository would be best, since then I can clone it and use it locally -- unless there's some cool gist feature I don't know about, to use it locally would take a lot of copy-paste.. @bboysathish yeah, my ui doesn't seem to update locally either \n\nbut they install just fine, which is the important part\n\nMy verdaccio instance, on the other hand, updates the ui immediately:\n\nIf running verdaccio in place of sinopia works for your use case, it seems to be more actively maintained and more stable.\n. @bboysathish you'll have to file that against sinopia.. This can happen if the current version of the dependee in your repository doesn't fulfill the version range listed in the dependent. (e.g. if a has a dependency on b ^1.0.0, but b lists its version as 2.0.1, then lerna will install it from npm).  Can you include the version of companyname-parser and the version name of whatever package is emitting the error?  The other thing that I can think of is that npm checks the registry for a lot of commands that you might not think it would check the registry for (e.g. npm link).  Can you post the full npm-debug.log, which should include more information about what npm command is checking the registry?. I think you might be confused about what peerDependencies are -- peerDependencies are no longer installed (since npm 3); they simply indicate packages that a dependent must also install.  As such, no, Lerna does not, and will not, install peerDependencies.. While your particular error has already been fixed, we do actually have a rogue logger.warning running around.. I use codecov for that, which adds a summary to pull requests, but not a full coverage report.  I can set that up over the weekend if that's what we want.  The other provider I've used in coveralls, but codecov is newer and newer is always better :wink:.. I've created the milestone; let's keep this issue until we feel relatively confident that the milestone has all the issues attached to it that need to be in the v2 release.. @casesandberg do you repro with a more recent lerna?  This was fixed in https://github.com/lerna/lerna/pull/483. I thought you could pass extra arguments to npm after a -- switch, e.g. lerna publish -- --access=publish, but looking through the code, it doesn't seem like that's the case.  It does seem like something we should support (using a scope seems like a great way to group lerna packages).  It does look like as a workaround, you can use npm access public after the fact, so I'm labeling this an enhancement.. ugh.  must have collided.  I'll hop on it.. @asharma93 I just tried to use lerna import on a fresh lerna repo (e.g. only ran a lerna init with the latest master), and was greeted with\n```\ndwade frontend/monorepo \u2039import-build\u203a \u00bb lerna import ../build\nLerna v2.0.0-beta.38\n4d892f1\nAbout to import 81 commits from ../build into packages/build\n? Are you sure you want to import these commits onto the current branch? Yes\nErrored while running ImportCommand.execute\nFailed to apply commit 716f365.\nError: Command failed: git am -3\nerror: sha1 information is lacking or useless (packages/build/package.json).\nerror: could not build fake ancestor\nRolling back to previous HEAD (commit 4d892f1).\n```\nI can confirm that git subtree add -P packages/build ../build master works as intended, so I'm in favor of this change.. Given the drop in conversation on this issue, I'm assuming https://github.com/lerna/lerna/pull/764 resolved this.  Please feel free to reopen if I'm mistaken.. I think we've answered all the questions here.  If I'm wrong, feel free to reopen.. @Bamieh I think you still have a couple of things you can do to make this work for you.  The first thing you might consider is hoisting all of your dev dependencies to the monorepo root -- we symlink the binaries into the appropriate .bin directories, so you can keep using them as usual.  This will mean that only production dependencies are ever installed in the modules that are uploaded to lambda.  The other thing you might consider is adding an extra step to your deploy script that runs a lerna exec -- npm prune --production, which would have the same effect.. Closing as duplicate of #1421 . @ErisDS it should work if you edit foo's package.json directly to reflect the dependency.. Closing due to the lack of a repro or response. Closing per https://github.com/lerna/lerna/issues/938#issuecomment-367554173. @kachkaev Do you have the lerna-debug.log and npm-debug.log or the error or anything?  I'm curious to know why its crashing; iiuc it shouldn't be.. I'm with @hulkish; closing. @greypants Thanks for including such a detailed description of what happened and how future users can diagnose and fix this!  It sounds like this issue is resolved, so I'm going to close it, but if I'm wrong, don't be shy about reopening.. Thanks for following up @Inlustra . This question seems to have been answered; please feel free to reopen if there are more follow-up questions.. Closing per https://github.com/lerna/lerna/issues/1269#issuecomment-367308852; this use case doesn't really fit the scope of this project.. @johnmcase I truly do not understand why you need this feature.  I've read the Angular Package Format spec, and it recommends the following file structure:\nmy-angular-library\n- package.json\n-- src\n--- index.ts\n--- index.d.ts\n--- index.metadata.json\n-- esm2015\n--- index.js\n-- esm5\n--- index.js\n-- bundles\n--- index.js\nWhich is very achievable without even using the files key in package.json, doesn't require copying package.json at build time, and doesn't even have a dist folder.  The compiler defaults to using the current directory for output, rather than dist/.  Build tools (catch the two links there) can be compiled to use '.'.  There are boilerplates that demonstrate building angular with community tools.  I'd be much more sympathetic to this feature request if I understood what motivated this.. closing per https://github.com/lerna/lerna/issues/1340#issuecomment-374806710. yo @bochen2014 I'm not seeing the test for -D -- did you forget to push?. huh.  I must've misunderstood this comment. Looks like we've answered this one; closing.  Feel free to reopen if I misunderstood.. The slack instance is still up and running (I got a notification for this issue), but it seems our slackin instance is down.  Maybe this issue belongs in https://github.com/lerna/website?. @Robinfr we use npm's file: specifiers to manage our monorepo, which means that when you run bootstrap, npm i is only run in the root directory.  Thus, the extraneous package-lock.jsons are never generated.. no, thank you @evocateur for doing the heavy lifting \ud83d\ude42 . Woo!  Thanks for helping out @mlavina!  I haven't been keeping up as much with the issues as I'd prefer, so that really helps a lot.. I looked over this one, and the code looks pretty good and the tests seem to cover all the cases, so thanks for that @krotscheck -- great stuff.  However, the feature itself seems a little terrifying, what with the amending and force-pushing; I don't feel comfortable pushing the merge button without a second opinion on this one.  Whaddya think @evocateur?. We have code that runs prepare as part of publish, as well as a test that checks it so I'm surprised by this.  Do you have a minimal repro repo that I can look at to investigate?. Hey @MrChe I'm going to close this for now.  If you manage to pull together a repro, feel free to reopen.. @mistic100 any luck creating a minimal repro repo?. Thanks for getting back to us @mistic100!. @mistic100 yarn run build works in any given module directory because lerna is horking on understanding the dependency graph -- which order to run the script on the modules.  yarn run build doesn't provide this functionality, so it doesn't exhibit the behavior.  Put another way, yarn run build and lerna --scope=\"calendar\" run build works as expected, the same as yarn run build in calendar, so there is feature parity.  Does this make sense?\nOne way to address this is to use canary releases, which use the semver version plus the SHA of the package to distinguish it from other versions, rather than a date.  This allows lerna to understand the dependency graph (since its semver compliant), but also allows you to have the same properties as the continuous deployment pattern.  To find the most recent build, you'd check the latest tag; to find a version from a specific date/time, you would use the output of npm show calendar to find the dates associated with canary versions.. This is the behavior implemented by conventional-changelog, rather than by lerna.  If you read the discussion there, you can get more context why they've decided to implement their automated version bumps like this; if you would still like this feature after that, please re-file this issue there, rather than here.\nIf you're looking for a way to make lerna \"Just Work\" \u2122\ufe0f on CI, we recommend using canary releases.  This addresses the problems of concurrent publishes from multiple builders, and republishing from pushing the release commits.. No problem.  The best docs we have on canary releases are the ones in the README.. Unfortunately, this project setup is one that Lerna does not support.. Hi @appsolutegeek!  I'm sorry to hear this has been confusing for you; I hope I can clear things up.  \nYou are correct that --sort defaults to true.  It doesn't seem to be documented in the README; we should add that.\nThe package prefixing is not present when you run lerna run without parallel or stream because it is not needed.  We buffer the output of each of the child processes (we start up to 4 processes by default, but you can change this using --concurrency), and then emit all the logs for one package all at once.  We output the name and path of the package before the contents of stderr and stdout, so rather than looking for the prefix, you should scroll up and look for a header.  \nStreaming the logs (using --stream) and running them in parallel (with --parallel), on the other hand, prefix the logs with the package name because the logs are interleaved.   That is, you can have log lines from package A, then from package B, then from package A again.  Because of this, there is no way for you to know which package any given log line comes from (unlike lerna run, which emits all the logs for one package, then all the logs with another, with a header that indicates which package its from).  Parallel execution streams the logs because we spin up one process per package and runs them all at once; for customers like Babel with ~150 packages, buffering the output of stdout and stderr would wreck havoc on most systems.\nI'm going to leave this one open since it seems we need to improve our documentation.  If my answer clears things up for you @appsolutegeek and you have some extra bandwidth, I'd be more than happy to help you submit a PR to update the documentation with a better explanation.. I'm glad to hear you found a solution!  I'm going to close this since it seems its resolved; if that is not the case, feel free to reopen.. Iirc, what's happening is that we're writing temporary package.json files (same as in 2.x) with the computed set of dependencies that need to be installed, and we don't distinguish devDependencies from normal dependencies, and don't include the name and version fields in the generated package.json.  We'd take a PR to fix this issue, but I'm not sure what you can do in the meantime (especially since its unlikely we backport this to 2.x).\nOne option is to hoist all of your devDependencies to the monorepo root, which sidesteps the issue of the dependencies vs devDependencies, but doesn't address the excess noise from the extra commits. Another might be to use the lerna-generated package-lock.json, but since npm respects the package-lock.jsons of installed libraries, this might lead to the installation of some dev dependencies in your customers dependency closures (I'm not sure of this, it's just a conjecture).. What are you trying to accomplish?  I've had the most success using my private or internal registry as a passthrough to the public registry when the module is not found in the internal registry, but returns the package from the internal registry when it is present.  I'm interested to know what you're doing where you want something in the public registry, but there is also value to having it in the internal registry, and seeing if we can do something else (like a proxy or something, rather than a lerna change).\nThe one approach you could consider is writing a release script and running that instead of publish.  E.g., you would have release run npm publish --registry=\"registry1\" && npm publish --registry=\"registry2\", and then use lerna run release instead of lerna publish.  This would lose you versioning and filtering what will be published to only those packages that have been changed, but I guess it would work.. @reggi Thanks for the detailed write up, that made this issue really easy to understand and put your request into context that I was missing.  I'm really sorry this has happened to you; this is a rough introduction to open source development -- I hope it doesn't discourage you too much from continuing forward.  As much as I love the npm team, they really have their hands full running the largest FOSS repository with a small team, and getting support from them can be difficult sometimes (there are a LOT of tickets that get closed by the bot in the main npm registry without ever getting any response).  I totally understand why you're looking for an alternative solution.\nThe difficulty with running two publishes one after another is not just the version numbers (I feel like you could get around that with caret dependencies), its the way that lerna computes what needs to be published and what doesn't.  We create git tags to indicate what has been published, and then on subsequent publishes, we publish only those packages that have changes between that git tag and HEAD.  For your second publish, there won't be any changes to publish, and lerna won't publish anything.\nWhich is why we'll need to find a way to do this in one publish.  Npm lifecycle scripts are our most common extension point, but we can't hook into the publish lifecycle because we would get stuck in an infinite loop (each postpublish would spawn a publish which would spawn a postpublish &c), unless we persisted some state, which would be ugly and hard to clean up and error prone.  \nI think the best I can think of is to add a single npm script (say, release) to your root package.json that runs two separate lerna commands.  The first is publish, same as always, which bumps the versions of all the packages, and uses the registry flag in your lerna.json, set to your private repository (this is crucial, since the second publish will use the system-wide configuration).  The second is exec, as in lerna exec --bail=false -- npm publish, which is inelegant, but should work.  The registry in your root npmrc (the public registry) will work for the publish.  Any packages that weren't bumped by lerna will fail publishing because they are trying to republish a version that already exists, but all version that were bumped will succeed.  I think that should get you to where you want to go.. Here's the interesting part of the publish command.  It is undocumented; my understanding was that we intend to keep it that way until 3.x becomes latest.. You'll need to write a deploy script; as you mention, lerna is not a deploy tool.  Here's one you might be able to read through to get an idea of how such a deploy script might work.  Note, in particular, that I blow away node_modules, tar up the sources, scp the tarball to the host, untar it and run npm install --production -- since you've published all your libraries, there's no need for symlinks at that point.\nHope that helps.. Do they depend on a package which has changed?. Looks like we answered this question, so I'm going to close.  If I'm incorrect and there is something more to be asked, please reopen.. Closing as duplicate of #1421 . Why aren't those other private packages in the monorepo?. Thanks @whazap . I tried to take a swing at this one, but I couldn't find a no-ci option in bootstrap, either in command.js defined for yargs, or in index.js the body of the command.  This leaves the tests failing with\nImplications failed:\n     hoist -> no-ci\nAm I missing something?. See #1814 for more details. @imsobear I can't read the error message provided or copy the characters for an automatic translation.  Can you provide a translation?  I'm very surprised you can't publish to your private repo with the public npm -- I've done it with two different private repos without trouble.  What's your private repo provider?. Closing as a duplicate of #1779 . You need to provide --access public to the initial publication to publish a scoped package because, as Linus points out, scoped packages are private and paid by default.  The publish readme doesn't show any way to provide arbitrary commands to npm, so you'll likely have to do the first publish by hand, without lerna and with npm directly.. lerna run my-script -- --my-arg=true.  This would iterate through all packages and run the npm script my-script, providing the argument --my-arg=true to each script.. Your example is correct.  Script local would be executed, and the argument index.js would be passed to it.. I don't understand your issue.  What is wrong with my comment?. Would instead lerna exec --scope myComponent -- npm install --save-dev typescript tslint gulp gulp-watch gulp-plumber ts-node @types/node @types/gulp @types/gulp-watch @types/gulp-plumber serve your need instead?  It's only an extra 7 characters and its far and away the easiest to maintain.. OwnersCommand?\n. I actually do the same thing: https://github.com/doug-wade/clefs/tree/master/packages/generator-clefs-plugin -- I suppose we could consider having init run generator-gulp-plugin or something.  However, asking new users to learn about and maintain a yeoman generator seems like a pretty high barrier to entry; I'm inclined to support a simple command in lerna and add the yeoman generator suggestion to the docs.. @seansfkelley I think it is more important to be right than it is to be fast, since it is much slower to get a build failure and have to debug and rebuild toposorted than it is to waste the excess time running toposorted when you don't strictly need it, but that we should strive to \"do the right thing\" as often as possible.  I would actually propose two flags, --sorted and --unsorted (I don't think the topo prefix helps much) that overrides the default behavior, and then set a reasonable default per-command (that is to say, run run, exec and bootstrap sorted and the rest unsorted).  By making any command where sorting might be required sorted, we save less experienced users from erroring/rebuilding as often as possible; by providing flags to override the default behavior of any command, we allow more savvy users to use lerna in ways we haven't anticipated yet to do clever new things.. Afaict, this change doesn't actually seem to change the tag name, only the commit message.  It's just that previously, tags was part of the commit message, so @traviskaufman changed how the tags is computed, but with the same output.. I dig it -- it would also mean that I could unlayer the prs, since they'd no longer need the config utilities.  It does make the use case kinda awkward though, since it overrides the global .npmrc -- you have to edit a hidden file every time for every project you're working on every you want to change registries (I use three -- public, private, and local, and its nice to be able to switch all of my projects globally).  By maintaining the \"main\" registry in lerna.json, I can toggle the global .npmrc with npm config set registry http://localhost:4873/ on a plane, for instance, and develop as usual.. Sorry!  I just got on a roll and got a little excited.  I do only need NpmUtilities -- I'll try to get the noise down.. Mostly symmetry, but also because the inital comment explicitly mentioned \"logg[ing] you back out afterwards.\"  I didn't go so far as actually changing where you're logged in to, but I had considered putting it behind a flag.  What do you think?. Setting publishConfig in package.json is safer because you can forget to specify the correct registry when using npm or lerna on the command line.  I think we should probably also specify it on the command line, so you catch the change in the registry immediately, but I would also like the added safety if someone uses npm directly.. I dig it -- I'm also dropping a commit; lemme know if that's too much. \ud83d\udc4d . I think if you used path.join here it'd fix the appveyor failures. I'm hoping I can expand on this to more fully address https://github.com/lerna/lerna/issues/515, though I'm saving that for another pr to keep this already pretty sprawling pr small and focused.  I think we should also set it in package.json, just to be safe (in case someone runs npm publish in one of the node modules, for instance).. nit: I think we should use $(npm bin) here. I think an Object.assign here will get you past the appveyor failure. not that I can tell -- when I add myself as an owner repeatedly or remove an npm user who is not an owner from a package I own repeatedly, npm doesn't throw or log an error or anything.. oooh good call \ud83d\udc4d . I might even suggest that all npm operations provide the registry flag -- I think that's what I would expect if I provided a registry key in lerna.json, for instance.. I agree with @evocateur that the initial implementation should be as simple as possible, but I'd still like to see nexus support in a subsequent pr -- we're using it at the office.. I share @rygine's enthusiasm for regexes, but it seems that you could write tests for splitVersion directly that verified that it works as intended, which would make me feel much better.. It seems like most FileSystemUtilities have tests; seems worthwhile to add some for these as well.. not just the above commands anymore, right?. making this part of the public api like this makes me think you're shelling out to npm every time.  I feel like \nChildProcessUtilities.execSync(`npm dist-tag add ${packageName}@${version} ${tag}`, {registry});\nwould be better, as would making getTagOpts a function\nChildProcessUtilities.execSync(`npm dist-tag add ${packageName}@${version} ${tag}`, getTagOpts(registry));\n. I'm p sure its a consistent order.  2 and 4 have a dependency on 1, and 1 and 3 have no dependencies, so there are two batches: [[1,3], [2,4]].  As to whether 1 always goes before 3 and 4 always goes before 2, I'm less certain, but in my ten or so runs they are consistent, and all the ci suites passed, so it seems so?. I'm just gonna point out that we don't actually need to check the npm client version here -- npm run prepare will work just as well on 2 as on 4.  That being said, I think you made the right call: it's super important that users be able to fall back to npm if lerna isn't doing what they expect, and papering over the version mismatch would preclude that.. why only install?. ?. should. canary and publish*. ",
    "MoOx": "Any plan to grad something like https://github.com/babel/babel/blob/master/scripts/grant-npm-owner.sh into the core?\n. Getting the same issue for a lerna --ignore '*-docs' exec -- babel src --optional runtime --out-dir lib --ignore '__tests__'.\nA friend did the repo, this command is working for him and doing nothing on my computer. But lerna exec -- pwd is working. Weird \ud83d\ude43. I want to add that the failing command is not \"failing\" (exit code ok + no output)\n```console\n~/Sync/Development/PhenomicFuture master*\n\u276f nr build         \n\nphenomic@ build /Users/MoOx/Sync/Development/PhenomicFuture\nlerna --ignore '*-docs' exec -- babel src --optional runtime --out-dir lib --ignore 'tests'\n\nLerna v2.0.0-beta.32\nIgnoring packages that match '*-docs'\nEXIT CODE OK HERE (MY PROMPT COLOR SAY ME SO)\n~/Sync/Development/PhenomicFuture master*\n\u276f lerna ls               \nLerna v2.0.0-beta.32\n- phenomic-api-client\n- phenomic-cli\n- phenomic-docs\n- phenomic-plugin-api-related-content\n- phenomic-plugin-directory-collector\n- phenomic-plugin-rss-feed\n- phenomic-plugin-sitemap\n- phenomic-plugin-transform-json\n- phenomic-plugin-transform-markdown\n- phenomic-preset-default\n- phenomic-react\n- phenomic-webpack\n- phenomic\n~/Sync/Development/PhenomicFuture master*\n\u276f lerna exec -- pwd\nLerna v2.0.0-beta.32\n/Users/MoOx/Sync/Development/PhenomicFuture/packages/phenomic-api-client\n/Users/MoOx/Sync/Development/PhenomicFuture/packages/phenomic-cli\n/Users/MoOx/Sync/Development/PhenomicFuture/packages/phenomic-docs\n/Users/MoOx/Sync/Development/PhenomicFuture/packages/phenomic-plugin-api-related-content\n/Users/MoOx/Sync/Development/PhenomicFuture/packages/phenomic-plugin-directory-collector\n/Users/MoOx/Sync/Development/PhenomicFuture/packages/phenomic-plugin-rss-feed\n/Users/MoOx/Sync/Development/PhenomicFuture/packages/phenomic-plugin-sitemap\n/Users/MoOx/Sync/Development/PhenomicFuture/packages/phenomic-plugin-transform-json\n/Users/MoOx/Sync/Development/PhenomicFuture/packages/phenomic-plugin-transform-markdown\n/Users/MoOx/Sync/Development/PhenomicFuture/packages/phenomic-preset-default\n/Users/MoOx/Sync/Development/PhenomicFuture/packages/phenomic-react\n/Users/MoOx/Sync/Development/PhenomicFuture/packages/phenomic-webpack\n/Users/MoOx/Sync/Development/PhenomicFuture/packages/phenomic\nWaiting for 1 child process to exit. CTRL-C to exit immediately.\n```\n\nIn my case I didn't have the correct requirements (I did lerna bootstrap but npm install at the root - so I was missing babel-cli). Installing it fixed the thing. I guess lerna exec should fail for real with information at some point.\n. Maybe related to #280.. Yarn will have a built in feature, called \"workspaces\" to offer a lerna like solution. More at https://github.com/yarnpkg/yarn/issues/3294. @evocateur what are you calling \"hoisting manually\"?. I guess I could related to this issues some issues\n- https://github.com/BuckleScript/bucklescript/issues/2750\n- https://github.com/BuckleScript/bucklescript/issues/2739\n- https://github.com/BuckleScript/bucklescript/issues/2425. So I guess it's not a lerna issue.... Hi. Sorry to bother you on such an old PR but I am curious about the motivation for ignoring stdin? I understand that it could not really make sense in some case (that I don't have in mind - I am not an stdin/out professional), but I am facing an issue and switching ignore with pipe or inherit seems to change nothing in most case but could help me with my issue.. ",
    "Sawtaytoes": "Is the config file name lerna.json and optionally .lernarc or just lerna.json?. ",
    "stale[bot]": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This pull request has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This pull request has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. ",
    "matthewmueller": "Did package.json#lerna ever get added? \n\nAccept both lerna.json and package.json#lerna as config options\n. sure. you have an application with multiple services like this:\n\n/packages\n   /api\n   /www\n   /auth\nthey each have their own git repositories but you can easily push them to various remotes.\nlerna push api heroku to deploy the latest API\nlerna pull api origin to pull the latest from remote origin\n. ",
    "chrisui": "Any update on the progress here? @thejameskyle Noticed some verbose logging has been merged just wondering if this flag will be following soon?\nAs someone picking up lerna for the first time this would be an incredibly useful feature just for getting to grips and not worrying about blowing things up! :)\n. @thejameskyle Cheers for the update!\nI wonder if a proxy around node fs and https://github.com/webpack/memory-fs would do the trick for you?\n. Purely out of interest - why isn't npm linking used?\n. Are there any plans to revisit this with the recent npm progressions (ie. v5 with package-lock.json).\nI'm currently looking for the canonical answer to how \"how do I lock my dependencies with a lerna managed monorepo?\"\nAlso regarding \"We're going to switch to Yarn eventually\" what does the roadmap currently look like for lerna with yarn? Am I still going to be able to use lerna with npm in a few months?. Awesome @evocateur, if I can be of any use let me know. We really want to use lerna but require a first-class dependency locking story so happy to invest!. I've came across this as a real need for our use case. This would really help optimise tests/builds (any ci really) and is probably more useful than the inverse --include-filtered-dependencies a lot of the time.\nIf someone could advise on where to start in the lerna codebase I could take a crack at this?. This looks great! I just opened an issue requesting this elsewhere. I also mentioned the use of a --until option (or --git-to in that issue) which might be good to add here as well?\nSee https://github.com/lerna/lerna/issues/876. This is great \ud83d\udc4d good work!. Note I'm more than happy to implement this if we think it's a good idea! Would be great to get some pointers in the codebase to get going with. :). Awesome thanks @ricky . Closing since https://github.com/lerna/lerna/pull/822 is merged!. Pointing my naive finger at yarn currently since just trying to use yarn without lerna is causing me trouble with random dependencies being missing not even in a monorepo/workspaces environment.. Have confirmed this is a yarn/workspaces/lerna-yarn-integration issue now with a npm only branch of the previous failing repro case (see linked repo).\nBelow are lerna with npm timings:\nreal    6m25.720s\nuser    3m22.711s\nsys     0m53.424s\nAnd here are timings if I just do a bog standard npm install in the main package (where all but 2 unique deps are):\nreal    5m41.063s\nuser    3m7.362s\nsys     1m5.443s. ",
    "tamlyn": "An alternative way to test what lerna will do is to install a local npm registry and publish to that:\nnpm i -g verdaccio\nverdaccio\nnpm set registry http://localhost:4873\nnpm adduser --registry http://localhost:4873\nlerna publish\n\nThen use npm pack <name> to inspect the tarballs it published.\n(Updated to use verdaccio which is a more up to date fork of sinopia.). ",
    "mojavelinux": "Thanks @tamlyn! That was super helpful advice. My only addition is that you left out the step to start sinopia.. I was able to use the combination of --skip-npm and --skip-git to perform dry runs in order to learn how to use lerna and become familiar with how it works before making any permanent changes.\nMy one request is to be able to perform the git operations, but bypass git push. I accomplished this by setting up a remote to a dummy repository and pointing to it using the --git-remote flag.. I agree, there's a chicken-egg problem here. Before you have your first tag, lerna is confused. And I have no idea what to set the version to before there's a version.\nWhat I did figure out was to set the versions to 1.0.0-alpha.0, then pass the --cd-version flag:\n--repo-version=1.0.0-alpha.1\nThis forced lerna to change the versions of all packages and publish. Perhaps this flag should be called (or aliased to) --first-version.\n  . This is still a problem, though I suppose it could be solved with docs.. Actually, I would argue it makes a lot of sense because it only represents the version. It's very clear in the docs that the tag adds a leading \"v\", which would make it not part of the version.\nPR sent!. ",
    "sarneeh": "Any plans on this feature? For now there were suggested only few workarounds. It would be lovely to have a --dry-run in lerna.. AFAIK Lerna runs a prepublish.js script located in your_package/scripts directory before publishing your libs on lerna publish.. I came into the same issue and would love to have an option to exclude some packages from publishing (but keeping them on install/bootstrap).. @evocateur Sorry, I guess I didn't explain the problem properly. I'd like to ignore it completely, this is also not bumping the version in package.json. I know there is independent mode, but in this way I also have to specify the version for the private package - which is completely redundant as I won't publish it anyways.. @evocateur Yeah, I've ended up that way as realised it's not much of a problem. Anyways, thanks for the answers! :). ",
    "arndissler": "During the last weeks I spent some time to think about this feature. It would be a great feature, at least for lerna beginners. I would go with the interface suggestion which @gigabo posted here: https://github.com/lerna/lerna/issues/51#issuecomment-183441844.\n@jamiebuilds Are there any concerns? Or is this task/feature/issue free for getting picked up?. Hi there, basically it's not a Windows problem. The problem is the repo itself which doesn't have any commits and therefore nothing to publish.. ",
    "jantimon": "Maybe we could add some additional confirms:\n```\n$ lerna publish --conventional-commits\nlerna info version 2.11.0\nlerna info current version 0.0.0\nlerna info Checking for updated packages...\nlerna info Comparing with initial commit.\nlerna info Checking for prereleased packages...\nChanges:\n - foo: 0.0.1 => 1.1.0\n - bar: 0.0.1 => 1.1.0\n? Are you sure you want write the changes to your package.json and changelog files? Yes\n? Are you sure you want to push the above changes to git? Yes\n? Are you sure you want to publish the above changes to npm? Yes\n```\nThis would make it more obvious to the user about what is going to happen next and he could skip those questions using the --yes flag.\nBonus: A maintainer could also alter a generated changelog / package.json before confirming the publish actions.. Well it\u2019s not like people publish many times a day so it would give people more control and allow to edit changelog typos before publishing - other libraries like standard-version which is widely used act similar - they prepare everything but wait for the user to do the final push.\nIs there any way to get closer to their approach?\nMaybe adding another option or command like \u2014guided-release?. Sorry I didn't see the commit.\nI am perfectly fine with only one confirmation for the entire publish process.  \nIts probably even more important than confirming the version numbers.\nBut if I read that code correct your confirm would happen after the changes were already pushed to a foreign repository and would require force push permissions to repair that.\nCorrect?\nMy intention is not only to inform the user but also to allow a final check of the changelog and modified files before performing actions which can't be undone.\nSimilar to the workflow of standard-version.. I really like the improved confirmation message texts.\nThe problem right now is that the user has no confirmation after the files were changed by lerna. \nSo for developers who don't know the lerna internals have to trust lerna to publish everything exactly in their favor.\nOther tools allow you to proof check that the versions they chose and the changes done by the tool are those you like to publish to foreign systems (be it git or npm)  \nIt would be a huge improvement to ask the user for confirmation to publish rather than for confirming that they want to execute the command they just typed into their terminal.. You are absolutely right the decision is good as it is right now - only the timing could be improved.\nIf the prompt would happen right before git push && npm publish the user could check and even fix typos in the changelog, see which package.json would be changed and so on before hitting the enter key.\n. Having all your knowledge about the code in lerna and about all the versions in your head you wouldn't need that change.\nSo I respect your decision.\nBut I really don't understand why you don't want to improving the dev experience for beginners who just want to get started with lerna.\nImho you can't expect everyone to know all command line arguments and how they have to be mixed together from the start.  \nAnd there will always be bugs - why do you insist not to allow developers to proof check that the changelog generation and file modification worked correctly before publishing?\nFor example after upgrading from Lerna 2 to 3.  \nI don't understand why this would be a disadvantage over the current implementation.\nIt would completely solve the pain described in #51.\nIt's just a start but a better developer experience could like this:\n```\n$ lerna publish --conventional-commits\nlerna info version 2.11.0\nlerna info current version 0.0.0\nlerna info Checking for updated packages...\nlerna info Comparing with initial commit.\nlerna info Checking for prereleased packages...\nVersion bumps:\n - foo: 0.0.1 => 1.0.0\n - bar: 0.0.1 => 1.0.0\nlerna info Added files to git\nlerna info Created tag 1.0.0\n? Are you sure you want to push these changes to git and release them to npm? Yes\nlerna info Pushing version commit and tags to git remote...\nlerna info Released \"foo\" 1.0.0 to npm\nlerna info Released \"bar\" 1.0.0 to npm\nlerna info \ud83c\udf89\n```\nPlease make lerna more fun to use with less surprises for beginners.. ",
    "manniL": "I'd love to see that feature :clap: . ",
    "theetrain": "I'd like to chime in since I have similar desires in the context of continuous delivery. In the repository I help maintain, we use TravisCI to report back what packages will receive version bumps before a pull request gets merged to master. Here is an example: https://github.com/telus/tds-core/pull/862 \nOur goal is to eventually set up continuous delivery of packages along with the version bump insights we recieve from lerna. In lerna 2.x, we achieved this by leveraging exposed methods from lerna. This is unfortunately brittle since there is no official API in lerna 2.x nor 3.x. \nI would be satisfied if I could run lerna version --conventional-commits --no in my CI pipeline, but there is no --no option; having a --no option would satisfy the 'dry run' scenario I would like to see. Consequently, as I'm in the process of upgrading to lerna 3.x, I may have to perform spawn acrobatics to achieve the above.\nI'm willing to help contribute a solution once we all arrive at a consensus.. I appreciate the explanation even though my query was out of lerna's scope \ud83d\ude04. I'll report back if there's any further insight, and you're welcome to close this issue for now.. ",
    "thanasis00": "The option --dryrun could be a part of almost all commands. I was thinking about the lerna version command as well, to see what will happen before tagging and generating changelog files.\nI could also help in this PR as well.. ",
    "ianwremmel": "I think I see two different needs that could be addressed in almost the same way:\n1. Add a dependency to a single package like you described (but maybe closer to standard npm commands):\n$ lerna install [--save] my-package-name dep-name [dep-name-two...]\n2. Add a dependency to all packages:\n$ lerna install [--save] dep-name [dep-name-two...]\nor possibly\n$ lerna install [--save] * dep-name [dep-name-two...]\n. Interesting. it looks like the problem I had with local, non-published files was caused by naming an explicit version instead of including a \"^\" in the dependency's version specifier. I think I've fixed the issue that I had, but I'll leave this issue open until a maintainer takes a look because the current task ordering still seems problematic to me.\n. I seem to be running into the same issue. I definitely have a new README, but the changes aren't showing up on NPM.\n. (by NPM, I mean https://www.npmjs.com/)\n. I have a hypothesis that the way lerna messes with dist-tags isn't triggering npm's normal website refresh job. I've opened a support ticket with npm, inc to investigate and will report back here if I hear anything.\n. I heard back from npm. It is indeed a result of the dist-tags technique used by lerna. npm has an open issue: https://github.com/npm/newww/issues/389#issuecomment-188428605\n. Ok, it's a hack, but a I got some help from npm and there's at least a way we can trick npm into rebuilding the readme.\nFirst, add \"-readmehack\" to the end of the package version in package.json, then:\nbash\nnpm publish\nnpm dist-tag add ciscospark@0.6.3 latest\nnpm unpublish ciscospark@0.6.3-readmehack\n. Agreed, I'm not suggesting that gets hacked in, but it at least helps those with the problem until npm fixes the bug. \n. In my case, I only actually have one readme I need to update, so I can put that in my publish script pretty trivially. \n. Awesome! Thanks @bcoe! The emoji don't exist to express my excitement!. I'm trying out 2.0.0-beta2, but it seems to have some perf issues so I don't think I'm ready make the switch yet.\n. I've been using my fork for about a month and lerna bootstrap takes about 40 seconds when all modules are already installed. With 2.0.0-beta2, I aborted lerna bootstrap after 4 minutes and the progress indicator looked like about a third of my packages had been visited.\n. unfortunately, no. it's an internal project that won't be public for another few months.\n. I'll see what I can do about getting more info for the perf issue, but in the mean time (1) should I open a new issue and (2) is it possible that it's an npm 2 vs npm 3? I'm using npm 2.\n. Will do, thanks for the quick responses!\n. I tried npm 3 with my own repo (which I can't share yet) this weekend and it had similar results.\n. Gotcha, thanks for the quick response! I found his issue on greenkeeper for anyone else with similar concerns.\n. I'd love to see something like this. I'm working a project that needs to be distributed to partners several months before I can release it publicly. I'm relatively confident that this would let me use bundleddependendencies to distribute a tarball.\n. That's kinda what I'm doing at the moment, but supplying my own $VERSION is kinda inconvenient, especially for canary releases.\nAt the moment, my plan is to (a) remove canary releases and (b) use empty commits with messages along the lines of #publish 0.7.1 to supply to version to the build script. I guess this issue can be closed for my needs, but I think it's worth considering in the future. \n. It looks like it's specific to --canary releases. \ncollectUpdates() has a filter condition that's basically <complex logic> || true\n. Seems plausible...I was running into enough issues with canary releases (and my build process in general), that I stopped using them for now. I won't be able to verify for a while, but I'm happy to close this PR and the related issue for the time being.\n. Sorry, my mistake. I briefly forgot how to use git and was installing the 1.x branch that I had forked several months ago.\n. right, it's the top level default that i'm looking for; i'd like e.g. lerna run test to use something defined at the top level unless there's defined to the specific package being tested.\nAdditionally, i believe the current implementation would require e.g. mocha to be installed for each package; ideally, lerna run test would use the mocha installed at the top level rather than needing to define one in every package (unless of course the package needs a special version, in which case that one should be preferred).\n. True, each directory would still need to contain test files, but, the majority of them should need the same command. In my example, it's mocha ., but in practice, it's something more like mocha -r babel -R junit -O outDir=./reports ./test/unit/spec/** && mocha -r babel -R junit -O outDir=./reports ./test/integration/spec/**.\nIn one case, though, I've got a yeoman generator and yeoman provides its own set of tools for running test, so, for that directory, i want to specify a test command in package.json which invokes the appropriate script.\nAt the moment, I'm currently solving this problem two Gruntfiles (one of which is largely unreadable).\n. So, looking at the code, I don't actually see how the latest tag is getting added to a canary release, but I've definitely seen it happen.\n. yea, agreed. i'm keeping an eye on build builds to see if I can figure out what's happening. \nhere's the command I'm using to publish:\nbash\nNPM_CONFIG_LOGLEVEL=info npm run lerna -- publish --skip-git --canary --yes\n. oh! I think i see what's happening.\nafter using lerna publish, I'm using the following to fix the readme issue. I bet when I unpublish it, npm switches \"latest\" to \"most recently published\" rather than \"previous latest\".\nbash\nnpm run lerna -- exec --scope ciscospark -- npm version --no-git-tag-version \"${NEW_VERSION}-readmehack\"\nnpm run lerna -- exec --scope ciscospark -- npm publish\nnpm run lerna -- exec --scope ciscospark -- npm unpublish ciscospark@\"${NEW_VERSION}-readmehack\"\n. So, not really a lerna issue after all, but I'm guessing changing to the following will fix it.\nnpm run lerna -- exec --scope ciscospark -- npm publish --tag=readmehack\nSorry for spamming you with another non-issue, and thanks for making a great tool!\n. Same root cause as #286 and #287?\n. Before I saw your response, I ended up just using bash, but after experimenting now, it doesn't look like that'll work. The following line doesn't match anything even though just just bin and just test-helper do\nlerna -- exec pwd --scope \"@ciscospark/(bin|test-helper)-*\"\n(The repo in question is https://github.com/ciscospark/spark-js-sdk)\nLike I said, I've already solved it for myself so there's no major hurry from my end, but it seems like there's either a bug or some missing documentation here somewhere.\n. that's a fantastic question, but so far i haven't been able to figure out how to turn it off.  could lerna's diff command be enhanced to look for a particular pattern? right now it's just grabbing the most recent tag, but I can imagine where some workflows would create tags reasons other than npm release. \n. I think matching that pattern is fine. There's currently no means of altering the pattern that lerna uses for tags, right?\n. I thought of that, but doesn't canary apply to all packages? with canary, wouldn't i effectively block my release of any package until i was ready to GA the wip package?. so, let's say i do a canary release of with packages/foo, and then i update packages/bar with some critical fix. if i do a regular publish at that point, won't packages/foo get published with the same version as packages/bar?. Yea, I actually just ran into that problem. I've been using my fork for the last few days and one of my dev modules was needlessly marked as private, thus leading to canary versions going out of sync and breaking bootstrap.\n. I'd be happy to, but I'm not entirely sure what you had in mind. I'd still like to use private modules with canary releases, but if I understand @edvinerikson's comment correctly, he's suggesting disabling canary if the repo contains private modules.\nMy use case for private modules is example apps. I explicitly don't want to publish my example code via npm, because installing examples would be kinda silly, but i want the example app's dependencies to update correctly.\n. ",
    "reggi": "What's the progress with this? How do people currently do this? Manually enter it in the package.json?. What's the status here? Could this fix my issue (https://github.com/lerna/lerna/issues/164)?\n. @thejameskyle I'd love this and it would be nice to have tabbed auto completion because all of the options for what to install or where to install are in packages. :)\n. @nolanlawson I'm not sure I agree. \nFrom the knex docs\n\nThe primary target environment for Knex is Node.js, you will need to install the knex library, and then install the appropriate database library: pg for PostgreSQL, mysql for MySQL or MariaDB, or sqlite3 for SQLite3.\n\n```\n$ npm install knex --save\nThen add one of the following (adding a --save) flag:\n$ npm install pg\n$ npm install sqlite3\n$ npm install mysql\n$ npm install mysql2\n$ npm install mariasqlas \n$ npm install strong-oracle\n$ npm install oracle\n```\nSo it makes sense that they aren't dependencies, and if they are used for testing it make sense that they are devDependencies. Because your supposed to pick and choose which module / database you want to use.\nNot sure how adding it to optionalDependencies or removing it from devDependencies will still get browserify to realize that because I used lerna to install the package I need another way for it to know what modules are being shimmed. Because when lerna installs a package with lerna bootstrap it's adding a fake package.json file for that module. So if browser was specified in the package.json now it's not going to be used when I browserify.\n. Gah! I don't know whats happening! \nI just added browser to the bootstrap process and realized that my package doesn't have any browser explicitly in it.\nhttps://github.com/lerna/lerna/blob/master/src/commands/BootstrapCommand.js#L77-L82\nI really don't don't understand how browserify looks for browser. Or what's actually going on here.\n. @thejameskyle I do think lerna will need to support the browser prop, and it's a simple add. It's not actually just not what I need right now. I'm gonna close this issue because it is confusing.\n. @nolanlawson you could be totally right.\nThe only reason I believe it does deal with the browser field because lerna stubbs package.json. So if one of your sibling packages has a browser prop in package.json it wont be imported when using lerna bootstrap. It generates a fake package.json without any of your custom props.\n\n. Would really love it if there was a way to npm install (locally) as well as npm link, could we make this plug-and-play somehow?\n. I only had it with 2.0.0-beta.20. I never ran init with other betas on a fresh dir, I was just updating the existing. Sorry I can't be of more help. I really was trying to recreate it a bunch. With different combos of npm init in dirs above and below my working dir. It wasn't consistent in any way.\n. Thanks for all the hard work on this so far. Hate to jump in, but I just wanted to test this out and got an error. \ud83e\udd14 \nnpm i https://github.com/awakenetworks/lerna.git#a251ead423c77fc8e13185f70a052eaa8d6adf93 -g\n```\nThomass-MBP-2:wonder thomas$ lerna\nmodule.js:472\n    throw err;\n    ^\nError: Cannot find module '../lib/index'\n    at Function.Module._resolveFilename (module.js:470:15)\n    at Function.Module._load (module.js:418:25)\n    at Module.require (module.js:498:17)\n    at require (internal/module.js:20:19)\n    at Object. (/Users/thomas/.nvm/versions/node/v7.2.1/lib/node_modules/lerna/bin/lerna.js:3:13)\n    at Module._compile (module.js:571:32)\n    at Object.Module._extensions..js (module.js:580:10)\n    at Module.load (module.js:488:32)\n    at tryModuleLoad (module.js:447:12)\n    at Function.Module._load (module.js:439:3)\n``. This might be useful! https://github.com/mateodelnorte/loop-things. What's the current status with this issue? I want to watch multiple lerna packages at once to build each individually with each packagesnpm run build:watch` script.. Yep I think this makes sense:\nlerna exec -- \"PARENT=`pwd | grep -o '[^/]*$'` && echo $PARENT\". Could also shrinkwrap here and it will pull tar from given installed registry.. I still would like a --config option so I can have multiple monorepos within one repo.. @evocateur I just closed some other of my issues, I'd love if this could be reopened and we could discuss it. I'd be interested in making a PR.. @evocateur  Why can't --config point to any given .json file and pull the version from there? I am confused as to what the bottleneck is.\nThis would allow for supporting multi-package roots in the same repo.\n\nlerna-project-a.json => points to ./packages-a/\nlerna-project-b.json => points to ./packages-b/\n\nThen every lerna command would accept --config using that as it's \nlerna publish --config ./lerna-project-a.json\nlerna publish --config ./lerna-project-b.json. Alright I'm convinced. Thank you!\nOn Thu, Apr 26, 2018, 8:07 PM Daniel Stockman notifications@github.com\nwrote:\n\nThe location of lerna.json also determines where the \"root\" of a lerna\nproject is based from. ./packages-a and ./packages-b should just be\ndifferent package locations for a single lerna project.\nAnd if they need separate node configs to even work, they should be\nin separate repositories. They aren't related, and they aren't sharing\nsymlinks.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/lerna/lerna/issues/1154#issuecomment-384824884, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AASHXtRHtNCP5lgOndSSzHOozV9K9Q5qks5tsmFVgaJpZM4Qyyc9\n.\n. When I use this method mainly switching to file and npm i packages/* the binaries are not located for each file, so scripts are failing :(\n\nnpm i packages/* && lerna bootstrap --hoist\nThis sorta fills in the cracks, but it's throwing a lot of errors.. @evocateur My issue with npm i packages/* is that it's not installing dev-deps, any idea how to fix that?. @evocateur when I run npm i packages/* then edit my package the packages that used the edited package still are referencing the version that was installed. How am I supposed to bypass this to allow the packages to be updated and have all the references to file: reflect the \"live\" copy of the module.. Is it possible that npm 3 does not symlink filemodules, while 5 does?. Yeah I switched over to using file:, much better.. I've been using npm install ../journey as a way to \"install\" a sibling package add add the file reference. \n@evocateur I still have one open question. If I add a file reference and the publish, it converts the reference to the version number, so it can publish, but then does it turn it back to a file reference after?\nIdeally all I want is a this.\n\nlerna -C ./packages/alpha install beta --fileSpecifier\nlerna -C ./packages/alpha install beta\n\n-C would have the same usage as npm and git. The first command would install beta in alpha using the --fileSpecifier and ideally this would check the npm version if it's 5+ it would be the same as npm -C /packages/alpha ../beta if it's an older version of npm it would add shim the same functionality.. This makes sense I would still like to publish a specific package and required other sibling deps deliberately but when the system work it works.. I have requirements to match production servers running node 6 which sucks, because our jenkins is stuck with old NPM. Latest lerna.. Unsure what the issue was here, should have provided example repo.. I have sibling packages depending on 0.0.21 and it does not exist in npm so those packages depending on this package are failing on install.\n```\n$ npm i reggi-cli -g\nnpm ERR! Darwin 16.7.0\nnpm ERR! argv \"/Users/treggi/.nvm/versions/node/v6.8.0/bin/node\" \"/Users/treggi/.nvm/versions/node/v6.8.0/bin/npm\" \"i\" \"reggi-cli\" \"-g\"\nnpm ERR! node v6.8.0\nnpm ERR! npm  v3.10.8\nnpm ERR! code ETARGET\nnpm ERR! notarget No compatible version found: @reggi/pkg.json-parse@^0.0.21\nnpm ERR! notarget Valid install targets:\nnpm ERR! notarget 0.0.2\nnpm ERR! notarget\nnpm ERR! notarget This is most likely not a problem with npm itself.\nnpm ERR! notarget In most cases you or one of your dependencies are requesting\nnpm ERR! notarget a package version that doesn't exist.\nnpm ERR! notarget\nnpm ERR! notarget It was specified as a dependency of '@reggi/pkg.read-json'\nnpm ERR! notarget\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /Users/treggi/Desktop/acq-cps-angular-install/npm-debug.log\n``. This might be an issue withnpm`.\n\nYou cannot publish over the previously published versions: 0.0.21\n\n```\n\u279c  pkg.json-parse git:(updates) \u2717 npm publish\nnpm notice\nnpm notice \ud83d\udce6  @reggi/pkg.json-parse@0.0.21\nnpm notice === Tarball Contents ===\nnpm notice 1.4kB package.json\nnpm notice 285B  index.build.js\nnpm notice === Tarball Details ===\nnpm notice name:          @reggi/pkg.json-parse\nnpm notice version:       0.0.21\nnpm notice package size:  861 B\nnpm notice unpacked size: 1.7 kB\nnpm notice shasum:        7aed9e12cdf30e3aeeb6264d7471d7e54de26849\nnpm notice integrity:     sha512-pSEfyJBuNXdkp[...]PEV7cWH3p/PFQ==\nnpm notice total files:   2\nnpm notice\nnpm ERR! publish Failed PUT 403\nnpm ERR! code E403\nnpm ERR! You cannot publish over the previously published versions: 0.0.21. : @reggi/pkg.json-parse\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /Users/thomas/.npm/_logs/2018-05-02T16_18_09_457Z-debug.log\n```. Also not a dist-tag issue :(\n\u279c  pkg.json-parse git:(updates) \u2717 npm dist-tag add @reggi/pkg.json-parse@0.0.21 latest\nnpm WARN dist-tag add latest is already set to version 0.0.21. I just published 0.0.22 manually without lerna.\nHere's more confusion:\n\u279c  pkg.json-parse git:(updates) \u2717 npm publish\nnpm notice\nnpm notice \ud83d\udce6  @reggi/pkg.json-parse@0.0.22\nnpm notice === Tarball Contents ===\nnpm notice 1.4kB package.json\nnpm notice 285B  index.build.js\nnpm notice === Tarball Details ===\nnpm notice name:          @reggi/pkg.json-parse\nnpm notice version:       0.0.22\nnpm notice package size:  861 B\nnpm notice unpacked size: 1.7 kB\nnpm notice shasum:        13a3ecc553537d72adeca62b5a6ad24fd7f9231e\nnpm notice integrity:     sha512-9Sx+NFN6FTCDp[...]vRzQ1dUJEmf5Q==\nnpm notice total files:   2\nnpm notice\n+ @reggi/pkg.json-parse@0.0.22\nThe site still has 0.0.2\nhttps://www.npmjs.com/package/@reggi/pkg.json-parse\n$ npm view @reggi/pkg.json-parse version\n0.0.2\n```\n\u279c  test npm i @reggi/pkg.json-parse@latest\nnpm WARN test@1.0.0 No description\nnpm WARN test@1.0.0 No repository field.\n\n@reggi/pkg.json-parse@0.0.21\nupdated 1 package in 1.517s\n```\n\n$ npm view @reggi/pkg.json-parse dist-tags\n{ latest: '0.0.2' }. I completely agree with you I plan to setup commit messaging and semantic release in my CI Jenkins pipeline. This is my first monorepo and I just got everything working (except this).\nI don't believe using 0.0.x syntax is causing this issue where npm and lerna are confirming a publish but I am not seeing that as the latest in the npm website or with npm view.\n. Hey @doug-wade I am in a icky-situation. This month one package in my mono-repo published to npm successfully but it isn't retrievable when you install it at the latest version number. I wrote about the whole thing here: https://gist.github.com/reggi/de7a27ad56110c32ee66a73b647d2abd. It is confirmed an issue with npm, and is a bug on their end. I'd like to have a private registry that acts as a backup / override for these cases. \nIt is kind of crappy that this happened because I am delayed now by almost a month and I am waiting for npm to fix this issue, I have kind of lost faith that npm can reliably version and maintain my code. I'd like to publish to a private registry and npm so that ideally when then fix the issue I can use npm. \nIs there no command that publishes without updating version numbers? That's all I'd need.. Hey @doug-wade this is a great write up, thank you very much!\nI am facing one issue with publishing using exec. I have file:// specifiers in my monorepo. Using publish they resolve to the latest version. I need a way to resolve them and unresolve them via a command. Any ideas on how to do that or should I just create my own command?\nResulting in this rectify-version command (that doesn't exist yet) just an idea.\nlerna exec --bail=false -- rectify-version --latest && npm publish && rectify-version --file-specifer\nIs this crazy? Should this be it or am I missing something else?. I am down to make this package.json version swapping command but it seems like lerna does internally. Any way we can make this public? It is also undocumented.. @doug-wade I made the cli tool to convert the package file-specifier to version and back again.\njs\nnpm i @reggi/dep-pointer-cli --registry https://reggi.registry.com/\nShould be up on npm and github in a couple of days, the exec script totally worked to publish to my private registry. Thanks for the help!. ",
    "kirbysayshi": "One way I worked around this for now:\n$ lerna exec -- npm install --save debug@latest. ",
    "spudly": "I was getting by with just running npm install--save <package> before, but now that I've enabled automatic hoisting I want it to install the package at the root so normal install won't work.\nCurrent workflow:\n1. Run npm show <pkg> version to determine what version to use\n2. Manually add the dependency to package.json\n3. Run lerna bootstrap --scope=\"<my pkg>\"\nAdding this feature would save me a lot of time!. > If my-sibling hasn't been published yet you'll need to add that dependency yourself by editing the JSON file. Once the dependency is added lerna bootstrap will create the \"link\" regardless of whether my-sibling has been published.\n@gigabo, When you say add the dependency yourself, do you mean as a local dependency? Like this?\njson\n{\n  \"dependencies\": {\n    \"my-other-pkg\": \"file:../my-other-pkg\",\n  }\n}. I think the best solution for these types of problems would be a --bail option that defaults to true. Then you'd be able to run lerna exec --bail=false -- npm ls superagent and it would continue even when it fails for some packages.. Quick question: would it make sense to change this to --include-dependencies'? I envision that at some point we might want a --include-dependents flag and \"deps\" could be either. \nUse case for --include-dependents would be to quickly install and run tests for any package that uses a package you're modifying.. @lukebatchelor & @seansfkelley,\nYes, I do still think we need to explicitly call it --include-filtered-dependencies. I know it's long, which is annoying, but this way users know exactly what is going to happen without searching through the documentation, and it leaves room for similar flags down the road.\nMy vote is for --include-filtered-dependencies so that @seansfkelley or someone else can later add --include-filtered-dependents.. Any movement on this? I'd really like to see this become the default on branches and it looks like the only thing blocking the travis build is a few linter issues.... Did some googling. It looks like in powershell you only use the '$' if it's inside of a string, so the following are both correct in windows:\n\ngit rev-list -n 1 (git describe --abbrev=0 --tags)\ngit rev-list -n 1 \"$(git describe --abbrev=0 --tags)\"\n\nI think it makes sense to use the second one (just wrap it in quotes) as that should work in both bash and powershell. In fact, that's what is already being done in the commit function.\n@Gongreg, let me know if you need any help. I'd really like to see this merged asap.. Looks to me like someone on the lerna team needs to login to appveyor and restart the build. It's probably an intermittent npm issue that causes the build to fail sometimes.. (or you could just add another commit, which would have the same effect). Looks like this issue:\nhttp://help.appveyor.com/discussions/problems/3147-error-eperm-operation-not-permitted-rename-on-npm-install\nhttps://github.com/npm/npm/issues/9696\n... which is fixed in the version of npm bundled with node 4\nYou may be able to fix it by adding --force to the npm install command in the appveyor.yml file. Others also had success with appveyor-retry npm install. Anything I can do to help with this? I'm happy to contribute code, debug the failing build, etc. if you grant me commit access on the fork to add commits to the PR.. Well, the build is passing with no changes.\nIn case anyone else is struggling with this issue, none of these solutions I found worked:\n change npm install to appveyor-retry npm install\n change npm install to npm install --force\n upgrade npm to v3\n npm cache clean\nWhat did work? Just running the build over and over. It's a stubborn, intermittent issue, but I finally got a build where npm install didn't fail so the tests could run. All tests are passing on all supported node versions.. @gigabo, @hzoo, @kittens, & @thejameskyle,\nI think this one is ready to be merged.. @Gongreg,\nSince I've got commit access on your fork, I'm going to go ahead and make the changes requested so this pull request can move along. Let me know if that's a problem.. Rebased onto master and fixed some tests that failed as a result.\nOne test is still failing - looks unrelated. Will look at it later.. Seems like there's a timing and/or callback issue related to the hoisting tests that were recently added.\nFirst it failed with this message:\n\n1) BootstrapCommand lifecycle scripts should run preinstall, postinstall and prepublish scripts:\n     Error: timeout of 5000ms exceeded. Ensure the done() callback is being called in this test.\n      at Timeout. (C:\\projects\\lerna\\node_modules\\mocha\\lib\\runnable.js:226:19)\n\nThen I added an empty commit to trigger a rebuild just in case appVeyor was just running slow, but the second time (with no changes) it failed 2 tests:\n\n1) BootstrapCommand lifecycle scripts should run preinstall, postinstall and prepublish scripts:\n     Error: timeout of 5000ms exceeded. Ensure the done() callback is being called in this test.\n      at Timeout. (C:\\projects\\lerna\\node_modules\\mocha\\lib\\runnable.js:226:19)\n 2) BootstrapCommand with hoisting should hoist:\n     Error: done() called multiple times\n      at Test.Runnable (C:\\projects\\lerna\\node_modules\\mocha\\lib\\runnable.js:55:17)\n      at new Test (C:\\projects\\lerna\\node_modules\\mocha\\lib\\test.js:22:12)\n      at context.it.context.specify (C:\\projects\\lerna\\node_modules\\mocha\\lib\\interfaces\\bdd.js:85:18)\n      at Suite. (C:/projects/lerna/test/BootstrapCommand.js:60:5)\n      at context.describe.context.context (C:\\projects\\lerna\\node_modules\\mocha\\lib\\interfaces\\bdd.js:47:10)\n      at Suite. (C:/projects/lerna/test/BootstrapCommand.js:53:3)\n      at context.describe.context.context (C:\\projects\\lerna\\node_modules\\mocha\\lib\\interfaces\\bdd.js:47:10)\n      at Object. (C:/projects/lerna/test/BootstrapCommand.js:22:1)\n      at loader (C:\\projects\\lerna\\node_modules\\babel-register\\lib\\node.js:144:5)\n      at Object.require.extensions.(anonymous function) [as .js] (C:\\projects\\lerna\\node_modules\\babel-register\\lib\\node.js:154:7)\n      at require (internal/module.js:20:19)\n      at C:\\projects\\lerna\\node_modules\\mocha\\lib\\mocha.js:220:27\n      at Array.forEach (native)\n      at Mocha.loadFiles (C:\\projects\\lerna\\node_modules\\mocha\\lib\\mocha.js:217:14)\n      at Mocha.run (C:\\projects\\lerna\\node_modules\\mocha\\lib\\mocha.js:469:10)\n      at Object. (C:\\projects\\lerna\\node_modules\\mocha\\bin_mocha:404:18)\n      at run (bootstrap_node.js:394:7)\n      at startup (bootstrap_node.js:149:9)\n      at bootstrap_node.js:509:3\n\nIt's only failing in appVeyor/node6.\nI'm pretty sure these failing tests are unrelated to the code in this PR.\n@gigabo and @seansfkelley, it looks like you two wrote the tests that are failing. Any ideas?. Ok, something is definitely wrong with the build process here. Both travis and appveyor are failing tests that don't even exist in the code!\nThis test straight-up doesn't exist, but is somehow failing anyway:\nPublishCommand normal mode with --registry should publish the changed packages\nIt exists on lerna master but does not exist on the fork because it's behind master.\nGuessing there must be some cache issue? Or maybe the build servers are checking out the wrong revision? Any ideas here?\nI guess I'll rebase on master again.... Success! \ud83c\udf89 \ud83c\udf89 \ud83c\udf89 \nFinally got the tests to pass.\nY'all have got a seriously brittle test suite. It fails intermittently on appveyor and when you're behind master, it seems to run the wrong test suite.\nEither way, the build is passing. Any chance this could get merged?. @evocateur @gigabo . I think what you want is this:\nnpm install --global lerna@^2.0.0-beta.34. @bboysathish,\nYou're right. I've submitted a pull request to fix the website: lerna/website#11. Perhaps named scope groups?\nFor example,\nbash\nlerna publish --scope-groups=updated,prereleased,my-custom-group\nSome of these scope groups would have to be pre-defined (like updated and prereleased). The default value would be 'updated' (current behavior). Maybe users could also define custom groups using globs in their lerna.json file:\njson\n{\n  \"scope-groups\": {\n    \"react-components\": \"@my-scope/react-component-*\"\n  }\n}\nWe'd probably also have to add a corresponding --force-publish-groups option or, better yet, change --force-publish to respect --scope and --scope-groups).\nEither of the following would solve my use case:\n```bash\n// if we add --force-publish-groups\nlerna publish --repo-version $VERSION --yes --force-publish-groups=prereleased\n// if we update --force-publish to respect --scope and --scope-groups\nlerna publish --repo-version $VERSION --yes --force-publish --scope-groups=prereleased\n```. @cif, I agree. Your PR is more about what the resulting version numbers are, whereas mine would be more about which packages are updated.. Ran into the same issue this morning.\nIf you only change a private package before running publish, lerna will say there are no changes and refuse to do anything. I expected that it would at least update the version for the changed, private packages, but it just fails instead because there are \"no updated packages to publish\".\nLikewise, if you change a private package and don't change any packages that depend on it, that private package will not have it's version updated, even if you have other changes in other packages that do get published.\nIn my case, some of my packages are marked private because they get published in a different way (they get zipped and uploaded, not published to NPM). For this reason, I need the version to be updated, even if it doesn't get published to NPM.\nAt this point, if I want it to rev the version for my private package without changing other packages, I have to make it public. \ud83d\ude22 . Digging through the source code, it looks like the publish command expects the updates provided by updatedPackagesCollector.getUpdates() to include private packages (see PublishCommand.js Line 38), but they are already filtered out (see UpdatedPackagesCollector Line 63).. Digging some more, I was not strictly correct when I said that the getUpdates function does not return any private packages. It does filter out changed private packages, but then it adds all dependents of the changed public packages, which may or may not include some private packages.\nSo in order for a private package to get its version incremented, it must depend on a public package that changed. Whether the private package changed or not does not matter.\nThus, if all your changes are private, it will refuse to update anything.\nOr, if you change a private package and a public package, but the private package doesn't depend on the public package, it will skip the private package and only publish the public package.\nI can kind-of see why this might be intentional. You could say, for example, that there's no point in updating packages that are not public or are not depended upon by public packages.\nUnfortunately this doesn't fit the following use cases:\n All private packages\n Some public, some private (but deployable). Private packages are private because they are entry Apps that get deployed, not published as a library. They still need to be versioned, but not published to npm. (this is my use case)\n@gigabo, @thejameskyle, @hzoo, Would you guys accept a pull request in which all changed packages have their versions updated (but not necessarily published) regardless of whether they are private or not? It would only involve removing lines 63 - 65 of UpdatedPackagesCollector.js. I've tried locally and it fixes the problem without breaking other tests.. Nah, actually my issue went away. It went slow once or twice but that's all. Just enabled hosting yesterday and it is awesome btw. Good job!. Ran into a similar issue (Errored while running BootstrapCommand.execute). lerna-debug.log didn't provide enough info, but npm-debug.log did.\nAfter a merge, the semver ranges for private weren't matching up so it was trying to install private packages from the registry that didn't exist and getting 404 errors. Manually fixing the dependency versions fixed it.. @hulkish,\nNot sure if it's the same problem you're having, but here's a description of my problem and how I fixed it. I have a private package that is a devDependency of the other packages. My problem was that, after a merge, the versions didn't match up correctly. For example:\nmy-private-package/package.json:\njson\n{\n  \"version\": \"2.0.0-beta.0\",\n}\nmy-public-package/package.json:\njson\n{\n  \"devDependencies\": {\n    \"my-private-package\": \"^1.2.3\",\n  }\n}\nNotice how the semver range ^1.2.3 doesn't match the version 2.0.0-beta-0. When this happens, lerna tries to install version ^1.2.3 from npm, which fails with a 404 error because it's a private package that never gets published to npm.\nMy fix was simply to update the semver range to match the current version of my-private-package (^2.0.0-beta.0). @psirenny,\nIt failed consistently regardless of whether it was run directly on the CLI or behind an npm script.. \ud83c\udf89\ud83c\udf89\ud83c\udf89. @hzoo, Hey, I noticed #475 isn't mentioned in the beta 38 changelog. You might want to include that. I would just add the following:\nThis prevents unchanged packages from being republished when running lerna publish from a branch, which you might do if you're publishing a prerelease, or publishing a bug fix in an earlier release.. There is no way to prevent it that I know of, but you can use eslint to catch these errors.\nUse the eslint-plugin-import eslint plugin and the import/no-extraneous-dependencies rule that it provides.. +1 on this. When my team switched from AVA to jest our test execution time for a single (large) package went from 5 minutes to 7 seconds.. > May I ask why you don't lint globally from the root?\nUnfortunately I haven't finished porting all our coffeescript packages to es6 yet :sad:. So some of my packages use eslint and others use coffeelint.\n\neslint, for example, has a --cache option\n\nWoah! Didn't know about that. Will definitely be using --cache in the future.\n\nI am open to the idea of supporting the -- pattern for passing additional args to the script that npm run already supports:\n\nThat already works today I think. I haven't used it with lerna run but I use it with lerna exec all the time.\nUnfortunately, that doesn't solve my problem. I want it to skip packages, not pass a parameter to each package, especially considering that the arguments it accepts might be different for each package.. > Define a script entry in the root with the lerna task and the --scopes?\nI'm afraid that doesn't help me at all with this use case.\nI think at this point I'm more interested in a --bail=false command-line argument. I think this would help with multiple use cases (not just this one). All it does is allow lerna run to continue when scripts fail.\nRight now my workflow for this is:\n1. run lerna run lint (takes forever with > 100 packages)\n2. if lint passed for all packages, stop\n3. fix errors\n4. go back to step 1\nAdding --bail=false would show me a list of all errors the first time, so I could fix them all at once, changing my workflow to this:\n1. run lerna run lint\n2. fix errors\n3. stop\nI think --bail=false would help in other use cases too. I know I've seen other issues in this repo where users were unable to do certain things because lerna run stops when it encounters an error.. I'm having a similar problem in my builds where it is installing the wrong version of 'uuid' intermittently (about 50% of the time) on the build server, but for me it's doing it in the root node_modules folder.\nI haven't nailed down the exact problem, but I think it may be related to the same de-duping behavior of npm.. --json would be even better.. Closing in favor of #824 . Sounds good to me, as long as we can still use private packages as devDependencies. This line from lerna-debug.json seems like the problem:\nnpm ERR! No name provided in package.json\nOne of your packages has a package.json file without a \"name\" key/value pair.. Question: The initial description for this pull request says that this fixes #567, but I don't see anything in the changed files that addresses that issue.\nWhen you first publish a prerelease version (prerelease, premajor, preminor, prepatch) and later publish a regular version (major, minor, or patch), does this change force packages with the prerelease version to update to the non-prerelease version even if those packages haven't changed?\nIn other words, say I do the following:\n1. change pkgA and publish with a premajor bump (resulting in 1.0.0-rc.0)\n2. change pkgB and publish as a major bump (resulting in 1.0.0)\nWill both pkgA and pkgB be on 1.0.0, or will pkgA still be on 1.0.0-rc.1?. I'll add another commit to update the docs in a few.... Ready for review.\nAlso, I should note that I'm not 100% sure whether this should be a breaking change or not. For me, it feels like a new feature (sorely needed by me), but technically it is changing the default behavior, so I checked the \"major\" box.. \ud83c\udf89. Any plans to release a new version soon? I'd really love to start using this!. ",
    "jribeiro": "Hi @thejameskyle, regarding https://github.com/lerna/lerna/issues/53#issue-133325098, do you know if this is still planned to be implemented in lerna or on the experimental yarn workspaces feature? Thanks!. ",
    "TxHawks": "Is there a PR for this? Is there interest in one?. ",
    "marionebl": "Implemented via #1069 and released via https://github.com/lerna/lerna/releases/tag/v2.5.0. @aaronabramov @cpojer \nIs this still applicable? jest appears to have upgraded to stable releases in the meantime: facebook/jest/lerna.json#L2\n. @gigabo @evocateur lerna supports yarn so this can be closed, right?. This is solved with the yarn workspaces integration and addition of lerna add:\n\nyarn workspaces: https://github.com/lerna/lerna/pull/899\nlerna add https://github.com/lerna/lerna/pull/1069\n. * lerna add was implemented in the meantime via https://github.com/lerna/lerna/pull/1069. This is a duplicate of #167. \n\nI'd suggest we centralize the discussion there. @evocateur: Can we close this issue?. I opened a PR that implements lerna add, which works by direct manipulation of package.json and executes BootstrapCommand on changed packages. \nI added lots of usage examples that should illustrate some of the design choices, e.g.:\n Fail for package not in local packages\n Fail for version ranges not satisfiable locally\n Warn about packages not installing themselves\n Do not bootstrap when no packages were changed. @StarpTech Have you verified this happens when running lerna bootstrap manually as opposed to running it via the setup run-script? https://github.com/hemerajs/hemera/blob/master/package.json#L40. @shawnthye there is lerna add now, e.g.:\nlerna add a --scope=b # add b to packages/a\nlerna add c --scope=d --scope=e. I'd pick this up and go with printing a very human-friendly error message and failing loudly if BootstrapCommand detects --hoist and --npm-client=yarn. lerna run test --ignore=ignored-package might to the trick for you. See the flag documentation for reference. Closing this as duplicate of #174 . could we limit the search from cwd to git root? cosmiconfig has the stopDir config for this: https://github.com/davidtheclark/cosmiconfig/blob/master/README.md#stopdir. Just reproduced this, guess it happened when refactoring from JSONFile to write-pkg. I'll cook up a fix immediately.\n\nEdit: The offending line is this: https://github.com/lerna/lerna/blob/master/src/commands/AddCommand.js#L136, should spread existing deps into amendment.. I opened a PR with relevant new failing unit tests for lerna add @evocateur: https://github.com/lerna/lerna/pull/1100\n. Added the relevant fix to the same PR via a second commit.. @evocateur No worries! I want to make things better by contributing, so fixing stuff I broke is high priority. Hope this is solid now.. Thanks @evocateur for the fast merge/ short response time!. @evocateur: Yes!. Corrected my brainfart in pkgMatchers, thanks for reviewing this so thorougly - learnt a bunch.. Yeah, scratched my head quite a bit on categorizing this, too. \nI tend to play it safe with semver and mark changes as breaking as soon as there is potential breakage, especially in uncommon usage scenarios (e.g. global installation, even on CI).\nMy personal approach to major releases is to handle them in no special way, so I'd release this without waiting for other changes. Def. your call though.. > I was envisioning moving the subcommands to their own packages, too. I don't like the subpath import style (import foo from \"@scope/package/lib/foo\";), it promotes tight-coupling.\nYes, I am def. on the same page. This PR is intended to bring and up and (partly) clarify all those detailed questions popping up in the review so far. \n~~Defining a split of commands into separate commands as I could imagine there would be enough value in intermediary steps where stuff that is not broken down into a package yet remains in core until we come around moving it.~~\nRephrased:\n Let's define full modularization as goal (down to command level)\n I propose we do this in multiple steps for a smoother migration\n* @lerna/core could be the catch-all until any given module is broken out\nThis approach might make changes like this more likely to actually land while avoiding to disrupt all other feature development that might be going on.\nWhat do you think?\n\nAlso, we need to keep lerna as the public CLI package name.\n\nI thought we might introduce an \"alias\" package for this kind of thing? I'll commit an example how this might look like.. > I was envisioning moving the subcommands to their own packages, too. I don't like the subpath import style (import foo from \"@scope/package/lib/foo\";), it promotes tight-coupling.\nYes, I am def. on the same page. This PR is intended to bring and up and (partly) clarify all those detailed questions popping up in the review so far. \n~~Defining a split of commands into separate commands as I could imagine there would be enough value in intermediary steps where stuff that is not broken down into a package yet remains in core until we come around moving it.~~\nRephrased:\n Let's define full modularization as goal (down to command level)\n I propose we do this in multiple steps for a smoother migration\n* @lerna/core could be the catch-all until any given module is broken out\nThis approach might make changes like this more likely to actually land while avoiding to disrupt all other feature development that might be going on.\nWhat do you think?\n\nAlso, we need to keep lerna as the public CLI package name.\n\nI thought we might introduce an \"alias\" package for this kind of thing? I'll commit an example how this might look like.. > I think I'm going to take a stab at this over the holiday weekend. I have some Rollup plugins and package generator scripts that I need to open-source that would facilitate this much better.\nIs this PR valuable for the changes you have in mind / does it inform your decisions a bit? \nDon't want to waste your time if it does not.. > I think I'm going to take a stab at this over the holiday weekend. I have some Rollup plugins and package generator scripts that I need to open-source that would facilitate this much better.\nIs this PR valuable for the changes you have in mind / does it inform your decisions a bit? \nDon't want to waste your time if it does not.. I'd be happy to contribute more to lerna, but won't have enough time to take on full maintainer responsibilities. \nCurrently the limiting factor for lerna is PR reviews, right? I wonder how we could enable more people to review and land changes.. Addressed via https://github.com/lerna/lerna/pull/1069/commits/b34a031401f1d7aeb4c0aed1faae081868e73c50. Adressed via https://github.com/lerna/lerna/pull/1069/commits/e1d5fe55a0c1201420a49ee59496d4143a9071cb. Adressed via https://github.com/lerna/lerna/pull/1069/commits/e6bfdff89128453513861697db06da551cb7ec45. I used json-file-plus to preserve package.json formatting. As this differs in behaviour from npm and other lerna commands and does not handle key alphabetization, I'll refactor as outlined.. Addressed via https://github.com/lerna/lerna/pull/1069/commits/a3a09a253e20aa90405901c8f438cf0311f28e71. Addressed via https://github.com/lerna/lerna/pull/1069/commits/e4c9f0c6affcab5d07e1e3f78fb27c9a99b52268. Adressed via https://github.com/lerna/lerna/pull/1069/commits/efa5cc3e964978e50cd8cd62d34a8f8d4dc6a94d. Addressed installing external dependencies via https://github.com/lerna/lerna/pull/1069/commits/4be0d91870596bf91f6e3ad58b178e66213806be. \nDoes make a lot more sense from the user perspective, thanks for the review \ud83d\udc4d .\nThe change got bigger than I'd like due to the fact I switched to an async control flow. \nThis is needed due to the network requests we send to determine the correct remote package version ranges to persist. \n. This type of thing could be easier to build with async - await. Is there a reason is not used in the codebase so far?. I had the impression that iterating over all (filtered) packages was more common in the code base, and <Package>[] makes that very easy.. Learnt this today, thank you!. As in a bit magic? I'd expand this into something less terse if you want.. I am also guilty of using compiled output as bin. As it stands now I'd be deadlocked (without changes) in some of my lerna repositories when we decide to throw for non/not-yet existing bin targets.\nI wonder if we could automate the proposed fix by placing the \"proxy\" files in the target node_modules/.bin/ directories instead of symlinking? \nWhat do you think?. Yes. Thinking about this a bit more I am leaning towards fixing this automagically behind the scenes, e.g. by writing executable \"proxy\" files like this into node_modules/.bin:\n```js\n!/usr/bin/env node\nrequire('../../packages/dependency/lib/cli.js');\n```\nAlso see my comment here: https://github.com/lerna/lerna/pull/1101/files/e4083bb8db4133013d5cf80e0ccc11d37fb58cb6#r151357323. Okay, ack. I'll see and hack around in another PR on solutions to #1090 and related things based on bin-links. Thanks for the insight!. fail is exposed by jasmine. I changed those to match the jest recommendations: https://facebook.github.io/jest/docs/en/tutorial-async.html#async-await. Using a postinstall here currently is blocked by #1125 . Understood. I tried to keep the modules completely self contained regarding any executable code, including tests. Is that no design goal for you?. Moving this to a separate package disables jest's automatic compilation for the sources, thus ES2015 modules are unavailable.\nI aimed at making this work for Node v8 for this draft, we will have to come up with a babel build for this package eventually. I thought we could track the second to latest version here. The issue with using the local version would be that there is nothing there to do the bootstraping then (if we e.g. built via babel). The lerna setup uses yarn as npmClient. I thought it would be wise to specify that dependency explicitly instead of assuming there was some globally installed version present. Ok, I'll change this accordingly. I'll have a look at the broken changelog, don't know what happened there. I'll revert this. Thought we might want to avoid MacOS fs issues.. Ok, will revert. That still has the issue we have no lerna to do the root + leaf installs before said install, right?. Worth a try :). The current early CI failures are what I tried to avoid: https://travis-ci.org/lerna/lerna/jobs/306655406#L542. ",
    "danieldelcore": "I'm finding the same issue. If for example you attempt to publish and git returns an error because there are changes that haven't been pulled, the packages that need to be updated will no longer be visible when you use the command 'lerna updated'. I'm assuming that lerna clears the updated flags on the packages regardless of errors.\nCurrently using v1.1.2\n. ",
    "boxxxie": "If i'm not allowed to publish to npm then i get dirty git state. i have a commit that i don't want, and i have a bunch of tags that i have to manually delete.\nI have also run into the problem where i ended up with dist-tags on each of my packages that were causing me to not be able to publish, so my git tags would increment, and my npm publish wouldn't work.\nthere are a few steps that lerna does when we ask it to publish. i think that each step should be a command, each step should output a log of what it does, and for each command there should be a revert-command that does or does not use this log.\n. i have an issue with this patch, when i have folders in node_modules that existed from before, they are not removed and replaced with symlinks. i have to manually delete these folders for the bootstrap to make symlinks.\n. thank you, I didn't think about  'lerna clean'\n. seems like this would be an easy fix, in the code there are only 2 files copied, index.js being one of them. could add a line that also copies a styles.css file as well\n. I'm actually working on a pr. I don't like the way it's going, but basically I'm checking for a source file and then copying it.  I think it would be better to pull in the package. json file and copy listed file mentioned in it. any recommendations? \n. i'm editing the PR to use the package.json file like in the first comment\n. i'm getting these eslint errors\n```\nSuspicious state from syntax checker javascript-eslint: Checker javascript-eslint returned non-zero exit code 1, but no errors from output: Cannot find module 'eslint-config-babel'\nReferenced from: /home/pauli/lerna/.eslintrc\nError: Cannot find module 'eslint-config-babel'\nReferenced from: /home/pauli/lerna/.eslintrc\n    at Object.ModuleResolver.resolve (/usr/lib/node_modules/eslint/lib/util/module-resolver.js:75:19)\n    at resolve (/usr/lib/node_modules/eslint/lib/config/config-file.js:479:33)\n    at load (/usr/lib/node_modules/eslint/lib/config/config-file.js:496:24)\n    at /usr/lib/node_modules/eslint/lib/config/config-file.js:392:36\n    at Array.reduceRight (native)\n    at applyExtends (/usr/lib/node_modules/eslint/lib/config/config-file.js:363:28)\n    at Object.load (/usr/lib/node_modules/eslint/lib/config/config-file.js:530:22)\n    at loadConfig (/usr/lib/node_modules/eslint/lib/config.js:64:33)\n    at getLocalConfig (/usr/lib/node_modules/eslint/lib/config.js:136:23)\n    at Config.getConfig (/usr/lib/node_modules/eslint/lib/config.js:263:22)\nChecker definition probably flawed.\n```\n. i wasn't able to fix the errors. totally breaks my emacs.\ni think the code changes are good enough for you guys. i think that this doesn't effect the huge refactor of the bootstrap very much.\n. if anyone else is interested, my PR is getting errors on windows... i'm not sure how to fix them, i don't have a windows dev box either. \nI will not be able to fix these errors, and i am happy using my branch as i only care about linux and mac systems. \n. I'm not doing that. I'm preserving the files, no modification is taking place. \n. if I had a move file command, I would have used it\n. style is sorta a placeholder name.  any filename you put in there will be moved. in a future patch this will be redundant as the whole module will be symlinked.\n. I can add a test for string and convert it to an array. \n. @nruhe i implemented your request.\ni didn't add a test for it. feel free to add one. i have a feeling that this PR isn't getting merged\n. I'm headed home now. I'll fix the linting soon\n. this pr is finished,  unless you request something more\n. i don't understand the error i'm getting. it's a windows error, and the error message makes it seem like it has nothing to do with my code\n. fixed on different pr\n. ok, solved this issue\ni have to build lerna using itself npm run build\nthen i have to remove the lib folder from .gitignore so i can push to github\nis there a better way someone can offer me?\n. this problem is completely solved by the enhanced-bootstrap pr. I use that instead and don't see a need for the pr anymore. \n. sorry, i didn't see that when browsing the issues\n. ",
    "gauntface": "I just hit this as well and fixing it doesn't seem to be easy. I wasn't logged in to NPM so the final step of publishing to NPM failed and lerna now believes everything is fine and published even though the last step failed.. I would love this feature.\n@hzoo is there any chance you could take a look at this?. One wrinkle I just realised.\nHow does this work with bootstrap?\nIf you use prepublish to build your project before everything is npm linked by lerna bootstrap you'll get in a messy / hard to reason with state as the `package.json will need to be in the root of each package to find theprepublish` npm script that would then generate the build directory.\nMy understanding is that this is how you should be using lerna, which means this folder option may actually cause confusion.. Yeah, the more I thought about it, the more I realised this wouldn't fit my needs.. +1 this request.\nNormally I would run npm version perform any build steps that needed this new package version (i.e. build a new version of the lib / tool with this new version inlined) and then publish that to NPM.\nLerna requires --skip-git, --skip-npm, build then build with --repo-version.. oohh thanks @evocateur this seems to solve my use case :). Will update ASAP.\n@evocateur was thinking on this a little more - does it make sense to call out stdout and stderr with a heading before print it out?\nAnd do you there is any value in logging the error message and / or stack trace? I don't find it useful in this context, but I may be missing uses.. I'm starting to see why the previous error had messy output.\nerr.message includes a message prepended to the stderr and the stack seems to be just the std err. Logging the err object would result in 3 sets of the stderr, with this latest change it's printed twice (once with stderr, once with stack.\n```\nlerna info version 2.1.2\nlerna info Bootstrapping 2 packages\nlerna info lifecycle preinstall\nlerna info Symlinking packages and binaries\nlerna info lifecycle postinstall\nlerna info lifecycle prepublish\nlerna ERR! execute Error occured with 'workbox-core' while running 'npm run prepublish'\nlerna ERR! npm run prepublish [workbox-core] Output from stdout:\n\nworkbox-core@3.0.0 prepublish /home/matt/Projects/Code/workbox/packages/workbox-core\ngulp build-packages --package workbox-core\n\n[12:10:25] Working directory changed to ~/Projects/Code/workbox\n[12:10:26] Using gulpfile ~/Projects/Code/workbox/gulpfile.js\n[12:10:26] Starting 'build-packages'...\n[12:10:26] Starting 'build-packages:clean'...\n[12:10:26] Starting 'build-packages:clean (workbox-core)'...\n[12:10:26] Finished 'build-packages:clean (workbox-core)' after 1.67 ms\n[12:10:26] Finished 'build-packages:clean' after 2.49 ms\n[12:10:26] Starting 'build-packages:generate-browser-entry'...\n[12:10:26] Starting 'build-packages:generate-browser-entry (workbox-core)'...\n[12:10:26] Finished 'build-packages:generate-browser-entry (workbox-core)' after 6.73 ms\n[12:10:26] Finished 'build-packages:generate-browser-entry' after 7.04 ms\n[12:10:26] Starting 'build-packages:build'...\n[12:10:26] Starting 'build-package (workbox-core) [\"dev\"]'...\n[Workbox Gulp Log]: Building Browser Bundle for workbox-core.\n[Workbox Gulp Log]:     Namespace: workbox.core\n[Workbox Gulp Log]:     Filename: workbox-core.dev.js\nlerna ERR! npm run prepublish [workbox-core] Output from stderr:\n[Workbox Gulp Log]: Error: The keyword 'private' is reserved \ncode: PARSE_ERROR\npos: 252\nloc: [object Object]\nframe: 3: import WorkboxError from '../internal/models/WorkboxError.mjs';\n4: import logger from '../internal/utils/logger.mjs';\n5: import private from '../private.mjs';\n          ^\n6: \n7: export default {\n[12:10:26] 'build-package (workbox-core) [\"dev\"]' errored after 39 ms\n[12:10:26] Error: The keyword 'private' is reserved\n    at error (/home/matt/Projects/Code/workbox/node_modules/rollup/dist/rollup.js:177:12)\n    at Module.error$1 [as error] (/home/matt/Projects/Code/workbox/node_modules/rollup/dist/rollup.js:8434:2)\n    at tryParse (/home/matt/Projects/Code/workbox/node_modules/rollup/dist/rollup.js:8133:10)\n    at new Module (/home/matt/Projects/Code/workbox/node_modules/rollup/dist/rollup.js:8169:14)\n    at /home/matt/Projects/Code/workbox/node_modules/rollup/dist/rollup.js:10010:17\n    at \n    at process._tickDomainCallback (internal/process/next_tick.js:208:7)\n[12:10:26] 'build-packages:build' errored after 41 ms\n[12:10:26] 'build-packages' errored after 51 ms\nnpm ERR! code ELIFECYCLE\nnpm ERR! errno 1\nnpm ERR! workbox-core@3.0.0 prepublish: gulp build-packages --package workbox-core\nnpm ERR! Exit status 1\nnpm ERR! \nnpm ERR! Failed at the workbox-core@3.0.0 prepublish script.\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\nnpm WARN Local package.json exists, but node_modules missing, did you mean to install?\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /home/matt/.npm/_logs/2017-08-31T19_10_26_111Z-debug.log\nlerna ERR! npm run prepublish [workbox-core] Stacktrace:\nError: Command failed: npm run prepublish\n[Workbox Gulp Log]: Error: The keyword 'private' is reserved \ncode: PARSE_ERROR\npos: 252\nloc: [object Object]\nframe: 3: import WorkboxError from '../internal/models/WorkboxError.mjs';\n4: import logger from '../internal/utils/logger.mjs';\n5: import private from '../private.mjs';\n          ^\n6: \n7: export default {\n[12:10:26] 'build-package (workbox-core) [\"dev\"]' errored after 39 ms\n[12:10:26] Error: The keyword 'private' is reserved\n    at error (/home/matt/Projects/Code/workbox/node_modules/rollup/dist/rollup.js:177:12)\n    at Module.error$1 [as error] (/home/matt/Projects/Code/workbox/node_modules/rollup/dist/rollup.js:8434:2)\n    at tryParse (/home/matt/Projects/Code/workbox/node_modules/rollup/dist/rollup.js:8133:10)\n    at new Module (/home/matt/Projects/Code/workbox/node_modules/rollup/dist/rollup.js:8169:14)\n    at /home/matt/Projects/Code/workbox/node_modules/rollup/dist/rollup.js:10010:17\n    at \n    at process._tickDomainCallback (internal/process/next_tick.js:208:7)\n[12:10:26] 'build-packages:build' errored after 41 ms\n[12:10:26] 'build-packages' errored after 51 ms\nnpm ERR! code ELIFECYCLE\nnpm ERR! errno 1\nnpm ERR! workbox-core@3.0.0 prepublish: gulp build-packages --package workbox-core\nnpm ERR! Exit status 1\nnpm ERR! \nnpm ERR! Failed at the workbox-core@3.0.0 prepublish script.\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\nnpm WARN Local package.json exists, but node_modules missing, did you mean to install?\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /home/matt/.npm/_logs/2017-08-31T19_10_26_111Z-debug.log\n\nworkbox-core@3.0.0 prepublish /home/matt/Projects/Code/workbox/packages/workbox-core\ngulp build-packages --package workbox-core\n\n[12:10:25] Working directory changed to ~/Projects/Code/workbox\n[12:10:26] Using gulpfile ~/Projects/Code/workbox/gulpfile.js\n[12:10:26] Starting 'build-packages'...\n[12:10:26] Starting 'build-packages:clean'...\n[12:10:26] Starting 'build-packages:clean (workbox-core)'...\n[12:10:26] Finished 'build-packages:clean (workbox-core)' after 1.67 ms\n[12:10:26] Finished 'build-packages:clean' after 2.49 ms\n[12:10:26] Starting 'build-packages:generate-browser-entry'...\n[12:10:26] Starting 'build-packages:generate-browser-entry (workbox-core)'...\n[12:10:26] Finished 'build-packages:generate-browser-entry (workbox-core)' after 6.73 ms\n[12:10:26] Finished 'build-packages:generate-browser-entry' after 7.04 ms\n[12:10:26] Starting 'build-packages:build'...\n[12:10:26] Starting 'build-package (workbox-core) [\"dev\"]'...\n[Workbox Gulp Log]: Building Browser Bundle for workbox-core.\n[Workbox Gulp Log]:     Namespace: workbox.core\n[Workbox Gulp Log]:     Filename: workbox-core.dev.js\nat Promise.all.then.arr (/home/matt/Projects/Code/lerna/node_modules/execa/index.js:236:11)\nat <anonymous>\nat process._tickCallback (internal/process/next_tick.js:169:7)\n\nlerna ERR! execute Error occured with 'workbox-core' while running 'npm run prepublish'\n```\nI moved this logic into a private method and I adding headings which are using the lerna prefixing.\nRegarding tests, I'm sure how I should go about adding them in. A notary glance at the BootstrapCommand tests makes it look like these is no error testing I can just mimic / alter.\nAny ideas of an approach I should copy?. That should add some minimal tests. Let me know if you'd like the format changed at all.\nAlso removed the stack from the output.. @evocateur I don't suppose you have any idea when this might be released do you?. Note for those hitting this / for myself in the future:\nLerna makes the git tags as well as bump the versions. To force publish after a failed NPM publish, you'll need to delete the tag locally (and presumably remotely) to be able to perform a force publish.. My assumption is that running the same command should work.\nIdeally, in this specific example, lerna would check if I'm logged in before making any local changes and failing early.\nAn npm whois check could be run early in the publish command and exit if the command returns an error.. Would it be possible for lerna to verify npm auth before versioning?. ",
    "tamoore": "Thanks, I suppose I should of tried that but it was getting late ;)\nThe master branch of lerna works fine, it's publishing like a boss again. \n. :+1: \n. I'll try it sometime in the next few weeks and I'll let you know what the use case might be. Overall, though, you may be right, I just know that module scoping doesn't work, but, perhaps it isn't necessary. \n. ",
    "forivall": ":+1: was trying to run travis tests locally under vagrant\n. ",
    "onigoetz": "Hello, I would love the Mercurial support in Lerna, was anything done in that direction ?. @hzoo Sure, no problem. I will experiment with Lerna in a project or two, would you be interested by a pull request for this ? (I can't promise anything, but if it answers my needs, I could take the time to contribute). Hello, sure I can maintain a fork on my side, can you maybe \"advertise\" it somewhere in the readme ? \nSomething like \"Lerna supports only Git at the moment, a community-maintained fork is available here\" ?. I made a small script to test/reproduce this : \ntest.js\n browsers demand the next line be empty \n\n```javascript\nconst ChildProcessUtilities = require(\"lerna/lib/ChildProcessUtilities\");\n\nconst variants = {noEnv: {}, env: {PATH: process.env.PATH}};\nfor (let variant in variants) {\n  const env = variants[variant];\n\n  ChildProcessUtilities.exec(\"which npm && npm --version\", {env: env}, (stderr, stdout) => {\n    console.log(variant + \": ChildProcessUtilities.exec: \", (stderr ? \"FAILED \" + stderr.message : stdout.replace(/\\r?\\n|\\r/g, \"   \")));\n  })\n\n  try {\n    const output = ChildProcessUtilities.execSync(\"which npm && npm --version\", {env: env})\n    console.log(variant + \": ChildProcessUtilities.execSync:\", output.replace(/\\r?\\n|\\r/g, \"   \"));\n  } catch (e) {\n    console.log(variant + \": ChildProcessUtilities.execSync: FAILED \", e.message);\n  }\n\n  ChildProcessUtilities.spawn(\"npm\", [\"--version\"], {stdio: \"pipe\", env: env}, (stderr, stdout) => {\n    console.log(variant + \": ChildProcessUtilities.spawn: \", (stderr ? \"FAILED \" + stderr : stdout.replace(/\\r?\\n|\\r/g, \"   \")));\n  })\n\n  ChildProcessUtilities.spawnStreaming(\"npm\", [\"--version\"], {\n    stdio: \"pipe\",\n    env: env\n  }, variant + \": ChildProcessUtilities.spawnStreaming: \", () => {})\n}\n```\n\nthe result is : (ordered for clarity)\n```\n[INFO] noEnv: ChildProcessUtilities.exec:  FAILED Command failed: which npm && npm --version\n[INFO] noEnv: ChildProcessUtilities.execSync: FAILED  Command failed: which npm && npm --version\n[INFO] noEnv: ChildProcessUtilities.spawn:  FAILED Command exited with status -2: npm --version\n[INFO] env: ChildProcessUtilities.exec:  /home/jenkins/workspace/sq-i18n/javascript/src/main/frontend/node/npm   3.8.6 \n[INFO] env: ChildProcessUtilities.execSync: /home/jenkins/workspace/sq-i18n/javascript/src/main/frontend/node/npm   3.8.6\n[INFO] env: ChildProcessUtilities.spawn:  3.8.6 \n[INFO] env: ChildProcessUtilities.spawnStreaming: 3.8.6\n```. Thanks for all these infos @evocateur I will try the canary version tomorrow . Thanks it seems it works with the latest code.. ",
    "Deadarius": "Yes, I do have readmes... When I was trying to find a problem I noticed that you just run existing npm... have no idea what can be a problem here. Only aware of this issue in outdated version of npm.\n. @gigabo But it works fine when I run npm publish directly...\n. @ianwremmel thank you very much, I still suffer from this issue.\n. ",
    "danigb": "I'm having the same issue... \n. ",
    "bcoe": "Thanks! Giving credit where credit is due, the whole backend team at npm has been working on infrastructure this makes solving problems like this much easier (we've been rolling out a database that was @chrisdickinson's mad-science idea). I'm really excited to make the tag workflow elegant, for the community and for the benefit of my own OSS projects. . @tomwayson Hey \ud83d\udc4b \nSo, rather than always pointing to the last published README file, we now point to whatever README is pointed to by the latest tag of npm. so, if you have a workflow in which you publish to a beta tag (as an example) and then use npm dist-tag add to switch this tag, you will see the appropriate README after the swap has taken place.. @evocateur this sounds great. Jest uses the same underlying instrumentation logic as nyc, but doesn't rely on source-maps (we've never quite hammered all the kinks out of the source-maps in babel codebases).\n. @evocateur @JaKXz would love to get to the bottom of the source-map discrepancy; @JaKXz we shoudl make an effort to capture discrepancies when possible, and start to get some failing tests in place on nyc. . @evocateur thinking from the point of view of the upstream conventional-changelog ecosystem (basically a set of tools for figuring out version bumps and changelogs from digging through git-history) -- I think having a hook point before and after tagging, and allowing the tagging process to be overridden, would add a lot of power.\nThe workflow for independent mode feels sub-optimal right now, one needs to remember which libraries had patch updates, feature updates, major updates., etc; which is exactly the problem that tools like lerna, semantic-release, and conventional-changelog are trying to simplify for people.. capturing an idea here:\n\nperhaps the pretag lifecycle script could return a proposed version bump, in which case (in independent mode) a user wouldn't be prompted regarding the version bump.. I still think this is an good feature idea, unfortunately I don't think either @evocateur or I have had enough open-source cycles to move it along.. @evocateur lifecycle scripts and/or a plugin system does feel like it would be a pretty awesome eventual feature. \n\nIt felt to me that using conventional commit messages is a common enough practice, and that it improves the independent workflow enough, that it would be worth implementing the approach outlined in #665 -- it also turns out that it doesn't take too much code to wire things together \ud83d\ude04 . @hzoo I think they probably pair nicely, and could eventually be combined? It seems to me that:\n\nif you're running in independent mode, it's pretty nice to have a per-module CHANGELOG.md (makes it easier to pull in legacy projects for starters); Also, it can be tedious bumping each version manually so using a convention is nice.\nit seems like an approach like lerna-changelog works better for fixed/locked mode -- where I think it potentially makes more sense to report changes in a single top level document?\n\nIt seems like the angular conventional-commit format (which is used by semantic-release by default, and standard-version) is getting pretty healthy adoption, is probably worth parsing for both use-cases?\ntldr; I don't think there's any conflict \ud83d\udc4d. @traviskaufman awesome, please don't hesitate to flag me in issues on lerna as you test stuff out; I'm excited to make this feature kick butt.. @Tapppi, @stevemao, this pulls together everything being discussed in https://github.com/conventional-changelog/conventional-changelog/issues/168 -- validating the week of noodling I've been doing in our conventional-changelog repos.. @thejameskyle @evocateur I was thinking events resembling package lifecycle scripts would get you pretty far ... but, one killer feature of a conventional changelog I couldn't think of an elegant way to facilitate, was recommending the version bump:\nIf you're using a conventional changelog format, we know when the release should be a patch, minor or major based on commit format -- it would be nice to be able to delegate to an external script for deciding on the semver bump that lerna is applying.\nI've been talking to @iarna about my requirements around a monorepo, and was aware of the plans of rolling this workflow (at least in some form) into yarn -- my two cents, I think that the tagging and publication workflow that lerna facilitates in an abstract way is quite powerful, it would be cool to continue having a library that lives separately from your npm client of choice to facilitate the advanced workflows I rely on as an open-source maintainer: git-tagging, CHANGELOG generation, etc.\n. @thejameskyle @evocateur here's how I think I could offer this functionality in a more abstract way:\n\nhave a pretag lifecycle script, if this script returns a semver valid tag on stdout use this tag in lieu of displaying a prompt in independent mode.\nhave a precommit hook; I would then be able to stage the updated CHANGELOG here.\n\nWith regards to this pull request, should @evocateur and I continue moving this feature forward without this abstraction (it feels like it will take longer to build out this lifecycle abstraction, and I sure wouldn't complain if I had conventional-changelog support int he interim).. @evocateur I've addressed your code review; I think all the suggestions were great, and things feel cleaner post refactoring.\nI've also added tests for the ConventionalCommitUtility; which helped cleanup the API further.\nI've been testing against this repo. I'm really happy with how simple the workflow feels.. @evocateur awesome \ud83d\udc83 thanks for your help on this, I can't wait to use this with conventional-changelog and istanbul ... at which point I can get back to actually fixing really hard to figure out instrumentation bugs .... @evocateur related request; as you march towards a 2.x release (which I know can take a while, it took us a couple months to get yargs 7.x out the door) would it be possible to occasionally do:\nnpm publish --tag=next-2\nSelfishly, I can then start using some of the new features for the monorepos I'm working on; less-selfishly, I can provide QA and feedback \ud83d\ude1b . @evocateur \ud83d\udc4d \n\n\u261d\ufe0f my knowledge of yarn.lock.. @evocateur I seem to be seeing this same problem on beta.38:\nThe directory structure looks like this:\n./packages/transform-file-follower/node_modules/@npm/knork/package.json:    \"numbat-emitter\": \"^2.3.2\",\nand the old 2.3.2 version gets hoisted to the top-level transform-file-follower; I'm upgrading the internal dependency to fix -- but thought I'd give the debug info.. @evocateur cool, I figured there'd be something like this; what bit me with private was that it still published dependents with a ^x.x.x dependency on append-transform that referenced the non-existent version, seems reasonably easy to put a test around.\nI'm happy to start contributing a bit in this regard if I can get caught up on some of my other OSS chores.. @wizardzloy \ud83d\udc4d seems reasonable; I'd like to add support to both for performing the merging logic, so that we can remove that from lerna.. @evocateur I'm open to this idea; I'm about to flag you on an issue in the conventional-changelog org, that I think might help clarify the direction I'd like to go in; around standardizing on the angular commit format.. @evocateur @futagoza my temptation would be defaulting eventually to this preset:\nhttps://conventionalcommits.org/\nWhich is the compromise commit format that I've been advocating; It seems like a reasonable extension to allow another format to be passed as a second argument to --conventional-commit, and I don't think we need to warn if we default to the conventional-commit format ... I always lean towards making a developer do minimal work.\nI like the idea for this extension though @futagoza!. @evocateur we currently default to -p angular:\nhttps://github.com/lerna/lerna/blob/master/src/ConventionalCommitUtilities.js#L30\nwhich is what the spec on https://conventionalcommits.org/ is based on; currently the angular preset is a superset of the specification discussed on conventionalcommits.org -- I imagine they'll eventually diverge somewhat, and we could switch to -p conventional.\nThe goal with https://conventionalcommits.org/ is to encourage folks to standardize on commit messages, which in turn helps automated tools parse the git history -- the angular convention seems to hit a sweet spot, and is getting pretty wide adoption -- I think before we entertained additional presets, we'd actually need to do some work here to appropriately recommend version bumps based on other commit formats.\n. this issue should now be addressed; there was a release error when attempting an emergency patch release to address a security vulnerability. Information about the vulnerability will be disclosed here:\nhttps://github.com/conventional-changelog/conventional-changelog/issues/282. It's my feeling that relying on the conventional-recommended-bump cli, and conventional-changelog-cli fits well with the existing patterns in the codebase; simply shelling out to npm with NpmUtilities.js , or git with GitUtilities.js:\n\nthis minimized the number of modules from the conventional CHANGELOG ecosystem that I would need to pull in to support this functionality.\nand allows me, while adding tests, to use the same helpers/conventions used when adding tests to npm/git:\nit's my plan to mock ChildProcess, using the same approach as here: https://github.com/lerna/lerna/blob/master/test/PublishCommand.js#L1707\n\nI'm not completely married to this approach, but it feels pretty elegant to me that the lerna codebase doesn't need any domain specific knowledge of the conventional-changelog API -- as far as this codebase is concerned it's just calling another command line application.\n. @stevemao mind going into details don't completely follow?. @stevemao I think we have slightly different use-cases in mind; I like the idea of adding in a header that explains the conventional-changelog format to curious parties -- I've found this is very useful for evangelizing the approach -- \nthe annoying thing is it means we need to avoid adding the header multiple times as the CHANGELOG is updated; is there an existing module that solves this use-case?. good catch \ud83d\udc4d . @stevemao I think this is the header for specific commits? I'm talking about the use-case:\n```md\nOverall Title\nHeader that introduces conventional commits and doesn't change.\n\ncommit.\ncommit.\ncommit\n\n```\nWhy don't we add the actual CHANGELOG merging logic to conventional-changelog-cli; then we could use the same logic for lerna and for standard-version; I think this would be a good solution because it DRYs up both codebases logic.. @stevemao gotcha; I think my comment is just confusing.\nI don't want to strip the generated header; I just want to insert the new commit message between CHANGELOG_HEADER and the old commit messages; this is the same logic used by standard-version., and might be worth DRYing up.. @evocateur that's a really smart idea.. @evocateur yeah, I noticed this when I started writing tests; wasn't sure how complex pkg.location could become.\nIt feels like changelog.location should then be something like path.resolve(pkg.location, 'changelog.md')?. @evocateur how did I not know about path.normalize? I've been using path.sep all over the place in a ton of my repos.. ",
    "tomwayson": "I'm confused. It sounds like @hzoo is saying that the npm website now picks up the README from whatever's on master in GitHub repository. I have not experienced this in my own projects, looking though issues for the npm website and registry for whatever changes were alluded to above, I see comments like this which make it seem like that is not the case at all.\n@bcoe would you be able to shed light on the behavior we should expect, or point to any docs or at least the changes above?\nThanks!\n. Same problem as @spudly describes just happened to us. I'll just add that I expected lerna publish --force-publish=my-private-package1,my-private-package2 to work, but it threw the same error. We were able to run lerna publish --force-publish=*, but that bumps every packages, even the public ones that didn't change. Since then we've just been making sure to make at least one change to one of the public packages that our private packages depend on.. FYI - for now I was able to move passed this issue by changing my dev:umd script to use onchange to watch for changes to source code and then run rollup.\nThat really seems to indicate that this is something specific to rollup -w b/c  lerna run --parallel works fine onchange as well as tsc -w. Possibly related: https://github.com/rollup/rollup/issues/1938\n. Thanks @CamBurris.\nI was on an older version of rollup (0.53.4), but upgrading to the latest (0.63.5) did not help.\nbash\n\u279c  hub.js git:(chore/upgrade-rollup) \u2717 lerna run --scope=@esri/hub-auth dev:umd --parallel\nlerna info version 2.8.0\nlerna info scope @esri/hub-auth\nlerna info run in 1 package(s): npm run dev:umd\n@esri/hub-auth: > @esri/hub-auth@1.3.0 dev:umd /Users/tom/code/hub.js/packages/auth\n@esri/hub-auth: > rollup -w -c ../../umd-base-profile.js\n@esri/hub-auth: rollup v0.63.5\n@esri/hub-auth: bundles ./src/index.ts \u2192 dist/umd/auth.umd.js...\nlerna success run Ran npm script 'dev:umd' in packages:\nlerna success - @esri/hub-auth\n. Thanks @CamBurris! I'm not sure how/why I only went up to 0.63.5, but you are right, after going to 0.66.4 it works!\n. ",
    "tmcw": "\ud83d\udc4d looks like this is fixed in master https://github.com/lerna/lerna/blob/master/src/logger.js\n. \ud83d\ude47  Thanks all!\n. ",
    "thatjessicakelly": "Is there anyway things could be changed to not rely on process.cwd()? That's kinda weird when using lerna as a normal node module.\n. done\n. ",
    "amasad": "@kittens was using ^ a conscious decisions or did you just go with the default? Any thoughts on this?\n. ",
    "justin-calleja": "Thanks @kittens !\nIs there any way to work around this? Or is it in the pipeline to support requiring sub-paths in packages? (e.g. require('pkg1/es5/lib/somefile'))?\n. The following is working for me (for now):\nhttps://github.com/justin-calleja/lerna/commit/aedcd086a526a81ab9cdd36b0e3dc2749b33fc26\nNot sure if this is what you want for this project, but if you want a PR, just let me know. Thanks!\n. @thejameskyle thanks and sorry I didn't catch #11 when browsing through the issues.\nIs the npm problem a bit involving to explain? I guess I'll come across it sooner or later if I continue linking.\nCopying the dir structure or requiring all other files will suffer from having to re-run lerna bootstrap for every change in any package being depended upon. File watching might make this easier but\u2026 feels wrong.\n. ",
    "christophercliff": "I'm getting an error on lerna publish if any of my packages are marked private in beta.24. Did plans change here?\n. Trying to publish https://github.com/christophercliff/flatmarket with command:\nsh\n./node_modules/.bin/lerna publish \\\n    --npm-tag=prerelease \\\n    --repo-version 3.0.0-beta.1\nError:\n```\nPublishing packages to npm...\nAttempting to retry publishing flatmarket-example...\nError: Command failed: /bin/sh -c cd /flatmarket/packages/flatmarket-example && npm publish --tag lerna-temp\nnpm ERR! Darwin 15.6.0\nnpm ERR! argv \"/usr/local/bin/node\" \"/usr/local/bin/npm\" \"publish\" \"--tag\" \"lerna-temp\"\nnpm ERR! node v4.2.3\nnpm ERR! npm  v2.14.7\nnpm ERR! This package has been marked as private\nnpm ERR! Remove the 'private' field from the package.json to publish it.\nnpm ERR! \nnpm ERR! If you need help, you may report this error at:\nnpm ERR!     https://github.com/npm/npm/issues\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /flatmarket/packages/flatmarket-example/npm-debug.log\nat ChildProcess.exithandler (child_process.js:203:12)\nat emitTwo (events.js:87:13)\nat ChildProcess.emit (events.js:172:7)\nat maybeClose (internal/child_process.js:818:16)\nat Process.ChildProcess._handle.onexit (internal/child_process.js:211:5)\n\n```\n. Yes.\n. @thejameskyle thanks, that's useful.\nBut suppose my dependency is deliberately out of date--where I can't update it or haven't gotten around to it yet--but I want to make sure it's consistent across packages. It would be useful to have a command with output like:\n```\n$ lerna version lodash\npackage-a/\n  lodash@1.0.0\npackage-b/\n  lodash@2.0.0\n``\n. For just listing versions,lerna exec -- npm outdated lodash` does the trick.\nMight be nice if lerna exec output each package name before running the command.\n. The above command will update packages/*/package.json with dependencies like \"my-package\": \"^x.x.x-beta.x\" (note the ^). If I publish these packages to npm and then try to install something that depends on my-package, npm will fail because ^x.x.x-beta.x doesn't resolve.\nI saw you guys were using a similar version scheme and thought you might have automated that somehow.\n. I no longer have the error handy but it's possible this is on the npm side.\n. ",
    "dijs": "So what is the change I need to make here?\n. Done\n. ",
    "donmccurdy": "I'm struggling to get a Lerna repository set up with Travis CI as well. After trying various combinations, one subpackage or another always seems to not build. My project is https://github.com/donmccurdy/glTF-Transform, with the following running at the before_script step:\nlerna bootstrap\nlerna exec -- npm install\nlerna link\nnpm run dist\nThings fail in one of the first two steps. The dist script compiles all of the packages, and needs their dev and prod dependencies. Full logs are at https://travis-ci.com/donmccurdy/glTF-Transform/jobs/166066386, with the relevant excerpt below:\n\n Output\n\n```\nlerna ERR! execute callback with error\nlerna ERR! Error: Command failed: npm install\nlerna ERR! npm ERR! path /home/travis/build/donmccurdy/glTF-Transform/node_modules/.staging/@gltf-transform/ao-07510c7c/node_modules/@gltf-transform/core\nlerna ERR! npm ERR! code ENOENT\nlerna ERR! npm ERR! errno -2\nlerna ERR! npm ERR! syscall rename\nlerna ERR! npm ERR! enoent ENOENT: no such file or directory, rename '/home/travis/build/donmccurdy/glTF-Transform/node_modules/.staging/@gltf-transform/ao-07510c7c/node_modules/@gltf-transform/core' -> '/home/travis/build/donmccurdy/glTF-Transform/node_modules/.staging/@gltf-transform/core-d2cd2d50'\nlerna ERR! npm ERR! enoent This is related to npm not being able to find a file.\nlerna ERR! npm ERR! enoent \nlerna ERR! \nlerna ERR! npm ERR! A complete log of this run can be found in:\nlerna ERR! npm ERR!     /home/travis/.npm/_logs/2018-12-19T04_14_28_446Z-debug.log\nlerna ERR! \nlerna ERR!     at Promise.all.then.arr (/home/travis/build/donmccurdy/glTF-Transform/node_modules/lerna/node_modules/execa/index.js:236:11)\n{ Error: Command failed: npm install\nnpm ERR! path /home/travis/build/donmccurdy/glTF-Transform/node_modules/.staging/@gltf-transform/ao-07510c7c/node_modules/@gltf-transform/core\nnpm ERR! code ENOENT\nnpm ERR! errno -2\nnpm ERR! syscall rename\nnpm ERR! enoent ENOENT: no such file or directory, rename '/home/travis/build/donmccurdy/glTF-Transform/node_modules/.staging/@gltf-transform/ao-07510c7c/node_modules/@gltf-transform/core' -> '/home/travis/build/donmccurdy/glTF-Transform/node_modules/.staging/@gltf-transform/core-d2cd2d50'\nnpm ERR! enoent This is related to npm not being able to find a file.\nnpm ERR! enoent \nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /home/travis/.npm/_logs/2018-12-19T04_14_28_446Z-debug.log\n    at Promise.all.then.arr (/home/travis/build/donmccurdy/glTF-Transform/node_modules/lerna/node_modules/execa/index.js:236:11)\n    at process._tickCallback (internal/process/next_tick.js:68:7)\n  code: 254,\n  killed: false,\n  stdout: '',\n  stderr:\n   'npm ERR! path /home/travis/build/donmccurdy/glTF-Transform/node_modules/.staging/@gltf-transform/ao-07510c7c/node_modules/@gltf-transform/core\\nnpm ERR! code ENOENT\\nnpm ERR! errno -2\\nnpm ERR! syscall rename\\nnpm ERR! enoent ENOENT: no such file or directory, rename \\'/home/travis/build/donmccurdy/glTF-Transform/node_modules/.staging/@gltf-transform/ao-07510c7c/node_modules/@gltf-transform/core\\' -> \\'/home/travis/build/donmccurdy/glTF-Transform/node_modules/.staging/@gltf-transform/core-d2cd2d50\\'\\nnpm ERR! enoent This is related to npm not being able to find a file.\\nnpm ERR! enoent \\n\\nnpm ERR! A complete log of this run can be found in:\\nnpm ERR!     /home/travis/.npm/_logs/2018-12-19T04_14_28_446Z-debug.log\\n',\n  failed: true,\n  signal: null,\n  cmd: 'npm install',\n  timedOut: false,\n  exitCode: 1 }\nnpm ERR! code ELIFECYCLE\nnpm ERR! errno 1\nnpm ERR! @ lerna:bootstrap: `lerna bootstrap`\nnpm ERR! Exit status 1\nnpm ERR! \nnpm ERR! Failed at the @ lerna:bootstrap script.\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /home/travis/.npm/_logs/2018-12-19T04_14_28_480Z-debug.log\nThe command \"npm run lerna:bootstrap && npm run lerna:install && npm run lerna:link && npm run dist\" failed and exited with 1 during .\n```\n\n\n. Go figure, I post here after a few hours of trying and then 10 minutes later get it working... \ud83d\ude05 In my case the issue was resolved by removing all of the package-lock.json files, and simplying before_script to just:\nlerna bootstrap\nnpm run dist\nI also added file:packages/foo devDependencies to the root package.json, but I'm not sure whether that was part of the fix.. ",
    "Gongreg": "Bump, We got into this issue, that if we do changes on different branches for different versions, we need to use newest tag in that branch, not in whole project. Could we try to do a pull request for this feature? Maybe add passing some kind of parameter for turning this option on?\nEdit: Fixed typo (dumb -> bump, I seriously didn't mean to write that).. Hey, when do you run this script? One person in our team accidentally made a change in multiple packages, which looked like it didn't create a breaking change, but because inner package dependencies are not locked, it broke other place which used older version. This thing would help us a lot.\nEDIT: Didn't get a response, so I solved it this way:\nRun a script during git pre-commit and check if lerna.json file has changed.\n```\n!/bin/bash\nUPDATED=$(git diff --cached --name-only)\nif grep -q lerna.json <<< $UPDATED; then\n    echo 'Fixing package versions...'\n    node ./scripts/fix-versions.js\n    exit 0;\nelse\n    exit 0;\nfi\n```\nIf it has changed I run script which simply removes ^ from before version.\n```\nconst fs = require('fs');\nconst path = require('path');\nconst exec = require('child_process').execSync;\nconst lernaConfig = require('../lerna.json');\n// List all the packages\nconst PACKAGES_DIR = path.resolve(__dirname, '../packages');\nconst packages = fs.readdirSync(PACKAGES_DIR);\n//only updates private dependencies\nfunction updateDependencies(dependencies) {\n    Object.keys(dependencies).forEach(key => {\n        if (!key.includes('$private repo$')) {\n            return;\n        }\n    dependencies[key] = dependencies[key].replace('^', '');\n});\n\n}\npackages.forEach(name => {\n    // Avoid .DS_Store\n    if (name[0] === '.') {\n        return;\n    }\nconst pkgPath = path.resolve(PACKAGES_DIR, name, 'package.json');\nconst pkg = require(pkgPath);\n\nif (pkg.version === lernaConfig.version) {\n\n    pkg.dependencies && updateDependencies(pkg.dependencies);\n    pkg.devDependencies && updateDependencies(pkg.devDependencies);\n\n    fs.writeFileSync(pkgPath, JSON.stringify(pkg, null, 3), 'utf-8');\n    exec('git add ' + pkgPath);\n}\n\n});\n```\nCode is not nice (mutations everywhere), but it will hold.\nAnd after changing file it adds it to staged files. I am not sure it works correctly, we will still have to try it out.\n. I used your comment as a reference, \ngit rev-list -n 1 $(git describe --tags)\ngit rev-list -n 1 $(git describe --abbrev=0 --tags)\nOnly difference i had to add abbrev option.\n. I've added this as a option just for beginning (tried it out and it worked well for us), since tests for publish command looked like quite complicated. I could work on making it as a default behaviour/add message if you are not on master. :). So should I follow up with doing something more about this? I agree that it could be default behaviour, didn't have a reason not to use it (it works same as before if you are on master, if you check older tag/branch/commit you expect it to work with last version, so I am quite confident that we can make this default behaviour). Also will someone check the tests after the changes? It was quite difficult to read your tests :). Okay, I've made this execute as a default behaviour.\nAlso I've added check to see if user is inside some branch, because lerna publish needs to push to branch (shows error message if he is not in a branch).\nLerna updated works properly even when user simply checkouts older commit.. I'll fix the linter issues today/tomorrow. But I think this thing really needs tests if it is being done as default behaviour. I will inspect them more, I gave up too soon last time I looked into them. Also I've left the company I've worked in, I will contact them to allow me to update the code or I will reopen the PR from different fork.. Created new pr. . Does it solve this issue #359 ?. I've fixed existing tests, but it definitely needs tests for this new behaviour. \nLooks like appveyor fails, even though tests run without fails locally.. This needs a test case, not sure where to place it:\n\nGit init with two packages\nLerna publish v1.0.0\nEdit both packages\nLerna publish v1.1.0\nGit checkout v1.0.0\nGit checkout -b v1-bugfix\nEdit one of packages\n\nExpected result:\nLerna updated shows only one package.\nLerna publish suggests versions:\nv1.0.1\nv1.1.0\nv2.0.0. 0.12v build failed, don't know what to do about it.. Didn't help.. @spudly I've invited you to repo. You are definitely welcome to help. . Is this going to be merged in sometime?. Fixed your comments.. I tried to use your command but something wasn't working with it then. I don't have a possibility to check it out more now.. @spudly Added missing information. Don't have what else to add.\nAlso I didn't have a chance to thank you @spudly. So, Thank you! :). I think to understand properly you need to know arity of operators, so it can become confusing for some people. You can read it both as \n(this.flags.exact ? version : \"^\") + version;\nand\nthis.flags.exact ? version : (\"^\" + version);. It failed in my machine, iirc it failed in build too. Looking into test case it doesn't even make sense that it passed before.\n. Removing out this try catch, added check case in updated packages collector. No need to handle it here then. It didn't even make sense to try catch it.. ",
    "jacobwgillespie": "Ah, nice, I overlooked the pre/post publish scripts.  I'm already doing stuff outside of lerna before running publish (with a Makefile).\nI edited the title and issue description now to be specific about customizing the publish directory, as it would still be pretty difficult to change the directory from a prepublish script alone (it's kinda hard-coded in publishTaggedInDir).\n. > Do you mean running npm publish in a nested directory within each package?\nSorry, super late reply, but yes.  The idea is that the npm publish would run inside a subdirectory, like packages/package-name/dist, as that would give more control over what appeared in the final published package beyond a basic .npmignore, for example a customized package.json or README different from the parent.\nPerhaps a key inside package.json could control this behavior:\njson\n{\n  \"lerna\": {\n    \"publishDir\": \"dist\"\n  }\n}. @nadavsinai in case you ever need to do that with standard CommonJS, it is possible with:\njavascript\nmodule.exports = require('./dist');\nES6 isn't necessarily required there.. @evocateur you are correct, however in my case we wanted an entirely new package.json inside the resultant build.  From what I can tell, that is the only file you cannot change through some combination of options during publishing without resorting to an entirely new directory.  . At this point I'm no longer working on the project and can't remember exactly what we were trying to do. \ud83d\ude42  It was something like having a custom set of dependencies and devDependencies or a different value for engines or something similar. . @rkusuma that was referring to https://github.com/lerna/lerna/issues/91#issuecomment-201488723 - I don't believe that lets you publish inside a subfolder though.\n@sebelga if you're okay with the package.json not being directly inside the dist folder, you can omit all the folders / files except for dist with the files setting inside package.json:\njson\n{\n  \"name\": \"my-package\",\n  \"main\": \"dist/index.js\",\n  \"files\": [\n    \"dist\",\n    \"LICENSE\"\n  ]\n}\nThat way your published package will be package.json, README.md, LICENSE, and the dist folder.. ",
    "nadavsinai": "@thejameskyle  this would be very beneficial for us too - as you said - to create flat packages when publishing. @jacobwgillespie  thanks for your reply, I actually used (and updated) your hacky function replacement code to try to make it work, unfortunately I got stuck,I ended up creating a static index.js which states this funny thing :\nexport * from './dist';\nand this way the imports from my lib don't need to drill further down then the 'root', setting the main field only didn't work.\nNow I can get away with that as I am exporting an es6 module syntax (this is internal NPM repo, all code is eventually consumed by webpack2) not many people are in that position (yet), in Es5/CJS it is not so elegant and publishing in a sub folder is much nicer.\n. ",
    "rkusuma": "@jacobwgillespie where is the package/[name]/scripts/prepublish.js?\ni'm encounter the problem like you.. i need to publish the dist folder instead of current folder in each packages. ",
    "sebelga": "Hi,\nI am also interested in being able to run the \"npm publish\" from a sub directory. I think it is a common scenario to have /src folder and a building script creating a /dist folder with its package.json and bundles. \nWhat would be the current solution to only publish the \"dist/\" folder generated?\nthanks!. @jacobwgillespie thanks I will give that a try and let you know.. @jacobwgillespie thanks for the \"files\" tip, it works perfectly \ud83d\udc4d . @patrickmarabeas great, thanks for the insight! \u00b4Looking forward for you bash script, it seems like a good solution!. ",
    "Tom910": "Some problem. I want to receive 'flat' structure modules. ",
    "bennyn": "At Wire we are also struggling with releasing from a subdirectory with Lerna. \nBefore Lerna we were doing cd ./dist && npm publish when npm publish got invoked. We also executed a prepublish script which adjusted our package.json file and copied it to our dist folder, so that references like the main entry point in dist/package.json did not became invalid:\n```js\nconst fs = require('fs');\nconst originalPackage = require('../package.json');\noriginalPackage.main = './index.js';\ndelete originalPackage.scripts;\nfs.writeFileSync('./dist/package.json', JSON.stringify(originalPackage, null, '  '));\n```\nUnfortunately this cd ./dist && npm publish trick doesn't work anymore with lerna publish. That's why we had to rewrite our component exports to make it fit with flat structures: https://github.com/wireapp/wire-web-packages/pull/196. I am also getting this issue when running lerna bootstrap:\n| Executable | Version |\n| --- | --- |\n| lerna --version | 2.5.1 |\n| npm --version | 5.5.1 |\n| yarn --version | 1.3.2 |\n| node --version | 8.9.0 |\nHere is my stack trace:\n\nyarn install v1.3.2\n[1/4] Resolving packages...\nsuccess Already up-to-date.\n$ lerna bootstrap\nlerna info version 2.5.1\nlerna info versioning independent\nlerna info Bootstrapping 2 packages\nlerna ERR! execute callback with error\nlerna ERR! Error: stderr maxBuffer exceeded\nlerna ERR!     at PassThrough.stream.on (/home/travis/build/wireapp/wire-web-lerna/node_modules/get-stream/index.js:30:12)\nlerna ERR!     at emitOne (events.js:121:20)\nlerna ERR!     at PassThrough.emit (events.js:211:7)\nlerna ERR!     at addChunk (_stream_readable.js:263:12)\nlerna ERR!     at readableAddChunk (_stream_readable.js:246:13)\nlerna ERR!     at PassThrough.Readable.push (_stream_readable.js:208:10)\nlerna ERR!     at PassThrough.Transform.push (_stream_transform.js:147:32)\nlerna ERR!     at PassThrough.afterTransform (_stream_transform.js:88:10)\nlerna ERR!     at PassThrough._transform (_stream_passthrough.js:42:3)\n(node:3706) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 4): Error: stderr maxBuffer exceeded\n(node:3706) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\nlerna ERR! execute callback with error\nlerna ERR! Error: Command failed: yarn install --mutex network:43273 --non-interactive --exact\n\nIs the --max-buffer option documented somewhere? I tried with lerna bootstrap --max-buffer 100000000 but no luck.\nFor me this issue occurs when I move dependencies from my packages into the package.json of lerna (to share them). When I keep my dependencies within the packages, then I don't run into this problem.\nHere is my lerna.json:\njson\n{\n  \"lerna\": \"2.5.1\",\n  \"npmClient\": \"yarn\",\n  \"npmClientArgs\": [\n    \"--exact\"\n  ],\n  \"packages\": [\n    \"packages/*\"\n  ],\n  \"version\": \"independent\",\n  \"useWorkspaces\": true\n}\nAnd my package.json:\njson\n{\n  \"devDependencies\": {\n    \"browser-sync\": \"2.18.13\",\n    \"concurrently\": \"3.5.0\",\n    \"cross-env\": \"5.1.1\",\n    \"istanbul\": \"0.4.5\",\n    \"jasmine\": \"2.8.0\",\n    \"karma\": \"1.7.1\",\n    \"karma-chrome-launcher\": \"2.2.0\",\n    \"karma-jasmine\": \"1.1.0\",\n    \"karma-jasmine-diff-reporter\": \"1.1.1\",\n    \"karma-sourcemap-loader\": \"0.3.7\",\n    \"lerna\": \"2.5.1\",\n    \"rimraf\": \"2.6.2\",\n    \"sinon\": \"4.0.2\",\n    \"sinon-har-server\": \"0.3.0\",\n    \"typescript\": \"2.6.1\",\n    \"webpack\": \"3.8.1\",\n    \"webpack-dev-server\": \"2.9.4\"\n  },\n  \"private\": true,\n  \"scripts\": {\n    \"clear\": \"lerna run clear\",\n    \"dist\": \"lerna run dist\",\n    \"postinstall\": \"lerna bootstrap\",\n    \"test\": \"lerna run test\"\n  },\n  \"workspaces\": [\n    \"packages/*\"\n  ]\n}. @evocateur: Thanks for the hint! \nI put back the dependencies to their individual packages to make use of Yarn's workspaces feature. But I also noticed that I get the maxBuffer error when lerna bootstrap is executed within NPM's postinstall script. Therefore I created a separate script (npm run boot) in my package.json file to run lerna bootstrap:\njson\n{\n  \"devDependencies\": {\n    \"lerna\": \"2.5.1\"\n  },\n  \"private\": true,\n  \"scripts\": {\n    \"boot\": \"lerna bootstrap\"\n  },\n  \"workspaces\": [\n    \"packages/*\"\n  ]\n}. ",
    "kentaromiura": "by looking at it node-progress seems to be an abandoned project\n. I didn't follow-up because I fixed the problem by spawning the process with {stdio:'inherit'}, so that the progress bar receive a TTY;\nI think it may fix your issue as it mocks the TTY commands needed by the progressbar\n. tail of two random yarn-error:\n```\nMacBook-Pro:jest ccarlesso$ tail packages/babel-jest/yarn-error.log\n  validate-npm-package-license@^3.0.1:\n    version \"3.0.1\"\n    resolved \"https://registry.yarnpkg.com/validate-npm-package-license/-/validate-npm-package-license-3.0.1.tgz#2804babe712ad3379459acfbe24746ab2c303fbc\"\n    dependencies:\n      spdx-correct \"~1.0.0\"\n      spdx-expression-parse \"~1.0.0\"\nTrace:\n  Error: https://registry.yarnpkg.com/babel-plugin-istanbul/-/babel-plugin-istanbul-4.0.0.tgz: ENOENT: no such file or directory, open '/Users/ccarlesso/Library/Caches/Yarn/npm-babel-plugin-istanbul-4.0.0-36bde8fbef4837e5ff0366531a2beabd7b1ffa10/.yarn-tarball.tgz'\n      at Error (native)\nMacBook-Pro:jest ccarlesso$ tail packages/jest-runtime/yarn-error.log\n      require-main-filename \"^1.0.1\"\n      set-blocking \"^2.0.0\"\n      string-width \"^1.0.2\"\n      which-module \"^1.0.0\"\n      y18n \"^3.2.1\"\n      yargs-parser \"^5.0.0\"\nTrace:\n  Error: ENOENT: no such file or directory, stat '/Users/ccarlesso/Library/Caches/Yarn/npm-yargs-parser-5.0.0-275ecf0d7ffe05c77e64e7c86e4cd94bf0e1228a/LICENSE.txt'\n      at Error (native)\n```. ",
    "gamtiq": "I have tested the fix in Windows (cygwin). It works fine.\n. I also have this error when I try to bootstrap babel in Windows.\n. I also have this error when I try to bootstrap babel in Windows.\n. I suppose that such a trivial change does not need a PR. :-)\nBut I can make the PR, if you would like.\n. ",
    "kolodny": "I started trying to play around with this and it seems that the master branch of lerna has this problem with the carrot as well as without. Here's the script to reproduce, I had lerna with npm link . as a sibling of this test directory\n```\n!/bin/sh\nrm -rf node_modules package.json .git packages\nnpm init -y > /dev/null\ngit init\nnpm link lerna\n./node_modules/.bin/lerna init\necho 1.0.0 > VERSION\npkg1=p$RANDOM\npkg2=p$RANDOM\nmkdir packages/$pkg1\ncd packages/$pkg1\nnpm init -y > /dev/null\ncd ../..\nmkdir packages/$pkg2\ncd packages/$pkg2\nnpm init -y > /dev/null\ncat <<EOF | node\nvar pkg = require('./package.json');\npkg.dependencies = {$pkg1: '^1.0.0'}\nrequire('fs').writeFileSync('./package.json', JSON.stringify(pkg, null, 2));\nEOF\ncd ../..\n./node_modules/.bin/lerna bootstrap\n```\nedit:\nThis script can reproduce the problem I was having with the carrot when lerna@v1.1.2 was checked out locally\n. ",
    "dalanmiller": "@hzoo How does lerna automatically detect packages within my repo? Does it just search one folder level deep for package.json files? \nI currently have a repo with three separate packages contained. Do I need to put their npm package names in the package.json lerna created at the root of the repository? \n. ",
    "cpojer": "Yes, I'd like to publish to npm (that's the point!) but I don't want to tag the release version with the commit because I have to amend the commit with other changes + I don't land the commit through git push.\n. I think either leaving the changes unstaged or committed but not pushed is fine :)\n. Woops, sorry! Thanks for already tracking this.\n. thank you for the speedy merge <3\n. Canary is super useful btw.\nAlso, it would be nice if I could select the next version. Right now it uses lerna.json which is the current version but I'd prefer to publish a canary for the next minor or patch release most of the time, so I have to manually edit lerna.json.\n. Lerna doesn't run as part of a test run so I'm gonna assume the slowdown happens because the symlinks are so deep that analyzing the entire repo takes more time?\nCould we bring back the symlinking as an option?\n. I guess we are surviving with this regression even if it's not good. Regardless, we are now using Yarn's workspaces to link things so this is not up to Yarn any more. Feel free to close this.. @natew can you send a PR for this? :)\n. @seansfkelley we'd love to work with you if you are interested in bringing all this into Yarn in a hack-free way :). We don't have a concrete plan yet. The team at FB is planning to spend a few great days with their families for Christmas and then come back with a ton of energy in January. We were planning to sketch out what this may look like sometime next month :). @joshduck we are hiring at FB London ;). @joshduck we are a bit behind. We'll be speccing this out soon but it'll take a while until anything is ready. On Jest, we use lerna + npm and it is working reasonably well. Make sure to hoist your dev dependencies to the top level and use yarn for that :). @hzoo it doesn't seem like that works well on CI: https://ci.appveyor.com/project/Daniel15/jest/build/2335 and https://circleci.com/gh/facebook/jest/367?utm_campaign=vcs-integration-link&utm_medium=referral&utm_source=github-build-link for https://github.com/facebook/jest/pull/3032. Yup, lerna has Yarn workspaces support and we use it for Jest and other tools. It's super fast and awesome.. Hey, wow, thanks for doing this.. lerna bootstrap --concurrency=1 is what we use for Jest's CI.. Woohooo! Thank you.. ",
    "nolanlawson": "Hm, it just occurred to me that this only works for default exports, not non-default exports. \ud83d\ude15 \n. jsnext:main is currently only supported by Rollup and System.JS, yes. Axel Rauschmayer has a recent blog post where he mentions it among other solutions to the ES6 problem.\n. Done! ^\n. At some point it would be nice to have support for ES6 modules, via jsnext:main or .mjs or whatever the Node community settles on (looks like .mjs for now). Maybe another option would be to allow a config in Lerna to either always expose CJS or always expose ES6.\n. If you'd like to add a hook to support arbitrary injection of files, that would be great, although I can't imagine a very streamlined API for it. Maybe it's just best if I fork Lerna in the meantime, and then when Node figures out modules, Lerna can just go with the standard solution.\nClosing for now. Please reopen if you wish.\n. Nice! Probably just a user error on my part.\n. I'll check when I get a chance, but it sounds like it!\n. oh shoot, wrong repo!! sorry about this. \ud83d\ude31\n. wrong repo! whoopsie\n. @thejameskyle Since that feature is usually designed for users rather than developers (e.g. user is on Windows 7 64-bit, developer is on Mac OS X), I think it would be fine for the time being if it just failed if the optional dependency fails.\n. Related: https://github.com/tgriesser/knex/issues/809\n. I think this is actually a bug in knex. Now that I look more closely at their package.json, sqlite3 is a devDependency rather than a dependency. It ought to be a dependency or optionalDependency.\n. Hmmm, try putting \"browser\": {\"sqlite3\": false} in yourpackage.json?\n. Also see https://github.com/defunctzombie/package-browser-field-spec\n. @reggi Lerna doesn't have anything to do with the browser field; it just runs npm install for all your packages. This sounds like it might be a postinstall/prepublish issue.\n. Right, but that stub project just contains an index.js that points back to the original project. So it shouldn't matter (I believe)\n. Thanks! I'll add a fix for that.\n. ",
    "mxstbr": "Would love to see this reopened, will gladly submit a PR implementing support for this if you see the use for it.\nI have that exact use case \u2013 over at Carte Blanche our file layout is a bit different, we have:\ncarte-blanche/\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 plugins/\n\u2502   \u251c\u2500\u2500 react/\n\u2502   \u2502   \u2514\u2500\u2500 package.json\n\u2502   \u2514\u2500\u2500 source/\n\u2502       \u2514\u2500\u2500 package.json\n\u251c\u2500\u2500 utils/\n\u2502   \u2514\u2500\u2500 package.json\n\u2514\u2500\u2500 webpack-plugin/\n    \u2514\u2500\u2500 package.json\nWhere each plugin (plugins/xyz/) is its own package, the core (webpack-plugin/) is its own package and we have a few shared utils (utils/) that are their own package.\nI think in our case it makes sense to be that way, so having an option to change that would be great:\nJS\n{\n    \"packages\": [\n        \"plugins/**/package.json\",\n        \"{webpack-plugin,utils}/package.json\"\n    ]\n}\nIf we want to keep it to a single glob, one could also express those as\nJS\n{\n    \"packages\": \"{plugins,webpack-plugin,utils}/**/package.json\"\n}\nthough not sure how the first one is more complex. What do you think?\n. Yeah I guess it works, but it's quite a bit of work to restructure the build processes \u2013 simply saying \"{plugins,webpack-plugin,utils}/**/package.json\" is a lot easier from that perspective.\n. Yess :tada: Anything we can help out with, or is it a quick change that you just want to get done with?\n. ",
    "Ondoher": "Progress? We have packages from two different repos we'd like to maintain as such. Multiple package directories or nested would be great.\n. ",
    "nruhe": "We need this feature pretty heavily. What's the ETA on it? If it's going to take a bit, I'm willing to fork the repo and add it myself.\n. Will this change allow the boostrap command to link dependencies that are in a nested folder structure inside of packages? E.g. /package/package-collection-1/... and /packages/package-collection-2/...?\n. I would definitely like to know the status on this. We have major need of the ability to run our prepublish script after changes so that the requiring repos can get the latest content in dist.\n. What's the ETA on merging this?\n. Sorry to keep pushing on this one, but we're in the process of adopting a monorepo and we -really- need the ability to have the system run build/prepublish commands on changes (e.g. npm prepublish). @thejameskyle can you comment on whether this will be added any time soon or if we should find an alternative?. Thank you very much. @rygine  :)\nKeep me informed!. I'd be willing to submit a pull request with this feature since our use of Lerna is going to be contingent on its support.\n. @gigabo Admittedly, it seems to be a generally accepted but not discussed standard. What informed me about it was the commit that added it to the bootstrap library, which linked to this blog post. Since then, I've seen it in multiple CSS based npm libraries, especially icon-font libraries.\n. I don't think so. Correct me if I'm wrong, but isn't @boxxxie ripping the contents from the CSS files and combining them into a single CSS file that gets included in the requiring module's node_modules folder? If so, that kind of defeats the purpose of bootstrapping since you will have to rerun bootstrap every time you make a change. We should be making an index css file that uses @import to point to the exposed CSS file, as I mentioned above so that CSS changes get immediately updated in all requiring apps. Also, just like the main definition, which only allows you to specify a single path to the primary JS file for your application, style should not take an array, but rather a single file-path.\n. My mistake @boxxxie, I only had time to quickly skim the changes. Still, I think we should try to keep to the traditionally standard behavior of exposing a single file rather than an array. And either way, doesn't copying a file like that still run into the earlier issue I mentioned? Even if we will be replacing this with symlinks later, it doesn't change the fact that the behavior should be consistent with what's already there.\n. I'll verify this tonight.\n. If the only thing holding this change back is documentation, I'd be happy to volunteer to write it.\n. I believe this is also happening with dependencies of dependencies.. I'm getting a similar issue that is likely related.\nlerna info 0157346 \nlerna ERR! execute callback with error\nlerna ERR! execute  Failed to apply commit 0157346.\nlerna ERR! execute Error: Command failed: git am -3\nlerna ERR! execute .git/rebase-apply/patch:142: space before tab in indent.\nlerna ERR! execute      promise: ApiKeyApi.createKey(token)\nlerna ERR! execute warning: 1 line adds whitespace errors.\nlerna ERR! execute error: Failed to merge in the changes.\nlerna ERR! execute Applying: Wrk in progress... Able to call external APIs to get tokens, but not really hooked up to auth0.\nlerna ERR! execute Using index info to reconstruct a base tree...\nlerna ERR! execute M    projects/demo-app/src/routes/index.js\nlerna ERR! execute Falling back to patching base and 3-way merge...\nlerna ERR! execute Auto-merging projects/demo-app/src/routes/index.js\nlerna ERR! execute CONFLICT (content): Merge conflict in projects/demo-app/src/routes/index.js\nlerna ERR! execute Patch failed at 0001 Wrk in progress... Able to call external APIs to get tokens, but not really hooked up to auth0.\nlerna ERR! execute The copy of the patch that failed is found in: .git/rebase-apply/patch\nlerna ERR! execute When you have resolved this problem, run \"git am --continue\".\nlerna ERR! execute If you prefer to skip this patch, run \"git am --skip\" instead.\nlerna ERR! execute To restore the original branch and stop patching, run \"git am --abort\".\nlerna ERR! execute \nlerna ERR! execute Rolling back to previous HEAD (commit 879cfa3947637f92fefd0c80917f3315236c374b).. ",
    "SachaG": "Just to clarify this, does \"configurable package location\" mean any location, even outside of the app's directory? So my main app could be at ~/foo/myApp, and my packages at ~/bar/myPackages?. ",
    "jpnelson": "I'd prefer @joscha 's suggestion if it's the difference between a major version and a minor version\n. This will also fix #150 \n. If lerna-semantic-release used / cooperated with lerna-changelog, would we be ok with contributing lerna-semantic-release back to the lerna ecosystem?\n. @thejameskyle it seems like the build is sporadically failing on random node versions. Do you know what's going on with that?\n. no better ones, --run-in makes sense to me though\n. It was broken in the tests actually \u2013 flags was null. I imagine that'd also be the case if you used commands programatically.\nI also check for undefined specifically so that it's not 0 || 4, so that if you specify 0 you get an error, rather than it just using 4.\n. ",
    "light24bulbs": "the --json flag covers this use case now, but unfortunately there isn't quite enough data in there.  It would be nice if ls also listed the package path\n. What is the state of the programmatic API?  Was any progress made on invoking lerna from nodejs directly?. @evocateur that's interesting!  Are you saying I can do const lerna = require('lerna')?  Doesn't seem to be working for me. \nWhat are the commands that are exposed?  For posterity, can you give an example of invoking a Lerna command from node?\nScriptability could go a long way towards making Lerna more extensible.  If you look at a package like Webpack, it eventually won out because it was SO extendable.  . I sense a pull request coming. \nIt might be against the lerna \"philosophy\" to allow submodules, but when used without monorepo, lerna is still an extremely powerful package linking and versioning tool.. If you are on jenkins and have this problem you can add the local branch plugin to your checkout SCM:\nextensions: [[$class: 'LocalBranch', localBranch: '**']]\nThis will tell jenkins git to use a local branch, avoiding the detached head state.. Any more progress on this?  It's such a great idea.  I find myself guessing at a lot of that stuff. I agree with @bdwain, this feature is a necessary part of independent mode.  If the versions are independent, we naturally don't necessarily want to bump them all the same version, especially if all that has changed is a dependency version number in the package.json\nI also think we should be able to do this manually rather than being forced to use a commit message DSL.\nI understand that Lerna's core team is mostly centered around locked mode, and that's great, but lots of people are using Lerna these days for use cases that aren't babel-like.  \nThere are two ways I can imagine this working:  One is a manual command line flag as described above, and the other is a flag in the projects package.json.  \n\"lerna-bump-type\": \"major\"\nThat lerna takes out when it changes the version.  That's because most sane people do Lerna publish from a CI build, and it would be nice to see that the breaking change is acknowledged in the PR before anyone clicks submit.  Anyway, if Lerna adds a manual flag, that is how I will probably write my pipeline.\n. I agree with @bdwain, this feature is a necessary part of independent mode.  If the versions are independent, we naturally don't necessarily want to bump them all the same version, especially if all that has changed is a dependency version number in the package.json\nI also think we should be able to do this manually rather than being forced to use a commit message DSL.\nI understand that Lerna's core team is mostly centered around locked mode, and that's great, but lots of people are using Lerna these days for use cases that aren't babel-like.  \nThere are two ways I can imagine this working:  One is a manual command line flag as described above, and the other is a flag in the projects package.json.  \n\"lerna-bump-type\": \"major\"\nThat lerna takes out when it changes the version.  That's because most sane people do Lerna publish from a CI build, and it would be nice to see that the breaking change is acknowledged in the PR before anyone clicks submit.  Anyway, if Lerna adds a manual flag, that is how I will probably write my pipeline.\n. ",
    "longlho": "can we have this auto-confirm version bump also?\n. hmm this would definitely break cases where users don't have permissions to global npm (for ex.  shared CI env)\n. ",
    "scriptjs": "I am wholeheartedly behind running locally but in the way all other modules currently work instead of any tricks with 'usr/bin'. Personally, I dislike -g with anything node and avoid preferring anything global.\nI don't use /usr/bin at all when I must install something global. bins from global installs are instead executed from  /.local/bin. Global installs do not need sudo in this case. Like many that develop commercially, we rely on sinopia/verdaccio. The npm client is often upgraded more often than node.\n. @thejameskyle babel-cli also\n. I have filed a bug report with yarn since this appears an upstream issue https://github.com/yarnpkg/yarn/issues/5300\nBug has been confirmed.. ",
    "tjbenton": "All you have to do is add ./node_modules/.bin or $(npm bin) to your PATH in your bash files. I know this works quite well for mac, because I've been using it for a couple of years and it's allowed me to not install any global dependencies for my projects.\nHere's how to add it to your path in your dot files\nsh\nPATH=./node_modules/.bin:$PATH # adds locally installed node modules to the path\nexport PATH\nYou can also make an function for it if you don't like messing with the path\nsh\nfunction npm-exec {\n   $(npm bin)/$@  \n}\nIf you're using a Makefile You can put this at the top of it and that also adds it to your path.\nmake\nPATH := $(npm bin):$(PATH)\nSHELL := /bin/bash\nSo the following would work \nmake\nbootstrap:\n    lerna bootstrap\nI don't use windows but I asked a co worker who does to look into it. So I will update this if he comes up with anything.\n. ",
    "NMFR": "Don't know if it will help but you can not have it installed globally:\n\nInstall it as a dev dependency.\nAdd lerna as a script in package.json:\n  {\n    ...\n    \"scripts\": {\n      \"lerna\": \"lerna\"\n    }\n  }\nCall it locally with npm:\n  npm run lerna -- --help\n  or\n  npm run lerna -- init --exact\n\nAny arg after -- will be passed to lerna.\n. ",
    "tdanecker": "We also need this feature, so I tried to implement it. Could you have a look at it?. I added the option to the README and fixed the merge conflicts.. ",
    "cezaraugusto": "wasn't this closed by #508?. wasn't this closed by #508?. closed by #970?. closed by #970?. I guess this was fixed by #846, If https://github.com/lerna/lerna/issues/810#issuecomment-301781565 is a concern it could be logged separately in a different issue. I guess this was fixed by #846, If https://github.com/lerna/lerna/issues/810#issuecomment-301781565 is a concern it could be logged separately in a different issue. we are already passing LC_ALL=en-us to the test scripts to prevent this behavior (added in 2adab3c8b9d72f5a7fb8cc8bc4e8638529dd354a). I think this can be closed.. we are already passing LC_ALL=en-us to the test scripts to prevent this behavior (added in 2adab3c8b9d72f5a7fb8cc8bc4e8638529dd354a). I think this can be closed.. I guess this can be closed given #1026 is merged already. I guess this can be closed given #1026 is merged already. ya #1145 is a better fix thanks for checking. I left a comment in Slack w/ things I'd like to help so if that's interesting for the project count me in. then what if the user specifies a custom registry? https://registry.npmjs.org/ is default if there's no registry set iirc. \ud83d\udcaf much better, thanks. ok updated. ",
    "gre": "it would be great to be able to define the github repository in the lerna.json configuration and not only the gitRemote. when you work with the git flow, each developer will usually have a fork on his/her own repository. like org/project forked to gre/project . Some developer might not have named the upstream repository \"upstream\" so we can't do something really generic, however if we define the main repository, like github:org/project , lerna could check that the remote is the correct remote. (I guess maybe it might work if putting git@github.com:org/project as remote?). I wanted to port my project https://github.com/gre/gl-react to using lerna but also reached this problem. And I'm afraid switching to yarn does not seem to fix it.\nThis bug basically show up with these 3 packages I have:\n- cookbook: dep to gl-react & gl-react-dom\n- gl-react: no deps\n- gl-react-dom: peer deps to gl-react\nAfter a lerna bootstrap, cookbook correctly have node_modules/gl-react and node_modules/gl-react-dom but it's something that breaks from when resolving gl-react from inside gl-react-dom ( Module not found: 'gl-react' in $PROJROOT/packages/gl-react-dom/lib )\nso basically, yeah there is no node_modules/gl-react-dom/node_modules/gl-react because it's defined as a peer dep, by why isn't solved via node_modules/gl-react-dom ?\n(cookbook is a create-react-app bootstrapped project)\nI'm not sure what's a workaround but i'll probably have to not use lerna until it's fixed.. hoisting it does not seem to help my bug :'(. according to this code what you suggested should work, it uses library minimatch , see syntax: https://www.npmjs.com/package/minimatch. ",
    "paulyoung": "I'd love to be able to use this functionality. Is there anything I can do to help here?\n. This would be really useful. Please let me know if I can help in any way.\n. This is sorely needed! Anything I can do to help move this along?\n. A lerna watch command seems incredibly useful.\nI tried lerna exec -- npm run watch and it seemed to get stuck on the first package since the watch command doesn't exit.\nIn my case I would probably set \"prepublish\": \"npm run clean; npm run build\" and then run lerna watch 'src/**/*.js' prepublish.\nI'm currently manually building individual packages when I make changes so that other dependent packages can get the latest. This is sometimes several levels deep.\nIf there's a way to achieve the same thing without these changes, that would be great and I'd love to know how.\nPerhaps I'm missing something, but I'm afraid I don't at all follow why npm install was mentioned.\n. ",
    "acostaf": "Reopen please --scope is not working on \"lerna\": \"^3.4.0\"\nnpm run this \"build:dep\": \"lerna run --scope common build\"\nI get lerna ERR! EFILTER No packages remain after filtering [ 'common' ]\nmy Lerna file \n\"packages\": [\n    \"common\",\n...\n  ],\n. @evocateur common it is my own project, the script name exist but you are right about package name, I was calling the folder, thanks. ",
    "javamonn": "I think there's a separate issue here after playing around a bit more. Agreed that there should be opt-in to match npm@3 not installing peer dependencies by default, but due to how lerna links local packages - requiring the absolute path of the package rather than fully \"installing\" it within the node_modules of the package listing it as a dependency, the peer dependencies of the depended upon package can never be satisfied as it exists within a different directory tree - bootstrap installing peer dependencies by default makes sense. \nThis approach works for the majority of dependencies that can be duplicated but I'm currently having an issue with a package A that lists react as a peer, and a package B that lists react and package A as deps. \nAfter running bootstrap, package B breaks as react has been included twice. \nAfter running boostrap and pruning the installed  react from package A's node_modules, package B will break on requiring package A as it can't resolve the react dependency. This issue doesn't exist when doing a full npm install B within A.\nIs there a different build flow or organization I could use to get around this?\n. Ended up with a (hacky) working solution:\n1. add react, react-dom to top-level package dependencies\n2. npm install at top level\n3. lerna bootstrap to link everything together\n4. prune all installs of react and react-dom from submodule's node_modules with rm -rf ./packages/*/node_modules/react && rm -rf ./packages/*/node_modules/react-dom\nThis seems really fragile and I would love to hear any alternatives :)\n. ",
    "lukebatchelor": "@javamonn Thanks! You just saved us so much time trying to debug the same issue.\n@hzoo is there any reason that you create the npm install command by appending all the dependencies instead of just running npm install?\nhttps://github.com/lerna/lerna/blame/master/src/NpmUtilities.js#L9\nThis would ensure that Lerna behaves the same way as whatever version of npm the consumer is using (1 and 2 would install peerDependencies 3 wouldn't).\nTagging @nadiam84 for visibility.\nCheers \n. @ahfarmer That is literally exactly what I'm about to do.\n@gigabo FYI, I'm looking at setting this up in our CI and then pushing changes back to allow this. Is this still something you think we'd like in lerna? Do you have a preferred way of exposing functions?. Ah, apologies. I looked around and didnt see any issue titles that looked like this.\nI was talking to some people who've had similar issues with symlinks and npm install. I'm wondering if you had the same problems as them, caused by linking first, then npm installing. We are doing the linking after the install. \nI'll do some investigation and get back to you if I find a better way. Thanks!\n. If it helps, I'm looking at implementing option 1 tomorrow (#383).\nAs a work around before that I'm looking at writing a quick script that would essentially, get all the package names in the repo, find the ones not matched by the --scope glob, pass any that are left to\nlerna bootstrap --ignore {package-a,package-b,package-c}\nIt would still run the prepublish in each package matched by --scope and any dependant packages they link, but still a lot better than running the whole repo.\n. Just an update, #383 adds --scope support for bootstrap, if that helps \ud83d\udc4d \n. Just linking this here for completeness re: the quiet flag #133 \n. So, I'm looking at pulling in those changes but I want to keep the original authorship. I'm assuming the process is to add asini as a remote, pull its master and cherry pick the commits I want. \nHow will this work with the bin/asini.js change? That needs to be in bin/lerna.js obviously.. Do I just manually do that change for that file?\nAlso, which branch should I be branching from/merging to? 1.x or master?\nThanks \ud83d\udc4d \n. Got pulled away on a couple of things yesterday but looking at this today.\nI believe there might be an error in the asini implementation, could anyone verify this for me?\nhttps://github.com/asini/asini/pull/8/files#diff-b8678a10e51138ee78e70339fa5132f4L73\nSo, the logic for ignoring based on the config files was moved out of PublishCommand and BootstrapCommand and into the Repository class.\nexport default class Repository {\n  /** ... **/\n  buildPackageGraph({scope, ignore}) {\n    /** ... **/\n    if (this.constructor.name === \"BootstrapCommand\") {\n      ignore = ignore || this.bootstrapConfig.ignore;\n    }\n    if (this.constructor.name === \"PublishCommand\") {\n      ignore = ignore || this.publishConfig.ignore;\n    }\n    /** ... **/\n  }\n}\nIf I understand correctly, this.constructor.name will never be \"BootstrapCommand\" or \"PublishCommand\" because neither of them extend Repository, they extend Command.\nIs this correct?\nI've moved the logic for this into runPreparations of Command for now.\n. @gigabo Yea, thats what I've done. I wasnt sure what the \"right\" thing to do in terms of trying to keep the original authorship. :/\nI'm adding a bit more test coverage for this as well, accross the other commands, should be super easy to pull them into asini when its ready if you like. \ud83d\udc4d \n. Ah, I commented on #381 and didnt even think about it when I was doing #386, so these would be conflicting. I added --scope and --ignore support for bootstrap, exec, run, clean and ls to make them more consistent.\nAs the original ls command listed packages I would find it strange that ls [package] performed a different function. Do you think this could be a separate command? lerna deps [package] maybe?\nHappy to change my PR, I only need the bootstrap --scope support but the refactoring made it nice to deduplicate repeated logic and inconsistent handling.\n. I'm about to start work on #388 and the filterNonDependentPackages function looks like it will be super useful for that, so I'm probably going to merge this into that. \nI'm a little hesitant to do more work based on non-merged PRs but I think #384, #386, and #365 all look like they make sense, so hopefully are accepted\n. So, this was based on https://github.com/asini/asini/pull/8 which had some other changes not in Lerna which I've just realised came from #365. Lots of this was verbatim from the asini merge but there are a couple of differences from what was taken from #365. More than happy to help merge these two together in which ever order, just give me a yell. \ud83d\udc4d \n. @hzoo, @thejameskyle, Is there anything else I should do for this to get merged? I've got the next 3 days to be able to work on this pretty freely, and was hoping to do any iteration on this one, starting work merging it with #365 (my PR borrows quite a lot of the refactoring from that), and looking how we might do something with #388, probably/possibly using #384 \n. Rebased and refactored. Just hoping Appveyor decides to play nicely today... ...\n. @seansfkelley Wold you be able to do a quick review of this if you have time? \n. Ah, has to be an owner. Could you take a look when you're ready @thejameskyle ?. @thejameskyle Just bumping this again. When you're free, cheers!. @thejameskyle I've also updated the follow up to this #390 and that should be ready to go too.\nCheers \ud83c\udf7b . \ud83d\ude0e Should be ready @gigabo \nI merged master instead of rebasing, is that okay? Last time I rebased I had to fix each conflict of each commit manually for some reason. Didnt want to have to do that again for this and #390. \n(If anyone knows what I might be doing wrong, that would be great too!). I was leaning towards that too, but I think keeping it like this would give more flexibility. If you want to prepublish deps, you can, but if you just want to clean and rebuild/link one package as fast as possible, you can too. \nAlso makes sense from the semantics of --scope, \"perform acertain command in a specific package\". The only edge case is if your bootstrapping requires a package that you are building at the same time\n. Maybe it should warn if you are bootstrapping a package that relies on a package you are bootstrapping? \n. Opinion: Should --with-deps/--recursive/whatever throw an error if --scope matches more than one package? The logic for the order to bootstrap them will get pretty complicated and it seems like more of an edge case than the case where you are simply bootstrapping one package. The other way of looking at it is that it would make --scope's sematic meaning be a little less consistent  (--scope scopes a command to a set of packages matching a glob unless the --with-deps flag is set, the --with-deps flag is ignored if you don't pass the --scope flag, etc, etc). Just seems like it's making more exceptions to the rule.\nAnyone have any opinions? I'm leaning towards Throwing if it matches more than one, just because I feel like this covers the majority of use-cases.\n. Fair call on the Throwing, that was more to keep it consistent with the throwing from not matching anything. I think I agree there actually, there are probably cases where you want to generate your bootstrap command on the fly and you may well want to run bootstrap (or any command) and have it act on no packages.\nNot sure I agree on the UX in include-exclude-withdeps though. They seem pretty consistent in their meanings across all commands\n--scope - whitelist a command to packages that match this glob\n--ignore - blacklist a command against packges that match this glob\n--with-deps - (in bootstrap, only when used with scope and/or ignore) bootstrap dependencies even if they are not matched by the previous globs\nSeems pretty consistent, open to suggestions though.\n. Also, leaning towards --include-deps as the flag. I'm going with that for now but definitely open to suggestions.\nQuestion: does a flag with -- at the beginning imply it takes parameters? This one wouldnt.\nsh\nlerna bootstrap --scope \"package-a\" --include-deps\n. @noherczeg, not sure what you mean by that. This issue wasnt about how to pass args? It was a separate flag i wanted to add?\nThis issue should actually be closed too. I implemented it in #390.. Closes #388 \n. Question: Should this warn if using the --include-deps flag when not using --scope or --ignore? The resulting build will be identical, its just misusing a flag. Happy either way. \ud83d\udc4d\n. The second Adds docs for --include-deps flag in readme commit was to force appveyor to rebuild as it is strangely failing to install npm itself, still seems to be failing.\nAnyone have any idea why that might be? It says it's a permission error when trying to rename a file and to re-run it as an admin.\nEDIT: Ran a clean branch with no issues in appveyor -> no problem\nReran this branch a third time -> no problem.\nAppveyor seems to be a little flakey with npm 0.12\n. Playing with this a bit more locally, I'm wondering if this should also include dev dependencies? At the moment I just manually bootstrap those using the --scope flag because there isnt too many.\nAnyone have any opinions on this? Happy to add it.\n. I will definitely add the devDependencies at some point, its bitten me a few times using it locally now :P\n. @thejameskyle It's not for filtered deps though, it's for transitive deps. \n--include-transitive-deps maybe? Bit verbose, but I'm only going to wrap it in scripts anyway. I should hopefully have time to rebase, rename and add the dev dependencies this week/weekend.\n. --bootstrap-deps maybe? Shorter and more descriptive/less ambiguous\n. Happy to go with --include-filtered-deps. Tried to make the change today but I have a feeling im stuffing up this rebasing... Going to do it after #386 is merged so I can be sure this is right.\nSuper simple fix, just need to change the addDependencies function to use Object.assign({}, pkg.dependencies, pkg.devDependencies)\n. @gigabo Could you take  a look at this one as well when you have time?\nThis one is rebased on #386 and should be ready as well. It's pretty required to make #386 useful.\n. Super weird, I ~did~ rebase on #386 and double checked the git log to make sure they had the same commits. Updating now\n. Oops, sorry. Got pulled away yesterday, should be good to go @gigabo \n\ud83d\udc4d . @gigabo Could I get some eyes on this when you've got time? \ud83d\udc4d . @spudly it was changed to --include-filtered-deps recently. Do you think this could still have be confusing?. Sweet, well I'm happy with either as well. Personally I prefer deps because I spell dependency wrong approximately 100% of the time XD.\nI'll leave the call up to you @gigabo / @seansfkelley ?. Sorry for the delay! Just managed to get some time to do this. Will rename this morning.. @gigabo When you're ready \ud83d\udc4c . I was getting the same thing but only on 1 of 5 builds. As a workaround, I amended the previous commit and force pushed a couple of times and it worked eventually. \n. I'm actually not sure which command was running. I was running git cz so it's likely one of our validation scripts. Likely lerna exec -- npm ls >/dev/null.\nRepo is on Bitbucket and recently made private temporarily unfortunately. :/. Oh, let me check\n. https://github.com/atlassian/cz-lerna-changelog/blob/master/src/index.js#L12\nfunction getAllPackages () {\n  const packagesLocation = new Repository().packagesLocation;\n  return PackageUtilities.getPackages(packagesLocation);\n}\nHmm... So it's getting packagesLocation from the Repo, I would expect that would have been changed in the configurable packageLocations change? Still looks hardcodes here? \nhttps://github.com/lerna/lerna/blob/master/src/Repository.js#L19\nthis.rootPath = path.resolve(GitUtilities.getTopLevelDirectory());\n    this.lernaJsonLocation = path.join(this.rootPath, \"lerna.json\");\n    this.packageJsonLocation = path.join(this.rootPath, \"package.json\");\n    this.packagesLocation = path.join(this.rootPath, \"packages\"); // TODO: Kill this.. Ah, so the problem is the signature of getPackages changed.\nstatic getPackages(repository) {\nfrom\nstatic getPackages(packagesPath) {\nSo, false alarm the problem is in cz-lerna-chagelog, I'll get on that soon.\nThanks!. Yep, we cant be mad when we are relying on things that aren't API \u00af_(\u30c4)_/\u00af . Just wondering, is the advantage of this over bootstrap --scope that you don't attempt to install dependencies? \nI find that that doesnt really take too long, but maybe its a bigger issue for your repo.. Sweet! Will this be opt-in, or automatic? I recall someone here spiking something like this and having issues, so hoping this wont stop us from upgrading in the future (more hoping it just works and we can have the sweet speed increases). Lerna should also respect the private flag in your package.json\ne.g.\n{\n  \"name\": \"package-5\",\n  \"dependencies\": {\n    \"package-1\": \"^1.0.0\"\n  },\n  \"private\": true,\n  \"version\": \"1.0.0\"\n}. Interesting, I ran into this issue a while back and was getting very consistent failures. Tried playing with various combinations of yarn, lerna and node to see why this was happening. \nTried it again today and was seeing the same issue, but cleaned my yarn cache and suddenly everything is working\npackage|version\n----|----\nlerna|2.0.0-rc.4\nyarn| 0.20.3\nnode| 7.9.0\nyarn cache clean. That sounds like the intended behaviour to me, you wouldn't expect it to be placed in the node_modules of a package that doesn't have an implicit dependency on it right?\nIt will still be resolvable from within the packages though as normal resolution will keep walking up directories looking for a node_modules.. Opened #940 to fix this \ud83c\udf89 . Have rerun this and am running into issues in the integration tests in appveyor. Are there any known issues there?. Wow, thank you so much for the super quick responses!. The .configFlags is only set in Bootstrap right now. \n. An intended side effect of this change is that scope wont take precedence anymore. Is there any reason to take precedence when you could simply obey both and throw an error if they would result in no packages being selected? I don't think it would be a common use case to be using both at the same time, but this would make more sense to me.\n. (More than happy to change it though, just felt more consistent)\n. Yup, still throws the error. \nYea, a warning might be nice for that. If you were using both at the same time I imagine you must already know that they will have overlap (or you would have just used 1 right?), but it would still make sense from a logging point of view\n```\nScoping to packages that match \"package-1*\"\nIgnoring packages that match \"*-a\"\n1 package would have been scoped but is ignored:\n-- \"package-1-a\"\n```\n. @joscha It changed in this PR, hopefully. Looking through that convo, I don't see a reason you cant accept both flags (as in this PR) and throw an error if the result would return no packages. \nUseful for cases like\nsh\nnpm install --ignore-scripts && lerna bootstrap --scope \"ak*\" --ignore \"ak-editor*\"\n. You probably want to slice here so we always return a copy (as in the other filter functions)\n. Hmmm.. I liked the idea of pulling the filtering out of the commands just to make them consistent. Maybe these getters should each take optional { scope, ignore } flags?\n. Honestly it was done like this to match asini's PR (which originated from here), so I'd be happy for it to be either way\n. getScopedAndIgnoredPackages maybe? :/\nI'll have a think of a better name\n. Ah, I think my original intention was to remove the the scope from bootstrapConfig as it didnt exists previously and I wasnt sure if that was a deliberate choice or not. \nHappy to defer to the maintainers though, adding docs for scope here (I have a feeling it would be a rare usecase?) or removing the scope functionality I added here.\n. Just to make sure we're saying the same thing, scope wont override ignore in this case. They work together. Scope is a whitelist, ignore is a blacklist. If scope exists, then no other packages other than the ones in scope are included. If ignore exists, no packages matched by ignore will get included. \nSo, if you were matched by both, you would still get ignored.\n. For sure!\n. Cool, ended up doing exactly what you said and moved the responsibility in PackageUtilities and it only gets called in one place still (Command.js).\nMuch better!\n. Added \ud83d\udc4d \n. I think you might have read it wrong. It's just a ternary operator\nconst a = someFlag ? 1 : 2;\nSets a to 1 if someFlag is true and 2 if it's false.. Oh facepalm. ",
    "eranimo": "Any update on this? An option at least would be preferable to having to delete the peer deps manually\n. This would be great. I'm having trouble with the fact that Lerna doesn't use actual symlinks\n. ",
    "skidding": "Fixed in #318, shipped in 2.0.0-beta.29. Somebody close this.\n. before_install worked for me.\nbefore_install:\n  - curl -o- -L https://yarnpkg.com/install.sh | bash\n  - export PATH=$HOME/.yarn/bin:$PATH. @evocateur do you know of any reason why Lerna would publish files outside package.json#files? I'm experiencing this but only in some cases.\n\nfiles NOT including src\nsrc gets published\n\n\nAny pointer to how to debug this is very appreciated! Related: https://github.com/react-cosmos/react-cosmos/issues/611. A blog post on this would be great. Do you know any public repo that does something similar to get inspiration from? Thanks!. > It's a little odd that you consider it necessary to modify the main property like this in the first place. \nIt's a bit different. The main property is set to index.js. But inside index.js there are some require calls that point to either src or dist, transformed by a customed script. Same concept, though.\n\nSet to \"dist\" in the first place, it shouldn't need to change if you're properly building all the packages from the root.\n\nThe reason why paths point to src by default is for Flow types to... flow across packages in development, and for test coverage to be calculated properly from integration tests (locally and in CI).\nNot sure what you mean by \"properly building all the packages from the root\".. I worked around this constraint by publishing files exactly as they are versioned. The exact solution is specific to Cosmos and can be found here: https://github.com/react-cosmos/react-cosmos/pull/823\nIf it's not a desireable feature to \"allow publishing with uncommitted changes in working tree\" then feel free to close this issue. At the moment I'm good.. ",
    "bitliner": "@thejameskyle have a look at this article in case https://medium.com/@v/git-subtrees-a-tutorial-6ff568381844#.o0jw5ms0x\nI think it explains git sub tree quite well.\nOn my project I started using lerna + git subtree. I think some other week and I will be able to contribute and build something for lerna.  . @thejameskyle yes, you can: git subtree push --prefix=... origin master.\nWhy there should be conflicts? \nFor sure, using a wrapper provided by Lerna would help to manage things more carefully and properly.. @thejameskyle I think still git is essential, especially if child project are deployed using git hooks. Would yarn/lerna be able to manage git hooks? \nI would like to push only one child repository to its remote bare repository.. @F1lt3r I agree with you that a tool for  monorepo should help more by providing more automation (I actually have at least 20 packages, you can imagine how time it is in setting up the repo and push). I think the best idea would be to write a separate wrapper and then discuss if it is worth to integrating it into lerna.. @F1LT3R I was thinking more about a solution with git subtree. I am quite busy at the moment, feel free to create a repository, we could start from defining requirements and once we have them we could think of an implementation. . @scottmas I would also add or generalize that every company could have the need to outsource some development without sharing the whole codebase, for security purpose. \nSharing small part of the whole codebase would make outsourcing and collaboration much easier.\nI am actually using git-subtree in order to make the process smooth with external developers.\nAn issue is that commits should be rewritten, especially when pushing an internal module to an open source community. If you don't do so, you are going to publish sensitive information, contained in commits, and not referring to the subtree, that you might not want to expose to the outside world.\nGit-subtree does not expose this functionality by default, and git-filter might be required in order to fix the problem.\nIs there any other solution than git-filter in order to hide commits that do not refer to the specific subtree?. I would also add that: \n\ngit subtree commands are quite easy to manage/run - if you want to add a subproject, just use git-subtree directly\nthe only integration, that I see the need of, is with lerna publish, in order to automatically push the subtrees/subprojects too (otherwise I need to do that manually)\ngit-subtree push of a sub project has usually a problem - it is going to push also the commits that affect the files of other subprojects - making the history of that subproject a bit dirty - this would be something to address in case (by git filtering?)\n\nAnyone built so far a separate tool?. ",
    "F1LT3R": "I seem to have bumped into this issue myself: https://github.com/lerna/lerna/issues/457\nMy assumption was that Lerna would just work with multiple Node and Git repositories simultaneously. Is this not the case?\nThis being my first venture out into the world os monorepos (having been managing each npm package with it's own git repo previously), I am finding it very surprising that it would be handled another way.\nDo most monorepos really manage their projects without multiple git modules for each npm package?\nWouldn't lack of git submodule support, make debugging suites of tests suites across say... 50 npm modules, in CI a huge headache? I would have thought that the dev team would want notifications on a specific build failure for a specific component, rather than to have to dig through all running tests in an ecosystem. Perhaps that can be done anyway? Not sure I see how that would work.\n. Agreed @bitliner \nHard for me to understand why Lerna would have much trouble doing this. In my mind the git command would just run with the cwd being the package dir if it had a .git/ dir in, and Lerna would track the submodule hash.\nYour approach sounds good @bitliner but I suppose you would --ignore git with Lerna in that case?. @bitliner what is the advantage of subtree over submodules? (I've not used subtree)\nOver the last few days I hacked together a little tool to manage the project I'm working on. \nDemo: https://www.youtube.com/watch?v=IfnSDgQjTVw\nNPM: https://www.npmjs.com/package/robonaut\nPerhaps it's a demo of how I would have expected Lerna to work. This is the first time I've ventured into mono-repo world, and I think I see that I'm operating under a completely different paradigm than others (at least for the moment). . I can confirm when I remove the exception-test, lerna is able to bootstrap the project Ok.. So I think lerna's process that is running npm test is listening for all exceptions and failing out when encountering any. However, Travis is able to pass the build with this test, so perhaps lerna is missing a trick, or I have configured things incorrectly?\nHere is the test if it helps to add context:\n```javascript\nconst path = require('path');\nconst chai = require('chai');\nconst expect = chai.expect;\nconst argv = [null, null,\n    // Use the Markconf file from this spec directory\n    '-c', __dirname,\n    // Turn off the logger\n    '-l', 'OFF'\n];\ndescribe('empty Markconf', () => {\n    it('should fail to initialize', done => {\n        require('app/markserv')(argv)\n        .catch(err => {\n            // console.log(err);\n            expect(err).to.be.a('string');\n            const markconfPath = path.resolve(path.join(__dirname, 'Markconf.js'));\n            const errorMsg = \\u001b[33mNo plugins loaded!\\u001b[39m: \\u001b[34m\\u001b[4m${markconfPath}\\u001b[24m\\u001b[39m.;\n            expect(err).to.equal(errorMsg);\n            done();\n        });\n    });\n});\n```\nIn the process of running this code, my logging output uses console.error() so users can trace the stack when things fail.\nFrom the project logger:\njavascript\nconst error = (message, importDepth) => {\n    // This log to console is intentional as it will give a better stack trace\n    // than throwing an error on a native promise (bluebird)\n    const id = callerId.getData();\n    const err = new Error(message);\n    decorate('error', message, id, importDepth);\n    if (activeLevel !== 'FATAL' && activeLevel !== 'OFF') {\n        console.error(red(err.stack));\n    }\n};\nI specifically want to display an error here, and updating this code for lerna, while possible, is not desirable.\nAm I crazy here? It seems like Travis able to understand that a console.error is not a test failure, but lerna does not?\n. Good thoughts, I will try this.. I guess my thoughts on \"why run them?\" .. are .. I want to run tests before every publish to NPM.\nDoes this change using lerna, or is there just a better way to check tests before publishing to npm?. You were 100% correct btw @gigabo. :)  Wrapping npm test || true worked: (npm test || true). I suppose Travis was never testing with prepublish anyway, so I think my questions were irrelevant. Closing. Thanks for the help.. When I copied the code from my other repo, to packages, the .git dir came with. I guess that makes it a submodule.\nHow will Lerna update and push the markserv-cli repo for me if it's not a submodule?. All of them are submodules. That's the structure I'm using. I want each submodule to have it's own suite of tests and build on CI (Travis).. Got it. Thanks.. ",
    "rattrayalex": "Personally I'd love to see Lerna support git submodules (or subtrees). For example, easy access to babylon from within babel. . I use git submodules out of necessity. In case it's helpful to others, here's the script I've slapped together for releasing multiple libraries to npm simultaneously: https://github.com/lightscript/lightscript/blob/master/scripts/release.js\nIt has problems but still beats doing everything by hand.\nI basically only use lerna for updating versions and version dependencies, and for its \"lerna exec\" functionality.. ",
    "scottmas": "Another use case not mentioned here is cases where you want an internal company facing mono-repo to make code review, etc easier, but you just want the rest of the world to see the individual repos. \nFor example, Stripe.com has a ton of API libraries that each live in a separate repo and occasionally get PR's from community members. And it makes sense for each API library to have it's own github page for documentation and SEO purposes, etc. But if you were a Stripe employee, you probably would want to see all the individual repos all lumped together in one big mono repo. \nFWIW, I'm a fan of subtrees. The pushing and pulling works a lot more smoothly with my workflow. . Any update on this? We basically have been forced to roll our own Lerna and would like to use Lerna if possible. . It seems to me that an easy solution would be to just repurpose a package like concurrently which already provides task thread prefixing.\nAlthough I've looked at Lerna's code and this probably would require substantial reworking to rip out the custom spawn helpers and such. But if we got it working, it would be nice also because lerna run and lerna exec could have all the options available in the concurrently package, such as the handy --kill-others flag or --timestamp flag. \nI'm just an interested observer at this point. What are ya'lls thoughts?. --no-sort doesn't seem to fix every case. For instance I have 5 packages in my repo that implement a dev script. Only 2 of them run with --stream only but only 4 of the 5 run even with --stream --no-sort. Not sure what else I should do. The command in the offending package executes just fine when I run it manually. . Okay that makes sense. It seems a bit sub-optimal to me that to get sane \"watch\" behavior in any fair sized mono repo we need to implement three flags: --stream --no-sort --concurrency 9999. Having to specify concurrency limits doesn't make sense in a --watch context since the concurrency will always have to be equal or greater to the number of scripts. E.g. the concurrency has already been implicitly set by the developer by the number of packages implementing the command. \nSeems to me like it would be a good idea to roll all this behavior into a --watch flag or something of the like.. Or make --stream set concurrency to number of threads and set --no-sort? Also an option.. This bit me hard until I found this. The --stream flag seems almost worthless with the --no-sort option not set. . ",
    "l5x": "Ideally lerna should not manage git. The rationale is that git workflows tend to get quite complex over time and unique to the project. Personally I would like to see a hooks-like functionality that would enable integration with CI pipelines, git &c.. Publish failures do no return >0 exit codes either\nnpm ERR! \"You cannot publish over the previously published version 6.0.6.\" : @epiloque/weaver-test. ",
    "photusenigma": "I agree with @epiloque and others who say Lerna should not manage git.   That's not it's purpose.  \nI'd suggest we simply tell developers they need to figure out how to manage their code so that it presents to Lerna as \"monorepo-ish\" (even if it's not), and then close this ticket.\nI'll give my argument first, and a proposed solution (specifically for using git subtrees) immediately after.  The solution is one I've crafted for the team I'm currently working with, and so far it seems to work well!  \nNote: Near the end of my ramble here I'm including a link to an example github repo I've created that demonstrates the proposed solution...done without gulp/grunt or extra bash scripts.\nThe argument:\nMy take is that Lerna is (and should be) focused - specifically - on helping you manage your npm dependencies across projects/packages so large or complex solutions can be broken out into easier to manage parts...which become their own projects and packages.  \nIt's important to realize all developers will not want to take the same approach to how they bring projects together to make a working environment.  This is how it should be, and Lerna should not be restricting developers to do it a certain way.  Doing so will make Lerna less appealing to some developers who really need it's core competency.  \nOn the flip side...for the Lerna devs to try to figure out how to support a variety of source code management solutions and mono-repo management approaches is unwise.  I think it would be an unfortunate distraction from making Lerna great at what it does.\nI think Lerna is a great solution.  It's not too heavy handed, doesn't try to do too much.  Don't ask it to do more than it should.\nA proposed solution\nCompose a monorepo-ish solution. \nThis should not be Lerna's responsibility.   \nIt's relatively easy to use git subtrees to bring external code in as nested npm projects...in a manner that allows developers (or CI) to both push changes back to the remote project, and pull new changes from it if needed.\nFrom Lerna's perspective it will look like a monorepo.  From the developers perspective they will need to be aware that it's something pulled together from subtrees....so they need to be a bit more careful and intentional in how they commit code.  Also, they need to be aware that changes they might make in code pulled in as a git subtree will need to be pushed back up to the subtree origin - as appropriate.\nYes, It's a little more overhead, but you are asking to have a usable solution that is unquestionably more complex.  If you need to break out your solution this way, you should absolutely expect it not to require at least a little more oversight and managment...but it doesn't have to be unreasonable.\nI Recommend considering  git-subtree npm cli tool. \nHighly recommend it!    \nSeems to work well with Lerna, and I'm easily managing subtrees...either via a nice subtree.json file, or by using the commandline to add them (and the subtree.json is updated accordingly).\nIt's worth noting that I very rarely recommend npm repos with so few watchers/stars.  When I found the project it only had one each.  I'm fully aware the git-subtree project has nearly no traction (yet), but I expect it will soon...if something doesn't change elsewhere to address the same issue.  I think this is a great little and well encapsulated solution.  It does the job I was about to spend a couple days writing custom scripts for...and it does it well.\nThe example project I promised...\nHere's the example project I mentioned above.  It was created for demo purposes.  It's still being tweaked and extended, but I hope it's enough for you to understand how this approach works.   \nFeel free to copy to your hearts content!  \nhttps://github.com/photusenigma/multi-repo-multi-project-v2\nWorth noting...I've explored this concept a lot\nI have a lot of years developing front-end solutions like this.  There has been odd mixes of gulp/grunt scripts (..and before that - Ant!), and recently got to play with FormidableLabs builder and multibot.   I've never had such an elegant and beautiful solution, and...right now I can do it all without requiring any of those things!\nI've been watching Lerna since I first heard of it shortly after it became official.  I was watching what Babel team was doing before that...taking hints from some of the choices they made.   I'm extremely impressed by the fact something can be put together so simply using these tools these days!  \nIf it doesn't fit well with an architecture you've already adopted...that's a different matter.  That happens.  Sometimes you need to consider reworking the architecture to better leverage the right tools.  If done carefully and well....it's can be absolutely worth it.\n. Also looking for an update.  ?. I may have missed this, but is there there a clear and succinct outline of what is expected and hoped for of maintainers?  Is there any process to go through to be vetted?\nI'd be curious to understand a bit more about what duties and expectations might be...beyond the usual handling PRs, updating docs, and responding to ticket threads, etc..  \nI'm using Lerna in a couple relatively good size projects at the moment and really appreciate the features it brings to the table.  Was coming here to look at whether there were any tickets I might be able to take on when I noticed this thread. (sorry I didn't notice it sooner!) \nI'd be happy to help support and contribute to some extent, but would also be interested in helping also begin actively networking to seeing if we can't get a core group of few people to start splitting out the various responsibilities to make it more manageable for all.. ",
    "akfish": "In my case, one of my packages is a fork of another project and it is published as a npm package. I would expect it work on both sides: git submodules for keep track of upstream repo and lerna for managing npm packages.\nIMHO, this is not about managing git with lerna. What we need is for lerna not to break normal git workflow.. ",
    "NeoVance": "I keep seeing a theme...\n\nLerna is for managing npm dependencies. It should not be managing git repositories.\n\nIf that is the case, than it should be no problem to remove the opinionated code that requires lerna to work on a mono-git repo (otherwise throwing an error complaining about the existance of submodules), and allow it to work for those of us who would like to manage our repositories the way we want to (in my case using submodules). A submodule is just a directory with git repo initialized in it after all, and git has no problem tracking changes in submodules.. ",
    "laurentdesmet": "Sorry for the late response, at work we use PR #236 to bootstrap on Windows and this seems to work fine, so I suggest to test if the problem still exists with PR #236.\n. Indeed, somewhat related to #181: there an error is thrown because the stderr buffer is exceeded. In my case, it is the stdout buffer. exec will buffer the stdout and stderr channels of a process, where spawn will stream these channels. spawn is recommended if your child process emits a lot of data through stderr or stdout, see this article: http://www.hacksparrow.com/difference-between-spawn-and-exec-of-node-js-child_process.html. In this case, spawn would be more suited.\n. Is there a reason to set the stdio to ignore instead of inherit? Now, there is no visual feedback during the bootstrap command, that can take a while. The drawback is of course that the 'npm install' commands are executed in parallel, which causes the output to be interleaved...\n. I made a pull request that replaces child_process.spawn. Fixing PR #230 would also be a next step in having more robust Windows support.\n. Wow, I was looking for the difference between these two modules and I completely missed that... So I decided to take the one with the most downloads. Thanks for notifying!\n. I did test it quickly by hand on a Windows machine and it seemed to work, but there is still some work to do for all the tests to pass on Windows. I'll fix the tests for Windows in one of the following days. Adding a Windows CI build using appveyor as in #230 is the next step to verify this automatically.\n. I already made some progress making the tests pass on Windows using appveyor but I don't have access to a Windows machine right now, which makes testing difficult because of slow feedback cycles. I'll continue when I have access to a Windows machine where I can run the tests locally.\n. Ok, I will do this and continue testing\n. I could not find any free time to work on this but I'll continue working on this PR, the moment my schedule allows it\n. I pushed everything, definitely check #171 as @hzoo already mentioned here. It already contains a lot of work but I didn't check yet how much it is still up to date with the HEAD of the master branch.\n. I merged the changes into the master branch of my fork, locally on my machine (Mac) all the tests passed for all Node versions (also v0.10.46), but they did fail on Travis and AppVeyor. I should configure my Windows machine (which is not used for months now...) to test it locally on Windows. But because the tests where passing on your machine, it seems something AppVeyor related makes the test fail.\n. Ok, Travis tests do pass now (https://travis-ci.org/laurentdesmet/lerna/builds/144003698) but I didn't change anything, just made a separate branch. This nondeterministic test results are a little bit annoying... Gonna check if I can find the cause of them.\n. I found out why the 4th test failed on your machine. On line 265 of test/PublishCommand.js, \\n got replaced by EOL but this should remain \\n because this should have the same contents as the lerna.json. On Windows you have probably core.autocrlf set to true, which causes the file to have its line endings being converted to CRLF and that made test pass on your system.\n. If this PR gets merged, then #171 and #230 can also be closed because its work is merged in this PR.\n. Sorry for the lack of response, had some busy weeks. I rebased my master branch on top of the lerna:master branch. Node.js 0.10 and 0.12 are temporarily commented out now in the appveyor configuration file, I'll investigate this during the weekend because this lead to some problems if I remember well. Some other stuff I can help with?\n. aaa4cdb3e578353b75c4ce80349ce4bf0983fdb2 replaced alpha by canary, but I see no reason why, so I reverted this change. I also added the node versions 0.10, 1.12, 5 and 6 to the appveyor CI configuration file. \nI think there is one more thing we can do to polish the PR a little bit more: now we put os.EOL everywhere instead of \\n and I think that we could maybe replace it by something like normalize-newline so we can still use \\n instead of concatenating strings with the less readable os.EOL. I'll look into this during the weekend.\n. @gigabo I rebased this branch on top of master (that was updated with another two commits since your rebase) and it succeeds now. So no idea what the problem was, didn't check the changes from the last two commits on master.\n. First of all, nice work @rygine (and others that helped with this one), having support for deep-require within Lerna is awesome :-). At work we make heavily use of Lerna and lately we're experiencing performance problems (lerna bootstrap and webpack builds running slow) because we have a lot of packages with recurring/common packages (we're building a react/redux based application and this means every package depends on react, redux, redux-observable, etc.). \nI saw that this PR mentioned at some point an optimization where common dependencies (or all dependencies) of each package were moved to the root of the repo. What is the exact reason of not including this optimization? Because it would definitely be helpful for big Lerna projects (actually now, we're applying this strategy by removing commonly used dependencies from all the package.jsons dependencies before lerna bootstrap and adding them back afterwards). I'm aware of the problem with commands in the .bin folder, and #245, but are there other issues beside these that I'm missing?\n. Lerna is a library that is mostly used when you have a lot of packages to manage with a lot of dependencies between them. These kind of repos are the ones that need hoisted dependencies the most, so this is in favor of making it the default option. What are the technical reasons that you can't hoist the dependencies? I can think of dependencies that use the bin property of npm but what are other possible reasons?\n. Well, then this means that Lerna is not usable (without tweaking it yourself) for any project that uses singleton modules like React or where each package has a lot of dependencies (resulting in performance issues). Contradictory, these are the projects that need Lerna the most.\nThe result of this is that a lot of people that use Lerna, are adding little ad hoc scripts to make it work for them, resulting in a fragmentation. Or others will just give up and leave Lerna altogether. I'm not sure if that will help the project's long-term success.\nIsn't it then the lesser evil to provide such an option to hoist common dependencies?\nOr is it an option that we symlink common modules to some common folder in the root?\n. > > for any project that uses singleton modules like React\n\nThis is not true, we were able to use react across packages on https://github.com/cloudflare/cf-ui. Solve the problem where the problem exists don't push it down stream\n\nWell, then I'm curious about how you solved it :-). In a normal setting with npm3, npm would flatten everything for you so you end up with exactly one dependency on React (if the semver ranges allow it). But that's not what will happen with the default behavior of Lerna.\nBut if I understand you correctly, then you agree on the fact that there are problems to solve relating to performance and singleton modules, but that there are probably better ways than the 'hoisting' solution. Maybe we should rename this issue (or make a new one) to something more general to investigate what possible strategies can be used or provided to fix the performance and singleton issues that users are experiencing right now.\n. Btw, forget about my symlinking proposal, because that one doesn't help with the singleton problem.\n. I investigated lerna bootstrap --ignore but I thought that only applied\nto packages that are part of the Lerna repo.\n. This would close #334, like @thejameskyle already mentioned, if it's really ultrafast according to its marketing. I didn't test yarn yet, but I'm very excited to try it out \ud83d\ude03 .\n. Just tried it and I was blown away with the performance improvement. An npm install in the root of our company's monorepo managed by lerna went from 1m51s to 8s. This is amazing! I can't wait for scoped dependency support, together with support for yarn within lerna. Awesome job and lots of respect for the creators!\n. ",
    "Alxandr": "Any news on this? Will it be available for 2.0?. This has been sitting here for more than half a year with one comment and lots of positive reaction-emojis. Should this maybe be added to the new v2.0 milestone? Also, do you want someone to work on this?. @thejameskyle please do link the RFC here when it's complete :). That may very well be so, but I think the community you'd have to convince is rather huge ^^. Yeah, I got that. I was just joking :). Wouldn't it be better to try to locate npm by way of where npm (ie. scan $PATH). That way you would get the noe the user is using (unless they specifically ran another one).. Yargs actually support git-style sub-commands. The reason I tend to favor loading the commands (instead of spawning sub-processes) is the fact that you can flow context much better, because you can pass down stuff like the Project object from the Cli itself to a command, and it can just be part of the contract.. I'm on mobile and completely forgot the \"as far as I know\" part of that statement. I'm pretty sure I read it in the docs, but I might remember wrong, so sorry about that. I'll try to look it up tomorrow. . ",
    "NogsMPLS": "Okay, so, switching out cpr to fs-extra.copy got rid off all the 'file doesnt exist' errors and the weird Unexpected end of JSON input errors.\nNow it is consistently just these two specific UpdatedCommand tests that are failing:\n\nI'll continue working on it.\n. Yeah, might be a good idea. Real Life (TM) got in the way this week. I'll keep this on my list of things to come back around to though\n. oh didn't see it got out of date. I can bring is back up to date here if you want me to still\n. Ya i saw, but this actually fixes a windows issue, believe or not.\nBasically on windows commit message MUST be in double quotes, not single like it was before. So i turned ths string to have single on the outside so i could get double inside.\nIf you like i could change it to a es6 template literal string. But need to keep double quote around the commit message for windows compatability.\n. ",
    "giuseppeg": "@hzoo correct me if I am wrong but generally speaking existing packages already have a name (which may include a prefix). If one is importing babel-generator will lerna change the package name?\nEdit: nevermind, I read the code and now I understand what you mean.\nTo me packageName should be the folderName of the imported package not the package name itself (the name field in package.json):\njavascript\nthis.targetDir = \"packages/\" + externalRepoPath.split('/').filter(Boolean).pop()\nSo\nbash\n~/my-project/ $ lerna import ../generator\n~/my-project/ $ ls packages/\n  generator\n~/my-project/ $ cat packages/generator/package.json | grep name\n  \"name\": \"babel-generator\",\n~/my-project/ $\nThoughts? cc @gigabo @thejameskyle \n. This may be the worst idea ever \u2013 I am a npm noob \u2013 and may not work for everybody but...\nWhat if one extracts the shared dependencies and promotes them to root dependencies and then adds the root's node_modules/.bin to the PATH env variable?\nE.g.\njavascript\n// packages/pkg1/package.json\n\"dependencies\": {\n  \"lodash\": \"^4.0.0\",\n  \"babel\": \"6.0.0\"\n}\n// packages/pkg2/package.json\n\"dependencies\": {\n  \"lodash\": \"^4.0.0\",\n  \"babel\": \"5.0.0\"\n}\nbecomes\njavascript\n// package.json\n\"dependencies\": {\n  \"lodash\": \"^4.0.0\"\n}\n// packages/pkg1/package.json\n\"dependencies\": {\n  \"babel\": \"6.0.0\"\n}\n// packages/pkg2/package.json\n\"dependencies\": {\n  \"babel\": \"5.0.0\"\n}\n. @doug-wade are you sure about that?\nbash\n~/project/packages/my-pkg$ PATH=$PATH:../../node_modules/.bin npm run my-script\nworks for me i.e. it uses the local bin.\nNpm adds ./node_modules/.bin, I append ../../node_modules/.bin and if I remember correctly $PATH is read left to right\n. @gigabo that one is easy to fix :)\nWe may need to invoke git am with --reject or --3way, see:\nhttps://git-scm.com/docs/git-apply\nhttp://stackoverflow.com/questions/25846189/git-am-error-patch-does-not-apply\nUp to you to pick one.\nI'd also suggest that along with the error message we provide a link to either this issue or some docs that explain how to resolve the issue.\n. On a second thought maybe --reject would have been better for my specific use case (#251).\nWe don't get any message when entering 3 way merge mode or instruction on how to continue.\n@gigabo if you try to import suitcss-components-form lerna will return almost immediately leaving you in the middle of an am session. \nMost of the times people's first reaction would be wth, followed by git log and wth2, try lerna import a few times and eventually hopefully do git status and realise that they are in the middle of the am session.\nSpecific to my issue:\nWhen I am in 3 way merge mode there is nothing to be resolved and git am --continue nor git am --skip works for me. Did you manage to import that package by any chance?\n. by the way thanks for taking the time to fix this @gigabo \n. I wanted this targeted fix to get merged as quickly as possible to unblock you.\n<3\nYep, I cloned your suitcss-components-form repo and used that to test this patch. \ud83d\udc4d\nAlright, my first attempt failed maybe because of npm link or something.\nI managed to import the pkg now.\n. @arbesfeld hi, I put together a gross hack to reduce build time in CI\n. this block could be\njavascript\ntry {\n  fs.statSync(this.targetDir);\n} catch (e) { \n  return callback(new Error(`Target directory already exists \"${this.targetDir}\"`));\n}\nright?\n. now it imports to packages/<package-src-folder-name>\n. Oh right my bad, read the code again now.\nHow about \njavascript\ntry {\n  if (fs.statSync(this.targetDir)) {\n    return callback(new Error(`Target directory already exists \"${this.targetDir}\"`));\n  }\n} catch (e) { /* Pass */ }\nThis is a nit anyway :)\n. ",
    "dylang": "Would be helpful to have an api to get the array of package paths.. Hi @emirotin  -\nWhen using semver major.minor.patch, if major is 0 then any version change can be a breaking change, so ^ won't upgrade from 0.0.3 to 0.0.4.\nhttps://docs.npmjs.com/misc/semver\nCan you reproduce this problem with something like ^1.0.3 to see if it uses 1.0.3 from the registry instead of 1.0.4 from the local copy?\nI think I'm seeing this problem as well, so knowing I'm not alone will be helpful.. Skip that too then? . This lost the require.resolve, so it doesn't seem to work if rimraf is not in your path or a top-level dependency.. ",
    "kaicataldo": "Oh cool, can I work on this? Seems like a good first issue!\n. Consistent casing of \"Lerna\"\n. Made more sense to me to just have this be the command name casing - \"Ls\" for ls looks really weird o.O\n. My personal preference - can easily revert back\n. Diff got all weird - sorry :(\n. Let me know if this is too redundant. I like the idea of having this in each flag description because it makes it really clear this is for use with publish to someone who is looking up a command and only looks at this one flag descriptions.\n. Tried to remove redundancy here\n. Removed \"basically\" - I think it makes it more confusing\n. Other comments are lowercase\n. Same as https://github.com/lerna/lerna/pull/177/files#r65811177\n. Tried to have this be a more general description while still including the specific example\n. Error is thrown here\n. Passing in the logger so we can log when initializing the Git repo\n. That makes sense - thanks for the explanation!\n. ",
    "charlieschwabacher": "I was able to work around my issue by adding a dummy graphql package w/\npackage.json:\n{\n  \"private\": true,\n  \"name\": \"graphql\",\n  \"version\": \"0.6.0\"\n}\nand index.js:\nmodule.exports = require('../../node_modules/graphql');\nI would still love a cleaner solution, but this is at least a temporary fix.\n. @thejameskyle - why do you say we would have to use symlinks?\n. @thejameskyle what I mean is why symlinks here vs proxies for cross linking the local packages?\n. A test has failed on Travis - it passes locally for me and doesn't look related to these changes.  Have you seen that failure before / do you have any guidance?\n. Looks like tests re-ran, thanks \ud83d\udc4d \n. What is the reasoning behind the proxying vs symlinking the local packages?  It seems like createLinkedDependency could be updated to make the symlink instead of writing files.. I assume there was some issue w/ that that forced the proxying though?\n. ",
    "ingro": "I run in this issue as I have multiple packages that depends on react. I used @charlieschwabacher solution with a fake react package and it works, but I hope a backed-in solution will come in future!\n. Got the same problem here (using latest lerna and yarn), lerna hangs on install dependencies... If I force close the script I can only see this error in yarn-error.log:\nTrace: \n  Error: write EPIPE\n      at _errnoException (util.js:1024:11)\n      at Socket._writeGeneric (net.js:767:25)\n      at Socket._write (net.js:786:8)\n      at doWrite (_stream_writable.js:387:12)\n      at writeOrBuffer (_stream_writable.js:373:5)\n      at Socket.Writable.write (_stream_writable.js:290:11)\n      at Socket.write (net.js:704:40)\n      at ConsoleReporter._log (C:\\Users\\Emanuele\\AppData\\Roaming\\npm\\node_modules\\yarn\\lib\\cli.js:87213:17)\n      at ConsoleReporter.log (C:\\Users\\Emanuele\\AppData\\Roaming\\npm\\node_modules\\yarn\\lib\\cli.js:87200:10)\n      at ConsoleReporter.step (C:\\Users\\Emanuele\\AppData\\Roaming\\npm\\node_modules\\yarn\\lib\\cli.js:87146:10). ",
    "gmmorris": "Just came across this issue myself after a whole day of debugging a problem >_<\nI made a repo for reference and was about to open a new issue when I found this one (See here: https://github.com/gmmorris/potential-symbol-bug).\nI took a look at #334 and it's been locked but left open.\nIs this something anyone here thinks might be looked at again?\nIs it something worth me looking into with a potential pull request?\nI'm getting the feeling that if the maintainers have decided not to address on purpose, any pull request would probably get rejected, so just want to double check before I invest time into this.\nThanks for investing your time everyone, I love Lerna and appreciate the work everyone has put into it!. @gigabo My pleasure, thank you. :)\nI'll keep an eye on it. I've solved this manually for now, but obviously that's not a good long term solution.. ",
    "SandroMachado": "Any updates on this issue?. ",
    "abhishiv": "Maybe add an option to publishConfig? \n. I managed to bypass it by having a .npmrc in the repo root with access=public inside it. So I guess we can close this issue?\n. @sonyp does putting the following in your package.json help?\n\"publishConfig\": {\n    \"access\": \"public\"\n  }\n. ",
    "sonnyp": "looks like access=public in .npmrc doesn't work anymore not sure if it's due to an npm or lerna update\n. I just realized lerna now has scoped packages support. I'll check what is failing for us and open an issue.\n. My bad, all is right, I just had a bad dependency.\nLerna :metal: \n. ",
    "noherczeg": "This has been somewhat sort of covered in #507 right @gigabo ?. @evocateur Is this still relevant? If yes a check should go to Command.runValidations() right?. @lukebatchelor Since yargs is used internally in Lerna --scope \"package-a\" should be the same as if you would provide --scope=package-a, etc.. @lukebatchelor I was referring to this: \"Question: does a flag with -- at the beginning imply it takes parameters?\"\nAnd tried to point out that checking out yargs docs is the way to go. That's all. Oh and I didn't see the PR, so I thought that it's still an ongoing issue.. @vampolo Using --skip-git in combination with --skip-npm works better?. @natew I'm looking into this right now. BTW: currently (rc.4) errors out if you do not have git initialized and does not create a repo internally.. @evocateur I believe this has been fixed in #782. I'm trying to run publish as well, and got the same error.\nI'm using the locked mode. I made a tag, pushed commits afterwards, yet I still get this error.\nIt might be that I'm dumb, the docs are somewhat Chinese to  me as they are phrased now. Could you please give us (or update the readme) examples how to do the very first publish?\nI'm using 2.0.0-beta.31. @arekkas I'll try it out tonight, thanks!. @arekkas Nope, Fedora 25.. @arekkas It is, so I closed this one.. @doug-wade When should we expect an npm release containing this incredible addition? :). @gigabo I'm currently at 2.0.0-beta.36, ran npm run lerna bootstrap --hoist, and nothing changed. Every dependency is kept (dl-ed, and copied) at it's respective package. What am I missing?. @gigabo I'm not seeing a single warning during bootstrap. There might be a misunderstanding btw, what I practically meant is that \"hoisting does not work at all\". Have I missed some prerequisite, or it should just work if I run npm run lerna bootstrap --hoist?. @gigabo Yes, it was my bad, sorry :(\nIt does work, thank you!. I think that the npm version way should be used. link\nSo if you want a release like you said you could do something like this:\n\"scripts\": {\n  \"mypublish\": \"npm run lerna publish --yes --skip-npm\",\n  \"postmypublish\": \"git push && git push --tags\"\n}\nThis way you could run npm run mypublish, and I assume you'd get what you wanted. If this is sufficient then the docs should be updated letting the users know about git as well.. https://github.com/lerna/lerna#--force-publish-packages ?. @danielo515 I didn't wanted to be misleading, just wanted to help. Sorry that my suggestion didn't help :disappointed: . I might tackle this in the weekend. I'm expecting that the recovery of the original package.json file should be easiest part.  Not sure about the reverting. We'll see.. I believe lodash's forEach will be slower by a considerable amount. If the code shown is a performance critical piece I think it's not worth it.. Native forEach looks almost the same as the one in lodash yet they didn't use it when they wrote that code. Bringing in a util lib for a simple iteration increases coupling, and in the current case comes with a minuscule perf loss (which I agree should be barely noticeable).\nThe less dependencies a lib and it's modules have, the better (transitive doesn't count since third parties can remove them at any time, so it's not that great of a reason imho).\nP.S.: I love lodash, but not for tasks like this specifically :). @evocateur You mentioned dist-tag for this to apply to as well, but I fail to see what does that have to do with registries. Could you please elaborate on this?. @evocateur My bad. I checked the docs before my question, but failed to realize that this is not a git related \"tag\" (never made tags as aliases before). My last addition still does not include dist tag support, but I'll make it happen next evening.. Hey guys!\nI'm curious if you find my PR okay or is there anything I can make it better?. Webstorm  totally messed up my repo during conflict resolution, will create a proper one soon. Sorry for the inconvenience!. @evocateur I messed it up really bad, so I didn't wanted to risk losing anything, or creating corrupt commits (because I barely managed to keep track what happened where). . Strange since the code actually seems to have the proper message:\nhttps://github.com/lerna/lerna/blob/master/src/commands/RunCommand.js#L19\nWhich version are you using?. I tried to move peerDependencies to dependencies, and that didn't help.\nRemoving node_modules in each sub-module didn't help either.. @gigabo Could you ping me if the fix got released? :). @ivanov yesterday @gigabo told me that it is fixed in master. We just need to wait for it to arrive in the next release.. Yes it is, thanks @gigabo :). Thanks @evocateur ! :). This is also going on in our case, but only in a Dockerized container where the user is root. Could that have anything to do with this?. @stephenmathieson I think I have time to investigate a bit currently. So I'll write back if I found out anything worthy on this matter.. @evocateur This could be added to the FAQ docs right?. In response to #293. So the idea is that\nIf we ignore temp tagging then:\n- npmPublishAsPrerelease() should immediately set the proper tag value, and\n- npmUpdateAsLatest() should skip the updateTag() procedure which handles temp tag removal, and addition of the proper tags\nIf we did not ignore temp tagging then:\n- npmPublishAsPrerelease() will publish with the \"lerna-temp\" tag, while\n- npmUpdateAsLatest() will trigger the updateTag() procedure.... I also introduced the getDistTag() method which might be an overkill, so if you guys feel like it I could remove it. I made it because as it stands in the code I kind of needed something like that in multiple places.. @evocateur  I see. I'll close it then :). Define a script entry in the root with the lerna task and the --scopes?. @YellowKirby I will look into it in the evening, sorry for the inconvenience!. @evocateur I'll do the PR without it, and you can decide if you want it to be added to it or not, if it's okay.. Have you considered using https://github.com/lerna/lerna#exec with manual git push on your CI?. @evocateur Hope it'll be fine now :). @evocateur Sorry for the late response, I'll look into it!. In response to #645. I'm not sure about the current implementation though since it modified rootPath in the base class.. @szdavid92 Are you using the --hoist option? If not you could try it out, since it hoists all dependencies to the top therefore processes may be able to find deps. easier.. @Maxtream beta.38 did not have that feature yet. It's only present on master.\nAt least if I'm not mistaken, docs.. This is somewhat related to my current investigation regarding flag support exposure so I'll look into this while am at it.. I think I have a failing test for this. Seems like it really is something going on here.. @evocateur I think this could be closed given the PR is merged.. @evocateur I think this could be closed given the PR is merged.. Possible improvement could be the commandDir approach where the current bin/lerna.js mechanics could be abstracted away into an src/cli.js file.. It's also worth noting that .getAvailableOptions() used with destructuring does not provide any built in checks so if someone requests an option which is not \"registered\", then said option will be undefined!\nI would love to make the retrieval of options as strict as possible, so I welcome any suggestions regarding this matter!. @evocateur Thanks for the review, I'll go through all of them today!. This should not be merged until I provided integration tests for the lerna cli.. I've spent hours trying to figure out what is this folder mismatch thing going on without any results. I do like the new testing format, but to be honest I kind of feel like it has a bit more black magic to it than I'd like it to.\n@evocateur Could you give me some directions or suggestions what I'm doing wrong?. Snapshot Summary\n \u203a 1 obsolete snapshot found, run with `npm run integration -- -u` to remove them.\nTest Suites: 1 failed, 1 passed, 2 of 4 total\nTests:       1 failed, 4 passed, 5 total\nSnapshots:   8 passed, 8 total\nTime:        4.766s\nRan all test suites\nThats a new one. Strange since everything is ok at my end. Run -- -u locally but it didn't change a thing.. @shai32 If you utilze a \"parent package\" with lerna, you could try git submodules if you really want to go down this path. . I really wanted to help, but I can not think of anything else besides my previous useless PR. Event tests seem to prove that it should really work :(. @arcticShadow Oh, I only saw your commit. Didn't see a PR, that's why I jumped in as well.. @mAAdhaTTah We are having difficulties with Nexus3 and NPM as well. Sadly as days pass I'm getting more and more convinced that these tools are not complete yet.. This might overlap a bit with my work-in-progress flag handling PR in a way that if we follow yargs's arg patterns, flags and their negated versions come without any public breaking changes.\nBack when I introduced it I didn't follow this patterns so the \"skip-\" part won't fit in, but if the PR eventually gets merged in we might only want to consider the \"renaming\" of the current version to --no-temp-tag and flip temp-tag's default to true.. I'll check tomorrow if I create a \"temp-tag\" flag with a default value of false what will happen. In that case yargs should handle it as such and if someone would like to create the temp tag for some reason they can still use the --temp-tag flag to turn it on.. I'll check tomorrow if I create a \"temp-tag\" flag with a default value of false what will happen. In that case yargs should handle it as such and if someone would like to create the temp tag for some reason they can still use the --temp-tag flag to turn it on.. The change requires the testing toolkit to be modified/upped a bit so it'll take some time. Sorry for that.. Please provide a full error log with npm, node and lerna versions.. I'll grab this one soon\u2122. I'll grab this one soon\u2122. Sorry for the failing test, I didn't notice the path segment... I'll check out the linked issue as well while I'm at it.. @evocateur Your workaround is better than anything I can come up with. Unless the yargs team resolves the situation this should be fine.. Lerna runs the npm publish command internally. I believe it should work currently as-is.\nOn the other hand npm publish does not run version internally if I'm not mistaken.. Could this be a perf. improvement over the lately reported problem regarding hoisted bootstrap?. I need help with the wording of the new flag in the docs. I think @hzoo or @evocateur could help out with this. Not sure about keeping the old flag with a deprecation warning is needed either. I put it in just to not confuse devs already using said feature, but it could be removed.\nAlso need someone to check the updated test snapshots because I'm not 100% certain that everything is okay.. Well, I can't see a thing in the logs for the failing AppVeyor build... https://ci.appveyor.com/project/lerna/lerna/build/1.0.950/job/f4po1kc9kobxojtx\nEdit: @evocateur could you reboot it please?. What's up with AppVeyor? My PR #782 also crashed on Node4.. @yordis \n\"I would be great if in the deployment at least I could specify which folder to actually publish to npm\"\nYou can tell npm what folders/files to put inside a package via the files param. I never tried it for sub-directories, but if I got what you are aiming at this could be enough to solve the mentioned problem right?. I believe it expects a globbing pattern. If you look at the sources you can see a reference to the format:\nhttps://github.com/lerna/lerna/blob/master/src/commands/BootstrapCommand.js#L26. I'd try the or pattern with the carrets like it's described here: https://github.com/sindresorhus/globby#globbing-patterns. It pains me to say this, but I got burned out partially due to the fact that I got a team to manage, and the fact that I tried way too hard to catch up to the level of others in Git and NPM which would be required to achieve higher status than \"committer\".\nI think the project has to have a small amount of folks who are both experts at git, npm, and node as well. If this is a given, others can contribute. Lerna became more complicated as time went by, so it needs proper oversight.. @ntwb I think this will be a no issue after this gets released: #1225.. @millermatt This could go to a new type of doc under the doc folder. I'd say \"guides.md\". Would you like to create a PR for it? :). I just noticed that that exists after the PR, will swap it out!. I'll look into your suggestions, and work on them!. We are using Nexus, that's where the example came from. I understand your point about keeping it simple, therefore I will remove every other part besides registry from my PR. Mostly because nothing prevents us from keeping our upstream publishConfigs in the packages like they are currently :). Bad wording, will change it in the evening!. I put it there because I thought that since NPM is handling the publish process it'd be a good enough fit there. By \"making getTagOpts a function\" do you mean a global distinct function?. I checked it, and found that the run command does not get decorated yet. Could you guys give me some wisdom on this? Do we need it to be present on run-s as well? I'm not sure about it.. @evocateur Sorry, but I can not make the tests error out on me. Seems like I misunderstood how to do them properly so I need to evaluate again :(. Moved to runPreparations() so every command has access to it. I hope it does not count as an overkill :). Yeah, I missed that. Corrected in 0c6ac7e. I think creating a clone of the env as a base is a good thing in this case since we only need the extended params for tagging. If it's an overkill, or in fact a bad thing, please let me know!. @evocateur If I do that eslint won't pass.. Sure, will do in the evening!. @evocateur Sure, np! :) Glad I could help!. @evocateur You can close this if it is no longer necessary!. @evocateur I did that on purpose, since beforEach replaces process.env's value with the mock. It's just the syntax though, so you are right as well, doesn't matter that much.\nedit: NWM, you are totally right, it was indeed a mistake :). I'm kind of against plain constructor tests, so I didn't provide any. If you would like me to I can though!. @evocateur Could this (and the other new integration tests) be considered as a \"proof\" that the new Command and arg mechanics don't break existing functionality?. I wanted to use --temp-tag because yargs has a negate-fields feature where one could say --no-temp-tag and that would work better than --no-use-temp-tag.\nIf this isn't important I can switch to the one you requested.. Think I updated everything in #4ed5845, dunno why github isn't detecting it.. ~~I'm not sure I get what you are referring to :/ GitUtilities only has static methods, how would it have execOpts preloaded into it?~~\ni think I got it :)\n. All valid points, will update the PR ASAP!. I think I'm done with all your requests.. I'll update the PR in the evening. Thanks for the feedback!. ",
    "snarun": "I am looking for a similar solution to deal with scoped packages by using lerna. Any pointers? Appreciate your help!. ",
    "yaronyg": "Even having a notification of failure would be useful. It would at least tell the dev that there is a potential problem.\n. ",
    "bigtimebuddy": "Any updates on this PR? Would love to see it in?\n. Alternatively, you might consider using npm's dist-tag command for managing canary, beta, latest, legacy releases. Would allow a developer to npm install lerna@beta to grab the latest beta release.. Thank you @evocateur. We are now using Lerna with PixiJS for our upcoming major release as well as PixiJS Filters. Thanks again for proper semver!. You da man @evocateur! Thanks for the generous response. I think this is exactly what I need to get rolling. Will follow up if I have any issues. Closing.. In case anyone would be helped by this, the only change I made from the first example was that it wasn't obvious to me is that getPackages is async. My modified version looks kinda like this:\n```js\nconst batchPackages = require(\"@lerna/batch-packages\");\nconst filterPackages = require(\"@lerna/filter-packages\");\nconst { getPackages } = require(\"@lerna/project\");\nasync function getSortedPackages() {\n  const {scope, ignore} = require('minimist')(process.argv.slice(2));\n  const packages = await getPackages(__dirname);\n  // last boolean argument automatically filters out private packages\n  const filtered = filterPackages(packages, scope, ignore, false);\n  // you probably don't want a two-dimensional array, so flatten it\n  return batchPackages(filtered).reduce((arr, batch) => arr.concat(batch), []);\n}\n// Do all the rollup-y stuff here\nasync function main() {\n  const packages = await getSortedPackages();\n  return packages.map(pkg => {\n    // return rollup configuration here\n  });\n}\n// Rollup supports Promise as default export\nexport default main();\n```. ",
    "jstejada": "Any updates on this PR? Would love to see it in. ",
    "gtamas": "Would it be possible to reopen this issue?\nCould you at least add support for this as an optional feature (disabled by default)? For example, how about adding a command line flag? That way this wouldn't cause any issues and people could enable it whenever they need it.\n. ",
    "a-magdy": "For those who are still looking for a solution\nI pushed a lerna fork (w)ith (o)ptional (d)epdencies lerna-wod with the fix proposed in this PR\nIt is working for me locally but I had to use npx lerna-wod instead of lerna when I wanted to use it\nHope it helps. ",
    "MaxMilton": "Would have been nice to see this in the main package :cry: . Within your lerna repo the packages should be symlinked together once you lerna bootstrap so they're actually version independant \u2014 you get the current state of the files. It's in your external projects that you'll want to update the dep versions.. I'd love to see this implemented in a way that developers can choose which template to create with. Either a list of options to select from or maybe something like a lerna create --src <templateDir> flag?. Now that  think about it, I agree with you. Even though lerna does a lot, on of the appeals for me is the simplicity and straightforwardness.\nOnce I have some time I'll have a go at making something separate to create new packages.. ",
    "maciej-gurban": "Is there a reason why lerna clean would not also remove root level node_modules?. I'm on yarn 1.5.1 and lerna 2.9.1, with a fresh setup of lerna that uses yarn with workspaces. I stumbled upon this thread when running lerna bootstrap, which you say is not necessary. I wouldn't have known that if not for this issue, so perhaps it could be clarified in the docs.\nAs I understand, one should just use yarn instead? I've tried that, but this still will run and hang at lerna bootstrap:\nyarn install v1.5.1\n[1/4] \ud83d\udd0d  Resolving packages...\nsuccess Already up-to-date.\n$ lerna bootstrap\nlerna info version 2.9.1\nlerna info Bootstrapping 1 packages\n\u2e28\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2e29 \u2838 install dependencies: info Bootstrapping 1 packages. Could contributors of lerna provide some pointers where to look for a solution? Is anybody looking into it? Is it entirely Yarn's issue? Should we even expect any resolution from Lerna's side?. 1) I'm not, not explicitly anyway. Running yarn install executes lerna\nbootstrap automatically, logged output in my comment above.\n2) To be honest, I don't understand what does that mean - what needs to be\ndone exactly?\nOn Thu, Apr 19, 2018, 19:23 Daniel Stockman notifications@github.com\nwrote:\n\n\nIf you're using Yarn workspaces, do not use lerna bootstrap.\nIf you're using lerna bootstrap, do not use a root postinstall\n   lifecycle.\n\nIs there something ambiguous about these solutions?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/lerna/lerna/issues/1001#issuecomment-382797048, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ADfnGP8m4slqpjzxKlew36Bu_ZBFB0WOks5tqLn2gaJpZM4PHGJ3\n.\n. I was about to say that it's not, since I didn't remember adding a postinstall hook or doing anything custom, but I started from scratch by creating a new project and I can't reproduce the issue I had initially. It very well could be that I did something wrong when first setting up. Here's a repo that works for me with lerna@1.9.1 and yarn@1.5.1: https://github.com/maciej-gurban/lerna-with-yarn.\n\nAdding it here in case somebody else stumbles upon the same issue and needs to double-check their configuration. Thanks for all the help and patience!. ",
    "dmfenton": "@thejameskyle @gigabo Is there a way to default this setting using lerna.json? We're using lerna for closed-source code that we don't want to publish to NPM at all.\n. The first option makes the most sense. I don't see the use cases for the other two.\n. Hi @gigabo I've already PR'd it here: https://github.com/lerna/lerna/pull/425. the appveyor build fail is unrelated\nnpm ERR! Windows_NT 6.3.9600\nnpm ERR! argv \"C:\\\\Program Files (x86)\\\\nodejs\\\\\\\\node.exe\" \"C:\\\\Program Files (x86)\\\\nodejs\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js\" \"install\"\nnpm ERR! node v0.10.47\nnpm ERR! npm  v2.15.1\nnpm ERR! path C:\\Users\\appveyor\\AppData\\Roaming\\npm-cache\\lodash\\4.17.2\\package.tgz\nnpm ERR! code EPERM\nnpm ERR! errno 50\nnpm ERR! Error: EPERM, rename 'C:\\Users\\appveyor\\AppData\\Roaming\\npm-cache\\lodash\\4.17.2\\package.tgz'\nnpm ERR!  { [Error: EPERM, rename 'C:\\Users\\appveyor\\AppData\\Roaming\\npm-cache\\lodash\\4.17.2\\package.tgz']\nnpm ERR!   errno: 50,\nnpm ERR!   code: 'EPERM',\nnpm ERR!   path: 'C:\\\\Users\\\\appveyor\\\\AppData\\\\Roaming\\\\npm-cache\\\\lodash\\\\4.17.2\\\\package.tgz',\nnpm ERR!   parent: 'babel-cli' }\nnpm ERR! \nnpm ERR! Please try running this command again as root/Administrat. Rebased. I've found a workaround and the devs weren't happy with my solution so I won't be carrying this forward. You're welcome to adopt this PR, however.. I don't think we should get too fancy here. Specifying local packages as file:// removes ambiguity and is not a heavy burden for users.. bootstrapping would fail with an npm error as it should. I don't think it should be the job of this tool to detect whether someone has misconfigured their package.json. that link shows that local directories will be serialized to file: in the package.json. I suppose we could loosen whats there a bit to look for onlyfile:. That should work well.. This is a pretty reasonable and explanatory failure:\n```\n $ lerna bootstrap                                                                    [19:55:25]\nLerna v2.0.0-beta.30\nIndependent Versioning Mode\nBootstrapping 9 packages\nInstalling external dependencies\nErrored while running BootstrapCommand.execute\nnpm ERR! addLocal Could not install /Users//opendata-docker/opendata/packages/foobar\nnpm ERR! Darwin 16.1.0\nnpm ERR! argv \"/usr/local/Cellar/node/4.2.1/bin/node\" \"/usr/local/bin/npm\" \"install\" \"bootstrap-sass@file:../foobar\" \"ember-cli-deploy-slack@ember-cli-deploy/ember-cli-deploy-slack\"\nnpm ERR! node v4.2.1\nnpm ERR! npm  v3.7.0\nnpm ERR! path /Users//opendata-docker/opendata/packages/foobar\nnpm ERR! code ENOENT\nnpm ERR! errno -2\nnpm ERR! syscall open\nnpm ERR! enoent ENOENT: no such file or directory, open '/Users//opendata-docker/opendata/packages/foobar'\nnpm ERR! enoent ENOENT: no such file or directory, open '/Users//opendata-docker/opendata/packages/foobar'\nnpm ERR! enoent This is most likely not a problem with npm itself\nnpm ERR! enoent and is related to npm not being able to find a file.\nnpm ERR! enoent\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /Users//opendata-docker/opendata/packages/opendata-ui/npm-debug.log\nWaiting for 2 child processes to exit. CTRL-C to exit immediately.\n```. ",
    "jarrydfillmore": "Nice suggestion!\n. ",
    "wtgtybhertgeghgtwtg": "I know lerna isn't technically a Babel project, but maybe https://github.com/babel/babel/issues/5197 might help?. > I cannot run my tests unless I add quu to bar as a dev dependency which is not fine.\nMore than that; as of the latest release, it just seems to hang.\nIf you're using jest to test, you can get around this by mocking the dependency.\nroot\n| -- packages\n     | -- foo\n          | -- src\n               | -- index.js\n     | -- bar\n          | -- __mocks__\n               | -- foo.js\n          | -- __tests__\n               | -- test.js\n// foo.js\nexport {fooExport, maybeAnotherFooExport} from '../../foo/src';\n// test.js\njest.mock('foo');\n// Your tests here.\nAdmittedly, it's a hacky workaround.. I think you're right, they moved from callbacks to promises.  I'll update that in PromptUtilities.. It should be fixed.  However, PromptUtilities can't be tested.. I'll take it if nobody else wants it.\nFor the record, object-assign will still be in the dependency tree, at least until meow and object-assign-sorted update.\nThere's an issue for object-assigned-sorted.  meow just needs to push a new version to NPM.. I have it on autocomplete.. For the example above, unless there are hundreds of dependencies, any performance loss would have to be measured in microseconds.  I can't speak for anyone else, but I prefer simplicity over imperceivable performance.. It's not just for iteration, lodash.forEach is just something that can be done if lodash is used.\nI admit that it's not a strong argument, but it would still reduce the dependencies.. Possible PR: #562.  Only replaces packages, does not make use of lodash outside of that.  That can be done later, I guess.. Closed with #562.  I can move some Object.keys stuff to lodash methods if you want, but that's probably too opinionated for me to do unless somebody asks.. Shouldn't it be called package-manager instead of npm-client or something?. Does lerna specify the npm registry?  I think yarn tries to pull from its own registry, first.. @evocateur Wouldn't that still install the dependencies of packages in examples on bootstrap?\n@ben-eb That is probably the best solution.  Thank you.. > I wonder if conventional-changelog could be configured as an optional dependency, with appropriate documentation and error messages when one attempts to use the flag without the dep installed?\nWhat if there was a plug-in system for lerna, instead?. I have a lerna repo that heavily uses flow and I have never run into this issue.\nWhat I am running into is conventional-changelog-core breaking Flow due to a malformed test that they do not intend to fix.  It might help if lerna used something else.. Would it be possible to move the conventional stuff into another package, as well?. I can see that for initialize and execute, but it's a bit silly to check for an error code on an error when that code will always be 1.  For the most part, this suggestion is to stop appending the error code to the error and take out the\nexpect(err.exitCode).toBe(1);\nfrom the tests.. Is this worth the native dependency?. I worded that really poorly and misunderstood the use.\nIt depends on node-gyp and then spawns a process that may or may not use that.  But since it doesn't seem to use it itself and just provides it like NPM does, I don't think it'll be a concern outside of really rare edge cases.\nSorry.. ",
    "phpnode": "This is happening a lot for https://github.com/codemix/flow-runtime which uses lerna, tests fail randomly on travis (never locally) - kicking the tests off again usually fixes the issue but the bug is always related to being unable to find particular node modules, usually mocha. I wonder if this is a general issue with travis and symlinks. . the point @pluma is making is that the code which exists at 3.2.1 is and will forever be MIT licensed. However, nothing stops the project owner (or anyone else for that matter) from taking the code, slapping a new license on it and releasing it under that new license - it is perfectly possible for someone to fork an MIT licensed repo and release it as GPL and anyone which uses that version of the code must comply with the GPL, even though the original code remains MIT and free to use.\nThis is actually a major source of contention between (Open|Free|etc)BSD and Linux developers - GPL projects like Linux can and do take MIT/BSD licensed code, make changes then release those changes under the GPL, locking out the original developers.. @jamiebuilds i would personally appreciate some certainty around this, because if you're likely to release this under a patch version I now need to go through all my clients' repos to make sure they're using lock files, fixed versions or a fork. Not because my clients are Microsoft et al but because they have contractually approved lists of licenses that we can use and this license will not qualify. \n\nTo screw with companies that support ICE, was that not clear?\n\nThe intent is pretty clear, but the unfortunate side effect is that it also screws with many developers who use this tool. I know this wasn't your intention but it sucks if I have to spend my evening checking a bunch of old repos because you'll maybe release this as a patch. . dupe of #1628. ",
    "toastman": "Sorry, my bad\nI just miss that \"init\" should be used only from v2.0.0 \nEverything works as expected ))\n. Thanks, \ni just started reading/learning about lerna and it will be great to have some examples/tutorials because from the docs i can't really understand how to use it properly (\n. ",
    "bradleyayers": "@rygine thanks for the work on bootstrap-strategies! The link strategy worked well for me and it might be good enough for me until there's a blessed solution. What are the standard pitfalls of symlinking with node_modules?\n. I'm also hitting the problem with trying to use TypeScript because everything from package.json is stripped except name and main.\nI'm curious why real symlinks weren't/aren't a workable solution? Is there an issue specific to that that I can follow?\n. I propose we re-open this, as adding TypeScript basic support will be far easier than the nested directory support (which seems to have stalled for the moment). @zkochan's proposal is mostly good, but it doesn't cater for default exports, so instead the file should be:\nimport * as module from '/home/user/src/monorepo/packages/foo/index.d.ts';\nexport = module;\n. I've added a PR for this, keen to hear thoughts.\n. Have tried and can confirm it works for me! Thanks for pointing me in the right direction.\n. What's left to do on this before it's good to merge? FWIW I've tested it out and it works for me, and the strategy seems like a good balance of functionality and simplicity.\n. The only remaining issue I've come across related to this is that peerDependencies are installed once-per-package, rather than once globally. Turns out this is existing behaviour (#160) and this PR preserves that behaviour \u2014 so it seems fine to move forward with this.\nI did have some teething problems switching to this, but that was due to some bespoke scripts I had which manually created symlinks in node_modules and confused the logic in this PR. I wouldn't expect most people to do such things, and if they have they shouldn't be surprised by the problems.\n. I hit a new webpack bug using this pull request \u2014 https://github.com/webpack/webpack/issues/2952.\nWe were using require.context() to search for React Storybook files in all of our packages, and fell into the symlink cycle problem.\n. @gigabo no I wrote a webpack loader to do the same job, instead of using require.context()\n. The problem that I thought existed was a ghost. This PR looks all good and is ready for merge + release from my perspective.\n. Could you provide a bit more information about the structure of your project? It's surprising to me that you are having issues with babel.\n. It's curious to me that you wouldn't want cms-controls to be loaded via babel. In my project all packages use roughly the same conventions and are expected to be loaded in a similar way. \nI'm guessing cms-controls has a different webpack loader configuration, and luna's is not adequate to be able to load modules from cms-controls?\n. The way our repo is setup, is for all packages in /packages to be loaded by each other using the same webpack config for development, and then published to a dist/ directory separately for consuming via ES5. We make use of different package.json mains for this. You can use webpack to point src/index.js (ES6), and main to point to lib/index.js.\n. @AlastairTaft we have a few webpack outputs. In one of them we don't bundle any dependencies , instead we just declare dependencies in package.json, mark all of those as external in our webpack config, and let the consumer download those and bundle them however they wish.\nWe do produce other bundles that do include dependencies, and for those common dependencies are indeed duplicated.\n. Obsolete given #237 adds TypeScript support plus everything else!\n. This is a major pain-point for the repo I'm working in, and a link command would solve the problem. It would also be useful if bootstrap respected --scope.\n. In IDEA it's Ignore files and folders (no d in Ignore), perhaps the same in WebStorm?\n. I think we're missing a line here:\njavascript\npackageActions.push((cb) => FileSystemUtilities.rimraf(pkgDependencyLocation, cb));\nI had to add this line for it to work for me.\n. On the few lines above (of what you linked) we do:\njavascript\n// create package symlink\npackageActions.push((cb) => FileSystemUtilities.symlink(\n  dependencyLocation, pkgDependencyLocation, \"dir\", cb\n));\nI didn't step through to see if this is exactly where I get the EEXISTS OS error, but I assume it is. Does that seem plausible to you?\n. @rygine would you like me to open a pull request to this to add this?\n. Sure:\ngit clone git@bitbucket.org:atlassian/atlaskit.git\ncd atlaskit\ngit checkout 856a08d\nnpm install\n. Here's the error I get:\nLerna bootstrap...\nLerna v2.0.0-beta.26\nIndependent Versioning Mode\nBootstrapping 46 packages\nInstalling external dependencies\nSymlinking packages and binaries\nSymlink already exists for akutil-shared-styles dependency of ak-editor-bitbucket, but links to different location. Replacing with updated symlink...\nErrored while running BootstrapCommand.execute\nError: EEXIST: file already exists, symlink '/Users/brad/projects/atlaskit/packages/akutil-shared-styles' -> '/Users/brad/projects/atlaskit/packages/ak-editor-bitbucket/node_modules/akutil-shared-styles'\n    at Error (native)\n. What platform are you on?\n. I've git reset --hard to the latest commit, and am running against that and it works fine now! Perhaps I have a dodgy merge\u2026\nSorry for the confusion and goose chasing!\n. exectuting. exectuting. exectuting. It'd be nice to clarify the semantics of what updated means. Perhaps just add to this sentence:\n\nA package is considered \"updated\" using the same rules as lerna updated.. \n",
    "AlastairTaft": "I don't think it does respect private packages. I'm on lerna version \"2.0.0-beta.26\" and when I run lerna publish it tries to publish my private package.\n```\n? Are you sure you want to publish the above changes? Yes\nPublishing packages to npm...\nAttempting to retry publishing redacted...\nError: Command failed: cd /Users/redacted && npm publish --tag lerna-temp\nnpm ERR! Darwin 14.5.0\nnpm ERR! argv \"/usr/local/bin/node\" \"/usr/local/bin/npm\" \"publish\" \"--tag\" \"lerna-temp\"\nnpm ERR! node v6.2.1\nnpm ERR! npm  v3.9.3\nnpm ERR! This package has been marked as private\nnpm ERR! Remove the 'private' field from the package.json to publish it.\nnpm ERR! \nnpm ERR! If you need help, you may report this error at:\nnpm ERR!     https://github.com/npm/npm/issues\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /Users/redacted/npm-debug.log\nat ChildProcess.exithandler (child_process.js:207:12)\nat emitTwo (events.js:106:13)\nat ChildProcess.emit (events.js:191:7)\nat maybeClose (internal/child_process.js:852:16)\nat Process.ChildProcess._handle.onexit (internal/child_process.js:215:5)\n\n```\nAfter hitting this error I got in quite an awkward state of half published packages, that I had to manually resolve.\n. Ah excellent. i'll try that thanks.\n. When I made changes to my private package then ran lerna publish it seemed to respect it was private and gave the message.\nAlastairs-MacBook-Pro:REDACTED alastairtaft$ lerna publish\nLerna v2.0.0-beta.28\nCurrent version: 0.1.7\nChecking for updated packages...\nErrored while running PublishCommand.initialize\nError: No updated packages to publish.\n    at PublishCommand.initialize (/usr/local/lib/node_modules/lerna/lib/commands/PublishCommand.js:94:18)\n    at PublishCommand._attempt (/usr/local/lib/node_modules/lerna/lib/Command.js:161:21)\n    at PublishCommand.runCommand (/usr/local/lib/node_modules/lerna/lib/Command.js:145:12)\n    at PublishCommand.run (/usr/local/lib/node_modules/lerna/lib/Command.js:69:12)\n    at Object.<anonymous> (/usr/local/lib/node_modules/lerna/bin/lerna.js:58:11)\n    at Module._compile (module.js:541:32)\n    at Object.Module._extensions..js (module.js:550:10)\n    at Module.load (module.js:458:32)\n    at tryModuleLoad (module.js:417:12)\n    at Function.Module._load (module.js:409:3)\nSo I tried running with force to see if it would publish the others and ignore the private one and got exactly the same message, should of it published the others here?\nAlastairs-MacBook-Pro:REDACTED alastairtaft$ lerna publish --force-pubish=*\nLerna v2.0.0-beta.28\nCurrent version: 0.1.7\nChecking for updated packages...\nErrored while running PublishCommand.initialize\nError: No updated packages to publish.\n    at PublishCommand.initialize (/usr/local/lib/node_modules/lerna/lib/commands/PublishCommand.js:94:18)\nI then went and edited one of my none private packages and tried to publish again.\n```\nAlastairs-MacBook-Pro:REDACTED alastairtaft$ lerna publish\nLerna v2.0.0-beta.28\nCurrent version: 0.1.7\nChecking for updated packages...\n? Select a new version (currently 0.1.7) Patch (0.1.8)\nChanges:\n- @luna/redacted-non-private-package: 0.1.7 => 0.1.8\n- @luna/redacted-private-package: 0.1.7 => 0.1.8\n? Are you sure you want to publish the above changes? Yes\nPublishing packages to npm...\nPushing tags to git...\nTo https://github.com/redacted.git\n   9340a40..b3619a9  master -> master\nTo https://github.com/redacted.git\n * [new tag]         v0.1.8 -> v0.1.8\nSuccessfully published:\n - @luna/redacted-non-private-package@0.1.8\n - @luna/redacted-private-package@0.1.8\n```\nIt told me that my private package was published however npm view tells me otherwise.\n```\nnpm view @luna/redacted-private-package\n{ name: '@luna/redacted-private-package',\n  description: '',\n  'dist-tags': { latest: '0.1.7' },\n  versions: [ '0.1.6', '0.1.7' ],\n...\n```\nIt seems to respect not publishing the private package, however it shouldn't of told me that it had?\n. Thanks, I'm relatively new to lerna, that would explain it.\n. UPDATE: My comment below is solved by rygine's comment. \nJust ran into this, I loved lerna specifically because it didn't use symlinks. Symlinks make developing with webpack really hard, it'll start giving you annoying errors like Module not found: Error: Cannot resolve module 'babel' because the path of the package is now a level up from your project, this is caused by node's default behaviour of require using the physical path for symlinks which I think is wrong, see the issue here. Should keep the symlinked path. \nI guess I'm using lerna as an edge case as I like to use it as my main way of developing peer dependent packages to avoid the side effects of the above node 'require' issue. \nSo my main gripe is node's require which I don't think they will change, so I wanted a way to develop without using npm link. Node have a cli option to --preserve-symlinks which helps alleviate the problem, I opened an issue to turn this on permanently. Would be nice having a dev setup that doesn't require loads of custom configuration to get just right though.\n. So I have my website located in root/packages/luna. The webpack config inside this folder has a babel loader that looks like this\nes6\nloaders: [\n      {\n        test: /\\.jsx?$/, \n        loader: 'babel',\n        exclude: /node_modules/,\n      }\n      // ...\nNow I have another package as a dependency to luna in the folder root/packages/cms-controls. Webpack is now scanning this cms-controls folder because that exclude doesn't pick it up anymore because it's symlinked. I could avoid the problem by changing the exclude to exclude: /(node_modules|cms-controls)/ but that's not a nice solution.\n. All my third party packages are pre compiled with babel. So they have a src folder but then when I do npm publish everything gets babel'd into a lib folder (when developing npm start sets up a watch to do this). So anything consuming my package doesn't require babel it's just ES5.\n. I think even if I wanted it to be consumed by babel it wouldn't work because the error says it can't find babel now, because it's using the physical path not the symlinked path. So I don't think the problem is with how I've setup my package. I think? Could be wrong\n. @bradleyayers Assuming the dist contents for each package are generated with webpack, how would you handle peer dependencies, say you used React, would you ignore it from the bundle? That also got me wondering say if componentA and componentB both depended on packageA, you'd end up with packageA in both component bundles? So you'd inflate your final bundle size? \nI just use babel for third party components so it doesn't bundle the dependencies. I guess you could do that same with webpack by telling it to ignore bundling everything in the node_modules folder.\n@rygine Thanks for that, that seemed to work.\n. +1 for having this work by default. At the moment after I run bootstrap and then have to go through each package/node_modules and delete the peer dependencies.\n. @cchamberlain Can you expand on how you do that, particular when you say libs as factories? I'd love to know as I always have problems developing with React as a peer dependency. And I get a ton of problems around using npm link as require uses the physical path not the symlinked path, I know there's a cli option to avoid this but it doesn't work with webpack and browserify. \n. @cchamberlain That's a really nice idea. Thanks for taking the time to explain.\n. +1 for optional symlinking\n. Same error on Windows node v6.2.1\nI guess this is something to do with how the bin commands are setup on Windows that differs from Mac.\n. My workaround is I've just checked in the generated code, for now.\n. Yeah I think so\n. Yeah it's likely this isn't a lerna issue and possibly an npm issue. I'll see if I can set one up. Thanks.\n. I managed to avoid the issue by updating all my package versions to the same number. \nI had a couple of packages with version 0.12.0 whereas the latest was 0.12.2, this was due to a merge from a branch back into master where master had had a couple of publishes. This didn't cause me any issue on Mac but it did on Windows.\nI then hit this issue #504 but reverting to lerna beta30 side stepped that for me.. ",
    "calebmer": "What\u2019s the status on this?\n. ",
    "danvk": "@bradleyayers @zkochan do you have examples you can point to of using lerna in a TS monorepo? Would be great to have a template for setting this up.\n. ",
    "xogeny": "No news on this?  I see that #237 is merged, but does that also resolve this issue?. ",
    "markvincze": "Was this issue fixed?\nI'm not sure if it's the same thing or related, but I'm also struggling with a TS+lerna issue probably caused by symlinking, here is the issue with a compact repro: https://github.com/Microsoft/TypeScript/issues/20945. ",
    "malbernaz": "I took me a while to figure out how to solve this issue, so I'm dropping here the solution I've found that is to set moduleResolution to \"node\" in your tsconfig.json. Maybe it can help someone.. ",
    "Gum-Joe": "I have a packages directory, but not commited as it is empty.\nDo I have to put the package in my repo for development, instead of a separate repo?\nHere what I thought the process was:\n- Put package in a repo\n- Publish to npm\n- Add to lerna\n. I have a packages directory, but not commited as it is empty.\nDo I have to put the package in my repo for development, instead of a separate repo?\nHere what I thought the process was:\n- Put package in a repo\n- Publish to npm\n- Add to lerna\n. Got error -4058\n. Got error -4058\n. ",
    "ifiokjr": "I'm still seeing this issue within a new lerna based repo on Windows 7. \nlerna bootstrap fails for me. \n{\n  \"lerna\": \"2.0.0-beta.23\",\n  \"version\": \"0.0.0\"\n}\n. ",
    "bertho-zero": "I find this idea cool, is there news about that?. I was looking for a practical release manager, I finally turn to semantic-release in the hope that one day it will support lerna.\nThanks @evocateur. It's works with\nlerna publish --force-publish \"*\"\nbut not with\nlerna publish --force-publish *\nEdit: This is the shell that replaces the * with all the files in the current directory. I think that when you have versions that are satisfied by the semver, we can only update the package-lock.json or the yarn.lock. Why not with an option?\nAs if we were doing yarn upgrade package instead of yarn upgrade package@^1.0.1.. Why ? It updates the package in the semver's range without updating the package.json, which would avoid version spam while keeping the versions up to date, package-lock.json and yarn.lock too. It's a behavior like that we're looking for.. I have already read this thread and the reasons mentioned do not concern me in my case. This option is necessary and would not necessarily make my installation dirty.\nBy keeping the package-lock.json, yarn.lock and symbolic links up to date, I do not see any reason why my installation could be dirty.\nThe packages would all be up to date with dependencies that are also up to date, symbolic links updated as well, but not published versions just because one of these dependencies is updated with a patch version.\nIn addition package-lock.json, yarn.lock are ignored for dependencies, so in any case the last versions would be used if I just published a patch version of this dependency.\nThe only thing that could have concerned us in my company is the problem mentioned in the thread you just shared, which is: npm2 can have problems with deduping. But we do not use npm.\nIn my case, the only thing annoying is version spam, the choice could at least be left to the developers.. Changes:\n - @openagenda/activities: 2.0.12 => 2.0.13\n - @openagenda/activity-apps: 1.0.23 => 1.0.24\n - @openagenda/agenda-locations: 1.0.31 => 1.0.32\n - @openagenda/agendas: 1.0.13 => 1.0.14\n - @openagenda/bs-templates: 2.0.52 => 2.0.53\n - @openagenda/event-search: 1.1.24 => 1.1.25\n - @openagenda/events: 1.1.16 => 1.1.17\n - @openagenda/flat-exports: 1.1.14 => 1.1.15\n - @openagenda/form-schemas: 1.1.11 => 1.1.12\n - @openagenda/inbox-apps: 1.0.54 => 1.0.55\n - @openagenda/inboxes: 1.0.36 => 1.0.37\n - @openagenda/labels: 2.0.54 => 2.0.55\n - @openagenda/member-apps: 1.0.26 => 1.0.27\n - @openagenda/surveys: 1.1.22 => 1.1.23\n - @openagenda/translators: 1.0.5 => 1.0.6\nlerna publish create all these versions for only one small change in @openagenda/labels which actually only concerns one other repo, why would I be obliged to publish all these versions?\nA publication of @openagenda/labels and an update of the differents yarn.lock is sufficient in this case (if the @openagenda/labels version satisfies the differents package.json requirment).\nAs said in these comments (https://github.com/lerna/lerna/issues/706#issuecomment-288232324 & https://github.com/lerna/lerna/issues/706#issuecomment-288234225):\n\n\n\nwe had lots of pkgs and lots of dependencies where all of them were already using ^ so there was no reason to update all packages.\n\n\n\n\nWe never make major version bumps.. @evocateur In my case, there are only changes in @openagenda/labels, the next patch version will always be installed in the other packages with ^ in the package.json files and the lockfile upgraded, or the package linked.\n\n\n\nIf the package is in the package.json with a version that starts with ^ (\"@openagenda/labels\": \"^2.0.0\") then the patch version, if it exists, will be installed anyway (2.x.x -> 2.0.55).\nFor the transitive dependencies the lockfiles is not used.\nIf the version is voluntarily maintained at 2.0.54 without ^ in a package.json it is a choice.\n\nOne key detail about package-lock.json is that it cannot be published, and it will be ignored if found in any place other than the toplevel package.\n\nhttps://docs.npmjs.com/files/package-lock.json#description\nIn a project, if the lockfile is not updated then the latest version will not be installed and if it is updated the repo should be tested.\nIf a bug comes we can fix the version to the previous one and debug.\nIt is possible that only @openagenda/labels is updated.. How to use a custom preset? the -p option is used for an official preset but for a local config file you have to use the -n option of conventional-changelog.. @evocateur When I use the changelogPreset option with the value @openagenda/oa, it's works with:\n./node_modules/.bin/lerna publish\nBut the following command ignore my preset:\nlerna publish\nThe two lerna have the same version (2.9.0), @openagenda/oa is replaced by @openagenda/conventional-changelog-oa by conventional-changelog but not found/used by my global lerna.. No my preset is in my lerna monorepo, but I am in it (it's my current working directory).. Lerna should catch the rejection of the promise to display it more beautifully, we should not see a warning from node. Moreover, in future versions of node this will completely stop the script.\nOn my side I have an UnhandledPromiseRejectionWarning when I publish packages before doing a git pull, when pushing the git tags.. You can now use\nlerna publish --dangerously-only-publish-explicit-updates-this-is-a-custom-flag-for-babel-and-you-should-not-be-using-it-just-deal-with-more-packages-being-published-it-is-not-a-big-deal\n--only-explicit-updates flag has been removed. I would have used it in development, I'm doing a rm -rf **/node_modules instead.\nI thought I could use lerna clean and then make a fresh install only from package.json and lock files.. Lerna manage the root node_modules, I use yarn and its workspaces, that's why.\nAlmost all my packages are at the root.. For fix that I added this in my package.json:\njson\n\"scripts\": {\n  \"install\": \"lerna link\",\n  \"bs\": \"lerna bootstrap\",\n}\nSo I can run yarn, yarn bs or lerna bootstrap.. You can try to upgrade yarn.. Ok, I use the new workspaces config shape and it works fine with lerna.. The since option of the publish command does not seem to be passed to the conventional-changelog call.. The tests that doesn't pass are due to the\njs\nconst BLANK_LINE = os.EOL + os.EOL;\nProbably.... I see the same problem on the next branch (https://github.com/lerna/lerna/blob/master/core/conventional-commits/index.js#L59), that of the modules not found if we launch the global lerna. I say that without testing.\nI corrected the tests and replaced the Array with a Set, I wait to see if it goes (on Node 4 which could also be removed in 3 weeks). lerna publish --force-publish=templates,react-utils should publish only templates and react-utils, no ?. In the doc it is written This will skip the lerna updated check, I understand that if lerna skip the updated packages he should not want to publish them.\nSo there is no way to publish a package without ignoring a bunch (more than 30 packages)?\nWhen I choose to force the publication of packages I would like to publish only those ones, if I want to add the updated then I add the updated.. Ok I understand, maybe we could add an option that does that? I'm not the only one to request this and it is true that often when I publish a patch version it is not necessary to publish a patch version in all that depends on it.. I'm working on a project with an organization very similar to @bdwain.\nThis option would answer the need of a lot of people (e.g: https://github.com/lerna/lerna/issues/718), this is to improve the independent mode so that the packages can be really independent of each others.\nThe --respect-semvers option would only be available for independent mode.\nWith this option instead of automatically bumping all the dependencies of the updated packages one could propose to update them or not if the version of the updated package goes out of range in the dependency.\nThe main discomfort comes from here (for the independent mode with --respect-semvers option): https://github.com/lerna/lerna/blob/d40ffb776e3bda7c097931d28399f8c146368926/utils/collect-updates/collect-updates.js#L57-L58\nThe other change to add for the independent mode with the --respect-semvers option is to keep the lockfiles up-to-date, knowing that only the root lockfile is used, the lockfiles of dependencies are ignored by yarn and npm.. You can prevent these errors with eslint.. It's this plugin: https://github.com/benmosher/eslint-plugin-import. ",
    "ceanela": "@rygine Currently researching this right now, however I don't want to put the Gemfury key/credentials in the package.json (and git), I think I may be onto a way to publish this with the scoped package's registry being referenced in the .npmrc. Right now I'm getting failures saying I'm not an auth'd user\n\nPublishing private scoped packages to the npm registry\nTo publish a private scoped package to the npm registry, you must have an npm Private Modules account.\nYou can then publish the module with npm publish or npm publish --access restricted, and it will be present in the npm registry, with restricted access. You can then change the access permissions, if desired, with npm access or on the npmjs.com website.\n\nAlso:\n\n2. Registry-specific configs.\n\n\ud83e\udd14\n. @rygine Currently researching this right now, however I don't want to put the Gemfury key/credentials in the package.json (and git), I think I may be onto a way to publish this with the scoped package's registry being referenced in the .npmrc. Right now I'm getting failures saying I'm not an auth'd user\n\nPublishing private scoped packages to the npm registry\nTo publish a private scoped package to the npm registry, you must have an npm Private Modules account.\nYou can then publish the module with npm publish or npm publish --access restricted, and it will be present in the npm registry, with restricted access. You can then change the access permissions, if desired, with npm access or on the npmjs.com website.\n\nAlso:\n\n2. Registry-specific configs.\n\n\ud83e\udd14\n. @hzoo I don't think that this is easy as .npmrc configuration. I've already got the registry set to point to Gemfury, however Gemfury doesn't have a CouchDB interface, as expected of npm, so any requests fail. I think a PR for this would be easier, but that would require a change to lerna that I think we will have to discuss before I blindly submit a solution.\n. @thejameskyle Gemfury works differently than npm expects, unfortunately all of the solutions above fail. Gemfury has a basic process, packages are compressed with npm pack and then pushed to the server using the URL that has your account name and API key.\n. I agree. I've sent them an email to see if they would like to fix this.\n. Gemfury documentation now highlights support for npm publish closing this issue! \nAlso for future reference for anyone else, please keep your credentials out of your project's package.json or .npmrc so they stay private.\n. ",
    "markolofsen": "It's really easy if are you using special tool for publications.\nIt's works in your browser, without any special dependencies.\nTry this library for that https://github.com/markolofsen/how_to_upload_package_to_npm. ",
    "Daniel15": "String concatenation should actually be fine, Windows handles both \\ and\n/. There's probably some environmental assumptions made somewhere and\nit's just coincidentally working on common Linux systems.\nOne of the main advantages of using JavaScript is that it's cross platform,\nso it's silly for a Node library to only work on Linux (unless there's some\nnative component of course).\n\"-4058\" and \"ENOENT\" are both terrible error messages. It's unfortunate but\nNode.js is pretty well known for having unintelligible error messages.\nSent from my phone.\n. Just confirmed that Lerna v2.0.0-beta.19 works as expected.\nI'm not sure it's directly related to sync-exec though. I just tested with a standalone project and it works fine:\nvar syncExec = require('sync-exec');\nvar result = syncExec('dir');\nconsole.log('RESULT: ', result.stdout);\n```\nC:\\src\\testappwithjest  (testappwithjest@1.0.0)\n\u03bb node test.js\nRESULT:   Volume in drive C is Windows\n Volume Serial Number is C6A7-A39E\nDirectory of C:\\src\\testappwithjest\n.....\n```\nAdditionally, I'm on Node v4 so Lerna shouldn't even be using the sync-exec module. I wonder if it's some other change that was included in beta 20.\n. > Could it be that npm is a .bat or .cmd file on windows?\nYes, that's correct. npm is a .cmd file that calls node passing the right parameters. All Node.js scripts in the node_modules/.bin directory are also .cmd files on Windows.\n. Looks like win-spawn is deprecated and cross-spawn and cross-spawn-async  are the replacements. I imagine that'd work though, they even use npm in the example. :+1: \nIt really sucks that a core Node.js function isn't cross-platform. That's the entire point of a core library - to not have to worry about things like this. :(\n. Working with Jest for me now, thanks!\n. Thanks! Did you test this on Windows?\n. Yeah, junctions are only for directories. You can instead create hard links\nfor files. I don't think hard links require admin permissions.\nSent from my phone.\nOn Sep 26, 2016 12:53 PM, \"Moti Zilberman\" notifications@github.com wrote:\n\n@rygine https://github.com/rygine Quite right actually. Hmm. I've just\nnoticed Windows will create file junctions but then complain when\nthey're actually read as files (which I guess the tests don't do?)\nI suppose it's possible to emulate symlinked binaries on Windows by\nputting foo.cmd stubs in node_modules that forward to the real binaries.\nThis approach would involve more Windows-specific code, but it would remove\nthe requirement for Administrator privileges at bootstrap time. Happy to\ntry and develop this further if there's any interest.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/lerna/lerna/pull/348#issuecomment-249678385, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAFnHbG1xg8rI8E-9HgbiR8cpIyErpSUks5quCKygaJpZM4KGoiF\n.\n. Ahh, good catch!\nnpm has cmd-shim for this purpose, by the way - might make sense to reuse it.\n\nI think this approach would work. It seems reasonable to me. Rather than symlinking the \"binaries\", instead just generate new ones in the target location. They're simply small batch files and shell scripts that call Node with the correct arguments. It could execute the target script directly rather than navigating through a symlink.\n. Why was this closed with no comment?. I agree with the premise of this particular PR though... Since the license is a custom license rather than the regular MIT license, saying \"MIT\" might confuse automated systems that check licenses. Just removing the word \"MIT\" seems like a reasonable change?. > That means that in order to relicense, you either need to remove the contributions of the people who have not given EXPLICIT PERMISSION to relicense, or you need to reprogram the sections of code contributed by them.\n@orthecreedence - Generally, you only need permission to move to a more permissive license (for example, from GPL to MIT or BSD). The MIT license explicitly allows sublicensing, so redistributing code under a more restrictive license is allowed, without requiring permission from the original authors. In essence, you can consider a relicense as a fork of the original MIT-licensed version. This is also how Linux can use MIT-licensed code, even though Linux itself is GPL licensed (which is a more restrictive license than MIT). You just need to keep the MIT license text for the parts that were originally MIT licensed.\nWhat I'm not sure about is revoking contributions that were made under the MIT license. It's likely possible, I've just never seen it before so I don't have any prior experience with it.\n(I am not a laywer, and this is not legal advice). > To that end, I have created Lerna Log, a place to share patterns and explore the future of Lerna.\n@evocateur - This sounds great! Is it possible to host it directly on the Lerna site rather than on Medium? Medium have a paywall after you've read a few posts, which is pretty annoying \ud83d\ude15 . >  The paywall is only if the author opts into it explicitly for the story they are publishing, so this shouldn't be an issue.\nAhh, interesting.\nI still feel like it's better to own your own content, rather than some company hosting it on their domain. Anyways, I can create a separate issue for it \ud83d\ude03 . ",
    "Shany100": "git init first. \n. ",
    "davidfateh": "A commit prefix might be helpful for when a user wants to update a version but doesn't want to use the prompt... Let's say the dev makes a PR, updates a package version and simply wants to use Lerna to then publish that package after the PR (with version number) has been approved.\n. > I see, so you already updated the package.json version and want a way to use that, sounds ok to me\nThat seems to allow the dev to determine the individual package version while still utilizing lerna for its mass-publishing capabilities. This could help automate flows with build tools instead of having the build tools interface with the prompt (or some version of that).\n. I created a PR for --package-version. Please let me know if it makes sense for this project! I think it would help out greatly for what I would like to use Lerna for.\n. The idea is, when passed this flag, Lerna will assume the packages in project have the correct version already. I'm going to list some names that come to mind based on that idea.\n1. --use-package-versions\n2. --get-package-versions\n3. --imply-versions\n4. --imply-package-versions\nLet me know if any of these make sense; I'm open to suggestion here. If any more names come to me I'll comment again.\n. I am specifically looking to bypass the prompts and use the versions found within each package.json.\n. Sorry, I think I misinterpreted what you meant. \nTo me it seems like your suggestion would require a command to be run that would look something like lerna publish --version package and that would to what do what I'm proposing --package-version to do?\n. I see, sorry for the confusion. \nThat seems like a bigger dig to me. I wouldn't mind taking a crack at it but is this something that requires a bigger discussion?\n. @thejameskyle Sounds good! I will start on this soon as I'd like to see this functionality come to Lerna. Thanks for taking the time to review this and provide feedback.\n. Yeah I think that would get included. I forget (I'll look later) but I think canary would be needed for repo version no?\n. It looks like canary could be added as an argument to the --version command. \nAnd to clarify, it isn't needed for repo-version like my comment asks above.\n. I've created another PR with the updates that were suggested here.\nhttps://github.com/lerna/lerna/pull/262\n. I can remove canary from this option. To me canary makes more sense as its own flag and this PR might make the usage of canary more confusing since you can use it as its own flag here or as an argument passed to --update-version\n. Ok I've removed the canary option and fixed up the options description stuff.\n. --update-version now takes either package or a semver.\n--update-version 1.0.1 is the same as the now removed --repo-version 1.0.1\n. Thinking about this some more, we could change --update-version back to --repo-version so the change isn't breaking but I think the name would then not be completely accurate.\n. I'm willing to take another look at this and fix the merge conflicts.. @guscastro Let me look at it tonight. The PR is really out of date, but if it's easily salvageable I will update it and include your suggestion about the naming scheme. If not, I'll let you know, don't want to hold up progress for someone else!. I didn't get a change to look last night. If you think you can tackle it go ahead, otherwise I'm not sure when I'll get to it.. This could get condensed to:\njavascript\nconst [flag, flagArg] = flagParts;\n. Ok, I will change this.\n. My thought process was to explicitly declare the repo command. It can be changed though. We can simply say if the flag for --update-version isn't package then test it's a valid semver and move on with repo logic\n. ",
    "jameswomack": "I would also love for it to be configurable. It's a minor issue, but one that I'm happy to open a PR for. Having a directory with such a similar name to package.json makes semantic sense\u2014but makes ZSH autocomplete less effective. I use autocomplete to quickly open files in vim and package.json is one of the files I most frequently open with vim. I'm sure there are other better reasons to have it configurable too ;)\nIf I open a PR that allows a field folderName (or directoryName) in lerna.json to point to a directory that can be reached via Path.resolve(Path.basename(lernaJSON, folderName), is that something you might merge?\n. ",
    "sveisvei": "I think this is better solved with using symlinks (https://github.com/lerna/lerna/pull/237), so I will close this :).\n. I think lerna bootstrap now does linking, so it should be fine :).\n. Im super-keen on getting support for linked binaries(https://github.com/lerna/lerna/pull/192), as well as support for more than one entry/main file via symlinks.\nWhat is the blocker on this issue atm?\n. ",
    "arbesfeld": "Hi @sveisvei, I'm not sure if symlinks fixes this problem. On Heroku I have to run bootstrap before npm start to achieve the desired effect.\n. Thanks @sveisvei, symlinking does work for me, but lerna seems to do linking with relative paths.\nOn heroku I see the following symlink:\nfoo -> /tmp/build_3d04f79d2cd3d7f7b8320df7a1686d93/foo19b7aa6f936076ccad3a4cb4697ef777ba241c35/packages/@apphub:foo\nIs there a way to make the symlinking process use relative paths?\n. ",
    "JaapRood": "@arbesfeld did you resolve this at some point? I'm running into the same problem on Heroku and stuck with running lerna bootstrap as part of app runtime instead of compile time.. @gigabo that's exactly right. I don't have access to a windows machine with development environment, so I'll need help on that front, but I'll give it a go and see how far I get.. Hmm, Travis seems to run this pull request against the tests of beta 31 instead of beta 30 that this is based off. As I've added a newer commit than master, we can also no longer just pull in changes through the Github UI. @gigabo want me to rebase on current master and force push it?. And we're back in business :). @gigabo Appveyor gives us an answer to the question whether we need the windows conditional: we do. Upon passing the relative path to fs.symlink it seems to normalize it with the current working directory as the base, instead of the location of symlink. That makes sense: you need a base to resolve a relative path against. It seems that newer versions of node use it's destination, giving the correct behaviour, but >= 0.12 don't. . Well, that commit was embarrassing! \ud83d\ude02. @gigabo is there anything else I can do to make this happen?. The rest of the code deals with absolute paths, stemming all the way for the Repository instance created for each Command up to the PackageGraph. I imagine because they're a lot easier to work with and perform logic on. For example when comparing two relative paths to see if they point to the same location, you'll need the base of both of them in order to verify. I haven't read through all of the code, but past experience dealing with files like this would tell me that the way to perform actions on files correctly is by using resolved and absolute paths.\nAbout your worry of making something that was meant to be explicitly absolute and converting it to relative: Lerna is only touching symlinks to local dependencies and are fully expected to be managed by Lerna, with it removing and replacing anything that it doesn't expect there to be. Changes these local symlinks to be relative seems pretty safe to me.\nThat leaves whether it's a good idea to do this in the generic looking FileSystemUtilities.symlink, while all safeguards live in BootstrapCommand: I would have inlined it as part of the command, but then I would have done that with all of the FileSystemUtilities.symlink as it's behaviour is all specific to the bootstrapping of packages, not just a generic method. Instead, I went with how the code has been structured so far, as if written by the original author.. You're totally right, I must have misread that. For some reason I had it in my head that only 'junction' was ignored on other platforms, but it says all of them are. Makes total sense. I'll push a fix. . Fair point, with the removing of the type = 'dir' earlier on, the point of having this around is getting weaker. I've gotten in the habit of checking for absolute paths as passing a relative path to Path.relative has always left me a bit confused:\n```\n$ node\n\nconst path = require('path')\nundefined\npath.relative('/wooo/aaa', '/wooo/bbb')\n'../bbb'\npath.relative('/wooo/aaa', './bbb')\n'../../Users/jaaprood/sites/lerna/bbb'\n```\n\nHowever, earlier on I made the argument that we can always expect an absolute path, so in this case those worries don't really mean much. I'll remove it, saving a dep \ud83d\udc4d . ",
    "jdanyow": "will this be merged?\n. ",
    "seansfkelley": "Yup, looks like it works! \ud83d\udc4d \n@rygine that's correct, but the latest commit handles it properly.\n. @laurentdesmet I have a similar problem with Lerna + Webpack. I figured a neat way to solve it might be to have a Webpack resolver plugin that looks at the filesystem ancestors of a particular module when that module is required, checking if any ancestor has a package that fits the desired version range (preferring those closer to the root), and using that one instead. It wouldn't help install times, but it would reduce duplication/bloat in the final distributable. To my knowledge, such a plugin doesn't exist, but I've been mulling over how to make one.\n. @rygine when you were experiencing trouble in Webstorm, did you file a ticket on their tracker about it? I'm running into issues with Webstorm as well (https://youtrack.jetbrains.com/issue/WEB-23488#comment=27-1638599) and got myself into a bad state that's not clear if it's caused by circular symlinks or too many node_modules.\n. I did that too, but I use Typescript and that causes it's own host of problems. Time to switch to VS Code!\n. This isn't necessarily invalid -- I just ran into this issue in a Typescript-based project where the postinstall task is used to install typings in some of the packages. Given that I used Lerna to replace a silly cd-and-npm install script, among other things, it seems arguably useful.\nUntil then, I'm going to use lerna run postinstall, but it's kinda sad. :(\n. I'm using this locally with Webpack and it's working great. I don't have a loader that will read style and do the right thing, but if I (sigh) name my output file style.css to match the filename that this PR generates, it reads right through the @import and works perfectly.\n. @gigabo (tagging since you were on #312), looks like the AppVeyor build is failing with permissions errors. :(\n. I'm going to tentatively close this because I'm pretty sure #237 should solve the problem once it fixes the issue I mentioned in a comment over there.\n. Does this teach Lerna how to do anything with these package groups as a unit, or does it just allow you to split the \"global Lerna namespace\" across multiple directories? Example: if I have e.g. \"apps\" and \"modules\" as mentioned above, am I able to run things on only one glob, or do I still have to name packages in a way that --scope does what I want/name the npm scripts in a way that I can differentiate with lerna run?\n. What would be the semantics around different versions of the same dependency scattered around? If I have three packages that depend on foo at ^1.0.0, ^1.1.0 and ^2.0.0, how many versions of foo do I end up with and where are they? I'm assuming a copy of 1.1.0 since it satisfies the first two and one of 2.0.0, both hoisted. This seems to demand the need for some kind of extra-nested fake-node_modules (lerna_modules?) like lerna_modules/foo/1.1.0 and lerna_modules/foo/2.0.0.\n. Given that #358 adds a bunch more stuff to bootstrapping, and that I really do only need the linking behavior to cover my use-case, I'm thinking that a specific link command is the right way to go. Pre/post-installing and prepublishing can be just as time-consuming and useless as installing (if you, like me, use prepublish to transpile stuff).\n. FWIW, I ended up doing option (4) in yerna (my smaller, Yarn-based Lerna-like). . The AppVeyor build failure with (transient?) permissions issues, but I'm not sure how to retrigger.\n. ping @hzoo @thejameskyle, thoughts?\n. @hzoo / @thejameskyle thoughts? Having this behavior would make my life a lot easier for my Typescript-based project.\n. Thanks for merging!\n. This shouldn't be too different from what you do when you publish -- if you require foo/bar, you need to have bar.js as a direct child of the foo directory. The downside is that this means you have to scatter compiled files all over your source tree while you dev it. I used to use these nested imports, but now I just plop everything into index.js and use destructuring imports (as in your examples) to fetch what I need. You can also use nested destructuring, though it can get unreadable.\n. I wrote a stripped down version of Lerna built upon Yarn, and it was worth every minute. I only ever used bootstrap, run and exec, so this was a pretty easy task: the basic trick is to wrap every Yarn command in a task that mangles the package.json to remove local package names, runs the task, then unmangles it. There are a few subtleties along the way (e.g. make sure you keep any changes that Yarn applies to the package.json), but despite all the hacks it's quite stable. Stable enough that I committed to using it for production builds. \nI would much prefer Lerna-in-Yarn, but this has already improved build stability and devex considerably. The code's not great, but if there's interest I may clean it up to release it as an interim solution. . @cpojer sounds worthwhile. I'm unclear, from the one brief linked comment, how much of Lerna is expected to make it into Yarn. There are a number of Lerna features I ported that are a must for managing a monorepo, though may drag Yarn away from it's apparent mission as a mostly-just-npm replacement. Can you clarify any further on the current thinking here?. Sounds reasonable! I'll try to work on cleaning it up over break and then I can present it here as a citable example.. Alright, I finally got around to doing this! You can find it at https://github.com/palantir/yerna. Be warned, the code is pretty sloppy in places.. The short answer to your question is \"not really\". The docs include some details on why I went to the bother of making something from scratch, but to call out the parts immediately relevant here, it's unfortunately not a simple drop-in:\n\nLerna was free to make all kinds of symlinks and npm would happily chug along ignoring them. Yarn, in its strictness, will clear out these symlinks and will attempt to download packages that we know to be local-only.\n\nWhich leads to gross hacks, and then after a certain point I just decided to double up and use Yerna to implement some flags I really, really need for my work (along with some other miscellaneous features).\nI don't plan to change Yerna (or Lerna, or Yarn) significantly in the foreseeable future, mostly because I'm a bit burnt out on this whole thing (and it's no secret that I have been frustrated with the pace of development on Lerna). However, you are more than welcome (encouraged, even!) to rip ideas right from Yerna for Lerna and/or Yarn.. AppVeyor's 0.10 build failed with permissions issues, per usual...\n. Hey @hzoo / @thejameskyle, this is a pretty bad bug to leave lying around. Can this (and hopefully #373 too) get merged sooner rather than later?\n. Thank you!\n. I hadn't thought of that, but yeah, I think that's the right thing to do. Will take another look Thursday.\n. @thejameskyle finally got around to making those changes.. CLI flag parsing is done with meow, which delegates to minimist, which understands -- to mean \"rest\", so it works (though is undocumented) if you try\nlerna exec -- ls -la\nI just tried this on beta.29 and it works as expected. It should probably be mentioned in the docs, though.\n. Actually it is documented, I just was too sleepy when I wrote this response to notice. So you can close it.\n. This already exists in Asini if you want to port it from there, or just switch to using it.\n. How? I'm curious. It seems like a pretty straightforward change to promote the scope/ignore resolution to the top level and have everything inherit from it.\n. @hzoo / @thejameskyle can we merge this? Working around/waiting for prepublishing the entire world is making me sad. :(\n. The semantics of --scope with bootstrap seem to get a bit weird. Perhaps bootstrap should automatically bootstrap all dependencies even if they're \"out of scope\"? It's less consistent, but probably more what the user expects. Not a great solution, though.\n. Yeah, that also seems reasonable. \n. I would definitely not throw. The semantics of including the transient dependencies are well-defined, and throwing should be reserved for exceptional circumstances where you really cannot proceed (indeed, I think that Lerna throwing when nothing matches scope is bad UX).\nThat said, while we're talking about UX, the include-exclude-include (scope-ignore-with-deps) behavior itself is a bit weird to begin with.\n. http://serverfault.com/a/387938\n. Another thought on this topic (hopefully not derailing the PR too much in the process): I think this would be really valuable for all tasks to have, much like your filtering changes. Use case: lerna run build --scope foo --toposort --include-filtered-deps. Combined with #412, which I hope I get to today, this would allow me to rebuild foo and all of its dependencies in one shot in the right order (I have a Typescript project, so ordering matters, but a full rebuild of dependencies should be useful for non-Typescript projects too). This is very powerful, and likely has other usages that I haven't though of as well.  . I'm with @spudly on this: better to be entirely explicit, since it doesn't save many keystrokes that often anyway (so: --include-filtered-dependencies). Full disclosure: I was also thinking about an --include-(filtered?)-dependents flag (reason being that from my previous comment, it would be awesome to be able to automatically select dependents of my package for rebuilding to make sure things aren't broken). . Everyone seems to be ambivalent, so I would err on the side of being explicit and just make it wordier. Reasonable?. Thanks for answering, and thanks for going through the PRs! I figured you just had a lot on your plate, which is why I waited for a while before filing this. I don't demand immediate reviewing and/or merging, just some kind of acknowledgement or delegation to others; there are a couple features that I really need that seem to have reasonable implementations, and seeing them just idle for weeks or months with no news was frustrating. Anyway, thanks again for putting some time into it today, and I'll go take a look at your responses now.\n. What is the expectation going forward for feature requests? There are workarounds, but workarounds still suck and I have some helpful features in mind I want to tackle, but can't/won't until earlier prerequisite features exist.. The one I'm eyeing in particular is https://github.com/lerna/lerna/issues/341, but I didn't want to start on it until https://github.com/lerna/lerna/issues/386 and https://github.com/lerna/lerna/pull/412 were accepted, since the path I was going to take to implement it was to rename bootstrap to link and strip the script-running, then reimplement bootstrap by delegating to a combination of link + run.\nEdit: but to explain my above comment further: the wording of your comment implies that feature requests or featureful PRs are not going to get much attention, so I wanted to clarify if that was indeed the case. While Lerna works for me now, there are definitely non-bugfix improvements that would make my life considerably easier.. Permissions errors on the AppVeyor build per usual. \ud83d\ude1e . This probably clashes awkwardly with #386; I would prefer that one get merged first and then I'll update this as appropriate.. @gigabo updated!. @gigabo it should be good to go now.. Okay, changed (a bit wordier but more precise). . @doug-wade done!. This will also help prevent OOMing issues, if the tasks being run generate a large amount of output.. Unconditionally using spawn over exec can also fix https://github.com/lerna/lerna/issues/278 more permanently while simplifying the code. I'm not sure what benefit using exec has when you're already using spawn, so seems worth a shot?\nHow does this + watching interact with lerna-debug.log? Do you have to hold onto a copy of all the output in memory so you only dump to disk on failure? Seems like a great way to OOM the node process (which I already ran into in https://github.com/lerna/lerna/pull/372, where I worked around it by somewhat hackily truncating lengthy log lines).. I OOMed the node process during #372 by turning up the logging -- some of those log lines are huuuuge. I opted for truncation as a consistent, albeit subpar solution. Turning it off during testing is probably just a good idea regardless, and undoing the truncating behavior would be a good call. \nPossible solution for lerna-debug.log: tail logs to a file in /tmp, then move the file into cwd on failure (and delete on success). \nFWIW, in the tool I alluded to in this comment (which I have not yet extracted for others to see...), I just hold onto stderr/stdout for each child process and dump it once that child exits to prevent confusing interleaving. This should address the objective of this ticket without resulting in confusing output, though obviously does not work with watching. . Good point re: the link name. I suppose that's why bootstrap is called that, rather than install. The goal of this command is just to link, so any hypothetical flags to bootstrap would (for my use case, at least) also have to prevent installation as well as script-running. With 122 packages in my repo as of this writing, it takes while a while to npm to hit the filesystem and check that everything is in a good state. Symlinking alone takes less than a second. I figured that was a large enough behavioral difference to justify a new command, even if said command overlaps in behavior with bootstrap.\nI'm open to suggestions; I just submitted this PR because this is the solution that would work for me and has a reasonable implementation right now.. @lukebatchelor that is precisely the issue, and yeah, I have a pretty large repo such that npm slamming the file system becomes obnoxiously slow. I think bootstrap actually does a reasonable thing and would prefer that the link command didn't have to exist (indeed, while I included a link command in Yerna, I almost never actually use it because install/bootstrap is fast and deterministic).\nThat said, I don't have the bandwidth to carry this through and since I don't use Lerna anymore, I don't want to add unnecessary complications/support burden, so I'm going to close this PR.. Never seen that before. Perhaps something changed such that the synchronous setup code before runCommand is throwing?. This can probably be rolled into #412. . Yeah, \"dry run\" is also a good way to think about it.\nI just finished filing a couple tickets with the features I found most valuable in Yerna that Lerna was lacking (it doubled as an experimenting ground for some features I really wanted). I have noticed the pace of development picking up! I'm happy to see that, but unfortunately I don't have the bandwidth to contribute more than these discussion tickets/reference implementations, which I do sincerely hope are useful!. Yeah, exactly.. Looks like!. --include-filtered-dependencies does it in Command.js, which you should be able to as well.. FWIW, I always commit my lockfiles. The mild inconvenience of having to have approximately the same yarn version across devs' machines is far outweighed by never having to worry about an entire class of bugs. Said inconvenience really amounts to \"oops, my lockfile changed, guess it's time to update yarn again\" at worst.. Ping also @hzoo @gigabo @noherczeg @joscha @wtgtybhertgeghgtwtg @jezzay @rygine (those contributors higher on the list than I) in case you aren't aware and would like to do the same.. IA(also)NAL.\nWhat I had intended was \"remove entirely or rewrite from scratch\" such that the code was definitely no longer mine. This is under the assumption that a simple history/blame change to remove my name would be insufficient to make it no longer \"my code\" (as it would certainly feel, from my perspective) and would potentially violate the terms under which I contributed the code.\nI am accepting the offer that was presented to me by @kittens as:\n\nyour contributions are either removed or rewritten to remove attribution.\n\n\"Remove attribution\" seems to suggest that changing the name is all that was offered, which is unfortunate.. Since you're offering, I'd prefer those commits removed from history entirely, yes, both content and attribution.\nYou are, of course, free to reimplement the behaviors yourself, which I would recommend so as to avoid breaking regressions.. Thank you for restoring some sanity, @evocateur!. In life in general, explicit exclusions tend to take precedence over explicit inclusions. I think this is a reasonable change. I would perhaps print a warning/confirmation that X number of packages would be in scope but were excluded? Better to be explicit with your user. Does it still throw if no packages are selected?\n. True, you would presumably know what you're getting yourself into. Lerna doesn't log the names anywhere else, so a count is probably sufficient.\n. I would perhaps rename this to make it a bit more obviously different than filterPackages.\n. Should we mention scope here too?\n. Shouldn't these be called with arguments? I see buildPackageGraph is called in runPreparations, but that seems a bit like spooky action at a distance.\nPerhaps Repository should only cache packages/packageGraph and filtering should be performed explicitly by the task that wants to filter (i.e. Command, as it does now).\n. Or maybe something along the lines of applyFilteringRules or something. Yeah, naming is hard. :(\n. I think between (1) functionality consistency and (2) the fact that there is a use-case for \"permanent\" ignore rules, supporting permanent scope rules is a good idea. Principle of least surprise, and all that.\n. So the big argument against this structure is that these are getters, but depending on the order that you invoke repository.packageGraph and repository.buildPackageGraph(...), you can end up with permanently different values for packageGraph (or one of the other fields controlled by this). Spooky! \nThere's also a hand-wavier argument about who should be responsible for filtering; I figured that the \"Repository\" class should probably be a predictable, consistent, immutable representation of the state of the repo, and filtering should be applied elsewhere, namely, in the commands themselves. If you just pulled out the filtering behavior of buildPackageGraph to the root Command you should still get it across commands, yeah?\nLastly, you can't pass arguments to getters!\n. @lukebatchelor please fix the above before merging!\n. Yeah, that's right.. Open question: bootstrap used to toposort by default. For consistency, I have tentatively made toposort opt-in-only across the board. Is this behavioral change (1) a good idea? and (2) sufficiently breaking for a beta version to justify special-casing bootstrap?\nI am tempted to say (1) yes and (2) no, assuming there is a way we can call out to existing beta users that the default behavior has changed (maybe add a log line in bootstrap if the option was not specified?).. So are there any changes I should make here, or is it good to go?. Note to self: this should call callback, not throw.. Ping @gigabo: thoughts?. In my repo, I use Yeoman to do package generation, which has been working great. Perhaps this command isn't really necessary?. The most foolproof correct way to implement this flag would then be to default it on always, and provide a --no-sort option to disable it, no? (Agree that \"topo\" is probably noisy; I think \"no sort\" is phrased the most CLI-like though.). ",
    "rsolomon": "Thank you SO much for this commit. It resolves a huge slew of issues I was having with Lerna, including:\n- Relative CSS imports between modules\n- Exporting and importing flow types\n- Reducing boilerplate exports for component library modules\nA really great improvement to the usability of Lerna, and upgrading was almost completely seamless. Again, great work.\n. --repo-version, right there in the docs\n. Alright folks, I think I need to read the docs more thoroughly before posting. --canary is what I want\n. @evocateur Ah, that makes sense. Test case has been updated.. Any advice on the Appveyor build? It doesn't look like the failure is related to my commit, but I don't see any obvious way to re-trigger.. @evocateur apologies, but what do you mean by --no-bail? The bail=false test case is above on line 108, but I assume you mean something else. This is my first time diving into the Lerna codebase, so I'm probably just missing something :). ",
    "giladgray": "@gigabo seems to have hit it. updating does not help.\n. ok hmm solved by adding registry config to my user-wide ~/.npmrc file. i would expect lerna to support an .npmrc file in the project too, but that does not seem to be the case.\n. @doug-wade yeah i'm fairly certain this is working as expected now. also if you're using yarn then it's simply yarn lerna .... @jdxcode oof that just puts one of your node_modules directories in your path. what about the dozens of other repos you have checked out?. ok interesting, it is relative at all times. ",
    "d4nidev": "@thejameskyle It makes sense, otherwise we have to copy it in every package, which is a big pain :(\n. ",
    "pgoldrbx": "My use case is identical to @giladgray. I'd like to add that I also use various CI build environments that need to run a full set of install and test scripts, so this needs to work in other environments beyond local development.\nIt will be extra labor and maintenance to modify all package files/dirs, but, of course, that can be scripted. My expected behavior might be:\n- pass explicit CLI args to lerna bootstrap\n- resolve npm config based on specificity / \"nearest\"\n  - package.json config > package/.npmrc > root .npmrc > ~/.npmrc\n  - npm env vars? I think vars would need to be passed to the child process\n- setting it in lerna.json would be redundant (since npm needs it set somewhere anyway) but it would be a workable solution\nIn the meantime, since I'm working with lerna for the first time, I will attempt the per-package .npmrc suggestion for starters to at least \nEdit: that worked as advertised, saving me the time. \nBut, I wonder if passing --always-auth into lerna's npm args might resolve the issue\n. ",
    "artisologic": "Hi,\nJust switched a 20 odd repo project to lerna the past few days and it looks like I'm hitting the same issue. All of our packages are private npm packages hosted on NPM itself.\nAll our old repos used to work on our CI environment by adding an NPM_TOKEN env variable and then adding this to our .travis.yml file:\nyaml\nbefore_install:\n  - echo \"//registry.npmjs.org/:_authToken=\\${NPM_TOKEN}\" > .npmrc\nSince switching to a monorepo using lerna, we use the same technique on travis, and I can see that the top level npm install does have access to install some of our private packages, but as soon as lerna boostrap executes, lerna seems unable to access our private packages.\nnpm ERR! 404 Not found : @fathom-london/cb-fusion-text\nnpm ERR! 404 \nnpm ERR! 404  '@fathom-london/cb-fusion-text' is not in the npm registry.\nHas anybody found a work around?\nWe're loving the switch to monorepo so far, but I would hate having to completely disable our CI because of it.\n\nEdit\nBased on @thejameskyle suggestion, here is how I fixed our CI for now:\n``` yaml\nin .travis.yml\nbefore_install:\n  - ./travis.sh\n```\n``` bash\nin travis.sh\necho \"//registry.npmjs.org/:_authToken=\\${NPM_TOKEN}\" > .npmrc;\nfor package in ./packages/*/;\ndo\n    echo \"//registry.npmjs.org/:_authToken=\\${NPM_TOKEN}\" > $package/.npmrc;\ndone\n```\n. ",
    "joshdick": "FWIW, I was able to work around the issue that seems to be described here by adding this to my lerna.json (assuming an npmClient of npm.) Not super elegant, but it worked:\njson\n\"npmClientArgs\": [\n    \"--@myCompany:registry=http://some-custom-registry.com\"\n],. ",
    "neocotic": "Sorry to revisit an old issue, but I'm curious as to how this is really possible with just using lerna exec npm outdated? Lerna supports package hoisting using lerna bootstrap. When packages are hoisted, running lerna exec npm outdated results in a lot of \"MISSING\" warnings for packages because they've been hoisted to the root. Hoisting also means that simply running npm outdated at the root is less useful because the root package.json doesn't contain these dependencies.\nI feel like lerna outdated would be extremely beneficial for those utilizing hoisting.. ",
    "jeffdavidgreen": "I like the idea of having one flag to rule them all. I think this helps with the situation of a user trying to do lerna publish --repo-version --package-version and not knowing which one takes precedence. \n. ",
    "Bnaya": "Maybe i've missed something in all of the discussion,\nBut:\nWhy not add support running npm tasks in the packages in parallel? \nsay, each package has it own watch task, and in the task you have babel -w\nlerna exec claims to run tasks concurrently, but as i see it block on the first package watch command. Thank you!\nI've changed my version requirement to \"*\" (from \"\") and it works\nI also had other issue with the order of the prepublish of packages being called,\nbut it was because seems that lerna doesn't look on peerDependencies, so i've added it also under dependencies (or should it be under 'devDependencies')?. I needed lerna to look on the peerDependencies so it will calculate the order of running the prepublish, not for installing.\nMy case is as follows:\npackage A\n- deps: ['B', 'C']\npackage B\n- peerDeps: ['C']\npackage C\nAnd lerna run the pre-publish of C and B in parallel, even that B is dependent on  C (yes, peer dep, but for correctness it should have first prepublish C then B then A)\nAdding C as peerDep and dep of B solved it, i need to keep the peerDep to hint that i want A and B will have access to the same actual library . Its relevant for build time because it contains d.ts files . So as i see it, its a devDependency and peerDependency\nBecouse i need my package to share the exact  same module instance (even when bundled when webpack, which requires additional setup). @bestander Thanks for the great work!\nWhere i can see example for this setup?. I have it up and running in my project, with my .bin files in the appropriate places . My settings was wrong, gonna recheck it. Ok, yes its still true. ",
    "zouxuoz": "@thejameskyle what the status of this feature? Can I try to do it and send PR? \ud83d\ude42. ",
    "Aghassi": "@gigabo That pin command would be nice. Would you mind giving a rough example of what that may look like?\n@zouxuoz You most definitely should try and send a PR if the feature doesn't exist. Open source and all \ud83d\ude04 . Thing is, hoisting is a very useful feature. It is like doing a yarn install or npm install and validating that your set of dependencies is correct. I quiet like how it says when sub dependencies differ in someway and leaves it there. I assumed bootstrap is the same as yarn install, but for the whole repo with all the stuff in packages. While I mainly work with yarn, if it is a current performance problem with npm then I can understand not wanting it. Would be nice to have both in the future.\nJust would like a way to resolve common deps like hoist does at a top level at the end of the day. We are in the early stages of experiementing with this tool, so we were flexing our ideas when we came across this. . So, there is one caveat with yarn workspaces that I'm still hung up on. You can't publish the repo, it needs to be a private package. Due to how we have things currently structured, we would like to ship the entire repo in NPM for various reasons. That's pretty much the only reason I haven't fully gone down that rabbit hole.. Ok, glad to clarify that point. I will wait to hear back regarding the hoisting mechanism regardless as I am interested in knowing the expected functionality.. ",
    "flux627": "Just here to add a \ud83d\udc4d for the pin command.. ",
    "gandazgul": "Can this be revived? We would like to user lerna for publishing as well but this is a requirement for us.. ",
    "kevnk": "I'm using lerna to run npm scripts that are watching files for change \u2014\u00a0it works as expected; it just doesn't output anything... This issue seems to only address output on errors though. Is there a verbose mode I'm unaware of?\n. Thanks for the info @gigabo!\n. Thanks for the fix @gigabo \nFYI - for everyone who installed lerna globally, make sure you update your global version or else you'll get Lerna version mismatch message.\n$ npm install -g lerna@2.0.0-beta.26\n. ",
    "fusionstrings": "that explains, thanks \ud83d\udc4d \n. ",
    "emirotin": "Could this be reconsidered and added as a useful feature? I quite often find myself cloning the repo just to import it into the monorepo project and then delete.. Had the same issue with beta30 and beta37. Pretty much every repo has merge commits on master. We don't really care of retaining them, so if lerna could flatten the branch history (essentially making it look like no merges did happen and all the commits originally went straight to master) that would be sufficient for us. \ninteractive rebase against root seems to be doing exactly that so we do probably have the backup plan, but if lerna automated that that would be great. ADD: A bit of context. Monorepo concept is relatively new and I believe many companies are deciding to use it to consolidate bits of the existing code.\nTo me the import feature is one of the biggest selling points (we've currently decided to start using lerna for clusters of the related modules).\nSo I believe smooth import process (fixing the current issue + wokring with the remotes #269) is crucial for the existing projects to migrate to lerna.. Would love to if I find some time soon.. BTW do you think this should be opt-in or opt-out?. Hmm, I thought with major version 0 patch changes are considered compatible\nwhen the minor version is unchanged?\nWill try with the non-zero majors\nOn Fri, Jan 27, 2017 at 8:56 PM Dylan Greene notifications@github.com\nwrote:\n\nHi @emirotin https://github.com/emirotin -\nWhen using semver major.minor.patch, if major is 0 then any version\nchange can be a breaking change, so ^ won't upgrade from 0.0.3 to 0.0.4.\nhttps://docs.npmjs.com/misc/semver\nCan you reproduce this problem with something like ^1.0.3 to see if it\nuses 1.0.3 from the registry instead of 1.0.4 from the local copy?\nI think I'm seeing this problem as well, so knowing I'm not alone will be\nhelpful.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/lerna/lerna/issues/509#issuecomment-275729878, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAgGCBvRpBKatvwb8fHuwoCs7v0OOg3Qks5rWi_jgaJpZM4LoBTy\n.\n. It looks like the filtering message happens to hit earlier. First the generic Command constructor filters the packages which already throws an error. So the child RunCommand check never runs.\n\nI'm using beta.30 and I think the result will be the same with beta.36. ",
    "inyono": "I ran into the same problem. The reason was that I unintentionally installed lerna v1. It works with v2, though.\n. ",
    "dawsbot": "I faced this in Lerna 2: \njson\n  \"lerna\": \"2.0.0-beta.24\",\n  \"version\": \"independent\"\nSo sadly my build is still broken on Travis.\n. ",
    "dannyfritz": "I'm getting a similar experience. This line relies on Bash's command substitution feature. Tried it with powershell to no avail too which allegedly supports this syntax.\nlerna: 2.0.0-beta.26\nOS: Windows 10\nnpm: 3.10.4\nnode: 6.3.1\n```\n? Are you sure you want to publish the above changes? Yes\nErrored while running PublishCommand.execute\nError: Command failed: git commit -m \"$(echo \"Publish\n\nfond-debug@1.0.0\nfond-graphics@1.0.0\nfond-keyboard@1.0.0\nfond-runtime@1.0.0\nfond-timer@1.0.0\")\"\n    at checkExecSyncError (child_process.js:475:13)\n    at Object.execSync (child_process.js:515:13)\n    at Function.execSync (C:\\Program Files\\nodejs\\node_modules\\lerna\\lib\\ChildProcessUtilities.js:61:40)\n    at Function.commit (C:\\Program Files\\nodejs\\node_modules\\lerna\\lib\\GitUtilities.js:77:39)\n    at PublishCommand.gitCommitAndTagVersionForUpdates (C:\\Program Files\\nodejs\\node_modules\\lerna\\lib\\commands\\PublishCommand.js:388:30)\n    at PublishCommand.commitAndTagUpdates (C:\\Program Files\\nodejs\\node_modules\\lerna\\lib\\commands\\PublishCommand.js:369:28)\n    at PublishCommand.execute (C:\\Program Files\\nodejs\\node_modules\\lerna\\lib\\commands\\PublishCommand.js:138:16)\n    at PublishCommand._attempt (C:\\Program Files\\nodejs\\node_modules\\lerna\\lib\\Command.js:157:21)\n    at C:\\Program Files\\nodejs\\node_modules\\lerna\\lib\\Command.js:142:15\n    at C:\\Program Files\\nodejs\\node_modules\\lerna\\lib\\Command.js:166:13\n\n[AMERICANROBIN] C:\\Users\\Danny\\Dev\\fond\\packages\\fond-runtime\n```\n. ",
    "jayphelps": "Seeing this on Mac OS 10.11.6 using zsh as well as regular old bash-3.2\nAnyone know of a workaround? Seems like it's not lack of command substitution support since these shells support it.. ",
    "Gcaufy": "I got the same issue,\nIt was pushed successfully. but just get the wrong comment in my commits.\nsee:\nhttps://github.com/wepyjs/wepy/commit/86cf24f64f116f7edb5b5a6cd47b2656ec29ac52. @jimmytb yup, this is what I am doing right now. I hope lerna can support publish one single package. then you don't care about the package.json and the git tag and git commits .. @evocateur any reason why not to support it?. @evocateur any reason why not to support it?. For now, lerna is checking the diffs by using git describe to get the tag for the whole repo.\nBut If I manually published one package before and set a tag for it. \nThen lerna will treat it as a clean repo.\nso I think we need to check the diff for every packages make a diff from the last publish commit.. ",
    "tleunen": "Having the same issue on MacOS 10.12.2 with zsh as well.\n```\nGitUtilities.commit           (\"Publish\\n\\n - packageX@1.0.0\")\nError: Command failed: git commit -m \"$(echo \"Publish\n\npackageX@1.0.0\")\"\n    at checkExecSyncError (child_process.js:490:13)\n    at Object.execSync (child_process.js:530:13)\n    at Function.execSync (/Users/tleunen/.nvm/versions/node/v7.2.1/lib/node_modules/lerna/lib/ChildProcessUtilities.js:76:40)\n    at commit (/Users/tleunen/.nvm/versions/node/v7.2.1/lib/node_modules/lerna/lib/GitUtilities.js:81:39)\n    at Function.descriptor.value (/Users/tleunen/.nvm/versions/node/v7.2.1/lib/node_modules/lerna/lib/logger.js:143:33)\n    at PublishCommand.gitCommitAndTagVersionForUpdates (/Users/tleunen/.nvm/versions/node/v7.2.1/lib/node_modules/lerna/lib/commands/PublishCommand.js:399:30)\n    at PublishCommand.commitAndTagUpdates (/Users/tleunen/.nvm/versions/node/v7.2.1/lib/node_modules/lerna/lib/commands/PublishCommand.js:380:28)\n    at PublishCommand.execute (/Users/tleunen/.nvm/versions/node/v7.2.1/lib/node_modules/lerna/lib/commands/PublishCommand.js:148:16)\n    at PublishCommand._attempt (/Users/tleunen/.nvm/versions/node/v7.2.1/lib/node_modules/lerna/lib/Command.js:166:21)\n    at /Users/tleunen/.nvm/versions/node/v7.2.1/lib/node_modules/lerna/lib/Command.js:151:15\n```. \n",
    "raoulus": "Having the same issue when I try to publish a prerelease version (1.0.0-alpha.1). Publishing non prerelease versions (1.0.0) work.. ",
    "fer22f": "Any update on this issue? Just got this earlier this morning when trying to publish 0.0.0 in version 2.0.0-beta.0. ",
    "ericf": "@gigabo thanks for digging deep into this one \u2014 definitely a messy Git situation.\n\nWe might wind up needing to squash branches that contain patches that don't apply cleanly.\n\nI think that seems fine me to as a strategy to employ when there's an issue in a merge commit.\n. ",
    "felipernb": "I've done some monorepoing at my job with custom bash scripts for some time and decided to use lerna in something I'm working now, but had this same problem.\nHowever, while lerna fails in my current project, my old custom bash script works, so it might be worth taking a look.\nHere it is: https://gist.github.com/felipernb/968fafb2eb8f8fa741847a2eb87e62e5\nIt's a different way to rewrite history, it uses filter-branch and actually causes a merge and doesn't alter anything regarding the commit author (which I think is nice). So maybe lerna should do that instead?\n. ",
    "peduarte": "Having the same issue here. git rebase --interactive didn't help unfortunately. \n. ",
    "0xR": "Having the same issue, since I don't have time to investigate further I just copied the files over without git history. I'm on beta.30 btw.\n. ",
    "trxcllnt": "I have no idea if this is relevant to anybody else, but a slightly modified form of the function in this stack overflow answer worked great for me. For OS X users, make sure to install and use gnu-sed (brew install gnu-sed was all I had to do, but others may need to update the script to use gsed).\nDefine this function in a shell script somewhere (I put it in my ~/.bash_profile temporarily b/c I'm lazy and/or stupid):\n```sh\ngit_add_repo()\n{\n    repo=\"$1\"\n    dir=\"$(echo \"$2\" | sed 's/\\/$//')\"\n    path=\"$(pwd)\"\n    mkdir -p \"$dir\"\ntmp=\"$(mktemp -d)\"\nremote=\"$(echo \"$tmp\" | sed 's/\\///g'| sed 's/\\./_/g')\"\n\ngit clone \"$repo\" \"$tmp\"\ncd \"$tmp\"\n\ngit filter-branch --index-filter '\n    git ls-files -s |\n    sed \"s,\\t,&'\"$dir\"'/,\" |\n    GIT_INDEX_FILE=\"$GIT_INDEX_FILE.new\" git update-index --index-info &&\n    mv \"$GIT_INDEX_FILE.new\" \"$GIT_INDEX_FILE\"\n' HEAD\n\ncd \"$path\"\ngit remote add -f \"$remote\" \"file://$tmp/.git\"\ngit fetch \"$remote\"\ngit merge --allow-unrelated-histories -m \"Merge repo $repo into master\" --no-edit \"$remote/master\"\ngit remote remove \"$remote\"\nrm -rf \"$tmp\"\n\n}\nexport -f git_add_repo\n```\nThen from the root of your lerna mono-repo, run:\nsh\ngit_add_repo git@github.com:your_user/your-repo.git packages/your-repo\nIt'll take a bit to run but when it finishes, your git history should look like you've been committing files under packages/your-repo all along. Everything on GitHub (history, merges, commits, blame, diffs) look to be working.\nI haven't tested whether it's possible to pull in upstream changes from the original repo (but I seriously doubt it), so make sure you stop committing to the original one and fully switch over.\nI don't have any special understanding of why this works, I likely can't help if it doesn't work for you. When in doubt, do it in a freshly cloned local version of your lerna repo so you can delete it and try again. Good luck!. @cdaringe we have a similar setup at Graphistry, a mono-repo with private/proprietary library and application modules. We're migrating off publishing them to npm so we don't have to do silly things like inject npm creds into our dockerfile-build containers.\nWe've come up with a strategy of copying only the relevant private modules into our docker containers conditionally, then executing lerna bootstrap (or using yarn workspaces) inside the container.\nFor example, to make containers for each app-1 and app-2 (package.json summary printed next to each path):\nmono-repo/packages/lib-a  - { \"name\": \"lib-a\" }\nmono-repo/packages/lib-b  - { \"name\": \"lib-b\", \"dependencies\": [ \"lib-a\" ] }\nmono-repo/packages/app-1  - { \"name\": \"app-1\", \"dependencies\": [ \"lib-a\" ] }\nmono-repo/packages/app-2  - { \"name\": \"app-2\", \"dependencies\": [ \"lib-b\" ] }\nWe can run this command to get the paths to the module we want to make a container for, and also all its private dependencies:\n ```sh\n$ lerna exec --loglevel=error --scope app-1 --include-filtered-dependencies -- echo \\${PWD##*/mono-repo/}\n\npackages/lib-a\npackages/app-1\n\n$ lerna exec --loglevel=error --scope app-2 --include-filtered-dependencies -- echo \\${PWD##*/mono-repo/}\n\npackages/lib-a\npackages/lib-b\npackages/app-2\n```\n\nNotes:\n- --scope is the module name in package.json whose private deps we want to list\n- --loglevel=error is critical, otherwise lerna prints other stuff that's not your module paths\n- the ${PWD##*/mono-repo/} ensures we echo the path to the module under mono-repo/, not the absolute path. This is also handy if you have modules in sub-folders, like packages/legacy/an-old-module).\nThen inside the dockerfile-build we synthesize the mono-repo structure, but only COPY in the paths of the relevant dependencies:\n```sh\nin reality we also execute this command in its own lerna container, but this is shorter\npackages=$(lerna exec --loglevel=error --scope app-1 --include-filtered-dependencies -- echo \\${PWD##*/mono-repo/})\ndocker build \\\n     -f Dockerfile-build \\\n    --build-arg PACKAGES=${packages}\n    -t graphistry/app-1:dev .\n```\n```dockerfile\nthe Dockerfile-build\nFROM node:alpine\nWORKDIR /app\nARG PACKAGES\nget lerna in here and populate (or copy in) lerna.json\nRUN npm i lerna && echo '{\"packages\": [\"packages/*/\"]}' >> ./lerna.json\ncopy in relevant package source dirs\ndon't forget to add packages/**/node_modules to your .dockerignore\nCOPY ${PACKAGES} packages/\naka lerna go wild\nRUN  npx lerna bootstrap\netc\n```\nThis is from memory, apologies if I messed up the syntax for the COPY command. Hope this helps, @ me if you have any questions.. @tombburnell we've since switched to using yarn inside our build containers. Paired with docker's new ONBUILD directives and multi-stage builds, we can define a base container with a yarn global cache of all the dependencies, then only copy in the packages of the mono-repo that are relevant to the package the container is intended to run.. ",
    "chadoh": "What is the status of this issue?. ",
    "zxqfox": "Feels like it does not actual anymore. It should works fine for now. Does this still actual?. Try to not use npm 5.x, it's because of hoisting for sure.\nLerna moving packages to root at hoisiting step, npm 5.x cleans up node_modules and removes anything that not exist in package-lock.json, as a result you have this situation with missed packages.. In npm: npm publish --access public\nPlease try: lerna publish -- --access public\nDoes it work?\np.s I have scoped packages too and want to use lerna to publish them all.. There also can be a commit in master that will also broke publishing process.\nI've met this situation like 3 or 4 times on our local 2 days coding session. Would be great to have some way to rollback or lock master branch from merging at the publishing period.. Actually, you can run any npm script inside specific packages using scope param: lerna publish --scope=\"name-of-package-A\"\n. If people using lerna as a CLI with some API and you breaking this API then it's breaking. If you don't breaking this API \u2014 then it's not.\nJust decide what supported API is for this moment.\nupd: Same for CI, btw.\nupd2: Actually, lerna was recommended to be installed globally so the people who installed too old version of lerna locally (unsupported) will be affected. The rest will meet corrected behaviour when the local version (same as in CI?) will be used. So it's more like patch for me ;-). Actually, I didn't pay attention before to this problem but decided now to make an issue and found this one.\nIn my case I'm using npm 5 and just want to run hoisted binaries in subpackages without changing PATH env.\nLike running ava from ./packages/one cwd when ava binary exists in ./node_modules/.bin/ava.\nAs temporary solution I can add ../../node_modules/.bin to env PATH but it's risky. And looks like this issue not really about my problem but similar one.\nAny ideas?\n. @evocateur Thank you. Feels logical. I'll stick to explicit defining dev deps in each subpackage for now.. I'd like to join to maintain lernajs since we using lerna widely for open source and even some private packages.\nNot sure I can make a huge impact to actually closing issues but I'm totally sure I can publish things and spend few hours to critical issues.\n@hzoo Hey, Henry! \ud83d\ude3a  Plus one for --dry-run (even if it will be just a preset for a couple of other flags).. It's correct. I'll try to collaborate on this a lil bit more and make some specs on how lerna should recognize changes.\nWe having troubles with tags in our projects too but I feel like it's a solvable problem.\nThank you for the comment.. log.silly(\"packages\", batch.reduce((pkgs, pkg) => (pkgs.push(pkg.name), pkgs), [])) ^.^\nprob something like that could be easier to read:\nlog.silly(\"packages\", [].concat.apply([], batch.map(pkg => pkg.name))). ",
    "thomasklein": "Hi guys! First of all, thanks for lerna!\n@rygine I'm using node 6.6.0, npm 3.10.3 and lerna 2.0.0-beta.31 and the issue is happening to me when another level of nesting is added. \nMy setup:\npackage-1\n   package.json (dependency: eslint)\npackage-2\n   package.json (dependency package-1)\n   package.json.scripts\n      \"lint\": \"eslint\"\nIn package-2 no node_modules/.bin directory is created and therefore eslint is not found. I only get package-1 symlinked in package-2/node_modules.\nWhy do I even have this setup?  package-1 should group dependencies - kinda preset style.\n. Sure! I forgot to mention that in my case the packages are scoped; although my understanding is that it shouldn't make a difference...\npackage.json\n    \"dependencies\": {\n        \"lerna\": \"^2.0.0-beta.31\" \n    }\nlerna.json\n    \"lerna\": \"2.0.0-beta.31\",\n    \"version\": \"1.0.0\"\npackages\n     @company/package-1\n          \"version\": \"1.0.0\",\n           \"dependencies\": {\n                \"eslint\": \"^3.12.2\"\n           }\n     @company/package-2\n          \"dependencies\": {\n               \"@company/package-1\": \"^1.0.0\"\n          },\n          \"scripts\": {\n               \"lint\": \"eslint\"\n          }\n(basically what I had posted before)\nFrom within rootI run ./node/modules/.bin/lerna bootstrap.\nMeanwhile I wrote myself shell scripts that create the symlinks to the \"binary\" executables on scripts.postinstall.\n\nSystem: Mac\nnode: 6.6.0\nnpm: 3.10.3. Hi Ry! Thanks for taking your time on this, much appreciated!\nA pity that the npm docs are not really verbose about it...\nSetup for a package.json\n{\n  \"name\": \"name\",\n  \"version\": \"1.0.0\",\n  \"description\": \"description\",\n  \"dependencies\": {\n    \"eslint\": \"3.12.1\"\n  }\n}\nNow if you run npm install && ls node_modules/.bin you should get\nacorn               esvalidate          rimraf\neslint              js-yaml             shjs\nesparse             mkdirp              strip-json-comments\nE.g. esparseis only a transitive dependency but nevertheless I have now it's executable available.\nIn that sense my example is similar, where eslintis a transitive dependency and it's exported bin should therefore also be available in the node_module/.bin folder.\n. ",
    "vzaidman": "is this on 2.5.1 ?\nboth of these doesn't work for me:\nlerna exec -- echo $LERNA_ROOT_PATH\nlerna exec -- echo $PACKAGE_NAME\n  . can you please give me an example? im sure im not the only bash noob around.... any updates on this?\ni think it solves the #1058 (\"issue with importing packages with merge commits\") much better then the \"--flatten\" flag that removes the merges history whatsoever.. here is how adding multiple packages using git subtree looks like\ngit subtree add -P packages/some-package ../src-to-some-package master\n\n. actually it works quite fine. you can see the history with older paths which was good enough for our usage.. Any workaround for this one? I can't rewrite the history of my package.. just like in #1058 - i end up using \"git subtree\" as follows:\ngit subtree add -P packages/some-package ../src-to-some-package master\n\n. --flatten works indeed but as someone who uses \"git flow\" we NEED our merging history to not be ignored for all the packages we import.\n615 solves it much more nicely.. i end up using \"git subtree\" as follows:\ngit subtree add -P packages/some-package ../src-to-some-package master\n\n. I'd also suggest to do npm whoami to see if the npm publishing stage is possible.. can i use this in \"lerna.json\"?\nthis does not seem to work (loglevel works):\n{\n  \"lerna\": \"2.10.1\",\n  \"version\": \"2.0.0\",\n  \"packages\": [\n    \"packages/*\"\n  ],\n  \"command\": {\n    \"bootstrap\": {\n      \"loglevel\": \"verbose\",\n      \"reject-cycles\": true\n    }\n  }\n}\nand not\n\"reject-cycles\": \"\"\n\"rejectCycles\": \"\"\n\"rejectCycles\": true\nand not each of them in the root of the config. I want to exec in all packages since master plus always exec in some-package.\nfor example, if since will find out that three other deps changed, i want to rebuild the three plus some-packge.\nif some-package changed since master then it would work just the same.\ni believe there is no way to indicate that a specific package would be interacted no matter what since returns.. Thank you very much. It solves my problem.\nBut, maybe we should rename it to --extend-scope or --base-scope and also make it work with scope.\nCurrently scope overrides it.. --force usually overrides other configs. it's really counter intuitive that it extends since and not overrides it.. so --force-include maybe. ",
    "marcins": "I just ran into this issue, where the \"latest\" version of a dep was chosen over the canary because the canary version was based on the last released version number not the \"next\" one.\nIf you're automatically building a canary from CI you don't want the prompting flow, so as long as there's still a way to publish a canary with the \"next\" version number without interactivity then that'd work for my use case.\n. ",
    "tdreyno": "Bumping this again. This is so broken it hurts.\n. @KyleAMathews That'd be great. I hacked it in to my local build: https://github.com/tdreyno/lerna/commit/5f743ca6e347347d6ebf477017f6cebc992c99f7. Thanks @evocateur, I'll try it out!. ",
    "Guria": "We should either use incrementing part in canary version before hash, or substitute exact version for controlled packages without caret in front.\nNow our canary builds are definetely broken, because users will get wrong dependencies versions :(. Have to define multiple bootstrap calls because I am not able to list all interested packages in one glob.\nhttps://github.com/cerebral/cerebral/blob/b2be293f037aa2244fd6b3782c778bc6ef042c02/.travis.yml#L28-L32. Seems I have an issue with it: https://travis-ci.org/cerebral/cerebral#L993-L994\nMy canary publishing triggers when tag next is updated. And now I updated lerna it stopped to work.. Switched to publish from master and still have the same issue here: https://travis-ci.org/cerebral/cerebral/builds/210713536#L1979-L2002\nDeploy from cloud9 from the same branch is just fine. Downgrading to 2.0.0-beta.37 fixes publish on ci.\nCould anyone help me with it?. Lerna is declared in package.json as devDependency and used to be installed with npm i. Shell script located right in .travis.yml: https://github.com/cerebral/cerebral/blob/6f1668acd432f9759d81f06ed8e70a65af7bdcfd/.travis.yml\nI suppose Travis adds ./node_modules/.bin to the $PATH. I am doing nothing special to make it available.. Thanks a bunch. So do you have any suggestions how to deal with it now?. So it happens right after clone in fact: https://travis-ci.org/cerebral/cerebral/builds/210950579#L120\nDoes it mean that lerna 2.0.0-beta.38 can't be used with travis at all?. Ohh. missed a suggestion. Thanks, will wait for a new release.. Any updates here? Should we have some new issue to track a fix?. See #699 . any ETA on new release?. I also invented own way to hoist dependency before it became available as option in lerna:\n\nadd \".\" to lerna.json in pacakages array\nadd dev dependency on monorepo where it needed\nput shared deps into monorepo's package.json\nadd bin section into monorepo's package.json to re expose binaries\n\nAdvantage here is that there is only one place to update dependencies.\nBut I see some drawbacks here as well:\n package dev deps become implicit\n packages node-modules polluted with extra binaries and packages symlinks that they don't need. ",
    "KyleAMathews": "Is there anything holding up a PR fixing these issues? I haven't looked at the Lerna codebase much but would be happy to make a PR a) supporting incrementing number releases and b) add support for specifying a next version.\nI'm using Lerna + canary releases to great effect with Gatsby and am planning on automating canary releases on build passes (anyone doing this btw?) and these two changes would make that much nicer.. For Gatsby I've been telling testers to just use \"canary\" for their package version.. Oh right. Yeah very little of that in Gatsby so have avoided problems.\nOn Thu, May 18, 2017, 12:55 PM Dan Abramov notifications@github.com wrote:\n\nThat doesn\u2019t solve the issue with monorepos since two canaries that depend\non each other without exact flag will break as soon as the next hash is\nhigher on alphabetic order.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/lerna/lerna/issues/277#issuecomment-302371105, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAEVh5JZUz3srZuRIte_N_eapQLiGhH_ks5r7COpgaJpZM4JLG1g\n.\n. >Any reason you included --force-publish=*\n\nYeah I tried that and it wasn't publishing all packages.\nLerna 2.1.0\nNPM 4.6.1\nNode 8.1.2. Ah cool, perfect. Thanks!. ",
    "ivosabev": "Same problem with 2.0.0-rc.0. Any plans on adding this feature in the future?. ",
    "gaearon": "Just broke Create React App beta releases with this \ud83d\ude22 \nIs there anything holding us back from enabling the hidden --exact flag for --canary?. That doesn\u2019t solve the issue with monorepos since two canaries that depend on each other without exact flag will break as soon as the next hash is higher on alphabetic order.. This is super handy, can't wait to see it released!. You're also going to get this error if you accidentally omit the \"lerna\" key in lerna.json.\nIt should be a version number:\njs\n  \"lerna\": \"2.6.0\",\nI omitted it because this is what Yarn Workspaces blog post told me to use:\n\nI'll send a PR to Yarn to correct this.. Thanks. ",
    "shawnbot": "Somewhat related, as reported in #915: --canary and --cd-version don't interact the way I expected them to. I think that if --canary --cd-version=patch didn't drop the meta suffix (-alpha.x) it might help with this issue.. There are two open PRs (#960 and #958) that propose adding support for prerelease identifiers, which should do what you're expecting, @ianwremmel. For instance, to publish a prepatch version (an patch increment + prerelease) with the current unix timestamp, you could do:\nbash\nlerna publish --cd-version prepatch --preid=\"pre.$(date +%s)\". Thanks for the feedback, everyone! I'll get cracking on incorporating it this week.. Okay @evocateur and @Hypnosphi, I think I've addressed all of your feedback. Let me know if you see anything else.. No worries, @evocateur! :v:. @morgs32 We've certainly found a workaround, but I predict that many Lerna users will eventually run into a wall with lerna publish.\nStepping back, I think the underlying problem is really just the inability to inspect the state of your packages (in git or otherwise) before you hit the metaphorical \"publish\" button. When I run npm version patch, I can check to make sure that package.json was updated to the version I expected and that the corresponding git tag was created. I can't do that with Lerna, and with dozens of packages to manage, that heightens my \"publish anxiety\". \u2639\ufe0f . How do you publish after that? IIRC, if you run lerna publish again it'll bail because there aren't any changes to trigger version bumps. So you need to run lerna exec npm publish, but that will bail if it hits a package that hasn't changed since the last publish.\nIMO, it's confusing that there are many Lerna subcommands with presumably equivalent npm commands (init, link, ls, publish, and run) but no version command, and a publish that behaves so very differently.. I guess lerna publish --skip-npm feels like a hack in that case. At least in our case (Primer), it would be a lot more straightforward to be able to:\n\nRun lerna version manually, e.g. on a release branch, and inspect the resulting version bumps, update the changelog, etc.\nHave CI checks that ensure versions are incremented, cross-dependency versions match, etc.\nRun lerna publish on CI when the release branch merges to master.\n\nInstead, we a hodgepodge of scripts to simulate that workflow: a bump npm run-script that runs lerna publish --skip-nm, a release script that runs lerna exec -- try-publish, and a try-publish script that only calls npm publish if the version of each package isn't already published.\nAnd sure, it works, but it's an awful lot of boilerplate for us to have to maintain.. Whoa @evocateur, congrats! I've got a 7mo and a 3yo... it's a lot.\nAnyway, I and my GitHub peeps are more than happy to help out if we can; just give a shout! :v:. \u2728 \u2764\ufe0f . Our use case is exactly the one described above, and I've been having a hell of a time figuring out how to get canary releases working after upgrading to Lerna v3 from v2. All of the tags that I assume Lerna wants are in git, but lerna publish --canary still bails, claiming that there are no git tags. Using --force-publish tries to compare the same commit SHA and comes up with no changes.\nI think the from-package positional described in #1648 would fix this, but I feel like I'm missing something else. Is there something that I should have done when migrating from v2 to v3?. Ah, gotcha. I'll roll it back.. Honestly, I'm not sure. Should passing --preid skip the prompt?. ",
    "alan-agius4": "@evocateur I don't know the whole flow around the --canary and why it uses the commit hash but wouldn't it make sense in order to avoid such issue to use Date.now() instead? as a version. it's always incremental and could avoid collision issues.\n. This has been done https://github.com/lerna/lerna/pull/1111. @danielo515 I don't think that is possble at the moment, as lerna uses 'angular' for the convential-changelog and is hard coded and for bitbucket it needs to be 'angular-bitbucket'. https://www.npmjs.com/package/conventional-changelog-angular-bitbucket\nTo be honest I have the same problem as my repo is in bitbucket. Can we have this back please?. Same issue here I ran into this problem, when developing its fine however I want to publish only contents under a sub directory. would love to get this feature, I am even ready to do a PR.\n@evocateur any thoughts?. This will be a major limitation for TypeScript and Angular developers, and in fact some people using lerna with typescript had to do their own publish, or patch the existing implementation.  I myself want to publish from a subdirectory which does contain a package.json for several reasons;\n1) I don't want to transpile my TS in the src folder because I'll end up having a messy file system. .ts, .metadata.json, .js, .d.ts all next to each other, and than to clean after build will be a total mess.\n2) I want to following Google's Angular Package format https://docs.google.com/document/d/1CZC2rcpxffTDfRDs6p1cfbmKNLA6x5O-NtkJglDaBVs/preview\n3) Seperation of concerns, why should I have my dist files within the same folder of the src?\nMy folder structure\nbash\n-- my-lib\n---- package.json\n---- src\n------ index.ts\n----dist\n------ package.json\n------ index.d.ts\n------ index.metadata.json\n------ esm2015\n-------- index.js\n------ esm5\n-------- index.js\n------ bundles\n-------- index.js\nSo in reality i can publish from a subfolder as I do have a package.json. That won\u2019t  work if you\u2019d need secondary entry points like\n@scope/my-lib/testing\nOn Fri, 29 Dec 2017 at 16:45, Daniel Stockman notifications@github.com\nwrote:\n\nI fail to see what typescript has to do with this non-idiomatic\nsubdirectory pattern. You can publish npm modules with transpiled code and\ntypings under dist just fine, no mangling of package.json required.\n\nOn Dec 28, 2017, at 21:58, Joe Woodhouse notifications@github.com\nwrote:\nAuthor of several typescript modules here who has hit the exact same\nissue, all my modules publish from a dist folder. Wish I'd known this\nbefore starting to use lerna! Would love this feature to be implemented,\nbut will probably have to switch to something else instead now.\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.\n\n\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/lerna/lerna/issues/901#issuecomment-354461926, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AQv-Wvv5lUEqgM_8TBbmjFtE3rTZ3C1Nks5tFQkqgaJpZM4OHpyp\n.\n. After checked I noticed that by default it's streaming :). Updated. updated\n\nOn 17 November 2017 at 00:13, Daniel Stockman notifications@github.com\nwrote:\n\n@evocateur requested changes on this pull request.\nAlmost there, thanks so much for the quick response!\nIn test/NpmUtilities.js\nhttps://github.com/lerna/lerna/pull/1110#discussion_r151563632:\n\n@@ -199,7 +199,7 @@ describe(\"NpmUtilities\", () => {\n     });\n\n it(\"trims trailing whitespace in tag parameter\", () => {\n\n\nNpmUtilities.publishTaggedInDir(\"trailing-tag  \", directory, callback);\nNpmUtilities.publishTaggedInDir(\"trailing-tag\", directory, callback);\n\nPlease revert this, it is actually testing that it trims trailing\nwhitespace.\n\nIn test/ExecCommand.js\nhttps://github.com/lerna/lerna/pull/1110#discussion_r151563706:\n\n});\n-});\n+});\n\nThere should be a trailing newline in this file\nIn src/commands/ExecCommand.js\nhttps://github.com/lerna/lerna/pull/1110#discussion_r151564363:\n\n@@ -100,11 +106,19 @@ export default class ExecCommand extends Command {\n   }\n\nrunCommandInPackage(pkg, callback) {\n-    ChildProcessUtilities.spawn(this.command, this.args, this.getOpts(pkg), (err) => {\n+    const callbackMethod = (err) => {\nLet's name this done, it's less likely to be confused with callback\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/lerna/lerna/pull/1110#pullrequestreview-77294893, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AQv-WkBX5cgtGRHlfwCbSSWN26dcEIKaks5s3MGmgaJpZM4QZMgn\n.\n. @evocateur, thanks for the feedback. I updated it :). Yes, you need to install this\nhttps://www.npmjs.com/package/conventional-changelog-angular-bitbucket\n\n@evocateur the reason why the preset is only passed to the conventional-changelog is\nbecause of issue #1185 and if you try to pass preset to recommanded bump, you\u2019ll get an error.\nI\u2019ll try to test the alpha soon, to see if thats still a problem\n. Hey @engfragui,\nSorry that I didn't provide a lot of info earlier but I was getting on a plane.\nI tried things out a bit on one of my bitbuckets repos, and you need to do a couple of things.\n\nInstall the conventional-changelog-angular-bitbucket in the root\nIn each of the packages/libs package.json you need to specify the below\njs\n  \"repository\": \"https://bitbucketsson.betsson.local/projects/WF/repos/obg.ngx.packages\", // note, this should not end with `.git` and this is typically the url you use to browse the repo.\n  \"bugs\": {\n    \"url\": \"https://jirasson.betsson.local/browse\" // this can be a link to your Jira. If you don't have one the whole section can be omitted.\n  },\nin lerna.json add the below;\njson\n\"publish\": {\n   \"changelogPreset\": \"angular-bitbucket\",\n    \"conventionalCommits\": true     \n},\nAlternatively, you can use the command line argument --changelog-preset=angular-bitbucket \n\nNote re invalid presets\nIf you provide an invalid preset for instance foo, No error will be thrown. I am not sure if this is something not handled by lerna or by conventional-changelog, but properly we should also look into this,. Glad to hear the issue is solved \ud83d\ude01\nIf yo are not using the \u2018bugs\u2019 field, indeed the root package.json sill suffice.. @evocateur I don't know the whole flow around the --canary and why it uses the commit hash but wouldn't it make sense in order to avoid such issue to use Date.now() instead? as a version. it's always incremental and could avoid collision issues.\n. @evocateur bump. To avoid such problems, I avoid calling any custom tasks \u2018publish\u2019 and go\nfor \u2018release\u2019 in order to avoid collisions and interferance with \u2018yarn/npm\npublish\u2019 pre and post hooks.\nAnd I can safely use \u2018prerelease\u2019 and \u2018prepublish\u2019 hooks for two seperate\nthings during the publish cycle.\nOn Sun, 21 Jan 2018 at 00:24, Daniel Stockman notifications@github.com\nwrote:\n\nNo, the prepublish (if it exists) in every package to be published is\nalways run (by npm/yarn), because we are just calling npm publish/yarn\npublish in those directories (which is done in topological dependency\norder, so dependents always have their local sibling devDependencies built).\nOf course, npm5 has deprecated prepublish and it should probably be\nreplaced with prepare or prepublishOnly. I personally don't see much use\nin the scripts/.js pattern, but I don't have any plans to\nremove it.\nThe problem with a prepublish in the root is that it (currently) will run\nany time anyone runs npm install with no arguments in the root, complete\nwith scary looking log and possibly executing something you don't really\nwant to have happen then.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/lerna/lerna/issues/1169#issuecomment-359210223, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AQv-Whrg0ibYiLl2emENY2MId7YwF1hCks5tMnWQgaJpZM4RFbts\n.\n. I can try to help, even reviewing PRs and stuff. that said, I don\u2019t have a big deal of free time . So in reality I only have a few of hours per week available.\n\nAlso an idea maybe issues can be organized a big better, like adding labeling etc.... Thanks and congrats :). @evocateur bugfix\n  . One of the CI is failing due to obsolete snapshots however I tried to run yarn run integration -- -u but had no updates to commit. Well, the custom preset is this passed to convental-changelog-cli which is\nreally where it\u2019s needed.\nOn Tue, 09 Jan 2018 at 16:33, Daniel Stockman notifications@github.com\nwrote:\n\n(We should definitely figure out a way to pass the custom preset to bump\nlater, maybe it needs upstream fixes?)\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/lerna/lerna/pull/1185#issuecomment-356318708, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AQv-Wl7T0y7tFQlxjEtzCeZGXf9Tcldzks5tI4bPgaJpZM4RXcND\n.\n. Okay i\u2019ll wait for your change. \n",
    "pleunv": "I'm very interested in getting this to work as currently our desired CI release flow cannot be covered with lerna. However, after playing around a bit I noticed that both 1.0.4-alpha.0+deadbeef and 1.0.4-alpha.0+sha.deadbeef are currently not accepted by the yarn registry.\nCommand failed: yarn publish --new-version 2.0.1-build.1519722155+61bd02c2 --tag test\nwarning package.json: No license field\nwarning package.json: No license field\nerror An unexpected error occurred: \"https://registry.yarnpkg.com/@company%2fapp-2: New versions must be valid semver.\".\nAccording to https://semver.org/#spec-item-10 they definitely are valid semver versions.\nnpm publish will go ahead and succeed, but will strip all additional meta (everything behind the +) from the published package's version.. Would really love to see this merged as well... Anything us mere mortals can do to speed this up? :). I had a bit of a look at this. The tests are failing because the EOL is hardcoded and differs on Windows and Unix. One possible fix is this one.\nThere is an underlying issue with converting the EOLs to a git commit with each line as a separate -m however, as this seems to introduce multiple new lines, and changes the commit from \n```\nPublish\n\n@org/app@0.0.2\n@org/module-one@0.0.2\n\n@org/module-one@0.0.3\nto\nPublish\n\n\n@org/app@0.0.2\n\n\n@org/module-one@0.0.2\n\n\n@org/module-one@0.0.3\n```\n\n\nThis is of course undesired. I really don't know how to get around this behavior.\nThere's an alternative approach for multiline messages by prepending the message with a dollar sign, like git commit -m $\"My multiline\\nmessage\", but this only works reliably on *nix shells and will print the $ in the message when executed in a DOS prompt.\nI really would love to get this fixed as this appears to be the only blocking issue for Lerna support on Windows, however, I don't see a way to correctly implement the commit messages, except by resorting to writing it to a temp file. Anyone else an idea?. Using temp files for commit messages with git commit -F seems to work consistently across systems. Could clean this up if this is an approach that would be considered.. This pull request is changing the formatting of the commit messages and has issues with cross-env compatibility so would need to be looked at again.\nI've got a fork with a fix here and a temporary npm package for personal use but I think this approach might have to be discussed further because of the temp files that get created and the fact they are currently also breaking the tests. Right now I'm swamped however so I won't have time to look at this further the coming week. But feel free to play with it and give input :). Just ran into this as well, I'm assuming there's not really a workaround for this?\nedit: Sorry, just noticed this already has a fix. Will give lerna@next a try.. Still seem to be running into this with 3.0.0, outputting the following:\nlerna ERR! Error: Command failed: yarn publish --tag canary --new-version 1.0.0-build.b3a7707\nlerna ERR! error An unexpected error occurred: \"Can't answer a question unless a user TTY\".\nlerna ERR! [1/4] Bumping version...\nlerna ERR! info Current version: 1.0.0-build.b3a7707\nlerna ERR! [2/4] Logging in...\nlerna ERR! info If you think this is a bug, please open a bug report with the information provided in \"/pipeline/source/packages/cs-app-program-manager/yarn-error.log\".\nlerna ERR! info Visit https://yarnpkg.com/en/docs/cli/publish for documentation about this command.\nlerna ERR! \nlerna ERR!     at makeError (/usr/local/lib/node_modules/lerna/node_modules/execa/index.js:169:9)\nlerna ERR!     at Promise.all.then.arr (/usr/local/lib/node_modules/lerna/node_modules/execa/index.js:274:16)\nlerna ERR!     at <anonymous>\nThe problem is I'm getting this only on the CI which is a dockerized build (Wercker), not sure how I can give you guys more info :/. Ok.... mea culpa. Prerelease is run in a separate pipeline step which needs the .npmrc to be configured again with the right token to succeed publishing. Should've thought about that, but was thrown off a bit by the error message I was getting, my bad. Please ignore me :). ",
    "KnisterPeter": "I've tried to build 'paeckchen-core' inside the packages folder with npm run build and it does fail but there is at least some output.\nThe problem here was that with lerna boostrap an npm install was done but the postinstall script did not execute. After fixing this the build was fine and now lerna run build does work as well.\nThere might be two different problems here, one with lerna boostrap and one with stdout and lerna run task.\n. I would prefer increasing the maxBuffer.\nInterleaved output in the run scripts may be completly unreadable.\n. I think a sane default would be some megabyte but there should be a configuration option in the lerna.json to define it.\nLerna by itself could never know how much log output will be generated.\n. I think this issue is invalid due to https://github.com/npm/npm/issues/3059#issuecomment-13062546\n. ",
    "glortho": "+1. we generally can't use lerna bootstrap or lerna run <some build> because of this.. Not everything seems to be working properly with npm@5.3.\nlerna bootstrap --hoist does not report errors, but neither does it install all dependencies. If you go into a package and try to npm i to remedy the issue npm does not appear to honor symlinks to other packages in your repo, though the symlinks are there. I end up with:\nnpm ERR! code E404\nnpm ERR! 404 Not Found: @myorg/mypackage@*. ",
    "screendriver": "Any news about that? I'm running into the same issue here.. ",
    "pepe79": "The problem still persists. If anyone else is running into this: lerna cli option --stream fixes this for me.. ",
    "vjpr": "@pepe79 lerna bootstrap --stream did not work for me with 2.5.1.\n\nSeems it was only supported in run command. @hzoo Can we have --stream for bootstrap?. @gigabo This is still an issue for me. Its blocking my use of lerna entirely. What is the quickest fix? Maybe add a maxBuffer flag?\nOr is there a way to add a flag to my package manager tool?\nhttps://github.com/lerna/lerna#--npm-client-client\nE.g. lerna bootstrap --npm-client-flags --logger=off\n\nTried lerna bootstrap --concurrency=1 --max-buffer=99999999999999 and it still gives me exceeded error.. @evocateur This will be tricky. Its happening on remote ubuntu machine with a company project.\nIts an issue with execa when used with promises it seems to buffer stdout. See https://github.com/sindresorhus/execa/issues/84\nThe maxBuffer should be set to something large, or configurable in lerna cli/config.\nOr better, that streams are used instead of promises for execa commands.\nOr allow flags to be passed to the package manager to write the output to a file and produce minimal stdout.. > never ever want the output from.\nI would say that you always want the output available for logging purposes and errors.. > npm install and the like, whose stdout tends to be irrelevant.\nBut if there are peer dep warnings and things these are useful right? Or do warning goto stderr?. > is an actual error\nIt think its better to show the logs/stream output that would be generated if the command was run standalone for installs.. Hmm yeh concurrent installs are tricky to stream with progress bar output. But if there are non-progress bar logs they really should be shown.\nHere are some ideas:\n\nAllow redirecting all install logs to a file so you can tail -f.\nAllow passing flags to the package managers to turn off progress bar output and set the log level.\nStrip curses lines from the logs that are shown, and prefix each line with the directory its running in.\n. @evocateur But I cannot do packages/apps/*. \n",
    "staltz": "If it helps, I noticed I could always do mv package.json whatever.json but not mv whatever.json package.json.\nAlso, I ended up just using bash scripts in for d in \"packages/\"* style. Maybe Lerna is worth for its lerna run features but not that much for lerna exec.\n. Yes it did.\n. It's possible that I have a package written in TypeScript and another written in JS/Babel, so each package defines how to run its lint script. In general this isn't about linting, I'm just surprised that lerna doesn't use the top-level package.json dependencies as \"common\" dependencies that each package has access to.\n. So I misunderstood.\n. ",
    "anilanar": "I wonder, what does \"Common devDependencies\" in the homepage talk about? If what you say is true, then that part in README is terribly misleading.\n. ",
    "saulhardman": "Thanks for this issue @cchamberlain, saved me a whole bunch of hassle.. ",
    "ziflex": "+1 for this.\nFor example,  I want to use Babel for all packages, but don't want to write build tasks for each project, I just want to write one generic and apply it for each package.. ",
    "ghost": "dliu120: The private repo in the .npmrc is what's causing the error in the first place, as it is our private repo that is not supporting the dist-tag.\nWhich software are you using for your private repo? (Not Nexus I presume? :))\n. After rechecking again, \"private\":true does filter the package from being published\nLublishCommand.js: 275. ",
    "timche": "Nexus is working well with Lerna except the npm dist-tag thing :/ Looking for a workaround as well.\n. I've just tried out Lerna with sinopia and everything is working fine \ud83d\udc4d \n. @szarouski It just worked for me with Sinopia, sorry \ud83d\ude1e . @natew Why are you using npm again? :S\n. > Another important thing to keep in mind is that, we have to make Lerna execute the npm commands in sync instead of parallel or it conflicts with itself and some processes of it add packages and extract them, others remove them and it ends up crashing.\nRelated issue: https://github.com/yarnpkg/yarn/issues/683\n. ",
    "szarouski": "@timche I wonder how it worked for you? On official sinopia readme it says that tags are not supported: https://github.com/rlidwka/sinopia. I'm getting same error as MaartenVerbaarschot. Worked for me after https://github.com/lerna/lerna/issues/246#issuecomment-238424464. Thanks.. So build failed for travis due to stalled build for v0.10 and for appveyor due to npm-cache issue for v0.12. Do you guys typically retrigger build in this case?. This time AppVeyor build passed, but Travis is stalled again just for v0.10 :(. I tried to update this PR a few times and results are the same - 0.10 build freeze (only in travis). Perhaps it is time to retire 0.10? Greenkeeper thinks it is a good idea: https://github.com/IndigoUnited/node-cross-spawn/pull/47. I updated PR to drop older versions and updated inquirer to v2. Please feel free to decide what to do with this. Thanks.. @gigabo updated readme. Please let me know what you think. Thank you.. Sure, np. I'll make something shorter or just a screenshot. Will adjust PR soon. Thanks.. Updated PR to point to png image instead. Please let me know if anything else should be improved and I'll take care of that. Thank you.. ",
    "jogelin": "@MaartenVerbaarschot Did you find a workaround ? It seems that a ticket is open on the nexus side but no news :-1: (NEXUS-9862) . @hzoo I think it's a good idea to give the possibility to publish directly to the latest. It's also blocking on my side because my company only uses nexus but I want to introduce lerna so I am doing some lerna exec npm publish... :-(\nlerna publish --force-latest-tag=* ?. my .npmrc is located at /root/.npmrc which is the home of the docker node image.\nI will provide the logs later. But I don't understand why it publish when I execute the command manually. Maybe because I am using docker-compose to run my command but I am not an expert...\nI'll keep you inform. I updated my description by adding logs and put more details on my CI process.\nIndeed, there is a difference...but not easy to find ;) . After some investigations, test, etc... If I replace yarn by npm in my docker-compose:\n yarn run _docker:publish -- 0.1.0 by npm run _docker:publish -- 0.1.0...it works.\nI read many issue about strict-ssl not evaluated correctly by yarn. But even with a .yarnrc or a yarn config set strict-ssl false before, it failed.\nI don't understand why a yarn run ... command which execute a script doing an npm publish has an impact on the way that the publish is done ?!?. I solved my issue with the best solution: configure the certificates into the docker container.... ",
    "naorye": "I get negative impact from that linking strategy :)\nI have two projects: A and B where A depends on B (A needs B). Both A and B contain React as a dependency. Executing \"lerna bootstrap\"  installs React both on A and B. When running project A I get an exception that resulted from multiple versions of React.\nI believe I miss something or I don't use the best approach for my situation and I appreciate a solution if there is one.. ",
    "andreigabreanu": "I also kind of see this as an issue. Here is a real world example:\nPackage A depends on \"react\" externally (via \"dependencies\" in package.json)\nPackage B depends on Package A (via \"dependencies\" in package.json)\nPackage C depends on Package A and B (via \"dependencies\" in package.json)\n\nRunning lerna bootstrap I would assume I would see in node modules of C a symlink to A and B and \"react\" installed in the root of C (that's how node would normally run w/o lerna).\nIs this something not expected to happen?. ",
    "bebraw": "@thejameskyle Yeah, I was thinking maybe if Lerna was more modular (using Lerna itself), perhaps it would be possible to run two in parallel with some npm script level hacks. In this case you would point one half to stable (fixed) and one half to independent (experimental) directory.\nThis would push the complexity outside of Lerna but in order to do this I would have to be able to point Lerna to custom lerna.json and allow it to use some other directory than packages (extra field at config?) at least. There may be some other requirements I'm missing.\n. Thanks for the fix. I realized the circular dependency was actually an issue in my project. Maybe it would be nice to have some mechanism (lerna check-deps) to warn since often you want to explicitly avoid those.\n. @gigabo Yeah. You can see my approach here. See package.json for details.\nI'm not sure if that's the right way, but it works for me.\n. Yeah, it's ok. :+1: \n. ",
    "jsonmaur": "Great, wasn't sure if it was a dupe or not. Appreciate the great work!\n. ",
    "steelbrain": "I've added ignore support to exec command in our fork of lerna in https://github.com/motion/lerna/pull/3\nYou are welcome to reopen it against this repo :)\n. I'll upstream all the changes soon, currently fixing everything that's directly affecting our company stuff :)\n. I implemented it in a different way in https://github.com/motion/lerna/pull/1\nthoughts?\n. @gigabo The idea of globs is certainly tempting but in a realistic view, this could stray the package from it's main purpose. Having two separate package directories allows sorting packages based on their roles but still enforces them to be purely mono repo package directories, in our use case it was apps and modules.\nIf we allow users to mix lerna packages with other things in deep directories, it's only gonna get messy. but that's just my opinion :)\n. Ohhhh, in that case sounds good \ud83d\udc4d \n. I must be misunderstanding something, how are Lerna and Asini different?\n. Comments taken care of :)\n. Documented and taken care of\n. Note: CI failure is unrelated to changes in this PR (and is generally due to high cpu usage on hypervisor)\n. Thanks @rygine for helping with the review \ud83d\ude38  \ud83d\udc4d \n. No pressure but having this sooner would be nice :)\n. @timche Yarn doesn't support all of npm, we were only using it for npm installations.\nThere are a few things to consider. First of all is that Yarn needs a package published with the same name as you're trying to link or it would fail. It's being tracked in https://github.com/yarnpkg/yarn/issues/946\nAnother important thing to keep in mind is that, we have to make Lerna execute the npm commands in sync instead of parallel or it conflicts with itself and some processes of it add packages and extract them, others remove them and it ends up crashing.\n. @cpojer A PR replacing npm commands with yarn won't work until yarnpkg/yarn#946 is resolved\n. @sibelius Relying on third party solutions is not ideal. While I agree this particular issue is out of scope for Lerna itself, I still think it should be taken care of in flow instead of some third party wrapper or fork. A PR to fix this has been opened at https://github.com/facebook/flow/pull/6504. Clarified\n. ",
    "DavideDaniel": "Still doesn't work for exec.. or possibly it doesn't work in tandem with --since. nope. npm5 does not.. Had to revert in order to get back to work:\nlerna@2.0.0-beta.38 + $ npm i npm@latest-4 -g\n. The poor rollout of npm5 and the lack of resources behind the client has veered us away from npm5 to yarn. A huge issue has been npm5's link which has exacerbated linking issues when working with multiple repos. It maybe that this exacerbated by bootstrap, so I can see why you're going down this path, but what about projects that do not use npm5 in favor of yarn?. Workspaces is still only part of the picture. Is the idea that bootstrap would be the only affected command for future use with npm5+? If so, no big deal I guess and we can still use yarn and lerna together but otherwise I anticipate we might need to fork or pin lerna and stay below v3.\n\nYarn\u2019s workspaces are the low-level primitives that tools like Lerna can (and do!) use. They will never try to support the high-level feature that Lerna offers, but by implementing the core logic of the resolution and linking steps inside Yarn itself we hope to enable new usages and improve performance.\nhttps://yarnpkg.com/lang/en/docs/workspaces/#toc-how-does-it-compare-to-lerna\n. \nEDIT: After I wrote this up I realized the OP might just need to add this to their lerna.json:\n\"commands\": {\n    \"publish\": {\n      \"ignore\": [\n        \"*.md\",\n       ...\n\nAn example repro:\n1. make a change in any package in an independent mode lerna repo\n2. run lerna publish --skip-npm --skip-git --conventional-commits --yes\n3. run lerna publish --skip-npm --conventional-commits --yes\nYou can immediately tell that the command should not be run twice. Because package.json is going to be evaluated for the git tag step in the 2nd publish there will always be a change from the first publish that will then duplicate the bump.\nThis might be actually an inherent flaw with how people end up using lerna publish. As our projects required it we adopted lerna, and as teams started using our libraries we ran into issues with git tagging that required doing more of the publish steps in CD and we've seen issues with the git tagging being conflated with the publish. In order to enable CD publishing and prevent git tag fiascos we had to do some git gymnastics in our pipeline.\nCurrently planning to basically switch to:\n1. lerna publish --skip-npm --skip-git --conventional-commits  --yes\n2. customPublishSteps based on lerna updated --json\n3. customGitTagging based on lerna updated --json\nOur monorepo users are expecting to be able to include either just the changelog entries or just the package bumps in their prs. They then expect the git tags and npm publish to happen once merged into master in CD pipeline.\nThere is some discussion around pring back to you guys to break up publish and tagging logic...\nBut please feel free to point out something we've overlooked!. hilarious commit messages... of course, this also makes me rethink my whole thought process that people don't really read all the commit messages... that or, I'm too involved... Either way, I was digging around because lerna created {pkgname} {loc} while using workspaces resulted in lerna creating it by default in the first dir as opposed to the custom location.. ",
    "intrinsitech": "Awesome, will do. Thanks!\n. ",
    "loklaan": "I don't know how to get the appveyor builds for older node version working. \ud83d\udc2c \n. Woot\nShould I ping anyone else to get this merged in, @gigabo? \ud83d\ude04 \n. I've updated this PR to work with 2.0.0-beta.28.\nAt the time I write this, an appveyor build for node 0.12 is breaking for no reason \ud83d\ude3f \n. Yeah this is the default behaviour in npm@3.\nIn a project I am working on, we were running into issues when testing React components that were made from several packages; each sub-component had their own version of React running on the page. This was because the  react peerDependency in each package was being installed by lerna bootstrap and then used.\nI thought that perhaps someone had chosen this non-conforming behaviour for a reason \ud83d\udc81, so I wrote the npm behaviour as opt in.\nI'm all for making it the npm behavior the default in lerna, but that's not my decision to make!\n. @thejameskyle Changing the default behaviour sounds great. \ud83d\udc4d \nGoing forward, I don't think there should be a flag for the current behaviour of installing of the peerDeps in the individual packages.\nIf anyone currently needs that behaviour, it would be better to enable them in another way; hoisting peerDependencies to packages/node_modules or even the root of the lerna repo. I am happy to make another PR for that hoisting feature. It would be immediately useful to me. This could partially resolve some of the issues behind #334.\nFor now... I think I am going to reuse this PR to change the default behaviour and fix some tests. If any maintainer would prefer I create a new PR and close this one, let me know!\n. PR churn, successful. \u2728 \n. Afaik, looking at the docs, there is no recommendation from npm people.\nThe three ways that I know and have had success with:\n1. npm install the peerDep manually\n   - manual, but tooling like current lerna makes it effortless\n   - breaks down when you have several in-development interdependent packages that all have a peerDep that is expected to be a singleton. ie React\n2. mirror the peerDeps in the devDeps of package.json\n   - npm install becomes the tool do remove manual-ness\n   - same problem of parallel in-dev packages w/ singleton peerDeps\n3. npm install higher up the node resolution path\n   - unless you have tooling, it very manual\n   - can fix the problem of parallel in-dev packages w/ singleton peerDeps\nIn the project I am working on, that uses lerna, we've tried all three and have settled with the 3rd item. Our approach was to add all of our peerDependencies to the root level package.json's devDependencies.\n. This would be a great addition to lerna - in the mean time I've used a script in the preinstall lifecycle of managed packages, to override yarn add behaviour. It's a total hack.. After implementing this, I came to realise that it's hard to make assertions about the state of your node_modules after bootstrap --hoist --noprune --scope <pkg>.\nOpting out of running lerna's bootstrap lifecycles fixes the problems outlined in my use case, so I'm moving ahead with pushing that issue instead.. Hey, thanks for jump on the issue!\nAlso for the advice on --scope.\nGoodluck closing off issues - it looks like you're getting through a lot lately!\n\nNotes for posterity\nThe real issue here is decreasing the time your project spends in lerna bootstrap, since you realistically need to be running it often when doing heavy development.\nIn case someone stumbles on this, looking to improve that bootstrap time.\nWhile I think my suggestion (--no-scripts) still holds merit for the public release, we privately found that removing all but the most necessary lifecycle scripts (eg prepublishOnly) permanently helped the bootstrap time of our growing packages repo.\nInitially we would require transitive dependencies (internal packages depending on other internal packages) to be built so that including them with import/require in another internal package would use the same files that would end up on the npm registry.\nThis was slow, not only because bootstrap time was long, but because developing across several inter-dependent packages ment that a developer would have to situationally run npm run build in a package; this added to things a dev needed to know about and was confusing.\nMoving forward we made sure that all of our tooling (webpack / jest) would pull in the uncompiled source files of transitive dependencies and do the necessary building of those files on the fly. Only at publish time would the built files need to be output and packed.. ",
    "antonmedv": "Ok, and how to install peerDependencies now? For example I have webpack loader with peerDependencies inside lerna.. @evocateur devDependencies ok, got it.. Now installing dependences lime memory-fs, etc. Some installed, some not. Maybe it's an npm bug.. ",
    "christianacca": "A better solution would be to use 'junction' links on windows rather than 'symbolic link'.\n'junction' links on windows do not require admin/elevated permissions.\nThere is a similar (outstanding) issue and PR that solves it on the linklocal project. Maybe this can be used as a reference for a similar change to lerna.\nHere is the PR in question: https://github.com/timoxley/linklocal/pull/23\n. OK thanks for the heads up\nOn Wed, Nov 16, 2016 at 10:23 PM, James Kyle notifications@github.com\nwrote:\n\nWe're going to switch to Yarn eventually, and we'll use yarn.lock's as\npart of that.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/lerna/lerna/issues/377#issuecomment-261091764, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AA2HPga4VzTY4kwaS0XwamD9xX0l6zixks5q-4JRgaJpZM4KX6UV\n.\n. \n",
    "ryb73": "I ran into a similar use case which I think suffers from the same underlying problem. I'd like to be able to run npm outdated on each package to find all outdated dependencies, but npm gives a non-zero exit code if there are any outdated dependencies, so lerna exec stops short.\nAs a workaround, I've added an outdated script to each package which runs \"npm out | exit 0\". The exit 0 allows lerna to keep running the script.. Looks like NODE_ENV=test will also cause Lerna to suppress logging to stdout and ignore Lerna version mismatches (the former I discovered the hard way, the latter I found by CTRL+F-ing for \"NODE_ENV\").\nIn response to @taion's comment:\n\nI'm not sure they're mutually exclusive. Presumably you still want to hide progress bars \u2013 unless you want to modify the other checks for NODE_ENV as well.\n\nIf the checks you're referring to are the ones I mentioned above, it seems reasonable (and preferable) to modify them \u2013 would you agree? If so I'd be happy to put in a PR implementing @thejameskyle's first suggestion of changing it to lerna-test.. ",
    "jimthedev": "This would be fantastic. As someone who is new to using lerna it was quite confusing to have stdout swallowed. \n. ",
    "jwbay": "+1 to this. My use case is an independently versioned collection of modules. We'd be bumping versions as part of the PR process in our org and want the CI server publishing any updated modules as things are merged.\nEdit: --canary doesn't seem to be a great fit for this since a human still needs to type stuff in order to publish a non-prelease package, if my understanding of that functionality is correct.\n. ",
    "smrq": "Huh? Is there any real reason this isn't being added to Lerna?\n. This is more important now that --only-explicit-updates has been removed, which was previously a viable workaround when publishing patch changes.. Using a lockfile means that you have less churn in versions of dependencies, which is a protection against the fact that developers are fallible and don't always signal breaking changes (no matter how small) with a corresponding major bump.  (If we got it right all the time then there would be no need for lockfiles.)\nIf dependent A gets a new version every time dependency B is updated (and repoints its dependency to require at least that version of B), then in order to pick up real changes to A you automatically must pick up all changes to B as well, whether you want them or not.  This means that the surface area for semver errors extends through the entire dependency graph of A, defeating the purpose of having a lockfile.. Using a lockfile means that you have less churn in versions of dependencies, which is a protection against the fact that developers are fallible and don't always signal breaking changes (no matter how small) with a corresponding major bump.  (If we got it right all the time then there would be no need for lockfiles.)\nIf dependent A gets a new version every time dependency B is updated (and repoints its dependency to require at least that version of B), then in order to pick up real changes to A you automatically must pick up all changes to B as well, whether you want them or not.  This means that the surface area for semver errors extends through the entire dependency graph of A, defeating the purpose of having a lockfile.. In my project I have peerDeps with no corresponding devDeps.  We found it error-prone to set both correctly when adding new deps, since less-experienced devs weren't sure when things had to be peerDeps or not.  Cross-linking packages at dev time still works via Webpack aliases.\nIt seems strange to me that peerDeps sometimes get updated, but only when they also happen to be another type of dep.  Wouldn't it make more sense to update either always or never?. I've ended up in situations where some packages got pushed to npm but then failed to end up in git altogether, while other packages ended up in both, which was a fun rollback to deal with.  Git first would be a lot less scary.. ",
    "douglasduteil": "Yes it feels legit to eat your own lerna food :)\n. Wow ! :goat:  for it ! \nThe 2.0.0-beta.26 version was already stable enough for my use.\n. Can be closed now that --stream is merged ?. Oh Great !\nI will test it.\nSorry I didn't have the time to update my PR\nThanks @evocateur  :+1:  . :up: \n@evocateur I have difficulties finding out why Lerna is not working with npm@5. \nCould you enlighten me about the conflict between Lerna and npm@5 ?\n\nIs it the lock that is conflicting with the way Lerna is re-arrange the node_modules ?\nDo you have some kind of test that show us the difference between installation with npm@4 and npm@5 ?\nAre you planing on keeping lerna@2.x npm@4 only and working on lerna@3.x for npm@5 (as this is looking like a breaking change) ?. A little update.\nThe current issue between npm@5 and lerna@2 is the hoisting.\nAs Lerna is adding modules in the root node_modules and Npm is cleaning the root node_modules following the created packge-lock.json.\nI guess that a fix will be making Lerna alter the lock files too when hoisting.. \n",
    "motiz88": "npm link does this. Would a PR fixing this be welcome?\n. @rygine Quite right actually. Hmm. I've just noticed Windows will create file junctions but then complain when they're actually read as files (which I guess the tests don't do?)\nI suppose it's possible to emulate symlinked binaries on Windows by putting foo.cmd stubs in node_modules that forward to the real binaries. This approach would involve more Windows-specific code, but it would remove the requirement for Administrator privileges at bootstrap time. Happy to try and develop this further if there's any interest.\n. npm has cmd-shim for this purpose, by the way - might make sense to reuse it.\n. @Daniel15 I'm afraid hard links might not work in this case though (but I'm just thinking out loud here):\nSuppose foo is hardlinked to bar, then bar is deleted and later recreated; foo and bar are now two distinct files, and any updates to one won't be reflected in the other.\nI'm also not sure whether hard links can be detected with something like lstat().isSymbolicLink() which Lerna would need.\n. @thejameskyle merged this before I could even finish my comment explaining what I'd done \ud83d\ude01 \nSo anyway, just for the record - I co-opted symlink() and isSymlink() in FileSystemUtilities to use cmd-shim when appropriate without disturbing the rest of the code too much.\n- symlink now recognizes a new value for the type argument - \"exec\", which forwards to cmd-shim on Windows and acts like file elsewhere.\n- isSymlink (which is really a misnomer) forwards to read-cmd-shim if we're on Windows and looking at a file that's not a symlink.\n- The test for the binary linking feature now uses FileSystemUtilities.isSymlink rather than fs.readlinkSync.\n. Hmm. this fails because command-join requires Node >= 4. What is the official line on Node version support here in Lerna?\n. @thejameskyle That was the idea but it's not done yet. Is that the course of action you prefer for now?\n. https://github.com/seangenabe/command-join/pull/1\n. With seangenabe/command-join#1 merged, this now works on 0.10 and 0.12 too.\n. Note that AppVeyor tests seem to pass without this change, but I've had problems when checking out Lerna on Windows with the default Git settings (line endings set to CRLF). This PR makes the tests more robust in the face of such settings.\n. @thejameskyle I guess one argument would be least surprise like I mentioned in the issue - specifically symmetry with require().\nIn terms of concrete use cases, consider a monorepo that is less homogenous than Babel - it may have groups of packages built in a few different ways (in my case: some generate code from Protobuf definitions, others from pegjs grammars, and others are JS/Babel). I find it natural to want to do lerna run build and have it work, and at the same time I find it natural to put the build commands in the individual package.jsons.\n. ",
    "timoxley": "@lukebatchelor IIUC I don't think that helps at all since bootstrap will still install dependencies & run scripts of the packages matching the --scope.. @cpojer @hzoo a workaround: lerna bootstrap --concurrency=1. It's possible that running multiple instances of yarn blows through the limited memory of the CI container.. @aymericbeaumet note if you're using linklocal, you'll need to specify dependencies as relative paths using file:, rather than by version e.g. \njs\n{\n  \u2026\n  \"dependencies\": {\n    \"my-dependency\": \"file: ../my-dependency\"\n  }\n}\nThis has the added benefit of making all regular yarn and npm commands work independent of lerna, for packages/* which aren't published to a registry. Otherwise yarn will complain that it can't find the unpublished package in the registry.. @k3n either.. Ideally lerna bootstrap would know how to symlink file dependencies:\njson\n{\n  \"name\": \"A\",\n  \"dependencies\": {\n    \"B\": \"file:../B\"\n  }\n}\nUpdate: The above file: method doesn't seem to break npm, yarn or lerna, though none of these tools will symlink the local package for you. My current workaround is to use linklocal to symlink file: dependencies: \nlerna exec linklocal. > FYI this seems to work correctly with npm.\n@kschzt sorry can you elaborate?\nedit: ahh I think I know what you mean\u2026 npm currently doesn't process dependencies that are already satisfied, so it doesn't bother checking the registry for new versions of the unpublished package, thus doesn't error.\n\nany consumer of A will never install correctly.\n\n@evocateur Note there are no consumers of any of these packages other than themselves, they're not shared libraries, they're all components of a single app and internal to the monorepo.. Also relevant to this issue is this npm/yarn RFC for changing the file: semantics and adding link:  dependency specifiers: \n\nhttps://github.com/npm/npm/pull/15900\nhttps://github.com/yarnpkg/rfcs/pull/34. @ravicious tried latest version of lerna?. @ravicious\n\nI think yarn has recently stopped hitting the registry for symlinked packages, so as long as you run linklocal first to install the symlinks for file:../ dependencies then lerna bootstrap & other lerna/yarn commands appear to work just fine.\nMy bootstrap script looks something like this:\njson\n{\n  \"scripts\": {\n    \"bootstrap\" \"lerna init && lerna exec -- linklocal && lerna bootstrap --mutex=network\"\n    \u2026\n  }\n}. @jvivs I think that's more related to https://github.com/yarnpkg/yarn/issues/2541. ",
    "mxdubois": "It seems like packages are not published in topological order, either, which causes errors during my publish chain. It seems lerna retries packages that failed to publish and thereby recovers, but it would be a lot nicer to run in topological order.\nWould changing run to use topological ordering also fix publish? Is it used under the hood?. ",
    "justinr1234": "I'm still having this exact issue: fatal: mode change for packages/ironworks/src/server/api/schema.js, which is not in current HEAD. ",
    "Siilwyn": "Wow hyperfast response @thejameskyle! Do you want to use cross-glob-spawn in the Lerna codebase?\n. I'm working on it: https://github.com/Siilwyn/lerna/tree/cli-init-packages-dir. Prompting for the packages location is complex since the actual packages location for the config is a glob it could be nested or spread. I've opened a PR #970 to just create the packages directory when init is ran in an empty directory and to not act when the packages glob is configured. So it does not resolve this issue completely.... Yes.. This issue has been solved by the looks of it. Wanted to pick it up but the error message is pretty clear though a bit verbose now:\nlerna info version 2.0.0\nlerna info versioning independent\nlerna ERR! EPACKAGES JSONError: Trailing comma in object at 10:3 in modules/my-project-package/package.json\nlerna ERR! EPACKAGES   },\nlerna ERR! EPACKAGES   ^\nlerna ERR! EPACKAGES     at module.exports (/home/selwyn/codeground/my-project/node_modules/parse-json/index.js:27:17)\nlerna ERR! EPACKAGES     at parse (/home/selwyn/codeground/my-project/node_modules/load-json-file/index.js:8:29)\nlerna ERR! EPACKAGES     at Function.module.exports.sync.fp [as sync] (/home/selwyn/codeground/my-project/node_modules/load-json-file/index.js:11:29)\nlerna ERR! EPACKAGES     at Function.module.exports.sync (/home/selwyn/codeground/my-project/node_modules/read-pkg/index.js:40:25)\nlerna ERR! EPACKAGES     at /home/selwyn/codeground/my-project/node_modules/lerna/lib/PackageUtilities.js:125:47\nlerna ERR! EPACKAGES     at Array.forEach (native)\nlerna ERR! EPACKAGES     at /home/selwyn/codeground/my-project/node_modules/lerna/lib/PackageUtilities.js:119:86\nlerna ERR! EPACKAGES     at Array.forEach (native)\nlerna ERR! EPACKAGES     at Function.getPackages (/home/selwyn/codeground/my-project/node_modules/lerna/lib/PackageUtilities.js:118:22)\nlerna ERR! EPACKAGES     at Repository.buildPackageGraph (/home/selwyn/codeground/my-project/node_modules/lerna/lib/Repository.js:82:51)\nlerna ERR! EPACKAGES  Errored while collecting packages and package graph { JSONError: Trailing comma in object at 10:3 in modules/my-project-package/package.json\nlerna ERR! EPACKAGES   },\nlerna ERR! EPACKAGES   ^\nlerna ERR! EPACKAGES     at module.exports (/home/selwyn/codeground/my-project/node_modules/parse-json/index.js:27:17)\nlerna ERR! EPACKAGES     at parse (/home/selwyn/codeground/my-project/node_modules/load-json-file/index.js:8:29)\nlerna ERR! EPACKAGES     at Function.module.exports.sync.fp [as sync] (/home/selwyn/codeground/my-project/node_modules/load-json-file/index.js:11:29)\nlerna ERR! EPACKAGES     at Function.module.exports.sync (/home/selwyn/codeground/my-project/node_modules/read-pkg/index.js:40:25)\nlerna ERR! EPACKAGES     at /home/selwyn/codeground/my-project/node_modules/lerna/lib/PackageUtilities.js:125:47\nlerna ERR! EPACKAGES     at Array.forEach (native)\nlerna ERR! EPACKAGES     at /home/selwyn/codeground/my-project/node_modules/lerna/lib/PackageUtilities.js:119:86\nlerna ERR! EPACKAGES     at Array.forEach (native)\nlerna ERR! EPACKAGES     at Function.getPackages (/home/selwyn/codeground/my-project/node_modules/lerna/lib/PackageUtilities.js:118:22)\nlerna ERR! EPACKAGES     at Repository.buildPackageGraph (/home/selwyn/codeground/my-project/node_modules/lerna/lib/Repository.js:82:51)\nlerna ERR! EPACKAGES   stack: 'JSONError: Trailing comma in object at 10:3 in modules/my-project-package/package.json\\n  },\\n  ^\\n    at module.exports (/home/selwyn/codeground/my-project/node_modules/parse-json/index.js:27:17)\\n    at parse (/home/selwyn/codeground/my-project/node_modules/load-json-file/index.js:8:29)\\n    at Function.module.exports.sync.fp [as sync] (/home/selwyn/codeground/my-project/node_modules/load-json-file/index.js:11:29)\\n    at Function.module.exports.sync (/home/selwyn/codeground/my-project/node_modules/read-pkg/index.js:40:25)\\n    at /home/selwyn/codeground/my-project/node_modules/lerna/lib/PackageUtilities.js:125:47\\n    at Array.forEach (native)\\n    at /home/selwyn/codeground/my-project/node_modules/lerna/lib/PackageUtilities.js:119:86\\n    at Array.forEach (native)\\n    at Function.getPackages (/home/selwyn/codeground/my-project/node_modules/lerna/lib/PackageUtilities.js:118:22)\\n    at Repository.buildPackageGraph (/home/selwyn/codeground/my-project/node_modules/lerna/lib/Repository.js:82:51)',\nlerna ERR! EPACKAGES   name: 'JSONError',\nlerna ERR! EPACKAGES   fileName: 'modules/my-project-package/package.json' }\nThoughts?. Yes probably though I'd rather have a verbose error than miss information. That said isn't this outside the scope of this issue?. @evocateur fully agree. What I meant is that this issue is about missing information when invalid JSON is used, which is fixed. While to me the suggestions you bring up are applicable to errors from Lerna in general.\n@anfedorov please suggest this to the package responsible for the error parse-json.. @evocateur thanks! Ready for review again!. This would be great to have!\nFor now a workaround I'm using is amending manually like:\ngit stash\nlerna version --no-push\ngit stash pop\ngit add changelog.md\ngit commit --amend\ngit push --follow-tags\nWould be nice to be able to include staged changes.. I think this is unrelated to Lerna. Setting the npm token from your CI scripts can be done in multiple ways like: echo \"//registry.npmjs.org/:_authToken=$NPM_TOKEN\" > ~/.npmrc.. Assuming you are talking about the bootstrapping, yes with the flags: --ignore and --private. See npx lerna bootstrap --help for more information.. @evocateur excuse me, any idea on what could go wrong? Even if it's a hunch so I can try to debug this further. :)\n. @ThisIsMissEm the package.json and package-lock.json files because their version fields changed.. Oh wow great find @ThisIsMissEm! Much appreciated.\nI put that version script there because I like to commit my changelog changes with the version tag commit but anyway removing it fixes it.\n@meebix if your issue is not fixed by removing version lifecycle scripts that hinder the push please make a new issue.. Yeah could do, it's a bit of a footgun but I also feel it's pretty niche.. Could you clarify your question?. Ah I see, this looks like a duplicate of https://github.com/lerna/lerna/issues/1357.. This has nothing to do with Lerna.\nEnvironment variables are defined system wide if you read them during runtime on your Node.js server with process.env.YOUR_VAR it should just work.. I'm guessing this has nothing to do with Lerna itself, try looping over the package directories with a script or manually and running npm install and see if it's any faster. You could try out using Lerna + Yarn so it uses Yarn workspaces. Other than that look into your install logs and figure out which modules take the most time to install.. Thanks for the feedback!\nIt even returns A command is required. when given an incorrect argument like lerna nope. But it seems yargs has no way of preventing that.. So we're good to go right?\nThe CI is doing some funky stuff though, on master too so it's not related to these PR changes.. I'm actually calling it before so if it's not configured by the user no packages directory is made.\nEdit: never mind, looks like your intention is to create packages based on the configured glob.. ",
    "DxCx": "Big +1 for progressing with this patch,\ni was just about to do it myself and then i've found it..\nalready tested it and it works as expected.\nThanks @motiz88!\n. @hzoo @thejameskyle any chance it will be merged for beta.31?\n. I have 2 examples that im using:\n1. The project im contributing into is written in typescript, i want to install compiler globally not to specify it for each package.\n2. I have as devDepencey an external dependency which i want to ensure its exactly the same version for all packages.\nThis patch gives the power to define global tools/packages i dont see why its bad..\n. this is not progressing :( is there anything i can do to help progress with that?\n. So what do you suggest is the correct way of acheiving this behavior?\n1. One of the libraries im using have to be the exact same for all of the packages.\n2. I dont want to state common stuff (such as typescript, mocha, chai) on every package since all of them need it as part of infrastructure \n. it is much harder to keep dependencies updated once it is duplicated like you are suggesting.\nworking with top level is something we tried and there are issues with it.\nif this patch is not going to be merged we are going to look for other solution..\nthanks.\n. Thanks @doug-wade !\ni'll wait for the next lerna release and give it a try... yeah i know @doug-wade was watching the repo for it :) thanks!\nwill test it soon and share the experiance.... great news!\ni had out-of-the-box experience replacing the patched branch with beta.35 package.\nworks like a charm.\nthanks alot to you @doug-wade and to the rest of lerna team.\nIMO this PR can be closed unless @motiz88 isn't sufficient as i am.. . @xaka thanks alot!\n@evocateur any expectation when this will be released?. ",
    "olegskl": "\nIf you want to reference a single thing in each one why not just reference something higher up in the file system? ../../\n\nWe cannot do this. When developing locally on windows we'll have to write \"..\\..\\\" which will fail for people using linux.. We have tested it on Windows 7 and it doesn't work. The EOLs terminate the command on windows and we end up with just a \"Publish\" message:\n\nUsing JSON.stringify doesn't work either (throws an error, see below).\n\n. We had more success with this change: https://github.com/florianorpeliere/lerna/commit/86d53258ac084deb954daffca8a0081a593d7d0f. ",
    "SamyPesse": "Update: It doesn't look like something that can be done by lerna. I'll write a script in the repository to update all package.json files to fix versions according to the \"master\" version.\n. Here is the script I'm using:\n``` js\n! /usr/bin/env node\nconst fs = require('fs');\nconst path = require('path');\nconst lernaConfig = require('../lerna.json');\n// List all the packages\nconst PACKAGES_DIR = path.resolve(__dirname, '../packages');\nconst packages = fs.readdirSync(PACKAGES_DIR);\nfunction updateDependencies(dependencies) {\n    Object.keys(dependencies).map((key) => {\n        if (!packages.includes(key)) {\n            return;\n        }\n    dependencies[key] = lernaConfig.version;\n});\n\n}\npackages.forEach((name) => {\n    // Avoid .DS_Store\n    if (name[0] === '.') {\n        return;\n    }\nconst pkgPath = path.resolve(PACKAGES_DIR, name, 'package.json');\nconst pkg = require(pkgPath);\n\npkg.version = lernaConfig.version;\nupdateDependencies(pkg.dependencies);\nupdateDependencies(pkg.devDependencies);\n\nfs.writeFileSync(pkgPath, JSON.stringify(pkg, null, 3), 'utf-8');\n\n});\n```\n. Already fixed by https://github.com/lerna/lerna/pull/444. ",
    "develar": "My expectation was exactly the same \u2014 dependent package version should be fixed, not using ^ or ~ My main package is an aggregator of other packages and, so, I want to be sure that all are compatible and tested together, so, versions should be fixed.. ",
    "vitorbal": "I think this can be closed now that https://github.com/lerna/lerna/pull/426 was merged, which adds support for the --exact flag.. ",
    "duclet": "Wait, how does the bootstrapping helps here. Based on your example in the README.md, the symlink would be packages/babel-core/node_modules/babel-generator symlinks to packages/babel-generator but it really should be packages/babel-core/node_modules/babel-generator symlinks to packages/babel-generator/dist?. npm just publish a folder with a package.json file. It doesn't care how it is done. Many projects don't just publish the git repository but a dist folder only. That was the original question for this issue as I see it. Bootstrapping with the symlink does nothing to resolve the issue since it isn't even pointed to the right place. . @guscastro - I'm not sure if the mention of me is you agreeing with me (which seems like you do from your post) or you thinking I'm on the Lerna team and am refusing to make this change (I'm not on the team or else I would probably have made this change already). Though just based on where things are, I feel like this change will never happen. I end up just giving up on Lerna and using Yarn with a slight workaround as described below:\n\nUse Yarn and its workspace functionality with the workspace configuration as workspaces/*.\nKeep the actual monorepo packages under somewhere else like packages/.\nCreate symlinks from workspaces/{module-name} to the dist folder in packages/.\n\nObviously not ideal but as a workaround, it works.. main only allows specifying one file, not whole directory.. That only helps in publishing, not during development. Also, that would also just include the \"dist\" in the name.. And that is exactly why this whole issue was created for. . ",
    "chrislloyd": "I'd like to add to this and ask that an error is thrown in Lerna in addition to it being documented in the README. Currently if no version is specified in a package, Lerna defaults to installing from NPM  and the cause of this is non-obvious.\n. The package.json inside a package. I initially ran Lerna in fixed mode and assumed I only needed 1 version in the root package.json.\n. @davidgljay have you installed babel-jest in your dependencies? It doesn't look like it's in your package.json.\n. ",
    "dimaip": "@thejameskyle true, but I only found out about it after hitting this issue, and accidentally seeing this notice in npm docs. I myself always added it, but I was integrating Lerna in community code, and one of the packages had no version...\n. ",
    "mrfelton": "We use semantic-release for most of our packages and with it we use the recommended version string of \"0.0.0-semantically-released.0\". Lerna ignore packages with a version string like this (evn though it is a valid version string) and doesn't symlink those packages.\n. Agree that the abundance of so many tags is an issue, though I don't see how the @scope portion of the tag message is the cause of this.. ",
    "beeman": "Seems to work now, I just joined successfully \ud83d\udc4d \n. I'm not sure if it's related to hoisting or not, but I found that lerna works way better when the package locks are disabled.\nTo disable them in all packages managed by lerna you can run:\nlerna exec \"echo package-lock=false >> .npmrc\". ",
    "BenGale": "Hey All, any plans for when this will be merged in?. Just wanted to say I've switched back from our fork after this dropped and it's working great! Thanks for all the hard work guys, this project really makes a difference in the way we work.  . From a real quick look:\nCould be worth having a YarnUtilities and instead of importing the NPM one, import something that knows how to read the config (not read enough of the source yet to know how config is managed) and give back the correct implementation. Shouldn't be too bad as the commands needed map pretty well to each other from the looks of it.\nI might start spiking something like this in a bit, unless anyone can spot an obvious flaw?\n. I will take a look and find out, but to be honest I didn't check any PRs\nfirst. This is just a modification that we're using on our forked version.\nThought it could be useful for others.\n. We experienced this with beta 37, rolled back to 36 to avoid the issue for now.. ",
    "royJang": "version:independent\nnode-version:4.4.5\nnpm-version:3.10.8\n. ",
    "troianoandres": "Any news on this? I'm having the same issue as the one described. \nBasically when I try to publish some packages the command npm dist-tag ls <pkg> fails because of something unexpected into its JSON file (In my case it says Unexpected token y in JSON at position 0). \nFor some reason, npm guesses that I'm not logged as the right user.\nAfter all this, even with the error, the package is published as expected.\nIf you like I can add the error message with stripped information that might be useful for you.\nThanks!\nVersions\nlerna: 2.0.0-beta.30\nnode: v6.3.1\nnpm:  v3.10.3. ",
    "busybeaver": "same issue here:\nnode: v6.9.4\nnpm: 3.10.10\nlerna: 2.0.0-beta.37. ",
    "marvinhagemeister": "@laurentdesmet Just gave it a go and the hype is real! It's day and night between yarn and npm install times. I'm rooting for them to fix the remaining issues, most notably private and scoped package dependencies. They really did an amazing job!\n. ",
    "tomdale": "I would love to be able to use Yarn in one of my monorepo projects today, because it doesn't have any scoped or private packages. Not sure when the ETA for that landing in Yarn is, but if it's a ways out it would be a bummer to block Lerna support on it. I am losing days of my life to npm at present. \ud83d\ude2d \n. Yarn and Lerna are fantastic by the way. Y'all are killing it.\n. @marionebl Sounds good to me.. ",
    "iamchenxin": "Maybe should add an option in lerna.json for choosing npm or yarn?\n. ",
    "psirenny": ":disappointed: If only yarn supported scoped packages\n. @spudly was bootstrap working when you ran the command in the CLI? I was under the impression that if the version numbers were out of sync, that it would fail regardless if it was run behind an npm script or directly in the CLI.\nI'll have some time over the weekend to retry this and dump my npm-debug.log. I seem to remember it not containing very much info at all though.. > I struggle to identify a single use case where circularity is preferred. Tools certainly should not have dependencies on the packages they help build/develop. If they do, there is almost always a better module boundary to be drawn.\nI have a tools package that I use to build several other modules such as remark presets, etc. It would be helpful to be able to apply those built modules to the original builder package for things like linting it's readme file, etc. I've run into a bunch of use cases like that. My solution thus far has been to just maintain duplicate code in multiple packages (prone to error) or short circuit lerna and require code by file path manually.\nEdit: like others, the circularity seems to be limited to stuff related to dev dependencies.. ",
    "pi0": "Good news! I have made a wrapper package for npm which globally converts and wraps all npm commands to yarn, which fallback comp-ability to features like scoped packages :) \nPlease check out YarNPM\n..and yes! This is currently a WIP Project!\n. ",
    "ccorcos": "P.S. it appears Yarn might end up absorbing Lerna: https://github.com/yarnpkg/yarn/issues/946#issuecomment-264597575. ",
    "xaka": "What about instead of doing a complete switch, as it might take more time in order for community to benefit from yarn, we abstract npm install part and add an option to lerna.json to use either npm or yarn as installation mechanism? I might be wrong, but it seems it's matter of replacing npm install ... with yarn add ..... Is there anything that's blocking this PR? It's becoming important for our team as we're adding more and more packages to monorepo, and doing fresh bootstrap isn't option anymore. The problem is when you have packages A and B (depends on A), and you introduce new package C being used by first two, you have to manually toposort everything in your head and do scoped bootstrap to save time.. Would be nice to have another pre-release version with this change in \ud83c\udf86 It's big and important one.. would be nice to get this in! we're facing the same use case.... Just hit the same wall. It'd be nice to have an ability to re-link existing packages w/o going through the entire bootstrap.. That is because command substitution (whatever is between backticks) happens in current shell session before entire command gets executed. Same is for variable expansion. Try this (though node.js one-liner looks better):\nbash\nlerna exec -- bash -c 'basename $PWD'\nbash\nlerna exec -- node -e 'console.log(path.basename(process.cwd()))'\nIt's important to use single quotes so variable expansion doesn't happen in current shell session as well. Another thing to keep in mind is that lerna exec doesn't exec whatever you provide in shell and rather let you control, which is why bash -c is needed in first example.. @lukebatchelor. @evocateur please take another look; i wanted to add integration tests, but couldn't find proper way to capture arguments and do assertion - feels like there is need for mock npm client for that. Good call. Will do.. D'oh! Unfortunately we cannot move forward with yargs until there is fix for https://github.com/yargs/yargs/issues/682. Next version (hasn't been released yet) adds populate-- option to change the behavior, but it's unclear when it'll become available. Until then it's difficult to distinguish between positional arguments and arguments that simply haven't been parsed.. @evocateur ready for another round with integration tests included! thanks for patience \ud83c\udf7b . One test is failing and it says packages/package-1/node_modules/pify is expected to be installed, but when i manually run npm with same arguments, it doesn't happen. I'm confused.... Turned out it was lerna itself extracting and merging dependencies and devDependencies together, and passing it npm afterwards, which affected test at the end.. I ended up using fake npm client, which is less error prone, doesn't have side effects and comes with predictable behavior. Everything should stable now.. @evocateur knock knock!. @evocateur added another integration test for remaining arguments without npmClientArgs in lerna.json. @evocateur just couple months, no prob man \ud83c\udf7b \ud83d\ude04 next time i'll start with FB to bribe you first, hehe. It's kind of dangerous to install mocha in such way as you might end up with version different from what lerna uses? It also leads to pollution of global namespace. As mocha is already part of devDependencies and aliased via test script, you can do the following:\nbash\nnpm run test -- <path> # or any other cmd arg mocha understands. I'm using https://github.com/thlorenz/resolve-bin in multiple projects to get proper path to bin file.. nit: as the same might happen in other places, would it be more reasonable to let FileSystemUtilities.rimraf handle the case?. btw, i'd probably file a bug against rimraf as it claims to be an equivalent to rm -rf and it's not because -f makes rm to swallow the error while rimraf fails.. got it, thx!. As --npm-client-args is just a string and simply proxies everything to underlying npm client, it'll be:\nlerna bootstrap --npm-client=yarn --npm-client-args='--ignore-engine --flag1 --flag2 ...'. Do we want to isolate it to bootstrap command only? I thought it should be for all of them regardless of where npm client is used.. It seems accepting all args after -- is the lottery winner. My only concern is it's not very explicit and bootstrap isn't just a proxy of [npm | yarn] install so it might be confusing whether args get appended to entire flow of bootstrap or particular parts of it. \nI can live with that :). @evocateur what if both npmClientArgs and -- are provided, should we append one to another or replace? I vote for append as it'll work like \"common arguments you always want to pass\".. pify shouldn't be here, hmm. I sorted everything as I didn't know where to put new imports. unfortunately bootstrap doesn't proxy npm client output. ",
    "aymericbeaumet": "In the meantime you can use this workaround to install the dependencies with yarn and link them together with linklocal:\nbash\n$ yard add -D linklocal\nAnd in your root package.json:\njson\n{\n  \"scripts\": {\n    \"postinstall\": \"lerna exec --concurrency=1 -- yarn && lerna exec -- linklocal\"\n  }\n}\nThen:\n$ yarn. ",
    "julien-f": "@cpojer Any news on this? :). Thanks! :). ",
    "joshduck": "@cpojer Any more thought gone into this? We're using Lerna and would like to use Yarn too. Are the approaches likely to be compatible? A big blocker for us would be allowing non NPM packages.. Awesome to hear @thejameskyle. So it sounds like waiting for a blessed solution is the ideal instead of trying to hack around the issue ourselves? @cpojer Move the team to Brisbane and I'm on board!. ",
    "guigrpa": "Whether lerna is finally integrated into yarn or vice versa, in the meantime you can try this out: http://github.com/guigrpa/oao. I'd greatly appreciate any feedback!. Unfortunately, I can't link to that repo since it's private ;) But I've prepared two simplified repros here (lerna v2.0.0-beta.36, npm v3.8.5, node v7.3.0). The repros have been generated on Windows, but the same problem appears on OS X:\nExample 1: private from the start -- guigrpa/test-lerna1\n\nOn a new repo:\n\nsh\n  $ lerna init\n  Lerna v2.0.0-beta.36\n  Creating package.json.\n  Updating lerna.json.\n  Successfully created Lerna files\n\nCreate a couple of simple packages, packages/a and packages/b, initializing package.json with npm init and then setting private to true\nRun lerna bootstrap\nCommit -- this is the version you can see in the first repo, guigrpa/test-lerna1\nIf you now run lerna publish, you would expect lerna to prompt you for a new version (as happens when the packages are not private). Instead:\n\nsh\n$ lerna publish\nD:\\Prog\\test\\test-lerna1>lerna publish\nLerna v2.0.0-beta.36\nCurrent version: 0.0.0\nChecking for updated packages...\nErrored while running PublishCommand.initialize\nError: No updated packages to publish.\n    at PublishCommand.initialize (...\\lerna\\lib\\commands\\PublishCommand.js:98:18)\n    at PublishCommand._attempt (...\\lerna\\lib\\Command.js:198:21)\n    at PublishCommand.runCommand (...\\lerna\\lib\\Command.js:182:12)\n    at PublishCommand.run (...\\lerna\\lib\\Command.js:98:12)\n    at Object.<anonymous> (...\\lerna\\bin\\lerna.js:70:11)\n    at Module._compile (module.js:571:32)\n    at Object.Module._extensions..js (module.js:580:10)\n    at Module.load (module.js:488:32)\n    at tryModuleLoad (module.js:447:12)\n    at Function.Module._load (module.js:439:3)\nExample 2: public, then private -- guigrpa/test-lerna2\n\nOn a new repo: lerna init (as above)\nCreate a couple of simple packages, packages/a and packages/b, initializing package.json with npm init (we leave private unspecified first)\nRun lerna bootstrap\nCommit\nRunning lerna publish --skip-npm, it prompts for a new version number. We choose minor and confirm. As expected, Lerna updates the package.json files, generates a new git tag and a new commit (which in Windows has an incorrect commit message, btw.: $(echo v0.1.0))\nWe now make both packages private and commit\nWe also make modifications to both packages, e.g. creating new files in them, and commit again -- this is the version you can see in the second repo, guigrpa/test-lerna2\nIf we run lerna publish now, Lerna throws (just as in the first example), despite the updates\n. \n",
    "Scarysize": "Nice to see progress on this! I tried this on a lerna repo, sadly the installation just gets stuck on one package. What's a good way to debug this behaviour, I can't share the repository, but would like to help!\nYarn version is 0.21.3, lerna is of course beta.38. I'm on node 7.7.1 if this is relevant.. @gigabo Nice, seems like the PR is merged now. When can we expect another beta release?. Nice, thanks for the fast update.. ",
    "silenaker": "@Scarysize I tried the beta.38. Of course, i also failed on bootstraping but there is no problem now. you may need clean your yarn cache first. ",
    "billschaller": "lerna bootstrap --hoist is not symlinking binary deps when using yarn for me.. Yeah - for some reason, I run lerna bootstrap --hoist with npmClient set to yarn in lerna.json, I run the command once, and it sets up the symlink in the packages/thing/node_modules/.bin directory - if I run it again, it deletes the symlink and doesn't restore it.\nEdit: The behavior still happens if I use --concurrency=1, so it isn't a concurrency issue.. @gigabo oh, woot, thanks :). ",
    "guygadebois": "Forgot to add the specs:\n- lerna version: 2.0.0-beta.29\n- npm version: 2.15.9\n- NodeJS version: 4.6.0\n. It seems to me that it's the optional arguments that are dropped.\nJust tried lerna exec ls -al and it actually performs an ls, not an ls -al\nAlso tried to quote the command: lerna exec 'ls -al', but then nothing is performed at all.\n. Great, that syntax is working fine!\nDo you want to keep that issue open to track the documentation update?\nOtherwise this is good for me, and it can be closed.\nThanks!\n. Great! closing this\n. ",
    "mfellner": "@gre Have you tried hoisting everything? By default --hoist should add all dependencies to the root thus making it available to all packages (https://github.com/lerna/lerna#--hoist-glob).. ",
    "jasonLaster": "pong\n. Yep. Thanks!. I would think that glob would be the name of a package here, but it looks like it globs paths to find a package.json\n. it doesn't look like warning was defined\n. ",
    "aaronmcadam": "@chrisui The original idea was that Yarn might take on Lerna's functionality, but I think that idea died when issues like caching differences were raised. I've always had problems using Yarn with Lerna, so yeah, it would be good to see where it fits into the roadmap.. @Vincent2015 Try using this issue template to give everyone a bit more detail about your use case. I've made the required changes to that repo locally and see still see errors:\n0 silly input []\n1 silly flags { _: [ 'bootstrap' ], loglevel: 'silly', args: [] }\n2 verbose rootPath /Users/aaron/workspace/code/reference-implementations/learning-lerna\n3 info version 2.1.2\n4 silly existsSync /Users/aaron/workspace/code/reference-implementations/learning-lerna/VERSION\n5 silly initialize attempt\n6 silly initialize success\n7 silly execute attempt\n8 info Bootstrapping 3 packages\n9 silly installInDir learning-lerna\n10 silly installInDir /Users/aaron/workspace/code/reference-implementations/learning-lerna/package.json\n11 silly getExecOpts { cwd: '/Users/aaron/workspace/code/reference-implementations/learning-lerna' }\n12 silly installInDir [ 'yarn', [ 'install', '--mutex', 'network:57346' ] ]\n13 error execute Error: Command failed: yarn install --mutex network:57346\n13 error execute lerna info version 2.1.2\n13 error execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57348\n13 error execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57350\n13 error execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57351\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57353\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57354\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57356\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57358\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57359\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57361\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57363\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57365\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57367\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57368\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57370\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57371\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57373\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57375\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57377\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! executeerror Command failed with exit code 1.\n13 error execute lerna ERR! execute lerna ERR! execute yarn install v1.0.2\n13 error execute lerna ERR! execute lerna ERR! execute [1/4] Resolving packages...\n13 error execute lerna ERR! execute lerna ERR! execute success Already up-to-date.\n13 error execute lerna ERR! execute lerna ERR! execute $ lerna bootstrap\n13 error execute lerna ERR! execute lerna ERR! execute info Visit https://yarnpkg.com/en/docs/cli/install for documentation about this command.\n13 error execute lerna ERR! execute lerna ERR! execute\n13 error execute lerna ERR! execute lerna ERR! execute     at Promise.all.then.arr (/Users/aaron/workspace/code/reference-implementations/learning-lerna/node_modules/execa/index.js:236:11)\n13 error execute lerna ERR! execute lerna ERR! execute     at process._tickCallback (internal/process/next_tick.js:109:7)\n13 error execute lerna ERR! execute lerna ERR! execute  callback with error\n13 error execute lerna ERR! execute lerna ERR! execute  { Error: Command failed: yarn install --mutex network:57350\n13 error execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57351\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57353\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57354\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57356\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57358\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! executeerror Command failed with exit code 1.\n13 error execute lerna ERR! execute yarn install v1.0.2\n13 error execute lerna ERR! execute [1/4] Resolving packages...\n13 error execute lerna ERR! execute success Already up-to-date.\n13 error execute lerna ERR! execute $ lerna bootstrap\n13 error execute lerna ERR! execute info Visit https://yarnpkg.com/en/docs/cli/install for documentation about this command.\n13 error execute lerna ERR! execute\n13 error execute lerna ERR! execute     at Promise.all.then.arr (/Users/aaron/workspace/code/reference-implementations/learning-lerna/node_modules/execa/index.js:236:11)\n13 error execute lerna ERR! execute     at process._tickCallback (internal/process/next_tick.js:109:7)\n13 error execute lerna ERR! execute  callback with error\n13 error execute lerna ERR! execute  { Error: Command failed: yarn install --mutex network:57348\n13 error execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57350\n13 error execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57351\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57353\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57354\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57356\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57358\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57359\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57361\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57363\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57365\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57367\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57368\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57370\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57371\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57373\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! executeerror Command failed with exit code 1.\n13 error execute yarn install v1.0.2\n13 error execute [1/4] Resolving packages...\n13 error execute success Already up-to-date.\n13 error execute $ lerna bootstrap\n13 error execute info Visit https://yarnpkg.com/en/docs/cli/install for documentation about this command.\n13 error execute\n13 error execute     at Promise.all.then.arr (/Users/aaron/workspace/code/reference-implementations/learning-lerna/node_modules/execa/index.js:236:11)\n13 error execute     at process._tickCallback (internal/process/next_tick.js:109:7)\n13 error execute  callback with error\n13 error execute  { Error: Command failed: yarn install --mutex network:57346\n13 error execute lerna info version 2.1.2\n13 error execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57348\n13 error execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57350\n13 error execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57351\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57353\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57354\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57356\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57358\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57359\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57361\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57363\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57365\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57367\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57368\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57370\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57371\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57373\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57375\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57377\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! executeerror Command failed with exit code 1.\n13 error execute lerna ERR! execute lerna ERR! execute yarn install v1.0.2\n13 error execute lerna ERR! execute lerna ERR! execute [1/4] Resolving packages...\n13 error execute lerna ERR! execute lerna ERR! execute success Already up-to-date.\n13 error execute lerna ERR! execute lerna ERR! execute $ lerna bootstrap\n13 error execute lerna ERR! execute lerna ERR! execute info Visit https://yarnpkg.com/en/docs/cli/install for documentation about this command.\n13 error execute lerna ERR! execute lerna ERR! execute\n13 error execute lerna ERR! execute lerna ERR! execute     at Promise.all.then.arr (/Users/aaron/workspace/code/reference-implementations/learning-lerna/node_modules/execa/index.js:236:11)\n13 error execute lerna ERR! execute lerna ERR! execute     at process._tickCallback (internal/process/next_tick.js:109:7)\n13 error execute lerna ERR! execute lerna ERR! execute  callback with error\n13 error execute lerna ERR! execute lerna ERR! execute  { Error: Command failed: yarn install --mutex network:57350\n13 error execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57351\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57353\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57354\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57356\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57358\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! executeerror Command failed with exit code 1.\n13 error execute lerna ERR! execute yarn install v1.0.2\n13 error execute lerna ERR! execute [1/4] Resolving packages...\n13 error execute lerna ERR! execute success Already up-to-date.\n13 error execute lerna ERR! execute $ lerna bootstrap\n13 error execute lerna ERR! execute info Visit https://yarnpkg.com/en/docs/cli/install for documentation about this command.\n13 error execute lerna ERR! execute\n13 error execute lerna ERR! execute     at Promise.all.then.arr (/Users/aaron/workspace/code/reference-implementations/learning-lerna/node_modules/execa/index.js:236:11)\n13 error execute lerna ERR! execute     at process._tickCallback (internal/process/next_tick.js:109:7)\n13 error execute lerna ERR! execute  callback with error\n13 error execute lerna ERR! execute  { Error: Command failed: yarn install --mutex network:57348\n13 error execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57350\n13 error execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57351\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57353\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57354\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57356\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57358\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57359\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57361\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57363\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57365\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57367\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57368\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57370\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57371\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57373\n13 error execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\n13 error execute lerna ERR! executeerror Command failed with exit code 1.\n13 error execute yarn install v1.0.2\n13 error execute [1/4] Resolving packages...\n13 error execute success Already up-to-date.\n13 error execute $ lerna bootstrap\n13 error execute info Visit https://yarnpkg.com/en/docs/cli/install for documentation about this command.\n13 error execute\n13 error execute     at Promise.all.then.arr (/Users/aaron/workspace/code/reference-implementations/learning-lerna/node_modules/execa/index.js:236:11)\n13 error execute     at process._tickCallback (internal/process/next_tick.js:109:7)\n13 error execute   stack: 'Error: Command failed: yarn install --mutex network:57346\\nlerna info version 2.1.2\\nlerna info Bootstrapping 3 packages\\nlerna ERR! execute Error: Command failed: yarn install --mutex network:57348\\nlerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57350\\nlerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57351\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57353\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57354\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57356\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57358\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57359\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57361\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57363\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57365\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57367\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57368\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57370\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57371\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57373\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57375\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57377\\nlerna ERR! execute lerna ERR! execute lerna ERR! executeerror Command failed with exit code 1.\\nlerna ERR! execute lerna ERR! execute yarn install v1.0.2\\nlerna ERR! execute lerna ERR! execute [1/4] Resolving packages...\\nlerna ERR! execute lerna ERR! execute success Already up-to-date.\\nlerna ERR! execute lerna ERR! execute $ lerna bootstrap\\nlerna ERR! execute lerna ERR! execute info Visit https://yarnpkg.com/en/docs/cli/install for documentation about this command.\\nlerna ERR! execute lerna ERR! execute \\nlerna ERR! execute lerna ERR! execute     at Promise.all.then.arr (/Users/aaron/workspace/code/reference-implementations/learning-lerna/node_modules/execa/index.js:236:11)\\nlerna ERR! execute lerna ERR! execute     at process._tickCallback (internal/process/next_tick.js:109:7)\\nlerna ERR! execute lerna ERR! execute  callback with error\\nlerna ERR! execute lerna ERR! execute  { Error: Command failed: yarn install --mutex network:57350\\nlerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57351\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57353\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57354\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57356\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57358\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! executeerror Command failed with exit code 1.\\nlerna ERR! execute yarn install v1.0.2\\nlerna ERR! execute [1/4] Resolving packages...\\nlerna ERR! execute success Already up-to-date.\\nlerna ERR! execute $ lerna bootstrap\\nlerna ERR! execute info Visit https://yarnpkg.com/en/docs/cli/install for documentation about this command.\\nlerna ERR! execute \\nlerna ERR! execute     at Promise.all.then.arr (/Users/aaron/workspace/code/reference-implementations/learning-lerna/node_modules/execa/index.js:236:11)\\nlerna ERR! execute     at process._tickCallback (internal/process/next_tick.js:109:7)\\nlerna ERR! execute  callback with error\\nlerna ERR! execute  { Error: Command failed: yarn install --mutex network:57348\\nlerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57350\\nlerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57351\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57353\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57354\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57356\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57358\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57359\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57361\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57363\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57365\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57367\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57368\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57370\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57371\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57373\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! executeerror Command failed with exit code 1.\\nyarn install v1.0.2\\n[1/4] Resolving packages...\\nsuccess Already up-to-date.\\n$ lerna bootstrap\\ninfo Visit https://yarnpkg.com/en/docs/cli/install for documentation about this command.\\n\\n    at Promise.all.then.arr (/Users/aaron/workspace/code/reference-implementations/learning-lerna/node_modules/execa/index.js:236:11)\\n    at process._tickCallback (internal/process/next_tick.js:109:7)',\n13 error execute   code: 1,\n13 error execute   killed: false,\n13 error execute   stdout: 'yarn install v1.0.2\\n[1/4] Resolving packages...\\nsuccess Already up-to-date.\\n$ lerna bootstrap\\ninfo Visit https://yarnpkg.com/en/docs/cli/install for documentation about this command.\\n',\n13 error execute   stderr: 'lerna info version 2.1.2\\nlerna info Bootstrapping 3 packages\\nlerna ERR! execute Error: Command failed: yarn install --mutex network:57348\\nlerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57350\\nlerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57351\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57353\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57354\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57356\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57358\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57359\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57361\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57363\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57365\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57367\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57368\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57370\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57371\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57373\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57375\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57377\\nlerna ERR! execute lerna ERR! execute lerna ERR! executeerror Command failed with exit code 1.\\nlerna ERR! execute lerna ERR! execute yarn install v1.0.2\\nlerna ERR! execute lerna ERR! execute [1/4] Resolving packages...\\nlerna ERR! execute lerna ERR! execute success Already up-to-date.\\nlerna ERR! execute lerna ERR! execute $ lerna bootstrap\\nlerna ERR! execute lerna ERR! execute info Visit https://yarnpkg.com/en/docs/cli/install for documentation about this command.\\nlerna ERR! execute lerna ERR! execute \\nlerna ERR! execute lerna ERR! execute     at Promise.all.then.arr (/Users/aaron/workspace/code/reference-implementations/learning-lerna/node_modules/execa/index.js:236:11)\\nlerna ERR! execute lerna ERR! execute     at process._tickCallback (internal/process/next_tick.js:109:7)\\nlerna ERR! execute lerna ERR! execute  callback with error\\nlerna ERR! execute lerna ERR! execute  { Error: Command failed: yarn install --mutex network:57350\\nlerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57351\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57353\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57354\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57356\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57358\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! executeerror Command failed with exit code 1.\\nlerna ERR! execute yarn install v1.0.2\\nlerna ERR! execute [1/4] Resolving packages...\\nlerna ERR! execute success Already up-to-date.\\nlerna ERR! execute $ lerna bootstrap\\nlerna ERR! execute info Visit https://yarnpkg.com/en/docs/cli/install for documentation about this command.\\nlerna ERR! execute \\nlerna ERR! execute     at Promise.all.then.arr (/Users/aaron/workspace/code/reference-implementations/learning-lerna/node_modules/execa/index.js:236:11)\\nlerna ERR! execute     at process._tickCallback (internal/process/next_tick.js:109:7)\\nlerna ERR! execute  callback with error\\nlerna ERR! execute  { Error: Command failed: yarn install --mutex network:57348\\nlerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57350\\nlerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57351\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57353\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57354\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57356\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57358\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57359\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57361\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57363\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57365\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57367\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57368\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57370\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57371\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info Bootstrapping 3 packages\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute Error: Command failed: yarn install --mutex network:57373\\nlerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna ERR! execute lerna info version 2.1.2\\nlerna ERR! executeerror Command failed with exit code 1.\\n',\n13 error execute   failed: true,\n13 error execute   signal: null,\n13 error execute   cmd: 'yarn install --mutex network:57346',\n13 error execute   timedOut: false }. thanks @evocateur, removing the postinstall fixed it for me. ",
    "wldcordeiro": "@Pomax reading through their CI stuff they support 0.10, 0.12, 4, 5, and 6 but it may still be nice to add this section. \n. In researching this issue I got lead to this npm issue - https://github.com/npm/npm/issues/10379 which may be of relevance to others here.\n. From reading the release notes of 3.4.1 it looks like patches were made to address this issue?. There isn't one as far as I can tell, there is the breaking changes list in the changelog for 3.0 which I used. For most usage it seemed unchanged, publish though changed in what arguments exist and that was my biggest hurdle.. ",
    "Pomax": "Quite, especially since 0.x through 4.x use a wildly different approach from 6.x to where, and how, modules are located.\n. ",
    "davidgljay": "Thanks! It was a babel issue after all :). ",
    "kujenga": "@davidgljay Do you mind sharing the solution that you found? I'm running into this issue as well.. ",
    "AllenFang": "the modulePaths in jest config will be a workaround. ",
    "bobbwhy": "I am having this issue.\nI am working on a project and try to run the tests with lerna run test.\nI get this: \nCouldn't find preset \"@babel/es2015\" relative to directory \"/Volumes/sites/apis/pheme/pheme_modules/app\"\n(I renamed packages in the settings to [project_name]_modules for auto fill in convenience when using terminal) \nI have tried the modulesPath option, but the error is always the same, showing the same module search path.\nI have all babel deps bootstrapped with the --hoist option, so they are installed in the lerna root.\nThe test command is in the app package as: \n\"test\": \"jest --runInBand\",\nand the jest config in package.json is below: (You will see that I set the modulePath as root, just to see if i could get a different error);\n\"jest\": {\n    \"transform\": { \n      \"^.+\\\\.jsx?$\": \"babel-jest\"\n    },\n    \"modulePaths\": [\"/\"],\n    \"testRegex\": \"/test/index.js\"\n  }\nI also tried putting a symlink from [project]/node_modules/@babel to [project]/[package]/node_modules/@babel \nNothing.\nI am now going to try and transpile ahead of testing as per suggestion above.\nAny other ideas more than welcome.  I really want to make lerna work for me, but have lost many hours today on it.\nthank you,\nRobert\n. thanks for the reply... but actually i did that as well.  same error.\nnow trying to bootstrap without the hoist.... @evocateur : \nThanks again for your comment.  In the end, I went back to good ole mocha/chai for this.\nNot saying it is better, but the setup I hacked together for it months ago works here just fine.\nReason I switched was because Mocha/chai had some issues with async code a while back and Jasmine had nothing like runInBand... \nFor some reason the Mocha/chai issue I had before is not a problem ( yet.. maybe was fixed?  maybe i was doing something wrong? .) and it seems to run in sequence the async stuff properly, unlike jasmine..  \nbest,\nRobert\n. I think i had this issue.  I tried to redo the --scope command by including the @project/[package] \nThis seemed to work, but now when I try to work with the packages, i keep getting registry not found errors.\nthis was what I was trying to do: \nlerna add constants --scope=app\nThis gave me: \n\nNo packages found that match scope 'app'\n\nWhen that did not work, I tried\nlerna add constants --scope=@pheme/app\nwhich seemed to work.. but when I tried to yarn add into the app package, \nregistry error.\nHow can I reset the registry anyway? \nthanks\n. Thanks for the quick reply..\nActually, i am not using the public constants, but rather a sub package locally.\nI will rename it anyway, given the note.\nthe project is @pheme\nthe two packages I am working on are @pheme/app and @pheme/constants.\nThere are a set of more packages I want to add to this.\nI want to have the constants as a flat dependency, since it contains Symbols, which would be different if the constants package were included in the usual nested manner.\nthanks again for your help.\nRobert\n. ok... so: \nI renamed constants to universals, just to avoid conflict...\n$ lerna add @pheme/universals --scope=@pheme/app\nlerna info version 2.9.0\nlerna info scope @pheme/app\nlerna WARN No packages found in scope where @pheme/universals can be added.\nSo universals is in the packages directory and it has the name @pheme/universals in its package.json file....\n. interestingly, even with the error message, it actually made the symlinks and added this to the package.json for app.\n\"dependencies\": {\n    \"@pheme/universals\": \"^0.0.1\"\n  }\nSo that seems to work.... albeit a little rough... Lerna bootstrap was still looking for the package formerly known as constants, but i think i solved that by removing a third package i had in there.\n. ",
    "Steven-Evans": "https://github.com/lerna/lerna/pull/382 PR with possible changes. Works for me but may be sloppy? Thoughts are appreciated on both code and whether this should even be considered part of master.\n. I gave it a quick glance and it seems like it shouldn't be a problem. packages and packageGraph are still defined during runPreparations. \nAs per my comment on the PR, I'm going to create a new PR to remove the --quiet flag since @thejameskyle suggested the intent to remove the lerna version line of output altogether, which is somewhat unrelated to this.\nEdit: new PR https://github.com/lerna/lerna/pull/384\n. Closed in favour of https://github.com/lerna/lerna/pull/384\nDiscludes the --quiet flag\n. Probably a good idea. First PR actually. Can't seem to change the branch the PR is made from. I'll make a PR without the --quiet flag and hold on to that commit until it's removed.\n. Yep. It's definitely less cryptic than !~. \nAny plans to use ES7? It includes Array.prototype.includes which would be the ideal solution to checking for existence.\n. ",
    "ccrowhurstram": "Feature sounds very interesting... can you make sure it works with https://github.com/lerna/lerna/pull/365 when it lands (not sure if you need to anything, just a \"heads up\")\n. ",
    "Ciantic": "This could be a lerna issue, all other bin scripts in Windows looks like this:\ne.g. sha.js.cmd\n@IF EXIST \"%~dp0\\node.exe\" (\n  \"%~dp0\\node.exe\"  \"%~dp0\\..\\sha.js\\bin.js\" %*\n) ELSE (\n  @SETLOCAL\n  @SET PATHEXT=%PATHEXT:;.JS;=;%\n  node  \"%~dp0\\..\\sha.js\\bin.js\" %*\n)\nbut the ones Lerna has done looks like this:\ne.g. my-script.js.cmd\n@\"%~dp0\\..\\..\\..\\my-app\\my-script.js\"   %*\nThere is no node.exe checking at all.. I think pnpm would be a god send, if the hardlinking / symlinking can be made to work well.\nEspecially since copy on write file systems are not coming to consumer Windows anytime soon.. ",
    "kwelch": "Not sure if this is the same at all, but I am having similar issues with windows when attempting to lerna run test. The initial log line comes out that says the lerna version but nothing after. I had it running for 7 hours yesterday on a CI server without realizing. This worked fine on my MBP, but on the windows box I would not get it to work. Calling the scripts directly did work on the windows box. \nUpdate: I was able to switch the call to lerna exec -- npm run test and it works fine, but losses the safety check on run to ensure the script exists. I tried using a different logging level and still no output outside of the lerna version. \nThis is only an issue for me with test when I use lerna run build all works fine. . I am using lerna to manage a multi-page web app so each package is actually a section of the web app.\nSpecifically this is for a script at the top level that calls the RunCommand. I am looking to run the build script in each package and after all packages are build consolidate the artifacts into a single directory. \nThis may be anti-pattern as it seem there has not been much work on the node api side to allow for use within a script file. \nUpdate:\nThis is want I am attempting to allow \n```\nimport chalk from 'chalk';\nimport { commands as lerna } from 'lerna';\nconst command = new lerna.run(['build'], { loglevel: 'verbose' });\ncommand.run((err) => {\n  if (err) {\n    console.log(chalk.red(err));\n    process.exit(-1);\n  }\n  console.log(chalk.green('build complete, now move each package artifact to output dir'));\n});\n```. I am going to try a post script, it is less ideal but agreed it is safer.\nOn Tue, Dec 13, 2016, 4:45 PM Bo Borgerson notifications@github.com wrote:\n\nI wouldn't call it an anti-pattern, but it's definitely not well supported\nright now. I don't think it's part of the public API, either, so I worry a\nlittle bit about your relying on it. \ud83d\ude2c\nIs there a way you could use the CLI instead in your workflow?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/lerna/lerna/pull/437#issuecomment-266886303, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABPE3AlW9-C128WQ3IaOSt-8zztpLAiTks5rHx_1gaJpZM4LMTRy\n.\n. Would a PR adding a public api be something that the lerna team would want?\n\nShould be rather simple, just need a factory function around each of the classes that exposed commands. I would recommend also allowing for functionality from this PR of being able to add a callback to each command. . Closing as this has had no updates. . ",
    "billyzkid": "I get the same error using Lerna 2.0.0-beta.37 on Windows for the same reason stated above. Lerna fails to symlink one of my packages (with a bin script) during npm install because the build folder doesn't exist yet, since it doesn't get built until prepublish is run after install.\nsh\nLerna v2.0.0-beta.37\nIndependent Versioning Mode\nBootstrapping 7 packages\nPreinstalling packages\nInstalling external dependencies\nSymlinking packages and binaries\nFileSystemUtilities.symlink   (\"C:\\\\Code\\\\untitled\\\\packages\\\\untitled-scripts\\\\build\\\\index.js\", \"C:\\\\Code\\\\untitled\\\\packages\\\\ex...)\nError: ENOENT: no such file or directory, stat 'C:\\Code\\untitled\\packages\\untitled-scripts\\build\\index.js'\n    at Error (native)\nErrored while running BootstrapCommand.execute\nAnd this is the relevant part of my package.json\njson\n{\n  \"bin\": {\n    \"untitled-scripts\": \"build/index.js\"\n  }\n}\nI also workaround this issue by adding a bin folder with the script file that calls require(\"../build\").. Any idea on when when we can expect this fix to be merged? It looked like it was close for a minute and may be back in limbo again.. ",
    "kirikiwi": "I am still seeing this issue today as described above.\n*edit: this is on lerna 2.5.1 and looks something like this:\nlerna ERR! execute callback with error\nlerna ERR!\n(node:16988) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): Error: ENOENT: no such file or directory, stat 'C:\\Users\\Katie\\GitHub\\stupy.io\\packages\\@saymomo\\build\\webpack\\configuration\\typescript\\core-scripts\\dist\\debug.js'\n(node:16988) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\nnpm ERR! code ELIFECYCLE. I am still seeing this issue today as described above.\n*edit: this is on lerna 2.5.1 and looks something like this:\nlerna ERR! execute callback with error\nlerna ERR!\n(node:16988) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): Error: ENOENT: no such file or directory, stat 'C:\\Users\\Katie\\GitHub\\stupy.io\\packages\\@saymomo\\build\\webpack\\configuration\\typescript\\core-scripts\\dist\\debug.js'\n(node:16988) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\nnpm ERR! code ELIFECYCLE. ",
    "mgrenier": "This still happens on lerna v3.4.1. Seems like ./bin/my-command and ./bin/my-command.cmd that are generated from lerna are missing a lot of lines :\nFrom lerna :\n@\"%~dp0\\..\\..\\..\\..\\konstellio\\cli\\dist\\cli.js\"   %*\nTemporary fix to match what is generated from npm :\n@IF EXIST \"%~dp0\\node.exe\" (\n  \"%~dp0\\node.exe\"  \"%~dp0\\..\\..\\..\\..\\konstellio\\cli\\dist\\cli.js\" %*\n) ELSE (\n  @SETLOCAL\n  @SET PATHEXT=%PATHEXT:;.JS;=;%\n  node  \"%~dp0\\..\\..\\..\\..\\konstellio\\cli\\dist\\cli.js\" %*\n)\nNote that is for the *.cmd file but the linux executable also shows huge difference with the npm one.. ",
    "suhaotian": "Now it's work.\n. ",
    "besrabasant": "I faced this issue when I installed lerna using yarn. Reinstalling using npm solved the issue.. ",
    "hewentaowx": "@suhaotian When I used yarn I also encountered this problem but replaced npm to solve the problem. ",
    "Nandanchaturvedi": "@suhaotian how did you solve this issue ? \n. ",
    "rajeshkumarsampath": "I had this issue even with npm. By explicitly adding C:\\Users\\yourusername\\AppData\\Roaming\\npm to the PATH variable under System Variables in environment variable solves the issue for me.. ",
    "jaquesgrobler": "npm instead of yarn fixed it for me in this case. ",
    "traviskaufman": "if it helps at all, we've frankenstein-ed together some scripts to assist us with this manually. We basically print out what we believe the new versions should be, which we could then use to manually update lerna. I'd love to be able to turn these tables into a machine-readable format which we could pass off to lerna, whether that's by formatting them as CLI flags or some other method.\n. I was thinking as a publishConfig option. Something like publishConfig.customCommitMessage . \nDo you think the custom message should overwrite the entire commit message, or just the subject? It looks like for independently-versioned repos lerna adds all of the tags it will create to the commit message body. It seems like this would be okay to overwrite but I'm not sure if there are other mechanics that rely on this being present.\n. ^ sorry this took me so long to get around to. Lmk if there's any docs I've missed and/or if there's any part of the feature impl I've overlooked.. As @doug-wade mention this patch should only change the commit message, leaving the tags alone. I believe this is verified since the tests I wrote for this use the same tag names as other tests and pass. If there's anything else that needs to be done let me know. Otherwise, it would be great if we could merge this soon! Our codebase is in need of it :) \n. Friendly ping! \ud83d\ude04 . \ud83d\udd14 \ud83d\ude04 . \ud83d\udd14 \ud83d\ude04 . Merge conflicts fixed. Thanks for the review!. Been waiting for something like this to land \ud83d\ude4c I'm hoping it can replace a lot of the infra we built manually to do this ourselves. Thanks @bcoe and @evocateur!. ",
    "vampolo": "Any update/workaround on this?. It might. but i'm not sure how.\nThe workflow i would like to achieve is to have devs be able to bump versions manually and then, after CI tests and validation, run lerna publish in CI. This will publish the packages that changed.. ",
    "GeorgeTaveras1231": "Would love to see this implemented. Unfortunately, I don't have the time to implement this myself, however, I wanted to share a somewhat hacky solution to programmatically update independently versioned packages. I created a POC script which given a map of package names pointing to a number representing the location of the bump strategy on the prompt, will programmatically answer the prompt. Needless to say, this is very hacky, as arbitrary changes to how the prompt is presented could break this script.\n```js\nimport childPty from 'child_pty';\nimport { EOL as ENTER } from 'os';\nconst PATCH = '1';\nconst MINOR = '2';\nconst MAJOR = '3';\nconst publish = childPty.spawn('yarn', 'lerna publish'.split(' '));\n/ package to bump strategy map /\nconst updateMap = {\n  '@xo-union/sdk-membership': MINOR,\n  '@xo-union/store-conversations-redux': MAJOR,\n  '@xo-union/store-membership-redux': PATCH,\n  '@xo-union/store-membership': MINOR,\n  '@xo-union/tk-component-core-provider': MAJOR,\n  '@xo-union/tk-component-header-nav-redux': MINOR,\n  '@xo-union/tk-component-membership-modal-redux': PATCH,\n  '@xo-union/tk-component-vendor-card': MAJOR,\n  'union-release': PATCH\n};\nconst alreadyAnswered = {};\npublish.stdout.on('data', (data) => {\n  const string = data.toString('utf8');\nconst waitingForAnswer = string.indexOf('Select a new version for') >= 0;\nif (waitingForAnswer) {\n    const packageName = string.match(/Select a new version for ([^\\s]+)/)[1];\nif (!alreadyAnswered[packageName]) {\n  const key = updateMap[packageName];\n  publish.stdin.write(key);\n  publish.stdin.write(ENTER);\n\n  alreadyAnswered[packageName] = true;\n}\n\n}\nif (string.indexOf('Are you sure you want to publish the above changes?') >= 0) {\n    / Start accepting input, to allow user to confirm /\n    process.stdin.on('data', (data) => publish.stdin.write(data));\n/**\nif continous deployment:\n publish.stdin.write('y');\n publish.stdin.write(ENTER);\n**/\n\n}\nprocess.stdout.write(data);\n});\npublish.on('close', function () {\n  process.stdin.pause();\n});\n```. @evocateur You are right but adopting conventional commits means forcing developers into the conventional commit workflow (for both developers and reviewers) that could cause confusion and production issues if not monitored carefully. We are weighing that option against an option to use a simpler method of storing the next-release metadata in YAML files, which has the benefit of being simpler to review (as our developers primarily focus on reviewing files in PRs), and simpler to edit in the case of mistakes.\n\nDepending on who you speak to, knowing how to navigate git fluently enough to not cringe at the thought of editing old commits, should be a requirement for all developers -- but from my own experience, I've found that many (especially new) developers really struggle with this skill.. Plus one on the skip feature. . @achingbrain was going to work on this myself but glad to see you got this.\n\nAdditionally, I wanted to raise a concern with the lerna maintainers about the role that the canary option value is playing and whether it also needs to be used as the pre-id, even though there is already a flag to define the pre-id. It's not a huge deal but it just feels inconsistent and my response was \ud83e\udd14 when I realized I could not use --pre-id for this.. (Just my opinion): This condition does not depend on the pkg argument (the subject of the filter) so it would be much clearer to understand how this condition affects collectUpdates if it was taken out of the filter callback. If I'm understanding this correctly, when canary is specified and since isn't, collectUpdates will collect all packages. This would be much clearer if written something like:\n```js\ncollectUpdates() {\n  const shouldCollectAllPackages = this.options.canary && typeof this.options.since !== 'string';\n  let collectedPackages = this.packages;\nif (!shouldCollectAllPackages) {\n    collectedPackages = this.packages.filter((pkg) => {\n      return this.updatedPackages[pkg.name] || this.options[SECRET_FLAG] ? false : this.dependents[pkg.name];\n    });\n  }\n/ Omitted /\n}\n```. This line conflicts with #1020. Just a heads up.. ",
    "ilkkahanninen": "I think it's a good idea to add devDependencies to --include-deps. That way it works as users expect it to work.\n. ",
    "bclinkinbeard": "Is there anything I can do to get this looked at/approved?\n. I just submitted https://github.com/lerna/lerna/pull/393 which changes packages to an array of globs and does not require package.json to be specified, since I think that can be assumed. I also added a basic explanation to the README.\n. The tests in #393 pass locally and on Travis, so I'm assuming the Appveyor failures are on their end. Is there anything else I can do to improve the PR?\n. Thanks @darrylhodgins, I just pushed that up. :fingers-crossed:\n. ",
    "liamcurry": "It does look like this is a feature in the master branch with the --loglevel args, but trying to install from github gives an error:\n``\n$ npm install --save-dev git://github.com/lerna/lerna.git\n$npm bin`/lerna\nmodule.js:471\n    throw err;\n    ^\nError: Cannot find module '../lib/index'\n    at Function.Module._resolveFilename (module.js:469:15)\n    at Function.Module._load (module.js:417:25)\n    at Module.require (module.js:497:17)\n    at require (internal/module.js:20:19)\n    at Object. (/home/sagan/Dropbox/Projects/radio-dev/node_modules/lerna/bin/lerna.js:3:13)\n    at Module._compile (module.js:570:32)\n    at Object.Module._extensions..js (module.js:579:10)\n    at Module.load (module.js:487:32)\n    at tryModuleLoad (module.js:446:12)\n    at Function.Module._load (module.js:438:3)\n```\nBecause the lib folder is missing from the repo I guess?\n. ",
    "seb0zz": "The lib folder is generated during npm run build which will be executed before every npm publish. I also wanted to checkout the master so my guess was to trigger an npm run build in the lerna directory during my postinstall hook. The problem is that the src directory does not come with npm install (see .npmignore). Could we remove the src directory from this file? Would make working on the master much easier.\n. ",
    "iantanwx": "@thejameskyle just dropping in to let you know I'll try to recreate this issue. We moved that npm package into our lerna repository and the issue went away. It could be a travis cache issue. Little bit slammed at work but I'll do it over the weekend.\n. ",
    "skevy": "@BenGale how does this differ from #365 ?\n. ",
    "ben-eb": "Resolved in https://github.com/lerna/lerna/issues/427.. @wtgtybhertgeghgtwtg babel-plugin-module-resolver makes option 3 more viable. \ud83d\ude04 \nhttps://github.com/tleunen/babel-plugin-module-resolver. I'm not sure that the test failure is related to this patch but it was passing locally - also it's passing on AppVeyor.... We could change \"n/a\" to be something more actionable if you like. Maybe a yellow \"missing\" instead?. @evocateur Updated. We can probably squash the history for this branch. \ud83d\ude04 . Heh, no worries. \ud83d\ude04 . ",
    "swashcap": "\u2757\ufe0f\ud83d\ude31 Nice catch!\n. I\u2019m seeing the same thing for MRN-Code/coinstac, where we depend on non-private repos. Here\u2019s the output:\n```shell\n$ node_modules/.bin/lerna bootstrap\nLerna v2.0.0-beta.32\nBootstrapping 8 packages\nPreinstalling packages\nEncountered a cycle in the dependency graph. This may cause instability!\nInstalling external dependencies\nNpmUtilities.installInDir     (\"./packages/coinstac-common\", [\"decentralized-single-shot-ridge-regression@github:mrn-code/decentral...)\nCommand failed: npm install decentralized-single-shot-ridge-regression@github:mrn-code/decentralized-single-shot-ridge-regression laplacian-noise-ridge-regression@github:mrn-code/decentralized-laplacian-ridge-regression#v3.1.0\nErrored while running BootstrapCommand.execute\nCommand failed: npm install decentralized-single-shot-ridge-regression@github:mrn-code/decentralized-single-shot-ridge-regression laplacian-noise-ridge-regression@github:mrn-code/decentralized-laplacian-ridge-regression#v3.1.0\nWaiting for 1 child process to exit. CTRL-C to exit immediately.\n...\n```. ",
    "taion": "I'm not sure they're mutually exclusive. Presumably you still want to hide progress bars \u2013 unless you want to modify the other checks for NODE_ENV as well.\n. This ought not be a blocker with Circle. Just do\nyml\ndependencies:\n  override:\n    # Circle sets NODE_ENV to test by default, which messes with both Lerna and\n    # babel-plugin-dev-expression.\n    - unset NODE_ENV\n    - npm i. This is the check in npm: https://github.com/npm/npm/blob/v4.0.5/lib/npm.js#L282. char-spinner only checks isTTY though: https://github.com/isaacs/char-spinner/blob/v1.0.1/spin.js#L5-L10. the progress bar does look a bit wonky in CI logs. wonder if there's a better flag here... maybe env.CONTINUOUS_INTEGRATION or something. it's irrelevant to this PR anyway, just a quirk i noticed after i unset NODE_ENV on circle. probably best to add a FIXME and sort this out later, since it's not that important. ",
    "timdp": "After looking at the code, I wrongfully assumed that NODE_ENV=test would just hide the progress bars, and then I ended up not noticing broken tests. So I'd like to second what @taion said.. Wasn't there talk of folding monorepo functionality into yarn at one point? That'd make this PR obsolete, right?. Interesting, thanks! :+1:. ",
    "dfabulich": "Is there an issue/PR/doc about this merge on Yarn's side?\n. ",
    "mAAdhaTTah": "I have a question related to this: What are the ticket(s)/issue(s) that are keeping this from coming out of beta? We've been using WebPack@beta2 for a bit, and using beta software burned me a few times, so while I'm considering lerna as a solution for some pain points we're experiencing with separate repos, but I'm hesitant given the beta tag.. Pull the plug?! I'm assuming you mean pull the trigger :) . I'll also add that I have the packages versioned independently.. Yeah, that appears to resolve the issue. Updated the name to match the fix.. I am. I'll take a look at implementing if I get some time. . @evocateur Yes, that's correct, my mistake.\nNo, I'm not using the --registry flag. It publishes to the correct registry, it fails at what appears to be a post-publish verification step. The post-publish verification step is using the value in npmrc when it should be using publishConfig.registry.. Yeah... It returns a 400 error and tells you to check the local registry :/ \u2013 but I doubt I can get them to fix their setup.\nI'll add that to my lerna.json and close this if it resolves the issue.. Adding the registry to the lerna.json worked without errors. Is there a way to make --skip-temp-tag the default? I'm not sure what the purpose of that is or why/if it's necessary.. Adding the registry to the lerna.json worked without errors. Is there a way to make --skip-temp-tag the default? I'm not sure what the purpose of that is or why/if it's necessary.. Great, subbed to that issue. Closing this one, cuz the main issue here is resolved by adding the command.publish.registry to my lerna.json.. Great, subbed to that issue. Closing this one, cuz the main issue here is resolved by adding the command.publish.registry to my lerna.json.. Wouldn't this force the first publish to be 1.0.0, if it increments from what's currently there?. Wouldn't this force the first publish to be 1.0.0, if it increments from what's currently there?. Sorry, typo on my end, I meant force the first publish to be 1.0.1 minimum, since it increments. My b.. Sorry, typo on my end, I meant force the first publish to be 1.0.1 minimum, since it increments. My b.. I think I'm running into a similar situation. I'm using lerna 3.0.0.rc-0, and I'm attempting to publish the first prelease version of what will eventually be 1.0.0 (so 1.0.0-alpha.0). I did the bump itself in this commit, but when I run the command as shown in package.json with yarn pub, I see the below:\n\nSelecting prerelease gives me this:\n\nI feel like I'm missing something obvious. Ideas?. I set preid in the command config in lerna.json. Also, it doesn't allow me to specify 1.0.0-preid.0; it looks like it's going to stick it on the end of 0.11.7.. Yeah... I'm having this issue as well. The ^C not rolling back tags is fine, but it doesn't seem to terminate the process either.. Part of problem is we can't even conceive of \"politics\" outside of the \"left-wing/right-wing\" schism, and don't realize how a comment like the below is indicative of software's inherent politics, not an argument against it.\n\nDevelopers create things to be used by the masses, which in turn get used by all sorts of people and companies.\n\nWhat technology enables, both in regards to free software principles as well as user affordances, is an active decision made by the creators of software about what power we should give to our users.\nAnd questions of power are always political.. The purpose isn't objectivity, it's transparency.. @nls0 Those questions aren't relevant to the thread. You'd have to ask Jamie himself.. > Feel free to show appreciable change as a result of this.\nI would refer you to this comment. Up to you whether you consider this \"appreciable,\" but I suspect because you don't see direct, large results (e.g. MSFT didn't turn around and cancel its ICE contracts), you're not likely to consider this \"appreciable.\" I personally think this action has definitely moved the needle on this issue.\n\nYes, only people with no vested interest in this can be involved in the decision making. That makes a ton of sense.\n\nCourt judges recuse themselves from decisions involving conflicts of interest all the time. The idea that one might have such a conflict and thus should not be involved in the decision is not particularly far-fetched.\nThat said, I don't really have a problem with his involvement here. Sean is well-versed in open-source and would be worthwhile to consult regarding the impact of this decision.. @hallister I'm inclined to view this like a roach: one person visible is indicative of a lot more you don't see. The point is that this caused at least one person to publicly say \"this resulted in me fighting to oppose ICE contracts.\" I believe that's resulted in a lot more people than just him doing similar things. I know I've had a few conversations with people who hadn't previously considered the issue before this.\n\nJamie already had a conflict of interest in targeting specific companies he didn't like.\n\nThat's not a conflict of interest. Judges don't recuse because of what they believe; they recuse themselves because they have a material interest in the result of the ruling, e.g. they've invested stocks in the companies involved. You're correct that nobody is independent, because no one is objective, but conflicts of interest and lack of independence are not synonymous.\n\nAll of that said, we're getting off topic from the purpose of the thread. I'm happy to continue this offline if you'd like.. ",
    "sbryfcz": "Just wanted to say that I'd love #412 to get merged. Very typical in the micro-repos that I create to have a number of small packages and one that bundles them all into a single place. Would love to be able to run my build scripts and then perform a publish. But as you know, lerna run doesn't preserve the toposort order so things get built out of proper sequence. Thanks for all the hard work! Love this library.. Awesome work! Looking forward to the merge.. Yeah. The --skip-git command will prevent any git commands. I use it with TFS repository. I also use it with a private npm repository. My private repo has some issues (that I'm tracking down) so I disable npm with --skip-npm. At it bundles up my packages, I execute npm publish in every package.\nMy publish command is typically:\n\nlerna publish --skip-git --skip-npm --force-publish * --yes && lerna exec -- npm publish. \n",
    "avindra": "Ignore this, turns out all you have to do to make a package scoped is change the \"name\": \"myname\" in package.json to \"name\": \"@org/myname\". ",
    "rastasheep": "Thanks @L8D for the work around. I have same situation as you.\nIs this something that can be addressed, or should be solved by adding some clarification in the docs? Personally i hoped that --skip-git will skip reseting git state as well.. ",
    "karliky": "I'm facing this situation too and would be great if an argument like this exists.. ",
    "vovaguguiev": "The description of it is here https://github.com/npm/npm/releases/tag/v4.0.0 under the \"NEW prepare SCRIPT. prepublish DEPRECATED (BREAKING)\" section. Unfortunately, I didn't find any section in the documentation about that. \nAfter a closer look, I figured out that prepublishOnly wouldn't serve our needs because of its behavior that doesn't make any sense to me but looks like is intended. The thing is: the files generated in the prepublishOnly script are not included in the tarball during publishing (https://github.com/npm/npm/issues/15147) which kills the whole idea of using prepublishOnly as a replacement to prepublish.\nAlthough prepublish is deprecated now and is renamed to prepare, so maybe we should add support for prepare scripts nevertheless.. @gigabo sure I can pick it up, but let's agree on the logic. Should it be:\n1. prefer prepare, if not present then try prepublish\nor \n2. check the npm version, if <4 go for prepublish (don't try to prepare), otherwise do 1.\nWhat sounds more logical to you?\n. @gigabo that sounds reasonable. @gigabo \n\nAnd I guess if prepublish is totally de-supported in npm 5 we should eliminate the fallback there entirely. \n\nLooks like they want to bring prepublish back in npm 5 and replace prepublishOnly with it, so I don't think we need to eliminate the fallback for npm@5. > Thanks so much for contributing @wizardzloy. I don't think we can merge this without the corresponding change to publish to call prepublishOnly, though.\ndo you mean the changes to lerna publish?. @evocateur in my opinion, these lifecycle hooks should be overridable on the level of each package. \nWith the proposed approach is it still possible, but not very user-friendly:\n{\n  \"lifecycle\": {\n    \"pretag\": \"cd ${LERNA_PACKAGE_LOCATION} && npm run mypretag\"   # will fail if there is no \"mypretag\" script\n  }\n}\nMaybe we should run the lifecycle hooks already in the package directory and use name of an NPM script as a config option:\n{\n  \"lifecycle\": {\n    \"pretag\": \"mypretag\"  # default value is \"pretag\"\n  }\n}\nWe can still inject the ENV variable in there and we can also check if the script with this name is actually present in the package.json and use standard behaviour (e.g. prompt for the version) if not.\nRegarding the naming of the hooks, please be aware of this potential issue in case of using preXXX and postXXX names. . @nicojs just set the \"lerna\" field in your lerna.json to 2.0.0-beta.38-38-g8c7deb7 and it should work. @noherczeg --skip-temp-tag flag does the trick for Nexus. The reason behind this check was discussed here. We, actually, just want to behave the same as your current instance of npm. . ",
    "cmroanirgo": "Adding 2c. I think @evocateur's is the way to go. \nThat is, in this interim period then both prepublish/prepare as well as prepublishOnly/prepublish needs to be handled correctly according to the current npm installation, otherwise I envisage a large mess, and lots of strange errors (and the resulting support questions).\nI for one ended up here because I'd used prepublishOnly in my packages (only to find out that lerna doesn't really support it properly yet!). Hence, I've changed my scripts to be prepublish, but I don't want prepare equivalency.. ",
    "FezVrasta": "Are there updates on this? I'm using prepare to compile all my packages' sources but Lerna doesn't still seem to run the prepare script on bootstrap.. Nope, I need to keep the package.json and the lerna config in that folder as well \ud83d\ude1e. I noticed that if I let lerna use npm instead of yarn everything works fine.. I found out this error inside yarn-error.log of one of the packages:\nError: https://registry.yarnpkg.com/babel-cli/-/babel-cli-6.24.0.tgz: ENOENT: no such file or directory, open '/root/.cache/yarn/v1/npm-babel-cli-6.24.0-a05ffd210dca0c288a26d5319c5ac8669a265ad0/.yarn-tarball.tgz'\nI'm not really sure but it may be related to https://github.com/yarnpkg/yarn/issues/2629. I was able to create a repro to let you try it yourself:\nhttps://github.com/FezVrasta/docker-yarn-lerna-bug\nI opened an issue on the Yarn repository as well because I'm not sure who's fault...\nhttps://github.com/yarnpkg/yarn/issues/3104\nit could be related to https://github.com/yarnpkg/yarn/issues/683#issuecomment-267953198.\nUpdate:\nsetting concurrency=1 on lerna bootstrap everything works... I guess it's mostly a Yarn problem at this point?. Thanks for the tip! Unfortunately it doesn't provide any useful info :-(\n\u276f lerna bootstrap --loglevel=silly\nlerna sill input []\nlerna sill flags { _: [ 'bootstrap' ], loglevel: 'silly', args: [] }\nlerna verb rootPath /Users/federicozivolo/Acme/repos/stacks/ui-framework\nlerna info version 2.2.0\nlerna sill existsSync /Users/federicozivolo/Acme/repos/stacks/ui-framework/VERSION\nlerna sill initialize attempt\nlerna WARN ECYCLE Encountered a cycle in the dependency graph. This may cause instability!\nlerna sill initialize successlerna sill execute attempt\nlerna info Bootstrapping 16 packages\nlerna sill installInDir ui-framework\nlerna sill installInDir /Users/federicozivolo/Acme/repos/stacks/ui-framework/package.json\nlerna sill getExecOpts { cwd: '/Users/federicozivolo/Acme/repos/stacks/ui-framework' }\nlerna sill installInDir [ 'yarn', [ 'install', '--mutex', 'network:42424' ] ]\n(it gets stuck there for several minutes)\nI checked my dependencies manually but I couldn't find any circular dependency \ud83d\ude1e. Thanks, logging packages it points to a fork of testcafe-reporter-datadog, which has a devDependency to a custom eslint config we maintain in our monorepo.\nBut that dependent package doesn't have any dependency to any of our other lerna packages, so I'm not sure where the ECYCLE error comes from...\nIs there anything I can do to help me (and the project) to debug the problem? Unfortunately I can't share the repository because it's a private one.. Oh nevermind, found it out. The package was dependent on itself :-|. I created a PR to add some additional logging, I'm not sure how helpful can it be... I guess better than nothing. Sorry I forgot to update the issue, it's actually (I think) a Yarn issue, there was something off with the authentication, but yarn was all happy thinking everything was fine, if I ran yarn with --verbose it reported a 401 error on the put command... I think yarn should throw an error there rather than letting people think everything was fine.. Thanks for the info! I'll update . ",
    "akosyakov": "Any updates on it?. @spudly thanks for the pointer! i use typescript, let's see maybe tslint has a similar rule. @evocateur Could such simple solution work:\n- hoist dependencies not to the root but a directory that does not participate in node module resolution for local packages;\n- link all dependencies, including transitive, of local packages to this directory\nSince node resolution follows symlinks and resolves from the linked location:\n- dependencies should be properly resolved via hoist/node_modules\n- at the same time, local packages cannot directly access all hoisted packages as now, but only declared in package.json and their transitive dependencies\nE.g:\n- project\n  - lerna.json\n  - hoist\n    - node_modules\n      - dep1\n      - dep2\n      - dep3 the transitive dep of dep2\n    - yarn.loc\n  - packages\n    - foo\n      - node_modules\n        - dep1 -> ../../../hoist/node_modules/dep1\n    - bar\n      - node_modules\n        - dep2 -> ../../../hoist/node_modules/dep2\n        - dep3 -> ../../../hoist/node_modules/dep3 transitive\n    - baz\n      - node_modules\n        - foo -> ../../foo\n        - baz -> ../../baz\n        - dep1 -> ../../../hoist/node_modules/dep1 transitive\n        - dep2 -> ../../../hoist/node_modules/dep2 transitive\n        - dep3 -> ../../../hoist/node_modules/dep3 transitive. Does anybody try: https://github.com/lerna/lerna/issues/178#issuecomment-261736824?. It did not work for me either, so I've found a solution with all dependencies hoisted for my issue.. i think file: is not actually necessary, one can do:\njson\n{\n  \"dependencies\": {\n    \"lodash\": \"../../node_modules/lodash\"\n  }\n}\nI would check npm repo how they test whether a version is a local path.. ",
    "MiguelMadero": "@doug-wade  @dmfenton any update here? \nWe have a mono where all packages are private and looks like this is the only reason why yarn doesn't work on its own, we can only install through lerna. I would be happy to look into the blocking issues if nobody is actively working on it. Looks like the only blocker if we do this for not private packages\n. I think https://github.com/lerna/lerna/pull/425 may help with this since yarn can work with relative paths and lerna would still symlink them. . Looks like https://github.com/lerna/lerna/pull/425 could help with this. . After further testing, I realized this was an issue on my side and I had some unexpected dependencies. . ",
    "CapitanRedBeard": "@MiguelMadero Our private repo would also benefit from the use of this PR. I think the only developer concern was \n\nI think I want to see an error or warning emitted if there is a relative import in a module not marked \"private\" before we merge.\n\nHave you looked into this?. @nkbt Thanks for the script. Publishing is not ideal when dealing with private repos. Care to share what your Dockerfile looks like?. @evocateur I understand your opposition to boilerplates and their tedency to be abused, however I think base examples with the standard tech that @haraldrudell would be highly helpful (Since this is not a trivial problem). Perhaps a good way to go about this is have a best practices section in the readme that we can keep minimal to avoid it being abused as the bible. \nI'm currently working through getting most of the above tech that is discussed in this thread to behave properly, if I'm able to get it working properly would you be opposed to PR to illustrate the basic use case for the good of the community? \nBTW appreciate your hard work on this module.. ",
    "nkbt": "We'd love to have this one in too, since we never use ^ versions anywhere and always save exact versions.\nIf Lerna supports save-exact = true from .npmrc (per package) that would be even nicer then extra flag.. To avoid publishing packages so we can depeloy and test dev version we use this solution at the moment:\n\ncopy project to build\ncopy node_modules to build (note, that symlinks are broken at this point)\nremove all obvious top level symlinked dev dependencies\nfor each symlinked dependency do npm install ${symlinkedDir}\n\nAs a result we have fully up to date (current dev/branch) dependency tree without any duplicates, so docker image is as small as when we install published dependencies.\nHere is a script if you are keen to see tech details\nps: bash and rsync are just convenience wrappers around child_process.execSync\n``js\nconst getSymlinks = app => {\n  let dirs = [];\n  try {\n    dirs = fs.readdirSync(${app}/node_modules/@private_scope/`);\n  } catch (err) {\n    // whatever\n  }\nreturn dirs\n    .map(dir => ${app}/node_modules/@private_scope/${dir})\n    .map(dir => ({dir, stat: fs.lstatSync(dir)}))\n    .filter(({stat}) => stat.isSymbolicLink())\n    .map(({dir, stat}) => ({\n      dir,\n      stat,\n      pkg: path.normalize(${CWD}/node_modules/@private_scope/${fs.readlinkSync(dir)})\n    }));\n};\nconst getSymlinkedDirs = (app, known = []) =>\n  known.includes(app) ?\n    known :\n    getSymlinks(app).reduce((result, {pkg}) => getSymlinkedDirs(pkg, result.concat([pkg])), known);\n// For tagged release do normal npm install --production since everything is tagged\nif (isRelease) {\n  bash('npm install --production', {cwd: ${BUILD_DIR}});\n  return;\n}\nrsync('node_modules', ${BUILD_DIR}/);\nbash(rm -rf ${BUILD_DIR}/node_modules/.bin);\nbash(rm -rf ${BUILD_DIR}/node_modules/.cache);\nconst {devDependencies = {}} = require(${BUILD_DIR}/package.json);\n// Manually remove all dev deps, since prune does not pick all of them up for some reason\nObject.keys(devDependencies)\n  .forEach(dep => bash(rm -rf ${BUILD_DIR}/node_modules/${dep}));\nbash('npm prune --production', {cwd: ${BUILD_DIR}});\nconst symlinks = getSymlinks(BUILD_DIR);\nconst allPackages = getSymlinkedDirs(BUILD_DIR);\nsymlinks.forEach(({dir}) => bash(rm ${dir}, {cwd: BUILD_DIR}));\nallPackages.forEach(pkg => bash(npm install ${pkg}, {cwd: BUILD_DIR}));\n```\n^^ this works quite well for us for last several months.\nStill working out caching strategy tho for those dev deps to make it fast. Well, you don't want to publish on every commit :). I was talking about building docker image on every commit with all sumlinked deps properly resolved to the latest local dev version, not published one.. I\u2019ll later post a better script we now use (using yarn pack) which is\nmillion times faster. I\u2019m on holidays now and took only my phone with me...\nWe are executing scripts before docker build, copying all necessary app\nfiles and resolved deps into \u2018docker/app\u2019 folder and then doing quick and\neasy \u2018docker build ./docker\u2019 which is effectively just copy files, expose\nport and run app. In this case docker containers are small and don\u2019t have\neven npm. We use alpine node-base images.\nSince builds are made on ci with linux there are no binary compat issues\nwith native node modules (if we happen to have some).\n-- \nNik Butenko\nnik@butenko.me\nhttp://github.com/nkbt\n. @jwickens \n1. Copy all packages/* to .pk\n2. Replace all internal cross-deps with packed files like (NOTE: you do it before packing)\n  js\n    \"@monorepo/bla\" => \"^0.0.123\"\n    // becomes\n    \"@monorepo/bla\" => \"{fullpath-to-.pk}/bla.tgz\"\n    // relative path is essential for yarn to install deps properly\n\nPack every package there into the root of .pk\nMove .pk/*.tgz and all packages .pk/* to docker/app/packages, do your normal yarn install --production and docker build for any of t\n\nSo as a result of these steps we are getting \"production\"-like build with all the internal packages installed from most recent updated versions from tgz to any depth (since all of them have tgz deps).\nFor release builds we obviously skip this.\nHere is the code for pack.js (all other build scripts are same as usual)\n```js\n!/usr/bin/env node\n'use strict';\nconst fs = require('fs');\nconst util = require('util');\nconst path = require('path');\nconst glob = require('glob').sync;\nconst cp = require('child_process');\nconst {PK} = require('./lib/pkDir');\nconst {isRelease} = require('./lib/isRelease');\nif (isRelease()) {\n  console.log('Release, skipping packing');\n  return;\n}\nconst writeFile = util.promisify(fs.writeFile);\nconst exec = util.promisify(cp.exec);\nconst tgz = name => path.join(PK, ${name.replace('@myscope/', '')}.tgz);\nconst pk = glob(*/package.json, {cwd: PK, realpath: true})\n  .reduce((result, file) => {\n    const json = require(file);\nreturn {\n  ...result,\n  [json.name]: {\n    dir: path.dirname(file),\n    file,\n    tgz: tgz(json.name),\n    json\n  }\n};\n\n}, {});\n// Replace all REEF deps with tgz files and pack\nPromise.all(Object.keys(pk).map(k => {\n  const {dir, file, json} = pk[k];\n  const {dependencies = {}} = json;\nconst newDeps = Object.keys(dependencies)\n    .filter(name => name.startsWith('@myscope') && name in pk)\n    .reduce((result, name) => ({...result, [name]: pk[name].tgz}), dependencies);\nreturn Promise.resolve()\n    .then(() => writeFile(file, JSON.stringify({...json, dependencies: newDeps}, null, 2), 'utf-8'))\n    .then(() => exec(yarn pack --filename ${tgz(json.name)}, {cwd: dir}));\n}));\n``.yarnpack works perfectly as far as I can tell (at least now in 1.x). What I love about it that if it is listed in package.json -tgzgets intoyarn.lock` file too. So you can keep enjoying your deterministic builds.\nWe actually pack some libraries and add tgz to currently worked on project root (if it is not part of monorepo), installing it with relative path like yarn add ./bla.tgz. So you have fully working yarn.lock + package.json and PR with yet unpublished dev version of a library.\nWhen all tested and before PR is closed - library gets proper published and PR is updated with real version, and tgz cleaned up from history.\nIt's almost like npm link but that can be built on CI and tested in staging environment before doing actual publish.\nPS: npm pack should work the same way. And you should be able to do npm install xxxx.tgz just fine too as far as I know. Haven't really tried that but when I last checked npm 5 docs it looked like working solution in npm-land too.. Since yarn fixed its way of installing deps (installing from folder does not symlink anymore, but follows the same way as you \"publish\"/\"pack\" and \"install\") we can do way less hacky solution now!\nHere is what I do now (I tried to comment as much as possible, but feel free to ask if something is not clear enough)\n1. Workspace info\nYarn added workspaces info yay! Let's get it and use later\nbash\nyarn workspaces info --json\n2. Copy\nWe need to copy all packages since we are going to modify their package.json files\n``js\n//bash` is just a glorified execSync \nconst PK = ${MONOREPO_ROOT}/.pk;\nbash(rm -rf ${PK});\nObject.keys(workspaces).forEach(key => {\n  bash(mkdir -p ${PK}/${workspaces[key].location});\n  bash(cp -R \n    ${MONOREPO_ROOT}/${workspaces[key].location}\n    ${PK}/${path.dirname(workspaces[key].location)}/);\n});\n``\nNote that since I actually use multiple subfolders (services,libs,components, etc) and not just defaultpackages- I keep same structure here in.pk` too, so no naming collisions and eady to work with\n3. Update package.json\nNo need to yarn pack anymore! Much simpler and faster solution\n``js\nconst dir = name =>${PK}/${workspaces[name].location}`;\n// Replace internal dependencies with full path to that dependency\nObject.keys(workspaces).forEach(name => {\n  const packageJsonPath = ${PK}/${workspaces[name].location}/package.json;\n  const packageJson = require(packageJsonPath);\n  if ('dependencies' in packageJson) {\n    workspaces[name].workspaceDependencies.forEach(depName => {\n      if (depName in packageJson.dependencies) {\n        Object.assign(packageJson.dependencies, {[depName]: dir(depName)});\n      }\n    });\n    fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2), 'utf-8');\n  }\n});\n``\nI also only care aboutdepsnot dev deps, since later will useyarn install --production` for docker.\nResulting package.json would look like\njson\n{\n  \"dependencies\": {\n    \"@myscope/config\": \"^1.1.1\",\n    \"@myscope/error\": \"/Users/nkbt/monorepo/.pk/libs/error\",\n    \"@myscope/log\": \"^2.0.2\",\n    \"@myscope/transit\": \"/Users/nkbt/monorepo/.pk/libs/transit\",\n    \"component-router\": \"^3.0.8\",\n    \"compression\": \"^1.7.1\",\n    \"connect-timeout\": \"^1.9.0\"\n  }\n}\nNote that some of libs under @myscope are not part of monorepo at all, so they were not replaced\n4. Build\nThat is very much app-specific. In my case I go into each service folder and do something like:\n``js\nconst APP_DIR =${PK}/${workspaces[name].location};\nconst DOCKER_DIR =${APP_DIR}/docker;\nconst DOCKER_APP_DIR =${DOCKER_DIR}/app`;\n// cleanup docker app dir\nbash(rm -rf ${DOCKER_APP_DIR});\nbash(mkdir -p ${DOCKER_APP_DIR});\n// copy only package/lock, install prod deps\nbash(cp -R ${APP_DIR}/package.json ${DOCKER_APP_DIR}/);\nbash(cp -R ${MONOREPO_ROOT}/yarn.lock ${DOCKER_APP_DIR}/);\nbash('yarn install --production --pure-lockfile', {cwd: ${DOCKER_APP_DIR}});\n// remove lock, since we will never need it in the app\nbash(rm -rf ${DOCKER_APP_DIR}/yarn.lock);\n// copy rest of app dirs and files\nbash(cp -R ${APP_DIR}/src ${DOCKER_APP_DIR}/);\nbash(cp -R ${APP_DIR}/lib ${DOCKER_APP_DIR}/);\nbash(cp -R ${APP_DIR}/index.js ${DOCKER_APP_DIR}/);\n// copy webpack config and run client build\nbash(cp -R ${APP_DIR}/webpack.config.js ${DOCKER_APP_DIR}/);\nbash(${require.resolve(.bin/webpack)}, {env: {NODE_ENV: 'production'}, cwd: DOCKER_APP_DIR});\n// cleanup webpack config since we never need in in runtime app\nbash(rm -rf ${DOCKER_APP_DIR}/webpack.config.js);\n// cleanup src files since we've built everything and never use src in runtime\nbash(rm -rf ${DOCKER_APP_DIR}/src);\n// now build docker container\n// Note! We run docker build inside DOCKER_DIR,\n// so we do not send full monorepo context to docker, but only small app\n// That is much, much faster\nbash(docker build --tag ${DOCKER_TAG} ${DOCKER_DIR});\n// push container\nbash(docker push ${DOCKER_TAG});\n```\n. I hope this little guide helps. \nIt works very fast and is a reliable solution we use for our services. Works in CI on each pr/commit, no problems at all. \nIn this case we are getting docker containers pushed without a need to publish libs first.\nWithout a need to do lerna publish --canary, which can be an alternative solution, but I do not like to have thousands releases for each lib, which would be the case when we do builds in CI.\nThe only time I use lerna publish --canary if some libs from monorepo are used outside and I want to do a full e2e test of that outside project with new dev versions of libs (would not be a problem of course if I just keep all services inside monorepo, hehe). ",
    "jkimbo": "Just to add, this should be the default when using the --canary flag since otherwise cross dependencies get set to something like ^2.3.1-alpha.123456 which doesn't necessarily resolve to that specific version.\nIf the canary flag check was added I think this would solve the underlying issue with https://github.com/lerna/lerna/issues/277. ",
    "dortzur": "Please god merge this. We're having issues publishing a fix from master branch when dev is ahead.. @gigabo thanks!!! . I can try and take this on. . ",
    "Brantron": "This works with dependencies between Lerna packages? package A which relies on package B and a breaking change is introduced in package B, this allows us to lock A to a previously published version of B?. Whaaat? This is sweet and it's just sitting here open?. We've been able to solve this issue by setting --mutex network on the bootstrap command and running our multiple packages in stages. Here's a slimmed down version of our config\n```\nlanguage: node_js\nsudo: required\ndist: trusty\nnode_js:\n  - '8'\ncache:\n  directories:\n    - $HOME/.npm\n    - $HOME/.yarn-cache\n    - packages/browser-extension/node_modules\n    - packages/frontend/node_modules\nbefore_install:\n  - npm i -g yarn@\"1.5.1\" --cache-min 999999999\n  - npm i -g lerna --cache-min 999999999\njobs:\n  include:\n    - stage: frontend\n      script: ./scripts/frontend\n      env:\n        - SHARD_COUNT=5 SHARD_INDEX=0\n    - stage: frontend\n      script: ./scripts/frontend\n      env:\n        - SHARD_COUNT=5 SHARD_INDEX=1\n    - stage: frontend\n      script: ./scripts/frontend\n      env:\n        - SHARD_COUNT=5 SHARD_INDEX=2\n    - stage: frontend\n      script: ./scripts/frontend\n      env:\n        - SHARD_COUNT=5 SHARD_INDEX=3\n    - stage: frontend\n      script: ./scripts/frontend\n      env:\n        - SHARD_COUNT=5 SHARD_INDEX=4\n    - stage: extension\n      script: ./scripts/extension\n```\nwhere scripts frontend is \n```\n!/bin/sh\nlerna bootstrap --scope=frontend --mutex network;\n(cd packages/frontend && yarn lint);\n(cd packages/frontend && yarn test:ci --silent --maxWorkers=4 --coverage)\nand scripts extension is\n!/bin/sh\nlerna bootstrap --scope=browser-extension --concurrency=1 --mutex network;\n(cd packages/browser-extension && yarn lint);\n(cd packages/browser-extension && yarn test:ci --silent --maxWorkers=4 --coverage)\n. We finally have a reliable workaround!!!\ninstall: travis_retry make ci-install\n```\nwhere the makefile does\nci-install:\n    yarn;\n    lerna bootstrap --mutex file:/tmp/.yarn-mutex --concurrency=1;\nThe key is travis_retry where it will attempt the installation 3 times. So far we have 100% success.. Thanks for the quick response. We assumed that we would lose the ability to symlink but changing the versions to a previous release does this\nlerna ERR! error Couldn't find any versions for \"A\" that matches \"1.0.0\". Hmm, if it relies on the registry does that mean itcan not work with private repos? The idea is to fix the breaking changes as quickly as possible so we can regain the symlinks and parallel development.. Ahh, this makes sense. We've never published to any registry. Thanks! The hotfix happened before we needed to resort to anything else. . ",
    "StarpTech": "I installed lerna 1.1.3 and get the same warning.. Same behaviour\n\nYour Environment\n- Include as many relevant details about the environment you experienced the bug in \n| Executable | Version |\n| ---: | :--- |\n| lerna --version | 2.0.0-rc.5 |\n| npm --version  | 4.6.1 |\n| node --version | 8.1.2|\n| OS | Version |\n| --- | --- |\n| Windows 10 | 1703 |\n. Looks like that the current broken build of lerna on Node 4 https://ci.appveyor.com/project/lerna/lerna/branch/master/job/yaot27e7vtv2b28g has the same issue.\nOn Node 6+ everything works fine.. I can still reproduce it with the latest lerna version on Appveyor CI. \nhttps://ci.appveyor.com/project/StarpTech/bootme/build/job/kywnh6ygeeagchnq. @Zalastax It's on CI server. They don't use conemu. @Zalastax How can I pass them?. Thanks for the instructions I will try it ASAP.. I run lerna clean and removed all node_module folders.. I already looked for a debug file but couldn't find anything I will try it again.. I couldn't reproduce it with yarn in the last attempts. @bobaaaaa Perhaps we talking about different issues? What's your example repo?. @bobaaaaa so you can't reproduce easily? If you would create an example repo we could check it.. I found the issue in https://github.com/lerna/lerna/blob/master/src/ChildProcessUtilities.js#L88 you forgot to pass the -- to signify the end of command options.\nbefore\n```js\nexeca('npm', \n[\n'run',\n'bin',\n- '--',\n'--config',\n'./examples\\.bootme.js'\n]).then(console.log).catch(console.error)\nafter and fixed!diff\nexeca('npm', \n[\n'run',\n'bin',\n+ '--',\n'--config',\n'./examples\\.bootme.js'\n]).then(console.log).catch(console.error)\n``. I triedlerna run bin -- --scope=bootme-cli -- --config ./examples.bootme.js` but still doesnt work. It works now, thanks but I don't see the output of my script.. I expect to see this\n\u221a request-1: Retrieve the IIS position\n\u221a temp-1: Create temp file\n\u221a request-2: Make request\nbut got\n```\n\nnode cli.js \"--config\" \"./examples/.bootme.js\"\n\nlerna success run Ran npm script 'bin' in packages:\nlerna success - bootme-cli\n``. @evocateur thanks--streamworks I have to set it tostdout. I can't publish the package manually with NPM. No error occurs but npm respond with a success. It looks like an issue with the registry itself.. It's not lerna related.. I think you didn't understand me. I use the independent version mode. **Sometimes** I want to publish only one package. When I donpm publishall my settings from thelerna publishcommand are lost and lerna does not upgrade the version inside the dependent packages.. I think you didn't understand me. I use the independent version mode. **Sometimes** I want to publish only one package. When I donpm publishall my settings from thelerna publish` command are lost and lerna does not upgrade the version inside the dependent packages.. OK, that's fine but then only updated packages should be listed right? I will try to reproduce but my feeling is that this doesn't work reliable. . OK, that's fine but then only updated packages should be listed right? I will try to reproduce but my feeling is that this doesn't work reliable. . >I fail to see how it is lerna's responsibility to ensure you have the correct git credentials.\nI agree but I see it as lerna's responsibility to ensure that you can't end up with a broken state if you run a lerna command.\n\nLerna v3 does all git operations (if any) and then all npm operations when lerna publish is called.\n\nI think there is the reason. Why doesn't lerna revert their changes when an error occurs? I expect that the version bumps and all git tags are reverted in order to try it again without to intervene with lerna publish from-git.\nPoposal: Isn't it possible to treat any lerna command transactional?. > I don't see why successful git operations need to be rolled back just because the npm operations failed. There is no requirement from npm that the code it publishes be pushed upstream (or even committed, or even using git).\nIt's not about git or npm, this is how lerna publish works. Lerna publish rely on git and npm. Lerna is responsible for publishing and when it's not possible I expect the same state as before the execution. I don't want to think about which side-effects it provoked.\n\nI can see an argument for moving the npm auth validations before any local changes, or improving the error messaging if publish fails after successful versioning.\n\nI agree the error message can be improved but I wouldn't change the order because all operations can be reverted except the npm publishing.\nchange package.json\ncreate tags\nnpm publish\nWhen any error is occured in the process e.g invalid json file, duplicate tags, npm auth error I expect that the previous state is restored.. Hi, what's the state? Can I help?. @evocateur @joebowbeer your workflow includes that the versions are tagged after publish right? Otherwise, I don't know how changes are detected correctly by Lerna.. Hi @joebowbeer so I guess that you don't use tags at all right? My workflow should look like this:\n\nI want to manually raise the package version on a branch:\n\nlerna version [bump] --no-git-tag-version\n\nAfter PR approval and merge to master, I want to publish the bumped versions in CI:\n\nlerna publish from-package\n\nAfter successfully publish new tags are created for all unpublished packages. Without tags lerna isn't capable to check if a package was changed. \n\ne.g\nlerna exec -- ls or lerna bootstrap --since could run only in changed packages and its dependants. This will improve the performance.. Here is a working prototype of the workflow. It includes the from-package feature with some fixes + the optional feature to tag the unpublished versions.\nhttps://github.com/StarpTech/lerna/tree/feature/publish-from-package\nIt can achieve the following workflow:\n\nSeparate version bump from tagging e.g if you want to build and publish on CI.\nUse versions from package.json for publishing and tagging\n\nExample:\n\n(Locally) lerna version --no-git-tag-version\n(CI) lerna bootstrap --since --registry http://localhost:4873/\n(CI) lerna exec --since -- ls\n(CI) lerna publish from-package --yes --registry http://localhost:4873/ (you can disable creating tags by --no-git-tag-version)\n\n@evocateur would you accept a PR?. @evocateur I don't talk about the possibility to bump inside feature-branches. This could be done from the master or with conventional-commits. I would like to build and publish inside CI but also being flexible at the same time what version is changed. From my understanding lerna doesn't allow it. Most of the users of lerna build and publish locally which is in my opinion not ideal because we want to do it in a production like environment with high reproducibility (in other words CI/CD). . @chriscasola it was an installation issue by travis itself. Could you retrigger the build?. @chriscasola rebase from master the .travis.yml was changed completly!. Hi,\naccording to #1648 I expected that the new command lerna publish from-package will tag the versions after all packages were published. If you check #1648 we want to archieve following workflow:\n\nI want to manually or autoamtically (conventional comments) raise the package version on a branch:\nlerna version [bump] --no-git-tag-version\nThen, after PR approval and merge to master, I want to publish the bumped versions in CI:\nlerna publish from-package\n\n(Currently missing) The versions from the package.json are used to create new git-tags\n\n\n(Impossible when the version are tagged before CI) After the successfully publish lerna changed should return no changes.. > This would only apply in independent versioning mode, yes? In the default \"fixed\" versioning, the tag will already be present when a partial publish occurs.\n\n\n@evocateur No in both because it doesn't create a git-tag in \"fixed\" mode in the current implementation. Please have a look at lerna-workflow to better understand the goals with #1648\nThe following fork https://github.com/StarpTech/lerna/tree/feature/publish-from-package will show you the idea.. @evocateur would you accept a PR? . Hi,  with --since we should be able to pass a ref right? If I pass a commit id or a tag it doesn't work but with the change it does. I thought that all parameters of describe-ref should be supported isn't? . > The argument to --since has never claimed to be a glob, unless I'm mistaken?\nYes, it's not about the glob but collect-updates does not respect the match feature provided by the describe-ref utility. This is very useful in our scenarios. Would you accept a PR to fix it or is since the wrong flag?. Yeah, that looks reasonable. Thank you!. You can't pass the configuration object to the npm-registry-fetch package. In my examples it will always fallback to NPM registry.. It's because the special config object opts isn't compatible with Object.assign you need to use\njs\nObject.assign({}, opts.snapshot, registryOptions). Did you consider these regarding lightweight tags?\n\nhttps://github.com/lerna/lerna/blob/aa4ae510b9c0a0935f0b1989859ba873a1e864cc/CHANGELOG.md#breaking-changes-2\nhttps://github.com/lerna/lerna/blob/f674f354f0260c57d885c181e16c9ce23ac252a8/doc/troubleshooting.md#publish-does-not-detect-manually-created-tags-in-fixed-mode-with-githubgithub-enterprise. I only want to point to the fact that lightweight tags aren't coompatible with lerna and it seems that it will hard to land this.. \n",
    "tiagojsalmeida": "Perfect @gigabo ! Thanks!. ",
    "joewoodhouse": "@gigabo @mAAdhaTTah still interested in this fix as I've hit the same issue. I'm a learner newbie - @gigabo could you describe exactly what the process of manually fixing this is? I'm (trying to) run an independently versioned set of packages.. Author of several typescript modules here who has hit the exact same issue, all my modules publish from a dist folder. Wish I'd known this before starting to use lerna! Would love this feature to be implemented, but will probably have to switch to something else instead now.. ",
    "chrishelgert": "i can give it a try \ud83d\ude04 . the error in appveyor looks like a problem with the build-cache \ud83d\ude22 . my pleasure \ud83d\ude03 . @gigabo so no conflicts with base branch :). ",
    "ericwooley": "I wish or I would have provided it. Unfortunately its work for a client :(\nI am trying to reproduce on something I can open source.. @gigabo I found that I am having issues with this (which was the original fork)\nhttps://github.com/ericwooley/vortigern\nBut a different error that simply says, \n```\nlerna import ../vortigern/\nLerna v2.0.0-beta.30\nAbout to import 143 commits into from ../vortigern/ into packages/vortigern\n? Are you sure you want to import these commits onto the current branch? Yes\nErrored while running ImportCommand.execute\nFailed to apply commit 518cae8.\nError: Command failed: git am -3\nerror: Failed to merge in the changes.\nRolling back to previous HEAD (commit 3ff03a0).\n```\nEDIT:\nI tried with that repo on v29, because I saw there was some changes\n```\nlerna import ../vortigern/\nLerna v2.0.0-beta.29\nAbout to import 143 commits into from ../vortigern/ into packages/vortigern\n? Are you sure you want to import these commits onto the current branch? Yes\nErrored while running ImportCommand.execute\nFailed to apply commit 223310f.\nError: Command failed: git am -3\nerror: git apply: bad git-diff - inconsistent old filename on line 335\nerror: could not build fake ancestor\nRolling back to previous HEAD (commit a3c40c4).\n``. I also took a look at the proprietery commit in question from the original importa76cb3c23`\nAnd it is the addition of 30+ files, with several png's mixed in. Maybe the png files are part of the problem?. It looks from the error message like there may just be some filenames that we're failing to convert. The import command does some search-and-replace on patch files produced by git am.\nif I were to git diff a76cb3c23 and a76cb3c23^1 that would be the patch in question right? I'll see if I can find anything funny there. diff --git a/src/app/components/alert/preview/alert.png b/src/app/components/alert/preview/alert.png\ndeleted file mode 100644\nindex 1d3fd4e12..000000000\nBinary files a/src/app/components/alert/preview/alert.png and /dev/null differ\ndiff --git a/src/app/components/annotation/annotationComponent.css b/src/app/components/annotation/annotationComponent.css\ndeleted file mode 100644\nindex 0fe3a8696..000000000\n--- a/src/app/components/annotation/annotationComponent.css\n+++ /dev/null\nhere is an excerpt that seems suspicious since there is a bunch of /dev/null. stuff happening. @gigabo Do you have an email or something I can contact you through?. @gigabo figured pointed out that it may have had to do with spaces in the file names, and he is correct.\nan example output with a space is: \ndiff --git a/src/app/some thing.png b/src/app/some thing.png\nbecause it searches for the \\S+ https://github.com/lerna/lerna/blob/master/src/commands/ImportCommand.js#L97\nit breaks on whitespace.\nEDIT\n@gigabo YOU BEAT ME. Looking through https://git-scm.com/docs/git-format-patch documentation, I don't see a way to output in a more parseable manner.\nThe best possible way to handle this IMO, is to get a list of all files changed in that commit, and look to see if any of them match the last file in the line and use that if so. \nOne gotcha to this approach is that you could have folder/file and folder folder/file data/file which could break the algorithm also. So it would be necessary to check longest file names first and work toward shortest.\nIf I have time tonight, I'll see if I can do a PR for this.\n. @gigabo \nI implemented my solution in PR https://github.com/lerna/lerna/pull/434\nBut am running into more problems, and I'm not sure what they are. \nHowever, I did a little research, and isn't this exactly what git subtree is for? I was able to successfully bring in each repo from the answer here http://stackoverflow.com/questions/6426247/merge-git-repository-in-subdirectory\ngit subtree add -P packages/<my repo> ../<my repo>/ develop. It does retain history, but maybe not as well as the original solution, as files are not listed as packages/<package>/folder/... but listed as folder/.... \nThere is also a giant commit at the HEAD of the repo that adds every file, \n\n\nblaming the file still seems to work fine everywhere I have looked.\n\n\nlogging the file doesn't seem to work.. I updated the PR to use a better show file command, that allowed me to get through a couple hundred more commits but ran into a new one. But I think this issue will be closed by https://github.com/lerna/lerna/pull/434.\n\n\nI'll see if I can figure out what is wrong with the next commits.\nPatch parsing is aggravating.. I added files in the test fixture that has spaces in them. Which broke the tests, then fixed them. Hopefully that is enough test coverage.. It seems like maybe this should be closed? It's been open for quite a while, and has since been conflicted.. @gigabo You might be interested, or have an insight.\nI'm also not sure if this is in fact the cause of the break, or just warnings that went out from git.\nChanging\ngit am -3\nto\ngit am -3 --whitespace=nowarnings\nHides all the warnings.. I'll try with --ignore-whitespace. No go, I'm going to look closer at that patch.. Thanks! Yea, I could not find a reasonable way at all to do regex. \nHowever this is still running into other problems I have yet to figure out on the larger repos.\nI am using git subtree to import them, and it seems to have worked really well. I'm still trying to figure out if it worked correctly in terms of commit history.\n. ",
    "chrisdothtml": "Sharing my experience since I ran into a brick wall when getting this issue.\nThe problem does indeed seem to be caused by files/folders in the history that have spaces in them (and has to do with this line only checking for non-whitespace \\S characters). It seems like a pretty straightforward problem, but doesn't feel like it'd be a straightforward fix.\nThe way I got around this was by using the bfg repo cleaner to delete the offending files/folders (with spaces in them) from the history in my repo. Once I did that, lerna was able to import it successfully. Replacing line 161 with\n.replace(/^(diff --git (?! b\\/).+ b)/gm, replacement)\nactually covers most scenarios. The only ones it doesn't cover is filepaths containing specifically ' b/' (e.g. tests/scenario b/...). All other filespaths with spaces in them are covered, though.\nIt feels a little hacky, but I can submit a PR for it if you're interested. In my experience, the subtree import doesn't update the paths in the history of the files (like lerna currently does manually), so it ends up with broken file history. Happy to be proven wrong though. Possibly fixed by #1655?. @evocateur I am interested in trying something with custom prefix options, but figured I'd get this fix pushed at the very least.\nWhat pattern would you suggest instead of a/ and b/? Maybe something crazy explicit like COMPARE_FILE_A/ and COMPARE_FILE_B/?\nAlso, side note: is it normal to be getting a ton of linting errors? Not even related to anything I did, getting them on the latest master branch. Also, it probably should be mentioned in the CONTRIBUTING doc that you need lerna globally installed for tests to run (or I needed to at least)\nEDIT: Any idea what's going on with this test?. ",
    "marekcirkos": "I already did :). \nYou initialise it Repository constructor https://github.com/lerna/lerna/blob/d707386f1327e09a9e8f8530fff470e9fb24838c/src/Repository.js#L11\nIt gets allocated in BaseCommand for every single command https://github.com/lerna/lerna/blob/master/src/Command.js#L18. Lol, I guess I edited my comment during your post :)\nIt gets allocated in BaseCommand for every single command https://github.com/lerna/lerna/blob/master/src/Command.js#L18. ",
    "petercasinelli": "Hey, thanks for catching this! Is there any way you can release this sooner rather than later? It's a blocker for people relying on tests to fail a build. Right now, a build can pass even if the tests fail because the exit codes are not propagated. I'm experiencing this right now with CircleCI.\nI considered pulling in the master branch in, but in order to use it, you'll need to run npm i and install Lerna globally from the cloned repo. This is unrealistic for continuous integration because you'd need to clone for every build.. ",
    "tofuness": "Yes, I can try to implement this when I get back from vacation \ud83d\udc4c . ",
    "Robinfr": "100% needed to be able to watch tests in all packages.. I checked out the code, and this should be easily implemented with a flag that makes it use spawn instead of exec.. @gigabo so why in the end did you decide for an option over just always using spawn?. @evocateur thanks!. I ran into the same problem when I tried to import a Git repository from a local path... I ran into the same problem when I tried to import a Git repository from a local path... @noherczeg That works for me.. I'm having issues where --hoist is removing several of the dependencies that were already installed. I was running this:\nbash\nlerna bootstrap --hoist=\"{mocha,webpack,webpack-dev-server,node-sass}\"\nand it would just remove the webpack-node-externals module that was installed in the root package... I had problems before with hoisting all of the dependencies. Regardless, this means that any dependencies at the root level are removed? What about dependencies that are used for scripts at the root level. Seems a bit strange to me to be doing this..\nOp 14 feb. 2018 6:08 p.m. schreef Daniel Stockman notifications@github.com:\nIs there any particular reason you\u2019re using a hoist whitelist instead of just hoisting everything?\nThe mangling of root dependencies that occurs during a hoisted bootstrap is most likely the culprit (because the existing root dependency is no longer present, npm5 considers that a change it needs to sync to the lock file, thus the removal).\n\nOn Feb 14, 2018, at 08:12, Robin Franken notifications@github.com wrote:\nI'm having issues where --hoist is removing several of the dependencies that were already installed. I was running this:\nlerna bootstrap --hoist=\"{mocha,webpack,webpack-dev-server,node-sass}\"\nand it would just remove the webpack-node-externals module that was installed in the root package..\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n\n\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHubhttps://github.com/lerna/lerna/issues/951#issuecomment-365676490, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AD90FKQDEUjc_5xcxWpStpiWZSCkPRMqks5tUxMMgaJpZM4OquLW.\n. Yes I understand that. But it's not really a detail but rather a huge problem for most likely a lot of people. Wouldn't it be easy to solve this problem by simply temporarily adding the hoisted dependencies to the existing package.json or to install each package by just using npm install directly?\nOp 14 feb. 2018 11:05 p.m. schreef Daniel Stockman notifications@github.com:\nThis is not lerna\u2019s behavior, it is a side effect of npm5.\n\nOn Feb 14, 2018, at 09:21, Robin Franken notifications@github.com wrote:\nI had problems before with hoisting all of the dependencies. Regardless, this means that any dependencies at the root level are removed? What about dependencies that are used for scripts at the root level. Seems a bit strange to me to be doing this..\nOp 14 feb. 2018 6:08 p.m. schreef Daniel Stockman notifications@github.com:\nIs there any particular reason you\u2019re using a hoist whitelist instead of just hoisting everything?\nThe mangling of root dependencies that occurs during a hoisted bootstrap is most likely the culprit (because the existing root dependency is no longer present, npm5 considers that a change it needs to sync to the lock file, thus the removal).\n\nOn Feb 14, 2018, at 08:12, Robin Franken notifications@github.com wrote:\nI'm having issues where --hoist is removing several of the dependencies that were already installed. I was running this:\nlerna bootstrap --hoist=\"{mocha,webpack,webpack-dev-server,node-sass}\"\nand it would just remove the webpack-node-externals module that was installed in the root package..\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n\n\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHubhttps://github.com/lerna/lerna/issues/951#issuecomment-365676490, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AD90FKQDEUjc_5xcxWpStpiWZSCkPRMqks5tUxMMgaJpZM4OquLW.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n\n\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHubhttps://github.com/lerna/lerna/issues/951#issuecomment-365760467, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AD90FPNrF4MGeMU4Oyo8NLSubPhQGDo2ks5tU1i1gaJpZM4OquLW.\n. I'm not really happy about having to use experimental (alpha) versions of software honestly. I think I will just disable the package lock in the root package for now.\nOp 15 feb. 2018 7:26 a.m. schreef Daniel Stockman notifications@github.com:\nOr just use local file: specifiers with npm5 and completely skip lerna bootstrap. v3.0.0-alpha.0 released today supports this, and it works marvelously.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHubhttps://github.com/lerna/lerna/issues/951#issuecomment-365836751, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AD90FDWsvEPrJmw3iQu06MIrhNHd82yWks5tU83_gaJpZM4OquLW.\n. Actually, I tried disabling the package-lock.json, it made absolutely no difference. So that's not the problem... The leaf package locks.\nOp 8 mei 2018 6:27 p.m. schreef Daniel Stockman notifications@github.com:\nThe root package-lock.json, or the leaf package-locks (packages/*/package-lock.json)?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHubhttps://github.com/lerna/lerna/issues/1415#issuecomment-387461468, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AD90FEoP99-cIWkubTwO5cxH-vACxoP-ks5twcdigaJpZM4T2Len.\n. I'd suggest just changing the version in the package lock files as well if possible. The same way it's done for package.json. Is there any reason not to?\nOp 8 mei 2018 9:14 p.m. schreef Daniel Stockman notifications@github.com:\nWe're not calling npm version, just modifying the package.json directly and then calling npm publish. I try to avoid leaf package lockfiles, much like lerna itself does (requires lerna 3.x).\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHubhttps://github.com/lerna/lerna/issues/1415#issuecomment-387511349, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AD90FI6LSc9J1s981uHy0thl59duBMj5ks5twe5-gaJpZM4T2Len.\n. I'm not asking whether there is a reason for you not to, I'm asking in general. One of the pros of open source is that you don't have to be solely responsible for developing the software. If you agree with the approach I could try taking a look at implementing it when I have some time to help you out.\nOp 8 mei 2018 9:29 p.m. schreef Daniel Stockman notifications@github.com:\nIs there any reason not to?\nFor lerna 2.x, it's because I don't want to deal with that old codebase anymore.\nFor lerna 3.x (current master), it's a bandwidth issue. I'm only one person, and I have a day-job.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHubhttps://github.com/lerna/lerna/issues/1415#issuecomment-387515560, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AD90FBxX7aaoyqwSsHbhq9SokeBfeKtSks5twfIKgaJpZM4T2Len.\n. I was reading through the code but I think I also need some directions, I understand how the system works but it's entirely centered around the package.json file so adding the code for package-lock.json anywhere feels hacky to me..\n@evocateur how did you disable the package-lock.json in the Lerna packages anyway? I can't find any .npmrc file or .gitignore in the project that would do this.. @doug-wade but then the additional dependencies in the sub-packages are not installed?. @garthk this issue has nothing to do with the package.json, but rather with the package-lock.json.. ",
    "camwest": "Here is an example from my CI: https://circleci.com/gh/Autodesk/orion-ui/1027\n\n. @evocateur want me to submit a patch?. @evocateur sorry I didn't get to this! I got too distracted, thanks for submitting it.. ",
    "jeffwhelpley": "Not sure if this would be the same change or different, but I also have an issue with sequencing when doing things like tsc. In some cases, when you use lerna run to execute tsc on every package at the same time, it fails because they are all npm linked and one lib needs to have the other one finish its tsc before starting.\nSo, perhaps the feature would be twofold from a generic sense:\n\nSequencing commands to packages (based on order of dependency graph)\nFor each command allowing for a long running command like npm-check -u\n. \n",
    "trotzig": "I'm not sure #446 solved it completely. I have a repo with a few packages, all with a build:watch script. Most packages depend on the core package. When I run lerna run --stream build:watch I see output for the core package, but none of the others. This is likely because they are waiting for the core package to finish, which it never will in watch mode. \nEDIT: I just found the --no-sort option, which resolves the dependency lock that I ran into. Posting this here anyway in case others find it useful. . Thanks for the quick review! I agree that this project isn't the best fit for lerna. However, we find the bootstrapping process is helping us out, especially after exploring the --hoist option. \nWe could move to private packages, although it feels a little overkill since all the dependencies on the packages are in the same repo. So there's no real need to publish them, we just want a good internal structure. . > I think you'll find the hoisted bootstrap process goes even quicker when you employ lerna's default symlinking strategy\nYeah, that's probably true. \nI should back up a few steps as well and explain why I even started exploring using file:../ dependencies. We were already using the default symlinking strategy that lerna gave us. The packages were never published to any registry, and things worked fine. lerna bootstrap was doing its thing, hoisting seemed to work (although we never explored it fully). Outside of lerna, we use yarn, and it was because of how yarn add/remove would choke on any package not being a public one that I went down the path of local dependencies (unlike npm, yarn will check to make sure all dependencies are available on install). \nI'll leave it up to you whether you want to merge this or not. We're an outlier in terms of project setups, and we can definitely find a different setup that avoids the issue fixed in this PR. But I can't see much harm of making the temporary package.json slightly more realistic. \nThanks for all the great work done in this project. Much appreciated. \u2764\ufe0f . After further exploring using local package dependencies (e.g. \"foo\": \"file:../foo\") I've realized they're not a good fit for us, mainly because local dependencies are copied into the localnode_modulesfolder onnpm install`, making local development hard because changes in depended-on packages aren't automatically visible to other packages. So we're back to using the default symlinking behavior from Lerna. \nI've worked around the issue with using yarn add/yarn remove by simply not using it, instead either manually editing the package.json file or using npm install --save. I've also removed all the individual yarn.lock files (expect the root one) because they were very hard to keep stable when using the hoisting option for Lerna. \nSo right now this patch isn't needed by us. I'll leave it to you to close it however. For the (likely very) few projects out there using local dependencies, this is still a useful fix.. This change is unrelated to the main change in this PR. I decided it was too small to merit being pushed as a separate PR, let me know if you disagree. . I initially had a regular require(packageJson) instead of reading the file through FileSystemUtilites. But that was hard to test, plus I wasn't fully sure what the side-effects would be (in terms of caching etc). . Fair point, I hadn't thought about the nesting much. I'll remove this commit. . Whoops, this was a mistake. I'll put it back. . ",
    "Dombo": "I know this is a stale issue but I've been working with a team on some monorepo tooling and put together a quick proof of concept to demonstrate watching for changes across the relevant Leena dependencies & triggering a rebuild of only the affected artefacts.\nhttps://github.com/Dombo/node-lerna-monorepo\nHopefully I save someone some time & thanks to the lerna maintainers for their awesome work in building such a tool.. This may be of use to anyone who stumbles across this while searching for a solution like I did.\nhttps://github.com/Dombo/node-lerna-monorepo\nSimple demonstration of watching the lerna graph and building only what's necessary on change events.. ",
    "SimenB": "Ah, ok! Make prerelease match?\nFar away from it just being stable?. Yeah, I do use latest. It just confused me for a second \ud83d\ude04 . Oh, npm 5 strikes again.\n\"lerna info version __TEST_VERSION__\n    +package-3: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    +package-3: \u2502                    npm update check failed                    \u2502\n    +package-3: \u2502              Try running with sudo or get access              \u2502\n    +package-3: \u2502             to the local update config store via              \u2502\n    +package-3: \u2502 sudo chown -R $USER:$(id -gn $USER) C:\\\\Users\\\\appveyor\\\\.config \u2502\n    +package-3: \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nExport NO_UPDATE_NOTIFIER in the tests?. https://github.com/yeoman/update-notifier#user-settings\nI also sent a PR to skip the check on CI automatically. Not sure if it will be accepted, though. yeoman/update-notifier#116. @cpojer FYI ^. Weird that this is not camel case. || [DEFAULT_PACKAGE_GLOB];? This is not mentioned in the readme, so everything went boom when I tried to use this. You're correct, I'm just blind! \ud83d\ude00\n\nPR welcome ;)\n\nNo doubt. ",
    "posva": "As a workaround do rm -r node_modules on the packages directories. ",
    "casesandberg": "Worked, Thanks!. I took a quick look and it looks like the error might be here: https://github.com/lerna/lerna/blob/master/src/NpmUtilities.js#L41-L42\nIt looks like it tries to find a package version number via splitVersion and if it doesn't match the regex it returns undefined and falls back to * instead of the Github path.. Shouldn't this use the native npm init? Otherwise, it won't adhere to any custom .npm-init.js set and leave the end user with no way to customize it. . Works now, thanks!. ",
    "hejianxian": "\ud83d\ude22 Soga! It seems that I misunderstood, thank you for your reply!. ",
    "sccolbert": "I just got bit by a similar issue. lerna publish failed because one of my scoped packages was not yet published with --access=public so npm rejected the publish. After correcting that, lerna thinks there is nothing updated to publish, but none of the npm tags have yet been updated.\nIt would be awesome if lerna could retry a publish after failing.. Node v5.10.0\nNpm v3.8.3. I should note that arrow keys do work when doing a regular publish. It only seems to not work when using --force-publish.. Following that issue chain led to this comment:\nhttps://github.com/nodejs/node/issues/5384#issuecomment-219984590\nI'll try updating node in a bit and see if that fixes the problem.\nLerna.json:\nhttps://github.com/phosphorjs/phosphor/blob/master/lerna.json\nCommand in question:\nlerna publish --force-publish @phosphor/application. This problem is not present in Node v6.10.0. Sorry for the noise!. ",
    "KELiON": "I had the same issue: I've added new package, but when I wanted to publish it, npm publish failed with \"You should confirm your email before publishing new package\" and after that I can't publish new version. \nI had version 0.0.13, started update to 0.0.14 with lerna, but after this fail I see vundefined tag was created, but no v0.0.14. I tried to create v0.0.14 tag manually, git pull --tags, but after running lerna publish I see vundefined again. After that I deleted tag vundefined, git describe --abbrev=0 --tags correctly shows last tag, but lerna publish says: \n? Select a new version (currently undefined) (Use arrow keys)\n\u276f Patch (null)\n  Minor (null)\n  Major (null)\n  Prepatch (null)\n  Preminor (null)\n  Premajor (null)\n  Prerelease\n  Custom\nAny thoughts how to fix it?\nUPD: fixed it with publishing custom version, but anyway \"current\" version in this case determined incorrectly. ",
    "pixelass": "I always get this issue when I forget to npm login before publishing new public packages. I also got this issue without -force-publish=*.\nI was hoping that the flag would fix the issue.. I also think it might be a hiccup somewhere. \nI experienced this twice in the last two days. \nIt is uncertain to say though since I don't manually check all packages after publishing.. > You... --force-publish everything on every release? That's, uh, interesting.\nI actually only tried it to work around the issue (https://github.com/lerna/lerna/issues/1344#issuecomment-375329644)\n\nNotably, you're using yarn to publish, so this isn't necessarily an npm bug. Who knows what demons lurk in the yarn codebase. In my experience, there are harsh edge-cases with yarn.\n\nI guess you are referring to this:\njson\n{\n  \"npmClient\": \"yarn\"\n}. Moving away from Github. Feel free to reopen if interested.. ",
    "timneedham": "@pixelass  and @KELiON... that specific problem went away when I lerna init again to get a missing version property in lerna.json:\n{\n  \"lerna\": \"2.9.0\",\n  \"packages\": [\n    \"packages/*\"\n  ],\n  \"hoist\": true,\n  \"command\": {\n    \"init\": {\n      \"exact\": false\n    }\n  },\n  \"version\": \"0.0.1\"\n}. ",
    "rjdestigter": "I use this script to double check if the packages that are managed by lerna have the latest dependencies as well as if they conflict with npm after publishing fails:\nhttps://gist.github.com/rjdestigter/e673ccfcfff921d40d26246bfbb4ca60\n(Install the necessary imports at the top and replace \"NAMEOFYOURORGINISATION\" with your npm organisation name.) The script basically collects all package.json files. Then for each package checks if it depends on packages within my organisation and is behind in a dependency version. Then it uses npm view version to check if the version is different from the version that is published on npm.. ",
    "vittalas": "I ran into this issue as well where my lerna publish failed due to some issue with our repository but the tags were created and now i am not able to republish that since it says no updated packages to publish\nlerna info Checking for prereleased packages...\nlerna info No updated packages to publish. \nwhat is the solution for this? how can i republish already created tags by lerna . ",
    "berstend": "I ran into this as well today (a yarn token issue mentioned in #1347). To my future self \ud83d\ude04:\nConfirm publishing state (no commits had been pushed yet):\n```bash\n~/d/o/puppeteer-extra git:master \u276f\u276f\u276f git status\nOn branch master\nYour branch is ahead of 'origin/master' by 1 commit.\n  (use \"git push\" to publish your local commits)\nnothing to commit, working directory clean\n~/d/o/puppeteer-extra git:master \u276f\u276f\u276f git log\ncommit 603032ec35b16a6eb60a9940cb0801de78fef9bb\nDate:   Sat Aug 18 19:47:52 2018 +0200\nPublish\n\n - puppeteer-extra-plugin-anonymize-ua@2.0.8\n - puppeteer-extra-plugin-block-resources@2.0.9\n (...)\n\n~/d/o/puppeteer-extra git:master \u276f\u276f\u276f git describe --abbrev=0 --tags\npuppeteer-extra-plugin-devtools@2.0.9\n```\nRevert failed publish (doesn't reset tags, only the last commit):\nbash\n~/d/o/puppeteer-extra git:master \u276f\u276f\u276f git reset --hard HEAD^\nHEAD is now at c7537d0 Update docs\nConfirm and fix yarn / npm issue:\n```bash\n\u276f\u276f\u276f yarn login\nyarn login v1.7.0\ninfo npm username: berstend\n\u276f\u276f\u276f npm whoami\nnpm ERR! code E401\n\u276f\u276f\u276f npm login\nUsername: berstend\n\u276f\u276f\u276f npm whoami\nberstend\n```\nUpgrade lerna (i was still on 2.11.0 and 3.1.1 handles publishing errors better):\nbash\n~/d/o/puppeteer-extra git:master \u276f\u276f\u276f yarn add lerna --ignore-workspace-root-check --dev\nModify lerna.json to use npm instead of yarn as registry client (it just wouldn't work with yarn):\nbash\n  \"npmClient\": \"npm\",\n  \"registry\": \"https://registry.npmjs.org/\",\n... and finally run lerna publish two times (one for good measure and one due to existing tags).\nWhew! \nThe yarn error I was hitting (for google fu):\nlerna ERR! publish error No token found and can't prompt for login when running with --non-interactive.\n. ",
    "gwely": "When publishing to the registry fails, is it possible to not only not push the \"Publish\" commit, but to revert the commit and delete the tags? Or just not take these steps until the packages have been successfully published?. ",
    "amphro": "That would be my vote too. I don't think the \"Publish\" commit or tag should be pushed if the NPMs don't publish.. ",
    "flodev": "I had a lerna publish error because of a wrong configured .npmrc\nIn my case I had to (fix my npmrc first and then) go through all my packages and and execute manually npm publish --ignore-scripts <packagename.tgz> (tgz files where already created by lerna publish). ",
    "netpoetica": "@gigabo Do you think Lerna will ever move toward supporting Git submodules? This would be a huge win for the monorepo argument, especially for people who are using Git. One of the first concerns I have is the merged git history for all of these packages (I am not alone on this). Git submodules would solve this problem and allow for faster clones, cleaner Git history.. ",
    "paralin": "I'm running into the same thing - I use submodules for the parts of my project.\nThe change should be minimal enough. Instead of making a commit and log for just the root repo, detect any submodules in the packages directory and do the bump/commit process on each of them separately, then finally do it on the root repo, using the package repo as the working dir for git.. ",
    "yi-ge": "We also have the same problem, we want to use lerna with submodule. \u263a. ",
    "bluelovers": "i know why my publish is fail now, lol\nhope can support it. ",
    "MM263": "Also ran into this issue. We wanted to develop in one monorepo, but for gitlab-ci deployment purposes we wanted to store package code in submodule. ",
    "kristianmandrup": "Would be nice with a short paragraph/recipe on a typical setup for CI/CD. I guess it would just be publish without pushing to npm, triggering the CI from the git repo? or is there a smarter way?. OMG! Too tired... never program on too little sleep. Put dependencies in reverse order!. ",
    "Rowno": "I got CI publishing working on CircleCI using lerna publish --skip-npm, this script:\n```js\n!/usr/bin/env node\n'use strict'\nconst path = require('path')\nconst fs = require('fs')\nconst execa = require('execa')\nconst TAG_REGEX = /[^@]+@[0-9]+(.[0-9]+)*/\nconst tag = process.argv[2]\nif (typeof tag !== 'string') {\n  console.error('Tag required')\n  process.exit(1)\n}\nif (!TAG_REGEX.test(tag)) {\n  console.error('Invalid tag')\n  process.exit(1)\n}\nconst [packageName, packageVersion] = tag.split('@')\nconst packagePath = path.join(__dirname, '..', 'packages', packageName)\nconst packageJsonPath = path.join(packagePath, 'package.json')\nif (!fs.existsSync(packageJsonPath)) {\n  console.error('Package doesn\u055at exist')\n  process.exit(1)\n}\nconst pkg = require(packageJsonPath)\nif (pkg.version !== packageVersion) {\n  console.error('Version mismatch')\n  process.exit(1)\n}\nexeca('npm', ['publish'], {\n  cwd: packagePath,\n  stdio: 'inherit'\n})\n  .then(() => {\n    process.exitCode = 0\n  })\n  .catch(() => {\n    process.exitCode = 1\n  })\n```\nAnd this CircleCI config:\nyml\ndeployment:\n  publish:\n    tag: /[^@]+@[0-9]+(\\.[0-9]+)*/\n    commands:\n      - ./tools/publish-tag.js $CIRCLE_TAG. ",
    "kopax": "Hi, we would like to publish to npm in our ci. We need to do it non interactive.\nUsually, we just bump the next version of package.json on dev branch when we tag from master. This way we just need to keep or update the version in package.json before merging to master to tag a specific version.\nIs it possible with Lerna ?. @evocateur do you have another purpostion on how we should adapt our publishing process to integrate Lerna in our stack? Why won't this be implemented that way?. Thanks @evocateur for conventional commits link. I will consider it in the futur to automate our changelog.\nSo far, the only solution in the CI is to run my own script and iterate in each package to tag ?. @evocateur painful in what way ? \nI feel like the simple script would just iterate for packages/**/package.json and run npm version patch then git tag. Do you see any other complication ?. > Well, in that case, I guess why bother with lerna, then? \nI've been playing with lerna and it is an amazing tool, that is I think a good reason to use it.\nTo use it in our stack, we need to be able to release and tag during our CI process and that's a requirement.\n\nbut with no record of the changes, and a version number that is really awkward.\n\nI don't get that point. We are doing all our change in dev branch, the CHANGELOG.md is updated manually and controlled before merging to our master. \nThe person who is opening the merge request to master is in charge of setting the proper version in package.json. The person who validate the commit is in charge of confirming the version.\nWith this in place, we have been able to manage many projects and dependencies without worrying about the release part. We'd like to keep it that way. \nNow we have tried lerna, we like to be able to host multiple packages on a single git repository which will increase even more our productivity.\nDo you think another option to fit that need could be requested? \nIf lerna can let us play that way, I'll be happy to help (writing the feature request) and programming (if assisted).\n. ",
    "thomasfr": "I took a quick look into the source - you do not use the official npm module programmatically, is there a reason for this (I never used it myself before, i just know that one could use it programmatically). \nHave you an idea how we can workaround that for the moment? One (half) solution would be to use fixed versions in package.json and remove the npm-shrinkwrap.json file - knowingly that subdependency versions could change though.\nJust fyi: npm update -s checks for new published versions and update the installed module in node_modules and also updates the npm-shrinkwrap file - so maybe there is a programmatically appropriate method.. In my case the problem was that i was logged in with npm but was using yarn run lerna publish. Solution was to either login with yarn (yarn login) or use npm (npm run lerna publish) and make sure you are loggedin. I can confirm this. We are using --hoist and --npm-client=yarn together and when doing lerna bootstrap i can see npm install --global-style. @evocateur @MoOx Do you know what this would mean to lerna? Would Lerna then be obsolete? Or would Lerna just use this workspaces feature?. Is it possible to exclude some node modules from beeing hoisted to the root folder? Like the lerna no-hoist flag did before?\nBut besides that. Awesome work. Cuts the installation time by half with yarn workspaces for us!! From ~2minutes down to 58secs. Just fyi i created an issue for --no-hoist at yarn: https://github.com/yarnpkg/yarn/issues/3882. FYI: I created an issue at yarn for supporting --no-hoist like lerna: https://github.com/yarnpkg/yarn/issues/3882. ",
    "bryanspears": "I just ran into this since I have some fork PRs outstanding and realized the publish commits/tags weren't in the \"upstream\" repo (rather, they were in my \"origin\" fork).\nLike @thomasfr suggested, being able to configure an \"upstream repo\" would be fantastic. Then the maintainers of a module don't need a second repo that points \"origin\" to the non-fork version of the modules repo.. ",
    "lmeyerov": "Ah, looking at lerna-debug.log:\n```\n...\n\\n[WEBPACK] \u2705  Successfully built graphistryJS.js\\n\"\nlerna(error)   NpmUtilities.execInDir        (\"run prepublish\", [], \"./packages/viz-app\")\n    Error: stderr maxBuffer exceeded.  Partial output follows:\n\b\b\b\b\b\b\b\b\b\b\b\b\b\b  0% compiling\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 10% building modules 0/1 modules 1 active multi vendor\b \b\b \b\b \b\b \b\b \b\b \b\b \b\b \b\b \b\b \b\b \b\b \b\b \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 10% building modules 1/1 modules 0 active\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 10% building modules 1/2 modules 1 active ...node_modules/moment/min/moment.min.js\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 10% building modules 1/3 modules 2 active ...phistry/falcor/dist/falcor.all.min.js\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 10% building modules 1/4 modules 3 active ...viz-app/node_modules/lodash/lodash.js\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 10% building modules 1/5 modules 4 active ...pp/node_modules/simpleflakes/index.js\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 10% building modules 1/6 modules 5\n\n...\npicker/styles.less\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 69% building modules 1432/1436 modules 4 active ...mponents/histograms/EncodingPicker.js\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 69% building modules 1432/1437 modules 5 active ...nts/histograms/sparklineComponents.js\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 69% building modules 1433/1437 modules 4 active ...nts/histograms/sparklineComponents.js\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 69% building modules 1433/1438 modules 5 active ...omponents/tethered-select/styles.less\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 69% building modules 1433/1439 modules 6 active ...de_modules/react-select/lib/Select.js\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 69% building modules 1433/1440 modules 7 active ...ed/components/color-pill/colorPill.js\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 69% building modules 1433/1441 modules 8 active ...viz-client/components/labels/label.js\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 69% building modules 1433/1442 modules 9 active ...iz-client/components/labels/labels.js\nlerna(error)   NpmUtilities.runScriptInDir   (\"prepublish\", [], \"./packages/viz-app\")\nlerna(error)   Errored while running BootstrapCommand.execute\n```\nThis seems related to other maxBuffer issues posted here, apparently not resolved.. ",
    "danibram": "same here, when i try to run a webpack task from lerna \"2.0.0-beta.37\". ",
    "rogierschouten": "I just tried version 2.0.0-beta.30 and there it still works.. ",
    "cif": "THANK YOU @cchamberlain. The fact that you have to install common devDependencies at the project root and not via lerna boostrap should be in the docs / README! \nI realize that this is a feature of node and not lerna but I've been using node since day one and walking up to resolve deps is news to me!. Understood on how the bootstrap command works, just wasn't clear how common devDependencies https://github.com/lerna/lerna/blob/master/README.md#common-devdependencies were actually being resolved.  Turns out this is simply a node feature I wasn't aware of. My comment is that a short note explaining this in that particular section would be helpful.. I'd suggest simply supporting more --cd-version semver values a la https://github.com/sindresorhus/np#usage\ne.g. lerna publish --yes --cd-version=prerelease\nhttps://github.com/npm/node-semver#prerelease-identifiers\nAhh, I see what you mean with --scope (rc | beta | alpha) now looking at semver.inc signature\n. If I understand what you are trying for, then makes more sense to open a separate PR for \"forcing package (unchanged, but QA/ready) to publish based on versions of scope type\". That functionality would belong in UpdatedPackagesCollector.js. \nIMO beyond scope of my intentions with #607. Curious as to opinion of other contributors though, I have a bit of bandwidth this sprint but not as much as last two weeks.\n. I made all the changes requested and made the corresponding tests match more closely with your current pattern. Unfortunately, I can't figure out why Appveyor is upset. I changed the ci script to remove all the verbose logging to see if I could isolate any one problematic test. All tests are working locally, Travis is happy but Appveyor is timing out: \n182 passing (38s)\n  1 failing\n  1)  \"after all\" hook:\n     Error: timeout of 5000ms exceeded. Ensure the done() callback is being called in this test.\n      at done (C:\\projects\\lerna\\node_modules\\mocha\\lib\\runnable.js:285:13)\n      at callFn (C:\\projects\\lerna\\node_modules\\mocha\\lib\\runnable.js:344:7)\n      at Hook.Runnable.run (C:\\projects\\lerna\\node_modules\\mocha\\lib\\runnable.js:319:7)\n      at next (C:\\projects\\lerna\\node_modules\\mocha\\lib\\runner.js:298:10)\n      at Immediate.<anonymous> (C:\\projects\\lerna\\node_modules\\mocha\\lib\\runner.js:320:5)\nWhat's interesting, is that there are 182 tests currently, so the mysterious fail doesn't seem to exist at all?. There's a bit of talk in #567 about how to support the other semvers e.g. prerelease as well as release phase/scope (rc | beta | ...). Should all be fairly straight forward updates to PublishCommand.js, IMO wouldn't have to be part of this PR but that's up to the maintainers :). @evocateur Just took a swing at resolving them, waiting on tests will update if they fail master was still assuming that call exec were using \"cd ...\" whereas the changes you suggested eliminated that need (use cwd opt). @evocateur sounds like we may have overlapped, but I just pushed up some quick fixes for those tests. Feel free to clean up, could probably have used a helper instead of the copy/paste. @bradbarrow We only increment the same value for each package.  In our case we only use independent versioning because our starting points were already different which is why I created the PR.  \nTo handle the use case you describe it would require code changes as well as a specification for each increment on a package level (perhaps in each package.json) which seems tedious to maintain especially if you have a lot of packages.\nOn a higher/philosophical level, it's worth asking the question - if your packages are versioning semantically independent of each other, are they really fit to be contained in a mono-repo project or are they better as independently maintained projects at that point? \nGenerally, most of the teams I see who have the choice of lockstep vs independent (i.e. Babel https://github.com/babel/babel/blob/7.0/lerna.json) will choose lockstep if possible.  \nHope that helps! \n . Just a suggestion, but feel it would be worth refactoring these tests to smaller assertion blocks / calls rather than the larger fixture > result chunks. CLI tools with lots of arg permutations is hard to test all paths . I had the same thoughts :) This was the easiest point of interception to get this working locally without introducing much new functionality. Stoked maintainers are willing to help guide this one, we really need it. Any suggestions on flag name? I feel it should be fairly straight forward within the same method to intercept and alter the test. I'll get back to you with more suggestions on that first thing next week. As I stated in the comment, definitely tough to get all paths (especially the inverse coverage) when you have many options. Had to increase timeout for appveyor tests to pass (see main conversation thread for error there). Also removed DEBUG_CALLS to make test output readable. If you want it restored, happy to do as part of this PR. I was hesitant to send both to callback in the deconstructed object, however in independent mode updateVersionInLernaJson method isn't called due to execute:\nif (!this.repository.isIndependent() && !this.flags.canary) {\n        this.updateVersionInLernaJson();\n      } \nI did local tests switching between both and publishing to our local npm repo. I also added both normal and independent modes to the test suite. . If it's more clear, we can use another !this.repository.isIndependent() check here and send either-or to callback. Just let me know and consider it done if that's the call. I went ahead and made the change to getVersionsForUpdates() so the object passed is explicitly version or versions. I was getting odd NPM ERR on the final publish step in my build and realized because our modules are all @scoped/module in the package.json but simply module in the directory that tagging would only work if you cd into the module before tagging. Kind of a long story having to do with our deployment pipeline but we came to the conclusion it was a better strategy to always version. Removing the option in latest changes. Ternaries no longer needed due to current version removed. I changed getTagOpts signature to accept directory in addition to registry. publishTaggedInDir was already using the same cd ... && npm ... method. I updated this so that all methods are now using your suggestion . Warning goes away due to current removal as well. . ",
    "gpltaylor": "Where the hell did that little feature come from! I know this is a node thing, but I have been scratching my head wondering how to make sure all the packages are using the same version! I have been looking at webpack stats for years to work this out.\nNode keeps looking up the tree for a node_modules, this is clever and a little scary.\nToday is a school day \ud83d\ude04 . NOTE: I am solving this issue by manually adding the package to packages.json, then running \n$ lerna bootstrap\nThis works really well, but I want to confirm if this is the correct way?. Thank you @danoc . I have been able to fix this by editing the progressBar.js\nIn some cases the package name is undefined. This causes the error when trying to run slice on it.\nI placed a null check and this worked.\nhttps://github.com/lerna/lerna/blob/v2.0.0-beta.38/src/progressBar.js#L37\ntick(name) {\n    if (this.bar && name) {\n      this.bar.tick({\n        packagename: padEnd(name.slice(0, 50), 50)\n      });\n    }\n  }\nNOTE: The real issue is working out why the pkg name is undefined but I don't have the time to dig into this at the moment. Quick hack/fix. Just noticed that one of the package.json files has become corrupted. This explains the bad package name, as the code can't read the project name from the json.\nIt looks like Lerna did not restore the file after running bootstrap. It's only got the dependency lines in there now.. I'm still learning Lerna \ud83d\ude04 but this might be related to the version number \"0.0.0\" used in the lerna.json.\nI have mine set to \"independent\". If you want a central version, you might have to increment this version, but that's a guess.\nCan you let us know what you mean by \"get everything working\". For example, it's not installing dependences, not creating symbolic links etc.. ",
    "cmrd-senya": "This request has been implemented in #1326. ",
    "garthk": "Have you tried lerna publish --only-explicit-updates as a workaround? From the distant tail end of the README:\n\n--only-explicit-updates\nOnly will bump versions for packages that have been updated explicitly rather than cross-dependencies.\n\u2026\n$ lerna updated --only-explicit-updates\n$ lerna publish --only-explicit-updates\nEx: in Babel, babel-types is depended upon by all packages in the monorepo (over 100). However, Babel uses ^ for most of it's dependencies so it isn't necessary to bump the versions of all packages if only babel-types is updated. This option allows only the packages that have been explicitly updated to make a new version.\n\nCore developers:\n\nIt strikes me we could traverse the dependency graph, bumping versions of published packages only if the new version of their dependency failed semver.satisifies for their declaration\nWe could provide a publishOnDependenyChange option in lerna.json with valid values always (current behaviour) and auto (only if the new version number was out of range)\nLerna should always offer skipping a version bump when prompting\n. True, @ericnkatz, and I even stuffed up the lay-up: look how the PR went.. 272 commits in my repo.. Rebased on current master, discarding the packagesLocation change per @evocateur feedback. Waiting for CI to tell me if there's still a problem on Windows.. I'm not sure this AppVeyor build failure was caused by my changes:\n1)  \"after all\" hook:\n     Error: timeout of 5000ms exceeded. Ensure the done() callback is being called in this test\n\nIn other news, @evocateur will need to eyeball that I've accommodated his requested change. GitHub doesn't seem to have figured it out.. Righto, whatever was stuffing AppVeyor cleared. Remaining review work:\n\n[x] @evocateur to reassure GitHub I restored the line he wanted restored\n[ ] @doug-wade to escalate his raised eyebrow or let us know he's OK given the explanation\n. It's every time I run lerna bootstrap after nuking all of the node_modules folders, both at the monorepo's top level and under the packages directory. No, I'm afraid I can't link to the repository.. I see @spudly thumbed up; same symptoms? Can link to repo?. Turns out, I more or less asked already in #472.. I can't strongly enough emphasise @smrq's comment above. Bumping a package's version whenever one of its dependencies changes has harmful side-effects many of us would like to avoid.\n\nYes, sometimes it's important to change your dependency from ^1.0.1 to ^1.0.2 to indicate that you need that bug fix. When you do so, you must bump your own patch.\nNo, that one situation in which you should update your dependency doesn't mean you must always update your dependency.. Otherwise put: when preparing deployment images, lerna bootstrap --scope $(PACKAGE) --include-filtered-dependencies should not pull in all the devDependencies if NODE_ENV=production.\nI'm seeing the dev/not conflation @tivac describes even with hoist: false, looking at this package-lock.json I just produced with Lerna 2.0.0-rc.5 and npm 5.0.1.\n\u2026 and with another with hoist:true and npm 4.6.1.. Workaround to force npm 4.6 despite a global npm 5, at least when running lerna in the root of your monorepo:\n\nnpm install --save-dev npm@4.6.1\n\nset npmClient to node_modules/.bin/npm in your lerna.json\n. Anyone figured how to set that locally? . @Robinfr when Lerna writes its temporary package.json it pulls out everything it thinks it doesn't need \u2014 including version and name, both of which get materialised into package-lock.json in the way you need. I think the fix is to write both version and name to the temporary package.json. If you're doing version, could you also do name for #1454? Thanks.. @Robinfr npm derives package-lock.json from package.json, so by changing how Lerna produces package.json during bootstrap you can get the desired result observed in package-lock.json without having to write code to read, alter, and re-write the latter.. Led here by npm/npm#20566; ran into problems with @evocateur's suggestion above and 3.0.0-beta.20; will look for relevant issues.. Still hoisting in 3.0.0-beta.21.. I tried 3.0.0-beta.20, @evocateur, but ran into #1419 forced hoisting with incorrect paths. If someone is willing to fix the hoisting or give me some hints on where in the code to fix it myself, I'll give it another shot with my full repo and isolating the incorrect paths part if it's still happening in beta 21.. Yeah, let's unpack it. Why not.\n\n\nSome of the projects' devDependencies sets are huge\n\nOne project's dependencies contains a module that sometimes has a 15min install time for reasons beyond our control\nnpm install and, thus, lerna bootstrap, used to take a really long time\nSo, that's why I'm so interested in lerna bootstrap --scope $(PACKAGE) --include-filtered-dependencies --ignore-scripts with no hoisting: speed, mainly through avoiding optional work\n\nAll that said:\n\nnpm install has since got a lot faster\nIf I'm reading your comment in #1419 right, withfile:packages/wut relationships we won't get the devDependencies for wut at all with an npm install in the dependent package, which might break the build phase\nThat one annoying package hasn't taken 15min in months\nSo, it might plausibly all turn out fine\n\nRemaining concerns:\n\nI'm not sure how npm publish will work with those file: dependencies: what's your plan, there?\nI'm also not sure how those builds will work, which comes down to the TODO docs\nHoisted devDependencies would force us to upgrade them all in sync, which we do most of the time but which we sometimes need to defer because of scheduling pressure\n\nZooming out, I'm getting the feel you're doubling down on support for monorepo management for packages which ship together as version-synchronised shards e.g. Turf and drifting away from support \u2014 which might have been accidental \u2014 for closed source internal teams using Lerna while shipping packages that ship separately with distinct versions. Which is fine, but let's call it out early so everyone in the latter category can make plans.. Plain nightmare, I'm afraid. Try installing gdal whenever your version of Node hits a major upgrade before their build infrastructure catches up. One time, we ended up forking it just so we could store our own copy of the heavy artifact.\nI'll double-check our workflow to see if we're up for lerna publish again. We stopped using it because of the obnoxious version bumping (#718 / #707). . https://github.com/lerna/lerna/blob/7200fd010a67cdea6b541117e68a0a3c6694e720/commands/link/index.js#L36\nIt's the whole package. No, wait. It's link convert, isn't it?. I've upgraded to Lerna 3.1.4, converted my inter-package references to file:, and am trying to get a lerna bootstrap at the monorepo root to work like it used to. Seems that without a file: reference from the root to a leaf or one of its dependents, lerna will install its external dependencies but not link to its internal dependencies. I was hoping lerna link would fix that. It'd make sense, given the name, but that's not what it does.\nlerna bootstrap --scope $PACKAGE --include-filtered-dependencies still does what I expect.. lerna exec --sort npm install does the trick, slowly, but does the npm install repeatedly for any package depended on by others. On subsequent runs, npm install fails with more ENOENT batches, suggesting it managed to corrupt its own lock files. Not happy.. I expect the reproduction repository gets the results it does because I'm doing something that doesn't align with the opinions materialised in your design, @evocateur, but I'm unable to figure out exactly how. I thought I'd read the tea-leaves right by replacing my versions with file: links, but clearly not.\u0010. @DMPS you don't need a vulnerable package: you need a vulnerable version of a package. Try hoek@2.16.3 or tunnel-agent@0.4.3 or stringstream@0.0.5 or macaddress@0.2.8 or anything else with an advisory.\n@evocateur could you point to whatever code alters package.json before and after npm install or npm ci?. Point.. Which would you prefer?\n\nOutput native paths in the error message\nCoerce to Unix-style even on Windows?\n\nIn master now, we hard-code UNIX style slashes in ImportCommand.targetDir:\nthis.targetDir = \"packages/\" + externalRepoBase;\n\u2026 so, in any test checking targetDir either explicitly or implicitly via an Error, we need to coerce the test's expectation to UNIX style paths.\nIn my change, I use path.join for targetDir, so the test expectations should be whatever path.relative or path.join gave us, not normalized.. ",
    "kospiotr": "@garthk this is no more a workaround for other than Babel projects:\nlerna publish --only-explicit-updates --force-publish=* --yes\ngot:\n--only-explicit-updates has been removed. This flag was only ever added for Babel and we never should have exposed it to everyone.. ",
    "AnaRobynn": "I'm wondering if lerna is a good use-case now that I read this issue:\nImagine I have an b2b product, which consists of indepedent React apps: Login (A), B2B (B) and account management (C).\nLet also say I have services module (D) and generic component library (E).\nI understand that changing something on D or E, 100% has impact on A, B and C and I agree they should be version bumped. \nBut let's say I added a bugfix for A and want to release that. I want to version bump A from x.x.0 to x.x.1, without touching the other modules, because it has no impact on them, since B, C, D and E don't depend on changes from A.\nThe main reason for switching to a monorepo is code-sharing of D and E with the stand-alone apps A, B and C. Do you think lerna is still a good fit for that?\n. Hmmm, I feel I'm missing a key piece in order to understand this behaviour completely. Can you check out the last comment I made here? https://github.com/lerna/lerna/issues/1332#issuecomment-376089905\n. @evocateur What do you mean?\nI'm looking at a repo where I recently published and when I publish again, without changing any code or packages it still prompts me to choose the version bump, which shouldn't happen. I'm running in --independent mode, so I would like to be in control which package actually gets a version bump.. @evocateur I'll test it out with two packages that have no single dependency between each other, but just 1 dependency in the top level json. \nEDIT: I just tried it where the packages have depedencies on each other and they still always want to bump all versions. I feel I'm missing some key information. \nI ran npx lerna publish --conventional-commits --skip-npm and npx lerna publish --skip-npm. \nDoes commands also add a gitHead property in my package.json, is that standard behavior?. ",
    "mrkstwrt": "I'm having a similar issue. I've read in other issues that only packages with dependents that have been updated will be bumped, however I have a package in my monorepo with no dependents or dependencies and it still gets a minor bump every time any other package is updated.\nI wouldn't mind at all if packages with updated dependants got a bump but it seems silly that I'm publishing a new identical version of a utility package every time I update anything.. ",
    "kirill-konshin": "In our repo we have actual packages and demo apps, we don't care about versions of demo apps, more over, they are private packages, so version there could always be 0.0.0 and nobody will ever care.\nAlso, in our workflow, we bump version numbers manually (or by calling lerna version --no-git-tag-version --no-push) and then when I run lerna publish I expect it to just use existing versions and not do any bumping (bc it runs on CI as well, w/o extra git tags).. It seems that describeRef call tries \njs\n        describeRef({\n          match: `${tagVersionPrefix}*.*.*`,\n          cwd: this.execOpts.cwd,\n        })\nTries to find prev version, and fails, since there are no matching tags yet.\nMoreover, if the previous tags do exist, but with different --tag-version-prefix situation is the same.\nI wonder why canary tries to get PREVIOUS version, if there is an explicit version set in lerna.json or package.json, am I missing something?\nHow should I make a canary release of upcoming version then?. Let me clarify. There's no 4.0.0 yet in git. There's no even 4.0.0-alpha.0. But I was going to start publishing the canary releases for upcoming 4.0.0. Is there a way to do that?. What if there will appear a 4.x tag? All canaries will become for 5.x?. Yep, of course. It just means that once we release 4.x we will have to update that too. Resolved.\nBut.\nIf it is a clean repo, with no tags, and I'd like to release something as canary, what to do?. Well, just imagine the case when developer wants to release something as nightly builds but lerna kinda forces the dev to have at least 0.0.1, which (in my opinion) should not be necessary for the given case.. Prepare trick DID NOT WORK.\nTeam has investigated, looks like the root cause is usage of non-strict lerna dependencies:\n\nActual issue is probably caused by this commit https://github.com/lerna/lerna/commit/944e36fbd1849fcd3fee554e5598e686d5429fde#diff-f132f0ed53f33747644da180a09d15baR170\nConsidering that we did not change the lerna version this is a major bug to me.\nAlso team has figured that the following works:\ndiff\n-    \"postinstall\": \"npm run bootstrap\",\n-    \"bootstrap\": \"lerna bootstrap --no-ci --hoist --loglevel warn --concurrency 4\",\n+    \"postinstall\": \"lerna bootstrap --no-ci --hoist --loglevel warn --concurrency 4 \",\nE.g. place lerna bootstrap directly to postinstall script instead of into bootstrap script called from postinstall.. We were not using lockfile because it turned out to be completely useless as we have 30+ developers working on same codebase and most of the times devs resolve conflicts inside lockfile by erasing it :) otherwise over time it was polluted with weirdness. But that's a side question...\nMore important one is why breaking changes sneaked in minor version update.\nv3.10.2 fix confirmed.. ",
    "aeneasr": "Same issue here on my end. Apparently you need to publish all packages manually at first. Hm, it worked locally but it doesn't on travis-ci: https://travis-ci.org/ory-am/editor/jobs/194554082#L1185-L1205. Same question here, @noherczeg are you by any chance running on windows?. this is a dupe of #446. Apparently, the solution is rather simple. I had to add json-loader to the root package.json (same directory where lerna.json resides). workaround for sh/bash: echo 'y' | lerna clean\ndoesn't work on windows obviously. Awesome! :). Awesome, exactly what I'm looking for! Would it be possible to release this change @evocateur ? :). ",
    "rdamborsky": "Are your packages marked as private in their package.json files? That's been an issue for me. Took me long, but https://github.com/lerna/lerna/issues/570 finally helped me to move on.. ",
    "Hocoh": "\nApparently you need to publish all packages manually at first\n\nI'm wondering that. ",
    "ericnkatz": "I love that you made this issue as a lay up for beginners and then made a PR with the fix later that day lol.. You got this. \u2764\ufe0f . ",
    "sstone1": "I hit this problem, I worked around it by modifying a value in this file:\n/usr/local/lib/node_modules/lerna/lib/ChildProcessUtilities.js\njavascript\n// maxBuffer value for running exec\nvar MAX_BUFFER = 500 * 1024;\nI changed MAX_BUFFER to 500 * 1024 * 1024.. ",
    "toddself": "Also happening on Arch Linux (kernel 4.8.13-1) using node 6.9.2 but only when trying to import large (200+ commits) repos. ",
    "jvivs": "Seeing the same error w/ importing a package with 173 commits into a fresh lerna repo. Relevant lerna, node, npm, and git versions:\nLerna v2.0.0-beta.32\n$ npm version\n{ npm: '3.10.10',\n  ares: '1.10.1-DEV',\n  http_parser: '2.7.0',\n  icu: '56.1',\n  modules: '46',\n  node: '4.6.2',\n  openssl: '1.0.2j',\n  uv: '1.9.1',\n  v8: '4.5.103.42',\n  zlib: '1.2.8' }\n$ git --version\ngit version 2.5.0\nChange to MAX_BUFFER mentioned by @sstone1 allowed me to import successfully.. If it helps at all, I'm seeing something very very similar with a private registry (artifactory) lerna@2.0.0-rc.4, and either yarn@0.24.3 or npm@3.10.8.\nTurns out this bug is preventing us from using --hoist too (and other yarn scripty things).. @timoxley linklocal does look like a solid fix for file:...-driven dependencies. \nThe case I'm running into is slightly different, and quite possibly more of a problem for greenfield projects than a project w/ existing published dependencies.\nI would love to be wrong here, but linklocal doesn't look like it solves the problem of yarn always attempting to fetch versioned dependencies from a registry that are local to the repo, but haven't yet been published.\nEdit: https://github.com/yarnpkg/yarn/issues/2541 seems similar, but I don't think it's the exact issue we're running into yet... the issue we're having occurs before a package is published in the first place (i.e.: creating a new package in a lerna-managed repo + doing anything w/ --hoist). Also sounds like I need to create an issue for it \ud83d\ude4a \n. @evocateur that seems to make sense to me too in general.\nSeems like a good idea to only publish after making a best effort to verify publishing preconditions. \nWould it be worth running all the preflight scripting (pull latest tags, check mergable status w/ origin, test, build, perversion, etc) to verify the publish would be successful, then tag and push latest tag to origin as the last step before actually publishing to a registry?. @brianveltman to provide another data point, I upgraded to rc4 from beta.38 on friday specifically for yarn support and it worked well.\nI'm on yarn@0.23.3 and here's a version of my lerna.json edited for privacy: \n```javascript\n{\n  \"lerna\": \"2.0.0-rc.4\",\n  \"packages\": [\n    \"./\",\n    \"packages/*\"\n  ],\n  \"registry\": \"\",\n  \"npmClient\": \"yarn\",\n  \"version\": \"0.0.0\"\n}\n```. Ah, good to know!\nY'know we haven't tried --hoist yet. It sounded like a nice solution for speeding up install time by reducing duplication of common dependencies, but ran into errors when testing out --hoist with local unpublished packages (#501).\nWe're still pretty early and I was hoping that specific bug should go away once we've started publishing... but now that I think about it, I guess it would crop up every time a new package is created.\nI guess it's time to dig into the issue a bit more.\nI'll see what I find and come back w/ a bug report and/or PR.. ",
    "mjackson": "I also ran into this issue when trying to import a repo with 3416 commits.. ",
    "nicojs": "I'm running into kind of the same issue:\nvagrant@debian:~/stryker-mutator/stryker$ ./node_modules/.bin/lerna --logLevel silly import /home/vagrant/stryker-mutator/stryker-html-reporter/\nLerna v2.0.0-rc.3\nIndependent Versioning Mode\nAbout to import 53 commits from /home/vagrant/stryker-mutator/stryker-html-reporter/ into packages/stryker-html-reporter\n? Are you sure you want to import these commits onto the current branch? Yes\n332620f                                            \u2562\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591(node:6241) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): Error: spawnSync git ENOBUFS\n(node:6241) DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\n8120977                                            \u2562\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\nSo i get an unhandled promise rejection. However:\n\nI hit this problem, I worked around it by modifying a value in this file: /usr/local/lib/node_modules/lerna/lib/ChildProcessUtilities.js\n\nThis line isn't there anymore:\njavascript\n// maxBuffer value for running exec\nvar MAX_BUFFER = 500 * 1024;\nUPDATE:\nBut thanks! I found it with the help of you tip @sstone1 \nThe ChildProcessUtilities now uses execa. The buffer can found here: node_modules/execa/index.js:\njavascript\nconst TEN_MEGABYTES = 1000 * 1000 * 10;. @evocateur that should be done in execa before we can create a PR here, correct?. Awesome! Didn't even get around to do it and its fixed already. Thanks! I'll give it a spin right now. Is this something i can fix? I see you added the execa dependency 3 hours ago, has that anything to do with fixing this issue? . IMHO installing lerna globally is a bad practice. We just install it locally and put lerna bootstrap in postinstall. Is this issue fixed for local lerna installations?. In the mean time, people might be able to use https://www.npmjs.com/package/link-parent-bin\n. For what its worth, the work around for us is to put package-lock.json files in .gitignore. That way you have the npm4 behavior ... kind of. Too bad npm@5 forces package-lock.json files down your throat with each npm install.. Hmm ok. So it works, but isn't tested or documented. What about my 2 questions?\nMy opinion:\n\nwe might want to update \"^0.5.6\" as well if bar gets a major update (1.0.0 or 0.6.0), but not if it is only patched to 0.5.7, as 0.5.7 also obeys \"^0.5.6\". \nIn the same line, i think we should force a new release of foo if bar is updated to a version that is no longer obeying the peer dependent version of bar. \n\nIts pretty complicated, but i don't see another way that would work for plugin use cases. When releasing new versions, you generally tested that all plugins integrate together (that's one of the reasons to use lerna, easier integration testing). So we should publish new versions where needed to make sure all things work nicely together.. > I've done some tests (EDIT: not unit tests, by running lerna publish) and it does indeed bump peerDependencies\n@TombolaShepless \nThe bumping of the peerDependencies seems to only work if it is also a devDependency. Can you confirm that?\nYou can see the behavior in this commit: https://github.com/stryker-mutator/stryker/commit/a7257f637287f1939302e489eea699337ff71349. The peerDependency on \"stryker\" in \"grunt-stryker\" did not update, but the peerDependency on \"stryker-api\" in \"stryker\" did.. Ok, this is probably by design than? In that case we will add the devDependency. It isn't a lot of work and fixes this issue for us.. In that case, I would prefer for them to always update. . ",
    "cilice": "@evocateur @doug-wade  Any updates on this whether it'll be merged? It's approved, but being a PR since January, there are now some conflicts.. ",
    "anfedorov": "getting the conflicts resolved sounds like a good next step. also addressing @casesandberg's point?. @evocateur would allowing for trailing commas in the project.json be a valid solution, as well? even though technically a deviation from the formal JSON spec, I would much prefer that to error-ing at all and would be willing to fix it.. sounds good. unfortunately now that I know what the error means, I get nothing out of making it more clear ;)\nJSON spec aside, it does seem like browsers have supported trailing commas in JS ON for quite some time and they are incredibly useful in practice. > Normal npm commands will also fail with invalid package.json content, so we should aspire to useful error messages that help the developer fix the typo quickly and get on with their day\ngood point. fwiw, in iTerm2, a file path like /User/andrey/code/foo/project.json:23:34 can be opened with a single command-click in a way that editors recognize as pointing to that spot, so including that seems idea.. @Siilwyn fixed it in parse-json and load-json-file. could you update the version to load-json-fil@3.0.0 or comment on #976 if you see any issues?. @evocateur can you comment on how? I haven't looked into the issues yet, but some of our team has held off on updating (I switched to yarn, which is faster + has no issues). can try to look into what people's concerns were with npm5 if that helps.. ",
    "wbhob": "I am upset this never got resolved.. I am upset this never got resolved.. But I do like this feature, great work!. But I do like this feature, great work!. ",
    "Nufflee": "Any updates on this?. ",
    "slorber": "Hi @rgbkrk I'm looking for the same but did not find anything\nCheck this issue as well:\nhttps://github.com/zeit/next.js/issues/707\nI think it would be great to have a Lerna boilerplate with some idiomatic setting. Sure we can take a look at projects like babel as inspiration but they are pretty complex projects with specific requirements, while most of us just want to develop a webapp :). ",
    "ravicious": "I did what was suggested in one of the issues @slorber linked to: my shared packages are scoped under a common name. So I have a package bar that's in packages/bar, but its package.json has \"name\": \"@foo/bar\".\nAt work, we use webpack and babel for transpiling, so to make it work I had to do the following:\n\nSet resolve.symlinks to false.\nThis is needed for the next step.\nAdd /@foo/ regex to the include array of the rule that uses babel-loader.\nSince we turned off symlinks resolving in the previous point, other packages from the monorepo are going to resolve to node_modules/@foo/<package-name>, not ../<package-name>.\nThis was suggested in next.js issue, so I just went to see how they implemented it and did something similar.\nChange node_modules in resolve.modules to path.resolve(__dirname, 'node_modules').\nOtherwise webpack 2 tried to require dependencies from the node_modules of local linked packages. But that's probably because I use file:../bar for specifying them in package.json, as I don't publish them anywhere.\nSet up Jest to transpile files under the @foo scope.\nThis means adding \"transformIgnorePatterns\": [\"<rootDir>/node_modules/(?!@foo)\"] to Jest's configuration. https://github.com/facebook/jest/issues/2550#issuecomment-290812720\n\nSo now exported React components/Flow types can be transpiled by babel!\nOne more thing I did was to add flow-bin to devDependencies of the monorepo's package.json, but idk if it's necessary.. Yes, that was my problem as well. That happened after upgrading yarn to 1.0 I think. Unfortunately, I stopped working on the project that was using this stack, so I don\u2019t have a solution for this issue.. @sibelius Unfortunately not, I don't own rights to that project.. @kylecordes: I don't quite understand how you managed to make yarn with lerna work with unpublished packages. \ud83e\udd14 If I clone your repo, run lerna bootstrap, go to applications/admin and run yarn add react, I get the following error:\nerror An unexpected error occurred: \"https://registry.yarnpkg.com/@oasisdigital%2femployee-search: Not found\".\nThis error, I believe, is the subject of the problem @timoxley and me have: that it's not possible to manipulate package.json/yarn.lock through yarn if you have a lerna-managed, unpublished packages in your package.json.. Yeah, I'm on 2.0.0-rc.4. How should the current workflow look like? Is linklocal still required?\nI updated both yarn and then learn in @kylecordes's project to the newest version and I still get this error.. @timoxley: Thanks, I that the combination of yarn, linklocal & lerna indeed works. Though passing --mutex=network doesn't work for me \u2013 the bootstrap command fails with Package \"@foo/bar@\" doesn't have a \"version\". (~~~maybe it's related to #789~~~ it's most probably related to #683). I have to set concurrency to 1 to make bootstrap work.\nInitially I was confused by the mutex error and I wasn't sure if this combination of packages still works.. ",
    "LukasBombach": "Dude @ravicious that worked! Thank you! For others following this, I had to not do the step with path.resolve(__dirname, 'node_modules'), I simply had to keep the normal node_modules string (in a create-react-app-app). Ok, it does not quite work. I have to restart my webpack dev server any time I make changes to my imported packages.. I see, thank you. Hmm, not sure if this is a bug in lerna or if I am doing it wrong. I also have a case where I have a symlinked monorepo-package that has a peerDependency that it is supposed to find in the \"consuming\" monorepo package:\npackages\n | - @red/app\n | - @red/gql\n\n@red/app has a dependency to @red/gql and to graphql\n@red/gql has a peerDependency to graphql\n\n@red/gql also has a bin that makes use of graphql and when I execute it from @red/app it cannot find graphql.\nIt seems to me I am not doing anything wrong here and that this is supposed to work. It did work before we used a monorepo so I am not quite sure of @evocateur 's answer here. \nIf I do bootstrap with the hoist option it does work so it appears to me that it cannot find the graphql package from @red/gql because it is symlinked and it it searching for graphql in the wrong folder.. My question is should this work without hoist? Because if so, this is a bug report. And it appears to me that having a peerDependecy in a symlinked lerna dependency should be resolved properly. This appears to be related: https://github.com/npm/npm/issues/5875. I see, thank you.. Hey, thank you for picking this up and sorry for the late reply. cosmiconfig sounds awesome. As for the issues you mentioned I cannot estimate what lies behind these problems, but I know now you already have that on your radar so imma close this issue. Btw, thank you for lerna, it's really cool!. ",
    "sibelius": "@ravicious do you have a repo example of this structure?. for jest config check this https://github.com/entria/entria-fullstack/pull/13\nyou need to use require.resolve, instead of  node_modules because you can't know whether workspace will hoist or not . @Inkdpixels flow-mono-cli solves the problem\nwe can close this. this would be cool\nsomething like this https://react-testing-examples.com/\nbut for lerna. we should use lerna exec instead of lerna run to get colors?. anyway of doing this using yarn outdated?\nright now it is hard to validate outdated in only one package when using multiples packages. how can we make babel-loader to transpile all lerna packages?. ",
    "rgbkrk": "https://github.com/nteract/nteract uses both lerna and yarn workspaces, feel free to check it out. We have a common webpack config in packages/webpack-configurator, a flowconfig that resolves the right packages, and a jest config in our package.json that says how to map modules.\nUpdate: nteract is on typescript now so not all of the above applies anymore.. > Workaround to force npm 4.6 despite a global npm 5\nThis works well on macOS and Linux, does not work well on Windows as the npm bin references the npm-cli used by *nix systems:\n```\nError: Cannot find module 'C:\\projects\\nteract\\node_modules.bin\\node_modules\\npm\\bin\\npm-cli.js'\n    at Function.Module._resolveFilename (module.js:469:15)\n    at Function.Module._load (module.js:417:25)\n    at Function.Module.runMain (module.js:604:10)\n    at Function.runMain (C:\\Users\\appveyor.node-spawn-wrap-952-2fdd5baf427b\\node:40:10)\n    at Object. (C:\\projects\\nteract\\node_modules\\nyc\\bin\\wrap.js:23:4)\n    at Module._compile (module.js:570:32)\n    at Object.Module._extensions..js (module.js:579:10)\n    at Module.load (module.js:487:32)\n    at tryModuleLoad (module.js:446:12)\n    at Function.Module._load (module.js:438:3)\n```\nWe only noticed that via our AppVeyor setup.. What would be an ideal way of combining all the dependencies of the subpackages to add to the main package?. Thanks for doing this, it helps highlight some of what's going on with the npm5 / node 8 change.. Thanks for asking this, I really wish I knew what the right thing to do with lerna and npm 5 was.. Thanks for doing this, it was super helpful to see the error I'm running into:\nlerna info 8520709\nlerna ERR! import Failed to apply commit 8520709.\nlerna ERR! import Error: Command failed: git am -3\nlerna ERR! import error: Failed to merge in the changes.\nlerna ERR! import Applying: chore(RefactorContents): Cleanup ajax settings.\nlerna ERR! import Using index info to reconstruct a base tree...\nlerna ERR! import M packages/rx-jupyter/test/contents-spec.js\nlerna ERR! import Falling back to patching base and 3-way merge...\nlerna ERR! import Auto-merging packages/rx-jupyter/test/contents-spec.js\nlerna ERR! import CONFLICT (content): Merge conflict in packages/rx-jupyter/test/contents-spec.js\nlerna ERR! import Patch failed at 0001 chore(RefactorContents): Cleanup ajax settings.\nlerna ERR! import The copy of the patch that failed is found in: .git/rebase-apply/patch\nlerna ERR! import When you have resolved this problem, run \"git am --continue\".\nlerna ERR! import If you prefer to skip this patch, run \"git am --skip\" instead.\nlerna ERR! import To restore the original branch and stop patching, run \"git am --abort\".\nlerna ERR! import\nlerna ERR! import Rolling back to previous HEAD (commit 78c3e73fc680daca40dfb47cb9fd407066413338).\nlerna ERR! import You may try with --flatten to import flat history.\nlerna ERR! execute callback with error\nI'm probably just going to rebase the originating repo on a branch and then importing from a version lerna can work with.. Here's what I did to \"fix\" these commits:\n```\ngit rebase -i --root\nFind commit 8520709\nSwitch from pick to reword\nAlso do this with the following commit\n```\nannnnd somehow I was able to import it after doing this \n\u00af\\_(\u30c4)_/\u00af. Ok cool, thanks!. As a result of the recent compromise, I'd love to be able to enforce 2FA across our org. Is there a way to do the npm pack approach with lerna now or does this need work within lerna itself?. ",
    "Ephem": "I just found myself missing this exact feature. I ended up using git filter-branch to rewrite all commit-messages before importing (only locally of course):\ngit filter-branch --msg-filter 'printf \"[PREFIX_HERE] \" && cat' -- --all\nThis is definitely a hassle though so it would be an awesome opt-in feature!. ",
    "simon360": "It looks like this is the cause.\nBasically, lerna will only run scripts if they are defined in package.json; however, npm defines defaults for some scripts. test is one of those scripts - by default, it will echo 'Error: no test specified', even if test isn't defined in package.json at all.\nMy first instinct is that lerna would need a whitelist of scripts that have default values - this may be a place to start, although I'm not sure how complete it is. This also feels like a bit of a kludgy solution to me.. That would work, but would result in an error if a package defined a script named prehelloworld, left helloworld undefined, and then ran lerna run helloworld.\nI'm not sure how important that case is, though. There's tooling out there that expects pre{x} scripts, like husky with prepush and precommit, but in those cases, you'd probably never define a commit script, or try to use lerna run commit.. Actually, based on this from the npm source, only test and env would need to be covered (env is a bit of a weird one to have pre and push for, but who knows what people are into).\nSo maybe something like...\njs\nif (this.script === \"test\" || this.script === \"env\") {\n  this.packagesWithScript = this.filteredPackages;\n} else {\n  this.packagesWithScript = this.filteredPackages\n    .filter((pkg) => pkg.scripts && pkg.scripts[this.script]);\n}\nwould do the trick?. ",
    "frederickfogerty": "This can be closed. ",
    "emmenko": "It should be =*\nlerna publish --force-publish=*. Shouldn't we only change the message part? The tags part should stay the same.\n```bash\ncommit message now\nPublish\n\npackage-1@1.0.1\npackage-2@1.1.1\n\ncommit message with custom message\nchore: release :rocket:\n\npackage-1@1.0.1\npackage-2@1.1.1\n```. \n",
    "wookieb": "You're obviously right. I'm sorry for my mistake. Closing the issue.. ",
    "tusharmath": "BTW lerna publish --help doesn't document --force-publish. @evocateur why? Also if not --force-publish how does one solve this genuine use case?. ",
    "Reinmar": "Actually, it's only slow on the first run. I don't know how Lerna did this but it works super fast on subsequent runs (even though npm i is always slow). So this isn't an issue.. Hi Henry, thanks for asking! :)\nWe're getting close to the final release, so we've been re-thinking some of the infrastructure decisions, asking again the important questions and wishing for final answers :).\nOne of them was \"Whether to multi-repo or not\". We know the cost of having to maintain multi-repo project, but the benefits are important for us as well. So we decided to stick to that. \nHowever, we realised that we'll need to work on our current toolset anyway, because we're planning to switch to scoped packages and versioned deps (so far we're using GH urls in package.json). We're using Lerna in our dev tools already and are happy with it. So we came up with a plan to still use a multi-repo for the main project (https://github.com/ckeditor/ckeditor5), but then to use Lerna to digest that for npm. Actually, we have two options (described in https://github.com/ckeditor/ckeditor5-dev/issues/6#issuecomment-270349148):\n\nconfigure Webpack (or other bundlers) to source packages from directories where we cloned them,\nor use Lerna to symlink them and hope that bundlers will be able to source the files correctly (which Rollup can't, for instance)\n\nWe liked the 2nd option more as Lerna is getting more and more popular, so we'll be using a de facto standard for multi-package projects. This should make CKEditor 5 more familiar to some developers and, by contributing back to Lerna, we'll avoid deepening the fragmentation of JS world.\nBut one piece was missing still \u2013 a tool for managing a multi-repo. We've just finished a proof-of-concept of such a tool \u2013 https://github.com/cksource/mgit2 and I'm now working on porting CKEditor 5 main repository to that setup. Hence, this issue :D. It's an early stage still, but looks really promising.\n. It's nothing critical for us, but we'll try to make PR in some spare time.. Sounds great! I guess that this would help a lot with https://github.com/lerna/lerna/issues/505.. I tested it for CKEditor 5 and the install time shortened from like 5 minutes to 35 seconds :). I think it affected us too (https://travis-ci.org/ckeditor/ckeditor5/builds/197615503#L1201) so we're waiting for a new release :). I got a bit different error today, but from what I checked it's also related to concurrency:\nhttps://gist.github.com/Reinmar/b9978b60d09fec1ffc9f55f8d1262349\n(this is npm-debug.log from one of the packages in which npm i --global-style failed). Unfortunately, I didn't save it as I went straight to npm-debug.log (which is usually more helpful so Lerna could mention that to the user). In the console, as I recall, there was just an info about crashing processes.\nI know that the npm log indicates that some JSON was missing/invalid, but I've seen the same error many times in the past. Usually, a second lerna bootstrap run would help with that. So, my assumption now, when I discovered that lerna bootstrap --concurrency=1 helps even more consistently is that:\n\none Lerna process starts installing package X,\na second process tries to install the same package at the same time,\nthere's some mutex failure and the second process thinks that the package is already available in npm's cache (/Users/me/.npm) but it isn't or is temporarily invalid at that moment,\nthe second process crashes while trying to read this file.\n\nAnd why does it work when running lerna bootstrap for the second time (even concurrently)? Because the cache is already hot and all JSONs are usually already unpacked there.\nAnyhow reasonable?. I wonder if npm 5 will solve this issue:\n\nA new, standardised lockfile feature meant for cross-package-manager compatibility (package-lock.json), and a new format and semantics for shrinkwrap. (#16441)\n\nAnd there's the whole cache rewrite too. . There's an even bigger problem with private packages:\n\nLerna tries to release version null which even works for the first time, but fails for the second :D.. I tried to use Lerna with not-yet published packages and it didn't work. I get the same error with and without \"private\": true.\nThis is my package:\njson\n{\n  \"name\": \"@ckeditor/ckeditor5-foo\",\n  \"private\": true,\n  \"version\": \"0.0.1\"\n}\nAnd this is some other package requiring it:\njson\n{\n  \"name\": \"ckeditor5\",\n  \"version\": \"1.0.0-alpha.2\",\n  \"dependencies\": {\n    ...\n    \"@ckeditor/ckeditor5-foo\": \"*\",\n  }\n}\nWhen I try to use lerna bootstrap I get (I've got lerna@v2.4.0):\nlerna info Installing external dependencies\nlerna info hoist Installing hoisted dependencies into root\nlerna ERR! execute callback with error\nlerna ERR! Error: Command failed: npm install\nlerna ERR! npm ERR! code E404\nlerna ERR! npm ERR! 404 Not found : @ckeditor/ckeditor5-foo\nlerna ERR! npm ERR! 404\nlerna ERR! npm ERR! 404  '@ckeditor/ckeditor5-foo' is not in the npm registry.\nlerna ERR! npm ERR! 404 You should bug the author to publish it (or use the name yourself!)\nlerna ERR! npm ERR! 404\nlerna ERR! npm ERR! 404 Note that you can also install from a\nlerna ERR! npm ERR! 404 tarball, folder, http url, or git url.\nlerna ERR!\nlerna ERR! npm ERR! A complete log of this run can be found in:\nlerna ERR! npm ERR!     /Users/p/.npm/_logs/2017-12-14T12_47_26_000Z-debug.log\nlerna ERR!\nlerna ERR!     at Promise.all.then.arr (/usr/local/lib/node_modules/lerna/node_modules/execa/index.js:236:11)\n(node:78434) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 4): Error: Command failed: npm install\nnpm ERR! code E404\nnpm ERR! 404 Not found : @ckeditor/ckeditor5-foo\nnpm ERR! 404\nnpm ERR! 404  '@ckeditor/ckeditor5-foo' is not in the npm registry.\nnpm ERR! 404 You should bug the author to publish it (or use the name yourself!)\nnpm ERR! 404\nnpm ERR! 404 Note that you can also install from a\nnpm ERR! 404 tarball, folder, http url, or git url.\nI need to be able to work with packages which are not yet published for instance when we're starting their development. Right now I need to publish their 0.0.1 version right after creating the package to satisfy Lerna. This is problematic because such a package isn't functional yet and might actually never be (if this is some research, fo instance).. I've checked that v2.5.1 gives the same result.. > Also, a private local package should never be in dependencies of a published package, as that will break when anyone tries to install the published package.\nOf course. It's just for the initial dev stage. And both packages are not published at this point. Still, I want to be able to cross-link them correctly.\n\nThe dependency range in the consumer cannot be *, it must match the private package.\n\nWhy can't it work? Is there some technical limitations? I actually reported #1163 for that because initially, when we're bootstraping some package, I don't want to use more specific version ranges because they may diverge with the rest of the code base while this package is on review, or under development. It's actually what happened today with this specific package \u2013 it unnecessarily depended on outdated versions of our other packages.. Hi again!\nI've stumbled upon this again. I tried to bootstrap a project which has this in the root package.json:\njson\n  \"dependencies\": {\n    \"@ckeditor/ckeditor5-font\": \"0.0.1\",\n  }\nAnd @ckeditor/ckeditor5-font's package.json looks like this:\njson\n{\n  \"name\": \"@ckeditor/ckeditor5-font\",\n  \"version\": \"0.0.1\",\n  \"private\": true\n}\nlerna bootstrap logs this, unfortunately:\n```\nlerna info hoist Installing hoisted dependencies into root\nlerna ERR! execute callback with error\nlerna ERR! Error: Command failed: npm install\nlerna ERR! npm ERR! code E404\nlerna ERR! npm ERR! 404 Not found : @ckeditor/ckeditor5-font\nlerna ERR! npm ERR! 404\nlerna ERR! npm ERR! 404  '@ckeditor/ckeditor5-font' is not in the npm registry.\nlerna ERR! npm ERR! 404 You should bug the author to publish it (or use the name yourself!)\nlerna ERR! npm ERR! 404\nlerna ERR! npm ERR! 404 Note that you can also install from a\nlerna ERR! npm ERR! 404 tarball, folder, http url, or git url.\nlerna ERR!\nlerna ERR! npm ERR! A complete log of this run can be found in:\nlerna ERR! npm ERR!     /Users/p/.npm/_logs/2018-02-14T16_30_11_944Z-debug.log\nlerna ERR!\nlerna ERR!     at Promise.all.then.arr (/usr/local/lib/node_modules/lerna/node_modules/execa/index.js:236:11)\n{ Error: Command failed: npm install\nnpm ERR! code E404\nnpm ERR! 404 Not found : @ckeditor/ckeditor5-font\nnpm ERR! 404\nnpm ERR! 404  '@ckeditor/ckeditor5-font' is not in the npm registry.\nnpm ERR! 404 You should bug the author to publish it (or use the name yourself!)\nnpm ERR! 404\nnpm ERR! 404 Note that you can also install from a\nnpm ERR! 404 tarball, folder, http url, or git url.\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /Users/p/.npm/_logs/2018-02-14T16_30_11_944Z-debug.log\nat Promise.all.then.arr (/usr/local/lib/node_modules/lerna/node_modules/execa/index.js:236:11)\nat process._tickCallback (internal/process/next_tick.js:103:7)\n\ncode: 1,\n  killed: false,\n  stdout: '',\n  stderr: 'npm ERR! code E404\\nnpm ERR! 404 Not found : @ckeditor/ckeditor5-font\\nnpm ERR! 404 \\nnpm ERR! 404  \\'@ckeditor/ckeditor5-font\\' is not in the npm registry.\\nnpm ERR! 404 You should bug the author to publish it (or use the name yourself!)\\nnpm ERR! 404 \\nnpm ERR! 404 Note that you can also install from a\\nnpm ERR! 404 tarball, folder, http url, or git url.\\n\\nnpm ERR! A complete log of this run can be found in:\\nnpm ERR!     /Users/p/.npm/_logs/2018-02-14T16_30_11_944Z-debug.log\\n',\n  failed: true,\n  signal: null,\n  cmd: 'npm install',\n  timedOut: false,\n  exitCode: 1 }\n```\nHow can I force Lerna to not try to look for this package on npm? For the development purposes only I need to somehow work with it locally, before publishing it on npm.. > Why does your root package have local dependencies? Is it also published? (I don\u2019t recommend publishing your root package, btw)\nThis one isn't but some consumers may also be published. But, as I wrote, I need this for development purposes. It's a temporary state required when I'm bootstrapping such a package. And I don't publish a new version of the consumer (with added dependency) before publishing the dependency first.\n\nIf it isn\u2019t, just use a local file specifier (file:packages/my-package-directory) and npm5 will do the right thing.\n\nNpm did, but Lerna didn't. It didn't symlink this package.. Our community stumbles upon these not-yet-completed packages and people are confused about them (see https://stackoverflow.com/questions/48943719/how-to-install-plugins-in-ckeditor-5). Is there something we could do? Would you be interested in accepting a PR if we changed this in Lerna? If yes, how should we approach this?. I'm confused now too. \n\nThere\u2019s literally nothing about how lerna works that \u201crequires\u201d publishing a module just to develop it.\n\nWhat I'm trying to show you from the beginning is that Lerna crashes when I try to use a not-yet-published package as a dependency of another package (for development purposes). Calling lerna bootstrap makes Lerna crash on this.\nSo far I thought that you don't agree that this is even a case. If you do, I can provide a repo or something where you could reproduce it.\n\nAlso, why is that SO user doing a deep import of non-transpiled code? That seems very bad in and of itself.\n\nI guess this is out of the scope of this issue ;). Just to make sure, @jodator, what are the steps to reproduce this? And which of these packages are published? Also, does using private: true help?. I've just realised that this problem doesn't exist when there's a dependency between e.g. packages/foo and packages/bar (not published). That works fine (at least with lerna@2.11.0). What didn't work was when . package has depends on packages/bar (not published). I didn't check with lerna@3 yet, though.. Hm..., that's a pity, cause it's quite useful when the root has some dependencies too. This allows us to install or clean all at once (with a single lerna bootstrap|clean call) and of course, allows us to use those packages which we're developing as dependencies of the root project. For instance, we keep the documentation in the root project. The demos in the documentation import code from packages that we're developing in packages/ using normal module names. That's a really clean setup and worked well over the last two years (except this issue discussed here, but it isn't a blocker).\nIs the \"root leaf\" something that will definitely not be fully supported due to some problems that it brings? Or is it something doable? . Thanks, we'll check that. . I checked out of curiosity whether running lerna clean && lerna bootstrap helps (cause it sometimes does), but it didn't help in this case.. If you want to see it live then this should do:\ngit clone git@github.com:ckeditor/ckeditor5.git\ncd ckeditor5\nnpm i mgit2 # or install it globally if the below won't work\n./node_modules/bin/mgit bootstrap\ncd packages/ckeditor5-alignment\ngit co 36cf404 # I fixed package.json after this commit\ncd ../..\nlerna bootstrap. ",
    "probablyup": "Nvm, realized after the fact that because I had lerna bootstrap set as a postinstall script on a dependency that is also a lerna monorepo, the dependency was trying to bootstrap and failing which borked the thing I was actually working on.. Here's the structure:\nconsuming-package/\n    package.json\n    node_modules/\n        lerna-monorepo/\n            package.json\n            lerna.json\n            packages/\nI intentionally want lerna-monorepo to run bootstrap on postinstall, but because of how that utility works, lerna looks all the way to the top for lerna.json instead of where the command itself is actually invoked.\n. OK... I guess. . ",
    "Andarist": "@evocateur @wzrdzl any chance of this being pushed forward? If you need help, I can try also to help with this, just let me know what needs to be done :). @evocateur this should be fairly easy, as both workflows (bootstrapping and publishing) are already in place and one would only need to add running additional scripts during both.\nShould I just go for it and prepare a PR?. This PR can be closed, other PR got merged in - https://github.com/lerna/lerna/pull/979#event-1226118295. Thanks for the answer!\n\nAnd, generally, where you place your testing and linting tools, which you run from the root instead of each package (slowly and repetitiously).\n\nYeah, scripts were obvious - I was more buffled by dependencies.\n\nThe root package.json, at the very least, is how you install lerna locally during a CI build. \n\nhm, aint sure then how to configure this correctly - i mean if i just run yarn or npm install as my dependency task, it will install my root deps, including lerna, so i will basically need to run lerna bootstrap as some sort of the postinstall task\n\nThe root can also hold all the \"hoisted\" packages, which speeds up bootstrapping when using the --hoist flag.\n\ncool, dependency entries needs to be 'hoisted' manually, right?\n. so basically it means that on CI there should be 2 dependency tasks, for CicleCI it could look like this\nyml\ndependencies:\n  override:\n    - yarn\n  post:\n    - npm run bootstrap\nGonna try to find some time to extract the interesting parts of our conversation to send a docs PR later \ud83d\ude03 . Obviously I still need to add tests for the changes and probably adjust some docs, but would like to have this completed code-wise before I get to the docs and as for the tests I need to dig up more how do u write those for the project (dont worry though, they are comming! \ud83d\ude04 )\n@evocateur You have mentioned here using npm install --ignore-scripts during those lifecycles, but truth to be told I wasnt sure how that works and if I should add this now or was it already covered in the codebase.\n. @evocateur ive updated my PR, please take a look. As far as I know its merge-ready. Last CI checks were passing (latest checks got triggered by a new commit containing only docs changes - so they should pass soon too ;) ). @evocateur \nNo problem. I have needed this :P so thanks for merging. Any ETA for the release?. Great! :) thank you. @evocateur any chance to have this landed in v2 line?. \ud83e\udd26\u200d\u2642\ufe0f I was not aware (or forget about it) that --ignore-scripts is also a flag for npm. I thought it's bootstrap specific ( https://github.com/lerna/lerna/tree/master/commands/bootstrap#--ignore-scripts ) and thought that it might get passed to npm by accident.\n. dont think bootstrap needs any more work besides the tests, please correct me if im wrong. this on the other hand could be parallelized to speed up the process, Im not sure what to use here though, I guess it would need to be a combo of PackageUtilities.runParallelBatches and async.series. I see the desired flow as:\n- parallel execution of async.series per each package\n- on completion one more parallel batch of publish tasks\nI think its the safest one. huh, havent realized that, seemed like it was executing npm commands ;)\nIt seems that I should remove those lines and just let npm handle its lifecycle events on its own, right? . ",
    "pselden": "Does prepublishOnly get run? I don't see it anywhere in the code.. ",
    "aichholzer": "@evocateur -Using the latest version of lerna and prepublishOnly is never run, not in my case at least:\njs\n\"scripts\": {\n  \"prepublishOnly\": \"npm test\",\n  \"pretest\": \"lerna bootstrap && eslint --quiet .\",\n  \"test\": \"nyc --reporter=lcov _mocha -R spec --timeout 500 test/index.js\",\n  \"posttest\": \"nyc report --reporter=text\",\n  \"publish\": \"lerna publish\"\n  }\nnpm run publish and it goes straight into asking me which version I'd like to assign to the new release.\nIf I use prepublish instead of prepublishOnly it works, but this is causing issues with my CI build, since it's being run as well. Running npm publish . directly works as well with prepublishOnly.\nAny ideas?. Thank you @evocateur -Worked!\nHowever, I thought lerna publish always runs npm publish under the hood, so prepublishOnly should also be run, no? -Which part did I miss..?. ",
    "kschzt": "FYI this seems to work correctly with npm. . ",
    "kylecordes": "I've found the answer to the initial question to be 100% yes - I'm using it that way in the following.\nhttps://github.com/OasisDigital/many-to-many-angular\nI use neither file: nor linklocal.  I use yarn, although I get the impression that yarn support is still somewhat early.. @ravicious and others - yes, it is currently irritating to use in this way. The linklocal and mutex things help, though sometimes I just edit a package.json then re-bootstrap.\nHere is the heart of the matter: regardless of whether working with non-published packages, typically when using Lerna one does not want yarn/npm to ignore the local deps and go look at the web instead - because when developing, the local packages might be arbitrarily different from the published ones.\nUltimately it may require a deeper integration between Lerna and Yarn or NPM to make all of this \"just work\". As things proceed, I expect that improvements for working with published packages will end up also improving things for unpublished packages.\n. What really happens, behind the scenes? Are all of the dependencies installed for every package, then later deleted in this prune process? That would suggest --hoist doesn't deliver the install time improvement hoped for?\n. @evocateur Thank you, yes, that code is nicely commented and structured!\nI'm trying to understand the following scenario:\n\nFreshly cleaned - all node_modules at all levels deleted.\nUsing NPM\nbootstrap --hoist\nComment says \"// Remove any hoisted dependencies that may have previously been installed in package directories\"\nDuring the installation there is a long time with \"Prune hoisted\" displayed.\n\nThis seems contradictory - as a fresh install, there should be no previously installed packages to prune. This is what makes me suspect that during bootstrap --hoist they are being installed then pruned.\nIf you'd like to see it this firsthand, here is my example project, \"hoist\" branch:\nhttps://github.com/OasisDigital/many-to-many-angular/tree/hoist\n./build.sh\n. Up above a few messages it is mentioned that \"npm link\" has the same behavior, symlinking without regard to the .npmignore. It seems to me that the typical user of npm link sort of expects various brokenness and workarounds to be needed. Developing two packages concurrently is seen as a special case. But with Lerna in the mix, developing N packages concurrently is a standard case that eventually \"everyone\" will do all the time.\nI see three main categories of solution:\n\nLerna could do much more fine-grained symlinking, respecting the .npmignore, in theory this should allow other tools to work on modified.\nLerna could declare that this is just how it works, it works like npm link - therefore other tools that consume packages (Babel in the react native case, ngc in the Angular case) would need to be enhanced with a way of configuring them to either respect the .npmignore and pretend they don't see files they aren't supposed to see, or to have a more project specific ad hoc way of tolerating extraneous files that appear in a symlinked package.\n\n. @evocateur To confirm I understand this right:\n\nThe behavior I observed, where binaries get linked downward, but where the remaining contents of node_modules exist only at the \"root\" level, is correct.\nThe node module resolution algorithm (I can probably find a documentation link) requires compatible tools looking for package A, to look in ./node_modules/A, ../node_modules/A, ../../node_modules/A, ../../../node_modules/A, etc.\nSome tooling might not do this - it might only look in the \"first\" node_modules it finds, then fail with an error if the package is missing.\nSuch tooling is broken - it incorrectly implements node module resolution, and I should look there for a fix.\n\nIs this correct?\nI'm concerned this might be an obstacle to adoption - I suspect quite a lot of tooling in the node ecosystem implements looking and only a single node_modules directory unfortunately.\n. @evocateur I will work on:\n\nPR to doc this stuff\nIssue to ask for extra symlinks, to work around tools out there that don't follow the NPM module resolution correctly.  (Unfortunate example: Angular CLI :-(   https://github.com/angular/angular-cli/issues/3864 )\n\n. @evocateur PR ready for a look, #751\n. ",
    "jennasalau": "Okay we are experiencing this issue also and ALL our packages are at the same version number. So not sure how you managed to avoid this issue.. Hmm you would also have to manually remove it from the package-lock.json file and the bloody reference gets entwined everywhere. Its actually a nightmare removing dependencies from a lerna managed package. I also think you should make it more clear in your docs that we are not meant to be using npm in managed packages. I had no idea.\nAnyway, as a work around for anyone else experiencing this issue:\nYou need to temporarily change the sibling references in package.json to use the local path feature. So given the dependency example I gave above:\nChange module-a package.json (The one you want to uninstall a dependency on) \nFrom:\n{\n    \"name\": \"module-a\",\n    \"version\": \"1.0.0\",\n    \"dependencies\": {\n        \"dependency-a\": \"^1.0.0\",\n        \"module-b\": \"^1.0.0\",\n    }\n}\nTo:\n{\n    \"name\": \"module-a\",\n    \"version\": \"1.0.0\",\n    \"dependencies\": {\n        \"dependency-a\": \"^1.0.0\",\n        \"module-b\": \"file:../module-b\",\n    }\n}\nThen run the local npm uninstall. After which you must change it back otherwise lerna will hang.. ",
    "yasserkaddour": "@dortzur I hope you don't mind me doing it, Thanks. Thanks for merging. I am not very sure where I am supposed to add this.. :sweat_smile: . gigabo said in #426 test would be nice, so I did just that :smile: . ",
    "MatthD": "I read that but it appears that it does not push anything to my github monorepo when I tried it.\nIt clearly increment packages versions & create a commit of it but it does not push anything to my github repository (I added it in package.json too ... ) \nI tried on this repo https://github.com/MatthD/sisyphe \nCommand use & result (Id does not say anythign after \"Yes\"): \n\n. Ok, I understand what append,\nhttps://github.com/lerna/lerna/blob/aeb775d1fec9988f9165cbfad82db2d4fb796c7b/src/commands/PublishCommand.js#L130\ni was using --skip-npm (because I did not wanted to publish on npm & with this option it does not git push in fact). it seems it works if the the optionalDpendencies is written on the main package.json (maybe because its a real \"npm install\") but not in the workers ..\n. it seems it works if the the optionalDpendencies is written on the main package.json (maybe because its a real \"npm install\") but not in the workers ..\n. Ok , when I use lerna with the '--hoist' option, it throw an error on an optional dependencies ... :ss . Is there a workarround for this ? regards. Ok it's the --hoist flag to use!. ",
    "ForbesLindesay": "Ah, there's lots of info in https://github.com/lerna/lerna that's not on the website.. Is there a way to skip versioning some packages? I was expecting --ignore to do this.. The package in question is the output of a yeoman generator. It is there to test both the output of the yeoman generator, and the packages in the rest of the project. By having it within the monorepo, it picks up the un-published development versions of all the packages that need testing. The problem is that each time the generator runs, it resets the version number to 0.0.0 and the next lerna publish explodes (creates some tags, adds a commit, attempts some publishes, then gives up and leaves everything completely broken). Keeping track of which version that package (that will never be published) should have is taking a huge amount of time.. > If you were able to ignore versioning (which implies \"and publishing\") a given package that may have changes, how do you propose to recognize those changes later, when you do want to publish it?\n\nIf it has never had any version bumps or publishes, then it will be as if it is a new package.\nIf it has had some publish/version bump in the past, then it was ignored for a while, it should get compared to when it was last published/version bumped when you remove the ignore flag.. Yes, that would be a big improvement. It would also be good to add something to the readme along with the bits on setting up yarn workspaces.. \n",
    "afc163": "I get that now, Thx!\nMaybe I should use --scope package-xx in my situation, and just found that is not working either.\nI will propose another PR for this, after fixing test case here: https://github.com/lerna/lerna/pull/579. I run this test case, and get this.flags which did not contain ignore field.\nUpdatedCommand\n    Circular Dependencies\n{ lerna: '__TEST_VERSION__',\n  version: '1.0.0',\n  publishConfig: { ignore: [ 'ignored-file' ] } }\n{ lerna: '__TEST_VERSION__',\n  version: '1.0.0',\n  publishConfig: { ignore: [ 'ignored-file' ] } }. ",
    "blahah": "I've faced the same issue several times. The problems are that after a failed npm publish:\n\nlerna doesn't handle the errors properly, they all just get logged in a very verbose way and lerna exits\nyou're left with a publish commit and a set of tags that haven't been pushed to git, but which prevent lerna from progressing with a publish\n\nIdeally, lerna would delete the publish commit and all the tags, allowing the publish step to be run again. OR it would have an option to continue from where it failed before.\nHowever, in the meantime you can use this:\n```bash\ndelete the latest commit\ngit reset --hard HEAD~1\ndelete the latest batch of tags\ngit tag -d $(git log --date-order --tags --simplify-by-decoration --pretty=format:'%d' | head -1 | tr -d '()' | sed 's/,* tag://g')\n``. OK, I traced the source of the problem. The specific waynpm-log[tries to stringify the error stack before logging](https://github.com/npm/npmlog/blob/master/log.js#L182-L185), combined with a change to the way Errors are made in node v7 +error-ex` (which is used by read-pkg for package.json errors), causes the Error stack to sometimes to be immutable leading to the issue.\nI initially thought it was this issue fixed in error-ex, but that fixed version is already included in lerna v1.0.0-rc4.\nIssue reported to npm-log with PR.\n. ",
    "tomccabe": "Also having this issue. Most annoying is that my package.json  @files are blown away into package.json.lerna_backup files and left as such on an error, so I'll have to go through every package and copy the backup into a package.json and delete the backup.\nThere really needs to be more graceful handling of errors and rolling back of changes as this is really (one of) the major feature of Lerna.. lerna exec -- npm pack && rm *.tgz?. I am currently running into this issue. One of my packages is completely blown away on bootstrap. This had not been an issue until today. The root is not a published package, just the ./packages folder. \nlerna.json:\njs\n{\n  \"lerna\": \"2.0.0-rc.4\",\n  \"packages\": [\n    \"packages/*\"\n  ],\n  \"version\": \"independent\"\n}\nWhatever the issue with the script, deleting packages is...not ideal behavior.. It is not, unfortunately.\nOn Wed, Aug 2, 2017 at 7:36 PM Daniel Stockman notifications@github.com\nwrote:\n\n@tomccabe https://github.com/tomccabe I can't reproduce it with just\nthat information. Is this a public repo, perhaps?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/lerna/lerna/issues/951#issuecomment-319827460, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ACEIT9IDe-t8bBsV8PMUQRzXmcYHaBFIks5sUQfvgaJpZM4OquLW\n.\n. Hi @evocateur -- debugged the issue tonight and I hadn't updated semvers in packages that were consuming the package getting deleted on bootstrap. We stopped using the lerna publish command early on (just too aggressive), so those weren't updated automatically. I'm not sure that explains why the package source code was being removed, but maybe @danielo515's issue is cause by the same.. \n",
    "kevinbarabash": "What's a good way to recover if lerna has pushed tags already to GitHub?. I'm having the same issue.  lerna diff appears to be accurate.  Could use it to determine which packages need updating?\n. If I have some packages that are all using ^1.0.0 of some dependency and then that dependency gets bumped to 1.1.0 I would expect the packages that depend on it not require publishing unless one of those packages actually uses the new feature added in 1.1.0 in which case I would need to change that package to use that new feature.  I'd also update its deps to be ^1.1.0 since it now requires that new feature.. Is this not a duplicate of https://github.com/lerna/lerna/issues/1357?. ",
    "pahund": "@kevinbarabash the solution suggested by @blahah works great for me:\ngit reset --hard HEAD~1 && git tag -d $(git log --date-order --tags --simplify-by-decoration --pretty=format:'%d' | head -1 | tr -d '()' | sed 's/,* tag://g'). \ud83d\udc4d\ud83c\udffb Thanks for clearing this up\n\nDo I have to use both preid and npm-tag to have a beta release to the npm repository? If I use only preid, I get the correct version 1.0.0-beta.0, but it's not tagged as beta version in the npm registry; would npx lerna publish premajor --preid beta --npm-tag beta be the correct command?. ",
    "chitchu": "Hey I got  this. PR incoming.. ",
    "sgwilym": "Was bitten by this for a while too. If you're using webpack to build your bundle, the resolution is to alias the packages you don't want more than one copy of.  In your webpack config:\njs\nresolve: {\n  alias: {\n    'react': path.resolve('./node_modules/react'),\n    'react-dom': path.resolve('./node_modules/react-dom'),\n    'react-relay': path.resolve('./node_modules/react-relay'),\n  },\n},. Is this missing anything that you would accept contributions for? I'd love to help get this merged.. I'm having this problem all of a sudden with Lerna 2.8.0, and also when force-publish is not being used. This problem coinciding with NPMs big website update seems a bit suspect, and I wonder if it's not some kind of change on NPM's part which is making packages not publish even when Lerna reports it as successfully done.. I hate to say it, but trying again worked, making me think this is definitely a hiccup on NPM's side.. ",
    "danilosterrapid7": "Thanks guys! @gigabo , @sgwilym \nJust to let you guys know. We are getting from root... \nOur prepublish script triggers build;\nOur prebuild delete all the nested react instances from the sub node_modules folder and, then,\nat the webpack config we set the modulesDirectories to point to the current project node_modules folder and the parent node_modules folder;\nAnyway, I will check out your alternatives! Thanks again!. @evocateur I will try it.... ",
    "veeramarni": "We have encountered this issue with webpack when one of the peerDependency is also a package under packages folder. I don't think --hoist work in this case as we don't find the working package in main node_modules.  \nin the package.json file of @pkg/jsonschemas, @pkg/config\n\"devDependencies\": {\n  .....\n     \"@pkg/core\": \"*\"\n   }\n    \"peerDependencies\": {\n    \"@pkg/core\": \"*\"\n  },\nIn our webpack configuration, we set libraryTarget to umd for @pkg/jsonschemas, @pkg/config\n.....\n    target: 'node',\n    output: {\n        filename: libPath(\"[name].js\"),\n        library: \"@pkg/jsonschemas\",\n        libraryTarget: \"umd\"\n    },\n....\n    externals: [nodeExternals(), {\n        '@pkg/core': {\n            commonjs: \"@pkg/core\",\n            commonjs2: \"@pkg/core\",\n            amd: \"@pkg/core\",\n            root: \"@pkg/core\"\n        }\n    }]\nIn @pkg/core we have this class which suppose to work as singleton\nexport namespace MySingleton {\n  interface IMySingleton {\n      doSomething(): void;\n  }\n  class MySingleton implements IMySingleton {\n      private usePrivate() { }\n      doSomething() {\n          this.usePrivate();\n      }\n  }\n  export var Instance: IMySingleton = new MySingleton();\n}\nIn Typescript tsconfig, we set module to commonjs to avoid module_not_found issue.\n\"compilerOptions\": {\n    \"module\": \"commonjs\",\n    \"rootDir\": \"./src\",\n    \"outDir\": \"./lib\",\n    \"baseUrl\": \".\",\n    \"paths\": {\n       \"@pkg/core\": [\"../core\"]\n    }\nWhen we run a test in @pkg/config which depends on @pkg/jsonschemas and @pkg/core, there are two instances of singleton class from two location of @pkg/config which causing errors in our tests. . it is been a while, wondering if anyone has an workaround for this issue other than deleted nested node_modules. I was able to find a workaround for it. I use --hoist and use webpack for build which resolve modules to node_modules and for testing, I use jest which I need to place moduleResolver to node_modules. That way they don't look for nested node_modules for module resolution.. @evocateur thanks for the update, I will give it a try. Well, the reason having a released packages vs. symbolic link is the symbolic link will break the examples if the current packages are under active development. But that is not a big issue to us now but if it is supported in future would be great. . one problem, I noticed after running npm link on the specific package it loads all the dependencies under packages node_modules directory. I use --hoist to avoid downloading dependencies under the individual package. Is there a way we can run link without all dependencies under node_modules. . @evocateur \nMy question was, why doesn't lerna update the versions of all the packages even if see some discrepancies like * to the latest updated version? I was expecting lerna when releases it releases all dependencies with the latest version instead it leaves the packages with * as it is.. \nWell, if I change * to ^0.0.1,  lerna still doesn't update the dependencies. I will try a quick test with Lerna 3 and see if it helps.\n{\n  \"name\": \"my-application/sub-tool\",\n  \"version\": \"0.0.15-63\",\n  \"dependencies\": {\n    \"@my-namespace/my-tool\": \"^1.0.0\"\n  }\n}. @evocateur thanks for your help.\nChanging to relative path with lerna v3 was working as expected. I think this is what I was looking for, so we don't need to carry any versions of our base project.\n{\n  \"name\": \"my-application/sub-tool\",\n  \"version\": \"0.0.15-63\",\n  \"dependencies\": {\n    \"@my-namespace/my-tool\": \"file:../my-tool\"\n  }\n}. If I'm not wrong, the Lerna team was suggesting to not to use lerna bootstrap instead use lerna link convert for the first time when the repo setup and perform npm install followed by any compilation of packages. \nReference: https://github.com/lerna/lerna/issues/1526. As mentioned, I would like to run watch only for the packages in one or two directories where I will be changing the code. \nFor example: instead of running webpack watch in all the packages.\nlerna exec --stream --parallel -- webpack --watch  running for all 99 packages.\nI would like it to run on fewer packages based on the directory.\nlerna exec --scope-dir [packages/*, modules/*] --stream --parallel -- webpack --watch so it would be limited to 10 packages.\nLet me know if it makes sense.\n. I mean, not just specific to webpack, within lerna to filter packages directories. But if you have a suggestion for webpack as a temporary workaround would be great.\nwatch: lerna exec --no-sort --ignore *server --stream --parallel -- webpack --watch\n. I mean my issue was, the lerna doing differently when we run lerna command externally.\nFor example (works fine):\npackage.json\n\"scripts\": {\n    \"publish\": \"lerna version --conventional-commits && lerna publish from-package --conventional-commits\",\n}\nWhich runs publish script in all the packages as expected and we don't get any errors.\nBut when we ran through the external command like (here lerna was from global  npm package)\nlerna version --conventional-commits && lerna publish from-package --conventional-commits\nIt fails with the following error.\n```\n\nrimraf lib\n\nsh: rimraf: command not found\n```\nI understand, in leaf nodes, we need dev dependency on rimraf but I was expecting it would run from the root in both cases. Maybe I'm missing something here as I'm curious to find why it runs through the scripts without error otherwise not.\n. ",
    "rumax": "Only --hoist and --nohoist, but it doesn't help too much. ",
    "hobochild": "@ianwremmel, I think I've got a similar setup, \nI've got it running without publishing any of my packages by setting all my pre-released packages to 0.0.0 and then ensuring the dependent packages are referencing that version. \nI then set the npm client to yarn because it doesn't hit the registry when linking. . ",
    "sathishkumarsoundharajan": "@sbryfcz Thanks for the info. I am using clearcase for vcs and i am using sinopia as private npm server.\n. Thanks @doug-wade for your detailed answer.  I think we can add these questions to FAQ section on the Website. It would really help people in future. . @spudly i tried it works. The issue is in the website npm install --global lerna@^2.0.0-beta, people tend to copy paste it :) . Great @spudly . @doug-wade Then it should be sinopia issue. Right ? May I know about the warning that sinopia throws package **sk-util-http** does not have **\"latest\"** tag ?. ",
    "diogofcunha": "@hzoo can we get this reviewed and if possible merged and published?\nIt is a blocker for us and I guess for many others.\nCheers.. I am the one that needs to thank you for this amazing tool, saved us a lot of work..\nIf you want you can check our implementation in here https://github.com/adazzle/react-data-grid.. @olegskl that one looks good to me, is there a PR open with that change?. ",
    "walleXD": "@samb90 Did you figure out how to fix this?. ",
    "roblg": "\nWant to take it on?\n\nNo promises, but I might. :)\nIf anybody else wants it though, have at it.... @gpittarelli sorry, I should have posted here. I've actually already got it done locally. (Ended up wanting it for something at work sooner than I figured I would).\nWhile I was looking at it though, it seems like there are a number of other commands that might benefit from respecting --include-filtered-dependencies (diff/exec/ls/run). Might even make sense to factor that out into Command.js or something so it's generally available (that's not my call though). I'm definitely not planning on looking at diff/exec/ls/run, if you're interested in those.. @doug-wade updated to use npm bin. I waffled on exec vs. execSync for that call, and ended up settling on exec. The perf is basically the same, and I think they're both roughly equally readable (surprisingly), but waiting for a synchronous exec in a function that's called in loops seems... wrong somehow.. Nice! \ud83d\udc4d . \ud83e\udd26\u200d\u2642\ufe0f I suspect it would. Good call.. Added path.join down around line 128. I also realized I oopsidentally checked in a describe.only, so I removed that too :grin:. Yep, I mostly just blindly copied the pattern. I think if this were to be extended other commands in the future, it could make sense to pull the check up into Command.js, and modify the filteredPackages there, maybe? I haven't looked closely at that though.. Can do. Something like this?\nconst npmBin = ChildProcessUtilities.execSync(\"npm bin\", {cwd: __dirname});\nChildProcessUtilities.spawn(join(npmBin, \"rimraf\"), [filePath], {}, callback). I had that thought too, and then decided that this was probably roughly equivalent to a shell script that did something like $(npm bin)/rimraf /some/dir/node_modules, so I didn't bother fixing it. It seems like the cost of running rimraf (node-based filesystem walking and unlinking) would dwarf the npm bin exec for most projects anyway?\nIf we want to cache it, I guess we'd do that in a module-level variable in FileSystemUtilities? Wouldn't be hard to add. . Ugh. I swear I checked for this this time :(. ",
    "gpittarelli": "I'll take a stab at it tonight. ",
    "palmerabollo": "Thanks, I think I found the issue. I had the master branch protected against force-pushes in github. Sorry.. @theinterned That's what I did. I didn't find a better solution and I'm not using lerna in my current project so I don't know if there is a better workaround currently.. @dtothefp Same here. Any luck?. ",
    "theinterned": "I am curious @palmerabollo - what did you do as a work around? I have GitHub branch protection set-up on master and my current release flow is to \n\nGo into the the master branch protection settings on GitHub.com and uncheck the \"Include administrators\" checkbox. \nrun learn publish on the master branch. \nRe-uncheck the \"Include administrators\" checkbox. \n\nThis works and keeps the master branch safe but it is not very graceful. For example, I don't really want to include these instructions in the project documentation as they are way too hacky. I wonder if there is another workflow that people are using?. ",
    "warash": "Hi Guys,\nthis is pretty urgent for my project. I would be super gladful if this fix will be merged to new release.\nthanks. ",
    "orkisz": "This is a blocker for me as well. Including a fix in next release will be much appreciated. Thanks!. Great news. Thanks!. Great news. Thanks!. ",
    "simondel": "Awesome, thanks!. Awesome, thanks!. I just committed the untracked folder and pushed it to see what happened. Now stryker-mocha-runner exists twice in Github and still once on disk:\n\nAnd if I click the packages\\stryker-mocha-runner folder in the root of the repo:\n\n. ",
    "foodforarabbit": "You're right, changing gitlab.company.com to just gitlab.com makes the symlinking work. Thanks, I'll look into my own work arounds for this issue!. ",
    "rtm": "This occurred to me when the version field for the dependency was of the form v1.5.0-alpha1 or v1.5.0-alpha.1. When I changed the version to 1.5.0 all was well.. @evocateur FYI this happened when the dependency was given as \"*\". In other words, \"*\" does not seem to match v1.5.0-alpha1.. @amir-arad Unfortunately I just completed a laborious migration from yarn back to npm/lerna, because yarn was slow and unstable at least on my WSL machine. With regard to hoisting, as I mentioned\n\nHowever, in the case of Angular, there are apparently places where it doesn't fully respect node resolution semantics, and insists that certain packages be present locally.. Sorry about the wall of text. You are never providing enough information,\nexcept when you are providing too much. But there were some pretty pictures\nwhich I thought were relatively clear...\n\nBottom line: some systems don't play nice with linking. Linking does not\nrecreate the same semantics with regard to the handling of sub-dependencies\nas if the module had been brought in externally. My proposal is to provide\nan option where resolution behaves exactly as if the package had been\nbrought in externally.\nI will look at your lerna3 + npm5 + relative file: specifies suggestion.\nBTW It's not Angular doing module resolution tricks. It's TypeScript.\nBob\nOn Thu, Jun 14, 2018 at 6:58 AM Daniel Stockman notifications@github.com\nwrote:\n\ni don't understand angular's persistence with stupid module resolution\ntricks.\nwhat exactly are you trying replace the current linking with? huge wall\nof text doesn't parse very well.\n(lerna3 & npm5+ relative file: specifiers\nhttps://github.com/npm/npm/blob/latest/doc/spec/file-specifiers.md work\ngreat for me.)\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/lerna/lerna/issues/1451#issuecomment-397137937, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AABfR43Nxh87jfdzaU8Kft87D9gh46gYks5t8bwigaJpZM4Ub6TW\n.\n. @evocateur Thanks for following up. No, there was a lerna.json file. FWIW the syntax error was two consecutive commas.. \n",
    "pascal1990": "@evocateur  Please I have this issue \n\nweb3@1.0.0-beta.27 postinstall C:\\node\\wiz\\submodules\\oracles-web3-1.0\nlerna bootstrap\n\nlerna info version 2.8.0\nlerna info Bootstrapping 20 packages\nlerna info lifecycle preinstall\nlerna info Installing external dependencies\nlerna ERR! execute callback with error\nlerna ERR! Error: Command failed: npm install\nlerna ERR! npm ERR! Error while executing:\nlerna ERR! npm ERR! C:\\Program Files\\Git\\mingw64\\bin\\git.EXE ls-remote -h -t git://github.com/frozeman/WebSocket-Node.git\nlerna ERR! npm ERR!\nlerna ERR! npm ERR! fatal: unable to connect to github.com:\nlerna ERR! npm ERR! github.com[0: 192.30.255.112]: errno=No such file or directory\nlerna ERR! npm ERR! github.com[1: 192.30.255.113]: errno=No such file or directory\nlerna ERR! npm ERR!\nlerna ERR! npm ERR!\nlerna ERR! npm ERR! exited with error code: 128\nlerna ERR!\nlerna ERR! npm ERR! A complete log of this run can be found in:\nlerna ERR! npm ERR!     C:\\Users\\c-fossoup\\AppData\\Roaming\\npm-cache_logs\\2018-01-22T13_08_22_019Z-debug.log\nlerna ERR!\nlerna ERR!     at Promise.all.then.arr (C:\\node\\wiz\\submodules\\oracles-web3-1.0\\node_modules\\execa\\index.js:236:11)\nlerna ERR!     at \n{ Error: Command failed: npm install\nnpm ERR! Error while executing:\nnpm ERR! C:\\Program Files\\Git\\mingw64\\bin\\git.EXE ls-remote -h -t git://github.com/frozeman/WebSocket-Node.git\nnpm ERR!\nnpm ERR! fatal: unable to connect to github.com:\nnpm ERR! github.com[0: 192.30.255.112]: errno=No such file or directory\nnpm ERR! github.com[1: 192.30.255.113]: errno=No such file or directory\nnpm ERR!\nnpm ERR!\nnpm ERR! exited with error code: 128\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     C:\\Users\\c-fossoup\\AppData\\Roaming\\npm-cache_logs\\2018-01-22T13_08_22_019Z-debug.log\nat Promise.all.then.arr (C:\\node\\wiz\\submodules\\oracles-web3-1.0\\node_modules\\execa\\index.js:236:11)\nat <anonymous>\nat process._tickCallback (internal/process/next_tick.js:188:7)\n\ncode: 1,\n  killed: false,\n  stdout: '',\n  stderr: 'npm ERR! Error while executing:\\nnpm ERR! C:\\Program Files\\Git\\mingw64\\bin\\git.EXE ls-remote -h -t git://github.com/frozeman/WebSocket-Node.git\\nnpm ERR! \\nnpm ERR! fatal: unable to connect to github.com:\\nnpm ERR! github.com[0: 192.30.255.112]: errno=No such file or directory\\nnpm ERR! github.com[1: 192.30.255.113]: errno=No such file or directory\\nnpm ERR! \\nnpm ERR! \\nnpm ERR! exited with error code: 128\\n\\nnpm ERR! A complete log of this run can be found in:\\nnpm ERR!     C:\\Users\\c-fossoup\\AppData\\Roaming\\npm-cache\\_logs\\2018-01-22T13_08_22_019Z-debug.log\\n',\n  failed: true,\n  signal: null,\n  cmd: 'npm install',\n  timedOut: false,\n  exitCode: 1 }\nnpm ERR! code ELIFECYCLE\nnpm ERR! errno 1\nnpm ERR! web3@1.0.0-beta.27 postinstall: lerna bootstrap\nnpm ERR! Exit status 1\nnpm ERR!\nnpm ERR! Failed at the web3@1.0.0-beta.27 postinstall script.\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     C:\\Users\\c-fossoup\\AppData\\Roaming\\npm-cache_logs\\2018-01-22T13_08_22_175Z-debug.log\nnpm ERR! code ELIFECYCLE\nnpm ERR! errno 1\nnpm ERR! ico_wizard@0.2.0 installWeb3: cd submodules/oracles-web3-1.0 && npm install && cd ../../ && npm install submodules/oracles-web3-1.0/packages/web3\nnpm ERR! Exit status 1\nnpm ERR!\nnpm ERR! Failed at the ico_wizard@0.2.0 installWeb3 script.\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     C:\\Users\\c-fossoup\\AppData\\Roaming\\npm-cache_logs\\2018-01-22T13_08_22_223Z-debug.log\nnpm ERR! code ELIFECYCLE\nnpm ERR! errno 1\nnpm ERR! ico_wizard@0.2.0 startWin: npm run installWeb3 && npm run generateFlatSoliditySafeMathLibContractWin && npm run generateFlatSolidityCrowdsaleNullFinalizeAgentContractWin && npm run generateFlatSolidityCrowdsaleFinalizeAgentContractWin && npm run generateFlatSolidityCrowdsaleContractWin && npm run generateFlatSolidityCrowdsaleTokenContractWin && npm run generateFlatSolidityCrowdsalePricingStrategyContractWin && npm run compileSafeMathLibExtContractWin && npm run compileCrowdsaleNullFinalizeAgentContractWin && npm run compileCrowdsaleFinalizeAgentContractWin && npm run compileCrowdsaleContractWin && npm run compileCrowdsaleTokenContractWin && npm run compileCrowdsalePricingStrategyContractWin && node scripts/start.js\nnpm ERR! Exit status 1\nnpm ERR!\nnpm ERR! Failed at the ico_wizard@0.2.0 startWin script.\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     C:\\Users\\c-fossoup\\AppData\\Roaming\\npm-cache_logs\\2018-01-22T13_08_22_238Z-debug.log\ncould you help me. ",
    "curran": "FWIW I resolved this issue by deleting package-lock.json in the offending package. No idea why that worked.. ",
    "vyorkin": "maybe I've missed smth, but I can't see any lerna create in 2.1.2 (latest version of lerna).\nbtw whats the alternative? lerna import <path>? ah, I see, its in the https://github.com/lerna/lerna/pull/485, but it isn't merged yet. I'm really suffering from the same problem. Almost every when time I got some postinstall error from one of subpackages (or any error at all) during install, my package.json is messed up and its content is replaced with lerna build artifacts. Every time this happens I need to remember to remove the current package.json and rename package.json.lerna_backup to package.json. Otherwhise (if I forget about this and do the npm i again after fixing the error) it will do weird things. I guess its possible to reproduce this by just pressing ctrl+c during install, not sure about this though. I believe this is incorrect behaviour and lerna should clean after itself in case of failure. What do you think?. ",
    "gruberjl": "Perfect thanks. Lerna's simplicity + power is quite impressive. I appreciate all your hard work. Thank you so much for your help. Have a good one.. ",
    "ivanov": "I'm seeing hangs with --hoist flag as well. :. I cannot reproduce this with Lerna v2.0.0-beta.36 or Lerna v2.0.0-beta.37 - Have you tried updating to one of those?\n```\n13:52@lerna-repo(master)$ lerna bootstrap\nLerna v2.0.0-beta.36\nBootstrapping 0 packages\nPreinstalling packages\nSymlinking packages and binaries\nPostinstalling packages\nPrepublishing packages\nSuccessfully bootstrapped 0 packages.\n13:53@lerna-repo(master)$ tree\n.\n\u251c\u2500\u2500 lerna.json\n\u2514\u2500\u2500 package.json\n0 directories, 2 files\n13:53@lerna-repo(master)$ cat lerna.json \n{\n  \"lerna\": \"2.0.0-beta.36\",\n  \"packages\": [\n    \"packages/*\"\n  ],\n  \"version\": \"0.0.0\"\n}\n13:53@lerna-repo(master)$ mkdir packages\n13:53@lerna-repo(master)$ lerna bootstrap\nLerna v2.0.0-beta.36\nBootstrapping 0 packages\nPreinstalling packages\nSymlinking packages and binaries\nPostinstalling packages\nPrepublishing packages\nSuccessfully bootstrapped 0 packages.\n```. ",
    "kmalakoff": "I'm also encountering a hang when had lerna with hoist in postinstall. Running it manually after npm install avoided the hang.. ",
    "abellinii": "I would like to contribute. This is my first contribution so would anyone like to guide me through the process?. ",
    "ef4": "\nIt does look like as a workaround, you can use npm access public after the fact, so I'm labeling this an enhancement.\n\nThis workaround only works if you're on a paid npm account. If you're not, attempting to publish the new private package fails, and leaves your lerna publish in a half-finished state.. ",
    "Bamieh": "this would also solve #1137 . @evocateur True, however with things line AWS microservices, the node_modules folder must be uploaded with the source files to the lambda.\nWe are using lerna as a monorepo manager for our microservices and being unable to npm install production only is an issue.. @doug-wade thanks buddy, you're awesome. Could someone kindly provide any updates on this issue?. @rickmak true, i wrote a custom bash script for the publishing but was faced with this issue (1 otp is not enough sometimes). my solution to this was to use 2fa in auth-only mode only. ",
    "jwb": "I wonder: if the website generation isn't making progress, should we prune out the details and just link to the README, so we aren't providing bad info to users?. Added an integration test that fails on the master branch and passes with the fix.. How should I make the test use a different value on WinDies?. Thanks for all the help @evocateur!. Do you think it would be fruitful to make an integration test that demonstrates this behavior?. Without looking at the code for this, I wonder if the problem results from get-port allocating a random port not properly passing that port to descendants.. It was broken with spawn.... npm view reports on the package in the current directory. . The integration test isn't evaluating the variables before sending the arguments to lerna.. exists => exits.\nShouldn't there be an integration test showing the non-zero exit status results when the update command detects no changes?. ",
    "nfcampos": "Alright, I've opened a PR with the two first changes. #614\nThese 2 changes remove 2 of the 4 times the error is printed.\nAnother possible change would be to change this line https://github.com/lerna/lerna/blob/master/src/logger.js#L44 in src/logger.js to read message += \"\\n\" + error.message;. What's the point of printing what will always be a stack internal to lerna?. @evocateur  done. @evocateur yeah im really not sure, it might be because of a unhappy combination of\n  - jest running test files in parallel\n  - jest re-using workers to do so\n  - lerna tests relying on process.pid for temp path names\nmaking it so on rare cases they somehow conflict with each other and two concurrent tests end up touching the same temp path\n(if this is the case one possible \"solution\" would be to change the function that names temp paths to add a random element to them, eg. String(Math.random())). yes it does seem pretty safe. ",
    "loganfsmyth": "Happy to remove the option usage, I only included it to be consistent with the other PR.. Cool. Let me know if there's anything else I need to do.. @nolazybits The hard part is that because peerDependencies are part of a module's public API, changes to them can sometimes qualify as breaking changes. The only non-breaking peerDependency change would be to expand the range without removing anything that would match an existing version. Plus, since peerDependencies are usually already ranges, it's not obvious that Lerna could do much.\nFrom my point of view, the only way Lerna could really do it automatically without introducing a breaking change is if you were bumping the major version every single time you made a release, in which case Lerna could change ^56.0.0 to `^57.0.0 or something like that.. It seems like ideally there'd be a way to upload to a temporary location with minimal credentials, then have the 2-factor only be needed for kind of committing those bundles to the registry.. @iarna Cool! I don't doubt that it'd be quite a large change. Thanks to you and everyone at npm for all your hard work :). That seems like it'd be a great solution.. Ah interesting, I guess including it in devDependencies would work. I'd be fine with that for our usecase, just hadn't considered it.\n\nI'm concerned about the disparity between local peers and external peers: this patch would enable the omission of a local peer from any other dependency type and yet require an external peer to also be included in devDependencies (or optional or \"regular\", but that's weird).\n\nI don't totally follow the situation that you're describing. I think for me I was struggling to think of a case where you'd have a peerDependency on a package that lives in the monorepo where you would expect it not to be symlinked. Like I said though, the devDependency approach is fine with me.. This is also exacerbated by https://github.com/lerna/lerna/issues/1018 since Lerna actually explicitly changes the peerDependency to a non-range version.. > It's weird that publish even cares to distinguish between \"allDependencies\" vs \"dependencies\" when constructing the graph.\nI see it as important because it's possible to have dependency cycles that are present when devDependencies are taken into account, which don't actually matter to users of your package. If devDependencies were walked too, it makes it much more likely that you'd publish in a bad order due to cycles.\n\nWe would need to improve the peerDependencies parsing to recognize local siblings, and I doubt that work would be easy to back-port into the 2.x branch. 3.x will be latest soon enough, however.\n\nNo problem. Thanks for your work on Lerna :)\n\nNotably, since v2.7.0 lerna does not mutate peerDependencies during publish (#1187).\n\nOh cool, great to know. I saw that the issue I linked was still open and assumed it hadn't been tackled yet.. I know what they do and how to read them if I need to, but I also 100% agree that they are unreadable and unclear unless you're actually doing bitwise math.\n. ",
    "SerkanSipahi": "Update:\nmy mistake ! Lerna works wonderfully :)\ntyped this in package.json of packages:\njson\n{\n    \"prepublish\": \"make compile\"\n}\ninstead of:\njson\n{\n    \"scripts\": {\n            \"prepublish\": \"make compile\"\n    }\n}. it varies with the packages errors! i will try cache clear.. I found a solution/idea lerna run foo --scope={$(getAllModulesCommaSeparated --folder=packages)}\ngetAllModulesCommaSeparated is a simple script which returns comma separated each module name (folder) from passed argument (--folder=packages). @evocateur We all (many teams) work together on a huge project with many different dependencies (package.json) and lot of testing files. A deployment (pipeline) had taken ~~would take~~ a lot of time because of the integration (browser) tests! For this reason, we have decided to distribute the project in several monorepos (domains) and to consume them (different monorepo) when needed (only the packages). \nSo each team can test, deploy, etc, there own domain. This is totally cool because each team can deploy independently at any time. The pipeline is fast and e.g. when we find a bug in different monorepo package we can fix it immediately and can test it also immediately in our context (monorepo).\nI hope that was understandable.. @evocateur if you are interested in this feature (ignore a whole dedicated folder), i can create a PR.. your opinion: \"not for deployment pipelines or multiple monorepos\" but it can be used for that and it works well on very large teams with the advantages listed :) \nThank you for your feedback.. This was not what i meant in my last thread post! I already understood that you dont want to introduce the feature because of maintenance. I will solve it differently :)\nWhat i meant was the context of the feature: \n\n\"not for deployment pipelines or multiple monorepos\" but it can be used for that and it works well on very large teams with the advantages listed :)\n\nBTW: thank you so much for maintaining lerna and make it future ready for v3 :)\n. This is the command for those who want to run the run command in their monorepo:\nlerna run someCommand --scope=$(ls ./packages | xargs echo | sed 's/ /,/g'). Thank you for your quick response. \nUnfortunately i forgot to mention, that did not work either (npm i underscore). That command (npm i underscore) removes all the npm scoped ((at)angular/core, (at)angular/material, (at)nsp/app, (at).../....) libs when it bootstrapped before with lerna boostrap ~~but when you just npm install and then npm i underscore nothing will be removed~~. I guess in this constellation lerna and npm dont work well together.\nIt tooks to long each time bootstrap whole the project with lerna if you want to add a package.\n\nThe root node_modules is probably in a bad state, somehow, and needs to be removed and re-installed.\n\nThis is managed by lerna (see lerna.json.packages) or did I misunderstand you?\n\nThe packages layout looks fine, though I really don't recommend your root manifest (./package.json) also be a package managed by lerna.\n. As far as I understand, you do not recommend that (see (1)) because of root package.json to be lerna-published package:\n(1)\n```\nstructure:\n.\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 app\n\u2502   \u251c\u2500\u2500 assets\n\u2502   \u251c\u2500\u2500 packages\n\u2502   \u2502   \u2514\u2500\u2500 foo\n\u2502   \u2502         \u2514\u2500\u2500 package.json  (@nsp/foo)\n\u2502   \u2502   \u2514\u2500\u2500 bar\n\u2502   \u2502         \u2514\u2500\u2500 package.json  (@nsp/bar)\n\u251c\u2500\u2500 package.json (@nsp/app) (this package should consume @nsp/foo and @nsp/bar)\n\u251c\u2500\u2500 lerna.json\n\nlerna.json\n{\n  \"packages\": [\n    \"./\",\n    \"./src/packages/*\"\n  ],\n  \"version\": \"0.0.0\"\n  }\n}\n```\nbut this is not root configured and its also not working:\n```\nstructure:\n.\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 app\n\u2502   \u251c\u2500\u2500 assets\n\u2502   \u251c\u2500\u2500 packages\n\u2502   \u2502   \u2514\u2500\u2500 foo\n\u2502   \u2502         \u2514\u2500\u2500 package.json  (@nsp/foo)\n\u2502   \u2502   \u2514\u2500\u2500 bar\n\u2502   \u2502         \u2514\u2500\u2500 package.json  (@nsp/bar)\n\u2502   \u251c\u2500\u2500 packages.json (@nsp/app) (this package should consume @nsp/foo and @nsp/bar)\n\u251c\u2500\u2500 package.json (hoisting devDependencies)\n\u251c\u2500\u2500 lerna.json\nlerna.json\n{\n  \"packages\": [\n    \"./src\",\n    \"./src/packages/*\"\n  ],\n  \"version\": \"0.0.0\"\n  }\n}\n```. >Just move @nsp/app into src/packages, problem solved.\nIts already moved! Absolutely, I agree with you but on the other hand i have more problems with angular (that why i tried root package, nested packages, etc)! Will see but thank you.. @evocateur you are right npm i underscore is the best solution in that situation! I dont know why it did not work before (npm i underscore).\nI think everything is cleared to that this ticket/issue can be closed.\nThank you.. ",
    "karlhorky": "\nWasn't there talk of folding monorepo functionality into yarn at one point?\n\nYep, here https://github.com/lerna/lerna/issues/371#issuecomment-279339181. ",
    "rexxars": "Want. What's the blocker for getting this merged?. Created a thread on npm.community to track/discuss the suggested time-limited token idea outside of this issue.. ",
    "neeschit": "This is awesome!! Thanks a ton!. ",
    "hulkish": "+1. I'm seeing this issue also..\nmy lerna.json:\njson\n{\n  \"lerna\": \"2.0.0-beta.38\",\n  \"version\": \"independent\",\n  \"npmClient\": \"yarn\",\n  \"packages\": [\n    \"packages/*\"\n  ]\n}\nmy package.json:\njson\n{\n  \"scripts\": {\n    \"postinstall\": \"lerna bootstrap --hoist\",\n    \"precommit\": \"lint-staged\",\n    \"postmerge\": \"yarn install --pure-lockfile\",\n    \"postcheckout\": \"yarn install --pure-lockfile\"\n  },\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"babel-cli\": \"^6.23.0\",\n    \"babel-eslint\": \"^7.1.1\",\n    \"chai\": \"^3.5.0\",\n    \"eslint\": \"^3.16.1\",\n    \"eslint-config-babel\": \"^6.0.0\",\n    \"eslint-plugin-flowtype\": \"^2.30.0\",\n    \"eslint-plugin-import\": \"^2.2.0\",\n    \"husky\": \"^0.13.2\",\n    \"lerna\": \"^2.0.0-beta.38\",\n    \"lint-staged\": \"^3.3.1\",\n    \"mocha\": \"^3.2.0\"\n  }\n}\nbash\n$ ./node_modules/.bin/lerna bootstrap --no-hoist\nLerna v2.0.0-beta.38\nIndependent Versioning Mode\nBootstrapping 5 packages\nPreinstalling packages\nInstalling external dependencies\nNpmUtilities.installInDir     (\"./packages/babel-preset-nerf-app\", [\"babel-plugin-add-module-exports@^0.2.1\",\"babel-plugin-inferno@...)\nCommand exited with status -2: yarn install\nErrored while running BootstrapCommand.execute\nCommand exited with status -2: yarn install\nWaiting for 1 child process to exit. CTRL-C to exit immediately.\nand in my lerna-debug.log file:\nbash\nlerna(verbose) GitUtilities.isInitialized    ()\nlerna(verbose) GitUtilities.isInitialized    () => true\nlerna(verbose) GitUtilities.getTopLevelDirectory()\nlerna(verbose) GitUtilities.getTopLevelDirectory() => \".\"\nlerna(verbose) FileSystemUtilities.existsSync(\"./lerna.json\")\nlerna(verbose) FileSystemUtilities.existsSync(\"./lerna.json\") => true\nlerna(verbose) FileSystemUtilities.readFileSync(\"./lerna.json\")\nlerna(verbose) FileSystemUtilities.readFileSync(\"./lerna.json\") => \"{\\n  \\\"lerna\\\": \\\"2.0.0-beta.38\\\",\\n  \\\"version\\\": \\\"independent\\\",\\n  \\\"npmClient\\\": \\\"yarn\\\",\\n  \\\"packages\\\": [\\n    \\\"packages/*\\\"\\n  ]\\n}\"\nlerna(verbose) FileSystemUtilities.existsSync(\"./package.json\")\nlerna(verbose) FileSystemUtilities.existsSync(\"./package.json\") => true\nlerna(verbose) FileSystemUtilities.readFileSync(\"./package.json\")\nlerna(verbose) FileSystemUtilities.readFileSync(\"./package.json\") => \"{\\n  \\\"name\\\": \\\"web-nerf-tools\\\",\\n  \\\"description\\\": \\\"Monorepo for nerf tools & configs\\\",\\n  \\\"license\\\": \\\"UNLICENSED\\\",\\n  \\\"version\\\": \\\"1.2.0\\\",\\n  \\\"author\\\": \\\"TWC Web Development <TWCiWebDevelopment@weather.com>\\\",\\n  \\\"repository\\\": \\\"TheWeatherCompany/web-nerf-tools\\\",\\n  \\\"engines\\\": {\\n    \\\"node\\\": \\\">=7\\\"\\n  },\\n  \\\"scripts\\\": {\\n    \\\"install\\\": \\\"lerna bootstrap --hoist\\\",\\n    \\\"precommit\\\": \\\"lint-staged\\\",\\n    \\\"postmerge\\\": \\\"yarn install --pure-lockfile\\\",\\n    \\\"postcheckout\\\": \\\"yarn install --pure-lockfile\\\"\\n  },\\n  \\\"lint-staged\\\": {\\n    \\\"**/*.{js,jsx}\\\": \\\"eslint --quiet\\\"\\n  },\\n  \\\"dependencies\\\": {},\\n  \\\"devDependencies\\\": {\\n    \\\"babel-cli\\\": \\\"^6.23.0\\\",\\n    \\\"babel-eslint\\\": \\\"^7.1.1\\\",\\n    \\\"chai\\\": \\\"^3.5.0\\\",\\n    \\\"eslint\\\": \\\"^3.16.1\\\",\\n    \\\"eslint-config-babel\\\": \\\"^6.0.0\\\",\\n    \\\"eslint-plugin-flowtype\\\": \\\"^2.30.0\\\",\\n    \\\"eslint-plugin-import\\\": \\\"^2.2.0\\\",\\n    \\\"husky\\\": \\\"^0.13.2\\\",\\n    \\\"lerna\\\": \\\"^2.0.0-beta.38\\\",\\n    \\\"lint-staged\\\": \\\"^3.3.1\\\",\\n    \\\"mocha\\\": \\\"^3.2.0\\\"\\n  }\\n}\"\nlerna(info)    Lerna v2.0.0-beta.38\nlerna(info)    Independent Versioning Mode\nlerna(verbose) FileSystemUtilities.existsSync(\"./package.json\")\nlerna(verbose) FileSystemUtilities.existsSync(\"./package.json\") => true\nlerna(verbose) FileSystemUtilities.existsSync(\"./lerna.json\")\nlerna(verbose) FileSystemUtilities.existsSync(\"./lerna.json\") => true\nlerna(verbose) FileSystemUtilities.existsSync(\"./VERSION\")\nlerna(verbose) FileSystemUtilities.existsSync(\"./VERSION\") => false\nlerna(verbose) FileSystemUtilities.existsSync(\"./packages/babel-preset-nerf-app/package.json\")\nlerna(verbose) FileSystemUtilities.existsSync(\"./packages/babel-preset-nerf-app/package.json\") => true\nlerna(verbose) FileSystemUtilities.existsSync(\"./packages/babel-preset-nerf-module/package.json\")\nlerna(verbose) FileSystemUtilities.existsSync(\"./packages/babel-preset-nerf-module/package.json\") => true\nlerna(verbose) FileSystemUtilities.existsSync(\"./packages/eslint-config-nerf-app/package.json\")\nlerna(verbose) FileSystemUtilities.existsSync(\"./packages/eslint-config-nerf-app/package.json\") => true\nlerna(verbose) FileSystemUtilities.existsSync(\"./packages/nerf-dev-server/package.json\")\nlerna(verbose) FileSystemUtilities.existsSync(\"./packages/nerf-dev-server/package.json\") => true\nlerna(verbose) FileSystemUtilities.existsSync(\"./packages/nerf-webpack-tools/package.json\")\nlerna(verbose) FileSystemUtilities.existsSync(\"./packages/nerf-webpack-tools/package.json\") => true\nlerna(verbose) Attempting running BootstrapCommand.initialize\nlerna(verbose) Successfully ran BootstrapCommand.initialize\nlerna(verbose) Attempting running BootstrapCommand.execute\nlerna(info)    Bootstrapping 5 packages\nlerna(info)    Preinstalling packages\nlerna(info)    Installing external dependencies\nlerna(verbose) NpmUtilities.installInDir     (\"./packages/babel-preset-nerf-app\", [\"babel-plugin-add-module-exports@^0.2.1\",\"babel-plugin-inferno@...)\nlerna(verbose) FileSystemUtilities.rename    (\"./packages/babel-preset-nerf-app/package.json\", \"./packages/babel-preset-nerf-app/package.json.lern...)\nlerna(verbose) FileSystemUtilities.rename    (\"./packages/babel-preset-nerf-app/package.json\", \"./packages/babel-preset-nerf-app/package.json.lern...) =>\nlerna(verbose) FileSystemUtilities.writeFile (\"./packages/babel-preset-nerf-app/package.json\", \"{\\\"dependencies\\\":{\\\"babel-plugin-add-module-expor...)\nlerna(verbose) FileSystemUtilities.writeFile (\"./packages/babel-preset-nerf-app/package.json\", \"{\\\"dependencies\\\":{\\\"babel-plugin-add-module-expor...) =>\nlerna(verbose) FileSystemUtilities.renameSync(\"./packages/babel-preset-nerf-app/package.json.lerna_backup\", \"./packages/babel-preset-nerf-app/pack...)\nlerna(verbose) FileSystemUtilities.renameSync(\"./packages/babel-preset-nerf-app/package.json.lerna_backup\", \"./packages/babel-preset-nerf-app/pack...) =>\nlerna(error)   NpmUtilities.installInDir     (\"./packages/babel-preset-nerf-app\", [\"babel-plugin-add-module-exports@^0.2.1\",\"babel-plugin-inferno@...)\n    Command exited with status -2: yarn install\nlerna(error)   Errored while running BootstrapCommand.execute\n~/dev/repos/web-nerf-tools $\n~/dev/repos/web-nerf-tools $ rm lerna-debug.log\n~/dev/repos/web-nerf-tools $ ./node_modules/.bin/lerna bootstrap --no-hoist\nLerna v2.0.0-beta.38\nIndependent Versioning Mode\nBootstrapping 5 packages\nPreinstalling packages\nInstalling external dependencies\nNpmUtilities.installInDir     (\"./packages/babel-preset-nerf-app\", [\"babel-plugin-add-module-exports@^0.2.1\",\"babel-plugin-inferno@...)\nCommand exited with status -2: yarn install\nErrored while running BootstrapCommand.execute\nCommand exited with status -2: yarn install\nWaiting for 1 child process to exit. CTRL-C to exit immediately.\n~/dev/repos/web-nerf-tools $ cat lerna-debug.log\nlerna(verbose) GitUtilities.isInitialized    ()\nlerna(verbose) GitUtilities.isInitialized    () => true\nlerna(verbose) GitUtilities.getTopLevelDirectory()\nlerna(verbose) GitUtilities.getTopLevelDirectory() => \".\"\nlerna(verbose) FileSystemUtilities.existsSync(\"./lerna.json\")\nlerna(verbose) FileSystemUtilities.existsSync(\"./lerna.json\") => true\nlerna(verbose) FileSystemUtilities.readFileSync(\"./lerna.json\")\nlerna(verbose) FileSystemUtilities.readFileSync(\"./lerna.json\") => \"{\\n  \\\"lerna\\\": \\\"2.0.0-beta.38\\\",\\n  \\\"version\\\": \\\"independent\\\",\\n  \\\"npmClient\\\": \\\"yarn\\\",\\n  \\\"registry\\\": \\\"https://repo.artifacts.weather.com/api/npm/web-decoupling-npm/\\\",\\n  \\\"packages\\\": [\\n    \\\"packages/*\\\"\\n  ]\\n}\"\nlerna(verbose) FileSystemUtilities.existsSync(\"./package.json\")\nlerna(verbose) FileSystemUtilities.existsSync(\"./package.json\") => true\nlerna(verbose) FileSystemUtilities.readFileSync(\"./package.json\")\nlerna(verbose) FileSystemUtilities.readFileSync(\"./package.json\") => \"{\\n  \\\"name\\\": \\\"web-nerf-tools\\\",\\n  \\\"description\\\": \\\"Monorepo for nerf tools & configs\\\",\\n  \\\"license\\\": \\\"UNLICENSED\\\",\\n  \\\"version\\\": \\\"1.2.0\\\",\\n  \\\"author\\\": \\\"TWC Web Development <TWCiWebDevelopment@weather.com>\\\",\\n  \\\"repository\\\": \\\"TheWeatherCompany/web-nerf-tools\\\",\\n  \\\"engines\\\": {\\n    \\\"node\\\": \\\">=7\\\"\\n  },\\n  \\\"scripts\\\": {\\n    \\\"postinstall\\\": \\\"lerna bootstrap --hoist\\\",\\n    \\\"precommit\\\": \\\"lint-staged\\\",\\n    \\\"postmerge\\\": \\\"yarn install --pure-lockfile\\\",\\n    \\\"postcheckout\\\": \\\"yarn install --pure-lockfile\\\"\\n  },\\n  \\\"lint-staged\\\": {\\n    \\\"**/*.{js,jsx}\\\": \\\"eslint --quiet\\\"\\n  },\\n  \\\"dependencies\\\": {},\\n  \\\"devDependencies\\\": {\\n    \\\"babel-cli\\\": \\\"^6.23.0\\\",\\n    \\\"babel-eslint\\\": \\\"^7.1.1\\\",\\n    \\\"chai\\\": \\\"^3.5.0\\\",\\n    \\\"eslint\\\": \\\"^3.16.1\\\",\\n    \\\"eslint-config-babel\\\": \\\"^6.0.0\\\",\\n    \\\"eslint-plugin-flowtype\\\": \\\"^2.30.0\\\",\\n    \\\"eslint-plugin-import\\\": \\\"^2.2.0\\\",\\n    \\\"husky\\\": \\\"^0.13.2\\\",\\n    \\\"lerna\\\": \\\"^2.0.0-beta.38\\\",\\n    \\\"lint-staged\\\": \\\"^3.3.1\\\",\\n    \\\"mocha\\\": \\\"^3.2.0\\\"\\n  }\\n}\"\nlerna(info)    Lerna v2.0.0-beta.38\nlerna(info)    Independent Versioning Mode\nlerna(verbose) FileSystemUtilities.existsSync(\"./package.json\")\nlerna(verbose) FileSystemUtilities.existsSync(\"./package.json\") => true\nlerna(verbose) FileSystemUtilities.existsSync(\"./lerna.json\")\nlerna(verbose) FileSystemUtilities.existsSync(\"./lerna.json\") => true\nlerna(verbose) FileSystemUtilities.existsSync(\"./VERSION\")\nlerna(verbose) FileSystemUtilities.existsSync(\"./VERSION\") => false\nlerna(verbose) FileSystemUtilities.existsSync(\"./packages/babel-preset-nerf-app/package.json\")\nlerna(verbose) FileSystemUtilities.existsSync(\"./packages/babel-preset-nerf-app/package.json\") => true\nlerna(verbose) FileSystemUtilities.existsSync(\"./packages/babel-preset-nerf-module/package.json\")\nlerna(verbose) FileSystemUtilities.existsSync(\"./packages/babel-preset-nerf-module/package.json\") => true\nlerna(verbose) FileSystemUtilities.existsSync(\"./packages/eslint-config-nerf-app/package.json\")\nlerna(verbose) FileSystemUtilities.existsSync(\"./packages/eslint-config-nerf-app/package.json\") => true\nlerna(verbose) FileSystemUtilities.existsSync(\"./packages/nerf-dev-server/package.json\")\nlerna(verbose) FileSystemUtilities.existsSync(\"./packages/nerf-dev-server/package.json\") => true\nlerna(verbose) FileSystemUtilities.existsSync(\"./packages/nerf-webpack-tools/package.json\")\nlerna(verbose) FileSystemUtilities.existsSync(\"./packages/nerf-webpack-tools/package.json\") => true\nlerna(verbose) Attempting running BootstrapCommand.initialize\nlerna(verbose) Successfully ran BootstrapCommand.initialize\nlerna(verbose) Attempting running BootstrapCommand.execute\nlerna(info)    Bootstrapping 5 packages\nlerna(info)    Preinstalling packages\nlerna(info)    Installing external dependencies\nlerna(verbose) NpmUtilities.installInDir     (\"./packages/babel-preset-nerf-app\", [\"babel-plugin-add-module-exports@^0.2.1\",\"babel-plugin-inferno@...)\nlerna(verbose) FileSystemUtilities.rename    (\"./packages/babel-preset-nerf-app/package.json\", \"./packages/babel-preset-nerf-app/package.json.lern...)\nlerna(verbose) FileSystemUtilities.rename    (\"./packages/babel-preset-nerf-app/package.json\", \"./packages/babel-preset-nerf-app/package.json.lern...) =>\nlerna(verbose) FileSystemUtilities.writeFile (\"./packages/babel-preset-nerf-app/package.json\", \"{\\\"dependencies\\\":{\\\"babel-plugin-add-module-expor...)\nlerna(verbose) FileSystemUtilities.writeFile (\"./packages/babel-preset-nerf-app/package.json\", \"{\\\"dependencies\\\":{\\\"babel-plugin-add-module-expor...) =>\nlerna(verbose) FileSystemUtilities.renameSync(\"./packages/babel-preset-nerf-app/package.json.lerna_backup\", \"./packages/babel-preset-nerf-app/pack...)\nlerna(verbose) FileSystemUtilities.renameSync(\"./packages/babel-preset-nerf-app/package.json.lerna_backup\", \"./packages/babel-preset-nerf-app/pack...) =>\nlerna(error)   NpmUtilities.installInDir     (\"./packages/babel-preset-nerf-app\", [\"babel-plugin-add-module-exports@^0.2.1\",\"babel-plugin-inferno@...)\n    Command exited with status -2: yarn install\nlerna(error)   Errored while running BootstrapCommand.execute\nNote: running npm install  or yarn  install in each package dir manually does not produce errors. So, I'm unsure how to proceed.\nThis also occurs regardless of --hoist or --no-hoist. Also happens regardless of \"npmClient\": \"yarn\" set or unset. Fooling around... found a temp workaround:\nbash\n~/dev/repos/web-nerf-tools $ ./node_modules/.bin/lerna exec \"$(which yarn)\"\nbut this doesnt:\nbash\n~/dev/repos/web-nerf-tools $ ./node_modules/.bin/lerna exec \"$(which yarn) install\"\nhmmmm... @spudly can you elaborate on your actual fix? . so... i was wrong my solution doesn't work.. im finding lerna to be entirely malfunc when using a private registry . well.. i believe you but no matter what i try i still seem to get the NpmInstallDir error. @medunham this hits close to home, ill give it a shot and report back, thanks! . Seems to be related when yarn install in a particular package produces warnings. Is that intended @evocateur?. Any update on this issue?. just an update... because of this issue ive had to abandon using yarn with lerna all together.. Hoping this can be resolved. just an update... because of this issue ive had to abandon using yarn with lerna all together.. Hoping this can be resolved. This is still an issue, even without the postinstall script. I feel like bootstrap should auto detect the scenario of one commit and allow the process to complete - instead of hanging indefinitely.. You don't actually need to run lerna bootstrap if you're using yarn workspaces. And if you're using yarn + lerna... i cant imagine why you wouldn't be using workspaces. \nIMO lerna should just fail-fast when it detects usage of workspaces + yarn as npmClient.\n@evocateur this could be marked as non issue?. Just a suggestion..but imo this should be closed since not really an issue but more user error. @carrickjason it's not stuck, its just running yarn in a child process which lerna doesn't log to stdout. It is, but I recommend creating a new issue for it.. @evocateur thanks!. ",
    "nutgaard": "Is there anything stopping this from getting merged at this point? Anything I can help with? \nI would really really like to see this feature in lerna. :). PR #607 solves this if I'm not mistaken\n\nmar. 2017 16.46 skrev \"Omer Hamerman\" notifications@github.com:\n\n\nHey,\nTrying to run lerna in a CI process:\nUsing --yes doesn't affect version selection prompts from lerna publish\nI cannot use npm --repo-version since it would hard set a single version\nto all modules.\nIs there a flag / workaround to select the first option (Patch) and let\nlerna do its version magic automatically?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/lerna/lerna/issues/659, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABWRKXvWLuZufSUtAh4RPA3CUmPgi1SAks5rkB7ggaJpZM4MYQS_\n.\n. I couldn't wait due to a limited amount of time at my current project. So I released cifs-branch with some added debugging here: https://www.npmjs.com/package/lerna-waiting-on-pull-607\n\nHopefully the PR will get merged soon so I can deprecate and forget about this shady solution. \n. Yeah, I've not had any issues with it. I just added --cd-version patch to the lerna-command and it bumps the packages that has been changed.. I've deprecated my package on npmjs.org and switched to the original package without any issues. So as far as I'm concerned it can be closed.. Found a workaround; \n(lerna updated && lerna publish --exact --cd-version patch --yes -m \\\"publish [ci skip]\\\") || echo \\\"No change\\\"\nBut feels overly complicated just to avoid breaking the build. . ",
    "omerxx": "Hey @cif / @evocateur,\nThis feature would help us a lot, saving time and effort, and solve the problem very neatly.\nIs there a forecast on when this should be ready and merged into lerna?\nThank you guys for the hard work!. Wow! You guys are awesome... Thank you for this!. Thanks for the quick reply!\nThe feature is great and would solve my problem perfectly, however it's still not merged and there seem to be code conflicts..\nAny other suggestion for quick workaround or should I wait for the guys to complete it?. Nice :)\nThank you for that!\n@nutgaard Is it working as expected?. Using latest release.\nThe fact is that only --skip-npm creates the commit but doesn't push.\nI actually do need this behaviour since I need to refactor the commit to prevent my CI server from being triggered.\nI couldn't find any supporting documentation for what I'm experiencing and your comment confuses me too.... I'm not doing this locally. Using a CI server\nI can take a fork and change it to never publish if there's no option to set it up. Of course it does, but I'd like to publish npm packages on one hand, create git commit and tags but prevent it from being pushed on the other.\nSo I need something like lerna publish <args> && git push --tags origin according to my situation would push twice to git. I can't allow that. . Anyway, @evocateur you've helped a lot by pointing me to the fact that --skip-npm will not push to git. I'll use that.\nThanks!. ",
    "bradbarrow": "I'd love to better understand how this is used in your CD process @cif \nIf I understand, you'd have to run lerna publish --yes --cd-version=minor for instance which would then force all of the packages to be bumped a minor bump?\nIs that the behaviour? \nWhat happens if in a single CI build I want one package to be published in a major increment and one in a minor?. ",
    "leonardorb": "That's great! This will be very helpful.. ",
    "mnasyrov": "It would be great to add an option to list absolute (or relative) paths of packages for using with external scripts/pipes.. ",
    "stramel": "I believe this can be closed? @evocateur @seansfkelley . ",
    "codedbypaul": "I'm having a similar issue. Trying to run a test command that runs karma, but telling it to ignore packages that don't have tests.\nIn my package.json:\n\"test\": \"lerna exec -- karma start karma.conf.js --single-run\",\nIn my lerna.json:\n\"commands\": {\n  \"test\": {\n    \"ignore\": [\n      \"@cbs-aurelia-components/cbs-aurelia-components\",\n      \"@cbs-aurelia-components/cbs-component-styles\"\n    ]\n  }\n},\nI get an error with karma as it can't find a karma.conf in /cbs-component-styles . It's in the root package.json.. Seems to have got me a bit further along. My LERNA_ROOT_PATH has a space in ie:\n/Volumes/HD Name/ \nSo I get an error: Cannot find module '/Volumes/HD'\nIs there a way to escape the path, or am I just better renaming the hd to something without spaces?. I\u2019ll give it a go and close this issue as it\u2019s been answered.. ",
    "loopmode": "I am dealing with similar problems, in my case it's about transpiling and a yarn build step. \nI'm using ugly workarounds.\nSome of my packages just don't need a build step.\nI've been using \"build\": \"echo nothing to build\" in their package.json files for a while.\nI've been using different scopes in package names, in order to use --scope for controlling it.\nFor example, \"name\": \"@project/package\" vs \"name\": \"@project-lib/package\", then --scope project/* to avoid the -lib scope. \nIt all feels wrong..\nWhat did you guys end up doing?. Is --stream and --concurrency the way to go when the number of packages increases?\nI have 14 packages currently, and I'm using \"watch\": \"lerna run watch --concurrency 20 --stream\".\nI wonder if the mechanism will scale well. Otherwise, I'd need to think about a custom solution (for example a script using nodemon to watch all packages at once). @evocateur I would appreciate if you could elaborate on running the watcher from the root. \nI was under the impression I'd need something like nodemon, and in case of a change/update, I'd have to figure out which package contains the file that was changed, then run the build script of that package in probably a new process. And I supposed I'd have to code this manually - it's not much, but still..\nMaybe lerna already has everything it takes, and I just don't see it? (I'm fairly new to lerna). ",
    "asharma93": "If there aren't any objections I'll submit a PR.. ",
    "medunham": "This may be related. \nI have a command like \"bootstrap\": \"lerna bootstrap\" in my package.json at the root of the project and when I run npm run lerna from the command line I get similar errors with packages that have private scopes and custom .npmrc files in packages/some-project/.npmrc.\nIf I manually hoist the .npmrc file from packages/some-project/.npmrc to the root of the project, the npm run bootstrap then succeeds.\nIf I run the globally installed lerna boostrap command, I get the same error unless I hoist the .npmrc file manually.\nIf I rollback from 2.0.0-beta.37 to 2.0.0-beta.36 without the hoisted .npmrc the lerna bootstrap command still fails so it doesn't seem to be something introduced from .36 to .37.. ",
    "stephenmathieson": "@hulkish any luck? I seem to be having the same issue as you :/. @noherczeg interesting- I only see this when running on CircleCI, which is Dockerized. I'm guessing this has something to do with the issue. . I'm also super interested in this! I've tried asking on Slack, but it seems like there's not much activity there anymore?. I'm also super interested in this! I've tried asking on Slack, but it seems like there's not much activity there anymore?. Awesome, thanks Daniel!. Awesome, thanks Daniel!. ",
    "roastlechon": "Also in same boat. JK mine randomly worked.\npackage.json\n\"lerna\": \"lerna --npm-client=yarn\",\nsh\nyarn lerna -- clean && yarn lerna -- bootstrap\nresults in \nyarn lerna v0.21.3\n$ lerna --npm-client=yarn clean\nLerna v2.0.0-beta.38\nIndependent Versioning Mode\nAbout to remove the following directories:\n- /Users/amadali/projects/test-modules/packages/module-1/node_modules\n- /Users/amadali/projects/test-modules/packages/module-2/node_modules\n- /Users/amadali/projects/test-modules/packages/module-3/node_modules\n- /Users/amadali/projects/test-modules/packages/module-4/node_modules\n- /Users/amadali/projects/test-modules/packages/module-5/node_modules\n- /Users/amadali/projects/test-modules/packages/module-6/node_modules\n- /Users/amadali/projects/test-modules/packages/module-7/node_modules\n? Proceed? Yes\nAll clean!\n\u2728  Done in 8.09s.\nyarn lerna v0.21.3\n$ lerna --npm-client=yarn bootstrap\nLerna v2.0.0-beta.38\nIndependent Versioning Mode\nBootstrapping 7 packages\nPreinstalling packages\nInstalling external dependencies\nSymlinking packages and binaries\nPostinstalling packages\nPrepublishing packages\nSuccessfully bootstrapped 7 packages.\n\u2728  Done in 23.61s.. Has anyone figured a better solution than git pull in a CI situation?. ",
    "pierreburgy": "I have the same issue, happening only in a Dockerized container. I tried using a non root user in the container, but I did not solve the problem.. ",
    "cappslock": "One potential cause for this occasionally working is the existence of packages in the global yarn cache. If you've happened to successfully install the package elsewhere, it will succeed.\nI've found that when using yarn and packages with registry/auth overrides in a local .npmrc, lerna only works when run globally.\nUnfortunately I don't know why.. I'll try 2.7.0 when I'm back to work on Tuesday and report back. Thanks for the reply!. @evocateur just tested with 2.7.1, no change in observed behavior unfortunately :(. I can confirm that this works better with npm (it fails due to an unrelated issue with our private registry, which isn't really your problem). Any tips on debugging this when using yarn? Is this perhaps something that should be taken to the yarn team?. Will do. Looks like 1.4 touches on some related things so hopefully that resolves it.\nI'm not totally sure Lerna isn't involved somehow, since a direct yarn install works fine, but I'll report back after 1.4 is released.. ",
    "iTonyYo": "Don't delete package.json.lerna_backup file!!!!! Or, this error will kick your ass! \ud83d\ude2d . ",
    "fengzilong": "I have the same issue, but in my case it's because of missing name field in package.json in certain package.. ",
    "cyberthom": "Yes, --stream in combination with --concurrency will do the job! . ",
    "oliverwoodings": "@hzoo any idea if a new beta release is going out soon? Sadly this PR hasn't made it into the latest beta release :(. Same with this PR: https://github.com/lerna/lerna/pull/672. Thanks!. ",
    "jacobp100": "\nTo workaround it, move the babel config into the babel property of package.json\n\nThe resolution for .babelrc is the same as package.json, so this causes the same issue (although you can't overcome this with .npmignore.\n\nReact Native shouldn't be picking up .babelrc\n\nActually, this is the behaviour of Babel, meaning that this affects all projects with babel configs between projects. While you could blame Babel for this, .npmignored artefacts always have the potential to interfere with projects, and there will always be the odd cases where you need them excluded.\nI think a solution would be to to provide a non-default option to npm install /path/to/package instead of the default behaviour in each project, and document this option.\nIf you're happy with this solution, I'd be happy to work on this.. My use case is React Native\u2014I'm not too sure about how that packages things.\nFor now I've moved the RN project out of projects and then npm install ../packages/* to manually update. It works, but it would be nice to have this fixed!. ",
    "konrad-garus": "Same issue with Angular and AoT compilation.\nIn this case the following NPM script in my \"lib packages\" seems to get the job done:\n\"build\": \"ngc\",    \n    \"prepublish\": \"npm run build && rimraf node_modules/@angular\". ",
    "jquense": "seems like the most straightforward (maybe not correct tho) solution is to combine the package.json in the hoist location with all the hoisted deps, so `installInDir works as intended? \nHonestly tho I can't see lerna supporting other npm clients without specific client adaptors that handle the api differences, yarn especially has fairly divergent behavior from npm. \ud83d\udc4d  I'd also like the ability to make this throw in certain situations. As it is I wrote up a little script that uses hasMatchingDependency for each package as a lint step, to make sure we don't accidently get out of sync on package versions.. I'd be happy with either I think. whatever makes more sense for the project. The only time we generally don't want that behavior when bootstraping/publishing is when a package depends on itself (in which case i'd need to use an older published version). might be worth making a note of somewhere, node8 is coming out today and ships with (or soon will ship with npm5) Don't want ya'll overrun by folks with the same issue :). This situation is just always true regardless of whether you use lerna. If you npm install a package it's deps are installed alongside it in a flat structure in node_modules and are resolvable via require regardless of whether you depend on it directly. Lerna's hoisting behavior isn't anymore incorrect, in what it allows you to resolve than plain use of npm. I agree that eslint rules are the better way to avoid such things.. > One project cannot import the dependencies from another project\nThat's not true, you can import nearly every transitive dependency regardless of whether you depend on it directly just look in node_modules on a single package and try, yes Lerna theoretically adds more you can accidentally require but it's not more unsafe than any project that uses npm or yarn. yarn 27.0 is out yeah? can we merge this? I'd like to give it a shot. @bestander sorry to ping you here, but it doesn't seem like bins from workspaces are linked or generated. I've got a workspace packages/foo with a bin, but after an install there isn't anything in node_modules/.bin in the root or any workspaces that depend on foo.\nwonderful feature tho, i'm really excited about it !. I don't think so regarding no-hoist since that's how yarn workspaces work and lerna is defering to it.. So i've done some more testing. It appears like yarns install with workspaces doesn't different things from lerna bootstrap. The big things i've notice are:\n\nyarn doesn't link local bins\nyarn doesn't run local prepublish/prepare scripts in linked packages, which is required for build steps\n\nI've tried a bunch of different configs and setups with the same results. As a replacement for bootstrap it doesn't do all the things :). @evocateur just to be clear on your approach. You manually have your root package.json reflect the sum total of all the sub-packages package.jsons? So changing a dep requires changing it in at least two places? . ",
    "JaKXz": "@evocateur this is great, well done! I'm curious about one statement though: \n\nmore accurate in its coverage report [than nyc + mocha]\n\nAFAIK jest uses a lot of istanbul's libs under the hood for collecting coverage information, especially babel-plugin-istanbul. Could you expand / provide examples on how it's more accurate, and I'm hoping that will help us make nyc more accurate :) thanks!\ne.g. for files that are not required in tests, you would use nyc's --all flag to see them included in the coverage report. I agree our documentation leaves something to be desired which I am dedicating cycles to improve ATM so your feedback here would definitely help make my work more effective \ud83d\ude04 . ",
    "dominikwilkowski": "I can't change the version match just because lerna doesn't understand it :)\nBut I get it, no worries.\nI expected to not check version and only see if the dependent module is inside our repo. I don't understand when you would ever want to depend on an older version of the same thing you are developing especially inside a monorepo. (Where things are built together)\nAnyway I might be an edgecase then :). A nice solution for this is to use:\njson\n\"dependencies\": {\n    \"@gov.au/pancake\": \">0.1.0\"\n},\nThat way I stay within semver validation. Hope this helps someone else.. ",
    "lleaff": "I think this should be added to the FAQ or some kind of gotchas/caveats collection.. ",
    "camacho": "No strong opinions on my end. I've found it to be a useful tool on larger\nprojects with complex docs, code examples, etc. but it is additional\noverhead.\nOn Tue, Mar 7, 2017 at 2:22 PM Henry Zhu notifications@github.com wrote:\n\nThat's really cool, although I figured we should just remove that from the\nreadme either that line or just use 2.0.0?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/lerna/lerna/pull/642#issuecomment-284879644, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABJsmqNzC4mM_cbR5t1ZNLkSVUplsJtAks5rjdi4gaJpZM4MSmGM\n.\n. @hzoo would you like to close this PR and open a new one with updated examples?. \n",
    "lili21": "any update ?. I know that, that's why I pass the --userconfig option.. @judewang add .npmrc file in every package. and include the auth info in the file.\nbash\n//private.registry.com/:_password=****\n//private.registry.com/:username=***\n//private.registry.com/:email=***\n//private.registry.com/:always-auth=false. same issue here. weird. I'm using lerna@2.9.0.\nmaybe lerna can output more information for debugging. like what make lerna think a package changed ?\njson\n// lerna.json\n{\n  \"lerna\": \"2.9.0\",\n  \"packages\": [\n    \"packages/*\"\n  ],\n  \"npmClient\": \"yarn\",\n  \"useWorkspaces\": \"true\",\n  \"version\": \"independent\"\n}. lerna updated should tell me what exactly updated in code level. what I changed ?\nlerna updated --detail ?\n. ",
    "GordonSmith": "Actually this is a bit more involved - lerna would need to emit \"packages/pck-name/\" as the prefix for this to work (and is very vscode specific).\nWhile vsCode has a pretty flexible problemMatcher - I dont think there is anyway to regex the full relative path from the prefix and the error.\n. Question:  What happens when you have several branches:\n ver1.x (where 1 is the largest major version for all packages)\n ver2.x (where 2...)\n* ver3.x (...)\nWhenever a breaking change PR is made, it would need to be issued against the \"next version up\" branch.  Then in that branch your major versions will get bumped on publish, but in the lower branch they won't be.\nNow (in theory) you can continue to publish to NPM from any of the verX branches - but immediately afterwards you would want to upmerge  ver1 -> ver2 -> ver3 -> master before doing another publish (from a higher version).\nI haven't tested the above, but I am also looking for a solution where I can bump a major version on a util package without unnecessarily bumping a major version on its dependents (my compiler will have identified which packages DO need a bump and those \"fixes\" will have been included in the breaking PR anyway).\nThen when making changes, you would make them at the lowest version possible and overtime you would be freezing (dropping support) for the lower versions.... @evocateur What about lerna publish --exact --conventional-commits  --preid=beta, what is the expected behavior there?\nI know that both the examples I gave above don't do what I would expect and I was just reaching out to see if any folks had a working \"process\" for releasing a \"rc\" build while using conventional-commits (I don't mind doing some manual stuff!!!). ",
    "khaled": "same issue here.\nnode version:  v6.9.1\nnpm version: 3.10.8\ngit version: 2.2.1. Looks like lerna init was creating initialization files in the parent directory, which happened to be a git repo.  After running git init in the child directory, lerna init did the right thing.. ",
    "rodet": "@hzoo Thanks for the quick answer! I found out about this project because I started working on a project that uses it. I understand this might not be for everyone - the project I am on actually have needs for it, as it is a collection of sub-projects that live together.\nShould I replace \"Package A\" by \"npm package A\" etc? Markdown might do the job as well - I was hinting at a picture because it often says more than 1000 words if done right.\nHere is a preview with the replacement:\n\nOr\n\nIn the end, I just wanted to show one possibility that I think might make easier for potential users to understand quickly if and why they should use Lerna. You decide if you want to include such a graph or not, or take another action on that feedback :). ",
    "Moeriki": "I have tried some things and settled with this script.\npackage.json\njson\n{\n  \"scripts\": {\n    \"deploy\": \"node deploy.js\"\n  }\n}\ndeploy.js\n``js\nconst exec = (command) => execSync(command, { encoding: 'utf8' }).trim();\nconst LERNA_BIN = path.join(exec('npm bin'), 'lerna');\nconst lerna = (args) => exec(${LERNA_BIN} ${args}`);\nconst split = (pattern) => (chars) => chars.split(pattern);\nconst zip = (destination, source) => Object.assign(destination, { [source[0]]: source[1] });\nconst isPkg = (tag) => tag.match(/[\\w-]+@\\d+.\\d+.\\d+(-[\\w\\d]+)?/);\nconst updatedPackages = exec('git tag --list --contain HEAD')\n  .split('\\n')\n  .filter(isPkg)\n  .map(split('@'))\n  .reduce(zip, {})\n;\nfor (const pkg of Object.keys(updatedPackages)) {\n  const version = updatedPackages[pkg];\n  lerna(--scope ${pkg} exec -- npm publish);\n}\n```\nIt's a bit surprising such a manual effort is needed to deploy independent packages through a CI. Any plans to make anything like the script above available as lerna command?\n. No good reason. Just company policy \ud83d\ude16. No problem. I'm good as-is.. ",
    "joebowbeer": "Can step 2 be accomplished using --skip-git, possibly in combination with --force-publish?\nlerna publish --skip-git\nGiven the usual sequence of operations to publish an npm package:\nbash\n$ npm version patch\n$ git push --tags origin master\n$ npm publish\nI am hoping that lerna provides a way to separate the first two from the last.\nIs this what --no-npm and --no-git are designed for?. @tivac Is lerna exec -- npm i really equivalent to npm i packages/*?. @evocateur  please excuse the follow-ons; I am hoping you can clarify your comment above regarding file: -- I just came across npm/pull/15900 which claims link: is the new file:\nBTW it would be great to update the lerna doc to include a description of this golden path free of bootstrap.. My CI also needs this change.\nGiven the usual sequence of operations to publish an npm package:\nbash\n$ npm version patch\n$ git push --tags origin master\n$ npm publish\nI want lerna to permit a separation of the first two actions from the last.\nRelated to #653 and #1385 . I would also like to see more support for --no-git-tag-version.\nI think it is a sufficiently-common workflow with npm packages published by CI/CD to have the devs bump the version on a branch (using --no-git-tag-version), submit a PR, squash merge to master after approval, and then have the CI/CD publish the new version to the npm registry.\nA quick search for npm publish CI returns a few articles outlining the process, and the npm version and npm publish implementations (and separation of concerns) makes this possible. It is not the most common workflow by far, but it is common enough.\nWith lerna, the new version command is a step in the right direction (thanks!), and I agree that the use of file specifiers instead of bootstrap is a win, but as things are now, lerna version --no-git-tag-version seems to be of limited use because npm publish will balk without git tags.\nAfter running lerna version patch --no-git-tag-version and committing and pushing the changes, what command can be used to publish these changes?\nDoes npm publish need a from-package option in addition to a from-git option?. @evocateur Thanks for the correction. I updated the description.. @StarpTech In my workflow I use --no-git-tag-version (or that is effectively what is used because the CI account doesn't have write access to the git repo). The versions published to our private npm repo are the only versions important to us. Can lerna detect changes by comparing each package.json version against the latest version in the npm repo? I guess it is possible to enable git tag pushes from CI... @evocateur we only/always publish traditional npm packages from CI, after pushing to master, using a builder account that does not have write access to git. (Furthermore, the master branch is protected from unreviewed pushes.)\nEach PR is required to be up to date with the head of master, and must include the version bump.. ",
    "NunoFl": "ory editor is giving me this problem when doing \"npm i\" command\nnpm ERR! undefined postinstall: npm-run-all clean clean:lerna bootstrap build:lib\nhttps://github.com/ory/editor/blob/master/README.md#install-dependencies. ",
    "milesj": "Spent the last week moving the root src/test folders into each package. I then tagged a new version and all the package.json files were updated accordingly. Not sure if that's the actual issue, just giving an update.. @evocateur I've not encountered it, but I haven't tagged much since.. Just ran into the same issue when trying to bootstrap lerna during Travis CI before_script. Using --concurrency=1 seemed to do the trick. Perhaps this should be mentioned in the docs somewhere.. Yup, running into this now on Travis CI.\n```\nlerna ERR! execute Error: Command failed: yarn install --mutex network:42424 --non-interactive\nlerna ERR! execute \nlerna ERR! execute   error: unknown option `--non-interactive'\nlerna ERR! execute \nlerna ERR! execute \nlerna ERR! execute     at Promise.all.then.arr (/home/travis/build/milesj/emojibase/node_modules/execa/index.js:236:11)\nlerna ERR! execute     at \nlerna ERR! execute     at process._tickCallback (internal/process/next_tick.js:188:7)\nlerna ERR! execute  callback with error\nlerna ERR! execute  { Error: Command failed: yarn install --mutex network:42424 --non-interactive\nlerna ERR! execute \nlerna ERR! execute   error: unknown option `--non-interactive'\n```\nTemporary fix.\nbefore_script:\n  - curl -o- -L https://yarnpkg.com/install.sh | bash\n  - export PATH=$HOME/.yarn/bin:$PATH. The private: true approach seems to have broken with v3.. This was from 5 minutes ago:\nlerna info version 3.0.0-beta.21\nlerna info versioning independent\nlerna info Checking for updated packages...\nlerna info Comparing with emojibase-data@2.2.0.\n? Select a new version for emojibase (currently 1.5.0) Minor (1.6.0)\n? Select a new version for emojibase-data (currently 2.2.0) Minor (2.3.0)\n? Select a new version for emojibase-generator (currently 0.0.0) (Use arrow keys)\n\u276f Patch (0.0.1) \n  Minor (0.1.0) \n  Major (1.0.0) \n  Prepatch (0.0.1-0) \n  Preminor (0.1.0-0) \n  Premajor (1.0.0-0) \n  Prerelease \n  Custom\nAnd the package: https://github.com/milesj/emojibase/blob/master/packages/generator/package.json#L2. I downgraded to 2.11 and the problem still persists. Maybe something else is going on.\nlerna info version 2.11.0\nlerna info versioning independent\nlerna info ignore [ '*.md' ]\nlerna info Checking for updated packages...\nlerna info Comparing with emojibase-data@2.2.0.\nlerna info Checking for prereleased packages...\n? Select a new version for emojibase (currently 1.5.0) Minor (1.6.0)\n? Select a new version for emojibase-data (currently 2.2.0) Minor (2.3.0)\n? Select a new version for emojibase-generator (currently 0.0.0) \n  Patch (0.0.1) \n  Minor (0.1.0) \n  Major (1.0.0) \n  Prepatch (0.0.1-0) \n\u276f Preminor (0.1.0-0) \n  Premajor (1.0.0-0) \n  Prerelease \n  Custom\nI have to use --ignore=emojibase-generator to get this working at the moment.. Ah, gotcha. Thought it would just skip the version part (as it's completely unnecessary IMO).. Thanks for the feedback. It makes perfect sense. I'll report this to Yarn.. I'm really in favor of the version/publish split, as it would help automate releases a bit. In some of the current projects at my employer, we're utilizing Yarn workspaces + semantic-release + semantic-release-monorepo (which is very hacky) to automate releases based on commit messages... which works, but is also problematic.\nIf this could be automated via Lerna, we could forego the semantic-release process and embrace Lerna 100%. Even more so if there were some hooks to update changelog, generate GH releases, etc.. @evocateur Awesome to move forward on this! Made some adjustments based on feedback. I'll add tests once the implementation is done.. @evocateur Made changes. I think this is good to start adding tests.. @evocateur I'm trying to write tests for the command but can't seem to get access to the releaseNotes array to verify what's been created. Is that possible at all? Since it's abstracted away around the yargs command runner.. I'll take a look at that, thanks.. Yeah sorry, been a bit swamped and haven't had a change to dig back into it. Hoping this weekend.. @evocateur Thanks for the heads up \ud83d\udc4d . @evocateur Added tests \ud83d\udc4d . @evocateur AWW YESS! Thanks for accepting it, this is awesome.. @azz Curious how you think that would work?. @evocateur The message should be enough, so that's cool with me. This doesn't necessarily have to be in Lerna.. What version of the @octokit packages are installed?. Are these private repositories? Did you give your token repo access?\n\nIt might be this: https://developer.github.com/v3/troubleshooting/#why-am-i-getting-a-404-error-on-a-repository-that-exists. Yeah, let use know if the \"repo\" access in the token is all that's required to fix it. If so we'll update the docs.. I'm not entirely sure. The octokit enterprise package is used to bootstrap all the endpoints that exist in that version (including URL and what params it accepts), so you'd have to hit an endpoint outside of this list, and I'm not entirely sure what endpoint that would be.. Yeah we do, using the 3.0.1 version. Is there any way to debug besides the log file on error?. I created a commit that started with \"New:\" and ran the script. This is the log output (omitted paths and deps).\nlerna sill argv { _: [ 'version' ],\nlerna sill argv   'conventional-commits': true,\nlerna sill argv   conventionalCommits: true,\nlerna sill argv   'changelog-preset': 'eslint',\nlerna sill argv   changelogPreset: 'eslint',\nlerna sill argv   'github-release': true,\nlerna sill argv   githubRelease: true,\nlerna sill argv   push: true,\nlerna sill argv   message: 'Release [ci skip]',\nlerna sill argv   m: 'Release [ci skip]',\nlerna sill argv   loglevel: 'silly',\nlerna sill argv   lernaVersion: '3.11.1',\nlerna sill argv   '$0': 'node_modules/.bin/lerna' }\nlerna notice cli v3.11.1\nlerna verb rootPath /Users/miles_johnson/Sites/airlab/repos/dev-cli\nlerna info versioning independent\nlerna sill isAnythingCommitted \nlerna verb isAnythingCommitted 1\nlerna sill currentBranch \nlerna verb currentBranch lerna-fix\nlerna sill remoteBranchExists \nlerna sill isBehindUpstream \nlerna sill isBehindUpstream lerna-fix is behind origin/lerna-fix by 0 commit(s) and ahead by 2\nlerna sill hasTags \nlerna verb hasTags true\nlerna sill git-describe.sync \"cli@0.5.23-3-g1b7eebd\" => {\"lastTagName\":\"cli@0.5.23\",\"lastVersion\":\"0.5.23\",\"refCount\":\"3\",\"sha\":\"1b7eebd\",\"isDirty\":false}\nlerna info Looking for changed packages since cli@0.5.23\nlerna info ignoring diff in paths matching [ '*.md' ]\nlerna sill checking diff packages/cli\nlerna sill found diff in packages/cli/package.json\nlerna verb filtered diff [ 'packages/cli/package.json' ]\nlerna sill checking diff packages/webpack\nlerna sill no diff found in cli-webpack\nlerna verb updated cli\nlerna verb git-describe undefined => \"cli@0.5.23-3-g1b7eebd\"\nlerna sill git-describe parsed => {\"lastTagName\":\"cli@0.5.23\",\"lastVersion\":\"0.5.23\",\"refCount\":\"3\",\"sha\":\"1b7eebd\",\"isDirty\":false}\nlerna sill independent for cli at /packages/cli\nlerna verb independent increment 0.5.23 by patch\nlerna sill batched [ PackageGraphNode {\nlerna sill batched     name: 'cli',\nlerna sill batched     externalDependencies: Map { ... },\nlerna sill batched     localDependencies: Map {},\nlerna sill batched     localDependents: Map {} } ]. Do note that this has a 0 major version but the repo in which the auto-releases is on does not and still has the patch problem.. I've been digging around and it looks like this file is failing to find/return the config: https://github.com/lerna/lerna/blob/master/core/conventional-commits/lib/get-changelog-config.js. FOUND IT! I threw some console logs in here: \ngetChangelogConfig cache undefined\nparsed { type: 'tag',\n  registry: true,\n  where: undefined,\n  raw: 'eslint',\n  name: 'eslint',\n  escapedName: 'eslint',\n  scope: undefined,\n  rawSpec: '',\n  saveSpec: null,\n  fetchSpec: 'latest',\n  gitRange: undefined,\n  gitCommittish: undefined,\n  hosted: undefined }\ntrying without prefix eslint { Linter: [Function: Linter],\n  CLIEngine:\n   { [Function: CLIEngine] version: '5.13.0', getFormatter: [Function: getFormatter] },\n  RuleTester:\n   { [Function: RuleTester] [Symbol(it)]: null, [Symbol(describe)]: null },\n  SourceCode: [Function: SourceCode] }\nSince we try without the prefix, eslint loads the actual eslint package instead of conventional-changelog-eslint. \nIt should probably be updated to try with the prefix before trying without the prefix.. For now I can do '--changelog-preset',  'conventional-changelog-eslint', to unblock us. I'll throw up a patch in a bit if it's super easy.. Same. Even while reading over the code it didn't cross my mind haha.. @revelt That's when the angular (default) preset is used. In my troubleshooting, I was using the ESLint preset, which is different.. Yeah, will change it so it's a bit more apparent.. Is there any flags/settings that I can dig into to determine a prerelease?\nEdit: Can probably utilize semver.prerelease().. When \"fixed\", this should only have 1 value in releaseNotes correct? Since the chain is only happening once, and not on every package.. Added.. I ended up just calling git since that package field might not always exist.. Yup, totally can do.. Instead of wrapping in independent mode, maybe we include all the release notes from each package as a single GH release?. Sounds good! Will dig into it a bit more.. Yup, of course.. Just want to verify this is correct for fixed.. ",
    "pshrmn": "I ran into what I believe is the same issue. I think that it is happening because topologicallyBatchUpdates does not take peerDependencies into consideration when it is ordering the packages. That means that if the peer dependency gets ordered after the other package, it will not be updated. I believe that a peer dependency should be placed ahead of the files that expect it to be installed.\nI'll do a little bit more experimenting to confirm, but I'm not too familiar with Lerna's code base, so I'm just Ctrl+fing my way through the files.. As an update, I was able to get my desired behavior, but part of the fix was that I had to disable the semver check because I was going from 0.X.X to 1.0.0-beta.X.\nBasically, I changed this line https://github.com/lerna/lerna/blob/v2.0.0/src/PackageGraph.js#L36 to merge the dependencies and peerDependencies objects when in depsOnly mode. Then I removed the semver check from this line https://github.com/lerna/lerna/blob/v2.0.0/src/PackageGraph.js#L44 so that I could ensure that all of my dependencies get updated (if I didn't do this, then the ref count would be incorrect and the order would be wrong). \nThe second part of my fix is definitely hacky, but I'm not sure if there is a built-in way to force dependency updates when bumping major versions. That isn't something that happens often, and perhaps I'm just using Lerna incorrectly, but it was something that I had hoped to be automated. I can understand why it wouldn't be, though.. Another addendum: I actually had an incomplete solution before. I also had to add peerDependencies to the allDependencies object. I'm actually a little bit confused now because in PublishCommand.js, the peerDependencies are definitely updated (source), but they are never added to the PackageGraphNode for a package.... Thanks for the outline in the issue. You made it so simple that I would have felt guilty not submitting a PR!. @tanhauhau my issue isn't with publishing, but with running example packages.\nFor example, I have this example package. On the master branch, I hard code the dependencies so that the example can be run on CodeSandbox.\nIn the dev branch, the dependencies use file specifiers, which result in errors on CodeSandbox.\n. I am under the impression that one of the reasons to use file specifiers is that they make lerna bootstrap unnecessary. I suppose that a hybrid approach could work, but I appreciate the simplicity of having everything work with just an npm install in dev.. I suppose that not knowing what the \"right\" answer is is what is holding me back. It feels odd to me to use a mix of file specifiers and bootstrapping, but maybe I just have an odd setup.. ",
    "myfairsyer": "How is atlassian/cz-lerna-changelog (not) related and/or relevant to this?. ",
    "Tapppi": "@bcoe This is awesome, I think enabling a workflow as easy as standard-version is for regular repos for individual mode would be a big thing. E.g. this is a blocker in our organisations move to lerna repos.. I'll definitely try to help with reviews / PR's as much as I have time (or at least lurk around leaving comments \ud83d\ude0a ).. ",
    "bestander": "FYI, I have created a task in Yarn where I aggregate the progress on Yarn workspaces and related PRs, RFC and discussions https://github.com/yarnpkg/yarn/issues/3294. Probably the reason is in https://github.com/lerna/lerna/blob/master/src/NpmUtilities.js#L66.\nI assume that lerna is running more than one node_modules installation in parallel.\nYarn may fail if it runs yarn install in multiple processes because they may be reading/writing to common cache folder.\nA way around is to run yarn with --mutex network option. \nBut be mindful to run with a non default port otherwise top level Yarn with --mutex network will never allow this script to start.. @hzoo @evocateur this is ready for review.. @Bnaya we are turning it on for jest here https://github.com/facebook/jest/pull/3906.\nWaiting for yarn 0.27 to become stable\n. Yes, 0.27 is out and marked as stable.\nWaiting for a review and merge please. Thanks @evocateur, no need to apologize.. @evocateur, I've switched to --use-workspaces and tested that it works as a CLI config as well.\n. I don't think my PR is responsible for appveyor fail. Thanks a lot, guys!. @jquense, might be a bug in Yarn.\nFile an issues there, we'll resolve it.. Thanks, @jquense.\nFeel free to raise issues in https://github.com/yarnpkg/yarn/issues with repro steps and ping me.. This is an issue with Yarn, this issue can be closed. ok. ok. ok. Yep, workspaces feature in Yarn creates symlinks in node_modules.\nIt also treats all workspaces as one installation, so it would hoist symlinks to the root node_modules unless there is a conflict, e.g. jest@next might be using jest-cli@stable in the root.. Not yet, I'll work on it in the next 3-4 weeks.. Yarn does not have a default (PR welcome ;), so it would boom there if this setting is missing.\nThere is a comment about package.json/workspaces being used instead of packages https://github.com/lerna/lerna#--use-workspaces. ",
    "AlexLandau": "Some more notes on the motivation here:\n\n\nWe use a setup in which the publish happens on CI machines, not developer machines, and git push of the relevant tags is handled manually. This is much easier with annotated tags, where --follow-tags can be used. (In particular, git can be configured to use this option automatically on every push, a feature we already take advantage of for our single-package repositories.)\n\n\nAccording to the git-tag documentation, \"Annotated tags are meant for release while lightweight tags are meant for private or temporary object labels\".\n\n\n52 and #54 suggest that --follow-tags was intended to be used for pushing tags, but they didn't notice that it only applied to annotated tags. It may be possible to return to that approach after this commit, but I'd rather not be responsible for testing that, given our non-standard workflows..\n\n",
    "marcus-sa": "Anyone who got a solution for this? Pretty much stuck at it.. Anyone who got a solution for this? Pretty much stuck at it.. ",
    "jppurcell9": "Thanks for the quick response.  I noticed https://github.com/yarnpkg/yarn/issues/877 over in the yarn repo with some ideas on implementing --global-style, but it looks like it would not be a quick fix.. I started implementing an approach that might work for both npm and yarn clients in the PR referenced above.  Still a work in progress and feedback would be appreciated.  Here's the basic idea - install leaf deps into a \"shadow\" directory:\n.\n\u251c\u2500\u2500 node_modules\n\u2502   \u2514\u2500\u2500 lodash@4\n\u2514\u2500\u2500 my-package\n    \u2514\u2500\u2500 node_modules\n        \u2514\u2500\u2500 _node_modules\n            \u2514\u2500\u2500 node_modules\n                \u251c\u2500\u2500 lodash@3\n                \u2514\u2500\u2500 uses-old-lodash\nThen move any named deps back into the node_modules dir:\n.\n\u251c\u2500\u2500 node_modules\n\u2502   \u2514\u2500\u2500 lodash@4\n\u2514\u2500\u2500 my-package\n    \u2514\u2500\u2500 node_modules\n        \u251c\u2500\u2500 _node_modules\n        \u2502   \u2514\u2500\u2500 node_modules\n        \u2502       \u2514\u2500\u2500 lodash@3\n        \u2514\u2500\u2500 uses-old-lodash\nAnd finally symlink the shadow node_modules back into the dep:\n.\n\u251c\u2500\u2500 node_modules\n\u2502   \u2514\u2500\u2500 lodash@4\n\u2514\u2500\u2500 my-package\n    \u2514\u2500\u2500 node_modules\n        \u251c\u2500\u2500 _node_modules\n        \u2502   \u2514\u2500\u2500 node_modules\n        \u2502       \u2514\u2500\u2500 lodash@3\n        \u2514\u2500\u2500 uses-old-lodash\n            \u2514\u2500\u2500 node_modules -> ../_node_modules/node_modules. Agreed - and getting this right (not just this proof of concept) is going to be even more complicated.  I'll close this and try again with --global-style.. Nice work @ricky, thanks for the fix!. ",
    "ryancole": "@evocateur it outputs 12. @evocateur that seems to work. with no-sort, all of my watch scripts now run.. I wanted to swing back around and mention that I don't actually think the --no-sort has resolved the issue. \nEven with --no-sort I have experienced some scripts just simply not running. Without --no-sort, at all, it only ever runs 2 concurrent scripts. With --no-sort, it will sometimes run all of my scripts (4) and other times it might only run 3. Although, I've never seen it run less than 3 with --no-sort.\nFor the time being, I've just chosen to get rid of several of these watch scripts, because they're not absolutely necessary. But, I do think that if the intention is for this to be capable of running several blocking scripts at once, such as watch script, then this might still be a bug somewhere.. Got it. Thanks @gigabo, that answers my question!. I think this just seems to be the case for dependency hierarchies within your (my) lerna repo, in general. I was about to make my own issue, but I saw this at the top and it seems to be the same issue, or at least related.\nIn my case, I've got several packages within my lerna repo. I've got a package that is sort of a common package and is a dependency to some of my other packages. Finally, I've got a single package that depends on a package that depends on that common base package. So, it looks something like this ...\n\nPackage A\nPackage B\nDepends on Package A\nPackage C\nDepends on Package B\n\nIn the node_modules for Package C, you will find Package B sym linked, but not Package A or its dependencies.. @evocateur Correct, Package C never directly requires/imports Package A.\nHmm, alright. If it's supposed to be working, let me see if I can definitely rule this out as an issue made by myself. If I can't do so within my current project's code, I'll probably need to see if I can reproduce the issue in a sample repo.\nPerhaps @austinh can provide input on his configuration so that we can cross compare and see if it sounds similar to mine.. ",
    "jbovenschen": "For me this still happens at the -2.0.0-rc.4. Any idea what is causing this?\nOr is there anything I can do to resolve this issue?. Sorry someone else did it before me. So i'm closing this PR.. ",
    "shilman": "Still seeing this issue with lerna@2.2.0 in the Storybook repo. Our publish process is documented here, and we'd love to use yarn across the board, but for now we need to revert to npm for this step.. @evocateur updated per your comments! thanks!. ",
    "jarzuaga": "I'm on lerna@2.8.0 and still see this issue. Any news on getting a fix in?. ",
    "dszakallas": "@noherczeg No that didn't work. The problem I face is with the symlinking of internal dependencies, and this seems to hoist external ones.\n@ryancole similar situation for me:\nPackage A depends on B and C\nPackage B peerDepends on C\nResult:\nB symlinked into A's modules\nC copied into A's modules\nHowever my problem is no matter C is symlinked or not, it cannot be resolved when B tries to load it. As for now I use a workaround (for browserify) that actually works if C is copied instead of symlinked, but neither will work in node.\nI have another problem, I don't know if it is related or I should create a separate issue for this.\nI have actually multiple version of Cs:\nPackage A1 depends on B and C@1\nPackage B peerDepends on C@*\nPackage A2 depends on B and C@2\nPackage B peerDepends on C@*\nLerna can resolve only one version. C@1 simply won't be copied/symlinked into A1.\nHere's the repo. In this state, it works (using mentioned workaround) with browserify. \nHowever after changing these lines 1, 2 to properly reference the corresponding dependencies by versions instead of filepaths \"1.0.0\", \"2.0.0\", only one of them will be installed (for me \"2.0.0\"). The package that depends on the other version, won't have it installed.\nI guess lerna can't manage to resolve multiple versions of the same package simultaneously in the same project.. ",
    "austinh": "+1 same here. ",
    "jacarma": "It's happening to me too. While I was using yarn links it worked because yarn install on C installed A inside the node_modules of C.\nI think there could be a problem in my webpack configuration that prevents the module A to be available in C when A is not in node_modules of C (it is in B/node_modules which is linked in C/node_modules). ",
    "jspears": "I hacked a thing to fix this problem.\nlerna-relinker\nWasn't sure if it was \"correct\" or not, but definitely annoying.. ",
    "danderson00": "This is still broken. @evocateur - what are you talking about when you mention \"myriad build tools\"? No other build tools were mentioned in this issue.. Ahh interesting, I was not aware of this. It looks much like I envisaged the sort of primitives that are required, I'll be trying this out very soon. npm seems to have gotten worse since npm install now removes any existing symlinks (since v5 I think?), but this may be enough to relieve my pain and shut me up :) Many thanks for pointing it out!. Not sure what you're suggesting. What should I / my organization contribute a fix for? The lack of support for monorepos in npm?\nRegardless, that's great news. Thank you for sharing.. Not sure what you're suggesting. What should I / my organization contribute a fix for? The lack of support for monorepos in npm?\nRegardless, that's great news. Thank you for sharing.. Unfortunately, I'm not able to reproduce either issue. Previously, lerna add was adding all packages as dependencies of each other, but on a quick test, it's no longer doing that. The second issue was resolved by deleting all node_modules folders and running lerna bootstrap. The package was then linked correctly, and I'm unable to repro again. Sorry I can't provide more detail.\nPlease don't feel that this was an attack on lerna - you do awesome work that the community wholeheartedly appreciates, even if sometimes we don't seem to. Thank you!. ",
    "vanesyan": "Yeah, I passing --skip-git as I don't want to publish tags for each package. Okay, as I understand now I need to publish tags to make lerna works as correctly?. Okay, thanks. But maybe, we can make lerna a bit more flexible, to trying diff against last pushed commits?. Okay, understand the idea :) Thanks, feel free to close the issue.. ",
    "peggyrayzis": "\nWe can do better than this, methinks. Would a prompt for \"Location of packages?\" (when not already defined) that defaults to \"./packages\" be helpful?\n\nThat sounds reasonable to me! \ud83d\ude00 . @evocateur \ud83d\ude4b I appreciate all the hard work you all have put in toward this project, so I'll take care of this issue. We're loving lerna so far at nteract and Major League Soccer.. ",
    "Krizzu": "Hey,\nIs this issue still to grab? . OS Sierra 10.12.4\nSame issue, even with running sudo. ",
    "jwineman": "We ran into this exact issue at Cloudflare with CF-UI.  Im in favor of renaming it.. ",
    "tajo": "Can you please come up with some specific examples? \nTwo libs A and B where B is a dep of A: \n1. What happens for minor bumps of B with the flag?\n2. What happens for minor bumps of B without the flag?\n3. What happens for major bumps of B with the flag? \n4. What happens for minor bumps of B without the flag? \nMore I read about this, more confused I am.. ",
    "wyuenho": "In cf-ui, the packages are versioned independently. There's a graph of dependencies where updating one package often leads to whatever requires that to update, and whatever else requires that thing that requires that package you've changed and so on. Not using --only-explicit-updates often leads to more publishing errors in the case where someone accidentally bumped to a wrong version number on a dependee (what's the right word?) package, publishing that package, only then later find out that package wasn't ready to be published. So now 20 git tags and a few commits later, everyone's moaning about it's a PITA to roll back to the previous git state and still can't unpublish.\nThis is actually a very useful flag that prevents a lot of headache.\nIt would be nice if someone could give me an example of why this flag might be a bad idea in some circumstances.. > alerted to the fact that you were updating more packages than you intended\nI'm not sure what this means. Correct me if I'm wrong, but a major version bump causes a cascade of dependee (sic) updates and I don't recall a way to tell lerna to skip those I really don't want to publish. Is there a way in lerna to NOT insist on publishing a package other than --only-explicit-updates that I'm not aware of?. AFAICT --scope and --ignore do not work for lerna updated and lerna publish. They only work for run, exec, clean, ls and bootstrap.\n\nThe only time you should ever disable this behavior is when you want to manually pin a dependency to an older version of a package. The only time you should want to do that is when you've made a breaking change and don't want to update everywhere yet.\n\nThat. This actually happens quite a lot when there is a lot of independent development going on where team members all need changes on different packages quickly. An all-or-nothing approach does not work for this style of development. The only way to publish a set of packages minus a few is to manually go in to the individual packages and type npm publish. This will of course still mess up lerna the next time around. There doesn't exist anything else that works for us except this wonderful feature.. This case comes up from time to time:\n\nModule A1.0 depends on C^1.0\nModule B in your app depends on A^1.0 and C==1.0\nC introduce a breaking change for coworker foo, bumps to v2.0\nLerna publish bumps version of module a, the code that fixes the breaking change only qualifies as a minor update, so the module A1.1 and C2.0 go out\nThere are now 2 versions of module C, one for the app, another for module A, dedupe in any npm or yarn version won't work.\n\nThe only way to deal with this is really to pin to A@1.0 or update the app code to use C^2.0. But if module A also has something a release needs, the only option is to go fix the code to use C^2.0, which may push back the release for some time.\nIt would be nice if this feature is preserved, but we can try to adjust if you don't.. > if you make a breaking change in one package that is a dependency you make a breaking change in all of them \nSo if the dep graph is A->B->C, if I bump C's major, the assumption in Lerna is B also might break, and we should bump B's major, and all packages that depend on B, and A, and all packages in the repo that depend on A?\nI'm very confused. What's the point of allowing independent versions at all if we can't publish independently?. It seems to me the problem is as James said, the symlinks and the fact that Lerna doesn't have any notions of \"state snapshots\" across publish events. Any invariant assumption violation confuses Lerna and makes recovery even more of a headache.\nJust a last question, what's the exact behavior of --force-publish? Using the case here, if I force publish the C2.0 only, what would happen the next time I run lerna publish ?. ",
    "ChristianUlbrich": "I'd also like to chime in, I am having similar issues and a similar build chain as well (maven in docker container running npm with maven-frontend-plugin) and a bind-mounted volume. On macOS everything of course works, however we get errors on Windows 10 with Docker Native. First set of problems was, rather trivial; Git was setup (as is the default), that LineEndings were normalized i.e. turned into CRLF on Windows, which caused npm not being found (because I guess feeding a dockerized Linux shell scripts with CRLF is no good). Second problem was, that we versioned the whole node_modules hierarchy in the repo... and we forgot about symlinks! By default symlinks are not enabled for Git on Windows (but they can, if you are admin have Windows 7+).\nSo if your problems are occuring on windows make sure, you have proper line endings and symlinks enabled... :). ",
    "rayrutjes": "I've experienced random failures as well with Yarn as NPM client.\nEven when not running in CI.\nIn general, lerna clean && learn bootstrap solves the issue.. Thanks a lot for the quick answer @evocateur .\nFYI I also had to use the --no-sort parameter in combination  of the 2 others.\nIt works now ;). ",
    "rcline": "I too am having problems adapting to the consistent updating of dependency minor and patch versions in package.json files.  And though I agree that \"Versions are cheap\", the fallout of not letting semver ranges pull in the correct version is non-trivial developer time spent keeping everything up-to-date.\nHas anyone move past this in some way that has not been said in thread?\nThank you all!. @evocateur Thank you for the quick response and the link!\nThat link lead me to Issue # https://github.com/lerna/lerna/issues/718 which I had not seen when searching.  This is my exact issue that causes bloat leading to git conflicts in package.json files that are not cheap to fix after every release.. ",
    "roytz": "@evocateur thanks for the detailed answer!\nI decided to put my packages on the root (for now). They are all private (packge.json -> private:true). I ran lerna bootstrap and it indicated that the 3 packages were added but then when I try to do require('Package2') from a file inside Package1 I get an error saying it doesn't recognize Package2. My lerna.json file and project structure are the same as I posted on my example above. What am I doing wrong?. Thank you @evocateur !! I'll be home soon and try your solution.\nBy the way, what did you mean about \"why using lerna if all of my packages are private\"?\nThe thing is, I wrote some packages which in some cases use one another but I want the ability to upload them independently (maybe even to different servers).\nI want something that will help me to \"connect\" between those packages on my development environment (but not using relative path, if possible) and on production (maybe by using git url).. @evocateur thank for all the detailed answers! you're not being preachy at all and I really appreciate your willing to help.\nWhat do you suggest for case as mine? I have multiple directories on my project (such as 'client', 'server', 'utils' etc.) each of them has its own package.json and everything. I want to be able to deploy them separately when needed but I also have dependencies between some of them (for example, 'server' uses 'utils').\nWhat do you think would be the best solution for my dev env and prod env to link between those packages? Maybe I misunderstood lerna and I shouldn't use it for my case.. @evocateur do you have any idea what can I do/use?. ",
    "shai32": "@evocateur \ncan we we use lerna with private modules?\nActually I prefer using the pirvate git\nhttp://fiznool.com/blog/2015/05/20/an-alternative-to-npm-private-modules/\nit will be wonderful  if lerna will support using private repo\nmeaning I can write down \n    \"private-parts\": \"git@bitbucket.org:bigbluebananas/private-parts.git#v1.0.0\"\nin package json.\nIn this way, it will work when we deploy to herku (or any other PaaS service)\nand also lerna will use the tag #v1.0.0\" to manage dev linking between packages.. @evocateur Do you know of an alternative to lerna that solve the linking issues without publishing to npm?. ",
    "wvbe": "I've tried to go the same route with lerna (not publishing any packages yet), because:\n- I would like to avoid tedious '../my-package', '../../my-package' and '../../../my-package' imports in code\n- I would like to track dependencies of each individual package, rather than one monolithic package.json with everything\n- I have no private registry set up yet, but intend to publish in the distant future\nFrom reading this issue/question I'm not quite sure if my attempt is quite the same as the OP's. My packages all have the dependencies that are from the same lerna repo defined in package.json as such (packages/some-other-package/package.json):\n\"dependencies\": {\n    \"my-package\": \"../my-package\"\n}\nGranted I need lerna's symlinking the most, but keeping the versions in sync is also quite nice because I would ideally allow any of the modules to report its own version number in error logs etc.\nInstalling any of the modules through npm (without lerna) works fine. Installing all of them through lerna bootstrap yields the following error (where \"fsds\" is my project name):\nlerna info version 2.0.0-rc.4\nlerna info Bootstrapping 11 packages\nlerna info lifecycle preinstall\nlerna info Installing external dependencies\nlerna ERR! execute Error: Command failed: npm install\nlerna ERR! execute npm ERR! addLocal Could not install /git/fsds/packages/fsds-util\nSome external dependencies are now installed, but nothing from my lerna project.. lerna bootstrap actually started working for me after bumping all versions from 0.0.0 to 0.0.1.. ",
    "kevinpumpup": "@evocateur Yes it is reproduced with lerna@canary.. @arcticShadow I just tried again with https://github.com/kevinpumpup/lerna-example and could reproduce the problem.  Basically this is what I did.\n```\ngit pull\ngit clean -fdx\nyarn\nexport NODE_ENV=production\nlerna bootstrap\nls packages/foo/node_modules/\nlots of packages..\n```\nAre you getting different results?. ",
    "arcticShadow": "Just spent all morning trying to get a CI build to run - this was the issue. I'll see if i can PR.. This is super strange. I am unable to reproduce the issue. Because, as @evocateur suggested, child_process.spawn defaults env to process.env if nothing is provided. \nAll I can determine is that something somewhere is introducing an object to env that is causing the defaults to not be used. although i've traced all the code on master and have not found anything introducing new vars. ill try on the lastest tagged (which is where my problem originated. \n. I went round and round in circles for a while on this. My resolution is that Lerna does pass all environment variables through to the resulting npm process. \nMy specific case was that i was trying to update the PATH, but I was calling lerna via a script, which included nvm run -  which mutates the path to ensure you use the correct version of node. - so my PATH mutation was happening, but was never the priority. Other env vars were being passed just fine. \n@kevinpumpup Is it possibly your environment (as it was mine) that is stopping things working?. ... no - im getting the same results as you Now i'm really confused. \nbut heres the super weird part. \nIf I add a PATH modifier to the script as well, making a directory continaing an executable 'npm' script the priority - lerna uses my script. The sole responsibility is to dump out the var's of my script. And, NODE_ENV is there, and set to production. . i.e run lerna like PATH=<full_path_to_your_npm_script_dir>:$PATH NODE_ENV=production lerna bootstrap\nand have a directory contiang a file called npm (make sure to chmod +x that your npm file)\nNPM script:\n```bash\n!/bin/bash\ndate > testfile.txt\nenv >> testfile.txt\necho \"Done installing, (NOT :-) )\"\nexit 1\n```\nThe exit 1 at the end if to make lerna through an error, so you can clearly see when your  custom npm script has run and when it has not. \nAnd the output file will be in the packages/foo directory, as the is where 'npm' runs from. \n. There is something super strange here. And I have no more patience to figure it out. \nI have identified that, \n running lerna master, hacking --produciton into the npm install command still installs dev deps. \n As far as I can tell, there is no extra info being passed to the spawned npm command that runs the install. \nI would love if someone figured this out. . I made the same mistake :-D i.e. jumped in with a P.R. then found out it was already working.. ",
    "nikku": "I've filed #1113 that should fix the issue and reliably pass process.env down to sub commands.. NODE_ENV=foobar lerna ... should work now. At least as of my comment mid November.. Test timeout locally but pass on CI.. Please re-read my PR description. What I'd personally like to accomplish is passing down environment variables to npm scripts invoked via lerna run <scriptname>:\nTEST_BROWSERS=Chrome lerna run test. I've reinstalled the current version of lerna. As you mentioned it fixes the issue.. ",
    "else": "So, what is the expected way to bootstrap a monorepo for a production release which should not carry dev dependencies? Do I understand it correctly that currently there's no way to do this?. Thanks for the heads-up; it helped understanding the scope of lerna.. ",
    "fc": "Ah, this is a dupe of #521. Thanks for your response!\nAre you open to the possibility of this kind of behavior? I haven't looked in-depth yet into the complexity that may be involved to achieve it but in my testing it seems like it is close to possible.\nWhile using git dependencies would certainly work, it's less ideal.\nWould you open to the possibility of a PR for it?  Rather then hacking it into the existing code, I'd see it more as a plugin or module for resolving dependencies.\nAlso, am I the only one who has sought this desired behavior? haha\nThoughts?. ",
    "jameslnewell": "@evocateur I've thrown together some tests and moved the code into the specific commands (meaning there's now some duplication). Let me know if you'd like me to change anything else.. @evocateur The tests are all passing but npm is getting an exit status of 0 on node v4 without any visible error. How can I re-run the tests or debug what's going wrong?. The failures in node v4 appear to be in the ChildProcessUtilities.js which I haven't touched???\n```\n PASS  test/ChildProcessUtilities.js\n  \u25cf Console\nconsole.error node_modules/core-js/modules/es6.promise.js:117\n  Unhandled promise rejection { [Error: stdout maxBuffer exceeded] stream: 'stdout' }\nconsole.error node_modules/core-js/modules/es6.promise.js:117\n  Unhandled promise rejection { [Error: spawn nowImTheModelOfAModernMajorGeneral ENOENT]\n    code: 'ENOENT',\n    errno: 'ENOENT',\n    syscall: 'spawn nowImTheModelOfAModernMajorGeneral',\n    path: 'nowImTheModelOfAModernMajorGeneral',\n    spawnargs: [],\n    killed: false,\n    stdout: '',\n    stderr: '',\n    failed: true,\n    signal: null,\n    cmd: 'nowImTheModelOfAModernMajorGeneral',\n    timedOut: false }\nconsole.error node_modules/core-js/modules/es6.promise.js:117\n  Unhandled promise rejection { [Error: spawn theVeneratedVirginianVeteranWhoseMenAreAll ENOENT]\n    code: 'ENOENT',\n    errno: 'ENOENT',\n    syscall: 'spawn theVeneratedVirginianVeteranWhoseMenAreAll',\n    path: 'theVeneratedVirginianVeteranWhoseMenAreAll',\n    spawnargs: [],\n    killed: false,\n    stdout: '',\n    stderr: '',\n    failed: true,\n    signal: null,\n    cmd: 'theVeneratedVirginianVeteranWhoseMenAreAll',\n    timedOut: false }\n\n```\nEdit: @evocateur I get those same errors on master in node v4. hey @evocateur anything I can do to get this merged?. Looks like it'll also work for clean, ls and bootstrap however I can move the logic to a utility fn and call it separately in exec and run if you prefer.. \ud83d\ude0e  will refactor. Taking the whole command here feels a bit gross, but couldn't think of an alternative.. \u263a\ufe0f . \ud83d\ude31. ",
    "benoj": "Is this still in the project? Don't see this in the README anymore and it is just what I am looking for!. Ridiculously simple error - drained hours of time... whoops. ",
    "jmcpeak": "So if the -B flag is added (https://git-scm.com/docs/git-format-patch#git-format-patch) a lot more information is outputted. \nApplying: Get unit tests working and cleaned up Have the angular code follow controllerAs and bindToController syntax\nUsing index info to reconstruct a base tree...\nFalling back to patching base and 3-way merge...\nAuto-merging packages/document-ui/gulp/tasks/inject.js\nCONFLICT (content): Merge conflict in packages/document-ui/gulp/tasks/inject.js\nPatch failed at 0001 Get unit tests working and cleaned up Have the angular code follow controllerAs and bindToController syntax\nThe copy of the patch that failed is found in: .git/rebase-apply/patch\nWhen you have resolved this problem, run \"git am --continue\".\nIf you prefer to skip this patch, run \"git am --skip\" instead.\nTo restore the original branch and stop patching, run \"git am --abort\".. ",
    "dmaksimovic": "I added a pull request https://github.com/lerna/lerna/pull/1019 that fixes this issue.. I think this issue can be closed as fixed since pull request #1019 was merged. I think the AppVeyor build is failing for its own reasons. I don't see any relationship of its output to my changes. Can somebody have a look at this change please? It's been 7 days now, I'd appreciate some feedback. Cheers!. No worries, it was my pleasure. Changes applied as requested. ",
    "koddsson": "@evocateur No worries!\nIs there a way you can think of that I can achieve what I want in lerna (which is just getting the package diff when selecting the version) or should I just hack together a bash command?. I'm actually not sure I can do this in a bash script. There's stuff I'd need to do like --no-pager so I can print the git diff output but maybe I can add those options to the diff command.\nBut maybe I'm the only one that wants this flag \ud83d\ude05. Yeah I think that's probably the most simple solution. I'll close this, thanks for your time!. So can I use that to check for updates programmicly? Only thing I can think of is doing something like: ! ./node_modules/.bin/lerna updated && ./node_modules/.bin/lerna publish but it seems that lerna updated returns a 0 exit code if something has updated or not.\n\u2601  apis [new-infra] \u26a1 ./node_modules/.bin/lerna updated\nlerna info version 2.0.0-rc.4\nlerna info Checking for updated packages...\nlerna info Comparing with tag v1.0.5\nlerna info result\n- @apis/car\n\u2601  apis [new-infra] \u26a1 echo $?\n0\n\u2601  apis [new-infra] \u26a1\n```\n\u2601  apis [new-infra] ./node_modules/.bin/lerna updated\nlerna info version 2.0.0-rc.4\nlerna info Checking for updated packages...\nlerna info Comparing with tag v1.0.5\nlerna info result\n\u2601  apis [new-infra] echo $?\n0\n\u2601  apis [new-infra]\n```\n(Sorry if this is something blatantly obvious). Cool! I'll try to take a stab at this :). @evocateur Mind if I throw some questions at you to help me move forward with this? I've got a couple of things I want to achieve.\n\n\nRight now I have a branch where I simply check if there are any packages to update in the updated command and call the callback with a error if there are no packages. I kind of want to not throw an error but just exit non-zero like you mentioned but am not sure how I'd go about it. Is there any way to do it right now or do I have to add some more options to the callback to achieve it?\n\n\nI'm trying to write a test for the publish command when there are no packages that need updating but all the fixtures I've checked out so far seem to have some changes already. Any good way for me to create a new fixture that have no changes so I can write a test for the publish command?\n\n\nThanks in advance! (I can also create a PR and discuss all this there if that's better).. Actually in a true person asking a question fashion, I figured out how I can change the exit code without throwing an error, I'll add that to my branch but am still trying to figure out the second thing \ud83d\ude04 \n. Cool! I'll open up the PR soon\u2122 and will ping you there if I run into any problems :). @evocateur I just noticed that you added some commits. I imagine managing a project like Lerna gets super hectic so if you need any more changes to this you can always ping me with what needs to change and I can get on it fairly quick (BST timezone tho \ud83c\uddec\ud83c\udde7 )!\nExcited for this to land \u2728. ",
    "krainboltgreene": "Your first publish should be at a minimum 1.0.0.. Your first publish should be at a minimum 1.0.0.. Ah, gotcha. I have no idea.. Ah, gotcha. I have no idea.. I now see what you mean @mAAdhaTTah.\nHonestly publish should not trigger a version as that's not how npm works and npm is a very relatable tool.. A good example of this @evocateur is if npm fails to publish (Like with scoped packages, as they require an extra --access=public flag).. 1. I don't always want to publish something and lerna isn't always correct about the difference between published and local.\n2. Sometimes I want to publish X before Y.\n3. Not all projects start using lerna, so lerna being trusted with tags wont always work.\n4. If lerna is going to force me to publish all packages, I absolutely need to know the diff so that I can accurately determine if one of my 50 packages needs to be patch, minor, or major.. So because I accidentally already had a tag at a version I just lost 15 minutes of work D:\n```\n| lerna publish\nlerna info version 2.0.0-rc.5\nlerna info versioning independent\nlerna info Checking for updated packages...\nlerna info Comparing with tag @unction/allobjectp@1.0.4\n? Select a new version for @unction/allobjectp (currently 1.0.3) Patch (1.0.4)\n? Select a new version for @unction/allp (currently 1.0.0) Patch (1.0.1)\n? Select a new version for @unction/append (currently 0.0.0) Major (1.0.0)\n? Select a new version for @unction/appendm (currently 1.0.0) Patch (1.0.1)\n? Select a new version for @unction/aside (currently 1.0.0) Patch (1.0.1)\n? Select a new version for @unction/attach (currently 0.0.0) Major (1.0.0)\n? Select a new version for @unction/catchp (currently 1.0.0) Patch (1.0.1)\n? Select a new version for @unction/compact (currently 1.0.0) Patch (1.0.1)\n? Select a new version for @unction/computedprop (currently 1.0.3) Patch (1.0.4)\n? Select a new version for @unction/couple (currently 1.0.1) Patch (1.0.2)\n? Select a new version for @unction/endswith (currently 1.0.0) Patch (1.0.1)\n? Select a new version for @unction/everyp (currently 0.0.0) Major (1.0.0)\n? Select a new version for @unction/flattentree (currently 0.0.0) Major (1.0.0)\n? Select a new version for @unction/foreach (currently 1.0.1) Patch (1.0.2)\n? Select a new version for @unction/hammer (currently 2.0.1) Minor (2.1.0)\n? Select a new version for @unction/isarray (currently 1.0.0) Patch (1.0.1)\n? Select a new version for @unction/isiterable (currently 1.0.1) Patch (1.0.2)\n? Select a new version for @unction/isobject (currently 1.0.0) Patch (1.0.1)\n? Select a new version for @unction/ispopulated (currently 2.0.0) Patch (2.0.1)\n? Select a new version for @unction/ispresent (currently 1.0.0) Minor (1.1.0)\n? Select a new version for @unction/istype (currently 1.0.1) Patch (1.0.2)\n? Select a new version for @unction/lackstext (currently 1.0.0) Minor (1.1.0)\n? Select a new version for @unction/mapkeys (currently 1.0.3) Major (2.0.0)\n? Select a new version for @unction/mapkeyswithvaluekey (currently 0.0.0) Major (1.0.0)\n? Select a new version for @unction/mapvalues (currently 1.0.4) Major (2.0.0)\n? Select a new version for @unction/mapvalueswithvaluekey (currently 0.0.0) Major (1.0.0)\n? Select a new version for @unction/mergedeepleft (currently 2.0.1) Minor (2.1.0)\n? Select a new version for @unction/mergedeepright (currently 1.0.4) Minor (1.1.0)\n? Select a new version for @unction/mergeleft (currently 0.0.0) Major (1.0.0)\n? Select a new version for @unction/mergeright (currently 0.0.0) Major (1.0.0)\n? Select a new version for @unction/mergewith (currently 2.0.1) Major (3.0.0)\n? Select a new version for @unction/mergewithkey (currently 1.0.1) Major (2.0.0)\n? Select a new version for @unction/nestedapply (currently 2.1.1) Patch (2.1.2)\n? Select a new version for @unction/nestedobjof (currently 1.0.0) Minor (1.1.0)\n? Select a new version for @unction/optimisticp (currently 1.0.1) Patch (1.0.2)\n? Select a new version for @unction/pairskeys (currently 1.0.0) Patch (1.0.1)\n? Select a new version for @unction/pairsvalues (currently 1.0.0) Patch (1.0.1)\n? Select a new version for @unction/pluck (currently 0.0.0) Major (1.0.0)\n? Select a new version for @unction/plucks (currently 0.0.0) Major (1.0.0)\n? Select a new version for @unction/prepend (currently 0.0.0) Major (1.0.0)\n? Select a new version for @unction/reducevalues (currently 1.0.4) Minor (1.1.0)\n? Select a new version for @unction/reducewithvaluekey (currently 1.0.3) Major (2.0.0)\n? Select a new version for @unction/rejectp (currently 1.0.0) Patch (1.0.1)\n? Select a new version for @unction/resolvep (currently 1.0.0) Patch (1.0.1)\n? Select a new version for @unction/sample (currently 1.0.1) Patch (1.0.2)\n? Select a new version for @unction/samplesize (currently 1.0.0) Patch (1.0.1)\n? Select a new version for @unction/shuffle (currently 1.0.0) Patch (1.0.1)\n? Select a new version for @unction/startswith (currently 1.0.0) Patch (1.0.1)\n? Select a new version for @unction/thencatchp (currently 1.0.0) Patch (1.0.1)\n? Select a new version for @unction/thenp (currently 1.0.0) Patch (1.0.1)\n? Select a new version for @unction/thrush (currently 1.0.1) Patch (1.0.2)\n? Select a new version for @unction/treeify (currently 1.0.9) Minor (1.1.0)\n? Select a new version for @unction/upto (currently 2.0.0) Patch (2.0.1)\n? Select a new version for @unction/withoutkeyrecursive (currently 1.1.1) Patch (1.1.2)\nChanges:\n - @unction/allobjectp: 1.0.3 => 1.0.4\n - @unction/allp: 1.0.0 => 1.0.1\n - @unction/append: 0.0.0 => 1.0.0\n - @unction/appendm: 1.0.0 => 1.0.1\n - @unction/aside: 1.0.0 => 1.0.1\n - @unction/attach: 0.0.0 => 1.0.0\n - @unction/catchp: 1.0.0 => 1.0.1\n - @unction/compact: 1.0.0 => 1.0.1\n - @unction/computedprop: 1.0.3 => 1.0.4\n - @unction/couple: 1.0.1 => 1.0.2\n - @unction/endswith: 1.0.0 => 1.0.1\n - @unction/everyp: 0.0.0 => 1.0.0\n - @unction/flattentree: 0.0.0 => 1.0.0\n - @unction/foreach: 1.0.1 => 1.0.2\n - @unction/hammer: 2.0.1 => 2.1.0\n - @unction/isarray: 1.0.0 => 1.0.1\n - @unction/isiterable: 1.0.1 => 1.0.2\n - @unction/isobject: 1.0.0 => 1.0.1\n - @unction/ispopulated: 2.0.0 => 2.0.1\n - @unction/ispresent: 1.0.0 => 1.1.0\n - @unction/istype: 1.0.1 => 1.0.2\n - @unction/lackstext: 1.0.0 => 1.1.0\n - @unction/mapkeys: 1.0.3 => 2.0.0\n - @unction/mapkeyswithvaluekey: 0.0.0 => 1.0.0\n - @unction/mapvalues: 1.0.4 => 2.0.0\n - @unction/mapvalueswithvaluekey: 0.0.0 => 1.0.0\n - @unction/mergedeepleft: 2.0.1 => 2.1.0\n - @unction/mergedeepright: 1.0.4 => 1.1.0\n - @unction/mergeleft: 0.0.0 => 1.0.0\n - @unction/mergeright: 0.0.0 => 1.0.0\n - @unction/mergewith: 2.0.1 => 3.0.0\n - @unction/mergewithkey: 1.0.1 => 2.0.0\n - @unction/nestedapply: 2.1.1 => 2.1.2\n - @unction/nestedobjof: 1.0.0 => 1.1.0\n - @unction/optimisticp: 1.0.1 => 1.0.2\n - @unction/pairskeys: 1.0.0 => 1.0.1\n - @unction/pairsvalues: 1.0.0 => 1.0.1\n - @unction/pluck: 0.0.0 => 1.0.0\n - @unction/plucks: 0.0.0 => 1.0.0\n - @unction/prepend: 0.0.0 => 1.0.0\n - @unction/reducevalues: 1.0.4 => 1.1.0\n - @unction/reducewithvaluekey: 1.0.3 => 2.0.0\n - @unction/rejectp: 1.0.0 => 1.0.1\n - @unction/resolvep: 1.0.0 => 1.0.1\n - @unction/sample: 1.0.1 => 1.0.2\n - @unction/samplesize: 1.0.0 => 1.0.1\n - @unction/shuffle: 1.0.0 => 1.0.1\n - @unction/startswith: 1.0.0 => 1.0.1\n - @unction/thencatchp: 1.0.0 => 1.0.1\n - @unction/thenp: 1.0.0 => 1.0.1\n - @unction/thrush: 1.0.1 => 1.0.2\n - @unction/treeify: 1.0.9 => 1.1.0\n - @unction/upto: 2.0.0 => 2.0.1\n - @unction/withoutkeyrecursive: 1.1.1 => 1.1.2\n? Are you sure you want to publish the above changes? Yes\nlerna ERR! execute Error: fatal: tag '@unction/allobjectp@1.0.4' already exists\nlerna ERR! execute\nlerna ERR! execute     at Function.module.exports.sync (/Users/krainboltgreene/.nvm/versions/node/v7.7.2/lib/node_modules/lerna/node_modules/execa/index.js:277:26)\nlerna ERR! execute     at Function.execSync (/Users/krainboltgreene/.nvm/versions/node/v7.7.2/lib/node_modules/lerna/lib/ChildProcessUtilities.js:59:30)\nlerna ERR! execute     at Function.addTag (/Users/krainboltgreene/.nvm/versions/node/v7.7.2/lib/node_modules/lerna/lib/GitUtilities.js:90:39)\nlerna ERR! execute     at /Users/krainboltgreene/.nvm/versions/node/v7.7.2/lib/node_modules/lerna/lib/commands/PublishCommand.js:580:39\nlerna ERR! execute     at Array.forEach (native)\nlerna ERR! execute     at PublishCommand.gitCommitAndTagVersionForUpdates (/Users/krainboltgreene/.nvm/versions/node/v7.7.2/lib/node_modules/lerna/lib/commands/PublishCommand.js:579:12)\nlerna ERR! execute     at PublishCommand.commitAndTagUpdates (/Users/krainboltgreene/.nvm/versions/node/v7.7.2/lib/node_modules/lerna/lib/commands/PublishCommand.js:560:26)\nlerna ERR! execute     at PublishCommand.execute (/Users/krainboltgreene/.nvm/versions/node/v7.7.2/lib/node_modules/lerna/lib/commands/PublishCommand.js:246:16)\nlerna ERR! execute     at PublishCommand._attempt (/Users/krainboltgreene/.nvm/versions/node/v7.7.2/lib/node_modules/lerna/lib/Command.js:265:21)\nlerna ERR! execute     at /Users/krainboltgreene/.nvm/versions/node/v7.7.2/lib/node_modules/lerna/lib/Command.js:252:15\nlerna ERR! execute  callback with error\nlerna ERR! execute  Error: fatal: tag '@unction/allobjectp@1.0.4' already exists\nlerna ERR! execute\nlerna ERR! execute     at Function.module.exports.sync (/Users/krainboltgreene/.nvm/versions/node/v7.7.2/lib/node_modules/lerna/node_modules/execa/index.js:277:26)\nlerna ERR! execute     at Function.execSync (/Users/krainboltgreene/.nvm/versions/node/v7.7.2/lib/node_modules/lerna/lib/ChildProcessUtilities.js:59:30)\nlerna ERR! execute     at Function.addTag (/Users/krainboltgreene/.nvm/versions/node/v7.7.2/lib/node_modules/lerna/lib/GitUtilities.js:90:39)\nlerna ERR! execute     at /Users/krainboltgreene/.nvm/versions/node/v7.7.2/lib/node_modules/lerna/lib/commands/PublishCommand.js:580:39\nlerna ERR! execute     at Array.forEach (native)\nlerna ERR! execute     at PublishCommand.gitCommitAndTagVersionForUpdates (/Users/krainboltgreene/.nvm/versions/node/v7.7.2/lib/node_modules/lerna/lib/commands/PublishCommand.js:579:12)\nlerna ERR! execute     at PublishCommand.commitAndTagUpdates (/Users/krainboltgreene/.nvm/versions/node/v7.7.2/lib/node_modules/lerna/lib/commands/PublishCommand.js:560:26)\nlerna ERR! execute     at PublishCommand.execute (/Users/krainboltgreene/.nvm/versions/node/v7.7.2/lib/node_modules/lerna/lib/commands/PublishCommand.js:246:16)\nlerna ERR! execute     at PublishCommand._attempt (/Users/krainboltgreene/.nvm/versions/node/v7.7.2/lib/node_modules/lerna/lib/Command.js:265:21)\nlerna ERR! execute     at /Users/krainboltgreene/.nvm/versions/node/v7.7.2/lib/node_modules/lerna/lib/Command.js:252:15\n```. Also, in the middle of publishing I accidentally selected \"minor\" when it should be major. 25 packages in I have to start over :/. I'm just showing you that lerna wants to update everything and why lerna\nwants update everything. Since I can't skip updates right now this also\nmeans I'm stuck.\nOn Jul 31, 2017 9:22 AM, \"Daniel Stockman\" notifications@github.com wrote:\n\nSo that patch version selection for the appendM package was the last\noutput from lerna publish? And no lerna-debug.log output?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/lerna/lerna/issues/947#issuecomment-319122819, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAUb2T9UZMVXv8XRd8jYOF3AGBtK7pu2ks5sTf9ggaJpZM4On9K7\n.\n. While I've done that I've also moved to repo-per-package (which also means travis-per-package) and into my own tooling.. @TheLarkInn Please do link to the new thread you create.. Everyone's being civil @RyanCavanaugh, please assume good faith.. Please try to be civil @RyanCavanaugh, we're all trying to discuss this and it would be nice if you assumed good faith in everyone.. Are you going to also be suggesting edits to other posts? Is this a new service of yours? I suppose you get a lot of free time since you don't have to think about the ethical consequences of your work.. I have a fan \ud83d\ude0d . I didn't say you were honest, just that you were a fan.. Just for clarification, @TheLarkInn is not the only Microsoft Employee who has been a part of this ongoing discussion which makes this even more distressing.. Only you have suggested that these discussions are \"for the sake of discussion\".. It's also really weird to see so many people say:\n\n\nIt's harmful to [foss|companies|people]\nI't not [going to work|effective|doing anything]. Also, @lhorie @hallister is there anything else you'd like to decide we shouldn't discuss? I might as well ask now, since you two are already providing answers.. You laid out opinions. You can't just declare a comment a \"factual argument\" and have it be so.\n\n\njust because there is dissent is not enough reason for there to be a discussion\n\nOpinion.\n\nRFCs are not meant to be vehicles for discussion for the sake of discussion. \n\nOpinion.\n\na legitimate desire to use a non-open-source license as a weapon to \"punish the bad guys\" (a view that seemed to be somewhat trollish in nature, from my observations, but I'm putting it here for completeness)\n\nOpinion\n\na custom license is restrictive not only to a blacklist, but also any company with a whitelist OSS license policy (i.e. any company of non-trivial size)\n\nOpinion.\n\nwhether maintainers with conflict of interest should recuse themselves from discussion\n\nOpinion.\n\nwhether maintainers with conflict of interests should have recused themselves prior to the decision - an RFC isn't the place to debate the past, but to determined actionable items (if any) for the future\n\nOpinion.\n\nwhether more voices would change the decision\n\nOpinion.\n. So we neither have a compelling reason for Jamie K. to have been kicked nor a compelling reason why the license was reverted. I am shocked.\nSo to recap:\n\nAll maintainers accepted the original pull request.\nThere's absolutely prior art on doing this sort of license change.\nJamie K.'s behavior was apparently considered bad, but not until big companies were involved.\nNo one in charge of this has listed any behavior that violated in the current implemented code of conduct.\nWe're still waiting on an official response to this issue, which was created because of (what is now) a clear attempt at silencing.\nMultiple employees from a company on the list swooped down to convince a maintainer to revert the change (but not before specifically moving to revert their company's inclusion in the list, awkward).\n\nAnd the result?\n\nAn immense amount of character assassination\nThe gamergate, anti-coc, and hard right crowd have been riled up\nA fork that will surely not see life longer than a week but will have eaten plenty of valuable engineering time\nA new surge of engineers who think ethics aren't their problem\nESR is talking again. \n",
    "logotype": "Perhaps error messages could be improved at least? It's not immediately clear what's happening and why (when I tried to publish, I suddenly saw a bunch of error: failed to push some refs stack traces in the console, repeatedly). Those messages can be in the debug log sure, but perhaps common errors can be be more user friendly?. ",
    "mocheng": "@evocateur Thanks for your info.\nIn this case, git pull --rebase might not be a good idea, Since it makes remote commit parent of local bump-version-commit as below.\n* local commit that bumps version (with tags)\n* remote commit\n* common base\nThis makes tagged commit includes content of remote commit which is not actually published to registry.\ngit pull looks better even though it adds a merge commit.\n*   merge commit\n|\\\n| *  local commit that bumps version (with tags)\n* |  remote commit\n|/\n* common base\n. @noahpeters Doing \"lerna publish\" in CI might leave hard-to-clean situation on failure. That's the reason why we have to do publish locally.. @evocateur I checked @wtgtybhertgeghgtwtg 's repo and found the difference. In that repo, flow is run at root instead of each package. And, there is a flow-typed sub folder holding dependency package libdef.\nSurely, we can leverage same strategy to make flow work in lerna. But, it is preferred to enable each sub-package could run flow independently without much setup.. I have a customized preset installed at root node_modules. For lerna v2.6.0, it is interesting that publish command can find the preset with argument --canary, but fail without --canary. \nUpgrade to v3 beta version solves the problem.\n. @bmuenzenmeyer  It works well if I use either --conventional-commits\" or \"--npm-tag=v3\" only.. @JamesHenry I have same issue as this issue depicts https://github.com/lerna/lerna/issues/1893 . . Now I have a workaround by customizing--preid` to avoid canary version conflict. \n@evocateur If lerna changes the behavior by having only incremental number in canary version for clearer nightly build, perhaps it'd better have doc updated as well.\n. ",
    "noahpeters": "@evocateur I have a similar situation. We execute lerna publish from CI systems and it is difficult to build in problem resolution strategies for failures. If lerna publish failures would leave git/npm in a consistent state that didn't require manual intervention and didn't effect future publish actions, that would be great. Right now, if a subsequent push to master occurs after the CI build begins, it will fail to do the git push and someone will have to go manually unpublish the packages.. ",
    "madbonez": "in case when CI server catch unexpected commit before lerna do push, we use this approach (with gitlab api):\nprotect branch, build and finally unprotect\ncurl --request PUT --header \"PRIVATE-TOKEN: Dt4U34pz3pS111vx54Nx\" https://buildserver.host.ru/api/v4/projects/23/repository/branches/test/protect (unprotect). ",
    "Vincent2015": "@aaronmcadam @noherczeg \nlerna-debug.log\n browsers demand the next line be empty \n\n```txt\nPublishing packages to npm...\nNpmUtilities.publishTaggedInDir(\"lerna-temp\", \"./packages/aa\", )\nError: Command failed: npm publish --tag lerna-temp\nnpm ERR! publish Failed PUT 403\nnpm ERR! Darwin 16.0.0\nnpm ERR! argv \"/Users/qiupengchao/.nvm/versions/node/v6.9.5/bin/node\" \"/Users/qiupengchao/.nvm/versions/node/v6.9.5/bin/npm\" \"publish\" \"--tag\" \"lerna-temp\"\nnpm ERR! node v6.9.5\nnpm ERR! npm  v3.10.10\nnpm ERR! code E403\n\nnpm ERR! you do not have permission to publish \"aa\". Are you logged in as the correct user? : aa\nnpm ERR! \nnpm ERR! If you need help, you may report this error at:\nnpm ERR!     \n\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /Users/qiupengchao/work/saas/lerandemo/packages/aa/npm-debug.log\n\n    at ChildProcess.exithandler (child_process.js:206:12)\n    at emitTwo (events.js:106:13)\n    at ChildProcess.emit (events.js:191:7)\n    at maybeClose (internal/child_process.js:877:16)\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:226:5)\nAttempting to retry publishing aa...\nError: Command failed: npm publish --tag lerna-temp\nnpm ERR! publish Failed PUT 403\nnpm ERR! Darwin 16.0.0\nnpm ERR! argv \"/Users/qiupengchao/.nvm/versions/node/v6.9.5/bin/node\" \"/Users/qiupengchao/.nvm/versions/node/v6.9.5/bin/npm\" \"publish\" \"--tag\" \"lerna-temp\"\nnpm ERR! node v6.9.5\nnpm ERR! npm  v3.10.10\nnpm ERR! code E403\n\nnpm ERR! you do not have permission to publish \"aa\". Are you logged in as the correct user? : aa\nnpm ERR! \nnpm ERR! If you need help, you may report this error at:\nnpm ERR!     \n\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /Users/qiupengchao/work/saas/lerandemo/packages/aa/npm-debug.log\n\n    at ChildProcess.exithandler (child_process.js:206:12)\n    at emitTwo (events.js:106:13)\n    at ChildProcess.emit (events.js:191:7)\n    at maybeClose (internal/child_process.js:877:16)\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:226:5)\nNpmUtilities.publishTaggedInDir(\"lerna-temp\", \"./packages/aa\", )\nError: Command failed: npm publish --tag lerna-temp\nnpm ERR! publish Failed PUT 403\nnpm ERR! Darwin 16.0.0\nnpm ERR! argv \"/Users/qiupengchao/.nvm/versions/node/v6.9.5/bin/node\" \"/Users/qiupengchao/.nvm/versions/node/v6.9.5/bin/npm\" \"publish\" \"--tag\" \"lerna-temp\"\nnpm ERR! node v6.9.5\nnpm ERR! npm  v3.10.10\nnpm ERR! code E403\n\nnpm ERR! you do not have permission to publish \"aa\". Are you logged in as the correct user? : aa\nnpm ERR! \nnpm ERR! If you need help, you may report this error at:\nnpm ERR!     \n\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /Users/qiupengchao/work/saas/lerandemo/packages/aa/npm-debug.log\n\n    at ChildProcess.exithandler (child_process.js:206:12)\n    at emitTwo (events.js:106:13)\n    at ChildProcess.emit (events.js:191:7)\n    at maybeClose (internal/child_process.js:877:16)\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:226:5)\nAttempting to retry publishing aa...\nError: Command failed: npm publish --tag lerna-temp\nnpm ERR! publish Failed PUT 403\nnpm ERR! Darwin 16.0.0\nnpm ERR! argv \"/Users/qiupengchao/.nvm/versions/node/v6.9.5/bin/node\" \"/Users/qiupengchao/.nvm/versions/node/v6.9.5/bin/npm\" \"publish\" \"--tag\" \"lerna-temp\"\nnpm ERR! node v6.9.5\nnpm ERR! npm  v3.10.10\nnpm ERR! code E403\n\nnpm ERR! you do not have permission to publish \"aa\". Are you logged in as the correct user? : aa\nnpm ERR! \nnpm ERR! If you need help, you may report this error at:\nnpm ERR!     \n\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /Users/qiupengchao/work/saas/lerandemo/packages/aa/npm-debug.log\n\n    at ChildProcess.exithandler (child_process.js:206:12)\n    at emitTwo (events.js:106:13)\n    at ChildProcess.emit (events.js:191:7)\n    at maybeClose (internal/child_process.js:877:16)\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:226:5)\nNpmUtilities.publishTaggedInDir(\"lerna-temp\", \"./packages/aa\", )\nError: Command failed: npm publish --tag lerna-temp\nnpm ERR! publish Failed PUT 403\nnpm ERR! Darwin 16.0.0\nnpm ERR! argv \"/Users/qiupengchao/.nvm/versions/node/v6.9.5/bin/node\" \"/Users/qiupengchao/.nvm/versions/node/v6.9.5/bin/npm\" \"publish\" \"--tag\" \"lerna-temp\"\nnpm ERR! node v6.9.5\nnpm ERR! npm  v3.10.10\nnpm ERR! code E403\n\nnpm ERR! you do not have permission to publish \"aa\". Are you logged in as the correct user? : aa\nnpm ERR! \nnpm ERR! If you need help, you may report this error at:\nnpm ERR!     \n\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /Users/qiupengchao/work/saas/lerandemo/packages/aa/npm-debug.log\n\n    at ChildProcess.exithandler (child_process.js:206:12)\n    at emitTwo (events.js:106:13)\n    at ChildProcess.emit (events.js:191:7)\n    at maybeClose (internal/child_process.js:877:16)\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:226:5)\nAttempting to retry publishing aa...\nError: Command failed: npm publish --tag lerna-temp\nnpm ERR! publish Failed PUT 403\nnpm ERR! Darwin 16.0.0\nnpm ERR! argv \"/Users/qiupengchao/.nvm/versions/node/v6.9.5/bin/node\" \"/Users/qiupengchao/.nvm/versions/node/v6.9.5/bin/npm\" \"publish\" \"--tag\" \"lerna-temp\"\nnpm ERR! node v6.9.5\nnpm ERR! npm  v3.10.10\nnpm ERR! code E403\n\nnpm ERR! you do not have permission to publish \"aa\". Are you logged in as the correct user? : aa\nnpm ERR! \nnpm ERR! If you need help, you may report this error at:\nnpm ERR!     \n\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /Users/qiupengchao/work/saas/lerandemo/packages/aa/npm-debug.log\n\n    at ChildProcess.exithandler (child_process.js:206:12)\n    at emitTwo (events.js:106:13)\n    at ChildProcess.emit (events.js:191:7)\n    at maybeClose (internal/child_process.js:877:16)\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:226:5)\nNpmUtilities.publishTaggedInDir(\"lerna-temp\", \"./packages/aa\", )\nError: Command failed: npm publish --tag lerna-temp\nnpm ERR! publish Failed PUT 403\nnpm ERR! Darwin 16.0.0\nnpm ERR! argv \"/Users/qiupengchao/.nvm/versions/node/v6.9.5/bin/node\" \"/Users/qiupengchao/.nvm/versions/node/v6.9.5/bin/npm\" \"publish\" \"--tag\" \"lerna-temp\"\nnpm ERR! node v6.9.5\nnpm ERR! npm  v3.10.10\nnpm ERR! code E403\n\nnpm ERR! you do not have permission to publish \"aa\". Are you logged in as the correct user? : aa\nnpm ERR! \nnpm ERR! If you need help, you may report this error at:\nnpm ERR!     \n\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /Users/qiupengchao/work/saas/lerandemo/packages/aa/npm-debug.log\n\n    at ChildProcess.exithandler (child_process.js:206:12)\n    at emitTwo (events.js:106:13)\n    at ChildProcess.emit (events.js:191:7)\n    at maybeClose (internal/child_process.js:877:16)\n    at Socket. (internal/child_process.js:334:11)\n    at emitOne (events.js:96:13)\n    at Socket.emit (events.js:188:7)\n    at Pipe._handle.close [as _onclose] (net.js:498:12)\nAttempting to retry publishing aa...\nError: Command failed: npm publish --tag lerna-temp\nnpm ERR! publish Failed PUT 403\nnpm ERR! Darwin 16.0.0\nnpm ERR! argv \"/Users/qiupengchao/.nvm/versions/node/v6.9.5/bin/node\" \"/Users/qiupengchao/.nvm/versions/node/v6.9.5/bin/npm\" \"publish\" \"--tag\" \"lerna-temp\"\nnpm ERR! node v6.9.5\nnpm ERR! npm  v3.10.10\nnpm ERR! code E403\n\nnpm ERR! you do not have permission to publish \"aa\". Are you logged in as the correct user? : aa\nnpm ERR! \nnpm ERR! If you need help, you may report this error at:\nnpm ERR!     \n\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /Users/qiupengchao/work/saas/lerandemo/packages/aa/npm-debug.log\n\n    at ChildProcess.exithandler (child_process.js:206:12)\n    at emitTwo (events.js:106:13)\n    at ChildProcess.emit (events.js:191:7)\n    at maybeClose (internal/child_process.js:877:16)\n    at Socket. (internal/child_process.js:334:11)\n    at emitOne (events.js:96:13)\n    at Socket.emit (events.js:188:7)\n    at Pipe._handle.close [as _onclose] (net.js:498:12)\nNpmUtilities.publishTaggedInDir(\"lerna-temp\", \"./packages/aa\", )\nError: Command failed: npm publish --tag lerna-temp\nnpm ERR! publish Failed PUT 403\nnpm ERR! Darwin 16.0.0\nnpm ERR! argv \"/Users/qiupengchao/.nvm/versions/node/v6.9.5/bin/node\" \"/Users/qiupengchao/.nvm/versions/node/v6.9.5/bin/npm\" \"publish\" \"--tag\" \"lerna-temp\"\nnpm ERR! node v6.9.5\nnpm ERR! npm  v3.10.10\nnpm ERR! code E403\n\nnpm ERR! you do not have permission to publish \"aa\". Are you logged in as the correct user? : aa\nnpm ERR! \nnpm ERR! If you need help, you may report this error at:\nnpm ERR!     \n\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /Users/qiupengchao/work/saas/lerandemo/packages/aa/npm-debug.log\n\n    at ChildProcess.exithandler (child_process.js:206:12)\n    at emitTwo (events.js:106:13)\n    at ChildProcess.emit (events.js:191:7)\n    at maybeClose (internal/child_process.js:877:16)\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:226:5)\nRan out of retries while publishing aa\nError: Command failed: npm publish --tag lerna-temp\nnpm ERR! publish Failed PUT 403\nnpm ERR! Darwin 16.0.0\nnpm ERR! argv \"/Users/qiupengchao/.nvm/versions/node/v6.9.5/bin/node\" \"/Users/qiupengchao/.nvm/versions/node/v6.9.5/bin/npm\" \"publish\" \"--tag\" \"lerna-temp\"\nnpm ERR! node v6.9.5\nnpm ERR! npm  v3.10.10\nnpm ERR! code E403\n\nnpm ERR! you do not have permission to publish \"aa\". Are you logged in as the correct user? : aa\nnpm ERR! \nnpm ERR! If you need help, you may report this error at:\nnpm ERR!     \n\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /Users/qiupengchao/work/saas/lerandemo/packages/aa/npm-debug.log\n\n    at ChildProcess.exithandler (child_process.js:206:12)\n    at emitTwo (events.js:106:13)\n    at ChildProcess.emit (events.js:191:7)\n    at maybeClose (internal/child_process.js:877:16)\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:226:5)\nErrored while running PublishCommand.execute\nError: Command failed: npm publish --tag lerna-temp\nnpm ERR! publish Failed PUT 403\nnpm ERR! Darwin 16.0.0\nnpm ERR! argv \"/Users/qiupengchao/.nvm/versions/node/v6.9.5/bin/node\" \"/Users/qiupengchao/.nvm/versions/node/v6.9.5/bin/npm\" \"publish\" \"--tag\" \"lerna-temp\"\nnpm ERR! node v6.9.5\nnpm ERR! npm  v3.10.10\nnpm ERR! code E403\n\nnpm ERR! you do not have permission to publish \"aa\". Are you logged in as the correct user? : aa\nnpm ERR! \nnpm ERR! If you need help, you may report this error at:\nnpm ERR!     \n\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /Users/qiupengchao/work/saas/lerandemo/packages/aa/npm-debug.log\n\n    at ChildProcess.exithandler (child_process.js:206:12)\n    at emitTwo (events.js:106:13)\n    at ChildProcess.emit (events.js:191:7)\n    at maybeClose (internal/child_process.js:877:16)\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:226:5)\n```\n\n. @aaronmcadam @noherczeg \nlerna-debug.log\n browsers demand the next line be empty \n\n```txt\nPublishing packages to npm...\nNpmUtilities.publishTaggedInDir(\"lerna-temp\", \"./packages/aa\", )\nError: Command failed: npm publish --tag lerna-temp\nnpm ERR! publish Failed PUT 403\nnpm ERR! Darwin 16.0.0\nnpm ERR! argv \"/Users/qiupengchao/.nvm/versions/node/v6.9.5/bin/node\" \"/Users/qiupengchao/.nvm/versions/node/v6.9.5/bin/npm\" \"publish\" \"--tag\" \"lerna-temp\"\nnpm ERR! node v6.9.5\nnpm ERR! npm  v3.10.10\nnpm ERR! code E403\n\nnpm ERR! you do not have permission to publish \"aa\". Are you logged in as the correct user? : aa\nnpm ERR! \nnpm ERR! If you need help, you may report this error at:\nnpm ERR!     \n\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /Users/qiupengchao/work/saas/lerandemo/packages/aa/npm-debug.log\n\n    at ChildProcess.exithandler (child_process.js:206:12)\n    at emitTwo (events.js:106:13)\n    at ChildProcess.emit (events.js:191:7)\n    at maybeClose (internal/child_process.js:877:16)\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:226:5)\nAttempting to retry publishing aa...\nError: Command failed: npm publish --tag lerna-temp\nnpm ERR! publish Failed PUT 403\nnpm ERR! Darwin 16.0.0\nnpm ERR! argv \"/Users/qiupengchao/.nvm/versions/node/v6.9.5/bin/node\" \"/Users/qiupengchao/.nvm/versions/node/v6.9.5/bin/npm\" \"publish\" \"--tag\" \"lerna-temp\"\nnpm ERR! node v6.9.5\nnpm ERR! npm  v3.10.10\nnpm ERR! code E403\n\nnpm ERR! you do not have permission to publish \"aa\". Are you logged in as the correct user? : aa\nnpm ERR! \nnpm ERR! If you need help, you may report this error at:\nnpm ERR!     \n\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /Users/qiupengchao/work/saas/lerandemo/packages/aa/npm-debug.log\n\n    at ChildProcess.exithandler (child_process.js:206:12)\n    at emitTwo (events.js:106:13)\n    at ChildProcess.emit (events.js:191:7)\n    at maybeClose (internal/child_process.js:877:16)\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:226:5)\nNpmUtilities.publishTaggedInDir(\"lerna-temp\", \"./packages/aa\", )\nError: Command failed: npm publish --tag lerna-temp\nnpm ERR! publish Failed PUT 403\nnpm ERR! Darwin 16.0.0\nnpm ERR! argv \"/Users/qiupengchao/.nvm/versions/node/v6.9.5/bin/node\" \"/Users/qiupengchao/.nvm/versions/node/v6.9.5/bin/npm\" \"publish\" \"--tag\" \"lerna-temp\"\nnpm ERR! node v6.9.5\nnpm ERR! npm  v3.10.10\nnpm ERR! code E403\n\nnpm ERR! you do not have permission to publish \"aa\". Are you logged in as the correct user? : aa\nnpm ERR! \nnpm ERR! If you need help, you may report this error at:\nnpm ERR!     \n\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /Users/qiupengchao/work/saas/lerandemo/packages/aa/npm-debug.log\n\n    at ChildProcess.exithandler (child_process.js:206:12)\n    at emitTwo (events.js:106:13)\n    at ChildProcess.emit (events.js:191:7)\n    at maybeClose (internal/child_process.js:877:16)\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:226:5)\nAttempting to retry publishing aa...\nError: Command failed: npm publish --tag lerna-temp\nnpm ERR! publish Failed PUT 403\nnpm ERR! Darwin 16.0.0\nnpm ERR! argv \"/Users/qiupengchao/.nvm/versions/node/v6.9.5/bin/node\" \"/Users/qiupengchao/.nvm/versions/node/v6.9.5/bin/npm\" \"publish\" \"--tag\" \"lerna-temp\"\nnpm ERR! node v6.9.5\nnpm ERR! npm  v3.10.10\nnpm ERR! code E403\n\nnpm ERR! you do not have permission to publish \"aa\". Are you logged in as the correct user? : aa\nnpm ERR! \nnpm ERR! If you need help, you may report this error at:\nnpm ERR!     \n\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /Users/qiupengchao/work/saas/lerandemo/packages/aa/npm-debug.log\n\n    at ChildProcess.exithandler (child_process.js:206:12)\n    at emitTwo (events.js:106:13)\n    at ChildProcess.emit (events.js:191:7)\n    at maybeClose (internal/child_process.js:877:16)\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:226:5)\nNpmUtilities.publishTaggedInDir(\"lerna-temp\", \"./packages/aa\", )\nError: Command failed: npm publish --tag lerna-temp\nnpm ERR! publish Failed PUT 403\nnpm ERR! Darwin 16.0.0\nnpm ERR! argv \"/Users/qiupengchao/.nvm/versions/node/v6.9.5/bin/node\" \"/Users/qiupengchao/.nvm/versions/node/v6.9.5/bin/npm\" \"publish\" \"--tag\" \"lerna-temp\"\nnpm ERR! node v6.9.5\nnpm ERR! npm  v3.10.10\nnpm ERR! code E403\n\nnpm ERR! you do not have permission to publish \"aa\". Are you logged in as the correct user? : aa\nnpm ERR! \nnpm ERR! If you need help, you may report this error at:\nnpm ERR!     \n\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /Users/qiupengchao/work/saas/lerandemo/packages/aa/npm-debug.log\n\n    at ChildProcess.exithandler (child_process.js:206:12)\n    at emitTwo (events.js:106:13)\n    at ChildProcess.emit (events.js:191:7)\n    at maybeClose (internal/child_process.js:877:16)\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:226:5)\nAttempting to retry publishing aa...\nError: Command failed: npm publish --tag lerna-temp\nnpm ERR! publish Failed PUT 403\nnpm ERR! Darwin 16.0.0\nnpm ERR! argv \"/Users/qiupengchao/.nvm/versions/node/v6.9.5/bin/node\" \"/Users/qiupengchao/.nvm/versions/node/v6.9.5/bin/npm\" \"publish\" \"--tag\" \"lerna-temp\"\nnpm ERR! node v6.9.5\nnpm ERR! npm  v3.10.10\nnpm ERR! code E403\n\nnpm ERR! you do not have permission to publish \"aa\". Are you logged in as the correct user? : aa\nnpm ERR! \nnpm ERR! If you need help, you may report this error at:\nnpm ERR!     \n\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /Users/qiupengchao/work/saas/lerandemo/packages/aa/npm-debug.log\n\n    at ChildProcess.exithandler (child_process.js:206:12)\n    at emitTwo (events.js:106:13)\n    at ChildProcess.emit (events.js:191:7)\n    at maybeClose (internal/child_process.js:877:16)\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:226:5)\nNpmUtilities.publishTaggedInDir(\"lerna-temp\", \"./packages/aa\", )\nError: Command failed: npm publish --tag lerna-temp\nnpm ERR! publish Failed PUT 403\nnpm ERR! Darwin 16.0.0\nnpm ERR! argv \"/Users/qiupengchao/.nvm/versions/node/v6.9.5/bin/node\" \"/Users/qiupengchao/.nvm/versions/node/v6.9.5/bin/npm\" \"publish\" \"--tag\" \"lerna-temp\"\nnpm ERR! node v6.9.5\nnpm ERR! npm  v3.10.10\nnpm ERR! code E403\n\nnpm ERR! you do not have permission to publish \"aa\". Are you logged in as the correct user? : aa\nnpm ERR! \nnpm ERR! If you need help, you may report this error at:\nnpm ERR!     \n\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /Users/qiupengchao/work/saas/lerandemo/packages/aa/npm-debug.log\n\n    at ChildProcess.exithandler (child_process.js:206:12)\n    at emitTwo (events.js:106:13)\n    at ChildProcess.emit (events.js:191:7)\n    at maybeClose (internal/child_process.js:877:16)\n    at Socket. (internal/child_process.js:334:11)\n    at emitOne (events.js:96:13)\n    at Socket.emit (events.js:188:7)\n    at Pipe._handle.close [as _onclose] (net.js:498:12)\nAttempting to retry publishing aa...\nError: Command failed: npm publish --tag lerna-temp\nnpm ERR! publish Failed PUT 403\nnpm ERR! Darwin 16.0.0\nnpm ERR! argv \"/Users/qiupengchao/.nvm/versions/node/v6.9.5/bin/node\" \"/Users/qiupengchao/.nvm/versions/node/v6.9.5/bin/npm\" \"publish\" \"--tag\" \"lerna-temp\"\nnpm ERR! node v6.9.5\nnpm ERR! npm  v3.10.10\nnpm ERR! code E403\n\nnpm ERR! you do not have permission to publish \"aa\". Are you logged in as the correct user? : aa\nnpm ERR! \nnpm ERR! If you need help, you may report this error at:\nnpm ERR!     \n\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /Users/qiupengchao/work/saas/lerandemo/packages/aa/npm-debug.log\n\n    at ChildProcess.exithandler (child_process.js:206:12)\n    at emitTwo (events.js:106:13)\n    at ChildProcess.emit (events.js:191:7)\n    at maybeClose (internal/child_process.js:877:16)\n    at Socket. (internal/child_process.js:334:11)\n    at emitOne (events.js:96:13)\n    at Socket.emit (events.js:188:7)\n    at Pipe._handle.close [as _onclose] (net.js:498:12)\nNpmUtilities.publishTaggedInDir(\"lerna-temp\", \"./packages/aa\", )\nError: Command failed: npm publish --tag lerna-temp\nnpm ERR! publish Failed PUT 403\nnpm ERR! Darwin 16.0.0\nnpm ERR! argv \"/Users/qiupengchao/.nvm/versions/node/v6.9.5/bin/node\" \"/Users/qiupengchao/.nvm/versions/node/v6.9.5/bin/npm\" \"publish\" \"--tag\" \"lerna-temp\"\nnpm ERR! node v6.9.5\nnpm ERR! npm  v3.10.10\nnpm ERR! code E403\n\nnpm ERR! you do not have permission to publish \"aa\". Are you logged in as the correct user? : aa\nnpm ERR! \nnpm ERR! If you need help, you may report this error at:\nnpm ERR!     \n\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /Users/qiupengchao/work/saas/lerandemo/packages/aa/npm-debug.log\n\n    at ChildProcess.exithandler (child_process.js:206:12)\n    at emitTwo (events.js:106:13)\n    at ChildProcess.emit (events.js:191:7)\n    at maybeClose (internal/child_process.js:877:16)\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:226:5)\nRan out of retries while publishing aa\nError: Command failed: npm publish --tag lerna-temp\nnpm ERR! publish Failed PUT 403\nnpm ERR! Darwin 16.0.0\nnpm ERR! argv \"/Users/qiupengchao/.nvm/versions/node/v6.9.5/bin/node\" \"/Users/qiupengchao/.nvm/versions/node/v6.9.5/bin/npm\" \"publish\" \"--tag\" \"lerna-temp\"\nnpm ERR! node v6.9.5\nnpm ERR! npm  v3.10.10\nnpm ERR! code E403\n\nnpm ERR! you do not have permission to publish \"aa\". Are you logged in as the correct user? : aa\nnpm ERR! \nnpm ERR! If you need help, you may report this error at:\nnpm ERR!     \n\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /Users/qiupengchao/work/saas/lerandemo/packages/aa/npm-debug.log\n\n    at ChildProcess.exithandler (child_process.js:206:12)\n    at emitTwo (events.js:106:13)\n    at ChildProcess.emit (events.js:191:7)\n    at maybeClose (internal/child_process.js:877:16)\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:226:5)\nErrored while running PublishCommand.execute\nError: Command failed: npm publish --tag lerna-temp\nnpm ERR! publish Failed PUT 403\nnpm ERR! Darwin 16.0.0\nnpm ERR! argv \"/Users/qiupengchao/.nvm/versions/node/v6.9.5/bin/node\" \"/Users/qiupengchao/.nvm/versions/node/v6.9.5/bin/npm\" \"publish\" \"--tag\" \"lerna-temp\"\nnpm ERR! node v6.9.5\nnpm ERR! npm  v3.10.10\nnpm ERR! code E403\n\nnpm ERR! you do not have permission to publish \"aa\". Are you logged in as the correct user? : aa\nnpm ERR! \nnpm ERR! If you need help, you may report this error at:\nnpm ERR!     \n\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /Users/qiupengchao/work/saas/lerandemo/packages/aa/npm-debug.log\n\n    at ChildProcess.exithandler (child_process.js:206:12)\n    at emitTwo (events.js:106:13)\n    at ChildProcess.emit (events.js:191:7)\n    at maybeClose (internal/child_process.js:877:16)\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:226:5)\n```\n\n. bogon:lerandemo qiupengchao$ git --version\ngit version 2.10.1 (Apple Git-78)\nbogon:lerandemo qiupengchao$ . ",
    "MatteoGabriele": "This error is caused also when managing more than one npm user and accidentally you try to publish a package with the wrong one.\nI will suggest at least that tags and commit are applied after a positive publish on npm, otherwise every time this error happen, we need to manually remove the version tag and hard reset to the previous commit.\nThanks anyway :). true, but the error is not super user friendly and also when you have a lot of packages can be quite annoying:  but i get your point.\ni was just wondering this: if an error occurs,  lerna could put the previous version back or discard all changes,  so that's possible to try again without too much pain. \nbut thanks for the response. this tool is really handy and this can be a small price to pay :) . ",
    "lostintangent": "Like @thomasfr, I was hitting this error, and it turned out to be because I was running lerna publish via a yarn command (yarn release), even though I was logged in with yarn. As soon as I run npm run release, everything worked perfectly.\nIs there a workaround for this that allows you to continue to use yarn instead of npm? I'm guessing I'm doing something wrong, but I'm definitely logged in to both yarn and npm, but I can only successfully run lerna publish via an npm script, not a yarn script.\n. @evocateur Stupid question, but what is the guidance around lerna publish ---conventional-commits vs. lerna-changelog? I'm loving the conventional commits workflow, but I like the way that lerna-changelog allows you to customize the changelog format a bit. Is the desire to continue iterating on lerna publish ---conventional-commits to fill in that additional 20% of scenarios? Thanks!. Beautiful! Thanks so much for confirming that. I\u2019m currently migrating some projects over to Lerna, and I\u2019ve been trying to rationalize the various options (due to my unfamiliarity), so it\u2019s super helpful to know that the Commitizen + Lerna combo is the \u201cfuture proof\u201d workflow for conventionally committing/publishing monorepos.. ",
    "timdorr": "BTW, I'm only doing this as a hack to avoid publishing a particular package (maybe there should be a skip option?). \nI was able to get around it by commenting out the validate check. I guess the return type isn't what Inquirer wants?. BTW, I'm only doing this as a hack to avoid publishing a particular package (maybe there should be a skip option?). \nI was able to get around it by commenting out the validate check. I guess the return type isn't what Inquirer wants?. > #728 fixed the --ignore flag behaviour with lerna publish, perhaps you could try lerna publish --ignore react-router-native?\nYeah, that's the one I was looking for. Thanks!. > #728 fixed the --ignore flag behaviour with lerna publish, perhaps you could try lerna publish --ignore react-router-native?\nYeah, that's the one I was looking for. Thanks!. ",
    "popomore": "But some project use lerna for initializing in their test, it's ok for lerna@2 to drop the version, but can you support on 1.x? . But some project use lerna for initializing in their test, it's ok for lerna@2 to drop the version, but can you support on 1.x? . Is travis disabled on 1.x?. ",
    "otbe": "Same issue here. Fails with:\nlerna info version 2.0.0-rc.4\nlerna ERR! initialize Error: fatal: ambiguous argument 'HEAD': unknown revision or path not in the working tree.\nlerna ERR! initialize Use '--' to separate paths from revisions, like this:\nlerna ERR! initialize 'git <command> [<revision>...] -- [<file>...]'\nlerna ERR! initialize\nlerna ERR! initialize     at Function.module.exports.sync (/Users/boo/.nvm/versions/node/v7.7.2/lib/node_modules/lerna/node_modules/execa/index.js:277:26)\nlerna ERR! initialize     at Function.execSync (/Users/boo/.nvm/versions/node/v7.7.2/lib/node_modules/lerna/lib/ChildProcessUtilities.js:51:30)\nlerna ERR! initialize     at Function.getCurrentSHA (/Users/boo/.nvm/versions/node/v7.7.2/lib/node_modules/lerna/lib/GitUtilities.js:193:49)\nlerna ERR! initialize     at ImportCommand.initialize (/Users/boo/.nvm/versions/node/v7.7.2/lib/node_modules/lerna/lib/commands/ImportCommand.js:136:51)\nlerna ERR! initialize     at ImportCommand._attempt (/Users/boo/.nvm/versions/node/v7.7.2/lib/node_modules/lerna/lib/Command.js:265:21)\nlerna ERR! initialize     at ImportCommand.runCommand (/Users/boo/.nvm/versions/node/v7.7.2/lib/node_modules/lerna/lib/Command.js:251:12)\nlerna ERR! initialize     at ImportCommand.run (/Users/boo/.nvm/versions/node/v7.7.2/lib/node_modules/lerna/lib/Command.js:148:12)\nlerna ERR! initialize     at Object.handler (/Users/boo/.nvm/versions/node/v7.7.2/lib/node_modules/lerna/lib/commands/ImportCommand.js:53:53)\nlerna ERR! initialize     at Object.self.runCommand (/Users/boo/.nvm/versions/node/v7.7.2/lib/node_modules/lerna/node_modules/yargs/lib/command.js:231:22)\n$ git --version\ngit version 2.11.0 (Apple Git-81)\nIm using 2.0.0-rc.4 right now on a new created (lerna init) test repo.. @devmao \nI guess you have to pass a file system path not a remote URL. So try to clone the repo and use this path :). ",
    "devmao": "OS: Ubuntu 16.04 LTS\nGit: 2.7.4 and 2.11.0\nLerna: 2.0.0-rc.4\n```\n/lerna-repo:$ lerna import ../pippo/\nlerna info version 2.0.0-rc.4\nlerna info versioning independent\nlerna ERR! initialize Error: fatal: ambiguous argument 'HEAD': unknown revision or path not in the working tree.\nlerna ERR! initialize Use '--' to separate paths from revisions, like this:\nlerna ERR! initialize 'git  [...] -- [...]'\nlerna ERR! initialize \nlerna ERR! initialize     at Function.module.exports.sync (/home/mao/.nvm/versions/node/v6.10.1/lib/node_modules/lerna/node_modules/execa/index.js:277:26)\nlerna ERR! initialize     at Function.execSync (/home/mao/.nvm/versions/node/v6.10.1/lib/node_modules/lerna/lib/ChildProcessUtilities.js:51:30)\nlerna ERR! initialize     at Function.getCurrentSHA (/home/mao/.nvm/versions/node/v6.10.1/lib/node_modules/lerna/lib/GitUtilities.js:193:49)\nlerna ERR! initialize     at ImportCommand.initialize (/home/mao/.nvm/versions/node/v6.10.1/lib/node_modules/lerna/lib/commands/ImportCommand.js:136:51)\nlerna ERR! initialize     at ImportCommand._attempt (/home/mao/.nvm/versions/node/v6.10.1/lib/node_modules/lerna/lib/Command.js:265:21)\nlerna ERR! initialize     at ImportCommand.runCommand (/home/mao/.nvm/versions/node/v6.10.1/lib/node_modules/lerna/lib/Command.js:251:12)\nlerna ERR! initialize     at ImportCommand.run (/home/mao/.nvm/versions/node/v6.10.1/lib/node_modules/lerna/lib/Command.js:148:12)\nlerna ERR! initialize     at Object.handler (/home/mao/.nvm/versions/node/v6.10.1/lib/node_modules/lerna/lib/commands/ImportCommand.js:53:53)\nlerna ERR! initialize     at Object.self.runCommand (/home/mao/.nvm/versions/node/v6.10.1/lib/node_modules/lerna/node_modules/yargs/lib/command.js:231:22)\nlerna ERR! initialize     at Object.Yargs.self._parseArgs (/home/mao/.nvm/versions/node/v6.10.1/lib/node_modules/lerna/node_modules/yargs/yargs.js:990:30)\nlerna ERR! initialize  caught error\nlerna ERR! initialize  Error: fatal: ambiguous argument 'HEAD': unknown revision or path not in the working tree.\nlerna ERR! initialize Use '--' to separate paths from revisions, like this:\nlerna ERR! initialize 'git  [...] -- [...]'\nlerna ERR! initialize \nlerna ERR! initialize     at Function.module.exports.sync (/home/mao/.nvm/versions/node/v6.10.1/lib/node_modules/lerna/node_modules/execa/index.js:277:26)\nlerna ERR! initialize     at Function.execSync (/home/mao/.nvm/versions/node/v6.10.1/lib/node_modules/lerna/lib/ChildProcessUtilities.js:51:30)\nlerna ERR! initialize     at Function.getCurrentSHA (/home/mao/.nvm/versions/node/v6.10.1/lib/node_modules/lerna/lib/GitUtilities.js:193:49)\nlerna ERR! initialize     at ImportCommand.initialize (/home/mao/.nvm/versions/node/v6.10.1/lib/node_modules/lerna/lib/commands/ImportCommand.js:136:51)\nlerna ERR! initialize     at ImportCommand._attempt (/home/mao/.nvm/versions/node/v6.10.1/lib/node_modules/lerna/lib/Command.js:265:21)\nlerna ERR! initialize     at ImportCommand.runCommand (/home/mao/.nvm/versions/node/v6.10.1/lib/node_modules/lerna/lib/Command.js:251:12)\nlerna ERR! initialize     at ImportCommand.run (/home/mao/.nvm/versions/node/v6.10.1/lib/node_modules/lerna/lib/Command.js:148:12)\nlerna ERR! initialize     at Object.handler (/home/mao/.nvm/versions/node/v6.10.1/lib/node_modules/lerna/lib/commands/ImportCommand.js:53:53)\nlerna ERR! initialize     at Object.self.runCommand (/home/mao/.nvm/versions/node/v6.10.1/lib/node_modules/lerna/node_modules/yargs/lib/command.js:231:22)\nlerna ERR! initialize     at Object.Yargs.self._parseArgs (/home/mao/.nvm/versions/node/v6.10.1/lib/node_modules/lerna/node_modules/yargs/yargs.js:990:30)\n```. @otbe same issue with a path, relative or absolute.. @iyobo yes, it's the solution for me too.\nlerna really need to provide some sort of checking for these trivial mistakes to report useful error messages.. ",
    "iyobo": "Same issue here with lerna import. Unable to work around it.\nSeems to be a git problem though, because git show HEAD throws same error in git.\ngit version 2.11.0 (Apple Git-81)\n. Okay looks like I found a fix for this.\nThis issue only comes up when I try to lerna import into a lerna repo with uncommited changes.\nCommit all changes in your monorepo and have a clean tree before attempting to import another package and it's git history. I suppose it makes sense :). Verified. Not a very helpful error message. ",
    "MillerGregor": "fyi... \nyou'll also get this error when trying to lerna version a branch that has no upstream\nI wouldn't consider this a bug, as it's only likely to be encountered while testing. ",
    "khoomeister": "Thinking about this more, you just need a way of automating npm link a bit more.\nLet's say you have a private monorepo.  Once you have a package you want to make public, you break it out to its own repo/directory, and there's a new setting in lerna.json that npm links all dependencies of the same name to that directory when you call bootstrap.\ne.g.\njson\n{\n  \"local\": {\n    \"my-package\": \"~/namespace/my-package\"\n  }\n}\nThat'd be the extent of lerna's responsibilities.  You handle publish, etc. of this package yourself since it's technically not part of the monorepo.  I guess your link could refer to another monorepo's package if you wanted to minimize the burden of maintaining multiple git repos.\nThoughts?. ",
    "unional": "Confirm this bug still exists on 2.0.0 release version. IMO each sub-packages should have its own package-lock.json.\nSo that it is consistent when I work on that package itself (i.e. cd into it.).\nFor hoist, it would be more complicated.\nAlso, I notice currently the package-lock.json is updated incorrectly.\nI notice the package name and version is gone, and the devDeps have their \"dev\": true removed.\nThe behavior I described above seems to be the same as https://github.com/lerna/lerna/issues/851#issuecomment-306082026. > Lerna should install all the dependencies on the root node_modules folder and then link them to the required sub-packages.\nThis is the hoist scenario.\nIf I understand correctly, hoist doesn't work if I want to be able to open each package directly (for IDE support).\ni.e., instead of opening mylernaproject, I want to open mylernaproject/packages/x and mylernaproject/packages/y. ",
    "Adam13531": "I found a workaround for this issue. The core of the problem is that path.join in ImportCommand.js will concatenate paths with a backslash on Windows: https://github.com/lerna/lerna/blob/34fd08aaac474693f8d9e0cc46bf22db862880ba/src/commands/ImportCommand.js#L74\nTo quickly/hackily fix this for myself, I added this line of code to lib/commands/ImportCommand.js directly after line 125 (note: this is transpiled code):\njs\nthis.targetDir = _path2.default.join(targetBase, externalRepoBase); // already on line 125\nthis.targetDir = this.targetDir.replace(/\\\\/g, '/'); // I added this\nIf either of the paths naturally had a backslash in them, then this workaround will break.. @evocateur I came up with a repro for this since I've been experiencing this issue for many months. I pushed to a repo here, but I've listed all of the steps below for creating the problem from scratch.\nMy platform:\n- Windows\n- npm 6.1.0\n- Node 8.11.1\n- Lerna 3.1.4\nRepro steps:\n- Create repo in GitHub\n- cd into the repo\n- npm init -y\n- npm install --save-dev lerna\n- .\\node_modules\\.bin\\lerna.cmd init --independent\n- cd packages\n- mkdir package1\n- cd package1\n- npm init -y\n- cd ..\n- mkdir package2\n- cd package2\n- npm init -y\n- Manually change version in package2/package.json to \"1.0.0-adam.1\"\n- Commit everything\n- Push (just to avoid this issue)\n- Run lerna version\n  - Pick 1.0.1 for package1\n  - Pick \"custom prerelease\" and type \"adam\" so that it ends up as 1.0.0-adam.2\n    Here's the output I got - Changes:\n     - package1: 1.0.0 => 1.0.1\n     - package2: 1.0.0-adam.1 => 1.0.0-adam.2\n- Add a file to package1 called \"a.txt\" with the contents \"hello world\"\n- Commit a.txt\n- Run lerna changed\nExpected: only package1 changed\nActual: package1 and package2 changed. ",
    "justinwilaby": "This is a problem for us as well. Blocked a team of 6 devs for 8 hours :(. I should add that some shared dependencies were never hoisted at all. Downgrading to 2.0.0-beta.38 immediately solved the problem.. ",
    "brentertz": "Thanks @nicojs. I was able to use link-parent-bin to skirt the hoisting issue.  It had the added benefit of enabling me to clean up individual package devDependencies which were being included solely to enable use in npm scripts.. You can alternatively add package-lock=false to an .npmrc file.. ",
    "ncochard": "That is correct: npm publish does not run npm version internally.\nLet me try to clarify my suggestion...\nThe typical workflow in a pure npm project would be the following:\n\nWe fist execute npm version to increase the version number and create a git tag.\n   (This also executes our custom npm scripts npm run preversion, npm run version and npm run postversion.)\nThen we can execute npm publish.\n   (This also execute npm run prepublish, npm run prepublishOnly, etc.)\n\nOur workflow is simplified with lerna because the command lerna publish figuratively speaking encapsulates the npm version command and the npm publish command.\nSince lerna already honors the script prepublish; for consistency, it would be useful if it also honored the scripts version. This would allow us to migrate npm projects to lerna and benefit from the same features.\nI can understand however that it is probably not a high priority feature: the scripts preversion, version and postversion are not often used.. ",
    "cwmoo740": "@evocateur \nThese lifecycle scripts are currently non-blocking, so things might not work 100% as expected. For example, if a preversion script fails, it doesn't halt the commit, and if a preversion script adds files to be committed, they might not make it in time.\nI can open another PR to make them wait on the scripts if that's worthwhile.. I corrected the tests to work with windows path separators - it should rerun the build.. The appveyor test failed on node 4, but it seems to be unrelated - can those tests be re-run?. I can back out this change, but package is a reserved keyword and shouldn't be referenced without quotes.. Will do. ",
    "ricky": "Thanks. I'll get those test put together by Monday.. Node 4 test failure(s) appear to be unrelated... \ud83d\udc40 . I didn't add a test because it didn't seem to be explicitly tested in the other commands, but I'm not opposed to doing so.. Yeah, I just created a very similar test in this branch, which caught that fact that the early exit in bd83ae6 actually returns a non-zero exit code. So, I think I should revert back to the original behavior in 7c968cb. Do y'all have a preference for doing so with a new commit or dropping the commit from the branch?. Revert in 07df0d5, test in 61ef203. While bootstrap uses semvar.satisfies when looking up local packages for the internal dependency graph, it otherwise just uses the version string to group like dependencies.\nSo, hoisting common versions turns out to be a straight string comparison on the values in package.json files. Whether this is a feature or a bug is question for the original authors. My guess is that someone felt that semvar matching under-the-hood was a more complex solution than simply putting the onus on the end users to manually synchronize their package dependencies.\n\nIs the recommended approach to avoid the duplication by being as generic as possible when declaring dependencies? For example, \"react\": \"15\" instead of \"react\": \"^15.0.0\".\n\nIMO, what's necessary is to be as consistent as possible, rather than as generic as possible. For example, if you have two packages that truly depend on \"react\": \"^15.0.0\", then make sure they're declared w/ the same string (always \"react\": \"^15.0.0\", and not \"react\": \"15.x.x\" or \"react\": \"^15.1.0\" in some packages). This may require a little manual intervention when using npm install --save and how much of a PITA that is obviously scales linearly with the number of packages in your project.... I think #822 is is heading down that road. (Although, it lacks a --git-to/--until equivalent.). AFAIK, exactly what you're suggesting was done in https://github.com/lerna/lerna/pull/844. Not sure if there's more to it than that.. > ad.1 It detects ONLY changes in the packages directory; root directory changes like package.json or lerna.json changes are NOT detected\nThat is intentional, as it is only meant to manage packages that live in locations specified by lerna.json#packages, which defaults to packages/. You can add \".\" to this list if it fits your use case. The most common case is probably where all \"publishable\" packages live under packages/, and I think it's worth thinking about whether it would be better to capture these top-level dependency changes that should trigger updates with with a new private package under packages/ instead of in the root package.json. That, of course, depends on your specific needs.\n\nad.5. if the changed files are not staged, they are not committed\n\nUnless you're using --skip-git, changes that lerna publish makes should get committed (and pushed). If there were other unstaged/committed local changes, that would be outside the purview of the publish command.\nCaveat: Since pushWithTags is called after a successful npm publish, it looks like it will not push your git changes if you --skip-npm.\n\nad.6 prepublish scripts are NOT run, or to be more precise [...] an attempt is made to run packages/package_name/scripts/prepublish.js\n\nLooks like you're right about that one: https://github.com/lerna/lerna/blob/master/src/commands/PublishCommand.js#L603-L611 \nThat does seem a bit of an overly specific solution.... Fixed in ceb1fe0. ceb1fe0. Removed in ceb1fe0. Fixed in 73f492a. Good call. Fixed in bd83ae6.. ",
    "cary-smith": "Thank you for making this the default behavior! Just started using lerna and ran into this issue with our own internal npm via Nexus. . ",
    "dptoot": "Oh I agree that is the issue :) \nUnfortunatley it appears that Lerna is causing this by improperly re-writing the package.json files during bootstrapping.  The lerna package cache files are fine but for some reason the real package json files are being altered and only re-written with a dependecies seciton.  Somehow all other aspects of the original package json files have been removed.  It is doing this for each package json file in each package within my packages dir.. I will have to wait until the next explosion happens :)\nI hope it doesn't!   I will close this issue if so.. Closing this for now as I haven't been able to reproduce.  Let's all just assume I have no idea what I am doing.  thanks for the help guys :+1: . We are running npm 4 and getting a similar error\nlerna ERR! exec Errored while executing 'npm outdated' in 'reaxl'\nlerna ERR! execute Error: spawn npm ENOENT\nlerna ERR! execute     at notFoundError (C:\\Users\\jelewis1\\AppData\\Roaming\\npm\\node_modules\\lerna\\node_modules\\cross-spawn\\lib\\enoent.js:11:11)\nlerna ERR! execute     at verifyENOENT (C:\\Users\\jelewis1\\AppData\\Roaming\\npm\\node_modules\\lerna\\node_modules\\cross-spawn\\lib\\enoent.js:46:16)\nlerna ERR! execute     at ChildProcess.cp.emit (C:\\Users\\jelewis1\\AppData\\Roaming\\npm\\node_modules\\lerna\\node_modules\\cross-spawn\\lib\\enoent.js:33:19)\nlerna ERR! execute     at Process.ChildProcess._handle.onexit (internal/child_process.js:215:12)\nlerna ERR! execute  callback with error\nlerna ERR! execute  { Error: spawn npm ENOENT\nlerna ERR! execute     at notFoundError (C:\\Users\\jelewis1\\AppData\\Roaming\\npm\\node_modules\\lerna\\node_modules\\cross-spawn\\lib\\enoent.js:11:11)\nlerna ERR! execute     at verifyENOENT (C:\\Users\\jelewis1\\AppData\\Roaming\\npm\\node_modules\\lerna\\node_modules\\cross-spawn\\lib\\enoent.js:46:16)\nlerna ERR! execute     at ChildProcess.cp.emit (C:\\Users\\jelewis1\\AppData\\Roaming\\npm\\node_modules\\lerna\\node_modules\\cross-spawn\\lib\\enoent.js:33:19)\nlerna ERR! execute     at Process.ChildProcess._handle.onexit (internal/child_process.js:215:12)\nlerna ERR! execute   stack: 'Error: spawn npm ENOENT\\n    at notFoundError (C:\\\\Users\\\\jelewis1\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\lerna\\\\node_modules\\\\cross-spawn\\\\lib\\\\enoent.js:11:11)\\n    at verifyENOENT (C:\\\\Users\\\\jelewis1\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\lerna\\\\node_modules\\\\cross-spawn\\\\lib\\\\enoent.js:46:16)\\n    at ChildProcess.cp.emit (C:\\\\Users\\\\jelewis1\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\lerna\\\\node_modules\\\\cross-spawn\\\\lib\\\\enoent.js:33:19)\\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:215:12)',\nlerna ERR! execute   errno: 'ENOENT',\nlerna ERR! execute   code: 'ENOENT',\nlerna ERR! execute   syscall: 'spawn npm',\nlerna ERR! execute   killed: false,\nlerna ERR! execute   stdout: null,\nlerna ERR! execute   stderr: null,\nlerna ERR! execute   failed: true,\nlerna ERR! execute   signal: null,\nlerna ERR! execute   cmd: 'npm outdated',\nlerna ERR! execute   timedOut: false }. I believe the issue lies with these declarations being exact.  Any references with carets seem to have been updated correctly.. I think this is a non-issue. @MatejMazur I believe omitting the scope flag entirely from your command would allow your exec to run in all packages by default.\nHope this helps.. You are absolutely right!  Uninstalling lerna globally and using the local to init seemed to work the trick.  thanks!. ",
    "ubershmekel": "I found this issue because I also just got \n\nlerna ERR! execute npm ERR! No name provided in package.json\n\n2 package.json files were modified by lerna, they only had a dependencies section left which was the union of the devDependencies and dependencies. After reverting these changes, lerna succeeded. Strange stuff.. After reading lerna-debug.log I think I understand what's going on. The mangling of package.json is just how lerna works. Lerna npm installs what it thinks should be installed by modifying package.json and replacing it back when it's done. So if interrupted or failing unexpectedly you get that intermediate state.\nMy specific issue was having a file: dependency for a package that was in packages. I guess that caused lerna to crash after it succeeded linking in node_modules which caused the next run to succeed.\n@evocateur if you're interested I can open a separate issue, though I'm all set on my end.. I have a similar setup. I run flow on each package folder separately, but it would be nice to be able to run flow on the whole thing at once to simplify the test script.. ",
    "jacekjagiello": "@ubershmekel I have the same problem, I also have linked dependency using file:. +1 for issue. ",
    "futagoza": "I thought about that as well, but then wouldn't that conflict with existing build setups?\nIf you use a different flag like -p, --conventional-preset then there is no conflict, as well as no need to add a check to see if the flag has a value or not, reducing the chance to break existing build setups that use the --conventional-commits boolean flag.\nIf it is deceded to just extend the boolean flag --conventional-commits, then I suggest you add the check, and if it finds no value, give the developer a warning rather then an error.. ",
    "magalhas": "I believe so. Are you going to drop the progress bar?. ",
    "jony89": "having the same issue : \n\nlerna info version 2.9.0\nlerna info versioning independent\nlerna info Bootstrapping 4 packages\nlerna info lifecycle preinstall\nlerna info Installing external dependencies\nlerna info hoist Finished installing in root\nlerna ERR! execute callback with error\nlerna ERR! Error: Command failed: npm install --global-style\nlerna ERR! npm ERR! cb() never called!\nlerna ERR!\nlerna ERR! npm ERR! This is an error with npm itself. Please report this error at:\nlerna ERR! npm ERR!     https://github.com/npm/npm/issues\nlerna ERR!\nlerna ERR!     at Promise.all.then.arr (/usr/local/lib/node_modules/lerna/node_modules/execa/index.js:236:11)\nlerna ERR!     at \nlerna WARN complete Waiting for 3 child processes to exit. CTRL-C to exit immediately.\n\nTried even npm clear cache --force\nnpm : v5.8.0\nnode : v9.10.0\non mac\n. ",
    "remotezygote": "Was it a conscious decision to ignore packages under node_modules directories in the latest RC? I saw nothing about that in any release notes. I'm just pointing out that something that worked perfectly in rc.3 does not work at all in rc.4. Regardless of the words used, I thought it important to point out a workflow that worked great before the latest RC, and works not at all in the latest RC.. FWIW, the reason we've ended up on a hybrid approach is because lerna bootstrap is so unbelievably slow with dependencies spread all over. Lerna is still a great tool to run commands in all packages and publish new versions, even if you don't use the bootstrapping logic.. ",
    "brianveltman": "https://gist.github.com/brianveltman/a8a8cfe078ff646eb58165225cbbb553 there you go\nLooks like something with your PR #787 . Unfortunately not.. Maybe I'm just a bit confused. RC.4 has the NPM look as output. I tried it with NPM and then yarn, yarn was faster, but the output looks like NPM. Is this intended with #779?. ",
    "tyler-johnson": "Hmm yes, after more thought I realize that fixing it one way would lead to the inverse issue, so I think we will stick with our current solution until Lerna can build the dep tree in order.\nThanks!. So I keep hitting this issue so I did some investigating. It seems like in my case the issue is that @lerna/symlink-binary gets a different version of @lerna/package then everything else. As a result, this instanceof check fails.\nIn my own code, I try to avoid instanceof checks for this exact reason. NPM tends to install multiple copies of the same packages which leas to this issue. Instead I like to attach a really specific, hidden property to classes that can be checked for.. I keep hitting this on different dependencies. If I had to guess, this is on NPM's side.. ",
    "benmccann": "@tyler-johnson can you share some more details on your workaround? Is there a public repo where you use this solution that you can point to? Or can you share the contents of your proxy file here?\nI have lib in my .gitignore, so I'm curious how you create the \"lib/cli.js\" file. Do you have this checked in or when does it get created?. ",
    "azu": "https://github.com/almin/almin is actual case for this issue.\nThis monorepo use following config:\njson\n{\n  \"lerna\": \"2.0.0-rc.4\",\n  \"commands\": {\n    \"publish\": {\n      \"ignore\": [\n        \"example-*\",\n        \"perf-*\",\n        \"*.md\"\n      ]\n    }\n  },\n  \"packages\": [\n    \"packages/*\",\n    \"examples/*\",\n    \"perf/*\"\n  ],\n  \"npmClient\": \"yarn\",\n  \"version\": \"independent\"\n}. I think https://github.com/lerna/lerna/issues/1056 is similar to this issue.\nRough summary:\n| Task       |      npm      | lerna                                  | Disable / Issue                           |\n| ---------- | :-----------: | :------------------------------------- | ---------------------------------------- |\n| Versioning | npm version | lerna publish                        | --skip-git / https://github.com/lerna/lerna/issues/961 |\n| Publishing | npm publish | lerna publish                        | --skip-npm / https://github.com/lerna/lerna/issues/1056 |\n| ChangeLog  |      --       | lerna publish --conventional-commits | Not use --conventional-commits         |\nI think that npm user can get flexibility by running each Task in a sequential order.\n\nRun script before \"Versioning\"  \nVersioning\nRun script after \"Versioning\" \nRun  script before \"Publishing\"\nPublishing\nRun script  after \"Publishing\"\n\nBy contrast, Lerna can not run each Task in a sequential order.\n\nVersioning -> Publishing -> ChangeLog  \n\nhttps://github.com/lerna/lerna/issues/956  point out it.. > lerna exec -- npm publish wouldn't work when one or more of the packages are private. lerna publish respects private packages\nI've created can-npm-publish CLI.\nIt will help lerna exec npm publish pattern.\nlerna exec --bail=false can-npm-publish && npm publish. Also, I've created @monorepo-utils/publish.\nThis script publish packages that are publish-able. (It wrap can-npm-publish.)\nJust replace\n$ lerna exec --bail=false can-npm-publish && npm publish\nto \n$ monorepo-utils-publish. I've met same issue.\nlerna import throw following error when import https://github.com/textlint/gulp-textlint.\nlerna: 2.2.0 (2.4.0 also throw error)\n```\nlerna info 07c79df\nlerna info 58b1109\nlerna info f903908\nlerna ERR! execute callback with error\nlerna ERR! execute  Failed to apply commit f903908.\nlerna ERR! execute Error: Command failed: git am -3\nlerna ERR! execute error: Failed to merge in the changes.\nlerna ERR! execute Applying: add example and test\nlerna ERR! execute Using index info to reconstruct a base tree...\nlerna ERR! execute M    packages/gulp-textlint/package.json\nlerna ERR! execute Falling back to patching base and 3-way merge...\nlerna ERR! execute Auto-merging packages/gulp-textlint/package.json\nlerna ERR! execute CONFLICT (content): Merge conflict in packages/gulp-textlint/package.json\nlerna ERR! execute Patch failed at 0001 add example and test\nlerna ERR! execute The copy of the patch that failed is found in: .git/rebase-apply/patch\nlerna ERR! execute When you have resolved this problem, run \"git am --continue\".\nlerna ERR! execute If you prefer to skip this patch, run \"git am --skip\" instead.\nlerna ERR! execute To restore the original branch and stop patching, run \"git am --abort\".\nlerna ERR! execute\nlerna ERR! execute Rolling back to previous HEAD (commit 6a53d00c19fb7a55c62b981c4b1196f4b9a3e0e6).\n(node:58998) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 3): TypeError: Cannot create property 'exitCode' on string 'Failed to apply commit f903908.\nError: Command failed: git am -3\nerror: Failed to merge in the changes.\nApplying: add example and test\nUsing index info to reconstruct a base tree...\nM   packages/gulp-textlint/package.json\nFalling back to patching base and 3-way merge...\nAuto-merging packages/gulp-textlint/package.json\nCONFLICT (content): Merge conflict in packages/gulp-textlint/package.json\nPatch failed at 0001 add example and test\nThe copy of the patch that failed is found in: .git/rebase-apply/patch\nWhen you have resolved this problem, run \"git am --continue\".\nIf you prefer to skip this patch, run \"git am --skip\" instead.\nTo restore the original branch and stop patching, run \"git am --abort\".\nRolling back to previous HEAD (commit 6a53d00c19fb7a55c62b981c4b1196f4b9a3e0e6).'\n(node:58998) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\n```\nEdit(2017-10-24): \nI've used --flatten and success imports.\n. ",
    "enriquecaballero": "This seems to be happening again. For some reason Lerna keeps creating a release in a changelog with the exact same release points of the previous release. Any idea why this is happening? I'm on an independent style Lerna repo.. @paulblyth I have not. Sometimes it happens, sometimes it doesn't \u2015 sometimes it happens for about 5+ releases in a row and then it stops again. It's really frustrating. Does it happen on all of your packages or only some of them? It only happens on some my packages; others seem to release fine.. ",
    "malyw": "Hey @noherczeg , thanks for revisiting this.\nIn my case we use Git for development, but then deliver project for the customers, which can use anything.\nIn that case we want to avoid \"lerna botstrap\" to throw an error \"This is not a git repository\" as it still may be fully functional without it.\nI tried you solution with version 2.0.0-rc4, but seems still there is a problem:\n```\n\nlerna \"bootstrap\" \"--skip-git-check\"\n\nlerna info version 2.0.0-rc.4\nlerna ERR! ENOGIT This is not a git repository, did you already run git init or lerna init?\n```\nOr it's supposed to be available in rc5?. ",
    "steezeburger": "I accidentally published private packages and am now getting 400s when trying to manually unpublish in a specific package/private-package directory. I know unpublishing is frowned upon, but now my private packages are on npm publically. Any ideas what could be causing this?. Sorry to spam this closed issue. I realize it was due to npm changing how unpublishing works. I had to email their support and they removed them for me. Thanks for the quick reply! . ",
    "ChristopheVandePoel": "Sorry, I hit ctrl+enter accidentally.\nI'll add a test asap. I added a test, but did not change the integration test, since there seems to be an issue with yarn supporting file:// as in the existing comment block there.. I'll do that as soon as I can.\nFTR, I ran get-port with 42424 straight in node and it gave me back the port without issue or error. \nIIRC the error during install also showed me that yarn install --mutex network:42424 failed, and that command has to come after get-port has found an open port. \nI have some more ideas how I can test this and will try to do them later today. But what I seem to see here, is that yarn (not lerna) ignores the mutex when it is set as a network in some cases.. ",
    "dan3721": "Is this fixed? I'm experiencing this in 2.0.0\n? Are you sure you want to publish the above changes? Yes\nlerna ERR! execute Error: On branch master\nlerna ERR! execute Your branch is up-to-date with 'origin/master'.\nlerna ERR! execute Changes not staged for commit:\nlerna ERR! execute      modified:   lerna.json\nlerna ERR! execute      modified:   packages/bar/package.json\nlerna ERR! execute      modified:   packages/foo/package.json\nlerna ERR! execute\nlerna ERR! execute no changes added to commit\nlerna ERR! execute\nlerna ERR! execute     at Function.module.exports.sync (C:\\Users\\BusDa001\\AppData\\Roaming\\npm\\node_modules\\lerna\\node_modules\\execa\\index.js:277:26)\nlerna ERR! execute     at Function.execSync (C:\\Users\\BusDa001\\AppData\\Roaming\\npm\\node_modules\\lerna\\lib\\ChildProcessUtilities.js:59:30)\nlerna ERR! execute     at Function.commit (C:\\Users\\BusDa001\\AppData\\Roaming\\npm\\node_modules\\lerna\\lib\\GitUtilities.js:84:39)\nlerna ERR! execute     at PublishCommand.gitCommitAndTagVersion (C:\\Users\\BusDa001\\AppData\\Roaming\\npm\\node_modules\\lerna\\lib\\commands\\PublishCommand.js:612:30)\nlerna ERR! execute     at PublishCommand.commitAndTagUpdates (C:\\Users\\BusDa001\\AppData\\Roaming\\npm\\node_modules\\lerna\\lib\\commands\\PublishCommand.js:582:27)\nlerna ERR! execute     at PublishCommand.execute (C:\\Users\\BusDa001\\AppData\\Roaming\\npm\\node_modules\\lerna\\lib\\commands\\PublishCommand.js:261:16)\nlerna ERR! execute     at PublishCommand._attempt (C:\\Users\\BusDa001\\AppData\\Roaming\\npm\\node_modules\\lerna\\lib\\Command.js:289:21)\nlerna ERR! execute     at C:\\Users\\BusDa001\\AppData\\Roaming\\npm\\node_modules\\lerna\\lib\\Command.js:276:15\nlerna ERR! execute     at C:\\Users\\BusDa001\\AppData\\Roaming\\npm\\node_modules\\lerna\\lib\\Command.js:298:13\nlerna ERR! execute     at C:\\Users\\BusDa001\\AppData\\Roaming\\npm\\node_modules\\lerna\\lib\\commands\\PublishCommand.js:495:11\nlerna ERR! execute  callback with error\nlerna ERR! execute  { Error: On branch master\nlerna ERR! execute Your branch is up-to-date with 'origin/master'.\nlerna ERR! execute Changes not staged for commit:\nlerna ERR! execute      modified:   lerna.json\nlerna ERR! execute      modified:   packages/bar/package.json\nlerna ERR! execute      modified:   packages/foo/package.json. Same here:\n? Are you sure you want to publish the above changes? Yes\nlerna ERR! execute Error: On branch master\nlerna ERR! execute Your branch is up-to-date with 'origin/master'.\nlerna ERR! execute Changes not staged for commit:\nlerna ERR! execute      modified:   lerna.json\nlerna ERR! execute      modified:   packages/bar/package.json\nlerna ERR! execute      modified:   packages/foo/package.json\nlerna ERR! execute\nlerna ERR! execute no changes added to commit\nlerna ERR! execute\nlerna ERR! execute     at Function.module.exports.sync (C:\\Users\\BusDa001\\AppData\\Roaming\\npm\\node_modules\\lerna\\node_modules\\execa\\index.js:277:26)\nlerna ERR! execute     at Function.execSync (C:\\Users\\BusDa001\\AppData\\Roaming\\npm\\node_modules\\lerna\\lib\\ChildProcessUtilities.js:59:30)\nlerna ERR! execute     at Function.commit (C:\\Users\\BusDa001\\AppData\\Roaming\\npm\\node_modules\\lerna\\lib\\GitUtilities.js:84:39)\nlerna ERR! execute     at PublishCommand.gitCommitAndTagVersion (C:\\Users\\BusDa001\\AppData\\Roaming\\npm\\node_modules\\lerna\\lib\\commands\\PublishCommand.js:612:30)\nlerna ERR! execute     at PublishCommand.commitAndTagUpdates (C:\\Users\\BusDa001\\AppData\\Roaming\\npm\\node_modules\\lerna\\lib\\commands\\PublishCommand.js:582:27)\nlerna ERR! execute     at PublishCommand.execute (C:\\Users\\BusDa001\\AppData\\Roaming\\npm\\node_modules\\lerna\\lib\\commands\\PublishCommand.js:261:16)\nlerna ERR! execute     at PublishCommand._attempt (C:\\Users\\BusDa001\\AppData\\Roaming\\npm\\node_modules\\lerna\\lib\\Command.js:289:21)\nlerna ERR! execute     at C:\\Users\\BusDa001\\AppData\\Roaming\\npm\\node_modules\\lerna\\lib\\Command.js:276:15\nlerna ERR! execute     at C:\\Users\\BusDa001\\AppData\\Roaming\\npm\\node_modules\\lerna\\lib\\Command.js:298:13\nlerna ERR! execute     at C:\\Users\\BusDa001\\AppData\\Roaming\\npm\\node_modules\\lerna\\lib\\commands\\PublishCommand.js:495:11\nlerna ERR! execute  callback with error\nlerna ERR! execute  { Error: On branch master\nlerna ERR! execute Your branch is up-to-date with 'origin/master'.\nlerna ERR! execute Changes not staged for commit:\nlerna ERR! execute      modified:   lerna.json\nlerna ERR! execute      modified:   packages/bar/package.json\nlerna ERR! execute      modified:   packages/foo/package.json. ",
    "iMoses": "@evocateur If we know where the issue is, why aren't we fixing it?\nWill it be fixed in the near future?. @evocateur I can make a PR, no problem, but I'm not sure what the best way to test it. \nI haven't seen any tests verifying behavior when no changes were made.\nAny pointers here to get me started? . ",
    "idmitme": "One way to fix this is by enabling yargs strict mode:\n\nAny command-line argument given that is not demanded, or does not have a corresponding description, will be reported as an error.\nUnrecognized commands will also be reported as errors.\n\nThis way sounds right, but I've just started using lerna and can't say if this solution is fine or there are some special CLI use cases which might not work in strict mode. Or it might collide with this feature request.\nAnd the other option is to create default command handler .command('*', fn) and throw this error manually.\nPlease let me know what you think, and I'll make PR.. ",
    "superkhau": "\nIf we don't prompt for them, what version are we supposed to use? Private packages are intended to still be versioned, just never published.\n\nYou're right. Maybe we should add an option to skip versioning instead?\nPackage X@1.0.0-alpha is marked as private, skip versioning?\nThat way, the CLI tool can skip the other weird prompts below too.\nAs for sending a PR, my schedule is pretty full and won't be available again till beginning of June. I'll try to send then if someone doesn't get around to it before me. ;). ",
    "donaldpipowitch": "\nPrivate packages are intended to still be versioned, just never published.\n\nCould we opt-out from this behaviour somehow?. Well it \"is\" versioned in the sense of \"it has a version\". But I don't ever want or need to update the version, because they are never consumed by anyone.. Well it \"is\" versioned in the sense of \"it has a version\". But I don't ever want or need to update the version, because they are never consumed by anyone.. Great feedback and ideas. I'll check them. Thank you for taking the time to check this.\nYeah, I still want to add ws as a proper dependency. I had it some time ago, but it couldn't build correctly so I wanted to introduce workspaces in smaller steps.\nReally thank you.. Great feedback and ideas. I'll check them. Thank you for taking the time to check this.\nYeah, I still want to add ws as a proper dependency. I had it some time ago, but it couldn't build correctly so I wanted to introduce workspaces in smaller steps.\nReally thank you.. Sadly I can't spot a real difference. I tried to use npm run everywhere with the same result. I haven't tried including the ws into the workspaces directly, but I can't imagine how this would affect Lerna \ud83e\udd14 I'll revert the test script for now.\nFeel free to close this issue, if you want.. > --scope application is a bug.\nI don't know if I ever said this before, but... It is actually a feature for me currently \ud83d\ude05 I'd be happy if I could keep it. I want to opt-out from versioning private packages completely.. > --scope application is a bug.\nI don't know if I ever said this before, but... It is actually a feature for me currently \ud83d\ude05 I'd be happy if I could keep it. I want to opt-out from versioning private packages completely.. (Side note, because I just read it and maybe it isn't widely known: file: is deprecated. You can use link: instead.). Sorry, I misread something. I had a different protocol in mind, not file:. It had nothing to do with yarn. . ",
    "brianmhunt": "Cool, thanks for the heads up.  Sorry I didn't see the PR when searching.. ",
    "bjankord": "Thanks for the quick reply @evocateur. Yeah, this was user error on my part, looks like a commit snuck in master that did change all the packages when I was doing a release. Threw me off as I thought we just had 1 package change in master. This can be closed.. From the project's readme:\nRun the tests for all packages that have changed since master:\n$ lerna run test --since master. No worries, glad to help out.. ",
    "treshugart": "@evocateur \nThis is the same as only-updated in that it acts as a flag if no ref is provided. However, it differs in that it allows you to provide a ref. For our use case, we'd probably just use master as the target since we can't currently get the target branch for a PR in BitBucket Pipelines. However, Travis does allow this, so one would probably run it against TRAVIS_BRANCH in a PR and leave it off if run from master.\nWith the current functionality, it would be very easy to have a build run against packages that actually haven't changed if you don't release on every commit or push, for whatever reason be it feature branches that eventually go into master or if you accumulate commits in master and release every so often.. I spoke to @jameslnewell about this internally, and he seemed to think that being able to specify a ref would be useful, too. Maybe we could work on merging the two ideas into this?. Okay, cool. Would you prefer I bring in latest master and rework the --only-updated flag in with this functionality (so we don't lose the extra tests with the first PR)? Or do you want to revert it and then use only this one?\nEither way, I'll do the following:\n\n[x] Rename --scope-updated to --since\n[x] Squash back to a single commit\n[x] Add docs (I intentionally kept this out until everything was hashed out)\n. Merged and squashed commits after merge. Will annotate updates.. Hmm, I don't think that rebase went as expected. I'll fix up.. @evocateur ready for re-review. Not sure why AppVeyor is failing. I can't seem to spot the error, but it looks like something might have timed out? I ran the tests locally and everything seemed fine. I'll also have someone from my team review, too.\n\nEDIT\nIt looks like I made this comment just after you had commented. Thanks for letting me know :). @chrisui I personally don't have a use case for it (yet?), but it sounds like it could be useful. I would vote for keeping this PR as is with a plan to implement --until (or whatever) after it lands.. Hey @evocateur, I hate to be a pest, but I was hoping I could get a review / merge soon. We're currently running off of my fork and it seems that quite a few others need this as well. Cheers for the time you've spent already.. No problem. Totally understand. Thanks for the review and merge!. Hey @kanzelm3, in #822 I'm working on moving --only-updated to be called --since and also accept an optional ref argument (like master or [commit]) that works for all commands where --scope does (like bootstrap).. @evocateur not sure if you're responding to me, or @kanzelm3, but I'd like to clarify a couple things.\n\nI'm not sure I'm comfortable with making the staggeringly complex bootstrap command even more complex just to save a few cycles on CI. If such a solution were compact, easy to reason about, and well-tested, I'd be open to a PR.\n\nOur use case is similar. In our case, bootstrapping is 11+ mins and growing. #822 would allow smaller changes to take less than a minute in CI. In terms of complexity, the implementation of --since is more lightweight than --only-updated and works for everything that --scope works for.. No worries at all, just wasn't sure :). Why not add a name and \"private\": true?. I've implemented a --since option in #822 that defaults to the latest tag, if no ref is specified. This should sate your needs if specifying --since [ref]. It will apply to all commands --scope does.\nSomeone else also requires the same functionality for bootstrapin #847.. So stoked to see this go in so quick! Thank you @ricky?. Oh, awesome. Thank you! I'm running a fork so I can have #847 so I probably just need to update. I'll reopen if there's any issues and update the description.. This doesn't seem to be working for options like stream and parallel.. Ok, I found the core issue. I'll raise a separate issue outlining the problem and will fix it.. Wrote a test to confirm:\njs\nit(\"should prefer durable options over yargs defaults\", () => {\n  // yargs does this when default values are specified\n  const instance = new TestBCommand([], {\n    testOption: false,\n    testOption2: 1\n  }, testDir);\n  expect(instance.options.testOption).toBe(\"b\");\n  expect(instance.options.testOption2).toBe(\"b\");\n});. It's kinda the whole idea of defaults, though, to provide a value when one isn't specified. If we removed all specified defaults from yargs and had a defaults for each command that we merge in later then that would work, too.\nI'm hesitant to raise an issue with yargs as this really feels like the intended behaviour. I think it can probably be worked around it easily if yargs defaults just aren't used. It makes some sense, too, because there are several other places that can specify options within Lerna.\nI'm spending some time spiking some solutions. I'll PR what I have when ready and we can go from there, maybe.. Implemented in #898.. Re tests, I'm happy to write one. I may need a little guidance in the preferred way to do this, though. It wasn't immediately apparent if there was an existing method in how you would approach it.. I saw similar helpers in the tests for the updated command, however, in order to reduce the amount of changes, I decided to write a few extra lines of code rather than refactoring them out into a common lib.. Good samaritan fix.. TODO. This isn't part of the functionality that I'm adding, but I wanted to make sure this behaviour was tested in this manner, especially since I'm testing the combination of --scope and --since.. Why is it that package-3 appears in the list when package-2 has changed? This is the default behaviour of the UpdatedPackagesCollector.\nIt would appear that packages that have devDependencies on packages that have changed get added to the list. This is more of a question than anything else, I guess, so that I understand it better.. I moved this to just after the --scope arg since it relates very closely to it.. I noticed while doing my updates that --since when used with lerna ls seems to make lerna updated redundant (except that one shows versions and one doesn't).. Boyscout: Instead of accessing on this or options multiple times, I destructured here.. While this is a boyscout, it's also a fix for the lines I added to the test to make sure that since overrides the latest tag, if there are tags present.. @evocateur (mentioning since I want to place special emphasis here), I removed the warning if no tags exist because it doesn't really feel like a warning, especially with the addition of --since as an empty arg is implicitly the latest tag (or initial commit).\nIf there's any contention here, or it's a breaking change, I'm more than happy to add it back in.. This was the addition that caught the bug where the latest tag would override the specified ref in --since. I annotated the spot above that fixes it.. Boyscout: kept assignment but destructured and converted to const instead.. Since we're not filtering anymore, we can use the const.. Boyscout: kept assignment but destructured and converted to const instead.. Implementing defaults actually caught this issue where this should have been passed (bail defaults to true) but was never actually defaulting to true due to the way we're testing it by bypassing yargs (we pass flags directly to the constructor).. Yeah, I didn't like having to do it that way. Maybe something Yargs could do here (as a breaking change), would be to default to undefined instead of false. Other than that, this doesn't feel like an issue with Yargs, but more of how Lerna is using their defaults in conjunction with other forms of obtaining options that are merged in with them. The only alternative would be for Lerna to insert its durable options in between user options that yargs parses and their defaults they automatically merge in.\nDo you think it's worth raising an issue for one of these for Yargs and referencing this PR?. Same. I went for the cheapest option, in terms of amount of changes to Lerna and waiting for Yargs to address upstream (if they even would). See comment above about possibly raising an issue.. @evocateur I was just raising this issue, and in describing the rationale, I thought of a possible solution. What if instead of merging the durable options after yargs parses the command, we read them before and pass them in as the yargs options defaults?. ",
    "kraenhansen": "@jvivs Have you guys made progress? I am wondering the same.\nIf you're still going at this, the thread on introducing yarn in lerna has some interesting insights: https://github.com/lerna/lerna/issues/371\n@seansfkelley published https://github.com/palantir/yerna which seems to tackle some of the issues that stems from a yarn+lerna environment.. ",
    "jcreamer898": "Got it. Thanks!. ",
    "trompx": "Hello @evocateur,\nAfter reading a lot of threads and browsing tenth of boilerplate repos, I have hard time to figure what is the best way to import local packages with the current version of lerna.\nI have a monorepo with multiple websites, all packages are private (will probably never published them) so basically I could just import with relative path, but just like trotzig, I like the way lerna mutualize the common dependencies in the root node_modules and speed up my setup.\nI followed the solved issues at the end of https://github.com/lerna/lerna/issues/501 but could not find a correct setup.\nWhen you say \n\nemploy lerna's default symlinking strategy\n\ndo you mean, set package in dependencies with a fixed version like:\n\"dependencies\": {\n    \"package-a\": \"^0.0.0\"\n}\nOr the way to go is:\n\"dependencies\": {\n    \"package-a\": \"file:../package-a\"\n}\nA note on private packages and relative path would be great on the main readme.\nThank you for this great tool anyway!. Sorry but I don't get it. If I don't bootstrap, I will not get any symlink if multiple packages use the same external library (like react, node-sass, immutable etc.) thus installing them in the local node_modules instead of the root one.\nLooks like I am not the only one struggling to setup a working dev workflow with unpublished packages as seen here https://github.com/lerna/lerna/issues/878.\nWhat would be the command to get symlink for both external and local packages while using the file path for the local one (\"package-a\": \"file:../package-a\"), is lerna bootstrap --hoist all I need?\n. ",
    "pospi": "Makes sense to me. I'm fine with whichever API fits the lerna paradigm\nbest, so long as I can squeeze the time savings out of it!\nOn 23 May 2017 at 03:22, Daniel Stockman notifications@github.com wrote:\n\nI'm increasingly desiring this myself, dealing with synchronization of\nhoisted modules with npm (so it's not just a yarn issue). While you\ncould achieve most of this with a artisanally-crafted lerna exec\n--scope  -- yarn add  && lerna bootstrap --hoist, it has the\nawkward side-effects you've noted.\nI'm only concerned about the namespacing of the commands you suggest. add\nand remove are a bit ...broad? I'd feel better if the operation (add,\nremove, etc) was an argument of a single entry point, like lerna\ndependency (aliased to lerna dep for fewer keystrokes).\nHow does this API sound to you?\nlerna dep add [--dev] [@version] [..glob]\nlerna dep remove  [..glob]\nlerna dep upgrade  [..glob]\nlerna dep sync [..glob]\nI figure allowing one or more package globs make sense, defaulting to **\nlike the --hoist option. We'd definitely want to support the yarn upgrade/npm\ninstall @ use case.\nThe sync subcommand would only be necessary for --hoist-configured repos,\nto facilitate manual root upgrades. Not sure if it's really necessary, but\nI definitely feel this specific pain (which would largely go away with\nthe availability of the other proposed commands).\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/lerna/lerna/issues/833#issuecomment-303165260, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAatJGzery7HWmKxbcaPxQ8YgfIeHpa9ks5r8cRlgaJpZM4NiDs7\n.\n. \n",
    "jasonkarns": "I've attempted the hand-crafted command listed above (lerna exec --scope <glob> -- yarn upgrade <pkg> && lerna bootstrap --hoist) but that errors out since the managed package does not contain a yarn.lock.\nshould there be yarn.lock files in managed packages? I was assuming no but...\n[edit] I guess it's still recommended that managed packages not have lockfiles when hoisting, which makes the suggested workaround... not an option? https://github.com/lerna/lerna/issues/823#issuecomment-302801592. ",
    "sachnk": "Hi --\nThanks for the great work. I'm currently using lerna add with no problems. Any recommended ways to  achieve the corresponding lerna remove functionality?\n . ",
    "shrugs": "Workaround for now:\nlerna exec -- yarn remove my-package. ",
    "fyodorvi": "lerna exec -- yarn remove my-package\nErrors out and doesn't update the lock file, workaround is to run bootstrap afterwards to generate the lock file.\nlerna exec -- yarn remove my-package || lerna bootstrap. Hello there, I managed to fully reproduce the error, here is the repo with minimal config:\nhttps://github.com/fyodorvi/lerna-hoist-bug\nWe have two packages in that repo: lerna-hoist-test-wheel and lerna-hoist-test-tyre. Wheel depends on tyre.\nNote that wheel version 0.1.0 is published to npm - that is very important.\nInitially all versions match: wheel and tyre have 0.1.0 version, wheel depends on tyre as ^0.1.0.\nSteps to reproduce:\n\nCheckout the repo, run npm install\nRun npm run lerna - it will run bootstrap with hoisting. Everything should be fine at that point.\nGo into lerna-hoist-test-tyre and manually bump the version in package json to 0.2.0\nRun npm run lerna\n\nResult:\npackages/lerna-hoist-test-tyre is deleted.. @evocateur From reading docs on workspaces my understanding is that it by default hoists dependencies, which I don't need at all (I'm building docker images out of each package so I need to pack dependencies with each package, I don't need to pack more than I need for a certain package).. ",
    "Timer": "Hi! We'd love to see this merged for https://github.com/facebookincubator/create-react-app/pull/2673; is there anything I can do to help?\nSpecifically, we're trying to run yarn install --no-lockfile during bootstrap.\nIf not, take this as a friendly bump! \ud83d\ude04 . Cheers, thanks so much!. This is preventing the usage of Lerna 3.x in Create React App as well.\nI would've expected --no-verify-access to skip checking /-/whoami.. ",
    "fsahmad": "Same issue on windows 7. ",
    "cttttt": "+1\nWould be nice to have a way to run everything (including prepublish scripts) but without actually affecting:\n\nThe local repo.\nGit remotes.\nThe npm repository.\nThe working directory.\n\nThe current best option, lerna publish --skip-git --skip-npm does a little too little and a little too much:  It only bumps the package dependencies in package.json files in the Lerna tree, so it can't really be treated as a \"dry run\".. Understood.  Our problems were actually during the pre-publish steps, so @tomccabe 's suggestion is a legit one:  Just run that step on each package in CI in order to vet pull requests.. ",
    "LucaT1": "Same here. Have you found a fix?. ",
    "tivac": "Yeah, @emmenko's comment is why I linked #460. His comment is exactly the behavior I was expecting and why I filed the issue.\nFor fixed versioning I think lerna should definitely support the %s placeholder like npm, though note that there's no v prefix by default. To match npm your last example should output Release 1.0.0 finally.\nI even assumed that %s would be supported in lerna.json when I first started with it, before I realized that lerna wouldn't use command args from lerna.json.. #851 is another npm@5 issue similar to this one.. It seems like you could add a .npmrc file to the root of your lerna install, and then set\nini\npackage-lock = false\nin it? Can't test it atm but seems plausible.. It does work, though you need a .npmrc file for the root and every child package. A little annoying, but better than not being able to use bootstrap --hoist.. Or lerna exec -- npm i for cross platform support.\nShould we switch to recommending that by default? I'm biased but think so.. Yup, sorry everybody, I totally misunderstood the purpose of npm i packages/*. It isn't to run npm i within each of those directories, it's to add them as a file dependency there.\nI ran npm i packages\\<package> manually for each one of my packages. It added new file dependencies at the root level for each of the child packages. I also previously had manually hoisted all my devDependencies to the root.\nBut now what? Should npm i from the root install the dependencies of those file: packages?. I was running into some trouble with that workflow last night but think I finally got things cleaned up and functioning more cleanly!\nThanks for your patience as I stumbled through this process.. @brentertz You can, but you need a .npmrc for the root and each package.\nhttps://github.com/lerna/lerna/issues/856#issuecomment-317462625\n\ud83d\ude13 . @evocateur That sounds awesome, cosmiconfig looks great!. I run lerna publish from cmd.exe without issues in Windows 10.. I run lerna publish from cmd.exe without issues in Windows 10.. @zenflow Sorry, just got back to the right machine. In case it still helps...\n$ git --version\ngit version 2.13.0.windows.1. @zenflow Sorry, just got back to the right machine. In case it still helps...\n$ git --version\ngit version 2.13.0.windows.1. :tada:. I'm currently working around this by running\n```bash\n\nnpx lerna exec -- npm i\n```\n\nafter each lerna publish. It's not ideal but it at least gets things stabilized again.\n@evocateur what's your argument against nested lockfiles? I've got all my devDependencies hoisted to the root, but I still want to have consistent installs of the regular dependencies for everything in my packages dir.\nI'm currently using npm ci for installs and I definitely don't want to let it just randomly decide to upgrade a nested package.. I'm using relative file specifiers in modular-css, but I've still got dependencies in all my packages because I can't hoist those to the root. Lerna looks to be doing the same thing?\nhttps://github.com/lerna/lerna/blob/f674f354f0260c57d885c181e16c9ce23ac252a8/commands/diff/package.json#L38\nSo I still don't get how you get around having leaf node package-lock.json files. I've got one in the root for all my devDependencies just like lerna, but that doesn't help w/ anything in packages/ does it?\nWould definitely love to know how I could improve my setup or workflow for using lerna@3 in modular-css so I appreciate any wisdom you can share!. Lerna automatically rewrites local path dependencies to monorepo packages during publishing. It's how I've published the last 9-10 modular-css releases.. I'm running the lerna@3 beta and have moved all devDependencies to the root package.json.\n```bash\n\nnpm i\nlerna exec -- npm i\n```\n\nI've been pretty happy with this workflow so far but I understand that if you're stuck on lerna@2 that doesn't help much.. > What do you mean by relative file specifiers? I don't think I've seen any language about that - did I miss it in the docs?\nHere it is in the npm docs, they call it Local Paths\nAnd here's an example from a lerna@3 project:\nhttps://github.com/tivac/modular-css/blob/2d7d299817acb25e085bca315cf14654ec4df8c1/packages/rollup/package.json#L23\n. I'm using lerna@3\nnpm outdated && npx lerna exec --no-bail -- npm outdated\nSeems to do what you'd expect.. I'm using lerna@3\nnpm outdated && npx lerna exec --no-bail -- npm outdated\nSeems to do what you'd expect.. I prefer using npx over scripts these days. npx lerna works great.. I'm not on the PC that experienced this error currently, I'll be able to check in like... 10 hours.. I'll try with a different token. An explanation of the required token values would be great as it's totally possible that I guessed wrong when setting that up.. Just published https://github.com/tivac/modular-css/releases/tag/v22.1.4 with a token that only had repo:public_repo scope, so \ud83c\udf89!\nThanks for all the feedback & info in the thread everybody, this has been really helpful and saved me from a bunch of digging.. ",
    "kanzelm3": "Sounds like @treshugart is on the right track. I wasn't sure what the best way to implement it was, I just know the use case we have, and it's the same as his.. ",
    "borela": "I am doing that right now but there might be too many combinations for the webpack settings/environment and these packages don't need to be listed on lerna ls at all, only bootstraped.. No problem, I'll add the tests.. @evocateur Sorry for the delay, I added some tests and fixed some merge conflicts. The tests failing are the ones that were failing in the master before, I am not sure if it is related to my changes.. @evocateur Sorry for the delay , I hadn't time to fix the issues in this pull, would this still be accepted or is this feature is already implemented in newer versions?. I actually don't know why the commits were so messed up, I fixed most issues, reverted the merge and sent the new commits.. ",
    "gastonelhordoy": "Hey man, hope this help. \nI'm using cz-lerna-changelog for commit wizard (6) which also detects which package was/were affected by the changes (5). Regarding commit message enforcement, I'm using husky and validate-commit-msg.\nAnd then for generating changelog, I started doing some tests with lerna-semantic-release but didn't complete them because of lack of time... So if you make some progress on that side share your notes!. That's done with different commits, staging only things in a certain package.... Well, that's what one usually does, commit everything that makes sense to go together... but you wanted \"commit messages per package\"...\nAnyways... basically you need to find out how to adapt these tools to your workflow, or maybe adapt your workflow to these tools, whatever makes more sense to you use case.. Read the docs:\nhttps://github.com/atlassian/lerna-semantic-release#lerna-semantic-release\n\nBasically a semantic-release that orders commits based on which package they belong to (uses data from cz-lerna-changelog) and then determines on that what the next release should be.\n. \n",
    "paulblyth": "I'm currently experiencing the same issue @enriquecaballero - did you resolve it?. @enriquecaballero only some packages - seems to be consistently every release for me at the moment but only published a handful of times. I'm wondering if there's a commit message that keeps being picked up for some reason. Yes sorry @danielo515 I didn't mean to hijack; @evocateur I'll try and reproduce separately to the project I'm working on and I'll create a separate ticket for this. ",
    "jadengore": "So if using yarn as the npmClient, hoist will use npm instead of yarn always?. @tricoder42 That would make sense, when I try to run lerna bootstrap it endlessly hangs, which would suggest an interactive mode issue. I think the problem is found here. The loglevel flag does not happen soon enough, so it isn't respected. My guess is there's custom flag implementations for each command. This one is universal across all, so there needs to be some special considerations.\nI added this line to the block I linked, and it properly suppressed the logs:\n```js\n  run() {\n    const { loglevel } = this.options;\nif (loglevel) {\n  log.level = loglevel;\n}\n\nlog.info(\"version\", this.lernaVersion);\n\nif (this.repository.isIndependent()) {\n  log.info(\"versioning\", \"independent\");\n}\n\n```\nThis is from the code above in the constructor of Command.js.. Thanks @evocateur!. ",
    "edmorley": "I spent a while trying to debug/create a reduced STR for why using --hoist plus yarn caused a package-lock.json to be created in one of the sub-package directories. Reading here it seems that this is because lerna has to fall back to npm for parts of the operation, and as such yarn + --hoist is not recommended.\nIf that's the case, a warning message during usage would save a lot of confusion :-) (And perhaps a note saying to use the workspaces support instead?). Many thanks @marionebl :-). Many thanks :-). Hi! Yeah I agree it's not lerna's responsibility to handle setting the token; this issue was just about failing early to limit the damage it causes. I can't seem to find a yarn equivalent to npm whoami - perhaps lerna can just use npm whoami regardless of the value of npmClient?. ",
    "darkobits": "This behavior is pretty obnoxious, especially considering that it also pushes the created commit and tag. I've had to temporarily disable protection on remote branches numerous times to fix the mess this creates.\n```\n$ lerna publish\nlerna info version 2.0.0\nlerna info current version \nlerna info Checking for updated packages...\nlerna info Comparing with .\nlerna info No updated packages to publish. <== SWEET JESUS, WE CAN STOP HERE!!\nlerna info publish Publishing packages to npm...\nlerna info git Pushing tags...\nSuccessfully published:\nlerna success publish finished\n```. Experiencing this same issue. Following packing, Lerna fails to publish with the following error:\n```\nlerna ERR! npm publish --ignore-scripts --tag canary [redacted].tgz exited 1 in '[redacted]'\nlerna ERR! npm publish --ignore-scripts --tag canary [redacted].tgz stderr:\nnpm ERR! Cannot read property 'algorithm' of undefined\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     [redacted].log\n```\nEnvironment:\nNode:  8.9.4\nNPM:   6.4.1\nLerna: 3.3.2\nYarn:  No\nI am publishing to a private Artifactory registry. The structure of my .npmrc file looks like the following:\nregistry=[registry URL redacted]\n_auth=[auth token redacted]\nalways-auth=true\nemail=[e-mail redacted]\ncd-ing into each package directory and running the exact same command that Lerna failed to run does successfully publish each package.\n\nAdditional confusion on my part that might not be relevant/useful to contributors:\nThis seems like it might be related to https://github.com/npm/npm/issues/16723, which is curious because that issue has been resolved. What's even more curious is that when I inspected the NPM debug logfile, it contained the following:\n14 verbose argv \"/usr/local/bin/node\" \"[project root]/.bin/npm\" \"publish\" \"--ignore-scripts\" \"--tag\" \"canary\" \"[redacted].tgz\"\n15 verbose node v8.9.4\n16 verbose npm  v5.1.0\n17 error Cannot read property 'algorithm' of undefined\n18 verbose exit [ 1, true ]\nSo it seems like Lerna is not using my system's version of NPM (6.4.1), but instead using a locally installed, older version (5.1.0). This may have to do with what was discussed in some of the comments above, but it definitely seems to violate the principle of least surprise. \ud83d\ude15 \n. \ud83e\udd26\u200d\u2640\ufe0f\nI can confirm that I also have gitbook-cli as a dependency and the above fixed the issue.\nHoping this will be a temporary fix and we can eventually patch Lerna to ensure it always gets the version of NPM it needs.. ",
    "richburdon": "Happens if any of the sub package.json files are invalid (e.g., hanging ,).\n. Yes, everything is fine with npm4 (not 5). I'd recommend removing the yarn option (it cost me weeks trying to get it to work and working around it until getting the feedback that npm4 is really the only viable option).. Sorry, didn't mean to close it -- yarn is still unresolved.. I have the same problem using npmClient=yarn (and have posted other issues relating to this). I.e., missing packages from sub node_modules, and nothing in the root node_modules (requires running yarn again from the top-level).\nWhich version of npm?\n. Hi @evocateur, thanks. Sorry perhaps that came across badly. I'm not quite sure from the docs what to expect. Lerna is really useful, but I have to run lerna clean && lerna bootstrap --hoist every time I need to install a package in any submodule. This doesn't seem like expected behavior, so would like to be able to provide better feedback to debug. Any suggestions?. The problem occurs with growing complexity. I've built small tests and they work. It's very difficult to strip down a large project until it stops breaking since the errors are hard to repro.\nSo, I should use npm 4 (not npm 5 or yarn?) If I can get something stable so that I don't have to clean/bootstrap every time, then I'll start to dig a bit deeper and try to debug.\nThanks.\n. Thanks again. I'll start here.. I switched to npm 4 and things are better, but installing new modules is still very unreliable when using --hoist.\nFirst, I'm not even sure how to install a new module in a sub package. npm install fails when bootstrap has been used with hoist, because some sister module's dependencies cannot be resolved.\n~~~~\ncd /project/packages/services\nnpm i --save sanitize-html\nnpm ERR! enoent ENOENT: no such file or directory, rename '/project/packages/services/node_modules/.staging/moment-799c059d' -> '/project/packages/util/node_modules/moment'\n~~~~ \nSo I'm manually adding package info to the package.json file (I'm sure that's not the intended use case). But even then, calling my bootstrap script again, usually fails to install the new module. So the only reliable way I can build is to --clean every time I touch any package.json file, which isn't great.\nHowever, the reason for today's issue is that even with --clean sanitize-html which is declared in packages/services/package.json is not install anywhere (neither the root or the sub node_modeuls). No errors.\n~~~~\nlerna bootstrap --hoist --nohoist=grunt-*\n~~~~\nWith debugging I can see sanitize-html is being pruned -- it just doesn't get hoisted (all 400 other packages do):\n~~~~\nlerna sill rimraf /project/packages/services/node_modules/sanitize-html\nlerna verb prune /project/packages/services/node_modules/sanitize-html\n...\nlerna sill execute success\n~~~~. ",
    "paolobueno": "Thanks a lot @treshugart, I'll keep an eye out for your PR and we might use your fork if we need that feature in the meantime.\nIn our use case we have a strict schedule for publishing new versions but have a stable master that we'll often branch out of for feature development, so we really need the ability to point to a specific gitref instead of only having the option to go all the way back to the latest release tag.. ",
    "Tallyb": "package-lock.json can be disabled using npm config set package-lock false\nYou probably also want to add in npm config set save false. ",
    "auskast": "I think this works now with npm@~5.1.0?\nsee https://github.com/npm/npm/pull/17508. ",
    "redonkulus": "@jquense @evocateur is there a minimally reproduce-able example we can provide npm so they can debug this issue? . @evocateur is lerna link convert an easter egg? Should it be documented on https://github.com/lerna/lerna/tree/master/commands/link#readme?. Following up, I'm noticing that within each of my leafs, packages are being duplicated even though they satisfy semver requirements (like the warning above). \nIs the recommended approach to avoid the duplication by being as generic as possible when declaring dependencies? For example, \"react\": \"15\" instead of \"react\": \"^15.0.0\".. @evocateur This should definitely put on the website or somewhere as a best practice or common management approach. A subcommand to help keep versions consistent is something we had to hack together as well. Both would be much appreciated if lerna provided out of the box.. Well apparently the --since flag does this already. Wish I knew this before. I didn't see it listed under the bootstrap docs so I missed it.. @TheNeuralBit Are you going to update the readme with the new option?  The name is similar to the existing option so it could be confusing to users.. Thanks for replying. We have monorepo's with over 50 packages, we don't want to run eslint for all packages if only one package was changed. We do the same thing for unit tests too (via precommit hook). Running tests for all packages when only one changed wouldn't be efficient either. It would lead to engineers just using -n when committing to avoid the hooks.. Forget precommit hooks for a second, that's not the issue that I care about.\nWhy is detecting dirty trees an issue? Just because its not committed yet, doesn't mean the package has not been changed. This worked perfectly fine before the commit a few weeks ago.. I didn\u2019t realize unstaged changes was an accident. I thought it was a feature since it worked and I didn\u2019t see documentation that stated changed only was intended to work in commits or tags. \nSo just to be clear, you don\u2019t see any benefit of being able to use lerna run foo \u2014since across multiple changes packages before committing changes?\nUltimate you run the project and decide what\u2019s a feature and what isn\u2019t. I just thought this was a good feature previously. I may be the only one unfortunately. . @evocateur appreciate your response.\nI didn't realize the diff command existed, its possible this could work. I would have to run that and then based on the results execute lerna run for the packages that changed. I liked the convenience of using run -since because it did that for me automatically.\nOn the plus side after the first commit, lerna run --since does work again since the last commit isn't considered a release commit anymore.. ",
    "jwickens": "@nkbt how did you get yarn pack to work? for me it just packs the current package, no dependencies. Nice, that seems pretty neat. What I figured out yesterday was that i could use this package: https://www.npmjs.com/package/bundle-dependencies\nlike:\nlerna exec --since -- yarn bundle-dependencies update\nAnd then that will add all dependencies to bundled dependencies in each repo. And then using npm (not yarn which seems broken in the pack regards)\nI do npm pack. With the bundled dependencies to follows the sym links and each \"package\" is self containing at that point. I then immediately untar it and docker build using that as my context.\nyarn build && \\\nnpm pack && \\\ntar -xvzf *.tgz && \\\ndocker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com && \\\ndocker build -t $IMAGE_NAME ./package/ && \\. Hi @sgendler-stem I ended up moving away from bundleDependencies and use yarn pack in each dir as suggested by @nkbt. First I go through each mono-repo package and for each dependency that exists in the mono-repo I change its location to be a file which will exist on an intermediary docker image. Then I run yarn pack on each dependency. The result of each bundle I move into a common directory that has a \"common-node\" docker image that simply copies the packed deps into the build dir, at the file location mentioned earlier. Now each package that needs a docker continues from the common docker and can run npm install to get any mono-repo dependencies.\nIn summary:\n1. Update mono-repo cross references to point at files that will exist in the final install environment\n2. Run yarn pack and collect packed npm bundles and move into common docker\n3. From common docker build each separate docker  . not sure why the checks are failing, getting a bunch of lint errors that i wasnt getting locally.. Sorry about that, forgot how pull requests work :P !. ah ok that seems safer indeed. At a more fundamental level when I run \nlerna updated --since=current-branch\nwith version 2.5.1 I get all the packages listed \nBut when I do it with 2.4.0 I get no packages listed (what I expected)\nSurely there's a test to make sure updated returns no packages when --since is set to HEAD ?. ",
    "sgendler-stem": "Can someone clarify the prior 2 comments?\nI'm trying to build a deployable docker container, so I need to copy the contents of a deployable tgz into my container when it is building.  When I use yarn pack I get no node_modules at all (which seems to be a bug in yarn that has a recently submitted pull request awaiting final approval), but when I use npm pack I only get the node_modules that are in the private package workspace, none of the packages that were installed to {monorepo_root}/node_modules, let alone any of the symlinked packages from other workspaces.  When I run a patched version of yarn, I get the same result (but it takes 3 times as long to produce it).  \nI've spent hours trying to find an npm, yarn, or lerna compatible way to flatten out the node_modules structure, but nothing seems to work.  I installed bundle-dependencies and ensured that bundleDependencies is updated in the private package, but that doesn't change the behaviour of either yarn pack or npm pack.  I can manually copy node_modules with a flag to follow symlinks, but that seems like such a broken way to do that, requiring that I either parse bundleDependencies from package.json and only copy the listed packages or else I end up with packages that are only intended for other workspaces.  Surely one of npm, yarn, or lerna can construct a complete distributable bundle without such manual intervention?  What am I missing?  I've wasted endless hours on this problem so far.. You guys aren't still running into the bug in yarn that doesn't add node_modules at all?  Or you've just applied the patch that hasn't been approved yet?\n@jwickens , I'm not sure I'm following your process.  \nI've got the following structure\nmonorepo:\n  package.json\n  lerna.json\n  node_modules:\n    @myscope:\n      symlink\n      symlink\n    external_dependency1:\n    external_dependency2:\n  packages:\n    pkg1:\n      package.json\n      node_modules:\n        external_dep1\n      src\n    pkg2:\n      package.json\n      node_modules:\n        external_dep3\n        external_dep4\n      src\n  services:\n    service1:\n      package.json\n      src\n      node_modules:\n        external_dep2\n        external_dep3\n    service2:\n      package.json\n      src\nThere are no cross-dependencies between services, but each service is dependent on 1 or more packages in the packages subdir.  node_modules in each package or service only contains dependencies that have conflicts with packages that are otherwise stored at the top level in monorepo/node_modules\nHere's what I believe you are suggesting - \nuse something like pack.js, as provided by @nkbt, to construct a tgz for each package.  It also modifies any cross dependencies in package.json to refer to the tgz file which will be created for that directory, writing the path such that it WILL resolve correctly within the container when that package is loaded - so either a relative path from where the eventual node command will run, or an absolute path within the docker image that will be built.  For ease, I'll just write them to the top level of the monorepo for now.\nSo now I have:\nmonorepo:\n  package1.tgz\n  package2.tgz\n  package3.tgz\n  node_modules:\n    external_dep1\n    external_dep2\n    ...\n  services\n    service1:\n      package.json\n      node_modules:\n    service2:\n      package.json\n      node_modules:\nAnd those tgz files all live next to the top level node_modules directory in the monorepo, which contains all of the shared dependencies.\nSo now I need to build the docker for each directory in monorepo/services, but that still has the following structure:\nmonorepo:\n  node_modules:\n    huge_list_of_shared_dependencies\n    ...\n  services:\n    service1:\n      package.json\n      node_modules\n        short_list_conflicted_dependencies\nSo I think I need to do the following:\ncopy the service OUT of the monorepo and into my docker build area, so that it doesn't find the dependencies that are up a level.\nUpdate package.json to point to tgz files just like I did for cross dependencies earlier.\nRun yarn install, creating a node_modules that has ALL dependencies except for the tgz files.\nBuild service.\nBuild docker image.\nOr, as I think you might be doing, create a docker image that has no service at all, but does have all of the internal monorepo dependencies in it, as tgz files.\nThen, to build each service, run a build that starts with the monorepo build, adds the service, runs yarn install to pick up all the external dependencies, then builds the service.  \nCorrect?. The previous comment says Lerna does conventional commits with a preid, but I'm not seeing that.  I branched, made a one line change to a single package, and executed\nlerna publish --conventional-commits --yes --independent --skip-git --preid=sandbox\n and it bumped the patch for everything dependent on that single package, and it bumped the minor version of the package itself (my commit message was 'feat(scope): message' so that is correct), but there was no pre-release tag of any kind applied to any of those versions.  Not 'beta' and not the --preid I specified.  I could find nothing in the conventional commits documentation which suggested a mechanism to force a prerelease via the pull request text or anything else, so I can't figure out how to get a pre-release tag on anything, let alone a user-specified one.  What am I missing?  What I really want is for --preid to be '.' so that multiple pull requests don't result in published version conflicts if they both use the same label.  The short git revision should still differentiate the versions.  I have a mechanism to pass the git revision into my publish command, but I do need the publish command to actually pay attention to it.  At the moment, it does not appear to.  \nAlso, the statement by @evocateur that conventional commits always commits changes doesn't seem to be try.  When I specify --skip-git, it does exactly what I want.  If it also obeyed --preid, it would work exactly as I need it to.  I'm not sure what the argument against that is.  Why wouldn't someone want to be able to do a pre-release of a package with conventional commits?\n```\nyarn run v1.6.0                                                                                 \n$ yarn run lerna publish --conventional-commits --yes --preid=sand --independent --skip-git     \n$ /.../.bin/lerna publish --conventional-commits --yes --preid=sand --independent --skip-git                                                              \nlerna info version 2.11.0                                                                       \nlerna info versioning independent                                                               \nlerna info Checking for updated packages...                                                     \nlerna info Comparing with v3015.2.0-6.                                                          \nlerna info Checking for prereleased packages...                                                   \nChanges:                                                                                        \n - @private/lib-common: 1.1.0 => 1.1.1                                                             \n - @private/lib-content: 1.1.0 => 1.1.1                                                            \n - @private/lib-ddex: 1.1.0 => 1.1.1          \n - @private/lib-ddex: 1.1.0 => 1.1.1                                                               \n - @private/lib-entities: 1.1.0 => 1.1.1                                                           \n - @private/lib-etcd: 1.1.0 => 1.2.0                                                               \n - @private/lib-job: 1.1.0 => 1.1.1                                                                \n - @private/lib-log: 1.1.0 => 1.1.1                                                                \n - @private/lib-migrations: 1.1.0 => 1.1.1                                                         \n - @private/lib-performance: 1.1.0 => 1.1.1                                                        \n - @private/lib-supply-chain: 1.1.0 => 1.1.1                                                       \n - @private/lib-utils: 1.1.0 => 1.1.1                                                              \n - private-api: 1.1.0 => 1.1.1 (private)                                                           \n - private-orchestrator: 1.1.0 => 1.1.1 (private)                                                  \n - saml-auth: 1.1.0 => 1.1.1 (private)                                                          \n - private-super-api: 1.1.0 => 1.1.1 (private)                                                     \n - @private/infra-environments: 1.1.0 => 1.1.1 (private) \n - @private/infra-templates: 1.1.0 => 1.1.1 (private)                                                \nlerna info auto-confirmed                                                                       \nlerna info publish Publishing packages to npm...                                                \nlerna info published @private/lib-log                                                              \nlerna info published @private/lib-etcd                                                             \nlerna info published @private/lib-migrations                                                       \nlerna info published @private/lib-entities                                                         \nlerna info published @private/lib-ddex                                                             \nlerna info published @private/lib-content                                                          \nlerna info published @private/lib-utils                                                            \nlerna info published @private/lib-performance                                                      \nlerna info published @private/lib-job                                                              \nlerna info published @private/lib-supply-chain                                                     \nlerna info published @private/lib-common    \nSuccessfully published:                                                                         \n - @private/lib-common@1.1.1                                                                       \n - @private/lib-content@1.1.1                                                                      \n - @private/lib-ddex@1.1.1                                                                         \n - @private/lib-entities@1.1.1                                                                     \n - @private/lib-etcd@1.2.0                                                                         \n - @private/lib-job@1.1.1                                                                          \n - @private/lib-log@1.1.1                                                                          \n - @private/lib-migrations@1.1.1                                                                   \n - @private/lib-performance@1.1.1                                                                  \n - @private/lib-supply-chain@1.1.1                                                                 \n - @private/lib-utils@1.1.1                                                                        \nlerna success publish finished     \n```\nThat is 100% correct EXCEPT for the missing prerelease suffix on the version numbers.  . It certainly does SEEM like it shouldn't be that difficult to integrate --preid with the conventional commit recommended versions, since it seems like you could just add it as a suffix with a hyphen and call it good, but I'm guessing that there's going to be complexity added if doing a second pre-release publish, since that might end up with -suffix1-suffix2.  It's too late in my day to try to unwind all of that logic and figure out the best way to specify the preid such that it actually gets passed to the semver library when the version is incremented, rather than doing a dumb string-append to semver's output, but this seems like it would go a long way toward making CI auto-publish workable.\nMy intended workflow is as follows:\nDeveloper submits pull-request to release branch with update.\n  * trigger pre-release publish via conventional commits to increment versions correctly, but add a pre-release suffix of label.short_commit_hash.\n  * build docker images of pre-release services which depend on pre-release packages via npm install\n  * push docker image to repo with tag service-version, which is now next {semver}-{label}.{short_commit_hash}\n  * update sandbox infrastructure to run image:{semver}-{label}.{short_hash}\n  * launch integration test image.  When it completes successfully, it trips a webhook that merges the pull request (or just approves it).\nDeveloper pushes changes to release branch (merges PR):\n  * trigger release publish via conventional commits to increment versions correctly and publish to npm\n  * build docker images of services, which depend on released packages\n  * push docker image to repo with tag service-version, which is now next {semver}\n  * update staging infrastructure to run image:{semver}\n  * launch integration test image.  When it completes successfully, trip a webhook that asks for release approval.\nRelease is approved\n  * update prod infrastructure to run image:{semver}\nFor now, I can modify my workflow to build the sandbox versions entirely from local monorepo packages and skip NPM for sandbox testing entirely.  But that means I cannot exercise the npm publish process or build service images via npm install until I am pushing a production release to staging, which is a drag, since those things can break, too.  It would be MUCH better to be able to specify a pre-release suffix when using conventional commits.\n. ",
    "sv2": "Put together a boilerplate repo to try out various options: \nhttps://github.com/slanatech/vue-monorepo-boilerplate\nHere is how I set up Dockerfile to get caching for dependencies, and avoid publishing packages\n```\nFROM node:8-alpine\nWORKDIR /app\nENV NODE_ENV=production\nRUN yarn global add lerna\nCOPY package.json lerna.json yarn.lock /app/\nCOPY packages/common/package.json /app/packages/common/package.json\nCOPY packages/server/package.json /app/packages/server/package.json\nCOPY packages/ui/package.json /app/packages/ui/package.json\nRUN yarn install --production=true\nApplication Packages\nADD packages/common/lib /app/packages/common/lib/\nCOPY packages/server/server.js /app/packages/server/server.js\nADD packages/ui/dist /app/packages/ui/dist/\nRUN yarn run bootstrap\nCOPY /docker/entrypoint.sh /app/\nENTRYPOINT [\"./entrypoint.sh\"]\n```\nThe layer with 3rd party modules gets cached; if app packages code changes, only \"application packages\" layers will be be built\nInterested in your opinions ...  suggestions are very welcome !\n. ",
    "jskrzypek": "Couldn't lerna just backup & replace the lock file like what is already done with the package.json?. ",
    "mmcgahan": "Looks like this can be closed - fixed by https://github.com/lerna/lerna/pull/897. Looks like this is technically a breaking change because it drops support for some older versions of yarn, which will complain about the unsupported --non-interactive option, but that's sort of a nitpick - something to watch out for, though.. ",
    "sospedra": "Is by using lerna bootstrap --hoist? This is moving all the deps to the top-level, not only the shared ones.. The answer fixes de question . ",
    "isnifer": "@kristianmandrup @evocateur looks like solution is:\n\"npmClient\": \"../../node_modules/.bin/yarn\",\nIf your packages inside packages folder. @evocateur I had problems with lerna on CI. Installed 3.0.0-alpha.0 with npm5 and now - it works great!. ",
    "rcchen": "\nAnd, generally, where you place your testing and linting tools, which you run from the root instead of each package (slowly and repetitiously).\n\nI've also experienced this in practice (10x difference between running from root vs. lerna run test and having jest proxied out to packages) but don't fully understand why it is happening, would either of you guys be able to help me understand? :). > And, generally, where you place your testing and linting tools, which you run from the root instead of each package (slowly and repetitiously).\nI've also experienced this in practice (10x difference between running from root vs. lerna run test and having jest proxied out to packages) but don't fully understand why it is happening, would either of you guys be able to help me understand? :). ",
    "wbern": "While it's not completely clear to me if this thread wants to address the issue of having to run 2 separate commands for a locally development-ready environment or not, I wanted to contribute with the below solution.\npackage.json\n...\n  \"config\": {\n    \"envs\": \"node_modules='$INIT_CWD/node_modules'\"\n  },\n  \"scripts\": {\n    \"postinstall\": \"node ./scripts/bootstrap.js\",\n    \"bootstrap\": \"cross-env $npm_package_config_envs lerna bootstrap --hoist\",\n    ...\n./scripts/bootstrap.js\n```\n!/usr/bin/env node\nvar cp = require('child_process');\nvar os = require('os');\nvar npmCmd = os.platform().startsWith('win') ? 'npm.cmd' : 'npm';\nconst runCommand = function(command, args, options = {}) {\n    console.log(\n        'EXECUTING COMMAND:',\n        npmCmd,\n        args.join(' '),\n        '( path:',\n        options.path || process.cwd(),\n        ')'\n    );\n    const { error, statusCode } = cp.spawn(npmCmd, args, {\n        env: process.env,\n        cwd: options.path,\n        stdio: [\n            process.stdin,\n            process.stdout,\n            options.ignoreErrors ? 'ignore' : process.stderr,\n        ],\n    });\nif (statusCode !== 0 && options.ignoreErrors) {\n    console.warn('Command had errors, but ignoring.');\n    console.error(error);\n}\n\n};\nconst alreadyExecuted = process.env['LERNA_EXECUTED'];\nif(!alreadyExecuted) {\n    process.env['LERNA_EXECUTED'] = true;\n    runCommand(npmCmd, ['run', 'bootstrap'], { });\n}\n```\nAny developer can do npm install, and the following will/should happen.\n\nnpm install runs as per usual process\npostinstall hook triggers, executing bootstrap.js\nbootstrap.js executes, which checks if LERNA_EXECUTED is set. If not set, does npm run bootstrap\nnpm run bootstrap will run lerna, which (with hoisting) implies another npm install being done.\nUpon completion by lerna, another postinstall hook triggers, which again executes ./scripts/bootstrap.js\nbootstrap.js will this time recognize that LERNA_EXECUTED is set to true, and will gracefully exit.\nWhen script execution is finally over, LERNA_EXECUTED will again become empty (ie echo $LERNA_EXECUTED in the shell will return an empty string)\n\nTested with:\nnpm: 5.6.0 (package-lock.json-files enabled)\nnode: 8.11.3 (LTS by current writing)\nThis will ease transition to lerna for me and my colleagues.\nSince I just discovered this, I will get back if we find any issues. The only real downside now is that you need to run a regular npm install before lerna does it again. On the other hand, we have listed lerna as a local dependency, so it would not be possible for lerna to execute without the initial installation.\nPS. The cross-env $npm_package_config_envs part can be excluded (it's a devDependency). For me it provides a neat way of accessing hoisted node_modules from my lerna packages inside the package.json. This is completely unnecessary if you intend to just use the bin's like webpack for example, but really valuable if you need to access files directly inside node_modules dependencies. To not use this, just omit that part, and exclude the config section altogether. If anyone knows a more intregrated way of accomplishing this, do let me know!. I also really want to know why it can't be used for every relevant command that interacts with packages. Like lerna run.. @evocateur I just figured out that I won't get symlinks for each package used between packages/leaves, unless I also specify the package with a file specifier in the root package.json.\nIt would be really nice if Lerna could help out during lerna bootstrap --hoist by hoisting symlinked packages as well. This had me really, really, confused. Since Lerna does a lot of things which are somewhat hard to understand for a newcomer, this might really cause pains for some users.\nI appreciate that you have a lot of workload on this project so I'm not gonna say \"fix this now\", but if lerna bootstrap --hoist is supposed to do something similar to npm install, I would hope that it should also help with symlinks.\nI would love to only use lerna bootstrap or heck, even npm install, but it feels like in the first case, the install time takes a ridiculously long time, and in the second case, the leaves/packages won't work correctly because the devDependencies won't get installed even though I have the file specifier defined in the root package.json (inside devDependencies).. I see two alternatives for me:\n\n\nSpecify the file specifier in the root, and use lerna bootstrap --hoist, that has worked for me historically, despite I had no idea that this was so significant (I was just trying to get things to work at some early point).\n\n\nStart committing all the dist/ files generated from compiled packages, and use the packages without their devDependencies.. Unless you want to do some work from a package, then you cd into the package, do npm install, and build new dist/ files that will be used automatically via the aforementioned symlinking being done beforehand. The downside of this is that it's more tedious, and committing dist files is not a huge hit here in my company either. Edit: One benefit of this however could be that if the monorepo grows very large, developers will not have to build all the packages every single time, but can instead modify some packages based on personal needs and only build them. Would this be a good assumption @evocateur ? (and yes, I use webpack to build most of my packages)\n\n\n. @evocateur \ud83d\ude22. @evocateur I'd also like to know if it's possible to commit and push version changes to package json files, without tagging? I'd like my pre-releases to not contain changelogs, but when I do major releases, I'd like the major releases to include changelogs from all the pre-releases. The best way I found this to work was to not tag pre-releases.\nOften times, we also run into issues when publishing on feature branches, so we figured not tagging the prerelease also saves us some headaches, so we don't have to manually delete the tags every time.. This is a very valid hint. I really want more information like this when it comes to lerna, so I know why the import works even though I feel like it shouldn't.. Ok, so I'm slightly confused but it might make sense too, hear me out.\nIf I have sub packages in my lerna monorepo, and do lerna bootstrap or lerna bootstrap --hoist, the devDependencies get installed in either case.\nUpdate: See my next comment for a better work-around\nIf I however have sub packages just like before, but also install them in the root directory's package.json-file, the packages get installed as external dependencies instead, and external dependencies as a general rule in the world of npm, rightfully skips devDependencies.\nI guess this is correct?\nIn our case, it doesn't quite help us. We might need to execute some npm command to install devDependencies in each sub package.. I'll update here when we've done it.. Ok, I found the best possible work-around.\nAdd the packages in the root as \"devDependencies\". If they are consumed by webpack (like in my case), it doesn't matter if they are in devDependencies, webpack will produce them in the output directory anyway.\nHere's some discussion about whether it's right or not to use devDependencies. https://github.com/webpack/webpack/issues/520. @evocateur I think the bootstrapping is an awesome function. We don't always want to symlink things if we don't consume the latest versions of things, and we have a lot of duplicate dependencies which hoist helps us take care of.\nYes, we plan to move the root soon but it's a lot of stuff to move. We have a huge AngularJS app and it's been tricky to transition to micro frontends using lerna, but we're definitely getting there.. Closing this issue, I feel it's resolved.. Are you saying I should do my workaround in that script instead? . >I think you're looking for the root prepare lifecycle?\nWhile this definitely solved my problem of how to hook together npm install and lerna's bootstrapping mechanism, (I was using postinstall before which was.. not as good), the original issue in this subject is still hard to avoid sometimes. It can also happen if a user decides to do npm install inside a micro-app directory. When going back to the root project dir and doing npm install, they get complaints from npm by the bin directory having files it doesn't \"own\".\nMy work-around is fine for now though. Closing. @evocateur I'm running into random situations where the \"prepare\" script gets called after lerna bootstrap --hoist.. It doesn't always happen but as I move packages around it now seems to be happening all the time.\nDo you have any reference to your source code when \"prepare\" is being called? I don't want install loops.. @evocateur thanks!. I think this would be nice. It's hard to realize all the options you have at first.. @evocateur whether we want to use a single monorepo or multiple ones, it feels like a technical constraint like this one shouldn't be the base on that kind of decision. I already have colleagues who prefer working inside a single leaf to avoid the others as much as possible, but that only works as long as they only touch one leaf. After that, the whole idea of monorepos start to fall apart if the usual suspicion of monorepos is confirmed: it's too slow.\nWhile hoisting let's you get away with it a tiny bit, it's still an issue at least for me. We can do selective lerna run commands today, why not for bootstrapping? Edit: actually, can't we don't this already? Filter options.. https://github.com/lerna/lerna/blob/master/commands/bootstrap/README.md. This might help. https://github.com/lerna/lerna/issues/1889. I still have to figure out which package has the change, which git diff only gives me paths to figure out.. Closing, I'll have to figure this out soon.. How could this work if you run scripts in watch mode? Any way to signal to lerna when a script is \"compiled\" despite that it keeps running?. The feature you're describing sounds exactly like the one that msft offers, \"Rush\" is their tool.\nI have wanted the same thing, but even more powerful with a root based watcher.\nhttps://github.com/Microsoft/web-build-tools/issues/1122\nI'm only typing this because I think Lerna is great but it was hard for me to research information like this.. ",
    "trusktr": "\nLerna's hoisting behavior isn't anymore incorrect, in what it allows you to resolve than plain use of npm.\n\nNot true. In a non-monorepo collection of projects, one normally goes and installs dependencies for each project separately. One project cannot import the dependencies from another project.\nIf the npm user were to go an npm install each project's dependencies from their home folder (this, installing at ~/node_modules, then, this might cause the problem, but people are very unlikely to do that.\nWhen Lerna hoists dependencies, it makes dependencies visible to all packages, which just isn't very safe, and is not a common scenario at all. Most people install dependencies only inside their project and thus don't have this problem, while with Lerna hoisting they do have this problem.. ",
    "dizlexik": "Yeah lerna run test is not very useful if I can't get a >0 exit code back when tests fail.\nThis issue is currently preventing me from using this in CI.. This seems to have been fixed at some point. I'm getting error code 1 on failing tests now.. ",
    "mlunoe": "Tested it and it works now! Great \ud83d\udc4f . Could you direct me to where you have mentioned that before and/or maybe elaborate a bit on why npm link is not appropriate for the needs of a monorepo?\nI did find a bit of info here is that the right place to look?\nhttps://github.com/lerna/lerna/issues/11#issuecomment-234738279. ",
    "magicmark": "For context: our npm registry only serves files and does not understand 'npm publish', so we use a custom command to upload the tarballs to our registry.\nIt would be nice to still be able to use lerna to manage multiple packages in one repo though :). ",
    "Havunen": "Facing exactly same issue. Lerna does not seem to read any keyboard input. Ubuntu 16.0.4.LTS2 tried with different terminal applications, that didn't work either.  Node 8.1 + npm 5.0.3\nEdit something to note:\nMoving by arrow keys seem to work fine in select version screen:\nbut if you select custom and you want to type the version yourself it gets stuck.. Its node 8.4.0 npm 5.3.0 and Ubuntu 16.0.4LTS. I fixed it by reinstalling node and all packages. Sorry for the noise.. ",
    "davej": "Probably related: https://github.com/nodejs/node/pull/13560. ",
    "exah": "Yes, sorry I have copied link to line with branch name not direct commit. . ",
    "BurtHarris": "@evocateur I understand lerna import can't anticipate all edge cases, but the problem is it doesn't seem to anticipate any recoverable edge cases interrupting the import operation.\nIf instead of performing a rollback automatically, might it be better if lerna left the working directory dirty, allowing the user to fix-up the problem and then do something like lerna import --continue to resume the import operation after the problem was corrected.\nI'm not enough of a git wizard to be sure this is a reasonable statement, but as stands I can't easily re-issue the failed command with git switches trying to resolve the problem.. ",
    "jodator": "Hi. I've created a simples Lerna repo that illustrates that issue: https://github.com/jodator/lerna-878. Basically it boilds down to the fact that main package.json requires sub-package and Lerna is doing npm install before hoisting packages from ./packages. /cc @Reinmar .\n. Just do lerna bootstrap in the main directory.\nAdding private: true does not help.. ",
    "borekb": "Hi, I might be encountering the same challenges, also related seems #720.\nI'm already using file: specifiers to inter-link local packages as suggested above. The simplest example of my setup is a monorepo with two packages, app and lib, where app depends on lib:\n{\n  \"name\": \"app\",\n  \"version\": \"1.0.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"lib\": \"file:../lib\"\n  }\n}\nThis is also also the only way to make plain yarn work. If the dependency was \"lib\": \"^1.0.0\", Yarn would fail as that package is not published.\nSo far so good but but running lerna bootstrap doesn't seem to symlink lib into app's node_modules. I also tried lerna link, with the same result. First I thought I encountered some bug in Lerna as it's still not apparent to me why file: dependencies would be treated differently but now I'm not sure.\nI don't think we're doing anything too weird, file: specifiers are a natural way to link unpublished dependencies and I hope they could be supported by Lerna one day :). > You can't use file: specifiers with Yarn\nYou mean that Lerna doesn't support it or that Yarn doesn't support it?\nI'd consider npm but Lerna doesn't work with that either: #1679.. lerna link convert does drastic changes to the monorepo which I cannot afford at this point (one reason being custom production build). I'd argue I \"need\" lerna bootstrap.. > That being said, if you use relative file specifiers you need to also have a local file dependency in the root.\nDo you mean like this? Whatever I try, it doesn't work which is strange because as you mentioned in https://github.com/lerna/lerna/issues/878#issuecomment-422096529, you use file specifiers for Lerna itself without any issues.\nI think the example repo is pretty small and clear, and all package.jsons are \"normal\" (app's package.json, lib's package.json) so I'm really not sure what I'm doing wrong. From your responses, I'm not sure if you think I've encountered a bug / missing behavior or not. I can see how lerna link convert or relative imports would avoid the issue but we can't use relative imports due to the way apps are exported from our monorepo, and the same can be said about convert. Is it unreasonable to expect file: specifiers to work in the example repo?\n. @evocateur Thanks for the hints, will try that.\n\nAll your example packages are private, it doesn't look like you need Lerna?\n\nLerna does many nice things even if we never used its publish command. The two main things we wanted to use it for were:\n\nSymlinking packages for local development (can probably be replaced by Yarn workspaces if one uses Yarn, which we currently are but wanted to move back to npm)\nUtilize lerna run / exec.. \n",
    "ErisDS": "I have, I think, a similar workflow problem - happy to raise a new issue if preferred?\nI am using yarn, I am not using a \"rooted leaf\".\nUse case - I have an existing package foo, and I'm creating some new functionality that foo will depend on in bar. \nProblem - there doesn't seem to be a good workflow for adding inter-dependent packages without publishing them that doesn't result in a broken package.\nHow I'm reproducing:\n\nrun lerna init --independent\nmake a new package foo that console.logs \"hello world\"\nmake a new package bar that has a function that returns \"hello world\" we want to use instead of the string\nyou're not ready to publish just yet, you want to update foo to usebar first\n\nWhat I expected to need to do:\n- lerna add bar foo -> this results in a 404 because it wants to add from yarn\nAlternative approach:\n- require('bar') in foo without adding it to the package.json,\n- use bar(), test it all works and it does :tada:\n- then run lerna publish command works without failing\n- foo package errors because the bar dependency is missing\nAm I missing something? . @doug-wade That comment feels very dismissive. I could also manually edit package.json files to manage the whole repository, but I don't, I use lerna.\nThe tagline for lerna is:\n\nLerna is a tool that optimizes the workflow around managing multi-package repositories with git and npm.\n\nI believe my workflow is fairly standard, editing the package.json file manually is not an optimized workflow.\nMeanwhile in the docs for lerna add it reads:\n\nAdd local or remote package as dependency to packages in the current Lerna repo.\n\nThere is no mention of a restriction to packages that have already been published. \nFurther still, lerna does help me to work with the new package - as I don't actively have to add it to package.json. In that case lerna will publish a broken package, without any warning.\nEither this is a bug, or an overlooked workflow or perhaps I'm missing something fundamental about what lerna is for. \n. Should I raise a new issue?. ",
    "ggascoigne": "I should say that using yarn I've never found that lerna bootstrap ever links anything, but that lerna link --force-local works reliably as a work around.. Well that would work, but it sort of defeats the point of my using a monorepo for this project.  Sadly, that might still be the most workable solution.. ",
    "helfer": "@evocateur My apologies, this doesn't seem to have anything to do with Lerna. Thanks to your reply I noticed that the project I was working on is running a rather curious script that updates dependencies on every release.. ",
    "danoc": "@gpltaylor I believe you're doing this the right way.. @evocateur \u2013 Does that mean the packages should also not have a yarn.lock? (Feel free to point me to documentation! \ud83d\ude04 ). ",
    "aydieneue": "@evocateur doesnt it affect the usage of npm-shrinkwrap in a bad way?. does it work as expected for npm?. ",
    "dlebedynskyi": "any progress on this issue? . @lucamjj  we are using nexus as well. \nlerna publish --no-verify-access helps for me. . @adanilev  there is a second problem actually. \nyou need @lerna/publish@3.3.2  version. by default lerna package installs @lerna/publish@3.4.0 as dependency. Since semver is ^ not ~ - minors work fine. \nyou need to manually edit .lock file to set @lerna/publish@3.3.2\nsomething like this in yarn.lock\n\"@lerna/publish@3.3.2\", \"@lerna/publish@^3.3.2\":\n  version \"3.3.2\"\n  resolved \"https://nexus.*/repository/npm-group/@lerna/publish/-/publish-3.3.2.tgz#bfd54183dbbc3d8d3fdfcb8860af5dd1d7906689\"\n  dependencies:\n    \"@lerna/batch-packages\" \"^3.1.2\"\n    \"@lerna/check-working-tree\" \"^3.3.0\"\n    \"@lerna/child-process\" \"^3.3.0\"\n    \"@lerna/collect-updates\" \"^3.3.2\"\n    \"@lerna/command\" \"^3.3.0\"\n    \"@lerna/describe-ref\" \"^3.3.0\"\n    \"@lerna/get-npm-exec-opts\" \"^3.0.0\"\n    \"@lerna/npm-dist-tag\" \"^3.3.0\"\n    \"@lerna/npm-publish\" \"^3.3.1\"\n    \"@lerna/output\" \"^3.0.0\"\n    \"@lerna/prompt\" \"^3.3.1\"\n    \"@lerna/run-lifecycle\" \"^3.3.1\"\n    \"@lerna/run-parallel-batches\" \"^3.0.0\"\n    \"@lerna/validation-error\" \"^3.0.0\"\n    \"@lerna/version\" \"^3.3.2\"\n    fs-extra \"^7.0.0\"\n    npm-package-arg \"^6.0.0\"\n    npmlog \"^4.1.2\"\n    p-finally \"^1.0.0\"\n    p-map \"^1.2.0\"\n    p-pipe \"^1.2.0\"\n    p-reduce \"^1.0.0\"\n    semver \"^5.5.0\" . ",
    "tricoder42": "I think it's caused by input dialog, which yarn shows when it cannot find the version. npm just throws an error.\n. ",
    "angryobject": "Same here on macOS.. Oh, i didn't realize it watches for dependencies either. Makes sense now. Thanks!\n+1 for the script. ",
    "patrickmarabeas": "lerna updated looks to return the packages with changes AND dependants/transitive dependants, e.g:\nComponent list:\n-button\n-button-group (dependency on button)\n-button-group-wrapper (dependency on button-group)\n-input\nTest cases:\nA change in button, lerna updated returns:\n-button\n-button-group\n-button-group-wrapper\nA change in button-group, lerna updated returns:\n-button-group\n-button-group-wrapper\nA change in button-group-wrapper, lerna updated returns:\n-button-group-wrapper\nA change in input, lerna updated returns:\n-input\nSeems like an odd thing to accident, so I'm going to assume it's intended. Great for bootstrapping or testing only the packages which might be affected, and is one way to enforce some sort of determinism on publish I guess if semver is shakey...\nIf you wish to only publish the packages which have in fact changed, I'm currently going down the path of:\nReturn the last commit SHA with message of \"Publish\".\n\ngit log :/Publish --pretty=format:\"%H\" -1\n51371bdd7bc6d9bfd52ed50557ecf18647e61bf9\n\nReturn the altered files since the last publish\n\ngit diff --name-only 51371bdd7bc6d9bfd52ed50557ecf18647e61bf9\n/package/pkg1/index.js /packages/pkg1/src/thing.js /pckage/pkg2/src/util.js\n\nThrow some regex at the array of files to determine packages\n\npkg1 pkg1 pkg2\n\nfilter out duplicates\n\npkg1 pkg2\n\nUndocumented, but the scope flag works with publish\n\nlerna publish --scope={pkg1,pkg2}\n\nI'll post the bash script I end up using if this is related to issues above.. Quick'n'dirty: https://gist.github.com/patrickmarabeas/68cb15303c2f427a3270136673253a07\n\nAssumes Yarn usage; alter BIN_PATH if not\nAssumes package names (bar scope) is the same as containing folder\nAssumes using default \"Publish\" commit message\nAssumes package location - update packageRootMatch and packageNameCapture\nCommented out scope prepending, re-add and set if required\n\nas @markbjerke has said, you will run into semver issues if a major release is published which doesn't require an update to some other package - i.e. breaking change which only effects some optional API (doesn't break any dependants tests / snapshots / physical testing / etc with current implementation of package). This will cause issues for packages which are currently symlinked but no longer should have a dependency connection.\nSeems like the easiest solution is to only work on ONE package at a time and then publish it - either via my script (rely on semver and tests to tell you what transitive packages need updating) OR with the default publish script if it's a major version increase.\n\nRestrict a feature branch to a single dependency tree\nOnly publish on master / where all feature branches merge\nPublish after every single merge. Fixed issue publishing single packages.\n\nI've got a bunch of helper functions I'll look to make configurable and publish at some point. . Look to have solved major version increases by doing publishing in two steps:\n publish all changed packages (using --scope)\n review the tags created to determine if a major version was published\n find all direct dependants of those packages and bump their dependencies to match those published\n publish these packages (using --scope and --cd-version=patch)\nI'll hopefully package this up for general use shortly.. ",
    "markbjerke": "But if the dependents SemVer range for the dependency that updated is not valid anymore you would need the existing behavior ? It seems like Lerna updates the dependents SemVer with the dependency ^version ? \nEvery now and then you want the current behavior.  Also I guess you could manually filter just by inspection using the scope flag ? So if I didn't have your script I could just manually exclude dependents of the package I changed.. ",
    "vitalets": "\nIf it's required in any code that is included in published packages, it needs to be a package itself. \n\nThanks for the reply! Could you explain a bit more?\nFor example I have utilsmodule that I use in any published package. \nSo I'm required to publish utils to npm? . Ok, thanks a lot for explaining! . ",
    "rsouthgate": "In addition to a +1, I was wondering if lerna publish could be invoked with a version number in the fixed mode.\nIn my use case while waiting for --conventional-commits to be supported in fixed mode I could use semantic-release to work out the global version number based on all commits to all packages across the monorepo and then pass this to lerna publish to use in our CI environment.\nLooked at the source and couldn't see a way of bypassing the version prompt without using canary or cdVersion (but I don't want to rely on lerna bumping the major/minor/patch based on cdVersion, I'd rather pass the actual computed semantic version from semantic release).. Any update on this?\nFor the workflow where a lot of different devs work on a lot of different packages we see this quite a bit as the lerna version is bumped in master and devs merge master into their feature branches. If the dev is working on a new package that didn't exist on master and forgets to update the version number in their package.json to match the incoming bump, lerna will delete their package and any of their local dependencies (if they were not updated too).\nAny way to prevent destructive behaviour in the mean time?. I'm no expert, but it would seem sensible to remain with the cli conventional changelog tool since it's actively maintained. That would lead to 2-2-b being the only sensible option, and as far as I understand - a good one for my use case.. Seems like it could be configurable. For my use case i\u2019d only want the root changelog. And duplicating the same changes in each package would just create more noise, but I can imagine other use cases where packages are bundled and also published individually where both would be required.. ",
    "slightlytyler": "Would love to use hoist but this feature is holding me back. Seems like this might be an issue we need to raise on the flow repo? It should follow the node module resolution pattern talked in hoist (or at least thats my understanding). ",
    "Inkdpixels": "@mocheng @evocateur @wtgtybhertgeghgtwtg @slightlytyler FYI there is a CLI called flow-mono-cli which solves most of the issues when working with flow in a mono-repo. Check it out, if you have any additional feature requests or feedback I am more than happy to hear from you guys! :). @evocateur This is actually something that I thought about as well when working with lerna and I think it hinders developers the most from being really productive.\nWhat I thought about to solve this, is to add a new CLI command, e.g.\n```sh\nlerna add \nor written out\nlerna add --scope=my-package -- foo@2.0.1 --dev\n```\nwhich will basically just propagate everything to npm/yarn and once finished re-links all cross-deps of the mono-repo.\nOf course this Command needs to support the --scope Option to only install something in one or Even multiple packages. \nWhat do you think, is this something that one can contribute to lerna? . @evocateur  Had a thought about how to handle this, I guess if the point is to assert that the error originated from the yargs package, can't we just check if the throwed error object contains yargs in it's stack trace?. Awesome :) :100: Are you already on it? Otherwise I think @kevroadrunner was also interested on picking this up.. Awesome! Will add the feedback tomorrow :) \ud83d\udc4d . ",
    "kring": "I believe this same issue is preventing concurrency from being specified in lerna.json, because it has a default value of 4.. ",
    "michalkvasnicak": "Same error for me:\n|  Executable  | Version  |\n| -- | -- |\n| lerna --version | 2.0.0-rc.5 |\n| npm --version | 5.0.3 | \n| yarn --version | 0.24.5 |\n| node --version | 8.1.2 |\n| OS | Version |\n| --  | -- |\n| macOS Sierra | 10.12.5 (16F73) |. I found that the problem is somehow connected with yarn. When you run publish, then npm-run-path assigns yarn registry url to env variable npm_config_registry. So  when lerna spawns npm publish, npm is using yarn's registry url and this causes error ENEEDAUTH. \nAs a workaround for now, we have to use lerna publish --registry=https://registry.npmjs.org/ or specify the registry in lerna.json. It forced given registry URL.. ",
    "flipactual": "@michalkvasnicak Thank you so much for identifying the issue\n@evocateur that sounds like a solid solution to me. Here's a job after moving conventional commits to lerna.json and removing force publish https://travis-ci.org/emdaer/emdaer/jobs/344027794\nThe strangest part is that these are all going out as patches when many should be minor versions at least. @evocateur want me to try cross posting? \nI've done a bunch of fiddling with the knobs, but I'm not even sure where to look next \u2013 if it's easy to pass me a link to where this is passed off from lerna to conventional-commits, that will help me fiddle some more. lerna publish --conventional-commits --skip-git --skip-npm --yes does a patch\nSwitching to lerna@next (breaks commitlint for me somehow) but does manage to do a minor version bump, but ignores the BREAKING CHANGES:. Okay so, if I jump into my repository, create a new branch, and commit a change with a message like\n```\nfeat(build): update some lerna things\nmove to lerna@next\nremove lerna scopes for commitlint\nBREAKING CHANGE: woo finally shipping v2!\n```\nit does a patch\nThen if I add all the changes lerna makes to changelogs and package.jsons and make a new commit with the exact same message, it does a major version bump\nLet's say I commit those changes with git commit -m 'fake' --no-verify and then do git commit --allow-empty with that same git commit message again... also a major bump\nSo it seems to work as expected but only after that initial (unintentional) patch is added\nIs our git strategy perhaps sabotaging us somehow?\nI'm going to try doing this live to see if it self corrects with lerna@next. ",
    "ahuth": "2.7.0 did not end up fixing this for me, @evocateur, although manually setting the registry through CLI options did work.\nMy setup is probably weird, though:\n\nUsing lerna 2.7.0\nUsing yarn 1.1.0\nUsing yarn workspaces\nyarn publish doesn't seem to play nicely with lerna publish, as it breaks when ran from a script.\nBecause of the point above, I'm configuring lerna to use npm when publishing. Works perfectly for me as of 2.7.1. Thanks!. \n",
    "Hypnosphi": "So is lerna bootstrap --use-workspaces a \"shortcut\" to yarn command?. What do I do if I want alpha canary for the next major release?. That's good, and it covers greater scope, so I'll close this in favor of commenting there. OK it's moved to bootstrap command docs. What's confusing is that's also a lerna.json field\nhttps://github.com/lerna/lerna/tree/master/commands/bootstrap. I think we should still enumerate here the values that semver accepts currently. preid maybe?. prepatch will make it  1.0.1-beta.1 (actually, that's the difference between prepatch and prerelease). ",
    "MattCain": "This would be awesome, at the moment I can't publish the built versions of my packages without a redundant dist directory at the root of the distribution.. ",
    "nathf": "@gauntface Good point. During bootstrap symlinking happens before prepublish. So the build directory wouldn't exist at symlink time. \nIf the order were reversed you could npm link from the build directory as it would need to contain a package.json for publishing.  Alternatively the build directory could be created during preinstall phase but those both seem a bit flakey/cause more confusion.\nAlso taking into account the addition of yarn workspaces this feature may be a stretch. \nThoughts?. ",
    "mickaelvalmier": "Hi,\nI have a same problem in a project developed with a lot of Angular 4 libraries.\nIf dist folder cant' be symlinked directly, the services don't be injected correctly.\nI dislike this way proposed by angular (define a package in dist). But if customization of package dir can't be defined, Lerna can't be used with an angular project.. ",
    "captainkovalsky": "up. @evocateur Did you mean that we can use npm i packages/* when set deps to file:../packages/<package> ?. @evocateur I see that even link --force-local doesn't work. Is that expected behaviour?\n| Executable | Version |\n| ---: | :--- |\n| lerna --version | 3.0.0-beta.17 |\n| npm --version  | 5.6.0 |\n| yarn --version | VERSION |\n| node --version | v9.11.1 | \n. ",
    "xealot": "I recently tried using Lerna for the first time and immediately ran into this issue. Any heavy Typescript development is going to get hamstrung by the omission of this NPM feature.. I recently tried using Lerna for the first time and immediately ran into this issue. Any heavy Typescript development is going to get hamstrung by the omission of this NPM feature.. ",
    "Bratn": "As far as I know this is the only way to accomplish \"flat\" package structure (without the /dist or /lib section in the import path) unless skipping src/dist directories entirely, which isn't practicable if your source requires transpilation.\nLet's say I want to import only the tinyUtil module from the utils namespace inside my big-obese-package, what I would like it to look like is:\njavascript\nimport tinyUtil from 'big-obese-package/utils/tiny-util';\nIf the source is ts/jsx/esnext etc, the recommended way of distributing the package is to transpile it to a dist directory (\"npmDistDirectory\" in @esakal's proposal), include package.json and publish. This doesn't seem to be possible with lerna at this moment, which is a pity. \nInstead I will need to transpile it to ./dist, reference it from the files prop in package.json and then accept the following import:\njavascript\nimport tinyUtil from 'big-obese-package/dist/utils/tiny-util';\nAfter spending precious time on your API design, naming convention etc, this is a bitter tradeoff.. @evocateur: I will not go into argument whether x is better than y - most often I am wrong. But if we ignore my poor choice of lorem-ipsum name (we can call it something else, such as \"tiny-lodash\"), I can't really see why lerna should hinder the author from using a nested structure within a package and at the same time provide \"semantic imports\". \nI came here to evaluate lerna as a tool for managing JavaScript projects with multiple packages, not as a tool to limit me on how to structure the internals of my packages (whether good or bad).. ",
    "austin94": "For those that are still trying to get \"flat-pack\" imports working: import Bar from 'foo/Bar' \nI was able to solve it by leveraging the preversion, version, and postversion scripts that were added in https://github.com/lerna/lerna/issues/774\nFor me I got it working by:\n- Disabling NPM publishing during the lerna publish command\n  - lerna publish --skip-npm\n- Performing my linting and build during the preversion NPM script (or before) which would be built into a dist folder\n- Copy necessary files into the dist folder during the postversion NPM script and then call npm publish dist. This is handled in a gulp file but I've simplified below.\n  - The package.json version has been bumped prior to the postversion script being called\n  - postversion is only called if you do not include the --skip-git command to lerna publish\n  - \"postversion\": \"cp package.json dist && npm publish dist\"\nI still think a config option for npmDistDirectory could be beneficial since it would allow a consumer to leverage the prepublish lifecycle-hook which seems a little more intuitive.. Hi @yordis :wave: I think there might be a few different conversations going on at once here.\n\nI would be great if in the deployment at least I could specify which folder to actually publish to npm\n\nExpanding on what @noherczeg mentioned, this is possible with the main and/or files options within package.json\n// example package.json\n...\nmain: 'dist/index.js',\nfiles: ['dist'],\n...\nLet say your files were all under a dist folder. A consumer could retrieve the files in the following way:\nimport * as Everything from 'package';\nimport * as FactoryOne from 'package/dist/FactoryOne';\nimport * as FactoryTwo from 'package/dist/FactoryTwo';\netc.\nThere is no technical difference between the code above and \nimport * as Everything from 'package';\nimport * as FactoryOne from 'package/FactoryOne';\nimport * as FactoryTwo from 'package/FactoryTwo';\nwhich is what I was looking for. The only reason I was looking for this was to have a \"cleaner\" import structure.. ",
    "sandangel": "that's why angular repos not using lerna. ",
    "yordis": "@austin94 that is painful \ud83d\udc94 \n. @evocateur in my case is not because of Angular or because I want to have a fat package but the fact that I can't just export everything throw a single file (pkg.main) because that will work as long as you do not have any naming collision.\nI would be great if  in the deployment at least I could specify which folder to actually publish to npm. For the simple reason that you will no need to be adding /lib or /dist or what have you.\nIt is not necessary this to be agains anything related to npm but the lack of changes on npm itself. 2018 most of the packages uses specific folder for the compiled version of the package, webpack does it, babel community suggest it, parcel does it, rollup community suggest it.\nSo why could just see the need of this? \nWhy we couldn't have specific folder where you will have the final npm package package.json + code and we could avoid any weird name on the file path of the package?. @evocateur btw, I do not see this related to Typescript only but any package that requires a build process and normally they will put the final package inside specific folder.\nAlso, https://docs.npmjs.com/cli/publish the command already allow you to specify a folder so it should be the matter of adding the config and use for run the npm publish with the configured path \u2764\ufe0f \n. > Your packages are too big if that is the case. Embrace the patterns of the npm ecosystem.\nBased on what you can say that?\n```js\n// factory1.js\nexport const perform = () => {\n  return 'factory1'\n}\n```\n```js\n// factory2.js\nexport const perform = () => {\n  return 'factory2'\n}\n```\n```js\n// pkg.main: main.js\nexport * from './factory1'\nexport * from './factory2'\n```\nbecause you can't do the previous example you will end up requiring specific file\n```js\n// somefile.js\nimport * as Something from 'libname/factory2'\nconsole.log(\n  Something.perform()\n)\n```\nSo, based on what you can assume that you are right saying that the package is too big? \nWhat will be your argument that I have to pay attention to re-exporting on the main file?\nWell, I wouldn't re-export anything if that is your case, the whole point of having files that behave as a module scope in NodeJS.\nCould you show me how to resolve this issue please?\nAlso, I am trying to prevent to add libnam/lib/factory2 so it is a flat package.. > Embrace the patterns of the npm ecosystem.\nWhat do you mean by that? What is the npm ecosystem?\nHaving one function package so you will end up with 100 dependencies when they can live all together in the same package? \nBefore Tree-shaking exists, probably makes sense because you didn't want to export the whole thing but now the tooling is advance enough.. @austin94 right now what I am trying to do is removing dist from the path indeed.. @austin94 \n\nExpanding on what @noherczeg mentioned, this is possible with the main and/or files options within package.json\n\nYes, I am aware of that but that but when you use a folder it will just copy the file inside the folder name so files: [\"lib\"] it will put the files inside lib\n\nThere is no technical difference between the code above and\n\nOnes comes from lib and the other comes from the root of the project. \nIdeologically, yes you are right, there is not differences (maybe, who knows, this is based on the situation).\nTechnically,\nThere is a different indeed, in fact, I could have package/FactoryOne and package/lib/FactoryOne in the same project and have for whatever reason differences between each other.\nBut I am seeking the same you are seeking, have a clear importing structure.. @rosskevin as a person that wanted this, I never expected them to do the work for me but he even declined anyone from taking the initiative of adding a feature that many people wanted from the original thread, feature that will no affect anyone that is already using lerna but it will help a lot of people that needed something different.\nI expended quite a lot of time setting up everything under lerna using JS and then tried to change it to Typescript for realized that I shoot myself in the foot.\nI went to the thread and I noticed that even some people figured out what changes are needed but the conversation finished with his opinion, despite that many people will need it.\nI couldn't express the gratitude of @evocateur work on OSS, and I couldn't tell with words the appreciation I have for his time and work but I can't relate to that destructive behavior (why that attitude instead of join the community and embrace working together as a team? my today problems could be your tomorrow problems)\nAnyway,\nI ended up creating this https://github.com/straw-hat-team/npm-packager, which hopefully many people could use it, I expect npm folks to deprecate this package because they add such of behavior on npm itself.. ",
    "M3kH": "@evocateur I guess is related to this line https://github.com/lerna/lerna/blob/d0e8d9c5af654f52634119d2c2bd2a888b9488f0/src/commands/PublishCommand.js#L683\nThat has a different behaviour than this:\nhttps://github.com/lerna/lerna/blob/d0e8d9c5af654f52634119d2c2bd2a888b9488f0/src/commands/PublishCommand.js#L695\nEdit: did a PR to solve it.. We had the same issue. We hook git fetch --tags before lerna publish.. ",
    "gijswijs": "I suffered from the same issue. A single package wouldn't install properly with Lerna, resulting in the following error\nENOENT: no such file or directory, rename 'C:\\repositories\\es-git-new\\packages\\push-mixin\\node_modules\\.staging\\@es-git\\core-5f2d41df\\node_modules\\text-encoding' -> 'C:\\repositories\\es-git-new\\packages\\push-mixin\\node_modules\\.staging\\text-encoding-4a8cc963'\nAfter running npm install in that specific package folder C:\\repositories\\es-git-new\\packages\\push-mixin and then running lerna bootstrap again, it worked, and even replaced the installed package with a symlink.\nlerna WARN EREPLACE_EXIST @es-git/core is already installed for @es-git/push-mixin. Replacing with symlink...\nIt's a workaround, but one I can live with.. ",
    "Craga89": "I really like the idea of {commits since nearest tag} as it matches well to the current GitVersion implementation we have at work. I'll look into it in a different commit ASAP so we could potentially get it in before 2.0.0? When are you cutting for it?. This is related to the pull request I just sent #1152. That may solve this issue, too? Since the NPM_CONFIG_REGISTRY global will be passed down as expected.. It's been a while since I looked at this, so execa might have changed in the mean time to fix the issue I was experiencing. The tests included will give some insight into if this is the case; I'll re-run when I get a chance and see if that's the case.. ",
    "pclements12": "I've made a successful version of a create-react-app (with Redux) using lerna, but it's a little complicated. I wouldn't recommend the approach unless you truly need it.\nThis is how I've set it up:\nModule Structure\n\nApp module\nOther modules\n\nApp module\nThe main app module contains many of the root level files that are essential to a React application:\n  - index.js (The main entry point of the React application that mounts it to the DOM)\n  - main-router.jsx (Hook up all of the routes from each package)\n  - reducers.js (combine all the reducers)\n  - store.js (Create the Redux store with the reducers and any middleware required)\nOther modules\nAll modules follow this componetized pattern:\n```\nsrc/\n  index.js\n  routes/\n    {route-name}/\n    index.js\n  components/\n    {component-name}/\n    index.js\n  reducers/\n    {reducer-name}/\n    index.js\n    selectors.js\n```\nWithin each root level folder, an index.js file should exist that collects all of the exports that should be exposed to other modules so that the root index.js can succinctly expose each of these for the entire module.\nThe root index.js should expose (I'd love a more flat way to express this, especially for components):\ncomponents,\nselectors,\nreducers,\nlogic,\nroute,\ntheme\nTo run the app, you need a few things:\n- Run lerna bootstrap to install all deps and link packages\n- Run babel with the --watch flag for each \"Other\" package (for live edits)\n- Run the regular create react app start script to start a webpack dev server with hot reloading\nHope that helps or at least tells you it can be done!\nEdit: Composing the routes can be a bit tricky in the \"app\" module.\nI had to use this technique to get it to work:\nModule Route definition:\nconst Module1Routes = () => (\n  <Route path=\"/my-route\">\n    <IndexRoute component={header} />\n    <Route path=\"/my-route/page\" component={page} />\n    <Route path=\"/my-route/page2\" component={page2} />\n  </Route>\n);\nApp main-router.jsx:\n<Router>\n        {Module1Routes()}\n        {Module2Routes()}\n</Router>. ",
    "samcorcos": "Except that:\n\nYou attempted to import ../../../../my-package which falls outside of the project src/ directory. Relative imports outside of src/ are not supported. You can either move it inside src/, or add a symlink to it from project's node_modules/.. \n",
    "ctrlplusb": "FYI, for those in the interest. All works well with straight up yarn workspaces. Although you may need to firstly create your create-react-app instance outside of your workspace and then copy the result into your workspace and run the yarn install command again.. ",
    "ndelangen": "Is there someone able to review this?. Ow hey, I kinda had given up on this PR, I wasn't aware it was still open.\nReading the other PR, it seems to be adding the same functionality but with the flag you wanted?\nDoes that mean we can just close this? If you feel there's still value in this PR just let me know, I can set aside some time to fix it up next monday or so.\nThough actually you kinda convinced me with https://github.com/lerna/lerna/pull/908#issuecomment-327383816. Sorry for anyone hoping this to get merged, Feel free to argue why we should reconsider.. ok, can remove this test, you mean?. The mismatches happen after a few prereleases in a row, with some packages getting changes and some not. Eventually the versions stop matching and without warning get packages from the registry.\nWe're sometimes doing prereleases for minor or even patches. Could that be a reason too?\nIrregardless, I'd like a flag to always link, never pull internal packages from registry. Sounds like @mbecke wants such a flag as well... ",
    "mbecke": "I ran into a similar issue recently and can confirm that this change solves my issue.   As with the original author I always want a link to be created, regardless of whether or not the semver matches. . Any update on this pull request?. Yep, we're working with version independent projects which ideally should be correctly updated across the board, but it doesn't always happen.  Rather than have to enforce that with some other mechanism I was looking to just force linking with a flag like this.. ",
    "jezzay": "The publish integration test is failing, though I'm not sure what is causing it. The same test is failing in https://github.com/lerna/lerna/pull/911 (which is just a README update), which makes me think that master might be broken. Can anyone verify this? \n\n. As a workaround, you could manually force publish all packages with   --force-publish=*  https://github.com/lerna/lerna#--force-publish-packages \nlerna publish --force-publish=* --conventional-commits --yes. I've been using the changes in this PR in a internal fork of lerna successfully for a while now.  @evocateur would you be able to review this? Thanks!. Awesome thanks! . @KingScooty For your example with a commit type of style: \n--conventional-commits uses the angular preset by default, which will only write entries into the change log for feat, fix or perf types OR if the commit has a breaking change. See conventional-changelog-angular \nLerna has the option to use a different preset through the --changelog-preset flag. An example usage of this flag is in the docs\n. 2/3 of the Travis builds have passed, the node 8 and the appveyor builds seem to be npm timeouts. \n\n. @evocateur Cheers, I've rebased with master and removed the changes to the publish snapshot . @canercandan I've raised PR https://github.com/lerna/lerna/pull/992 to address this. Can you verify if this fixes this issue for you?  . @canercandan Awesome, maybe reopen this issue until the PR is able to be reviewed and merged?. I've added integration tests that reproduce the regression and verifies the fix for --conventional-commits\nworks in fixed mode and fixed mode with --force-publish=*. @evocateur I've updated the PR with the requested changes. Thanks!. @evocateur Looks like you beat me to raising a PR for this :) \nThe changes in your PR look good \ud83d\udc4d . @evocateur I've updated the PR with the changes, can you re-review? Thanks! . FYI @bochen2014 in lerna 3.x a check has been added to prevent publishing when behind the git remote:  https://github.com/lerna/lerna/blob/master/commands/publish/index.js#L101\nThis sounds like it solves your issue in CI? \n. Good point, I'll remove it. Fair enough, I'll refactor the helpers to just perform the execution, and move the actual verification to the tests cases. . I'm wondering if there should be an option to either opt-in / opt-out of this check? \nAll of the integration tests are failing at the moment, as they don't have a remote origin. Can it be assumed that there will be a git remote when running lerna publish?. On second thoughts, checking gitEnabled && !skipNpm  should be sufficient, as if you are publishing to npm, it is expected that there is a git remote to push tags to. . Good point, I exited with 0 so that in a CI build scenario, the build would still be marked as successful if the publish step was aborted; but exiting with an error (and thus failing a build) is probably more accurate. . Awesome! I'll add an integration test for this PR based off that. ",
    "userpixel": "I have the same issue with NPM 5.0.3 and Lerna 2.0.0.\nIt actually goes ahead and creates a vnull and vundefined.\nExample repo\nhttps://github.com/userpixel/monorepo/releases. ",
    "moshest": "I think that one package-lock.json at the root of the project should be enough.\nLerna should install all the dependencies on the root node_modules folder and then link them to the required sub-packages. If there is a collision, lerna should install the specific version only for the  specific sub-package and handle internal package-lock.json by itself.\nThis behavior will save time and be more clear for the new user (like me).\nIn addition, it's pointless to add package-lock.json to sub-modules:\nOne key detail about package-lock.json is that it cannot be published, and it will be ignored if found in any place other than the toplevel package. \nMy solution for now is to use lena with --no-package-lock command:\nbash\n$ ./node_modules/.bin/lerna bootstrap -- --no-package-lock. > If I understand correctly, hoist doesn't work if I want to be able to open each package directly (for IDE support).\nThe linking process should be for all the packages on the root node_modules to the sub-packages node_modules folders. This will enable IDE support and more important an ESLint validation.. ",
    "alex-pex": "You should definitely find a way to use lerna WITH package locks. The default behavior wanted with npm@5 is to lock the versions. I'm not using yarn but I think it's using lock files too (yarn.lock). I develop apps with shared packages and I don't want to ship my apps with unknown package versions.\nI'll get rid of my lock files for the moment but I'm looking for a better solution.. Is lerna bootstrap still useful in most yarn workspace scenarios? I used lerna to install all packages and symlink between them, but now with yarn workspace I don't see what lerna bootstrap does but yarn install doesn't.\nI'm still using lerna to run commands on all packages.. If I read correctly, hooks are called in handled package, not on the root package.\nCan we also call hooks on the rootpackage? I'd like to call a hook on postversion, when everything is done (I'd like to create a merge commit between two branches).\nIf we can't, I'm stuck with a wrapper command\n\"scripts\": {\n    \"publish-all\": \"lerna publish && ./hooks/postversion.js\"\n  }\n. ",
    "mikestead": "Just a note on one scenario. I've been using Lerna to work on a bunch of node (micro-)services. \nEach package is released as a Docker image. When I build that image I want to npm install the exact prod dependencies to ensure correctness. For this setup a lock file per package is required. \nPerhaps not what Lerna was envisioned for but thought worth a mention.. @evocateur Thanks for actioning this so quickly, and all the work on Lerna. I'll give it a run next week.. @evocateur I'm trying out v3.0.0-alpha.3 (looks like that had the fix in it) with the sample project above, and getting the following error now.\n```\nlerna info auto-confirmed\nlerna sill addFiles [ 'lerna-lifecycle-issue/lerna.json' ]\nlerna sill run-lifecycle version undefined\nlerna info lifecycle undefined@undefined~version: undefined@undefined\nlerna-lifecycle-issue/node_modules/npm-lifecycle/index.js:83\n  return wd.lastIndexOf(pkg.name) !== wd.length - pkg.name.length\n                                                           ^\nTypeError: Cannot read property 'length' of undefined\n    at _incorrectWorkingDirectory (lerna-lifecycle-issue/node_modules/npm-lifecycle/index.js:83:60)\n    at lerna-lifecycle-issue/node_modules/npm-lifecycle/index.js:54:42\n    at lerna-lifecycle-issue/node_modules/npm-lifecycle/index.js:186:12\n    at lerna-lifecycle-issue/node_modules/graceful-fs/polyfills.js:287:18\n    at FSReqWrap.oncomplete (fs.js:155:5)\nerror Command failed with exit code 1.\n```\nI can open a new ticket if you prefer?. Adding a name property did indeed fix the problem. I've raised the issue over here https://github.com/lerna/lerna/issues/1305. ",
    "robdonn": "I'm running into the same problem. A temporary solution may be a custom script.\nIn the root package.json:\n\"publish-npm\": \"lerna publish --skip-npm && lerna run publish-npm\"\nThen in each package json you could have:\n\"publish-npm\": \"npm publish --access public\". ",
    "hshoff": "Yes the solution in https://github.com/lerna/lerna/issues/178#issuecomment-261736824 works for publishing scoped packages. Check out https://github.com/hshoff/vx for an example repo. It's been working for me since March when I started the project.\nAs mentioned in https://github.com/lerna/lerna/issues/178#issuecomment-261736824, the solution is to add the following to each packages package.json:\njson\n  \"publishConfig\": {\n    \"access\": \"public\"\n  } . ",
    "FabienDeshayes": "You can use lerna publish --skip-npm. See doc.. ",
    "yxuchen": "thank you \uff0cif i use webpack \uff0cthe packages folder of component \uff0ceach component has a webpack.config file for bundle\uff1f\uff1f. ",
    "oreporan": "The issue isn't happening anymore, I'm guessing it was some yarn.lock issue. That workaround assumes I know only the root has changed. Im trying to avoid calculating the diff. @evocateur \nWould a Pull Request that creates this feature be merged? Such as a list of files that turn a publish into a force publish?. @evocateur \nWould a Pull Request that creates this feature be merged? Such as a list of files that turn a publish into a force publish?. I'm working on PR, should be finished soon. Any maintainers merging code in this repo?. no worries, happy holidays and congrats on the newborn :). @evocateur \nQuestion regarding the no-bail option\nDoes this cause the whole lerna execution to return exit code 0?\nOr does it still return 1 if one of the execs returned 1?. Yeah that's what Im seeing\nI'd like to use no bail and let the packages exec, but still want to fail if any failed\nI can PR it but it's obviously a change in behavior. \nAny workaround you can recommend?. @spalladino @evocateur \nI peeked around the code to try to make a quick PR, but to say the truth I couldn't find the place where to propgate the exit codes\nI saw you're using the reject: true param in executing. But couldn't find where to resolve the exit codes\nIf someone wants to give it a go or point me to where this needs to be done\nI'll create a separate issue for this. Seems that with lerna exec it does work\nlerna exec yarn test--no-bail --concurrency=1 --include-filtered-dependents --since master. Yes. \nThe workaround with exec works\nI'll make a PR. Right, my bad\nthe packages were private. Ok, I decided to remove them, instead of leaving it there and always calling with npm, I guess its less confusing... good catch. ",
    "KingScooty": "So what do i need to do to be able to use this? What conventional commit dependencies do i need? standard-version? Or conventional-changelog and conventional-changelog-cli?\nI'm just getting to grips with both lerna and conventional, so this i a bit of a learning curve i'm trying to climb. Any advice to get lerna working with conventional using --conventional-commits in fixed mode is appreciated!\nI've got standard-version installed, but it doesn't seem to be filling the changelog with my commit messages.. Thanks @evocateur. I've been using commitizen to handle my angular format commit messages. But my changelog files don't seem to be getting populated with the commit messages. \nI'll stage my commits, run commitizen to generate my angular messages, then run lerna publish --conventional-commits, but my changelogs don't reflect the changes. Am i missing something?. Hmm. Well this is an example of one of my commits: style(ui-sass-settings): Tidy up whitespace. I made that commit before running lerna publish. But the changelog doesn't seem to update.\nLerna detects any package and dependency changes before publishing, so everything is working fine lerna side. --conventional-commits just doesn't seem to be doing much.. Ahhh, that makes sense! Thanks @jezzay! . +1 for --skip-version. \nI've just stumbled across this issue while setting up my CI pipeline to handle publishing.. lerna exec -- npm publish wouldn't work when one or more of the packages are private. lerna publish respects private packages, however npm publish does not and results in an exit 1 error. I have a few \"workspaces\" that are bootstrapped by Lerna (local symlinked dependencies), but aren't intended to be published to npm.\nIdeally, CI would run a lerna publish with some args that would just push to an npm registry without altering version numbers or affecting change logs. \nI've scoured the issues section of Lerna, but have really struggled to find a proper answer for cleanly setting up Lerna with a monorepo in CI.\nBecause Lerna insists on bumping the package.json regardless of what args are passed, it results in a messy CI integration. If you push changes back to git (package.json, changelogs etc), it then triggers a subsequent build. \nIdeally Lerna would have a --ci mode or something that just disabled altering any files within the git repo. So it would just push to npm, and push tags back to git?\nAnything more triggers further unnecessary builds. The developer can run the changelog part of lerna lerna publish --skip-npm --skip-git --conventional-commits before pushing to github.\nThoughts?. I've noticed when running lerna publish --skip-npm the gitHead entries get added to the package.json but don't get added to the version commit. So they're left unstaged, away from the rest of the publish. Is this intentional?\nSo i'll run lerna publish --skip-npm, select my version. Publish finishes, and i do a git status and i have tons of unstaged changes to my package.json files. Shouldn't these get staged as part of the version number update?. Having the same issues as @lucamjj . @evocateur an issue i've come across with Lerna pushing a commit along with a tag when using CI, is it results in perpetual running of builds. CI runs lerna publish, lerna pushes to git, CI detects a git change, and triggers a new build, and the cycle continues.\nAm i missing something? I'm finding it very difficult with the current flags to get Lerna working nicely with CI. You must have an ideal workflow in your head when integrating Lerna into CI, what is it?. ",
    "soluteli": "@jezzay \nIn my project with lerna V^2.10.2 learn-lerna_fixed, my commit msg is in angular format.  \nAfter runninglerna publish --conventional-commits, I had get CHANGELOG files in project Root and every package root, but there is no git commit log like feat: add something show in CHANGELOG. \nso, how could get this done?    \nrelated links:\n- commits\n- changelog module1\n- changelog module2\n- changelog project\nThanks~\n . ",
    "dwaligora": "@akosyakov unfortunately I am using lerna for react and react-native apps and there is bunch of problems with dependencies. Probably I wont use hoist which is a bit pitty. ",
    "Aurelsicoko": "@evocateur Here the link of the repository. The version in the  lerna.json is not up to date because we are not using it anymore due to this issue. We developed many scripts to replace Lerna but this situation isn't optimal for us. FYI, when I tested to publish with lerna, the script that you can see in the repository to remove the node_modules folder in each package wasn't here so this issue cannot be caused by it.. ",
    "aminpaks": "So it turns out before lerna publish we need to install the root packages with npm otherwise it won't work properly.\nI had installed lerna with yarn that's why I was getting that error.\nThanks.. ",
    "hbowden": "This can be ignored I just had to add /src to react-bootstrap-table imports and the module is resolved just fine.. ",
    "bryzaguy": "Thanks for the suggestions on making the package-lock files less of an issue. However, I want to have and use the package-lock files.. ",
    "nealoke": "When I install a new package with npm 5 it removes my symblinks created by lerna bootstrap, super annoying. ",
    "esprehn": "@evocateur This is a problem for us too, lerna doesn't seem to work with npm5. Not everyone can use --hoist, and currently lerna both changes the package-lock.json each time you bootstrap (adding or removing the dev flags or the package name) and the symlinks also don't seem to always work. Everything worked fine with npm3 though, It'd be really excellent if lerna could support the same workflow in npm5. :). > .then(onFulfilled, onRejected) is effectively the same as .then(onFulfilled).catch(onRejected): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then\nThey're not the same. If onFulfilled causes an error the first one will result in an unhandled rejection, while the second will run onRejected.. As another interesting fact, common is in devDependencies in some packages and dependencies in others. Maybe that's related?\nThis makes our builders fail whenever someone adds a new dependency on common since the first time the builder syncs it always fails with a 404.. Any help here? Getting these 404s on bootstrap a lot.\n774 error execute callback with error\n775 error Error: Command failed: npm install\n775 error npm ERR! Darwin 16.7.0\n775 error npm ERR! argv \"/usr/local/bin/node\" \"/usr/local/bin/npm\" \"install\"\n775 error npm ERR! node v6.10.3\n775 error npm ERR! npm  v3.10.10\n775 error npm ERR! code E404\n775 error\n775 error npm ERR! 404 Registry returned 404 for GET on https://registry.npmjs.org/include-common\n775 error npm ERR! 404\n775 error npm ERR! 404  'include-common' is not in the npm registry.\n775 error npm ERR! 404 You should bug the author to publish it (or use the name yourself!)\n775 error npm ERR! 404 It was specified as a dependency of 'include-webview'\n775 error npm ERR! 404\n775 error npm ERR! 404 Note that you can also install from a\n775 error npm ERR! 404 tarball, folder, http url, or git url.. Every package has: \"include-common\": \"1.0.0\" and common/package.json has  \"version\": \"1.0.0\".\nDoesn't seem like a version mismatch given that it works the second time without changing anything.\nbash\nlerna bootstrap # => error.\nlerna bootstrap # => success.. We're still seeing this in lerna 2.5.1 any help would be appreciated. It seems lerna will sometimes still go the server for private packages.. I think this might have something to do with mentioning a local package in both dependencies and devDependencies in the same lerna monorepo.\nex.\npackages/\n  app/\n     -> dependency on webview and common.\n  webview/\n     -> devDependency on common.\n  common/\nWe made it a devDependency everywhere and things seem to work better now.. We have a large project and can't have all the devDependencies at the root because there's different versions used by different packages. Can this be fixed in lerna instead?. What makes you say that? We use lerna for our product which contains a number of submodules (server, cloud functions, web app, android, ios, etc.) since it removes the need to have lots of cross repo changes and working in a monorepo is how all our tooling works. Different clients might use different versions of certain build tools. Also not all tools are okay with symlinks inside node_modules, so hoisting all packages breaks some tools.\nWe really like using lerna, but it seems you're trying to pass judgement on how folks run their projects which makes it hard for us to use it. I'm not sure how you expect people to use lerna in an npm@5 world since it seems the default workflow from before stops working and you're forced into a very opinionated (--hoist + only devDependencies in the root) workflow instead. I guess we could fork lerna at Google, but that'd be unfortunate.. ",
    "imsobear": "I think the npmClient option should support publish command. @evocateur . ```bash\n\u279c  iceland-packages git:(master) git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nnothing to commit, working tree clean\n\u279c  iceland-packages git:(master) ./node_modules/.bin/lerna version patch\nlerna notice cli v3.1.2\nlerna info versioning independent\nlerna info Looking for changed packages since @ali/iceland-data-engine@0.3.19\nChanges:\n - @ali/iceland-dsl2code: 0.7.44 => 0.7.45\n - @ali/iceland-editor: 0.2.68 => 0.2.69\n - @ali/iceland-paint: 1.2.32 => 1.2.33\n - @ali/iceland-plugin-property-panel: 0.1.97 => 0.1.98\n - @ali/iceland-widget-richtext: 0.2.35 => 0.2.36\n - @ali/iceland-workbench: 1.4.45 => 1.4.46\n? Are you sure you want to create these versions? Yes\nlerna info lifecycle iceland-packages@1.0.0~version: iceland-packages@1.0.0\n\niceland-packages@1.0.0 version /Users/sobear/work/iceland/iceland-packages\nlerna version\n\nlerna notice cli v3.1.2\nlerna info versioning independent\nlerna info Looking for changed packages since @ali/iceland-data-engine@0.3.19\nlerna ERR! EUNCOMMIT Working tree has uncommitted changes, please commit or remove changes before continuing.\nlerna info lifecycle iceland-packages@1.0.0~version: Failed to exec version script\nlerna ERR! lifecycle error running version in iceland-packages\nlerna ERR! lifecycle  Error: iceland-packages@1.0.0 version: lerna version\nlerna ERR! lifecycle Exit status 1\nlerna ERR! lifecycle     at EventEmitter. (/Users/sobear/work/iceland/iceland-packages/node_modules/_npm-lifecycle@2.1.0@npm-lifecycle/index.js:301:16)\nlerna ERR! lifecycle     at emitTwo (events.js:126:13)\nlerna ERR! lifecycle     at EventEmitter.emit (events.js:214:7)\nlerna ERR! lifecycle     at ChildProcess. (/Users/sobear/work/iceland/iceland-packages/node_modules/_npm-lifecycle@2.1.0@npm-lifecycle/lib/spawn.js:55:14)\nlerna ERR! lifecycle     at emitTwo (events.js:126:13)\nlerna ERR! lifecycle     at ChildProcess.emit (events.js:214:7)\nlerna ERR! lifecycle     at maybeClose (internal/child_process.js:925:16)\nlerna ERR! lifecycle     at Process.ChildProcess._handle.onexit (internal/child_process.js:209:5)\nlerna info git Pushing tags...\nlerna success version finished\n``. and--force-publish` option is not useful:\n\u279c  iceland-packages git:(master) ./node_modules/.bin/lerna version --force-publish=*\nlerna notice cli v3.1.2\nlerna info versioning independent\nlerna notice Current HEAD is already released, skipping change detection.\nlerna success No changed packages to version. @evocateur When i removed the \"version\": \"lerna version\" npm script from root package.json lerna version cmd works well, but lerna publish not works:\n```\n\u279c  iceland-packages git:(master) ./node_modules/.bin/lerna version patch\nlerna notice cli v3.1.2\nlerna info versioning independent\nlerna info Looking for changed packages since @xxx/iceland-dsl2code@0.7.45\nChanges:\n - @xxx/iceland-dsl2code: 0.7.46 => 0.7.47\n? Are you sure you want to create these versions? Yes\nlerna info git Pushing tags...\nlerna success version finished\n\u279c  iceland-packages git:(master) ./node_modules/.bin/lerna publish\nlerna notice cli v3.1.2\nlerna info versioning independent\nlerna notice Current HEAD is already released, skipping change detection.\nlerna success No changed packages to publish\n```\nlooks no package published. \ud83d\ude15 . when i run publish directly(no version cmd before), I get some error message: \n```\n\u279c  iceland-packages git:(master) ./node_modules/.bin/lerna changed\nlerna notice cli v3.1.2\nlerna info versioning independent\nlerna info Looking for changed packages since @ali/iceland-data-engine@0.3.21\n@ali/iceland-dsl2code\nlerna success found 1 package ready to publish\n\u279c  iceland-packages git:(master) ./node_modules/.bin/lerna publish patch\nlerna notice cli v3.1.2\nlerna info versioning independent\nlerna info Looking for changed packages since @ali/iceland-data-engine@0.3.21\nChanges:\n - @ali/iceland-dsl2code: 0.7.47 => 0.7.48\n? Are you sure you want to publish these packages? Yes\nlerna info git Pushing tags...\nlerna info publish Publishing packages to npm...\nlerna WARN ETHIRDPARTY Skipping ping of http://registry.npm.private.com as most third-party registries do not support advanced npm functionality\nnpm http request GET http://registry.npm.private.com/-/org/ice-admin/package?format=cli\nnpm http 404 http://registry.npm.private.com/-/org/ice-admin/package?format=cli\nnpm http request GET http://registry.npm.private.com/-/user/ice-admin/package?format=cli\nnpm http 404 http://registry.npm.private.com/-/user/ice-admin/package?format=cli\nnpm ERR! code E404\nnpm ERR! 404 not_found document not found: -/user/ice-admin/package\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /Users/sobear/.npm/_logs/2018-08-21T15_44_29_267Z-debug.log\nlerna ERR! EWHOAMI Authentication error. Use npm whoami to troubleshoot.\n``` \nI don't understand lerna need check third-party registry what ability in version 3.x.. @evocateur works! thanks for your reply. \ud83d\udc4d \nAnd http://registry.npm.private.com/ is my company internal registry, private just a example. I think the internal registry missing some abilities compared to npm.. Hi, @evocateur I can't find the API(/-/user/:scope/package) on npm-registry API docs. So where did you find this API? . \nI debug to npm-publish.js npmPack function, and find fs.move throw err. From the error message looks like the tgz path has some wrong. @evocateur . \n\nlooks like pkg.tarball.filename value is encoded by sth.. \n\nMaybe  function parseLegacyTarballs need filter the special unicode. https://www.npmjs.com/package/strip-ansi. looks 0.4.3 fixed this problem. \n@evocateur I can not publish package to npm through other private npm client. Looks like i have some wrong understanding of the npm publish. Just config publishConfig.registry, the public npm could publish private npm package. Thanks \ud83d\ude03  @doug-wade . ",
    "wssgcg1213": "+2. ",
    "ypli0629": "+3. ",
    "viliusl": "No, thank you:). @sdeleon28 I had the same happening. Though feedback is not amazing, but when using workspaces you should declare your packages in package.json - https://github.com/lerna/lerna#--use-workspaces.\nAfaik better feedback from lerna would do the trick.\n. @evocateur would like your input on this one. Thanks. Well --include-filtered-dependencies changes the behaviour (includes untouched modules) and --since without it does not yield valid result.\nIt would be a breaking change though, so if you don't agree on changing it I will not attempt that. Though it's painful for me as I do work on a project with ~ 90 modules and if I touch one, I can get a PR build with say 5 modules to build/test, but if I will add --include-filtered-dependencies then it will be 75 instead:/\n. ",
    "willyboy": "Seeing the same with npm version 3.10.10. ",
    "jbidston": "I was having a similar issue, and was running Lerna with npx.\nAs you suggested, it appears to be when running with npx. \nI installed Lerna globally, published (all packaged) but then subsequent changes were picked up correctly.\n. ",
    "am80l": "It looks like this was a side effect of another issue. Though I was able to reproduce it at the time, that is no longer the case. Closing. . I havn't tried, but is there some maybe way to use the conventional releaser-tools to accomplish this? \nhttps://github.com/conventional-changelog/releaser-tools. Interesting. It should be noted that the failing package was the root package tracked using \".\" in lerna.json. Looking back through the logs, failing/retrying seemed to only ever happen for that top level package. Since it wasn't buying us much, I've since stopped tracking the root package as it seemed to be more problematic during publishing than those managed in /packages/.. ",
    "tomredman": "+1 for updates - we've also run into this and lost some work during development. . ",
    "Offirmo": "Just run into that. My new package vanished into oblivion \ud83d\ude22 super complicated code not yet commited.\nIf that can help:\n- the package was originally OUTSIDE of lerna, I may have npm linked it in one of the existing lerna packages from outside during dev\n- I then decided to copy it into lerna packages/\n- manually changed the version in its package.json and some other changes\n- lerna bootstrap: gone!\n. @evocateur \n\nThe hoisted directory pruning should probably also filter out lerna-managed siblings, and/or the rimraf call should not follow symlinks.\n\ndefinitely YES \ud83d\ude3f \n[edit] managed to recover most of the code \ud83e\udd15 . ",
    "erwinverdonk": "Here some info regarding the cause of this issue:\nThe actual problem here is not directly related to Lerna. It is related to the Lerna usage of the rimraf module. This module uses lstat and thus treats symbolic links, like the ones Lerna creates to link packages, as directories. The result is that when Lerna wants to remove a symbolic link dependency from node_modules, it will actually remove the directory it is linked to, which is undesired. \nSolution would be to use stat instead of lstat, which does not follow symbolic links for information, but that is something either has to be added as an option to rimraf or use something else other than rimraf for the removal of dependencies in the node_modules folder.\nNow that the cause is clear, we have to think of a solution for Lerna. However I first would like to know what @evocateur thinks about this.\nI see that @evocateur already mentioned something similar to this a few posts up. So yeah now we only need someone who will add a PR for the fix. Maybe I will cook something, but am a bit busy lately :).. ",
    "iabw": "1004 was released in Lerna 2.2.0, but I'm on Lerna 2.4.0 and still want to +1 this. Here's an install error I was getting earlier:\n```\n\ud83d\udc7b  $ lerna bootstrap\nlerna info version 2.4.0\nlerna info Bootstrapping 7 packages\nlerna info lifecycle preinstall\nlerna info Installing external dependencies\nlerna ERR! execute callback with error\nlerna ERR! Error: Command failed: npm install\nlerna ERR! npm WARN deprecated babel-preset-es2015@6.24.1: \ud83d\ude4c  Thanks for using Babel: we recommend using babel-preset-env now: please read babeljs.io/env to update!\nlerna ERR! npm ERR! code ENOLOCAL\nlerna ERR! npm ERR! Could not install from \"node_modules/prop-types\" as it does not contain a package.json file.\nlerna ERR!\nlerna ERR! npm ERR! A complete log of this run can be found in:\nlerna ERR! npm ERR!     /Users/iabw/.npm/_logs/2017-10-28T23_05_02_344Z-debug.log\nlerna ERR!\nlerna ERR!     at Promise.all.then.arr (/usr/local/lib/node_modules/lerna/node_modules/execa/index.js:236:11)\nlerna ERR!     at \n(node:25282) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 4): Error: Command failed: npm install\nnpm WARN deprecated babel-preset-es2015@6.24.1: \ud83d\ude4c  Thanks for using Babel: we recommend using babel-preset-env now: please read babeljs.io/env to update!\nnpm ERR! code ENOLOCAL\nnpm ERR! Could not install from \"node_modules/prop-types\" as it does not contain a package.json file.\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /Users/iabw/.npm/_logs/2017-10-28T23_05_02_344Z-debug.log\n(node:25282) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\n```\nThe full log file referenced the path, so I used that to find the correct package, but it's not ideal.\nPS - basically unrelated, but also annoying/weird - the prop-types bug was caused by Lerna apparently moving some peerDependencies to dependencies, and the \"new\" prop-types dependency was referenced like \"node_modules/prop-types\", (which I realized to check after googling and landing on this ionic-cli issue). These are pretty basic packages, just small React/Babel/Webpacked components, and I'm not using ionic-cli or Cordova.. ",
    "Shepless": "@evocateur So just to clarify - does lerna bump the peerDependencies between packages?. ",
    "TombolaShepless": "@evocateur I've done some tests (EDIT: not unit tests, by running lerna publish) and it does indeed bump peerDependencies. I'll see what I can do :). @nicojs confirmed it also does this for me, but I have my peerDependencies \"paired\" up with devDependencies for testing purposes.. ",
    "ljharb": "peer deps should never be forcefully updated; updating a minimum peer dep range is a breaking change. Peer dep ranges should always remain as broad as is possible.. bump. bump. peer deps should definitely be loose; any peer dep change that removes a valid version is semver-major.. @evocateur indeed, the best practice is a) for peer dep ranges to be as wide as possible, and b) for dev dep ranges to be identical to the peer dep range.\nUpdating deps isn't a violation of semver; updating the bottom of the range for peer deps - because it's part of the API of the module - is absolutely semver-major.\nairbnb's enzyme recently switched to lerna; and this is a reason we may want to abandon it - it's that important, and decidedly \"worth worrying about\".. That's certainly better then the current situation! However, what would be ideal is expanding the existing peer dep range so that it includes the new dev dep version; and separately, it would be ideal to find a way to keep the dev dep matching the peer dep, but that doesn't have to be a blocker.. @ianstormtaylor fwiw it's not rare, it's \"every package in the react and eslint ecosystems\", plus any other ecosystem that uses peer deps :-). Maybe I should also expand :-)\nLet's say the peer dep range is ^4 || ^5, and you're otherwise bumping to v6. The peer dep range must become ^4 || ^5 || ^6 if it's going to retain back compat while also allowing v6. If the range is ~15.3 || ~15.4, and you're otherwise bumping to 15.5, then the range must become ~15.3 || ~15.4 || ~15.5.\nWhat might be a viable alternative beyond doing nothing (indeed a good first step) is an in-terminal UI to allow me to provide a peer dep range, if lerna is unable to confidently come up with one?. It's something that could probably be configured so that lerna doesn't have to infer it, though.. @StevenLiekens that's not the smart outcome - that'd be that after publish, bar@1.1.0 would depend on foo @ ^0.2.1 || ^1.0.0, presuming that bar had been updated to be compatible with both versions of foo.. Breaking changes can be runtime-detected; very often you can intentionally write code that handles more than one major version at a time of the same dependency.\nThe issue here is indeed that lerna can never guess.. That seems strictly better than the current behavior; personally I'd rather lerna error out when that's the case - ie, force me to manually resolve the conflict before publishing.. For the record, using >= is insanely dangerous and reckless and is absolutely an antipattern. It\u2019s not pragmatism or convenience to set yourself up for guaranteed future breakage when the next semver-major is released.. @StevenLiekens even that won\u2019t protect you against bugs in later versions in the range; you\u2019d have to test against multiple versions. I usually opt for either \u201cearliest, and latest\u201d, or \u201cevery minor\u201d - so to make sure npm ls always passes, the dev dep range needs to be identical to the peer dep range.. If it\u2019s \u201cadded\u201d then it\u2019s a breaking change; bugs are unintentional and can be fixed.. Sure, but then you\u2019ll be artificially insulating yourself from bugs that affect your consumers.\nEither way this is getting off topic for the thread :-). That seems like a great solution in general, not just for monorepos. @iarna, any possibility of being able to customize longer periods? Like an hour, perhaps?. um, this isn't a good change; \"as broad as possible\" requires ^, because declaring compatibility with ^1 is not the same thing as declaring infinite future compatibility across future semver-major lines.\nCan this be fixed in a followup?. ok cool, i was worried that this indicated that lerna actually changed ^ to >=. Never touching peer deps is better than doing the wrong thing, that's for sure (but not as good as doing the right thing, which is keeping the existing semver range but widening it as needed to include the new version). ",
    "QuentinFchx": "Not sure if 100% related to #448, but if the whole \"update each package's dependencies\" flow could be fixed(^yarn symlinks)/improved/documented that would be awesome.\n. ",
    "griest024": "It would certainly be nice for the CLI to follow npm as closely as possible, but I would settle for non-breaking changes that implement this.\nIt seems that @shawnbot's proposed --skip-publish switch can be accomplished with --skip-npm --skip-git so all this really needs is a --skip-version switch.. ",
    "morgs32": "I'd like to better understand this issue. @shawnbot you say...\n\nOther teams that want to automate publishing will inevitably run into the same issue\n\nWhat is the issue exactly? That their process is to publish some packages outside the CI pipeline and some in it? That they get errors in a try-publish script because they want that sort of functionality?\nI must have started watching this issue a while back because I THOUGHT I wanted something similar but came to be perfectly happy with the current API. \n. Hmm. To me, lerna publish --skip-npm is the equivalent? Packages get incremented. Git tags created. What am I missing?. I agree on both counts.\nAs for wanting to run lerna publish again after the --skip-npm, I don't think you should have to. I figured if you were wanting to see the version bumps and git tags you were doing that locally. In which case git reset --hard HEAD~?\nIf you're in a CI pipeline what's the use for --skip-npm?. @evocateur \nWhy would tests run in a fraction of the time? Just curious\nhttps://github.com/lerna/lerna/issues/994#issuecomment-376016719. @penx what about the package from @azu.\nCould that help you?\nhttps://github.com/lerna/lerna/issues/1056#issuecomment-360095023. @evocateur I salute you this looks so promising. I am curious about the bit of documentation that strongly discourages running lerna version from a branch. I kind of figured that I'd manually be incrementing versions on a branch and in a PR, and then on merge to master I'd lerna publish from-git. But is that not a wise idea? What sort of process would you suggest or what did you have in mind?\n(This part added later) Actually, I think your documentation is sufficient I just had to read it a couple times. Do think doing this in GitHub on my monorepo would remove the concern?\n\n. ",
    "bladedancer": "I'm hitting the exact same issue and started looking at the code to create an up-to-date PR but the more I dig the more something feels wrong here. So before spending too much time on it I wanted to check what's the acceptable behavior for canary.\nOur CI system is publishing canary builds on feature branches to essentially create a testable but disposable artifact. We can then independently QA the features prior to merging down to master. The merge to master is publishing the normal build.\nAnyway as noted here, the canary publish is publishing all packages. This is noisy, slower and also consumes a lot of space in our private registry (our CI system is doing this on every push). So we're looking into limiting this to just publishing deltas.\nThe --since option seems to be a workable solution but just in general it feels like I'm abusing the --canary option. The docs describe it's usage as being for per commit publishes and not as being for disposable builds.\nSpecifically code like this in UpdatedPackagesCollector\nseems to require it's per commit, i.e. that diff will just return the latest commit, if I've multiple commits in a single push then the canary only sees the latest. Which I suppose is in line with what the docs say. \nSo long story short, if --canary got a --since flag would it be in line with the expectations of the canary functionality?\nthanks.\n. Yes this is definitely much cleaner than trying to kludge something together with --since. Thanks for the pointer.\nThe only thing to note about this approach is that there is a difference in how the pre-release increments happen. Take the case where my branch version is 2.1.0-52. \nOn publish a canary build will publish as: 2.1.0-53-preid.hash (https://github.com/lerna/lerna/blob/master/src/commands/PublishCommand.js#L453).\nOn publish skip-git the version will be: 2.1.0-preid.hash.0. I lose the pre-release increment. This is the expected semver.inc behaviour so I think I can live with that, it's not critical for me to be able to track the target pre-release versions on these builds.\nAgain thanks for the time.\n. ",
    "yoitsro": "I think this issue is closed with lerna 3 now, right?\nHowever, for some reason, when a canary publish is performed, the packages which depend on the specific canary versions (e.g. 1.10.3-preid.hash.0) of those packages aren't updated to include these canary versions. Is that expected behaviour, or a bug?\nI've tried what's suggested here https://github.com/lerna/lerna/issues/1161#issuecomment-359626768, which worked in lerna 2, but not lerna 3 (even with the bump positional). Any ideas?. So, I've just seen that the versions all get bumped whilst the publish is in progress, but then reset after the publish occurs. This is generally fine since we don't want a dirty working tree, but I do need a way to consume the canary packages from within a docker build.\nI've tried to use the version command, but it doesn't get the ref count, which is what the canary versions are published with. Any help would be ideal! Thank you!. ",
    "alisd23": "More complex solution than I thought. Also some tests are broken on master it seems, plus publish command prints to stderr even when there is no error, which I can't figure out.. Oh. Out of interest: why not use stdout? Maybe this fix is valid then.. ",
    "jasoncarmona": "This would definitely help the process of running scripts at the root level when they are chaining calls with lerna run script-name inside the packages.\n. ",
    "Arikael": "unfortunately the error persists.\nEDIT\nJust reverted back to npm 4.6.1 and the error still persists.\nWhat I didn't mention before: We are working on VDI machines. Don't know if that's important\nEDIT 2\nSometimes, for different npm/node commands (npm outdated or a custom lint script) I get the following error\n\n. ",
    "sgrishchenko": "I have same error and --bail false helped me. ",
    "sapegin": "Looks like CI failures aren\u2019t related to my changes \u2014 I\u2019ve changed only documentation anyway.. ",
    "erquhart": "Just wanted to chime in on what a big deal this is. Here's what just happened on the Netlify CMS repo:\n\nRan our publish script.\nOurs takes a while, so I reviewed and merged a PR while waiting.\nReleases were published to npm.\nPush failed (obviously).\n\nMy tags are now in stone, so the only way to fix this was to remove protections from master, cherry pick the merged work, and force push to master.\nSo I won't merge PR's during publishing anymore, but we have other maintainers that could merge a PR at any time, making publishing sort of an unsafe operation.\nJust wanted to add some additional perspective, hope it helps outline the problem a little better.. But Lerna handles versioning logic based on our conventional commits - how would I use npm version in tandem with Lerna?. Awesome, thanks for explaining!. Is Lerna pretty hands off with conventional changelog or does it receive any data from it direct? Wondering if a combined changelog could be assembled just using programmatic output from conventional changelog, but not certain how it's used here.. pleeeez don't do it mister robot. keepalive. cc/ @evocateur    . \ud83e\udd26\u200d\u2642\ufe0f\ud83d\udc4c\ud83c\udffc. ",
    "tkissing-work": "We just had the same happen in our repo. About a dozen packages published (by Jenkins) and the commit/tag are lost because someone merged to master in the meantime. \nWe use Jenkins to do the release (developers can't even push to master) on other, single-package repositories and there the order is npm version, git push, npm publish. If git push fails, nothing has happened yet. If npm publish fails, it's easy to recover: check out the tag, publish again.. Thanks for the work-around tip @Jmsa and for the quick fix @evocateur \nBugs happen, it's the reaction to it that matters - and seeing more/better unit tests is the kind of reaction I like :). ",
    "canercandan": "I\u00a0am currently using the option --force-publish=* to bypass this issue but obviously it removes the whole benefit of using the fixed version mode. Hi @jezzay many thanks for your help on this, can you provide a quick way to install a non-npm-published version of lerna including your PR? I\u00a0guess that I\u00a0need to clone the whole repo checkout your commit and yarn link locally but I\u00a0need you to confirm. Thanks ;-). @jezzay I\u00a0manage to install lerna with you commit (downloaded the ZIP of the PR from github, extracted the ZIP\u00a0locally, called yarn to install the deps and used sudo yarn link to get the lerna binary linked to /usr/local/bin) but when I\u00a0try to reproduce the steps described here https://github.com/lerna/lerna/issues/988#issue-253047587 it still try to re-create the same git tag that have been already created at the previous lerna publish call. here is the complete error I\u00a0got this time:\n```\nlerna info version 2.1.0\nlerna info current version 1.3.0\nlerna info Checking for updated packages...\nlerna info Comparing with v1.3.0.\nChanges:\n - pkg3: 1.2.0 => 1.3.0\nlerna info auto-confirmed \nlerna ERR! execute Error: fatal: tag 'v1.3.0' already exists\nlerna ERR! execute \nlerna ERR! execute     at Function.module.exports.sync (/usr/local/lib/node_modules/lerna/node_modules/execa/index.js:303:26)\nlerna ERR! execute     at Function.execSync (/usr/local/lib/node_modules/lerna/lib/ChildProcessUtilities.js:59:30)\nlerna ERR! execute     at Function.addTag (/usr/local/lib/node_modules/lerna/lib/GitUtilities.js:90:39)\nlerna ERR! execute     at PublishCommand.gitCommitAndTagVersion (/usr/local/lib/node_modules/lerna/lib/commands/PublishCommand.js:658:30)\nlerna ERR! execute     at PublishCommand.commitAndTagUpdates (/usr/local/lib/node_modules/lerna/lib/commands/PublishCommand.js:627:27)\nlerna ERR! execute     at PublishCommand.execute (/usr/local/lib/node_modules/lerna/lib/commands/PublishCommand.js:270:16)\nlerna ERR! execute     at PublishCommand._attempt (/usr/local/lib/node_modules/lerna/lib/Command.js:289:21)\nlerna ERR! execute     at /usr/local/lib/node_modules/lerna/lib/Command.js:276:15\nlerna ERR! execute     at /usr/local/lib/node_modules/lerna/lib/Command.js:301:13\nlerna ERR! execute     at PublishCommand.confirmVersions (/usr/local/lib/node_modules/lerna/lib/commands/PublishCommand.js:528:9)\nlerna ERR! execute  callback with error\nlerna ERR! execute  { Error: fatal: tag 'v1.3.0' already exists\nlerna ERR! execute \nlerna ERR! execute     at Function.module.exports.sync (/usr/local/lib/node_modules/lerna/node_modules/execa/index.js:303:26)\nlerna ERR! execute     at Function.execSync (/usr/local/lib/node_modules/lerna/lib/ChildProcessUtilities.js:59:30)\nlerna ERR! execute     at Function.addTag (/usr/local/lib/node_modules/lerna/lib/GitUtilities.js:90:39)\nlerna ERR! execute     at PublishCommand.gitCommitAndTagVersion (/usr/local/lib/node_modules/lerna/lib/commands/PublishCommand.js:658:30)\nlerna ERR! execute     at PublishCommand.commitAndTagUpdates (/usr/local/lib/node_modules/lerna/lib/commands/PublishCommand.js:627:27)\nlerna ERR! execute     at PublishCommand.execute (/usr/local/lib/node_modules/lerna/lib/commands/PublishCommand.js:270:16)\nlerna ERR! execute     at PublishCommand._attempt (/usr/local/lib/node_modules/lerna/lib/Command.js:289:21)\nlerna ERR! execute     at /usr/local/lib/node_modules/lerna/lib/Command.js:276:15\nlerna ERR! execute     at /usr/local/lib/node_modules/lerna/lib/Command.js:301:13\nlerna ERR! execute     at PublishCommand.confirmVersions (/usr/local/lib/node_modules/lerna/lib/commands/PublishCommand.js:528:9)\nlerna ERR! execute   stack: 'Error: fatal: tag \\'v1.3.0\\' already exists\\n\\n    at Function.module.exports.sync (/usr/local/lib/node_modules/lerna/node_modules/execa/index.js:303:26)\\n    at Function.execSync (/usr/local/lib/node_modules/lerna/lib/ChildProcessUtilities.js:59:30)\\n    at Function.addTag (/usr/local/lib/node_modules/lerna/lib/GitUtilities.js:90:39)\\n    at PublishCommand.gitCommitAndTagVersion (/usr/local/lib/node_modules/lerna/lib/commands/PublishCommand.js:658:30)\\n    at PublishCommand.commitAndTagUpdates (/usr/local/lib/node_modules/lerna/lib/commands/PublishCommand.js:627:27)\\n    at PublishCommand.execute (/usr/local/lib/node_modules/lerna/lib/commands/PublishCommand.js:270:16)\\n    at PublishCommand._attempt (/usr/local/lib/node_modules/lerna/lib/Command.js:289:21)\\n    at /usr/local/lib/node_modules/lerna/lib/Command.js:276:15\\n    at /usr/local/lib/node_modules/lerna/lib/Command.js:301:13\\n    at PublishCommand.confirmVersions (/usr/local/lib/node_modules/lerna/lib/commands/PublishCommand.js:528:9)' }\n``. ohhh nooooo my bad thesudo yarn linkdid not prevent not using the previously installedlerna(2.1.0) version (see the path/usr/local/lib/node_modules/lernain the error trace) so I will try to use thelernabin generated in @jezzay version oflernawith the absolute path rather than throughyarn link`. @jezzay and it works ;-) awesome :-p thanks dude\n```\n$ node /tmp/lerna/bin/lerna.js publish --conventional-commits --yes --skip-npm\nlerna info version 2.1.0\nlerna info current version 1.3.0\nlerna info Checking for updated packages...\nlerna info Comparing with v1.3.0.\nChanges:\n - pkg3: 1.3.0 => 1.4.0\nlerna info auto-confirmed \n```. I\u00a0am looking forward to seeing this PR merged and released now ;-). @jezzay you are certainly right, it's reopened ;-). ",
    "Jmsa": "I'm seeing this as well and tracked it back to the the addition of type: string in the \"builder\" definition in PublishCommand.js. It's linked to some proposed changes for #915 and apart of this commit 83aad8f7cc11b241ec4225d3318cf3f83b63eec6.\n@tkissing-work It's hacky but (for me) one work around is to use --canary=HEAD instead of --canary. Just be aware that since the canary flag is used in the version bumping that this will add HEAD to new the version of a package. Example 1.0.1 => 1.1.0-HEAD.8db8964f.\n@shawnbot & @evocateur - It seems like the issues stems from trying to use canary (in 2.1.0) as a both a string and a boolean. For some other builder options it looks like there defaults that get set. If the plan is keep using that pattern the following (might be missing steps) should work, right?\n Add a new default for canary - default: undefined\n Change most checks to assert ...canary !== undefined\n Change check in UpdatedPackagesCollector.collectUpdatedPackages() to look for undefined, but also to look at string length afterwards when deciding whether or not to use GitUtilities.getCurrentSHA\n Update relevant test. Nice! Accurately failing tests = \ud83d\udc4d \nWhen do you envision these changes make their way into a new release?. ",
    "ptshih": "This also happens with lerna run --parallel. ",
    "frankwallis": "I'm seeing this when running lerna run build without using --stream or --parallel. I'm using lerna@2.1.2 and the build command runs webpack:\nlerna ERR! execute         + 8 hidden modules\nlerna ERR! execute\nlerna ERR! execute     at Promise.all.then.arr (/usr/lib/node_modules/lerna/node_modules/execa/index.js:236:11)\nlerna ERR! execute     at <anonymous>\nlerna ERR! execute     at process._tickCallback (internal/process/next_tick.js:188:7)\nlerna ERR! execute   stack: 'Error: Command failed: npm run build-dev\\nclean-webpack-plugin: /mnt/c/work/cofco/mergerepos/monorepo3/packages/ca.ui.module.core/dist has been removed.\\n\\n[at-loader] Checking finished with 1 errors\\nnpm ERR! code ELIFECYCLE\\nnpm ERR! errno 2\\nnpm ERR! ca-ui-module-core@10.0.0 build-dev: `webpack --env.development`\\nnpm ERR! Exit status 2\\nnpm ERR! \\nnpm ERR! Failed at the ca-ui-module-core@10.0.0 build-dev script.\\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\\n\\nnpm ERR! A complete log of this run can be found in:\\nnpm ERR!     /home/frank/.npm/_logs/2017-09-15T09_37_36_206Z-debug.log\\n\\n> ca-ui-module-core@10.0.0 build-dev /mnt/c/work/cofco/mergerepos/monorepo3/packages/ca.ui.module.core\\n> webpack --env.development\\n\\nNot using source maps at all for development\\nNot using full source maps for dependencies\\n\\n[at-loader] Using typescript@2.5.2 from typescript and \"tsconfig.json\" from /mnt/c/work/cofco/mergerepos/monorepo3/packages/ca.ui.module.core/tsconfig.json.\\n\\n\\n[at-loader] Checking started in a separate process...\\nHash: 9bf04aa8f24862a52d3d\\nVersion: webpack 3.5.6\\nTime: 30474ms\\n\n                                  Asset       Size  Chunks                    Chunk Names\\n           component-assets/DejaVuSans-Bold.ttf     704 kB          [emitted]  [big]  \\n             component-assets/columnGroupL1.svg  953 bytes\n       [emitted]         \\n             component-assets/columnGroupL3.svg    1.05 kB          [emitted]         \\n             component-assets/cofco-sprites.png  288 bytes          [emitted]         \\n                    component-assets/sprite.png    13.3 kB          [emitted]         \\n                   component-assets/loading.gif    2.74 kB          [emitted]         \\n             component-assets/loading-image.gif    6.54 kB          [emitted]         \\n\ncomponent-assets/indeterminate.gif    2.12 kB          [emitted]         \\n                  component-assets/slider-h.gif   63 bytes          [emitted]         \\n                  component-assets/slider-v.gif   63 bytes          [emitted]\n         \\n              component-assets/imagebrowser.png    6.21 kB          [emitted]         \\n                component-assets/sprite_kpi.png  787 bytes          [emitted]         \\n                 component-assets/sprite_2x.png    33.7 kB          [emitted]         \\n             component-assets/sprite_kpi_2x.png    1.47 kB          [emitted]         \\n                   component-assets/markers.png  988 bytes          [emitted]         \\n                component-assets/markers_2x.png    2.17 kB          [emitted]         \\n              component-assets/transparency.png    1.83 kB          [emitted]         \\n             component-assets/KendoUIGlyphs.eot    22.5 kB          [emitted]         \\n\n         component-assets/transtexture.png  203 bytes          [emitted]         \\n                       component-assets/hue.png    1.71 kB          [emitted]         \\n             component-assets/KendoUIGlyphs.ttf    22.3 kB          [emitted]         \\n            component-assets/KendoUIGlyphs.woff    22.4 kB          [emitted]         \\n             component-assets/KendoUIGlyphs.svg    61.6 kB          [emitted]         \\n                component-assets/DejaVuSans.ttf     756 kB          [emitted]  [big]  \\n             component-assets/columnGroupL2.svg    1.04 kB          [emitted]         \\n        component-assets/DejaVuSans-Oblique.ttf     634 kB          [emitted]  [big]  \\n    component-assets/DejaVuSans-BoldOblique.ttf     642 kB          [emitted]  [big]  \\n               component-assets/DejaVuSerif.ttf     380 kB          [emitted]  [big]  \\n          component-assets/DejaVuSerif-Bold.ttf     356 kB          [emitted]  [big]  \\n        component-assets/DejaVuSerif-Italic.ttf     346 kB          [emitted]  [big]  \\n    component-assets/DejaVuSerif-BoldItalic.ttf     347 kB          [emitted]  [big]  \\n            component-assets/DejaVuSansMono.ttf     340 kB\n       [emitted]  [big]  \\n       component-assets/DejaVuSansMono-Bold.ttf     332 kB          [emitted]  [big]  \\n    component-assets/DejaVuSansMono-Oblique.ttf     251 kB          [emitted]  [big]  \\ncomponent-assets/DejaVuSansMono-BoldOblique.ttf     253 kB          [emitted]  [big]  \\n     component-assets/MaterialIcons-Regular.eot     143 kB          [emitted]         \\n   component-assets/MaterialIcons-Regular.woff2    44.3 kB          [emitted]         \\n    component-assets/MaterialIcons-Regular.woff    57.6 kB          [emitted]         \\n     component-assets/MaterialIcons-Regular.ttf     128 kB          [emitted]         \\n        component-assets/AvenirLTStd-Medium.otf    28.1 kB          [emitted]\n         \\n         component-assets/AvenirLTStd-Heavy.otf    28.5 kB          [emitted]         \\n          component-assets/AvenirLTStd-Book.otf    28.3 kB          [emitted]         \\n         component-assets/AvenirLTStd-Roman.otf\n28 kB          [emitted]         \\n                      component-assets/link.png  389 bytes          [emitted]         \\n          component-assets/cofco-logo-19x19.png    1.15 kB          [emitted]         \\n                           ca.ui.module.core.js    12.7 MB       0  [emitted]  [big]  main\\n                          ca.ui.module.core.css     922 kB       0  [emitted]  [big]  main\\n                                     theme.less    10.9 kB          [emitted]. I'm not sure exactly what is happening but the travis log shows it is using yarn@0.27.5 when it should be using yarn@1.0.1?. A few suggestions:\n1) I think this may be due to the way webpack resolve symlinks, try adding resolve.symlinks: false\n{\n        entry: 'index.js',\n        output: {\n            /* snip */\n        },\n        target: 'web' \n        resolve: {\n            extensions: ['.js', '.jsx', '.json'],\n            symlinks: false\n        }\n}\n2) You need to use source-map-loader. My config looks something like this:\nmodule: {\n            rules: [{\n                test: /node_modules[\\/\\\\]\\\\?(my-package).+\\.js$/,\n                enforce: 'pre',\n                use: ['source-map-loader']\n             }]\n        },\n3) pass\n4) This should \"just work\", for example see the React library here https://unpkg.com/react@16.2.0/cjs/react.development.js:\nif (process.env.NODE_ENV !== \"production\") {\nand this is configured with:\nnew webpack.DefinePlugin({\n            'process.env.NODE_ENV': JSON.stringify(env.development ? 'development' : 'production')\n       }),\n. ",
    "charlesbjohnson": "I also ran into this, but it seems to be an issue primarily with jest. Relevant issues: \n- https://github.com/facebook/jest/issues/5064\n- https://github.com/facebook/jest/issues/3690\njest's BaseReporter writes output to stderr instead of stdout. See here.\nSince lerna run collapses newlines for stderr via strong-log-transformer, we end up with escaped newlines in the output.\nhttps://github.com/lerna/lerna/blob/d35c7aa0875013248f55b26487eac99d55b59a78/src/ChildProcessUtilities.js#L52\nI'm not entirely sure why this is jest's default behavior since it doesn't seem to be consistent with other test runners (notably mocha). As such, I think the fix probably belongs in jest and not in lerna.\nRemoving mergeMultiline in lerna might not break anything (--parallel?), but it seems like it could also have larger implications since lerna run is not limited to running tests.\nThere is a very simple workaround to perform the redirection to stdout in bash, though this still probably won't work well with CI tools that read from stderr to determine build failures.\njson\n// /repo/packages/sub/package.json\n\"scripts\": {\n  \"test\": \"jest 2>&1\"\n}\njson\n// /repo/package.json\n\"scripts\": {\n  \"test\": \"lerna run test\"\n}. ",
    "KrickRay": "@FezVrasta,\nI think you can temporarily use exec. It does not have such a problem:\nsh\nlerna exec --scope <scope> --stream -- npm run <scriptName>\nYou can also wrap scripts in package.json (for example with concurrently):\njson\n\"scripts\": {\n    \"start\": \"concurrently: \\\"<script>\\\"\"\n}\nor with npm-run-all: \njson\n\"scripts\": {\n    \"start\": \"npm-run-all --print-name --serial <scriptName>\",\n    \"scriptName\": \"<script>\"\n}\n  . ",
    "alexeyraspopov": "\nRemoving mergeMultiline in lerna might not break anything (--parallel?), but it seems like it could also have larger implications since lerna run is not limited to running tests.\n\nCould we possibly discuss this option? What are the possible implications?. @evocateur, yarn lerna run test --since master on a branch allows you to run tests on the only packages that has changes.. @evocateur, by \"transitive dependencies\" do you mean sibling packages that appeared to be not tested with the command (since weren't changed)? Having \"always green master\" allows not to run all the tests, since packages weren't modified.\n\nBrilliant strategy to save a few seconds.\n\nImagine a dozen of client-side apps in a single repo, each of them with a set of e2e tests. This takes way longer than a few seconds. Especially, on CI server, where a few concurrent PRs are running.. Wasn't sure if it's worth opening a separate issue, so I'll just drop it here.\n@hzoo, have you considered adding Lerna to https://opencollective.com/? I use Lerna and would love to contribute, but I can't find enough time to do it through the code contributions. However, I'd like to thank the team for the effort and help as much as I can at least through donations. I believe that's not only me who thinks the same.. By default, lerna publish will attempt to do publish of packages that were updated (have new commits) since previous git tag. Do you specify --since when run lerna publish?. Apologies, didn't see you mentioned that in the first message.. Seems like it was changed in https://github.com/lerna/lerna/commit/ee8dae1991f661007b0cca5994eb5c812ec93561.. ",
    "eritikass": "\n\nRemoving mergeMultiline in lerna might not break anything (--parallel?), but it seems like it could also have larger implications since lerna run is not limited to running tests.\n\nCould we possibly discuss this option? What are the possible implications?\n\n2'nd that - jest is hugely popular and this is making usage of jest very problematic.  Also by the comments for jest developers, its working as excepted - so not much hope they would change it.\nPerhaps some env var or flag that can be used to disable mergeMultiline?\nwhen i tested and removed mergeMultiline from \n\nhttps://github.com/lerna/lerna/blob/6495b5c3f1c0be463f9bbf7230e1f2164faed6a4/core/child-process/index.js#L42\n\nit did work nicely with jest (happy to provide PR if any insight about accepted solution can be provided). Our use-case, we did merge several heavily connected JS projects into one for more simple management, so we do not have to make multiple PR into different projects same time etc...\nlerna did help a lot to manage this somewhat ad-hock monorepo. bootstrap to npm install all projects , run to run commands in all projects lerna run lint / lerna run start /  lerna run build / ... did not work that well for testing. \n. ",
    "lehni": "@evocateur regarding your question here \u261d\ufe0f :\nI have a monorepo in which different packages have different .babelrc files, for backend and frontend / vue.js specific code. I failed to find a nice way so far to set up jest from root in an easy way so it could run all the tests at once and still respect the different .babelrc settings, so I am using it through lerna exec instead.\nDo you know of an easy way to make this work from root? If not, then this would be an example of a reson for using lerna exec with Jest.. @evocateur I've tried that but to no avail. It looks like Jest projects aren't picking up the .babelrc files in the nested folders, and I couldn't figure out how to use transform to provide the same configuration.. @evocateur I found a solution for nested .babelrc and Jest now, but I needed to write my own version of babel-jest to be able to do so. The explanation is here, in case it's of interest for others:\nhttps://github.com/lehni/babel-jest-nested#example-with-lerna\nhttps://stackoverflow.com/questions/50511308/jest-projects-configuration-does-not-read-babelrc-and-webpack-config-json-in/51174657#51174657. I would love to see this implemented also. I am in the process of migrating a project to Lerna that so far was using tags without 'v' prefixed to the versions, and that decision was informed by reading:\nhttps://github.com/semver/semver/issues/204\nhttps://github.com/semver/semver/blob/master/semver.md#is-v123-a-semantic-version. ",
    "miguelcrespo": "I totally agree that we need a way to add/upgrade/remove npm packages for packages in the lerna way and I find the approach @evocateur suggested simple and it will work\nAnd as @Inkdpixels said is this something that one can contribute to lerna?\nBecause I can work on this. ",
    "iansu": "\ud83c\udf89 Any idea when this will be released?. ",
    "kachkaev": "Temporary workaround until remove is implemented:\nlerna exec --concurrency=1 yarn remove something\nHelps when installing something with lerna add by accident. The command crashes for me without --concurrency=1.. @doug-wade sure\nyarn lerna add left-pad\nyarn lerna exec --concurrency=1 yarn remove left-pad\n\ud83d\udc4c \n\nyarn lerna add left-pad\nyarn lerna exec yarn remove left-pad\n\nerror log\n\n0 silly input [ 'yarn', 'remove', 'left-pad' ]\n1 silly flags { _: [ 'exec' ],\n1 silly flags   'reject-cycles': false,\n1 silly flags   rejectCycles: false,\n1 silly flags   command: 'yarn',\n1 silly flags   args: [ 'remove', 'left-pad' ] }\n2 verbose rootPath /path/to/root\n3 info version 2.10.2\n4 silly existsSync /path/to/root/VERSION\n5 info versioning independent\n6 silly initialize attempt\n7 silly initialize success\n8 silly execute attempt\n9 error exec Errored while executing 'yarn remove left-pad' in 'block-attributes'\n10 error execute callback with error\n11 error Error: Command failed: yarn remove left-pad\n11 error     at Promise.all.then.arr (/path/to/root/node_modules/lerna/node_modules/execa/index.js:236:11)\n11 error     at \n\n\nThe command executes well for 4 out of 7 packages (the ones that have no own internal dependencies) and then lerna crashes.\nUsing yarn lerna instead of just lerna because I'm keeping lerna as a monorepo dependency. I guess that's useful for CI/CD.. Thank you for for adding this feature @marionebl!\nI noticed that placing --dev before package names fails the script and it took a while to investigate. Just curious: is this intentional?\n```bash\nnot in a mono-repo\nyarn add something --dev ## works\nyarn add --dev something ## works\nmonorepo\nlerna add something --dev ## works\nlerna add --dev something ## ERROR: Missing list of packages to add to your project.\n```\nShould not --dev (as well as its alias -D) be used as flags so that they don't swallow an argument?. Created a new issue https://github.com/lerna/lerna/issues/1386. One thing to be aware of is https://github.com/npm/npm/issues/19425. 2FA OTP may timeout during the upload process and thus fail the publish. This is even the case for single npm uploads, so may be also common in lerna context. I'm not saying that 2FA should not be used because of this, just pointing to a related issue that is a big pain for me on slow connections.\nPerhaps, lerna could check for 401 during publishing and re-ask OTP in this case?. ",
    "Zalastax": "I'm having the same problem (same errors about invalid config x=undefined).  I've tried both yarn and npm, and running under both an admin account and a normal account. I'll do further investigation on my system if you have any ideas.\nErrors come from performing bootstrap on a fresh clone of: https://github.com/gatsbyjs/gatsby/commit/d1fa4b867a081786f1f6c27ffdbd8dc79e997aeb\nOS: Windows 10\nLerna: 2.1.1 (and 2.1.2 if I bump the gatsby project, same error)\nNodeJs: v8.4.0\nyarn: 0.28.4\nnpm: 5.3.0. Problem solved for me! @hoodie you're awesome!\nI was running lerna bootstrap in a ConEmu shell and switching to cmd.exe makes the script run fine.. @StarpTech does @evocateur's idea solve the problem? I personally switched to not call lerna from a ConEmu shell.. @StarpTech that's probably true but the issue can still be related. It seems like a smart idea to see what happens if extendEnv is false. Does it solve the problem? Does it break something else?. These are the places using execa. Add to the opts object extendEnv: false as necessary. I guess it's fine to add it everywhere when you test and then we can refine later. After you've done that open a pull request with your changes and AppVeyor will try to build it.. ",
    "paulelsner": "Same issue here:\nNode v8.4.0\nlerna info version 2.1.2\n\nbuild 05-Sep-2017 00:26:51             lerna ERR! execute npm WARN invalid config access=undefined\nbuild   05-Sep-2017 00:26:51             lerna ERR! execute npm WARN invalid config also=undefined\nbuild   05-Sep-2017 00:26:51             lerna ERR! execute npm WARN invalid config https-proxy=undefined\nbuild   05-Sep-2017 00:26:51             lerna ERR! execute npm WARN invalid config Must be a full url with 'http://'\nbuild   05-Sep-2017 00:26:51             lerna ERR! execute npm WARN invalid config init-author-url=undefined\nbuild   05-Sep-2017 00:26:51             lerna ERR! execute npm WARN invalid config Must be a full url with 'http://'\nbuild   05-Sep-2017 00:26:51             lerna ERR! execute npm WARN invalid config only=undefined\nbuild   05-Sep-2017 00:26:51             lerna ERR! execute npm WARN invalid config proxy=undefined\nbuild   05-Sep-2017 00:26:51             lerna ERR! execute npm WARN invalid config Must be a full url with 'http://'\nbuild   05-Sep-2017 00:26:51             lerna ERR! execute npm WARN onload-script failed to require onload script undefined. \n",
    "hoodie": "This might be somehow related: https://github.com/nodejs/node/issues/14593 (fun read)\nTL;DR: ConEmu injects a some DLL that overwrites some WinAPI calles. This seems to triggere this behaviour (perhaps somewhere in here).\nNow I don't expect AppVeyor runs ConEmu, but perhaps it does something similar.. ",
    "CodeTroopers": "Can extendEnv: false be passed on the command line : lerna bootstrap --extendEnv=false?. @payload Really!?? I have the same issue only under NodeJS 4 with Appveyor and not with NodeJS 6. And not more with NodeJS 4, NodeJS 6 or NodeJS 8 on my local environment (Windows 10)\n  . ",
    "matryoshcow": "Same issue here when trying to roll a commitizen setup (https://www.npmjs.com/package/commitizen) & ghooks (https://www.npmjs.com/package/ghooks) with a pre-commit hook that runs lerna.\nOS: Windows 10\nLerna: 2.5.1\nNode: 8.9.0\nnpm: 5.51. The issue went away for me upon updating cmder (the console emulator that I'm using). At the time of this writing the latest cmder version is 1.3.4.. Wouldn't tagging your api-service package as private solve your issue? lerna publish ignores packages that are marked as private AFAIK. This behavior is documented here: https://github.com/lerna/lerna/blob/master/README.md#publish. ",
    "payload": "Again, this is most likely an issue in nodejs itself. Please raise awareness to this problem in this issue nodejs/node#14593 \n. ",
    "kevroadrunner": "@evocateur Thanks again, your feedback has been added.. ",
    "kenjinp": "I am getting a similar problem using lerna run <some command>. ",
    "bobaaaaa": "I got the same error. Maybe it has something to do with yarn/lerna workspaces.\npackage.json important parts\njson\n{\n  \"private\": true,\n  \"workspaces\": [\n    \"static/*\",\n    \"*/static/*\"\n  ]\n}\nlerna.json\n```json\n{\n    \"lerna\": \"2.4.0\",\n    \"packages\": [\n        \"static/\",\n        \"/static/*\"\n    ],\n    \"version\": \"independent\",\n    \"npmClient\": \"yarn\",\n    \"useWorkspaces\": true\n}\n```\n| Executable | Version |\n| ---: | :--- |\n| lerna --version | 2.4.0 |\n| yarn --version | 1.1.0 |\n| node --version | 8.6.0 |\n| OS | Version |\n| --- | --- |\n| macOS Sierra | 10.12.3 |. I have tested yarn/lerna workspaces now with lerna 2.0.0, 2.1.0, 2.2.0, 2.3.1 and 2.4.0. Always the same problem. Here are the log of yarn lerna bootstrap --loglevel silly:\nyarn run v1.1.0\n$ lerna bootstrap --loglevel silly\nlerna sill input []\nlerna sill flags { _: [ 'bootstrap' ], loglevel: 'silly', args: [] }\nlerna verb rootPath $ROOT_DIR\nlerna info version 2.4.0\nlerna info versioning independent\nlerna sill existsSync $ROOT_DIR/VERSION\nlerna sill initialize attempt\nlerna sill npmConfig { registry: undefined,\nlerna sill npmConfig   npmClient: 'yarn',\nlerna sill npmConfig   npmClientArgs: undefined,\nlerna sill npmConfig   mutex: 'network:42424' }\nlerna sill initialize success\nlerna sill execute attempt\nlerna info Bootstrapping 17 packages\nlerna sill installInDirOriginalPackageJson $ROOT_DIR\nlerna sill getExecOpts { cwd: '$ROOT_DIR' }\nlerna sill installInDir [ 'yarn',\nlerna sill installInDir   [ 'install', '--mutex', 'network:42424', '--non-interactive' ] ]\n$ROOT_DIR == path to the project root dir. edit by me.. I dont have a public example repo :(. Maybe your'e right -- should i open a new issue?. ",
    "sloops77": "Since we are using workspaces the obvious workaround is to lerna run prepublish & lerna run prepare instead. ",
    "ahmadawais": "In my case I had a script called prepublish for something else and it was running that and getting stuck. So, I renamed it.. ",
    "gabrielizaias": "I solved it by removing \"postinstall\": \"lerna bootstrap\", from my root package.json.. ",
    "lukejagodzinski": "I have the same problem and in the logs it says:\n10 error initialize callback with error\n11 error Error: Can't diff. There are no commits in this repository, yet.\n11 error     at DiffCommand.initialize (/Users/lukejagodzinski/.nvm/versions/node/v6.10.3/lib/node_modules/lerna/lib/commands/DiffCommand.js:89:18)\nIt is a git repository and there is one commit. @evocateur there is more than 1 commit and I just expect it to work. lerna run start (that's the command I'm executing) shouldn't care about diff in my opinion. But as I said there are more commits and effect is the same. @evocateur I've just posted here because it's the same error as I have when executing lerna run start and it freezes. So it might be a similar issue as in the lerna bootstrap. I've been making some changes and now it does not log any errors but command still freezes.... @evocateur I've created reproduction repository showing the problem: https://github.com/lukejagodzinski/lerna-freeze-reproduction. ",
    "tdeekens": "We downgraded to yarn version 1.3.1 which fixed the issue.. On the flip side on some machines it even worked with version 1.5.1. It's really hard to pin the issue down but playing a bit with the yarn version seems to have solved it.. Yes I've got the same. It hangs if you run lerna boostrap in a postinstall when using workspaces.. ",
    "OutThisLife": "Should probably note that here - https://github.com/lerna/lerna#--use-workspaces. ",
    "carrickjason": "This started happening on lerna run calls for me as soon as I switched from npm to yarn.  I don't have postinstall defined anywhere, i'm not using workspaces, and it doesn't write anything out to\nlerna-debug.log.\nIt gets hung here:\n. Thanks for the reply.  Does it not also run npm run calls in a child process? I was definitely getting output before I switched to yarn.. I added --stream and I see now that it's not getting stuck. This is slightly confusing behavior when running scripts that wait to be terminated.. Sounds good.  BTW, I must have been seeing output with npm because the script was originally using --parallel.  Thanks for your help!. @evocateur That makes sense. Maybe that progress bar needs some sort of timeout that drops a hint to use --stream if no 'progress' is being made after a while.  Documentation would help but it really feels like something is broken when that bar shows up and doesn't progress ever.. Apologies, A package.json file in one of my packages got destroyed.. ",
    "ramasilveyra": "I'm facing the same issue, on my end we use gitpkg to publish the packages from the monorepo. But I didn't create the issue because I though that was a very strange use case.\n@evocateur I saw your opinions about git deps on other issues, would you consider merging a pr fixing this issue? I started some time ago a fix for this (unfinished) If this could cause more problems enabled by default, at least we can try to enable the git deps semver resolving with a flag like --resolve-git-deps-semver?. Hey @jamiehill it seems that our use case got covered on https://github.com/lerna/lerna/pull/1033 \ud83c\udf89. This is awesome! Thanks @gustaff-weldon and @synaptiko!. ",
    "haraldrudell": "The educated guess is that:\n .eslintrc.yaml goes next to lerna.json\n babel-preset-node8 goes in the babel key of a package.json next to lerna.json\n webpack.config.*.js goes into every package that is an executable as part of npm run build\n  * rules has the babel-node as:\n    * test: /\\.js$/,\n    * exclude: /node_modules/,\n    * loader: require.resolve('babel-loader'),\n    * options: {babelrc: false, presets: \u2026\n lerna, babel-preset-node8 installed by the package.json next to lerna.json instead of globally\n* Lots of troubles I don't know about. The desired state is that leaf-package-modules has no configuration other than package.json. Therefore:\nThe things that are recursively searched for up the parent directory tree should go in the directory where lerna.json is.\n\n.eslintrc.yaml goes next to lerna.json\nThe package.json next to lerna.json has the babel configuration and all devDependencies like babel, eslint, jest, rollup, webpack, yarn and lerna\nrollup.config.js can be imported from a shared package-module or located using a file system reference to the lerna.json directory\n\nenv targets: node: current produces worse code than cherry-picking plugins from say babel-preset-node8. For certain targets, this is really important. Fewer babel plugins is less future troubles. Likewise, rollup produces much better and less code compared to Webpack if your target allows for its use.\nIf there are other fossil devDependencies, it\u2019s time to refactor.. ",
    "pravdomil": "this basic Babel setup works for me\nroot package.json\njson\n{\n  \"scripts\": {\n    \"prebuild\": \"lerna exec --parallel -- rimraf lib\",\n    \"build\": \"lerna exec --parallel -- babel src -d lib --config-file ../../.babelrc\",\n    \"watch\": \"lerna exec --parallel -- babel src -d lib --config-file ../../.babelrc -w\"\n  },\n  \"devDependencies\": {\n    \"@babel/cli\": \"^7.0.0-beta.40\",\n    \"@babel/core\": \"^7.0.0-beta.40\",\n    \"@babel/preset-es2015\": \"^7.0.0-beta.40\",\n    \"@babel/preset-stage-1\": \"^7.0.0-beta.40\",\n    \"lerna\": \"^2.9.0\",\n    \"rimraf\": \"^2.6.2\"\n  }\n}\n.babelrc\njson\n{\n  \"presets\": [\n    \"@babel/preset-es2015\",\n    \"@babel/preset-stage-1\"\n  ]\n}. @dmk255 that package.json is that one in your project root :). ",
    "dan-kez": "@pravdomil Do you have that package.json in each of your leaf packages? It seems excessive to have lerna in each repo. Can these be shared at the root level instead?. Thanks @pravdomil !\nI've created an example repo that encompasses some of the recommendations enumerated here. \nhttps://github.com/dmk255/lerna-webpack-example\nThis repo includes:\n1. Monorepo code splitting via lerna.\n1. Babel building across packages (with react).\n1. A package with a webpack config that has dependencies on packages in the monorepo.\n1. Code splitting and asynchronous loading.\nI've love to get some feedback and see if I'm using good patterns.  @evocateur I'm happy to submit a PR with the contents of this repo (or a documentation link) if you'd like.\n. Thanks for the comments @evocateur - I've made some updates to address them. I'm happy to apply any other recommendations you have. It might be easier to take those comments to the PR though https://github.com/dmk255/lerna-webpack-example/pull/1 .. @evocateur That makes sense! Thanks for the prompt reply!. Aliasing is definitely not a requirement for any repository. However, some developers have found them to be useful to prevent the ../../../../foo dance of directories.\ne.g. One can import Utils/api vs ../../../Utils/api. \nSome benefits:\n This can be more legible to some.\n This can help with refactors as you do not need to update your import statements when you move your files.\nSome cons:\n* Your imports are less explicit and you may need to reference your alias config to know where a file is actually being sourced.\nThat said, I was able to get this to work. I'm planning on update the example repository, or make another one with this configuration.\nIn summary for future readers:\n* Have a .babelrc file in your root dir.\n\nNote: .babelrc.js is not supported yet https://github.com/facebook/jest/issues/5324\n Install this plugin tleunen/babel-plugin-module-resolver\n Have an additional .babelrc in your package directory with an alias config based on the resolver module.\nAt this point your build step should work but eslint may yell at you depending on your config.\n\n\nInstall this plugin for eslint: tleunen/eslint-import-resolver-babel-module\nReplicate the alias config that you set up per their documentation in an .eslintrc.js at the package level.\nThis must be a JS file due to the next step.\nI recommend using lodash's mergeWith from their docs to merge the eslint.settings[\"import/resolver']\n\n\n\n\nDue to this PR (https://github.com/benmosher/eslint-plugin-import/pull/1016) not being merged we need to add another package.\n\n\nAdd Dreamscapes/eslint-import-resolver-lerna\nUpdate your root level .eslintrc.js file based on their documentation. This will allow your root level package.json to satisfy their requirements.\n\nThis dance was quite a pain for me especially with subtle bugs along the way. Note, that the above will generate a number of console.info statements that are benign (basically an issue with caching your package.json as far as I can tell). These will not cause eslint to fail - let it run all the way through. If you run the linter again they will not appear. \nMy hope is the PR above will be merged and there will no longer be a need for the Dreamscapes/eslint-import-resolver-lerna plugin.\n. I totally agree that is not necessary- especially in a monorepo. This is more to smooth the transition since the original repo used them.\nOur plan is to refactor this once our code is stable in this new structure. Just trying to do one thing at a time.\nEDIT: Removed the quote from the email. ",
    "MatejBransky": "Here is another example (it uses Parcel and Rollup):\nhttps://github.com/MatejMazur/starter-monorepo. @dptoot Hi, thanks for your response. Sorry I wasn't clear enough. :worried: I don't want to allow exec for all packages. I want it only for folder packages/. I have two folders: one for packages (packages/) and one for apps (examples/). But really thanks because I've updated my comment at least. \ud83d\udc4d . @evocateur I don't understand. I thought that Lerna keeps order automatically.\nThis is my folder structure:\nmonorepo\n\u251c\u2500\u2500 examples\n\u2502   \u251c\u2500\u2500 foo-playground\n\u2502   \u251c\u2500\u2500 bar-app\n\u2502   \u251c\u2500\u2500 another-example\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 packages\n    \u251c\u2500\u2500 sum\n    \u251c\u2500\u2500 components\n    \u251c\u2500\u2500 calc\n    \u2514\u2500\u2500 ...\nHow do you apply lerna exec only to packages?\nDo you mean this?\nlerna exec --scope sum components calc another-package-1 another-package-2 ...\n..That would be crazy if you would have tens of packages.. ",
    "possibilities": "\"Allow\" doesn't seem semantically sound... Shouldn't it be phased E.g.\n\"require\", \"demand\" or \"only\"?\nOn Sep 4, 2017 4:25 PM, \"Daniel Stockman\" notifications@github.com wrote:\n\nI am generally a favor of chaining such decisions in lifecycle scripts,\nbut as we have the tools already to check the branch name and whatnot, this\nsounds reasonable.\nConfiguring this in lerna.json makes the most sense, but a flag for lerna\npublish would be necessary in any case to be consistent with the other\nconfiguration options. --allow-branch seems like a good name, it would\nrequire a string argument if the flag is passed, and that argument would be\na glob (plain strings are globs too, e.g. --allow-branch master. It would\nimplicitly default to ** (every branch), much like the --scope flag.\nHere's how it would look in a lerna.json:\n{\n  \"lerna\": \"2.1.2\",\n  \"command\": {\n    \"publish\": {\n      \"allowBranch\": \"master\"\n    }\n  },\n  \"version\": \"1.2.3\"\n}\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/lerna/lerna/issues/1007#issuecomment-327024206, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAer-ZQQ2-D1nXxVNnatzX58MXfMZkZpks5sfFylgaJpZM4PMHcB\n.\n. *phrased\n\nOn Sep 4, 2017 5:01 PM, \"Mike Bannister\" notimpossiblemike@gmail.com\nwrote:\n\n\"Allow\" doesn't seem semantically sound... Shouldn't it be phased E.g.\n\"require\", \"demand\" or \"only\"?\nOn Sep 4, 2017 4:25 PM, \"Daniel Stockman\" notifications@github.com\nwrote:\n\nI am generally a favor of chaining such decisions in lifecycle scripts,\nbut as we have the tools already to check the branch name and whatnot, this\nsounds reasonable.\nConfiguring this in lerna.json makes the most sense, but a flag for lerna\npublish would be necessary in any case to be consistent with the other\nconfiguration options. --allow-branch seems like a good name, it would\nrequire a string argument if the flag is passed, and that argument would be\na glob (plain strings are globs too, e.g. --allow-branch master. It\nwould implicitly default to ** (every branch), much like the --scope\nflag.\nHere's how it would look in a lerna.json:\n{\n  \"lerna\": \"2.1.2\",\n  \"command\": {\n    \"publish\": {\n      \"allowBranch\": \"master\"\n    }\n  },\n  \"version\": \"1.2.3\"\n}\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/lerna/lerna/issues/1007#issuecomment-327024206, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAer-ZQQ2-D1nXxVNnatzX58MXfMZkZpks5sfFylgaJpZM4PMHcB\n.\n\n\n. Ah OK, that does make some sense. I personally don't have a use case for a glob but yeah, I see where you're coming from.. Ah, OK, I think what's awkward about it is that branch is singular so it doesn't evoke something that's globbable to me. Perhaps go plural and then maybe you don't even need a verb to qualify it \"branches\"?. How bout --allow-branches ?. Cool, thanks, I'll give it a shot.... One thing I'm unsure of now is if it should fail or prompt when the current branch isn't allowed. Which would be least surprising?. \n",
    "Ognian": "Thanks for your answer. I start to understand. What I'm actually trying to achieve is to have the git version (tag and hash and dirty or not) of every module displayed into my app. Therefore it is crucial that some steps like tagging, committing and build (prepublish) are done in the right order and as flawless to human error as possible.\nactually lerna is doing this quite good...\n\n\nregarding the root directory: now knowing this I can live with it the way it is.\n\n\nregarding unstaged changes: you are of course right If I do not stage and lerna publish commits then they will be not included. BUT actually I need to be warned that there are unstaged changes before committing. This is because before committing I either stage the changed files or remove them (or stash them, so that if there are unstaged files when trying to lerna publish there must be some human error. So maybe lerna publish could check for unstaged files and offer me to continue or not? Is this possible?\n\n\nregarding prepublish scripts: I'm intentionally NOT using --skip-npm since even for private packages I want npm publish to be run. npm publish would trigger the prepublish script and only if not private really publish. And my prepublish script actually runs the build, where the git tag, hash and dirty or not is embedded into the app... BUT actually I do not see a reason why npm prepublish scripts are not run since npm publish should be called for private repos too ... Have to try to debug this...\n  . Below the log of lerna publish\nI don't see that npm publish is actually executed.\nAny idea why? Locking thru the code it should be...\nOr could it be that the npm output is not logged?\nThanks\nOgnian\n\n\n```\n$ lerna publish --message=\"- updated connect options to match new driver\" --loglevel=99\nlerna sill input [ 'publish' ]\nlerna sill flags { _: [ 'publish' ],\nlerna sill flags   message: '- updated connect options to match new driver',\nlerna sill flags   m: '- updated connect options to match new driver',\nlerna sill flags   loglevel: '99' }\nlerna verb rootPath /storage/safe/ogi-it/Projekte/IMS/IMS_v2\nlerna info version 2.1.2\nlerna sill isInitialized \nlerna sill isInitialized true\nlerna sill existsSync /storage/safe/ogi-it/Projekte/IMS/IMS_v2/VERSION\nlerna sill initialize attempt\nlerna info current version 1.7.9\nlerna sill getUpdates \nlerna info Checking for updated packages...\nlerna sill hasTags \nlerna verb hasTags true\nlerna sill getLastTag \nlerna verb getLastTag v1.7.9\nlerna info Comparing with v1.7.9.\nlerna sill diffSinceIn v1.7.9 /storage/safe/ogi-it/Projekte/IMS/IMS_v2/packages/IMS-limsart\nlerna sill diff \nlerna sill diffSinceIn v1.7.9 /storage/safe/ogi-it/Projekte/IMS/IMS_v2/packages/IMS\nlerna sill diff packages/IMS/src/crud.js\nlerna sill diffSinceIn v1.7.9 /storage/safe/ogi-it/Projekte/IMS/IMS_v2/packages/LIMS_test\nlerna sill diff \nlerna verb updated OGI-IT_IMS\nlerna sill collectDependents \nlerna sill isPackageDependentOf OGI-IT_IMS-limsart OGI-IT_IMS\nlerna sill isPackageDependentOf OGI-IT_IMS OGI-IT_IMS\nlerna sill isPackageDependentOf OGI-IT_IMS-limsart OGI-IT_IMS\nlerna sill isPackageDependentOf LIMS_test OGI-IT_IMS\nlerna verb dependent LIMS_test depends on OGI-IT_IMS\nlerna sill collectUpdates \nlerna verb has filtered update OGI-IT_IMS\nlerna verb has filtered update LIMS_test\n? Select a new version (currently 1.7.9) Patch (1.7.10)\nChanges:\n - OGI-IT_IMS: 1.7.9 => 1.7.10 (private)\n - LIMS_test: 1.7.9 => 1.7.10 (private)\n? Are you sure you want to publish the above changes? Yes\nlerna sill initialize success\nlerna sill execute attempt\nlerna sill isDetachedHead \nlerna sill getCurrentBranch \nlerna verb getCurrentBranch master\nlerna verb isDetachedHead false\nlerna sill addFile /storage/safe/ogi-it/Projekte/IMS/IMS_v2/lerna.json\nlerna sill addFile /storage/safe/ogi-it/Projekte/IMS/IMS_v2/packages/IMS/package.json\nlerna sill addFile /storage/safe/ogi-it/Projekte/IMS/IMS_v2/packages/LIMS_test/package.json\nlerna sill commit - updated connect options to match new driver\nlerna verb commit [ 'commit',\nlerna verb commit   '-m',\nlerna verb commit   '- updated connect options to match new driver' ]\nlerna sill addTag v1.7.10\nlerna info publish Publishing packages to npm...\nlerna sill existsSync /storage/safe/ogi-it/Projekte/IMS/IMS_v2/packages/IMS/scripts/prepublish.js\nlerna verb execScript No prepublish script found at /storage/safe/ogi-it/Projekte/IMS/IMS_v2/packages/IMS/scripts/prepublish.js\nlerna sill existsSync /storage/safe/ogi-it/Projekte/IMS/IMS_v2/packages/LIMS_test/scripts/prepublish.js\nlerna verb execScript No prepublish script found at /storage/safe/ogi-it/Projekte/IMS/IMS_v2/packages/LIMS_test/scripts/prepublish.js\nlerna info git Pushing tags...\nlerna sill pushWithTags [ 'origin', [ 'v1.7.10' ] ]\nlerna sill getCurrentBranch \nlerna verb getCurrentBranch master\nSuccessfully published:\nlerna success publish finished\nlerna sill execute success\n. @evocateur thanks for your answer. I changed my prepublish script:\n-    \"prepublish\": \"npm run build\",\n+    \"prepublish\": \"date | tee -a prepublish_log.txt && npm run build 2>&1 | tee -a prepublish_log.txt\",\nand tested that the prepublish_log.txt is created by runningnpm publishBUT when runninglerna publish --message=\"- updated scripts\" --loglevel=99it is definitely NOT run...\nAny idea what that could be? . @evocateur  OK I found it [here](https://github.com/lerna/lerna/blob/0e6a56232aa56ce9473223b8ed5cd4e0d737e022/src/commands/PublishCommand.js#L163) you are filtering the private packages wich should not be done.... OK I stiered up a honets nest :-)\nAfter removing the private filter (removing the mentioned line) npm publish is indeed called, but if private=true npm publish is returning an error, therefore lerna is retrying the command and so on and so on...\nActualy what should be documented is that for private packages npm publish is never ever called for npm reasons and if someone wants this he should call the lifecycle methods likelerna run prepublishafterlerna publish```. ",
    "chrisforrette": "I also have a need for this. My use case is that I'm using Lerna (2.1.0) to manage a bunch of simple packages for AWS Lambda functions and when I publish them I need to have the top-level dependencies included in the lower-level node_modules/ before deploying to AWS. From looking through docs, I expected the --nohoist to do something like this but it doesn't seem to.. @evocateur I started down that route as a work-around, but now that I think of it it makes a lot of sense that Lerna would require each dependency listed in each package's package.json for publishing\u2014I just didn't need it for my use case. Thank you \ud83d\ude42. ",
    "IhostVlad": "Closed due cover by more fresh and verbose issue - https://github.com/lerna/lerna/issues/1147. ",
    "benediktvaldez": "Can also be seen on travis\nhttps://travis-ci.org/svef/www/builds/274834287. Yeah travis is using an old version, but locally I was using 1.0.1. Wow, silly me \ud83d\ude4a \ud83d\ude48 Thanks alot @evocateur for your time!. ",
    "alejandronanez": "I'm having the same issue. (I'm new to Lerna though)\nTo replicate just go to https://github.com/alejandronanez/learning-lerna and run yarn install. ",
    "gillesdemey": "I'm having the same issue using the following version matrix:\nExecutable | Version\n-- | --\nlerna --version | 2.1.2\nnpm --version | 5.3.0\nyarn --version | 1.0.2\nnode --version | 8.5.0\nAny ideas on where to start looking? :)\n. ",
    "nhducit": "I can bootstrap project successful without useWorkspaces: true.\n| Executable | Version |\n| --- | --- |\n| lerna --version | 2.2.0 |\n| npm --version  | 5.3.0 |\n| yarn --version | 1.1.0 |\n| node --version | 8.5.0 |\n| OS | Version |\n| --- | --- |\n| macOS | 10.12.6 |\nlerna.json\n{\n  \"lerna\": \"2.2.0\",\n  \"packages\": [\n    \"packages/*\"\n  ],\n  \"version\": \"0.0.0\",\n  \"npmClient\": \"yarn\",\n  \"useWorkspaces\": true <====\n}\nerror\nlerna info version 2.2.0\nlerna ERR! EPACKAGES TypeError: Cannot read property 'some' of undefined\nlerna ERR! EPACKAGES     at Function.getPackages (/Users/duc/.config/yarn/global/node_modules/lerna/lib/PackageUtilities.js:102:42)\nlerna ERR! EPACKAGES     at Repository.buildPackageGraph (/Users/duc/.config/yarn/global/node_modules/lerna/lib/Repository.js:86:51)\nlerna ERR! EPACKAGES     at BootstrapCommand.runPreparations (/Users/duc/.config/yarn/global/node_modules/lerna/lib/Command.js:281:25)\nlerna ERR! EPACKAGES     at /Users/duc/.config/yarn/global/node_modules/lerna/lib/Command.js:208:18\nlerna ERR! EPACKAGES     at Promise (<anonymous>)\nlerna ERR! EPACKAGES     at BootstrapCommand.run (/Users/duc/.config/yarn/global/node_modules/lerna/lib/Command.js:196:14)\nlerna ERR! EPACKAGES     at Object.handler (/Users/duc/.config/yarn/global/node_modules/lerna/lib/commands/BootstrapCommand.js:59:83)\nlerna ERR! EPACKAGES     at Object.self.runCommand (/Users/duc/.config/yarn/global/node_modules/yargs/lib/command.js:233:22)\nlerna ERR! EPACKAGES     at Object.Yargs.self._parseArgs (/Users/duc/.config/yarn/global/node_modules/yargs/yargs.js:990:30)\nlerna ERR! EPACKAGES     at Object.Yargs.self.parse (/Users/duc/.config/yarn/global/node_modules/yargs/yargs.js:532:23)\nlerna ERR! EPACKAGES  Errored while collecting packages and package graph { TypeError: Cannot read property 'some' of undefined\nlerna ERR! EPACKAGES     at Function.getPackages (/Users/duc/.config/yarn/global/node_modules/lerna/lib/PackageUtilities.js:102:42)\nlerna ERR! EPACKAGES     at Repository.buildPackageGraph (/Users/duc/.config/yarn/global/node_modules/lerna/lib/Repository.js:86:51)\nlerna ERR! EPACKAGES     at BootstrapCommand.runPreparations (/Users/duc/.config/yarn/global/node_modules/lerna/lib/Command.js:281:25)\nlerna ERR! EPACKAGES     at /Users/duc/.config/yarn/global/node_modules/lerna/lib/Command.js:208:18\nlerna ERR! EPACKAGES     at Promise (<anonymous>)\nlerna ERR! EPACKAGES     at BootstrapCommand.run (/Users/duc/.config/yarn/global/node_modules/lerna/lib/Command.js:196:14)\nlerna ERR! EPACKAGES     at Object.handler (/Users/duc/.config/yarn/global/node_modules/lerna/lib/commands/BootstrapCommand.js:59:83)\nlerna ERR! EPACKAGES     at Object.self.runCommand (/Users/duc/.config/yarn/global/node_modules/yargs/lib/command.js:233:22)\nlerna ERR! EPACKAGES     at Object.Yargs.self._parseArgs (/Users/duc/.config/yarn/global/node_modules/yargs/yargs.js:990:30)\nlerna ERR! EPACKAGES     at Object.Yargs.self.parse (/Users/duc/.config/yarn/global/node_modules/yargs/yargs.js:532:23)\nlerna ERR! EPACKAGES   stack: 'TypeError: Cannot read property \\'some\\' of undefined\\n    at Function.getPackages (/Users/duc/.config/yarn/global/node_modules/lerna/lib/PackageUtilities.js:102:42)\\n    at Repository.buildPackageGraph (/Users/duc/.config/yarn/global/node_modules/lerna/lib/Repository.js:86:51)\\n    at BootstrapCommand.runPreparations (/Users/duc/.config/yarn/global/node_modules/lerna/lib/Command.js:281:25)\\n    at /Users/duc/.config/yarn/global/node_modules/lerna/lib/Command.js:208:18\\n    at Promise (<anonymous>)\\n    at BootstrapCommand.run (/Users/duc/.config/yarn/global/node_modules/lerna/lib/Command.js:196:14)\\n    at Object.handler (/Users/duc/.config/yarn/global/node_modules/lerna/lib/commands/BootstrapCommand.js:59:83)\\n    at Object.self.runCommand (/Users/duc/.config/yarn/global/node_modules/yargs/lib/command.js:233:22)\\n    at Object.Yargs.self._parseArgs (/Users/duc/.config/yarn/global/node_modules/yargs/yargs.js:990:30)\\n    at Object.Yargs.self.parse (/Users/duc/.config/yarn/global/node_modules/yargs/yargs.js:532:23)' }\nlerna-debug.log\n.  Change this line \"useWorkspaces\": true ==>false,\nI have a similar issue, after turn off useWorkspaces options, it works.\nhttps://github.com/lerna/lerna/issues/1014\n. Change this line \"useWorkspaces\": true ==>false,\nI have a similar issue, after turn off useWorkspaces options, it works.\n1014. In a specific package.\nFor example: I want to add web folder under packages I use yarn workspaces with lerna\n\ncreate web folder under packages\nrun cd web <===\nrun npm init -y\nrun yarn add react\n\n\n. @RinatMullayanov Please read this link for more detail information. \nhttps://yarnpkg.com/blog/2017/08/02/introducing-workspaces/\n```\nLerna is a tool that optimizes the workflow around managing multi-package repositories with git and npm. Internally it uses Yarn or the npm CLI to bootstrap (i.e. install all third party dependencies for each package) a project. In a nutshell, Lerna calls yarn/npm install for each package inside the project and then creates symlinks between the packages that refer each other.\nBeing a wrapper of a package manager, Lerna can\u2019t manipulate the contents of node_modules efficiently:\nLerna calls yarn install multiple times for each package which creates overhead because each package.json is considered independent and they can\u2019t share dependencies with each other. This causes a lot of duplication for each node_modules folder which quite often use the same third-party packages.\nLerna manually creates links between packages that refer each other after installation has finished. This introduces inconsistency inside node_modules that a package manager may not be aware of, so running yarn install from within a package may break the meta structure that Lerna manages.\nIssues such as these convinced us, as package manager developers, that we should support multi-package repositories directly in Yarn. Starting with Yarn 0.28, we\u2019re excited to share that we support such repositories under the Workspaces feature.\n```. ",
    "ZauberNerd": "I dug into this and there are a couple of complications:\n\nThe main problem is that conventional-changelog-core needs to know the version that is being / has been published.\nIt does so by reading the package.json file in the current working directory (and if not found, searching upwards for a package.json file - see conventional-changelog-core/merge-config and conventional-changelog-cli/cli).\nThe conventional-changelog-cli can be configured to the location of the package.json with the --pkg options (which is done by lerna).\n\nRight now I can see two ways to make this work:\n1. Let lerna update the version field in the root package.json file if it is configured to run in fixed-mode.\n2. Overwrite the version through a context that can be passed to the conventional-changelog-cli as --context\nIf choosing option 2 there are two ways to make this work:\n 2.a. use conventional-changelog-core directly instead of conventional-changelog-cli - That means that we would have to implement parts of the code from this file (conventional-changelog-cli/cli.js).\n 2.b. Add a default conventional-changelog context file to lerna with content similar to: module.exports = { version: repository.version };\nThe actual changes in lerna are quite simple:\n in src/commands/PublishCommand.js move the ConventionalCommitUtilities.updateFixedChangelog() invocation out of the the forEach loop.\n In src/ConventionalCommitUtilities.js change the arguments for the changelog cli in updateFixedChangelog to remove --pkg, --commit-path and add --context.\nI think 2-2.b. (overwrite version through custom context inside lerna) would be the best way to go, because option 1 would change the behaviour of lerna quite a lot and option 2.a. would duplicate some code from the conventional-changelog-cli - but would in my opinion also be a viable alternative.\nI could create a PR for any of these changes, but would like some feedback on the proposed solution / other options first.\nWhat are your thoughts on this @rsouthgate & @evocateur ?. Another question: When in fixed mode - do we want to have just one single changelog.md in the root or do we want to have a changelog.md for each package and a root changelog.md?. @rsouthgate I created this PR: #1078 and I decided to keep the behaviour the same as before and generate one changelog per package and one consolidated changelog in the root.\nI didn't want to complicate the surface of lerna by introducing more options to configure and in your case you could simply put the package changelogs in your .gitignore file.. ",
    "jiverson": "What does it consider then to be a valid indicator of \"sibling\"-ness then, I am confused? Because according to the docs it should link them.\nEdited: Ok it is based off semver thanks. Yeah it would be nice not to have to rely on that since some of us use either file: ../ or even git.\nhttps://github.com/lerna/lerna/blob/a0945a5ada364530fd426596f7b827f63a86cea7/src/Package.js#L118. I am working on a PR that implements a flag ignore-semver I am not sure that would be a feature contributors would be interested in. \nThe specific case I am working on is, locally we have a monster symlink shell script, that links all our  packages for dev work. But in prod we want dependancies linked via github or npm. All our package.json files are set up for prod obviously. \nI started investigating moving to a mono repo setup, but this would take some time because our repos have thousands of commits and I am running across issues with bootstrap. I was able to get around that through using git subtree.\nNow I am not completely sold I am not going down a rabbit hole, but it is a \"lerna\"ing experience either way. . Yeah I was going to look into that as well just didn't have time atm.. Force local makes more sense appreciate the feed back.. ",
    "christophehurpeau": "You need to add in your package.json:\n\"workspaces\": [\n    \"packages/*\"\n  ],\nand you can remove in lerna.json:\n\"packages\": [\n    \"packages/*\"\n  ]\n. With lerna 3, when preversion fails lerna still publishes: \npreversion is called here: https://github.com/lerna/lerna/blob/bd948ccd115f608719184fc26260cb9bf338a001/commands/version/index.js#L381\nerror is catched here : https://github.com/lerna/lerna/blob/bd948ccd115f608719184fc26260cb9bf338a001/utils/run-lifecycle/run-lifecycle.js#L46\nmaybe it should rethrow the error after log it ?. ",
    "ianstormtaylor": "Also, I forgot there's another unexpected thing...\nBecause of the unexpected bump of the peer dependencies, when you make a small change to the \"core\" package that is peer-depended on, Lerna will think that any packages that have a peer dependency on it have also been \"changed\", so when you go to publish you'll be publishing changes for every package, instead of just the one you actually changed.\nCan any maintainers comment on this? \nAs far as I can tell, using independent versioning with peerDependencies is impossible without a broken UX for semver.... Thanks for the input @evocateur! I'd definitely love the \"abandon\" approach for a quick solution. \nAnd then later we could get smarter with trying to keep them in sync with the new maximum dev dep. This seems like it's going to be somewhat rare anyways, and easy to fix in a quick patch when you forget, so it's not a big issue like the current setup.. Yeah I guess that's true, I should have expanded.\nI'm actually of the opinion that peerDependencies shouldn't be touched at all though, because unless I'm missing something, Lerna will only ever be able to guess at what they should be changed to. If you have many independent packages and you major bump one of the core ones, there's a very good chance that you need to do two different things to peer dependencies:\n\nCompletely bump them for packages that depend on the new changes.\nLeave them loose, but include the new major for ones that don't.\n\nIt feels like Lerna trying to do anything magical here is just going to complicate the issue. I'd rather just have full control over what is pegged.\nAlthough, regardless it sounds like we're agreed that doing nothing would be a great first step.. That makes sense, but my point is that Lerna can't actually know whether a package wants to extend itself to include the new peer dep and retain backwards compat, or whether it wants to start fresh with only the latest version included.\nI think trying to do anything magic here is going to end up being wrong more often than it's worth, especially when you consider it across multiple packages.\nAn in-terminal UI prompt would be great though! It could even just ask you if you want to \"extend\" or \"reset\" the peer dep range, potentially without having to ask you to remember the exact ranges to set. \nThat said, I think we should hold off on that and first just get Lerna to stop touching peer deps.. @Dru89 I'm not familiar with the Lerna codebase, so I'm not sure what's involved on that front, but I think we're in agreement that the first step is to remove peerDependencies logic. And if someone wants to separately take on some sort of UI that can be done afterwards. Thank you!. @Dru89 I'm not familiar with the Lerna codebase, so I'm not sure what's involved on that front, but I think we're in agreement that the first step is to remove peerDependencies logic. And if someone wants to separately take on some sort of UI that can be done afterwards. Thank you!. @StevenLiekens you need to do that change by hand, it's not something that Lerna can infer for you since it could just have easily been allowed to stay the same.\nIf you're like me though, the previous bumping logic was causing the bump every time you made any change to the dev dependency at all, which was causing what was a essentially an undocumented breaking change to your bar package each time foo was published.. @ljharb true, totally agree! As long as the default is to not do any magic that might contain breaking changes in it I'm good with whatever.. +1 to what @ljharb said. \nIt is very common actually for modules to need to major bump, but for packages that depend on them to be unaffected by whatever piece happened to have a breaking chnage. (This is true for lots of libraries and utilities. Even React is a good example where 14 -> 15 and 15 -> 16 might not contain breaking changes for many libraries.). @StevenLiekens the old behavior was introducing breaking changes to packages (via their peerDependencies) with any publish at the patch, minor, or major level. So it was very wrong, forcing users to continually bump their versions to eliminate the mismatches.\nAs for how Lerna manages minor/major when things are workflow only and not code-level breakages, I'm not sure.. Having a warning if the dev dependency isn't satisfied by the peer dependency sounds like the right way to go to me. However, don't you already have these warnings when you run yarn install or npm install? I'd think they already are there.. @StevenLiekens why are you not declaring the peer dependency as >=1.0.0 instead of ^1.0.0? Sounds like that would solve all your problems. That's actually how all peer dependencies should be written, until a newer version comes along that is actually backwards incompatible.. @StevenLiekens yeah, which is often a feature and not a bug. People don't often peg node versions with ^ in engines (or at least they shouldn't) because if everyone did that then we'd need to publish a new version of every npm package every time a new version of node landed.\nThe same goes for the React ecosystem. Tons of people are wasting effort and time because they pegged their react peer dependency to ^0.14.0 when their components were not impacted at all by the move to 15.0.0, and same again with 16.0.0. And then each time a new React version comes out everyone freaks out and thousands of pull requests have to be merged and packages re-published.\nThe reality is that when breaking changes necessitate major version bumps, often it's just a single part of the API that has changed, and for any given module the chance is low that it breaks with it. This is probably even more true for internal packages managed with Lerna (or at least from what I've found).\nAnd when you have a package that does actually have that break, you can just restrict the peer dependency range in a patch fix and publish the new restriction so warnings are given.\n\nI'm not arguing against adding a warning to help if you really don't want to use >= for some reason. Although I don't personally need it and it sounds like others don't either, so you'll probably need to write your own pull request if you want to see it landed. Ideally it would be handled automatically with the existing yarn/npm warnings I'd think though.. @StevenLiekens it's pragmatic, yup. \nArguing for always going with the purest, \"correct\" pegging of peer dependencies is naive I think because it doesn't take into account maintenance burden. It all depends on the stability of the APIs you're building for, and the rate at which new versions as released. If the APIs are stable and development of new versions is continuous, you're going to want to use >=. If not, and APIs are unstable, ^ is better.\nYou can see this in the node community, where almost all of the top packages use  >= pegging for the engines field. (browserify, express, grunt, gulp, lodash, request, chalk, forever, etc.)\nWhereas in the React ecosystem things are less standardized. More popular packages seem to use ^ (react-select, react-motion, react-intl, react-apollo, etc.), but there are still popular packages that use >= as well (react-router, react-helmet, etc.) \nWhile new node versions require almost no extra work for people to republish packages, new React versions cause huge frenzies while every single one of the packages using ^ has to be re-published (across all of its active major versions) for the new React. I think it's a huge waste of time considering how stable React's APIs are, but it's their call.\n\nEither way, you have to decide for yourself how stable your own monorepo's APIs are. \nThis issue is solved for me since peerDependencies are no longer being auto-incremented and causing breakages. Feel free to open another for your concerns to be addressed.\n. ",
    "Dru89": "\nThat said, I think we should hold off on that and first just get Lerna to stop touching peer deps.\n\nSorry for being dense, but I see that we have the \"help wanted\" label applied here.  Would this literally just be removing this line? https://github.com/lerna/lerna/blob/da3e30f644113f1080fb645bb28a066c3f4cb761/src/commands/PublishCommand.js#L582\nOr would we prefer to move forward with a UI prompt to update peer dependencies?  I'm in full agreement that we shouldn't use any magic or special circumstances to try to decide for the user what to do on the peerDependencies fields.. > That said, I think we should hold off on that and first just get Lerna to stop touching peer deps.\nSorry for being dense, but I see that we have the \"help wanted\" label applied here.  Would this literally just be removing this line? https://github.com/lerna/lerna/blob/da3e30f644113f1080fb645bb28a066c3f4cb761/src/commands/PublishCommand.js#L582\nOr would we prefer to move forward with a UI prompt to update peer dependencies?  I'm in full agreement that we shouldn't use any magic or special circumstances to try to decide for the user what to do on the peerDependencies fields.. Oh, cool.  I'm okay closing this as a duplicate and just following #1018, then.  Sorry, I tried to search for this but had a harder time finding it.. ",
    "StevenLiekens": "@evocateur so what is the intended workflow at this point for updating the version range of local peerDependencies when they receive a major version bump?\nMy project depends on the old behavior where Lerna automatically increases the lower bound of the version range of local peerDependencies whenever their version is incremented. It would be nice if this behavior could be made available again with an optional command-line switch.. Given the original example:\njson\n// bar/package.json\n{\n  \"peerDependencies\": {\n    \"foo\": \">=0.2.0\"\n  },\n  \"devDependencies\": {\n    \"foo\": \"^0.2.1\"\n  }\n}\nIf you'd commit a breaking change to foo and publish with lerna 2.7+ the bar package gets published with an updated devDependency version but with the same old peerDependency version.\njson\n// bar/package.json\n{\n  \"peerDependencies\": {\n    \"foo\": \">=0.2.0\"\n  },\n  \"devDependencies\": {\n    \"foo\": \"^1.0.0\"\n  }\n}\nNow assume that the update from foo@0.2.1 to foo@1.0.0 is so disruptive that you had to rewrite the entire bar package. Under that assumption, the version range for foo@>=0.2.0 is wrong because any foo older than 1.0.0 most likely won't work...\nSo given the original requirement:\n\nPeer dependencies should remain as loose as possible, with the absolute earliest accepted version that works\n\nSimply removing tracking of peerDependencies does not satisfy the last part of the requirement.. >... which was causing what was a essentially an undocumented breaking\nI was under the impression that Lerna was smart enough to bump the major version of all dependants when you make a breaking change to a package.\nbefore publish:\n- foo@0.2.1\n- bar@1.0.0 depends on foo@0.2.1\nafter publish:\n - foo@1.0.0\n - bar@2.0.0 depends on foo@1.0.0\n(when using --independent). > presuming that bar had been updated to be compatible with both versions of foo\nMaybe I'm just a bad programmer but when I break things, I break them good and hard. Publishing a minor update that supports both versions is not always possible.\n\nbar@1.1.0 would depend on foo @ ^0.2.1 || ^1.0.0\n\nOkay that makes good sense when you somehow manage to support both versions of foo but why not let Lerna handle this for you? Manually editing dependencies sucks and isn't that the problem Lerna is meant to solve?. So anyway can the old behavior be made available again with a feature toggle? Our project depends on the old behavior.\nYou can argue that the old behavior is not smart, but it's not completely wrong. And it was automatically managed by the tools which leaves almost no room for human error. I'd rather have version ranges that are not \"as loose as possible\" than version ranges that are wrong because someone forgot to update the ranges manually or updated them incorrectly.. By the way do you see the irony in publishing this new behavior as a minor update to 2.x.x? I'm surprised that nobody else is complaining.. > the old behavior was introducing breaking changes to packages (via their peerDependencies) with any publish at the patch, minor, or major level.\nFair point for updates at the patch or the minor level. It makes sense that non-breaking changes should work everywhere without additional changes. I agree that Lerna should not touch the version range if it already covers the new version.\nThe part that I have a real problem with is when the version range doesn't already cover the new version.\nWhen foo@1.0.0 is published then the ^0.2.1 version range doesn't cover it and that now requires manual intervention to fix. This is worse than having automatically updated version ranges that are too strict.\nSo how about changing Lerna to not touch peerDependencies unless existing version ranges don't cover the updates?. tldr\n\nThe part that I have a real problem with is when the [peerDependencies] version range doesn't already cover the new version.\nSo how about changing Lerna to not touch peerDependencies unless existing version ranges don't cover the updates?\n\n@ianstormtaylor @ljharb . I can agree with that. Let's make it happen then?. Bump because I still think you need to keep peer dependencies in sync with dev dependencies somehow. Either by automatically modifying the peer dependency range if there's a conflict with the dev dependency, or by refusing to publish with a conflicting dev dependency.\nWe've been having issues ever since this patch where we have a dev+peerdependency on foo@^1.0.0 and lerna automatically changes the devdependency to foo@2.0.0 . This sucks because we don't even notice right away when it happens. (because we're doing conventional commits + continuous delivery)\nIf the goal was to reduce warning noise and increase interop, this is not it.. We don't get the warnings while developing packages (because yarn/npm install ignores peerdependencies).\nWe do get warnings when installing the released packages into other projects.\nAfter updating\nfoo 1.0.0 -> 2.0.0\nbar 1.0.0 -> 1.0.1\n\nwarning \"bar@1.0.1\" has unmet peer dependency \"foo@^1.0.0\"\n\nBut in reality bar is compatible with foo@2.0.0 and sometimes even requires it when we decide to break backwards compatibility.\nfoo 1.0.0 -> 2.0.0\nbar 1.0.0 -> 2.0.0\n\nwarning \"bar@2.0.0\" has unmet peer dependency \"foo@^1.0.0\"\n\nI hope that makes sense.. Yes!! Except our release pipeline is completely automatic and noninteractive so actually I'd prefer if the publish command would scan for conflicts and crash if it finds any.. That would allow consumers to update the depended-on-package without also updating the dependent package and it wouldn't ever trigger warnings.. Okay so you prefer convenience over correctness. \nI have one big problem with >= and it's that npm (and yarn?) defaults to installing the highest version in a range on new installs.\nIf you publish a package today that depends on react >= 16.0.0 then someone who installs it 5 years from now will get whatever react will be the latest version in 2023 and there is just no way you can guarantee today that that will still work. But your package says it should work and that's a real problem because now even tools won't warn you that it may break.\nNow imagine all the wasted time and effort if tools stop warning about version mismatches and everyone has to figure out for themselves if the packages they depend on are actually compatible or not.\nI think correctness is still the right answer although I agree it means doing a lot of unnecessary work.\n/edit to say that this doesn't really apply to peerdependencies except the part about there not being a warning when there PROBABLY should be. With >= you just reduce the maintenance burden, not eliminate it. You still have to implement fixes and update the version range when things do break.\nAnd when things break, they break hard. You can release a patch version that fixes compatibility but your older packages will be forever broken.\nOh and tools won't warn about it so you have to tell your users not to use anything older than x.y.z. Also have fun explaining to your users that they're using the wrong version when bug reports start coming in.. Here's another thing that's been really bothering me and it applies to every kind of version range.\nConsider this:\n// bar/package.json\n{\n  \"peerDependencies\": {\n    \"foo\": \">=0.2.0\"\n  },\n  \"devDependencies\": {\n    \"foo\": \"0.7.8\"\n  }\n}\nAssume that foo@0.7.8 contains 5 features and 8+ fixes that are not available in foo@0.2.0.\nHow do you guarantee that your own code does not depend on any of these features and fixes?\nPersonally I think you can't unless you take a hard dependency on the minimum package version that you want to support.\n// bar/package.json\n{\n  \"peerDependencies\": {\n    \"foo\": \"^0.2.0\" // ranges allowed: ~ or ^ for correctness or >= for the lazy \n  },\n  \"devDependencies\": {\n    \"foo\": \"0.2.0\" // no ranges allowed, no updates allowed without updating peerDependency range\n  }\n}\nI think this is the only way to depend on your own packages in a way that ensures you actually support the versions in the peerdependencies range.\n- assuming you do some amount of integration testing between bar and foo@0.2.0\n- assuming you follow semver correctly (no breaking changes between foo 0.2.0 and 0.7.8). I'd argue that introducing a bug is a breaking change so it breaks my second assumption. Addings bugs should always be semver-major. \ud83d\ude04. > even that won\u2019t protect you against bugs in later versions in the range\nI think that's acceptable exactly because it happens unintentionally and can be fixed with a patch-release of the depended-on package without changing the dependent package.. I can't update the npm version on VSTS hosted agents as far as I'm aware.. > The paths in the error message are missing a delimiter before the @ sign, so this is definitely an npm bug.\nSorry, that was a formatting mistake, because markdown treats \\@ as an escaped @ character. I surrounded the message with backticks so it doesn't do that anymore.\n\nhave you tried --hoist?\n\nThanks for the idea, I'll consider it.. ",
    "WartClaes": "@ljharb I don't think the smart outcome would be that the version range will be updated to both versions. The case where a breaking change is still backwards compatible feels like the exception, not the rule.\nDetermining the peerdependecies is something Lerna could never guess, but if it has to I would rather see it updating the range so it only covers the latest major version ^1.0.0?\nThe problem with the current workflow is the following:\n\nbar@0.1.0 depends on foo@0.1.0\nbreaking change in foo happens -> foo@1.0.0\nbar updates dependency foo@1.0.0 and updates itself -> bar@0.1.1\n\nAssuming the following happens on a CI release, the peerdependency of bar@0.1.1 to foo would still be ^0.1.0. To fix this I need to release another version of bar to include the new version of foo -> bar@1.0.0. \nThe result is that I have a \"bad\" version of bar@0.1.1 because of the wrong peerdependecies range.\nThere is only one solution and that is that before running the CI build I need to incorporate the peerdependency update in bar even though that version does not yet exist.. ",
    "nolazybits": "Hello all,\nI'm comming here as I started testing publishing and got surprised to see the peerDependencies not updating when publishing with those flags\nlerna publish --no-verify-access --no-verify-registry --conventional-commits --exact --registry http://host.docker.internal:4873 prerelease\nI would expect Lerna to check the peerDependencies and if one is managed by the monorepo to modify the version following the existence or not of the --exact flag (so hard version or not)\nAny idea how to do so atm?\nI am using conventional-commit so version is generated automatically by Lerna. How can I specify the peedDependency in advance to match my package version?. I have the same problem\nlerna.json\njson\n{\n  \"packages\": [\n    \"packages/*\"\n  ],\n  \"version\": \"0.4.5\",\n  \"npmClient\": \"yarn\",\n  \"useWorkspaces\": true,\n  \"command\": {\n    \"init\": {\n      \"exact\": true\n    },\n    \"publish\": {\n      \"allowBranch\": [\n        \"master\"\n      ],\n      \"conventional-commits\": true,\n      \"message\": \"chore(release): publish %v\",\n      \"npmClient\": \"yarn\"\n    }\n  }\n}\n.npmrc\n//registry.npmjs.org/:_authToken=${NPM_TOKEN}\nI am running the command from a container extending node-alpine:10.7.0 and get \nlerna info auto-confirmed\nlerna info publish Publishing packages to npm...\nlerna ERR! ENEEDAUTH You must be logged in to publish packages. Use `npm login` and try again.\nerror Command failed with exit code 1.\ngoing in the container and running npm whoami yields my username. npm token list will ist my tokens so I am sure I am logged in.\nI have bypass the error adding the --no-verify-access flag.\nAlso, it SEEMS (I played so much with this issue, but I'm almost certain that was the case) that this error might come when I run yarn publish-all which in turn will run lerna publish --yes --exact --conventional-commits. If I run the lerna publish --yes --exact --conventional-commits straights it works. . ",
    "achingbrain": "Hmm, the appveyor builds seem to fail in different ways each time, none of which seem to be related to my changes.. I see what you mean.  That said canary works well for my current project which requires per-commit automated CI deployment for internal testing with a manual public release gate.\n@evocateur any thoughts on this PR?. @evocateur I've made the changes as requested, is there anything else that needs doing before this can be merged?  Thanks... @mleonh I think it depends which version of Artifactory you are running.  We're stuck on v4.8.0 at the moment and see lots of:\n2018-01-03 19:05:17,271 [art-exec-1487] [WARN ] (o.j.r.n.u.NpmUtils  :88) - Failed validating version: '0.1.0-beta.02883375' of package: '@org/internal-package': Numeric identifier MUST NOT contain leading zeroes\n\nPre-release versions can have multiple identifiers, but the spec says that any numeric identifiers cannot start with a leading 0.  I guess 'numeric' is interpreted as base 10 so 1.0.0-beta.0392abc is valid (as 0392abc is treated as a string) but 1.0.0-beta.0392123 is not.\nBuild metadata on the other hand can contain multiple identifiers but does not have the numeric item restriction, so 1.0.0-beta+0392123 is valid.\nBut... Build metadata is ignored when calculating version precedence so 1.0.0-beta+0392123 and 1.0.0-beta+abc23498 would be seen as equal so you need a different way to calculate precedence.\nOn my current project we're using build numbers for version precedence and git commits for metadata, so something like:\n1.0.0-beta.473+commit.0392123\nWe have to put the commit separator in because lerna adds .0392123 to the string - the spec says identifiers cannot be empty so 1.0.0-beta+.0392123 would be invalid.\nOur publish step looks like this:\nlerna publish \\\n  --canary=beta.$BUILD_NUMBER+commit\nMaybe lerna could add an option for which character to use to separate the commit id from the version number?\nThen we could do something like:\nlerna publish \\\n  --canary=beta.$BUILD_NUMBER \\\n  --commit-separator=+\nand end up with:\n1.0.0-beta.473+0392123\n. Heh, I left that in because I agree with the sentiment \ud83d\ude09 \nWill remove.. Removed. Fixed. ",
    "connectdotz": "sorry for the late reply. \nreact-native doesn't follow symlink, therefore we need react-native to stay in the package thus nohoist.\n. we are no longer using lerna + npm... switched to yarn and used its native nohoist instead. . ",
    "goodmind": "any solution?. @evocateur . ",
    "hutson": "The releaser-tools, as written, don't support mono-repositories. They fetch all commits from the current git project and generate a changelog from those.\nHowever, the underlying libraries used by the releaser-tools do support sub-packages (specifically Lerna projects). So it may be possible to use the releaser-tools on a mono-repository after a slight modification to take a package name or directory path. \nSorry for the slight tangent there.\nI also like this idea, and I would love to have it for our conventional-changelog org. I receive quite a few support questions that are answerable by indicating where our changelog files are.. @corsen2000 that may be a breaking change if there are other tools out there parsing the tag created by lerna and assuming the H is part of the commit hash (without, say, validating that it's a proper short-hash).. @corsen2000 that may be a breaking change if there are other tools out there parsing the tag created by lerna and assuming the H is part of the commit hash (without, say, validating that it's a proper short-hash).. @achingbrain would it be alright to just skip the extra argument for setting the commit separator and instead, just always append the short commit hash as the first segment of the build metadata string?\n+ is always the build metadata separator, and the short hash will, on occasion, fail to meet the requirements for the pre-release section.\nTherefore, I believe the only safe place for the commit hash is appended after +.\n. @achingbrain would it be alright to just skip the extra argument for setting the commit separator and instead, just always append the short commit hash as the first segment of the build metadata string?\n+ is always the build metadata separator, and the short hash will, on occasion, fail to meet the requirements for the pre-release section.\nTherefore, I believe the only safe place for the commit hash is appended after +.\n. Therefore, how do we manage the canary portion of the string?\nIf we move the hash after +, then setting --canary to beta gives you -beta+0392123 as demonstrated by @achingbrain.\nShould Lerna just expect you to set the canary version using the same --canary argument, like --canary=beta.$BUILD_NUMBER, as demonstrated by @achingbrain?\nOr would you expect Lerna to infer the version on its own so that you only need to set --canary?. Therefore, how do we manage the canary portion of the string?\nIf we move the hash after +, then setting --canary to beta gives you -beta+0392123 as demonstrated by @achingbrain.\nShould Lerna just expect you to set the canary version using the same --canary argument, like --canary=beta.$BUILD_NUMBER, as demonstrated by @achingbrain?\nOr would you expect Lerna to infer the version on its own so that you only need to set --canary?. Personally I like the idea of setting the entire pre-release string using --canary. It's simple, and it gives me flexibility to leverage external CI tooling, such as the build number injected into Jenkins CI jobs, or $CIRCLE_BUILD_NUM in Circle CI.\nThough, perhaps, the CLI argument name is not intuitive. While canary is how we use these releases, we're really setting the pre-release string in a Semantic Version 2 string.. Personally I like the idea of setting the entire pre-release string using --canary. It's simple, and it gives me flexibility to leverage external CI tooling, such as the build number injected into Jenkins CI jobs, or $CIRCLE_BUILD_NUM in Circle CI.\nThough, perhaps, the CLI argument name is not intuitive. While canary is how we use these releases, we're really setting the pre-release string in a Semantic Version 2 string.. PR is pending here - https://github.com/lerna/lerna/pull/1507. @light24bulbs just waiting for someone to start submitting pull requests to fix individual issues with the documentation.. @bochen2014 what else needs to be discussed or completed for this issue?. @bochen2014 what else needs to be discussed or completed for this issue?. @lechinoix I believe the empty documentation on the npm registry will be resolved once @evocateur publishes new versions of these packages. The changes he's made to the documentation took place after the last time those packages were published.. @lechinoix I believe the empty documentation on the npm registry will be resolved once @evocateur publishes new versions of these packages. The changes he's made to the documentation took place after the last time those packages were published.. @junyper, I believe the versioning behavior of Lerna intentionally bumps the minimum version of the cross package dependencies to the new version of that dependency under the assumption that if you're releasing a new version of a package from a mono-repository, any package that is released from the same mono-repository and depends on the other released thing, should require the new version.\nIn your example, let's assume you refactor package A and package B. In package A you add a new feature. In package B you use the new feature from package A. \nYou run your release and the version is bumped to 5.21.0 for both packages.\nLerna should set the package A dependency in package B to be ^5.21.0, because technically package B depends on the feature released in version 5.21.0 of package A.. @junyper, I believe the versioning behavior of Lerna intentionally bumps the minimum version of the cross package dependencies to the new version of that dependency under the assumption that if you're releasing a new version of a package from a mono-repository, any package that is released from the same mono-repository and depends on the other released thing, should require the new version.\nIn your example, let's assume you refactor package A and package B. In package A you add a new feature. In package B you use the new feature from package A. \nYou run your release and the version is bumped to 5.21.0 for both packages.\nLerna should set the package A dependency in package B to be ^5.21.0, because technically package B depends on the feature released in version 5.21.0 of package A.. > Thinking through that scenario, could the package A version in package B then be ^5.21?\n@junyper in that scenario package A version is updated to ^5.21.0, which is equivalent to ^5.21.\nIs that sufficient?\nHowever, what if you modified both package A and package B, but those changes didn'tt depend on each other. You would still expect each package to be versioned at 5.21.0, but, because their changes don't depend on each other, you won't want package A dependency in package B to be updated.\nHow that is done in practice, I don't know, because Lerna would have to know that changes in package A aren't required by package B. That's more than what Lerna can infer on its own.\n@evocateur for advice on this one.. @evocateur I'm not sure why most of those snapshots were updated.\nWhen I ran npm test it notified me that I needed to update my snapshots. So I did.\nI understand why the canary snapshot was updated, but not the others.\nMy development environment is a Node 8 Docker container using the version of npm and git that comes with it.\nI also don't understand why npm mangled the package-lock.json file.\nWhat do I need to do to get a working local build, and one that plays nicely with Lerna's CI setup?\n\nEdit: Even a Docker Node 10 image does not work for me (same snapshot issues, and build failure):\nbash\nnode@29c44ab42d4b:/app$ git --version\ngit version 2.1.4\nnode@29c44ab42d4b:/app$ npm --version\n6.1.0\nnode@29c44ab42d4b:/app$ node --version\nv10.6.0. > The vast majority of the snapshots should not have changed (nor the lockfile).\nI'll pull down the Travis CI docker image so that I can have a development environment with the proper tools.\n\nThere is a snapshot serializer that may need to be updated due to the version format change.\n\nI'll keep an eye out for that.\n\nI\u2019m still not a huge fan of passing in the numeric bit of the release ID.\n\nMe neither, but the next option was to use the canary value, query the npm registry, find all package releases that match the version and canary identifier, then find the next available number. \nFor example, if 1.0.0-beta.0 was published, I would expect Lerna to query the npm registry, see beta.0, increment the number, and append it to the canary string.\nHowever, that seemed like way too much complexity to introduce to address just this issue.\nWould your refactor provide something like that?\n\nv2.1.4 of git seems rather old, since the latest release is v2.17.x...\n\nNot unheard of though.\nAt my company we use Lerna 2.0 publish on RHEL 6 boxes rocking git version 1.8. \ud83d\ude09 (We'll have access to a newer version soonish, but even then, we use RHEL and LTS versions of Ubuntu using the versions of packages that come with those distributions. So we'll still be using a older version of git than what is added to the Travis CI build environment (Travis CI upgrades the version of git in their images beyond what comes by default with Ubuntu Trusty)). @fenduru I need to update this change so that unrelated snapshots are not updated. That will require a little time to build out a custom Docker image to provide a compatible development environment. (Longer story is copied below)\nThe other part of this is determining what @evocateur means by I\u2019m still not a huge fan of passing in the numeric bit of the release ID. I\u2019m in the process of major refactoring in this area, FYI (splitting version command out of publish)..\n\nAs known, most of the snapshots should not have changed. So, I spent this morning trying to get a reproducible development environment on my laptop. Using the official node:8 docker image is not sufficient because it uses Debian Jessie (Version 8), which has git 2.1.4 installed. Lerna uses Travis CI as their build environment and Travis CI maintains their own custom Docker images, which are based on Ubuntu Trusty, with a newer version of git manually installed into the container image.\nTherefore, to get a development environment that matches that of the core maintainer and their CI environment, I need to pull the Travis CI image. So, in addition to learning why git was too old in the standard Node images, I then started downloading the ~3GB Docker image for Travis CI.\nHowever, Travis CI images do not contain Node, or any of the tooling needed to setup a Node development environment (such as nvm). Instead, anyone pulling their custom images are expected to install any tools or runtimes they require.\nTherefore, I'm going to need to build a Docker image off of the Travis CI image, and manually install the required version of Node I need for Lerna development.. I believe @evocateur's answer is effectively #1522 \nI'm closing this PR out because the underlying code has been rewritten by @evocateur.\nFurthermore, #1522 actually addresses this issue.. Here's a copy from our CI logs:\n```bash\n16:50:21 lerna ERR! yarn publish --ignore-scripts --new-version  --non-interactive exited 1 in '@scope/package-b'\nlerna ERR! yarn publish --ignore-scripts --new-version  --non-interactive stdout:\n[1/4] Bumping version...\ninfo Visit https://yarnpkg.com/en/docs/cli/publish for documentation about this command.\nlerna ERR! yarn publish --ignore-scripts --new-version  --non-interactive stderr:\nerror Invalid version supplied.\n```. Here's a copy from our CI logs:\n```bash\n16:50:21 lerna ERR! yarn publish --ignore-scripts --new-version  --non-interactive exited 1 in '@scope/package-b'\nlerna ERR! yarn publish --ignore-scripts --new-version  --non-interactive stdout:\n[1/4] Bumping version...\ninfo Visit https://yarnpkg.com/en/docs/cli/publish for documentation about this command.\nlerna ERR! yarn publish --ignore-scripts --new-version  --non-interactive stderr:\nerror Invalid version supplied.\n```. It was brought to my attention that there is a case where Lerna may need to override the recommendation.\nIf package-b depends on package-a, and package-a was released with a new version, Lerna may need to override the undefined recommendation and force a patch release with an update to package-a in the dependencies list of package-b, even if  package-b has no commits, or only unreleasable commits.. It was brought to my attention that there is a case where Lerna may need to override the recommendation.\nIf package-b depends on package-a, and package-a was released with a new version, Lerna may need to override the undefined recommendation and force a patch release with an update to package-a in the dependencies list of package-b, even if  package-b has no commits, or only unreleasable commits.. > I wasn't able to repro the null level or releaseType: undefined with the default angular plugin.\nI wasn't sure if you saw the conventional-changelog-angular code, but it always defaults to a patch release, regardless of the commit type.\nI've put together my own personal configuration package that defaults to null.\nYou can see the results of its unit tests here.\nIn any case, thank you for the fix. It's been appreciated :smile: . @kirbdee for clarification, you want to modify a source file, perhaps with documentation or style changes, but you don't want to publish the changes as a new version?\nIn that case, there's no alternative other than to not run lerna version when you know that you only have style or documentation related changes.. > no Github releases entered\nThat is because we use Lerna, which stores changelogs in files. \ud83d\ude09 \nHere's an example of a changelog with one of the breaking changes - conventional-recommended-bump changelog\nSince it looks like I made both of those breaking changes, please let me know if you have any questions or concerns.. > @hbetts Yes, sorry, didn't mean for the comment to come across negatively.\nI did not take it like that. \ud83d\udc4d I just though it was ironic, and also timely. \ud83d\ude04  @mlavina and I were discussing earlier about Lerna's GitHub release notes, and how we wish it was a feature supported out of the box. We're both interested in #1023, but I, myself, don't have the time to contribute towards that \ud83d\ude22 . - conventional-changelog-angular changelog\n- conventional-changelog-core was just the Node version bump.\n- conventional-recommneded-bump  was just the Node version bump.\nThe first package has changes in behavior that may effect Lerna users. Mostly it may change how commit messages are interpreted because of the changes to the angular convention, which is the default Lerna.. > PS: I honestly was startled when I looked at conventional-changelog source and that it still uses q\nWell, I believe it was written when Q was the best way to add promises, and it really hasn't been updated since Promises became native to Node. \ud83e\udd37\u200d\u2642\ufe0f \nWe do accept pull requests to upgrade that code base \ud83d\ude05 \nEventually, we'll get around to updating it, as it's still actively maintained by the @conventional-changelog team. :+1: . > so you'd have to hit an endpoint outside of this list, and I'm not entirely sure what endpoint that would be.\nIt turns out GHE_API_URL is meant to be a base URL, which for rest.js is https://api.github.com/ by default (without a trailing /v3.).\nTherefore, it would be a leap for Lerna to assume that it can tack on /v3 to the URL and make a request (You can query the /v3 URL directly on a GitHub Enterprise deployment and it will return the X-GitHub-Enterprise-Version header).\nThough, v3 has been around for years, and I imagine it will be around for years to support the enormous amount of code built against it.. @nahumzs the handlebars dependency was upgraded in the conventional-changelog packages several days ago.\nIt looks like @evocateur then upgraded the minimum version of conventional-changelog-core in Lerna version v3.13.0.\nCan you please update your version of Lerna and re-test? (Also, can you please add the results of lerna --version to the table under Your Environment?). I would suggest going with a name like --git-verify as the term --verify is too generic. . Shouldn't this default to --no-verify, and only remove --no-verify if opts.verify is set?. Never mind. I see how you set noVerify below with the check for verify.. Please add a trailing comma in the line above.. ",
    "Igmat": "I use this script in my two lerna based projects: BaseT and MetaF.\nObviously it isn't generic enough solution, but GitHub releases looks much better (see this and this) with, so it could be a good starting point for further improvements and adding such capability to lerna itself.. @evocateur, I can't agree with you that circular dependency is always bad.\nI'm working on testing tool and it is used to test itself, which seems to be as fully reasonable solution.. @evocateur, wow... Kinda unexpected reaction to normal user feedback. Ok, I won't bother you no longer.... @evocateur thank you for fast answer and fix.\n\nThe ability to publish the root package.json will be removed in v3.0.\n\nIs this quote highlights official plans for lerna? If so, it probably means that I have to change my project structure.. ",
    "FaHeymann": "I guess https://github.com/facebook/jest/issues/3584 is what is causing it, right? So I will rollback the jest version. @evocateur could you take a look again? I hope I fixed everything :). \ud83d\udc4d fixed. ",
    "jenniesyip": "You have some syntax errors, try: \n\"test\": \"echo \\\"This module is not supported at this time. You should update it to conform to the new notification spec. ---\\\" && exit 0\". Ah, I just noticed that --no-bail and --no-private are for the v3 beta version.  Then perhaps this issue just a reminder to add those flags to the Readme later. Sorry about that. :) We can close this issue then. . @evocateur I am happy to help, esp if it helps me understand the ins and outs of Lerna to make my design system the best it can be! Lmk!. I have also been contemplating on what the correct workflow for Lerna is along with conventional commits and specifically prereleases. My project follows the gitflow workflow, with feature branches that merge into dev.\nThings to remember:\n\nConventional commits has no concept of an automatic prerelease. A prerelease is a specific semver convention that Lerna applies, so it will always overrule the version bump suggested by --conventional-commits. \n\nWhen ready for a big release, a release branch is created to merge into master, which means no new features should be added to the branch after this point \u2014 only bug fixes, documentation generation, or other release-oriented tasks. Thus, I should not expect any breaking changes to enter in at this point. With each additional commit and push to the release branch, Lerna helps publish another version with the @prerelease dist tag so we can test them in other projects. We always pass --conventional-commits in the final publishing Lerna command because an automated changelog is generated.\nMy final decision making revolves around how and when to properly bump the versioning, and if it is possible to automate this in Lerna.\nI came to these 3 cases, where our @latest package is currently at v2.2.0, and assuming we only have a feature merging in, to bump a minor version, release and publish v2.3.0:\nCase 1:\nAutomated version bumps with conventional commits and a prerelease dist-tag. The semantic version is determined automatically based on the type of commits in the release branch. Additional commits bump the version as patches since additional pushes to this branch should only be bug fixes, documentation, or release-oriented.\nThe user can install <pkg@prerelease> to get the prerelease changes, or <pkg@2.3.x> specifically.\n<pkg>@2.2.0\nrelease branch // `lerna publish --conventional-commits --dist-tag prerelease`\n  2.3.0@prerelease\n  2.3.1@prerelease\n  2.3.2@prerelease\n  2.3.3@prerelease\n  master //  `npm dist-tag add <pkg>@2.3.3 latest`\n    2.3.3@latest\nTakeaway: Using a dist-tag to identify prereleases instead of a prerelease identifer is less clear to consumers. Versioning of the pkg is also incremented at a faster rate for (not really a con, just a messier versioning flow). \n```\nnpm view  versions\n[ '2.2.0',\n  '2.3.0',\n  '2.3.1',\n  '2.3.2',\n  '2.3.3' ]\nnpm view  dist-tags\n{ latest: '2.3.3', prerelease: '2.3.2' }\n```\n\nCase 2\nPublish a prerelease with Lerna and the prerelease identifier rc and a prerelease dist-tag . Since a prerelease is identical to prepatch, in practice, the minor version is not bumped at the beginning when creating the branch. The version is bumped when merging to master.\nThe user can install <pkg@prerelease> to get the prerelease changes, or <pkg@2.2.1-rc.x> specifically.\n<pkg>@2.2.0\nrelease branch // `lerna publish prerelease --dist-tag prerelease --preid rc`\n  2.2.1-rc.0@prerelease\n  2.2.1-rc.1@prerelease\n  2.2.1-rc.2@prerelease\n  2.2.1-rc.3@prerelease\n  master // automatic versioning here `lerna publish --conventional-commits`\n    2.3.0@latest\nTakeaway: Using a dist-tag and pre-release identifier to identify prereleases is more obvious to consumers, but the final versioning is a surprise. This also seems to go against the norm of semantic versioning, where it is expected that  2.2.0 < 2.2.1-rc.0 < ... < 2.2.1-rc.3 < 2.2.1 , so 2.2.1 should be released instead of 2.3.0.\nThis seems like the obvious wrong solution. \n```\nnpm view  versions\n[ '2.2.0',\n  '2.2.1-rc.0',\n  '2.2.1-rc.1',\n  '2.2.1-rc.2',\n  '2.2.1-rc.3',\n  '2.3.0' ]\nnpm view  dist-tags\n{ latest: '2.3.0', prerelease: '2.2.1-rc.3' }\n```\n\nCase 3\nA minor release is bumped manually and determined by the developer when creating the release branch, but the --conventional-commits option is still passed to generate the changelog.\n<pkg>@2.2.0\nrelease branch // `lerna publish preminor --dist-tag prerelease --preid rc`\n  2.3.0-rc.0@prerelease\n  2.3.0-rc.1@prerelease\n  2.3.0-rc.2@prerelease\n  2.3.0-rc.3@prerelease\n  master // `lerna publish --conventional-commits`\n    2.3.0@latest\nTakeaway: Manually determining the version and using a dist-tag and pre-release identifier to identify prereleases is the most obvious to consumers. The final versioning should not be a surprise. This follows the pattern of semantic versioning, where it is expected that  2.2.0 < 2.3.0-rc.0 < ... < 2.3.0-rc.3 < 2.3.0 , so 2.3.0 is released.\nSince we follow the gitflow workflow, it also states: \n\nIt is exactly at the start of a release branch that the upcoming release gets assigned a version number\u2014not any earlier. Up until that moment, the develop branch reflected changes for the \u201cnext release\u201d, but it is unclear whether that \u201cnext release\u201d will eventually become 0.3 or 1.0, until the release branch is started. That decision is made on the start of the release branch and is carried out by the project\u2019s rules on version number bumping.\n\nThis seems to be a good solution, but we can't automate the versioning via continuous integration.\n```\nnpm view  versions\n[ '2.2.0',\n  '2.3.0-rc.0',\n  '2.3.0-rc.1',\n  '2.3.0-rc.2',\n  '2.3.0-rc.3',\n  '2.3.0' ]\nnpm view  dist-tags\n{ latest: '2.3.0', prerelease: '2.3.0-rc.3' }\n```\n\nConclusion\nWith the current way Lerna handles prereleases, we either utilize dist-tags with Lerna publishing to automate everything, or we manually determine the version bump when a release candidate is ready. \nI'm curious to know if other teams have any solutions towards full automation of bumping versions and publishing releases. \n@evocateur Also curious if you have any insights or advice for this with your experience in prereleasing versions for Lerna. \nThanks everyone! \n. From semver.org: \n\nA larger set of pre-release fields has a higher precedence than a smaller set, if all of the preceding identifiers are equal. Example: 1.0.0-alpha < 1.0.0-alpha.1 < 1.0.0-alpha.beta < 1.0.0-beta < 1.0.0-beta.2 < 1.0.0-beta.11 < 1.0.0-rc.1 < 1.0.0.\n\nAs you work on your pre-release, it will be versioned:\n0.0.0\n0.0.1-rc.0\n0.0.1-rc.1\n0.0.1-rc.2 \n... etc\nWhen you are ready to promote a pre-release, you are usally removing the pre-release identifier, which in this example is rc. The next expected version of your package would then be 0.0.1. If you want to bump it to another pre-release identifier instead, then you need to specify something different, i.e. alpha to beta to rc. . @evocateur Thanks for the clarification! Appreciate it. :) . ",
    "gustaff-weldon": "https://github.com/lerna/lerna/pull/1029#pullrequestreview-65783844\n@evocateur I believe in this case the whole point of being able to add eg. custom changelog is to wait for preversion/version/postversion scripts to be done before proceeding with anything else. \n. @evocateur thanks for a detailed review, much appreciated! I will get back to you once the changes are done.. I have updated the code. Please let me know if something can be further improved. If accepted, I will rebase this PR into one commit.. @mattbrunetti kudos also to @synaptiko, we worked on that together. \nI'm glad you find this useful!. This will run script asynchronously, wouldn't it? Same goes for other hooks that were added.\nAre we fine with that?. Yes, it's just being defensive. Currently, it is not likely that second serializer would be used in one run. YAGNI and remove?. We can, there's a couple of reasons why this is done like this:\n- toJSON was returning its internal pkg object, any outside changes on it will affect Package\n- cloning only for serializer case would make toJSON behave differently - in one case it will return its internal object the other time it would return a deep copy. Any suggestion what would be the best way to deal with buildPackageGraph being called from\npackages and packageGraph getters?\nCould we remove those implicit calls? I do not see any functionality depending on that getter behaviour atm.\nWe could also set current command options on the repository and then pass them:\n// Command.js\nthis.repository.setCurrentCommandOptions(this.options);\nBut I have mixed feelings about that. Unless there's already some way to access currently running command from the repository?. ",
    "hannadrehman": "I am facing the same issue, what is the fix for this?\n| Executable | Version |\n| ---: | :--- |\n| lerna --version | 2.11.0 |\n| npm --version  | 6.2.0 |\n| yarn --version | 1.6.0 |\n| node --version | 9.6.1 |\n| OS | Version |\n|  macOS High Sierra | 10.13.3-= |\n. I am facing the same issue, what is the fix for this?\n| Executable | Version |\n| ---: | :--- |\n| lerna --version | 2.11.0 |\n| npm --version  | 6.2.0 |\n| yarn --version | 1.6.0 |\n| node --version | 9.6.1 |\n| OS | Version |\n|  macOS High Sierra | 10.13.3-= |\n. @evocateur can we put dependencies in root package.json. \nlets say that i am building a monorepo for react applications. I would want to have consistent versions of react and other libraries used across all projects.  right now each of my projects have seperate dependencies. but all are same actually.. @evocateur that makes sense. I had the same thoughts about it.. @sibelius  i am using lerna@3.4.1 and yarn outdated gives me all outdated dependencies across all packages.. so basically babel-loader will not transpile anything in node_modules . everything in node_modules is expected to be already a transpiled module. i have already tried many things to tell babel to transform node_modules. but nothing seems to work. . the issue is with babel-loader not considering es6 modules inside node_modules for transpiration.  . out of curiosity what do u suggest? \nshould I put raw es6 in my packages and then import then in other packages. or should transpile es6 modules and then import it in other packages.\nformer will be faster in development. and later will obviously be slow when developing the common packages.\n. I was able to solve the problem by transpiling all packages independently with @babel/cli and shipping ES5 compatible modules from main entry point. I am also able to achieve react hmr with the same setup.\nthere should be a guide or docs for setting up Lerna with for react applications. it would really help people who are new to lerna and want to migrate their projects to a monorepo setup.\nand thanks for replying and helping out. . @sibelius you can use @babel/cli to do it.  you can try this  babel src --out-dir lib --copy-files --ignore spec.js,spec.jsx. @evocateur  that's perfect \ud83d\udc4d . ",
    "alexhuiculescu": "I'm also facing this issue:\nlerna -v 2.4.0\nnpm -v 6.4.1\nyarn -v 1.9.4\nnode -v 10.11.0\nmacOS High Sierra 10.13.6. ",
    "haikyuu": "I was facing this problem because of a missing local dependency. i.e, i was depending on a package in my monorepo but i accidently deleted it.. @ygmarchi let me clarify. Here is my project:\n|-packages\n  |- package 1\n  |- package 2\npackage 1 depends on package 2 and i accidently deleted package 2. That was causing the error for me.. ",
    "ygmarchi": "\nI was facing this problem because of a missing local dependency. i.e, i was depending on a package in my monorepo but i accidently deleted it.\n\nCan you explain what you deleted accidentally in what file... I'm facing the same problem and it would be a precious indication on how to solve it.. @haikyuu thanks, actually I've solved my problem, it was due to a bizarre Debian package called cmdtest containing an executable accidentally called also yarn.. ",
    "mattbrunetti": "Awesome @gustaff-weldon! I can't wait to try this out!. Did not end up using this :( Could not find resources/support on the workflow of this \"git-only\" way of distributing packages.. Decided to try out npm private packages instead... ",
    "jamiehill": "Thanks for the heads up @ramasilveyra \nThis is fantastic news indeed! . ",
    "synaptiko": "For the future reference, there are multiple ways how to achieve \"git-only\" distribution from monorepo.\nWe've tried both of those:\n\nsplitsh\nregular git filter-branch --subdirectory-filter packages/<package>\n\nBoth are quite fast, splitsh is faster (we have less then 200 commits though) and both require to have prepared \"downstream\" repositories in advance. There is one bummer with filter-branch related to tags. You have to either restore original tags after the push of the \"split\". Or you have to create a fresh clone of the repository before each split.\n@mattbrunetti It was easier for us to setup this than to manage private npm repository (which requires every developer to setup his npm/yarn accordingly).. @chinchang yes, you are correct\u2026 I understand why it's confusing but unfortunately it would make lerna even more complex to support it directly\u2026 it also depends on what CI you use and so on. ",
    "chinchang": "@synaptiko I have one major confusion regarding all this. Please help me clear it:\n\"This PR only allows putting versions as git urls. That's all. Pushing individual packages to downstream git repos has to be still handled on our own (using splitish etc).\"\nAm I correct on this?\n  . ",
    "JacopKane": "As a side tip, I'm experimenting with this tool with git hooks/husky:\nhttps://github.com/ingydotnet/git-subrepo\nSeems like doing the job well without the need to keep repositories read-only. The only gotcha was I needed to filter my git hooks for the only root origin in order to get rid of endless push/pulls. ",
    "RinatMullayanov": "@nhducit I thought that the whole point using Lerna and all dependences are installed in a root of a repository and are the general.. @nhducit lerna bootstrap uses existing package.json in each packages, but How to add there new dependencies? \nI want to have one node_modules folder at the root. \nMy 4 applications are built on the same template and use the same packages. Now each of them has its own node_modules folder, which is essentially duplicated.\nAnd there are 2 common libraries.\nLet's say there is a library A and a library B that depends on A.\nAnd each of the 4 applications uses both library A and B simultaneously.\nWhen I update the library A I need to make 5 almost identical PRs in each of the 5 repositories (library B and 4 applications) with the update package.json in each of them.\nThis is very tiring.. @nhducit I don't understand - How can I add new package (modify package.json) in my applications (packages) in packages folder.\nFor example, I want to install lodash.\nShould I run npm install lodash in root? Why do I then need the Lerna? It would work without it (for external dependencies).. @evocateur I understand how to create a new package in a lerna repo.\nI am publishing npm packages to my private registry.\nI don't understand how to manage package.json in each own package.\nIf I have to do this manually using npm install, this is somehow strange .... @evocateur How to add a new dependency in package.json some package. If I using npm install npm itself modifies node_modules bypassing lerna and not just creates a line in dependence section in package.json.. @evocateur I asked how to add dependencies to external packages (lodash,webpack, etc).. @evocateur Ok thanks. \nI think you should make the README.md more detailed. \nI would like that there was described the full workflow for working with Lerna.\nReally only I had a similar question?. ",
    "shawnthye": "i am using lerna to manage my libraries workspace, i have the same problem, so everytime i need to npm install in the specific library and lerna bootstrap.\nCheers\n  . Ok, I found the problem, if I have lerna.json/package.json/packages in $username root directory, it will forever updating the $username directory, \nis this expected?. ",
    "shanimal": "@marionebl i think you meant\n\nlerna add a --scope=b # adds a to packages/b\n\ndocs Examples. ",
    "kirbdee": "That was a typo on my part, I was using lerna updated, I did however find a workaround for my need, all my packages are \"private\" and just setting the versions(rather then installing by path) as part of the package.json and lerna bootsrap automatically then looks at the version numbers as intended. Without actually having it published. This might have some other implications later but for my case this works for \"private\" packages. Right, thanks. I thought lerna was looking at the actual local directories in package.json(if applicable) no worries, thanks for the clarification.\nAlso maybe an enhancement? or add to docs for this type of case?. No that makes sense, I didn't notice it until I saw my CICD do something unexpected.. No that makes sense, I didn't notice it until I saw my CICD do something unexpected.. No worries, I've moved to 3.0.1 from the 3.0.0-rc.0 with the appropriate changes.. No worries, I've moved to 3.0.1 from the 3.0.0-rc.0 with the appropriate changes.. Thanks for the explanation, that makes sense.. Thanks for the explanation, that makes sense.. The issue I have with this is that if a package suddenly includes a build item or folder this list would need to be updated. If it ends up getting merged lerna would see it as a change.\nIdeally I'd like to be able to target pretty much 1 directory.\nPerhaps I'll try to ignore all except a specific named folder.\nDoes ignoreChanges, accept regex?. What I meant for build items, is that each package for example could have it's own toolkit for it's build processed, including varied directories and scripts, and not actual artifacts or temp files.\nWhile I could see for new packages we could enforce a practice to use a particular structure, migrating existing packages could still fall into this use case.\nie\npackages/\n  packageA/\n    builder/\n    src/\n  packageB/\n    bundler/\n    src/\n  packageC/\n    build.js\n    source/\nin this scenario I'd like to include src and source pattern matching.\nAs for the globs, thanks for that clarification. I will also try the negation pattern matching, this might work for what I'm looking for. Moving to the root seems counter intuitive for independent packages, and lerna provided lerna exec to be able to be agnostic and to allow each package to define a script in package.json to interface with, akabuild and test which has worked really well for the projects, and doesn't care how the build or any other util scripts are structured.\nWhat I'm ultimately struggling with / trying to do really is around the --conventional-commits portion, \nWhere I had a previous issue around why things like a commit w/ chore, test, style etc. which shouldn't get considered for a version bump, was bumping the package as a patch.\n. Additionally when something like a chore or style commit bumps the version of the package, all the packages dependent on it would also get affected.. ~~It looks like this is what's causing the forced patch~~\n~~https://github.com/lerna/lerna/blob/e330f6f3d91702e8e43d3697f5c68214c89693e1/core/conventional-commits/lib/recommend-version.js#L34-L36~~\n~~from the actual convetional-commits recommendation undefined is a valid item since it doesn't fall into one of the normal categories, which shouldn't bump the version based on this recommendation.~~\n~~conventional-commit-angular:~~\nhttps://github.com/conventional-changelog/conventional-changelog/blob/d3eaacfe642eb7e076e4879a3202cc60ca626b59/packages/conventional-changelog-angular/conventional-recommended-bump.js\n~~this would return level 0 for a \"chore\" or \"style\"~~\n~~conventional-changelog:~~\nhttps://github.com/conventional-changelog/conventional-changelog/blob/d146bdc0e64d90bd04dc361e8602576bc95f36dc/packages/conventional-recommended-bump/index.js#L78-L79\n~~this would return undefined for releaseType.~~\n~~not sure the reasoning for the forced patch in the lerna usage, but this seems like a bug / unintended check.~~\n~~EDIT: noticed the changed was added recently as well:~~\n~~issue: https://github.com/lerna/lerna/issues/1551~~\n~~commit: https://github.com/lerna/lerna/commit/e330f6f3d91702e8e43d3697f5c68214c89693e1~~\nEDIT: I was mistaken, angular preset actually is what's setting 0 for \"patch\". Testing it with 3.0.1 Prior to the defaulting, seems to still default to a patch type release. :slightly_frowning_face: . Digging deeper. Lerna is doing as intended and seems the conventional lib doesn't have a non bumping level as initially thought.\nI thought in the level item being 0 would be because it was able tosee things like \"chore\" or \"test\" in some definition when parsing the notes. but notes ends up being empty from the parser...\n{ type: 'test',\n  scope: 'common',\n  subject: 'update test ',\n  merge: null,\n  header: 'test(common): update test',\n  body: null,\n  footer: null,\n  notes: [],\n  references: [],\n  mentions: [],\n  revert: null,\n  hash: '****' }. I think the solution on my side would actually be on having my own changelog-preset, and tell lerna the proper \"release\".\nHow does: lerna version --conventional-commits --changelog-preset some-preset work for a local preset?. That still doesn't seem to do what I'm after since the semver.inc would always be called, and throws and error.\nI'm wondering what your thoughts would be on only calling that for a valid release item?\nThe idea around this would be able to support the non impacting conventional commits, with a noop recommendation.\nIE:\n``` javascript\nnew Promise((resolve, reject) => {\n      conventionalRecommendedBump(options, (err, data) => {\n        if (err) {\n          return reject(err);\n        }\n    // result might be undefined because some presets are not consistent with angular\n    // we still need to bump _something_ because lerna saw a change here\n    const releaseType = data.releaseType || \"patch\";\n    let bumpVersion = pkg.version;\n\n    if(releaseType !== 'noop'){\n      //will throw error on invalid or empty releaseType\n      bumpVersion = semver.inc(pkg.version, releaseType)\n      log.verbose(type, \"increment %s by %s\", pkg.version, releaseType);\n    }\n    resolve (bumpVersion)\n  });\n\n``. Yea that makes sense, but within therecommend-version.jsshouldn't we be able to handle the version to use vs havingsemvermanage the bump based on the releaseType? since semver itself doesn't cover some of the \"non impacting\" changes prescribed byconventionalcommits.org`\ncommit types other than fix: and feat: are allowed, for example commitlint-config-conventional (based on the the Angular convention) recommends chore:, docs:, style:, refactor:, perf:, test:, and others. We also recommend improvement for commits that improve a current implementation without adding a new feature or fixing a bug. Notice these types are not mandated by the conventional commits specification, and have no implicit effect in semantic versioning (unless they include a BREAKING CHANGE, which is NOT recommended).\nWhich states its not necessarily mandated, so thinking a change-log preset should have more control over what version it would tell lerna to use?. I got that lerna detecting changes is decoupled from conventional-commits, which just tells what version should be used.\nWhat I was asking is on the version itself now. The recommend-version.js in the lerna core:\nhttps://github.com/lerna/lerna/blob/e330f6f3d91702e8e43d3697f5c68214c89693e1/core/conventional-commits/lib/recommend-version.js#L29-L39\nShouldn't this be allowed to be configureable to actually tell lerna the version vs defaulting to using semver.inc()?\nper the conventionalcommits lib anything not part of the normal release scheme should be allowed to be managed at your own discretion\nSo currently if I plugin my own changelog-preset and return a release type 'customRelease', semver would fail.\nAside:\nI also looked at seeing if i can hook into using lerna version [explicit version] but there wasn't a way to scope it. @hbetts so --ignore-changes doesn't work for me and wanted to rely more on the conventional-commit to tell lerna essentially to not bump the version. but the current core in lerna always defaults to \"patch\"\nif i run lerna version --conventional-commits --changelog-preset someplugin I'd like it to be able to follow the recommendation it was given.\nif I commit \"doc(package1): cleaned up comments\" and per conventional-commit this shouldn't be a patch.\nBut again per above, I think it might be handy to be able to configure/plugin the \"version recommender\" vs defaulting to using the semver.inc which doesn't have the concept of a \"non impacting commit\"\nFor the Idea of not running lerna version. I was going to rely on the conventional-commit to tell me this that this commit was a \"chore/doc/test/somethingnonbumping\", since lerna changed only tells you what's changed, which is fine and it makes sense to always know this. But for the time when we need to decide if we need to version it would be good to have this.\nI was looking into using conventional commit directly and handling that directly but lerna version doesn't have a scope mechanism.\nIE if I had 2 commits in the pipeline 1 being \"chore in the packageA\" another being \"feat in the packageB\" I can't scope that packageB needs a bump.. ",
    "benpolinsky": "Yeah, that was an option, but a coworker recommended resetting the git commit and deleting the latest tag, which worked nicely.. ",
    "morewry": "Me too; I can manually clean up when it happens, but I'd prefer preventing it or being able to roll back with a command.. As number of packages grows, it gets more unwieldy to do manually. It's clear how to make a cleanup command, perhaps not so clear yet how to prevent it. At the moment I'm feeling like this merits an interim solution.. Awesome! #1091 is the reason I had to do it today, lol.. When I use lerna publish --independent --conventional-commits --yes --message 'chore: release', I get what it sounds to me like you want in every case I've tested but one. That one is the one you want, but take a look. I'm satisfied with the behavior, aside from this one case, about which I'm on the fence.\nI feel compelled to say here. I would be very unhappy using Lerna without independent versioning, and I'm not \"throwing random packages into a single repository and then complaining when I have to version them at the same time.\" I just want my tools to help me communicate accurately with semver instead of giving false alarms that a breaking change has occurred when actually an implementation detail and a dependency changed.\nSay I have 7 different modules in packages/ without dependency relationships. I make commits on 3 of those modules: a, b, and c:\n- In module a I make a fix commit.\n- In module b I make a feat commit.\n- In module c I make a feat commit with a BREAKING CHANGE.\n- Modules d - g are unchanged.\nWhen I publish, I get the following:\n- Module a gets a new patch version.\n- Module b gets a new minor version.\n- Module c gets a new major version.\n- Modules d - g are unchanged.\nSay these modules do have dependency relationships:\n- Module d depends on a.\n- Module e depends on b.\n- Module f depends on c.\n- Module g is a loner.\nWhen I publish with the same changes to a, b, and c, I get the following:\n- Module a gets a new patch version.\n- Module b gets a new minor version.\n- Module c gets a new major version.\n- Module d gets a new patch version with a new minimum version for a.\n- Module e gets a new patch version with a new minimum version for b.\n- Module f gets a new patch version with a new minimum version for c.\n- Module g is unchanged.\nAs you mentioned, all this relies on making separate commits. This is the effect you'd get if you were developing directly on master. Which begs the question of pull requests and merges. There are two main cases:\n\n\nIf all these changes are completely unrelated tasks that just happen to affect modules in a dependency relationship with each other, you would ideally open separate pull requests. You can rebase, squash, or regular merge. This case is mostly straightforward.\n\n\nIf all of these changes were part of a related task, you would prefer to open a single pull request. This case is a little more complicated. You'll get a different result with squash merges than with rebase or regular merges--but rebase and regular merges work as you want.\n\nWith a rebase or regular merge, same behavior as above\nWith a squash merge, modules a - f get new major versions\n\n\n\nIt makes total sense that squash works that way, but I think there's a case to be made that there are some issues, too. Conventional commits version based on, well, commits. When you do a squash merge, you're making one commit out of what was previously several commits. One commit, one commit message, one thing marked as a BREAKING CHANGE. So of course it versions the way it does. No current tool will eliminate the need for intentional, disciplined habits in making and merging commits. If you do that (along with an understanding of how to best achieve them), you'll get the results you want.\nBut I'm still not totally happy with how squash commits work with publish. Alternative ways of handling them might have too many downsides; I don't have enough context. I'll wrap up with how the squash case looks, which I think illustrates how the current behavior could nevertheless be potentially improved. In my tests, I intentionally didn't write my PR as a conventional commit. I just let it be the name of my branch and used Github's default commit message, which combines the commit messages of all of the squashed commits, like so:\n```\ncommit xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nAuthor: Xxx Xxxxx xxxx@xxxxxx.xxx\nDate:   Xxx Xxx xx xx:xx:xx xxxx -xxxx\nExample/pullrequest (#xx)\n\n* feat(c): breaking change to c\n\nBREAKING CHANGE:\nchanged something in c's API\n\n* feat(b): add feature to b\n\n* fix(a): fix bug in a\n\n```\nThe CHANGELOGs get this entry:\n```\n\n3.0.0 (xxxx-xx-xx)\n\nExample/pullrequest (#xx) (xxxxxxx)\n\nBREAKING CHANGES\n\n\nchanged something in c's API\n\n\nfeat(b): add feature to b\n\n\nfix(a): fix bug in a\n```\n\n\nAs you can see, the CHANGELOG is missing content from the most pertinent commit and misleadingly suggests that feat(b): add feature to b and fix(a): fix bug in a are breaking changes (they're not). I'm tempted to think that if a commit looks like this, it'd be nice to provide special support for Github's default format for the purposes of the CHANGELOG, putting aside the matter of how the changes should be bumped. It'd just make it easier if you were doing conventional commits along the way not to have to edit that default commit and still get a good CHANGELOG. Of course, if that format can be recognized effectively, it opens up the ability to have squash merges versioned based on the original messages, switching based on the presence or absence of the original messages.. I had a situation recently where I had a minor version bump (new feature) in a package (package-a). package-a is a dependency of another package (package-b), so it got bumped too, as a patch. But in this dependency relationship, the new feature in package-a leads directly to a new feature in package-b, so minor for both would be more appropriate. I use --conventional-commits, and I found myself wishing there was a CLI param that would let me tweak package-b's version change. It got me thinking back to this issue and how this behavior in Conventional Commits directly stems from Lerna's orchestration because Lerna creates the commit in package-b that leads to the patch. AFAIK there isn't even an interactive workaround available, however, in a case like this. Figured I'd share the scenario and chime in saying that while I'm pretty satisfied with Lerna and --conventional-commits, I do think there's still room for improvement. The use cases are diverse and quirky, so it's not gonna be easy, but I think it's worth continuing to think about and experiment with.\n(Actually, maybe in this case I could switch to fixed versioning for a second.). For me, this gets into the topic of Lerna being difficult to extend in user-space (at least, so far as I know, it could be it is more extensible than I think).\nI had this thought while using standard-version directly the other day. It focuses on dealing with the versioning aspect and doesn't actually publish by itself. But it also offers lifecycle options via npm scripts that make it easy to put some pre and post actions on what the tool itself does.\nIf Lerna allowed us to provide versions non-interactively, or published as whatever version number was in package.json files, it wouldn't particularly matter how the versions were selected. You could use standard-version, you could choose manually, and you could experiment with writing your own versioning tool.\nBut as it stands, we're rather limited to what the Lerna team sees as useful, aligned with Lerna's design and purpose, and/or maintainable. Fair enough, but Lerna is simultaneously useful enough and complicated enough that it seems to me it's unfortunate that most features appear to be all or nothing--we can customize to the extent that Lerna provides different options, but each option adds complexity and we can't (apparently/easily) change the publish functionality beyond that without discarding it entirely and redoing it ourselves from scratch. And, of course, it does it a lot: detects changes, chooses version options, generates changelogs.\nIt got me thinking that a more extensible, dev-lifecycle-driven design could be a very good thing for a tool like Lerna (a maybe-familiar example that does something similar to what I mean might be TravisCI's build lifecycle: the steps are defined, and preset steps are available, but they can be fully customized as well). It could more effectively allow Lerna's pre-existing, opinionated tasks to be tweaked so that the community could experiment with and dogfood various possibilities.\nThat said, given the status quo, I think something along the lines of the suggestions above (lerna publish --semvers \"package1,major,package2,minor\" --default-semver \"patch\" / lerna publish --versions-file <path>) would be useful. How it interacts with Lerna's other options seems to be an obviously risky part. Lerna's publish is already quite complicated and has, it appears to me, more options with vaguely defined interactions between them than any other Lerna command.. @evocateur I think that if you were to output a message when --scope or --ignore are used together with publish, saying something along these lines:\n\nWarning! Use of --scope and --ignore with publish isn't intentionally supported and should be avoided. You can proceed, but you will need to use --force-publish for the next publish of the packages that you skip this time. See (link to more details).\n\nWhere (link to more details) could be an entry on https://github.com/lerna/lerna/blob/master/doc/troubleshooting.md. \nThat would be sufficient. Ideally if it's not supported, it wouldn't do anything, rather than kinda working, but in a way that's disconcerting. But worthwhile solutions don't have to be ideal.. --force-publish doesn't exclude anything, it forces the inclusion; so you get the effect you described, it publishes everything with changes plus the packages you've forced. \nIf you want to only publish those two, you can (on Lerna 2.x.x) combine it with --ignore, but see https://github.com/lerna/lerna/issues/1384. --ignore apparently was not intentionally designed to be used with publish. \nI've found it works okay for now, as long as you're aware that, once you've ignored updated packages during publish, you need to --force-publish them when you're ready to release them.\n. This would be useful for me right now :-) I'm having an issue where a build is failing. In logs it appears that lerna run is moving on / concurrently running a dependent's build before its dependency's build is complete. Be nice to verify whether the sort is right to help rule things out.\nFor others, this modification of the command shared by OP worked:\nnpx lerna exec -- echo \\$LERNA_PACKAGE_NAME. ",
    "KaidenR": "Just ran into this too and would love for failed publishes to clean themselves up (delete the tag and revert the commit). Next best option would be a lerna command to do both.. ",
    "migrachev": "At the moment I cannot give you such and example due to code privacy, but I will come up with one and link it.. After attempting to reproduce the problem with minimum configuration, it turned out that webpack's resolving behavior is configurable and the reason why my described case didn't work was because I specifically say to webpack to resolve package1 node_modules. However when I allowed webpack to respect nested node_modules, I stumbled on another problem, so here is why I will try to give more detailed info here in case someone has similar problem.\n[The cause of the problem]\nThe problem that I specified above was caused by custom webpack configuration. By default webpack should not have problems resolving the node_modules of your node_modules. What I was doing was:\njs\nresolve: {\n        modules: [\n            path.join(__dirname, \"node_modules\")\n        ]\n}\nWith this configuration webpack will respect only __dirname/node_modules when resolving dependencies and (in the upper mentioned example) dependencies of our dependencies will not be properly resolved. Or the least to say they will be strangely resolved.\njs\nresolve: {\n        modules: [\n            \"node_modules\"\n        ]\n}\nThis is the configuration that will allow webpack to respect nested node_modules. However in my case that end up in another problem.\n[The New Problem]\nMy packages are using React and React have that restriction that only one instance of React must be loaded by your javascript. The webpack bundle.js was violating that. The reason for that is because my packages depend on React and that is quite normal because they use it. So when webpack transpile and bundle my code, it will load/require React twice.\nTo solve this problem I use alias for react (I think there are other solutions as well)\njs\nresolve: {\n        modules: [\"node_modules\"],\n        alias: {\n            react: path.resolve(__dirname, \"node_modules/react\")\n        },\n        extensions: [\".js\", \".css\"]\n    }\nWith this i think we can close this issue, since webpack is capable of working togerher with lerna.\nHowever I would be interested to read something on the topic i raised about what are the arguments on \"Why lerna bootstrap acts with that slight difference from npm install.\" I guess I am not the first to ask that.\nThanks for the support. ",
    "Socia1Circus": "@morpheus-87  If you manage multiple packages, wouldn't it be simple to just npm publish that one package only. . ",
    "morpheus-87": "@Socia1Circus if I do it like that way, the whole git process with creating tags would not be done.\nThanks for this information, @zxqfox, I haven't seen this flag in the docs. I will try it out the next time.. ",
    "unregistered": "@evocateur Is there interest in a PR for this? Conventional commits seems kind of awkward when using lerna in Independent mode.. @evocateur can you clarify what the tag should be for an independently versioned repo? Wouldn't it have to contain the name of the package that's being published?\nI think that feature you mentioned might work, just trying to wrap my head around it.\nTo clarify we publish on every commit we squash to master, but when a commit changes only one package it's wasteful to publish the other 80 packages (and dishonest too, since the patch-level gets bumped but there are no changes).\nEdit: I played around with yarn lerna publish --skip-npm --conventional-commits and it works the way I want. It tags packages like @org/package-name@1.0.0, and when it creates git tags, it only updates versions of packages that change. So that's pretty neat. . @evocateur It's a bit of a pain to get the auto-generated commit and tags sent back to the master branch, since we have branch protection on, commits only enter master through PRs. Not sure what the recommended pattern for that is, I may just be doing something unusual.. ",
    "penx": "\nlerna exec --no-private -- npm publish\n\nThis sounds like exactly what we need for our project but unfortunately there's still one major issue:\nIf some packages have been updated but others haven't, this will fail as npm publish will be run on all packages, even those that haven't changed, and throw an error:\nYou cannot publish over the previously published versions. ah great, no it isn't published, so that should work, thanks!. Unfortunately in my case this wasn't a straight swap, as the CLI works fine when I use:\n\"devDependencies\": {\n    \"@my-namespace/my-tool\": \"0.0.1\"\n  },\nbut when I swap to:\n\"devDependencies\": {\n    \"@my-namespace/my-tool\": \"file:packages/my-tool\"\n  },\nand reinstall, build, bootstrap - I then get:\nError: Cannot find module '@babel/runtime/regenerator'\nWill try dig a little deeper.. @babel/runtime is in the dependencies of @my-namespace/my-tool\nWhen I have the following in the root:\n\"devDependencies\": {\n    \"@my-namespace/my-tool\": \"0.0.1\"\n  },\nlerna boostrap correctly installs @babel/runtime in the root node_modules folder.\nWhen I use\n\"devDependencies\": {\n    \"@my-namespace/my-tool\": \"file:packages/my-tool\"\n  },\n@babel/runtime is not installed in the root node_modules folder or in the packages/my-tool/node_modules folder.\nIs this a separate bug? Want me to raise another ticket?\n. FWIW I am using Yarn workspaces. that works, thanks \ud83d\ude42. > Why not wait until the PR is merged to publish? \nWe're doing this - we're publishing from master after merge, we delete the tag that's created by Lerna but this is created later with the same name by GitHub via the GitHub releases interface.\nHowever you've made me realise that the issue is that I didn't have all tags locally when I was running lerna updated so I think that's the main issue, I can add a step to our publish script to pull down all tags first. Sorry I had thought it was using the commit message rather than the tag name.\nThanks for your help \ud83d\ude42. ",
    "swernerx": "I figure this is just a broken error handling as the git error which happens is not passed to the console log. Even when using debug logging.\n```js\n      function (err) {\n        tracker.finish();\n    if (!err) {\n      _this2.logger.success(\"import\", \"finished\");\n    } else {\n      _this2.logger.error(\"import\", err);\n    }\n\n    callback(err, !err);\n  });\n\n```\nI added the else block above to log the error... but I figure the uncaught exception should still be dealt with. This is the new output after adding the else block:\nlerna info 3c9f6e6 \nlerna info 4fd7d08 \nlerna info 3998aa0 \nlerna ERR! import Failed to apply commit 3998aa0.\nlerna ERR! import Error: Command failed: git am -3\nlerna ERR! import error: sha1 information is lacking or useless (packages/readable-code/package.json).\nlerna ERR! import error: could not build fake ancestor\nlerna ERR! import Applying: Release 0.1.14\nlerna ERR! import Patch failed at 0001 Release 0.1.14\nlerna ERR! import The copy of the patch that failed is found in: .git/rebase-apply/patch\nlerna ERR! import When you have resolved this problem, run \"git am --continue\".\nlerna ERR! import If you prefer to skip this patch, run \"git am --skip\" instead.\nlerna ERR! import To restore the original branch and stop patching, run \"git am --abort\".\nlerna ERR! import \nlerna ERR! import Rolling back to previous HEAD (commit 234022a598b38f74c5eba543166cb810faaf19ac).\nlerna ERR! import You may try with --flatten to import flat history.\nlerna ERR! execute callback with error\n(node:3703) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 3): TypeError: Cannot read property 'split' of undefined\n(node:3703) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.. As suggested by the output adding --flatten works around this issue. But there seems to be another edge case related to empty patches.\nOutput:\nlerna info 86791f0 \nlerna info 49e89f3 \nlerna ERR! import Failed to apply commit 49e89f3.\nlerna ERR! import Error: Command failed: git am -3\nlerna ERR! import Patch is empty.\nlerna ERR! import When you have resolved this problem, run \"git am --continue\".\nlerna ERR! import If you prefer to skip this patch, run \"git am --skip\" instead.\nlerna ERR! import To restore the original branch and stop patching, run \"git am --abort\".\nlerna ERR! import \nlerna ERR! import Rolling back to previous HEAD (commit 234022a598b38f74c5eba543166cb810faaf19ac).\nlerna ERR! import You may try with --flatten to import flat history.\nlerna ERR! execute callback with error\n(node:5867) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 3): TypeError: Cannot read property 'split' of undefined\n(node:5867) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.. The remaining error is the result of Lerna to not cleanly handle empty commits. These should not be in Git repositories in the first place, but still, it might make sense to handle them in some variant so that it does not throw for users importing old repositories. The following variant (inside ImportCommand.js: execute()) works well for me acting on the git error message (inside the babel transpiled code):\n```js\n            if (err) {\n              const isEmpty = err.stdout.indexOf(\"Patch is empty.\") === 0;\n          if (isEmpty) {\n            // Automatically skip empty commits\n            _ChildProcessUtilities2.default.execSync(\"git\", [\"am\", \"--skip\"], _this2.execOpts);\n\n            // Reset previous error\n            err = null\n          } else {\n            // Give some context for the error message.\n            err = `Failed to apply commit ${sha}.\\n${err}\\n` + `Rolling back to previous HEAD (commit ${_this2.preImportHead}).\\n` + `You may try with --flatten to import flat history.`;\n\n            // Abort the failed `git am` and roll back to previous HEAD.\n            _ChildProcessUtilities2.default.execSync(\"git\", [\"am\", \"--abort\"], _this2.execOpts);\n            _ChildProcessUtilities2.default.execSync(\"git\", [\"reset\", \"--hard\", _this2.preImportHead], _this2.execOpts);\n          }\n        }\n\n```. Added a PR to fix the detected issues in the original source code:\nhttps://github.com/lerna/lerna/pull/1059. ",
    "thecodejack": "Facing same issue. Any ETA when this gets fixed? For me --flatten also failing. It randomly fails at different commits.\nlerna info bb36013\nlerna ERR! import Failed to apply commit bb36013.\nlerna ERR! import Error: Command failed: git am -3\nlerna ERR! import fatal: Unable to create '/u/user/ux-modules/.git/index.lock': File exists.\nlerna ERR! import\nlerna ERR! import Another git process seems to be running in this repository, e.g.\nlerna ERR! import an editor opened by 'git commit'. Please make sure all processes\nlerna ERR! import are terminated then try again. If it still fails, a git process\nlerna ERR! import may have crashed in this repository earlier:\nlerna ERR! import remove the file manually to continue.\nlerna ERR! import\nlerna ERR! import Rolling back to previous HEAD (commit 299d0e6ebsa37078afaaed00415a15bae89d97575d).\nlerna ERR! import You may try with --flatten to import flat history.\nlerna ERR! execute callback with error\n(node:141145) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 3): TypeError: Cannot read property 'split' of undefined. repro from my current env\nhttps://github.com/thecodejack/lerna-publish-1647 \nPublish all first with 3.0.0-beta.17 and later try force publish with 3.2.1. I haven't tried using lerna changed and lerna version. I was trying lerna updated & lerna publish. Will try these and give you update.. @evocateur I keep publishing custom versions of my packages. But later if I want to do a proper minor/major release of a module I am unable to do with lerna since I get following. \nuser:/path/pakages> lerna publish\nlerna notice cli v3.10.5\nlerna info versioning independent\nlerna ERR! EUNCOMMIT Working tree has uncommitted changes, please commit or remove changes before continuing.\nWith force-publish I was able to handle this. But now I am kind of stuck to do manual releases. . @MerkAndreas I had similar issue. Fixed it by removing publish script as mentioned in https://github.com/lerna/lerna/issues/1880#issuecomment-456502998. ",
    "webernir": "Thank you @azu @swernerx \nusing --flatten worked for me as well.. ",
    "natesilva": "Thanks @swernerx. I\u2019m testing Lerna, importing a big legacy project, and your branch was a lifesaver. I hope this gets merged ASAP.. ",
    "jmherbst": "Didn't intend to close this \ud83d\ude06\nLet me know what you think and any feedback you might have! \nThanks!. Possibly tangentially related: https://github.com/lerna/lerna/issues/521 ?. ",
    "tombburnell": "I've also hit this issue - we have a project that was migrated to lerna to ease local development but is now making deployment much harder. It contains a number of applications and dependant modules. The apps need to be built from their respective directories and are end up with a set of stale symlinks rather than the actual files of dependent modules.\nI tried using the following to copy the actual dirs over the symlinks, but it causes problems with npm prune --production. In fact npm prune --production actually just deleted the symlinks which seems a bit strange.\nfind . -type l -depth 1 -exec bash -c 'echo \"copying {}\"; cp -RL $(readlink {}) __tmp && rm {} && mv __tmp {}' \\; \n. ",
    "ajhool": "@evocateur I understand that Lerna is not a deployment tool but I hope you recognize why people are adding issues to Lerna when they realize that they don't know how to deploy code after switching to Lerna.\nPeople are accustomed to zipping their node_modules folder alongside their build/dist folder and that's all it takes to build a deployment artifact. Simple, easy, reliable. If they're building a serverless application (increasingly common), their code will grow and they'll switch to a monorepo and they'll need \"A tool for managing JavaScript projects with multiple packages,\" so they choose Lerna.\nHoisting creates a problem for these people because their previous method of deployment is no longer possible. This is not Lerna's fault -- but Lerna should recognize that a lot of people will face this challenge after switching to Lerna and provide clear guidance for them. Either that Lerna is not useful for their use-case or where to get started looking for an external bundling/deploy tool.\nServerless monorepo projects will far outnumber the number of projects that need to publish a group of npm modules (I think), so the About section should anticipate & account for the fact that most people looking for a monorepo management tool don't need Lerna. Basically, replies like \"Lerna is not a deployment tool.\" and \"You don\u2019t need to link packages you never publish, just require modules with relative paths. Like literally everybody did before lerna was a thing.\" are extremely clear about the use-case for Lerna (rather, the very common use-cases that Lerna is NOT suitable for) -- but the same clarity is not provided in the README.md and people will only find these issues after a frustrating/unnecessary Lerna integration attempt.. This is an issues tool that Github provides for people to post issues, which I tried to do.\nI didn't mean for the explanation to be rude or demanding, nor do I think that it was. Just an attempt to explain where people are coming from when they are confused about how to deploy serverless code in a hoisted monorepo. I'm also happy to provide a PR with an update for the README. For left-leaning software devs who are interested in constructively affecting political change, please check out Tech For Campaigns at https://www.techforcampaigns.org/ , which pairs volunteer expert technologists with Democratic campaigns (even at the state and local level). I'm not affiliated.\nUsing Palantir's open-source tools does serve as promotion / brand-awareness for a company that you might think has abhorrent practices and I do think that there should be room for opening tickets to request a different vendor on that basis alone. Or even a ticket on the open-source provider's repo to request transparency. But there is obviously a reasonable and an unreasonable way to go about that -- opening those issues was a clear waste of good reputation by somebody who could have made real waves with a more level-headed approach. Perhaps community input before big decisions is not a burden but actually serves to prevent bad decisions. ",
    "joetidee": "Why does the --ignore flag work, but the ignore directive in lerna.json not work ?. I have recently had postinstall errors when deploying to AWS Elastic Beanstalk:\n```\n  tidee-life@ postinstall /tmp/deployment/application\n  lerna bootstrap\nlerna notice cli v3.1.1\n  lerna info Bootstrapping 7 packages\n  lerna info Installing external dependencies\n  lerna ERR! npm install exited 1 in 'tidee-life-server'\n  lerna ERR! npm install stderr:\n  npm ERR! code E404\n  npm ERR! 404 Not Found: tidee-life-config@1.0.0\n```\nNot sure why this is happening as all my package versions are 1.0.0 in each package.json file, which matched the dependencies definitions (which do not use the caret either ^).. ",
    "cdtinney": "I can't reproduce this.\n\u03bb lerna run foo\ninfo cli using local version of lerna\nlerna notice cli v3.4.3\nlerna info versioning independent\nlerna success run No packages found with the lifecycle script 'foo'\n\u03bb lerna run foo --ignore *\ninfo cli using local version of lerna\nlerna notice cli v3.4.3\nlerna info versioning independent\nlerna info filter [ '!*' ]\nlerna success run No packages found with the lifecycle script 'foo'. To clarify @evocateur's comment:\n\nRun lerna bootstrap in root to link component B to component A\nBuild Component A (yarn build?)\nIf you are developing component A in parallel, you'll need to run a server with live reloading to update the build. \n\n\n",
    "aaronjensen": "json\n{\n  \"lerna\": \"2.2.0\",\n  \"packages\": [\n    \"example\",\n    \"packages/*\"\n  ],\n  \"version\": \"0.1.0\",\n  \"npmClient\": \"yarn\",\n  \"useWorkspaces\": true\n}. For anyone else that needs to error on failure, you can do this for now:\nbash\n./node_modules/.bin/lerna publish --canary --yes --npm-tag=dev --exact \\\n  | tee /tmp/publish-results \\\n  && grep -qv \"lerna ERR!\" < /tmp/publish-results. ",
    "sawyerh": "@evocateur Thanks for the response. Is the broken symlinked dependency expected behavior though?. ",
    "jonah-williams": "I ran into this as well. In my case I have a lerna managed cluster of packages and wanted to temporarily link in an app which is not part of the repo to test consuming changes before publishing (without npm linking every package). A lerna.json packages route with a relative path (\"../my_client_app\") similarly produces broken symlinks.\nIs there a better way we could take advantage of lerna bootstrap to automate linking for cases like this or sawyerh's case?\nIf nothing else it seems worth a clear error in lerna's output.. ",
    "gausie": "Is there anything stopping this being merged?. ",
    "the0neWhoKnocks": "@gigabo I'm curious about how long it usually takes to get a PR merged and published for this repo. The fix is needed for work, so if there's anything else you need from me, please let me know. . @evocateur  by chance do you know the specs of the system that last ran these tests in Windows successfully? At work I'm running Windows 10, node 6.9.5, yarn 1.1.0, and Cygwin for terminal. I ask because I see specific code calling out fixes for Windows. . @evocateur Sorry about spinning up another PR for the same issue. I'm used to being able to re-open a PR after a branch rename in BitBucket, but I didn't see an option to do so here.\nHere's the old PR for reference https://github.com/lerna/lerna/pull/1070\nTook a deeper dive, and hopefully these changes are more to your liking.\n- Still not sure why I was having issues running the tests fresh off of master. As far as I could tell, the promises wouldn't resolve because of the pathing issues, but I couldn't get that far until I accounted for the code in src/Command.js. After I got the code working I removed the error checks since tests were happy again. I'm wondering if they should be left in though in case someone else encounters the same issue.\n- I work in large code bases on a daily basis, and I've found that the simpler we make it for devs to run/write tests usually benefits the code. So respectfully I disagree about the test:watch command.. Looks like an integration test is failing, I'll look into it. Looks like the integration command is only run on the CI, should it be added to the test command so others don't get to the PR process only to find out there's other code that needs to be updated? There wasn't anything in the CONTRIBUTING about those tests that I saw.. Agreed, but when I was running tests, that's what I was seeing. The Promises were stalling out, and after digging through the code I found that the errors weren't being reported correctly because this bit of the code was expecting an Object to set exitCode on. This check doesn't hurt anything, and makes it work in such cases.. Dug through code, and I didn't see in the tests where you were actually adding those files to testDir, just saw them being created in externalDir. Is there a function that's supposed to copy those over in this test context?. When I ran tests on master (with no changes), I was getting Promise errors, and errors for the tests dealing with testDir.. What method is supposed to import that conflicted file?. You have multiple linting configs, which will fail tests if something doesn't follow the styles specified. That's not one of them, should I add it so someone else doesn't come across this issue?\nI'll keep digging into the pathing issue. I'd previously traced it back to https://github.com/lerna/lerna/blob/34fd08aaac474693f8d9e0cc46bf22db862880ba/src/PackageUtilities.js#L80 and just figured by that point I'd tackle the issue where the error was surfacing. Didn't know you could pass in a custom packages path, thanks for that info.. It was added for easier development. yarn jest will only work if jest is installed globally. Also, one of the pitfalls that Windows users fall into with jest is they'll use --watch which has issues where as watchAll does not. Just trying to make the repo friendly to work in.. Also, the CONTRIBUTING doc calls out npm for most procedures, should it be updated to yarn?. ",
    "Gurkenschreck": "~~I am also interested.~~\n~~I think I solved this (in another project) by npm linking the packages together.~~\nDoes this #1084 help you?. @alampros @evocateur thank you both for your responses! This is it, it finally works like charm. Nice explanation. I also found that I cannot install a local dependency which is set to private in the package.json.\nHow would I have learned it, if i did not ask the question here? Is there some documentation on this I have overread? (Maybe this is something that needs to be better documented?). I would like to close this. Are my questions about to be left unanswered?. Thanks for your answer. I'll see if I can help with that.. Nice stuff.\n\nI sympathize, as I've never understood why it's \"okay\" to have cycles in the first place. \n\nWho said that it's ok?. ",
    "marlonmleite": "@evocateur any example using --watch?. Yes, I did, thank you.\n@evocateur does your console make the test result ugly? Before separating with Lerna it was very intuitive to interact and see results on the console.. ",
    "danday74": "I am facing the same issue - I want a prepublish script in the root package.json that is executed before lerna publishes any module or pushes anything to git. If the prepublish script exists with a non zero exit code I want lerna to abort early.\nAt the moment I am forced to use a solution similar to @Arikael and I have the same concerns as him.\nI believe it is currently possible to have a prepublish script in a package but not in the root.\nMany thanks\n. ",
    "acarl005": "@matryoshcow Marking it as private only causes it to skip npm publish, not the git stuff.. Ah yes I hadn't considered --update. I will do it that way instead.. ",
    "wagg-matt": "@evocateur that's great Dan, thanks for coming back to me. \nHas certainly clarified a few things for me. Am building a test project at the moment and will give hoisting a go and see how I get on.. ",
    "gyoshev": "I've rebased the branch and left only the test case. The test probably should have been along with the other PR, but at least now there is some protection against regressions.. If I understand this correctly, the problem occurs only with --flatten, because createPatchForCommit uses git log, instead of git format-patch. These have different behavior for empty commits:\n(~) git format-patch -1 f3121c --stdout                                             \n(~) git log --reverse --first-parent -p -m --pretty=email --stat --binary -1 f3121c \nFrom f3121c... Mon Sep 17 00:00:00 2001\nFrom: Alex Gyoshev <___@___.__>\nDate: Thu, 12 Oct 2017 14:23:10 +0300\nSubject: ...\n(~)\n. ",
    "alampros": "I had the same difficulty understanding this process. In short, instead of linking the dependencies with npm i -S ../my-module-b, you will need to do two things:\n1. Make sure each of your modules has a valid version in their package.json (even if it's 0.0.1)\n2. Manually add my-module-b to module my-module-a's package.json/dependencies:\njson\n{\n  \"name\": \"my-module-a\",\n  \"version\": \"0.0.1\",\n  \"dependencies\": {\n     \"my-module-b\": \"^0.0.1\"\n  }\n}\nThen, when you run lerna bootstrap, lerna will see the dependency and symlink my-module-b into my-module-a/node_modules (similar to using npm link).\nMy biggest problem with this is that it is super cumbersome to work with until your modules are published to npm. If you try to run yarn or yarn add in a package that requires an unpublished sibling package, yarn craps its pants because it can't find it.\nDid that help at all?\n\nedit: Looks like I'm not the only one with problems working with unpublished packages: https://github.com/yarnpkg/yarn/issues/2611. I'm running into a similar issue with the --canary flag and --conventional-commits.\nMy lerna.json:\njson\n{\n  \"packages\": [\n    \"packages/*\"\n  ],\n  \"version\": \"independent\",\n  \"npmClient\": \"yarn\",\n  \"useWorkspaces\": true,\n  \"command\": {\n    \"publish\": {\n      \"conventionalCommits\": true,\n      \"message\": \"chore(release): publish [skip-ci]\"\n    }\n  },\n  \"ignoreChanges\": [\n    \"packages/*/test/**\",\n    \"packages/*/test-server/**\"\n  ]\n}\nShell Output (scrubbed)\nsh\nyarn ci-publish --canary --preid beta --npm-tag next --yes\nyarn run v1.12.3\n$ lerna publish --canary --preid beta --npm-tag next --yes\nlerna notice cli v3.8.4\nlerna info versioning independent\nlerna info ci enabled\nlerna info canary enabled\nlerna WARN Yarn's registry proxy is broken, replacing with public npm registry\nlerna WARN If you don't have an npm token, you should exit and run `npm login`\nlerna info Looking for changed packages since 1bf4a0d^..1bf4a0d\nFound 1 package to publish:\n - @[-org-]/[-packagename-] => 0.8.2-beta.2+1bf4a0d\nlerna info auto-confirmed \nlerna info publish Publishing packages to npm...\nlerna info Verifying npm credentials\nlerna http fetch GET 200 https://registry.npmjs.org/-/npm/v1/user 313ms\nlerna http fetch GET 200 https://registry.npmjs.org/-/org/[-user-]/package?format=cli 117ms\nlerna success published @[-org-]/[-packagename-] 0.8.2-beta.2+1bf4a0d\nlerna notice \nlerna notice \ud83d\udce6  @[-org-]/[-packagename-]@0.8.2-beta.2+1bf4a0d\nlerna notice === Tarball Contents === \nlerna notice 2.2kB  package.json                \nlerna notice 3.2kB  CHANGELOG.md                \nlerna notice 2.8kB  index.js                    \nlerna notice 5.7kB  lib/common.js               \n...more files\nlerna notice === Tarball Details === \nlerna notice name:          @[-org-]/[-packagename-]                        \nlerna notice version:       0.8.2-beta.2+1bf4a0d                                  \nlerna notice filename:      [-org-]-[-packagename-]-0.8.2-beta.2+1bf4a0d.tgz\nlerna notice package size:  12.4 kB                                               \nlerna notice unpacked size: 51.4 kB                                               \nlerna notice shasum:        7e5d7feb65225b59da23b82ef1fb71ac21ed2305              \nlerna notice integrity:     sha512-f1mj17DhxpREE[...]qSbfO/X0bOrlg==              \nlerna notice total files:   14                                                    \nlerna notice \nlerna http fetch PUT 200 https://registry.npmjs.org/[-org-]%2f[-packagename-] 4017ms\nSuccessfully published:\n - @[-org-]/[-packagename-]@0.8.2-beta.2+1bf4a0d\nlerna success published 1 package\nDone in 5.85s.\nThis was run in a CI environment thru a yarn script:\n``json\n{\n  \"scripts\": {\n    \"ci-publish\": \"lerna publish\",\n    ...\n  }\n  ...\n}. @evocateur No, the dist-tag was not set. From the looks of it, npm defaulted it tolatest` on their side.\nI'm not sure if it matters at all, but it might be worth mentioning that this is a private module.\nThanks so much for the quick response and for your work on this project \u2013 it is truly awesome!. So I tried it again without --conventional-commits at all and it's still not taking it. I'll create a separate issue if I can narrow it down any further so as not to hijack this one.. I'm an idiot. I had the tag specified (latest) in my package's package.json#publishConfig. \ud83e\udd26\u200d\u2642\ufe0f . ",
    "mitchhentges": "Yeah, going opt-in until the next major release makes a lot of sense.\nThanks for being on board :smile:. Hmm, it looks like argv._onFinish isn't defined (at least in BootstrapCommand).\n(Tested with a quick console.log). Thanks for the approval! That was speedy quick!. I swear every time I write bootstrap I write it differently \ud83d\ude06 . ",
    "sthzg": "I find this especially problematic in CD environments, where errors in a promise(-chain) should exit the process with an error code. That is what node will do in the future, but right now it prints the deprecation warning but otherwise exits the process with 0.. @evocateur Sorry for commenting on a closed issue. I am investigating the same topic and followed hints from issues all around to get an idea about the behavior:\n\n\nThe rough entry from the lerna-side to this topic seems to be here: \n/core/conventional-commits/index.js#L6-L7\n\n\nLerna will use the conventional changelog api to get the recommended bump level, which will always return the patch level (2) if it doesn't find a higher semver. \n/packages/conventional-changelog-angular/conventional-recommended-bump.js#L8-L23\n\n\nAccording to the angular preset every type below here will not be put into the CHANGELOG: \n/packages/conventional-changelog-angular/writer-opts.js#L44-L46\n\n\nThis would explain why lerna creates a patch release, featuring only the generic CHANGELOG message **Note:** Version bump only for package <foobar>.\nGiven the explanation on https://www.conventionalcommits.org I would expect these other types to not trigger a release. \nIn combination with the CHANGELOG that is generated it feels inconsistent, as it publishes the patch release but doesn't print the actual commit types in the CHANGELOG (as they are discarded in the conventional-changelog-angular preset).\nI am interested if you think that there is something that can be improved in the way that lerna integrates/orchestrates the conventional-changelog APIs and which behaviour you think would be correct?\n. ",
    "frankstallone": "I am also experiencing this same phenomenon. I am running lerna boostrap --hoist and attempting to work with some packages on a private registry. I have gotten lerna to finally say it is successful but it is clearly not. If I throw on the --loglevel verbose I see:\n...\nlerna verb dependencyIsSatisfied @storybook/addon-actions false\nlerna verb dependencyIsSatisfied @storybook/addon-knobs false\nlerna verb dependencyIsSatisfied @storybook/react false\n...\nThese are ones on the regular npm registry, but there are other that show up dependencyIsSatisfied that are on our private registry. I am attempting to get this working every which way I know possible. I have added the --registry flag to let lerna know about my private registry, my private registry's have publicRegistry in their package.json, they have registry= in their individual .npmrc files.\nRight now only when I have the --registry flag will lerna bootstrap successfully end despite not having all the dependencies. If I keep the flag off, it fails trying to download our private packages on npm's main registry (again despite the packages individual .npmrc and package.json say which registry to goto).\nDoing npm i in the individual packages is not going to work either. I have a prepare script that runs TypeScript linting. That fails until lerna bootstrap ties everything together. Adding the dev dependencies back to the individual packages feels like it defeats the purpose of hoisting them to the root to begin with. To abstract testing to the root. \nI really want to use lerna to solve some issues we're having internally with managing and orchestrating but my time is running out. After I finally got publishing these repositories to our internal Artifactory server, I am now stuck on how to get this bootstrapping to work. It obviously worked at some time or else I wouldn't have been able to get publishing working. I will continue to update this message as I continue to poke and prod at this.\nFor reference:\nnode -v\nv8.8.1\nnpm -v \n5.6.0\nUpdate: 12:14 PM\nI have been sort of able to get around this with the following running godmode:\n\"clean:all\": \"lerna run clean --parellel && rm -rf node_modules\",\n\"setup\": \"lerna exec npm run setup --parellel && npm i\",\n\"bootstrap\": \"lerna bootstrap --hoist --registry https://[private-registry-url]\",\n\"godmode\": \"npm run clean:all && npm run setup && npm run bootstrap\",\nUpdate 1:01 PM\nOn a whim I decided to try the double -- before the flag on the private registry:\n\"bootstrap\": \"lerna bootstrap --hoist --registry https://[private-registry-url]\",\n... and it seems to be working. I haven't 100% verified this yet but twice clearing all node_modules folders and running bootstrap seems to work.. Oi, my spelling has gotten worse as I go on. Sorry about that! Thanks for noticing. Updating.... Okay... Still confused but here is where I am at. In the main monorepopackage.json I have:\n\"release\": \"lerna publish -m \\\"chore: \ud83d\udd16 Publish new version.\\\" --git-remote origin\",\n... and if I run: yarn run release it fails like shown above attempting to publish https://registry.yarnpkg.com/[firstpackage]: ETIMEDOUT like shown in full on the original post.\nAgain trying to isolate this I made some changes to README files in my packages (they are really well refined at this point) and found that if I just run, in Terminal:\nlerna publish -m \\\"chore: \ud83d\udd16 Publish new version.\\\" --git-remote origin\n... everything works perfectly fine... That's right. Running it as a yarn command, fails attempting to publish to yarn's registry. This, despite having the following in all my individual packages:\nregistry \"https://myprivateregistry.com/\". Shout out to @rally25rs. We diagnosed this on the yarnpkg discord channel and came up with the solution. I'll present this to you in folder structure before and after form. \nBefore\nmonoreporoot\n\u251c\u2500\u2500 lerna.json\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 packages\n\u2502   \u2514\u2500\u2500 @pkg1\n\u2502       \u2514\u2500\u2500 .npmrc\n\u2502       \u2514\u2500\u2500 .yarnrc\n\u2502   \u2514\u2500\u2500 @pkg2\n\u2502       \u2514\u2500\u2500 .npmrc\n\u2502       \u2514\u2500\u2500 .yarnrc\n\u2502   \u2514\u2500\u2500 @pkg3\n\u2502       \u2514\u2500\u2500 .npmrc\n\u2502       \u2514\u2500\u2500 .yarnrc\n\u2514\u2500\u2500 README.md\nAfter\nmonoreporoot\n\u251c\u2500\u2500 .npmrc\n\u251c\u2500\u2500 .yarnrc\n\u251c\u2500\u2500 lerna.json\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 packages\n\u2502   \u2514\u2500\u2500 @pkg1\n\u2502   \u2514\u2500\u2500 @pkg2\n\u2502   \u2514\u2500\u2500 @pkg3\n\u2514\u2500\u2500 README.md\nFirst, I had an .npmrc and .yarnrc in every package folder but not the root. I moved one of each back to the root and removed them from the packages. Now everything works brilliantly. Npm handles this different than Yarn. When I was using npm (before switching to yarn), running npm run publish worked fine. \n@rally25rs had a really good theory as to why this was happening. I'll let him explain. Either way, this has been solved.. ",
    "djfarrelly": "To help people in the short term, perhaps npm's tokens could help. Creating a wrapper script to generate a token, adding it to your .npmrc then publishing using lerna then removing and deleting the token could work.\nDocs: https://docs.npmjs.com/getting-started/working_with_tokens\nOther helpful info: https://circleci.com/docs/1.0/npm-private-module-dependency/. ",
    "rhysforyou": "For people finding this through Google, I'd like to point out that a good workaround is to set the NPM_CONFIG_OTP environment variable before running lerna publish, e.g.\nsh\nNPM_CONFIG_OTP=123456 lerna publish. ",
    "jthegedus": "The above solution doesn't seem to work with Yarn & lerna as a devDep, eg:\nshell\nNPM_CONFIG_OTP=123456 yarn lerna publish\nIt still fails on the OTP during publication :disappointed: . Fair point. I was under the impression that Yarn read all of npm's configs, wishful thinking. A note for others nonetheless.. ",
    "teppeis": "Yarn's issue: https://github.com/yarnpkg/yarn/issues/4904. ",
    "dupski": "+1 for lerna to prompt for this, although NPM_CONFIG_OTP seems to work ok. Turning off 2FA doesn't seem like a good solution :). ",
    "iarna": "Two phase publishes with staging is something we've been talking about. It's a rather substantial platform change, but it is one we intend to see done.. I was chatting about this with Ceej today and we may have an alternative and much easier to implement solution for you all:\nTime-limited tokens. You could create an access token for the purposes of publication that does not require 2fa and is valid for the next 5 or 10 minutes. Then use that during the various publications. \nCreating the token would require 2fa, but using it would not. And it would auto-delete itself after it times out.. I've mentioned this elsewhere (and perhaps it's already been included), but the only thing I'm aware of that lerna can do to improve the situation as things stand today, would be to generate the tarballs first (npm pack), and then after they're produced, publish them with npm publish <tarball name>. This will at least limit the publication delay to what's happening on the registry, though it probably won't be sufficient to eliminate these issues for users with 100+ modules. The window for publication is actually a bit longer than 30 seconds, but not hugely so.\nTime limited tokens are on our list of features we'd like to add to 2fa tokens, both from npm's security team and from my own, but work is not yet scheduled to add them and I'm afraid I don't yet have a timeline for that. \nAnother thought is that libnpmpublish may help in directly integrating publication into lerna, as it would eliminate the external-process delay. However, it's currently lacking one key puzzle-piece, which is an npm-compatible config loader that can get the registry authentication tokens. That's on our immediate roadmap however, and I expect we'll have it available in January.. ",
    "dazlious": "Any relevant news on this topic?  NPM_CONFIG_OTP is not working for us, because we have a lot of packages, which cannot be processed within 30secs. ",
    "ThisIsMissEm": "@evocateur tonight I started working on OTP support, without realising you'd already started working on it (I forgot to check this issue before starting). I've made a few changes:\n\nChange npm-publish to be able to detect OTP failures for both npm and yarn, with fixtures and tests\nChange npm-publish to not remove package tarballs, and instead do that as part of publish command \u2014 this gives a clearer separation of concerns.\n\nI think you've definitely the better direction over in your branch, and I'd be happy to collaborate where possible.. @evocateur my next step was looking into how the publishes actually work, catching the PublishError that I created, and then retrying the batch after requesting a new OTP.. @evocateur we could probably wrap the mapper in pRetry \u2014 using onFailedAttempt to catch the PublishError, triggering a call to requestOneTimePassword (from your branch). @gziolo Have a look at #1767 and see if the approach forwards makes sense to you?\nIt is a major change, but I think it's the best way out of the current complexities that we have in lerna publish.. That'd be due to: https://npm.community/t/2fa-security-skipping-otp-on-npm-publish-when-relogin/3074. We could probably add that as a flag, but changing the default behavior would be a breaking change.\nI'd consider this a good stop-gap solution.\n\nOn 3. Dec 2018, at 20:46, Ville Immonen notifications@github.com wrote:\nI\u2019ve been using the NPM_CONFIG_OTP variable, but it fails often because the one time password expires before publishing finishes.\nUntil full support for npm 2fa has been implemented in Lerna, would it be reasonable to change the options npm/Yarn is spawned with to use stdio = 'inherit'? This would allow nom/Yarn to show the normal prompt for OTP when authentication fails due to 2FA. Right now it\u2019s not shown because the commad runs with a non-TTY input stream.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @mathieurousseau which version of lerna 3.x are you using \u2014 can you give the output of lerna --version please?. @mathieurousseau can you share your package.json at the root?. @redonkulus were you able to resolve your issue by using lerna diff ?. @ibezkrovnyi whilst npm whoami works, the issue comes from the fact that lerna doesn't actually use npm whoami under the hood, instead, it makes a direct call to /~/whoami\n\nI'd say this is really a bug with the Nexus repository, instead of a bug with lerna. @ibezkrovnyi I think I have an idea.. could you share your local npm config? (I've never come across specifying a username before)\nOf course, censor any password/login credential. Okay, I've dug into this further @ibezkrovnyi; This is no longer an issue as of lerna \u02c03.4.1`, please see this change: https://github.com/lerna/lerna/commit/06a9479ab2d8d8fe48538be2d44c61ed99be4d6d#diff-56894a089f84980a542a859fbae4c47d\nIn other words, update lerna, and you'll be able to publish to your nexus registry.. @manchicken you'll have to give a bit more information: what command did you run, what third-party registry are you using, what was the error given, and what does your npm config look like? (Replace any sensitive values with ). Would a work around be to execute the tests before you run lerna publish?. Can you supply the full log for this? (e.g., the commands you used, and their outputs). Hi Matthew, \nReading this, I believe it's a dupe of #1729. Check your package json for a preversion/version/postversion script.\nEmelia\n\nOn 15. Nov 2018, at 19:11, Matthew Costabile notifications@github.com wrote:\nThe issue is that the working tree does not have uncommited changes until I run publish. it updates the changelog, and package.jsons, but fails to recommit them before continuing\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Is there a reason helpers is not a package? If package-1 or package-2 depends on anything from helpers, then it should be a package.. I'd agree with this warning; thoughts @evocateur?. I'd say the solution to this problem is to update git, as at some point lerna needs to depend on certain features to perform certain functionality. Do you need to use the --since command as it's unsupported given your system configuration?. @Siilwyn what are the uncommitted changes left after the command exits?. Okay, after an early cursory look @Siilwyn, it seems to be an issue in the scripts section of your packages that causes some sort of failure \u2014 I've been running this all in an isolated docker container to ensure a clean working environment.. Ah, okay, found the issue. In the root package.json, you have a script called version this calls lerna version --no-push, which, as it so happens gets called during lerna version, resulting in the dirty tree.\n\nAs you can see here, version lifecycle script is called during lerna-version: https://github.com/lerna/lerna/blob/master/commands/version/index.js#L403\nThe simple fix is to remove the \"version\" script from the package.json in the root of your repository. See here for more information on npm lifecycle scripts: https://docs.npmjs.com/misc/scripts. Maybe there's something that we can do to detect issues like these in the future? I'm not sure. /cc @evocateur. I think this might be possible by modifying lerna publish to support a --mirror option which adds a different path to findVersionedUpdates which would just return all the packages and their current versions. I'm pretty sure this wouldn't work, and I question whether this should be supported \u2014 could you actually have multiple lerna repositories? How interlinked is everything?. This looks good to me, though, we're slowly dropping the usage of npmClient in favour of programmatic registry access.. Does this work in any of the lerna 3.x.x series? . Why not create a \"@my/vscode-dev-packages\" package which depends on all the shared packages?\n\nOn 5. Jan 2019, at 03:40, Matthew Mirande notifications@github.com wrote:\nI'm not sure I understand why you're even using lerna for what sounds like something that very much wants to be its own repository.\nall dev deps are shared, vscode extensions ship individually and together as a \u201cpack\u201d\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @celticdarren where have you found this option? It's not supported as per lerna add --help in lerna 3.4.3. @celticdarren ah, this appears to be for lerna bootstrap not for all lerna commands, as far as I understand it. We likely need to make the documentation clearer.\n\n@evocateur could you clarify?. If that resolves your issue, can you please close this issue. Thanks!\n\nOn 5. Nov 2018, at 23:22, Darren notifications@github.com wrote:\n@ThisIsMissEm That makes sense! Thanks for getting back to me.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. This seems like an issue where we'd need to know what the expected behaviour of execa is in order to resolve.. Can you do a npm view @lerna/run-parallel-batches@^3.0.0? If it finishes, but does not output anything, then that's something we can look into. @lerna/run-parallel-batches@^3.0.0 is published in the npm registry: https://www.npmjs.com/package/@lerna/run-parallel-batches. @goodbomb hm, this is odd, as it's not a private scoped package, as far as I can tell.\n\n@evocateur can you check this in the web UI?. I can\u2019t reproduce locally (logout, clear cache, npm view) \u2014 could you post the output of npm view @lerna/run-parallel-batches@^3.0.0 \u2014loglevel silly\nThanks!\n\nOn 5. Nov 2018, at 23:18, Ben Scott notifications@github.com wrote:\nIt's probably worth noting that the repository in which I'm using Lerna is a private scoped package that's being published to an internal instance of Artifactory. Our package is scoped and we have to log in to artifactory as well, so this could potentially be causing an issue, not sure.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. On lerna version vs lerna publish: I think the code just confused me there, on my first read through I thought it was actually versioning packages.\nit's just that lerna publish isn't quite quick enough on the uptake to realize this without a special from-git positional argument. \n\nI'd say from-git should probably be the only path through lerna publish, as this makes the command not mutate or change versions of packages (which seems to be what happens in the other code paths [see makeVersion]).\nI'd also say that there should not be an implicit (or any other) usage of lerna version from lerna publish. Currently, it seems people just run lerna publish unaware that it's actually doing two commands in one. By having this behaviour, we make it much harder to do things like publish retries or recoveries.\n\n\nseparate tagging as \u201clatest\u201d (dist-tag) from publishing the tarball\n\nThis was actually the default in early lerna 2.x, \n\nIs there a reason it was moved to be non-default for lerna 3.x?. It can already be automated by lerna, just do two tasks or a pipeline of \"lerna version\" and \"lerna publish from-git\"; I'm simply saying from-git should be the only path in lerna publish.\n\nOn 4. Dec 2018, at 19:27, Miles Johnson notifications@github.com wrote:\nI'm really in favor of the version/publish split, as it would help automate releases a bit. In some of the current projects at my employer, we're utilizing Yarn workspaces + semantic-release + semantic-release-monorepo (which is very hacky) to automate releases based on commit messages... which works, but is also problematic.\nIf this could be automated via Lerna, we could forego the semantic-release process and embrace Lerna 100%. Even more so if there were some hooks to update changelog, generate GH releases, etc.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Perhaps we should also add a quick page into the docs explaining how to migrate, then we could link to it from the error message.\nOn 11. Jan 2019, at 18:50, Daniel Stockman notifications@github.com wrote:\n@evocateur commented on this pull request.\nIn commands/publish/index.js:\n\n@@ -62,7 +63,10 @@ class PublishCommand extends Command {\n     }\n\n if (this.options.requireScripts) {\n\n\nthis.logger.info(\"require-scripts\", \"enabled\");\nthrow new ValidationError(\n\"removed\",\n\"--require-scripts has been removed.\\nExecute these scripts from the appropriate package lifecycle.\"\nHopefully this is clear enough?\n\n\u2014\nYou are receiving this because your review was requested.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Hmm, okay. That is indeed a little bit awkward.\nOn 11. Jan 2019, at 18:13, Daniel Stockman notifications@github.com wrote:\n@evocateur commented on this pull request.\nIn commands/publish/command.js:\n\n   type: \"boolean\",\n\n\ndefaultDescription: \"true\",\nWe're using yargs' \"auto-negation\" feature here (any boolean option prefixed with no- is set to false), so it is a bit awkward, I agree. We can't use \"no-temp-tag\" as the key, otherwise it would need to be passed as --no-no-temp-tag.\n\n\n(I could be wrong, it's been awhile since I tried to make this clearer. It could also require upstream changes in yargs)\n\u2014\nYou are receiving this because your review was requested.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Perhaps we need to explain why this is dangerous?. How does this change affect the lerna help output? Should it actually default to no-temp-tag instead of temp-tag?. Also, isn't this capable of using a different string here?. \n",
    "gziolo": "\nI have a branch with tentative beginnings, mostly about querying the registry to see if 2FA is required. I haven't gotten around to refactoring the publish loop into an E401-catching, OTP-prompting, restartable queue, however...\n\nAt WordPress we have almost 50 packages maintained with Lerna: https://www.npmjs.com/org/wordpress. It almost impossible to publish more than 15 updated packages with one 2FA token. It would be awesome if you could ask to provide the token again when timeout happens. Is there any way we could contribute to this task? . @ThisIsMissEm, how nice. Thanks for opening this issue. I will take a closer look tomorrow and open an issue in our repository with the detailed description of what issues we had so far and how we would like to update our workflow to make it easier to maintain. I will re-share in the linked issue. We also plan to discuss this a bit tomorrow during weekly WordPress core JS chat.. That would be awesome. We are trying to do the same for https://github.com/@WordPress/packages. At the moment we need to reference the script using local path like this:\nhttps://github.com/WordPress/packages/blob/fdd1458e3d38c1e067ffdcac3b193bf57cd2c910/package.json#L32. @evocateur, why aren't those packages linked inside the top level node_modules folder? I think it could help to solve this issue and other similar unexpected errors when using --hoist flag like this error: https://github.com/WordPress/packages/pull/68#discussion_r165029336.. Are there plans to add a flag which would teach Letna to do it as part of the bootstrap command?. @danielo515 I'm about to do the same. Use post-install scripts to npm link all I need to use in the root folder.. > @gziolo I was talking about the bootstrap, not the linking. Currently I'm not doing anything on that regard\nNo worries. It turns out the only thing we need is:\n```sh\n!/usr/bin/env bash\nlerna bootstrap --hoist\nnpm link packages/browserslist-config\nnpm link packages/jest-preset-default\n```\nProbably we need a smarter way to automatically create all links :). Well, I finally decided to create all symlinks myself:\n```sh\n!/usr/bin/env bash\nmkdir -p node_modules/@wordpress\nln -sf ../../packages/browserslist-config node_modules/@wordpress\nln -sf ../../packages/babel-preset-default node_modules/@wordpress\nln -sf ../../packages/jest-preset-default node_modules/@wordpress\nln -sf ../../packages/scripts node_modules/@wordpress\nln -sf ../@wordpress/scripts/bin/wp-scripts.js node_modules/.bin/wp-scripts\n```\n_Well, this \u261d\ufe0f  needs more love \ud83d\ude05 _ \nSee related PR and the reasoning behind this decision: https://github.com/WordPress/packages/pull/77.. For the record, we dicussed publishing flow improvments today (November 13th) during weekly WordPress core JavaScript chat (you can also check chat transcript for more details). We also track the same issue in the Gutenberg repository: https://github.com/WordPress/gutenberg/issues/11780. In this repository we maintain source code of all npm packages published under WordPress organization.\n\nIn our lerna workflow many developers work on the various packages but very few have privileges to publish. This creates a situation where the publisher needs to know at publish time how to version a component. The developer pushing changes should know how their changes affect the version and ideally would be able to indicate that prior to publish time.\nSecondly separating versioning from publishing would allow us to create an automated job to publish the packages. No versions choices would need to be made at publish time.\n\nAt the moment we defer to Lerna performing version increments for all packages. We only express our intent for the change inside of the corresponding changelog files when working on PRs. The biggest downside of this approach is that we need to scan all existing changelog files during publishing and re-apply manually the proper version bump for each package. It would be a nice improvement if we could update both changelog and package.json with a new version at the same time when PR gets merged. Lerna could use that and skip the step to ask what version should be applied.\nThere is also this issue that some packages get updated only because they depend on other updated packages. This is where Lerna is the most helpful because it's almost impossible to detect it manually when you have to maintain 50 packages with independent versioning.\nIt might what from-git is offering, but to be honest, I don't quite understand how it works at the moment based on this issue and existing documentation: https://github.com/lerna/lerna/tree/master/commands/publish#bump-from-git.\nOne thing which didn't work well in the past is pushing publish commit. It takes some time to provide all version increments and publish all packages. We had the case where new commit was pushed to master which broke the flow two-fold. We had to rebase the branch before pushing changes which caused that git hash references weren't working properly anymore. Next time we asked Lerna to list which packages have changed, it had to use the previous hash which wasn't ideal.. > * implement retries via checking the registry for each package at a given version, giving the option to abort the publish or continue\n\n\nthis allows for partial publishes to succeed, related to splitting versioning and publishing\nswitch to serial/sequential/queue-based publishing of packages\nThis gives better error handling and OTP support\nConcurrent publishes lead to a lot of error conditions resulting in complex code & hard to debug errors\n\n\nIn the past, we had publish failures caused by 2FA timeout where we had more packages to publish than it could be handled in 30 seconds. The following steps don't quite work well in the majority of cases to recover from such failure:\n\nCheck if tags were created locally, if yes use git push --tags to send them to upstream (ensure you didn\u2019t create your own tags).\nCheck if publish commit was created, if yes use git push to send it to upstream (ensure your history is in the proper state).\nIdentify all packages that were published and verify there are no local paths for local packages inside package.json files (e.x. \"@wordpress/compose\": \"^1.0.0\").\ncd to each package that needs to be published and run npm publish --otp=******.\n\nIt's tons of manual work and we had 2 releases where we published local paths inside package.json files instead of the latest version of dependencies. Example package which was published by accident with the local path instead of npm version:\nhttps://unpkg.com/@wordpress/block-library@2.2.0/package.json\njson\n\"@wordpress/autop\": \"file:../autop\",\n\"@wordpress/blob\": \"file:../blob\",\n\"@wordpress/blocks\": \"file:../blocks\",\n\"@wordpress/components\": \"file:../components\",\n\"@wordpress/compose\": \"file:../compose\",\n...\nI don't have enough technical knowledge to propose a proper solution inside Lerna. However, I'm happy to discuss all possible improvements in the flow on a higher level. If we agree on the future steps and will have a list of tasks to work on, we will try to help find volunteers to implement them. We plan to discuss publishing packages again next week. For us, the most pressing part is having a reliable way to publish to npm using 2FA enabled for publishing.. ",
    "ntwb": "FYI: When I was attempting to publish the @wordpress packages with Lerna a couple of days ago I had switched my npmjs.com 2FA profile to authorization only mode, fully expecting that supplying a valid npm OTP token at the start of the lerna publish command would be sufficient, it wasn't, it still failed to publish the packages due to OTP time out.\nShould this have worked? I was logged in, checked by npom whoami, should have I logged out and back in again first to allow npm to pick up my new 2FA profile of authorization only mode?. Thanks @ThisIsMissEm, the reply on that thread states the issue has been resolved. It's a shame the bot keeps closing (what I consider anyway) valuable issues \ud83d\ude22 \np.s. Unfortunately, I've not the time to contribute to this project even though I'd love to. I'd rather have a solution that doesn't involve package-lock.json, I added a note in #1235 on how to stop generating package-lock.json files for Lerna that seems to be working currently.\nSo much so I plan on removing the lockfiles from the @wordpress/packages repo next week.\nVia https//github.com/sindresorhus/ama/issues/479#issuecomment-310661514\n\n\"Lockfiles for apps, but not for packages. Lockfiles are great for apps where you want a controlled reproducible environment, but for packages this doesn\u2019t make much sense. The package-lock.json files in dependencies are ignored, so the lockfile only applies when users run npm install in the package repo. If you use a lockfile for packages, your local dependency tree will not match the dependency tree of users having your package as a dependency. This can potentially cause problems if one of your package dependencies breaks your package in a patch release. The lockfile will prevent you from seeing the problem locally, but it will affect your users.\u201d\n\nI went further and wrote about this further on my blog last week Lockfiles break semantic versioning. I'm pretty new to Lerna so I'm not sure of the ramifications of this method below or if Lerna is expecting to find a lock file or if Lerna is just calling npm and it is npm creating the lock files, anyway, it would be great to clarify in the docs somewhere on how Lerna utilises lock files.\nI'm looking to remove package-lock.json files from a Lerna repo, I've just created a test Lerna repo and by adding a .npmrc in the root, and also in each packages root not lock files were created:\n\u2022 .npmrc\npackage-lock=false. Awesome, thanks, @noherczeg, closing this per the above as it has already been fixed in #1225 \nFYI: #1225 is currently in the v3.0.0 milestone. What I'm wondering is, and will test later, is if the following workflow is a valid way of publishing packages:\n\nRun lerna updated to check what packages require publishing.\nUpdate each of the above packages changelog.md with the version to be published.\nRun lerna version to update each packages version for publishing.\nRun lerna publish from-git\n\nThe above workflow would remove all the manual tasks out of the publish workflow, it would be no guarantee that lerna publish from-git would complete within 30 seconds for npm's OTP, but I'm also ~thinking~ hoping that even if publishing failed part way through at this point it would be easier to recover from.. ",
    "fson": "I\u2019ve been using the NPM_CONFIG_OTP variable, but it fails often because the one time password expires before publishing finishes.\nUntil full support for npm 2fa has been implemented in Lerna, would it be reasonable to change the options npm/Yarn is spawned with stdio = 'inherit'? This would allow npm/Yarn to show the normal prompt for OTP when authentication fails due to 2FA. Right now it\u2019s not shown because the commad runs with a non-TTY input stream.. ",
    "imaman": "What's the status of the https://github.com/lerna/lerna/tree/one-time-password-to-rule-them-all branch? I keep doing local patches of it as it is currently the only solution for using lerna with OTP. @ricmoo: there's a branch called \"one-time-password-to-rule-them-all\" which contains a proposed solution. \nLink to the branch: https://github.com/lerna/lerna/tree/one-time-password-to-rule-them-all\n. @ricmoo: The actual fix is very small so I selectively copied only this part. Unfortunately, I am away from my laptop for the next 10 days so I can't send you a copy-and-paste snippet.. ",
    "ricmoo": "Can you point me in the right direction as to which file I need to update/patch to change the studio to \"inherit\"?\nThanks!! :). I see. That may explain why the export technique isn\u2019t working for me either then?\nIs there any existing work around? Even if it involves patching the bin/lerna?. @imaman Can you share your technique for patching? :). @busticated Oh, I meant specifically what lines and files to modify for the purpose of OTP w/ Lerna. :)\n@imaman Is that safe? I checked it out the other day and it was 114 commits behind... :s (or do you mean just copy the otpplease and co?). @imaman No worries, that helps a tonne. I'll copy it over (maybe experiment with a smaller test repo first). :). ",
    "busticated": "@ricmoo implementation details aside, i've had a ton of success with: https://github.com/ds300/patch-package. yep, works great. you need to use the publishConfig field in your package.json file (docs) instead of simply \"private\": true\nhere's what i use:\njson\n\"publishConfig\": {\n    \"access\": \"restricted\"\n}. fwiw, running lerna exec --no-bail -- npm run postinstall produces the expected results:\nDetected VS Code engine version: ^1.23.0\nFound minimal version that qualifies engine range: 1.23.0\nFetching vscode.d.ts from: https://raw.githubusercontent.com/Microsoft/vscode/7c7da59c2333a1306c41e6e7b68d7f0caa7b3d45/src/vs/vscode.d.ts\nvscode.d.ts successfully installed!\nedit: lerna run postinstall also produces the expected results (same as above). I haven\u2019t tried but I can if that\u2019ll be helpful \ud83d\udc4d. @ThisIsMissEm ok, here's what i found:\nv3.0.0 - lerna bootstrap at the top-level does not run postinstall in packages, lerna run postinstall doesn't appear to work\nv3.1.0 - same behavior as v3.0.0\nv3.2.0 - process.env.npm_package_engines_vscode is NOT set when running lerna bootstrap, lerna run postinstall works (yields this result)\nv3.3.0 - same behavior as v3.2.0\nv3.4.0 - same behavior as v3.2.0\nv3.4.3 - same behavior as v3.2.0\n . @evocateur without using lerna bootstrap, how do you install package dependencies and link cross-dependencies?. does that hoist everything to the root? honestly confused on what the\u201dhappy path\u201d is these days. \nmy packages require non-dev deps to be installed locally (not hoisted to the root) since vscode essentially zips up node_modules and includes them in the published extension.\nas it is today using learna v2, I\u2019m able to install all root and package deps via npm I at the top-level which also runs postinstall routines in each package. this bug was filed b/c this no longer works in V3. happy to do all of this using new / different lerna features but I don\u2019t know what those might be . > I'm not sure I understand why you're even using lerna for what sounds like something that very much wants to be its own repository.\nall dev deps are shared, test tooling is common, vscode extensions ship individually and together as a \u201cpack\u201d and are versioned together . to be clear, you don't owe me anything. i'm not entitled to your free labor. i'm thankful that this helpful tool has been made freely available to me and the broader community. further, as even just a casual observer i've been impressed by how successful you all have been lately in cleaning up some of the bit rot / legacy weirdness that had built up over the years here. i know how hard that work is so again, thank you :pray:\nfor my issue, there are likely a number of work-arounds i can explore - including simply sticking w/ v2 for now. i'd be interested in pointers on where i might dive in as well as learning more about the technical hurdles / risks around fixing my issue. naively, it seems since lerna run postinstall does the right thing, getting lerna bootstrap to do the same would be fairly straightforward but what do i know \ud83e\udd37\u200d\u2642\ufe0f \nas to the notion that lerna bootstrap is legacy to be avoided and that my use-case is outside what lerna was designed for, i can't help but quote from the README\n\nSplitting up large codebases into separate independently versioned packages is extremely useful for code sharing. However, making changes across many repositories is messy and difficult to track, and testing across repositories gets complicated really fast.\n\nthis is exactly why i opted to use lerna and to date it has served me well \ud83d\udc4d more specifically, it allows me to share all my dev dependencies and test tooling (e.g. fixtures, linting, etc), as well as providing easy publishing and orchestration (via lerna run and lerna exec) of my packages which are versioned together. if there are specific gotchas / \"you might have a bad time if\" type things here, i (and i imagine most everyone) would appreciate seeing them called out.\n\nWhat can Lerna do?\nThe two primary commands in Lerna are lerna bootstrap and lerna publish.\nbootstrap will link dependencies in the repo together. publish will help publish any updated packages.\n\n\ud83e\udd14\ud83e\udd37\u200d\u2642\ufe0f\n\ud83d\ude4f \u2764\ufe0f \ud83d\udc4d . > Thanks for being patient with me\nlikewise \ud83d\ude4f \ud83d\udc4d \ni can't say it enough: super-big thanks for all the work you and your fellow maintainers do here \u2764\ufe0f . perhaps related \ud83d\udc49 https://github.com/lerna/lerna/issues/1429. ",
    "LeoAJ": "@evocateur I tested if I made code like this it will work\njs\nconst lernaJsonLocation = (\n      // path.resolve(\".\", ...) starts from process.cwd()\n      path.resolve((cwd || \".\"), \"lerna.json\")\n);\njust remove this line\njs\nfindUp.sync(\"lerna.json\", { cwd })\nand find-up dependency.\nBut I wonder what is the initial intention to do like that at first place, since this is the only place to use find-up module in the entire project.\nif this solution looks fine, I am ready to submit PR to fix this anytime, thanks.. ",
    "ben-z": "@evocateur Do hotfixes get a release right away as 2.5.1 or do users have to wait for 2.6.0/3.0.0?. Good work @evocateur @marionebl!. ",
    "lancetharper": "This ended up being an issue with babel-loader. The packages were ignored in node_modules but were being reprocessed by babel from the source pacakges dist folder.\nResolution: add /(dist)/ to the exclude array of babel-loader in the webpack config.. ",
    "GabeAtWork": "I'm having a related issue when using lerna run --parallel with scripts that run for a long time (typically, watch modes).\nUnder some conditions, those scripts have a very high log output. After a while, the lerna command exits with this error: \nlerna ERR! MaxBufferError: stdout maxBuffer exceeded\nlerna ERR!     at PassThrough.stream.on (/path/to/my/code/node_modules/@lerna/child-process/node_modules/get-stream/index.js:41:19)\nlerna ERR!     at emitOne (events.js:121:20)\nlerna ERR!     at PassThrough.emit (events.js:211:7)\nlerna ERR!     at addChunk (_stream_readable.js:263:12)\nlerna ERR!     at readableAddChunk (_stream_readable.js:246:13)\nlerna ERR!     at PassThrough.Readable.push (_stream_readable.js:208:10)\nlerna ERR!     at PassThrough.Transform.push (_stream_transform.js:147:32)\nlerna ERR!     at PassThrough.afterTransform (_stream_transform.js:88:10)\nlerna ERR!     at PassThrough._transform (_stream_passthrough.js:42:3)\nlerna WARN complete Waiting for 4 child processes to exit. CTRL-C to exit immediately.\nlerna ERR! lerna stdout maxBuffer exceeded\nerror Command failed with exit code 1.\nI've never had this issue when launching the individual commands, even with the same high output. Having read other issues in the repo (particularly #278), I also tried the --stream option, but it didn't seem to work either.\nAs it is, those lerna runs get interrupted after a while.\nExecutable | Version\n-- | --\nlerna --version | ^3.4.1\nnpm --version | 6.4.1\nyarn --version | 1.10.1\nnode --version | 8.12.0\nOS | Version\n-- | --\nMacOS | 10.13.6. @starandtina not quite, I've simply worked around it by reducing the output of the individual commands.\nI don't think the run command is particularly well suited to watch modes as it is now (for instance, command interruption doesn't quite work as you'd hope, see this Stackoverflow question). For day to day work, I mostly use run for build commands, and directly run watch-based dev commands for the packages I work on.. ",
    "starandtina": "@GabeAtWork Did you resolve this issue? I had encountered the same problem with you. It worked before but it's broken now. I had different use case with you, @GabeAtWork. I run into this issue when I published the packages into my private registry.\n\nExecutable | Version\n-- | --\nlerna --version | 3.2.1\nnpm --version | 6.4.1\nnode --version| 10.14.2\n. I had found the root cause for my case. I had demo for some packages and they had their own node_modules, I guessed the node_modules directories also have been packed which caused the error.. ",
    "tommedema": "When using yarn as npm client you are incorrectly passing the -- flags. This is deprecated and returns a warning.. ",
    "engfragui": "@alan-agius4  This --changelog-preset option to customize --conventional-commits is exactly what I need right now, since my organization hosts code on bitbucket as well (I know...).\nHowever this new and exciting option doesn't seem to work for me. I'm using lerna v2.9.0 (but I also tried with v2.6.0), yarn 1.3.2, node 8.\nI'm trying to run lerna publish this way: lerna publish --skip-npm --skip-git --conventional-commits --changelog-preset=angular-bitbucket but I get the same result of lerna publish --skip-npm --skip-git --conventional-commits (same command, but without --changelog-preset option).\nIt makes me think that --changelog-preset gets completely ignored, also because I get the same result even if I do --changelog-preset=foo-bar or passing any other invalid changelog preset.\nShould I add anything to my package.json and/or install additional yarn dependencies?\nThank you for your help\nUpdate: the result I'm referring to is that a CHANGELOG.md gets generated with the right commit messages, but the links to the commits are github-style and not bitbucket-style.. Thank you both. I just updated my previous comment, clarifying what result I expect (CHANGELOG.md with bitbucket-style links), and what is the one I'm actually getting (CHANGELOG.md with github-style links). \nFrom your answers it looks like the bitbucket preset should correctly be passed to conventional-changelog already in the 2.6+ versions and I should get a bitbucket-style changelog, which unfortunately is not what's happening at the moment.\nI tried installing https://www.npmjs.com/package/conventional-changelog-angular-bitbucket and then lerna publish again, but it made no difference.. Thank you @alan-agius4, your comment was extremely helpful.\nIn the end it was sufficient to add:\n\"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://bitbucketsson.betsson.local/projects/WF/repos/obg.ngx.packages\" // note, this should not end with `.git` and this is typically the url you use to browse the repo.\n  },\nto the root level package.json (in my case there was no need to add it into each of the packages/package.json).\nMy mistake was that I didn't have \"repository\" at all. For some reason I assumed it was not needed since the CHANGELOG.md that was generated via lerna publish had links to my bitbucket repo already without me having to specify \"repository\" (even though they were github-style and not bitbucket-style like I wanted).\nJust for the sake of future readers, the few lines that need to be add to lerna.json are:\n\"command\": {\n    \"publish\": {\n      \"conventionalCommits\": true,\n      \"changelogPreset\": \"angular-bitbucket\"\n    }\n  }\n(\"publish\" needs to be inside \"command\").\nThank you again for your help, I would buy you lunch for a week if I could.. ",
    "koenpunt": "There's 1 test failing but I don't believe that one's related to my changes... ",
    "osher": "thanks.. maybe related to #1116 ?\nin both cases I worked with a local git repo without a remote. more info.\nI connected a remote to the GIT, you can see it here https://github.com/osher/eval-lerna\nI did changes to logger, and expected only logger to be published, since semver rules would allow the other projects to accept the new logger version.\nI switched between indipendent and fixed to see the differences - no differences were observed.\nlerna updated kept saying that all of them needs publishing.\nWhen I did a change to orm - then orm was updated, together with web-one and web-two, while logger is not published.\nThis is sad. when I publish a patch to a lib I do not expect all the web projects to be published.\nIt might make sense only when publishing with --exact wihch (AFAI understand) does not allow range-markers (caret/tilde). But as a default - it's sins to the main premise that caught my attention to this project.\nI hope this can be resolved or at least explained \ud83d\ude05 \n. That is not true.\nIf the package.json has not changed - and there is no reason that it should change - then this is a version that is needlessly published, a and a needless noise in the changelog entry. \nIf the current policy in package.json accepts the new patch - there is no reason to change it.. ",
    "priver": "Then the command should fail and exit with nonzero error code.\nWe have the same issue when git remote is not in ssh known_hosts list. We run lerna inside CI service and can't determine build status due to this issue.. ",
    "mleonh": "While 1.1.0-alpha.0-deadbeef should work, shouldn't it be 1.1.0-alpha.0+deadbeef, since deadbeef is the build metadata in this case?. I just published 1.1.0-alpha.0+deadbeef to Artifactory (v5.3.2) as a test, and it seems to like that just fine.. ",
    "corsen2000": "This is causing us problems as well. Is it acceptable to modify:\nhttps://github.com/lerna/lerna/blob/58635642ae929d38985b0a458e19eb4f4d89ccba/commands/publish/index.js#L331\nBy adding a non-numeric character such as a H in front of the hash so that it is not interpreted as numerical in any case, which should avoid the issue?. This is causing us problems as well. Is it acceptable to modify:\nhttps://github.com/lerna/lerna/blob/58635642ae929d38985b0a458e19eb4f4d89ccba/commands/publish/index.js#L331\nBy adding a non-numeric character such as a H in front of the hash so that it is not interpreted as numerical in any case, which should avoid the issue?. ",
    "NMinhNguyen": "\nor ask the user whether they'd like to proceed\nIf non-empty, throw a ValidationError like the other git checks.\n\nI probably have a somewhat complex setup, but may I request that if such validation is added, then for there to be an option to opt out?\nMy use case is that I'd like to have a packages/my-package/index.js file that's basically identical to React's own index.js file, but before publishing I'd like to replace it with this index.js file that resides in a different (but also tracked) packages/my-package/npm folder. However, I would not want this to be committed back to the repo, but simply used when publishing only.\nNow, I understand the reasoning in https://github.com/lerna/lerna/issues/901#issuecomment-350423290, but being able to publish from a custom packages/my-package/build or packages/my-package/dist directory (kinda what React does) would allow me to just copy the npm folder into build without causing unstaged changes \ud83d\ude03 . ",
    "nicolo-ribaudo": "\nno: Allow lerna to specify certain folders/globs that are independently versioned while in fixed mode (we made an experimental folder for this)\n\nWouldn't something like this work?\n(Disclaimer: I have never looked at a lerna.json file)\njson\n{ \n  \"mode\": \"fixed\",\n  \"overriddes\": {\n    \"packages/babel-plugin-proposal-*\": {\n      \"mode\": \"independent\"\n    }\n  }\n}. ",
    "jsamr": "@evocateur The fix you're working on looks great :-)\nBut for my specific case, I need to add lerna run preprublish postinstall script to fix #1021 ; that works gracefully. . @zenflow I am currently using yarn but you confirm you can reproduce with npm right ?\n. ",
    "wizzy25": "@evocateur Thanks for the response. I thought it didn't exist already. ",
    "chrisblossom": "@evocateur thanks for the quick response! I do not believe this is a legacy feature. I agree that library authors are often better off using a peerDependency, but there are legitimate reasons for doing this: https://github.com/yarnpkg/yarn/issues/2874#issuecomment-285182867 and https://github.com/yarnpkg/yarn/issues/2874#issuecomment-294706316 both describe my use case.\nTo be clear, are you saying this should be fixed with npm5's \"linklocal\" behavior? I would be open to starting an npm issue if that would help.. ",
    "massa-man": "Hi All,\nI am going to ask the question here since this is the closer conversation that I have seen around the issue we have. I searched around a lot for an answer but all I could find was a bit ambiguous.\nWe use Lerna as a monorepo for a lot of our packages, but we also have external projects and repos that are not in the monorepo. Most of these other repos consume (depend) on the packages developed within the monorepo. It is impossible for use to put ALL our repos/projects under the monorepo. As an example, imagine this:\n\nRepo 1: frontend-packages (lerna monorepo with React components and other packages)\nRepo 2: frontend-app (React app that uses a ton of components from the monorepo)\n\nWhen developing on frontend-app, it is extremely time consuming, every time anything changes on the monorepo, to publish the packages form lerna to npm, upgrade the packages in the frontend project and test, only to find out it doesn't work and we need to do the process all over again (not to mention the versioning of all these packages which can end up being 1.0.354, etc.\nSo, when we develop, we checkout the monorepo and then clone the frontend repo into the packages folder in the monorepo. The frontend is excluded in gitignore in the monorepo, and it is also marked as private=true.\nThe main problem we have is when we publish, if we do not use --skip-git then the publish fails because the frontend project folder is ignored (and it is on a separate git repo), but when we use --skip-git, then we loose all the versioning in git for all the packages we actually DO want to track and version in git correctly, plus the publish function leaves a bunch of files changed and uncommited which developers need to remember to manually commit themselves after each publish.\nSo, long question short, is there any way to have a package (or a folder inside the monorepo) be part of the bootstrap process (i.e. link its dependencies to the local packages), but completely ignored from the publish process? The frontend project will never be part of the monorepo (it is a completely standalone project), so I am not concerned about not versioning it and then trying to publish it in the future...\nHope this explanation makes sense, and hopefully someone can push me in the right direction here.. ",
    "zenflow": "Problem analysis\nThe problem is actually with the \"addFile\" operations (see 54, 55 & 56 in my lerna-debug.log) that happen just before the failing \"commit\" operation. The \"addFile\" operations are failing silently (i.e. they don't manage to add the files, but they don't cause an exception which they should)\ngit add <file> does not work when <file> is an Windows-formatted absolute path; it must be a Linux-formatted (i.e. path separator must be forward-slash, not back-slash) path, and it cannot be an absolute path starting with e.g. C:/.\nThis is only an issue with certain versions/builds of Git. It doesn't affect, for instance git version 2.8.1.windows.1 (portable version of Git installed with SourceTree), but it does affect, for instance git version 2.14.1 (edit: corrected copy-paste error) (version of Git installed with Cygwin).\nProposed solution\nSimple solution would be to make <file> relative to the Current Working Directory and change back-slashes to forward-slashes. That would fix my problem, and make the \"addFile\" operation more portable.\n. ## Problem analysis\nThe problem is actually with the \"addFile\" operations (see 54, 55 & 56 in my lerna-debug.log) that happen just before the failing \"commit\" operation. The \"addFile\" operations are failing silently (i.e. they don't manage to add the files, but they don't cause an exception which they should)\ngit add <file> does not work when <file> is an Windows-formatted absolute path; it must be a Linux-formatted (i.e. path separator must be forward-slash, not back-slash) path, and it cannot be an absolute path starting with e.g. C:/.\nThis is only an issue with certain versions/builds of Git. It doesn't affect, for instance git version 2.8.1.windows.1 (portable version of Git installed with SourceTree), but it does affect, for instance git version 2.14.1 (edit: corrected copy-paste error) (version of Git installed with Cygwin).\nProposed solution\nSimple solution would be to make <file> relative to the Current Working Directory and change back-slashes to forward-slashes. That would fix my problem, and make the \"addFile\" operation more portable.\n. @tivac What version of Git are you using?. @tivac What version of Git are you using?. Updated title and original comment, since I did some more investigation and found that the shell (e.g. cmd.exe vs bash) is not relevant; the version of Git I'm using is relevant.. Updated title and original comment, since I did some more investigation and found that the shell (e.g. cmd.exe vs bash) is not relevant; the version of Git I'm using is relevant.. Thanks @tivac . This supports my hypothesis that the problem is with Git versions that do not have the .windows bit in the version name.. Thanks @tivac . This supports my hypothesis that the problem is with Git versions that do not have the .windows bit in the version name.. @evocateur Added some commits.\nI think my changes to the two new tests helps to clarify the difference (there's only 1 line different between them now, const file = \"foo\"; vs const file = path.resolve(cwd, \"foo\");) though the 1st test might be a bit gratuitous. We could probably do without it, as long as we still have the 2nd test. Should I just remove the 1st test or is it ok to remain?\nI pulled in 'slash' for coercing the paths to POSIX format. If you look at the source, it's a very light weight package, made just for what we need it for, and no more. And it helps to more explicitly declare the intent of what we're doing. Think this is acceptable?\nAlso added one more test to make sure Windows paths are always transformed to POSIX paths for git add.\n. @evocateur Added some commits.\nI think my changes to the two new tests helps to clarify the difference (there's only 1 line different between them now, const file = \"foo\"; vs const file = path.resolve(cwd, \"foo\");) though the 1st test might be a bit gratuitous. We could probably do without it, as long as we still have the 2nd test. Should I just remove the 1st test or is it ok to remain?\nI pulled in 'slash' for coercing the paths to POSIX format. If you look at the source, it's a very light weight package, made just for what we need it for, and no more. And it helps to more explicitly declare the intent of what we're doing. Think this is acceptable?\nAlso added one more test to make sure Windows paths are always transformed to POSIX paths for git add.\n. I just happened to come across the same thing. \nThis may be somewhat of an issue that belongs to NPM, since npm test seems to be a valid command even in packages that have no test script. In these cases, it is NPM that echos \"Error: no test specified\".\nWhile I don't like the word \"Error\" being echoed when there just isn't any test, at least it returns with a 0 exit code (indicating the command was successful).\n+1 for inspecting the package.json to check if there actually is a test script. @sveinburne Correct. \nI can also confirm that this issue shows itself when using just npm run test (without lerna) ...\n```\nC:\\Users\\mbrunetti\\Documents\\git\\mtdirect-monorepo\\modules\\server-start>npm run test && echo if this is echoed, it means npm run test exited with a 0 exit code\n\n@manitoulin-transport/server-start@2.0.0 test C:\\Users\\mbrunetti\\Documents\\git\\mtdirect-monorepo\\modules\\server-start\necho 'Error: no test specified'\n\n'Error: no test specified'\nif this is echoed, it means npm run test exited with a 0 exit code\n```. @chinchang Yes, I believe that's the idea. Check https://github.com/lerna/lerna/pull/1033#issuecomment-335894690 for a bit more info.. @appsolutegeek Excellent question! Thank you for bringing up this discussion, as I had similar concern about best practice\n\nInitially, this seemed a great idea but then I saw some posts saying that we should be ONLY deploying libraries to NPM repos (even though mine is private).\n\nDo you happen to have a reference for this? I recall reading a comment saying that lerna is for packages, not apps. But a package can be a library or an app, so I don't think they meant that you shouldn't use lerna for apps, just that lerna is not tailored for apps specifically.\nI myself don't see any problem with lerna repos containing apps, and it is super convenient to be able to version some apps together, with their common dependencies (library packages).\nI look forward to hearing if this practice is not recommended for whatever reason!. @evocateur \nIn the previous test only cwd is absolute; the file path is still relative.\nIn this one both are absolute.\nYour line of code is equivalent to mine, i.e. path.resolve(path.resolve(\"test\"), \"foo\") (your code but with cwd inlined) returns the same value as path.resolve(\"test\", \"foo\").\nShould I change it?. @evocateur \nWould it be worthwhile to pull in one of these dependencies?\n~~https://www.npmjs.com/package/path-posix~~ (edit: not what we're looking for)\nhttps://www.npmjs.com/package/ensure-posix-path (no README but tests look good). ",
    "BMalaichik": "@MatthD do you deal with linked(npm link) packages?. ",
    "rickmak": "I discovered in npm doc: https://docs.npmjs.com/misc/config#environment-variables You may give a try to NPM_CONFIG_OTP.. Sometime NPM_CONFIG_OTP is not working as the publishing take too long. The provided OTP just expired.\nI am currently using lerna exec 'npm publish' and wait for the OTP prompt.. ",
    "vvo": "Was not able to use npm_config_otp, it does not change anything. Maybe because I am also using npmClient: yarn and yarn does not support that?. cc @neoziro is this working for you? What's the command line you are using exactly?. Indeed that ease the process, here's how to do it:\nsh\nnpm profile disable-2fa\nnpm profile enable-2fa auth-only\nthx @neoziro . ",
    "neoziro": "NPM_CONFIG_OTP=123456 lerna publish\nBut I finally turn two factor authentication on npm to auth-only and I am very happy \ud83d\udc4d.. ",
    "freaktechnik": "This seems to be the same issue as #1091 except that it is less specific about how to solve the issue?. ",
    "tkrotoff": "With lerna >= v2.7, lerna run uses npmClient from lerna.json. Before v2.7, lerna were always using npm even if npmClient specified yarn.\nThis is due to commit 625df6784dd65a5dd0fc646be7d95ba053ae9b40\nI confirm the problem with lerna v2.6: Error: no test specified\nWith lerna v2.7 and \"npmClient\": \"yarn\", it's even worse:\nexecute callback with error\nlerna ERR! Error: Command failed: yarn run test\nlerna ERR! error Command \"test\" not found.\nand lerna stops (with v2.6 it didn't stop - was just an echo message).\n. @alexeyraspopov thx for the notification. @evocateur ok, thx. ",
    "martijnthe": "\nThe package candidates are filtered for the target script before they are topographically sorted. I don't know how you'd do it the other way around, but it sounds complicated.\n\nFiltering first and then sorting sounds like the problem indeed.\nWhy is sorting first, then filtering more complicated?. ",
    "Slapbox": "Is there any update on this? I had figured Webpack would pick up these changes and symlinks: false leads to practically everything in my project becoming unresolvable.. @evocateur I have no doubt 99% of people have no trouble, but mind if I ask what OS you're on? I don't know if it's relevant in this particular case, but I've learned that choosing to develop on Windows as I am is a sure sign of a masochist.. Yep they are. Lerna handles them remarkably well though. Thanks for your responses.. @evocateur - As @dan-kez mentioned, this is enormous in the transition period. It can represent a substantial impediment to getting to that final point where you don't need aliases.\nIs there anything people can use during this transition period to make moving to lerna easier? Moving an entire codebase into maintainable lerna modules is tough to begin with, and it's tougher still when you need to work-around this too.. I guess you can't pass the argument directly to lerna. This works to ignore scripts: \nlerna bootstrap -- --ignore-scripts\nMy issue is resolved, but I'm going to leave this open in case the maintainers feel this could use clarification in the docs.. Thanks for providing some clarity on that @evocateur. Always appreciate your help.. ",
    "willclarktech": "Also applies to lerna init (lerna overwrote my package.json to replace my preferred prefix with ^).. ",
    "gitowiec": "I have the same issue with yarn. I added .yarnrc with save-prefix \"\" in it in the root of my monorepo. After issuing lerna add typescript --dev I got \"typescript\": \"^3.2.2\" in devDependencies but the version should be \"3.2.2\". How to gain this behaviour from lerna?. Thanks, I didn't know that. Somehow I learnt that it is possible to mention all packages in comma separated list - I don't remember where I read it. Another thing is I never used such glob patter as your example, I limited myself to the single or double asterisk patterns. Got to learn that more.. ",
    "bongofury": "The missing part was added with this commit:\nhttps://github.com/lerna/lerna/commit/aa793ca06011f9376201390522e9d40006f87443\nSee the complete section code attached.\nhow_bootstrap_works_md.txt\n. ",
    "markabrahams": "Thanks for your reply @evocateur.  I agree with what you're saying here - I don't think I sufficiently removed ambiguity in my initial write-up.\nThe packages I was referring to in the \"set of packages as a unit of monorepo change\" was a set of deployable tarball \"packages\" - these being post-git, post-lerna, post-NPM - nothing to do with lerna at that stage apart from carrying the package-specific lerna/packages.json \"independent\" version number as the identifier for the version of the tarball.  And it's these versions that the CI/CD system uses to deploy the tarball \"packages\".\nThe \"known good state\" I was referring to was the set of tarball packages deployed to our destination environments by the CI/CD system (assuming they were good before the current release!), and not a repo-level state, which as you rightly point out is expressed by yarn / NPM lock files.\nSo I guess what I envision is pulling a lerna-managed version of the overall repository at build time through as the version number for the set of independently-versioned tarballs that I would deploy as a unit.  Deploying and rolling back a set of packages as a unit is an important advantage of a monorepo for mind.  I can certainly version the overall tarball package sets elsewhere (in fact I currently have a script do exactly that), but the overall monorepo version (a la the \"fixed\" monorepo) seemed a tantalizing fit to version sets of deployable tarballs for CI/CD.\n. ",
    "christianevans214": "@mike-robertson did you ever find a solution for this? Our team's been struggling with the same thing.... @evocateur Ahh I see! Should that be affecting publishing that occurs even with exact dependency fields? \nprerelease would potentially work for us, the only problem I can see is that we're publishing canary/prereleases in our CI builds, and we have multiple CI builds running in parallel as we trigger app dev deployment on merging into our develop branch. In this scenario, 2 engineers may unknowlingly try to publish the same npm prerelease version at the same time.. Sorry for the delayed response here! I guess what it comes down to for me is \nif (this.options.canary) {\n        this.logger.info(\"canary\", \"Resetting git state\");\n        // reset since the package.json files are changed\n        this.repository.packageConfigs.forEach(pkgGlob => {\n          GitUtilities.checkoutChanges(`${pkgGlob}/package.json`, this.execOpts);\n        });\n      }\nthis block of code in publishPackagesToNpm. Would it be possible to have some flag that doesn't revert the package.json files so that my circleCI builds would know how to appropriately point to the canary releases?. Yeah that's fair! I actually followed the comment you left above on using --cd-version and came up with a stop-gap that seems to be working for us. In our CI build, we run:\nlerna publish --yes --skip-git --exact --cd-version=prerelease --preid=alpha.${COMMIT_SHA:0:6}\nWe get the latest git commit injected into our CI build anyways, so we can dynamically generate a preid similar to --canary, and all our package.jsons are updated accordingly \u00af\\(\u30c4)/\u00af. ",
    "mike-robertson": "@christianevans214 I ended up doing something similar, but not quite as good. I'll definitely be modifying my process to be more in line with what you posted. I think the solutions raised here solve the use case without the need for the original ask, so I am closing this.. ",
    "fengyuanchen": "Just found the solution: should use skipGit and skipNpm instead of skip-git and skip-npm in lerna.json.\nDo you plan to support both camelCase and kebab-case?. ",
    "rileylnapier": "me too\n. I ended up using jest from the root dir instead which was the command I\nwanted colors\nOn Thu, Feb 8, 2018, 1:14 AM Bruno Sampaio notifications@github.com wrote:\n\nis there any workaround for this?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/lerna/lerna/issues/1168#issuecomment-364048898, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AGsUqO3zNyEYoxZkAw55KBZ9u0PgimLeks5tSrrtgaJpZM4REvU9\n.\n. \n",
    "bensampaio": "is there any workaround for this?. That doesn't seem to work. I get the exact same result as before.. @evocateur could you reopen this issue, please? Your solution didn't fix my problem.\nPlease let me know if you need more information.. Because I have multiple projects inside of the same monorepo that are totally unrelated. Besides that, their webpack config is dependent on process.cwd() which must return the project root folder and not the monorepo root folder. Maybe there is a way to go around that but I think it would make my config even more complex.. Sorry I wasn't very clear. There is a relationship between most of the packages in my monorepo. Except the ones that have a webpack configuration. Let's say I have application A and B. Those two have a webpack.config.js and depend on several other packages in the monorepo but don't depend on each other. . ",
    "mAiNiNfEcTiOn": "@evocateur unfortunately no. The only colors passed to the terminal are the 'labels' defining which process is logging.. So my solution was to run lerna exec -- npm run <task>. That runs it as a TTY which retrieves the colors.. ",
    "jonaskello": "@mAiNiNfEcTiOn Thanks for the workaround, works fine for me with mocha and jest :-). Maybe this should be documented somehow?. The only drawback of the workaround that I can find is that lerna run will only run the script for the packages that have it, while for lerna exec -- yarn run foo, the foo script needs to be in every package to not fail with an error.\nI can also confirm that for me lerna run <task> --stream will only colorise the lables. Perhaps a new issue about --stream removing colors should be opened if it was supposed not to remove colors?. Yes, --colors works with both mocha and jest, thanks for explaining that! \ud83d\udc4d \n\nRun tests from the root, which is half the point of lerna in the first place.\n\nI'm not sure what this means. Do you mean have one test script in the root package.json that runs tests for all packages rather than putting test scripts in each sub-package's package.json?. I have all devDependencies in the root package.json and I am using yarn workspaces so I have hoisting. But I still have scripts in each package.json that is run through lerna run. Are you suggesting to move all scripts (test, start, build etc.) to the root package.json too, so the sub-packages have nothing in the script section? In which case, how do you run the scripts? Using lerna exec? (Sorry for going off-topic a bit, just curious to understand the recommendations).. Got it, thanks for taking the time to explain :-).. ",
    "paradite": "Encountered a very strange behaviour with jest, passing --color to yarn test makes jest output color when executed via lerna. Nothing wrong.\nHowever, if I pass --colors to yarn test, which is documented by jest(https://jestjs.io/docs/en/cli.html#colors), then it outputs color, but also makes the process impossible to terminate (pressing control+C goes back to the terminal, but jest continues to run and output to the terminal).\nI wonder if --color is being interpreted different by lerna or yarn?\nMy lerna command is like this:\nlerna exec --scope \"$package\" -- yarn test \"$extra_args\" --color\nlerna exec --scope \"$package\" -- yarn test \"$extra_args\" --colors. ",
    "satyamgupta": "@paradite It works for me somehow, I can terminate the process and output also stops \ud83e\udd14 . ",
    "gluons": "Excuse me!\nWhere is the documentation about scripts/<lifecycle>.js?\nI can't find it.. @wereHamster https://docs.npmjs.com/misc/scripts. ",
    "kyrisu": "@evocateur small correction to what you have said:\n\nthe prepublish (if it exists) in every package to be published is always run (by npm/yarn), because we are just calling npm publish/yarn publish in those directories \n\nIt seems that you are calling publish with --ignore-scripts so it won't run prepublish.\nAny reason why that's there and how to overwrite it?\n. @evocateur you are right. I was thinking about prepublishOnly - it only runs on npm publish (duh!). So as you mentioned in the previous message it should be probably replaced with prepare script.. ",
    "wereHamster": "npm pack doesn't run prepublishOnly.\nI have a monorepo with multiple packages that are written in typescript, and in prepublishOnly I need to run the compiler (tsc). Currently my canary releases on npm only contain a package.json because the files are not compiled. Do I need to manually run the prepublish scripts before calling into lerna?. Where can I read more about prepack lifecycle?. @evocateur I've run into a similar issue because changes outside of the individual package folders (repo-global typescript configuration for example) were not considered when lerna was checking if anything has changed since the last release. There is a lot outside of the package folders that has an influence on the resulting npm release. Examples include: the nodejs version, globally installed typescript, and even lerna itself! So it'd be nice if there was an easy way to force a canary build regardless of the git history that's affecting one particular folder. Ideally lerna would run everything up to creating the tgz and check if its checksum is different then the previous release on npmjs.com.. @evocateur if reliable detection of changes is out of lerna's scope, it should provide a flag so that users can force the publishing. I'd like to publish \"canary\" releases on each push into my github repo (so that every commit is available for download from npmjs.com), regardless of whether lerna believes that a release is warranted or not.. ",
    "scythargon": "+1 here. ",
    "Mati365": "Any updates?. ",
    "raijinsetsu": "Having the same issue. When using \"npm\", \"lerna bootstrap\" correctly creates/updates the package.lock file. When using \"yarn\", \"lerna boostrap\" does not create/update yarn.lock.. The functionality is already a part of Lerna - it has a built-in template that is uses when creating new packages. It's just not exposed to users.\nYour argument would be to remove the \"lerna create\" command completely and rely on existing templating tools?. ",
    "MarkoCen": "This issue still existed with lerna v3.13.1. ",
    "necolas": "Hey, I only just started using lerna in a very simple monorepo and ended up with something that works for me without needing a --dry-run option. Here's what I am currently doing:\n\nRelying on yarn workspaces.\nOnly using lerna to handle version bumps across package.json in a script.\nDoing the git commit and publishing myself.\n\nSo that means the way I'm using lerna atm is like this:\nlerna publish --skip-git --skip-npm --repo-version ${version} --yes\nIt could be simplest (and minimal work) to add a line to the docs about lerna publish --skip-git --skip-npm being \"safe\" and similar to a dry-run option, in case anyone else is looking for that kind of thing. Thanks!. ",
    "amorenew": "Very sad a good open source who doesn't have maintainers \nUnfortunately, I am not expert in this field.. ",
    "jalal246": "Is there any solution yet to this issue?\nAs @gziolo suggested I used npm link scripts/foo in root but not sure if this this the best way to do it. Also it works locally but failed with Travis build  Missing write access to /home/travis/build/username/project/node_modules/foo\n. ",
    "akaRem": "I upgraded some packages and it works.. ",
    "sarfata": "Still think this ticket was valuable. The doc should explain a bit how things work under the hood to make debugging easier.. ",
    "mbrowne": "Wasn't working for me either. I think in my case it was because it defaults to npm (as I later realized) and I'm using yarn. In any case, when I learned about yarn workspaces I realized that's a better option since I'm using yarn. This worked for me:\nlerna bootstrap --npm-client=yarn --use-workspaces\n\nWith this in package.json as described here:\njson\n  \"workspaces\": [\n    \"packages/*\"\n  ]. ",
    "equinusocio": "What about skipping all git commands and do it manually? What are the git commands that \u2014skip-git skip?. ",
    "mflodin": "We also had this issue. We updated to the latest version of yarn (1.5.1) and then it worked. Before we had 1.3.2, so not sure which version it actually got fixed in, but at least now it works.. ",
    "dballance": "Adding another data point. I do believe this is a yarn issue, and not a lerna issue. \nhttps://github.com/yarnpkg/yarn/issues/4451#issuecomment-410384607. ",
    "PepijnSenders": "This is what my lerna.json looks like:\njson\n{\n  \"lerna\": \"2.5.1\",\n  \"npmClient\": \"yarn\",\n  \"useWorkspaces\": true,\n  \"version\": \"1.32.0\",\n  \"commands\": {\n    \"publish\": {\n      \"ignore\": [\n        \"__tests__\",\n        \"entry.js\",\n        \"*.md\"\n      ]\n    }\n  }\n}\nI would like lerna to ignore entry.js just in the root and not in any other subfolder, which is not possible at the moment. For example:\npackages/\n  my-package/\n    entry.js // ignore this one\n    src/\n      entry.js // don't ignore this one\nI also meant the root folder of the package and not the root folder of the project \ud83d\ude05, updated that in the description.. That might work and I will test it later, but looking at the code it looks like it won't.\nif (this.options.ignore) {\n      changedFiles = changedFiles.filter(\n        file => !_.find(this.options.ignore, pattern => minimatch(file, pattern, { matchBase: true })),\n      );\n    }\nThe code basically tries to find the first true in the array of patterns. In my case it will always find one true since it's entry.js will be true for all files in all folders. If subsequently !*/entry.js is false it won't mean much to the outcome.. ",
    "RoystonS": "I've added a PR that fixes this behaviour: #1199 . ",
    "jasonbarone": "What is the recommended method to handle circular dependencies? There are plenty of use cases where this makes sense, but I'm having trying finding a system that works. My example is similar to OP. My monorepo has tooling packages used for the development of the components in the same monorepo. Is there a way to do that without running into the circular graph, which is full of issues?. Yea these are great points. For what it's worth, my use case is a UI dev canvas similar to Storybook.js, where the UI tool is also built using the UI elements created with the UI tool kit itself. The tool and UI components follow the same design system. For now I've opted to dupe the UI elements into the UI dev tool. Not ideal though. . ",
    "mrozbarry": "Is this actually available to use? I'm on lerna 2.8.0, and get the following:\n```\nlerna info version 2.8.0\nlerna info versioning independent\nlerna info Checking for updated packages...\nlerna info Comparing with initial commit.\nlerna info Checking for prereleased packages...\n? Select a new version for @myorg/component (currently 0.0.1) Patch (0.0.2)\nChanges:\n\n@myorg/component: 0.0.1 => 0.0.2\n\n? Are you sure you want to publish the above changes? Yes\nlerna info publish Publishing packages to npm...\nlerna ERR! publish Retrying failed publish: @myorg/component\nlerna ERR! publish Ran out of retries while publishing @myorg/component Error: Command failed: yarn publish --tag latest --new-version 0.0.2\nlerna ERR! publish error An unexpected error occurred: \"Can't answer a question unless a user TTY\".\nlerna ERR! publish [1/4] Bumping version...\nlerna ERR! publish info Current version: 0.0.2\nlerna ERR! publish [2/4] Logging in...\nlerna ERR! publish info npm username: mrozbarry\nlerna ERR! publish info npm email: **@gmail.com\nlerna ERR! publish info If you think this is a bug, please open a bug report with the information provided in \"/home/mrozbarry/code/work/repo/packages/component/yarn-error.log\".\nlerna ERR! publish info Visit https://yarnpkg.com/en/docs/cli/publish for documentation about this command.\nlerna ERR! publish\nlerna ERR! publish     at Promise.all.then.arr (/home/mrozbarry/code/work/repo/node_modules/execa/index.js:236:11)\nlerna ERR! publish     at \nlerna ERR! publish     at process._tickCallback (internal/process/next_tick.js:188:7)\nlerna ERR! execute callback with error\nlerna ERR! Error: Command failed: yarn publish --tag latest --new-version 0.0.2\nlerna ERR! error An unexpected error occurred: \"Can't answer a question unless a user TTY\".\nlerna ERR! [1/4] Bumping version...\nlerna ERR! info Current version: 0.0.2\nlerna ERR! [2/4] Logging in...\nlerna ERR! info npm username: mrozbarry\nlerna ERR! info npm email: alex.barry+npm@gmail.com\nlerna ERR! info If you think this is a bug, please open a bug report with the information provided in \"/home/mrozbarry/code/work/repo/packages/component/yarn-error.log\".\nlerna ERR! info Visit https://yarnpkg.com/en/docs/cli/publish for documentation about this command.\nlerna ERR!\nlerna ERR!     at Promise.all.then.arr (/home/mrozbarry/code/work/repo/node_modules/execa/index.js:236:11)\nlerna ERR!     at \n```\nbash\n$ yarn -v\n1.3.2\n$ npm -v\n5.5.1\n$ node -v\n8.9.1\n$ $(yarn bin)/lerna -v\n2.8.0\nFrom my yarn-error.log, lerna invoked:\nArguments:\n  /home/mrozbarry/.nvm/versions/node/v8.9.1/bin/node /home/mrozbarry/.nvm/versions/node/v8.9.1/bin/yarn publish --tag latest --new-version 0.0.2\nWhich looks correct to me.. Okay, so I sorted things out. Turns out, yarn doesn't actually ask for your password/create a token on an npmjs account until you do a user-specific thing, ie publish. The problem is it does it via prompt, and only during publish (afaik).\nBasically, for yarn login, it will ask for my npmjs username and email address, but doesn't go any further. I may open a request with the yarn team for something like yarn authorize or yarn login --with-password. The only reason I found this out is by creating a new single-component npm package, and running through the steps and saw the prompt running the same set of commands that lerna would.\nIs there any reason why lerna can't forward the prompts/stdin? I'd be okay with yarn not being ran in parallel if that's the only blocker.. ",
    "houfio": "That works just fine, thank you!. Looks like I found another use case. I'm fairly sure there is no other way to do with without creating node scripts.\njson\n    \"clean\": \"lerna exec -- rimraf \\\\$LERNA_PACKAGE_PATH/lib\",\n    \"typings\": \"lerna exec -- tsc --declaration --outDir \\\\$LERNA_PACKAGE_PATH/lib\",. ",
    "craigbilner": "@evocateur I've tidied it up. @evocateur fyi - looks like it's to do with the way the tests borrow each others files so the tests can't run in parallel. Running in band works. Would be a larger rewrite of the tests.. ",
    "honzajavorek": "It would be great if Lerna automatically dealt with this problem as it propagates to many packages using Lerna. Otherwise we who care about licensing need to go to every single monorepo maintainer and to ask them to add a custom mechanism to copy the licenses into the individual packages, which is, let's say, a long run.. @evocateur I think I can work on this. If you have any advice on what to do or where to start, let me know.. My proposal would be:\n\nRight before publishing the package, look whether there is a license present in the sub package.\nIf yes, do nothing. If not, look whether there is a license in the root package.\nIf yes, copy the license to the sub package, temporarily. On success or failure remove the temporary file.\nIf there is no license in the sub package nor in the root package, print a warning the published package is not going to be licensed properly.. @evocateur @krotscheck I think this is ready now! \ud83c\udf89 \ud83d\ude05 . Thanks! This is great. Now I\u2019ll try to finish the other PR I have here. I\ndidnt see activity so I paused my efforts for a moment.\n\nI usually try to be humble in comments of my work, but the Windows\ndebugging was a week of hell I went through, so I\u2019m really proud I was able\nto finish and fix it :))\nHopefully its gonna make contributing easier for everyone involved as the\nbuilds are once again informative. Maybe existing open PRs should rebase on\ntop of the current master to see if they actually pass.\nOn Thu, 5 Jul 2018 at 00:18, Daniel Stockman notifications@github.com\nwrote:\n\nApologies for the long delay in review, I really appreciate Windows help!\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/lerna/lerna/pull/1441#issuecomment-402566360, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AARTMb4_lyvFujXUBkKjgaRD78-hhBvNks5uDT9KgaJpZM4UQG8l\n.\n. @evocateur I think this is ready for a review now.. @evocateur That sounds a bit like a turn-down, although in https://github.com/lerna/lerna/issues/1213 you seemed to agree with the idea and we even agreed on how this could be implemented. After investing quite some time into the PR, I'm a bit confused now. Do you suggest a different implementation approach or are we revisiting whether this should be a part of Lerna at all?\n\nAlmost every project using Lerna (and that's most of the projects utilizing monorepos, and that's a lot of packages in the npm ecosystem) is suffering an issue where the sub packages are not distributed with a full license text when the maintainers only provide the full license text file in the root of the monorepo. While the intention is clear (all the packages are licensed under the root license), the result is debatable. The distributions of packages published to npm are without the license text, thus more strict company lawyers could prohibit using such pacakges or deem them as problematic and requiring special treatment. That brings burden to those wanting to use such packages.\nWithout full license text, the sub packages are not properly licensed, even though the license field contains a valid SPDX identifier. Some licenses, such as MIT, even explicitly require packing the text together with the distribution, it's written in the text of the license: https://github.com/babel/babel/pull/7308#issuecomment-367615152 Effectively, this way the source code of most Lerna-distributed packages on npm is unlicensed and cannot be used by anyone else (or, to be more precise, by anyone who cares about licensing).\nnpm does include the license file automatically in case it's present, so this problem wouldn't exist if the project were not monorepos. As Lerna is a tool to help maintainers to deal with specifics of having a monorepo, and especially with specifics of publishing the sub packages, I think this feature should be a core feature of the tool. Moreover, the behavior we discussed in the initial issue requires no additional work to the maintainers. It follows their intentions without having to care about anything, while it automatically solves the licensing problem for all the package users. Factoring the feature out to a separate tool doesn't solve the widespread issue as it requires the users of the packages to file issues on the projects they have problems to use, and it requires maintainers to make additional steps and to modify their project life cycle to accommodate the license distribution.\n. @evocateur Thank you for maintaining Lerna despite the time constraints, for your initial guidance on how to implement this and for merging this! \ud83d\ude80 . @evocateur Thank you for maintaining Lerna despite the time constraints, for your initial guidance on how to implement this and for merging this! \ud83d\ude80 . My attempt in 620ae91 was done as follows:\n\nAdd the library manually to the sub package.json\nnpm install in the root (writes new package-lock.json)\n\nCould be wrong, dunno \ud83d\ude42 \n. ",
    "nemoDreamer": "@evocateur I'm getting double CHANGELOG output in all my CHANGELOG.md files.\nI have a root package.json file that's private and un-named, for scripts, etc...\nBut:\n```diff\ndiff --git a/packages/component-svg-icon/CHANGELOG.md b/packages/component-svg-icon/CHANGELOG.md\nindex 4f7919e..43b5e9f 100644\n--- a/packages/component-svg-icon/CHANGELOG.md\n+++ b/packages/component-svg-icon/CHANGELOG.md\n@@ -3,6 +3,28 @@\n All notable changes to this project will be documented in this file.\n See Conventional Commits for commit guidelines.\n+\n+# 1.0.0 (2018-03-22)\n+\n+\n+\n+\n+## 0.2.1 (2018-03-21)\n+\n+\n+\n+\n+# 0.2.0 (2018-03-15)\n+\n+\n+### Features\n+\n+* component-svg-icon: add SvgIcon component (334cd71), closes #60\n+\n+\n+\n+\n+\n \n ## 0.2.1 (2018-03-21)\n```\n\npackage.json:\njson\n{\n  \"license\": \"MIT\",\n  \"private\": true,\n  \"scripts\": {\n    \"lint:js\": \"eslint --ext=.js,.jsx\",\n    \"lint:json\": \"prettier -l\",\n    \"lint:md\": \"remark --frail\",\n    \"lint:js:all\": \"yarn lint:js .\",\n    \"lint:json:all\": \"yarn lint:json '**/*.json'\",\n    \"lint:md:all\": \"yarn lint:md .\",\n    \"lint\": \"yarn lint:js:all && yarn lint:json:all && yarn lint:md:all\",\n    \"format:js\": \"yarn lint:js --fix\",\n    \"format:json\": \"yarn lint:json --write\",\n    \"format:js:all\": \"yarn lint:js:all --fix\",\n    \"format:json:all\": \"yarn format:json '**/*.json'\",\n    \"format\": \"yarn format:js:all ; yarn format:json:all\",\n    \"commit\": \"git-cz\",\n    \"publish:lerna\": \"lerna publish\",\n    \"publish:lerna:next\": \"yarn run publish:lerna --cd-version=prerelease --pre-id=next\",\n    \"storybook\": \"start-storybook -p 9001 -c .storybook -s .storybook/public\",\n    \"storybook:clean\": \"rm -rf build/storybook\",\n    \"storybook:build\": \"yarn storybook:clean && build-storybook -s .storybook/public -o build/storybook\",\n    \"storybook:deploy\": \"yarn storybook:build && storybook-to-ghpages --existing-output-dir build/storybook\",\n    \"test\": \"jest -c .jest/config.js\",\n    \"test:ci\": \"yarn test --no-cache --all --ci\"\n  },\n  \"devDependencies\": {\n    \"@commitlint/cli\": \"^6.1.2\",\n    \"@commitlint/config-conventional\": \"^6.1.2\",\n    \"@storybook/addon-knobs\": \"^3.3.15\",\n    \"@storybook/addon-options\": \"^3.3.15\",\n    \"@storybook/addon-storyshots\": \"^3.3.15\",\n    \"@storybook/react\": \"^3.3.15\",\n    \"@storybook/storybook-deployer\": \"^2.3.0\",\n    \"babel-core\": \"^6.26.0\",\n    \"babel-eslint\": \"^8.2.2\",\n    \"babel-jest\": \"^22.4.1\",\n    \"babel-plugin-transform-class-properties\": \"^6.24.1\",\n    \"babel-plugin-transform-export-extensions\": \"^6.22.0\",\n    \"babel-plugin-transform-object-rest-spread\": \"^6.26.0\",\n    \"babel-preset-env\": \"^1.6.1\",\n    \"babel-preset-react\": \"^6.24.1\",\n    \"babel-runtime\": \"^6.23.0\",\n    \"commitizen\": \"^2.9.6\",\n    \"commitlint\": \"^6.1.2\",\n    \"cz-lerna-changelog\": \"^1.2.1\",\n    \"eslint\": \"^4.18.1\",\n    \"eslint-config-airbnb\": \"^16.1.0\",\n    \"eslint-config-prettier\": \"^2.9.0\",\n    \"eslint-import-resolver-webpack\": \"^0.8.4\",\n    \"eslint-plugin-import\": \"^2.9.0\",\n    \"eslint-plugin-jsx-a11y\": \"^6.0.3\",\n    \"eslint-plugin-prettier\": \"^2.6.0\",\n    \"eslint-plugin-react\": \"^7.7.0\",\n    \"husky\": \"^0.15.0-rc.8\",\n    \"jest\": \"^22.4.2\",\n    \"lerna\": \"^3.0.0-beta.8\",\n    \"lint-staged\": \"^7.0.0\",\n    \"object-assign\": \"^4.1.1\",\n    \"prettier\": \"^1.11.0\",\n    \"promise\": \"^8.0.1\",\n    \"prop-types\": \"^15.6.1\",\n    \"raf\": \"^3.4.0\",\n    \"react\": \"^16.2.0\",\n    \"react-dom\": \"^16.2.0\",\n    \"remark-cli\": \"^5.0.0\",\n    \"remark-preset-lint-consistent\": \"^2.0.1\",\n    \"remark-preset-lint-recommended\": \"^3.0.1\",\n    \"resolve\": \"^1.5.0\",\n    \"whatwg-fetch\": \"^2.0.3\"\n  },\n  \"workspaces\": [\n    \"examples/*\",\n    \"packages/*\"\n  ],\n  \"config\": {\n    \"commitizen\": {\n      \"path\": \"./node_modules/cz-lerna-changelog\"\n    }\n  },\n  \"commitlint\": {\n    \"extends\": [\n      \"@commitlint/config-conventional\"\n    ]\n  },\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"lint-staged\",\n      \"commit-msg\": \"commitlint --edit\"\n    }\n  },\n  \"lint-staged\": {\n    \"linters\": {\n      \"**/*.{js,jsx}\": [\n        \"yarn format:js\",\n        \"git add\"\n      ],\n      \"**/*.json\": [\n        \"yarn format:json\",\n        \"git add\"\n      ],\n      \"**/*.md\": [\n        \"yarn lint:md\",\n        \"git add\"\n      ]\n    },\n    \"concurrent\": false\n  }\n}\nlerna.json:\njson\n{\n  \"lerna\": \"2.9.0\",\n  \"packages\": [\n    \"examples/*\",\n    \"packages/*\"\n  ],\n  \"version\": \"1.0.0\",\n  \"npmClient\": \"yarn\",\n  \"useWorkspaces\": true,\n  \"conventionalCommits\": true,\n  \"forcePublish\": true,\n  \"registry\": \"https://xxx.xxx.xxx/artifactory/api/npm/xxx\"\n}. @flipactual did you ever cross-post? I'm not seeing a reference here.\nIt does seem to be an issue with conventional-commits, tho:\nconventional-changelog --preset angular:\n```\n\n (2018-08-24)\nBug Fixes\n\ncomponent-button: fix button sizing and spacing (f1cb3dd)\n\nBREAKING CHANGES\n\ncomponent-button: These changes affect the presentation - but not the API - of the Button component:\nThe default .875em font size (14px @ 16px root font size) has been pushed down to the label element so it does not affect internal spacing or sizing of icons.\nThe height of the button is now 36px (at 16px root font size) to correspond to HIG guidelines\nThe height of icons inside of buttons will match their default size (either 24px or 16px square)\nWhen a button has an icon and a label, the left padding is reduced to provide better visual balance\n```\n\nBut:\nconventional-recommended-bump --preset angular:\npatch\n?!\nWill cross-post if I don't find an existing issue over there.... Hi @evocateur ,\nWith Lerna v2.11.0, I'm still getting 2 fires of preversion and postversion.\nExcuse the dirty repro here:\nMy root-level lifecycle scripts:\n- preversion/version/postversion: dump lerna~ then a package-version into root-level .version\nMy package-level lifecycle scripts:\n- preversion/version/postversion: dump lerna~ then current package-version into package-level .version\nWith my repo at version 0.24.0, after running lerna publish --skip-npm, I get the following:\nRoot-level .version dump:\n(You'll notice that the package's version is behind Lerna's in the first fire of preversion, as I'd expect.)\nPREVERSION\n  \"version\": \"1.0.0\",\n  \"version\": \"0.24.0\",\nPREVERSION\n  \"version\": \"1.0.0\",\n  \"version\": \"1.0.0\",\nVERSION\n  \"version\": \"1.0.0\",\n  \"version\": \"1.0.0\",\nPOSTVERSION\n  \"version\": \"1.0.0\",\n  \"version\": \"1.0.0\",\nPOSTVERSION\n  \"version\": \"1.0.0\",\n  \"version\": \"1.0.0\",\nPackage-level .version dump:\n(Same for package-level dump)\nPREVERSION\n  \"version\": \"1.0.0\",\n  \"version\": \"0.24.0\",\nPREVERSION\n  \"version\": \"1.0.0\",\n  \"version\": \"1.0.0\",\nVERSION\n  \"version\": \"1.0.0\",\n  \"version\": \"1.0.0\",\nPOSTVERSION\n  \"version\": \"1.0.0\",\n  \"version\": \"1.0.0\",\nPOSTVERSION\n  \"version\": \"1.0.0\",\n  \"version\": \"1.0.0\",\nNOTE: the last POSTVERSION addition in each file is only git staged, but not added to the tagged v1.0.0 commit.\nAlso: the lifecycle scripts only run if I have a version script... Took me forever to figure that one out, since I was only interested in a postversion... \ud83e\udd23 \ud83d\ude22 . ... sigh ... don't mind me ...\nI saw the march merge date and assumed this was released.\nWorks fine on alpha.3! (Having weird git issues w/ beta.21. Will create an issue if it doesn't exist yet.). I'd also banged my head against this... I'm the only one on my team that this is happening for. I tried so many different things: pegging revisions (but we already use yarn.lock...), installing a specific version of git, etc...\n...but yes: I've got a custom format.pretty in my config... \ud83d\ude22 \ud83d\ude2d . ",
    "BMillman19": "@evocateur why do you warn against this pattern? what negative side effects might we see?. ",
    "jure": "Ah! Finally found out what's causing our issues :)\nContext: we use prettier to format our JSONs, keep them consistent across many packages. When lerna bumps the version, it also does things like:\n-  \"keywords\": [\"pubsweet\", \"cli\"],\n+  \"keywords\": [\n+    \"pubsweet\",\n+    \"cli\"\n+  ],\nThis is not how prettier wants JSONs to look. Because of --no-verify now being used in lerna, the release commit comes in \"malformatted\". And because we're using lint-staged, whenever you merge a branch in that has these changes, and you do conflict resolution (which is often), prettier then fixes all these JSONs back to what it thinks they should look like. And then we release again, and the cycle is replenished.\nWhat's the reasoning behind making the release commit using --no-verify? What makes it special? I couldn't gather from the issue description what the usecase was. Would you be open to a PR that makes this optional (either way)?. Fair enough, package.jsons being excluded from prettier makes sense in that light. We do have complex/nested configuration in there that's not package manager configuration (e.g. jest), that should be consistently formatted. But actually that would happen on every lerna release anyway (through JSON.stringify), so it's not likely to become an issue.\nThanks for the reasoning!\nUpdate: An additional data point that supports this thinking https://github.com/prettier/prettier/issues/3671\n. We're facing an issue with a similar cause. Our config goes something like:\n{\n  \"packages\": [\"packages/*\", \"packages/components/!(test|config)\"],\n  \"command\": {\n    \"publish\": {\n      \"conventionalCommits\": true,\n      \"message\": \"chore(release): publish\"\n    }\n  },\n  \"version\": \"independent\"\n}\nAnd after the publish, the process exists with:\nlerna ERR! Error: Command failed: git checkout -- packages/components/!(test|config)/package.json\nlerna ERR! error: pathspec 'packages/components/!(test|config)/package.json' did not match any file(s) known to git.\nlerna ERR! \nlerna ERR!     at makeError (/Users/juretriglav/.nvm/versions/node/v10.13.0/lib/node_modules/lerna/node_modules/execa/index.js:174:9)\nlerna ERR!     at Promise.all.then.arr (/Users/juretriglav/.nvm/versions/node/v10.13.0/lib/node_modules/lerna/node_modules/execa/index.js:278:16)\nI imagine the !(test|config) is a glob that git doesn't understand, but globby does?. This has been fixed since.\nEdit: Ah, I think I doubly messed up: 1. I meant to say that our reproduction of this has been fixed (using !glob in the packages config). Don\u2019t know if it\u2019s been resolved for the original issue. 2. I shouldn\u2019t have responded to Mr. Stale Bot over there, if the issue is no longer relevant for us. Apologies!. ",
    "scisco": "@evocateur do you know when this PR is going to be published?. ",
    "Magellol": "@evocateur I'd be happy to help improving the documentation. I've been facing similar issues when removing or upgrading a dependency comes into the game. Although, I'm not sure what are the current best practices for removing and upgrading. If you could provide some bullet points of what needs to be done, I can come up with some documentation for them.. ",
    "aweber1": "Thanks for the bullet points! For the \"remove\", however, I ended up having to do this: \n(using example module name \"my-module\")\n Edit the my-module/package.json, removing the dependency from either devDependencies or dependencies\n lerna clean --yes --scope my-module\n* lerna bootstrap in the root\nusing v2.9.0 and not using hoisting. ",
    "kamleshchandnani": "Teaching people in a team to run multiple command to just remove one package is an extra overhead \ud83d\ude22. Is it in plan to implement this anytime soon? @evocateur . ",
    "greypants": "I'm running into a similar issue where changelog updates are duplicating info, and the most recent tag is NOT being used for the comparison. Check it out:\n\nIf the current version is 4.0.0, why is it Comparing with v3.3.1? What does lerna look at for the compare? The 4.0.0 tag definitely exists locally, in github and npm (private). Any ideas on how this might happen?. @evocateur Same results with v3.0.0-beta.20 - shows the correct current version, but for whatever reason, compares with an older one.. So we're narrowing this down. My coworker, @claytuna and I are both tagging releases, and for whatever reason, Lerna only respects my tags.\n1) I manually created a tag v3.3.2 and pushed it to github\n2) I ran lerna publish and \"Comparing with v3.3.2\" correctly logged\n3) @claytuna tried steps 1 and two with a new tag v4.0.1\n4) He rean lerna publish and lerna is comparing with MY last tag instead of his newly created one: \"Comparing with v3.3.2\"\nBoth our tags show up when running git tag -l, and appear in Github.\nAny ideas about how different users might affect what's happening here?. That was it! Thanks!\nRunning git describe --abbrev=0 showed the issue. The issue happened because we were creating tags manually, and they either were associated with the wrong commit, or weren't annotated. The original issue happened when a coworker accidentally published to his fork instead of origin, then we tried to manually create the tags on origin.. For anyone else running into this, this also occurs if you do your --conventional-commits release on a branch, and then squash and merge the release commit with master. This is because the original commit hash that you're tagging is re-written to a different hash when you either squash and merge or rebase and merge, thus orphaning the tag. \nRunning git log --oneline --decorate=short, you should see your release commits appropriately tagged like so:\n\nIf you've accidentally orphaned a tag (no tag appears next to your commit like above), you can git checkout the release commit hash, then git tag -af <your tag here> to force update an annotated tag to point to the right hash again. Then git push -f origin/master --tag <your tag here> to update the tag on GitHub.\n. ",
    "Zyst": "Is appveyor broken ATM? If you see the diff this is just a README change.. ",
    "aruntk": "@evocateur Made the changes, please check. And sorry for the delay. . @evocateur Any issues in the pr? It'd be helpful for contributors if you could comment the reason for closing a pr.. @evocateur Resolved the conflicts. Please check.. @evocateur Sorry for that. Fixed in the latest commit.. @evocateur made the changes.. ",
    "skyrpex": "What is confusing to me is how is the Lerna repo itself doing this? I don't see this on the lerna.json file:\n\"command\": {\n    \"bootstrap\": {\n      \"npmClientArgs\": [\"--no-package-lock\"]\n    }\n  },\nyet the modules don't contain the package-lock.json. Oh! Thanks for explaining it to me. I didn't know that the bootstrap step wasn't needed when using file: specifiers.... ",
    "Inlustra": "Haha, to be honest, these requirements evolved a little later. We started with the mono repo and coupled with gulp it seems to be working well enough\nWe ended up just custom writing the \u2014since with the package name and current version tag in package.json. This issue has since been solved.\nTaking @evocateur advice and moving this into one pipeline has helped us just fine.\nWe ended up moving towards a single pipeline for all the libraries, when we do split the teams, we'll end up with 2 pipelines - each team having ownership of their own monorepo of packages. \nThis also disallows the other team from linking and working in the package that they don't own, which I think is desired behaviour \n\nIn any case, it is fair to request that a scoped diff use independent tags instead of the globally most-recent. Until recently this wasn't possible because lerna used lightweight tags, but it's tractable now.\n\nThis may still be valid but as I seem to be the only one having asked for it, I doubt it's really necessary so I'll close the issue for now \ud83d\ude04 . @evocateur Sorry, the reason I deleted my comment was that it was badly phrased and actually I wanted to just ignore one of the packages.\nSolution for that was to just use scope \ud83d\ude04 \nlerna exec npm i --since --scope @inlustra/*. @evocateur We\u2019ve ended up working around it - but out of curiosity, what\u2019s the use case for such a thing? \ud83d\ude0a\nI feel like I\u2019m missing something, I guess the naming confused me \ud83d\ude05 . We're also seeing this issue, the odd thing is that it's seems somewhat intermittent for us. \nWe were on version 3.0.0-beta.20 but since moving to 3.0.6 we've started getting this error. . @evocateur Perhaps an issue with older versions of npm? \nOur CD pipeline was on npm v4.3.0 and node v6.9.5\nWe run a custom login script, that just logs in using regular npm login\nUsername: ***********\nPassword: ***********\nEmail: (this IS public) *****@*********.com\nLogged in as *********** on ***Redacted Registry***.\nThe immediate step after that is: \nlerna publish --yes --cd-version patch --registry ***redacted***\nBut after adding --no-verify-registry --no-verify-access we had a completely different issue. Maybe not be the place for this discussion mind you:\n```\nlerna ERR! npm publish --ignore-scripts *****-0.0.35.tgz stderr:\nnpm ERR! Cannot read property 'algorithm' of undefined\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /Users/build/.npm/_logs/2018-08-17T13_49_48_196Z-debug.log\n```\nWe ended up having to revert back to 3.0.0-beta.20 which is working fine once again.\nLooks as though this maybe be an issue with npm itself?\nhttps://github.com/npm/npm/issues/16723. ",
    "clakech": "workaround:\n```\nlerna exec -- npm install --production. The command in the doc seems not working with my config:\nlerna bootstrap -- --production --no-optional\nLe lun. 5 f\u00e9vr. 2018 \u00e0 17:39, Alexey Raspopov notifications@github.com a\n\u00e9crit :\n\nThe docs for bootstrap https://github.com/lerna/lerna#bootstrap command\nshows the way to do it.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/lerna/lerna/issues/1243#issuecomment-363141892, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABHXhtO0B6mS53eHVDgRmunC0_uvXiG_ks5tRy6lgaJpZM4RzEQ9\n.\n\n\n-- \nCyril Lakech\n. So lerna does not follow the NodeJS ecosystem guidelines and a core feature of npm. \nDeploying dev dependencies in production is very often useless. We should avoid to deploy useless files on production environment.. ",
    "martpie": "@evocateur I've been looking at different issues on Lerna to get this right, and I think there is a misunderstanding of what Lerna is/does.\nMy usecase if the following: \n\nlerna bootstrap\nbuild my app (let's say a Next.js app)\n\nin another CI job:\n\nget the build from the previous job\nat runtime, my app still needs to access some modules in node_modules obviously\nusually, in classic apps, npm run install --production does that perfectly (and it won't work with this usecase as the package we want to deploy has multiple other packages as deps)\nthen I run the app\n\nI am not sure if lerna bootstrap -- --production --no-optional installing devDepedencies in all my packages is a feature or a bug.\nMaybe we're doing things terribly wrong, but could you enlighten us? Or maybe the docs could be more clear about what Lerna is not, as it looks I am not the first person asking for this. :). > Lerna manages the publishing of several packages from the same repository\nThank you for the explanation, makes a lot of sense. Much appreciated.. ",
    "CaptEmulation": "For anyone that ends up here when they can't publish on Windows because of a password protected pubkey.   Try running start-ssh-agent which if installed will prompt for password once and then keep an ssh-agent running for further git commands.. ",
    "RagnarLuthbRok": "If you want to wOrkwith Lerna you must contact #Gigabo or any others from the team itself.\nGood Luck BolBol !!!!. Welcome BrO \ud83e\udd47 . ",
    "bolbol201288": "Thanks any way :). ",
    "diegovilar": "That's odd. Here it works as expected. Tags pushed to the repository are, as they should be, snapshots of the entire repo, but each packages published to the registry contains only the files related to each package.. ",
    "igloosi": "closing. reading it, it follows standard git tag . thanks for the version lifecycle explanation @evocateur \nthe rest is not really what I'm asking. Not building scss into css or including an output directory, rather publishing scss files in the package. As packages is also my src directory I only want to autoprefix scss files that are published.\nI guess i could do the transformation, publish the package  and the revert git status, but I assume that next time lerna would flag that the package has changed compared to published tag.. normally you would, but we need to provide the support for the browser matrix we've defined. that's tricky. postcss-scss requires new destination or new file name. either way @import sass statement would need to be rewritten for npm publishing (or publish from sub folder)\n. forgot to link back enough. they seem to have switched off independent mode now. https://github.com/material-components/material-components-web/tags?after=v0.22.0\nSay example this repo:  https://github.com/igloosi/test\nEnd goal is independently releasing packages that are not dependent of others.\nSay we update breadcrumbs to v3. If we have an all package that has breadcrumb as a dependency, we'd want to bump that.\nBut we wouldn't want to bump say fieldset (as default, fixed lock does i guess) if it hasn't changed\nHaving done some testing, it's still possible to have lerna check if each package has been updated against single global git tag.\nUpdate:\nOk, so i tested with default mode. Version bump is fine with interdependent components. But say you bump packageA from 0.0.1 to 0.1.0. Lerna will bump the package dependent on it (packageB) it to the same version. It will also set the global tag to 0.1.0. \nIn the meantime packageC is still on 0.0.1 as it hasnt changed. Once that package changes (say its a patch), lerna will want to bump it to 0.1.0 but what you really want is 0.0.2 \nHope that is clearer. yeah. tagging and comparing works fine with independent mode and single git tag so closing this. related, if not the same https://github.com/lerna/lerna/issues/1066. ",
    "compulim": "Although package-lock.json is not published to NPM, it is committed into GitHub. Every time a fresh Git clone + lerna bootstrap will result in a big modifications to all package-lock.json files under /packages/ folder.\nIn order to \"mitigate\" the side-effect, we will need to go under every package and do anything that will let npm touch the package-lock.json file, for example, npm install a package.\nIt just sounds kind of strange when lerna bootstrap is meant to install dependencies, but in fact, it modified some of the committed files.. All devDependencies in root package.json, that's an interesting metaphor I didn't try out yet.  \ud83d\udc4d . I think @evocateur has his point. One might not able to keep all dependencies the same version across multiple projects, but all tooling dependencies (a.k.a. devDependencies) should be the same.\nIf it is a monorepo actively maintained by the team, version bumping is a regular chore the team should take. Reducing number of versions also means better security.\nIMHO, all dependencies under the same monorepo should converge over time. If a team decided not to pay their technical debts on time, especially toolchain that help the team everyday, good luck to you.\nIf you like the project and want to grow it, contribute. If you feel it's too opinionated, make it diverse by contributing. Otherwise, fork it or leave it.\nAll tools are made to be opinionated and biased to a level of degree. That's diversity.. @evocateur Your work looks great, looking forward to it. Will close mine.. Looks like v3.0.0-alpha.3 still repro.\nC:\\Users\\JohnDoe\\Source\\Repos\\mypackage>node_modules\\.bin\\lerna add gulp@next --dev --scope=mypackage\nlerna info version 3.0.0-alpha.3\nlerna info versioning independent\nlerna info scope mypackage\nlerna ERR! TypeError: Invalid comparator: next\nlerna ERR!     at Comparator.parse (C:\\Users\\JohnDoe\\Source\\Repos\\mypackage\\node_modules\\semver\\semver.js:690:11)\nlerna ERR!     at new Comparator (C:\\Users\\JohnDoe\\Source\\Repos\\mypackage\\node_modules\\semver\\semver.js:674:8)\nlerna ERR!     at C:\\Users\\JohnDoe\\Source\\Repos\\mypackage\\node_modules\\semver\\semver.js:840:12\nlerna ERR!     at Array.map (<anonymous>)\nlerna ERR!     at Range.parseRange (C:\\Users\\JohnDoe\\Source\\Repos\\mypackage\\node_modules\\semver\\semver.js:839:13)\nlerna ERR!     at Range.<anonymous> (C:\\Users\\JohnDoe\\Source\\Repos\\mypackage\\node_modules\\semver\\semver.js:781:17)\nlerna ERR!     at Array.map (<anonymous>)\nlerna ERR!     at new Range (C:\\Users\\JohnDoe\\Source\\Repos\\mypackage\\node_modules\\semver\\semver.js:780:40)\nlerna ERR!     at Function.intersects (C:\\Users\\JohnDoe\\Source\\Repos\\mypackage\\node_modules\\semver\\semver.js:1306:8)\nlerna ERR! lerna Invalid comparator: next. \u2764 it! We are experimenting publishing every master branch pushes to my-package@master, this fix will be super helpful.. I also like the idea of \"enforce --hoist in lerna.json\" because it would help to reduce human mistakes (forget to add --hoist).\nPlease feel free to close this bug as dupe if you have the \"enforce\" bug opened. In the meantime, I will tell my team to change to command.bootstrap.hoist property. :). ",
    "danny-andrews-snap": "\nIt's kind of irrelevant from the npm perspective, however, as package-lock.json files are never published and are never consulted by consumers when the package is installed. Thus, it's an unfortunate side effect, but makes no difference in practice.\n\nThis isn't entirely true. Many people use a checksum of the package-lock.json file as a cache key in CI to speed up dependency installation. If you only ran npm install (and not lerna bootstrap) at the top level, and checked in package-lock.json, then when you run in CI, a different package-lock.json will be generated. This is very unexpected behavior.. Just learned about this yesterday! Thanks!. This still isn't working properly. Now, I'm getting different results based on wether I run npm install + lerna bootstrap or npm ci + lerna bootstrap.\nnpm install + lerna bootstrap results in packages in package-lock.json having:\njson\n\"resolved\": false\nnpm ci + lerna bootstrap results in packages in package-lock.json having:\njson\n\"resolve\": \"\"\nI think this issue was closed prematurely. Regardless of whether or not it's \"irrelevant\" from npm's perspective, lerna mangling package-lock.json files like this is incorrect behavior and should be fixed. Even while using npm ci, I still rely on the consistency of package-lock.json for caching purposes. Furthermore, npm ci does not error out in this case, since package.json and package-lock.json are not out of sync as far as the installed dependencies are concerned, so I have to do a manual check to ensure the working directory is clean.\nBest,. ",
    "jmaher409": "Thanks for the response @evocateur. I completely agree that changes should describe only the package in question. For our particular use case, we use the mono repo to organize code within private packages inside our repo. There are 20+ packages but only 3 are actually published to npm. Some of the private packages contain code that use imported in the public ones. I would like changes from those packages to to appear in the public packages. I think this still adheres to the requirement that changelogs reflect the relevant package changes. Another option, of course, would be to also publish the internal packages so that those changelogs can be discovered. However that seems like it is forcing us to expose the existence of the internal packages even though the fact that they are there is an implementation detail.. ",
    "tsuberim": "Sorry, didn't see that, does exactly what I want.. ",
    "afenton90": "Related to https://github.com/conventional-changelog/conventional-changelog/issues/279. Closing as resolved by fix for https://github.com/conventional-changelog/conventional-changelog/issues/279. ",
    "forstermatth": "This is also happening when installing with NPM, as discovered not really a problem with Lerna.\n```shell\ncore master : npm install lerna\nnpm ERR! code ETARGET\nnpm ERR! notarget No matching version found for conventional-changelog-preset-loader@^1.1.3\nnpm ERR! notarget In most cases you or one of your dependencies are requesting\nnpm ERR! notarget a package version that doesn't exist.\nnpm ERR! notarget\nnpm ERR! notarget It was specified as a dependency of 'conventional-changelog'\nnpm ERR! notarget\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!    https://gist.github.com/forstermatth/9bb297f82c5d9b1a4232c646045ac8a1\n```. ",
    "ericmorand": "@evocateur isn't Lerna run command doing exactly that? I expect it to do something like this under the hood for each packages iteration:\ncd path/to/package && npm run <script>\n. ",
    "runjak": "Looking around further it sounds like this issue is similar to #1241 in parts.\nAlso we might have a workaround for our specific situation where we set a tag on each merge/update in master so that comparisons for updates will always run against that tag.. Hey, thanks for the response :)\nIndeed the horse has at least partially left the barn.\nBut if I'm understanding you correctly your suggestion is to not bump tags in the branches that work on them but to bump only on master instead.\nThe nice thing with tagging on dedicated branches but publishing to a registry only in master is that we can review version changes as well and no additional step for package bumping is necessary where a single person would need to know details about several package changes.\nSo far we've managed to create a workaround which uses a tag that follows current master.\nBut it wouldn't be far fetched to consider switching to a workflow where we bump versions in master if the need arises.\nComing from that I'd say we currently have a better understanding of the desired workflows with lerna than before and can work with our setup as is.\nIf the workflow we imagined doesn't fit into the scope of this project I think we can close this issue.\n\nSide note 1:\nI've wondered about the workflow we're using before: https://stackoverflow.com/q/47327884/448591\nIf this is not the intended use or the suggested pattern makes more sense I'd comment it there as well just so that others don't easily make the same mistake we're doing ;)\nSide note 2:\nWe're already using lerna publish --canary on branches that are prefixed with test - it's a good thing.. ",
    "7yp0": "Hey,\nIt totally is possible! We are using it the same way, even with Nexus.\nYou just have to set up your .npmrc to use your private package manager (registry, authorization and stuff).\nlerna publish will then publish it to your nexus.. ",
    "tdiluzio": "Hey @7yp0 this is a good news! Thanks for your answer. ",
    "conwaydev": "Also having this issue on a brand new repo. Not doing anything crazy, just added the repo, added lerna to the root, created a package and made a commit message of BREAKING CHANGE: foo and ran lerna publish --conventional-commits --skip-npm --yes and it won't bump major versions:\n\n\nHowever feat: foo commits will give me a minor version bump.. ahh i'm an idiot, thanks. ",
    "chris-dura": "@evocateur thanks, I must of missed the --use-git-version docs! \ud83d\ude16 . @evocateur I'm still not seeing lerna publish update the dependencies...\nmy-mono-repo/\n  package.json\n  packages/\n    brunch/\n      package.json\n    waffles/\n      package.json\njson\n// lerna.json\n{\n  \"lerna\": \"2.9.0\",\n  \"packages\": [\n    \"packages/*\"\n  ],\n  \"version\": \"independent\",\n  \"useGitVersion\": true,\n  \"gitVersionPrefix\": \"v\"\n}\njson\n{\n  \"private\": true,\n  \"name\": \"brunch\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"waffles\": \"git+ssh://git@gitlab.company.com:my-mono-repo/waffles.git#v1.0.0\"\n  }\n}\njson\n{\n  \"private\": true,\n  \"name\": \"waffles\",\n  \"version\": \"1.0.0\"\n}\nAfter this command...\nlerna publish --skip-git --skip-npm --exact --use-git-version\nThe package.json files are updated with new version; however the waffles dependency does not...\njson\n{\n  \"name\": \"brunch\",\n  \"version\": \"1.1.0\",\n  \"dependencies\": {\n    \"waffles\": \"git+ssh://git@gitlab.company.com:my-mono-repo/waffles.git#v1.0.0\"\n  }\n}\njson\n{\n  \"name\": \"waffles\",\n  \"version\": \"1.1.0\"\n}\n. I've thrown up an example monorepo which you can pull/fork if you want to reproduce the issue:\nhttps://github.com/chris-dura/monorepo\nRunning lerna publish --skip-npm --skip-git --exact --use-git-version does not update the dependency git URLs.. Ok, the functionality does indeed seem to be working except when I try to update dependencies from our on-premise GitLab EE instance. So, it's most likely because our GitLab instance is configured in a way that lerna doesn't like? Perhaps 2FA? Any guidance related to how lerna bootstrap and lerna publish work in regards to git that I could pass on to our GitLab devops folks would be appreciated!\nI did notice that when using our private repo in the dependencies, that lerna bootstrap actually created a package-lock.json file. However, when using dependencies from the public GitLab/GitHub sites, there was no package-lock.json created after running lerna bootstrap. I thought that might be the culprit; however, even when I turn off the lock files globally via npm config set package-lock false, it still didn't resolve my problems.\njson\n{\n  \"name\": \"brunch\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"bacon\": \"git+ssh://git@gitlab.mycompany.com:dura/bacon.git#v1.0.0\",\n    \"eggs\": \"git+ssh://git@gitlab.com:chris-dura/eggs.git#v1.0.0\",\n    \"waffles\": \"git+ssh://git@github.com:chris-dura/waffles.git#v1.0.0\"\n  }\n}\nbash\nlerna bootstrap\nlerna updated\nlerna publish --skip-git --skip-npm --exact --use-git-version\njson\n{\n  \"name\": \"brunch\",\n  \"version\": \"2.0.0\",\n  \"dependencies\": {\n    \"bacon\": \"git+ssh://git@gitlab.mycompany.com:dura/bacon.git#v1.0.0\", <-- Arghh!!!\n    \"eggs\": \"git+ssh://git@gitlab.com:chris-dura/eggs.git#v2.0.0\",\n    \"waffles\": \"git+ssh://git@github.com:chris-dura/waffles.git#v2.0.0\"\n  }\n}. That certainly sounds like it might be the issue.\nAlthough I can atest that npm install git+ssh://git@gitlab.mycompany.com/dura/bacon.git actually has been working for us. So, definitely something weird is going on, thanks again for the help!\n. OK, so I think I can just write a script to do this one bit myself... and I won't continue to beat a dead horse. But, one final question...\nI understand why the actual publishing would require a domain to be recognized git host. And, obviously the dependency format should conform to the Git URLs as dependencies...\nHowever, for the small functional bit that actually just bumps the version in the json, you're essentially just changing the #vX.Y.Z at the end of the URL, right? Seems odd that it would even care if the host is recognized or not, perhaps the only requirement for that bit should be that the URL is properly formatted like the npm docs spec out?\n. ",
    "hiendv": "@evocateur Understood. But can we have a workaround for this? https://github.com/lerna/lerna/blob/v3.0.0-rc.0/core/package/index.js#L153-L154\n. Duplicates:\nhttps://github.com/lerna/lerna/issues/571#issuecomment-405281350\nhttps://github.com/lerna/lerna/issues/1277#issuecomment-369088714. ",
    "AtofStryker": "Thanks for the quick turn around!. ",
    "fenduru": "Would you consider a PR that adds another line here without completely refactoring the configuration mechanism?. @evocateur this change is breaking me. I had previously submitted work upstream to conventional-changelog to support this exact situation, so it was already supported. However the API Lerna has chosen is different than the API that conventional-changelog chose.\nCan we please revert this and add documentation that mentions that you can use scoped presets by passing @scope/name (which resolves to @scope/conventional-changelog-name)\nEdit: Here's a link to my PR, which was ultimately pulled in manually as part of a larger refactor . @evocateur I understand the lack of bandwidth, however I do believe this is a breaking change and should have been released as a major or should be reverted. This is causing sudden breakage across many projects at my company.. @evocateur @hbetts what needs to be done to get this merged and released? I currently cannot use Lerna canaries for my projects that publish to Artifactory which is quite unfortunate.. I was able to come up with a workaround for the time being:\nyarn lerna publish --skip-git --cd-version=prerelease --preid=beta+`git rev-parse --short HEAD` --npm-tag next --exact --yes\nWhich yields a version like 2.2.1-beta+8e77993.0. I think it may be useful in some scenarios to always list dependency updates, but I fear that a majority of them would be noise, and only a small number of them would be relevent to my end users. For instance, a feature or fix that is only visible internally should not end up in the user-facing changelog IMO.\nAnother idea could be to say something like \"A change that is a fix that has a fixes #9999 in the commit message should be included in all dependents\". I would advocate against including feats, as like I mentioned above those typically need to be exposed through API surface and/or documentation. For instance if I add a feat to my core package, but only expose it to my vue library, I don't want that showing up in the angular changelog as it is not truly there.\nThis is a very real example for me, FWIW, as we are beginning to migrate from Angular to Vue, and new features may not land in both, however we will be doing as much work as possible in a shared package to avoid duplication during this transition.. @evocateur thats a good idea - do you know which piece of the lerna + conventional-changelog puzzle is responsible for deciding whether or not a commit applies to a particular package's changelog? (i.e. the one that currently checks \"was a file in the subfolder touched in this commit\").. Hmm - looks like the options for git-raw-commits is pretty rudimentary and only takes a folder which Lerna always passes. So even if git-raw-commits had more options, it looks like it might be too late at that point.\nI'm going to think on this one, but I generally agree that my actual logic would fit very nicely into a changelog preset. If that requires any Lerna changes to support I suspect they'd be minor and I'll file a PR.. For my publish workflow I would expect no requests to be made to yarn OR npm's registry since I'm not publishing there. @evocateur I don't disagree with you in theory, but in practice I have two things (Lerna and Artifactory), neither of which I own, and one of which released a new version that no longer works (and previously did). Not to mention that while I suspect this issue would still happen if it was trying to whoami against my artifactory, in this case it isn't even doing that - it is trying to whoami against registry.yarnpkg.com which should really not be involved in the first place (i.e. the check could pass against artifactory assuming they had the right endpoints, but will never pass against registry.yarnpkg.com from my CI build boxes)\nIgnore this part, I was mistaken because individual users can't publish, but our CI boxes do have auth setup. ~~Our artifactory doesn't use auth at all though (it is behind corporate firewall), so I'm not surprised that auth-related things don't work. For example, npm whoami fails for me because I don't have those config keys set up (because my artifactory doesn't need them).~~\nOn a technical note, it seems like this code path is doing error handling before an error actually occurs. I wonder if we could get the same value (i.e. addressing those 50% of \"my lerna publish command failed\" issues before they get filed) by instead checking for things like registry authentication after the publish actually fails, and in a diagnostic capacity rather than for control flow.\n. This is in fact valid semver: https://semver.org/#spec-item-10, https://runkit.com/embed/62em9lt0lk61\nNot sure why npm is complaining though. Do any of them succeed to publish?. Out of curiosity what's the benefit of -alpha.0+SHA vs -alpha+SHA. ",
    "jbgraug": "Same here.\nI have a local library with \n\"files\": [\n        \"dist/\"\n    ], in  package.json\nBut when running lerna link or lerna bootstrap, the library gets symlinked to the main library folder, not the to the dist/ one\nIt is not a yarn issue as using \"npmClient\": \"yarn\" and  \"npmClient\": \"npm\" in lerna.json both have the same behaviour\nI've noticed that by including the path to the dist/ folder lerna link works as expected\n\"packages\": [\n    \"packages/your_package_1/dist\"\n ],\nBut then lerna build fails to build the library package as the required files are not there.\nSo a possible solution would be to have 2 different attributes \"packages\" & \"package_link\" in lerna.json \nThe main issue i'm facing is that the library is an angular one so angular deps are being resolved to the node_modules folder of the library's root folder instead of the node modules of the dist/ folder. when using lerna; Doing the linking manually works.. I also tried this, the problem is the liking part as it is not the same linking the root folder than linking dist/ because the root folder contains a different node_modules folder with devDependencies on it, which are resolved instead of those in the main project.. This is not an Angular issue, it is the way TypeScript module resolution works...\nIn most cases, people don't care about how many times a dependency is bundled or how is resolved.\nIn my case the application builds it but fails at runtime because it's getting more than one Angular instance. That could also be the case for Zone.js which has to be a singleton and throws an exception when you get more than one instance.\nAnyways, why shouldn't you be able to pick which folder to link, so you can check locally the same package that you'd publish? (publishing the a dist/ folder is quite common practice).. I guess it is just a thing people \"usually\" do to separate src from built code, cd to dist/ or whatever folder, and then publish from there instead of making use of .npmignore \nWhat about devDependencies, peerDependecies, etc in package.json? \nWhy have them if they are not respected? locally you have the dev. dependencies installed, and then, when you do npm link you have them all in your main project. This will not happen if the package is published and then installed from the npm registry. This is not consistent, is it?\nKeep in mind how TypeScript module resolution works.\n. ",
    "vilic": "For TypeScript projects that need multiple entries (e.g. hello, hello/world), it is usually painful to manage extra .js and .d.ts files just for creating those entries. It would be nice for lerna to support that.. ",
    "johnmcase": "How many times do people have to request the same feature before Lerna figures out it is a real thing?\n91\n901\nProbably more...\nI understand that publishing dist isn't following the purest npm way of doing things, but it is a very common pattern, especially in my experience in the Angular world.\nYes, I can change the main in my package.json to point to the  dist/bundles/my-package.umd.js, file, but that causes the package to include a whole lot of garbage that it doesn't need.  Again, I understand that this isn't PURE NPM, but it is normal.. This is why that doesn't work:\n\n. @doug-wade Apologies for the slow reply...\nWe are using ng-packagr, one of the build tools you linked.  I don't see in there how you can configure it to build to ./ instead of dist/  Maybe I'm missing something there.\nI will add that ng-pacakger is now being bundled by the angular-cli as the tool for producing libraries.  If you scroll down to the heading for publishing your library you'll see that their official documentation states that you should cd into the dist folder and run npm publish from there.  (They could have said to just run npm publish dist from the root but whatever)\nMy directory after running ng-packagr on it looks like this:\nmy-component/\n- package.json\n- src/\n--- index.ts\n--- other_sources.ts\n- dist/ (generated by ng-packagr)\n--- package.json\n--- bundles/\n----- index.js\n--- esm/\n----- index.js\n--- whatever-other-bundle-types-depending-on-apf-version/\n----- index.js\nAll I'm requesting from lerna is to have a configuration available to have it do a npm publish dist instead of a plain npm publish  (It would be fantastic if I could configure that on a per-package basis as some packages may not have a dist folder, or some packages my have a different folder structure, who knows)\nRight now I've worked around the issue by requiring every package in my monorepo to have a 'lerna-publish' npm script target.  I then have my CI job run lerna publish --skip-npm, then lerna run lerna-publish --scope=<only the changed packages> and then a git push --tags origin (Because of #680). ",
    "nfour": "@doug-wade Here is the usecase at my company:\nbuild/\n  foo.js\n  foo.d.ts\n  bar.js\n  bar.d.ts\n  package.json\nsrc/\n  foo.ts\n  bar.ts\npackage.json\nNow imagine that foo and bar contain related but highly import-intensive stuff. \nLets say the foo and bar imports have an absolute shitload of schemas or something, and you'd may not need both at the same time.\nTypically we have imports like so to solve this:\nts\nimport reallyExpensiveFooImport from \"npm-package/foo\";\nimport cloneDeep from \"lodash/cloneDeep\";\nimport schema from \"@company/schemas/entity/something-+v1\";\nIf we were to use the standard layout, which has package.json point to build/index.js we would have these import paths:\nts\nimport reallyExpensiveFooImport from \"npm-package/build/foo\";\nimport cloneDeep from \"lodash/build/cloneDeep\";\nimport schema from \"@company/build/schemas/entity/something-+v1\";\nThis is aesthetically displeasing, can be confusing (is it dist or build or lib?) and some people exclude all /build/ from indexing etc.\nThis is the real reason to support this, and it's sad that NPM had this feature at one point with special files denoting the root, but has since disappeared. \nSomeone will counterargument with: Just make multiple NPM packages!\nAnd to that I say, hell no, what a versioning nightmare.. It also isn't just about publishing\nyarn link'ed modules need to point to the build folder as well.. ",
    "dherges": "It's simply not ridiculous but rather should have been an established pattern.\nnpm link is flawed either way. Its benefit was to introduce --preserve-symlink flags all over the place.. Plus:\n\nsideEffects\nes2015\nmodule\ntypings or types\n\nIt can't be so wrong to auto-manage such properties, as package.json has partly become a build-time artefact but also a publish-/runtime-time manifest.\n\n. While there are points for and against it, the very first action is to care about a toxic tone problem. First step first.. ",
    "pterblgh": "I guess the main use case for people from the Angular ecosystem is to be able to easily publish packages generated by ng-packagr which is now the default tool used in Angular CLI to generate and build libraries.\nI can imagine a use-case for a big project with multiple companies and 20-30+ developers to decide to go with a monorepo backed by Lerna and split the features into multiple NPM packages which are versioned independently and published to a private NPM repository. I guess a lot of big projects already or will follow a setup similar to this because creating Angular libraries efficiently has now become a thing.\nI guess many more questions and feature request are going to come up for publishing a dedicated folder (e.g. dist) because the Angular (maybe more generally the TypeScript) ecosystem follows this pattern.\n@evocateur I clearly understand your reasons, but would you take into consideration adding another argument to the lerna publish command which can be used as the first argument of the official npm publish command? Maybe you can call it --folder because NPM uses the same name too.\nAn example would look like this:\nbash\nlerna publish --conventional-commits --folder=dist\nBy the way, I'm just getting familiar with Lerna, but I guess the following commands can form a workaround for the main problem:\nbash\nlerna publish --conventional-commits --skip-npm\nbash\nlerna exec --concurrency 1 --scope=@my-org/* -- npm publish dist\nIn the prepublish hook anyone can define a proper build process to populate the dist folder correctly - in an Angular project it would just ng build my-lib --prod\nAm I missing something important somewhere? Thank you for your time to read my idea/proposal.. Hmm maybe I'm missing something from the bigger picture.\nIf I have a repository containing source files which require some kind of transpilation (it can be TypeScript, Babel or basically everything else which takes a language and transpiles it to some valid JavaScript) what's the best practice to publish it to NPM as a JavaScript module?. ",
    "wanglong167": "https://github.com/sindresorhus/np    --contents    Subdirectory to publish. ",
    "lawlesscreation": "@evocateur firstly thanks for working on Lerna - it's been a great tool for us to breakdown our CSS design system and publish as multiple packages!\nWe've hit this same problem and not entirely sure if there's a workaround. We have a package containing angular components, when this gets build with ng-packagr it puts the package files in a dist/ folder, as many have described.\n\nWe've tried several methods you have suggested but sadly no success. There is no index.js that gets created to add to the package.json main and we don't seem to be able to simply include the dist/ folder in the package.json files list - because there is a package.json file within the dist/ folder it seems to cause many of the folder/files in dist/ to be ignore in the packaging - I guess because it thinks this is some weird package-in-a-package!?\nHopefully someone can suggest a workaround for this, until then I guess the only think we can do is have Lerna ignore this package and we'll manage/publish it separately.. For anyone interested, the least hacky workaround I could come up with was to disable lerna publish from actually publishing the packages with --skip-npm then writing a custom publish command for each package that is called as part of a post script e.g.:\n// main package.json\n\"lerna:publish\": \"lerna publish --conventional-commits --yes --skip-npm\",\n\"postlerna:publish\": \"lerna run publish:custom\",\n// In the angular package because it needs to be published from ./dist/\n\"publish:custom\": \"ng-packagr -p ng-package.json && npm publish dist\"\nNote: I had to re-package it before publishing to ensure the package number was correct.\n// In every other package.json that publishes from its root folder\n\"publish:custom\": \"npm publish\". hmm, the above approach has the problem that it doesn't use Lerna to publish which means it tries to publish packages that have not changed.\nThe only option that seems to work without completely recreating the lerna publishing lifecycle is to create a prepublishOnly step (npm >= v4), which copies the dist files into the src folder before it's packs and publishes:\n```\n// package.json\n{\n  ...\n  \"scripts\": {\n    \"prepublishOnly\": \"cp -r ./dist/* .\"\n  }\n  \"files\": [\n    \"bundles\",\n    \"esm5\",\n    \"esm2015\",\n    \"fesm5\",\n    \"fesm2015\",\n    \"lib\",\n    \"angular-components.d.ts\",\n    \"angular-components.metadata.json\",\n    \"index.d.ts\",\n    \"public_api.d.ts\"\n  ]\n}\n```\nThis feels a little dirty as copying compiled files to a source folder gives me shivers - luckily this is part of a CI pipeline that cleans up the checkout each time anyway!\n@evocateur it's a shame we cannot specify the folder Lerna should publish from as per the npm publish [folder] documentation - it would make it a lot easier \ud83d\udc4d I understand you not wanting to support every possible use-case but I would have thought this is a problem for anyone using Lerna + Angular.. hmm, the above approach has the problem that it doesn't use Lerna to publish which means it tries to publish packages that have not changed.\nThe only option that seems to work without completely recreating the lerna publishing lifecycle is to create a prepublishOnly step (npm >= v4), which copies the dist files into the src folder before it's packs and publishes:\n```\n// package.json\n{\n  ...\n  \"scripts\": {\n    \"prepublishOnly\": \"cp -r ./dist/* .\"\n  }\n  \"files\": [\n    \"bundles\",\n    \"esm5\",\n    \"esm2015\",\n    \"fesm5\",\n    \"fesm2015\",\n    \"lib\",\n    \"angular-components.d.ts\",\n    \"angular-components.metadata.json\",\n    \"index.d.ts\",\n    \"public_api.d.ts\"\n  ]\n}\n```\nThis feels a little dirty as copying compiled files to a source folder gives me shivers - luckily this is part of a CI pipeline that cleans up the checkout each time anyway!\n@evocateur it's a shame we cannot specify the folder Lerna should publish from as per the npm publish [folder] documentation - it would make it a lot easier \ud83d\udc4d I understand you not wanting to support every possible use-case but I would have thought this is a problem for anyone using Lerna + Angular.. ",
    "jonathansant": "why not just generate a JSON schema and automate it? For the life of me, I really can't find all the options available anywhere.. ",
    "estaub": "Yeah, weird!  I figure the main value is that, if and when someone else runs into it, you'll know that it's real and in a very weak sense reproducible.  I tried to repro and failed.  I'm very confident of what I saw, though, else I wouldn't have posted.  Feel free to close.. > the new lerna link command is not well explained, especially lerna link convert\nThis is very nearly a show-stopper for me; I'm trying lerna for the third time, in large part to get hoisting, and AFAICT there is not one word anywhere about lerna link convert, even though it's described as the standard way to hoist.  If it isn't obvious, I/we need to understand: \n\nwhat gets hoisted and what doesn't\nbehavior on version conflicts - does one get hoisted & if so, which?\nhow to prevent hoisting of specific packages\ntechniques for ensuring common versioning (and hence hoisting)  of certain dependencies and devdependencies across packages.  I suspect use of a base package with peerDependencies will enforce for normal dependencies, but I don't see a way to do it for devDependencies\nbehavior when publishing: what \"unhoisting\" occurs?\n\nThat's just off the top of my head.  Some of these may be moot with even a rudimentary understanding of what convert does, but that's my point.  You may consider the \"techniques\" item to be a bit out of scope, but I think it would be of great value to lerna learners even if not about the specific behavior of lerna itself.. Can you explain?  I don't see how peerDependencies can be used to create a single point where shared dependency versions are specified - they must be replicated throughout the package.json's where the dependencies are used.  The best I can see is using them to cause an error when a package.json deviates, by creating a peerDependency in a base package.  While this has some value, it still requires upkeep of all the dependencies, and sometimes creation of dummy packages where dependencies differ between packages. But maybe there's some idiom I don't know.\nI'd think that there'd be a strong association between wanting this and using a monorepo, hence the thought that it might be a good lerna feature.. ",
    "oliviertassinari": "@evocateur I don't plan on forking the project, it was an example of use case one could have.\nMine is about upvoting https://github.com/lerna/lerna/issues/901#issuecomment-356725527 as the workaround I found (but not perfect as the preversion/version/postversion script output are swallowed). It's something other people could be interested in finding.. ",
    "rosskevin": "@evocateur \n\nI already give away all my work\n\n...and so do many others, including both @oliviertassinari and myself.  We are strong open source contributors to many projects, but comments such as If anyone wants this, fork lerna and do it yourself. This conversation is over doesn't encourage contribution, they encourage others to not even bother to engage, further burdening you since you are clearly invested in this project.\nIt might serve you well to cultivate the community instead of telling to take their effort and go elsewhere.\n^^^ all of this is unsolicited advice and I understand it is your prerogative to take it or leave it.  Aside from your harsh handling of the community, I just want to say thank you for your effort here; I appreciate your work and the work of all the contributors to lerna.. It looks like adding --amend will opt out of the dirtiness check, though seems like a misuse, or perhaps the option could be renamed, I am not sure which makes the most sense in the entire scope of lerna.\nhttps://github.com/lerna/lerna/blob/master/commands/version/index.js#L157. ",
    "bdwain": "I saw that but I don't think conventional commits does what I'm describing. \nFor example, lets say i have a component in package1, and package2 uses it. Let's say they're both v1.0.0 right now (but independent) and that I make a breaking change to the component where i rename an option. In my commit, i rename the option in package1, and update the usage of it in package2 to pass the new option name. \nI want to bump package1 to 2.0.0 and package2 to 1.0.1. I have a single commit, and I could put BREAKING CHANGE in it to signify a major bump, but that would bump both packages to 2.0.0. It seems like I could make it work if i avoided squashing and made sure to do 1 commit per package (with the correct commit messages for each bump), but that is kind of an artificial restriction and not being able to squash would be annoying to deal with. . It's not a breaking change to package2 though. Only package 1. Imagine package2 is lodash and package1 is some helper that lodash used under the hood. If I am an app that uses lodash, I don't need to change my usages of lodash when upgrading from the old version to the new one, so why would it be a major bump? Lodash hides the usage of package1 from me, so making it a breaking change just because package1 had a breaking change would be wrong. The same logic could apply to any dependency otherwise, not just ones in the same project.\nWhile it's not difficult to split the commits, probably the most important benefit of monorepo is to streamline changes that affect multiple packages at once, so artificially splitting a single change up into separate commits seems to somewhat defeat the purpose.\nThey are not necessarily the only solutions, but two that could work are the ones i described above.\njs\nlerna publish --versions \"package1,major,package2,minor\"\nor\nlerna publish --versions-file <path_to_file>\nit's a bit awkward to type that out manually, but they are there mainly for CI usage anyway, since the current version of publish that prompts you for each package works fine for a human.. The way I imagined this working (at least for my use case, which is not necessarily how it would be for everyone else) is that the jenkins job that would be responsible for bumping versions would have some sort of input where you can choose packages from the list of available packages in the repo and apply a semver to them. Any unchosen packages that are going to be published would get some default semver bump (probably a patch).\nSo in the example above, in my job i would specify that package1 would get a major bump, and lodash, being unspecified, would get a patch bump.\nMy lodash example was obviously contrived but I think there are plenty of valid use cases for independent mode. My project currently contains a few different apps and they all depend on a single common library, so a monorepo helped making changes to all of them at once. But some of the apps share other helper libraries that not everyone uses. I wouldn't want a major bump in one of those libraries to force me to bump every app, especially because i'd like to automate releases on changes and I don't want to release when nothing actually changed.. @evocateur are you open to the solution I suggested above or anything similar to solve the issue of applying different semvers to different packages via CI? I think that at least is definitely in scope for lerna since publish isn't really usable for a completely valid set of semver changes without it.. I'll probably just write a custom publish script instead. I don't think conventional commits is the solution to this. . @evocateur what do you mean for \"each ci run\"? whether the command line params are --cd-version major or --versions \"package1,major,package2,minor,package3,patch\" it seems the same to me as far as per-run configuration. . The idea was not to hard-code the string (package1,major,package2,minor,package3,patch), but have it calculated and passed from whatever is running lerna publish  (like a jenkins build script) based on params passed to the job. It's a little awkward to type as a human, but it's meant for CI anyway so who cares. Interactive mode is fine for humans. . Isn't --cd-version major also a per run config that a human has to decide? it's just simpler because there's only one version. That would be a single jenkins job param. The multi-version one would just take multiple params.\nMy thought was that you would specify all of the semver bumps you want to specify, and maybe a default bump for unspecified packages that have changed. So if i wanted to say package1 was major, pacakge2 was minor, and every other package that was affected was a patch, i would say\nlerna publish --semvers \"package1,major,package2,minor\" --default-semver \"patch\"\nAnd then in the jenkins job I would just have to somehow specify package1 and package2 and the default. Every CI and job is different though, so that's not really lerna's concern. They just need to pass the right params to publish based on the job params.\nPatch could even be the default value for default-semver or something to avoid needing that every time.. reopening this as there's clearly a lot of interest besides just me. \nI'm not particularly attached to any solution, but it seems clear that this is a clear piece of functionality is something lerna should have to fully support independent mode. \nI think something like lerna publish --semvers \"package1,major,package2,minor\" --default-semver \"patch\" would address the issue and be relatively easy to implement. It sounds like there's plenty of volunteers to implement it as long as you're ok with the feature @evocateur. Thoughts? . @evocateur any chance you could reconsider this. I think the comments on this issue demonstrate a clear area where lerna is currently lacking, and a clear solution to that problem. The only available solutions right now are super hacky like intercepting the interactive prompt programmatically or avoiding lerna publish altogether. Neither of those seem very reasonable.\nI think there's lots of people who would be happy to make the PR as long as you're open to the idea.. @bochen2014 we solved this issue by only allowing people to merge to master using a jenkins job, and the jenkins job also auto-rebases the branch onto master before merging it (failing if there is a conflict). @evocateur Why is it not lerna's problem? If i have a monorepo that has lots of libraries and an app, and yarn upgrade changes my react version for 16.3.0 to 16.3.1, that change affects my app. If my app was not in a monorepo, the change from 16.3.0 to 16.3.1 would obviously trigger a new version of the app, so it seems like a monorepo should not be different. \nObviously this would unintentionally bump the versions of libraries in the monorepo too, which would presumably have a peer dependency on react, but I'd rather release too often than not release when I have a change. \nAlso, I can't use lerna publish because of #1286 . lerna has a useWorkspaces option and advertises itself as explicitly supporting yarn workspaces. it should take into account its behavior and not just npm's behavior then. . for 2, just because it's not a candidate for release doesn't mean it's not a change. If someone does not want to release due a to a yarn upgrade, they don't have to run publish. But if you do want to run yarn upgrade and publish all affected packages (maybe react 16.3.0 was buggy and 16.3.1 fixes it and that's all you changed), it seems odd that lerna would consider everything unchanged.\nI get that the logic doesn't fully integrate everything with yarn, but that's not clear by looking at lerna.json, which says client: yarn and useWorkspaces: true. If lerna wants to fully support yarn, it should behave the same when doing a similar operation in both npm and yarn. If yarn doesn't change each nested package.json when upgrading dependencies (which I feel is correct, since package.json is for specifying a range, not an exact version), then in order to say it supports yarn, lerna needs to support that behavior also. . Hm that's fair. I guess I'm not thinking of this so much from a publishing standpoint as from a knowing what could be affected standpoint. What I want to do is make sure that whenever someone changes the lockfile, they have to run the pre-merge checks for all packages, because any given package could break if a new dependency is bad, and without parsing the lockfile, we dont know which packages are affected when it changes. Otherwise, someone could run yarn upgrade and break master because a dependency broke something. Is there a way I could do that? \nI suppose I could do something hacky like in my pre-merge step, see if the lockfile has changed since master, and if so, ignore lerna updated and instead just build all packages. But that seems hacky and not ideal.. got it. thanks for the help.. Agreed. I actually delegate lint behavior to my subprojects as well. Regardless of what the command is actually doing though, it seems like loglevel=\"silent\" should stop the duplication of all stdout from lerna's subtasks. If it's meant for something else though, maybe there could be a new option to suppress this output. . If B's tests don't cover the buggy scenario, the bug could get released. All bugs that get released in any project got past the testing phase. \nWhy do you think A and B should not be in the same monorepo? Basically what I'm making is a monorepo for the internal front end platform my company is using. The main app is broken up into many subapps, which are independent packages that contain a specific high level feature or page or something. There are also helper libraries used by multiple subapps and the app, including some helpers that are used by all subapps. We need a monorepo because there are often changes that affect multiple packages at once, especially when those changes are breaking changes in the helper libraries.\nIn the example I gave above, package A is the main app, and package B is a subapp. If there's a bug in a subapp, I want to hard code its version in the app and but still allow changes to other subapps to be merged and pulled into the app.. I see. That would be one option, but in the future, we'll potentially have multiple apps, and I wouldn't want to break out so many separate repos because it starts to defeat the purpose of a monorepo.\nIt may be that my use case is kind of weird and not for what lerna is designed to do. I've been looking at writing my own scripts for bumping versions and publishing because I have a bunch of different requirements (but using lerna for other stuff, like lerna run and lerna updated). Another benefit of this is that it seems like it would not require that the tags we publish be annotated tags. This seems to be a new requirement as of v3, but since lerna publish is not writing my tags, I was keeping them as lightweight because there was no benefit to making them annotated. Since I create a lot of tags, I'd rather keep them lightweight since I don't care about the extra annotated info and my repo is very large.\nIf I was to say --since master or some other ref, there would be no need for me to make all of my tags annotated, since you would not need to say git describe to find it. Though you could also allow non-annotated tags by adding the --tags option (if not always, at least when a config option is enabled). Another benefit of this is that it seems like it would not require that the tags we publish be annotated tags. This seems to be a new requirement as of v3, but since lerna publish is not writing my tags, I was keeping them as lightweight because there was no benefit to making them annotated. Since I create a lot of tags, I'd rather keep them lightweight since I don't care about the extra annotated info and my repo is very large.\nIf I was to say --since master or some other ref, there would be no need for me to make all of my tags annotated, since you would not need to say git describe to find it. Though you could also allow non-annotated tags by adding the --tags option (if not always, at least when a config option is enabled). Ah didn't know lerna ls supports --since. Maybe that could be added to the documentation page? It only mentions --scope and --ignore when referencing filter flags.. Oh and thank you!. I made a PR to update the docs #1564 . Sweet! Thanks!. > Overall, I'm concerned that os.cpus().length isn't always the appropriate value for concurrent operations. Not that 4 is much better, it's pretty arbitrary.\nI agree. But when it's not, my guess is they probably have a hard coded number in mind anyway, so they can just set the concurrency if they want. \nIf people wanted to use half of the cpus, or all but one, they'd need a node script to do that. But that's the case today today, and if it was that popular of a request, there could be options such as --use-half-cpus or --use-all-but-one-cpu. I doubt they'd be necessary though.. thanks!. ",
    "fabioberger": "@evocateur Since lerna publish already asks the developer to select a version for each package in an interactive mode, why not also add a command-line way of doing the same thing?\nI agree with @bdwain that conventional commits is only one way to handle this limitation and it requires adopting the conventional commit workflow, which many don't want to do.. Would you potentially accept a PR for this?. @evocateur in our case we decide the next version for each package in a CHANGELOG file in each sub-package, and want to have a publish script that pulls the versions from there and calls lerna publish with the proper next versions. It isn't impossible to imagine that people might have a different way of keeping track and determining future versions that doesn't involve conventional commits.. This is our work-around at the moment, in case others who need this functionality immediately. We simply commandeer the interactive prompt programmatically. I would much prefer this be supported natively by the command-line interface.\ntypescript\nasync function lernaPublishAsync(packageToVersionChange: { [name: string]: string }) {\n    // HACK: Lerna publish does not provide a way to specify multiple package versions via\n    // flags so instead we need to interact with their interactive prompt interface.\n    const child = spawn('lerna', ['publish', '--registry=https://registry.npmjs.org/'], {\n        cwd: constants.monorepoRootPath,\n    });\n    let shouldPrintOutput = false;\n    child.stdout.on('data', (data: Buffer) => {\n        const output = data.toString('utf8');\n        if (shouldPrintOutput) {\n            utils.log(output);\n        }\n        const isVersionPrompt = _.includes(output, 'Select a new version');\n        if (isVersionPrompt) {\n            const outputStripLeft = output.split('new version for ')[1];\n            const packageName = outputStripLeft.split(' ')[0];\n            let versionChange = packageToVersionChange[packageName];\n            const isPrivatePackage = _.isUndefined(versionChange);\n            if (isPrivatePackage) {\n                versionChange = 'patch'; // Always patch updates to private packages.\n            }\n            const semVerIndex = semverNameToIndex[versionChange];\n            child.stdin.write(`${semVerIndex}\\n`);\n        }\n        const isFinalPrompt = _.includes(output, 'Are you sure you want to publish the above changes?');\n        if (isFinalPrompt && !IS_DRY_RUN) {\n            child.stdin.write(`y\\n`);\n            // After confirmations, we want to print the output to watch the `lerna publish` command\n            shouldPrintOutput = true;\n        } else if (isFinalPrompt && IS_DRY_RUN) {\n            utils.log(\n                `Submitted all versions to Lerna but since this is a dry run, did not confirm. You need to CTRL-C to exit.`,\n            );\n        }\n    });\n}. This is still an existing issue for us. We are currently using a fork of Lerna to get around it but it would be great to see this change added upstream.. ",
    "k0nserv": "We are also very interested in the ability to publish different versions in independant mode without using the interactive method. For us the burden of manually chosing versions is getting significant and prone to human error. We are experimenting with a method that can determine what changes have occured in the package and thus what semver change needs to be made. Something like lerna publish --force-publish package-1@1.3.2,package-2@2.3.4,package@3.2.1 or what @bdwain suggested would be very useful for us. We aren't really interested in using --conventional-commits as it doesn't work well with out workflow and process. We are happy to contribute something like this if it's likely to be merged.  . ",
    "rogeriorc": "before:\njson\n{\n  \"name\": \"x\",\n  \"version\": \"1.0.0\"\n}\nrun command:\nbash\nlerna publish --skip-git --skip-npm --cd-version=major\nafter:\njson\n{\n  \"name\": \"x\",\n  \"version\": \"2.0.0\"\n}. ",
    "vrachels": "version bump being applied to all packages seems totally acceptable in this situation.\nMaybe an additional warning to that effect would be acceptable?. And yet it's still a useful feature/tool without git, and didn't require major changes to get it working.. Er, It was able to update and publish all packages.  I don't see that as worthless.  Heavy-handed, perhaps, and not the greatest long term solution, but definitely still useful to our project.\nEspecially with --scope capability, we can manually do (or write our own tooling to do) the only-publish-what-is-updated task.. ",
    "hrasoa": "lerna publish --conventional-commits sill creates the changelogs inside the packages: https://github.com/hrasoa/create-an-app/commit/b5ec437d2bfe9a5309f83205c15841a7111918bd.\npackages/a-react-template/CHANGELOG.md was created.. ",
    "kakuyogy": "this is my lerna.json\njson\n{\n  \"lerna\": \"2.8.0\",\n  \"packages\": [\n    \"packages/lego-ui\"\n  ],\n  \"commands\": {\n    \"publish\": {\n      \"ignore\": [\n        \"lego-example*\"\n      ]\n    }\n  },\n  \"version\": \"independent\"\n}. @evocateur thanks for your reply, but [\"packages/\"] is not the key, if i set [\"packages/\"], lego-ui also miss, \n\nyou can see, lego-ui is ignored.. @evocateur i change lerna.json to\njson\n{\n  \"lerna\": \"2.8.0\",\n  \"packages\": [\n    \"packages/*\"\n  ],\n  \"commands\": {\n    \"publish\": {\n      \"ignore\": [\n        \"lego-example*\"\n      ]\n    }\n  },\n  \"version\": \"independent\",\n  \"npmClient\": \"tnpm\"\n}\nalso miss.. ",
    "testower": "The rejection of this PR seems a bit harsh. I can easily see use cases for this, in cases where in CI git is not available, just the cloned project files. npm is perfectly capable of publishing packages without the presence of git, why not lerna? If I know the version, why can't I simply provide it as an argument? And if the default behavior of lerna is to update all packages, whenever one of them changes (non-independent), this doesn't seem like a far-fetched addition.. 1. Not really sure what you mean. I clearly can provide it with a version of my own as my workaround demonstrates:\ngit init . && lerna publish --skip-git --force-publish=* --repo-version $(node -e \\\"console.log(require('./package.json').version)\\\") --yes\n\nAbsolutely nothing is stopping me from doing everything myself, except it would not be very fruitful for me to reinvent the wheel.. I understand, thanks for clarifying. I have misunderstood the distinction betweeen fixed/locked and independent modes and assumed in fixed/locked, all packages would be updated regardless. Of course I see now that this is not the case, and explains why I needed --force-publish=* in my workaround.\n\nThat said, I read some recent discussions around version 3 of lerna, where you indicate that you intend to split version from publish. I see this as another indication that versioning is git business and publishing is npm business. You also mentioned that lerna version would likely be called by lerna publish. So an approach could be to allow a --skip-version.\nMy workaround is not pretty, and perhaps illustrates why I should roll my own in this particular case. It's just that I found lerna useful to manage my mono-repo, but I had odd requirements during publishing. I appreciate that you cannot accommodate every peculiar use case.. Although I'm finding this odd:\n\n\nIf you \u201cknow the version\u201d, what\u2019s stopping you from looping through the packages and running npm publish yourself?\n\n\nGiven this comment I'm curious about why there is a --repo-version argument:\nWhen run with this flag, publish will skip the version selection prompt and use the specified version. Useful for bypassing the user input prompt if you already know which version to publish.. For anyone interested I ended up usng lerna exec for a cleaner workaround:\n```\n// CI has already bumped version in root package.json,\n// so first we replicate that in all the packages\nlerna exec -- npm version $(node -e \\\"console.log(require('./package.json').version)\\\")\n// Then run npm publish in all the packages\nlerna exec -- npm publish\n```. ",
    "dj-hedgehog": "Thank you for giving me an answer. I went with this solution: https://gist.github.com/eschwartz/8518b21d5d2854d8a4f7c7e7507f0561\nThe disadvantages are that there is a private key inside the repo (however only with read-access to the private packages) and that developing the packages with this setup is not possible.. ",
    "hon2a": "I've just run across this as well through a nasty issue after using lerna clean with the abovedescribed expectation for some time.\n@evocateur If it's \"not really a command that serves a useful purpose\", why is it provided at all? Providing a misleading API and then saying it shouldn't be touched, because it's useless anyway, makes no sense whatsoever IMO.. @evocateur When using lerna bootstrap with --hoist, the root node_modules are in fact hosting dependencies for the packages. Thus my (and apparently not just mine) assumption about clean being an easy counter to bootstrap.\nSorry about the unwarranted accusation, the wording in the docs is pretty clear. I was so used to clean cleaning up my deps that I didn't check its docs again after switching to --hoist. I'd say the interaction with --hoist (or just the fact that root is not cleaned) might be worth mentioning in the docs though, if the command is not slated for removal.. ",
    "RobertWSaunders": "I totally agree with @hon2a, working locally it is sometimes nice to clean out your node_modules directories and do a fresh install if you are running into some strange NPM issues. When running --hoist packages do get installed at the root and as a result the lerna clean command sort of breaks down and becomes less useful. To your point @evocateur, removing the root node_modules would remove your lerna dev dependancy (assuming you aren't using a globally installed version) which also isn't great. I think we have a couple of options here:\n\nUpdate the documentation to reflect this as a side effect of using --hoist.\nWhen using lerna clean remove any hoisted modules from the root node_modules folder.\n\nI'm not sure what the feasibility of the second option is but if we can discuss here about a possible solution I might be able to find time to put up a PR.. Ok makes sense, I'll make a PR to update the documentation then. That said, if lerna clean truly is redundant I think it should be phased out, but I'll leave that to someone else if it matters so much.. @evocateur I've added a small not in the README in #1492! \ud83d\udcaf . I think this can be closed now that #1360 added it?. @evocateur Can you think of any reason why running lerna bootstrap --ci locally works fine but when running the same command in CircleCI it's failing. I get this error: \n```\nnpm install --unsafe-perm || ((if [ -f npm-debug.log ]; then cat npm-debug.log; fi) && false) && lerna bootstrap --ci\n\nhusky@1.0.0-rc.14 install /home/circleci/project/node_modules/husky\nnode husky install\n\nhusky > setting up git hooks\nCI detected, skipping Git hooks installation.\nadded 739 packages from 427 contributors and audited 37313 packages in 21.674s\nfound 0 vulnerabilities\nlerna notice cli v3.4.0\nlerna info Bootstrapping 2 packages\nlerna info Installing external dependencies\nlerna info hoist Installing hoisted dependencies into root\nlerna info hoist Pruning hoisted dependencies\nlerna info hoist Finished pruning hoisted dependencies\nlerna ERR! npm ci exited 1 in 'qhacks-dashboard'\nlerna ERR! npm ci stderr:\nnpm WARN prepare removing existing node_modules/ before installation\nnpm ERR! cipm can only install packages when your package.json and package-lock.json or npm-shrinkwrap.json are in sync. Please update your lock file with npm install before continuing.\nnpm ERR! \nnpm ERR! \nnpm ERR! Missing: @sendgrid/mail@^6.3.1\nnpm ERR! Missing: axios@^0.18.0\nnpm ERR! Missing: babel-core@^6.26.0\nnpm ERR! Missing: babel-jest@^23.2.0\nnpm ERR! Missing: babel-loader@^7.1.2\nnpm ERR! Missing: babel-polyfill@^6.26.0\nnpm ERR! Missing: babel-preset-env@^1.6.1\nnpm ERR! Missing: babel-preset-react@^6.24.1\nnpm ERR! Missing: babel-preset-stage-2@^6.24.1\nnpm ERR! Missing: bcrypt@^3.0.0\nnpm ERR! Missing: body-parser@^1.18.3\nnpm ERR! Missing: camelcase@^5.0.0\nnpm ERR! Missing: compression@^1.7.3\nnpm ERR! Missing: compression-webpack-plugin@^1.1.3\nnpm ERR! Missing: connect-history-api-fallback@^1.5.0\nnpm ERR! Missing: css-loader@^0.28.9\nnpm ERR! Missing: dotenv@^6.0.0\nnpm ERR! Missing: enzyme@^3.3.0\nnpm ERR! Missing: enzyme-adapter-react-16@^1.1.1\nnpm ERR! Missing: enzyme-to-json@^3.3.4\nnpm ERR! Missing: express@^4.16.3\nnpm ERR! Missing: favicons-webpack-plugin@0.0.9\nnpm ERR! Missing: file-loader@^1.1.6\nnpm ERR! Missing: helmet@^3.13.0\nnpm ERR! Missing: html-webpack-plugin@^3.2.0\nnpm ERR! Missing: jest@^23.6.0\nnpm ERR! Missing: jest-environment-node@^23.4.0\nnpm ERR! Missing: jsonwebtoken@^8.3.0\nnpm ERR! Missing: less@2.7.3\nnpm ERR! Missing: less-loader@^4.0.5\nnpm ERR! Missing: mini-css-extract-plugin@^0.4.1\nnpm ERR! Missing: mjml@^4.1.2\nnpm ERR! Missing: moment@^2.22.2\nnpm ERR! Missing: mongodb-memory-server@^2.2.0\nnpm ERR! Missing: mongoose@^5.2.14\nnpm ERR! Missing: mustache@^2.3.2\nnpm ERR! Missing: nodemon@^1.18.4\nnpm ERR! Missing: querystring@^0.2.0\nnpm ERR! Missing: react@^16.2.0\nnpm ERR! Missing: react-dom@^16.2.0\nnpm ERR! Missing: react-emoji-render@^0.4.4\nnpm ERR! Missing: react-redux@^5.0.6\nnpm ERR! Missing: react-router-dom@^4.2.2\nnpm ERR! Missing: redux@^4.0.0\nnpm ERR! Missing: redux-form@^7.2.1\nnpm ERR! Missing: redux-form-validators@^2.3.2\nnpm ERR! Missing: redux-saga@^0.16.0\nnpm ERR! Missing: style-loader@^0.21.0\nnpm ERR! Missing: supertest@^3.3.0\nnpm ERR! Missing: url-loader@^1.0.1\nnpm ERR! Missing: validator@^10.7.1\nnpm ERR! Missing: webpack@^4.14.0\nnpm ERR! Missing: webpack-cli@^3.0.8\nnpm ERR! Missing: webpack-dev-server@^3.1.4\nnpm ERR! Missing: winston@^3.1.0\nnpm ERR! \n```\nAs you can see, the command being run is npm install --unsafe-perm || ((if [ -f npm-debug.log ]; then cat npm-debug.log; fi) && false) && lerna bootstrap --ci. Only reason I am calling npm install before  lerna bootstrap is because lerna bootstrap requires lerna to be installed. Is that logic wrong?. Thanks @evocateur! I had tried without hoisting but taking a second look I was able to get it. Yeah I got rid of --unsafe-perm, thanks for the tip, don't know how that got there.. ",
    "davidhouweling": "I just tried it but it doesn't look like it resolves sibling packages. This is evident when you do testing for example.. So after a bit more experimenting and searching other issues, I had to run the  prepublish and prepare scripts of each package.... @evocateur I think there is a difference of opinion there. From the yarn blog itself:\n\nJest relies on Yarn to bootstrap the project, and on Lerna for running the publish command(s).\n\nBased on this, I believe https://github.com/lerna/lerna/blob/master/commands/bootstrap/index.js#L90 should also execute https://github.com/lerna/lerna/blob/master/commands/bootstrap/index.js#L95-L104. Thanks for the response and I am sorry I was a bit vague with my first comment. \"it' being using workspaces as directed by the blog post and lerna.\nAfter a bit of digging on the yarn issues side, it at least is an issue on their end that is tracked as well: https://github.com/yarnpkg/yarn/issues/3911\nFor now, the work around as mentioned is to use lerna run prepublish && lerna run prepare but yes, I agree that it does not require work on lerna side but at yarn side.\nHopefully your comments and mine here for now will help with others who approach this as well.. seems like a workspaces issue?. I have an issue where one of the prepare scripts sometimes fails out due to certain issues... when it does it stops the publish entirely, however lerna has already pushed to git the publish and the tags even though none of the packages were actually published. Ideally the push to git shouldn't occur until after the publish has been completed for the packages... and if a package fails, it should revert all publish commit and all the tags.. Have you tried lerna publish patch --preid=alpha? It does create git tags and pushes them to the branch you're on though. The behaviour described by OP was the behaviour in version 2 but was changed in version 3 (unsure as to why).. ",
    "amiller-gh": "So, fun fact, as of https://github.com/npm/npm/pull/15900, Yarn@1.5 and NPM@5 now have different behavior for the file: specifier. It appears yarn has no intention at this time of changing the behavior of file:. https://github.com/yarnpkg/yarn/issues/4212\nBut! Yarn has the new link: dependency type with the same behavior as NPM's file:! https://github.com/yarnpkg/yarn/pull/3359 The day is saved!...\nAlmost \ud83d\ude2cLerna appears to use node-pakage-arg under the hood (as of 3.0.0 at least) to parse dependency values, which does not implement Yarn's special link: dependency type: https://github.com/lerna/lerna/blob/master/core/package-graph/index.js#L73\nSo, right now in 3.0.0-beta.0, Lerna just dies with an Error: Unsupported URL Type \"link:\" when you try and use Yarn's link: specifier.\nUnfortunately, you can't just use the file: specifier with Yarn right now either. As of at least yarn@1.5.1, when you yarn install in a workspace enabled project, with file: specifiers in your workspaces' dependencies, it will both symlink the modules into the project root, and copy a local version into the workspaces' node_modules.\nThis breaks Lerna, because as Lerna crawls the package graph and builds / tests each package in succession, the local module installed in each workspace's node_modules does not update with the built files (remember, no symlink), and all builds after the first layer in the package graph fail because it doesn't have access to the built output.\nSo, until:\n 1. Yarn adopt's NPM's file: specifier behavior, or;\n 2. Yarn fixes the existing bugs when using file: in a workspace enabled project, or;\n 3. Lerna provide support for yarn's link: specifier by replacing node-pakage-arg with something else, or by rewriting link: => file: it before passing it to node-pakage-arg\nThen Lerna will not work with local dependency references in Yarn \ud83d\ude22 (its been a long day). The bugs with file: are a problem specifically when using Yarn workspaces, making file: relative paths completely un-usable with lerna at the moment.\nBecause node-pakage-arg does not support link: usage of link: seems to break any lerna command that needs to construct a package graph , throwing Error: Unsupported URL Type \"link:\", including lerna run test. So, we can't use the link specifier either, even though it has the correct behavior \ud83d\ude2c \nFor other reasons \u2013 that I'm happy to go into if need be \u2013 we do need to use relative paths to reference other packages in the workspace right now. Has to do with other edge-cases around linking together un-published modules.... As a proof-of-concept (and proof-of-sanity) I made a small local change to lerna where I blindly replace link: with file: before passing it in to node-package-arg, and it fully enables this type of workflow, since Yarn's link: behavior isn't broken for mono-repos:\njavascript\n// lerna/src/PackageGraph.js:73\nlet depVal = graphDependencies[depName];\ndepVal = depVal && depVal.replace(/^link:/, 'file:');\nconst resolved = npa.resolve(depName, depVal, currentNode.location);\nIt enables the relative path workflow for Yarn and Lerna quite nicely, even if it doesn't feel very clean. Without some type of fix like that above then Lerna > 3.0.0 will not be able to support any type of relative path modules in Yarn (until if/when they fix the file: bugs). However, even after file:'s behavior in workspaces is fixed, the link: syntax will continue to throw hard errors in Lerna unless it is taken into consideration.. @evocateur, awesome \ud83d\udc4d  By putting the fix here, does this also plug the holes left by link: when publishing a module \u2013 like we do with file:, added in https://github.com/lerna/lerna/pull/1262?. Beautiful! \ud83d\ude04 . ",
    "mishaor": "Can I work at this one?. The feature is kinda done locally, I need some repositories to test.. This feature works but no test are written for it. https://hastebin.com/ofewinerat.sql. Well, somehow test doesn't pass :/. Okay, I really can't work on this pull request today, but I've made a reminder in Google Now for all tomorrow day. Should be done tomorrow in evening/afternoon \ud83d\ude42. Oh my god, I want to contribute on some other issue!. ",
    "mnutt": "I'm not quite sure I understand running tests from the root? The output above is running the test across all of our packages from the root of the repository, which is why the output from different packages get interleaved when running in parallel.\nThe reason I thought that might be generally useful was that it's pretty hard to visually parse any interleaved output from multiple processes, such as in tools like foreman: http://blog.daviddollar.org/2011/05/06/introducing-foreman.html Would you be open to a command-line flag to enable it?. We're running into this issue too, and it causes Travis CI to truncate the logs since stdout is very long and gets repeated by lerna. The source of the duplicates are here:\nhttps://github.com/lerna/lerna/blob/436cfe1/core/command/lib/log-package-error.js#L10-L18\nWould it be worth considering having this logging controlled by the loglevel? The desire would be to have a loglevel that produced stdout/stderr while streaming the commands, but didn't log the entire stdout/stderr when reporting errors.. Hey @evocateur, I'm curious if you'd accept a PR to turn the logging down? Our use case is pretty similar to the one above, where we have a number of projects in a monorepo and use lerna with --since to only run tests on projects that have changed between commits. There's a fair amount of stdout, which lerna ends up duplicating if any test fails.. ",
    "lucantini": "Maybe I've misread some configuration or command that I have to set/run in order for git to see those folders.. That's the point, it simply doesn't see any changes, so I can't add them.\nTo create a new lerna package inside of the packages folder I just need to add the folder inside the packages folder, is this correct? Or do I have to run a command to create the package folder and then populate it with the files?\nIf by adding a package to the package folder it should be already in my packages list, then it's indeed a git problem.. I am adding a folder with contents inside. But if that should work, then it's probably a git problem.. I found out what my problem was and it was related to the WebStorm IDE.\nI'll leave a link here in case anyone stumble upon it.\nThanks for the help :). ",
    "Vistur": "\nIt is still possible that during the publish to npm, changes are added to the remote; which would make the git push fail.\n\nMaybe I'm saying something stupid but, would git pull right before GitUtilities.pushWithTags solve the issue? Maybe there is a reason that I can't think of not to do that.\nI could open a PR with the changes if approved.. Not being able to push also leaves the remote in a conflicted state with npm registry though \ud83d\ude22. Not sure what would be a good solution to the problem.\nThank you so much for the super fast reply btw!\nLove your job \u2764\ufe0f . ",
    "aholtkamp": "Hm...this was not explicitly stated in the documentation (or I might have missed something). The missing error leads to the assumption that this is just a bug. Everything else works fine in that constellation, \"lerna run\" delegates to the inner packages, even the \"lerna clean\" takes the sub packages into account again.\nIf changing this is no possibility, what about a \"useWorkspacesEntry\" configuration that just controls where the information is retrieved from (defaults to: useWorkspaces, if true use packageJson.workspaces and fallback to lernaJson.packages otherwise just use lernaJson.packages)?. Ok, thanks for your input! I consider this issue as solved.. ",
    "judewang": "@lili21 hi, I have the same issue, how did you fix it?. @lili21 I have my NPM_TOKEN inside ~/.npmrc, but haven't try to add it to every pacakges. Will take it a try, thanks.. > Lerna will never publish packages which are marked as private (\"private\": true in the package.json).\n@lauriejones I was also confused about this suggestion, then I tried just publishing scoped packages without the public settings, and it just worked\ud83e\udd29. @Hotell Hi, just try removing publishConfig from package.json \ud83d\ude09 . ",
    "lauriejones": "I am struggling through this at the moment trying to publish packages from CI. Is there no way to reference an .npmrc file in the project root rather than add one in each package?. From what I've read and experimented with, lerna publish does not support publishing private, scoped packages?. Publishing scoped packages, privately to the default npm registry? Well that's great then! Are there any examples I can look at? \ud83d\ude42  \nAny time I tried to use the publish command with scoped packages they ended up public on the npm registry.\nThis section in the publish command readme suggests it is not possible. So perhaps it should be updated.\n\nLerna will never publish packages which are marked as private (\"private\": true in the package.json).\n\nNote: to publish scoped packages, you need to add the following to each package.json:\njson\n  \"publishConfig\": {\n    \"access\": \"public\"\n  }. ",
    "Hotell": "just curious why was this closed ?\nI'm having the same issue:\n\nI'm correctly logged:\n\n\nlerna version \"3.8.0\"\npublishing scoped packages ( not private )\nlerna exec --no-bail -- npm publish dist\n\npackage.json ( per package )\njson\n{\n  \"publishConfig\": {\n    \"access\": \"public\",\n    \"registry\": \"https://registry.npmjs.com\"\n  }\n}\nlerna.json\njson\n{\n  \"packages\": [\"packages/*\"],\n  \"npmClient\": \"yarn\",\n  \"useWorkspaces\": true,\n  \"command\": {\n    \"init\": {\n      \"exact\": true\n    },\n    \"create\": {\n      \"homepage\": \"https://github.com/hotell/ts-setup\",\n      \"license\": \"MIT\"\n    },\n    \"version\": {\n      \"allowBranch\": [\"master\"],\n      \"message\": \"chore(release): publish %s\",\n      \"conventionalCommits\": true\n    },\n    \"publish\": {\n      \"allowBranch\": [\"master\"],\n      \"message\": \"chore(release): publish %s\",\n      \"conventionalCommits\": true\n    }\n  },\n  \"ignoreChanges\": [\n    \"**/__fixtures__/**\",\n    \"**/__mocks__/**\",\n    \"**/__tests__/**\",\n    \"**/*.md\"\n  ],\n  \"version\": \"1.0.0\"\n}\n. Why would I do that ? it is required to mark access: public when publishing scoped packages .\nUPDATE:\nwhen publishing via lerna it works. Which is very strange indeed \ud83d\udea8\nsh\nlerna publish --contents dist from-package. > And you shouldn't need to pass from-package unless a previous lerna publish errored after the commit and tag were pushed.\nI don't trust/wanna rely on lerna publish solely. I'm using lerna version to get changelogs and version bumps. everything else is handled manually. That's why lerna publish from-package solved my issue :)\nhttps://github.com/Hotell/ts-setup/blob/master/package.json#L42-L46\nAnyways, thanks for help folks!. ",
    "netanelgilad": "Thanks @evocateur I tried your solution. I probably didn't fully get it. Am I not supposed to use lerna bootstrap any more? Because once I do npm i packages/* it creates symlinks to the packages in the root node_modules and the packages themselves don't get their own node_modules so it somewhat solves the problem but introduces another one. If I have package-a depending on lodash@3.0.0 and package-b depending lodash@4.0.0 the version of lodash that is created in the root node_modules is just one of those, and the packages do not get their own correct copy of lodash.\nI know this issue may have a bigger scope than just lerna, but I'm starting the discussion to find the path forward across lerna and package managers to a solution where developing inside a monorepo doesn't create discrepancies between the way the modules would work in production and in development.\nI don't want to take too much of your time, but if you have any references to prior art regarding the kind of solution I suggested, I would love to dive deeper into it. I can try mapping out all the edge cases to see if a solution can be found to handle all known cases.\nLet me know If what I said about your suggested solution is wrong in someway. I can open a repository to showcase my issues if that would be clearer than my description.. > I personally consider sibling packages in a monorepo that have conflicting majors of a dependency to be a bug. They are related, after all, else why bother putting them in the monorepo in the first place?\nInteresting. Do you consider that as a design principle of lerna? It could be that my wanted use case is outside the scope of how lerna sees monorepos. For me, I see a monorepo as a tool to develop independent (not only version independent) packages along side each other for ease of development (no need to constantly yarn/npm link them) and easily publish those packages. But my emphasis was on independent, so that if one package should one day become it's own repo, I can just pluck that package out of the monorepo into it's own repo, and no other changes are needed, and the monorepo doesn't enforce any restrictions on the packages that it contains.\nYou gave me some food for thought, and maybe my need is for a different kind of tool (smells like a weekend project \ud83d\ude04), though I, personally, am not for fragmenting the JS community even more. If you feel this is out of scope, feel free to close this issue, otherwise I'd be happy to dive deeper.\nCheers @evocateur \ud83c\udf7b . I can definitely see your points but the real issue isn't really reducing the number of git clones. I really wouldn't mind a tool that even works over different git repositories and gives my some of the features lerna provides for those git repositories. It's all about how we define the scope of a git repo over the packages that it contains. \nFor me, I would love to break down my code into as many packages as possible, the smaller and less responsibility the better. But in order to be able to do that, I need a tool that allows me to develop multiple packages in tandem (cause a change to one package leads me to understand I need a change in a dependency package, and I want to check the changes in the dependency package against the new need of the dependent package without deploying the change in the dependency package yet).\nThanks for the insights, I'll give it some more thought, and I guess this really is outside lernas scope now that I think I understand it \ud83d\ude00 . ",
    "Vunovati": "@evocateur do you know when we can expect a new beta release containing the fix?\nI cannot reference it as a git or github dev dependency (\"lerna\": lerna/lerna#master\") in my package.json due to this repo's project structure which prevents it from being installed that way. I  can't think of any other options. Also, Thank you for merging this.. ",
    "casey-speer": "Hmmm maybe I'm missing something about file: specifiers, but wouldn't this mean that I have to always manually include the file: dependencies of a package X from my lerna repo in any host app that wants to use X?. Perfect I'll give this a shot, thanks!. ",
    "jeremiahrhall": "For repos with a large number of entries in lerna.json's  packages configuration, this approach is complicated. Is there really no desire to make it possible to use npm ci instead of install?. ",
    "vidartf": "If you cannot use ci with --hoist, then shouldn't --hoist imply --no-ci ?. ",
    "chriseppstein": "@evocateur Sorry, this is in 3.0.0-beta.2.. @evocateur I'll let you know when I find a project with perfect tests. don't hold your breath tho.. @evocateur Thanks for the quick iteration. \ud83d\udc4f . Jamie, that\u2019s why a list-based approach is problematic.\nOn Wed, Aug 29, 2018 at 11:29 AM Jamie notifications@github.com wrote:\n\nActually, I'm not sure how we'll be able to do it if we end up adding or\nremoving companies from the list. It will have to be a versioned exception.\nProbably just easier to have it be custom\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/lerna/lerna/issues/1618#issuecomment-417057492, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAHL_u-_5MuXe7iEc--ad1tdlfNYUh-ks5uVt2JgaJpZM4WQ7iB\n.\n. \n",
    "darrenjennings": "Shouldn't this be documented in the main readme?. Background: Currently using lerna (seemingly inaffectively) for a private monorepo of vue components. We are hoping to continue using/migrate but were scared a bit by https://github.com/lerna/lerna/issues/1692 which explains more about how git tags are fundamental to detecting changes and declaring versions. lerna publish from-package seemed to be a way to ask lerna \"how might I publish my packages based on what we know about the npm registry version?\". This to say that if lerna could provide insight into how my monorepo needs to be altered in order to sync my tags with version control <-> registry, then a general purpose query API would be welcome. I think there is something fundamentally wrong with how we set it up and began publishing, so if the CLI could show this, it would be nice. \nI don't have much insight into lerna or its history, so from an outsiders perspective this ticket made the most sense to me. Based on your comment and looking at Lerna commands, they seem to follow git and npm command semantics. To use an analogy, I would like to be able to see a git status of my lerna repo e.g. lerna status which would tell me something about my local + remote (registry). Specifically what tags I need, what versions are on NPM etc.\noutput for lerna changed:\nbash\n$ lerna changed\nlerna notice cli v3.8.0\nlerna info versioning independent\nlerna info Looking for changed packages since @kongponents/kbutton@0.0.1-beta.1\n@kongponents/kalert\n@kongponents/kbutton\n@kongponents/kcard\n@kongponents/kemptystate\n@kongponents/kicon\n@kongponents/kinput\n@kongponents/kmodal\n@kongponents/kpop\n@kongponents/ktable\n@kongponents/ktoaster\nlerna success found 10 packages ready to publish\nbut lerna publish from-package could tell what really needed publishing:\n```bash\n$ lerna publish from-package -y\nlerna notice cli v3.8.0\nlerna info versioning independent\nlerna info Verifying npm credentials\nlerna http fetch GET 200 https://registry.npmjs.org/-/npm/v1/user 264ms\nFound 1 package to publish:\n - @kongponents/kalert => 0.0.1-beta.6\nlerna info auto-confirmed\nlerna info publish Publishing packages to npm...\nlerna http fetch GET 200 https://registry.npmjs.org/-/org/darrenjennings/package?format=cli 95ms\nlerna WARN ENOLICENSE Packages @kongponents/kalert are missing a license\nlerna success published @kongponents/kalert 0.0.1-beta.6\nlerna notice\nlerna notice \ud83d\udce6  @kongponents/kalert@0.0.1-beta.6\nlerna notice === Tarball Contents ===\nlerna notice 526B  package.json\nlerna notice 3.4kB KAlert.vue\nlerna notice 138B  Readme.md\nlerna notice === Tarball Details ===\nlerna notice name:          @kongponents/kalert\nlerna notice version:       0.0.1-beta.6\nlerna notice filename:      kongponents-kalert-0.0.1-beta.6.tgz\nlerna notice package size:  1.7 kB\nlerna notice unpacked size: 4.0 kB\nlerna notice shasum:        \nlerna notice integrity:     \nlerna notice total files:   3\nlerna notice\nlerna http fetch PUT 200 https://registry.npmjs.org/@kongponents%2fkalert 3881ms\nSuccessfully published:\n - @kongponents/kalert@0.0.1-beta.6\nlerna success published 1 package\n```. ",
    "jacefarm": "from hell's heart, i stab at thee \ud83e\udd23 . ",
    "goldenshun": "\ncharmingly obtuse\n\nI chuckled at that.\nThanks for the tip with \"private: true\".  now simply runs npm install, npm build and npm start for their npm deployments.  I don't think its that obtuse and it works well for single apps, but it is restrictive and does not presently work well for multi-application deployments.. @j I hear you and what you describe is similar to what I was trying to achieve back when I first opened this thread. I recently realized that my original desire might have been misguided. We are now dealing with multiple, disparate applications that we want to share some code.\nSince we want to scale our team and scale our applications, it doesn't really make sense for us to hitch all of those together with the same exact dependencies. In a larger team, surely there will be a scenario where I want to make a change to a package but that package has multiple applications that depend on it. Do I really want to test and deploy the change I made in all of those applications? What if I don't know anything about them? Do I need to reach out to the owners? The concept became undesirable real fast.\nWhat become much more palatable for us was to do what you did and pull all shared stuff into a mono repo and use private npm. The real gain is versioning, which means you can update your package and update the app you care about and allow the owners of other applications to upgrade as they need to. Obviously this workflow isn't as simple as if you were just working on a single application in isolation but we have found it to work well enough for us and lerna does make it easier for us to develop and publish those packages.. @j I do agree that it could be helpful for that use case. In our scenario, we actually have an example app in our lerna mono-repo and sometimes working with that is painful because npm handles linking and peer dependencies quite poorly. It would be nice to be able to use lerna to bootstrap packages for that app but not worry about publishing that app, which does have a package.json. As stated before, lerna publish --scope could help with that.. I see the same warning when I try to run bootstrap. bootstrap does not seem to support the --concurrency flag so I'm not sure how I can correct this.. ",
    "j": "Our current project is full of a lot of micro-services that share dependencies and I started with lerna / workspaces thinking, \"damn, I can have everything in a single repository but also be 'separate'?\", and quickly realized that non-packaged (webpack/rollup/etc) don't quite work right.  So we were forced to put all shared stuff in a mono-repo and use private NPM... and I can honestly say that this workflow kind of sucks.  It's the right tool for the job for packages and libraries but for \"private\" applications, it'd be so nice to have a single repository with shared packages and full application libraries that use those packages that can all be individually deployed at the root all at the same time / in one command.\nI'm sure that day will come, until then, it's been clear that Lerna is not the tool for this job.\n:(. @goldenshun @djskinner It'd be nice to have lerna / workspaces accept mono-repo for publishing and have it so that an organization can have a structure such as (eg):\nexample/\n  packages/\n    react-component-foo\n    blog-repository\n    account-repository\n    account-service\n  deployables/ (can be named anything...)\n    www/\n    admin-www/\n    account/\n    chromium/\nAnd back to what @goldenshun said for big teams / applications.  I'd like to use a mono-repo where it makes sense and organize deployments and that have shared packages.  The main concept would be: \"React SSR + GraphQL server\".  I'm sure most can get by with just having two separate areas package.json and installing deps within each folder on their own.  Our current use-case does react + chromium stuff so shared code is everywhere but I can't deploy without pain with Lerna.. It's so interesting that so many people want this as a feature but it still remains for libraries.. Yeah, I got it to work actually, it's just not very intuitive.  I'd expect a \"private: true\" package to always be private on NPM no matter what, so just specifying that it's publishable should publish as private.\nI'd like to see lerna have a global publish config that makes every package private by default unless specified otherwise.  That way someone won't accidentally publish private stuff.. ",
    "djskinner": "I know managing applications as well as packages isn't what lerna is designed for but we have had some reasonable success with it and it feels so close to being a great solution with the best possible developer experience (no npm link shenanigans!). As pointed out the main issue for us also came down to deployment/publishing.\nThings break down for us because lerna just looks for the last tag regardless of what it's meaning/name is. That means we weren't able to tag deployments separately from package versioning because lerna would then wrongly use the non-lerna tag as if it were the last version tag.\nIf it was possible to choose which packages/apps to version and publish (in the case of packages only) e.g. with a lerna publish --scope type command then I think we'd have a pretty good solution although I understand there have been rejected requests for a lerna publish --scope type functionality in the past so I assume it's not feasible.\n. BTW lerna bootstrap --hoist does work in this example. However I'm seeing snippets of information in various issues about how npm install should be sufficient and that lerna bootstrap is obsolete when npm@5 is used. So when using this scheme do I have to put all devDependencies in the root?. Sounds good, I'll have a go at that today. I have a couple more questions if I may.\nIs there a lerna add command for putting devDependencies in the root package.json only? lerna add @types/node --dev will add it to all package.json. Is the recommended approach simply npm install @types/node?\nFor lerna/lerna in https://github.com/lerna/lerna/blob/master/CONTRIBUTING.md it suggests using npm i rather than npm i packages/* or the equivalent for the lerna repo (which presumably would be a more complex command due to the multiple package directories). How is it that npm i works for lerna/lerna?. Hmm, I think I'm going to have to go back to yarn workspaces as I just cannot get this to work for my requirements. For reasons I don't understand I simply cannot convince npm to add node_modules/.bin references to each package so that npm scripts work as expected yet yarn workspaces does this out of the box. \n\nYou should be doing this anyway in a monorepo.\n\nI can see some sense in putting all devDependencies in the root is a viable option for some projects but this isn't going to work for me. Each package needs its own lint/test/build requirements and it would be overly complex if not impossible to have a single command at the root that does the right job for each package. Additionally, after thinking it thought I subscribe to the view described here: https://github.com/lerna/lerna/pull/1343#issuecomment-375577169\n\nWe prefer to keep our package scripts designed in a way that's independent from the monorepo layout, so that any per-package script works on its own and can be invoked e.g. via cd packages/{name}; npm run build.\n\nIs lerna not intended/intending to support this approach in the future?. Going to close this as I managed to get things working very nicely with yarn workspaces. Hopefully I'll be able to achieve the same with npm in the future. Thanks for your help.. Also having issues with the new uncommitted changes check. The problem is that we generate a .npmrc file on CI with the relevant credentials (we don't want committed to source control).. This little known feature of git did the trick for us: git update-index --assume-unchanged .npmrc. Yeah that would also work in my case since the committed version will rarely change. Not ideal for package file though. The approach of modularising everything is great. I\u2019m amazed how many different approaches there are to version, release and publish.. We've just bumped lerna and are now hitting this issue. The problem is that we generate a .npmrc file on CI with the relevant credentials (we don't want think committed to source control) so there's always going to be this uncommitted change in the working tree (and always was, lerna never complained before). This little known feature of git did the trick for us: git update-index --assume-unchanged .npmrc. ",
    "ZempTime": "For future reference, here's that issue in the yarn repo: https://github.com/yarnpkg/yarn/issues/5538. I think this might be a duplicate of https://github.com/lerna/lerna/issues/1330. > In a lerna monorepo, your build + test scripts should generally be run from the root, as that is the location you should spend most of your time at in the shell during development.\n@evocateur, thank you for making me think I'm not crazy. As I've been staring at this and learning about yarn workspaces I'm wondering why that's not the case currently\nI know people are doing it (theres an example). I'm just now getting into a codebase and finding I can't both lint and serve the ui without a bunch of extra bash scripts and crazy folder sizes. We can probably consider this issue closed, although I'm gonna come back here and report what got me to 'working' regardless of whether or not the issue is open. I got this working. I realized in https://github.com/Polymer/tools/issues/273 I could just symlink across my packages up to the top-level node_modules. Not sure why I didn't just do this in the first place.\nAs for how I did it, here's the api surface I built around. I added this to my root package.json:\n\"symlinks:apply\": \"node ./packages/monorepo-cli/bin/symlinks.js apply\",\n    \"symlinks:remove\": \"node ./packages/monorepo-cli/bin/symlinks.js remove\",\nI have a bunch of convenient scripts and things very specific to my project, so I've been gathering those under a monorepo-cli package. This act of symlinking the way I need became one of those things.\nNow I just run yarn run symlinks:apply & layer that into other commands, like so:\n\"monorepo:setup\": \"yarn install && yarn run symlinks:apply\",\nTo make sure I was forward-compatible with changes I couldn't anticipate in the project, I've added a  flag to all the package.json's:\n\"myOrg\": {\n  \"symlinkWorkspaces\": true\n}\nIf that's on, I symlink. So I'm down to a one command to get up and running, even on new machines. And it's beautiful :)\nClosing this issue as it's now resolved. ",
    "renatonmendes": "My issue is related to:\n```\n  \"npmClient\": \"yarn\",\n  \"useWorkspaces\": true,\n```\nAfter removing it, it started bootstrapping, but now I'm confused. Is using yard different than npm? Thy is the original not working? Also, how to bootstrap and hoist using yard?\n. Thanks @evocateur.\n\nYarn is in fact different than npm.\nIs there any docs on thats differences?. \n",
    "afrasso": "Any update on the lerna outdated command?. ",
    "VladimirGrenaderov": "I'm sorry for confusing - I thought that buggy code snippet from https://github.com/lerna/lerna/blob/master/commands/bootstrap/index.js makes it clear. So, do you need any additional info? . ",
    "p-ob": "Well, I feel dumb. I definitely just provided an invalid workspace configuration... I'll close this issue as \"user error.\" Lerna shouldn't have to validate something like this. \nMy mistake! Thanks for looking into it.. ",
    "manelpb": "I'm also having the same issue :/ . ",
    "bradfordlemley": "What's an easy way to lerna exec on only the components below?\npackages\n  /apps\n    /coolapp\n  /components\n    /asparagus\n    /coolbeans\nI'm not seeing the easy solution using lerna ls.  @vjpr -- did you figure something out?. ",
    "bajtos": "@evocateur Thank you for coming back to me so quickly \ud83d\ude47 \n\nWhy can't the scripts be run from the root?\n\nWe prefer to keep our package scripts designed in a way that's independent from the monorepo layout, so that any per-package script works on its own and can be invoked e.g. via cd packages/{name}; npm run build.\nIs there a way how to configure lerna to run package scripts from the root, instead of the per-package directory? If there is, then I agree we don't need LERNA_ROOT_PATH.\n\nIt's trivial to export the env var yourself when calling lerna run.\n\nNot on Windows, at least AFAIK. I think one has to use cross-env to set the env var and also figure out how to use %cd% instead of pwd (or $PWD) to obtain the current working directory. I have no idea how I would achieve that second part, TBH.\nIMO, this is also about consistency - why lerna exec provides LERNA_ROOT_PATH environment variable, but lerna run does not? Why your argument about exporting the env var manually applies to my patch, but was not raised during review of #873?\nAnyhow, I am not married to the solution proposed in my patch. If we can find a different (but still reasonably easy) way allowing our build tooling to detect monorepo root directory, then I'll be more than happy!. We ended up writing a short wrapper to set LERNA_ROOT_PATH before executing lerna itself, see https://github.com/strongloop/loopback-next/blob/63c2f372ad5071a10828db0535dee38a23377694/bin/run-lerna.js#L25.\nSince it looks like the project maintainers are opposed to my proposed changes, there is little value in keeping this pull request opened.\nHaving said that, I would still prefer to have lerna set LERNA_ROOT_PATH, so that we don't have to maintain our wrapper. If the maintainers ever change their opinion, then I am happy to update this pull request so that it can be landed.. I think this change is not related to my work, but it's needed to make npm run ci pass.. ",
    "bjoerge": "I'm also having this issue. Lerna reports that all packages were successfully published, but only some of the packages actually gets published. Not sure if the issue is on the lerna side or the npm side.\nManually publishing the missing packages from within each package subfolder works.\nIt's also possible to run lerna exec --bail=false -- npm  publish and ignore the errors for the conflicting versions.. I had this issue without --force-publish=* though.  And it happened when just publishing two packages for a patch release. One package got published, the other did not (lerna still reported both as successfully published).\nBut yeah, I'm also using yarn as npmClient.. ",
    "byCedric": "Well, I'm not sure if I'm doing it wrong but I guess I also get this issue. A package was updated, including the cross reference, when using lerna publish. But, and here is the fun part, the one that got published actually depends (in de dependencies list) on the newer version of the non-published package \ud83d\ude05 So that means that everyone who (partially) gets the new update will have a bad time of crashing npm when using exact versions... \nWhen trying to fix this with --force-publish I was also left in the cold. As @pixelass and @bjoerge point out already, the --force-publish doesn't do anything... So I guess I have to workaround this for now with lerna exec --bail=false -- npm publish. But please, keep in mind that this is not very user friendly for noobs like me.\nI should mention that I'm using 3.0.0-beta.21 right?. Ah well, I guess you can safely say that I was doing it wrong then \ud83d\ude2c If its a constraint by NPM or the NPM registry, well, that kinda rules Lerna out as you said. But maybe its an idea to put information about these constraints somewhere in the docs? That way me, and my fellow noobs, will not raise unnecessary issues \ud83d\ude2c . ",
    "b4lk0n": "Faced a similar issue. Publishing anonymously to private registry (proget). When yarn publish works as expected, but lerna publish fails with \"No token found and can't prompt for login when running with --non-interactive.\" error . ",
    "ZeeCoder": "One of the edge-cases I've been having is that I cannot seem to publish brand new packages with Lerna, only once I've done it manually does it seem to work.\nOtherwise it works fine for me though.. The thing is I can publish new packages using npm, just not with lerna.\n\ud83e\udd37\u200d\u2642\ufe0f\nOn Wed, 28 Mar 2018, 23:49 Jeff Burn, notifications@github.com wrote:\n\n@ZeeCoder https://github.com/ZeeCoder\nOne of the edge-cases I've been having is that I cannot seem to publish\nbrand new packages with Lerna, only once I've done it manually does it seem\nto work.\nI don't know what your setup is but we've previously run into a similar\nissue with publishing locally vs on CI. In our case, the user account on CI\ndid not have its email address verified by npm, therefore npm would not\nallow it to publish new packages (although it was still ok publishing\nupdates to existing packages).\n@evocateur https://github.com/evocateur Thanks so much for your reply,\nthere are some enlightening points here. At my company we haven't had much\nchance to try npm@5.8 yet, but it sounds like that might fix a lot of the\nissues that we've encountered with other npm@5 versions that have\nprompted us to look at moving to yarn.\nIn regards to lerna, I've seen you've mentioned removing lerna bootstrap\nin favor of file-relative module imports. In a lerna@3.x/npm@5.8 world,\nwithout lerna bootstrap, do either lerna or npm have a means of ensuring\nthat sub-projects in a monorepo with common third-party dependencies share\nthe same version? (e.g. an angular app and library sharing @angular/core)?\nThis feels like the main use-case for lerna, but I'm confused how this\nwould work without bootstrap (I feel like I'm missing something obvious\nhere).\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/lerna/lerna/issues/1349#issuecomment-377063439, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ADglEoy-TPUJBgAiafUX7lCRVIcplPCiks5tjBNrgaJpZM4S8Af9\n.\n. \n",
    "jeffora": "@ZeeCoder \n\nOne of the edge-cases I've been having is that I cannot seem to publish brand new packages with Lerna, only once I've done it manually does it seem to work.\n\nI don't know what your setup is but we've previously run into a similar issue with publishing locally vs on CI. In our case, the user account on CI did not have its email address verified by npm, therefore npm would not allow it to publish new packages (although it was still ok publishing updates to existing packages).\n@evocateur Thanks so much for your reply, there are some enlightening points here. At my company we haven't had much chance to try npm@5.8 yet, but it sounds like that might fix a lot of the issues that we've encountered with other npm@5 versions that have prompted us to look at moving to yarn.\nIn regards to lerna, I've seen you've mentioned removing lerna bootstrap in favor of file-relative module imports. In a lerna@3.x/npm@5.8 world, without lerna bootstrap, do either lerna or npm have a means of ensuring that sub-projects in a monorepo with common third-party dependencies share the same version? (e.g. an angular app and library sharing @angular/core)? This feels like the main use-case for lerna, but I'm confused how this would work without bootstrap (I feel like I'm missing something obvious here).. @rdsedmundo Thanks for the input. This makes me nervous, as I am yet again looking at moving projects to yarn from npm, after running into yet another build- and application-breaking bug in npm. I've raised this with the npm team, but it's hard to gauge how seriously its being taken or a timeline for a fix.\nBugs are, of course, understandable and expected, but we've run into build-breaking bugs on some of our projects with every version of npm since 5.2, with similar things to what you've mentioned: lock files broken, random installs failing, etc.\nOur latest issues, with the latest versions (>6.0), have been some of the most critical, with npm either installing completely incorrect versions, or removing dependencies altogether, leaving us to discover the issue at runtime on our servers, sometimes several hours or days later.. ",
    "raymondfeng": "@evocateur Thank you for the prompt response. I have updated the PR to address your comments. PATL.\nI also wonder how to port it to 3.x if it's accepted.. @evocateur I fixed the issues. The CI should be green now.. @evocateur We cannot set the ci value in lerna.json even when --ci flag is not present on the CLI. Is it by design?. @evocateur We don't check in package-lock.json files and npm ci fails for our build. \n--no-ci works for us. I was trying to do so in lerna.json as we configure other commands there. But the ci property is not honored.. @evocateur Great! We appreciate your prompt response.. The idea is to have sandbox as a location to test packages without changing lerna.json . There are no existing packages from a fresh checkout but packages can be generated by our tests or added any developers who want to validate their applications or modules against our latest code in the monorepo.\nTo make clear, there are two scenarios we use the empty sandbox location:\n\nTest an app or module that depends on our latest code checked out from github without npm link:  \nCheck out our monorepo from git\nDrop your app/module into sandbox\nRun lerna bootstrap\n\nTest your app/module \n\n\nRun integration tests for our CLI\n\nGenerate an app using CLI code into sandbox\nRun lerna bootstrap\nRun npm test on the generated app\n\nDo you consider a location without any child packages invalid? Lerna 2.x supports it well as a placeholder.. @evocateur Thank you for the tips and opinions.\nIf we believe that a location is invalid without any packages, I suggest that lerna bootstrap catch and report the error.\nUsing file: is not a good option for us as we want to allow drop-in of apps/modules into sandbox as-is without changing their own package.json. We also try to avoid to publish pre-releases to npm with --canary. Instead, we use 0.x.y versioning scheme. lerna linked deps are great to use our latest code for development and debugging.\nFor now, we just add an example package under sandbox to work around the issue.. ",
    "nareshbhatia": "@evocateur, thanks for the workaround. Works like a charm!\nWould be good to think of a more robust solution for general use cases.. Sounds good, @evocateur. Thanks for the guidance.. ",
    "pablolmiranda": "I have a branch that I tried to publish from and gave me the following error:\nlerna ERR! Error: Command failed: git describe --tags --abbrev=0\nlerna ERR! fatal: No tags can describe '<my SHA-1 here>'.\nlerna ERR! Try --always, or create some tags.\nAnd when I pass --skip-git it doesn't work. So I took a look in the code and added the check for skipGit before it try to do any git operations and I was able to publish my modules.. I had a successful publish from master. But the branch it is not possible. @evocateur, you suggestion worked. Take a look and let me know if that was what you have in mind.. ",
    "Meir017": "for it to be a maintenance nightmare it would have to change a lot with will make its current documentation a maintenance nightmare.. ok. ",
    "amkoehler": "\nThe assumption is that you are \"graduating\" the prerelease out of alpha/beta/whatever, and no \"normal\"-versioned package (in a lerna context) should ever depend on prereleased local dependencies.\n\nThis applies when using independent versioning too, correct? Not OP, but I similarly found that lerna updated always returns true if my packages are in a prerelease state (e.g. 4.0.0-2). Since the first step of lerna publish is to run the equivalent of lerna updated, it makes sense why the packges in a prerelease state would always get published. . Follow-up from my previous comment, when I run lerna updated it shows packages as updated even when nothing has changed after a release. lerna diff for each package outputs nothing. It wasn't because of the prerelease state as I'd previously thought. \nshell\n$ lerna diff \nlerna info version 2.9.0\nlerna info versioning independent\njavascript\n{\n  \"lerna\": \"2.9.0\",\n  \"npmClient\": \"yarn\",\n  \"useWorkspaces\": true,\n  \"version\": \"independent\"\n}\nedit: did some more digging and I found that if I ran lerna updated immediately after publishing it returned nothing (as expected), but if I made a code change in any one of my packages, all of them then showed up as changed when running lerna updated. . > The version bumps are necessary to retain lerna bootstrap symlinks\nThis makes sense for the dependency versions of that private package, but does the \"version\" key itself need to be bumped in that private package? By nature of this being marked \"private\": true, none of the other packages have the private package as a dependency. . I might not be doing a good job explaining. This is roughly how the package.json looks for our private package:\n{\n  \"name\": \"privatepackage\",\n  \"version\": \"v5.3.4\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@org/pacakge1\": \"4.0.3\",\n    \"@org/package2\": \"4.0.5\",\n    ...\n  }\n}\nWhere the @org/** packages are local dependencies in the monorepo. It makes total sense why the versions of the @org/** dependencies needs to be bumped when they have changes being published. I'm asking specifically about the \"version\" key. I'm not sure why it's getting bumped when, by nature of it being a private package, nothing is being published and no other packages in the monorepo rely on it. \nAppreciate your quick responses. . Sounds good. Shouldn't be too difficult for us to work around this. Thank for the clarification. . ",
    "egoist": "lerna.json:\njson\n{\n  \"lerna\": \"3.0.0-beta.14\",\n  \"version\": \"independent\",\n  \"commands\": {\n    \"publish\": {\n      \"ignoreChanges\": [\n        \"**/*.md\",\n        \"**/example/**\",\n        \"**/test/**\"\n      ]\n    }\n  },\n  \"npmClient\": \"yarn\",\n  \"useWorkspaces\": true\n}\nPreviously versioned as 10.0.0-beta.x. ",
    "fzaninotto": "Same problem here on react-admin, some packages contain no changes after v2.0.2 (e.g. ra-data-graphql), but lerna wants to publish them anyway. Theses packages are dependent on another package that changed since v2.0.2 (react-admin), but it's only as peerDependencies and devDependencies, not as dependencies.\nShould lerna force a republish if a non-production dependency changed?. > A test case repro would go a long way toward fixing it.\nI tracked down the code responsible for that in utils/collect-updates (I think), but there is no test around that I could use as an example for building a new test case. . I tried to understand how your tests are organized and where the dependency resolution is tested in commands/publish tests, but I didn't manage to, sorry. It would be much easier if you had unit tests in the utils/ directory to take inspiration from.. ",
    "t-kelly": "@evocateur looks like this is the problem code for me:\nhttps://github.com/lerna/lerna/blob/58635642ae929d38985b0a458e19eb4f4d89ccba/utils/collect-updates/collect-updates.js#L53-L56\nsemvar.prerelease() returns an array containing the prerelease tag and number, which in turn makes needsBump truthy. This results in any package that uses a prerelease tag to be bumped, even if they have not changed (aka hasDiff() is falsy).\nIf I remove the needsBump() condition from line 59, only the packages that have changed get bumped and things work as intended.\nWhat is the purpose of needsBump()?\nRelated:\n- Docs on cd-version\n- Relevant tests\n. @evocateur looks like this is the problem code for me:\nhttps://github.com/lerna/lerna/blob/58635642ae929d38985b0a458e19eb4f4d89ccba/utils/collect-updates/collect-updates.js#L53-L56\nsemvar.prerelease() returns an array containing the prerelease tag and number, which in turn makes needsBump truthy. This results in any package that uses a prerelease tag to be bumped, even if they have not changed (aka hasDiff() is falsy).\nIf I remove the needsBump() condition from line 59, only the packages that have changed get bumped and things work as intended.\nWhat is the purpose of needsBump()?\nRelated:\n- Docs on cd-version\n- Relevant tests\n. @evocateur -- you should be able to reproduce it by:\n\nCreate a project with a few packages and zero dependencies in those packages.\nSet the versions of those packages to -beta.1\nMake a change to one package.\nRun lerna publish. You will see that even though only one package has changed, all packages get updated because they have beta in their version name.. Even if I'm going from beta.1 to beta.2? Because they're all being updated even I do that.\n\nI agree it should update all packages from 1.0.0-beta.1 -> 1.0.0 if I do a non-prerelease.. @brmscheiner sounds like that needs an issue of its own. Not sure its related to this thread. Recommend you create a new issue with this so its easier to track by the maintainers! \ud83d\ude04 . ",
    "lorenzomigliorero": "Any news about this bug?. ",
    "verekia": "For those who might be in that situation, I didn't realize that if you update one of your package that is a dependency of your other packages it updates all of those as well. Seems pretty obvious now that I think about it, but because the version bump happens automatically in the package.json files, it can be confusing.. Hi! I am trying to use the NPM registry, not a private one, but it seems relevant to this discussion. Lerna keeps trying to authenticate using the Yarn registry when I run lerna publish. I tried the 2 suggested configurations of this thread, \"npmClient\": \"npm\" in the publish command and verifyAccess\": false without success.\nEDIT: Okay I've somewhat identified the cause of this issue. I run lerna locally, not globally. When I run yarn the-task-that-does-lerna-publish, it does the behavior described below, and when I run npm run the-task-that-does-lerna-publish, it uses the NPM registry.\n```js\n{\n  \"lerna\": \"3.4.0\",\n  \"packages\": [\n    \"packages/\"\n  ],\n  \"command\": {\n    \"publish\": {\n      \"npmClient\": \"npm\",\n      \"verifyAccess\": false,\n      \"ignoreChanges\": [\n        \".md\",\n        \"tests/*\"\n      ]\n    }\n  },\n  \"npmClient\": \"yarn\",\n  \"useWorkspaces\": true,\n  \"version\": \"independent\"\n}\n```\n```bash\n\nlerna publish\n// ...\nlerna notice cli v3.4.0\nlerna info versioning independent\nlerna info Verifying npm credentials\n401 Unauthorized - GET https://registry.yarnpkg.com/-/whoami\nlerna ERR! EWHOAMI Authentication error. Use npm whoami to troubleshoot.\nerror Command failed with exit code 1.\ninfo Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.\n```. \n",
    "brmscheiner": "Not sure if this will be helpful for debugging or just cloud the issue further, but our team at work uses lerna and encounters this issue on some of our systems. We have found that two computers can have many things in common but have different results when running lerna publish\n\nMacbook Pros running High Sierra \nlerna version 2.11.0 \nyarn version 1.7.0 \nnode 8.11.2 \non origin master \n\nOne asks to update 30+ repos the other needs to patch only 4. The issue persists after blowing up node_modules and reinstalling, or even after downloading a brand new repo.. @evocateur sorry for the very delayed response. Yes, I just tested and the issue does persist with 3.4.3. ",
    "koresar": "From the top of my head I remember that lerna v1.0 behaved correctly.. ",
    "yvele": "What is the state of this issue? Is this still under investigation?\nI'm a bit confused as everything worked pretty fine before v3 \ud83e\udd14 . @evolutionxbox I have the same problem. > @yvele do you merge using --no-ff?\n@evolutionxbox Nope but it may have happened a couple of times in my git history. Why?. I don't get it... I'm using lerna 3.4.3 and running lerna diff give me nothing.... but running lerna updated returns ALL packages \ud83e\udd14 \nPS: I've updated my ignoreChanges to use globstars (**/package-lock.json). By the way, the documentation is not using globstars https://github.com/lerna/lerna/blame/master/README.md#L148. I don't get it... in your README the property ignoreChanges is nested within command.publish\nBut in you own lerna.json https://github.com/lerna/lerna/blob/master/lerna.json ignoreChanges property is at JSON root level \u2049\ufe0f . Yep I have quite the same problem on packages having dependencies only within the mono repo.\nLerna bootstrap results in not generating any package-lock.json for those packages. \nBut npm requires package-lock.json on CI environments\nlerna notice cli v3.5.1\nlerna ERR! npm ci exited 1 in '@company/package'\nlerna ERR! npm ci stderr:\nnpm ERR! cipm can only install packages with an existing package-lock.json\nor npm-shrinkwrap.json with lockfileVersion >= 1.\nRun an install with npm@5 or later to generate it, then try again.. ",
    "kondei": "please fix it. ",
    "evolutionxbox": "Been wondering if I was the only one experiencing this. \nI have a simple project running in independent mode:\n.\n\u251c\u2500\u2500 lerna.json\n\u251c\u2500\u2500 package-lock.json\n\u251c\u2500\u2500 package.json\n\u2514\u2500\u2500 packages\n    \u251c\u2500\u2500 button\n    \u2514\u2500\u2500 table\nWhen I update button both packages show up as changed in lerna changed.  Despite neither having any dependencies.. @yvele do you merge using --no-ff?. ",
    "Hoishin": "If you have this problem and you manually put tags instead of lerna:\n\nchanged/version/publish commands use @lerna/collect-updates, which make use of git describe git command.\ngit describe only finds annotated tags by default\nWhen lerna puts tags, it runs git tag ${tag} -m ${tag}. The -m option makes them \"annotated tags\".\nWhen you manually put tags (git tag ${tag}), it is \"unannotated tags\".\nSo when you run lerna commands, it cannot find the manually put unannotated tags.\n\nThe workarounds are:\n- When you manually tag, use annotated tag (git tag ${tag} -m ${tag})\nThe PR above makes lerna find unannotated tags with git describe --tags, but if finding only annotated tags is intended behaviour, I'm willing to submit another PR for clearer documentation regarding to this.. ",
    "randy-askin": "I believe the line should be changed from:\njs\nconst needsBump = (commandOptions.bump || \"\").startsWith(\"pre\")\nto:\njs\nconst needsBump = (!commandOptions.bump || commandOptions.bump.startsWith(\"pre\"))\nThat way if someone performs a fixed major minor or patch, the unrelated prereleased packages will be included for graduation. But if they perform a fixed premajor preminor prepatch or prerelease OR if they're using the independent versioning mode with the interactive prompt, the unrelated prereleased packages would not be included.. In the case of independent non-bump versioning, e.g. use of the interactive prompt to pick exactly what versions you want, commandOptions.bump is undefined, so \"\".startsWith(\"pre\") is false and the ternary picks up any prereleased packages regardless of whether they've changed or not. In my example, if bump is undefined (for independent/interactive versions) OR starts with pre (for bump versions), the ternary is true and the unchanged packages are not promoted unnecessarily.. Apologies if the original issue was poorly worded, our team was very new to Lerna and Jenkins at the time and weren't quite sure what we were trying to achieve. We were able to get our setup working a while back. We now use lerna version locally for all of the versioning and tagging (which is much easier with the interactive prompt for independent versioning and things), and just let Jenkins take care of the lerna publish from-git part.. ",
    "gmfun": "@bertho-zero on the latest version of yarn. yup my bad, updating lerna worked. Thanks. ",
    "mndewitt": "All makes sense, thanks for the clear feedback!  I will try to makes these updates in the next couple of days.. @evocateur I think I captured all the requested changes.  One thing I was unsure on is the best practice for stubbing process.env in the tests - saving the original, mutating, and resetting to the original felt OK.\nedit: I'll have to look at the integration tests this weekend...  Would it make sense to add package-locks to those mocked packages in the integration tests?. Made a 'ci' fixture in the unit tests and cloned it into the integration tests - is that what you meant?. Oops :).  Nice catch, fixed.... ",
    "ashoksudani": "hi @evocateur ,\nSorry for question even after this issue is closed. But I am trying to find a way which helps me to generate changelog for each package from conventional commit messages. CHANGELOG.md should be generated in each package folder separately containing changelog for that package only.\nCan you suggest any way or tool to deal with this?\nThanks.\n. ",
    "Beven91": "Thanks a lot !. ",
    "hjylewis": "I agree. If you point me in the right direction, I won't mind making a PR. . Whoops, missed your links. Sounds good!. @evocateur Would it be possible to also get this change in 2.x?. ",
    "stevenfitzpatrick": "@myscope/button does have the correct symlink dependency to @myscope/icons and I can see this if I open the node_modules folder within @myscope/button.\nBut my feeling is that storybook only resolves packages within the root node_modules not the nested node_modules within the packages folders.\nSo in storybook when I have @myscope/icons which I don't have in my root folder (and never been published) it basically goes...cannot find this module.\nI seem to have found one workaround in webpack.config.js for storybook is to add an alias to the package like this\nresolve: {\n    alias: {\n      '@myscope/icons': path.resolve(__dirname, '../packages/icons/src/index')\n    }\n  },. Well this is my guess trying to get these symlinked lerna packages working in Storybook. . Is there anyway to add the lerna packages as symlink to the root node_modules by the way.\nlerna bootstrap just add the symlink in node_modules of that package.\nI am actually running into the same issue with jest now where it goes\nCannot find module '@myscope/icons' from 'button.jsx'\nAgain because jest is run from the root and there is no '@myscope/icons' in the root on my project node_modules.\nKinda thinking this should be a problem for a lot of people, I am obviously missing something.. Ill set up sample repo, see if I can reproduce.. Ah I think I found the problem.\nIn the package.json of my packages I have this\n\"name\": \"@myscope/icons\",\n  \"main\": \"dist/index.js\",\nBut at this time I do not have a dist folder yet because I haven't run the build command yet. This is just a symlink at this time and I just looking to run jest and storybook.\nSo if I change main to \"src/index.js\" it works.\nIs there a way to have some logic for this for running local tests and storybook that package.json points to src/index.js and when deployed to look for dist/index.js\n. Oh ok, so this is a pretty normal problem then, and when I build the symlink folder should update and get a dist folder yeah ?\nThanks for all your help by the way.. Ok perfect, I will close the issue. Thanks for the help again, hopefully it helps someone else as well.\n. ",
    "metakermit": "I also ran into a similar issue with setting up a style guide similar to GitHub Primer, only using Catalog instead of Storybook. The thing is, the style guide lives outside of the UI component packages, so lerna doesn't symlink them together.\nThe way I solved it, however, was to keep the relative path from the root package.json to the components, with a same path as the npm package names. For example, for a scoped package @myscope/mypackage I placed it in projectroot/@myscope/mypackage.\nI then configured webpack to look for .scss files inside the project root too. In case of Catalog, that meant creating a catalog.config.js file in the root of the project:\n```javascript\nconst path = require(\"path\");\nconst modulesPath = path.resolve(__dirname);\nmodule.exports = {\n  webpack: config => {\n    config.module.rules.push({\n      test: /.scss$/,\n      loaders: [\n        \"style-loader\",\n        \"css-loader\",\n        {\n          loader: \"sass-loader\",\n          options: {\n            includePaths: [modulesPath]\n          }\n        }\n      ],\n      include: modulesPath\n    });\n    return config;\n  }\n};\n```. ",
    "m11m": "As a temporary fix, we could pass the rejectUnauthorized through got library.\nhttps://nodejs.org/api/tls.html#tls_new_tls_tlssocket_socket_options. https://github.com/sindresorhus/package-json/pull/44. Also, https://stackoverflow.com/questions/29283040/how-to-add-custom-certificate-authority-ca-to-nodejs. ",
    "punkusha": "\nThis is the command for those who want to run the run command in their monorepo:\nlerna run someCommand --scope=$(ls ./packages | xargs echo | sed 's/ /,/g')\n\nyou forgot to add braces, correct script:\nlerna run someCommand --scope={$(ls ./packages | xargs echo | sed 's/ /,/g')}. ",
    "bochen2014": "Have you tried loglevel=silly ?. lerna publish --loglevel silly. thanks for your reply. \nNo I am not publishing from feature branch.  everything happens in master branch here. It's purely a timing issue -- while CI is building the project , another developer already commit a new change. \nwhen CI finishes, lerna will commit as well. \nSo the 2nd developer will have to merge in the lerna's commit, which will cause the old package to bump again (as lerna updates pacakge.json and CHNAGELOG.md of the old package)\ndoes that make sense?. using canary release will only have impact on the final version number, it wont' change the fact of unnecessary bump. i.e. the change that CI build server commits only has changes in 'package.json' and 'CHANGELOG.md' and therefore should be ignored in the next round of change detection;\nthe real challenge is how can we spot this kind of changes and filter them out from change list during the next change detection; one possible way is by checking commit message (my CI build server  has formatted commit messages like 'chore(release): publish NO_CI' so we can take advantage of this but again -- the change needs to be made at either lerna level or conventional-version-bump level\nI reckon it's more likely that the change needs to be made in conventional-version-bump. --force-publish=* will always cause a patch bump. not sure if it's to be exepected\nIf your project is developed by a team, and under a CI pipeline, unnecessary bump may cause confusions\nI created a PR https://github.com/lerna/lerna/pull/1391, please have a look @evocateur . @evocateur . ok. I guess canary release is the way to go. . it's hard to understand the purpose of canary flag.  in source code , it treat canary same as --skip-git\nthis.gitEnabled = !(this.options.canary || this.options.skipGit);\nso it seems to be a step designed  only for npm publish , which is fair enough. \nbut why do you bump the npm packages version (instead of just suffix with commit short sha1 ), and even default to a minor?\n\nWhen run with this flag, publish publishes packages in a more granular way (per commit). Before publishing to npm, it creates the new version tag by taking the current version, bumping it to the next minor version, adding the provided meta suffix (defaults to alpha) and appending the current git sha (ex: 1.0.0 becomes 1.1.0-alpha.81e3b443).\n\nhow am I supposed to link this npm package back to my git tag?  what is purpose of this design? \nright. I got it.  it basically says \"I'm a release candidate for the next minor version\" and hence the bump\nI'm not still not sure how I can link npm package version with repository version/tag;  I suppose I can use npm tag; but I need more investigation\nplus, the description is really misleading, as there is no tag created; the entire git is disabled for a canary publish; but the description still says it creates the new version tag by ..... bla bla. \nno. there is no new tags created. there is no new commit created.  it's purely for npm publish. thanks @evocateur for your reply. Here is my understanding\n1. semantic-release is not able to manage monorepos and therefore won't be considered\n2. I don't think semantic-release is able to handle concurrent publish either\nthe fundamental difference between lerna and semantic-release when speaking to version bump is lerna uses git tag  plus packages.json to calculate new version while semantic-release use npm info; its really just a matter of where to read version info from. If we use semantic-release, build#1 will still fail due to not able to push commit back, build#2 is highly likely (not guaranteed though) succeed, but the end result will be missing changelog from build#1.\nI think the issue can be easily fixed by putting git push ahead of npm publish in lerna. I created https://github.com/lerna/lerna/pull/1387 for it, can you please have a look? thank again. \n. we were quite shocked to know that lerna factor in work tree changes when doing comparison, and that might not be intended. \nhttps://github.com/lerna/lerna/pull/1388 solve the issue. please take a look as well. easy fix. the author seems to be overwhelmed by developing lerna 3.x, so it's better that we can fix issues we found\nPR https://github.com/lerna/lerna/pull/1389\nPR https://github.com/lerna/lerna/pull/1390. If you check before npm publish, there is still a chance that thing goes wrong. What if new commits come in after your check, but during you npm publish. I know npm publish is parallel,but it can still take a while and that give window for errors.\nI still believe git push should happen before npm publish. Is there a reason why it\u2019s not designed that way?. You are talking about all npm publish fail. What if 3 passed but 2 failed. Once published, you can\u2019t unpublish them, git is not public,so next build would fail.\nAlso, what if new commits come in during npm publish? We have 45 packages in our project so I am a bit concerned. 1. fair enough.  I agree that the issue can be solved by having a git check latest plus one build at a time. The drawback is that we need extra configuration on build server, as by default Bamboo allows multi (4 by default I think). We need to document it somewhere so that developers would know, as most build servers allow multiple builds at a time by default\n\nI don't think put git push before npm publish has the same race condition. git push will make sure only the build that has latest code can proceed; all others get knocked back.  git push is atomic by itself, meaning even 2 build try to git push at the same time, only one will succeed. I can't see a reason why we shouldn't do git push first. Sorry, actually one build a time won\u2019t solve the issue. If new commits in during npm publish, both build will fail. The first build will fail because it doesn\u2019t have latest code(even it pass check before)\nand therefor failed push. Public git history is at odds with npm anyway.\n\nThe second build would also fail because can\u2019t publish the same npm package version again\nIt\u2019s not an issue of how many build to run at a time, it\u2019s an issue of when do your commit. I.e if the build server is publishing, you can\u2019t commit as it has just passed latest check, and think it has got the latest code. semantic-release push right after commit/tag; \nthey recommend run --post-success \"npm publish\"\nso, git push will happen before npm publish\n```\n\n\n\nYour release branch is: master\nNo SemVer tag found. It seems like your first release? Initial release will be set to v1.0.0 as per npmjs specification.\nBump type is minor\nupdate version on package.json...\nv1.0.0\nAbout to write/append contents to CHANGELOG.md...\nAbout to add and commit package.json and CHANGELOG...\n[master 1012a2d] chore(release): v1.0.0 [ci skip] NO_CI\n 2 files changed, 11 insertions(+), 1 deletion(-)\n create mode 100644 CHANGELOG.md\nTime to create the Semantic Tag: v1.0.0\n...and push to remote...\nTo github.com:bochen2014/semantic-release-test.git\n   ac903c8..1012a2d  master -> master\nTo github.com:bochen2014/semantic-release-test.git\n * [new tag]         v1.0.0 -> v1.0.0\nDone in 15.30s.\n``. thanks for your reply. \nthe point I was trying to make bysemantic-release's example is that,semantic-releasedoesgit commitandgit pushtogether;  it then runs yourpost-successscript, which in many cases isnpm publish`\n\n\n\nso in all, semantic-release does git push before npm publish . think about this, what if there is a commit merged in ( just merge in, not build ), right after lerna doing this line\nhttps://github.com/lerna/lerna/blob/master/commands/publish/index.js#L101\nwhat will happen?\nand we don't have control over when developer will merge in their code\n. this problem is critical to us as it has happened twice so far (in 2 weeks time), the result is chaotic as we can't unpublished npm packages - I had to force publish twice, but the version info won't be liner. \nif this issue won't be fixed in lerna@3,  i'm afraid that we will have to host our own version of lerna. . \"We always have control over what commits are generated in CI.\"\nI don't think we are talking about the same thing. \nI'm talking about in a team develop environment, where multiple developers can check in or merge into master at anytime. If  right after lerna runs this line\nhttps://github.com/lerna/lerna/blob/2838260b7d0058249b2f0aee61e41d7de6bbe228/commands/publish/index.js#L101\nanother developer push some changes into master. what will happen?\nI don't think this issue is related to  lerna's commit message. Thanks for your advice, really appreciate it.\nAre you talking about lerna 2.x or 3.x? . She\u2019ll I create a PR in 3.x swapping npm publish and git push? \nI think I have explained enough, and it\u2019s worth putting git push before npm publish. thanks you so much,  really appreciate your help!\nI have already bumped lerna to 3.x in our code base, as we recently noticed lerna publish in 2.x returns success (exit code 0) even when it fails to push. This caused a CI build marked as passed, but really should be failed.  This is a defect that we can't afford in production. \nSo, thanks for your offer but since we don't use lerna 2.x anymore, there is no need to create a new dist-tag. \n. thanks for your reply\n1.  git push should happen before npm publish , i thought we have reached agreement on this? in 3.x there is a isBehindUpstream check but that is insufficient because new commits could be pushed right after that check. So, yes , we do need this in 3.x as an important change\n2.  in our repository setup, we disallow direct commit to master. Every commit into master much has a PR first, but we forgot to create an exception for CI. As a result, once CI bumps the versions and tries to push commits & tags back, it failed. however that build was marked as green. After this I immediately bumped to 3.x and can confirm this has been fixed in 3.x . It was package-lock.json that was causing the problem. We spent a day to find it out and was very surprised that lerna factor in work tree changes. But you are absolutely right that we don\u2019t want non-versioned changes in npm package either. It will cause more confusions. I don't think failed unit test is caused by my change, and it passed on node 6 env and my local. \ncan you please take a look? @evocateur \nFAIL  commands/publish/__tests__/publish-command.test.js (85.035s)\n  normal mode\n      \u2715 should publish the changed packages (5008ms)\n      \u2715 throws an error when --independent is passed (1049ms). PR updated per your instruction before. please take a look. I used to have test covering -D flag and then Daniel mentioned something like 'one setup fixture in a test'  in his code review; After that I removed it.\nThe reason being to test -D we will have to have a new fixture setup, which means we will have a new test case.  I feel like this is an overkill. It isn't that important for us,  and I feel like we are testing yargs. unit test seems to be well written and is sophisticated. I have definitely learned something during fix old&create new test case. The issue is that due to 'symbolic link' check, we have to modify process.platform , and that feature has been disabled in later version of jest. \nWhat it means is that we limit jest to be ^19.0 while latest jest is already 22.4.3 \ndo you have a plan for that? @evocateur . Hi @evocateur , I spent a while doing this one as we badly need this in our project. \nPlease take a look and see if I'm on the right direction. If you agree with what I'm doing, I'll create unit test for it. thanks!. I didn\u2019t run unit test locally, as I\u2019m not sure if you want this change or not. If this change is something you want, I will fix all unit test and creat new ones . npm link\nI have a project to test my solution . PR updated per our discussion before. please take a review thanks\n(added 2 unit tests and updated 1 which was a major bump itself) @evocateur . all test passed \nI guess what this PR means is we don't have to run --force-publish whenever  a major bump happens (actually, for us we need to run force publish for minor bumps as we haven't reached 1.0.0 yet);\n. thanks @doug-wade for reviewing. PR updated. do we have any update on this one?\nIf you think the change is too significant and potentially confusing to users, I can add a new flag,say, --major-bump-all, or whatever you like; \nWe need this change because we don't our package1@2.0.0 depends on package2@0.1.0;\nlike @evocateur mentioned somewhere else, once a pre-release 'graduates', we want to bump all  prerelease versions to normal versions -- and lerna is doing that now;  I think a major bump should be treated as an official graduation as well. if https://github.com/lerna/lerna/issues/277 is the holdout that prevents 3.x from going official,  I think you can take a look at how semantic-release bumps their versions. \nIn short, in my understanding,  semantic-release  reads current version & gitHead  from npm registry rather than git which is what lerna is currently doing (this is the only difference between lerna and semantic-release regarding version bump)\nif you want to do incremental version bumps for canary releases, you can take semantic-release way. i.e. inject a serial number in canary version, and next time you do canary publish, you read that number from npm  (not local git ) and increment it;\nI'm pretty sure you have already got something in mind, but I think it's still worth mentioning it and maybe having a  think about it. \n. we have an issue with tag as well. \nwe have master branch and release branch, both are monitored by CI pipeline. when a new commit is merged into either branch, a new build will be triggered and new npm packages will be published to  Prod/QA npm registry respectively.\nthe problem is that release branch will be merged back into master at some time,  and when that happens, all tag will be brought over.  Since when lerna tags, it only tags version, not git branch, so master would think that it has published there before and wont' do a publish again--- yes, it did published somewhere before, but that was in QA, not Prod. \nwe can delete the tag when merging release into master, but we then lose track of what has been published into QA; we really wish we could keep that tag.\nthis is not an urgent issue, but I think worth thinking about it\n. I was also thinking, is having a prod npm registry and qa registry an evil thing to do?? \nI guess we can have only one registry, and utilise pre-release to differentiate prod version from qa version, but, , that means we will have to manage version manually AFAIK. \nAt the moment, we let conventional-recommended-bump to handle versioning for us in CI server, so there is no human intervention at all;\nnot sure which way to go, any comments will be  appreicated\n. yep. I think we if add-preid in release branch , it may just work;\nwhen merging release into master, we can  'graduate' those pre-release and have a full publish.lerna already has this behaviour as explained somewhere else. right. thanks for the info. \nI guess the only work that needs to be done using dist-tag approach is when merging release  into master, I need to \"promote\" the package from next to latest;. thanks for your reply\n\nlerna bootstrap defaults to topological order which constraint the concurrency level. Everything has to occur in a particular order in order to not break dependencies. Passing --no-sort , in my understanding, basically tells lerna to ignore that topological order and therefore go full concurrency, if things are broken, the developer should take responsibility, not lerna\n--concurrency defaults to 4, so I don't have explicitly pass this flag. Right?\nby 'multi-threading' I mean concurrency. I should have called it multi-processed as it's npm who does the heavy-lifting work, lerna just schedule the work to it ( runParallelBatches)\n. cool. thanks for the explanation!. can you do a lerna updated first and parse the result. then run lerna run test --scope with result from the parsed result?\nit's not ideal but I  guess that would work. got it\n\nhttps://github.com/lerna/lerna/blob/5d73717230ab31bf5496a5b3e4c67370eda95d23/src/UpdatedPackagesCollector.js#L192. the behaviour is changed.  in 2.x, canary will bump all packages regardless whether it's changed, or a dependent of a changed or not; but in 3.x, only changed, dependants of changed, or \"graduates\" of pre-release will be bumped;\nhttps://github.com/lerna/lerna/blob/90df64633a858c9d5ff0c766021c58cd9ddac4ae/utils/collect-updates/collect-updates.js#L71\nif you change above line to return Array.from(packages) that will be close to 2.x. Can you please confirm it's intended?. Thanks for the explanation, I am fine with the current behaviour.\nAlso, could you take a look at \nhttps://github.com/lerna/lerna/blob/90df64633a858c9d5ff0c766021c58cd9ddac4ae/utils/collect-updates/collect-updates.js#L69\nI don\u2019t quite understand what we are short circuiting. Or in another word, why can\u2019t we always short circuit?. In both case it returns [candidates], I can\u2019t see what short circuit is for. Cool, will look into it once get in to office. PR https://github.com/lerna/lerna/pull/1406. PR merged. so close the issue. PR merged. so close the issue. would the new versions become\n```js\n//A\n{\n   version: '1.0.1',\n   dependencies:{\n    B: \"^2.0.0\"\n  }\n}\n// B\n{\n  version: \"2.0.0\"\n}\n``\n. not sure why this would be an issue.  if you want aAthat depends onB@1.0.0, then useA@1.0.0;\nif you don't bumpAin your case,  you will have 2A@1.0.0with one refering to B@1.0.0 and the other B@2.0.0. I don't know how are you going to differentiate them. \nYou may have a genuine use case for that, but as far as I can see, that doesn't make sense to me . Can we doreturn Array.from(candidates).sort()?. Got it. Thanks. https://asciinema.org/a/4XpFDDheMhqr1WhdpFlzHJcNC. I think it\u2019s because you don\u2019t havebin/**` in your global .gitignore file.\nI have been bitten since day one, only figured out yesterday why I can\u2019t pass the tests locally . What happened to me was like, first it failed on my local machine, I then ran them  within a nodejs docker container, and it failed there as well.\nI then digged into it and find the unit test is very picky on environment it runs in, I so I built this tailored image. Here you go\nhttps://github.com/github/gitignore/blob/master/VisualStudio.gitignore\nIt was there since,, 4 or 5 years ago when I was using visual studio to do .net work. \nBin/ is the binary folder so I think it makes since that visual studio wants to ignore it be default . fair point. I've updated my .gitignore. thanks. Thanks for your reply. \nNo I am talking about lerna add. during develop stage I have to keep using lerna add,but dependencies were hoisted. At the moment lerna add doesn\u2019t support hoist which is not convenient . i see.. thanks @evocateur !. @evocateur  version management is something more challenging than the actual development, as per my experience. we have run into so many issues in the past and when things go out of control, my manager always say (and I incline to agree with him) \"lets bump everything to the next minor/major version, and start  fresh again\"\nwhat do you think?. You are right. We haven\u2019t reached 1.0 yet, so in our case, we need cater for minor bump as well. if you run lerna publish --exact on a fixed version project, all packages should bump together regardless whether they have changed or not. if one package has a breaking bump, all packages should bump together in a fixed version project. Semver.diff(1.1.0,2.0.0) returns major. Why does it not work?. If current version is less than 1.0.0, then a minor bump should be treated the same as major one. Yep, that seems to be an easier way. I tried to find a place to put it, any suggestion?. we discussed it in last code review, I basically can't find a place to host it so I inlined it. Any suggestions?. hmmm,, let say versions.sizes = 3 while this.packages.size = 5\n\nif  this.project.isIndependent, we don't want to bump all ; as the versions are independent;\nif this.options.canary , I am not sure if should bump all or not.  depends on your opinion on \"should we treat a canary a graduation?\" \n\nthe core question here is,  when should a package version be bumped? I think the answer should be: \n1. when it changes\n2. when it dependents on a package that changes\n3. in Fixed version, when the global version graduates \n    3.1  a pre-release to a normal release is a graduation\n    3.2   a major bump, e.g. 1.0.0->2.0.0 , or 0.1.0->0.2.0 , is a graduation\nshould canary fall into above 3 rules? I'm not sure. \nI think  you can make the decision and I'll just update it in the PR. ",
    "spalladino": "Got here for the same exit code issue. I started using lerna run test --no-bail --concurrency=1 in my CI to run all tests, and I noticed that the build passed even if there were errors in some tests. I agree in that the expected behaviour should be to propagate the error as any non-zero exit code.. ",
    "soederpop": "I think you could fix this by not using the --first-parent argument to git describe which I think is in @lerna/describe-ref\nI'm currently experiencing a problem where lerna updated uses tag 1.4.4 to compare against, when the latest release was 1.5.9.  This is due to the presence of merge commits from github PRs.\nthis is what lerna runs to determine the tag to compare against and see what's changed\n```shell\n$ git describe --first-parent --always --long --dirty # hahaha wtf git?\nv1.4.4-19-g20693b56\n```\nif instead it runs the following, it finds the correct tag.\n```shell\n$ git describe --tags --always --long --dirty\nv1.5.9-20-g20693b56\n``\nthis ignores the merge commits since the--first-parent` flag isn't being set.\ni'm sure this --first-parent behavior is useful for something, so maybe my team is doing something wrong in our github workflow? For now I'm considering patching lerna to work around it.. ",
    "Feiyang1": "I'd like to have an option to ignore all merge commits in lerna changed command. \nWe have a release branch we use as a staging area for the next release while the development continues in the master branch. Eventually we will publish the release candidate in the release branch and merge it back to the master branch. \nIn the next release cycle, the updates in the merge commit are seen as changes and the same package gets bumped again even though it doesn't have any change except for the version bump in package.json from the last release.\nIs there any plan to address this use case?. You are absolutely right. Thank you!\nIt would be nice if lerna changed can be configured to find the last tag in all branches instead of --first-parent as described in https://github.com/lerna/lerna/issues/1377#issuecomment-431914036\nIs it something you would consider?. ",
    "zzolo": "Oh, I think this is an issue with the files option in the package.json.\nhttps://docs.npmjs.com/files/package.json#files\nSorry.. ",
    "valerybugakov": "@evocateur Thanks for a quick response.\nI'm trying to setup a monorepo for Web + React-Native application with shared code package. It will be a private repo on GitHub, that's why core is not published to npm. Ability to work with different versions of the core package is required here because two separate teams will work on web and native parts. If they develop with different pace managing shared code will be hard without version control. \nDo you think it's a bad case for monorepo and especially lerna?\nI've tried yarn workspaces at first, but bumped into the same issue.. Definitely different teams neglect some benefits of code sharing through monorepo. \nReact-Native works fine, there're some non standard changes that you need to make to get it up and running in repo with React project, but I have a working example already. The only issue is that we don't want to use private npm packages in case when one team moves slower and wants to stay on older version of the shared code. Would be nice to have it in private GitHub repo and for lerna to maintain feature parity between GitHub and npm hosted packages. Is it something you would consider useful functionality?. ",
    "codeNoobie": "Okay. Then help me identify if below is a bug or an expected behavior.\nI have two packages currently managed by lerna. I am using default versioning with conventional commit. I am ensuring that commit messages are in conventional commit format. After every commit, I run the below command.\nlerna publish --conventional-commits --changelog-preset angular-bitbucket --skip-npm --yes\nLet's say the initial versions are:\npackage-1 -> 0.0.0\npackage-2 -> 0.0.0\nFor any commit, that requires minor and patch version update according to conventional commits guidelines, Lerna correctly updates the versions of all packages even those which did not have any change since the last release. This is good.\nBut when i create a Breaking Change commit which only modifies one package, say package-1,  the above Lerna publish command only updates the major version of package-1. But, package-2's version is not modified. I would expect the major version of package-2 to be modified as well.\npackage-1 -> 1.0.0\npackage-2 -> 0.0.0\nNow I create another patch commit involving only package-1. This time, all the package versions are now modified. Moreover, the major version of package 2 also gets updated.\nIt does successfully update the version of\npackage-1 -> 1.0.1\npackage-2 -> 1.0.1\nIs this an expected behavior? If not, am i missing something with config or this is indeed a bug?\nHere is my lerna.json:\n{\n  \"lerna\": \"2.10.2\",\n  \"packages\": [\n    \"libs/*\"\n  ],\n  \"commands\": {\n    \"publish\": {\n      \"conventional-commits\" : \"true\"\n    }\n  },\n  \"npmClient\": \"yarn\",\n  \"useWorkspaces\": true,\n  \"loglevel\": \"silent\"\n}\n```\nyarn -version\n1.5.1\nnode -v\nv9.8.0\nlerna -v\n2.10.2\nOsX High sierra\n```\n. @evocateur  Yes, I agree I should have added the details with the original description.\nI am in the process of setting up a new Angular 5 mono repo. The two lerna packages are component libraries. We are using https://github.com/dherges/ng-packagr to transpile and build the distribution in Angular Package format. This is an important use case for us. \nLerna publish doesn't support publishing a folder/tarball within a package. I have seen few threads on these in Lerna forum and I understand that the Lerna team is against providing this use case. But it is also important for us to publish the transpiled package. So I am trying to work around these requirements. \nLerna publish --skip-npm would take care of the version upgrade, git tag and changelog creation. I would then run a separate script to build these transpiled packages and publish them separately to our private repository. Currently, I am in the process of building this flow.\nLerna has helped us with a lot of our use case. Thanks for actively maintaining it!. @evocateur  I tried digging into the code myself. Here is what I found. \nBelow line is updating pkg's version to the global version in Fixed mode. It is iterating over the pkgs in this.updates. \nhttps://github.com/lerna/lerna/blob/9879fef6b8adc4f314919d4e8f18041d69558a45/commands/publish/index.js#L319\nIf we go to line 126, we can see that this.updates contains the list of packages that are updated.\nhttps://github.com/lerna/lerna/blob/9879fef6b8adc4f314919d4e8f18041d69558a45/commands/publish/index.js#L126\nThis could be the reason for my issue. It seems like for Fixed mode, we should be iterating over all packages instead of the updated ones. \nThoughts?. Thanks Daniel!\nThis works. Although, are you planning to fix this as a bug in the current version or the upcoming version? I can attempt at submitting a PR for this change.. I would wait for this fix to go in. :). Thanks @bochen2014 for quickly coming up with a change.. Thanks @bochen2014 @evocateur @doug-wade. Will this change be back ported to a non beta version? Or is it advisable to use the latest beta version? . Thanks @evocateur. Yeah I was concerned because of the beta tag.. @evocateur Any suggestions on this please?\n. I understand. But it is a loss of functionality for us. I will check with conventional-changelog maintainers regarding adding support for bitbucket.\nThanks!!. Actually, figured it out. It wasn't committing it because I passed --no-git-tag-version, which is a little confusing. It felt like it would not create a tag but only a commit. \nIs it possible to separate it out though? I only want to create a commit but don't want to create any local tag.. Actually, figured it out. It wasn't committing it because I passed --no-git-tag-version, which is a little confusing. It felt like it would not create a tag but only a commit. \nIs it possible to separate it out though? I only want to create a commit but don't want to create any local tag.. I have a similar use case. Package A depends on Package B. Package A has specified exact version in peerDependencies for B. When I run lerna version, it updates the devDependencies correctly, but doesn't update the peerDependency, leaving us in a broken state since Package A now depends on an older version of Package B.\nIs it currently not supported? Is it something we can add through a flag? Happy to create a PR for this.. \nHelp me with the following use case: \nLet's say package B depends on package A, we added a new feature in package A. At the same time, package B uses B's new feature for building a new feature of its own. During release, both the versions get bumped. Now, this new version of package B can only work with the new version of package A. If A has specified a range/exact version in peer dependencies for B, would we not need to update that? What is the right way to handle this case when releasing with Lerna Fixed versioning? \nIn our company, we have multiple repos that depend on a central ui-infrastructure repo. Artifacts of all these repos are used in another repo which is customer facing. We want to avoid loading multiple copies of the ui-infrastructure artifacts in the main repo, hence we want to declare it as a peer dependency. \nSome repositories are also following the exact versioning in peer dependencies. Angular would be an example.\n. I see. But then, why does it update all the packages if the same commit has a Breaking change?. I see. In the 2.x release, we used to bump versions of all packages even when a fix or feat commit only modified one package out of many. \nI remember raising a bug regarding this.  At that point, we were not updating the versions for breaking change commits, but we were bumping versions of all packages for feat and fix commits. Here is the reference.\nhttps://github.com/lerna/lerna/issues/1383\nDid something change in between that lead to change in functionality of 'lerna version/publish?. My understanding was that withFixed versioning`, versions of all packages will be bumped together for any commit so that the versions of all packages are consistent with each other at all time. I think 2.x was doing this thing and i remember the \"version bump only\" message in the change log in the unmodified package. \nWith version 3.x, I am observing the following things. \nExample: \npackage 1 -> 3.0.0 \npackage 2 -> 3.0.0\npackage 3 -> 3.0.0\n\n\nAdded a fix commit for package 1. \npackage 1: 3.0.0 -> 3.0.1\npackage 2: 3.0.0 -> 3.0.0\npackage 3: 3.0.0 -> 3.0.0\n\n\nAdded a fix commit for package 2\npackage 1 -> 3.0.1 -> 3.0.1\npackage 2 -> 3.0.0 -> 3.0.2\npackage 3 -> 3.0.0 -> 3.0.0\n\n\nAdded a fix commit for package 3\npackage 1 -> 3.0.1 -> 3.0.1\npackage 2 -> 3.0.0 -> 3.0.2\npackage 3 -> 3.0.0 -> 3.0.3\n\n\nThis makes it similar to independent versioning for non major bump changes. Is this correct behavior for Fixed versioning? Should it not updated all packages and keep a fixed consistent version across the mono-repo?\n. Thanks for explaining! I need to play around with it more to understand this completely.. ",
    "TheNeuralBit": "Thanks @evocateur! Sorry I didn't get around to updating the README.\nI'd also like to see this feature in 2.x, should I just open another PR for the 2.x branch?. I actually can't run the tests locally without running npm run lint -- --fix first. Is that something wrong with my environment or are there actually linter errors on the 2.x branch?. Thanks!. @evocateur agreed!\nI debated adding a breadthFirstSearch method that takes a childrenFunc, which can be used for either localDependencies or localDependents - what do you think of that? It feels a little odd to expose that as a method, but I couldn't make it a separate helper function without pulling out the call to this.get somehow.. Thanks! I did the refactor and added a test. Let me know if there's anything else you'd like to see. haha yeah that was a disappointing discovery. ",
    "sparecycles": "In our case, the packages/ folder is a build output, so it's not committed.\nBut I do understand that this use-case is beyond what the majority of lerna users need or want.. ",
    "huchenme": "I am happy to send a pull request regarding this :). @evocateur There are some limitations on our corp environment while someone working using Macbook got no issue installing yarn and others working on Windows machines do not have access to install yarn the proper way. So we hope we can create a separate config file for those users, otherwise, we need to create scripts with \n\"bootstrap:npm\": \"npm install --no-package-lock && lerna bootstrap --hoist --npm-client npm --no-use-workspaces -- --no-package-lock\"\nwhich is very ugly. \nMost projects (Jest, Webpack for example) support multiple ways of config and also support --config flag, I think it is a nice feature to have in lerna as well, I am happy to contribute to it and add this flag, any concern?. ",
    "ksmolyanin": "Thank you for quick response! Actually I didn't know about tag-version-prefix. As for me it is a solution.. Oops ... thank you for explanation. Yes, if it is possible it would be very good to add this feature!. ",
    "ojizero": "@bochen2014 yes exactly . The issue lies in the fact that package A could potentially be broken with the major changes that happened on B, since A could be too complex/critical to reflect this change made in B. A more clear example is when more than one package are depending on B, and one of them is being refactored, or is receiving a new major feature that required those breaking changes to B, there's no actual need in such case to visit A immediately and accommodate to such changes as it hinder the speed of releasing changes and packages.\nOur main scenario, is when dealing with the microservices structure briefly described above, in the example A is an Nodejs based AWS Lambda, and B is a library with shared code, when the changes are made to B it's never assured that A accounts for these changes, we simply let A pull it's version form NPM if it's not the same as the one in the monorepo. Imagine this change being related to a new AWS Lambda or a new command based service.\nThe thing is when B is published (to NPM), A is being forced to bump it's used version, but A is a Lambda and lives in the monorepo to ease the development flow and manage the shared code, so now you have an AWS Lambda (A) being bumped to a newer version of a shared library, but A could very possibly not account for the breaking changes in B.\nAnd we are working towards fully automating the processes of publishing those changes as well as deploying those Lambdas, but this could mean BREAKING production Lambdas unintentionally when making partial major refactors.\nThe second scenario we're using, there isn't much meaning of the version of the package A, it's just for holding metadata regarding it's past releases, and package A is in it's own right an independent unit when it comes to deploying it/running it.\n\nThat's for our use case, but in general it doesn't seem to make much sense to upgrade the dependents (A) even on breaking changes happen to the dependencies (B). Such change should preferably be more managed, or controlled I think.\n\nHope this makes it a bit more clear what I mean \ud83d\ude05 . @evocateur @bochen2014 the issue is not bumping A's version, the issue is bumping the version of B used in A in the first place! This would mean that A is now potentially broken since it isn't guaranteed to accommodate for the changes introduced by B.\nThat is, my issue is not that A is now A@1.0.1, my issue is that A is now using the newer version of B even though we can't know that this new version of B would retain the behaviors/APIs used by A (the idea being that A wasn't modified during this process).\nWe have no issues bumping A automatically (when it's dependencies are updated) when we guarantee that it won't break it, and we don't have this guarantee with a major upgrade in B. This is further exasperated when using CI to release new changes, especially into production environments. Or when A is a service and not an NPM library, and this service is released upon changes/updates to it.. @evocateur I fully understand your point about integration tests, but we don't always have the time to factor in breaking changes into each dependent (Lambda), and in most cases we can tolerate running the Lambda with an older dependency instead of delaying major releases of dependencies and/or other Lambdas in the same repo.\nThat is, it could mean delaying many releases because each release requires modifying a lot of things in the repo that could be outside the scope of the feature being introduced. And I think many people in the same scenario would rather release new features (while leaving some services using older versions of the libraries temporarily) than delaying feature releases in order to accommodate for big changes.. Indeed Lerna isn\u2019t a deployment tool nor are we using it as such, we\u2019re merely using it to managed shared code and resources between packages (linking them and releasing them).\nAnd regardless of whether the dependent is a service or not, bumping it\u2019s used version of a dependency when it receives a major upgrade would mean BREAKING that package thus regardless of it being published to NPM or deployed using other tools, this is an issue !!!. ",
    "austinmckinley": "@doug-wade Probably does, will make a new issue over there. Thanks!. This is still a problem, and it's been quite a while...any updates? Is the slack still in use?\nLink to website issue: https://github.com/lerna/website/issues/47. ",
    "dorsharon": "ok thanks anyway. In my case, I'm managing a Storybook monorepo project with Lerna.\nNow let's say someone had commited changes for two packages under the same commit, and mentioned BREAKING CHANGES that are relevant only to one of them.\nThe result would be that the 2nd package would get bumped major, which is unwanted.\nIn the past, cz-lerna-changelog could allow you to mention which package was actually affected, but since lerna v3 it no longer works.. Those are changes that Lerna already addressed in the past by bumping versions/publishing.\nIt's basically addressing those changes AGAIN.\nThe flow is:\nBranch off from staging branch, work, merge back into staging, trigger a CI to version and publish.\nThe issue rises when Guy A branches off staging, meanwhile, Guy B finishes his work and merges into staging branch, CI runs lerna version+publish.\nNow Guy A pulls from staging to resolve conflicts or whatever, the changes that Guy B made are again addressed by Lerna, meaning it wants to bump versions AGAIN.\nWhat I want, is for Lerna to ignore those changes coming from pulling from staging. @evocateur do you have any solution?. ",
    "knownasilya": "Agreed that it's a red hearing (I did a debugger and both options were on), looks like flatten isn't handling a certain case.\nI'll give latest a try later today.. So I tried installing latest, did lerna init (it removed the version in lerna.json and updated the version in package.json). I ran the command again and got the same failure. The logs show the old version.\nI double checked that node_modules/lerna/package.json had the right version and did lerna -v outside the project and both said 3.0.0-beta.19, where the log says 2.11.0. Will try this again with your suggestion.. I never go this to work.. ",
    "tizmagik": "I'd be happy to assist with this as well if you could point me in the right direction \ud83d\ude04 . ",
    "lizardruss": "\nRelative file: specifiers, just like the lerna source. It\u2019s a unified package-lock for the entire tree, no bootstrap required. (I really need to document this pattern, I feel like I\u2019ve repeated myself about eleventy-billion times over the past six months)\n\nThis approach won't work when a leaf package is going to be built into a Docker image. The docker build process won't follow symlinks, and the file:/// specifiers won't resolve unless the local dependencies are copied into the build context.\nI'm not requesting a fix, only giving this example if anyone runs into the same issue I'm having. I realize it's not within the scope of this project to support docker builds.. ",
    "trippingtarballs": "Edit 20/01/19\nFix\nAdd the following to the root package.json of your project:\njson\n{\n  \"scripts\": {\n    \"version\": \"lerna clean --yes && lerna exec \\\"npm install --ignore-scripts --package-lock-only --no-audit\\\" && git add packages/*/package-lock.json\",\n  }\n}\nExplanation\n\nlerna exec \\\"npm install --ignore-scripts --package-lock-only --no-audit\\\"\nThe use of lerna exec \"npm install\" over lerna bootstrap is because the bootstrap does not do what I expected.. In my particular use-case I have a package in my project where the package.json contains peerDependencis, but no dependencies or devDependencies. And, as it so turns out, if there are no dependencies or devDependencies in a package's package.json then the lerna bootstrap does not trigger an npm install and the package-lock.json of that package does not have its version pumped (but its package.json) does.\nIn order to generate the rather empty looking package-lock.json for a package with an empty dependencies and devDependencies I had to manually perform an npm install in the package's root folder.\nI wanted to add a package-lock.json for my package with an empty dependencies and devDependencies for consistency, and because I may well have dependencies / devDependencies in this package in future.\n\n\nMy work around ...\nFix\nAdd the following to the root package.json of your project:\njson\n{\n  \"scripts\": {\n    \"version\": \"lerna clean --yes && lerna bootstrap --ignore-scripts -- --package-lock-only --no-audit && git add packages/*/package-lock.json\"\n  }\n}\nExplanation\nWhen the lerna publish command is executed the version run-script is invoked by lerna \"AFTER bumping the package version, but BEFORE commit\". So, breaking down the above run-script:\n\nlerna clean --yes\nThis is necessary because if a node_modules folder is present during the installation of a package's dependencies then the version that package's package-lock.json will not be updated by npm. I claim as much based on trial and error.\nGiven my workflow (where I perform a lerna publish) I do not expect there to be a node_modules present for any of my project's packages. However, it does no harm to be explicit.\nlerna bootstrap --ignore-scripts -- --package-lock-only --no-audit\nThe use of lerna bootstrap over lerna exec \"npm install\" is because that is what the bootstrap command is for.\nThe use of the --ignore-scripts option is because I use preinstall & postinstall in my project's root package.json and, for my particular lerna publish workflow, I do not care to have those run-scripts get triggered.\nThe use of the --ignore-scripts option before the -- is to instruct both bootstrap and npm to not execute any run-scripts.\n--package-lock-only \"argument will only update the package-lock.json, instead of checking node_modules and downloading dependencies\".\n--no-audit again, another time saver. I really just want to bump the version in the package's package-lock.json.\ngit add packages/*/package-lock.json\nSpecific to my use-case. I have all my project's packages as subfolders of packages/.\nThe use of the * in packages/*/package-lock.json means the git add will only match on the package-lock.json file that is in a folder one-level down. Again, something that makes sense for my project.\n\nPossible PR?\nThe need for a git add at all is due to the following lines (from lerna source code, commands/version/index.js):\n```js\n    // exec version lifecycle in root (after all updates)\n    chain = chain.then(() => this.runRootLifecycle(\"version\"));\nif (this.commitAndTag) {\n  chain = chain.then(() => gitAdd(Array.from(changedFiles), this.execOpts));\n}\n\n```\nThe logic of the version command for lerna will; 1. compile a list of files that are to be included with the tag commit, 2. execute whatever version run-script you might have in your project's root package.json, and 3. execute the git add part of the tag commit.\nIn other words, it's not enough that lerna bootstrap --ignore-scripts -- --package-lock-only --no-audit would have updated the package-lock.json because lerna would have already decided on what files to stage for the tag commit. Hence why I include git add packages/*/package-lock.json \u2013 to ensure the package-lock.json is added to the tag commit.\nConclusions\nApologies for the monologue. This issue has been raised more than once (#925). Hopefully my input is helpful to some.\nI did think about a PR to have the git add part of the tag commit be moved to after the version run-script has been invoked. But I don't know enough about lerna's source code to know if such a change would have unwanted side-effects.\n. ",
    "joeattardi": "Perfect. Thank you!. ",
    "anandsuresh": "Any word on this issue?. @evocateur Cool. Thanks.. Please let me know if I can perform additional steps to get more information required to debug this issue.. Just realized the mistake I had made. It works fine as long as I remember to correctly add the required dependencies in the root package.json. Closing this out.. ",
    "Graham42": "It seems this solution only works for node 11. I need to stick with LTS releases so am using node 10 and node 12 will not be LTS until October 2019. \nThe audit output from npm install is only 3 lines. And only 1 of those is really important: the findings. I don't think that 1 line per package is overly noisy. Would really like lerna to include the audit output on bootstrap. ",
    "eemeli": "With Lerna 3.10.6, running lerna link convert got me a few of the packages in both the dependencies and devDependencies of the top-level package.json; of these the dev dependencies had the incorrect file:../foo paths. Maybe related: This also removed the local dependencies from a few packages, which broke their build order.\nHoisting the packages' dev dependencies out of their package.json files also hoisted e.g. @babel/cli, which broke my package-specific build commands.\nAs an unexpected consequence of using file: paths, lerna bootstrap and lerna link no longer add symlinks to the packages' node_modules directories. This breaks e.g. node-sass v4, which requires using node_modules/foo/... paths rather than supporting ~foo/... for node-like path resolution.\nNot really happy with this command. I tried making it work for a while, but ended up rolling back my changes. In case it matters, the packages in this repo are all scoped.. To clarify, the dev dependency in my case isn't a tool, but one package's built output that gets copied into and released as a part of another package. Therefore it's a dev (build-time) dependency, rather than a runtime dependency. In part this is needed to match the package's pre-monorepo structure, but it also makes node-sass much easier to use as its v5 release seems to be dragging on for quite some time.\nIs this the right issue to also track the problems caused by the loss of package-specific node_modules/.bin/ folders?. For me this is showing up as lerna bootstrap --hoist continuously calling itself.\nRelevant parts of package.json:\njs\n{\n    \"scripts\": {\n        \"prepare\": \"lerna bootstrap --hoist\"\n    },\n    \"devDependencies\": {\n        \"lerna\": \"^3.6.0\",\n        \"node-sass\": \"^4.9.2\"\n    }\n}\nLerna's console prints from Jenkins build:\n```\n+ npm install\n\nnode-sass@4.11.0 install /home/jenkins/workspace/build/node_modules/node-sass\nnode scripts/install.js\n\nDownloading binary from https://mirror/sass/node-sass/download/v4.11.0/linux-x64-57_binding.node\nDownload complete\nBinary saved to /home/jenkins/workspace/build/node_modules/node-sass/vendor/linux-x64-57/binding.node\nCaching binary to /ciop/tools/nodejs/node-v8.9.1-linux-x64/lib/node_modules/npm/cache/node-sass/4.11.0/linux-x64-57_binding.node\n\nnode-sass@4.11.0 postinstall /home/jenkins/workspace/build/node_modules/node-sass\nnode scripts/build.js\n\nBinary found at /home/jenkins/workspace/build/node_modules/node-sass/vendor/linux-x64-57/binding.node\nTesting binary\nBinary is fine\n\napp@ prepare /home/jenkins/workspace/build\nlerna bootstrap --hoist\n\nlerna notice cli v3.9.0\nlerna info ci enabled\nlerna info Bootstrapping 20 packages\nlerna info Installing external dependencies\nlerna info hoist Installing hoisted dependencies into root\nlerna info hoist Pruning hoisted dependencies\nlerna info hoist Finished pruning hoisted dependencies\nlerna info hoist Finished bootstrapping root\nlerna info Symlinking packages and binaries\nlerna info lifecycle app@undefined~prepare: app@undefined\n\napp@undefined prepare /home/jenkins/workspace/build\nlerna bootstrap --hoist\n\nlerna notice cli v3.9.0\n...\n```\nA build from yesterday with the same node-sass version but lerna 3.8.5 succeeded.. My gut feeling is that this isn't (only) an Artifactory issue, but some mismatch with the way the Jenkins server is set up. As clues towards that, the prerelease publish works from there, publication to latest works from other jobs (not using Lerna), and running the exact same publish job works in other environments.\nIs there a debug flag I can enable to get really verbose logs of the network traffic headers between Lerna and the npm repo? Also, as fair warning, I'm travelling for the next couple of weeks so may not be able to take this further until late February.. ",
    "ibezkrovnyi": "@evocateur \nWe have the same issue:\nlet's pretend we have following packages (actually we have more than 200 packages in monorepo):\n\nA\nB depends on A\nC depends on B and on A\nD depends on C\n\nActual behavior\nif I want to for example, test project C and its dependents, I should run following commands with adding --include-filtered-dependencies, because even if I'm not interested in time consuming npm run build for B and A, they will be symlinked, which means they will have no /dist folder\nlerna bootstrap --scope {,C} --include-filtered-dependencies --include-filtered-dependents\nlerna run build --scope {,C} --include-filtered-dependencies --include-filtered-dependents\nlerna run test --scope {,C} --include-filtered-dependents\nAlmost always it means to npm install + npm run build ALL 200 monorepo projects\nDesired behavior\nif lerna symlinked only --scope / --since packages (real scope), I could run:\nlerna bootstrap --scope {,C} --include-filtered-dependents\nlerna run build --scope {,C} --include-filtered-dependents\nlerna run test --scope {,C} --include-filtered-dependents\n--ignore\nadding all projects that are not in scope+filter flags seems a little bit too complex: I need to create list of all projects and then I need to substract manually projects returned by lerna list --scope/filter flags and pass the rest of packages to the ignore?\nProposal\nif project is not in scope (including filter flags include-filtered-dependents / include-filtered-dependencies), it should not be symlinked to node_modules of its dependents. It may be behind some flag? Something like --symlink-ignore-out-of-scope-projects or --symlink-only-projects-in-scope. As I understand change may be very small if not one line + updating command.js + readme :)\nBenefits\nNo need to npm install/rebuild not changed subprojects (A and B in example), it's completely fine to use their npm versions. It may save up to 99% of time.\n@Inlustra may I ask for your workaround if it is possible ofc, please? :flushed:. # Solution\nOption 1 - Forking Lerna repo\nIn the following line additional check can be introduced:\nhttps://github.com/lerna/lerna/blob/d6e6a42b7a820f2416869e2c71b920ee689ee315/core/package-graph/index.js#L116\n(see https://github.com/lerna/lerna/issues/1766)\nOption 2 - using simple script\nAs projects not in scope should not participate in the build at all, it is ok temporary make their versions incompatible with any dependent project.\nExample\nprojects\n- button@1.5.3\n- list-chooser (which depends on button@^1.0.0)\nwe ant to build and release\n- list-chooser\nso we want the following projects to be not linked and be taken from npm\n- button@1.5.3\nwhat we need to do in script\nAccording to:\nhttps://github.com/lerna/lerna/blob/d6e6a42b7a820f2416869e2c71b920ee689ee315/core/package-graph/index.js#L116\nit is enough to temporary break version of all projects not in scope (button@1.5.3), so algorithm is:\n`\nconst listOfProjectgsInScope = exec lerna list --scope // (or lerna changed) depending on your needs\nconst listOfProjects = exec lerna list\nconst listofProjectsNotInScope = listOfProjects - listOfProjectsInScope\nfor each listOfProjectsNotInScope:\n  set package.json#version to something like 0.0.0-thisIsWrongVersionMarker\n// lerna bootstrap (in package-graph) will not link button project into list-chooser/node_modules/button if version of button in monorepo is not compatible with button@^1.0.0 semver range of list-chooser\nlerna bootstrap --scope {,anyscope} \nlerna run build\nlerna run test\netc\n// just before publishing with npm publish\nfor each listOfProjectsNotInScope:\n  restore package.json#version by git checkout package.json\n// publish\nlerna exec -- npm publish // or lerna publish if it works for you\n`\n@evocateur our team has ~80 react components with very similar configuration (webpack, babel, lint, mocha, etc) and in short perspective after evaluating how monorepo goes we might move non-react-components and libraries (used by react components) into monorepo too (to automate testing of dependent projects, to automate releasing, and ofc centralized tooling of non-react projects is also big win when we manage ~120 non-react projects). We are also investigating idea of creating more libraries of components, decreasing number of atomic projects. Microsoft, Google, Facebook all have monorepo in one or another look with huge number of projects inside one single monorepo, and there are on the internet at least one story/conference talk per each company regarding their monorepos, but ofc you are aware of that.\n@JabbyPanda if you want I can show you list of projects we develop/support at my desk\n. @evocateur tested this change, works fine! Thank you :heart:\ntest details\n browsers demand the next line be empty \n\n```\n- /project-A\n- /project-B\n- /project-C that depends on project-A & project-B\n\n> lerna bootstrap --scope {,project-A,project-C}\n\n/project-C/node_modules/project-A is Junction Point to /project-A\n/project-C/node_modules/project-B is Folder (taken from npm)\nboth project-A & project-C bootstrapped\n```\n\n. in our nexus repository /-/whoami is not implemented too.\ncurrently we use workaround: lerna exec -- npm publish\nbtw: \n> npm whoami\nworks, https://github.com/npm/cli/blob/latest/lib/whoami.js#L21 npm first checks if it has username in local config. And only if it doesn't it will check /-/whoami.\n. While I agree that this feature is not implemented in Nexus, unfortunately Nexus works fine for us as private npm registry (including native npm whoami) and thus, it is easier to recreate lerna publish with lerna exec.\nNexus JIRA for tracking: https://issues.sonatype.org/browse/NEXUS-13433. Thanks for that, @ThisIsMissEm - will test latest Lerna tomorrow. For anyone who will have this issue there is workaround with writing custom script:\nhttps://github.com/lerna/lerna/issues/1421#issuecomment-453038004\nIt still is not as perfect as native lerna functionality, but at least it solves this issue without touching Lerna code.. > This seems like the wrong place to run npm update, tbh. When the preinstall lifecycle is run, it is perfectly acceptable to have process.env.npm_config_prefix defined, otherwise it might inherit the wrong value from an enclosing script shell (such as the root).\n1) If I comment line:\nhttps://github.com/lerna/lerna/blob/a059afd39e7d872b02ef8325486be1377b6e247f/utils/run-lifecycle/run-lifecycle.js#L78\nnpm update in preinstall script works well\n2) if in some circumstances process.env.npm_config_prefix can be wrong, is it possible to set it to empty string \"\" instead of wrong path\n3) I think projectDir is wrong value for prefix because npm command itself is run with base directory projectDir, so current behavior is (please correct me if i'm wrong):\nnpm_config_prefix=packages/projectA\nexec_in_folder(packages/projectA) `npm run preinstall` (which executes `npm update`)\nwhich is equivalent of:\ncd packages/projectA\nnpm update --prefix packages/projectA update\nwhich is obviously wrong as we are already inside directory packages/projectA, no need for additional prefix which comes to us from npm_config_prefix env variable.\nPossible solution\nIs it possible to just erase this env variable? (config.prefix = \"\")\nUpdate\n\nSo, digging into it, npm_config_prefix is always set, it's just that it defaults to the global prefix (npm c get prefix), not the localPrefix (as it is referred to internally). Would that be sufficient?\n\nThanks! Will test this later, 2 AM now :). Currently, as temporary workaround we are using patch-package which just removes following 2 lines:\nhttps://github.com/lerna/lerna/blob/45a05acf2d52a46f553fc1efadf9a32312aca82b/utils/collect-updates/collect-updates.js#L72-L73\nAnd everything works fine. But obviously this is awful solution.. I'm sorry, created by mistake. ",
    "JabbyPanda": "@ibezkrovnyi was exaggerating by mentioning possible maintenance of 200 packages in single monorepo, the real number of packages in our monorepo is closer to 20. . ",
    "krotscheck": "It looks like there are some experimental features in Node 10 that dump to stderr, causing the tests to break. I've updated both the Appveyor and travis configuration to set the appropriate environment parameter to disable these warnings.. Yeah, it's not for the faint of heart. A slightly safer approach would be to disable the git push in this case, i.e,\nif (this.gitEnabled && !this.amend) {\n      tasks.push(() => this.pushToRemote());\n    }\nAfter all, if you're already amending the commit, you're mucking around in your git history as is, and should be comfortable managing your own git history.. @evocateur Have you managed to take a look at this? Any opinion vis-a-vis the existing implementation and/or the alternative I proposed?. The LC_ALL flag isn't the correct one, I've updated it, let's see if it works.. Heya- you can get rid of all the experimental warnings by setting NODE_NO_WARNINGS=1 in the appveyor and travis files. That doesn't get you off the hook, there's still some odd test failures on windows.. Closed in favor of #1441. ",
    "MrChe": "@doug-wade i dont see logs on command prepare http://take.ms/8OKiQ. ",
    "mistic100": "I just saw the documentation about the --no-sort flag. So the behaviour I am experiencing is probably a bug as it should already by ordered correctly.\nI'll try to create a minimal test case.. I cannot reproduce with a minimal setup.\nThe build errors I have come from Typescript, I'll investigate here. But it's definitely not lerna's fault.. I identified my problem : my version was 2018.05.14-2456 (continuous deployment pattern), which is invalid for semver (leading zero and the minor version).\nSomehow this breaks the build of sub-modules even though yarn setup all the symlinks correctly.\nWhat is really is strange is that it fails when running lerna run build in the root directory but it works when running yarn run build in any of the modules directories. So, after all, perhaps lerna does something wrong.. ",
    "waxlamp": "Thanks for the explanation, @doug-wade. I was used to the behavior of semantic-release, and thought it was \"standard\", before we switched over to using Lerna. (Great project, btw, and thank you!)\nCan you point me to some more information about canary releases and how to use them? And I'm not sure what you mean by the problem of \"republishing from pushing the release commits\". Our workflow is to run lerna publish --conventional-commits --yes from CircleCI's deployment step, and just live with the fact that a new commit, after the merge commit, appears on master.. Thanks!. ",
    "appsolutegeek": "@doug-wade Actually, i passed in --concurrency 1 to --stream, so I got the nice colours for each stream but as far as I can see it only calls them one after another which is what i wanted.. This is very strange, I also just passed in the --exact while doing the add, and I still get ^ (carat) for my versions. I am using the latest installable lerna.\nSo I removed the lerna.json flag i set and then tried the following command and it gave me a carat version again.\nlerna add lodash --exact -scope=@mytest/testapp\n. Ah, ok, I didn't realize it wasn't implemented yet.\nYep agree, it would be nice get it fixed.\nIn the meantime i wrote a script . ",
    "mathieurousseau": "I am using lerna 3.x and I am having this issue.\nI have it hoisted and my package-lock gets updated each time. \n. @ThisIsMissEm  3.4.0. I did a clean clone, then ran npm install, lerna bootstrap, then I commited and pushed the package-lock.json \nMy packages.json is not fixing version (keeping ^ or ~) then each time a npm i is done, it installed newer version than the one in the package-lock.json\nMy more worrying problem is that the --ignore-changes has stopped working and I could not run lerna version without pushing the package-lock.json\n. Yes it needs to be versioned.\nI am using npm ci instead of npm i in my jenkins so now it works as npm ci (continuous integration) installs exactly the versions from the lock file.. ",
    "robertrossmann": "I experienced this behaviour as well. To complement this issue:\nWhen running\nlerna publish --conventional-commits --canary=beta\nExpected behaviour\n\nThe packages' versions are calculated based on the conventional commits' strategy. These versions are then published to the provided tag with the commit ID appended as expected.\nWhen new canary release is to be published, the new versions should still match conventional commits's strategy, but they should compare the previous @latest tag when deciding on the new version. In other words, if I previously published a canary release with semver-minor changes and I publish another release only containing semver-minor changes, I should not have the package version bumped again.\nIf I previously published a semver-minor canary release and now attempt to publish another canary release containing a semver-major change, the package's version should be bumped to the next semver-major version.\n\nCurrent behaviour\n\nThe packages' versions are bumped to the next semver-minor version regardless of what changes have been introduced since the last release. The --conventional-commits flag seems to have no effect on the release process.. @evocateur That is, unfortunately, not a viable option in independent versioning scheme as the version bump would be different for each package, depending on the contents of individual commits (due to --conventional-commits).\n\nIn my opinion, the current behaviour of this flag's combo is unintuitive, at least. It would be best if they could be somehow aware of each other, and if that is not something the project's maintainers are interested in, perhaps the docs could be made a bit more explicit about this...?\nThanks!. ",
    "pantoninho": "I am experiencing the same issue as @sgendler-stem.\nUsing --preid with --conventional-commits results in a correctly bumped version number (according to conventional commits spec), but the preid is not appended to the version number.\nI've also tried your tip @evocateur without success.\nrunning one of these:\nlerna version prerelease --conventional-commits || lerna version --cd-version=prerelease --conventional-commits\nresults in a wrongly bumped version number according to conventional-commits spec (it is always a PATCH).\nHaving --preid work well with --conventional-commits would be a killer feature for me.. Yes, that is what I initially thought, I was just following your tip above my comment.\nTo be more clear, what I really wanted for lerna to do is something like @robertrossmann mentioned.\nImagine I have a package at 0.0.1. After a feat commit, lerna version --conventional-commits would upgrade  it to 0.1.0 as it should. If I used lerna version --preid=beta --conventional-commits instead, I would expect it to bump it correctly to 0.1.0 (due to the feat commit), and then add the preid tag, making it 0.1.0-beta.0.\nIf I kept doing feat or fix commits, and bumping with lerna version --preid=beta --conventional-commits, it should only increment the beta version (e.g. 0.1.0-beta.1 -> 0.1.0-beta.2, ...etc).\nEventually the release would be ready, and I would just use lerna version --conventional-commits. I would expect the preid tag to be removed, finally upgrading it to 0.1.0.\nThere's also a chance there's a breaking change while publishing prereleases: If package version is 0.1.0-beta.2 and a breaking change commit is done, I would expect lerna version --preid=beta --conventional-commits to upgrade it to 1.0.0-beta.0.\nRight now, --preid gets ignored when using --conventional-commits.. @evocateur maybe I did not explain myself correctly.\nI need lerna to be able to guess the next version according to conventional commits specification and also add a preid tag on the version.\nI've had a look on the source code but I'm very unfamiliar with the project in order to know where to start.\nI've found out that on commands/version/index.js:223, preid gets completely ignored on that branch:\n} else if (conventionalCommits) {\n      // it's a bit weird to have a return here, true\n      return this.recommendVersions();\n}\nI am able to contribute but I think I need some guidance first.\n. I actually see some use cases for this flag.\nGiven the following scenario:\n- package-a@1.0.0 and package-b@2.0.0\n- package-a depends on package-b@^2.0.0\n- a fix commit affects package-b\nRunning lerna version --conventional-commits would bump package-b to 2.0.1 (correctly) and would update package-a dependency on package-b to ^2.0.1, causing a minor package bump to package-a (making it 1.0.1).\nThis is quite a useless version bump (and future publish) as package-b new version still satisfies package-a original dependency version (^2.0.0). The same is true for feat commits, which introduce a new feature, but is useless for its dependants if they do not make use of it.\nI have a bunch of packages that depend on one single common package. A bug fix on that common package creates a lot of meaningless version bumps on all the dependants.\n+1 on this flag! \n. @evocateur That feature would probably solve my problem.\nIs it something you would like lerna to have? I may give it a go if positive.. Are you using verdaccio? I've got this issue too but I'm not sure if the problem is on lerna's side.. ",
    "mingchuno": "@evocateur But if I want to do what @pantoninho has mentioned, what should I do? It seems currently prerelease and --conventional-commits cannot co-exist. \njs\n\"scripts\": {\n  \"devVersion\": \"yarn lerna version prerelease\",\n  \"releaseVersion\": \"yarn lerna version --conventional-commits\"\n}\nI have something like this and want releaseVersion to \"ignore\" the version bump in prerelease and apply conventional-commits until last release but not prerelease.. ",
    "Martaver": "The workflow that @pantoninho describes is the correct behavior for combining conventional-commits with prereleases. Lerna should be updated to behave in this way.\nI also intuitively thought that lerna version prerelease --conventional-commits would calculate the correct semver based on commit msgs, and then simply append & subsequently increment the preid - but unfortunately it just does a patch.. Also experiencing this behavior. My own npm get registry returns the correct registry. We're proxying public packages in our private repo, so npm info <my_package> version gives us our own private version. However lerna add <my_package>@<private_version> won't install it, reporting that the version doesn't exist since it's permanently trying to hit the public registry.. I believe I've found the issue... lerna uses the pacote package to add deps which accepts the same options as npm-registry-fetch. It passes the registry option to it in commands/add/index.js:162 sourced from this.options, which is never set.\nThe lerna add command also doesn't recognise the --registry argument.\nThis is the documentation for npm-registry-fetch's registry option: https://www.npmjs.com/package/npm-registry-fetch#optsregistry\nYou can see that when registry isn't specified, it defaults to a hardcoded NPM public registry. \nThis would explain why lerna add always sources from the public NPM registry.\nExpected behaviour should be for pacote to use the system configured NPM registry, instead of a hardcoded value. But this isn't likely to happen soon.\nIn core/command/index.js we can see that lerna allows for overrides to the command options sourced from lerna.json, which allows for a workaround adding the following to your lerna.json:\n{\n    \"command\": {\n        \"add\": {\n            \"registry\": \"<private_repo_url>\"\n        }\n    }\n}\nThis is pretty inconvenient though, since we have our local npm client already configured and maybe even a .npmrc file in our repo. We shouldn't have to explicitly provide the registry to the add command.\nThe best current solution would be for lerna to source the current npm registry in its configuration and pass that. We can use the registry-url package for this.\nAfter requiring it in commands/add/index.js we can update line 163 to:\nregistry: this.option.registry || registryUrl()\nThis fix works on my local build of lerna.. ",
    "hedgepigdaniel": "\nBecause conventional commits has no concept of an automatic prerelease. prerelease is a specific semver convention that lerna applies, always overruling the version bump suggested by --conventional-commits.\n\nHmm, is it possible to use the normal logic from conventional commits to determine the expected bump (without preids), and then add the preids on after?\n\nThere's also a chance there's a breaking change while publishing prereleases: If package version is 0.1.0-beta.2 and a breaking change commit is done, I would expect lerna version --preid=beta --conventional-commits to upgrade it to 1.0.0-beta.0.\n\nI would like to have CI running automated releases with alpha releases on one branch e.g. next, stable releases on another e.g. master. The way @pantoninho described, this would work well. There would be two steps:\n\nMerge changes to next. Have automated pre releases with preid of say beta, and with the appropriate version bump based on the changes since the last stable release (according to conventional commits). Debug any issues with version numbers.\nMerge changes from next to master. Have an automated stable release. The version number would be the same as the latest beta release, but without the -beta.n postfix.\n\nThe way it is, if the package was at 0.1.0, and I push a commit with a breaking change to next, then the pre release version that gets published is 0.1.1-beta.0. But if I push the same commits to master, I'll end up with a surprise 1.0.0 release!\n. This also leads to the undesireable situation where the type of version bump depends on the history of pre releases. Consider the following two alternative timelines, where the same series of code changes is made, but with different prereleases:\nWithout prereleases :+1:\n\nStart with version 0.1.0\nCommit feat: support apples in addition to oranges\nRun lerna publish --conventional-commits to release 0.2.0\n\nWith pre-releases :confused:\n\nStart with version 0.1.0\nCommit feat: support apples in addition to oranges\nRun lerna publish prerelease --conventional-commits --preid beta --dist-tag beta to release 0.1.1-beta.0\n:warning: As has already been pointed out, the prerelease 0.1.1-beta should really have been 0.2.0-beta.0, since it contained a new feature relative to the last stable release\nAfter testing the beta release run lerna publish --conventional-commits to graduate the release to 0.1.1\n:warning: A more serious problem: The stable release 0.1.1 (made after a prerelease) contains a new feature relative to 0.1.0, but it is only a patch bump! The same problem exists for breaking changes.. > As long as @jamiebuilds still has the ability to modify the license, there is no reason to believe we wont face continual modifications to the license.\n\nI think that's quite disingenuous, considering the change was made in a PR and was approved by other maintainers. If all the maintainers are in this together as @TheLarkInn  said, then it seems wrong to remove a maintainer and extensive early contributor from the organisation because you decided after approving their PR that it didn't work out well.\nThere are clearly a lot of software engineers who are concerned with the ethical implications of their work. This is right, because we are all responsible for the consequences of our actions. I hope that Lerna and other open source projects welcome this concern, discuss it openly, and try to find a productive way to act on it.. I'll just point out a particular sentence from the original licence change: https://github.com/lerna/lerna/pull/1616\n\nRecently it has come to my attention that many of these companies which are being paid millions of dollars by ICE are also using some of the open source software that I helped build.\n\nEmphasis on \"helped\"\nI think there's quite a bit of needless character assassination going on. Perhaps James has made some unfortunate statements at different times, but in the context of this issue, it hardly looks like he has claimed personal ownership of Lerna or any other open source project.. @Sieabah as I said perhaps he made some unfortunate statements - what I'm trying to say is that if you look at the license change PR where he elaborated, it does not look like he thinks he personally owns the project at the exclusion of anybody else. He did not push the change without review. When people say \"my\" thing, it can mean a lot of different things - its usually not helpful to draw strong conclusions from the use of that word.\nLooking at the commit history, it does look like he was heavily involved in the early days of Lerna. I assume he means \"my\" in a similar sense - \"Lerna is a project which I was heavily involved in and I share significant responsibility for creating\".. ",
    "marcofugaro": "Nope, I didn't touch the dependencies either. @evocateur right now only this\n\nafter I committed some changes to the package accurapp-scripts, the lerna diff is showing me the changed lines only of the files inside accurapp-scripts I changed, and nothing else.\n\nI tried to publish again after this, and it still prompts for every other package also.. Except they don't, take for example the package eslint-config-accurapp, these are its dependencies:\n\nNone of its dependencies is another package.\nAnd this is lerna asking me to publish it, even if it isn't in the lerna diff:\n\n. Hmm interesting, might be, how can I try to fix it? By removing the tags?. @evocateur Thank you! I will check the tags.\nDoes lerna need EVERY past publish tags to be changed, or just the latest ones? Because the latest ones are already present in the same branch I'm publishing from (not master). Alright man, I checked the tags using this script and turns out the latest tags are actually annotated. Also I made sure they're on the same branch I am in.\n\nI went ahead and made a diff for the latest tag and the current HEAD, only for one  package, like this:\ngit diff eslint-config-accurapp@4.1.0-beta.2..HEAD packages/eslint-config-accurapp/\nAnd it outputs nothing because nothing has actually changed.\nI don't know what else to do man, I provided you with the repo where this happens and the specific branch, if you wish to debug. Thanks for your help!. Yup, I think so. I think this is related to #1434. Thank you! I think this must be documented in the main readme. Happens to me also when running the command with yarn run. ",
    "hejiaji": "@danielo515 if use nohoist: [list of packages], i would have to put everything here, is there a way just disable hoist??. ",
    "xavierlefevre": "We decided to use -canary and -skip-git, as our way to have develop versions to test and not have conflicts with our flow.\nYour inputs are still precious to us! We would love to know how to improve our mono-repo use.. ",
    "rix0rrr": "\nWhy not just have the binary files live as raw JS, importing a compiled \"implementation\" and calling it?\n\nYeah, that's we end up doing to work around this, but I still feel lerna's behavior is wrong in this case.\nAs mentioned, if the upstream dependency was obtained through npm by using npm install, I could have used the binaries in my prepare script with no problems. However, when I build them at the same time using lerna, the same does not work. I was under the impression that lerna would be a replacement for a workflow where multiple packages together need to be manually npm installed or npm linked all the time.\n\nI have no experience with tsc's behaviour in this department, but I can guess it's doing a lexical iteration of package directories and failing due to this mismatch.\n\nNo, every package is compiled individually (by doing npm run prepare) in the right topological order. The fact that source is being generated using tsc is incidental--note that my reproducing example had no mention of tsc in there anywhere.\nThe problem is that lerna is doing the link action at a time before any package has been built, so it fails to symlink the binaries that will be generated (obviously), and takes to effort to correct that later on.. This seems to be a regression because lerna 2.8 did not have this behavior.. ",
    "jdolle": "I just encountered this bug this past week.\nFor others struggling, my temporary solution was to delete the node_modules and reinstall dependencies for the dependent package. And because I use yarn workspaces, deleting the node modules and re-yarning doesn't need to redownload anything.\n\"fixSymlink\": \"rm -rf ./node_modules && yarn\",\n\"build\": \"yarn fixSymlink && someBin\",. ",
    "acao": "i switched my project from yarn to npm and now am experiencing this problem.\nif you are having this issue with yarn, upgrade to the latest and it should resolve it. still a problem for npm however. also, with yarn workspaces, i never needed to use lerna link or bootstrap. ",
    "allanhortle": "I'm having this issue too. One of my packages is building a bin file during install which never gets symlinked into the sibling packages.. ",
    "yiochen": "Any opinion on this issue from maintainers? I can come up with a PR if you think it's a good feature to have.. ",
    "quarterto": "I tried it and it didn't seem to work \ud83e\udd37\u200d\u2640\ufe0f https://github.com/Financial-Times/x-dash/commit/8a18f7efdd94c959c8d2bea1c1c61877090be74a. did a bit of digging into yargs' parsing and it looks like .config() takes precedence over command line args. ",
    "track0x1": "What is the verdict on this? Can we lerna bootstrap --no-ci? Or better, can this functionality be changed to be explicit? There was nothing indicating that lerna would use npm ci when my build ran on AWS Codebuild. \u2639\ufe0f . What is the verdict on this? Can we lerna bootstrap --no-ci? Or better, can this functionality be changed to be explicit? There was nothing indicating that lerna would use npm ci when my build ran on AWS Codebuild. \u2639\ufe0f . ",
    "bjornicus": "when I tried this and then did lerna list it did not show my existing package, which made me think it did not work.  I then lerna import another repo and that one showed up, but not the one I moved manually to packages.  After some further poking around I found that I had private:true set in my package.json for that one and that causes it not to show in the lerna list output.\n. ",
    "amir-arad": "use hoisting, or let yarn workspace do the hoisting for you.. I'm sorry, you're right. I completely missed that part in the issue. I just moved from npm/lerna to yarn workspace/lerna because I had a day's work deleted by lerna calling rimraf and following symlinks. So there's also that.. ",
    "JonnyBGod": "This would also solve a problem I am facing with Docker multistage builds.\nWhen copying packages from on stage to the next for some reason some linked packages are not being copied.. I might be looking at it the wrong way. But until now I would use\nlerna publish --cd-version=prerelease --canary=${CIRCLE_BRANCH} --exact --skip-git --skip-npm --yes\nto calculate a new canary version to be used as a tag for docker images.\nI wanted to update my flow to work with the 3.x version.\nBut I do not see how to accomplish it without with lerna version because it does not support canary versions.\nIs there a reason for that? And then why does lerna publish support it bit not lerna version?\nAlso for your information, it first runs these commands skipping git and npm to use the new version tag for docker builds.Only after all builds have finished properly then it runs the actual publishing.. I understand that, but with a bit of extra work, up until now lerna was flexible enough to use for npm packages as well as other types of packages while keeping all versioning concise.\nNow what I do not understand is why do you support canary releases with the publish command but not with version command. Why not move that functionality entirely to the version command.\nThe problem come from the combination of deprecating --skip-npm and  not supporting lerna version --canary.\nWould you consider re-enabling it?. Thank for the explanation. In general terms I totally agree with you.\nBut then again, it looks to me that there should be a way to calculate the new version for different use cases without the need to actually publish anything.\nThis seams like a reasonable use case, to want to mix different packaging needs while keeping all versions concise.\nFor that I would rather make sure that everything builds up before actually starting to publish the new packages.\nI can see several different forms this could take form. Maybe a some kind of --dry-run flag would be appropriated. Or detaching the version calculation completely. Or enabling lerna changed to produce results with the calculated next version.\nDo any of these sounds like doable  to you?. ",
    "jaredh159": "I got this same error after changing the \"name\" field of my root package.json from \"root\" to something else.  Switching it back fixed things.. ",
    "mxmzb": "@benoj maybe you could provide some more information what caused it so others can find this and not waste hours?. ",
    "abharvey": "@benoj Could you help us all out with some more details on what your simple solution was?\nI'm running into this on an environment someone else has setup with no other documentation.\nThanks!. ",
    "xpepermint": "This is a serious issue which happens on Node 8, 9 and 10. It's not fixed in lerna@3.0.0-beta.21. Is there a quick workaround?. Thanks @scottmcpherson! I also came to this simple workaround:\n// package.json\n{\n  \"scripts\": {\n    \"bootstrap\": \"lerna exec npm install\",\n    \"publish\": \"lerna publish --force-publish\",\n    \"test\": \"lerna run test\"\n  },\n  \"devDependencies\": {\n    \"lerna\": \"3.0.0-beta.21\"\n  }\n}\nSo the lerna exec npm install command does the trick.. ",
    "scottmcpherson": "@xpepermint What ended up working for us was creating a custom js bootstrap script and executing that using yarn bootstrap.\nThe script is scripts/bootstrap.js:\n```\nconst spawnSync = require('child_process').spawnSync\nconst fs = require('fs-extra')\nconst path = require('path')\nconst chalk = require('chalk')\nconst RAISAL_UI_DIR = path.join(process.cwd(), 'packages', 'raisal-ui')\nif (!fs.existsSync(RAISAL_UI_DIR)) {\n  console.log(chalk.red(Trying to find: ${RAISAL_UI_DIR}))\n  return console.log(\n    chalk.red('Yarn bootstrap must be run from root of project')\n  )\n}\nspawnSync('lerna', ['bootstrap'], {\n  stdio: 'inherit'\n})\nspawnSync(/^win/.test(process.platform) ? 'yarn.cmd' : 'yarn', ['install'], {\n  cwd: RAISAL_UI_DIR,\n  stdio: 'inherit'\n})\nspawnSync(/^win/.test(process.platform) ? 'yarn.cmd' : 'yarn', ['install'], {\n  cwd: RAISAL_UI_DIR,\n  stdio: 'inherit'\n})\n```\nReplace const RAISAL_UI_DIR = path.join(process.cwd(), 'packages', 'raisal-ui') with the dir that needs the packages reinstalled.\nAnd then in my root package.json I added an npm script:\n\"scripts\": {\n    \"start\": \"lerna run start --stream --parallel\",\n    \"bootstrap\": \"node scripts/bootstrap.js\",\n    ...\n. @lucasowens I would suggest posting your terminal output along with your comment. Maybe there's something there that could help?. @evocateur The problem that I ran into while using file specifiers when designing our front-end was that we have multiple core packages that are reused across four clients. They are all in the same mono repo. And the core packages are all started and built with webpack. When we use the file specifiers, we lost live reload, because symlinks were no longer pointing to the original packages. That made file specifiers unusable for our use case.\nHave you ran into this issue?. ",
    "lucasowens": "I am also having this issue, but I'm having trouble determining exactly which package is the issue. . Thanks for the reply @scottmcpherson!\nHere is the output when I run lerna bootstrap\n```\n\u03bb lerna bootstrap\nlerna info version 2.11.0\nlerna info versioning independent\nlerna info Bootstrapping 19 packages\nlerna ERR! execute callback with error\nlerna ERR! Error: Command failed: yarn install --mutex network:42424 --non-interactive\nlerna ERR! warning \"eslint-config-kentcdodds > eslint-import-resolver-babel-module@3.0.0\" has unmet peer dependency \"babel-core@^6.0.0\".\nlerna ERR! warning \"workspace-aggregator-ee9a09ea-1ce3-403a-a7a8-d1b456360123 > @ournamespace/es-client > request-promise-native@1.0.5\" has unmet peer dependency \"request@^2.34\".\nlerna ERR! error An unexpected error occurred: \"ENOENT: no such file or directory, lstat 'C:\\Users\\me\\Source\\my-project\\packages\\weartime-domain\\node_modules\\@ournamespace'\".\nlerna ERR! yarn install v1.7.0\nlerna ERR! [1/4] Resolving packages...\nlerna ERR! [2/4] Fetching packages...\nlerna ERR! info fsevents@1.2.4: The platform \"win32\" is incompatible with this module.\nlerna ERR! info \"fsevents@1.2.4\" is an optional dependency and failed compatibility check. Excluding it from installation.\nlerna ERR! [3/4] Linking dependencies...\nlerna ERR! info If you think this is a bug, please open a bug report with the information provided in \"C:\\Users\\me\\Source\\my-project\\yarn-error.log\".\nlerna ERR! info Visit https://yarnpkg.com/en/docs/cli/install for documentation about this command.\nlerna ERR!\nlerna ERR!     at Promise.all.then.arr (C:\\Users\\me\\AppData\\Local\\Yarn\\Data\\global\\node_modules\\execa\\index.js:236:11)\nlerna ERR!     at \n{ Error: Command failed: yarn install --mutex network:42424 --non-interactive\nwarning \"eslint-config-kentcdodds > eslint-import-resolver-babel-module@3.0.0\" has unmet peer dependency \"babel-core@^6.0.0\".\nwarning \"workspace-aggregator-ee9a09ea-1ce3-403a-a7a8-d1b456360123 > @ournamespace/es-client > request-promise-native@1.0.5\" has unmet peer dependency \"request@^2.34\".\nerror An unexpected error occurred: \"ENOENT: no such file or directory, lstat 'C:\\Users\\me\\Source\\my-project\\packages\\weartime-domain\\node_modules\\@ournamespace'\".\nyarn install v1.7.0\n[1/4] Resolving packages...\n[2/4] Fetching packages...\ninfo fsevents@1.2.4: The platform \"win32\" is incompatible with this module.\ninfo \"fsevents@1.2.4\" is an optional dependency and failed compatibility check. Excluding it from installation.\n[3/4] Linking dependencies...\ninfo If you think this is a bug, please open a bug report with the information provided in \"C:\\Users\\me\\Source\\my-project\\yarn-error.log\".\ninfo Visit https://yarnpkg.com/en/docs/cli/install for documentation about this command.\nat Promise.all.then.arr (C:\\Users\\me\\AppData\\Local\\Yarn\\Data\\global\\node_modules\\execa\\index.js:236:11)\nat <anonymous>\nat process._tickCallback (internal/process/next_tick.js:188:7)\n\ncode: 1,\n  killed: false,\n  stdout: 'yarn install v1.7.0\\n[1/4] Resolving packages...\\n[2/4] Fetching packages...\\ninfo fsevents@1.2.4: The platform \"win32\" is incompatible with this module.\\ninfo \"fsevents@1.2.4\" is an optional dependency and failed compatibility check. Excluding it from installation.\\n[3/4] Linking dependencies...\\ninfo If you think this is a bug, please open a bug report with the information provided in \"C:\\\\Users\\\\me\\\\Source\\\\Repos\\\\GitLab\\\\my-project\\\\yarn-error.log\".\\ninfo Visit https://yarnpkg.com/en/docs/cli/install for documentation about this command.\\n',\n  stderr: 'warning \"eslint-config-kentcdodds > eslint-import-resolver-babel-module@3.0.0\" has unmet peer dependency \"babel-core@^6.0.0\".\\nwarning \"workspace-aggregator-ee9a09ea-1ce3-403a-a7a8-d1b456360123 > @ournamespace/es-client > request-promise-native@1.0.5\" has unmet peer dependency \"request@^2.34\".\\nerror An unexpected error occurred: \"ENOENT: no such file or directory, lstat \\'C:\\\\Users\\\\me\\\\Source\\\\Repos\\\\GitLab\\\\my-project\\\\packages\\\\weartime-domain\\\\node_modules\\\\@ournamespace\\'\".\\n',\n  failed: true,\n  signal: null,\n  cmd: 'yarn install --mutex network:42424 --non-interactive',\n  timedOut: false,\n  exitCode: 1 }\n```\nThe second time I run it, it works as expected.\nWhen I run yarn directly I get:\n\u03bb yarn\nyarn install v1.7.0\n[1/4] Resolving packages...\n[2/4] Fetching packages...\ninfo fsevents@1.2.4: The platform \"win32\" is incompatible with this module.\ninfo \"fsevents@1.2.4\" is an optional dependency and failed compatibility check. Excluding it from installation.\n[3/4] Linking dependencies...\nwarning \"eslint-config-kentcdodds > eslint-import-resolver-babel-module@3.0.0\" has unmet peer dependency \"babel-core@^6.0.0\".\nwarning \"workspace-aggregator-602dc8d5-75c6-4990-b45c-8e79f4bb2e3d > @ournamespace/es-client > request-promise-native@1.0.5\" has unmet peer dependency \"request@^2.34\".\nerror An unexpected error occurred: \"ENOENT: no such file or directory, lstat 'C:\\\\Users\\\\me\\\\Source\\\\my-project\\\\packages\\\\weartime-domain\\\\node_modules\\\\@ournamespace'\".\ninfo If you think this is a bug, please open a bug report with the information provided in \"C:\\\\Users\\\\me\\\\Source\\\\my-project\\\\yarn-error.log\".\ninfo Visit https://yarnpkg.com/en/docs/cli/install for documentation about this command.\nAgain it works successfully the second time I run it.\nIt seems that this is somehow related to winston but I cant be sure, I'm getting inconsistent results.\nAny help appreciated!\n. I just wanted to mention that this error disappeared for me and I'm not sure why. . So for relative file path specifiers is there a way to no-hoist? I like this idea, but currently the serverless framework needs it's own node_module folder in order to deploy. Any work around for this?. It does sound like a serverless issue. Lerna is not being used as a deployment tool, serverless is, it just isn't smart enough to find the packages. I'll stick with workspaces for now. Thanks. . We started seeing this issue today, and we are still running v3.3.0. We are using MyGet as our private registry. . I'm getting this error again with 3.8.1 with the following command. Publishing to MyGet.\nlerna publish --conventional-commits -m 'chore(release): publish [ci skip]' --yes --ignore=lv --no-verify-access --no-verify-registry\n. Thank you @evocateur, v3.8.4 fixed my issue!. ",
    "StrahilKazlachev": "My issue seems the same, quite hard to share.\nB depends on A.\n packages\n  * A - all is fine\n  * B - not fine, A* dependencies are not installed\nDoing lerna exec -- npm i && lerna link does what I want.\nFrom bootstrap description\n\n\nnpm install all external dependencies of each package.\n\n\n@evocateur does this mean that the external dependencies of the linked packages will not be installed?\nEdit: I'm not hoisting.\n. @evocateur Do I understand correctly that when using bootstrap a local sibling external dependencies will stay \"under\" it(local-pkg-B/node_modules/local-pkg-A/node_modules/ext-dep-1) - loosing the flat structure in local-pkg-B/node_modules I would normally get with npm install?. Warnings tend to be ignored till it's too late.\nCan there be an option to force a failure, --strict-licensing or something? Also being configurable through lerna.json would be great.\n. Warnings tend to be ignored till it's too late.\nCan there be an option to force a failure, --strict-licensing or something? Also being configurable through lerna.json would be great.\n. At work this is the practice for the Java teams. Since I just broke out \"all-js\" into a new monorepo I'm still exempt from this.\nIn the event I'm forced to follow suite my plan is to keep such packages excluded in the lerna.json and switch all packages that use them from relative file: specifier to normal pkg@version.. Let's assume that since this issue was not locked, not that something like this happened recently with all the issues, there is a will do discuss.. ",
    "DesignByOnyx": "This problem was fixed for our project by changing our \"packages\" path to include two asterisks instead of one. I just happened to get lucky on this one:\n{\n  \"packages\": [\n    \"modules/**\"\n  ],\n  \"version\": \"1.0.0\"\n}\nUPDATE: spoke a little too soon I guess, I get different results with successive runs of lerna bootstrap. The first run will install all deps for packages A and B, but not C and D. The second run will install all packages for A and D, but not B and C. It changes on every run. Running lerna link && lerna exec npm install seems to do the trick for now. Still investigating.. ",
    "silvenon": "Repro\nI created a Docker container with instructions how to reproduce the issue: silvenon/lerna-bootstrap-issue. You can check out the failing (lerna bootstrap) vs successful (lerna exec yarn && lerna link) script.. @TheAifam5 @elie222 what is your Lerna configuration (lerna.json)?. Maybe, but it seems like the shared part of your packages field doesn't match workspaces configuration. I think it should be shared rather than shared/*.. ",
    "TheAifam5": "Hey ho,\nI have a similar issue but with webpack and yarn workspaces.\nI'm using:\n- Node: 11.2.0\n- Webpack: 4.25.1\n- Yarn: 1.12.3\n- lerna: 3.4.3\nWorkspace config:\n\"workspaces\": [\n    \"shared\",\n    \"microservices/*\"\n  ]\nDirectory layout:\nshared/package.json\nmicroservices/<name>/package.json\nWebpack config:\n```\nimport * as webpack from 'webpack';\nimport * as path from 'path';\nimport * as nodeExternals from 'webpack-node-externals';\nimport tsConfigPathsPlugin from 'tsconfig-paths-webpack-plugin';\nimport EntryRunnerWebpackPlugin from 'entry-runner-webpack-plugin';\nconst config: webpack.Configuration = {\n  entry: ['webpack/hot/poll?1000', './main.hmr.ts'],\n  target: 'node',\n  context: path.resolve('./src'),\n  output: {\n    path: path.join(__dirname, 'dist'),\n    filename: 'server.js',\n  },\n  externals: [\n    nodeExternals({\n      whitelist: ['webpack/hot/poll?1000'],\n    }),\n  ],\n  module: {\n    rules: [\n      {\n        test: /.tsx?$/,\n        use: 'ts-loader',\n        exclude: /node_modules/,\n      },\n    ],\n  },\n  mode: 'development',\n  resolve: {\n    extensions: ['.tsx', '.ts', '.js'],\n    plugins: [new tsConfigPathsPlugin()],\n  },\n  plugins: [\n    new webpack.HotModuleReplacementPlugin(),\n    new EntryRunnerWebpackPlugin(path.resolve(__dirname), 'server.js'),\n  ],\n};\nexport default config;\n```\nLog:\n```\nlerna ERR! yarn run build exited 1 in 'microservice-database'\nlerna ERR! yarn run build stdout:\n$ webpack\nHash: 11947ae751359d9ff957\nVersion: webpack 4.25.1\nTime: 11689ms\nBuilt at: 11/17/2018 12:05:48 AM\n    Asset      Size  Chunks             Chunk Names\nserver.js  8.86 MiB    main  [emitted]  main\nEntrypoint main = server.js\n[0] multi webpack/hot/poll?1000 ./main.hmr.ts 40 bytes {main} [built]\n[../../../node_modules/@nestjs/common/utils sync recursive] /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/@nestjs/common/utils sync 160 bytes {main} [optional] [built]\n[../../../node_modules/webpack/hot/log-apply-result.js] (webpack)/hot/log-apply-result.js 1.27 KiB {main} [built]\n[../../../node_modules/webpack/hot/log.js] (webpack)/hot/log.js 1.11 KiB {main} [built]\n[../../../node_modules/webpack/hot/poll.js?1000] (webpack)/hot/poll.js?1000 1.15 KiB {main} [built]\n[./app.module.ts] 933 bytes {main} [built]\n[./database/database.module.ts] 1.02 KiB {main} [built]\n[./main.hmr.ts] 1.22 KiB {main} [built]\n[./main.options.ts] 262 bytes {main} [built]\n[./users/users.controller.ts] 2.85 KiB {main} [built]\n[./users/users.module.ts] 1.24 KiB {main} [built]\n[./users/users.providers.ts] 242 bytes {main} [built]\n[./users/users.service.ts] 2.44 KiB {main} [built]\n[http] external \"http\" 42 bytes {main} [built]\n[https] external \"https\" 42 bytes {main} [built]\n    + 1477 hidden modules\nWARNING in /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/@nestjs/common/utils/load-package.util.js 8:15-35\nCritical dependency: the request of a dependency is an expression\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/@nestjs/core/nest-factory.js\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/@nestjs/core/index.js\n @ ./main.hmr.ts\n @ multi webpack/hot/poll?1000 ./main.hmr.ts\nWARNING in /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/optional/optional.js 6:11-26\nCritical dependency: the request of a dependency is an expression\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/@nestjs/core/nest-application.js\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/@nestjs/core/index.js\n @ ./main.hmr.ts\n @ multi webpack/hot/poll?1000 ./main.hmr.ts\nWARNING in /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize-typescript/lib/services/models.js 175:29-46\nCritical dependency: the request of a dependency is an expression\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize-typescript/lib/models/BaseModel.js\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize-typescript/lib/models/Model.js\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize-typescript/index.js\n @ ./users/user.entity.ts\n @ ./users/users.service.ts\n @ ./users/users.module.ts\n @ ./app.module.ts\n @ ./main.hmr.ts\n @ multi webpack/hot/poll?1000 ./main.hmr.ts\nWARNING in /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize/lib/sequelize.js 393:61-74\nCritical dependency: the request of a dependency is an expression\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize/index.js\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize-typescript/lib/enums/DataType.js\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize-typescript/index.js\n @ ./users/user.entity.ts\n @ ./users/users.service.ts\n @ ./users/users.module.ts\n @ ./app.module.ts\n @ ./main.hmr.ts\n @ multi webpack/hot/poll?1000 ./main.hmr.ts\nWARNING in /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize/lib/dialects/mssql/connection-manager.js 21:19-62\nCritical dependency: the request of a dependency is an expression\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize/lib/dialects/mssql/index.js\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize/lib/sequelize.js\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize/index.js\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize-typescript/lib/enums/DataType.js\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize-typescript/index.js\n @ ./users/user.entity.ts\n @ ./users/users.service.ts\n @ ./users/users.module.ts\n @ ./app.module.ts\n @ ./main.hmr.ts\n @ multi webpack/hot/poll?1000 ./main.hmr.ts\nWARNING in /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize/lib/dialects/mysql/connection-manager.js 32:19-62\nCritical dependency: the request of a dependency is an expression\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize/lib/dialects/mysql/index.js\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize/lib/sequelize.js\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize/index.js\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize-typescript/lib/enums/DataType.js\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize-typescript/index.js\n @ ./users/user.entity.ts\n @ ./users/users.service.ts\n @ ./users/users.module.ts\n @ ./app.module.ts\n @ ./main.hmr.ts\n @ multi webpack/hot/poll?1000 ./main.hmr.ts\nWARNING in /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize/lib/dialects/postgres/connection-manager.js 22:16-59\nCritical dependency: the request of a dependency is an expression\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize/lib/dialects/postgres/index.js\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize/lib/sequelize.js\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize/index.js\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize-typescript/lib/enums/DataType.js\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize-typescript/index.js\n @ ./users/user.entity.ts\n @ ./users/users.service.ts\n @ ./users/users.module.ts\n @ ./app.module.ts\n @ ./main.hmr.ts\n @ multi webpack/hot/poll?1000 ./main.hmr.ts\nWARNING in /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize/lib/dialects/sqlite/connection-manager.js 25:19-62\nCritical dependency: the request of a dependency is an expression\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize/lib/dialects/sqlite/index.js\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize/lib/sequelize.js\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize/index.js\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize-typescript/lib/enums/DataType.js\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize-typescript/index.js\n @ ./users/user.entity.ts\n @ ./users/users.service.ts\n @ ./users/users.module.ts\n @ ./app.module.ts\n @ ./main.hmr.ts\n @ multi webpack/hot/poll?1000 ./main.hmr.ts\nWARNING in /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/express/lib/view.js 81:13-25\nCritical dependency: the request of a dependency is an expression\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/express/lib/application.js\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/express/lib/express.js\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/express/index.js\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/@nestjs/core/adapters/express-adapter.js\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/@nestjs/core/nest-factory.js\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/@nestjs/core/index.js\n @ ./main.hmr.ts\n @ multi webpack/hot/poll?1000 ./main.hmr.ts\nWARNING in /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/mysql2/lib/helpers.js\nModule not found: Error: Can't resolve 'cardinal' in '/home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/mysql2/lib'\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/mysql2/lib/helpers.js\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/mysql2/lib/parsers/binary_parser.js\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/mysql2/lib/commands/execute.js\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/mysql2/lib/commands sync ^.\\/.*.js$\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/mysql2/lib/commands/index.js\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/mysql2/lib/connection.js\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/mysql2/index.js\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize/lib/dialects/mysql/connection-manager.js\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize/lib/dialects/mysql/index.js\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize/lib/sequelize.js\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize/index.js\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize-typescript/lib/enums/DataType.js\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize-typescript/index.js\n @ ./users/user.entity.ts\n @ ./users/users.service.ts\n @ ./users/users.module.ts\n @ ./app.module.ts\n @ ./main.hmr.ts\n @ multi webpack/hot/poll?1000 ./main.hmr.ts\nWARNING in /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize/lib/dialects/postgres/connection-manager.js\nModule not found: Error: Can't resolve 'pg' in '/home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize/lib/dialects/postgres'\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize/lib/dialects/postgres/connection-manager.js\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize/lib/dialects/postgres/index.js\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize/lib/sequelize.js\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize/index.js\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize-typescript/lib/enums/DataType.js\n @ /home/theaifam5/Documents/Projects/TheAifam5/nestjs-docker-microservices/node_modules/sequelize-typescript/index.js\n @ ./users/user.entity.ts\n @ ./users/users.service.ts\n @ ./users/users.module.ts\n @ ./app.module.ts\n @ ./main.hmr.ts\n @ multi webpack/hot/poll?1000 ./main.hmr.ts\n. @silvenon\n{\n  \"packages\": [\"shared/\", \"apps/\", \"services/*\"],\n  \"npmClient\": \"yarn\",\n  \"useWorkspaces\": true,\n  \"version\": \"independent\",\n  \"stream\": true,\n  \"parallel\": true\n}\n```\nI think I should open a new issue, for webpack-only related stuff.. @silvenon shared contains also subfolders with packages which I use everywhere. That's not a problem here. The problem on my side, is about that webpack does not work properly.\nbut what I seen, webpack transpiles to the \"server.js\" and is usable, but the error messages about missing dependencies is annoying.\nservices/webpack.common.ts\n```\nimport * as webpack from 'webpack';\nimport * as webpackMerge from 'webpack-merge';\nimport * as nodeExternals from 'webpack-node-externals';\nimport { TsconfigPathsPlugin } from 'tsconfig-paths-webpack-plugin';\ntype WebpackMode = 'development' | 'production';\nexport default (\n  configs: webpack.Configuration[],\n  _: any,\n  argv: { [name: string]: any },\n): webpack.Configuration => {\n  let mode: WebpackMode = 'development';\n  let isHot = false;\nif (process.env.NODE_ENV) {\n    mode = process.env.NODE_ENV as WebpackMode;\n  } else if ('p' in argv) {\n    mode = 'production';\n  } else if ('mode' in argv) {\n    mode = argv.mode;\n  }\nif ('hmr' in argv) {\n    isHot = argv.hmr;\n  }\nif (mode === 'production' && isHot) {\n    throw new Error('Unable to use HMR in production mode!');\n  }\nreturn webpackMerge.smartStrategy({\n    'module.rules.use': 'prepend',\n  })(\n    {\n      mode,\n      entry: ['webpack/hot/poll?100', ./src/main${isHot ? '.hmr' : ''}.ts],\n      target: 'node',\n      output: {\n        filename: 'server.js',\n        publicPath: '/',\n        libraryTarget: 'commonjs',\n      },\n      module: {\n        rules: [\n          {\n            test: /.(js|ts)x?$/,\n            loader: 'babel-loader',\n            options: {\n              presets: [\n                ['@babel/env', { modules: false }],\n                '@babel/typescript',\n              ],\n              plugins: [\n                [\n                  '@babel/plugin-proposal-decorators',\n                  {\n                    decoratorsBeforeExport: true,\n                  },\n                ],\n                '@babel/plugin-proposal-class-properties',\n              ],\n            },\n            include: __dirname,\n            exclude: /node_modules/,\n          },\n        ],\n      },\n      plugins: [\n        new webpack.WatchIgnorePlugin([/.js$/, /.d.ts$/]),\n        new webpack.DefinePlugin({\n          'process.env.NODE_ENV': JSON.stringify(mode),\n        }),\n        /new webpack.NormalModuleReplacementPlugin(\n          /..\\/migrate/,\n          '../util/noop.js',\n        ),\n        new webpack.NormalModuleReplacementPlugin(\n          /..\\/seed/,\n          '../util/noop.js',\n        ),\n        new webpack.IgnorePlugin(/mariasql/),\n        new webpack.IgnorePlugin(/mssql/),\n        new webpack.IgnorePlugin(/mongodb/),\n        new webpack.IgnorePlugin(/sql.js/),\n        new webpack.IgnorePlugin(/redis/),\n        new webpack.IgnorePlugin(/react-native-sqlite-storage/),\n        new webpack.IgnorePlugin(/mysql/),\n        new webpack.IgnorePlugin(/mysql2/),\n        new webpack.IgnorePlugin(/oracle/),\n        new webpack.IgnorePlugin(/oracledb/),\n        new webpack.IgnorePlugin(/pg/),\n        new webpack.IgnorePlugin(/pg-query-stream/),\n        new webpack.IgnorePlugin(/sqlite3/),\n        new webpack.IgnorePlugin(/strong-oracle/),\n        new webpack.IgnorePlugin(/pg-native/),/\n      ],\n      optimization: {\n        noEmitOnErrors: true,\n        usedExports: !isHot,\n        minimize: !isHot,\n        removeEmptyChunks: !isHot,\n      },\n      externals: [nodeExternals()],\n      resolve: {\n        extensions: ['.ts', '.tsx', '.js', '.json'],\n        plugins: [new TsconfigPathsPlugin()],\n        modules: ['node_modules'],\n        symlinks: false,\n      },\n      stats: 'verbose',\n      /stats: {\n        warningsFilter: /export . was not found in/,\n      },*/\n    },\n    ...configs,\n  );\n};\n```\nand every subproject in services has:\n```\nimport * as path from 'path';\nimport webpack from 'webpack';\nimport webpackCommon from '../webpack.common';\nexport default webpackCommon.bind(undefined, [\n  {\n    context: path.resolve(__dirname),\n    output: {\n      path: path.join(__dirname, 'dist'),\n    },\n    resolve: {\n      modules: [path.join(__dirname, 'node_modules')],\n    },\n  },\n] as webpack.Configuration[]);\n```. Nevermind, I found the problem, for my case:\nservices/webpack.common.ts\nexternals: [\n        nodeExternals(),\n        nodeExternals({\n          modulesFromFile: true,\n        }),\n        nodeExternals({\n          modulesDir: path.resolve(__dirname, '../node_modules'),\n        }),\n      ],. ",
    "elie222": "Same issues for us. Banging my head against a wall. Works fine on my Mac. Causing me issues on remote Ubuntu server or in a docker container.. Using --scope?. ",
    "karthikiyengar": "~Can we please reopen? It really does not install package dependencies on Ubuntu. Using npm after lerna link convert. lerna exec -- npm install works fine. Is this by design?~\nIt works now, but I cannot remember specifically what I did to resolve this. Since I was migrating from yarn, I had to remove the workspaces reference from my package.json - After that, I tried with a fresh clone and it seemed to work.. ",
    "TillaTheHun0": "I ran into this when transitioning from workspaces and yarn -> npm@6. With yarn, I originally had useWorkspaces set to true in my lerna.json, which I believe tells lerna to just defer to yarn for installing and hoisting. When I removed that, lerna properly installed externals for all packages as intended.\nTL;DR: It was my fault. Make sure useWorkspaces in lerna.json is not set to true when using npm as your npm client.. ",
    "sp3c1": "@MatejMazur  Researching this myself. I think there is something like that. \nWith would mean you should enforce some naming in the packages and then\nlerna --scope=packages-* exec ....\nshould do the trick. But yeah, would be nice to be able to do ./packages/*\nBigger problem for me there, as I am running this with, TS is that I need to prebuild some of the packages first, to get flat dist and not some crazy nested tree.. ",
    "XBeg9": "+1 very strange that I can't use a folder instead of package-names. Any plans for such feature?. ",
    "Enase": "I confirm the same issue with npm when I try to run lerna bootstrap, so u can add npm label as well.. ",
    "ChrisBAshton": "To confirm - is there a plan for lerna upgrade to be implemented?. Almost, but not quite - we still want the freedom to publish independent versions. For example: package A is a major version release, package B is a minor version release, but they're both connected to each other so should only appear as one tag on GitHub.\nFixed/Locked mode would force package B to be a major release when we don't want it to be.. Perhaps an extra flag would be useful? Something like:\nlerna publish --independent --combined-git-tag\nThe great thing about Lerna is that it lets you manage code better, by having related packages in a monorepo where everything can be seen in one place - yet the freedom to make each package independently published & self-contained.\nGit tagging is about code management, rather than NPM which is about having something versionable to consume as a third-party. So I don't think the --independent flag should have to apply to all parts of the publication pipeline \ud83e\udd14 . Very good question!\nIf only one package has changed, the --combined-git-tag does nothing (treat as a normal release).\nIf more than one package has changed, the --combined-git-tag shows we want to override the Git tag behaviour, best handled in a Lerna prompt.\n\nWhich package should form the basis of the Git tag?\n- Package A\n- Package B\n- None\n\nIf a package is chosen, the version would be derived from that, perhaps with an identifier (e.g. v8.0.2-combined) to signify that other packages form part of the release.\nIf None is chosen, allow the dev to form their own tag name:\n\nWrite the name of the desired Git tag: __\n\nThis could even be made part of the CLI api to avoid the prompt completely, if the developer wishes!\n--combined-git-tag=\"custom-tag\"\nThat would be my suggestion. (I had thought of adding a \"corePackage\" property to the lerna.json, as there's typically a 'master' package - e.g. babel-core - with multiple satellite dependencies that are all basically tied to the core major version. That worked great until I thought \"what happens when a change is made to a satellite dependency, and not the core\"? So the solution would need to vary on a case by case basis!). Adding a comment to keep this 'fresh'. It's had a few +1s so looks like it's worth keeping open.. True, it should probably be a package. Happy to close.\nBut this still feels like a bug - worth catching with a validation error (\"One of the directories under packages/ is missing a package.json!\") or just skipping altogether.. Amazing work, thanks @milesj !. ",
    "MatthewHerbst": "@tivac thanks, that's an interesting idea, but yeah, for now can't go to lerna@3.. @evocateur changing to lerna@3, while something we plan on doing, is well out-of-scope for the current project of switching from Yarn to npm. Further, even when we switch to lerna@3, we are never going to move all of our dependencies into one place at the top. Not only does that break traditional package structure (including a myriad of tools), but it also locks us in to use Lerna/hoisting/using a mono-repo.\nI'd appreciate it if you could assist in the original question, which is how to generate package-lock.json files in Lerna, ideally per-package with local packages includes and devDependencies marked as such.. @evocateur that makes some progress, thanks! Two issues: local packages are not in the package-lock.json files when they should be, and, devDependencies are not properly marked with \"dev\": true. Any idea how to get either of those behaviors, or is that not currently possible?. Also, is there a way to run lerna bootstrap --hoist and not have --hoist change the top-level package-lock.json? We want to use --hoist when building for speed, but we want the top-level package-lock.json to reflect the top-level package.json.. Thanks for the quick responses! Yeah, the only thing we have in our top-level package.json is lerna and some linting tools. We have a lot of non-shared devDependencies between our packages, so we can't (well, don't want to) bring them all up to the top-level.\nWhat do you mean by relative file specifiers? I don't think I've seen any language about that - did I miss it in the docs?\nWould lerna be open to PRs that enabled:\n\n--hoist to work while properly generating/maintaining per-package package-lock.json files\n\"dev\": true\" for devDependencies in per-package package-lock.json files\n\nAlso, I don't think this has been answered: is there a reason local packages don't show up in the package-lock.json files? (And if not, a PR to allow that as well?). @franher I have not. I don't think it's possible without large changes to how lerna works on these things. For example, I want to benefit from hoisting while still have per-package lock files.\n@tivac Thanks for the link. Didn't realize to look in the npm docks and not the Lerna docks. That does seem like hopefully a happy path to get local packages into the lock file as well, will have to test that.. ",
    "franher": "Hello guys, \nI'm using lerna v3.0.0-beta.21, npm v6.1.0 and node v8.11.3.\nI have the same issue. Doing lerna bootstrap it generates only the package-lock.json on the root, but not into every package.\n@MatthewHerbst did you resolve the issue at the end? Thank you\nEDITED: With lerna v2.9.0 is generating the respective package-lock.json properly\n. ",
    "jakewhelan": "Using lerna@3.0.0-beta.21 package-lock is not generating per (nested) package when using npx lerna bootstrap\nHave also tried npx lerna exec -- npm i, and tried using also lerna@2.11.0 and lerna@2.9.0\nNone of these work.\nLerna project current looks like this:\npackages/\n  foo/\n    bar/\n      package.json\n    baz/\n      package.json\nLerna.json\njson\n{\n  \"lerna\": \"2.11.0\",\n  \"packages\": [\n    \"packages/foo/*\"\n  ],\n  \"version\": \"independent\"\n}\nIf I manually cd to each package and npm i then it works, it goes without saying that this is an undesirable workflow.. Using lerna@3.0.0-beta.21 package-lock is not generating per (nested) package when using npx lerna bootstrap\nHave also tried npx lerna exec -- npm i, and tried using also lerna@2.11.0 and lerna@2.9.0\nNone of these work.\nLerna project current looks like this:\npackages/\n  foo/\n    bar/\n      package.json\n    baz/\n      package.json\nLerna.json\njson\n{\n  \"lerna\": \"2.11.0\",\n  \"packages\": [\n    \"packages/foo/*\"\n  ],\n  \"version\": \"independent\"\n}\nIf I manually cd to each package and npm i then it works, it goes without saying that this is an undesirable workflow.. ",
    "thomasboyt": "I recently converted a couple separate repos into a single Lerna 3 monorepo. I had some trouble (which will probably lead to docs issues & PRs), but thanks to a few example projects I could look at like https://github.com/CondeNast-Copilot/atjson/, I managed to figure out how to configure my repo correctly.\nThis lockfile problem is really my only big lingering question. Currently, my project's lockfile only contains the top-level devDependencies, and not the hoisted dependencies. This also seems to be an issue with the atjson repo (for example, the react dep in this package is not present in the package-lock.json) , so I at least know I'm not the only person with this problem.\nNow, this isn't a show-stopper, necessarily. It just means, practically, I don't have a lockfile for my repo, which is a survivable issue, and I think a hit I'm going to just take for now. But it does seem like something that either needs resolution before 3.0's release, by finding a way to hoist lockfile dependencies, or a heck of a lot of docs justifying why it doesn't have a lockfile.\nIn addition, lerna add complicates this tremendously. If you lerna add a package, you will... find a newly-generated package-lock.json for each package. In addition, there's all sorts of npm commands that will regenerate package-lock.json, like npm link. The atjson package gets around this by adding an .npmrc to each package with package-lock=false. If the happy path for Lerna really is supposed to be \"don't add a package-lock.json for individual packages\", this would be nice to have generated by the new lerna create, and documented for adding to existing packages.\n\nHoisted bootstrap really doesn\u2019t play well with lockfiles, which is among the reasons why I recommend using relative file: specifiers to express sibling dependencies (thus enabling the root lockfile to manage the entire tree, including the lerna-managed packages).\n\nI don't understand this as a workaround, but I've seen it mentioned in a few issues now, so I'm curious - how does using file: specifiers cause the root lockfile to have hoisted dependencies? Or does it mean you have deduplication without using the --hoist mechanism, somehow? I know lerna's repo uses this, and lerna is the only project I've seen that has a package-lock.json that contains all dependencies, but I assumed that had nothing to do with file: specifiers and was just because lerna is self-hosting and specifies itself as a dependency, causing it to import every package and include them in the lockfile, which is... not a workable solution for most repos, I think?\n(As an aside in all this: I assume this wasn't a problem with 2.x & Yarn because Yarn workspaces managed hoisting the lockfiles, right? Never used to 2.x nor Yarn though so sorry if I'm off on that.). Ah, thanks! I'll give this a shot.\nSo I assume a new best practices guide would look something like\n\nUse npx lerna link convert (or just npx lerna link if you haven't already bootstrapped?) to create relative file specifiers\nRun npm install packages/* to install every package in the repo as a dependency of the root project, which will result in file: dependencies in the root project\nPut all devDependencies in the root-level package.json, because presumedly npm install packages/* will not install devDependencies of the packages (I might be wrong on this/maybe there's a way to configure it?)\nWhen you add a new package, run npm install packages/newpackage from root, and re-run lerna link\nTo install the project fresh, just run npm install && npx lerna link in the root, and never run npx lerna bootstrap\n\nWonder if there are any hidden downside to this format, but it seems good to me. I'll give it a shot in my repo!. ",
    "stephanschubert": "I noticed it too\u2014serverless won't find plugins otherwise. Had to put serverless and it's plugins back into the package's package.json as devDependencies.. ",
    "bmuenzenmeyer": "\nPretty much exactly, except you only ever need to run lerna link convert once, regardless of bootstrap status. npm install itself handles all the linking seamlessly from that point on.\n\n@evocateur @thomasboyt does this set up steps assume running lerna NOT in independent mode?\nAre you experiencing any problems with this approach? We are having trouble getting this to work within CI, even though it works locally and when released. A package in our monorepo complains about a missing resolution (file: ../ specifier) . @mocheng if you use one or the other, does it appear to work?. ",
    "zachwolf": "Has anyone else used this pattern run into issues with .bin executables not being found? Reduced test case of what I'm running into: https://github.com/zachwolf/monorepo-issue-reduced-test-case. Sorry if this is the wrong place, but it seems related.\nIs there something under the covers that is trying to pull the latest lerna at npm install? Our package.json has lerna pinned at 3.0.0-beta.21. However running yarn gives this massive error error Couldn't find any versions for \"@lerna/command\" that matches \"^3.1.3\".\n\n\nfull error log\n\nyarn\nyarn install v1.7.0\nwarning package.json: No license field\n[1/4] \ud83d\udd0d  Resolving packages...\nerror Couldn't find any versions for \"@lerna/command\" that matches \"^3.1.3\"\ninfo Visit https://yarnpkg.com/en/docs/cli/install for documentation about this command.\nError: Couldn't find any versions for \"@lerna/create\" that matches \"^3.1.3\"\n    at MessageError.ExtendableBuiltin (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:243:66)\n    at new MessageError (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:272:123)\n    at Function. (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:52213:13)\n    at Generator.next ()\n    at step (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:98:30)\n    at /Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:109:13\n    at \n    at process._tickCallback (internal/process/next_tick.js:188:7)\nError: Couldn't find any versions for \"@lerna/diff\" that matches \"^3.1.3\"\n    at MessageError.ExtendableBuiltin (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:243:66)\n    at new MessageError (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:272:123)\n    at Function. (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:52213:13)\n    at Generator.next ()\n    at step (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:98:30)\n    at /Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:109:13\n    at \n    at process._tickCallback (internal/process/next_tick.js:188:7)\nError: Couldn't find any versions for \"@lerna/exec\" that matches \"^3.1.3\"\n    at MessageError.ExtendableBuiltin (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:243:66)\n    at new MessageError (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:272:123)\n    at Function. (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:52213:13)\n    at Generator.next ()\n    at step (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:98:30)\n    at /Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:109:13\n    at \n    at process._tickCallback (internal/process/next_tick.js:188:7)\nError: Couldn't find any versions for \"@lerna/global-options\" that matches \"^3.1.3\"\n    at MessageError.ExtendableBuiltin (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:243:66)\n    at new MessageError (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:272:123)\n    at Function. (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:52213:13)\n    at Generator.next ()\n    at step (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:98:30)\n    at /Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:109:13\n    at \n    at process._tickCallback (internal/process/next_tick.js:188:7)\nError: Couldn't find any versions for \"@lerna/changed\" that matches \"^3.1.3\"\n    at MessageError.ExtendableBuiltin (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:243:66)\n    at new MessageError (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:272:123)\n    at Function. (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:52213:13)\n    at Generator.next ()\n    at step (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:98:30)\n    at /Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:109:13\n    at \n    at process._tickCallback (internal/process/next_tick.js:188:7)\nError: Couldn't find any versions for \"@lerna/clean\" that matches \"^3.1.3\"\n    at MessageError.ExtendableBuiltin (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:243:66)\n    at new MessageError (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:272:123)\n    at Function. (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:52213:13)\n    at Generator.next ()\n    at step (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:98:30)\n    at /Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:109:13\n    at \n    at process._tickCallback (internal/process/next_tick.js:188:7)\nError: Couldn't find any versions for \"@lerna/publish\" that matches \"^3.1.3\"\n    at MessageError.ExtendableBuiltin (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:243:66)\n    at new MessageError (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:272:123)\n    at Function. (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:52213:13)\n    at Generator.next ()\n    at step (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:98:30)\n    at /Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:109:13\n    at \n    at process._tickCallback (internal/process/next_tick.js:188:7)\nError: Couldn't find any versions for \"@lerna/init\" that matches \"^3.1.3\"\n    at MessageError.ExtendableBuiltin (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:243:66)\n    at new MessageError (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:272:123)\n    at Function. (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:52213:13)\n    at Generator.next ()\n    at step (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:98:30)\n    at /Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:109:13\n    at \n    at process._tickCallback (internal/process/next_tick.js:188:7)\nError: Couldn't find any versions for \"@lerna/import\" that matches \"^3.1.3\"\n    at MessageError.ExtendableBuiltin (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:243:66)\n    at new MessageError (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:272:123)\n    at Function. (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:52213:13)\n    at Generator.next ()\n    at step (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:98:30)\n    at /Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:109:13\n    at \n    at process._tickCallback (internal/process/next_tick.js:188:7)\nError: Couldn't find any versions for \"@lerna/list\" that matches \"^3.1.3\"\n    at MessageError.ExtendableBuiltin (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:243:66)\n    at new MessageError (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:272:123)\n    at Function. (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:52213:13)\n    at Generator.next ()\n    at step (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:98:30)\n    at /Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:109:13\n    at \n    at process._tickCallback (internal/process/next_tick.js:188:7)\nError: Couldn't find any versions for \"@lerna/run\" that matches \"^3.1.3\"\n    at MessageError.ExtendableBuiltin (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:243:66)\n    at new MessageError (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:272:123)\n    at Function. (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:52213:13)\n    at Generator.next ()\n    at step (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:98:30)\n    at /Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:109:13\n    at \n    at process._tickCallback (internal/process/next_tick.js:188:7)\nError: Couldn't find any versions for \"@lerna/version\" that matches \"^3.1.3\"\n    at MessageError.ExtendableBuiltin (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:243:66)\n    at new MessageError (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:272:123)\n    at Function. (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:52213:13)\n    at Generator.next ()\n    at step (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:98:30)\n    at /Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:109:13\n    at \n    at process._tickCallback (internal/process/next_tick.js:188:7)\nError: Couldn't find any versions for \"@lerna/command\" that matches \"^3.1.3\"\n    at MessageError.ExtendableBuiltin (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:243:66)\n    at new MessageError (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:272:123)\n    at Function. (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:52213:13)\n    at Generator.next ()\n    at step (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:98:30)\n    at /Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:109:13\n    at \n    at process._tickCallback (internal/process/next_tick.js:188:7)\nError: Couldn't find any versions for \"@lerna/command\" that matches \"^3.1.3\"\n    at MessageError.ExtendableBuiltin (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:243:66)\n    at new MessageError (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:272:123)\n    at Function. (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:52213:13)\n    at Generator.next ()\n    at step (/Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:98:30)\n    at /Users/z002nw7/.nvm/versions/node/v8.11.1/lib/node_modules/yarn/lib/cli.js:109:13\n    at \n    at process._tickCallback (internal/process/next_tick.js:188:7)\n\nFrom what I expected newly deployed versions shouldn't have negative effects on existing setups. I realize this is only loosely related to lerna, sorry if it's noise in the thread.. ",
    "craigbeck": "hmm, it used to work. ",
    "QingLeiLi": "Thanks for reply.\nI read the source code of lerna @ 3 roughly. It should meet my needs. I will try it.\nIs there a approximate  date for the release of lerna @ 3?. OK! \nThanks for the great work.. ",
    "tyv": "After hours of debugging and trying approaches, we got the reason. \nReason is 0 Bytes file that has some non-readable UTF character in it's name and commit that moves this file to another folder. \nUsing this tool to clean all branches helped: https://github.com/rtyley/bfg-repo-cleaner. ",
    "phun-ky": ":man_facepalming: :duck: yeah.. nothing to see here, don't mind me. The issue was with the credentials on the private npm registry and how the .npmrc really should be configed.. :1st_place_medal: . @guybensh your .npmrc-config file should look somehting like this:\n@scope1:registry=https://project.myget.org/F/feedname/npm/\n@scope2:registry=https://project.myget.org/F/feedname/npm/\n//project.myget.org/F/feedname/npm/:_authToken=${FEED_NPM_TOKEN}\n\nAnd you'll have to log in:\nnpm adduser --registry=https://project.myget.org/F/feedname/npm/ --scope=@scope1\nnpm adduser --registry=https://project.myget.org/F/feedname/npm/ --scope=@scope2. @guybensh your `.npmrc`-config file should look somehting like this:\n\n@scope1:registry=https://project.myget.org/F/feedname/npm/\n@scope2:registry=https://project.myget.org/F/feedname/npm/\n//project.myget.org/F/feedname/npm/:_authToken=${FEED_NPM_TOKEN}\n\nAnd you'll have to log in:\nnpm adduser --registry=https://project.myget.org/F/feedname/npm/ --scope=@scope1\nnpm adduser --registry=https://project.myget.org/F/feedname/npm/ --scope=@scope2. Would also love to combine this with lerna-changelog and/or github-release-notes. @daniellugn . This works on MY machine if I do, but on my colleague's mac, he receives an npm auth error after all the packages have been packed:\n\nbash\n$ lerna publish --no-verify-access\nlerna ERR! npm publish --ignore-scripts <project>-breakpoint-1.10.33.tgz exited 1 in '@<project>/breakpoint'\nlerna ERR! npm publish --ignore-scripts <project>-breakpoint-1.10.33.tgz stderr:\nnpm ERR! code ENEEDAUTH\nnpm ERR! need auth auth required for publishing\nnpm ERR! need auth You need to authorize this machine using `npm adduser`\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /Users/<user>/.npm/_logs/2018-08-17T11_33_09_905Z-debug.log\nlerna ERR! npm publish --ignore-scripts <project>-breakpoint-1.10.33.tgz exited 1 in '@<project>/breakpoint'\nlerna WARN complete Waiting for 3 child processes to exit. CTRL-C to exit immediately.\nBut I found no documentation of this. \nbtw, is it possible to include this option in lerna.json? I tried to put it there, but with no luck:\n\"command\": {\n  \"init\": {\n    \"exact\": true\n  },\n  \"publish\": {\n    \"message\": \"chore(release): :bookmark: publish %s\",\n    \"conventionalCommits\": true,\n    \"npmClient\": \"npm\",\n    \"noVerifyAccess\": true\n  }\n}. > ... --no-* prefixes are Boolean negations, so \"verifyAccess\": false is what you're looking for.\n\n@evocateur thanks!\n\nAfter your coworker successfully runs npm login, does the error persist?\n\n@evocateur yes, it did. We removed all traces of npm and node before we started and reinstalled node@>= 8 and npm@>=6. I'm getting the same, see attached screenshot. It should not be hard to reproduce. I am trying to force version packages to test CI without polluting git history.\n\nEDIT: This might solve stuff for my part:\n lerna version --force-publish --yes --conventional-commits --no-git-tag-version --no-push. I had to use an extra step to add git credentials. The fetch sources phase in VSTS will not allow git commands:\n\nbash\ngit remote rm origin\ngit remote add origin https://randomusername:${SYSTEM_ACCESSTOKEN}@foo.visualstudio.com/bar/_git/baz\ngit remote -v\ngit fetch. You've to follow this syntax, which sadly is poorly documented:\nlerna --scope @yourprojectname/common exec  -- npm run build\n\nHaven't tried this one, for your specific need:\nlerna --scope @yourprojectname/common run -- build. Not using yarn at all. Tested with 3.4.0, it worked, switched source origin from VSTS to github (same build pipeline, same code). It failed, same error. \ud83d\ude21 Testing now with `publishConfig` per package, but I am using a pre-authenticated URL with a token in the URI, can I use a env var for this, like in the `.npmrc`-file?. \ud83e\udd26\u200d\u2642\ufe0f  Yeah, the sources did differ.. The solution using a `.npmrc`-file per package worked, no need to use `publishConfig`. Closing issue. @MiracleBlue we use a `master`-only approach, so on every PR merged, we do a new publish (bump build and push): https://gist.github.com/phun-ky/600db3677421d19589e43b9b56048c24\n\n. ",
    "guybensh": "Hi @phun-ky !\nCan you please elaborate on how the .npmrc should be config?\nI'm experiencing the same problem.\nThanks. Hi @phun-ky !\nCan you please elaborate on how the .npmrc should be config?\nI'm experiencing the same problem.\nThanks. ",
    "jharris4": "I have my .npmrc setup like the above, but started getting this issue after upgrading from lerna 2.11.0 to 3.0.3\n``\nlerna info git Pushing tags...\nlerna success version finished\nnpm ERR! This request requires auth credentials. Runnpm login` and repeat the request.\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /Users/me/.npm/_logs/2018-08-13T14_37_14_397Z-debug.log\nlerna ERR! EREGISTRY Connection to npm registry failed\n```\nDoing the following DOES successfully publish the package though:\ncd packages/the-package\nnpm publish\nI've created a separate issue since this one is closed: #1560 . I have my .npmrc setup like the above, but started getting this issue after upgrading from lerna 2.11.0 to 3.0.3\n``\nlerna info git Pushing tags...\nlerna success version finished\nnpm ERR! This request requires auth credentials. Runnpm login` and repeat the request.\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /Users/me/.npm/_logs/2018-08-13T14_37_14_397Z-debug.log\nlerna ERR! EREGISTRY Connection to npm registry failed\n```\nDoing the following DOES successfully publish the package though:\ncd packages/the-package\nnpm publish\nI've created a separate issue since this one is closed: #1560 . @evocateur oops, I pasted the root package.json by accident, here's my lerna.json\n{\n  \"lerna\": \"2.9.0\",\n  \"packages\": [\n    \"packages/*\"\n  ],\n  \"version\": \"1.0.19\",\n  \"npmClient\": \"yarn\",\n  \"useWorkspaces\": true\n}. @evocateur oops, I pasted the root package.json by accident, here's my lerna.json\n{\n  \"lerna\": \"2.9.0\",\n  \"packages\": [\n    \"packages/*\"\n  ],\n  \"version\": \"1.0.19\",\n  \"npmClient\": \"yarn\",\n  \"useWorkspaces\": true\n}. Also, I'm using a private npm repository, so the .npmrc in the root of the monorepo looks like this:\nalways-auth=true\nregistry=https://verdaccio.mydomain.com/. Also, I'm using a private npm repository, so the .npmrc in the root of the monorepo looks like this:\nalways-auth=true\nregistry=https://verdaccio.mydomain.com/. @evocateur just to reiterate, this all used to work fine with lerna 2.x, and publishing to the private repository also works fine with the yarn publish command.. ",
    "mcous": "@evocateur I noticed some activity on master over the last few days, so I wanted to ping you to see if a) you had any interest in merging this PR and b) if there's anything I can do in terms of fixing, rebasing, squashing, etc. to get this PR mergable for you.\nFrom lurking in the issues you seem pretty busy, so no rush! I'm a fan (and user) of the project and was just hoping to help out \ud83d\ude04 . ",
    "kaore": "Hi,\nOur project has several dozens of loosely coupled packages. It would be a pity to have to update the version of each and every package of the repo everytime one of them changes slightly - this tends to happen several times everyday. On 2.x.x, we just specify a scope and this fits our need well, but I understand that if we update this would no longer be possible.\nWhat would the right approach be in our case?. ",
    "HsuTing": "@evocateur OK! Thank you \ud83d\ude01. Yes, you are right, but testing is not needed to everyone in the team. If we can avoid the testing packages, this can be more suitable for everyone.. Oh, I know what you said. This is ok not to fix this issue. I just think if bootstrap can be filtered, we can use lerna more flexible. This is not needed to be fixed.\nI did not use lerna@next. I use lerna@2.11.0.\n. I had the same bug, and I think the problem is here.\nnpm-registry-fetch need the token in the opts, but the opts in the function get-npm-username did not have any token. I had print the opts before fetching, and this opts is just the @lerna/npm-conf data.\nTo test, I overwrote the code like:\njs\nfetch.json(\"-/whoami\", {\n  ...opts,\n  token: '<token>',\n}).then(success, failure)\nand this worked to find the user.\nSo, maybe this problem is caused by @lerna/npm-conf?\nI think #1697 is the same problem, too.\n. ",
    "wzalazar": "ok, thanks @evocateur . ",
    "jirutka": "lerna 3.0.0-beta.21 -- lerna run lint --stream, even with --loglevel silent, produces annoyingly duplicated output when some script fail.. > Linting should be run from the root.\nWhat do you mean? That lint script should be in the root package.json and run for all packages at once?. Okay, thanks for the advice. However, it doesn't change anything about the issue that lerna unnecessarily duplicates the output.. ",
    "silkentrance": "@evocateur I tried to not introduce that pattern, but if that is the only way to adopt lerna...\nI guess that I will also have to move all dev dependencies to the root package as I do not want them to be in the published package.. Failing tests are unrelated.. ",
    "techhysahil": "Issue was with version that i had installed with brew. I installed it globally and now i got it. How this silly mistake cost me about 4 hrs.. ",
    "oMaten": "It's my misunderstanding about hint Error: Command failed: npm install --global-style , the problem has been solved, Thanks.. ",
    "amok": "I use lerna exec yarn outdated or just yarn outdated.\nalso there are some aspects with using yarn workspaces - https://github.com/yarnpkg/yarn/issues/3859#issuecomment-441000287. ",
    "negezor": "You can locally use the packages. It is not necessary to lay out in the NPM code that is not aimed at other developers, since it clutters NPM.. You can locally use the packages. It is not necessary to lay out in the NPM code that is not aimed at other developers, since it clutters NPM.. ",
    "junyper": "Thanks @hbetts. \nThinking through that scenario, could the package A version in package B then be ^5.21? \nI understand that this is really complicated and maybe (likely) not worth doing, but I've been asked by consumers to relax the versioning between the packages so that they can avoid duplication of the shared dependencies when they bring in patches.. Thanks @hbetts. \nThinking through that scenario, could the package A version in package B then be ^5.21? \nI understand that this is really complicated and maybe (likely) not worth doing, but I've been asked by consumers to relax the versioning between the packages so that they can avoid duplication of the shared dependencies when they bring in patches.. I think what I\u2019m asking for is: if I manually set a version to ^5 or ^5.21 lerna would leave it alone unless it\u2019s a major version, and then it would update everything to ^6.. Thanks @ryankshaw. @evocateur does that explanation help?. @evocateur we create tags for releases, but we are using fixed versioning. We use the --npm-tag option to publish with either latest or rc.\nhttps://github.com/instructure/instructure-ui/releases\n. ",
    "ryankshaw": "here is the exact scenerio we are running into:\nwe have a monorepo (https://github.com/instructure/instructure-ui) that has a bunch of different packages for making ui components that is set up as a lerna repo. In that repo there is a package for:\n buttons\n dialogs\n pagination\n etc.\nnow lets say I fix something in the \"pagination\" package and I want to use that in a consuming app. so I bump consumingApp's package.json to say \"@instructure/ui-pagination\": \"5.21.0\" but I leave everything else at 5.20.x. \nui-pagination depends on buttons and so what will happen is that yarn will not just upgrade ui-pagination but also either:\n add a new entry for ui-buttons, so that the pagination package gets its own copy of ui-buttons in its own node_modules and creating unnesicary bloat of js sent to the browser\n change the existing \"ui-buttons\" entry in yarn.lock to 5.21.0 from 5.20.0, which will mean ui-buttons and everything in consumingApp will start using the new buttons, along with whatever other changes have happened there), even though we have not QAed that and what we wanted in this change  was just to pull in the one fix for the pagination component.\nIdeally, we'd be able to pull in the new ui-pagination package with the bug fix we needed and not have to pull in a bunch of other new versions of other packages too. (in our case, it is not just ui-buttons that would have this happen, there are a handful of others too)\nso we are asking for this so we can upgrade one package (\"ui-pagination\") and get that merged into consuming apps in small changes. ",
    "fkleuver": "\nand use relative file specifiers.\n\n@evocateur Does this advice also apply when using lerna bootstrap --ci (not --hoist) in v3?. update: The reported error was a problem between chair and keyboard. In refactoring our nightly publish script I neglected the fact that importing scripts/bump-version.ts had the side-effect of calling the update-versions script.\nAs @bbosman from our team pointed out to me, this promise is not awaited, causing the script to write to the package.jsons while lerna is trying to read from them, resulting in the empty file content issue.\nI separated things out and it all seems to work again. However I'd like to keep this issue open if you're okay with that @evocateur to address the following concerns:\n- The breaking change of the working directory having to be clean before publishing. While it does not affect us anymore, I still think there should be the option to ignore this. I can't find an explicit option for this, so it used to be possible and now it's not anymore. Or am I missing something?\n- It could be a point of improvement to verify whether files can actually be read / are in use, and throw a more meaningful error if that is not the case. Don't know if it's possible or not. This particular scenario might be too rare/convoluted for that be worth the trouble though.\n- The passed-in version is not respected. Is there a way to tell lerna not to add the caret, or even better, tell lerna to just use the existing version as-is? \nI realize in bypassing the various checks and automatic versioning stuff I may be placing us outside of the \"supported scenarios\".\nHowever, having a nightly publish with a custom date tag seems like a legitimate use case even in the context of semantic versioning. Is this something you want to consider supporting with lerna? I wouldn't mind helping a hand with the implementation if you can point me to the right places in the code to be doing this.. ",
    "kamsar": "I ran into this issue also on Node 10.5 and Lerna 2.11.0 (Windows 10 1709). The updated versions are detected and listed, and then nothing happens - no CPU use, just a hung process. The hang is prior to the Are you sure you want to publish the above changes? message.\nWith Node 8.11, it works fine.\n. ",
    "philippfromme": "Same here, using Node.js v10.7.0.. ",
    "Janpot": "+1\nI would like to be able to dynamically generate an array of rollup configurations based on the packages in my repo. Preferably through a javascript API. But since that seems to be off the table in the short term, executing lerna in a childprocess would work just as well for me. But for that I'd need the package locations as well.\njs\nexport JSON.parse(execa.sync('lerna' [ 'ls', '--json', '--loglevel=silent' ]))\n  .map(createConfig)\nLooks like it's supposed to be there though: https://github.com/lerna/lerna/blob/6ecdd83d14f3b9d0cac62cc68b4066ec554e79ce/utils/listable/lib/listable-format.js#L48\nIs it unreleased?\nEdit:\nnevermind, got it https://github.com/lerna/lerna/commit/2e204af3f10d30f0fca37891aed721ddf15cf667 . +1\nI would like to be able to dynamically generate an array of rollup configurations based on the packages in my repo. Preferably through a javascript API. But since that seems to be off the table in the short term, executing lerna in a childprocess would work just as well for me. But for that I'd need the package locations as well.\njs\nexport JSON.parse(execa.sync('lerna' [ 'ls', '--json', '--loglevel=silent' ]))\n  .map(createConfig)\nLooks like it's supposed to be there though: https://github.com/lerna/lerna/blob/6ecdd83d14f3b9d0cac62cc68b4066ec554e79ce/utils/listable/lib/listable-format.js#L48\nIs it unreleased?\nEdit:\nnevermind, got it https://github.com/lerna/lerna/commit/2e204af3f10d30f0fca37891aed721ddf15cf667 . The help is relatively clear. It's just that this command:\nlerna add --scope=package3 package1 package2\nreturns\ninfo cli using local version of lerna\nlerna notice cli v3.1.4\nlerna info filter [ 'package3' ]\nlerna WARN No packages found where package1 can be added.\nFalsely assuming that add would add packages to the packages that are in --scope it seems to say \"can't find package3\" but actually it is saying \"can't find package2\". This completely threw me off and I went on trying to find issues in my project setup.\nThen at some point I think I saw the help for add and tried\nlerna add package1 package3\nBut it still returned the same error and that kind of confirmed my false assumption. In the end, just adding the packages one by one worked. After reading your comment I finally realise my stupidity:\nlerna add package1 packages/package3\nWhich makes sense, but is a bit counterintuitive. as in \"I want to add package1 to package3, but for the first I specify it by name, the second by folder\".\nThe way to improve help would probably be by adding some examples of calling this command so it's clear the packages folder needs to be included. Maybe renaming glob to something like target would have helped as well.. Seems like it, yes.. ",
    "IAmTheVex": "Well i had --skip-git on... why should it care?. Amazing! Thanks :) I just hard reseted my repo just before i tried lerna publish \ud83d\udc4d That makes a lot of sense now!. ",
    "NE-SmallTown": "Seems like my lerna version is 2.x, uninstall globally and reinstall the 3.x will solve this problem.. Sorry for the wrong description, I update the issue, could you look through again? Is this intended?. And other question, why the package.json can't work? E.g. If project/package.json has a lint script field, it will say No packages found with the lifecycle script 'lint' if I run the lerna run lint command in the project/ or project/pakacges/packageA. Thanks, I will maybe, but these days are too busy, can't promise a determinate time.. I tried set it in 'postpublish'(e.x \"pospublish\": \"node ./foo.js\")\uff0c but seems that when execute foo.js, the publish process haven't been done, so if I do some remove operations in foo.js, the final files which be published to npm is incomplete because we do publishing while removing. Yea, I add it in root '/package.json' but can't work like I described above. ",
    "gt3": "Sorry guys this works - \"{typescript,@scope/foo}\" as expected.. ",
    "lnmunhoz": "The problem was my ssh key for CircleCI. Case closed!. ",
    "simonxl": "Oh I see. thanks for answering this!. ",
    "rashidul0405": "sorry it's working, it just can't override.. ",
    "rumtraubenuss": "I did some further investigation. Turns out that it is a \"local\" issue. Setting up the project on a coworkers machine the issue does not occur. Git, node, yarn versions are the same. I thought for a moment it could be related to the shell since I am using zsh, iterm and tmux. But when I switched my default shell to bash without tmux in macOS Terminal.app I got the same faulty behaviour.\nHere are some more system informations:\ngit git version 2.15.2 (Apple Git-101.1)\nyarn 1.9.2\nnode 8.11.3 with nodenv as a node manager. But it is the same without nodenv and a default node version of 10.8.0.\nI am running out of ideas where this could be related. Could somebody else try to reproduce the issue?. The issue is triggered by a format setting in my global git config ~/.gitconfig:\n[format]\n    pretty = %Cblue%h%Creset %Cgreen[%cr]%Creset (%an) %s\nRemoving this and everything works as expected.\n@evocateur Do you think that this is still related to lerna itself or rather to a dependency package like conventional-changelog-core?. The whole repository was published before. Then I just made a change in a single package (the demo repository only has a single package). So there is no local dependency to another package.. ",
    "GMartigny": "If it's the root cause of the problem, I can live with that. What I find strange is that bootstrap without hoisting don't trigger the error. \nIn my case, I have a library with sub-modules. The root leaf just import all sub-module to pack them into one file (for CDN).\nAfter all, I just wanted to save a few seconds on my build, not a very big deal.. ",
    "tim-evans": "Yep! Less concerned about ^C, but I did spam it last time \ud83d\ude05 and it continued trying to publish. Okieee! Thanks for the heads up! :). Okieee! Thanks for the heads up! :). I'm still encountering this; it looks like something related to TravisCI; thanks for the help! \u2764\ufe0f . It\u2019s an invalid npm token. I resolved this through the lovely npm folks. ",
    "XanderLuciano": "isn't it --scope=MyScope?. @tivac That... is infinitely easier. I wasn't even aware of npx.  I'll have to update this later.. NPM is default client as per stated here: https://github.com/lerna/lerna/tree/master/commands/bootstrap#options\n\nThe default --npm-client is npm.. That's sufficient, just seems like the documentation is extremely spread out and it's really hard to just find all the information.\n\nThat said, I don't use lerna normally, I'm just trying to learn how to use lerna so I can submit a PR to a project that uses lerna and it took me a long time to figure out everything. Seems like commands are in the documentation that don't exist in the CLI (like lerna version) so my intentions were to just make the information a little more consolidated. \nIMO it doesn't make sense to document properties of the JSON file in a documentation page about the CLI.. No problem! That makes sense and I trust you understand the project better than I.\nI think it makes sense to keep these separated since some are universal and some are not. It's likely the documentation structure makes more sense when you are starting fresh. It's just difficult to pickup and understand an existing project configured with lerna.\nThanks for the clarification!. ",
    "pablomolnar": "@XanderLuciano --scope=MyScope is the same as --scope MyScope . ",
    "zentoaku": "@evocateur yes it would. If you could pass a separate \"packages\" list for each command you could choose to use parent folder or mentioned dist. The only requirement is that dist would have to have package.json inside.\nExample for bootstrap:\n{\n  \"lerna\": \"2.11.0\",\n  \"packages\": [\n    \"packages/*\"\n  ],\n  \"version\": \"independent\"\n}\nfor publish:\n{\n  \"lerna\": \"2.11.0\",\n  \"packages\": [\n    \"packages/*/dist\"\n  ],\n  \"version\": \"independent\"\n}\nwhy wouldn't you add such feature? Shouldn't be much of a problem.. @evocateur and? This doesn't answer anything. The option I've mentioned doesn't break anything, doesn't make it harder to use or understand the lib so the document you've posted doesn't apply, at least from my perspective. You're already loading this file, just loading it from different location doesn't add much cost. Please consider stating your ground and explaining instead of just shutting the discussion down.\nI don't want to offend you, I just like to understand reasons and not to take everything on trust.. @evocateur thank you for that. That's exactly the answer I was looking for. I'm not maintaining this one so I don't see all \"pain points\". Your answer I solid and you should have had start with that :). Ok, thanks. . Ok, thanks. . ",
    "jd-carroll": "Another note: I believe the checks failed for the same reason I am having difficulty.  Happy to tweak as necessary.. @evocateur Thanks for pointing that out, def a mistake and will get that fixed tonight!. @evocateur I've updated package-metadata, could you take a look?  I'm open to other thoughts on node module, most interested in getting the functionality in. ",
    "jdxcode": "echo 'export PATH=\"./node_modules/.bin:$PATH\"' >> ~/.bashrc. it puts the node module of your current directory in your PATH. ",
    "jbailey4": "Just saw this in the new changed command docs.\nAny reason though these commands (changed/updated) do not support the --since flag? Instead of checking since last \"publish\", how can you now check since last checkout?. @StarpTech Issue #1544 might be of some help, good discussion over there on the --since flag.\ntl;dr lerna ls still accepts the --since flag to print out packages changed since a given revision.. ",
    "jlegrone": "@evocateur --since was useful for setups where publish is not run on every change to the target branch of a pull request.  This is somewhat common for teams that follow a \"git-flow\" model where pull requests are opened against develop and changes are only published to npm for merges to master.\nIn this scenario, the since flag provides a nice way to determine whether a package or any of its dependencies which are managed by lerna have been updated in any given PR (which requires more awareness of npm and lerna than a simple git solution).  This is great for teams that want to only run a minimal subset of their test suites for pull requests.\nWould you consider a ticket/PR to restore this functionality to changed valid?. Aha! Thanks, I didn't notice that was an available flag until trying it from the cli. \ud83d\ude04 . ",
    "iliakan": "Thanks, now I got it.\nLerna is to support a monorepo, but installing into real projects is done a conventional way.. ",
    "artola": "@evocateur Yes, they are annotated as created with Lerna. In any case, I used the following command to \"ensure\" that they are annotated: for tag in $(git tag -l); do git tag -a -f $tag $tag^0 -m $tag; done\nNevertheless, lerna updated still shows all the packages as changed even when there is no commit after the last lerna publish.\n\u00af_(\u30c4)_/\u00af. @evocateur Thanks a lot for your prompt reply.\nFor example: I have a package vscode-snippets-proactive (between others).\nI have removed all the tags for this package and added just the last one:\nsh\ngit tag -a vscode-snippets-proactive@1.0.0-beta.6 -m \"vscode-snippets-proactive@1.0.0-beta.6\"\nI can see:\nHEAD -> master, tag: vscode-snippets-proactive@1.0.0-beta.6\ndiff\ndiff --git a/proactive/vscode-snippets/package.json b/proactive/vscode-snippets/package.json\nindex 5d1c477..c833789 100644\n--- a/proactive/vscode-snippets/package.json\n+++ b/proactive/vscode-snippets/package.json\n@@ -1,6 +1,6 @@\n {\n   \"name\": \"vscode-snippets-proactive\",\n-  \"version\": \"1.0.0-beta.5\",\n+  \"version\": \"1.0.0-beta.6\",\n   \"description\": \"VS Code Shareable Snippets\",\nStill if I run lerna updated this package is shown again.\n. @evocateur Thanks a lot for your prompt reply.\nFor example: I have a package vscode-snippets-proactive (between others).\nI have removed all the tags for this package and added just the last one:\nsh\ngit tag -a vscode-snippets-proactive@1.0.0-beta.6 -m \"vscode-snippets-proactive@1.0.0-beta.6\"\nI can see:\nHEAD -> master, tag: vscode-snippets-proactive@1.0.0-beta.6\ndiff\ndiff --git a/proactive/vscode-snippets/package.json b/proactive/vscode-snippets/package.json\nindex 5d1c477..c833789 100644\n--- a/proactive/vscode-snippets/package.json\n+++ b/proactive/vscode-snippets/package.json\n@@ -1,6 +1,6 @@\n {\n   \"name\": \"vscode-snippets-proactive\",\n-  \"version\": \"1.0.0-beta.5\",\n+  \"version\": \"1.0.0-beta.6\",\n   \"description\": \"VS Code Shareable Snippets\",\nStill if I run lerna updated this package is shown again.\n. ",
    "jzempel": "This is a breaking change for us as --since is no longer reliable for identifying updates. Error here: https://travis-ci.org/zendeskgarden/react-components/builds/419480389#L2470. Here's the lerna command CI was attempting to execute: https://github.com/zendeskgarden/react-components/blob/master/utils/travis/publish-packages.js#L22\nIn 3.1.x is there a recommended approach for tagging locally and allowing CI to handle publish to npm?. ",
    "vysinsky": "Awesome. Thanks a lot! I know it is pita to fix others bugs.... Awesome. Thanks a lot! I know it is pita to fix others bugs.... ",
    "panjiesw": "So which one is it? Is lerna only support latest NPM?. So which one is it? Is lerna only support latest NPM?. thanks @evocateur! Didn't mean to rush, I just missed the bug tag intention.\nAlso if you don't mind, I encountered some more bugs in v3 still regarding publish but with yarn, so I'll submit some more issues after creating the repro.. thanks @evocateur! Didn't mean to rush, I just missed the bug tag intention.\nAlso if you don't mind, I encountered some more bugs in v3 still regarding publish but with yarn, so I'll submit some more issues after creating the repro.. Ah this is actually the issue I want to submit.\nI also use scoped package and publish to custom registry, I ran with lerna publish --registry <registry-url> command, but even then the publish still failed, yarn complained about the package is marked as private.\nSo the problem is because Yarn can't run yarn publish command inside private package (in this case a root package of monorepo). Related issue: yarnpkg/yarn#5334\nAlso yarn has bug that can't override scoped npm registry if it's in an .npmrc. Related: yarnpkg/yarn#4732\nLastly, before @evocateur tried to set npm_config_registry to fix this for yarn, there is this issue yarnpkg/yarn#2091. Yarn doesn't read from npm_config_registry :disappointed: . Ah this is actually the issue I want to submit.\nI also use scoped package and publish to custom registry, I ran with lerna publish --registry <registry-url> command, but even then the publish still failed, yarn complained about the package is marked as private.\nSo the problem is because Yarn can't run yarn publish command inside private package (in this case a root package of monorepo). Related issue: yarnpkg/yarn#5334\nAlso yarn has bug that can't override scoped npm registry if it's in an .npmrc. Related: yarnpkg/yarn#4732\nLastly, before @evocateur tried to set npm_config_registry to fix this for yarn, there is this issue yarnpkg/yarn#2091. Yarn doesn't read from npm_config_registry :disappointed: . Fyi, my private registry is nexus oss 3, it doesn't support npm ping and npm access so I also run the publish command with --no-verify-registry and --no-verify-access. \nTo skip the validation if the registry doesn't match \"https://registry.npmjs.org/\" is indeed a good idea.. Fyi, my private registry is nexus oss 3, it doesn't support npm ping and npm access so I also run the publish command with --no-verify-registry and --no-verify-access. \nTo skip the validation if the registry doesn't match \"https://registry.npmjs.org/\" is indeed a good idea.. @jharris4 That's because lerna 2.x used to publish from inside sub-package directly as mentioned by @evocateur. \nCurrently lerna use npm pack to pack all non-private sub-package into the root of monorepo, then run npm publish or yarn publish depending on npmClient lerna config, in the root of monorepo. This is what fails yarn.\nYou can try running npm pack of one of your sub-package from monorepo root, then run yarn publish the resulting tarball.. @evocateur this workaround you mentioned,\n\nAnyway, the workaround for now is to set a scoped npmClient for the publish command in lerna.json\n\nI tried it and while the publish is success (the packages are in the private registry), it produces wrong behavior: all related manifest (lerna.json, and packages package.json) doesn't get updated to the new version. @jbockle you also need to downgrade @lerna/publish package. If you're using Yarn, set \"resolutions\" mentioned above. If you're using NPM, just add \"@lerna/publish\": \"3.3.2\" in the root monorepo.. ",
    "schmkr": "\nFyi, my private registry is nexus oss 3, it doesn't support npm ping and npm access so I also run the publish command with --no-verify-registry and --no-verify-access.\n\n~~I also ran into this today. Is it possible to set those flex in lerna.json?~~\nJust found out\n{\n    \"commands\": {\n        \"publish\": {\n            \"verifyAccess\": false\n        }\n    }\n}. ",
    "teddybradford": "@evocateur It's working for me now. Thank you! \ud83d\ude42. ",
    "visormatt": "Working for me as well \ud83d\udcaf also digging the additional logging \ud83d\udc4d . ",
    "moe971": "Thanks for the review, I add the test as you asked me.\nI ran npm test -- -u to update snapshots, everything is ok on my side but fail on CI... As you said after revert everything is green on CI, thanks for your help.. I sync my repo, \nMy current commit match with 3.0.6 tag, I run npm i && npm run ci I've got 526 lint error for import/unresolved, did I miss something ?. I'm on an english localization of git, just my OSX is in French. I revert my package-lock, ran npm ci the only diff is the new test. I have the same problems with snapshots on my computer, but it pass on CI \ud83d\udc4d  . ",
    "liliom55": "You're  right. Because after I've updated application from angular5 to 6, this issue appeared. But can I bootstrap the internal packages while ignore \"node_modules\" folder in Lerna? because this approach is going to solve my issue. Right now I'm doing manually . Actually the packages that I'm working on them they are runnable application as well, and I face the issue only when I want to run each packages. I think there is nothing that Lerna can do for me because the concept of Lerna is deferent as my expectoration. Lerna Only creates a shortcut of each internal dependencies. Thanks again for your quick response.. ",
    "liketurbo": "\nYou're right. Because after I've updated application from angular5 to 6, this issue appeared. But can I bootstrap the internal packages while ignore \"node_modules\" folder in Lerna? because this approach is going to solve my issue. Right now I'm doing manually\n\n@liliom55, So how you fixed it? cause I got same error and for now I'm fixing it by removing node_modules manually. ",
    "schabluk": "@evocateur I added more detailed context. I hope that's helpful.. ",
    "kosssi": "We have the same issue on cozy-client repository when Travis publish.\nTravis configuration:\n- npm 5.6.0\n- node v8.11.4\nYou can see Travis logs with v3.1.4 and with this commit the deploy is ok with v2.11.0.. ",
    "deporter": "I'm also having the same issue and had to use lerna v2.11.0 to fix it. \nI'm using npm v5.6.0. Is there any extra information I can give to help narrow down what is causing the issue.\n. It\u2019s no longer an issue for me either with the latest lerna and updated npm. . ",
    "pieh": "Today we updated lerna from 3.0.0-rc.0 to 3.3.0 and are facing similiar problem - we are using yarn and default npm registry (not custom one).\nWe use this cmd:\nshell\nlerna publish --npm-tag=next --bump=prerelease\nlerna.json ( https://github.com/gatsbyjs/gatsby/blob/9ce045aa4f0a96802ccf5fd3a60f25afc574a8dc/lerna.json ):\njson\n{\n  \"command\": {\n    \"create\": {\n      \"license\": \"MIT\"\n    },\n    \"publish\": {\n      \"allowBranch\": \"master\",\n      \"bump\": \"prerelease\",\n      \"conventionalCommits\": true,\n      \"message\": \"chore(release): Publish\",\n      \"preid\": \"rc\",\n      \"ignoreChanges\": [\n        \"CHANGELOG.md\"\n      ]\n    }\n  },\n  \"loglevel\": \"success\",\n  \"packages\": [\n    \"packages/*\"\n  ],\n  \"version\": \"independent\",\n  \"npmClient\": \"yarn\",\n  \"useWorkspaces\": true\n}\nDuring the publish we get:\n```shell\n$ lerna publish --npm-tag=next --bump=prerelease\nlerna notice cli v3.3.0\nChanges:\n - gatsby: 2.0.0-rc.20 => 2.0.0-rc.21\n? Are you sure you want to publish these packages? Yes\nlerna ERR! ENEEDAUTH You must be logged in to publish packages. Use npm login and try again.\nerror Command failed with exit code 1.\ninfo Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.\n\u279c  gatsby git:(master) npm whoami\npieh\n``\nwe are actually logged in and without any additionalnpm logincan actually publish packages manually withyarn publish`.\nBut biggest problem is that publish commit (and tags) get pushed to repository (without actually publishing packages) - https://github.com/gatsbyjs/gatsby/commit/938d168acb72b857410b98a0ec4d2a9b65adbd37 and we have to follow that with manual yarn publish --tag next to actually publish package. Any clues?. > I don't recommend using yarn for publishing. There are far too many edge cases. I'm likely going to switch lerna to libnpmpublish soon.\nI did a little digging and my error seems to come from here - https://github.com/lerna/lerna/blob/5da13190852897ac37349a28a0b24470ec7bd833/commands/publish/lib/verify-npm-package-access.js#L55-L60\nwhich seems to be checking response from npm access ls-packages --fetch-retries=0 --loplevel=http\nwhich works fine when done in terminal/console - so this is confusing why it only happens in lerna \n\nbump is a positional argument, not a flag.\n\nRight, we use bump in cmd too, so even if it's no-op it shouldn't be a problem here? Actual version bumping works as expected (just wanted to include lerna.json to provide as much context as possible)\n\nIf the commits are made successfully, you can run lerna publish from-git to rerun only the publish steps (skipping git commit and tagging).\n\nI'll keep that in mind, but should lerna actually push \"publish\" commit when no package were really published?. Thanks for your time @evocateur responding to my comments. 3rd attempt actually did work without any changes (previous 2 attempts were done on 2 different machines by 2 different people) - so it seems this was unlucky unresponsive (or badly responsing?) npm registry 2 times in a row (even if manual publishing worked in between those 2 tries). I'll use lerna publish from-git instead of manual publishes next time. Will get bigger sample size to see if this problems will happen often and will consider using --no-verify-access which would be shame because we updated lerna largely because of access verification.. ",
    "mpeyper": "Node:  10.12.0\nNPM:   6.4.1\nLerna: 3.4.3\nYarn:  No\nI ran into the \"Cannot read property 'algorithm' of undefined\" error and, like @darkobits, discovered that lerna was trying to use npm: 5.1.0 when publishing.  npm ls npm showed that the older npm version was coming from another dependency (gitbook-cli in this case).\nI ran npm i npm@^6 and tried publishing again and this time it there was no issues.  Hope this helps someone.. This no longer appears to be an issue in lerna version 3.7.1 (I'm not sure which release after 3.4.3 fixed it).. ",
    "bgotink": "I used 0.x versions in my example, but that really doesn't matter in our case: it goes wrong for versions 1.2.0 and 1.0.0 just like it goes wrong for 0.1.2 and 0.1.0.\nOur entire monorepo is not meant to be depended on at once. We allow consumers to cherrypick which packages to use, but we want all of those packages to have the same version.\nOur UI library currently contains over 30 packages, and we expect it to stabilise at around 70 packages. We want to keep the version numbers identical over all these packages to make it very easy for developers/reviewers to spot wrong versions. As such we don't feel --exact --force-publish is overkill.. ",
    "zygeilit": "Thank you very much for your reply.\nVery nice, the npm local paths(\"foo\": \"file:./foo\") solved my problem. But after lerna publish I found an unexpected git commit. Is there any way to replace \"file:../../*\" with the last version automatically ?\nThe lerna command execution order is :\n1. lerna bootstrap\n2. lerna link convert ( all module's version in package.json replaced to \"file:./*\")\n3. lerna bootstrap ( must exec again, otherwise can not found modules )\n4. make some modifications\n5. lerna publish\n6. then found an unexpected git commit on gitlab\nThis is my lerna.json.\n This is my project.\nThank you very much. I am looking forward to your reply.. I used lerna link covert command, all modules linked with file:. Then I  exec npm install in the root porject, but only the root project installed dependencies in node_modules. \nHow exec npm install in every modules which configured in lerna.json automatically ? Now, I need cd every modules and exec npm install \uff1f\nThis is a sub-module's package.json, there have some dependencies need to be installed before debug it. If do not exec npm install, there will be an error when debug.\nThank you very much. I am looking forward to your reply.. I use the yarn client npmClient, useWorkspaces, want to install root and all packages/* dependencies automatically. And use yarn link: too, because if use file: yarn did not link all modules.\nBut there is a performance problem when use yarn's link:.  I gave up this plan.\nNow, I use lerna exec -- npm install before exec npm install in root.\nDo you have a better plan?\nThank you very much. I am looking forward to your reply.. Sorry, only npm install in the root after npm link convert, did not work. See here.\nAfter npm install in the root, the sub-modules's dependencies neither installed independent nor hoisted in the root.. Thank you very much.. Thank you all for your reply.. ",
    "sbaechler": "I just ran into a problem with our private Nexus npm server. The current version does not support npm tags (issue). Therefore it is not possible to reference the latest build using \"latest\".\nIt would really help if there was an alternative canary versioning using build count instead of hash (e.g. using git rev-list HEAD --count). This would make it possible to have an incrementing version without having to create a commit.. @evocateur Sure, but as I understand it, npm tags are currently the only way to get the latest version of a canary build (in another project). The hashes are not sequential so the usual ^ versioning does not work.. Ok, I guess this is the better approach. I was trying to avoid a git push from CI back to the repo because setting this up in Gitlab CI is not that smooth yet. But Gitlab adding version Tags would actually make for a better history.\nIs there a best practice example for a build pipeline with a Lerna project? Otherwise I would create one.. ",
    "pksunkara": "I think a better way of rephrasing the whole issue would be the following:\nbabel/minify used lerna@2 to publish canary on CI (for every commit) until recently. I had made a PR to upgrade lerna to v3 (https://github.com/babel/minify/pull/900 & https://github.com/babel/minify/pull/901). As you can see from the CI log here, it successfully published 0.5.0-alpha.9+7002b8c. Looks good.\nBut now, they added more commits to the master branch and the CI ran again here. As you can see, lerna canary publish decided that the tag would be 0.5.0-alpha.9+f00c588. Only the SHA changed, not the alpha.9 part.\nThis is because of CI doing a shallow clone of the repo. The only way to fix this would be running git fetch --unshallow before the lerna publish step. @evocateur You should probably document this fix somewhere. (In case of travis-ci, you can specify git.depth in config file). We are encountering this in https://github.com/storybooks/storybook too.. It's yarn that's probably complaining. You didn't paste your lerna ERR properly. If it's the following:\nlerna ERR! yarn publish --ignore-scripts --tag canary --new-version ....\nThen, this is a duplicate of https://github.com/yarnpkg/yarn/issues/6313. ",
    "TomLingham": "Is there any intention to support lerna version --canary?\nFor our use case, we want to be able to canary version and pack all our packages into tars so that we can publish them at a later time. Especially useful for local verification where the actual publish step resides only in CI.. ",
    "NemoOudeis": "@evocateur thanks for clarifying that behavior. \nI have a followup question, with the following (very similar) background. Say i have 2 packages like this:\npackages\n\u251c\u2500\u2500 apple\n\u2514\u2500\u2500 banana\nI made code changes in apple and I removed a dependency from banana's package.json (because it was in there by accident).\nNow I want to release only apple, because banana didn't really change. I do\nlerna version --ignore-changes 'packages/banana/**' \nSo my intuition would be that this will bump only apple's version and banana would be ignored.\nYour statement \n\nNote that lerna will always bump dependents who have dependencies that have changed\n\nsounds to me like lerna will force a version bump in banana regardless though, even if explicitly ignored.\nIs my understanding correct? Is that intended behavior?. ",
    "BTOdell": "I was using Git version 2.17.0 for this, but after updating to Git version 2.18.0 it started giving different errors related to the git submodule command. Then I tried Git version 2.14.3 and it started producing the same error that 2.17.0 was.\nI tried using the --concurrency 1 and --no-progress options and that reduced the clutter but didn't solve the issue.. ",
    "vegawong": "https://github.com/verdaccio/verdaccio/issues/937 \nIs this issue cause that?. ",
    "LeZuse": "@evocateur Thanks for the quick fix!. ",
    "sginn": "the cascading dependencies are wreaking havoc.  I tried to force an earlier install of @lerna/cli, but then I get the same issue with @lerna/add\nFurther, trying to install an older lerna master also is broken:\n```\n$ npm i lerna@3.0\nnpm ERR! code ETARGET\nnpm ERR! notarget No matching version found for @lerna/diff@^3.1.3\nnpm ERR! notarget In most cases you or one of your dependencies are requesting\nnpm ERR! notarget a package version that doesn't exist.\nnpm ERR! notarget \nnpm ERR! notarget It was specified as a dependency of '@lerna/cli'\nnpm ERR! notarget \n```\n. most likely there is problems with npm propagating the recent releases.  \nI managed to get a 3.1.2 install with the following:\nnpm i @lerna/cli@3.1.2 @lerna/add@3.1.2 @lerna/bootstrap@3.1.2 @lerna/link@3.1.2 lerna@3.1.2\n. ",
    "usergenic": "hmm. maybe there's some kind of issue in the npm fabric.  but I just ran those same commands and still fail-town.. FWIW, re https://status.npmjs.org/ ...\n\n```\n$ npm install @lerna/changed@3.1.3 -D --prefer-online --cache=.local-cache\nnpm ERR! code ETARGET\nnpm ERR! notarget No matching version found for @lerna/changed@3.1.3\nnpm ERR! notarget In most cases you or one of your dependencies are requesting\nnpm ERR! notarget a package version that doesn't exist.\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /Users/brendanb/src/scratch/test-lerna-again/.local-cache/_logs/2018-08-21T18_47_59_193Z-debug.log\n$ cat /Users/brendanb/src/scratch/test-lerna-again/.local-cache/_logs/2018-08-21T18_47_59_193Z-debug.log\n0 info it worked if it ends with ok\n1 verbose cli [ '/Users/brendanb/.nvm/versions/node/v10.5.0/bin/node',\n1 verbose cli   '/Users/brendanb/.nvm/versions/node/v10.5.0/bin/npm',\n1 verbose cli   'install',\n1 verbose cli   '@lerna/changed@3.1.3',\n1 verbose cli   '-D',\n1 verbose cli   '--prefer-online',\n1 verbose cli   '--cache=.local-cache' ]\n2 info using npm@6.4.0\n3 info using node@v10.5.0\n4 verbose npm-session 2f92eaedd1267156\n5 silly install loadCurrentTree\n6 silly install readLocalPackageData\n7 http fetch GET 200 https://registry.npmjs.org/@lerna%2fchanged 194ms\n8 silly registry:manifest no matching version for @lerna/changed@3.1.3 in the cache. Forcing revalidation\n9 http fetch GET 304 https://registry.npmjs.org/@lerna%2fchanged 58ms (from cache)\n10 silly fetchPackageMetaData error for @lerna/changed@3.1.3 No matching version found for @lerna/changed@3.1.3\n11 timing stage:rollbackFailedOptional Completed in 1ms\n12 timing stage:runTopLevelLifecycles Completed in 473ms\n13 verbose type version\n14 verbose stack @lerna/changed: No matching version found for @lerna/changed@3.1.3\n14 verbose stack     at pickManifest (/Users/brendanb/.nvm/versions/node/v10.5.0/lib/node_modules/npm/node_modules/npm-pick-manifest/index.js:65:11)\n14 verbose stack     at fetchPackument.then.packument (/Users/brendanb/.nvm/versions/node/v10.5.0/lib/node_modules/npm/node_modules/pacote/lib/fetchers/registry/manifest.js:52:18)\n14 verbose stack     at tryCatcher (/Users/brendanb/.nvm/versions/node/v10.5.0/lib/node_modules/npm/node_modules/bluebird/js/release/util.js:16:23)\n14 verbose stack     at Promise._settlePromiseFromHandler (/Users/brendanb/.nvm/versions/node/v10.5.0/lib/node_modules/npm/node_modules/bluebird/js/release/promise.js:512:31)\n14 verbose stack     at Promise._settlePromise (/Users/brendanb/.nvm/versions/node/v10.5.0/lib/node_modules/npm/node_modules/bluebird/js/release/promise.js:569:18)\n14 verbose stack     at Promise._settlePromise0 (/Users/brendanb/.nvm/versions/node/v10.5.0/lib/node_modules/npm/node_modules/bluebird/js/release/promise.js:614:10)\n14 verbose stack     at Promise._settlePromises (/Users/brendanb/.nvm/versions/node/v10.5.0/lib/node_modules/npm/node_modules/bluebird/js/release/promise.js:693:18)\n14 verbose stack     at Async._drainQueue (/Users/brendanb/.nvm/versions/node/v10.5.0/lib/node_modules/npm/node_modules/bluebird/js/release/async.js:133:16)\n14 verbose stack     at Async._drainQueues (/Users/brendanb/.nvm/versions/node/v10.5.0/lib/node_modules/npm/node_modules/bluebird/js/release/async.js:143:10)\n14 verbose stack     at Immediate.Async.drainQueues [as _onImmediate] (/Users/brendanb/.nvm/versions/node/v10.5.0/lib/node_modules/npm/node_modules/bluebird/js/release/async.js:17:14)\n14 verbose stack     at runCallback (timers.js:696:18)\n14 verbose stack     at tryOnImmediate (timers.js:667:5)\n14 verbose stack     at processImmediate (timers.js:649:5)\n15 verbose cwd /Users/brendanb/src/scratch/test-lerna-again\n16 verbose Darwin 17.7.0\n17 verbose argv \"/Users/brendanb/.nvm/versions/node/v10.5.0/bin/node\" \"/Users/brendanb/.nvm/versions/node/v10.5.0/bin/npm\" \"install\" \"@lerna/changed@3.1.3\" \"-D\" \"--prefer-online\" \"--cache=.local-cache\"\n18 verbose node v10.5.0\n19 verbose npm  v6.4.0\n20 error code ETARGET\n21 error notarget No matching version found for @lerna/changed@3.1.3\n22 error notarget In most cases you or one of your dependencies are requesting\n22 error notarget a package version that doesn't exist.\n23 verbose exit [ 1, true ]\n```. sigh. okay not a lerna-specific issue.  thanks!. - Aug 21, 18:18 UTC\nPackument cache purging degradation\nResolved - Newly-published package visibility should be back to normal. \n- Aug 21, 18:00 UTC\nMonitoring - The upstream service is now green and package-version availability should be returning to normal. Continuing to monitor. \n- Aug 21, 17:51 UTC\nUpdate - Package visibility is affected by this issue in Cloudflare's API services: https://www.cloudflarestatus.com/incidents/1xns6llkx7l5 \n- Aug 21, 17:49 UTC\nIdentified - Due to an upstream issue we are seeing delays between package publishes and availability. \n. ",
    "eviL-ivan": "Same issue, fix by package-lock. ",
    "yorch": "We have the same problem, using Jenkins to publish to our NPM registry with a command like:\nlerna publish\n        --exact\n        --no-git-tag-version\n        --no-push\n        --yes\n        --npm-tag=latest\n        --force-publish=*\n        $BUMP\nWe don't care that we are in a detached HEAD, we don't need to push changes to Git as in our current process it causes us other problems, so we just don't keep the versions on Git but somewhere else.\nWhat's the point the Detached HEAD validation if we are not gonna commit / push changes to it?. ",
    "TimoWestland": "@evocateur We ran into the same issue as well, our CI setup is very similar. We trigger it by creating a release in github and thus a git tag. We want this git tag version to be used as the version for lerna version and we do a force-publish=* on all packages. So besides skipping git commit, tag and push we would also like lerna to skip any checks on git HEAD, as we don't require it to check what has changed in our packages (we provide the version from git and force-publish all packages).\nA flag to disable this behavior as well would be much appreciated as it prevents us to do git checkout master which is currently the only fix I could find. Git checkout [tag] gave the same issues.. ",
    "jsnajdr": "The recent experience with #1855 and the broken 3.9.0 release shows that pinning the @lerna/* dependencies to exact versions would be a good idea.\nWhen running:\nnpx lerna@3.8.5 bootstrap\nor when installing Lerna globally:\nnpm install -g lerna@3.8.5\none would expect that Lerna 3.8.5 gets installed and runs. But that's not what happens. The lerna package itself is a very thin CLI wrapper and all the meaningful Lerna code is in the @lerna/* subpackages. These are declared as ^3.8.5 dependencies. That means that the latest 3.x.x version is installed and run and the request for 3.8.5 is ignored.\nThe lockfile solution is not available in the npx and global install scenarios. For example, in our project we run npx lerna bootstrap as a replacement for the initial npm install.\nBecause of being forced to run 3.9.0, the #1855 issue caused much more trouble than needed.\n@evocateur would there be any downside to pin the dependencies to exact versions? The @lerna/* subpackages are not really libraries intended for independent use, but their purpose is dogfooding the monorepo tools on the Lerna project itself, if I understand it correctly.\n. Thanks @evocateur! I'm happy to see this ship :+1:. We're experiencing a similar issue in https://github.com/automattic/wp-calypso -- the project uses node-sass, which downloads a binary into a vendor subdirectory in an install script. When running lerna bootstrap, the download is no longer performed and node-sass is in broken state.. The problem seems to be the --ignore-scripts param for NPM added in this patch: https://github.com/lerna/lerna/commit/929ae22#diff-f132f0ed53f33747644da180a09d15baR96\nThat's OK for the packages managed by Lerna, because the this.runLifecycleInPackages calls will run the lifecycle scripts manually.\nBut it's not OK for the packages installed with this.installExternalDependencies. These are installed with the --ignore-scripts param, too, but nobody will run the lifecycles for them.\nThe issue is made much more difficult to work around by the fact that the buggy code is in the @lerna/bootstrap@3.9.0 package. Trying to run the older version:\nnpm lerna@3.8.5 bootstrap\ndoesn't work. lerna@3.8.5 has dependency @lerna/bootstrap: ^3.8.5, which still gets resolved to the 3.9.0 version of the package. I don't know how to downgrade to the older version.. ",
    "sergiohgz": "I understand your point of view @evocateur and make default \"alpha\" is a great idea but that is a little bit restrictive. I was thinking about, if somebody doesn't want a preid, Lerna could allow pass --no-preid flag and remove the default preid (\"alpha\"), being more permissive. The idea of set --preid=\"\" is a little bit stupid having that flag :sweat_smile: . If you want I can make a PR with the --no-preid feat :wink: . This is too close to our problem described in #1667, after updating to 3.3.2 we are getting that ERELEASED and blocked our workflow. Thanks @MartinBlackburn for your idea of an empty commit, it's making our git tree too ugly, but works for the meanwhile.\n@evocateur what do you think about that ERELEASED error? We think that is not correct if we force. ",
    "tim-phillips": "I suppose it should link to https://github.com/lerna/lerna/tree/master/commands/bootstrap instead?. ",
    "gtsiolis": "This has been resolved in https://github.com/lerna/lerna/pull/1749. /cc @evocateur . ",
    "virkt25": "Another reason canary releases isn\u2019t the best solution is that a contributor may want to test a patch to monorepo against their own code before opening a PR (and npm link) can be painful if multiple packages are affected by a change. . ",
    "huafu": "So at the end the real answer to this issue title is:\n\nlerna does NOT support adding multiple packages to one or more scopes at once. If you want to install multiple packages, you need to run lerna add as many times as you have packages to install\n\nright?. ",
    "Ojisama": "Hi @evocateur, thanks for the reply!\nOur context is that we are several teams working on quite different packages inside the monorepo. A developer that will change things in the sub-package Bravo may be not aware of all the impacts of its changes on packages importing Bravo, some (s)he never worked on.\nWe do not have a 100% coverage on our tests but that's not what we aim for: we would like each of our team to manage the bumps of internal packages like they would with external dependencies (React, Redux...). That is to say Changelogs reading, then manual bump, manual checks, then automated tests.\nSince we do not have a \"core team\" that validates commits/features like an open source project as React, do you see why we think an automated bump is risky? \nWe drafted a solution on a fork if you want to have a quick look: https://github.com/justinemignot/lerna/pull/1/files. We may not be in the expected use case for Lerna, but Lerna is helping us a lot :\n\ndeveloping is way easier by updating dependencies in real time\nbatching tests and CI builds\nreducing the number of PRs per feature\nautomatic bumps for dependent packages\nunique project installation and documentation\n\nWe will be adding in the next couple of weeks more integration and e2e tests, but we think that these cannot prevent all bugs from being captured.\nFor our use case, we strongly believe that a command preventing automatic bumps of Breaking Changes would help a lot preventing bugs being shipped in production by imposing manual bumps and changelogs reading to test the impact once a week.\n@evocateur, would you be ok if we opened a PR to suggest an implementation of this feature in Lerna? . > For our use case, we strongly believe that a command preventing automatic bumps of Breaking Changes would help a lot preventing bugs being shipped in production by imposing manual bumps and changelogs reading to test the impact once a week.\n\nwould you be ok if we opened a PR to suggest an implementation of this feature in Lerna?\n\n@evocateur what do you think? :blush: . ",
    "ctran": "For those struggling with similar problem (private registry and needs to separate the versioning and publishing), You can use the following workaround:\n\nUse lerna v3.4.1\nPing @lerna/publish to v3.2.2\nRun lerna version $rev --no-push --no-git-tag-version --yes ... to update desired package versions\nCommit files and any other git operations (i.e tag and push)\nCreate annotated tag localy git tag -a -m $rev $rev\nThen publish packages via lerna publish from-git --no-verify-access --no-verify-registry --yes . \n",
    "submjn": "While using lerna 2.11.0, to publish I used  \"lerna publish --skip-git --cd-version patch --yes\",\nIt was working fine, but It was causing infinite build on circleCI. I upgraded lerna to 3.x and now I used all these above mentioned commands, I am getting same issue \n\nlerna publish from-git --npm-client npm\n\nlerna notice cli v3.3.0\nlerna ERR! EUNCOMMIT Working tree has uncommitted changes, please commit or remove changes before continuing.\n. ",
    "spoldman": "I was just expirimenting with the options so maybe some of them do not make sense as you described. Thanks for all the info regarding the options. \nTo answeryour question,  package.json has version: 1.0.0 \n. This was working before in version 2. There was something wrong with my SSH agent so this can probably be closed.. This is not a issue with Lerna but rather an issue with linklocal package that I'm using. \nThis can be closed. Just wanted to give a little bit more context\nI'm trying to do CI builds of develop (canary) but all releases are tagged on master. If I have tagged 1.3 on master it is still buildin 1.2-alpha..... on develop. . I was testing the fix and found out that it was not completely working.\nIf you look at https://github.com/lerna/lerna/blob/master/commands/publish/index.js#L318\n you can see that describeRef is only called with one parameter but expects 2. The second parameter should be includeMergeTags flag. This can also be found in line 333 in the same file. \n. ",
    "nitrohorse": "Lerna team, thank you for taking a stand \ud83d\udc4f\ud83c\udffc\ud83d\udc4f\ud83c\udffc\ud83d\udc4f\ud83c\udffc. ",
    "jepler": "Please make sure that you amend your page on npmjs.org so that it does not state that the license of the project is \"MIT\".. Remember to change the metadata which appears at https://www.npmjs.com/package/lerna. ",
    "akatechis": "Curious: Do \"parents\" who drag their children across the desert with the express intent of illegally entering the United States have no share of blame for what happens to these children?. ",
    "leibwiht": "Are you protesting the right of the United States to choose who to allow to immigrate by deporting illegal aliens, or are you protesting the specific treatment of these illegal aliens in the context of their removal? If it's the former, then there's no point in bringing up their specific treatment as a point for why ICE should be protested (because it would be the case regardless of the treatment of any particular alien), and if it's the latter, then why not specify that, and protest by listing what exactly you would like changed about the treatment of aliens during their deportation? That would make what exactly you are protesting much clearer.. ",
    "tjdownes": "I'm adding it to all my repos to prevent the lerna project from being used in any of those projects, both open source and commercial. Just as a matter of principal. Adding your political beliefs to your licensing is petty. The irony is that this very project is hosted on a resource owned by Microsoft.... ",
    "cavedweller": "While I too abhor ICE, this isn't actually a valid license change. In order to re-license a project without a CLA, the consent of all contributors needs to be sought. There are a variety of scripts out there that accomplish this, the one I am most familiar with is the Rust Relicense assistant. I'd suggest using similar tooling to avoid potential legal issues.. ",
    "jwcrawley": "Yep, noted that is is no longer Open Source Software, by definition of https://opensource.org/osd .\nThe way this tirefire of a license can be interpreted, is that since a company uses Windows and pays Microsoft, they are complicit. Or Github for that matter, which is owned by Microsoft. Are the Lerna repo maintainers profiting on ICE, in direct opposition to their license? Github free accounts didn't come from nothingness.. ",
    "exogen": "@jwcrawley: So what? Maximal open source permissiveness is not automatically correct and just. It's just one option.\nAnd no, the terms are pretty clear, I suggest you read more carefully: \"The following license shall not be granted to the following entities or any subsidiary thereof.\" It says nothing about people giving money to e.g. Microsoft or using Microsoft products.. ",
    "zeusk": "I'm not sure how disallowing corporations that deal with ICE from using lerna would affect ICE's behavior - which I assume is the intent behind this PR.\nShoving politics into code will not help anyone.\n. ",
    "reconbot": "lerna run does exactly this!\n. ",
    "freelerna": "Feel free to use this instead https://github.com/LernaOpenSource/LernaOpenSource. ",
    "nickmccurdy": "While I respect and mostly agree with Jamie's political views, I would recommend switching to LernaOpenSource to be safe from invalid licenses: https://github.com/lerna/lerna/issues/1620#issuecomment-416906987. Even though sublicensing is allowed, because these projects have no copyright assignment agreements and every contributor did not agree, the licenses are all invalid. I am not a lawyer and this is not legal advice, but I suggest changing all your licenses to original MIT, or you may have legal issues with prior contributors (including companies on the list).\nhttps://opensource.org/faq#contributor-agreements. Very good points, thanks for the explanation. While I understand that in normal circumstances this isn't an issue and the repo technically didn't have valid contributions without a CLA, couldn't this potentially provoke a prior contributor to legally challenge that legality to avoid the restrictions in court?. The GitHub ToS requires allowing GitHub (and therefore Microsoft) the ability the host the source code to power the user interface. The license prevents GitHub from using Lerna, Lerna can use GitHub and GitHub can host Lerna development.\nThat being said, I honestly find this hypocritical. You are supporting GitHub (and therefore Microsoft) by using it to run open source projects like Lerna. Please at least allow GitHub/Microsoft on the list or delete this repository.. @evocateur Thanks so much for your support, explanation, and professionalism. I'm sure this must have been stressful.. Additionally the OSI, the leading authority on maintaining open source licenses, does not allow licenses to restrict usage for ethical or political purposes. A license must be usable without restrictions, or it is not an open source license.\nhttps://opensource.org/faq#evil\n\nCan I stop \"evil people\" from using my program?\nNo. The Open Source Definition specifies that Open Source licenses may not discriminate against persons or groups. Giving everyone freedom means giving evil people freedom, too.\n\nWe are not dissuading political activism, we are dissuading problematic maintainership of open source projects. The other Lerna maintainers are doing great. James can continue to be a political activist, but he should not refer to his projects as open source.. @tbredin James' license change was legally flawed and would have not actually prevented those companies from using Lerna. There is a LernaOpenSource fork that was created which is legally usable by the blacklisted companies, but it's no longer necessary. Is it also strongly discouraged to use non-OSI-approved licenses in the open source community.. ",
    "pluma": "I think the exception can not really be meaningfully registered as it is as it's essentially a curated blacklist. Most of the companies on the blacklist are listed as having ties to ICE but some are more arbitrary (abusive behavior towards workers, anti-union etc). This sounds like an open ended list that might grow or change in the future.\nIf this is intended to be something more permanent it would be helpful to replace the explicit blacklist with language clearly identifying requirements for companies to be excluded from the license.\nMaybe someone can come up with unambiguous wording and wave it at a lawyer to make sure it cuts the mustard.. The text says:\n\nThe following license shall not be granted to the following entities (..):\nMIT License\n\nSo it's clearly saying \"the license\" granted to everyone else is the \"MIT license\". But it's explicitly not granted to anyone on the list.\nI think this is confusing but for different reasons. The way I read it is that the license of the library remains the MIT license but the license itself is wrapped in a meta-license that restricts who that license applies to.\nSo in other words, as far as anyone not on the list is concerned, the library is MIT licensed. But that would mean that they are granted all the rights of the MIT license and aren't themselves barred from distributing the library to any of the companies on the list.\nThis clearly isn't the intent. Instead I think this is meant as a restriction of the license, which indeed would change this to a new more restrictive license that merely resembles the MIT license. So it's probably more at home with other novelty licenses like the JSON License (which is heavily inspired by the MIT license but more permissive while at the same time containing a legally ambiguous ethical clause).\nSo I see two obvious solutions:\n\nkeep calling it MIT and clarify that the blacklist is non-viral\nadjust the license text to explicitly include the blacklist as part of the license. I'm not defending their wording but it's legal to fork an MIT project and redistribute it under a more restrictive license. You can always go more restrictive (just not more permissive -- because that would require prior contributors to grant additional rights).\n\nAlso note that license changes aren't retroactive. Existing releases are still covered by whatever licenses they were distributed with. The license change only affects new releases. You can fork a pre-existing version of the project under the old license.\nAs always, IANAL, TINLA, take this with a grain of salt.. @nickmccurdy technically (which the link backs up) a CLA is necessary for any contribution in order to be able to distribute that contribution under any license at all (because without a CLA the contribution itself comes with no license, i.e. \"all rights reserved\"). Most community maintained open source projects simply assume contributors implicitly agree to the terms of the license of the project they're contributing though:\n\n[CLAs] are a way for the contributor to tell the project that it has the right to distribute the new contributions under the project's existing open source license\n\n(emphasis added)\nSo IOW every open source project technically needs CLAs but that's irrelevant to the relincensing question as long as the relicensing is permitted by the existing license. MIT is generally held to permit relicensing under a more restrictive license, which \"MIT with a blacklist\" certainly is.\nSo if anything you could argue that the contributions to Lerna by external contributors are all unlicensed and were never legal to be distributed under the MIT license because there was no CLA or CAA. But that argument can be made for the vast majority of open source projects that aren't backed by companies with legal departments.\nIf we accept that the distribution of the contributions under the MIT license was legitimate without a CLA, the license change is not a problem. If we don't accept that, the original license was already invalid (but that would be true for 99.9% of GitHub projects that accept PRs).. Well, again, IANAL, but as I understand it nothing can protect you against being sued or threatened with legal actions. The question is if a prior contributor might succeed if they sued but that's difficult to predict.\nAs a non-lawyer I'd say that redistributing contributions submitted as PRs on GitHub under the same license stated on that same repository is standard practice and submitting a PR therefore means you implicitly agree to having your contributions covered by that license.\nThat said, if a contributor were to sue over this and succeed, they'd set a legal precedent that would require all open source projects to adopt CLAs to prevent being sued by their contributors, regardless of their licenses or planned licensing changes.. FYI the licensing changes originally cited as examples were\nVLC: GPLv2 -> LGPLv2.1\nZNC: GPLv2 -> Apache 2.0\nIn both cases the new license is more permissive, meaning the authors grant the users additional rights. In the case of the Apache 2.0 license there's also a patent grant involved, which causes additional headaches.\nThe license change lerna just implemented merely restricted who the license applies to (i.e. not any of the companies on the blacklist) and reserves all rights to everyone else. So it's from permissive to less permissive (or equally permissive but to fewer people). That seems less problematic.. It's less problematic because you're allowed to do that by the MIT license.\nThe MIT license explicitly grants the right to sublicense and even to sell copies of the software (without also providing access to the source code as the GPL would require).\nLerna's license could be changed to\n\nPermission is hereby granted, ~~free of charge~~ in exchange for one million dollars paid to @MadaraUchiha per individual use, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n... and that'd be entirely within the scope of what the MIT license allows you to do.\nKeep in mind that license changes aren't retroactive. A copy distributed under the MIT license remains under that license. Making a copy of it and changing to a more restrictive license is legal. Making a copy of it and keeping the license is also legal. But making a copy of the copy that has a more restrictive license and re-releasing it under the old license wouldn't be legal.\nImagine licenses as a sieve for rights held by the authors. If you slap a permissive sieve on, more rights are granted to the user. If you slap a restrictive sieve on, less rights are granted. If you slap a more restrictive sieve on top of a more permissive sieve, less rights are granted than before. If you slap a more permissive sieve on top of a more restrictive sieve it won't grant more rights so that doesn't work. The most restrictive sieve is the default (\"all rights reserved\"), the least restrictive sieve is the public domain. Some sieves have spikes that prevent slapping most other sieves on top of them (e.g. the GPL). ... Okay, this analogy isn't perfect but I think you get the idea.\n. Those two things are the same thing. It's not retroactive and it's not granting additional rights the contributors didn't agree to. For all intents and purposes a relicensing is a fork that retains the same name and location.. @dtibarra I don't think that interpretation is correct. You're talking about software being developed using a distributed version control system. The version \"hosted\" on GitHub right now is just a working copy of the latest commit pushed to master. There's no \"original\" as everything is a copy. The license also makes no mention of the \"original\" as it doesn't make sense for software code. If anything, the \"original\" of lerna lives on the harddisk of its first original author.\nBut even if you were right, what's the practical difference between relicensing \"the original\" versus making a copy of the original under a new license, moving the original somewhere else and replacing the original with the copy?\nThe \"original\" lives here and it's currently at version 3.2.1: https://github.com/lerna/lerna/tree/v3.2.1 -- it's still under MIT and always will be, just as it always will be at version 3.2.1. If you want to continue work on the original, you can fork version 3.2.1 and release your own versions under whatever license you want (as long as it's compatible with MIT -- e.g. you can't put it in the public domain).\nIf you want to sue, you can try revoking the usage rights you originally implicitly granted as part of the PR (but you'll probably have better luck claiming you never knowingly granted them in the first place). But I've never heard of any precedent for this except in cases where the contributor (knowingly or not) didn't actually own the code they contributed.\nIn all likelihood however I doubt your individual contribution is significant enough that you couldn't simply ask for your PR to be reverted and the maintainers would comply out of courtesy -- if you haven't burned that bridge by grabbing tikki torches and pitchforks first.. Based on Jamie's longer list posted elsewhere I wonder whether this is intended to only cover ICE collaborators or also other companies engaging in unethical business practices. In that case I would like to see those criteria also spelled out.. Sean's PRs: https://github.com/lerna/lerna/pulls?utf8=%E2%9C%93&q=is%3Apr+author%3Aseansfkelley\nAnd the commits in case a revert is desired: https://github.com/lerna/lerna/commits?author=seansfkelley. As there is no CLA, @seansfkelley is the only person who can clarify how \"remove my contributions\" is supposed to be interpreted.\nSince he's explicitly doing it because he disagrees with the relicensing, I would expect it to mean \"revert my commits in this repo and don't include the code I committed in any future releases\".\nIANAL but I'm not sure whether there's a legal requirement for the lerna maintainers to comply. I think it depends on what exactly creating a PR on a GitHub repo implies and I'm not aware of any legal precedent for that. That said, if I were a maintainer I would comply out of courtesy.\nEDIT: @orthecreedence for the sake of keeping things organised, I think it makes more sense to discuss the issue of whether the relicensing is legal in the existing issue https://github.com/lerna/lerna/issues/1620. I'm not a contributor but derailing every new issue/PR is a quick way to get open source maintainers to lock down issues which helps nobody.. @rubbingalcoholic I'm not even using lerna, actually.. @Sieabah Unless you're a lawyer, that's dangerously bad advice. As others and I have explained before, it's not at all clear whether the project maintainers are legally required to comply with the request. Filing DMCA claims without having a valid basis is a federal offense. So if it turns out that I'm right and there's no legal obligation, he'd commit a felony.\nThat said, the suggestion is silly because you're responding after the maintainers have already started complying with the request out of courtesy. So it would not only be a potential felony but also pointless and needlessly aggressive.\n. I don't see anything in the license prohibiting you from doing business with the companies listed as long as you don't use them as a proxy to do business with the ICE. The license clearly penalises companies for doing business with the ICE.\nIf the intent of the license is for the prohibition to be viral, it should clearly specify that. Microsoft isn't using lerna if you run lerna on a Microsoft server you pay for. They're not providing lerna as a service if you install lerna on a Microsoft server you use.\nIt's like prohibiting a paper plant that's also a publisher from publishing copies of your (otherwise free) book. People can still use that paper plant's paper to publish copies of your book, but the paper plant itself can't publish copies.. I think you're misunderstanding how licensing works. The existing releases remain MIT licensed with no exceptions:\nhttps://github.com/lerna/lerna/blob/v3.2.1/LICENSE\nUnless lerna unpublishes all existing versions, this shouldn't affect you until they release a new version.\nHowever I would strongly urge the lerna maintainers to consider this license change (like any license change) a breaking change and thus release the next version as 4.0.0 even if it is API compatible.\nThis would also help companies that are not intentionally affected by the license change but need their third-party licenses to be vetted by lawyers.. MIT allows for \"sublicensing\" of code. If I understand it correctly that refers to what lerna has done: picking a more restrictive license going forward.\nThe problem is with still calling that more restrictive license \"MIT\". See https://github.com/lerna/lerna/pull/1619. ",
    "KarolS": "Licence exceptions are either:\n exceptions to conditions\n additional permissions\nSince they remove restrictions and do not add restrictions, I don't think exceptions are an appropriate tool here.\nSPDX tag for JSON License is JSON, not MIT WITH no-evil-exception. ",
    "bkuhn": "Lerna has of course decided not to pursue this new licensing approach, which I think is a good thing. \n However, for posterity I wanted to note on this ticket a confusion about SPDX WITH operator. \n The WITH operator is use for additional permissions and/or exceptions.\nThese exceptions grant more permissions than the underlying license, while the clause under discussion her takes certain permissions away. See the definition at the top of https://spdx.org/licenses/exceptions-index.html\nSince SPDX does list some non-Free and non-Open Source licenses as well, you would have to submit it as a new license.\nBTW, this blog post I wrote on the subject might be of interest: https://sfconservancy.org/blog/2018/aug/30/big-tent/. I do believe that politics and software are definitely linked, and software freedom as a cause unto itself is inherently a political struggle for the rights of users and developers.\nThe question of how that specific social justice cause of software freedom should interact with other social justice causes is a complicated one, and I'm thus not surprised that this situation has caused contentious debate.  FWIW, the situation inspired me to write down my own thoughts about the issue.\nTL;DR is that I think projects should look for ways to make positive impact on other social justice issues, but using the FOSS license of the project is not productive nor in fitting with software freedom principles.. ",
    "jcsalomon": "Particularly as the license is non-Free and non-Open Source, identifying it as a \u201cmodified\u201d version of any F/L/OSS license is misleading.. ",
    "StoneCypher": "No.\nThis is not the MIT license.  This is some other license.\nAutomated license compliance checkers are giving false results because you're using a different institution's name and making false representations about what's allowed.\nThe MIT license is chosen for its permissiveness.  You are in violation of the spirit of the license, as well as the law.\nPlease just change the license name.  This is dishonest, confusing, and purposeless.  . Note: \n\ngitlab runs on a spread between Microsoft and Google servers, and both Microsoft and Google do business with ICE, so gitlab is out too.\nbitbucket also hosts at aws, so bitbucket is out\nsourceforce is at american internet services, which is level3, which is centurylink, so they're out too\n\nLooks like Canonical's launchpad is at websitewelcome, which is hostgator, which should be safe for your current license\n. ",
    "boydrh": "MIT's Lincoln Laboratory has an extensive history actively supporting ICE's mission. Their support ranges from collaboration on DoD projects to developing next-gen imaging systems specifically for border enforcement operations.\nWill you be adding MIT to the blacklist while still calling it an \"MIT\" license?. ",
    "MadaraUchiha": "What do you mean it's less problematic?\nIf I were to set the license to \"Only those that paid @MadaraUchiha money\" it's also most restrictive and no additional rights are given, how is that any less problematic?. @pluma Sure, but again, only with the agreement (or contribution removal) of every other collaborator. That's the whole dispute, that there's no such thing as \"implicit\" agreement to this. This isn't a fork, this is the relicensing of the package. . @sdkuck Only those contributors who gave contributions under the new license. Those who made their contributions under the original license already gave their permission to release their contribution under the original license, and so you wouldn't need to ask it from them again.. ",
    "sdkuck": "Interesting point that you can't move to a more permissive license without permission. That means lerna will be required to get permission from every contributor from now on if they want to remove these restrictions from the license in the future.\nEdit: @MadaraUchiha below: That's the point I was trying to make. Thanks for clarifying it! :)\nI think it applies to all new contributions, whether they are from previous contributors or not.. ",
    "dtibarra": "Code contributions only receive the the MIT license once the code is at rest in the repo after merge. Contributions themselves are not MIT licensed, even though the forked code base they are derived from is a derivative work because the act of applying means only receiving and merging the code diff in question, not code diff plus MIT copyright notice and permission notice as stated in the terms of the MIT license.\nThe terms of the MIT license state, \"Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files\"\nI'd argue that this codebase is not a copy, but the original. I'd also argue that anyone who does not agree to this sublicense has legal recourse due to a violation of their copyright.. ",
    "orthecreedence": "\nAlso note that license changes aren't retroactive.\n\n@pluma Exactly. You cannot relicense code without a) a previous agreement that allows a relicense (CLA) or b) explicit permission from every contributor c) a clause in the license that explicitely allows relicensing by the original copyright holder.\nWith copyright law, the people contributing the code own the code, unless they sign that right away explicitely. If they contribute it under the terms of a specific license (MIT), they still own that code. MIT doesn't transfer ownership, and it doesn't allow explicit relicensing. So if the maintainers want to relicense as MIT-ICE they need permission.\nEven if they fork the project, they need permission to change the terms under which the code is distributed. This is why people set up CLAs, so they can relicense later without having to ask permission.\n. I want to add, this is about ownership.\nWho owns the project? With a CLA, that becomes much clearer. With an MIT-licensed project with a vast number of contributors, who owns the project? Everyone who has contributed shares ownership of the project, in a legal sense. In order to relicense, you need permission from all the owners of the project, or you need to make them not owners anymore by removing their contributions.. @phpnode Thanks, that makes sense. I guess my head was stuck in GPL-land.. From what I've read, this project does not have a CLA. That means that in order to relicense, you either need to remove the contributions of the people who have not given EXPLICIT PERMISSION to relicense, or you need to reprogram the sections of code contributed by them.\nThis is not just for the contributors who complain, this is for every contribution that has been made to the project by those who have not explicitely agreed to relicense. The people who have contributed own their code have contributed it under the license terms of the MIT license. You cannot relicense their code without their permission.\nAnd you cannot just remove their code and add it back in again without naming them as authors, because they own the code and it is not yours to do with as you please without permission.\nIt seems that if this license change is a serious endeavor and not just virtue signaling, the Lerna team is going to have to a) ask permission from a lot of people or b) rewrite a lot of code.\nOtherwise, you're effectively stealing people's code.. The license is about virally penalizing companies that do business with ICE, yet the project is doing business with one of the companies in their list they specifically prohibit. And that's ok, because reasons?\nLook, I'm all for protest. But this relicensing is not thought through at all. If this is a serious protest, they need to ask permission to relicense (from all contributors) and rewrite the code from anyone who doesn't explicitely agree. I really think moving off of an ICE-collaborating hosting platform would be warranted as well.... ",
    "hallister": "My single favorite thing about this stupid, stupid idea is that they put a list of corporations that can't use it because they collaborate with ICE, but failed to list any government entity (including ICE). The lesson here is simple: Companies aren't allowed to collaborate with what the author (since it appears to be one supporting this) doesn't like, but the \"evil\" entities are free to use the tool.\nLerna: Cognitive dissonance and virtue signaling on an inappropriate platform.. Major corporations aren't going to use a tool that arbitrarily adds exceptions to the MIT license for specific companies, so you're correct @sebinsua in that Lerna is now all but dead in any enterprise. Sad since it's such an awesome tool. But this is pretty clear evidence that brilliant programmers can be stupid people.. I wouldn't worry about this too much. This type of virtue signaling kills projects, and likely will here. Maintainers of packages that use this software can simply port their dependencies to https://github.com/LernaOpenSource/LernaOpenSource, and the community, which very apparently opposes using popular libraries as political soap boxes, will follow as well.\n. Not unless you change the MIT license to some other license. You are currently advertising this is MIT licensed, which it no longer is, and should you release a version of Lerna with this license you are going to break a ton of automated license checkers for the companies you've decided to start this nonsense with. \nChange the license to something other than MIT so everyone can move to LernaOpenSource.. You're going to introduce a major license change, refuse to change the license name and do it in a minor version bump? What the actual hell is your goal here? . By releasing a major license change as a minor version bump and using an incorrect license in the license field? You're screwing Lerna, not the companies listed. Ignoring you politicizing something that has no business being political (especially as a former Facebook employee... come on), literally every company listed is going to update their packages to pull from https://github.com/LernaOpenSource/LernaOpenSource and go back to work. Meanwhile you're getting massive community backlash that's only going to continue if you decide to be a child and inappropriately release this as a minor version bump or with the MIT license.\nThe best thing feasible for Lerna at this point is you leaving the project. But since that's not going to happen since you apparently enjoy your soap box, the second best thing is everyone moving to a fork of the project without a politician having any control. \nThe irony is I 100% agree with your politics, but this is not the place to express them. . Jamie's removal was a necessity and shouldn't be open for debate. Blocking people from contributing because they disagreed, which eventually lead to him blocking everyone but contributors, attacking companies/individuals, claiming community tools (like Babel) are \"his\" is overwhelming evidence that he violated the CoC.\n@benwiley4000 Calls for civility are perfectly apt after an issue like this. Suggesting that asking people to \"be nice\" is an attempt at ending discussion is one of the strangest stretches I've ever heard. As someone that called maintainers cowards for reverting the changes and removing Jamie, I can get a strong sense of why you'd argue that point, however.\nAs for this issue, @TheLarkInn made it pretty clear that they'd like to wait for the dust to settle prior to a formal RFC. That makes sense. Right now Lerna is a target for people only interested in politics, and once the dust settles they will likely have something new to chase, and the people actually interested in the project can contribute to the suggested RFC.. @hannahhoward \n\nGiven the original issue was a political one, it seems particularly important that a wide variety of political perspectives are included. To wait until there is a safe space for those \"only interested in code\" excludes a variety of political views, as the idea that politics and code can and should be separate is itself a political position that many disagree with\n\nIf the broader open-source community wants to discuss the politics of this, they should do so in a forum that makes sense. The Lerna repo isn't that forum. This repo is intended for end-users and maintainers of the project. As such, decisions about the goals and motivations of the project should be made by the Lerna community.\n\nI am not personally prepared to say Jamie's removal is a settled issue because the announcement he is being removed does not include any accounting or transparency on what specific violations the maintainers feel occurred. \n\nI realize some people feel like open source maintainers need to write books for every decision they make, but I disagree. It was decided by multiple maintainers that he violated the CoC. That's subjective, absolutely, but debating the issue to death isn't suddenly going to give us objectivity. . > The purpose isn't objectivity, it's transparency.\nLet's test if that's the actual goal\n\nExamples of unacceptable behavior by participants include the use of sexual language or imagery, derogatory comments or personal attacks, trolling, public or private harassment, insults, or other unprofessional conduct.\n\n(Emphasis added by me)\n\npersonal attacks... insults\n\nPer https://github.com/palantir/blueprint/issues/2877\n\n\nPalantir employees are racist\n\n\nI could probably stop here. That's enough for removal. Full stop.\n\ntrolling\n\n\nBlocking people on the lerna repository that politely called him out.\nBlocking all non-contributors on the repo from posting issues/comments/PR's\n\nPer https://github.com/lerna/lerna/issues/1628\n\nSuggesting he may not do a major version bump\n\nThis is in addition to his horrible conduct in every issue posted regarding adding his company restrictions to the MIT license. That's pretty transparent. That's pretty objectively trolling, personal attacks and insults. Now the question is, do you really want transparency, or are you looking for a fight?. @benwiley4000 \n\nJustin your implication that commenters have no relation to Lerna is unsubstantiated. \n\nI made no such implication. I said, quite explicitly, that Lerna is currently a target for those disinterested in the project and overly interested in the politics. By waiting for the dust to settle, we can ensure that any RFC is targeting the actual community. I'm not suggesting that everyone that supported Jamie is a troll, I'm saying that right now Lerna is going to attract them. Wait a few days and they'll be busy trolling someone else so we can get active interest in the discussion, including those that disagree with reverting the change. . @benwiley4000 \n\nThe claims made here are not supported by evidence or arguments.\n\nFeel free to show appreciable change as a result of this. At Amazon someone sent an email that said \"Don't use lerna above version v3.2.1\". I could just feel ICE crumbling under the pressure.\n\nRespectfully, given the conflict of interest between your role as a maintainer and your role as a Microsoft employee, I think you should have sat out of that decision. \n\nYes, only people with no vested interest in this can be involved in the decision making.  That makes a ton of sense.. > I personally think this action has definitely moved the needle on this issue.\nBecause a guy among 10s of thousands was going to put up the big fight to stay off the list, and now can't because it doesn't exist anymore. I suppose, instead, he can now argue to not have contracts with ICE, but then this silly move wouldn't get any credit.\n\nCourt judges recuse themselves from decisions involving conflicts of interest all the time. The idea that one might have such a conflict and thus should not be involved in the decision is not particularly far-fetched.\n\nJamie already had a conflict of interest in targeting specific companies he didn't like. Your argument here would imply only people that are independent should play a role in the decision-making. Except nobody is independent. . I work at Amazon, should I also recuse myself from the discussion? This idea that employees of the company are too tainted to discuss the future of a project is absurd. If we want to debate the merits of this decision, which is how it should have gone in the first place, let's do so. But asking anyone to recuse themselves from discussion is the literal opposite of everything opensource is supposed to mean.\nThis entire situation wouldn't exist if it weren't for some poor choices, and at least one of the maintainers realized that. Had this rash choice not been made in the first place, nobody would be here demanding that discussion take place and an RFC on taking Lerna to a non-opensource license would exist. I'm fine if the maintainers want to go that direction, but if I were in their position, my vote would be to close this issue and everybody go back to building software which is supposed to be the point of projects like this.\nBut now that pandoras box has been opened, everyone with an agenda is here to fight for it, so much so, they want to silence anyone with an opinion that differs because \"ethics\" or whatever silly nonsense they can use to make this issue an echo chamber. @darthtrevino You completely missed the point here. Silencing someone in the name of ethics isn't ethics. @hannahhoward explicitly stated that @TheLarkInn shouldn't even be a part of the discussion for ethical reasons. That's abusing something good (ethics) for a clear agenda. That's after arguing that this discussion has some degree of immediacy so that a broad variety of opinions can be heard. Except, obviously, the opinions of the people that they are well aware disagree with them.  \nIt's either dishonest or naive. I choose to assume the latter as that requires the least assumption. But you're correct in that I'm going to call out anyone that tries to abuse something as meaningful as ethics, whether or not it was out of malice or poor judgement. . @krainboltgreene The only thing distressing is that this entire event took place. You do realize that the big tech companies even let us think for ourselves?\nI work for Amazon and not a single project in our org uses lerna. I do, personally. This wasn't about bias, this was about virtue signaling, particularly on such a terrible platform for it. Frankly I'm not sure where else this discussion has to go, since it's just boiling down to \"if you work for any of the companies listed you shouldn't have input\". . I'll go ahead and suggest this is discussion for the sake of discussion as well. We certainly aren't talking about anything even remotely relevant to Lerna.. I never said it shouldn't or couldn't be discussed, I said it was discussion for the sake of discussion. Relax buddy, and read what people write before you respond. . ",
    "sebinsua": "I'm not working at any of the companies mentioned in the list, however I suspect this will make license compliance at various enterprise clients I work for impractical. They will either outright refuse the non-standard license or stone-wall.. ",
    "Sieabah": "@jamiebuilds Don't ever fly to DC and work in the cleared sector then. You're missing out on a huge population of engineers and companies which support this behavior.. @seansfkelley Just file a DMCA takedown request.. > That said, the suggestion is silly because you're responding after the maintainers have already started complying with the request out of courtesy. So it would not only be a potential felony but also pointless and needlessly aggressive.\nThe irony. I was merely stating a suggestion, if you take everything someone says as legal advice then that's your problem. It would be on the person filing the takedown request to ensure they have the right to do so. \nHere you go though:\nIANAL, if the MIT license does not explicitly transfer ownership then the legal owner should be able to request anything be done to that code, including removing it from all previous releases of Lerna. If it is not complied with the original author could file a DMCA request to take down the project until it has been rectified.\nI assume the people who made the license change don't have much more legal experience than the average person so they probably overlooked a lot of edge cases which can get this project terminated.\nEdit:\nAfter being messaged a few things at this point, I don't think anything jamie says can be taken at face value.. How does one remove someone who is not part of the lerna org but is acting like a maintainer?. @jamiebuilds I think it's a honest concern that you are overlooking. Things are obviously pretty heated right now but this won't last. Either you will be removed or you will fade into obscurity.. There must be a god.. @elizagamedev Protesting has its purpose and place, changing the license of an open source project is not the place. It has absolutely nothing to do with the political message and everything to do with modifying the license to be MIT with a list of exclusions curated by a single biased person.\nRegardless of the politics or the bias, on either side, open source is primarily open. What James did was not open and needed to be undone.. The more vague a document becomes the less reliable of a benchmark it becomes. It starts out strict then just becomes a pick-and-choose who you want gone since you anything could be in violation. Certainly doesn't harbor a community outside the likes of people like Jamie. (Basically political adversaries, not doing that much for the project). SJWs are usually left leaning idealogues that stand for up social issues on other people's behalf. The most notable occurrences are I remember are Hugh Mungus and Big Red.\nAlthough social justice is a spectrum it almost always is never the group, minority, or specific person who is affected by the social injustice. So everyone coming out of the woodworks to say reverting is racist and bigoted are trolls or fall into the sjw category.. It's funny how much of the argument is going on trying to express that you all have the same political views but you're too ignorant to really listen to each other. It's always jumping to conclusions that there must be conflicts of interest and conspiracy theories.\nAt what point are people going to realize the arguing you're doing is for the most part wasting time trying to explain to someone, who agrees with you, why they should agree with you. Law is not based on feelings, licenses are law, licenses are not meant to be interpreted by feelings. Whatever they may be the license has to be rigid and precise, any lack thereof leaves the license weak and unenforceable.\nThis isn't so much directed to the Lerna team as much as it is to every single person who is trying to ensure they're on the right side of history and bring the crusade Jamie was trying to create.. @darthtrevino If you can't see the difference between that and this situation then your opinion isn't that valid.. It's still funny the discussion is primarily \"If you don't revert it you are complacent with separating families!\". Which is a stupid untrue argument.\n@krainboltgreene You're providing equal values of absolutely nothing to this discussion.. I'm confident benwiley4000 and krainboltgreene are just trolling at this point. Don't give them the effort of a response.. Oh boy...\n@termhn The mentions of reverting to the original MIT license has been met with this statement enough times in enough issues, twitter, and reddit. It's not word for word what is said but it is heavily implied by \"you support what ICE does\".\n\nI believe this is exactly why we want an RFC -- to discuss whether this change (or one like it) should be implemented or not.\n\nNo, it's a terrible idea. Any restriction on the license means it's no longer open source. If that's the goal then I think a lot of people will just drop Lerna because of licensing risk. If that's what you want just to make a statement then that's a very poor software decision.\n\nI don't believe that this intention is at all trollish, though the way you present it makes it sound slightly so.\n\nIt was entirely a trollish act, it's undebatable. \ud83d\udc48 Multiple links\n\none of which is the license of who gets to use it, in order to affect change in the world. You may say that this is political, but I would argue that by taking no action, you are in fact taking an action and affecting change. We must battle with which one is more positive or has a better ethical standing.\n\nThe ethical standing is to honor an open license. If lerna doesn't want to be an open source project anymore that's a different story. You cannot restrict anyone. The discussion that everyone seems to be missing is that this change converts Lerna to a proprietary piece of software. Also you're nearing the ethical dilemma of the trolley problem, not exactly, but by saying \"inaction is an action in itself\" is a  poor argument.\n\nThis assumes that any movement against ICE is inherently bad because it assumes that the short term negative impact would out weigh any long term benefit of having ICE gone. It also ignores the potential ways in which there would be benefits throughout the entire software development and sharing community, as I mentioned near the top of my post.\n\nICE isn't going anywhere and it probably won't in the next 10 years. Whether that is a positive or negative to whoever reads this is an unfortunate thing we have to deal with. I'm 99.9% sure lerna is nothing special at a government scale, and if ICE (or company in a binding contract with ICE) needed something like lerna they'd build it themselves or simply fork the old version. This license change effectively does nothing to the target. So the discussion is resulting in debating who can virtue signal the strongest.\n\nI believe that this argument is somewhat of a non-starter, as it asserts that \"open source\" is fundamentally better than \"not open source.\"\n\nThis is a fundamental misunderstanding of what \"open\" means if one cannot see the issue with a non-open license. You will have to fight the literally brick wall of Stallman to change what \"open\" source means if you want to challenge this. Non open licenses greatly increase risk of using the software (depending on the license, the bastardization of the MIT-ICE is a huge risk). If you want to build a company you simply don't pick licenses which can destroy your business in a day.\n\nI think this is somewhat silly however, as what is and is not open source has been malleable and changed before, and I don't think it is out of the question for it to change again.\n\nIn what realm of reality does a strictly always open door, close? Open is open, closed is closed. Open source is non discriminatory, if you want to go down the path of \"restrictive licensing is open source\" then I don't see the issue with Facebook being able to restrict the people using React under their Patent license. Absolutely zero issues with a single entity controlling who uses the software while claiming to be open source.\n. The comments he made on other projects is a violation of the CoC and that's why he was removed. I think that may have been the nth time someone has mentioned that to you. \nSo either you're illiterate or have an agenda.. @hedgepigdaniel He did.\nHere is one where he directly states Lerna is his project. https://github.com/palantir/blueprint/issues/2877\nHere is one where he claims babel is his project https://github.com/palantir/tslint/issues/4132\nAnother one https://github.com/palantir/tslint/issues/4141\nWhy does it keep happening D:? https://github.com/palantir/blueprint/issues/2870\nThere is no character assassination going on, he acted shitty and is being called out on it.. @hedgepigdaniel Sure, I'm sure you could argue Adolf was a pretty cool guy if you ignore all the other stuff he did and just focus on his gun control policy. \ud83d\udd25\nIf you just excuse it as \"unfortunate\" then you're just trying to justify your own opinions.\n@termhn The difference between having a strict license vs claiming it's open. As I said numerous times, if the goal is to have lerna be proprietary that's a different discussion. At the current time, and as far as I know, lerna plans to stay as an open source project.\n\nIf many OSS projects do the same thing, then there could be real, large-scale change over time.\n\nThen none of them are open source anymore. You have collectively made a proprietary license. We're not arguing that so it's a moot point to even mention.\n\nNone of those show a trollish intent behind the action at all, and in the actual PR that was made, the changes were discussed in a very professional manner, all (at the time available) protocols were followed, and a calm and deliberate reasoning was given.\n\nHe made multiple issues in the same project that all state the same thing, linking to the same resources which are there to incite hatred from a group of people towards a company. See this definition:\n\ntrolling: make a deliberately offensive or provocative online post with the aim of upsetting someone or eliciting an angry response from them.\n\nMy god, it's exactly what he did.\n. Congrats on reaching immaturity. Only a few more years to go before you understand how to interact with the general public.. ",
    "androolloyd": "since his commits occurred under MIT, ~we~ can we simply revert and then re issue without him as the author correct? . MIT allows for sub-licenses to be created?. ",
    "rubbingalcoholic": "\nIANAL but I'm not sure whether there's a legal requirement for the lerna maintainers to comply. I think it depends on what exactly creating a PR on a GitHub repo implies and I'm not aware of any legal precedent for that. That said, if I were a maintainer I would comply out of courtesy.\n\nIANAL but they're using his code without a license. Ironic.. ",
    "TheLarkInn": "Thanks for the patience. . I think this would be a perfect github issue to open with RFC. @Daniel15 would you be willing to create one weighing the options. For example webpack's pages are all accessible without a paywall. Babel does their own, and they have tradeoffs worth mentioning! \ud83d\ude47 . @FuzzOli87 the sentiment is appreciated but please don't bring yourself to the same level with names and insults. But continue to bring great contributions and ideas to the project.\nWe'll have our Code of Conduct revised here in the coming days. Thanks.. Before I go to bed for the night (last maintainer awake for now) \ud83d\udca4 \ud83d\ude34 \ud83d\ude02. I'm going to lock this thread so that it doesn't continue to escalate around ethical or political discourse. If there is anything unclear about the changes being made to the license, please feel free to submit it in a separate issue, but be wary of duplicates. Thank you everyone for being understanding, respectful, and thoughtful. \ud83d\ude47 . Ben I'm going to close this issue, in favor or a more structured, RFC style of a proposal for what decisions you are questioning. Thanks! We don't have a template RFC format, or spec template, but hopefully looking to have one once we catchup and dust settles. . @indrora Thank you so much for breaking down each addition and change. I'll make sure and carefully look at each of the clarified, expanded, and added sections (in addition to a general review of the code itself). . @hannahhoward \n\nThis issue is simply to register there is dissent among a portion of Lerna users about the decision of the core team to revert Jamie's license change and remove him from the project until an RFC can be opened.\n\nThank you for speaking up and registering your dissent and representing the dissent of like-minded Lerna users. \nAs an open source project we have every right to provide no reason for his removal. \nHowever, as stewards of transparency, trust, and care for our users and the lerna ecosystem, we will provide clarity.\nAccording to the current Lerna Code of Conduct:\n\nExamples of unacceptable behavior by participants include the use of sexual language or imagery, derogatory comments or personal attacks, trolling, public or private harassment, insults, or other unprofessional conduct.\n\nAdditionally our rights as Org Members of the project for handling unacceptable behavior which do not align with the current Code of Conduct.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct. Project maintainers who do not follow the Code of Conduct may be removed from the project team. \n\nThese are the segments of the current lerna Code of Conduct that justify our decisions made to revoke all of James involvement and ownership privileges over this GitHub Organization. \nIn multiple GitHub issues (if you need me to cite them, I will do so but in additional comments or edits from this response), on Twitter [important to note he claims ownership of lerna in this context making him profesionally represented and in the capacity of a maintainer] acts in a very unprofessional, rude, and harassing manner.\nThese also have been occurring since July which @evocateur official states in our license change PR #1633 that we made a mistake in this regard to not address earlier violations in a swift and timely manner. \nAs a core team, going forward, we want to not only protect the interest of the project itself, but also the transparency of the project. And that means we need to adopt a much less vague, less interpretive, and more structured Code of Conduct. For that we have open up #1636 per request (I on twitter officially asked Coraline to create this issue).\nOn behalf of the core team who is all actively monitoring this issue, I hope it provides the clarity that you are seeking. Thank you for sticking up for a transparent and responsible process. \nNote: @hannahhoward once you have your clarifications received (even if you don't explicitly request them), would you confirm your question has been answered? That way I can prevent thread abuse by locking and maintainers can add cited incidents in the issue.. > Why did you decide to revert the license change despite maintainers having originally been involved in approving it? \nI did not decide to revert the license change, I approved it. This decision was made by @evocateur and his resoning is very clear in #1633. \n\nWhy did you choose to link Jamie's dismissal with the license change?\n\nI did not link Jamie's dismissal. @evocateur explained his reasoning in #1633\n\nWhy did you open a pull request to remove your own employer (Microsoft) from the restricted list?\n\nI thought Microsoft was being treated unfairly and wanted to set the story straight. . ",
    "grxy": ":rekt:. ",
    "siziyman": "\nI left the Lerna project a long time ago, \n\nAs long as you're maintaining the repository and represent it in the face of other contributors and open source community members - no, you did not. Maintainer is a part of a project.. @indrora After reading said CoC I think, that those very wide \"examples\" of positive and especially negative behavior do not really help, it can be spun in too many ways. I do not think it's worth incorporating that into project.\nTo clarify: I'm not criticizing you, just responding to you since you're the one provided said changelog.. If interpretation is totally up to maintainers, I honestly do not understand the value of it outside of \"we'll copy-paste that template that uses a long-winded and not very concise language to tell everyone to not behave like jerks in the eyes of the community\".. ",
    "ckknight": "Ah, you're right. Thanks @phpnode . Ah, I see that was closed inappropriately, which is why I didn't see the issue when I went looking for it.. ",
    "botfap": "What version will it be?. ",
    "SRGOM": "@kittens . Can you social justice warriors stop using (and hence promoting) this platform owned by a major ICE collaborator? Remember just like bad news is good news in show biz, any users and discussions on githib are (or will be in 4 momths) good news for MS. Only you enlightened people can kill Microsoft and consequently ICE in one fell swoop by altogether stopping using github. also somebody pointes out that except launch pad all other major git hosta are equally tainted- so id suggest using that as the signature list or whatever drama you will do next. . @Sieabah have you heard the phraee- will somebody please think of the children? That's it. Benevolent @krainbiltgreene is just thinking of the children [traffickers]. . @robbyoconnor did we just say the exact same thing? \n@benwiley4000 the image you posted is making me wonder if you have yet acted on @evocateur's mirror suggestion yet. . ",
    "darthtrevino": "Can any other maintainer weigh in on this?. I see these as two separate issues. If the community and the maintainers want to use a modified MIT license, that is fully within their right. However, Jamie's behavior was plainly abusive and in violation of the CoC.. Ethics aren't silly, let's not trivialize them. Software engineers at VW who were asked by their management to implement defeat devices were held criminally liable for poor ethical decisions. \n. Of course they're different - I'm pointing out that pooh-poohing \"ethical concerns\" as silly nonsense is is trollish.. ",
    "nafg": "What about when police arrest parents? Also are you advocating for ICE not to arrest illegal immigrants, or to detain their children with them?. ",
    "nic-hartley": "@lerna @evocateur I propose going through the recent issues and locking all of the ones related to this license change debacle (including this one!), if you're trying to prevent political arguments. If you'd like I can add a list of all the ones I see, or submit a separate issue.. I'm genuinely surprised no one mentioned (IMO, at least) the only definite CoC violations that Jamie committed: Repeatedly calling every employee of multiple huge companies racist (I mean that literally and directly, not just putting them on a list here, and I distinctly remember at least one other issue with the word 'racist' in the title, though I can't find it) because of who they work for. That doesn't just violate this repo's CoC, it also violates the GitHub ToS. Whether that warrants him being removed from this repo is up for debate, but I wanted to let people know that it wasn't just this license change and the rampant toxicity of closing dissenting issues immediately with no reason.. While I disagree with the random personal attacks against the creator of this issue, I do agree that a shorter CoC would be better. The odds of anyone reading through a document decrease the longer it gets, and frankly, you could do just as much with a bullet-point list of things that are explicitly defined as against the CoC and a couple sentences explaining that the maintainers will be judging subjectively, on a case-by-case basis, and looking at the spirit of the CoC, not the letter. Maybe even have a bullet that explicitly forbids trying to argue the letter of the CoC in an appeal (e.g. the harassment example that @indrora brought up, which I've seen at least twice on other areas). It's more effort on everyone's part, yes, because maintainers can't point to section 3, subsection 4, paragraph 1 and ban and contributors can't really be certain if certain hot-button issues will get them banned, but if we all do our best to be reasonable adults and hold others to that standard as well then it's a lot less likely to have people causing issues because they totally did technically stop.\nYMMV, though. I'm new to this community, and while I do have some experience moderating several (relatively large; on the order of thousands of members) communities, every one is different, and what works best for one may not work at all for another. I'm not trying to say \"this is definitely the best\", just proposing an idea which is, in my experience, easier in the long run than what's proposed here.\nTo be clear -- I'm not saying there should be no moderation. Just that we shouldn't limit moderation to specifically what's disallowed in a page of (quasi?) legalese.. @Sieabah Again, a fundamental assumption of my idea is that we're all reasonable adults. If someone decides to abuse their power to make something a clubhouse for their friends, especially on a project with as many contributors as this, that's neither reasonable nor mature. No, it's not secure against abuse by moderators; it's very intentionally omitting that. If your moderators are really intent on abusing their power, they'll abuse it either way. Case in point, Jamie, who abused his status in this repo to (at least attempt to) dismiss all dissent. A long CoC doesn't prevent that; all it does is make it harder for normal people to understand what's acceptable and what's not in a community.. @benjamingr I think I phrased my original comment badly. That first paragraph has dozens of words for the same thing: being a dick about some specific characteristic.\nThat paragraph is actually a good example, so let me rewrite it to fit with my idea of keeping it simpler:\n\nTo keep things open and welcoming, every contributor and maintainer promises to make participating in our project and community harassment-free for everyone. Everyone.\n\nThere's a lot less noise about specifically what characteristics aren't OK to judge on, no room for loopholes about \"well I was judging based on testicle size, and it just happens to correlate with gender, but that's not my fault\" (again, a real excuse, and one of the ones that made me take a permanent break from moderation), and it still gets the same message across. It's also a lot easier to read, at least IMO, and it doesn't remind me of EULAs or ToSes -- i.e. legal documents that you typically skip over and just click 'I accept'. \nI think I phrased it badly in my original comment. My issue isn't with the overall length -- I mean, it's barely over a page long -- but how long it takes the proposed CoC to get its whole point across. There's definitely a word for that, but I'm completely blanking on it.\nAs for the rest of it, a lot of it is the same. I'm wholeheartedly for the ideas in it; I just don't like how they're expressed from a practical point of view. To cherrypick one other paragraph:\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\nCompare that to:\n\nProject maintainers can and will remove or edit any contribution that goes against this Code of Conduct. They also can and will ban any contributor, even long-standing ones, for violating it.\n\nHopefully that gets across what I mean, despite being a rough shortening that could use a lot of polish.\nAnyway, to wrap up my ironically long point about length: Using fewer words is better. The proposed CoC uses too many.\nI've said my piece on it, though, and I feel like if we keep talking about this we're both gonna repeat the same things over and over. Agree to disagree?. @benjamingr ...okay, at the risk of coming across as incredibly condescending, let me try to lay it out as though you're a five-year-old. (albeit with bigger words, and badly, because I suck at talking to kids)\nFor reference -- I've done a bit of moderation; I wouldn't really call it a \"background\", though. My background is very much in coding, and I'm the world's biggest fan of KISS everywhere. Also, just for fun, every example I'm gonna mention is a real person I've met over the course of trying to moderate, either in an official capacity or as a random high-rep user on Stack Exchange, and giving up when I realized I hate people. So much.\nIn every community, there are two groups I like to call \"trolls\" -- the people who know what they're doing is against the rules and just want to get other people angry -- and \"dicks\" -- people who genuinely believe they're right, but are equally genuinely not the type of person you're looking for in the community you're trying to build. And, yes, there are people who don't belong for every community. Trying to make a community welcoming to everyone is admirable, but impossible. In lerma's case, it seems pretty clear that we don't want to include anyone who honestly and openly believes women shouldn't code, even if they're in any other situation neither sexist nor mean. The names aren't perfect (the dicks aren't even close to always being dicks in the normal sense) but I've been using them for so long I'll confuse myself if I try to change right now.  \nThe point of a CoC is to specify two things: who the dicks and trolls are in this community (albeit by action, not by name, unless you're wingdings) and what happens to them. To use my previous example, that means the lerna CoC might have a bit like:\n\nJudging someone's contributions for anything but the contribution itself, and especially any irrelevant characteristics of the author like gender or race, is not okay. Even if you're just joking. If you do that, expect anything from a deleted comment to a permaban, depending on how bad it was and how often you do it. \n\nA few key differences from the same point in the proposed CoC:\n\nIt's a lot easier to read. There's no legal tone, no long list of explicitly protected characteristics, and it mostly limits itself to small words. \nThe list of characteristics is explicitly not complete (\"any irrelevant characteristics, including\" as opposed to just listing then out)\nIt explicitly mentions jokes as not okay. Frankly, I was surprised to see them never mentioned even once; that's a really common point of contention. Also, that might not be accurate, but I'm trying to give an example, not write the new CoC. \nIt mentions the specific possible consequences right next to it and the primary factors used to decide which consequence is chosen. In this case it's really broad; if someone's autocorrect writes in a slur where they meant a normal word, that's probably nbd, but someone constantly threatening black contributors, that's emphatically not. It'd be reasonable to break this sentence up further, but this is running pretty long as-is. \n\nI don't think the CoC is prone to trolling and reassessment. Every CoC will eventually be changed, and trolls will always be there. I think it handles trolls badly by giving them leverage to argue points that really shouldn't be arguable, and I don't like that it tries to be one CoC for a wide variety of communities. I'd rather read a hundred short, simple CoCs -- and judge based on that whether I'd be a good fit for the community, which doesn't really require memorizing it -- than a hundred long, possibly slightly varied as disputes arose and clarifications were made, CoC. Even worse if the CoC is never changed, and instead all that context ends up rotting basically invisibly on Meta-- uh, I mean, in the moderation team's discussions. I want something that's a quick, easy-to-read document to inform me as to what's welcome and what isn't, and if that means I'm not welcome, so be it. I might be sad or disappointed, but I'm a reasonable person, and I understand that no one is welcome everywhere.\nI hope that explains my position. I offered to agree to disagree because it seems like you just have the opposite stance on the last bit, and frankly, my choices there aren't based on logic. They're based on me having read too many legalese CoCs and being tired of it. It's perfectly reasonable to disagree, and I'm not going to be able to convince you that you're wrong and I'm right, because that's just an opinion, and they don't work like that. \nAnyway, I hope that explains my view, because I made the mistake of typing this all out on mobile and my thumbs are cramping up something fierce. There's a couple more things to say, but neither is a deal breaker, just more context around this philosophy of mine, so I'll spare my thumbs and leave them unsaid. . @rfree-d \n\nFull attack on this project by the SJWs had started. It's a tarp. [sic]\n\n...what? The \"full attack\", presumably, being the one contributor who had a decent idea, executed it horribly, and when they started being toxic at literally everyone, was justifiably removed and their bad contributions reverted? That doesn't jibe at all with my understanding of an SJW. Could you explain? \nOr just admit you're an SJW in denial, and that randomly insulting large groups of people is counterproductive. But I'd bet you're more eager to insult people and feel like you're contributing than you are to admit any faults of your own. You're probably gonna say I'm in league with the SJWs, or one myself, because clearly no one can disagree with you unless they're irrational and suffering from TBI. I can't wait to see.\n(P.S. Someone ping me when that comment is deleted and I'll remove mine. Or just delete this, too. It's a direct response; it won't make much sense if what it's responding to is deleted.). @Sieabah Ah, I misunderstood then. I apologize. I think I'm too on-edge, so this is gonna be my last comment for a little bit. (Also, the rest of this comment emphatically doesn't apply to you, but I do hope you have fun reading my venting.)\n\n@RuPaulsFagRace I like how you joined about an hour ago -- roughly 30 minutes before your comment -- with an intentionally offensive name just to cherrypick several words out of a sentence, not only removing them from context but also literally changing two words' meanings by changing their grammatical purpose by not taking the whole sentence. You must have a fun life. Let's fix your blatant lies masquerading as errors. This was my actual statement:\n\nThe \"full attack\", presumably, being the one contributor who had a decent idea, executed it horribly, and when they started being toxic at literally everyone, was justifiably removed and their bad contributions reverted?\n\nTo break it down for the illiterate, like you:\n\nThe \"full attack\"\n\nThis is the subject of the sentence. It's the thing the verb is referring to.\n\npresumably\n\nThis is me being a bit of a sarcastic ponce.\n\nbeing the one contributor\n\nContinuing on from before \"presumably\", \"being\" is the verb. Specifically, this part means that the rest of the sentence is going to refer to the claim that the thing referred to as a \"full attack\" is, in actually, just a single, specific (\"the one\") contributor. If you need more explanation, take first grade English.\n\nwho had a decent idea\n\nThis, and the rest of the sentence, specifies what that single specific contributor did. Specifically, a decent idea -- stop innocent children from being separated form their families -- but they...\n\nexecuted it horribly\n\n...which means that though the idea was good, the actual method they chose to implement it -- a license change which, aside from being only barely legal, would have at the absolute minimum completely trashed lerna's reputation as a thing which can be safely used.\n\nand \n\nThis is a thing called a \"conjunction\". It says that the previous thought was a complete thought, and now we're moving on to a separate, but still related, one.\n\nand when they started being toxic at literally everyone, was justifiably removed and their bad contributions reverted?\n\nThis part, which you conveniently ignored because it goes against your frankly embarrassingly bad attempt to be a troll, I leave as an exercise for the reader. Have fun breaking that down. It might take you a half an hour to really understand the whole single layer of meaning there, but I promise, learning to read is worth it!\nAll in all, the sentiment of the sentence was blindingly obvious to anyone who bothered to read instead of picking the first string of words they could reasonable make an irrational, hateful statement about, whether or not the meaning of that string was even relevant to the original sentence.. ",
    "webOS101": "Thank you.. ",
    "yonjah": "@evocateur I can see the case for this being reverted. \nBut why would any individual developer should be blamed for a pull request that was approved by the rest of the members ?. ",
    "stefanpenner": "@evocateur thank you for the thoughtful handling of the issue. Tricky situation!. ",
    "hach-que": "@Daniel15 The paywall is only if the author opts into it explicitly for the story they are publishing, so this shouldn't be an issue.. ",
    "sarbbottam": "Thank you @evocateur and the lerna team! . ",
    "FuzzOli87": "I'm glad we are taking a fair minded approach to politely discuss whether or not 3 year olds should be taken from their parents. \nThe revert wouldn't be as bad if it hadn't come with this apology to those that are just so baffled that somebody \"politized\" a repo they help maintain. . ",
    "xtuc": "Thanks all :clap: . ",
    "petermikitsh": "To echo others, thank you @evocateur.\nMore broadly, a trend of political activism within OSS is something I feel many, including myself, would prefer not to see. It's been a relatively recent trend to see companies warming up to the open source community and beginning to contribute back too. Many contributors to open source projects also support themselves with professional software careers, and use open source software as part of their work. Situations like today could have shaken the faith in the open source community and the bridge between private enterprises and public software.\nNo doubt a tricky situation, but we can't discount the significance of this decision to support truly free and open software.. ",
    "elizagamedev": "@petermikitsh Open source is inherently political. Dissuading political activism is a political act that favors the status quo.. ",
    "tbredin": "Why can't you just protest the way the system you're protesting wants you to?. Yeah nothing is truly apolitical; \"apolitical\" is almost always just coded language for \"the default politics of the dominant status-quo\". ",
    "Spotrealms": "Thank you for protecting the open source community by rolling back this harmful commit. This community does not need people violating licenses and free speech because it conflicts with their opinions or ideologies. Keep up the good work.. ",
    "Hurtak": "Exactly what parts of code of conduct did James Kyle broke?. ",
    "citypaul": "Thanks for the sanity @evocateur.. ",
    "PrinceMerluza": "Good result overall, this would serve as a precedent for similar issues in the future. Everyone should bookmark this or something.. ",
    "benwiley4000": "I am of the opinion that the license could have been reviewed more but the decision to simply revert to MIT and remove Jamie from the project sends the signal that you will give in to political pressure as long as it comes disguised as centrism.. @robbyoconnor:\n\nI agreed to it on substance, but the problem is that well...go back and read the MIT license. you'll notice it expressly forbids you from doing what happened. You can't do that. This wasn't \"giving in to political pressure\" -- this was reverting to an enforceable license. As it stood -- you basically had code under a license that if challenged in court, would have pretty much been laughed at.\nAlso, Jamie was removed because he violated the Code of Conduct, see #1630. You can't pull stunts like that and get away with it. If I did such a thing and I had a public role, I would hope that I would be held accountable for my actions.\n\nThe notion that forbidding Palantir - a military contracting corporation - from using a piece of software, is a \"personal attack\", is entirely disingenuous.. @robbyoconnor:\n\nRe-read everything I just said.\n\nI did, and I'm referring to the reason stated in the other thread for citing Jamie on a \"code of conduct violation.\". @robbyoconnor:\n\nLegally -- it's not enforceable\nThat amounted to harassment, so yes. Jamie basically went and used the project for the political agenda -- oh and did I mention that you can't relicense code that has already been in use? So again -- NOT ENFORCEABLE\n\nThe license clearly applies to future releases - red herring.. I'm not going to stand idly by while open source community members weep crocodile tears for the welfare of corporations who have been \"personally attacked\" or \"harassed\" for their government contracts. These are entirely avoidable business decisions that should bear consequences when they veer into unjustifiable territory.. Where do we draw the line? Is IBM also the victim of personal attacks when it is called out for its computer assistance to Nazi Germany?. Unclear why the commenter deleted everything they wrote - now I look like I'm talking to myself! \ud83d\ude04. @ThePerminator:\n\n\"Software is inextricably political\" I don't get how it is?\n\nGood question!\nI think open source software is inherently political for a few reasons:\n1. The origins of the free/open source software movement are super political which is apparent if you read any book/reference on the history of it\n2. The technology we build is used to enable new capabilities for the organizations that use it, which means we enable policy enacted by these organizations.\n3. Open source software today is used to power an overwhelming portion of the code run by private companies including those listed in the exclusionary license. By making code available to those organizations, we are enabling them.\n\nJamie should seek help he seems to be dealing with depression or something and is acting out because of it\n\nI have no idea if Jamie deals with depression but it's irrelevant - clearly Jamie was echoing a commonly held political sentiment about ICE. Please don't diminish that by trying to suggest he's mentally unstable.\n. If you're genuinely worried about Jamie you can reach out to him personally on Twitter or elsewhere instead of writing comments to discredit the legitimacy of his actions on GitHub threads.. Please link to whatever new thread you create if you're going to close this - thanks. \ud83d\ude42  @TheLarkInn . Closing the issue under the pretense of opening a new thread and then failing to do so says you just want to make everyone shut up. Please follow through.. I'm suggesting you shouldn't close an issue if it's not resolved or replaced.. Ryan I'm not going to get into a debate about \"civility\" but I'm saying that if Sean wasn't ready to open a discussion thread immediately he shouldn't have closed the thread. Closing the thread was an opportunity to cease the volume of discussion.. @RyanCavanaugh:\n\nYou can lodge this complaint in a good-faith, civil manner. For example: \"Sean, I'd really appreciate it if this thread were left open until the point when the discussion thread is opened up. To me, not having an open issue for this issue means there isn't a place to discuss it, and I feel it's important that there is always an open channel for people to engage in.\n\nI think that would be a fair rewording of my comment...\n\nIt's been eight long hours and not having a constant unstructured discussion going at all times will certainly lead to negative outcomes, such as...\"\n\n\ud83d\ude44 \nAs @hannahhoward mentioned in #1639:\n\nIt is precisely the time when people are paying attention when discussion is necessary, when a wider group of perspectives can be heard.\n. @evocateur Daniel I don't know the details of your thought process, of course, but I do know that numerous threads were opened demanding the reverting of the license as well as the removal of Jamie from the maintainers list - to which you acquiesced, whether you felt pressured to do so or not.\n\nI know this because in https://github.com/lerna/lerna/pull/1633 you directly cited those threads.\nSo on those grounds, while I'll admit your mind is a black box to me, I don't think I made any wild assumptions.\nAs an open source maintainer - I know this is hard, and I can appreciate you've been put in a tough position. I just cannot help thinking this could be handled much differently.. @oicorn you can definitely choose to not use software that has been made available to you for free if you don't like its license. Not familiar with any of the details of your argument concerning the Ruby community so I won't comment on that.. Beautifully stated @mAAdhaTTah.. @robbyoconnor: Sorry you had people email harassing you - that's not something I would have called for in beginning this thread.\nFor the record, the MIT license modification banned use of Lerna by a list of companies. It did not mention use of Lerna by that companies' employees for personal projects that they own. Over and over it's been suggested that the license discriminated against company employees on an individual level, which is untrue.. Calls for \"civility\" and \"cooling down\" are invariably intended to cease discussion, not enhance it. Hannah's right - the time to discuss is now.. I don't think anyone's particularly heated, just excited to talk about this. \ud83d\ude42. @hallister Justin your implication that commenters have no relation to Lerna is unsubstantiated. I for one am actively involved in the ecosystem surrounding Lerna and have been preparing to add Lerna to a project I maintain, although I am now considering alternative options.. Cannot speak for @hannahhoward or others but @TheLarkInn I think where I need additional clarity is:\n Why did you decide to revert the license change despite maintainers having originally been involved in approving it?\n Why did you choose to link Jamie's dismissal with the license change?\n* Why did you open a pull request to remove your own employer (Microsoft) from the restricted list?. @TheLarkInn:\n\nThis decision was made by @evocateur and his resoning is very clear in #1633.\n\nI disagree that this is very clear:\n\"the impact of this change was almost 100% negative, with no appreciable progress toward the ostensible goal aside from rancorous sniping and harmful drama.\"\nThe claims made here are not supported by evidence or arguments.\n\nI did not link Jamie's dismissal. @evocateur explained his reasoning in #1633\n\nThis was the plural \"you\" here, as in \"you, the maintainers.\" In any case, I still don't understand why Jamie's dismissal was linked as part of the same announcement, clearly implying that his dismissal had to do with his introduction of the modified MIT license.\n\nI thought Microsoft was being treated unfairly and wanted to set the story straight.\n\nRespectfully, given the conflict of interest between your role as a maintainer and your role as a Microsoft employee, I think you should have sat out of that decision. It certainly appears to many as though your loyalty to your employer influenced the revert back to the old license.. @evocateur this is transparently absurd. You can't just say \"I'm not influenced by the company who pays me\" and thus make it so. I sometimes laugh at the Twitter refrain of \"tech workers need to be trained in ethics,\" but perhaps it's true.. You explicitly stated on Twitter that changes were being made after speaking with Sean, a Microsoft employee. If this isn't what happened, then what did happen is certainly hard to follow.\nETA: in case it's not clear I have never suggested you were secretly paid; that's not the point.. I am in agreement that Sean does great work for the open source community and I'm really happy about what he's done with webpack. I know he cares a lot and means the best. In fact I'm confident every maintainer involved here cares a lot and had the best intentions.\nThat said, I stand by Hannah's comment above.. @SRGOM:\n\nCan you social justice warriors stop using (and hence promoting) this platform owned by a major ICE collaborator?\n\n. Folks who use terms like \"virtue signaling\" might not realize that is incredibly politically charged.\nAlso it's simply not true that restrictive clauses have no precedent in open source work. Everyone screaming that \"this is no longer open source\" needs to realize that A) we are not beholden to the OSI's definition of open source, and B) there is plenty of precedent with Commons Clause, Fair Source, License Zero, and even the original license for JSON (thanks to Mikeal Rogers [formerly of the Node.js Foundation] for pointing that out on Twitter). (source) (source). @robbyoconnor you and @SRGOM agree, they were being sarcastic....... ",
    "threecity": "Two of the Big 4 financial firms were on the list, I work at one that wasn't. I went to work today and insisted we do what we can to stay off this list. I was ready to fight for it, and I was willing to lose if it came to it, an honorable casualty.\nYou almost started something.. ",
    "anton-bot": "You may want to get offline for a few days, especially staying off the news.. @benwiley4000 You're running low on the benefit of the doubt when it comes to whether you're serious or a troll.\nCool down for a couple of days and come back to discuss this in a more rational manner.. ",
    "ThePerminator": "\"Software is inextricably political\" I don't get how it is?\nJamie should seek help he seems to be dealing with depression or something and is acting out because of it. My intention is not to attack him, I'm worried about him\n:edit: it sounds like you follow the Richard Stallman idea of software then which is fair enough. Personally I prefer to hear from people who don't eat their own toe jam. I am, which is why he has me worried what with his threats \nThe legitimacy of his actions are not a matter of discussion as the maintainers of this project showed he breached the code of conduct and his erratic behaviour has brought a bad reputation to our community. There's no debating that he did the wrong thing. \nAttacking the maintainers and calling them \"cowards\" is also unacceptable, you should be ashamed of yourself. ",
    "RyanCavanaugh": "\nClosing the issue under the pretense of opening a new thread and then failing to do so says you just want to make everyone shut up. Please follow through.\n\n@benwiley4000 Sean's last comment was at 1 AM local time. Please assume good faith, let people sleep, and allow time for reflection. There's nothing to be rushed here and accusing him of \"making everyone shut up\" because he didn't pull an all-nighter to post a proper discussion thread isn't civil.. If someone says they're going to do something, then you should assume they're going to do that thing, and are doing it for earnest reasons. That's what good faith looks like.\nIf someone does something which is facially reasonable, and you accuse them for doing it under false and malicious pretenses, that is bad faith.\nIf Sean says he's going to open a discussion thread, then I trust that that will happen in due time. Whether this issue is open or closed means nothing; it is literally a bit in a database somewhere. Not having an database row with a bit set to zero for some particular thing for 2 days is not evidence that someone is trying to shut you up.. > Please try to be civil @RyanCavanaugh, we're all trying to discuss this and it would be nice if you assumed good faith in everyone.\nPlease do point out where I'm being uncivil. Simply accusing me of it without explaining why is not engaging in a meaningful discussion. Repeated claims that I'm being uncivil without backing it up are not actionable.\n\nClosing the thread was an opportunity to cease the volume of discussion.\n\nAgain, this requires an assumption of false motives.\nI'm a project maintainer and I can tell you that the only reason we use \"closed\" vs \"open\" is for the purposes of tracking which things require which work, not \"Do I want people to comment on this issue?\". Everyone knows how to see closed issues on the tracker, and everyone knows that commenting on closed issues is allowed.\nAlso, this was not your original complaint.\nYou can lodge this complaint in a good-faith, civil manner. For example: \"Sean, I'd really appreciate it if this thread were left open until the point when the discussion thread is opened up. To me, not having an open issue for this issue means there isn't a place to discuss it, and I feel it's important that there is always an open channel for people to engage in. It's been eight long hours and not having a constant unstructured discussion going at all times will certainly lead to negative outcomes, such as...\". ",
    "hannahhoward": "Till then... https://github.com/lerna/lerna/issues/1639. @catcher-in-the-try I disagree. It is relevant for two reasons:\n\n\nThere is significant dissent about the decision to revert the changes in the Licenses and remove Jamie, and an RFC was suggested as a mechanism for discussion, but does not exist. This is a placeholder to simply register there is unaddressed dissent and a promise of a future conversation.\n\n\nThere seems to be a fear of having a discussion while things are \"heated\" -- I would argue that this is a good time to have discussion, as it's the time when there is likely to be the widest set of perspectives and the most voices are likely to be heard.. \"Right now Lerna is a target for people only interested in politics\" -- I am a professional coder. I am interested in code. I am also interested in politics, FWIW. Given the original issue was a political one, it seems particularly important that a wide variety of political perspectives are included. To wait until there is a safe space for those \"only interested in code\" excludes a variety of political views, as the idea that politics and code can and should be separate is itself a political position that many disagree with.\n\n\nI am not personally prepared to say Jamie's removal is a settled issue because the announcement he is being removed does not include any accounting or transparency on what specific violations the maintainers feel occurred. But I agree it is a separate question, except in as much the maintainers announced it in the same PR where they reverted the license change, suggesting they consider the two issues intertwined.. @catcher-in-the-try making a fork suggests you are engaging in this discussion in bad faith, and would simply like people who have a different viewpoint to go away.. @hallister transparency for a decision comes from the people who made the decision. Right now what we have is:\nDespite his numerous (and appreciated) contributions in the past, it has been very clear for quite some time now that he has decided to cease making constructive contributions to the Lerna codebase as well as actively and willfully disregarding the code of conduct that he himself added to the project.\nYou and I can quibble indefinitely over whether the things you posted are actually CoC violations. The point is neither of us are maintainers.. @jwietelmann really amazing point.\nthe fear seems to be if we open ourselves to political discussions how will we get our important professional work done.... but the very idea that open source/FSF is the domain where important money making professional work gets done, not where academic and politically radical weirdos hang out in their spare time, is pretty darn new. And that we're at this point it's the work of fairly intense political advocacy and organizing.. @TheLarkInn\nI wish I could say your response made me feel discussion should be locked on this issue and consider it resolved. Unfortunately, it has the opposite effect for me.\nWhat I can see is:\n1. A change was made to the license that spoke ill of Microsoft was made that @evocateur approved of and merged \n2. You, a Microsoft employee, attempted to remove Microsoft, and only Microsoft, from the list of companies in said change (I didn't know that part)\n3. @evocateur then spoke to you, a Microsoft employee, at length, after which the change was reverted. Speaking to you at length was specifically called in the decision to revert.\nI am going to assume best intention that you genuinely feel calling out Microsoft was unfair, and you genuinely sought changes because of that, and not in an effort to protect your employer. However, as an employee of one of the companies that were called out in the change, clearly the ethical decision would be for you to recuse yourself from discussions of this issue completely. There's really no way in which you're a vaguely objective party -- or even if you are it's pretty reasonable for other people not to perceive you that way.\nMy original issue (an RFC to reconsider the License) is not addressed, and moreover, I honestly suggest the right course for you all is for @TheLarkInn to recuse himself from discussion going forward.\n\nWhen I say \"ethically\" I purely speaking from what I think is right and in terms of staying impartial whenever one is given a governance role. My previous experience to being in tech is on non-profit boards, where for example, you would recuse yourself from any decision that might affect you personally as well as the organization. Obviously there is no legal duty in this case for an informal organization like Lerna *. It's frustrating to engage in good faith and assume best intent of others, and get accused of, in the last several comments: silencing, virtue signaling, abusing ethics to support an agenda, and engaging only to insure I'm on the right side of history (whatever that means), attempting to make an echo chamber, etc.\n\nI stated my own personal view of the ethical way to proceed most likely to maintain the trust of the community. I specifically posited it as a suggestion. Perhaps ethics is the wrong word -- maybe I mean \"best practice\". If it sounded judgemental I'm sorry.\nThe echo chamber accusation sounds seems uniquely weird given this thread is 55 comments worth of multiple perspectives and disagreement.  I personally don't think it's a trash fire, but YMMV. It's specifically the kind of discussion I feel is needed, with people having to think about these questions discuss and disagree.\n. ",
    "oicorn": "First off, you don't need to assume good faith where there is none. I have seen krainboltgreene attacking people who disagrees with their politics in the Ruby community, including being insanely confrontational on a thread with Satoshi and other japanese contributors who patiently explained multiple times that their politics and political orthodoxy does not match the USA's. I've seen him openly insulting both the Ruby community members and major contributors on Twitter. Your decisions should be made based on actual contributors to this project, not slacktivists showing up to dump their two cents, pressure and harass you and then leave. I see you describe yourself as matching Jaime's politics and on that topic you're seeing the true nature of some of these people who share your opinions and how they react when they don't get what they want. But I digress.\nWith regards to the discussion. If open source is inherently political then whose politics determine what politics make it into the repo? What if there is a contributor who wrote 95% of the codebase who is right wing, but 100 contributors who wrote 5% of the codebase are left wing? Do the people who contributed 5% of the project vote him off the island in order to push their own politics into the codebase of the repo? When they find out he is pushing his own politics into the software, do they remove his right to use 5% of the code, forcing him to refactor and rebase their contributions out of the codebase?\nThis is all unprofessional nonsense. Developers create things to be used by the masses, which in turn get used by all sorts of people and companies. I'm sure for every 1,000 people on Earth using software there are murders, thieves, adulterers and every moral failing on Earth. But you are not a criminal justice system or a church priest and it's not your job to reckon with what you deem to be moral failings. And the moment you decide you're going to start acting as judge jury and executioner for whatever political cause or moral failing you've cherrypicked, there are other people working on similar projects (and your project) who are going to disagree with you. So you schism the community between people who are on your side and people who aren't, and you make it weaker and its goals harder to achieve. Nor did you achieve your own goals, you just made people think you're a jerk. This is why politics don't belong in professional settings. Oh and by the way your own personal politics in the USA don't match other people's politics across the pond. As I mentioned above, I've seen Rubyists in Japan extremely frustrated by USA contributors trying to cram their politics down their throats.. Imagine being proud of being a jerk to Japanese people and making westerners look awful because you can't handle people in Japan not wanting to cram your ultra-left USA politics into their open source project. Nowhere in my comments did I mention about patronage of OSS, that's a whole separate can of worms which makes this stuff even more ridiculous.. ",
    "csidell-playq": "Code can be political, licenses are not. A political license is in itself not open source so there is no point to discuss it further.\nJust to reiterate. There is absolutely no point to discuss a politically charged license. None.\nEdit: Just to cover my bases, politically neutral isn't the same thing as being political.. ",
    "robbyoconnor": "First off -- not a lawyer.\nSecondly -- allow me to be publicly and unequivocally state that I am in no way supporting ICE or what they're doing...I am however in opposition to the methods that were used here. The license was half-baked and to top it off...I was personally emailed and had claims levied that l that I somehow support ICE because I don't support how this was executed...there are better, more thought-out ways to do this. If you truly want to make this happen, do it in a way that will actually hold up if challenged...not to mention that unless you contacted every single person who made a contribution, I'm fairly certain you can't change a license in this manner.\nThe guy emailing me seemed rather angry -- rather than doing what James Kyle and the guy who was emailing me did -- actually lobby with the leadership, not developers. Stop harassing people and actually try to change things -- and contact people who actually have the power to make such changes. You can't assume just because someone works for a company that they agree with the contracts the companies enter into.. \nOn 08/31/2018 12:13 AM, Ben Wiley wrote:\n\n@robbyoconnor https://github.com/robbyoconnor: Sorry you had people\nemail harassing you - that's not something I would have called for in\nbeginning this thread.\nApparently in opposing this specific action in the way it played out --\nI support ICE and everything they're doing? Rather than do things like\nthis, actually organize and thoughtfully do something. Don't harass\ndevelopers, and definitely don't harass people who didn't enter into the\ncontracts.\nFor the record, the MIT license modification banned use of Lerna by a\nlist of /companies/. It did not mention use of Lerna by that\ncompanies' employees for personal projects that they own. Over and\nover it's been suggested that the license discriminated against\ncompany employees on an individual level, which is untrue.\nThe problem is that it doesn't spell out enough. It was so half-baked.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/lerna/lerna/issues/1635#issuecomment-417547326,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AABaMPoNU7zorPfu64oF4b_vnBiHxU98ks5uWLfwgaJpZM4WSyfa.\n\n\n. Also @benwiley4000 with regards to me deleting my comments, apologies for that -- I realized some of my arguments were not legally sound -- not a lawyer -- so sorry about that. I tend to not leave things that I said that might not be legally sound. . This whole thing has turned into a tire fire. \"If you don't support us entirely, you're against our cause\" is the most toxic thing ever. In my view, this hurts lerna's reputation. James Kyle's behavior is absolutely disgusting and I support his removal from this project. I'd also support levying a complaint with GitHub since he definitely violating their TOS, but I am not going to do that myself, but I definitely encourage those who were targeted to do so. \nI do support what was initially done, what needs to happen is that the license is crafted in a way that spells out everything. Make sure that it can't be challenged as being ambiguous. Ambiguity is your enemy here. I am also rather distressed that I was personally emailed and harassed and accused of supporting the disgusting policies of ICE. ICE needs to go and it can't be gone soon enough. \nRather than being toxic -- which doesn't advance your cause -- it hurts your credibility because nobody wants to listen to you, consider trying to lobby the companies. I wish people would learn that the kind of stuff James Kyle pulled is absolutely disgusting and hurts the cause, which I support...it was just botched epically. . Also @evocateur and the other maintainers -- don't let this take an emotional toll on you -- there are people who do see why it happened the way it did. I'm rational and capable of seeing that what was there initially was horribly botched. . Also, one other thing: Microsoft owns GitHub -- maybe make the change after moving to something like GitLab :thinking: which isn't owned by a company you explicitly excluded in your license... . @hannahhoward -- I'm regretting ever even entering this discussion as it's just caused me grief and emotional distress. I can't even imagine how @evocateur is feeling right now -- he has my support 100% -- some of us are rational. Most aren't necessarily against what happened, but HOW it happened. Even still, GitHub would be in their right to terminate James' account since he definitely violated the GitHub TOS. Bullying and harassment is not how you accomplish things. This is wrong and just horrible. I know there are others who got a similar email to the one I received and if you are feeling any distress, you have  my sympathies and such. This is a dumpster fire right now. . With the exception of a few trolls -- we all agree mostly...with a few people that have some conflicts of interest but I don't feel that they should be excluded from the discussion because of those. . @SRGOM:\n\nCan you social justice warriors stop using (and hence promoting) this platform owned by a major ICE collaborator?\n\nYou really wanna stick it to Microsoft? Delete your GitHub account. Better yet -- move the repository off of GitHub! They're soon going to be its owner. . The \"you're either with us entirely or you're against us\" is disgusting. There's also this. I got a similar message from the same Ryan White guy. Stop this behavior. Grow up. Wanting a better solution doesn't mean we're in favor of what ICE is doing. This change was slacktivism at its finest. Wanna really stick it to MS, get off of GitHub. Delete your accounts now, Microsoft is going to be the owner of GitHub. It was symbolic at best, and even that was kind of laughable. If you don't delete your GitHub and are still trying to argue that this change being reverted is somehow endorsing what ICE is doing, guess what -- so does having a GitHub account if you're trying to use that argument, your credibility was just shattered. . Also -- if you use Windows -- might I suggest not using it anymore? :arrow_down: :microphone: :clap: :clap: . @SRGOM -- no I said for people who are against the change being reverted to look at the fact that they are using MS products -- which makes them hypocrites. If you want to boycott Microsoft, maybe don't use their products -- or even better get off of GitHub. I'm not even sure what you said -- to be honest I stopped reading it after the first sentence. . @SRGOM -- So for all this grandstanding you're doing -- why not delete your GitHub account...seriously -- MS will own GitHub soon. Also -- change your OS from Windows -- if you use that.... > @robbyoconnor you and @SRGOM agree, they were being sarcastic......\nOh Jesus nevermind -- I'm an idiot I guess :joy: -- apologies @SRGOM :) . Great job -- now grow up and act like an adult. . ",
    "polterguy": "For the record, even though I applaud developers with a conscience, the project is licensed as MIT, which permits forking the project, and distributing it under another license, which allows for excluding any government agencies, and/or individuals.\nIf a bunch of its developers are determined to not work for government agencies, this (obviously) is the solution .... ",
    "indrora": "Surface level differences between 1.0 and 1.4:\n\nAdded: Scope declaration\nAdded: Examples of positive, model behavior\nExpanded: Examples of negative behavior\nExpanded: responsibilities of maintainers: Clarification of (un)acceptable behavior and rectification.\nClarified: reporting process (suggests email address as opposed to public comment)\nAdded: Abuse of power/lack of good-faith enforcement by maintainers has repercussion.. @dpyro that was my intent with this comment. \n\nIt's not a perfect diff, more of a changelog. You should read both side by side and compare. . @KienHui An update to the language is useful (scope definition lets maintainers take off their maintainer hat and speak with their own voice, not the voice of the project, clarification of process and rectification, plus maintainer good-faith language). If 1.0 was being suggested, I'd have arguments against it. 1.4 cleans up a lot of issues with CoCs in general w/r/t scope specifically. \n@siziyman unfortunately, these terms are rather loose for a good reason. For a legal example of the issue, check out 378 U.S. at 197 (Stewart, J., concurring) , a US case on obscenity, which helped bring the phrase \"I'll know it when I see it\" to popular use. Another form of this is the Elephant Test: It's hard to describe, but you can point it out. \nYou will always find people who will find edge cases to work around the letter of the law and be untouchable because they haven't broken the rules at worst, and at best you get...\n\nLet's say we define a specific action as \"harassment\" -- for some arbitrary level of specificity (e.g. \"harassment is talking to someone after they asked to not be talked to\"). Someone will inevitably say \"But I did stop talking to them!\" -- after sending them a thousand messages, plus sending terrible things to their friends and family, etc. Here, they have not violated the letter of the law (they stopped contact after being asked to stop) but still did something which is, under various reasonings, childish and a form of harassment. Yet, there's a good argument to be made that this  rather defeats the purpose (\"spirit\") of the law.\nDoes this sort of thing happen? Well, yeah. Using more ambiguous words and handling them on a case-by-case basis makes them easier.\nFor small, one-or-two person projects? A CoC is overkill: Friends being friends will regulate a lot. For bigger projects like this? It helps the dust settle after a scuffle like this a little more cleanly and with fewer bystanders taken out along the way. It was in place, it was used (even within the retroactive scope of the new one) cleanly, and the fallout now is settling much faster than it would have without. . @jakeNiemiec see \"when an individual is representing the project or its community\" typically means they take the time to act on behalf of the project. \nWithout details (that is, since the tweets have vanished into the ether, the content of the tweets) there's no good way to have a good conclusion drawn. There is an expectation that one's own personal twitter speaks for themselves -- However it appears that there were other outstanding issues, but again without knowing the contents of those tweets, there's no good way to know what language that individual was using (personally, I think tweets should be immutable after some time, but that's just me)\nIf anything, I would suggest up to @CoralineAda that a clarification be made on what \"representing the project or community\" looks like, changing the wording to something closer to\n\n[...] applies both within project owned spaces (e.g.bug trackers, mailing lists, forums, etc.) and some publicly facing spaces when acting in the name of the project (i.e. project social media accounts, personal statements made on behalf of the project). \nBenefit of the doubt should be given to personal, non project-run public interactions. individual contributors are responsible for their interactions in public spaces and their opinions may not be those of the project or community: Disagreement or controversial opinion is not a violation of these standards, harassment of an individual or persons in the name of the project may be a factor in a violation of community standards. \n\nIs it wordy? Yep. It's not perfect and I suspect this isn't the place to hash out that specific detail. I think the response from the Node team is not the greatest but it appears that the person in question had become an issue both outside the project and within. \nIf someone wants to be a less than stellar human being on their own time, so be it. If they're going to say inflammatory things about someone and have \"Developer on libyoyo\" in their social media profile, that gets into a gray area, and may be considered a factor among several.. As an outsider (I've only ever just used Lerna once, ended up coming by because I smelled fire yesterday)\nThis thread, from the outside, is a train wreck. It was opened -- with good intentions -- by someone external, when it should have been opened by someone in the team. It has turned into a means for @TheLarkInn to be beaten with; at best, this is poor form, at worst, it's harassing the man. \nI agree with @evocateur w/r/t baseless canard. I'd honestly hope for better out of the free software community, but I guess the 90s never ended, and it is easier to accuse someone of horrible things than to give them benefit of the doubt. If the Lerna team members think he should recuse himself then that is their choice, but a lynch mob here serves no purpose other than to harass him. \nI'm going to suggest that this thread be restricted to members of the Lerna team; shy of that, closing this thread and opening one which is restricted to Lerna team members. I agree transparency is important -- especially in @TheLarkInn 's case. Right now, however, this is an issue for the lerna team to hash out and find a point where they feel it's settled to where the general internet can come and see what has happened, voice their thoughts, and a final choice can be made.. ",
    "bryanedds": "This code of conduct is a Trojan Horse for ideologues like Ada to needlessly inject identity politics into your project. Ada is a well-known anti-white, anti-male, Marxist activist.\nI suggest this as a possible alternative - https://github.com/domgetter/NCoC\nIdentity politics only ever hurts the community in the end. Don't let ideologues get their claws into your community.. @davismj - Is it somehow identity politics to identify someone who is engaging in identity politics? No, as a principled moderate, I refrain from engaging in identity politics because it is racist whether it is used by the left against whites or by the right against non-whites. Horseshoe theory is a thing.\nI've written an article about codes of conduct in general here if you'd like to have a look - https://medium.com/@bryanedds/codes-of-conduct-e49a63de4058\nThe criticism is general, but relevant and documents just a portion of the history how ideologues have used and abused this type of social legislation.\nFor specific criticism of this particular code of conduct, to me it seems obvious - there are no definitions for the terms that it builds itself on. It doesn't define 'harassment', it doesn't define 'hateful / hate', it doesn't define many of its terms. Of course, this is intentional, for that very ambiguity allows it to be selectively enforced against political enemies and never enforced against political allies.\nIf you want to adopt any sort of community code, you had better be damn sure you've taken the time to analyze the intent and practical outcome of it before foisting it upon your users. The people who spread these things are ideologically-possessed and absolutely poisonous to software communities.\nMLK already solved this issue decades ago. He said, \"I have a dream that my four little children will one day live in a nation where they will not be judged by the color of their skin, but by the content of their character.\"\n\"...not be judged by the color of their skin, but by the content of their character.\"\nI say, throw this racist code of conduct garbage in the trash where it belongs. Don't be another of its willing victims.. ",
    "davismj": "@bryanedds You criticized @CoralineAda for \"needlessly [injecting] identity politics into your project\" since she is a \"well-known anti-white, anti-male, Marxist activist,\" which is just identity politics. Why don't you point out the problems with the code of conduct she is advocating, instead?. @dpyro https://gist.github.com/davismj/f9dff8ad56a10145e6040802a3216cd3/revisions\nIt's not straightforward.. ",
    "dpyro": "@CoralineAda Is there an easy diff available for 1.0 vs 1.4?. I'm going to do my best to stay on topic.\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone\n\nWhat is harassment? What can I and can I not declare as harassment? What happens when people of different cultures have different ideas and thresholds of harassment?\n\nregardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\nWhat is the purpose of enumerating these characteristics and only these ones? I notice that political beliefs, if any, is conspicuously missing from this list. I think @nic-hartley's use of \"irrelevant characteristics\" is far more encompassing, easier to interpret, and won't be construed as biased.\n\nExamples of unacceptable behavior by participants include:\n\nThe use of sexualized language or imagery and unwelcome sexual attention or\n  advances\n\n\nThese are vague criteria. One person's creepy is another's person's ideas of a good time. It is one thing to advocate against sexual harassment it involves crossing clear boundaries and is frowned upon by many cultures. However, declaring \"sexualized language or imagery\" as unacceptable behavior is such a subjective and all-encompassing mandate that it must be selectively enforced since anyone can be guilty of it at anytime.\nThis is oppressive. A winking emoji can fall under this category. Whether it does will be determined by those who have the time and interest to spend the resources necessary to do so, regardless of interest (or not) in the project. I believe this is a recipe for a project to be astroturfed.\n\n\nTrolling, insulting/derogatory comments, and personal or political attacks\n\n\nTrolling, insulting, and derogatory must all be sufficiently defined or they will be subject to the same selective enforcement issues that can be mandated by third-parties with no interest in the project or community.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\nWhat happens when a project maintainer gets it wrong?\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community.\n\nWhat constitutes \"representing\" needs to be defined or it will be selectively enforced.\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at [INSERT EMAIL ADDRESS]. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nCan you be kicked off a project solely based on anonymous complaints? What is the threshold of actionable issues?\n\nMy biggest issue here is that this CoC prioritizes punishing certain behaviors instead of providing usable guidelines. If there are no concrete guidelines, then I don't see how this CoC offers value to the community.. ",
    "CoralineAda": "Interpretation and enforcement of a code of conduct are the responsibilities of project maintainers. They already have the power to manage their communities; a code of conduct spells out the values for the community to follow and communicates and codifies an enforcement procedure. \nIt does not grant power to project maintainers that they didn't already have.. ",
    "KienHui": "Given how the Licensing change fell out, it seems to me that the CoC is working just fine already.. ",
    "vtesterlwg": "I completely agree that a long, unreadable code of conduct is pointless as if people don't read it it's just used by the maintainers to justify what decisions will be made anyway. It's better to have a code of conduct that accurately and concisely summarizes what restrictions you want to place on the community for the purposes of streamlining the project, and keeping it that way so you don't get much debate. Moderators should, and will, make whatever decisions they'll make anyway, and the community may or may not agree with them. There's no point in codifying a long and complex code when it won't - and shouldn't - be followed anyway, as no long enough code can accurately summarize and/or detail all the complexities of human interaction and code issues that may come up in an open source debate.. Overreliance on CoCs leads to the exact kinds of situations described before in node, and IMO should be avoided for project maintainers making specific decisions as tuned to the situation. I haven't yet seen one where a lacking CoC or a 'stronger' CoC has actually made a difference other than making people think they've improved something by codifying their beliefs anyway.. ",
    "richseviora": "I read through the proposed CoC and it reads concise and direct to me (relative to size/scope/complexity of subject matter). I strongly support CoCs in general because they establish common expectations of what behaviour in the project space should look like and I think implementing this one is a Good Idea. \nDisclosure or whatever: \n I do not work for or contract with any of the organizations listed in the reverted blacklist, nor have I in the past. \n I disagreed (rather strongly) with James Kyle's decision to amend the license and was rather relieved when it was reverted. \n I don't know any of the maintainers + Coraline in person, but follow them all on Twitter. \n I'm not a contributor, I just use it with one of my clients.. Hey so I don't work at any of the companies involved or know any of the maintainers personally so I don't have any potential ethical dilemmas. Here's my thoughts:\nThe key part of the whole conflict of interest idea is that you have to be making a decision on behalf of a 3rd party, and the conflict would give rise to the appearance that you're being unduly influenced by this secondary consideration. I believe @evocateur made the decision. @TheLarkInn had no conflict of interest, he's providing his input as a major stakeholder. As long as we all understand his role (and I think we do) then I think we'd be far richer for his input than not.\nThis also makes the assumption that the rash & unannounced decision to change the license was in the project's best interest, where one could easily argue that it was not for all the obvious reasons (community split, legal viability, no community feedback solicited, etc).\nGenerally the notion that someone's involvement with an affected organization means that they can't speak from their expertise would cause all sorts of problems if it were applied to government. As much as lobbyists have (deservedly) earned a bad reputation, they also provide vital guidance to governments so they can make decisions that aren't destructive. \nSo let's get everyone's best opinions in here, and then let the maintainers make their decision.. > That's not a conflict of interest. Judges don't recuse because of what they believe; they recuse themselves because they have a material interest in the result of the ruling, e.g. they've invested stocks in the companies involved. You're correct that nobody is independent, because no one is objective, but conflicts of interest and lack of independence are not synonymous.\nI think this is mostly not accurate. As a maintainer Jamie had the ability to make changes and to persuade the other maintainers. When he made this decision to pursue goals that are unrelated to the project's unstated goal (make multi-package repos easy) he was arguably engaged in his own conflict of interest. \nThat said if he was the only maintainer and decided that he was changing the project's goals, then he could not be in a conflict of interest because his goals and the project's were always aligned.. @hannahhoward in case it wasn't clear, while I disagree with your recommendation I'm confident it was made with the best of intentions and the goal of facilitating the best solution for all. :) . ",
    "benjamingr": "A code of conduct is just a \"here is how you're expected to communicate\".\nOf course we are all reasonable adults but that doesn't mean we all share the same background or know exactly the same stuff. There is a lot of miscommunication in open source (between said reasonable adults) that causes conflict and problems.\nA code of conduct is just a way to say \"here is what we expect\" (nothing controversial there) so people can focus on making great software.\nWe've had good experience in Node.js with the updated CoC and a good (strict) moderation policy. We've made a lot of potentially controversial changes in the last year and have had very few incidents. As a project that traditionally struggled with this sort of thing I think it's working out so far.\nI recommend you update to the latest version.\n\n@nic-hartley the way I've traditionally looked at it is this. The first paragraph describes what the standards for communication are:\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\nWhich is basically \"keep exclusionary stuff out of the project, be respectful and remember we're all human\" but explicitly spelt out because different cultures see things differently.\nThen it gives examples of good and bad behaviour. The next paragraphs is about enforcements:\n\nWho enforces the CoC? (Our Responsibilities)\nWhere does it apply? (Scope)\nWho do I report it to? (Enforcement)\n\nI do not expect people to read the CoC very often - it should be obvious that discriminating based on age or religion isn't cool - but I'd expect them to refer to it when uncertain or when/if they want to report something.. @jakeNiemiec note that all that happened before the moderation team and the new moderation policy. These sort of things weren't rare in the past but they have become rarer.\nIf anything, I'd say that just like in lerna the CoC works.\n. @nic-hartley \n\nI've said my piece on it, though, and I feel like if we keep talking about this we're both gonna repeat the same things over and over. Agree to disagree?\n\nWait, I'm still learning - I've explained how I understand the current CoC and you stated you don't like the fact you believe it is prone to trolling and misinterpretation. Is that a fair assessment?\nA logical next step would be to propose an alternative or write down what you don't like in each part of the CoC so it can be discussed. \nIt sounds like you have a background in moderation and you disagree with the way I see things - so I'm definitely not in the \"agree to disagree\" camp, I want to hear you out.. ",
    "jakeNiemiec": "\n@benjamingr We've had good experience in Node.js with the updated CoC and a good (strict) moderation policy.\n\nRemember when the board had to issue a statement emphasizing the expectation of of equal CoC enforcement amongst leadership? https://github.com/nodejs/node/issues/15011\nI think this CoC *is* good, until this line:\n\n\"This Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community.\"\n\nA year ago in the Node community: Group-A used this clause to push Person B out of a leadership role for a retweet and other things that were never disclosed to the public. Group-B retaliated by reporting Person-A for year-old tweets (I wanted to leave names and groups out). There are other mystery violations that remain unaddressed & undisclosed eg:  \"Discuss alleged misconduct of our community manager\" https://github.com/nodejs/board/issues/62  \nIf you adopt this, make sure to clarify what public places & individuals are \"in-scope\" for the project. It would have been helpful for Node back then. \n(footnote: @nic-hartley The contributor-covenant is very popular, thus you are likely to have read it already. Personally, I would prefer to read one popular, long CoC just once opposed to reading a bunch of shorter CoCs.). ",
    "CamBurris": "--independent is an argument for lerna init, you don't use the argument each time you publish. If you already created a lerna.json using lerna init without the --independent flag, you can manually modify the version in lerna.json to be the string independent to enable independent mode. . I believe this is an issue with Artifactory not supporting all npm features. Lerna is running npm access ls-packages to verify the current user has access to publish packages to the registry. It seems like this command isn't supported in Artifactory. There are a couple of flags to lerna publish you can try to bypass this issue. There is a --no-verify-access flag, that should skip the call to npm access. There is also a --no-verify-registry flag. I believe the --no-verify-access flag should get you past this error.. https://github.com/lerna/lerna/blob/37642a066ed0243d6312240c49c635c3431a989b/commands/publish/lib/verify-npm-package-access.js#L40-L53\nIt seems there is already code that is suppose to handle private registries and not error out here. The code is explicitly looking for HTTP 500 or ECONNREFUSED from the server. Since Artifcatory returns a 404 it doesn't pass the exception check and thus errors out. Adding a check for E404 here should work.. Yarn already has excellent support for multiple packages with workspaces. . What version of rollup are you using? I had this same issue but since rollup/rollup#2410 was merged it has been working. Try updating to the latest release of rollup and see if that resolves the issue.. 0.63.5 isn't the latest version of rollup. They are currently on 0.66.4. Watchers work for me on 0.66.1.. ",
    "dotansimha": "@evocateur I'm trying to publish a canary version for all packages under the workspace (regardless of the changes in the packages). It worked in v2, but since v3 it's no longer works.... Thanks! :D . Thanks @diervo ! we really needs it!! . For me it happens when any registry is set, even the public one.\nThis workaround worked for me:\nyarn logout\nnpm logout\nnpm login\n\nDon't login to Yarn.\n\nAnd then run lerna with npm or npx and not with yarn. . @fenduru no, all are failing... happens on my local env as well. . ",
    "shushugah": "My simple question, given the lack of due discussion for the previously MIT license modification, would the maintainers be open to a new PR with legally more robust language along with input from the community?\nI definitely think the previous process was rushed, but the core idea is worth exploring. . FWIW @jwietelmann is right that Lerna is getting much attention, eg see this Vice motherboard news article. I did not know about this project myself till I saw the debate. \nhttps://motherboard.vice.com/en_us/article/8xbynx/major-open-source-project-revokes-access-to-companies-that-work-with-ice. ",
    "nls0": "If you want to restrict who can use lerna, then lerna can no longer be called free; it will be proprietary. Please let everyone know with advance notice so they can make preparations to move away from it if it's going to become proprietary software.. https://github.com/palantir/tslint/issues/4132\nhttps://github.com/palantir/tslint/issues/4141\nhttps://github.com/palantir/blueprint/issues/2870\nhttps://github.com/palantir/blueprint/issues/2876\nhttps://github.com/palantir/blueprint/issues/2877\nWhy did he keep opening so many issues, harassing other people and why did he repeatedly refer to these free software projects that many people have contributed to as \"my tools\"? Is all the code his property? Are all the contributions by everyone else worthless?\n\"I kinda hope they do try to keep using my tools though\" - From the motherboard article, emphasis added\n\"Also, stop using my tools (such as Babel)\" - from /palantir/tslint/issues/4132\nBabel is his property as well? Can someone help my understand why these are his property? Thanks.. @mAAdhaTTah Those questions are relevant to the thread. Read the title of the thread.\nEdit: Since some people like @mAAdhaTTah don't seem to understand the relevance of the questions, here is the relevant part of the title: \"Open an RFC to discuss decision to ... remove Jamie\"\nIf you can't answer the questions, that's answer enough for this thread.. ",
    "jwietelmann": "Re: \"cooling off\" and \"people interested only in politics\"...\nI'm seeing an extremely ill-informed opinion being bandied about that implies the current state of open source is apolitical. FSF was founded on some radically collectivist ideals. OSI on more radically libertarian ones. \"Open source principles\" are what they are because people planted the flag and did the work to make them that way. The reason this project is MIT instead of GPL in the first place is because of decades of ideological debate and changes in community expectations.\nPlanting a different flag and doing a different thing is not more or less political than the status quo. To suggest otherwise is ahistorical nonsense. It's not more political; it's merely more participatory.\nI'm simultaneously intrigued by the effort to change the license and skeptical of what its effects might be. Maybe reverting was a good idea! It would have for sure been more interesting to see the experiment run its course, but I understand the fear to the health of the project that makes someone walk it back.\nOf course this attracted wider attention. Of course people who were otherwise mostly foreign to lerna were intrigued and came running. You were doing something mad and exciting and extremely political. A big project was finally taking an ethical question and putting it front and center and saying \"Yeah, it's time to talk about this.\"\nPost-blowback, you don't wanna be political pioneers anymore. And who does? A) It's hard, and B) that's not how most of us want to spend our OSS time.\nIf you're overwhelmed, frazzled, can't handle being the center of this ethical discussion you started, and just want to be left alone to code now... You could just say so? I mean that completely earnestly. It's okay to get in over your head and ask to be let back out. At least I think so.. ",
    "stupidawesome": "The damage has already been done. If the Lerna project was serious about its future after this trashing of it's credibility, it would strictly prohibit and immediately purge all social justice warriors from it's ranks. . ",
    "dmfay": "@evocateur I know you're dealing with a lot more than you expected right now but I'm afraid that as the maintainer of a project with a decently-sized community it really is your problem. I don't envy you it. I frankly don't know if it's even possible to clear it up completely at this point.\nAt a charitable reading, @TheLarkInn seems to have jumped in feet-first without thinking about what it looks like for a Microsoft employee to get involved in a situation which affects Microsoft's access (particularly given that Microsoft is in fact well known to have an active engagement with ICE, & that the original license change didn't allow for equivocation about legacy systems). To be clear, this is how I think it went down too. I've met Sean and he cares a lot about open-source communities and open-source projects. But there are less charitable readings which are equally plausible from what's publicly known, or even just public on GitHub vs public on Twitter. You know as well as I do that \"big MS puts the screws to open-source project\" is a headline going back years and years, and Sean's involvement in any capacity with this chain of events means you've inadvertently leaned into that old stereotype.. ",
    "lhorie": "Apologies if this is not an appropriate channel to voice opinions about the contents of the hypothetical RFC mentioned in the title of this issue, but assuming it is, I want to voice that I strongly disagree with the idea of applying Jamie's modified MIT license to Lerna. Not because it has anything to do with ICE, but due to the reasons cited here - TL;DR: it would make Lerna fundamentally non-open-source.\nI think that people that want a fundamentally non-open-source licensed monorepo management tool should be prepared to fork Lerna, find maintainers who agree with said non-open-source license, and potentially even pay for its ongoing maintenance, rather than be questioning the decision of the mainline Lerna maintainers (namely, @evocateur who created the PR, as well as @TheLarkInn and @hzoo who approved it). The Lerna maintainers are entirely within their rights to do as they please with Lerna. \nI'd also like to remind everyone involved that an RFC doesn't necessarily mean that dissenters will somehow be able to articulate an overwhelmingly convincing argument and magically overturn the maintainers' decision to retain the unmodified MIT license (or the decision to remove Jamie from the Lerna org). For better or worse, the maintainers are well aware now of the implications of what has transpired and trying to nitpick perceived flaws of logic is, at best, splitting hairs at this point.\nLastly, @evocateur even if there is a deluge of people accusing of you supporting political positions that you do not subscribe to, and that is taking an emotional toll on you, please remember that there are also those of us that understand your position on ICE, on OSS and on being publicly vulnerable. I personally believe your standing by the MIT license was the right move, and I'm not alone in thinking this. Stay strong.. > It's specifically the kind of discussion I feel is needed, with people having to think about these questions discuss and disagree.\n@hannahhoward just because there is dissent is not enough reason for there to be a discussion. RFCs are not meant to be vehicles for discussion for the sake of discussion. What matters is the arguments for or against a change, its pros and cons and determining actionable steps. A secondary point to consider is what has already happened and what arguments have been considered in past decisions. Dissenters will dissent and for many topics there will never be consensus. Discussing endlessly in those cases is not only not fruitful, but distracting as well.\nAs I understand, the arguments for a modified license are:\n\nsupport for the ideology of protesting against ICE, specifically\ndesire for a voice in the decision process\na legitimate desire to use a non-open-source license as a weapon to \"punish the bad guys\" (a view that seemed to be somewhat trollish in nature, from my observations, but I'm putting it here for completeness)\n\nThe arguments for keeping MIT:\n\na custom license is restrictive not only to a blacklist, but also any company with a whitelist OSS license policy (i.e. any company of non-trivial size)\nit potentially sets a dangerous precedent that goes against the ideologies of OSS and FSF\nit isn't an appropriate - let alone effective - vehicle for political protest, given that actually disrupting ICE operations could at worst even delay reuniting children with their parents due to potential disruptions in logistics systems\n\nThings I believe should not be part of the discussions re: license:\n\nwhether maintainers with conflict of interest should recuse themselves from discussion - the two most prolific Lerna contributors (other than Jamie) do not have conflict of interests and they agreed on the current decision. Whether maintainers decisions are influenced by one person or another should be of no consequence if they make a decision on their own free will.\nwhether maintainers with conflict of interests should have recused themselves prior to the decision - an RFC isn't the place to debate the past, but to determined actionable items (if any) for the future\nwhether more voices would change the decision - unless there are different arguments other than the ones I listed above, more commentary at this point is just going to be rehashes of the same ones that were taken into account the first time around.. @krainboltgreene I laid out the factual arguments both pro and against the question of whether Lerna should be MIT or not. I also clearly prefaced my personal opinions as being my opinions. If you're only interested in making ad-hominen arguments, you're not adding to the discussion.\n\nTo be clear, my intention was not to dictate, but to spell out reasons why some forms of commentary are not fruitful in the context of what an RFC is typically designed for. You are more than welcome to make new arguments, if you have them, as long as they are on topic.\nTo that end, I'm going to repeat what I believe is the most important argument to this discussion: if you agree with the tenet that a non-MIT license will have any impact whatsoever on ICE, it follows that doing so may have a negative impact due to its indiscriminate and non-surgical nature. In other words, disrupting ICE operations can delay families from being reunited.\nI don't believe even the most hardcore proponent of the non-MIT license can say in good conscience and good faith that unintended damage to the very cause it purports to serve is not a real possibility, and I think that reason alone should be enough for everyone to support the current decision.. > You laid out opinions. You can't just declare a comment a \"factual argument\" and have it be so.\nYou laid out opinions. You can't just declare a comment to be a \"opinion\" and have it be so. Come on, now.\n\njust because there is dissent is not enough reason for there to be a discussion\nRFCs are not meant to be vehicles for discussion for the sake of discussion.\n\n\"An RFC is authored by engineers and computer scientists in the form of a memorandum describing methods, behaviors, research, or innovations applicable to the working of the Internet and Internet-connected systems. It is submitted either for peer review or to convey new concepts, information\" *\n\"Peer review methods are employed to maintain standards of quality, improve performance, and provide credibility\"**\n\na legitimate desire to use a non-open-source license as a weapon to \"punish the bad guys\"\n\nI'm more than happy to remove this from the argument list if you think it's not one, though I understand it to be the primary motivation behind the original change by Jamie.\n\na custom license is restrictive not only to a blacklist, but also any company with a whitelist OSS license policy (i.e. any company of non-trivial size)\n\nIt's a fact that engineers in my company would not be able to use software with such a license, for example. There are precedents documented elsewhere for React's old license as well.\n\nthe rest\n\nYes, as I said, I prefaced those with \"Things I believe should not be part of the discussion\". Those are my opinions. Even so, as I said, they are motivated by a desire to keep conversation productive, unlike those who are only here to make reddit-esque quips.\nIf I may be blunt, it feels like you're acting in bad faith, and I've no interest in petty bickering. @krainboltgreene \n. > I believe this is exactly why we want an RFC -- to discuss whether this change (or one like it) should be implemented or not\nI agree that this is the intent, but in practice, that's not the impression I got from reading this thread so far. The majority of comments are either trolling or doing passive-aggressive witch hunts (and sadly I'm seeing this behaviour from both sides of the discussion...)\nI'm not sure if there needs to be more clarity in terms of an RFC is typically supposed to look like (given that it is, admittedly, a new process in this specific org), which is why I offered my opinions on what is appropriate. If people disagree, they could potentially look at other orgs' RFC processes to get an idea of how one is structured (React and Ember both have RFC processes that could serve as reference, for example). In any case, I think we would all agree that all commenters should be following the basic rule of thumb of \"if a comment would be inappropriate in a technical discussion, it has no place in an RFC discussion either\".\n\nThe idea is that we can use software and the control over we have over the software we write, one of which is the license of who gets to use it\n\nI understand this intent, but I have not seen anyone address the concerns about what happens with  non-blacklisted companies being unable to use such licensed software. This concern was dismissed as if it were a problem that did not exist, rather than a significant one (especially for something that is so geared towards big company workflows such as Lerna). For example, @evocateur (or whoever is the maintainer at any time)'s employer could disallow him from using a hypothetically non-OSI-compliant Lerna at work. If that was the only reason he was working on Lerna, there's a good chance the project would lose its steward and effectively die. Likewise, I might spend company time to contribute a PR to a MIT-licensed Lerna if I need the fix for work, but I will certainly not know to do so if I'm not allowed to use it due to licensing issues in the first place.\n\nThis assumes that any movement against ICE is inherently bad because it assumes that the short term negative impact would out weigh any long term benefit of having ICE gone\n\nNo, the point is that we can't possibly estimate the impact, both positive and negative. We cannot make assumptions that the positives will outweigh the negatives or vice versa. The argument for a non-OSS license boils down to \"something must be done, this is something, therefore it must be done\". No, it must not. Whatever was the latest heated Javascript-related topic of the week on Hacker News is statistically unlikely to be even remotely close to being an appropriate response to an issue that likely no one here has any real life understanding of, other than what they read on some news site while sipping their coffees.\nIt's especially disingenuous to say this must be done, if the person saying so did not even bother to try to research what other things could have been done instead, or what is being done, even. To illustrate the level of myopia here, there was a PR on Jamie's repo to add Uber to the blacklist, despite the fact that Uber is donating rides and meals to families separated by ICE*.\nFor those who are not familiar with the RFC processes I linked above, there are very important sections that are absent in virtually the entirety of the discourse here: Alternatives, Drawbacks and Unresolved Questions. For all the talk about how now is the best time to discuss, there's surprisingly little content that can be used to fill these sections that are designed to address contentiousness.\n\nit asserts that \"open source\" is fundamentally better than \"not open source.\"\n\nAs I mentioned in an earlier comment, there's already a well established way of running non-OSS software: pay for it. This very discussion is open because the maintainers feel that inclusion of all parties is of utmost importance to the success of this project. They could just tell everyone to go away, or even pull a uws** and they'd be entirely within their rights to do so. Using the privilege of having this forum to argue that the maintainers should adopt a restrictive license is biting the hand that feeds. I think the non-starter here is to suggest that maintainers ought to maintain a project that they themselves may not be able to use under some circumstances.. ",
    "lachlanhunt": "If the Lerna community does decide to adopt a new licence in the future, I would like to encourage you to pick a licence that has been written and reviewed by lawyers.\nRegardless of political opinions, ideologies or agendas, copyright licences written by non-lawyers who are unlikely to fully understand the legal ramifications, or otherwise, of the clauses they include are likely not going to be accepted by the wider community of developers; nor the companies they work for that often have internal policies regarding acceptable open source licences for software they can use.\nThe company I work for, and I can only assume many other companies, are taking a very close look at the licence Jamie wrote to understand the impact upon our own codebases. Lerna just happens to be the most high profile case of it being added, and so far the only case I'm aware of where it got reverted. It also got added to his other repositories and NPM packages, which remain a serious concern.\nI would also strongly advise against attempting to use a copyright licence for political protests against contemporary political issues. Software copyright licences are long-lived documents that can outlive any government-of-the-day that happens to be disrupting or upsetting certain groups of people. It's also likely to be an extremely ineffective, if not completely counter-productive, form of protest that can have potentially far reaching consequences beyond the intended goal, including setting a terrible precedent for the industry.\nToday, we get a list of companies rejected for working with a government agency carrying out extreme right wing policies. Tomorrow, we get another one from another group of people rejecting companies that support left wing policies. Where does it end?\nI urge those in the community advocating for either reinstating the licence or creating a new one in a similar vein to just pause and seriously think about what you're trying to achieve, what you can realistically achieve, and the costs of the way in which you attempt to achieve those goals.. ",
    "termhn": "I want to start by saying that I agree that the license changes, as were initially implemented, were objectively poor and probably unenforceable from a legal perspective, and that it is probably justified to revert at least until a suitable replacement could be drafted and reviewed. What concerns me are a few things, however. First, the sentence from @evocateur in #1633 \n\nDespite the most noble of intentions, it is clear to me now that the impact of this change was almost 100% negative, with no appreciable progress toward the ostensible goal aside from rancorous sniping and harmful drama.\n\nThe very fact that there was a huge amount of drama and publicity around this change signifies that it is important and that it did affect appreciable progress. There was never any delusion, as far as I could tell, by those who supported this change, that this single license change would have ICE quake in their boots, as has been suggested to be the measure of what \"affecting change\" would be by many. However, it could have served as a stepping stone and a beacon which other projects could use, and eventually create change not only in relation to ICE directly but to the notion of ethics in open source coding and licenses.\n@Sieabah \n\nIt's still funny the discussion is primarily \"If you don't revert it you are complacent with separating families!\". Which is a stupid untrue argument.\n\nI haven't seen anyone use this as an argument in this entire thread actually, so I'm not sure where you're getting that this discussion is \"primarily\" about that.\n@lachlanhunt \n\nI would also strongly advise against attempting to use a copyright licence for political protests against contemporary political issues. Software copyright licences are long-lived documents that can outlive any government-of-the-day that happens to be disrupting or upsetting certain groups of people.\n\nI think this is fairly silly--as has been alluded in other posts in this thread, Open Source licenses are exactly what you are arguing against -- political protests against contemporary political issues. These were seen as ridiculous not long ago in history, and are only recently gaining widespread approval. Just because they are now the status quo for many large pieces of software doesn't mean they are particularly old, and the fact is that they were very political pieces of activism, especially in the time when they were first being penned.\n@lhorie \n\njust because there is dissent is not enough reason for there to be a discussion. RFCs are not meant to be vehicles for discussion for the sake of discussion. What matters is the arguments for or against a change, its pros and cons and determining actionable steps.\n\nI believe this is exactly why we want an RFC -- to discuss whether this change (or one like it) should be implemented or not. And I believe this is also what @hannahhoward meant by \"discussion is needed,\" not just \"discussion for the sake of discussion\".\n\na legitimate desire to use a non-open-source license as a weapon to \"punish the bad guys\" (a view that seemed to be somewhat trollish in nature, from my observations, but I'm putting it here for completeness)\n\nI don't believe that this intention is at all trollish, though the way you present it makes it sound slightly so. The idea is that we can use software and the control over we have over the software we write, one of which is the license of who gets to use it, in order to affect change in the world. You may say that this is political, but I would argue that by taking no action, you are in fact taking an action and affecting change. We must battle with which one is more positive or has a better ethical standing. I believe that this is a perfectly legitimate thing to do. However, as I said in the beginning, in the case of a license it does need to be more premediated and thought out because of the nature of legality and enforcement.\n\nif you agree with the tenet that a non-MIT license will have any impact whatsoever on ICE, it follows that doing so may have a negative impact due to its indiscriminate and non-surgical nature. In other words, disrupting ICE operations can delay families from being reunited.\n\nThis assumes that any movement against ICE is inherently bad because it assumes that the short term negative impact would out weigh any long term benefit of having ICE gone. It also ignores the potential ways in which there would be benefits throughout the entire software development and sharing community, as I mentioned near the top of my post. \n\nNot because it has anything to do with ICE, but due to the reasons cited here - TL;DR: it would make Lerna fundamentally non-open-source.\n\nI believe that this argument is somewhat of a non-starter, as it asserts that \"open source\" is fundamentally better than \"not open source.\" It also asserts that those definitions of \"open source\" are the correct ones and are not open for discussion. I think this is somewhat silly however, as what is and is not open source has been malleable and changed before, and I don't think it is out of the question for it to change again.\n. @lhorie \n\nI'm not sure if there needs to be more clarity in terms of an RFC is typically supposed to look like (given that it is, admittedly, a new process in this specific org), which is why I offered my opinions on what is appropriate. \n\nI would agree if this were the actual RFC thread, but this is actually just a thread requesting an RFC should exist in the first place. Therefore I don't think it's valid to judge peoples' comments here as what they would have said in an actual RFC.\n\nWhatever was the latest heated Javascript-related topic of the week on Hacker News is statistically unlikely to be even remotely close to being an appropriate response to an issue that likely no one here has any real life understanding of, other than what they read on some news site while sipping their coffees.\n\nAnd yet the reason we have OSS licenses as a staple of modern software development today was the continued preaching of outcast mailing list users in the last few decades, and you could extend this to basically any successful political protest as well.\n\nAs I mentioned in an earlier comment, there's already a well established way of running non-OSS software: pay for it.\n\nThere's also lots of not OSS software that is free as in beer.\n\nThis very discussion is open because the maintainers feel that inclusion of all parties is of utmost importance to the success of this project.\n\nAnd I appreciate that this is true, but being \"non-OSS\" would not preclude this from happening by default anyway.\n@Sieabah \n\nThis is a fundamental misunderstanding of what \"open\" means if one cannot see the issue with a non-open license. You will have to fight the literally brick wall of Stallman to change what \"open\" source means if you want to challenge this.\n\nAnd yet Stallman's own license is one of the most restrictive and closed-door OSS licenses there is. He just closes the door on a different group of people: the group of people that want to use or modify his code without sharing back their changes. There's not a fundamental difference between that and precluding groups for another reason. This is also why I think the OSI page on \"evil\", originated from the JSON license, is fairly crap. I think the \"do no evil line\" is also terrible because it's even less enforceable than what the MIT-ICE license was, but the discussion in OSS around being able to preclude wrongdoers from using code has been very backwards IMO.\n\nICE isn't going anywhere and it probably won't in the next 10 years. Whether that is a positive or negative to whoever reads this is an unfortunate thing we have to deal with. I'm 99.9% sure lerna is nothing special at a government scale, and if ICE (or company in a binding contract with ICE) needed something like lerna they'd build it themselves or simply fork the old version. This license change effectively does nothing to the target. \n\nAs I said, Lerna's own license change is not meant to harm ICE by itself in any significant way, it's meant to\n\nDeal with the ethical concerns of allowing a harmful entity to use your code\nShow other OSS projects that this is a real dilemma and hopefully spark them to discuss and maybe take the same action\n\nIf many OSS projects do the same thing, then there could be real, large-scale change over time.\n\nIt was entirely a trollish act, it's undebatable. \ud83d\udc48 Multiple links\n\nNone of those show a trollish intent behind the action at all, and in the actual PR that was made, the changes were discussed in a very professional manner, all (at the time available) protocols were followed, and a calm and deliberate reasoning was given. Being terse and (arguably) rude to companies over their using tools he contributed to does not constitute the action being trollish. . ",
    "kzvaigzne": "Ah, @CamBurris, thanks - the registry access verification was the issue.\nTried publishing with --no-verify-registry and it worked like a charm, thank you very much for the quick response!\n@evocateur Sorry for blaming Lerna, I didn't realize this was an Artifactory implementation issue -- not the first one we've had with them either... ",
    "mtford90": "I'm facing this also. I haven't delved too far into this yet and i'll report back if I solve it, but it seems like it's something to do with git setup.\ngit tag --sort version:refname --points-at HEAD returns nothing for me. \ngit tag --sort version:refname however, works fine. So lerna probably isn't receiving any versions from git in my case.\n. Ok so here is what went wrong and caused confusion in my case:\n\nMy CI build failed before the lerna publish command. \nI committed and pushed a fix for this issue.\nLerna looks for tags that point at HEAD - the current commit.\nIt finds none - the tag is on the prior commit that caused a broken CI build.\n\nNote that this was a bug in my CI build process - NOT in the code that I was trying to push. The solution was to force publish (and hence retag) before committing & pushing again even though the code tagged was ready to be published despite the CI failure.\nI don't really see this as a failure on Lerna's part - but it certainly caused a bit of confusion. I can see why Lerna wouldn't walk backwards through the git history and release tagged versions - this would mean you could end up publishing code that previously failed CI legitimately. It just means there is a bit of awkwardness involved when something goes wrong with the CI process.. ",
    "yeskunall": "Just tried this on my repo and it doesn\u2019t seem to work:\n\nAny tips @evocateur?. ",
    "imolorhe": "@evocateur The force-publish option is meant to be used by the developer when they know what they are doing I presume. In my case, I have the tag released to git and it's on the tag that the publishing in the CI is done to npm.\nlerna publish from-git --force-publish=* --yes is the command I use and it says no changed packages to publish. I would assume that specifying force-publish should bypass the checks for changed files irrespective.. @evocateur If it helps, I got mine to force-publish by first checking out to the latest tag instead of the staging branch. Coupled with the from-git bump option, it publishes the changes in the CI each time I push a new tag with a new version. \u270c\ud83c\udffe. @evocateur I use lerna version to in my local to set the current version before pushing the commit to remote and then creating the tag and pushing the tag to remote.. For lerna version also, I had to use the --force-publish=* flag because it refused to see the changes. The changes in my packages are introduced not within the package files themselves, but within external files that the packages depend on. When those files change, I have my scripts that \"prepare\" the packages, pulling in the data from the externally changed files. This is done in the npm run prepare step when the packages are being built.. Not outside the repo, but outside the packages directory.. The full command I use for versioning with lerna is:\nlerna version $NEW_VERSION --force-publish=* --no-git-tag-version --no-push --yes; where $NEW_VERSION is an argument passed to the script.. I don't want lerna to push anything to the repository. I can make do with tagging locally though (I'd make all the necessary changes before calling lerna so it adds the changes to the tag).. Alright. How does lerna determine if a package has \"changed\" though? Maybe I can try debugging myself if I know that.. ",
    "roccomuso": "Looking for this param too and seems broken.. ",
    "HosseinAgha": "@evocateur thank you for your response. \nThats exactly what I'm trying to say here. I don't expect lerna to handle my applications let alone bundle them! \nI also have some npm packages in my monorepo that need to be versioned and published and also some application packages besides them that are private and don't have a version tag never versioned and never shipped via npm.\nAll I want from lerna is to not suggest incorrect null versions when there is no version field in private packages.\nI'd be happy to contribute the change. . I want to link https://github.com/yarnpkg/yarn/issues/6371 here as yarn also has this issue.\nI also read https://github.com/lerna/lerna/pull/707 and https://github.com/semantic-release/semantic-release/issues/193 comments and I'm pretty sure we should bump dependency versions for private packages with no versions even if we don't touch the version field. \n. 1. I added the tests for not versioned packages.\n2. Found no way to change the source branch of the PR. I suppose only target branch is editable in github. I can create another PR if having a feature branch is necessary.\n3. Just found out that yarn (workspaces) completely ignores installing dependencies for packages with no version (private or not private) (https://github.com/yarnpkg/yarn/issues/6371) so this change is useless for lerna + yarn workspaces users unless yarn fixes its behaviour.\n4. There seems to be a problem with installing lerna dependencies for development. I use latest npm (v6.4.1) and I have to npm install twice for all sub dependencies to install.. @evocateur I think this is good to go.. Hi. If I understood correctly you want to docker build a single project in monorepo.\nYou need to have the monorepo yarn.lock or package-lock.json in addition to 2 package.jsons in your build context.\nTL;DR: for production add a .dockerignore to your root folder and configure it to exclude everything but your project directory and monorepo package.json, lock and lerna.json files. something like this:  \n```ignore\n*/\nadd project directories to include here\n!/packages/my-project\nexclude these even in the included project directories\nnode_modules\n.git\nBeware that in this method _lerna_ have to download your package dependencies from npm unless you also exclude dependencies in `.dockerignore`. Eventually if you want your project to use dependency packages from monorepo you may end up sending the whole monorepo as the context to docker engine but the idea here is to download packages from npm registry and keep context size minimal.  \nUnfortunately as docker does not support multi context builds changing `.dockerignore` on each build (maybe using a script in CI/CD) was the only solution I could come up with.   \nIf you are in a development environment bind mounting the whole monorepo into the container is the best solution. for development it is better to use a docker volume to permanently store container built node_modules [take look here](https://blog.codeship.com/using-docker-compose-for-nodejs-development/).. Hi. If I understood correctly you want to `docker build` a single project in monorepo.  \nYou need to have the monorepo `yarn.lock` or `package-lock.json` in addition to 2 package.jsons in your build context.  \n__TL;DR__: for production add a `.dockerignore` to your root folder and configure it to exclude everything but your project directory and monorepo `package.json`, `lock` and `lerna.json` files. something like this:ignore\n*/\nadd project directories to include here\n!/packages/my-project\nexclude these even in the included project directories\nnode_modules\n.git\n``\nBeware that in this method _lerna_ have to download your package dependencies from npm unless you also exclude dependencies in.dockerignore. Eventually if you want your project to use dependency packages from monorepo you may end up sending the whole monorepo as the context to docker engine but the idea here is to download packages from npm registry and keep context size minimal.  \nUnfortunately as docker does not support multi context builds changing.dockerignore` on each build (maybe using a script in CI/CD) was the only solution I could come up with. \nIf you are in a development environment bind mounting the whole monorepo into the container is the best solution. for development it is better to use a docker volume to permanently store container built node_modules take look here.. ",
    "richsoni": "@evocateur I also have this same situation as @HosseinAgha.  In regards to the case you brought up:\nThere is a huge caveat, however: If any of your local siblings try to depend on that private package, they're gonna have a bad time. I suppose that's fair, given your use case.\nI would imagine these to be the three types of packages:\n```\n//packages/public/package.json\n{\n  \"name\": \"@demo/public\",\n  \"private\": false,\n  \"version\": \"0.0.0\"\n}\n//packages/private_lib/package.json\n{\n  \"name\": \"@demo/private_lib\",\n  \"private\": true,\n  \"version\": \"0.0.0\"\n}\n//packages/hidden_package/package.json\n{\n  \"private\": true,\n}\n```\nGiven those the following conditions should apply:\n hidden_package is ignored by lerna link because it has no name\n hidden_package is ignored by lerna version because it has no version\n hidden_package is ignored by lerna publish because it is private\n private_lib is ignored by lerna publish because it is private\n* all commands work for public\nIf the following package format occurred:\n\"name\": \"@demo/versionless\",\n  \"private\": true|false,\n\nlerna link would fail if a package adds @demo/versionless to the dependencies.  lerna publish would fail.  lerna version would fail.\n\nAnd for this case:\n```\n  \"version\": 0.0.0,\n  \"private\": true|false\n}\n\nlerna version could work, but lerna publish and lerna link would ignore this package since it has no name\n. \n",
    "wilhen01": "+1 to the above suggestion, would love a way to exclude private packages from versioning. We also have a repo containing a mixture of packages, some of which are published and some of which are not, and versioning is completely redundant for the non-published packages. . ",
    "miralemd": "The case I have is 'staggering' the releases so not all packages are published on the same commit, which was possible in 2.x since I could --scope during publish. I realize now though that's not really an optimal workflow, and not even possible in 3.x.\nThank you for the clarification, and for an awesome tool!. ",
    "jayhogan": "This feature would be useful to me. Any idea when this will land? Any assistance I can offer?. ",
    "irbrownie": "I also attempted this with lerna 3 and had the same issue.. Is it possible that we can choose to ignore .symlink files if we are on windows?. ",
    "spacecowboyian": "Semi related.. is there a way to generate git tags for all of the current versions (without bumping them) if you've maybe not used lerna like you should have for a while and managed your own versions without tags?. ",
    "ctaepper": "I now reverted back to lerna 2.11.0, everything ist working again. To sum up: publishing canary definitly behaves very differently in v3 if not unusable. thats great! will try that asap. ",
    "DMPS": "Thanks, @evocateur! I have a few questions about the implementation:\n\n\nNPM uses the package-lock.json in order to accurately determine the versions within a package. Unfortunately, we run into trouble when lerna bootstrap creates the node_modules for a package with only internal dependencies (like in the basic fixtures within Lerna). In that special case, Lerna doesn't generate a package-lock.json for the package and therefore npm audit throws an error. In order to correct this behavior, we would have to update lerna bootstrap to always create a package-lock.json even for packages which don't need it (perhaps using npm i --package-lock-only). How do you think I should move forward?\n\n\nIn order to properly test lerna audit, I need a package which I know will always have certain vulnerabilities. As NPM uses their own proprietary vulnerabilities database, the best solution seems to be to create a deliberately compromised package on NPM then pull that package in for testing. As this approach is starting to be closer to integration testing than unit testing, I would appreciate any other, simpler ideas. Also, if you know anyone else who could help with testing this command, please ping them.\n. Apologies, I accidentally closed the issue.. \n\n",
    "erikhofer": "Any progress on this?\n\nNPM uses the package-lock.json in order to accurately determine the versions within a package. Unfortunately, we run into trouble when lerna bootstrap creates the node_modules for a package with only internal dependencies (like in the basic fixtures within Lerna). In that special case, Lerna doesn't generate a package-lock.json for the package and therefore npm audit throws an error.\n\nThere is another issue. Even if there is a package-lock.json, internal dependencies are not included in it (maybe only if they are unpublished?). This makes npm audit fail as well.\nnpm ERR! code ELOCKVERIFY\nnpm ERR! Errors were found in your package-lock.json, run  npm install  to fix them.\nnpm ERR!     Missing: mypackage@1.0.0.\n",
    "philmander": "I am using a workaround where I have npm audit in the prepare phase of each Lerna package, but I also sandwich this in a script to temporarily add the missing (linked) dependencies to the package-lock and then after revert. Adding simply the package name and version seems to work.. ",
    "budarin": "I'm sorry - its npm's problem. ",
    "diervo": "@evocateur I was about to add the tests today! :)\nThanks a lot!. ",
    "patryk-bartoszek": "@evocateur Thank you for taking the time to review this issue and for providing context.\nI wasn't aware that some of the popular licenses required so that the actual text of the license is included (I totally missed that point while looking at PR for the first time).\nThis is indeed a compelling argument for the check and I fully agree with the current approach.\nThe only complaint I have is the actual text of the warning: \"Packages foo are missing a license\" didn't help me to figure out what the problem was. I had the license defined in package.json after all...  Only by looking at the source code I was able to understand that I was missing licence file.\nI feel that including suggestion to add LICENSE/LICENCE file in the message would be helpful for many people.. Yes, adding --relative option works! I just tested it.. ",
    "ken-kenware": "This seems easy enough, I'll update the message and open a PR. Sure! I kind of figured something like this wouldn't be exactly right since, it really isn't that much more helpful. But I wanted to start somewhere. I'll make the change, let me know if the style isn't right.. ",
    "RyanZhu1024": "I see. The command works. Thanks!!. ",
    "CosminIonascu": "Yes we need to use the results after the release, I managed to put the result in a txt file, you can close this, \nthanks. ",
    "mjgchase": "Closing this issue , this failed because I have no remote repository :/. ",
    "swashata": "Just FYI, I had a very similar issue. I copy-pasta some code for lerna.json, without realizing what it was doing. I had set command.publish.gitRemote as upstream instead of origin (my setup).\nMaybe it will help someone in need.\njson\n{\n  \"packages\": [\n    \"packages/*\"\n  ],\n  \"version\": \"0.0.1\",\n  \"npmClient\": \"yarn\",\n  \"useWorkspaces\": true,\n  \"registry\": \"https://registry.npmjs.org/\",\n  \"command\": {\n    \"publish\": {\n      \"allowBranch\": \"master\",\n      \"conventionalCommits\": true,\n      \"gitRemote\": \"origin\",\n      \"message\": \"chore(release): publish %s\"\n    }\n  }\n}. ",
    "MartinBlackburn": "The current workaround I am using for this is to make an \"empty\" commit to the branch, such as whitespace change, then run learna publish\nIt does mean we are polluting the git history, but for now, it works.. Looks like it was correct and I was mistaken.. ",
    "x5a": "I would argue that the promotion of \"staging\" package > \"latest\" package should be allowed even without force.. ",
    "akrantz": "I started using Lerna and ran into this same issue. I published using \"lerna publish --dist-tag next\" with a prerelease version (2.0.0-alpha.0). After validation that it was good, I wanted to re-publish the packages with the updated version using the \"latest\" dist-tag. But Lerna says that there are no changes. \nI ended up moving the \"Publish\" commit to a \"next\" branch in git and reset the master branch to the previous commit. I could then publish from the master branch because there were changes on the master branch.\nHowever, it would still be good to have a way to have Lerna be able to republish a prerelease version as a release version.. ",
    "imbhargav5": "What I do to overcome this issue. \nlerna version --force-publish --no-git-tag-version\nCommit package.jsons which have changed.\nlerna publish from-package\n. ",
    "ru-web-designer": "\nIt is very strange that your leaf package.json files point their main to a non-CommonJS file. That's not how npm packages are meant to work.\n\nThis is not important in this case.\nThis is really not a Lerna problem, cause even if leaf packages load the same dependency asynchronously, (i.e. not being bundled), it will be loaded twice.. ",
    "daffl": "I guess it means more versions to be released but it makes sense in order to avoid any conflicts with previous dependency versions.. ",
    "RikkiGibson": "We have a monorepo which takes a dependency on a package outside the monorepo. We'd like to be able to work with a local development version of that outside package by changing the version specifier to a file: reference. Is that a reasonable use case? Is there an alternative approach we should be using?. Does the file: dep refer to a package within the monorepo @stevemao?\nWe use file: references to packages outside the monorepo as an alternative to npm link, i.e. only for development purposes. Is there any chance of this being supported? Would be interested in contributing if the maintainers are open to this feature.. Does the file: dep refer to a package within the monorepo @stevemao?\nWe use file: references to packages outside the monorepo as an alternative to npm link, i.e. only for development purposes. Is there any chance of this being supported? Would be interested in contributing if the maintainers are open to this feature.. Is there a lerna-friendly workflow you'd recommend for debugging local versions of packages? In particular, using local versions of packages where it wouldn't make sense to put it in your monorepo because you don't own them or have publish rights to them?\nI apologize if I'm derailing this issue by talking about this specific use case. Would be happy to open a different\u00a0issue if that would be better.. Is there a lerna-friendly workflow you'd recommend for debugging local versions of packages? In particular, using local versions of packages where it wouldn't make sense to put it in your monorepo because you don't own them or have publish rights to them?\nI apologize if I'm derailing this issue by talking about this specific use case. Would be happy to open a different\u00a0issue if that would be better.. ",
    "stevemao": "lerna doesn't install (copy) any file: deps and removes the deps in my package-lock.json file.\nThe file: deps is not on the root level.. @RikkiGibson no, mine is within the monorepo. @RikkiGibson no, mine is within the monorepo. typo: Changelog. Is there any reason we don't use the api module, conventional-changelog, here?. I think we could tweak the template here.. EDIT: I added this comment before your second comment\nWe could change the handlebars template for the header. It's easy to do it with the api module \njs\nconventionalChangelog(options, context, gitRawCommitsOpts, parserOpts, {\n    headerPartial: '{{#if isPatch~}}...' // without '<a name='\n})\nBut with the cli at the moment we need to provide a config file to change this option. The presets are good example of overwriting the default template partials. The header of conventional-changelog-writer is per release. I'm not talking about the CHANGELOG_HEADER here and I think this is done right. I'm just saying stripping <a name= manually shouldn't be needed since we could just overwrite the headerPartial template.. Oops sorry, misread the code :). ",
    "emmanuelbuah": "We run into the same issue. @evocateur I assume there are a number of projects out there with a mix of private and public repos. Is there a reason why symlinking for file:... isn't handled the same way as other package sources? . ",
    "MiracleBlue": "@phun-ky Sorry to bump this thread with a somewhat off-topic question, but at my work we also use VSTS, and I'm looking at properly setting up a release pipeline that can do the npm publishing, rather than having to do it from my own machine.  So far I haven't found anything for using git tags as a trigger in VSTS (except for a bit of a branch trigger hack)\nMight I ask, are you running your publish step from VSTS as well?  If so, what are you using as your trigger?  Were you able to get it to trigger on new git tags?\nSorry if this is a bad place to ask, I've just been struggling to find any useful information out there about this topic specifically.. ",
    "ixalon": "We have started to see this too with our publishConfig in all packages (and repo root) pointing to a private artifactory registry (*.jfrog.io) (without yarn involved - we use npm):\n401 Unauthorized - GET https://registry.npmjs.org/-/whoami\nlerna ERR! EWHOAMI Authentication error. Use `npm whoami` to troubleshoot.. @evocateur npm whoami returns the same error, however npm whoami --registry https://subdomain.jfrog.io/subdomain/api/npm/npm-local/ returns the correct user.\nSome additional info, this is a scoped package (package name @ourscope/name) with a .npmrc file setting the registry for the scope via @ourscope:registry=https://subdomain.jfrog.io/subdomain/api/npm/npm-local/. @evocateur Thanks for the workaround. However to be clear, at least with artifactory, the issue was not with the 3rd-party implementation of the registry API, the issue was that learna always ran the whois command against the npmjs registry, even when publishing to a scope controlled by another registry.. ",
    "mikepham": "I have a similar problem, except the private registry is Nexus and I narrowed it down to how the URL is constructed. I don't know that there's a workaround for my situation. \nLerna: https:///repository/npm/-/whoami\nRepository: https:///repository/npm/whoami\nI also use scoped packages and have such in .npmrc.\nlerna notice cli v3.4.0\nlerna info versioning independent\nlerna info Verifying npm credentials\n404 Not Found - GET https://<repo>/repository/npm/-/whoami - Not found\nlerna ERR! EWHOAMI Authentication error. Use `npm whoami` to troubleshoot.\n. ",
    "roughcoder": "We also used scopes and Artifactory.\nAfter half a day of trying to get Artifactory to work differently we have now just resorted to creating an account on npm so that npm whoami works just to get past the arbitrary test that has been added even though we never push to npm.\nWe had to make 2 changes overall, firstly within the .npmrc to add the npm registry auth. (this allows npm whoami to pass)\n```\n@somescope:registry=https://yourrepo.jfrog.io/yourrepo/api/npm/npm/\nregistry=https://registry.npmjs.org/\n//clearscoredev.jfrog.io/clearscoredev/api/npm/npm/:_authToken=\n//registry.npmjs.org/:_authToken=\n```\nand now also use the --registry flag on the publish command to point to out private repo\nlerna publish --yes --registry https://yourrepo.jfrog.io/yourrepo/api/npm/npm/\nAlthough this works it does have quite a gaping issue, if a project has not been updated to use the --registry flag our private modules could be published publicly to npm.  \nFor us on Artifactory and probably peeps on Nexus this minor update was quite a breaking change.. ",
    "adanilev": "Is skipping the getNpmUsername check if --no-verify-access is passed something that would be accepted if a PR was raised? \nWe're using Nexus and whoami doesn't work either as mentioned in #1687. Don't have a viable workaround at the moment.. I'm having this issue even after downgrading to 3.3.0.\nbash\n$ lerna publish --no-verify-access --no-verify-registry --registry=https://nexus.XXX/repository/npm-test/\ninfo cli using local version of lerna\nlerna notice cli v3.3.0\nlerna info versioning independent\nlerna info Verifying npm credentials\n404 Not Found - GET https://nexus.XXX/repository/npm-test/-/whoami - Package '--whoami' not found\nlerna ERR! EWHOAMI Authentication error. Use `npm whoami` to troubleshoot.. Huzzah!! Thanks so much @dlebedynskyi and @sarahatwork. Used yarn resolutions and it works a treat.\nlerna publish --no-verify-access --registry=https://nexus.XXX/repository/npm-test/\n...and my package.json looks like:\n\"devDependencies\": {\n    \"lerna\": \"3.3.2\",\n  },\n  \"resolutions\": {\n    \"@lerna/publish\": \"3.3.2\"\n  }. ",
    "mattbishop": "+1 this bug is occurring in Azure DevOps pipelines.. ",
    "markmarkyesyes": "@HsuTing For #1697, the issue isn't hitting the endpoints for artifactory; it is that lerna will not read the registry field in my .npmrc. @evocateur  If there is a configuration step causing this disconnect I would be happy to discuss it and open a PR for documentation around third party registry integration. . @Martaver Thanks for the excellent deep dive into this problem. ~~Depending on how my week goes, I will try to open a PR for this in lerna as a proposal for your solution before the weekend.~~ I have seen a lot of reports of 403 when hitting private registries running bootstrap in lerna 4.0.3 (Issue #1685 ), Is is possible that this is a related issue based on your findings? Regardless of relation, the proposed solution wouldn't cover the use case of authenticating and fetching from a private registry configured in an .npmrc file. \nAddition: After looking at the registry-url package, It doesn't seem like it would take much work to add parameterization to the library allowing us to grab any fields (Such as auth in my case with enterprise artifactory) and allow them to be flagged to the add command in lerna. Thoughts on this idea anyone?. ",
    "tianyn1990": "facing the same issue when update lerna version to v3.4.0, so i back to v2.11.0. ",
    "guillaumechervetaxa": "I'am facing the same situation to publish into public npm registry from travis ci.\nIt seems that the publish is not working when I set a .npmrc at the root folder of the project.\nhttps://github.com/AxaGuilDEv/react-oidc/tree/chore/npm\nhttps://travis-ci.com/AxaGuilDEv/react-oidc/builds/86311432\nwhen I remove it, I am able to publish from my machine with \"npm login\" before the \"publish\" command.\n. I'am facing the same situation to publish into public npm registry from travis ci.\nIt seems that the publish is not working when I set a .npmrc at the root folder of the project.\nhttps://github.com/AxaGuilDEv/react-oidc/tree/chore/npm\nhttps://travis-ci.com/AxaGuilDEv/react-oidc/builds/86311432\nwhen I remove it, I am able to publish from my machine with \"npm login\" before the \"publish\" command.\n. ",
    "cyril-lakech": "Solution maybe https://github.com/lerna/lerna/issues/1705 copy your npmrc into home directory.. Solution maybe https://github.com/lerna/lerna/issues/1705 copy your npmrc into home directory.. Travis errors logs: https://travis-ci.com/AxaGuilDEv/react-oidc/builds/86311923#L683. Travis errors logs: https://travis-ci.com/AxaGuilDEv/react-oidc/builds/86311923#L683. yes we have this var. yes we have this var. ",
    "natoehv": "I have the same problem when I try to publish in private registry (artifactory) with v3.4.3, finally I back to v2.11.0, but I lost the commitizen functionality, is there some workaround for this?\nthx!\nEDIT:\nMy workaround, I use the resolution of yarn to force v3.4.1 of published script:\n\"resolutions\": {\n    \"@lerna/publish\": \"3.4.1\"\n  }\nwith this version work fine, with 3.4.3 broke the publish functionality on private registry. ",
    "gouegd": "Thanks @natoehv !\nI had an issue with artifactory throwing a 401 when trying to publish via lerna (although manually publishing via npm works). Using yarn's resolutions for a clean install fixed it with the version you gave.. ",
    "tomaswitek": "Hi I use a private Nexus with lerna v3.4.3 and although I am getting 404 from whoami request I still can successfully publish using this flag --no-verify-access\nExample\nlerna publish --no-verify-access\nHere are docs:\nhttps://github.com/lerna/lerna/tree/master/commands/publish#--no-verify-access\nOf course you have to have the right metadata in .npmrc file.\nCheers. ",
    "lucamjj": "Hi, \nAny news on this issue?\nWe use a private Nexus with Lerna v3.4.3 (but I also tried 3.5.1) and we tried the above fixes, but nothing worked for us, still getting this error.\n. ",
    "sarahatwork": "While we're waiting for a permanent fix, you can use yarn resolutions to solve this:\n\"resolutions\": {\n  \"@lerna/publish\": \"3.2.1\"\n}. ",
    "jbockle": "having the similar issue with private npm repo in VSTS (Azure DevOps Artifacts)\nlerna publish --no-verify-access\ninfo cli using local version of lerna\nlerna notice cli v3.4.0\nlerna info Verifying npm credentials\n404 Not Found - GET https://****.pkgs.visualstudio.com/_packaging/****/npm/registry/-/whoami\nlerna ERR! EWHOAMI Authentication error. Use `npm whoami` to troubleshoot.\nedit: \ndowngrading to 3.2.1 the issue still persist --no-verify-access is still attempting -/whoami\nlerna notice cli v3.2.1\nlerna info Verifying npm credentials\n404 Not Found - GET https://****.pkgs.visualstudio.com/_packaging/****/npm/registry/-/whoami. @panjiesw thanks that did the trick. lerna publish is also having the issue not using the defined registry in .npmrc, I have to use --registry option. I was having this same issue with lerna@3.13.1, and by using --loglevel verbose I was able to determine it was coming from only specific packages during '@lerna/pack-directory'.  Seems like its an issue with the latest npm packlist not playing nice with package.json's files propery.  Haven't looked at it deeper yet, but I had \"files\":[\"dist\"] in a few of the packages.  Removing the files key as a temporary workaround.. ",
    "manchicken": "This bit me today on both 3.6.0 and 3.8.0. This doesn't appear to be resolved.. I looked closer and it might be a problem with our nexus-with-npm install. Sorry for the false alarm.. ",
    "WetHippie": "Same request - we need lerna to completely disconnect from git. \nThis is a breaking change for us since we build our code using AWS Codepipeline/CodeBuild. AWS downloads a ZIP code of the source, so there's no .git directory to use, so anything that goes near git instantly breaks the publish process.. ",
    "jimmytb": "I believe you can't, you have to do it manually by going to the folder and run:\nnpm publish\nThan manually update the version of the package in the other packages.\nThis is the way i do it. Hope there is an other way. ",
    "thomasbertet": "@evocateur can you elaborate or point out some more informations about this ? \nI think I don't quite understand.\n\n--scope is not allowed for a tagged publish because that would fundamentally break the ability to properly publish the ignored packages\n\nDoes this mean I can make it work without tagging ? What would be the caveats ? What is a ignored package ? \n\nThis is because lerna publish uses git tags to identify releases, and it does not distinguish between the target package, merely the \"most recent\" annotated git tag.\n\nSorry if that sounds a bit dumb, but can you elaborate on why we should rely on git tags ?\nIf you have any resources on how Lerna works that could help me understand, please share :)\nAlso, from your POV, do you see any future with the ability to do \"single\" package release ? \nI would like to use a mono-repo infrastructure for many reasons independent of the release (workspaces mainly) and willing to separate the releases of each packages becauses the teams working on these packages are not the same.\nThanks anyway for your help & your effort on maintaining Lerna, much appreciated!. ",
    "Lloyc": "Add to your lerna json:\n\"command\": {\n    \"bootstrap\": {\n      \"hoist\": true\n    }\n  }. ",
    "cronon": "facing the same issue during lerna bootstrap execution - it wants to download private packages from public registry, though private registry is specified in .npmrc file. ",
    "HazAT": "We found a workaround, using lerna exec\n$ lerna exec --since $(git rev-list --tags --max-count=1)\nI am not sure if I can provide enough insights / examples to justify my change.\nI will go ahead and close this PR, not sure if this needs a fix then, maybe someone picks this up in the future.\n. We found a workaround, using lerna exec\n$ lerna exec --since $(git rev-list --tags --max-count=1)\nI am not sure if I can provide enough insights / examples to justify my change.\nI will go ahead and close this PR, not sure if this needs a fix then, maybe someone picks this up in the future.\n. @evocateur Sorry for the PR spam, while I stated in the PR before that we found a workaround with --since which is true to basically replace lerna changed but it's not allowing us to use lerna version.\nThis PR is still WIP I just want to know if you consider merging this new feature at all, if so please let me know I will finish the PR (write tests + docs for the new option).\nThanks for your time and the great project.. @evocateur Sorry for the PR spam, while I stated in the PR before that we found a workaround with --since which is true to basically replace lerna changed but it's not allowing us to use lerna version.\nThis PR is still WIP I just want to know if you consider merging this new feature at all, if so please let me know I will finish the PR (write tests + docs for the new option).\nThanks for your time and the great project.. OK, added docs + tests, one existing test is failing (that I did not touch), not sure why though.. @dzsodzso63 So we found a workaround for changed, using --since\nyarn lerna exec --since $(git rev-list --tags --max-count=1) pwd\nBut it doesn't work for version / publish so right now we are using my fork right now.. @dzsodzso63 I mean I don't see why this shouldn't be merged but it's not in my power ;)\nI am happy to do anything to get this merged since we also don't want to rely on my fork for this ^^. Rebased \u267b\ufe0f . @dzsodzso63 @danielcondemarin Right, we create the tag in our release branch, rebasing would create a new sha. \nWe really want to have a \"snapshot\" of the tagged commit that we built. \nWhile rebasing and tagging afterward will probably work 99% of the time we run all tests on this specific commit/tag and want to release it without building it again.. @evocateur Is there anything left to do for this getting merged?\n. @evocateur Thanks for your review, I made the changes you requested.. git describe --tags $(git rev-list --tags --max-count=1) --always --long --dirty --first-parent\nfatal: --dirty is incompatible with commit-ishes\n. This doesn't really work for our case. As explained we want to tag in a release branch that gets merged into master. But the tagged commit is on the branch.\n. I see but it isn't really just a lightweight tag, right?. ",
    "wahengchang": "@cyril-lakech , did you find a way to complete CI/CD of lerna + travis-ci ?. ",
    "SebastianBogado": "I believe you could use this flag:\n$ lerna run build --scope=C --include-filtered-dependencies\nFrom the docs:\n\nInclude all transitive dependencies when running a command regardless of --scope, --ignore, or --since.\n\n. I believe you could use this flag:\n$ lerna run build --scope=C --include-filtered-dependencies\nFrom the docs:\n\nInclude all transitive dependencies when running a command regardless of --scope, --ignore, or --since.\n\n. ",
    "vivekgalatage": "Yeah great!  This works perfectly! Thank you @SebastianBogado . Yeah great!  This works perfectly! Thank you @SebastianBogado . ",
    "Clarence-pan": "It's very useful. \ud83d\udc4d\nDoes anyone know when will it be published to npm? And which version?. ",
    "glebmachine": "i've got exacts the same error. ",
    "pscanf": "But which breaking changes? Only the ones listed under the 3.0.0 entry in the changelog, or all the breaking changes from the first alpha, through all the betas, the rc, and finally 3.0.0?. ",
    "dzsodzso63": "\nSorry for the PR spam, while I stated in the PR before that we found a workaround with --since which is true to basically replace lerna changed but it's not allowing us to use lerna version.\n\n@HazAT can you please explain this \"workaround\"? we have this issue since upgrading to lerna 3, that we cannot determine changed packages because of the --first-parent param (publish from release branches + PR), but --since switch doesn't work since lerna 3. What we should do?. @HazAT thanks, this made us an idea to check changes like\nlerna exec --since $(git rev-list --tags --max-count=1) --loglevel=silent -- npm v . name\nbut the real win would be this PR merged (we now can scope down other processes (e.g. tests), but we publish everything on each merge). \nDo you think this merge can happen sometime?. @evocateur Can you please review this one?. > Hi @HazAT @dzsodzso63 Did you consider rebasing over true merges? Seems to work fine if you rebase your release branch onto master.\n@danielcondemarin Maybe I missing something here, but in my understanding, when I rebase the publisher branch to master, then the sha changes, so the tags created by lerna will point to non-existing commits. What do I miss?. @HazAT ok, then we are on the same page (and we cannot even think about publishing after merge, as  we have protected master branch and we cannot commit to that directly). ",
    "danielcondemarin": "Hi @HazAT @dzsodzso63 Did you consider rebasing over true merges? Seems to work fine if you rebase your release branch onto master.. ",
    "stefaneg": "You are aware that prepublish is a part of npm lifecycle that is meant to prevent broken packages from being published? . ",
    "mattcosta7": "npm run publish\n[13:05:52] (develop) rotor-web-components\n// $ npm run publish -- --log-level=silly\n\nrotor-web-components-monorepo@0.4.1 publish /Users/costabma/workspace/rotor-design-system/rotor-web-components\nnpx lerna publish \"--log-level=silly\"\n\nlerna notice cli v3.4.3\nlerna info versioning independent\nlerna info Verifying npm credentials\nlerna http fetch GET 200 https://artifactory.dx.utc.com/artifactory/api/npm/npm/-/whoami 249ms\nlerna info Looking for changed packages since @utdx/docs-site@1.10.4\nChanges:\n - @utdx/rotor-icons: 0.23.0 => 0.24.0\n - @utdx/rotor-react-wc-shim: 0.1.0 => 0.2.0\n - @utdx/rotor-docs: 1.11.0 => 1.12.0 (private)\n - @utdx/rotor-web-components: 0.13.0 => 0.14.0\n? Are you sure you want to publish these packages? Yes\nlerna info lifecycle rotor-web-components-monorepo@0.4.1~version: rotor-web-components-monorepo@0.4.1\n\nrotor-web-components-monorepo@0.4.1 version /Users/costabma/workspace/rotor-design-system/rotor-web-components\nnpx lerna version\n\nlerna notice cli v3.4.3\nlerna info versioning independent\nlerna info Looking for changed packages since @utdx/docs-site@1.10.4\nlerna ERR! EUNCOMMIT Working tree has uncommitted changes, please commit or remove changes before continuing.\nlerna info lifecycle rotor-web-components-monorepo@0.4.1~version: Failed to exec version script\nlerna ERR! lifecycle \"version\" errored in \"rotor-web-components-monorepo\", exiting 1\nnpm ERR! code ELIFECYCLE\nnpm ERR! errno 1\nnpm ERR! rotor-web-components-monorepo@0.4.1 publish: npx lerna publish \"--log-level=silly\"\nnpm ERR! Exit status 1\nnpm ERR!\nnpm ERR! Failed at the rotor-web-components-monorepo@0.4.1 publish script.\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /Users/costabma/.npm/_logs/2018-11-15T18_06_19_844Z-debug.log. The issue is that the working tree does not have uncommited changes until I run publish.  it updates the changelog, and package.jsons, but fails to recommit them before continuing. it definitely is.  thanks!  makes total sense too.  closing, but commenting here in case anyone comes across this.\nneeded to remove a script \"version\" from the package.json to allow this to run correctly.  . ",
    "arumsey": "I just tried running npm install lerna -g on MacOS and got the same error. No TravisCI in the picture for me.\nnode --version = 10.3.0\nnpm --version = 6.4.1\n134 http fetch GET 404 https://registry.npmjs.org/@lerna%2frun-parallel-batches 553ms\n135 silly fetchPackageMetaData error for @lerna/run-parallel-batches@^3.0.0 404 Not Found: @lerna/run-parallel-batches@^3.0.0\n136 timing stage:rollbackFailedOptional Completed in 2ms\n137 timing stage:runTopLevelLifecycles Completed in 1139ms\n138 verbose stack Error: 404 Not Found: @lerna/run-parallel-batches@^3.0.0. I also tried npm install @lerna/run-parallel-batches for fun and got the same 404 error.\nI can however load https://registry.npmjs.org/@lerna%2frun-parallel-batches into a browser so it seems to be more node related than an actual network issue.. I deleted my ~/.npmrc file and the install then worked. All good now but still not sure why it occurred.. ",
    "kitho-pwc": "Not understand too. ",
    "kanoshin": "@evocateur do you have any suggestions/best practices regarding development with watch in monorepos with lerna? I'm pretty sure that many developers are having trouble figuring this out. Approach with --parallel is very far from ideal.. > There are packages\nCould you also please give a clue regarding where to find those.. ",
    "lifeiscontent": "@evocateur sorry, not a fan of rollup. it minifies modules in a way that doesn't personally make sense to me. I'd rather just use a pure babel solution.\nthanks for the feedback though.. ",
    "dgutride": "Any updates on this question?. ",
    "slawiko": "@evocateur is works only for \"test-only packages\", but what if we want to have some package to be built in monorepo, but we marked them as private? Currently we have a huge amount of unused git tags which is very annoying. Would be good if lerna publish will have some flag for skipping private packages from being git-tagged. > Unclear to me why you need lerna to manage those private packages. Relative file: paths work just fine, the \"test-only\" pattern I linked earlier is by no means limited to \"test-only\" packages.\nbut what if we want to use lerna run for those packages?. Confirm the issue. @evocateur at least documented. You suppose that your customers use the same version as you? That's bold assumption :). ",
    "peterbakonyi05": "@evocateur Thank you for the reply and pointing me to the right direction! I agree completely and will flag it to ProGet. ",
    "sohkai": "@evocateur Curious about\n\nAt least for the root install, sure. I'd recommend migrating away from lerna bootstrap, however. It's days are numbered.\n\nIs there documentation available for migrating off of bootstrap? Should we use link instead?. ",
    "meebix": "Having the same issue on v3 with package.json not being committed.\nlerna version states that is commits changes here https://github.com/lerna/lerna/tree/master/commands/version#usage, but that is not what I am experiencing.\nlerna version fails because package.json (updated with the new version Lerna prompted for) is uncommitted.. ",
    "kebot": "I think the package.lock created by lerna is always wrong, maybe you should do lerna exec -- npm install instead of lerna bootstrap. ",
    "abergd": "Same problem here... Using npm v6.4.1.\nLerna bootstrap removes all my local packages from package-lock.json.\nThis causes npm ci command to fail.\nAny ideas?. ",
    "romanzenka": "I am on a project where I do not control deployment - it is done by scripts provided by 3rd party that I cannot modify. These scripts assume valid package.json files in each submodule, that can stand on their own. I still want:\n- the benefits of package-lock.json (nail dependencies down)\n- hoisting (otherwise build gets slow and giant)\nHow can I achieve this, knowing that the combined package-lock.json is missing some of my dependencies?. ",
    "diegohaz": "You can force the version change using lerna version patch/lerna publish patch.. @Siilwyn If the only change a package foo had since the last version was in devDependencies (eg. upgrading eslint), there should be an option to not bump foo version when running lerna version/publish.\nThat's something I really wanted too.. Just to add my case here. reakit is a dev/peer dependency on reakit-theme-default. Every time I want to publish a new version of reakit, lerna bumps reakit-theme-default's version too, even though there were literally no changes on the latter package. Dev dependencies should be ignored I guess.\n\nIs there anything I can do to avoid this as of now? I tried to add **/package.json to the ignoreChanges option on lerna.json, but it doesn't work.. I guess it's still relevant.. Is this related to #1737?. ",
    "inthegreenwild": "The npm tag is for tagging at the repository level ... so in this case 1.0.0-alpha.0 would be linked to the beta tag at the repository you're publishing to. Users would recieve 1.0.0-alpha.0 by requesting it with npm install component@beta \nWhat you're looking for is to change the actual semver tag name which can be done with --preid \nnpx lerna publish premajor --preid beta will give you 1.0.0-beta.0 \n. Yes preid is only for git and npm-tag is for npm distribution. If you don't specifcy an npm-tag it defaults to \"latest\". . If you're afraid of user error just use the bump positional... lerna publish prerelease. I still don't really see the problem? You can also use prepatch/preminor/premajor as the positional and set the --preid to whatever you want instead of \"alpha\" . You may want to consider the conventional-commits route or some type of CI integration then . ",
    "danm": "Whats the advice here? make our own scripts which drop a bunch of config templates rather than use lerna create\nfor example, creating a src directory, and a test folder which generates a .ts file rather than javascript?\ndo I need to do anything to let lerna know that new package exists? not sure what magic create does which is necessary.\nOr is this all that is needed...\n{\n  \"packages\": [\n    \"services/*\"\n  ]\n}. ",
    "vroudge": "If we could focus on code instead of drama that'd be nice\nEDIT: have you read it? we're not in Palestine in 1000 BC https://www.sqlite.org/codeofconduct.html. ",
    "joelday": "@SRGOM: I feel bad for your coworkers, assuming you actually have a real job.. ",
    "erossignon": "duplicated in https://github.com/lerna/lerna/pull/1760. running git add . after running lerna exec -- ncu -au to incorporate all packages.json files to the index and before running lerna bootstrap --hoist --ignore-scripts works like a charm ! \nThank you \n. ",
    "matthiaskomarek": "Same problem here. We currently workaround with patch-package and removing the --first-parent flag from @lerna/describe-ref/lib/describe-ref.js. ",
    "mattfelten": "The patch, minor, major options are actually helping remove user error the most. prerelease seems to be a black box to do anything, which might make the issue worse. I'll try it out though. My request above would still help.. It's less a problem and more of an improvement for us. Everything works fine now except for user error. We have npm scripts that are doing build steps and then running lerna publish.\n\"scripts\": {\n        \"release\": \"npm run build && lerna publish --npm-tag latest\",\n        \"alpha\": \"npm run build && lerna publish --npm-tag next\"\n}\nI could create 6 new scripts specifically setting the patch/minor/major but that seems a bit excessive.\n\"scripts\": {\n        \"release-patch\": \"npm run build && lerna publish patch --npm-tag latest\",\n        \"release-minor\": \"npm run build && lerna publish minor --npm-tag latest\",\n        \"release-major\": \"npm run build && lerna publish major --npm-tag latest\",\n        \"alpha-patch\": \"npm run build && lerna publish prepatch --npm-tag next\",\n        \"alpha-minor\": \"npm run build && lerna publish preminor --npm-tag next\",\n        \"alpha-major\": \"npm run build && lerna publish premajor --npm-tag next\"\n}\nIt would be an improvement to our workflow to still use the cli interface but control what options are available within it.\n\"scripts\": {\n        \"release\": \"npm run build && lerna publish --npm-tag latest\",\n        \"alpha\": \"npm run build && lerna publish --npm-tag next --prerelease-only\"\n}. Can you move a release from one dist-tag to another??. ",
    "joeytwiddle": "@bertho-zero Is this the plugin that can warn about that? eslint-plugin-dependencies\nIf so I will add a link to it.. That looks great, thank you!. ",
    "andrewcharnley": "Agree. Also many npm commands won't work - npm outdated and npm audit being two.\nAlso should compare 'lerna link convert'. See https://github.com/lerna/lerna/issues/1788. Thanks for confirming the file:// specifiers are swapped out. I assumed it but currently don't have a private npm to test with.\nI'm unsure exactly when npm began supporting file:// but I see no benefit to --hoist now - and the lack of package-lock.json with --hoist is troublesome while not working with npm ci. Perhaps --hoist should print a warning message and be deprecated?\nFor issue 3, doing a ../../ to the lerna root to find mocha works well. I'm yet to try jest though it's on the backlog. Even so I believe it should be up to each package to determine how it tests itself not the root. Therefore all my packages provide the same commands and lerna is used to iterate through them. This also means I can a packages tests by diving into that package and running npm test (lerna is transparent to devs, it's installed by npm i and then npm run-scripts xyz call it.\nThanks!\n. Hi,\nlerna bootstrap --hoist is defunct when using link convert as the child packages have all their devDependencies moved into the parent package.json while the child packages are listed as dependencies on the parent package.json so the child dependencies are installed. It's rather nice!\nestaub -> use lerna link convert if you're using a recent npm version (whichever supports symlinks, I think it's v5+). After this your child packages won't have any devDependencies in them and keep it that way in the future by adding them to the root package.json. If you add new packages be sure to add them to the dependencies list in the root package.json (you'll notice lerna link convert has done it for you for the ones you already have). This makes sense because a published package doesn't need/use devDependencies.\nAfter that you only need to run npm i at the root level, no bootstrapping or hoisting. When it comes to publishing, Lerna swaps out the link strings to reference the package name & version. \nCheers, Andrew\n. PS) I couldn't get nyc, mocha etc to run within a child folder without forcing a relative path to the parent dir with ../../.bin. npx can't find it either so it doesn't like traversing up the tree to find binaries. I can live with it just fine though.\n. > \n\nI'm fairly sure what I see is a bug, I'll work on a reproduction case and file a new issue. lerna link convert adds my in-repo packages to the root package.json devDependencies as file:../pkgname in addition to the dependencies file:packages/pkgname.\n\nThis is the correct logic. I'm using npm v6 - don't see a need for yarn anymore - so can't comment on that side of it. At this point all Lerna is doing is iterating the folders and running commands in them (plus a bit of version management and publishing spice if you want it). \n. I don't have that issue at at. The file links in parent/children package.json(s) resolve correctly from parent to children and child to parent. . ",
    "gerardobort": "Hey, there was no space in the issue template to say \"Hi\", so...\nHi! \ud83d\udc4band thanks in advance :). OK, so I figured out that lerna run already supports --concurrency without need to specify --parallel. Closing this issue \ud83d\ude01. ",
    "celticdarren": "@ThisIsMissEm It can be found here https://github.com/lerna/lerna/blob/master/doc/hoist.md\nI'm following a guide that suggested its use to hoist node_modules to the root.. @ThisIsMissEm That makes sense! Thanks for getting back to me. . ",
    "westmark": "We encountered this exact problem today. The issue is that execa defaults the option preferLocal to true, which means it will by default prepend some paths, including the path for the node executable(process.execPath). In our case it prepended with /usr/bin which contained an old version of git. This happened on a Jenkins server outside of our control and which was poorly maintained(apparently).\nWe don't expect execa to change this behaviour, so we propose that lerna default to sending preferLocal: false in all calls to sync(), or at least allow preferLocal to be configurable in lerna.json.. Yes, npm-run-path modifies the env, and thereby the PATH when preferLocalis true. Since it is true by default, the user can never trust that whatever PATH they have constructed will be respected. And like I wrote, npm-run-path will prepend the PATH with, among other things, the path where the current node executable is located, which of course will vary from system to system. On a poorly maintained system where there may be old versions of git etc. lying around, this becomes a problem.. ",
    "goodbomb": "This is what I'm seeing:\n```\n\nnpm view @lerna/run-parallel-batches@^3.0.0\nnpm ERR! code E404\nnpm ERR! 404 Not Found : @lerna/run-parallel-batches\nnpm ERR! 404\nnpm ERR! 404  '@lerna/run-parallel-batches' is not in the npm registry.\nnpm ERR! 404 You should bug the author to publish it (or use the name yourself!)\nnpm ERR! 404\nnpm ERR! 404 Note that you can also install from a\nnpm ERR! 404 tarball, folder, http url, or git url.\n\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     C:\\Users\\bescott\\AppData\\Roaming\\npm-cache_logs\\2018-11-05T20_54_22_803Z-debug.log\n```\nI've also updated my version of nodeJS to v10.13.0 and npm to v6.4.1. This issue appears to be related to https://github.com/npm/npm/issues/18569\nAfter running npm login I was able to view run-parallel-batches. And I can confirm that I'm now able to npm install lerna@3.4.3 after running npm login. Weird issue.... It's probably worth noting that the repository in which I'm using Lerna is a private scoped package that's being published to an internal instance of Artifactory. Our package is scoped and we have to log in to artifactory as well, so this could potentially be causing an issue, not sure.. @evocateur Not sure what you mean by an artifactory cache. I'm running these commands locally and we deploy to artifactory via gitlab-ci. \nI deleted my node_modules folder, ran npm logout then npm cache verify (I'm running npm v6.4.1 now) and then npm view @lerna/run-parallel-batches@^3.0.0. Still running into:\n```\n\nnpm view @lerna/run-parallel-batches@^3.0.0\nnpm ERR! code E404\nnpm ERR! 404 Not Found : @lerna/run-parallel-batches\nnpm ERR! 404\nnpm ERR! 404  '@lerna/run-parallel-batches' is not in the npm registry.\nnpm ERR! 404 You should bug the author to publish it (or use the name yourself!)\nnpm ERR! 404\nnpm ERR! 404 Note that you can also install from a\nnpm ERR! 404 tarball, folder, http url, or git url.\n\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     C:\\Users\\bescott\\AppData\\Roaming\\npm-cache_logs\\2018-11-06T18_24_09_832Z-debug.log\n``. I know what the issue is now. It's my global.npmrc`. @evocateur gave me the idea to check it, as I had it configured for deploying to artifactory locally.\nregistry=https://registry.npmjs.org/\n@scqt:registry=<artifactory URL>\n//<artifactory URL>/artifactory/api/npm/scqt-npm-local/:_password=\"<password>\"\n//<artifactory URL>/artifactory/api/npm/scqt-npm-local/:username=<username>\n//<artifactory URL>/artifactory/api/npm/scqt-npm-local/:email=<email>\n//<artifactory URL>/artifactory/api/npm/scqt-npm-local/:always-auth=true\n_auth=\"<Base 64 username:password>\"\nemail=<email>\nalways-auth=true\nAfter I remove that stuff, npm view @lerna/run-parallel-batches@^3.0.0 works.\nTo fix it, I had to swap the order of the registry entries, like this:\n```\n@scqt:registry=\n///artifactory/api/npm/scqt-npm-local/:_password=\"\"\n///artifactory/api/npm/scqt-npm-local/:username=\n///artifactory/api/npm/scqt-npm-local/:email=\n///artifactory/api/npm/scqt-npm-local/:always-auth=true\n_auth=\"\"\nemail=\nalways-auth=true\nregistry=https://registry.npmjs.org/\nalways-auth=false\n```. ",
    "Zertz": "This is a duplicate of #1746 \ud83e\udd42 . ",
    "olvnikon": "We faced a similar problem. I'm also interested in the solution.. ",
    "mjhenkes": "+1 to separating versioning from publishing.\nIn our lerna workflow many developers work on the various packages but very few have privileges to publish. This creates a situation where the publisher needs to know at publish time how to version a component. The developer pushing changes should know how their changes affect the version and ideally would be able to indicate that prior to publish time.\nSecondly separating versioning from publishing would allow us to create an automated job to publish the packages. No versions choices would need to be made at publish time.. ",
    "legenddcr": "My CI script works well on lerna 2.x but failed on the latest release 3.4.3.\nlerna publish --canary=xyz.123 --yes --no-git-tag-version --no-push\nsimilar null prefix is reported. --yes failed to disable prompt which works well in lerna 2.x.. ",
    "stephanepericat": "any updates ? i can still reproduce this issue with lerna 3.5 ... it seems that it expects the first publication to not be \"canary\", because it only fails if there are no prior tags. once a first \"latest\" version has been published, publishing to canary is no problem.. it would be so great to have this feature; it would save a lot of time from moving files around manually.... ",
    "fdlk": "It would be nice if the documentation at least warns about this, because now it was giving me headaches.. ",
    "tanguyantoine": "facing the same issue :-(\n. ",
    "jperasmus": "Facing the same issue. The reason we have this is that we had a completely separate repo previously that is currently published as v0.x - now we want to publish v1.0.0-alpha.x from this brand new monorepo. Is there a better way to release a prerelease than using the --canary flag?. Apologies, I just realized that I don't need the --canary flag to publish to a different dist-tag.. ",
    "sinedied": "@evocateur I'm currently doing that, but globstars include way more than what I need and cause other issues in addition to worse performance, as https://github.com/lerna/lerna/issues/1784\nI think those 2 issues can be solved with the same simple solution: allowing to blacklist packages through negative blobs. I'm willing to propose a PR if you are ok with that?\nWould you be more in favor of negative blobs support (ie !<blob> in the existing packages array) or an additionnal setting like ignorePackages?. > npm package names are always required to be universally unique\nThis is true for packages that aims to be published, but private internal packages can reuse the same name.\nRegarding the */** blob, it works just fine, even though I would have preferred just */*/* for my use case but node_modules are added to the ignore list only if there's a ** wildcard present. One more reason to add support for custom ignore rules \ud83d\ude09 \nI know our use case is not really the vanilla Lerna use case, but except for that issue it works very well within a repo containing thousands of repository (the wildcard isn't even that slow, only a few seconds to match all packages).\nMaybe it wasn't that clear in the issue, but this issue was to clarify my use case and gather feedback on whether you would accept a PR implementing solution 1 or 2.\nI personally think being able to extend the ignore list via the configuration would be the best and would benefits other use cases as well.. > Global uniqueness of package names managed by Lerna isn't optional. If you want package.json files with duplicate names, don't configure them as lerna packages.\nHence the need of a blacklist, via the ignoreGlobs option :) Of course the long-term goal is to avoid such practices within our whole codebase, but meanwhile every project can take care of it, this would be a good option.\n\nIs it really that hard to configure a targeted list of package globs that don't use a globstar? I can appreciate the desire to avoid the burden of a whitelist, but this isn't exactly a frequently-changing configuration.\n\nYes it is, the company being wide spread on several countries with new repositories being added every day, having to setup a whitelist configuration (coupled with the associated code reviews each time a new repo is added) would be a burden to maintain (and we know this well as whitelists are used for other services with legacy tech...). Having the option to blacklist certain paths would definitely help there.. ",
    "Rafe": "Looks like the integration test is failing because the npm authentication, is this the problem on TravisCI side?. ",
    "caseyduquettesc": "Have you tried lerna version?\nI use that command which I found in this document (https://github.com/lerna/lerna/tree/master/commands/version#graduating-prereleases) and it promotes my pre-releases just fine.. ",
    "mikea": "Is there any workaround for this?. ",
    "westandy-dcp": "In my sub-packages, in their package.json, I had \"private:true\" set.  I got rid of that property in the sub-package's package.json, and lerna list is now showing the sub-repo.. ",
    "Fyre91": "I need it anyway for my project, should I have a go at it? if it's something that could be added and be of some help.. ",
    "detj": "I would go as far as to say lerna create should be dropped as a feature. There are some solutions around this in the form of hygen & plop.\nOr if lerna create could seamlessly work with any existing templating solution.. ",
    "nomcopter": "Thoughts @evocateur?. No worries! Happy Thanksgiving!. ",
    "haraldF": "@evocateur I've added a test.. ",
    "bengourley": "Hey @elie222, thanks for the suggestion. I tried that, and it doesn't appear to be an option for publish, unless I'm missing something?\n$ \u00bb NPM_CONFIG_OTP=xxxxxx lerna publish from-git --npm-tag next --scope=@myscope/mypackage\nERR! lerna Unknown argument: scope. ",
    "revelt": "\nIn addition, with --hoist no package-lock.json is created in each folder - which is surely detrimental when it comes to publishing packages that have dependencies (non dev)?\n\n@andrewcharnley it depends \u2014 if lerna packages are npm libraries, then it's fine not to have package-locks. But if your project is web app parts then yeah, possibly. There was a good discussion leaning against package-lock in npm libraries.\nPersonally, I tackle issue 1 this way. I wrote a node CLI app which reads all package.json within packages/* and pings npm and writes the latest fetched version, with ^ prepended. This might be impossible on web app projects but does work on npm libraries. The API surface is small-enough, it's extremely unlikely that non-major dependency releases would break unit tests. Even major releases can be bumped 90% of the times from my experience. Again, this is definitely not the case if anything express or react related is among dependencies (imho).\nPersonally, I never experienced issue 2 because I use lerna bootstrap --ignore-scripts --hoist. But yeah, it's not clear in the documentation when should it be used and when not.\nWith regards of issue 3. It might be or not be applicable in your case but I'm running tests on nyc + ava and I don't have them installed globally and the following script on each package works fine. I cd into one of packages/* folders (npm libraries), do all the development on them and run tests fine, as usual:\n\"test\": \"./node_modules/.bin/eslint src/*.js test/*.js && nyc ava\"\nNotice how above I'm calling eslint with a relative path and nyc directly. Both work fine. All my bin CLI scripts got sym-linked: ava, eslint, nyc, prettier, rollup.. Maybe try wiping everything (rm -rf node_modules && npx lerna clean -y) and lerna bootstrap --ignore-scripts --hoist? Btw, my own repo is this, maybe you'll find something handy in scripts. I'm combatting conventional changelogs at the moment, but hoisting, running scripts on packages and dependencies are \"nailed\" 100% on lerna setup side.. Thank you, I'll close! Merry Christmas everybody!. @evocateur not really.\nLet's document --conventional-commits; if publish has separate page, let's list all commands that it accepts, at least link to version page maybe? What do you think?. Team, what if we added a separate file under lerna/doc/faq.md (or similar) and covered all common maintenance scenario questions (like this) there? Let's put a link on readme to it.\nI'd contribute few more common questions like this to such document. For example, this issue above should actually tackle two cases: a) adding a dep onto a lerna package (not root); BUT also, b) adding a dep onto root package.json.\nThen, maintenance issue, ie. node-check-updates feature set, but applied to Lerna: c) finding out what package dependencies are outdated, a la npm outdated but per-package; d) automatically updating all package dependencies: d.1 - within semver, a la npm update, d.2 - bumping major, a la ncu -a. Now, all this should cover root package.json packages as well, separately.\nI'm happy to help to compile the questions and even some answers :)\nWhat do you think?. @milesj What if you're formatting the commit message wrongly? I use comittizen on our monorepo and versioning Lerna's Conventional Commit is working correctly.\nThe \"official\" feature git commit message would look like this:\ngit commit -m \"feat: Add shiny switch to the UI\"\nNew feature prefix is not New, it's feat, and also, command never starts with a first capital letter. The naming convention is exactly like in Commitizen's screenshot:\n\nYou put this format in git commit message, for example git commit -m \"test: Update breaking switch test parameters\", using imperative, command (\"test\"/\"feat\"/\"fix\"/..) at low caps, message at first capital letter (the text you put).. ",
    "TheSpyder": "\nYep. All local file: specifiers are temporarily resolved to the version range of the package they point to before being packed into the tarball. Lerna itself uses this pattern.\n\nI really wish this was documented better (I haven't found any reference to it yet other than this ticket). I am experimenting with migrating a large project to a monorepo and spent a bunch of time setting up a script to sed the incoming package.json files because it looked like lerna link convert wasn't giving me what I needed \ud83d\ude33\nI'm also seeing yarn warnings about colliding ranges as a result of running convert, I'm still determining whether I've done something wrong or it's an issue with the command.. I am using workspaces, but I get the impression lerna is still valuable for things like publishing. Mostly I was looking for the behaviour to hoist the devDependencies references to the root, yarn auto-hoisted most things but not all so I figure specifying them in the root would be a better place to resolve minor differences.\nThanks for pointing me to link:, that helps a lot :)\nI'm fairly sure what I see is a bug, I'll work on a reproduction case and file a new issue. lerna link convert adds my in-repo packages to the root package.json devDependencies as file:../pkgname in addition to the dependencies file:packages/pkgname.. The version management and publishing is what I'm looking for, I'm still experimenting with how I want the monorepo to work for us. Even if it's the expected behaviour based on what the convert script is doing, finishing with file links that point outside of the monorepo is a fairly clear bug.. I realise that, hence my plan to create a reproduction case and report as a bug. Sorry for dragging the thread off topic :). ",
    "guillaumevincent": "Ack\nthank you for your answer. ",
    "AndyOGo": "@evocateur \nThanks for your answer.\nWell, unfortunately I observed another behaviour, publishConfig is indeed required for unscoped, public npm packages.\nHere is my repo, containing 2 packages, to make it work I had to modify the package.json of each:\n- https://github.com/AndyOGo/custom-elements-defouc/blob/master/packages/posthtml-custom-elements-defouc/package.json#L45-L47\n- https://github.com/AndyOGo/custom-elements-defouc/blob/master/packages/with-custom-elements-defouc/package.json#L43-L45\nI will revert these additions and will publish a breaking-branch for you to have a reproducible example.. @evocateur \nOne important detail I may omitted is that I used lerna publish for an initial publish of non-existing npm packages \ud83e\udd14 . Just tryed to reproduce with single monorepo containing just a plain empty npm package, no chance.\nDon't know what caused the issue so far \ud83e\udd14. You are right, that's interesting.\nI found the commit that introduced gitHead property:\nhttps://github.com/AndyOGo/custom-elements-defouc/commit/8cfd7b707ac2fdce8614486cc5eb8d61068f2afe\nActually I tried to lerna publish 5 times. The first 4 only updated the version and added git tags successfully but no new npm package.\nAnd with that commit above the fifth lerna publish also landed at npm's registry \ud83d\ude15 \nTo prove to you:\n6 Releases at github:\nhttps://github.com/AndyOGo/custom-elements-defouc/releases\nJust 2 Versions at npm each:\n\nhttps://www.npmjs.com/package/posthtml-custom-elements-defouc\nhttps://www.npmjs.com/package/with-custom-elements-defouc. For the second package I use nwb.\n\nI remember running nwb new web-module my-module also created a .git/ repo within my package (which I removed of course immediately).\nThough maybe lerna and nwb aren't that compatible \ud83e\udd14 . Oh noo @stale bot, do not close this issue \ud83d\ude1d . ",
    "zefexdeveloper": "I added --stream to the command and it worked, I didn't get the reason tho. ",
    "kyasbal-1994": "After my ispection, lerna seems triggered a lot of npm ci commands.\n\nIs there any way to restrict the count of spawning?. I could fix by limiting max concurrency with the command lerna bootstrap --concurrency=2.\nI've found several issues related to this and they use --mutex also. Is this actually needed?\nI wonder they are not related to memory issue.. @evocateur Thank you for replying me. After fixing the concurrency to 2, the error wont show again. It seems solved perfectly. Thank you.. ",
    "anyexinglu": "@evocateur, do you mean, yarn bootstrap --hoist cannot works with npmClient: yarn?\nI've tried many ways to use this and failed.\nSince this article(https://yarnpkg.com/blog/2017/08/02/introducing-workspaces/) told me:\n\nStarting with Lerna 2.0.0, when you pass the flag --use-workspaces when running Lerna commands, it will use Yarn to bootstrap the project\n\nI thought they works well together.\n. ",
    "pengisgood": "\ud83c\udf1d \ud83c\udf1d \ud83c\udf1a \ud83c\udf1a \nNo one interested in the feature?. ",
    "timkinnane": "Thanks @evocateur I assumed that an error from npm could cause the lerna publish process to exit, thereby preventing the git actions from occurring. When you say they're independent, do you mean it's two parallel processes? So they both run regardless of each other's success?\nJust wanted to clarify that if you could. I'm happy to close the issue and use the --no-push approach, thanks for pointing that out.. ",
    "Undistraction": "@evocateur perhaps. I'm a little unclear about the current behaviour. If I have hoist: true in my config, should lerna add result in hoisted dependencies? Even if it should, I think there is something amiss here. I'll try and narrow down exactly what is causing this issue and update this issue.. So the specific behaviour is this:\nI have a packages called @example/dev that contains all the development-related packages for use in my packages. It has devDependencies on npm-hosted packages called nps and nps-utils. If I run lerna bootstrap --hoist these packages are installed in my lerna root's node_modules dir.\nIf I run lerna add ... and add any package, local or remote, with or without scope, I see the package installed and I see the output from lerna running bootstrap, however once this has finished, npx and nps are no longer in the root node_modules dir. The only way to get them back is to run lerna boostrap --hoist again.\nThis happens every time, without fail.. @evocateur \n\n\nI use those packages in other packages that are outside the monorepo, so keeping them together and in a single location that I can publish makes sense.\n\n\nI prefer to keep the root as clean as possible and only add things to the root package.json that are specific to the monorepo.\n\n\nAre you saying this isn't a bug? Or that it is a known bug but that there are workarounds?\n. @evocateur Thanks for the advice. Can you point me to any docs for lerna link convert? The docs for lerna link don't mention convert at all.. ",
    "sebald": "Hey, thanks for you answers.\nI ended up just using execa for this and it works butter smooth \ud83d\ude42\nMy thinking was that if I \"just\" call lerna like this, it will definitely pick up the lerna.json and the command will run as usual.\n```ts\nexport const getLernaBinary = async (cwd: string) => {\n  const { stdout } = await execa('yarn', ['bin', 'lerna'], { cwd });\n  return stdout;\n};\nexport type LernaCommand =\n  | 'publish'\n  | 'version'\n  | 'bootstrap'\n  | 'list'\n  | 'changed'\n  | 'diff'\n  | 'exec'\n  | 'run'\n  | 'init'\n  | 'add'\n  | 'clean'\n  | 'import'\n  | 'link'\n  | 'create';\nexport const createLernaRunner = async (\n  cwd: string,\n  defaultOptions: Options = {}\n) => {\n  const bin = await getLernaBinary(cwd);\n  return async (\n    cmd: LernaCommand,\n    args: string[] = [],\n    options: Options = {}\n  ) =>\n    execa(bin, [cmd, ...args], {\n      stdio: 'inherit',\n      ...defaultOptions,\n      ...options,\n    });\n};\n```\nPS: Would still be nice though if the API was a little bit more accessible. There is so much room for cool thinks to build on top of lerna \ud83d\ude42 For example, I needed the run api (and project + package) to have a development script that automatically figures out which packages need to be build to build a chosen packages (via lerna's excellent dependency graph).. Thanks!\nPS: I honestly was startled when I looked at conventional-changelog source and that it still uses q \ud83d\ude14. @hutson Sorry, I didn't want to offend anyone. When I first digged into the codebase I was confused that it still uses q, because the project is so widely used \ud83d\ude42. ",
    "LinusU": "@Vinod1161987 private packages are a paid feature of Npm, unless you are paying for private packages for the org you are trying to publish to, you won't be able to publish private packages there.... ",
    "xiaoyanzheng": "in packages/AAA, execute   this \nlerna run --scope  BBB  local -- index.js \nin packages/BBB, packages.json, defined script\n{\n  \"name\": \"BBB\",\n  \"scripts\": {\n        \"local\": \"NODE_ENV=local ./node_modules/nodemon/bin/nodemon.js --inspect\"\n  }\n}\nthe output\nNODE_ENV=local ./node_modules/nodemon/bin/nodemon.js --inspect \"index.js\"\nindex.js ,it is a  string,  I hope it is a normal path\n. > Your example is correct. Script local would be executed, and the argument index.js would be passed to it.\nyes, index.js is passed to BBB local script , but  the terminal execute command is\uff1a\nplease look attatch image\n\n . ",
    "dmhalejr": "Went ahead and took the above evocateur response and added it to the README. Let me know if that clarifies enough or if additional changes are needed. Thanks for all you do!. ",
    "adamdoyle": "Is that fundamentally any different from this?\nnpm install --save-dev typescript tslint gulp gulp-watch gulp-plumber ts-node @types/node @types/gulp @types/gulp-watch @types/gulp-plumber; lerna bootstrap\nBecause I think that's actually fewer characters.\nIdeally I'd just hook lerna bootstrap into a stage of the npm lifecycle, but I don't really think there's a lifecycle stage for \"after running install\".  My understanding is that post-install is more for after the project has been installed as a dependency in a different project.\nFor me it's just yet another learning curve (or \"lerna curve\" \ud83d\ude09) for the people I'm trying to convince to adopt the tool.  A familiar API, in my opinion, would go a long way towards easing adoption.. I wouldn't install them in every package.  But using 'npm install' inside a package breaks the symlinks.  So you have to run 'lerna bootstrap' to fix them again.  I was just suggesting that if one could use a Lerna command with a similar API as 'npm install', it could not break the inter-package symlinks when installing a third party external dependency. . That's a fair point.  npm doesn't have to deal with the requirement for managing multiple package.json files, and that does seem to complicate things.\nOut of curiosity, what is the use case for managing via lerna CLI the dependencies for a different package than the one that lives in your current directory?  Is it something like:  you're working on a package that consumes an in-house library and you realize that the library needs an additional dependency?  In that case, wouldn't you have to cd to that project directory anyways to make the necessary changes to the source files?\nThe default behavior could be operate-on-the-project-within-current-filesystem-scope and the [arguably] less-common tasks such as \"go off and change dependency for one of my other packages in this monorepo\" could be relegated to a [more-verbose] flag like --scope.\nSample\nSample Project Hierachy\n\u250c project/\n    \u251c\u2500\u2500\u2500\u252c packages/\n    \u2502   \u251c\u2500\u2500\u252c library/\n    \u2502   \u2502  \u2514\u2500\u2500\u2500 libmain.js\n    \u2502   \u2502  \u2514\u2500\u2500\u2500 package.json\n    \u2502   \u251c\u2500\u2500\u252c application1/\n    \u2502   \u2502  \u2514\u2500\u2500\u2500 app1main.js\n    \u2502   \u2502  \u2514\u2500\u2500\u2500 package.json\n    \u2502   \u2514\u2500\u2500\u252c application2/\n    \u2502      \u2514\u2500\u2500\u2500 app2main.js\n    \u2502      \u2514\u2500\u2500\u2500 package.json\n    \u2514\u2500\u2500\u2500 package.json\nExample Session\nAdding/removing external dependencies\ncd packages/library\nlerna install --save rxjs \u2190modify project/library/package.json to add rxjs as dependency\nlerna install --save-dev gulp \u2190modify project/library/package.json to add gulp as dev dependency\ncd ../application2\nlerna remove typescript \u2190modify project/application2/package.json to remove a dev dependency \nAdding/removing internal dependencies\ncd packages/application1\nlerna install --save ../library \u2190relative path\u00b9 disambiguates internal dependency from potentially same-named external libraries\nlerna remove library \u2190remove existing internal dependency\nHoisting\nHaven't really used hoisting much yet, so it's entirely possible I'm overlooking something related to that.\nNotes\n\u00b9 Other possible solutions for disambiguation include:  (1) auto-select by prioritizing internal over external, or (2) automatically add all subdirectories of the packages/ directory upon any run of lerna CLI [or at least during lerna bootstrap], potentially supporting a blacklist and/or whitelist that is potentially modifiable via lerna CLI.. ",
    "aleclarson": "Thanks for the write-up! \ud83d\udc4d \nYour viewpoint makes sense, but my use case was not mentioned.\nI want to use my two Lerna forks locally (they're CLI-related) without publishing anything. This means linking from one Lerna repo to the other. I've already written a script that does this, but I'd like to have this functionality in Lerna by default (if it makes sense).\nSo my motivation is not E2E testing nor version shyness.\nLMK if I'm not being clear. \ud83d\ude04 \n. whitecolor/yalc might be what I'm looking for. I'll let ya know if it solves my use case. \ud83d\udc4d . Side note: Merging the two Lerna repos is not an option, since I want to stay in sync with upstream.. ",
    "artemirq": "It's work if i add field name to package.json with value root. It's strange behavior, because lerna in some projects works without field name in package.json :/. @evocateur I just started recently using monorepo architecture with lerna + yarn workspaces . I don't know how to better. I have no found best practices guides to get started with this technologies, therefore i just learned it by examples on Github. I would be glad if you would guide me on the right path ^^. @evocateur I just started recently using monorepo architecture with lerna + yarn workspaces . I don't know how to better. I have no found best practices guides to get started with this technologies, therefore i just learned it by examples on Github. I would be glad if you would guide me on the right path ^^. Up!. ",
    "damienwebdev": "@evocateur just to add an additional use-case here, when I'm doing:\nbash\nlerna run [scriptName]\nI often find myself having to overcomplicate my scriptNames in my packages in order to be able to separate them accordingly.\nGenerically, in my project I have \"packages\" and \"apps\". Sometimes I only want to build packages, other times only apps. Currently, I often end up doing the following in my packages.\njson\n{\n...\n  \"scripts\": {\n    \"build\": \"dowhatever\",\n    \"build:packages\": \"dowhatever\",\n  }\n...\n}\nIt would be nice if I could do just the following:\nbash\nlerna run [scriptName] --path-filter=\"packages\"\nHaving this feature would make my life easier.. ",
    "GuyMograbi": "\n\"What specific execution are you attempting to run in a postinstall phase?\"\n\nI am running some other npm tasks. Example package.json could look like this: \n```\n{\n    \"name\": \"example\", \n    \"version\": \"0.0.0\", \n    \"scripts\": {\n        \"postinstall\": \"npm-run-all bower:install webdriver:update\", \n         \"bower:install\": \"bower install --allow-root \",\n         \"webdriver:update\": \"webdriver-manager update --versions.standalone=3.5.3   --versions.chrome=2.42\"\n      }\n}\n```\n\n\"Not having all the details, it seems like the workaround is to pass an explicit --npm-path npm argument to npm-run-all?\"\n\nI will test this and update you, but this is a workaround. According to npm-run-all since Lerna is overriding npm_execpath variable, it should support the same flags as npm would. In this case --silent at least for lerna run... subcommand. \n. @evocateur  I am installing lerna globally. \nHow can I use lockfiles?? is lerna using lockfiles? \nWhy is this bug closed? And why is it labeled upstream? this is definitely lerna's bug. \nInstalling lerna globally, does not lock versions (or locks on wrong versions) of dependencies and will break if a dependency breaks. \nOtherwise - it would not have failed in this scenario. \n. brought up as part of : https://github.com/lerna/lerna/issues/1850 which was mistakenly identified as an upstream bug. \nSolution was suggested by @evocateur https://github.com/lerna/lerna/issues/1850#event-2058506291 as a suggestion to users instead of actual fix to lerna. . ",
    "Orange-C": "\nDo you have an auth token in your npm config for that registry? In a .npmrc file, it would look something like\n//registry.npm.foo.com:_authToken=\"<base64String>\"\n\nYes, here is my .npmrc in root. npm publish works fine but lerna publish got 401\nemail=\n//registry.npmjs.org/:_authToken=somehashblabla\n//registry.npm.foo.com/:_password=bar\n//registry.npm.foo.com/:username=foo\n//registry.npm.foo.com/:email=foo@bar.com\n//registry.npm.foo.com/:always-auth=false. > Yeah, I figured it was a legacy auth-related problem. I really wish third-party registries would get on board the _authToken train.\nThanks, I'll talk about this with the admin of our registry. \nAnd is there any way I could use lerna publish now? I mean maybe some old version of lerna was fine but didn't work for me because the dependencies were updated. Maybe I could lock the version of some dependencies but which? I'll be appreciated if you help me out:)~. I talked with my admin, he said there is no plan to support _authToken\ud83d\ude22\nIs there any possibility to make some old version of lerna compatible with the old auth? I'll figure my way out to temporarily solve the problem, and I'll be really appreciated if you are going to make old version compatible.\ud83d\ude0a. > Does this still reproduce with the latest lerna v3.8.4?\nv3.8.4 is fine! Thanks a lot~I'll close the issue.. ",
    "madbence": "it's a glob pattern, so you can lerna add react --exact --scope '{components,frontend-admin,frontend-public}' (use quotes to prevent glob expansion by the shell).. indeed, it'd be nice to have a convenient way to specify multiple packages. lerna uses yargs under the hood to parse the arguments, maybe --scope could be interpreted as array instead of string, so --scope foo bar baz will be interpreted as --scope foo --scope bar --scope baz.. to me it seems that npm i --no-save is currently the only way to do this, but my fear is that the builds won't be reproducible then, because the package-lock.json assumes that the monorepo dependencies will be linked.\noptimizing the build is not an easy task, as right now it's mostly about compiling typescript down to js, which is kind of unavoidable.. i'm using semver version specifiers to express the dependencies.\nbased on my current understanding, right now in order for reproducible builds (ie. installing deps based on package-lock.json), assuming that you're only using semver version specifiers to express your dependencies, you need to bootstrap dependencies as well (--include-filtered-dependencies), because in a package a the package-lock.json no longer represents the used dependencies of a (you also need package-lock.json from package b, etc, whatever package a is directly or indirectly depending on in your monorepo).. i'd like to understand what do you mean by separation of concerns in this context. usually we work with this kind of structure:\n\nall the packages and the applications are in the same monorepo. most of the time, people are working on application a or application b (usually not both). when i'm working on application a, i don't want to bootstrap c, d, f, and g, because they are touched infrequently, they contain only some common components, and they might take a long time to bootstrap. i also don't want to bootstrap e and h, because i never work with them (and potentially i don't even know what's their purpose).\nright now, i have to either\n\nbootstrap all the packages or\nbootstrap application a and it's dependencies (direct or indirect)\n\ni'd like to avoid both options, as they are too much time-consuming. as far as i know, there's no third option, i'm not sure what do you mean by moving away from lerna bootstrap. i can npm install in application a, but that'll mess up the package-lock.json file.. ",
    "mattfysh": "This doesn't work, using --scope '{pkgA,pkgB}' - definitely using quotes, and I still get EFILTER. @evocateur my bad, I was using the directory name, and not the package.json name. Sorry!. ",
    "deiga": "I'm seeing the same issue with my packages as well. @evocateur Can you elaborate what you mean with \"clear reproduction\"?. @evocateur I'm trying to ask what you need from me.\nI'm not going to publish our private git repo to you, so I need to know what parts you need.. ",
    "ollisal": "Well you can do this still, in your package.json:\njs\n  \"devDependencies\": {\n    // ...\n    \"lerna\": \"3.8.5\",\n    \"@lerna/bootstrap\": \"3.8.5\"\n    // ...\n  }\ni.e. just add a direct dependency to the still-working @lerna/bootstrap version, and it'll get installed by npm to a place where the main lerna package will use it, as it matches its ^ version requirement just fine.. ",
    "coutin": "\nWell you can do this still, in your package.json:\njs\n  \"devDependencies\": {\n    // ...\n    \"lerna\": \"3.8.5\",\n    \"@lerna/bootstrap\": \"3.8.5\"\n    // ...\n  }\ni.e. just add a direct dependency to the still-working @lerna/bootstrap version, and it'll get installed by npm to a place where the main lerna package will use it, as it matches its ^ version requirement just fine.\n\nThis might work for you project, but this is actually breaking everything as soon as you have lerna installed globally (Docker image, locally, etc .. ) . ",
    "oprearocks": "Thank you for your work! Had a rough time yesterday debugging this but never thought about looking through Lerna's source. . ",
    "rrousselGit": "Indeed Dart is unrelated to Npm, it has its own dependency management.\nI'm asking this mostly because while monorepo is not specific to lerna, this is how to deal with monorepo that I want to port to Dart.\nDart dependency system has many things in common with NPM, which means that most of the Lerna features could potentially apply here too.\nI'm entirely fine with using different names/host/whatever. But by principle, since it would have so many common points with the actual lerna cli, I thought it'd be worth asking. . To be clear, I do not really expect some help or any change within lernajs. I'm totally fine with making something on my own.\nThis is mostly informative and to see if there is kind of branding possible; similarly go how there's an official mobxdart in development even although entirely independent from the js implementation. . ",
    "foo4u": "The error message is clear. However, when running Lerna on a CI server you can't always ssh in and run git status to see what went wrong.. ",
    "priley86": "a big +1 here... have been stuck on this error all day after migrating from lerna 2 -> lerna 3. This would be helpful for many others stuck with this same error I'm guessing.... adding a simple git status in Travis prior to lerna publish might prove useful... particularly if your team is checking in yarn.lock's with varying hashes/versions of yarn.  In our case, this was the culprit... Travis was using 1.7.0 (and team had upgraded to Yarn 1.13).\nAt the very least, this should help you find the culprit and either gitignore it or find a way to isolate it prior to running lerna...\nhttps://github.com/patternfly/patternfly-react/blob/master/.travis/after_success.sh#L13. ",
    "hipstersmoothie": "Yeah this one is killing me. ",
    "sidharthachatterjee": "This looks great! We're looking at generating GitHub releases with change logs at https://github.com/gatsbyjs/gatsby/ and eagerly waiting for this to get in!\nThank you for this @milesj . ",
    "azz": "Is there a issue to track supporting --no-changelog with --github-release?. I'm not completely across the technical details, but generating both CHANGELOG.md and GitHub releases is duplicate information. . Raised https://github.com/lerna/lerna/issues/1959 to discuss. Not sure if this is the correct way to handle negative options?. ",
    "microcipcip": "Sometimes I publish a new version and I always find some small typos and I have to publish a new version for that, I feel like it may not be needed, but thanks for confirming that this is not possible ATM.. Ok, having always used Lerna I wasn't aware that the standard npm publish forces you to update the version.. ",
    "marikaner": "But should lerna care about what changed? This information is not used in the above described scenario. Wouldn't it be cleaner to skip the overhead of evaluating the git files / determining what changed when this information is irrelevant?. I guess so ;) Just seemed like odd behavior to me.. Hello @evocateur,\nI have to try this again, because it is driving me crazy right now...\nFirst of all my previous workaround lerna exec -- npm version XXX is not sufficient, because of course our packages are interdependent and the dependency versions need to be updated, too. That is one of the main reasons we are using lerna.\nNow, I am in contact with the people managing our central build service and I was able to move the version update before the removal of the .git files. Unfortunately, I just realized this still does not allow us to use lerna for version updates as they are not checking out branches but commits, which is a good thing as this ensures there will be no changes pushed back to the branch.\nSo once more, I would like to reopen the discussion: Why should lerna version need the code to be on a branch, when no git features are used?\nYou said that git is needed to determine what changed since the last tagged release in order to determine which packages need a version update. This is unnecessary for the default locked mode, isn't it? Additionally, it can be skipped with the --force-publish option and should not be necessary in that case either.\nLooking at the implementation of the command, I do not see where the currentBranch is even used outside of the git related flags:\nhttps://github.com/lerna/lerna/blob/c78a86cfc18fac6cfdd179c9e0c97ec251ef17ed/commands/version/index.js#L88\nI wonder whether just replacing this:\nhttps://github.com/lerna/lerna/blob/c78a86cfc18fac6cfdd179c9e0c97ec251ef17ed/commands/version/index.js#L90\nwith this:\njs\nif ((this.pushToRemote || this.options.allowBranch || this.commitAndTag) && this.currentBranch === \"HEAD\")\nwould already do the trick? (Well, I guess there is more to that, but I just do not believe that there is no getting around that, when this is clearly unused).\nLet me know what you think. I am willing to help with this, as I think lerna is an awesome tool that takes away some of the complexity of maintaining a multipackage repo with dynamically generated packages. I want to use lerna, but at the moment I don't see any better solution than creating a script that updates the versions of my interdependent packages, or do you have better suggestions?. To my understanding this is not possible. I saw another request of this kind before https://github.com/lerna/lerna/issues/1868. But it would be very helpful in our case, too.. Thank you for your review, @evocateur. I reverted the changes to the lockfile and will add tests as soon as we agree on the usefulness of this PR ;)\nI finally understood your concerns. I misunderstood the purpose of the fixed mode (even though I read your documentation multiple times *) and am now aware that my issue is rather a corner case as you will basically only not need to be on a branch when using --force-publish as well as skipping tagging + pushing.\nI still think it might be an improvement as it moves lerna's behaviour closer to npm's (npm does not fail without git).\nPlease take a look at my current implementation and let me know whether this goes into the right direction in your opinion. I just overrode the requiresGit method and skipped all branch related actions accordingly.\n* \"Use this if you want to automatically tie all package versions together.\" confirmed my intuitive understanding.... @evocateur, I added some tests, one is still failing, if will try to get this fixed if I have time this evening, otherwise maybe you can help?. @evocateur thank you. I removed forcePublish and independent mode from the conditions for requiresGit. Also, I moved the initialization of the command properties to configureProperties and adjusted the test conditions accordingly.. @evocateur What do you think?. Wohoo!. Ok, I guess this makes it much simpler. :). \ud83d\udc4d . I wasn't 100% sure about this either, but it seemed legit :). I just merged the current master and resolved the hereby resulting merge conflict. Did you have anything else in mind? For rebasing I would have to either create a new branch or force push. Anyways, if you squash and merge this shouldn't make a difference.. ",
    "jasonxia23": "Can we just add a deprecation warning in the website.. ",
    "wavebeem": "I'd be happy to submit a PR for this but I wanted to open this up to feedback first \ud83d\ude04. I'm taking a look into a PR for this today. ",
    "tweet": "The entire lerna-debug.log is here.\nlerna-debug.log\n browsers demand the next line be empty \ntxt\n0 silly argv { _: [ 'publish' ],\n0 silly argv   yes: true,\n0 silly argv   y: true,\n0 silly argv   composed: 'publish',\n0 silly argv   lernaVersion: '3.10.5',\n0 silly argv   '$0': 'node_modules\\\\lerna\\\\cli.js' }\n1 notice cli v3.10.5\n2 verbose rootPath D:\\lerna-repo\n3 info versioning independent\n4 verbose session 5144b5684a90036b\n5 verbose user-agent lerna/3.10.5/node@v10.10.0+x64 (win32)\n6 verbose git-describe undefined => \"@lerna-repo/repo2@2.1.1-3-g523e8d1\"\n7 silly git-describe parsed => {\"lastTagName\":\"@lerna-repo/repo2@2.1.1\",\"lastVersion\":\"2.1.1\",\"refCount\":\"3\",\"sha\":\"523e8d1\",\"isDirty\":false}\n8 silly argv { _: [ 'publish' ],\n8 silly argv   yes: true,\n8 silly argv   y: true,\n8 silly argv   composed: 'publish',\n8 silly argv   lernaVersion: '3.10.5' }\n9 verbose rootPath D:\\lerna-repo\n10 silly isAnythingCommitted\n11 verbose isAnythingCommitted 1\n12 silly currentBranch\n13 verbose currentBranch feat/test\n14 silly remoteBranchExists\n15 silly isBehindUpstream\n16 silly isBehindUpstream feat/test is behind origin/feat/test by 0 commit(s) and ahead by 0\n17 silly hasTags\n18 verbose hasTags true\n19 silly git-describe.sync \"@lerna-repo/repo2@2.1.1-3-g523e8d1\" => {\"lastTagName\":\"@lerna-repo/repo2@2.1.1\",\"lastVersion\":\"2.1.1\",\"refCount\":\"3\",\"sha\":\"523e8d1\",\"isDirty\":false}\n20 info Looking for changed packages since @lerna-repo/repo2@2.1.1\n21 silly diffSinceIn @lerna-repo/repo2@2.1.1 packages/repo1\n22 silly diff\n23 silly diffSinceIn @lerna-repo/repo2@2.1.1 packages/repo2\n24 silly diff packages/repo2/CHANGELOG.md\n24 silly diff packages/repo2/index.js\n24 silly diff packages/repo2/package.json\n25 verbose updated @lerna-repo/repo2\n26 verbose git-describe undefined => \"@lerna-repo/repo2@2.1.1-3-g523e8d1\"\n27 silly git-describe parsed => {\"lastTagName\":\"@lerna-repo/repo2@2.1.1\",\"lastVersion\":\"2.1.1\",\"refCount\":\"3\",\"sha\":\"523e8d1\",\"isDirty\":false}\n28 silly independent for @lerna-repo/repo2 at D:\\lerna-repo\\packages\\repo2\n29 verbose independent increment 2.1.2 by patch\n30 silly batched [ PackageGraphNode {\n30 silly batched     name: '@lerna-repo/repo2',\n30 silly batched     externalDependencies:\n30 silly batched      Map {\n30 silly batched        'babel-eslint' => [Object],\n30 silly batched        'eslint' => [Object],\n30 silly batched        'eslint-config-hwit' => [Object],\n30 silly batched        'eslint-plugin-vue' => [Object],\n30 silly batched        'lint-staged' => [Object],\n30 silly batched        'vue-eslint-parser' => [Object] },\n30 silly batched     localDependencies: Map {},\n30 silly batched     localDependents: Map {} } ]\n31 info auto-confirmed\n32 silly lifecycle No script for \"preversion\" in \"root\", continuing\n33 silly lifecycle No script for \"preversion\" in \"@lerna-repo/repo2\", continuing\n34 silly lifecycle No script for \"version\" in \"@lerna-repo/repo2\", continuing\n35 silly independent for @lerna-repo/repo2 at D:\\lerna-repo\\packages\\repo2\n36 silly independent writing new entry: \"## [2.1.3](http://ifoundation.btit.huawei.com:8080/tfs/TFSCollection/ERP-MTS_MiddleTier/_git/lerna-repo/compare/@lerna-repo/repo2@2.1.1...@lerna-repo/repo2@2.1.3) (2019-01-17)\\n\\n**Note:** Version bump only for package @lerna-repo/repo2\\n\\n\\n\\n\"\n37 verbose independent wrote D:\\lerna-repo\\packages\\repo2\\CHANGELOG.md\n38 silly lifecycle No script for \"version\" in \"root\", continuing\n39 silly gitAdd [ 'D:\\\\lerna-repo\\\\packages\\\\repo2\\\\package.json',\n39 silly gitAdd   'D:\\\\lerna-repo\\\\packages\\\\repo2\\\\CHANGELOG.md' ]\n40 silly gitCommit chore(release): publish [ci skip] ***NO_CI***\n40 silly gitCommit\n40 silly gitCommit  - @lerna-repo/repo2@2.1.3\n41 verbose git [ 'commit',\n41 verbose git   '-F',\n41 verbose git   'C:\\\\Users\\\\Test~1\\\\AppData\\\\Local\\\\Temp\\\\3450cd-c497-38r6-a95f-0bfca887b2c1\\\\lerna-commit.txt' ]\n42 silly gitTag @lerna-repo/repo2@2.1.3\n43 verbose git [ 'tag',\n43 verbose git   '@lerna-repo/repo2@2.1.3',\n43 verbose git   '-m',\n43 verbose git   '@lerna-repo/repo2@2.1.3' ]\n44 silly lifecycle No script for \"postversion\" in \"@lerna-repo/repo2\", continuing\n45 silly lifecycle No script for \"postversion\" in \"root\", continuing\n46 info git Pushing tags...\n47 silly gitPush origin feat/test\n48 silly batched [ PackageGraphNode {\n48 silly batched     name: '@lerna-repo/repo2',\n48 silly batched     externalDependencies: Map {},\n48 silly batched     localDependencies: Map {},\n48 silly batched     localDependents: Map {} } ]\n49 info publish Publishing packages to npm...\n50 notice Skipping all user and access validation due to third-party registry\n51 notice Make sure you're authenticated properly \u00af\\_(\u30c4)_/\u00af\n52 warn ENOLICENSE Packages @lerna-repo/repo2 are missing a license\n53 silly getCurrentSHA\n54 verbose getCurrentSHA 394d73d06d13a133729d1704141997a8e069706c\n55 silly lifecycle No script for \"prepublish\" in \"root\", continuing\n56 silly lifecycle No script for \"prepare\" in \"root\", continuing\n57 silly lifecycle No script for \"prepublishOnly\" in \"root\", continuing\n58 silly lifecycle No script for \"prepack\" in \"root\", continuing\n59 verbose pack-directory packages\\repo2\n60 silly lifecycle No script for \"prepublish\" in \"@lerna-repo/repo2\", continuing\n61 silly lifecycle No script for \"prepare\" in \"@lerna-repo/repo2\", continuing\n62 silly lifecycle No script for \"prepublishOnly\" in \"@lerna-repo/repo2\", continuing\n63 silly lifecycle No script for \"prepack\" in \"@lerna-repo/repo2\", continuing\n64 silly lifecycle No script for \"postpack\" in \"@lerna-repo/repo2\", continuing\n65 verbose packed @lerna-repo/repo2 packages\\repo2\n66 silly lifecycle No script for \"postpack\" in \"root\", continuing\n67 verbose publish @lerna-repo/repo2\n68 http fetch PUT 404 http://internal.company.com/npm-repo/npmjs/@lerna-repo%2frepo2 258ms\n69 error Error: 404 Not Found - PUT http://internal.company.com/npm-repo/npmjs/@lerna-repo%2frepo2\n69 error     at res.buffer.catch.then.body (D:\\lerna-repo\\node_modules\\npm-registry-fetch\\check-response.js:104:15)\n\nMy package.json scripts is\njson\n  \"scripts\": {\n    \"deploy\": \"lerna publish --yes\",\n    \"echo\": \"echo next step\",\n    \"example\": \"yarn deploy && yarn echo\"\n  }\nWhen I run script yarn example, if the 1st sub-script yarn deply failed, yarn echo should not be executed, but it was executed indeed.\ncommand-window-execute-result.txt\n browsers demand the next line be empty \n```text\nPS D:\\lerna-repo> yarn example\nyarn run v1.12.3\n$ yarn deploy && yarn echo\n$ lerna publish --yes\nlerna notice cli v3.10.5\nlerna info versioning independent\nlerna info Looking for changed packages since @lerna-repo/repo2@2.1.1\nChanges:\n - @lerna-repo/repo2: 2.1.2 => 2.1.3\nlerna info auto-confirmed\nlerna info git Pushing tags...\nlerna info publish Publishing packages to npm...\nlerna notice Skipping all user and access validation due to third-party registry\nlerna notice Make sure you're authenticated properly \u00af_(\u30c4)_/\u00af\nlerna WARN ENOLICENSE Packages @lerna-repo/repo2 are missing a license\nlerna http fetch PUT 404 http://internal.company.com/npm-repo/npmjs/@lerna-repo%2frepo2 258ms\nlerna ERR! Error: 404 Not Found - PUT http://internal.company.com/npm-repo/npmjs/@lerna-repo%2frepo2\nlerna ERR!     at res.buffer.catch.then.body (D:\\lerna-repo\\node_modules\\npm-registry-fetch\\check-response.js:104:15)\nlerna ERR! lerna 404 Not Found - PUT http://internal.company.com/npm-repo/npmjs/@lerna-repo%2frepo2\n$ echo next step\nnext step\nDone in 14.41s.\n``` \n. ",
    "JamesHenry": "Is the idea that you anticipate that the publish build job will fail in these cases and handle it accordingly? If that's the case I'm still surprised I have not seen other people referencing it. Ok ignore me, I can no longer reproduce - the number after alpha now seems to be reliably incrementing, so the SHA is not the only point of differentiation.\nThanks for your work on lerna! . ",
    "starpit": "oof. sorry the 130 was a mistake. the exit code is 1. --no-optional doesn't seem to work, when used in tandem with --hoist.\nhere is what i get on linux for (cd packages/oops && npm install):\nbash\nnpm WARN oops@ No description\nnpm WARN oops@ No repository field.\nnpm WARN oops@ No license field.\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fileicon@0.2.2 (node_modules/fileicon):\nnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fileicon@0.2.2: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (current: {\"os\":\"linux\",\"arch\":\"x64\"})\nfor (cd packages/oops && npm install --no-optional), the output is identical without the last two lines\nfor npx lerna bootstrap, no errors\nfor npx lerna bootstrap --hoist, i get the errors above, same with -- --no-optional\nif i ctrl+z the bootstrap midway through, and cat the top-level package.json, i see that lerna has hoisted optional deps to be regular deps at the top-level. this seems to be the root of the problem. i don't know if i'm looking in the right place, but bootstrap seems to merge optional, dev, and regular deps into a single map?\nhttps://github.com/lerna/lerna/blob/master/commands/bootstrap/index.js#L342-L347. ",
    "MMT-LD": "The same is happening for me... running lerna publish, publishes my tarball to private verdaccio and then errors... i can still pull my updated package though but i guess thats not the point.\n```\n\nlerna publish\n\nlerna notice cli v3.10.6\nlerna info versioning independent\nlerna ERR! EUNCOMMIT Working tree has uncommitted changes, please commit or remove changes before continuing.\nlerna info lifecycle packages@undefined~publish: Failed to exec publish script\n```\nconfig:\n{\n  \"lerna\": \"3.10.6\",\n  \"packages\": [\n    \"packages/*\"\n  ],\n  \"version\": \"independent\",\n  \"npmClient\": \"yarn\",\n  \"useWorkspaces\": true,\n  \"command\": {\n    \"publish\": {\n      \"allowBranch\": \"master\",\n      \"conventionalCommits\": true,\n      \"message\": \"chore(release): updated release notes and package versions\"\n    }\n  }\n}\nthe only change is the new githead ref, which is now uncommitted... any ideas? sorry this code is in a private repo.\non a side note i have a repo (again private) that has a single package and this is working as expected (same config as one above)... the one that is breaking has multiple packages.\nMaybe i'm missing something?. @evocateur thanks for pointing this out. So i assume i should not have \"publish\" in my top level package.json file... like so;\n\"scripts\": {\n    \"publish\": \"lerna publish\",\n    \"prepublish\": \"yarn build\",\n  },\ni think i can see why this would conflict. Thanks. I'll give it a go.. @evocateur Thanks all is working as expected now - not sure if this has been added to the docs or not, but it could help others just knowing not to include publish script in package.json... But maybe it was just overlooked from my part :-). Thanks for your reply. Here is the full log (with placeholders) - i originally tried on 3.10.6 which was the same version.\nYes none of the packages were published. Im assuming i run this from the top level. \nnpx lerna publish from-git\ni should probably add that publishing to a local verdaccio works fine. It seems only the remote is the issue.\n0 silly argv { _: [ 'publish' ],\n0 silly argv   registry: '<registry-url>',\n0 silly argv   composed: 'publish',\n0 silly argv   lernaVersion: '3.10.6',\n0 silly argv   '$0': 'lerna' }\n1 notice cli v3.10.6\n2 verbose rootPath /Users/<user>/projects/packages\n3 info versioning independent\n4 verbose session 1f26a92fc008a75c\n5 verbose user-agent lerna/3.10.6/node@v10.15.1+x64 (darwin)\n6 verbose git-describe undefined => \"<package-name>@1.5.5-1-gdcba2ad\"\n7 silly git-describe parsed => {\"lastTagName\":\"<package-name>@1.5.5\",\"lastVersion\":\"1.5.5\",\"refCount\":\"1\",\"sha\":\"dcba2ad\",\"isDirty\":false}\n8 silly argv { _: [ 'publish' ],\n8 silly argv   registry: '<registry-url>',\n8 silly argv   composed: 'publish',\n8 silly argv   lernaVersion: '3.10.6' }\n9 verbose rootPath /Users/<user>/projects/packages\n10 silly isAnythingCommitted\n11 verbose isAnythingCommitted 1\n12 silly currentBranch\n13 verbose currentBranch master\n14 silly remoteBranchExists\n15 silly isBehindUpstream\n16 silly isBehindUpstream master is behind origin/master by 0 commit(s) and ahead by 0\n17 silly hasTags\n18 verbose hasTags true\n19 silly git-describe.sync \"<package-name>@1.5.5-1-gdcba2ad\" => {\"lastTagName\":\"<package-name>@1.5.5\",\"lastVersion\":\"1.5.5\",\"refCount\":\"1\",\"sha\":\"dcba2ad\",\"isDirty\":false}\n20 info Looking for changed packages since <package-name>@1.5.5\n21 silly diffSinceIn <package-name>@1.5.5 <package-url>\n22 silly diff <package-url>/README.md\n23 silly diffSinceIn <package-name>@1.5.5 packages/<path>\n24 silly diff packages/<path>/README.md\n25 verbose updated <package-name>\n26 verbose updated <package-name>\n27 verbose git-describe undefined => \"<package-name>@1.5.5-1-gdcba2ad\"\n28 silly git-describe parsed => {\"lastTagName\":\"<package-name>@1.5.5\",\"lastVersion\":\"1.5.5\",\"refCount\":\"1\",\"sha\":\"dcba2ad\",\"isDirty\":false}\n29 silly independent for <package-name> at /Users/<user>/projects/packages/<package-url>\n30 verbose independent increment 1.5.5 by patch\n31 silly independent for <package-name> at /Users/<user>/projects/packages/packages/<path>\n32 verbose independent increment 1.4.5 by patch\n33 silly batched [ PackageGraphNode {\n33 silly batched     name: '<package-name>',\n33 silly batched     externalDependencies:\n33 silly batched      Map {\n33 silly batched        '@babel/plugin-syntax-dynamic-import' => [Object],\n33 silly batched        '@storybook/addon-actions' => [Object],\n33 silly batched        '@storybook/addon-console' => [Object],\n33 silly batched        '@storybook/addon-links' => [Object],\n33 silly batched        '@storybook/addon-options' => [Object],\n33 silly batched        '@storybook/addon-storysource' => [Object],\n33 silly batched        '@storybook/addon-viewport' => [Object],\n33 silly batched        '@storybook/react' => [Object],\n33 silly batched        'babel-jest' => [Object],\n33 silly batched        'babel-loader' => [Object],\n33 silly batched        'babel-plugin-emotion' => [Object],\n33 silly batched        'babel-plugin-inline-react-svg' => [Object],\n33 silly batched        'babel-plugin-transform-es2015-modules-commonjs' => [Object],\n33 silly batched        'babel-plugin-transform-object-rest-spread' => [Object],\n33 silly batched        'enzyme' => [Object],\n33 silly batched        'enzyme-adapter-react-16' => [Object],\n33 silly batched        'eslint-plugin-emotion' => [Object],\n33 silly batched        'glob-loader' => [Object],\n33 silly batched        'identity-obj-proxy' => [Object],\n33 silly batched        'jest' => [Object],\n33 silly batched        'jest-prop-type-error' => [Object],\n33 silly batched        'prettier' => [Object],\n33 silly batched        'react-test-renderer' => [Object],\n33 silly batched        'rimraf' => [Object],\n33 silly batched        'storybook-addon-jsx' => [Object],\n33 silly batched        '@babel/polyfill' => [Object],\n33 silly batched        '@emotion/core' => [Object],\n33 silly batched        '@emotion/styled' => [Object],\n33 silly batched        '@stst-cs/design-system' => [Object],\n33 silly batched        'deepmerge' => [Object],\n33 silly batched        'emotion' => [Object],\n33 silly batched        'emotion-server' => [Object],\n33 silly batched        'emotion-theming' => [Object],\n33 silly batched        'lodash.flowright' => [Object],\n33 silly batched        'lodash.get' => [Object],\n33 silly batched        'prop-types' => [Object],\n33 silly batched        'react' => [Object],\n33 silly batched        'react-dom' => [Object],\n33 silly batched        'react-emotion' => [Object] },\n33 silly batched     localDependencies: Map {},\n33 silly batched     localDependents: Map { '<package-name>' => [PackageGraphNode] } } ]\n34 silly batched [ PackageGraphNode {\n34 silly batched     name: '<package-name>',\n34 silly batched     externalDependencies:\n34 silly batched      Map {\n34 silly batched        '@babel/plugin-syntax-dynamic-import' => [Object],\n34 silly batched        '@storybook/addon-actions' => [Object],\n34 silly batched        '@storybook/addon-console' => [Object],\n34 silly batched        '@storybook/addon-links' => [Object],\n34 silly batched        '@storybook/addon-options' => [Object],\n34 silly batched        '@storybook/addon-storysource' => [Object],\n34 silly batched        '@storybook/addon-viewport' => [Object],\n34 silly batched        '@storybook/react' => [Object],\n34 silly batched        'babel-jest' => [Object],\n34 silly batched        'babel-loader' => [Object],\n34 silly batched        'babel-plugin-emotion' => [Object],\n34 silly batched        'babel-plugin-inline-react-svg' => [Object],\n34 silly batched        'babel-plugin-transform-es2015-modules-commonjs' => [Object],\n34 silly batched        'babel-plugin-transform-object-rest-spread' => [Object],\n34 silly batched        'enzyme' => [Object],\n34 silly batched        'enzyme-adapter-react-16' => [Object],\n34 silly batched        'eslint-plugin-emotion' => [Object],\n34 silly batched        'glob-loader' => [Object],\n34 silly batched        'identity-obj-proxy' => [Object],\n34 silly batched        'jest' => [Object],\n34 silly batched        'jest-prop-type-error' => [Object],\n34 silly batched        'prettier' => [Object],\n34 silly batched        'react-test-renderer' => [Object],\n34 silly batched        'rimraf' => [Object],\n34 silly batched        'storybook-addon-jsx' => [Object],\n34 silly batched        '@babel/polyfill' => [Object],\n34 silly batched        '@emotion/core' => [Object],\n34 silly batched        '@emotion/styled' => [Object],\n34 silly batched        '@stst-cs/design-system' => [Object],\n34 silly batched        'emotion' => [Object],\n34 silly batched        'emotion-server' => [Object],\n34 silly batched        'emotion-theming' => [Object],\n34 silly batched        'lodash.flowright' => [Object],\n34 silly batched        'lodash.get' => [Object],\n34 silly batched        'prop-types' => [Object],\n34 silly batched        'react' => [Object],\n34 silly batched        'react-dom' => [Object],\n34 silly batched        'react-emotion' => [Object] },\n34 silly batched     localDependencies: Map {},\n34 silly batched     localDependents: Map {} } ]\n35 silly lifecycle No script for \"preversion\" in \"packages\", continuing\n36 silly lifecycle No script for \"preversion\" in \"<package-name>\", continuing\n37 silly lifecycle No script for \"version\" in \"<package-name>\", continuing\n38 silly independent for <package-name> at /Users/<user>/projects/packages/<package-url>\n39 silly independent writing new entry: \"## [1.5.6](<git-url>/compare/<package-name>@1.5.5...<package-name>@1.5.6) (2019-02-08)\\n\\n**Note:** Version bump only for package <package-name>\\n\\n\\n\\n\"\n40 verbose independent wrote /Users/<user>/projects/packages/<package-url>/CHANGELOG.md\n41 silly lifecycle No script for \"preversion\" in \"<package-name>\", continuing\n42 silly lifecycle No script for \"version\" in \"<package-name>\", continuing\n43 silly independent for <package-name> at /Users/<user>/projects/packages/packages/<path>\n44 silly independent writing new entry: \"## [1.4.6](<git-url>/compare/<package-name>@1.4.5...<package-name>@1.4.6) (2019-02-08)\\n\\n**Note:** Version bump only for package <package-name>\\n\\n\\n\\n\"\n45 verbose independent wrote /Users/<user>/projects/packages/packages/<path>/CHANGELOG.md\n46 silly lifecycle No script for \"version\" in \"packages\", continuing\n47 silly gitAdd [ '/Users/<user>/projects/packages/<package-url>/package.json',\n47 silly gitAdd   '/Users/<user>/projects/packages/<package-url>/CHANGELOG.md',\n47 silly gitAdd   '/Users/<user>/projects/packages/packages/<path>/package.json',\n47 silly gitAdd   '/Users/<user>/projects/packages/packages/<path>/CHANGELOG.md' ]\n48 silly gitCommit chore(release): updated release notes and package versions\n48 silly gitCommit\n48 silly gitCommit  - <package-name>@1.5.6\n48 silly gitCommit  - <package-name>@1.4.6\n49 verbose git [ 'commit',\n49 verbose git   '-F',\n49 verbose git   '/private/var/folders/p1/5cm4zjnd5yn7cc91cgpxj0j40000gp/T/7ec7afd5-1f09-444a-8ed1-fc65496bc973/lerna-commit.txt' ]\n50 silly gitTag <package-name>@1.5.6\n51 verbose git [ 'tag',\n51 verbose git   '<package-name>@1.5.6',\n51 verbose git   '-m',\n51 verbose git   '<package-name>@1.5.6' ]\n52 silly gitTag <package-name>@1.4.6\n53 verbose git [ 'tag',\n53 verbose git   '<package-name>@1.4.6',\n53 verbose git   '-m',\n53 verbose git   '<package-name>@1.4.6' ]\n54 silly lifecycle No script for \"postversion\" in \"<package-name>\", continuing\n55 silly lifecycle No script for \"postversion\" in \"<package-name>\", continuing\n56 silly lifecycle No script for \"postversion\" in \"packages\", continuing\n57 info git Pushing tags...\n58 silly gitPush origin master\n59 silly batched [ PackageGraphNode {\n59 silly batched     name: '<package-name>',\n59 silly batched     externalDependencies:\n59 silly batched      Map {\n59 silly batched        '@babel/polyfill' => [Object],\n59 silly batched        '@emotion/core' => [Object],\n59 silly batched        '@emotion/styled' => [Object],\n59 silly batched        '@stst-cs/design-system' => [Object],\n59 silly batched        'deepmerge' => [Object],\n59 silly batched        'emotion' => [Object],\n59 silly batched        'emotion-server' => [Object],\n59 silly batched        'emotion-theming' => [Object],\n59 silly batched        'lodash.flowright' => [Object],\n59 silly batched        'lodash.get' => [Object],\n59 silly batched        'prop-types' => [Object],\n59 silly batched        'react' => [Object],\n59 silly batched        'react-dom' => [Object],\n59 silly batched        'react-emotion' => [Object] },\n59 silly batched     localDependencies: Map {},\n59 silly batched     localDependents: Map { '<package-name>' => [PackageGraphNode] } } ]\n60 silly batched [ PackageGraphNode {\n60 silly batched     name: '<package-name>',\n60 silly batched     externalDependencies:\n60 silly batched      Map {\n60 silly batched        '@babel/polyfill' => [Object],\n60 silly batched        '@emotion/core' => [Object],\n60 silly batched        '@emotion/styled' => [Object],\n60 silly batched        '@stst-cs/design-system' => [Object],\n60 silly batched        'emotion' => [Object],\n60 silly batched        'emotion-server' => [Object],\n60 silly batched        'emotion-theming' => [Object],\n60 silly batched        'lodash.flowright' => [Object],\n60 silly batched        'lodash.get' => [Object],\n60 silly batched        'prop-types' => [Object],\n60 silly batched        'react' => [Object],\n60 silly batched        'react-dom' => [Object],\n60 silly batched        'react-emotion' => [Object] },\n60 silly batched     localDependencies: Map {},\n60 silly batched     localDependents: Map {} } ]\n61 info publish Publishing packages to npm...\n62 notice Skipping all user and access validation due to third-party registry\n63 notice Make sure you're authenticated properly \u00af\\_(\u30c4)_/\u00af\n64 warn ENOLICENSE Packages <package-name>, <package-name> are missing a license\n65 silly getCurrentSHA\n66 verbose getCurrentSHA f76ec286c6e37c991fbe93407770aa7429bc1b53\n67 silly lifecycle No script for \"prepublish\" in \"packages\", continuing\n68 silly lifecycle No script for \"prepare\" in \"packages\", continuing\n69 silly lifecycle \"prepublishOnly\" starting in \"packages\"\n70 info lifecycle packages@undefined~prepublishOnly: packages@undefined\n71 verbose lifecycle packages@undefined~prepublishOnly: unsafe-perm in lifecycle true\n72 verbose lifecycle packages@undefined~prepublishOnly: PATH: /Users/</user>/projects/packages/node_modules/npm-lifecycle/node-gyp-bin:/Users/<user>/projects/packages/node_modules/.bin:/Users/<user>/.nvm/versions/node/v10.15.1/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/sbin:/usr/local/munki:/opt/X11/bin\n73 verbose lifecycle packages@undefined~prepublishOnly: CWD: /Users/<user>/projects/packages\n74 silly lifecycle packages@undefined~prepublishOnly: Args: [ '-c', 'yarn build' ]\n75 silly lifecycle packages@undefined~prepublishOnly: Returned: code: 0  signal: null\n76 silly lifecycle \"prepublishOnly\" finished in \"packages\"\n77 silly lifecycle No script for \"prepack\" in \"packages\", continuing\n78 verbose pack-directory <package-url>\n79 silly lifecycle No script for \"prepublish\" in \"<package-name>\", continuing\n80 silly lifecycle No script for \"prepare\" in \"<package-name>\", continuing\n81 silly lifecycle No script for \"prepublishOnly\" in \"<package-name>\", continuing\n82 silly lifecycle No script for \"prepack\" in \"<package-name>\", continuing\n83 silly lifecycle No script for \"postpack\" in \"<package-name>\", continuing\n84 verbose packed <package-name> <package-url></package-url>\n85 verbose pack-directory packages/<path>\n86 silly lifecycle No script for \"prepublish\" in \"<package-name>\", continuing\n87 silly lifecycle No script for \"prepare\" in \"<package-name>\", continuing\n88 silly lifecycle No script for \"prepublishOnly\" in \"<package-name>\", continuing\n89 silly lifecycle No script for \"prepack\" in \"<package-name>\", continuing\n90 silly lifecycle No script for \"postpack\" in \"<package-name>\", continuing\n91 verbose packed <package-name> packages/<path>\n92 silly lifecycle No script for \"postpack\" in \"packages\", continuing\n93 verbose publish <package-name>\n94 http fetch PUT 500 <verdaccio-url> 70776ms attempt #3\n95 error Error: 500 Internal Server Error - PUT <verdaccio url>\n95 error     at res.buffer.catch.then.body (/Users/<user>/projects/packages/node_modules/npm-registry-fetch/check-response.js:104:15). @evocateur thanks for your help here. Last one ... i think... npx lerna publish from-git can i run this more then once if none of the packages were published. I think i know npx lerna publish from-package can be run multiple times as this would bail if the package already lives on the registry\n. ",
    "KaboomFox": "\ud83d\udc4d . ",
    "einsqing": "\ud83d\udc4d. ",
    "slavafomin": "Today, I've tried to use yarn with workspaces and disabled hoisting \u2014 the aforementioned problem has not surfaced. It looks like yarn takes such dependencies into consideration. It would be great to make it work with npm-cli as well.. @evocateur So, if License Plugin on my scheme would add Rollup as a dev dependency, will lerna install it? And if so, shouldn't lerna install only non-dev dependencies for non-local packages?. @evocateur why are you closing this issue? It's a legitimate problem. Your advice on \"Just install the license plugin in the root\" is a dirty workaround and not a proper solution.. ",
    "WoodyWoodsta": "The exact commmand was lerna publish and the full error log (with sensitive details redacted) is as above.\nAnyway, as someone who is not 100% clued up on the internals of lerna, a brief think about it makes me believe that this should happen whenever lerna attempts to create git tags, and so would include any version or publish commands without the --no-git-tag-version flag.\nHope this helps?. I agree and I think that synchronises well with the idea of not ever publishing the same version of a module to NPM or any other registry more than once. Issues arise, however, when an NPM publish fails but the tags exist, leaving the local repo in a misrepresentative state (I know that this is already covered in a separate set of issues). So either the git operations are made less rigid, or they are performed after a confirmed, successful publish, or change detection is done locally as well as against the registry (in which case the above issue could have been solved by running lerna publish again, after correcting registry issues, bringing the registry in line with the already created tags).\nGlad to here that there is work being done around this and if the decoupling of publish and version is something coming in the near future, and which would solve this issue, then I guess we can close this.\nWhat are your thoughts?\n(FYI the error log had no other lines/details). > TL;DR: Lerna won't support duplicate version tags, nor will it support publishing duplicate versions of a package to any registry, regardless of its (mis-)capabilities.\nI understand this and support it. But I think what I am trying to highlight is that currently, Lerna makes the assumption that if a git tag of a particular version exists, then that version definitely exists on the registry (and the important point here is that it makes this assumption in that order - I think this would no longer be an issue if the registry was the point of truth). At the same time, its error handling during publish is brittle, which introduces a significantly heightened risk of modules going out of sync. It's a command line interface, a user tool. It cannot expect a) network and environment conditions to be stable at all times of operation and b) user's to be 100% correct in their use of the CLI. The fact that there are a number of other, similar issues (https://github.com/lerna/lerna/issues/1917, https://github.com/lerna/lerna/issues/1912, https://github.com/lerna/lerna/issues/455, https://github.com/lerna/lerna/issues/1785, https://github.com/lerna/lerna/issues/1709, https://github.com/lerna/lerna/issues/1668, https://github.com/lerna/lerna/issues/524, https://github.com/lerna/lerna/issues/1578, https://github.com/lerna/lerna/issues/1643, https://github.com/lerna/lerna/issues/1813) illustrates this point.\nIn any case, there is absolutely no obligation for the tool to respect the patchy, intermittent nature of web technology, and as such, Lerna is not doing anything wrong. I think that this is just an area for improvement, in making the experience of using Lerna better, especially for very large projects (high number of modules) as well as those learning how to use it and the registries. Feel free to close if you wish!. ",
    "arturi": "Hi, thanks for Lerna! Hit this as well during publish in Uppy http://github.com/transloadit/uppy:\nlerna ERR! Error: Command failed: git tag @uppy/companion@0.17.0 -m @uppy/companion@0.17.0\nlerna ERR! fatal: tag '@uppy/companion@0.17.0' already exists . ",
    "mbulfair": "@evocateur I had it at the latest version, 3.10.3 I think, and I would see results of errors with 'basic' authentication. Because we had passed that --no-verify-registry flag. It looked to be a 404 error with the latest changes. So even so, our registry was expecting validation, or it was being sent a standard user/pass and got rejected on the publish. . lerna 3.10.7\nlerna http fetch PUT 401 REMOVED(PATH to NEXUS) 409ms\nlerna ERR! E401 Unable to authenticate, need: BASIC realm=\"Sonatype Nexus Repository Manager\" @evocateur . @evocateur seems so, it might also be the way we are authenticating with it.  This is with Nexus, we also have Artifactory, i'm not sure if they will be the same.. Where does lerna publish get the credentials to do a npm publish for each component? in our setup we have a .npmrc which has a _auth and a exported encoded value. @evocateur . I managed to get it to publish with using Artifactory, which sent the proper responses to stop registration check, I will say the npm publish failed because it needed the _auth in each package repo, with a .npmrc file. @thomas-darling taking a guess, but did this work in an earlier version? Also when you run the lerna publish try to pass the registry there, in my setup I don't have it in each package. \nBased on your log verus my log, the first two lines about https://registry.npmjs.org/ looks like it's not reading the local pacakge.json values.All of the  are the private server.\nlerna info publish Publishing packages to npm...\nlerna http fetch GET 404 https://<hidden>/-/org/anonymous/package?format=cli 190ms\nlerna http fetch GET 404 https://<hidden>/-/user/anonymous/package?format=cli 60ms\nlerna WARN EREGISTRY Registry \"<hidden>\" does not support `npm access ls-packages`, skipping permission checks...\nLastly I do have in each of the components package.json \n\"publishConfig\": {\n    \"access\": \"public\"\n  },. Actually its broken for me as well. I see the same thing, but it was working on Friday.. . So turns out, on friday when I did a clean install, it installed 3.6.0, I forced to update to 3.10.8 and then I noticed lerna was just skipping everything and giving me a error. I noticed I wasn't logged in. I thought having a .npmrc file in each component was all I needed. Seems to get it to publish, I have to move all of that to the machine level .npmrc, log in first, and then publish works. Is that how it's expected to work? . Closing the issue, some of the issues I was having was with artifactory setup, it's been resolved, doing a npm login first, then a lerna publish works perfectly now.. ",
    "thomas-darling": "@evocateur\nWe're getting the same authentication error with Lerna 3.10.8 and Azure Artifacts, i.e. <company>.pkgs.visualstudio.com.\nWhile I fully appreciate the frustration caused by the private registries not keeping up, or having quirks, I hope you can appreciate the frustration it causes us, when we can't publish our packages. Something needs to be done about this, or we'll have to abandon Lerna - it's a really awesome tool, but right now, this is simply broken for us.\nFrom my perspective, since we can successfully publish by running npm publish in each package, lerna publish should work too - if it doesn't, then that's a bug in Lerna, not in the registry.\n\nIn package.json in each package:\n\"publishConfig\": {\n  \"registry\": \"https://<hidden>.pkgs.visualstudio.com/_packaging/<hidden>/npm/registry/\",\n  \"verifyAccess\": false\n},\nIn .npmrc, located in each package:\nregistry=https://<hidden>.pkgs.visualstudio.com/_packaging/<hidden>/npm/registry/\nalways-auth=true\n; begin auth token\n//<hidden>.pkgs.visualstudio.com/_packaging/<hidden>/npm/registry/:_authToken=<hidden>\n//<hidden>.pkgs.visualstudio.com/_packaging/<hidden>/npm/:_authToken=<hidden>\n; end auth token\nOutput when running lerna publish:\n...\nlerna info publish Publishing packages to npm...\nlerna info Verifying npm credentials\nlerna http fetch GET 200 https://registry.npmjs.org/-/npm/v1/user 1297ms\nlerna http fetch GET 200 https://registry.npmjs.org/-/org/thomas-darling/package?format=cli 246ms\nlerna http fetch PUT 401 https://<hidden>.pkgs.visualstudio.com/_packaging/<hidden>/npm/registry/<hidden> 439ms\nlerna ERR! E401 Unable to authenticate, need: Bearer authorization_uri=https://login.windows.net/<hidden>, Basic realm=\"https://pkgsprodsu3weu.app.pkgs.visualstudio.com/\", TFS-Federated\nAlso, why is it even hitting registry.npmjs.org here?. @mbulfair It's actually the first time I'm using Lerna with Azure, so can't say - and of course, it's entirely possible that I'm just doing something wrong here, but if that's the case, I can't figure out what :-)\nYou are right about the registry in the package.json files being ignored though - so that would appear to be a bug, as it should work according to the documentation. Or am I missing something, @evocateur?\nIf I pass the registry as a command line argument, I get this instead - still the same error though:\nlerna info publish Publishing packages to npm...\nlerna notice Skipping all user and access validation due to third-party registry\nlerna notice Make sure you're authenticated properly \u00af\\_(\u30c4)_/\u00af\nlerna WARN ENOLICENSE Packages <hidden>/infrastructure are missing a license\nlerna http fetch PUT 401 https://<hidden>.pkgs.visualstudio.com/_packaging/<hidden>/npm/registry/<hidden> 389ms\nlerna ERR! E401 Unable to authenticate, need: Bearer authorization_uri=https://login.windows.net/<hidden>, Basic realm=\"https://pkgsprodsu3weu.app.pkgs.visualstudio.com/\", TFS-Federated\nAlso, this is really not something I want to set as a command line argument. Things like this really need to be configured somewhere, so there's no risk of accidentally publishing to the wrong place - even just leaking the existence of a package could be a problem, as that could reveal what a company is working on. And why do we even need this, when it's already in the .npmrc file?\nRegarding the \"access\": \"public\" - I'm not really sure that's something we want to set. We most certainly do not want those packages to be publicly available, so I'm not really sure I want to even test that - especially when I don't feel certain about which registry it's hitting. Also, it wouldn't make much sense if that was the problem here, based on the error message.... ",
    "MerkAndreas": "Thank you for the response!\nThis wasn\u00b4t the issue, but brought me to the solution. I\u00b4ve changed the .npmrc-file in the gitlab-ci.yml to log into the registry with - echo registry = ${REGISTRY}:_authToken=${NPM_TOKEN} > .npmrc and this was the uncommited change and not the gitHead.\nThank you!!. ",
    "dlombardi": "so as a result of running lerna publish code intended to be private will not end up accessible to the public on the npm registry?. ",
    "JLarky": "Still don't see it documented or in tests. Example \"--ignore\", \"package-{3,4}\" but I'm talking about --ignore mypackage-1 --ignore somepackage-2. Although maybe package-@(2|3|4) can do this, but in my case I couldn't make it work. Yes, looks great, I guess docs can at least link to tests then :). ",
    "peanutenthusiast": "I can look into this documentation PR !. @evocateur Upon running npm i => npm test, a number of tests fail.\nby running, npm i => lerna bootstrap => npm test, all tests pass. \nDo you suppose the CONTRIBUTING needs updating as well?. ",
    "barakd": "Hi @evocateur \nThanks for the quick response,\nWhile I totally understand your point of view and I can understand why some projects would prefer not to get into a situation of disconnected packages.\nIn my case, it totally makes sense to have disconnected packages, as I am using Lerna to hold many packages which aren't necessarily maintained by the same groups or people.\nI would favor a configuration that would allow me to choose which behavior I prefer while keeping the current behavior as default.\nAgain, I am totally willing to make PR for it, if you think its something you'll support let me know and I'll be happy to give it a try.\nThanks. ",
    "sartaj10": "@evocateur \nI'll update it to use v3. Additionally, i've updated the lerna.json above.\nThat's what I thought. It shouldn't be an issue trying to point it to a git branch, but keep getting a Module not found error. ",
    "styfle": "@evocateur Awesome! \ud83d\udc4d \nI think once I start using lerna, I'll be more comfortable creating a PR for lerna create, but that might not happen anytime soon so feel free to add it yourself \ud83d\ude04 . ",
    "wKich": "I have same error on fresh new GitHub repo. And packages that installed has same version as you said @octokit/request v2.3.0 and @octokit/rest v16.15.0.. Hm... Seems I create private repo and generate token with repo:public_repo access. After switching to public it works. Thanks.\nI think it would be great if docs will have some clarification about repo access levels for token.. Here it says that:\n\nMinimal token scope is repo or public_repo to release on private or public repositories respectively.\n\nSo I think for private repos you should create token with repo:* scope. And I agree that for public repo is enough repo:public_repo.. ",
    "vvscode": "After this I have error https://npm.xxx/@tamm%2fui-lib-styles/-/ui-lib-styles-0.2.3.tgz: Extracting tar content of undefined failed, the file appears to be corrupt: \"Unexpected end of data\"\nwhat can I check?. But everything is extracting manually . @abulyshkin  suppose we can close this one. ",
    "andrewkincaid": "Is there a way to default the concurrency in lerna.json?  A few people on our team have noticed that when we run any lerna command, since it take all available CPUs, our laptops slow way down and our IDEs (IntelliJ IDEA) tend to lock up.  I don't mind hardcoding something like \"concurrency\": 4,, but I'm not sure that's an available option?  Thank you!. My apologies!  Setting concurrency in lerna.json works.  . ",
    "TheOptimisticFactory": "The upstream issue has been resolved with: https://github.com/npm/npm-packlist/commit/9230bb88bfafac94e828cdc5cf3cb29a0248f85f\n-- It was also impacting NPM v6.8.0\nThis fix got released in npm/npm-packlist v1.4.0 and onward \ud83c\udf89 . ",
    "Jeach": "Had the same issue with NPM v6.8.0 ... but fortunately, I knew I had a version I could update to, so when I updated (ie: 'sudo npm install -g npm'), it installed v6.9.0 and the problem seems to have been resolved. It now includes my 'core' sub-directory.. ",
    "samlecuyer": "Digging into the CodeBuild docs, it looks like there's a CODEBUILD_SOURCE_VERSION env var that's passed to the build job. A possible solution to this might also be to allow a hash to be passed so that the publish step doesn't need git.\nlerna publish from-package --with-git-head 44d86a1.... @evocateur this is amazing, thank you for being so responsive! API-wise, it looks good to me. ",
    "bennypowers": "This was confusing for me, since the advice given elsewhere is to specifically not add devDependencies to packages.\nIn my case, they are needed for each package's prepare step - so installation works fine, but publishing breaks.. My disconcerting but seemingly effective solution was to run git stash before running lerna publish. ",
    "villesau": "This is indeed exactly what we're looking for! Didn't think that NPM would has builtin support for such features. Thanks a lot! . ",
    "bengry": "Great, that what I was looking to hear. Thanks!\nIs there a way to show the full dependency tree, as determined by lerna? As\nan actual tree structure, and not a flat list. Either from the cli or an\nAPI we can build a small script on top of.\nOn Mon, Feb 18, 2019, 23:22 Daniel Stockman <notifications@github.com wrote:\n\nLerna batches packages\nhttps://github.com/lerna/lerna/blob/master/utils/batch-packages/batch-packages.js\ninto maximally-concurrent groups, respecting topological order by default. npx\nlerna ls --toposort shows you the (flattened) order derived from this.\nWithin each batch, the packages are generally sorted lexically\n(alphabetical by path). --concurrency determines how many packages at a\ntime, per batch, are \"in flight\". The order of resolution within a batch is\nnon-deterministic (Promises, yay). All packages in a batch will complete\nbefore the next batch is started (run-parallel-batches\nhttps://github.com/lerna/lerna/blob/master/utils/run-parallel-batches/run-parallel-batches.js\n).\nIt's not documented very deeply because it's an implementation detail. All\nusers need to know is that most operations are run as concurrently as\npossible, respecting topological order by default.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/lerna/lerna/issues/1938#issuecomment-464883910, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAP5T6A4gnwHqX5aPryJ1CBcgvY5Zo3Cks5vOxmkgaJpZM4bAscw\n.\n. @evocateur Thanks for the detailed response. Exactly what I was looking for doing.\nClosing the issue.. \n",
    "amiryonatan": "hey @evocateur,\nWe added support for --force-local in a few more commands. \nCan you please give us your feedback ? \nThanks!. @evocateur please advise on how to proceed?. ",
    "Noam3kCH": "@evocateur\nThe motivation behind this PR came after we ran into unexpected behaviour where after you bootstrap with --force-local and have everything linked, the run command will execute in the same manner. \nThis allows for example to test if some module dependencies which are behind could be updated to latest in single build command. Otherwise the use of the force local command is very limiting. \nPlease let us know if you would like us to fix this pr, and in what approach, or drop it.\nThanks!. ",
    "nahumzs": "you are correct, upgraded to v3.13.0 and everything is \ud83d\udcaf now! thank you. @hutson . ",
    "GasimGasimzada": "I ended up setting private: true as I liked that all packages, even if not published anywhere, are stored under the same directory.. ",
    "merrywhether": "In the meantime, I've renamed prepare to rebuild and have changed my workflow to lerna run rebuild && lerna publish and that works fine without any duplicate work (though not quite as safe). Very odd.\nI think this might be arising from invoking lerna publish via yarn at the repo root in order to get node module resolution working on manually-hoisted devDepedencies.. Yeah, sorry for the incomplete picture. We have things like @babel/* deps declared only in the root/workspace package.json (despite being used in all of the packages) to ease maintenance and eliminate some problems caused by workspace hoisting.\nI now realize that this isn't the first time that I've experienced weirdness with the lerna->yarn->npm-run-all call chain, where somehow the process execution, context, and/or termination get all funky, and thus that it likely the culprit here.\nGoing to close this since I'm not really sure if the weird child process management is actually a lerna issue or not.. Since I just learned a ton about this for my own particular issue, here's my understanding.\nlerna's --parallel is more of --parallel-yolo. Normally lerna run takes into account the \"topological\" structure of your repo (https://github.com/lerna/lerna/tree/master/core/global-options#--no-sort), determining dependency order in order to ensure that output from pkgA is available to some pkgDependsOnA. But it will run scripts in pkgA and pkgIndependentFromA in parallel. The --parallel flag says \"forget about topology and concurrency limits and run this script in every package asap\".\nHowever, I think if you were to set --concurrency 1 (https://github.com/lerna/lerna/tree/master/core/global-options#--concurrency) you might get your desired behavior.. ",
    "abuob": "@wbern Thank you very much for the input! I didn't know Rush - when we migrated our repos to a monorepo, the only options my team knew about were Lerna and Bazel, and Bazel wasn't a good fit due to its alpha stage and a few other reasons. \nI definitely have a look at Rush! Migrating would definitely be easier than implementing stuff ourselves, if it turns out to fit our needs.. ",
    "marcelomorgado": "Thank you very much! That solved my problem.\nClosing the issue.. ",
    "shridharkalagi": "I want to achieve the below things using lerna setup\ngit tag ReleasedToProd\ngit push --tags. ",
    "thenengah": "node: 10.15.0, npm: 6.4.1, lerna: 3.13.1, mac: osx high sierra 10.13.6\nAlso running into this issue. Currently having to run lerna bootstrap.\nHere is the error i'm getting (scope, and package are obviously named differently):\nnpm ERR! 404 Not Found: @scope/package@^0.0.0\nLooks like npm doesn't even try to look locally when installing.\n. ",
    "luponZ": "\nnode: 10.15.0, npm: 6.4.1, lerna: 3.13.1, mac: osx high sierra 10.13.6\nAlso running into this issue. Currently having to run lerna bootstrap.\nHere is the error i'm getting (scope, and package are obviously named differently):\nnpm ERR! 404 Not Found: @scope/package@^0.0.0\nLooks like npm doesn't even try to look locally when installing.\n\nyou can try this\nbash\nlerna add module-1 packages/module-2\nit work. ",
    "m2bright": "Npm publish works fine. It is a header.\nOn Fri, Mar 8, 2019 at 6:57 PM Daniel Stockman notifications@github.com\nwrote:\n\nI have no idea what HTTP_NPM_SCOPE is. A header? An env var? Lerna uses\nthe same publish mechanism as npm itself (since v6.6.0), does npm publish\nwork with recent versions?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/lerna/lerna/issues/1968#issuecomment-471135218, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AA9pwfrvcQP2cevswucr0fSyAdFM-4WUks5vUxUSgaJpZM4bmJgz\n.\n. I was looking for one, but nothing was produced. Is there a specific way to\ngenerate one?\n\nOn Fri, Mar 8, 2019 at 7:01 PM Daniel Stockman notifications@github.com\nwrote:\n\nA lerna_debug.log from a failed publish would be appreciated.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/lerna/lerna/issues/1968#issuecomment-471135649, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AA9pwddKPEbjEpZskrRvMiBIGcmyjcGUks5vUxYIgaJpZM4bmJgz\n.\n. \n",
    "armandocanals": "Hi! Armando from packagecloud checking in.\nAfter digging into this issue, it looks like what's happening is that Lerna is passing the full @scope/package-name instead of just @scope to libnpmpublish which sets it as the HTTP_NPM_SCOPE header. \nhttps://github.com/lerna/lerna/blob/a7ad9b60d27b390fde21fd2837f2d97320c4603e/utils/npm-publish/npm-publish.js#L34\nThe official registry supports both @scope and @scope/packagename for HTTP_NPM_SCOPE, but packagecloud does not.\nFrom what I understand, this header is supposed to include just the @scope for a package.\nI'm inclined to say that Lerna should only pass the @scope to libnpmpublish instead of the entire @scope/packagename, but I'm not familiar with the needs of the project, so I could be wrong.\nWe're also discussing how to handle this better at packagecloud.. Seems like CI is only failing for Node v11.11.0 which might be related to this: https://github.com/facebook/jest/issues/8069. ",
    "goroya": "me too. ",
    "ericprud": "oops, my bad. I stole the bin idiom from from an apparently bad or old example.  I don't see evidence that this is a common problem but if someone has counter evidence, they could add something like this to core/package/index.js's Package constructor:\njavascript\nif (pkg.bin.constructor === Array)\n  pkg.bin = pkg.bin.reduce((acc, name) => {\n    acc[name.substr(name.lastIndexOf(\"/\") + 1)] = name;\n    return acc;\n  }, {}),\nor just throw Error(\"package.json's bin attribute must be a string or map from command name to path\").. Arrays are not a permissible form of package.json's bin attribute.. ",
    "elisiariocouto": "I have the root package.json as a private package. If I'm understanding correctly, lerna publish should had skipped the root package, right?\nTo workaround this, I renamed my custom publish script to release.. Got it. Thanks for the clarification.. ",
    "Yzrsah": "I had the same problem as you but I resolved the problem by removing Lerna from the project.\nYou can add a nohoist section to your yarn workspaces:\nhttps://yarnpkg.com/blog/2018/02/15/nohoist/\nEverything is linked and works correctly, you don't even need to run link.\nI doubt we'll ever use Lerna again.. @ziyi2 \nPackages/workspace-a/package.json\n{\n  \"name\": \"@ziyi/workspace-a\",\n  \"version\": \"1.0.0\"\n}\nPackages/workspace-b/package.json\n```\n{\n  \"name\": \"@ziyi/workspace-b\",\n  \"version\": \"1.0.0\",\n\"dependencies\": {\n    \"@ziyi/workspace-a\": \"1.0.0\"\n  }\n}\n```\npackage.json\n\"workspaces\": {\n    \"packages\": [\n      \"Packages/*\",\n    ],\n    \"nohoist\": [\n      \"**\"\n    ]\n  }\n.yarnrc:\nworkspaces-experimental true\nWhen you're done, you type 1 command:\nyarn\nThat is all.\n. > ## Expected Behavior\n\nEnable integration with Yarn Workspaces\uff0cwhen i run lerna link\uff0csymlink together all packages that are dependencies of each other\uff0cfor example\nworkspace-a/package.json\njs\n{\n  \"name\": \"workspace-a\",\n  \"version\": \"1.0.0\"\n}\nworkspace-b/package.json\n```js\n{\n  \"name\": \"workspace-b\",\n  \"version\": \"1.0.0\",\n\"dependencies\": {\n    \"workspace-a\": \"1.0.0\"\n  }\n}\n```\nFinally, run lerna link somewhere, ideally inside the workspace root.\n```js\n/package.json\n/yarn.lock\n/node_modules\n/node_modules/workspace-a -> /workspace-a\n/workspace-a/package.json\n/workspace-b/package.json\n```\nCurrent Behavior\nbut i got\n```\n/package.json\n/yarn.lock\n/node_modules\n/workspace-a/package.json\n/workspace-b/package.json\n/workspace-b/node_modules/workspace-a  -> /workspace-a\n```\nPossible Solution\nwhen i run lerna bootstrap\uff0cit works well. But i don't want to run yarn install when i run lerna bootstrap. Please tell me if missed something.\nSteps to Reproduce (for bugs)\n\nlerna bootstrap\nlerna create\nlerna link\n\nlerna.json\nlerna-debug.log\nContext\nnothing\nYour Environment\nExecutable    Version\nlerna --version 3.13.1\nnpm --version   6.1.0\nyarn --version  1.13.0\nnode --version  v10.3.0\nOS    Version\nWindows 10\nYou are right\uff0c simple application does not require lerna\uff0cbut I still see a lot of good features of lerna\uff0csuch as lerna publish\u3001lerna build. I can release patch version withnpm publish in each package\uff0cand release minor version with lerna publish. So i should mix yarn and lerna.\n\nYou asked for linking outside of the root. That command is yarn which uses the workspace-aggregator to automatically resolve commands at the workspace level. You can run yarn inside the package directories and all updates are performed, including linking.\nIf your issue was resolved by the above steps (removal of lerna for bootstrap/link), then you could ask the author to update documentation in order to not mislead you into using lerna boostrap or lerna link so that you can have more free time to contribute to issues which focus on other parts of lerna you still want to use.\nWas your link issue resolved?. ",
    "ziyi2": "\nI had the same problem as you but I resolved the problem by removing Lerna from the project.\nYou can add a nohoist section to your yarn workspaces:\nhttps://yarnpkg.com/blog/2018/02/15/nohoist/\nEverything is linked and works correctly, you don't even need to run link.\nI doubt we'll ever use Lerna again.\n\nAnyway\uff0ci'm very grateful for the yarn link you provided\uff0cbut it can't solve my problem. lerna bootstrap can solve my problem\uff0cbut i can't stand it needs to install all the dependencies again. \nThe link you gave me just let me know that there is a config nohoist parameter to disable the selected modules from being hoisted to the project root.. > @ziyi2\n\nPackages/workspace-a/package.json\n{\n  \"name\": \"@ziyi/workspace-a\",\n  \"version\": \"1.0.0\"\n}\nPackages/workspace-b/package.json\n```\n{\n  \"name\": \"@ziyi/workspace-b\",\n  \"version\": \"1.0.0\",\n\"dependencies\": {\n    \"@ziyi/workspace-a\": \"1.0.0\"\n  }\n}\n```\npackage.json\n\"workspaces\": {\n    \"packages\": [\n      \"Packages/*\",\n    ],\n    \"nohoist\": [\n      \"**\"\n    ]\n  }\n.yarnrc:\nworkspaces-experimental true\nWhen you're done, you type 1 command:\nyarn\nThat is all.\n\nYou are right\uff0c simple application does not require lerna\uff0cbut I still see a lot of good features of lerna\uff0csuch as lerna publish\u3001lerna build.  I can release patch version withnpm publish in each package\uff0cand release minor version with  lerna publish. So i should mix yarn and lerna.. @Yzrsah Thank you very much for taking the time to answer me. . ",
    "rohyadav": "I have short it out, so i am closing this issue. ",
    "Aqours": "lerna add with --exact will work fine. It seems that is not a bug of lerna. . ",
    "hugomallet": "Related : #1415. ",
    "larsgw": "Oh, I hadn't found that one, sorry.. ",
    "simonkberg": "if minimatch returns a boolean, couldn't ^ simply be replaced with !==? in case the operator is the issue.\n. ",
    "edvinerikson": "I think we should exit early if it's private. The down part with putting the check here is that private packages don't get local dependencies updates when lerna publish is called.\ne.g\n```\npackageA\n{\n  \"name\": \"A\",\n  \"private\": true,\n  \"dependencies\": {\n    \"B\": \"^1.0.0\",\n  }\n}\npackageB\n{\n  \"name\": \"B\"\n}\n```\nif we run lerna publish with this patch, the packageB dependency in packageA  will still be 1.0.0 even if we update packageB to 2.0.0.\n. No I still want canary to work even if some modules are private. My idea is to not implement the check in this method at all. Instead we should implement it when we: prompt new versions (no need to bump a new semver for private modules IMO) and when we run git/npm commands. This way I think we can get the dependency updates to work but skip git tags, version bumping (dependency bumping will still work) and npm publish.\ne.g here: https://github.com/lerna/lerna/blob/master/src/commands/PublishCommand.js#L385\nhttps://github.com/lerna/lerna/blob/master/src/commands/PublishCommand.js#L336\nhttps://github.com/lerna/lerna/blob/master/src/commands/PublishCommand.js#L227\nhttps://github.com/lerna/lerna/blob/master/src/commands/PublishCommand.js#L173\n...and probably some other places.. \nShould probably change this.updates to something else for these, e.g this.publicUpdates\n. ",
    "iamakulov": "Why is a complex object even used here? An array of globs would be perfect.\n. ",
    "darrylhodgins": "@bclinkinbeard, you might find that #392 \"helps\" with one of the Appveyor failures (makes the test a little less platform-dependent).\n. @bclinkinbeard, I should have clarified: #392 doesn't solve the Appveyor permissions problem, just the path on that one test\u2026\n. What do you think about ordering these to be consistent with npm version, which, from npm help version is:\nnpm version [<newversion> | major | minor | patch | premajor | preminor | prepatch | prerelease | from-git]. ",
    "peter-mouland": "Hi @evocateur,\nJust testing the upgrade path from v1-beta.36 to v2-rc.4 and come across this check.  We noticed it as it started breaking on CI where it copies a previously cloned repo to another area to perform more tasks (rather than cloning again).\nI'm sure we can change our build setup easy enough - but I was just wondering what the reason is as to why Lerna needs to be executed in a git repo or if this check could be dropped?\nThanks for your help. ",
    "airato": "looks like both are valid\nhttps://docs.npmjs.com/files/package.json#local-paths. ",
    "Calanthe": "[minor]: I would rename with prefix into with versionPrefix. The title confused me with the prefix property returned by the parser.. [minor] double and. [minor] unrecognized. To keep consistency, add spaces before and after [] like in the test before.. [minor] unrecognized and spaces before and after []. Also, I am not sure if you need this test if you have the second .get should not return the dependencies for urecognized versions more detailed test.. ",
    "amfio": "FYI there is a typo in the word 'bootstrap' in the line above and two lines below.. ",
    "StephanBijzitter": "I was just browsing through pull requests to see what's coming up and this is the first time I hear of the this amazing git feature. Completely off-topic, I know, but reading this made me a happy(ier) man.. ",
    "strax": "Would that cause a failing postpublish to skip the remaining updates? My concern is that since postpublish executes after the package is published, it might lead to corrupted states where some of the packages have been published but some have not.. ",
    "tanhauhau": "not really, the bootstrap command will not update the lockfile, at least that's not happening in yarn, due to https://github.com/lerna/lerna/blob/master/commands/bootstrap/index.js#L171. i guess that's the main motivation of the MR, because removing dep in package.json and running lerna bootstrap will not remove the dep from node_modules nor updating the lock file.\n. oh, my bad.\nstill, bootstrap will have early return if all the stated dependencies have been satisfied.\nfor our case (lerna remove), all stated dependencies is satisfied, but we have extraneous dependencies in node_modules, should we \n1. reuse bootstrap, but add a new flag, (something like https://github.com/lerna/lerna/issues/1883#issuecomment-459580755) to bypass the early return of lerna bootstrap, thus able to trigger npm client to remove extraneous pacakges and update lockfile or\n2. use npm-uninstall that focuses on removing packages, by triggering npm client's remove/uninstall command rather than install/ci in lerna bootstrap\n. For the hoist case, how should we figure out whether the dependency to be removed is hoisted or installed in leaf node?\n. ",
    "romansh-wixcom": "Thanks for the patch! I will apply it and test.. Sure, I will update the defaultDescription. "
}