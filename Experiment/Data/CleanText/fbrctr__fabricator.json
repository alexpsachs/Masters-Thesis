{
    "LukeAskew": "These directories would be empty and would not be tracked in Git.\nThis task is better left to a Yeoman scaffold of this project. \n. Debating this....\nI'm leaning in favor of excluding an opinion about testing frameworks so that the end user dev can decide for themself.\n. They will be branding colors. They will go on the \"Overview\" page, since it pertains to the overall feel/tone of the toolkit being created. \nHere is an example from a toolkit I'm currently working on:\n\n. The require.js functionality has been removed, but tests would still be valuable for the collate task specifically.\n. This feature was added as part of #36.\nNow any *.md file is parsed and the html is stored as {item}.notes.\nThe *.html files are still stored as {item}.content\n. A website design toolkit generator for creative technologist\n. Sticking with \"A tool for creating modular websites\" for now.\n. After consideration and discussion with other devs, this falls out of the scope of this project.\n. Merged separately \n. @kevinmack18  Can I get a second set of eyes on this? Thanks!\n. This is closed by PR #25 \n. Can you elaborate?\nI'm already versioning the project using semver. See releases\n. This seems redundant to the functionality built into git and github.\n. You can grab the project version number from the package.json file.\n. http://fbrctr.github.io/advanced/customization.html\n. Fabricator uses libsass primarily for a couple of reasons:\n- Its faster, and the real-time feedback loop is a core feature of the project.\n- It doesn't require Ruby or Sass to be installed on the users' machine.\n. Thanks for bringing this up.\nI'm going to stick with libsass for now because of its speed portability.\nI think its still a good idea to at least add notes on how to change the Sass compiler, so I'll work on that.\n. :thumbsup: \n. FYI https://github.com/resource/fabricator/wiki/Working-with-Fabricator#upgrading-to-sass-33x\n. Interesting. I have a config setup I'm working on. This would fit perfectly.\n. Done.\n. Can you separate the variable fix from the collate fix?\n. Thanks for fixing the compilation issues.\nCan we improve the logic a bit? In your implementation, the comparison fails if any string other than \"dark\" is set the the $theme variable.\nI think this logic is a little more straight-forward:\nhttps://gist.github.com/LukeAskew/9692312\n. Because the browserify module already returns a stream, so creating a gulp-* plugin is redundant.\nI'll take a look at using the official module instead.\n. @daveespionage Can you review/merge?\n. @kevinmack18 @daveespionage  Thoughts on this?\n. This also bumps to v0.3.0\n. Nice! Thanks.\n. Fixed by #47 \n. Fixed by https://github.com/LukeAskew/fabricator/commit/aa34ecd261ac78d5248887ef5f372dd85e269c39 and https://github.com/LukeAskew/fabricator/commit/30a800265717d45dd656689493b4ac811b2c4a29\n. @daveespionage Do you have time to look at this today?\n. Not sure why fs.readdirSync is not ignoring the dotfiles. Added a package that will filter out junk files.\n. Fixes #48 \n. Interesting. I've found myself needing something similar.\nAs of right now, you can add a .md markdown file with the same name as your component/structure .html document, and it will get parsed and added as a \"note\". Notes will appear between the item's heading and it's example.\nI added this functionality for scenarios like this, but also for documenting generic usage guidelines.\nTry it out and let me know if this functionality gets you what you need.\nTask #46 seeks to further notes functionality.\n. This functionality can be achieve by using \"notes\". Add a .md file with the same name of a component/structure and the parsed markup will be added adjacent.\nThis is a minimally-opinionated and generic way to document components and structures.\n. Closed due to lack of demand.\n. Nice approach. Haven't seen it done this way before.\nMy original plan was to just use ZeroClipboard, but adding a Flash object seems wrong.\nI like the auto select thing you've done, but I don't love the extra click on the button.\nWhat if the code snippet was selected/unselected on mouse enter/leave on the code block itself?\n. Good point.\nJust bouncing some ideas around...\nWhat about adding a contenteditable attr on the <pre> tags? It would allow users to click directly in the code snippet for easier highlighting and cmd/cntrl+a.\nThoughts?\n. I'm thinking of contenteditable as an alternative to a <textarea>.\nThe idea is to get the text interaction - not content editing. We could block typing on pre tags so it's just highlight-able.\n. @kyleknighted What do you think about FB's approach when you click \"Get Code\" for the like button?\nhttps://developers.facebook.com/docs/plugins/like-button\nTextarea with set height, but user-resizable and select all when user clicks in the textarea. Looks like the just have onclick=\"this.focus(); this.select()\" on the textarea element.\nThoughts?\n. Closing in favor of https://github.com/resource/fabricator/pull/66\n. @kevinmack18 is correct. It's a matter of preference, but the underscore is not necessary in the import directive.\nHowever, I did update a reference to the file itself:\nhttps://github.com/resource/fabricator/wiki/Quick-Start/_compare/3c38972fd440ec415a6895bae144d98d65b488a7...49dd691eb8934694b3ca447f942fc0abbe77d722\nThanks for bringing this to my attention @tenebroso.\n. More coming soon. Wanted to hold off until I got it all done.\n. @qaidj Yup, this is by design...sort of. The materials array is a list of directory names fed into the 'collate' task. I'm not sure how to make this more automatic.\nFor now, a good first step might be to move that array to the main config object to make it more visible. Thoughts?\nI'll also make a note to update the documentation on this. Related to #26 \n. Added instructions for adding new \"materials\". \nhttps://github.com/resource/fabricator/wiki/Working-with-Fabricator/6f57262893077c5f259d217e9a3b5fa1df1e71be#adding-new-materials\n. Fixed by https://github.com/LukeAskew/fabricator/commit/78ff31883baa718602551818574d46768209b07a\n. Could be a couple of things. \nJust noticed that there is no watcher on the images directory. I'll add it now. You should add it to your local version:\ngulp.watch(config.src.images, ['images']);\nI've also been having issues with the gulp.watch method not recognizing new files, so you may need to stop and restart your dev server when you add new images.\nNote that the asset directory structure was changed in the 0.4.0 release. See. #28 and https://github.com/resource/fabricator/commit/fd5da4ec64052626b082146372c57d0fe501146f. If you're pulling the latest version of the gulpfile, you may need to rearrange your directories to work properly.\n. :fried_shrimp:\n. are you seeing errors?\n. I can't reproduce this issue. I just started with a clean instance from master and it worked.\nAre images dumping out to the dist folder? That is the webroot so reference files accordingly.\n<img src=\"toolkit/images/chicken.jpg\" alt=\"\">\n. do'h :clap:\n. I am partial to \"Assemblies\" :+1:\nOther ideas?\n. I've been using them mostly for \"templates\" as well. I think most are. \n\"Templates\" is probably what makes most sense to clients and other team members, though, my hesitations with \"templates\" are:\n1. They don't have to be concrete templates - they can be style prototypes.\n2. Potential confusion when integrating into a back-end system. Templates/prototypes are not 100% portable and should be used a reference when building actual pages. Similar to Bootstrap's Examples section.\n. @kyleknighted totally.\nHow are you guys using \"prototypes\" currently?\nIn practice, I've only used it to build out templates, sort of as reference or as a blueprint for integration. That's why I'm leaning toward \"template\" - to make the naming convention seem less arbitrary.\nIs anyone using them differently?\n. Anyone want to review? @kevinmack18 @adamweis @kyleknighted @qaidj ?\n. Can you check it out and share your thoughts @mrbinky3000 and @kyleknighted ?\n. This is now part of v1.0.0\nhttp://fbrctr.github.io/building-a-toolkit/data.html\n. :-1: \n. Good call out on the yeoman approach.\nTo clarify, I'm not suggesting plugging in an existing framework, but rather writing our own starting point for people if they want to start with just a little more established.\n. Closing this in favor of tracking progress on the actual repo: https://github.com/fbrctr/boilerplate-toolkit\n. What features of 3.3 are you specifically looking for that libsass doesn't offer?\n. Just update to gulp-sass to v.1 which include most of Sass 3.3 functionality.\n. Thinking out-loud here:\n- It might be better to use gutil.env than Node environment vars. \n- \"build\" might be a better convention to follow.\njson\n\"scripts\": {\n    \"gulp\": \"gulp\",\n    \"prestart\": \"npm install\",\n    \"build\": \"npm install && gulp\",\n    \"start\": \"gulp --dev\"\n},\nA recipe with Bower would look like:\njson\n\"scripts\": {\n    \"gulp\": \"gulp\",\n    \"bower\": \"bower\",\n    \"prestart\": \"npm install\",\n    \"postinstall\": \"bower install\",\n    \"build\": \"npm install && gulp\",\n    \"start\": \"gulp --dev\"\n},\nLocal development: $ npm start\nCI/Deployment: $ npm run build\n. You should have the ability to control build output styles: unoptimized vs optimized.\n$ npm run build --dev\n. Seems like a perms issue. When you run $ ls -la ~/ are you listed as the owner of .npm?\n. np. Reply with your solution - it might help someone else.\n. Thanks.\nCan you provide an example?\nI ran into a similar issue with the following code:\nxml\n<svg>\n    <symbol id=\"symbol-lockup\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 272.816 80.845\">\n        <path d=\"...\" />\n        <path d=\"...\" />\n       <path d=\"...\" />\n    </symbol>\n</svg>\nI had to wrap each void tag in a group tag <g></g> to resolve the issue.\n. I just tried using the xmlMode: true setting per the thread, and it seemed to work fine. I'll continue using it on my current project as a smoke test.\n. Cheerio is only being used for the \"helper class\" functionality.\nThere is probably a better way to achieve this. Open to suggestions.\n. This is no longer relevant with the v1.0.0 release since Fabricator no longer uses Cheerio\n. This is interesting. I don't like the way Pattern Lab handles this. I'd like to keep the number of parity files to a minimum.\nCan you elaborate on your statement \"more portable for use outside of the styleguide without having to copy/paste and modify html\". I've given thought to a similar issue, but I want to make sure I'm on the same page as you.\n. @kflorence Check out the enhancements to the way partials are done. #102 on the \"better-partials\" branch.\nLet me know if this meets your needs or what you think could be improved.\n. Closing in favor of new templating engine in v1.0.0\n. Yeah that's a great call out. I've had the need/desire to isolate components for more focused development. Currently, there's no easy way to do this outside of a \"template\". \nI'm not positive a dedicated page is the best way to handle this, but isolation is a need. I'll think about some ways to achieve this. Thanks for echoing this need.\n. This is now part of v1.0.0\n. https://github.com/resource/fabricator/blob/master/recipes/vendor-scripts.md\n. Yup. Add a .md file with the same name as the component/structure and the parsed HTML gets rendered along side the item.\nI use it to capture any helpful information about the component/structure like class toggles, JavaScript API, etc.\nIt's intentionally open-ended, so it's up to you how you want to use it -- I just wanted to provide a generic way to capture additional information for items.\n. You add the .md file as a sibling to the .html file you are documenting.\nIf you want to add notes for the \"button\" component (components/button.html) you would add a components/button.md file and write markdown as normal.\nHere's a quick example from a toolkit I'm currently working on:\n\u251c\u2500\u2500 components\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 accordion.html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 accordion.md\n. I am not seeing this issue.\nIn terms of the default instance, if I add a helper class to the \"form\" structure (which includes a button class with a helper), it shows up fine on the home template.\n. Still can't reproduce this. What version of Fabricator are you using?\n. Can you zip up your code and send it to me?\n. :hocho:\n. :+1: I'll include this in the next release.\n. Thanks for clueing me in to this. BrowserSync is a fantastic tool. Well done :clap: \n. Thanks!\n. Thanks!\nMind putting the iteration stuff in a pull request?\nI need to think some on the theming concept. I need to update the _variables.scss file now that sourcemaps works in node-sass. Might be a good opportunity to incorporate some of your thoughts.\n. :palm_tree: \n. This is a valid concern that I've started to notice as well. Can you elaborate on the types of grouping you might use?\nCan some of the components be considered structures?\n. Heads up - I am working a rewrite of the templating task that will allow for stuff like this. Hoping to have it ready for review later this week.\n. It's not ready yet - haven't had time to commit recently, though its still in the works.\nA feature of the rewrite will be the ability to organize things in more than just two buckets (components and structures). You'll be able to define your own taxonomy. For instance, you might want something like:\n\u251c\u2500\u2500 components\n\u251c\u2500\u2500 forms\n\u2514\u2500\u2500 typography\nI think the flexibility to organize with subfolders is a good idea, but you might not need it if you have the ability to define your own top-level categories of UI.\nBut I like flexibility, so I can try to include it :smile: \n. @kennethillman Rewrite is ready to checkout. It's on the better-partials branch.\nCheck it out #102 \n. Shoot. Just realized you've been there done that. Thanks for the input! :guitar: \n. This is now part of v1.0.0\n. Good catch :+1: \n. :+1: just a couple of code style issues.\n. Sorry I'm still seeing some indentation issues.\n. :+1: :guitar: \n. FYI, here's a first iteration on the new template system: https://github.com/LukeAskew/gulp-fabricate\nIt was built as a POC. There are some revisions in the works, but it's closer to what I'm thinking for Fabrciator than what's currently in place.\n. That's probably the biggest issue with projects like this. My best advice is to treat your toolkit as a completely separate project with its own development lifecycle. \nFabricator is intentionally backend-agnostic so that the end product (HTML, CSS, JS) can be consumed by a number of different applications (.NET, node, etc).\nI like to deploy my toolkit to a CDN, then reference those files in my end application. Any changes are made in your Fabricator instance and redeployed.\nAdds an extra step, but its similar to how any other framework (Bootstrap, Foundation) is consumed.\n. Fabricator has been moved to it's own organization as part of the 1.0 process!\nTracking for a release next week. Here's a sneak peek at the new logo:\n\n. \"Docs\" task has been logged in the fbrctr.github.io project. Check it out and please add suggestions: https://github.com/fbrctr/fbrctr.github.io/issues/1\n. :boom: https://github.com/fbrctr/fabricator/releases/tag/v1.0.0 :boom: \n. :+1: \nI'll make a point to flesh this out more.\nIn the meantime, you can check out some of the \"recipes\". They are not comprehensive, but should get you going the right direction.\nhttps://github.com/resource/fabricator/tree/master/recipes\n. That seems like a reasonable approach. There's a couple of approaches you can take here.\n1. Include jQuery as a module (Browserify) like you're demostrating. I like this approach because explicit module inclusions make app a little more clear IMO. The only suggestion I have is to install jquery using npm so that it downloads to node_modules. This allows you to include it like var $ = ('jquery'); and keeps you from having to include the file in version control.\n2. Follow the recipe and use Bower to manage jQuery and add the file to a vendor task so that $ is an implied global.\n. http://fbrctr.github.io/advanced/third-party.html\n. Looking for feedback on this. Check out the branch and poke around.\n. Added support for grouping materials (components/structures/whatever).\nFor instance, if you have:\n\u251c\u2500\u2500 materials\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 components\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 buttons\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 primary.html\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 secondary.html\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 checkbox.html\n\"Buttons\" will appear in the sidebar menu, but \"primary\" and \"secondary\" will not.\nWhen you navigate to the Components listing page, the \"primary\" and \"secondary\" button variations are grouped under the \"Buttons\" heading.\nYou can access the partial using dot notation {{> buttons.primary}} {{> buttons.secondary}}\n. Added support for user-defined helpers. Defined as key:val pairs in the options.helpers passed into the assemble() task, see here with the helper-markdown helper:\ngulp.task('assemble', function (done) {\n    assemble({\n        helpers: {\n            markdown: require('helper-markdown')\n        }\n    });\n    done();\n});\n``` html\n{{#markdown}}\nHeading\n\nthis is markdown\n\nfoo bar baz\n{{/markdown}}\n```\n. Could be the base64 -- I've not tested it with a large file.\nCould you post the content of your structure to a gist or something?\n. Good to know. I'll test it out in the new templating system to see if I can't fix the issue there.\nIf you have time, check it out and let me know what you think: #102 \n. Thanks!\nCan you provide a quick example of what this might look like in practice?\nLooks like it takes every comment block in a file and concatenates them into a single block of markdown. Is that right?\n. Hmm. On second thought, this might cause confusion when people after starting new projects; the badge and config would be for Fabricator and not their toolkit.\n. What version of node and npm?\nPeople have reported issues using npm < 2.0 \n. Yup. Sure is. You would just modify the gulpfile.js to use the new task and change the toolkit.scss file extension to whatever PostCSS likes.\nMake sure you modify the styles:toolkit task. The styles:fabricator task is setup to use Sass. You can convert those files if you like, but it'll be extra work.\nThis is why I use the folder name styles instead of scss or sass - it makes swapping a little easier.\nI will make sure to document this customization in the new docs. \n. Noted. I'm not familiar with PostCSS. Once the generator is updated to 1.0 (later this week), a PR for that feature would be welcomed.\n. Hey @VinSpee the generator has been updated, but I'm not totally sure how to integrate this type of configuration since fabricator is just included as a submodule. Open to ideas.\nhttps://github.com/fbrctr/generator-fabricator\n. Awesome :guitar:. Just some small code style things.\nThis new setup will affect the current recommendation for integrating third-party scripts. Is there a way to handle this in the webpack.config.js? Just needs to concat an array of files, in order, then concat before the toolkit.js bundle.\nOptionally, some people might want to just concat third-party scripts into a separate file (e.g. vendor.js) and keep them decoupled from toolkit.js. Easy with webpack?\nhttp://fbrctr.github.io/advanced/third-party.html\n. I'm getting some odd behavior when a script has syntax errors. The errors log to console  (vebose :+1: ) but the tasks stop re-running on file change. The browsers reload, but the tasks don't run.\n. This is a little different than the approach outlined in the docs, but it is still a valid approach.\nYour form.js is probably not working because the path to floatingLabel.js isn't resolving. By default, browserify starts resolving paths relative to the current file. It will also try to resolve paths relative to the node_modules directory (allowing you to manage third-party deps with npm).\nYou can probably fix the issue by changing the require statement in form.js to something like:\njavascript\nvar $ = require('../../../../bower_components/floatingLabel.js/dist/floatingLabel.js');\n. FWIW, Browserify will soon be replaced by Webpack. It shouldn't affect the way you're including modules, and since you've already started your Fabricator instance, you wouldn't get the update unless you re-scaffolded or pulled in the change manually. \n. That's a bug from the recent overhaul. All pages used to save out to a single directory, but now they can be in sub-directories. Adding the {{baseurl}} var helps resolve paths.\nThanks for logging this.\n. baseurl is an internal var right now, and is not configurable. You could store your own value in a data file under src/data and use it the same way (as a path prefix).\n. This should be fixed by https://github.com/fbrctr/fabricator-assemble/commit/01ace9c8b311f66e820d3e6c0f9097fea5212d5e\nLooking for some help testing. You can install the pre-release using: \n$ npm install --save-dev https://github.com/fbrctr/fabricator-assemble/tarball/master\n. This is the intended prioritization of context. Compilation happens at the smallest part and moves outward. \nmaterial\n:arrow_down: \nparent material(s)\n:arrow_down: \nview\nThe materials (partials) have to be parse first in order to make them available to views.\nWhat are you trying to achieve? Default values?\n. You can group permutations in folders.\n\u2514\u2500\u2500 buttons\n\u00a0\u00a0\u251c\u2500\u2500 primary.html\n\u00a0\u00a0\u251c\u2500\u2500 secondary.html\n  \u2514\u2500\u2500 tertiary.html\n{{> buttons.primary}}\n{{> buttons.secondary}}\n{{> buttons.tertiary}}\n. Interesting. I'll spend some time thinking about how to make that work. I think it could be useful.\n. In the middle of a crunch at work. I'll have some time to dedicate to this next week. I think it'll be fairly easy to integrate.\n. Interesting. Can you elaborate a bit on the utility of this feature?\n. There's definitely room for improvement in how fabricator-assemble logs errors. Mind logging an issue over in that repo?\nOut of curiosity, what was causing the error? Does it cause the gulp stream to break and the application to stop?\n. Cool.\nI run into that issue a lot too.\nI can add some logging around \"material not found\".\nClosing in favor of tracking https://github.com/fbrctr/fabricator-assemble/issues/1\n. You shouldn't be seeing src in your dist - it should just contain compiled assets.\nDoes it compile correctly when you run npm run build ?\n. You could try inserting https://github.com/sindresorhus/gulp-debug in a task. styles would probably be easiest.\nI've never used portable node. Can you point me in the right direction to try and duplicate this issue.\n. Good find. Thanks! Mind verifying the latest version? I'll work on setting up a Windows VM for testing.\n. Working on this. FYI https://github.com/fbrctr/fabricator-assemble/issues/2\n. What version are you running? If your instance in generating a data.json file, then your pre 1.0.\nGrouped materials came in 1.0\n. Apologies on the lack of documentation; been trying to improve it. Hopefully I can be some help here.\n\"Materials\" are just partials that can be used when templating a page. They are not compiled or viewable on their own served pages. They are only used as partials. e.g. {{> material-name}}.\nThe pages Fabricator actually generates and serves up are in src/views or in src/views/sub-dir. By default, Fabricator puts the toolkit doc/style guide pages in root so that http://localhost:3000 opens up to your toolkit homepage. However, you don't have to keep it that way. You can organize your views however you want. They are all templated using the same context (outlined here under \"Context\") so you can just construct views and call them whatever you want. Checkout the fbrctr.github.io source as an example.\nThe default template for the side menu is also pretty basic. It just iterated over the materials object in the page context and adds a list group https://github.com/fbrctr/fabricator/blob/95f4cf42292744c4a7e1767e65616afe62b891e5/src/views/layouts/includes/f-menu.html#L12.\nYou could change this to be more granular. I am currently doing something like this on a project:\n``` html\n\nElements\n\n        {{#each materials.elements.items}}\n        \n{{name}}\n\n        {{/each}}\n    \n\n\nComponents\n\n        {{#each materials.components.items}}\n        \n{{name}}\n\n        {{/each}}\n    \n\n\nCards\n\n        {{#each materials.cards.items}}\n        \n{{name}}\n\n        {{/each}}\n    \n\n```\nWhen you run $ npm  start it compiles everything in src and dumps the artifacts in dist. \ndist is the folder that is served up to http://localhost:3000. You can look in that folder to see what the build is outputting and what you can hit in a browser when the server is running.\n. This is a little bit of a bug. On the initial compile, if the assemble task doesn't complete, other tasks (like images) can he halted.\nThe reason assemble is failing is because the paragraph material was either moved or deleted, but is still being referenced in a view or other material.\nIf you deleted paragraph.html then you need to also delete any references to it. Out of the box, it is used in the materials/structures/form.html example.\n. :+1: np. There's a good chance someone else has the same questions.\n. Not a bad idea. I think the single page concept has just persisted since my initial concept.\nCan you help flesh this out a little...\nGiven this setup:\n\u2514\u2500\u2500 docs\n  \u251c\u2500\u2500 foo.md\n  \u2514\u2500\u2500 bar.md\nEach doc would compile to dist/docs/{filename}.html\nI think something like this might even be nice:\n\u2514\u2500\u2500 docs\n  \u251c\u2500\u2500 javascript\n    \u251c\u2500\u2500 foo.md\n    \u2514\u2500\u2500 index.md\n  \u2514\u2500\u2500 index.md\nWhere the compiled output looks like:\n\u2514\u2500\u2500 docs\n  \u251c\u2500\u2500 javascript\n    \u251c\u2500\u2500 foo.html\n    \u2514\u2500\u2500 index.html\n  \u2514\u2500\u2500 index.html\nI almost think this should be the default, as past real-world Fabricator-generated documentation pages end up being fairly large. This change would make them easier to navigate.\n. You have to build the \"listing\" views yourself. \nFor example, the default file: src/views/components.html contains an {{#each}} block that iterates over materials.components.items.\nYou should be able to rename this file to atoms.html and change the reference to materials.atoms.items.\nThis bit of manual setup is intentional because it offers a lot of flexibility. If you don't want the root of your documentation site to be Fabricator pages, you can just move them to a subdir like src/views/styleguide/ or something like that.\n. The default glob for materials is pretty inclusive src/materials/**/*. You should be able to pass a new pattern to the assemble() task in the gulpfile.js.\nSomething like this:\njavascript\n// assemble\ngulp.task('assemble', function (done) {\n    assemble({\n        materials: 'src/materials/**/*.html',    \n    });\n    done();\n});\nhttps://github.com/fbrctr/fabricator-assemble#options\n. :+1: \nThis is a request I've heard a lot, so it's probably time to make it happen.\nCan you provide some examples of how you're naming files? I'd like to see some real-word usage to help come up with a good solution.\n. @lyzadanger @slightlyoffbeat  Just took a stab at this functionality. Check it out over at https://github.com/fbrctr/fabricator-assemble/pull/8\nI'll probably just let this brew over the weekend and pull on Monday if all is well.\n. At first glance it looks like a nice feature. I'll dig deeper in the next day or say so I can give some better feedback, but I think this will make a nice PR :+1: \n. Thanks for the feedback!\nYou light vs dark, click vs touch contexts are a good example of customizing the fabricator views to fit your needs. Thanks for sharing.\nGood call on the docs title. I'll make sure to include that functionality when I work on the docs PR.\nI saw your PR and will take a look.\n:+1: \n. I think I understand what you're trying to achieve here. Does your example show a fenced code block written in markdown?\nSetting the line-height to 1.2 negatively affects the legibility of item code blocks, so we may need to find a different solution.\nLet me know if I'm understanding your example correctly.\n. ping @filtercake.\nAny update on this? Happy to pull any change that makes things more useful...just need a little more info.\n. Thanks for all the input!\n. Use the build script to generate an optimized build and deploy the artifacts in dist:\n$ npm run build\nFabricator generates a static site in both dev and \"build\" modes; the latter performs additional optimizations to CSS and JavaScript for \"production\" consumption.\nI typically deploy the entire build and use it both as a documentation site and CDN for my toolkit.js, toolkit.css, and image files. Other developers reference the deployed site when building their apps.\nIt's also a good idea to come up with some versioning strategy once you start deploying. I like using tags as deploy targets on my servers. e.g. tags/v0.3.2 gets deployed to http://website.com/toolkit/v0.3.2/ which allows devs to pull in specific versions of the toolkit code. <link rel=\"stylesheet\" href=\"https://website.com/toolkit/v0.3.2/assets/toolkit/styles/toolkit.css\">\n. Plugin architecture is a great idea. It's something I've heard since the beginning of the project.\nI'm of the same opinion as @tonifisler - I don't see the usefulness of adding CSS, but I also really like giving people flexibility. \nLet me think about this one.\n. I believe BrowserSync will scan for the next available port automatically. If you have another app running on 3000/3001, the version of BrowserSync that Fabricator uses should use 3002/3003.\nYou can manually set the port by adding the config to the browsersync task:\nhttps://github.com/fbrctr/fabricator/blob/198b788c6e1605de48109988fa7fe68b935fe887/gulpfile.js#L115\nbrowserSync({\n    server: {\n        baseDir: config.dest\n    },\n    port: 9000,\n    notify: false,\n    logPrefix: 'FABRICATOR'\n});\nhttp://www.browsersync.io/docs/options/#option-port\n. @VinSpee I've not tried it, but I think you could publish your Fabricator instance to npm, then @import 'node_modules/your-toolkit/src/assets/toolkit/styles/toolkit'\n@jameswragg :+1: \n. Yup. I do this with a separate task using gulp-yml\n```\nvar yml = require('gulp-yml');\ngulp.task('data', function () {\n    return gulp.src('src/data/*/')\n        .pipe(yml().on('error', gutil.log))\n        .pipe(gulp.dest(config.dest + '/data'));\n});\n```\nYou'll also want to add data to the assemble watch task:\ngulp.watch('src/**/*.{html,md,json,yml}', ['assemble', 'data']).on('change', reload);\nAnd the tasks array in the default task:\n// define build tasks\nvar tasks = [\n    'styles',\n    'scripts',\n    'images',\n    'data',\n    'assemble'\n];\n. :+1: \nCan you also make the change to the style:fabricator task?\n. No examples currently. \nI created the project initial with strict framework/backend agnosticism in mind (much like Bootstrap or Foundation). My mindset with toolkits is that it should be a drop-in UI in to any number of applications. \nBuilding a toolkit around a certain view layer (like React, Angular, Razor, Erb) reduces it's reusability. I understand that not every project needs to have this level of decoupling, but that was my need when I built Fabricator initially, so much of it's architecture forces that constraint.\n. It'll probably be easier to get the older version working. What errors are you getting when you run on the new computer?\n. Looks an error with gulp-sass. Which version are you using?\nYou may need to delete the node_modules folder and npm install again with a different version.\n. IE9 no longer supported\n. Thanks for the PR and thanks for the compliment.\nThanks all around!\n. I've been getting this too. I think the logging API for gulp-sass has changed. I'll take a look.\n. @genmacg updating the dependencies seemed to fix the issue. You will probably have to nuke node_modules/gulp-sass\n. That sounds like a really useful feature.\nI've used a handful of prototype commenting apps like Notable and Invision. I wonder if there is something out there that could integrate nicely into Fabricator.\nThis feature's a bit tough to integrate completely into the project because the lack of database and server-side dependencies is a feature - Fabricator is meant to be very portable.\nThanks for opening this issue. You've got my wheels turning!\n. The materials object doesn't have any sorting mechanism built in, but you can just construct the side menu manually. That's what I do in most cases.\nhttps://github.com/fbrctr/fabricator/blob/fd68909092ca8fb85bdbd1928244a95295b6e425/src/views/layouts/includes/f-menu.html#L12\nFor instance, I have a toolkit that uses \"typography\", \"elements\", and \"components\", and I want them listed in that order. Here's a snippet of my f-menu.html file:\n``` html\n\n    ...\n    \nTypography\n\n            {{#each materials.typography.items}}\n            \n{{name}}\n\n            {{/each}}\n        \n\n<li>\n    <a href=\"elements.html\" class=\"f-menu__heading\">Elements</a>\n    <ul>\n        {{#each materials.elements.items}}\n        <li>\n            <a href=\"elements.html#{{@key}}\">{{name}}</a>\n        </li>\n        {{/each}}\n    </ul>\n</li>\n\n<li>\n    <a href=\"components.html\" class=\"f-menu__heading\">Components</a>\n    <ul>\n        {{#each materials.components.items}}\n        <li>\n            <a href=\"components.html#{{@key}}\">{{name}}</a>\n        </li>\n        {{/each}}\n    </ul>\n</li>\n...\n\n\n```\n. Thanks for the props! Glad you're getting some use out of the tool.\n. Looks like an issue with the BrowserSync module. \nStart by deleting node_modules/browser-sync and trying again.\nYou may also want to update npm. You're on v1.4 and the current is v.2.12. Some dependencies may require v2 apis.\n. Yeah absolutely, a PR is welcome. \nI don't use source maps, so I never incorporated that flow. I'm open to incorporated that feature as long as its not intrusive.\n. Is there a benefit of writing to an external file rather than just inline as encoded data?\nThe latter would prevent maps from being distributed in a production build since the css minification removes comments.\n. Awesome :guitar: :+1: :gem: \n. This is somewhat doable currently. You can pass YFM into a partial using explicit property names.\nIn your example: you should be able to do this:\n```\ntext: Submit\n\n\n    {{> text-input}}\n    {{> buttons.button text}}\n  \n\n```\nThere is a little work that goes on behind the scenes to control scoping of YFM values during the templating cascade. You can't currently use the this keyword to refer to direct parent context, but you can use it within a block helper.\n```\nitems:\n  -\n    text: Foo\n  -\n    text: Bar\n\n\n\n    {{> text-input}}\n    {{#with items}}\n      {{> buttons.button .}}\n    {{/with}}\n  \n\n```\nI think your request is valid; using a parent's context would be helpful. I can see what it would take to make that happen.\n. Awesome. Thanks! :+1: \n. I like the idea. This is one of those things I've not been happy with, but left as-is in favor of giving the dev more control. \nA few things to consider if you make a PR:\n- Sass variable structures are not always straightforward. Some people like simple $blue: rgb(0, 0, 255);, but I sometimes use nested maps to drive color selection.\n- Give user control over where _colors.scss is written. Some people like styles/vars/_colors.scss, others styles/base/_variables.scss - possibilities are endless. Give people control.\n- Listen to changes on color.yml and recompile onchange.\nI'd like to see this issue addressed, but in a way that offers the same amount of flexibility as the current (no) solution.\n. @waltercruz  This is a great question. \nThere are some tips on the docs page referring to \"Third Party Scripts\". The best way to do this is probably will the scripts loader (built in). http://fbrctr.github.io/advanced/third-party.html#handling-modules-that-do-not-use-commonjs\nInside your toolkit.js should look something like this:\njavascript\nrequire('script!./jquery-1.11.3');\nrequire('script!./bootstrap');\nrequire('script!./bootstrap-maxlength');\nrequire('script!./select2');\nrequire('script!./select2_locale_pt_BR');\n. background-image: url('../images/image.jpg'); should work.\nThe compiled asset directory places the images directory as a sibling of styles under dist/assets/toolkit\nDoes the dist/assets/toolkit directory contain all the expected files?\n. @bitlinguist the dist folder is the static output of Fabricator. It is like a web root - it is where the dev live reloading (BrowserSync) server serves from, and is the artifacts you can deploy to any hosting environment.\n. @chrisk2020 is also right. I've had issues with Gulp watch not working when the folder is empty on startup. You may need to restart the dev environment $ npm start after adding your first images.\n. I believe this is a duplicate of #142 and is fixed by #149.\nNew release coming soon.\n. I don't see why you couldn't do this.\nThe gulpfile.js and assemble() task are designed to be configurable. You should be able to organize your fabricator folders however you want to achieve this organization, then configure the tasks to point at the correct files.\nIt will get a little tricky with gulp builds, especially with the live-reload dev environment. You'd want a setup that avoids re-compiling styles/scripts/templates across every toolkit. You'd also need separate assemble() tasks per toolkit if you want them to have unique data contexts.\n. Thanks for tracking this down. \nI think you're correct that the _.merge doesn't handled a string vs array.\nI made the default option an array, and that seems to work in every case. Check it out. https://github.com/fbrctr/fabricator-assemble/pull/17/files\n. Hmm this is a tricky one. You're correct in that the setActiveItem() function in fabricator.js doesn't account for anything other than the hash. It assumes a 1:1 between hash:id.\nA solution might be to modify the parsedItems and setActive functions to include the location.pathname.\n. Sorry it's taken so long to review this! Everything looked great. Couple of small issues.\nI played around with the regex, but ran out of time. Hopefully you have better luck.\n. Fiddled a little more with this regex. This should work:\njavascript\n// get current file and hash without first slash\nvar current = (window.location.pathname + window.location.hash).replace(/(^\\/)(.+?)(#[\\w\\-\\.]+)?$/ig, function (match, slash, file, hash) {\n    hash = hash || '';\n    return file + hash.split('.')[0];\n}) || 'index.html';\n. Ping @LeBenLeBen \n. No rush! I know what its like to be busy.\nEnjoy your holiday.\n. Shoot. This still isn't working for me 100%. It wasn't highlighting the \"Overview\" item on http://localhost:3000 (no file).\nWorked with our resident regex expert @sethlopezme and he helped me write a better matching pattern. This seemed to work:\n(^\\/)([^#]+)?(#[\\w\\-\\.]+)?$\nAlso need to add this line for times when no file is found in the location:\nfile = file || '';\n. :guitar: :guitar: :guitar: \n. :+1: \n. @rafal-leap just opened a PR that adds this functionality. Mind checking it out and testing it? https://github.com/fbrctr/fabricator-assemble/pull/20\n. @dietergeerts totally on my radar. I like the idea, just need time to give it a good review.\nHopefully I can carve out some time later this week. Thanks for putting this together!\n. Hey @dietergeerts, sorry just been cranking at work recently, so I haven't had a ton of time to look at stuff.\nFrom the bits of this PR that I've read, I think you're right that it might be better as a separate project. I am fine with however you want to manage that. I'd still love to give feedback as your project progresses. :sunglasses: \n. Sounds :sunglasses: to me.\n. My idea behind the \"overview\" page was a place to capture all of those design-related things that didn't qualify as a material.\nI really liked how Salesforce organized their toolkit http://sfdc-styleguide.herokuapp.com/\nFabricator is also meant to be really flexible. If a user wants to add a \"base\" page, they can do so pretty easily. I'd love to get together some examples of Fabricator instances that people have customized to help demonstrate the flexibility of the style guide pages and templates.\n. Just to provide some context, this was one of those things that has bugged me for a while:\nhttps://github.com/fbrctr/fabricator/issues/4\nI just closed the issue to move on to other things. Would love to revisit the \"Overview\" page concept to provide something more useful. Let's keep brainstorming.\n. Nah, just me being lazy and not creating releases for each tag. \nCreated a release for the latest tag https://github.com/fbrctr/fabricator/releases/tag/v1.2.2\n. Yeah definitely been kicked around. Not sure what it looks like, but I'm open to a brainstorm.\nWhat kind of things is everyone thinking?\n. I think the latter.\nWorking on #165 now, and I'm thinking it is a good candidate for plugin status. Not something everyone wants, but enough people seem to find it useful.\n. This is awesome. Thanks for putting this together. A few feedback items before this gets pulled.\n1. Can you clean up the PR a bit? There are some false positive commits where you removed an empty EOF line and some where files were renamed.\n2. I think the icon should also be a toggle. Clicking on the icon should open/close the accordion without navigating to the section. This would give a better scan/search experience.\n3. The accordion item's href hash should have {{@key}} not {{@../key}} so that a click links to the item and not its parent.\nWhat does everyone think of \"+\" and \"-\" instead of  \"\u25bc\" ? I think the +/- is a little lighter and cleaner.\nLet me know your thoughts. If we agree with the icon click toggle and/or the +/- idea I can help add an SVG symbol to the icon set.\n. Not a bad idea. It would require some thoughtfulness in how it would affect layout at smaller viewport sizes.\nI tried to be forgiving and unobtrusive when building the default layout. Adding horizontal elements can make the layout unpredictable and frustrating to work with.\nStatefulness is definitely something that needs to be captured. I'm open to seeing examples of how people are solving this problem.\n. Bootstrap expects the longform jQuery and not $, so your require statement should look like:\nrequire('imports?jQuery=jquery!bootstrap/dist/js/bootstrap');\n. I'm not I understand the issue.\nThe menu is wrapped with a parent .f-menu div. Items are wrapped with .f-item-group. You should be able to leverage those classes in you stylesheet as needed.\nYou can also add or remove classes from the fabricator layouts as needed. It's totally meant to be modified.\n. I'd just use that repeat helper for now.\nThe plan is to create a helpers repo to store/facade useful helpers like this. I'll probably just ditch iterate in favor of the one that linked to since it appears to work better.\nsee https://github.com/fbrctr/fabricator-assemble/issues/22\n. This might be related to https://github.com/fbrctr/fabricator-assemble/issues/21\nTry updating fabricator-assemble and see if that works.\n. This is a tough one. I've heard this request before (#51), but I'm not convinced it fits in the scope of this project because it assumes a lot about how a team works.\nThe best I can offer is an example of what's worked well for my teams. Its a more traditional approach:\n- Use semver to manage versioning of your toolkit\n- Create a changelog.html and changelog/ dir (similar to docs) that are just markdown docs with Changelog information for each release. End-users can read those docs and compare their version against the current version.\n. Hmm. Not sure. Are there .html files in that 002-type directory?\nThe error makes me think something in those files is malformed.\n. Try accessing them using dot notation.\ni.e. materials/modules/subdirectory/asset-promo-image.html -> {{> subdirectory.asset-promo-image}}\n. Yup. Its in fabricator.js and should be turned off by default.\nhttps://github.com/fbrctr/fabricator/blob/f60d3d622bfbee1165e200813250eeeea6b21a9d/src/assets/fabricator/scripts/fabricator.js#L20\n. Great question. In my experience, toolkits often have some level of imagery (icons, placeholders, etc). Imagemin is in place to ensure whatever assets you include get optimized. I've also found it helpful in providing a benchmark for page weight. When my toolkits get integrated, I can point back to the Fabricator pages and compare page weight pretty easily.\nGulp is pretty modular, so you can remove the dependency in your fabricator instance without affecting too much.\n. It's maybe not so obvious :) . I think could be a bug.\nAre these files in a subdirectory?\n. Front matter gets name-spaced internally, so doing default values like this is a little tricky.\nI use a helper default to achieve this.\nassemble({\n  helpers: {\n    default: function (value, defaultValue) {\n      return value ? value : defaultValue;\n    }\n  }\n})\n{{default value \"Default Text\"}}\n. It's been a while since I've visited this concept, but I totally understand the desire to associate default values with a partial more easily. \nI should be picking up another Fabricator project at work next month, so I can make a note to revisit this feature.\n. Just started work on v2.0 this week. Hoping to move quickly, so stay tuned!\n. This is an interesting idea. I don't know much about web components, but I'll keep it in mind as I work on improving the project.\nI've tried to keep Fabricator as flexible as possible, so I imagine it'll just be a matter of staying out of the way and making use of web components a seamless experience.\n. :guitar: :guitar: :guitar: \n. Should be possible. Looks like the > is getting encoded. Is that something you have in your template or is Fabricator encoding it?\nThe syntax for partials is {{> partialName}}\n. Thanks :100: \n. This is something I have marked as a priority improvement when I have more time to work on the project. Currently, the easiest way would be to define your own version of the {{baseurl}} property in a global data file (src/data/config.json) and give it a value like /styleguide.\nYou could then use it like: src=\"{{config.baseurl}}/assets/toolkit/styles/toolkit.css\".\n. Hmm. Not sure. I just tried using that same bit of JSON and it worked. Let me know if you figure it out.\n. Nope. You can try writing in yml to see if that helps. \n. published!\n. The 8 verbose unsafe-perm in lifecycle true line makes me think this is a permissions issue on your machine. Try running with sudo... or fixing the perms on your node installation.\n. No problem! I've been crazy busy as well but have plans to release some big updates on fabricator soon. \nI feel your pain with the layout issue - it's something I've come up against too. Not sure what the solution is but top nav might be a good option. I will play around with new menu styles for this next release.\n. This is great. I think the dropdowns might be problematic with long lists, but its on the right track.\nI'm thinking for v2 of Fabricator configurations like this will be \"plugins\" or \"themes\". I'm still working out the architecture details, but I definitely plan to allow more flexibility with stuff like this.\n. @jonorherrington I'm gonna jam with some designers here soon to come up with some layout solutions. We are starting a project that will be a large, deep taxonomy toolkit. I'll drop some screenshots in here as they come available.\n@jameswragg For sure. I think this is a bug with how I refactored the menu. I am planning to fix it at some point. Sorry for the inconvenience!\n. This is awesome. I love this idea. It helps meet a need I've heard from a lot of people.\nWhat do you think about making an additional function more specific to just toolkit values? Something like toolkit(colors, primary, Dark). Leave the data function available, but make a shortcut for pulling toolkit values.\n. Looks like the error Error (fabricator-assemble): The partial text-input could not be found is what might be the issue.\nThe {{> text-input}} partial include is used on the materials/structures/form.html example out of the box. If you delete the text-input.html file in structures, then you'll need to remove this reference.\n. For those that come behind you... was it orphaned {{> paragraph}} in some view/partial ?\n. Hmmm everything looks right. Any console errors? Tried restarting the npm start task?\n. Sorry this one dropped off my radar. Just checked it out and it looks good. Only thing is the whitespace...fabricator uses tabs. Make the update and should be good to merge.\n. :cake: \n. 1. You could create another folder as a sibling to materials/components and it would get parsed and turned into a partial. Something like materials/cards.\n2. You can pass context into a partial as either an object or a list of key value pairs.\n```\nmyCard:\n  title: \"My Card\"\n  status: \"Online\"\n\n{{> card filename.myCard}}\n```\nor\n{{> card title=\"My Card\" status=\"Online\"}}\nNote that in the first example you have to use dot notation to pass the correct context to the partial. If the file in the first examples was test-page-2.html, the reference would be {{> card test-page-2.myCard}}\n. Yup @ptibbetts is spot-on The menu partial can be manually constructed. \nHere's some more info on the context that's fed into the fabricator views: http://fbrctr.github.io/building-a-toolkit/data.html#context\n. Not currently. In the the works though!\n. I believe this is what you're looking for:\n{{material \"icons.foo\"}}\n. Still not totally sure what the solution here is. For icons, the pattern we've used in the past is to have a single \"icon\" pattern that accepts an id parameter:\n<div>\n  {{> icon id=\"some-icon\"}}\n</div>\nThe icon partial then looks something like this:\n<svg aria-hidden=\"true\" class=\"icon\" role=\"img\">\n  <use xlink:href=\"#{{id}}\" />\n</svg>\nIn this example, we have a separate SVG sprite that the xlink:href anchor points to.\nThis approach might not work in all cases, but hopefully it inspires a different approach. that works.\nClosing because I think this functionality is a bit out of scope for Fabricator. \n. We don't currently do this, but I could see this as a future enhancement or plugin.\n. Good to know!\n. For the css, you'd import the sass into toolkit.scss:\n@import '../../../../node_modules/bootstrap/scss/bootstrap';\nAnd import the js in your toolkit.js, probably something like:\nrequire('bootstrap');\nNot 100% sure - I haven't tried this before. You may need to leverage the scripts or imports loaders. More info here: https://fbrctr.github.io/advanced/third-party.html\n. Use the imports loader\nrequire('imports?jQuery=jquery!bootstrap');\n. The helper is actually {{material}} without the s at the end. That might be what's causing the error.\n. Ah. I think I understand now. Looks like there is a bit of a bug in the assembler but you can still get it to work.\n{{{material materialname.partial @root}}}\nThe material helper expects an additional parameter of \"context\".\n. Did you restart gulp?\n. :clap: \n. Couple of options here.\nFirst, the fact that JS doesn't run in context of the material is a bit of an intentional design decision on my part. I believe its best practice for toolkits to run automatically, with no requirement on the end developer to execute javascript. This enhances the portability of your toolkit - drop a material on the page and it just works. There are certain code design decisions you'll have to make in order to achieve this, but that part is up to you and your stack.\nHowever, in many cases you'll need to document javascript APIs for your materials. I like using the notes front-matter for this. Here's an example from a toolkit I recently built:\n\n\n. @DTwigs this is a bit of an architecture challenge I've experienced with toolkits. In the past my approach has been to do some DOM node checking on page load, then initialize anything that's present. If you're using jQuery, this is handled within the upfront node selection e.g. $('.some-component'). So you end up with something like:\n$('.dropdown').each(function () {\n  var dropdown = new Dropdown($(this));\n});\nThe drawback to this approach is that you have to create additional initialization and destroy methods for when components are dynamically added to the DOM. I've tried a few things in the past. Hoping to publish some real world patterns during my next project.\n. Looks like a YAML parsing error. Make sure you're only using spaces and not tabs in the YAML files.\n. I'm working on a refactor of fabricator, part of which is to address issues like this. Just need to find the time to knock it out!\n. For the curious:\nlayout is a reserved front-matter keyword that refers to layout files in the src/views/layouts directory. The default layout is default.html, but you can add different layout templates, then tell a page template to use it by defining the layout property in the template's front-matter. The value is the name of the file, without the extension.\n. Glad you figured this out. Sorry I couldn't help!\n. Not a huge fan of coffee, given the traction of ES6 and Babel. I'm not opposed to splitting tasks, but I'd rather do explicit import statements, rather than including an entire dir.\nLet me think on this one.  I am about to start an ES6 refactor of Fabricator this month. \n. :tophat: \n. Thanks @jdillick \n. I'm not sure there is a way around this. \nOn a side note, I suggest breaking each one of those buttons out into a separate file and grouping them in a buttons/ folder so you can access them in other components and templates as {{> buttons.default}} {{> buttons.success}} etc.\n. :+1: \n. Hope you figured this out!\n. No but I want to look into this.\n. Try clearing out the contents of materials/structures/form.html.\nYou may be getting this error because form.html is referencing a component, but you've moved that component so the reference is no longer valid.\n. Do you have a recommendation to what the gittatributes file should look like? Perhaps a PR?\n. \ud83d\udc4d \n. Thanks I'll take a look at this!\n. Interesting problem. I'm not entirely sure how you'd achieve this without creating duplicates of templates, which would be difficult to maintain.\nThis goes again the nature of Fabricator - it's not meant to be a static site generator, but of a toolkit generator. Your components and templates should be agnostic of content. \"Views\" are really meant to just be blueprints for how all the components can be strung together. The end system (site with real back-end) is where you'd pipe in the content.\n. Not sure what's going on here. I can investigate, but I've been pretty short on time, so I can't promise a speedy fix.\n. I'm working on a v2 release that will include a plugin system. I think this would be a great candidate for that. Hang tight.\n. I just started to lay out some design ideas in this repo: https://github.com/fabricator/fabricator-core\nNo code pushed yet, but hoping for something in the next couple of weeks. Life is crazy!\n. @BeauKelsey I've been focusing elsewhere after a job change. I may or may not pick this back up. \ud83e\udd37\u200d\u2642\ufe0f . Yes! Just saw this done on a project. You can use the gulp-inject plugin.\nhttps://www.npmjs.com/package/gulp-inject\nHere's the relevant part of the gulpfile:\n```\ngulp.task('svg', ['assemble'], function () {\n    var svgs = gulp\n        .src(config.src.icons)\n        .pipe(svgmin())\n        .pipe(svgstore({ inlineSvg: true }));\nvar fileContents = function(filePath, file) {\n    return file.contents.toString();\n};\n\nreturn gulp\n    .src(config.dest + '/**/*.html')\n    .pipe(inject(svgs, { transform: fileContents, removeTags: true }))\n    .pipe(gulp.dest(config.dest));\n\n});\n```\nAnd then the html inside one of the templates:\n<div class=\"icon-sprite\" style=\"height: 0; width: 0; position: absolute; visibility: hidden\">\n  <!-- inject:svg --><!-- endinject -->\n</div>\n. I think the only one you're missing is gulp-svgmin\n. You do! \nhttp://fbrctr.github.io/building-a-toolkit/data.html#context\n. Try removing the space between the # and each: {{#each navItems}}\n. This will be tough. Fabricator is really designed to help with the initial development.\nIf your existing site already has a build system for the styles and scripts you could remove those portions of the gulpfile and just use the templating task to generate your documentation site.\nYou'll need to modify the default layout to point to your already compiled stylesheet and javascript files, then add your .html materials as needed.\n. \ud83c\udfb8 \ud83c\udfb8 \ud83c\udfb8 \n. I do this often with toolkits. You'll need to modify the f-menu hbs template to read from data.toolkit (if you prefer defining data in that format).\nYou could also just hard-code your menu items.. Try reinstalling/upgrading your node_modules.. The plan is to have a plugin system that should accommodate for this type of thing.\nUnfortunately for Fabricator, I just moved and started a new job this summer, so I've been in a bit of a hiatus. Hoping I can put more time toward this project in the future.\n. Sounds like a error with your dependency resolution. You may try reinstalling/upgrading your packages.\nI also recommend using the Yarn package manager over npm.. Sorry, I don't have any experience with Vue + Fabricator.\nClosing because it falls out of the scope of this project, but others are welcome to contribute to an answer.. You could define a property in your front-matter and change the material rendering to use that property rather than the \"material\" code.\nI think something like this would work:\n```\npreview: |\n  \n\n\n  ...\n\n``. Yea I don't think this is necessary.. Try adding theresolvedefinition to the object exported bywebpack.config.js`\nhttps://github.com/fbrctr/fabricator/blob/d536d2e5868a478271176eaddc782fa8d3fb58b2/webpack.config.js#L59. Can you leave this as 9000? The LR port looks great, I just prefer a predictable web port.\n. One small nitpick...add a space before the opening paren if (block.data) {\n. - tabs not spaces\n- single quotes not double\n- brace style = collapse\n. source and streamify can be removed and uninstalled since they are no longer used.\n. Can this be moved to the var block at the top, next to the webpack var delcaration? Just a matter style preference\n.\n. style preference: always use curly braces on new lines. http://jshint.com/docs/options/#curly\n$ jshint gulpfile.js\n. style: no new lines for braces } else { \n. add || index.html to the end so that it matches the root page without the full path. e.g. http//localhost:300/\n. This regex also needs to be modified to exclude trailing .sub-component in the url. For instance, in the default Fabricator instance when you navigate to http://localhost:3000/components.html#lists.ordered the \"Lists\" item in the side bar should highlight.\n. Add a toolkit() function shortcut that pulls in the toolkit map, eliminating the first argument.\ne.g.:\ncolor:  toolkit(colors, primary, Dark)\n. Remove this example. Helpful to see the demo, but maybe fits better as a comment in the functions dir.\n. let's call this data.scss\n. ",
    "nicetransition": "I agree with you on this, that seems like adding a testing framework should not be a part of this project -- but have the ability to add one.\n. I'm curious to know what this means? Is it something like brand colors that are used for the site? If so, is it from Sass vars?\n. Awesome, this will be super nice\n. Or a simplified version:\ncd *your-workspace*\n    git clone https://github.com/resource/fabricator.git\n    mv fabricator *your-project-name*\n    cd *your-project-name*\n    rm -rf .git\n. Somewhere in the root, so I know the current version that my project is using -- similar to how you would check the version of a JS library in your project to validate if its the latest. With Fabricator being a tool, it should have it somewhere easy to find. Based off open source frameworks, I started putting VERSION.md and CHANGES.md in the root.\nHere are two examples that I made:\n- VERSION.md\n- CHANGES.ms\n. True from a \"contributing standpoint\", but from someone that downloaded the zip or git a git clone/rm -rf .git you don't have the git history. It's expecting the developer to go out to GitHub and compare files.\n. :+1: good call\n. FYI, looks like libsass will not fully support 3.3 https://github.com/hcatlin/libsass/issues/263\n. Recommend alternative -- gulp-compass\n. Any more thoughts on this? I've been using my suggested setup since March and I have not seen lag using Ruby Sass Gem.\n. I've debated this constantly, with the current useage of JS/CSS and compilation tools/frameworks it makes since to move to the styles and scripts because \"/js/\" might include more than just a *.js and the same for \"/scss\"\n. Once you're ready, it might be good to make this a variable in Yeoman\n. I can keep my fork up-to-date, so if someone want non-libsass version then you can reference my setup.\n. :+1: \nI'm all for that, but in my alternative solution I have the code pre-written and it's just controlled by a boolean:\n`` javascript\n/**\n * Sass CSS precompiler Options\n *sassGem(boolean) to determine ifgulp-sassorgulp-ruby-sass` is used for compiling Sass\n1) gulp-ruby-sass\n   * Dependencies: Ruby and Sass gem  - install\n   * Support for latest version of Sass\n 2) gulp-ruby-sass\n   * Dependencies: No additional dependencies\n   * Uses Libsass - C/C++ port of the Sass CSS precompiler\n   * Lighter than full Sass gem but does not include all latest functionality of Sass\n */\nvar sassGem = true;\n\u2022\n\u2022 ...\n\u2022\n// Sass Error options\nvar sassOptions = (sassGem) ? {\n    trace: true\n} : {\n    errLogToConsole: true\n};\n\u2022\n\u2022 ...\n\u2022\n// styles\ngulp.task(\"styles:fabricator\", function() {\n    return gulp.src(\"src/fabricator/scss/*/.scss\")\n        .pipe(plumber())\n        .pipe(sass(sassOptions))\n        .pipe(prefix(\"last 1 version\"))\n        .pipe(gulpif(gutil.env.production, csso()))\n        .pipe(rename(\"f.css\"))\n        .pipe(gulp.dest(\"dist/assets/css\"))\n        .pipe(gulpif(!gutil.env.production, connect.reload()));\n});\ngulp.task(\"styles:toolkit\", function() {\n    return gulp.src(\"src/toolkit/assets/scss/*/.scss\")\n        .pipe(plumber())\n        .pipe(sass(sassOptions))\n        .pipe(prefix(\"last 1 version\"))\n        .pipe(gulpif(gutil.env.production, csso()))\n        .pipe(gulp.dest(\"dist/toolkit/css\"))\n        .pipe(gulpif(!gutil.env.production, connect.reload()));\n});\n```\n. :+1: \n. Oh wow, why did this happen?\n. Format is not as big of an issue because it currently aligns with the standards we worked on but aligning with node.js standards makes sense too.\nI'm not seeing what you are asking us to look at? How is the code above different? \n. The underscore is not required in Sass, I've always seen it being recommended not to include it.\n. Nice updates!\n. This was by original design. I believe the purpose was to streamline the process by having every instance of Fabricator using the same setup. Another reason this is setup exists is due to speed, the more items (directories and files) Gulp watches there is a slight reduction in speed and refresh rate. But, I'm on your side with this, I usually do exactly what you did and add the directory to the gulp file...\n. I vote for \"Demos\"\n. I like this idea A LOT. I've been using BrowserSync on a lot of my projects.\n. I actually started one but it's using an updated version of Fabricator that passes through my variable to allow Sass 3.3 (gulp-ruby-sass).\n. @LukeAskew, what's the harm? :)\n. Just to allow for latest release pieces. Libsass has had some awesome updates: now includes @at-root and maps but some of the functions are still missing. A big one is also how sourcemaps are handled, that's why I included sourcemaps in my options. \n. Have you tried to get sourceComments: 'map' to work with libsass? I can't seem to get it to output, it just errors...\n. It's actually this case:\ntemplate.html contains {{module \"add-helper-class\"}} and module.html has {{submodule \"another-helper-class}}. This causes it to not render. Hmmm\n. So you have something like...\nhome.html\n```\n    \n        Home \n    \n\n        Lorem ipsum dolor sit amet, consectetur adipisicing elit...\n    \n{{form \"ballerify\"}}\n\n```\nform.html\n```\n    \n\n            {{form-input}}\n            {{form-input}}\n        \n    {{form-button \"button-primary\"}}\n</form>\n\n```\nform-button.html\n<button class=\"form-button\">Submit</button>\n. ^ To confirm I just tested that exactly and it fails on build: undefined\n. Latest version and I was able to reproduce it in 0.6.3\nOn Thursday, December 4, 2014, Luke Askew notifications@github.com wrote:\n\nStill can't reproduce this. What version of Fabricator are you using?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/resource/fabricator/issues/89#issuecomment-65630499.\n. Odd thing is now I can't replicate it - but I saw that 1-1 yesterday using that exact example in the latest version. * scratches head *\n. Something is still causing this issue in another project, but I guess it's not what I outlined here - If I figure it out, I'll let you know.\n. I still have the issue in my project but I'm not sure what it is -- might just be a naming convention :\\ \n. \n",
    "kyleknighted": "This would be huge, as there really is no explanation as to what Fabricator even is! If I weren't nosy and decided to tinker a bit, I'd probably have skimmed right over it.\n. I've integrated this functionality in a local version of Fabricator that wouldn't make a very clean PR.\nWhen I have a bit of free time I will work on getting it all into a cleaner environment so that I can submit this.\n. I agree with this. I'll take a crack at adding this functionality @LukeAskew \nIf I don't put in a PR soonish - feel free to take over :)\n. I assumed that adding in a Flash layer to this tool would be overkill, so I added in the ability to be able to select the code snippet with the click of a button.\nI attempted to match current styles.\n. The issue I see with the auto selection on mouseenter is if/when users would like to only select specific parts of the code. You're requiring then to copy it all, paste it elsewhere and the select just the piece they want. \nWith the additional click of the button it is a user initiated event so that we know it's an action that they're wanting to preform. I could be wrong though and at the end of the day it's your project. \n. Adding contenteditable is doable, but I guess I'm not seeing the benefit of the user being able to modify the sample code since it won't live render it above.\n. Also, after editing the pre tag, the code syntax is no longer highlighted.\n. Not sure how to implement contenteditable that isn't editable, except maybe look for keydown and block all of them, unless it's cmd/ctrl+c?\n. I'm good with that. I was just trying to avoid changing elements with my example.\n. I vote we try to create to a \"standard\" for naming conventions.\nFollowing http://patternlab.io/ ideals Fabricator components would be similiar to \"atoms\" and/or \"molecules\".\nWhile structures are mostly \"organisms\", but could also be considered a \"template\".\nSo that leaves Prototypes being most in common with \"Pages\", but also possibly \"templates\"\nNot sure where that leaves it, but as these types of system start to gain traction, I think some kind of naming standard is going to need to happen in some capacity. \n. In all honesty, I've rebuilt fabricator to a point where it shares maybe 10% of your original code base. But, we don't use prototypes at all because we have too many layouts to make it worthwhile. \n\nOn Jul 27, 2014, at 8:02 PM, Luke Askew notifications@github.com wrote:\n@kyleknighted totally.\nHow are you guys using \"prototypes\" currently?\nIn practice, I've only used it to build out templates, sort of as reference or as a blueprint for integration. That's why I'm leaning toward \"template\" - to make the naming convention seem less arbitrary.\nIs anyone using them differently?\n\u2014\nReply to this email directly or view it on GitHub.\n. To add to this...\n\nnpm WARN deprecated node-uuid@1.4.8: Use uuid module instead\nnpm WARN deprecated minimatch@2.0.10: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue\nnpm WARN deprecated minimatch@0.2.14: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue\nnpm WARN deprecated graceful-fs@1.2.3: graceful-fs v3.0.0 and before will fail on node releases >= v7.0. Please update to graceful-fs@^4.0.0 as soon as possible. Use 'npm ls graceful-fs' to find it in the tree.. ",
    "daveespionage": "Hmm, looks like imagemin is doing it. Checking their bugs.\n. The npm dependency cache-file has gone missing, and the authors website no longer exists. This is unusual.\n. This pull request would fix the issue: https://github.com/sindresorhus/gulp-imagemin/pull/17 \nI'm not sure why the maintainers have left gulp-imagemin alone for several months with breaking changes. \nJust updating the package.json for gulp-imagemin to use image-min ~0.2.0 allows dev to execute as expected. Have not tested impact on image processing. \n. FYI, due to this issue with gulp-imagemin, fabricator's image copy does not work as expected unless the imagemin handler is commented out in the gulpfile.\n. Pull request merged, closing.\n. Thanks @kyleknighted !\n. WOOOHOOO STANDARDS\n. ",
    "jdelight": "No problem - this looks like a fantastic project. Been looking for something like it for a while. Great work!\n. I like the fact that it doesn't give you a starter kit tbh... there are so many of them that a large percentage of people will end up having to take out whatever is there by default before adding what they want.\nOne option is the yeoman approach of asking you at setup what you want to add (bootstrap, foundation, pure... etc)... but I prefer to wire these things up myself. \nAlthough I guess it's already opinionated in choosing sass & browserify. \n. Sounds good - PR open here #93 :+1: \n. :dancer: Thanks!\n. Good spot :+1: \n. ",
    "mrbinky3000": "I'd just like to add that the hash tag can be removed when pushing to production.  A simple regex replace could do the trick.\n. ",
    "qaid": "@mrbinky3000 - although this wont be officially supported with Fab, did you find a way to satisfy the needs that inspired this issue?\n. AH! I found the solution: updating my gulp.js file.\nThere were two places in my gulp.js file that needed to have my new directory added:\n1. around line 123, the variable opts has a property called materials that needed to have my new directory name included in the array;\n2. around line 172 inside of the gulp task to watch, I had to add the new directory to the array of watched directories.\nIs this by design? Or might there something wrong in my set up that does not automatically add newly created directories to these gulp parameters? If the former, a heads up in the docs would be super helpful for others that might get stuck at the same point.\n. I don't know ~~much~~ anything about creating efficient grunt tasks, but perhaps ordering the tasks so that there is first a task to map the nodes of src/toolkit/ to the materials array and the watched directories array, and then the collate task run. \nI guess The variable ops would have to be generated higher up in the scope before the collate task in that case.\n. Thanks for the update - I did have some config errors there. You're support and replies are keeping me in this game.\n. I'd put a vote in for \"Templates\" or \"Views\" (in that order) since those terms can communicate an assembled set of patterns for re-use or reference. \"Assemblies\" makes a lot of sense to me as well, but feels very/overly technical.\n. Nice!\n. @bbodine1 - can you describe a bit more how the css is pulled into the angular project through node packages?\nI'm currently building a Fabricator instance along side and in support of an Ember project. I've structured things so that Fabricator's styles are a subtree repo that can be consumed by (and also updated from) the Ember project. It works well enough, but it's not as elegant a solution as I'd prefer. Interested in your approach with Angular and node packages.\n. @ptibbetts the project I've built with Fabricator is an internal document at the moment. But are there specific questions you might have about the way I set it up?\n. +1 this idea.\nAlthough I could see how it inches a bit towards \"opinionated\" since it's not necessarily the way one might organize their colors and typography in the context of a style guide.\n. It's interesting that those are the same questions I ask myself for figuring out what to put in the notes section related to each individual component/material. Well, maybe not the integrate into workflow part.\nI do agree that those are questions that an overview should be able to address. Having a defined and separate \"part\" of the toolkit that provides these answers would be useful.\n. @jaredshaunsmith - nice! :+1: \n. I also agree with the \"+\" and \"-\" instead of the arrow. I implemented @jaredshaunsmith's tweak and the sidebar does get a bit crowded with the arrow character. Otherwise I really like have the accordion effect and grouping.\n. Thanks for the suggestion!\n. I see the command to write sourcemaps in two places in gulpfile.js:\n- Around line 59, in the context of fabricator styles: .pipe(sourcemaps.write())\n- Around line 70, in the context of toolkit styles: .pipe(gulpif(config.dev, sourcemaps.write()))\nPerhaps removing or commenting out one or both of those lines would do the trick?\n. ",
    "haydenhancock": "Sorry to open this thread back up but I can't seem to get the images to work either. I've tried everything mentioned here. I've created a folder in src/toolkit/assets/images and placed my images there. I have not been able to get them to display properly. Any suggestion on what I am doing wrong?\n. When I run npm run I do not see any errors. I am linking the image by src=\"toolkit/assets/images/logo.png\"\n. Luke, thanks for your reply. I am not 100% sure why it wasn't building the images folder, however, I recreated it and it seems to be working as expected. \n. Ordering components would be a huge benefit. I guess I could come up with some naming convention that would order it for me though. As @dietergeerts mentioned, I will need more time to determine a better solution.\n. Cool. Interested in seeing what you come up with!\n. Agreed! I think this would be a good feature. Something similar to semantic-ui.com would be ideal.\n. ",
    "dietergeerts": "I also had this problem, with no error given. After some investigation, I noticed the imagemin function did it. I commented it out in my project and all was working fine. I don't know the exact problem, still need to check out.\n// images\ngulp.task('images', ['favicon'], function () {\n    return gulp.src(config.src.images)\n        //.pipe(imagemin()) // This is causing issues with images!!! TODO: Check this!\n        .pipe(gulp.dest(config.dest + '/toolkit/images'));\n});\n. I put as much in structures as possible to have only the very small pieces in components already. I think personally it's more the ordering that's bothering me. But for grouping, I would like to see typography things seeing grouped, as paragraph, lists, ... Just all text related stuff.\nAs it is now, you have some in components, and then the headings and stuff are in the overview. I don't find this logical as a heading could also be seen as a component. And it's not clear that 'overview' contains typography things. So maybe just an extra section for typography components? I have to use this more before seeing a good solution.\n. Great! I love fabricator and it's great to see it will grow!\n. This doesn't work if the toolkit is in a subfolder of your server... (adding ./ before {{baseurl}} does.)\n. Hi, I was thinking more in a way where this fabricator would be a node module that will be used to build the actual toolkit. This way, we can benefit from using newer versions in already existing toolkits. Don't know if you like this idea, but if you do, I would gladly help you.\n. @tonifisler, but what when for example the ability to use multiple config files is added to fabricator? You can't update your toolkit after it has been generated. You'll have to edit it manually.\nThe config files I speak of is what I need to have now. We have multiple clients and all want to use different colors etc..., so we need to build the toolkit with different configurations.\nWhat I am thinking to do is have fabricator as a node dependency, and only have the actual files/components/etc... in our toolkit, ow, and a file that will hold the configuration. This way we can benefit from extra features/bugfixes etc.. in the future.\nYeoman could then be used to startup the project, that \u00cd am aware of, and will be the next step to fasten our toolkit development.\n. Hi, I forked and created something what I had in mind. Not finished, but good for what I need right now.  Maybe you can look at it? https://github.com/dietergeerts/fabricator. This way I can have another project use this to build the toolkit and only having the files specific to the toolkit and not the whole build process. Please let me know what you think of it.\n. While figuring this one out, I see that when setting the default in assemble to an array, all works. It seems that the following line is messing things up when one is an array and the other a string:\n// merge user options with defaults\noptions = _.merge({}, defaults, userOptions);\nI'll see to fix it and do a pull request on the fabricator-assemble repo is this ok?\n. I actually don't know if it must be solved in fabricator-assemble, as it's actually the lodash merge method that doesn't do what it's supposed to do, no? Any thoughts?\n. Hi, I filed that bug in the lodash project and they already fixed it: https://github.com/lodash/lodash/issues/1375\nNow just waiting to have it released with a new version on npm.\n. @LukeAskew , Hi, any comments would be welcome. I just want to know how you are looking at this possibility. I don't want yet another repo out there. Better to have one with the option of how to use it.\n. I don't know if you had the time to look at it, but maybe it's better to have this as a seperate project that is used to build a toolkit rather than start one from it? I created an npm module for it and will try to keep it in sync with the original fabricator (this project). That way, people will be able to choose how they would like to use fabricator. I hope this is ok? @LukeAskew I called the npm module 'fabricator-builder' to stay with the same kind of naming as the other fabricator projects. Is it ok if I use your logo? Still have to edit the readme.\n. ",
    "adamweis": "Templates seem to make the most sense to me thinking about how I will likely be using them. It could be a full page template or partial page template.\n. ",
    "astanush": ":+1: We're using BrowserSync as part of our Gulp setup for a Jekyll site and it works really well. Here's a copy of the gulpfile.js if you want to see how we implemented it.\nhttps://gist.github.com/astanush/0cabdb36fcd8bf448ca0\n. ",
    "etoxin": "+1 just spent 30 mins trying to figure out how to do this.\n. ",
    "Yago": "Maybe I can help a bit.\nFor example, you have a button as the most basic of your component and you want to include it in your form material, but without the same label. You can do something like : \nbutton.html\nhtml\n<button class=\"btn btn-primary\">\n  {{#if label}}\n    {{label}}\n  {{^}}\n    My primary button\n  {{/if}}\n</button>\nform.html\nhtml\n...\n{{> button label='Submit my form !' }}\n...\nMaybe I don't really understand how we can use the data, but this solution works also pretty well :wink:\n. Hey @LukeAskew some news on this side ?\n. Great ! I'm excited to use it :smile:\n. ",
    "Couto": "I've just tried to replicate the issue on my personal computer, and\neverything installed successfully. I need to check again on my work\ncomputer (and other colleagues' computers) to better understand the problem.\nI can however say that I deleted the .npm folder previously and tried to\ninstall the dependencies without luck, so I would guess that all\npermissions were correctly assigned to my user. (couto:staff)\nAnyway, I'll take a deeper look at the problem tomorrow, and sorry for any\ninconvenience, if it turns out to be a problem on my setup.\nOn Mon, Sep 29, 2014 at 5:52 PM, Luke Askew notifications@github.com\nwrote:\n\nSeems like a perms issue. When you run $ ls -la ~/ are you listed as the\nowner of .npm?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/resource/fabricator/issues/77#issuecomment-57191200.\n. \n",
    "mikeputnam": "This is resolved by upgrading your npm: https://github.com/npm/npm/issues/6309\n. ",
    "rskaggs": "Yeah, I could turn xmlMode on and that fixed the problem, but I wasn't sure if you wanted to make that a default on fabricator. Wrapping all of the paths in g tags \"works\" but since SVG is xml based it still results in malformed svg tags.\nIn the loading section on cheeriojs: https://github.com/cheeriojs/cheerio#loading it said I should have all of the options available that are part of fb55/htmlparser2 https://github.com/fb55/htmlparser2/wiki/Parser-options\nHowever, using the recognizeSelfClosing does not actually do what it is supposed too.\nPersonally, I find Cheerio to be a tad opinionated. It is also doing the same with my self closing img tags. I know its not required to close all of your tags with HTML5, but I still find it the better practice for readability to have all tags close. I would prefer if Fabricator/cheerio respected my choice. I will probably re-fork fabricator and try to replace cheerio with something else. That being said, still love the tool.\n. ",
    "kflorence": "Also this would solve the problem of rendering the same component in different states without having duplicate html.\n. In concept, it is similar to http://patternlab.io/docs/pattern-pseudo-patterns.html\n. @LukeAskew I'd like to define all my components inside template files, like Handlebars for example, then I can render the different variations of them based on data instead of duplicated HTML. This has the additional benefit of being able to use the same template files inside other apps and knowing that they are in sync with the styleguide templates.\n. @LukeAskew BTW, I started playing around with this concept using metalsmith: https://github.com/kflorence/metalsmith-styleguide -- not quite ideal yet, but should give you some idea of what I mean.\n. @LukeAskew Hey there, I actually ended up rolling my own since I couldn't find anything that suited my requirements. You can see it here: https://github.com/solarmosaic/styleguide\nIt was done as a hackathon project at my current company, so it's still a bit messy but we will be cleaning it up soon.\nI'll be on vacation for the next week, but I'll try to play around with the new branch when I get some free time.\n. ",
    "Spone": "Hi there,\nin addition to this, it could be useful to have a way to render each component and structure on its own page. This way you can test them on a mobile device, or load them in a resizable iframe (as Pattern Lab does, using ish.).\nWhat do you think?\n. ",
    "ctdesign": "Thanks. Do you add that to the same components/structure folder as the item you want to add a note to?\n. Cheers, thanks\n. ",
    "csergiuu": "Hello guys, I just have another question about this. \nI've created .md file but it seems to ignore things I've got on .html file. \nAny advice?\nThanks!\nCheers. ",
    "cgray24": "same here.  the .md files seem to take precedence and its content is used as the material content, not as notes. Anyone else solve this? Feel at some point it must have been broken with an update. . ",
    "DavidDronsfield": "Same :( The html file isn't showing. Just the .md content.. ",
    "shakyShane": "nice :+1: \n. ",
    "jlbruno": "No problem! Thanks for a good tool!\n. Hey @LukeAskew any chance there's been progress on this? I'm trying to do what I think is the same thing.\nI've got a component that uses front-matter to define some values, but when I include that component into a structure, I want to have some different values. \n. Thanks. That'll be awesome and will keep the code much cleaner instead of needing to pass a bunch of overrides into our partials and use a bunch of if statements to look for the existence of the overrides!\n. ",
    "kennethillman": "Hi @LukeAskew , is magic templating task ready for review? \nWill it handle inclusions of subfolders?\nLike if i want to group html files in different folder within \"STRUCTURES\" and it all still compiles to the dist/toolkit/structures.html file.  \nsrc folder ex.\n- STRUCTURES\n- - form.html\n- - SUBFOLDER1\n- - - subfolder1.html\n- - SUBFOLDER2\n- - - subfolder2.html\n. The rewrite feature sounds great and thanks for the quick reply.\nHope you can fix the sub folder inclusion, i really need it :)\n. I took it for quick spinn this morning and must say it was smooth. \nLove the new easy way to make your own taxonomy and layouts (includes, looping any material as you want). Feeding data into materials is a very nice feature and to store notes inside the files is a big plus, reduces amount of files.\nWill play some more with this branch during the coming week. \nAnd as i said no issues at all my initial test round.\nKeep up the good work Luke! \n. ",
    "jameswragg": "This is looking great!\nThe repeating problem for me is that I build a suite of components & styleguide that I'm happy with, start my client project with my toolkit CSS but the real-world requirements of my HTML quickly forks from my Fabricator component markup, reducing the usefulness of the whole process.\nIdeally I'd author and fix issues with my components within Fabricator & my project would consume my Fabricator components but this is where my issue lies & unsure how to approach this as the project work I do is within a Django-esque framework and not compatible with Handlebars. Will v1.0 help at all here?\n. @paulrobertlloyd we'll probably be following the same approach with our Fabricator toolkit. I'd very much like to see how yours turned out if it's available anywhere?\n. With this advice in mind, see this as one approach.\n. When you say plugin do you mean a JavaScript utility like moment.js or pikaday.js that's used in this toolkit but not the next? Or a Fabricator plugin like commenting on a component for example?\n. Great, yes that plugin would be appreciated! We've got a LOT of components & the navigation is getting a little unwieldy in it's current state.\n(really enjoying Fabricator!)\n. Idea for a Fabricator plugin \u2013 Resizable components: every component lives in it's own iframe, with a width resize handle. This would provide RWD testing (iframe hitting breakpoints) per component rather than resizing the whole window/viewport & losing your scroll position.\n. We're loving Fabricator, finding it incredibly useful although we do find the UI problematic, so encouraged to see this conversation.\nSomething I'd love to see discussed in a future update is: Component updates that don't lose scroll position - CSS updates are seamless but when changing HTML the whole page refreshes, losing the scroll position. This is especially difficult when testing responsive breakpoints.\nSee: https://github.com/fbrctr/fabricator/issues/164#issuecomment-146601404\n. ",
    "bwhittington": "Thanks for responding.  I was able to get something working without dealing with the recipes. I'm not sure what long term implications of doing it this are but here is an example of my toolkit.js\nvar $ = require('./jquery-2.1.3.min.js');\nvar header = require(\"./components/header.js\");\nheader.openSearchBox($);\nheader.closeSearchBox($);\nBasically, if I want to use jquery in all of my component JS libraries, I have to pass it in to the methods. Any feedback on that?\n. It definitely hates base64 encoded images when refreshing structures and templates.  I began removing them one by one from my code and each time the time went down pretty significantly.  I was using close to 10 images with 500KB total which doesn't seem like too much to me.  A 4 KB one was adding 4 seconds to the 'collate' task.  After removing all of these encoded images I went from 1.67 min to 10s.\nNot sure if anything can be done about it but it seems like base64 encoding things is not the way to go in fabricator.\n. ",
    "Tyguy7": "This on Ubuntu 14.04, latest node.js\n. Yes, that's it, my npm is not up to date.  Thanks.\n. ",
    "VinSpee": "Awesome - it would be cool to have this as a configuration option in the generator. Thanks!\nOn Mon, Apr 6, 2015 at 9:33 AM, Luke Askew notifications@github.com\nwrote:\n\nYup. Sure is. You would just modify the gulpfile.js to use the new task and change the toolkit.scss file extension to whatever PostCSS likes.\nThis is why I use the folder name styles instead of scss or sass - it makes swapping a little easier.\nI will make sure to document this customization in the new docs.\nReply to this email directly or view it on GitHub:\nhttps://github.com/fbrctr/fabricator/issues/108#issuecomment-90066303\n. Will do! Thanks.\n\nOn Mon, Apr 6, 2015 at 9:37 AM, Luke Askew notifications@github.com\nwrote:\n\nNoted. I'm not familiar with PostCSS. Once the generator is updated to 1.0 (later this week), a PR for that feature would be welcomed.\nReply to this email directly or view it on GitHub:\nhttps://github.com/fbrctr/fabricator/issues/108#issuecomment-90068597\n. i ended up with this:\n\n``` js\n{\n  \"name\": \"ui-kit\",\n  \"version\": \"1.0.0-2\",\n  \"description\": \"The LevelEleven UI Toolkit\",\n  \"homepage\": \"http://ui-kit.leveleleven.com\",\n  \"main\": \"dist/assets/toolkit/styles/toolkit.css\",\n  \"files\": [\n    \"dist/\"\n  ],\n  \"scripts\": {\n    \"gulp\": \"gulp\",\n    \"prestart\": \"npm install\",\n    \"build\": \"npm install && gulp\",\n    \"preversion\": \"npm run build\",\n    \"postversion\": \"npm publish\",\n    \"prepublish\": \"git push --tags && git push\",\n    \"start\": \"gulp --dev\",\n    \"test\": \"npm run build\"\n  }\n}\n```\nI think it will work - I'm going to add another task for pushing to S3\n. ",
    "ebowers": "Great. Thanks @LukeAskew !\n. ",
    "richhauck": "I'd hate to have to put ./ before every instance of {{baseurl}}... \nWhere's a good place to define baseurl for all template files to inherit it?\n. ",
    "casio": "Nice, that fixes the issue, thx!\nRegarding my other question on the gitter channel wrt overriding vars from outer structures, views, etc.\nThat doesnt seem to work currently. Example:\n```\n// src/materials/components/button.html\n\nmodifier: \"btn-default\"\nlabel: \"Submit\"\n\n{{label}} - {{externalvar}}\n// src/materials/components/allbuttons.html\n{{> button label=\"OK\" }}\n{{> button label=\"Cancel\" modifier=\"btn-warning\" }}\n{{> button label=\"Buy now\" externalvar=\"Foo some\" }}\n```\nThis will only render \"Submit\" buttons. However the externalvar is being rendered correctly.\nDont know if this is intended behaviour, but I think it'd be great to support this kind of configuration of components from inside structures, view, etc.\n. > What are you trying to achieve? Default values?\nYea, default values and the ability to use BEM style modifiers for the atoms/structures/whatever artefacts I implement and use.\n. Take the above button example. How'd U deal with such a configurable component in a toolkit?\nHave one .html file/material per each permutation and use partials like {{> button-warning }}?\nProbably better to put up another issue for this, I guess..\n. Hm, that doesnt scale that much, though. What if btn-sm & friends come into play then?\n. ",
    "iansoper": "If you're handing off a design to a developer or team and you have very specific ideas about how patterns should be used, and how they relate, how they are built, then this could be very helpful. \n. ",
    "camdagr8": "I'm working on something like this. I often need to manage dependencies and figure out design change impact on the existing code. Currently, I use my IDE to figure this out by searching for a particular class or something unique with the atom/molecule/organism/etc.. As a follow up to this, I'm trying to create a dependency tracker so that I can see where partials are being used so that I can quickly asses risk caused by changes.\nI've come up with a decent work around that involved me creating a version of the parseMaterials() function in my gulp file and writing data to a .json file. I triggered the function in the assembler:watch task.\nThis however caused me to have to exclude the .json file from the config.templates.watch array. \nAnd specify the config.materials and config.views values (even though they are the same as what is being used by default, I needed the values for my custom parse function). \nIt would be really cool to be able to inject that info into the assembly so that it could be used like the views and materials object. . ",
    "lmolema": "Ok, found it by commenting out each component and each structure and tracked the error eventually. Remains my question: Is there a way to see in the error log which file causes the assemble task to fail?\n. Yes of course, I will log this issue in that repo, should done that in the first place :)\nThe gulp stream didn't break and the application was still available. Everything gets 'assembled' until the stream hits the error in the code. Everything afterwards does not 'assemble', but the application remains available.\nThe problem was I moved the checkbox.html component to the sub-folder form-elements, while it was included in a form.html structure later on. I had to change the path there to {{> form-elements.checkbox}}. \n. ",
    "bckmnn": "hm nope output looks like above but still just asset and src folder in dist, is there a possibility to check whats happening during compilation. sadly i don't really know at which files to look. during install it can't build the fsevents package. not sure if that might affect it.\n. I am using a portable node runtime thats buildup by the script provided here: http://blog.yjwong.name/node-js-portable-runtime/ it's a windows powershell script, but thats the only way i can get any node.js tools running on my company pc.\nI did the gulp debug thing as suggested, but it revealed nothing interesting to me. Here the output:\n```\nPS D:__LibraryTest> npm run build\n\nfabricator@1.1.1 build D:__LibraryTest\nnpm install && gulp\n\n[11:40:02] Using gulpfile D:__LibraryTest\\gulpfile.js\n[11:40:02] Starting 'clean'...\n[11:40:03] Finished 'clean' after 341 ms\n[11:40:03] Starting 'default'...\n[11:40:03] Starting 'styles:fabricator'...\n[11:40:03] Starting 'styles:toolkit'...\n[11:40:03] Starting 'scripts'...\n[11:40:03] Starting 'favicon'...\n[11:40:03] Starting 'assemble'...\n[11:40:03] Finished 'assemble' after 79 ms\n[11:40:03] Finished 'default' after 135 ms\n[11:40:03] debug-styles:toolkit: src\\assets\\toolkit\\styles\\toolkit.css\n[11:40:03] debug-styles:toolkit: 1 items\n[11:40:03] debug-styles:fabricator: src\\assets\\fabricator\\styles\\f.css\n[11:40:03] debug-styles:fabricator: 1 items\n[11:40:03] Finished 'favicon' after 302 ms\n[11:40:03] Starting 'images'...\n[11:40:03] gulp-imagemin: Minified 0 images\n[11:40:03] Finished 'images' after 5.15 ms\n[11:40:04] Finished 'styles:toolkit' after 1.28 s\n[11:40:04] Finished 'styles:fabricator' after 1.32 s\n[11:40:04] Starting 'styles'...\n[11:40:04] Finished 'styles' after 3.99 \u00b5s\n[11:40:05] Finished 'scripts' after 1.9 s\n```\nI figured since the styles tasks looks like its working fine, it could be some issue with the assemble task. So i tried to run the tests for fabricator-assemble. I got the following output:\n```\nPS D:__LibraryTest\\node_modules\\fabricator-assemble> mocha\nfabricator-assemble\n    1) should assemble a template\n    2) should assemble docs\n    3) should assemble user-created views\n    4) should assemble with layout includes\n    5) should assemble with helpers\n0 passing (186ms)\n  5 failing\n1) fabricator-assemble should assemble a template:\n     ENOENT, no such file or directory 'D:__LibraryTest\\node_modules\\fabricator\n-assemble\\test\\output\\index.html'\n      at Object.fs.openSync (fs.js:439:18)\n      at Object.fs.readFileSync (fs.js:290:15)\n2) fabricator-assemble should assemble docs:\n     ENOENT, no such file or directory 'D:__LibraryTest\\node_modules\\fabricator\n-assemble\\test\\output\\docs.html'\n      at Object.fs.openSync (fs.js:439:18)\n      at Object.fs.readFileSync (fs.js:290:15)\n3) fabricator-assemble should assemble user-created views:\n     ENOENT, no such file or directory 'D:__LibraryTest\\node_modules\\fabricator\n-assemble\\test\\output\\pages\\home.html'\n      at Object.fs.openSync (fs.js:439:18)\n      at Object.fs.readFileSync (fs.js:290:15)\n4) fabricator-assemble should assemble with layout includes:\n     ENOENT, no such file or directory 'D:__LibraryTest\\node_modules\\fabricator\n-assemble\\test\\output\\includes.html'\n      at Object.fs.openSync (fs.js:439:18)\n      at Object.fs.readFileSync (fs.js:290:15)\n5) fabricator-assemble should assemble with helpers:\n     ENOENT, no such file or directory 'D:__LibraryTest\\node_modules\\fabricator\n-assemble\\test\\output\\helpers.html'\n      at Object.fs.openSync (fs.js:439:18)\n      at Object.fs.readFileSync (fs.js:290:15)\n```\nhowever there is a test\\output\\test\\fixtures\\views folder containing nicely renderd html pages. so i guess its a path thing in fabricator-assemble.\n. found the issue .. apparently path.dirname(file) does not return a path with the os path seperator, but one with standard slashes. when changing ~~line 486 of index.js~~  all instances of path.dirname(file) to path.normalize(path.dirname(file)) in  index.js\n. Just tested 1.1.2 assembly works fine, but the links in the html are still referencing the src/views/... folder, i updated my comment yesterday it's all occurences of path.dirname() that need to be normalized.\nAnd one more thing i noticed. The current compiled f.js is not working in IE11. IE complains about a not defined variable in line 400 because of mode strict. That would be line 2 in prism.js. If i change the line to var self = (typeof window !== 'undefined') it's working\n. ",
    "herince": "It was 0.7.0. Just updated it. Now I'm trying to figure out how does the new one work (with the hlep of the docs)... the links in the menu for my components do not compile correctly (and I just added custom html files in the components and structures folders). So I keep getting the same mistake \"Cannot GET /src/materials/components.html\"... still reading and trying to find where my mistake is\n. I know most of the things you just explained to me. I'm just not very familiar with JS templating for now...\nYour documentation is pretty good, tho. After rereading it and looking up a few more articles on handlebars templating, I think I can fix what I wanted to.\nThanx! (the problem was that the project I'm working on got very big and I needed the \"grouped materials\" feature) The toolkit you did is pretty awesome... I did look up many styleguide generators before choosing fabricator... GJ! :)\n. Can I delete an issue (because ot it's non-issue-ness)? :D\nP.S. Fixed everything. Thanx! (and I'm sorry for the stupid questions)\n. + 1\n. ",
    "mattboy115": "I am having a Cannot GET error as well. It was working just fine when I first built the project. But when I stopped the Localhost3000 and came back to it with npm start and a lot of things come back with \"Cannot GET\" like my structures. The structures folder in src and all the html files I made are still there but they won't display in the Localhost3000. Also they're not showing up in the dist folder. I've heard you have to edit the gulp file to fix this but I wouldn't know where to start in editing it. I'm still very much a beginner.\n. ",
    "paulrobertlloyd": "Precisely. Support for this out of the box would be tremendously helpful. For example, my team already has a collection of markdown docs in our repo, and across nested folders. It would be nice to have these rendered by Fabricator without too much faffing about!\n. Ah ha! That makes a lot of sense actually. Thanks (and closing).\n. @jameswragg It\u2019s not public, I\u2019m afraid (and by all accounts, that project is going in a different direction now\u2026). Sorry!\n. @LukeAskew Oh, that helper is useful (I had previously used if statements @ptibbetts, but they can get unwieldy). Thanks for the tip :smile:\nI guess the problem is that the example I provided above is relatively simple compared to most components. Ideally a component can be provided with a default context (data that provides dummy copy, images, button states etc), but which can be overridden by another context as provided via a partial (BTW, only started getting to grips with handlebars, and the concept of contexts etc.)\nLooking at PatternLab, it seems to handle this use case well (with a data.json file used to provide these default values, which can be overridden when partials are called in individual views/pages). Is there a way to achieve the same with fabricator as it exists today?\n. Awesome, thanks @LukeAskew!\n. ",
    "lyzadanger": "+1 This is the most material change we've had to make to our fork. We've written a Handlebars helper to regexp off prefixed ordering patterns from names for display, but it feels less than elegant. Thanks!\n. @LukeAskew Sure! We originally picked up the naming convention we're using from Pattern Lab, that is, prefixing filenames with digits and a hyphen. I don't think we're attached to the specifics, but it's nice to be able to order based on filename. The pattern I am regexping off of filenames looks something like /\\d{0,4}[-_]?/\n. One side effect to consider is the names that partials get registered as. Pattern Lab also applies the massaging to partial names (stripping off leading digits and dashes). Something to keep in mind!\n. ",
    "slightlyoffbeat": "I am also used to the naming convention from Pattern Lab. Instead of buttons.html and type.html It could be 01-type.html and 02-buttons.html.  Also for materials: 01-atoms, 02-molecules, 03-organisms etc.\nJust a suggestion. It was a pretty easy transition from pattern lab, but custom order is what I miss the most.\n. ",
    "afknapping": "@LukeAskew \nhey, sorry, we went with building our pattern lab with vanilla jekyll, so I lost focus for fabricator a bit...\n\nDoes your example show a fenced code block written in markdown?\n\nyes. that would enable all kinds of ascii docing either manually or with tools like Monodraw.\n\nnegatively affects the legibility of item code blocks\n\nin that case, this PR is not a good thing \u2013 the main use case for code blocks is of course code and not ascii doc. so i would close this unmerged for now.\n. ",
    "boehmatron": "Is there a realistic chance for this feature ?\n. the opinion on what styleguides are made for may differ where and how they are used. \nIf you take a big corporate enterprise that has one CD/CI department that defines one online styleguide and has to deliver that styleguide to a lot of different internal departments, agencies or other external suppliers, you often can not use one single css file but what to have one place where you always can reference and point developers/designers to, so that they can copy the html/css/js they need.\nLooking and these big companies (and there are a lot of them, like banks, telcos,..) it really makes sense.\nI would love to use fabricator internally if it would be possible to add the css. or maybe there is a way to make it modular, and add different sections to one style definition,.. like css, like javascript,.. like (whatever)...\nDo you see my point?\n. Sounds great to me Larry,... and I would absolutely support it :)\n2015-07-10 11:39 GMT+02:00 Larry Botha notifications@github.com:\n\nThis looks like an opportunity to consider some way of using plugins with\nfabricator. Not everyone would necessarily want this, but it would be\nbeneficial to some.\nI've added a bunch of features to our own fabricator\nhttps://github.com/fixate/fixate-fabricator which is quite specific to\nhow we setup our styleguides, but some of these features would be super\nuseful to some. An opt in via plugins would be great to avoid bloat on the\nmain project.\nPlugins could be installed via bower / npm, and perhaps switching a flag\nin a config.\nWhat's great about fabricator right now is that it's so small, and so\nflexible; a plugin architecture would be an excellent step forward in\nretaining this simplicity, while allowing for on-demand extension /\nfeatures.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/fbrctr/fabricator/issues/131#issuecomment-120321114.\n. Cool stuff,...\n\nJust for my interest: hier do you manage the css styles so that devs and designers can see what the definition is exactly. For example if it comes to a specific font or color.\nI see fabricator very useful and mighty with a lot potential beyond the usefulness of developers, and I would love to see and use it :)\n. ",
    "tonifisler": "I don't see the point of such a feature. Why would you need to see the CSS styles? That is not what styleguides are supposed to be for...\n. Refer to BrowserSync documentation, I think you'll find your answer there: http://www.browsersync.io/docs/options/#option-ui\n. Yeoman is the way to go just for that.\nWe actually already built a Yeoman generator on top of Fabricator to help us with the setup of new projects. Fabricator is a standard node dependency and everything is running really smoothly. Go have a look at our \"Toolbox\" for inspiration maybe: http://frontend.github.io/toolbox/\n. ",
    "larrybotha": "This looks like an opportunity to consider some way of using plugins with fabricator. Not everyone would necessarily want this particular feature, but it would be beneficial to some.\nI've added a bunch of features to our own fabricator which is quite specific to how we setup our styleguides, but some of these features would be super useful to some. An opt in via plugins would be great to avoid bloat on the main project.\nPlugins could be installed via bower / npm, and perhaps switching a flag in a config.\nWhat's great about fabricator right now is that it's so small, and so flexible; a plugin architecture would be an excellent step forward in retaining this simplicity, while allowing for on-demand extension / features.\n. My node-fu is not 3rd Dan yet, but this is something I'd like to look into when I get a minute - I've used KSS, and SourceJS, and they don't scratch the surface of how much Fabricator has sped up my workflow, so this will be a huge benefit to me, too.\nPerhaps this will give someone else the inspiration to get it going, or begin a discussion, too :)\n. First of all you'll obviously need the classes defined somewhere.\nIn Fixate's fabricator I @import the production styles straight into the fabricator styles (https://github.com/fixate/fixate-fabricator/blob/master/src/assets/fabricator/styles/fabricator.scss#L25), because we make heavy use of placeholders (%my-class). \nNow, if we don't have a class explicitly set in production styles, then we can create those in specific fabricator stylesheets.\nWe have a layout view responsible for showing how grid, padding, and margin modifiers look. This view's styles are also @imported into fabrictor.scss, but above production styles: https://github.com/fixate/fixate-fabricator/blob/master/src/assets/fabricator/styles/fabricator.scss#L15.\nYou can pair the typography view with its own fabricator _typography.scss in the same way. Here you can add or define your own classes to extend or add styles only to fabricator (our _layout.scss illustrates this - don't mistake it for fabricator's _layout.scss).\ne.g.\n``` scss\nprod _typography.scss:\n// we use a modified BEM syntax for full HTML comment compatibility with class names\n// font colour modifiers\n%fc_-primary {...} \n%fc_-secondary {...}\n%fc_-tertiary {...}\nviews/_typography.scss\n.fc_-primary { @extend %fc_-primary;} \n.fc_-secondary { @extend %fc_-secondary;}\n.fc_-tertiary { @extend %fc_-tertiary;}\n```\nAnd then in data/typography.yml:\nyml\ncolours:\n  - primary\n  - secondary\n  - tertiary\nIn my typography/font-colors.html material I'll then loop over the data in the yml to generate the full classes for my fonts, and apply them to some typographic element (e.g. <p class=\"fc_-{{this}}>lorem</p>). I do this for pretty much every modifier I have - font colours, backgrounds, font faces, font sizes, wraps, islands, even padding and margin modifiers.\nThis isn't exactly how our fabricator is setup, but this will give you a good idea on how can go about achieving a flexible and informative styleguide.\nFork our repo: https://github.com/fixate/fixate-fabricator (you'll likely have to change a few paths here and there - you won't have style.scss where our fabricator looks) and you'll see how everything comes together, or just have a look around.\nI also added a script which dynamically gets hex and font size values, too. No more referring to your Sass or design for any of those values - fabricator does it for you.\nThe important thing to remember here is that fabricator is the module handling all the dirty work, and is a dependency on the entire front end where you're free to tinker as you want. This means that you can do pretty much as you please :D \nThis project continues to blow my mind on a daily basis. There is no alternative to fabricator, and we can only make it better O.o\n. here's ours: https://github.com/fixate/fixate-fabricator\ncustom JS stuff, more materials, different data. Really need a gh-pages, though.\n. agreed, fabricator's styles should all be namespaced so as to reduce any conflicts with whichever css anyone imports. A reset affects styles globally, yielding different styles from what someone may expect in production.\n. For production code I avoid implicit anything, but it's definitely sped up automating builds and adding tasks etc.\nI suppose it also depends if it makes adopting Fabricator more difficult.\n. Yup! \nIt's a matter of \n\nadding mount points to your views\nimporting your components into fabricator's js\nmanually mounting your components on the mount points in the views. \n",
    "emmareardon1": "Thanks, i've added 9000 and Fabricator now loads up on 9000. \nHowever BrowserSync itself with its settings page is still running on 3001.\nFabricator loads first so takes the first available ports. Then I need to run another task afterwards which wants to run on 3001 and i'm unable to change this port without manually changing it inside a directory so would be easier for production to alter Browsersync.\nDo you know what may be occurring to get it off 3001?\nThanks for your help.\n. Missed that! Thank you for all your help\n. ",
    "Simeto": "Thank you,\nThe approach works in my case.\nHave a nice day !\n. ",
    "bbodine1": "We use fabricator so that I (Frontend Developer) can develop a website in tandem with the backend team and the angular team. Ultimately what I create gets imported into an angular website. The angular website is the production. The css is pulled in through node packages but the html is manually copied to the angular templates where the required ng-stuff directives are added where they are needed to make angular function correctly.\n. I agree. A + and - makes more sense. \n. ",
    "ptibbetts": "@bbodine1 @qaid I'd love to see either of your implementations if you could share a link?\n. :+1: for https://github.com/fbrctr/fabricator/pull/165 , although I personally think that should be included in core.\nContinuing from @jameswragg 's point about resizable components, I really liked ish, which is included in PatternLab.\n. @paulrobertlloyd if it doesn't need to be in the front matter you could use an if:\n<button class=\"button\">{{#if value}}{{ value }}{{^}}placeholder{{/if}}</button>\nI got this snippet from http://frontend.github.io/toolbox/components.html\n. @jraeruhl @genmacg I don't know how to stop materials from being generated but to to \"hide\" them you could create a new folder but then modify the menu to not display this folder.\nFor example, I work with \"components\", \"objects\" and \"elements\" however I did not want the materials under \"elements\" to be listed in the sidebar of Fabricator and so I have changed f-menu.html from:\nhbs\n{{#each materials}}\n  <li>\n    <a href=\"{{@key}}.html\" class=\"f-menu__heading\">{{name}}</a>\n    <ul>\n      {{#each items}}\n        <li>\n          <a href=\"{{@../key}}.html#{{@key}}\">{{name}}</a>\n        </li>\n      {{/each}}\n    </ul>\n  </li>\n{{/each}}\nto \n``` hbs\n\nComponents\n\n    {{#each materials.components.items}}\n      \n{{name}}\n\n    {{/each}}\n  \n\n\nObjects\n\n      {{#each materials.objects.items}}\n        \n{{name}}\n\n      {{/each}}\n  \n\n\nElements\n\n```\nYou could do the same with a /partials folder, just make sure to explicitly call the folders you do want to be displayed in the sidebar.\n. ",
    "ghost": "\n. I tried to download the blank version 0.6.0 and ran it the same way, this one worked but with errors as well...\n. Ching Ching! Thanks\n. ",
    "damondok": "Hi,\nI'm running with the latest version of fabricator and unfortunately watch still exits every time the slightest error occurs with my sass files. I have to npm start again every time this happens.\nThis is quite annoying, but not annoying enough to make me stop using fabricator because it's so damn awesome, insanely well done mate.\n. Thanks for your quick update @LukeAskew, works like a charm now =)\n. @jraeruhl That's basically the solution I went with. Quick and Easy =)\n. Thanks a lot for your input @LukeAskew. Unfortunately that didn't work, but I got a step further. Maybe I explain the use case a bit more in detail with a better example:\nI have a component that renders a list with an SVG Icon and some text. Each icon is a component itself that contains markdown for an SVG element. I want to reference those components via a variable in my yml file (see below)\n<ul>\n  {{#each list}}\n    <li>\n      <span class=\"icon\">{{material 'this.icon'}}</span>\n      <span class=\"text\">{{this.text}}</span>\n    </li>\n  {{/each}}\n</ul>\nThis is my list.yml where I pull the data from. The variable icon is the reference to one of the icon components in the folder materials/components/icons/... (icon1.html and icon2.html)\n1:\n  text: Lorem ipsum\n  icon: icons.icon1\n2:\n  text: Ipsum Lorem\n  icon: icons.icon2\nWhen I run this I get an error though \"You must pass a string or Handlebars AST to Handlebars.compile. You passed undefined\"\n. @LukeAskew I did actually use only material in my code, I only messed up in my comment. So unfortunately that's not causing the error\n. ",
    "Idrus82": "yeah..you're right with the database dependencies.\nI just wondering if we could integrate like SideComments.js https://github.com/aroc/side-comments in the future, but i'm not sure how to store it in database. :smile: \ncurrently we integrate Disqus in our project. please see the image below.\n\nit is a bit tricky to make each material has a comment box; but achievable. currently it is being tested.\nBTW, Thank for your prompt feedback. :+1: \n. ",
    "rmpel": "i.m.h.o. solution 1 is the only valid; In javascript, you MUST use (ES5) var or (ES6) let/const to declare a variable. Thank you for pointing to where the error is, now I can fix my site :). ",
    "jonorherrington": "Awesome Luke! Thanks for the fast response. I figured you might have to hard code it. I just wanted to double check before I made any changes.\nBTW Fabricator has been a huge asset to have. Thanks for all your hard work. You rock!\n. @LukeAskew please feel free to close this. I originally opened this with an old account which I have since deleted. I don't have the ability to close it now :. Sorry!\n. Good point @LukeAskew. I will make that small modification and commit. Thanks!\n. @LukeAskew I have updated the code to account for the changes we talked about. Please take a look.\n. @waltercruz on line 26 just have the object property \"toolkit\" have an array set as its value.\nI.E.\ntoolkit: [\n    './src/assets/toolkit/scripts/toolkit.js',\n    './src/assets/toolkit/scripts/main.js'\n]\nYou can do the same thing for the styles as well.\n. Please note that by doing this when going to dist it will concat everything into toolkit.js so there won't be multiple files.\n. Hey @rafal-leap this was answered in #143 \n. :+1: \n. Hey -\nIt doesn't have to be named base, but overview doesn't make much sense either. I do like Salesforce as it does just say style for the first page. Overview gives the impression that it is an overview of what the toolkit is. That is why the only parts of it that make sense for it to be on there are the top portion of that page. When you get into colors and typography, you have left the overview portion, and gone into actual styles. The only reason I suggested base is because it seems to be a language that is used in other architectures (i.e. SMACSS). Styles from a language standpoint doesn't seem very clear either, because everything in that toolkit could be considered styles. You know what I mean?\nThoughts?\n. Yeah this is helpful.\nI guess we need to ask the question: \nWhat qualifies as content that should be a part of the overview page?\nIn my mind (this is just me thinking while I'm typing) I would qualify this as apart of the overview:\n1. What is this?\n2. Who does this help?\n3. Where do I implement it?\n4. How do I integrate it into my workflow?\nWhat do you guys think?\n. @LukeAskew where are we on this one? I also think this would be a great one to push.\n. Ahh sorry @LukeAskew. I thought I saw that issue reported before but when I was looking for it, I couldn't find it. \nYep that did it. Thanks for the help!\n. Sweet man. Don't want you have to carry the full load. I am actually sketching out a few ideas myself. I will pass them along to you in when I have them down.\n. Hey @LukeAskew -\nI gave a stab at this. Not sure the proper etiquette for sharing possible design revisions on Github and in no ways do I want to make you feel like you are in an uncomfortable position by having to reject these ideas. With that said I did jump into Sketch and tried to layout some ideas on how I think the layout could possibly be better with Fabricator in order to solve the problem we talked about before. \nI tried to stay true to the design style that you used before using a minimalist style and no color. Please take a look and let me know if you think this might be heading in the right direction or if you just want take it on. \nAgain I hope this is helpful and at least helps start a conversation.\nThanks!\nJono\nCheck out the designs here: https://invis.io/KV5GFTIXP\n. Any suggestions on how we could there could be a horizontal menu without drop downs?\n. I'm stupid ... the end ...\n. Yeah so in the page.html file there was an include for the paragraph and form partial. This leads me to ask is it the best idea to be calling those within that file since I'm guessing the majority of people will remove the demo partials and create their own.\n. I know this might sound like a silly question but do you have anything inside of those three partials?\n. Any thoughts on this @LukeAskew?\n. That's weird ... i use editorconfig on all projects ... and pulled this down as a fresh instance. Sorry I don't know what happened. Will try again.\n. Ahh I know what happened ... I copied it from another project where we had to update the .editorconfig to meet some code requirements. Problem should be fixed now @LukeAskew. Thanks!\n. :clap:\n. -1\n. Again people like to use different css resets. Not everyone uses normalize. I don't think this should be baked into vanilla Fabricator.\n-1\n. What's the use case you are using this for @vidhill? At the moment the scss and css don't appear under the notes section (i know this has been another feature requested in previous issues). Since that isn't a feature yet, is there a reason you are trying to parse comments in scss/css instead of just using the YAML/Markdown combo?\n. @LukeAskew where are you on this? This is a small thing but actually has effected a lot of projects our team has worked on so I would love to see this put through.\n. Did some more digging into the dependencies and found this: https://github.com/fbrctr/fabricator-assemble#layouts. This answered my question. Thanks!\n. Found the solution ... I had set the src up with the file path start with ./dir/ whereas you have it written as just dir/. I updated that in my guplfile and that fixed the issue I was having. Glad I was able to solve my own issue :). Thanks for this awesome app!\n. ",
    "thetypebeast": "@LukeAskew Since this issue is similar to mine, I'll post here.\nSince there's a way to specify ordering with materials, is it possible to add the feature to order views also? It would get around the issue of having to hard code the navigation, so that the menu can be constructed dynamically, just as it is with materials.\nFor example:\nmaterials\n|__ 01-components\n|__ 02-structures\n|__ 03-formations\nviews\n|__ 01-design-standards\n|__ 02-grid\n|__ 03-pattern-library. @BobbyBabes, to get custom ordering for directories inside the materials to work similar to ordering the files, you need to pay attention to the paths that your menu template is using to create the url. Note that in the menu template, I use the {{name}} property instead of the {{@key}} helper to get the specific path I need. {{@key}} outputs the file's full string before the file extention, and {{name}} outputs the string without the numeric prefix (##-).\nI hope all this answers your question! Please see below:\nUsing this structure:\nmaterials\n|__ 01-foo\n|__|__ 01-foo.html\n|__|__ 02-abc.html\n|__ 02-bar\n|__|__ 01-bar.html\n|__|__ 02-aaa.html\nviews\n|__ foo.html\n|__ bar.html\nand this snippet for navigation (f-menu.html):\n<ul>\n    ...\n    {{#each materials}}\n    <li>\n        <a href=\"{{name}}.html\" class=\"f-menu__heading\">{{name}}</a>\n        <ul>\n            {{#each items}}\n            <li>\n                <a href=\"{{../name}}.html#{{name}}\">{{name}}</a>\n            </li>\n            {{/each}}\n        </ul>\n    </li>\n    {{/each}}\n    ...\n</ul>\nYou get this result:\n <ul>\n    ...\n    <li>\n        <a href=\"Foo.html\" class=\"f-menu__heading\">Foo</a>\n        <ul>\n            <li>\n                <a href=\"Foo.html#Foo\">Foo</a>\n            </li>\n            <li>\n                <a href=\"Foo.html#Abc\">Abc</a>\n            </li>\n        </ul>\n    </li>\n    <li>\n        <a href=\"Bar.html\" class=\"f-menu__heading\">Bar</a>\n        <ul>\n            <li>\n                <a href=\"Bar.html#Bar\">Bar</a>\n            </li>\n            <li>\n                <a href=\"Bar.html#Aaa\">Aaa</a>\n            </li>\n        </ul>\n    </li>\n    ...\n</ul>\nScreenshot of ordered material directories:\n\n. ",
    "asaeed": "Thanks for the response Luke.  Your first suggestion passing the variable directly in worked great.  The 2nd didn't work for me however.  The button doesn't render - as if \"items\" was an empty array.\nI did find a workaround however which might suit me better than a YFM solution.  I'm going to use a simple handlebars helper as described here:\nhttps://github.com/assemble/handlebars-helpers/blob/master/docs/helpers/data/helper-parseJSON.md\nI like the idea of having the data defined inline as opposed to the top of the page.\ngulpfile.js:\ngulp.task('assemble', function (done) {\n    assemble({\n        logErrors: config.dev,\n        helpers: {\n            parse: function(data, options) {\n              return options.fn(JSON.parse(data));\n            }\n        }\n    });\n    done();\n});\nform.html:\n```\n\n\n        {{> text-input}}\n    {{#parse '{ \"text\": \"Submit\" }'}}\n        {{> buttons.button}}\n    {{/parse}}\n</div>\n\n\n```\nIt's nice to have the option to define data 3 ways - in separate files, top of the file, or inline.  I will see how it plays out and what combination of these i end up using.\n. ",
    "DJTB": "@jonorherrington I'd love to get a copy of the relevant code you're using for this and I can also have a go at adding the customisation suggested by Luke for a PR.\nA gist of the gulp tasks you've set up would be a great starting point if possible. Thanks!\n. Actually, I just noticed the PR for https://github.com/fbrctr/fabricator/pull/221 - which should achieve this well enough. @jonorherrington don't worry about it.\n. Just a +1... I'd love to see this merged into master if the conflicts are easily resolved.\n. Just add it yourself along with all the other things you'll be adding anyway\nI generally add modernizr - not arguing against its use, but anything unnecessary should be opt-in.\n-1\n. This isn't specific to fabricator at all, so you're unlikely to see further discussion.\nTry giving this a go.\nIn your webpack.config.js you can expose any libraries from node_modules (npm installed locally) to all your toolkit JS files as global variables\nvar config = {\n   /*  \n   * entry, output, module etc \n   */\n    plugins: [\n      new webpack.ProvidePlugin({\n        \"$\": \"jquery\",\n        \"bootstrap\": \"bootstrap\"\n      })\n    ],\n    cache: {}\n  };\nI'm not sure about bootstrap, but this works fine with jquery and other packages.\nthe ProvidePlugin format to expose global variables is\n\"variableName\": \"npm/node_modules package name\"\nThen you can reference variableName in your JS.\nAlternatively, read up on webpack's expose-loader.\nGood luck.\n. ",
    "waltercruz": "toolkit: [\n            './src/assets/toolkit/scripts/toolkit.js',\n            './src/assets/toolkit/scripts/jquery-1.11.3.js',\n            './src/assets/toolkit/scripts/bootstrap.js',\n            './src/assets/toolkit/scripts/bootstrap-maxlength.js',\n            './src/assets/toolkit/scripts/select2.js',\n            './src/assets/toolkit/scripts/select2_locale_pt_BR.js'\n        ]\nerror: Uncaught Error: Bootstrap's JavaScript requires jQuery\nAny way to not compress things, or to require the scripts one by one, without concat/webpack?\n. (sorry if these questions are too basic)\n. err.. I solved! I thought that my scripts weren't working due to some compress, but it's ok, it's was a bug on my js itself :(\n:)\nThank you for you code and patience! \n. ",
    "chrisk2020": "If you've been running gulp serve you may need to run the default gulp task to give the images task a hand creating the correct directories in dist\n. ",
    "dewwwald": "Wow! Thanks. Why does fabricator create a dist file? Does anyone know something I can read on this?\n. ",
    "nickmjones": "This still isn't working for me. I have an image at dist/assets/toolkit/images/avatar.jpg that I'm trying to render with <img src=\"../images/avatar.jpg\" class=\"avatar\"> to no avail. I've run the default gulp task and restarted the server with npm start. Any thoughts? How am I screwing this up?\n. ",
    "Webtransformer": "I changed a few things in my setup but I am using following code:\n<img class=\"img-responsive\" src=\"./{{baseurl}}/static/images/xxx.jpg\" alt=\"\">\n. I just used the names as css classes and hide them:\n{{#each materials}}\n            <li>\n                <a href=\"{{@key}}.html\" class=\"f-menu__heading {{name}}\">{{name}}</a>\n                <ul class=\"{{name}}\">\n                    {{#each items}}\n                    <li>\n                        <a href=\"{{@../key}}.html#{{@key}}\">{{name}}</a>\n                    </li>\n                    {{/each}}\n                </ul>\n            </li>\n            {{/each}}\n. Thanks! It worked :-)\nDid some research and now running a gulp task for copying the js files:\n// Copy JS Files to Distribution\ngulp.task('copyJSFiles', function() {\n   gulp.src('src/assets/js/*/.js').pipe(gulp.dest('dist/assets/js/'));\n});\n// default build task\ngulp.task('default', ['clean'], function () {\n```\n// define build tasks\nvar tasks = [\n    'styles',\n    'scripts',\n    'images',\n    'assemble',\n    'copyJSFiles',\n];\n// run build\nrunSequence(tasks, function () {\n    if (config.dev) {\n        gulp.start('serve');\n    }\n});\n```\n});\n. But it still works very well!. ",
    "ericwisehammer": "Hey there,\nI don't mean to gravedig on this but I can confirm the newest version of Fabricator has this issue in IE11 and the same resolution proposed by @mandalatv still successfully resolves it, @LukeAskew. \n. ",
    "LeBenLeBen": "Ah yeah sorry about that, I was quite busy these last days and I leave for holidays at the end of the week. I\u2019ll try to fix it until Friday. \n. It should be okay now :)\n. Damn, I forgot to test that case. The last regex seems better, thanks for that!\n. It looks like this issue is coming from the regex that remove the digit prefixes from the file name to create the Handlebar template.\nname.replace(/^([a-z][a-z0-9\\-]*\\.)?([0-9\\.-]+)(.*)$/i, '$1$3');\nAs you can see here, this target only the prefix once and if it\u2019s at the beginning of the key.\nChanging this line to something like name.replace(/(\\d+[\\-\\.]?)+/ig, '') which will replace all occurrences, wherever they are in the string as you can see here seems to fix the issue for me.\nWhat do you think @LukeAskew ?\nEDIT: This is actually related to Fabricator Assemble\n. @danmv I\u2019ve built a search for a toolkit using Fabricator. It\u2019s not perfect, it respond only to titles, but it works. You can see it live here and most of the code here.. Fabricator already beautify the HTML output with js-beautify. I\u2019m not sure I get your issue either.. Fabricator-assemble uses an HTML parser which \"beautify\" it. It is probably responsible for adding extra spaces here.. This sounds like a generic issue related to Node 7, have you seen this?. ",
    "rafal-leap": "Hi Mate\nThanks for that...this helps for the very top level sorting but if I have the second level like here:\n- materials\n|---components\n|-------dropdowns\n|-------labels\n|-------navs\n|-------badges.html\nI will have to do every folder manually...a bit of pain.\n. ",
    "kelvah": "+1 for the an overview/design section instead of the single page. \n. ",
    "jaredshaunsmith": "@LukeAskew happy to hear any feedback.  think this is a useful addition to fabricator for sure.  we love it and have been using it to build an internal pattern library for quick starting client projects.  thanks for putting it together!\n. added a condition under the setActive() function to check if window hash matches with an accordion.  previous commits had the accordion remaining closed when a user refreshed, or loaded straight to a hash. now the accordion will open when the page is loaded to a hash.\n. @LukeAskew \nSure thing! Some responses to your feedback below.\n1. Totally, will clean up.\n2. I agree from a UX perspective.  Good call.  Technically will require a refactor though, since these icons are :after elements right now, and I'm pretty sure we can't target a click on those independent of their parent element... correct?  Shadow dom and all that.\n3. Yep, good call.\nUpdated to \"+\" / \"-\" - will push in a bit to update the PR.\nThanks.\n. @LukeAskew \nOk! \n- Cleaned up PR a bit, left the file name changes, as those were just a further example of how to group items into an accordion.\n- Refactored icons to be in their own element and added javascript to control those individually from actually going to the href.\n. ",
    "muckinger": "Also a +1 for merging this feature\n. ",
    "willium": "some kind of invisible grid system for each material would nice -- especially for this use case and say, a grid of icons. It'd also be useful for cases like the color-grid where the code isn't really the implementation -- don't need to show code there.\n. ",
    "sensaetions": "Hi, just wondering what the status of this request being added as a plugin is?. Hi, do you have any updates for sub-folder support?. Thank you for the response! Curious what are the required gulp plugins that I'll need to make this injection happen? I know I need gulp, gulp-svgstore, and gulp-inject. What else?\n. ",
    "ovlb": "Ah, sorry. Got a head full of work and just being reminded of this. There were .html files in the folder, yes. However they were parsed without further problems after i\u2019ve removed them from the folder and just prefixed them with 002.001, 002.002 and so forth. \n. ",
    "lsarge": "Ah! Thanks so much.\n. ",
    "nategreen": "At the moment, they're all in src/materials/components but I've also tried putting button-group.html in src/materials/structures and it didn't seem to make a difference (except that it was in a different place in the navigation, and all that).\n. Trying to use Fabricator for something again this week, but having the same problem. Using {{material \"button\" this}} in the button group material renders properly...except that the angle brackets and such get encoded before it gets put out to the Fabricator site. :disappointed: \n\nSeems like the issue is probably related to #238, #208 and/or #195.\n. Thanks @iamkeir. I feel like maybe I tried that, but I'll have to try it again next time I get Fabricator out.\n. ",
    "iamkeir": "@nategreen I found that using three curly braces prevents encoding, e.g. {{{ variable }}} - not sure if that works in this context though (as per Handlebars docs)\n. @orangehaze afraid not, just had to avoid the usage. I've moved over to other pattern library frameworks, such as http://patternlab.io/. ",
    "roundrobin": "Hm, maybe my structure is incorrect:\nI am usually calling the partial in a template in views/pages like this {{> app.chat-header}} but in case of the nested partial call I am doing it in the materials/structures/app folder with {{> partialName}} by referencing a partial in the same folder....\n. ",
    "maljones": "I'm suddenly needing this as well so I can have multiple toolkits under one URL. I tried the baseurl redefinition and it borked out:\nError (fabricator-assemble): missed comma between flow collection entries at line 3, column 14:\n        \"baseurl\": \"learner\"\nThis is all I have in my new config.json file:\n{\n    // built-in props\n    \"baseurl\": \"/learner\"\n}\nI'm guessing I'm missing something really obvious.\n. It's the best kind of bug then... I'll let you know if I figure something else out. Was there any other declaration or wrapper in your config.json?\n. ",
    "createlogic": "Hi,\nFor multiple languages I want to use \"en\" and \"ar\" directories within data and then depending on \"lang:en\" or \"lang:ar\" gray matter variable.\nRegards,\nBilal. ",
    "alienlebarge": "@LukeAskew the change has been made by @LeBenLeBen (thanks to him :+1: ) in fbrctr/fabricator-assemble#31 and then merged.\nAny idea when fabricator-assemble will be in 1.1.10 to get this fix via npm ?\n. ",
    "motleydev": "Did you try manually running npm install first?\n. Thanks! I also like the idea of more helper functions, the only potential problem is that the importer brings the filename in as the first map variable and so the functions become file-name dependent. Not a huge issue but something to be mindful of. The only solution I can think of is to add a build script in gulp that generates helper functions using the base filename for any yaml files present in the data folder. Otherwise we just let it beak if they change the filename. :) What do you think?\n. Hey, any more thoughts on this? I'm happy to refactor according to your original concept, just curious what the status is. Thanks! I really like this project, I want to see it grow!\n. ",
    "DTwigs": "This would be huge.\n. Where do you initialize the dropdowns to show a working dropdown in your fabricator project?\nI don't like the idea of including that JS in your toolkit.js because it should be up to the consumer when to initialize the dropdowns.\nI do really like this notes approach though for documentation purposes.\n. So I found the culprit, it's the f-item-content.html\n{{#if notes}}<div class=\"f-item-notes\" data-f-toggle=\"notes\">\n    {{{notes}}}\n</div>{{/if}}\n<div class=\"f-item-preview\">\n    {{{material @key @root}}}\n</div>\n<div class=\"f-item-code f-item-hidden\" data-f-toggle=\"code\">\n    <pre><code class=\"language-markup\">{{material @key @root}}</code></pre>\n</div>\nThe two place where it calls {{material @key @root}} executes whatever code is in that material file twice.  \nNot sure what to do about that.\n. After reviewing some of your other issues I see that this is much more of a philosophy issue as to how and when ui elements are initialized.  \nI have decided to take the javascript out of each view and have them automatically initialized in my toolkit.js.\nThis makes this double rendering a non-issue.\n. ",
    "joeyfigaro": "@jonorherrington Not silly at all -- they've all got content, yes. \n. ",
    "jraeruhl": "@LukeAskew I don't see how this solution hides the material from the view. I believe I am looking for the same solution as @genmacg. I have folders and files within materials that I am purely using as partials and I do not want them to become generated f-item(s). \n. Thanks everyone! I ended up doing something slightly different, but the feedback definitely pointed me in the right direction. I ended up with...\n```\n{{#unless materials.navigation.components}}\n      {{#each materials}}\n            \n{{name}}\n\n                    {{#each items}}\n                    \n{{name}}\n\n                    {{/each}}\n                \n\n       {{/each}}\n{{/unless}}\n```\nThanks again!\n. Hmm. Just added the following code to watch and restart gulp as needed:\n```\ngulp.slurped = false; // step 1\ngulp.task(\"watch\", function(){\nif(!gulp.slurped){ // step 2\n    gulp.watch(\"gulpfile.js\", [\"default\"]);\n    gulp.watch(\"etc...\");\n    gulp.slurped = true; // step 3\n}\n\n});\n```\nThat doesn't seem to be doing the trick. So, I did another npm start to find the project wouldn't load. Backtracked my code additions. All works fine until I add the line indicated below.\n```\ngulp.task('default', ['clean'], function () {\n// define build tasks\nvar tasks = [\n    'styles',\n    'scripts',\n    'images',\n     'fonts',     // adding this line throws an error\n    'assemble'\n];\n\n// run build\nrunSequence(tasks, function () {\n    if (config.dev) {\n        gulp.start('serve');\n    }\n});\n\n});\n```\nMy error is: \n[11:33:18] Starting 'fonts'...\n[11:33:18] 'fonts' errored after 122 \u03bcs\n[11:33:18] Error: Invalid glob argument: [object Object]\nAny idea what I might be missing in the previous chunks of code added?\nTIA\n. Yes @citation-nm! This worked with the addition of the following to the config variable.\nfonts: 'src/assets/toolkit/fonts/*'\nThank you!!\n. ",
    "quentinbutz": "Nice one \u2013 thanks for the update\n. ",
    "james-dowell": "Hi @LukeAskew,\nFirst off, big fan of fabricator and have been using it for the last few projects I've worked on.\nIs there any news on this yet/is there anything I can do to help out on this? Similarly to @genmacg I attempted to dynamically load a partial by passing down a value into the partial, like so:\n{{> form.form-wrapper step=\"form.step-review-details\" }}\nThen in the form-wrapper.html material include the 'step-review-details' partial within some of the markup, like so:\n<div class=\"form__body\">\n    {{material step }}\n</div>\nOr something to that effect, hopefully that makes sense. I too have tried a few variations of this, including just attempting {{material \"form.step-review-details\" }} but continued received the error: You must pass a string or Handlebars AST to Handlebars.compile. You passed undefined\nThanks in advance,\n. I've done something similar to this in the past with stylesheets. I needed to split some of my stylesheets for alternate purposes.\nIf it helps, I altered the config object in the gulpfile to hold an array of scss files like so:\n...\n        styles: {\n            fabricator: 'src/assets/fabricator/styles/fabricator.scss',\n            toolkit: [\n                'src/assets/toolkit/styles/toolkit.scss',\n                'src/assets/toolkit/styles/tools.scss',\n                'src/assets/toolkit/styles/shared.scss',\n                'src/assets/toolkit/styles/oldie.scss'\n            ]\n        },\n...\nGulp should be able to handle that without making any other changes to the file. This reads from 4 separate files in the src/assets/toolkit/styles folder and outputs toolkit.css, tools.css, shared.css, oldie.css in the dist folder.\nAs for the JS I think you might want to play around with the webpack config in the webpack.config.js \nHope that helps :)\n. No problem, glad to help :)\nThat will work as long as your only using ES5 JavaScript. If you want to be using the nice ES6 syntax with babel you'll need to get Webpack to do that bit for you.\n. ",
    "vidhill": "I like the concept of writing the docs as close to the source code as possible, as is the convention with javascript documentation. (jsDocs, dGeni)\nExample KSS Comment syntax\n// Button\n//\n// Your standard button suitable for clicking.\n//\n// :hover   - Highlights when hovering.\n// .shiny   - Do not press this big, shiny, red button.\n//\n// Markup: button.html\n//\n// Style guide: components.button\n.button {\n  ...\n}\n.button.shiny {\n  ...\n}\n. ",
    "achtan": "scss is working fine, but in js i got this error Uncaught ReferenceError: jQuery is not defined\nso I installed jQuery with npm install --save-dev jquery but still the same error\nmy toolkit.js\nvar $ = require('jquery');\nvar jQuery = $;\nvar bootstrap = require('bootstrap');\n. not working, still the same error\n. can u please reopen this issue?\n. try this:\n'use strict';\nrequire('imports?jQuery=jquery!bootstrap-sass/assets/javascripts/bootstrap');\nvar $ = require('jquery');\n$('.dropdown-toggle').dropdown();\nand add to your webpack.config.js bootstrap loader\n```\nvar path = require('path');\nvar webpack = require('webpack');\nmodule.exports = function(fabricatorConfig) {\n\"use strict\";\n\nvar config = {\n    entry: {\n        'fabricator/scripts/f': fabricatorConfig.src.scripts.fabricator,\n        'toolkit/scripts/toolkit': fabricatorConfig.src.scripts.toolkit\n    },\n    output: {\n        path: path.resolve(__dirname, fabricatorConfig.dest, 'assets'),\n        filename: '[name].js'\n    },\n    module: {\n        loaders: [\n            {\n                test: /\\.js$/,\n                exclude: /(node_modules|prism\\.js)/,\n                loaders: ['babel-loader']\n            },\n\n            {\n                test: /\\.less$/,\n                loader: \"style!css!less\"\n            },\n\n            // **IMPORTANT** This is needed so that each bootstrap js file required by\n            // bootstrap-webpack has access to the jQuery object\n            { test: /bootstrap\\/js\\//, loader: 'imports?jQuery=jquery' },\n\n            // Needed for the css-loader when [bootstrap-webpack](https://github.com/bline/bootstrap-webpack)\n            // loads bootstrap's css.\n            { test: /\\.woff(\\?v=\\d+\\.\\d+\\.\\d+)?$/,   loader: \"url?limit=10000&minetype=application/font-woff\" },\n            { test: /.woff2?(\\?v=\\d+.\\d+.\\d+)?$/,    loader: \"url?limit=10000&minetype=application/font-woff\" },\n            { test: /\\.ttf(\\?v=\\d+\\.\\d+\\.\\d+)?$/,    loader: \"url?limit=10000&minetype=application/octet-stream\" },\n            { test: /\\.eot(\\?v=\\d+\\.\\d+\\.\\d+)?$/,    loader: \"file\" },\n            { test: /\\.svg(\\?v=\\d+\\.\\d+\\.\\d+)?$/,    loader: \"url?limit=10000&minetype=image/svg+xml\" }\n        ]\n    },\n    plugins: [],\n    cache: {}\n};\n\nif (!fabricatorConfig.dev) {\n    config.plugins.push(\n        new webpack.optimize.UglifyJsPlugin()\n    );\n}\n\nreturn config;\n\n};\n```\nand ofc add npm dependenci \"bootstrap-sass\": \"^3.3.6\"\n. sry my bad, ist working fine!\n. ",
    "niho28": "@achtan did you ever get this working correctly?. I have tried pretty much everything including suggestions here. Only using cdns has worked!\n. ok thanks I will try it.\nDo you have to run any command after in gulp for it to pick it up?\n. To output your vue data trying esacping with \\ \nFor example \\{{ item.title }}. ",
    "schmalaa": "If you are here via google, I had to add jquery to window. Hope this helps others in the same boat as I.\nwindow.jQuery = window.$ = require('jquery');. ",
    "Sensiblemnd": "I incorporated bootstrap sass in the link below. It has been a while but this might give you an example on how to do  it\nhttps://github.com/Sensiblemnd/fabricator-bootraps-es6. More details when I do a build the html is deployed to a subfolder in a domain foo.com/build.\nNow since the URL of all scripts in the html start with /asset/ all css and js are trying to load from the root which breaks the site.\n. The way I found to do it is just download the new version and move you src code over to the new build.\n. Could you be more specific with what you mean by prettify?\n. What code editor do you use?\n. ",
    "citation-nm": "Here's how I achieved working with web fonts:\nIn the var config I added\nfonts: 'src/assets/toolkit/fonts/*.*'\nThen, after the 'favicon' gulp task I added\n// fonts\ngulp.task('fonts', function () {\n  return gulp.src(config.src.fonts)\n    .pipe(gulp.dest(config.dest + '/assets/toolkit/fonts'));\n});\nThen in the collection of gulp server tasks I added\ngulp.task('fonts:watch', ['fonts'], reload);\n  gulp.watch(config.src.fonts, ['fonts:watch']);\nFinally in the list of build tasks I added\n// define build tasks\n  var tasks = [\n    'styles',\n    'scripts',\n    'images',\n    'fonts',\n    'assemble'\n  ];\nHope this helps.\n. Good stuff\n. ",
    "stevegibbings": "Yup I can see that approach. It may or may not work for us as the UI system is part of a white label site with a lot of code which we may choose to have in separate webpack bundles but I'm ok with the toolkit in Fabricator and production being bundled/split differently as long as the source modules are the same. That's a build issue. I may of course come back to that thought!\nThe way you wrote dropdown looks good and better than I had. My only thought would be having the JS in the code view rather than notes view. Maybe that's just a matter of getting used to it. It does help keep in in context with a fuller description of use. So I like it and I think I'll try that. \nThanks Luke I really appreciate your reply. \n. ",
    "darrenbarklie": "Not sure how this occurred; I combed through the offending loader.js file to no avail.  Thankfully a clean install and porting my SASS and modules resolved things.  Many thanks for the support @LukeAskew and thanks once again for an awesome framework.\n. ",
    "evgenious": "Had the same problem, the cause of it was wrong syntaxing in the comments of fabricator. Most common failure may be beginning a new line without \"|\".\n. ",
    "brelian": "Same problem, the reason is that there is not a space between tags and tag name. like this\ntags:PHP ==> tags: PHP. ",
    "zhouxincheng": "syncher-bin is right for me . ",
    "danmv": "Check this project out \nhttps://github.com/mohamedzougam/fabricator-bootstrap. \n. Thanks. I hope it comes out soon :) \n. @LukeAskew Just wondering how soon will v2 come out? Is there a branch that we could take a look at? \n. @lukeaskew is this something that the New version will include ? \n. ",
    "halovanic": "Adding this else block to the fabricator-assemble script resolved the issue for me:\njavascript\nif (collection) {\n    pageMatter.data.baseurl = '..';\n} else {\n    pageMatter.data.baseurl = '.';\n}\nIt should make all paths using baseurl relative.\n. ",
    "berkandirim": "@Sensiblemnd if you pass an empty string sourcemaps.write(''), then you have a separate map file. You could than add it to .gitignore if you don't want to deploy those files.. I'm trying to use Vue with Fabricator. My problem is that Fabricator treats {{ }} as handlebars and strips, but I need it for my Vue data. Any suggestions?. @niho28 thanks a lot!. ",
    "EmilTemirov": "I've solved this task by https://github.com/fbrctr/fabricator/issues/239#issuecomment-182049798\n. ",
    "orangehaze": "@EmilTemirov, it looks like it is working in 1.2 as it has a later version of Handlebars. . @LukeAskew, any insight from investigating this issue? @iamkeir, were you ever able to find a workaround?. ",
    "nathannash": "If I reinstall a new fabricator project the overview page at localhost:3000 will load but as soon as I start moving HTML files in /src/materials/components/ it will throw errors.\n. Hi, thanks for taking some time to help. I've tried your suggestion but it hasn't resolved the issue.\nI've installed node and npm on my windows host (original issue was on linux VM) and I get the same issue as above. Any time I delete a file in materials\\components fabricator seems to break.\n. After playing around some more and reinstalling a few times your original solution ended up resolving the issue. I had to completely remove the lines referencing components such as this one:\n{{#each materials.structures.items}}\n{{> f-item this}}\n{{/each}}\nfrom views\\structures.html and views\\pages\\home.html. Thanks for your help.\n. ",
    "BeauKelsey": "Any news on this yet? . Excellent! I\u2019ll try it! Thank you!\n\nOn Apr 6, 2017, at 7:16 AM, Luke Askew notifications@github.com wrote:\nYou could define a property in your front-matter and change the material rendering to use that property rather than the \"material\" code.\nI think something like this would work:\n\npreview: |\n  \n\n\n  ...\n\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/fbrctr/fabricator/issues/290#issuecomment-292188176, or mute the thread https://github.com/notifications/unsubscribe-auth/AJ_uoJnvFWVcbTaDXbQ-LuAu8QeyRaG-ks5rtPPHgaJpZM4MrvR3.\n\n\n. ",
    "andypillip": "Also the form\nnavItems: [Bootcamp, Personal Training, Fit Mom,\u2026]\ndoesn't work.\n. @LukeAskew sorry that was a typo in my issue. I didn't have a space in my toolkit.\nOtherwise it wouldn't have worked with the toolkit.navItems either.\n. ",
    "nrambeck": "Some problem here. I've had to reference the local variable with the global based on the pattern name:\nIf my pattern is widget.hbs then I can only access the local front-matter data arrays with the each help like so:\n{{#each widget.navItems}}\n. ",
    "karlschwaier": "I also struggled with this problem. {{#each widget.navItems}} works just as long as you are not moving widget.hbs into a sub folder like materials/components/widgets/widget.hbs. \n{{#each widgets.widget.navItems}} doesn't work either.\nIs this a bug or do I understand something wrong?\n. ",
    "wguldin": "Ah, I see, well thank you for the response. I really like fabricator's flexibility, it'd be cool if you could figure out a good workflow for existing projects. I think a lot of people, even with established design systems, are looking for something like this.\n. ",
    "danieldafoe": "Must have removed something or had naming collisions when I merged the generated gulpfile with my project's own.\n. ",
    "hubertinio": "Yes, I can. Something for format an ugly HTML code, making it readable and pretty, with the proper indentation, without line ending spaces, one space between HTML attributes and etc.\nhtml-beautifier\n. Rather Netbeans, but Im backend developer. I want get prettify HTML from frontend department for all my team (many editors).\n. In pretty HTML is simpler compare code between what we have in backend and new changes. \n. ",
    "GuerillaRadio": "I agree this is much needed. Has anyone figured out a way to add notes to groups of materials (i.e. a materials folder)?. ",
    "mahish": "I ended up with a workaround. Basically I duplicated & modifed notes functionality in fabricator-assembler/index.js which you can find in node_modules. Then used it once in the first material item within the group/collection in the same way as you would use notes. You just need to prepare your include templates.\n``javascript\n// get material front-matter, omitnotes`\nvar localData = _.omit(fileMatter.data, ['notes', 'collectionNotes']);\n// trim whitespace from material content\nvar content = fileMatter.content.replace(/^(\\s(\\r?\\n|\\r))+|(\\s(\\r?\\n|\\r))+$/g, '');\n// capture meta data for the material\nif (!isSubCollection) {\n  assembly.materials[collection].items[key] = {\n    filename: id,\n    name: toTitleCase(id),\n    notes: (fileMatter.data.notes) ? md.render(fileMatter.data.notes) : '',\n    data: localData\n  };\n} else {\n  assembly.materials[parent].items[collection].items[key] = {\n    filename: id,\n    name: toTitleCase(id.split('.')[1]),\n    notes: (fileMatter.data.notes) ? md.render(fileMatter.data.notes) : '',\n    collectionNotes: (fileMatter.data.collectionNotes) ? md.render(fileMatter.data.collectionNotes) : '',\n    data: localData\n  };\n}\n```\nCheck the index.js, lines 325-345 in fabricator-assembler repo.\nHope it helps.. And there is a (complicated) decision to make:\n- do we want to resize whole page?\n- do we want to resize all components but not the whole page?\n- do we want to resize some components only?\nEither way has some significant design consequences.\n. ",
    "pcabrera83": "On Wed, Dec 21, 2016 at 11:26 AM Beno\u00eet Burgener notifications@github.com\nwrote:\n\nThis sounds like a generic issue related to Node 7, have you seen this\nhttp://stackoverflow.com/questions/40308623/cannot-find-module-internal-fs-afer-upgrading-to-node-7#40406482\n?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/fbrctr/fabricator/issues/283#issuecomment-268566607,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/APktAzJDWh-toCWtgXtMwdMnB2CetzJmks5rKVMwgaJpZM4LSW51\n.\nI have not\n--\nPatricio Cabrera\n860-841-1207\n. Yes, it worked. Thank you for your help. . Do you know of any documentation to help me accomplish this? I am a designer who is trying to learn how to code. . \n",
    "BobbyBabes": "Resolved!\nFound several ways to do this here : https://github.com/fbrctr/fabricator/issues/230#issuecomment-181928049 I went for the one by  @jraeruhl. Thanks for responding.\nBut please have a look at the screenshot below. As displayed in the screenshot, everything is picked up and displayed correctly within Fabricator.\nThe issue is that the {{#each items}} block is never entered when I add a number prefix to the top layer of subdirectories in the materials directory to sequence them.\nThe top layer of subdirectories === elements, foundation, parts, presentational, and sections. Forget about components and structures. Those are the 2 shipped directories. They are unchanged and will be deleted.\nWith directory names 00-foundation, 10-elements, 20-parts, 30-sections, and 99-presentational nothing inside these directories is accessed (the {{#each items}} block is not entered).\nWhen I replace <a href=\"{{@../key}}.html#{{@key}}\">{{name}}</a> inside the {{#each items}} block, with the hardcoded text \"Show me what you got.\" it is not displayed. When I cut the hardcoded text and paste it right above/outside the {{#each items}} block, it is displayed.\nWhen I cut and paste the hardcoded text back inside the {{#each items}} block, and remove the number prefixes from the directories, the hardcoded text is displayed.\n(Just for the record, the directories 40-templates and 50-pages in the views directory have the same issue.)\n\n. This repo looks abandoned. Too bad.\nUnsubscribing and closing.. ",
    "ekfuhrmann": "While it does seem like the repo is all but abandoned, I believe you can resolve your issue by changing the copy within your each to reflect the new directory.\nSo in your example your each for the grouping directory would be {{#each materials.04-grouping.items}}. Doing so will serve the content of that directory within your page. I just wish there was a more elegant solution to the pathing as it is silly for it to have a capitalized letter due to using the {{name}} token.. ",
    "danieltian": "The number is not needed, and thus it should be {{ toggle-button }}.. ",
    "emkajeej": "You could always use the {{#if fabricator}} statement. Everything in the {{#if}} block will then only show in the Overview rather than in the pages calling for button.\n```\nnotes: |\n  All variations of buttons. These can be called through the 'style' attribute, ie 'primary', 'large primary', 'highlighted primary', 'small secondary'.  \n\n{{text}}\n{{#if fabricator}}\nRegular Blue Button\nLarge Blue Button\nSmall Gray Button\nBlue Button with Extra Emphasis \n{{/if}}\n```\n. ",
    "PierreGUI": "Your JS file is being bundled with jQuery.\nSince fabricator uses webpack to prepare your toolkit.js and it seems to be a link to jquery dependency in the latter, the whole library gets included in your bundle.\nIf you don't want jquery in your toolkit, try importing it from somewhere else (or manually add it to your window object, eg: script tag in your home html).. ",
    "labar": "Thanks a lot my friend! I figured it was something dumb that I did. I was having trouble getting jquery to work when I first setup Fabricator so I ended up doing the require jquery. I appreciate your time!. ",
    "myles": "In the toolkit.scss file you can import CSS files node_modules like this:\nscss\n// ./node_modules/bootstrap/dist/css/bootstrap.css\n@import 'bootstrap/dist/css/bootsrap';\nThis will also work for SCSS files:\n```scss\n// ./node_modules/bourbon/app/assets/stylesheets/_bourbon.scss\n@import 'bourbon/app/assets/stylesheets/bourbon';\n// ./node_modules/bourbon-neat/app/assets/stylesheets/_neat.scss\n@import 'bourbon-neat/app/assets/stylesheets/neat';\n```. ",
    "jakefreeberg": "If others see this issue and missed it, here's the fix: https://github.com/fbrctr/fabricator/pull/297\nIt'd be great if that was merged.\n. ",
    "mavame": "Updated to webpack 3 in my previous commit, since that's the latest stable.. Another PR is in that solves this. (#309). This could be permissions related, but it isn\u2019t an issue with the library.. I agree that the pre-commit hook it probably too strict to enforce. I'd like the project to be more generally consumable, although I think adding a default .prettierrc like we've done is fine.\nIf we want to ensure linting is followed as the project evolves, I think adding CI somewhere here to prevent merges until linting passed is a good move.. Adding a CircleCI integration is a free way to get there https://github.com/marketplace/circleci. I believe that travis is already configured to run on PRs. I'm not sure who set that up but we'll want access. I think this is best handled at the CI level. I'll create a PR that removes Husky.. Ha, noticed as soon as I submitted this PR that travis-ci is already configured on the project. We should get with @LukeAskew to see how we can add an npm run eslint -- --fix task to the TravisCI command list.. since node widely supports arg destructuring you could rewrite this and others:\nmodule.exports = ({ dev }) => { ... }. ",
    "nicholaslyon-dt": "Nice. This looks good to me.. ",
    "aputinski": "@LukeAskew I can move it, but it need to be below the config block. We could move the config to the very top?\n. I removed the scripts:fabricator task in favor of just bundling it with weback.\n. This passes config to webpack.config.js, so it needs to be below the config.\n. ",
    "DianeOfTheMoon": "I don't believe that git is an actual requirement.. ",
    "aryashreep": "It will useful for Windows env, now the days its a basic requirement to install GIT.. "
}