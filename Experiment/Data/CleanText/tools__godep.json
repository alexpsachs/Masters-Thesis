{
    "kr": "Makes sense. I was planning to add this as a command called godep diff\n. Finding dependencies is important for all godep's commands. But it's easier than that. Just run go list -json.\n. I updated the description for the diff command.\n. Agreed. Current thinking is a godep restore to mirror save.\n. Thanks for this patch! I think it's essentially superseded by the newer\njson format of Godeps, but if you still think this issue is relevant please\nfeel free to reopen or send another PR.\n. Merged in 9ab667fc969c31320428ca4667729b017954e709.\n. Closing in favor of #2.\n. One piece to the solution for this:\nThe godep go get command should always have the same effect\nas godep go install. The only case where they're different is\nif some dependencies are missing from the Godeps list. So I'm\nplanning to make godep go get an error.\n. The godep go get part was done in 05aebf24b176dbbbd9bcff56ee4ce000009fa5b1.\n. The remaining part of this is to check that there are no\ndependencies missing from the Godeps list.\n. Yes, this is still desired!\nIdeally we can move toward rewriting import paths, which would make the 'godep go' command superfluous. However, even then I think we'd want a way to check that everything is correct, that:\n1. all dependencies are listed\n2. the code that exists in Godeps/_workspace matches exactly the listed commit\nThe diff command described in issue #1 would cover at least the first item above, and maybe it could do the second item as well, perhaps under a flag.\n. This looks great. I don't want to reimplement package vcs.\nWe use it for a few things:\n- detect which VCS to use\n- find the repo root\n- find the remote url\nDoing these things correctly means matching the go tool's\nbehavior, including everything described in go help remote.\n. It looks like you might be working outside of a standard\nGo workspace. What happens when you run go list in\nthat directory?\nSee http://golang.org/doc/code.html for an introduction\non setting up a workspace.\n. Good idea, I've edited the readme: 603a348b365409e4ed7d50e3d8002dc8152afd8b.\nIn general, it's probably good to be in the habit of using a standard\nGo workspace for all development. That makes it easier to work\nwith other people and utilities, as more and more things work with\nthis assumption, such as the go tool and godep.\n. Note that with godep save -copy, explicit bzr support is unnecessary.\n. I was wrong, there are a couple of VCS-specific things godep does\nin the save command:\n- get the current commit id (e.g. git rev-parse HEAD)\n- describe the current commit (e.g. git describe)\n- ensure there are no uncommitted changes (e.g. git diff HEAD)\nhttps://github.com/kr/godep/blob/master/vcs.go#L36-L38\nThese should be easy to add bzr support for.\nI'll give this a shot today.\nThe other commands in that file vcs.go are the ones that\ncan be circumvented by -copy, and, in a happy coincidence,\nthose are the ones I would have trouble doing in bzr.\n. @ardan-bkennedy please give this another try! :)\n. What happens when you run this?\n$ cd /Users/bill/example/src/labix.org/v2/mgo\n$ bzr status\nThis tool uses bzr status to decide if any changes have been\nmade to the checked-out copy of each package. If the working\ntree is dirty, the revision number will be wrong (since it won't\naccount for any changes in the working tree since the last\ncommit), so godep will refuse to use that dependency.\nYou could also try:\n$ rm -rf /Users/bill/example/src/labix.org/v2/mgo\n$ go get labix.org/v2/mgo\n$ godep save -copy\n. All software has bugs. The idea is for godep to do the\nright thing in the common case. When the user runs\n'go get', followed by 'godep save' or 'godep save -copy',\nit should just work.\nI'll open another bug for this.\n. Just opened #15.\n. Yes. Using the godep go command workflow will be unchanged.\nI'd also like to improve the case when you're initially fetching and\nbuilding a godep-using project, but that's a separate issue.\n. One nice ancillary benefit of flag -copy, the Heroku buildpack will\nbe able to skip installing all VCS systems (hg and bzr).\n. This was done in f44942b5afbe2c9d1ce5f4047dcde6b61e3b69ab.\n. Yes! I've been meaning to open an issue for this for a while.\nThanks for bringing this up!\nI think it should be called godep get, since it has to do more\nthan just invoke the go tool in a sandbox. The behavior I'm\ncurrently imagining, for the command godep get foo:\n1. It runs go get -d foo\n2. It runs cd $(go list -f {{.Dir}} foo) && godep go install foo\n. See also #6.\n. I edited the description above to say \"godep get\".\nBut if you really like the \"godep go get\" form (or something else),\nplease say so. I'm very much open to bikeshed painting. :)\n. It's not quite as simple as the two steps I described above, because\nthe arguments might specify multiple packages. So it would probably\nhave to expand the package list first, then do those two steps for\neach package (and maybe this could be optimized to avoid redundant\nwork).\n. I also want \"godep get\" to to The Right Thing even if the specified package\ndoesn't use godep at all. It should gracefully fall back to behaving equivalently\nto whatever \"go get\" does.\n. This should be fixed now.\ncc @ardan-bkennedy, does this work correctly for you now?\n. Awesome, thanks :)\n. Awesome, thanks for the report!\nShould be fixed now.\nA couple of things puzzled me about the initial report:\n- My version of go get (Go version 1.1.2) doesn't have -t flag. I removed that flag and successfully reproduced the issue.\n- It's a little unusual to specify a full import path (github.com/globocom/tsuru/provision/docker) on the godep save command line. Did you do that just for the sake of reporting this issue, or do you intend to use it that way for the real project?\n. That is a bug. Thanks for the report!\n. > If you have dependencies that are also not gettable (but in the local workspace), you get the same \"unrecognized import path\" error\nInteresting. I opened #18 to track this.\n. Note that, even currently, the dependencies don't have to be publicly available,\nas long as RepoRootForImportDynamic succeeds for the person running godep save.\n. We could also write our own version of RepoRootForImportPath that\nonly uses the local filesystem (looking for sentinel directories .git, .bzr,\netc). This would require the package to be present locally, but we already\nrequire that anyway.\n. Nice, FromDir will help a lot. I didn't notice that before.\n. The push that closed this issue was a mistake.\nI'm waiting for a reply on pull request #20 first.\n. > If I use godep to manage my dependencies, what happens if my dependencies also happen to use godep to manage their own dependencies?\nTheir Godeps list will be ignored in your project. You decide\nwhich version to use of all transitive dependencies.\n\nAnd what happens if such a third party package decides to use -copy and include its dependencies in its repo?\n\nYou'll get one copy of each transitive dependency,\nbut not the copies, if any, that intermediate packages\nhave vendored.\nThis is because godep and the go tool skip directories\nstarting with . and _. Specifically, the directory\nGodeps/_workspace will be skipped when godep is\ncopying source code into your project.\n. This looks really nice!\n. This is merged in d91fda717ffef4017f4c7376efcc997df97b24b1. Thanks!\n. Yeah I tend to agree \u2013\u00a0it's easy to turn godep run into an interactive shell, but not so nice the other way around.\n. It's possible you were unlucky enough to pull godep after d91fda717ffef4017f4c7376efcc997df97b24b1\nbut before fb07940c7669536d2f5c49b8a368fa91883b9ef6. Godep should ignore all packages given on the\ncommand line (count them as \"seen\").\nDo you mind updating and trying again?\nIf it's still broken then yes, something else is going on that needs\nto be fixed.\n. Oh, I see. The problem is that go list ./... doesn't include github.com/bitly/nsq.\nGodep tries to work with repo roots so we don't get two entries for the same repo:\n{\n            \"ImportPath\": \"github.com/lib/pq\",\n            \"Rev\": \"f5dbc67a0263fbfffeb80970e47d589783d62854\"\n        },\n        {\n            \"ImportPath\": \"github.com/lib/pq/oid\",\n            \"Rev\": \"f5dbc67a0263fbfffeb80970e47d589783d62854\"\n        }\nInstead, we want just one entry:\n{\n            \"ImportPath\": \"github.com/lib/pq\",\n            \"Rev\": \"f5dbc67a0263fbfffeb80970e47d589783d62854\"\n        },\nI think to fix this problem, we should revert d7319384365b73b6f26efa402f0aa568e1539278 but use\nVCSFromDir instead of VCSForImportPath as a better fix for #17.\n(This is the same way we fixed #18.)\nI'll do that this afternoon unless you beat me to it.\n. Done! Thanks. :)\n. @mreiferson and @fsouza, do you mind trying out this fix?\nI tested it myself on github.com/bitly/nsq and it seems to do the right thing.\nI also tested it on an internal project that exhibited the \"lib/pq and lib/pq/oid\"\nduplicate entry problem described in #22, and it does the right thing there\nas well.\n. You can vendor the code, but you need to make a commit first,\nso there's a way to identify exactly what you've vendored.\nYou can push this commit to your fork of the package if you want,\nbut that's not necessary.\n. I'd like to make a blog post or something soon describing how\nto do this and other common tasks with more fleshed-out\nexamples. The instructions in the readme are perhaps too terse.\n. One of the big benefits of godep's vendoring is that you can\nmaintain a fork without changing import paths. But this is really\na separate issue. You don't need a fork.\nAll you have to do is commit your change locally, then godep\nwill happily vendor the code.\n$ cd /path/to/package && git commit -a -m 'fix bug'\n. The save command arguments are packages, not files,\njust like most of the go tool commands. What happens\nwhen you run 'go list app/tmp/main.go'?\nTry this from the root:\n$ godep save ./...\nOr perhaps\n$ godep save ./app/tmp\n(On a slightly tangential note, putting a main package in\na directory called 'tmp' will give you a binary named 'tmp'.\nIs that what you want?)\n. I'm going to close this issue; it seems to be resolved in https://github.com/kr/godep/issues/24#issuecomment-28250406.\nIf saving dependencies for a revel project continues to be a problem,\nlet's open a separate issue for that.\nBTW, thanks so much for all this feedback. It's a huge help in making\ngodep correct and robust in many situations.\n. Awesome! Thanks again for the help. :)\n. Something similar was addressed in #23 and #22.\nDo you mind updating your copy of godep and trying again?\nSorry for the trouble.\n$ go get -u github.com/kr/godep\n. Where did you run the godep save command?\nWhich project or package was it?\n. Bear in mind that Godeps.json doesn't just list the direct dependencies\nof your project, it lists all transitive dependencies. Both packages sqs\nand aws are dependencies of your package, but as you've observed,\nwe only include one entry for each repo, and the choice is arbitrary\n(currently alphabetical). Neither one is right or wrong; they're both\ndependencies of your project.\nWould you feel more comfortable with github.com/crowdmob/goamz\nas the path listed in Godeps.json? I've been thinking about making\nthat change. (Arguably the name ImportPath is no longer correct,\nsince it can be a directory with no .go files, as in this case.)\n. And, you're welcome! :)\n. My apologies, I misunderstood the problem here.\nThe save command needs to copy both packages aws\nand sqs, and it's only copying aws. Yes, I think the simplest\nsolution is to move to using the repo root for both the json\nentry and the path to copy in.\n. If you'd like to update this pull request to use the repo root\n(but keep the json field name \"ImportPath\" for now), go for it.\nOtherwise I'll take care of it.\n. Cc @goinggo you were interested in this issue as well.\nIt should be fixed. Please reopen or open a new issue\nif you still see problems.\n. That's it. I haven't managed to define all the vcs operations for bzr.\nThe existing sandbox code is \"clever\", and uses operations that\ndon't map well across different vcs's. It would probably be good\nto redo that to use only the operations already defined in\ncode.google.com/p/go.tools/go/vcs.\n. Ah yes, thanks.\n. This looks like a duplicate of #27.\n. You can use godep restore to set up your gopath for\ndevelopment with the go tool (so you don't have to\nprefix every command with 'godep'). Then your\nworkflow can look like this:\n- Change P; run P's tests.\n- Run your tests, to make sure the change is what you really want.\n- Commit the changes to P.\n- godep save to copy over the final changes.\n. Sure, a PR would be great. As much as possible, I'd like to match\nthe style and conventions of the go tool's help text.\nFor example, it consistently uses 'download' to mean putting source\ncode into $GOPATH/src and 'install' to mean putting binaries into\n$GOPATH/{pkg,bin}. The godep restore help uses 'install' to mean\nputting source code into $GOPATH/src, so we should fix that usage.\nAnd you're absolutely right, we need to be more clear about where\ncode is going to be installed, since unlike the go tool there are two\npossible places.\nTo clear this up will probably require revising help text of several\ncommands for consistent usage:\nsave      list and copy dependency code into Godeps\n    path      print sandbox path for use in GOPATH\n    restore   download listed dependency versions to GOPATH\n\u2026or something like that.\n. I changed the issue summary to reflect this discussion.\n. We shouldn't add new commands for every random tool\nthat people come up with. If the existing godep path\ncommand isn't sufficient, then we should make either\ngodep run or godep shell and be done with it.\n. I'll go ahead and close this issue as a duplicate of #21.\n. Hey @davecheney and @mreiferson, could I ask for a\nquick review of this? Thoughts?\nBasically this gives a more tightly focused set of dependency\npackages at the cost of more entries in the manifest.\nDo you like this change? Or prefer the current way?\n. As an example, before this change, importing package\ngithub.com/crowdmob/goamz/sqs would result in one json entry:\n{\n            \"ImportPath\": \"github.com/crowdmob/goamz\",\n            \"Rev\": \"9bee4d46f8a986ae73c9c05e7359e940f9ffa80c\"\n        },\nAnd that entire repo would be copied, including all its packages:\naws, cloudwatch, dynamodb, ec2, elb, exp, iam, s3, sqs, and testutil.\nWith this patch, you get two entries:\n{\n            \"ImportPath\": \"github.com/crowdmob/goamz/aws\",\n            \"Rev\": \"9bee4d46f8a986ae73c9c05e7359e940f9ffa80c\"\n        },\n        {\n            \"ImportPath\": \"github.com/crowdmob/goamz/sqs\",\n            \"Rev\": \"9bee4d46f8a986ae73c9c05e7359e940f9ffa80c\"\n        },\nand only those two directories, aws and sqs, are copied.\n. Interesting point about the commit ids getting out of sync.\nI hadn't considered that explicitly. I think it's out of scope\nfor godep. After all, there are countless other ways things\ncould get out of sync, if people are editing them by hand.\nThe code could change, the commit id could simply be\nwrong, etc. As long as the json contents are generated by\n'godep save', I don't see how they could get out of sync.\nI'm inclined not to worry much about it.\nThe possible implication that they might correctly diverge\nis a little more troubling. Not sure what to do to combat that\nfalse impression.\nI did think about putting a list of import paths inside the\nentry for a dependency, but went with this approach because\nit's a smaller change (and requires no changes to logic that\nconsumes the list), and out of a vague desire to keep the\nstructure flatter, with fewer optional or alternative fields,\nand not overdo the DRY impulse.\nI want it to be at least within the realm of possibility to\nconsume Godeps.json with things like jq and shell\nscripts. So the flatter and more regular the better.\n. I hope we never have to make incompatible changes.\nAnd I hope the godep implementation doesn't have to\nget very much bigger or different. Ideally it will soon\nsettle into something that feels right.\nIf godep turns out to be fundamentally or drastically\nwrong, I'd probably rather start over with a separate\ntool with a different approach.\nMaybe there will arise a change we want to make that\nfits well within the godep approach but would best be\ndone as an incompatible format change (such as the\nsuggested list-of-paths approach in #35). Maybe we\ncan put this issue off until we're forced to address it.\nCan we get away with that?\n. Excellent, thanks!\n. I'm going to close this issue. Feel free to reopen it\nif there's still godep behavior that seems to be wrong.\n. Awesome, thanks!\n. Confirmed. This is a bug.\n. Yes, this is a serious bug. I'm away from my home country right now with limited internet and no real computer, so I can't properly test and verify the fix. I'll take a look at #46 and probably just merge it in the interest of expediency. Any non-fatal problems with the patch can be fixed later.\n. If restore fails to download a missing package, that's a bug.\nThis is related to #41 and should have been fixed in 6eb924d67ab5588a788376e7d8996f120998abf3.\nIf this is still a problem, please reopen.\n. Can you provide the actual error message you see?\nI don't immediately see why this wouldn't work.\nWhat happens when you run go list -json instead of godep save?\n. (My apologies for the delay. I was on out of the country\nwith limited computer access.)\n. It seems like you are trying to recreate some of the functionality of godep by hand. Why not just use godep?\n. > go list -json returns what you'd expect (failure)\nGodep assumes that you're in a standard Go workspace. That's a fundamental assumption and not likely to change. In particular, if the go tool itself doesn't work in your environment, then godep definitely won't work.\n. As you say, the go tool commands other than 'go get' don't care where you put the .git directory, and this is because they don't interact with git (or any other VCS) at all. However, godep interacts with git quite a lot, even more than go get, and I've chosen to support the most common convention, the same one that 'go get' encourages: repos that live inside subdirectories (typically domain names) of src.\nI don't see why you wouldn't be able to follow this convention too.\nTry something like this, mashing up both of your examples:\n/home/user\n    src\n        company\n            branch\n                .git\n                ops\n                ansible\n                cpp\n                go/proj1\n                go/proj2\n                Makefile\n                README\n                whatever\nIn your shell .profile, set GOPATH=/home/user.\nThen you can cd ~/src/company/branch and run godep save ./... to freeze all your dependencies for the entire organization in one repo, alongside non-go code. A typical import path for one of your go projects will be company/branch/go/proj1. Optionally, omit the 'go' directory level and make your import paths company/branch/proj1. Also optionally, instead of 'company/branch' you can use a valid domain name and path for your organization, and then the repo will be go-gettable.\n\nI'm not sure i understand your comment about it not being a standard go workspace.\n\nAll I said was that if 'go list' doesn't work, then certainly godep won't work. But I don't think you meant to focus on the example you gave where that's the case.\n. @dickeyxxx I wasn't able to reproduce the error you describe.\nHere's what I get:\nume:~ kr$ go get github.com/dickeyxxx/martini-godep\nume:~ kr$ cd src/github.com/dickeyxxx/martini-godep\nume:martini-godep kr$ godep save\nume:martini-godep kr$\n. Ok well, it's true that godep interacts with the VCS a lot, but this particular case was a little excessive. Does #107 solve this issue?\n. After more thought, I have what I think is a better approach in #108.\nI'd love to know if that solves the issue here.\n. Thanks for the minimal test case. This still isn't working because godep tries to keep track of which packages are subdirectories of other packages by the import path, but the import path of the root looks like _/home/rich/dev/godep_example/src and therefore github.com/rliebling/main looks like it's not contained in the same tree.\nI think we might be able to do this in terms of filepaths instead. I will try.\n. I'm continuing to work on this, but I should reiterate that I strongly recommend you set up a single GOPATH for your computer and put the git repos inside it. It will make your life easier.\nhttps://twitter.com/bketelsen/status/456036577010270208\n. Please note the example in http://golang.org/doc/code.html#Workspaces depicts repo roots inside subdirectories of src. That's not an accident.\n. It still seems like you should be able to accomplish all you describe, including the docker and vagrant stuff, with the example layout I proposed above. I think you can include docker stuff to help out people with the go bits of a non-go project while the repo layout fits inside a standard go workspace. Then people will have the option of using either standard go tooling or the special container tooling you describe.\nIf your developers ever have other go projects they want to work on, then the layout with a src directory inside the repo will cause them trouble\u2014they'll have to start switching their GOPATH depending on whether they're working on this particular project (or else they'll have to use the special Makefile or Dockerfile or whatever build procedure in this project instead of using the standard Go tools). But perhaps that is YAGNI.\nRegardless, it seems like you are creating extra work for yourself here. Many people use docker or vagrant for a standardized build environment for Go and other languages, but usually the developers end up cloning the project to work on from inside the container, or the container does this automatically. Once you're inside the container, you can do whatever's best for whatever language you're working with at the moment, since it's so easy to set up for new people. They can use standard C makefiles, standard go tooling, a uniform JVM version, whatever.\n. @rliebling that's totally fair. :)\nIt's possible my next change (mentioned above) will make this work for you. If not, my apologies.\n. If the working tree is dirty, godep ought to refuse to save outright.\n. Regardless of how the working tree is dirty (changed files,\nuntracked files, whatever), godep should refuse to save.\nIf it used a fresh checkout, then you'd be saving something\nthat doesn't match what you had been using to test, before\nyou ran godep.\nI'll try to fix this. Is there a git command that can report\n(ideally by exit status) whether the tree is dirty?\n. I have a possible fix in cb8be8bb6e8475bff5bc30b1d1aa68174bb152e1. Does that patch do something reasonable for you?\n. Thanks. I don't know if I'll be able to fix this before\nI go on vacation, but hopefully you can get by with\nthe workaround for a few weeks.\n. Awesome. A reproducible test case makes this so much easier! Thanks.\n. That is a relief. I'll go ahead and close this issue now. If folks come asking about it in the future we can direct them to update to Go 1.5.\n@freeformz \n. This isn't the right place to do this. If the package doesn't exist\nin the filesystem, LoadPackages should say so. Setting Root\nto an element of GOPATH yields false information.\nBug #41 is fixed in 6eb924d67ab5588a788376e7d8996f120998abf3.\n. What problem is this meant to solve?\n. I agree a version command would be useful for people.\nThe main difficulty I have with this approach is having to remember to bump the version string for pretty much every single commit. This is necessary since the main way to install godep is with 'go get', and there's little reason to distribute infrequent tarballs or anything like that.\nIf necessary I guess I could just suck it up and deal with that, but I'm trying to think of other solutions that don't have that drawback.\nAny ideas?\n. Agreed, I'd like this case to work better, but I'm not convinced this patch is the best approach. My gut feeling is there's a way to make godep do the right thing without a flag.\nFirst, I'd argue your project does follow the directory naming conventions for Go as described in http://golang.org/doc/code.html. You'll note that document doesn't require the repo root to be beneath the src directory, that's only the \"typical\" case.\n. I don't have a specific solution. I just mean that the behavior here should be useful, predictable, and in line with godep's (and Go's) established conventions. If there's no vcs root available (for example, because the vcs root is outside the gopath element as in your case), then perhaps godep can use some other directory as the \"root\". Or, for the current project, it might be able to get away without a root at all \u2013\u00a0it already uses the current directory as the location for Godeps. Maybe that alone is sufficient. Or, maybe there's another way to get the vcs root reliably. AFAIK package vcs uses GOPATH entries so it can construct an import path for the root of the repo, so maybe we could use \"/\" as the srcRoot when calling FromDir, as a fallback. That might be enough information for godep to do its job in the same way it already does.\n. The 'godep path' output isn't meant to go in your bashrc.\nIt's just a way to recreate what 'godep go' does \u2013 to let you\nmake a sandbox for running tools other than the go tool.\nRunning 'godep restore' will try to download code into\nyour GOPATH. The sandbox for the project already has\nall the code in it, so trying to restore with the sandbox in\nyour GOPATH will produce strange results.\n. Another attempt to put this: if you're only using the\nstandard go tool, you don't need 'godep path'.\n. @mreiferson is referring to the original behavior of godep; it's now what you get when you run godep save -copy=false. Instead of a directory, it puts just the json manifest in a plain file Godeps. Then running godep go whatever will fetch all the dependencies into $TMPDIR on the fly and build a gopath.\nIt's complex and slow compared to checking in all the source code but seems to work ok.\n. > is there another way to use godep non-vendored?\nYou can add src into the .gitignore file by hand.\nSeveral projects have done this, including\nhttps://github.com/antifuchs/zeus/tree/revamp-build.\n. Godep doesn't (currently) do anything special when src is ignored.\ngodep path will just print {projectroot}/Godeps/workspace. For a\nfresh clone, it's not very useful, since it'll be empty of source code.\n. I think it would be reasonable to have godep restore restore packages to _both the outer GOPATH and the local _workspace dir, so that both match what's listed in Godeps.json.\nI think that would solve the original issue here, without removing the original intent of godep restore, which is to be the opposite of godep save (taking its list from the repo and installing outside, rather than taking its list from outside and installing into the current repo).\n. > If godep save creates and uses Godeps/_workspace by default it seems like it's dual - godep restore - should do the same. I was hoping it would create the workspace if it did not exist.\nGodep save creates and uses Godeps; its dual - restore - does the opposite. The first reads your GOPATH and writes to Godeps; the second reads Godeps and writes to your GOPATH.\n\nI have a different proposal now:\nCommands 'godep go' and 'godep path' should make an effort to make sure code is available. If src is checked in, there's nothing extra to do, they can just use Godeps/_workspace as they currently do. If src is missing, they should attempt to fetch code and put it in Godeps/_workspace/src (similar to godep's original behavior, but simpler).\nWhat does everyone think of this? Would it solve the problem?\nA potential follow-on to this would be to change the -copy=false behavior to produce the directory structure being discussed here, Godeps/_workspace with 'src' in gitignore. This would let us deprecate and eventually remove a big chunk of complex code supporting creation of the old TMPDIR workspace.\n. Restore is sometimes necessary when updating dependencies or saving new dependencies. Those other commands would have to be more careful if we want them to work without access to the full dependency set in $GOPATH.\nThis would be helped with better documentation for 'godep restore'. Restore is the opposite of save: save takes packages from GOPATH and puts the corresponding list of commit IDs in Godeps; restore takes a list of commit IDs from Godeps and puts the corresponding packages in GOPATH.\n. I would instead say that the premise of this issue is increasingly invalid: \"non-vendored operation\" is something that godep doesn't support. When folks ask how to handle the Godeps directory when they don't commit the source code, the response should be \"you should commit the source code\". If they really don't want to vendor code, then godep is not the tool for them.\n. Overriding the whole thing means the current project (everything outside\nof Godeps/_workspace) is not in GOPATH. I'd expect that to be ok for an\nisolated package but not if the current package imports something else, e.g.\nhttps://github.com/antifuchs/zeus/blob/master/go/zeusmaster/zeusmaster.go#L8\nWould #6 be sufficient instead?\n. Just to spell out the example above, if zeusmaster imports\ngithub.com/burke/zeus/go/clienthandler, I'd expect the go tool\nto be unable to find clienthandler, since it's not in the godep\nsandbox, and so nowhere to be found in GOPATH.\n. I think godep get package already does what you want.\nyuzu:~ kr$ ls bin\ngodep\nyuzu:~ kr$ ls src/github.com/mitchellh\nls: src/github.com/mitchellh: No such file or directory\nyuzu:~ kr$ godep get github.com/mitchellh/gox\nyuzu:~ kr$ ls bin\ngodep   gox\nAm I misunderstanding?\n. Oh, yes I'm misunderstanding. You want to compile and install the\nversion of gox listed in zeus's manifest, not whatever's at the tip of\nmaster in gox's repo.\n. Since leaving those comments I realized I don't fully understand what you're asking for. :'(\nCould you give maybe some example directory trees, or command sessions (including fictitious commands) showing the desired workflow?\n. Good call. It should be more careful about when to delete the old Godeps.\n. Merged as 0eddae56318276eb16180e29594092d3d0f7094e. Thanks!\n. Ah, I have an idea for what this could be.\n. Uh, I left that comment on my phone on a train and then forgot to follow up. Now I don't remember what the idea was.\nMaybe something to do with git setting timestamps in the past during a checkout, but I doubt that would explain this case since I know hk has had commits since Jan 17.\nIt's hard to understand what's going wrong here. The command you ran godep go build is really just doing the equivalent of:\n$ GOPATH=/path/to/hk/Godeps/_workspace:$GOPATH go build\n. Hopefully de4fb952cb414a9a9ddbeeabf68cc851718417a7 has fixed this satisfactorily.\nPlease reopen this issue (or open a new one) if there's still a problem.\n. Godep can't simply follow symlinks, because that can result in pathological behavior. (Consider a symlink that points to its parent directory.) Godep is in a similar situation to the standard go tool with respect to symlinks. As Ian Lance Taylor put it:\n\nYes.  In general the go tool does not work well with symlinks.  There\nis no current plan to change this.  Any fix would have to describe a\ncomplete and coherent solution for how symlinks should be handled.  I\ndon't know what that would look like.\n\nGodep is in the same boat.\n. You can use 'go get' on private repos if you put a github access token in ~/.netrc.\nHere's a (fake) example:\nmachine github.com\n  login kr\n  password d41d8cd98f00b204e9800998ecf8427e\nThis works for the plain go tool and anything else that uses it, not just godep.\n. I agree it makes sense for godep to have this.\nFor your particular case, is there a reason you can't put the import in a regular source file, without any build constraints?\n. @wfreeman @oxtoacart does pull request #66 fix this problem for you?\n. I went ahead and merged my proposed fix. If you still see the problem, please reopen this issue or open a new one. :)\n. Awesome, thanks!\n. Go programmers typically do this without godep's help. Put the dependency in your filesystem under its original import path. Commit any changes you like and push them to and from any remote repositories from there.\nFeel free to reopen this if I'm misunderstanding the situation you describe, but I think it doesn't belong in godep.\n. Ok, understood. This problem has come up in my projects as well. Godep with vendoring made it easier for us to test and deploy our changes in staging and production before they were merged upstream.\nGodep is primarily a vendoring tool. I highly recommend that approach.\n. Eventually I'd like to support subversion, but it's not very high on my todo list. I'd gladly accept a well-written patch for this.\n. This should become possible after we remove -copy=false mode from the save command.\n. > It would have to work transitively as well right?\nYes.\n. Started working on this yesterday.\n. I've thought about the directory name more since this issue was opened. The benefit to changing the name is small, and purely aesthetic. It's not worth having extra logic (and the accordant extra documentation). Plus, the top level element will never be anything other than exactly 'Godeps', so the shortest it could be is 'Godeps/_something'.\n. Another approach is to make changes in the upstream project and re-vendor it to test in your own project. You might also ask other projects that already rewrite import paths, such as camlistore, to see their workflow.\n. PTAL at #82. I think it is about ready to merge.\n. Maintaining patches to a project you don't own is quite a bit of additional work, yes.\n\nI'd probably need to fork the dependency into my own \"vendor\" repo (separate from the consumer repo), maintain any changes there, and then vendor that into the product.\n\nI think you're taking on a little unnecessary extra work for yourself here.\nFor nontrivial patches I agree you should fork the upstream library on github and use that to publish your pending PRs. But don't change its import path, develop your patch in the original directory. Then the act of vendoring this library will be the same whether or not your patch has been merged yet.\n. Yes, agreed. I've been thinking of having godep also put git URLs\nin the json manifest, in case the listed commit isn't available in the\nimplicit url that the go tool derives from the import path.\n. Cool, I'm glad this got fixed, even if inadvertently. I should add a test to make sure it doesn't regress.\n. Thanks for reporting this. We definitely need to work on handling symlinks better.\nWhat does the go list ./... command you mentioned print?\n. The originally reported error message says the working directory was /Users/lachlan/Projects/xyz/xyz, but the accompanying description says it was ~/.go/src/github.com/xyz/xyz. Which is it?\nA working directory of /Users/lachlan/Projects/xyz/xyz is definitely not following the standard Go code layout described at http://golang.org/doc/code.html. This is a basic assumption of godep; it's not going to change.\n. Yes, my apologies, I misremembered the direction of the symlink.\nThe problem here is that Getwd returns the actual directory on disk, rather than a path containing a symlink. In general, it is not possible for the Go process (or any other process) to determine which path was used to arrive at that directory.\n$ mkdir a\n$ ln -s a b\n$ cd b\n$ python -c 'import os; print os.getcwd()'\n/Users/kr/tmp/a\n. > I'm not even sure how one would fix this particular problem.\nDon't use symlinks.\n. > All that said, AFAICT, the go command itself seems to have no problem with this setup.\nIf you run 'go list', it doesn't print github.com/xyz/xyz, even though that's the import path of the package. This is a problem.\n. > the \"standard Go layout\" doesn't work out so well when you're trying to, for example, include a repo of go code as a submodule in some other non-Go repo.\nI'd like to hear more about this situation, and why it's necessary in the first place. What are you trying to do?\n. > The other alternative is to simply import all the Go code into the main Perl repo, then check that out under the GOPATH and adjust our Go code import paths to match this. It's a pain, but clearly fighting Go is a pain too.\nYeah, that's what I'd recommend, if you want to keep your Go code in the same repo as the Perl. Move all the files and change the import paths. Sorry.\nI'm still curious why you want it to be in a subdirectory in the first place (either via submodules or copying files).\n. > As opposed to what?\nAs opposed to keeping it in a separate repo.\nYou mentioned that you want to share a test harness, but I'm not quite making the connection. Even if the code for the test harness is in the Perl repo, that doesn't necessarily mean you can't use it when your working directory is in another repo.\n. Ok. Well at this point it seems like there's not really anything godep can do to help. You just have to keep your go code in a standard go workspace (a symlink mimicking a standard go workspace pointing to code that actually lives elsewhere isn't the same thing) if you want godep to work.\nNote, there's a similar discussion happening in #43. It's almost always possible to use a standard go workspace, even in a repo that spans many projects over the whole organization, and uses multiple programming languages.\nI'm going to close this issue, but feel free to keep the discussion going, and let me know if you have any other concrete ideas for how godep might help.\n. (I'd use the \"wontfix\" label, but it's really more like \"can't fix\". :bow:)\n. Publishing your docs would be fantastic! Godep could use more guides written in a different voice and different communication styles.\n. @intabulas do you mind opening an issue for case sensitivity? I'm not sure what (if anything) godep can do to help there, but it would be a separate problem (despite resulting in the same error message).\n. cc @simonz05 @fdr \n. Agreed, something like this would be nice. And possibly also a more explicit baked-in pre-commit hook.\n. On a second look, this seems to be a duplicate of #1.\n. @bmizerany that ought to be an error. I'll add a test for that case and make sure it does the right thing. Thanks.\n. Thanks everyone. I'm just working on fixing @bmizerany's reported bug in da956b74d2617869f583a8a2db27dc6680e991f2  and then I'll merge this.\n. Ok, I think this is ready. If you're into code review, now would be a great time for comments. :)\n. Thanks so much! Whew. Now on to #68!\n. The usual approach with the go tool is to clone the repo from github (with the usual 'go get github.com/x/y'), make local changes there, and (optionally) push your changes to your public fork if you want them to be merged upstream. It's the same with godep.\nDon't ever change import path github.com/x/y to github.com/myfork/y unless you intend to maintain a separate project indefinitely.\n. You don't need the '-r' flag to maintain a temporary fork. Just stick with the original import path and you should be ok. Remember, an import path is just a directory ('go get' is the only go command that accesses the network). When you run 'godep save', you'll pick up the code in that directory, just as when you run 'go install'.\nYour modified source code will go into _workspace, and the hash of your commit in Godeps.json.\nFor project P using dependency X:\n1. go get X\n2. make your changes to X until it works\n3. godep update X\n4. commit and share P\nOptional:\n1. fork X on github\n2. push your X changes to your fork\n3. at some point the pull requests is accepted\n4. godep update X\n5. delete your fork\n. > However, as long as you have a fork of a package, nobody else will be able to run godep restore because nothing in your Godeps.json teaches them in what repository they will find the Rev in question, right?\nThat's right. I had been considering adding a field to Godeps.json to handle this case for some time. This issue is mentioned in https://github.com/kardianos/vendor-spec/issues/6 and #207 that I can find.\n. Thanks! This is what I get for rushing a patch out for testing before getting on an airplane. :sweat_smile:\n. I had some trouble installing scollector, but I was able to reproduce what you describe with github.com/heroku/hk.\n1. There are incorrect whitespace changes. Maybe this has something to do with how I'm using package go/printer.\n2. Rewriting import paths that aren't part of the dependency manifest was a bug. I've pushed an updated commit to the branch and now hk with rewriting compiles cleanly for me.\n3. I'll look into the build constraints. Does it miss out putting the dependency in the list, or just rewriting the path?\n4. To get packages in subdirectories, use godep save -r ./.... Godep follows the convention established by the go tool: for commands that take a list of packages, no argument means the same as just dot (.).\n. The whitespace formatting problem should be fixed now. Can you confirm @mjibson?\nI'll work on the build tags next.\n. Yes, it's pushed. Github doesn't do such a hot job of indicating revisions to a patch.\nYou can see the newest code on https://github.com/tools/godep/pull/82/files if you\nsearch for \"Config\".\n. FYI the commit id is 550fdb6a9c9a78bf17c6771a17ceadd88d39e1cb.\n. Ok, then the build tag problem is a separate bug. It would happen even if\nyou didn't use -r. I'll open an issue for that and track it separately from the\nrewriting pull request. Probably fix it after merging this.\n. Opened #84 to track build constraints.\nWith that, I think this issue is resolved and I'm almost ready to merge #82.\n. Thanks for reporting all these issues!\n. PTAL.\nI think this is about ready to merge.\n. At last this is merged! Thanks for all the feedback everyone. :heart: :smile: :heart:\n. The current approach is to duplicate the go tool's logic for scanning packages (and therefore stop calling the go tool). But that's a substantial amount of new code for godep (about 1000 lines), so I just asked about a couple of possible alternatives on golang-nuts:\nhttps://groups.google.com/d/msg/golang-nuts/4Bgl5DcPuBw/UjGonF4nOpAJ\n. Thanks for reporting this!\nFirst, I should point out that you'll need to use 'godep update' to\nupdate a dependency to a newer version. Try this:\n$ go get -u github.com/mitchellh/goamz/...\n$ godep update github.com/mitchellh/goamz/...\n(There's no need to run godep restore beforehand.) Command 'save'\npreserves versions of packages already listed in Godeps.json.\nSecond, you uncovered a bug in save when it scans the old and new\nlists of dependencies to carry over existing versions. It doesn't prioritize\nexact matches as it should, and so it's incorrectly comparing\ngoamz/aws with goamz/s3, when it should in this case compare each\npackage in the old list with its exact companion in the new list.\nThird, that error message is terribly unhelpful. It should be improved.\n. @buro9 would you mind trying again to verify that commit bbdfa05 fixes the problem you saw?\nI also opened #86 so we get a better error message there.\n. It's a basic requirement of godep (and a common assumption in go tooling in general) that the repo should be in a standard Go workspace. I don't think it's worth spending effort to try to accommodate situations where that assumption doesn't hold.\nIt's not very hard to determine where the repo ought to be placed when cloning it to a fresh system; that's part of the purpose of the ImportPath entry in Godeps.json.\nAlso, this strategy isn't portable; windows doesn't support symlinks.\n. I don't have any experience with Jenkins in particular, but I'd be surprised if it really can't be configured to work with a standard Go project. Other popular CI systems, including Travis, work with Go just fine.\n. I'm sorry, we can't be adding code to godep to accommodate every peculiar environment out there. Please use a standard Go workspace as described in http://golang.org/doc/code.html#Workspaces.\n. This patch is fine if you (or the user) is using godep restore to work with the repo. The reason for the error message is that godep go doesn't work when a dependency uses bzr. Maybe this should be a warning?\n. Your directory tree looks ok, if a little unusual.\nJust don't ever use relative imports such as ./web in Go source code.\n. Relative paths in import statements are prohibited inside a work space.\nhttps://golang.org/cmd/go/#hdr-Relative_import_paths\nGodep isn't going to make any effort to support something the standard 'go' tool doesn't.\n. Thank you so much!\n. This was fixed in #95 d7653730bd16b6a001e5b54d603bd519a86c5f11.\n. My apologies for the late response on this. Thanks so much for the fix!\n. Thanks so much for reporting this. I wasn't at a computer earlier. :)\n. This is a dup of #94 and was fixed a while ago. Sorry I missed updating this issue!\n. Thanks for the patch! I think this is a promising approach.\nYou might have to do all the unqualify calls in a separate pass before the main loop in Godeps.Load, to make the containsPathPrefix check work properly. Sorting the paths is important to make sure we don't accidentally include a dependency D's subdirectory in addition to the D itself. (Imagine importing both A/Godeps/_workspace/src/D/X and D itself \u2013\u00a0we'd end up listing both D and D/X.) The current modification to the behavior of containsPathPrefix doesn't seem to cover this case (aside from just being unexpected behavior anyway).\n. Another reason to do the unqualify calls earlier is that they can hopefully be done before even calling LoadPackages. Modifying pkg.ImportPath and pkg.Dir but assuming the same pkg.Root isn't correct \u2013 two dependencies might come from two different Roots.\n. Also, you can delete readGodepsForImportPath entirely. Yay!\n. Sure, I can help make some test cases.\n. Looks like there are three things to test here:\n1. Windows paths (can't easily unit test)\n2. Multiple GOPATH roots.\n3. Excluding subdirectories.\nI pushed a commit (f3038ffa61657b7a39328d39e7c2505557dfee86) that tests those last two.\n. Looking pretty good! A couple of small comments and then we just need a unit test covering the new behavior.\n. Beautiful. This is the best kind of patch! Deleting code :heart:\nIf you're not comfortable adding a unit test for this change, I'm happy to do it.\n. Merged as f6274c18822c8931834f558a5dde22864a089a0f. Thanks so much!\n. My understanding of appengine is that they provide two separate implementations of their packages for the SDK and the production system. Even if godep were to save appengine/..., it wouldn't work.\nIf this is right, then we need some way to exclude appengine packages.\nIt could be built in to godep as in https://github.com/matthewbelisle-wf/godep/commit/dba190f14fc83759b74df44e4ab4e7a492eedb1d, or provided by the user as a flag, for example -omit=appengine/....\n. I am leaning toward an \"ignore\" or \"omit\" flag plus a default list of patterns to ignore that is just appengine.\n. That's a good question. There isn't really a good way to specify these in godep.\nIf #84 were fixed (I'm working on it), you could do something like this:\n```\n// +build ignore\n// Dummy package so we can explicitly depend on build tools.\npackage dummy\nimport \"github.com/jteeuwen/go-bindata/go-bindata\"\n```\nAnother way to look at these examples is as commands, used by the build process, that happen to be written in Go. What if some of them were written in Python or C? (Such as the protoc command itself.) This feels like potentially a can of worms.\n. Awesome. Thanks so much!\n. This seems worth considering. The go tool and vcs package take a different approach, having a verbose mode that prints the all arguments for each command. In general, I'd prefer to approach things the same way as the standard tooling unless there's a good reason to be different.\n. Any anyway, thanks for putting in this work! It will be useful one way or another. :)\n. This PR is meant to address #43.\n. This should fix #43 as well.\n. I've thought through this case before but clearly the current approach is not working well yet. (I'm a little puzzled by importing github.com/coreos/fleet itself \u2013\u00a0that's a command. But the same problem would arise from importing other packages in that same repo.)\nThe problem here is that godep expects all dependencies to be present in GOPATH, so it can load info about them and copy the code. But transitive dependencies (such as github.com/godbus/dbus) that have been copied into an intermediate package's repo (such as github.com/coreos/fleet) might not be installed under their original import paths, as seen above. \nHonestly, the best solution to this problem is to avoid it in the first place: libraries should not use godep at all, only commands (package main) should.\nHere's one possible way godep might enforce that:\n1. Of the packages given on the command line, consider only main packages, and discard others.\n2. If this results in the empty set, it's simply an error.\n3. Copy all dependencies, even the ones that live in the same repo.\nThis has the drawback that when developing, edits to packages in the same repo won't be picked up by the commands until you rerun godep save.\nAnother alternative would be to continue godep's current approach of \"undoing\" import path rewriting when copying packages that have already used godep, and to add more logic to automatically run 'go get' or otherwise fetch packages that aren't readily available in GOPATH.\n. I'm interested in more opinions about this @bcwaldon @philips @bmizerany @bradfitz.\n. Where would you get \"whateverhash\" from, and why should it be any more trustworthy than the code you can get directly from https://github.com/tools/godep/archive/master.tar.gz? (Or from 'go get', which also uses https on github.)\n. Looks like you are using Go version 1, which came out well over two years ago. The package code.google.com/p/go.tools/go/vcs (which is used by godep) uses features of the language that were introduced after that release. If you want to compile godep, you'll have to download a newer Go version, I recommend the latest, which is 1.3.1, and can be found at http://golang.org/dl/.\nAlso, I apologize that the error message in this situation is so unhelpful.\n. Maybe wontfix/cantfix is more appropriate. There are two problems here:\n1. We don't support ancient versions of Go. I agree it's arguably a problem but it's better for people to upgrade than to keep supporting outdated releases.\n2. The error message is terrible. This is for sure a problem but there's no good way to fix it. Brad started a thread about this recently but there's still no good solution.\n. Yes, this is a bug.\n. Good call. Thanks for reporting this.\n. Anything godep does has to work on Windows. This rules out symlinks.\nAs a first step, we might add a command such as 'godep check', that tells you if there are any dependencies missing from Godeps.\n. I have hope that this can be solved without exposing additional knobs. The general approach I would take: godep should find all dependencies, ignoring // +build lines entirely. It should behave as if all build constraints are satisfied when finding imports. #84 has a little bit of discussion on this topic.\n. This approach wouldn't change what gets built, only what code is included in the repository.\n. > could then be triggered with a -tag by the builder\nIf that's the case, then the alternative is it wouldn't build at all for that builder.\nIt's still the responsibility of the person running godep save to at least glance at the diff to make sure it's reasonable, regardless of what godep does about tags.\n. I suppose not building at all can be preferable to including unsupported code for an unsupported build configuration. Hmmm.\n. Thanks for doing this work! This looks similar to #1, would you consider updating this patch to provide the interface described there?\n. Usually, people run godep save with no further arguments, or godep save ./... to save the dependencies of all packages inside the current directory.\nIf you want import statements to refer to the copied source code, use flag -r and it will rewrite them for you. You don't have to do it by hand.\nHope this helps!\n. Ah, I see those import paths were already rewritten. That's fine, you can leave them as is. But the godep usage typically stays the same: whenever you add or remove a dependency, rerun godep save -r to pull in the new code.\n. The flag -r isn't quite right yet, which is why I haven't been promoting its use much so far. It works for most cases, but there are a few corner cases that need fixing.\n. Of course!\n. This looks great, thanks!\n. Sent github/linguist#1549.\n. The patch was merged into linguist earlier today, so now we just wait for github to deploy.\n. Note, we are currently waiting on github/linguist#2017.\n. > Though it wouldn't help if paths became internal/github.com/...\nYeah, I was thinking about that recently.\nWe'll cross that bridge when we come to it.\n. The fix is live on github as of a few hours ago. :tada: \n. Good call. The documentation needs a lot of work. Thanks for reporting this.\n. Is it possible to use the commit hash (perhaps abbreviated) as the version?\n. By the way, thanks for doing this!\nI will make a tag if that's the only way, but given that we don't do any of the other things that usually accompany a version tag (for example, releasing tarballs, providing compiled binaries, having a godep version command), sticking with commit hashes for now would be preferable.\nPlease also let me know if there's anything else I can do to help.\n. Ah, good idea! I think I'll tag the first commit (36059b6) as 0. Would that satisfy your needs?\n. Done https://github.com/tools/godep/tree/0\nThanks again!\n. I think it's a fine concept. The output seems a little haphazard. It would be nice if it were more predictable, but maybe that's not feasible.\n. Thanks for all this discussion folks. It's super helpful! :sparkling_heart: \n. Did you mean #243? Looks like #153 is still open (but should be closed?).\n. Thanks for writing this patch!\n. Sorry, this isn't going to change.\n. Sorry, the go toolchain does not allow package names ending in .go.\nhttps://code.google.com/p/go/issues/detail?id=8782\n. No problem, glad it worked out! :)\n. Yes, you're absolutely right on all counts. We're explicitly trying to avoid having two different revisions from the same repo.\nReally need a better error message for this.\n. Ideally it should say why there is an error and what to do about it, like:\n```\ngodep: cannot update repo/A without repo/B\nRun 'godep update repo/...' to update all packages from repo.\n```\n. Yeah, we should fix this. Thanks!\n. Thanks for doing this!\nWould it be better to refuse to vendor the package if there are untracked files? That's what we do when any tracked files are modified, and this is arguably the same thing: the repo is \"dirty\".\n. What's wrong with copying ignored files? (We also copy .gitignore, so they should still be ignored even after the copy.)\n. True. Ok let me give this a more thorough review.\n. I've covered this in a couple of talks (here's one https://www.youtube.com/watch?v=myCHCXFFTPY), but I haven't written it down yet.\nBasic flow:\n1. Go into src/github.com/foo/bar and commit your change.\n2. Publish your change to your fork, and send a pull request.\n3. Go back to src/github.com/marcesher/myproject and rerun godep save.\nThis will vendor your modified code along with the commit id. When the project merges your change, you won't have to do anything, your commit is now included in the project's history.\n. Can you provide a test case? I haven't been able to reproduce the behavior you describe.\n. The ideal would be to automatically detect whether to rewrite import statements. It is always possible to do this: if flag -r was previously used there must be at least one import statement already rewritten, in a source file of one of the packages listed in Godeps.json under Packages.\n. I'd love to review a patch, @deoxxa. Thanks! I am also happy to discuss the approach further, if you prefer, before you write code.\n. This looks great. Do you mind rebasing this? Otherwise I can do it.\n. Thanks so much!\n. PTAL @bgentry @dsymonds @mjibson @ryandotsmith @bmizerany \n. I am starting to wonder if the regexp is more trouble than it is worth. If it gets any more unwieldy, I will be tempted to try something else altogether.\nAnyway,\nPTAL\n. Sorry, the list needs to go in a well-known place so that other tools can find it later. Making it configurable would defeat the purpose.\n. I agree with @freeformz on this.\n. Thanks for the fix! :grinning: \n. Done. Thanks for the report!\n. Update matches its arguments as a pattern against the list of dependencies. By construction, none of the dependency packages are inside ., so the pattern ./... matches none of them. If you want to match all dependencies, the easiest way is to use ....\n. This is reasonable for a start. Another possibility would be to copy code from the go tool to download all packages in process. This would give much more control over this process, and let us fix one or two other issues as well. However, that would be a lot more work.\nFor checking the error output of go get, there are a couple of things to consider:\n1. If the godep restore is eventually successful, it should produce be no output.\n2. If it is not successful, each error should be printed exactly once.\n. This is no longer a problem with Go 1.5 and GO15VENDOREXPERIMENT=1 in your environment.\n. > What is the issue with giving users more control over how Godep behaves?\nA proliferation of knobs and switches creates drag on both the interface and implementation. That makes it harder to design and implement truly important changes as they arise. Each new feature must \"pay its way\" by providing more benefit than the cost of maintaining it for the rest of eternity. This is doubly true for features that expose configuration options. (The ideal new feature \"just works\" without any change in the user's behavior. Adding more configuration is an admission of failure.)\n\nIn this case I've proposed an option to increase the utility of Godep.\n\nThis change would give a local increase in utility\u2014confined to a few unusual cases\u2014at the cost of a small but global decrease in the utility of Godep\u2014for the numerous \"background\" use cases. It is not clear to me that the few occurrences of increased utility add up to more than the global cost.\nIt seems to me like a net decrease in utility.\nHowever, these days @freeformz probably has a better idea than I do about how godep is being used. We should defer to his estimate.\n. We could also solve this by using godep on itself. ;)\n. The parser can accept a []byte or string as the third argument. It would be nice not to create a temporary file in the filesystem, but instead keep the intermediate file in memory.\n. LGTM\n. Thanks so much!\n. Sounds like DWIM. If I type godep save, it's not the same thing as godep save ./....\nStoring the -r might be ok, but then how would a project switch to not rewriting import paths?\nIf we did something like this, then the rules for godep's behavior would be more complicated. It would be a guessing game what exactly it'll do when you run godep save, and it's not really clear how to get the \"real\" godep save behavior when that's what you want.\n. You can import another package's main package:\ndepmain/main.go\n``` go\npackage main\nimport \"fmt\"\nvar X int\nfunc main() {\n    fmt.Println(\"hello from dependency\")\n}\n```\nexample/main.go\n``` go\npackage main\nimport (\n    \"fmt\"\n_ \"depmain\"\n\n)\nfunc main() {\n    fmt.Println(\"hello from example\")\n}\n```\n$ go run main.go \nhello from example\n$ go install\n$ example\nhello from example\nThis only works if you haven't installed the other package as a binary in your $GOPATH/bin.\n. The save and update commands check for this case and prevent it from happening. Godeps.json should never contain two different commit hashes from the same repo. If it happens anyway, that's a bug.\n. @thockin is right tho, even though godep tries to avoid this situation, it's reasonable to also check for it later, because who knows what happened to the file in between.\n. The approach I've tried to take so far is to let package main decide which revision of each dependency to use. Normally, a dependency package that itself has further dependencies should not even use godep. A repo like etcd is a little more confusing because it also has some commands, so they vendor all their deps. But when using packages from etcd in another project, we should try to treat the etcd packages as if they hadn't vendored anything.\nGodep could try to use etcd's recorded revision of those leaf dependencies, but that strategy doesn't always work: it's possible to have two repos that have each vendored a different revision of a leaf package. Our approach so far is to use a simple rule consistently: always let the user choose. The way the user expresses this choice is by installing their chosen revision of each dependency (leaf or otherwise) into their $GOPATH.\nHowever, there's certainly still room for making this more convenient. If a project has a lot of dependency repos like etcd, it's tedious to run godep restore for each one. Godep could potentially make this process more automatic. But note that that if the same leaf dependency has been vendored in multiple repos, the user will be left with an arbitrary revision of it in GOPATH\u2014whichever one was restored last. Maybe that's fine, but I'm a little worried that folks might not be aware of that. It could go unnoticed for a long time, and might be an unwelcome surprise.\n. It is a basic assumption of godep that you are vendoring packages, not commands.\nI agree that it would be useful to vendor commands along with their dependencies, but as you have indicated, that's a different thing, and godep doesn't really do that (yet). It might sort of work, but if so, that is a consequence of godep not being careful enough about what it does, not a deliberate feature.\n. The very rough plan is to change godep to use the new /vendor/ directory layout, possibly guarded by a command line flag. Then if the go tool -vendor flag is successful, godep will use that layout by default and remove import path rewriting (the -r flag) entirely.\n. I'm going to help update godep to support the new format, but I won't have the time it would take to devote to a whole new tool.\n. However, that certainly shouldn't stop anyone else if they want to try that route. Godep is open source, so if its code would help they are welcome to use it!\n. I think this is actually #160.\n. +1 LGTM\n. Rad, looking at this now.\n. BTW, maybe I should write this up in a contributing.md file, but this project has a \"rebase & squash\" policy. It's fine for a pull request to have multiple commits, but to land it should be rebased on top of master and squashed into a single commit.\n. LGTM after the minor things above.\n. This sounds reasonable to me. Some people complain about the amount of data it takes to vendor code, and vendoring the whole history will exacerbate those complaints, but personally I think it would be ok.\n. LGTM\n. PTAL\n. Uhh, it would have been nice to be able to address your feedback before we merged this. If we don't want travis complaining while this PR is still open the fix is to turn on this option:\n\nI just turned it on.\n. Sorry, I guess I had 2 days' worth of chance to address the feedback. :sweat_smile:\nMy bad.\n. LGTM\n. Very exciting! I've also started playing around with this. Maybe there is something here that can help godep https://github.com/kr/vexp.\nI suspect the hardest part will be making godep work with both formats, projects saved with older versions of godep as well as the new vendor directory. And possibly also some sort of automatic or explicit migration.\n. Yeah as far as I know those are still unsolved questions.\nI think it's pretty safe to say that the result of vendoring should be a \"flat\" set of dependencies. That is, no \"vendor\" directory as a descendant another \"vendor\" directory. Seems to me like the hardest question is how to choose which version of each dependency.\n. Rebased.\n. I agree. What else do you think it would need?\n. LGTM\n. What do you think about putting Godeps.json inside vendor? It would mean more work for other tools that read that file (e.g. the Heroku buildpack) but it would produce less clutter in a project's root directory.\nEither way, LGTM\n. Looks like this was closed in fe7138c011ae7875d4af21efe8b237f4987d8c4a.\n. It should be copying all files, not just .go source files. See copySrc in save.go.\n. Aha, it seems the license file is in a parent directory of all the go packages. Since godep copies only packages, it misses the parent directory. Yes, this would be difficult to fix.\nAlthough godep mainly operates on packages, it already has some special cases for the root of a repository. It is not too hard to imagine another special case that copies all regular files from the repo root of any dependency. (We still want to avoid simply copying the entire repo, because it might contain some very large packages that are unused and could otherwise be omitted.)\n. Yeah, that would be reasonable as well.\n. LGTM\n. (I am assuming your GOROOT is /usr/lib/go; you can check this by running go env.)\nGodep tries to update packages on disk wherever they are found; if they are not found, it downloads them to the first entry in GOPATH, just like 'go get'.\nI would guess that /usr/lib/go/src/golang.org/x/net/html was created somehow outside of godep, and now that it exists, godep finds the package there and tries to update it. Or perhaps the first item in your GOPATH is /usr/lib/go\u2014if so, you should remove it. The value of GOROOT should not be in GOPATH.\n. Commands 'godep restore' and 'godep get' follow the same rules as the go tool for locating and downloading packages. That will remain the case. (In fact, godep doesn't download any packages itself, it just runs the go tool to do that work. Any behavior change there would have to happen in the go tool.)\nYou should remove the value of GOROOT from your GOPATH, if it's there. I also recommend you delete golang.org/x/net/html from your GOROOT, along with any other packages in GOROOT that aren't part of the standard library. That should get you back up and running, so that both 'godep restore' and 'go get' work properly for all packages.\n. Can you provide a complete program that exhibits the behavior you're describing? Please also include steps to reproduce the problem and describe the behavior you expected to see.\n. Godep uses the json file to, among other things, keep track of which dependencies it has vendored. If a package is listed in Godeps.json, godep will not bother to copy its source code into Godeps/_workspace/src.\n. The flag -r means to rewrite import paths.\nYou should use godep save -r ./... as your command.\n. You're welcome! :balloon: \n. Hah. :)\n. This sounds like a bug. If an updated dependency needs to pull in a new package, I think godep should do so.\nFor now, you can try to work around this by running godep save -r after running godep update.\n. It is safe to run godep save -r (or godep save) even if you have newer versions of some packages. Only update will update a package. You don't have to run godep restore.\n. LGTM\n. LGTM\n. Sure, LGTM\n. LGTM\n. If you have GO15VENDOREXPERIMENT=1 in your environment, you don't need to use godep path at all.\n. > having godep path return the right thing means it's easier\n\nto write portable shellscript wrappers in the interim\n\nIt sounds like you're asking for a new feature. The command godep path returns a workspace\u2014a directory suitable for including in the GOPATH list. The vendor directory is not a workspace and it can't usefully be included in your GOPATH. When you're using GO15VENDOREXPERIMENT=1, there is no \"right thing\" for godep path to print.\nHowever, in that case, it's trivial to construct the correct path yourself, so I don't see how a godep feature would make writing portable shell script wrappers any easier.\n. But I do agree there's a bug in godep here: if GO15VENDOREXPERIMENT=1 is in the environment, then godep path should print a helpful error message and exit with a nonzero status code.\n. This feature sounds reasonable in principle, just for the sake of convenience. (I would be careful about doing things for the sake of security without thinking more deeply about it from top to bottom. I suspect that godep isn't in a position to provide any meaningful security guarantees without some serious redesign. A feature that is nominally \"for security\" but where the threat model is half-baked or nonexistent will be misleading, and probably worse than just making no promises in the first place.)\nI don't have much opinion about the mechanism to achieve it. If this works reliably, cool.\n. :+1: this is a big improvement.\nOne could nit-pick the wording or formatting, but this is already much better than what it currently does.\n. It would be better to fix this by calling path.Clean on the command line arg before supplying it to matchPattern. The function matchPattern is a lower-level routine that expects to get a true import path.\nIn the go tool, this is the difference between\nhttps://github.com/golang/go/blob/6083bd65f7/src/cmd/go/main.go#L347-L355\nand matchPattern:\nhttps://github.com/golang/go/blob/6083bd65f7/src/cmd/go/main.go#L476\n. Using path.Clean would fix not just trailing slashes, but all unclean paths, such as github.com/golang/protobuf///.//proto.\n. LGTM\nThat was fast! :)\n. :+1:\n. Is there a way to do this without a flag? Optional behavior makes for poor UX and harder-to-maintain software.\n. I can sympathize with the instinctual desire to maintain backwards compatibility. It's worth asking whether that's necessary. I don't know the answer, but if it's acceptable to change the meaning of godep save, then I think that would be preferable.\nI'm only aware of one thing that consumes this field, and it's buildpacks (both heroku and cloudfoundry) that need to install the go compiler. If that's the extent of it, then I think it would be fine to simply make the change unilaterally. There might be additional ways this field is used, but I sort of doubt it.\n@freeformz do you have any insight here?\n. Yeah, that was the original intention. But if some other behavior would be more useful, it's not set in stone. :)\n. Try godep update ... (three literal dots).\n. This should absolutely be documented better. There could be an example in the help output for godep help update.\n. This sounds like a bug.\n. I'm sorry for this. It's a good idea to avoid using symlinks for elements of GOPATH, or inside your workspace.\nThe go tool includes code to explicitly prohibit some cases, though it seems there are still others that it doesn't catch. We (godep) should consider taking a similar approach, to find cases that are unlikely to work correctly and produce a helpful error message instead of silently doing something useless.\n. I think this is the right approach in the long run. It had to happen eventually.\n. LGTM\n. Now that @freeformz is making binary releases of godep, it seems like there's less reason to spend effort making godep compile with older Go versions.\n. That looks like a good fix. There are two slight refinements you might want to make:\n1. You don't need $GOPATH in there; it's unlikely any executables will be put there.\n2. You don't need to set GOBIN, you can just put the bin directory directly in path as $GOPATH/bin.\nSo, putting those together it would be:\nshell\nexport PATH=$GOPATH/bin:$PATH\n. > I did a 'go get -u' yesterday\nOk, but what version do you have? It would be helpful if you can run godep version and paste the output here so we know exactly what you have.\n. It's not, in general, possible to save only some of your dependencies. You have to save all or none. \n. > Both godep and go installed from Homebrew.\n(Offtopic) pro tip: don't install Go from homebrew (or any package manager). Download a tarball from https://golang.org/dl/ and unzip it into /usr/local/go.\n. Makes sense. I was planning to add this as a command called godep diff\n. Finding dependencies is important for all godep's commands. But it's easier than that. Just run go list -json.\n. I updated the description for the diff command.\n. Agreed. Current thinking is a godep restore to mirror save.\n. Thanks for this patch! I think it's essentially superseded by the newer\njson format of Godeps, but if you still think this issue is relevant please\nfeel free to reopen or send another PR.\n. Merged in 9ab667fc969c31320428ca4667729b017954e709.\n. Closing in favor of #2.\n. One piece to the solution for this:\nThe godep go get command should always have the same effect\nas godep go install. The only case where they're different is\nif some dependencies are missing from the Godeps list. So I'm\nplanning to make godep go get an error.\n. The godep go get part was done in 05aebf24b176dbbbd9bcff56ee4ce000009fa5b1.\n. The remaining part of this is to check that there are no\ndependencies missing from the Godeps list.\n. Yes, this is still desired!\nIdeally we can move toward rewriting import paths, which would make the 'godep go' command superfluous. However, even then I think we'd want a way to check that everything is correct, that:\n1. all dependencies are listed\n2. the code that exists in Godeps/_workspace matches exactly the listed commit\nThe diff command described in issue #1 would cover at least the first item above, and maybe it could do the second item as well, perhaps under a flag.\n. This looks great. I don't want to reimplement package vcs.\nWe use it for a few things:\n- detect which VCS to use\n- find the repo root\n- find the remote url\nDoing these things correctly means matching the go tool's\nbehavior, including everything described in go help remote.\n. It looks like you might be working outside of a standard\nGo workspace. What happens when you run go list in\nthat directory?\nSee http://golang.org/doc/code.html for an introduction\non setting up a workspace.\n. Good idea, I've edited the readme: 603a348b365409e4ed7d50e3d8002dc8152afd8b.\nIn general, it's probably good to be in the habit of using a standard\nGo workspace for all development. That makes it easier to work\nwith other people and utilities, as more and more things work with\nthis assumption, such as the go tool and godep.\n. Note that with godep save -copy, explicit bzr support is unnecessary.\n. I was wrong, there are a couple of VCS-specific things godep does\nin the save command:\n- get the current commit id (e.g. git rev-parse HEAD)\n- describe the current commit (e.g. git describe)\n- ensure there are no uncommitted changes (e.g. git diff HEAD)\nhttps://github.com/kr/godep/blob/master/vcs.go#L36-L38\nThese should be easy to add bzr support for.\nI'll give this a shot today.\nThe other commands in that file vcs.go are the ones that\ncan be circumvented by -copy, and, in a happy coincidence,\nthose are the ones I would have trouble doing in bzr.\n. @ardan-bkennedy please give this another try! :)\n. What happens when you run this?\n$ cd /Users/bill/example/src/labix.org/v2/mgo\n$ bzr status\nThis tool uses bzr status to decide if any changes have been\nmade to the checked-out copy of each package. If the working\ntree is dirty, the revision number will be wrong (since it won't\naccount for any changes in the working tree since the last\ncommit), so godep will refuse to use that dependency.\nYou could also try:\n$ rm -rf /Users/bill/example/src/labix.org/v2/mgo\n$ go get labix.org/v2/mgo\n$ godep save -copy\n. All software has bugs. The idea is for godep to do the\nright thing in the common case. When the user runs\n'go get', followed by 'godep save' or 'godep save -copy',\nit should just work.\nI'll open another bug for this.\n. Just opened #15.\n. Yes. Using the godep go command workflow will be unchanged.\nI'd also like to improve the case when you're initially fetching and\nbuilding a godep-using project, but that's a separate issue.\n. One nice ancillary benefit of flag -copy, the Heroku buildpack will\nbe able to skip installing all VCS systems (hg and bzr).\n. This was done in f44942b5afbe2c9d1ce5f4047dcde6b61e3b69ab.\n. Yes! I've been meaning to open an issue for this for a while.\nThanks for bringing this up!\nI think it should be called godep get, since it has to do more\nthan just invoke the go tool in a sandbox. The behavior I'm\ncurrently imagining, for the command godep get foo:\n1. It runs go get -d foo\n2. It runs cd $(go list -f {{.Dir}} foo) && godep go install foo\n. See also #6.\n. I edited the description above to say \"godep get\".\nBut if you really like the \"godep go get\" form (or something else),\nplease say so. I'm very much open to bikeshed painting. :)\n. It's not quite as simple as the two steps I described above, because\nthe arguments might specify multiple packages. So it would probably\nhave to expand the package list first, then do those two steps for\neach package (and maybe this could be optimized to avoid redundant\nwork).\n. I also want \"godep get\" to to The Right Thing even if the specified package\ndoesn't use godep at all. It should gracefully fall back to behaving equivalently\nto whatever \"go get\" does.\n. This should be fixed now.\ncc @ardan-bkennedy, does this work correctly for you now?\n. Awesome, thanks :)\n. Awesome, thanks for the report!\nShould be fixed now.\nA couple of things puzzled me about the initial report:\n- My version of go get (Go version 1.1.2) doesn't have -t flag. I removed that flag and successfully reproduced the issue.\n- It's a little unusual to specify a full import path (github.com/globocom/tsuru/provision/docker) on the godep save command line. Did you do that just for the sake of reporting this issue, or do you intend to use it that way for the real project?\n. That is a bug. Thanks for the report!\n. > If you have dependencies that are also not gettable (but in the local workspace), you get the same \"unrecognized import path\" error\nInteresting. I opened #18 to track this.\n. Note that, even currently, the dependencies don't have to be publicly available,\nas long as RepoRootForImportDynamic succeeds for the person running godep save.\n. We could also write our own version of RepoRootForImportPath that\nonly uses the local filesystem (looking for sentinel directories .git, .bzr,\netc). This would require the package to be present locally, but we already\nrequire that anyway.\n. Nice, FromDir will help a lot. I didn't notice that before.\n. The push that closed this issue was a mistake.\nI'm waiting for a reply on pull request #20 first.\n. > If I use godep to manage my dependencies, what happens if my dependencies also happen to use godep to manage their own dependencies?\nTheir Godeps list will be ignored in your project. You decide\nwhich version to use of all transitive dependencies.\n\nAnd what happens if such a third party package decides to use -copy and include its dependencies in its repo?\n\nYou'll get one copy of each transitive dependency,\nbut not the copies, if any, that intermediate packages\nhave vendored.\nThis is because godep and the go tool skip directories\nstarting with . and _. Specifically, the directory\nGodeps/_workspace will be skipped when godep is\ncopying source code into your project.\n. This looks really nice!\n. This is merged in d91fda717ffef4017f4c7376efcc997df97b24b1. Thanks!\n. Yeah I tend to agree \u2013\u00a0it's easy to turn godep run into an interactive shell, but not so nice the other way around.\n. It's possible you were unlucky enough to pull godep after d91fda717ffef4017f4c7376efcc997df97b24b1\nbut before fb07940c7669536d2f5c49b8a368fa91883b9ef6. Godep should ignore all packages given on the\ncommand line (count them as \"seen\").\nDo you mind updating and trying again?\nIf it's still broken then yes, something else is going on that needs\nto be fixed.\n. Oh, I see. The problem is that go list ./... doesn't include github.com/bitly/nsq.\nGodep tries to work with repo roots so we don't get two entries for the same repo:\n{\n            \"ImportPath\": \"github.com/lib/pq\",\n            \"Rev\": \"f5dbc67a0263fbfffeb80970e47d589783d62854\"\n        },\n        {\n            \"ImportPath\": \"github.com/lib/pq/oid\",\n            \"Rev\": \"f5dbc67a0263fbfffeb80970e47d589783d62854\"\n        }\nInstead, we want just one entry:\n{\n            \"ImportPath\": \"github.com/lib/pq\",\n            \"Rev\": \"f5dbc67a0263fbfffeb80970e47d589783d62854\"\n        },\nI think to fix this problem, we should revert d7319384365b73b6f26efa402f0aa568e1539278 but use\nVCSFromDir instead of VCSForImportPath as a better fix for #17.\n(This is the same way we fixed #18.)\nI'll do that this afternoon unless you beat me to it.\n. Done! Thanks. :)\n. @mreiferson and @fsouza, do you mind trying out this fix?\nI tested it myself on github.com/bitly/nsq and it seems to do the right thing.\nI also tested it on an internal project that exhibited the \"lib/pq and lib/pq/oid\"\nduplicate entry problem described in #22, and it does the right thing there\nas well.\n. You can vendor the code, but you need to make a commit first,\nso there's a way to identify exactly what you've vendored.\nYou can push this commit to your fork of the package if you want,\nbut that's not necessary.\n. I'd like to make a blog post or something soon describing how\nto do this and other common tasks with more fleshed-out\nexamples. The instructions in the readme are perhaps too terse.\n. One of the big benefits of godep's vendoring is that you can\nmaintain a fork without changing import paths. But this is really\na separate issue. You don't need a fork.\nAll you have to do is commit your change locally, then godep\nwill happily vendor the code.\n$ cd /path/to/package && git commit -a -m 'fix bug'\n. The save command arguments are packages, not files,\njust like most of the go tool commands. What happens\nwhen you run 'go list app/tmp/main.go'?\nTry this from the root:\n$ godep save ./...\nOr perhaps\n$ godep save ./app/tmp\n(On a slightly tangential note, putting a main package in\na directory called 'tmp' will give you a binary named 'tmp'.\nIs that what you want?)\n. I'm going to close this issue; it seems to be resolved in https://github.com/kr/godep/issues/24#issuecomment-28250406.\nIf saving dependencies for a revel project continues to be a problem,\nlet's open a separate issue for that.\nBTW, thanks so much for all this feedback. It's a huge help in making\ngodep correct and robust in many situations.\n. Awesome! Thanks again for the help. :)\n. Something similar was addressed in #23 and #22.\nDo you mind updating your copy of godep and trying again?\nSorry for the trouble.\n$ go get -u github.com/kr/godep\n. Where did you run the godep save command?\nWhich project or package was it?\n. Bear in mind that Godeps.json doesn't just list the direct dependencies\nof your project, it lists all transitive dependencies. Both packages sqs\nand aws are dependencies of your package, but as you've observed,\nwe only include one entry for each repo, and the choice is arbitrary\n(currently alphabetical). Neither one is right or wrong; they're both\ndependencies of your project.\nWould you feel more comfortable with github.com/crowdmob/goamz\nas the path listed in Godeps.json? I've been thinking about making\nthat change. (Arguably the name ImportPath is no longer correct,\nsince it can be a directory with no .go files, as in this case.)\n. And, you're welcome! :)\n. My apologies, I misunderstood the problem here.\nThe save command needs to copy both packages aws\nand sqs, and it's only copying aws. Yes, I think the simplest\nsolution is to move to using the repo root for both the json\nentry and the path to copy in.\n. If you'd like to update this pull request to use the repo root\n(but keep the json field name \"ImportPath\" for now), go for it.\nOtherwise I'll take care of it.\n. Cc @goinggo you were interested in this issue as well.\nIt should be fixed. Please reopen or open a new issue\nif you still see problems.\n. That's it. I haven't managed to define all the vcs operations for bzr.\nThe existing sandbox code is \"clever\", and uses operations that\ndon't map well across different vcs's. It would probably be good\nto redo that to use only the operations already defined in\ncode.google.com/p/go.tools/go/vcs.\n. Ah yes, thanks.\n. This looks like a duplicate of #27.\n. You can use godep restore to set up your gopath for\ndevelopment with the go tool (so you don't have to\nprefix every command with 'godep'). Then your\nworkflow can look like this:\n- Change P; run P's tests.\n- Run your tests, to make sure the change is what you really want.\n- Commit the changes to P.\n- godep save to copy over the final changes.\n. Sure, a PR would be great. As much as possible, I'd like to match\nthe style and conventions of the go tool's help text.\nFor example, it consistently uses 'download' to mean putting source\ncode into $GOPATH/src and 'install' to mean putting binaries into\n$GOPATH/{pkg,bin}. The godep restore help uses 'install' to mean\nputting source code into $GOPATH/src, so we should fix that usage.\nAnd you're absolutely right, we need to be more clear about where\ncode is going to be installed, since unlike the go tool there are two\npossible places.\nTo clear this up will probably require revising help text of several\ncommands for consistent usage:\nsave      list and copy dependency code into Godeps\n    path      print sandbox path for use in GOPATH\n    restore   download listed dependency versions to GOPATH\n\u2026or something like that.\n. I changed the issue summary to reflect this discussion.\n. We shouldn't add new commands for every random tool\nthat people come up with. If the existing godep path\ncommand isn't sufficient, then we should make either\ngodep run or godep shell and be done with it.\n. I'll go ahead and close this issue as a duplicate of #21.\n. Hey @davecheney and @mreiferson, could I ask for a\nquick review of this? Thoughts?\nBasically this gives a more tightly focused set of dependency\npackages at the cost of more entries in the manifest.\nDo you like this change? Or prefer the current way?\n. As an example, before this change, importing package\ngithub.com/crowdmob/goamz/sqs would result in one json entry:\n{\n            \"ImportPath\": \"github.com/crowdmob/goamz\",\n            \"Rev\": \"9bee4d46f8a986ae73c9c05e7359e940f9ffa80c\"\n        },\nAnd that entire repo would be copied, including all its packages:\naws, cloudwatch, dynamodb, ec2, elb, exp, iam, s3, sqs, and testutil.\nWith this patch, you get two entries:\n{\n            \"ImportPath\": \"github.com/crowdmob/goamz/aws\",\n            \"Rev\": \"9bee4d46f8a986ae73c9c05e7359e940f9ffa80c\"\n        },\n        {\n            \"ImportPath\": \"github.com/crowdmob/goamz/sqs\",\n            \"Rev\": \"9bee4d46f8a986ae73c9c05e7359e940f9ffa80c\"\n        },\nand only those two directories, aws and sqs, are copied.\n. Interesting point about the commit ids getting out of sync.\nI hadn't considered that explicitly. I think it's out of scope\nfor godep. After all, there are countless other ways things\ncould get out of sync, if people are editing them by hand.\nThe code could change, the commit id could simply be\nwrong, etc. As long as the json contents are generated by\n'godep save', I don't see how they could get out of sync.\nI'm inclined not to worry much about it.\nThe possible implication that they might correctly diverge\nis a little more troubling. Not sure what to do to combat that\nfalse impression.\nI did think about putting a list of import paths inside the\nentry for a dependency, but went with this approach because\nit's a smaller change (and requires no changes to logic that\nconsumes the list), and out of a vague desire to keep the\nstructure flatter, with fewer optional or alternative fields,\nand not overdo the DRY impulse.\nI want it to be at least within the realm of possibility to\nconsume Godeps.json with things like jq and shell\nscripts. So the flatter and more regular the better.\n. I hope we never have to make incompatible changes.\nAnd I hope the godep implementation doesn't have to\nget very much bigger or different. Ideally it will soon\nsettle into something that feels right.\nIf godep turns out to be fundamentally or drastically\nwrong, I'd probably rather start over with a separate\ntool with a different approach.\nMaybe there will arise a change we want to make that\nfits well within the godep approach but would best be\ndone as an incompatible format change (such as the\nsuggested list-of-paths approach in #35). Maybe we\ncan put this issue off until we're forced to address it.\nCan we get away with that?\n. Excellent, thanks!\n. I'm going to close this issue. Feel free to reopen it\nif there's still godep behavior that seems to be wrong.\n. Awesome, thanks!\n. Confirmed. This is a bug.\n. Yes, this is a serious bug. I'm away from my home country right now with limited internet and no real computer, so I can't properly test and verify the fix. I'll take a look at #46 and probably just merge it in the interest of expediency. Any non-fatal problems with the patch can be fixed later.\n. If restore fails to download a missing package, that's a bug.\nThis is related to #41 and should have been fixed in 6eb924d67ab5588a788376e7d8996f120998abf3.\nIf this is still a problem, please reopen.\n. Can you provide the actual error message you see?\nI don't immediately see why this wouldn't work.\nWhat happens when you run go list -json instead of godep save?\n. (My apologies for the delay. I was on out of the country\nwith limited computer access.)\n. It seems like you are trying to recreate some of the functionality of godep by hand. Why not just use godep?\n. > go list -json returns what you'd expect (failure)\nGodep assumes that you're in a standard Go workspace. That's a fundamental assumption and not likely to change. In particular, if the go tool itself doesn't work in your environment, then godep definitely won't work.\n. As you say, the go tool commands other than 'go get' don't care where you put the .git directory, and this is because they don't interact with git (or any other VCS) at all. However, godep interacts with git quite a lot, even more than go get, and I've chosen to support the most common convention, the same one that 'go get' encourages: repos that live inside subdirectories (typically domain names) of src.\nI don't see why you wouldn't be able to follow this convention too.\nTry something like this, mashing up both of your examples:\n/home/user\n    src\n        company\n            branch\n                .git\n                ops\n                ansible\n                cpp\n                go/proj1\n                go/proj2\n                Makefile\n                README\n                whatever\nIn your shell .profile, set GOPATH=/home/user.\nThen you can cd ~/src/company/branch and run godep save ./... to freeze all your dependencies for the entire organization in one repo, alongside non-go code. A typical import path for one of your go projects will be company/branch/go/proj1. Optionally, omit the 'go' directory level and make your import paths company/branch/proj1. Also optionally, instead of 'company/branch' you can use a valid domain name and path for your organization, and then the repo will be go-gettable.\n\nI'm not sure i understand your comment about it not being a standard go workspace.\n\nAll I said was that if 'go list' doesn't work, then certainly godep won't work. But I don't think you meant to focus on the example you gave where that's the case.\n. @dickeyxxx I wasn't able to reproduce the error you describe.\nHere's what I get:\nume:~ kr$ go get github.com/dickeyxxx/martini-godep\nume:~ kr$ cd src/github.com/dickeyxxx/martini-godep\nume:martini-godep kr$ godep save\nume:martini-godep kr$\n. Ok well, it's true that godep interacts with the VCS a lot, but this particular case was a little excessive. Does #107 solve this issue?\n. After more thought, I have what I think is a better approach in #108.\nI'd love to know if that solves the issue here.\n. Thanks for the minimal test case. This still isn't working because godep tries to keep track of which packages are subdirectories of other packages by the import path, but the import path of the root looks like _/home/rich/dev/godep_example/src and therefore github.com/rliebling/main looks like it's not contained in the same tree.\nI think we might be able to do this in terms of filepaths instead. I will try.\n. I'm continuing to work on this, but I should reiterate that I strongly recommend you set up a single GOPATH for your computer and put the git repos inside it. It will make your life easier.\nhttps://twitter.com/bketelsen/status/456036577010270208\n. Please note the example in http://golang.org/doc/code.html#Workspaces depicts repo roots inside subdirectories of src. That's not an accident.\n. It still seems like you should be able to accomplish all you describe, including the docker and vagrant stuff, with the example layout I proposed above. I think you can include docker stuff to help out people with the go bits of a non-go project while the repo layout fits inside a standard go workspace. Then people will have the option of using either standard go tooling or the special container tooling you describe.\nIf your developers ever have other go projects they want to work on, then the layout with a src directory inside the repo will cause them trouble\u2014they'll have to start switching their GOPATH depending on whether they're working on this particular project (or else they'll have to use the special Makefile or Dockerfile or whatever build procedure in this project instead of using the standard Go tools). But perhaps that is YAGNI.\nRegardless, it seems like you are creating extra work for yourself here. Many people use docker or vagrant for a standardized build environment for Go and other languages, but usually the developers end up cloning the project to work on from inside the container, or the container does this automatically. Once you're inside the container, you can do whatever's best for whatever language you're working with at the moment, since it's so easy to set up for new people. They can use standard C makefiles, standard go tooling, a uniform JVM version, whatever.\n. @rliebling that's totally fair. :)\nIt's possible my next change (mentioned above) will make this work for you. If not, my apologies.\n. If the working tree is dirty, godep ought to refuse to save outright.\n. Regardless of how the working tree is dirty (changed files,\nuntracked files, whatever), godep should refuse to save.\nIf it used a fresh checkout, then you'd be saving something\nthat doesn't match what you had been using to test, before\nyou ran godep.\nI'll try to fix this. Is there a git command that can report\n(ideally by exit status) whether the tree is dirty?\n. I have a possible fix in cb8be8bb6e8475bff5bc30b1d1aa68174bb152e1. Does that patch do something reasonable for you?\n. Thanks. I don't know if I'll be able to fix this before\nI go on vacation, but hopefully you can get by with\nthe workaround for a few weeks.\n. Awesome. A reproducible test case makes this so much easier! Thanks.\n. That is a relief. I'll go ahead and close this issue now. If folks come asking about it in the future we can direct them to update to Go 1.5.\n@freeformz \n. This isn't the right place to do this. If the package doesn't exist\nin the filesystem, LoadPackages should say so. Setting Root\nto an element of GOPATH yields false information.\nBug #41 is fixed in 6eb924d67ab5588a788376e7d8996f120998abf3.\n. What problem is this meant to solve?\n. I agree a version command would be useful for people.\nThe main difficulty I have with this approach is having to remember to bump the version string for pretty much every single commit. This is necessary since the main way to install godep is with 'go get', and there's little reason to distribute infrequent tarballs or anything like that.\nIf necessary I guess I could just suck it up and deal with that, but I'm trying to think of other solutions that don't have that drawback.\nAny ideas?\n. Agreed, I'd like this case to work better, but I'm not convinced this patch is the best approach. My gut feeling is there's a way to make godep do the right thing without a flag.\nFirst, I'd argue your project does follow the directory naming conventions for Go as described in http://golang.org/doc/code.html. You'll note that document doesn't require the repo root to be beneath the src directory, that's only the \"typical\" case.\n. I don't have a specific solution. I just mean that the behavior here should be useful, predictable, and in line with godep's (and Go's) established conventions. If there's no vcs root available (for example, because the vcs root is outside the gopath element as in your case), then perhaps godep can use some other directory as the \"root\". Or, for the current project, it might be able to get away without a root at all \u2013\u00a0it already uses the current directory as the location for Godeps. Maybe that alone is sufficient. Or, maybe there's another way to get the vcs root reliably. AFAIK package vcs uses GOPATH entries so it can construct an import path for the root of the repo, so maybe we could use \"/\" as the srcRoot when calling FromDir, as a fallback. That might be enough information for godep to do its job in the same way it already does.\n. The 'godep path' output isn't meant to go in your bashrc.\nIt's just a way to recreate what 'godep go' does \u2013 to let you\nmake a sandbox for running tools other than the go tool.\nRunning 'godep restore' will try to download code into\nyour GOPATH. The sandbox for the project already has\nall the code in it, so trying to restore with the sandbox in\nyour GOPATH will produce strange results.\n. Another attempt to put this: if you're only using the\nstandard go tool, you don't need 'godep path'.\n. @mreiferson is referring to the original behavior of godep; it's now what you get when you run godep save -copy=false. Instead of a directory, it puts just the json manifest in a plain file Godeps. Then running godep go whatever will fetch all the dependencies into $TMPDIR on the fly and build a gopath.\nIt's complex and slow compared to checking in all the source code but seems to work ok.\n. > is there another way to use godep non-vendored?\nYou can add src into the .gitignore file by hand.\nSeveral projects have done this, including\nhttps://github.com/antifuchs/zeus/tree/revamp-build.\n. Godep doesn't (currently) do anything special when src is ignored.\ngodep path will just print {projectroot}/Godeps/workspace. For a\nfresh clone, it's not very useful, since it'll be empty of source code.\n. I think it would be reasonable to have godep restore restore packages to _both the outer GOPATH and the local _workspace dir, so that both match what's listed in Godeps.json.\nI think that would solve the original issue here, without removing the original intent of godep restore, which is to be the opposite of godep save (taking its list from the repo and installing outside, rather than taking its list from outside and installing into the current repo).\n. > If godep save creates and uses Godeps/_workspace by default it seems like it's dual - godep restore - should do the same. I was hoping it would create the workspace if it did not exist.\nGodep save creates and uses Godeps; its dual - restore - does the opposite. The first reads your GOPATH and writes to Godeps; the second reads Godeps and writes to your GOPATH.\n\nI have a different proposal now:\nCommands 'godep go' and 'godep path' should make an effort to make sure code is available. If src is checked in, there's nothing extra to do, they can just use Godeps/_workspace as they currently do. If src is missing, they should attempt to fetch code and put it in Godeps/_workspace/src (similar to godep's original behavior, but simpler).\nWhat does everyone think of this? Would it solve the problem?\nA potential follow-on to this would be to change the -copy=false behavior to produce the directory structure being discussed here, Godeps/_workspace with 'src' in gitignore. This would let us deprecate and eventually remove a big chunk of complex code supporting creation of the old TMPDIR workspace.\n. Restore is sometimes necessary when updating dependencies or saving new dependencies. Those other commands would have to be more careful if we want them to work without access to the full dependency set in $GOPATH.\nThis would be helped with better documentation for 'godep restore'. Restore is the opposite of save: save takes packages from GOPATH and puts the corresponding list of commit IDs in Godeps; restore takes a list of commit IDs from Godeps and puts the corresponding packages in GOPATH.\n. I would instead say that the premise of this issue is increasingly invalid: \"non-vendored operation\" is something that godep doesn't support. When folks ask how to handle the Godeps directory when they don't commit the source code, the response should be \"you should commit the source code\". If they really don't want to vendor code, then godep is not the tool for them.\n. Overriding the whole thing means the current project (everything outside\nof Godeps/_workspace) is not in GOPATH. I'd expect that to be ok for an\nisolated package but not if the current package imports something else, e.g.\nhttps://github.com/antifuchs/zeus/blob/master/go/zeusmaster/zeusmaster.go#L8\nWould #6 be sufficient instead?\n. Just to spell out the example above, if zeusmaster imports\ngithub.com/burke/zeus/go/clienthandler, I'd expect the go tool\nto be unable to find clienthandler, since it's not in the godep\nsandbox, and so nowhere to be found in GOPATH.\n. I think godep get package already does what you want.\nyuzu:~ kr$ ls bin\ngodep\nyuzu:~ kr$ ls src/github.com/mitchellh\nls: src/github.com/mitchellh: No such file or directory\nyuzu:~ kr$ godep get github.com/mitchellh/gox\nyuzu:~ kr$ ls bin\ngodep   gox\nAm I misunderstanding?\n. Oh, yes I'm misunderstanding. You want to compile and install the\nversion of gox listed in zeus's manifest, not whatever's at the tip of\nmaster in gox's repo.\n. Since leaving those comments I realized I don't fully understand what you're asking for. :'(\nCould you give maybe some example directory trees, or command sessions (including fictitious commands) showing the desired workflow?\n. Good call. It should be more careful about when to delete the old Godeps.\n. Merged as 0eddae56318276eb16180e29594092d3d0f7094e. Thanks!\n. Ah, I have an idea for what this could be.\n. Uh, I left that comment on my phone on a train and then forgot to follow up. Now I don't remember what the idea was.\nMaybe something to do with git setting timestamps in the past during a checkout, but I doubt that would explain this case since I know hk has had commits since Jan 17.\nIt's hard to understand what's going wrong here. The command you ran godep go build is really just doing the equivalent of:\n$ GOPATH=/path/to/hk/Godeps/_workspace:$GOPATH go build\n. Hopefully de4fb952cb414a9a9ddbeeabf68cc851718417a7 has fixed this satisfactorily.\nPlease reopen this issue (or open a new one) if there's still a problem.\n. Godep can't simply follow symlinks, because that can result in pathological behavior. (Consider a symlink that points to its parent directory.) Godep is in a similar situation to the standard go tool with respect to symlinks. As Ian Lance Taylor put it:\n\nYes.  In general the go tool does not work well with symlinks.  There\nis no current plan to change this.  Any fix would have to describe a\ncomplete and coherent solution for how symlinks should be handled.  I\ndon't know what that would look like.\n\nGodep is in the same boat.\n. You can use 'go get' on private repos if you put a github access token in ~/.netrc.\nHere's a (fake) example:\nmachine github.com\n  login kr\n  password d41d8cd98f00b204e9800998ecf8427e\nThis works for the plain go tool and anything else that uses it, not just godep.\n. I agree it makes sense for godep to have this.\nFor your particular case, is there a reason you can't put the import in a regular source file, without any build constraints?\n. @wfreeman @oxtoacart does pull request #66 fix this problem for you?\n. I went ahead and merged my proposed fix. If you still see the problem, please reopen this issue or open a new one. :)\n. Awesome, thanks!\n. Go programmers typically do this without godep's help. Put the dependency in your filesystem under its original import path. Commit any changes you like and push them to and from any remote repositories from there.\nFeel free to reopen this if I'm misunderstanding the situation you describe, but I think it doesn't belong in godep.\n. Ok, understood. This problem has come up in my projects as well. Godep with vendoring made it easier for us to test and deploy our changes in staging and production before they were merged upstream.\nGodep is primarily a vendoring tool. I highly recommend that approach.\n. Eventually I'd like to support subversion, but it's not very high on my todo list. I'd gladly accept a well-written patch for this.\n. This should become possible after we remove -copy=false mode from the save command.\n. > It would have to work transitively as well right?\nYes.\n. Started working on this yesterday.\n. I've thought about the directory name more since this issue was opened. The benefit to changing the name is small, and purely aesthetic. It's not worth having extra logic (and the accordant extra documentation). Plus, the top level element will never be anything other than exactly 'Godeps', so the shortest it could be is 'Godeps/_something'.\n. Another approach is to make changes in the upstream project and re-vendor it to test in your own project. You might also ask other projects that already rewrite import paths, such as camlistore, to see their workflow.\n. PTAL at #82. I think it is about ready to merge.\n. Maintaining patches to a project you don't own is quite a bit of additional work, yes.\n\nI'd probably need to fork the dependency into my own \"vendor\" repo (separate from the consumer repo), maintain any changes there, and then vendor that into the product.\n\nI think you're taking on a little unnecessary extra work for yourself here.\nFor nontrivial patches I agree you should fork the upstream library on github and use that to publish your pending PRs. But don't change its import path, develop your patch in the original directory. Then the act of vendoring this library will be the same whether or not your patch has been merged yet.\n. Yes, agreed. I've been thinking of having godep also put git URLs\nin the json manifest, in case the listed commit isn't available in the\nimplicit url that the go tool derives from the import path.\n. Cool, I'm glad this got fixed, even if inadvertently. I should add a test to make sure it doesn't regress.\n. Thanks for reporting this. We definitely need to work on handling symlinks better.\nWhat does the go list ./... command you mentioned print?\n. The originally reported error message says the working directory was /Users/lachlan/Projects/xyz/xyz, but the accompanying description says it was ~/.go/src/github.com/xyz/xyz. Which is it?\nA working directory of /Users/lachlan/Projects/xyz/xyz is definitely not following the standard Go code layout described at http://golang.org/doc/code.html. This is a basic assumption of godep; it's not going to change.\n. Yes, my apologies, I misremembered the direction of the symlink.\nThe problem here is that Getwd returns the actual directory on disk, rather than a path containing a symlink. In general, it is not possible for the Go process (or any other process) to determine which path was used to arrive at that directory.\n$ mkdir a\n$ ln -s a b\n$ cd b\n$ python -c 'import os; print os.getcwd()'\n/Users/kr/tmp/a\n. > I'm not even sure how one would fix this particular problem.\nDon't use symlinks.\n. > All that said, AFAICT, the go command itself seems to have no problem with this setup.\nIf you run 'go list', it doesn't print github.com/xyz/xyz, even though that's the import path of the package. This is a problem.\n. > the \"standard Go layout\" doesn't work out so well when you're trying to, for example, include a repo of go code as a submodule in some other non-Go repo.\nI'd like to hear more about this situation, and why it's necessary in the first place. What are you trying to do?\n. > The other alternative is to simply import all the Go code into the main Perl repo, then check that out under the GOPATH and adjust our Go code import paths to match this. It's a pain, but clearly fighting Go is a pain too.\nYeah, that's what I'd recommend, if you want to keep your Go code in the same repo as the Perl. Move all the files and change the import paths. Sorry.\nI'm still curious why you want it to be in a subdirectory in the first place (either via submodules or copying files).\n. > As opposed to what?\nAs opposed to keeping it in a separate repo.\nYou mentioned that you want to share a test harness, but I'm not quite making the connection. Even if the code for the test harness is in the Perl repo, that doesn't necessarily mean you can't use it when your working directory is in another repo.\n. Ok. Well at this point it seems like there's not really anything godep can do to help. You just have to keep your go code in a standard go workspace (a symlink mimicking a standard go workspace pointing to code that actually lives elsewhere isn't the same thing) if you want godep to work.\nNote, there's a similar discussion happening in #43. It's almost always possible to use a standard go workspace, even in a repo that spans many projects over the whole organization, and uses multiple programming languages.\nI'm going to close this issue, but feel free to keep the discussion going, and let me know if you have any other concrete ideas for how godep might help.\n. (I'd use the \"wontfix\" label, but it's really more like \"can't fix\". :bow:)\n. Publishing your docs would be fantastic! Godep could use more guides written in a different voice and different communication styles.\n. @intabulas do you mind opening an issue for case sensitivity? I'm not sure what (if anything) godep can do to help there, but it would be a separate problem (despite resulting in the same error message).\n. cc @simonz05 @fdr \n. Agreed, something like this would be nice. And possibly also a more explicit baked-in pre-commit hook.\n. On a second look, this seems to be a duplicate of #1.\n. @bmizerany that ought to be an error. I'll add a test for that case and make sure it does the right thing. Thanks.\n. Thanks everyone. I'm just working on fixing @bmizerany's reported bug in da956b74d2617869f583a8a2db27dc6680e991f2  and then I'll merge this.\n. Ok, I think this is ready. If you're into code review, now would be a great time for comments. :)\n. Thanks so much! Whew. Now on to #68!\n. The usual approach with the go tool is to clone the repo from github (with the usual 'go get github.com/x/y'), make local changes there, and (optionally) push your changes to your public fork if you want them to be merged upstream. It's the same with godep.\nDon't ever change import path github.com/x/y to github.com/myfork/y unless you intend to maintain a separate project indefinitely.\n. You don't need the '-r' flag to maintain a temporary fork. Just stick with the original import path and you should be ok. Remember, an import path is just a directory ('go get' is the only go command that accesses the network). When you run 'godep save', you'll pick up the code in that directory, just as when you run 'go install'.\nYour modified source code will go into _workspace, and the hash of your commit in Godeps.json.\nFor project P using dependency X:\n1. go get X\n2. make your changes to X until it works\n3. godep update X\n4. commit and share P\nOptional:\n1. fork X on github\n2. push your X changes to your fork\n3. at some point the pull requests is accepted\n4. godep update X\n5. delete your fork\n. > However, as long as you have a fork of a package, nobody else will be able to run godep restore because nothing in your Godeps.json teaches them in what repository they will find the Rev in question, right?\nThat's right. I had been considering adding a field to Godeps.json to handle this case for some time. This issue is mentioned in https://github.com/kardianos/vendor-spec/issues/6 and #207 that I can find.\n. Thanks! This is what I get for rushing a patch out for testing before getting on an airplane. :sweat_smile:\n. I had some trouble installing scollector, but I was able to reproduce what you describe with github.com/heroku/hk.\n1. There are incorrect whitespace changes. Maybe this has something to do with how I'm using package go/printer.\n2. Rewriting import paths that aren't part of the dependency manifest was a bug. I've pushed an updated commit to the branch and now hk with rewriting compiles cleanly for me.\n3. I'll look into the build constraints. Does it miss out putting the dependency in the list, or just rewriting the path?\n4. To get packages in subdirectories, use godep save -r ./.... Godep follows the convention established by the go tool: for commands that take a list of packages, no argument means the same as just dot (.).\n. The whitespace formatting problem should be fixed now. Can you confirm @mjibson?\nI'll work on the build tags next.\n. Yes, it's pushed. Github doesn't do such a hot job of indicating revisions to a patch.\nYou can see the newest code on https://github.com/tools/godep/pull/82/files if you\nsearch for \"Config\".\n. FYI the commit id is 550fdb6a9c9a78bf17c6771a17ceadd88d39e1cb.\n. Ok, then the build tag problem is a separate bug. It would happen even if\nyou didn't use -r. I'll open an issue for that and track it separately from the\nrewriting pull request. Probably fix it after merging this.\n. Opened #84 to track build constraints.\nWith that, I think this issue is resolved and I'm almost ready to merge #82.\n. Thanks for reporting all these issues!\n. PTAL.\nI think this is about ready to merge.\n. At last this is merged! Thanks for all the feedback everyone. :heart: :smile: :heart:\n. The current approach is to duplicate the go tool's logic for scanning packages (and therefore stop calling the go tool). But that's a substantial amount of new code for godep (about 1000 lines), so I just asked about a couple of possible alternatives on golang-nuts:\nhttps://groups.google.com/d/msg/golang-nuts/4Bgl5DcPuBw/UjGonF4nOpAJ\n. Thanks for reporting this!\nFirst, I should point out that you'll need to use 'godep update' to\nupdate a dependency to a newer version. Try this:\n$ go get -u github.com/mitchellh/goamz/...\n$ godep update github.com/mitchellh/goamz/...\n(There's no need to run godep restore beforehand.) Command 'save'\npreserves versions of packages already listed in Godeps.json.\nSecond, you uncovered a bug in save when it scans the old and new\nlists of dependencies to carry over existing versions. It doesn't prioritize\nexact matches as it should, and so it's incorrectly comparing\ngoamz/aws with goamz/s3, when it should in this case compare each\npackage in the old list with its exact companion in the new list.\nThird, that error message is terribly unhelpful. It should be improved.\n. @buro9 would you mind trying again to verify that commit bbdfa05 fixes the problem you saw?\nI also opened #86 so we get a better error message there.\n. It's a basic requirement of godep (and a common assumption in go tooling in general) that the repo should be in a standard Go workspace. I don't think it's worth spending effort to try to accommodate situations where that assumption doesn't hold.\nIt's not very hard to determine where the repo ought to be placed when cloning it to a fresh system; that's part of the purpose of the ImportPath entry in Godeps.json.\nAlso, this strategy isn't portable; windows doesn't support symlinks.\n. I don't have any experience with Jenkins in particular, but I'd be surprised if it really can't be configured to work with a standard Go project. Other popular CI systems, including Travis, work with Go just fine.\n. I'm sorry, we can't be adding code to godep to accommodate every peculiar environment out there. Please use a standard Go workspace as described in http://golang.org/doc/code.html#Workspaces.\n. This patch is fine if you (or the user) is using godep restore to work with the repo. The reason for the error message is that godep go doesn't work when a dependency uses bzr. Maybe this should be a warning?\n. Your directory tree looks ok, if a little unusual.\nJust don't ever use relative imports such as ./web in Go source code.\n. Relative paths in import statements are prohibited inside a work space.\nhttps://golang.org/cmd/go/#hdr-Relative_import_paths\nGodep isn't going to make any effort to support something the standard 'go' tool doesn't.\n. Thank you so much!\n. This was fixed in #95 d7653730bd16b6a001e5b54d603bd519a86c5f11.\n. My apologies for the late response on this. Thanks so much for the fix!\n. Thanks so much for reporting this. I wasn't at a computer earlier. :)\n. This is a dup of #94 and was fixed a while ago. Sorry I missed updating this issue!\n. Thanks for the patch! I think this is a promising approach.\nYou might have to do all the unqualify calls in a separate pass before the main loop in Godeps.Load, to make the containsPathPrefix check work properly. Sorting the paths is important to make sure we don't accidentally include a dependency D's subdirectory in addition to the D itself. (Imagine importing both A/Godeps/_workspace/src/D/X and D itself \u2013\u00a0we'd end up listing both D and D/X.) The current modification to the behavior of containsPathPrefix doesn't seem to cover this case (aside from just being unexpected behavior anyway).\n. Another reason to do the unqualify calls earlier is that they can hopefully be done before even calling LoadPackages. Modifying pkg.ImportPath and pkg.Dir but assuming the same pkg.Root isn't correct \u2013 two dependencies might come from two different Roots.\n. Also, you can delete readGodepsForImportPath entirely. Yay!\n. Sure, I can help make some test cases.\n. Looks like there are three things to test here:\n1. Windows paths (can't easily unit test)\n2. Multiple GOPATH roots.\n3. Excluding subdirectories.\nI pushed a commit (f3038ffa61657b7a39328d39e7c2505557dfee86) that tests those last two.\n. Looking pretty good! A couple of small comments and then we just need a unit test covering the new behavior.\n. Beautiful. This is the best kind of patch! Deleting code :heart:\nIf you're not comfortable adding a unit test for this change, I'm happy to do it.\n. Merged as f6274c18822c8931834f558a5dde22864a089a0f. Thanks so much!\n. My understanding of appengine is that they provide two separate implementations of their packages for the SDK and the production system. Even if godep were to save appengine/..., it wouldn't work.\nIf this is right, then we need some way to exclude appengine packages.\nIt could be built in to godep as in https://github.com/matthewbelisle-wf/godep/commit/dba190f14fc83759b74df44e4ab4e7a492eedb1d, or provided by the user as a flag, for example -omit=appengine/....\n. I am leaning toward an \"ignore\" or \"omit\" flag plus a default list of patterns to ignore that is just appengine.\n. That's a good question. There isn't really a good way to specify these in godep.\nIf #84 were fixed (I'm working on it), you could do something like this:\n```\n// +build ignore\n// Dummy package so we can explicitly depend on build tools.\npackage dummy\nimport \"github.com/jteeuwen/go-bindata/go-bindata\"\n```\nAnother way to look at these examples is as commands, used by the build process, that happen to be written in Go. What if some of them were written in Python or C? (Such as the protoc command itself.) This feels like potentially a can of worms.\n. Awesome. Thanks so much!\n. This seems worth considering. The go tool and vcs package take a different approach, having a verbose mode that prints the all arguments for each command. In general, I'd prefer to approach things the same way as the standard tooling unless there's a good reason to be different.\n. Any anyway, thanks for putting in this work! It will be useful one way or another. :)\n. This PR is meant to address #43.\n. This should fix #43 as well.\n. I've thought through this case before but clearly the current approach is not working well yet. (I'm a little puzzled by importing github.com/coreos/fleet itself \u2013\u00a0that's a command. But the same problem would arise from importing other packages in that same repo.)\nThe problem here is that godep expects all dependencies to be present in GOPATH, so it can load info about them and copy the code. But transitive dependencies (such as github.com/godbus/dbus) that have been copied into an intermediate package's repo (such as github.com/coreos/fleet) might not be installed under their original import paths, as seen above. \nHonestly, the best solution to this problem is to avoid it in the first place: libraries should not use godep at all, only commands (package main) should.\nHere's one possible way godep might enforce that:\n1. Of the packages given on the command line, consider only main packages, and discard others.\n2. If this results in the empty set, it's simply an error.\n3. Copy all dependencies, even the ones that live in the same repo.\nThis has the drawback that when developing, edits to packages in the same repo won't be picked up by the commands until you rerun godep save.\nAnother alternative would be to continue godep's current approach of \"undoing\" import path rewriting when copying packages that have already used godep, and to add more logic to automatically run 'go get' or otherwise fetch packages that aren't readily available in GOPATH.\n. I'm interested in more opinions about this @bcwaldon @philips @bmizerany @bradfitz.\n. Where would you get \"whateverhash\" from, and why should it be any more trustworthy than the code you can get directly from https://github.com/tools/godep/archive/master.tar.gz? (Or from 'go get', which also uses https on github.)\n. Looks like you are using Go version 1, which came out well over two years ago. The package code.google.com/p/go.tools/go/vcs (which is used by godep) uses features of the language that were introduced after that release. If you want to compile godep, you'll have to download a newer Go version, I recommend the latest, which is 1.3.1, and can be found at http://golang.org/dl/.\nAlso, I apologize that the error message in this situation is so unhelpful.\n. Maybe wontfix/cantfix is more appropriate. There are two problems here:\n1. We don't support ancient versions of Go. I agree it's arguably a problem but it's better for people to upgrade than to keep supporting outdated releases.\n2. The error message is terrible. This is for sure a problem but there's no good way to fix it. Brad started a thread about this recently but there's still no good solution.\n. Yes, this is a bug.\n. Good call. Thanks for reporting this.\n. Anything godep does has to work on Windows. This rules out symlinks.\nAs a first step, we might add a command such as 'godep check', that tells you if there are any dependencies missing from Godeps.\n. I have hope that this can be solved without exposing additional knobs. The general approach I would take: godep should find all dependencies, ignoring // +build lines entirely. It should behave as if all build constraints are satisfied when finding imports. #84 has a little bit of discussion on this topic.\n. This approach wouldn't change what gets built, only what code is included in the repository.\n. > could then be triggered with a -tag by the builder\nIf that's the case, then the alternative is it wouldn't build at all for that builder.\nIt's still the responsibility of the person running godep save to at least glance at the diff to make sure it's reasonable, regardless of what godep does about tags.\n. I suppose not building at all can be preferable to including unsupported code for an unsupported build configuration. Hmmm.\n. Thanks for doing this work! This looks similar to #1, would you consider updating this patch to provide the interface described there?\n. Usually, people run godep save with no further arguments, or godep save ./... to save the dependencies of all packages inside the current directory.\nIf you want import statements to refer to the copied source code, use flag -r and it will rewrite them for you. You don't have to do it by hand.\nHope this helps!\n. Ah, I see those import paths were already rewritten. That's fine, you can leave them as is. But the godep usage typically stays the same: whenever you add or remove a dependency, rerun godep save -r to pull in the new code.\n. The flag -r isn't quite right yet, which is why I haven't been promoting its use much so far. It works for most cases, but there are a few corner cases that need fixing.\n. Of course!\n. This looks great, thanks!\n. Sent github/linguist#1549.\n. The patch was merged into linguist earlier today, so now we just wait for github to deploy.\n. Note, we are currently waiting on github/linguist#2017.\n. > Though it wouldn't help if paths became internal/github.com/...\nYeah, I was thinking about that recently.\nWe'll cross that bridge when we come to it.\n. The fix is live on github as of a few hours ago. :tada: \n. Good call. The documentation needs a lot of work. Thanks for reporting this.\n. Is it possible to use the commit hash (perhaps abbreviated) as the version?\n. By the way, thanks for doing this!\nI will make a tag if that's the only way, but given that we don't do any of the other things that usually accompany a version tag (for example, releasing tarballs, providing compiled binaries, having a godep version command), sticking with commit hashes for now would be preferable.\nPlease also let me know if there's anything else I can do to help.\n. Ah, good idea! I think I'll tag the first commit (36059b6) as 0. Would that satisfy your needs?\n. Done https://github.com/tools/godep/tree/0\nThanks again!\n. I think it's a fine concept. The output seems a little haphazard. It would be nice if it were more predictable, but maybe that's not feasible.\n. Thanks for all this discussion folks. It's super helpful! :sparkling_heart: \n. Did you mean #243? Looks like #153 is still open (but should be closed?).\n. Thanks for writing this patch!\n. Sorry, this isn't going to change.\n. Sorry, the go toolchain does not allow package names ending in .go.\nhttps://code.google.com/p/go/issues/detail?id=8782\n. No problem, glad it worked out! :)\n. Yes, you're absolutely right on all counts. We're explicitly trying to avoid having two different revisions from the same repo.\nReally need a better error message for this.\n. Ideally it should say why there is an error and what to do about it, like:\n```\ngodep: cannot update repo/A without repo/B\nRun 'godep update repo/...' to update all packages from repo.\n```\n. Yeah, we should fix this. Thanks!\n. Thanks for doing this!\nWould it be better to refuse to vendor the package if there are untracked files? That's what we do when any tracked files are modified, and this is arguably the same thing: the repo is \"dirty\".\n. What's wrong with copying ignored files? (We also copy .gitignore, so they should still be ignored even after the copy.)\n. True. Ok let me give this a more thorough review.\n. I've covered this in a couple of talks (here's one https://www.youtube.com/watch?v=myCHCXFFTPY), but I haven't written it down yet.\nBasic flow:\n1. Go into src/github.com/foo/bar and commit your change.\n2. Publish your change to your fork, and send a pull request.\n3. Go back to src/github.com/marcesher/myproject and rerun godep save.\nThis will vendor your modified code along with the commit id. When the project merges your change, you won't have to do anything, your commit is now included in the project's history.\n. Can you provide a test case? I haven't been able to reproduce the behavior you describe.\n. The ideal would be to automatically detect whether to rewrite import statements. It is always possible to do this: if flag -r was previously used there must be at least one import statement already rewritten, in a source file of one of the packages listed in Godeps.json under Packages.\n. I'd love to review a patch, @deoxxa. Thanks! I am also happy to discuss the approach further, if you prefer, before you write code.\n. This looks great. Do you mind rebasing this? Otherwise I can do it.\n. Thanks so much!\n. PTAL @bgentry @dsymonds @mjibson @ryandotsmith @bmizerany \n. I am starting to wonder if the regexp is more trouble than it is worth. If it gets any more unwieldy, I will be tempted to try something else altogether.\nAnyway,\nPTAL\n. Sorry, the list needs to go in a well-known place so that other tools can find it later. Making it configurable would defeat the purpose.\n. I agree with @freeformz on this.\n. Thanks for the fix! :grinning: \n. Done. Thanks for the report!\n. Update matches its arguments as a pattern against the list of dependencies. By construction, none of the dependency packages are inside ., so the pattern ./... matches none of them. If you want to match all dependencies, the easiest way is to use ....\n. This is reasonable for a start. Another possibility would be to copy code from the go tool to download all packages in process. This would give much more control over this process, and let us fix one or two other issues as well. However, that would be a lot more work.\nFor checking the error output of go get, there are a couple of things to consider:\n1. If the godep restore is eventually successful, it should produce be no output.\n2. If it is not successful, each error should be printed exactly once.\n. This is no longer a problem with Go 1.5 and GO15VENDOREXPERIMENT=1 in your environment.\n. > What is the issue with giving users more control over how Godep behaves?\nA proliferation of knobs and switches creates drag on both the interface and implementation. That makes it harder to design and implement truly important changes as they arise. Each new feature must \"pay its way\" by providing more benefit than the cost of maintaining it for the rest of eternity. This is doubly true for features that expose configuration options. (The ideal new feature \"just works\" without any change in the user's behavior. Adding more configuration is an admission of failure.)\n\nIn this case I've proposed an option to increase the utility of Godep.\n\nThis change would give a local increase in utility\u2014confined to a few unusual cases\u2014at the cost of a small but global decrease in the utility of Godep\u2014for the numerous \"background\" use cases. It is not clear to me that the few occurrences of increased utility add up to more than the global cost.\nIt seems to me like a net decrease in utility.\nHowever, these days @freeformz probably has a better idea than I do about how godep is being used. We should defer to his estimate.\n. We could also solve this by using godep on itself. ;)\n. The parser can accept a []byte or string as the third argument. It would be nice not to create a temporary file in the filesystem, but instead keep the intermediate file in memory.\n. LGTM\n. Thanks so much!\n. Sounds like DWIM. If I type godep save, it's not the same thing as godep save ./....\nStoring the -r might be ok, but then how would a project switch to not rewriting import paths?\nIf we did something like this, then the rules for godep's behavior would be more complicated. It would be a guessing game what exactly it'll do when you run godep save, and it's not really clear how to get the \"real\" godep save behavior when that's what you want.\n. You can import another package's main package:\ndepmain/main.go\n``` go\npackage main\nimport \"fmt\"\nvar X int\nfunc main() {\n    fmt.Println(\"hello from dependency\")\n}\n```\nexample/main.go\n``` go\npackage main\nimport (\n    \"fmt\"\n_ \"depmain\"\n\n)\nfunc main() {\n    fmt.Println(\"hello from example\")\n}\n```\n$ go run main.go \nhello from example\n$ go install\n$ example\nhello from example\nThis only works if you haven't installed the other package as a binary in your $GOPATH/bin.\n. The save and update commands check for this case and prevent it from happening. Godeps.json should never contain two different commit hashes from the same repo. If it happens anyway, that's a bug.\n. @thockin is right tho, even though godep tries to avoid this situation, it's reasonable to also check for it later, because who knows what happened to the file in between.\n. The approach I've tried to take so far is to let package main decide which revision of each dependency to use. Normally, a dependency package that itself has further dependencies should not even use godep. A repo like etcd is a little more confusing because it also has some commands, so they vendor all their deps. But when using packages from etcd in another project, we should try to treat the etcd packages as if they hadn't vendored anything.\nGodep could try to use etcd's recorded revision of those leaf dependencies, but that strategy doesn't always work: it's possible to have two repos that have each vendored a different revision of a leaf package. Our approach so far is to use a simple rule consistently: always let the user choose. The way the user expresses this choice is by installing their chosen revision of each dependency (leaf or otherwise) into their $GOPATH.\nHowever, there's certainly still room for making this more convenient. If a project has a lot of dependency repos like etcd, it's tedious to run godep restore for each one. Godep could potentially make this process more automatic. But note that that if the same leaf dependency has been vendored in multiple repos, the user will be left with an arbitrary revision of it in GOPATH\u2014whichever one was restored last. Maybe that's fine, but I'm a little worried that folks might not be aware of that. It could go unnoticed for a long time, and might be an unwelcome surprise.\n. It is a basic assumption of godep that you are vendoring packages, not commands.\nI agree that it would be useful to vendor commands along with their dependencies, but as you have indicated, that's a different thing, and godep doesn't really do that (yet). It might sort of work, but if so, that is a consequence of godep not being careful enough about what it does, not a deliberate feature.\n. The very rough plan is to change godep to use the new /vendor/ directory layout, possibly guarded by a command line flag. Then if the go tool -vendor flag is successful, godep will use that layout by default and remove import path rewriting (the -r flag) entirely.\n. I'm going to help update godep to support the new format, but I won't have the time it would take to devote to a whole new tool.\n. However, that certainly shouldn't stop anyone else if they want to try that route. Godep is open source, so if its code would help they are welcome to use it!\n. I think this is actually #160.\n. +1 LGTM\n. Rad, looking at this now.\n. BTW, maybe I should write this up in a contributing.md file, but this project has a \"rebase & squash\" policy. It's fine for a pull request to have multiple commits, but to land it should be rebased on top of master and squashed into a single commit.\n. LGTM after the minor things above.\n. This sounds reasonable to me. Some people complain about the amount of data it takes to vendor code, and vendoring the whole history will exacerbate those complaints, but personally I think it would be ok.\n. LGTM\n. PTAL\n. Uhh, it would have been nice to be able to address your feedback before we merged this. If we don't want travis complaining while this PR is still open the fix is to turn on this option:\n\nI just turned it on.\n. Sorry, I guess I had 2 days' worth of chance to address the feedback. :sweat_smile:\nMy bad.\n. LGTM\n. Very exciting! I've also started playing around with this. Maybe there is something here that can help godep https://github.com/kr/vexp.\nI suspect the hardest part will be making godep work with both formats, projects saved with older versions of godep as well as the new vendor directory. And possibly also some sort of automatic or explicit migration.\n. Yeah as far as I know those are still unsolved questions.\nI think it's pretty safe to say that the result of vendoring should be a \"flat\" set of dependencies. That is, no \"vendor\" directory as a descendant another \"vendor\" directory. Seems to me like the hardest question is how to choose which version of each dependency.\n. Rebased.\n. I agree. What else do you think it would need?\n. LGTM\n. What do you think about putting Godeps.json inside vendor? It would mean more work for other tools that read that file (e.g. the Heroku buildpack) but it would produce less clutter in a project's root directory.\nEither way, LGTM\n. Looks like this was closed in fe7138c011ae7875d4af21efe8b237f4987d8c4a.\n. It should be copying all files, not just .go source files. See copySrc in save.go.\n. Aha, it seems the license file is in a parent directory of all the go packages. Since godep copies only packages, it misses the parent directory. Yes, this would be difficult to fix.\nAlthough godep mainly operates on packages, it already has some special cases for the root of a repository. It is not too hard to imagine another special case that copies all regular files from the repo root of any dependency. (We still want to avoid simply copying the entire repo, because it might contain some very large packages that are unused and could otherwise be omitted.)\n. Yeah, that would be reasonable as well.\n. LGTM\n. (I am assuming your GOROOT is /usr/lib/go; you can check this by running go env.)\nGodep tries to update packages on disk wherever they are found; if they are not found, it downloads them to the first entry in GOPATH, just like 'go get'.\nI would guess that /usr/lib/go/src/golang.org/x/net/html was created somehow outside of godep, and now that it exists, godep finds the package there and tries to update it. Or perhaps the first item in your GOPATH is /usr/lib/go\u2014if so, you should remove it. The value of GOROOT should not be in GOPATH.\n. Commands 'godep restore' and 'godep get' follow the same rules as the go tool for locating and downloading packages. That will remain the case. (In fact, godep doesn't download any packages itself, it just runs the go tool to do that work. Any behavior change there would have to happen in the go tool.)\nYou should remove the value of GOROOT from your GOPATH, if it's there. I also recommend you delete golang.org/x/net/html from your GOROOT, along with any other packages in GOROOT that aren't part of the standard library. That should get you back up and running, so that both 'godep restore' and 'go get' work properly for all packages.\n. Can you provide a complete program that exhibits the behavior you're describing? Please also include steps to reproduce the problem and describe the behavior you expected to see.\n. Godep uses the json file to, among other things, keep track of which dependencies it has vendored. If a package is listed in Godeps.json, godep will not bother to copy its source code into Godeps/_workspace/src.\n. The flag -r means to rewrite import paths.\nYou should use godep save -r ./... as your command.\n. You're welcome! :balloon: \n. Hah. :)\n. This sounds like a bug. If an updated dependency needs to pull in a new package, I think godep should do so.\nFor now, you can try to work around this by running godep save -r after running godep update.\n. It is safe to run godep save -r (or godep save) even if you have newer versions of some packages. Only update will update a package. You don't have to run godep restore.\n. LGTM\n. LGTM\n. Sure, LGTM\n. LGTM\n. If you have GO15VENDOREXPERIMENT=1 in your environment, you don't need to use godep path at all.\n. > having godep path return the right thing means it's easier\n\nto write portable shellscript wrappers in the interim\n\nIt sounds like you're asking for a new feature. The command godep path returns a workspace\u2014a directory suitable for including in the GOPATH list. The vendor directory is not a workspace and it can't usefully be included in your GOPATH. When you're using GO15VENDOREXPERIMENT=1, there is no \"right thing\" for godep path to print.\nHowever, in that case, it's trivial to construct the correct path yourself, so I don't see how a godep feature would make writing portable shell script wrappers any easier.\n. But I do agree there's a bug in godep here: if GO15VENDOREXPERIMENT=1 is in the environment, then godep path should print a helpful error message and exit with a nonzero status code.\n. This feature sounds reasonable in principle, just for the sake of convenience. (I would be careful about doing things for the sake of security without thinking more deeply about it from top to bottom. I suspect that godep isn't in a position to provide any meaningful security guarantees without some serious redesign. A feature that is nominally \"for security\" but where the threat model is half-baked or nonexistent will be misleading, and probably worse than just making no promises in the first place.)\nI don't have much opinion about the mechanism to achieve it. If this works reliably, cool.\n. :+1: this is a big improvement.\nOne could nit-pick the wording or formatting, but this is already much better than what it currently does.\n. It would be better to fix this by calling path.Clean on the command line arg before supplying it to matchPattern. The function matchPattern is a lower-level routine that expects to get a true import path.\nIn the go tool, this is the difference between\nhttps://github.com/golang/go/blob/6083bd65f7/src/cmd/go/main.go#L347-L355\nand matchPattern:\nhttps://github.com/golang/go/blob/6083bd65f7/src/cmd/go/main.go#L476\n. Using path.Clean would fix not just trailing slashes, but all unclean paths, such as github.com/golang/protobuf///.//proto.\n. LGTM\nThat was fast! :)\n. :+1:\n. Is there a way to do this without a flag? Optional behavior makes for poor UX and harder-to-maintain software.\n. I can sympathize with the instinctual desire to maintain backwards compatibility. It's worth asking whether that's necessary. I don't know the answer, but if it's acceptable to change the meaning of godep save, then I think that would be preferable.\nI'm only aware of one thing that consumes this field, and it's buildpacks (both heroku and cloudfoundry) that need to install the go compiler. If that's the extent of it, then I think it would be fine to simply make the change unilaterally. There might be additional ways this field is used, but I sort of doubt it.\n@freeformz do you have any insight here?\n. Yeah, that was the original intention. But if some other behavior would be more useful, it's not set in stone. :)\n. Try godep update ... (three literal dots).\n. This should absolutely be documented better. There could be an example in the help output for godep help update.\n. This sounds like a bug.\n. I'm sorry for this. It's a good idea to avoid using symlinks for elements of GOPATH, or inside your workspace.\nThe go tool includes code to explicitly prohibit some cases, though it seems there are still others that it doesn't catch. We (godep) should consider taking a similar approach, to find cases that are unlikely to work correctly and produce a helpful error message instead of silently doing something useless.\n. I think this is the right approach in the long run. It had to happen eventually.\n. LGTM\n. Now that @freeformz is making binary releases of godep, it seems like there's less reason to spend effort making godep compile with older Go versions.\n. That looks like a good fix. There are two slight refinements you might want to make:\n1. You don't need $GOPATH in there; it's unlikely any executables will be put there.\n2. You don't need to set GOBIN, you can just put the bin directory directly in path as $GOPATH/bin.\nSo, putting those together it would be:\nshell\nexport PATH=$GOPATH/bin:$PATH\n. > I did a 'go get -u' yesterday\nOk, but what version do you have? It would be helpful if you can run godep version and paste the output here so we know exactly what you have.\n. It's not, in general, possible to save only some of your dependencies. You have to save all or none. \n. > Both godep and go installed from Homebrew.\n(Offtopic) pro tip: don't install Go from homebrew (or any package manager). Download a tarball from https://golang.org/dl/ and unzip it into /usr/local/go.\n. ",
    "brianm": "On Wed, May 8, 2013 at 8:25 PM, Keith Rarick notifications@github.comwrote:\n\ngo list -json\n\nLOL, wish I had known that one :-)\n. On Wed, May 8, 2013 at 8:25 PM, Keith Rarick notifications@github.comwrote:\n\ngo list -json\n\nLOL, wish I had known that one :-)\n. ",
    "neurogeek": "The diff command implementation has been merged to master.\n. Sure, I'll take a look later today.\n. @kalbasit: Interesting. With new qualification over appengine packages, we definitely don't need this.\nHaving said that, I'm inclined to have the omit/ignore flag anyways, just not appengine-centric, since we could run into this in the future. What do you guys think?\n. @freeformz Sorry it took me a while to answer, rough past few weeks at work.\nI don't have an answer for you :) I guess I was thinking on ad-hoc workflows that could benefit from having omit.\nI'll close this and if needed, people can issue a feature request.\n. Ok..\nLet's reopen and I'll take a better look over the weekend.\n. Ok, I took a look and also asked around and yes, Go on Appengine needs to be handled differently. The Appending SDK is the new-ish thing, but Appengine packages aren't going away anytime soon.\nLets implement the -omit flag. @kr @freeformz on board?\n. godep diff command has been merged to master and it should be able to do whats described here.\n. I just pushed a fix to ignore testdata directories. Thanks @shurcooL for bringing this up!\n. Yes, I'm working on a better fix. I'll send it out for review in the next couple of days.\n. Fix is in to ignore testdata. That should help with this issue.\n. Cool. I'll revisit the solution then.\n. I think this is reasonable. @freeformz what do you think?\n. @freeformz Thanks for your input!.\n@activars Could you expand on the rationale behind the symlinks? So I can better understand your use case?\nCheers,\n. Hi @jaytaylor, \nWould you care to elaborate a bit on your use case?\nCheers,\n. @kr and @freeformz Thanks for the comments/review. I've addressed those in my PR.\n. I agree with adding version information. How do we enforce remembering to increase the version number, though?\n. No objections from me. Sounds good.\n. Weird. I cannot reproduce this either.\n$ git log | head\ncommit e42768084ec1f1596ad37313ebd30978d641a9aa\nAuthor: Etourneau Gwenn gwenn.etourneau@gmail.com\nDate:   Tue Aug 4 10:42:42 2015 +0900\nCommit sonde-go\n. $ go version\ngo version go1.4.2 darwin/amd64\nOn a MacOS 10.10.4\n. lgtm\n. lgtm\n. I'll take a look at the root issue\n. @freeformz Would you please take a look at this PR?\nThanks!\n. Makes sense. I like it.\n. Changed to use switch.\n. Sigh, indeed. \nI forgot the non-fall-through behavior in Go's switch statement.\n. Awesome! Thanks @freeformz\n. This happens because the cgo directory is ignored (because it starts with ) when vendoring github.com/gosexy/exif, then when godep go build tries to build it, it fails because it is missing the required src file.\nThis wouldn't be a problem if the dir was called cgo instead of _cgo. Same thing happens with _examples, so you won't be able to run tests in the vendored package.\nI don't think we can change anything here.\n.  @freeformz It's all good, man! :D\n. Just to pitch in.\nI like the idea of official releases, for convenience that is. Security would be another matter.\n. LGTM too.\nI would like to know what prompted this? Just clean up or is there a more 'profound' reason?\nThanks!\n. Makes sense. \nThanks for the details.\n. The diff command implementation has been merged to master.\n. Sure, I'll take a look later today.\n. @kalbasit: Interesting. With new qualification over appengine packages, we definitely don't need this.\nHaving said that, I'm inclined to have the omit/ignore flag anyways, just not appengine-centric, since we could run into this in the future. What do you guys think?\n. @freeformz Sorry it took me a while to answer, rough past few weeks at work.\nI don't have an answer for you :) I guess I was thinking on ad-hoc workflows that could benefit from having omit.\nI'll close this and if needed, people can issue a feature request.\n. Ok..\nLet's reopen and I'll take a better look over the weekend.\n. Ok, I took a look and also asked around and yes, Go on Appengine needs to be handled differently. The Appending SDK is the new-ish thing, but Appengine packages aren't going away anytime soon.\nLets implement the -omit flag. @kr @freeformz on board?\n. godep diff command has been merged to master and it should be able to do whats described here.\n. I just pushed a fix to ignore testdata directories. Thanks @shurcooL for bringing this up!\n. Yes, I'm working on a better fix. I'll send it out for review in the next couple of days.\n. Fix is in to ignore testdata. That should help with this issue.\n. Cool. I'll revisit the solution then.\n. I think this is reasonable. @freeformz what do you think?\n. @freeformz Thanks for your input!.\n@activars Could you expand on the rationale behind the symlinks? So I can better understand your use case?\nCheers,\n. Hi @jaytaylor, \nWould you care to elaborate a bit on your use case?\nCheers,\n. @kr and @freeformz Thanks for the comments/review. I've addressed those in my PR.\n. I agree with adding version information. How do we enforce remembering to increase the version number, though?\n. No objections from me. Sounds good.\n. Weird. I cannot reproduce this either.\n$ git log | head\ncommit e42768084ec1f1596ad37313ebd30978d641a9aa\nAuthor: Etourneau Gwenn gwenn.etourneau@gmail.com\nDate:   Tue Aug 4 10:42:42 2015 +0900\nCommit sonde-go\n. $ go version\ngo version go1.4.2 darwin/amd64\nOn a MacOS 10.10.4\n. lgtm\n. lgtm\n. I'll take a look at the root issue\n. @freeformz Would you please take a look at this PR?\nThanks!\n. Makes sense. I like it.\n. Changed to use switch.\n. Sigh, indeed. \nI forgot the non-fall-through behavior in Go's switch statement.\n. Awesome! Thanks @freeformz\n. This happens because the cgo directory is ignored (because it starts with ) when vendoring github.com/gosexy/exif, then when godep go build tries to build it, it fails because it is missing the required src file.\nThis wouldn't be a problem if the dir was called cgo instead of _cgo. Same thing happens with _examples, so you won't be able to run tests in the vendored package.\nI don't think we can change anything here.\n.  @freeformz It's all good, man! :D\n. Just to pitch in.\nI like the idea of official releases, for convenience that is. Security would be another matter.\n. LGTM too.\nI would like to know what prompted this? Just clean up or is there a more 'profound' reason?\nThanks!\n. Makes sense. \nThanks for the details.\n. ",
    "kelseyhightower": "@kr Is this still a desired feature? Are the plans to add a check on missing dependencies from the Godeps list? I would not mind take a stab at this.\n. @kr Is this still a desired feature? Are the plans to add a check on missing dependencies from the Godeps list? I would not mind take a stab at this.\n. ",
    "freeformz": "I'm going to close this as it's pretty broad and I think a little outdated. As these things come up again (if they do) I'll open new issues/PRs.\n. I don't think this is still an issue. Closing for now. Please re-open if it is and I am wrong. Thanks!\n. For now you should rewrite your deps so that you only need to use godep when managing dependencies. Long term it's likely the need to rewrite will go away pending the vendoring experiment.\n. I am closing this because it's no longer possible to use -copy=false (since 754ee6f4e0e5fc8d0ef2692fb239d15c7a09dd84). \n. godep version now works and prints a version.\nGodep is likely (but not finally) going to use https://github.com/kardianos/vendor-spec as per #270.\nSo I'm going to close this. Please re-open and update if I'm wrong.\nThanks!.\n. What version of godep are you using?\nI\u2019ll also see if I can reproduce this.\n\nOn Mar 14, 2016, at 4:57 PM, Alex Dadgar notifications@github.com wrote:\nI am also getting this when trying to update:\ngodep update github.com/hashicorp/go-getter\ngodep: no buildable Go source files in /Users/adadgar/Projects/go/src/github.com/StackExchange/wmi\ngodep: error loading dependencies\nI have a project that has different imports depending on OS and the above is only used on windows. I tried to just GOOS=windows go get github.com/StackExchange/wmi which worked but then get the above error.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub:\nhttps://github.com/tools/godep/issues/39#issuecomment-196575276 https://github.com/tools/godep/issues/39#issuecomment-196575276\n. @dadgar what if you go get github.com/StackExchange/wmi and try updating again. Please not that you probably want to use godep update github.com/hashicorp/go-getter/... atm because of a bug in the update code.\n. @dadgar did you run godep update github.com/hashicorp/go-getter/... And is github.com/hashicorp/go-getter anywhere in your Godeps.json file?\n. @dadgar godep is platform agnostic. the go tool isn't atm, so it will not pull down all possible deps for a package, only the ones the local arch needs to build. Godep will find all deps across all arches as it ignores build tags (except for ignore and appengine) atm.\n. #108 is merged and may fix this.\n. I believe this is now fixed. If not please re-open.\n. For the purposes of cleanup I'm going to close this as it's obvious that we're not going to merge it as is. If someone would like to re-open this issue with an up-to-date PR (perhaps with a different implementation) I'd be happy to review and consider/discuss inclusion.\n\nThanks!\n. @kr How about we remove restore at this point?\n. +1 and that is in line with the official Go team stance as well. With that said I'm going to close this issue. \nThanks everyone for the discussion.\n. There's no real way to accomplish this AFAIK in go land w/o going down the gb path.\nA godep status or godep list command to ensure everything in use is probably the best that can be done for now. I'm going to close this in favor of: #273\n. This is possible by specifying the path to the full vendored package, so something like:\nconsole\n$ go install -v github.com/my/project/Godeps/_workspace/src/github.com/your/project/cmd/thing\nor\n$ go install -v github.com/my/project/vendor/github.com/your/project/cmd/thing\nworks properly (AFAIKCT) with rewriting or the vendor experiment.\n. Every time I've tracked these things down in the past it was because of the go tool using the wrong cached package file from outside. rewrites and/or vendor directory solve this AFAIK, so those should be used instead. Closing for now. If I'm way off base and/or we can reproduce with go 1.5* and current godep please re-open. Thanks!\n. atm as long as the imported package has files with build tags that include it on the local machine (a file with // +build heroku and a different file with // +build !heroku) both files will be included (assuming they are both committed to vcs). Ultimately we want to vendor everything regardless of tags so that code is buildable in multiple environments. See #271. I'm closing this for now in favor of that issue.\n. For those of you having this problem:\n1) is it with golang switch to golang.org/x / github? If so you will likely need to update your deps in a brute source kinda way as per @bhcleek 's suggetions. I recently had to do something similar for https://github.com/sclasen/swfsm/pull/60\n2) Can you provide a repeatable test case?\n. Travis shouldn't do that as that's an implementation detail of godep and may break in the future.\n. @pdxjohnny This works fine for me:\nconsole\n$ go get -u go get -u github.com/authit/crypto\n$ cd $GOPATH/src/github.com/authit/crypto\n$ godep restore\nI would try nuking $GOPATH/src/github.com/spf13/cobra and try godep restore again.\nBTW: godep restore isn't really necessary unless you don't want to wrap your go commands with godep. I would also encourage the authors of the package to rewrite their deps.\n. @gngeorgiev godep works under the assumption that all packages are in a VCS controlled repository. That repository doesn't actually have to be pushed anywhere else though.\nI personally put all code into a VCS (almost always git), even if it's ever just local.\n. godep uses the go tooling for various bits and they mostly require the code to be in VCS, organized in certain ways.\n. @tchap what version of godep do you have? If it's not v2 or the command isn't recognized, please go get -u github.com/tools/godep and try again.\n. @tchap can you paste the full output?\n. This works this way...\nconsole\n$ cd <path to blablabla>/workspace/src\n$ GOPATH=\"$(dirname $(dirname $(dirname $(pwd)))):$GOPATH\" godep save\nThat above works for me in a trivial test case.\n. @kamal-github Please open a new issue describing the problem and don't comment on an old issue.. Godep no longer works this way and we make the following assumptions:\n1. godep save was used and the _workspace was committed to git.\n2. If the dependencies were saved with the -r flag, the go tool itself w/o needing to modify $GOPATH or wrapping commands with godep can be used to go install the project. This is the recommended way to use godep and you will have the least amount of problems using it this way.\n3. If the dependencies were NOT saved with the -r flag, then one of two things must happen:\n   1. go tool commands to build code must be wrapped with godep, so godep go install and the like. This happens to re-exec the go tool with a modified $GOPATH, but this is just an implementation detail, subject to change at whim (although it is unlikely to).\n   2. godep restore must be run before using the go tool to build code. This modifies the copies of the dependencies in your $GOPATH by checking out the Revs for each dependency in the proper $GOPATH location. This is sub-optimal.\nI hope this help clarify things. I'll try to improve the docs.\nPS: rewrites do not work with the Go15 vendor/ experiment further complicating things, but this is be reflected in the docs already.\n. godep doesn't do anything with submodules AFAIK. Is this reproducible with the current version of godep and can a publicly accessible reproducer be made available?\n. Closing in favor of #271.\n. I am closing this because -copy=false hasn't been supported for a whule (since 754ee6f4e0e5fc8d0ef2692fb239d15c7a09dd84).\n. @duggan Why would you not import it as <canonical>/<package>/<sub package> ?\nFor instance when I have a \"local\" package of some sort I'll import it like github.com/freefromz/mypackage/subpackage instead of ./subpackage.\nOr do you always work outside of  $GOPATH (which AFAIK is the only place local imports work properly ... but I could be wrong)?\nAlso, AFAIK, relative import paths are discouraged.\n. @steenzout What project?\n. It needs to be in your path, just like go does for this to work.\n. This is maybe something we should report on when working on #273, but generally I agree. Closing.\n. @shutej it's primarily for other systems to know which version of go to select to build the code.\nUltimately godep will not be involved in building code. My plan is to deprecate godep go ... after Go 1.6 and remove it around Go 1.7. Once Go 1.6 is released people should switch to using vendor/ (this is possible now, but requires an ENV variable), which is supported by the go tool directly.\n. @neurogeek you may be interested in this one?\n. @neurogeek What are the use cases for an omit flag? My intent is not challenging it, I'm asking to clarify your reasoning.\n. @neurogeek I'd rather not add -omit if we can help it.\n@dsymonds Does this mean that users should import \"google.golang.org/appengine\" instead of import \"appengine\" and apply any updates necessary?\n. @dsymonds @ronoaldo For reference that README is here right? https://github.com/golang/appengine\n. Awesome. I'm going to close this issue out again then as I think it documents what people should do.\n. IMO these things are outside the scope of godep. You can't import a main package anymore starting with Go 1.5. If you vendor the code and have the go tools around you can still install it. So I'm going to close this. Thanks!\n. We have a bunch of other verbose output these days. If your are still interested in discussing something like this please re-open with an updated PR.\n. #108 is merged, so closing.\n. I rebased this on top of master and fixed a problem with the diff command.\n@kr @neurogeek I'm tempted to merge this at least because it stops common issues: (a) where people are working in a repo that isn't in version control (yet) and (b) the go code that you want to vendor deps for is a subdirectory of the VCS project.\nThis would close #107, #108, #173 (And maybe #43 and #48).\nPlease review/comment.\n. AFAIK godep save -r works with packages that also use godep as the dependent packages dependencies also get rewritten. godep does not use the deps from the dependency directly though and imports them from your local $GOPATH, which leads to different versions of the deps. So :-(\nAlso if your deps are rewriting and you are not it doesn't work. Probably vice versa as well. And I shudder to think about the case where one dep is and another isn't.\n. Closing in favor of #273 \n. @abhat Don't modify the GOPATH like that. Wrap the go commands with godep: e.g. godep go install ...\n. I'm going to close this as we now indicate which repo isn't using a VCS.\n. @abhat I really wish Kubernetes rewrote their deps so the restore and a few of their other dev bits wouldn't be necessary.\n. @themihai godep version ?\n. @least-olegs godep requires the commit sha / tag of the version of the code that it is copying. Without that info there is no way for godep to help you manage your dependencies.\n. @themihai godep version\n. @least-olegs godep does analyze all of your source code to determine which deps are in use and then copies those deps from $GOPATH into vendor/ (or, for older versions of Go, Godeps/_workspace/src). \n. @themihai that is a super old version, so am not surprised you are having issues.\n. @binary132 I'm not sure how you are using godeps then? It's really meant to be run at the top level of a repo. Maybe I should enforce that? Or will need to make tests to exercise other use cases.\n. That's a very unusual workspace (https://golang.org/doc/code.html#Workspaces). If you are going to check a $GOPATH entry in, why not just git subtree your deps into your tree instead?\n. @jnfeinstein Please rebase against master and I'll take a look.\n. Thanks @jnfeinstein. At this point I think we need to have the new exported method documented and a test case.\n. @kr That probably makes the most sense in most circumstances.\nalthough I do wonder if there is a case where the developer doesn't support building everything with a dep that uses a different build tag then the one they designed for.\n. That is correct, but since it's vendoring everything regardless of // +build it could include something the developer didn't intent to include/support, which could then be triggered with a -tag by the builder.\nNot sure if it matters though.\n. @jsha would it work for you guys if godep just included all the deps, ignoring // +build tags? Thereby punting the tagging off to those building the code later?\nIMO this is the best solution.\n. Great I am going to close this then in favor of: #271\n. Closing as it's been there for a while. \n. +1, although I would expand the go get statement to include all go * tasks (e.g. go test).\n. Thanks! Merging.\n. Project maybe no longer uses godep, so closing because I can't repro.\n. vendor/ provides some of this as you can have multiple vendor folders at different levels. I'm not yet sure we should support that and instead only make a top level vendor/ folder with everything flattened down into it with a way smarter system for package resolution.\n. Thanks, but I think the way we're going to approach this by vendoring everything regardless of build tags.\n. @kr what do you think about this? I'm tempted to merge this, but I'm not sure you would agree. You've previously stated that a -v option (across all commands I believe) would be nice.\n. @Soulou Are you interested in fixing this up? If not I will likely start on the feedback from @kr.\n. @Soulou Maybe need another tweak of the rewrite output?\nSome things I think would make it clearer:\n1) rewrite:\\t...\n2) Use relative file paths instead of full paths\n3) maybe don't bother with the new rewritten path? We basically know what it will be and I'm mostly interested in knowing a rewrite happened, not all the details.\n4) There is inconsistent quoting in package names (original is quoted, rewritten isn't).\n. re: #3 that would make -r=false less clear though. Hmm. \nAnother option would be to say \"unrewrite\" or \"undo rewrite\" then the relative path and the original package name.\nBasically I'm just trying to make that output a little more visually parseable. \n. @Soulou Any thoughts on the most recent feedback?\n. I also added a -v flag, but atm it only outputs skipped files, so please rebase.\n. I'm going to close this out for now. Please feel free to re-open with an updated, rebased PR. Thanks!\n. Thanks, but while this is supported by go it's actively discouraged and we won't support this.\n. @mariokostelac Can you rebase this and I'll check it out?\n. #152 is similar(ish) and merged. If you want to re-open a PR with cleaned up (or additional) output that would be great, but I'm going to close this for now.\n. @kr Yeah. I did. I think I meant to reference both #152 and #243, but got distracted part of the way through. Thanks\n. godep relies on the go tool and by extension things being compatible with a $GOPATH workspace layout.\n. Closing in favor of #86, which I believe is the same thing.\n. I don't understand the use case for selecting dependencies manually. The goal of godeps is to make builds repeatable by vendoring all dependencies. This seems to contradict this goal. \nSince this has been here a while I'm going to close this. Feel free to re-open with comments / mergable update if you still want to pursue this.\nThanks!\n. This is why I suggest that we change the behavior to just skip parsing of testdata directories and copy them as is.\n. @neurogeek Awesome. Thanks!\n. get is a holdover from when godep didn't save the files. You generally don't need to use it.\n. Closing in favor of #86 as well.\n. Already done in 3d123490b0a248b2dea64deee887504a63295717 so closing. Thanks!\n. @edsrzf Can you please rebase this and I'll take a look more?\n. @edsrzf Thanks I changed a little and merged it. Also added a -v flag to go so you can see what's skipped if you want to.\n. Thanks. I rebased and merged this via fc2e546d696e649f7309cce1a644a1057d3710d5\n. Closing in favor of #79 \n. Well this is a godep bug as godep should be smarter. ;-) This is basically a problem where godep uses go list and that tool will filter out files that don't match the current OS (like *_linux.go files on OSX) or build tags.\n. @Raffo What version of godep are you using (godep version)? This is actually fixed in current versions as godep is no longer using go list. PS: This may be why a new save is fixed things for you.\nClosing because the reported problem is fixed. \n. @tsuna look at list.go, the main driver being listPackage().\n. I think I've effectively closed this with ba35b97d0db08d8d57599079d99b65add0282b4e.\nPlease let me know (new PR / Issue) if we should do anything more.\nThanks!\n. This should now be fixed by #231.\n. What version of godep are you using? At this point godep no longer uses go list to resolve any dependencies and processes files/deps for all files except those that include the appengine or ignore build tags.\n. Great! Thanks. Closing. For anyone else on this ticket please re-open / post a follow up if, after updating, things aren't working for you.\n. @jzelinskie If so please file that as a separate issue unless someone else has already done so. ;-) \n. @brandur what project / revision was this on ?\n. @brandur Ahh yes, that makes sense. I'm going to close this as a dupe of #138 then.\n. godep save -r ./..., then you don't need godep exec\n. I don't think we're going to be adding an exec command in light of using rewriting now and the upcoming -vendor option to the go tooling. With either of those you should just be able to use the go toolchain normally and use godep \"just\" for managing dependencies.\nI'm not sure if @kr agrees with me or not however.\n. @tarrant Thanks for the PR, but I'm going to close this out, please consider using rewriting for now until go1.5's -vendor option becomes available.\n. @conslo Read down to the bottom: https://groups.google.com/forum/#!msg/golang-dev/74zjMON9glU/4lWCRDCRZg0J\n. @mpuncel How would godep restore work if different packages in the same repo are recorded at different versions? Which is the right version of the repository to restore to? That goes away when we can get rid of godep restore, which won't be until after Go 1.6 though.\n. @mpuncel agreed.\n. What is the use case here? Why would I want to vendor a \"package\" that I don't use in code?\n. I'm going to close this as I can't reproduce it. If this is still an issue please re-open with steps to reproduce.\n. Thank, but ...\nI don't think godep should be messing around with GIT_* environment variables. For instance this would mess with my own setup in a negative way as I rely on GIT_AUTHOR_EMAIL & GIT_AUTHOR_NAME at times. If you are using godep inside of a git hook you should unset GIT_DIR/GIT_INDEX_FILE before calling godep.\nFWIW: I'd be happy to re-visit this if a different solution is presented. \n. @ErikDubbelboer Those env vars are not being used inside of godep, but I am using them in my environment. Thanks for contributing.\n. Why not just rewrite the vendored deps and then there is no need for godep, except when managing deps?\n. After Go 1.6 godep path and rewritting is going to go away and we won't be adding a godep exec.\nGodep can't vendor gox, you should install it and use it as necessary.\n. We're supporting the go 1.5 vendor experiment, so I'm closing this.\nThanks!\n. #108 is merged, so closing.\n. Closing. See #161 \n. Thanks, but In #103 it was decided that people should upgrade their apps to the current appending libraries which aren't so strange AFAICT.\n. You could do this with the linker now, it would just be a bunch of convoluted uses of -X.\nA convention like this is better off made as a https://github.com/golang/proposal though.\n. Please PR if you are still interested in this. I think it's becoming increasingly important.\n. This should now be fixed by #231.\n. How about fmt.Errorf(\"error inspecting %q: %v\", dir, err) ?\n. This shouldn't happen now so closing. If it's still happening please re-open.\n. This was fixed in https://github.com/tools/godep/commit/6a67fc143981c5d893576c3fbeb964a3745d7b12\nThanks for taking the time to submit this.\n. We're supporting the go 1.5 vendor experiment so I'm closing this. Thanks!\n. I think I am running into this issue in an internal repo...\nbroker/io.go:8:2: code in directory /Users/emuller/go/src/github.com/heroku/busl/Godeps/_workspace/src/github.com/garyburd/redigo/redis expects import \"github.com/garyburd/redigo/redis\"\nWhen I look into the files there I see things like this...\nhttps://github.com/garyburd/redigo/blob/master/redis/conn_test.go#L27, which aren't rewritten, althought L28 is.\n. Hmm. Maybe this wasn't related to this problem as I've managed to resolve it with some updates.\n. @charleswli update requires you to specify a specific package. AFAIK ./... doesn't work with update.\n. The reported issue works for me. I made a test lib with a single function and used gomega to test it and ran godeps save and here's what it generated...\nconsole\n$ cat Godeps/Godeps.json\n{\n    \"ImportPath\": \"github.com/freeformz/t185\",\n    \"GoVersion\": \"go1.5\",\n    \"Packages\": [\n        \"./...\"\n    ],\n    \"Deps\": [\n        {\n            \"ImportPath\": \"github.com/onsi/ginkgo\",\n            \"Comment\": \"v1.2.0-6-gd981d36\",\n            \"Rev\": \"d981d36e9884231afa909627b9c275e4ba678f90\"\n        },\n        {\n            \"ImportPath\": \"github.com/onsi/gomega\",\n            \"Comment\": \"v1.0-28-g8adf9e1\",\n            \"Rev\": \"8adf9e1730c55cdc590de7d49766cb2acc88d8f2\"\n        }\n    ]\n}\n@jayunit100 What issue are you running into? \n. Great. Closing this issue as it appears to be solved.\n. This should now be fixed in v37. Please re-open if not. Thanks!\n. @neurogeek I would rather say that testdata files should just be copied over as is w/o attempting to parse. This is especially true as we move to the use of vendor/ and some of the discussions I've seen crop up around testing vendored code.\n. The stance of the go team/tooling is \"don't use symlinks\". Godep ends up utilizing that go tools / libs underneath and I'm of the opinion that supporting this will cause more issues than it solves.\nSo thank you for spending time on this issue, but I'm not going to accept this patch atm.\n. Does godep save -r=false not accomplish this?\n. @gfrey I'm not sure what you mean by \"given package\".\n. So you don't really want to unrewrite the import you want to remove it? If you remove all of the import statements imports a dependency and re-run godep save -r any no longer used imports will be removed from the workspace. The arguments to godep save aren't the packages that you want to vendor, they are the package spec(s) that you want to analyze for vendoring.\n. @gfrey that would confuse the meaning of the package spec passed to godep save, which is the packages you want to analyze dependencies for, usually '.' (the default), './...', or './cmd/...'. To be honest rewrites are going away as we approach Go 1.6 and the use of the vendor/ directory, so I'm tempted to close as won't fix with the expectation being that you would use the vendor directory directly w/o rewrites anyway. At that time a godep rm command (which doesn't exist) would solve your problem (or just rm stuff manually from vendor/). ATM godep save -r=false <your local package spec> will un-rewrite everything so you can still do what you want, it will just take a few extra commands before or after. \nDoes that make sense?\n. hg is one of the supported vcs systems. I don't use mercurial much so if there is a specific problem please re-open describing that. Thanks!\n. It looks like \"/home/geovani/Code/foo\" is outside of your GOPATH. godep really only works with packages inside of a GOPATH.\n. I don't think godep will (or should) support this.\nYou could rsync the package from one machine to another.\nOr use github (or other git hosting service).\n. Upgrade your go version as per @akavel.\nIf this still persists and you are also on the most recent version of godep (go get -u github.com/tools/godep) please re-open this issue.\n. I use gox to cross compile several projects that are under godep. \nThese tools run the go command you need to rewrite your dependencies (godep save -r ./...), then you  will no longer need to do godep go .... and will only need to use godep when adding new files to your application or managing dependencies.\n. @neurogeek +1 on your suggestions.\nAlthough I am personally wary of adding this. If you don't rewrite the files, you'll end up picking up the same dep from elsewhere. AFAIK if you could get 2 copies of the dependencies initialized. I think this will add confusion overall.\n. @activars \nCan't you use a directory structure like so:\n./cmd/cmd-b-name/main.go\n./cmd/cmd-b-name/main.go\n./common_package.go\nThe above is installable with go install ./... or via go get github.com/activars/mypackage/... (at least with rewrites).\nIf you can't can you please expand on your explanation as to why, perhaps with an example?\n. Also, the stance of the go team/tooling is \"don't use symlinks\". Godep ends up utilizing that go tools / libs underneath and I'm of the opinion that supporting this will cause more issues than it solves. This is one example of them.\nSo thank you for spending time on this issue, but I'm not going to accept this patch atm.\n. I suspect this was a bug that was fixed a few months ago as I can't duplicate and I remember we had a bug that sounded like this.\nAlso, as @kr points out rewrites aren't necessary with Go 1.5 + the vendor/ experiment. So closing. \nPlease re-open if this is still an issue.\n. ATM you need to manually prune out the olds locations and then godep save the new deps. You may be able to get away with doing a godep restore, blowing away $project/Godeps, updating the deps in your code and doing a new godep save. Or at least that's what I would try first.\n. godep does not upload or download source files, it manages package locally vendored copies from those installed into your $GOPATH.\nTry ..\n``` term\n$ go get -u gopkg.in/alecthomas/kingpin.v2\n$ cd $GOPATH/src/\nensure that you are importing \"gopkg.in/alecthomas/kingpin.v2\" in one of your files\n$ godep save -r ./...\n```\n. I cannot duplicate this with go from source as of today + current version of godep from source. Please re-open with a reproducible test case if this is still an issue.\nThanks!\n. If you are \"forking\" a repo for temporary fixes / updates and plan on merging things up stream I suggest just adding the fork as a remote to the original package.\nIf you are not then you want to change all/any of the package paths anyway as you're effectively working on a different package.\n. @gelraen Why does it require a makefile?\n1. I am using package X (which is also a github repo) in my project Y. The package I am using is vendored in the Godep workspace (or vendor/) of my project.\n2. I find a bug in package X, so I fork it on github.\n3. I cd $GOPATH/src/ and git remote add freeformz https://github.com/freeformz/X.git\n4. I create a branch, fix the bug, commit,git push freeformz bug_fix_branch.\n5. I go to gituhb and open a PR against X with my fixes.\n6. I go to project Y on the filesystem ($GOPATH/src/github.com/freeformz/Y) andgodep update X, which vendors what I currently have for X in my $GOPATH. I commit those vendored changes and push them to my public (or private) repo.\n7. Other's pull my code, with the vendored bits and use the vendored versions because they are in my repo and I'm using either a) rewriting; b) the GO15VENDOREXPERIMENT or; c)godep go install ./...` (my recommended order btw).\nNow eventually the upstream either merges my changes or I do in fact need to fork the project and maintain something else.\nIf they merge my changes I can checkout master on project X in my $GOPATH and godep update X in project Y, commit and push.\n. FWIW: This works fine for me unless the checked out version of gopkg.in\\flosch\\pongo2.v3 had uncommitted changes in it, hence the \"dirty working tree\" error. \n. If anything the _workspace folder and restore are going away with the advent of the vendor/ directory. You can't make reproducible builds if the code is not vendored, and that is the point of godep, so unfortunately -1.\nAFAIK: godep restore is there as a relic of the past. If I can make it go away (and I haven't spent the requisite time yet) it will.\n. If you update the paths in your code / Godeps.json file it should just work if the commits are the same. If not I would suggest the following:\n1. Checkout the new package (go get it).\n2. Update your code to use the new package.\n3. Remove the old package from Godeps/Godeps.json\n4. run godep save.\n. Maybe (and I'm not convinced this is the right thing to do) we could check to see if we have the commit in the repo first and only try to fetch if we don't have the repo and/or commit?\nOtherwise I'm not sure there is anything sensible to do here except bail out so the error can be corrected.\n. If we did this and the developer doing godep restore didn't have the repo locally in their $GOPATH we'd still have to fetch it anyway and bail out.\nWith that said fetching things we don't have is probably a fairly sane thing to do but could greatly complicate things.\nHonestly I think failing fast is still probably the best thing here.\nWhat do others think?\n. @lavalamp Doh!. Well my assertions still apply AFAICT.\n@tsuna What would be reasonable for godep to do?\n. I don't understand this use case though. \nGodep's goal is to vendor code for reproducible builds.\n. WRT Go: If you push me your repo or I check it out on a random machine, I need all the code in that repo to build the code. W/o all the necessary code I can't build the app.\n. @kr Thanks I was just about to attempt to write more or less the same thing. Thanks for being so eloquent as always.\n. @tsuna I'll have to think about it more. \n. As of 9570f62c8b83f643855711292495c37ebd2ceffc, godep uses the vcs list command, so that should close this. If I'm not understanding things right please re-open.\n. See comments on https://github.com/tools/godep/pull/214 for a workaround.\n. A workaround for this would be to checkout the github golang tools git repo to $GOPATH/src/golang/x/tools. After that you can use import \"golang.org/x/tools...\" and  godep save -r ./... as needed.\n. @kr Yes, perhaps we should.\n. I don't know if this is a good idea. What's the use case?\n. Wouldn't you want Godep to vendor the directory though?\n. @dprotaso any updates?\n. I'm going to close this out for now since there haven't been updates in a while. Please feel free to re-open / start new PR if you still think this feature is valuable.\n. confirmed.\n. Looking at rewrite.go (for the first time, so grain salt) this may actually be a bug in either go/parser or go/printer (or maybe go/ast).\n. FWIW: When the comment is removed things work correctly.\n. Comment text is preserved when the file is parsed. Comment.Text() for that Import returns the text found in the file.\n. Closing this as we merged the PR to fix it.\n. Thanks!\nMerged in 8063f550a728b76d3a1a828e45d482f7dbde61e7\n. @jeeyoungk what happens to the extra intermediate file?\n. @jeeyoungk you can just pass in the buffer itself as it also takes an io.Reader, which bytes.Buffer is.\n. LGTM. I tested this on a few random projects and it also fixes the bug originally reported.\n. Closing as @jeeyoungk updated his PR with basically the same thing.\n. I would also add a -r to that as well so that the dependencies get rewritten. This will allow you to not have to use godep unless you are modifying dependencies (i.e. you can just use go test and the like naked and the app is then go get 'able). Assuming it's an app and not a library.\n. @kr what are your thoughts on storing the -r flag (or detecting it) and picking up the package spec from an existing Godeps.json file if none is provided? \n. SGTM. I'm going to close this then as it's unlikely something that we'll do.\n. You likely need to re-vendor under the new paths?\n. You can't import another package's main package.\n. hunh. My bad. I thought you couldn't and never checked that assumption out.\n. @thockin Can you re-produce on a public repo that I can test with / base a test on?\n. I assume this happened on a godep restore?\nTBH: I'm more interested in how you got into that situation in the first case, which is what I'd like a reproducer for.\n. @thockin @kr agreed. \n. For each of the deps that aren't found, run go get -u <dep> to make sure you have them installed locally and then you will be able to run godep save.\nTBH though I'm not 100% sure that the side effects of using etcd like this.\n. @kr Should we instead resolve these dependencies to the versions vendored in the sub project?\nFor instance github.com/coreos/etcd/raft imports github.com/coreos/etcd/Godeps/_workspace/src/golang.org/x/net/context. ATM you have to have golang.org/x/net/context in your $GOPATH to be able to run godep save.\n. It worked for me: https://github.com/fsouza/go-dockerclient/pull/341\n. @apriendeau Do you have an example repo and steps to reproduce?\n. @apriendeau Sorry, I am lost. I am not sure what your starting point is above. \nCan you provide a step by step repro from a clean $GOPATH?\n. @timothysc Can you provide more information about what problem you are experiencing and/or put together a publicly accessible reproduction?\n. ATM, if you are vendoring etcd and it uses Godep to vendor net/context and you want to use the version of net/context that etcd vendors then you need to import it as:\nyour.package/Godeps/_workspace/src/github.com/coreos/etcd/Godeps/_workspace/src/golang.org/x/net/context\nGiven the go vendor experiment becoming the standard in 1.6 I'm not sure it's worth putting much effort behind godep save being able to handle this case.\nThoughts?\n. FWIW: This is also an issue with any nested vendor directory setup. I opened (or commented anyway) on a similar issue against Go itself. The only real way to handle this is to flatten the deps so there is only one  google.golang.org/grpc package in use. I'd like to teach godep to do this (it already does it for the older workspace format). It needs to be taught how to check both and DTRT. Hopefully later this month unless someone else shows up with PRs.\n. @thockin While it may be nice, I wonder if the possible vectors for confusion would be worth it.\n. See #240. I'm going to close this and urge anyone with input to discuss there. Thanks!\n. I don't think that's something Godep should really be involved in. \nIf you feel different I suggest opening an issue on https://github.com/kardianos/vendor-spec, which will likely be supported in the future.\nThank You!\n. Godep is truncating data, probably because the line being truncated is longer than 64k. If I'm right I may have a fix soon.\n. This should now be fixed by #231, so please go get -u github.com/tools/godep and re-open if this is still a problem (PS: You may need to cleanup your broken workspace first).\n. I do not have that problem at v0.9.0-100-g38b4f07 of influxdb/client. Try an updated version?\n. You need to run go generate inside the workspace. \nTry this...\nbash\ncd <your repo>\nOGOPATH=$GOPATH\nGOPATH=$(godep path)\ncd Godeps/_workspace/src/github.com/btcsuite/btcd/btcec\ngo generate \nGOPATH=$OGOPATH\ncd <root of your repo>\ngodep go install ./...\nYou will have to check the generate code in though, which you may not want to do.\nYour other option would be to wrap the build in a Makefile. This is because go generate is meant to be run before building by design.\n. @kr Gah, you are correct. I fixed it in #231. btcd already ran and saved the go generated bits, which were truncated silently by that bug, but would have been fixed by my example above (AFAICT).\n. @kr Done. If it LGTY, then I'll merge it.\n. Do you have syntastic enabled?\n. FWIW: I removed syntastic from my vim setup and similar issues are now resolved for me.\n. @fatih thanks btw.\n. @kr @neurogeek I've already run into this once with a user having previously installed godep via amd64 on darwin and then updating to a newer go version, but using the 386 package instead and then having issues pushing code.  So unless you have any objections wrt the implementation I'm going to merge this at some point.\n. godep restore modifies stuff in your $GOPATH by cloning repos and attempting to checkout the specified revisions. It's all about messing with your $GOPATH. I generally recommend using rewrites limiting the need for restore to primary developers. With the vendor experiment this becomes even less necessary.\n. LGTM modulo questions.\n. @kr I'm going to merge this so things stop failing as Travis seems to default to ruby.\n. @kr Also my bad. Was kind of trigger happy.\n. @kr yes. Playing with it I just blew away log-shuttle's Godeps directory and didn't migrate anything.\nThe other thing that came up is what to do with vendored deps inside of vendored deps. There are several (many?) libraries that can't safely be vendored inside of vendored deps (lib/pq is one example). \nShould they be extracted to a top level? What if your package and a package you vendor both require the same lib. What if they are different versions? Just error out? \nHow does all of that affect things like  the cmd/CmdName structure where the root of your package is a library (which should or should not vendor stuff), but the library had deps and the cmd uses the library?\nAlso not sure how much of this tools like godep/vendor/nut/etc should care about.\n. @azylman While it allows it will cause problems. For instance if multiple things import multiple lib/pq's database/sql will panic because of multiple registrations in the same namespace (making few assumptions here). That is one example of course, but many things assume they'll be initialized once. That is at least one reason, there are probably more.\n. Closing this in favor of #244 / fe7138c\n. LGTM. Sorry about merging that too fast. I really wanted travis to stop erroring (and emailing me). Merge away.\n. I don't like the output of restore in verbose mode, but it's what get's output by go's tools/vcs stuff. We could clean that up later as I think this is helpful as is, modulo a few changes (which I'm just doing).\n. Thanks! merged\n. @kr Updated with suggestions.\nRe: What more. TBH I think this is enough for now. It's usable for me w/o changes to my workflow (modulo https://github.com/golang/go/issues/11659 anyway).\n. @kr just to be clear I don't think that golang issue should block. Just pointing it out.\n. @kr I also added docs and fixed an issue, so if you could take another look ++.\n. @kr I think I'd rather leave the file where it is. For now at least.\n. @kr Yeah, sorry I got distracted after the merge with other work.\n. @pierrre Not 100%, but essentially yes.\n. Hmm. Godep uses go's own libraries/tools to handle package/file selection, which basically ignores everything that isn't a *.go file. This is unlikely to be a \"trivial\" fix. :-( \n. I am okay with it. Basic implementation would be to do a case insensitive check for common License files (LICENSE, LICENSE.TXT, LICENSE.MD, ??) in the root of a repo and include the file if it exists. @ahmetalpbalkan Feel free to work on it and submit a PR when you are ready.\n. @ahmetalpbalkan Recent changes I made to the vcs file listing commands should play well with this. vcs also now has a way to determine the repo root (since it's given the package path).\n. @client9 A PR for the functionality described in this issue would be great!\n. @client9 Go for it. My focus for the next week or so is elsewhere (other projects) unfortunately. I'm just trying to keep anything godep related (Issues/PRs) moving along until I can get back to working directly on things.\n. Godep isn't really designed for this scenario.\nPersonally, I would do the above differently, like so:\nterm\n$ export GOPATH=~/go\n$ mkdir -p ~/go/src/github.com/freeformz/project-dir\n$ cd ~/go/src/github.com/freeformz/project-dir\n$ mkdir pkg1\n$ mkdir pkg2\n$ .... code .....\n$ godep save -r ./...\n$ go test -v -race ./...\n...\nThe above would make pkg1 and pkg2 available to any other project in my $GOPATH as import github.com/freeformz/project-dir/pkg1 and import github.com/freeformz/project-dir/pkg2, although I would then vendor + rewrite them for use in other projects.\nIf you want to work on \"projects\" in the way you describe then I suggest checking out https://github.com/constabulary/gb\n. Do you have a simple case / repo that we can use to reproduce?\n. @brandur Thanks! Merged.\n. @neurogeek I am not sure, we discussed that @ Gophercon but there wasn't any resolution. Another idea was to use tags and travis to do binary releases to github, but people are still likely to go get godep and we still won't know what version is in use.\nMaybe a merge checklist? Even then you can forget to do it.\n. @neurogeek I'm going to merge this in for now. If we forget to increment the number then at least we know what could possibly be included (last version change and later), where now we don't know.\n. It's updatable like any other go gettable application: go get -u github.com/tools/godep\n. @jacobsa Sorry about that.\n. And I have confirmed the bug with a test app.\n. @jacobsa If you update godep (go get -u github.com/tools/godep) you should be good to go.\n. How do I reproduce this?\n. @sundarv85 rewrite your import paths (the -r option) is the way to work around having to use godep restore for the common cases (you will still need to do this before a godep update though).\n. Works fine for me.\n. Is your godep current (go get -u github.com/tools/godep)?\n. Okay. I was able to duplicate the issue, but I think it's a problem with the github.com/cloudfoundry/sonde-go/events, which won't compile on master (the same commit that is vendored) with the same errors.\n. /cc https://github.com/cloudfoundry/sonde-go\n. Ahh so the problem appears to be with the vendored version of gogo protobufs.\nThis commit updates deps a bit...\nhttps://github.com/shinji62/firehose-to-syslog/compare/feature/update-sonde-go...freeformz:feature/update-sonde-go\nAnd the resulting errors are with the code in the repo.\n. @shinji62 I would try to pull in the linked patch, which updates gogo protobufs, then fix the issues in the code locally.\n. @shinji62 no worries.\n. @JanSichula I'm going to have to setup a windows environment to test.\n. @JanSichula Which version of windows is this?\n. @JanSichula I was able to repo and make a small fix. Was exactly what I thought it was. Thanks!\n. @JanSichula Great. Let me know if you run into other troubles.\n. @kr @neurogeek For your review.\n. @neurogeek Thanks!\n. @kr Crap. Sorry I clicked the merge button. Habits. :-( \n. @windweller I can't reproduce this error. To test I put together 2 sample projects in my $GOPATH like so..\n``` term\n$ echo $GOPATH\n/Users/emuller/go\n$ cd $GOPATH/src\n/Users/emuller/go/src\n$ cat projA/comm/a.go\npackage comm\nconst Variable = \"Hello From projA/comm\"\n$ cat projB/b.go\npackage main\nimport (\n    \"fmt\"\n    \"projA/comm\"\n)\nfunc main() {\n    fmt.Println(comm.Variable)\n}\n$ cd projB\n$ find .\n.\n./b.go\n./Godeps\n./Godeps/_workspace\n./Godeps/_workspace/.gitignore\n./Godeps/_workspace/src\n./Godeps/_workspace/src/projA\n./Godeps/_workspace/src/projA/comm\n./Godeps/_workspace/src/projA/comm/a.go\n./Godeps/Godeps.json\n./Godeps/Readme\n$ godep go run b.go\nHello From projA/comm\n```\nprojA was saved inside of projB with godep save ./... after b.go was written.\nCan you provide steps to reproduce?\n. Oh wait this was about godep restore. I get that same error. But you only ever need to do a restore if you want to reset the copies of a dependency in your GOPATH  to the vendored versions. This is still a bug though as projA/comm is valid AFAIK.\n. So while it's technically possible to do so in Go, atm godep (because of it's use of the go toolings vcs library) only fully supports packages in host/user/pkg format. But ...\nYou do not need to run godep restore if you wrap your go commands with godep. So godep go install ./.... Furthermore if you rewrite your deps (godep save -r ./...) you don't need to use godep on the server at all.\n. The way I would do this is ...\nWhen writing code use godep save -r ./....\nWhen installing code run go install -v ./....\n. @cdeadlock I don't understand the linked repo and what it's trying to do show.\n. BTW: I get this error with the \"graceful\" version even without involving godeps at all:\n[martini] PANIC: Value not found for type martini.Context\n/usr/local/go/src/runtime/panic.go:387 (0x145c8)\n    gopanic: reflectcall(unsafe.Pointer(d.fn), deferArgs(d), uint32(d.siz), uint32(d.siz))\n/Users/emuller/go/src/github.com/go-martini/martini/martini.go:175 (0xaa8a6)\n    (*context).run: panic(err)\n/Users/emuller/go/src/github.com/go-martini/martini/martini.go:164 (0xaa773)\n    (*context).Next: c.run()\n/Users/emuller/go/src/github.com/go-martini/martini/recovery.go:140 (0xafb99)\n    func.004: c.Next()\n/usr/local/go/src/runtime/asm_amd64.s:402 (0x3cb05)\n    call32: CALLFN(\u00b7call32, 32)\n/usr/local/go/src/reflect/value.go:419 (0xd78d5)\n    Value.call: call(fn, args, uint32(frametype.size), uint32(retOffset))\n/usr/local/go/src/reflect/value.go:296 (0xd66cc)\n    Value.Call: return v.call(\"Call\", in)\n/Users/emuller/go/src/github.com/codegangsta/inject/inject.go:102 (0x187b97)\n    (*injector).Invoke: return reflect.ValueOf(f).Call(in), nil\n/Users/emuller/go/src/github.com/go-martini/martini/martini.go:173 (0xaa861)\n    (*context).run: _, err := c.Invoke(c.handler())\n/Users/emuller/go/src/github.com/go-martini/martini/martini.go:164 (0xaa773)\n    (*context).Next: c.run()\n/Users/emuller/go/src/github.com/go-martini/martini/logger.go:25 (0xaf29f)\n    func.001: c.Next()\n/usr/local/go/src/runtime/asm_amd64.s:403 (0x3cb75)\n    call64: CALLFN(\u00b7call64, 64)\n/usr/local/go/src/reflect/value.go:419 (0xd78d5)\n    Value.call: call(fn, args, uint32(frametype.size), uint32(retOffset))\n/usr/local/go/src/reflect/value.go:296 (0xd66cc)\n    Value.Call: return v.call(\"Call\", in)\n/Users/emuller/go/src/github.com/codegangsta/inject/inject.go:102 (0x187b97)\n    (*injector).Invoke: return reflect.ValueOf(f).Call(in), nil\n/Users/emuller/go/src/github.com/go-martini/martini/martini.go:173 (0xaa861)\n    (*context).run: _, err := c.Invoke(c.handler())\n/Users/emuller/go/src/github.com/go-martini/martini/martini.go:69 (0xa95e4)\n    (*Martini).ServeHTTP: m.createContext(res, req).run()\n/usr/local/go/src/net/http/server.go:1703 (0x6e51a)\n    serverHandler.ServeHTTP: handler.ServeHTTP(rw, req)\n/usr/local/go/src/net/http/server.go:1204 (0x6bfe7)\n    (*conn).serve: serverHandler{c.server}.ServeHTTP(w, w.req)\n/usr/local/go/src/runtime/asm_amd64.s:2232 (0x3ebc1)\n    goexit:\n[martini] Completed 500 Internal Server Error in 8.869917ms\n. @cdeadlock The code here works (either version): https://github.com/freeformz/grb\nI updated martini after posting and before saving the deps.\n. @cdeadlock the repo I linked to is my recommended project layout as inspired by https://medium.com/@benbjohnson/structuring-applications-in-go-3b04be4ff091\n. This is why I highly suggest using godep save -r ./... as name spacing compiled stuff can become an issue.\nIf things get to messed up you can nuke your packages directory ($GOPATH/pkg) and it's sub-dirs and go install -v ./... will show you what it's re-compiling.\n. Sorry about that. I'm not really sure how this ever worked. Why not clean this up and use godep to vendor everything?\nAlso can you provide a publicly accessible repository that duplicates the issue?\nPS: What is your $GOPATH set to?\n. So it looks like a mix of git and hg then. FWIW I would use godep to vendor those deps and remove them  from the other locations.\n. Thanks. One more small change and we're good. Thanks!\n. AFAICT this doesn't skip at the right place as per your description. It skips errors in parsing the GoDeps file, not on restore.\n. There are other errors that can occur. Please generalize the message and report the error.\n. Also needs a rebase.\n. I am going to close this since there haven't been any updates in ~ 2 weeks or so. Please feel free to re-open with an updated branch if this feature is still important to you. Thanks!\n. Orly? I use goimports with godep save -r all the time.\n. Interesting to note. I've seen this, but I end up doing a save -r ./... to rewrite files whenever I add a new one so it hasn't bothered me. It probably should though. TBH this won't be needed at some point with vendor/ being a thing (which is incompatible with rewrites).\n. that would be awesome.\n. Yeah. it's sub optimal (save vs. save -r). We could record what was used in Godeps.json, but that will also cause it's own set of problems at times. Plus rewriting should be going away pending the outcome of the 1.5 vendor experiment, so I really haven't had enough incentive to do anything.\n. See my comments. Eyeballing the testdata looks good.\n. @neurogeek I rebased and merged this as aeda8bab6aa7e64e94a83b40e29858daeb85ee87\n. FWIW: I am slowly working through the godep code to understand it's idiosyncrasies better than I do now and with an eye towards this. No promises and if anyone surprised me with a patch that would close this issue I wouldn't complain. ;-) \n. @mattfarina What needs did you feel were not met?\n. @captncraig Yep. I've spent a lot of time going down that same path and before I went on vacation (which I'm back from) I started writing my own version of go/build.Context because of this. It's no where near ready though. ;-) \n. FWIW: I'm acutely aware of this issue every day.\n. What version of godep are you using? What is the output of godep version?\nCan you link to your repo or is it private?\nCan you provide a publicly accessible reproduction (a public repo with a project the shows this issue)?\n. @neurogeek Doh. I blame being up early for the first day of school for not realizing that. ;-)\n. #276 should fix this once I get it reviewed by other maintainers and merged.\n. @neurogeek @kr this is on top of #275.\n. @eparis Doh! I fixed this in v10. Sorry about that.\n. @ahmetalpbalkan I can't duplicate this. I added an import for check.v1 to a main.go file and then used the C struct from there and godep save worked and did the right thing (added the dep to Godeps/Godeps.json and vendored the files in vendor/)\nAre you using check in a test file? I tried that as well (making a main_test) and godep save DTRT as well.\nWhat Go version are you using?\nWhat Godep version are you using?\nWhat is your $GOPATH?\n. Ahh. I was able to repro! Had an idea after posting that.\nI had to delete (remove from my $GOPATH) gopkg.in/yaml.v2. A godep restore solved that.\nMaybe you temporarily had a different $GOPATH set? One without gopkg.in/yaml.v2 in it?\n. well I can duplicate by removing gopkg.in/yaml.v2 from $GOPATH. I think this is a bug in vendor/support because the go tool should be able to find the package in the vendor directory. We're just doing go list -e -json.\n. ahh I forgot that the go tooling internally add vendor to all things in vendor. So it can't find it becuse go list returns \"github.com/freeformz/t/vendor/gopkg.in/yaml.v2\" in my case.\n. So currently godep strips out the vendor part of the path and then passes a constructed list of all flattened paths to go list -e -json, which then can't find gopkg.in/yaml.v2 because in the context of go list in my test app it's really github.com/freeformz/t/vendor/gopkg.in/yaml.v2. This isn't trivial to fix AFAICT, especially when dealing with vendor/ behavior vs. Godeps/_workspace. But probably worth the investment in time.\n. PS: For now the best way to handle new godep save is to do a godep restore before hand, ensuring that your GOPATH contains all of the required dependencies at the right versions before doing the new save.\n. on second thought godep save (which is perhaps now not aptly named) already removes dependencies when they are no longer used by your code base. The main idea behind this is you shouldn't be thinking about adding/removing dependencies by hand, just re-run save and let it DTRT.\n. What revision of github.com/influxdb/influxdb is vendored? What is the \"Rev\" key for it from your Godeps/Godeps.json file?\n. Also, what version of godep are you using?\n. while testing this I get the same thing with a simple go get -u of github.com/influxdb/influxdb (before \nconsole\n$ go get -u github.com/influxdb/influxdb\npackage golang.org/x/crypto/bcrypt: cannot find package \"golang.org/x/crypto/bcrypt\" in any of:\n    /usr/local/go/src/golang.org/x/crypto/bcrypt (from $GOROOT)\n    /Users/emuller/go/src/golang.org/x/crypto/bcrypt (from $GOPATH)\nI ended up having to remove $GOPATH/src/golang.org/x/crypto from my $GOPATH. I suspect that the golang.org/x/crypto package is somehow incomplete and suggest removing it and then either re-fetching or using godep restore.\n. What version of go are you using?\n. What happens if you run golang.org/x/crypto/bcrypt ? What is the output of that?\n. go get ....\n\nOn Sep 24, 2015, at 17:56, Li Yichao notifications@github.com wrote:\nYou mean godep go get golang.org/x/crypto/bcrypt or go get golang.org/x/crypto/bcrypt?\n\u2014\nReply to this email directly or view it on GitHub.\n. Are you in China?\n\nIf so the great firewall blocks golang.org AFAIK and you will need to do the following:\nconsole\n$ mkdir -p $GOPATH/src/golang.org/x\n$ cd $GOPATH/src/golang.org/x\n$ git clone https://go.googlesource.com/crypto\n. Thanks!\n. Sure, care to update this and add a 'v' in front of the version? If you can back track this a little as well that would be good, but not 100% necessary.\n. @buddhamagnet looks great! I squashed them all down to a single commit and merged them. Thanks!\n. Merged! thanks!\n. I think Command belongs in main as it's mostly involved with the setup and execution of the various commands anyway. Good place to keep all the code, at least for now.\n. Thanks!\n. @ncdc sorry for the delay, I was on vacation for a little over a week.\nAFAICT there would also be an issue with resolving dependencies as well and recording the correct one.\nThis would be required anyway though.\nSo LGTM, merged!\n. I pushed a tag and I'll endeavor to do that in the future as well.\n. @kr @neurogeek thoughts?\n. @kr Re: Security. My goal is to just automate the creation of releases when tags are pushed. I don't intend to tackle the other parts of #110 really for all of the reasons you mention. IMO for \"normal\" use cases trusting Travis + GitHub and their certs is probably fine for the 90% of people wanting to curl down a release. I understand that isn't \"secure\" though in any way.\n. +1, merging because this isn't meant to address the security part.\n. :+1: \n@tsuna how about telling the user \"how\" to update first?\n. May also want to indicate the relationship between the two packages. \"packages belong to same repo\" or some such?\n. This should also fix #86 \n. @tsuna thanks. merged.\n. What happens if you go get each of your dependencies? Which one(s) print the same error?\n. I was able to reproduce with a simple test project. :-( Looking.\n. Well godep save -v tells me what's going on:\nconsole\n$ godep save -v\ngodep: save: skipping untracked file: /Users/emuller/go/src/code.google.com/p/go-uuid/uuid/LICENSE\ngodep: save: skipping untracked file: /Users/emuller/go/src/code.google.com/p/go-uuid/uuid/dce.go\ngodep: save: skipping untracked file: /Users/emuller/go/src/code.google.com/p/go-uuid/uuid/doc.go\ngodep: save: skipping untracked file: /Users/emuller/go/src/code.google.com/p/go-uuid/uuid/hash.go\ngodep: save: skipping untracked file: /Users/emuller/go/src/code.google.com/p/go-uuid/uuid/json.go\ngodep: save: skipping test file: /Users/emuller/go/src/code.google.com/p/go-uuid/uuid/json_test.go\ngodep: save: skipping untracked file: /Users/emuller/go/src/code.google.com/p/go-uuid/uuid/node.go\ngodep: save: skipping test file: /Users/emuller/go/src/code.google.com/p/go-uuid/uuid/seq_test.go\ngodep: save: skipping untracked file: /Users/emuller/go/src/code.google.com/p/go-uuid/uuid/time.go\ngodep: save: skipping untracked file: /Users/emuller/go/src/code.google.com/p/go-uuid/uuid/util.go\ngodep: save: skipping untracked file: /Users/emuller/go/src/code.google.com/p/go-uuid/uuid/uuid.go\ngodep: save: skipping test file: /Users/emuller/go/src/code.google.com/p/go-uuid/uuid/uuid_test.go\ngodep: save: skipping untracked file: /Users/emuller/go/src/code.google.com/p/go-uuid/uuid/version1.go\ngodep: save: skipping untracked file: /Users/emuller/go/src/code.google.com/p/go-uuid/uuid/version4.go\nDef a bug.\n. @client9 it would because that uses git. Basically hg had a bug in it when there were sub packages in play. This is now resolved.\n@awsmsrc You should switch to the package @client9 mentions though regardless. \n. go get -u github.com/tools/godep will upgrade your local install of godep.\nYou can now also download binaries as well from https://github.com/tools/godep/releases, but go get -u is easier if you already have a working Go setup.\n. There are no files in contrib, they are in sub packages so you need to do godep get github.com/gin-gonic/contrib/<sub package you want>\n. The output of godep restore -v is sub optimal atm, but you don't need -v to see the error messages, normal godep restore will output any errors (as will -v, you'll just have a bunch of extra output as well).\ngodep restore is what attempts to set the state of your dependencies in your $GOPATH to what they are in your repo. To do this it first downloads (via go get -d) each of the packages in your Godeps/Godeps.json file and then using the proper vcs for each package's repo attempts to checkout the recorded version. \nGiven that explanation, are you having a specific problem with anything?\n. Can you include the copy of the error and your Godeps.json file?\n. Yes so godep tries to 'go get -d' those packages and if it can't you'll get those errors. The go tooling only works off of master atm. So you'll get those errors since those packages don't exist on master anymore. \nWe probably want to switch to using the appropriate vcs to checkout the right repo instead of go get, but that's probably more work than I think it will be.\nthis is also probably a source of a lot of restore issue and frustration.\nThe only way to resolve this atm is manually with something like:\n1. go get -u \n2. Update your code/removing references to no longer supported packages.\n3. Remove the old packages from Godeps/Godeps.json.\n4. godep save to vendor your new imports.\n. It's used in the heroku buildpack to determine what version of go should be used to compile the provided code. I have thought about doing something similar in the heroku buildpack (where '1.4.*' would mean the latest patch revision of 1.4'. Beyond that I consider it an optional field as godep really shouldn't be involved with compiling code in any way in the long term. But also note that godep will update that value if you save and are running a newer version.\n. That would be great!\n. We should. PRs always welcome ;-). I'll see if I can get to it sometime soon.\n. I have been thinking about doing just this thing, so that when GO15VENDOREXPERIMENT=1 is set to have godep get DL directly into the vendor/ directory. It's pretty much what I would expect.\n. I am, but I don't have a timeline atm.\n. This would make the code unbuildable w/o those packages, so I can't accept this.\n. Looks like a good start.\nAny reason why we shouldn't include this as a library though?\nWrt using it ...\ngodep (generally speaking) uses absolute paths to files it finds in the repo. copySrc uses vcs.listFiles()  to get that list and copyPkgFile to conditionally copy the files into the vendor directory.\nSo IMO IsLicenseFile and IsLegalFile should take into consideration that it may get a full (or partial) path to a filename, not just the basename\n. @client9 vcs.listFiles() already produces a list of all possible filenames (with absolute paths) that would be considered for copying. Each of those is passed to copyPkgFile, where filtering takes place (arguably the filtering should be in a separate function) and if not filtered out the file is then copied. Please take a look at those functions as you can probably just hook into copyPkgFile.\n. @client9 After reading your comment I realized that dep.dir could be a sub package as well, which I didn't consider last night, so you'll only be walking through the files in that sub package.\nAnother loop, using the contents of vf, which contains all tracked files in the repo (as absolute paths) is possibly the way to go?\n. @client9 Cool, let me know when I should re-review the PR.\n. @client9 Thanks, merged after a rebase/squash/version/changelog addition.\n. dcbe29c7a18887497b4857e64665d25be43f7c7e\n. What about other vcs?\n. @rasky I'll accept this if we can cover all vcs types. Tests would also be good.\nI also need to think about this a little more. What does it mean if the repo is dirty, with changes elsewhere but the particular package is \"clean\",  I think erroring out is still the sanest path.\n. 2 months w/o movement, so closing for now. Please re-open if you are still interested.\n. What is the vcs root in the above example? I assume it's the parent directory of dirty and help as in the example?\n. @rasky I am trying to understand what's going on here and the motivators. Godep is designed to be run in the top package of a repo. There is nothing in your PR BTW.\n. Sorry, I missed the . in the diff (I thought it was only a space via a quick glance). My bad.\nRe: description.\nAs I said godep is designed to work against the top level package of a repo. You are asking for a fundamental change to the tool.\n. PS: I guess I've already started that fundamental change with previous changes, so I'll have to think about this more.\n. @rasky That's for a dependency, not for the repo you are vendoring into. In your example, let's say golang.org/x/crypto/ssh needed to vendor something, godep save should only be run at the golang.org/x/crypto level.\n. @Alex-Addy You do not need to use godep to build if you a) rewrite your deps or b) are using go1.5+ with the GO15VENDOREXPERIMENT=1. Both of those are recommended over using godep to build.\n. @Alex-Addy godep should only be used from the root package of a repo. If a repo contains multiple packages you should not be running godep save in each package, but in the root package for that repo and use a more inclusive package selector (./..., ./<dira> ./<dirb>, etc).\n. It's because you specified ./... with go test. Which means you are running all of your tests and all tests inside the vendor/ directory. Go test needs to build the code first so you run into this error. In go 1.5+ you can't import main packages (you could previously), so I think it makes sense for us to not vendor them. I won't be able to look into this more until later in the week / early next week, but will do so.\n. When you say 'adjacent' directory, what do you mean. Can you give me an example package directory structure?\n. @aj0strow Can I get your Heroku ticket #?\n. Moving this back to that Heroku ticket for now. Will update either this issue or open a new one pending the outcome there.\n. Turns out that you can also add the package to the godep save command line package spec. BUT, that's unlikely to work with the GO15VENDOREXPERIMENT.\n. Interesting. There used to be a bug like this, but it's been fixed for months. What version of godep are you using (godep version)? Can you produce a public repo that reproduces?\n. I was thinking of issue #231, which was about long lines, not really long files per se, but should be fixed anyway.\n. @client9 Any commits merged to master should include a version bump, a changelog entry and a tag. Since that's a manualish process it hasn't gone as smoothly as I'd like. Improvements to the process that continue to maintain godep's go getableness are appreciated.\n. That already exists https://github.com/tools/godep/blob/58b9be6061a97e574c0695d6f15031f8b01a9629/main.go#L83-L86\n. No, thank you!\n. -t wasn't propagated to update. This should be fixed. If you have time/interested in doing a PR, great. If not I'll probably get to it either later today or tomorrow.\n. Thanks @kr. See #316 \n. how about this instead?\n``` go\nfunc runIn(dir, name string, args ...string) error {\n    c := exec.Command(name, args...)\n    c.Dir = dir\n    output, err := c.CombinedOutput()\nif verbose {\n    fmt.Printf(\"execute: %+v\\n\", c)\n    fmt.Printf(\" output: %s\\n\", output)\n}\n\nreturn err\n\n}\n```\nSeems simpler and maintains intent AFAICT.\n. @jmhodges Thanks, merged as 605fb21360e22cca107bdc4d0c972cbf14353977 (I assume due to a rebase).\n. I'm not sure I follow. Do you mean editing files in <proj>/Godeps/_workspace/src/..? \n. @kr I was around. ;-)\n. Merged as: 0a8bd86405086a8fe6ceb91efc7214ebef864da8, so closing this.\n. Merged as e9ac6d762b492fd3c1fbf50e7c50f8ba64b9c42e\n. I think I'm alright with is as well (which is a change from my initial reaction).  Asking around a little internally as well.\nI would like to land a change to heroku/heroku-buildpack-go to select the latest minor version of the specified major version before merging a PR that implements @kr's suggestion.\n. @jtarchie If this lands before the buildpack changes they will be tied to the major go version until the BP can resolve the latest minor release (assuming they update their Godeps.json file and push). I don't like that behavior.\n. @flavorjones #342 merged as v39.\n. What would restoring from the Godeps workspace mean? We don't vendor the entire repository of packages being used, including the commit history, just the packages being used and the commit hash.\n. @matejkramny it's what is used to build a project and the only way to guarantee that the code is available is to commit it along with our own code.\n. To fully restore the repos that the packages live in to the $GOPATH. If we didn't do that there would be missing packages/tests/etc in your $GOPATH.\nFWIW: My plan is to remove restore sometime after most people appear to be using go1.6+ and using the GO15VENDOREXPERIMENT. So probably around the go1.7 timeframe. I'm hoping other maintainers/users agree with that (TBD).\n. I'm pretty sure I know why. Not sure what to do about it. Need to see if I can make a test case for this as well.\n. I don't think we can rely on go get to DTRT for downloads. The internal package doesn't exist in master anymore, so go getting the package first produces this error.\n. It's probably best if you want to discuss these / work these through to split this PR into two. One for each issue.\nPS: Symlinks inside $GOPATH aren't really supported (ex. https://groups.google.com/d/msg/golang-dev/GLUZGtUSj8A/SGUtCooLIT0J), so I'm curious as to how you are using them and why we would need to resolve them.\n. Thank you!\n. I started looking into this and I think this is really a side effect of a bug in /vendor/ (and possibly Godeps workspace handling or because of it). I'm digging in more.\n. Merged as 5e3d21abab679aef179d5dce308289619a59cf22\nThanks!\n. @sbogacz @michaeltrobinson This may be fixed in master now, can you please confirm.\n. @michaeltrobinson Great. I'm going to close this then. Thanks!\n. FWIW: Godep should support this as it knowns about both styles, old Godeps with and without rewrites and vendor. I hope to fix that issue \"soonish\", but don't know when I'll get to it.\n. Agreed. It's pretty low on my priority list atm, given the other issues related to vendor/ vs. Godeps workspace vs. Godeps workspace with rewrites. If you would like to take a crack at it though that would be great.\n. I don't understand this use case.\nI use and have several multi-command repositories that use godep.\nHere is one of them: https://github.com/heroku/shh\nWhen working with this project we cd into $GOPATH/src/github.com/heroku/shh and run godep save -r ./... and all of the deps for everything are vendored/rewritten.\n. a) godep is meant to be run against the root of a repo containing one or more packages. If you have a structure of ./mylib/cmd/cmdname and run godep save in the cmdname directory mylib will be vendored again in cmdname's Godep workspace. This will likely lead to additional confusion.\nb) A PR that changes a single vcs command will not be accepted unless all vcs commands are updated, or proven to not need the same update. In the past this has led to problems/breakage in other vcs.\nc) The change probably doesn't do what you want as git diff <rev> . still considers sub dirs of .. So if you are running this in a cmd directory it will detect the library as dirty if any of the sub dirs/packages are dirty. Or at least it does with my version of git (2.6.3) / local config. I googled around for a \"fix\", but I don't think there's a simple fix to this w/o filtering things like dirstat output.\n. FWIW: I think the point of isDirty(dir,rev) was to determine if the repo root is dirty, not any given directory in a repo, but I'd have to let @kr chime in.\n. @azylman if that unmodified package pulls in other packages in the same repo that aren dirty and have local changes that you rely on? I guess we'd pick that up as a dependency on bomb out there though. So no, I don't think there's any problem with doing that, code just need to be adjusted properly.\n. FWIW This only works with git, what about the other vcs? Whatever we do we need to be able to support it across all supported vcs implementations.\n. Try unsetting $GIT_DIR maybe?\n. Oh duh on me. That's probably because godep save adds files to the repository, leaving it in a dirty state.\n. godep save will will copy deps to <proj>/Godeps/_workspace/src. At that point the tree is dirty. At the very least least the hook needs to git add -A Godeps after the godep save.\n. Tested this and with a few minor changes to the hook, it works currently.\nThis is the hook I used....\n``` bash\n!/bin/bash\nset -e\nunset GIT_DIR\nunset GIT_INDEX_FILE\n$GOPATH/bin/godep save ./...\nNOGODEPCHANGES=\"$(git ls-files . --exclude-standard --others --modified | grep Godeps | wc -l)\"\nif [ $NOGODEPCHANGES -gt 0 ]; then\n  cat <<\\EOF\nERROR: Some Go dependencies have been updated with godep save\nERROR: Please add them to your commit.\nEOF\n  exit 1\nfi\nexit 0\n``\n. @bojan-embroker I don't understand your problem then as this worked for me.\n. @bbokorney Since you are updating the version, please also update the Changelog and squash down to a single commit. Thanks!\n. Thanks!\n. @shurcooL Thanks, merged as cf33bd75a8243ac701090bb6fa8e0b81b9746fcb\n. Trygodep save -r ./.....is the default.\n. We currently rely on go get, so if it's fixed in go 1.6 (and if we're continuing to rely on get by then) it will be fixed then. Nothing much we can do here aside from re-implementgo get, which we may need to do anyway for other reasons. :-( I'm going to leave open for now though as reminder of issues with go get.\n. What godep version? \n. See https://github.com/tools/godep/pull/362 and https://github.com/kubernetes/kubernetes/pull/18695 (similar, dep was basically missing before).\n. godep save supports saving any package specified in the pkg spec.\nWe are using that internally to vendorgithub.com/zimbatm/socketmasterinto an application. socketmaster is amain` package.\nSo specifying something like godep save -r ./... github.com/zimbatm/socketmaster works as expected. using something like jq the heroku buildpack reads the Packages out of the Godeps/Godeps.json file and installs all of the packages specified there with godep go install $pkgs.\nCould you try something like that instead?\n. PS: I'm also -1 wrt adding another file.\n. @jonboulle the package spec passed to godep save is what feeds godep the list of packages to inspect for 'automagical detection'. I would only list main packages if you want them saved. Arguably godep save w/o any args should default to . or the contents of the Godeps/Godeps.json Packages array, if the file exists. This would probably help a lot and help people DTRT more often. Thoughts?\n. Re Rewrites: it would rewrite and vendor any of the imports the vendored tool imports. But you'de want that wouldn't you? That's the only way to guarantee you can build that tool later.\nre: Godeps.jon: It's already a manifest, and I don't mean manually editable. Yes, it changes the current workflow a bit (but not much). I'm basically saying that every time you do a godep save it reads in Godeps/Godeps.json and if there is a Packages array there it uses those values for the package spec. If there is none, it defaults to .. If you specify a new package spec with a save it uses that one, overwriting the existing one in the file. This is where problems could come up though.\n. Ahh yeah. I missed that. For instance github.com/zimbatm/socketmaster doesn't have any external deps, so no rewrites. You could not use rewrites for now, but either way that's a bug,\n. Hmm. This may break how some people use godep, not sure. The way I'd like godep used is that it would only rewrite packages that are specified via a relative package spec (., ./, ./..., ./cmd/..., etc) and their dependencies. In my mind it should not rewrite other package specs at their original location(s). But I can see how some people may use the fully qualified package spec when doing save (e.g.: godep save github.com/me/thepackageImworkingon). I've also seen people construct oddities in Makefiles to enumerate packages and pass the fully qualified package names to godep (I don't know why they do that though).\nThis would also require some tests, if they don't exist.\n. If you want to take a crack at any of the things we discussed I'd be happy to review. For now I'm going to close this PR though. Thanks!\n. LoadPackages still uses go list. I opened a PR yesterday that removes go list and also solves the missing deps problem: #341, effectively making your -a just the way godeps works (at least AFAICT).\n. FWIW: I've never run into this and use godep almost daily. I'm not against sorting the dependencies though. I would like a repeatable example of when/how this happens and a test for it.\n. @JekaMas Can you provide an example of this workflow?\n. What is the output of echo $GOPATH and pwd when you run these commands?\n. Turns out @imajes's $GOPATH is symlinked out of a Dropbox folder. git rev-parse --show-toplevel shows the symlink resolved path, so none of the Contains() calls finds the file.\n. This may also fix #334.\n. @kr sorry about the noise a bunch of stuff in pkg.go slipped in from another, earlier experiment.\n. Would close #337 \n. @neurogeek After some issue discussion (heroku/heroku-buildpack-go/100 and another I can't find atm) I generally think that we should really only care about the major version of Go and let downstream systems care about selecting the minor version (the user or build systems). There are probably exceptions to that, hence I also stopped auto-updating the go version on save, allowing people to specify whatever they want if they manually want to manage the file. \n. Thanks for taking the time to write this PR. FWIW: I'm -1 another flag. I'm +1 for an implementation that skips rewrites for any package specified that falls outside of the package in the cwd and it's sub packages though. While this may nerf godep for some people I think it's a what most people would expect and the least surprising. \n. It probably needs another rebase. Let me take a quick look and make some code comments too.\n. See comments, also a rebase (sorry). Thanks for adding the positions to the comments. Otherwise LGTM.\n. Small comment about the new type, otherwise LGTM\n. @krnowak Thanks for your patience with the extended review!\n. FWIW: My plan is to really only support \"compilation\" (go get github.com/tools/godep) against the current major version of go and the last major version of go. Currently go1.5.* & go1.4.* basically.\nPS: Once #352 lands this should be fixed.\n. @robdimsdale I updated the readme slightly to reflect the new versions. If you feel that's not sufficient a PR would be great!\nPS: #352 is merged as v34 and should fix this problem. Can you confirm?\n. \"Fixed\" in #352 as we'll also ignore files with the \"ignore\" build tag, at least for now. I think that's the path of least surprise. \n. Thanks for the PR, but I took a different approach in #352.\n. @njohns-grovo Yeah v32 should be okay atm. Sorry about that. I think I was being too optimistic with my use of build.Context. I'll add a test to duplicate this and bang on the new package evaluation code to fix it.\n. What version of go (output of go version) are you using?\n. This is because go/build does not have MultiplePackageError previous to go1.4 (IIRC; didn't check). #350 should fix this as we don't use that error anymore.\n. ps: also using the v33 executable should also work (barring other problems fixed in #352)\n. v34 (#352) should fix this.\n. Thanks for the PR, but I took a different approach in #352.\n. I'm going to let this sit for bit as I want to re-read it after I put it down for a little. Probably also a bunch of cleanups I can do as well.\n. Probably also fixes #345, #346, #347, #351. Need to make sure we have tests to cover those cases though.\n. Fixes #350 (We don't that error anymore).\n. \"Fixes\" #353 \n. We can probably get some (hopefully all?) of that back with a cache of ast files and/or a package cache. I'll PR later today.\n\nOn Dec 8, 2015, at 20:57, Jonathan Boulle notifications@github.com wrote:\nThis change appears to have had a pathological effect on performance in at least one of our repos (coreos/rkt):\n; time /tmp/gopath/bin/godep32 save -r ./...\nreal    0m1.649s\nuser    0m1.383s\nsys 0m0.341s\n ; time /tmp/gopath/bin/godep33 save -r ./...\ngodep: found packages keygen.go (main) and keymap.go (keystoretest) in /tmp/gopath/src/github.com/coreos/rkt/pkg/keystore/keystoretest\nreal    0m1.729s\nuser    0m1.487s\nsys 0m0.240s\n ; time /tmp/gopath/bin/godep34 save -r ./...\nreal    0m41.054s\nuser    0m37.493s\nsys 0m4.088s\n\u2014\nReply to this email directly or view it on GitHub.\n. @jonboulle v34 should fix that. Please open an issue for any problems and I'll see if I can boil it down to a test so we don't solve it and then break it again.\n. @jonboulle v35 introduces package caching and in testing locally, with rkt, godep save -r ./... went from a little less than 60s to a little less than 4s.\n. @jonboulle PS: Please file a bug if something breaks. I am really interested in making sure I can duplicate via a test case. A PR with a failing test is even better. ;-) \n. identity_classic.go is importing \"appengine\". Since this is guarded by a build tag go list -e -json google.golang.org/appengine wouldn't pick it up, so it worked. \n\nWe now parse all files regardless of build tag and \"appengine\" isn't a valid import (except on appengine probably).\nconsole\n$ go list -e -json appengine\n{\n    \"ImportPath\": \"appengine\",\n    \"Stale\": true,\n    \"Incomplete\": true,\n    \"Error\": {\n        \"ImportStack\": [\n            \"appengine\"\n        ],\n        \"Pos\": \"\",\n        \"Err\": \"cannot find package \\\"appengine\\\" in any of:\\n\\t/usr/local/go/src/appengine (from $GOROOT)\\n\\t/Users/emuller/go/src/appengine (from $GOPATH)\"\n    }\n}\n. I'm not 100% sure what to do about this (aside from full build tag support for godeps). I may just special case \"appengine\" for now to unblock anyone hitting this issue and then remove that special case if/when full build tag support materializes. \n. Yes. Sorry. I was so focused on #357 and other stuff this week I haven't kept up on many other PRs. :-( \n. Thanks for taking the time to do the PR.\n. godep save -r ./... github.com/gengo/grpc-gateway/third_party/googleapis/...\nRewrites will work sanely once #343 is merged (likely next week pending rebase / update by author).\nThat should vendor the github.com/gengo/grpc-gateway/third_party/googleapis and all it's sub packages assuming they're not messed up in some way (or a bug).\n. My main performance testing repo https://github.com/coreos/rkt  went from a little less than 60s to a little less than 4s on my laptop.\n. @tevino vendor experiment enabled or not ?\n. @tevino confirmed w/o anyway. Which is strange. Digging now.\n. @peter-edge I'll be looking into this today.\n. @tevino Actually I take that back, not confirmed w/o experiment.\n``` console\n$ export GOPATH=~/go2\n$ mkdir -p ~/go2/src/github.com/freeformz/t358\n$ cd ~/go2/src/github.com/freeformz/t358\n$ cat > main.go <<EOF\npackage main\nimport \"github.com/bitly/go-simplejson\"\nfunc main() {\n    simplejson.New()\n}\nEOF\n$ go get \n$ godep save\n$ find .\n.\n./Godeps\n./Godeps/_workspace\n./Godeps/_workspace/.gitignore\n./Godeps/_workspace/src\n./Godeps/_workspace/src/github.com\n./Godeps/_workspace/src/github.com/bitly\n./Godeps/_workspace/src/github.com/bitly/go-simplejson\n./Godeps/_workspace/src/github.com/bitly/go-simplejson/.travis.yml\n./Godeps/_workspace/src/github.com/bitly/go-simplejson/LICENSE\n./Godeps/_workspace/src/github.com/bitly/go-simplejson/README.md\n./Godeps/_workspace/src/github.com/bitly/go-simplejson/simplejson.go\n./Godeps/_workspace/src/github.com/bitly/go-simplejson/simplejson_go10.go\n./Godeps/_workspace/src/github.com/bitly/go-simplejson/simplejson_go11.go\n./Godeps/Godeps.json\n./Godeps/Readme\n./main.go\n$ cat Godeps/Godeps.json\n{\n    \"ImportPath\": \"github.com/freeformz/t358\",\n    \"GoVersion\": \"go1.5.2\",\n    \"Deps\": [\n        {\n            \"ImportPath\": \"github.com/bitly/go-simplejson\",\n            \"Comment\": \"v0.5.0\",\n            \"Rev\": \"aabad6e819789e569bd6aabf444c935aa9ba1e44\"\n        }\n    ]\n}\n```\n. @tevino confirmed with experiment though.\n``` console\n$ rm -rf ~/go2\n$ mkdir -p ~/go2/src/github.com/freeformz/t358\n$ cd ~/go2/src/github.com/freeformz/t358\n$ cat > main.go <<EOF\npackage main\nimport \"github.com/bitly/go-simplejson\"\nfunc main() {\n    simplejson.New()\n}\nEOF\n$ export GO15VENDOREXPERIMENT=1\n$ go get\n$ godep save\n$ find .\n.\n./Godeps\n./Godeps/Godeps.json\n./Godeps/Readme\n./main.go\n``\n. @peter-edge It was closed because it should be fixed in b34e1d5bdabea644cd12faffd2eadcfad52caea2, which is what closed it.\n. @peter-edge What package are you in when you save?\n. FWIW: Based on the [Makefile](https://github.com/libopenstorage/openstorage/blob/d84dc4ab90841c3d6413d21339b4d6c4fb856d03/Makefile) I don't really understand how you are using godep. You want to keep the Godeps/Godeps.json file around so it's relatively easy to determine what was already vendored (either in the godeps workspace orvendor/)\n. Also, at least until I can do away with the Godep workspace, godep works on the principle that packages be installed in the $GOPATH for save to work. I would do agodep restoreto continue testing, but there is noGodeps/Godeps.jsonfile available for a restore to work and be reliable.\n. @peter-edge I'm going to close this issue again. I'd like to continue discussion your use of godep but there are several issues and AFAICT they don't have anything to do with this one.\n. I realized what the problem is. My understanding of howbuild.FindOnly` works was faulty. So I'm working on a replacement.\n. @eparis GO15VENDOREXPERIMENT=1 ?\n. This is probably because these newer versions are more inclusive wrt what they'll vendor and the same rules are being applied to restore, so it's not finding a package it thinks should be vendored. :-( \nI wonder if doing a go get golang.org/x/sys/unix will take care of it and/or change the errors?\n. For some more clarity we only ignore files tagged with ignore and appengine build tags. Before go list would also filter out any non local platform files. This caused issues in that a lot of development happens on OSX, but deployments happen on Linux. So if your deps required an extra package on Linux, they wouldn't be saved and then your build would likely fail (depending how how you setup your environment TBH and lots of people mistook how godeps works because of this).\n. I'm going to poke at this early this afternoon (Pacific/US) and see if I can provide better guidance / work around / suggestions / patch / etc.\n. This is what I get currently on master with godep v36:\nconsole\n$ mkdir ~/go2\n$ export GOPATH=~/go2\n$ go get -u k8s.io/kubernetes\npackage k8s.io/kubernetes: no buildable Go source files in /Users/emuller/go2/src/k8s.io/kubernetes\n$ cd ~/go2/src/k8s.io/kubernetes\n$ godep restore\ngodep: error downloading dep (github.com/google/cadvisor/api): exit status 1\ngodep: error downloading dep (github.com/google/cadvisor/http): exit status 1\ngodep: error downloading dep (github.com/google/cadvisor/manager): exit status 1\ngodep: error downloading dep (github.com/google/cadvisor/pages): exit status 1\ngodep: error downloading dep (github.com/google/cadvisor/validate): exit status 1\ngodep: error downloading dep (golang.org/x/exp/inotify): exit status 1\nThese restore issues may be related to something else I need to look into. Digging.\n. Not sure. There is also an issue where restore will fail (currently) if the dep package is no longer available in master (that's the issue I was referring to, not sure the number). I'd like to fix that issue this week, but may be unrelated.\n. console\n$ go get -d github.com/google/cadvisor/api\ncontainer/raw/handler.go:38:2: no buildable Go source files in /Users/emuller/go2/src/golang.org/x/exp/inotify\ncadvisor is having issues on master. This is basically the same bug as the one I mentioned.\n. FWIW: the cadvisor issue has nothing to do with godeps per se. Master isn't even buildable for me.\n. @eparis BTW: I wasn't able to reproduce the initial issue (Unable to find dependent package golang.org/x/sys/unix). What OS was that restore run on ?\n. I suspect it was linux. If so you probably want to re-save using v35 to pick up new deps.\n. That's possible. I'll make a linux VM /  AWS instance after lunch and duplicate / etc.\n. Duplicated in a linux docker container:\n``` console\n$ godep restore\ngodep: error restoring dep (github.com/Sirupsen/logrus): Unable to find dependent package golang.org/x/sys/unix in context of /app/user/src/github.com/Sirupsen/logrus\ngodep: error restoring dep (github.com/boltdb/bolt): Unable to find dependent package golang.org/x/sys/unix in context of /app/user/src/github.com/boltdb/bolt\ngodep: error restoring dep (github.com/docker/docker/pkg/jsonmessage): Unable to find dependent package github.com/Azure/go-ansiterm/winterm in context of /app/user/src/github.com/docker/docker/pkg/term\ngodep: error restoring dep (github.com/docker/docker/pkg/term): Unable to find dependent package github.com/Azure/go-ansiterm/winterm in context of /app/user/src/github.com/docker/docker/pkg/term\ngodep: error restoring dep (github.com/docker/libcontainer): Unable to find dependent package golang.org/x/sys/unix in context of /app/user/src/github.com/Sirupsen/logrus\ngodep: error restoring dep (github.com/google/cadvisor/api): Unable to find dependent package github.com/fsouza/go-dockerclient/external/github.com/hashicorp/go-cleanhttp in context of /app/user/src/github.com/fsouza/go-dockerclient\ngodep: error restoring dep (github.com/google/cadvisor/http): Unable to find dependent package github.com/fsouza/go-dockerclient/external/github.com/hashicorp/go-cleanhttp in context of /app/user/src/github.com/fsouza/go-dockerclient\ngodep: error restoring dep (github.com/google/cadvisor/manager): Unable to find dependent package github.com/fsouza/go-dockerclient/external/github.com/hashicorp/go-cleanhttp in context of /app/user/src/github.com/fsouza/go-dockerclient\ngodep: error restoring dep (github.com/google/cadvisor/pages): Unable to find dependent package github.com/fsouza/go-dockerclient/external/github.com/hashicorp/go-cleanhttp in context of /app/user/src/github.com/fsouza/go-dockerclient\ngodep: error restoring dep (github.com/google/cadvisor/validate): Unable to find dependent package github.com/fsouza/go-dockerclient/external/github.com/hashicorp/go-cleanhttp in context of /app/user/src/github.com/fsouza/go-dockerclient\n```\nSome of these are confirmed platform specific transitive dependencies that were missed by older versions of godep.\nIn the case of logrus & bolt they both import golang.org/x/sys/unix on solaris.\ndocker/docker/pkg/term has a windows specific transitive import on github.com/Azure/go-ansiterm\"\nThe github.com/fsouza/go-dockerclient/external/github.com/hashicorp/go-cleanhttp errors are something else, possibly related to an ordering issue in the restore code.\nI'm looking into this and related stuff.\n. @eparis See #362 along with https://github.com/kubernetes/kubernetes/pull/18695\n. @thanodnl Previous to #362 godep loaded the packages before checking out the specified versions. This caused problems, especially with other recent changes (but they were present before anyway, just less pronounced).\n@eparis You guys need golang.org/x/sys/unix because of bolt:\nconsole\n$ godep restore -v  #Using the #362 version of godep.\n...\ngodep: Checking dependency: github.com/boltdb/bolt\ngodep: Dep (github.com/boltdb/bolt) restored, but was unable to load it with error:\n    Unable to find dependent package golang.org/x/sys/unix in context of /Users/emuller/go2/src/github.com/boltdb/bolt\ngodep:  This may be because the dependencies were saved with an older version of godep (< v33).\ngodep:  Try `go get golang.org/x/sys/unix`. Then `godep save` to update deps.\n...\n. @ironcladlou yes. Thanks. Marked as resolved.\n. what is your godep version?\n. FWIW: until v33 godep save ./... would only save deps for the current platform.\n. godep version should work for any version of godep after ~v1 (IIRC).\n. If you are using GO15VENDOREXPERIMENT (and it looks like you are) and running v35 then update to v36 (https://github.com/tools/godep/issues/358)  and let me know if there is still an issue.\nI'm going to start committing GO15VENDOREXPERIMENT related tests tomorrow (hopefully) and if not I'd like to get a reproducable test case for this. \n. :-( I'll see if I can make a small repro tomorrow (although I probably won't get to it until the afternoon).\n. Closing in favor of #358 \n. Thanks! (merged as part of bf180cbe9d2f255d72616470db39c2cae2f77e5d)\n. @ironcladlou This should solve the aws-sdk issue .... but there are some consistency issues with github.com/openshift/origin Godeps.json file. \nSome of them are duplicate shas for the same repo, one for package A another for package B in the same repo:\n- https://github.com/openshift/origin/blob/0d4de0b1801e8c58a28c8bcd9d12b5d0c46de1cb/Godeps/Godeps.json#L744-L753\n- https://github.com/openshift/origin/blob/0d4de0b1801e8c58a28c8bcd9d12b5d0c46de1cb/Godeps/Godeps.json#L876-L895 \nSome appear to be shas from forks of the repos that are not on the canonical master (see #366).\nThere is at least once case where a recorded package is missing (looks to be in a PR) but is also recorded twice with 2 different shas.\n. /cc @eparis This should solve for packages that were removed.\n. @eparis confirmed that this solves the docker/timeutils issues for you as well.\n. https://github.com/docker/docker/pull/18685 for reference\n. @tsaikd What version of godep are you using? and if it's not the latest, is it still an issue with the latest version?\n. AFAICT your Godeps.json file is incomplete?\nIf I make a simple app that uses the appengine package my generated Godeps.json file looks like this:\nconsole\n$ cat Godeps/Godeps.json\n{\n    \"ImportPath\": \"github.com/freeformz/t365\",\n    \"GoVersion\": \"go1.5\",\n    \"Deps\": [\n        {\n            \"ImportPath\": \"github.com/golang/protobuf/proto\",\n            \"Rev\": \"68415e7123da32b07eab49c96d2c4d6158360e9b\"\n        },\n        {\n            \"ImportPath\": \"golang.org/x/net/context\",\n            \"Rev\": \"0ab009005dc16437045369e823a35d1af6232b69\"\n        },\n        {\n            \"ImportPath\": \"google.golang.org/appengine\",\n            \"Rev\": \"54bf9150c922186bfc45a00bf9dfcb91a5063275\"\n        }\n    ]\n}\nAlso: You do not need to do a go get after a godep restore as long as all of your deps are recorded (which godep save does).\n. Go is not node. The google.golang.org/appengine package uses github.com/golang/protobuf/proto and w/o it the code won't build. Godeps is about making builds repeatable. W/o that code vendored there may be times where I can build your code (I've seen npm go down and cause all sorts of problems where users could no longer deploy).\n. @DreadPirateShawn I was able to reproduce this by synthetically checking out the affected package and running restore. Will look more: \nconsole\n$ godep restore -v\n...\ngodep: error restoring dep (github.com/prometheus/client_golang/model): cannot find package \"github.com/prometheus/client_golang/model\" in any of:\n    /usr/local/go/src/github.com/prometheus/client_golang/model (from $GOROOT)\n    /Users/emuller/go2/src/github.com/prometheus/client_golang/model (from $GOPATH)\n. I was wondering if, across all vcs, if it's possible to determine which remote has a given ref. godep save could record the appropriate remote if so in a key.\n. This seems to work okay for me with current godep:\n``` console\n$ mkdir ~/go2\n$ export GOPATH=~/go2\n$ go get -u github.com/go-gomail/gomail\n$ cd ~/go2/src/github.com/go-gomail/gomail\n$ godep save -r -v\ngodep: Unable to find dependent package gopkg.in/alexcesaro/quotedprintable.v3 in context of /Users/emuller/go2/src/github.com/go-gomail/gomail\n$ # This is fine since it's an empty GOPATH\n$ go get gopkg.in/alexcesaro/quotedprintable.v3 # This is the package that mime_go14.go uses\n$ godep save -r -v\ngodep: cannot find package \"gopkg.in/gomail.v2\" in any of:\n    /usr/local/go/src/gopkg.in/gomail.v2 (from $GOROOT)\n    /Users/emuller/go2/src/gopkg.in/gomail.v2 (from $GOPATH)\n$ go get gopkg.in/gomail.v2\n$ godep save -r -v\ngodep: save: skipping test file: /Users/emuller/go2/src/gopkg.in/alexcesaro/quotedprintable.v3/encodedword_test.go\ngodep: save: skipping test file: /Users/emuller/go2/src/gopkg.in/alexcesaro/quotedprintable.v3/reader_test.go\ngodep: save: skipping test file: /Users/emuller/go2/src/gopkg.in/alexcesaro/quotedprintable.v3/writer_test.go\ngodep: save: skipping test file: /Users/emuller/go2/src/gopkg.in/gomail.v2/auth_test.go\ngodep: save: skipping test file: /Users/emuller/go2/src/gopkg.in/gomail.v2/example_test.go\ngodep: save: skipping test file: /Users/emuller/go2/src/gopkg.in/gomail.v2/message_test.go\ngodep: save: skipping test file: /Users/emuller/go2/src/gopkg.in/gomail.v2/send_test.go\ngodep: save: skipping test file: /Users/emuller/go2/src/gopkg.in/gomail.v2/smtp_test.go\n$ git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nChanges not staged for commit:\n  (use \"git add ...\" to update what will be committed)\n  (use \"git checkout -- ...\" to discard changes in working directory)\nmodified:   example_test.go\nmodified:   mime_go14.go\n\nUntracked files:\n  (use \"git add ...\" to include in what will be committed)\nGodeps/\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n$ # Files modified because of rewrites\n$ find Godeps\nGodeps\nGodeps/_workspace\nGodeps/_workspace/.gitignore\nGodeps/_workspace/src\nGodeps/_workspace/src/gopkg.in\nGodeps/_workspace/src/gopkg.in/alexcesaro\nGodeps/_workspace/src/gopkg.in/alexcesaro/quotedprintable.v3\nGodeps/_workspace/src/gopkg.in/alexcesaro/quotedprintable.v3/encodedword.go\nGodeps/_workspace/src/gopkg.in/alexcesaro/quotedprintable.v3/LICENSE\nGodeps/_workspace/src/gopkg.in/alexcesaro/quotedprintable.v3/pool.go\nGodeps/_workspace/src/gopkg.in/alexcesaro/quotedprintable.v3/pool_go12.go\nGodeps/_workspace/src/gopkg.in/alexcesaro/quotedprintable.v3/reader.go\nGodeps/_workspace/src/gopkg.in/alexcesaro/quotedprintable.v3/README.md\nGodeps/_workspace/src/gopkg.in/alexcesaro/quotedprintable.v3/writer.go\nGodeps/_workspace/src/gopkg.in/gomail.v2\nGodeps/_workspace/src/gopkg.in/gomail.v2/.travis.yml\nGodeps/_workspace/src/gopkg.in/gomail.v2/auth.go\nGodeps/_workspace/src/gopkg.in/gomail.v2/CHANGELOG.md\nGodeps/_workspace/src/gopkg.in/gomail.v2/CONTRIBUTING.md\nGodeps/_workspace/src/gopkg.in/gomail.v2/doc.go\nGodeps/_workspace/src/gopkg.in/gomail.v2/LICENSE\nGodeps/_workspace/src/gopkg.in/gomail.v2/message.go\nGodeps/_workspace/src/gopkg.in/gomail.v2/mime.go\nGodeps/_workspace/src/gopkg.in/gomail.v2/mime_go14.go\nGodeps/_workspace/src/gopkg.in/gomail.v2/README.md\nGodeps/_workspace/src/gopkg.in/gomail.v2/send.go\nGodeps/_workspace/src/gopkg.in/gomail.v2/smtp.go\nGodeps/_workspace/src/gopkg.in/gomail.v2/writeto.go\nGodeps/Godeps.json\nGodeps/Readme\n$ cat Godeps/Godeps.json\n{\n    \"ImportPath\": \"github.com/go-gomail/gomail\",\n    \"GoVersion\": \"go1.5\",\n    \"Deps\": [\n        {\n            \"ImportPath\": \"gopkg.in/alexcesaro/quotedprintable.v3\",\n            \"Rev\": \"2caba252f4dc53eaf6b553000885530023f54623\"\n        },\n        {\n            \"ImportPath\": \"gopkg.in/gomail.v2\",\n            \"Comment\": \"2.0.0-8-gfbb71dd\",\n            \"Rev\": \"fbb71ddc63acd07dd0ed49ababdf02c551e2539a\"\n        }\n    ]\n}\n. I plan on changing up the error message a bit to recommend a `godep get <pkg>` and then have the get command properly fetch all transitive deps (right now it can still miss some as it's still using `go get`). As a possible additional step I was thinking of adding a `get` option to save (or just make it the default). For now you can fetch the other deps manually with `go get`.\n. Maybe godep should also handle build tags based on the version specified in Godep.json? That does open up a different set of problems (like additional work on `godep update -goversion`). ATM godep will vendor every dep it finds, regardless of tags (except for `ignore` and `appengine`), this is by design.\n. Not yet, I am thinking that godep should probably use the recorded go version in conjunction with build tags to DTRT and not analyze deps for go versions that differ from what's recorded. The idea being that what's recorded as the go version is the version in use and the one being tested against. But I'm sure some people would disagree with that. There is an argument to be made for either case. For instance see #386 \n. Recent versions of go record the version of go in use and also support go version build tags, so I'm closing this.\n. Can you commit the `Godeps/Godeps.json` file that your are using so that I can investigate?\n. You would have already created a Godeps/Godeps.json file when you originally saved your `vendor/` directory. You would then `godep restore` things into your $GOPATH. FWIW: I realize that this usage with `vendor/` is less than optimal, but I can't change it too much w/o breaking the non `vendor/` way ATM.\n. let me see if I can repro after manually installing all the deps.\n. Heh. I see there is a makefile target for that. \n. console\n$ mkdir ~/go2\n$ export GOPATH=~/go2\n$ go get -d github.com/libopenstorage/openstorage\npackage github.com/libopenstorage/openstorage: no buildable Go source files in /Users/emuller/go2/src/github.com/libopenstorage/openstorage\n$ cd ~/go2/src/github.com/libopenstorage/openstorage\n$ make update-test-deps\n$ make update-test-deps\nGO15VENDOREXPERIMENT=0 go get -d -v -t -u -f github.com/libopenstorage/openstorage/api github.com/libopenstorage/openstorage/api/client github.com/libopenstorage/openstorage/api/server github.com/libopenstorage/openstorage/cli github.com/libopenstorage/openstorage/cluster github.com/libopenstorage/openstorage/cmd/osd github.com/libopenstorage/openstorage/config github.com/libopenstorage/openstorage/graph github.com/libopenstorage/openstorage/graph/drivers github.com/libopenstorage/openstorage/graph/drivers/layer0 github.com/libopenstorage/openstorage/graph/drivers/proxy github.com/libopenstorage/openstorage/pkg/chaos github.com/libopenstorage/openstorage/pkg/device github.com/libopenstorage/openstorage/pkg/mount github.com/libopenstorage/openstorage/pkg/seed github.com/libopenstorage/openstorage/pkg/stats github.com/libopenstorage/openstorage/volume github.com/libopenstorage/openstorage/volume/drivers github.com/libopenstorage/openstorage/volume/drivers/aws github.com/libopenstorage/openstorage/volume/drivers/btrfs github.com/libopenstorage/openstorage/volume/drivers/buse github.com/libopenstorage/openstorage/volume/drivers/fuse github.com/libopenstorage/openstorage/volume/drivers/nfs github.com/libopenstorage/openstorage/volume/drivers/pwx github.com/libopenstorage/openstorage/volume/drivers/test github.com/libopenstorage/openstorage/volume/drivers/vfs\ngithub.com/libopenstorage/openstorage (download)\ngithub.com/fsouza/go-dockerclient (download)\ngithub.com/portworx/systemutils (download)\ngithub.com/Sirupsen/logrus (download)\ngithub.com/libopenstorage/gossip (download)\ngithub.com/portworx/kvdb (download)\nFetching https://gopkg.in/yaml.v2?go-get=1\nParsing meta tags from https://gopkg.in/yaml.v2?go-get=1 (status code 200)\nget \"gopkg.in/yaml.v2\": found meta tag main.metaImport{Prefix:\"gopkg.in/yaml.v2\", VCS:\"git\", RepoRoot:\"https://gopkg.in/yaml.v2\"} at https://gopkg.in/yaml.v2?go-get=1\ngopkg.in/yaml.v2 (download)\ngithub.com/docker/docker (download)\nFetching https://golang.org/x/net/context?go-get=1\nParsing meta tags from https://golang.org/x/net/context?go-get=1 (status code 200)\nget \"golang.org/x/net/context\": found meta tag main.metaImport{Prefix:\"golang.org/x/net\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/net\"} at https://golang.org/x/net/context?go-get=1\nget \"golang.org/x/net/context\": verifying non-authoritative meta tag\nFetching https://golang.org/x/net?go-get=1\nParsing meta tags from https://golang.org/x/net?go-get=1 (status code 200)\ngolang.org/x/net (download)\ngithub.com/gorilla/mux (download)\ngithub.com/gorilla/context (download)\ngithub.com/pborman/uuid (download)\ngithub.com/stretchr/testify (download)\ngithub.com/davecgh/go-spew (download)\ngithub.com/pmezard/go-difflib (download)\ngithub.com/codegangsta/cli (download)\npackage github.com/libopenstorage/openstorage/graph/drivers/unionfs: no buildable Go source files in /Users/emuller/go2/src/github.com/libopenstorage/openstorage/graph/drivers/unionfs\ngithub.com/aws/aws-sdk-go (download)\ngithub.com/go-ini/ini (download)\ngithub.com/jmespath/go-jmespath (download)\ngithub.com/hashicorp/consul (download)\ngithub.com/hashicorp/go-cleanhttp (download)\ngithub.com/hashicorp/serf (download)\ngithub.com/coreos/go-etcd (download)\ngithub.com/ugorji/go (download)\nFetching https://bazil.org/fuse?go-get=1\nParsing meta tags from https://bazil.org/fuse?go-get=1 (status code 200)\nget \"bazil.org/fuse\": found meta tag main.metaImport{Prefix:\"bazil.org/fuse\", VCS:\"git\", RepoRoot:\"https://github.com/bazil/fuse\"} at https://bazil.org/fuse?go-get=1\nbazil.org/fuse (download)\nFetching https://bazil.org/fuse/fs?go-get=1\nParsing meta tags from https://bazil.org/fuse/fs?go-get=1 (status code 200)\nget \"bazil.org/fuse/fs\": found meta tag main.metaImport{Prefix:\"bazil.org/fuse\", VCS:\"git\", RepoRoot:\"https://github.com/bazil/fuse\"} at https://bazil.org/fuse/fs?go-get=1\nget \"bazil.org/fuse/fs\": verifying non-authoritative meta tag\nFetching https://bazil.org/fuse?go-get=1\nParsing meta tags from https://bazil.org/fuse?go-get=1 (status code 200)\nmake: *** [update-test-deps] Error 1\n$ godep save github.com/libopenstorage/openstorage/api github.com/libopenstorage/openstorage/api/client github.com/libopenstorage/openstorage/api/server github.com/libopenstorage/openstorage/cli github.com/libopenstorage/openstorage/cluster github.com/libopenstorage/openstorage/cmd/osd github.com/libopenstorage/openstorage/config github.com/libopenstorage/openstorage/graph github.com/libopenstorage/openstorage/graph/drivers github.com/libopenstorage/openstorage/graph/drivers/layer0 github.com/libopenstorage/openstorage/graph/drivers/proxy github.com/libopenstorage/openstorage/pkg/chaos github.com/libopenstorage/openstorage/pkg/device github.com/libopenstorage/openstorage/pkg/mount github.com/libopenstorage/openstorage/pkg/seed github.com/libopenstorage/openstorage/pkg/stats github.com/libopenstorage/openstorage/volume github.com/libopenstorage/openstorage/volume/drivers github.com/libopenstorage/openstorage/volume/drivers/aws github.com/libopenstorage/openstorage/volume/drivers/btrfs github.com/libopenstorage/openstorage/volume/drivers/buse github.com/libopenstorage/openstorage/volume/drivers/fuse github.com/libopenstorage/openstorage/volume/drivers/nfs github.com/libopenstorage/openstorage/volume/drivers/pwx github.com/libopenstorage/openstorage/volume/drivers/test github.com/libopenstorage/openstorage/volume/drivers/vfs\ngodep: cannot find package \"golang.org/x/sys/unix\" in any of:\n    /usr/local/go/src/golang.org/x/sys/unix (from $GOROOT)\n    /Users/emuller/go2/src/golang.org/x/sys/unix (from $GOPATH)\n$ go get -d golang.org/x/sys/unix\n$ godep save github.com/libopenstorage/openstorage/api github.com/libopenstorage/openstorage/api/client github.com/libopenstorage/openstorage/api/server github.com/libopenstorage/openstorage/cli github.com/libopenstorage/openstorage/cluster github.com/libopenstorage/openstorage/cmd/osd github.com/libopenstorage/openstorage/config github.com/libopenstorage/openstorage/graph github.com/libopenstorage/openstorage/graph/drivers github.com/libopenstorage/openstorage/graph/drivers/layer0 github.com/libopenstorage/openstorage/graph/drivers/proxy github.com/libopenstorage/openstorage/pkg/chaos github.com/libopenstorage/openstorage/pkg/device github.com/libopenstorage/openstorage/pkg/mount github.com/libopenstorage/openstorage/pkg/seed github.com/libopenstorage/openstorage/pkg/stats github.com/libopenstorage/openstorage/volume github.com/libopenstorage/openstorage/volume/drivers github.com/libopenstorage/openstorage/volume/drivers/aws github.com/libopenstorage/openstorage/volume/drivers/btrfs github.com/libopenstorage/openstorage/volume/drivers/buse github.com/libopenstorage/openstorage/volume/drivers/fuse github.com/libopenstorage/openstorage/volume/drivers/nfs github.com/libopenstorage/openstorage/volume/drivers/pwx github.com/libopenstorage/openstorage/volume/drivers/test github.com/libopenstorage/openstorage/volume/drivers/vfs\n$ find Godeps\nGodeps\nGodeps/Godeps.json\nGodeps/Readme\n$ cat Godeps/Godeps.json\n{\n    \"ImportPath\": \"github.com/libopenstorage/openstorage\",\n    \"GoVersion\": \"go1.5\",\n    \"Packages\": [\n        \"github.com/libopenstorage/openstorage/api\",\n        \"github.com/libopenstorage/openstorage/api/client\",\n        \"github.com/libopenstorage/openstorage/api/server\",\n        \"github.com/libopenstorage/openstorage/cli\",\n        \"github.com/libopenstorage/openstorage/cluster\",\n        \"github.com/libopenstorage/openstorage/cmd/osd\",\n        \"github.com/libopenstorage/openstorage/config\",\n        \"github.com/libopenstorage/openstorage/graph\",\n        \"github.com/libopenstorage/openstorage/graph/drivers\",\n        \"github.com/libopenstorage/openstorage/graph/drivers/layer0\",\n        \"github.com/libopenstorage/openstorage/graph/drivers/proxy\",\n        \"github.com/libopenstorage/openstorage/pkg/chaos\",\n        \"github.com/libopenstorage/openstorage/pkg/device\",\n        \"github.com/libopenstorage/openstorage/pkg/mount\",\n        \"github.com/libopenstorage/openstorage/pkg/seed\",\n        \"github.com/libopenstorage/openstorage/pkg/stats\",\n        \"github.com/libopenstorage/openstorage/volume\",\n        \"github.com/libopenstorage/openstorage/volume/drivers\",\n        \"github.com/libopenstorage/openstorage/volume/drivers/aws\",\n        \"github.com/libopenstorage/openstorage/volume/drivers/btrfs\",\n        \"github.com/libopenstorage/openstorage/volume/drivers/buse\",\n        \"github.com/libopenstorage/openstorage/volume/drivers/fuse\",\n        \"github.com/libopenstorage/openstorage/volume/drivers/nfs\",\n        \"github.com/libopenstorage/openstorage/volume/drivers/pwx\",\n        \"github.com/libopenstorage/openstorage/volume/drivers/test\",\n        \"github.com/libopenstorage/openstorage/volume/drivers/vfs\"\n    ],\n    \"Deps\": [\n        {\n            \"ImportPath\": \"bazil.org/fuse\",\n            \"Rev\": \"a8bc3b86317dc95ed28fdefcebc1dbce8baa88e9\"\n        },\n        {\n            \"ImportPath\": \"github.com/Sirupsen/logrus\",\n            \"Comment\": \"v0.8.7-53-g446d1c1\",\n            \"Rev\": \"446d1c146faa8ed3f4218f056fcd165f6bcfda81\"\n        },\n        {\n            \"ImportPath\": \"github.com/aws/aws-sdk-go/aws\",\n            \"Comment\": \"v1.0.5\",\n            \"Rev\": \"9e7816464bb6044ae17fff44ce59387d2658e2cb\"\n        },\n        {\n            \"ImportPath\": \"github.com/aws/aws-sdk-go/service/ec2\",\n            \"Comment\": \"v1.0.5\",\n            \"Rev\": \"9e7816464bb6044ae17fff44ce59387d2658e2cb\"\n        },\n        {\n            \"ImportPath\": \"github.com/aws/aws-sdk-go/service/opsworks\",\n            \"Comment\": \"v1.0.5\",\n            \"Rev\": \"9e7816464bb6044ae17fff44ce59387d2658e2cb\"\n        },\n        {\n            \"ImportPath\": \"github.com/codegangsta/cli\",\n            \"Comment\": \"1.2.0-183-gb5232bb\",\n            \"Rev\": \"b5232bb2934f606f9f27a1305f1eea224e8e8b88\"\n        },\n        {\n            \"ImportPath\": \"github.com/davecgh/go-spew/spew\",\n            \"Rev\": \"5215b55f46b2b919f50a1df0eaa5886afe4e3b3d\"\n        },\n        {\n            \"ImportPath\": \"github.com/docker/docker/daemon/graphdriver\",\n            \"Comment\": \"v1.4.1-8593-g905f333\",\n            \"Rev\": \"905f3336b2715b3960b5ff4f860db387797d9adf\"\n        },\n        {\n            \"ImportPath\": \"github.com/docker/docker/pkg/archive\",\n            \"Comment\": \"v1.4.1-8593-g905f333\",\n            \"Rev\": \"905f3336b2715b3960b5ff4f860db387797d9adf\"\n        },\n        {\n            \"ImportPath\": \"github.com/docker/docker/pkg/idtools\",\n            \"Comment\": \"v1.4.1-8593-g905f333\",\n            \"Rev\": \"905f3336b2715b3960b5ff4f860db387797d9adf\"\n        },\n        {\n            \"ImportPath\": \"github.com/docker/docker/pkg/mount\",\n            \"Comment\": \"v1.4.1-8593-g905f333\",\n            \"Rev\": \"905f3336b2715b3960b5ff4f860db387797d9adf\"\n        },\n        {\n            \"ImportPath\": \"github.com/docker/docker/pkg/parsers\",\n            \"Comment\": \"v1.4.1-8593-g905f333\",\n            \"Rev\": \"905f3336b2715b3960b5ff4f860db387797d9adf\"\n        },\n        {\n            \"ImportPath\": \"github.com/docker/docker/pkg/reexec\",\n            \"Comment\": \"v1.4.1-8593-g905f333\",\n            \"Rev\": \"905f3336b2715b3960b5ff4f860db387797d9adf\"\n        },\n        {\n            \"ImportPath\": \"github.com/fsouza/go-dockerclient\",\n            \"Rev\": \"54afc1babbc57f075f958f84904251332bd8fd73\"\n        },\n        {\n            \"ImportPath\": \"github.com/go-ini/ini\",\n            \"Comment\": \"v1.8.5-1-g467243b\",\n            \"Rev\": \"467243bad6cb295e0fe72366da5ba85b069874cb\"\n        },\n        {\n            \"ImportPath\": \"github.com/gorilla/mux\",\n            \"Rev\": \"9c068cf16d982f8bd444b8c352acbeec34c4fe5b\"\n        },\n        {\n            \"ImportPath\": \"github.com/libopenstorage/gossip\",\n            \"Rev\": \"8ef1994e46b7dc4fd407994c735044c0fd39e9de\"\n        },\n        {\n            \"ImportPath\": \"github.com/pborman/uuid\",\n            \"Rev\": \"dee7705ef7b324f27ceb85a121c61f2c2e8ce988\"\n        },\n        {\n            \"ImportPath\": \"github.com/pmezard/go-difflib/difflib\",\n            \"Rev\": \"e8554b8641db39598be7f6342874b958f12ae1d4\"\n        },\n        {\n            \"ImportPath\": \"github.com/portworx/kvdb\",\n            \"Rev\": \"496e86135d7e307722af6649ec640fd385a385c5\"\n        },\n        {\n            \"ImportPath\": \"github.com/portworx/systemutils\",\n            \"Rev\": \"231787edf3530fee4c73695dd8c4090f4af7764e\"\n        },\n        {\n            \"ImportPath\": \"github.com/stretchr/testify/assert\",\n            \"Comment\": \"v1.0-88-ge3a8ff8\",\n            \"Rev\": \"e3a8ff8ce36581f87a15341206f205b1da467059\"\n        },\n        {\n            \"ImportPath\": \"github.com/stretchr/testify/require\",\n            \"Comment\": \"v1.0-88-ge3a8ff8\",\n            \"Rev\": \"e3a8ff8ce36581f87a15341206f205b1da467059\"\n        },\n        {\n            \"ImportPath\": \"golang.org/x/sys/unix\",\n            \"Rev\": \"833a04a10549a95dc34458c195cbad61bbb6cb4d\"\n        },\n        {\n            \"ImportPath\": \"gopkg.in/yaml.v2\",\n            \"Rev\": \"f7716cbe52baa25d2e9b0d0da546fcf909fc16b4\"\n        }\n    ]\n}\n$ git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nChanges not staged for commit:\n  (use \"git add/rm ...\" to update what will be committed)\n  (use \"git checkout -- ...\" to discard changes in working directory)\nmodified:   vendor/bazil.org/fuse/fuse.go\nmodified:   vendor/bazil.org/fuse/fuse_kernel.go\nmodified:   vendor/bazil.org/fuse/mount_darwin.go\nmodified:   vendor/bazil.org/fuse/options.go\nmodified:   vendor/github.com/Sirupsen/logrus/README.md\nmodified:   vendor/github.com/Sirupsen/logrus/hooks/syslog/syslog.go\nmodified:   vendor/github.com/Sirupsen/logrus/logger.go\nmodified:   vendor/github.com/Sirupsen/logrus/terminal_notwindows.go\nmodified:   vendor/github.com/Sirupsen/logrus/terminal_windows.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/awsutil/copy.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/awsutil/path_value.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/config.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/corehandlers/handlers.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/corehandlers/param_validator.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/credentials/chain_provider.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/credentials/credentials.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/credentials/ec2rolecreds/ec2_role_provider.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/credentials/example.ini\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/credentials/shared_credentials_provider.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/credentials/stscreds/assume_role_provider.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/defaults/defaults.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/ec2metadata/api.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/ec2metadata/service.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/errors.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/request/handlers.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/request/request.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/request/retryer.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/service/default_retryer.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/service/service.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/service/serviceinfo/service_info.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/types.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/version.go\nmodified:   vendor/github.com/aws/aws-sdk-go/service/ec2/api.go\nmodified:   vendor/github.com/aws/aws-sdk-go/service/ec2/customizations.go\nmodified:   vendor/github.com/aws/aws-sdk-go/service/ec2/ec2iface/interface.go\nmodified:   vendor/github.com/aws/aws-sdk-go/service/ec2/service.go\nmodified:   vendor/github.com/aws/aws-sdk-go/service/opsworks/api.go\nmodified:   vendor/github.com/aws/aws-sdk-go/service/opsworks/opsworksiface/interface.go\nmodified:   vendor/github.com/aws/aws-sdk-go/service/opsworks/service.go\nmodified:   vendor/github.com/codegangsta/cli/.travis.yml\nmodified:   vendor/github.com/codegangsta/cli/README.md\nmodified:   vendor/github.com/codegangsta/cli/app.go\nmodified:   vendor/github.com/codegangsta/cli/command.go\nmodified:   vendor/github.com/codegangsta/cli/flag.go\nmodified:   vendor/github.com/docker/docker/daemon/graphdriver/aufs/aufs.go\nmodified:   vendor/github.com/docker/docker/daemon/graphdriver/aufs/migrate.go\nmodified:   vendor/github.com/docker/docker/daemon/graphdriver/btrfs/btrfs.go\nmodified:   vendor/github.com/docker/docker/daemon/graphdriver/btrfs/version_none.go\nmodified:   vendor/github.com/docker/docker/daemon/graphdriver/devmapper/deviceset.go\nmodified:   vendor/github.com/docker/docker/daemon/graphdriver/devmapper/devmapper_doc.go\nmodified:   vendor/github.com/docker/docker/daemon/graphdriver/devmapper/driver.go\nmodified:   vendor/github.com/docker/docker/daemon/graphdriver/devmapper/mount.go\nmodified:   vendor/github.com/docker/docker/daemon/graphdriver/driver.go\nmodified:   vendor/github.com/docker/docker/daemon/graphdriver/fsdiff.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/graphtest/graphtest.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/imagerestorer.go\nmodified:   vendor/github.com/docker/docker/daemon/graphdriver/overlay/overlay.go\nmodified:   vendor/github.com/docker/docker/daemon/graphdriver/plugin.go\nmodified:   vendor/github.com/docker/docker/daemon/graphdriver/proxy.go\nmodified:   vendor/github.com/docker/docker/daemon/graphdriver/vfs/driver.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/vfs/driver_unsupported.go\nmodified:   vendor/github.com/docker/docker/daemon/graphdriver/windows/windows.go\nmodified:   vendor/github.com/docker/docker/daemon/graphdriver/zfs/zfs.go\nmodified:   vendor/github.com/docker/docker/pkg/archive/archive.go\nmodified:   vendor/github.com/docker/docker/pkg/archive/archive_unix.go\nmodified:   vendor/github.com/docker/docker/pkg/archive/archive_windows.go\nmodified:   vendor/github.com/docker/docker/pkg/archive/changes.go\nmodified:   vendor/github.com/docker/docker/pkg/archive/copy.go\nmodified:   vendor/github.com/docker/docker/pkg/archive/diff.go\nmodified:   vendor/github.com/docker/docker/pkg/archive/whiteouts.go\nmodified:   vendor/github.com/docker/docker/pkg/mount/flags.go\nmodified:   vendor/github.com/docker/docker/pkg/mount/flags_linux.go\ndeleted:    vendor/github.com/docker/docker/pkg/parsers/filters/parse.go\nmodified:   vendor/github.com/docker/docker/pkg/parsers/operatingsystem/operatingsystem_linux.go\nmodified:   vendor/github.com/docker/docker/pkg/parsers/parsers.go\nmodified:   vendor/github.com/docker/docker/pkg/reexec/reexec.go\nmodified:   vendor/github.com/fsouza/go-dockerclient/.travis.yml\nmodified:   vendor/github.com/fsouza/go-dockerclient/AUTHORS\nmodified:   vendor/github.com/fsouza/go-dockerclient/Makefile\nmodified:   vendor/github.com/fsouza/go-dockerclient/README.markdown\nmodified:   vendor/github.com/fsouza/go-dockerclient/auth.go\nmodified:   vendor/github.com/fsouza/go-dockerclient/client.go\nmodified:   vendor/github.com/fsouza/go-dockerclient/container.go\nmodified:   vendor/github.com/fsouza/go-dockerclient/image.go\nmodified:   vendor/github.com/fsouza/go-dockerclient/network.go\nmodified:   vendor/github.com/fsouza/go-dockerclient/testing/server.go\nmodified:   vendor/github.com/fsouza/go-dockerclient/volume.go\nmodified:   vendor/github.com/gorilla/mux/.travis.yml\nmodified:   vendor/github.com/pborman/uuid/sql.go\nmodified:   vendor/github.com/pmezard/go-difflib/difflib/difflib.go\nmodified:   vendor/github.com/portworx/kvdb/etcd/kv_etcd.go\nmodified:   vendor/github.com/portworx/systemutils/system.go\nmodified:   vendor/github.com/stretchr/testify/assert/assertions.go\nmodified:   vendor/github.com/stretchr/testify/assert/forward_assertions.go\nmodified:   vendor/github.com/stretchr/testify/require/forward_requirements.go\nmodified:   vendor/github.com/stretchr/testify/require/requirements.go\nmodified:   vendor/gopkg.in/yaml.v2/readerc.go\n\nUntracked files:\n  (use \"git add ...\" to include in what will be committed)\nGodeps/\nvendor/github.com/Sirupsen/logrus/terminal_solaris.go\nvendor/github.com/aws/aws-sdk-go/LICENSE.txt\nvendor/github.com/aws/aws-sdk-go/NOTICE.txt\nvendor/github.com/aws/aws-sdk-go/aws/awsutil/equal.go\nvendor/github.com/aws/aws-sdk-go/aws/awsutil/string_value.go\nvendor/github.com/aws/aws-sdk-go/aws/client/\nvendor/github.com/aws/aws-sdk-go/aws/request/request_pagination.go\nvendor/github.com/aws/aws-sdk-go/aws/session/\nvendor/github.com/aws/aws-sdk-go/service/ec2/waiters.go\nvendor/github.com/aws/aws-sdk-go/service/opsworks/waiters.go\nvendor/github.com/davecgh/go-spew/LICENSE\nvendor/github.com/docker/docker/LICENSE\nvendor/github.com/docker/docker/NOTICE\nvendor/github.com/docker/docker/contrib/\nvendor/github.com/docker/docker/daemon/graphdriver/graphtest/graphtest_unix.go\nvendor/github.com/docker/docker/daemon/graphdriver/graphtest/graphtest_windows.go\nvendor/github.com/docker/docker/pkg/symlink/\nvendor/github.com/go-ini/\nvendor/github.com/pmezard/go-difflib/LICENSE\nvendor/github.com/stretchr/testify/LICENSE\nvendor/golang.org/x/sys/\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n. @peter-edge above is what I would basically expect at this point.\n. console\n$ godep version\ngodep v38 (darwin/amd64/go1.5.2)\n``\n. After fixing some imports in my copy of that repo I was able to run a save and yes, something is broken. Looking more.\n. Confirmed, closing in favor of #358\n. Please try with godep v44 and let me know if this is still an issue.\n. The package argument that you pass togodep save` is the package(s) that you want to analyze for vendoring, not the package that you want to save. Put another way it's the packages who's dependencies you want save. Does that help?\n. I can't duplicate this locally:\nconsole\n$ mkdir ~/go2\n$ export GOPATH=~/go2\n$  go get -d github.com/docker/swarm\npackage github.com/docker/docker/pkg/parsers/filters: cannot find package \"github.com/docker/docker/pkg/parsers/filters\" in any of:\n    /usr/local/go/src/github.com/docker/docker/pkg/parsers/filters (from $GOROOT)\n    /Users/emuller/go2/src/github.com/docker/docker/pkg/parsers/filters (from $GOPATH)\npackage github.com/docker/docker/pkg/units: cannot find package \"github.com/docker/docker/pkg/units\" in any of:\n    /usr/local/go/src/github.com/docker/docker/pkg/units (from $GOROOT)\n    /Users/emuller/go2/src/github.com/docker/docker/pkg/units (from $GOPATH)\n$ cd ~/go2/src/github.com/docker/swarm\n$ godep restore -v\ngodep: Downloading dependency (if needed): github.com/Sirupsen/logrus\ngodep: Downloading dependency (if needed): github.com/codegangsta/cli\ngodep: Downloading dependency (if needed): github.com/coreos/etcd/client\ngodep: Downloading dependency (if needed): github.com/coreos/etcd/pkg/pathutil\ngodep: Downloading dependency (if needed): github.com/coreos/etcd/pkg/types\ngodep: Downloading dependency (if needed): github.com/docker/docker/pkg/ioutils\ngodep: Downloading dependency (if needed): github.com/docker/docker/pkg/tlsconfig\ngodep: Downloading dependency (if needed): github.com/docker/docker/pkg/random\ngodep: Downloading dependency (if needed): github.com/docker/docker/pkg/parsers\ngodep: Downloading dependency (if needed): github.com/docker/docker/pkg/stringid\ngodep: Downloading dependency (if needed): github.com/docker/docker/pkg/units\ngodep: Downloading dependency (if needed): github.com/docker/docker/pkg/version\ngodep: Downloading dependency (if needed): github.com/docker/libkv\ngodep: Downloading dependency (if needed): github.com/gogo/protobuf/proto\ngodep: Downloading dependency (if needed): github.com/golang/glog\ngodep: Downloading dependency (if needed): github.com/gorilla/context\ngodep: Downloading dependency (if needed): github.com/gorilla/mux\ngodep: Downloading dependency (if needed): github.com/hashicorp/consul/api\ngodep: Downloading dependency (if needed): github.com/mesos/mesos-go/auth\ngodep: Downloading dependency (if needed): github.com/mesos/mesos-go/detector\ngodep: Downloading dependency (if needed): github.com/mesos/mesos-go/mesosproto\ngodep: Downloading dependency (if needed): github.com/mesos/mesos-go/mesosutil\ngodep: Downloading dependency (if needed): github.com/mesos/mesos-go/messenger\ngodep: Downloading dependency (if needed): github.com/mesos/mesos-go/scheduler\ngodep: Downloading dependency (if needed): github.com/mesos/mesos-go/upid\ngodep: Downloading dependency (if needed): github.com/pborman/uuid\ngodep: Downloading dependency (if needed): github.com/samalba/dockerclient\ngodep: Downloading dependency (if needed): github.com/samuel/go-zookeeper/zk\ngodep: Downloading dependency (if needed): github.com/skarademir/naturalsort\ngodep: Downloading dependency (if needed): github.com/stretchr/objx\ngodep: Downloading dependency (if needed): github.com/stretchr/testify/assert\ngodep: Downloading dependency (if needed): github.com/stretchr/testify/mock\ngodep: Downloading dependency (if needed): github.com/ugorji/go/codec\ngodep: Downloading dependency (if needed): golang.org/x/net/context\ngodep: Restoring dependency (if needed): github.com/Sirupsen/logrus\ngodep: Restoring dependency (if needed): github.com/codegangsta/cli\ngodep: Restoring dependency (if needed): github.com/coreos/etcd/client\ngodep: Restoring dependency (if needed): github.com/coreos/etcd/pkg/pathutil\ngodep: Skipping already restored repo\ngodep: Restoring dependency (if needed): github.com/coreos/etcd/pkg/types\ngodep: Skipping already restored repo\ngodep: Restoring dependency (if needed): github.com/docker/docker/pkg/ioutils\ngodep: Restoring dependency (if needed): github.com/docker/docker/pkg/tlsconfig\ngodep: Skipping already restored repo\ngodep: Restoring dependency (if needed): github.com/docker/docker/pkg/random\ngodep: Skipping already restored repo\ngodep: Restoring dependency (if needed): github.com/docker/docker/pkg/parsers\ngodep: Skipping already restored repo\ngodep: Restoring dependency (if needed): github.com/docker/docker/pkg/stringid\ngodep: Skipping already restored repo\ngodep: Restoring dependency (if needed): github.com/docker/docker/pkg/units\ngodep: Skipping already restored repo\ngodep: Restoring dependency (if needed): github.com/docker/docker/pkg/version\ngodep: Skipping already restored repo\ngodep: Restoring dependency (if needed): github.com/docker/libkv\ngodep: Restoring dependency (if needed): github.com/gogo/protobuf/proto\ngodep: Restoring dependency (if needed): github.com/golang/glog\ngodep: Restoring dependency (if needed): github.com/gorilla/context\ngodep: Restoring dependency (if needed): github.com/gorilla/mux\ngodep: Restoring dependency (if needed): github.com/hashicorp/consul/api\ngodep: Restoring dependency (if needed): github.com/mesos/mesos-go/auth\ngodep: Restoring dependency (if needed): github.com/mesos/mesos-go/detector\ngodep: Skipping already restored repo\ngodep: Restoring dependency (if needed): github.com/mesos/mesos-go/mesosproto\ngodep: Skipping already restored repo\ngodep: Restoring dependency (if needed): github.com/mesos/mesos-go/mesosutil\ngodep: Skipping already restored repo\ngodep: Restoring dependency (if needed): github.com/mesos/mesos-go/messenger\ngodep: Skipping already restored repo\ngodep: Restoring dependency (if needed): github.com/mesos/mesos-go/scheduler\ngodep: Skipping already restored repo\ngodep: Restoring dependency (if needed): github.com/mesos/mesos-go/upid\ngodep: Skipping already restored repo\ngodep: Restoring dependency (if needed): github.com/pborman/uuid\ngodep: Restoring dependency (if needed): github.com/samalba/dockerclient\ngodep: Restoring dependency (if needed): github.com/samuel/go-zookeeper/zk\ngodep: Restoring dependency (if needed): github.com/skarademir/naturalsort\ngodep: Restoring dependency (if needed): github.com/stretchr/objx\ngodep: Restoring dependency (if needed): github.com/stretchr/testify/assert\ngodep: Restoring dependency (if needed): github.com/stretchr/testify/mock\ngodep: Skipping already restored repo\ngodep: Restoring dependency (if needed): github.com/ugorji/go/codec\ngodep: Restoring dependency (if needed): golang.org/x/net/context\ngodep: Checking dependency: github.com/Sirupsen/logrus\ngodep: Checking dependency: github.com/codegangsta/cli\ngodep: Checking dependency: github.com/coreos/etcd/client\ngodep: Checking dependency: github.com/coreos/etcd/pkg/pathutil\ngodep: Checking dependency: github.com/coreos/etcd/pkg/types\ngodep: Checking dependency: github.com/docker/docker/pkg/ioutils\ngodep: Checking dependency: github.com/docker/docker/pkg/tlsconfig\ngodep: Checking dependency: github.com/docker/docker/pkg/random\ngodep: Checking dependency: github.com/docker/docker/pkg/parsers\ngodep: Checking dependency: github.com/docker/docker/pkg/stringid\ngodep: Checking dependency: github.com/docker/docker/pkg/units\ngodep: Checking dependency: github.com/docker/docker/pkg/version\ngodep: Checking dependency: github.com/docker/libkv\ngodep: Checking dependency: github.com/gogo/protobuf/proto\ngodep: Checking dependency: github.com/golang/glog\ngodep: Checking dependency: github.com/gorilla/context\ngodep: Checking dependency: github.com/gorilla/mux\ngodep: Checking dependency: github.com/hashicorp/consul/api\ngodep: Checking dependency: github.com/mesos/mesos-go/auth\ngodep: Checking dependency: github.com/mesos/mesos-go/detector\ngodep: Checking dependency: github.com/mesos/mesos-go/mesosproto\ngodep: Checking dependency: github.com/mesos/mesos-go/mesosutil\ngodep: Checking dependency: github.com/mesos/mesos-go/messenger\ngodep: Checking dependency: github.com/mesos/mesos-go/scheduler\ngodep: Checking dependency: github.com/mesos/mesos-go/upid\ngodep: Checking dependency: github.com/pborman/uuid\ngodep: Checking dependency: github.com/samalba/dockerclient\ngodep: Checking dependency: github.com/samuel/go-zookeeper/zk\ngodep: Checking dependency: github.com/skarademir/naturalsort\ngodep: Checking dependency: github.com/stretchr/objx\ngodep: Checking dependency: github.com/stretchr/testify/assert\ngodep: Checking dependency: github.com/stretchr/testify/mock\ngodep: Checking dependency: github.com/ugorji/go/codec\ngodep: Checking dependency: golang.org/x/net/context\n$ go get -u github.com/samalba/dockerclient\n$ godep update github.com/samalba/dockerclient\nWhat is the output of echo $GOPATH ?\n. @ahmetalpbalkan So it is. (one of these days I'll learn to read)\n. @ahmetalpbalkan I suspect there is a go file an error in it somewhere in one of the packages. The error could be more helpful here.\n. Actually, it's the local Godeps.json file that may be invalid?\n. I was able to duplicate this locally by doing ...\nconsole\n$ git diff\ndiff --git a/Godeps/Godeps.json b/Godeps/Godeps.json\nindex bfa2851..d5a01f2 100644\n--- a/Godeps/Godeps.json\n+++ b/Godeps/Godeps.json\n@@ -9,7 +9,7 @@\n                        \"ImportPath\": \"github.com/Sirupsen/logrus\",\n                        \"Comment\": \"v0.6.4-6-g539d4dc\",\n                        \"Rev\": \"539d4dc034c079a7188b5d4ca9650632d73c66e8\"\n-               },\n+               }:\n                {\n                        \"ImportPath\": \"github.com/codegangsta/cli\",\n                        \"Comment\": \"1.2.0-62-gbf4a526\",\nWith my patch, linked above I get the following output:\nconsole\n$ godep update github.com/samalba/dockerclient\ngodep: Unable to parse Godeps/Godeps.json: invalid character ':' after array element\n(Note: it's a better error message because of #380.)\n. @ahmetalpbalkan No worries. The old error message gave you nothing to go on. I'll merge #380 soon and that should help people out.\n. Pleas try again with the current version of godep.\nSent from my iPhone\n\nOn Dec 20, 2015, at 21:16, Tim Hockin notifications@github.com wrote:\nIf I godep restore kubernetes it works (well, it produces a bunch of source - I have doubts about it being right, that's what I am trying to find out).\nIf I godep restore -v it fails:\nI get a whole lot of this, and then an exit(1).\nexecute &{Path:/usr/local/go/bin/go Args:[go get -d -v github.com/appc/spec/schema] Env:[] Dir: Stdin: Stdout: Stderr: ExtraFiles:[] SysProcAttr: Process:0xc2082546e0 ProcessState:exit status 0 lookPathErr: finished:true childFiles:[0xc20802e408 0xc20802e428 0xc20802e428] closeAfterStart:[0xc20802e408 0xc20802e428] closeAfterWait:[0xc20802e420] goroutine:[0x497700] errch:0xc2082ff020}godep: restore: exec: already started\n\u2014\nReply to this email directly or view it on GitHub.\n. What version of godep? (godep version)\n\nSent from my iPhone\n\nOn Dec 20, 2015, at 22:16, Tim Hockin notifications@github.com wrote:\nI just did a godep restore on kubernetes followed by godep save ./... - I expected this to be a no-op, but I wanted to verify. Instead, I find that ONE particular library has had it's version changed to the current tip of the master branch.\nI can't figure out why. godep restore -v is failing (#374 here)\nSpecifically:\n{\n                    \"ImportPath\": \"github.com/coreos/go-systemd/dbus\",\n-                       \"Comment\": \"v2-27-g97e243d\",\n-                       \"Rev\": \"97e243d21a8e232e9d8af38ba2366dfcfceebeba\"\n-                       \"Comment\": \"v4-15-ga831f36\",\n-                       \"Rev\": \"a831f36d09de8f095c28eeee839df52e9de5031f\"\n              },\n  Any clues would be great? Godep is kind of inscrutable.\n\u2014\nReply to this email directly or view it on GitHub.\n. Confirmed, closing in favor of #358 \n. It is a transitive dependency that \"go get\" does not fetch, but can be required on other platforms to build the package. Older versions of godep relied on the go tool, but we no longer do, for exactly this reason.\n\nI plan on enhancing this workflow, especially around GO15VENDOREXPERIMENT.\nSent from my iPhone\n\nOn Dec 22, 2015, at 06:06, Ged notifications@github.com wrote:\nThis is a bug i think.\nOnce i did a go get golang.org/x/sys/unix, then godep was happy.\nSo it should be included in godep binary or whatever ?\ndw99-MacBook-Pro:backend apple$ godep save -r\ngodep: Unable to find dependent package golang.org/x/sys/unix in context of /Users/apple/workspace/go/src/github.com/Sirupsen/logrus\ngedw99-MacBook-Pro:backend apple$ go get golang.org/x/sys/unix\ngedw99-MacBook-Pro:backend apple$ godep save -r\ngedw99-MacBook-Pro:backend apple$ \n\u2014\nReply to this email directly or view it on GitHub.\n. @mikeatlas golang.org/x/sys/unix is not a \"core\" Go package. If you godep save and record that dep you can remove the need to fetch it with go get.\n. @geofffranks Yes, this should be fixed as of a month or two ago. I'm going to close this issue, but feel free to re-open if it's still failing with deps saved by v55.\n\nThanks!\n. Something you are requiring is transitively pulling in golang.org/x/sys/unix across OSes.\n. go get golang.org/x/sys/unix. After the restore you probably need to re-save to record golang.org/x/sys/unix.\n. Sorry. I should have replied sooner. This got lost in email. :-( \nI'd much rather do this by making this configurable via an array in Godps.json. Plus ensure that our code handles all the various permutations of build tags. And maybe default to what is hard coded now.\n. @diogogmt This is likely due to the fact that godep ignores arch build constraints, since it doesn't know where you will finally compile code. It's very common for people to dev on macOS, but build on Linux for instance.\n. go get golang.org/x/sys/unix\nFWIW: Now that work has started for a native solution (\nhttps://groups.google.com/forum/#!msg/go-package-management/P8TehVoFLjg/Ni6VRyOjEAAJ),\nI'm likely not going to be working on godep very much. In the interim I'm\nsuggesting people migrate to govendor (https://github.com/kardianos/govendor)\nif they are having problems with godep.\nOn Mon, Aug 29, 2016 at 1:47 AM thomasmodeneis notifications@github.com\nwrote:\n\nWeird, after updating from 1.6.2 to 1.7 on macos 10.8.x I'm running into\nthe same error\n$ godep save\ngodep: WARNING: Godep workspaces (./Godeps/_workspace) are deprecated and support for them will be removed when go1.8 is released.\ngodep: WARNING: Go version (go1.7) & $GO15VENDOREXPERIMENT= wants to enable the vendor experiment, but disabling because a Godep workspace (Godeps/_workspace) exists\ngodep: Package (golang.org/x/sys/unix) not found\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/377#issuecomment-243067806, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAZ2J3a_gmAQLRBLJ_1jKfauSK9ybhks5qkpycgaJpZM4G51iU\n.\n. PS: You will need to add \"solaris\" to the list of ignores in\nvendor/vendor.json if you move to govendor or you will still need\nx/sys/unix.\n\nOn Mon, Aug 29, 2016 at 11:10 AM Edward Muller edwardam@interlix.com\nwrote:\n\ngo get golang.org/x/sys/unix http://golang.org/x/sys/unix\nFWIW: Now that work has started for a native solution (\nhttps://groups.google.com/forum/#!msg/go-package-management/P8TehVoFLjg/Ni6VRyOjEAAJ),\nI'm likely not going to be working on godep very much. In the interim I'm\nsuggesting people migrate to govendor (\nhttps://github.com/kardianos/govendor) if they are having problems with\ngodep.\nOn Mon, Aug 29, 2016 at 1:47 AM thomasmodeneis notifications@github.com\nwrote:\n\nWeird, after updating from 1.6.2 to 1.7 on macos 10.8.x I'm running into\nthe same error\n$ godep save\ngodep: WARNING: Godep workspaces (./Godeps/_workspace) are deprecated and support for them will be removed when go1.8 is released.\ngodep: WARNING: Go version (go1.7) & $GO15VENDOREXPERIMENT= wants to enable the vendor experiment, but disabling because a Godep workspace (Godeps/_workspace) exists\ngodep: Package (golang.org/x/sys/unix) not found\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/377#issuecomment-243067806, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAZ2J3a_gmAQLRBLJ_1jKfauSK9ybhks5qkpycgaJpZM4G51iU\n.\n. @peter-edge @thockin This fixes the issues I know of and has test for the vendor/ related save issues. I also ran it against a slightly modified copy of github.com/peter-edge/go-importserver and github.com/libopenstorage/openstorage and the diffs, while not 100% clean look to be legit (although in the later case I only spot checked a few of the differences).\n. What repository are your trying to restore?\n. Can I get the entirety of the debug output as well as the output of 'go env'?\n\n\nSent from my iPhone\n\nOn Dec 23, 2015, at 00:37, Chris Knowles notifications@github.com wrote:\nI have a basic project not yet using godep with source inside my $GOPATH, when I run godep save -r on it the expected result happens but if I set revert all of those changes and then run export GO15VENDOREXPERIMENT=1 and godep save -d it never completes. I get this as part of the debug output:\nresolving vendor posibilities: /Users/cknowles/Projects/go/src/github.com/xxx/yyyy /Users/cknowles/Projects/go/\nAdding search dir: /Users/cknowles/Projects/go/src/github.com/xxx/yyyy/vendor/encoding/json\nAdding search dir: /Users/cknowles/Projects/go/src/github.com/xxx/vendor/encoding/json\nAdding search dir: /Users/cknowles/Projects/go/src/github.com/vendor/encoding/json\nAdding search dir: /Users/cknowles/Projects/go/src/vendor/encoding/json\nAdding search dir: /Users/cknowles/Projects/go/vendor/encoding/json\nAdding search dir: /Users/cknowles/Projects/vendor/encoding/json\nAdding search dir: /Users/cknowles/vendor/encoding/json\nAdding search dir: /Users/vendor/encoding/json\nAdding search dir: /vendor/encoding/json\nAdding search dir: /vendor/encoding/json\nAdding search dir: /vendor/encoding/json\nAdding search dir: /vendor/encoding/json\nAdding search dir: /vendor/encoding/json\nAdding search dir: /vendor/encoding/json\nAdding search dir: /vendor/encoding/json\nAdding search dir: /vendor/encoding/json\n[repeat the above line seemingly forever]\nFor some reason it gets stuck on the json encoding. The debug output of the packages looks ok. Go version is 1.5\n\u2014\nReply to this email directly or view it on GitHub.\n. Nevermind, realized that your package root has a trailing slash, so this should be fixed in v44. Please let me know!\n. @c-knowles I could test the underlying function probably, but I'm not really sure how these paths are being generated in the first place, hence the initial ask for the entire debug output.\n. Sorry about that. I'll have to spin up a windows machine to test with. \n. @DamienFontaine So this looks like a case insensitive issue (which was different, but similar to the original issue). Can you test with a godep built from this branch: https://github.com/tools/godep/tree/pathEqual and confirm if things are fixed or not?\n. @DamienFontaine Great. Merged and released as v56.\n. This should be closed by v45. If not please re-open. Thanks!\n. This looks good, but what happens when a legal file get's dropped at github.com/camlistore/go4/legal/LICENSE.md ? AFAICT we'd include that one too when we probably shouldn't as errorutil doesn't depend on legal and shouldn't vendor anything from it.\n. @jonboulle I'm suggesting that fixing the later will also fix this issue, but in a more complete fashion.\n. @thockin godep does not verify if what you have in the workspace is what's recorded in Godeps.json. That is kind of hard tbh w/o messing with your $GOPATH and/or downloading a bunch of stuff. So yes, it assumes that if it's in Godeps.json that it's in your workspace. \n\nGO15VENDOREXPERIMENT only means something to go versions >= 1.5, so I don't really understand the use case for 1.4 versions of go.\n. I have to enable the vendor experiment if the target version of go is 1.6 and the environment variable != \"0\". It's what I would expect as a developer.\nI think this would work better for you...\ngo\n    go15ve := os.Getenv(\"GO15VENDOREXPERIMENT\")\n    VendorExperiment = go15ve == \"1\" || (majorGoVersion == \"go1.6\" && go15ve != \"0\")\n. TBH though I wouldn't expect that env var to do anything when using any version of go < 1.5\n. My intention when introducing GO15VENDOREXPERIMENT support was to mirror the go tool's behavior. With go 1.4 that flag doesn't mean anything. Since we no longer depend on go list I felt a stricter interpretation within godep was necessary to be more closely align with the go tool.\nPS: Why aren't you using go 1.5.2 locally at this point?\n. @thockin godep defines it's GO15VENDOREXPERIMENT flag like the go tool. So when using go1.4 it shouldn't do anything wrt that flag. I probably should have specified harder checks initially, but I really didn't expect people to want to use it with go1.4 in that way, nor do I think most of our users. So I'm going to close this as \"works as intended\" in a few days unless others pipe up that my expectations are way off base.\n. Do you think we should record the sha?\nconsole\n$ go version\ngo version devel +8d5ff2e Tue Dec 29 21:16:59 2015 +0000 darwin/amd64\nProbably not worth the hassle. If you are using devel it will just always vary most likely.\n. Thanks!\n. Godep requires that all packages from a single repo be at the same revision.\nAnd yes save needs some -v love.\nSent from my iPhone\n\nOn Dec 30, 2015, at 14:28, Tim Hockin notifications@github.com wrote:\nI'm trying to figure this out:\n$ godep save -v ./...\ngodep: WARNING: Recorded go version (go1.5.1) with minor version string found.\ngodep: WARNING: Recorded major go version (go1.5) and in-use major go version (go1.4) differ.\ngodep: To record current major go version run godep update -goversion.\ngodep: cannot save github.com/opencontainers/runc/libcontainer/cgroups at revision d97d5e8b007e4657316eed76ea30bc0f690230cf: already have github.com/opencontainers/runc/libcontainer at revision 97bc9a7faf3dd660d9be90a2880b2e37f3cdbf38.\nRun `godep update github.com/opencontainers/runc/libcontainer' first.\nI don't want to update libcontainer. My Godeps.json file lists 97bc9a... - why is it trying to import a diffrent rev? Running with -v gives me nothing extra - not a single line. Running with -d has generated 40 MILLION LINES of debug and is still running 20 minutes later.\nNeither one seems very useful. How do I track this down?\n\u2014\nReply to this email directly or view it on GitHub.\n. Godep works off what's in the $GOPATH and doesn't (\ud83c\udfe7) care what's vendored. You need to \"godep restore\" before doing most things. I'd like to change that over time along with the vendor/ folder, but people still rely on the old behavior too and an explosion of flags and possible code paths is :-(.\n\nSent from my iPhone\n\nOn Dec 30, 2015, at 15:42, Tim Hockin notifications@github.com wrote:\noh for the love of ...\nIt's finding a different rev in GOPATH than I have vendored. Despite the\nfact that it won't (as per another issue I filed, thanks for the patience)\nactually replace Godeps that are already present, it complains if the\nversions don't match,\nGodep's logic is inscrutable to me.\nOn Wed, Dec 30, 2015 at 3:38 PM, Tim Hockin thockin@google.com wrote:\n\nI know it requires the same version - I am trying to figure out where it\ngot the idea that there was a different version involved? The parent repo\n(libcontainer) is vendored at rev X, why is it trying to pull a child of\nthat at rev Y?\nOn Wed, Dec 30, 2015 at 2:59 PM, Edward Muller notifications@github.com\nwrote:\n\nGodep requires that all packages from a single repo be at the same\nrevision.\nAnd yes save needs some -v love.\nSent from my iPhone\n\nOn Dec 30, 2015, at 14:28, Tim Hockin notifications@github.com wrote:\nI'm trying to figure this out:\n$ godep save -v ./...\ngodep: WARNING: Recorded go version (go1.5.1) with minor version string\nfound.\ngodep: WARNING: Recorded major go version (go1.5) and in-use major go\nversion (go1.4) differ.\ngodep: To record current major go version run godep update -goversion.\ngodep: cannot save github.com/opencontainers/runc/libcontainer/cgroups\nat revision d97d5e8b007e4657316eed76ea30bc0f690230cf: already have\ngithub.com/opencontainers/runc/libcontainer at revision\n97bc9a7faf3dd660d9be90a2880b2e37f3cdbf38.\nRun `godep update github.com/opencontainers/runc/libcontainer' first.\nI don't want to update libcontainer. My Godeps.json file lists\n97bc9a... - why is it trying to import a diffrent rev? Running with -v\ngives me nothing extra - not a single line. Running with -d has generated\n40 MILLION LINES of debug and is still running 20 minutes later.\nNeither one seems very useful. How do I track this down?\n\u2014\nReply to this email directly or view it on GitHub.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/388#issuecomment-168091343.\n\n\u2014\nReply to this email directly or view it on GitHub.\n. And fwiw I think I'm going to add a \"list\" of \"status\" command to show what the status of various packages is.\n\n\nSent from my iPhone\n\nOn Dec 30, 2015, at 15:42, Tim Hockin notifications@github.com wrote:\noh for the love of ...\nIt's finding a different rev in GOPATH than I have vendored. Despite the\nfact that it won't (as per another issue I filed, thanks for the patience)\nactually replace Godeps that are already present, it complains if the\nversions don't match,\nGodep's logic is inscrutable to me.\nOn Wed, Dec 30, 2015 at 3:38 PM, Tim Hockin thockin@google.com wrote:\n\nI know it requires the same version - I am trying to figure out where it\ngot the idea that there was a different version involved? The parent repo\n(libcontainer) is vendored at rev X, why is it trying to pull a child of\nthat at rev Y?\nOn Wed, Dec 30, 2015 at 2:59 PM, Edward Muller notifications@github.com\nwrote:\n\nGodep requires that all packages from a single repo be at the same\nrevision.\nAnd yes save needs some -v love.\nSent from my iPhone\n\nOn Dec 30, 2015, at 14:28, Tim Hockin notifications@github.com wrote:\nI'm trying to figure this out:\n$ godep save -v ./...\ngodep: WARNING: Recorded go version (go1.5.1) with minor version string\nfound.\ngodep: WARNING: Recorded major go version (go1.5) and in-use major go\nversion (go1.4) differ.\ngodep: To record current major go version run godep update -goversion.\ngodep: cannot save github.com/opencontainers/runc/libcontainer/cgroups\nat revision d97d5e8b007e4657316eed76ea30bc0f690230cf: already have\ngithub.com/opencontainers/runc/libcontainer at revision\n97bc9a7faf3dd660d9be90a2880b2e37f3cdbf38.\nRun `godep update github.com/opencontainers/runc/libcontainer' first.\nI don't want to update libcontainer. My Godeps.json file lists\n97bc9a... - why is it trying to import a diffrent rev? Running with -v\ngives me nothing extra - not a single line. Running with -d has generated\n40 MILLION LINES of debug and is still running 20 minutes later.\nNeither one seems very useful. How do I track this down?\n\u2014\nReply to this email directly or view it on GitHub.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/388#issuecomment-168091343.\n\n\u2014\nReply to this email directly or view it on GitHub.\n. It would have to be a separate flag, or a modification to the -t flag (make it have different modes beyond true/false). Many people want to save the deps for their tests, but not the deps for their dep's tests.\n\n\nAlso, would require a test case in save_test.go\n. Maybe we could combine this with the diff command somehow?  Or at the very least deprecate the diff command for this or something like it.\nI'm hesitant to add another command atm w/o more thought into it's purpose and how it fits in long term. For instance. I'd like to have godep get fetch directly into the vendor/ directory when VendorExperiment is on (with a switch to disable) ... how would this command work then?\n. @awsmsrc I totally get the point and it's something I like. I don't use diff much because frankly it's not useful enough to me. I think something like this could be more useful.\n@shurcooL Nice packages/tools. I have been wanting to add something like godep status for a while to relay what godep thinks about the status of the project you are working on and it's dependencies. I think our licenses are compatible so I may look at \"borrowing\" some of that work. ;-) \n@client9 Godep has no real \"api\" atm, but I'm open to PRs / work to open one up.\n. @awsmsrc godep diff already shows what's outdated (although perhaps a little more haphazardly than we'd like. How about altering the way that command works to work like this proposal? I think this would be more useful to people anyway.\n. @awsmsrc SGTM I have a bunch of other stuff scheduled for this week.\n. @awsmsrc Are you still interested in working on this?\n. Closing, please open a new issue (or re-open this one) if you are interested.\n. It was an oversight omitting it from the Changelog (at the least) and the README. I'll see about fixing that up ASAP.\nWe currently do ignore files with ignore and appengine tags: https://github.com/tools/godep/blob/a1054101461cab7f7c67a22e3aabd0fdb567ce3a/list.go#L271\nFWIW: I'd like to add back in more tag support at some point.\n. Maybe we should just check earlier and abort as basically the GOPATH is assumed to exist ATM?\n. Thanks. Merged as c98cb3f12da9d553e2e47522800fec483a524beb.\n. If you can show me how to do that via travis-ci I'll be happy to add that. ATM travis-ci does all of the releasing. \n. I'd be willing to test it out.\n. Should devel not have the same rule as 1.6  and be written as:\ngo\n((majorGoVersion == \"go1.6\" || majorGoVersion == \"devel\" )&& os.Getenv(\"GO15VENDOREXPERIMENT\") != \"0\")\n. Yes, the environment variable is supposed to be removed in go1.7 (so likely sometime after go1.6 release for devel). I'd say keep it split out, but fix the logic so it's inline with go1.6.\n. Thanks. This was merged as b922ec76f7137e4a33a07663f4cf8f9614e494cd.\n. Please make sure to go fmt the code and I'll merge.\n. This was merged in as 26e6c638845825cecd1addc3f03578c9977676bd. Thanks!\n. @shurcooL Is this satisfactory for now?\n. Probably. godep expects the packages to exist in the $GOPATH atm. If you are starting a new project you'd start with go get <pkg>, use it, then godep save to record / copy it into your godep workspace (or vendor/). If you are working with an existing project that uses godep, you can start with a godep restore, which will modify your gopath to equal the recorded/saved deps. This can be worked around somewhat by saving with rewrites (godep save -r), but the ultimate solution is that godep will (eventually) use what's in vendor/. Some of that logic already exists, but not all of it yet.\nDoes that help? If not, can you please describe what you are doing in more detail?\n. @kevinburkeshyp do a restore, re-save without -r (or -r=false) to remove any rewrites if you have them and then blow away ./Godeps, then checkout any updated deps you want in your $GOPATH and then godep save everything again.\n. This is also an issue when a package starts importing new packages too. For instance grpc 51d644aca6b8eca07b6bd2f5ea435998bf73fa92 to fea7689493da00c4590150b3534c256a962259d3\n. Thanks for reporting this. Total oversight. ;-) Should be fixed in master (v51) and as soon as travis makes a release it will be on the releases page.\n. Hmm it may. I'll have to look into it and make a test case. Thanks for the report.\n. Thanks for the report. Will look into it.\n. I'll have to see what the vcs library generated for a url and see if that's the problem in these cases. Sorry, been working on other stuff for a bit. Hoping to get back to this later in the week or next week.\n. @MrJoy godep save -d <other args> should do that and a LOT more however.\n. @MrJoy Thanks for the analysis ! This is pretty much what I thought is likely happening, sorry I wasn't more specific in my response.\nFWIW: godep uses https://godoc.org/golang.org/x/tools/go/vcs, which I thought took care of all of that. It may not though as there is a wide discrepancy between the go command line tooling and these supplemental libraries. \nI'll look into those libs to verify what they do and if they don't work like the go tooling will patch and PR them.\n. @MrJoy @derekdowling So the error for goji is being returned from https://github.com/golang/tools/blob/3f1f7eeff104d9ef829677f12b9780dfdd26a96a/go/vcs/vcs.go#L395, which was thrown from RepoRootForImportDynamic which calls parseMetaGoImports which looks for the go-import tag. So something in the golang/tools/go/vcs package is busted vs go get AFAICT. \nDigging more.\n. This is fixed in v64. It was a bug in the vcs package\n. @cmoesel Can you share your Godeps.json file and any code? Also, what does 'find . -type d -name \"bson\"` return ?\n. I can't duplicate this, so I need more info.\n``` console\n$ cat main.go\npackage main\nimport (\n    \"fmt\"\n\"gopkg.in/mgo.v2/bson\"\n\n)\nfunc main() {\n    fmt.Println(bson.Binary{})\n}\n$ godep save\n$ cat Godeps/Godeps.json\n{\n    \"ImportPath\": \"github.com/freeformz/t408\",\n    \"GoVersion\": \"go1.6\",\n    \"GodepVersion\": \"v70\",\n    \"Deps\": [\n        {\n            \"ImportPath\": \"gopkg.in/mgo.v2/bson\",\n            \"Comment\": \"r2016.02.04-1-gb6e2fa3\",\n            \"Rev\": \"b6e2fa371e64216a45e61072a96d4e3859f169da\"\n        }\n    ]\n}\n$ find .\n.\n./Godeps\n./Godeps/Godeps.json\n./Godeps/Readme\n./main.go\n./vendor\n./vendor/gopkg.in\n./vendor/gopkg.in/mgo.v2\n./vendor/gopkg.in/mgo.v2/bson\n./vendor/gopkg.in/mgo.v2/bson/bson.go\n./vendor/gopkg.in/mgo.v2/bson/decode.go\n./vendor/gopkg.in/mgo.v2/bson/encode.go\n./vendor/gopkg.in/mgo.v2/bson/LICENSE\n./vendor/gopkg.in/mgo.v2/LICENSE\n```\nAlso @russellhaering when I checkout your example repo and I run godep save on it Godeps/_workspace/src/gopkg.in/ get's added.\nMaybe it was solved in the meantime?\n@cmoesel What version of godep are you using?\n. godep doesn't support this. It may have inadvertently done so in the past however. I'm going to keep this open though for now while I reconsider.\n. Can you try a build of godep with #418 applied and see if that fixes things?\n. @Manbeardo thanks for the update. I'll have to make a test case (even if it's manual) and figure out where else we fall down.\n. Thanks for the test & report. I'll have to investigate more and see if I can make a test case.\n. FWIW: godep (v60) no prints out a warning whenever you are NOT in the $GOPATH.\n. What version of godep are you using?\n. Also, when you say private repos, what do you mean? godep works with what's on disk already in your $GOPATH.\n. Please upgrade and try again w/o a vendor/ or Godeps/ directory. The current version is v52 and I remember something like this being fixed a ways back.\n. No worried. Thanks for giving it a try!\n. godep is designed to be run from within your $GOPATH with all of the deps also in the $GOPATH. So if you are working outside of the $GOPATH with symlinks and/or your deps are the same way godep may not work well for you. If you are inside of the $GOPATH though I'd really like to see if we can re-produce this to fix the issue and make a test case for it.\n. That seems like  a strange $GOPATH. Normally $GOPATH is something like export GOPATH=$HOME/go. And the you cd $GOPATH/src/<project>, where <project> == something like cd $GOPATH/go/src/github.com/tools/godep; edit code; godep save.\n. what version of godep, go, is the vendor experiment turned on or off and (based on the tree output example) I assume the project was created w the vendor experiment turned off....\n. Hmm. Nothing jumps out as off. I'm going to need the extremely large (possibly) output of godep save -d -v <whatever other args you are using unless you can re-produce it on a public repo.\n. Please try again with v55+ and if there is still a problem please upload a new godep save -d -v <pkg spec>. I fixed a few bugs and added some more debug output (which may help in this case).\n. Does github.com/foo/bar/backend import anything ? godep isn't detecting any imports or dependencies.\n. Thanks for trying. I don't understand what you mean by \"standard vendor support\". Are you not using a tool to maintain vendor/? \n. Oh, so if backend doesn't contain any files you need to pass godep save a package spec that includes all of the packages you want to have it analyze. This defaults to ., hence nothing is being saved to vendor/. Given the package structure you described, you probably want godep save ./cmd/...\n. Ahh okay. FWIW: godep writes to vendor/ when go1.6 (or go1.5 + env var) is used. Sorry you had troubles. Do you think there is any way I could update godep or the docs to better convey how save is supposed to be used?\n. Please upgrade to v53 and let me know if this is still an issue.\nThanks!\n. Also note that this patch \"increases\" the number of listed dependencies because we're no longer doing the path prefix match in godep fill. Previously if you had something like:\npackage A/B, imports A/B/C\npackage A/B/C\nYou would get a dependency on A/B recorded and then everything (including any sub dirs) of A/B would be copied in, including A/B/C. So things would work, but the recorded deps would be off (in that they didn't include all transitive deps).\nNow you get both dependencies recorded (A/B and A/B/C).\n. This was okay in the \"workspace\" days because of the rewrites or requirement to prefix go tool runs with godep. But with vendor/ you can just use the naked go tool and ./... really should just work when everything is vendored properly. This should (barring other issues) fix that after a re-save of dependencies. \n. @phinze Yep. I was looking into why ./... wasn't working with go install's for various go1.6 setups (with vendor) because it just should have. And that's when I noticed what seems to be previously spec'd behavior that I disagree with (copying all sub dirs of a required package).\n. @phinze checking with terraform master now to see if what godep's generates is good.\n. Once hashicorp/terraform#5248 is merged the instructions should be:\nconsole\n$ git checkout master\n$ godep restore\n$ git checkout <feature-branch>\n$ <edit code, add imports as necessary>\n$ godep save ./...\n$ git add -A .\n$ git commit -av\nIf that doesn't work (except for exotic situations) then I consider it a bug.\n. Did you start out with a godep restore ? \n. The process I've used several times is : https://github.com/tools/godep#migrating-to-vendor \nThere could be bad revisions being restored though. For instance https://github.com/hashicorp/terraform/pull/5248 needed to update a google cloud library because the code was using a local version and hadn't updated the vendored version yet.\nCan you provide a copy of you Godeps/Godeps.json file? \n. @sunheng that's probably because you have 2 different revs recorded, which is invalid. Fix all Revs to be the same for all code.google.com/p/google-api-go-client/googleapi packages.\n. @gracedo Are you outside of your $GOPATH and/or using symlinks?\n. @gracedo when the above output says <path-to-project> what is that? \n. @gracedo what is the output of godep version (looking for the entire string).\n. Is your fs case sensitive or not? It's part of the output of diskutil info /. I wonder if there is a regression there for some reason.\n. At this point I think I either need access to the code or the full dump of godep save -d -v  > out 2>&1 (which can be large) using v54.\n. Actually wait. I got that backwards. So it's not case sensitive. What do you get from the following 2 commands run inside of $GOPATH/src/github.com/SocialCodeInc/advisor-notifications/ (using whichever method you normally use to cd there).\npwd\ngit rev-parse --show-toplevel\n. Hmm. then I'm not really sure what's going on w/o the dump or the ability to reproduce it. Sorry.\n. I haven't been able to. I've done this now with a bunch of projects w/o incident (aside from stuff that was otherwise inflicted). I need the -d switch added to that, which will add tons of info.\n. Note all of the \"skipping untracked file\" output. That's telling me that symlinks may be used somewhere.\nIf you go to cd /Users/grace/code/go/src/github.com/Sirupsen/logrus and run git ls-files --full-name what is the output?\n. Also what is the output of echo $GOPATH ?\n. And also git rev-parse --show-toplevel in the same place that git ls-files --full-name is run.\n. So here's the problem: /Users/grace/Code/go/src/github.com/Sirupsen/logrus vs /Users/grace/code/go/src/github.com/Sirupsen/logrus\nI added a simple check of == recently.\nPlease update and try with v55 (just pushed). I bet that fixes it.\n. @gracedo thanks for working through this and sorry for all of the back and forth.\n. May (partially) fix #409.\n. May (partially) fix #334 \n. We used to be able to do this via godep save github.com/onsi/ginkgo/ginkgo ./... and use godep go install github.com/onsi/ginkgo/ginkgo to DTRT. But with the vendor experiment that doesn't work.\nWe can vendor it in the same way (godep save github.com/onsi/ginkgo/ginkgo ./...), but it needs to be installed a little differently:\n1. as go install github.com/hashicorp/terraform/vendor/github.com/onsi/ginkgo/ginkgo.\n2. godep restore && go install github.com/onsi/ginkgo/ginkgo (This touches the network though)\nSo that provides 2 possible immediate work arounds.\nAnother possible solution is just manually copy github.com/onsi/ginkgo/ginkgo into ginkgo/ginkgo, godep save ./... and install it with go install ./ginkgo/ginkgo. That's not fun though.\nSome thoughts (none of which I'm convinced are good or not):\n1. Addition of a godep install command which could walk through Packages from Godeps.json and install the non local packages (or all of them). So you would then run godep install github.com/onsi/ginkgo/ginkgo and that would shell out to go install github.com/hashicorp/terraform/vendor/github.com/onsi/ginkgo/ginkgo.\n2. A modifier to godep restore to restore directly vendored files to $GOPATH w/o hitting the network, which would then let you go install github.com/onsi/ginkgo/ginkgo.\n3. I could make godep go vendor aware and when it seems a target that it knows/thinks is in vendor it tries to DTRT and append the local package name + \"vendor/\" to the target. I'm afraid this may be fraught with errors and edge cases though.\nI'm open to suggestions on how to otherwise deal with this though. \n. A draw back to this is that you also need to always add github.com/onsi/ginkgo/ginkgo to your godep save pkg spec. I am considering having godep save w/o any params just use what's in Godeps/Godeps.json if it exists or default to . (which is what it does now if you don't specify a pkg spec). Thoughts?\n. If you are using the vendor/ experiment and have vendored an external dep like ginkgo, you can install it along with everything else via go install ./.... Since ./... will consider everything (including mains) inside of vendor/. See hashicorp/terraform#5291 for instance.\n. There are several issues here AFAICT.\n1. github.com/drone/drone does not use godep (there is no metadata file listing the contents of vendor).\n2.  godep does not as of yet collapse / pull up all dependencies. This can lead to this problem like here.\n3. godep relies on things being in $GOPATH.\n4. I don't really understand how drone manages these dependencies as there is no Godeps/Godeps.json file, so it's impossible to do a godep restore, which should be done before a re-save.\n. Ahh. Thanks for the clarification.\nSo the biggest issue is probably because we don\u2019t pull up all deps and flatten them at the top level (yet).\n\nOn Feb 23, 2016, at 7:22 PM, Dmitri Shuralyov notifications@github.com wrote:\nTo clarify, the codebase I was referring to (src.sourcegraph.com/sourcegraph/...) imports and uses both github.com/drone/drone/... and github.com/docker/docker/... or parts there-of. You're right, I'm not sure how github.com/drone/drone manages its /vendor/ folder, I don't see Godeps.json, govendor.json, or any other similar file.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/tools/godep/issues/421#issuecomment-188041604.\n. Probably v54 as I made the godep save exact dependencies. The current resolver doesn't know about figuring out / including C dependencies. It accidentally (or on purpose depending on how you look at it) worked before hand, but you had to drop your C deps in the correct spot for it to work.\n\nCan you link me to the repo this is an issue with and/or detail your directory layout?\n. The package analyzer doesn't understand parsing cgo imports. The workaround that should work for now is to put the c code in the same directory as the package that uses it. I'm not sure if we'll ever support anything beyond that going forward either. Need to think more about it and look at more projects using cgo before making a decision.\n. @twmb godep does use go/parser when analyzing packages, but currently that all get's thrown out and isn't used during the copy process. My next steps are to not throw that data out and preserve it so that it will simplify other code (like copy) and enable things like godep status (and maybe even a godep graph).\n@karalabe Thanks. Agreed. I need to dig through some common libraries that use CGO to really understand the assumptions. I don't think just blindly copying over .c/.cpp/.h files anywhere below the package would be sufficient, but maybe it is?\n. FWIW sqlite-3 has moved their files around so it will no longer happen with that library after an update of that package: https://github.com/mattn/go-sqlite3/commit/3a5555302e9b06eb5461016462900f1412ae3f7c\n. There may be some stuff in here I can use: https://github.com/golang/tools/blob/master/go/loader/cgo.go\n. You save dependencies by running. godep save <pkg spec>, where <pkg spec> is the code you want to analyze for dependencies (i.e. your code). It sounds like you are running godep save github.com\\golang\\protobuf, which is telling godep to analyze github.com\\golang\\protobuf for dependencies and vendor that. \nDoes that help explain usage? I should probably take another pass at the README, especially give go1.6.\n. That is not the way godep is used. Godep looks at your source code and figures out what packages your code is using and vendors those packages. So something like this ...\n``` console\n$ cd $GOPATH/github.com//\n$ vim main.go\npackage main\nimport \"gopkg.in/natefinch/lumberjack.v2\"\nfunc main() {\n  // make a logger, use it, etc\n}\n$ godep save\n```\nGiven the above the godep save looks at the code in the current directory and discovers that gopkg.in/natefinch/lumberjack.v2 is being used and copies $GOPATH/src/gopkg.in/natefinch/lumberjack.v2 to vendor/ (or Godeps/_workspace/src/gopkg.in/natefinch/lumberjack.v2 if you are using go1.5 w/o the vendor experiment).\nDoes that make sense?\n. What version of godep are you using? godep version output ?\n. Please upgrade to v57 and see if the issue is resolved or not. \n. What version of godep (output of godep version)?\n. What version of godep are you using (godep version).\n. Can you attach the output of godep save -v -d 2>&1. it will be quite large and you may need to upload it elsewhere / provide a compressed version.\n. Godep hasn't vendored dependency's test files by default since ~v9 (9/2015). So any save that was created before v9 may have done so, but any later saves should remove them.  What version of godep are you using?\n. I also fixed a bug recently where godep was vendoring more than it should have (because of old assumptions in the code that also included any sub directories of a package). If you are using godep please update to v56+ and do the following:\nconsole\n$ godep restore\n$ rm -rf Godeps vendor\n$ godep save <pkg spec> \n$ git add -A .\n$ git commit -am \"re-save to remove cruft\"\nWhere  is the packages you want godep to analyze, so proabably . (the default) or ./....\n. Thanks! I try to respond quickly, but can't always. So yay for finding just the right time to ask a Q. ;-) \n. Yes. It should flatten those deps out.\n. yes, we should do better there. There are also all sorts of problem related to v1 and v2 of \"a\" being used at the same time. For instance a type from v1 of \"a\" is not the same as the same type returned from v2 of \"a\". Even if they look the same. The only sane thing to do is flatten. We should ask / prompt / let the user decide which one to choose though (assuming we can't programmatically determine the best version).\n. Because there would then be 3 versions of the same dep. That can lead to confusing, unexpected and subtle errors in the program.\n. if foo and bar happen to return their own a types to their users they won't be equal if compared, which can lead to issues. I don't have links handy but this has been discussed a bunch in Go issues and IIRC go-nuts.\n. I have been thinking about doing this very thing for those very reasons. \n. So my main concern with this is Godep.json churn. But that's probably un-avoidable if we do want to record the version string. w/o using this version elsewhere I'm not sure this is all that useful. And I can see trying to enforce the version to add overhead to interactions with developers. But maybe that overhead is already being imposed, just in an ad-hoc way?\n. PS: I am interested in figuring this out, just thinking through the details here a little and the end goal.\n. save or update will modify Godeps.json. godep get just (currently, I have a notion to change this to something more useful given vendor/) shells out to go get with some wrapping. I'm not sure the version should be updated on godep update though, since it's not a total re-save, more like selective editing. So if you see a Godeps.json file that had a small modification done you can't really assume it has all of the package fixes from recent versions for instance.\nI don't know if that's enough to re-consider this or not.\nI guess looking at the git history and the comments would probably tell you enough though about what was done?\n. Err Sorry. I meant the commit log with the version numbers and comments like \"Updated github.com/foo/bar\" would tell you.\n. Thanks!\n. Sorry it took so long to answer this Q. It got lost in email :-(\nIt probably has less to do with . than with godep being explicit about which packages it is importing. Previously godep would only note the top level package and would also copy in all sub packages and directories, even if they aren't being used. This causes a bunch of problems when using ./... with the go1.5+ vendor experiment as the go tool's use of ./... includes everything in vendor.\nThis change happened in v54: https://github.com/tools/godep/blob/master/Changelog.md#v54-20160222\n. Yes, it's expected as godep is more specific wrt what it records as being used. Before it was kind of loose. I don't think it's related to . (. isn't treated specially by godep), it's just that those packages actually import sub packages that are properly part of your dependencies. \n. What version of godep are you using?\nWere you in your project's root directory in your $GOPATH?\nWhat options did you pass to 'godep save'?\nSent from my iPhone\n\nOn Mar 10, 2016, at 19:10, WanliTian notifications@github.com wrote:\nhi, all\nthere are items about subpackages under golang.org within godeps.json\nbut i cannot find any packages in vendor dir.\ngo 1.6\n\u2014\nReply to this email directly or view it on GitHub.\n. @WanliTian And the other things I asked about?\n. This warning is there to tell you that your combo version of go and config vars is telling godep to use the vendor experiment, but godep disables it because it found an existing old style godep workspace. \n\nExporting GO15VENDOREXPERIMENT=0 disables the vendor experiment, so the warning goes away.\nMaybe I should make the warning clearer somehow?\nSent from my iPhone\n\nOn Mar 10, 2016, at 22:40, Shawn Smith notifications@github.com wrote:\nI see I can do\nexport GO15VENDOREXPERIMENT=0 and it will go away, but for new terminals of course the warning will still show up unless I explicitly put export GO15VENDOREXPERIMENT=0 into my shell rc.\nI'm guessing this is why:\n(v == \"go1.6\" && go15ve != \"0\")\nI'm fine putting export GO15VENDOREXPERIMENT=0 into my shell rc for now, so feel free to close this if you'd prefer not to take action on it.\n\u2014\nReply to this email directly or view it on GitHub.\n. That shouldn't happen. Can you provide the output of 'godep save -d -v ./... &> log'? It will be large thought. I suspect you somehow got into an infinite loop and I need the debug output to figure out where/why that happened.\n\nSent from my iPhone\n\nOn Mar 11, 2016, at 00:06, Yoann Cerda notifications@github.com wrote:\nWith:\ngo 1.6\ngodep v57 (linux/amd64/go1.6)\nI have a project with less than 50 dependencies but it seems that 4GB of RAM + 2GB of swap are not enough to run godep save ./...\nfatal error: runtime: out of memory\nruntime stack:\nruntime.throw(0x9bd9e0, 0x16)\n    /usr/local/go/src/runtime/panic.go:530 +0x90\nruntime.sysMap(0xc9464c0000, 0x498c0000, 0x45da00, 0xbea8d8)\n    /usr/local/go/src/runtime/mem_linux.go:206 +0x9b\nruntime.(_mheap).sysAlloc(0xbd0b00, 0x498c0000, 0xc820000180)\n    /usr/local/go/src/runtime/malloc.go:429 +0x191\nruntime.(_mheap).grow(0xbd0b00, 0x24c60, 0x0)\n    /usr/local/go/src/runtime/mheap.go:651 +0x63\nruntime.(_mheap).allocSpanLocked(0xbd0b00, 0x24c5f, 0xc819677000)\n    /usr/local/go/src/runtime/mheap.go:553 +0x4f6\nruntime.(_mheap).alloc_m(0xbd0b00, 0x24c5f, 0xffffff0100000000, 0x7f28e932edd0)\n    /usr/local/go/src/runtime/mheap.go:437 +0x119\nruntime.(_mheap).alloc.func1()\n    /usr/local/go/src/runtime/mheap.go:502 +0x41\nruntime.systemstack(0x7f28e932ede8)\n    /usr/local/go/src/runtime/asm_amd64.s:307 +0xab\nruntime.(_mheap).alloc(0xbd0b00, 0x24c5f, 0x10100000000, 0x43fdac)\n    /usr/local/go/src/runtime/mheap.go:503 +0x63\nruntime.largeAlloc(0x498be000, 0x0, 0x0)\n    /usr/local/go/src/runtime/malloc.go:766 +0xb3\nruntime.mallocgc.func3()\n    /usr/local/go/src/runtime/malloc.go:664 +0x33\nruntime.systemstack(0xc82001b500)\n    /usr/local/go/src/runtime/asm_amd64.s:291 +0x79\nruntime.mstart()\n    /usr/local/go/src/runtime/proc.go:1048\ngoroutine 1 [running]:\nruntime.systemstack_switch()\n    /usr/local/go/src/runtime/asm_amd64.s:245 fp=0xc820114ab0 sp=0xc820114aa8\nruntime.mallocgc(0x498be000, 0x7ff760, 0x0, 0xc8f311f4a0)\n    /usr/local/go/src/runtime/malloc.go:665 +0x9eb fp=0xc820114b88 sp=0xc820114ab0\nruntime.newarray(0x7ff760, 0x498be00, 0x43cc98)\n    /usr/local/go/src/runtime/malloc.go:798 +0xc9 fp=0xc820114bc8 sp=0xc820114b88\nruntime.growslice(0x7ee8c0, 0xc90b750000, 0x3ad6400, 0x3ad6400, 0x3ad6401, 0x0, 0x0, 0x0)\n    /usr/local/go/src/runtime/slice.go:100 +0x2c1 fp=0xc820114c38 sp=0xc820114bc8\nmain.findDirForPath(0xc8203c17d1, 0xe, 0xc8203b9c00, 0x0, 0x0, 0x0, 0x0)\n    /home/yoann/.go/src/github.com/tools/godep/list.go:195 +0xb2f fp=0xc820114f58 sp=0xc820114c38\nmain.listPackage(0xc82010beb4, 0x5, 0x1, 0x0, 0x0)\n    /home/yoann/.go/src/github.com/tools/godep/list.go:140 +0xca7 fp=0xc820115298 sp=0xc820114f58\nmain.LoadPackages(0xc82000a2c0, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0)\n    /home/yoann/.go/src/github.com/tools/godep/pkg.go:46 +0x2d7 fp=0xc8201153d0 sp=0xc820115298\nmain.save(0xc82000a2c0, 0x1, 0x1, 0x0, 0x0)\n    /home/yoann/.go/src/github.com/tools/godep/save.go:143 +0x9fa fp=0xc820115c50 sp=0xc8201153d0\nmain.runSave(0xbc7160, 0xc82000a2c0, 0x1, 0x1)\n    /home/yoann/.go/src/github.com/tools/godep/save.go:79 +0x142 fp=0xc820115ce8 sp=0xc820115c50\nmain.main()\n    /home/yoann/.go/src/github.com/tools/godep/main.go:140 +0xdf1 fp=0xc820115f40 sp=0xc820115ce8\nruntime.main()\n    /usr/local/go/src/runtime/proc.go:188 +0x2b0 fp=0xc820115f90 sp=0xc820115f40\nruntime.goexit()\n    /usr/local/go/src/runtime/asm_amd64.s:1998 +0x1 fp=0xc820115f98 sp=0xc820115f90\ngoroutine 17 [syscall, 3 minutes, locked to thread]:\nruntime.goexit()\n    /usr/local/go/src/runtime/asm_amd64.s:1998 +0x1\n\u2014\nReply to this email directly or view it on GitHub.\n. Thank you, that will help tremendously. \n. @Sironfoot Your home directory is symlinked into your Dropbox folder? \nWhat is your version of godep (godep version). If you are not on v57+, please upgrade (go get -u github.com/tools/godep) and try again, providing any log (if it's different).\n\nAlso, what is your echo $GOPATH and pwd when you run godep save and ends up in the loop. \n. AFAICT your home directory is in dropbox, and it looks symlinked to /Users. What is the output of echo $HOME?.\n. Yes. godep uses path based case-insensitive file system path matches. So when you are on your desktop, somehow when you open a terminal to run godep you aren't actually in your $GOPATH (/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode), you are instead in /Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/src/dominic/godep-test. Do you use a context menu in Finder to open a terminal? Or some other method? Basically, how did you get to /Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/src/dominic/godep-test instead of  /Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/src/dominic/godep-test\n. changing your $GOPATH to /Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode should solve the problem. I'm somewhat surprised all of the go tools work as well. I do need to track down why some symlink stuff works and some doesn't though.\n. There is no need to use 'godep go' with the vendor experiment (go1.6 and go1.5 with env var set). It's likely to be removed in the future.\nSent from my iPhone\n\nOn Mar 13, 2016, at 22:19, WanliTian notifications@github.com wrote:\ngodep save can save all dependent packages to vendor directory,but godep go build donot find packages in vendor.\nhow to resolve this?\n\u2014\nReply to this email directly or view it on GitHub.\n. What version of godep?\n\nAlso can you provide the output of godep restore -v ?\n. Also bb2ebadc9746f23e4a296e3cbdb8c01e956baee1 is not a tag. It looks like a fetch wasn't done. I rewrote restore to work better a few months ago and I'm pretty sure it does a fetch if the rev isn't available: https://github.com/tools/godep/blob/91e0ec806b03862d597978a9132fb592c0d6ba39/restore.go#L142-L145\n. If you could provide your Godeps/Godeps.json file I may be able to re-construct something. If it's large it will be harder to do though.\n. What version of godep (godep version output)?\nCurrent version of godep will save to vendor/ if go1.6 or go1.5 w/GO15VENDOREXPERIMENT, unless there is an existing Godeps/_workspace folder (and if so you get a warning about it).\n. Godep looks directly at the environment AND go version. If a ./Godeps/_workspace exists though it keeps using it and disables the vendor experiment (and warns you about that). Here is the code it uses to determine this: https://github.com/tools/godep/blob/a62a9149e4443308c1574383a5e2b713088e5c58/main.go#L69-L88\nPlease see this if you are looking to move an existing Godeps workspace to vendor: https://github.com/tools/godep#migrating-to-vendor\n. @didip I don't really consider #377 a bug per se, at least not as it's stated. It will be \"solved\" by better build tag support though at some point.\n. That or progress as reported by git/hg/bzr.\n. When you say \"installed\" what do you mean? installed into your $GOPATH with go get ?\nWhat version of godep? (run godep version). If you are not running v60, please upgrade and try to re-save your deps.\ngodep is not adding the _, go is. \n. Can you push a repo that I can use to reproduce this?\nIf you run godep save do you get any warning about being outside of the $GOPATH? go prepends stuff with _ when you are working outside of the $GOPATH (AFAICT).\n. godep does not work with relative imports and they are generally frowned upon toy code. Please make sure you are inside of a $GOPATH.\n. Please upgrade to current and try again:\ngo get -u github.com/tools/godep\nSent from my iPhone\n\nOn Mar 25, 2016, at 12:34, dhawal55 notifications@github.com wrote:\nsrc\ngithub.com ++ test +++ helloWorld ++++ main.go (imports github.com/test/test1) +++ test1 ++++ test1.go (imports github.com/test/test2) +++ test2 ++++ test2.go\nIn the above scenario, HelloWorld imports test1 which in turn imports test2. When i run godep save on HelloWorld repo, it creates vendor/github.com/test/test1 but not vendor/github.com/test/test2\nMy godep version is godep v41 (darwin/amd64/go1.6)\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\n. I would suggest a full re-save.\n\nconsole\n$ godep restore\n$ rm -rf Godeps vendor\n$ godep save ./...\nIt's likely that the dependencies for what godep thinks is already saved are not being pulled in. I need to see about constructing a test case for this, but the above 3 commands are what I have used to ensure everything is as clean as can be.\n. It's probably an invalid go file, likely a temporary editor file. Godep should skip parsing files that start with '.' and it should return parsing errors to the user. I'll see about fixing at least the former a little later today.\nSent from my iPhone\n\nOn Mar 27, 2016, at 23:03, Paul Querna notifications@github.com wrote:\nRunning godep on Linux, on a path that has shared over sshfs with OSX, sometimes a ._foo.go is created by OSX for various reasons.\nWhen this happens, godep save will report zero dependencies for the entire package.\nNo error is reported, just godep save -v will show an empty list of dependencies.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\n. @smousa what version of godep are you using?\n. Try: \"go get github.com/go-ini/ini\" and then godep save.\nOn Apr 5, 2016, at 05:26, Gareth Murphy notifications@github.com wrote:\n@donhcd just tried out your branch; although the issue seems to describe exactly what I'm looking for, I'm still getting godep: Package (github.com/go-ini/ini) not found when running godep save against a package the requires aws-sdk-go.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\n. Nested vendor folders only lead to problems in the long run. Most tools un-nest them. godep is a little naive in the way it handles that, but the end result is the same.\n. @donhcd Aa(B.Btype) can't be called because it's really A/vendor/B.Btype. Also what happens when you use a B and the project vendors a different B and then returns something of it's B.BType? Your projects B.Btype != A/vendor/B.Btype.\n\nAnd what if A requires a database/sql driver an you go to use the same driver? You'll get a panic.\nre vendor inside of internal packages. It doesn't solve all the problems and IMO I don't think we should ever vendor anything inside of internal packages.\n. @roylou packages that are libraries should not lock their dependencies to a specific version, but need to specify ranges that are known to work. There are several attempts in go land to implement this in the different tools and I'm waiting to see what people adopt. My favorite ATM is what dave chenney is doing with GB's depfile https://github.com/constabulary/gb/tree/master/depfile\n. godep's goal is to produce a single, top level vendor folder. See the convo in #444 as to why.\n. @galeone See #451, which was merged as v61.\n. Hmm. 'fmt' is a stdlib package and should be easily found. Is your go install special in any way? How was it installed? Are symlinks involved?\nSent from my iPhone\n\nOn Apr 21, 2016, at 06:40, David Dollar notifications@github.com wrote:\nI'm getting a similar error to @galeone . I'm on v61 and go 1.6.1\nTrying to re-run godep save gives me godep: Package (fmt) not found\n\u2014\nYou are receiving this because you commented.\nReply to this email directly or view it on GitHub\n. @ddollar I can't seem to replicate this with the same install. Can your provide a link to a copy of the output from godep save -d -v <pkg spec> >log 2>&1 ? The output may be huge, so it may not attach here.\n. @stroborobo go get obeys local arch. Since code can be deployed to different architectures godep looks at all dependencies. So when you godep save cross arch deps may be missing. I'm not sure what the best solution to that is.\n. @stroborobo my comment was wrt third party packages, not the stdlib. godep relies on the $GOPATH reguardless of installation method. As I mentioned above I wasn't able to replicate this with the \"same install\", meaning I removed my own godep / go and installed them via homebrew. Furthermore I was trying to clarify how godep analyzes packages. It always relies on $GOPATH, but can pull in extra transitive deps across architectures vs. go get. This is important if you develop on OSX, but deploy to Linux, which is a very common case.\n. If $GOPATH/github.com/stroborobo/myfmt isn't there then you will get not found because the package isn't in $GOPATH. The way godep currently works is that to update / save deps the packages need to be in the $GOPATH, even if they are already saved. This is for various reasons.\n\nRe: go get. Yes and No. Yes, in that go get fetches all the source code for your current os/architecture. No, in that the same code can require additional transitive dependencies on different os/architectures. I'm not sure if that's what happened here, but it's likely.\n. @stroborobo Maybe I should treat it as a bug. \n. @hadv context is part of go1.7 and therefore requires tip or a go1.7 build.\n. @hadv what version of godep are you using? I added support for handling go version build tags a few months ago, so this should work if the lib you are importing is conditionally importing context behind a build flag (unless your godep version is old). \nOtherwise the package you are using is just blankly importing context no matter of go version and the package needs to be fixed.\n. @Gnouc does anything use it transitively ? \n@jingweno I can't replicate, can you provide a step by step reproducer using go1.7rc3 and a clean gopath?\n@tejasmanohar This issue talks about several different problems AFAICT, can you be more specific?\n. Sounds like a problem with the version of go you are using or your install\nof go.\nOn Thu, Jul 21, 2016 at 5:44 PM Tejas Manohar notifications@github.com\nwrote:\n\n$ godep save ./...\ngodep: Package (encoding/json) not found\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/447#issuecomment-234425413, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAZ_T-Xln2rTvM4TS1bxTwY2RgKmNkks5qYBJXgaJpZM4H-fKt\n.\n. godep save -d -v nvidia-docker/nvidia is telling godep to analyze and\nsave the deps for the nvidia-docker/nvidia package. Is that what you want?\n\nOn Wed, Aug 17, 2016 at 10:11 AM jay vyas notifications@github.com wrote:\n\nsomething weird for me to , i think this might be the same error\n\u279c  kubernetes git:(config-e2e-file) \u2717 go version\ngo version go1.7 darwin/amd64\n\u279c  kubernetes git:(config-e2e-file) \u2717 godep version\ngodep v74 (darwin/amd64/go1.7)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/447#issuecomment-240480131, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAZ-WF5M0UZOPYkeZZT0xrFjQbTUJqks5qg0CygaJpZM4H-fKt\n.\n. The package is transitively required, possibly in a way where go get may\nnot fetch it. go get github.com/hashicorp/go-cleanhttp it directly. and\nre-save. I the error happens again with the same package there is a\nproblem. If it happens again with a different package, go get that\npackage. Rinse and repeat until save. You should only need to do this until\nall of the transitive deps are local.\n\nOn Wed, Oct 5, 2016 at 4:59 PM \u00d6mer Ufuk Efendio\u011flu \nnotifications@github.com wrote:\n\nWhy is that?\ngodep: Package (github.com/hashicorp/go-cleanhttp) not found\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/447#issuecomment-251833368, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAZxIv3kS_lUs_9WWe_-W3Q8qf4DtXks5qxDnEgaJpZM4H-fKt\n.\n. go get github.com/stretchr/testify/assert; godep save ./...\n\nOn Thu, Nov 3, 2016 at 12:18 AM Alyssa Quek notifications@github.com\nwrote:\n\nRunning into this issue:\n$ godep save ./...\ngodep: Package (github.com/stretchr/testify/assert) not found\n$ go version\ngo version go1.7.1 darwin/amd64\n$ godep version\ngodep v75 (darwin/amd64/go1.7.1)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/447#issuecomment-258076815, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAZ1oUBiW1z79A1xlykeQoTXTKLYC_ks5q6YrHgaJpZM4H-fKt\n.\n. godep works off the packages in your $GOPATH. if it can't find a package in\nyour $GOPATH, then it can't save it, so you need to manually go get it\nbefore saving.\n\nOn Wed, Nov 9, 2016 at 7:09 PM yhung124 notifications@github.com wrote:\n\nSame here\n$ go version\ngo version go1.7.1 linux/amd64\n$ godep version\ngodep v75 (linux/amd64/go1.7.1)\nI use a workaround method to get all missing packages, but I don't think\nit's a good idea.\n!/bin/bash\nrc=\"$(godep save 2>&1)\"\nwhile echo $rc | grep \"not found\";\ndo\n  package=$(echo $rc | sed -n \"s/godep: Package ((.*)) not found/\\1/p\")\n  go get $package\n  rc=\"$(/home/build/go/bin/godep save 2>&1)\"\ndone\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/447#issuecomment-259590944, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAZyXO16l9ohbLXqmbgzbl5BsmDO_Xks5q8orYgaJpZM4H-fKt\n.\n. What version of godep are you on?\n\nIf the working tree of a dep is dirty is should say what the dep is. That\nneeds to be resolved as godep won't know what to vendor if the dep's\nworking tree is dirty.\nI'm pretty sure the restriction on the local project being dirty was\nremoved many versions ago.\nOn the other machine I am assuming you have an older version of go/godep as\nwell.\nOn Mon, Nov 14, 2016 at 4:16 PM Yi Chen notifications@github.com wrote:\n\nSame here. I am adding a new package to the same code, and getting two\ndifferent errors from two different Mac OSX machines.\nOn one machine, I simply cannot run godep save ./..., it will report\nerror godep: dirty working tree error. Tried it on another machine and\nnow I am getting godep: Package (context) not found.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/447#issuecomment-260506661, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAZ1dd04WT4d8NpSBZEc8KDNFkBSd9ks5q-PnlgaJpZM4H-fKt\n.\n. So the packages in google.golang.org/cloud have local, uncommitted changes.\nOr something else is going on. If you \"cd /Users/yichen/go/src/\ngoogle.golang.org/cloud\" and run \"git status \", what does it say?\nOn Tue, Nov 15, 2016 at 19:50 Yi Chen notifications@github.com wrote:\nHi,\nI am using recent go and godep versions on both Mac OSX machines. I was\nable to solve the problem on the machine that reports \"Package (context)\nnot found\" by running \"go get -u ./...\", but the issue for dirty working\ntree still persist.\n$ godep version\ngodep v75 (darwin/amd64/go1.7.3)\n$ go version\ngo version go1.7.3 darwin/amd64\n$ godep save\ngodep: dirty working tree (please commit changes): /Users/yichen/go/src/\ngoogle.golang.org/cloud\ngodep: dirty working tree (please commit changes): /Users/yichen/go/src/\ngoogle.golang.org/cloud/compute/metadata\ngodep: dirty working tree (please commit changes): /Users/yichen/go/src/\ngoogle.golang.org/cloud/datastore\ngodep: dirty working tree (please commit changes): /Users/yichen/go/src/\ngoogle.golang.org/cloud/datastore/internal/proto\ngodep: dirty working tree (please commit changes): /Users/yichen/go/src/\ngoogle.golang.org/cloud/datastore/internal/type_proto\ngodep: dirty working tree (please commit changes): /Users/yichen/go/src/\ngoogle.golang.org/cloud/internal\ngodep: dirty working tree (please commit changes): /Users/yichen/go/src/\ngoogle.golang.org/cloud/internal/transport\ngodep: error loading dependencies\nOn Tue, Nov 15, 2016 at 5:46 PM, Edward Muller notifications@github.com\nwrote:\n\nWhat version of godep are you on?\nIf the working tree of a dep is dirty is should say what the dep is. That\nneeds to be resolved as godep won't know what to vendor if the dep's\nworking tree is dirty.\nI'm pretty sure the restriction on the local project being dirty was\nremoved many versions ago.\nOn the other machine I am assuming you have an older version of go/godep\nas\nwell.\nOn Mon, Nov 14, 2016 at 4:16 PM Yi Chen notifications@github.com\nwrote:\n\nSame here. I am adding a new package to the same code, and getting two\ndifferent errors from two different Mac OSX machines.\nOn one machine, I simply cannot run godep save ./..., it will report\nerror godep: dirty working tree error. Tried it on another machine and\nnow I am getting godep: Package (context) not found.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/447#issuecomment-260506661, or\nmute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/\nAAAAZ1dd04WT4d8NpSBZEc8KDNFkBSd9ks5q-PnlgaJpZM4H-fKt\n.\n\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/447#issuecomment-260828878, or\nmute\nthe thread\n<\nhttps://github.com/notifications/unsubscribe-auth/APRAhg1scSU9uDjUBk6-dauRqewhYVd5ks5q-mCTgaJpZM4H-fKt\n.\n\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/447#issuecomment-260846754, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAZz_gsfw9wQi76MSEzHG7pMQ4LT_oks5q-n2VgaJpZM4H-fKt\n.\n. It does, but you should consider migrating to dep or govendor instead.. What version of godep? Versions of godep (circa v41+, I would need to check the changelog for the specific version) process all .go files, except for those with \"ignore\" and \"appengine\" build tags. Adding go version build tags shouldn't be that hard since we also store the major go version in the Godeps.json file though.\n\nSent from my iPhone\n\nOn Apr 5, 2016, at 10:17, Cannibal Vox notifications@github.com wrote:\nIt's worse than that- deleting go17.go wont' help because it actually refused to read pre_go17.go. It's like build tag is reversed, it will ONLY read the 1.7 file.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\n. Looks like go1.7 includes a package named \"context\" and if you are not on 1.7 (really devel) then godep can't find the package because you don't actually have it.\n. Can anyone test out the branch that I pushed for this (See #451) ? I tested it here, but it's late and I don't want to merge it before reviewing it in the morning (and/or getting other +1s).\n. Thanks everyone, this should now be fixed.\n. Closing in favor of #451 for now.\n\nThanks for taking the time to take a stab at this though.\n. Merged as 35ee059b4e6c3df99fb6afc2d3b0f0790b22e1c1\n. Ugh. I'm not sure how to ask the go command if it's go1.7 or not while it's in \"devel\" mode.\n. I could at this point just assume that anything that reports \"devel\" is go1.7 though.\n. The go tool uses a build.Context.ReleaseTags slice and go1.7 has been added in devel. To take a \"guess\" at this I could compile/run this code with the current go version and take the left most element of the array. This is likely to work, until the go team changes the order of this slice for any random reason.\n``` go\npackage main\nimport (\n  \"fmt\"\n  \"go/build\"\n)\nfunc main() {\n  fmt.Println(build.Default.ReleaseTags[len(build.Default.ReleaseTags)-1])\n}\n```\nThat's super fragile, but so is having to say deal with what the definition of \"devel\" is.\nThoughts?\n. I could also parse the date returned by version in the devel case and hard code in the dates the tree was opened. This may then break every major cycle though.\n. Longer term, yes, by removing the need to godep restore. A go tooling change recently (go1.6) made this a problem AFAIK.\n. PS: godep restore is doing what it's always done, restore the recorded versions to the $GOPATH. it can only do this by checking out the various shas (AFAIK) it's recorded.\nAs a temp work around I could implement a godep unrestore, which would check out master again. But I'm hesitant to add another command that should be removed in the future and I'm not sure it's super helpful in the workflow ... ie. you have to remember to use it.\nThoughts?\n. PRs welcome. I don't have an exact commit to golang where this broke. Let me see if I can dig it up though.\n. It was likely this one: https://github.com/golang/go/commit/42206598671a44111c8f726ad33dc7b265bdf669\n. @Raffo What would you suggest be added to the README? It states what godep restore already does in a non VCS specific manner, since godep handles multiple types of VCS.\n. How about\nNOTE: godep restore leaves git repositories in a detached state. go1.6+ no longer checks out the master branch when doing a go get, see here.\nThen if you land an unrestore PR we can adjust that to recommend the usage of unrestore afterwards?\n. @Raffo README / restore help text updated in 584a3f5bf2671886bd3f7dc2b252762b5aa2a087\n. Why does the remote branch matter? I don't think we want to pull new code with unrestore, just check out the local master.\n. It only matters what it's merged to locally AFAIK, so git config --local branch.master.merge should tell us what to checkout. \nI could totally be wrong here, I don't think I've ever worked with remotes who HEAD was not master.\n. I see. If there is only one branch returned from git config --local --get-regexp 'branch.*' we could check that out and otherwise punt with instructions to the user to start?\n. I'm not sure I really want to require people to populate that field manually. Also AFAICT RemoteHEAD is detectable through either:\nconsole\n$ git remote show origin\n...\nHEAD branch: develop\n...\nor\nconsole\n$ git branch -r | grep \"origin/HEAD ->\"\n  origin/HEAD -> origin/develop\npossibly some other means as well.\n. I'm not sure we should save RemoteHEAD though and just honor the remote head from git info for what's already there.\n. godep save takes package paths or files as you point out. It analyzes the package(s) you point it to and determines what dependencies are required based on what is in your $GOPATH. I plan to enhance godep get <pkg> to just vendor  into vendor/.\nThis along with some other future enhancements should go a long way to removing the need for godep restore, which I also plan to remove.\n. Not really.I really suggest people look into using dep or govendor instead of godep.. It does, although it's a little janky and doesn't work well with the vendor experiment. We use it internally @ Heroku.\ngodep save ./... github.com/mattes/migrate saves both local deps and the main that is github.com/mattes/migrate.\nJanky parts:\n1. You need to always save both of those.\n2. It doesn't work well with vendor/ in that you can't then go install github.com/mattes/migrate. You have to prefix your local project's package name to it + vendor like so go install github,com/heroku/project/vendor/github.com/mattes/migrate. This is a limitation of how the vendor/ experiment works. If you are using old style godep workspaces then it's simply godep go install github.com/mattes/migrate.\nDoes that help?\n. Thanks!\n. I assume you resolved the issue?\n. I'll have to see if I can duplicate this with a test. Thanks for the report.\n. @robsix Can you give steps to reproduce?\n. Oops, linked wrong issue.\n. What are the contents of /Users/aaron/documents/gowork/src/github.com/Throckmortra/ryp ? What is your $GOPATH?\n. Also, does go install -v . run / work / install anything?\n. According to the output, godep didn't find any valid go files in . (GoFiles is nil)\n. So you either have invalid go files in . (syntax error maybe?) or you need to specificy ./... when you save. \n. v62 was just a doc update.\n. Your $GOPATH is /Users/aaron/Documents/gowork and you are in /Users/aaron/documents/gowork. So there is still some case related isuses apparently.\n. Hmm. Thanks for the report. I'll have to figure out a way to test this better. I don't think Travis CI has the option for case insensitive filesystems though.\n. Where did you git clone the package to?\n. I believe this ping is part of the golang.org/x/tools/go/vcs package which godep uses.\n. It looks like you have a newer version of golang.org/x/net in your GOPATH. Since godep works off what's in the GOPATH you need to 'godep restore' before saving new deps or this can happen. I'd like to get away from having to do that, but I'm not sure the right UI for it.\nThe error / help text should be clearer as well.\nThanks for the report.\nSent from my iPhone\n\nOn May 5, 2016, at 15:10, Jeff Hodges notifications@github.com wrote:\nWith godep version: godep v63 (darwin/amd64/go1.6.2)\nI added some code that added go grpc to my repository (and so, golang.org/x/net/http2 was added).\nBut then godep save failed and the godep update it told me that there was nothing for it to do:\n$  godep save ./go/...\ngodep: cannot save golang.org/x/net/http2 at revision 7e42c0e1329bb108f7376a7618a2871ab90f1c4d: already have golang.org/x/net/context at revision 35ec611a141ee705590b9eb64d673f9e6dfeb1ac.\nRun `godep update golang.org/x/net/context' first.\n$  godep update golang.org/x/net/context\n godep: no packages can be updated\nHere's a quick grep of my Godeps.json:\n$  cat Godeps/Godeps.json  | grep -A 1 'x/net'\n            \"ImportPath\": \"golang.org/x/net/context\",\n\"Rev\": \"35ec611a141ee705590b9eb64d673f9e6dfeb1ac\"\n\"ImportPath\": \"golang.org/x/net/context/ctxhttp\",\n        \"Rev\": \"35ec611a141ee705590b9eb64d673f9e6dfeb1ac\"\n\n\"ImportPath\": \"golang.org/x/net/html\",\n        \"Rev\": \"35ec611a141ee705590b9eb64d673f9e6dfeb1ac\"\n\n\"ImportPath\": \"golang.org/x/net/html/atom\",\n        \"Rev\": \"35ec611a141ee705590b9eb64d673f9e6dfeb1ac\"\nRunning go get -u -a golang.org/x/net/... per a comment in #335 and trying save and update again changed nothing.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\n. I am in the middle of rewritting update, so let's see if I can also tackle some of this ...\n\nI'm not sure what you mean wrt \"recording the path\". I'm not familiar with gvt, so I'll have to play with it. FWIW: Go packages are path based already. There is code in godep to figure out the root repo for a given package, so godep already has that info. It's just the way things are stringed together right now is sub optimal.\nBefore you did a go get -u -a did you do a godep restore?\nBasically I'm trying to figure out a starting state to replicate this issue.\n. PS: Thanks for the report. ;-) \n. Yeah. that's why you need to godep restore before saving new deps and/or updating deps. Basically the workflow (both fortunately and unfortunately) is:\nconsole\n$ godep restore\n$ cd $GOPATH/src/<package you want to update>\n$ git checkout master\n$ git pull origin master (or checkout whatever you want to update to)\n$ cd $GOPATH/src/<package I am working on>\n$ godep update <package you want to update>/... (most likely need the /... atm)\nAnd yes, that kinda sucks.\nI am thinking of side-stepping this with a godep get <package>[@<version/sha> command, which would just pull the package directly into vendor/ (or the workspace), including deps. It  would default to origin/HEAD unless specified. There is already a godep get, but it's a small, almost useless wrapper around go get.\nThoughts?\n. This is because of this: https://github.com/golang/go/commit/42206598671a44111c8f726ad33dc7b265bdf669\nThis doesn't \"fix\" anything for non godep users, just allows godep restore to work properly.\n. This came up in #453\n. The workflow for godep update is to first godep restore, then checkout the version of the package you want to update to, then update.\n. I agree. I thought there was a test for this, but maybe not. \nSent from my iPhone\n\nOn May 12, 2016, at 08:58, Amir Abu Shareb notifications@github.com wrote:\nI see, is there a workaround at all?\nSeems to me that godep  should update a single package and it's dependencies and not error if another package does not exists, is there a reason for this workflow that i'm missing?\nWould love to work on a fix if you're interested :)\n\u2014\nYou are receiving this because you commented.\nReply to this email directly or view it on GitHub\n. godep and go get can't work the same way. go get only pulls dependencies for the current architecture. godep needs to get all dependencies, across all OS, so that when a developer is working on OS Y the code can be deployed to OS Z. This is pretty common (I for one do most development on OSX, but most deployments to Linux).\n\nI do plan to add a field to Godeps.json to either blacklist or whitelist OS / build tags, but that is not done yet.\n. go get will also fetch any missing dependencies required to build packageX. This is the same as godep. godep will only scan dependencies for packages required by the package spec provided to godep save.\nWhat version of godep are you using? Older versions of godep were more \"liberal\".\n. console\n$ cd ~/go/src/github.com\n$ mkdir jmhodges\n$ cd jmhodges\n$ git clone https://github.com/jmhodges/howsmyssl.git\nCloning into 'howsmyssl'...\nremote: Counting objects: 1283, done.\nremote: Compressing objects: 100% (61/61), done.\nremote: Total 1283 (delta 28), reused 0 (delta 0), pack-reused 1216\nReceiving objects: 100% (1283/1283), 800.82 KiB | 324.00 KiB/s, done.\nResolving deltas: 100% (727/727), done.\nChecking connectivity... done.\n$ cd howsmyssl\n$ ls\nDockerfile                            allow_test.go                         howsmyssl-gcloud-credentials.json.enc static\nLICENSE                               client_info.go                        howsmyssl.go                          templates\nREADME.md                             config                                index_test.go                         tls\nall_suites.go                         conn.go                               insecure_suites.go                    travis_docker_push.sh\nallow.go                              gzip                                  stat_writer.go                        vendor\n$ git checkout test_allow\nBranch test_allow set up to track remote branch test_allow from origin.\nSwitched to a new branch 'test_allow'\n$ go get -u golang.org/x/net/publicsuffix\n$ godep save ./...\n$ cat Godeps/Godeps.json\n{\n    \"ImportPath\": \"github.com/jmhodges/howsmyssl\",\n    \"GoVersion\": \"devel-8f48efb\",\n    \"GodepVersion\": \"v67\",\n    \"Packages\": [\n        \"./...\"\n    ],\n    \"Deps\": [\n        {\n            \"ImportPath\": \"golang.org/x/net/publicsuffix\",\n            \"Rev\": \"ef00b378c73f107bf44d5c9b69875255ce89b79a\"\n        }\n    ]\n}\nInterestingly golang.org/x/net/publicsuffix isn't in vendor though. \nLooking more into why that is.\n. Ugh. well, in my case it did \"vendor\" it, just into a _workspace. So I found a different bug.\n. The bug I discovered is fixed in v69. So I can't replicate this issue.\nPerhaps there is another case sensitivity issue I haven't caught? What is the output of echo $GOPATH and pwd when you do a save that doesn't work?\n. @jmhodges I can't replicate this. Any further info?\n. Please update godep and try again, there are some update fixes recently.\nWRT save removing everything. This is because godep was unable to find any deps for the provided package spec (defaults to '.'). So either (a) save was run w/o the right package spec, (b) some weird symlink issue, (c) another filesystem case bug.\n. It's described in this read me section: https://github.com/tools/godep/blob/master/Readme.md#add-a-dependency \nHow can I make that clearer?\nSent from my iPhone\n\nOn May 16, 2016, at 07:22, Amir Abu Shareb notifications@github.com wrote:\nI'm sure i'm missing something, looked up in the docs but didn't find any way to do it, how can i add a new dependency?\nATM i'm doing this:\n$ godep save github.com/pkg/a\n$ git checkout Godeps\n$ git commit ..\nSurely there's a better way?\nCheers!\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\n. This needs to be fixed in the same way it was fixed for git. Resolving the symlink isn't acceptable. If mercurial is resolving the symlink then we need to change the behavior of mercurial to provide a path w/o resolving the symlinks for us. See also: https://github.com/tools/godep/commit/446e2f61cbc0bfa616de9b4b0cf6271945704a77\n. ditto and mercurial is horribly untested inside of godep. ;-) I'll see if I can take a look later.\n. You can (and arguably should) do those change in a branch and commit them. git checkout {{commit}} would then work. Why not modify your vendored copy?\n. I'd much rather do this by making this configurable via an array in Godps.json. Plus ensure that our code handles all the various permutations of build tags. And maybe default to what is hard coded now.\n. When a repo is git pushed to remote that has no source, how will that remote build the source w/o hitting the network?\n. If you are looking for that feature, please see govendor. PS: If you migrate to govendor, please don't use it's migrate command. I suggest instead doing:\n\nconsole\n$ godep restore\n$ rm -rf Godeps vendor\n$ govendor init\n$ govendor add +ex\n. @cleung2010 godep restore doesn't use the contents of vendor/ it's sole job is to fetch what is described in Godeps.json into $GOPATH. \n. @cleung2010 Great! FWIW: My recommendation would be govendor.\n. godep save looks at existing code to determine what packages should be saved and then copies those packages from your $GOPATH into a vendor directory. It's telling you that those packages aren't available in $GOPATH. godep save does not download any missing dependencies. Maybe a switch to do so would be useful? \n. This is because github.com/hpcloud/tail vendors a a version of gopkg.in/fsnotify.v1 that doesn't import golang.org/x/sys/unix. But godep flattens vendor folders and pulls up the dependency, so that there is only a single top level vendor directory. This required a version of gopkg.in/fsnotify.v1 be installed in the $GOPATH. The version vendored in hpcloud/tail is \"7be54206639f256967dd82fa767397ba5f8f48f5\" (1.2.1), while the version vendored in node-problem-detector is \"30411dbcefb7a1da7e84f75530ad3abe4011b4f8\".\n. At some point godep should start taking a look at the versions of vendored deps and throwing an error if they (a) conflict or (b) what it would copy would be different.\n. Thanks for the report!\nI don't think there is a test for that. I'll check and add one if there isn't and see if I can get it passing.\nThe easiest way to do this atm is:\nconsole\n$ godep restore -v\n$ rm -rf Godeps vendor\n$ godep save <pkg spec>\n$ git commit -av\nThe restore downloads and checks out your project's deps into $GOPATH. This makes it so that when you save again you get the same version of the deps re-saved. Anything that is no longer necessary won't be saved. Also any new tweaks to the save process are applied if you are using the latest godep (perms, stricter package matching, etc). I suggest upgrading to the latest version of godep before doing any of this.\n. It is indeed. Thanks!\n. I'll likely add an \"origin\" field to each dep instead. That's probably not the best for your use case, but probably more generally applicable. Thoughts on that?\n. Thanks!\n. Would an \"origin\" field referencing the full path to a different repo location be acceptable (this is what vendor.json does)? \nSo you would have something like this to \"alias\" the package github.com/heroku/slog from the location github.com/freeformz/slog.\njson\n...\n\"Deps\": [\n  {\n    \"ImportPath\": \"github.com/heroku/slog\",\n    \"Origin\": \"github.com/freeformz/slog\",\n    \"Rev\": \"abcdefg\"\n  }\n]\n...\nrestore would also have to add the other remote somehow and also fetch from there. Maybe it's okay to punt on that though to start?\n. I'm not actively maintaining godep anymore. I should update the README to reflect that. I suggest taking a look at dep instead.. I can't duplicate this.\n``` console\n$ mkdir -p $GOPATH/src/github.com/freeformz/t485\n$ cd $GOPATH/src/github.com/freeformz/t485\n$ echo 'package main\nimport (\n        \"fmt\"\n    \"golang.org/x/crypto/ssh\"\n\n)\nfunc main() {\n        fmt.Println(ssh.Permissions{})\n}' > main.go\n$ godep save\n$ cat Godeps/Godeps.json\n{\n    \"ImportPath\": \"github.com/freeformz/t485\",\n    \"GoVersion\": \"go1.7\",\n    \"GodepVersion\": \"v74\",\n    \"Deps\": [\n        {\n            \"ImportPath\": \"golang.org/x/crypto/curve25519\",\n            \"Rev\": \"c197bcf24cde29d3f73c7b4ac6fd41f4384e8af6\"\n        },\n        {\n            \"ImportPath\": \"golang.org/x/crypto/ssh\",\n            \"Rev\": \"c197bcf24cde29d3f73c7b4ac6fd41f4384e8af6\"\n        }\n    ]\n}\n$ find vendor\nvendor\nvendor/golang.org\nvendor/golang.org/x\nvendor/golang.org/x/crypto\nvendor/golang.org/x/crypto/curve25519\nvendor/golang.org/x/crypto/curve25519/const_amd64.s\nvendor/golang.org/x/crypto/curve25519/cswap_amd64.s\nvendor/golang.org/x/crypto/curve25519/curve25519.go\nvendor/golang.org/x/crypto/curve25519/doc.go\nvendor/golang.org/x/crypto/curve25519/freeze_amd64.s\nvendor/golang.org/x/crypto/curve25519/ladderstep_amd64.s\nvendor/golang.org/x/crypto/curve25519/mont25519_amd64.go\nvendor/golang.org/x/crypto/curve25519/mul_amd64.s\nvendor/golang.org/x/crypto/curve25519/square_amd64.s\nvendor/golang.org/x/crypto/LICENSE\nvendor/golang.org/x/crypto/PATENTS\nvendor/golang.org/x/crypto/ssh\nvendor/golang.org/x/crypto/ssh/buffer.go\nvendor/golang.org/x/crypto/ssh/certs.go\nvendor/golang.org/x/crypto/ssh/channel.go\nvendor/golang.org/x/crypto/ssh/cipher.go\nvendor/golang.org/x/crypto/ssh/client.go\nvendor/golang.org/x/crypto/ssh/client_auth.go\nvendor/golang.org/x/crypto/ssh/common.go\nvendor/golang.org/x/crypto/ssh/connection.go\nvendor/golang.org/x/crypto/ssh/doc.go\nvendor/golang.org/x/crypto/ssh/handshake.go\nvendor/golang.org/x/crypto/ssh/kex.go\nvendor/golang.org/x/crypto/ssh/keys.go\nvendor/golang.org/x/crypto/ssh/mac.go\nvendor/golang.org/x/crypto/ssh/messages.go\nvendor/golang.org/x/crypto/ssh/mux.go\nvendor/golang.org/x/crypto/ssh/server.go\nvendor/golang.org/x/crypto/ssh/session.go\nvendor/golang.org/x/crypto/ssh/tcpip.go\nvendor/golang.org/x/crypto/ssh/transport.go\n```\nIf you can reliably reproduce locally, please add -v -d to you commands, save the output and upload it somewhere I can inspect it.\n. This works for me. \nconsole\n$ go get github.com/setekhid/godeps-bug\n$ cd $GOPATH/go/src/github.com/setekhid/godeps-bug\n$ rm -rf Godeps              # remove any old Godep data\n$ godep save\n$ find Godeps\nGodeps\nGodeps/_workspace\nGodeps/_workspace/.gitignore\nGodeps/_workspace/src\nGodeps/_workspace/src/github.com\nGodeps/_workspace/src/github.com/setekhid\nGodeps/_workspace/src/github.com/setekhid/godeps-debug\nGodeps/_workspace/src/github.com/setekhid/godeps-debug/ignored.go\nGodeps/_workspace/src/github.com/setekhid/godeps-debug/subpkt\nGodeps/_workspace/src/github.com/setekhid/godeps-debug/subpkt/struct.go\nGodeps/Godeps.json\nGodeps/Readme\nNote that ignored.go is included.\nPS: Workspace support is deprecated.\nI tried this with my godep compiled with 1.7beta1 and 1.4.2 and the results are the same.\nIf you can reproduce please run save with -d -v, capture all of the output and upload it somewhere so that I can inspect it.\nThanks!\n. Looks like /home/dovydas/.gvm/pkgsets/go1.6.2/global/src/github.com/googollee/go-engine.io is dirty. if you do the following what is the output:\nconsole\n$ cd /home/dovydas/.gvm/pkgsets/go1.6.2/global/src/github.com/googollee/go-engine.io\n$ git status\n$ gi ls-files\n. What does your Godeps.json file look like ?\n. I can't reproduce this. When I require \"github.com/prometheus/common/expfmt\" and godep save I get \"github.com/prometheus/common/internal/bitbucket.org/ww/goautoneg\" vendored. Can you explain which dep requires this? Is it vendored there? Do you have the same version vendored there on your GOPATH?\n. If you ran go get github.com/tools/godep, is $GOPATH/bin in your $PATH ? Sounds like it isn't.\n. They are using the older style Godep workspace w/o rewrites, so run godep restore before running any go commands (or use godep go <cmd>).\n. godep just shells out to git. Are you sure that git is working because of .netrc or cached stuff in a local .git?\n. I'll have to setup a bitbucket private repo to rest this out, will probably take a bit because @ Gophercon.\n. In the meantime, could you provide the complete output of -d ?\n. So this is the problem: https://github.com/golang/tools/blob/master/go/vcs/vcs.go#L668 The golang/tools/vcs stuff that godep uses doesn't use .netrc at all. I wonder if they would accept a patch to support .netrc. That's probably unlikely. Of course the go tooling doesn't work the same way either. :-( \n. See also: https://github.com/golang/go/issues/16315\n. BTW: You should not need to go get or godep restore any vendored deps (assuming the use of vendor/) before running go install. If you do, there is a problem somewhere.\n. So I would recommend removing the following lines:\nconsole\nRUN go get github.com/segmentio/go-loggly # Dependency from the logging app\nRUN go get bitbucket.org/frobl/logging # Use go get here\nand changing the last run line to\nconsole\nRUN go install\nThis assumes using vendor/``\n. It is there for historic purposes (people using workspaces) and a few different advanced uses. The only thinggodep restoredoes is to make the packages in your $GOPATH reflect what is in Godeps.json. Since those packages are already invendor/and the go tool supports vendoring (go 1.5+), there is nogodep restorerequired as the required code is already invendor/.\n. Does this help? https://github.com/tools/godep/blob/master/FAQ.md#should-i-use-godep-restore\n. I also edited the readme around restore a little as well.\n. Looks legit to me. ;-) \n. This is confirmed and strange. I am out most of today through monday though.\n. My next step is togodep save -v -d ./... &> log` and walk through the log to see why this is happening.\n. I am really not sure what is going on here. I will have to look deeper when I get back from vacation on tuesday. Your existing work around LGTM for now. Sorry.\n. No, this is a bug.\nOn Wed, Aug 10, 2016 at 1:24 AM David Mohl notifications@github.com wrote:\n\nI am also not sure whether this is normal beahvior or a bug. Is godep\nupdate supposed to vendor the vendor of the vendor?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/498#issuecomment-238798839, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAZ00Orxlat6zca-cIBDXz-mfvJy6lks5qeYrVgaJpZM4JSJQ8\n.\n. FWIW: Now that work has started for a native solution (\nhttps://groups.google.com/forum/#!msg/go-package-management/P8TehVoFLjg/Ni6VRyOjEAAJ),\nI'm likely not going to be working on godep very much. In the interim I'm\nsuggesting people migrate to govendor (https://github.com/kardianos/govendor)\nif they are having problems with godep.\n\nOn Tue, Aug 30, 2016 at 5:00 AM oscarzhao notifications@github.com wrote:\n\nI also want flattened dependencies\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/498#issuecomment-243416708, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAZ1aTsETEz26p_4ncyujWkaREuTNZks5qlBtvgaJpZM4JSJQ8\n.\n. Blinly checking out master isn't a good thing, but probably works in the 90% case. I'd argue that the appropriate place to fix this is to have go get determine the remote head and check that out when not already on that branch when doing a go get -u.  godep already has logic to do that because it needs to check out the correct default head when updating to ensure the correct sha is present.\n\nAlso my goal, although I don't know if I'll ever get to it, is to remove the need to ever godep restore.\nThoughts?\n. This PR changes much more than that though. Please remove the other changes or describe why they were necessary.\n. I don't know the history. Tool late to change now really. Maybe @kr can shed some light on it?\n. It's likely that there is a problem with your $GOPATH. godep will only do\nthis if it doesn't find any packages. Also if you are using godep from\nbrew, make sure to uninstall it as it's known to cause problems.\nOn Fri, Nov 11, 2016 at 1:44 AM Kristijan Ujevi\u0107 notifications@github.com\nwrote:\n\nagreed\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/512#issuecomment-259920055, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAZ7yUSdRfB4R6vJrOF5-LrMDtk4BTks5q9DjvgaJpZM4J4yaz\n.\n. Also pwd. Is there any difference in case?\nThe other thing may be the pkg spec passed to save. By default it is '.'.\nIf there are no files to analyze in the current directory then Godeps.json\nwill be blank and everything will be deleted from vendor. What is the\nlayout of the project?\n\nOn Tue, Nov 15, 2016 at 4:22 AM Kristijan Ujevi\u0107 notifications@github.com\nwrote:\n\necho $GOPATH\noutput:\n/home/MyUsername/go\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/512#issuecomment-260627286, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAZ6Qy-2cvFULARI0o4ZoVOAOtRaYaks5q-aQQgaJpZM4J4yaz\n.\n. godep just shells out to git.\n\nOn Thu, Sep 15, 2016 at 9:40 AM C\u00edcero Verneck Corr\u00eaa \nnotifications@github.com wrote:\n\nExpected behavior\nIt should work for SSH key.\n.netrc prevent you from using two-factor-authentication.\nhttps://help.github.com/articles/requiring-two-factor-authentication-in-your-organization/\nActual behavior\nIt works for ~/.netrc #58 https://github.com/tools/godep/issues/58\ngodep version output\ngodep v74 (darwin/amd64/go1.7rc1)\ngo version output\ngo version go1.7rc1 darwin/amd64\nContents of Godeps.json file\nprivate repos\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/514, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAZ-bXC54PqVhhU1p87WZKizF74rYKks5qqXT3gaJpZM4J-FUI\n.\n. go get golang.org/x/net/lex/httplex and try again.\n\nOn Thu, Sep 15, 2016 at 10:10 AM dhawal55 notifications@github.com wrote:\n\nExpected behavior\ngodep save should pull all dependencies and save them in vendor folder\ngo build works correctly so all dependencies are present in GOPATH\nActual behavior\nWhen i run godep save, i get error for missing dependencies\ngodep save\ngodep: Package (golang.org/x/net/lex/httplex) not found\nSteps to reproduce behavior\nrm -rf Godeps\nrm -rf vendor\ngo build # This works and binary is created\ngodep save\ngodep version output\ngodep v74 (darwin/amd64/go1.6.2)\ngo version output\ngo version go1.6.2 darwin/amd64\nContents of Godeps.json file\nempty\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/515, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAZwZkOXdecvs5M1yDskpDTaw4hU3fks5qqXwGgaJpZM4J-HDv\n.\n. They are probably additional transitive deps that godep picks up that go\nbuild does not consider because godep includes all deps across all build\ntags. This is so that people can develop on one OS and build on another. I\nwould suggest giving govendor a try, which has an additional ignore\nfield in it's vendor.json file that can tweak this. I'm not sure if I'm\ngoing to be doing much work to enhance godep anymore because there is work\n(which I'm involved in) ongoing for an official package management tool.\n\nOn Thu, Sep 15, 2016 at 6:05 PM dhawal55 notifications@github.com wrote:\n\nI tried that and then it fails on next dependency. Isn't godep save\nsupposed to vendor all dependencies? Are these godep dependencies because\ni'm able to build my app correctly?\nOn Sep 15, 2016 3:56 PM, \"Edward Muller\" notifications@github.com wrote:\n\ngo get golang.org/x/net/lex/httplex\nhttp://golang.org/x/net/lex/httplex\nhttp://golang.org/x/net/lex/httplex and try again.\nOn Thu, Sep 15, 2016 at 10:10 AM dhawal55 notifications@github.com\nwrote:\n\nExpected behavior\ngodep save should pull all dependencies and save them in vendor folder\ngo build works correctly so all dependencies are present in GOPATH\nActual behavior\nWhen i run godep save, i get error for missing dependencies\ngodep save\ngodep: Package (golang.org/x/net/lex/httplex) not found\nSteps to reproduce behavior\nrm -rf Godeps\nrm -rf vendor\ngo build # This works and binary is created\ngodep save\ngodep version output\ngodep v74 (darwin/amd64/go1.6.2)\ngo version output\ngo version go1.6.2 darwin/amd64\nContents of Godeps.json file\nempty\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/515, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/\nAAAAZwZkOXdecvs5M1yDskpDTaw4hU3fks5qqXwGgaJpZM4J-HDv\n.\n\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/515#issuecomment-247477699, or\nmute\nthe thread\n<\nhttps://github.com/notifications/unsubscribe-auth/ADUqlbNb_DBu3OHp79YoJKsvCUNR8KXlks5qqc0BgaJpZM4J-HDv\n.\n\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/515#issuecomment-247495305, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAZwpsKrObKRMp8syzi8iIZk8701rjks5qqetEgaJpZM4J-HDv\n.\n. godep save w/o a package spec defaults to '.'. So if there are not\npackages in the current directory nothing will be saved.\n\nOn Thu, Nov 10, 2016 at 12:04 AM chnrxn notifications@github.com wrote:\n\nI saw the same behavior too. If the main package is not in the current\ndirectory, could you try supplying the path to the main package? E.g. godep\nsave -v ./cmd/...\nNote: I put all my main packages under ./cmd/, hence my example command.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/516#issuecomment-259625504, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAZx1UgCs4ShU_i_XV-TiNXee7Tu-Wks5q8s_zgaJpZM4KAuQq\n.\n. This is because godep was compiled with the go/ast package from go1.7, which doesn't support aliases.\n\nSome ways to \"solve\" this:\n1. Write my own parser for build tags and import statements (that's really the only reason godep parses files at all).\n2. recompiling godep with go tip should work around the issue.\n3. Other?\n. Yay\n. Thanks!\n. If you aren't using that package (even transitively) it won't be saved. You\nare probably building a file that is included, but not used.\nIs this (like that issue) on Heroku? If so, can you please file an issue\nthere and ask support to escalate it to me?\nOn Mon, Nov 14, 2016 at 7:21 PM Tejas Manohar notifications@github.com\nwrote:\n\nIs it possible to exclude a subpackage of a dependency from godep save\n./... etc? I want to exclude the internal/sasl package of mgo (\ngo-mgo/mgo#220 https://github.com/go-mgo/mgo/issues/220) because it\nrequires cgo, and I don't need that functionality.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/523, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAZ-G4scqhFp7DzaEtZGwy4AP0eQ3bks5q-SU5gaJpZM4KyFZb\n.\n. I posted on the linked issue with a repo to describe the likely issue.\n\nOn Tue, Nov 15, 2016 at 18:05 Tejas Manohar notifications@github.com\nwrote:\n\n@freeformz https://github.com/freeformz I'm actually not using Heroku,\nbut seems like people are having issues there.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/523#issuecomment-260832016, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAZ1Z60C_LB4mkrGrEYgkNNgntiy-Lks5q-mTcgaJpZM4KyFZb\n.\n. @parkr If you are interested sure, but my time has mostly moved to working with/on the tool being worked on by the go-pm community (coming soon).. @parkr It is not public yet, but you should check out https://groups.google.com/forum/#!topic/go-package-management/P8TehVoFLjg. Re: maintenance mode, throw up some PRs. ;-) . Thanks!. Godep ignores build tags (except ignore and appengine), so I'm not sure why this is happening.. With that said, I was able to reproduce this. :-( . Ugh. I did. I really need to write a make release.\n\nThanks!. Yeah. sorry, although I won't promise to not do that again. IMO tags are mutable and should be treated as such, although I do agree that doing so should be discouraged.. It may be huge, but can you provide the output of godep save -d -v ./... &> output ?. It looks like the change to stop using build.ImportDir in the code that handles './...' and the like is returning stuff above the current directory. There probably aren't tests for that specific issue, but I expected the existing tests to cover them. I'll have to dig more to figure out why.. Fixed. Sorry about that. Silly mistake. :-(. Something is likely wrong with your go install as this is just calling a stdlib function of the log package.. This is by design. godep only records go packages and any license files it can find.\nPossible work arounds:\n\nMake dict and deps (or their sub directories) actual go packages and have gojieba _ import them and they will be picked up.\nUse a tool such as go-bindata to embed the info into a go package as binary data. There are tools other than go-bindata as well.. This seems wrong to me on BlueMix's part.\n\nThe ImportPath recorded is the package name of the project you are saving dependencies for. If you send the code to them and they use the app name as the package name then code that uses sub packages will break as the names are different. For instance, your application is located in the package named github.com/olliephillips/test, which is stored in $GOPATH/src/github.com/olliephillips/test. Let's say github.com/olliephillips/test imports github.com/olliephillips/test/lib/stuff but Bluemix actually puts the code in $GOPATH/src/gohelloworld when it's compiling the software. The import will break unless BlueMix also looks through your code and fixes up imports. And even then, panics, traces and error messages will also be changed.\nMaybe Bluemix is doing something different, IDK, but this seems strange to me.\nPS: This isn't really a bug with godep, so I'm going to close this, sorry. If Bluemix support would like to weigh in please have them re-open this issue. Thx.. That's not a valid Godeps.json file because the package specified is not a valid go package declaration because it (a) contains no valid *.go files and (b) the packages contained there are actually golang.org/x/tools. So if the file is changed to:\ngo\n{\n  \"ImportPath\": \"github.com/tools/godep\",\n  \"GoVersion\": \"go1.7\",\n  \"Deps\": [\n    {\n      \"ImportPath\": \"golang.org/x/tools/cover\",\n      \"Rev\": \"3fe2afc9e626f32e91aff6eddb78b14743446865\"\n    }\n  ]\n}\ngodep restore works properly because the correct namespace for the code is golang.org/x/tools and golang.org/x/tools/cover is an actual go package.\nPS: This may have worked in previous versions of godep, but that was purely by accident.. I'm going to close this as it's pretty broad and I think a little outdated. As these things come up again (if they do) I'll open new issues/PRs.\n. I don't think this is still an issue. Closing for now. Please re-open if it is and I am wrong. Thanks!\n. For now you should rewrite your deps so that you only need to use godep when managing dependencies. Long term it's likely the need to rewrite will go away pending the vendoring experiment.\n. I am closing this because it's no longer possible to use -copy=false (since 754ee6f4e0e5fc8d0ef2692fb239d15c7a09dd84). \n. godep version now works and prints a version.\nGodep is likely (but not finally) going to use https://github.com/kardianos/vendor-spec as per #270.\nSo I'm going to close this. Please re-open and update if I'm wrong.\nThanks!.\n. What version of godep are you using?\nI\u2019ll also see if I can reproduce this.\n\nOn Mar 14, 2016, at 4:57 PM, Alex Dadgar notifications@github.com wrote:\nI am also getting this when trying to update:\ngodep update github.com/hashicorp/go-getter\ngodep: no buildable Go source files in /Users/adadgar/Projects/go/src/github.com/StackExchange/wmi\ngodep: error loading dependencies\nI have a project that has different imports depending on OS and the above is only used on windows. I tried to just GOOS=windows go get github.com/StackExchange/wmi which worked but then get the above error.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub:\nhttps://github.com/tools/godep/issues/39#issuecomment-196575276 https://github.com/tools/godep/issues/39#issuecomment-196575276\n. @dadgar what if you go get github.com/StackExchange/wmi and try updating again. Please not that you probably want to use godep update github.com/hashicorp/go-getter/... atm because of a bug in the update code.\n. @dadgar did you run godep update github.com/hashicorp/go-getter/... And is github.com/hashicorp/go-getter anywhere in your Godeps.json file?\n. @dadgar godep is platform agnostic. the go tool isn't atm, so it will not pull down all possible deps for a package, only the ones the local arch needs to build. Godep will find all deps across all arches as it ignores build tags (except for ignore and appengine) atm.\n. #108 is merged and may fix this.\n. I believe this is now fixed. If not please re-open.\n. For the purposes of cleanup I'm going to close this as it's obvious that we're not going to merge it as is. If someone would like to re-open this issue with an up-to-date PR (perhaps with a different implementation) I'd be happy to review and consider/discuss inclusion.\n\nThanks!\n. @kr How about we remove restore at this point?\n. +1 and that is in line with the official Go team stance as well. With that said I'm going to close this issue. \nThanks everyone for the discussion.\n. There's no real way to accomplish this AFAIK in go land w/o going down the gb path.\nA godep status or godep list command to ensure everything in use is probably the best that can be done for now. I'm going to close this in favor of: #273\n. This is possible by specifying the path to the full vendored package, so something like:\nconsole\n$ go install -v github.com/my/project/Godeps/_workspace/src/github.com/your/project/cmd/thing\nor\n$ go install -v github.com/my/project/vendor/github.com/your/project/cmd/thing\nworks properly (AFAIKCT) with rewriting or the vendor experiment.\n. Every time I've tracked these things down in the past it was because of the go tool using the wrong cached package file from outside. rewrites and/or vendor directory solve this AFAIK, so those should be used instead. Closing for now. If I'm way off base and/or we can reproduce with go 1.5* and current godep please re-open. Thanks!\n. atm as long as the imported package has files with build tags that include it on the local machine (a file with // +build heroku and a different file with // +build !heroku) both files will be included (assuming they are both committed to vcs). Ultimately we want to vendor everything regardless of tags so that code is buildable in multiple environments. See #271. I'm closing this for now in favor of that issue.\n. For those of you having this problem:\n1) is it with golang switch to golang.org/x / github? If so you will likely need to update your deps in a brute source kinda way as per @bhcleek 's suggetions. I recently had to do something similar for https://github.com/sclasen/swfsm/pull/60\n2) Can you provide a repeatable test case?\n. Travis shouldn't do that as that's an implementation detail of godep and may break in the future.\n. @pdxjohnny This works fine for me:\nconsole\n$ go get -u go get -u github.com/authit/crypto\n$ cd $GOPATH/src/github.com/authit/crypto\n$ godep restore\nI would try nuking $GOPATH/src/github.com/spf13/cobra and try godep restore again.\nBTW: godep restore isn't really necessary unless you don't want to wrap your go commands with godep. I would also encourage the authors of the package to rewrite their deps.\n. @gngeorgiev godep works under the assumption that all packages are in a VCS controlled repository. That repository doesn't actually have to be pushed anywhere else though.\nI personally put all code into a VCS (almost always git), even if it's ever just local.\n. godep uses the go tooling for various bits and they mostly require the code to be in VCS, organized in certain ways.\n. @tchap what version of godep do you have? If it's not v2 or the command isn't recognized, please go get -u github.com/tools/godep and try again.\n. @tchap can you paste the full output?\n. This works this way...\nconsole\n$ cd <path to blablabla>/workspace/src\n$ GOPATH=\"$(dirname $(dirname $(dirname $(pwd)))):$GOPATH\" godep save\nThat above works for me in a trivial test case.\n. @kamal-github Please open a new issue describing the problem and don't comment on an old issue.. Godep no longer works this way and we make the following assumptions:\n1. godep save was used and the _workspace was committed to git.\n2. If the dependencies were saved with the -r flag, the go tool itself w/o needing to modify $GOPATH or wrapping commands with godep can be used to go install the project. This is the recommended way to use godep and you will have the least amount of problems using it this way.\n3. If the dependencies were NOT saved with the -r flag, then one of two things must happen:\n   1. go tool commands to build code must be wrapped with godep, so godep go install and the like. This happens to re-exec the go tool with a modified $GOPATH, but this is just an implementation detail, subject to change at whim (although it is unlikely to).\n   2. godep restore must be run before using the go tool to build code. This modifies the copies of the dependencies in your $GOPATH by checking out the Revs for each dependency in the proper $GOPATH location. This is sub-optimal.\nI hope this help clarify things. I'll try to improve the docs.\nPS: rewrites do not work with the Go15 vendor/ experiment further complicating things, but this is be reflected in the docs already.\n. godep doesn't do anything with submodules AFAIK. Is this reproducible with the current version of godep and can a publicly accessible reproducer be made available?\n. Closing in favor of #271.\n. I am closing this because -copy=false hasn't been supported for a whule (since 754ee6f4e0e5fc8d0ef2692fb239d15c7a09dd84).\n. @duggan Why would you not import it as <canonical>/<package>/<sub package> ?\nFor instance when I have a \"local\" package of some sort I'll import it like github.com/freefromz/mypackage/subpackage instead of ./subpackage.\nOr do you always work outside of  $GOPATH (which AFAIK is the only place local imports work properly ... but I could be wrong)?\nAlso, AFAIK, relative import paths are discouraged.\n. @steenzout What project?\n. It needs to be in your path, just like go does for this to work.\n. This is maybe something we should report on when working on #273, but generally I agree. Closing.\n. @shutej it's primarily for other systems to know which version of go to select to build the code.\nUltimately godep will not be involved in building code. My plan is to deprecate godep go ... after Go 1.6 and remove it around Go 1.7. Once Go 1.6 is released people should switch to using vendor/ (this is possible now, but requires an ENV variable), which is supported by the go tool directly.\n. @neurogeek you may be interested in this one?\n. @neurogeek What are the use cases for an omit flag? My intent is not challenging it, I'm asking to clarify your reasoning.\n. @neurogeek I'd rather not add -omit if we can help it.\n@dsymonds Does this mean that users should import \"google.golang.org/appengine\" instead of import \"appengine\" and apply any updates necessary?\n. @dsymonds @ronoaldo For reference that README is here right? https://github.com/golang/appengine\n. Awesome. I'm going to close this issue out again then as I think it documents what people should do.\n. IMO these things are outside the scope of godep. You can't import a main package anymore starting with Go 1.5. If you vendor the code and have the go tools around you can still install it. So I'm going to close this. Thanks!\n. We have a bunch of other verbose output these days. If your are still interested in discussing something like this please re-open with an updated PR.\n. #108 is merged, so closing.\n. I rebased this on top of master and fixed a problem with the diff command.\n@kr @neurogeek I'm tempted to merge this at least because it stops common issues: (a) where people are working in a repo that isn't in version control (yet) and (b) the go code that you want to vendor deps for is a subdirectory of the VCS project.\nThis would close #107, #108, #173 (And maybe #43 and #48).\nPlease review/comment.\n. AFAIK godep save -r works with packages that also use godep as the dependent packages dependencies also get rewritten. godep does not use the deps from the dependency directly though and imports them from your local $GOPATH, which leads to different versions of the deps. So :-(\nAlso if your deps are rewriting and you are not it doesn't work. Probably vice versa as well. And I shudder to think about the case where one dep is and another isn't.\n. Closing in favor of #273 \n. @abhat Don't modify the GOPATH like that. Wrap the go commands with godep: e.g. godep go install ...\n. I'm going to close this as we now indicate which repo isn't using a VCS.\n. @abhat I really wish Kubernetes rewrote their deps so the restore and a few of their other dev bits wouldn't be necessary.\n. @themihai godep version ?\n. @least-olegs godep requires the commit sha / tag of the version of the code that it is copying. Without that info there is no way for godep to help you manage your dependencies.\n. @themihai godep version\n. @least-olegs godep does analyze all of your source code to determine which deps are in use and then copies those deps from $GOPATH into vendor/ (or, for older versions of Go, Godeps/_workspace/src). \n. @themihai that is a super old version, so am not surprised you are having issues.\n. @binary132 I'm not sure how you are using godeps then? It's really meant to be run at the top level of a repo. Maybe I should enforce that? Or will need to make tests to exercise other use cases.\n. That's a very unusual workspace (https://golang.org/doc/code.html#Workspaces). If you are going to check a $GOPATH entry in, why not just git subtree your deps into your tree instead?\n. @jnfeinstein Please rebase against master and I'll take a look.\n. Thanks @jnfeinstein. At this point I think we need to have the new exported method documented and a test case.\n. @kr That probably makes the most sense in most circumstances.\nalthough I do wonder if there is a case where the developer doesn't support building everything with a dep that uses a different build tag then the one they designed for.\n. That is correct, but since it's vendoring everything regardless of // +build it could include something the developer didn't intent to include/support, which could then be triggered with a -tag by the builder.\nNot sure if it matters though.\n. @jsha would it work for you guys if godep just included all the deps, ignoring // +build tags? Thereby punting the tagging off to those building the code later?\nIMO this is the best solution.\n. Great I am going to close this then in favor of: #271\n. Closing as it's been there for a while. \n. +1, although I would expand the go get statement to include all go * tasks (e.g. go test).\n. Thanks! Merging.\n. Project maybe no longer uses godep, so closing because I can't repro.\n. vendor/ provides some of this as you can have multiple vendor folders at different levels. I'm not yet sure we should support that and instead only make a top level vendor/ folder with everything flattened down into it with a way smarter system for package resolution.\n. Thanks, but I think the way we're going to approach this by vendoring everything regardless of build tags.\n. @kr what do you think about this? I'm tempted to merge this, but I'm not sure you would agree. You've previously stated that a -v option (across all commands I believe) would be nice.\n. @Soulou Are you interested in fixing this up? If not I will likely start on the feedback from @kr.\n. @Soulou Maybe need another tweak of the rewrite output?\nSome things I think would make it clearer:\n1) rewrite:\\t...\n2) Use relative file paths instead of full paths\n3) maybe don't bother with the new rewritten path? We basically know what it will be and I'm mostly interested in knowing a rewrite happened, not all the details.\n4) There is inconsistent quoting in package names (original is quoted, rewritten isn't).\n. re: #3 that would make -r=false less clear though. Hmm. \nAnother option would be to say \"unrewrite\" or \"undo rewrite\" then the relative path and the original package name.\nBasically I'm just trying to make that output a little more visually parseable. \n. @Soulou Any thoughts on the most recent feedback?\n. I also added a -v flag, but atm it only outputs skipped files, so please rebase.\n. I'm going to close this out for now. Please feel free to re-open with an updated, rebased PR. Thanks!\n. Thanks, but while this is supported by go it's actively discouraged and we won't support this.\n. @mariokostelac Can you rebase this and I'll check it out?\n. #152 is similar(ish) and merged. If you want to re-open a PR with cleaned up (or additional) output that would be great, but I'm going to close this for now.\n. @kr Yeah. I did. I think I meant to reference both #152 and #243, but got distracted part of the way through. Thanks\n. godep relies on the go tool and by extension things being compatible with a $GOPATH workspace layout.\n. Closing in favor of #86, which I believe is the same thing.\n. I don't understand the use case for selecting dependencies manually. The goal of godeps is to make builds repeatable by vendoring all dependencies. This seems to contradict this goal. \nSince this has been here a while I'm going to close this. Feel free to re-open with comments / mergable update if you still want to pursue this.\nThanks!\n. This is why I suggest that we change the behavior to just skip parsing of testdata directories and copy them as is.\n. @neurogeek Awesome. Thanks!\n. get is a holdover from when godep didn't save the files. You generally don't need to use it.\n. Closing in favor of #86 as well.\n. Already done in 3d123490b0a248b2dea64deee887504a63295717 so closing. Thanks!\n. @edsrzf Can you please rebase this and I'll take a look more?\n. @edsrzf Thanks I changed a little and merged it. Also added a -v flag to go so you can see what's skipped if you want to.\n. Thanks. I rebased and merged this via fc2e546d696e649f7309cce1a644a1057d3710d5\n. Closing in favor of #79 \n. Well this is a godep bug as godep should be smarter. ;-) This is basically a problem where godep uses go list and that tool will filter out files that don't match the current OS (like *_linux.go files on OSX) or build tags.\n. @Raffo What version of godep are you using (godep version)? This is actually fixed in current versions as godep is no longer using go list. PS: This may be why a new save is fixed things for you.\nClosing because the reported problem is fixed. \n. @tsuna look at list.go, the main driver being listPackage().\n. I think I've effectively closed this with ba35b97d0db08d8d57599079d99b65add0282b4e.\nPlease let me know (new PR / Issue) if we should do anything more.\nThanks!\n. This should now be fixed by #231.\n. What version of godep are you using? At this point godep no longer uses go list to resolve any dependencies and processes files/deps for all files except those that include the appengine or ignore build tags.\n. Great! Thanks. Closing. For anyone else on this ticket please re-open / post a follow up if, after updating, things aren't working for you.\n. @jzelinskie If so please file that as a separate issue unless someone else has already done so. ;-) \n. @brandur what project / revision was this on ?\n. @brandur Ahh yes, that makes sense. I'm going to close this as a dupe of #138 then.\n. godep save -r ./..., then you don't need godep exec\n. I don't think we're going to be adding an exec command in light of using rewriting now and the upcoming -vendor option to the go tooling. With either of those you should just be able to use the go toolchain normally and use godep \"just\" for managing dependencies.\nI'm not sure if @kr agrees with me or not however.\n. @tarrant Thanks for the PR, but I'm going to close this out, please consider using rewriting for now until go1.5's -vendor option becomes available.\n. @conslo Read down to the bottom: https://groups.google.com/forum/#!msg/golang-dev/74zjMON9glU/4lWCRDCRZg0J\n. @mpuncel How would godep restore work if different packages in the same repo are recorded at different versions? Which is the right version of the repository to restore to? That goes away when we can get rid of godep restore, which won't be until after Go 1.6 though.\n. @mpuncel agreed.\n. What is the use case here? Why would I want to vendor a \"package\" that I don't use in code?\n. I'm going to close this as I can't reproduce it. If this is still an issue please re-open with steps to reproduce.\n. Thank, but ...\nI don't think godep should be messing around with GIT_* environment variables. For instance this would mess with my own setup in a negative way as I rely on GIT_AUTHOR_EMAIL & GIT_AUTHOR_NAME at times. If you are using godep inside of a git hook you should unset GIT_DIR/GIT_INDEX_FILE before calling godep.\nFWIW: I'd be happy to re-visit this if a different solution is presented. \n. @ErikDubbelboer Those env vars are not being used inside of godep, but I am using them in my environment. Thanks for contributing.\n. Why not just rewrite the vendored deps and then there is no need for godep, except when managing deps?\n. After Go 1.6 godep path and rewritting is going to go away and we won't be adding a godep exec.\nGodep can't vendor gox, you should install it and use it as necessary.\n. We're supporting the go 1.5 vendor experiment, so I'm closing this.\nThanks!\n. #108 is merged, so closing.\n. Closing. See #161 \n. Thanks, but In #103 it was decided that people should upgrade their apps to the current appending libraries which aren't so strange AFAICT.\n. You could do this with the linker now, it would just be a bunch of convoluted uses of -X.\nA convention like this is better off made as a https://github.com/golang/proposal though.\n. Please PR if you are still interested in this. I think it's becoming increasingly important.\n. This should now be fixed by #231.\n. How about fmt.Errorf(\"error inspecting %q: %v\", dir, err) ?\n. This shouldn't happen now so closing. If it's still happening please re-open.\n. This was fixed in https://github.com/tools/godep/commit/6a67fc143981c5d893576c3fbeb964a3745d7b12\nThanks for taking the time to submit this.\n. We're supporting the go 1.5 vendor experiment so I'm closing this. Thanks!\n. I think I am running into this issue in an internal repo...\nbroker/io.go:8:2: code in directory /Users/emuller/go/src/github.com/heroku/busl/Godeps/_workspace/src/github.com/garyburd/redigo/redis expects import \"github.com/garyburd/redigo/redis\"\nWhen I look into the files there I see things like this...\nhttps://github.com/garyburd/redigo/blob/master/redis/conn_test.go#L27, which aren't rewritten, althought L28 is.\n. Hmm. Maybe this wasn't related to this problem as I've managed to resolve it with some updates.\n. @charleswli update requires you to specify a specific package. AFAIK ./... doesn't work with update.\n. The reported issue works for me. I made a test lib with a single function and used gomega to test it and ran godeps save and here's what it generated...\nconsole\n$ cat Godeps/Godeps.json\n{\n    \"ImportPath\": \"github.com/freeformz/t185\",\n    \"GoVersion\": \"go1.5\",\n    \"Packages\": [\n        \"./...\"\n    ],\n    \"Deps\": [\n        {\n            \"ImportPath\": \"github.com/onsi/ginkgo\",\n            \"Comment\": \"v1.2.0-6-gd981d36\",\n            \"Rev\": \"d981d36e9884231afa909627b9c275e4ba678f90\"\n        },\n        {\n            \"ImportPath\": \"github.com/onsi/gomega\",\n            \"Comment\": \"v1.0-28-g8adf9e1\",\n            \"Rev\": \"8adf9e1730c55cdc590de7d49766cb2acc88d8f2\"\n        }\n    ]\n}\n@jayunit100 What issue are you running into? \n. Great. Closing this issue as it appears to be solved.\n. This should now be fixed in v37. Please re-open if not. Thanks!\n. @neurogeek I would rather say that testdata files should just be copied over as is w/o attempting to parse. This is especially true as we move to the use of vendor/ and some of the discussions I've seen crop up around testing vendored code.\n. The stance of the go team/tooling is \"don't use symlinks\". Godep ends up utilizing that go tools / libs underneath and I'm of the opinion that supporting this will cause more issues than it solves.\nSo thank you for spending time on this issue, but I'm not going to accept this patch atm.\n. Does godep save -r=false not accomplish this?\n. @gfrey I'm not sure what you mean by \"given package\".\n. So you don't really want to unrewrite the import you want to remove it? If you remove all of the import statements imports a dependency and re-run godep save -r any no longer used imports will be removed from the workspace. The arguments to godep save aren't the packages that you want to vendor, they are the package spec(s) that you want to analyze for vendoring.\n. @gfrey that would confuse the meaning of the package spec passed to godep save, which is the packages you want to analyze dependencies for, usually '.' (the default), './...', or './cmd/...'. To be honest rewrites are going away as we approach Go 1.6 and the use of the vendor/ directory, so I'm tempted to close as won't fix with the expectation being that you would use the vendor directory directly w/o rewrites anyway. At that time a godep rm command (which doesn't exist) would solve your problem (or just rm stuff manually from vendor/). ATM godep save -r=false <your local package spec> will un-rewrite everything so you can still do what you want, it will just take a few extra commands before or after. \nDoes that make sense?\n. hg is one of the supported vcs systems. I don't use mercurial much so if there is a specific problem please re-open describing that. Thanks!\n. It looks like \"/home/geovani/Code/foo\" is outside of your GOPATH. godep really only works with packages inside of a GOPATH.\n. I don't think godep will (or should) support this.\nYou could rsync the package from one machine to another.\nOr use github (or other git hosting service).\n. Upgrade your go version as per @akavel.\nIf this still persists and you are also on the most recent version of godep (go get -u github.com/tools/godep) please re-open this issue.\n. I use gox to cross compile several projects that are under godep. \nThese tools run the go command you need to rewrite your dependencies (godep save -r ./...), then you  will no longer need to do godep go .... and will only need to use godep when adding new files to your application or managing dependencies.\n. @neurogeek +1 on your suggestions.\nAlthough I am personally wary of adding this. If you don't rewrite the files, you'll end up picking up the same dep from elsewhere. AFAIK if you could get 2 copies of the dependencies initialized. I think this will add confusion overall.\n. @activars \nCan't you use a directory structure like so:\n./cmd/cmd-b-name/main.go\n./cmd/cmd-b-name/main.go\n./common_package.go\nThe above is installable with go install ./... or via go get github.com/activars/mypackage/... (at least with rewrites).\nIf you can't can you please expand on your explanation as to why, perhaps with an example?\n. Also, the stance of the go team/tooling is \"don't use symlinks\". Godep ends up utilizing that go tools / libs underneath and I'm of the opinion that supporting this will cause more issues than it solves. This is one example of them.\nSo thank you for spending time on this issue, but I'm not going to accept this patch atm.\n. I suspect this was a bug that was fixed a few months ago as I can't duplicate and I remember we had a bug that sounded like this.\nAlso, as @kr points out rewrites aren't necessary with Go 1.5 + the vendor/ experiment. So closing. \nPlease re-open if this is still an issue.\n. ATM you need to manually prune out the olds locations and then godep save the new deps. You may be able to get away with doing a godep restore, blowing away $project/Godeps, updating the deps in your code and doing a new godep save. Or at least that's what I would try first.\n. godep does not upload or download source files, it manages package locally vendored copies from those installed into your $GOPATH.\nTry ..\n``` term\n$ go get -u gopkg.in/alecthomas/kingpin.v2\n$ cd $GOPATH/src/\nensure that you are importing \"gopkg.in/alecthomas/kingpin.v2\" in one of your files\n$ godep save -r ./...\n```\n. I cannot duplicate this with go from source as of today + current version of godep from source. Please re-open with a reproducible test case if this is still an issue.\nThanks!\n. If you are \"forking\" a repo for temporary fixes / updates and plan on merging things up stream I suggest just adding the fork as a remote to the original package.\nIf you are not then you want to change all/any of the package paths anyway as you're effectively working on a different package.\n. @gelraen Why does it require a makefile?\n1. I am using package X (which is also a github repo) in my project Y. The package I am using is vendored in the Godep workspace (or vendor/) of my project.\n2. I find a bug in package X, so I fork it on github.\n3. I cd $GOPATH/src/ and git remote add freeformz https://github.com/freeformz/X.git\n4. I create a branch, fix the bug, commit,git push freeformz bug_fix_branch.\n5. I go to gituhb and open a PR against X with my fixes.\n6. I go to project Y on the filesystem ($GOPATH/src/github.com/freeformz/Y) andgodep update X, which vendors what I currently have for X in my $GOPATH. I commit those vendored changes and push them to my public (or private) repo.\n7. Other's pull my code, with the vendored bits and use the vendored versions because they are in my repo and I'm using either a) rewriting; b) the GO15VENDOREXPERIMENT or; c)godep go install ./...` (my recommended order btw).\nNow eventually the upstream either merges my changes or I do in fact need to fork the project and maintain something else.\nIf they merge my changes I can checkout master on project X in my $GOPATH and godep update X in project Y, commit and push.\n. FWIW: This works fine for me unless the checked out version of gopkg.in\\flosch\\pongo2.v3 had uncommitted changes in it, hence the \"dirty working tree\" error. \n. If anything the _workspace folder and restore are going away with the advent of the vendor/ directory. You can't make reproducible builds if the code is not vendored, and that is the point of godep, so unfortunately -1.\nAFAIK: godep restore is there as a relic of the past. If I can make it go away (and I haven't spent the requisite time yet) it will.\n. If you update the paths in your code / Godeps.json file it should just work if the commits are the same. If not I would suggest the following:\n1. Checkout the new package (go get it).\n2. Update your code to use the new package.\n3. Remove the old package from Godeps/Godeps.json\n4. run godep save.\n. Maybe (and I'm not convinced this is the right thing to do) we could check to see if we have the commit in the repo first and only try to fetch if we don't have the repo and/or commit?\nOtherwise I'm not sure there is anything sensible to do here except bail out so the error can be corrected.\n. If we did this and the developer doing godep restore didn't have the repo locally in their $GOPATH we'd still have to fetch it anyway and bail out.\nWith that said fetching things we don't have is probably a fairly sane thing to do but could greatly complicate things.\nHonestly I think failing fast is still probably the best thing here.\nWhat do others think?\n. @lavalamp Doh!. Well my assertions still apply AFAICT.\n@tsuna What would be reasonable for godep to do?\n. I don't understand this use case though. \nGodep's goal is to vendor code for reproducible builds.\n. WRT Go: If you push me your repo or I check it out on a random machine, I need all the code in that repo to build the code. W/o all the necessary code I can't build the app.\n. @kr Thanks I was just about to attempt to write more or less the same thing. Thanks for being so eloquent as always.\n. @tsuna I'll have to think about it more. \n. As of 9570f62c8b83f643855711292495c37ebd2ceffc, godep uses the vcs list command, so that should close this. If I'm not understanding things right please re-open.\n. See comments on https://github.com/tools/godep/pull/214 for a workaround.\n. A workaround for this would be to checkout the github golang tools git repo to $GOPATH/src/golang/x/tools. After that you can use import \"golang.org/x/tools...\" and  godep save -r ./... as needed.\n. @kr Yes, perhaps we should.\n. I don't know if this is a good idea. What's the use case?\n. Wouldn't you want Godep to vendor the directory though?\n. @dprotaso any updates?\n. I'm going to close this out for now since there haven't been updates in a while. Please feel free to re-open / start new PR if you still think this feature is valuable.\n. confirmed.\n. Looking at rewrite.go (for the first time, so grain salt) this may actually be a bug in either go/parser or go/printer (or maybe go/ast).\n. FWIW: When the comment is removed things work correctly.\n. Comment text is preserved when the file is parsed. Comment.Text() for that Import returns the text found in the file.\n. Closing this as we merged the PR to fix it.\n. Thanks!\nMerged in 8063f550a728b76d3a1a828e45d482f7dbde61e7\n. @jeeyoungk what happens to the extra intermediate file?\n. @jeeyoungk you can just pass in the buffer itself as it also takes an io.Reader, which bytes.Buffer is.\n. LGTM. I tested this on a few random projects and it also fixes the bug originally reported.\n. Closing as @jeeyoungk updated his PR with basically the same thing.\n. I would also add a -r to that as well so that the dependencies get rewritten. This will allow you to not have to use godep unless you are modifying dependencies (i.e. you can just use go test and the like naked and the app is then go get 'able). Assuming it's an app and not a library.\n. @kr what are your thoughts on storing the -r flag (or detecting it) and picking up the package spec from an existing Godeps.json file if none is provided? \n. SGTM. I'm going to close this then as it's unlikely something that we'll do.\n. You likely need to re-vendor under the new paths?\n. You can't import another package's main package.\n. hunh. My bad. I thought you couldn't and never checked that assumption out.\n. @thockin Can you re-produce on a public repo that I can test with / base a test on?\n. I assume this happened on a godep restore?\nTBH: I'm more interested in how you got into that situation in the first case, which is what I'd like a reproducer for.\n. @thockin @kr agreed. \n. For each of the deps that aren't found, run go get -u <dep> to make sure you have them installed locally and then you will be able to run godep save.\nTBH though I'm not 100% sure that the side effects of using etcd like this.\n. @kr Should we instead resolve these dependencies to the versions vendored in the sub project?\nFor instance github.com/coreos/etcd/raft imports github.com/coreos/etcd/Godeps/_workspace/src/golang.org/x/net/context. ATM you have to have golang.org/x/net/context in your $GOPATH to be able to run godep save.\n. It worked for me: https://github.com/fsouza/go-dockerclient/pull/341\n. @apriendeau Do you have an example repo and steps to reproduce?\n. @apriendeau Sorry, I am lost. I am not sure what your starting point is above. \nCan you provide a step by step repro from a clean $GOPATH?\n. @timothysc Can you provide more information about what problem you are experiencing and/or put together a publicly accessible reproduction?\n. ATM, if you are vendoring etcd and it uses Godep to vendor net/context and you want to use the version of net/context that etcd vendors then you need to import it as:\nyour.package/Godeps/_workspace/src/github.com/coreos/etcd/Godeps/_workspace/src/golang.org/x/net/context\nGiven the go vendor experiment becoming the standard in 1.6 I'm not sure it's worth putting much effort behind godep save being able to handle this case.\nThoughts?\n. FWIW: This is also an issue with any nested vendor directory setup. I opened (or commented anyway) on a similar issue against Go itself. The only real way to handle this is to flatten the deps so there is only one  google.golang.org/grpc package in use. I'd like to teach godep to do this (it already does it for the older workspace format). It needs to be taught how to check both and DTRT. Hopefully later this month unless someone else shows up with PRs.\n. @thockin While it may be nice, I wonder if the possible vectors for confusion would be worth it.\n. See #240. I'm going to close this and urge anyone with input to discuss there. Thanks!\n. I don't think that's something Godep should really be involved in. \nIf you feel different I suggest opening an issue on https://github.com/kardianos/vendor-spec, which will likely be supported in the future.\nThank You!\n. Godep is truncating data, probably because the line being truncated is longer than 64k. If I'm right I may have a fix soon.\n. This should now be fixed by #231, so please go get -u github.com/tools/godep and re-open if this is still a problem (PS: You may need to cleanup your broken workspace first).\n. I do not have that problem at v0.9.0-100-g38b4f07 of influxdb/client. Try an updated version?\n. You need to run go generate inside the workspace. \nTry this...\nbash\ncd <your repo>\nOGOPATH=$GOPATH\nGOPATH=$(godep path)\ncd Godeps/_workspace/src/github.com/btcsuite/btcd/btcec\ngo generate \nGOPATH=$OGOPATH\ncd <root of your repo>\ngodep go install ./...\nYou will have to check the generate code in though, which you may not want to do.\nYour other option would be to wrap the build in a Makefile. This is because go generate is meant to be run before building by design.\n. @kr Gah, you are correct. I fixed it in #231. btcd already ran and saved the go generated bits, which were truncated silently by that bug, but would have been fixed by my example above (AFAICT).\n. @kr Done. If it LGTY, then I'll merge it.\n. Do you have syntastic enabled?\n. FWIW: I removed syntastic from my vim setup and similar issues are now resolved for me.\n. @fatih thanks btw.\n. @kr @neurogeek I've already run into this once with a user having previously installed godep via amd64 on darwin and then updating to a newer go version, but using the 386 package instead and then having issues pushing code.  So unless you have any objections wrt the implementation I'm going to merge this at some point.\n. godep restore modifies stuff in your $GOPATH by cloning repos and attempting to checkout the specified revisions. It's all about messing with your $GOPATH. I generally recommend using rewrites limiting the need for restore to primary developers. With the vendor experiment this becomes even less necessary.\n. LGTM modulo questions.\n. @kr I'm going to merge this so things stop failing as Travis seems to default to ruby.\n. @kr Also my bad. Was kind of trigger happy.\n. @kr yes. Playing with it I just blew away log-shuttle's Godeps directory and didn't migrate anything.\nThe other thing that came up is what to do with vendored deps inside of vendored deps. There are several (many?) libraries that can't safely be vendored inside of vendored deps (lib/pq is one example). \nShould they be extracted to a top level? What if your package and a package you vendor both require the same lib. What if they are different versions? Just error out? \nHow does all of that affect things like  the cmd/CmdName structure where the root of your package is a library (which should or should not vendor stuff), but the library had deps and the cmd uses the library?\nAlso not sure how much of this tools like godep/vendor/nut/etc should care about.\n. @azylman While it allows it will cause problems. For instance if multiple things import multiple lib/pq's database/sql will panic because of multiple registrations in the same namespace (making few assumptions here). That is one example of course, but many things assume they'll be initialized once. That is at least one reason, there are probably more.\n. Closing this in favor of #244 / fe7138c\n. LGTM. Sorry about merging that too fast. I really wanted travis to stop erroring (and emailing me). Merge away.\n. I don't like the output of restore in verbose mode, but it's what get's output by go's tools/vcs stuff. We could clean that up later as I think this is helpful as is, modulo a few changes (which I'm just doing).\n. Thanks! merged\n. @kr Updated with suggestions.\nRe: What more. TBH I think this is enough for now. It's usable for me w/o changes to my workflow (modulo https://github.com/golang/go/issues/11659 anyway).\n. @kr just to be clear I don't think that golang issue should block. Just pointing it out.\n. @kr I also added docs and fixed an issue, so if you could take another look ++.\n. @kr I think I'd rather leave the file where it is. For now at least.\n. @kr Yeah, sorry I got distracted after the merge with other work.\n. @pierrre Not 100%, but essentially yes.\n. Hmm. Godep uses go's own libraries/tools to handle package/file selection, which basically ignores everything that isn't a *.go file. This is unlikely to be a \"trivial\" fix. :-( \n. I am okay with it. Basic implementation would be to do a case insensitive check for common License files (LICENSE, LICENSE.TXT, LICENSE.MD, ??) in the root of a repo and include the file if it exists. @ahmetalpbalkan Feel free to work on it and submit a PR when you are ready.\n. @ahmetalpbalkan Recent changes I made to the vcs file listing commands should play well with this. vcs also now has a way to determine the repo root (since it's given the package path).\n. @client9 A PR for the functionality described in this issue would be great!\n. @client9 Go for it. My focus for the next week or so is elsewhere (other projects) unfortunately. I'm just trying to keep anything godep related (Issues/PRs) moving along until I can get back to working directly on things.\n. Godep isn't really designed for this scenario.\nPersonally, I would do the above differently, like so:\nterm\n$ export GOPATH=~/go\n$ mkdir -p ~/go/src/github.com/freeformz/project-dir\n$ cd ~/go/src/github.com/freeformz/project-dir\n$ mkdir pkg1\n$ mkdir pkg2\n$ .... code .....\n$ godep save -r ./...\n$ go test -v -race ./...\n...\nThe above would make pkg1 and pkg2 available to any other project in my $GOPATH as import github.com/freeformz/project-dir/pkg1 and import github.com/freeformz/project-dir/pkg2, although I would then vendor + rewrite them for use in other projects.\nIf you want to work on \"projects\" in the way you describe then I suggest checking out https://github.com/constabulary/gb\n. Do you have a simple case / repo that we can use to reproduce?\n. @brandur Thanks! Merged.\n. @neurogeek I am not sure, we discussed that @ Gophercon but there wasn't any resolution. Another idea was to use tags and travis to do binary releases to github, but people are still likely to go get godep and we still won't know what version is in use.\nMaybe a merge checklist? Even then you can forget to do it.\n. @neurogeek I'm going to merge this in for now. If we forget to increment the number then at least we know what could possibly be included (last version change and later), where now we don't know.\n. It's updatable like any other go gettable application: go get -u github.com/tools/godep\n. @jacobsa Sorry about that.\n. And I have confirmed the bug with a test app.\n. @jacobsa If you update godep (go get -u github.com/tools/godep) you should be good to go.\n. How do I reproduce this?\n. @sundarv85 rewrite your import paths (the -r option) is the way to work around having to use godep restore for the common cases (you will still need to do this before a godep update though).\n. Works fine for me.\n. Is your godep current (go get -u github.com/tools/godep)?\n. Okay. I was able to duplicate the issue, but I think it's a problem with the github.com/cloudfoundry/sonde-go/events, which won't compile on master (the same commit that is vendored) with the same errors.\n. /cc https://github.com/cloudfoundry/sonde-go\n. Ahh so the problem appears to be with the vendored version of gogo protobufs.\nThis commit updates deps a bit...\nhttps://github.com/shinji62/firehose-to-syslog/compare/feature/update-sonde-go...freeformz:feature/update-sonde-go\nAnd the resulting errors are with the code in the repo.\n. @shinji62 I would try to pull in the linked patch, which updates gogo protobufs, then fix the issues in the code locally.\n. @shinji62 no worries.\n. @JanSichula I'm going to have to setup a windows environment to test.\n. @JanSichula Which version of windows is this?\n. @JanSichula I was able to repo and make a small fix. Was exactly what I thought it was. Thanks!\n. @JanSichula Great. Let me know if you run into other troubles.\n. @kr @neurogeek For your review.\n. @neurogeek Thanks!\n. @kr Crap. Sorry I clicked the merge button. Habits. :-( \n. @windweller I can't reproduce this error. To test I put together 2 sample projects in my $GOPATH like so..\n``` term\n$ echo $GOPATH\n/Users/emuller/go\n$ cd $GOPATH/src\n/Users/emuller/go/src\n$ cat projA/comm/a.go\npackage comm\nconst Variable = \"Hello From projA/comm\"\n$ cat projB/b.go\npackage main\nimport (\n    \"fmt\"\n    \"projA/comm\"\n)\nfunc main() {\n    fmt.Println(comm.Variable)\n}\n$ cd projB\n$ find .\n.\n./b.go\n./Godeps\n./Godeps/_workspace\n./Godeps/_workspace/.gitignore\n./Godeps/_workspace/src\n./Godeps/_workspace/src/projA\n./Godeps/_workspace/src/projA/comm\n./Godeps/_workspace/src/projA/comm/a.go\n./Godeps/Godeps.json\n./Godeps/Readme\n$ godep go run b.go\nHello From projA/comm\n```\nprojA was saved inside of projB with godep save ./... after b.go was written.\nCan you provide steps to reproduce?\n. Oh wait this was about godep restore. I get that same error. But you only ever need to do a restore if you want to reset the copies of a dependency in your GOPATH  to the vendored versions. This is still a bug though as projA/comm is valid AFAIK.\n. So while it's technically possible to do so in Go, atm godep (because of it's use of the go toolings vcs library) only fully supports packages in host/user/pkg format. But ...\nYou do not need to run godep restore if you wrap your go commands with godep. So godep go install ./.... Furthermore if you rewrite your deps (godep save -r ./...) you don't need to use godep on the server at all.\n. The way I would do this is ...\nWhen writing code use godep save -r ./....\nWhen installing code run go install -v ./....\n. @cdeadlock I don't understand the linked repo and what it's trying to do show.\n. BTW: I get this error with the \"graceful\" version even without involving godeps at all:\n[martini] PANIC: Value not found for type martini.Context\n/usr/local/go/src/runtime/panic.go:387 (0x145c8)\n    gopanic: reflectcall(unsafe.Pointer(d.fn), deferArgs(d), uint32(d.siz), uint32(d.siz))\n/Users/emuller/go/src/github.com/go-martini/martini/martini.go:175 (0xaa8a6)\n    (*context).run: panic(err)\n/Users/emuller/go/src/github.com/go-martini/martini/martini.go:164 (0xaa773)\n    (*context).Next: c.run()\n/Users/emuller/go/src/github.com/go-martini/martini/recovery.go:140 (0xafb99)\n    func.004: c.Next()\n/usr/local/go/src/runtime/asm_amd64.s:402 (0x3cb05)\n    call32: CALLFN(\u00b7call32, 32)\n/usr/local/go/src/reflect/value.go:419 (0xd78d5)\n    Value.call: call(fn, args, uint32(frametype.size), uint32(retOffset))\n/usr/local/go/src/reflect/value.go:296 (0xd66cc)\n    Value.Call: return v.call(\"Call\", in)\n/Users/emuller/go/src/github.com/codegangsta/inject/inject.go:102 (0x187b97)\n    (*injector).Invoke: return reflect.ValueOf(f).Call(in), nil\n/Users/emuller/go/src/github.com/go-martini/martini/martini.go:173 (0xaa861)\n    (*context).run: _, err := c.Invoke(c.handler())\n/Users/emuller/go/src/github.com/go-martini/martini/martini.go:164 (0xaa773)\n    (*context).Next: c.run()\n/Users/emuller/go/src/github.com/go-martini/martini/logger.go:25 (0xaf29f)\n    func.001: c.Next()\n/usr/local/go/src/runtime/asm_amd64.s:403 (0x3cb75)\n    call64: CALLFN(\u00b7call64, 64)\n/usr/local/go/src/reflect/value.go:419 (0xd78d5)\n    Value.call: call(fn, args, uint32(frametype.size), uint32(retOffset))\n/usr/local/go/src/reflect/value.go:296 (0xd66cc)\n    Value.Call: return v.call(\"Call\", in)\n/Users/emuller/go/src/github.com/codegangsta/inject/inject.go:102 (0x187b97)\n    (*injector).Invoke: return reflect.ValueOf(f).Call(in), nil\n/Users/emuller/go/src/github.com/go-martini/martini/martini.go:173 (0xaa861)\n    (*context).run: _, err := c.Invoke(c.handler())\n/Users/emuller/go/src/github.com/go-martini/martini/martini.go:69 (0xa95e4)\n    (*Martini).ServeHTTP: m.createContext(res, req).run()\n/usr/local/go/src/net/http/server.go:1703 (0x6e51a)\n    serverHandler.ServeHTTP: handler.ServeHTTP(rw, req)\n/usr/local/go/src/net/http/server.go:1204 (0x6bfe7)\n    (*conn).serve: serverHandler{c.server}.ServeHTTP(w, w.req)\n/usr/local/go/src/runtime/asm_amd64.s:2232 (0x3ebc1)\n    goexit:\n[martini] Completed 500 Internal Server Error in 8.869917ms\n. @cdeadlock The code here works (either version): https://github.com/freeformz/grb\nI updated martini after posting and before saving the deps.\n. @cdeadlock the repo I linked to is my recommended project layout as inspired by https://medium.com/@benbjohnson/structuring-applications-in-go-3b04be4ff091\n. This is why I highly suggest using godep save -r ./... as name spacing compiled stuff can become an issue.\nIf things get to messed up you can nuke your packages directory ($GOPATH/pkg) and it's sub-dirs and go install -v ./... will show you what it's re-compiling.\n. Sorry about that. I'm not really sure how this ever worked. Why not clean this up and use godep to vendor everything?\nAlso can you provide a publicly accessible repository that duplicates the issue?\nPS: What is your $GOPATH set to?\n. So it looks like a mix of git and hg then. FWIW I would use godep to vendor those deps and remove them  from the other locations.\n. Thanks. One more small change and we're good. Thanks!\n. AFAICT this doesn't skip at the right place as per your description. It skips errors in parsing the GoDeps file, not on restore.\n. There are other errors that can occur. Please generalize the message and report the error.\n. Also needs a rebase.\n. I am going to close this since there haven't been any updates in ~ 2 weeks or so. Please feel free to re-open with an updated branch if this feature is still important to you. Thanks!\n. Orly? I use goimports with godep save -r all the time.\n. Interesting to note. I've seen this, but I end up doing a save -r ./... to rewrite files whenever I add a new one so it hasn't bothered me. It probably should though. TBH this won't be needed at some point with vendor/ being a thing (which is incompatible with rewrites).\n. that would be awesome.\n. Yeah. it's sub optimal (save vs. save -r). We could record what was used in Godeps.json, but that will also cause it's own set of problems at times. Plus rewriting should be going away pending the outcome of the 1.5 vendor experiment, so I really haven't had enough incentive to do anything.\n. See my comments. Eyeballing the testdata looks good.\n. @neurogeek I rebased and merged this as aeda8bab6aa7e64e94a83b40e29858daeb85ee87\n. FWIW: I am slowly working through the godep code to understand it's idiosyncrasies better than I do now and with an eye towards this. No promises and if anyone surprised me with a patch that would close this issue I wouldn't complain. ;-) \n. @mattfarina What needs did you feel were not met?\n. @captncraig Yep. I've spent a lot of time going down that same path and before I went on vacation (which I'm back from) I started writing my own version of go/build.Context because of this. It's no where near ready though. ;-) \n. FWIW: I'm acutely aware of this issue every day.\n. What version of godep are you using? What is the output of godep version?\nCan you link to your repo or is it private?\nCan you provide a publicly accessible reproduction (a public repo with a project the shows this issue)?\n. @neurogeek Doh. I blame being up early for the first day of school for not realizing that. ;-)\n. #276 should fix this once I get it reviewed by other maintainers and merged.\n. @neurogeek @kr this is on top of #275.\n. @eparis Doh! I fixed this in v10. Sorry about that.\n. @ahmetalpbalkan I can't duplicate this. I added an import for check.v1 to a main.go file and then used the C struct from there and godep save worked and did the right thing (added the dep to Godeps/Godeps.json and vendored the files in vendor/)\nAre you using check in a test file? I tried that as well (making a main_test) and godep save DTRT as well.\nWhat Go version are you using?\nWhat Godep version are you using?\nWhat is your $GOPATH?\n. Ahh. I was able to repro! Had an idea after posting that.\nI had to delete (remove from my $GOPATH) gopkg.in/yaml.v2. A godep restore solved that.\nMaybe you temporarily had a different $GOPATH set? One without gopkg.in/yaml.v2 in it?\n. well I can duplicate by removing gopkg.in/yaml.v2 from $GOPATH. I think this is a bug in vendor/support because the go tool should be able to find the package in the vendor directory. We're just doing go list -e -json.\n. ahh I forgot that the go tooling internally add vendor to all things in vendor. So it can't find it becuse go list returns \"github.com/freeformz/t/vendor/gopkg.in/yaml.v2\" in my case.\n. So currently godep strips out the vendor part of the path and then passes a constructed list of all flattened paths to go list -e -json, which then can't find gopkg.in/yaml.v2 because in the context of go list in my test app it's really github.com/freeformz/t/vendor/gopkg.in/yaml.v2. This isn't trivial to fix AFAICT, especially when dealing with vendor/ behavior vs. Godeps/_workspace. But probably worth the investment in time.\n. PS: For now the best way to handle new godep save is to do a godep restore before hand, ensuring that your GOPATH contains all of the required dependencies at the right versions before doing the new save.\n. on second thought godep save (which is perhaps now not aptly named) already removes dependencies when they are no longer used by your code base. The main idea behind this is you shouldn't be thinking about adding/removing dependencies by hand, just re-run save and let it DTRT.\n. What revision of github.com/influxdb/influxdb is vendored? What is the \"Rev\" key for it from your Godeps/Godeps.json file?\n. Also, what version of godep are you using?\n. while testing this I get the same thing with a simple go get -u of github.com/influxdb/influxdb (before \nconsole\n$ go get -u github.com/influxdb/influxdb\npackage golang.org/x/crypto/bcrypt: cannot find package \"golang.org/x/crypto/bcrypt\" in any of:\n    /usr/local/go/src/golang.org/x/crypto/bcrypt (from $GOROOT)\n    /Users/emuller/go/src/golang.org/x/crypto/bcrypt (from $GOPATH)\nI ended up having to remove $GOPATH/src/golang.org/x/crypto from my $GOPATH. I suspect that the golang.org/x/crypto package is somehow incomplete and suggest removing it and then either re-fetching or using godep restore.\n. What version of go are you using?\n. What happens if you run golang.org/x/crypto/bcrypt ? What is the output of that?\n. go get ....\n\nOn Sep 24, 2015, at 17:56, Li Yichao notifications@github.com wrote:\nYou mean godep go get golang.org/x/crypto/bcrypt or go get golang.org/x/crypto/bcrypt?\n\u2014\nReply to this email directly or view it on GitHub.\n. Are you in China?\n\nIf so the great firewall blocks golang.org AFAIK and you will need to do the following:\nconsole\n$ mkdir -p $GOPATH/src/golang.org/x\n$ cd $GOPATH/src/golang.org/x\n$ git clone https://go.googlesource.com/crypto\n. Thanks!\n. Sure, care to update this and add a 'v' in front of the version? If you can back track this a little as well that would be good, but not 100% necessary.\n. @buddhamagnet looks great! I squashed them all down to a single commit and merged them. Thanks!\n. Merged! thanks!\n. I think Command belongs in main as it's mostly involved with the setup and execution of the various commands anyway. Good place to keep all the code, at least for now.\n. Thanks!\n. @ncdc sorry for the delay, I was on vacation for a little over a week.\nAFAICT there would also be an issue with resolving dependencies as well and recording the correct one.\nThis would be required anyway though.\nSo LGTM, merged!\n. I pushed a tag and I'll endeavor to do that in the future as well.\n. @kr @neurogeek thoughts?\n. @kr Re: Security. My goal is to just automate the creation of releases when tags are pushed. I don't intend to tackle the other parts of #110 really for all of the reasons you mention. IMO for \"normal\" use cases trusting Travis + GitHub and their certs is probably fine for the 90% of people wanting to curl down a release. I understand that isn't \"secure\" though in any way.\n. +1, merging because this isn't meant to address the security part.\n. :+1: \n@tsuna how about telling the user \"how\" to update first?\n. May also want to indicate the relationship between the two packages. \"packages belong to same repo\" or some such?\n. This should also fix #86 \n. @tsuna thanks. merged.\n. What happens if you go get each of your dependencies? Which one(s) print the same error?\n. I was able to reproduce with a simple test project. :-( Looking.\n. Well godep save -v tells me what's going on:\nconsole\n$ godep save -v\ngodep: save: skipping untracked file: /Users/emuller/go/src/code.google.com/p/go-uuid/uuid/LICENSE\ngodep: save: skipping untracked file: /Users/emuller/go/src/code.google.com/p/go-uuid/uuid/dce.go\ngodep: save: skipping untracked file: /Users/emuller/go/src/code.google.com/p/go-uuid/uuid/doc.go\ngodep: save: skipping untracked file: /Users/emuller/go/src/code.google.com/p/go-uuid/uuid/hash.go\ngodep: save: skipping untracked file: /Users/emuller/go/src/code.google.com/p/go-uuid/uuid/json.go\ngodep: save: skipping test file: /Users/emuller/go/src/code.google.com/p/go-uuid/uuid/json_test.go\ngodep: save: skipping untracked file: /Users/emuller/go/src/code.google.com/p/go-uuid/uuid/node.go\ngodep: save: skipping test file: /Users/emuller/go/src/code.google.com/p/go-uuid/uuid/seq_test.go\ngodep: save: skipping untracked file: /Users/emuller/go/src/code.google.com/p/go-uuid/uuid/time.go\ngodep: save: skipping untracked file: /Users/emuller/go/src/code.google.com/p/go-uuid/uuid/util.go\ngodep: save: skipping untracked file: /Users/emuller/go/src/code.google.com/p/go-uuid/uuid/uuid.go\ngodep: save: skipping test file: /Users/emuller/go/src/code.google.com/p/go-uuid/uuid/uuid_test.go\ngodep: save: skipping untracked file: /Users/emuller/go/src/code.google.com/p/go-uuid/uuid/version1.go\ngodep: save: skipping untracked file: /Users/emuller/go/src/code.google.com/p/go-uuid/uuid/version4.go\nDef a bug.\n. @client9 it would because that uses git. Basically hg had a bug in it when there were sub packages in play. This is now resolved.\n@awsmsrc You should switch to the package @client9 mentions though regardless. \n. go get -u github.com/tools/godep will upgrade your local install of godep.\nYou can now also download binaries as well from https://github.com/tools/godep/releases, but go get -u is easier if you already have a working Go setup.\n. There are no files in contrib, they are in sub packages so you need to do godep get github.com/gin-gonic/contrib/<sub package you want>\n. The output of godep restore -v is sub optimal atm, but you don't need -v to see the error messages, normal godep restore will output any errors (as will -v, you'll just have a bunch of extra output as well).\ngodep restore is what attempts to set the state of your dependencies in your $GOPATH to what they are in your repo. To do this it first downloads (via go get -d) each of the packages in your Godeps/Godeps.json file and then using the proper vcs for each package's repo attempts to checkout the recorded version. \nGiven that explanation, are you having a specific problem with anything?\n. Can you include the copy of the error and your Godeps.json file?\n. Yes so godep tries to 'go get -d' those packages and if it can't you'll get those errors. The go tooling only works off of master atm. So you'll get those errors since those packages don't exist on master anymore. \nWe probably want to switch to using the appropriate vcs to checkout the right repo instead of go get, but that's probably more work than I think it will be.\nthis is also probably a source of a lot of restore issue and frustration.\nThe only way to resolve this atm is manually with something like:\n1. go get -u \n2. Update your code/removing references to no longer supported packages.\n3. Remove the old packages from Godeps/Godeps.json.\n4. godep save to vendor your new imports.\n. It's used in the heroku buildpack to determine what version of go should be used to compile the provided code. I have thought about doing something similar in the heroku buildpack (where '1.4.*' would mean the latest patch revision of 1.4'. Beyond that I consider it an optional field as godep really shouldn't be involved with compiling code in any way in the long term. But also note that godep will update that value if you save and are running a newer version.\n. That would be great!\n. We should. PRs always welcome ;-). I'll see if I can get to it sometime soon.\n. I have been thinking about doing just this thing, so that when GO15VENDOREXPERIMENT=1 is set to have godep get DL directly into the vendor/ directory. It's pretty much what I would expect.\n. I am, but I don't have a timeline atm.\n. This would make the code unbuildable w/o those packages, so I can't accept this.\n. Looks like a good start.\nAny reason why we shouldn't include this as a library though?\nWrt using it ...\ngodep (generally speaking) uses absolute paths to files it finds in the repo. copySrc uses vcs.listFiles()  to get that list and copyPkgFile to conditionally copy the files into the vendor directory.\nSo IMO IsLicenseFile and IsLegalFile should take into consideration that it may get a full (or partial) path to a filename, not just the basename\n. @client9 vcs.listFiles() already produces a list of all possible filenames (with absolute paths) that would be considered for copying. Each of those is passed to copyPkgFile, where filtering takes place (arguably the filtering should be in a separate function) and if not filtered out the file is then copied. Please take a look at those functions as you can probably just hook into copyPkgFile.\n. @client9 After reading your comment I realized that dep.dir could be a sub package as well, which I didn't consider last night, so you'll only be walking through the files in that sub package.\nAnother loop, using the contents of vf, which contains all tracked files in the repo (as absolute paths) is possibly the way to go?\n. @client9 Cool, let me know when I should re-review the PR.\n. @client9 Thanks, merged after a rebase/squash/version/changelog addition.\n. dcbe29c7a18887497b4857e64665d25be43f7c7e\n. What about other vcs?\n. @rasky I'll accept this if we can cover all vcs types. Tests would also be good.\nI also need to think about this a little more. What does it mean if the repo is dirty, with changes elsewhere but the particular package is \"clean\",  I think erroring out is still the sanest path.\n. 2 months w/o movement, so closing for now. Please re-open if you are still interested.\n. What is the vcs root in the above example? I assume it's the parent directory of dirty and help as in the example?\n. @rasky I am trying to understand what's going on here and the motivators. Godep is designed to be run in the top package of a repo. There is nothing in your PR BTW.\n. Sorry, I missed the . in the diff (I thought it was only a space via a quick glance). My bad.\nRe: description.\nAs I said godep is designed to work against the top level package of a repo. You are asking for a fundamental change to the tool.\n. PS: I guess I've already started that fundamental change with previous changes, so I'll have to think about this more.\n. @rasky That's for a dependency, not for the repo you are vendoring into. In your example, let's say golang.org/x/crypto/ssh needed to vendor something, godep save should only be run at the golang.org/x/crypto level.\n. @Alex-Addy You do not need to use godep to build if you a) rewrite your deps or b) are using go1.5+ with the GO15VENDOREXPERIMENT=1. Both of those are recommended over using godep to build.\n. @Alex-Addy godep should only be used from the root package of a repo. If a repo contains multiple packages you should not be running godep save in each package, but in the root package for that repo and use a more inclusive package selector (./..., ./<dira> ./<dirb>, etc).\n. It's because you specified ./... with go test. Which means you are running all of your tests and all tests inside the vendor/ directory. Go test needs to build the code first so you run into this error. In go 1.5+ you can't import main packages (you could previously), so I think it makes sense for us to not vendor them. I won't be able to look into this more until later in the week / early next week, but will do so.\n. When you say 'adjacent' directory, what do you mean. Can you give me an example package directory structure?\n. @aj0strow Can I get your Heroku ticket #?\n. Moving this back to that Heroku ticket for now. Will update either this issue or open a new one pending the outcome there.\n. Turns out that you can also add the package to the godep save command line package spec. BUT, that's unlikely to work with the GO15VENDOREXPERIMENT.\n. Interesting. There used to be a bug like this, but it's been fixed for months. What version of godep are you using (godep version)? Can you produce a public repo that reproduces?\n. I was thinking of issue #231, which was about long lines, not really long files per se, but should be fixed anyway.\n. @client9 Any commits merged to master should include a version bump, a changelog entry and a tag. Since that's a manualish process it hasn't gone as smoothly as I'd like. Improvements to the process that continue to maintain godep's go getableness are appreciated.\n. That already exists https://github.com/tools/godep/blob/58b9be6061a97e574c0695d6f15031f8b01a9629/main.go#L83-L86\n. No, thank you!\n. -t wasn't propagated to update. This should be fixed. If you have time/interested in doing a PR, great. If not I'll probably get to it either later today or tomorrow.\n. Thanks @kr. See #316 \n. how about this instead?\n``` go\nfunc runIn(dir, name string, args ...string) error {\n    c := exec.Command(name, args...)\n    c.Dir = dir\n    output, err := c.CombinedOutput()\nif verbose {\n    fmt.Printf(\"execute: %+v\\n\", c)\n    fmt.Printf(\" output: %s\\n\", output)\n}\n\nreturn err\n\n}\n```\nSeems simpler and maintains intent AFAICT.\n. @jmhodges Thanks, merged as 605fb21360e22cca107bdc4d0c972cbf14353977 (I assume due to a rebase).\n. I'm not sure I follow. Do you mean editing files in <proj>/Godeps/_workspace/src/..? \n. @kr I was around. ;-)\n. Merged as: 0a8bd86405086a8fe6ceb91efc7214ebef864da8, so closing this.\n. Merged as e9ac6d762b492fd3c1fbf50e7c50f8ba64b9c42e\n. I think I'm alright with is as well (which is a change from my initial reaction).  Asking around a little internally as well.\nI would like to land a change to heroku/heroku-buildpack-go to select the latest minor version of the specified major version before merging a PR that implements @kr's suggestion.\n. @jtarchie If this lands before the buildpack changes they will be tied to the major go version until the BP can resolve the latest minor release (assuming they update their Godeps.json file and push). I don't like that behavior.\n. @flavorjones #342 merged as v39.\n. What would restoring from the Godeps workspace mean? We don't vendor the entire repository of packages being used, including the commit history, just the packages being used and the commit hash.\n. @matejkramny it's what is used to build a project and the only way to guarantee that the code is available is to commit it along with our own code.\n. To fully restore the repos that the packages live in to the $GOPATH. If we didn't do that there would be missing packages/tests/etc in your $GOPATH.\nFWIW: My plan is to remove restore sometime after most people appear to be using go1.6+ and using the GO15VENDOREXPERIMENT. So probably around the go1.7 timeframe. I'm hoping other maintainers/users agree with that (TBD).\n. I'm pretty sure I know why. Not sure what to do about it. Need to see if I can make a test case for this as well.\n. I don't think we can rely on go get to DTRT for downloads. The internal package doesn't exist in master anymore, so go getting the package first produces this error.\n. It's probably best if you want to discuss these / work these through to split this PR into two. One for each issue.\nPS: Symlinks inside $GOPATH aren't really supported (ex. https://groups.google.com/d/msg/golang-dev/GLUZGtUSj8A/SGUtCooLIT0J), so I'm curious as to how you are using them and why we would need to resolve them.\n. Thank you!\n. I started looking into this and I think this is really a side effect of a bug in /vendor/ (and possibly Godeps workspace handling or because of it). I'm digging in more.\n. Merged as 5e3d21abab679aef179d5dce308289619a59cf22\nThanks!\n. @sbogacz @michaeltrobinson This may be fixed in master now, can you please confirm.\n. @michaeltrobinson Great. I'm going to close this then. Thanks!\n. FWIW: Godep should support this as it knowns about both styles, old Godeps with and without rewrites and vendor. I hope to fix that issue \"soonish\", but don't know when I'll get to it.\n. Agreed. It's pretty low on my priority list atm, given the other issues related to vendor/ vs. Godeps workspace vs. Godeps workspace with rewrites. If you would like to take a crack at it though that would be great.\n. I don't understand this use case.\nI use and have several multi-command repositories that use godep.\nHere is one of them: https://github.com/heroku/shh\nWhen working with this project we cd into $GOPATH/src/github.com/heroku/shh and run godep save -r ./... and all of the deps for everything are vendored/rewritten.\n. a) godep is meant to be run against the root of a repo containing one or more packages. If you have a structure of ./mylib/cmd/cmdname and run godep save in the cmdname directory mylib will be vendored again in cmdname's Godep workspace. This will likely lead to additional confusion.\nb) A PR that changes a single vcs command will not be accepted unless all vcs commands are updated, or proven to not need the same update. In the past this has led to problems/breakage in other vcs.\nc) The change probably doesn't do what you want as git diff <rev> . still considers sub dirs of .. So if you are running this in a cmd directory it will detect the library as dirty if any of the sub dirs/packages are dirty. Or at least it does with my version of git (2.6.3) / local config. I googled around for a \"fix\", but I don't think there's a simple fix to this w/o filtering things like dirstat output.\n. FWIW: I think the point of isDirty(dir,rev) was to determine if the repo root is dirty, not any given directory in a repo, but I'd have to let @kr chime in.\n. @azylman if that unmodified package pulls in other packages in the same repo that aren dirty and have local changes that you rely on? I guess we'd pick that up as a dependency on bomb out there though. So no, I don't think there's any problem with doing that, code just need to be adjusted properly.\n. FWIW This only works with git, what about the other vcs? Whatever we do we need to be able to support it across all supported vcs implementations.\n. Try unsetting $GIT_DIR maybe?\n. Oh duh on me. That's probably because godep save adds files to the repository, leaving it in a dirty state.\n. godep save will will copy deps to <proj>/Godeps/_workspace/src. At that point the tree is dirty. At the very least least the hook needs to git add -A Godeps after the godep save.\n. Tested this and with a few minor changes to the hook, it works currently.\nThis is the hook I used....\n``` bash\n!/bin/bash\nset -e\nunset GIT_DIR\nunset GIT_INDEX_FILE\n$GOPATH/bin/godep save ./...\nNOGODEPCHANGES=\"$(git ls-files . --exclude-standard --others --modified | grep Godeps | wc -l)\"\nif [ $NOGODEPCHANGES -gt 0 ]; then\n  cat <<\\EOF\nERROR: Some Go dependencies have been updated with godep save\nERROR: Please add them to your commit.\nEOF\n  exit 1\nfi\nexit 0\n``\n. @bojan-embroker I don't understand your problem then as this worked for me.\n. @bbokorney Since you are updating the version, please also update the Changelog and squash down to a single commit. Thanks!\n. Thanks!\n. @shurcooL Thanks, merged as cf33bd75a8243ac701090bb6fa8e0b81b9746fcb\n. Trygodep save -r ./.....is the default.\n. We currently rely on go get, so if it's fixed in go 1.6 (and if we're continuing to rely on get by then) it will be fixed then. Nothing much we can do here aside from re-implementgo get, which we may need to do anyway for other reasons. :-( I'm going to leave open for now though as reminder of issues with go get.\n. What godep version? \n. See https://github.com/tools/godep/pull/362 and https://github.com/kubernetes/kubernetes/pull/18695 (similar, dep was basically missing before).\n. godep save supports saving any package specified in the pkg spec.\nWe are using that internally to vendorgithub.com/zimbatm/socketmasterinto an application. socketmaster is amain` package.\nSo specifying something like godep save -r ./... github.com/zimbatm/socketmaster works as expected. using something like jq the heroku buildpack reads the Packages out of the Godeps/Godeps.json file and installs all of the packages specified there with godep go install $pkgs.\nCould you try something like that instead?\n. PS: I'm also -1 wrt adding another file.\n. @jonboulle the package spec passed to godep save is what feeds godep the list of packages to inspect for 'automagical detection'. I would only list main packages if you want them saved. Arguably godep save w/o any args should default to . or the contents of the Godeps/Godeps.json Packages array, if the file exists. This would probably help a lot and help people DTRT more often. Thoughts?\n. Re Rewrites: it would rewrite and vendor any of the imports the vendored tool imports. But you'de want that wouldn't you? That's the only way to guarantee you can build that tool later.\nre: Godeps.jon: It's already a manifest, and I don't mean manually editable. Yes, it changes the current workflow a bit (but not much). I'm basically saying that every time you do a godep save it reads in Godeps/Godeps.json and if there is a Packages array there it uses those values for the package spec. If there is none, it defaults to .. If you specify a new package spec with a save it uses that one, overwriting the existing one in the file. This is where problems could come up though.\n. Ahh yeah. I missed that. For instance github.com/zimbatm/socketmaster doesn't have any external deps, so no rewrites. You could not use rewrites for now, but either way that's a bug,\n. Hmm. This may break how some people use godep, not sure. The way I'd like godep used is that it would only rewrite packages that are specified via a relative package spec (., ./, ./..., ./cmd/..., etc) and their dependencies. In my mind it should not rewrite other package specs at their original location(s). But I can see how some people may use the fully qualified package spec when doing save (e.g.: godep save github.com/me/thepackageImworkingon). I've also seen people construct oddities in Makefiles to enumerate packages and pass the fully qualified package names to godep (I don't know why they do that though).\nThis would also require some tests, if they don't exist.\n. If you want to take a crack at any of the things we discussed I'd be happy to review. For now I'm going to close this PR though. Thanks!\n. LoadPackages still uses go list. I opened a PR yesterday that removes go list and also solves the missing deps problem: #341, effectively making your -a just the way godeps works (at least AFAICT).\n. FWIW: I've never run into this and use godep almost daily. I'm not against sorting the dependencies though. I would like a repeatable example of when/how this happens and a test for it.\n. @JekaMas Can you provide an example of this workflow?\n. What is the output of echo $GOPATH and pwd when you run these commands?\n. Turns out @imajes's $GOPATH is symlinked out of a Dropbox folder. git rev-parse --show-toplevel shows the symlink resolved path, so none of the Contains() calls finds the file.\n. This may also fix #334.\n. @kr sorry about the noise a bunch of stuff in pkg.go slipped in from another, earlier experiment.\n. Would close #337 \n. @neurogeek After some issue discussion (heroku/heroku-buildpack-go/100 and another I can't find atm) I generally think that we should really only care about the major version of Go and let downstream systems care about selecting the minor version (the user or build systems). There are probably exceptions to that, hence I also stopped auto-updating the go version on save, allowing people to specify whatever they want if they manually want to manage the file. \n. Thanks for taking the time to write this PR. FWIW: I'm -1 another flag. I'm +1 for an implementation that skips rewrites for any package specified that falls outside of the package in the cwd and it's sub packages though. While this may nerf godep for some people I think it's a what most people would expect and the least surprising. \n. It probably needs another rebase. Let me take a quick look and make some code comments too.\n. See comments, also a rebase (sorry). Thanks for adding the positions to the comments. Otherwise LGTM.\n. Small comment about the new type, otherwise LGTM\n. @krnowak Thanks for your patience with the extended review!\n. FWIW: My plan is to really only support \"compilation\" (go get github.com/tools/godep) against the current major version of go and the last major version of go. Currently go1.5.* & go1.4.* basically.\nPS: Once #352 lands this should be fixed.\n. @robdimsdale I updated the readme slightly to reflect the new versions. If you feel that's not sufficient a PR would be great!\nPS: #352 is merged as v34 and should fix this problem. Can you confirm?\n. \"Fixed\" in #352 as we'll also ignore files with the \"ignore\" build tag, at least for now. I think that's the path of least surprise. \n. Thanks for the PR, but I took a different approach in #352.\n. @njohns-grovo Yeah v32 should be okay atm. Sorry about that. I think I was being too optimistic with my use of build.Context. I'll add a test to duplicate this and bang on the new package evaluation code to fix it.\n. What version of go (output of go version) are you using?\n. This is because go/build does not have MultiplePackageError previous to go1.4 (IIRC; didn't check). #350 should fix this as we don't use that error anymore.\n. ps: also using the v33 executable should also work (barring other problems fixed in #352)\n. v34 (#352) should fix this.\n. Thanks for the PR, but I took a different approach in #352.\n. I'm going to let this sit for bit as I want to re-read it after I put it down for a little. Probably also a bunch of cleanups I can do as well.\n. Probably also fixes #345, #346, #347, #351. Need to make sure we have tests to cover those cases though.\n. Fixes #350 (We don't that error anymore).\n. \"Fixes\" #353 \n. We can probably get some (hopefully all?) of that back with a cache of ast files and/or a package cache. I'll PR later today.\n\nOn Dec 8, 2015, at 20:57, Jonathan Boulle notifications@github.com wrote:\nThis change appears to have had a pathological effect on performance in at least one of our repos (coreos/rkt):\n; time /tmp/gopath/bin/godep32 save -r ./...\nreal    0m1.649s\nuser    0m1.383s\nsys 0m0.341s\n ; time /tmp/gopath/bin/godep33 save -r ./...\ngodep: found packages keygen.go (main) and keymap.go (keystoretest) in /tmp/gopath/src/github.com/coreos/rkt/pkg/keystore/keystoretest\nreal    0m1.729s\nuser    0m1.487s\nsys 0m0.240s\n ; time /tmp/gopath/bin/godep34 save -r ./...\nreal    0m41.054s\nuser    0m37.493s\nsys 0m4.088s\n\u2014\nReply to this email directly or view it on GitHub.\n. @jonboulle v34 should fix that. Please open an issue for any problems and I'll see if I can boil it down to a test so we don't solve it and then break it again.\n. @jonboulle v35 introduces package caching and in testing locally, with rkt, godep save -r ./... went from a little less than 60s to a little less than 4s.\n. @jonboulle PS: Please file a bug if something breaks. I am really interested in making sure I can duplicate via a test case. A PR with a failing test is even better. ;-) \n. identity_classic.go is importing \"appengine\". Since this is guarded by a build tag go list -e -json google.golang.org/appengine wouldn't pick it up, so it worked. \n\nWe now parse all files regardless of build tag and \"appengine\" isn't a valid import (except on appengine probably).\nconsole\n$ go list -e -json appengine\n{\n    \"ImportPath\": \"appengine\",\n    \"Stale\": true,\n    \"Incomplete\": true,\n    \"Error\": {\n        \"ImportStack\": [\n            \"appengine\"\n        ],\n        \"Pos\": \"\",\n        \"Err\": \"cannot find package \\\"appengine\\\" in any of:\\n\\t/usr/local/go/src/appengine (from $GOROOT)\\n\\t/Users/emuller/go/src/appengine (from $GOPATH)\"\n    }\n}\n. I'm not 100% sure what to do about this (aside from full build tag support for godeps). I may just special case \"appengine\" for now to unblock anyone hitting this issue and then remove that special case if/when full build tag support materializes. \n. Yes. Sorry. I was so focused on #357 and other stuff this week I haven't kept up on many other PRs. :-( \n. Thanks for taking the time to do the PR.\n. godep save -r ./... github.com/gengo/grpc-gateway/third_party/googleapis/...\nRewrites will work sanely once #343 is merged (likely next week pending rebase / update by author).\nThat should vendor the github.com/gengo/grpc-gateway/third_party/googleapis and all it's sub packages assuming they're not messed up in some way (or a bug).\n. My main performance testing repo https://github.com/coreos/rkt  went from a little less than 60s to a little less than 4s on my laptop.\n. @tevino vendor experiment enabled or not ?\n. @tevino confirmed w/o anyway. Which is strange. Digging now.\n. @peter-edge I'll be looking into this today.\n. @tevino Actually I take that back, not confirmed w/o experiment.\n``` console\n$ export GOPATH=~/go2\n$ mkdir -p ~/go2/src/github.com/freeformz/t358\n$ cd ~/go2/src/github.com/freeformz/t358\n$ cat > main.go <<EOF\npackage main\nimport \"github.com/bitly/go-simplejson\"\nfunc main() {\n    simplejson.New()\n}\nEOF\n$ go get \n$ godep save\n$ find .\n.\n./Godeps\n./Godeps/_workspace\n./Godeps/_workspace/.gitignore\n./Godeps/_workspace/src\n./Godeps/_workspace/src/github.com\n./Godeps/_workspace/src/github.com/bitly\n./Godeps/_workspace/src/github.com/bitly/go-simplejson\n./Godeps/_workspace/src/github.com/bitly/go-simplejson/.travis.yml\n./Godeps/_workspace/src/github.com/bitly/go-simplejson/LICENSE\n./Godeps/_workspace/src/github.com/bitly/go-simplejson/README.md\n./Godeps/_workspace/src/github.com/bitly/go-simplejson/simplejson.go\n./Godeps/_workspace/src/github.com/bitly/go-simplejson/simplejson_go10.go\n./Godeps/_workspace/src/github.com/bitly/go-simplejson/simplejson_go11.go\n./Godeps/Godeps.json\n./Godeps/Readme\n./main.go\n$ cat Godeps/Godeps.json\n{\n    \"ImportPath\": \"github.com/freeformz/t358\",\n    \"GoVersion\": \"go1.5.2\",\n    \"Deps\": [\n        {\n            \"ImportPath\": \"github.com/bitly/go-simplejson\",\n            \"Comment\": \"v0.5.0\",\n            \"Rev\": \"aabad6e819789e569bd6aabf444c935aa9ba1e44\"\n        }\n    ]\n}\n```\n. @tevino confirmed with experiment though.\n``` console\n$ rm -rf ~/go2\n$ mkdir -p ~/go2/src/github.com/freeformz/t358\n$ cd ~/go2/src/github.com/freeformz/t358\n$ cat > main.go <<EOF\npackage main\nimport \"github.com/bitly/go-simplejson\"\nfunc main() {\n    simplejson.New()\n}\nEOF\n$ export GO15VENDOREXPERIMENT=1\n$ go get\n$ godep save\n$ find .\n.\n./Godeps\n./Godeps/Godeps.json\n./Godeps/Readme\n./main.go\n``\n. @peter-edge It was closed because it should be fixed in b34e1d5bdabea644cd12faffd2eadcfad52caea2, which is what closed it.\n. @peter-edge What package are you in when you save?\n. FWIW: Based on the [Makefile](https://github.com/libopenstorage/openstorage/blob/d84dc4ab90841c3d6413d21339b4d6c4fb856d03/Makefile) I don't really understand how you are using godep. You want to keep the Godeps/Godeps.json file around so it's relatively easy to determine what was already vendored (either in the godeps workspace orvendor/)\n. Also, at least until I can do away with the Godep workspace, godep works on the principle that packages be installed in the $GOPATH for save to work. I would do agodep restoreto continue testing, but there is noGodeps/Godeps.jsonfile available for a restore to work and be reliable.\n. @peter-edge I'm going to close this issue again. I'd like to continue discussion your use of godep but there are several issues and AFAICT they don't have anything to do with this one.\n. I realized what the problem is. My understanding of howbuild.FindOnly` works was faulty. So I'm working on a replacement.\n. @eparis GO15VENDOREXPERIMENT=1 ?\n. This is probably because these newer versions are more inclusive wrt what they'll vendor and the same rules are being applied to restore, so it's not finding a package it thinks should be vendored. :-( \nI wonder if doing a go get golang.org/x/sys/unix will take care of it and/or change the errors?\n. For some more clarity we only ignore files tagged with ignore and appengine build tags. Before go list would also filter out any non local platform files. This caused issues in that a lot of development happens on OSX, but deployments happen on Linux. So if your deps required an extra package on Linux, they wouldn't be saved and then your build would likely fail (depending how how you setup your environment TBH and lots of people mistook how godeps works because of this).\n. I'm going to poke at this early this afternoon (Pacific/US) and see if I can provide better guidance / work around / suggestions / patch / etc.\n. This is what I get currently on master with godep v36:\nconsole\n$ mkdir ~/go2\n$ export GOPATH=~/go2\n$ go get -u k8s.io/kubernetes\npackage k8s.io/kubernetes: no buildable Go source files in /Users/emuller/go2/src/k8s.io/kubernetes\n$ cd ~/go2/src/k8s.io/kubernetes\n$ godep restore\ngodep: error downloading dep (github.com/google/cadvisor/api): exit status 1\ngodep: error downloading dep (github.com/google/cadvisor/http): exit status 1\ngodep: error downloading dep (github.com/google/cadvisor/manager): exit status 1\ngodep: error downloading dep (github.com/google/cadvisor/pages): exit status 1\ngodep: error downloading dep (github.com/google/cadvisor/validate): exit status 1\ngodep: error downloading dep (golang.org/x/exp/inotify): exit status 1\nThese restore issues may be related to something else I need to look into. Digging.\n. Not sure. There is also an issue where restore will fail (currently) if the dep package is no longer available in master (that's the issue I was referring to, not sure the number). I'd like to fix that issue this week, but may be unrelated.\n. console\n$ go get -d github.com/google/cadvisor/api\ncontainer/raw/handler.go:38:2: no buildable Go source files in /Users/emuller/go2/src/golang.org/x/exp/inotify\ncadvisor is having issues on master. This is basically the same bug as the one I mentioned.\n. FWIW: the cadvisor issue has nothing to do with godeps per se. Master isn't even buildable for me.\n. @eparis BTW: I wasn't able to reproduce the initial issue (Unable to find dependent package golang.org/x/sys/unix). What OS was that restore run on ?\n. I suspect it was linux. If so you probably want to re-save using v35 to pick up new deps.\n. That's possible. I'll make a linux VM /  AWS instance after lunch and duplicate / etc.\n. Duplicated in a linux docker container:\n``` console\n$ godep restore\ngodep: error restoring dep (github.com/Sirupsen/logrus): Unable to find dependent package golang.org/x/sys/unix in context of /app/user/src/github.com/Sirupsen/logrus\ngodep: error restoring dep (github.com/boltdb/bolt): Unable to find dependent package golang.org/x/sys/unix in context of /app/user/src/github.com/boltdb/bolt\ngodep: error restoring dep (github.com/docker/docker/pkg/jsonmessage): Unable to find dependent package github.com/Azure/go-ansiterm/winterm in context of /app/user/src/github.com/docker/docker/pkg/term\ngodep: error restoring dep (github.com/docker/docker/pkg/term): Unable to find dependent package github.com/Azure/go-ansiterm/winterm in context of /app/user/src/github.com/docker/docker/pkg/term\ngodep: error restoring dep (github.com/docker/libcontainer): Unable to find dependent package golang.org/x/sys/unix in context of /app/user/src/github.com/Sirupsen/logrus\ngodep: error restoring dep (github.com/google/cadvisor/api): Unable to find dependent package github.com/fsouza/go-dockerclient/external/github.com/hashicorp/go-cleanhttp in context of /app/user/src/github.com/fsouza/go-dockerclient\ngodep: error restoring dep (github.com/google/cadvisor/http): Unable to find dependent package github.com/fsouza/go-dockerclient/external/github.com/hashicorp/go-cleanhttp in context of /app/user/src/github.com/fsouza/go-dockerclient\ngodep: error restoring dep (github.com/google/cadvisor/manager): Unable to find dependent package github.com/fsouza/go-dockerclient/external/github.com/hashicorp/go-cleanhttp in context of /app/user/src/github.com/fsouza/go-dockerclient\ngodep: error restoring dep (github.com/google/cadvisor/pages): Unable to find dependent package github.com/fsouza/go-dockerclient/external/github.com/hashicorp/go-cleanhttp in context of /app/user/src/github.com/fsouza/go-dockerclient\ngodep: error restoring dep (github.com/google/cadvisor/validate): Unable to find dependent package github.com/fsouza/go-dockerclient/external/github.com/hashicorp/go-cleanhttp in context of /app/user/src/github.com/fsouza/go-dockerclient\n```\nSome of these are confirmed platform specific transitive dependencies that were missed by older versions of godep.\nIn the case of logrus & bolt they both import golang.org/x/sys/unix on solaris.\ndocker/docker/pkg/term has a windows specific transitive import on github.com/Azure/go-ansiterm\"\nThe github.com/fsouza/go-dockerclient/external/github.com/hashicorp/go-cleanhttp errors are something else, possibly related to an ordering issue in the restore code.\nI'm looking into this and related stuff.\n. @eparis See #362 along with https://github.com/kubernetes/kubernetes/pull/18695\n. @thanodnl Previous to #362 godep loaded the packages before checking out the specified versions. This caused problems, especially with other recent changes (but they were present before anyway, just less pronounced).\n@eparis You guys need golang.org/x/sys/unix because of bolt:\nconsole\n$ godep restore -v  #Using the #362 version of godep.\n...\ngodep: Checking dependency: github.com/boltdb/bolt\ngodep: Dep (github.com/boltdb/bolt) restored, but was unable to load it with error:\n    Unable to find dependent package golang.org/x/sys/unix in context of /Users/emuller/go2/src/github.com/boltdb/bolt\ngodep:  This may be because the dependencies were saved with an older version of godep (< v33).\ngodep:  Try `go get golang.org/x/sys/unix`. Then `godep save` to update deps.\n...\n. @ironcladlou yes. Thanks. Marked as resolved.\n. what is your godep version?\n. FWIW: until v33 godep save ./... would only save deps for the current platform.\n. godep version should work for any version of godep after ~v1 (IIRC).\n. If you are using GO15VENDOREXPERIMENT (and it looks like you are) and running v35 then update to v36 (https://github.com/tools/godep/issues/358)  and let me know if there is still an issue.\nI'm going to start committing GO15VENDOREXPERIMENT related tests tomorrow (hopefully) and if not I'd like to get a reproducable test case for this. \n. :-( I'll see if I can make a small repro tomorrow (although I probably won't get to it until the afternoon).\n. Closing in favor of #358 \n. Thanks! (merged as part of bf180cbe9d2f255d72616470db39c2cae2f77e5d)\n. @ironcladlou This should solve the aws-sdk issue .... but there are some consistency issues with github.com/openshift/origin Godeps.json file. \nSome of them are duplicate shas for the same repo, one for package A another for package B in the same repo:\n- https://github.com/openshift/origin/blob/0d4de0b1801e8c58a28c8bcd9d12b5d0c46de1cb/Godeps/Godeps.json#L744-L753\n- https://github.com/openshift/origin/blob/0d4de0b1801e8c58a28c8bcd9d12b5d0c46de1cb/Godeps/Godeps.json#L876-L895 \nSome appear to be shas from forks of the repos that are not on the canonical master (see #366).\nThere is at least once case where a recorded package is missing (looks to be in a PR) but is also recorded twice with 2 different shas.\n. /cc @eparis This should solve for packages that were removed.\n. @eparis confirmed that this solves the docker/timeutils issues for you as well.\n. https://github.com/docker/docker/pull/18685 for reference\n. @tsaikd What version of godep are you using? and if it's not the latest, is it still an issue with the latest version?\n. AFAICT your Godeps.json file is incomplete?\nIf I make a simple app that uses the appengine package my generated Godeps.json file looks like this:\nconsole\n$ cat Godeps/Godeps.json\n{\n    \"ImportPath\": \"github.com/freeformz/t365\",\n    \"GoVersion\": \"go1.5\",\n    \"Deps\": [\n        {\n            \"ImportPath\": \"github.com/golang/protobuf/proto\",\n            \"Rev\": \"68415e7123da32b07eab49c96d2c4d6158360e9b\"\n        },\n        {\n            \"ImportPath\": \"golang.org/x/net/context\",\n            \"Rev\": \"0ab009005dc16437045369e823a35d1af6232b69\"\n        },\n        {\n            \"ImportPath\": \"google.golang.org/appengine\",\n            \"Rev\": \"54bf9150c922186bfc45a00bf9dfcb91a5063275\"\n        }\n    ]\n}\nAlso: You do not need to do a go get after a godep restore as long as all of your deps are recorded (which godep save does).\n. Go is not node. The google.golang.org/appengine package uses github.com/golang/protobuf/proto and w/o it the code won't build. Godeps is about making builds repeatable. W/o that code vendored there may be times where I can build your code (I've seen npm go down and cause all sorts of problems where users could no longer deploy).\n. @DreadPirateShawn I was able to reproduce this by synthetically checking out the affected package and running restore. Will look more: \nconsole\n$ godep restore -v\n...\ngodep: error restoring dep (github.com/prometheus/client_golang/model): cannot find package \"github.com/prometheus/client_golang/model\" in any of:\n    /usr/local/go/src/github.com/prometheus/client_golang/model (from $GOROOT)\n    /Users/emuller/go2/src/github.com/prometheus/client_golang/model (from $GOPATH)\n. I was wondering if, across all vcs, if it's possible to determine which remote has a given ref. godep save could record the appropriate remote if so in a key.\n. This seems to work okay for me with current godep:\n``` console\n$ mkdir ~/go2\n$ export GOPATH=~/go2\n$ go get -u github.com/go-gomail/gomail\n$ cd ~/go2/src/github.com/go-gomail/gomail\n$ godep save -r -v\ngodep: Unable to find dependent package gopkg.in/alexcesaro/quotedprintable.v3 in context of /Users/emuller/go2/src/github.com/go-gomail/gomail\n$ # This is fine since it's an empty GOPATH\n$ go get gopkg.in/alexcesaro/quotedprintable.v3 # This is the package that mime_go14.go uses\n$ godep save -r -v\ngodep: cannot find package \"gopkg.in/gomail.v2\" in any of:\n    /usr/local/go/src/gopkg.in/gomail.v2 (from $GOROOT)\n    /Users/emuller/go2/src/gopkg.in/gomail.v2 (from $GOPATH)\n$ go get gopkg.in/gomail.v2\n$ godep save -r -v\ngodep: save: skipping test file: /Users/emuller/go2/src/gopkg.in/alexcesaro/quotedprintable.v3/encodedword_test.go\ngodep: save: skipping test file: /Users/emuller/go2/src/gopkg.in/alexcesaro/quotedprintable.v3/reader_test.go\ngodep: save: skipping test file: /Users/emuller/go2/src/gopkg.in/alexcesaro/quotedprintable.v3/writer_test.go\ngodep: save: skipping test file: /Users/emuller/go2/src/gopkg.in/gomail.v2/auth_test.go\ngodep: save: skipping test file: /Users/emuller/go2/src/gopkg.in/gomail.v2/example_test.go\ngodep: save: skipping test file: /Users/emuller/go2/src/gopkg.in/gomail.v2/message_test.go\ngodep: save: skipping test file: /Users/emuller/go2/src/gopkg.in/gomail.v2/send_test.go\ngodep: save: skipping test file: /Users/emuller/go2/src/gopkg.in/gomail.v2/smtp_test.go\n$ git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nChanges not staged for commit:\n  (use \"git add ...\" to update what will be committed)\n  (use \"git checkout -- ...\" to discard changes in working directory)\nmodified:   example_test.go\nmodified:   mime_go14.go\n\nUntracked files:\n  (use \"git add ...\" to include in what will be committed)\nGodeps/\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n$ # Files modified because of rewrites\n$ find Godeps\nGodeps\nGodeps/_workspace\nGodeps/_workspace/.gitignore\nGodeps/_workspace/src\nGodeps/_workspace/src/gopkg.in\nGodeps/_workspace/src/gopkg.in/alexcesaro\nGodeps/_workspace/src/gopkg.in/alexcesaro/quotedprintable.v3\nGodeps/_workspace/src/gopkg.in/alexcesaro/quotedprintable.v3/encodedword.go\nGodeps/_workspace/src/gopkg.in/alexcesaro/quotedprintable.v3/LICENSE\nGodeps/_workspace/src/gopkg.in/alexcesaro/quotedprintable.v3/pool.go\nGodeps/_workspace/src/gopkg.in/alexcesaro/quotedprintable.v3/pool_go12.go\nGodeps/_workspace/src/gopkg.in/alexcesaro/quotedprintable.v3/reader.go\nGodeps/_workspace/src/gopkg.in/alexcesaro/quotedprintable.v3/README.md\nGodeps/_workspace/src/gopkg.in/alexcesaro/quotedprintable.v3/writer.go\nGodeps/_workspace/src/gopkg.in/gomail.v2\nGodeps/_workspace/src/gopkg.in/gomail.v2/.travis.yml\nGodeps/_workspace/src/gopkg.in/gomail.v2/auth.go\nGodeps/_workspace/src/gopkg.in/gomail.v2/CHANGELOG.md\nGodeps/_workspace/src/gopkg.in/gomail.v2/CONTRIBUTING.md\nGodeps/_workspace/src/gopkg.in/gomail.v2/doc.go\nGodeps/_workspace/src/gopkg.in/gomail.v2/LICENSE\nGodeps/_workspace/src/gopkg.in/gomail.v2/message.go\nGodeps/_workspace/src/gopkg.in/gomail.v2/mime.go\nGodeps/_workspace/src/gopkg.in/gomail.v2/mime_go14.go\nGodeps/_workspace/src/gopkg.in/gomail.v2/README.md\nGodeps/_workspace/src/gopkg.in/gomail.v2/send.go\nGodeps/_workspace/src/gopkg.in/gomail.v2/smtp.go\nGodeps/_workspace/src/gopkg.in/gomail.v2/writeto.go\nGodeps/Godeps.json\nGodeps/Readme\n$ cat Godeps/Godeps.json\n{\n    \"ImportPath\": \"github.com/go-gomail/gomail\",\n    \"GoVersion\": \"go1.5\",\n    \"Deps\": [\n        {\n            \"ImportPath\": \"gopkg.in/alexcesaro/quotedprintable.v3\",\n            \"Rev\": \"2caba252f4dc53eaf6b553000885530023f54623\"\n        },\n        {\n            \"ImportPath\": \"gopkg.in/gomail.v2\",\n            \"Comment\": \"2.0.0-8-gfbb71dd\",\n            \"Rev\": \"fbb71ddc63acd07dd0ed49ababdf02c551e2539a\"\n        }\n    ]\n}\n. I plan on changing up the error message a bit to recommend a `godep get <pkg>` and then have the get command properly fetch all transitive deps (right now it can still miss some as it's still using `go get`). As a possible additional step I was thinking of adding a `get` option to save (or just make it the default). For now you can fetch the other deps manually with `go get`.\n. Maybe godep should also handle build tags based on the version specified in Godep.json? That does open up a different set of problems (like additional work on `godep update -goversion`). ATM godep will vendor every dep it finds, regardless of tags (except for `ignore` and `appengine`), this is by design.\n. Not yet, I am thinking that godep should probably use the recorded go version in conjunction with build tags to DTRT and not analyze deps for go versions that differ from what's recorded. The idea being that what's recorded as the go version is the version in use and the one being tested against. But I'm sure some people would disagree with that. There is an argument to be made for either case. For instance see #386 \n. Recent versions of go record the version of go in use and also support go version build tags, so I'm closing this.\n. Can you commit the `Godeps/Godeps.json` file that your are using so that I can investigate?\n. You would have already created a Godeps/Godeps.json file when you originally saved your `vendor/` directory. You would then `godep restore` things into your $GOPATH. FWIW: I realize that this usage with `vendor/` is less than optimal, but I can't change it too much w/o breaking the non `vendor/` way ATM.\n. let me see if I can repro after manually installing all the deps.\n. Heh. I see there is a makefile target for that. \n. console\n$ mkdir ~/go2\n$ export GOPATH=~/go2\n$ go get -d github.com/libopenstorage/openstorage\npackage github.com/libopenstorage/openstorage: no buildable Go source files in /Users/emuller/go2/src/github.com/libopenstorage/openstorage\n$ cd ~/go2/src/github.com/libopenstorage/openstorage\n$ make update-test-deps\n$ make update-test-deps\nGO15VENDOREXPERIMENT=0 go get -d -v -t -u -f github.com/libopenstorage/openstorage/api github.com/libopenstorage/openstorage/api/client github.com/libopenstorage/openstorage/api/server github.com/libopenstorage/openstorage/cli github.com/libopenstorage/openstorage/cluster github.com/libopenstorage/openstorage/cmd/osd github.com/libopenstorage/openstorage/config github.com/libopenstorage/openstorage/graph github.com/libopenstorage/openstorage/graph/drivers github.com/libopenstorage/openstorage/graph/drivers/layer0 github.com/libopenstorage/openstorage/graph/drivers/proxy github.com/libopenstorage/openstorage/pkg/chaos github.com/libopenstorage/openstorage/pkg/device github.com/libopenstorage/openstorage/pkg/mount github.com/libopenstorage/openstorage/pkg/seed github.com/libopenstorage/openstorage/pkg/stats github.com/libopenstorage/openstorage/volume github.com/libopenstorage/openstorage/volume/drivers github.com/libopenstorage/openstorage/volume/drivers/aws github.com/libopenstorage/openstorage/volume/drivers/btrfs github.com/libopenstorage/openstorage/volume/drivers/buse github.com/libopenstorage/openstorage/volume/drivers/fuse github.com/libopenstorage/openstorage/volume/drivers/nfs github.com/libopenstorage/openstorage/volume/drivers/pwx github.com/libopenstorage/openstorage/volume/drivers/test github.com/libopenstorage/openstorage/volume/drivers/vfs\ngithub.com/libopenstorage/openstorage (download)\ngithub.com/fsouza/go-dockerclient (download)\ngithub.com/portworx/systemutils (download)\ngithub.com/Sirupsen/logrus (download)\ngithub.com/libopenstorage/gossip (download)\ngithub.com/portworx/kvdb (download)\nFetching https://gopkg.in/yaml.v2?go-get=1\nParsing meta tags from https://gopkg.in/yaml.v2?go-get=1 (status code 200)\nget \"gopkg.in/yaml.v2\": found meta tag main.metaImport{Prefix:\"gopkg.in/yaml.v2\", VCS:\"git\", RepoRoot:\"https://gopkg.in/yaml.v2\"} at https://gopkg.in/yaml.v2?go-get=1\ngopkg.in/yaml.v2 (download)\ngithub.com/docker/docker (download)\nFetching https://golang.org/x/net/context?go-get=1\nParsing meta tags from https://golang.org/x/net/context?go-get=1 (status code 200)\nget \"golang.org/x/net/context\": found meta tag main.metaImport{Prefix:\"golang.org/x/net\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/net\"} at https://golang.org/x/net/context?go-get=1\nget \"golang.org/x/net/context\": verifying non-authoritative meta tag\nFetching https://golang.org/x/net?go-get=1\nParsing meta tags from https://golang.org/x/net?go-get=1 (status code 200)\ngolang.org/x/net (download)\ngithub.com/gorilla/mux (download)\ngithub.com/gorilla/context (download)\ngithub.com/pborman/uuid (download)\ngithub.com/stretchr/testify (download)\ngithub.com/davecgh/go-spew (download)\ngithub.com/pmezard/go-difflib (download)\ngithub.com/codegangsta/cli (download)\npackage github.com/libopenstorage/openstorage/graph/drivers/unionfs: no buildable Go source files in /Users/emuller/go2/src/github.com/libopenstorage/openstorage/graph/drivers/unionfs\ngithub.com/aws/aws-sdk-go (download)\ngithub.com/go-ini/ini (download)\ngithub.com/jmespath/go-jmespath (download)\ngithub.com/hashicorp/consul (download)\ngithub.com/hashicorp/go-cleanhttp (download)\ngithub.com/hashicorp/serf (download)\ngithub.com/coreos/go-etcd (download)\ngithub.com/ugorji/go (download)\nFetching https://bazil.org/fuse?go-get=1\nParsing meta tags from https://bazil.org/fuse?go-get=1 (status code 200)\nget \"bazil.org/fuse\": found meta tag main.metaImport{Prefix:\"bazil.org/fuse\", VCS:\"git\", RepoRoot:\"https://github.com/bazil/fuse\"} at https://bazil.org/fuse?go-get=1\nbazil.org/fuse (download)\nFetching https://bazil.org/fuse/fs?go-get=1\nParsing meta tags from https://bazil.org/fuse/fs?go-get=1 (status code 200)\nget \"bazil.org/fuse/fs\": found meta tag main.metaImport{Prefix:\"bazil.org/fuse\", VCS:\"git\", RepoRoot:\"https://github.com/bazil/fuse\"} at https://bazil.org/fuse/fs?go-get=1\nget \"bazil.org/fuse/fs\": verifying non-authoritative meta tag\nFetching https://bazil.org/fuse?go-get=1\nParsing meta tags from https://bazil.org/fuse?go-get=1 (status code 200)\nmake: *** [update-test-deps] Error 1\n$ godep save github.com/libopenstorage/openstorage/api github.com/libopenstorage/openstorage/api/client github.com/libopenstorage/openstorage/api/server github.com/libopenstorage/openstorage/cli github.com/libopenstorage/openstorage/cluster github.com/libopenstorage/openstorage/cmd/osd github.com/libopenstorage/openstorage/config github.com/libopenstorage/openstorage/graph github.com/libopenstorage/openstorage/graph/drivers github.com/libopenstorage/openstorage/graph/drivers/layer0 github.com/libopenstorage/openstorage/graph/drivers/proxy github.com/libopenstorage/openstorage/pkg/chaos github.com/libopenstorage/openstorage/pkg/device github.com/libopenstorage/openstorage/pkg/mount github.com/libopenstorage/openstorage/pkg/seed github.com/libopenstorage/openstorage/pkg/stats github.com/libopenstorage/openstorage/volume github.com/libopenstorage/openstorage/volume/drivers github.com/libopenstorage/openstorage/volume/drivers/aws github.com/libopenstorage/openstorage/volume/drivers/btrfs github.com/libopenstorage/openstorage/volume/drivers/buse github.com/libopenstorage/openstorage/volume/drivers/fuse github.com/libopenstorage/openstorage/volume/drivers/nfs github.com/libopenstorage/openstorage/volume/drivers/pwx github.com/libopenstorage/openstorage/volume/drivers/test github.com/libopenstorage/openstorage/volume/drivers/vfs\ngodep: cannot find package \"golang.org/x/sys/unix\" in any of:\n    /usr/local/go/src/golang.org/x/sys/unix (from $GOROOT)\n    /Users/emuller/go2/src/golang.org/x/sys/unix (from $GOPATH)\n$ go get -d golang.org/x/sys/unix\n$ godep save github.com/libopenstorage/openstorage/api github.com/libopenstorage/openstorage/api/client github.com/libopenstorage/openstorage/api/server github.com/libopenstorage/openstorage/cli github.com/libopenstorage/openstorage/cluster github.com/libopenstorage/openstorage/cmd/osd github.com/libopenstorage/openstorage/config github.com/libopenstorage/openstorage/graph github.com/libopenstorage/openstorage/graph/drivers github.com/libopenstorage/openstorage/graph/drivers/layer0 github.com/libopenstorage/openstorage/graph/drivers/proxy github.com/libopenstorage/openstorage/pkg/chaos github.com/libopenstorage/openstorage/pkg/device github.com/libopenstorage/openstorage/pkg/mount github.com/libopenstorage/openstorage/pkg/seed github.com/libopenstorage/openstorage/pkg/stats github.com/libopenstorage/openstorage/volume github.com/libopenstorage/openstorage/volume/drivers github.com/libopenstorage/openstorage/volume/drivers/aws github.com/libopenstorage/openstorage/volume/drivers/btrfs github.com/libopenstorage/openstorage/volume/drivers/buse github.com/libopenstorage/openstorage/volume/drivers/fuse github.com/libopenstorage/openstorage/volume/drivers/nfs github.com/libopenstorage/openstorage/volume/drivers/pwx github.com/libopenstorage/openstorage/volume/drivers/test github.com/libopenstorage/openstorage/volume/drivers/vfs\n$ find Godeps\nGodeps\nGodeps/Godeps.json\nGodeps/Readme\n$ cat Godeps/Godeps.json\n{\n    \"ImportPath\": \"github.com/libopenstorage/openstorage\",\n    \"GoVersion\": \"go1.5\",\n    \"Packages\": [\n        \"github.com/libopenstorage/openstorage/api\",\n        \"github.com/libopenstorage/openstorage/api/client\",\n        \"github.com/libopenstorage/openstorage/api/server\",\n        \"github.com/libopenstorage/openstorage/cli\",\n        \"github.com/libopenstorage/openstorage/cluster\",\n        \"github.com/libopenstorage/openstorage/cmd/osd\",\n        \"github.com/libopenstorage/openstorage/config\",\n        \"github.com/libopenstorage/openstorage/graph\",\n        \"github.com/libopenstorage/openstorage/graph/drivers\",\n        \"github.com/libopenstorage/openstorage/graph/drivers/layer0\",\n        \"github.com/libopenstorage/openstorage/graph/drivers/proxy\",\n        \"github.com/libopenstorage/openstorage/pkg/chaos\",\n        \"github.com/libopenstorage/openstorage/pkg/device\",\n        \"github.com/libopenstorage/openstorage/pkg/mount\",\n        \"github.com/libopenstorage/openstorage/pkg/seed\",\n        \"github.com/libopenstorage/openstorage/pkg/stats\",\n        \"github.com/libopenstorage/openstorage/volume\",\n        \"github.com/libopenstorage/openstorage/volume/drivers\",\n        \"github.com/libopenstorage/openstorage/volume/drivers/aws\",\n        \"github.com/libopenstorage/openstorage/volume/drivers/btrfs\",\n        \"github.com/libopenstorage/openstorage/volume/drivers/buse\",\n        \"github.com/libopenstorage/openstorage/volume/drivers/fuse\",\n        \"github.com/libopenstorage/openstorage/volume/drivers/nfs\",\n        \"github.com/libopenstorage/openstorage/volume/drivers/pwx\",\n        \"github.com/libopenstorage/openstorage/volume/drivers/test\",\n        \"github.com/libopenstorage/openstorage/volume/drivers/vfs\"\n    ],\n    \"Deps\": [\n        {\n            \"ImportPath\": \"bazil.org/fuse\",\n            \"Rev\": \"a8bc3b86317dc95ed28fdefcebc1dbce8baa88e9\"\n        },\n        {\n            \"ImportPath\": \"github.com/Sirupsen/logrus\",\n            \"Comment\": \"v0.8.7-53-g446d1c1\",\n            \"Rev\": \"446d1c146faa8ed3f4218f056fcd165f6bcfda81\"\n        },\n        {\n            \"ImportPath\": \"github.com/aws/aws-sdk-go/aws\",\n            \"Comment\": \"v1.0.5\",\n            \"Rev\": \"9e7816464bb6044ae17fff44ce59387d2658e2cb\"\n        },\n        {\n            \"ImportPath\": \"github.com/aws/aws-sdk-go/service/ec2\",\n            \"Comment\": \"v1.0.5\",\n            \"Rev\": \"9e7816464bb6044ae17fff44ce59387d2658e2cb\"\n        },\n        {\n            \"ImportPath\": \"github.com/aws/aws-sdk-go/service/opsworks\",\n            \"Comment\": \"v1.0.5\",\n            \"Rev\": \"9e7816464bb6044ae17fff44ce59387d2658e2cb\"\n        },\n        {\n            \"ImportPath\": \"github.com/codegangsta/cli\",\n            \"Comment\": \"1.2.0-183-gb5232bb\",\n            \"Rev\": \"b5232bb2934f606f9f27a1305f1eea224e8e8b88\"\n        },\n        {\n            \"ImportPath\": \"github.com/davecgh/go-spew/spew\",\n            \"Rev\": \"5215b55f46b2b919f50a1df0eaa5886afe4e3b3d\"\n        },\n        {\n            \"ImportPath\": \"github.com/docker/docker/daemon/graphdriver\",\n            \"Comment\": \"v1.4.1-8593-g905f333\",\n            \"Rev\": \"905f3336b2715b3960b5ff4f860db387797d9adf\"\n        },\n        {\n            \"ImportPath\": \"github.com/docker/docker/pkg/archive\",\n            \"Comment\": \"v1.4.1-8593-g905f333\",\n            \"Rev\": \"905f3336b2715b3960b5ff4f860db387797d9adf\"\n        },\n        {\n            \"ImportPath\": \"github.com/docker/docker/pkg/idtools\",\n            \"Comment\": \"v1.4.1-8593-g905f333\",\n            \"Rev\": \"905f3336b2715b3960b5ff4f860db387797d9adf\"\n        },\n        {\n            \"ImportPath\": \"github.com/docker/docker/pkg/mount\",\n            \"Comment\": \"v1.4.1-8593-g905f333\",\n            \"Rev\": \"905f3336b2715b3960b5ff4f860db387797d9adf\"\n        },\n        {\n            \"ImportPath\": \"github.com/docker/docker/pkg/parsers\",\n            \"Comment\": \"v1.4.1-8593-g905f333\",\n            \"Rev\": \"905f3336b2715b3960b5ff4f860db387797d9adf\"\n        },\n        {\n            \"ImportPath\": \"github.com/docker/docker/pkg/reexec\",\n            \"Comment\": \"v1.4.1-8593-g905f333\",\n            \"Rev\": \"905f3336b2715b3960b5ff4f860db387797d9adf\"\n        },\n        {\n            \"ImportPath\": \"github.com/fsouza/go-dockerclient\",\n            \"Rev\": \"54afc1babbc57f075f958f84904251332bd8fd73\"\n        },\n        {\n            \"ImportPath\": \"github.com/go-ini/ini\",\n            \"Comment\": \"v1.8.5-1-g467243b\",\n            \"Rev\": \"467243bad6cb295e0fe72366da5ba85b069874cb\"\n        },\n        {\n            \"ImportPath\": \"github.com/gorilla/mux\",\n            \"Rev\": \"9c068cf16d982f8bd444b8c352acbeec34c4fe5b\"\n        },\n        {\n            \"ImportPath\": \"github.com/libopenstorage/gossip\",\n            \"Rev\": \"8ef1994e46b7dc4fd407994c735044c0fd39e9de\"\n        },\n        {\n            \"ImportPath\": \"github.com/pborman/uuid\",\n            \"Rev\": \"dee7705ef7b324f27ceb85a121c61f2c2e8ce988\"\n        },\n        {\n            \"ImportPath\": \"github.com/pmezard/go-difflib/difflib\",\n            \"Rev\": \"e8554b8641db39598be7f6342874b958f12ae1d4\"\n        },\n        {\n            \"ImportPath\": \"github.com/portworx/kvdb\",\n            \"Rev\": \"496e86135d7e307722af6649ec640fd385a385c5\"\n        },\n        {\n            \"ImportPath\": \"github.com/portworx/systemutils\",\n            \"Rev\": \"231787edf3530fee4c73695dd8c4090f4af7764e\"\n        },\n        {\n            \"ImportPath\": \"github.com/stretchr/testify/assert\",\n            \"Comment\": \"v1.0-88-ge3a8ff8\",\n            \"Rev\": \"e3a8ff8ce36581f87a15341206f205b1da467059\"\n        },\n        {\n            \"ImportPath\": \"github.com/stretchr/testify/require\",\n            \"Comment\": \"v1.0-88-ge3a8ff8\",\n            \"Rev\": \"e3a8ff8ce36581f87a15341206f205b1da467059\"\n        },\n        {\n            \"ImportPath\": \"golang.org/x/sys/unix\",\n            \"Rev\": \"833a04a10549a95dc34458c195cbad61bbb6cb4d\"\n        },\n        {\n            \"ImportPath\": \"gopkg.in/yaml.v2\",\n            \"Rev\": \"f7716cbe52baa25d2e9b0d0da546fcf909fc16b4\"\n        }\n    ]\n}\n$ git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nChanges not staged for commit:\n  (use \"git add/rm ...\" to update what will be committed)\n  (use \"git checkout -- ...\" to discard changes in working directory)\nmodified:   vendor/bazil.org/fuse/fuse.go\nmodified:   vendor/bazil.org/fuse/fuse_kernel.go\nmodified:   vendor/bazil.org/fuse/mount_darwin.go\nmodified:   vendor/bazil.org/fuse/options.go\nmodified:   vendor/github.com/Sirupsen/logrus/README.md\nmodified:   vendor/github.com/Sirupsen/logrus/hooks/syslog/syslog.go\nmodified:   vendor/github.com/Sirupsen/logrus/logger.go\nmodified:   vendor/github.com/Sirupsen/logrus/terminal_notwindows.go\nmodified:   vendor/github.com/Sirupsen/logrus/terminal_windows.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/awsutil/copy.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/awsutil/path_value.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/config.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/corehandlers/handlers.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/corehandlers/param_validator.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/credentials/chain_provider.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/credentials/credentials.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/credentials/ec2rolecreds/ec2_role_provider.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/credentials/example.ini\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/credentials/shared_credentials_provider.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/credentials/stscreds/assume_role_provider.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/defaults/defaults.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/ec2metadata/api.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/ec2metadata/service.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/errors.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/request/handlers.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/request/request.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/request/retryer.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/service/default_retryer.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/service/service.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/service/serviceinfo/service_info.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/types.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/version.go\nmodified:   vendor/github.com/aws/aws-sdk-go/service/ec2/api.go\nmodified:   vendor/github.com/aws/aws-sdk-go/service/ec2/customizations.go\nmodified:   vendor/github.com/aws/aws-sdk-go/service/ec2/ec2iface/interface.go\nmodified:   vendor/github.com/aws/aws-sdk-go/service/ec2/service.go\nmodified:   vendor/github.com/aws/aws-sdk-go/service/opsworks/api.go\nmodified:   vendor/github.com/aws/aws-sdk-go/service/opsworks/opsworksiface/interface.go\nmodified:   vendor/github.com/aws/aws-sdk-go/service/opsworks/service.go\nmodified:   vendor/github.com/codegangsta/cli/.travis.yml\nmodified:   vendor/github.com/codegangsta/cli/README.md\nmodified:   vendor/github.com/codegangsta/cli/app.go\nmodified:   vendor/github.com/codegangsta/cli/command.go\nmodified:   vendor/github.com/codegangsta/cli/flag.go\nmodified:   vendor/github.com/docker/docker/daemon/graphdriver/aufs/aufs.go\nmodified:   vendor/github.com/docker/docker/daemon/graphdriver/aufs/migrate.go\nmodified:   vendor/github.com/docker/docker/daemon/graphdriver/btrfs/btrfs.go\nmodified:   vendor/github.com/docker/docker/daemon/graphdriver/btrfs/version_none.go\nmodified:   vendor/github.com/docker/docker/daemon/graphdriver/devmapper/deviceset.go\nmodified:   vendor/github.com/docker/docker/daemon/graphdriver/devmapper/devmapper_doc.go\nmodified:   vendor/github.com/docker/docker/daemon/graphdriver/devmapper/driver.go\nmodified:   vendor/github.com/docker/docker/daemon/graphdriver/devmapper/mount.go\nmodified:   vendor/github.com/docker/docker/daemon/graphdriver/driver.go\nmodified:   vendor/github.com/docker/docker/daemon/graphdriver/fsdiff.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/graphtest/graphtest.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/imagerestorer.go\nmodified:   vendor/github.com/docker/docker/daemon/graphdriver/overlay/overlay.go\nmodified:   vendor/github.com/docker/docker/daemon/graphdriver/plugin.go\nmodified:   vendor/github.com/docker/docker/daemon/graphdriver/proxy.go\nmodified:   vendor/github.com/docker/docker/daemon/graphdriver/vfs/driver.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/vfs/driver_unsupported.go\nmodified:   vendor/github.com/docker/docker/daemon/graphdriver/windows/windows.go\nmodified:   vendor/github.com/docker/docker/daemon/graphdriver/zfs/zfs.go\nmodified:   vendor/github.com/docker/docker/pkg/archive/archive.go\nmodified:   vendor/github.com/docker/docker/pkg/archive/archive_unix.go\nmodified:   vendor/github.com/docker/docker/pkg/archive/archive_windows.go\nmodified:   vendor/github.com/docker/docker/pkg/archive/changes.go\nmodified:   vendor/github.com/docker/docker/pkg/archive/copy.go\nmodified:   vendor/github.com/docker/docker/pkg/archive/diff.go\nmodified:   vendor/github.com/docker/docker/pkg/archive/whiteouts.go\nmodified:   vendor/github.com/docker/docker/pkg/mount/flags.go\nmodified:   vendor/github.com/docker/docker/pkg/mount/flags_linux.go\ndeleted:    vendor/github.com/docker/docker/pkg/parsers/filters/parse.go\nmodified:   vendor/github.com/docker/docker/pkg/parsers/operatingsystem/operatingsystem_linux.go\nmodified:   vendor/github.com/docker/docker/pkg/parsers/parsers.go\nmodified:   vendor/github.com/docker/docker/pkg/reexec/reexec.go\nmodified:   vendor/github.com/fsouza/go-dockerclient/.travis.yml\nmodified:   vendor/github.com/fsouza/go-dockerclient/AUTHORS\nmodified:   vendor/github.com/fsouza/go-dockerclient/Makefile\nmodified:   vendor/github.com/fsouza/go-dockerclient/README.markdown\nmodified:   vendor/github.com/fsouza/go-dockerclient/auth.go\nmodified:   vendor/github.com/fsouza/go-dockerclient/client.go\nmodified:   vendor/github.com/fsouza/go-dockerclient/container.go\nmodified:   vendor/github.com/fsouza/go-dockerclient/image.go\nmodified:   vendor/github.com/fsouza/go-dockerclient/network.go\nmodified:   vendor/github.com/fsouza/go-dockerclient/testing/server.go\nmodified:   vendor/github.com/fsouza/go-dockerclient/volume.go\nmodified:   vendor/github.com/gorilla/mux/.travis.yml\nmodified:   vendor/github.com/pborman/uuid/sql.go\nmodified:   vendor/github.com/pmezard/go-difflib/difflib/difflib.go\nmodified:   vendor/github.com/portworx/kvdb/etcd/kv_etcd.go\nmodified:   vendor/github.com/portworx/systemutils/system.go\nmodified:   vendor/github.com/stretchr/testify/assert/assertions.go\nmodified:   vendor/github.com/stretchr/testify/assert/forward_assertions.go\nmodified:   vendor/github.com/stretchr/testify/require/forward_requirements.go\nmodified:   vendor/github.com/stretchr/testify/require/requirements.go\nmodified:   vendor/gopkg.in/yaml.v2/readerc.go\n\nUntracked files:\n  (use \"git add ...\" to include in what will be committed)\nGodeps/\nvendor/github.com/Sirupsen/logrus/terminal_solaris.go\nvendor/github.com/aws/aws-sdk-go/LICENSE.txt\nvendor/github.com/aws/aws-sdk-go/NOTICE.txt\nvendor/github.com/aws/aws-sdk-go/aws/awsutil/equal.go\nvendor/github.com/aws/aws-sdk-go/aws/awsutil/string_value.go\nvendor/github.com/aws/aws-sdk-go/aws/client/\nvendor/github.com/aws/aws-sdk-go/aws/request/request_pagination.go\nvendor/github.com/aws/aws-sdk-go/aws/session/\nvendor/github.com/aws/aws-sdk-go/service/ec2/waiters.go\nvendor/github.com/aws/aws-sdk-go/service/opsworks/waiters.go\nvendor/github.com/davecgh/go-spew/LICENSE\nvendor/github.com/docker/docker/LICENSE\nvendor/github.com/docker/docker/NOTICE\nvendor/github.com/docker/docker/contrib/\nvendor/github.com/docker/docker/daemon/graphdriver/graphtest/graphtest_unix.go\nvendor/github.com/docker/docker/daemon/graphdriver/graphtest/graphtest_windows.go\nvendor/github.com/docker/docker/pkg/symlink/\nvendor/github.com/go-ini/\nvendor/github.com/pmezard/go-difflib/LICENSE\nvendor/github.com/stretchr/testify/LICENSE\nvendor/golang.org/x/sys/\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n. @peter-edge above is what I would basically expect at this point.\n. console\n$ godep version\ngodep v38 (darwin/amd64/go1.5.2)\n``\n. After fixing some imports in my copy of that repo I was able to run a save and yes, something is broken. Looking more.\n. Confirmed, closing in favor of #358\n. Please try with godep v44 and let me know if this is still an issue.\n. The package argument that you pass togodep save` is the package(s) that you want to analyze for vendoring, not the package that you want to save. Put another way it's the packages who's dependencies you want save. Does that help?\n. I can't duplicate this locally:\nconsole\n$ mkdir ~/go2\n$ export GOPATH=~/go2\n$  go get -d github.com/docker/swarm\npackage github.com/docker/docker/pkg/parsers/filters: cannot find package \"github.com/docker/docker/pkg/parsers/filters\" in any of:\n    /usr/local/go/src/github.com/docker/docker/pkg/parsers/filters (from $GOROOT)\n    /Users/emuller/go2/src/github.com/docker/docker/pkg/parsers/filters (from $GOPATH)\npackage github.com/docker/docker/pkg/units: cannot find package \"github.com/docker/docker/pkg/units\" in any of:\n    /usr/local/go/src/github.com/docker/docker/pkg/units (from $GOROOT)\n    /Users/emuller/go2/src/github.com/docker/docker/pkg/units (from $GOPATH)\n$ cd ~/go2/src/github.com/docker/swarm\n$ godep restore -v\ngodep: Downloading dependency (if needed): github.com/Sirupsen/logrus\ngodep: Downloading dependency (if needed): github.com/codegangsta/cli\ngodep: Downloading dependency (if needed): github.com/coreos/etcd/client\ngodep: Downloading dependency (if needed): github.com/coreos/etcd/pkg/pathutil\ngodep: Downloading dependency (if needed): github.com/coreos/etcd/pkg/types\ngodep: Downloading dependency (if needed): github.com/docker/docker/pkg/ioutils\ngodep: Downloading dependency (if needed): github.com/docker/docker/pkg/tlsconfig\ngodep: Downloading dependency (if needed): github.com/docker/docker/pkg/random\ngodep: Downloading dependency (if needed): github.com/docker/docker/pkg/parsers\ngodep: Downloading dependency (if needed): github.com/docker/docker/pkg/stringid\ngodep: Downloading dependency (if needed): github.com/docker/docker/pkg/units\ngodep: Downloading dependency (if needed): github.com/docker/docker/pkg/version\ngodep: Downloading dependency (if needed): github.com/docker/libkv\ngodep: Downloading dependency (if needed): github.com/gogo/protobuf/proto\ngodep: Downloading dependency (if needed): github.com/golang/glog\ngodep: Downloading dependency (if needed): github.com/gorilla/context\ngodep: Downloading dependency (if needed): github.com/gorilla/mux\ngodep: Downloading dependency (if needed): github.com/hashicorp/consul/api\ngodep: Downloading dependency (if needed): github.com/mesos/mesos-go/auth\ngodep: Downloading dependency (if needed): github.com/mesos/mesos-go/detector\ngodep: Downloading dependency (if needed): github.com/mesos/mesos-go/mesosproto\ngodep: Downloading dependency (if needed): github.com/mesos/mesos-go/mesosutil\ngodep: Downloading dependency (if needed): github.com/mesos/mesos-go/messenger\ngodep: Downloading dependency (if needed): github.com/mesos/mesos-go/scheduler\ngodep: Downloading dependency (if needed): github.com/mesos/mesos-go/upid\ngodep: Downloading dependency (if needed): github.com/pborman/uuid\ngodep: Downloading dependency (if needed): github.com/samalba/dockerclient\ngodep: Downloading dependency (if needed): github.com/samuel/go-zookeeper/zk\ngodep: Downloading dependency (if needed): github.com/skarademir/naturalsort\ngodep: Downloading dependency (if needed): github.com/stretchr/objx\ngodep: Downloading dependency (if needed): github.com/stretchr/testify/assert\ngodep: Downloading dependency (if needed): github.com/stretchr/testify/mock\ngodep: Downloading dependency (if needed): github.com/ugorji/go/codec\ngodep: Downloading dependency (if needed): golang.org/x/net/context\ngodep: Restoring dependency (if needed): github.com/Sirupsen/logrus\ngodep: Restoring dependency (if needed): github.com/codegangsta/cli\ngodep: Restoring dependency (if needed): github.com/coreos/etcd/client\ngodep: Restoring dependency (if needed): github.com/coreos/etcd/pkg/pathutil\ngodep: Skipping already restored repo\ngodep: Restoring dependency (if needed): github.com/coreos/etcd/pkg/types\ngodep: Skipping already restored repo\ngodep: Restoring dependency (if needed): github.com/docker/docker/pkg/ioutils\ngodep: Restoring dependency (if needed): github.com/docker/docker/pkg/tlsconfig\ngodep: Skipping already restored repo\ngodep: Restoring dependency (if needed): github.com/docker/docker/pkg/random\ngodep: Skipping already restored repo\ngodep: Restoring dependency (if needed): github.com/docker/docker/pkg/parsers\ngodep: Skipping already restored repo\ngodep: Restoring dependency (if needed): github.com/docker/docker/pkg/stringid\ngodep: Skipping already restored repo\ngodep: Restoring dependency (if needed): github.com/docker/docker/pkg/units\ngodep: Skipping already restored repo\ngodep: Restoring dependency (if needed): github.com/docker/docker/pkg/version\ngodep: Skipping already restored repo\ngodep: Restoring dependency (if needed): github.com/docker/libkv\ngodep: Restoring dependency (if needed): github.com/gogo/protobuf/proto\ngodep: Restoring dependency (if needed): github.com/golang/glog\ngodep: Restoring dependency (if needed): github.com/gorilla/context\ngodep: Restoring dependency (if needed): github.com/gorilla/mux\ngodep: Restoring dependency (if needed): github.com/hashicorp/consul/api\ngodep: Restoring dependency (if needed): github.com/mesos/mesos-go/auth\ngodep: Restoring dependency (if needed): github.com/mesos/mesos-go/detector\ngodep: Skipping already restored repo\ngodep: Restoring dependency (if needed): github.com/mesos/mesos-go/mesosproto\ngodep: Skipping already restored repo\ngodep: Restoring dependency (if needed): github.com/mesos/mesos-go/mesosutil\ngodep: Skipping already restored repo\ngodep: Restoring dependency (if needed): github.com/mesos/mesos-go/messenger\ngodep: Skipping already restored repo\ngodep: Restoring dependency (if needed): github.com/mesos/mesos-go/scheduler\ngodep: Skipping already restored repo\ngodep: Restoring dependency (if needed): github.com/mesos/mesos-go/upid\ngodep: Skipping already restored repo\ngodep: Restoring dependency (if needed): github.com/pborman/uuid\ngodep: Restoring dependency (if needed): github.com/samalba/dockerclient\ngodep: Restoring dependency (if needed): github.com/samuel/go-zookeeper/zk\ngodep: Restoring dependency (if needed): github.com/skarademir/naturalsort\ngodep: Restoring dependency (if needed): github.com/stretchr/objx\ngodep: Restoring dependency (if needed): github.com/stretchr/testify/assert\ngodep: Restoring dependency (if needed): github.com/stretchr/testify/mock\ngodep: Skipping already restored repo\ngodep: Restoring dependency (if needed): github.com/ugorji/go/codec\ngodep: Restoring dependency (if needed): golang.org/x/net/context\ngodep: Checking dependency: github.com/Sirupsen/logrus\ngodep: Checking dependency: github.com/codegangsta/cli\ngodep: Checking dependency: github.com/coreos/etcd/client\ngodep: Checking dependency: github.com/coreos/etcd/pkg/pathutil\ngodep: Checking dependency: github.com/coreos/etcd/pkg/types\ngodep: Checking dependency: github.com/docker/docker/pkg/ioutils\ngodep: Checking dependency: github.com/docker/docker/pkg/tlsconfig\ngodep: Checking dependency: github.com/docker/docker/pkg/random\ngodep: Checking dependency: github.com/docker/docker/pkg/parsers\ngodep: Checking dependency: github.com/docker/docker/pkg/stringid\ngodep: Checking dependency: github.com/docker/docker/pkg/units\ngodep: Checking dependency: github.com/docker/docker/pkg/version\ngodep: Checking dependency: github.com/docker/libkv\ngodep: Checking dependency: github.com/gogo/protobuf/proto\ngodep: Checking dependency: github.com/golang/glog\ngodep: Checking dependency: github.com/gorilla/context\ngodep: Checking dependency: github.com/gorilla/mux\ngodep: Checking dependency: github.com/hashicorp/consul/api\ngodep: Checking dependency: github.com/mesos/mesos-go/auth\ngodep: Checking dependency: github.com/mesos/mesos-go/detector\ngodep: Checking dependency: github.com/mesos/mesos-go/mesosproto\ngodep: Checking dependency: github.com/mesos/mesos-go/mesosutil\ngodep: Checking dependency: github.com/mesos/mesos-go/messenger\ngodep: Checking dependency: github.com/mesos/mesos-go/scheduler\ngodep: Checking dependency: github.com/mesos/mesos-go/upid\ngodep: Checking dependency: github.com/pborman/uuid\ngodep: Checking dependency: github.com/samalba/dockerclient\ngodep: Checking dependency: github.com/samuel/go-zookeeper/zk\ngodep: Checking dependency: github.com/skarademir/naturalsort\ngodep: Checking dependency: github.com/stretchr/objx\ngodep: Checking dependency: github.com/stretchr/testify/assert\ngodep: Checking dependency: github.com/stretchr/testify/mock\ngodep: Checking dependency: github.com/ugorji/go/codec\ngodep: Checking dependency: golang.org/x/net/context\n$ go get -u github.com/samalba/dockerclient\n$ godep update github.com/samalba/dockerclient\nWhat is the output of echo $GOPATH ?\n. @ahmetalpbalkan So it is. (one of these days I'll learn to read)\n. @ahmetalpbalkan I suspect there is a go file an error in it somewhere in one of the packages. The error could be more helpful here.\n. Actually, it's the local Godeps.json file that may be invalid?\n. I was able to duplicate this locally by doing ...\nconsole\n$ git diff\ndiff --git a/Godeps/Godeps.json b/Godeps/Godeps.json\nindex bfa2851..d5a01f2 100644\n--- a/Godeps/Godeps.json\n+++ b/Godeps/Godeps.json\n@@ -9,7 +9,7 @@\n                        \"ImportPath\": \"github.com/Sirupsen/logrus\",\n                        \"Comment\": \"v0.6.4-6-g539d4dc\",\n                        \"Rev\": \"539d4dc034c079a7188b5d4ca9650632d73c66e8\"\n-               },\n+               }:\n                {\n                        \"ImportPath\": \"github.com/codegangsta/cli\",\n                        \"Comment\": \"1.2.0-62-gbf4a526\",\nWith my patch, linked above I get the following output:\nconsole\n$ godep update github.com/samalba/dockerclient\ngodep: Unable to parse Godeps/Godeps.json: invalid character ':' after array element\n(Note: it's a better error message because of #380.)\n. @ahmetalpbalkan No worries. The old error message gave you nothing to go on. I'll merge #380 soon and that should help people out.\n. Pleas try again with the current version of godep.\nSent from my iPhone\n\nOn Dec 20, 2015, at 21:16, Tim Hockin notifications@github.com wrote:\nIf I godep restore kubernetes it works (well, it produces a bunch of source - I have doubts about it being right, that's what I am trying to find out).\nIf I godep restore -v it fails:\nI get a whole lot of this, and then an exit(1).\nexecute &{Path:/usr/local/go/bin/go Args:[go get -d -v github.com/appc/spec/schema] Env:[] Dir: Stdin: Stdout: Stderr: ExtraFiles:[] SysProcAttr: Process:0xc2082546e0 ProcessState:exit status 0 lookPathErr: finished:true childFiles:[0xc20802e408 0xc20802e428 0xc20802e428] closeAfterStart:[0xc20802e408 0xc20802e428] closeAfterWait:[0xc20802e420] goroutine:[0x497700] errch:0xc2082ff020}godep: restore: exec: already started\n\u2014\nReply to this email directly or view it on GitHub.\n. What version of godep? (godep version)\n\nSent from my iPhone\n\nOn Dec 20, 2015, at 22:16, Tim Hockin notifications@github.com wrote:\nI just did a godep restore on kubernetes followed by godep save ./... - I expected this to be a no-op, but I wanted to verify. Instead, I find that ONE particular library has had it's version changed to the current tip of the master branch.\nI can't figure out why. godep restore -v is failing (#374 here)\nSpecifically:\n{\n                    \"ImportPath\": \"github.com/coreos/go-systemd/dbus\",\n-                       \"Comment\": \"v2-27-g97e243d\",\n-                       \"Rev\": \"97e243d21a8e232e9d8af38ba2366dfcfceebeba\"\n-                       \"Comment\": \"v4-15-ga831f36\",\n-                       \"Rev\": \"a831f36d09de8f095c28eeee839df52e9de5031f\"\n              },\n  Any clues would be great? Godep is kind of inscrutable.\n\u2014\nReply to this email directly or view it on GitHub.\n. Confirmed, closing in favor of #358 \n. It is a transitive dependency that \"go get\" does not fetch, but can be required on other platforms to build the package. Older versions of godep relied on the go tool, but we no longer do, for exactly this reason.\n\nI plan on enhancing this workflow, especially around GO15VENDOREXPERIMENT.\nSent from my iPhone\n\nOn Dec 22, 2015, at 06:06, Ged notifications@github.com wrote:\nThis is a bug i think.\nOnce i did a go get golang.org/x/sys/unix, then godep was happy.\nSo it should be included in godep binary or whatever ?\ndw99-MacBook-Pro:backend apple$ godep save -r\ngodep: Unable to find dependent package golang.org/x/sys/unix in context of /Users/apple/workspace/go/src/github.com/Sirupsen/logrus\ngedw99-MacBook-Pro:backend apple$ go get golang.org/x/sys/unix\ngedw99-MacBook-Pro:backend apple$ godep save -r\ngedw99-MacBook-Pro:backend apple$ \n\u2014\nReply to this email directly or view it on GitHub.\n. @mikeatlas golang.org/x/sys/unix is not a \"core\" Go package. If you godep save and record that dep you can remove the need to fetch it with go get.\n. @geofffranks Yes, this should be fixed as of a month or two ago. I'm going to close this issue, but feel free to re-open if it's still failing with deps saved by v55.\n\nThanks!\n. Something you are requiring is transitively pulling in golang.org/x/sys/unix across OSes.\n. go get golang.org/x/sys/unix. After the restore you probably need to re-save to record golang.org/x/sys/unix.\n. Sorry. I should have replied sooner. This got lost in email. :-( \nI'd much rather do this by making this configurable via an array in Godps.json. Plus ensure that our code handles all the various permutations of build tags. And maybe default to what is hard coded now.\n. @diogogmt This is likely due to the fact that godep ignores arch build constraints, since it doesn't know where you will finally compile code. It's very common for people to dev on macOS, but build on Linux for instance.\n. go get golang.org/x/sys/unix\nFWIW: Now that work has started for a native solution (\nhttps://groups.google.com/forum/#!msg/go-package-management/P8TehVoFLjg/Ni6VRyOjEAAJ),\nI'm likely not going to be working on godep very much. In the interim I'm\nsuggesting people migrate to govendor (https://github.com/kardianos/govendor)\nif they are having problems with godep.\nOn Mon, Aug 29, 2016 at 1:47 AM thomasmodeneis notifications@github.com\nwrote:\n\nWeird, after updating from 1.6.2 to 1.7 on macos 10.8.x I'm running into\nthe same error\n$ godep save\ngodep: WARNING: Godep workspaces (./Godeps/_workspace) are deprecated and support for them will be removed when go1.8 is released.\ngodep: WARNING: Go version (go1.7) & $GO15VENDOREXPERIMENT= wants to enable the vendor experiment, but disabling because a Godep workspace (Godeps/_workspace) exists\ngodep: Package (golang.org/x/sys/unix) not found\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/377#issuecomment-243067806, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAZ2J3a_gmAQLRBLJ_1jKfauSK9ybhks5qkpycgaJpZM4G51iU\n.\n. PS: You will need to add \"solaris\" to the list of ignores in\nvendor/vendor.json if you move to govendor or you will still need\nx/sys/unix.\n\nOn Mon, Aug 29, 2016 at 11:10 AM Edward Muller edwardam@interlix.com\nwrote:\n\ngo get golang.org/x/sys/unix http://golang.org/x/sys/unix\nFWIW: Now that work has started for a native solution (\nhttps://groups.google.com/forum/#!msg/go-package-management/P8TehVoFLjg/Ni6VRyOjEAAJ),\nI'm likely not going to be working on godep very much. In the interim I'm\nsuggesting people migrate to govendor (\nhttps://github.com/kardianos/govendor) if they are having problems with\ngodep.\nOn Mon, Aug 29, 2016 at 1:47 AM thomasmodeneis notifications@github.com\nwrote:\n\nWeird, after updating from 1.6.2 to 1.7 on macos 10.8.x I'm running into\nthe same error\n$ godep save\ngodep: WARNING: Godep workspaces (./Godeps/_workspace) are deprecated and support for them will be removed when go1.8 is released.\ngodep: WARNING: Go version (go1.7) & $GO15VENDOREXPERIMENT= wants to enable the vendor experiment, but disabling because a Godep workspace (Godeps/_workspace) exists\ngodep: Package (golang.org/x/sys/unix) not found\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/377#issuecomment-243067806, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAZ2J3a_gmAQLRBLJ_1jKfauSK9ybhks5qkpycgaJpZM4G51iU\n.\n. @peter-edge @thockin This fixes the issues I know of and has test for the vendor/ related save issues. I also ran it against a slightly modified copy of github.com/peter-edge/go-importserver and github.com/libopenstorage/openstorage and the diffs, while not 100% clean look to be legit (although in the later case I only spot checked a few of the differences).\n. What repository are your trying to restore?\n. Can I get the entirety of the debug output as well as the output of 'go env'?\n\n\nSent from my iPhone\n\nOn Dec 23, 2015, at 00:37, Chris Knowles notifications@github.com wrote:\nI have a basic project not yet using godep with source inside my $GOPATH, when I run godep save -r on it the expected result happens but if I set revert all of those changes and then run export GO15VENDOREXPERIMENT=1 and godep save -d it never completes. I get this as part of the debug output:\nresolving vendor posibilities: /Users/cknowles/Projects/go/src/github.com/xxx/yyyy /Users/cknowles/Projects/go/\nAdding search dir: /Users/cknowles/Projects/go/src/github.com/xxx/yyyy/vendor/encoding/json\nAdding search dir: /Users/cknowles/Projects/go/src/github.com/xxx/vendor/encoding/json\nAdding search dir: /Users/cknowles/Projects/go/src/github.com/vendor/encoding/json\nAdding search dir: /Users/cknowles/Projects/go/src/vendor/encoding/json\nAdding search dir: /Users/cknowles/Projects/go/vendor/encoding/json\nAdding search dir: /Users/cknowles/Projects/vendor/encoding/json\nAdding search dir: /Users/cknowles/vendor/encoding/json\nAdding search dir: /Users/vendor/encoding/json\nAdding search dir: /vendor/encoding/json\nAdding search dir: /vendor/encoding/json\nAdding search dir: /vendor/encoding/json\nAdding search dir: /vendor/encoding/json\nAdding search dir: /vendor/encoding/json\nAdding search dir: /vendor/encoding/json\nAdding search dir: /vendor/encoding/json\nAdding search dir: /vendor/encoding/json\n[repeat the above line seemingly forever]\nFor some reason it gets stuck on the json encoding. The debug output of the packages looks ok. Go version is 1.5\n\u2014\nReply to this email directly or view it on GitHub.\n. Nevermind, realized that your package root has a trailing slash, so this should be fixed in v44. Please let me know!\n. @c-knowles I could test the underlying function probably, but I'm not really sure how these paths are being generated in the first place, hence the initial ask for the entire debug output.\n. Sorry about that. I'll have to spin up a windows machine to test with. \n. @DamienFontaine So this looks like a case insensitive issue (which was different, but similar to the original issue). Can you test with a godep built from this branch: https://github.com/tools/godep/tree/pathEqual and confirm if things are fixed or not?\n. @DamienFontaine Great. Merged and released as v56.\n. This should be closed by v45. If not please re-open. Thanks!\n. This looks good, but what happens when a legal file get's dropped at github.com/camlistore/go4/legal/LICENSE.md ? AFAICT we'd include that one too when we probably shouldn't as errorutil doesn't depend on legal and shouldn't vendor anything from it.\n. @jonboulle I'm suggesting that fixing the later will also fix this issue, but in a more complete fashion.\n. @thockin godep does not verify if what you have in the workspace is what's recorded in Godeps.json. That is kind of hard tbh w/o messing with your $GOPATH and/or downloading a bunch of stuff. So yes, it assumes that if it's in Godeps.json that it's in your workspace. \n\nGO15VENDOREXPERIMENT only means something to go versions >= 1.5, so I don't really understand the use case for 1.4 versions of go.\n. I have to enable the vendor experiment if the target version of go is 1.6 and the environment variable != \"0\". It's what I would expect as a developer.\nI think this would work better for you...\ngo\n    go15ve := os.Getenv(\"GO15VENDOREXPERIMENT\")\n    VendorExperiment = go15ve == \"1\" || (majorGoVersion == \"go1.6\" && go15ve != \"0\")\n. TBH though I wouldn't expect that env var to do anything when using any version of go < 1.5\n. My intention when introducing GO15VENDOREXPERIMENT support was to mirror the go tool's behavior. With go 1.4 that flag doesn't mean anything. Since we no longer depend on go list I felt a stricter interpretation within godep was necessary to be more closely align with the go tool.\nPS: Why aren't you using go 1.5.2 locally at this point?\n. @thockin godep defines it's GO15VENDOREXPERIMENT flag like the go tool. So when using go1.4 it shouldn't do anything wrt that flag. I probably should have specified harder checks initially, but I really didn't expect people to want to use it with go1.4 in that way, nor do I think most of our users. So I'm going to close this as \"works as intended\" in a few days unless others pipe up that my expectations are way off base.\n. Do you think we should record the sha?\nconsole\n$ go version\ngo version devel +8d5ff2e Tue Dec 29 21:16:59 2015 +0000 darwin/amd64\nProbably not worth the hassle. If you are using devel it will just always vary most likely.\n. Thanks!\n. Godep requires that all packages from a single repo be at the same revision.\nAnd yes save needs some -v love.\nSent from my iPhone\n\nOn Dec 30, 2015, at 14:28, Tim Hockin notifications@github.com wrote:\nI'm trying to figure this out:\n$ godep save -v ./...\ngodep: WARNING: Recorded go version (go1.5.1) with minor version string found.\ngodep: WARNING: Recorded major go version (go1.5) and in-use major go version (go1.4) differ.\ngodep: To record current major go version run godep update -goversion.\ngodep: cannot save github.com/opencontainers/runc/libcontainer/cgroups at revision d97d5e8b007e4657316eed76ea30bc0f690230cf: already have github.com/opencontainers/runc/libcontainer at revision 97bc9a7faf3dd660d9be90a2880b2e37f3cdbf38.\nRun `godep update github.com/opencontainers/runc/libcontainer' first.\nI don't want to update libcontainer. My Godeps.json file lists 97bc9a... - why is it trying to import a diffrent rev? Running with -v gives me nothing extra - not a single line. Running with -d has generated 40 MILLION LINES of debug and is still running 20 minutes later.\nNeither one seems very useful. How do I track this down?\n\u2014\nReply to this email directly or view it on GitHub.\n. Godep works off what's in the $GOPATH and doesn't (\ud83c\udfe7) care what's vendored. You need to \"godep restore\" before doing most things. I'd like to change that over time along with the vendor/ folder, but people still rely on the old behavior too and an explosion of flags and possible code paths is :-(.\n\nSent from my iPhone\n\nOn Dec 30, 2015, at 15:42, Tim Hockin notifications@github.com wrote:\noh for the love of ...\nIt's finding a different rev in GOPATH than I have vendored. Despite the\nfact that it won't (as per another issue I filed, thanks for the patience)\nactually replace Godeps that are already present, it complains if the\nversions don't match,\nGodep's logic is inscrutable to me.\nOn Wed, Dec 30, 2015 at 3:38 PM, Tim Hockin thockin@google.com wrote:\n\nI know it requires the same version - I am trying to figure out where it\ngot the idea that there was a different version involved? The parent repo\n(libcontainer) is vendored at rev X, why is it trying to pull a child of\nthat at rev Y?\nOn Wed, Dec 30, 2015 at 2:59 PM, Edward Muller notifications@github.com\nwrote:\n\nGodep requires that all packages from a single repo be at the same\nrevision.\nAnd yes save needs some -v love.\nSent from my iPhone\n\nOn Dec 30, 2015, at 14:28, Tim Hockin notifications@github.com wrote:\nI'm trying to figure this out:\n$ godep save -v ./...\ngodep: WARNING: Recorded go version (go1.5.1) with minor version string\nfound.\ngodep: WARNING: Recorded major go version (go1.5) and in-use major go\nversion (go1.4) differ.\ngodep: To record current major go version run godep update -goversion.\ngodep: cannot save github.com/opencontainers/runc/libcontainer/cgroups\nat revision d97d5e8b007e4657316eed76ea30bc0f690230cf: already have\ngithub.com/opencontainers/runc/libcontainer at revision\n97bc9a7faf3dd660d9be90a2880b2e37f3cdbf38.\nRun `godep update github.com/opencontainers/runc/libcontainer' first.\nI don't want to update libcontainer. My Godeps.json file lists\n97bc9a... - why is it trying to import a diffrent rev? Running with -v\ngives me nothing extra - not a single line. Running with -d has generated\n40 MILLION LINES of debug and is still running 20 minutes later.\nNeither one seems very useful. How do I track this down?\n\u2014\nReply to this email directly or view it on GitHub.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/388#issuecomment-168091343.\n\n\u2014\nReply to this email directly or view it on GitHub.\n. And fwiw I think I'm going to add a \"list\" of \"status\" command to show what the status of various packages is.\n\n\nSent from my iPhone\n\nOn Dec 30, 2015, at 15:42, Tim Hockin notifications@github.com wrote:\noh for the love of ...\nIt's finding a different rev in GOPATH than I have vendored. Despite the\nfact that it won't (as per another issue I filed, thanks for the patience)\nactually replace Godeps that are already present, it complains if the\nversions don't match,\nGodep's logic is inscrutable to me.\nOn Wed, Dec 30, 2015 at 3:38 PM, Tim Hockin thockin@google.com wrote:\n\nI know it requires the same version - I am trying to figure out where it\ngot the idea that there was a different version involved? The parent repo\n(libcontainer) is vendored at rev X, why is it trying to pull a child of\nthat at rev Y?\nOn Wed, Dec 30, 2015 at 2:59 PM, Edward Muller notifications@github.com\nwrote:\n\nGodep requires that all packages from a single repo be at the same\nrevision.\nAnd yes save needs some -v love.\nSent from my iPhone\n\nOn Dec 30, 2015, at 14:28, Tim Hockin notifications@github.com wrote:\nI'm trying to figure this out:\n$ godep save -v ./...\ngodep: WARNING: Recorded go version (go1.5.1) with minor version string\nfound.\ngodep: WARNING: Recorded major go version (go1.5) and in-use major go\nversion (go1.4) differ.\ngodep: To record current major go version run godep update -goversion.\ngodep: cannot save github.com/opencontainers/runc/libcontainer/cgroups\nat revision d97d5e8b007e4657316eed76ea30bc0f690230cf: already have\ngithub.com/opencontainers/runc/libcontainer at revision\n97bc9a7faf3dd660d9be90a2880b2e37f3cdbf38.\nRun `godep update github.com/opencontainers/runc/libcontainer' first.\nI don't want to update libcontainer. My Godeps.json file lists\n97bc9a... - why is it trying to import a diffrent rev? Running with -v\ngives me nothing extra - not a single line. Running with -d has generated\n40 MILLION LINES of debug and is still running 20 minutes later.\nNeither one seems very useful. How do I track this down?\n\u2014\nReply to this email directly or view it on GitHub.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/388#issuecomment-168091343.\n\n\u2014\nReply to this email directly or view it on GitHub.\n. It would have to be a separate flag, or a modification to the -t flag (make it have different modes beyond true/false). Many people want to save the deps for their tests, but not the deps for their dep's tests.\n\n\nAlso, would require a test case in save_test.go\n. Maybe we could combine this with the diff command somehow?  Or at the very least deprecate the diff command for this or something like it.\nI'm hesitant to add another command atm w/o more thought into it's purpose and how it fits in long term. For instance. I'd like to have godep get fetch directly into the vendor/ directory when VendorExperiment is on (with a switch to disable) ... how would this command work then?\n. @awsmsrc I totally get the point and it's something I like. I don't use diff much because frankly it's not useful enough to me. I think something like this could be more useful.\n@shurcooL Nice packages/tools. I have been wanting to add something like godep status for a while to relay what godep thinks about the status of the project you are working on and it's dependencies. I think our licenses are compatible so I may look at \"borrowing\" some of that work. ;-) \n@client9 Godep has no real \"api\" atm, but I'm open to PRs / work to open one up.\n. @awsmsrc godep diff already shows what's outdated (although perhaps a little more haphazardly than we'd like. How about altering the way that command works to work like this proposal? I think this would be more useful to people anyway.\n. @awsmsrc SGTM I have a bunch of other stuff scheduled for this week.\n. @awsmsrc Are you still interested in working on this?\n. Closing, please open a new issue (or re-open this one) if you are interested.\n. It was an oversight omitting it from the Changelog (at the least) and the README. I'll see about fixing that up ASAP.\nWe currently do ignore files with ignore and appengine tags: https://github.com/tools/godep/blob/a1054101461cab7f7c67a22e3aabd0fdb567ce3a/list.go#L271\nFWIW: I'd like to add back in more tag support at some point.\n. Maybe we should just check earlier and abort as basically the GOPATH is assumed to exist ATM?\n. Thanks. Merged as c98cb3f12da9d553e2e47522800fec483a524beb.\n. If you can show me how to do that via travis-ci I'll be happy to add that. ATM travis-ci does all of the releasing. \n. I'd be willing to test it out.\n. Should devel not have the same rule as 1.6  and be written as:\ngo\n((majorGoVersion == \"go1.6\" || majorGoVersion == \"devel\" )&& os.Getenv(\"GO15VENDOREXPERIMENT\") != \"0\")\n. Yes, the environment variable is supposed to be removed in go1.7 (so likely sometime after go1.6 release for devel). I'd say keep it split out, but fix the logic so it's inline with go1.6.\n. Thanks. This was merged as b922ec76f7137e4a33a07663f4cf8f9614e494cd.\n. Please make sure to go fmt the code and I'll merge.\n. This was merged in as 26e6c638845825cecd1addc3f03578c9977676bd. Thanks!\n. @shurcooL Is this satisfactory for now?\n. Probably. godep expects the packages to exist in the $GOPATH atm. If you are starting a new project you'd start with go get <pkg>, use it, then godep save to record / copy it into your godep workspace (or vendor/). If you are working with an existing project that uses godep, you can start with a godep restore, which will modify your gopath to equal the recorded/saved deps. This can be worked around somewhat by saving with rewrites (godep save -r), but the ultimate solution is that godep will (eventually) use what's in vendor/. Some of that logic already exists, but not all of it yet.\nDoes that help? If not, can you please describe what you are doing in more detail?\n. @kevinburkeshyp do a restore, re-save without -r (or -r=false) to remove any rewrites if you have them and then blow away ./Godeps, then checkout any updated deps you want in your $GOPATH and then godep save everything again.\n. This is also an issue when a package starts importing new packages too. For instance grpc 51d644aca6b8eca07b6bd2f5ea435998bf73fa92 to fea7689493da00c4590150b3534c256a962259d3\n. Thanks for reporting this. Total oversight. ;-) Should be fixed in master (v51) and as soon as travis makes a release it will be on the releases page.\n. Hmm it may. I'll have to look into it and make a test case. Thanks for the report.\n. Thanks for the report. Will look into it.\n. I'll have to see what the vcs library generated for a url and see if that's the problem in these cases. Sorry, been working on other stuff for a bit. Hoping to get back to this later in the week or next week.\n. @MrJoy godep save -d <other args> should do that and a LOT more however.\n. @MrJoy Thanks for the analysis ! This is pretty much what I thought is likely happening, sorry I wasn't more specific in my response.\nFWIW: godep uses https://godoc.org/golang.org/x/tools/go/vcs, which I thought took care of all of that. It may not though as there is a wide discrepancy between the go command line tooling and these supplemental libraries. \nI'll look into those libs to verify what they do and if they don't work like the go tooling will patch and PR them.\n. @MrJoy @derekdowling So the error for goji is being returned from https://github.com/golang/tools/blob/3f1f7eeff104d9ef829677f12b9780dfdd26a96a/go/vcs/vcs.go#L395, which was thrown from RepoRootForImportDynamic which calls parseMetaGoImports which looks for the go-import tag. So something in the golang/tools/go/vcs package is busted vs go get AFAICT. \nDigging more.\n. This is fixed in v64. It was a bug in the vcs package\n. @cmoesel Can you share your Godeps.json file and any code? Also, what does 'find . -type d -name \"bson\"` return ?\n. I can't duplicate this, so I need more info.\n``` console\n$ cat main.go\npackage main\nimport (\n    \"fmt\"\n\"gopkg.in/mgo.v2/bson\"\n\n)\nfunc main() {\n    fmt.Println(bson.Binary{})\n}\n$ godep save\n$ cat Godeps/Godeps.json\n{\n    \"ImportPath\": \"github.com/freeformz/t408\",\n    \"GoVersion\": \"go1.6\",\n    \"GodepVersion\": \"v70\",\n    \"Deps\": [\n        {\n            \"ImportPath\": \"gopkg.in/mgo.v2/bson\",\n            \"Comment\": \"r2016.02.04-1-gb6e2fa3\",\n            \"Rev\": \"b6e2fa371e64216a45e61072a96d4e3859f169da\"\n        }\n    ]\n}\n$ find .\n.\n./Godeps\n./Godeps/Godeps.json\n./Godeps/Readme\n./main.go\n./vendor\n./vendor/gopkg.in\n./vendor/gopkg.in/mgo.v2\n./vendor/gopkg.in/mgo.v2/bson\n./vendor/gopkg.in/mgo.v2/bson/bson.go\n./vendor/gopkg.in/mgo.v2/bson/decode.go\n./vendor/gopkg.in/mgo.v2/bson/encode.go\n./vendor/gopkg.in/mgo.v2/bson/LICENSE\n./vendor/gopkg.in/mgo.v2/LICENSE\n```\nAlso @russellhaering when I checkout your example repo and I run godep save on it Godeps/_workspace/src/gopkg.in/ get's added.\nMaybe it was solved in the meantime?\n@cmoesel What version of godep are you using?\n. godep doesn't support this. It may have inadvertently done so in the past however. I'm going to keep this open though for now while I reconsider.\n. Can you try a build of godep with #418 applied and see if that fixes things?\n. @Manbeardo thanks for the update. I'll have to make a test case (even if it's manual) and figure out where else we fall down.\n. Thanks for the test & report. I'll have to investigate more and see if I can make a test case.\n. FWIW: godep (v60) no prints out a warning whenever you are NOT in the $GOPATH.\n. What version of godep are you using?\n. Also, when you say private repos, what do you mean? godep works with what's on disk already in your $GOPATH.\n. Please upgrade and try again w/o a vendor/ or Godeps/ directory. The current version is v52 and I remember something like this being fixed a ways back.\n. No worried. Thanks for giving it a try!\n. godep is designed to be run from within your $GOPATH with all of the deps also in the $GOPATH. So if you are working outside of the $GOPATH with symlinks and/or your deps are the same way godep may not work well for you. If you are inside of the $GOPATH though I'd really like to see if we can re-produce this to fix the issue and make a test case for it.\n. That seems like  a strange $GOPATH. Normally $GOPATH is something like export GOPATH=$HOME/go. And the you cd $GOPATH/src/<project>, where <project> == something like cd $GOPATH/go/src/github.com/tools/godep; edit code; godep save.\n. what version of godep, go, is the vendor experiment turned on or off and (based on the tree output example) I assume the project was created w the vendor experiment turned off....\n. Hmm. Nothing jumps out as off. I'm going to need the extremely large (possibly) output of godep save -d -v <whatever other args you are using unless you can re-produce it on a public repo.\n. Please try again with v55+ and if there is still a problem please upload a new godep save -d -v <pkg spec>. I fixed a few bugs and added some more debug output (which may help in this case).\n. Does github.com/foo/bar/backend import anything ? godep isn't detecting any imports or dependencies.\n. Thanks for trying. I don't understand what you mean by \"standard vendor support\". Are you not using a tool to maintain vendor/? \n. Oh, so if backend doesn't contain any files you need to pass godep save a package spec that includes all of the packages you want to have it analyze. This defaults to ., hence nothing is being saved to vendor/. Given the package structure you described, you probably want godep save ./cmd/...\n. Ahh okay. FWIW: godep writes to vendor/ when go1.6 (or go1.5 + env var) is used. Sorry you had troubles. Do you think there is any way I could update godep or the docs to better convey how save is supposed to be used?\n. Please upgrade to v53 and let me know if this is still an issue.\nThanks!\n. Also note that this patch \"increases\" the number of listed dependencies because we're no longer doing the path prefix match in godep fill. Previously if you had something like:\npackage A/B, imports A/B/C\npackage A/B/C\nYou would get a dependency on A/B recorded and then everything (including any sub dirs) of A/B would be copied in, including A/B/C. So things would work, but the recorded deps would be off (in that they didn't include all transitive deps).\nNow you get both dependencies recorded (A/B and A/B/C).\n. This was okay in the \"workspace\" days because of the rewrites or requirement to prefix go tool runs with godep. But with vendor/ you can just use the naked go tool and ./... really should just work when everything is vendored properly. This should (barring other issues) fix that after a re-save of dependencies. \n. @phinze Yep. I was looking into why ./... wasn't working with go install's for various go1.6 setups (with vendor) because it just should have. And that's when I noticed what seems to be previously spec'd behavior that I disagree with (copying all sub dirs of a required package).\n. @phinze checking with terraform master now to see if what godep's generates is good.\n. Once hashicorp/terraform#5248 is merged the instructions should be:\nconsole\n$ git checkout master\n$ godep restore\n$ git checkout <feature-branch>\n$ <edit code, add imports as necessary>\n$ godep save ./...\n$ git add -A .\n$ git commit -av\nIf that doesn't work (except for exotic situations) then I consider it a bug.\n. Did you start out with a godep restore ? \n. The process I've used several times is : https://github.com/tools/godep#migrating-to-vendor \nThere could be bad revisions being restored though. For instance https://github.com/hashicorp/terraform/pull/5248 needed to update a google cloud library because the code was using a local version and hadn't updated the vendored version yet.\nCan you provide a copy of you Godeps/Godeps.json file? \n. @sunheng that's probably because you have 2 different revs recorded, which is invalid. Fix all Revs to be the same for all code.google.com/p/google-api-go-client/googleapi packages.\n. @gracedo Are you outside of your $GOPATH and/or using symlinks?\n. @gracedo when the above output says <path-to-project> what is that? \n. @gracedo what is the output of godep version (looking for the entire string).\n. Is your fs case sensitive or not? It's part of the output of diskutil info /. I wonder if there is a regression there for some reason.\n. At this point I think I either need access to the code or the full dump of godep save -d -v  > out 2>&1 (which can be large) using v54.\n. Actually wait. I got that backwards. So it's not case sensitive. What do you get from the following 2 commands run inside of $GOPATH/src/github.com/SocialCodeInc/advisor-notifications/ (using whichever method you normally use to cd there).\npwd\ngit rev-parse --show-toplevel\n. Hmm. then I'm not really sure what's going on w/o the dump or the ability to reproduce it. Sorry.\n. I haven't been able to. I've done this now with a bunch of projects w/o incident (aside from stuff that was otherwise inflicted). I need the -d switch added to that, which will add tons of info.\n. Note all of the \"skipping untracked file\" output. That's telling me that symlinks may be used somewhere.\nIf you go to cd /Users/grace/code/go/src/github.com/Sirupsen/logrus and run git ls-files --full-name what is the output?\n. Also what is the output of echo $GOPATH ?\n. And also git rev-parse --show-toplevel in the same place that git ls-files --full-name is run.\n. So here's the problem: /Users/grace/Code/go/src/github.com/Sirupsen/logrus vs /Users/grace/code/go/src/github.com/Sirupsen/logrus\nI added a simple check of == recently.\nPlease update and try with v55 (just pushed). I bet that fixes it.\n. @gracedo thanks for working through this and sorry for all of the back and forth.\n. May (partially) fix #409.\n. May (partially) fix #334 \n. We used to be able to do this via godep save github.com/onsi/ginkgo/ginkgo ./... and use godep go install github.com/onsi/ginkgo/ginkgo to DTRT. But with the vendor experiment that doesn't work.\nWe can vendor it in the same way (godep save github.com/onsi/ginkgo/ginkgo ./...), but it needs to be installed a little differently:\n1. as go install github.com/hashicorp/terraform/vendor/github.com/onsi/ginkgo/ginkgo.\n2. godep restore && go install github.com/onsi/ginkgo/ginkgo (This touches the network though)\nSo that provides 2 possible immediate work arounds.\nAnother possible solution is just manually copy github.com/onsi/ginkgo/ginkgo into ginkgo/ginkgo, godep save ./... and install it with go install ./ginkgo/ginkgo. That's not fun though.\nSome thoughts (none of which I'm convinced are good or not):\n1. Addition of a godep install command which could walk through Packages from Godeps.json and install the non local packages (or all of them). So you would then run godep install github.com/onsi/ginkgo/ginkgo and that would shell out to go install github.com/hashicorp/terraform/vendor/github.com/onsi/ginkgo/ginkgo.\n2. A modifier to godep restore to restore directly vendored files to $GOPATH w/o hitting the network, which would then let you go install github.com/onsi/ginkgo/ginkgo.\n3. I could make godep go vendor aware and when it seems a target that it knows/thinks is in vendor it tries to DTRT and append the local package name + \"vendor/\" to the target. I'm afraid this may be fraught with errors and edge cases though.\nI'm open to suggestions on how to otherwise deal with this though. \n. A draw back to this is that you also need to always add github.com/onsi/ginkgo/ginkgo to your godep save pkg spec. I am considering having godep save w/o any params just use what's in Godeps/Godeps.json if it exists or default to . (which is what it does now if you don't specify a pkg spec). Thoughts?\n. If you are using the vendor/ experiment and have vendored an external dep like ginkgo, you can install it along with everything else via go install ./.... Since ./... will consider everything (including mains) inside of vendor/. See hashicorp/terraform#5291 for instance.\n. There are several issues here AFAICT.\n1. github.com/drone/drone does not use godep (there is no metadata file listing the contents of vendor).\n2.  godep does not as of yet collapse / pull up all dependencies. This can lead to this problem like here.\n3. godep relies on things being in $GOPATH.\n4. I don't really understand how drone manages these dependencies as there is no Godeps/Godeps.json file, so it's impossible to do a godep restore, which should be done before a re-save.\n. Ahh. Thanks for the clarification.\nSo the biggest issue is probably because we don\u2019t pull up all deps and flatten them at the top level (yet).\n\nOn Feb 23, 2016, at 7:22 PM, Dmitri Shuralyov notifications@github.com wrote:\nTo clarify, the codebase I was referring to (src.sourcegraph.com/sourcegraph/...) imports and uses both github.com/drone/drone/... and github.com/docker/docker/... or parts there-of. You're right, I'm not sure how github.com/drone/drone manages its /vendor/ folder, I don't see Godeps.json, govendor.json, or any other similar file.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/tools/godep/issues/421#issuecomment-188041604.\n. Probably v54 as I made the godep save exact dependencies. The current resolver doesn't know about figuring out / including C dependencies. It accidentally (or on purpose depending on how you look at it) worked before hand, but you had to drop your C deps in the correct spot for it to work.\n\nCan you link me to the repo this is an issue with and/or detail your directory layout?\n. The package analyzer doesn't understand parsing cgo imports. The workaround that should work for now is to put the c code in the same directory as the package that uses it. I'm not sure if we'll ever support anything beyond that going forward either. Need to think more about it and look at more projects using cgo before making a decision.\n. @twmb godep does use go/parser when analyzing packages, but currently that all get's thrown out and isn't used during the copy process. My next steps are to not throw that data out and preserve it so that it will simplify other code (like copy) and enable things like godep status (and maybe even a godep graph).\n@karalabe Thanks. Agreed. I need to dig through some common libraries that use CGO to really understand the assumptions. I don't think just blindly copying over .c/.cpp/.h files anywhere below the package would be sufficient, but maybe it is?\n. FWIW sqlite-3 has moved their files around so it will no longer happen with that library after an update of that package: https://github.com/mattn/go-sqlite3/commit/3a5555302e9b06eb5461016462900f1412ae3f7c\n. There may be some stuff in here I can use: https://github.com/golang/tools/blob/master/go/loader/cgo.go\n. You save dependencies by running. godep save <pkg spec>, where <pkg spec> is the code you want to analyze for dependencies (i.e. your code). It sounds like you are running godep save github.com\\golang\\protobuf, which is telling godep to analyze github.com\\golang\\protobuf for dependencies and vendor that. \nDoes that help explain usage? I should probably take another pass at the README, especially give go1.6.\n. That is not the way godep is used. Godep looks at your source code and figures out what packages your code is using and vendors those packages. So something like this ...\n``` console\n$ cd $GOPATH/github.com//\n$ vim main.go\npackage main\nimport \"gopkg.in/natefinch/lumberjack.v2\"\nfunc main() {\n  // make a logger, use it, etc\n}\n$ godep save\n```\nGiven the above the godep save looks at the code in the current directory and discovers that gopkg.in/natefinch/lumberjack.v2 is being used and copies $GOPATH/src/gopkg.in/natefinch/lumberjack.v2 to vendor/ (or Godeps/_workspace/src/gopkg.in/natefinch/lumberjack.v2 if you are using go1.5 w/o the vendor experiment).\nDoes that make sense?\n. What version of godep are you using? godep version output ?\n. Please upgrade to v57 and see if the issue is resolved or not. \n. What version of godep (output of godep version)?\n. What version of godep are you using (godep version).\n. Can you attach the output of godep save -v -d 2>&1. it will be quite large and you may need to upload it elsewhere / provide a compressed version.\n. Godep hasn't vendored dependency's test files by default since ~v9 (9/2015). So any save that was created before v9 may have done so, but any later saves should remove them.  What version of godep are you using?\n. I also fixed a bug recently where godep was vendoring more than it should have (because of old assumptions in the code that also included any sub directories of a package). If you are using godep please update to v56+ and do the following:\nconsole\n$ godep restore\n$ rm -rf Godeps vendor\n$ godep save <pkg spec> \n$ git add -A .\n$ git commit -am \"re-save to remove cruft\"\nWhere  is the packages you want godep to analyze, so proabably . (the default) or ./....\n. Thanks! I try to respond quickly, but can't always. So yay for finding just the right time to ask a Q. ;-) \n. Yes. It should flatten those deps out.\n. yes, we should do better there. There are also all sorts of problem related to v1 and v2 of \"a\" being used at the same time. For instance a type from v1 of \"a\" is not the same as the same type returned from v2 of \"a\". Even if they look the same. The only sane thing to do is flatten. We should ask / prompt / let the user decide which one to choose though (assuming we can't programmatically determine the best version).\n. Because there would then be 3 versions of the same dep. That can lead to confusing, unexpected and subtle errors in the program.\n. if foo and bar happen to return their own a types to their users they won't be equal if compared, which can lead to issues. I don't have links handy but this has been discussed a bunch in Go issues and IIRC go-nuts.\n. I have been thinking about doing this very thing for those very reasons. \n. So my main concern with this is Godep.json churn. But that's probably un-avoidable if we do want to record the version string. w/o using this version elsewhere I'm not sure this is all that useful. And I can see trying to enforce the version to add overhead to interactions with developers. But maybe that overhead is already being imposed, just in an ad-hoc way?\n. PS: I am interested in figuring this out, just thinking through the details here a little and the end goal.\n. save or update will modify Godeps.json. godep get just (currently, I have a notion to change this to something more useful given vendor/) shells out to go get with some wrapping. I'm not sure the version should be updated on godep update though, since it's not a total re-save, more like selective editing. So if you see a Godeps.json file that had a small modification done you can't really assume it has all of the package fixes from recent versions for instance.\nI don't know if that's enough to re-consider this or not.\nI guess looking at the git history and the comments would probably tell you enough though about what was done?\n. Err Sorry. I meant the commit log with the version numbers and comments like \"Updated github.com/foo/bar\" would tell you.\n. Thanks!\n. Sorry it took so long to answer this Q. It got lost in email :-(\nIt probably has less to do with . than with godep being explicit about which packages it is importing. Previously godep would only note the top level package and would also copy in all sub packages and directories, even if they aren't being used. This causes a bunch of problems when using ./... with the go1.5+ vendor experiment as the go tool's use of ./... includes everything in vendor.\nThis change happened in v54: https://github.com/tools/godep/blob/master/Changelog.md#v54-20160222\n. Yes, it's expected as godep is more specific wrt what it records as being used. Before it was kind of loose. I don't think it's related to . (. isn't treated specially by godep), it's just that those packages actually import sub packages that are properly part of your dependencies. \n. What version of godep are you using?\nWere you in your project's root directory in your $GOPATH?\nWhat options did you pass to 'godep save'?\nSent from my iPhone\n\nOn Mar 10, 2016, at 19:10, WanliTian notifications@github.com wrote:\nhi, all\nthere are items about subpackages under golang.org within godeps.json\nbut i cannot find any packages in vendor dir.\ngo 1.6\n\u2014\nReply to this email directly or view it on GitHub.\n. @WanliTian And the other things I asked about?\n. This warning is there to tell you that your combo version of go and config vars is telling godep to use the vendor experiment, but godep disables it because it found an existing old style godep workspace. \n\nExporting GO15VENDOREXPERIMENT=0 disables the vendor experiment, so the warning goes away.\nMaybe I should make the warning clearer somehow?\nSent from my iPhone\n\nOn Mar 10, 2016, at 22:40, Shawn Smith notifications@github.com wrote:\nI see I can do\nexport GO15VENDOREXPERIMENT=0 and it will go away, but for new terminals of course the warning will still show up unless I explicitly put export GO15VENDOREXPERIMENT=0 into my shell rc.\nI'm guessing this is why:\n(v == \"go1.6\" && go15ve != \"0\")\nI'm fine putting export GO15VENDOREXPERIMENT=0 into my shell rc for now, so feel free to close this if you'd prefer not to take action on it.\n\u2014\nReply to this email directly or view it on GitHub.\n. That shouldn't happen. Can you provide the output of 'godep save -d -v ./... &> log'? It will be large thought. I suspect you somehow got into an infinite loop and I need the debug output to figure out where/why that happened.\n\nSent from my iPhone\n\nOn Mar 11, 2016, at 00:06, Yoann Cerda notifications@github.com wrote:\nWith:\ngo 1.6\ngodep v57 (linux/amd64/go1.6)\nI have a project with less than 50 dependencies but it seems that 4GB of RAM + 2GB of swap are not enough to run godep save ./...\nfatal error: runtime: out of memory\nruntime stack:\nruntime.throw(0x9bd9e0, 0x16)\n    /usr/local/go/src/runtime/panic.go:530 +0x90\nruntime.sysMap(0xc9464c0000, 0x498c0000, 0x45da00, 0xbea8d8)\n    /usr/local/go/src/runtime/mem_linux.go:206 +0x9b\nruntime.(_mheap).sysAlloc(0xbd0b00, 0x498c0000, 0xc820000180)\n    /usr/local/go/src/runtime/malloc.go:429 +0x191\nruntime.(_mheap).grow(0xbd0b00, 0x24c60, 0x0)\n    /usr/local/go/src/runtime/mheap.go:651 +0x63\nruntime.(_mheap).allocSpanLocked(0xbd0b00, 0x24c5f, 0xc819677000)\n    /usr/local/go/src/runtime/mheap.go:553 +0x4f6\nruntime.(_mheap).alloc_m(0xbd0b00, 0x24c5f, 0xffffff0100000000, 0x7f28e932edd0)\n    /usr/local/go/src/runtime/mheap.go:437 +0x119\nruntime.(_mheap).alloc.func1()\n    /usr/local/go/src/runtime/mheap.go:502 +0x41\nruntime.systemstack(0x7f28e932ede8)\n    /usr/local/go/src/runtime/asm_amd64.s:307 +0xab\nruntime.(_mheap).alloc(0xbd0b00, 0x24c5f, 0x10100000000, 0x43fdac)\n    /usr/local/go/src/runtime/mheap.go:503 +0x63\nruntime.largeAlloc(0x498be000, 0x0, 0x0)\n    /usr/local/go/src/runtime/malloc.go:766 +0xb3\nruntime.mallocgc.func3()\n    /usr/local/go/src/runtime/malloc.go:664 +0x33\nruntime.systemstack(0xc82001b500)\n    /usr/local/go/src/runtime/asm_amd64.s:291 +0x79\nruntime.mstart()\n    /usr/local/go/src/runtime/proc.go:1048\ngoroutine 1 [running]:\nruntime.systemstack_switch()\n    /usr/local/go/src/runtime/asm_amd64.s:245 fp=0xc820114ab0 sp=0xc820114aa8\nruntime.mallocgc(0x498be000, 0x7ff760, 0x0, 0xc8f311f4a0)\n    /usr/local/go/src/runtime/malloc.go:665 +0x9eb fp=0xc820114b88 sp=0xc820114ab0\nruntime.newarray(0x7ff760, 0x498be00, 0x43cc98)\n    /usr/local/go/src/runtime/malloc.go:798 +0xc9 fp=0xc820114bc8 sp=0xc820114b88\nruntime.growslice(0x7ee8c0, 0xc90b750000, 0x3ad6400, 0x3ad6400, 0x3ad6401, 0x0, 0x0, 0x0)\n    /usr/local/go/src/runtime/slice.go:100 +0x2c1 fp=0xc820114c38 sp=0xc820114bc8\nmain.findDirForPath(0xc8203c17d1, 0xe, 0xc8203b9c00, 0x0, 0x0, 0x0, 0x0)\n    /home/yoann/.go/src/github.com/tools/godep/list.go:195 +0xb2f fp=0xc820114f58 sp=0xc820114c38\nmain.listPackage(0xc82010beb4, 0x5, 0x1, 0x0, 0x0)\n    /home/yoann/.go/src/github.com/tools/godep/list.go:140 +0xca7 fp=0xc820115298 sp=0xc820114f58\nmain.LoadPackages(0xc82000a2c0, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0)\n    /home/yoann/.go/src/github.com/tools/godep/pkg.go:46 +0x2d7 fp=0xc8201153d0 sp=0xc820115298\nmain.save(0xc82000a2c0, 0x1, 0x1, 0x0, 0x0)\n    /home/yoann/.go/src/github.com/tools/godep/save.go:143 +0x9fa fp=0xc820115c50 sp=0xc8201153d0\nmain.runSave(0xbc7160, 0xc82000a2c0, 0x1, 0x1)\n    /home/yoann/.go/src/github.com/tools/godep/save.go:79 +0x142 fp=0xc820115ce8 sp=0xc820115c50\nmain.main()\n    /home/yoann/.go/src/github.com/tools/godep/main.go:140 +0xdf1 fp=0xc820115f40 sp=0xc820115ce8\nruntime.main()\n    /usr/local/go/src/runtime/proc.go:188 +0x2b0 fp=0xc820115f90 sp=0xc820115f40\nruntime.goexit()\n    /usr/local/go/src/runtime/asm_amd64.s:1998 +0x1 fp=0xc820115f98 sp=0xc820115f90\ngoroutine 17 [syscall, 3 minutes, locked to thread]:\nruntime.goexit()\n    /usr/local/go/src/runtime/asm_amd64.s:1998 +0x1\n\u2014\nReply to this email directly or view it on GitHub.\n. Thank you, that will help tremendously. \n. @Sironfoot Your home directory is symlinked into your Dropbox folder? \nWhat is your version of godep (godep version). If you are not on v57+, please upgrade (go get -u github.com/tools/godep) and try again, providing any log (if it's different).\n\nAlso, what is your echo $GOPATH and pwd when you run godep save and ends up in the loop. \n. AFAICT your home directory is in dropbox, and it looks symlinked to /Users. What is the output of echo $HOME?.\n. Yes. godep uses path based case-insensitive file system path matches. So when you are on your desktop, somehow when you open a terminal to run godep you aren't actually in your $GOPATH (/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode), you are instead in /Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/src/dominic/godep-test. Do you use a context menu in Finder to open a terminal? Or some other method? Basically, how did you get to /Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/src/dominic/godep-test instead of  /Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/src/dominic/godep-test\n. changing your $GOPATH to /Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode should solve the problem. I'm somewhat surprised all of the go tools work as well. I do need to track down why some symlink stuff works and some doesn't though.\n. There is no need to use 'godep go' with the vendor experiment (go1.6 and go1.5 with env var set). It's likely to be removed in the future.\nSent from my iPhone\n\nOn Mar 13, 2016, at 22:19, WanliTian notifications@github.com wrote:\ngodep save can save all dependent packages to vendor directory,but godep go build donot find packages in vendor.\nhow to resolve this?\n\u2014\nReply to this email directly or view it on GitHub.\n. What version of godep?\n\nAlso can you provide the output of godep restore -v ?\n. Also bb2ebadc9746f23e4a296e3cbdb8c01e956baee1 is not a tag. It looks like a fetch wasn't done. I rewrote restore to work better a few months ago and I'm pretty sure it does a fetch if the rev isn't available: https://github.com/tools/godep/blob/91e0ec806b03862d597978a9132fb592c0d6ba39/restore.go#L142-L145\n. If you could provide your Godeps/Godeps.json file I may be able to re-construct something. If it's large it will be harder to do though.\n. What version of godep (godep version output)?\nCurrent version of godep will save to vendor/ if go1.6 or go1.5 w/GO15VENDOREXPERIMENT, unless there is an existing Godeps/_workspace folder (and if so you get a warning about it).\n. Godep looks directly at the environment AND go version. If a ./Godeps/_workspace exists though it keeps using it and disables the vendor experiment (and warns you about that). Here is the code it uses to determine this: https://github.com/tools/godep/blob/a62a9149e4443308c1574383a5e2b713088e5c58/main.go#L69-L88\nPlease see this if you are looking to move an existing Godeps workspace to vendor: https://github.com/tools/godep#migrating-to-vendor\n. @didip I don't really consider #377 a bug per se, at least not as it's stated. It will be \"solved\" by better build tag support though at some point.\n. That or progress as reported by git/hg/bzr.\n. When you say \"installed\" what do you mean? installed into your $GOPATH with go get ?\nWhat version of godep? (run godep version). If you are not running v60, please upgrade and try to re-save your deps.\ngodep is not adding the _, go is. \n. Can you push a repo that I can use to reproduce this?\nIf you run godep save do you get any warning about being outside of the $GOPATH? go prepends stuff with _ when you are working outside of the $GOPATH (AFAICT).\n. godep does not work with relative imports and they are generally frowned upon toy code. Please make sure you are inside of a $GOPATH.\n. Please upgrade to current and try again:\ngo get -u github.com/tools/godep\nSent from my iPhone\n\nOn Mar 25, 2016, at 12:34, dhawal55 notifications@github.com wrote:\nsrc\ngithub.com ++ test +++ helloWorld ++++ main.go (imports github.com/test/test1) +++ test1 ++++ test1.go (imports github.com/test/test2) +++ test2 ++++ test2.go\nIn the above scenario, HelloWorld imports test1 which in turn imports test2. When i run godep save on HelloWorld repo, it creates vendor/github.com/test/test1 but not vendor/github.com/test/test2\nMy godep version is godep v41 (darwin/amd64/go1.6)\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\n. I would suggest a full re-save.\n\nconsole\n$ godep restore\n$ rm -rf Godeps vendor\n$ godep save ./...\nIt's likely that the dependencies for what godep thinks is already saved are not being pulled in. I need to see about constructing a test case for this, but the above 3 commands are what I have used to ensure everything is as clean as can be.\n. It's probably an invalid go file, likely a temporary editor file. Godep should skip parsing files that start with '.' and it should return parsing errors to the user. I'll see about fixing at least the former a little later today.\nSent from my iPhone\n\nOn Mar 27, 2016, at 23:03, Paul Querna notifications@github.com wrote:\nRunning godep on Linux, on a path that has shared over sshfs with OSX, sometimes a ._foo.go is created by OSX for various reasons.\nWhen this happens, godep save will report zero dependencies for the entire package.\nNo error is reported, just godep save -v will show an empty list of dependencies.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\n. @smousa what version of godep are you using?\n. Try: \"go get github.com/go-ini/ini\" and then godep save.\nOn Apr 5, 2016, at 05:26, Gareth Murphy notifications@github.com wrote:\n@donhcd just tried out your branch; although the issue seems to describe exactly what I'm looking for, I'm still getting godep: Package (github.com/go-ini/ini) not found when running godep save against a package the requires aws-sdk-go.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\n. Nested vendor folders only lead to problems in the long run. Most tools un-nest them. godep is a little naive in the way it handles that, but the end result is the same.\n. @donhcd Aa(B.Btype) can't be called because it's really A/vendor/B.Btype. Also what happens when you use a B and the project vendors a different B and then returns something of it's B.BType? Your projects B.Btype != A/vendor/B.Btype.\n\nAnd what if A requires a database/sql driver an you go to use the same driver? You'll get a panic.\nre vendor inside of internal packages. It doesn't solve all the problems and IMO I don't think we should ever vendor anything inside of internal packages.\n. @roylou packages that are libraries should not lock their dependencies to a specific version, but need to specify ranges that are known to work. There are several attempts in go land to implement this in the different tools and I'm waiting to see what people adopt. My favorite ATM is what dave chenney is doing with GB's depfile https://github.com/constabulary/gb/tree/master/depfile\n. godep's goal is to produce a single, top level vendor folder. See the convo in #444 as to why.\n. @galeone See #451, which was merged as v61.\n. Hmm. 'fmt' is a stdlib package and should be easily found. Is your go install special in any way? How was it installed? Are symlinks involved?\nSent from my iPhone\n\nOn Apr 21, 2016, at 06:40, David Dollar notifications@github.com wrote:\nI'm getting a similar error to @galeone . I'm on v61 and go 1.6.1\nTrying to re-run godep save gives me godep: Package (fmt) not found\n\u2014\nYou are receiving this because you commented.\nReply to this email directly or view it on GitHub\n. @ddollar I can't seem to replicate this with the same install. Can your provide a link to a copy of the output from godep save -d -v <pkg spec> >log 2>&1 ? The output may be huge, so it may not attach here.\n. @stroborobo go get obeys local arch. Since code can be deployed to different architectures godep looks at all dependencies. So when you godep save cross arch deps may be missing. I'm not sure what the best solution to that is.\n. @stroborobo my comment was wrt third party packages, not the stdlib. godep relies on the $GOPATH reguardless of installation method. As I mentioned above I wasn't able to replicate this with the \"same install\", meaning I removed my own godep / go and installed them via homebrew. Furthermore I was trying to clarify how godep analyzes packages. It always relies on $GOPATH, but can pull in extra transitive deps across architectures vs. go get. This is important if you develop on OSX, but deploy to Linux, which is a very common case.\n. If $GOPATH/github.com/stroborobo/myfmt isn't there then you will get not found because the package isn't in $GOPATH. The way godep currently works is that to update / save deps the packages need to be in the $GOPATH, even if they are already saved. This is for various reasons.\n\nRe: go get. Yes and No. Yes, in that go get fetches all the source code for your current os/architecture. No, in that the same code can require additional transitive dependencies on different os/architectures. I'm not sure if that's what happened here, but it's likely.\n. @stroborobo Maybe I should treat it as a bug. \n. @hadv context is part of go1.7 and therefore requires tip or a go1.7 build.\n. @hadv what version of godep are you using? I added support for handling go version build tags a few months ago, so this should work if the lib you are importing is conditionally importing context behind a build flag (unless your godep version is old). \nOtherwise the package you are using is just blankly importing context no matter of go version and the package needs to be fixed.\n. @Gnouc does anything use it transitively ? \n@jingweno I can't replicate, can you provide a step by step reproducer using go1.7rc3 and a clean gopath?\n@tejasmanohar This issue talks about several different problems AFAICT, can you be more specific?\n. Sounds like a problem with the version of go you are using or your install\nof go.\nOn Thu, Jul 21, 2016 at 5:44 PM Tejas Manohar notifications@github.com\nwrote:\n\n$ godep save ./...\ngodep: Package (encoding/json) not found\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/447#issuecomment-234425413, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAZ_T-Xln2rTvM4TS1bxTwY2RgKmNkks5qYBJXgaJpZM4H-fKt\n.\n. godep save -d -v nvidia-docker/nvidia is telling godep to analyze and\nsave the deps for the nvidia-docker/nvidia package. Is that what you want?\n\nOn Wed, Aug 17, 2016 at 10:11 AM jay vyas notifications@github.com wrote:\n\nsomething weird for me to , i think this might be the same error\n\u279c  kubernetes git:(config-e2e-file) \u2717 go version\ngo version go1.7 darwin/amd64\n\u279c  kubernetes git:(config-e2e-file) \u2717 godep version\ngodep v74 (darwin/amd64/go1.7)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/447#issuecomment-240480131, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAZ-WF5M0UZOPYkeZZT0xrFjQbTUJqks5qg0CygaJpZM4H-fKt\n.\n. The package is transitively required, possibly in a way where go get may\nnot fetch it. go get github.com/hashicorp/go-cleanhttp it directly. and\nre-save. I the error happens again with the same package there is a\nproblem. If it happens again with a different package, go get that\npackage. Rinse and repeat until save. You should only need to do this until\nall of the transitive deps are local.\n\nOn Wed, Oct 5, 2016 at 4:59 PM \u00d6mer Ufuk Efendio\u011flu \nnotifications@github.com wrote:\n\nWhy is that?\ngodep: Package (github.com/hashicorp/go-cleanhttp) not found\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/447#issuecomment-251833368, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAZxIv3kS_lUs_9WWe_-W3Q8qf4DtXks5qxDnEgaJpZM4H-fKt\n.\n. go get github.com/stretchr/testify/assert; godep save ./...\n\nOn Thu, Nov 3, 2016 at 12:18 AM Alyssa Quek notifications@github.com\nwrote:\n\nRunning into this issue:\n$ godep save ./...\ngodep: Package (github.com/stretchr/testify/assert) not found\n$ go version\ngo version go1.7.1 darwin/amd64\n$ godep version\ngodep v75 (darwin/amd64/go1.7.1)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/447#issuecomment-258076815, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAZ1oUBiW1z79A1xlykeQoTXTKLYC_ks5q6YrHgaJpZM4H-fKt\n.\n. godep works off the packages in your $GOPATH. if it can't find a package in\nyour $GOPATH, then it can't save it, so you need to manually go get it\nbefore saving.\n\nOn Wed, Nov 9, 2016 at 7:09 PM yhung124 notifications@github.com wrote:\n\nSame here\n$ go version\ngo version go1.7.1 linux/amd64\n$ godep version\ngodep v75 (linux/amd64/go1.7.1)\nI use a workaround method to get all missing packages, but I don't think\nit's a good idea.\n!/bin/bash\nrc=\"$(godep save 2>&1)\"\nwhile echo $rc | grep \"not found\";\ndo\n  package=$(echo $rc | sed -n \"s/godep: Package ((.*)) not found/\\1/p\")\n  go get $package\n  rc=\"$(/home/build/go/bin/godep save 2>&1)\"\ndone\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/447#issuecomment-259590944, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAZyXO16l9ohbLXqmbgzbl5BsmDO_Xks5q8orYgaJpZM4H-fKt\n.\n. What version of godep are you on?\n\nIf the working tree of a dep is dirty is should say what the dep is. That\nneeds to be resolved as godep won't know what to vendor if the dep's\nworking tree is dirty.\nI'm pretty sure the restriction on the local project being dirty was\nremoved many versions ago.\nOn the other machine I am assuming you have an older version of go/godep as\nwell.\nOn Mon, Nov 14, 2016 at 4:16 PM Yi Chen notifications@github.com wrote:\n\nSame here. I am adding a new package to the same code, and getting two\ndifferent errors from two different Mac OSX machines.\nOn one machine, I simply cannot run godep save ./..., it will report\nerror godep: dirty working tree error. Tried it on another machine and\nnow I am getting godep: Package (context) not found.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/447#issuecomment-260506661, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAZ1dd04WT4d8NpSBZEc8KDNFkBSd9ks5q-PnlgaJpZM4H-fKt\n.\n. So the packages in google.golang.org/cloud have local, uncommitted changes.\nOr something else is going on. If you \"cd /Users/yichen/go/src/\ngoogle.golang.org/cloud\" and run \"git status \", what does it say?\nOn Tue, Nov 15, 2016 at 19:50 Yi Chen notifications@github.com wrote:\nHi,\nI am using recent go and godep versions on both Mac OSX machines. I was\nable to solve the problem on the machine that reports \"Package (context)\nnot found\" by running \"go get -u ./...\", but the issue for dirty working\ntree still persist.\n$ godep version\ngodep v75 (darwin/amd64/go1.7.3)\n$ go version\ngo version go1.7.3 darwin/amd64\n$ godep save\ngodep: dirty working tree (please commit changes): /Users/yichen/go/src/\ngoogle.golang.org/cloud\ngodep: dirty working tree (please commit changes): /Users/yichen/go/src/\ngoogle.golang.org/cloud/compute/metadata\ngodep: dirty working tree (please commit changes): /Users/yichen/go/src/\ngoogle.golang.org/cloud/datastore\ngodep: dirty working tree (please commit changes): /Users/yichen/go/src/\ngoogle.golang.org/cloud/datastore/internal/proto\ngodep: dirty working tree (please commit changes): /Users/yichen/go/src/\ngoogle.golang.org/cloud/datastore/internal/type_proto\ngodep: dirty working tree (please commit changes): /Users/yichen/go/src/\ngoogle.golang.org/cloud/internal\ngodep: dirty working tree (please commit changes): /Users/yichen/go/src/\ngoogle.golang.org/cloud/internal/transport\ngodep: error loading dependencies\nOn Tue, Nov 15, 2016 at 5:46 PM, Edward Muller notifications@github.com\nwrote:\n\nWhat version of godep are you on?\nIf the working tree of a dep is dirty is should say what the dep is. That\nneeds to be resolved as godep won't know what to vendor if the dep's\nworking tree is dirty.\nI'm pretty sure the restriction on the local project being dirty was\nremoved many versions ago.\nOn the other machine I am assuming you have an older version of go/godep\nas\nwell.\nOn Mon, Nov 14, 2016 at 4:16 PM Yi Chen notifications@github.com\nwrote:\n\nSame here. I am adding a new package to the same code, and getting two\ndifferent errors from two different Mac OSX machines.\nOn one machine, I simply cannot run godep save ./..., it will report\nerror godep: dirty working tree error. Tried it on another machine and\nnow I am getting godep: Package (context) not found.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/447#issuecomment-260506661, or\nmute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/\nAAAAZ1dd04WT4d8NpSBZEc8KDNFkBSd9ks5q-PnlgaJpZM4H-fKt\n.\n\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/447#issuecomment-260828878, or\nmute\nthe thread\n<\nhttps://github.com/notifications/unsubscribe-auth/APRAhg1scSU9uDjUBk6-dauRqewhYVd5ks5q-mCTgaJpZM4H-fKt\n.\n\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/447#issuecomment-260846754, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAZz_gsfw9wQi76MSEzHG7pMQ4LT_oks5q-n2VgaJpZM4H-fKt\n.\n. It does, but you should consider migrating to dep or govendor instead.. What version of godep? Versions of godep (circa v41+, I would need to check the changelog for the specific version) process all .go files, except for those with \"ignore\" and \"appengine\" build tags. Adding go version build tags shouldn't be that hard since we also store the major go version in the Godeps.json file though.\n\nSent from my iPhone\n\nOn Apr 5, 2016, at 10:17, Cannibal Vox notifications@github.com wrote:\nIt's worse than that- deleting go17.go wont' help because it actually refused to read pre_go17.go. It's like build tag is reversed, it will ONLY read the 1.7 file.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\n. Looks like go1.7 includes a package named \"context\" and if you are not on 1.7 (really devel) then godep can't find the package because you don't actually have it.\n. Can anyone test out the branch that I pushed for this (See #451) ? I tested it here, but it's late and I don't want to merge it before reviewing it in the morning (and/or getting other +1s).\n. Thanks everyone, this should now be fixed.\n. Closing in favor of #451 for now.\n\nThanks for taking the time to take a stab at this though.\n. Merged as 35ee059b4e6c3df99fb6afc2d3b0f0790b22e1c1\n. Ugh. I'm not sure how to ask the go command if it's go1.7 or not while it's in \"devel\" mode.\n. I could at this point just assume that anything that reports \"devel\" is go1.7 though.\n. The go tool uses a build.Context.ReleaseTags slice and go1.7 has been added in devel. To take a \"guess\" at this I could compile/run this code with the current go version and take the left most element of the array. This is likely to work, until the go team changes the order of this slice for any random reason.\n``` go\npackage main\nimport (\n  \"fmt\"\n  \"go/build\"\n)\nfunc main() {\n  fmt.Println(build.Default.ReleaseTags[len(build.Default.ReleaseTags)-1])\n}\n```\nThat's super fragile, but so is having to say deal with what the definition of \"devel\" is.\nThoughts?\n. I could also parse the date returned by version in the devel case and hard code in the dates the tree was opened. This may then break every major cycle though.\n. Longer term, yes, by removing the need to godep restore. A go tooling change recently (go1.6) made this a problem AFAIK.\n. PS: godep restore is doing what it's always done, restore the recorded versions to the $GOPATH. it can only do this by checking out the various shas (AFAIK) it's recorded.\nAs a temp work around I could implement a godep unrestore, which would check out master again. But I'm hesitant to add another command that should be removed in the future and I'm not sure it's super helpful in the workflow ... ie. you have to remember to use it.\nThoughts?\n. PRs welcome. I don't have an exact commit to golang where this broke. Let me see if I can dig it up though.\n. It was likely this one: https://github.com/golang/go/commit/42206598671a44111c8f726ad33dc7b265bdf669\n. @Raffo What would you suggest be added to the README? It states what godep restore already does in a non VCS specific manner, since godep handles multiple types of VCS.\n. How about\nNOTE: godep restore leaves git repositories in a detached state. go1.6+ no longer checks out the master branch when doing a go get, see here.\nThen if you land an unrestore PR we can adjust that to recommend the usage of unrestore afterwards?\n. @Raffo README / restore help text updated in 584a3f5bf2671886bd3f7dc2b252762b5aa2a087\n. Why does the remote branch matter? I don't think we want to pull new code with unrestore, just check out the local master.\n. It only matters what it's merged to locally AFAIK, so git config --local branch.master.merge should tell us what to checkout. \nI could totally be wrong here, I don't think I've ever worked with remotes who HEAD was not master.\n. I see. If there is only one branch returned from git config --local --get-regexp 'branch.*' we could check that out and otherwise punt with instructions to the user to start?\n. I'm not sure I really want to require people to populate that field manually. Also AFAICT RemoteHEAD is detectable through either:\nconsole\n$ git remote show origin\n...\nHEAD branch: develop\n...\nor\nconsole\n$ git branch -r | grep \"origin/HEAD ->\"\n  origin/HEAD -> origin/develop\npossibly some other means as well.\n. I'm not sure we should save RemoteHEAD though and just honor the remote head from git info for what's already there.\n. godep save takes package paths or files as you point out. It analyzes the package(s) you point it to and determines what dependencies are required based on what is in your $GOPATH. I plan to enhance godep get <pkg> to just vendor  into vendor/.\nThis along with some other future enhancements should go a long way to removing the need for godep restore, which I also plan to remove.\n. Not really.I really suggest people look into using dep or govendor instead of godep.. It does, although it's a little janky and doesn't work well with the vendor experiment. We use it internally @ Heroku.\ngodep save ./... github.com/mattes/migrate saves both local deps and the main that is github.com/mattes/migrate.\nJanky parts:\n1. You need to always save both of those.\n2. It doesn't work well with vendor/ in that you can't then go install github.com/mattes/migrate. You have to prefix your local project's package name to it + vendor like so go install github,com/heroku/project/vendor/github.com/mattes/migrate. This is a limitation of how the vendor/ experiment works. If you are using old style godep workspaces then it's simply godep go install github.com/mattes/migrate.\nDoes that help?\n. Thanks!\n. I assume you resolved the issue?\n. I'll have to see if I can duplicate this with a test. Thanks for the report.\n. @robsix Can you give steps to reproduce?\n. Oops, linked wrong issue.\n. What are the contents of /Users/aaron/documents/gowork/src/github.com/Throckmortra/ryp ? What is your $GOPATH?\n. Also, does go install -v . run / work / install anything?\n. According to the output, godep didn't find any valid go files in . (GoFiles is nil)\n. So you either have invalid go files in . (syntax error maybe?) or you need to specificy ./... when you save. \n. v62 was just a doc update.\n. Your $GOPATH is /Users/aaron/Documents/gowork and you are in /Users/aaron/documents/gowork. So there is still some case related isuses apparently.\n. Hmm. Thanks for the report. I'll have to figure out a way to test this better. I don't think Travis CI has the option for case insensitive filesystems though.\n. Where did you git clone the package to?\n. I believe this ping is part of the golang.org/x/tools/go/vcs package which godep uses.\n. It looks like you have a newer version of golang.org/x/net in your GOPATH. Since godep works off what's in the GOPATH you need to 'godep restore' before saving new deps or this can happen. I'd like to get away from having to do that, but I'm not sure the right UI for it.\nThe error / help text should be clearer as well.\nThanks for the report.\nSent from my iPhone\n\nOn May 5, 2016, at 15:10, Jeff Hodges notifications@github.com wrote:\nWith godep version: godep v63 (darwin/amd64/go1.6.2)\nI added some code that added go grpc to my repository (and so, golang.org/x/net/http2 was added).\nBut then godep save failed and the godep update it told me that there was nothing for it to do:\n$  godep save ./go/...\ngodep: cannot save golang.org/x/net/http2 at revision 7e42c0e1329bb108f7376a7618a2871ab90f1c4d: already have golang.org/x/net/context at revision 35ec611a141ee705590b9eb64d673f9e6dfeb1ac.\nRun `godep update golang.org/x/net/context' first.\n$  godep update golang.org/x/net/context\n godep: no packages can be updated\nHere's a quick grep of my Godeps.json:\n$  cat Godeps/Godeps.json  | grep -A 1 'x/net'\n            \"ImportPath\": \"golang.org/x/net/context\",\n\"Rev\": \"35ec611a141ee705590b9eb64d673f9e6dfeb1ac\"\n\"ImportPath\": \"golang.org/x/net/context/ctxhttp\",\n        \"Rev\": \"35ec611a141ee705590b9eb64d673f9e6dfeb1ac\"\n\n\"ImportPath\": \"golang.org/x/net/html\",\n        \"Rev\": \"35ec611a141ee705590b9eb64d673f9e6dfeb1ac\"\n\n\"ImportPath\": \"golang.org/x/net/html/atom\",\n        \"Rev\": \"35ec611a141ee705590b9eb64d673f9e6dfeb1ac\"\nRunning go get -u -a golang.org/x/net/... per a comment in #335 and trying save and update again changed nothing.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\n. I am in the middle of rewritting update, so let's see if I can also tackle some of this ...\n\nI'm not sure what you mean wrt \"recording the path\". I'm not familiar with gvt, so I'll have to play with it. FWIW: Go packages are path based already. There is code in godep to figure out the root repo for a given package, so godep already has that info. It's just the way things are stringed together right now is sub optimal.\nBefore you did a go get -u -a did you do a godep restore?\nBasically I'm trying to figure out a starting state to replicate this issue.\n. PS: Thanks for the report. ;-) \n. Yeah. that's why you need to godep restore before saving new deps and/or updating deps. Basically the workflow (both fortunately and unfortunately) is:\nconsole\n$ godep restore\n$ cd $GOPATH/src/<package you want to update>\n$ git checkout master\n$ git pull origin master (or checkout whatever you want to update to)\n$ cd $GOPATH/src/<package I am working on>\n$ godep update <package you want to update>/... (most likely need the /... atm)\nAnd yes, that kinda sucks.\nI am thinking of side-stepping this with a godep get <package>[@<version/sha> command, which would just pull the package directly into vendor/ (or the workspace), including deps. It  would default to origin/HEAD unless specified. There is already a godep get, but it's a small, almost useless wrapper around go get.\nThoughts?\n. This is because of this: https://github.com/golang/go/commit/42206598671a44111c8f726ad33dc7b265bdf669\nThis doesn't \"fix\" anything for non godep users, just allows godep restore to work properly.\n. This came up in #453\n. The workflow for godep update is to first godep restore, then checkout the version of the package you want to update to, then update.\n. I agree. I thought there was a test for this, but maybe not. \nSent from my iPhone\n\nOn May 12, 2016, at 08:58, Amir Abu Shareb notifications@github.com wrote:\nI see, is there a workaround at all?\nSeems to me that godep  should update a single package and it's dependencies and not error if another package does not exists, is there a reason for this workflow that i'm missing?\nWould love to work on a fix if you're interested :)\n\u2014\nYou are receiving this because you commented.\nReply to this email directly or view it on GitHub\n. godep and go get can't work the same way. go get only pulls dependencies for the current architecture. godep needs to get all dependencies, across all OS, so that when a developer is working on OS Y the code can be deployed to OS Z. This is pretty common (I for one do most development on OSX, but most deployments to Linux).\n\nI do plan to add a field to Godeps.json to either blacklist or whitelist OS / build tags, but that is not done yet.\n. go get will also fetch any missing dependencies required to build packageX. This is the same as godep. godep will only scan dependencies for packages required by the package spec provided to godep save.\nWhat version of godep are you using? Older versions of godep were more \"liberal\".\n. console\n$ cd ~/go/src/github.com\n$ mkdir jmhodges\n$ cd jmhodges\n$ git clone https://github.com/jmhodges/howsmyssl.git\nCloning into 'howsmyssl'...\nremote: Counting objects: 1283, done.\nremote: Compressing objects: 100% (61/61), done.\nremote: Total 1283 (delta 28), reused 0 (delta 0), pack-reused 1216\nReceiving objects: 100% (1283/1283), 800.82 KiB | 324.00 KiB/s, done.\nResolving deltas: 100% (727/727), done.\nChecking connectivity... done.\n$ cd howsmyssl\n$ ls\nDockerfile                            allow_test.go                         howsmyssl-gcloud-credentials.json.enc static\nLICENSE                               client_info.go                        howsmyssl.go                          templates\nREADME.md                             config                                index_test.go                         tls\nall_suites.go                         conn.go                               insecure_suites.go                    travis_docker_push.sh\nallow.go                              gzip                                  stat_writer.go                        vendor\n$ git checkout test_allow\nBranch test_allow set up to track remote branch test_allow from origin.\nSwitched to a new branch 'test_allow'\n$ go get -u golang.org/x/net/publicsuffix\n$ godep save ./...\n$ cat Godeps/Godeps.json\n{\n    \"ImportPath\": \"github.com/jmhodges/howsmyssl\",\n    \"GoVersion\": \"devel-8f48efb\",\n    \"GodepVersion\": \"v67\",\n    \"Packages\": [\n        \"./...\"\n    ],\n    \"Deps\": [\n        {\n            \"ImportPath\": \"golang.org/x/net/publicsuffix\",\n            \"Rev\": \"ef00b378c73f107bf44d5c9b69875255ce89b79a\"\n        }\n    ]\n}\nInterestingly golang.org/x/net/publicsuffix isn't in vendor though. \nLooking more into why that is.\n. Ugh. well, in my case it did \"vendor\" it, just into a _workspace. So I found a different bug.\n. The bug I discovered is fixed in v69. So I can't replicate this issue.\nPerhaps there is another case sensitivity issue I haven't caught? What is the output of echo $GOPATH and pwd when you do a save that doesn't work?\n. @jmhodges I can't replicate this. Any further info?\n. Please update godep and try again, there are some update fixes recently.\nWRT save removing everything. This is because godep was unable to find any deps for the provided package spec (defaults to '.'). So either (a) save was run w/o the right package spec, (b) some weird symlink issue, (c) another filesystem case bug.\n. It's described in this read me section: https://github.com/tools/godep/blob/master/Readme.md#add-a-dependency \nHow can I make that clearer?\nSent from my iPhone\n\nOn May 16, 2016, at 07:22, Amir Abu Shareb notifications@github.com wrote:\nI'm sure i'm missing something, looked up in the docs but didn't find any way to do it, how can i add a new dependency?\nATM i'm doing this:\n$ godep save github.com/pkg/a\n$ git checkout Godeps\n$ git commit ..\nSurely there's a better way?\nCheers!\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\n. This needs to be fixed in the same way it was fixed for git. Resolving the symlink isn't acceptable. If mercurial is resolving the symlink then we need to change the behavior of mercurial to provide a path w/o resolving the symlinks for us. See also: https://github.com/tools/godep/commit/446e2f61cbc0bfa616de9b4b0cf6271945704a77\n. ditto and mercurial is horribly untested inside of godep. ;-) I'll see if I can take a look later.\n. You can (and arguably should) do those change in a branch and commit them. git checkout {{commit}} would then work. Why not modify your vendored copy?\n. I'd much rather do this by making this configurable via an array in Godps.json. Plus ensure that our code handles all the various permutations of build tags. And maybe default to what is hard coded now.\n. When a repo is git pushed to remote that has no source, how will that remote build the source w/o hitting the network?\n. If you are looking for that feature, please see govendor. PS: If you migrate to govendor, please don't use it's migrate command. I suggest instead doing:\n\nconsole\n$ godep restore\n$ rm -rf Godeps vendor\n$ govendor init\n$ govendor add +ex\n. @cleung2010 godep restore doesn't use the contents of vendor/ it's sole job is to fetch what is described in Godeps.json into $GOPATH. \n. @cleung2010 Great! FWIW: My recommendation would be govendor.\n. godep save looks at existing code to determine what packages should be saved and then copies those packages from your $GOPATH into a vendor directory. It's telling you that those packages aren't available in $GOPATH. godep save does not download any missing dependencies. Maybe a switch to do so would be useful? \n. This is because github.com/hpcloud/tail vendors a a version of gopkg.in/fsnotify.v1 that doesn't import golang.org/x/sys/unix. But godep flattens vendor folders and pulls up the dependency, so that there is only a single top level vendor directory. This required a version of gopkg.in/fsnotify.v1 be installed in the $GOPATH. The version vendored in hpcloud/tail is \"7be54206639f256967dd82fa767397ba5f8f48f5\" (1.2.1), while the version vendored in node-problem-detector is \"30411dbcefb7a1da7e84f75530ad3abe4011b4f8\".\n. At some point godep should start taking a look at the versions of vendored deps and throwing an error if they (a) conflict or (b) what it would copy would be different.\n. Thanks for the report!\nI don't think there is a test for that. I'll check and add one if there isn't and see if I can get it passing.\nThe easiest way to do this atm is:\nconsole\n$ godep restore -v\n$ rm -rf Godeps vendor\n$ godep save <pkg spec>\n$ git commit -av\nThe restore downloads and checks out your project's deps into $GOPATH. This makes it so that when you save again you get the same version of the deps re-saved. Anything that is no longer necessary won't be saved. Also any new tweaks to the save process are applied if you are using the latest godep (perms, stricter package matching, etc). I suggest upgrading to the latest version of godep before doing any of this.\n. It is indeed. Thanks!\n. I'll likely add an \"origin\" field to each dep instead. That's probably not the best for your use case, but probably more generally applicable. Thoughts on that?\n. Thanks!\n. Would an \"origin\" field referencing the full path to a different repo location be acceptable (this is what vendor.json does)? \nSo you would have something like this to \"alias\" the package github.com/heroku/slog from the location github.com/freeformz/slog.\njson\n...\n\"Deps\": [\n  {\n    \"ImportPath\": \"github.com/heroku/slog\",\n    \"Origin\": \"github.com/freeformz/slog\",\n    \"Rev\": \"abcdefg\"\n  }\n]\n...\nrestore would also have to add the other remote somehow and also fetch from there. Maybe it's okay to punt on that though to start?\n. I'm not actively maintaining godep anymore. I should update the README to reflect that. I suggest taking a look at dep instead.. I can't duplicate this.\n``` console\n$ mkdir -p $GOPATH/src/github.com/freeformz/t485\n$ cd $GOPATH/src/github.com/freeformz/t485\n$ echo 'package main\nimport (\n        \"fmt\"\n    \"golang.org/x/crypto/ssh\"\n\n)\nfunc main() {\n        fmt.Println(ssh.Permissions{})\n}' > main.go\n$ godep save\n$ cat Godeps/Godeps.json\n{\n    \"ImportPath\": \"github.com/freeformz/t485\",\n    \"GoVersion\": \"go1.7\",\n    \"GodepVersion\": \"v74\",\n    \"Deps\": [\n        {\n            \"ImportPath\": \"golang.org/x/crypto/curve25519\",\n            \"Rev\": \"c197bcf24cde29d3f73c7b4ac6fd41f4384e8af6\"\n        },\n        {\n            \"ImportPath\": \"golang.org/x/crypto/ssh\",\n            \"Rev\": \"c197bcf24cde29d3f73c7b4ac6fd41f4384e8af6\"\n        }\n    ]\n}\n$ find vendor\nvendor\nvendor/golang.org\nvendor/golang.org/x\nvendor/golang.org/x/crypto\nvendor/golang.org/x/crypto/curve25519\nvendor/golang.org/x/crypto/curve25519/const_amd64.s\nvendor/golang.org/x/crypto/curve25519/cswap_amd64.s\nvendor/golang.org/x/crypto/curve25519/curve25519.go\nvendor/golang.org/x/crypto/curve25519/doc.go\nvendor/golang.org/x/crypto/curve25519/freeze_amd64.s\nvendor/golang.org/x/crypto/curve25519/ladderstep_amd64.s\nvendor/golang.org/x/crypto/curve25519/mont25519_amd64.go\nvendor/golang.org/x/crypto/curve25519/mul_amd64.s\nvendor/golang.org/x/crypto/curve25519/square_amd64.s\nvendor/golang.org/x/crypto/LICENSE\nvendor/golang.org/x/crypto/PATENTS\nvendor/golang.org/x/crypto/ssh\nvendor/golang.org/x/crypto/ssh/buffer.go\nvendor/golang.org/x/crypto/ssh/certs.go\nvendor/golang.org/x/crypto/ssh/channel.go\nvendor/golang.org/x/crypto/ssh/cipher.go\nvendor/golang.org/x/crypto/ssh/client.go\nvendor/golang.org/x/crypto/ssh/client_auth.go\nvendor/golang.org/x/crypto/ssh/common.go\nvendor/golang.org/x/crypto/ssh/connection.go\nvendor/golang.org/x/crypto/ssh/doc.go\nvendor/golang.org/x/crypto/ssh/handshake.go\nvendor/golang.org/x/crypto/ssh/kex.go\nvendor/golang.org/x/crypto/ssh/keys.go\nvendor/golang.org/x/crypto/ssh/mac.go\nvendor/golang.org/x/crypto/ssh/messages.go\nvendor/golang.org/x/crypto/ssh/mux.go\nvendor/golang.org/x/crypto/ssh/server.go\nvendor/golang.org/x/crypto/ssh/session.go\nvendor/golang.org/x/crypto/ssh/tcpip.go\nvendor/golang.org/x/crypto/ssh/transport.go\n```\nIf you can reliably reproduce locally, please add -v -d to you commands, save the output and upload it somewhere I can inspect it.\n. This works for me. \nconsole\n$ go get github.com/setekhid/godeps-bug\n$ cd $GOPATH/go/src/github.com/setekhid/godeps-bug\n$ rm -rf Godeps              # remove any old Godep data\n$ godep save\n$ find Godeps\nGodeps\nGodeps/_workspace\nGodeps/_workspace/.gitignore\nGodeps/_workspace/src\nGodeps/_workspace/src/github.com\nGodeps/_workspace/src/github.com/setekhid\nGodeps/_workspace/src/github.com/setekhid/godeps-debug\nGodeps/_workspace/src/github.com/setekhid/godeps-debug/ignored.go\nGodeps/_workspace/src/github.com/setekhid/godeps-debug/subpkt\nGodeps/_workspace/src/github.com/setekhid/godeps-debug/subpkt/struct.go\nGodeps/Godeps.json\nGodeps/Readme\nNote that ignored.go is included.\nPS: Workspace support is deprecated.\nI tried this with my godep compiled with 1.7beta1 and 1.4.2 and the results are the same.\nIf you can reproduce please run save with -d -v, capture all of the output and upload it somewhere so that I can inspect it.\nThanks!\n. Looks like /home/dovydas/.gvm/pkgsets/go1.6.2/global/src/github.com/googollee/go-engine.io is dirty. if you do the following what is the output:\nconsole\n$ cd /home/dovydas/.gvm/pkgsets/go1.6.2/global/src/github.com/googollee/go-engine.io\n$ git status\n$ gi ls-files\n. What does your Godeps.json file look like ?\n. I can't reproduce this. When I require \"github.com/prometheus/common/expfmt\" and godep save I get \"github.com/prometheus/common/internal/bitbucket.org/ww/goautoneg\" vendored. Can you explain which dep requires this? Is it vendored there? Do you have the same version vendored there on your GOPATH?\n. If you ran go get github.com/tools/godep, is $GOPATH/bin in your $PATH ? Sounds like it isn't.\n. They are using the older style Godep workspace w/o rewrites, so run godep restore before running any go commands (or use godep go <cmd>).\n. godep just shells out to git. Are you sure that git is working because of .netrc or cached stuff in a local .git?\n. I'll have to setup a bitbucket private repo to rest this out, will probably take a bit because @ Gophercon.\n. In the meantime, could you provide the complete output of -d ?\n. So this is the problem: https://github.com/golang/tools/blob/master/go/vcs/vcs.go#L668 The golang/tools/vcs stuff that godep uses doesn't use .netrc at all. I wonder if they would accept a patch to support .netrc. That's probably unlikely. Of course the go tooling doesn't work the same way either. :-( \n. See also: https://github.com/golang/go/issues/16315\n. BTW: You should not need to go get or godep restore any vendored deps (assuming the use of vendor/) before running go install. If you do, there is a problem somewhere.\n. So I would recommend removing the following lines:\nconsole\nRUN go get github.com/segmentio/go-loggly # Dependency from the logging app\nRUN go get bitbucket.org/frobl/logging # Use go get here\nand changing the last run line to\nconsole\nRUN go install\nThis assumes using vendor/``\n. It is there for historic purposes (people using workspaces) and a few different advanced uses. The only thinggodep restoredoes is to make the packages in your $GOPATH reflect what is in Godeps.json. Since those packages are already invendor/and the go tool supports vendoring (go 1.5+), there is nogodep restorerequired as the required code is already invendor/.\n. Does this help? https://github.com/tools/godep/blob/master/FAQ.md#should-i-use-godep-restore\n. I also edited the readme around restore a little as well.\n. Looks legit to me. ;-) \n. This is confirmed and strange. I am out most of today through monday though.\n. My next step is togodep save -v -d ./... &> log` and walk through the log to see why this is happening.\n. I am really not sure what is going on here. I will have to look deeper when I get back from vacation on tuesday. Your existing work around LGTM for now. Sorry.\n. No, this is a bug.\nOn Wed, Aug 10, 2016 at 1:24 AM David Mohl notifications@github.com wrote:\n\nI am also not sure whether this is normal beahvior or a bug. Is godep\nupdate supposed to vendor the vendor of the vendor?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/498#issuecomment-238798839, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAZ00Orxlat6zca-cIBDXz-mfvJy6lks5qeYrVgaJpZM4JSJQ8\n.\n. FWIW: Now that work has started for a native solution (\nhttps://groups.google.com/forum/#!msg/go-package-management/P8TehVoFLjg/Ni6VRyOjEAAJ),\nI'm likely not going to be working on godep very much. In the interim I'm\nsuggesting people migrate to govendor (https://github.com/kardianos/govendor)\nif they are having problems with godep.\n\nOn Tue, Aug 30, 2016 at 5:00 AM oscarzhao notifications@github.com wrote:\n\nI also want flattened dependencies\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/498#issuecomment-243416708, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAZ1aTsETEz26p_4ncyujWkaREuTNZks5qlBtvgaJpZM4JSJQ8\n.\n. Blinly checking out master isn't a good thing, but probably works in the 90% case. I'd argue that the appropriate place to fix this is to have go get determine the remote head and check that out when not already on that branch when doing a go get -u.  godep already has logic to do that because it needs to check out the correct default head when updating to ensure the correct sha is present.\n\nAlso my goal, although I don't know if I'll ever get to it, is to remove the need to ever godep restore.\nThoughts?\n. This PR changes much more than that though. Please remove the other changes or describe why they were necessary.\n. I don't know the history. Tool late to change now really. Maybe @kr can shed some light on it?\n. It's likely that there is a problem with your $GOPATH. godep will only do\nthis if it doesn't find any packages. Also if you are using godep from\nbrew, make sure to uninstall it as it's known to cause problems.\nOn Fri, Nov 11, 2016 at 1:44 AM Kristijan Ujevi\u0107 notifications@github.com\nwrote:\n\nagreed\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/512#issuecomment-259920055, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAZ7yUSdRfB4R6vJrOF5-LrMDtk4BTks5q9DjvgaJpZM4J4yaz\n.\n. Also pwd. Is there any difference in case?\nThe other thing may be the pkg spec passed to save. By default it is '.'.\nIf there are no files to analyze in the current directory then Godeps.json\nwill be blank and everything will be deleted from vendor. What is the\nlayout of the project?\n\nOn Tue, Nov 15, 2016 at 4:22 AM Kristijan Ujevi\u0107 notifications@github.com\nwrote:\n\necho $GOPATH\noutput:\n/home/MyUsername/go\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/512#issuecomment-260627286, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAZ6Qy-2cvFULARI0o4ZoVOAOtRaYaks5q-aQQgaJpZM4J4yaz\n.\n. godep just shells out to git.\n\nOn Thu, Sep 15, 2016 at 9:40 AM C\u00edcero Verneck Corr\u00eaa \nnotifications@github.com wrote:\n\nExpected behavior\nIt should work for SSH key.\n.netrc prevent you from using two-factor-authentication.\nhttps://help.github.com/articles/requiring-two-factor-authentication-in-your-organization/\nActual behavior\nIt works for ~/.netrc #58 https://github.com/tools/godep/issues/58\ngodep version output\ngodep v74 (darwin/amd64/go1.7rc1)\ngo version output\ngo version go1.7rc1 darwin/amd64\nContents of Godeps.json file\nprivate repos\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/514, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAZ-bXC54PqVhhU1p87WZKizF74rYKks5qqXT3gaJpZM4J-FUI\n.\n. go get golang.org/x/net/lex/httplex and try again.\n\nOn Thu, Sep 15, 2016 at 10:10 AM dhawal55 notifications@github.com wrote:\n\nExpected behavior\ngodep save should pull all dependencies and save them in vendor folder\ngo build works correctly so all dependencies are present in GOPATH\nActual behavior\nWhen i run godep save, i get error for missing dependencies\ngodep save\ngodep: Package (golang.org/x/net/lex/httplex) not found\nSteps to reproduce behavior\nrm -rf Godeps\nrm -rf vendor\ngo build # This works and binary is created\ngodep save\ngodep version output\ngodep v74 (darwin/amd64/go1.6.2)\ngo version output\ngo version go1.6.2 darwin/amd64\nContents of Godeps.json file\nempty\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/515, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAZwZkOXdecvs5M1yDskpDTaw4hU3fks5qqXwGgaJpZM4J-HDv\n.\n. They are probably additional transitive deps that godep picks up that go\nbuild does not consider because godep includes all deps across all build\ntags. This is so that people can develop on one OS and build on another. I\nwould suggest giving govendor a try, which has an additional ignore\nfield in it's vendor.json file that can tweak this. I'm not sure if I'm\ngoing to be doing much work to enhance godep anymore because there is work\n(which I'm involved in) ongoing for an official package management tool.\n\nOn Thu, Sep 15, 2016 at 6:05 PM dhawal55 notifications@github.com wrote:\n\nI tried that and then it fails on next dependency. Isn't godep save\nsupposed to vendor all dependencies? Are these godep dependencies because\ni'm able to build my app correctly?\nOn Sep 15, 2016 3:56 PM, \"Edward Muller\" notifications@github.com wrote:\n\ngo get golang.org/x/net/lex/httplex\nhttp://golang.org/x/net/lex/httplex\nhttp://golang.org/x/net/lex/httplex and try again.\nOn Thu, Sep 15, 2016 at 10:10 AM dhawal55 notifications@github.com\nwrote:\n\nExpected behavior\ngodep save should pull all dependencies and save them in vendor folder\ngo build works correctly so all dependencies are present in GOPATH\nActual behavior\nWhen i run godep save, i get error for missing dependencies\ngodep save\ngodep: Package (golang.org/x/net/lex/httplex) not found\nSteps to reproduce behavior\nrm -rf Godeps\nrm -rf vendor\ngo build # This works and binary is created\ngodep save\ngodep version output\ngodep v74 (darwin/amd64/go1.6.2)\ngo version output\ngo version go1.6.2 darwin/amd64\nContents of Godeps.json file\nempty\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/515, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/\nAAAAZwZkOXdecvs5M1yDskpDTaw4hU3fks5qqXwGgaJpZM4J-HDv\n.\n\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/515#issuecomment-247477699, or\nmute\nthe thread\n<\nhttps://github.com/notifications/unsubscribe-auth/ADUqlbNb_DBu3OHp79YoJKsvCUNR8KXlks5qqc0BgaJpZM4J-HDv\n.\n\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/515#issuecomment-247495305, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAZwpsKrObKRMp8syzi8iIZk8701rjks5qqetEgaJpZM4J-HDv\n.\n. godep save w/o a package spec defaults to '.'. So if there are not\npackages in the current directory nothing will be saved.\n\nOn Thu, Nov 10, 2016 at 12:04 AM chnrxn notifications@github.com wrote:\n\nI saw the same behavior too. If the main package is not in the current\ndirectory, could you try supplying the path to the main package? E.g. godep\nsave -v ./cmd/...\nNote: I put all my main packages under ./cmd/, hence my example command.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/516#issuecomment-259625504, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAZx1UgCs4ShU_i_XV-TiNXee7Tu-Wks5q8s_zgaJpZM4KAuQq\n.\n. This is because godep was compiled with the go/ast package from go1.7, which doesn't support aliases.\n\nSome ways to \"solve\" this:\n1. Write my own parser for build tags and import statements (that's really the only reason godep parses files at all).\n2. recompiling godep with go tip should work around the issue.\n3. Other?\n. Yay\n. Thanks!\n. If you aren't using that package (even transitively) it won't be saved. You\nare probably building a file that is included, but not used.\nIs this (like that issue) on Heroku? If so, can you please file an issue\nthere and ask support to escalate it to me?\nOn Mon, Nov 14, 2016 at 7:21 PM Tejas Manohar notifications@github.com\nwrote:\n\nIs it possible to exclude a subpackage of a dependency from godep save\n./... etc? I want to exclude the internal/sasl package of mgo (\ngo-mgo/mgo#220 https://github.com/go-mgo/mgo/issues/220) because it\nrequires cgo, and I don't need that functionality.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/523, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAZ-G4scqhFp7DzaEtZGwy4AP0eQ3bks5q-SU5gaJpZM4KyFZb\n.\n. I posted on the linked issue with a repo to describe the likely issue.\n\nOn Tue, Nov 15, 2016 at 18:05 Tejas Manohar notifications@github.com\nwrote:\n\n@freeformz https://github.com/freeformz I'm actually not using Heroku,\nbut seems like people are having issues there.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/523#issuecomment-260832016, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAZ1Z60C_LB4mkrGrEYgkNNgntiy-Lks5q-mTcgaJpZM4KyFZb\n.\n. @parkr If you are interested sure, but my time has mostly moved to working with/on the tool being worked on by the go-pm community (coming soon).. @parkr It is not public yet, but you should check out https://groups.google.com/forum/#!topic/go-package-management/P8TehVoFLjg. Re: maintenance mode, throw up some PRs. ;-) . Thanks!. Godep ignores build tags (except ignore and appengine), so I'm not sure why this is happening.. With that said, I was able to reproduce this. :-( . Ugh. I did. I really need to write a make release.\n\nThanks!. Yeah. sorry, although I won't promise to not do that again. IMO tags are mutable and should be treated as such, although I do agree that doing so should be discouraged.. It may be huge, but can you provide the output of godep save -d -v ./... &> output ?. It looks like the change to stop using build.ImportDir in the code that handles './...' and the like is returning stuff above the current directory. There probably aren't tests for that specific issue, but I expected the existing tests to cover them. I'll have to dig more to figure out why.. Fixed. Sorry about that. Silly mistake. :-(. Something is likely wrong with your go install as this is just calling a stdlib function of the log package.. This is by design. godep only records go packages and any license files it can find.\nPossible work arounds:\n\nMake dict and deps (or their sub directories) actual go packages and have gojieba _ import them and they will be picked up.\nUse a tool such as go-bindata to embed the info into a go package as binary data. There are tools other than go-bindata as well.. This seems wrong to me on BlueMix's part.\n\nThe ImportPath recorded is the package name of the project you are saving dependencies for. If you send the code to them and they use the app name as the package name then code that uses sub packages will break as the names are different. For instance, your application is located in the package named github.com/olliephillips/test, which is stored in $GOPATH/src/github.com/olliephillips/test. Let's say github.com/olliephillips/test imports github.com/olliephillips/test/lib/stuff but Bluemix actually puts the code in $GOPATH/src/gohelloworld when it's compiling the software. The import will break unless BlueMix also looks through your code and fixes up imports. And even then, panics, traces and error messages will also be changed.\nMaybe Bluemix is doing something different, IDK, but this seems strange to me.\nPS: This isn't really a bug with godep, so I'm going to close this, sorry. If Bluemix support would like to weigh in please have them re-open this issue. Thx.. That's not a valid Godeps.json file because the package specified is not a valid go package declaration because it (a) contains no valid *.go files and (b) the packages contained there are actually golang.org/x/tools. So if the file is changed to:\ngo\n{\n  \"ImportPath\": \"github.com/tools/godep\",\n  \"GoVersion\": \"go1.7\",\n  \"Deps\": [\n    {\n      \"ImportPath\": \"golang.org/x/tools/cover\",\n      \"Rev\": \"3fe2afc9e626f32e91aff6eddb78b14743446865\"\n    }\n  ]\n}\ngodep restore works properly because the correct namespace for the code is golang.org/x/tools and golang.org/x/tools/cover is an actual go package.\nPS: This may have worked in previous versions of godep, but that was purely by accident.. ",
    "mreiferson": "or perhaps build tags to support an older implementation for go1.0.x?\n. FYI, I took a shot to see if we can get upstream to resolve this:\nhttps://codereview.appspot.com/14283043/\n. closing, got that CL merged\n. I spoke too soon, this needed one minor tweak.\n. @kr any thoughts on this change?\n. I agree with all of the above :+1:\n. I confirmed I'm on the latest master ef0d0da\nI'll poke around some more and see if I can figure out why it's not being counted as \"seen\".\n. see attached commit...\nBy calculating the reporoot and using that to test for \"seen\" it wasn't checking for subdirectories of a large parent repo...\n. I follow, feel free to close when you merge #23\n. :+1:\n. FYI this is probably out of date post #35\n. I like the higher granularity and more explicit references to what you're actually importing and depending on.  I don't mind the \"overhead\" in the manifest at all.\nDo you think theres a possibility that the duplication could be construed as implying that those two dependent packages could be pinned to different hashes?  Should this be an explicit error condition if they diverge?\nEven more radical, should the manifest (for each dependent repo) record the root, pinned hash, and an array of dependent import paths instead? Your example above becomes:\njson\n        {\n            \"RepoRoot\": \"github.com/crowdmob/goamz\",\n            \"Rev\": \"9bee4d46f8a986ae73c9c05e7359e940f9ffa80c\",\n            \"ImportPaths\": [\n                \"github.com/crowdmob/goamz/aws\",\n                \"github.com/crowdmob/goamz/sqs\"\n            ]\n        }\nDoes this make it more obvious that there is a single repo that we depend on but we only import the specified subset of packages?  I'm not sure I like it but it's food for thought.\nRelatedly, I'm curious to hear your thoughts on \"versioning\" of godep itself.  Its been fantastic that as it evolved it has maintained backwards compatibility and I think the change as you've implemented here continues that.  Still, it might be important to begin to lay the groundwork so something can be embedded in the manifest identifying compatibility, making it a little easier to manage the possibility of needing to make breaking changes.\nI don't want to derail this issue with the versioning conversation though, so perhaps we should open a separate issue for that discussion, I'm sure there are lots of opinions :)\n. Agreed, :+1:\n. I think it can be put off and I agree that I don't imagine the scope of the tool increasing much more.\nAlthough, to play devil's advocate, sometimes you wish in hindsight to have implemented some version negotiation already when you reach the point where you want to break backwards compatibility (so that software in the wild is already capable of providing good feedback).\n. at one point (#7) I started down the road of maintaining compatibility with old Go versions... it's not worth it.\nDespite godep itself not supporting pre go1.1, it doesn't mean you can't use it with packages that do...\n. You need to use slightly different syntax that specifies all packages:\n$ godep get github.com/bitly/nsq/...\n. related to #36 IMO\n. It seems like godep path alone does exactly what you're looking for.  The godep path command doesn't just print the workspace, it builds it too.\nAm I missing something?\n. I think I follow, but what I was suggesting was not to use godep restore at all... godep path alone will produce a \"workspace\" that contains all of your pinned dependencies in your Godeps file.\n. ahhh, yes, forgot that the default behavior changed - is there another way to use godep non-vendored?\n. Ahhh, thanks, I forgot that the default behavior changed.\nDoes that mean, when setup in this way (where you use the new default behavior, and src is ignored), that godep path does not work the way it previously did?\n. Seems like there are two options:\n1. Do nothing. It's totally acceptable to run GOPATH=$(godep path) godep restore as @antifuchs originally pointed out for this situation.\n2. Make it \"official\" as to which approach is correct for non-vendored operation (not sure what this would actually entail other than clear(er) documentation?).  I'm probably biased, but the old method feels more correct, instead of having to modify the vendored directory.\nI really like the simplicity of a top-level JSON file paired with GOPATH=$(godep path) - and then using all the standard go tooling as one normally would.\nAre there other options?\n. :+1:\n. I skimmed, I don't think you really want or need nitpicks so LGTM\nNice tests :100: \n. or perhaps build tags to support an older implementation for go1.0.x?\n. FYI, I took a shot to see if we can get upstream to resolve this:\nhttps://codereview.appspot.com/14283043/\n. closing, got that CL merged\n. I spoke too soon, this needed one minor tweak.\n. @kr any thoughts on this change?\n. I agree with all of the above :+1:\n. I confirmed I'm on the latest master ef0d0da\nI'll poke around some more and see if I can figure out why it's not being counted as \"seen\".\n. see attached commit...\nBy calculating the reporoot and using that to test for \"seen\" it wasn't checking for subdirectories of a large parent repo...\n. I follow, feel free to close when you merge #23\n. :+1:\n. FYI this is probably out of date post #35\n. I like the higher granularity and more explicit references to what you're actually importing and depending on.  I don't mind the \"overhead\" in the manifest at all.\nDo you think theres a possibility that the duplication could be construed as implying that those two dependent packages could be pinned to different hashes?  Should this be an explicit error condition if they diverge?\nEven more radical, should the manifest (for each dependent repo) record the root, pinned hash, and an array of dependent import paths instead? Your example above becomes:\njson\n        {\n            \"RepoRoot\": \"github.com/crowdmob/goamz\",\n            \"Rev\": \"9bee4d46f8a986ae73c9c05e7359e940f9ffa80c\",\n            \"ImportPaths\": [\n                \"github.com/crowdmob/goamz/aws\",\n                \"github.com/crowdmob/goamz/sqs\"\n            ]\n        }\nDoes this make it more obvious that there is a single repo that we depend on but we only import the specified subset of packages?  I'm not sure I like it but it's food for thought.\nRelatedly, I'm curious to hear your thoughts on \"versioning\" of godep itself.  Its been fantastic that as it evolved it has maintained backwards compatibility and I think the change as you've implemented here continues that.  Still, it might be important to begin to lay the groundwork so something can be embedded in the manifest identifying compatibility, making it a little easier to manage the possibility of needing to make breaking changes.\nI don't want to derail this issue with the versioning conversation though, so perhaps we should open a separate issue for that discussion, I'm sure there are lots of opinions :)\n. Agreed, :+1:\n. I think it can be put off and I agree that I don't imagine the scope of the tool increasing much more.\nAlthough, to play devil's advocate, sometimes you wish in hindsight to have implemented some version negotiation already when you reach the point where you want to break backwards compatibility (so that software in the wild is already capable of providing good feedback).\n. at one point (#7) I started down the road of maintaining compatibility with old Go versions... it's not worth it.\nDespite godep itself not supporting pre go1.1, it doesn't mean you can't use it with packages that do...\n. You need to use slightly different syntax that specifies all packages:\n$ godep get github.com/bitly/nsq/...\n. related to #36 IMO\n. It seems like godep path alone does exactly what you're looking for.  The godep path command doesn't just print the workspace, it builds it too.\nAm I missing something?\n. I think I follow, but what I was suggesting was not to use godep restore at all... godep path alone will produce a \"workspace\" that contains all of your pinned dependencies in your Godeps file.\n. ahhh, yes, forgot that the default behavior changed - is there another way to use godep non-vendored?\n. Ahhh, thanks, I forgot that the default behavior changed.\nDoes that mean, when setup in this way (where you use the new default behavior, and src is ignored), that godep path does not work the way it previously did?\n. Seems like there are two options:\n1. Do nothing. It's totally acceptable to run GOPATH=$(godep path) godep restore as @antifuchs originally pointed out for this situation.\n2. Make it \"official\" as to which approach is correct for non-vendored operation (not sure what this would actually entail other than clear(er) documentation?).  I'm probably biased, but the old method feels more correct, instead of having to modify the vendored directory.\nI really like the simplicity of a top-level JSON file paired with GOPATH=$(godep path) - and then using all the standard go tooling as one normally would.\nAre there other options?\n. :+1:\n. I skimmed, I don't think you really want or need nitpicks so LGTM\nNice tests :100: \n. ",
    "nono": "When I'm working on a project, I'm doing it outside of a standard Go workspace. If it's mandatory to be in a Go workspace, I think it could be a good idea to have it written somewhere in the README.\n$ go list\n_/home/nono/dev/ADP/api\n. When I'm working on a project, I'm doing it outside of a standard Go workspace. If it's mandatory to be in a Go workspace, I think it could be a good idea to have it written somewhere in the README.\n$ go list\n_/home/nono/dev/ADP/api\n. ",
    "emicklei": "+1\n. +1\n. ",
    "ardan-bkennedy": "Hi Keith I really want to use the tool but I have projects using Bazaar and Mercurial. The mgo driver is my most important problem right now.\nexport GOPATH=$HOME/example \ngo get github.com/goinggo/mongorules \ncd $GOPATH/src/github.com/goinggo/mongorules \ngodep save -copy \ngodep: Bazaar is unsupported: labix.org/v2/mgo \ngodep: Bazaar is unsupported: labix.org/v2/mgo/bson \ngodep: error loading dependencies \nAm I doing something wrong? \n. > @ardan-bkennedy please give this another try! :)\n\ngodep save -copy\ngodep: dirty working tree: /Users/bill/example/src/labix.org/v2/mgo\ngodep: error loading dependencies\n\nI cleaned out the workspace and used 'go get' to get the project and tried the latest version of the tool.\n\n\u2014\nReply to this email directly or view it on GitHub.\n. > What happens when you run this?\n$ cd /Users/bill/example/src/labix.org/v2/mgo\n$ bzr status\nworking tree is out of date, run 'bzr update'\n\nSo I ran the bar update command and everything worked\nbzr update\n M  bson/bson.go\nAll changes applied successfully.\nUpdated to revision 246 of branch /Users/bill/example/src/labix.org/v2/mgo\ncd github.com/OutCast-IO/DataTask/\ngodep save -copy\n\nSo this is great but also troubling. I guess go get did not properly get the code initially.\nI may need to add this to the post\n\nThis tool uses bzr status to decide if any changes have been\nmade to the checked-out copy of each package. If the working\ntree is dirty, the revision number will be wrong (since it won't\naccount for any changes in the working tree since the last\ncommit), so godep will refuse to use that dependency.\nYou could also try:\n$ rm -rf /Users/bill/example/src/labix.org/v2/mgo\n$ go get labix.org/v2/mgo\n$ godep save -copy\n\u2014\nReply to this email directly or view it on GitHub.\n. Yes, you have fixed it. Do you think I should remove the Bazaar fix from the blog post?\n. I removed it\n. Hi Keith I really want to use the tool but I have projects using Bazaar and Mercurial. The mgo driver is my most important problem right now.\n\nexport GOPATH=$HOME/example \ngo get github.com/goinggo/mongorules \ncd $GOPATH/src/github.com/goinggo/mongorules \ngodep save -copy \ngodep: Bazaar is unsupported: labix.org/v2/mgo \ngodep: Bazaar is unsupported: labix.org/v2/mgo/bson \ngodep: error loading dependencies \nAm I doing something wrong? \n. > @ardan-bkennedy please give this another try! :)\n\ngodep save -copy\ngodep: dirty working tree: /Users/bill/example/src/labix.org/v2/mgo\ngodep: error loading dependencies\n\nI cleaned out the workspace and used 'go get' to get the project and tried the latest version of the tool.\n\n\u2014\nReply to this email directly or view it on GitHub.\n. > What happens when you run this?\n$ cd /Users/bill/example/src/labix.org/v2/mgo\n$ bzr status\nworking tree is out of date, run 'bzr update'\n\nSo I ran the bar update command and everything worked\nbzr update\n M  bson/bson.go\nAll changes applied successfully.\nUpdated to revision 246 of branch /Users/bill/example/src/labix.org/v2/mgo\ncd github.com/OutCast-IO/DataTask/\ngodep save -copy\n\nSo this is great but also troubling. I guess go get did not properly get the code initially.\nI may need to add this to the post\n\nThis tool uses bzr status to decide if any changes have been\nmade to the checked-out copy of each package. If the working\ntree is dirty, the revision number will be wrong (since it won't\naccount for any changes in the working tree since the last\ncommit), so godep will refuse to use that dependency.\nYou could also try:\n$ rm -rf /Users/bill/example/src/labix.org/v2/mgo\n$ go get labix.org/v2/mgo\n$ godep save -copy\n\u2014\nReply to this email directly or view it on GitHub.\n. Yes, you have fixed it. Do you think I should remove the Bazaar fix from the blog post?\n. I removed it\n. \n",
    "uhoh-itsmaciek": "And dependencies are only fetched when not present? That is, is the user interface still the same when starting from just a Godeps file (e.g., as a user cloning a godep-using repo)?\n. I've found myself wanting a version too, but the current implementation doesn't really answer much except \"is my version new enough to support the version argument?\" I'm skeptical that this will be useful on its own.\n. Could this maybe be done in a pre-commit hook? It's still ugly, but may be less painful.\n. And dependencies are only fetched when not present? That is, is the user interface still the same when starting from just a Godeps file (e.g., as a user cloning a godep-using repo)?\n. I've found myself wanting a version too, but the current implementation doesn't really answer much except \"is my version new enough to support the version argument?\" I'm skeptical that this will be useful on its own.\n. Could this maybe be done in a pre-commit hook? It's still ugly, but may be less painful.\n. ",
    "fsouza": "Ops, sorry about the first point. Regarding the second point, I did that just for reporting, I've ran godep save -copy ./... at tsuru root and go the error. I just wanted to make sure which package godep failed to save.\n. I'm having this issue too, but with the Godeps/Godeps.json file.\nHere's my output:\n```\n% godep save ./...\ngodep: dirty working tree: /Users/f/gocode/src/github.com/globocom/tsuru/action\ngodep: error loading dependencies\n% git status\nmaster...origin/master [ahead 2]\nD Godeps/Godeps.json\n``\n. I can confirm it works.\n. Worked like a charm. Thanks!\n. As far as I know, bzr only works with-copy=true`.\n. I'm not sure, but I think that if you define all operations on vcsBzr, it will work: https://github.com/kr/godep/blob/master/vcs.go#L32.\n. Hi @acroca, the sample I provided doesn't have any third party dependency, and yet it hangs.\nI just updated Go and it works now, maybe it was something with Go itself. I've also checked and our travis tip build now works.\nSince it was apparently an issue with Go, I'm closing this issue.\n. It doesn't hang anymore, but now it's bad behaving, here is an example of file generated for go-dockerclient: https://gist.github.com/fsouza/92851d03a03ec556e0be.\nUsing Go 1.4, I get a different result: https://gist.github.com/fsouza/39b171c301467cf85c84.\nSeems like go list is changing.\n. Ops, sorry about the first point. Regarding the second point, I did that just for reporting, I've ran godep save -copy ./... at tsuru root and go the error. I just wanted to make sure which package godep failed to save.\n. I'm having this issue too, but with the Godeps/Godeps.json file.\nHere's my output:\n```\n% godep save ./...\ngodep: dirty working tree: /Users/f/gocode/src/github.com/globocom/tsuru/action\ngodep: error loading dependencies\n% git status\nmaster...origin/master [ahead 2]\nD Godeps/Godeps.json\n``\n. I can confirm it works.\n. Worked like a charm. Thanks!\n. As far as I know, bzr only works with-copy=true`.\n. I'm not sure, but I think that if you define all operations on vcsBzr, it will work: https://github.com/kr/godep/blob/master/vcs.go#L32.\n. Hi @acroca, the sample I provided doesn't have any third party dependency, and yet it hangs.\nI just updated Go and it works now, maybe it was something with Go itself. I've also checked and our travis tip build now works.\nSince it was apparently an issue with Go, I'm closing this issue.\n. It doesn't hang anymore, but now it's bad behaving, here is an example of file generated for go-dockerclient: https://gist.github.com/fsouza/92851d03a03ec556e0be.\nUsing Go 1.4, I get a different result: https://gist.github.com/fsouza/39b171c301467cf85c84.\nSeems like go list is changing.\n. ",
    "james4k": "Thanks for the fix. Unfortunately, there is still a similar problem. If you have dependencies that are also not gettable (but in the local workspace), you get the same \"unrecognized import path\" error for those dependencies.\nEdit: I will probably be making these packages public anyways, but I imagine this is not an unusual use case.\n. Without knowing much about the problem, it looks like vcs.FromDir is capable of determining VCS info with just local data.\n. Thanks for the fix. Unfortunately, there is still a similar problem. If you have dependencies that are also not gettable (but in the local workspace), you get the same \"unrecognized import path\" error for those dependencies.\nEdit: I will probably be making these packages public anyways, but I imagine this is not an unusual use case.\n. Without knowing much about the problem, it looks like vcs.FromDir is capable of determining VCS info with just local data.\n. ",
    "hokkaido": "If I use godep to manage my dependencies, what happens if my dependencies also happen to use godep to manage their own dependencies? Does godep correctly resolve these dependencies of dependencies according to their relevant Godeps definitions?\nAnd what happens if such a third party package decides to use -copy and include its dependencies in its repo? \n. If I use godep to manage my dependencies, what happens if my dependencies also happen to use godep to manage their own dependencies? Does godep correctly resolve these dependencies of dependencies according to their relevant Godeps definitions?\nAnd what happens if such a third party package decides to use -copy and include its dependencies in its repo? \n. ",
    "goinggo": "I have integrated godep into LiteIDE very nicely. I think the shell will come in handy when building projects from the Terminal. Don't lose the ability to call into godep like we do today. \n. > You can vendor the code, but you need to make a commit first,\n\nso there's a way to identify exactly what you've vendored.\nYou can push this commit to your fork of the project if you want,\nbut that's not necessary.\nI was not using a fork because at that point I need to change the imports. It is true I could fork the code and use source tree or some other mechanism to put the code in the proper place. I just didn't want to go to all that trouble to get the code and make the change I needed.\n\nI understand the need to document the change set I am using, but because I really don't care in this case. Use all 0's for that revision.\nIt would be nice to override that protection when I don't need it.\n\n\u2014\nReply to this email directly or view it on GitHub.\n. > One of the big benefits of godep's vendoring is that you can\nmaintain a fork without changing import paths. But this is really\na separate issue. You don't need a fork.\nAll you have to do is commit your change locally, then godep\nwill happily vendor the code.\n$ cd /path/to/package && git commit -a -m 'fix bug'\n\nOh,  Cool.  Ok. Yea that is true.\n\n\u2014\nReply to this email directly or view it on GitHub.\n. The problem is different, sorry\n\nI want the Godeps folder to be created at the root of the revel project but main.go is location at app/tmp\nIf I run godep save from within app/tmp everything works and I copy the Godeps folder to the root.\nI am trying this from the root   godep save app/tmp/main.go\ngodep: dirty working tree: /Users/bill/Spaces/Go/Projects/src/github.com/OutCast-IO/Outcaster/app\ngodep: error loading dependencies\n. > The save command arguments are packages, not files,\n\njust like most of the go tool commands. What happens\nwhen you run 'go list app/tmp/main.go'?\nTry this from the root:\n$ godep save ./...\nOr perhaps\n$ godep save ./app/tmp\nCool, let me try that !!\n(On a slightly tangential note, putting a main package in\na directory called 'tmp' will give you a binary named 'tmp'.\nIs that what you want?)\n\nI didn't write revel, I just use it. They have a CLI called revel which fronts the code. That tool uses the name of the workspace as the binary name and puts it in bin. It monitor source file changes and will build the web site on the fly. Very cool stuff.\n\n\u2014\nReply to this email directly or view it on GitHub.\n. > The save command arguments are packages, not files,\njust like most of the go tool commands. What happens\nwhen you run 'go list app/tmp/main.go'?\nTry this from the root:\n$ godep save ./...\nOr perhaps\n$ godep save ./app/tmp\nRunning godep like this from the root WORKED PERFECTLY !!\n\nNow I am in great shape.  I am going to find time to show people how to vendor their revel projects using godep.\n\n(On a slightly tangential note, putting a main package in\na directory called 'tmp' will give you a binary named 'tmp'.\nIs that what you want?)\n\u2014\nReply to this email directly or view it on GitHub.\n. > Awesome! Thanks again for the help. :)\nI just submitted a pull request to LiteIDE for godep build and run support. If they accept these updates then LiteIDE users will be more compelled to try using godep. Let's see what happens.\n\u2014\nReply to this email directly or view it on GitHub.\n. Everything is working now\n. > Cc @goinggo you were interested in this issue as well.\nIt should be fixed. Please reopen or open a new issue\nif you still see problems.\n\nNow the entire projects are being brought into the Godeps folder. I didn't realize till just now you were only bring in the source code being used.\n\n\u2014\nReply to this email directly or view it on GitHub.\n. > This looks like a duplicate of #27.\nYes, my issue is a duplicate. Any fix on this yet?\n\u2014\nReply to this email directly or view it on GitHub.\n. Ignore this. I made a mistake trying to sync my fork\n. Sorry, I am clueless\n. I am going to try and add this new command.\n. Ok, that makes sense.  Thanks !!\n\nSincerely,\nBill\nNote: The information transmitted in this email is intended only for the person or entity to which it is addressed and may contain confidential and/or privileged material. Any review, retransmission, dissemination or other use of, or taking of any action in reliance upon, this information by persons or entities other than the intended recipient is prohibited. If you received this in error, please contact the sender and delete the material from any computer.\nOn Nov 21, 2013, at 2:03 PM, Keith Rarick notifications@github.com wrote:\n\nWe shouldn't add new commands for every random tool\nthat people come up with. If the existing godep path\ncommand isn't sufficient, then we should make either\ngodep run or godep shell and be done with it.\n\u2014\nReply to this email directly or view it on GitHub.\n. I have integrated godep into LiteIDE very nicely. I think the shell will come in handy when building projects from the Terminal. Don't lose the ability to call into godep like we do today. \n. > You can vendor the code, but you need to make a commit first,\nso there's a way to identify exactly what you've vendored.\nYou can push this commit to your fork of the project if you want,\nbut that's not necessary.\nI was not using a fork because at that point I need to change the imports. It is true I could fork the code and use source tree or some other mechanism to put the code in the proper place. I just didn't want to go to all that trouble to get the code and make the change I needed.\n\nI understand the need to document the change set I am using, but because I really don't care in this case. Use all 0's for that revision.\nIt would be nice to override that protection when I don't need it.\n\n\u2014\nReply to this email directly or view it on GitHub.\n. > One of the big benefits of godep's vendoring is that you can\nmaintain a fork without changing import paths. But this is really\na separate issue. You don't need a fork.\nAll you have to do is commit your change locally, then godep\nwill happily vendor the code.\n$ cd /path/to/package && git commit -a -m 'fix bug'\n\nOh,  Cool.  Ok. Yea that is true.\n\n\u2014\nReply to this email directly or view it on GitHub.\n. The problem is different, sorry\n\nI want the Godeps folder to be created at the root of the revel project but main.go is location at app/tmp\nIf I run godep save from within app/tmp everything works and I copy the Godeps folder to the root.\nI am trying this from the root   godep save app/tmp/main.go\ngodep: dirty working tree: /Users/bill/Spaces/Go/Projects/src/github.com/OutCast-IO/Outcaster/app\ngodep: error loading dependencies\n. > The save command arguments are packages, not files,\n\njust like most of the go tool commands. What happens\nwhen you run 'go list app/tmp/main.go'?\nTry this from the root:\n$ godep save ./...\nOr perhaps\n$ godep save ./app/tmp\nCool, let me try that !!\n(On a slightly tangential note, putting a main package in\na directory called 'tmp' will give you a binary named 'tmp'.\nIs that what you want?)\n\nI didn't write revel, I just use it. They have a CLI called revel which fronts the code. That tool uses the name of the workspace as the binary name and puts it in bin. It monitor source file changes and will build the web site on the fly. Very cool stuff.\n\n\u2014\nReply to this email directly or view it on GitHub.\n. > The save command arguments are packages, not files,\njust like most of the go tool commands. What happens\nwhen you run 'go list app/tmp/main.go'?\nTry this from the root:\n$ godep save ./...\nOr perhaps\n$ godep save ./app/tmp\nRunning godep like this from the root WORKED PERFECTLY !!\n\nNow I am in great shape.  I am going to find time to show people how to vendor their revel projects using godep.\n\n(On a slightly tangential note, putting a main package in\na directory called 'tmp' will give you a binary named 'tmp'.\nIs that what you want?)\n\u2014\nReply to this email directly or view it on GitHub.\n. > Awesome! Thanks again for the help. :)\nI just submitted a pull request to LiteIDE for godep build and run support. If they accept these updates then LiteIDE users will be more compelled to try using godep. Let's see what happens.\n\u2014\nReply to this email directly or view it on GitHub.\n. Everything is working now\n. > Cc @goinggo you were interested in this issue as well.\nIt should be fixed. Please reopen or open a new issue\nif you still see problems.\n\nNow the entire projects are being brought into the Godeps folder. I didn't realize till just now you were only bring in the source code being used.\n\n\u2014\nReply to this email directly or view it on GitHub.\n. > This looks like a duplicate of #27.\nYes, my issue is a duplicate. Any fix on this yet?\n\u2014\nReply to this email directly or view it on GitHub.\n. Ignore this. I made a mistake trying to sync my fork\n. Sorry, I am clueless\n. I am going to try and add this new command.\n. Ok, that makes sense.  Thanks !!\n\nSincerely,\nBill\nNote: The information transmitted in this email is intended only for the person or entity to which it is addressed and may contain confidential and/or privileged material. Any review, retransmission, dissemination or other use of, or taking of any action in reliance upon, this information by persons or entities other than the intended recipient is prohibited. If you received this in error, please contact the sender and delete the material from any computer.\nOn Nov 21, 2013, at 2:03 PM, Keith Rarick notifications@github.com wrote:\n\nWe shouldn't add new commands for every random tool\nthat people come up with. If the existing godep path\ncommand isn't sufficient, then we should make either\ngodep run or godep shell and be done with it.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "antifuchs": "I was about to suggest a godep exec for this (maybe better named godep run) in a separate ticket. It would be very very nice to have an easy way to invoke commands in a godep-only context (the oracle, godef, gox, ...).\nI don't care for a shell so much as for a way to ensure a command runs in the right environment (hence the godep exec) - the ideal for me is something allows our build scripts to make sure stuff works. You can always godep exec $SHELL (with appropriate args to stop it from loading init scripts, which is my primary worry about a godep shell command). (-:\n. No, sadly: godep restore will install sources into whatever's currently on $GOPATH. This means if you don't check in sources (as we're doing), it'll put sources into a global GOPATH (to live next to godep), not into the godep workspace... which is exactly what we're trying to avoid by using godep.\n. I was about to suggest a godep exec for this (maybe better named godep run) in a separate ticket. It would be very very nice to have an easy way to invoke commands in a godep-only context (the oracle, godef, gox, ...).\nI don't care for a shell so much as for a way to ensure a command runs in the right environment (hence the godep exec) - the ideal for me is something allows our build scripts to make sure stuff works. You can always godep exec $SHELL (with appropriate args to stop it from loading init scripts, which is my primary worry about a godep shell command). (-:\n. No, sadly: godep restore will install sources into whatever's currently on $GOPATH. This means if you don't check in sources (as we're doing), it'll put sources into a global GOPATH (to live next to godep), not into the godep workspace... which is exactly what we're trying to avoid by using godep.\n. ",
    "interlock": ":+1: \n. :+1: \n. ",
    "babldev": "It's for a private repo, but I ran it in the root of my git repo -- effectively src/github.com/org/project of the GOPATH. It runs without error, but Load() only looks for one dependency per git repo and it picked the wrong one. This was because of the logic of the if contains(seen, importPath) { continue }\nIf this is too vague I can give more specific repro steps using your Heroku godeps example.\n. Also, thanks for making Godeps and the buildpack!\n. I'd be comfortable with using the RepoRoot. It doesn't guarantee a 1:1 mapping with what is brought in via go get ..., but it is atleast a superset of the dependencies instead of a subset.\nAfter looking at #29, I just wanted to clarify that what is being saved to Godeps.json is in fact wrong and causes godep save to only cache github.com/crowdmob/goamz/aws and not github.com/crowdmob/goamz/sqs inside of the _workspace directory, despite both living in the same git repo.\n. It's for a private repo, but I ran it in the root of my git repo -- effectively src/github.com/org/project of the GOPATH. It runs without error, but Load() only looks for one dependency per git repo and it picked the wrong one. This was because of the logic of the if contains(seen, importPath) { continue }\nIf this is too vague I can give more specific repro steps using your Heroku godeps example.\n. Also, thanks for making Godeps and the buildpack!\n. I'd be comfortable with using the RepoRoot. It doesn't guarantee a 1:1 mapping with what is brought in via go get ..., but it is atleast a superset of the dependencies instead of a subset.\nAfter looking at #29, I just wanted to clarify that what is being saved to Godeps.json is in fact wrong and causes godep save to only cache github.com/crowdmob/goamz/aws and not github.com/crowdmob/goamz/sqs inside of the _workspace directory, despite both living in the same git repo.\n. ",
    "kjk": "Hence the bug report. Do you know what's the reason behind only supporting copy=true? I can try to fix it but some guidance as to what needs to be done would be helpful.\n. Hence the bug report. Do you know what's the reason behind only supporting copy=true? I can try to fix it but some guidance as to what needs to be done would be helpful.\n. ",
    "dmitshur": "Edit: I would like to retract my +1, I no longer want this.\nThe few good libraries I care about that used to be on Launchpad have moved to GitHub by now.\n. Yeah, it seems odd that godep itself doesn't have a way of printing its version (build date).\nWhen debugging some problem where it works for me but not for someone else (or vice versa), the first thing I want to ask is \"what version of godep are you running?\"\n. There's a related issue (from Jan 2014) with discussion here:\nhttps://github.com/jimmyfrasche/goutil/issues/2\nWe made a post on golang-nuts to try to motivate improving the situation upstream in Go, but it did not catch much attention:\nhttps://groups.google.com/d/msg/golang-nuts/Z5uJf6mEF6E/K7yb6Xc5zQUJ\nIt was suggested to me by minux to make the thread in golang-dev (since Russ was away at the time), which I did, but it didn't get any traction either:\nhttps://groups.google.com/forum/#!topic/golang-dev/svxuGkGJTD8\n(Just mentioning relevant links here. I am extremely familiar with this issue and would really like to see it fixed, because it forces me to avoid installing my packages and thus lose benefits of faster compilation, auto completion, etc.)\n. ### Summary\n@fkautz, it may be quite difficult to come up with a patch that addresses the problem but doesn't create additional problems in edge cases.\nDetails\nThe difficulty comes from having to consider all edge cases - the go command has to deal with a lot. Most of those edge cases are less common, but still valid conditions where the go command is expected to behave correctly. An example would be building Go from source. In some cases, the go command needs to write to GOROOT workspace, in most other cases it should not.\nIt would require very careful consideration of all edge cases and planning, and seeing if it's possible to change the behavior such that this problem is resolved without compromising anything. If that can be done, I would imagine they would accept such a patch (after very thorough review).\nAt some point I had plans to try to do that, by making a fork of the go tool, making the changes I would want, and seeing if everything works out. I haven't gotten around to doing that (and I don't have short term plans to do it atm).\nIn the end, it may end up being trivial - or impossible. You can only find out after starting the work. It's quite hard to predict.\n. This issue has been resolved in Go 1.5. See https://github.com/golang/go/issues/10509.\n. +1.\n\nWhat problem is this meant to solve?\n\nIt can help answer \"what version of godep am I/someone else running? Do I/that other person need to run go get -u github.com/kr/godep?\"\n. That is a problem that I've thought about for some time, but so far I still haven't come up with anything better than just manually modifying some const in one of the package's .go files (it only needs to be done for final releases that go into master branch though, so if you dev on a feature branch, it can be a last commit before a PR merge).\n. Just leaving a comment here as I've witnessed yet another instance where having a version command would've helped detect a problem sooner for people. The person had the latest source of godep, but the installed binary was out of date and for some reason go get -u github.com/tools/godep did not update the binary (until it was removed and installed again).\nAlso, it's possible to set blank strings in Go via a linker flag, see http://technosophos.com/2014/06/11/compile-time-string-in-go.html article. Unfortunately, that will not be acceptable, because it requires the flag to be provided when building the binary, so it's not compatible with users doing go get -u github.com/tools/godep.\n. > Haven't looked at the code yet, but +1 to the new command and behavior change.\nSame here, +1 to the new command and behavior change.\n. You should read some guide on how to use godep, what you're expecting isn't how it works. (I would link to the readme, but it doesn't really talk about the godep save --copy=false usage model, so it's not applicable.)\nUnless you do godep restore, godep doesn't touch your GOPATH workspace. Instead, it creates a temporary virtual GOPATH workspace and checks out the specified versions there. If you use godep path command, it will print the path of that temporary virtual GOPATH workspace. That's where the correct revisions will be checked out (and used by the go ... command when you do godep go ...).\nEdit: Actually, I could be wrong. What I said applies to older versions of godep, back when doing godep get was nonsensical. Perhaps by now godep get does do something like what you described - since I see issue #13 is closed. Sorry.\n. This PR seems reasonable to me.\n. I'm not sure what's up, but this repo has not seen any activity aside from people reporting issues in a long while.\n@kr Are you getting notifications about this? He does have public commits as recent as 11 hours ago.\n. This issue prevents godep from working in some cases:\nbash\n$ godep save\ngodep: Godeps/_workspace/src/golang.org/x/tools/go/loader/testdata/badpkgdecl.go:1:34: expected 'package', found 'EOF'\nIt should not be reading .go files inside testdata folder!\nEdit: This may be a separate (albeit related) issue.\nActually, it is related. The problem is that the workspace was already created with an existing version of godep which mistakenly included the testdata folder. If a new (fixed) version of godep were used, that testdata folder would be skipped, and this problem wouldn't occur.\n. There's a PR #166 that fixes this issue, can it be reviewed and merged please?\n. For reference, this issue was resolved in commit bb418303c7e0886d29a75b5bbec49b64cdc3fa1c, not closed as \"wontfix\".\n(As a side note, if you had used one of the supported keywords like \"resolves\", \"fixes\" or \"closes\", that would've been clearer. \"addresses\" is not one of the supported keywords.)\n. LGTM because it fixes the issue, but I would copy and paste the way the Go tool does this exactly, instead of using a different syntax. That way it's easier to keep it in sync with any future changes to the Go tool.\nGo\n// Avoid .foo, _foo, and testdata directory trees, but do not avoid \".\" or \"..\".\nelem := w.Stat().Name()\ndot := strings.HasPrefix(elem, \".\") && elem != \".\" && elem != \"..\"\nif dot || strings.HasPrefix(elem, \"_\") || elem == \"testdata\" {\n    w.SkipDir()\n}\nSource: https://github.com/golang/go/blob/dc870d5f4b77c0a2a276f8fd12510a53969c56b5/src/cmd/go/main.go#L616-L619\n. Actually, this may not fix issue, looking into it.\n. Okay, I've done some testing regarding https://github.com/tools/godep/issues/140#issuecomment-98222302, and this fix works. But it's not retroactive. Workspaces saved with older godep will need to be removed and recreated using new version, which will skip over testdata folder and avoid the issue in the future.\n. Actually, I will retract my LGTM and say -1, I'd prefer this not be merged as is.\nI think what it fixes is a symptom, not the real cause. It should be okay to vendor testdata folders, the issue is that they shouldn't be navigated into when listing Go packages and causing errors since testdata folders may purposefully (correctly) contain .go files that are invalid Go code.\nThat issue should  be fixed first, then perhaps testdata folders should be skipped when vendoring also. After all, folders starting with . and _ are already skipped.\nI'll try to look into this more closely in some time.\n. Resolved in b6a021fcf062a94ce1248fc29c49414739c171b4.\n. > Also fixes the ordering during construction of the error, which was wrong.\nThat parts looks good to me, but I am not familiar with the rest to review it.\n. Any feedback on this change?\n. I don't remember what the underlying problem was exactly when I ran into this. I think either the repository was deleted and no longer existed upstream. Or perhaps just the commit wasn't found and that produced the error.\nThe main problem was that I had no way of knowing what package even had the problem. This small change resolves that.\nI agree that it'd be nicer still to decorate the error returned from download to include more info on the error (such as stderr), but I think that can be a separate PR.\n. I think this PR can/should be merged since it's a strict improvement over the previous behavior, where it was completely impossible to know which package had download/restore problems.\nAny reason not to?\n. > I tried to use build.Context to handle most of the grunt work, but that didn't work out that well.\nCan you elaborate on that please, I'd like to learn what the problem with that approach was.\n. Thanks for mentioning gostatus here @client9, it's indeed very relevant.\nI agree this can and should (at least initially) be done outside. If wanted, it can be later brought inside.\nIn addition to gostatus, I'd highly recommend @awsmsrc to take a look at Go Package Store. It adds a visual presentation of commits on top of gostatus minimal output. It also supports a -godeps flag to specify a Godeps.json file to use as \"base\" versions, e.g.:\nbash\n$ Go-Package-Store -godeps=/path/to/some/Godeps.json\nReading the list of Go packages from Godeps.json file: /path/to/some/Godeps.json\n...\n. @freeformz Thanks. You're absolutely welcome to do that. If you look at Go-Package-Store code, make sure to use the branch in this PR, it's a huge improvement in code quality over the current master. I'm hoping to have that merged into master soon, but just in case.\n. That does look related.\nIt sounds like this is WAI. If that's the case, this is a documentation/changelog issue, since this new behavior is currently not clearly communicated.\n. I see, thanks for clarifying that this is indeed intended behavior.\n\nWe currently do ignore files with ignore and appengine tags\n\nThat's also good to know (and I agree, should be documented). Thanks.\n. Thanks!\n. Yeah, this helps a lot. If possible, tweak the language to be a little better and less confusing, but overall LGTM.\n. Well, I just realized that I confused github.com/docker/docker and github.com/drone/drone because of similar spelling. They are separate repos after all.\n. I'll close this because I made a mistake while figuring out what's going on, so this issue is invalid. There may be a problem with godep save ./... behavior, but what I described above is not a reproducible issue description.\n. To clarify, the codebase I was referring to (src.sourcegraph.com/sourcegraph/...) imports and uses both github.com/drone/drone/... and github.com/docker/docker/... or parts there-of, and that's where I ran into this issue. You're right, I'm not sure how github.com/drone/drone manages its /vendor/ folder, I don't see Godeps.json, govendor.json, or any other similar file.\n. Edit: I would like to retract my +1, I no longer want this.\nThe few good libraries I care about that used to be on Launchpad have moved to GitHub by now.\n. Yeah, it seems odd that godep itself doesn't have a way of printing its version (build date).\nWhen debugging some problem where it works for me but not for someone else (or vice versa), the first thing I want to ask is \"what version of godep are you running?\"\n. There's a related issue (from Jan 2014) with discussion here:\nhttps://github.com/jimmyfrasche/goutil/issues/2\nWe made a post on golang-nuts to try to motivate improving the situation upstream in Go, but it did not catch much attention:\nhttps://groups.google.com/d/msg/golang-nuts/Z5uJf6mEF6E/K7yb6Xc5zQUJ\nIt was suggested to me by minux to make the thread in golang-dev (since Russ was away at the time), which I did, but it didn't get any traction either:\nhttps://groups.google.com/forum/#!topic/golang-dev/svxuGkGJTD8\n(Just mentioning relevant links here. I am extremely familiar with this issue and would really like to see it fixed, because it forces me to avoid installing my packages and thus lose benefits of faster compilation, auto completion, etc.)\n. ### Summary\n@fkautz, it may be quite difficult to come up with a patch that addresses the problem but doesn't create additional problems in edge cases.\nDetails\nThe difficulty comes from having to consider all edge cases - the go command has to deal with a lot. Most of those edge cases are less common, but still valid conditions where the go command is expected to behave correctly. An example would be building Go from source. In some cases, the go command needs to write to GOROOT workspace, in most other cases it should not.\nIt would require very careful consideration of all edge cases and planning, and seeing if it's possible to change the behavior such that this problem is resolved without compromising anything. If that can be done, I would imagine they would accept such a patch (after very thorough review).\nAt some point I had plans to try to do that, by making a fork of the go tool, making the changes I would want, and seeing if everything works out. I haven't gotten around to doing that (and I don't have short term plans to do it atm).\nIn the end, it may end up being trivial - or impossible. You can only find out after starting the work. It's quite hard to predict.\n. This issue has been resolved in Go 1.5. See https://github.com/golang/go/issues/10509.\n. +1.\n\nWhat problem is this meant to solve?\n\nIt can help answer \"what version of godep am I/someone else running? Do I/that other person need to run go get -u github.com/kr/godep?\"\n. That is a problem that I've thought about for some time, but so far I still haven't come up with anything better than just manually modifying some const in one of the package's .go files (it only needs to be done for final releases that go into master branch though, so if you dev on a feature branch, it can be a last commit before a PR merge).\n. Just leaving a comment here as I've witnessed yet another instance where having a version command would've helped detect a problem sooner for people. The person had the latest source of godep, but the installed binary was out of date and for some reason go get -u github.com/tools/godep did not update the binary (until it was removed and installed again).\nAlso, it's possible to set blank strings in Go via a linker flag, see http://technosophos.com/2014/06/11/compile-time-string-in-go.html article. Unfortunately, that will not be acceptable, because it requires the flag to be provided when building the binary, so it's not compatible with users doing go get -u github.com/tools/godep.\n. > Haven't looked at the code yet, but +1 to the new command and behavior change.\nSame here, +1 to the new command and behavior change.\n. You should read some guide on how to use godep, what you're expecting isn't how it works. (I would link to the readme, but it doesn't really talk about the godep save --copy=false usage model, so it's not applicable.)\nUnless you do godep restore, godep doesn't touch your GOPATH workspace. Instead, it creates a temporary virtual GOPATH workspace and checks out the specified versions there. If you use godep path command, it will print the path of that temporary virtual GOPATH workspace. That's where the correct revisions will be checked out (and used by the go ... command when you do godep go ...).\nEdit: Actually, I could be wrong. What I said applies to older versions of godep, back when doing godep get was nonsensical. Perhaps by now godep get does do something like what you described - since I see issue #13 is closed. Sorry.\n. This PR seems reasonable to me.\n. I'm not sure what's up, but this repo has not seen any activity aside from people reporting issues in a long while.\n@kr Are you getting notifications about this? He does have public commits as recent as 11 hours ago.\n. This issue prevents godep from working in some cases:\nbash\n$ godep save\ngodep: Godeps/_workspace/src/golang.org/x/tools/go/loader/testdata/badpkgdecl.go:1:34: expected 'package', found 'EOF'\nIt should not be reading .go files inside testdata folder!\nEdit: This may be a separate (albeit related) issue.\nActually, it is related. The problem is that the workspace was already created with an existing version of godep which mistakenly included the testdata folder. If a new (fixed) version of godep were used, that testdata folder would be skipped, and this problem wouldn't occur.\n. There's a PR #166 that fixes this issue, can it be reviewed and merged please?\n. For reference, this issue was resolved in commit bb418303c7e0886d29a75b5bbec49b64cdc3fa1c, not closed as \"wontfix\".\n(As a side note, if you had used one of the supported keywords like \"resolves\", \"fixes\" or \"closes\", that would've been clearer. \"addresses\" is not one of the supported keywords.)\n. LGTM because it fixes the issue, but I would copy and paste the way the Go tool does this exactly, instead of using a different syntax. That way it's easier to keep it in sync with any future changes to the Go tool.\nGo\n// Avoid .foo, _foo, and testdata directory trees, but do not avoid \".\" or \"..\".\nelem := w.Stat().Name()\ndot := strings.HasPrefix(elem, \".\") && elem != \".\" && elem != \"..\"\nif dot || strings.HasPrefix(elem, \"_\") || elem == \"testdata\" {\n    w.SkipDir()\n}\nSource: https://github.com/golang/go/blob/dc870d5f4b77c0a2a276f8fd12510a53969c56b5/src/cmd/go/main.go#L616-L619\n. Actually, this may not fix issue, looking into it.\n. Okay, I've done some testing regarding https://github.com/tools/godep/issues/140#issuecomment-98222302, and this fix works. But it's not retroactive. Workspaces saved with older godep will need to be removed and recreated using new version, which will skip over testdata folder and avoid the issue in the future.\n. Actually, I will retract my LGTM and say -1, I'd prefer this not be merged as is.\nI think what it fixes is a symptom, not the real cause. It should be okay to vendor testdata folders, the issue is that they shouldn't be navigated into when listing Go packages and causing errors since testdata folders may purposefully (correctly) contain .go files that are invalid Go code.\nThat issue should  be fixed first, then perhaps testdata folders should be skipped when vendoring also. After all, folders starting with . and _ are already skipped.\nI'll try to look into this more closely in some time.\n. Resolved in b6a021fcf062a94ce1248fc29c49414739c171b4.\n. > Also fixes the ordering during construction of the error, which was wrong.\nThat parts looks good to me, but I am not familiar with the rest to review it.\n. Any feedback on this change?\n. I don't remember what the underlying problem was exactly when I ran into this. I think either the repository was deleted and no longer existed upstream. Or perhaps just the commit wasn't found and that produced the error.\nThe main problem was that I had no way of knowing what package even had the problem. This small change resolves that.\nI agree that it'd be nicer still to decorate the error returned from download to include more info on the error (such as stderr), but I think that can be a separate PR.\n. I think this PR can/should be merged since it's a strict improvement over the previous behavior, where it was completely impossible to know which package had download/restore problems.\nAny reason not to?\n. > I tried to use build.Context to handle most of the grunt work, but that didn't work out that well.\nCan you elaborate on that please, I'd like to learn what the problem with that approach was.\n. Thanks for mentioning gostatus here @client9, it's indeed very relevant.\nI agree this can and should (at least initially) be done outside. If wanted, it can be later brought inside.\nIn addition to gostatus, I'd highly recommend @awsmsrc to take a look at Go Package Store. It adds a visual presentation of commits on top of gostatus minimal output. It also supports a -godeps flag to specify a Godeps.json file to use as \"base\" versions, e.g.:\nbash\n$ Go-Package-Store -godeps=/path/to/some/Godeps.json\nReading the list of Go packages from Godeps.json file: /path/to/some/Godeps.json\n...\n. @freeformz Thanks. You're absolutely welcome to do that. If you look at Go-Package-Store code, make sure to use the branch in this PR, it's a huge improvement in code quality over the current master. I'm hoping to have that merged into master soon, but just in case.\n. That does look related.\nIt sounds like this is WAI. If that's the case, this is a documentation/changelog issue, since this new behavior is currently not clearly communicated.\n. I see, thanks for clarifying that this is indeed intended behavior.\n\nWe currently do ignore files with ignore and appengine tags\n\nThat's also good to know (and I agree, should be documented). Thanks.\n. Thanks!\n. Yeah, this helps a lot. If possible, tweak the language to be a little better and less confusing, but overall LGTM.\n. Well, I just realized that I confused github.com/docker/docker and github.com/drone/drone because of similar spelling. They are separate repos after all.\n. I'll close this because I made a mistake while figuring out what's going on, so this issue is invalid. There may be a problem with godep save ./... behavior, but what I described above is not a reproducible issue description.\n. To clarify, the codebase I was referring to (src.sourcegraph.com/sourcegraph/...) imports and uses both github.com/drone/drone/... and github.com/docker/docker/... or parts there-of, and that's where I ran into this issue. You're right, I'm not sure how github.com/drone/drone manages its /vendor/ folder, I don't see Godeps.json, govendor.json, or any other similar file.\n. ",
    "shalakhin": "+1 also\n. +1 also\n. ",
    "arvenil": "+1\n. :+1:  I'm having same issue\n. +1\n. :+1:  I'm having same issue\n. ",
    "michaljemala": "+1\n. +1\n. ",
    "josharian": "Oh, is that what godep restore does?! That's very handy. And yes, much better than my proposal.\nMay I suggest a doc update? The current command line help is\nrestore  install package versions listed as dependencies\nThis is ambiguous about where the installing is happening; I had assumed that you used restore to reset the contents of Godep/_workspace to whatever Godep/Godeps.json specified.\nPerhaps instead something like (struggling here):\nrestore  make $GOPATH package versions match listed dependencies\nand then give some examples of what it is useful for in greater length under godep help restore. And frankly, a short blurb in the README wouldn't hurt either.\nI'm happy to put together a PR for this if you'd like.\n. I just hit this as well. For me, it happened because the go executable was not in my $PATH.\n(I have lots of go executables around, so none are in my path by default, to force me to think about which go version I'm using at any point.)\n. In case there is any doubt, I'm very excited about this; it'll be the thing that makes me convert my few remaining goven holdouts to godep.\n. Appears to be fixed by 8e66075db411c3aa99e2ff79d68ff8be86b6d319. Hurrah!\n. Correct. That doesn't bother me; I was just frustrated by the fact that godep save ./... no longer completed. Feel free to reopen with a new emphasis or file a new issue.\n. Haven't looked at the code yet, but +1 to the new command and behavior change.\n. We just hit this as well; it causes massive cascading imports for us.\n. Oh, is that what godep restore does?! That's very handy. And yes, much better than my proposal.\nMay I suggest a doc update? The current command line help is\nrestore  install package versions listed as dependencies\nThis is ambiguous about where the installing is happening; I had assumed that you used restore to reset the contents of Godep/_workspace to whatever Godep/Godeps.json specified.\nPerhaps instead something like (struggling here):\nrestore  make $GOPATH package versions match listed dependencies\nand then give some examples of what it is useful for in greater length under godep help restore. And frankly, a short blurb in the README wouldn't hurt either.\nI'm happy to put together a PR for this if you'd like.\n. I just hit this as well. For me, it happened because the go executable was not in my $PATH.\n(I have lots of go executables around, so none are in my path by default, to force me to think about which go version I'm using at any point.)\n. In case there is any doubt, I'm very excited about this; it'll be the thing that makes me convert my few remaining goven holdouts to godep.\n. Appears to be fixed by 8e66075db411c3aa99e2ff79d68ff8be86b6d319. Hurrah!\n. Correct. That doesn't bother me; I was just frustrated by the fact that godep save ./... no longer completed. Feel free to reopen with a new emphasis or file a new issue.\n. Haven't looked at the code yet, but +1 to the new command and behavior change.\n. We just hit this as well; it causes massive cascading imports for us.\n. ",
    "dadgar": "I am also getting this when trying to update:\ngodep update github.com/hashicorp/go-getter\ngodep: no buildable Go source files in /Users/adadgar/Projects/go/src/github.com/StackExchange/wmi\ngodep: error loading dependencies\nI have a project that has different imports depending on OS and the above is only used on windows. I tried to just GOOS=windows go get github.com/StackExchange/wmi which worked but then get the above error.\n. godep v57 (darwin/amd64/go1.6)\n. Tried to run the command again but got godep: no packages can be updated\n. Ah I did godep update github.com/hashicorp/go-getter/ but your suggested command worked. Problem is now I am up to date so I believe it was a no-op.\ngo-getter is in the Godeps.json file and it was when I initially opened this issue. I think the root of the problem is that godep doesn't like it when a package is being imported but isn't buildable on the platform you are using godep on. This is a problem when you are developing a project that has dependencies for both windows and linux as no single platform builds them all!\n. It would be nice to see how far each of the dependencies have diverged from their respective HEADs. \n. I am also getting this when trying to update:\ngodep update github.com/hashicorp/go-getter\ngodep: no buildable Go source files in /Users/adadgar/Projects/go/src/github.com/StackExchange/wmi\ngodep: error loading dependencies\nI have a project that has different imports depending on OS and the above is only used on windows. I tried to just GOOS=windows go get github.com/StackExchange/wmi which worked but then get the above error.\n. godep v57 (darwin/amd64/go1.6)\n. Tried to run the command again but got godep: no packages can be updated\n. Ah I did godep update github.com/hashicorp/go-getter/ but your suggested command worked. Problem is now I am up to date so I believe it was a no-op.\ngo-getter is in the Godeps.json file and it was when I initially opened this issue. I think the root of the problem is that godep doesn't like it when a package is being imported but isn't buildable on the platform you are using godep on. This is a problem when you are developing a project that has dependencies for both windows and linux as no single platform builds them all!\n. It would be nice to see how far each of the dependencies have diverged from their respective HEADs. \n. ",
    "cactus": "I ran into this too.\nIt appears that if a package is not found in the go list -e -json shellout, then a Root is not set (defaults to empty string). \n$ go list -e -json github.com/gorilla/mux\n{\n    \"ImportPath\": \"github.com/gorilla/mux\",\n    \"Stale\": true,\n    \"Incomplete\": true,\n    \"Error\": {\n        \"ImportStack\": [\n            \"github.com/gorilla/mux\"\n        ],\n        \"Pos\": \"\",\n        \"Err\": \"cannot find package \\\"github.com/gorilla/mux\\\" in any of:\\n\\u0009/some/path/src/pkg/github.com/gorilla/mux (from $GOROOT)\\n\\u0009/other/path/src/github.com/gorilla/mux (from $GOPATH)\"\n    }\n}\nthis gets loaded in pkg.go/LoadPackages as:\n&{Dir: Root: ImportPath:github.com/gorilla/mux Deps:[] Standard:false TestImports:[] Error:{Err:cannot find package \"github.com/gorilla/mux\" in any of:\n    /some/path/src/pkg/github.com/gorilla/mux (from $GOROOT)\n    /other/path/src/github.com/gorilla/mux (from $GOPATH)}}\nSo restore currently only seems to work if all the deps are already installed into the GOPATH.\nWould it make sense that if Root is missing, GOPATH could be used as the Root?\n. addendum: this is ugly, but it seems to be working with limited testing.\ndiff --git a/pkg.go b/pkg.go\nindex 12c82fe..a0c93cc 100644\n--- a/pkg.go\n+++ b/pkg.go\n@@ -60,6 +60,9 @@ func LoadPackages(name ...string) (a []*Package, err error) {\n        if err != nil {\n            info.Error.Err = err.Error()\n        }\n+       if info.Root == \"\" {\n+           info.Root = os.Getenv(\"GOPATH\")\n+       }\n        a = append(a, info)\n    }\n    err = cmd.Wait()\nnote that I only have a single path element in my GOPATH.\n. Copying the files at the repo root would certainly be sufficient to cover consumers of my repos.\nI do not have any repos more deeply nested than that, nor do I have any individually exportable sub-directories with different licenses.\nHowever, I could potentially imagine someone doing something like this, no matter how confusing or possibly ill advised it may be.\ngithub.com/someuser/someproject\ngithub.com/someuser/someproject/README\ngithub.com/someuser/someproject/pickles/LICENSE(BSD)\ngithub.com/someuser/someproject/pickles/canning/canning.go\ngithub.com/someuser/someproject/pickles/canning/vinegar.go\ngithub.com/someuser/someproject/relish/LICENSE(GPL)\ngithub.com/someuser/someproject/relish/canning/canning.go\ngithub.com/someuser/someproject/relish/canning/vinegar.go\nIf the consumer simply imported github.com/someuser/someproject/relish/canning, maybe godep could copy bare files from the import up to and including the root? In this case LICENSE(GPL) and README.\nNot sure if this would be easier or more difficult, than simply special casing the root.\nLike I said, special casing the root would cover my needs though.\n. @ahmetalpbalkan Nope. I do not use godep. Someone using one of my libs had the license stripped (not cool as it means they were unknowingly noncompliant with just about any open source license when using godep), so I filed this ticket. \n. I ran into this too.\nIt appears that if a package is not found in the go list -e -json shellout, then a Root is not set (defaults to empty string). \n$ go list -e -json github.com/gorilla/mux\n{\n    \"ImportPath\": \"github.com/gorilla/mux\",\n    \"Stale\": true,\n    \"Incomplete\": true,\n    \"Error\": {\n        \"ImportStack\": [\n            \"github.com/gorilla/mux\"\n        ],\n        \"Pos\": \"\",\n        \"Err\": \"cannot find package \\\"github.com/gorilla/mux\\\" in any of:\\n\\u0009/some/path/src/pkg/github.com/gorilla/mux (from $GOROOT)\\n\\u0009/other/path/src/github.com/gorilla/mux (from $GOPATH)\"\n    }\n}\nthis gets loaded in pkg.go/LoadPackages as:\n&{Dir: Root: ImportPath:github.com/gorilla/mux Deps:[] Standard:false TestImports:[] Error:{Err:cannot find package \"github.com/gorilla/mux\" in any of:\n    /some/path/src/pkg/github.com/gorilla/mux (from $GOROOT)\n    /other/path/src/github.com/gorilla/mux (from $GOPATH)}}\nSo restore currently only seems to work if all the deps are already installed into the GOPATH.\nWould it make sense that if Root is missing, GOPATH could be used as the Root?\n. addendum: this is ugly, but it seems to be working with limited testing.\ndiff --git a/pkg.go b/pkg.go\nindex 12c82fe..a0c93cc 100644\n--- a/pkg.go\n+++ b/pkg.go\n@@ -60,6 +60,9 @@ func LoadPackages(name ...string) (a []*Package, err error) {\n        if err != nil {\n            info.Error.Err = err.Error()\n        }\n+       if info.Root == \"\" {\n+           info.Root = os.Getenv(\"GOPATH\")\n+       }\n        a = append(a, info)\n    }\n    err = cmd.Wait()\nnote that I only have a single path element in my GOPATH.\n. Copying the files at the repo root would certainly be sufficient to cover consumers of my repos.\nI do not have any repos more deeply nested than that, nor do I have any individually exportable sub-directories with different licenses.\nHowever, I could potentially imagine someone doing something like this, no matter how confusing or possibly ill advised it may be.\ngithub.com/someuser/someproject\ngithub.com/someuser/someproject/README\ngithub.com/someuser/someproject/pickles/LICENSE(BSD)\ngithub.com/someuser/someproject/pickles/canning/canning.go\ngithub.com/someuser/someproject/pickles/canning/vinegar.go\ngithub.com/someuser/someproject/relish/LICENSE(GPL)\ngithub.com/someuser/someproject/relish/canning/canning.go\ngithub.com/someuser/someproject/relish/canning/vinegar.go\nIf the consumer simply imported github.com/someuser/someproject/relish/canning, maybe godep could copy bare files from the import up to and including the root? In this case LICENSE(GPL) and README.\nNot sure if this would be easier or more difficult, than simply special casing the root.\nLike I said, special casing the root would cover my needs though.\n. @ahmetalpbalkan Nope. I do not use godep. Someone using one of my libs had the license stripped (not cool as it means they were unknowingly noncompliant with just about any open source license when using godep), so I filed this ticket. \n. ",
    "zquestz": "Confirmed. How quickly can we get this fixed? Seems like a very large scale bug...\n. Fixed in PR https://github.com/kr/godep/pull/46\n. @philpennock I will switch that tomorrow. Didn't know that was in path/filepath =)\n. @philpennock this now uses filepath.SplitList for portability.\n. Confirmed. How quickly can we get this fixed? Seems like a very large scale bug...\n. Fixed in PR https://github.com/kr/godep/pull/46\n. @philpennock I will switch that tomorrow. Didn't know that was in path/filepath =)\n. @philpennock this now uses filepath.SplitList for portability.\n. ",
    "viblo": "I tried #46 and it seems to work for me\n. I tried #46 and it seems to work for me\n. ",
    "gravis": "+1\nI had the same issue yesterday, I thought godep restore would do a go get of the packages, but it didn't.\nIn this particular (and interesting) case, it sounds like we'll have to wrap the restore command with 2 go get.\n. +1\nI had the same issue yesterday, I thought godep restore would do a go get of the packages, but it didn't.\nIn this particular (and interesting) case, it sounds like we'll have to wrap the restore command with 2 go get.\n. ",
    "flaub": "I have a similar (same?) issue. Our source tree is pretty structurally equivalent to @insasho. \nThe source tree layout is rooted at /home/user/src/company/branch:\n/\n/ansible\n/cpp\n/go\n/go/src/company/proj1\n/go/src/github.com/user/repo\nOur GOPATH points to /home/user/src/company/branch/go.\ngo list -json from /home/user/src/company/branch/go/src/company/proj1 does work.\nOutput of godep save from /home/user/src/company/branch/go/src/company/proj1\ngodep: directory \"/home/user/src/company/branch/go\" is not using a known version control system\ngodep: error loading packages\n. I have a similar (same?) issue. Our source tree is pretty structurally equivalent to @insasho. \nThe source tree layout is rooted at /home/user/src/company/branch:\n/\n/ansible\n/cpp\n/go\n/go/src/company/proj1\n/go/src/github.com/user/repo\nOur GOPATH points to /home/user/src/company/branch/go.\ngo list -json from /home/user/src/company/branch/go/src/company/proj1 does work.\nOutput of godep save from /home/user/src/company/branch/go/src/company/proj1\ngodep: directory \"/home/user/src/company/branch/go\" is not using a known version control system\ngodep: error loading packages\n. ",
    "jdxcode": "I believe I have a standard gopath as well, and I can use godep with most paps, but it seems to break with martini. Here's a very simple application that causes the same error: https://github.com/dickeyxxx/martini-godep\n. I believe I have a standard gopath as well, and I can use godep with most paps, but it seems to break with martini. Here's a very simple application that causes the same error: https://github.com/dickeyxxx/martini-godep\n. ",
    "insasho": "@kr If this is something you're willing to consider supporting, I'd love it, and I know other projects would too.\nTo answer your question, here's an example of our tree:\ngo/.               <--- subdirectory of root of git repo\n   \u251c\u2500\u2500 bin\n   \u251c\u2500\u2500 pkg\n   \u2502\u00a0\u00a0 \u2514\u2500\u2500 linux_amd64\n   \u251c\u2500\u2500 src\n   \u2502\u00a0\u00a0 \u251c\u2500\u2500 code.google.com   <--- external deps are not checked in (but we'd like to)\n   \u2502\u00a0\u00a0 \u251c\u2500\u2500 github.com\n   \u2502\u00a0\u00a0 \u251c\u2500\u2500 launchpad.net\n   \u2502\u00a0\u00a0 \u2514\u2500\u2500 corpcorpcorp.com  <--- herein lies many of our projects\n   \u251c\u2500\u2500 Makefile\n   \u2514\u2500\u2500 README.md\nI'd like to be able to run bin/godep save corpcorpcorp.com/... from the go/ directory so that we can have consistent dependencies across our entire codebase. I don't want to maintain per-build-target Godeps files. We have company-wide dependencies and would like to stay consistent between developers as much as possible.\ngo list -json returns what you'd expect (failure):\n$ go list -json\ncan't load package: package .: no buildable Go source files in /home/insasho/src/go\nHowever, export GOPATH=$(pwd) && go list -json corpcorpcorp.com/... does return a list of dependencies.\n. My understanding of http://golang.org/doc/code.html is that this is indeed a standard Go environment; in fact, it is basically the example in http://golang.org/doc/code.html#Command. Can you clarify what Godep's version of a \"standard Go workspace\" is? What does it expect GOPATH to be? I can run export GOPATH=$(pwd) && go build corpcorpcorp.com/... from the top-level directory (where bin, pkg, and src are siblings and children of the $GOPATH) and it works just fine. \nI don't mind if godep is in philosophical disagreement with the idea of pinning an entire company's external dependencies to fixed versions, but pinning an entire project's dependencies with a single Godeps seems like a standard use case. If there is a better way to deal with this that I'm missing, I'd love to hear it!\nThanks!\n. @rliebling - This golang-nuts post describing @robfig's glock might be germane: https://groups.google.com/forum/#!topic/golang-nuts/dc0hIrbWX_U\n. @kr If this is something you're willing to consider supporting, I'd love it, and I know other projects would too.\nTo answer your question, here's an example of our tree:\ngo/.               <--- subdirectory of root of git repo\n   \u251c\u2500\u2500 bin\n   \u251c\u2500\u2500 pkg\n   \u2502\u00a0\u00a0 \u2514\u2500\u2500 linux_amd64\n   \u251c\u2500\u2500 src\n   \u2502\u00a0\u00a0 \u251c\u2500\u2500 code.google.com   <--- external deps are not checked in (but we'd like to)\n   \u2502\u00a0\u00a0 \u251c\u2500\u2500 github.com\n   \u2502\u00a0\u00a0 \u251c\u2500\u2500 launchpad.net\n   \u2502\u00a0\u00a0 \u2514\u2500\u2500 corpcorpcorp.com  <--- herein lies many of our projects\n   \u251c\u2500\u2500 Makefile\n   \u2514\u2500\u2500 README.md\nI'd like to be able to run bin/godep save corpcorpcorp.com/... from the go/ directory so that we can have consistent dependencies across our entire codebase. I don't want to maintain per-build-target Godeps files. We have company-wide dependencies and would like to stay consistent between developers as much as possible.\ngo list -json returns what you'd expect (failure):\n$ go list -json\ncan't load package: package .: no buildable Go source files in /home/insasho/src/go\nHowever, export GOPATH=$(pwd) && go list -json corpcorpcorp.com/... does return a list of dependencies.\n. My understanding of http://golang.org/doc/code.html is that this is indeed a standard Go environment; in fact, it is basically the example in http://golang.org/doc/code.html#Command. Can you clarify what Godep's version of a \"standard Go workspace\" is? What does it expect GOPATH to be? I can run export GOPATH=$(pwd) && go build corpcorpcorp.com/... from the top-level directory (where bin, pkg, and src are siblings and children of the $GOPATH) and it works just fine. \nI don't mind if godep is in philosophical disagreement with the idea of pinning an entire company's external dependencies to fixed versions, but pinning an entire project's dependencies with a single Godeps seems like a standard use case. If there is a better way to deal with this that I'm missing, I'd love to hear it!\nThanks!\n. @rliebling - This golang-nuts post describing @robfig's glock might be germane: https://groups.google.com/forum/#!topic/golang-nuts/dc0hIrbWX_U\n. ",
    "rliebling": "I did a little hacking to get this to work and identified two barriers to supporting this alternate layout.\n1.  in dep.go (from this package) the calls to VCSFromDir pass the src directory as the toplevel directory at which to stop searching for version control info (eg a .git/ dir).  That is, it invokes:\n_, reporoot, err := VCSFromDir(p.Dir, filepath.Join(p.Root, \"src\"))\nwhere p is a package.  In my hacking i changed the second arg to VCSFromDir to just '/'.  But, this may be bad for various reasons.  (I didn't really think about it; just wanted to see if i could make things work)\n2.  After making that change, there was a second problem.  In code.google.com/p/go/go.tools/go/vcs/vcs.go the FromDir method executes:\nif len(dir) <= len(srcRoot) || dir[len(srcRoot)] != filepath.Separator {\n        return nil, \"\", fmt.Errorf(\"directory %q is outside source root %q\", dir, srcRoot)\n    }\nBut, this fails when srcRoot is just '/'.  Not sure why they check it this way, but replacing it with (what I think is better):\nif strings.HasPrefix(dir, srcRoot) {\n        return nil, \"\", fmt.Errorf(\"directory %q is outside source root %q\", dir, srcRoot)\n    }\nresolves that issue.  But, this code is not directly under the control of godeps...\nAnyway, i'm not sure what the best solution is here.  But, as i did hack my way through to find the issues, i wanted to share them here.  I would like to see this resolved.\n. @kr I'm not sure i understand your comment about it not being a standard go workspace.  I think what we're talking about is just where the root of the version control repo lies (eg - where does .git live).  The issue arises when the VCS root lies outside/above the src directory.  I don't really think that the \"standard go workspace\" really does or should care about that.  The only time it matters, i think, to the go tool chain is whether the code in this particular repo is go get-able.\nIn my particular case, the go code i'm dealing with is but one part of a bigger repo where i have reasons to want the go code versioned together with the rest of the repo.  (and, don't want to deal with git submodules or such alternatives).  Within this repo i'd like to be able to build the go tool by just changing to the appropriate subdirectory, setting export GOPATH=$PWD, and running godep go install github.com/foo/bar\nAnyway, i understand if you don't want to support such situations, although I think it would be a good addition.\n. @kr Thanks!  It sounds like it should, at least to the extent i understand it.  However, i have checked out your branch and tried it and still get errors.  But, I may well not be doing it right :)\nI've pushed a trivial example demonstrating my basic setup; please see https://github.com/rliebling/godep_example\nThe readme explains what i've tried.\n. @kr - thanks for the suggestions on proper workspace layout and links to the twitter status with several examples.  I understand and accept that my layout is not the intended way a go project should be organized.  And, I will certainly continue to think about possible changes.  To my thinking, though, the issue is that I think of my repo not as a go project with other files, but as a non-Go project, one small piece of which is a go program.  In fact, at the subdir I set as my GOPATH, i have a Vagrantfile and Dockerfile to build (and crosscompile) the go project for windows, osx and linux.  (The Vagrantfile allows any team member to do this whichever platform they are using.)  The point is, most of these team members won't even have a Go compiler installed on their dev machine (outside of the docker image that automatically does the work for them).  The setup is so they can git clone the project and simply build the current version of the Go project, for whichever platform, and use that tool to do their work in the larger project.  The recommended layout seems appropriate only when Go is the primary focus of the project.\nAnyway, all that aside, i do appreciate your efforts to make this work, especially when we all acknowledge this is to support a non-standard, non-recommended layout.\nBack to my example demonstrating the problem, the point is that godep needs to figure out what to do with the github.com/rliebling/dep package.  I understand that to handle the dep package properly godep will need to determine that it's in the same repo as the main package.  With that in mind, I can propose a few possibilities (or, what seem to me like possibilities)\n1.  you don't find a VCS root for it, so you omit it from the godeps.json file, possibly only acting this way if some command line argument enables this behavior\n2.  a command line argument adds other, external, directories to be considered as VCS roots.  So, in my example i'd specify '/home/rich/dev/godep_example' and godep would, after vcs.FromDir() returns an error, VCSFromDir would try this other VCS root dir.\n3. You allow the search for VCS roots to go above the src/ dir, perhaps enabled by having a command line flag to specify a top level directory beyond which it should not search.\n4.  After not finding a VCS root for it, you compare directories and notice that as you recurse up the directory tree searching for the VCS root you end up in the same directory as you do searching for the VCS root of the rootset (destImportPath).  You conclude that this package is already maintained in sync with the rootset pkg (for which you are generating the Godeps.json) - whether by being in the same repo or just neither being version-controlled. \nI must admit that I'm only thinking about the godep save scenario and don't know the godep code very well at all.  So, i may be overlooking things that should be obvious.\nIf one of those approaches sounds both acceptable and promising to you, i'd be happy to take a stab at a PR.\n. @kr - while I greatly appreciate you help on this and advice on directory layout, the bottom line is I know I could change my project structure to adapt to the current limitations.  For whatever reasons, good or bad, I don't think that makes sense in my case.  For lack of a better analogy, retructuring the project layout around the tool I'm writing in go feels like having a house where when you enter through the front door you are taken immediately into the laundry room.  It's functional, but it sure feels wrong.\nFor Go in general, i think the only real limitation (at least the only one I'm aware of) regarding VCS is for a package to be go get-able.  If you don't care that your package can be retrieved automatically by go get then Go really does not care where the root of your VCS is.  So, Go is perfectly ok with having its workspace live in a subdirectory of a VCS project.  I understand godep must understand more about the VCS structure and so this issue arises.  \nFor me, personally, i'd be perfectly happy with a flag for godep save to have godep merely warn about errors finding VCS roots and omit those packages from the Godeps.json file.  This is a trivial fix, but a bit more involved to report which packages were skipped because dep.Load() would have to return more data in its errors.\n. I did a little hacking to get this to work and identified two barriers to supporting this alternate layout.\n1.  in dep.go (from this package) the calls to VCSFromDir pass the src directory as the toplevel directory at which to stop searching for version control info (eg a .git/ dir).  That is, it invokes:\n_, reporoot, err := VCSFromDir(p.Dir, filepath.Join(p.Root, \"src\"))\nwhere p is a package.  In my hacking i changed the second arg to VCSFromDir to just '/'.  But, this may be bad for various reasons.  (I didn't really think about it; just wanted to see if i could make things work)\n2.  After making that change, there was a second problem.  In code.google.com/p/go/go.tools/go/vcs/vcs.go the FromDir method executes:\nif len(dir) <= len(srcRoot) || dir[len(srcRoot)] != filepath.Separator {\n        return nil, \"\", fmt.Errorf(\"directory %q is outside source root %q\", dir, srcRoot)\n    }\nBut, this fails when srcRoot is just '/'.  Not sure why they check it this way, but replacing it with (what I think is better):\nif strings.HasPrefix(dir, srcRoot) {\n        return nil, \"\", fmt.Errorf(\"directory %q is outside source root %q\", dir, srcRoot)\n    }\nresolves that issue.  But, this code is not directly under the control of godeps...\nAnyway, i'm not sure what the best solution is here.  But, as i did hack my way through to find the issues, i wanted to share them here.  I would like to see this resolved.\n. @kr I'm not sure i understand your comment about it not being a standard go workspace.  I think what we're talking about is just where the root of the version control repo lies (eg - where does .git live).  The issue arises when the VCS root lies outside/above the src directory.  I don't really think that the \"standard go workspace\" really does or should care about that.  The only time it matters, i think, to the go tool chain is whether the code in this particular repo is go get-able.\nIn my particular case, the go code i'm dealing with is but one part of a bigger repo where i have reasons to want the go code versioned together with the rest of the repo.  (and, don't want to deal with git submodules or such alternatives).  Within this repo i'd like to be able to build the go tool by just changing to the appropriate subdirectory, setting export GOPATH=$PWD, and running godep go install github.com/foo/bar\nAnyway, i understand if you don't want to support such situations, although I think it would be a good addition.\n. @kr Thanks!  It sounds like it should, at least to the extent i understand it.  However, i have checked out your branch and tried it and still get errors.  But, I may well not be doing it right :)\nI've pushed a trivial example demonstrating my basic setup; please see https://github.com/rliebling/godep_example\nThe readme explains what i've tried.\n. @kr - thanks for the suggestions on proper workspace layout and links to the twitter status with several examples.  I understand and accept that my layout is not the intended way a go project should be organized.  And, I will certainly continue to think about possible changes.  To my thinking, though, the issue is that I think of my repo not as a go project with other files, but as a non-Go project, one small piece of which is a go program.  In fact, at the subdir I set as my GOPATH, i have a Vagrantfile and Dockerfile to build (and crosscompile) the go project for windows, osx and linux.  (The Vagrantfile allows any team member to do this whichever platform they are using.)  The point is, most of these team members won't even have a Go compiler installed on their dev machine (outside of the docker image that automatically does the work for them).  The setup is so they can git clone the project and simply build the current version of the Go project, for whichever platform, and use that tool to do their work in the larger project.  The recommended layout seems appropriate only when Go is the primary focus of the project.\nAnyway, all that aside, i do appreciate your efforts to make this work, especially when we all acknowledge this is to support a non-standard, non-recommended layout.\nBack to my example demonstrating the problem, the point is that godep needs to figure out what to do with the github.com/rliebling/dep package.  I understand that to handle the dep package properly godep will need to determine that it's in the same repo as the main package.  With that in mind, I can propose a few possibilities (or, what seem to me like possibilities)\n1.  you don't find a VCS root for it, so you omit it from the godeps.json file, possibly only acting this way if some command line argument enables this behavior\n2.  a command line argument adds other, external, directories to be considered as VCS roots.  So, in my example i'd specify '/home/rich/dev/godep_example' and godep would, after vcs.FromDir() returns an error, VCSFromDir would try this other VCS root dir.\n3. You allow the search for VCS roots to go above the src/ dir, perhaps enabled by having a command line flag to specify a top level directory beyond which it should not search.\n4.  After not finding a VCS root for it, you compare directories and notice that as you recurse up the directory tree searching for the VCS root you end up in the same directory as you do searching for the VCS root of the rootset (destImportPath).  You conclude that this package is already maintained in sync with the rootset pkg (for which you are generating the Godeps.json) - whether by being in the same repo or just neither being version-controlled. \nI must admit that I'm only thinking about the godep save scenario and don't know the godep code very well at all.  So, i may be overlooking things that should be obvious.\nIf one of those approaches sounds both acceptable and promising to you, i'd be happy to take a stab at a PR.\n. @kr - while I greatly appreciate you help on this and advice on directory layout, the bottom line is I know I could change my project structure to adapt to the current limitations.  For whatever reasons, good or bad, I don't think that makes sense in my case.  For lack of a better analogy, retructuring the project layout around the tool I'm writing in go feels like having a house where when you enter through the front door you are taken immediately into the laundry room.  It's functional, but it sure feels wrong.\nFor Go in general, i think the only real limitation (at least the only one I'm aware of) regarding VCS is for a package to be go get-able.  If you don't care that your package can be retrieved automatically by go get then Go really does not care where the root of your VCS is.  So, Go is perfectly ok with having its workspace live in a subdirectory of a VCS project.  I understand godep must understand more about the VCS structure and so this issue arises.  \nFor me, personally, i'd be perfectly happy with a flag for godep save to have godep merely warn about errors finding VCS roots and omit those packages from the Godeps.json file.  This is a trivial fix, but a bit more involved to report which packages were skipped because dep.Load() would have to return more data in its errors.\n. ",
    "bgentry": "In this case, it was untracked files, not unsaved changes. Is there an easy way to copy a fresh checkout of the tree rather than directly copying all files in the local checkout directory?\n. @kr so what's your idea? :)\n. I don't think so? #45 is related to stale imports. This appears to be subpackages that are imported from the global Go path instead of the one set up by godep.\nMaybe they are related or caused by the same thing, I'm not sure :)\n. I'm almost positive this used to happen to me even with rewrites. But I'm\nnot using godep regularly enough right now to say if it's still an issue.\nOn Friday, September 11, 2015, Edward Muller notifications@github.com\nwrote:\n\nEvery time I've tracked these things down in the past it was because of\nthe go tool using the wrong cached package file from outside. rewrites\nand/or vendor directory solve this AFAIK, so those should be used instead.\nClosing for now. If I'm way off base and/or we can reproduce with go 1.5*\nand current godep please re-open. Thanks!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/55#issuecomment-139629703.\n. I also just ran into the same issue:\n\n```\n\u279c  git push heroku master                        \nInitializing repository, done.\nCounting objects: 907, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (824/824), done.\nWriting objects: 100% (907/907), 306.85 KiB | 0 bytes/s, done.\nTotal 907 (delta 432), reused 161 (delta 30)\n-----> Fetching custom git buildpack... done\n-----> Go app detected\n-----> Installing go1.3.1... done\n-----> Running: godep go install -tags heroku ./...\napi/install_goose.go:7:8: cannot find package \"bitbucket.org/liamstask/goose/cmd/goose\" in any of:\n    /app/tmp/cache/go1.3.1/go/src/pkg/bitbucket.org/liamstask/goose/cmd/goose (from $GOROOT)\n    /tmp/build_c5b1d26b-b1aa-4c3c-8390-fa99b9ea03ce/.heroku/g/src/github.com/myuser/myapp/Godeps/_workspace/src/bitbucket.org/liamstask/goose/cmd/goose (from $GOPATH)\n    /tmp/build_c5b1d26b-b1aa-4c3c-8390-fa99b9ea03ce/.heroku/g/src/bitbucket.org/liamstask/goose/cmd/goose\ngodep: go exit status 1\n!     Push rejected, failed to compile Go app\n```\nGoose's recommended Heroku install method does seem like a bit of a hack, so I could understand if you don't want to support it.\n. I submitted a fix for this in #155.\n. In case I didn't explain this clearly enough, my concern here is that the path rewriting behavior of update is different from that of save.\n. So I think the real problem is that the -r flag in godep save -r is what actually rewrites import paths. That flag is not available on update, so the updated files are copied over the old ones without modification, nuking any rewriting that was present on the already-vendored dependency.\nWhich I think gives us these options:\n1. Automatically rewrite after godep update\n2. Add a -r flag to update so that godep update -r would get the behavior I want\n3. Somehow detect whether paths were rewritten in the old code, and attempt to rewrite the same paths in new code. This is much harder and I'm not sure if it would actually work..\nThoughts @kr?\n. Yeah, looks like the same issue.\nOn Tuesday, December 9, 2014, Conrad Pankoff notifications@github.com\nwrote:\n\nProbably related to #112 https://github.com/tools/godep/issues/112. I'd\nlove to get a push in the right direction of how to fix this and would be\nhappy to dig in to have a go - @kr https://github.com/kr?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/151#issuecomment-66404017.\n. trying to figure out a test for this now\n. Added a test that I think covers this case. Fails without my change, passes with it.\n. @kr I'd be surprised if this was the simplest or best way to test this, but it was the best I could come up within the short time I was working on this. Happy to make any changes you'd like\n. @kr rebased\n. The resulting imports section in the vendored file golang.org/x/crypto/nacl/box/box.go is:\n\n``` go\npackage box // import \"golang.org/x/crypto/nacl/box\"\nimport (\n    \"github.com/bgentry/redacted/Godeps/_workspace/src/golang.org/x/crypto/curve25519\"\n    \"github.com/bgentry/redacted/Godeps/_workspace/src/golang.org/x/crypto/nacl/secretbox\"\n    \"github.com/bgentry/redacted/Godeps/_workspace/src/golang.org/x/crypto/salsa20/salsa\"\n    \"io\"\n)\n```\nWhile the import paths themselves are rewritten, the canonical import comment is not.\n. comment from @dsymonds on the commit:\n\nYeah, godep needs to strip import comments of this form if it's going to\nput packages in a different import path.\n. LGTM\n. In this case, it was untracked files, not unsaved changes. Is there an easy way to copy a fresh checkout of the tree rather than directly copying all files in the local checkout directory?\n. @kr so what's your idea? :)\n. I don't think so? #45 is related to stale imports. This appears to be subpackages that are imported from the global Go path instead of the one set up by godep.\n\nMaybe they are related or caused by the same thing, I'm not sure :)\n. I'm almost positive this used to happen to me even with rewrites. But I'm\nnot using godep regularly enough right now to say if it's still an issue.\nOn Friday, September 11, 2015, Edward Muller notifications@github.com\nwrote:\n\nEvery time I've tracked these things down in the past it was because of\nthe go tool using the wrong cached package file from outside. rewrites\nand/or vendor directory solve this AFAIK, so those should be used instead.\nClosing for now. If I'm way off base and/or we can reproduce with go 1.5*\nand current godep please re-open. Thanks!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/55#issuecomment-139629703.\n. I also just ran into the same issue:\n\n```\n\u279c  git push heroku master                        \nInitializing repository, done.\nCounting objects: 907, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (824/824), done.\nWriting objects: 100% (907/907), 306.85 KiB | 0 bytes/s, done.\nTotal 907 (delta 432), reused 161 (delta 30)\n-----> Fetching custom git buildpack... done\n-----> Go app detected\n-----> Installing go1.3.1... done\n-----> Running: godep go install -tags heroku ./...\napi/install_goose.go:7:8: cannot find package \"bitbucket.org/liamstask/goose/cmd/goose\" in any of:\n    /app/tmp/cache/go1.3.1/go/src/pkg/bitbucket.org/liamstask/goose/cmd/goose (from $GOROOT)\n    /tmp/build_c5b1d26b-b1aa-4c3c-8390-fa99b9ea03ce/.heroku/g/src/github.com/myuser/myapp/Godeps/_workspace/src/bitbucket.org/liamstask/goose/cmd/goose (from $GOPATH)\n    /tmp/build_c5b1d26b-b1aa-4c3c-8390-fa99b9ea03ce/.heroku/g/src/bitbucket.org/liamstask/goose/cmd/goose\ngodep: go exit status 1\n!     Push rejected, failed to compile Go app\n```\nGoose's recommended Heroku install method does seem like a bit of a hack, so I could understand if you don't want to support it.\n. I submitted a fix for this in #155.\n. In case I didn't explain this clearly enough, my concern here is that the path rewriting behavior of update is different from that of save.\n. So I think the real problem is that the -r flag in godep save -r is what actually rewrites import paths. That flag is not available on update, so the updated files are copied over the old ones without modification, nuking any rewriting that was present on the already-vendored dependency.\nWhich I think gives us these options:\n1. Automatically rewrite after godep update\n2. Add a -r flag to update so that godep update -r would get the behavior I want\n3. Somehow detect whether paths were rewritten in the old code, and attempt to rewrite the same paths in new code. This is much harder and I'm not sure if it would actually work..\nThoughts @kr?\n. Yeah, looks like the same issue.\nOn Tuesday, December 9, 2014, Conrad Pankoff notifications@github.com\nwrote:\n\nProbably related to #112 https://github.com/tools/godep/issues/112. I'd\nlove to get a push in the right direction of how to fix this and would be\nhappy to dig in to have a go - @kr https://github.com/kr?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/151#issuecomment-66404017.\n. trying to figure out a test for this now\n. Added a test that I think covers this case. Fails without my change, passes with it.\n. @kr I'd be surprised if this was the simplest or best way to test this, but it was the best I could come up within the short time I was working on this. Happy to make any changes you'd like\n. @kr rebased\n. The resulting imports section in the vendored file golang.org/x/crypto/nacl/box/box.go is:\n\n``` go\npackage box // import \"golang.org/x/crypto/nacl/box\"\nimport (\n    \"github.com/bgentry/redacted/Godeps/_workspace/src/golang.org/x/crypto/curve25519\"\n    \"github.com/bgentry/redacted/Godeps/_workspace/src/golang.org/x/crypto/nacl/secretbox\"\n    \"github.com/bgentry/redacted/Godeps/_workspace/src/golang.org/x/crypto/salsa20/salsa\"\n    \"io\"\n)\n```\nWhile the import paths themselves are rewritten, the canonical import comment is not.\n. comment from @dsymonds on the commit:\n\nYeah, godep needs to strip import comments of this form if it's going to\nput packages in a different import path.\n. LGTM\n. \n",
    "vito": "That's how I ended up checking if a repo is dirty in my own dependency manager as well (checking that 'status' is empty). Bzr as usual is bizarre and has extra output if it's on a 'detached HEAD' (whatever its lingo is for that). Here's how I ended up doing it:\nhttps://github.com/vito/gocart/blob/master/repository/bzr_repository.go#L56-L68\nYou can find the implementations for other repository functions in the same package if you don't want to go over bzr's documentation. There are integration tests for most of it. Hope it helps!\n. same here.\nthis makes us sad.\n. That's how I ended up checking if a repo is dirty in my own dependency manager as well (checking that 'status' is empty). Bzr as usual is bizarre and has extra output if it's on a 'detached HEAD' (whatever its lingo is for that). Here's how I ended up doing it:\nhttps://github.com/vito/gocart/blob/master/repository/bzr_repository.go#L56-L68\nYou can find the implementations for other repository functions in the same package if you don't want to go over bzr's documentation. There are integration tests for most of it. Hope it helps!\n. same here.\nthis makes us sad.\n. ",
    "danp": "Here is a repro for hk:\n``` bash\n!/bin/sh\nset -ex\ngit checkout master\ngit branch -d old || true\ngit checkout -b old 208ceb0f3033800f0560913497490888b9c1cacf\nrm -rf Godeps/_workspace/pkg\ngodep go install\ngit checkout master\ngodep go build -x\n```\nInitial observations:\n- things are only put in Godeps/_workspace/pkg when godep go install is used\n- if -a is added to godep go build it works but ends up doing a lot of extra recompiling of the runtime and stdlib\n. Not sure if it's related to this or not but yesterday I had to nuke $GOPATH/pkg to get a godep go install to work.\n. On twitter @kr suggested godep save -r as a workaround. I have not been able to test yet.\n. Is this a dup of #45?\n. Running this unblocked it:\n% godep save github.com/stripe/aws-go/gen/dynamodb\nbut still not sure why.\n. Here is a repro for hk:\n``` bash\n!/bin/sh\nset -ex\ngit checkout master\ngit branch -d old || true\ngit checkout -b old 208ceb0f3033800f0560913497490888b9c1cacf\nrm -rf Godeps/_workspace/pkg\ngodep go install\ngit checkout master\ngodep go build -x\n```\nInitial observations:\n- things are only put in Godeps/_workspace/pkg when godep go install is used\n- if -a is added to godep go build it works but ends up doing a lot of extra recompiling of the runtime and stdlib\n. Not sure if it's related to this or not but yesterday I had to nuke $GOPATH/pkg to get a godep go install to work.\n. On twitter @kr suggested godep save -r as a workaround. I have not been able to test yet.\n. Is this a dup of #45?\n. Running this unblocked it:\n% godep save github.com/stripe/aws-go/gen/dynamodb\nbut still not sure why.\n. ",
    "artash": "Confirmed the issue is still there in current master c70332261771ad6dee89b0e7ca1460aca299d199\n. Confirmed the issue is still there in current master c70332261771ad6dee89b0e7ca1460aca299d199\n. ",
    "sqs": "I'm still seeing this and made a self-contained repro at https://github.com/sqs/godeps-stale-pkg-repro.\nI don't think this is godep's fault, but my current guess is that something godep does is triggering it. Basically, dependency pkgs in Godeps/_workspace are shown as Stale with godep go list, are rebuilt if you run godep go install on them directly, but aren't rebuilt if you run godep go install on a pkg that imports them.\ngo help install says: \"Install compiles and installs the packages named by the import paths, along with their dependencies.\" This seems to imply that the same operation should be performed on dependencies as on the named package arguments to go install.\nMy current guesses are either:\n1. I'm completely misunderstanding what go install should do.\n2. There's an special, undocumented way (or that I haven't seen the docs for) in which go install treats sub-GOPATHs or GOPATHs with underscore-leading names.\n3. There's a bug in how the go tool treats sub-GOPATHs or GOPATHs with underscore-leading names.\nFWIW, go1.4beta1 has the same issue.\n. Following up on this, we experience this 100% of the time when checking out git branches with different files in Godeps/_workspace/src (because the old pkg files are there), git pulling commits that change files in Godeps/_workspace/src, editing .go files in Godeps/_workspace/src, etc. It's also something that confuses people we're onboarding. The workaround is to nuke the Godeps/_workspace/pkg dir, of course.\nThe thing that's kept me from digging into this more (beyond the repro at https://github.com/sqs/godeps-stale-pkg-repro) is that nobody else seems to experience this issue with such regularity. And that makes me suspect that something is different about our setup. For the other folks who have reported this, does this issue occur all of the time, or just occasionally?\n. I think I found the root cause:\nhttps://github.com/golang/go/blob/906aefb038b6baddc38f165bdfb6ecf624db398d/src/cmd/go/pkg.go#L784-L796\n// Have installed copy, probably built using current compilers,\n    // and built after its imported packages.  The only reason now\n    // that we'd have to rebuild it is if the sources were newer than\n    // the package.   If a package p is not in the same tree as any\n    // package named on the command-line, assume it is up-to-date\n    // no matter what the modification times on the source files indicate.\n    // This avoids rebuilding $GOROOT packages when people are\n    // working outside the Go root, and it effectively makes each tree\n    // listed in $GOPATH a separate compilation world.\n    // See issue 3149.\n    if p.Root != \"\" && !topRoot[p.Root] {\n        return false\n    }\nIt refers to https://github.com/golang/go/issues/3149.\nI can see why you wouldn't want to recompile $GOROOT packages, but I wonder if the side effect of \"mak[ing] each tree listed in $GOPATH a separate compilation world\" is desirable. In this case, it is not.\n. Always appending -a would slow down partial rebuilds, which would be undesirable for us (from a dev speed and iteration POV).\n. Is this related to https://github.com/tools/godep/issues/271?\n. I'm still seeing this and made a self-contained repro at https://github.com/sqs/godeps-stale-pkg-repro.\nI don't think this is godep's fault, but my current guess is that something godep does is triggering it. Basically, dependency pkgs in Godeps/_workspace are shown as Stale with godep go list, are rebuilt if you run godep go install on them directly, but aren't rebuilt if you run godep go install on a pkg that imports them.\ngo help install says: \"Install compiles and installs the packages named by the import paths, along with their dependencies.\" This seems to imply that the same operation should be performed on dependencies as on the named package arguments to go install.\nMy current guesses are either:\n1. I'm completely misunderstanding what go install should do.\n2. There's an special, undocumented way (or that I haven't seen the docs for) in which go install treats sub-GOPATHs or GOPATHs with underscore-leading names.\n3. There's a bug in how the go tool treats sub-GOPATHs or GOPATHs with underscore-leading names.\nFWIW, go1.4beta1 has the same issue.\n. Following up on this, we experience this 100% of the time when checking out git branches with different files in Godeps/_workspace/src (because the old pkg files are there), git pulling commits that change files in Godeps/_workspace/src, editing .go files in Godeps/_workspace/src, etc. It's also something that confuses people we're onboarding. The workaround is to nuke the Godeps/_workspace/pkg dir, of course.\nThe thing that's kept me from digging into this more (beyond the repro at https://github.com/sqs/godeps-stale-pkg-repro) is that nobody else seems to experience this issue with such regularity. And that makes me suspect that something is different about our setup. For the other folks who have reported this, does this issue occur all of the time, or just occasionally?\n. I think I found the root cause:\nhttps://github.com/golang/go/blob/906aefb038b6baddc38f165bdfb6ecf624db398d/src/cmd/go/pkg.go#L784-L796\n// Have installed copy, probably built using current compilers,\n    // and built after its imported packages.  The only reason now\n    // that we'd have to rebuild it is if the sources were newer than\n    // the package.   If a package p is not in the same tree as any\n    // package named on the command-line, assume it is up-to-date\n    // no matter what the modification times on the source files indicate.\n    // This avoids rebuilding $GOROOT packages when people are\n    // working outside the Go root, and it effectively makes each tree\n    // listed in $GOPATH a separate compilation world.\n    // See issue 3149.\n    if p.Root != \"\" && !topRoot[p.Root] {\n        return false\n    }\nIt refers to https://github.com/golang/go/issues/3149.\nI can see why you wouldn't want to recompile $GOROOT packages, but I wonder if the side effect of \"mak[ing] each tree listed in $GOPATH a separate compilation world\" is desirable. In this case, it is not.\n. Always appending -a would slow down partial rebuilds, which would be undesirable for us (from a dev speed and iteration POV).\n. Is this related to https://github.com/tools/godep/issues/271?\n. ",
    "jkodumal": "I've been running into this quite a bit with a few recent projects. I've just added a step that cleans the pkg directory as part of my build, but it'd be good to see this fixed.\n. I've been running into this quite a bit with a few recent projects. I've just added a step that cleans the pkg directory as part of my build, but it'd be good to see this fixed.\n. ",
    "collinvandyck": "@sqs hi I actually just ran into this today. I changed a dependency and ran a godep go update [dep].  The JSON file seemed to be correctly updated, but the .a files in pkg were stale from a previous build. Nuking the pkg directory fixed it.\nThis is the first time I've run into this that I have noticed. I suspect/fear that it has been happening all along, periodically, but I just haven't noticed it for whatever reason.\n. I'm hitting something similar with the same dependency.  It lists the internal packages in Godeps.json, but these internal packages don't exist in my GOPATH source tree, but it is in Godeps/workspace, yet when I do a godep restore I get this error:\n~/.../go/src/github.com/librato/alerts [master]% [0] godep restore\npackage github.com/aws/aws-sdk-go/internal/endpoints: cannot find package \"github.com/aws/aws-sdk-go/internal/endpoints\" in any of:\n        /usr/local/Cellar/go/1.5.1/libexec/src/github.com/aws/aws-sdk-go/internal/endpoints (from $GOROOT)\n        /Users/cvandyck/code/go/src/github.com/aws/aws-sdk-go/internal/endpoints (from $GOPATH)\ngodep: restore: exit status 1\n. @sqs hi I actually just ran into this today. I changed a dependency and ran a godep go update [dep].  The JSON file seemed to be correctly updated, but the .a files in pkg were stale from a previous build. Nuking the pkg directory fixed it.\nThis is the first time I've run into this that I have noticed. I suspect/fear that it has been happening all along, periodically, but I just haven't noticed it for whatever reason.\n. I'm hitting something similar with the same dependency.  It lists the internal packages in Godeps.json, but these internal packages don't exist in my GOPATH source tree, but it is in Godeps/workspace, yet when I do a godep restore I get this error:\n~/.../go/src/github.com/librato/alerts [master]% [0] godep restore\npackage github.com/aws/aws-sdk-go/internal/endpoints: cannot find package \"github.com/aws/aws-sdk-go/internal/endpoints\" in any of:\n        /usr/local/Cellar/go/1.5.1/libexec/src/github.com/aws/aws-sdk-go/internal/endpoints (from $GOROOT)\n        /Users/cvandyck/code/go/src/github.com/aws/aws-sdk-go/internal/endpoints (from $GOPATH)\ngodep: restore: exit status 1\n. ",
    "fkautz": "As a workaround, we should be able to use:\nsh\ngodep go build -a\n-a tells go build to ignore mtime and assume everything is stale.\n. Can anyone see any reason why godep should not append -a on every build and install automatically?\n. It would slow down builds, but by how much? On one of my projects, I saw build times increase by around 200ms. The increase in build times is likely acceptable for the added benefit of having correct builds. :)\n. Had a talk with @sqs offline, main problem is incremental builds, which typically run in 500ms vs full builds which run in around 7s.\nWe should probably push this upstream to the go team and get them to fix go build instead.\n. @shurcooL How difficult would it be to submit a patch? One option would be to send them one and see if they accept it. \n. @shurcooL @kr Fantastic news, thanks for following up on this.\n. Further analysis, godep uses go get.\ngithub.com/MSOpenTech/azure-sdk-for-go/clients/storage\nresults in\ngo get github.com/MSOpenTech/azure-sdk-for-go/clients/storage\nwhich fails because clients/storage is not in master.\nHowever, the repo is properly downloaded. All that remains is the vcs revision being set to the correct version. (DL succeeds thanks to https://github.com/golang/go/blob/master/src/cmd/go/vcs.go#L697-L701)\nOne potential fix would be to detect \"cannot find package\" in the error, traverse to the repo location (as identified in vcs.go or ending in .vcs), and performing the vcs revision from the root of the repo. A go get without -u should result in a successful package download at that point to verify it worked.\nDo you have any recommendations? I can help implement a fix for this.\n. I am ok with copying code over. I'll put together an initial attempt.\n. @kr: Here is a working restore. I have given you access to github.com/fkautz/godep so we can collaborate on this more efficiently.\n@ahmetalpbalkan: pinging you since you were involved in earlier priv convo on this\nhttps://github.com/fkautz/godep/tree/restore-uses-inproc-with-fixed-repo-root\nThere are currently two commits. The first is a naive copy from cmd/go to github.com/tools/godep/govcs. The second is a working restore. Once we get to a nice state, we can squash.\nA few things need to be done before this is ready for a PR and merge.\n1: get needs to be modified to use govcs\n2: govcs needs to be cleaned out of everything that is unnecessary\n3: run tests to make sure we don't break others.\nI also tried a few manual tests.\n1. Remove a repo\n2. Repo exists and set to current master (verified rewind)\n3. Repo doesn't exist (or private), got http login requests (as expected from go get)\n. Also, this cmd/go was from 1.4.1. It is likely to fail in previous versions. If backwards compatibility is important, we should work our way backwards after pruning anything we don't want in the govcs package.\n. The branch listed above technically works, but needs some cleanup. We replicated cmd/go, publicly exposed some private fields/methods, and are able to pull and store properly. \nI'll get back onto this.\n. @karlkfi that branch was the result of this comment above: https://github.com/tools/godep/issues/186#issuecomment-75705765\nHere's some additional info:\nPremise: godep uses go get to check out the repo and git to rewind\nYou can classify every repo into two categories.\n1. golang doesn't know the root. e.g. it doesn't know how to resolve git.example.com/docker/docker/hack to any repo\nFortunately, golang provides a way to resolve the second issue by allowing the user to specify a repo. So, we need to solve the first problem.\n1. golang knows the root. e.g. github.com/docker/docker/hack/ will be resolved to https://github.com/docker/docker.git\nSo, godep calls go get. go get fails because it can check out the repo and then verifies the directory within the repo exists. So, the resulting fix I proposed basically downloads the repo, drops the directory not found exception, then rewinds to the correct version.\nAnother way to fix this would be to take the hardcoded list and just make calls to git directly.\n. @kr Does this patch make sense, based on what we spoke about before? If not, I can try submitting a different approach to fix #186.\n. Looks like this issue was fixed in go1.5 due to https://github.com/golang/go/issues/10509\nClosing.\n. As a workaround, we should be able to use:\nsh\ngodep go build -a\n-a tells go build to ignore mtime and assume everything is stale.\n. Can anyone see any reason why godep should not append -a on every build and install automatically?\n. It would slow down builds, but by how much? On one of my projects, I saw build times increase by around 200ms. The increase in build times is likely acceptable for the added benefit of having correct builds. :)\n. Had a talk with @sqs offline, main problem is incremental builds, which typically run in 500ms vs full builds which run in around 7s.\nWe should probably push this upstream to the go team and get them to fix go build instead.\n. @shurcooL How difficult would it be to submit a patch? One option would be to send them one and see if they accept it. \n. @shurcooL @kr Fantastic news, thanks for following up on this.\n. Further analysis, godep uses go get.\ngithub.com/MSOpenTech/azure-sdk-for-go/clients/storage\nresults in\ngo get github.com/MSOpenTech/azure-sdk-for-go/clients/storage\nwhich fails because clients/storage is not in master.\nHowever, the repo is properly downloaded. All that remains is the vcs revision being set to the correct version. (DL succeeds thanks to https://github.com/golang/go/blob/master/src/cmd/go/vcs.go#L697-L701)\nOne potential fix would be to detect \"cannot find package\" in the error, traverse to the repo location (as identified in vcs.go or ending in .vcs), and performing the vcs revision from the root of the repo. A go get without -u should result in a successful package download at that point to verify it worked.\nDo you have any recommendations? I can help implement a fix for this.\n. I am ok with copying code over. I'll put together an initial attempt.\n. @kr: Here is a working restore. I have given you access to github.com/fkautz/godep so we can collaborate on this more efficiently.\n@ahmetalpbalkan: pinging you since you were involved in earlier priv convo on this\nhttps://github.com/fkautz/godep/tree/restore-uses-inproc-with-fixed-repo-root\nThere are currently two commits. The first is a naive copy from cmd/go to github.com/tools/godep/govcs. The second is a working restore. Once we get to a nice state, we can squash.\nA few things need to be done before this is ready for a PR and merge.\n1: get needs to be modified to use govcs\n2: govcs needs to be cleaned out of everything that is unnecessary\n3: run tests to make sure we don't break others.\nI also tried a few manual tests.\n1. Remove a repo\n2. Repo exists and set to current master (verified rewind)\n3. Repo doesn't exist (or private), got http login requests (as expected from go get)\n. Also, this cmd/go was from 1.4.1. It is likely to fail in previous versions. If backwards compatibility is important, we should work our way backwards after pruning anything we don't want in the govcs package.\n. The branch listed above technically works, but needs some cleanup. We replicated cmd/go, publicly exposed some private fields/methods, and are able to pull and store properly. \nI'll get back onto this.\n. @karlkfi that branch was the result of this comment above: https://github.com/tools/godep/issues/186#issuecomment-75705765\nHere's some additional info:\nPremise: godep uses go get to check out the repo and git to rewind\nYou can classify every repo into two categories.\n1. golang doesn't know the root. e.g. it doesn't know how to resolve git.example.com/docker/docker/hack to any repo\nFortunately, golang provides a way to resolve the second issue by allowing the user to specify a repo. So, we need to solve the first problem.\n1. golang knows the root. e.g. github.com/docker/docker/hack/ will be resolved to https://github.com/docker/docker.git\nSo, godep calls go get. go get fails because it can check out the repo and then verifies the directory within the repo exists. So, the resulting fix I proposed basically downloads the repo, drops the directory not found exception, then rewinds to the correct version.\nAnother way to fix this would be to take the hardcoded list and just make calls to git directly.\n. @kr Does this patch make sense, based on what we spoke about before? If not, I can try submitting a different approach to fix #186.\n. Looks like this issue was fixed in go1.5 due to https://github.com/golang/go/issues/10509\nClosing.\n. ",
    "philpennock": "@zquestz This is non-portable with Unix assumptions.  You want to use path/filepath and the SplitList() function in that instead.\n. @zquestz This is non-portable with Unix assumptions.  You want to use path/filepath and the SplitList() function in that instead.\n. ",
    "catsby": "Stemmed from this comment https://github.com/mmcgrana/mmcgrana.github.com/pull/1#issuecomment-31430171 \nSeems(?) older builds of godep used a single Godep file instead of the directory structure. When updating the docs I had a newer version, and when Mark was checking my patch he couldn't get it to work, because his older build didn't work the the directory(?).\n. Is it possible to restructure your local files to better match the recommended Code Organization?\nGo will recognize local sources if it's in $GOPATH/src/{github.com | code.google.com | etc}/name/repo, in which case your example would have no problem finding poc/web\n. Stemmed from this comment https://github.com/mmcgrana/mmcgrana.github.com/pull/1#issuecomment-31430171 \nSeems(?) older builds of godep used a single Godep file instead of the directory structure. When updating the docs I had a newer version, and when Mark was checking my patch he couldn't get it to work, because his older build didn't work the the directory(?).\n. Is it possible to restructure your local files to better match the recommended Code Organization?\nGo will recognize local sources if it's in $GOPATH/src/{github.com | code.google.com | etc}/name/repo, in which case your example would have no problem finding poc/web\n. ",
    "nathantsoi": "using @pedantic-git's fork for this feature. any chance it'll get merged in?\n. using @pedantic-git's fork for this feature. any chance it'll get merged in?\n. ",
    "joncooper": "+1 on this. \nI've got the same issue. Our preference is to keep the entire project in a single repo, hence, my GOPATH is not at the root of its repository, it's at myproj/go.\n@kr @bmizerany I'd be happy to contribute to a patch if this one isn't the direction y'all would like to take this, but it'd be great to find a solution without using a fork.\n. What can I do to help move forward on this?\nI imagine that when you say \"do the right thing\" you have something quite specific in mind. If so, what is it? I'm happy to help riff on a possible solution given a clear problem statement. But I also don't want to expend effort solving the wrong problem from the maintainer's perspective.\n. +1 on this. \nI've got the same issue. Our preference is to keep the entire project in a single repo, hence, my GOPATH is not at the root of its repository, it's at myproj/go.\n@kr @bmizerany I'd be happy to contribute to a patch if this one isn't the direction y'all would like to take this, but it'd be great to find a solution without using a fork.\n. What can I do to help move forward on this?\nI imagine that when you say \"do the right thing\" you have something quite specific in mind. If so, what is it? I'm happy to help riff on a possible solution given a clear problem statement. But I also don't want to expend effort solving the wrong problem from the maintainer's perspective.\n. ",
    "chastabor": "This problem is also affecting us as we utilize multiple programming languages in one repo for different parts of the project. We attempted to fix it with symlinks from the gopath src directory to the go code in the repo, like \"ls -s /src/ $GOPATH/src/\". This seems to work for go build and list, and go get will put the dependencies in the $GOPATH/src/ like we want. We also don't need to change our GOPATH, when working with this other project. However, godep finds the actual location of the repo /src/ and then throws an error that it is outside the root src. Would honoring symlinks for godep be a viable solution for this?\n. Sorry my angle bracket notation was taken out from post so using curly brackets here instead: \"ls -s {repo}/src/{project} $GOPATH/src/{project}\"\n. This problem is also affecting us as we utilize multiple programming languages in one repo for different parts of the project. We attempted to fix it with symlinks from the gopath src directory to the go code in the repo, like \"ls -s /src/ $GOPATH/src/\". This seems to work for go build and list, and go get will put the dependencies in the $GOPATH/src/ like we want. We also don't need to change our GOPATH, when working with this other project. However, godep finds the actual location of the repo /src/ and then throws an error that it is outside the root src. Would honoring symlinks for godep be a viable solution for this?\n. Sorry my angle bracket notation was taken out from post so using curly brackets here instead: \"ls -s {repo}/src/{project} $GOPATH/src/{project}\"\n. ",
    "paulsmith": "I would like to see godep handle this as well.\nFWIW, ngrok has the structure we're talking about, if it helps anyone else have a public project to point to describing this.\n. I would like to see godep handle this as well.\nFWIW, ngrok has the structure we're talking about, if it helps anyone else have a public project to point to describing this.\n. ",
    "2bitProgammer": "I'm running into this same problem.  Looks like this issue is dead in the water though??\n. I'm running into this same problem.  Looks like this issue is dead in the water though??\n. ",
    "leebrooks0": "Aha!\nOn Wed, Jan 22, 2014 at 8:36 PM, Keith Rarick notifications@github.comwrote:\n\nAnother attempt to put this: if you're only using the\nstandard go tool, you don't need 'godep path'.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/kr/godep/issues/49#issuecomment-33052775\n.\n. Aha!\n\nOn Wed, Jan 22, 2014 at 8:36 PM, Keith Rarick notifications@github.comwrote:\n\nAnother attempt to put this: if you're only using the\nstandard go tool, you don't need 'godep path'.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/kr/godep/issues/49#issuecomment-33052775\n.\n. \n",
    "silasdavis": "The problem with the first method is that is rather unexpected - at least in my experience with other developers I have introduced to it. It also is against the concept of isolation - when I first ran godep restore I didn't realise it was fiddling with my environment's gopath - and this could break other things relying on particular versions.\nIf godep save creates and uses Godeps/_workspace by default it seems like it's dual - godep restore - should do the same. I was hoping it would create the workspace if it did not exist.\nAlso the when you run GOPATH=$(godep path) godep restore I assume godep just targets the first path in GOPATH (is this correct) if their are multiple paths, which seems somewhat arbitrary. The semantics of GOPATH are that the leftmost path should take precedent - you may in some circumstances want this to be a system or other non-writable path, and have your 'vendored'/bundled path appearing after this. In any case I think it would be good if you could pass restore a target restore path explicitly, and that by default it should use _workspace. This is particularly useful for build scripts, such as travis.\nI also like the interoperability with standard tooling, it's just not entirely clear what should be done with GOPATH=/usr/lib/go:$HOME/go:$HOME/code/project/Godeps/_workspace. Should we restore to all, the first, the last?\n. The problem with the first method is that is rather unexpected - at least in my experience with other developers I have introduced to it. It also is against the concept of isolation - when I first ran godep restore I didn't realise it was fiddling with my environment's gopath - and this could break other things relying on particular versions.\nIf godep save creates and uses Godeps/_workspace by default it seems like it's dual - godep restore - should do the same. I was hoping it would create the workspace if it did not exist.\nAlso the when you run GOPATH=$(godep path) godep restore I assume godep just targets the first path in GOPATH (is this correct) if their are multiple paths, which seems somewhat arbitrary. The semantics of GOPATH are that the leftmost path should take precedent - you may in some circumstances want this to be a system or other non-writable path, and have your 'vendored'/bundled path appearing after this. In any case I think it would be good if you could pass restore a target restore path explicitly, and that by default it should use _workspace. This is particularly useful for build scripts, such as travis.\nI also like the interoperability with standard tooling, it's just not entirely clear what should be done with GOPATH=/usr/lib/go:$HOME/go:$HOME/code/project/Godeps/_workspace. Should we restore to all, the first, the last?\n. ",
    "pdf": "@kr I think the naming for godep restore is very confusing.  I also expected this to be the method for restoring non-vendored deps into the Godep workspace.  I think godep export might have been a more fitting name if you want to mess with the outside GOPATH.  In general though, I never want Godep to mess with anything outside the project root - doing so may have serious consequences.\nI don't expect godep path to do anything, except print a path - having this be a potentially expensive operation doesn't seem like a good idea.  I do think godep go should fetch code into the Godep workspace if missing.\nThe -copy=false behaviour described sounds sane.\n. @kr I think the naming for godep restore is very confusing.  I also expected this to be the method for restoring non-vendored deps into the Godep workspace.  I think godep export might have been a more fitting name if you want to mess with the outside GOPATH.  In general though, I never want Godep to mess with anything outside the project root - doing so may have serious consequences.\nI don't expect godep path to do anything, except print a path - having this be a potentially expensive operation doesn't seem like a good idea.  I do think godep go should fetch code into the Godep workspace if missing.\nThe -copy=false behaviour described sounds sane.\n. ",
    "ThisGuyCodes": "I have an idea I'm surprised no one has proposed yet.\nMany of these dependency pinning tools in some way reference Bundler as inspiration, I know that's what I think of whenever I see or use them. So why not take a page from that book and make a command godep install, which does exactly what's needed here: installs the dependencies listed in Godeps.json into the current projects _workspace.\nI actually think godep restore's functionality makes sense, it's a little ambiguous, so renaming it to godep export might make sense, but that's a breaking change so it should at the very least be done slowly (let both work with a deprecation warning for a while). Having godep go install dependencies if they're not already present is certainly a thing that could be done, but it's a bit to 'magic' for me. The most I'd be comfortable with there is a check and a warning printed. And I totally agree with @pdf, putting that expensive an operation into godep path is a bad idea.\n. I would like to add that I already do this as a shell alias:\nBash\nalias godep_install='GOPATH=$(godep path) godep restore'\nand it works great. (if anyone wants to use this, it's quite important you use single quotes instead of double quotes, otherwise godep path is evaluated at alias creation, and not each time you run it)\n. GOPATH=$(godep path) $COMMAND\nI don't feel like this is something this tool should be responsible for.\n. @freeformz could you point me in the right direction for information about this -vendor option? I did some googling but I seem to be failing to find anything.\n. this problem makes sense, but instead of a blacklist which gets things working via a curated magic list of \"stuff that breaks other commands\", maybe it should be a whitelist of \"this is what we need to do what we do\". That way instead of being responsible for finding every environment variable that might break anything, the tool is only responsible for knowing what environment variables it needs to do its thing(s), and it can be established as a rule that \"commands this runs are isolated from the environment\".\nThis idea may also prompt some sort of flag to specify other environment variables to pass through, should someone's need arise to break this isolation.\n. With git and mercurial this could actually be solved by using the respective tool (ie: git clone $DIRECTORY instead of copying). I don't know about bzr, but I imagine it's pretty similar. This would mean until you make a commit you can't save the repo into your Godeps.\nBut regardless of the more plumbing-style approach suggested above, or this, this alludes to another issue: if you're using a locally edited version of the repo, how does the tool know you're not depending on files that are .gitignored? It doesn't, of course, and it's unrealistic to expect it to.\nWith my suggestion, there are four options I see (much of the same concerns are present in the suggestion above as well):\n1. Let it go, if someone does godep save with uncommitted code in a dependency they're going to break things, sorry!\n2. Don't support copying local dependencies.\n3. For each tool that's supported, do a check to see if there's uncommitted changes (git status, etc).\n4. When it's detected that we're copying a locally edited dependency print a warning, every time, about how uncommitted code doesn't get copied (or, with the other suggestion, about how .gitignored files don't get copied).\n1 feels irresponsible to me. 2 is removing support for a workflow that's incredibly useful when orchestrating cross-library/project changes. 3 will be a lot of work, and could get very complicated and error prone, even more so if we want to take into consideration possible dependencies on .gitignored files. 4 feels like the best option to me; alert developers to the potential issues of what they're doing, which will usually just amount to \"oh that test broke, has to do with that warning that's on my screen every time I install dependencies\"\n. I have an idea I'm surprised no one has proposed yet.\nMany of these dependency pinning tools in some way reference Bundler as inspiration, I know that's what I think of whenever I see or use them. So why not take a page from that book and make a command godep install, which does exactly what's needed here: installs the dependencies listed in Godeps.json into the current projects _workspace.\nI actually think godep restore's functionality makes sense, it's a little ambiguous, so renaming it to godep export might make sense, but that's a breaking change so it should at the very least be done slowly (let both work with a deprecation warning for a while). Having godep go install dependencies if they're not already present is certainly a thing that could be done, but it's a bit to 'magic' for me. The most I'd be comfortable with there is a check and a warning printed. And I totally agree with @pdf, putting that expensive an operation into godep path is a bad idea.\n. I would like to add that I already do this as a shell alias:\nBash\nalias godep_install='GOPATH=$(godep path) godep restore'\nand it works great. (if anyone wants to use this, it's quite important you use single quotes instead of double quotes, otherwise godep path is evaluated at alias creation, and not each time you run it)\n. GOPATH=$(godep path) $COMMAND\nI don't feel like this is something this tool should be responsible for.\n. @freeformz could you point me in the right direction for information about this -vendor option? I did some googling but I seem to be failing to find anything.\n. this problem makes sense, but instead of a blacklist which gets things working via a curated magic list of \"stuff that breaks other commands\", maybe it should be a whitelist of \"this is what we need to do what we do\". That way instead of being responsible for finding every environment variable that might break anything, the tool is only responsible for knowing what environment variables it needs to do its thing(s), and it can be established as a rule that \"commands this runs are isolated from the environment\".\nThis idea may also prompt some sort of flag to specify other environment variables to pass through, should someone's need arise to break this isolation.\n. With git and mercurial this could actually be solved by using the respective tool (ie: git clone $DIRECTORY instead of copying). I don't know about bzr, but I imagine it's pretty similar. This would mean until you make a commit you can't save the repo into your Godeps.\nBut regardless of the more plumbing-style approach suggested above, or this, this alludes to another issue: if you're using a locally edited version of the repo, how does the tool know you're not depending on files that are .gitignored? It doesn't, of course, and it's unrealistic to expect it to.\nWith my suggestion, there are four options I see (much of the same concerns are present in the suggestion above as well):\n1. Let it go, if someone does godep save with uncommitted code in a dependency they're going to break things, sorry!\n2. Don't support copying local dependencies.\n3. For each tool that's supported, do a check to see if there's uncommitted changes (git status, etc).\n4. When it's detected that we're copying a locally edited dependency print a warning, every time, about how uncommitted code doesn't get copied (or, with the other suggestion, about how .gitignored files don't get copied).\n1 feels irresponsible to me. 2 is removing support for a workflow that's incredibly useful when orchestrating cross-library/project changes. 3 will be a lot of work, and could get very complicated and error prone, even more so if we want to take into consideration possible dependencies on .gitignored files. 4 feels like the best option to me; alert developers to the potential issues of what they're doing, which will usually just amount to \"oh that test broke, has to do with that warning that's on my screen every time I install dependencies\"\n. ",
    "jbenet": "Not sure if this is the use case, but for me, i'd like to be able to \ngodep <cmd> <pkg>\nAnd have it be downloaded and tracked in the index. Sometimes one needs to vendor go bin tools into a project. The hack around it -- import the tool's pkg in a dummy file -- is dirty and doesn't always work.\n. We're also seeing this.\n. @kr yeah we figured it was more idiomatic to do \"go-datastore\". Thanks for the ptr to the discussion though!\n. Not sure if this is the use case, but for me, i'd like to be able to \ngodep <cmd> <pkg>\nAnd have it be downloaded and tracked in the index. Sometimes one needs to vendor go bin tools into a project. The hack around it -- import the tool's pkg in a dummy file -- is dirty and doesn't always work.\n. We're also seeing this.\n. @kr yeah we figured it was more idiomatic to do \"go-datastore\". Thanks for the ptr to the discussion though!\n. ",
    "joefitzgerald": "+1 - looks like the same issue @mstine reported in #56 \n. +1 - looks like the same issue @mstine reported in #56 \n. ",
    "mstine": "Yep...same issue. #56 can close if this is merged.\n. Yep...same issue. #56 can close if this is merged.\n. ",
    "harshavardhana": "https://github.com/tools/godep/blob/master/get.go#L50 - i cannot help but wonder why is \"go install\" necessary for \"godep get\" ? \n. https://github.com/tools/godep/blob/master/get.go#L50 - i cannot help but wonder why is \"go install\" necessary for \"godep get\" ? \n. ",
    "fkm3": "Sorry for the slow reply.\nIt doesn't choke on the sym link now, but the code in github.com/valyala/ybc/bindings/go/ybc/ has C dependencies in github.com/valyala/ybc/ that don't get copied. Maybe that is out of scope for this tool? Seems like I can just copy them manually for now.\n. Sorry for the slow reply.\nIt doesn't choke on the sym link now, but the code in github.com/valyala/ybc/bindings/go/ybc/ has C dependencies in github.com/valyala/ybc/ that don't get copied. Maybe that is out of scope for this tool? Seems like I can just copy them manually for now.\n. ",
    "vcaputo": "@kr It needs to recur at the symlink, not simply preserve the symlink.\nImagine a project foo.com/bar where the directory structure is like this:\n\nbin/\ndoc/\nsome_pkg -> src/some_pkg\nsrc/\nMakefile\nREADME\n\nThe symlink is included just to cleanup the import path of some_pkg for external users:\nimport \"foo.com/bar/some_pkg\"\nvs.\nimport \"foo.com/bar/src/some_pkg\"\nWhile still allowing the project to have a clean separation of the code from everything else in the directory structure.\nBut if a project imports the path at the symlink and godep save is used, all it saves is the symlink.\n. @kr It needs to recur at the symlink, not simply preserve the symlink.\nImagine a project foo.com/bar where the directory structure is like this:\n\nbin/\ndoc/\nsome_pkg -> src/some_pkg\nsrc/\nMakefile\nREADME\n\nThe symlink is included just to cleanup the import path of some_pkg for external users:\nimport \"foo.com/bar/some_pkg\"\nvs.\nimport \"foo.com/bar/src/some_pkg\"\nWhile still allowing the project to have a clean separation of the code from everything else in the directory structure.\nBut if a project imports the path at the symlink and godep save is used, all it saves is the symlink.\n. ",
    "bhcleek": "@silasdavis are you familiar with the url.<base>.insteadOf config option in Git? I've been using it successfully to go get from private repositories.\n. We recently ran into this problem and were able to resolve it. In our case, the problem stemmed from the migration of the Go tools (golang.org/x/) repositories to Git in December. The SHAs stored in Godeps.json were Mercurial SHAs, which of course don't exist in the Git repositories. Once we updated the SHAs to their proper Git counterparts, all was well.\n. Here is a workaround until this gets fixed:\n1. Remove all entries for the dependency to be updated from Godeps/Godeps.json.\n2. Remove the directory root for the dependency to be updated from vendor.\n3. re-vendor the dependency using godep save [packages].\n. @silasdavis are you familiar with the url.<base>.insteadOf config option in Git? I've been using it successfully to go get from private repositories.\n. We recently ran into this problem and were able to resolve it. In our case, the problem stemmed from the migration of the Go tools (golang.org/x/) repositories to Git in December. The SHAs stored in Godeps.json were Mercurial SHAs, which of course don't exist in the Git repositories. Once we updated the SHAs to their proper Git counterparts, all was well.\n. Here is a workaround until this gets fixed:\n1. Remove all entries for the dependency to be updated from Godeps/Godeps.json.\n2. Remove the directory root for the dependency to be updated from vendor.\n3. re-vendor the dependency using godep save [packages].\n. ",
    "mikepc": "The .netrc method is working for me with go get, but not with godep restore. Any ideas? \n. This is in a docker image (so no cache is at hand). I'm able to go get the private repo but godep is not working, which blew my mind as well.\nRunning the restore with the -d command yields \"unable to determine root\" for the private repo, so none of the VCS setup is happening.\nFROM golang:1.5.2\nWORKDIR /go/src/bitbucket.org/XXX/user\nADD . /go/src/bitbucket.org/XXX/user\nADD keys/.gitconfig /root/.gitconfig\nADD keys/.netrc /root/.netrc\nENV GO15VENDOREXPERIMENT 1\nUpdate aptitude with new repo\nRUN apt-get update\nRUN apt-get install -y openssh-server\nCopy over private key, and set permissions\nADD keys/id_logging /id_logging\nRUN \\\n  chmod 600 /id_logging && \\\n  echo \"IdentityFile /id_logging\" >> /etc/ssh/ssh_config && \\\n  echo \"StrictHostKeyChecking no\" >> /etc/ssh/ssh_config\nRUN go get github.com/tools/godep\nRUN go get bitbucket.org/XXX/logging # <--- This works\nRUN godep restore # <-- This does not.\nRUN go get\nRUN go build\nRUN go install \nCMD user\n. \n\ngodep restore -d\n\nversionString() godep v74 (darwin/amd64/go1.5.2)\nmajorGoVersion go1.5\nVendorExperiment true\nsep /vendor/\nError determining repo root for bitbucket.org/XXX/logging\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://github.com/codegangsta/negroni\",\n    Root: \"github.com/codegangsta/negroni\",\n}\ndep &main.Dependency{\n    ImportPath: \"github.com/codegangsta/negroni\",\n    Comment:    \"v0.1-70-gc7477ad\",\n    Rev:        \"c7477ad8e330bef55bf1ebe300cf8aa67c492d1b\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/github.com/codegangsta/negroni\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://github.com/davecgh/go-spew\",\n    Root: \"github.com/davecgh/go-spew\",\n}\ndep &main.Dependency{\n    ImportPath: \"github.com/davecgh/go-spew/spew\",\n    Comment:    \"\",\n    Rev:        \"5215b55f46b2b919f50a1df0eaa5886afe4e3b3d\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/github.com/davecgh/go-spew\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://github.com/dgrijalva/jwt-go\",\n    Root: \"github.com/dgrijalva/jwt-go\",\n}\ndep &main.Dependency{\n    ImportPath: \"github.com/dgrijalva/jwt-go\",\n    Comment:    \"v2.4.0-2-g2240de7\",\n    Rev:        \"2240de772c17d0e303c9bbc04bca67ffdfef32c4\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/github.com/dgrijalva/jwt-go\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://github.com/google/go-querystring\",\n    Root: \"github.com/google/go-querystring\",\n}\ndep &main.Dependency{\n    ImportPath: \"github.com/google/go-querystring/query\",\n    Comment:    \"\",\n    Rev:        \"2a60fc2ba6c19de80291203597d752e9ba58e4c0\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/github.com/google/go-querystring\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://github.com/gorilla/context\",\n    Root: \"github.com/gorilla/context\",\n}\ndep &main.Dependency{\n    ImportPath: \"github.com/gorilla/context\",\n    Comment:    \"\",\n    Rev:        \"1c83b3eabd45b6d76072b66b746c20815fb2872d\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/github.com/gorilla/context\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://github.com/gorilla/mux\",\n    Root: \"github.com/gorilla/mux\",\n}\ndep &main.Dependency{\n    ImportPath: \"github.com/gorilla/mux\",\n    Comment:    \"\",\n    Rev:        \"9c068cf16d982f8bd444b8c352acbeec34c4fe5b\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/github.com/gorilla/mux\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://github.com/joho/godotenv\",\n    Root: \"github.com/joho/godotenv\",\n}\ndep &main.Dependency{\n    ImportPath: \"github.com/joho/godotenv\",\n    Comment:    \"v1-10-g4ed1339\",\n    Rev:        \"4ed13390c0acd2ff4e371e64d8b97c8954138243\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/github.com/joho/godotenv\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://github.com/joho/godotenv\",\n    Root: \"github.com/joho/godotenv\",\n}\ndep &main.Dependency{\n    ImportPath: \"github.com/joho/godotenv/autoload\",\n    Comment:    \"v1-10-g4ed1339\",\n    Rev:        \"4ed13390c0acd2ff4e371e64d8b97c8954138243\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/github.com/joho/godotenv\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://github.com/moul/http2curl\",\n    Root: \"github.com/moul/http2curl\",\n}\ndep &main.Dependency{\n    ImportPath: \"github.com/moul/http2curl\",\n    Comment:    \"\",\n    Rev:        \"1c29be06762e43e04dd954a01c66991104ce4374\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/github.com/moul/http2curl\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://github.com/mrjones/oauth\",\n    Root: \"github.com/mrjones/oauth\",\n}\ndep &main.Dependency{\n    ImportPath: \"github.com/mrjones/oauth\",\n    Comment:    \"\",\n    Rev:        \"fdd43ab9ffd4adbedbecf59a0ec6a7e0d3ef3970\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/github.com/mrjones/oauth\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://github.com/parnurzeal/gorequest\",\n    Root: \"github.com/parnurzeal/gorequest\",\n}\ndep &main.Dependency{\n    ImportPath: \"github.com/parnurzeal/gorequest\",\n    Comment:    \"v0.2.13-7-g27bfb0d\",\n    Rev:        \"27bfb0dcbcc020d11b7839af416fb8dafc2ab01c\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/github.com/parnurzeal/gorequest\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://github.com/pmezard/go-difflib\",\n    Root: \"github.com/pmezard/go-difflib\",\n}\ndep &main.Dependency{\n    ImportPath: \"github.com/pmezard/go-difflib/difflib\",\n    Comment:    \"\",\n    Rev:        \"792786c7400a136282c1664665ae0a8db921c6c2\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/github.com/pmezard/go-difflib\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://github.com/segmentio/go-loggly\",\n    Root: \"github.com/segmentio/go-loggly\",\n}\ndep &main.Dependency{\n    ImportPath: \"github.com/segmentio/go-loggly\",\n    Comment:    \"v0.4.3-4-ge78f697\",\n    Rev:        \"e78f6971ebca5835614673e2f5f6a47ca5f13501\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/github.com/segmentio/go-loggly\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://github.com/stretchr/testify\",\n    Root: \"github.com/stretchr/testify\",\n}\ndep &main.Dependency{\n    ImportPath: \"github.com/stretchr/testify/assert\",\n    Comment:    \"v1.1.3-19-gd77da35\",\n    Rev:        \"d77da356e56a7428ad25149ca77381849a6a5232\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/github.com/stretchr/testify\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://github.com/visionmedia/go-debug\",\n    Root: \"github.com/visionmedia/go-debug\",\n}\ndep &main.Dependency{\n    ImportPath: \"github.com/visionmedia/go-debug\",\n    Comment:    \"v2.0.0\",\n    Rev:        \"ff4a55a20a86994118644bbddc6a216da193cc13\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/github.com/visionmedia/go-debug\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://go.googlesource.com/crypto\",\n    Root: \"golang.org/x/crypto\",\n}\ndep &main.Dependency{\n    ImportPath: \"golang.org/x/crypto/bcrypt\",\n    Comment:    \"\",\n    Rev:        \"f18420efc3b4f8e9f3d51f6bd2476e92c46260e9\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/golang.org/x/crypto\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://go.googlesource.com/crypto\",\n    Root: \"golang.org/x/crypto\",\n}\ndep &main.Dependency{\n    ImportPath: \"golang.org/x/crypto/blowfish\",\n    Comment:    \"\",\n    Rev:        \"f18420efc3b4f8e9f3d51f6bd2476e92c46260e9\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/golang.org/x/crypto\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://go.googlesource.com/crypto\",\n    Root: \"golang.org/x/crypto\",\n}\ndep &main.Dependency{\n    ImportPath: \"golang.org/x/crypto/pbkdf2\",\n    Comment:    \"\",\n    Rev:        \"f18420efc3b4f8e9f3d51f6bd2476e92c46260e9\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/golang.org/x/crypto\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://go.googlesource.com/net\",\n    Root: \"golang.org/x/net\",\n}\ndep &main.Dependency{\n    ImportPath: \"golang.org/x/net/publicsuffix\",\n    Comment:    \"\",\n    Rev:        \"5d0a0f8cd486626821d2ba44d471ab1c9271d38f\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/golang.org/x/net\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://gopkg.in/bsm/ratelimit.v1\",\n    Root: \"gopkg.in/bsm/ratelimit.v1\",\n}\ndep &main.Dependency{\n    ImportPath: \"gopkg.in/bsm/ratelimit.v1\",\n    Comment:    \"\",\n    Rev:        \"f14ad9c78b155f69b480cfa41cb655259baac260\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/gopkg.in/bsm/ratelimit.v1\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://gopkg.in/mgo.v2\",\n    Root: \"gopkg.in/mgo.v2\",\n}\ndep &main.Dependency{\n    ImportPath: \"gopkg.in/mgo.v2\",\n    Comment:    \"r2015.12.06\",\n    Rev:        \"e30de8ac9ae3b30df7065f766c71f88bba7d4e49\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/gopkg.in/mgo.v2\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://gopkg.in/mgo.v2\",\n    Root: \"gopkg.in/mgo.v2\",\n}\ndep &main.Dependency{\n    ImportPath: \"gopkg.in/mgo.v2/bson\",\n    Comment:    \"r2015.12.06\",\n    Rev:        \"e30de8ac9ae3b30df7065f766c71f88bba7d4e49\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/gopkg.in/mgo.v2\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://gopkg.in/mgo.v2\",\n    Root: \"gopkg.in/mgo.v2\",\n}\ndep &main.Dependency{\n    ImportPath: \"gopkg.in/mgo.v2/internal/sasl\",\n    Comment:    \"r2015.12.06\",\n    Rev:        \"e30de8ac9ae3b30df7065f766c71f88bba7d4e49\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/gopkg.in/mgo.v2\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://gopkg.in/mgo.v2\",\n    Root: \"gopkg.in/mgo.v2\",\n}\ndep &main.Dependency{\n    ImportPath: \"gopkg.in/mgo.v2/internal/scram\",\n    Comment:    \"r2015.12.06\",\n    Rev:        \"e30de8ac9ae3b30df7065f766c71f88bba7d4e49\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/gopkg.in/mgo.v2\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://gopkg.in/redis.v4\",\n    Root: \"gopkg.in/redis.v4\",\n}\ndep &main.Dependency{\n    ImportPath: \"gopkg.in/redis.v4\",\n    Comment:    \"v4.0.2\",\n    Rev:        \"eca5d02f24a99706525f77f544deee8e7894f26c\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/gopkg.in/redis.v4\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://gopkg.in/redis.v4\",\n    Root: \"gopkg.in/redis.v4\",\n}\ndep &main.Dependency{\n    ImportPath: \"gopkg.in/redis.v4/internal\",\n    Comment:    \"v4.0.2\",\n    Rev:        \"eca5d02f24a99706525f77f544deee8e7894f26c\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/gopkg.in/redis.v4\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://gopkg.in/redis.v4\",\n    Root: \"gopkg.in/redis.v4\",\n}\ndep &main.Dependency{\n    ImportPath: \"gopkg.in/redis.v4/internal/consistenthash\",\n    Comment:    \"v4.0.2\",\n    Rev:        \"eca5d02f24a99706525f77f544deee8e7894f26c\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/gopkg.in/redis.v4\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://gopkg.in/redis.v4\",\n    Root: \"gopkg.in/redis.v4\",\n}\ndep &main.Dependency{\n    ImportPath: \"gopkg.in/redis.v4/internal/errors\",\n    Comment:    \"v4.0.2\",\n    Rev:        \"eca5d02f24a99706525f77f544deee8e7894f26c\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/gopkg.in/redis.v4\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://gopkg.in/redis.v4\",\n    Root: \"gopkg.in/redis.v4\",\n}\ndep &main.Dependency{\n    ImportPath: \"gopkg.in/redis.v4/internal/hashtag\",\n    Comment:    \"v4.0.2\",\n    Rev:        \"eca5d02f24a99706525f77f544deee8e7894f26c\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/gopkg.in/redis.v4\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://gopkg.in/redis.v4\",\n    Root: \"gopkg.in/redis.v4\",\n}\ndep &main.Dependency{\n    ImportPath: \"gopkg.in/redis.v4/internal/pool\",\n    Comment:    \"v4.0.2\",\n    Rev:        \"eca5d02f24a99706525f77f544deee8e7894f26c\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/gopkg.in/redis.v4\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://gopkg.in/redis.v4\",\n    Root: \"gopkg.in/redis.v4\",\n}\ndep &main.Dependency{\n    ImportPath: \"gopkg.in/redis.v4/internal/proto\",\n    Comment:    \"v4.0.2\",\n    Rev:        \"eca5d02f24a99706525f77f544deee8e7894f26c\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/gopkg.in/redis.v4\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\n\n\n. That is the -d output when I run it locally (not on the Dockerfile)\n. Right on, man. Thank you for hunting that down, I appreciate it.\n. Ok - how I bypassed the problem is kind of nasty.\nFROM golang:1.5.2\nWORKDIR /go/src/bitbucket.org/frobl/user\nADD . /go/src/bitbucket.org/frobl/user\nADD keys/.gitconfig /root/.gitconfig\nADD keys/.netrc /root/.netrc\nENV GO15VENDOREXPERIMENT 1\nUpdate aptitude with new repo\nRUN apt-get update\nRUN apt-get install -y openssh-server\nCopy over private key, and set permissions\nADD keys/id_logging /id_logging\nRUN \\\n  chmod 600 /id_logging && \\\n  echo \"IdentityFile /id_logging\" >> /etc/ssh/ssh_config && \\\n  echo \"StrictHostKeyChecking no\" >> /etc/ssh/ssh_config\nRUN go get github.com/tools/godep\nRUN go get github.com/segmentio/go-loggly # Dependency from the logging app\nRUN go get bitbucket.org/frobl/logging # Use go get here\nRUN godep go install # godep go install will not force the VCS get that godep restore does\nCMD user\n. That's true, but what is it for then? I was thinking it was something akin to npm install :\\ \n. lol vendor rocks .. so hard.\nMy final Dockerfile -- Blows my mind.\nFROM golang:1.5.2\nWORKDIR /go/src/bitbucket.org/frobl/user\nADD . /go/src/bitbucket.org/frobl/user\nENV GO15VENDOREXPERIMENT 1\nRUN  go install\nCMD user\n. The .netrc method is working for me with go get, but not with godep restore. Any ideas? \n. This is in a docker image (so no cache is at hand). I'm able to go get the private repo but godep is not working, which blew my mind as well.\nRunning the restore with the -d command yields \"unable to determine root\" for the private repo, so none of the VCS setup is happening.\nFROM golang:1.5.2\nWORKDIR /go/src/bitbucket.org/XXX/user\nADD . /go/src/bitbucket.org/XXX/user\nADD keys/.gitconfig /root/.gitconfig\nADD keys/.netrc /root/.netrc\nENV GO15VENDOREXPERIMENT 1\nUpdate aptitude with new repo\nRUN apt-get update\nRUN apt-get install -y openssh-server\nCopy over private key, and set permissions\nADD keys/id_logging /id_logging\nRUN \\\n  chmod 600 /id_logging && \\\n  echo \"IdentityFile /id_logging\" >> /etc/ssh/ssh_config && \\\n  echo \"StrictHostKeyChecking no\" >> /etc/ssh/ssh_config\nRUN go get github.com/tools/godep\nRUN go get bitbucket.org/XXX/logging # <--- This works\nRUN godep restore # <-- This does not.\nRUN go get\nRUN go build\nRUN go install \nCMD user\n. \n\ngodep restore -d\n\nversionString() godep v74 (darwin/amd64/go1.5.2)\nmajorGoVersion go1.5\nVendorExperiment true\nsep /vendor/\nError determining repo root for bitbucket.org/XXX/logging\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://github.com/codegangsta/negroni\",\n    Root: \"github.com/codegangsta/negroni\",\n}\ndep &main.Dependency{\n    ImportPath: \"github.com/codegangsta/negroni\",\n    Comment:    \"v0.1-70-gc7477ad\",\n    Rev:        \"c7477ad8e330bef55bf1ebe300cf8aa67c492d1b\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/github.com/codegangsta/negroni\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://github.com/davecgh/go-spew\",\n    Root: \"github.com/davecgh/go-spew\",\n}\ndep &main.Dependency{\n    ImportPath: \"github.com/davecgh/go-spew/spew\",\n    Comment:    \"\",\n    Rev:        \"5215b55f46b2b919f50a1df0eaa5886afe4e3b3d\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/github.com/davecgh/go-spew\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://github.com/dgrijalva/jwt-go\",\n    Root: \"github.com/dgrijalva/jwt-go\",\n}\ndep &main.Dependency{\n    ImportPath: \"github.com/dgrijalva/jwt-go\",\n    Comment:    \"v2.4.0-2-g2240de7\",\n    Rev:        \"2240de772c17d0e303c9bbc04bca67ffdfef32c4\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/github.com/dgrijalva/jwt-go\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://github.com/google/go-querystring\",\n    Root: \"github.com/google/go-querystring\",\n}\ndep &main.Dependency{\n    ImportPath: \"github.com/google/go-querystring/query\",\n    Comment:    \"\",\n    Rev:        \"2a60fc2ba6c19de80291203597d752e9ba58e4c0\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/github.com/google/go-querystring\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://github.com/gorilla/context\",\n    Root: \"github.com/gorilla/context\",\n}\ndep &main.Dependency{\n    ImportPath: \"github.com/gorilla/context\",\n    Comment:    \"\",\n    Rev:        \"1c83b3eabd45b6d76072b66b746c20815fb2872d\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/github.com/gorilla/context\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://github.com/gorilla/mux\",\n    Root: \"github.com/gorilla/mux\",\n}\ndep &main.Dependency{\n    ImportPath: \"github.com/gorilla/mux\",\n    Comment:    \"\",\n    Rev:        \"9c068cf16d982f8bd444b8c352acbeec34c4fe5b\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/github.com/gorilla/mux\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://github.com/joho/godotenv\",\n    Root: \"github.com/joho/godotenv\",\n}\ndep &main.Dependency{\n    ImportPath: \"github.com/joho/godotenv\",\n    Comment:    \"v1-10-g4ed1339\",\n    Rev:        \"4ed13390c0acd2ff4e371e64d8b97c8954138243\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/github.com/joho/godotenv\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://github.com/joho/godotenv\",\n    Root: \"github.com/joho/godotenv\",\n}\ndep &main.Dependency{\n    ImportPath: \"github.com/joho/godotenv/autoload\",\n    Comment:    \"v1-10-g4ed1339\",\n    Rev:        \"4ed13390c0acd2ff4e371e64d8b97c8954138243\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/github.com/joho/godotenv\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://github.com/moul/http2curl\",\n    Root: \"github.com/moul/http2curl\",\n}\ndep &main.Dependency{\n    ImportPath: \"github.com/moul/http2curl\",\n    Comment:    \"\",\n    Rev:        \"1c29be06762e43e04dd954a01c66991104ce4374\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/github.com/moul/http2curl\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://github.com/mrjones/oauth\",\n    Root: \"github.com/mrjones/oauth\",\n}\ndep &main.Dependency{\n    ImportPath: \"github.com/mrjones/oauth\",\n    Comment:    \"\",\n    Rev:        \"fdd43ab9ffd4adbedbecf59a0ec6a7e0d3ef3970\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/github.com/mrjones/oauth\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://github.com/parnurzeal/gorequest\",\n    Root: \"github.com/parnurzeal/gorequest\",\n}\ndep &main.Dependency{\n    ImportPath: \"github.com/parnurzeal/gorequest\",\n    Comment:    \"v0.2.13-7-g27bfb0d\",\n    Rev:        \"27bfb0dcbcc020d11b7839af416fb8dafc2ab01c\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/github.com/parnurzeal/gorequest\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://github.com/pmezard/go-difflib\",\n    Root: \"github.com/pmezard/go-difflib\",\n}\ndep &main.Dependency{\n    ImportPath: \"github.com/pmezard/go-difflib/difflib\",\n    Comment:    \"\",\n    Rev:        \"792786c7400a136282c1664665ae0a8db921c6c2\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/github.com/pmezard/go-difflib\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://github.com/segmentio/go-loggly\",\n    Root: \"github.com/segmentio/go-loggly\",\n}\ndep &main.Dependency{\n    ImportPath: \"github.com/segmentio/go-loggly\",\n    Comment:    \"v0.4.3-4-ge78f697\",\n    Rev:        \"e78f6971ebca5835614673e2f5f6a47ca5f13501\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/github.com/segmentio/go-loggly\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://github.com/stretchr/testify\",\n    Root: \"github.com/stretchr/testify\",\n}\ndep &main.Dependency{\n    ImportPath: \"github.com/stretchr/testify/assert\",\n    Comment:    \"v1.1.3-19-gd77da35\",\n    Rev:        \"d77da356e56a7428ad25149ca77381849a6a5232\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/github.com/stretchr/testify\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://github.com/visionmedia/go-debug\",\n    Root: \"github.com/visionmedia/go-debug\",\n}\ndep &main.Dependency{\n    ImportPath: \"github.com/visionmedia/go-debug\",\n    Comment:    \"v2.0.0\",\n    Rev:        \"ff4a55a20a86994118644bbddc6a216da193cc13\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/github.com/visionmedia/go-debug\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://go.googlesource.com/crypto\",\n    Root: \"golang.org/x/crypto\",\n}\ndep &main.Dependency{\n    ImportPath: \"golang.org/x/crypto/bcrypt\",\n    Comment:    \"\",\n    Rev:        \"f18420efc3b4f8e9f3d51f6bd2476e92c46260e9\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/golang.org/x/crypto\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://go.googlesource.com/crypto\",\n    Root: \"golang.org/x/crypto\",\n}\ndep &main.Dependency{\n    ImportPath: \"golang.org/x/crypto/blowfish\",\n    Comment:    \"\",\n    Rev:        \"f18420efc3b4f8e9f3d51f6bd2476e92c46260e9\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/golang.org/x/crypto\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://go.googlesource.com/crypto\",\n    Root: \"golang.org/x/crypto\",\n}\ndep &main.Dependency{\n    ImportPath: \"golang.org/x/crypto/pbkdf2\",\n    Comment:    \"\",\n    Rev:        \"f18420efc3b4f8e9f3d51f6bd2476e92c46260e9\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/golang.org/x/crypto\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://go.googlesource.com/net\",\n    Root: \"golang.org/x/net\",\n}\ndep &main.Dependency{\n    ImportPath: \"golang.org/x/net/publicsuffix\",\n    Comment:    \"\",\n    Rev:        \"5d0a0f8cd486626821d2ba44d471ab1c9271d38f\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/golang.org/x/net\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://gopkg.in/bsm/ratelimit.v1\",\n    Root: \"gopkg.in/bsm/ratelimit.v1\",\n}\ndep &main.Dependency{\n    ImportPath: \"gopkg.in/bsm/ratelimit.v1\",\n    Comment:    \"\",\n    Rev:        \"f14ad9c78b155f69b480cfa41cb655259baac260\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/gopkg.in/bsm/ratelimit.v1\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://gopkg.in/mgo.v2\",\n    Root: \"gopkg.in/mgo.v2\",\n}\ndep &main.Dependency{\n    ImportPath: \"gopkg.in/mgo.v2\",\n    Comment:    \"r2015.12.06\",\n    Rev:        \"e30de8ac9ae3b30df7065f766c71f88bba7d4e49\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/gopkg.in/mgo.v2\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://gopkg.in/mgo.v2\",\n    Root: \"gopkg.in/mgo.v2\",\n}\ndep &main.Dependency{\n    ImportPath: \"gopkg.in/mgo.v2/bson\",\n    Comment:    \"r2015.12.06\",\n    Rev:        \"e30de8ac9ae3b30df7065f766c71f88bba7d4e49\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/gopkg.in/mgo.v2\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://gopkg.in/mgo.v2\",\n    Root: \"gopkg.in/mgo.v2\",\n}\ndep &main.Dependency{\n    ImportPath: \"gopkg.in/mgo.v2/internal/sasl\",\n    Comment:    \"r2015.12.06\",\n    Rev:        \"e30de8ac9ae3b30df7065f766c71f88bba7d4e49\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/gopkg.in/mgo.v2\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://gopkg.in/mgo.v2\",\n    Root: \"gopkg.in/mgo.v2\",\n}\ndep &main.Dependency{\n    ImportPath: \"gopkg.in/mgo.v2/internal/scram\",\n    Comment:    \"r2015.12.06\",\n    Rev:        \"e30de8ac9ae3b30df7065f766c71f88bba7d4e49\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/gopkg.in/mgo.v2\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://gopkg.in/redis.v4\",\n    Root: \"gopkg.in/redis.v4\",\n}\ndep &main.Dependency{\n    ImportPath: \"gopkg.in/redis.v4\",\n    Comment:    \"v4.0.2\",\n    Rev:        \"eca5d02f24a99706525f77f544deee8e7894f26c\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/gopkg.in/redis.v4\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://gopkg.in/redis.v4\",\n    Root: \"gopkg.in/redis.v4\",\n}\ndep &main.Dependency{\n    ImportPath: \"gopkg.in/redis.v4/internal\",\n    Comment:    \"v4.0.2\",\n    Rev:        \"eca5d02f24a99706525f77f544deee8e7894f26c\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/gopkg.in/redis.v4\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://gopkg.in/redis.v4\",\n    Root: \"gopkg.in/redis.v4\",\n}\ndep &main.Dependency{\n    ImportPath: \"gopkg.in/redis.v4/internal/consistenthash\",\n    Comment:    \"v4.0.2\",\n    Rev:        \"eca5d02f24a99706525f77f544deee8e7894f26c\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/gopkg.in/redis.v4\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://gopkg.in/redis.v4\",\n    Root: \"gopkg.in/redis.v4\",\n}\ndep &main.Dependency{\n    ImportPath: \"gopkg.in/redis.v4/internal/errors\",\n    Comment:    \"v4.0.2\",\n    Rev:        \"eca5d02f24a99706525f77f544deee8e7894f26c\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/gopkg.in/redis.v4\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://gopkg.in/redis.v4\",\n    Root: \"gopkg.in/redis.v4\",\n}\ndep &main.Dependency{\n    ImportPath: \"gopkg.in/redis.v4/internal/hashtag\",\n    Comment:    \"v4.0.2\",\n    Rev:        \"eca5d02f24a99706525f77f544deee8e7894f26c\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/gopkg.in/redis.v4\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://gopkg.in/redis.v4\",\n    Root: \"gopkg.in/redis.v4\",\n}\ndep &main.Dependency{\n    ImportPath: \"gopkg.in/redis.v4/internal/pool\",\n    Comment:    \"v4.0.2\",\n    Rev:        \"eca5d02f24a99706525f77f544deee8e7894f26c\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/gopkg.in/redis.v4\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\nrr &vcs.RepoRoot{\n    VCS: &vcs.Cmd{\n        Name:        \"Git\",\n        Cmd:         \"git\",\n        CreateCmd:   \"clone {repo} {dir}\",\n        DownloadCmd: \"pull --ff-only\",\n        TagCmd:      {\n            {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n        },\n        TagLookupCmd: {\n            {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n        },\n        TagSyncCmd:     \"checkout {tag}\",\n        TagSyncDefault: \"checkout master\",\n        LogCmd:         \"\",\n        Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n        PingCmd:        \"ls-remote {scheme}://{repo}\",\n    },\n    Repo: \"https://gopkg.in/redis.v4\",\n    Root: \"gopkg.in/redis.v4\",\n}\ndep &main.Dependency{\n    ImportPath: \"gopkg.in/redis.v4/internal/proto\",\n    Comment:    \"v4.0.2\",\n    Rev:        \"eca5d02f24a99706525f77f544deee8e7894f26c\",\n    ws:         \"\",\n    root:       \"/Users/michael/code/go/src/gopkg.in/redis.v4\",\n    dir:        \"\",\n    matched:    false,\n    pkg:        (*main.Package)(nil),\n    missing:    false,\n    vcs:        &main.VCS{\n        vcs: &vcs.Cmd{\n            Name:        \"Git\",\n            Cmd:         \"git\",\n            CreateCmd:   \"clone {repo} {dir}\",\n            DownloadCmd: \"pull --ff-only\",\n            TagCmd:      {\n                {Cmd:\"show-ref\", Pattern:\"(?:tags|origin)/(\\\\S+)$\"},\n            },\n            TagLookupCmd: {\n                {Cmd:\"show-ref tags/{tag} origin/{tag}\", Pattern:\"((?:tags|origin)/\\\\S+)$\"},\n            },\n            TagSyncCmd:     \"checkout {tag}\",\n            TagSyncDefault: \"checkout master\",\n            LogCmd:         \"\",\n            Scheme:         {\"git\", \"https\", \"http\", \"git+ssh\"},\n            PingCmd:        \"ls-remote {scheme}://{repo}\",\n        },\n        IdentifyCmd: \"rev-parse HEAD\",\n        DescribeCmd: \"describe --tags\",\n        DiffCmd:     \"diff {rev}\",\n        ListCmd:     \"ls-files --full-name\",\n        RootCmd:     \"rev-parse --show-cdup\",\n        ExistsCmd:   \"cat-file -e {rev}\",\n    },\n}\nNothing to download\n\n\n. That is the -d output when I run it locally (not on the Dockerfile)\n. Right on, man. Thank you for hunting that down, I appreciate it.\n. Ok - how I bypassed the problem is kind of nasty.\nFROM golang:1.5.2\nWORKDIR /go/src/bitbucket.org/frobl/user\nADD . /go/src/bitbucket.org/frobl/user\nADD keys/.gitconfig /root/.gitconfig\nADD keys/.netrc /root/.netrc\nENV GO15VENDOREXPERIMENT 1\nUpdate aptitude with new repo\nRUN apt-get update\nRUN apt-get install -y openssh-server\nCopy over private key, and set permissions\nADD keys/id_logging /id_logging\nRUN \\\n  chmod 600 /id_logging && \\\n  echo \"IdentityFile /id_logging\" >> /etc/ssh/ssh_config && \\\n  echo \"StrictHostKeyChecking no\" >> /etc/ssh/ssh_config\nRUN go get github.com/tools/godep\nRUN go get github.com/segmentio/go-loggly # Dependency from the logging app\nRUN go get bitbucket.org/frobl/logging # Use go get here\nRUN godep go install # godep go install will not force the VCS get that godep restore does\nCMD user\n. That's true, but what is it for then? I was thinking it was something akin to npm install :\\ \n. lol vendor rocks .. so hard.\nMy final Dockerfile -- Blows my mind.\nFROM golang:1.5.2\nWORKDIR /go/src/bitbucket.org/frobl/user\nADD . /go/src/bitbucket.org/frobl/user\nENV GO15VENDOREXPERIMENT 1\nRUN  go install\nCMD user\n. ",
    "nf": "I have another case to support this: I have files that use // +build cgo to enable features on systems where C compilers are present, and // +build !cgo to stub out the functionality when it's not present. It feels like godep\u00a0should at least use the same set of basic tags as the go command.\n. Oh; it does. It was user error on my part.\n. I have another case to support this: I have files that use // +build cgo to enable features on systems where C compilers are present, and // +build !cgo to stub out the functionality when it's not present. It feels like godep\u00a0should at least use the same set of basic tags as the go command.\n. Oh; it does. It was user error on my part.\n. ",
    "jnfeinstein": "Was this added or is there a workaround?  I'm in need of this for Heroku as well.\n. I attempted to add this in #117.\n. @kr: I'm guessing that you run this show!  Any way that I can get feedback on this?\n. @freeformz, the branch is rebased.  The only conflict was in the usage blurb.\n. Was this added or is there a workaround?  I'm in need of this for Heroku as well.\n. I attempted to add this in #117.\n. @kr: I'm guessing that you run this show!  Any way that I can get feedback on this?\n. @freeformz, the branch is rebased.  The only conflict was in the usage blurb.\n. ",
    "cpmech": "Hi, I'm just wondering if there are any updates on this? Cheers. D\n. Hi, I'm just wondering if there are any updates on this? Cheers. D\n. ",
    "maxekman": "+1 for this. We would like to use it for including mocks only in the test run and not final build.\n. Will this be merged? I just added tag based configuration for the storage of my CQRS library https://github.com/looplab/eventhorizon, without the proper tag on godep save the dependencies for the specified storage backend are missing.\n. +1 for this. We would like to use it for including mocks only in the test run and not final build.\n. Will this be merged? I just added tag based configuration for the storage of my CQRS library https://github.com/looplab/eventhorizon, without the proper tag on godep save the dependencies for the specified storage backend are missing.\n. ",
    "phemmer": "\nFor your particular case, is there a reason you can't put the import in a regular source file, without any build constraints?\n\nYou could do this, but in the case of goose, it pulls in a lot of deps that take a while to build. Thus when developing locally, go test takes quite some time to build things it doesn't need.\nAs another proposal, I think it would be nice for godep to automatically add a godep tag on all operations it performs (go list). This would allow creating dummy files with the godep tag so that additional packages (which aren't build or test deps) are vendored, and won't require passing the -tags flag all the time.\n. You don't have that option if you're using git (or likely any type of version control). If you're using git, jenkins expects the repo to be in a certain location.\nYes you do have the ability to run commands, so you could manually create this symlink as part of the jenkins build process, but it just feels like something godep should do, not jenkins.\n. @vdemario if you move the repo, many operations break. jenkins has the ability to make commits, and push to the remote repo. if you move the repo, this functionality breaks.\n. I would find this useful as well, but a way to make your example safer would be:\n$ GOPATH=`godep path`:$GOPATH oracle -mode=implements .\nThen GOPATH will only be set for that one command.\nI would argue that this would be made even safer by doing\n$ GOPATH=\"$(godep path)\" oracle -mode=implements\nThis will properly handle unusal characters in the path, and it won't use deps outside of Godeps/ (in case you forgot to add a new dependency to godeps).\n. I do think this is a dup of #161 \nJust throwing in a comment so github links the 2 issues together.\n. > For your particular case, is there a reason you can't put the import in a regular source file, without any build constraints?\nYou could do this, but in the case of goose, it pulls in a lot of deps that take a while to build. Thus when developing locally, go test takes quite some time to build things it doesn't need.\nAs another proposal, I think it would be nice for godep to automatically add a godep tag on all operations it performs (go list). This would allow creating dummy files with the godep tag so that additional packages (which aren't build or test deps) are vendored, and won't require passing the -tags flag all the time.\n. You don't have that option if you're using git (or likely any type of version control). If you're using git, jenkins expects the repo to be in a certain location.\nYes you do have the ability to run commands, so you could manually create this symlink as part of the jenkins build process, but it just feels like something godep should do, not jenkins.\n. @vdemario if you move the repo, many operations break. jenkins has the ability to make commits, and push to the remote repo. if you move the repo, this functionality breaks.\n. I would find this useful as well, but a way to make your example safer would be:\n$ GOPATH=`godep path`:$GOPATH oracle -mode=implements .\nThen GOPATH will only be set for that one command.\nI would argue that this would be made even safer by doing\n$ GOPATH=\"$(godep path)\" oracle -mode=implements\nThis will properly handle unusal characters in the path, and it won't use deps outside of Godeps/ (in case you forgot to add a new dependency to godeps).\n. I do think this is a dup of #161 \nJust throwing in a comment so github links the 2 issues together.\n. ",
    "acasajus": ":+1: Same here\n. :+1: Same here\n. ",
    "sanbornm": ":thumbsup: I am also seeing this.\n. :thumbsup: I am also seeing this.\n. ",
    "mbforbes": ":thumbsup: Same problem here\n. :thumbsup: Same problem here\n. ",
    "pbdeuchler": ":+1: same problem here\n. Fixed! Thanks!\n. :+1: same problem here\n. Fixed! Thanks!\n. ",
    "schickling": "+1 having this problem on Travis\n. +1\n. +1 having this problem on Travis\n. +1\n. ",
    "morpheyesh": "same here...solution?\n. same here...solution?\n. ",
    "nathanjordan": "Also having this problem, haven't had much luck resolving the underlying issue, but switching the revisions to master instead of the sha at least let the command succeed.\n. Also having this problem, haven't had much luck resolving the underlying issue, but switching the revisions to master instead of the sha at least let the command succeed.\n. ",
    "danielalves": "For those having this problem on Travis, a workaround that worked for me was to follow Travis notes on godep and not calling godep restore before tests. This will not be a problem since GOPATH will be prefixed with ${TRAVIS_BUILD_DIR}/Godeps/_workspace. But, for this to work, you must be versioning your vendor code (the _workspace dir) in your project, which is a Godep recommendation anyway. Hope it helps.\n. For those having this problem on Travis, a workaround that worked for me was to follow Travis notes on godep and not calling godep restore before tests. This will not be a problem since GOPATH will be prefixed with ${TRAVIS_BUILD_DIR}/Godeps/_workspace. But, for this to work, you must be versioning your vendor code (the _workspace dir) in your project, which is a Godep recommendation anyway. Hope it helps.\n. ",
    "pdxjohnny": ":thumbsup: Same problem here\nAlso with github repos\n``` bash\ncd /home/john/Documents/go/src/github.com/authit/crypto/Godeps/_workspace/src/github.com/spf13/cobra; git checkout e4993076d845b7127c760e2e57a4984c166c6c05\nfatal: reference is not a tree: e4993076d845b7127c760e2e57a4984c166c6c05\ngodep: restore: exit status 128\n```\n. :thumbsup: Same problem here\nAlso with github repos\n``` bash\ncd /home/john/Documents/go/src/github.com/authit/crypto/Godeps/_workspace/src/github.com/spf13/cobra; git checkout e4993076d845b7127c760e2e57a4984c166c6c05\nfatal: reference is not a tree: e4993076d845b7127c760e2e57a4984c166c6c05\ngodep: restore: exit status 128\n```\n. ",
    "oxtoacart": "Just ran into this myself using Heroku\n. Just ran into this myself using Heroku\n. ",
    "aresetian": "The problem was that my version control system was no at the same level of main.go. In other word, on the root of the repository should be the file that is going to execute the function main.\n$GOPATH / bin\n--------------------/ godep\n-------------/ pkg\n-------------/ src \n--------------------/ github.com / aresetian / server /\n--------------------------------------------------------------/ .git\n--------------------------------------------------------------/ main.go\n. I had updated my version of  godep, but  (godep save -  godep save ... - godep save ./... - godep save . ) does not include dependency test - In my case  I need to include github.com/stretchr/testify/assert-. I believe that the solution that @sethgrid shows us work, but this isn't the solution I was waiting, In my humble opinion godep should include dependencies test.\n. The problem was that my version control system was no at the same level of main.go. In other word, on the root of the repository should be the file that is going to execute the function main.\n$GOPATH / bin\n--------------------/ godep\n-------------/ pkg\n-------------/ src \n--------------------/ github.com / aresetian / server /\n--------------------------------------------------------------/ .git\n--------------------------------------------------------------/ main.go\n. I had updated my version of  godep, but  (godep save -  godep save ... - godep save ./... - godep save . ) does not include dependency test - In my case  I need to include github.com/stretchr/testify/assert-. I believe that the solution that @sethgrid shows us work, but this isn't the solution I was waiting, In my humble opinion godep should include dependencies test.\n. ",
    "codedance": "I hit the same issue.  I created a simple project to test out godep, and had not yet under version control.  I error message was not all that helpful.\nIt would be great if godep could raise an informative message.\n. I hit the same issue.  I created a simple project to test out godep, and had not yet under version control.  I error message was not all that helpful.\nIt would be great if godep could raise an informative message.\n. ",
    "TannerMoore": "Since this is still open, I thought I would explain how I fixed this issue.  For me it was because I had various test programs sitting in my $GOPATH/src folder. The error message was saying the whole src folder didn't have a known version control system, but what it meant was there were some projects within that folder that weren't being tracked by github. I pulled them out briefly (they were only there to test the socket communication of the projects I actually cared about) and was able to successfully run\ngodep save -r ./...\n. Since this is still open, I thought I would explain how I fixed this issue.  For me it was because I had various test programs sitting in my $GOPATH/src folder. The error message was saying the whole src folder didn't have a known version control system, but what it meant was there were some projects within that folder that weren't being tracked by github. I pulled them out briefly (they were only there to test the socket communication of the projects I actually cared about) and was able to successfully run\ngodep save -r ./...\n. Since this is still open, I thought I would explain how I fixed this issue.  For me it was because I had various test programs sitting in my $GOPATH/src folder. The error message was saying the whole src folder didn't have a known version control system, but what it meant was there were some projects within that folder that weren't being tracked by github. I pulled them out briefly (they were only there to test the socket communication of the projects I actually cared about) and was able to successfully run\ngodep save -r ./...\n. Since this is still open, I thought I would explain how I fixed this issue.  For me it was because I had various test programs sitting in my $GOPATH/src folder. The error message was saying the whole src folder didn't have a known version control system, but what it meant was there were some projects within that folder that weren't being tracked by github. I pulled them out briefly (they were only there to test the socket communication of the projects I actually cared about) and was able to successfully run\ngodep save -r ./...\n. ",
    "treeder": "Why does godep expect a version control system?\n. Funny this issue got commented on today, I just posted this: https://medium.com/iron-io-blog/how-to-vendor-golang-dependencies-with-docker-no-git-gopath-or-godep-required-537c00da0176\n. Why does godep expect a version control system?\n. Funny this issue got commented on today, I just posted this: https://medium.com/iron-io-blog/how-to-vendor-golang-dependencies-with-docker-no-git-gopath-or-godep-required-537c00da0176\n. ",
    "l3x": "This is a bug with godep.\nThis was my scenario and how I fixed it:\nI was creating a new project (projectX) for my company, which did not yet have a git repo.\nNote that the repo will be at github.com/company/projectX\nMy local dev workspace looks like this:\nbash\n~/dev/go/company/src/github.com/company/projectX\nThis is what happened originally:\nbash\ngodep save\ngodep: directory \"/Users/lex/dev/go/company/src\" is not using a known version control system\ngodep: error loading packages\nThis is all I had to do to fix it:\nbash\ncd ~/dev/go/company/src/github.com\ngit init\ngit commit\n(Probably didn't need to run git commit)\nSeems odd that I had a number of other projects, with godep working fine, in the ~/dev/go/company/src/github.com/company (ex: ~/dev/go/company/src/github.com/company/projectA, ~/dev/go/company/src/github.com/company/projectB, etc.)  prior to encountering and fixing this godep issue.\n. This is a bug with godep.\nThis was my scenario and how I fixed it:\nI was creating a new project (projectX) for my company, which did not yet have a git repo.\nNote that the repo will be at github.com/company/projectX\nMy local dev workspace looks like this:\nbash\n~/dev/go/company/src/github.com/company/projectX\nThis is what happened originally:\nbash\ngodep save\ngodep: directory \"/Users/lex/dev/go/company/src\" is not using a known version control system\ngodep: error loading packages\nThis is all I had to do to fix it:\nbash\ncd ~/dev/go/company/src/github.com\ngit init\ngit commit\n(Probably didn't need to run git commit)\nSeems odd that I had a number of other projects, with godep working fine, in the ~/dev/go/company/src/github.com/company (ex: ~/dev/go/company/src/github.com/company/projectA, ~/dev/go/company/src/github.com/company/projectB, etc.)  prior to encountering and fixing this godep issue.\n. ",
    "danqing": "I agree that\ngodep: directory \"/Users/danqing/go/src\" is not using a known version control system\nis not the clearest error message in the world. It's suggesting that the entire src folder needs to be a git repo, whereas the issue is actually (usually) that the project itself (go/src/github.com/danqing/project) is not a git repo.\n(The above is given that the dependencies themselves are installed via go get, which automatically put them under git.)\n. I agree that\ngodep: directory \"/Users/danqing/go/src\" is not using a known version control system\nis not the clearest error message in the world. It's suggesting that the entire src folder needs to be a git repo, whereas the issue is actually (usually) that the project itself (go/src/github.com/danqing/project) is not a git repo.\n(The above is given that the dependencies themselves are installed via go get, which automatically put them under git.)\n. ",
    "osiloke": "I just updated godep to e28aafa1c4a9ab9108ae98211f12bbcc43e24510. This seems to spit out more useful information that actually tells you what repo isn't using a vcs.\n. I just updated godep to e28aafa1c4a9ab9108ae98211f12bbcc43e24510. This seems to spit out more useful information that actually tells you what repo isn't using a vcs.\n. I just updated godep to e28aafa1c4a9ab9108ae98211f12bbcc43e24510. This seems to spit out more useful information that actually tells you what repo isn't using a vcs.\n. I just updated godep to e28aafa1c4a9ab9108ae98211f12bbcc43e24510. This seems to spit out more useful information that actually tells you what repo isn't using a vcs.\n. ",
    "bsed": "I just updated godep \n. I just updated godep \n. ",
    "gngeorgiev": "I still do not know why godep needs source control so badly?\n. Yeah, I did a git init, this is not a problem. I am just curious why godep would assume this.\n. @viktorasm in this case isn't it best if the inner repos are actual git repositories which are submodules of the main repo?\n. I still do not know why godep needs source control so badly?\n. Yeah, I did a git init, this is not a problem. I am just curious why godep would assume this.\n. @viktorasm in this case isn't it best if the inner repos are actual git repositories which are submodules of the main repo?\n. ",
    "viktorasm": "I'm also interested in this error message. Why should Godep care at  all if I'm using VCS? While I'm using git, apparently it's not at the level godep expects it to be. my layout is:\n/.git\n/other-stuff1\n/python-service1\n/python-service2\n/java-service1\n/node-service1\n/go-services/src/project.com/Godeps/...\n/go-services/src/project.com/service1\n/go-services/src/project.com/service2\nI understand that it's not very conventional layout, but I really want the whole project, which is composed of a set of microservices, to be in one repository - trying to keep personal github account down to 5 private repos.\n. @gngeorgiev I really want to have one repo for the whole project. I would expect it should be up for me to decide how I want to organize the repository. My point is - why does Godep cares if I actually version-control the whole thing? What if I would be using a very unconventional VCS?.. I understand it's probably a \"convention-over-configuration\" thing, but missing the 'configuration\" bit here, that is, telling Godep that my repo root is elsewhere.\n. I'm also interested in this error message. Why should Godep care at  all if I'm using VCS? While I'm using git, apparently it's not at the level godep expects it to be. my layout is:\n/.git\n/other-stuff1\n/python-service1\n/python-service2\n/java-service1\n/node-service1\n/go-services/src/project.com/Godeps/...\n/go-services/src/project.com/service1\n/go-services/src/project.com/service2\nI understand that it's not very conventional layout, but I really want the whole project, which is composed of a set of microservices, to be in one repository - trying to keep personal github account down to 5 private repos.\n. @gngeorgiev I really want to have one repo for the whole project. I would expect it should be up for me to decide how I want to organize the repository. My point is - why does Godep cares if I actually version-control the whole thing? What if I would be using a very unconventional VCS?.. I understand it's probably a \"convention-over-configuration\" thing, but missing the 'configuration\" bit here, that is, telling Godep that my repo root is elsewhere.\n. ",
    "tchap": "Hit the same issue. Scenario:\nGOPATH set to a Go workspace. There is $WORKSPACE/src/modules/pkg and when I run godep save modules/pkg, it tells me that $WORKSPACE/src is not under any known version control system. BTW ../$WORKSPACE is a root of a Git repo, so it's not true on top of it...\n. @freeformz Looks like it's v2 and it's doing the same thing after update.\n. @freeformz Here it is. The directory mentioned as blablabla is the root of a git repo. I am trying to save deps for a package that is placed in blablabla/workspace/src/modules/jira.\nbash\n$ GOPATH=\"$(pwd)/workspace:$GOPATH\" godep save modules/jira\ngodep: directory \"blablabla/workspace/src\" is not using a known version control system\ngodep: error loading packages\n. Hit the same issue. Scenario:\nGOPATH set to a Go workspace. There is $WORKSPACE/src/modules/pkg and when I run godep save modules/pkg, it tells me that $WORKSPACE/src is not under any known version control system. BTW ../$WORKSPACE is a root of a Git repo, so it's not true on top of it...\n. @freeformz Looks like it's v2 and it's doing the same thing after update.\n. @freeformz Here it is. The directory mentioned as blablabla is the root of a git repo. I am trying to save deps for a package that is placed in blablabla/workspace/src/modules/jira.\nbash\n$ GOPATH=\"$(pwd)/workspace:$GOPATH\" godep save modules/jira\ngodep: directory \"blablabla/workspace/src\" is not using a known version control system\ngodep: error loading packages\n. ",
    "phoet": "i'm running into the same issue with godep: directory \"/Users/peter/go/src\" is not using a known version control system.\nreading the comments, i thought that there should have been an improved error-message? so i assumed that i have an old version of godep, but unfortunately there is no godep --version to find out. looking into the src it says const version = 12 in version.go. which looks like it's latest.\nmy issue here is that i have a project in version-control, that holds multiple language directories and i just symlinked the go folder to be within the GOPATH. because of that it does not contain any .git directory. i could use submodules for this purpose, but i feel like it's kind of overkill for 2 or 3 files...\n. i'm running into the same issue with godep: directory \"/Users/peter/go/src\" is not using a known version control system.\nreading the comments, i thought that there should have been an improved error-message? so i assumed that i have an old version of godep, but unfortunately there is no godep --version to find out. looking into the src it says const version = 12 in version.go. which looks like it's latest.\nmy issue here is that i have a project in version-control, that holds multiple language directories and i just symlinked the go folder to be within the GOPATH. because of that it does not contain any .git directory. i could use submodules for this purpose, but i feel like it's kind of overkill for 2 or 3 files...\n. ",
    "jessegreathouse": "I think it's not helpful how opinionated this tool is. This is not a shot against the designers or the people who have worked hard on this project, but a of criticism of the behavior of this tool. The concept of \"best\" is not relevant at all -- it hinges on the false-presupposition that every project of every team is motivated by the same values. If go can compile the program, then the dependency manager should be able to track the dependencies of that program. Full stop.\n. I think it's not helpful how opinionated this tool is. This is not a shot against the designers or the people who have worked hard on this project, but a of criticism of the behavior of this tool. The concept of \"best\" is not relevant at all -- it hinges on the false-presupposition that every project of every team is motivated by the same values. If go can compile the program, then the dependency manager should be able to track the dependencies of that program. Full stop.\n. ",
    "boynux": "Same here! Would be great to add a feature to skip these kind of checks. @l3x suggestion did work, but it's a bit ugly!. Same here! Would be great to add a feature to skip these kind of checks. @l3x suggestion did work, but it's a bit ugly!. ",
    "jszwedko": "Correct, and that is currently what we are doing, but that basically means we need to manage the dependency outside of godep (i.e. we have a fork that we clone down manually into the original import path and checkout the expected revision as a target in a Makefile). We can continue doing this, but it would be nice to have this ability in godep as well, in my opinion, to centralize that operation rather than managing dependencies two different ways.\nI understand if you do not want this to be part of godep, but I just wanted to explain the \"problem\" that we've encountered and discuss the possible solution of including this functionality in godep to address this.\nAnother alternative is vendoring the dependency, but we'd also like to tend to fall on the \"don't vendor\" side of that argument in most cases.\n. Makes sense, maybe we'll revisit the idea of vendoring. I appreciate the discussion!\n. Correct, and that is currently what we are doing, but that basically means we need to manage the dependency outside of godep (i.e. we have a fork that we clone down manually into the original import path and checkout the expected revision as a target in a Makefile). We can continue doing this, but it would be nice to have this ability in godep as well, in my opinion, to centralize that operation rather than managing dependencies two different ways.\nI understand if you do not want this to be part of godep, but I just wanted to explain the \"problem\" that we've encountered and discuss the possible solution of including this functionality in godep to address this.\nAnother alternative is vendoring the dependency, but we'd also like to tend to fall on the \"don't vendor\" side of that argument in most cases.\n. Makes sense, maybe we'll revisit the idea of vendoring. I appreciate the discussion!\n. ",
    "drewwells": "Should godep save automatically update dependencies? If godep save is the exact opposite of godep restore, I would expect save to update vendored packages from the newer ones in gopath. It appears only godep update ./... does this, or rm -rf Godeps; godep save ./...\n. Hmm, what error were you getting from git|othervcs?\nFor a git submodule error, I'm only getting exit status 1. While it lets me know which package is problematic, it's not detailed enough to know what happened. Here's the comparison with verbose. Maybe on errors, it should report stdout and stderr?\n-> % godep restore ./...\ngodep: restore, during download dep \"github.com/wellington/go-libsass\": exit status 1\nHere's the detailed error\n```\n output: github.com/wellington/go-libsass (download)\ncd .; git --git-dir=/Users/drew/src/github.com/wellington/go-libsass/.git submodule update --init --recursive\nNo submodule mapping found in .gitmodules for path 'libsass-src'\npackage github.com/wellington/go-libsass: exit status 1\n``\n. Shouldgodep saveautomatically update dependencies? Ifgodep saveis the exact opposite ofgodep restore, I would expect save to update vendored packages from the newer ones ingopath. It appears onlygodep update ./...does this, orrm -rf Godeps; godep save ./.... Hmm, what error were you getting fromgit|othervcs`?\nFor a git submodule error, I'm only getting exit status 1. While it lets me know which package is problematic, it's not detailed enough to know what happened. Here's the comparison with verbose. Maybe on errors, it should report stdout and stderr?\n-> % godep restore ./...\ngodep: restore, during download dep \"github.com/wellington/go-libsass\": exit status 1\nHere's the detailed error\n```\n output: github.com/wellington/go-libsass (download)\ncd .; git --git-dir=/Users/drew/src/github.com/wellington/go-libsass/.git submodule update --init --recursive\nNo submodule mapping found in .gitmodules for path 'libsass-src'\npackage github.com/wellington/go-libsass: exit status 1\n```\n. ",
    "venjiang": "support subversion,thks.\n. support subversion,thks.\n. ",
    "chai2010": "@kr when do we can use svn with godep? thanks.\n. @kr when do we can use svn with godep? thanks.\n. ",
    "dahankzter": "It would have to work transitively as well right? Rewrite imports for all reachable dependencies. \n. It would have to work transitively as well right? Rewrite imports for all reachable dependencies. \n. ",
    "rnapier": "Regarding Godep/_workspace/src, I'd recommend reducing it to _Godep. If you've rewritten the imports, then there's just one GOPATH and there's no need for an extra src directory anyway. Adding three levels (and one that's a pretty long word) to every import doesn't seem to bring much benefit.\n. FYI, just tried out the workflow suggested by @philips and it works, but it's just not clear what will happen the next time I upgrade with godep. I assume it'll quietly lose my changes (plus it's not clear how to keep track of what changes I've made). There are several problems with trying to patch the upstream and just revendoring. You may need to patch in your own product just to work out the solution (this is very common). You often need a fix faster than the upstream may accept your merge request. The upstream may never accept your merge request. The current scheme requires a bit of external bookkeeping that you hope all of your team remembers to keep up with.\nAt this point, my required changes have been small, the upstream has accepted them fairly quickly, and I am able to keep track of everything in my head. If I needed anything more complicated, I'd probably need to fork the dependency into my own \"vendor\" repo (separate from the consumer repo), maintain any changes there, and then vendor that into the product. Would probably work with some care. (Luckily I work very hard to keep the number of dependencies to an absolute minimum, so we can get away with a lot of options.)\n. I mean a fork in our own version control system, not GitHub. It can still have the same import path if done that way; it just wouldn't be go-gettable (similar to the issue of importing a branch). If I don't do that, then the commit registered in Godep doesn't exist anywhere but on my machine. The shame is that Godep doesn't help me keep track of where that commit might live if it's not yet available on the public repo. \n. That sounds like a good solution to the issue.\n. I get what you're saying about not forking so soon. My problem has been that I didn't have a godep -r solution yet. Without that, I don't have a good solution without maintaining a fork.\nThe problem was that if I make changes in my GOPATH, then I break the production build because it doesn't see my GOPATH. If I just modify Godeps/, it's very fragile because \"godep update\" will just blow away my changes (and it's very hard to keep track of what's changed and what's not). Also, I'm having a lot of trouble working godep's multi-directory GOPATH into the normal process for all the developers (including IDEs). That's why I'm very interested in godep -r; it should \"just work.\"\nBut you're right, with a godep -r, I shouldn't need to fork so early, which should make things easier, but there are still bumps. So then, maybe this:\n- go get X\n- godep save -r X (rewrites everything)\n- Hey, I need a change to X\n- godep restore -r X (rewrites everything to use the non-Godeps version; does it delete it out of Godeps?)\n- I work in the non-Godeps copy. I commit to my local version of the github repo (but this isn't shared by anyone else on my team). I can share that around to my other machines and get it working, though.\n- Now it works for me\n- godep save -r X (... this is a problem, though. I need to save my version, not the version at GitHub; this is where I had trouble before ...)\n- I push to my fork on GitHub. I open a pull request.\n- At some point the pull request is accepted\n- godep update ?\n. I think it is becoming clear. I missed the part that 'godep update X' doesn't have to make a new \"go get\" (obvious in retrospect). I need to think about how to document the changes I made so they're not lost track of, but there's a commit step after \"godep update\" so everything important is still in a central version control system. I'm in the middle of this exact problem; I'll try it out and see how it goes. Thanks; this is much clearer now.\n. I've been playing with ways to address this. It's possible to pass -tags to the \"go list\" command, so you could pass the tags \"darwin linux\". That works ok as long as nothing uses the ! syntax. So if you had a !linux, it would not include it even though you'd want it. That's causing me trouble on Windows because some things in the standard library are defined as !windows rather than an explicit list of everything else.\nThe other option is to run LoadPackages once for each desired tag and then merge the results. That's probably the way it needs to work, but the code is more complicated.\n. Regarding Godep/_workspace/src, I'd recommend reducing it to _Godep. If you've rewritten the imports, then there's just one GOPATH and there's no need for an extra src directory anyway. Adding three levels (and one that's a pretty long word) to every import doesn't seem to bring much benefit.\n. FYI, just tried out the workflow suggested by @philips and it works, but it's just not clear what will happen the next time I upgrade with godep. I assume it'll quietly lose my changes (plus it's not clear how to keep track of what changes I've made). There are several problems with trying to patch the upstream and just revendoring. You may need to patch in your own product just to work out the solution (this is very common). You often need a fix faster than the upstream may accept your merge request. The upstream may never accept your merge request. The current scheme requires a bit of external bookkeeping that you hope all of your team remembers to keep up with.\nAt this point, my required changes have been small, the upstream has accepted them fairly quickly, and I am able to keep track of everything in my head. If I needed anything more complicated, I'd probably need to fork the dependency into my own \"vendor\" repo (separate from the consumer repo), maintain any changes there, and then vendor that into the product. Would probably work with some care. (Luckily I work very hard to keep the number of dependencies to an absolute minimum, so we can get away with a lot of options.)\n. I mean a fork in our own version control system, not GitHub. It can still have the same import path if done that way; it just wouldn't be go-gettable (similar to the issue of importing a branch). If I don't do that, then the commit registered in Godep doesn't exist anywhere but on my machine. The shame is that Godep doesn't help me keep track of where that commit might live if it's not yet available on the public repo. \n. That sounds like a good solution to the issue.\n. I get what you're saying about not forking so soon. My problem has been that I didn't have a godep -r solution yet. Without that, I don't have a good solution without maintaining a fork.\nThe problem was that if I make changes in my GOPATH, then I break the production build because it doesn't see my GOPATH. If I just modify Godeps/, it's very fragile because \"godep update\" will just blow away my changes (and it's very hard to keep track of what's changed and what's not). Also, I'm having a lot of trouble working godep's multi-directory GOPATH into the normal process for all the developers (including IDEs). That's why I'm very interested in godep -r; it should \"just work.\"\nBut you're right, with a godep -r, I shouldn't need to fork so early, which should make things easier, but there are still bumps. So then, maybe this:\n- go get X\n- godep save -r X (rewrites everything)\n- Hey, I need a change to X\n- godep restore -r X (rewrites everything to use the non-Godeps version; does it delete it out of Godeps?)\n- I work in the non-Godeps copy. I commit to my local version of the github repo (but this isn't shared by anyone else on my team). I can share that around to my other machines and get it working, though.\n- Now it works for me\n- godep save -r X (... this is a problem, though. I need to save my version, not the version at GitHub; this is where I had trouble before ...)\n- I push to my fork on GitHub. I open a pull request.\n- At some point the pull request is accepted\n- godep update ?\n. I think it is becoming clear. I missed the part that 'godep update X' doesn't have to make a new \"go get\" (obvious in retrospect). I need to think about how to document the changes I made so they're not lost track of, but there's a commit step after \"godep update\" so everything important is still in a central version control system. I'm in the middle of this exact problem; I'll try it out and see how it goes. Thanks; this is much clearer now.\n. I've been playing with ways to address this. It's possible to pass -tags to the \"go list\" command, so you could pass the tags \"darwin linux\". That works ok as long as nothing uses the ! syntax. So if you had a !linux, it would not include it even though you'd want it. That's causing me trouble on Windows because some things in the standard library are defined as !windows rather than an explicit list of everything else.\nThe other option is to run LoadPackages once for each desired tag and then merge the results. That's probably the way it needs to work, but the code is more complicated.\n. ",
    "ngrilly": "I get the advantages of path rewriting but, according to your experience, what are the drawbacks? I'm being worried about path rewriting making difficult to contribute to an upstream dependency. What would be your workflow in such a case? Thanks!\n. @philips Thanks for sharing your workflow!\nI understand this is your workflow without path rewriting, correct?\nWhen using import path rewriting, as proposed in this issue, one extra operation is required to bring the import paths back to their original version before committing changes to upstream. I'm curious if someone has any experience with that?\n. @philips My mistake. You're right! It works because you format a patch containing your changes and apply it to upstream. As you wrote, patches rarely change import paths, which makes unnecessary to rewrite import path. So the problem of reverting import paths to their original form only occurs when a patch modifies them, and in this case it can be easily fixed by hand. Am I correctly understanding your workflow?\n. @nathany What would be the purpose of \"coming up with a tool under a new name\"?\n. I get the advantages of path rewriting but, according to your experience, what are the drawbacks? I'm being worried about path rewriting making difficult to contribute to an upstream dependency. What would be your workflow in such a case? Thanks!\n. @philips Thanks for sharing your workflow!\nI understand this is your workflow without path rewriting, correct?\nWhen using import path rewriting, as proposed in this issue, one extra operation is required to bring the import paths back to their original version before committing changes to upstream. I'm curious if someone has any experience with that?\n. @philips My mistake. You're right! It works because you format a patch containing your changes and apply it to upstream. As you wrote, patches rarely change import paths, which makes unnecessary to rewrite import path. So the problem of reverting import paths to their original form only occurs when a patch modifies them, and in this case it can be easily fixed by hand. Am I correctly understanding your workflow?\n. @nathany What would be the purpose of \"coming up with a tool under a new name\"?\n. ",
    "philips": "@ngrilly This is my rough workflow:\n```\ncd ${GOPATH}/src/goven/project\ngit format-patch -1 \nmv *.patch ${GOPATH}/src/upstream/project\ncd ${GOPATH}/src/upstream/project\ngit checkout -b 'myfix'\npatch -p5 < *.patch\ngit commit -m 'fixes stuff'\ngit push\n```\n. @ngrilly This is with path rewriting. The path rewriting is in a lower patch in git so very rarely shows up in the patch that I have for a bugfix.\n. @rnapier Yes, essentially dependency hell has been forced onto, us, the developers. At the very least it means the pain is mostly self contained :)\n. @kr Just tested it on a project and it works great!\nThe capitalized Godep isn't ideal; since it seems one way or another casing always ends up screwing naive developer tooling but I didn't encounter any problems with it.\n+1 LGTM.\n. cc @thockin. @ngrilly This is my rough workflow:\n```\ncd ${GOPATH}/src/goven/project\ngit format-patch -1 \nmv *.patch ${GOPATH}/src/upstream/project\ncd ${GOPATH}/src/upstream/project\ngit checkout -b 'myfix'\npatch -p5 < *.patch\ngit commit -m 'fixes stuff'\ngit push\n```\n. @ngrilly This is with path rewriting. The path rewriting is in a lower patch in git so very rarely shows up in the patch that I have for a bugfix.\n. @rnapier Yes, essentially dependency hell has been forced onto, us, the developers. At the very least it means the pain is mostly self contained :)\n. @kr Just tested it on a project and it works great!\nThe capitalized Godep isn't ideal; since it seems one way or another casing always ends up screwing naive developer tooling but I didn't encounter any problems with it.\n+1 LGTM.\n. cc @thockin. ",
    "insmo": "Was just about to file a bug report about the same issue. I created a small repository which demonstrates the issue; https://github.com/simonz05/save\n. I can't seem to confirm this. godep save ./... still creates a dependency on the package you are calling godep from. \n{\n    \"ImportPath\": \"github.com/simonz05/save\",\n    \"GoVersion\": \"go1.2.1\",\n    \"Packages\": [\n        \"./...\"\n    ],\n    \"Deps\": [\n        {\n            \"ImportPath\": \"github.com/simonz05/save\",\n            \"Rev\": \"dad654dcc15f5619b0e9d847a9a9d036fd320bb1\"\n        }\n    ]\n}\n. Fair enough. I read it as if you were reporting the same issue as me and didn't want to create a duplicate. Created #70 \n. Was just about to file a bug report about the same issue. I created a small repository which demonstrates the issue; https://github.com/simonz05/save\n. I can't seem to confirm this. godep save ./... still creates a dependency on the package you are calling godep from. \n{\n    \"ImportPath\": \"github.com/simonz05/save\",\n    \"GoVersion\": \"go1.2.1\",\n    \"Packages\": [\n        \"./...\"\n    ],\n    \"Deps\": [\n        {\n            \"ImportPath\": \"github.com/simonz05/save\",\n            \"Rev\": \"dad654dcc15f5619b0e9d847a9a9d036fd320bb1\"\n        }\n    ]\n}\n. Fair enough. I read it as if you were reporting the same issue as me and didn't want to create a duplicate. Created #70 \n. ",
    "kamal-github": "after godep save ./..., how to put build in vendor/ directory?. after godep save ./..., how to put build in vendor/ directory?. ",
    "fdr": "Relatedly, when working on a new subpackage (e.g. my breakout of hkclient from hk), Godep's attempt to download the sub-package from Github breaks it spuriously.\n. Like a boss. Testing your patch right now.\n. Works like a charm in the case I had.\n. Relatedly, when working on a new subpackage (e.g. my breakout of hkclient from hk), Godep's attempt to download the sub-package from Github breaks it spuriously.\n. Like a boss. Testing your patch right now.\n. Works like a charm in the case I had.\n. ",
    "chinamerp": "go list ./...\n_/vagrant/src/qs-host\n. @lox you can try \"godep save github.com/xyz/xyz\". it works for me.\nif the command \"godep save\" has no parameter it will set to \".\" \nthe command \"go list -e -json .\" will get wrong message likes \"/vagrant/src/qs-host\"\n. go list ./...\n/vagrant/src/qs-host\n. @lox you can try \"godep save github.com/xyz/xyz\". it works for me.\nif the command \"godep save\" has no parameter it will set to \".\" \nthe command \"go list -e -json .\" will get wrong message likes \"_/vagrant/src/qs-host\"\n. ",
    "pksunkara": "Having the same problem.\n. Having the same problem.\n. ",
    "autarch": "I'm doing some digging and I see that this comes from the vcs code - https://code.google.com/p/go/source/browse/go/vcs/vcs.go?repo=tools#339\nI'm pretty sure the fix needs to happen there too.\n. I'd also note that the output of go list -json varies depending on whether it's run from a dir under the GOPATH or not. If it's run in a dir outside the GOPATH, it does not include a \"Root\" key. This means that that \"Dir\" key will never be under the \"Root\" key, which is ultimately what causes vcs.FromDir to error out.\n. @kr - it's both, that's the problem the original user reported! The $GOPATH/src/github.com/xyz/xyz dir is a symlink to /Users/lachlan/Projects/xyz/xyz (I assume).\nFWIW, we decided to give up on godep and just manually copy external repos into our own internal git server for now.\nI'm not even sure how one would fix this particular problem. At some point you'd have to detect that the value of cwd wasn't under $GOPATH and then try to figure out what the corresponding symlink is. AFAICT, there's no API for going from \"dir\" to \"symlink that points to it\".\nAll that said, AFAICT, the go command itself seems to have no problem with this setup.\n. @kr - there are reasons one might want to do this. Unfortunately, the \"standard Go layout\" doesn't work out so well when you're trying to, for example, include a repo of go code as a submodule in some other non-Go repo.\n. Well, I'm getting closer to giving up on this but ...\nMost of our code at work is written in Perl, with some pieces where we want higher performance in Go. We already have an extensive test framework in Perl as well, including code for creating fixture databases on the fly. We'd like to reuse this code for writing tests in Go, rather than rewriting the entire fixture system (and maintaining two copies of it).\nAll of our main Perl code lives in a single repo, and our Go code is in another repo. I had hoped I could check out the Go code as a submodule in the main Perl repo and then add a symlink under the GOPATH to that checkout. However, this is not working very well.\nThe other alternative is to simply import all the Go code into the main Perl repo, then check that out under the GOPATH and adjust our Go code import paths to match this. It's a pain, but clearly fighting Go is a pain too.\n. > I'm still curious why you want it to be in a subdirectory in the first place (either via submodules or copying files).\nAs opposed to what? Sticking it in the top-level dir on a repo that already has a lot of other subdirs? It's not like we have any Perl code at the top of the repo either.\n. @lox - btw, to fix your problem all you need to do is reverse the direction of the symlink. Make /Users/lachlan/Projects/xyz/xyz a symlink to the directory under $GOPATH.\n. The main reason to put everything in one repo is to faciliate merging and deployment. We do all our dev work in branches, and then submit a PR for someone else to review and merge. It's a lot simpler to submit a single PR against one repo that encompasses all the work that needs review.\nThis all works fine right now since we have a small team where everyone can (at least in theory) work on any part of the code base. Eventually, if we grow large enough, I suspect we'll have multiple separate teams. At that point, I imagine we'd have one repo per team, and possibly additional repos of shared code.\n. Yes, I agree with closing it. We ended up going back to just doing things the Go way and using godep. It's mildly annoying to have to move my checkout around, but not a big deal. I just wrote a small script to help other developers move it.\nAlso, I'm working on some docs for internal use that I might publish. I think they might be useful for other people outside my company.\n. I'm doing some digging and I see that this comes from the vcs code - https://code.google.com/p/go/source/browse/go/vcs/vcs.go?repo=tools#339\nI'm pretty sure the fix needs to happen there too.\n. I'd also note that the output of go list -json varies depending on whether it's run from a dir under the GOPATH or not. If it's run in a dir outside the GOPATH, it does not include a \"Root\" key. This means that that \"Dir\" key will never be under the \"Root\" key, which is ultimately what causes vcs.FromDir to error out.\n. @kr - it's both, that's the problem the original user reported! The $GOPATH/src/github.com/xyz/xyz dir is a symlink to /Users/lachlan/Projects/xyz/xyz (I assume).\nFWIW, we decided to give up on godep and just manually copy external repos into our own internal git server for now.\nI'm not even sure how one would fix this particular problem. At some point you'd have to detect that the value of cwd wasn't under $GOPATH and then try to figure out what the corresponding symlink is. AFAICT, there's no API for going from \"dir\" to \"symlink that points to it\".\nAll that said, AFAICT, the go command itself seems to have no problem with this setup.\n. @kr - there are reasons one might want to do this. Unfortunately, the \"standard Go layout\" doesn't work out so well when you're trying to, for example, include a repo of go code as a submodule in some other non-Go repo.\n. Well, I'm getting closer to giving up on this but ...\nMost of our code at work is written in Perl, with some pieces where we want higher performance in Go. We already have an extensive test framework in Perl as well, including code for creating fixture databases on the fly. We'd like to reuse this code for writing tests in Go, rather than rewriting the entire fixture system (and maintaining two copies of it).\nAll of our main Perl code lives in a single repo, and our Go code is in another repo. I had hoped I could check out the Go code as a submodule in the main Perl repo and then add a symlink under the GOPATH to that checkout. However, this is not working very well.\nThe other alternative is to simply import all the Go code into the main Perl repo, then check that out under the GOPATH and adjust our Go code import paths to match this. It's a pain, but clearly fighting Go is a pain too.\n. > I'm still curious why you want it to be in a subdirectory in the first place (either via submodules or copying files).\nAs opposed to what? Sticking it in the top-level dir on a repo that already has a lot of other subdirs? It's not like we have any Perl code at the top of the repo either.\n. @lox - btw, to fix your problem all you need to do is reverse the direction of the symlink. Make /Users/lachlan/Projects/xyz/xyz a symlink to the directory under $GOPATH.\n. The main reason to put everything in one repo is to faciliate merging and deployment. We do all our dev work in branches, and then submit a PR for someone else to review and merge. It's a lot simpler to submit a single PR against one repo that encompasses all the work that needs review.\nThis all works fine right now since we have a small team where everyone can (at least in theory) work on any part of the code base. Eventually, if we grow large enough, I suspect we'll have multiple separate teams. At that point, I imagine we'd have one repo per team, and possibly additional repos of shared code.\n. Yes, I agree with closing it. We ended up going back to just doing things the Go way and using godep. It's mildly annoying to have to move my checkout around, but not a big deal. I just wrote a small script to help other developers move it.\nAlso, I'm working on some docs for internal use that I might publish. I think they might be useful for other people outside my company.\n. ",
    "lox": "Thanks for the comments all, I've since given up fighting \"the go way\" and embraced GOPATH.\n. That's the theory :) In practice lots of tools like goimports don't support\nvendor yet, so having godep path return the right thing means it's easier\nto write portable shellscript wrappers in the interim.\nOn Monday, October 5, 2015, Keith Rarick notifications@github.com wrote:\n\nIf you have GO15VENDOREXPERIMENT=1 in your environment, you don't need to\nuse godep path at all.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/288#issuecomment-145423057.\n. Thanks for the comments all, I've since given up fighting \"the go way\" and embraced GOPATH.\n. That's the theory :) In practice lots of tools like goimports don't support\nvendor yet, so having godep path return the right thing means it's easier\nto write portable shellscript wrappers in the interim.\n\nOn Monday, October 5, 2015, Keith Rarick notifications@github.com wrote:\n\nIf you have GO15VENDOREXPERIMENT=1 in your environment, you don't need to\nuse godep path at all.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/288#issuecomment-145423057.\n. \n",
    "intabulas": "I know this issue is closed, but I have also seen this exact error if there is a case sensative typo in GOPATH.. If for example in disk (OSX) is /Users//projects/gospace (note lowercase p) then the outside of root error appears on a godep save\n. I know this issue is closed, but I have also seen this exact error if there is a case sensative typo in GOPATH.. If for example in disk (OSX) is /Users//projects/gospace (note lowercase p) then the outside of root error appears on a godep save\n. ",
    "bmizerany": "lgtm\n. lgtm\n. Given package a/b and a/c at version V1, and V2 is the latest: Does godep update a/b only update a/b to V2 and leave a/c at V1?\n. Cool.\n. lgtm\n. lgtm\n. Given package a/b and a/c at version V1, and V2 is the latest: Does godep update a/b only update a/b to V2 and leave a/c at V1?\n. Cool.\n. ",
    "zachgersh": ":+1: on this.  I'd love to see something like this be brought in.  @kr are you working on something like this or could I give this a go (no pun intended) :D\n. @kr - I actually ran into this exact problem today and can totally provide you with a test case!\nReally simple go program will totally get you what you are after:\n``` go\npackage main\nimport (\n  \"github.com/docker/docker/pkg/archive\"\n)\nfunc main() {\n  mycompress := []byte{}\n  archive.DetectCompression(mycompress)\n}\n```\nWhen you check your _workspace you will notice that it imported quite a few dependencies, one of which is system.  System actually imports units, which looks like this:\n\"github.com/docker/docker/pkg/units\"\nand this is not found in the _workspace.\nAny other questions, just let me know.\n. :+1: on this.  I'd love to see something like this be brought in.  @kr are you working on something like this or could I give this a go (no pun intended) :D\n. @kr - I actually ran into this exact problem today and can totally provide you with a test case!\nReally simple go program will totally get you what you are after:\n``` go\npackage main\nimport (\n  \"github.com/docker/docker/pkg/archive\"\n)\nfunc main() {\n  mycompress := []byte{}\n  archive.DetectCompression(mycompress)\n}\n```\nWhen you check your _workspace you will notice that it imported quite a few dependencies, one of which is system.  System actually imports units, which looks like this:\n\"github.com/docker/docker/pkg/units\"\nand this is not found in the _workspace.\nAny other questions, just let me know.\n. ",
    "glasser": "However, as long as you have a fork of a package, nobody else will be able to run godep restore because nothing in your Godeps.json teaches them in what repository they will find the Rev in question, right?\n. I was getting the behavior that existing import lines were left alone, but when using a package in a file for the first time it would add the un-qualified version.\n. However, as long as you have a fork of a package, nobody else will be able to run godep restore because nothing in your Godeps.json teaches them in what repository they will find the Rev in question, right?\n. I was getting the behavior that existing import lines were left alone, but when using a package in a file for the first time it would add the un-qualified version.\n. ",
    "zhouhaibing089": "two years later, nothing changed?. two years later, nothing changed?. ",
    "luck02": "@shurcooL there isn't much in the way of documentation for our use case.  godep restore does in fact resolve the issue.  Which is great.\nHowever the overall usage is really confusing, who cares what's in the /tmp path?  We want specific versions checked out in the gopath for repeatable builds.    So I'm not sure what piece of workflow we're not understanding.\n. @shurcooL there isn't much in the way of documentation for our use case.  godep restore does in fact resolve the issue.  Which is great.\nHowever the overall usage is really confusing, who cares what's in the /tmp path?  We want specific versions checked out in the gopath for repeatable builds.    So I'm not sure what piece of workflow we're not understanding.\n. ",
    "zenlint": "@luck02 @shurcooL I also met the same problem.\nWhen we wirte specified Rev into Godeps.json, How can I get the right version of the imported godeps.\nI have tried  go get -d in the newest version of godep tool, but it did not do it, it just pull the newest version of the import lib to the $GOPATH, but not the specfied version.\nCan anyone help me to know that?thanks very much.\n. @luck02 @shurcooL I also met the same problem.\nWhen we wirte specified Rev into Godeps.json, How can I get the right version of the imported godeps.\nI have tried  go get -d in the newest version of godep tool, but it did not do it, it just pull the newest version of the import lib to the $GOPATH, but not the specfied version.\nCan anyone help me to know that?thanks very much.\n. ",
    "mjibson": "Is the updated code pushed to the branch? I'm not seeing it.\n. Yes, everything is fixed except for the third point. From a linux machine, running godep save -r ./... in the scollector directory ignores all _windows.go files. They are not rewritten or added to Godeps.json.\n. Is the updated code pushed to the branch? I'm not seeing it.\n. Yes, everything is fixed except for the third point. From a linux machine, running godep save -r ./... in the scollector directory ignores all _windows.go files. They are not rewritten or added to Godeps.json.\n. ",
    "iangreenleaf": "This happened to me as well. What's even more baffling is that I don't understand why it happened. Two deps that I installed got added as normal files, but when I installed a third later it was added as a submodule. Was it because I didn't do a go get beforehand?\n. This happened to me as well. What's even more baffling is that I don't understand why it happened. Two deps that I installed got added as normal files, but when I installed a third later it was added as a submodule. Was it because I didn't do a go get beforehand?\n. ",
    "nielsdraaisma": "I ran into this issue this week and worked around our problem by adding a '-tags foo' option to the save command, which get's passed along into \"go list\" command.\nIf this is an acceptable workaround that helps others i'm happy to bind it up and stick it in a pull request.\n. I ran into this issue this week and worked around our problem by adding a '-tags foo' option to the save command, which get's passed along into \"go list\" command.\nIf this is an acceptable workaround that helps others i'm happy to bind it up and stick it in a pull request.\n. ",
    "jzelinskie": "I believe that I created a duplicate issue at #161. However, some new information has come to light: if a library is using the ! operator in a build line (i.e. // +build !linux),  even the -tags parameter on go list won't help.\nI'm thinking that getting UserAllFiles exposed is the proper solution.\n. Sorry that I didn't post this earlier: the workaround that we've been using is to just use GOOS=linux go get -d ./... for getting dependencies. We're just lucky that there isn't anything excluded that OSX requires.\n. @freeformz, I've encountered a similar issue on v52 when recently vendoring. I need to double check to see if it is also caused by +build or something else, but I did not have all the proper dependencies.\n. I believe that I created a duplicate issue at #161. However, some new information has come to light: if a library is using the ! operator in a build line (i.e. // +build !linux),  even the -tags parameter on go list won't help.\nI'm thinking that getting UserAllFiles exposed is the proper solution.\n. Sorry that I didn't post this earlier: the workaround that we've been using is to just use GOOS=linux go get -d ./... for getting dependencies. We're just lucky that there isn't anything excluded that OSX requires.\n. @freeformz, I've encountered a similar issue on v52 when recently vendoring. I need to double check to see if it is also caused by +build or something else, but I did not have all the proper dependencies.\n. ",
    "buro9": "That does indeed fix the issue. Many thanks.\n. That does indeed fix the issue. Many thanks.\n. ",
    "zenazn": "Any chance of this getting merged in? I'm also somewhat eager to see this functionality.\n. Any chance of this getting merged in? I'm also somewhat eager to see this functionality.\n. ",
    "cosn": ":+1: \n. :+1: \n. ",
    "vdemario": "It can. Jenkins exposes ad-hoc access to the command line. We use it with Go, it downloads the tarball, puts it on the PATH, creates a GOPATH environment and directory structure compatible with the Go standards, moves our code into it and everything works fine.\n. You do. We use git as well. Jenkins puts the code in a certain location, but you can move it around. I suppose you can create symlinks too, although I never tried. I don't have the same feeling, I'd rather do this through Jenkins, not godep, so godep can just see a standard GOPATH, but I guess this is a matter of opinion.\n. @bsnow-dyn I've had a similar issue before, but I was just using godep save incorrectly, see if it applies to your situation: https://groups.google.com/forum/#!searchin/golang-nuts/godep$20testing$20packages%7Csort:relevance/golang-nuts/iijv19Vzh4U/fXQ5QCIx26wJ\n. Do you have an example of the problematic code? If you could make a sample repo, gist or something it might help.\n. It can. Jenkins exposes ad-hoc access to the command line. We use it with Go, it downloads the tarball, puts it on the PATH, creates a GOPATH environment and directory structure compatible with the Go standards, moves our code into it and everything works fine.\n. You do. We use git as well. Jenkins puts the code in a certain location, but you can move it around. I suppose you can create symlinks too, although I never tried. I don't have the same feeling, I'd rather do this through Jenkins, not godep, so godep can just see a standard GOPATH, but I guess this is a matter of opinion.\n. @bsnow-dyn I've had a similar issue before, but I was just using godep save incorrectly, see if it applies to your situation: https://groups.google.com/forum/#!searchin/golang-nuts/godep$20testing$20packages%7Csort:relevance/golang-nuts/iijv19Vzh4U/fXQ5QCIx26wJ\n. Do you have an example of the problematic code? If you could make a sample repo, gist or something it might help.\n. ",
    "arikfr": "Looks like duplicate of #28.\n. Looks like duplicate of #28.\n. ",
    "sosiouxme": "@kr Can I ask why one should never use relative imports in Go source code? Go supports it, it seems like a completely natural thing to do, and there are some good use cases for doing this even within the recommended code organization.\nSay I create a library that I would like people to fork. It's available at github.com/foo/bar, but if I put that in its own import paths, then when someone forks it to github.com/baz/quux, they have some lousy choices for enabling others to use it:\n1. Go through and update all the paths from foo/bar to baz/quux. Straightforward enough, but now if we want to cherry-pick each other's commits, there's probably a merge conflict every time one of us adds or removes an import.\n2. Tell people go get github.com/foo/bar, then add github.com/baz/quux as a remote and set up master to track that instead... awkward and confusing\n3. Tell people git clone github.com/baz/quux and then put that dir in your $GOPATH at foo/bar... also awkward and confusing.\nIf my library used import \"./subdir\" everywhere then none of this is a problem, you could just go get github.com/baz/quux and the fact that you're using a fork is clear and simple... except for godep, and let's face it, I'm gonna want a YAML parser, I'm gonna want systemd integration, etc. etc. so I will want godep to manage dependencies. As an added bonus, it's really easy to distinguish within a tenth of a second which imports are local versus some dependency. If Go can manage it, why is it so hard in godep to just treat \"./subdir\" and \"../subdir\" as ... local to the package?\n. Looks like it might be as simple as https://github.com/tools/godep/pull/130/files ?\n. @freeformz Relative import paths are discouraged... why? By whom?\n. @kr Can I ask why one should never use relative imports in Go source code? Go supports it, it seems like a completely natural thing to do, and there are some good use cases for doing this even within the recommended code organization.\nSay I create a library that I would like people to fork. It's available at github.com/foo/bar, but if I put that in its own import paths, then when someone forks it to github.com/baz/quux, they have some lousy choices for enabling others to use it:\n1. Go through and update all the paths from foo/bar to baz/quux. Straightforward enough, but now if we want to cherry-pick each other's commits, there's probably a merge conflict every time one of us adds or removes an import.\n2. Tell people go get github.com/foo/bar, then add github.com/baz/quux as a remote and set up master to track that instead... awkward and confusing\n3. Tell people git clone github.com/baz/quux and then put that dir in your $GOPATH at foo/bar... also awkward and confusing.\nIf my library used import \"./subdir\" everywhere then none of this is a problem, you could just go get github.com/baz/quux and the fact that you're using a fork is clear and simple... except for godep, and let's face it, I'm gonna want a YAML parser, I'm gonna want systemd integration, etc. etc. so I will want godep to manage dependencies. As an added bonus, it's really easy to distinguish within a tenth of a second which imports are local versus some dependency. If Go can manage it, why is it so hard in godep to just treat \"./subdir\" and \"../subdir\" as ... local to the package?\n. Looks like it might be as simple as https://github.com/tools/godep/pull/130/files ?\n. @freeformz Relative import paths are discouraged... why? By whom?\n. ",
    "duggan": "Ran into this after trying to vendorize an autogenerated protocol buffers library.\nimport ./mypackage is valid Go, and Go is pretty strict about what it allows. This is a bug in Godep.\n. Ran into this after trying to vendorize an autogenerated protocol buffers library.\nimport ./mypackage is valid Go, and Go is pretty strict about what it allows. This is a bug in Godep.\n. ",
    "steenzout": "@sosiouxme just got this exact same problem when trying to contribute to a Go open source project.\ntravis-ci build just fails.\n. @sosiouxme it seems you can use go_import_path: example.org/pkg/foo on your .travis.yml file to make it work.\n. after re-reading this thread I think the problem is more related to how people want to use go dep.\nmy case was just a simple problem with travis-ci builds on different github repos (google led me here).\nI was trying to use relative imports to solve the problem which then gave me the same non-local package error.\nhere are the repos:\n- mediaFORGE/gol\n- steenzout/gol\nadding go_import_path on the .travis.yml file made builds work on my steenzout account.\nnow anyone can fork the mediaFORGE/gol repo and test their changes using travis-ci.org (after enabling it for their forked repo, of course).\nno need for relative imports.\nsorry for the spam.\n. @sosiouxme just got this exact same problem when trying to contribute to a Go open source project.\ntravis-ci build just fails.\n. @sosiouxme it seems you can use go_import_path: example.org/pkg/foo on your .travis.yml file to make it work.\n. after re-reading this thread I think the problem is more related to how people want to use go dep.\nmy case was just a simple problem with travis-ci builds on different github repos (google led me here).\nI was trying to use relative imports to solve the problem which then gave me the same non-local package error.\nhere are the repos:\n- mediaFORGE/gol\n- steenzout/gol\nadding go_import_path on the .travis.yml file made builds work on my steenzout account.\nnow anyone can fork the mediaFORGE/gol repo and test their changes using travis-ci.org (after enabling it for their forked repo, of course).\nno need for relative imports.\nsorry for the spam.\n. ",
    "sym3tri": "Thank you, this was helpful. I was confused too with the Readme in master.\nI +1 this PR and hope to see it merged soon.\n. Thank you, this was helpful. I was confused too with the Readme in master.\nI +1 this PR and hope to see it merged soon.\n. ",
    "bsnow-dyn": "Thanks.  I don't think that's the particular issue, although I could be doing something wrong.  In my case the tests are in the same package and directory as the rest of the code, and my workaround was to add the import to a non-test file in the same package.\n. I will scratch something up now.  Thank you.\n. It may be related to build tag.  I can see I have that problem.  But when I drop the build tag from the file, the problem is still there.  When I try to create a test case from scratch, the problem is not there - I reproduced the imports clause on the two files to check.\n. It's definitely more subtle than I originally thought. Maybe it was something I did wrong when I removed the build tag to try to work around the issue.  Maybe it has something to do with having two packages named \"http\" (i.e. github.com/gorilla/http and net/http).  I couldn't come up with a test case I could export in a reasonable amount of time.\nWe have decided to just use gorilla/http everywhere, so the issue is gone for me.\nThanks\n. Thanks.  I don't think that's the particular issue, although I could be doing something wrong.  In my case the tests are in the same package and directory as the rest of the code, and my workaround was to add the import to a non-test file in the same package.\n. I will scratch something up now.  Thank you.\n. It may be related to build tag.  I can see I have that problem.  But when I drop the build tag from the file, the problem is still there.  When I try to create a test case from scratch, the problem is not there - I reproduced the imports clause on the two files to check.\n. It's definitely more subtle than I originally thought. Maybe it was something I did wrong when I removed the build tag to try to work around the issue.  Maybe it has something to do with having two packages named \"http\" (i.e. github.com/gorilla/http and net/http).  I couldn't come up with a test case I could export in a reasonable amount of time.\nWe have decided to just use gorilla/http everywhere, so the issue is gone for me.\nThanks\n. ",
    "vrecan": "I have this issue with godep save not finding ginkgo and gomega because they are only referenced in _test files.\n. I am also running into this issue. I have a project that is currently compiling different code for linux and windows. When running godep save I am only getting the deps for the current arch and not for all the archs.\n. :+1:  I'm running into this issue as well!\n. I have this issue with godep save not finding ginkgo and gomega because they are only referenced in _test files.\n. I am also running into this issue. I have a project that is currently compiling different code for linux and windows. When running godep save I am only getting the deps for the current arch and not for all the archs.\n. :+1:  I'm running into this issue as well!\n. ",
    "toqueteos": "godep path also stalls at 100% usage on a single core.\nEDIT: Only stalls if it doesn't find a Godeps folder, if I create it manually, it runs perfectly.\n. Can't get pass through https://github.com/tools/godep/blob/master/save.go#L101 using GDB, seems the problem source.\n. I've been adding tons of fmt.Println lines and found that go.go func findInParents is the one causing an infinite loop. It is checking for \"/\" as the uppermost root but on Windows that's C:\\ or whatever VolumeName Go code lives on. Working on a patch for this.\n. Ping\n. Ping\n. Ping.\nIt's been a month without activity and this critical bugfix still isn't merged. Is maintainer ok?\n. @shurcooL I sent an email to kr just a couple of hours ago, hope that helps.\n. Ty @kr, windows users will surely thank you!\n. godep path also stalls at 100% usage on a single core.\nEDIT: Only stalls if it doesn't find a Godeps folder, if I create it manually, it runs perfectly.\n. Can't get pass through https://github.com/tools/godep/blob/master/save.go#L101 using GDB, seems the problem source.\n. I've been adding tons of fmt.Println lines and found that go.go func findInParents is the one causing an infinite loop. It is checking for \"/\" as the uppermost root but on Windows that's C:\\ or whatever VolumeName Go code lives on. Working on a patch for this.\n. Ping\n. Ping\n. Ping.\nIt's been a month without activity and this critical bugfix still isn't merged. Is maintainer ok?\n. @shurcooL I sent an email to kr just a couple of hours ago, hope that helps.\n. Ty @kr, windows users will surely thank you!\n. ",
    "pzduniak": "Any way to fix it? It worked for me once, now I can't godep save anymore.\n. Any way to fix it? It worked for me once, now I can't godep save anymore.\n. ",
    "antonholmquist": "It needs to be in your $PATH. It's the same as with all executables. I guess this can be closed.\n. Godep have no (and should have no) general control over which version that is used to build the app. I guess this can be closed.\n. Comitting the Godep directory may not always be the right thing to do. Although I agree apps should generally do it, it is probably not the right way to go for frameworks and other external packages.\n. This happens to me as well. Godep seems to always download dependencies even though they are available in the godep _workspace.\n. Also, godep restore fails without a network connection even though local versions exists in the godep workspace. Is this how godep is designed to work or is it a bug?\n. Aren't the \"old unused files\" in the $GOPATH the ones that are actually used when you run your app? Godep just stores a copy in the repo to be able to restore them later, when needed.\n. It needs to be in your $PATH. It's the same as with all executables. I guess this can be closed.\n. Godep have no (and should have no) general control over which version that is used to build the app. I guess this can be closed.\n. Comitting the Godep directory may not always be the right thing to do. Although I agree apps should generally do it, it is probably not the right way to go for frameworks and other external packages.\n. This happens to me as well. Godep seems to always download dependencies even though they are available in the godep _workspace.\n. Also, godep restore fails without a network connection even though local versions exists in the godep workspace. Is this how godep is designed to work or is it a bug?\n. Aren't the \"old unused files\" in the $GOPATH the ones that are actually used when you run your app? Godep just stores a copy in the repo to be able to restore them later, when needed.\n. ",
    "cultureulterior": "Godep already knows where it is, though. If you look at the issue, godep is complaining about not being able to find itself, which is silly.\n. Godep already knows where it is, though. If you look at the issue, godep is complaining about not being able to find itself, which is silly.\n. ",
    "roylee17": "ping @kr \n. Thanks for the feedback.\nCould you help to create some test cases for the above comments?\nSo I can address them more confidently :-)\n. Here's the new revision. Turns out to be a two-line changes, heh.\nRebased and tested with the new test cases. Thanks for the feedback.\n. It would be great if you could help on the unit test, thanks a lot.\n. ping @kr \n. Thanks for the feedback.\nCould you help to create some test cases for the above comments?\nSo I can address them more confidently :-)\n. Here's the new revision. Turns out to be a two-line changes, heh.\nRebased and tested with the new test cases. Thanks for the feedback.\n. It would be great if you could help on the unit test, thanks a lot.\n. ",
    "shutej": "I didn't mean it should control the version of Go, I meant it should check the version of Go and either warn or fail.  Otherwise why even bother storing it in the Godeps.json?\n. I didn't mean it should control the version of Go, I meant it should check the version of Go and either warn or fail.  Otherwise why even bother storing it in the Godeps.json?\n. ",
    "wlaurance": "Speaking for myself, I don't really care to save any appengine packages in my Godeps/.\nDo you know if there is a way to tell godep to ignore certain packages?\n. What about supporting a .godepignore file with a CRLF delimited list of package names to ignore?\n. Speaking for myself, I don't really care to save any appengine packages in my Godeps/.\nDo you know if there is a way to tell godep to ignore certain packages?\n. What about supporting a .godepignore file with a CRLF delimited list of package names to ignore?\n. ",
    "luna-duclos": "Was this ever implemented ? I've stumbled on this problem as well\n. Was this ever implemented ? I've stumbled on this problem as well\n. ",
    "fredr": "+1\n. @kr the -ignore flag, do you want it to be a comma separated list of import paths, or a regex?\n. +1\n. @kr the -ignore flag, do you want it to be a comma separated list of import paths, or a regex?\n. ",
    "arschles": "+1 on this. I'd be ok with CRLF delimited\n. +1 on this. I'd be ok with CRLF delimited\n. ",
    "vvakame": ":+1: \n. :+1: \n. ",
    "sinmetal": ":+1: \n. :+1: \n. ",
    "kalbasit": "I don't believe that this is necessary any longer as the legacy appengine packages were replaced by the ones that run on both appengine and managed appengine. See this and this for more information.\nI am currently using google.golang.org/appengine in my project hosted by Google Appengine (not within a Managed VM). I just omitted vm:true from app.yaml.\n. @dsymonds I think the community is quite confused about the fate of the Appengine SDK versus the Appengine packages, can you please clarify?\n. I don't believe that this is necessary any longer as the legacy appengine packages were replaced by the ones that run on both appengine and managed appengine. See this and this for more information.\nI am currently using google.golang.org/appengine in my project hosted by Google Appengine (not within a Managed VM). I just omitted vm:true from app.yaml.\n. @dsymonds I think the community is quite confused about the fate of the Appengine SDK versus the Appengine packages, can you please clarify?\n. ",
    "ronoaldo": "Sorry to \"revive\" this but the comment regarding appengine pacakges beign \"replaced\" is misleading, as the new packages are targeted to Managed VMs, and they provide a layer for compatibility that, once built with App Engine SDK (or with the build flag +appengine), will end up importing appengine/* imports as well. Given the fact that App Engine is now out of beta and the classic packages + SDK will follow the deprecation policies, I think this is a real issue.\nIf you are working with App Engine and run godep save it will not work. I think that a solution like -omit is nice, but should be also recorded in Godep.json, so it would be recorded in the revision control and help other users working on the same repo/codebase to take advantage of that.\n. Currently, I'm using the import \"appengine\" statements on lots of places, including some tools. The way I'm handling vendor on these apps is by vendoring the vendor tool itself: we have a cmd/godep copy that is, basically, a copy from this fork https://github.com/fredr/godep, which works out of the box on both cases. The problem is that this causes confusion, as I have to instruct any team member or new collaborator to checkout a different copy o godep to make it work.\nAlso, I just noted that if you run godep with a $GOROOT pointing to the App Engine GOROOT (which I was expecting to work, as the appengine package exists there), it does not. The reason is that go list -e -json cannot find any packages at all, since the App Engine SDK $GOROOT does not have the src/pkg folder; all sources are at the src/ folder directly (i.e., src/time instead of src/pkg/time).\nSo, to sum up my experiences so far:\n- You can't use github.com/tools/godep with import \"appengine\"\n- Even if you export $(goapp env), you still can't use godep because $GOROOT/src/pkg does not exist.\n- If you have an existing app and want to use godep for vendoring, you have to rewrite a reasonable amount of code to move import \"appengine\" to import \"google.golang.org/appengine\"\n- You end up vendoring the vendor tool itself, which is where I am at now until I can move to the new packages.\nI'm just wondering if there is a better/recommended way to work with both tools, and avoid the confusion that I am having. If the only supported way is the new imports, then let it be - I would suggest that maybe it worth adding this to the documentation.\nThe -omit flag may not solve the problem; maybe a special case for appengine/* would help everyone, even if transitivelly until the new packages are more widelly addopted.\n. @dsymonds @freeformz @pshevtsov thanks. I am happy that the recommendation is then to move to the new packages, which hence are compatible with godep, and that the new App Engine packages are long-term support.\n. Sorry to \"revive\" this but the comment regarding appengine pacakges beign \"replaced\" is misleading, as the new packages are targeted to Managed VMs, and they provide a layer for compatibility that, once built with App Engine SDK (or with the build flag +appengine), will end up importing appengine/* imports as well. Given the fact that App Engine is now out of beta and the classic packages + SDK will follow the deprecation policies, I think this is a real issue.\nIf you are working with App Engine and run godep save it will not work. I think that a solution like -omit is nice, but should be also recorded in Godep.json, so it would be recorded in the revision control and help other users working on the same repo/codebase to take advantage of that.\n. Currently, I'm using the import \"appengine\" statements on lots of places, including some tools. The way I'm handling vendor on these apps is by vendoring the vendor tool itself: we have a cmd/godep copy that is, basically, a copy from this fork https://github.com/fredr/godep, which works out of the box on both cases. The problem is that this causes confusion, as I have to instruct any team member or new collaborator to checkout a different copy o godep to make it work.\nAlso, I just noted that if you run godep with a $GOROOT pointing to the App Engine GOROOT (which I was expecting to work, as the appengine package exists there), it does not. The reason is that go list -e -json cannot find any packages at all, since the App Engine SDK $GOROOT does not have the src/pkg folder; all sources are at the src/ folder directly (i.e., src/time instead of src/pkg/time).\nSo, to sum up my experiences so far:\n- You can't use github.com/tools/godep with import \"appengine\"\n- Even if you export $(goapp env), you still can't use godep because $GOROOT/src/pkg does not exist.\n- If you have an existing app and want to use godep for vendoring, you have to rewrite a reasonable amount of code to move import \"appengine\" to import \"google.golang.org/appengine\"\n- You end up vendoring the vendor tool itself, which is where I am at now until I can move to the new packages.\nI'm just wondering if there is a better/recommended way to work with both tools, and avoid the confusion that I am having. If the only supported way is the new imports, then let it be - I would suggest that maybe it worth adding this to the documentation.\nThe -omit flag may not solve the problem; maybe a special case for appengine/* would help everyone, even if transitivelly until the new packages are more widelly addopted.\n. @dsymonds @freeformz @pshevtsov thanks. I am happy that the recommendation is then to move to the new packages, which hence are compatible with godep, and that the new App Engine packages are long-term support.\n. ",
    "pshevtsov": ":+1: for -omit. I agree with @ronoaldo, using google.golang.org/appengine packages is not a true replacement for appengine packages.\n. Thank you @neurogeek! We really appreciate it! :+1: \n. Hey @neurogeek! Have you had the chance to look at this issue? Thanks\n. @freeformz @ronoaldo https://github.com/golang/appengine#2-update-import-paths\n\nsed -i '/\"appengine/{s,\"appengine,\"google.golang.org/appengine,;s,appengine_,appengine/,}' \\\n  $(find . -name '*.go')\n. :+1: for -omit. I agree with @ronoaldo, using google.golang.org/appengine packages is not a true replacement for appengine packages.\n. Thank you @neurogeek! We really appreciate it! :+1: \n. Hey @neurogeek! Have you had the chance to look at this issue? Thanks\n. @freeformz @ronoaldo https://github.com/golang/appengine#2-update-import-paths\nsed -i '/\"appengine/{s,\"appengine,\"google.golang.org/appengine,;s,appengine_,appengine/,}' \\\n  $(find . -name '*.go')\n. \n",
    "dsymonds": "google.golang.org/appengine and friends are intended to be a replacement for appengine and friends. If there's a reason why that's not the case, it's a bug (yes, there's a couple of known gaps that we're working on).\nThey aren't \"replacements\" completely, though; any existing app using import \"appengine\" is going to continue to work, though I think it's fine for various tools to only work properly with the new ones.\n. @freeformz: If the newer packages work for you, sure. They'll be the best supported ones in the long term.\nSwitching to google.golang.org/appengine should not entail rewriting a lot of code. 95% of the APIs are exactly the same, so it should only be a matter of rewriting the import statement; the google.golang.org/appengine README has a sed command to do that very quickly.\n. google.golang.org/appengine and friends are intended to be a replacement for appengine and friends. If there's a reason why that's not the case, it's a bug (yes, there's a couple of known gaps that we're working on).\nThey aren't \"replacements\" completely, though; any existing app using import \"appengine\" is going to continue to work, though I think it's fine for various tools to only work properly with the new ones.\n. @freeformz: If the newer packages work for you, sure. They'll be the best supported ones in the long term.\nSwitching to google.golang.org/appengine should not entail rewriting a lot of code. 95% of the APIs are exactly the same, so it should only be a matter of rewriting the import statement; the google.golang.org/appengine README has a sed command to do that very quickly.\n. ",
    "vsiv": "@freeformz but google.golang.org/appengine itself imports appengine. And hence godep consistently complains \"appengine\" package is missing. Any help?\nThanks.\n. @freeformz just found out the above error is pertaining to https://github.com/tools/godep/issues/348\n. @freeformz but google.golang.org/appengine itself imports appengine. And hence godep consistently complains \"appengine\" package is missing. Any help?\nThanks.\n. @freeformz just found out the above error is pertaining to https://github.com/tools/godep/issues/348\n. ",
    "joeshaw": "I see your point about the commands.  My only rebuttal to that is that for most Go tools, the one and only way to install them is with go get.  At least for now, most tools aren't being packaged up and released like traditional packages due to the ease of use and unversioned nature of go get.  Maybe that'll change over time as the tools become more mature or services like gopkg.in become more widespread.\nFor C and Python tools I generally have more control over the versioning.  Python I can use virtualenv and pip install foo==1.0.9.  C utilities I mostly install via apt-get install or, in a pinch, build from a versioned tarball.  For Go, the current state of the art in versioning is to use godep to get a specific VC revision.\nUsing // +build ignore was my first stab at it and I was surprised to see godep obey the flags, until I read #84.  I'll keep an eye out for that.\nThanks!\n. @client9 you might be interested in https://github.com/robfig/glock, which allows for tool dependencies.  It is basically equivalent functionally to the -copy=false behavior of godep, which may or may not be what you want.  (It works for me because we do our \"vendoring\" via docker containers rather than checking $GOPATH into version control.)\n. I see your point about the commands.  My only rebuttal to that is that for most Go tools, the one and only way to install them is with go get.  At least for now, most tools aren't being packaged up and released like traditional packages due to the ease of use and unversioned nature of go get.  Maybe that'll change over time as the tools become more mature or services like gopkg.in become more widespread.\nFor C and Python tools I generally have more control over the versioning.  Python I can use virtualenv and pip install foo==1.0.9.  C utilities I mostly install via apt-get install or, in a pinch, build from a versioned tarball.  For Go, the current state of the art in versioning is to use godep to get a specific VC revision.\nUsing // +build ignore was my first stab at it and I was surprised to see godep obey the flags, until I read #84.  I'll keep an eye out for that.\nThanks!\n. @client9 you might be interested in https://github.com/robfig/glock, which allows for tool dependencies.  It is basically equivalent functionally to the -copy=false behavior of godep, which may or may not be what you want.  (It works for me because we do our \"vendoring\" via docker containers rather than checking $GOPATH into version control.)\n. ",
    "client9": "Any update here? \nI don't think godep should solve the problem of C or python code dependencies.  For those case, using tradition package management systems would make for sense (e.g. apt-get install protoc)\nBut for pure go tools here's a real-world example or use case of why someone might want to fix certain go tools.\n- Developers pull down govet by some process of setting up their dev environment\n- The CI system (say travis-ci) s configured to pull down the latest go-vet\n- Someone at google adds a new rule to go-vet and our build/tests break\nIdeally I'd like to eliminate these surprises and do upgrades to go-vet in a more controlled way.\nIf everything were it GIT it might be a bit simpler, (submodules or other stuff), but they are not.\nRight now I'd looking at faking 'go get' with a hg clone using a particular version.  That is still smelly since my build is at the mercy of that hg repo (frequently really slow).  I could import the whole tree into my source code (certainly doable) but now I have two ways of importing dependencies.\nLet me know how I can help.\nAnd thanks for a great tool.\nnickg\n. go vet is a bad example since it's tied into core google stuff and part of larger HG repo.\ngolint might be a better example (or even godep itself!)\n. FYI - https://github.com/ryanuber/go-license\nchecks the following files:\ngo\n// A set of reasonable license file names to use when guessing where the\n// license may be.\nvar DefaultLicenseFiles = []string{\n        \"LICENSE\", \"LICENSE.txt\", \"LICENSE.md\", \"license.txt\",\n        \"COPYING\", \"COPYING.txt\", \"COPYING.md\", \"copying.txt\",\n        \"UNLICENSE\",\n}\nand I'm looking at adding README* \n. @ahmetalpbalkan yeah, sorry I wasn't clear.  I don't recommend you copy the readme unless it has license info (but even then you might not want to include that logic in godep).   Im only updating go-license code to peek inside readmes as a last resort if a COPYING/LICENSE is missing. \n. yeah, you'd be amazed at the number of packages that just add a link in readme and call it a day.   I attempt to file tickets to get the authors to convert to using a separate file, but...   \nAgree they should ignore case.    I'll hope to hack on go-license a bit more today.  \nThanks for looking into this and for your work in godep!\n. Hi @ahmetalpbalkan , I think Im about done with a PR for go-license\nhttps://github.com/ryanuber/go-license/pull/9\nMy guess is .. do you even care about the license itself?  meaning you might just want a function \"give me files that look like a license\" (e.g. COPYING, LICENSE, etc) so you can copy it  Anyways, let me know if you want a different API in go-license or if you want some of the private functions made Public.\nOf note are\ngo\n// returns a []string of files in a directory, or error\nfunc readDirectory(dir string) ([]string, error)\n// returns files that case-insensitive matches any of the license\n// files.  This is generic functionality so pulled out into separate\n// function for testing\nfunc matchLicenseFile(licenses []string, files []string) []string {\n. yeah that my thinking too..  ok will hack away!\n. hi @ahmetalpbalkan \nLooking into this a bit more, I think you want to copy a few more \"files of interest\".  While most cases are handled by go-license there are number of other cases that don't quite fall into software license, that you may wish to copy as well.\nIm happy to write up (perhaps not in go-license) that captures all the examples below\nfunc FilesOfInterest(dir string) ([]string)\nLet me know what you think.\nexamples to follow:\nEx: everything Facebook open sources is now BSD in one file, and patents file in another.\nUsing https://github.com/facebookgo/startstop as typical example we got:\nhttps://github.com/facebookgo/startstop/blob/master/license\nhttps://github.com/facebookgo/startstop/blob/master/patents\nEx: other legal notices, eg. Docker stuff contains NOTICE\nhttps://github.com/docker/docker/blob/master/NOTICE\nThe following aren't go, but we can expect this as time goes on:\nEx: Copying + Copyright\nex: https://github.com/airbnb/airflow\nEx.  Duplicate licenses in different files. Haven't seen so much so in go but some repos have COPYLEFT and COPYING/LICENSE\nhttps://github.com/elmom/pypsyc\nhttps://github.com/discourse/discourse\nEx: More of everything.  If one notice is good, more must be better\nthese guys\nhttps://github.com/janestreet/fieldslib\nSure have a license but also:\nhttps://github.com/janestreet/fieldslib/blob/master/LICENSE.txt\nLegal disclaimer\nhttps://github.com/janestreet/fieldslib/blob/master/INRIA-DISCLAIMER.txt\nSeparate copyright\nhttps://github.com/discourse/discourse/blob/master/COPYRIGHT.txt\nAnd notice of other stuff\nhttps://github.com/janestreet/fieldslib/blob/master/THIRD-PARTY.txt\nPhew!\n. @ahmetalpbalkan @freeformz \nIm happy to donate IsLicenseFile and/or IsLegalFile (along with tests)\nhttps://github.com/client9/gosupplychain/blob/master/license.go\nhttps://github.com/client9/gosupplychain/blob/master/license_test.go\nif it helps.  Let me know if you'd like a pull request, and/or any file/function naming changes.\nregards,\nn\n. Pull request #301 ready for review @freeformz \n. Ok I think see the code that needs to change, and nifty way of unit testing cpySrc @kr\nIm happy to take a stab at this if you want @freeformz (or you can of course too.. not sure what other work is in progress)\n. Ok, not soo bad.  It's a bit tricky since things are working in filesystem paths, but this seems to work.\nFor each dependency, it walks backwards grabbing any license files, until it hits the top level. meaning if we have github.com/foo/bar/something it will check the following directories for license files.\n- github.com/foo/bar\n- github.com/foo\n- github.com \nThere is a simple test case added.\nNext step is to make a fake app that uses github.com/cactus/go-statsd-client and try it out.\n. pull request https://github.com/tools/godep/pull/301 updated,  waiting for review.\n. note: \"code.google.com/p/go-uuid/uuid\" and everything on code.google.com is going to be shutdown (although when I'm not sure).  I believe with go 1.5 a warning is emitted.\nThe item in question should be updated to point to https://github.com/pborman/uuid\nHopefully that will solve your immediate issue, but doesn't solve the silent failure.\n. Oh you can include it as a library.  Maybe thats better since godep isn't really structured as a library (thats too bad since the VCS stuff might be nice to reuse else where).  I was under the (wrong) impression you didn't use external dependencies in godep.  I will work on cleaning up my library.\nI just added some code to copySrc that seems to do the right thing.  But Im new to this code base.  Suggestions most welcome.\nI'll make a fake app and try it out with cactus's statsd library.\nre: So IMO IsLicenseFile and IsLegalFile should take into consideration that it may get a full (or partial) path to a filename, not just the base name\nthanks for tips.  I'll take a look at other calls to copySrc\nonward\n. ahh great.  Will look!\n. Hmm, my understanding of the code is that if it's a normal dependency directory, then\neverything gets copied unless it ends in _test.go (sometimes).\nFrom reading the ticket, for the parent directories, we want nothing copied unless it's legal file.\nOptions:\n- pass in another flag to copyPkgFile and sort this out in this function. \n- write a copyLegalFile function which is a simplified version of  copyPkgFile  that just tests and copies legal-like files.\nany preference or did I miss something here?\nOption 1 would look like this\ngo\nfunc copyPkgFile(vf vcsFiles, dstroot, srcroot string, w *fs.Walker, legalOnly bool) error {\nand \ngo\nif !legalOnly && !saveT && strings.HasSuffix(name, \"_test.go\") {\nand\ngo\nif legalOnly && !IsLegalFile(name) {\n    return nil\n}\nor so.\n. thanks for your review.\nre: \"After reading your comment I realized that dep.dir could be a sub package as well, which I didn't consider last night, so you'll only be walking through the files in that sub package.\"\nTrue, but legal files in a sub package are copied already.  Its really just the parents that is a problem.  So the current pull solves the ticket issue (although we can clean up the patch a bit).  Or are we solving different problems ?\n. Ahh I put my comments in the original ticket.  Sorry for the confusion.\nhttps://github.com/tools/godep/issues/245#issuecomment-150476193\n. oh @freeformz.. mostly me posting in issue and in pull request, and learning how you guys like doing stuff, and a new code base.  Nothing you did.  I'll take a look more closely...\n. I played around with vcs and friends and finally understand the hint you are giving....  and realized I was \"solving\" a more general problem of a license is any parent directory.   We just assume if the sub-package is missing a license, the license (if any) better be at the top of the package.  No need to walk up.\n. hi @freeformz   latest should have a simplified version, although I think it can be simplified further.  Let me know what you think. \n. Ahh intersting ok.\nas intermediate step I was thinking of something like this\nbash\n$ godep version\nv20\nor something to let you know what version (or last tagged version) is running.  Thats probably 10 LOC max since you have the version info in go-code already.\nThat won't fix the process, but should help.\n. hilar.. I didn't try that since the \"godep help\" didn't list it.  I'll make a pull request adding that to help page.\nthx!\n. @freeformz  \nfor x/net and x/crypto I've had to do \ngo get -u golang.org/x/net/...\ngodep update golang.org/x/net/...\nthen go get and godep seem to work fine.  Its something to do with the way these packages are setup and I think not particular to godep\n. Hi @jonboulle   I wrote the original code here.  My apologies that it's causing you troubles.\nJust so I understand... is the problem just that godep just vendoring files it doesn't need to?  Or is this causing some other issue for you as well.\nAnother way of doing this is adding a HasSuffix check of .txt, .rst, .md, .rtf, will cover 99.999% of license files out there (well I don't know exactly but my previous scanning suggested this covered most of them).\nRegards,\nn\n. hi @awsmsrc \nLove the idea, but IMHO probably best done as a separate package.\nYou also might like https://github.com/shurcooL/gostatus which is a completely different take on reporting of dependences. (cc @shurcooL )\nI have a bunch of half-baked stuff, but we use this to make reports doing exactly what you suggested\ngithub.com/client9/gosupplychain/\nIn particular look at the  github-behind command.  It takes a Godep file and does something similar to what you are doing.   good: it doesnt mess-up your go path or need to do a restore or checkout big blobs of code.   bad: It's github specific\nHere's sample:\ngithub.com/client9/tlstext: ahead\n    0 5bd8b72 badges\n    1 0c2f760 badges\n    2 1be66ac badges\n    3 dd4ebd7 badges\n    4 4afdf94 badges\ngithub.com/cloudflare/ahocorasick: identical\ngithub.com/daaku/go.zipexe: identical\ngithub.com/fatih/camelcase: identical\ngithub.com/fatih/structs: ahead\n    0 24ec389 fix typos\n    1 dd04eba Merge pull request #42 from shawnps/patch-2 fix typos\ngithub.com/go-ini/ini: identical\ngithub.com/go-ole/go-ole: ahead\n    0 849646a implement ToValueArray()\n    1 5005588 Merge branch 'master' of git://github.com/go-ole/go-ole\nFree free to rip out anything here and use it.\nregards,\nn\n. hi me again @awsmsrc\nI'd be curious if you could make your report outside of godep using it's api.  I seem to recall a lot of good functionality wasn't made public or made into a package.\nMaybe we could merge our projects.. really they should be different only in output since they are doing the same things. (i.e. just specific a template file to make different outputs).\nhappy to help in either way.\nregards,\nn\n. hmm weird.  ok.  (meaning surprised it wasn't)\n. done.\n. Any update here? \nI don't think godep should solve the problem of C or python code dependencies.  For those case, using tradition package management systems would make for sense (e.g. apt-get install protoc)\nBut for pure go tools here's a real-world example or use case of why someone might want to fix certain go tools.\n- Developers pull down govet by some process of setting up their dev environment\n- The CI system (say travis-ci) s configured to pull down the latest go-vet\n- Someone at google adds a new rule to go-vet and our build/tests break\nIdeally I'd like to eliminate these surprises and do upgrades to go-vet in a more controlled way.\nIf everything were it GIT it might be a bit simpler, (submodules or other stuff), but they are not.\nRight now I'd looking at faking 'go get' with a hg clone using a particular version.  That is still smelly since my build is at the mercy of that hg repo (frequently really slow).  I could import the whole tree into my source code (certainly doable) but now I have two ways of importing dependencies.\nLet me know how I can help.\nAnd thanks for a great tool.\nnickg\n. go vet is a bad example since it's tied into core google stuff and part of larger HG repo.\ngolint might be a better example (or even godep itself!)\n. FYI - https://github.com/ryanuber/go-license\nchecks the following files:\ngo\n// A set of reasonable license file names to use when guessing where the\n// license may be.\nvar DefaultLicenseFiles = []string{\n        \"LICENSE\", \"LICENSE.txt\", \"LICENSE.md\", \"license.txt\",\n        \"COPYING\", \"COPYING.txt\", \"COPYING.md\", \"copying.txt\",\n        \"UNLICENSE\",\n}\nand I'm looking at adding README* \n. @ahmetalpbalkan yeah, sorry I wasn't clear.  I don't recommend you copy the readme unless it has license info (but even then you might not want to include that logic in godep).   Im only updating go-license code to peek inside readmes as a last resort if a COPYING/LICENSE is missing. \n. yeah, you'd be amazed at the number of packages that just add a link in readme and call it a day.   I attempt to file tickets to get the authors to convert to using a separate file, but...   \nAgree they should ignore case.    I'll hope to hack on go-license a bit more today.  \nThanks for looking into this and for your work in godep!\n. Hi @ahmetalpbalkan , I think Im about done with a PR for go-license\nhttps://github.com/ryanuber/go-license/pull/9\nMy guess is .. do you even care about the license itself?  meaning you might just want a function \"give me files that look like a license\" (e.g. COPYING, LICENSE, etc) so you can copy it  Anyways, let me know if you want a different API in go-license or if you want some of the private functions made Public.\nOf note are\ngo\n// returns a []string of files in a directory, or error\nfunc readDirectory(dir string) ([]string, error)\n// returns files that case-insensitive matches any of the license\n// files.  This is generic functionality so pulled out into separate\n// function for testing\nfunc matchLicenseFile(licenses []string, files []string) []string {\n. yeah that my thinking too..  ok will hack away!\n. hi @ahmetalpbalkan \nLooking into this a bit more, I think you want to copy a few more \"files of interest\".  While most cases are handled by go-license there are number of other cases that don't quite fall into software license, that you may wish to copy as well.\nIm happy to write up (perhaps not in go-license) that captures all the examples below\nfunc FilesOfInterest(dir string) ([]string)\nLet me know what you think.\nexamples to follow:\nEx: everything Facebook open sources is now BSD in one file, and patents file in another.\nUsing https://github.com/facebookgo/startstop as typical example we got:\nhttps://github.com/facebookgo/startstop/blob/master/license\nhttps://github.com/facebookgo/startstop/blob/master/patents\nEx: other legal notices, eg. Docker stuff contains NOTICE\nhttps://github.com/docker/docker/blob/master/NOTICE\nThe following aren't go, but we can expect this as time goes on:\nEx: Copying + Copyright\nex: https://github.com/airbnb/airflow\nEx.  Duplicate licenses in different files. Haven't seen so much so in go but some repos have COPYLEFT and COPYING/LICENSE\nhttps://github.com/elmom/pypsyc\nhttps://github.com/discourse/discourse\nEx: More of everything.  If one notice is good, more must be better\nthese guys\nhttps://github.com/janestreet/fieldslib\nSure have a license but also:\nhttps://github.com/janestreet/fieldslib/blob/master/LICENSE.txt\nLegal disclaimer\nhttps://github.com/janestreet/fieldslib/blob/master/INRIA-DISCLAIMER.txt\nSeparate copyright\nhttps://github.com/discourse/discourse/blob/master/COPYRIGHT.txt\nAnd notice of other stuff\nhttps://github.com/janestreet/fieldslib/blob/master/THIRD-PARTY.txt\nPhew!\n. @ahmetalpbalkan @freeformz \nIm happy to donate IsLicenseFile and/or IsLegalFile (along with tests)\nhttps://github.com/client9/gosupplychain/blob/master/license.go\nhttps://github.com/client9/gosupplychain/blob/master/license_test.go\nif it helps.  Let me know if you'd like a pull request, and/or any file/function naming changes.\nregards,\nn\n. Pull request #301 ready for review @freeformz \n. Ok I think see the code that needs to change, and nifty way of unit testing cpySrc @kr\nIm happy to take a stab at this if you want @freeformz (or you can of course too.. not sure what other work is in progress)\n. Ok, not soo bad.  It's a bit tricky since things are working in filesystem paths, but this seems to work.\nFor each dependency, it walks backwards grabbing any license files, until it hits the top level. meaning if we have github.com/foo/bar/something it will check the following directories for license files.\n- github.com/foo/bar\n- github.com/foo\n- github.com \nThere is a simple test case added.\nNext step is to make a fake app that uses github.com/cactus/go-statsd-client and try it out.\n. pull request https://github.com/tools/godep/pull/301 updated,  waiting for review.\n. note: \"code.google.com/p/go-uuid/uuid\" and everything on code.google.com is going to be shutdown (although when I'm not sure).  I believe with go 1.5 a warning is emitted.\nThe item in question should be updated to point to https://github.com/pborman/uuid\nHopefully that will solve your immediate issue, but doesn't solve the silent failure.\n. Oh you can include it as a library.  Maybe thats better since godep isn't really structured as a library (thats too bad since the VCS stuff might be nice to reuse else where).  I was under the (wrong) impression you didn't use external dependencies in godep.  I will work on cleaning up my library.\nI just added some code to copySrc that seems to do the right thing.  But Im new to this code base.  Suggestions most welcome.\nI'll make a fake app and try it out with cactus's statsd library.\nre: So IMO IsLicenseFile and IsLegalFile should take into consideration that it may get a full (or partial) path to a filename, not just the base name\nthanks for tips.  I'll take a look at other calls to copySrc\nonward\n. ahh great.  Will look!\n. Hmm, my understanding of the code is that if it's a normal dependency directory, then\neverything gets copied unless it ends in _test.go (sometimes).\nFrom reading the ticket, for the parent directories, we want nothing copied unless it's legal file.\nOptions:\n- pass in another flag to copyPkgFile and sort this out in this function. \n- write a copyLegalFile function which is a simplified version of  copyPkgFile  that just tests and copies legal-like files.\nany preference or did I miss something here?\nOption 1 would look like this\ngo\nfunc copyPkgFile(vf vcsFiles, dstroot, srcroot string, w *fs.Walker, legalOnly bool) error {\nand \ngo\nif !legalOnly && !saveT && strings.HasSuffix(name, \"_test.go\") {\nand\ngo\nif legalOnly && !IsLegalFile(name) {\n    return nil\n}\nor so.\n. thanks for your review.\nre: \"After reading your comment I realized that dep.dir could be a sub package as well, which I didn't consider last night, so you'll only be walking through the files in that sub package.\"\nTrue, but legal files in a sub package are copied already.  Its really just the parents that is a problem.  So the current pull solves the ticket issue (although we can clean up the patch a bit).  Or are we solving different problems ?\n. Ahh I put my comments in the original ticket.  Sorry for the confusion.\nhttps://github.com/tools/godep/issues/245#issuecomment-150476193\n. oh @freeformz.. mostly me posting in issue and in pull request, and learning how you guys like doing stuff, and a new code base.  Nothing you did.  I'll take a look more closely...\n. I played around with vcs and friends and finally understand the hint you are giving....  and realized I was \"solving\" a more general problem of a license is any parent directory.   We just assume if the sub-package is missing a license, the license (if any) better be at the top of the package.  No need to walk up.\n. hi @freeformz   latest should have a simplified version, although I think it can be simplified further.  Let me know what you think. \n. Ahh intersting ok.\nas intermediate step I was thinking of something like this\nbash\n$ godep version\nv20\nor something to let you know what version (or last tagged version) is running.  Thats probably 10 LOC max since you have the version info in go-code already.\nThat won't fix the process, but should help.\n. hilar.. I didn't try that since the \"godep help\" didn't list it.  I'll make a pull request adding that to help page.\nthx!\n. @freeformz  \nfor x/net and x/crypto I've had to do \ngo get -u golang.org/x/net/...\ngodep update golang.org/x/net/...\nthen go get and godep seem to work fine.  Its something to do with the way these packages are setup and I think not particular to godep\n. Hi @jonboulle   I wrote the original code here.  My apologies that it's causing you troubles.\nJust so I understand... is the problem just that godep just vendoring files it doesn't need to?  Or is this causing some other issue for you as well.\nAnother way of doing this is adding a HasSuffix check of .txt, .rst, .md, .rtf, will cover 99.999% of license files out there (well I don't know exactly but my previous scanning suggested this covered most of them).\nRegards,\nn\n. hi @awsmsrc \nLove the idea, but IMHO probably best done as a separate package.\nYou also might like https://github.com/shurcooL/gostatus which is a completely different take on reporting of dependences. (cc @shurcooL )\nI have a bunch of half-baked stuff, but we use this to make reports doing exactly what you suggested\ngithub.com/client9/gosupplychain/\nIn particular look at the  github-behind command.  It takes a Godep file and does something similar to what you are doing.   good: it doesnt mess-up your go path or need to do a restore or checkout big blobs of code.   bad: It's github specific\nHere's sample:\ngithub.com/client9/tlstext: ahead\n    0 5bd8b72 badges\n    1 0c2f760 badges\n    2 1be66ac badges\n    3 dd4ebd7 badges\n    4 4afdf94 badges\ngithub.com/cloudflare/ahocorasick: identical\ngithub.com/daaku/go.zipexe: identical\ngithub.com/fatih/camelcase: identical\ngithub.com/fatih/structs: ahead\n    0 24ec389 fix typos\n    1 dd04eba Merge pull request #42 from shawnps/patch-2 fix typos\ngithub.com/go-ini/ini: identical\ngithub.com/go-ole/go-ole: ahead\n    0 849646a implement ToValueArray()\n    1 5005588 Merge branch 'master' of git://github.com/go-ole/go-ole\nFree free to rip out anything here and use it.\nregards,\nn\n. hi me again @awsmsrc\nI'd be curious if you could make your report outside of godep using it's api.  I seem to recall a lot of good functionality wasn't made public or made into a package.\nMaybe we could merge our projects.. really they should be different only in output since they are doing the same things. (i.e. just specific a template file to make different outputs).\nhappy to help in either way.\nregards,\nn\n. hmm weird.  ok.  (meaning surprised it wasn't)\n. done.\n. ",
    "nlf": "+1 yes please\n. +1 yes please\n. ",
    "mikedoug": "Seems to also fix #48 as well?  Is there any way to help move things along with merging in this and other features people seem to be opening pull requests for?  I'm happy with this project as it solves a big problem with go dependencies; I just want to see it moving along faster to be more usable by people with real projects with go components that don't put the go source at the root of the repository.\n. To ease the pain of getting this done, I've created a pull request (https://github.com/tools/godep/pull/173) to backmerge master into rootset.  That will update this branch to remove the merge conflict.\nThen I'd like to help +1 and figure out how to champion getting the pull request approved.\n. Seems to also fix #48 as well?  Is there any way to help move things along with merging in this and other features people seem to be opening pull requests for?  I'm happy with this project as it solves a big problem with go dependencies; I just want to see it moving along faster to be more usable by people with real projects with go components that don't put the go source at the root of the repository.\n. To ease the pain of getting this done, I've created a pull request (https://github.com/tools/godep/pull/173) to backmerge master into rootset.  That will update this branch to remove the merge conflict.\nThen I'd like to help +1 and figure out how to champion getting the pull request approved.\n. ",
    "zeisss": "Today we ran into this problem as well when trying to use fleet. The things about the fleet repository is, that it can be used as multiple things: The fleetctl client tool (package fleetctl), a client lib (using packages schema, client) and the server (more or less all the things).\nSo +1 for coming up with a solution / approach ;)\n. Today we ran into this problem as well when trying to use fleet. The things about the fleet repository is, that it can be used as multiple things: The fleetctl client tool (package fleetctl), a client lib (using packages schema, client) and the server (more or less all the things).\nSo +1 for coming up with a solution / approach ;)\n. ",
    "jonboulle": "\nCould we possibly pass the target package name to this function and update the sep string dynamically so that the exclude only picks up repos that are local to repo being saved? \n\nAssuming that I understand this correctly (essentially, that transitive repo dependencies are \"ignored\" when calculating dependencies to be saved), it is definitely my preferred solution. IMHO it would be the intuitive/desired behaviour in the majority of cases. Effectively, the \"original path\" of such dependencies would include the prefix of the intermediate package's repo (e.g. the package is no longer canonically github.com/godbus/dbus but instead github.com/coreos/Godeps/_workspace/src/github.com/godbus/dbus)\n\n\nHonestly, the best solution to this problem is to avoid it in the first place: libraries should not use godep at all, only commands (package main) should.\n\nCan you explain the rationale here in a little more detail? I don't find it a realistic expectation that libraries always be hermetic.\n\nAnother alternative would be to continue godep's current approach of \"undoing\" import path rewriting when copying packages that have already used godep, and to add more logic to automatically run 'go get' or otherwise fetch packages that aren't readily available in GOPATH.\n\nIs it feasible for this to be implemented in such a way that would support multiple versions for dependencies?\n. Hmm interesting, so rather than relying on godep's automagical import detection, we should always be explicitly listing main packages when we invoke godep save?\n. > @jonboulle the package spec passed to godep save is what feeds godep the list of packages to inspect for 'automagical detection'.\nRight, that actually was my understanding, which is why I was surprised at your suggestion (which I misinterpreted). The thing is, godep save -r ./... github.com/zimbatm/socketmaster only partly does what I expect/want; it will a) vendor+rewrite all the package imports it discovers under all the packages in ./... (great), and b) vendor+rewrite github.com/zimbatm/socketmaster into my current $PWD/Godeps/ directory (also great). BUT, it also c) rewrites all of the imports WITHIN $GOPATH/src/github.com/zimbatm/socketmaster, which is definitely NOT what I want. Am I doing something wrong, or misunderstanding this yet again?\n. > Arguably godep save w/o any args should default to . or the contents of the Godeps/Godeps.json Packages array, if the file exists. This would probably help a lot and help people DTRT more often. Thoughts?\nHmmm are you suggesting that Godeps/Godeps.json now becomes an editable source manifest rather than something only written to by the godep tool? That is arguably much more intuitive (in my experience it's what every newcomer to godep EXPECTS to happen when they see the manifest), but totally inverting the current workflow right?\n. On Wed, Dec 2, 2015 at 3:54 PM, Edward Muller notifications@github.com\nwrote:\n\nRe Rewrites: it would rewrite and vendor any of the imports the vendored\ntool imports. But you'de want that wouldn't you? That's the only way to\nguarantee you can build that tool later.\nI only want them rewritten within the vendored version of the tool\nimports; but godep is reaching outside my current working directory and\nrewriting them in their $GOPATH source directories as well. Incidentally\nthat breaks subsequent godep save calls on those imports because then\ntheir git working trees are dirty.\n. oh, good, so you'd take a fix? :-)\nAt this stage I am pretty sure that would solve our use cases /cc @dgonyeo\n\nOn Wed, Dec 2, 2015 at 4:09 PM, Edward Muller notifications@github.com\nwrote:\n\nAhh yeah. I missed that. For instance github.com/zimbatm/socketmaster\ndoesn't have any external deps, so no rewrites. You could not use\nrewrites for now, but either way that's a bug,\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/pull/336#issuecomment-161473060.\n. On Wed, Dec 2, 2015 at 4:21 PM, Edward Muller notifications@github.com\nwrote:\nHmm. This may break how some people use godep, not sure. The way I'd\nlike godep used is that it would only rewrite packages that are specified\nvia a relative package spec (., ./, ./..., ./cmd/..., etc) and their\ndependencies. In my mind it should not rewrite other package specs at their\noriginal location(s).\n+1, agree with all these points\nBut I can see how some people may use the fully qualified package spec\nwhen doing save (e.g.: godep save github.com/me/thepackageImworkingon).\nI've also seen people construct oddities in Makefiles to enumerate packages\nand pass the fully qualified package names to godep (I don't know why\nthey do that though).\nHmm, yeah. I seem to recall there being subtle but nefarious differences in\nbehaviour between these approaches which caused us to end up very firmly on\nour current ./... invocation. But the details escape me.\n. @krnowak For posterity I suggest updating the wording of the PR OP to match the new commit message\n. @krnowak I meant here\n. LGTM\n. @krnowak time for a rebase\n@freeformz ping on this?\n. bump :-)\n. This change appears to have had a pathological effect on performance in at least one of our repos (coreos/rkt):\n\n```\n ; time /tmp/gopath/bin/godep32 save -r ./...\nreal    0m1.649s\nuser    0m1.383s\nsys 0m0.341s\n; time /tmp/gopath/bin/godep33 save -r ./...\ngodep: found packages keygen.go (main) and keymap.go (keystoretest) in /tmp/gopath/src/github.com/coreos/rkt/pkg/keystore/keystoretest\nreal    0m1.729s\nuser    0m1.487s\nsys 0m0.240s\n; time /tmp/gopath/bin/godep34 save -r ./...\nreal    0m41.054s\nuser    0m37.493s\nsys 0m4.088s\n```\n. @krnowak 32 \"works\" (but removes go-tspi because of the build tag thing); 33 breaks because of the multiple-packages issue\n\n. Thanks!\nOn Fri, Dec 11, 2015 at 4:39 PM, Edward Muller notifications@github.com\nwrote:\n\n@jonboulle https://github.com/jonboulle v35 introduces package caching\nand in testing locally, with rkt, godep save -r ./... went from a little\nless than 60s to a little less than 4s.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/pull/352#issuecomment-164089819.\n. Certainly, will do\n\nEdward Muller notifications@github.com schrieb am Fr., 11. Dez. 2015\n16:42:\n\n@jonboulle https://github.com/jonboulle PS: Please file a bug if\nsomething breaks. I am really interested in making sure I can duplicate via\na test case. A PR with a failing test is even better. ;-)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/pull/352#issuecomment-164090145.\n. Seems this got caught in https://github.com/tools/godep/pull/357\n. @freeformz indeed that is also a problem today (e.g.), but it's unrelated to this one - can we land this and fix that in a follow up?\n. > Could we possibly pass the target package name to this function and update the sep string dynamically so that the exclude only picks up repos that are local to repo being saved? \n\nAssuming that I understand this correctly (essentially, that transitive repo dependencies are \"ignored\" when calculating dependencies to be saved), it is definitely my preferred solution. IMHO it would be the intuitive/desired behaviour in the majority of cases. Effectively, the \"original path\" of such dependencies would include the prefix of the intermediate package's repo (e.g. the package is no longer canonically github.com/godbus/dbus but instead github.com/coreos/Godeps/_workspace/src/github.com/godbus/dbus)\n\n\nHonestly, the best solution to this problem is to avoid it in the first place: libraries should not use godep at all, only commands (package main) should.\n\nCan you explain the rationale here in a little more detail? I don't find it a realistic expectation that libraries always be hermetic.\n\nAnother alternative would be to continue godep's current approach of \"undoing\" import path rewriting when copying packages that have already used godep, and to add more logic to automatically run 'go get' or otherwise fetch packages that aren't readily available in GOPATH.\n\nIs it feasible for this to be implemented in such a way that would support multiple versions for dependencies?\n. Hmm interesting, so rather than relying on godep's automagical import detection, we should always be explicitly listing main packages when we invoke godep save?\n. > @jonboulle the package spec passed to godep save is what feeds godep the list of packages to inspect for 'automagical detection'.\nRight, that actually was my understanding, which is why I was surprised at your suggestion (which I misinterpreted). The thing is, godep save -r ./... github.com/zimbatm/socketmaster only partly does what I expect/want; it will a) vendor+rewrite all the package imports it discovers under all the packages in ./... (great), and b) vendor+rewrite github.com/zimbatm/socketmaster into my current $PWD/Godeps/ directory (also great). BUT, it also c) rewrites all of the imports WITHIN $GOPATH/src/github.com/zimbatm/socketmaster, which is definitely NOT what I want. Am I doing something wrong, or misunderstanding this yet again?\n. > Arguably godep save w/o any args should default to . or the contents of the Godeps/Godeps.json Packages array, if the file exists. This would probably help a lot and help people DTRT more often. Thoughts?\nHmmm are you suggesting that Godeps/Godeps.json now becomes an editable source manifest rather than something only written to by the godep tool? That is arguably much more intuitive (in my experience it's what every newcomer to godep EXPECTS to happen when they see the manifest), but totally inverting the current workflow right?\n. On Wed, Dec 2, 2015 at 3:54 PM, Edward Muller notifications@github.com\nwrote:\n\nRe Rewrites: it would rewrite and vendor any of the imports the vendored\ntool imports. But you'de want that wouldn't you? That's the only way to\nguarantee you can build that tool later.\nI only want them rewritten within the vendored version of the tool\nimports; but godep is reaching outside my current working directory and\nrewriting them in their $GOPATH source directories as well. Incidentally\nthat breaks subsequent godep save calls on those imports because then\ntheir git working trees are dirty.\n. oh, good, so you'd take a fix? :-)\nAt this stage I am pretty sure that would solve our use cases /cc @dgonyeo\n\nOn Wed, Dec 2, 2015 at 4:09 PM, Edward Muller notifications@github.com\nwrote:\n\nAhh yeah. I missed that. For instance github.com/zimbatm/socketmaster\ndoesn't have any external deps, so no rewrites. You could not use\nrewrites for now, but either way that's a bug,\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/pull/336#issuecomment-161473060.\n. On Wed, Dec 2, 2015 at 4:21 PM, Edward Muller notifications@github.com\nwrote:\nHmm. This may break how some people use godep, not sure. The way I'd\nlike godep used is that it would only rewrite packages that are specified\nvia a relative package spec (., ./, ./..., ./cmd/..., etc) and their\ndependencies. In my mind it should not rewrite other package specs at their\noriginal location(s).\n+1, agree with all these points\nBut I can see how some people may use the fully qualified package spec\nwhen doing save (e.g.: godep save github.com/me/thepackageImworkingon).\nI've also seen people construct oddities in Makefiles to enumerate packages\nand pass the fully qualified package names to godep (I don't know why\nthey do that though).\nHmm, yeah. I seem to recall there being subtle but nefarious differences in\nbehaviour between these approaches which caused us to end up very firmly on\nour current ./... invocation. But the details escape me.\n. @krnowak For posterity I suggest updating the wording of the PR OP to match the new commit message\n. @krnowak I meant here\n. LGTM\n. @krnowak time for a rebase\n@freeformz ping on this?\n. bump :-)\n. This change appears to have had a pathological effect on performance in at least one of our repos (coreos/rkt):\n\n```\n ; time /tmp/gopath/bin/godep32 save -r ./...\nreal    0m1.649s\nuser    0m1.383s\nsys 0m0.341s\n; time /tmp/gopath/bin/godep33 save -r ./...\ngodep: found packages keygen.go (main) and keymap.go (keystoretest) in /tmp/gopath/src/github.com/coreos/rkt/pkg/keystore/keystoretest\nreal    0m1.729s\nuser    0m1.487s\nsys 0m0.240s\n; time /tmp/gopath/bin/godep34 save -r ./...\nreal    0m41.054s\nuser    0m37.493s\nsys 0m4.088s\n```\n. @krnowak 32 \"works\" (but removes go-tspi because of the build tag thing); 33 breaks because of the multiple-packages issue\n\n. Thanks!\nOn Fri, Dec 11, 2015 at 4:39 PM, Edward Muller notifications@github.com\nwrote:\n\n@jonboulle https://github.com/jonboulle v35 introduces package caching\nand in testing locally, with rkt, godep save -r ./... went from a little\nless than 60s to a little less than 4s.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/pull/352#issuecomment-164089819.\n. Certainly, will do\n\nEdward Muller notifications@github.com schrieb am Fr., 11. Dez. 2015\n16:42:\n\n@jonboulle https://github.com/jonboulle PS: Please file a bug if\nsomething breaks. I am really interested in making sure I can duplicate via\na test case. A PR with a failing test is even better. ;-)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/pull/352#issuecomment-164090145.\n. Seems this got caught in https://github.com/tools/godep/pull/357\n. @freeformz indeed that is also a problem today (e.g.), but it's unrelated to this one - can we land this and fix that in a follow up?\n. \n",
    "dmitris": "Keith, regarding your advice in https://github.com/tools/godep/issues/109#issuecomment-52143649 \"libraries should not use godep at all, only commands (package main) should.\" - would it be possible to put it in the README.md?  I think it would help to clarify the intended application scope and guide the newcomers.  (https://github.com/jingweno/nut gives a similar advice: nut is specifically designed to manage dependencies for a binary program. If you are making a library, please follow the standard Go way.)\n. lack of documentaiton on \"godoc save -r\" creates confusion among users - see https://go-review.googlesource.com/#/c/8969/ for an example (review comment: \"As I understand it, godep is a not a vendoring tool in the sense described in the faq (although it copies the source code, it does so by manipulating $GOPATH, not by rewriting import paths).\")\n. Keith, regarding your advice in https://github.com/tools/godep/issues/109#issuecomment-52143649 \"libraries should not use godep at all, only commands (package main) should.\" - would it be possible to put it in the README.md?  I think it would help to clarify the intended application scope and guide the newcomers.  (https://github.com/jingweno/nut gives a similar advice: nut is specifically designed to manage dependencies for a binary program. If you are making a library, please follow the standard Go way.)\n. lack of documentaiton on \"godoc save -r\" creates confusion among users - see https://go-review.googlesource.com/#/c/8969/ for an example (review comment: \"As I understand it, godep is a not a vendoring tool in the sense described in the faq (although it copies the source code, it does so by manipulating $GOPATH, not by rewriting import paths).\")\n. ",
    "abourget": "@kr @dmitris ^^ totally true, I searched for that \"commands only\" thing all over the place.. putting it in the README would be great!  I couldn't grasp how it would make sense in a repo with many packages..\n. +111 !\n. no ? :)\n. Couldn't https://github.com/tools/godep/blob/master/save.go#L265-L292 be replaced by some:\noutput, err = exec.Command(\"git\", \"ls-files\").Output()\n...\nfor _, file := range outputLines {\n    copyPkgFile(file)\n}\nand some equivalent for Mercurial ?  Do you see a problem doing that ?\nI'd implement it if you think it could get merged.\n. No 4 seems good to me !\n. Did you try godep save ./...  ? that's with three dots\n. What I would have liked is that when you re-run godep save.. it reissues the same parameter as was saved in Package in the Godeps.json file .. having to remember what was the full command you typed is error prone.\n. @kr @dmitris ^^ totally true, I searched for that \"commands only\" thing all over the place.. putting it in the README would be great!  I couldn't grasp how it would make sense in a repo with many packages..\n. +111 !\n. no ? :)\n. Couldn't https://github.com/tools/godep/blob/master/save.go#L265-L292 be replaced by some:\noutput, err = exec.Command(\"git\", \"ls-files\").Output()\n...\nfor _, file := range outputLines {\n    copyPkgFile(file)\n}\nand some equivalent for Mercurial ?  Do you see a problem doing that ?\nI'd implement it if you think it could get merged.\n. No 4 seems good to me !\n. Did you try godep save ./...  ? that's with three dots\n. What I would have liked is that when you re-run godep save.. it reissues the same parameter as was saved in Package in the Godeps.json file .. having to remember what was the full command you typed is error prone.\n. ",
    "titanous": "Actually, this looks like #84.\n. Awesome!\n. Actually, this looks like #84.\n. Awesome!\n. ",
    "bigwhite": "encounter the same problem!\n. I solve the problem by doing 2 things below:\n1) git init and commit  under your project's folder\n2) git init and commit under your dependency projects' folder\nthe path in godep error output is wrong. \n. encounter the same problem!\n. I solve the problem by doing 2 things below:\n1) git init and commit  under your project's folder\n2) git init and commit under your dependency projects' folder\nthe path in godep error output is wrong. \n. ",
    "el3ctro-": "I had this problem too, I'm on OSX Mavericks.  Following your directions bigwhite, initializing the repo in my src/project_name and also re-initializing the repo elsewhere seemed to work.  Thanks.\n. I had this problem too, I'm on OSX Mavericks.  Following your directions bigwhite, initializing the repo in my src/project_name and also re-initializing the repo elsewhere seemed to work.  Thanks.\n. ",
    "ddo": "It's golang/tool/vcs.FromDir error, it should be return package dir path instead of the golang root src.\nSo please make sure all of your dependencies are under code version control(git, etc...)\n. It's golang/tool/vcs.FromDir error, it should be return package dir path instead of the golang root src.\nSo please make sure all of your dependencies are under code version control(git, etc...)\n. ",
    "ahmetb": ":+1: this is really annoying.\n. @fkautz have you found a way to update this one yet? :smile: \n. +1 for this. I think godep can preserve LICENSE* or COPYING* files in the vendored source trees. @cactus are you going to be working on this?\n. @kr are you ok with having this feature preserving LICENSEs by default?\n. @client9 the list above looks enough but I'm not sure if we need READMEs to be vendored. I know they might have a license clauses in them, but maybe include them if they contain the word \u201clicense\u201d?\n. @client9 hmm maybe even that's a bit overkill. I think anyone serious with the licenses would just have it in a separate file. I also looked at go-license repo and spotted an issue with case-sensitivity in file names. Other than that, we should be able to just use it.\n. @client9 I think a method returning license filenmes would be just fine. I don't think we need the licenses parameter above. Something like \nfunc licenseFiles(dir string) (licenseFiles []string)\nwould be more than enough.\n. Oh well I couldn't repro either. Thanks @freeformz for taking a look.\n. @freeformz not really. I didn't do that.\n. maybe it was because the gopkg.in/check.v1 is not imported in the program code but test code. Now that doesn't repro if I import _ \"gopkg.in/check.v1\" as well.\n. +1 Are you folks planning to implement?\n. @freeformz interesting, it's already in my first message.\n. I doubt it . I guess it's something wrong with my setup. Nobody has ever hit this before and it's not a big problem for me either, we can close if you like.\n. wow, that's what happens when I edit Godeps manually with vim. Such a /facepalm.\nSorry for the trouble.\n. :+1: this is really annoying.\n. @fkautz have you found a way to update this one yet? :smile: \n. +1 for this. I think godep can preserve LICENSE* or COPYING* files in the vendored source trees. @cactus are you going to be working on this?\n. @kr are you ok with having this feature preserving LICENSEs by default?\n. @client9 the list above looks enough but I'm not sure if we need READMEs to be vendored. I know they might have a license clauses in them, but maybe include them if they contain the word \u201clicense\u201d?\n. @client9 hmm maybe even that's a bit overkill. I think anyone serious with the licenses would just have it in a separate file. I also looked at go-license repo and spotted an issue with case-sensitivity in file names. Other than that, we should be able to just use it.\n. @client9 I think a method returning license filenmes would be just fine. I don't think we need the licenses parameter above. Something like \nfunc licenseFiles(dir string) (licenseFiles []string)\nwould be more than enough.\n. Oh well I couldn't repro either. Thanks @freeformz for taking a look.\n. @freeformz not really. I didn't do that.\n. maybe it was because the gopkg.in/check.v1 is not imported in the program code but test code. Now that doesn't repro if I import _ \"gopkg.in/check.v1\" as well.\n. +1 Are you folks planning to implement?\n. @freeformz interesting, it's already in my first message.\n. I doubt it . I guess it's something wrong with my setup. Nobody has ever hit this before and it's not a big problem for me either, we can close if you like.\n. wow, that's what happens when I edit Godeps manually with vim. Such a /facepalm.\nSorry for the trouble.\n. ",
    "tnolet": "My builds are now failing because of this. I can run\ngodep save -r ./...\nwithout error, but godep restore still gives:\ngodep: unable to detect version control system for code.google.com/ path\n. My builds are now failing because of this. I can run\ngodep save -r ./...\nwithout error, but godep restore still gives:\ngodep: unable to detect version control system for code.google.com/ path\n. ",
    "rberger": "Suddenly having this problem with all our go projects that use godep.\nAll our repos and dependencies have a .git or .hg in them (I.e. they have been VCS initialized/installed)\nHelp!\n. Figured it out.\nRemove any entries that have moved from code.google.com from your Godeps/Godeps.json file. They should have moved to another repo as code.google.com is shutting down by Jan 2016 (announced in mid March). \nMost of the Go developers seem to be moving now. That is why its effecting people in waves as the particular projects each wave is using gets moved...\n. Suddenly having this problem with all our go projects that use godep.\nAll our repos and dependencies have a .git or .hg in them (I.e. they have been VCS initialized/installed)\nHelp!\n. Figured it out.\nRemove any entries that have moved from code.google.com from your Godeps/Godeps.json file. They should have moved to another repo as code.google.com is shutting down by Jan 2016 (announced in mid March). \nMost of the Go developers seem to be moving now. That is why its effecting people in waves as the particular projects each wave is using gets moved...\n. ",
    "abhat": "+1. I am trying to import some of the Kubernetes' pkgs in my go project. I did a git clone of the Kubernetes repository and updated GOPATH to be: /home/abhat/gocode:/home/abhat/gocode/src/github.com/GoogleCloudPlatform/kubernetes/Godeps/_workspace/\nHere are the errors that godep save -r spews out.\nhttps://gist.github.com/abhat/0503971bbf9d2a4e6a7f\nAm I missing something?\n. @freeformz +1. For posterity, I was missing a 'godep restore step' on the Kubernetes clone before calling 'godep save'. \n. +1. I am trying to import some of the Kubernetes' pkgs in my go project. I did a git clone of the Kubernetes repository and updated GOPATH to be: /home/abhat/gocode:/home/abhat/gocode/src/github.com/GoogleCloudPlatform/kubernetes/Godeps/_workspace/\nHere are the errors that godep save -r spews out.\nhttps://gist.github.com/abhat/0503971bbf9d2a4e6a7f\nAm I missing something?\n. @freeformz +1. For posterity, I was missing a 'godep restore step' on the Kubernetes clone before calling 'godep save'. \n. ",
    "themihai": "I'm using git and I still get this error. The path reported is the Go source directory, it's not even GOPATH.\nbash-3.2$ git status\nOn branch master\nnothing to commit, working directory clean\nbash-3.2$ godep save\ngodep: dirty working tree: /Users/myuser/go/src/comp.io/dev\ngodep: directory \"/Users/myuser/go/src\" is not using a known version control system\ngodep: dirty working tree: /Users/myuser/go/src/comp.io/hamux/errors\ngodep: dirty working tree: /Users/myuser/go/src/comp.io/tools/evm\ngodep: directory \"/Users/myuser/gosrc/src\" is not using a known version control system\ngodep: error loading dependencies\n. @freeformz there doesn't seem to be any --version flag. The git head is 58d90f262c13357d3203e67a33c6f7a9382f9223\n. I'm using git and I still get this error. The path reported is the Go source directory, it's not even GOPATH.\nbash-3.2$ git status\nOn branch master\nnothing to commit, working directory clean\nbash-3.2$ godep save\ngodep: dirty working tree: /Users/myuser/go/src/comp.io/dev\ngodep: directory \"/Users/myuser/go/src\" is not using a known version control system\ngodep: dirty working tree: /Users/myuser/go/src/comp.io/hamux/errors\ngodep: dirty working tree: /Users/myuser/go/src/comp.io/tools/evm\ngodep: directory \"/Users/myuser/gosrc/src\" is not using a known version control system\ngodep: error loading dependencies\n. @freeformz there doesn't seem to be any --version flag. The git head is 58d90f262c13357d3203e67a33c6f7a9382f9223\n. ",
    "ghost": "In my project we don't use separate repositories for some other our projects, which are nevertheless linked to the main project.\nIs there any way to avoid having to deal with VCS at all? Why is this even needed?\n. @freeformz I might be totally misunderstanding the purpose of this tool then. I wasn't after managing dependencies, I wanted to discover them (as in package X inadvertently introduced dependency on package Y by importing package Z, which in turn imports... and so on). Is this something that godep is supposed to do?\n. @freeformz Would it be possible then to skip the version control check and the copying step? I'm only interested in analysis.\n. +1, a godep exec command would be supremely useful.\n. That's a clever workaround; thanks for the suggestion. I hastily tried a variant of that, but I don't think I referred to contents of the imports, so they probably got optimized away!\n. Related: https://github.com/tools/godep/issues/140#issuecomment-98222302\nFix: https://github.com/tools/godep/pull/166\n. @kr This problem could be fixed by use of Godep for your Godep dependencies, lol.\n. i think you need to run the upgrade like it says on the main readme ?\n. Thanks!\n. SO, is this a bug ? Or misuse by me ? \nOnce i did a go get golang.org/x/sys/unix, then godep was happy.\nSo it should be included in godep binary or whatever ? \n```\ndw99-MacBook-Pro:backend apple$ godep save -r\ngodep: Unable to find dependent package golang.org/x/sys/unix in context of /Users/apple/workspace/go/src/github.com/Sirupsen/logrus\ngedw99-MacBook-Pro:backend apple$ go get golang.org/x/sys/unix\ngedw99-MacBook-Pro:backend apple$ godep save -r\ngedw99-MacBook-Pro:backend apple$ \n```\nMy json file includes it now\n```\n\"GoVersion\": \"go1.5\",\n    \"Deps\": [\n        {\n            \"ImportPath\": \"github.com/Sirupsen/logrus\",\n            \"Comment\": \"v0.8.7-53-g446d1c1\",\n            \"Rev\": \"446d1c146faa8ed3f4218f056fcd165f6bcfda81\"\n        },\n        {\n            \"ImportPath\": \"github.com/cenkalti/backoff\",\n            \"Rev\": \"4dc77674aceaabba2c7e3da25d4c823edfb73f99\"\n        },\n        {\n            \"ImportPath\": \"github.com/dancannon/gorethink\",\n            \"Comment\": \"v1.2.0\",\n            \"Rev\": \"a124c9663325ed9f7fb669d17c69961b59151e6e\"\n        },\n        {\n            \"ImportPath\": \"github.com/golang/protobuf/proto\",\n            \"Rev\": \"68415e7123da32b07eab49c96d2c4d6158360e9b\"\n        },\n        {\n            \"ImportPath\": \"github.com/gorilla/context\",\n            \"Rev\": \"1c83b3eabd45b6d76072b66b746c20815fb2872d\"\n        },\n        {\n            \"ImportPath\": \"github.com/gorilla/mux\",\n            \"Rev\": \"9c068cf16d982f8bd444b8c352acbeec34c4fe5b\"\n        },\n        {\n            \"ImportPath\": \"github.com/gorilla/websocket\",\n            \"Rev\": \"3986be78bf859e01f01af631ad76da5b269d270c\"\n        },\n        {\n            \"ImportPath\": \"github.com/hailocab/go-hostpool\",\n            \"Rev\": \"faaa51ba3a12563c543dfcca581b81fa2c2de95e\"\n        },\n        {\n            \"ImportPath\": \"golang.org/x/sys/unix\",\n            \"Rev\": \"833a04a10549a95dc34458c195cbad61bbb6cb4d\"\n        },\n        {\n            \"ImportPath\": \"gopkg.in/fatih/pool.v2\",\n            \"Rev\": \"cba550ebf9bce999a02e963296d4bc7a486cb715\"\n        }\n    ]\n}\n```\n. In my project we don't use separate repositories for some other our projects, which are nevertheless linked to the main project.\nIs there any way to avoid having to deal with VCS at all? Why is this even needed?\n. @freeformz I might be totally misunderstanding the purpose of this tool then. I wasn't after managing dependencies, I wanted to discover them (as in package X inadvertently introduced dependency on package Y by importing package Z, which in turn imports... and so on). Is this something that godep is supposed to do?\n. @freeformz Would it be possible then to skip the version control check and the copying step? I'm only interested in analysis.\n. +1, a godep exec command would be supremely useful.\n. That's a clever workaround; thanks for the suggestion. I hastily tried a variant of that, but I don't think I referred to contents of the imports, so they probably got optimized away!\n. Related: https://github.com/tools/godep/issues/140#issuecomment-98222302\nFix: https://github.com/tools/godep/pull/166\n. @kr This problem could be fixed by use of Godep for your Godep dependencies, lol.\n. i think you need to run the upgrade like it says on the main readme ?\n. Thanks!\n. SO, is this a bug ? Or misuse by me ? \nOnce i did a go get golang.org/x/sys/unix, then godep was happy.\nSo it should be included in godep binary or whatever ? \n```\ndw99-MacBook-Pro:backend apple$ godep save -r\ngodep: Unable to find dependent package golang.org/x/sys/unix in context of /Users/apple/workspace/go/src/github.com/Sirupsen/logrus\ngedw99-MacBook-Pro:backend apple$ go get golang.org/x/sys/unix\ngedw99-MacBook-Pro:backend apple$ godep save -r\ngedw99-MacBook-Pro:backend apple$ \n```\nMy json file includes it now\n```\n\"GoVersion\": \"go1.5\",\n    \"Deps\": [\n        {\n            \"ImportPath\": \"github.com/Sirupsen/logrus\",\n            \"Comment\": \"v0.8.7-53-g446d1c1\",\n            \"Rev\": \"446d1c146faa8ed3f4218f056fcd165f6bcfda81\"\n        },\n        {\n            \"ImportPath\": \"github.com/cenkalti/backoff\",\n            \"Rev\": \"4dc77674aceaabba2c7e3da25d4c823edfb73f99\"\n        },\n        {\n            \"ImportPath\": \"github.com/dancannon/gorethink\",\n            \"Comment\": \"v1.2.0\",\n            \"Rev\": \"a124c9663325ed9f7fb669d17c69961b59151e6e\"\n        },\n        {\n            \"ImportPath\": \"github.com/golang/protobuf/proto\",\n            \"Rev\": \"68415e7123da32b07eab49c96d2c4d6158360e9b\"\n        },\n        {\n            \"ImportPath\": \"github.com/gorilla/context\",\n            \"Rev\": \"1c83b3eabd45b6d76072b66b746c20815fb2872d\"\n        },\n        {\n            \"ImportPath\": \"github.com/gorilla/mux\",\n            \"Rev\": \"9c068cf16d982f8bd444b8c352acbeec34c4fe5b\"\n        },\n        {\n            \"ImportPath\": \"github.com/gorilla/websocket\",\n            \"Rev\": \"3986be78bf859e01f01af631ad76da5b269d270c\"\n        },\n        {\n            \"ImportPath\": \"github.com/hailocab/go-hostpool\",\n            \"Rev\": \"faaa51ba3a12563c543dfcca581b81fa2c2de95e\"\n        },\n        {\n            \"ImportPath\": \"golang.org/x/sys/unix\",\n            \"Rev\": \"833a04a10549a95dc34458c195cbad61bbb6cb4d\"\n        },\n        {\n            \"ImportPath\": \"gopkg.in/fatih/pool.v2\",\n            \"Rev\": \"cba550ebf9bce999a02e963296d4bc7a486cb715\"\n        }\n    ]\n}\n```\n. ",
    "binary132": "AFAICT, this issue happens when one of your dependencies is not under ITS OWN version control.\nThe problem I'm facing is that we use one monolithic repository for all of our code, so saving deps from inside one project, referring to another project in the tree, is impossible, since all the projects are simultaneously version-controlled.\n\ud83d\ude2d \n. It's a bit of a conundrum for me as well.  I think we're going to fall back to simply copying things by hand into a vendor path.  It's like this:\n``` bash\n.git folder in 'core'\ncore/common/src/go/\n- in 'go': a build script, a readme, and a script to set GOPATH, and then under 'go'....\nsrc/proj1/...\nsrc/proj2/...\nso proj1 main.go is $GIT_ROOT/common/src/go/src/proj1/main.go\nproj1, proj2 have external deps as well as deps within this tree\n```\nI'd probably want to run godep in $GIT_ROOT/common/src/go with GOPATH set to $GIT_ROOT/common/src/go:$GOPATH, and then any deps not in the first piece of GOPATH would be searched for in the next GOPATH segment.\nThere's just no way to expect the internal deps to get versioned.  I'd be happy with simply not breaking on godep save and having godep save copy external deps only.\n. I noticed a number of blog posts about this exact topic.  It seems to be a pattern some people use.\n. AFAICT, this issue happens when one of your dependencies is not under ITS OWN version control.\nThe problem I'm facing is that we use one monolithic repository for all of our code, so saving deps from inside one project, referring to another project in the tree, is impossible, since all the projects are simultaneously version-controlled.\n\ud83d\ude2d \n. It's a bit of a conundrum for me as well.  I think we're going to fall back to simply copying things by hand into a vendor path.  It's like this:\n``` bash\n.git folder in 'core'\ncore/common/src/go/\n- in 'go': a build script, a readme, and a script to set GOPATH, and then under 'go'....\nsrc/proj1/...\nsrc/proj2/...\nso proj1 main.go is $GIT_ROOT/common/src/go/src/proj1/main.go\nproj1, proj2 have external deps as well as deps within this tree\n```\nI'd probably want to run godep in $GIT_ROOT/common/src/go with GOPATH set to $GIT_ROOT/common/src/go:$GOPATH, and then any deps not in the first piece of GOPATH would be searched for in the next GOPATH segment.\nThere's just no way to expect the internal deps to get versioned.  I'd be happy with simply not breaking on godep save and having godep save copy external deps only.\n. I noticed a number of blog posts about this exact topic.  It seems to be a pattern some people use.\n. ",
    "mauriciosl": "I too need this :(\nI'm using https://github.com/rainycape/magick and it has the backend configurable through -tags\n. I too need this :(\nI'm using https://github.com/rainycape/magick and it has the backend configurable through -tags\n. ",
    "whazzmaster": "I'm also interested in this PR; I'd much rather use an official release rather than to fork it and apply the patch just to run goose on heroku.\n. I'm also interested in this PR; I'd much rather use an official release rather than to fork it and apply the patch just to run goose on heroku.\n. ",
    "jsha": "For the Let's Encrypt project (letsencrypt.org), we depend on tags to generate the correct dependency graph for godep, so the main branch doesn't work for us. The pull request fixes a critical issue for us, so currently we have to tell developers to fetch and install this branch instead of the default godep. It would be really helpful if you could merge this, @kr!\nThanks,\nJacob\n. @freeformz: That sounds like the best solution to me as well, thanks!\n. For the Let's Encrypt project (letsencrypt.org), we depend on tags to generate the correct dependency graph for godep, so the main branch doesn't work for us. The pull request fixes a critical issue for us, so currently we have to tell developers to fetch and install this branch instead of the default godep. It would be really helpful if you could merge this, @kr!\nThanks,\nJacob\n. @freeformz: That sounds like the best solution to me as well, thanks!\n. ",
    "leehambley": "We just put an app into production, and we ran into this, we have conditional build-time metrics and analytics that rely on an external package (Rollbar), hidden behind builds tags, godep can't see it.\nWe've worked around it by importing the Rollbar package to _ in a // +build ignore version of the file, which is less than ideal, since we still have to manually rewrite the import path in our // +build release file.\n. We just put an app into production, and we ran into this, we have conditional build-time metrics and analytics that rely on an external package (Rollbar), hidden behind builds tags, godep can't see it.\nWe've worked around it by importing the Rollbar package to _ in a // +build ignore version of the file, which is less than ideal, since we still have to manually rewrite the import path in our // +build release file.\n. ",
    "slantview": ":+1: This looks really cool.\n. :+1: This looks really cool.\n. ",
    "nathany": "I'm just trying to replace one dependency in main.go following these instructions.\nDoes their main.go and Godeps.json look right to you?\nOh... I see your second response now. godep save -r gopkg.in/fsnotify.v1 had the same problem.\ngodep save -r reports a different issue\ngodep: cannot find package \"github.com/coreos/coreos-cloudinit/third_party/launchpad.net/goyaml\" in any of:\nlooking into that more now.\n. it seems like it's complaining about things outside of the workspace. Why would it be looking for?\n/Users/nathany/src/github.com/coreos/coreos-cloudinit/third_party/launchpad.net/goyaml\nIt's not going to find it because that has changed.\nI don't want to update their other dependencies, just replace fsnotify.\nTried godep restore. Hit me with a tonne of merge conflicts on code.google.com/p/go.exp/fsnotify.\n. That godep restore did put launchpad.net/goyaml into /Users/nathany/src/github.com/coreos/coreos-cloudinit/third_party though. After that godep save -r is working, so I think it's good.\n. I am planning to give a talk on packages on Monday though... and figured I should include a slide or two on godep. The workflow with -r isn't entirely clear to me yet.\n. Okay. That explains it.\n. Btw. Thanks for helping me out last night.\n. Though it wouldn't help if paths became internal/github.com/...\n. Do you think it makes sense to keep modifying godep, or perhaps the directory change is a good time to come up with a tool under a new name (possibly using a lot of the same code)?\n. @ngrilly It just seems a little awkward to support multiple ways of doing it from a single tool, as a user. \nBut eventually godep will get there (once -r is gone and only one directory structure is supported, at least for new projects).\n. Maybe instead of choose it could act like a git merge. The dependencies conflict and must be manually chosen, or they happen to be identical and automatically do there thing.\nAnother option might be to take the latest dependency with a warning or requiring a flag, but that would require metadata, yes?\n. I'm just trying to replace one dependency in main.go following these instructions.\nDoes their main.go and Godeps.json look right to you?\nOh... I see your second response now. godep save -r gopkg.in/fsnotify.v1 had the same problem.\ngodep save -r reports a different issue\ngodep: cannot find package \"github.com/coreos/coreos-cloudinit/third_party/launchpad.net/goyaml\" in any of:\nlooking into that more now.\n. it seems like it's complaining about things outside of the workspace. Why would it be looking for?\n/Users/nathany/src/github.com/coreos/coreos-cloudinit/third_party/launchpad.net/goyaml\nIt's not going to find it because that has changed.\nI don't want to update their other dependencies, just replace fsnotify.\nTried godep restore. Hit me with a tonne of merge conflicts on code.google.com/p/go.exp/fsnotify.\n. That godep restore did put launchpad.net/goyaml into /Users/nathany/src/github.com/coreos/coreos-cloudinit/third_party though. After that godep save -r is working, so I think it's good.\n. I am planning to give a talk on packages on Monday though... and figured I should include a slide or two on godep. The workflow with -r isn't entirely clear to me yet.\n. Okay. That explains it.\n. Btw. Thanks for helping me out last night.\n. Though it wouldn't help if paths became internal/github.com/...\n. Do you think it makes sense to keep modifying godep, or perhaps the directory change is a good time to come up with a tool under a new name (possibly using a lot of the same code)?\n. @ngrilly It just seems a little awkward to support multiple ways of doing it from a single tool, as a user. \nBut eventually godep will get there (once -r is gone and only one directory structure is supported, at least for new projects).\n. Maybe instead of choose it could act like a git merge. The dependencies conflict and must be manually chosen, or they happen to be identical and automatically do there thing.\nAnother option might be to take the latest dependency with a warning or requiring a flag, but that would require metadata, yes?\n. ",
    "ifraixedes": "+1 to merge it, it's not clear that the option exists\n. +1 to merge it, it's not clear that the option exists\n. ",
    "jmervine": "+1\n. +1 \n. @nl5887 and I must have been working on this at the same time, as #188 wasn't there when I first looked. His implementation is better. Cheers!\n. +1\n. +1 \n. @nl5887 and I must have been working on this at the same time, as #188 wasn't there when I first looked. His implementation is better. Cheers!\n. ",
    "alext": "Hi,\nThe trouble with git commit numbers is that they're non-incrementing, therefore newer versions wouldn't necessarily have a higher version than previous ones.\nGiven at least one version tag in the repo, I could then use version numbers generated by git describe.  For example, if commit b23e2023 (to pick one at random) was tagged with 0.0.1 then git describe would return 0.0.1-4-gedcaa96 for current master.\nthanks for looking at this,\nAlex\n. That sounds good to me.\nthanks,\nAlex\n. Hi,\nThe trouble with git commit numbers is that they're non-incrementing, therefore newer versions wouldn't necessarily have a higher version than previous ones.\nGiven at least one version tag in the repo, I could then use version numbers generated by git describe.  For example, if commit b23e2023 (to pick one at random) was tagged with 0.0.1 then git describe would return 0.0.1-4-gedcaa96 for current master.\nthanks for looking at this,\nAlex\n. That sounds good to me.\nthanks,\nAlex\n. ",
    "rgarcia": "What about a third method?\n- Copy d to r/c/Godeps/_workspace/src/d and copy r/p to r/c/Godeps/_workspace/src/r/p.  Change any import statement in r/c and the tree rooted at r/c from \"d\" to \u201cr/c/Godeps/_workspace/src/d\u201d and from \u201cr/p\u201d to \u201cr/c/Godeps/_workspace/src/r/p\u201d. Note that import statements in r/p remain unchanged.\nPut another way, basically treat r/c as if it were a totally different repository. Still has the problem of having to run godep save -r to pull in changes to r/p in r/c, but drives home the fact that only package mains should vendor.\n. What about a third method?\n- Copy d to r/c/Godeps/_workspace/src/d and copy r/p to r/c/Godeps/_workspace/src/r/p.  Change any import statement in r/c and the tree rooted at r/c from \"d\" to \u201cr/c/Godeps/_workspace/src/d\u201d and from \u201cr/p\u201d to \u201cr/c/Godeps/_workspace/src/r/p\u201d. Note that import statements in r/p remain unchanged.\nPut another way, basically treat r/c as if it were a totally different repository. Still has the problem of having to run godep save -r to pull in changes to r/p in r/c, but drives home the fact that only package mains should vendor.\n. ",
    "colemickens": "How are people handling this in practice?\n. How are people handling this in practice?\n. ",
    "mariokostelac": "seems nice. I've created less verbose restore command, but It seems that pull requests have not been accepted for some time. I hope it's going to merge sometime.\n. Just add Godeps.json file to the repo, and __workspace_ to the .gitignore list :).\nWhile your code should be fully included in your repo, dependencies have to be just referenced somehow (godep.json, package.json, git submodule... you choose), and nothing more than that.\nThe same tactics apply to npm, bower, apt and all other package managers.\nYour repo - your things + references to vendor libs (of course, when it is possible, you cannot reference sourceforge zip file).\n. I do not develop Godep, but I was taught that vendor code should not be included in the repo (we know the reasons).  @kr should say what he thinks about that and make it clear is that a bug (I think it is not) or  he thinks that we should deploy to heroku o some other way.\nEdit: it seems that http://mmcgrana.github.io/2012/09/getting-started-with-go-on-heroku.html says we should include dependencies to the repo. It seems wierd from my point of view.\n. That way is called vendoring so please watch https://www.youtube.com/watch?v=c3dW80eO88I (Dave Cheney on reproducible builds) and try to think about that again. I also thought it's stupid, now I think different (keep in mind that there is no real package provider like npm or cargo that would keep packages there forever).\n. seems nice. I've created less verbose restore command, but It seems that pull requests have not been accepted for some time. I hope it's going to merge sometime.\n. Just add Godeps.json file to the repo, and __workspace_ to the .gitignore list :).\nWhile your code should be fully included in your repo, dependencies have to be just referenced somehow (godep.json, package.json, git submodule... you choose), and nothing more than that.\nThe same tactics apply to npm, bower, apt and all other package managers.\nYour repo - your things + references to vendor libs (of course, when it is possible, you cannot reference sourceforge zip file).\n. I do not develop Godep, but I was taught that vendor code should not be included in the repo (we know the reasons).  @kr should say what he thinks about that and make it clear is that a bug (I think it is not) or  he thinks that we should deploy to heroku o some other way.\nEdit: it seems that http://mmcgrana.github.io/2012/09/getting-started-with-go-on-heroku.html says we should include dependencies to the repo. It seems wierd from my point of view.\n. That way is called vendoring so please watch https://www.youtube.com/watch?v=c3dW80eO88I (Dave Cheney on reproducible builds) and try to think about that again. I also thought it's stupid, now I think different (keep in mind that there is no real package provider like npm or cargo that would keep packages there forever).\n. ",
    "Soulou": "@freeformz sorry I've just seen the comments, I handle that, no problem.\n. Rebased en patched.\n. @freeformz sorry I've just seen the comments, I handle that, no problem.\n. Rebased en patched.\n. ",
    "hurrymaplelad": "Looks to me like the heroku buildpack expects _workspace to be committed.  If it sees Godeps, it will only godep go install, not godep go get or godep restore.  Is this intentional, or just a PR waiting to happen?\n. Thanks @rlmcpherson, that clears things up quite a bit.\nI'm still wrapping my head around go dependencies.  Mind walking me through a scenario to convince me committing _workspace is reasonable?\nSay I've got a server project foo that depends on library bar, and both depend on library baz.  Both foo and bar manage their dependencies with godeps.  \nWhen I go get http://bar will I end up with foo/Godeps/_workspace/src/bar/_workspace/src/baz and foo/Godeps/_workspace/src/baz, with foo and bar finding their respective versions?\n. Looks to me like the heroku buildpack expects _workspace to be committed.  If it sees Godeps, it will only godep go install, not godep go get or godep restore.  Is this intentional, or just a PR waiting to happen?\n. Thanks @rlmcpherson, that clears things up quite a bit.\nI'm still wrapping my head around go dependencies.  Mind walking me through a scenario to convince me committing _workspace is reasonable?\nSay I've got a server project foo that depends on library bar, and both depend on library baz.  Both foo and bar manage their dependencies with godeps.  \nWhen I go get http://bar will I end up with foo/Godeps/_workspace/src/bar/_workspace/src/baz and foo/Godeps/_workspace/src/baz, with foo and bar finding their respective versions?\n. ",
    "rlmcpherson": "The intended use of godep is to vendor dependencies and commit the _workspace directory to version control. See the proposal document by @kr linked in #123 (proposal: http://goo.gl/RpYs8e) As discussed in that proposal, godep used to have a mode (-copy=false) that supported not vendoring the dependencies. My guess is that the ambiguous language in the Readme may be due to that. This mode has been removed as documented in #123. \n. The intended use of godep is to vendor dependencies and commit the _workspace directory to version control. See the proposal document by @kr linked in #123 (proposal: http://goo.gl/RpYs8e) As discussed in that proposal, godep used to have a mode (-copy=false) that supported not vendoring the dependencies. My guess is that the ambiguous language in the Readme may be due to that. This mode has been removed as documented in #123. \n. ",
    "bithavoc": "Please merge the referenced commit by @hurrymaplelad, this is very confusing.\n. @antonholmquist check this comment by @kr https://github.com/kr/heroku-buildpack-go/issues/65#issuecomment-62608624\n. Please merge the referenced commit by @hurrymaplelad, this is very confusing.\n. @antonholmquist check this comment by @kr https://github.com/kr/heroku-buildpack-go/issues/65#issuecomment-62608624\n. ",
    "IvanMalison": "The fact that the official way to manage dependencies is to commit the whole _workspaces directory deeply offends my sensibilities. Its really hard for me to imagine a good reason for this. It seems like the dependencies should be part of a submodule at the very least to keep the repo history clean.\nAlso the comment/issue from heroku buildpack is gone. It would be great if the README explained the rationale for thsi practice.\n. The fact that the official way to manage dependencies is to commit the whole _workspaces directory deeply offends my sensibilities. Its really hard for me to imagine a good reason for this. It seems like the dependencies should be part of a submodule at the very least to keep the repo history clean.\nAlso the comment/issue from heroku buildpack is gone. It would be great if the README explained the rationale for thsi practice.\n. ",
    "c4pt0r": "need this, thanks\n. need this, thanks\n. ",
    "porjo": "+1\n152 is similar\n. +1\n152 is similar\n. ",
    "svanharmelen": "Since no reaction at all, I'll just close this one...\n. Since no reaction at all, I'll just close this one...\n. ",
    "bohlander": "I have this same issue\n. I have this same issue\n. ",
    "s3ththompson": "Me too.  I'm trying to get builds working on Travis CI and am running into this issue.\n. Me too.  I'm trying to get builds working on Travis CI and am running into this issue.\n. ",
    "schmitch": "Current I can't update sub packages too.\nmy Godeps.json looks like that:\n{\n            \"ImportPath\": \"stash.envisia.de/envisia/libs/auth\",\n            \"Rev\": \"ac02a7d3a7edba3d42fc51eb06cac2fdcb1206dc\"\n        },\n        {\n            \"ImportPath\": \"stash.envisia.de/envisia/libs/client\",\n            \"Rev\": \"ac02a7d3a7edba3d42fc51eb06cac2fdcb1206dc\"\n        },\n        {\n            \"ImportPath\": \"stash.envisia.de/envisia/libs/config\",\n            \"Rev\": \"ac02a7d3a7edba3d42fc51eb06cac2fdcb1206dc\"\n        }\nif i just use godep update without anything I get something like that happens when i added godep gopath:\ngodep: directory \"/Users/schmitch/go/src/stash.envisia.de/envisia/crm/Godeps/_workspace/src\" is not using a known version control system\n. Current I can't update sub packages too.\nmy Godeps.json looks like that:\n{\n            \"ImportPath\": \"stash.envisia.de/envisia/libs/auth\",\n            \"Rev\": \"ac02a7d3a7edba3d42fc51eb06cac2fdcb1206dc\"\n        },\n        {\n            \"ImportPath\": \"stash.envisia.de/envisia/libs/client\",\n            \"Rev\": \"ac02a7d3a7edba3d42fc51eb06cac2fdcb1206dc\"\n        },\n        {\n            \"ImportPath\": \"stash.envisia.de/envisia/libs/config\",\n            \"Rev\": \"ac02a7d3a7edba3d42fc51eb06cac2fdcb1206dc\"\n        }\nif i just use godep update without anything I get something like that happens when i added godep gopath:\ngodep: directory \"/Users/schmitch/go/src/stash.envisia.de/envisia/crm/Godeps/_workspace/src\" is not using a known version control system\n. ",
    "pierrre": "testdata directories are useful if you want to run a dependency's tests.\n. Does this mean that godep go build is equivalent to go build if GO15VENDOREXPERIMENT is set?\n. @freeformz the tool being worked on by the go-pm community\nwhich one ? is it public ?. Problem solved:\nThere was an empty vendor directory in /home/pierre/go/src/github.com/<company>/<project>.\nAfter I remove it, godep works fine.\nI didn't see it before, because Git doesn't show empty directory.... testdata directories are useful if you want to run a dependency's tests.\n. Does this mean that godep go build is equivalent to go build if GO15VENDOREXPERIMENT is set?\n. @freeformz the tool being worked on by the go-pm community\nwhich one ? is it public ?. Problem solved:\nThere was an empty vendor directory in /home/pierre/go/src/github.com/<company>/<project>.\nAfter I remove it, godep works fine.\nI didn't see it before, because Git doesn't show empty directory.... ",
    "slimmy": "\nAlso, godep restore fails without a network connection even though local versions exists in the godep workspace. Is this how godep is designed to work or is it a bug?\n\nI would also like to know this, I have instances in AWS in a VPC so go get wont work there. If all the source code is available in the godep workspace why is this not utilized?\n. > Also, godep restore fails without a network connection even though local versions exists in the godep workspace. Is this how godep is designed to work or is it a bug?\nI would also like to know this, I have instances in AWS in a VPC so go get wont work there. If all the source code is available in the godep workspace why is this not utilized?\n. ",
    "wheaties": "Same, running into an issue with a private repo on github. Will look at this code and see if we can add some flags to the godep restore command and if not, will see about submitting a patch.\n. Same, running into an issue with a private repo on github. Will look at this code and see if we can add some flags to the godep restore command and if not, will see about submitting a patch.\n. ",
    "edsrzf": "This sounds the same as or closely related to #138. The behavior's intentional because otherwise you could end up depending on two different commits in the same repo, which would be complicated and error-prone.\n. I think that's alright as long as ignored, untracked files don't prevent vendoring and are ignored when copying. Failing on ignored, untracked files is just too annoying and common, at least for me.\nIt's somewhat more complicated, but probably possible. What do you think?\n. That's true, but only if everyone's using Git. Mercurial will happily check in files listed in .gitignore (and even .hgignore if it's not in the repo's root directory).\n. Done. I'll follow up with any minor requests, but if anything extensive is required, I'll probably just abandon this PR since we're no longer using godep.\nIt's been a while, but I think I only tested this with git too.\n. This sounds the same as or closely related to #138. The behavior's intentional because otherwise you could end up depending on two different commits in the same repo, which would be complicated and error-prone.\n. I think that's alright as long as ignored, untracked files don't prevent vendoring and are ignored when copying. Failing on ignored, untracked files is just too annoying and common, at least for me.\nIt's somewhat more complicated, but probably possible. What do you think?\n. That's true, but only if everyone's using Git. Mercurial will happily check in files listed in .gitignore (and even .hgignore if it's not in the repo's root directory).\n. Done. I'll follow up with any minor requests, but if anything extensive is required, I'll probably just abandon this PR since we're no longer using godep.\nIt's been a while, but I think I only tested this with git too.\n. ",
    "fern4lvarez": "Such meta.\n. Such meta.\n. ",
    "dim": "+1. this would be a really nice flag as you currently may end up copying many unnecessary files. while these files will still be ignored, godep save can still take ages to run, because of a 100G test file, not mentioning the unnecessary bloat\n. +1. this would be a really nice flag as you currently may end up copying many unnecessary files. while these files will still be ignored, godep save can still take ages to run, because of a 100G test file, not mentioning the unnecessary bloat\n. ",
    "renan": "So this fixes godep: unable to detect version control system for code.google.com/ path errors?\nThat is great! :+1: \n. So this fixes godep: unable to detect version control system for code.google.com/ path errors?\nThat is great! :+1: \n. ",
    "erikdubbelboer": "I just tried to make a small test case but it seems to work correctly for me now. Not sure what went wrong the other time.\n. I don't really understand how you are using GIT_AUTHOR_EMAIL & GIT_AUTHOR_NAME inside godep. But I agree with closing the issue as it's easy to unset the variables in the hook itself.\n. Would be better if this gets fixed with #169\n. I just tried to make a small test case but it seems to work correctly for me now. Not sure what went wrong the other time.\n. I don't really understand how you are using GIT_AUTHOR_EMAIL & GIT_AUTHOR_NAME inside godep. But I agree with closing the issue as it's easy to unset the variables in the hook itself.\n. Would be better if this gets fixed with #169\n. ",
    "lazywei": "but what if the upstream doesn't merge the pull request?\nIs it possible to specify a forked github repo url for a package?\n. but what if the upstream doesn't merge the pull request?\nIs it possible to specify a forked github repo url for a package?\n. ",
    "chadbay": "I had this problem recently and my GOPATH was pointing to the wrong project. Check your GOPATH, echo $GOPATH to eliminate that as the issue.\n. I had this problem recently and my GOPATH was pointing to the wrong project. Check your GOPATH, echo $GOPATH to eliminate that as the issue.\n. ",
    "patrickhoefler": "Same problem here, and I just found the solution. Good news first: It's not a godep bug :smile:\nI'm developing on a Mac. Local building and testing worked fine. When I ran my project through Travis-CI, it mysteriously failed because github.com/docker/docker/pkg/units was missing in Godeps.\nAfter a bit of digging around in the Docker source code I found that github.com/docker/docker/pkg/units is imported by github.com/docker/docker/pkg/system \u2013 however it is only imported by the file github.com/docker/docker/pkg/system/meminfo_linux.go. Because of the _linux postfix this file is ignored when I run go list -json on my Mac \u2013 and therefore it is also ignored by godep. When I run GOOS=linux go list -json instead, the dependencies for building on Linux are complete, including the previously missing github.com/docker/docker/pkg/units.\nThe solution for me was to run GOOS=linux godep save instead of godep save.\n. Same problem here, and I just found the solution. Good news first: It's not a godep bug :smile:\nI'm developing on a Mac. Local building and testing worked fine. When I ran my project through Travis-CI, it mysteriously failed because github.com/docker/docker/pkg/units was missing in Godeps.\nAfter a bit of digging around in the Docker source code I found that github.com/docker/docker/pkg/units is imported by github.com/docker/docker/pkg/system \u2013 however it is only imported by the file github.com/docker/docker/pkg/system/meminfo_linux.go. Because of the _linux postfix this file is ignored when I run go list -json on my Mac \u2013 and therefore it is also ignored by godep. When I run GOOS=linux go list -json instead, the dependencies for building on Linux are complete, including the previously missing github.com/docker/docker/pkg/units.\nThe solution for me was to run GOOS=linux godep save instead of godep save.\n. ",
    "ezbercih": "+1\n. +1\n. ",
    "paganotoni": "+1\n. +1\n. ",
    "Raffo": "Any update on this? I broke the build for the same reason. My solution is to run godep save again from scratch and compare with the previous Godeps folder. This seems to be the only safe approach in case of update.\n. I was about to implement a godep unrestore myself, I think it would be useful (I can work on it and submit a PR, but if you want to work on it, as you whish). More important, though is to document in the README what happens now if a user executes godep restore. \nAlso, can you give me the detail of this change in 1.6 you are mentioning above? \n. Thanks for the link to the commit. \nDo you think that a warning like \"godep restore could leave some of the dependencies in a detached state. This could lead to problems to update your dependencies\" would be too much? Maybe we could add some text to specify that the users should avoid using godep restore if not strictly necessary. \n. Sounds good to me. \n. :+1: \n. As I imagined, it's very easy to hack an \"unrestore\" command to checkout the master, but it's not so easy to make the unrestore command so general that can handle cases in which the default remote branch is different from the master. I would have to add this information to Godeps.json (the remote HEAD), but I'm not sure we want that. \nIf we agree that we will implement that, I wouldn't know any valid command that will give me the current remote HEAD. The only valid info I know how to get is in git remote show origin, but I don't really want to parse the output. Any suggestion/help? \n. @freeformz Any input on what I wrote above? \n. @freeformz because it's not obvious that the main branch is the master. If you clone a repository which remote HEAD is not the master you will end up with something different than a master branch. In such a case, if godep unrestore tries to restore it to the master branch this could lead to wrong results. \n. Take the gin repository: the master branch exist, but the remote HEAD is develop. I think that in this case it will not work. \n. Or we just modify Godep.json to be something like: \n{\n            \"ImportPath\": \"github.com/spf13/pflag\",\n            \"Rev\": \"8f6a28b0916586e7f22fe931ae2fcfc380b1c0e6\",\n            \"RemoteHEAD\": \"master\"\n        },\nAnd use the RemoteHEAD when executing unrestore. This will break only in case the remote head of the repo changes from the last time the Godep.json is updated, which is not perfect, but acceptable (IMO). \n. This is exactly what I meant, RemoteHEAD would be populated when godep save is executed. When doing godep unrestore we could also add a --force option (I'm not sure if this flag is already used in another way in other godep commands) to remove the dependency and re-executing a go get from scratch in case of failures. Obviously after a warning and a confirmation from the user. \n. So, what you suggest is to just use the info from git remote show origin , i.e:\n* remote origin\n  Fetch URL: https://github.com/kubernetes/kubernetes.git\n  Push  URL: https://github.com/kubernetes/kubernetes.git\n  HEAD branch: master\n  Remote branches:\nIs this right? \n. Any update on this? I broke the build for the same reason. My solution is to run godep save again from scratch and compare with the previous Godeps folder. This seems to be the only safe approach in case of update.\n. I was about to implement a godep unrestore myself, I think it would be useful (I can work on it and submit a PR, but if you want to work on it, as you whish). More important, though is to document in the README what happens now if a user executes godep restore. \nAlso, can you give me the detail of this change in 1.6 you are mentioning above? \n. Thanks for the link to the commit. \nDo you think that a warning like \"godep restore could leave some of the dependencies in a detached state. This could lead to problems to update your dependencies\" would be too much? Maybe we could add some text to specify that the users should avoid using godep restore if not strictly necessary. \n. Sounds good to me. \n. :+1: \n. As I imagined, it's very easy to hack an \"unrestore\" command to checkout the master, but it's not so easy to make the unrestore command so general that can handle cases in which the default remote branch is different from the master. I would have to add this information to Godeps.json (the remote HEAD), but I'm not sure we want that. \nIf we agree that we will implement that, I wouldn't know any valid command that will give me the current remote HEAD. The only valid info I know how to get is in git remote show origin, but I don't really want to parse the output. Any suggestion/help? \n. @freeformz Any input on what I wrote above? \n. @freeformz because it's not obvious that the main branch is the master. If you clone a repository which remote HEAD is not the master you will end up with something different than a master branch. In such a case, if godep unrestore tries to restore it to the master branch this could lead to wrong results. \n. Take the gin repository: the master branch exist, but the remote HEAD is develop. I think that in this case it will not work. \n. Or we just modify Godep.json to be something like: \n{\n            \"ImportPath\": \"github.com/spf13/pflag\",\n            \"Rev\": \"8f6a28b0916586e7f22fe931ae2fcfc380b1c0e6\",\n            \"RemoteHEAD\": \"master\"\n        },\nAnd use the RemoteHEAD when executing unrestore. This will break only in case the remote head of the repo changes from the last time the Godep.json is updated, which is not perfect, but acceptable (IMO). \n. This is exactly what I meant, RemoteHEAD would be populated when godep save is executed. When doing godep unrestore we could also add a --force option (I'm not sure if this flag is already used in another way in other godep commands) to remove the dependency and re-executing a go get from scratch in case of failures. Obviously after a warning and a confirmation from the user. \n. So, what you suggest is to just use the info from git remote show origin , i.e:\n* remote origin\n  Fetch URL: https://github.com/kubernetes/kubernetes.git\n  Push  URL: https://github.com/kubernetes/kubernetes.git\n  HEAD branch: master\n  Remote branches:\nIs this right? \n. ",
    "tsuna": "For my edification, what does godep use instead of go list?\n. Migrating is obviously the right way to move forward, but I guess what this issue was about, originally, is how can we make godep stop bailing out while we're in the transition period and haven't yet moved to the new import path.\nClosing the issue with your advice doesn't really resolve the underlying problem, even though it's (obviously) a sensible advice.\n. Sure, well it's the same situation I described, except I made it sound like it was a transitional situation, yours is more permanent, but I think we're asking for the same thing in terms of what godep should do / not bail out.\n. Maybe with an additional flag godep would print merely a warning and proceed with the missing repo, and just use the local copy.  This way it wouldn't bail out with an error.\nFor instance I recently ran into this when trying to re-build an old tag:\ncompress/snappy.go:12:2: cannot find package \"code.google.com/p/snappy-go/snappy\" in any of:\n    /usr/local/Cellar/go/1.5.1/libexec/src/code.google.com/p/snappy-go/snappy (from $GOROOT)\n    /Users/tsuna/go/src/code.google.com/p/snappy-go/snappy (from $GOPATH)\nmake: *** [install] Error 1\n. This probably won't change anything but I'm in a similar situation where at Arista we have a repo in which we vendor all our third-party dependencies, but we don't want to vendor our other internal repos due how things are setup in our environment.\nI fully understand the desire to keep godep simple, but I imagine that adding a flag (or an entry in Godeps/Godeps.json) to list package names that shouldn't be vendored and filter the list of packages collected by godep during commands like godep save ./... wouldn't be too big of a code change, if you're willing to consider it.\n. Generally speaking I find it hard to maintain Godeps up to date.  The only reliable solution I found so far is to rm -rf Godeps then go get -u ./... and then godep save ./....  And even that has a bunch of other issues (like go get -u ./... attempts to update the current repo, which is generally not desired in a CI environment, or it won't download dependencies needed for other platforms, but godep will attempt to save dependencies for all the platforms, and some other corner cases like that that aren't handled gracefully).\n. I'm open to any concrete suggestions regarding the wording/formatting.\n. I amended my change as per the feedback above.\n. Oops didn't mean to close the PR, sorry, fat finger / wrong button.\n. No need to spend an hour restoring them all, just do:\nfind $GOPATH/src -type d -name .git -execdir git --git-dir={} checkout master \\;\n. For my edification, what does godep use instead of go list?\n. Migrating is obviously the right way to move forward, but I guess what this issue was about, originally, is how can we make godep stop bailing out while we're in the transition period and haven't yet moved to the new import path.\nClosing the issue with your advice doesn't really resolve the underlying problem, even though it's (obviously) a sensible advice.\n. Sure, well it's the same situation I described, except I made it sound like it was a transitional situation, yours is more permanent, but I think we're asking for the same thing in terms of what godep should do / not bail out.\n. Maybe with an additional flag godep would print merely a warning and proceed with the missing repo, and just use the local copy.  This way it wouldn't bail out with an error.\nFor instance I recently ran into this when trying to re-build an old tag:\ncompress/snappy.go:12:2: cannot find package \"code.google.com/p/snappy-go/snappy\" in any of:\n    /usr/local/Cellar/go/1.5.1/libexec/src/code.google.com/p/snappy-go/snappy (from $GOROOT)\n    /Users/tsuna/go/src/code.google.com/p/snappy-go/snappy (from $GOPATH)\nmake: *** [install] Error 1\n. This probably won't change anything but I'm in a similar situation where at Arista we have a repo in which we vendor all our third-party dependencies, but we don't want to vendor our other internal repos due how things are setup in our environment.\nI fully understand the desire to keep godep simple, but I imagine that adding a flag (or an entry in Godeps/Godeps.json) to list package names that shouldn't be vendored and filter the list of packages collected by godep during commands like godep save ./... wouldn't be too big of a code change, if you're willing to consider it.\n. Generally speaking I find it hard to maintain Godeps up to date.  The only reliable solution I found so far is to rm -rf Godeps then go get -u ./... and then godep save ./....  And even that has a bunch of other issues (like go get -u ./... attempts to update the current repo, which is generally not desired in a CI environment, or it won't download dependencies needed for other platforms, but godep will attempt to save dependencies for all the platforms, and some other corner cases like that that aren't handled gracefully).\n. I'm open to any concrete suggestions regarding the wording/formatting.\n. I amended my change as per the feedback above.\n. Oops didn't mean to close the PR, sorry, fat finger / wrong button.\n. No need to spend an hour restoring them all, just do:\nfind $GOPATH/src -type d -name .git -execdir git --git-dir={} checkout master \\;\n. ",
    "deoxxa": "Probably related to #112. I'd love to get a push in the right direction of how to fix this and would be happy to dig in to have a go - @kr?\n. Probably related to #112. I'd love to get a push in the right direction of how to fix this and would be happy to dig in to have a go - @kr?\n. ",
    "tammersaleh": "+1\n. +1\n. ",
    "AlekSi": ":+1:\n. :+1:\n. ",
    "jingweno": "/cc @kr \n. Hmm...didn't know godep save -r ./.. PKG will rewrite PKG in $GOPATH/src/PKG. Seems like we should fix this for these reasons:\n1) People wouldn't be interested in rewriting import paths outside of their project\n2) An intuitive interpretation of godep save -r PKG is copying PKG to the project and rewrite the copy's import paths, instead of rewriting the import paths of  $GOPATH/src/PKG.\n. Same problem here with go1.7rc2:\n$ godep save ./...\ngodep: Package (bytes) not found\n. Closing after discussion. Tip is not a thing when Go reporting version.\n. :+1:\n. /cc @kr \n. Hmm...didn't know godep save -r ./.. PKG will rewrite PKG in $GOPATH/src/PKG. Seems like we should fix this for these reasons:\n1) People wouldn't be interested in rewriting import paths outside of their project\n2) An intuitive interpretation of godep save -r PKG is copying PKG to the project and rewrite the copy's import paths, instead of rewriting the import paths of  $GOPATH/src/PKG.\n. Same problem here with go1.7rc2:\n$ godep save ./...\ngodep: Package (bytes) not found\n. Closing after discussion. Tip is not a thing when Go reporting version.\n. :+1:\n. ",
    "rafaeljusto": "+1\n. .godeps.json file in project root instead of the Godeps directory would also be cool.\n. +1\n. .godeps.json file in project root instead of the Godeps directory would also be cool.\n. ",
    "lobatt": "I had this issue before, but it was because golang.org is blocked in China (Don't ask me why...don't even get me started...).\nSo try \"go get golang.org/x/tools/go/vcs\" first to check your connectivity to this repo.\n. I had this issue before, but it was because golang.org is blocked in China (Don't ask me why...don't even get me started...).\nSo try \"go get golang.org/x/tools/go/vcs\" first to check your connectivity to this repo.\n. ",
    "pumbers": "I have the same issue. \"go get golang.org/x/tools/go/vcs\" fails with the same error. However, golang.org and the full  \"golang.org/x/tools/go/vcs\" are accessible from the company network - opening the URL in a browser redirects to the godoc page for vcs.\nTrying \"git clone https://golang.org/x/tools/go/vcs\" I get a 407 (Proxy authentication needed), which means I need to tweak my proxy setup in git.\n. I have the same issue. \"go get golang.org/x/tools/go/vcs\" fails with the same error. However, golang.org and the full  \"golang.org/x/tools/go/vcs\" are accessible from the company network - opening the URL in a browser redirects to the godoc page for vcs.\nTrying \"git clone https://golang.org/x/tools/go/vcs\" I get a 407 (Proxy authentication needed), which means I need to tweak my proxy setup in git.\n. ",
    "ekanna": "Thanks. It is working fine for me now. It is because of proxy.  golang.org was not there in allowed domains previously.\n. Thanks. It is working fine for me now. It is because of proxy.  golang.org was not there in allowed domains previously.\n. ",
    "ltzMaxwell": "It's still working for me ,and I'm sure it's not proxy problem.\n. It's still working for me ,and I'm sure it's not proxy problem.\n. ",
    "BrickXu": "you can use go get github.com/golang/tools, it's a mirror from https://godoc.org/golang.org/x/tools, then mkdir -p src/golang.org/x/ and copy src/github.com/golang/tools to src/golang.org/x/.\nIt would work well behind GFW.\n. you can use go get github.com/golang/tools, it's a mirror from https://godoc.org/golang.org/x/tools, then mkdir -p src/golang.org/x/ and copy src/github.com/golang/tools to src/golang.org/x/.\nIt would work well behind GFW.\n. ",
    "netroby": "Or you can set up proxy \n```\nroot@ed27c545f7af:~# cat ~/proxy.conf \nexport http_proxy=http://172.17.42.1:8118\nexport https_proxy=$http_proxy\nexport ftp_proxy=$http_proxy\nexport rsync_proxy=$http_proxy\nexport no_proxy=\"localhost,127.0.0.1,localaddress,.localdomain.com\"\n```\n. TEST:\n1. delete all go/src/github.com files\n2. run godep get -v \n3. run godep restore -v \nwe can see error messages:\n```\nexecute &{Path:/usr/local/go/bin/go Args:[go get -d -v github.com/boj/redistore] Env:[] Dir: Stdin: Stdou\nt: Stderr: ExtraFiles:[] SysProcAttr: Process:0xc8200f8a00 ProcessState:exit status 0 lookPathErr: f\ninished:true childFiles:[0xc82002e088 0xc82002e0a0 0xc82002e0a0] closeAfterStart:[0xc82002e088 0xc82002e0a0] c\nloseAfterWait:[0xc82002e098] goroutine:[0x49a490] errch:0xc82001c5a0}godep: restore: exec: already started\nexecute &{Path:/usr/local/go/bin/go Args:[go get -d -v github.com/garyburd/redigo/internal] Env:[] Dir: Stdin:\n Stdout: Stderr: ExtraFiles:[] SysProcAttr: Process:0xc820108740 ProcessState:exit status 0 lookPath\nErr: finished:true childFiles:[0xc82011a000 0xc82011a018 0xc82011a018] closeAfterStart:[0xc82011a000 0xc8\n2011a018] closeAfterWait:[0xc82011a010] goroutine:[0x49a490] errch:0xc82010a060}godep: restore: exec: already \nstarted\nexecute &{Path:/usr/local/go/bin/go Args:[go get -d -v github.com/garyburd/redigo/redis] Env:[] Dir: Stdin: Stdout: Stderr: ExtraFiles:[] SysProcAttr: Process:0xc820108ec0 ProcessState:exit status 0 lookPathErr\n: finished:true childFiles:[0xc82011a028 0xc82011a040 0xc82011a040] closeAfterStart:[0xc82011a028 0xc8201\n1a040] closeAfterWait:[0xc82011a038] goroutine:[0x49a490] errch:0xc82010a0c0}godep: restore: exec: already sta\nrted\nexecute &{Path:/usr/local/go/bin/go Args:[go get -d -v github.com/gin-gonic/contrib/sessions] Env:[] Dir: Stdi\nn: Stdout: Stderr: ExtraFiles:[] SysProcAttr: Process:0xc8200f91a0 ProcessState:exit status 0 lookPa\nthErr: finished:true childFiles:[0xc82002e0b0 0xc82002e0c8 0xc82002e0c8] closeAfterStart:[0xc82002e0b0 0x\nc82002e0c8] closeAfterWait:[0xc82002e0c0] goroutine:[0x49a490] errch:0xc82001c660}godep: restore: exec: alread\ny started\nexecute &{Path:/usr/local/go/bin/go Args:[go get -d -v github.com/gin-gonic/gin] Env:[] Dir: Stdin: Stdou\nt: Stderr: ExtraFiles:[] SysProcAttr: Process:0xc8200f9920 ProcessState:exit status 0 lookPathErr: f\ninished:true childFiles:[0xc82002e0d8 0xc82002e0f0 0xc82002e0f0] closeAfterStart:[0xc82002e0d8 0xc82002e0f0] c\nloseAfterWait:[0xc82002e0e8] goroutine:[0x49a490] errch:0xc82001c6c0}godep: restore: exec: already started\nexecute &{Path:/usr/local/go/bin/go Args:[go get -d -v github.com/gorilla/context] Env:[] Dir: Stdin: Std\nout: Stderr: ExtraFiles:[] SysProcAttr: Process:0xc820109660 ProcessState:exit status 0 lookPathErr:\n finished:true childFiles:[0xc82011a050 0xc82011a068 0xc82011a068] closeAfterStart:[0xc82011a050 0xc82011a068]\n closeAfterWait:[0xc82011a060] goroutine:[0x49a490] errch:0xc82010a120}godep: restore: exec: already started\nexecute &{Path:/usr/local/go/bin/go Args:[go get -d -v github.com/gorilla/securecookie] Env:[] Dir: Stdin:<nil\n\nStdout: Stderr: ExtraFiles:[] SysProcAttr: Process:0xc820109de0 ProcessState:exit status 0 lookPathErr:\n finished:true childFiles:[0xc82011a078 0xc82011a090 0xc82011a090] closeAfterStart:[0xc82011a078 0xc82011\na090] closeAfterWait:[0xc82011a088] goroutine:[0x49a490] errch:0xc82010a180}godep: restore: exec: already star\nted\n\n```\n. It does not working\n```\ngodep update ...\ngodep: not in manifest: ../..\ngodep: no packages can be updated\n```\n. I had to remove Godeps/Godeps.json , then run godep save again.\n. Or you can set up proxy \n```\nroot@ed27c545f7af:~# cat ~/proxy.conf \nexport http_proxy=http://172.17.42.1:8118\nexport https_proxy=$http_proxy\nexport ftp_proxy=$http_proxy\nexport rsync_proxy=$http_proxy\nexport no_proxy=\"localhost,127.0.0.1,localaddress,.localdomain.com\"\n```\n. TEST:\n1. delete all go/src/github.com files\n2. run godep get -v \n3. run godep restore -v \nwe can see error messages:\n```\nexecute &{Path:/usr/local/go/bin/go Args:[go get -d -v github.com/boj/redistore] Env:[] Dir: Stdin: Stdou\nt: Stderr: ExtraFiles:[] SysProcAttr: Process:0xc8200f8a00 ProcessState:exit status 0 lookPathErr: f\ninished:true childFiles:[0xc82002e088 0xc82002e0a0 0xc82002e0a0] closeAfterStart:[0xc82002e088 0xc82002e0a0] c\nloseAfterWait:[0xc82002e098] goroutine:[0x49a490] errch:0xc82001c5a0}godep: restore: exec: already started\nexecute &{Path:/usr/local/go/bin/go Args:[go get -d -v github.com/garyburd/redigo/internal] Env:[] Dir: Stdin:\n Stdout: Stderr: ExtraFiles:[] SysProcAttr: Process:0xc820108740 ProcessState:exit status 0 lookPath\nErr: finished:true childFiles:[0xc82011a000 0xc82011a018 0xc82011a018] closeAfterStart:[0xc82011a000 0xc8\n2011a018] closeAfterWait:[0xc82011a010] goroutine:[0x49a490] errch:0xc82010a060}godep: restore: exec: already \nstarted\nexecute &{Path:/usr/local/go/bin/go Args:[go get -d -v github.com/garyburd/redigo/redis] Env:[] Dir: Stdin: Stdout: Stderr: ExtraFiles:[] SysProcAttr: Process:0xc820108ec0 ProcessState:exit status 0 lookPathErr\n: finished:true childFiles:[0xc82011a028 0xc82011a040 0xc82011a040] closeAfterStart:[0xc82011a028 0xc8201\n1a040] closeAfterWait:[0xc82011a038] goroutine:[0x49a490] errch:0xc82010a0c0}godep: restore: exec: already sta\nrted\nexecute &{Path:/usr/local/go/bin/go Args:[go get -d -v github.com/gin-gonic/contrib/sessions] Env:[] Dir: Stdi\nn: Stdout: Stderr: ExtraFiles:[] SysProcAttr: Process:0xc8200f91a0 ProcessState:exit status 0 lookPa\nthErr: finished:true childFiles:[0xc82002e0b0 0xc82002e0c8 0xc82002e0c8] closeAfterStart:[0xc82002e0b0 0x\nc82002e0c8] closeAfterWait:[0xc82002e0c0] goroutine:[0x49a490] errch:0xc82001c660}godep: restore: exec: alread\ny started\nexecute &{Path:/usr/local/go/bin/go Args:[go get -d -v github.com/gin-gonic/gin] Env:[] Dir: Stdin: Stdou\nt: Stderr: ExtraFiles:[] SysProcAttr: Process:0xc8200f9920 ProcessState:exit status 0 lookPathErr: f\ninished:true childFiles:[0xc82002e0d8 0xc82002e0f0 0xc82002e0f0] closeAfterStart:[0xc82002e0d8 0xc82002e0f0] c\nloseAfterWait:[0xc82002e0e8] goroutine:[0x49a490] errch:0xc82001c6c0}godep: restore: exec: already started\nexecute &{Path:/usr/local/go/bin/go Args:[go get -d -v github.com/gorilla/context] Env:[] Dir: Stdin: Std\nout: Stderr: ExtraFiles:[] SysProcAttr: Process:0xc820109660 ProcessState:exit status 0 lookPathErr:\n finished:true childFiles:[0xc82011a050 0xc82011a068 0xc82011a068] closeAfterStart:[0xc82011a050 0xc82011a068]\n closeAfterWait:[0xc82011a060] goroutine:[0x49a490] errch:0xc82010a120}godep: restore: exec: already started\nexecute &{Path:/usr/local/go/bin/go Args:[go get -d -v github.com/gorilla/securecookie] Env:[] Dir: Stdin:<nil\n\nStdout: Stderr: ExtraFiles:[] SysProcAttr: Process:0xc820109de0 ProcessState:exit status 0 lookPathErr:\n finished:true childFiles:[0xc82011a078 0xc82011a090 0xc82011a090] closeAfterStart:[0xc82011a078 0xc82011\na090] closeAfterWait:[0xc82011a088] goroutine:[0x49a490] errch:0xc82010a180}godep: restore: exec: already star\nted\n\n```\n. It does not working\n```\ngodep update ...\ngodep: not in manifest: ../..\ngodep: no packages can be updated\n```\n. I had to remove Godeps/Godeps.json , then run godep save again.\n. ",
    "aleafboat": "Download/Install\nThe easiest way to install is to run go get -u golang.org/x/tools/.... \nYou can also manually git clone the repository to $GOPATH/src/golang.org/x/tools.\n. Download/Install\nThe easiest way to install is to run go get -u golang.org/x/tools/.... \nYou can also manually git clone the repository to $GOPATH/src/golang.org/x/tools.\n. ",
    "felixge": "Just ran into this as well. The problem is here: https://github.com/tools/godep/blob/0baa7ea464025b2cb8e84b13c5ac4da99237a1bf/save.go#L358 . bufio.Scanner cannot handle lines > bufio.MaxScanTokenSize (64 KB). A common case where this comes up is when importing go files that embed static files (e.g. when using https://github.com/rakyll/statik).\nI'll try to submit a patch if I get a chance to work on this.\n. Just ran into this as well. The problem is here: https://github.com/tools/godep/blob/0baa7ea464025b2cb8e84b13c5ac4da99237a1bf/save.go#L358 . bufio.Scanner cannot handle lines > bufio.MaxScanTokenSize (64 KB). A common case where this comes up is when importing go files that embed static files (e.g. when using https://github.com/rakyll/statik).\nI'll try to submit a patch if I get a chance to work on this.\n. ",
    "phinze": "Hey folks, we just switched to Godep over in hashicorp/terraform and we're running into this problem.\nWe build Terraform for several platforms and we're running into problems trying to vendor the superset of dependencies without constantly fighting diffs or manually editing metadata.\nHave any of you come up with methods for addressing this issue?\n\nThe other option is to run LoadPackages once for each desired tag and then merge the results. That's probably the way it needs to work, but the code is more complicated.\n\nWe might investigate this as a PR if it sounds like a valid approach to everybody.\n. Hi @freeformz - thanks for the tip! Looks like we were indeed running an older version of godep.\nDid a fresh go get -u and this seems to be resolved w/ the newer version. \nhttps://github.com/hashicorp/terraform/pull/4957 looks to have the proper superset dependency list\nSince everything seems to be working I believe this (and the linked #174) can be closed. :+1: \n. Ah I just saw the PR here https://github.com/tools/godep/pull/415\nI believe that would solve this problem:\n\nIf I switch to go save ./... godep ends up capturing another half-dozen debug/development type dependencies -- stuff like go-spew -- from things like examples subdirs in the vendor/ tree. I'd prefer to avoid carrying around extra stuff in vendor that's not needed at runtime.\n\nAnd then we could just switch to \"Add a dependency\" instructions like this:\ngit checkout master\ngodep restore\ngit checkout feature-branch\ngodep save ./...\nDoes that sound right to you, @freeformz? \n. This was solved w/ godep v54 and deps fixed up in https://github.com/hashicorp/terraform/issues/5248 - thanks again @freeformz!\n. Hey folks, we just switched to Godep over in hashicorp/terraform and we're running into this problem.\nWe build Terraform for several platforms and we're running into problems trying to vendor the superset of dependencies without constantly fighting diffs or manually editing metadata.\nHave any of you come up with methods for addressing this issue?\n\nThe other option is to run LoadPackages once for each desired tag and then merge the results. That's probably the way it needs to work, but the code is more complicated.\n\nWe might investigate this as a PR if it sounds like a valid approach to everybody.\n. Hi @freeformz - thanks for the tip! Looks like we were indeed running an older version of godep.\nDid a fresh go get -u and this seems to be resolved w/ the newer version. \nhttps://github.com/hashicorp/terraform/pull/4957 looks to have the proper superset dependency list\nSince everything seems to be working I believe this (and the linked #174) can be closed. :+1: \n. Ah I just saw the PR here https://github.com/tools/godep/pull/415\nI believe that would solve this problem:\n\nIf I switch to go save ./... godep ends up capturing another half-dozen debug/development type dependencies -- stuff like go-spew -- from things like examples subdirs in the vendor/ tree. I'd prefer to avoid carrying around extra stuff in vendor that's not needed at runtime.\n\nAnd then we could just switch to \"Add a dependency\" instructions like this:\ngit checkout master\ngodep restore\ngit checkout feature-branch\ngodep save ./...\nDoes that sound right to you, @freeformz? \n. This was solved w/ godep v54 and deps fixed up in https://github.com/hashicorp/terraform/issues/5248 - thanks again @freeformz!\n. ",
    "brandur": "I ran into this as well trying to update dependencies and was able to resolve it in the same way as Dan. I'm not 100% clear why Godep wants a particular (old) revision here when it's trying to run an update to whatever the latest is.\n. Hey @freeformz, thanks for following up!\nThe project was heroku/holm, but I've since managed to resolve it.\nI played around with Godep more this weekend and I believe that this is related to #138 in that it's caused by pulling in multiple packages that come from the same repo (which fits with Dan's problem as well because this is how aws-go works). To correct what I said previously about Dan's suggested fix, as time went on I found that this didn't always work for me, what does work with good regularity is to run godep update with the spread operator on the top-level repository as suggested in the other thread:\ngodep update github.com/stripe/aws-go/...\n. I ran into this as well trying to update dependencies and was able to resolve it in the same way as Dan. I'm not 100% clear why Godep wants a particular (old) revision here when it's trying to run an update to whatever the latest is.\n. Hey @freeformz, thanks for following up!\nThe project was heroku/holm, but I've since managed to resolve it.\nI played around with Godep more this weekend and I believe that this is related to #138 in that it's caused by pulling in multiple packages that come from the same repo (which fits with Dan's problem as well because this is how aws-go works). To correct what I said previously about Dan's suggested fix, as time went on I found that this didn't always work for me, what does work with good regularity is to run godep update with the spread operator on the top-level repository as suggested in the other thread:\ngodep update github.com/stripe/aws-go/...\n. ",
    "keyneston": "Hey @kr are there any fixes I can do to get this merged?\n. Hey @kr are there any fixes I can do to get this merged?\n. ",
    "ready4god2513": "+1 here.  Anything holding it back? \n. Sounds good to me. \u00a0Thanks.\n--\u00a0\nBrandon Hansen\nSent with Airmail\nOn June 17, 2015 at 11:29:34 AM, Edward Muller (notifications@github.com) wrote:\nI don't think we're going to be adding an exec command in light of using rewriting now and the upcoming -vendor option to the go tooling. With either of those you should just be able to use the go toolchain normally and use godep \"just\" for managing dependencies.\nI'm not sure if @kr agrees with me or not however.\n\u2014\nReply to this email directly or view it on GitHub.\n. +1 here.  Anything holding it back? \n. Sounds good to me. \u00a0Thanks.\n--\u00a0\nBrandon Hansen\nSent with Airmail\nOn June 17, 2015 at 11:29:34 AM, Edward Muller (notifications@github.com) wrote:\nI don't think we're going to be adding an exec command in light of using rewriting now and the upcoming -vendor option to the go tooling. With either of those you should just be able to use the go toolchain normally and use godep \"just\" for managing dependencies.\nI'm not sure if @kr agrees with me or not however.\n\u2014\nReply to this email directly or view it on GitHub.\n. ",
    "jrdnull": ":+1: \n. :+1: \n. ",
    "eikenb": "I think I am seeing the same issue. I have a repo that contains a go package as a sub-directory in a repository where the top level is not a go package. It saves fine but won't update. I assume this is a side-affect of not wanted to allow for updating of subpackages. But in this case it isn't a subpackage, but a top level package just contained in a subdirectory of the repo.\n. I think I am seeing the same issue. I have a repo that contains a go package as a sub-directory in a repository where the top level is not a go package. It saves fine but won't update. I assume this is a side-affect of not wanted to allow for updating of subpackages. But in this case it isn't a subpackage, but a top level package just contained in a subdirectory of the repo.\n. ",
    "ebuchman": "Just encountered the same issue. Glad to see I'm not alone.\n. Just encountered the same issue. Glad to see I'm not alone.\n. ",
    "juliusv": "Same issue here. We vendor github.com/prometheus/client_golang/model in github.com/prometheus/prometheus, and my GOPATH now has a slightly newer version which I want to save. But alas,\n$ godep update github.com/prometheus/client_golang/model\ngodep: no packages can be updated\nThe exact revision at which this is happening in Prometheus is this: https://github.com/prometheus/prometheus/commit/d4ef509b0f4b808133cce7222cb202273854f253\nI wonder if this is connected to us manually including some files in Godeps which godep didn't include (licenses of the vendored packages are legally required, but if they're in the vendored project's root and you only vendor packages from subdirectories, you're suddenly in violation).\n. Same issue here. We vendor github.com/prometheus/client_golang/model in github.com/prometheus/prometheus, and my GOPATH now has a slightly newer version which I want to save. But alas,\n$ godep update github.com/prometheus/client_golang/model\ngodep: no packages can be updated\nThe exact revision at which this is happening in Prometheus is this: https://github.com/prometheus/prometheus/commit/d4ef509b0f4b808133cce7222cb202273854f253\nI wonder if this is connected to us manually including some files in Godeps which godep didn't include (licenses of the vendored packages are legally required, but if they're in the vendored project's root and you only vendor packages from subdirectories, you're suddenly in violation).\n. ",
    "mpuncel": "This seems to be caused by this line here: https://github.com/tools/godep/blob/master/update.go#L205\nIf packages A and B are under the same root, and I try to only update B, the root will be marked for skipping update because A isn't being updated. I'm not sure what the motivation for this feature is, it seems that developers should be able to selectively update sub packages as they desire.\nFor what it's worth, I fixed my problem by globbing from the root in my godep update command (e.g. godep update github.com/foo/bar/... instead of github.com/foo/bar/pkg/B. A helpful error message would have gone a long way\n. You're totally right. A better error message would be more than sufficient, this was a very confusing error to encounter as a user.\n. This seems to be caused by this line here: https://github.com/tools/godep/blob/master/update.go#L205\nIf packages A and B are under the same root, and I try to only update B, the root will be marked for skipping update because A isn't being updated. I'm not sure what the motivation for this feature is, it seems that developers should be able to selectively update sub packages as they desire.\nFor what it's worth, I fixed my problem by globbing from the root in my godep update command (e.g. godep update github.com/foo/bar/... instead of github.com/foo/bar/pkg/B. A helpful error message would have gone a long way\n. You're totally right. A better error message would be more than sufficient, this was a very confusing error to encounter as a user.\n. ",
    "curtisallen": "@mpuncel thanks so much saves a lot of time!\nIs this on the radar to be fixed? \n. @mpuncel thanks so much saves a lot of time!\nIs this on the radar to be fixed? \n. ",
    "jasonsoft": "@mpuncel Thank you for providing the information.  That is very useful and saved my time :)\n. @mpuncel Thank you for providing the information.  That is very useful and saved my time :)\n. ",
    "smarterclayton": "Because it contains shell scripts or example JSON files that would be used by a test case (so you could run test cases on vendored code), or things like assets (JS, CSS, images) that might be directly referenced by the code.\n. Because it contains shell scripts or example JSON files that would be used by a test case (so you could run test cases on vendored code), or things like assets (JS, CSS, images) that might be directly referenced by the code.\n. ",
    "cybertk": "+1\n. +1\n. +1\n. +1\n. ",
    "rogierlommers": "I want godep to use gox for building binaries, is that feasible with the godep path command?\n. I want godep to use gox for building binaries, is that feasible with the godep path command?\n. ",
    "pcasaretto": ":+1: \n. :+1: \n. ",
    "aluzzardi": ":+1: \n. :+1: \n. ",
    "vieux": ":+1: \n. While we're at it, why not\n./internal/godeps.json?\nI find the capital G ugly\nOn Feb 22, 2015 12:31 PM, \"Derek McGowan\" notifications@github.com wrote:\n\nI would also take a look at #184\nhttps://github.com/tools/godep/issues/184. Using the internal directory\nmay be a more future proof design. Also worth considering the \"_\" is there\nto keep the go tool from traversing the directory when starting at the\nproject root.\nMixing the ideas may come up with something more like...\n./internal/Godeps.json\n./internal/_vendor\n./internal/_vendor/github.com/...\n... other go files ...\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/172#issuecomment-75456005.\n. :+1: \n. While we're at it, why not\n\n./internal/godeps.json?\nI find the capital G ugly\nOn Feb 22, 2015 12:31 PM, \"Derek McGowan\" notifications@github.com wrote:\n\nI would also take a look at #184\nhttps://github.com/tools/godep/issues/184. Using the internal directory\nmay be a more future proof design. Also worth considering the \"_\" is there\nto keep the go tool from traversing the directory when starting at the\nproject root.\nMixing the ideas may come up with something more like...\n./internal/Godeps.json\n./internal/_vendor\n./internal/_vendor/github.com/...\n... other go files ...\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/172#issuecomment-75456005.\n. \n",
    "dmcgowan": "I would also take a look at #184.  Using the internal directory may be a more future proof design. Also worth considering the \"_\" is there to keep the go tool from traversing the directory when starting at the project root.\nMixing the ideas may come up with something more like...\n./internal/Godeps.json\n./internal/_vendor\n./internal/_vendor/github.com/...\n... other go files ...\n. Seems like the best path to support those use cases would be to add flags for specifying the godeps.json file and the workspace/src directory.  Defaults would obviously be Godeps/Godeps.json and Godeps/_workspace/src, but being able to override and add to a Makefile would be great.\n. I would also take a look at #184.  Using the internal directory may be a more future proof design. Also worth considering the \"\" is there to keep the go tool from traversing the directory when starting at the project root.\nMixing the ideas may come up with something more like...\n./internal/Godeps.json\n./internal/_vendor\n./internal/_vendor/github.com/...\n... other go files ...\n. Seems like the best path to support those use cases would be to add flags for specifying the godeps.json file and the _workspace/src directory.  Defaults would obviously be Godeps/Godeps.json and Godeps/_workspace/src, but being able to override and add to a Makefile would be great.\n. ",
    "stevvooe": "@dmcgowan Agreed. I think the use case in #184 would be covered by this request.\n. @freeformz We spoke at GopherCon and I approve this message!\n. @dmcgowan Agreed. I think the use case in #184 would be covered by this request.\n. @freeformz We spoke at GopherCon and I approve this message!\n. ",
    "oliveagle": ":+1:\nand when a project contains multiple arch packages dependencies also painful right now.\non darwin godep save, then findout that windows dependencies have been removed from _workspace and Godep.json. \nnow I have to checkout those deleted windows dependencies back into _workspace and modify Godep.json manually.  which is painful process.\n. :+1:\nand when a project contains multiple arch packages dependencies also painful right now.\non darwin godep save, then findout that windows dependencies have been removed from _workspace and Godep.json. \nnow I have to checkout those deleted windows dependencies back into _workspace and modify Godep.json manually.  which is painful process.\n. ",
    "gerhard": "I've just spend the best part of the day tracking down a bug related to this. Please merge!\n. I've just spend the best part of the day tracking down a bug related to this. Please merge!\n. ",
    "divoxx": "Any chance this can get merged? //cc @kr \n. Any chance this can get merged? //cc @kr \n. ",
    "justinfx": "bump\n. Sure. I am happy to change it, if it gets it merged\n. Thanks!\n. bump\n. Sure. I am happy to change it, if it gets it merged\n. Thanks!\n. ",
    "MarcelMue": "The same thing happens when runnnig godeps on windows, windows/386 is added.\nMy current fix is to edit GoDeps.json by hand before I push.\n. The same thing happens when runnnig godeps on windows, windows/386 is added.\nMy current fix is to edit GoDeps.json by hand before I push.\n. ",
    "ceiroa": "Yes, I also modify the file manually to be able to push. That seems to work fine.\n. Yes, I also modify the file manually to be able to push. That seems to work fine.\n. ",
    "jefff": ":+1: \n. :+1: \n. ",
    "maruel": "No problem!\n. No problem!\n. ",
    "sethgrid": "Hey Tony, Here is what we are doing to get around this. \nWe have a separate subpackage we call deps in our code and import it like:\nimport _ \"/src/github.com/our_company/the_package/deps\"\nIn there, we have deps.go. It looks like:\n```\npackage deps\n/*\nJanuary 2015\nGodeps does not support build tags, so this file is a workaround to get packages vendoered by godeps.\nThese are all packages imported in test files that have +integration tag.\n*/\nimport (\n    \"code.google.com/p/go-uuid/uuid\"\n    \"github.com/bitly/go-simplejson\"\n    \"github.com/sethgrid/httpsink\"\n    \"github.com/stretchr/testify/assert\"\n    \"github.com/stretchr/testify/require\"\n)\nfunc init() {\n    var _ uuid.UUID\n    var _ simplejson.Json\n    var _ assert.TestingT\n    var _ httpsink.HTTPSink\n    var _ assert.Assertions\n    if false {\n        require.True(nil, true)\n    }\n}\n```\nThis tricks godep into pulling in the files. Waiting on a fix in the meanwhile. \n. looking forward to it; just wanted to give some feedback from my end. Cheers!\n. I'll take a look at that; thanks\n. Hey Tony, Here is what we are doing to get around this. \nWe have a separate subpackage we call deps in our code and import it like:\nimport _ \"/src/github.com/our_company/the_package/deps\"\nIn there, we have deps.go. It looks like:\n```\npackage deps\n/*\nJanuary 2015\nGodeps does not support build tags, so this file is a workaround to get packages vendoered by godeps.\nThese are all packages imported in test files that have +integration tag.\n*/\nimport (\n    \"code.google.com/p/go-uuid/uuid\"\n    \"github.com/bitly/go-simplejson\"\n    \"github.com/sethgrid/httpsink\"\n    \"github.com/stretchr/testify/assert\"\n    \"github.com/stretchr/testify/require\"\n)\nfunc init() {\n    var _ uuid.UUID\n    var _ simplejson.Json\n    var _ assert.TestingT\n    var _ httpsink.HTTPSink\n    var _ assert.Assertions\n    if false {\n        require.True(nil, true)\n    }\n}\n```\nThis tricks godep into pulling in the files. Waiting on a fix in the meanwhile. \n. looking forward to it; just wanted to give some feedback from my end. Cheers!\n. I'll take a look at that; thanks\n. ",
    "gonzaloserrano": "+1\n. +1\n. ",
    "charleswli": "Running godep save ./... in the repo root saves the test dependencies for me, but I'm curious as to why godep update ./... does not work (it does not seem to evaluate the import package pattern):\n```\n\ngodep save ./...\ngit diff\ndiff --git a/Godeps/Godeps.json b/Godeps/Godeps.json\nindex 374f731..d7e4123 10064a\n--- a/Godeps/Godeps.json\n+++ b/Godeps/Godeps.json\n@@ -1,11 +1,24 @@\n {\n        \"ImportPath\": \"github.com/charleswli/mypackage\",\n        \"GoVersion\": \"go1.4.2\",\n+       \"Packages\": [\n+               \"./...\"\n+       ],\n        \"Deps\": [\n+               {\n+                       \"ImportPath\": \"github.com/onsi/ginkgo\",\n+                       \"Comment\": \"v1.1.0-38-g5ed93e4\",\n+                       \"Rev\": \"5ed93e443a4b7dfe9f5e95ca87e6082e503021d2\"\n+               },\n+               {\n+                       \"ImportPath\": \"github.com/onsi/gomega\",\n+                       \"Comment\": \"v1.0-28-g8adf9e1\",\n+                       \"Rev\": \"8adf9e1730c55cdc590de7d49766cb2acc88d8f2\"\n+               }\n        ]\n }\ngodep update ./...\ngodep: not in manifest: ./...\ngodep: no packages can be updated\n```\n. > update requires you to specify a specific package. AFAIK ./... doesn't work with update.\n\n@freeformz, yep, my question is why does that pattern not work.\n. Running godep save ./... in the repo root saves the test dependencies for me, but I'm curious as to why godep update ./... does not work (it does not seem to evaluate the import package pattern):\n```\n\ngodep save ./...\ngit diff\ndiff --git a/Godeps/Godeps.json b/Godeps/Godeps.json\nindex 374f731..d7e4123 10064a\n--- a/Godeps/Godeps.json\n+++ b/Godeps/Godeps.json\n@@ -1,11 +1,24 @@\n {\n        \"ImportPath\": \"github.com/charleswli/mypackage\",\n        \"GoVersion\": \"go1.4.2\",\n+       \"Packages\": [\n+               \"./...\"\n+       ],\n        \"Deps\": [\n+               {\n+                       \"ImportPath\": \"github.com/onsi/ginkgo\",\n+                       \"Comment\": \"v1.1.0-38-g5ed93e4\",\n+                       \"Rev\": \"5ed93e443a4b7dfe9f5e95ca87e6082e503021d2\"\n+               },\n+               {\n+                       \"ImportPath\": \"github.com/onsi/gomega\",\n+                       \"Comment\": \"v1.0-28-g8adf9e1\",\n+                       \"Rev\": \"8adf9e1730c55cdc590de7d49766cb2acc88d8f2\"\n+               }\n        ]\n }\ngodep update ./...\ngodep: not in manifest: ./...\ngodep: no packages can be updated\n```\n. > update requires you to specify a specific package. AFAIK ./... doesn't work with update.\n\n@freeformz, yep, my question is why does that pattern not work.\n. ",
    "carlosmmelo": "+1\n. +1\n. ",
    "tim-kretschmer-c2fo": ":+1: \n. :+1: \n. ",
    "jayunit100": "Any updates on this ?   We'd like to import _tests from a project as well, and run into the same issue.\n. Yes I think you are right.  My issue is a package not locally seeing imports from the same package declared in a _test file.  \nI'll confirm what the precise problem is and update in this thread..\n. @freeformz ok, Im finding that my core issue here is that I cannot reference public functions or variables that are declared in  _test.go files. This is not really a Godeps issue in any way.   Ignore :)\n. something weird for me to , i think this might be the same error\n\u279c  kubernetes git:(config-e2e-file) \u2717 go version \ngo version go1.7 darwin/amd64\n\u279c  kubernetes git:(config-e2e-file) \u2717 godep version\ngodep v74 (darwin/amd64/go1.7)\n. Any updates on this ?   We'd like to import _tests from a project as well, and run into the same issue.\n. Yes I think you are right.  My issue is a package not locally seeing imports from the same package declared in a _test file.  \nI'll confirm what the precise problem is and update in this thread..\n. @freeformz ok, Im finding that my core issue here is that I cannot reference public functions or variables that are declared in  _test.go files. This is not really a Godeps issue in any way.   Ignore :)\n. something weird for me to , i think this might be the same error\n\u279c  kubernetes git:(config-e2e-file) \u2717 go version \ngo version go1.7 darwin/amd64\n\u279c  kubernetes git:(config-e2e-file) \u2717 godep version\ngodep v74 (darwin/amd64/go1.7)\n. ",
    "karlkfi": "Looks like the proposed solution branch vendors go code, which is probably a non-viable solution to this problem due to to having to keep it compatible with the installed go version (ignoring potential licensing issues).\nWould it be possible to instead pop off dir names when a cannot find package error occurs on go get and retry?\n. Looks like that change is non-trivial due to the way godep restore delegates to go get, go list, and git cat-file before checking out the specific revision. You could do a go get on path.Join(path.Dir(dep.ImportPath), \"...\") but you'd still have to find out what dir your in, and if the parent dir doesn't have any go files then  go list will error. You can get parse the json and get the dir even when it fails, but not with the current LoadPackages impl. And then vcs.exists will fail if pkg.Dir doesn't exist. So you'd have to make the package first...\nKind of a mess. Might be easier to add an option to go get to get a specific revision.\n. I don't remember this being a problem before. Was go get -d changed at some point to re-up dependencies? I could have sworn it used to leave them alone when they were on a detached head.\nI think this is probably the correct approach for now. The primary revision should override the transitive one. Tho it's probably a good idea to warn when this is the case, either when restoring or saving or both.\n. Based on the analysis in #286 this is caused not just by having a transitive dependency, but having a transitive dependency on a new package that is a sub-package of a direct dependency with a revision where the sub-package did not exist. \n. Looks like the proposed solution branch vendors go code, which is probably a non-viable solution to this problem due to to having to keep it compatible with the installed go version (ignoring potential licensing issues).\nWould it be possible to instead pop off dir names when a cannot find package error occurs on go get and retry?\n. Looks like that change is non-trivial due to the way godep restore delegates to go get, go list, and git cat-file before checking out the specific revision. You could do a go get on path.Join(path.Dir(dep.ImportPath), \"...\") but you'd still have to find out what dir your in, and if the parent dir doesn't have any go files then  go list will error. You can get parse the json and get the dir even when it fails, but not with the current LoadPackages impl. And then vcs.exists will fail if pkg.Dir doesn't exist. So you'd have to make the package first...\nKind of a mess. Might be easier to add an option to go get to get a specific revision.\n. I don't remember this being a problem before. Was go get -d changed at some point to re-up dependencies? I could have sworn it used to leave them alone when they were on a detached head.\nI think this is probably the correct approach for now. The primary revision should override the transitive one. Tho it's probably a good idea to warn when this is the case, either when restoring or saving or both.\n. Based on the analysis in #286 this is caused not just by having a transitive dependency, but having a transitive dependency on a new package that is a sub-package of a direct dependency with a revision where the sub-package did not exist. \n. ",
    "ironcladlou": "Using godep @ 03595abb97a99e98133f9390b9c11e0aecf5f2e8,  I'm still observing the bug:\n``` shell\nin some clean GOPATH...\ngo get github.com/openshift/origin\ngo get github.com/tools/godep\ncd src/github.com/openshift/origin\n$GOPATH/bin/godep restore -v\n```\nFailures will eventually occur:\n``` console\n...\ngodep: error downloading dep (github.com/aws/aws-sdk-go/internal/endpoints): cannot find package \"github.com/aws/aws-sdk-go/internal/endpoints\" in any of:\n        /usr/lib/golang/src/github.com/aws/aws-sdk-go/internal/endpoints (from $GOROOT)\n        /home/vagrant/tmp/subbug/src/github.com/aws/aws-sdk-go/internal/endpoints (from $GOPATH)\ngodep: Downloading dependency (if needed): github.com/aws/aws-sdk-go/internal/protocol/ec2query\ngodep: error downloading dep (github.com/aws/aws-sdk-go/internal/protocol/ec2query): cannot find package \"github.com/aws/aws-sdk-go/internal/protocol/ec2query\" in any of:\n        /usr/lib/golang/src/github.com/aws/aws-sdk-go/internal/protocol/ec2query (from $GOROOT)\n        /home/vagrant/tmp/subbug/src/github.com/aws/aws-sdk-go/internal/protocol/ec2query (from $GOPATH)\n...\n```\nThe Godeps.json file contains entries that reference import paths which only exist at the specified revisions. For example:\njson\n{\n  \"ImportPath\": \"github.com/aws/aws-sdk-go/internal/endpoints\",\n  \"Comment\": \"v0.9.9\",\n  \"Rev\": \"c4ae871ffc03691a7b039fa751a1e7afee56e920\"\n}\nHere, github.com/aws/aws-sdk-go/internal/endpoints only exists in Rev, and it seems like godep is still trying to generate a call like go get github.com/aws/aws-sdk-go/internal/endpoints (from HEAD) rather than downloading the github.com/aws/aws-sdk-go repo and then rewinding in Git (for example).\n. @freeformz \n\nNot sure. There is also an issue where restore will fail (currently) if the dep package is no longer available in master (that's the issue I was referring to, not sure the number). I'd like to fix that issue this week, but may be unrelated.\n\nI believe you're referring to #186.\n. @freeformz Thanks for the analysis- I'm still working my way through the other problems, but was focused just on the sub package import issue.\nI just verified that this commit fixes #186. Thanks again!\n. Would it make any sense to add a dependency field like ForkedFrom which is a VCS URI? With that field, it would be possible to introduce a step internally between download and restore that could use the VCS abstraction to add and fetch a Git remote (for example). Then the dependency's Rev could refer to a commit carried only in the fork.\n. It seems like all that's necessary is to add a step here to fetch a defined fork repo (a concept which I believe exists in all three supported VCS implementations). That would make the rev available from both the repo retrieved via go get and from the user defined fork location. We already know the root package location (and thus VCS root) for a given import path.\nThe problem I'm seeing is that the golang/x/tools/go/vcs package provides no lowest-common-denominator API for the fetch. Once you create the repo, you're stuck with just commits from the repo downloaded via go get repo unless you hack outside the vcs package.\n. Using godep @ 03595abb97a99e98133f9390b9c11e0aecf5f2e8,  I'm still observing the bug:\n``` shell\nin some clean GOPATH...\ngo get github.com/openshift/origin\ngo get github.com/tools/godep\ncd src/github.com/openshift/origin\n$GOPATH/bin/godep restore -v\n```\nFailures will eventually occur:\n``` console\n...\ngodep: error downloading dep (github.com/aws/aws-sdk-go/internal/endpoints): cannot find package \"github.com/aws/aws-sdk-go/internal/endpoints\" in any of:\n        /usr/lib/golang/src/github.com/aws/aws-sdk-go/internal/endpoints (from $GOROOT)\n        /home/vagrant/tmp/subbug/src/github.com/aws/aws-sdk-go/internal/endpoints (from $GOPATH)\ngodep: Downloading dependency (if needed): github.com/aws/aws-sdk-go/internal/protocol/ec2query\ngodep: error downloading dep (github.com/aws/aws-sdk-go/internal/protocol/ec2query): cannot find package \"github.com/aws/aws-sdk-go/internal/protocol/ec2query\" in any of:\n        /usr/lib/golang/src/github.com/aws/aws-sdk-go/internal/protocol/ec2query (from $GOROOT)\n        /home/vagrant/tmp/subbug/src/github.com/aws/aws-sdk-go/internal/protocol/ec2query (from $GOPATH)\n...\n```\nThe Godeps.json file contains entries that reference import paths which only exist at the specified revisions. For example:\njson\n{\n  \"ImportPath\": \"github.com/aws/aws-sdk-go/internal/endpoints\",\n  \"Comment\": \"v0.9.9\",\n  \"Rev\": \"c4ae871ffc03691a7b039fa751a1e7afee56e920\"\n}\nHere, github.com/aws/aws-sdk-go/internal/endpoints only exists in Rev, and it seems like godep is still trying to generate a call like go get github.com/aws/aws-sdk-go/internal/endpoints (from HEAD) rather than downloading the github.com/aws/aws-sdk-go repo and then rewinding in Git (for example).\n. @freeformz \n\nNot sure. There is also an issue where restore will fail (currently) if the dep package is no longer available in master (that's the issue I was referring to, not sure the number). I'd like to fix that issue this week, but may be unrelated.\n\nI believe you're referring to #186.\n. @freeformz Thanks for the analysis- I'm still working my way through the other problems, but was focused just on the sub package import issue.\nI just verified that this commit fixes #186. Thanks again!\n. Would it make any sense to add a dependency field like ForkedFrom which is a VCS URI? With that field, it would be possible to introduce a step internally between download and restore that could use the VCS abstraction to add and fetch a Git remote (for example). Then the dependency's Rev could refer to a commit carried only in the fork.\n. It seems like all that's necessary is to add a step here to fetch a defined fork repo (a concept which I believe exists in all three supported VCS implementations). That would make the rev available from both the repo retrieved via go get and from the user defined fork location. We already know the root package location (and thus VCS root) for a given import path.\nThe problem I'm seeing is that the golang/x/tools/go/vcs package provides no lowest-common-denominator API for the fetch. Once you create the repo, you're stuck with just commits from the repo downloaded via go get repo unless you hack outside the vcs package.\n. ",
    "eparis": "Docker just remove timeutils:  https://github.com/docker/docker/pull/18685\nSo this block will now refuse to godep restore\njson\n                {\n                        \"ImportPath\": \"github.com/docker/docker/pkg/timeutils\",\n                        \"Comment\": \"v1.4.1-4045-g2b27fe1\",\n                        \"Rev\": \"2b27fe17a1b3fb8472fde96d768fa70996adf201\"\n                },\n. So this merged.  But It seems to be slightly overzealous.  I have dependencies in MY _test.go files which are not in my .go files.  godep save no longer pulls in those dependencies. So godep go test doesn't work any more.  I love not pulling OTHER people's _test.go, but I still want it to pull in whatever I need in my _test.go...\n. (or at least I should say the v34 returns wihout an error)\nrm -rf Godeps\n$GOPATH/bin/godep save ./...\nAppears to hang forever....\n. v33 dies with\ngodep: error restoring dep (github.com/google/btree): found packages btree (btree.go) and main (btree_mem.go) in /tmp/gopath.aSHREx/src/github.com/google/btree\ngodep: error restoring dep (golang.org/x/tools/imports): found packages imports (fix.go) and main (mkindex.go) in /tmp/gopath.aSHREx/src/golang.org/x/tools/imports\n. no\n. v32 appears to be the last version that the k8s.io/kubernetes (github.com/kubernetes/kubernetes) project is able to do:\ngodep restore\nrm -rf Godeps/\ngodep save ./...\n. go get golang.org/x/sys/unix makes that error go away\nBut I got another one which I could make go away. I'll get the details.\n. godep: error restoring dep (github.com/google/cadvisor/validate): Unable to find dependent package github.com/fsouza/go-dockerclient/external/github.com/hashicorp/go-cleanhttp in context of /tmp/gopath.9G0wU0/src/github.com/fsouza/go-dockerclient\ngo get github.com/fsouza/go-dockerclient/external/github.com/hashicorp/go-cleanhttp does not however let me proceed.\n. transient github error?\n. I did it on Fedora 23 (linux), godep built with 1.5.1...\n@yifan-gu hit the same problem.  Not sure his OS\n. v36\ngodep: error restoring dep (github.com/boltdb/bolt): Unable to find dependent package golang.org/x/sys/unix in context of /storage/gopath/src/github.com/boltdb/bolt\n. godep restore on linux into an empty GOPATH, v36, fails with unable to find dependent package for\ngithub.com/Azure/go-ansiterm/winterm\ngithub.com/fsouza/go-dockerclient/external/github.com/hashicorp/go-cleanhttp\nif I go get those by hand, godep restore will run fine. But godep save does not pull those into Godeps, so the next godep restore into an empty GOPATH fails...\n. Awesome, glad you're digging in. I'll be excited to know why godep save ./... handles the solaris:golang.org/x/sys/unix but not the windows:github.com/Azure/go-ansiterm\n. @thanodnl #362 fixes the problem(s) for me. It does start pulling in golang.org/x/sys/unix which I didn't check if that was correct/needed...\n. I tested this change + https://github.com/kubernetes/kubernetes/pull/18706 and kube is once again happy!\n. What we ran into was patched code in Godeps/_workspace/ inside our repo. People did this usually to fix a 'small' bug which they proposed to the upstream package but didn't have/take the time to make sure it got committed followed by a godep update. So actual of code in Godeps/_workspace did not match Godeps/Godeps.json and while the tree itself was complete and usable it meant that the next developer to come along who decided to godep restore ended up with different code in $GOPATH as in Godep/_workspace.\nWe wrote https://github.com/kubernetes/kubernetes/blob/master/hack/verify-godeps.sh which is checked every time someone makes any change in Godeps. It makes sure that what is in Godeps is actually what the Godeps.json file says should be in Godeps.\nI'm not sure if the godep tool itself can help us know if the code in Godeps/_workspace is actually the code described in the Godep.json or is our script is just as efficient as anything you would do....\n. I can confirm this fixed my issue!\n. I've had some small flashes of thought about this kind of thing and wasn't ever quite sure what to do about packages in the repo.  Lets say we have a VCS field which says github.com/docker/docker.git sha12345. But my package is github.com/docker/docker/pkg/timeutils.  It is relatively easy to figure that out and know how to stitch those together on the filesystem so things work.\nBut what about when my VCS is parisplace.org/bob.git and the package I care about is k8s.io/kubernetes/pkg/util/sets.  How do you know if my checkout of parisplace.org/bob.git belongs in k8s.io/ k8s.io/kubernetes/ k8s.io/kubernetes/pkg/ k8s.io/kubernetes/pkg/util/\nI've never quite figured out in my mind (and I haven't thought about it a lot) how to link a VCS+Rev information to a 'package'\n. I should point out that I think this is a regression of some sort. I think it was back about v37 though I last paid attention and it was working (I think)\n. @ironcladlou\n. godep v57 (linux/amd64/go1.6)\nI'll try to get that one to reproduce with -v\n. (the godeps for the tree in question is a total nightmare, godep restore has about 5 different failures)\n. I'm going to close, because I haven't been able to reproduce....\n. Docker just remove timeutils:  https://github.com/docker/docker/pull/18685\nSo this block will now refuse to godep restore\njson\n                {\n                        \"ImportPath\": \"github.com/docker/docker/pkg/timeutils\",\n                        \"Comment\": \"v1.4.1-4045-g2b27fe1\",\n                        \"Rev\": \"2b27fe17a1b3fb8472fde96d768fa70996adf201\"\n                },\n. So this merged.  But It seems to be slightly overzealous.  I have dependencies in MY _test.go files which are not in my .go files.  godep save no longer pulls in those dependencies. So godep go test doesn't work any more.  I love not pulling OTHER people's _test.go, but I still want it to pull in whatever I need in my _test.go...\n. (or at least I should say the v34 returns wihout an error)\nrm -rf Godeps\n$GOPATH/bin/godep save ./...\nAppears to hang forever....\n. v33 dies with\ngodep: error restoring dep (github.com/google/btree): found packages btree (btree.go) and main (btree_mem.go) in /tmp/gopath.aSHREx/src/github.com/google/btree\ngodep: error restoring dep (golang.org/x/tools/imports): found packages imports (fix.go) and main (mkindex.go) in /tmp/gopath.aSHREx/src/golang.org/x/tools/imports\n. no\n. v32 appears to be the last version that the k8s.io/kubernetes (github.com/kubernetes/kubernetes) project is able to do:\ngodep restore\nrm -rf Godeps/\ngodep save ./...\n. go get golang.org/x/sys/unix makes that error go away\nBut I got another one which I could make go away. I'll get the details.\n. godep: error restoring dep (github.com/google/cadvisor/validate): Unable to find dependent package github.com/fsouza/go-dockerclient/external/github.com/hashicorp/go-cleanhttp in context of /tmp/gopath.9G0wU0/src/github.com/fsouza/go-dockerclient\ngo get github.com/fsouza/go-dockerclient/external/github.com/hashicorp/go-cleanhttp does not however let me proceed.\n. transient github error?\n. I did it on Fedora 23 (linux), godep built with 1.5.1...\n@yifan-gu hit the same problem.  Not sure his OS\n. v36\ngodep: error restoring dep (github.com/boltdb/bolt): Unable to find dependent package golang.org/x/sys/unix in context of /storage/gopath/src/github.com/boltdb/bolt\n. godep restore on linux into an empty GOPATH, v36, fails with unable to find dependent package for\ngithub.com/Azure/go-ansiterm/winterm\ngithub.com/fsouza/go-dockerclient/external/github.com/hashicorp/go-cleanhttp\nif I go get those by hand, godep restore will run fine. But godep save does not pull those into Godeps, so the next godep restore into an empty GOPATH fails...\n. Awesome, glad you're digging in. I'll be excited to know why godep save ./... handles the solaris:golang.org/x/sys/unix but not the windows:github.com/Azure/go-ansiterm\n. @thanodnl #362 fixes the problem(s) for me. It does start pulling in golang.org/x/sys/unix which I didn't check if that was correct/needed...\n. I tested this change + https://github.com/kubernetes/kubernetes/pull/18706 and kube is once again happy!\n. What we ran into was patched code in Godeps/_workspace/ inside our repo. People did this usually to fix a 'small' bug which they proposed to the upstream package but didn't have/take the time to make sure it got committed followed by a godep update. So actual of code in Godeps/_workspace did not match Godeps/Godeps.json and while the tree itself was complete and usable it meant that the next developer to come along who decided to godep restore ended up with different code in $GOPATH as in Godep/_workspace.\nWe wrote https://github.com/kubernetes/kubernetes/blob/master/hack/verify-godeps.sh which is checked every time someone makes any change in Godeps. It makes sure that what is in Godeps is actually what the Godeps.json file says should be in Godeps.\nI'm not sure if the godep tool itself can help us know if the code in Godeps/_workspace is actually the code described in the Godep.json or is our script is just as efficient as anything you would do....\n. I can confirm this fixed my issue!\n. I've had some small flashes of thought about this kind of thing and wasn't ever quite sure what to do about packages in the repo.  Lets say we have a VCS field which says github.com/docker/docker.git sha12345. But my package is github.com/docker/docker/pkg/timeutils.  It is relatively easy to figure that out and know how to stitch those together on the filesystem so things work.\nBut what about when my VCS is parisplace.org/bob.git and the package I care about is k8s.io/kubernetes/pkg/util/sets.  How do you know if my checkout of parisplace.org/bob.git belongs in k8s.io/ k8s.io/kubernetes/ k8s.io/kubernetes/pkg/ k8s.io/kubernetes/pkg/util/\nI've never quite figured out in my mind (and I haven't thought about it a lot) how to link a VCS+Rev information to a 'package'\n. I should point out that I think this is a regression of some sort. I think it was back about v37 though I last paid attention and it was working (I think)\n. @ironcladlou\n. godep v57 (linux/amd64/go1.6)\nI'll try to get that one to reproduce with -v\n. (the godeps for the tree in question is a total nightmare, godep restore has about 5 different failures)\n. I'm going to close, because I haven't been able to reproduce....\n. ",
    "charneykaye": "@kr I prefer to version control my entire platform at once, however Golang is just one of the two modules. So my only solution at the moment is to keep my whole project in the ~/Go/ folder. Not only is this confusing, it forces me to create new proprietary workflows just for my other langs to play well with Go! Bullyish..\n. Thanks @freeformz . Just a comment for future readers- I ended up coming down on the side of \"don't use symlinks\" myself, and here's why.\nDeployed into production, we can put our binaries absolutely anywhere we like. That's the beauty of the compiled language.\nSo the conversation about where to put our Go working files is really one about development workflow. Valuable aspects of the Go open-source ecosystem are federated by its directory structure.\n. @kr I prefer to version control my entire platform at once, however Golang is just one of the two modules. So my only solution at the moment is to keep my whole project in the ~/Go/ folder. Not only is this confusing, it forces me to create new proprietary workflows just for my other langs to play well with Go! Bullyish..\n. Thanks @freeformz . Just a comment for future readers- I ended up coming down on the side of \"don't use symlinks\" myself, and here's why.\nDeployed into production, we can put our binaries absolutely anywhere we like. That's the beauty of the compiled language.\nSo the conversation about where to put our Go working files is really one about development workflow. Valuable aspects of the Go open-source ecosystem are federated by its directory structure.\n. ",
    "vikstrous": "This would be really nice. If this patch works, I think it should be merged. IMO it doesn't make sense to have an intentional bug because it's not the \"go way\".\n. This would be really nice. If this patch works, I think it should be merged. IMO it doesn't make sense to have an intentional bug because it's not the \"go way\".\n. ",
    "glkz": ":+1: \n. :+1: \n. ",
    "gfrey": ":+1: \nI'm missing this so badly when modifying dependent libraries.\n. It does something like that, but for all vendored libraries, not a single one (at least for me it simply ignored the given package).\n. I've vendored some large libraries and would like to be able to just \"devendor\" a single of them, like in godep save -r=false github.com/dynport/urknall. This would keep everything else fixed, keep the clutter in git diff minimal and allow for easy manipulation of a single library.\nNot sure how dependent libraries of the dependency should be handled though.\n. In the example given (godep save -r=false github.com/dynport/urknall) I don't want to totally remove the usage of the urknall package (what I guess you understood), but un-rewrite the import paths, so that the version in my $GOPATH is used again, instead of the one in the Godeps/_workspace.\nBenefit would be, that I'd not have to commit changes to the urknall library and use godep update github.com/dynport/urknall to test them in the respective binary.\nWhen being finished with changing the urknall library, I'd just godep update github.com/dynport/urknall && godep save -r ./... to get everything back to normal in the binary.\n. If rewrite is going away anyway you are right (maybe I should put some focus on Go project politics), so I'm fine with issue being closed. Keep in mind I'm not the OP!\n. :+1: \nI'm missing this so badly when modifying dependent libraries.\n. It does something like that, but for all vendored libraries, not a single one (at least for me it simply ignored the given package).\n. I've vendored some large libraries and would like to be able to just \"devendor\" a single of them, like in godep save -r=false github.com/dynport/urknall. This would keep everything else fixed, keep the clutter in git diff minimal and allow for easy manipulation of a single library.\nNot sure how dependent libraries of the dependency should be handled though.\n. In the example given (godep save -r=false github.com/dynport/urknall) I don't want to totally remove the usage of the urknall package (what I guess you understood), but un-rewrite the import paths, so that the version in my $GOPATH is used again, instead of the one in the Godeps/_workspace.\nBenefit would be, that I'd not have to commit changes to the urknall library and use godep update github.com/dynport/urknall to test them in the respective binary.\nWhen being finished with changing the urknall library, I'd just godep update github.com/dynport/urknall && godep save -r ./... to get everything back to normal in the binary.\n. If rewrite is going away anyway you are right (maybe I should put some focus on Go project politics), so I'm fine with issue being closed. Keep in mind I'm not the OP!\n. ",
    "kouno": "And obviously I found the answer just after posting this...\nI just had to unset GIT_DIR and everything works fine:\n``` bash\n!/bin/bash\nset -e\nunset GIT_DIR\ncd \"$(godep path)/../..\"\ngodep save -r ./...\ngodep_imports=\"$(git diff | grep 'Godeps/_workspace' | wc -l)\"\nif [ \"$godep_imports\" -gt 0 ]; then\n  cat <<\\EOF\nERROR: Some Go dependencies have been updated with godep save -r ./...\nERROR: Please add them to your commit.\nEOF\n  exit 1\nfi\nexit 0\n```\nSorry for the noise. :disappointed: \n. And obviously I found the answer just after posting this...\nI just had to unset GIT_DIR and everything works fine:\n``` bash\n!/bin/bash\nset -e\nunset GIT_DIR\ncd \"$(godep path)/../..\"\ngodep save -r ./...\ngodep_imports=\"$(git diff | grep 'Godeps/_workspace' | wc -l)\"\nif [ \"$godep_imports\" -gt 0 ]; then\n  cat <<\\EOF\nERROR: Some Go dependencies have been updated with godep save -r ./...\nERROR: Please add them to your commit.\nEOF\n  exit 1\nfi\nexit 0\n```\nSorry for the noise. :disappointed: \n. ",
    "haibinzumata": "I misunderstood the restore command\n. I misunderstood the restore command\n. ",
    "trkrameshkumar": "+1\n. Hi @geovanisouza92,  have you found any solution for this issue?\n. +1\n. Hi @geovanisouza92,  have you found any solution for this issue?\n. ",
    "andrioid": "Try\ncd /home/geovani/.gvm/pkgsets/go1.4/global/src/github.com/geovanisouza92/foo\ngodep save\nWorked for me.\n. Try\ncd /home/geovani/.gvm/pkgsets/go1.4/global/src/github.com/geovanisouza92/foo\ngodep save\nWorked for me.\n. ",
    "geovanisouza92": "@andrioid If I have to go into GOPATH, what is the utility of gvm linkthis?\n. The point here is \"how to tell godep to use the gvm linked folder, instead of cwd?\"\n. @andrioid If I have to go into GOPATH, what is the utility of gvm linkthis?\n. The point here is \"how to tell godep to use the gvm linked folder, instead of cwd?\"\n. ",
    "tommymcdonald": "I'm currently having the same issue\n. I'm currently having the same issue\n. ",
    "akavel": "What is your go version output? Most probable explanation would be that you're using too old version of Go (earlier than Go 1.1; see https://golang.org/doc/go1.1#return).\n. What is your go version output? Most probable explanation would be that you're using too old version of Go (earlier than Go 1.1; see https://golang.org/doc/go1.1#return).\n. ",
    "jpillora": "duplicate #34 \n. duplicate #34 \n. ",
    "metal3d": "It seems that it works great now... It should be the golang docker image that is the problem.\nI did my own image from fedora and compiled golang 1.4.1 and I have not problem...\nI will take a look on and make report here if I find what is the problem.\n. It seems that it works great now... It should be the golang docker image that is the problem.\nI did my own image from fedora and compiled golang 1.4.1 and I have not problem...\nI will take a look on and make report here if I find what is the problem.\n. ",
    "activars": "We have multiple main binaries in the same project. We keep the main1.go main2.go in a main package. Then, symbolic link mains to the root directory for convenient building/dev purpose. It was frustrated Godep replace linking files in local development.\n. We have multiple main binaries in the same project. We keep the main1.go main2.go in a main package. Then, symbolic link mains to the root directory for convenient building/dev purpose. It was frustrated Godep replace linking files in local development.\n. ",
    "ronna-s": "It sounds very unreasonable. If you had a working tree once and you saved it, then at least on the technical level you have everything you need to deploy your project and update specific packages. Why the hassle? Also, godep doesn't tell you what dependencies are missing, I just receive random errors.\nfor instance:\ngodep restore\ngodep: unable to detect version control system for code.google.com/ path\n. It sounds very unreasonable. If you had a working tree once and you saved it, then at least on the technical level you have everything you need to deploy your project and update specific packages. Why the hassle? Also, godep doesn't tell you what dependencies are missing, I just receive random errors.\nfor instance:\ngodep restore\ngodep: unable to detect version control system for code.google.com/ path\n. ",
    "acroca": "Same here\n. @fsouza My project has actually a dependency on your fsouza/go-dockerclient project, perhaps including docker as a dependency is an  issue since it's too big? I'm not sure what's going on with godep, but both save and restore eats all the memory and never finishes.\n. I updated and recompiled go and it now works fine. I was using a go version from like a week ago.\n. Same here\n. @fsouza My project has actually a dependency on your fsouza/go-dockerclient project, perhaps including docker as a dependency is an  issue since it's too big? I'm not sure what's going on with godep, but both save and restore eats all the memory and never finishes.\n. I updated and recompiled go and it now works fine. I was using a go version from like a week ago.\n. ",
    "hectorj": ":+1: \n. :+1: \nI'd like a solution to that too\n. :+1: \n. :+1: \nI'd like a solution to that too\n. ",
    "gelraen": "That's what we doing right now. But there are a few problems with that approach:\n1) it requires an external thing (e.g. Makefile) to fetch the repo you need\n2) go get -u freaks out and fail when the remote URL doesn't match what it expects\nThe thing is that I work on a shared repo and we need everyone to fetch a given package from the right place, so it's not about doing it once on a single machine.\n. That's what we doing right now. But there are a few problems with that approach:\n1) it requires an external thing (e.g. Makefile) to fetch the repo you need\n2) go get -u freaks out and fail when the remote URL doesn't match what it expects\nThe thing is that I work on a shared repo and we need everyone to fetch a given package from the right place, so it's not about doing it once on a single machine.\n. ",
    "tve": "+1\n. +1\n. ",
    "volker48": "Yeah, I don't understand the point of saving the source code if godep restore is just going to check it out from the repo anyway? Is it just in case the repo goes away? If so, just restore the files form the workspace and don't bother checking it out.\n. Yeah, I don't understand the point of saving the source code if godep restore is just going to check it out from the repo anyway? Is it just in case the repo goes away? If so, just restore the files form the workspace and don't bother checking it out.\n. ",
    "omgnuts": "+1\n. +1\n. ",
    "lavalamp": "No, you've both misunderstood the bug report :) There is no new location, and won't ever be one. The package doesn't exist any more, is permanently deleted--the maintainers decided it had bugs they didn't want to fix.\n. I think godep should absolutely check to see if it has the right commit in its local repo before attempting to fetch, FWIW. IIRC we solved this by vendoring outside of godep, which was unusable.\n. No, you've both misunderstood the bug report :) There is no new location, and won't ever be one. The package doesn't exist any more, is permanently deleted--the maintainers decided it had bugs they didn't want to fix.\n. I think godep should absolutely check to see if it has the right commit in its local repo before attempting to fetch, FWIW. IIRC we solved this by vendoring outside of godep, which was unusable.\n. ",
    "jaytaylor": "Hi @neurogeek, happy to elaborate.\nLet us suppose there are 2 distinct go projects involved, X and Y.\nPackage X.models contains the [shared] domain models.\nPackage Y.producer makes use of the domain models.\nPackage X.consumer makes use of Y.producer.\nIn this situation, I never want Godeps to vendor X or Y for either of these projects.  I strongly prefer to have the build fail due to a missing dependency rather than risk using a potentially stale version of any of these projects' packages.  It would also be a pointless waste of space in the git repo to have them vendored.\nWithout a way to tell godep to ignore specific package paths it's a real pain to update Godeps for these projects.  One must manually clean out traces of packages X and Y from the _workspace/src directory as well as manually edit and purge them from Godeps.json.\n. The idea here is to gain control over what godep will vendor (or not vendor).  It is sometimes desirable to exclude a dependency if you know that there will always be a local up-to-date copy available somewhere else in $GOPATH. \nIt is similar to the way dpkg lets you exclude what packages and files included in an operation.  From the first search result for dpkg exclude:\ndpkg has two options --path-include=glob-pattern and --path-exclude=glob-pattern\n@freeformz Is any of this information helpful?\n. @freeformz Agreed, though I'm not sure why this is what we're discussing.\nWhat is the issue with giving users more control over how Godep behaves?\nConsidering the dpkg example reference above, it is a very similar situation.  The package being installed with those flags may very well not end up in a working state.  Ok, then it's just on whoever is using (or misusing) the dpkg tool.\nIn this case I've proposed an option to increase the utility of Godep.\nWe all know that dependency management is a huge pain point with Go.  I think Godep is on the right track already, and want to see it grow to become the best cure for all this pain.\nLet's work together to make it happen.\n. Hi @neurogeek, happy to elaborate.\nLet us suppose there are 2 distinct go projects involved, X and Y.\nPackage X.models contains the [shared] domain models.\nPackage Y.producer makes use of the domain models.\nPackage X.consumer makes use of Y.producer.\nIn this situation, I never want Godeps to vendor X or Y for either of these projects.  I strongly prefer to have the build fail due to a missing dependency rather than risk using a potentially stale version of any of these projects' packages.  It would also be a pointless waste of space in the git repo to have them vendored.\nWithout a way to tell godep to ignore specific package paths it's a real pain to update Godeps for these projects.  One must manually clean out traces of packages X and Y from the _workspace/src directory as well as manually edit and purge them from Godeps.json.\n. The idea here is to gain control over what godep will vendor (or not vendor).  It is sometimes desirable to exclude a dependency if you know that there will always be a local up-to-date copy available somewhere else in $GOPATH. \nIt is similar to the way dpkg lets you exclude what packages and files included in an operation.  From the first search result for dpkg exclude:\ndpkg has two options --path-include=glob-pattern and --path-exclude=glob-pattern\n@freeformz Is any of this information helpful?\n. @freeformz Agreed, though I'm not sure why this is what we're discussing.\nWhat is the issue with giving users more control over how Godep behaves?\nConsidering the dpkg example reference above, it is a very similar situation.  The package being installed with those flags may very well not end up in a working state.  Ok, then it's just on whoever is using (or misusing) the dpkg tool.\nIn this case I've proposed an option to increase the utility of Godep.\nWe all know that dependency management is a huge pain point with Go.  I think Godep is on the right track already, and want to see it grow to become the best cure for all this pain.\nLet's work together to make it happen.\n. ",
    "gotomgo": "Jeez this was a complete circle-jerk. Are all the GO forums like this?. Jeez this was a complete circle-jerk. Are all the GO forums like this?. ",
    "edhemphill": "I use a pre-processor. So, I have code in a /src folder. I would like godeps to ignore this. As the above poster noted, I have also found most of the people in the core Go and go tools community to be like this when it comes to feature requests. Alas.  . As a workaround, you can rename folders and put a . in front of them. godep ignores hidden folders it seems. Works for more. I use a build script anyway, so this works for me.. I use a pre-processor. So, I have code in a /src folder. I would like godeps to ignore this. As the above poster noted, I have also found most of the people in the core Go and go tools community to be like this when it comes to feature requests. Alas.  . As a workaround, you can rename folders and put a . in front of them. godep ignores hidden folders it seems. Works for more. I use a build script anyway, so this works for me.. ",
    "alexandercampbell": "+1 to this issue, I frequently hit the same thing.\n. +1 to this issue, I frequently hit the same thing.\n. ",
    "itsjamie": "I didn't realize that it didn't respect .gitignore when I adding Godeps to an existing project and accidentally committed some local test fixtures (large video files) across a few repos that brought in the one project. Oops!\nOur local Stash server wasn't too happy with receiving those. :smiling_imp: \n. I didn't realize that it didn't respect .gitignore when I adding Godeps to an existing project and accidentally committed some local test fixtures (large video files) across a few repos that brought in the one project. Oops!\nOur local Stash server wasn't too happy with receiving those. :smiling_imp: \n. ",
    "dprotaso": "This loosens the requirement that every package you use needs have it's own .git/vcs folder. This makes the tool more flexible to alternative source layouts in your vcs repo.\n. For my use case no - but it should.\nI'll make the following additions:\n- disable the vcs check with a flag (hence the default behaviour will remain the same)\n- vendor all the directories\n. This loosens the requirement that every package you use needs have it's own .git/vcs folder. This makes the tool more flexible to alternative source layouts in your vcs repo.\n. For my use case no - but it should.\nI'll make the following additions:\n- disable the vcs check with a flag (hence the default behaviour will remain the same)\n- vendor all the directories\n. ",
    "jeeyoungk": "I ran into the same issue - I submitted a PR to fix it. https://github.com/tools/godep/pull/218/files\n. CC: @kr \n. @freeformz actually, that's a good point. i haven't though of cleaning it up. I should do that\n. @kr didn't know about the other parameter. now it's using that. (no more intermediary temp file). I added a test to glob for any lingering temp files also.\n. @freeformz thanks. didn't know about that. applied the changes.\n. Please take a look\n. I've squashed the commits, so it's ready to be merged anytime.\n. I ran into the same issue - I submitted a PR to fix it. https://github.com/tools/godep/pull/218/files\n. CC: @kr \n. @freeformz actually, that's a good point. i haven't though of cleaning it up. I should do that\n. @kr didn't know about the other parameter. now it's using that. (no more intermediary temp file). I added a test to glob for any lingering temp files also.\n. @freeformz thanks. didn't know about that. applied the changes.\n. Please take a look\n. I've squashed the commits, so it's ready to be merged anytime.\n. ",
    "pmoust": "I faced the same issue just now.\nSolution was to %s#code.google.com/p/#github.com/google/#g\nWill have to submit a PR to all providers referencing code.google.com though.\n. I faced the same issue just now.\nSolution was to %s#code.google.com/p/#github.com/google/#g\nWill have to submit a PR to all providers referencing code.google.com though.\n. ",
    "ghodss": "Shouldn't read-only code.google.com still be working through January of next year, though?\n. @freeformz Any update on how this might be solved? Workarounds that involve changing the library you're depending on are rather challenging, since those repos are typically out of your control.\n. Shouldn't read-only code.google.com still be working through January of next year, though?\n. @freeformz Any update on how this might be solved? Workarounds that involve changing the library you're depending on are rather challenging, since those repos are typically out of your control.\n. ",
    "myliu": "Unfortunately, some repos have migrated to to github, and the original repos have been closed. Here's an example: code.google.com/p/snappy-go/\nWe end up hacking our Makefile to make it work:\ngit clone git://github.com/golang/snappy $$GOPATH/src/code.google.com/p/snappy-go/\n. Unfortunately, some repos have migrated to to github, and the original repos have been closed. Here's an example: code.google.com/p/snappy-go/\nWe end up hacking our Makefile to make it work:\ngit clone git://github.com/golang/snappy $$GOPATH/src/code.google.com/p/snappy-go/\n. ",
    "thockin": "Awesome!  That works.  You don't even need to make your file have a main() - just import the other main pkg as _.\npackage import_other\nimport _ \"github.com/other/other\"\n. I'm not sure how it happened, but it did - hence my suggestion that maybe it should yell at me.\n. I don't know HOW it happened, so I can't reproduce it.  Obviously I can\nmanually recreate it by having a Godeps file with two pkgs of teh same git\nrepo at different hashes - you don't need me to set that up (but I will if\nyou want :)\nOn Wed, Dec 2, 2015 at 1:59 PM, Edward Muller notifications@github.com\nwrote:\n\n@thockin https://github.com/thockin Can you re-produce on a public repo\nthat I can test with / base a test on?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/223#issuecomment-161447015.\n. yeah, I have no idea how it happened - it may well have been a hand edit.\nThe issue was that it took FOREVER to figure out what was going wrong\nbecause the tool knew but didn't offer any clues.\n\nOn Wed, Dec 2, 2015 at 2:44 PM, Edward Muller notifications@github.com\nwrote:\n\nI assume this happened on a godep restore?\nTBH: I'm more interested in how you got into that situation in the first\ncase, which is what I'd like a reproducer for.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/223#issuecomment-161457564.\n. > when using packages from etcd in another project, we should try to treat\nthe etcd packages as if they hadn't vendored anything\n\nThis is tricky.  If I want to vendor all of etcd, I want to use the deps\nthat etcd wants.  If I am vendoring an etcd lib that has transitive deps,\nit is less obvious.\nOn Thu, Jul 9, 2015 at 2:16 PM, Keith Rarick notifications@github.com\nwrote:\n\nThe approach I've tried to take so far is to let package main decide which\nrevision of each dependency to use. Normally, a dependency package that\nitself has further dependencies should not even use godep. A repo like etcd\nis a little more confusing because it also has some commands, so they\nvendor all their deps. But when using packages from etcd in another\nproject, we should try to treat the etcd packages as if they hadn't\nvendored anything.\nGodep could try to use etcd's recorded revision of those leaf\ndependencies, but that strategy doesn't always work: it's possible to have\ntwo repos that have each vendored a different revision of a leaf package.\nOur approach so far is to use a simple rule consistently: always let the\nuser choose. The way the user expresses this choice is by installing their\nchosen revision of each dependency (leaf or otherwise) into their $GOPATH.\nHowever, there's certainly still room for making this more convenient. If\na project has a lot of dependency repos like etcd, it's tedious to run godep\nrestore for each one. Godep could potentially make this process more\nautomatic. But note that that if the same leaf dependency has been vendored\nin multiple repos, the user will be left with an arbitrary revision of it\nin GOPATH\u2014whichever one was restored last. Maybe that's fine, but I'm a\nlittle worried that folks might not be aware of that. It could go unnoticed\nfor a long time, and might be an unwelcome surprise.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/224#issuecomment-120146703.\n. Well with Go's new vendor feature, godep won't have a say in what I do or\ndon't sub-vendor.\nOn Jul 10, 2015 11:11 PM, \"Keith Rarick\" notifications@github.com wrote:\nIt is a basic assumption of godep that you are vendoring packages, not\ncommands.\nI agree that it would be useful to vendor commands along with their\ndependencies, but as you have indicated, that's a different thing, and\ngodep doesn't really do that (yet). It might sort of work, but if so, that\nis a consequence of godep not being careful enough about what it does, not\na deliberate feature.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/224#issuecomment-120581204.\n. It's effectively impossible to vendor a project like etcd that uses godep rewriting with GO15VENDOREXPERIMENT.  As an example, we vendor from rkt, which does uses rewriting.  Error:\n\n... cannot use apisvcConn (type *\"google.golang.org/grpc\".ClientConn) as type *\"github.com/coreos/rkt/Godeps/_workspace/src/google.golang.org/grpc\".ClientConn ...\nrkt is expecting a ClientConn from github.com/coreos/rkt/Godeps/_workspace/src/google.golang.org/grpc, but my code is passing it from google.golang.org/grpc.  You can argue that the rkt API should not be exposing any types from other pkgs, but it is.\nHow is one supposed to get past this, given that there are and will be repos that use Godep in the old way for a while, yet.  Can we teach godep to recognize this and un-rewrite?\n. It would be nice to have a choice - some libs are ONLY consumed by a dep\ninternally, and having 2 versions linked is not so bad.  Other times you\nneed to flatten, like this grpc case.\nOn Jan 4, 2016 12:03 PM, \"Edward Muller\" notifications@github.com wrote:\n\nFWIW: This is also an issue with any nested vendor directory setup. I\nopened (or commented anyway) on a similar issue against Go itself. The only\nreal way to handle this is to flatten the deps so there is only one\ngoogle.golang.org/grpc package in use. I'd like to teach godep to do this\n(it already does it for the older workspace format). It needs to be taught\nhow to check both and DTRT. Hopefully later this month unless someone\nelse shows up with PRs.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/224#issuecomment-168753553.\n. I agree it might be confusing, and would need REALLY good tooling to make\nit clear how things are currently configured and to allow\nmanagement/changes.  OTOH, library L which uses dep D and exposes an API to\napp A should not expose D's type.  It would be much better to take and\nreturn L-defined interfaces.  But that's a different argument.\n\nNote that this represents a reversal from me - I was initially against\nflattening.\nOn Mon, Jan 4, 2016 at 11:52 AM, Edward Muller notifications@github.com\nwrote:\n\n@thockin https://github.com/thockin While it may be nice, I wonder if\nthe possible vectors for confusion would be worth it.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/224#issuecomment-168782017.\n. Are you sure this is what you are hitting? Converting our main repo mostly\n\"just worked\", including recursive godeps.\n\nStart with a clean GOPATH\n    godep restore\n    rm -rf Godeps\n    godep save ./...\n    git add vendor\n    git add -f $(git ls-files --other vendor/)\nLook for other files under Godeps that you might want to restore (like the\nlicense state)\nOn Fri, May 13, 2016 at 1:55 PM, dlorenc notifications@github.com wrote:\n\n@thockin https://github.com/thockin How did you get past this? I'm now\nhotting the same thing in minikube trying to update to the latest\nkubernetes build.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/224#issuecomment-219156778\n. Thanks, it turns out I was NOT running at head, as I thought.\n. I did a 'go get -u' yesterday\nOn Dec 20, 2015 11:54 PM, \"Edward Muller\" notifications@github.com wrote:\nWhat version of godep? (godep version)\nSent from my iPhone\n\nOn Dec 20, 2015, at 22:16, Tim Hockin notifications@github.com wrote:\nI just did a godep restore on kubernetes followed by godep save ./... -\nI expected this to be a no-op, but I wanted to verify. Instead, I find that\nONE particular library has had it's version changed to the current tip of\nthe master branch.\nI can't figure out why. godep restore -v is failing (#374 here)\nSpecifically:\n{\n\"ImportPath\": \"github.com/coreos/go-systemd/dbus\",\n- \"Comment\": \"v2-27-g97e243d\",\n- \"Rev\": \"97e243d21a8e232e9d8af38ba2366dfcfceebeba\"\n- \"Comment\": \"v4-15-ga831f36\",\n- \"Rev\": \"a831f36d09de8f095c28eeee839df52e9de5031f\"\n  },\n  Any clues would be great? Godep is kind of inscrutable.\n\u2014\nReply to this email directly or view it on GitHub.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/375#issuecomment-166227059.\n. It's good to have assumptions challenged.  It turns out I was not running at head, despite go get -u.  v41 seems to work but for a different issue, which I will file it if is not open already\n. godep save now fails for me - specifically I have go-1.4 on this machine, but I am setting GO15VENDOREXPERIMENT=1 so that I can make a repo that works best in go-1.5, but still works with go-1.4.  godep v43 runs godep save ./... for a few minutes, then exits 0, but has not made any changes to the repo at all.  adding -v prints nothing at all.\n. Interestingly: if I rm -rf Godeps/_workspace/src before godep save\n(even without the vendor experiment) godep does not restore any of the\nsource files.  I guess it trusts Godeps.json, so I have to remove the whole\nGodeps directory, which is sort of obnoxious.\n\nIf I set export GO15VENDOREXPERIMENT=1 godep still restores to\nGodeps/_workspace/src, rather than vendor when my Go version is 1.4 - I\nwant godep to NOT pay attention to my local go version.\nOn Mon, Dec 28, 2015 at 1:18 AM, Chris Knowles notifications@github.com\nwrote:\n\nHow about with running godep save -d ./...? Does the debug mode reveal\nanything?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/386#issuecomment-167519807.\n. My local version of Go is not the version that I use to build my project.\nHaving godep check go version is inappropriate - I asked for it to use the\nnew vendoring format.\nOn Dec 28, 2015 1:15 PM, \"Edward Muller\" notifications@github.com wrote:\n@thockin https://github.com/thockin godep does not verify if what you\nhave in the workspace is what's recorded in Godeps.json. That is kind of\nhard tbh w/o messing with your $GOPATH and/or downloading a bunch of stuff.\nSo yes, it assumes that if it's in Godeps.json that it's in your workspace.\nGO15VENDOREXPERIMENT only means something to go versions >= 1.5, so I\ndon't really understand the use case for 1.4 versions of go.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/386#issuecomment-167659530.\n. I wouldn't expect that env var to do anything for the go program, but\ngodep defines it as writing into the go-1.5 compatible location.  Except\nwhen $unrelated_thing causes it to not.  I think your proposed condition\nsounds better.\n\nOn Mon, Dec 28, 2015 at 1:27 PM, Edward Muller notifications@github.com\nwrote:\n\nTBH though I wouldn't expect that env var to do anything when using any\nversion of go < 1.5\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/386#issuecomment-167661368.\n. We support both go-1.4 and go-1.5 and because we still have some\n1.5-related problems I keep 1.4 around on one machine.\n\nOn Mon, Dec 28, 2015 at 2:30 PM, Edward Muller notifications@github.com\nwrote:\n\nMy intention when introducing GO15VENDOREXPERIMENT support was to mirror\nthe go tool's behavior. With go 1.4 that flag doesn't mean anything. Since\nwe no longer depend on go list I felt a stricter interpretation within\ngodep was necessary to be more closely align with the go tool.\nPS: Why aren't you using go 1.5.2 locally at this point?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/386#issuecomment-167669821.\n. Obviously I disagree.  You're linking two things that are not related - the\ngo version I happen to have and the behavior I want from godep.\n\nUsing the same env var at all is a bit clumsy, you should really just have\na flag and let the user say what they want, rather than trying to infer\nwrongly.\nThe env var manipulates behavior of Go for versions of Go that know about\nthe variable.  It should likewise manipulate the behavior of godep for\nversions of godep that know about the variable.  No looking at other tools.\nOn Dec 28, 2015 3:29 PM, \"Edward Muller\" notifications@github.com wrote:\n\n@thockin https://github.com/thockin godep defines it's\nGO15VENDOREXPERIMENT flag like the go tool. So when using go1.4 it\nshouldn't do anything wrt that flag. I probably should have specified\nharder checks initially, but I really didn't expect people to want to\nuse it with go1.4 in that way, nor do I think most of our users. So I'm\ngoing to close this as \"works as intended\" in a few days unless others pipe\nup that my expectations are way off base.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/386#issuecomment-167678795.\n. I killed it after 30 minutes and 65M lines of output (4GB of disk)\n. I know it requires the same version - I am trying to figure out where it\ngot the idea that there was a different version involved?  The parent repo\n(libcontainer) is vendored at rev X, why is it trying to pull a child of\nthat at rev Y?\n\nOn Wed, Dec 30, 2015 at 2:59 PM, Edward Muller notifications@github.com\nwrote:\n\nGodep requires that all packages from a single repo be at the same\nrevision.\nAnd yes save needs some -v love.\nSent from my iPhone\n\nOn Dec 30, 2015, at 14:28, Tim Hockin notifications@github.com wrote:\nI'm trying to figure this out:\n$ godep save -v ./...\ngodep: WARNING: Recorded go version (go1.5.1) with minor version string\nfound.\ngodep: WARNING: Recorded major go version (go1.5) and in-use major go\nversion (go1.4) differ.\ngodep: To record current major go version run godep update -goversion.\ngodep: cannot save github.com/opencontainers/runc/libcontainer/cgroups\nat revision d97d5e8b007e4657316eed76ea30bc0f690230cf: already have\ngithub.com/opencontainers/runc/libcontainer at revision\n97bc9a7faf3dd660d9be90a2880b2e37f3cdbf38.\nRun `godep update github.com/opencontainers/runc/libcontainer' first.\nI don't want to update libcontainer. My Godeps.json file lists 97bc9a...\n- why is it trying to import a diffrent rev? Running with -v gives me\n  nothing extra - not a single line. Running with -d has generated 40 MILLION\n  LINES of debug and is still running 20 minutes later.\nNeither one seems very useful. How do I track this down?\n\u2014\nReply to this email directly or view it on GitHub.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/388#issuecomment-168091343.\n. oh for the love of ...\n\nIt's finding a different rev in GOPATH than I have vendored.  Despite the\nfact that it won't (as per another issue I filed, thanks for the patience)\nactually replace Godeps that are already present, it complains if the\nversions don't match,\nGodep's logic is inscrutable to me.\nOn Wed, Dec 30, 2015 at 3:38 PM, Tim Hockin thockin@google.com wrote:\n\nI know it requires the same version - I am trying to figure out where it\ngot the idea that there was a different version involved?  The parent repo\n(libcontainer) is vendored at rev X, why is it trying to pull a child of\nthat at rev Y?\nOn Wed, Dec 30, 2015 at 2:59 PM, Edward Muller notifications@github.com\nwrote:\n\nGodep requires that all packages from a single repo be at the same\nrevision.\nAnd yes save needs some -v love.\nSent from my iPhone\n\nOn Dec 30, 2015, at 14:28, Tim Hockin notifications@github.com wrote:\nI'm trying to figure this out:\n$ godep save -v ./...\ngodep: WARNING: Recorded go version (go1.5.1) with minor version string\nfound.\ngodep: WARNING: Recorded major go version (go1.5) and in-use major go\nversion (go1.4) differ.\ngodep: To record current major go version run godep update -goversion.\ngodep: cannot save github.com/opencontainers/runc/libcontainer/cgroups\nat revision d97d5e8b007e4657316eed76ea30bc0f690230cf: already have\ngithub.com/opencontainers/runc/libcontainer at revision\n97bc9a7faf3dd660d9be90a2880b2e37f3cdbf38.\nRun `godep update github.com/opencontainers/runc/libcontainer' first.\nI don't want to update libcontainer. My Godeps.json file lists\n97bc9a... - why is it trying to import a diffrent rev? Running with -v\ngives me nothing extra - not a single line. Running with -d has generated\n40 MILLION LINES of debug and is still running 20 minutes later.\nNeither one seems very useful. How do I track this down?\n\u2014\nReply to this email directly or view it on GitHub.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/388#issuecomment-168091343.\n. Good to know, but I won't have time to futz with glide any time soon.\n\n\nOn Apr 28, 2017 11:59 PM, \"Brandon Philips\" notifications@github.com\nwrote:\n\ncc @thockin https://github.com/thockin\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/pull/538#issuecomment-298151766, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AFVgVGrAi7ehk13RpzOqsSSEVfZ6u0q1ks5r0t_GgaJpZM4M1U0N\n.\n. Awesome!  That works.  You don't even need to make your file have a main() - just import the other main pkg as _.\n\npackage import_other\nimport _ \"github.com/other/other\"\n. I'm not sure how it happened, but it did - hence my suggestion that maybe it should yell at me.\n. I don't know HOW it happened, so I can't reproduce it.  Obviously I can\nmanually recreate it by having a Godeps file with two pkgs of teh same git\nrepo at different hashes - you don't need me to set that up (but I will if\nyou want :)\nOn Wed, Dec 2, 2015 at 1:59 PM, Edward Muller notifications@github.com\nwrote:\n\n@thockin https://github.com/thockin Can you re-produce on a public repo\nthat I can test with / base a test on?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/223#issuecomment-161447015.\n. yeah, I have no idea how it happened - it may well have been a hand edit.\nThe issue was that it took FOREVER to figure out what was going wrong\nbecause the tool knew but didn't offer any clues.\n\nOn Wed, Dec 2, 2015 at 2:44 PM, Edward Muller notifications@github.com\nwrote:\n\nI assume this happened on a godep restore?\nTBH: I'm more interested in how you got into that situation in the first\ncase, which is what I'd like a reproducer for.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/223#issuecomment-161457564.\n. > when using packages from etcd in another project, we should try to treat\nthe etcd packages as if they hadn't vendored anything\n\nThis is tricky.  If I want to vendor all of etcd, I want to use the deps\nthat etcd wants.  If I am vendoring an etcd lib that has transitive deps,\nit is less obvious.\nOn Thu, Jul 9, 2015 at 2:16 PM, Keith Rarick notifications@github.com\nwrote:\n\nThe approach I've tried to take so far is to let package main decide which\nrevision of each dependency to use. Normally, a dependency package that\nitself has further dependencies should not even use godep. A repo like etcd\nis a little more confusing because it also has some commands, so they\nvendor all their deps. But when using packages from etcd in another\nproject, we should try to treat the etcd packages as if they hadn't\nvendored anything.\nGodep could try to use etcd's recorded revision of those leaf\ndependencies, but that strategy doesn't always work: it's possible to have\ntwo repos that have each vendored a different revision of a leaf package.\nOur approach so far is to use a simple rule consistently: always let the\nuser choose. The way the user expresses this choice is by installing their\nchosen revision of each dependency (leaf or otherwise) into their $GOPATH.\nHowever, there's certainly still room for making this more convenient. If\na project has a lot of dependency repos like etcd, it's tedious to run godep\nrestore for each one. Godep could potentially make this process more\nautomatic. But note that that if the same leaf dependency has been vendored\nin multiple repos, the user will be left with an arbitrary revision of it\nin GOPATH\u2014whichever one was restored last. Maybe that's fine, but I'm a\nlittle worried that folks might not be aware of that. It could go unnoticed\nfor a long time, and might be an unwelcome surprise.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/224#issuecomment-120146703.\n. Well with Go's new vendor feature, godep won't have a say in what I do or\ndon't sub-vendor.\nOn Jul 10, 2015 11:11 PM, \"Keith Rarick\" notifications@github.com wrote:\nIt is a basic assumption of godep that you are vendoring packages, not\ncommands.\nI agree that it would be useful to vendor commands along with their\ndependencies, but as you have indicated, that's a different thing, and\ngodep doesn't really do that (yet). It might sort of work, but if so, that\nis a consequence of godep not being careful enough about what it does, not\na deliberate feature.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/224#issuecomment-120581204.\n. It's effectively impossible to vendor a project like etcd that uses godep rewriting with GO15VENDOREXPERIMENT.  As an example, we vendor from rkt, which does uses rewriting.  Error:\n\n... cannot use apisvcConn (type *\"google.golang.org/grpc\".ClientConn) as type *\"github.com/coreos/rkt/Godeps/_workspace/src/google.golang.org/grpc\".ClientConn ...\nrkt is expecting a ClientConn from github.com/coreos/rkt/Godeps/_workspace/src/google.golang.org/grpc, but my code is passing it from google.golang.org/grpc.  You can argue that the rkt API should not be exposing any types from other pkgs, but it is.\nHow is one supposed to get past this, given that there are and will be repos that use Godep in the old way for a while, yet.  Can we teach godep to recognize this and un-rewrite?\n. It would be nice to have a choice - some libs are ONLY consumed by a dep\ninternally, and having 2 versions linked is not so bad.  Other times you\nneed to flatten, like this grpc case.\nOn Jan 4, 2016 12:03 PM, \"Edward Muller\" notifications@github.com wrote:\n\nFWIW: This is also an issue with any nested vendor directory setup. I\nopened (or commented anyway) on a similar issue against Go itself. The only\nreal way to handle this is to flatten the deps so there is only one\ngoogle.golang.org/grpc package in use. I'd like to teach godep to do this\n(it already does it for the older workspace format). It needs to be taught\nhow to check both and DTRT. Hopefully later this month unless someone\nelse shows up with PRs.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/224#issuecomment-168753553.\n. I agree it might be confusing, and would need REALLY good tooling to make\nit clear how things are currently configured and to allow\nmanagement/changes.  OTOH, library L which uses dep D and exposes an API to\napp A should not expose D's type.  It would be much better to take and\nreturn L-defined interfaces.  But that's a different argument.\n\nNote that this represents a reversal from me - I was initially against\nflattening.\nOn Mon, Jan 4, 2016 at 11:52 AM, Edward Muller notifications@github.com\nwrote:\n\n@thockin https://github.com/thockin While it may be nice, I wonder if\nthe possible vectors for confusion would be worth it.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/224#issuecomment-168782017.\n. Are you sure this is what you are hitting? Converting our main repo mostly\n\"just worked\", including recursive godeps.\n\nStart with a clean GOPATH\n    godep restore\n    rm -rf Godeps\n    godep save ./...\n    git add vendor\n    git add -f $(git ls-files --other vendor/)\nLook for other files under Godeps that you might want to restore (like the\nlicense state)\nOn Fri, May 13, 2016 at 1:55 PM, dlorenc notifications@github.com wrote:\n\n@thockin https://github.com/thockin How did you get past this? I'm now\nhotting the same thing in minikube trying to update to the latest\nkubernetes build.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/224#issuecomment-219156778\n. Thanks, it turns out I was NOT running at head, as I thought.\n. I did a 'go get -u' yesterday\nOn Dec 20, 2015 11:54 PM, \"Edward Muller\" notifications@github.com wrote:\nWhat version of godep? (godep version)\nSent from my iPhone\n\nOn Dec 20, 2015, at 22:16, Tim Hockin notifications@github.com wrote:\nI just did a godep restore on kubernetes followed by godep save ./... -\nI expected this to be a no-op, but I wanted to verify. Instead, I find that\nONE particular library has had it's version changed to the current tip of\nthe master branch.\nI can't figure out why. godep restore -v is failing (#374 here)\nSpecifically:\n{\n\"ImportPath\": \"github.com/coreos/go-systemd/dbus\",\n- \"Comment\": \"v2-27-g97e243d\",\n- \"Rev\": \"97e243d21a8e232e9d8af38ba2366dfcfceebeba\"\n- \"Comment\": \"v4-15-ga831f36\",\n- \"Rev\": \"a831f36d09de8f095c28eeee839df52e9de5031f\"\n  },\n  Any clues would be great? Godep is kind of inscrutable.\n\u2014\nReply to this email directly or view it on GitHub.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/375#issuecomment-166227059.\n. It's good to have assumptions challenged.  It turns out I was not running at head, despite go get -u.  v41 seems to work but for a different issue, which I will file it if is not open already\n. godep save now fails for me - specifically I have go-1.4 on this machine, but I am setting GO15VENDOREXPERIMENT=1 so that I can make a repo that works best in go-1.5, but still works with go-1.4.  godep v43 runs godep save ./... for a few minutes, then exits 0, but has not made any changes to the repo at all.  adding -v prints nothing at all.\n. Interestingly: if I rm -rf Godeps/_workspace/src before godep save\n(even without the vendor experiment) godep does not restore any of the\nsource files.  I guess it trusts Godeps.json, so I have to remove the whole\nGodeps directory, which is sort of obnoxious.\n\nIf I set export GO15VENDOREXPERIMENT=1 godep still restores to\nGodeps/_workspace/src, rather than vendor when my Go version is 1.4 - I\nwant godep to NOT pay attention to my local go version.\nOn Mon, Dec 28, 2015 at 1:18 AM, Chris Knowles notifications@github.com\nwrote:\n\nHow about with running godep save -d ./...? Does the debug mode reveal\nanything?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/386#issuecomment-167519807.\n. My local version of Go is not the version that I use to build my project.\nHaving godep check go version is inappropriate - I asked for it to use the\nnew vendoring format.\nOn Dec 28, 2015 1:15 PM, \"Edward Muller\" notifications@github.com wrote:\n@thockin https://github.com/thockin godep does not verify if what you\nhave in the workspace is what's recorded in Godeps.json. That is kind of\nhard tbh w/o messing with your $GOPATH and/or downloading a bunch of stuff.\nSo yes, it assumes that if it's in Godeps.json that it's in your workspace.\nGO15VENDOREXPERIMENT only means something to go versions >= 1.5, so I\ndon't really understand the use case for 1.4 versions of go.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/386#issuecomment-167659530.\n. I wouldn't expect that env var to do anything for the go program, but\ngodep defines it as writing into the go-1.5 compatible location.  Except\nwhen $unrelated_thing causes it to not.  I think your proposed condition\nsounds better.\n\nOn Mon, Dec 28, 2015 at 1:27 PM, Edward Muller notifications@github.com\nwrote:\n\nTBH though I wouldn't expect that env var to do anything when using any\nversion of go < 1.5\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/386#issuecomment-167661368.\n. We support both go-1.4 and go-1.5 and because we still have some\n1.5-related problems I keep 1.4 around on one machine.\n\nOn Mon, Dec 28, 2015 at 2:30 PM, Edward Muller notifications@github.com\nwrote:\n\nMy intention when introducing GO15VENDOREXPERIMENT support was to mirror\nthe go tool's behavior. With go 1.4 that flag doesn't mean anything. Since\nwe no longer depend on go list I felt a stricter interpretation within\ngodep was necessary to be more closely align with the go tool.\nPS: Why aren't you using go 1.5.2 locally at this point?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/386#issuecomment-167669821.\n. Obviously I disagree.  You're linking two things that are not related - the\ngo version I happen to have and the behavior I want from godep.\n\nUsing the same env var at all is a bit clumsy, you should really just have\na flag and let the user say what they want, rather than trying to infer\nwrongly.\nThe env var manipulates behavior of Go for versions of Go that know about\nthe variable.  It should likewise manipulate the behavior of godep for\nversions of godep that know about the variable.  No looking at other tools.\nOn Dec 28, 2015 3:29 PM, \"Edward Muller\" notifications@github.com wrote:\n\n@thockin https://github.com/thockin godep defines it's\nGO15VENDOREXPERIMENT flag like the go tool. So when using go1.4 it\nshouldn't do anything wrt that flag. I probably should have specified\nharder checks initially, but I really didn't expect people to want to\nuse it with go1.4 in that way, nor do I think most of our users. So I'm\ngoing to close this as \"works as intended\" in a few days unless others pipe\nup that my expectations are way off base.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/386#issuecomment-167678795.\n. I killed it after 30 minutes and 65M lines of output (4GB of disk)\n. I know it requires the same version - I am trying to figure out where it\ngot the idea that there was a different version involved?  The parent repo\n(libcontainer) is vendored at rev X, why is it trying to pull a child of\nthat at rev Y?\n\nOn Wed, Dec 30, 2015 at 2:59 PM, Edward Muller notifications@github.com\nwrote:\n\nGodep requires that all packages from a single repo be at the same\nrevision.\nAnd yes save needs some -v love.\nSent from my iPhone\n\nOn Dec 30, 2015, at 14:28, Tim Hockin notifications@github.com wrote:\nI'm trying to figure this out:\n$ godep save -v ./...\ngodep: WARNING: Recorded go version (go1.5.1) with minor version string\nfound.\ngodep: WARNING: Recorded major go version (go1.5) and in-use major go\nversion (go1.4) differ.\ngodep: To record current major go version run godep update -goversion.\ngodep: cannot save github.com/opencontainers/runc/libcontainer/cgroups\nat revision d97d5e8b007e4657316eed76ea30bc0f690230cf: already have\ngithub.com/opencontainers/runc/libcontainer at revision\n97bc9a7faf3dd660d9be90a2880b2e37f3cdbf38.\nRun `godep update github.com/opencontainers/runc/libcontainer' first.\nI don't want to update libcontainer. My Godeps.json file lists 97bc9a...\n- why is it trying to import a diffrent rev? Running with -v gives me\n  nothing extra - not a single line. Running with -d has generated 40 MILLION\n  LINES of debug and is still running 20 minutes later.\nNeither one seems very useful. How do I track this down?\n\u2014\nReply to this email directly or view it on GitHub.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/388#issuecomment-168091343.\n. oh for the love of ...\n\nIt's finding a different rev in GOPATH than I have vendored.  Despite the\nfact that it won't (as per another issue I filed, thanks for the patience)\nactually replace Godeps that are already present, it complains if the\nversions don't match,\nGodep's logic is inscrutable to me.\nOn Wed, Dec 30, 2015 at 3:38 PM, Tim Hockin thockin@google.com wrote:\n\nI know it requires the same version - I am trying to figure out where it\ngot the idea that there was a different version involved?  The parent repo\n(libcontainer) is vendored at rev X, why is it trying to pull a child of\nthat at rev Y?\nOn Wed, Dec 30, 2015 at 2:59 PM, Edward Muller notifications@github.com\nwrote:\n\nGodep requires that all packages from a single repo be at the same\nrevision.\nAnd yes save needs some -v love.\nSent from my iPhone\n\nOn Dec 30, 2015, at 14:28, Tim Hockin notifications@github.com wrote:\nI'm trying to figure this out:\n$ godep save -v ./...\ngodep: WARNING: Recorded go version (go1.5.1) with minor version string\nfound.\ngodep: WARNING: Recorded major go version (go1.5) and in-use major go\nversion (go1.4) differ.\ngodep: To record current major go version run godep update -goversion.\ngodep: cannot save github.com/opencontainers/runc/libcontainer/cgroups\nat revision d97d5e8b007e4657316eed76ea30bc0f690230cf: already have\ngithub.com/opencontainers/runc/libcontainer at revision\n97bc9a7faf3dd660d9be90a2880b2e37f3cdbf38.\nRun `godep update github.com/opencontainers/runc/libcontainer' first.\nI don't want to update libcontainer. My Godeps.json file lists\n97bc9a... - why is it trying to import a diffrent rev? Running with -v\ngives me nothing extra - not a single line. Running with -d has generated\n40 MILLION LINES of debug and is still running 20 minutes later.\nNeither one seems very useful. How do I track this down?\n\u2014\nReply to this email directly or view it on GitHub.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/388#issuecomment-168091343.\n. Good to know, but I won't have time to futz with glide any time soon.\n\n\nOn Apr 28, 2017 11:59 PM, \"Brandon Philips\" notifications@github.com\nwrote:\n\ncc @thockin https://github.com/thockin\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/pull/538#issuecomment-298151766, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AFVgVGrAi7ehk13RpzOqsSSEVfZ6u0q1ks5r0t_GgaJpZM4M1U0N\n.\n. \n",
    "apriendeau": "@kr It shouldn't break when someone does use their own packages. Recurisiviness will be a problem but that means that godeps should still work. For example, godep save fails with go-dockerclient. \n. I forgot to mention, I was using the vendor experiment and 1.5beta3\n. It looks like you are replacing party with godeps.  I was referring to code that depends on go-dockerclient as it is now\n. @freeformz if you use the first example as new project then run:\nshell\nexport GO15VENDOREXPERIMENT=1\n$ go get ./...\npackage github.com/apriendeau/recreate-godeps\n        imports github.com/fsouza/go-dockerclient\n        imports github.com/fsouza/go-dockerclient/vendor/github.com/docker/docker/pkg/archive\n        imports github.com/fsouza/go-dockerclient/vendor/github.com/Sirupsen/logrus: must be imported as github.com/Sirupsen/logrus\npackage github.com/apriendeau/recreate-godeps\n        imports github.com/fsouza/go-dockerclient\n        imports github.com/fsouza/go-dockerclient/vendor/github.com/docker/docker/pkg/archive: must be imported as github.com/docker/docker/pkg/archive\npackage github.com/apriendeau/recreate-godeps\n        imports github.com/fsouza/go-dockerclient\n        imports github.com/fsouza/go-dockerclient/vendor/github.com/docker/docker/pkg/fileutils: must be imported as github.com/docker/docker/pkg/fileutils\npackage github.com/apriendeau/recreate-godeps\n        imports github.com/fsouza/go-dockerclient\n        imports github.com/fsouza/go-dockerclient/vendor/github.com/docker/docker/pkg/archive\n        imports github.com/fsouza/go-dockerclient/vendor/github.com/docker/docker/pkg/pools\n        imports github.com/fsouza/go-dockerclient/vendor/github.com/docker/docker/pkg/ioutils: must be imported as github.com/docker/docker/pkg/ioutils\npackage github.com/apriendeau/recreate-godeps\n        imports github.com/fsouza/go-dockerclient\n        imports github.com/fsouza/go-dockerclient/vendor/github.com/docker/docker/pkg/archive\n        imports github.com/fsouza/go-dockerclient/vendor/github.com/docker/docker/pkg/pools: must be imported as github.com/docker/docker/pkg/pools\npackage github.com/apriendeau/recreate-godeps\n        imports github.com/fsouza/go-dockerclient\n        imports github.com/fsouza/go-dockerclient/vendor/github.com/docker/docker/pkg/archive\n        imports github.com/fsouza/go-dockerclient/vendor/github.com/docker/docker/pkg/promise: must be imported as github.com/docker/docker/pkg/promise\npackage github.com/apriendeau/recreate-godeps\n        imports github.com/fsouza/go-dockerclient\n        imports github.com/fsouza/go-dockerclient/vendor/github.com/docker/docker/pkg/stdcopy: must be imported as github.com/docker/docker/pkg/stdcopy\npackage github.com/apriendeau/recreate-godeps\n        imports github.com/fsouza/go-dockerclient\n        imports github.com/fsouza/go-dockerclient/vendor/github.com/docker/docker/pkg/archive\n        imports github.com/fsouza/go-dockerclient/vendor/github.com/docker/docker/pkg/system: must be imported as github.com/docker/docker/pkg/system\n$ godep save\ngodep: cannot find package \"github.com/docker/docker/pkg/archive\" in any of:\n        /usr/local/opt/go/libexec/src/github.com/docker/docker/pkg/archive (from $GOROOT)\n        /Users/austin/Go/src/github.com/docker/docker/pkg/archive (from $GOPATH)\ngodep: cannot find package \"github.com/docker/docker/pkg/fileutils\" in any of:\n        /usr/local/opt/go/libexec/src/github.com/docker/docker/pkg/fileutils (from $GOROOT)\n        /Users/austin/Go/src/github.com/docker/docker/pkg/fileutils (from $GOPATH)\ngodep: cannot find package \"github.com/docker/docker/pkg/ioutils\" in any of:\n        /usr/local/opt/go/libexec/src/github.com/docker/docker/pkg/ioutils (from $GOROOT)\n        /Users/austin/Go/src/github.com/docker/docker/pkg/ioutils (from $GOPATH)\ngodep: cannot find package \"github.com/docker/docker/pkg/pools\" in any of:\n        /usr/local/opt/go/libexec/src/github.com/docker/docker/pkg/pools (from $GOROOT)\n        /Users/austin/Go/src/github.com/docker/docker/pkg/pools (from $GOPATH)\ngodep: cannot find package \"github.com/docker/docker/pkg/promise\" in any of:\n        /usr/local/opt/go/libexec/src/github.com/docker/docker/pkg/promise (from $GOROOT)\n        /Users/austin/Go/src/github.com/docker/docker/pkg/promise (from $GOPATH)\ngodep: cannot find package \"github.com/docker/docker/pkg/stdcopy\" in any of:\n        /usr/local/opt/go/libexec/src/github.com/docker/docker/pkg/stdcopy (from $GOROOT)\n        /Users/austin/Go/src/github.com/docker/docker/pkg/stdcopy (from $GOPATH)\ngodep: cannot find package \"github.com/docker/docker/pkg/system\" in any of:\n        /usr/local/opt/go/libexec/src/github.com/docker/docker/pkg/system (from $GOROOT)\n        /Users/austin/Go/src/github.com/docker/docker/pkg/system (from $GOPATH)\ngodep: error loading dependencies\n. @kr It shouldn't break when someone does use their own packages. Recurisiviness will be a problem but that means that godeps should still work. For example, godep save fails with go-dockerclient. \n. I forgot to mention, I was using the vendor experiment and 1.5beta3\n. It looks like you are replacing party with godeps.  I was referring to code that depends on go-dockerclient as it is now\n. @freeformz if you use the first example as new project then run:\nshell\nexport GO15VENDOREXPERIMENT=1\n$ go get ./...\npackage github.com/apriendeau/recreate-godeps\n        imports github.com/fsouza/go-dockerclient\n        imports github.com/fsouza/go-dockerclient/vendor/github.com/docker/docker/pkg/archive\n        imports github.com/fsouza/go-dockerclient/vendor/github.com/Sirupsen/logrus: must be imported as github.com/Sirupsen/logrus\npackage github.com/apriendeau/recreate-godeps\n        imports github.com/fsouza/go-dockerclient\n        imports github.com/fsouza/go-dockerclient/vendor/github.com/docker/docker/pkg/archive: must be imported as github.com/docker/docker/pkg/archive\npackage github.com/apriendeau/recreate-godeps\n        imports github.com/fsouza/go-dockerclient\n        imports github.com/fsouza/go-dockerclient/vendor/github.com/docker/docker/pkg/fileutils: must be imported as github.com/docker/docker/pkg/fileutils\npackage github.com/apriendeau/recreate-godeps\n        imports github.com/fsouza/go-dockerclient\n        imports github.com/fsouza/go-dockerclient/vendor/github.com/docker/docker/pkg/archive\n        imports github.com/fsouza/go-dockerclient/vendor/github.com/docker/docker/pkg/pools\n        imports github.com/fsouza/go-dockerclient/vendor/github.com/docker/docker/pkg/ioutils: must be imported as github.com/docker/docker/pkg/ioutils\npackage github.com/apriendeau/recreate-godeps\n        imports github.com/fsouza/go-dockerclient\n        imports github.com/fsouza/go-dockerclient/vendor/github.com/docker/docker/pkg/archive\n        imports github.com/fsouza/go-dockerclient/vendor/github.com/docker/docker/pkg/pools: must be imported as github.com/docker/docker/pkg/pools\npackage github.com/apriendeau/recreate-godeps\n        imports github.com/fsouza/go-dockerclient\n        imports github.com/fsouza/go-dockerclient/vendor/github.com/docker/docker/pkg/archive\n        imports github.com/fsouza/go-dockerclient/vendor/github.com/docker/docker/pkg/promise: must be imported as github.com/docker/docker/pkg/promise\npackage github.com/apriendeau/recreate-godeps\n        imports github.com/fsouza/go-dockerclient\n        imports github.com/fsouza/go-dockerclient/vendor/github.com/docker/docker/pkg/stdcopy: must be imported as github.com/docker/docker/pkg/stdcopy\npackage github.com/apriendeau/recreate-godeps\n        imports github.com/fsouza/go-dockerclient\n        imports github.com/fsouza/go-dockerclient/vendor/github.com/docker/docker/pkg/archive\n        imports github.com/fsouza/go-dockerclient/vendor/github.com/docker/docker/pkg/system: must be imported as github.com/docker/docker/pkg/system\n$ godep save\ngodep: cannot find package \"github.com/docker/docker/pkg/archive\" in any of:\n        /usr/local/opt/go/libexec/src/github.com/docker/docker/pkg/archive (from $GOROOT)\n        /Users/austin/Go/src/github.com/docker/docker/pkg/archive (from $GOPATH)\ngodep: cannot find package \"github.com/docker/docker/pkg/fileutils\" in any of:\n        /usr/local/opt/go/libexec/src/github.com/docker/docker/pkg/fileutils (from $GOROOT)\n        /Users/austin/Go/src/github.com/docker/docker/pkg/fileutils (from $GOPATH)\ngodep: cannot find package \"github.com/docker/docker/pkg/ioutils\" in any of:\n        /usr/local/opt/go/libexec/src/github.com/docker/docker/pkg/ioutils (from $GOROOT)\n        /Users/austin/Go/src/github.com/docker/docker/pkg/ioutils (from $GOPATH)\ngodep: cannot find package \"github.com/docker/docker/pkg/pools\" in any of:\n        /usr/local/opt/go/libexec/src/github.com/docker/docker/pkg/pools (from $GOROOT)\n        /Users/austin/Go/src/github.com/docker/docker/pkg/pools (from $GOPATH)\ngodep: cannot find package \"github.com/docker/docker/pkg/promise\" in any of:\n        /usr/local/opt/go/libexec/src/github.com/docker/docker/pkg/promise (from $GOROOT)\n        /Users/austin/Go/src/github.com/docker/docker/pkg/promise (from $GOPATH)\ngodep: cannot find package \"github.com/docker/docker/pkg/stdcopy\" in any of:\n        /usr/local/opt/go/libexec/src/github.com/docker/docker/pkg/stdcopy (from $GOROOT)\n        /Users/austin/Go/src/github.com/docker/docker/pkg/stdcopy (from $GOPATH)\ngodep: cannot find package \"github.com/docker/docker/pkg/system\" in any of:\n        /usr/local/opt/go/libexec/src/github.com/docker/docker/pkg/system (from $GOROOT)\n        /Users/austin/Go/src/github.com/docker/docker/pkg/system (from $GOPATH)\ngodep: error loading dependencies\n. ",
    "pedgeio": "@apriendeau @freeformz of note, you should pull on go-dockerclient, I preemptively fixed the go 1.5 vendoring issue with https://github.com/fsouza/go-dockerclient/pull/339\n. I'm having a lot of packages not saved when vendoring github.com/libopenstorage/openstorage. Go 1.5.1, vendor experiment enabled, linux, amd64. \n. I'm having issues all the way back to v33, when go list was removed, a ton of packages end up missing. github.com/libopenstorage/openstorage is repeatable (on linux/amd64):\nmake update-test-deps # get everything for save\nmake vendor # save, but if you want to test v33-v35, comment out the custom stuff I did to lock it to v32, and re-add go get -v github.com/tools/godep\ngit status # so much stuffz gone!\nmake docker-test # will not be able to build because a lot of packages are not in vendor\n. thanks :-)\n. Was this closed because it is a duplicate?\n. It remains unfixed then, the above comment for openstorage is a repeatable example. Can we re-open?\n. ```\n$ make vendor\nrm -f $GOPATH/bin/godep\ngo get -v github.com/tools/godep\ngithub.com/tools/godep\ncurl -sS -L https://github.com/tools/godep/releases/download/v32/godep_Linux_amd64 > $GOPATH/bin/godep\nchmod +x $GOPATH/bin/godep\nrm -rf Godeps\nrm -rf vendor\nTODO: when godep fixes downloading all tags, remove the custom package\nhttps://github.com/tools/godep/issues/271\ngodep save github.com/libopenstorage/openstorage/api github.com/libopenstorage/openstorage/api/client github.com/libopenstorage/openstorage/api/server github.com/libopenstorage/openstorage/cli github.com/libopenstorage/openstorage/cluster github.com/libopenstorage/openstorage/cmd/osd github.com/libopenstorage/openstorage/config github.com/libopenstorage/openstorage/graph github.com/libopenstorage/openstorage/graph/drivers github.com/libopenstorage/openstorage/graph/drivers/layer0 github.com/libopenstorage/openstorage/graph/drivers/proxy github.com/libopenstorage/openstorage/pkg/chaos github.com/libopenstorage/openstorage/pkg/device github.com/libopenstorage/openstorage/pkg/mount github.com/libopenstorage/openstorage/pkg/seed github.com/libopenstorage/openstorage/pkg/stats github.com/libopenstorage/openstorage/volume github.com/libopenstorage/openstorage/volume/drivers github.com/libopenstorage/openstorage/volume/drivers/aws github.com/libopenstorage/openstorage/volume/drivers/btrfs github.com/libopenstorage/openstorage/volume/drivers/buse github.com/libopenstorage/openstorage/volume/drivers/fuse github.com/libopenstorage/openstorage/volume/drivers/nfs github.com/libopenstorage/openstorage/volume/drivers/pwx github.com/libopenstorage/openstorage/volume/drivers/test github.com/libopenstorage/openstorage/volume/drivers/vfs github.com/docker/docker/pkg/chrootarchive github.com/stretchr/testify/require\nrm -rf Godeps\n[~/go/src/github.com/libopenstorage/openstorage]\nvagrant$ git status\nOn branch update_vendor\nChanges not staged for commit:\n  (use \"git add/rm ...\" to update what will be committed)\n  (use \"git checkout -- ...\" to discard changes in working directory)\nmodified:   Makefile\ndeleted:    vendor/bazil.org/fuse/.gitattributes\ndeleted:    vendor/bazil.org/fuse/.gitignore\ndeleted:    vendor/bazil.org/fuse/LICENSE\ndeleted:    vendor/bazil.org/fuse/README.md\ndeleted:    vendor/bazil.org/fuse/buffer.go\ndeleted:    vendor/bazil.org/fuse/debug.go\ndeleted:    vendor/bazil.org/fuse/doc/.gitignore\ndeleted:    vendor/bazil.org/fuse/doc/README.md\ndeleted:    vendor/bazil.org/fuse/doc/mount-linux-error-init.seq\ndeleted:    vendor/bazil.org/fuse/doc/mount-linux-error-init.seq.png\ndeleted:    vendor/bazil.org/fuse/doc/mount-linux.seq\ndeleted:    vendor/bazil.org/fuse/doc/mount-linux.seq.png\ndeleted:    vendor/bazil.org/fuse/doc/mount-osx-error-init.seq\ndeleted:    vendor/bazil.org/fuse/doc/mount-osx-error-init.seq.png\ndeleted:    vendor/bazil.org/fuse/doc/mount-osx.seq\ndeleted:    vendor/bazil.org/fuse/doc/mount-osx.seq.png\ndeleted:    vendor/bazil.org/fuse/doc/mount-sequence.md\ndeleted:    vendor/bazil.org/fuse/doc/writing-docs.md\ndeleted:    vendor/bazil.org/fuse/error_darwin.go\ndeleted:    vendor/bazil.org/fuse/error_freebsd.go\ndeleted:    vendor/bazil.org/fuse/error_linux.go\ndeleted:    vendor/bazil.org/fuse/error_std.go\ndeleted:    vendor/bazil.org/fuse/examples/clockfs/clockfs.go\ndeleted:    vendor/bazil.org/fuse/examples/hellofs/hello.go\ndeleted:    vendor/bazil.org/fuse/fs/bench/doc.go\ndeleted:    vendor/bazil.org/fuse/fs/fstestutil/debug.go\ndeleted:    vendor/bazil.org/fuse/fs/fstestutil/doc.go\ndeleted:    vendor/bazil.org/fuse/fs/fstestutil/mounted.go\ndeleted:    vendor/bazil.org/fuse/fs/fstestutil/mountinfo.go\ndeleted:    vendor/bazil.org/fuse/fs/fstestutil/mountinfo_darwin.go\ndeleted:    vendor/bazil.org/fuse/fs/fstestutil/mountinfo_freebsd.go\ndeleted:    vendor/bazil.org/fuse/fs/fstestutil/mountinfo_linux.go\ndeleted:    vendor/bazil.org/fuse/fs/fstestutil/record/buffer.go\ndeleted:    vendor/bazil.org/fuse/fs/fstestutil/record/record.go\ndeleted:    vendor/bazil.org/fuse/fs/fstestutil/record/wait.go\ndeleted:    vendor/bazil.org/fuse/fs/fstestutil/testfs.go\ndeleted:    vendor/bazil.org/fuse/fs/serve.go\ndeleted:    vendor/bazil.org/fuse/fs/tree.go\ndeleted:    vendor/bazil.org/fuse/fuse.go\ndeleted:    vendor/bazil.org/fuse/fuse_kernel.go\ndeleted:    vendor/bazil.org/fuse/fuse_kernel_darwin.go\ndeleted:    vendor/bazil.org/fuse/fuse_kernel_freebsd.go\ndeleted:    vendor/bazil.org/fuse/fuse_kernel_linux.go\ndeleted:    vendor/bazil.org/fuse/fuse_kernel_std.go\ndeleted:    vendor/bazil.org/fuse/fuseutil/fuseutil.go\ndeleted:    vendor/bazil.org/fuse/mount.go\ndeleted:    vendor/bazil.org/fuse/mount_darwin.go\ndeleted:    vendor/bazil.org/fuse/mount_freebsd.go\ndeleted:    vendor/bazil.org/fuse/mount_linux.go\ndeleted:    vendor/bazil.org/fuse/options.go\ndeleted:    vendor/bazil.org/fuse/options_darwin.go\ndeleted:    vendor/bazil.org/fuse/options_freebsd.go\ndeleted:    vendor/bazil.org/fuse/options_linux.go\ndeleted:    vendor/bazil.org/fuse/protocol.go\ndeleted:    vendor/bazil.org/fuse/syscallx/doc.go\ndeleted:    vendor/bazil.org/fuse/syscallx/generate\ndeleted:    vendor/bazil.org/fuse/syscallx/msync.go\ndeleted:    vendor/bazil.org/fuse/syscallx/msync_386.go\ndeleted:    vendor/bazil.org/fuse/syscallx/msync_amd64.go\ndeleted:    vendor/bazil.org/fuse/syscallx/syscallx.go\ndeleted:    vendor/bazil.org/fuse/syscallx/syscallx_std.go\ndeleted:    vendor/bazil.org/fuse/syscallx/xattr_darwin.go\ndeleted:    vendor/bazil.org/fuse/syscallx/xattr_darwin_386.go\ndeleted:    vendor/bazil.org/fuse/syscallx/xattr_darwin_amd64.go\ndeleted:    vendor/bazil.org/fuse/unmount.go\ndeleted:    vendor/bazil.org/fuse/unmount_linux.go\ndeleted:    vendor/bazil.org/fuse/unmount_std.go\nmodified:   vendor/github.com/Sirupsen/logrus/README.md\nmodified:   vendor/github.com/Sirupsen/logrus/hooks/syslog/syslog.go\nmodified:   vendor/github.com/Sirupsen/logrus/logger.go\nmodified:   vendor/github.com/Sirupsen/logrus/terminal_notwindows.go\nmodified:   vendor/github.com/Sirupsen/logrus/terminal_windows.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/awserr/error.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/awserr/types.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/awsutil/copy.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/awsutil/path_value.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/awsutil/prettify.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/config.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/convert_types.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/corehandlers/handlers.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/corehandlers/param_validator.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/credentials/chain_provider.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/credentials/credentials.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/credentials/ec2rolecreds/ec2_role_provider.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/credentials/example.ini\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/credentials/shared_credentials_provider.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/credentials/stscreds/assume_role_provider.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/defaults/defaults.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/ec2metadata/api.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/ec2metadata/service.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/errors.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/logger.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/request/handlers.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/request/request.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/request/retryer.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/service/default_retryer.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/service/service.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/service/serviceinfo/service_info.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/types.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/version.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/internal/endpoints/endpoints.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/internal/endpoints/endpoints.json\ndeleted:    vendor/github.com/aws/aws-sdk-go/internal/endpoints/endpoints_map.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/internal/protocol/ec2query/build.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/internal/protocol/ec2query/unmarshal.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/internal/protocol/json/jsonutil/build.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/internal/protocol/json/jsonutil/unmarshal.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/internal/protocol/jsonrpc/jsonrpc.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/internal/protocol/query/queryutil/queryutil.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/internal/protocol/rest/build.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/internal/protocol/rest/payload.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/internal/protocol/rest/unmarshal.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/internal/protocol/xml/xmlutil/build.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/internal/protocol/xml/xmlutil/unmarshal.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/internal/protocol/xml/xmlutil/xml_to_struct.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/internal/signer/v4/v4.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/service/ec2/api.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/service/ec2/customizations.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/service/ec2/ec2iface/interface.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/service/ec2/service.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/service/opsworks/api.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/service/opsworks/opsworksiface/interface.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/service/opsworks/service.go\ndeleted:    vendor/github.com/codegangsta/cli/.travis.yml\ndeleted:    vendor/github.com/codegangsta/cli/LICENSE\ndeleted:    vendor/github.com/codegangsta/cli/README.md\ndeleted:    vendor/github.com/codegangsta/cli/app.go\ndeleted:    vendor/github.com/codegangsta/cli/autocomplete/bash_autocomplete\ndeleted:    vendor/github.com/codegangsta/cli/autocomplete/zsh_autocomplete\ndeleted:    vendor/github.com/codegangsta/cli/cli.go\ndeleted:    vendor/github.com/codegangsta/cli/command.go\ndeleted:    vendor/github.com/codegangsta/cli/context.go\ndeleted:    vendor/github.com/codegangsta/cli/flag.go\ndeleted:    vendor/github.com/codegangsta/cli/help.go\ndeleted:    vendor/github.com/coreos/go-etcd/etcd/add_child.go\ndeleted:    vendor/github.com/coreos/go-etcd/etcd/client.go\ndeleted:    vendor/github.com/coreos/go-etcd/etcd/cluster.go\ndeleted:    vendor/github.com/coreos/go-etcd/etcd/compare_and_delete.go\ndeleted:    vendor/github.com/coreos/go-etcd/etcd/compare_and_swap.go\ndeleted:    vendor/github.com/coreos/go-etcd/etcd/debug.go\ndeleted:    vendor/github.com/coreos/go-etcd/etcd/delete.go\ndeleted:    vendor/github.com/coreos/go-etcd/etcd/error.go\ndeleted:    vendor/github.com/coreos/go-etcd/etcd/get.go\ndeleted:    vendor/github.com/coreos/go-etcd/etcd/member.go\ndeleted:    vendor/github.com/coreos/go-etcd/etcd/options.go\ndeleted:    vendor/github.com/coreos/go-etcd/etcd/requests.go\ndeleted:    vendor/github.com/coreos/go-etcd/etcd/response.generated.go\ndeleted:    vendor/github.com/coreos/go-etcd/etcd/response.go\ndeleted:    vendor/github.com/coreos/go-etcd/etcd/set_update_create.go\ndeleted:    vendor/github.com/coreos/go-etcd/etcd/shuffle.go\ndeleted:    vendor/github.com/coreos/go-etcd/etcd/version.go\ndeleted:    vendor/github.com/coreos/go-etcd/etcd/watch.go\ndeleted:    vendor/github.com/davecgh/go-spew/spew/bypass.go\ndeleted:    vendor/github.com/davecgh/go-spew/spew/bypasssafe.go\ndeleted:    vendor/github.com/davecgh/go-spew/spew/common.go\ndeleted:    vendor/github.com/davecgh/go-spew/spew/config.go\ndeleted:    vendor/github.com/davecgh/go-spew/spew/doc.go\ndeleted:    vendor/github.com/davecgh/go-spew/spew/dump.go\ndeleted:    vendor/github.com/davecgh/go-spew/spew/format.go\ndeleted:    vendor/github.com/davecgh/go-spew/spew/spew.go\ndeleted:    vendor/github.com/docker/distribution/digest/digest.go\ndeleted:    vendor/github.com/docker/distribution/digest/digester.go\ndeleted:    vendor/github.com/docker/distribution/digest/doc.go\ndeleted:    vendor/github.com/docker/distribution/digest/set.go\ndeleted:    vendor/github.com/docker/distribution/digest/tarsum.go\ndeleted:    vendor/github.com/docker/distribution/digest/verifiers.go\ndeleted:    vendor/github.com/docker/distribution/registry/api/errcode/errors.go\ndeleted:    vendor/github.com/docker/distribution/registry/api/errcode/handler.go\ndeleted:    vendor/github.com/docker/distribution/registry/api/errcode/register.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/aufs/aufs.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/aufs/dirs.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/aufs/migrate.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/aufs/mount.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/aufs/mount_linux.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/aufs/mount_unsupported.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/btrfs/btrfs.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/btrfs/dummy_unsupported.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/btrfs/version.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/btrfs/version_none.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/devmapper/README.md\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/devmapper/deviceset.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/devmapper/devmapper_doc.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/devmapper/driver.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/devmapper/mount.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/driver.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/driver_freebsd.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/driver_linux.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/driver_unsupported.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/driver_windows.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/fsdiff.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/graphtest/graphtest.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/imagerestorer.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/overlay/copy.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/overlay/overlay.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/overlay/overlay_unsupported.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/plugin.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/plugin_unsupported.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/proxy.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/vfs/driver.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/vfs/driver_unsupported.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/windows/windows.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/zfs/MAINTAINERS\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/zfs/zfs.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/zfs/zfs_freebsd.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/zfs/zfs_linux.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/zfs/zfs_unsupported.go\ndeleted:    vendor/github.com/docker/docker/errors/README.md\ndeleted:    vendor/github.com/docker/docker/errors/builder.go\ndeleted:    vendor/github.com/docker/docker/errors/daemon.go\ndeleted:    vendor/github.com/docker/docker/errors/error.go\ndeleted:    vendor/github.com/docker/docker/errors/image.go\ndeleted:    vendor/github.com/docker/docker/errors/server.go\ndeleted:    vendor/github.com/docker/docker/image/fixtures/post1.9/expected_computed_id\ndeleted:    vendor/github.com/docker/docker/image/fixtures/post1.9/expected_config\ndeleted:    vendor/github.com/docker/docker/image/fixtures/post1.9/layer_id\ndeleted:    vendor/github.com/docker/docker/image/fixtures/post1.9/parent_id\ndeleted:    vendor/github.com/docker/docker/image/fixtures/post1.9/v1compatibility\ndeleted:    vendor/github.com/docker/docker/image/fixtures/pre1.9/expected_computed_id\ndeleted:    vendor/github.com/docker/docker/image/fixtures/pre1.9/expected_config\ndeleted:    vendor/github.com/docker/docker/image/fixtures/pre1.9/layer_id\ndeleted:    vendor/github.com/docker/docker/image/fixtures/pre1.9/parent_id\ndeleted:    vendor/github.com/docker/docker/image/fixtures/pre1.9/v1compatibility\ndeleted:    vendor/github.com/docker/docker/image/image.go\ndeleted:    vendor/github.com/docker/docker/image/spec/v1.md\ndeleted:    vendor/github.com/docker/docker/opts/envfile.go\ndeleted:    vendor/github.com/docker/docker/opts/hosts_unix.go\ndeleted:    vendor/github.com/docker/docker/opts/hosts_windows.go\ndeleted:    vendor/github.com/docker/docker/opts/ip.go\ndeleted:    vendor/github.com/docker/docker/opts/opts.go\ndeleted:    vendor/github.com/docker/docker/opts/ulimit.go\nmodified:   vendor/github.com/docker/docker/pkg/archive/archive.go\nmodified:   vendor/github.com/docker/docker/pkg/archive/archive_unix.go\nmodified:   vendor/github.com/docker/docker/pkg/archive/archive_windows.go\nmodified:   vendor/github.com/docker/docker/pkg/archive/changes.go\nmodified:   vendor/github.com/docker/docker/pkg/archive/copy.go\nmodified:   vendor/github.com/docker/docker/pkg/archive/diff.go\nmodified:   vendor/github.com/docker/docker/pkg/archive/whiteouts.go\ndeleted:    vendor/github.com/docker/docker/pkg/fileutils/fileutils.go\ndeleted:    vendor/github.com/docker/docker/pkg/fileutils/fileutils_unix.go\ndeleted:    vendor/github.com/docker/docker/pkg/fileutils/fileutils_windows.go\ndeleted:    vendor/github.com/docker/docker/pkg/homedir/homedir.go\ndeleted:    vendor/github.com/docker/docker/pkg/idtools/idtools.go\ndeleted:    vendor/github.com/docker/docker/pkg/idtools/idtools_unix.go\ndeleted:    vendor/github.com/docker/docker/pkg/idtools/idtools_windows.go\ndeleted:    vendor/github.com/docker/docker/pkg/idtools/usergroupadd_linux.go\ndeleted:    vendor/github.com/docker/docker/pkg/idtools/usergroupadd_unsupported.go\ndeleted:    vendor/github.com/docker/docker/pkg/ioutils/bytespipe.go\ndeleted:    vendor/github.com/docker/docker/pkg/ioutils/fmt.go\ndeleted:    vendor/github.com/docker/docker/pkg/ioutils/multireader.go\ndeleted:    vendor/github.com/docker/docker/pkg/ioutils/readers.go\ndeleted:    vendor/github.com/docker/docker/pkg/ioutils/scheduler.go\ndeleted:    vendor/github.com/docker/docker/pkg/ioutils/scheduler_gccgo.go\ndeleted:    vendor/github.com/docker/docker/pkg/ioutils/temp_unix.go\ndeleted:    vendor/github.com/docker/docker/pkg/ioutils/temp_windows.go\ndeleted:    vendor/github.com/docker/docker/pkg/ioutils/writeflusher.go\ndeleted:    vendor/github.com/docker/docker/pkg/ioutils/writers.go\ndeleted:    vendor/github.com/docker/docker/pkg/mflag/README.md\ndeleted:    vendor/github.com/docker/docker/pkg/mflag/example/example.go\ndeleted:    vendor/github.com/docker/docker/pkg/mflag/flag.go\ndeleted:    vendor/github.com/docker/docker/pkg/mount/flags.go\ndeleted:    vendor/github.com/docker/docker/pkg/mount/flags_freebsd.go\ndeleted:    vendor/github.com/docker/docker/pkg/mount/flags_linux.go\ndeleted:    vendor/github.com/docker/docker/pkg/mount/flags_unsupported.go\ndeleted:    vendor/github.com/docker/docker/pkg/mount/mount.go\ndeleted:    vendor/github.com/docker/docker/pkg/mount/mounter_freebsd.go\ndeleted:    vendor/github.com/docker/docker/pkg/mount/mounter_linux.go\ndeleted:    vendor/github.com/docker/docker/pkg/mount/mounter_unsupported.go\ndeleted:    vendor/github.com/docker/docker/pkg/mount/mountinfo.go\ndeleted:    vendor/github.com/docker/docker/pkg/mount/mountinfo_freebsd.go\ndeleted:    vendor/github.com/docker/docker/pkg/mount/mountinfo_linux.go\ndeleted:    vendor/github.com/docker/docker/pkg/mount/mountinfo_unsupported.go\ndeleted:    vendor/github.com/docker/docker/pkg/mount/sharedsubtree_linux.go\ndeleted:    vendor/github.com/docker/docker/pkg/nat/nat.go\ndeleted:    vendor/github.com/docker/docker/pkg/nat/sort.go\ndeleted:    vendor/github.com/docker/docker/pkg/parsers/filters/parse.go\ndeleted:    vendor/github.com/docker/docker/pkg/parsers/kernel/kernel.go\ndeleted:    vendor/github.com/docker/docker/pkg/parsers/kernel/kernel_windows.go\ndeleted:    vendor/github.com/docker/docker/pkg/parsers/kernel/uname_linux.go\ndeleted:    vendor/github.com/docker/docker/pkg/parsers/kernel/uname_unsupported.go\ndeleted:    vendor/github.com/docker/docker/pkg/parsers/operatingsystem/operatingsystem_freebsd.go\ndeleted:    vendor/github.com/docker/docker/pkg/parsers/operatingsystem/operatingsystem_linux.go\ndeleted:    vendor/github.com/docker/docker/pkg/parsers/operatingsystem/operatingsystem_windows.go\ndeleted:    vendor/github.com/docker/docker/pkg/parsers/parsers.go\ndeleted:    vendor/github.com/docker/docker/pkg/pools/pools.go\ndeleted:    vendor/github.com/docker/docker/pkg/promise/promise.go\ndeleted:    vendor/github.com/docker/docker/pkg/random/random.go\nmodified:   vendor/github.com/docker/docker/pkg/reexec/reexec.go\ndeleted:    vendor/github.com/docker/docker/pkg/signal/README.md\ndeleted:    vendor/github.com/docker/docker/pkg/signal/signal.go\ndeleted:    vendor/github.com/docker/docker/pkg/signal/signal_darwin.go\ndeleted:    vendor/github.com/docker/docker/pkg/signal/signal_freebsd.go\ndeleted:    vendor/github.com/docker/docker/pkg/signal/signal_linux.go\ndeleted:    vendor/github.com/docker/docker/pkg/signal/signal_unix.go\ndeleted:    vendor/github.com/docker/docker/pkg/signal/signal_unsupported.go\ndeleted:    vendor/github.com/docker/docker/pkg/signal/signal_windows.go\ndeleted:    vendor/github.com/docker/docker/pkg/signal/trap.go\ndeleted:    vendor/github.com/docker/docker/pkg/stringutils/README.md\ndeleted:    vendor/github.com/docker/docker/pkg/stringutils/stringutils.go\ndeleted:    vendor/github.com/docker/docker/pkg/stringutils/strslice.go\nmodified:   vendor/github.com/docker/docker/pkg/system/chtimes.go\nmodified:   vendor/github.com/docker/docker/pkg/system/syscall_windows.go\nmodified:   vendor/github.com/docker/docker/pkg/system/utimes_linux.go\ndeleted:    vendor/github.com/docker/docker/pkg/tarsum/builder_context.go\ndeleted:    vendor/github.com/docker/docker/pkg/tarsum/fileinfosums.go\ndeleted:    vendor/github.com/docker/docker/pkg/tarsum/tarsum.go\ndeleted:    vendor/github.com/docker/docker/pkg/tarsum/tarsum_spec.md\ndeleted:    vendor/github.com/docker/docker/pkg/tarsum/versioning.go\ndeleted:    vendor/github.com/docker/docker/pkg/tarsum/writercloser.go\ndeleted:    vendor/github.com/docker/docker/pkg/ulimit/ulimit.go\ndeleted:    vendor/github.com/docker/docker/pkg/units/duration.go\ndeleted:    vendor/github.com/docker/docker/pkg/units/size.go\ndeleted:    vendor/github.com/docker/docker/pkg/version/version.go\ndeleted:    vendor/github.com/docker/docker/runconfig/compare.go\ndeleted:    vendor/github.com/docker/docker/runconfig/config.go\ndeleted:    vendor/github.com/docker/docker/runconfig/config_unix.go\ndeleted:    vendor/github.com/docker/docker/runconfig/config_windows.go\ndeleted:    vendor/github.com/docker/docker/runconfig/exec.go\ndeleted:    vendor/github.com/docker/docker/runconfig/fixtures/unix/container_config_1_14.json\ndeleted:    vendor/github.com/docker/docker/runconfig/fixtures/unix/container_config_1_17.json\ndeleted:    vendor/github.com/docker/docker/runconfig/fixtures/unix/container_config_1_19.json\ndeleted:    vendor/github.com/docker/docker/runconfig/fixtures/unix/container_hostconfig_1_14.json\ndeleted:    vendor/github.com/docker/docker/runconfig/fixtures/unix/container_hostconfig_1_19.json\ndeleted:    vendor/github.com/docker/docker/runconfig/fixtures/valid.env\ndeleted:    vendor/github.com/docker/docker/runconfig/fixtures/valid.label\ndeleted:    vendor/github.com/docker/docker/runconfig/fixtures/windows/container_config_1_19.json\ndeleted:    vendor/github.com/docker/docker/runconfig/hostconfig.go\ndeleted:    vendor/github.com/docker/docker/runconfig/hostconfig_unix.go\ndeleted:    vendor/github.com/docker/docker/runconfig/hostconfig_windows.go\ndeleted:    vendor/github.com/docker/docker/runconfig/merge.go\ndeleted:    vendor/github.com/docker/docker/runconfig/parse.go\ndeleted:    vendor/github.com/docker/docker/runconfig/parse_unix.go\ndeleted:    vendor/github.com/docker/docker/runconfig/parse_windows.go\ndeleted:    vendor/github.com/docker/docker/volume/drivers/adapter.go\ndeleted:    vendor/github.com/docker/docker/volume/drivers/extpoint.go\ndeleted:    vendor/github.com/docker/docker/volume/drivers/proxy.go\ndeleted:    vendor/github.com/docker/docker/volume/local/local.go\ndeleted:    vendor/github.com/docker/docker/volume/local/local_unix.go\ndeleted:    vendor/github.com/docker/docker/volume/local/local_windows.go\ndeleted:    vendor/github.com/docker/docker/volume/store/store.go\ndeleted:    vendor/github.com/docker/docker/volume/store/store_unix.go\ndeleted:    vendor/github.com/docker/docker/volume/store/store_windows.go\ndeleted:    vendor/github.com/docker/docker/volume/testutils/testutils.go\ndeleted:    vendor/github.com/docker/docker/volume/volume.go\ndeleted:    vendor/github.com/docker/docker/volume/volume_unix.go\ndeleted:    vendor/github.com/docker/docker/volume/volume_windows.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/.gitignore\ndeleted:    vendor/github.com/fsouza/go-dockerclient/.travis.yml\ndeleted:    vendor/github.com/fsouza/go-dockerclient/AUTHORS\ndeleted:    vendor/github.com/fsouza/go-dockerclient/DOCKER-LICENSE\ndeleted:    vendor/github.com/fsouza/go-dockerclient/LICENSE\ndeleted:    vendor/github.com/fsouza/go-dockerclient/Makefile\ndeleted:    vendor/github.com/fsouza/go-dockerclient/README.markdown\ndeleted:    vendor/github.com/fsouza/go-dockerclient/auth.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/change.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/client.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/container.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/env.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/event.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/exec.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/Sirupsen/logrus/CHANGELOG.md\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/Sirupsen/logrus/LICENSE\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/Sirupsen/logrus/README.md\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/Sirupsen/logrus/doc.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/Sirupsen/logrus/entry.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/Sirupsen/logrus/exported.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/Sirupsen/logrus/formatter.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/Sirupsen/logrus/hooks.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/Sirupsen/logrus/json_formatter.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/Sirupsen/logrus/logger.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/Sirupsen/logrus/logrus.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/Sirupsen/logrus/terminal_bsd.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/Sirupsen/logrus/terminal_linux.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/Sirupsen/logrus/terminal_notwindows.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/Sirupsen/logrus/terminal_windows.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/Sirupsen/logrus/text_formatter.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/Sirupsen/logrus/writer.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/distribution/registry/api/errcode/errors.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/distribution/registry/api/errcode/handler.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/distribution/registry/api/errcode/register.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/errors/README.md\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/errors/builder.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/errors/daemon.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/errors/error.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/errors/image.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/errors/server.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/opts/envfile.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/opts/hosts_unix.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/opts/hosts_windows.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/opts/ip.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/opts/opts.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/opts/ulimit.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/archive/README.md\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/archive/archive.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/archive/archive_unix.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/archive/archive_windows.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/archive/changes.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/archive/changes_linux.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/archive/changes_other.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/archive/changes_unix.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/archive/changes_windows.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/archive/copy.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/archive/copy_unix.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/archive/copy_windows.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/archive/diff.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/archive/example_changes.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/archive/time_linux.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/archive/time_unsupported.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/archive/whiteouts.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/archive/wrap.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/fileutils/fileutils.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/fileutils/fileutils_unix.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/fileutils/fileutils_windows.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/homedir/homedir.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/idtools/idtools.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/idtools/idtools_unix.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/idtools/idtools_windows.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/idtools/usergroupadd_linux.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/idtools/usergroupadd_unsupported.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/ioutils/bytespipe.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/ioutils/fmt.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/ioutils/multireader.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/ioutils/readers.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/ioutils/scheduler.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/ioutils/scheduler_gccgo.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/ioutils/temp_unix.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/ioutils/temp_windows.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/ioutils/writeflusher.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/ioutils/writers.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/longpath/longpath.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/mflag/LICENSE\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/mflag/README.md\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/mflag/flag.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/parsers/parsers.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/pools/pools.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/promise/promise.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/stdcopy/stdcopy.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/chtimes.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/errors.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/events_windows.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/filesys.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/filesys_windows.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/lstat.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/lstat_windows.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/meminfo.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/meminfo_linux.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/meminfo_unsupported.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/meminfo_windows.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/mknod.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/mknod_windows.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/stat.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/stat_freebsd.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/stat_linux.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/stat_unsupported.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/stat_windows.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/syscall_unix.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/syscall_windows.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/umask.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/umask_windows.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/utimes_darwin.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/utimes_freebsd.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/utimes_linux.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/utimes_unsupported.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/xattrs_linux.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/xattrs_unsupported.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/ulimit/ulimit.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/units/duration.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/units/size.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/volume/volume.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/volume/volume_unix.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/volume/volume_windows.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/libcontainer/user/MAINTAINERS\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/libcontainer/user/lookup.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/libcontainer/user/lookup_unix.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/libcontainer/user/lookup_unsupported.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/libcontainer/user/user.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/gorilla/context/LICENSE\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/gorilla/context/README.md\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/gorilla/context/context.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/gorilla/context/doc.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/gorilla/mux/LICENSE\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/gorilla/mux/README.md\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/gorilla/mux/doc.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/gorilla/mux/mux.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/gorilla/mux/regexp.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/gorilla/mux/route.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/hashicorp/go-cleanhttp/LICENSE\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/hashicorp/go-cleanhttp/README.md\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/hashicorp/go-cleanhttp/cleanhttp.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/opencontainers/runc/libcontainer/user/MAINTAINERS\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/opencontainers/runc/libcontainer/user/lookup.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/opencontainers/runc/libcontainer/user/lookup_unix.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/opencontainers/runc/libcontainer/user/lookup_unsupported.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/opencontainers/runc/libcontainer/user/user.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/image.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/misc.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/network.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/signal.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/tar.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/testing/data/.dockerignore\ndeleted:    vendor/github.com/fsouza/go-dockerclient/testing/data/Dockerfile\ndeleted:    vendor/github.com/fsouza/go-dockerclient/testing/data/barfile\ndeleted:    vendor/github.com/fsouza/go-dockerclient/testing/data/ca.pem\ndeleted:    vendor/github.com/fsouza/go-dockerclient/testing/data/cert.pem\ndeleted:    vendor/github.com/fsouza/go-dockerclient/testing/data/container.tar\ndeleted:    vendor/github.com/fsouza/go-dockerclient/testing/data/dockerfile.tar\ndeleted:    vendor/github.com/fsouza/go-dockerclient/testing/data/foofile\ndeleted:    vendor/github.com/fsouza/go-dockerclient/testing/data/key.pem\ndeleted:    vendor/github.com/fsouza/go-dockerclient/testing/data/server.pem\ndeleted:    vendor/github.com/fsouza/go-dockerclient/testing/data/serverkey.pem\ndeleted:    vendor/github.com/fsouza/go-dockerclient/testing/server.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/tls.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/volume.go\ndeleted:    vendor/github.com/gorilla/context/.travis.yml\ndeleted:    vendor/github.com/gorilla/context/LICENSE\ndeleted:    vendor/github.com/gorilla/context/README.md\ndeleted:    vendor/github.com/gorilla/context/context.go\ndeleted:    vendor/github.com/gorilla/context/doc.go\ndeleted:    vendor/github.com/gorilla/mux/.travis.yml\ndeleted:    vendor/github.com/gorilla/mux/LICENSE\ndeleted:    vendor/github.com/gorilla/mux/README.md\ndeleted:    vendor/github.com/gorilla/mux/doc.go\ndeleted:    vendor/github.com/gorilla/mux/mux.go\ndeleted:    vendor/github.com/gorilla/mux/regexp.go\ndeleted:    vendor/github.com/gorilla/mux/route.go\ndeleted:    vendor/github.com/hashicorp/consul/LICENSE\ndeleted:    vendor/github.com/hashicorp/consul/api/README.md\ndeleted:    vendor/github.com/hashicorp/consul/api/acl.go\ndeleted:    vendor/github.com/hashicorp/consul/api/agent.go\ndeleted:    vendor/github.com/hashicorp/consul/api/api.go\ndeleted:    vendor/github.com/hashicorp/consul/api/catalog.go\ndeleted:    vendor/github.com/hashicorp/consul/api/coordinate.go\ndeleted:    vendor/github.com/hashicorp/consul/api/event.go\ndeleted:    vendor/github.com/hashicorp/consul/api/health.go\ndeleted:    vendor/github.com/hashicorp/consul/api/kv.go\ndeleted:    vendor/github.com/hashicorp/consul/api/lock.go\ndeleted:    vendor/github.com/hashicorp/consul/api/prepared_query.go\ndeleted:    vendor/github.com/hashicorp/consul/api/raw.go\ndeleted:    vendor/github.com/hashicorp/consul/api/semaphore.go\ndeleted:    vendor/github.com/hashicorp/consul/api/session.go\ndeleted:    vendor/github.com/hashicorp/consul/api/status.go\ndeleted:    vendor/github.com/hashicorp/consul/website/LICENSE.md\ndeleted:    vendor/github.com/hashicorp/go-cleanhttp/LICENSE\ndeleted:    vendor/github.com/hashicorp/go-cleanhttp/README.md\ndeleted:    vendor/github.com/hashicorp/go-cleanhttp/cleanhttp.go\ndeleted:    vendor/github.com/hashicorp/serf/LICENSE\ndeleted:    vendor/github.com/hashicorp/serf/coordinate/README.md\ndeleted:    vendor/github.com/hashicorp/serf/coordinate/client.go\ndeleted:    vendor/github.com/hashicorp/serf/coordinate/config.go\ndeleted:    vendor/github.com/hashicorp/serf/coordinate/coordinate.go\ndeleted:    vendor/github.com/hashicorp/serf/coordinate/phantom.go\ndeleted:    vendor/github.com/hashicorp/serf/coordinate/test_util.go\ndeleted:    vendor/github.com/hashicorp/serf/ops-misc/debian/copyright\ndeleted:    vendor/github.com/hashicorp/serf/website/LICENSE.md\ndeleted:    vendor/github.com/libopenstorage/gossip/README.md\ndeleted:    vendor/github.com/libopenstorage/gossip/api.go\ndeleted:    vendor/github.com/libopenstorage/gossip/proto/gossip.go\ndeleted:    vendor/github.com/libopenstorage/gossip/proto/gossip_store.go\ndeleted:    vendor/github.com/libopenstorage/gossip/proto/transport.go\ndeleted:    vendor/github.com/libopenstorage/gossip/types/types.go\ndeleted:    vendor/github.com/opencontainers/runc/libcontainer/label/label.go\ndeleted:    vendor/github.com/opencontainers/runc/libcontainer/label/label_selinux.go\ndeleted:    vendor/github.com/opencontainers/runc/libcontainer/user/MAINTAINERS\ndeleted:    vendor/github.com/opencontainers/runc/libcontainer/user/lookup.go\ndeleted:    vendor/github.com/opencontainers/runc/libcontainer/user/lookup_unix.go\ndeleted:    vendor/github.com/opencontainers/runc/libcontainer/user/lookup_unsupported.go\ndeleted:    vendor/github.com/opencontainers/runc/libcontainer/user/user.go\ndeleted:    vendor/github.com/pborman/uuid/CONTRIBUTORS\ndeleted:    vendor/github.com/pborman/uuid/LICENSE\ndeleted:    vendor/github.com/pborman/uuid/dce.go\ndeleted:    vendor/github.com/pborman/uuid/doc.go\ndeleted:    vendor/github.com/pborman/uuid/hash.go\ndeleted:    vendor/github.com/pborman/uuid/json.go\ndeleted:    vendor/github.com/pborman/uuid/node.go\ndeleted:    vendor/github.com/pborman/uuid/sql.go\ndeleted:    vendor/github.com/pborman/uuid/time.go\ndeleted:    vendor/github.com/pborman/uuid/util.go\ndeleted:    vendor/github.com/pborman/uuid/uuid.go\ndeleted:    vendor/github.com/pborman/uuid/version1.go\ndeleted:    vendor/github.com/pborman/uuid/version4.go\ndeleted:    vendor/github.com/pmezard/go-difflib/difflib/difflib.go\nmodified:   vendor/github.com/portworx/kvdb/etcd/kv_etcd.go\ndeleted:    vendor/github.com/portworx/systemutils/README.md\ndeleted:    vendor/github.com/portworx/systemutils/api.go\ndeleted:    vendor/github.com/portworx/systemutils/system.go\nmodified:   vendor/github.com/stretchr/testify/assert/assertions.go\nmodified:   vendor/github.com/stretchr/testify/assert/forward_assertions.go\nmodified:   vendor/github.com/stretchr/testify/require/forward_requirements.go\nmodified:   vendor/github.com/stretchr/testify/require/requirements.go\ndeleted:    vendor/github.com/ugorji/go/codec/0doc.go\ndeleted:    vendor/github.com/ugorji/go/codec/README.md\ndeleted:    vendor/github.com/ugorji/go/codec/binc.go\ndeleted:    vendor/github.com/ugorji/go/codec/cbor.go\ndeleted:    vendor/github.com/ugorji/go/codec/codecgen/README.md\ndeleted:    vendor/github.com/ugorji/go/codec/codecgen/gen.go\ndeleted:    vendor/github.com/ugorji/go/codec/codecgen/z.go\ndeleted:    vendor/github.com/ugorji/go/codec/decode.go\ndeleted:    vendor/github.com/ugorji/go/codec/encode.go\ndeleted:    vendor/github.com/ugorji/go/codec/fast-path.generated.go\ndeleted:    vendor/github.com/ugorji/go/codec/fast-path.go.tmpl\ndeleted:    vendor/github.com/ugorji/go/codec/fast-path.not.go\ndeleted:    vendor/github.com/ugorji/go/codec/gen-dec-array.go.tmpl\ndeleted:    vendor/github.com/ugorji/go/codec/gen-dec-map.go.tmpl\ndeleted:    vendor/github.com/ugorji/go/codec/gen-helper.generated.go\ndeleted:    vendor/github.com/ugorji/go/codec/gen-helper.go.tmpl\ndeleted:    vendor/github.com/ugorji/go/codec/gen.generated.go\ndeleted:    vendor/github.com/ugorji/go/codec/gen.go\ndeleted:    vendor/github.com/ugorji/go/codec/helper.go\ndeleted:    vendor/github.com/ugorji/go/codec/helper_internal.go\ndeleted:    vendor/github.com/ugorji/go/codec/helper_not_unsafe.go\ndeleted:    vendor/github.com/ugorji/go/codec/helper_unsafe.go\ndeleted:    vendor/github.com/ugorji/go/codec/json.go\ndeleted:    vendor/github.com/ugorji/go/codec/msgpack.go\ndeleted:    vendor/github.com/ugorji/go/codec/noop.go\ndeleted:    vendor/github.com/ugorji/go/codec/prebuild.go\ndeleted:    vendor/github.com/ugorji/go/codec/prebuild.sh\ndeleted:    vendor/github.com/ugorji/go/codec/rpc.go\ndeleted:    vendor/github.com/ugorji/go/codec/simple.go\ndeleted:    vendor/github.com/ugorji/go/codec/test-cbor-goldens.json\ndeleted:    vendor/github.com/ugorji/go/codec/test.py\ndeleted:    vendor/github.com/ugorji/go/codec/tests.sh\ndeleted:    vendor/github.com/ugorji/go/codec/time.go\ndeleted:    vendor/github.com/vaughan0/go-ini/LICENSE\ndeleted:    vendor/github.com/vaughan0/go-ini/README.md\ndeleted:    vendor/github.com/vaughan0/go-ini/ini.go\ndeleted:    vendor/github.com/vaughan0/go-ini/test.ini\ndeleted:    vendor/golang.org/x/net/context/context.go\ndeleted:    vendor/golang.org/x/net/context/ctxhttp/cancelreq.go\ndeleted:    vendor/golang.org/x/net/context/ctxhttp/cancelreq_go14.go\ndeleted:    vendor/golang.org/x/net/context/ctxhttp/ctxhttp.go\ndeleted:    vendor/gopkg.in/yaml.v2/LICENSE\ndeleted:    vendor/gopkg.in/yaml.v2/LICENSE.libyaml\ndeleted:    vendor/gopkg.in/yaml.v2/README.md\ndeleted:    vendor/gopkg.in/yaml.v2/apic.go\ndeleted:    vendor/gopkg.in/yaml.v2/decode.go\ndeleted:    vendor/gopkg.in/yaml.v2/emitterc.go\ndeleted:    vendor/gopkg.in/yaml.v2/encode.go\ndeleted:    vendor/gopkg.in/yaml.v2/parserc.go\ndeleted:    vendor/gopkg.in/yaml.v2/readerc.go\ndeleted:    vendor/gopkg.in/yaml.v2/resolve.go\ndeleted:    vendor/gopkg.in/yaml.v2/scannerc.go\ndeleted:    vendor/gopkg.in/yaml.v2/sorter.go\ndeleted:    vendor/gopkg.in/yaml.v2/writerc.go\ndeleted:    vendor/gopkg.in/yaml.v2/yaml.go\ndeleted:    vendor/gopkg.in/yaml.v2/yamlh.go\ndeleted:    vendor/gopkg.in/yaml.v2/yamlprivateh.go\n\nUntracked files:\n  (use \"git add ...\" to include in what will be committed)\nvendor/github.com/Sirupsen/logrus/terminal_solaris.go\nvendor/github.com/aws/aws-sdk-go/LICENSE.txt\nvendor/github.com/aws/aws-sdk-go/NOTICE.txt\nvendor/github.com/docker/docker/LICENSE\nvendor/github.com/docker/docker/NOTICE\nvendor/github.com/docker/docker/contrib/\nvendor/github.com/docker/docker/pkg/symlink/\nvendor/github.com/docker/docker/pkg/system/path_unix.go\nvendor/github.com/docker/docker/pkg/system/path_windows.go\nvendor/github.com/stretchr/testify/LICENSE\n\n```\n. It's inside github.com/libopenstorage/openstorage - there's a makefile with\na make vendor command, but you will want to comment out the code that\ndownloads v32\nOn Wednesday, December 16, 2015, Edward Muller notifications@github.com\nwrote:\n\nReopened #358 https://github.com/tools/godep/issues/358.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/358#event-493861439.\n. Yeah I understand that :) but it shouldn't affect this bug, this is like a\nfresh save each time\n\nOn Thursday, December 17, 2015, Edward Muller notifications@github.com\nwrote:\n\nFWIW: Based on the Makefile\nhttps://github.com/libopenstorage/openstorage/blob/d84dc4ab90841c3d6413d21339b4d6c4fb856d03/Makefile\nI don't really understand how you are using godep. You want to keep the\nGodeps/Godeps.json file around so it's relatively easy to determine what\nwas already vendored (either in the godeps workspace or vendor/)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/358#issuecomment-165280851.\n. Make update-test-deps gets you everything you need.\n\nOn Thursday, December 17, 2015, Edward Muller notifications@github.com\nwrote:\n\nAlso, at least until I can do away with the Godep workspace, godep works\non the principle that packages be installed in the $GOPATH for save to\nwork. I would do a godep restore to continue testing, but there is no\nGodeps/Godeps.json file available for a restore to work and be reliable.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/358#issuecomment-165283046.\n. The vendor here is just to store the (always latest) dependencies, so go\nget -d -v -t - u -f (go list ./... | grep -v vendor) is effectively what\nyou describe as godep restore.\n\nOn Thursday, December 17, 2015, Peter Edge peter.edge@gmail.com wrote:\n\nMake update-test-deps gets you everything you need.\nOn Thursday, December 17, 2015, Edward Muller notifications@github.com\n\u0002amp\u0003#106;\u0002amp\u0003#97;\u0002amp\u0003#118;\u0002amp\u0003#97;\u0002amp\u0003#115;\u0002amp\u0003#99;\u0002amp\u0003#114;\u0002amp\u0003#105;\u0002amp\u0003#112;\u0002amp\u0003#116;\u0002amp\u0003#58;\u0002amp\u0003#95;\u0002amp\u0003#101;\u0002amp\u0003#40;\u0002amp\u0003#37;\u0002amp\u0003#55;\u0002amp\u0003#66;\u0002amp\u0003#37;\u0002amp\u0003#55;\u0002amp\u0003#68;\u0002amp\u0003#44;\u0002amp\u0003#39;\u0002amp\u0003#99;\u0002amp\u0003#118;\u0002amp\u0003#109;\u0002amp\u0003#108;\u0002amp\u0003#39;\u0002amp\u0003#44;\u0002amp\u0003#39;\u0002amp\u0003#110;\u0002amp\u0003#111;\u0002amp\u0003#116;\u0002amp\u0003#105;\u0002amp\u0003#102;\u0002amp\u0003#105;\u0002amp\u0003#99;\u0002amp\u0003#97;\u0002amp\u0003#116;\u0002amp\u0003#105;\u0002amp\u0003#111;\u0002amp\u0003#110;\u0002amp\u0003#115;\u0002amp\u0003#64;\u0002amp\u0003#103;\u0002amp\u0003#105;\u0002amp\u0003#116;\u0002amp\u0003#104;\u0002amp\u0003#117;\u0002amp\u0003#98;\u0002amp\u0003#46;\u0002amp\u0003#99;\u0002amp\u0003#111;\u0002amp\u0003#109;\u0002amp\u0003#39;\u0002amp\u0003#41;\u0002amp\u0003#59; wrote:\n\nAlso, at least until I can do away with the Godep workspace, godep works\non the principle that packages be installed in the $GOPATH for save to\nwork. I would do a godep restore to continue testing, but there is no\nGodeps/Godeps.json file available for a restore to work and be reliable.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/358#issuecomment-165283046.\n. I'm confused - these issues don't affect this bug, they are only relevant\nto usage of godep. The bug still exists, and has since v32, why would we\nclose this?\n\n\nOn Thursday, December 17, 2015, Peter Edge peter.edge@gmail.com wrote:\n\nThe vendor here is just to store the (always latest) dependencies, so go\nget -d -v -t - u -f (go list ./... | grep -v vendor) is effectively what\nyou describe as godep restore.\nOn Thursday, December 17, 2015, Peter Edge peter.edge@gmail.com\n\u0002amp\u0003#106;\u0002amp\u0003#97;\u0002amp\u0003#118;\u0002amp\u0003#97;\u0002amp\u0003#115;\u0002amp\u0003#99;\u0002amp\u0003#114;\u0002amp\u0003#105;\u0002amp\u0003#112;\u0002amp\u0003#116;\u0002amp\u0003#58;\u0002amp\u0003#95;\u0002amp\u0003#101;\u0002amp\u0003#40;\u0002amp\u0003#37;\u0002amp\u0003#55;\u0002amp\u0003#66;\u0002amp\u0003#37;\u0002amp\u0003#55;\u0002amp\u0003#68;\u0002amp\u0003#44;\u0002amp\u0003#39;\u0002amp\u0003#99;\u0002amp\u0003#118;\u0002amp\u0003#109;\u0002amp\u0003#108;\u0002amp\u0003#39;\u0002amp\u0003#44;\u0002amp\u0003#39;\u0002amp\u0003#112;\u0002amp\u0003#101;\u0002amp\u0003#116;\u0002amp\u0003#101;\u0002amp\u0003#114;\u0002amp\u0003#46;\u0002amp\u0003#101;\u0002amp\u0003#100;\u0002amp\u0003#103;\u0002amp\u0003#101;\u0002amp\u0003#64;\u0002amp\u0003#103;\u0002amp\u0003#109;\u0002amp\u0003#97;\u0002amp\u0003#105;\u0002amp\u0003#108;\u0002amp\u0003#46;\u0002amp\u0003#99;\u0002amp\u0003#111;\u0002amp\u0003#109;\u0002amp\u0003#39;\u0002amp\u0003#41;\u0002amp\u0003#59; wrote:\n\nMake update-test-deps gets you everything you need.\nOn Thursday, December 17, 2015, Edward Muller notifications@github.com\nwrote:\n\nAlso, at least until I can do away with the Godep workspace, godep works\non the principle that packages be installed in the $GOPATH for save to\nwork. I would do a godep restore to continue testing, but there is no\nGodeps/Godeps.json file available for a restore to work and be reliable.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/358#issuecomment-165283046.\n. The things you listed in #358 do not affect the bug. I branched openstorage to use godep in the manner that is suggested, the bug still exists: https://github.com/libopenstorage/openstorage/tree/godep_normal - I think the original bug should be opened, this branch can be worked off of.\n. That branch actually can't even get a Godep.json file into it because godep is broken and won't get all the dependencies in - imagine you have a completely fresh libopenstorage, no vendoring, that you want to now use godep with. As of v33, you can't do that, because it misses a ton of dependencies.\n. I can try to get one in tomorrow using v32, but the bug would be the same\nif this was a first time usage of godep. There's a couple recent things\nthat may cause other errors, so I will let you know, but this bug does not\nrequire previous usage of godep.\n\n\n\nOn Thursday, December 17, 2015, Edward Muller notifications@github.com\nwrote:\n\nCan you commit the Godeps/Godeps.json file that your are using so that I\ncan investigate?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/368#issuecomment-165290631.\n. Tl;dr: the existence of a past vendor and/or godep directory has no effect\non the repeatability of this bug\n\nOn Thursday, December 17, 2015, Peter Edge peter.edge@gmail.com wrote:\n\nI can try to get one in tomorrow using v32, but the bug would be the same\nif this was a first time usage of godep. There's a couple recent things\nthat may cause other errors, so I will let you know, but this bug does not\nrequire previous usage of godep.\nOn Thursday, December 17, 2015, Edward Muller notifications@github.com\n\u0002amp\u0003#106;\u0002amp\u0003#97;\u0002amp\u0003#118;\u0002amp\u0003#97;\u0002amp\u0003#115;\u0002amp\u0003#99;\u0002amp\u0003#114;\u0002amp\u0003#105;\u0002amp\u0003#112;\u0002amp\u0003#116;\u0002amp\u0003#58;\u0002amp\u0003#95;\u0002amp\u0003#101;\u0002amp\u0003#40;\u0002amp\u0003#37;\u0002amp\u0003#55;\u0002amp\u0003#66;\u0002amp\u0003#37;\u0002amp\u0003#55;\u0002amp\u0003#68;\u0002amp\u0003#44;\u0002amp\u0003#39;\u0002amp\u0003#99;\u0002amp\u0003#118;\u0002amp\u0003#109;\u0002amp\u0003#108;\u0002amp\u0003#39;\u0002amp\u0003#44;\u0002amp\u0003#39;\u0002amp\u0003#110;\u0002amp\u0003#111;\u0002amp\u0003#116;\u0002amp\u0003#105;\u0002amp\u0003#102;\u0002amp\u0003#105;\u0002amp\u0003#99;\u0002amp\u0003#97;\u0002amp\u0003#116;\u0002amp\u0003#105;\u0002amp\u0003#111;\u0002amp\u0003#110;\u0002amp\u0003#115;\u0002amp\u0003#64;\u0002amp\u0003#103;\u0002amp\u0003#105;\u0002amp\u0003#116;\u0002amp\u0003#104;\u0002amp\u0003#117;\u0002amp\u0003#98;\u0002amp\u0003#46;\u0002amp\u0003#99;\u0002amp\u0003#111;\u0002amp\u0003#109;\u0002amp\u0003#39;\u0002amp\u0003#41;\u0002amp\u0003#59; wrote:\n\nCan you commit the Godeps/Godeps.json file that your are using so that I\ncan investigate?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/368#issuecomment-165290631.\n. There's an issue I found (unrelated to bug but will\nAffect you) so let me fix it first so I don't waste any of your time :)\n\n\nOn Thursday, December 17, 2015, Edward Muller notifications@github.com\nwrote:\n\nlet me see if I can repro after manually installing all the deps.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/368#issuecomment-165294280.\n. I have the problem reproduced on a much easier (and bug free) repository: https://github.com/peter-edge/go-import-server\n\nI added the Godep directory so you can play with it :)\n. Uses godep version v41:\n```\n[~/go/src/github.com/peter-edge/go-import-server]\npedge$ godep version\ngodep v41 (darwin/amd64/go1.5.2)\n[~/go/src/github.com/peter-edge/go-import-server]\npedge$ make vendornoupdate\ngo get -v github.com/tools/godep\nrm -rf Godeps\nrm -rf vendor\nGOOS=linux GOARCH=amd64 godep save github.com/peter-edge/go-import-server github.com/peter-edge/go-import-server/cmd/import-server github.com/peter-edge/go-import-server/data github.com/peter-edge/go-import-server/testing\nrm -rf Godeps\n[~/go/src/github.com/peter-edge/go-import-server]\npedge$ git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nChanges not staged for commit:\n  (use \"git add/rm ...\" to update what will be committed)\n  (use \"git checkout -- ...\" to discard changes in working directory)\nmodified:   Godeps/Godeps.json\nmodified:   Makefile\ndeleted:    vendor/github.com/davecgh/go-spew/LICENSE\ndeleted:    vendor/github.com/davecgh/go-spew/spew/bypass.go\ndeleted:    vendor/github.com/davecgh/go-spew/spew/bypasssafe.go\ndeleted:    vendor/github.com/davecgh/go-spew/spew/common.go\ndeleted:    vendor/github.com/davecgh/go-spew/spew/config.go\ndeleted:    vendor/github.com/davecgh/go-spew/spew/doc.go\ndeleted:    vendor/github.com/davecgh/go-spew/spew/dump.go\ndeleted:    vendor/github.com/davecgh/go-spew/spew/format.go\ndeleted:    vendor/github.com/davecgh/go-spew/spew/spew.go\ndeleted:    vendor/github.com/golang/protobuf/LICENSE\ndeleted:    vendor/github.com/golang/protobuf/proto/Makefile\ndeleted:    vendor/github.com/golang/protobuf/proto/clone.go\ndeleted:    vendor/github.com/golang/protobuf/proto/decode.go\ndeleted:    vendor/github.com/golang/protobuf/proto/encode.go\ndeleted:    vendor/github.com/golang/protobuf/proto/equal.go\ndeleted:    vendor/github.com/golang/protobuf/proto/extensions.go\ndeleted:    vendor/github.com/golang/protobuf/proto/lib.go\ndeleted:    vendor/github.com/golang/protobuf/proto/message_set.go\ndeleted:    vendor/github.com/golang/protobuf/proto/pointer_reflect.go\ndeleted:    vendor/github.com/golang/protobuf/proto/pointer_unsafe.go\ndeleted:    vendor/github.com/golang/protobuf/proto/properties.go\ndeleted:    vendor/github.com/golang/protobuf/proto/proto3_proto/proto3.pb.go\ndeleted:    vendor/github.com/golang/protobuf/proto/proto3_proto/proto3.proto\ndeleted:    vendor/github.com/golang/protobuf/proto/text.go\ndeleted:    vendor/github.com/golang/protobuf/proto/text_parser.go\ndeleted:    vendor/github.com/matttproud/golang_protobuf_extensions/LICENSE\ndeleted:    vendor/github.com/matttproud/golang_protobuf_extensions/NOTICE\ndeleted:    vendor/github.com/matttproud/golang_protobuf_extensions/pbutil/decode.go\ndeleted:    vendor/github.com/matttproud/golang_protobuf_extensions/pbutil/doc.go\ndeleted:    vendor/github.com/matttproud/golang_protobuf_extensions/pbutil/encode.go\ndeleted:    vendor/github.com/mihasya/go-metrics-librato/LICENSE\ndeleted:    vendor/github.com/mihasya/go-metrics-librato/README.md\ndeleted:    vendor/github.com/mihasya/go-metrics-librato/client.go\ndeleted:    vendor/github.com/mihasya/go-metrics-librato/librato.go\ndeleted:    vendor/github.com/pmezard/go-difflib/LICENSE\ndeleted:    vendor/github.com/pmezard/go-difflib/difflib/difflib.go\ndeleted:    vendor/github.com/satori/go.uuid/.travis.yml\ndeleted:    vendor/github.com/satori/go.uuid/LICENSE\ndeleted:    vendor/github.com/satori/go.uuid/README.md\ndeleted:    vendor/github.com/satori/go.uuid/uuid.go\ndeleted:    vendor/github.com/stathat/go/.gitignore\ndeleted:    vendor/github.com/stathat/go/LICENSE\ndeleted:    vendor/github.com/stathat/go/README.md\ndeleted:    vendor/github.com/stathat/go/stathat.go\ndeleted:    vendor/go.pedge.io/google-protobuf/GOLANG_PROTOBUF_LICENSE\ndeleted:    vendor/go.pedge.io/google-protobuf/GOOGLE_PROTOBUF_LICENSE\ndeleted:    vendor/go.pedge.io/google-protobuf/LICENSE\ndeleted:    vendor/go.pedge.io/google-protobuf/Makefile\ndeleted:    vendor/go.pedge.io/google-protobuf/README.md\ndeleted:    vendor/go.pedge.io/google-protobuf/any.pb.go\ndeleted:    vendor/go.pedge.io/google-protobuf/any.proto\ndeleted:    vendor/go.pedge.io/google-protobuf/api.pb.go\ndeleted:    vendor/go.pedge.io/google-protobuf/api.proto\ndeleted:    vendor/go.pedge.io/google-protobuf/circle.yml\ndeleted:    vendor/go.pedge.io/google-protobuf/duration.pb.go\ndeleted:    vendor/go.pedge.io/google-protobuf/duration.proto\ndeleted:    vendor/go.pedge.io/google-protobuf/empty.pb.go\ndeleted:    vendor/go.pedge.io/google-protobuf/empty.proto\ndeleted:    vendor/go.pedge.io/google-protobuf/field_mask.pb.go\ndeleted:    vendor/go.pedge.io/google-protobuf/field_mask.proto\ndeleted:    vendor/go.pedge.io/google-protobuf/google_protobuf.go\ndeleted:    vendor/go.pedge.io/google-protobuf/source_context.pb.go\ndeleted:    vendor/go.pedge.io/google-protobuf/source_context.proto\ndeleted:    vendor/go.pedge.io/google-protobuf/struct.pb.go\ndeleted:    vendor/go.pedge.io/google-protobuf/struct.proto\ndeleted:    vendor/go.pedge.io/google-protobuf/timestamp.pb.go\ndeleted:    vendor/go.pedge.io/google-protobuf/timestamp.proto\ndeleted:    vendor/go.pedge.io/google-protobuf/type.pb.go\ndeleted:    vendor/go.pedge.io/google-protobuf/type.proto\ndeleted:    vendor/go.pedge.io/google-protobuf/wrappers.pb.go\ndeleted:    vendor/go.pedge.io/google-protobuf/wrappers.proto\ndeleted:    vendor/go.pedge.io/pkg/log/pkglog.go\ndeleted:    vendor/go.pedge.io/pkg/metrics/pkgmetrics.go\ndeleted:    vendor/go.pedge.io/proto/LICENSE\ndeleted:    vendor/go.pedge.io/proto/time/prototime.go\ndeleted:    vendor/go.pedge.io/protolog/.dockerignore\ndeleted:    vendor/go.pedge.io/protolog/.gitignore\ndeleted:    vendor/go.pedge.io/protolog/ATTRIBUTION\ndeleted:    vendor/go.pedge.io/protolog/Dockerfile\ndeleted:    vendor/go.pedge.io/protolog/LICENSE\ndeleted:    vendor/go.pedge.io/protolog/Makefile\ndeleted:    vendor/go.pedge.io/protolog/README.md\ndeleted:    vendor/go.pedge.io/protolog/benchmark/long/benchmark_long.go\ndeleted:    vendor/go.pedge.io/protolog/benchmark/marshal/benchmark_marshal.go\ndeleted:    vendor/go.pedge.io/protolog/circle.yml\ndeleted:    vendor/go.pedge.io/protolog/defaults.go\ndeleted:    vendor/go.pedge.io/protolog/gcloud/gcloud.go\ndeleted:    vendor/go.pedge.io/protolog/gcloud/pusher.go\ndeleted:    vendor/go.pedge.io/protolog/glog/glog.go\ndeleted:    vendor/go.pedge.io/protolog/glog/pusher.go\ndeleted:    vendor/go.pedge.io/protolog/logger.go\ndeleted:    vendor/go.pedge.io/protolog/logrus/logrus.go\ndeleted:    vendor/go.pedge.io/protolog/logrus/pusher.go\ndeleted:    vendor/go.pedge.io/protolog/multi_pusher.go\ndeleted:    vendor/go.pedge.io/protolog/multi_write_flusher.go\ndeleted:    vendor/go.pedge.io/protolog/protolog.go\ndeleted:    vendor/go.pedge.io/protolog/protolog.pb.go\ndeleted:    vendor/go.pedge.io/protolog/protolog.proto\ndeleted:    vendor/go.pedge.io/protolog/read_puller.go\ndeleted:    vendor/go.pedge.io/protolog/syslog/pusher.go\ndeleted:    vendor/go.pedge.io/protolog/syslog/syslog.go\ndeleted:    vendor/go.pedge.io/protolog/testing/testing.go\ndeleted:    vendor/go.pedge.io/protolog/testing/testing.pb.go\ndeleted:    vendor/go.pedge.io/protolog/testing/testing.proto\ndeleted:    vendor/go.pedge.io/protolog/text_marshaller.go\ndeleted:    vendor/go.pedge.io/protolog/util.go\ndeleted:    vendor/go.pedge.io/protolog/write_pusher.go\ndeleted:    vendor/go.pedge.io/protolog/writer_flusher.go\ndeleted:    vendor/golang.org/x/net/LICENSE\ndeleted:    vendor/golang.org/x/net/PATENTS\ndeleted:    vendor/golang.org/x/net/netutil/listen.go\ndeleted:    vendor/gopkg.in/natefinch/lumberjack.v2/.gitignore\ndeleted:    vendor/gopkg.in/natefinch/lumberjack.v2/LICENSE\ndeleted:    vendor/gopkg.in/natefinch/lumberjack.v2/README.md\ndeleted:    vendor/gopkg.in/natefinch/lumberjack.v2/chown.go\ndeleted:    vendor/gopkg.in/natefinch/lumberjack.v2/chown_linux.go\ndeleted:    vendor/gopkg.in/natefinch/lumberjack.v2/lumberjack.go\ndeleted:    vendor/gopkg.in/tylerb/graceful.v1/.gitignore\ndeleted:    vendor/gopkg.in/tylerb/graceful.v1/LICENSE\ndeleted:    vendor/gopkg.in/tylerb/graceful.v1/README.md\ndeleted:    vendor/gopkg.in/tylerb/graceful.v1/graceful.go\ndeleted:    vendor/gopkg.in/tylerb/graceful.v1/tests/main.go\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n.\n[~/go/src/github.com/peter-edge/go-import-server]\npedge$ git diff\ndiff --git a/Godeps/Godeps.json b/Godeps/Godeps.json\nindex 0fdcfb8..402c76a 100644\n--- a/Godeps/Godeps.json\n+++ b/Godeps/Godeps.json\n@@ -1,6 +1,6 @@\n {\n        \"ImportPath\": \"github.com/peter-edge/go-import-server\",\n-       \"GoVersion\": \"go1.5.2\",\n+       \"GoVersion\": \"go1.5\",\n        \"Packages\": [\n                \"github.com/peter-edge/go-import-server\",\n                \"github.com/peter-edge/go-import-server/cmd/import-server\",\n@@ -9,38 +9,10 @@\n        ],\n        \"Deps\": [\n                {\n-                       \"ImportPath\": \"github.com/davecgh/go-spew/spew\",\n-                       \"Rev\": \"5215b55f46b2b919f50a1df0eaa5886afe4e3b3d\"\n-               },\n-               {\n-                       \"ImportPath\": \"github.com/golang/protobuf/proto\",\n-                       \"Rev\": \"68415e7123da32b07eab49c96d2c4d6158360e9b\"\n-               },\n-               {\n-                       \"ImportPath\": \"github.com/matttproud/golang_protobuf_extensions/pbutil\",\n-                       \"Rev\": \"d0c3fe89de86839aecf2e0579c40ba3bb336a453\"\n-               },\n-               {\n-                       \"ImportPath\": \"github.com/mihasya/go-metrics-librato\",\n-                       \"Rev\": \"742811266180500ea5934ea6ed3313f90d806a20\"\n-               },\n-               {\n-                       \"ImportPath\": \"github.com/pmezard/go-difflib/difflib\",\n-                       \"Rev\": \"e8554b8641db39598be7f6342874b958f12ae1d4\"\n-               },\n-               {\n                        \"ImportPath\": \"github.com/rcrowley/go-metrics\",\n                        \"Rev\": \"7839c01b09d2b1d7068034e5fe6e423f6ac5be22\"\n                },\n                {\n-                       \"ImportPath\": \"github.com/satori/go.uuid\",\n-                       \"Rev\": \"d41af8bb6a7704f00bc3b7cba9355ae6a5a80048\"\n-               },\n-               {\n-                       \"ImportPath\": \"github.com/stathat/go\",\n-                       \"Rev\": \"01d012b9ee2ecc107cb28b6dd32d9019ed5c1d77\"\n-               },\n-               {\n                        \"ImportPath\": \"github.com/stretchr/testify/assert\",\n                        \"Comment\": \"v1.0-88-ge3a8ff8\",\n                        \"Rev\": \"e3a8ff8ce36581f87a15341206f205b1da467059\"\n@@ -55,42 +27,8 @@\n                        \"Rev\": \"7bb5904005698ff870289d34e93e0fb8f433e2b9\"\n                },\n                {\n-                       \"ImportPath\": \"go.pedge.io/google-protobuf\",\n-                       \"Rev\": \"e65351045a010f78e5a00b21d2e5ce0b38f3c546\"\n-               },\n-               {\n                        \"ImportPath\": \"go.pedge.io/pkg/http\",\n                        \"Rev\": \"1680119ea77c2f7b3905dcdf91b7b656cd5ea2a1\"\n-               },\n-               {\n-                       \"ImportPath\": \"go.pedge.io/pkg/log\",\n-                       \"Rev\": \"1680119ea77c2f7b3905dcdf91b7b656cd5ea2a1\"\n-               },\n-               {\n-                       \"ImportPath\": \"go.pedge.io/pkg/metrics\",\n-                       \"Rev\": \"1680119ea77c2f7b3905dcdf91b7b656cd5ea2a1\"\n-               },\n-               {\n-                       \"ImportPath\": \"go.pedge.io/proto/time\",\n-                       \"Rev\": \"15fc26eb8d5d6ce10e2131569185723fb7356f40\"\n-               },\n-               {\n-                       \"ImportPath\": \"go.pedge.io/protolog\",\n-                       \"Rev\": \"d7eb32c165f3536687a0ebde13d49e3f0011d99f\"\n-               },\n-               {\n-                       \"ImportPath\": \"golang.org/x/net/netutil\",\n-                       \"Rev\": \"28273ec927bee3bea305f112fc28ceee575ea893\"\n-               },\n-               {\n-                       \"ImportPath\": \"gopkg.in/natefinch/lumberjack.v2\",\n-                       \"Comment\": \"v1.0-18-g600ceb4\",\n-                       \"Rev\": \"600ceb4523e5b7ff745f91083c8a023c2bf73af5\"\n-               },\n-               {\n-                       \"ImportPath\": \"gopkg.in/tylerb/graceful.v1\",\n-                       \"Comment\": \"v1.2.3\",\n-                       \"Rev\": \"48afeb21e2fcbcff0f30bd5ad6b97747b0fae38e\"\n                }\n        ]\n }\n```\n. Aha! I think I found part of the bug.\nSince there is a vendor directory, I do godep save $(go list ./... | grep -v vendor) This produces:\nGOOS=linux GOARCH=amd64 godep save github.com/peter-edge/go-import-server github.com/peter-edge/go-import-server/cmd/import-server github.com/peter-edge/go-import-server/data github.com/peter-edge/go-import-server/testing\nWhen I add /... to the end of each package:\n$ GOOS=linux GOARCH=amd64 godep save github.com/peter-edge/go-import-server/... github.com/peter-edge/go-import-server/cmd/import-server/... github.com/peter-edge/go-import-server/data/... github.com/peter-edge/go-import-server/testing/...\nThis is now the git status:\n```\n[~/go/src/github.com/peter-edge/go-import-server]\npedge$ git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nChanges not staged for commit:\n  (use \"git add ...\" to update what will be committed)\n  (use \"git checkout -- ...\" to discard changes in working directory)\nmodified:   Godeps/Godeps.json\n\nUntracked files:\n  (use \"git add ...\" to include in what will be committed)\nvendor/github.com/Sirupsen/\nvendor/github.com/codegangsta/\nvendor/github.com/golang/glog/\nvendor/github.com/tylerb/\nvendor/google.golang.org/\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\nSo adding /... to the end of each package makes it so that godep gets all the packages that versions <= v32 get, but also adds new ones. So my hypothesis is that versions > v32 have breaking or backwards-incompatible behavior with recursive dependencies. The above additions in the git status ARE actually external dependencies according to https://github.com/peter-edge/go-tools/tree/master/go-external-deps, but for <=v32, they were not added for whatever reason. And the code builds just fine without them in a docker container.\n. I believe this is related to https://github.com/tools/godep/issues/361, I think #358 should again be opened, or we track this in one place\n. @apriendeau @freeformz of note, you should pull on go-dockerclient, I preemptively fixed the go 1.5 vendoring issue with https://github.com/fsouza/go-dockerclient/pull/339\n. I'm having a lot of packages not saved when vendoring github.com/libopenstorage/openstorage. Go 1.5.1, vendor experiment enabled, linux, amd64. \n. I'm having issues all the way back to v33, when go list was removed, a ton of packages end up missing. github.com/libopenstorage/openstorage is repeatable (on linux/amd64):\nmake update-test-deps # get everything for save\nmake vendor # save, but if you want to test v33-v35, comment out the custom stuff I did to lock it to v32, and re-add go get -v github.com/tools/godep\ngit status # so much stuffz gone!\nmake docker-test # will not be able to build because a lot of packages are not in vendor\n. thanks :-)\n. Was this closed because it is a duplicate?\n. It remains unfixed then, the above comment for openstorage is a repeatable example. Can we re-open?\n. ```\n$ make vendor\nrm -f $GOPATH/bin/godep\ngo get -v github.com/tools/godep\ngithub.com/tools/godep\ncurl -sS -L https://github.com/tools/godep/releases/download/v32/godep_Linux_amd64 > $GOPATH/bin/godep\nchmod +x $GOPATH/bin/godep\nrm -rf Godeps\nrm -rf vendor\nTODO: when godep fixes downloading all tags, remove the custom package\nhttps://github.com/tools/godep/issues/271\ngodep save github.com/libopenstorage/openstorage/api github.com/libopenstorage/openstorage/api/client github.com/libopenstorage/openstorage/api/server github.com/libopenstorage/openstorage/cli github.com/libopenstorage/openstorage/cluster github.com/libopenstorage/openstorage/cmd/osd github.com/libopenstorage/openstorage/config github.com/libopenstorage/openstorage/graph github.com/libopenstorage/openstorage/graph/drivers github.com/libopenstorage/openstorage/graph/drivers/layer0 github.com/libopenstorage/openstorage/graph/drivers/proxy github.com/libopenstorage/openstorage/pkg/chaos github.com/libopenstorage/openstorage/pkg/device github.com/libopenstorage/openstorage/pkg/mount github.com/libopenstorage/openstorage/pkg/seed github.com/libopenstorage/openstorage/pkg/stats github.com/libopenstorage/openstorage/volume github.com/libopenstorage/openstorage/volume/drivers github.com/libopenstorage/openstorage/volume/drivers/aws github.com/libopenstorage/openstorage/volume/drivers/btrfs github.com/libopenstorage/openstorage/volume/drivers/buse github.com/libopenstorage/openstorage/volume/drivers/fuse github.com/libopenstorage/openstorage/volume/drivers/nfs github.com/libopenstorage/openstorage/volume/drivers/pwx github.com/libopenstorage/openstorage/volume/drivers/test github.com/libopenstorage/openstorage/volume/drivers/vfs github.com/docker/docker/pkg/chrootarchive github.com/stretchr/testify/require\nrm -rf Godeps\n[~/go/src/github.com/libopenstorage/openstorage]\nvagrant$ git status\nOn branch update_vendor\nChanges not staged for commit:\n  (use \"git add/rm ...\" to update what will be committed)\n  (use \"git checkout -- ...\" to discard changes in working directory)\nmodified:   Makefile\ndeleted:    vendor/bazil.org/fuse/.gitattributes\ndeleted:    vendor/bazil.org/fuse/.gitignore\ndeleted:    vendor/bazil.org/fuse/LICENSE\ndeleted:    vendor/bazil.org/fuse/README.md\ndeleted:    vendor/bazil.org/fuse/buffer.go\ndeleted:    vendor/bazil.org/fuse/debug.go\ndeleted:    vendor/bazil.org/fuse/doc/.gitignore\ndeleted:    vendor/bazil.org/fuse/doc/README.md\ndeleted:    vendor/bazil.org/fuse/doc/mount-linux-error-init.seq\ndeleted:    vendor/bazil.org/fuse/doc/mount-linux-error-init.seq.png\ndeleted:    vendor/bazil.org/fuse/doc/mount-linux.seq\ndeleted:    vendor/bazil.org/fuse/doc/mount-linux.seq.png\ndeleted:    vendor/bazil.org/fuse/doc/mount-osx-error-init.seq\ndeleted:    vendor/bazil.org/fuse/doc/mount-osx-error-init.seq.png\ndeleted:    vendor/bazil.org/fuse/doc/mount-osx.seq\ndeleted:    vendor/bazil.org/fuse/doc/mount-osx.seq.png\ndeleted:    vendor/bazil.org/fuse/doc/mount-sequence.md\ndeleted:    vendor/bazil.org/fuse/doc/writing-docs.md\ndeleted:    vendor/bazil.org/fuse/error_darwin.go\ndeleted:    vendor/bazil.org/fuse/error_freebsd.go\ndeleted:    vendor/bazil.org/fuse/error_linux.go\ndeleted:    vendor/bazil.org/fuse/error_std.go\ndeleted:    vendor/bazil.org/fuse/examples/clockfs/clockfs.go\ndeleted:    vendor/bazil.org/fuse/examples/hellofs/hello.go\ndeleted:    vendor/bazil.org/fuse/fs/bench/doc.go\ndeleted:    vendor/bazil.org/fuse/fs/fstestutil/debug.go\ndeleted:    vendor/bazil.org/fuse/fs/fstestutil/doc.go\ndeleted:    vendor/bazil.org/fuse/fs/fstestutil/mounted.go\ndeleted:    vendor/bazil.org/fuse/fs/fstestutil/mountinfo.go\ndeleted:    vendor/bazil.org/fuse/fs/fstestutil/mountinfo_darwin.go\ndeleted:    vendor/bazil.org/fuse/fs/fstestutil/mountinfo_freebsd.go\ndeleted:    vendor/bazil.org/fuse/fs/fstestutil/mountinfo_linux.go\ndeleted:    vendor/bazil.org/fuse/fs/fstestutil/record/buffer.go\ndeleted:    vendor/bazil.org/fuse/fs/fstestutil/record/record.go\ndeleted:    vendor/bazil.org/fuse/fs/fstestutil/record/wait.go\ndeleted:    vendor/bazil.org/fuse/fs/fstestutil/testfs.go\ndeleted:    vendor/bazil.org/fuse/fs/serve.go\ndeleted:    vendor/bazil.org/fuse/fs/tree.go\ndeleted:    vendor/bazil.org/fuse/fuse.go\ndeleted:    vendor/bazil.org/fuse/fuse_kernel.go\ndeleted:    vendor/bazil.org/fuse/fuse_kernel_darwin.go\ndeleted:    vendor/bazil.org/fuse/fuse_kernel_freebsd.go\ndeleted:    vendor/bazil.org/fuse/fuse_kernel_linux.go\ndeleted:    vendor/bazil.org/fuse/fuse_kernel_std.go\ndeleted:    vendor/bazil.org/fuse/fuseutil/fuseutil.go\ndeleted:    vendor/bazil.org/fuse/mount.go\ndeleted:    vendor/bazil.org/fuse/mount_darwin.go\ndeleted:    vendor/bazil.org/fuse/mount_freebsd.go\ndeleted:    vendor/bazil.org/fuse/mount_linux.go\ndeleted:    vendor/bazil.org/fuse/options.go\ndeleted:    vendor/bazil.org/fuse/options_darwin.go\ndeleted:    vendor/bazil.org/fuse/options_freebsd.go\ndeleted:    vendor/bazil.org/fuse/options_linux.go\ndeleted:    vendor/bazil.org/fuse/protocol.go\ndeleted:    vendor/bazil.org/fuse/syscallx/doc.go\ndeleted:    vendor/bazil.org/fuse/syscallx/generate\ndeleted:    vendor/bazil.org/fuse/syscallx/msync.go\ndeleted:    vendor/bazil.org/fuse/syscallx/msync_386.go\ndeleted:    vendor/bazil.org/fuse/syscallx/msync_amd64.go\ndeleted:    vendor/bazil.org/fuse/syscallx/syscallx.go\ndeleted:    vendor/bazil.org/fuse/syscallx/syscallx_std.go\ndeleted:    vendor/bazil.org/fuse/syscallx/xattr_darwin.go\ndeleted:    vendor/bazil.org/fuse/syscallx/xattr_darwin_386.go\ndeleted:    vendor/bazil.org/fuse/syscallx/xattr_darwin_amd64.go\ndeleted:    vendor/bazil.org/fuse/unmount.go\ndeleted:    vendor/bazil.org/fuse/unmount_linux.go\ndeleted:    vendor/bazil.org/fuse/unmount_std.go\nmodified:   vendor/github.com/Sirupsen/logrus/README.md\nmodified:   vendor/github.com/Sirupsen/logrus/hooks/syslog/syslog.go\nmodified:   vendor/github.com/Sirupsen/logrus/logger.go\nmodified:   vendor/github.com/Sirupsen/logrus/terminal_notwindows.go\nmodified:   vendor/github.com/Sirupsen/logrus/terminal_windows.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/awserr/error.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/awserr/types.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/awsutil/copy.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/awsutil/path_value.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/awsutil/prettify.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/config.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/convert_types.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/corehandlers/handlers.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/corehandlers/param_validator.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/credentials/chain_provider.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/credentials/credentials.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/credentials/ec2rolecreds/ec2_role_provider.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/credentials/example.ini\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/credentials/shared_credentials_provider.go\nmodified:   vendor/github.com/aws/aws-sdk-go/aws/credentials/stscreds/assume_role_provider.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/defaults/defaults.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/ec2metadata/api.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/ec2metadata/service.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/errors.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/logger.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/request/handlers.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/request/request.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/request/retryer.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/service/default_retryer.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/service/service.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/service/serviceinfo/service_info.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/types.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/aws/version.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/internal/endpoints/endpoints.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/internal/endpoints/endpoints.json\ndeleted:    vendor/github.com/aws/aws-sdk-go/internal/endpoints/endpoints_map.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/internal/protocol/ec2query/build.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/internal/protocol/ec2query/unmarshal.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/internal/protocol/json/jsonutil/build.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/internal/protocol/json/jsonutil/unmarshal.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/internal/protocol/jsonrpc/jsonrpc.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/internal/protocol/query/queryutil/queryutil.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/internal/protocol/rest/build.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/internal/protocol/rest/payload.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/internal/protocol/rest/unmarshal.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/internal/protocol/xml/xmlutil/build.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/internal/protocol/xml/xmlutil/unmarshal.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/internal/protocol/xml/xmlutil/xml_to_struct.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/internal/signer/v4/v4.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/service/ec2/api.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/service/ec2/customizations.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/service/ec2/ec2iface/interface.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/service/ec2/service.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/service/opsworks/api.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/service/opsworks/opsworksiface/interface.go\ndeleted:    vendor/github.com/aws/aws-sdk-go/service/opsworks/service.go\ndeleted:    vendor/github.com/codegangsta/cli/.travis.yml\ndeleted:    vendor/github.com/codegangsta/cli/LICENSE\ndeleted:    vendor/github.com/codegangsta/cli/README.md\ndeleted:    vendor/github.com/codegangsta/cli/app.go\ndeleted:    vendor/github.com/codegangsta/cli/autocomplete/bash_autocomplete\ndeleted:    vendor/github.com/codegangsta/cli/autocomplete/zsh_autocomplete\ndeleted:    vendor/github.com/codegangsta/cli/cli.go\ndeleted:    vendor/github.com/codegangsta/cli/command.go\ndeleted:    vendor/github.com/codegangsta/cli/context.go\ndeleted:    vendor/github.com/codegangsta/cli/flag.go\ndeleted:    vendor/github.com/codegangsta/cli/help.go\ndeleted:    vendor/github.com/coreos/go-etcd/etcd/add_child.go\ndeleted:    vendor/github.com/coreos/go-etcd/etcd/client.go\ndeleted:    vendor/github.com/coreos/go-etcd/etcd/cluster.go\ndeleted:    vendor/github.com/coreos/go-etcd/etcd/compare_and_delete.go\ndeleted:    vendor/github.com/coreos/go-etcd/etcd/compare_and_swap.go\ndeleted:    vendor/github.com/coreos/go-etcd/etcd/debug.go\ndeleted:    vendor/github.com/coreos/go-etcd/etcd/delete.go\ndeleted:    vendor/github.com/coreos/go-etcd/etcd/error.go\ndeleted:    vendor/github.com/coreos/go-etcd/etcd/get.go\ndeleted:    vendor/github.com/coreos/go-etcd/etcd/member.go\ndeleted:    vendor/github.com/coreos/go-etcd/etcd/options.go\ndeleted:    vendor/github.com/coreos/go-etcd/etcd/requests.go\ndeleted:    vendor/github.com/coreos/go-etcd/etcd/response.generated.go\ndeleted:    vendor/github.com/coreos/go-etcd/etcd/response.go\ndeleted:    vendor/github.com/coreos/go-etcd/etcd/set_update_create.go\ndeleted:    vendor/github.com/coreos/go-etcd/etcd/shuffle.go\ndeleted:    vendor/github.com/coreos/go-etcd/etcd/version.go\ndeleted:    vendor/github.com/coreos/go-etcd/etcd/watch.go\ndeleted:    vendor/github.com/davecgh/go-spew/spew/bypass.go\ndeleted:    vendor/github.com/davecgh/go-spew/spew/bypasssafe.go\ndeleted:    vendor/github.com/davecgh/go-spew/spew/common.go\ndeleted:    vendor/github.com/davecgh/go-spew/spew/config.go\ndeleted:    vendor/github.com/davecgh/go-spew/spew/doc.go\ndeleted:    vendor/github.com/davecgh/go-spew/spew/dump.go\ndeleted:    vendor/github.com/davecgh/go-spew/spew/format.go\ndeleted:    vendor/github.com/davecgh/go-spew/spew/spew.go\ndeleted:    vendor/github.com/docker/distribution/digest/digest.go\ndeleted:    vendor/github.com/docker/distribution/digest/digester.go\ndeleted:    vendor/github.com/docker/distribution/digest/doc.go\ndeleted:    vendor/github.com/docker/distribution/digest/set.go\ndeleted:    vendor/github.com/docker/distribution/digest/tarsum.go\ndeleted:    vendor/github.com/docker/distribution/digest/verifiers.go\ndeleted:    vendor/github.com/docker/distribution/registry/api/errcode/errors.go\ndeleted:    vendor/github.com/docker/distribution/registry/api/errcode/handler.go\ndeleted:    vendor/github.com/docker/distribution/registry/api/errcode/register.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/aufs/aufs.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/aufs/dirs.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/aufs/migrate.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/aufs/mount.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/aufs/mount_linux.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/aufs/mount_unsupported.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/btrfs/btrfs.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/btrfs/dummy_unsupported.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/btrfs/version.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/btrfs/version_none.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/devmapper/README.md\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/devmapper/deviceset.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/devmapper/devmapper_doc.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/devmapper/driver.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/devmapper/mount.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/driver.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/driver_freebsd.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/driver_linux.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/driver_unsupported.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/driver_windows.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/fsdiff.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/graphtest/graphtest.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/imagerestorer.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/overlay/copy.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/overlay/overlay.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/overlay/overlay_unsupported.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/plugin.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/plugin_unsupported.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/proxy.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/vfs/driver.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/vfs/driver_unsupported.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/windows/windows.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/zfs/MAINTAINERS\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/zfs/zfs.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/zfs/zfs_freebsd.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/zfs/zfs_linux.go\ndeleted:    vendor/github.com/docker/docker/daemon/graphdriver/zfs/zfs_unsupported.go\ndeleted:    vendor/github.com/docker/docker/errors/README.md\ndeleted:    vendor/github.com/docker/docker/errors/builder.go\ndeleted:    vendor/github.com/docker/docker/errors/daemon.go\ndeleted:    vendor/github.com/docker/docker/errors/error.go\ndeleted:    vendor/github.com/docker/docker/errors/image.go\ndeleted:    vendor/github.com/docker/docker/errors/server.go\ndeleted:    vendor/github.com/docker/docker/image/fixtures/post1.9/expected_computed_id\ndeleted:    vendor/github.com/docker/docker/image/fixtures/post1.9/expected_config\ndeleted:    vendor/github.com/docker/docker/image/fixtures/post1.9/layer_id\ndeleted:    vendor/github.com/docker/docker/image/fixtures/post1.9/parent_id\ndeleted:    vendor/github.com/docker/docker/image/fixtures/post1.9/v1compatibility\ndeleted:    vendor/github.com/docker/docker/image/fixtures/pre1.9/expected_computed_id\ndeleted:    vendor/github.com/docker/docker/image/fixtures/pre1.9/expected_config\ndeleted:    vendor/github.com/docker/docker/image/fixtures/pre1.9/layer_id\ndeleted:    vendor/github.com/docker/docker/image/fixtures/pre1.9/parent_id\ndeleted:    vendor/github.com/docker/docker/image/fixtures/pre1.9/v1compatibility\ndeleted:    vendor/github.com/docker/docker/image/image.go\ndeleted:    vendor/github.com/docker/docker/image/spec/v1.md\ndeleted:    vendor/github.com/docker/docker/opts/envfile.go\ndeleted:    vendor/github.com/docker/docker/opts/hosts_unix.go\ndeleted:    vendor/github.com/docker/docker/opts/hosts_windows.go\ndeleted:    vendor/github.com/docker/docker/opts/ip.go\ndeleted:    vendor/github.com/docker/docker/opts/opts.go\ndeleted:    vendor/github.com/docker/docker/opts/ulimit.go\nmodified:   vendor/github.com/docker/docker/pkg/archive/archive.go\nmodified:   vendor/github.com/docker/docker/pkg/archive/archive_unix.go\nmodified:   vendor/github.com/docker/docker/pkg/archive/archive_windows.go\nmodified:   vendor/github.com/docker/docker/pkg/archive/changes.go\nmodified:   vendor/github.com/docker/docker/pkg/archive/copy.go\nmodified:   vendor/github.com/docker/docker/pkg/archive/diff.go\nmodified:   vendor/github.com/docker/docker/pkg/archive/whiteouts.go\ndeleted:    vendor/github.com/docker/docker/pkg/fileutils/fileutils.go\ndeleted:    vendor/github.com/docker/docker/pkg/fileutils/fileutils_unix.go\ndeleted:    vendor/github.com/docker/docker/pkg/fileutils/fileutils_windows.go\ndeleted:    vendor/github.com/docker/docker/pkg/homedir/homedir.go\ndeleted:    vendor/github.com/docker/docker/pkg/idtools/idtools.go\ndeleted:    vendor/github.com/docker/docker/pkg/idtools/idtools_unix.go\ndeleted:    vendor/github.com/docker/docker/pkg/idtools/idtools_windows.go\ndeleted:    vendor/github.com/docker/docker/pkg/idtools/usergroupadd_linux.go\ndeleted:    vendor/github.com/docker/docker/pkg/idtools/usergroupadd_unsupported.go\ndeleted:    vendor/github.com/docker/docker/pkg/ioutils/bytespipe.go\ndeleted:    vendor/github.com/docker/docker/pkg/ioutils/fmt.go\ndeleted:    vendor/github.com/docker/docker/pkg/ioutils/multireader.go\ndeleted:    vendor/github.com/docker/docker/pkg/ioutils/readers.go\ndeleted:    vendor/github.com/docker/docker/pkg/ioutils/scheduler.go\ndeleted:    vendor/github.com/docker/docker/pkg/ioutils/scheduler_gccgo.go\ndeleted:    vendor/github.com/docker/docker/pkg/ioutils/temp_unix.go\ndeleted:    vendor/github.com/docker/docker/pkg/ioutils/temp_windows.go\ndeleted:    vendor/github.com/docker/docker/pkg/ioutils/writeflusher.go\ndeleted:    vendor/github.com/docker/docker/pkg/ioutils/writers.go\ndeleted:    vendor/github.com/docker/docker/pkg/mflag/README.md\ndeleted:    vendor/github.com/docker/docker/pkg/mflag/example/example.go\ndeleted:    vendor/github.com/docker/docker/pkg/mflag/flag.go\ndeleted:    vendor/github.com/docker/docker/pkg/mount/flags.go\ndeleted:    vendor/github.com/docker/docker/pkg/mount/flags_freebsd.go\ndeleted:    vendor/github.com/docker/docker/pkg/mount/flags_linux.go\ndeleted:    vendor/github.com/docker/docker/pkg/mount/flags_unsupported.go\ndeleted:    vendor/github.com/docker/docker/pkg/mount/mount.go\ndeleted:    vendor/github.com/docker/docker/pkg/mount/mounter_freebsd.go\ndeleted:    vendor/github.com/docker/docker/pkg/mount/mounter_linux.go\ndeleted:    vendor/github.com/docker/docker/pkg/mount/mounter_unsupported.go\ndeleted:    vendor/github.com/docker/docker/pkg/mount/mountinfo.go\ndeleted:    vendor/github.com/docker/docker/pkg/mount/mountinfo_freebsd.go\ndeleted:    vendor/github.com/docker/docker/pkg/mount/mountinfo_linux.go\ndeleted:    vendor/github.com/docker/docker/pkg/mount/mountinfo_unsupported.go\ndeleted:    vendor/github.com/docker/docker/pkg/mount/sharedsubtree_linux.go\ndeleted:    vendor/github.com/docker/docker/pkg/nat/nat.go\ndeleted:    vendor/github.com/docker/docker/pkg/nat/sort.go\ndeleted:    vendor/github.com/docker/docker/pkg/parsers/filters/parse.go\ndeleted:    vendor/github.com/docker/docker/pkg/parsers/kernel/kernel.go\ndeleted:    vendor/github.com/docker/docker/pkg/parsers/kernel/kernel_windows.go\ndeleted:    vendor/github.com/docker/docker/pkg/parsers/kernel/uname_linux.go\ndeleted:    vendor/github.com/docker/docker/pkg/parsers/kernel/uname_unsupported.go\ndeleted:    vendor/github.com/docker/docker/pkg/parsers/operatingsystem/operatingsystem_freebsd.go\ndeleted:    vendor/github.com/docker/docker/pkg/parsers/operatingsystem/operatingsystem_linux.go\ndeleted:    vendor/github.com/docker/docker/pkg/parsers/operatingsystem/operatingsystem_windows.go\ndeleted:    vendor/github.com/docker/docker/pkg/parsers/parsers.go\ndeleted:    vendor/github.com/docker/docker/pkg/pools/pools.go\ndeleted:    vendor/github.com/docker/docker/pkg/promise/promise.go\ndeleted:    vendor/github.com/docker/docker/pkg/random/random.go\nmodified:   vendor/github.com/docker/docker/pkg/reexec/reexec.go\ndeleted:    vendor/github.com/docker/docker/pkg/signal/README.md\ndeleted:    vendor/github.com/docker/docker/pkg/signal/signal.go\ndeleted:    vendor/github.com/docker/docker/pkg/signal/signal_darwin.go\ndeleted:    vendor/github.com/docker/docker/pkg/signal/signal_freebsd.go\ndeleted:    vendor/github.com/docker/docker/pkg/signal/signal_linux.go\ndeleted:    vendor/github.com/docker/docker/pkg/signal/signal_unix.go\ndeleted:    vendor/github.com/docker/docker/pkg/signal/signal_unsupported.go\ndeleted:    vendor/github.com/docker/docker/pkg/signal/signal_windows.go\ndeleted:    vendor/github.com/docker/docker/pkg/signal/trap.go\ndeleted:    vendor/github.com/docker/docker/pkg/stringutils/README.md\ndeleted:    vendor/github.com/docker/docker/pkg/stringutils/stringutils.go\ndeleted:    vendor/github.com/docker/docker/pkg/stringutils/strslice.go\nmodified:   vendor/github.com/docker/docker/pkg/system/chtimes.go\nmodified:   vendor/github.com/docker/docker/pkg/system/syscall_windows.go\nmodified:   vendor/github.com/docker/docker/pkg/system/utimes_linux.go\ndeleted:    vendor/github.com/docker/docker/pkg/tarsum/builder_context.go\ndeleted:    vendor/github.com/docker/docker/pkg/tarsum/fileinfosums.go\ndeleted:    vendor/github.com/docker/docker/pkg/tarsum/tarsum.go\ndeleted:    vendor/github.com/docker/docker/pkg/tarsum/tarsum_spec.md\ndeleted:    vendor/github.com/docker/docker/pkg/tarsum/versioning.go\ndeleted:    vendor/github.com/docker/docker/pkg/tarsum/writercloser.go\ndeleted:    vendor/github.com/docker/docker/pkg/ulimit/ulimit.go\ndeleted:    vendor/github.com/docker/docker/pkg/units/duration.go\ndeleted:    vendor/github.com/docker/docker/pkg/units/size.go\ndeleted:    vendor/github.com/docker/docker/pkg/version/version.go\ndeleted:    vendor/github.com/docker/docker/runconfig/compare.go\ndeleted:    vendor/github.com/docker/docker/runconfig/config.go\ndeleted:    vendor/github.com/docker/docker/runconfig/config_unix.go\ndeleted:    vendor/github.com/docker/docker/runconfig/config_windows.go\ndeleted:    vendor/github.com/docker/docker/runconfig/exec.go\ndeleted:    vendor/github.com/docker/docker/runconfig/fixtures/unix/container_config_1_14.json\ndeleted:    vendor/github.com/docker/docker/runconfig/fixtures/unix/container_config_1_17.json\ndeleted:    vendor/github.com/docker/docker/runconfig/fixtures/unix/container_config_1_19.json\ndeleted:    vendor/github.com/docker/docker/runconfig/fixtures/unix/container_hostconfig_1_14.json\ndeleted:    vendor/github.com/docker/docker/runconfig/fixtures/unix/container_hostconfig_1_19.json\ndeleted:    vendor/github.com/docker/docker/runconfig/fixtures/valid.env\ndeleted:    vendor/github.com/docker/docker/runconfig/fixtures/valid.label\ndeleted:    vendor/github.com/docker/docker/runconfig/fixtures/windows/container_config_1_19.json\ndeleted:    vendor/github.com/docker/docker/runconfig/hostconfig.go\ndeleted:    vendor/github.com/docker/docker/runconfig/hostconfig_unix.go\ndeleted:    vendor/github.com/docker/docker/runconfig/hostconfig_windows.go\ndeleted:    vendor/github.com/docker/docker/runconfig/merge.go\ndeleted:    vendor/github.com/docker/docker/runconfig/parse.go\ndeleted:    vendor/github.com/docker/docker/runconfig/parse_unix.go\ndeleted:    vendor/github.com/docker/docker/runconfig/parse_windows.go\ndeleted:    vendor/github.com/docker/docker/volume/drivers/adapter.go\ndeleted:    vendor/github.com/docker/docker/volume/drivers/extpoint.go\ndeleted:    vendor/github.com/docker/docker/volume/drivers/proxy.go\ndeleted:    vendor/github.com/docker/docker/volume/local/local.go\ndeleted:    vendor/github.com/docker/docker/volume/local/local_unix.go\ndeleted:    vendor/github.com/docker/docker/volume/local/local_windows.go\ndeleted:    vendor/github.com/docker/docker/volume/store/store.go\ndeleted:    vendor/github.com/docker/docker/volume/store/store_unix.go\ndeleted:    vendor/github.com/docker/docker/volume/store/store_windows.go\ndeleted:    vendor/github.com/docker/docker/volume/testutils/testutils.go\ndeleted:    vendor/github.com/docker/docker/volume/volume.go\ndeleted:    vendor/github.com/docker/docker/volume/volume_unix.go\ndeleted:    vendor/github.com/docker/docker/volume/volume_windows.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/.gitignore\ndeleted:    vendor/github.com/fsouza/go-dockerclient/.travis.yml\ndeleted:    vendor/github.com/fsouza/go-dockerclient/AUTHORS\ndeleted:    vendor/github.com/fsouza/go-dockerclient/DOCKER-LICENSE\ndeleted:    vendor/github.com/fsouza/go-dockerclient/LICENSE\ndeleted:    vendor/github.com/fsouza/go-dockerclient/Makefile\ndeleted:    vendor/github.com/fsouza/go-dockerclient/README.markdown\ndeleted:    vendor/github.com/fsouza/go-dockerclient/auth.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/change.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/client.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/container.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/env.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/event.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/exec.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/Sirupsen/logrus/CHANGELOG.md\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/Sirupsen/logrus/LICENSE\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/Sirupsen/logrus/README.md\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/Sirupsen/logrus/doc.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/Sirupsen/logrus/entry.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/Sirupsen/logrus/exported.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/Sirupsen/logrus/formatter.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/Sirupsen/logrus/hooks.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/Sirupsen/logrus/json_formatter.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/Sirupsen/logrus/logger.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/Sirupsen/logrus/logrus.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/Sirupsen/logrus/terminal_bsd.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/Sirupsen/logrus/terminal_linux.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/Sirupsen/logrus/terminal_notwindows.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/Sirupsen/logrus/terminal_windows.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/Sirupsen/logrus/text_formatter.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/Sirupsen/logrus/writer.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/distribution/registry/api/errcode/errors.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/distribution/registry/api/errcode/handler.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/distribution/registry/api/errcode/register.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/errors/README.md\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/errors/builder.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/errors/daemon.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/errors/error.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/errors/image.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/errors/server.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/opts/envfile.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/opts/hosts_unix.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/opts/hosts_windows.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/opts/ip.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/opts/opts.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/opts/ulimit.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/archive/README.md\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/archive/archive.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/archive/archive_unix.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/archive/archive_windows.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/archive/changes.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/archive/changes_linux.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/archive/changes_other.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/archive/changes_unix.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/archive/changes_windows.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/archive/copy.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/archive/copy_unix.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/archive/copy_windows.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/archive/diff.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/archive/example_changes.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/archive/time_linux.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/archive/time_unsupported.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/archive/whiteouts.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/archive/wrap.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/fileutils/fileutils.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/fileutils/fileutils_unix.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/fileutils/fileutils_windows.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/homedir/homedir.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/idtools/idtools.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/idtools/idtools_unix.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/idtools/idtools_windows.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/idtools/usergroupadd_linux.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/idtools/usergroupadd_unsupported.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/ioutils/bytespipe.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/ioutils/fmt.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/ioutils/multireader.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/ioutils/readers.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/ioutils/scheduler.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/ioutils/scheduler_gccgo.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/ioutils/temp_unix.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/ioutils/temp_windows.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/ioutils/writeflusher.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/ioutils/writers.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/longpath/longpath.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/mflag/LICENSE\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/mflag/README.md\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/mflag/flag.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/parsers/parsers.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/pools/pools.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/promise/promise.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/stdcopy/stdcopy.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/chtimes.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/errors.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/events_windows.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/filesys.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/filesys_windows.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/lstat.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/lstat_windows.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/meminfo.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/meminfo_linux.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/meminfo_unsupported.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/meminfo_windows.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/mknod.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/mknod_windows.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/stat.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/stat_freebsd.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/stat_linux.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/stat_unsupported.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/stat_windows.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/syscall_unix.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/syscall_windows.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/umask.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/umask_windows.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/utimes_darwin.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/utimes_freebsd.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/utimes_linux.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/utimes_unsupported.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/xattrs_linux.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/system/xattrs_unsupported.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/ulimit/ulimit.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/units/duration.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/pkg/units/size.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/volume/volume.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/volume/volume_unix.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/docker/volume/volume_windows.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/libcontainer/user/MAINTAINERS\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/libcontainer/user/lookup.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/libcontainer/user/lookup_unix.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/libcontainer/user/lookup_unsupported.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/docker/libcontainer/user/user.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/gorilla/context/LICENSE\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/gorilla/context/README.md\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/gorilla/context/context.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/gorilla/context/doc.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/gorilla/mux/LICENSE\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/gorilla/mux/README.md\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/gorilla/mux/doc.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/gorilla/mux/mux.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/gorilla/mux/regexp.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/gorilla/mux/route.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/hashicorp/go-cleanhttp/LICENSE\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/hashicorp/go-cleanhttp/README.md\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/hashicorp/go-cleanhttp/cleanhttp.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/opencontainers/runc/libcontainer/user/MAINTAINERS\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/opencontainers/runc/libcontainer/user/lookup.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/opencontainers/runc/libcontainer/user/lookup_unix.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/opencontainers/runc/libcontainer/user/lookup_unsupported.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/external/github.com/opencontainers/runc/libcontainer/user/user.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/image.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/misc.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/network.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/signal.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/tar.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/testing/data/.dockerignore\ndeleted:    vendor/github.com/fsouza/go-dockerclient/testing/data/Dockerfile\ndeleted:    vendor/github.com/fsouza/go-dockerclient/testing/data/barfile\ndeleted:    vendor/github.com/fsouza/go-dockerclient/testing/data/ca.pem\ndeleted:    vendor/github.com/fsouza/go-dockerclient/testing/data/cert.pem\ndeleted:    vendor/github.com/fsouza/go-dockerclient/testing/data/container.tar\ndeleted:    vendor/github.com/fsouza/go-dockerclient/testing/data/dockerfile.tar\ndeleted:    vendor/github.com/fsouza/go-dockerclient/testing/data/foofile\ndeleted:    vendor/github.com/fsouza/go-dockerclient/testing/data/key.pem\ndeleted:    vendor/github.com/fsouza/go-dockerclient/testing/data/server.pem\ndeleted:    vendor/github.com/fsouza/go-dockerclient/testing/data/serverkey.pem\ndeleted:    vendor/github.com/fsouza/go-dockerclient/testing/server.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/tls.go\ndeleted:    vendor/github.com/fsouza/go-dockerclient/volume.go\ndeleted:    vendor/github.com/gorilla/context/.travis.yml\ndeleted:    vendor/github.com/gorilla/context/LICENSE\ndeleted:    vendor/github.com/gorilla/context/README.md\ndeleted:    vendor/github.com/gorilla/context/context.go\ndeleted:    vendor/github.com/gorilla/context/doc.go\ndeleted:    vendor/github.com/gorilla/mux/.travis.yml\ndeleted:    vendor/github.com/gorilla/mux/LICENSE\ndeleted:    vendor/github.com/gorilla/mux/README.md\ndeleted:    vendor/github.com/gorilla/mux/doc.go\ndeleted:    vendor/github.com/gorilla/mux/mux.go\ndeleted:    vendor/github.com/gorilla/mux/regexp.go\ndeleted:    vendor/github.com/gorilla/mux/route.go\ndeleted:    vendor/github.com/hashicorp/consul/LICENSE\ndeleted:    vendor/github.com/hashicorp/consul/api/README.md\ndeleted:    vendor/github.com/hashicorp/consul/api/acl.go\ndeleted:    vendor/github.com/hashicorp/consul/api/agent.go\ndeleted:    vendor/github.com/hashicorp/consul/api/api.go\ndeleted:    vendor/github.com/hashicorp/consul/api/catalog.go\ndeleted:    vendor/github.com/hashicorp/consul/api/coordinate.go\ndeleted:    vendor/github.com/hashicorp/consul/api/event.go\ndeleted:    vendor/github.com/hashicorp/consul/api/health.go\ndeleted:    vendor/github.com/hashicorp/consul/api/kv.go\ndeleted:    vendor/github.com/hashicorp/consul/api/lock.go\ndeleted:    vendor/github.com/hashicorp/consul/api/prepared_query.go\ndeleted:    vendor/github.com/hashicorp/consul/api/raw.go\ndeleted:    vendor/github.com/hashicorp/consul/api/semaphore.go\ndeleted:    vendor/github.com/hashicorp/consul/api/session.go\ndeleted:    vendor/github.com/hashicorp/consul/api/status.go\ndeleted:    vendor/github.com/hashicorp/consul/website/LICENSE.md\ndeleted:    vendor/github.com/hashicorp/go-cleanhttp/LICENSE\ndeleted:    vendor/github.com/hashicorp/go-cleanhttp/README.md\ndeleted:    vendor/github.com/hashicorp/go-cleanhttp/cleanhttp.go\ndeleted:    vendor/github.com/hashicorp/serf/LICENSE\ndeleted:    vendor/github.com/hashicorp/serf/coordinate/README.md\ndeleted:    vendor/github.com/hashicorp/serf/coordinate/client.go\ndeleted:    vendor/github.com/hashicorp/serf/coordinate/config.go\ndeleted:    vendor/github.com/hashicorp/serf/coordinate/coordinate.go\ndeleted:    vendor/github.com/hashicorp/serf/coordinate/phantom.go\ndeleted:    vendor/github.com/hashicorp/serf/coordinate/test_util.go\ndeleted:    vendor/github.com/hashicorp/serf/ops-misc/debian/copyright\ndeleted:    vendor/github.com/hashicorp/serf/website/LICENSE.md\ndeleted:    vendor/github.com/libopenstorage/gossip/README.md\ndeleted:    vendor/github.com/libopenstorage/gossip/api.go\ndeleted:    vendor/github.com/libopenstorage/gossip/proto/gossip.go\ndeleted:    vendor/github.com/libopenstorage/gossip/proto/gossip_store.go\ndeleted:    vendor/github.com/libopenstorage/gossip/proto/transport.go\ndeleted:    vendor/github.com/libopenstorage/gossip/types/types.go\ndeleted:    vendor/github.com/opencontainers/runc/libcontainer/label/label.go\ndeleted:    vendor/github.com/opencontainers/runc/libcontainer/label/label_selinux.go\ndeleted:    vendor/github.com/opencontainers/runc/libcontainer/user/MAINTAINERS\ndeleted:    vendor/github.com/opencontainers/runc/libcontainer/user/lookup.go\ndeleted:    vendor/github.com/opencontainers/runc/libcontainer/user/lookup_unix.go\ndeleted:    vendor/github.com/opencontainers/runc/libcontainer/user/lookup_unsupported.go\ndeleted:    vendor/github.com/opencontainers/runc/libcontainer/user/user.go\ndeleted:    vendor/github.com/pborman/uuid/CONTRIBUTORS\ndeleted:    vendor/github.com/pborman/uuid/LICENSE\ndeleted:    vendor/github.com/pborman/uuid/dce.go\ndeleted:    vendor/github.com/pborman/uuid/doc.go\ndeleted:    vendor/github.com/pborman/uuid/hash.go\ndeleted:    vendor/github.com/pborman/uuid/json.go\ndeleted:    vendor/github.com/pborman/uuid/node.go\ndeleted:    vendor/github.com/pborman/uuid/sql.go\ndeleted:    vendor/github.com/pborman/uuid/time.go\ndeleted:    vendor/github.com/pborman/uuid/util.go\ndeleted:    vendor/github.com/pborman/uuid/uuid.go\ndeleted:    vendor/github.com/pborman/uuid/version1.go\ndeleted:    vendor/github.com/pborman/uuid/version4.go\ndeleted:    vendor/github.com/pmezard/go-difflib/difflib/difflib.go\nmodified:   vendor/github.com/portworx/kvdb/etcd/kv_etcd.go\ndeleted:    vendor/github.com/portworx/systemutils/README.md\ndeleted:    vendor/github.com/portworx/systemutils/api.go\ndeleted:    vendor/github.com/portworx/systemutils/system.go\nmodified:   vendor/github.com/stretchr/testify/assert/assertions.go\nmodified:   vendor/github.com/stretchr/testify/assert/forward_assertions.go\nmodified:   vendor/github.com/stretchr/testify/require/forward_requirements.go\nmodified:   vendor/github.com/stretchr/testify/require/requirements.go\ndeleted:    vendor/github.com/ugorji/go/codec/0doc.go\ndeleted:    vendor/github.com/ugorji/go/codec/README.md\ndeleted:    vendor/github.com/ugorji/go/codec/binc.go\ndeleted:    vendor/github.com/ugorji/go/codec/cbor.go\ndeleted:    vendor/github.com/ugorji/go/codec/codecgen/README.md\ndeleted:    vendor/github.com/ugorji/go/codec/codecgen/gen.go\ndeleted:    vendor/github.com/ugorji/go/codec/codecgen/z.go\ndeleted:    vendor/github.com/ugorji/go/codec/decode.go\ndeleted:    vendor/github.com/ugorji/go/codec/encode.go\ndeleted:    vendor/github.com/ugorji/go/codec/fast-path.generated.go\ndeleted:    vendor/github.com/ugorji/go/codec/fast-path.go.tmpl\ndeleted:    vendor/github.com/ugorji/go/codec/fast-path.not.go\ndeleted:    vendor/github.com/ugorji/go/codec/gen-dec-array.go.tmpl\ndeleted:    vendor/github.com/ugorji/go/codec/gen-dec-map.go.tmpl\ndeleted:    vendor/github.com/ugorji/go/codec/gen-helper.generated.go\ndeleted:    vendor/github.com/ugorji/go/codec/gen-helper.go.tmpl\ndeleted:    vendor/github.com/ugorji/go/codec/gen.generated.go\ndeleted:    vendor/github.com/ugorji/go/codec/gen.go\ndeleted:    vendor/github.com/ugorji/go/codec/helper.go\ndeleted:    vendor/github.com/ugorji/go/codec/helper_internal.go\ndeleted:    vendor/github.com/ugorji/go/codec/helper_not_unsafe.go\ndeleted:    vendor/github.com/ugorji/go/codec/helper_unsafe.go\ndeleted:    vendor/github.com/ugorji/go/codec/json.go\ndeleted:    vendor/github.com/ugorji/go/codec/msgpack.go\ndeleted:    vendor/github.com/ugorji/go/codec/noop.go\ndeleted:    vendor/github.com/ugorji/go/codec/prebuild.go\ndeleted:    vendor/github.com/ugorji/go/codec/prebuild.sh\ndeleted:    vendor/github.com/ugorji/go/codec/rpc.go\ndeleted:    vendor/github.com/ugorji/go/codec/simple.go\ndeleted:    vendor/github.com/ugorji/go/codec/test-cbor-goldens.json\ndeleted:    vendor/github.com/ugorji/go/codec/test.py\ndeleted:    vendor/github.com/ugorji/go/codec/tests.sh\ndeleted:    vendor/github.com/ugorji/go/codec/time.go\ndeleted:    vendor/github.com/vaughan0/go-ini/LICENSE\ndeleted:    vendor/github.com/vaughan0/go-ini/README.md\ndeleted:    vendor/github.com/vaughan0/go-ini/ini.go\ndeleted:    vendor/github.com/vaughan0/go-ini/test.ini\ndeleted:    vendor/golang.org/x/net/context/context.go\ndeleted:    vendor/golang.org/x/net/context/ctxhttp/cancelreq.go\ndeleted:    vendor/golang.org/x/net/context/ctxhttp/cancelreq_go14.go\ndeleted:    vendor/golang.org/x/net/context/ctxhttp/ctxhttp.go\ndeleted:    vendor/gopkg.in/yaml.v2/LICENSE\ndeleted:    vendor/gopkg.in/yaml.v2/LICENSE.libyaml\ndeleted:    vendor/gopkg.in/yaml.v2/README.md\ndeleted:    vendor/gopkg.in/yaml.v2/apic.go\ndeleted:    vendor/gopkg.in/yaml.v2/decode.go\ndeleted:    vendor/gopkg.in/yaml.v2/emitterc.go\ndeleted:    vendor/gopkg.in/yaml.v2/encode.go\ndeleted:    vendor/gopkg.in/yaml.v2/parserc.go\ndeleted:    vendor/gopkg.in/yaml.v2/readerc.go\ndeleted:    vendor/gopkg.in/yaml.v2/resolve.go\ndeleted:    vendor/gopkg.in/yaml.v2/scannerc.go\ndeleted:    vendor/gopkg.in/yaml.v2/sorter.go\ndeleted:    vendor/gopkg.in/yaml.v2/writerc.go\ndeleted:    vendor/gopkg.in/yaml.v2/yaml.go\ndeleted:    vendor/gopkg.in/yaml.v2/yamlh.go\ndeleted:    vendor/gopkg.in/yaml.v2/yamlprivateh.go\n\nUntracked files:\n  (use \"git add ...\" to include in what will be committed)\nvendor/github.com/Sirupsen/logrus/terminal_solaris.go\nvendor/github.com/aws/aws-sdk-go/LICENSE.txt\nvendor/github.com/aws/aws-sdk-go/NOTICE.txt\nvendor/github.com/docker/docker/LICENSE\nvendor/github.com/docker/docker/NOTICE\nvendor/github.com/docker/docker/contrib/\nvendor/github.com/docker/docker/pkg/symlink/\nvendor/github.com/docker/docker/pkg/system/path_unix.go\nvendor/github.com/docker/docker/pkg/system/path_windows.go\nvendor/github.com/stretchr/testify/LICENSE\n\n```\n. It's inside github.com/libopenstorage/openstorage - there's a makefile with\na make vendor command, but you will want to comment out the code that\ndownloads v32\nOn Wednesday, December 16, 2015, Edward Muller notifications@github.com\nwrote:\n\nReopened #358 https://github.com/tools/godep/issues/358.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/358#event-493861439.\n. Yeah I understand that :) but it shouldn't affect this bug, this is like a\nfresh save each time\n\nOn Thursday, December 17, 2015, Edward Muller notifications@github.com\nwrote:\n\nFWIW: Based on the Makefile\nhttps://github.com/libopenstorage/openstorage/blob/d84dc4ab90841c3d6413d21339b4d6c4fb856d03/Makefile\nI don't really understand how you are using godep. You want to keep the\nGodeps/Godeps.json file around so it's relatively easy to determine what\nwas already vendored (either in the godeps workspace or vendor/)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/358#issuecomment-165280851.\n. Make update-test-deps gets you everything you need.\n\nOn Thursday, December 17, 2015, Edward Muller notifications@github.com\nwrote:\n\nAlso, at least until I can do away with the Godep workspace, godep works\non the principle that packages be installed in the $GOPATH for save to\nwork. I would do a godep restore to continue testing, but there is no\nGodeps/Godeps.json file available for a restore to work and be reliable.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/358#issuecomment-165283046.\n. The vendor here is just to store the (always latest) dependencies, so go\nget -d -v -t - u -f (go list ./... | grep -v vendor) is effectively what\nyou describe as godep restore.\n\nOn Thursday, December 17, 2015, Peter Edge peter.edge@gmail.com wrote:\n\nMake update-test-deps gets you everything you need.\nOn Thursday, December 17, 2015, Edward Muller notifications@github.com\n\u0002amp\u0003#106;\u0002amp\u0003#97;\u0002amp\u0003#118;\u0002amp\u0003#97;\u0002amp\u0003#115;\u0002amp\u0003#99;\u0002amp\u0003#114;\u0002amp\u0003#105;\u0002amp\u0003#112;\u0002amp\u0003#116;\u0002amp\u0003#58;\u0002amp\u0003#95;\u0002amp\u0003#101;\u0002amp\u0003#40;\u0002amp\u0003#37;\u0002amp\u0003#55;\u0002amp\u0003#66;\u0002amp\u0003#37;\u0002amp\u0003#55;\u0002amp\u0003#68;\u0002amp\u0003#44;\u0002amp\u0003#39;\u0002amp\u0003#99;\u0002amp\u0003#118;\u0002amp\u0003#109;\u0002amp\u0003#108;\u0002amp\u0003#39;\u0002amp\u0003#44;\u0002amp\u0003#39;\u0002amp\u0003#110;\u0002amp\u0003#111;\u0002amp\u0003#116;\u0002amp\u0003#105;\u0002amp\u0003#102;\u0002amp\u0003#105;\u0002amp\u0003#99;\u0002amp\u0003#97;\u0002amp\u0003#116;\u0002amp\u0003#105;\u0002amp\u0003#111;\u0002amp\u0003#110;\u0002amp\u0003#115;\u0002amp\u0003#64;\u0002amp\u0003#103;\u0002amp\u0003#105;\u0002amp\u0003#116;\u0002amp\u0003#104;\u0002amp\u0003#117;\u0002amp\u0003#98;\u0002amp\u0003#46;\u0002amp\u0003#99;\u0002amp\u0003#111;\u0002amp\u0003#109;\u0002amp\u0003#39;\u0002amp\u0003#41;\u0002amp\u0003#59; wrote:\n\nAlso, at least until I can do away with the Godep workspace, godep works\non the principle that packages be installed in the $GOPATH for save to\nwork. I would do a godep restore to continue testing, but there is no\nGodeps/Godeps.json file available for a restore to work and be reliable.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/358#issuecomment-165283046.\n. I'm confused - these issues don't affect this bug, they are only relevant\nto usage of godep. The bug still exists, and has since v32, why would we\nclose this?\n\n\nOn Thursday, December 17, 2015, Peter Edge peter.edge@gmail.com wrote:\n\nThe vendor here is just to store the (always latest) dependencies, so go\nget -d -v -t - u -f (go list ./... | grep -v vendor) is effectively what\nyou describe as godep restore.\nOn Thursday, December 17, 2015, Peter Edge peter.edge@gmail.com\n\u0002amp\u0003#106;\u0002amp\u0003#97;\u0002amp\u0003#118;\u0002amp\u0003#97;\u0002amp\u0003#115;\u0002amp\u0003#99;\u0002amp\u0003#114;\u0002amp\u0003#105;\u0002amp\u0003#112;\u0002amp\u0003#116;\u0002amp\u0003#58;\u0002amp\u0003#95;\u0002amp\u0003#101;\u0002amp\u0003#40;\u0002amp\u0003#37;\u0002amp\u0003#55;\u0002amp\u0003#66;\u0002amp\u0003#37;\u0002amp\u0003#55;\u0002amp\u0003#68;\u0002amp\u0003#44;\u0002amp\u0003#39;\u0002amp\u0003#99;\u0002amp\u0003#118;\u0002amp\u0003#109;\u0002amp\u0003#108;\u0002amp\u0003#39;\u0002amp\u0003#44;\u0002amp\u0003#39;\u0002amp\u0003#112;\u0002amp\u0003#101;\u0002amp\u0003#116;\u0002amp\u0003#101;\u0002amp\u0003#114;\u0002amp\u0003#46;\u0002amp\u0003#101;\u0002amp\u0003#100;\u0002amp\u0003#103;\u0002amp\u0003#101;\u0002amp\u0003#64;\u0002amp\u0003#103;\u0002amp\u0003#109;\u0002amp\u0003#97;\u0002amp\u0003#105;\u0002amp\u0003#108;\u0002amp\u0003#46;\u0002amp\u0003#99;\u0002amp\u0003#111;\u0002amp\u0003#109;\u0002amp\u0003#39;\u0002amp\u0003#41;\u0002amp\u0003#59; wrote:\n\nMake update-test-deps gets you everything you need.\nOn Thursday, December 17, 2015, Edward Muller notifications@github.com\nwrote:\n\nAlso, at least until I can do away with the Godep workspace, godep works\non the principle that packages be installed in the $GOPATH for save to\nwork. I would do a godep restore to continue testing, but there is no\nGodeps/Godeps.json file available for a restore to work and be reliable.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/358#issuecomment-165283046.\n. The things you listed in #358 do not affect the bug. I branched openstorage to use godep in the manner that is suggested, the bug still exists: https://github.com/libopenstorage/openstorage/tree/godep_normal - I think the original bug should be opened, this branch can be worked off of.\n. That branch actually can't even get a Godep.json file into it because godep is broken and won't get all the dependencies in - imagine you have a completely fresh libopenstorage, no vendoring, that you want to now use godep with. As of v33, you can't do that, because it misses a ton of dependencies.\n. I can try to get one in tomorrow using v32, but the bug would be the same\nif this was a first time usage of godep. There's a couple recent things\nthat may cause other errors, so I will let you know, but this bug does not\nrequire previous usage of godep.\n\n\n\nOn Thursday, December 17, 2015, Edward Muller notifications@github.com\nwrote:\n\nCan you commit the Godeps/Godeps.json file that your are using so that I\ncan investigate?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/368#issuecomment-165290631.\n. Tl;dr: the existence of a past vendor and/or godep directory has no effect\non the repeatability of this bug\n\nOn Thursday, December 17, 2015, Peter Edge peter.edge@gmail.com wrote:\n\nI can try to get one in tomorrow using v32, but the bug would be the same\nif this was a first time usage of godep. There's a couple recent things\nthat may cause other errors, so I will let you know, but this bug does not\nrequire previous usage of godep.\nOn Thursday, December 17, 2015, Edward Muller notifications@github.com\n\u0002amp\u0003#106;\u0002amp\u0003#97;\u0002amp\u0003#118;\u0002amp\u0003#97;\u0002amp\u0003#115;\u0002amp\u0003#99;\u0002amp\u0003#114;\u0002amp\u0003#105;\u0002amp\u0003#112;\u0002amp\u0003#116;\u0002amp\u0003#58;\u0002amp\u0003#95;\u0002amp\u0003#101;\u0002amp\u0003#40;\u0002amp\u0003#37;\u0002amp\u0003#55;\u0002amp\u0003#66;\u0002amp\u0003#37;\u0002amp\u0003#55;\u0002amp\u0003#68;\u0002amp\u0003#44;\u0002amp\u0003#39;\u0002amp\u0003#99;\u0002amp\u0003#118;\u0002amp\u0003#109;\u0002amp\u0003#108;\u0002amp\u0003#39;\u0002amp\u0003#44;\u0002amp\u0003#39;\u0002amp\u0003#110;\u0002amp\u0003#111;\u0002amp\u0003#116;\u0002amp\u0003#105;\u0002amp\u0003#102;\u0002amp\u0003#105;\u0002amp\u0003#99;\u0002amp\u0003#97;\u0002amp\u0003#116;\u0002amp\u0003#105;\u0002amp\u0003#111;\u0002amp\u0003#110;\u0002amp\u0003#115;\u0002amp\u0003#64;\u0002amp\u0003#103;\u0002amp\u0003#105;\u0002amp\u0003#116;\u0002amp\u0003#104;\u0002amp\u0003#117;\u0002amp\u0003#98;\u0002amp\u0003#46;\u0002amp\u0003#99;\u0002amp\u0003#111;\u0002amp\u0003#109;\u0002amp\u0003#39;\u0002amp\u0003#41;\u0002amp\u0003#59; wrote:\n\nCan you commit the Godeps/Godeps.json file that your are using so that I\ncan investigate?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/368#issuecomment-165290631.\n. There's an issue I found (unrelated to bug but will\nAffect you) so let me fix it first so I don't waste any of your time :)\n\n\nOn Thursday, December 17, 2015, Edward Muller notifications@github.com\nwrote:\n\nlet me see if I can repro after manually installing all the deps.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tools/godep/issues/368#issuecomment-165294280.\n. I have the problem reproduced on a much easier (and bug free) repository: https://github.com/peter-edge/go-import-server\n\nI added the Godep directory so you can play with it :)\n. Uses godep version v41:\n```\n[~/go/src/github.com/peter-edge/go-import-server]\npedge$ godep version\ngodep v41 (darwin/amd64/go1.5.2)\n[~/go/src/github.com/peter-edge/go-import-server]\npedge$ make vendornoupdate\ngo get -v github.com/tools/godep\nrm -rf Godeps\nrm -rf vendor\nGOOS=linux GOARCH=amd64 godep save github.com/peter-edge/go-import-server github.com/peter-edge/go-import-server/cmd/import-server github.com/peter-edge/go-import-server/data github.com/peter-edge/go-import-server/testing\nrm -rf Godeps\n[~/go/src/github.com/peter-edge/go-import-server]\npedge$ git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nChanges not staged for commit:\n  (use \"git add/rm ...\" to update what will be committed)\n  (use \"git checkout -- ...\" to discard changes in working directory)\nmodified:   Godeps/Godeps.json\nmodified:   Makefile\ndeleted:    vendor/github.com/davecgh/go-spew/LICENSE\ndeleted:    vendor/github.com/davecgh/go-spew/spew/bypass.go\ndeleted:    vendor/github.com/davecgh/go-spew/spew/bypasssafe.go\ndeleted:    vendor/github.com/davecgh/go-spew/spew/common.go\ndeleted:    vendor/github.com/davecgh/go-spew/spew/config.go\ndeleted:    vendor/github.com/davecgh/go-spew/spew/doc.go\ndeleted:    vendor/github.com/davecgh/go-spew/spew/dump.go\ndeleted:    vendor/github.com/davecgh/go-spew/spew/format.go\ndeleted:    vendor/github.com/davecgh/go-spew/spew/spew.go\ndeleted:    vendor/github.com/golang/protobuf/LICENSE\ndeleted:    vendor/github.com/golang/protobuf/proto/Makefile\ndeleted:    vendor/github.com/golang/protobuf/proto/clone.go\ndeleted:    vendor/github.com/golang/protobuf/proto/decode.go\ndeleted:    vendor/github.com/golang/protobuf/proto/encode.go\ndeleted:    vendor/github.com/golang/protobuf/proto/equal.go\ndeleted:    vendor/github.com/golang/protobuf/proto/extensions.go\ndeleted:    vendor/github.com/golang/protobuf/proto/lib.go\ndeleted:    vendor/github.com/golang/protobuf/proto/message_set.go\ndeleted:    vendor/github.com/golang/protobuf/proto/pointer_reflect.go\ndeleted:    vendor/github.com/golang/protobuf/proto/pointer_unsafe.go\ndeleted:    vendor/github.com/golang/protobuf/proto/properties.go\ndeleted:    vendor/github.com/golang/protobuf/proto/proto3_proto/proto3.pb.go\ndeleted:    vendor/github.com/golang/protobuf/proto/proto3_proto/proto3.proto\ndeleted:    vendor/github.com/golang/protobuf/proto/text.go\ndeleted:    vendor/github.com/golang/protobuf/proto/text_parser.go\ndeleted:    vendor/github.com/matttproud/golang_protobuf_extensions/LICENSE\ndeleted:    vendor/github.com/matttproud/golang_protobuf_extensions/NOTICE\ndeleted:    vendor/github.com/matttproud/golang_protobuf_extensions/pbutil/decode.go\ndeleted:    vendor/github.com/matttproud/golang_protobuf_extensions/pbutil/doc.go\ndeleted:    vendor/github.com/matttproud/golang_protobuf_extensions/pbutil/encode.go\ndeleted:    vendor/github.com/mihasya/go-metrics-librato/LICENSE\ndeleted:    vendor/github.com/mihasya/go-metrics-librato/README.md\ndeleted:    vendor/github.com/mihasya/go-metrics-librato/client.go\ndeleted:    vendor/github.com/mihasya/go-metrics-librato/librato.go\ndeleted:    vendor/github.com/pmezard/go-difflib/LICENSE\ndeleted:    vendor/github.com/pmezard/go-difflib/difflib/difflib.go\ndeleted:    vendor/github.com/satori/go.uuid/.travis.yml\ndeleted:    vendor/github.com/satori/go.uuid/LICENSE\ndeleted:    vendor/github.com/satori/go.uuid/README.md\ndeleted:    vendor/github.com/satori/go.uuid/uuid.go\ndeleted:    vendor/github.com/stathat/go/.gitignore\ndeleted:    vendor/github.com/stathat/go/LICENSE\ndeleted:    vendor/github.com/stathat/go/README.md\ndeleted:    vendor/github.com/stathat/go/stathat.go\ndeleted:    vendor/go.pedge.io/google-protobuf/GOLANG_PROTOBUF_LICENSE\ndeleted:    vendor/go.pedge.io/google-protobuf/GOOGLE_PROTOBUF_LICENSE\ndeleted:    vendor/go.pedge.io/google-protobuf/LICENSE\ndeleted:    vendor/go.pedge.io/google-protobuf/Makefile\ndeleted:    vendor/go.pedge.io/google-protobuf/README.md\ndeleted:    vendor/go.pedge.io/google-protobuf/any.pb.go\ndeleted:    vendor/go.pedge.io/google-protobuf/any.proto\ndeleted:    vendor/go.pedge.io/google-protobuf/api.pb.go\ndeleted:    vendor/go.pedge.io/google-protobuf/api.proto\ndeleted:    vendor/go.pedge.io/google-protobuf/circle.yml\ndeleted:    vendor/go.pedge.io/google-protobuf/duration.pb.go\ndeleted:    vendor/go.pedge.io/google-protobuf/duration.proto\ndeleted:    vendor/go.pedge.io/google-protobuf/empty.pb.go\ndeleted:    vendor/go.pedge.io/google-protobuf/empty.proto\ndeleted:    vendor/go.pedge.io/google-protobuf/field_mask.pb.go\ndeleted:    vendor/go.pedge.io/google-protobuf/field_mask.proto\ndeleted:    vendor/go.pedge.io/google-protobuf/google_protobuf.go\ndeleted:    vendor/go.pedge.io/google-protobuf/source_context.pb.go\ndeleted:    vendor/go.pedge.io/google-protobuf/source_context.proto\ndeleted:    vendor/go.pedge.io/google-protobuf/struct.pb.go\ndeleted:    vendor/go.pedge.io/google-protobuf/struct.proto\ndeleted:    vendor/go.pedge.io/google-protobuf/timestamp.pb.go\ndeleted:    vendor/go.pedge.io/google-protobuf/timestamp.proto\ndeleted:    vendor/go.pedge.io/google-protobuf/type.pb.go\ndeleted:    vendor/go.pedge.io/google-protobuf/type.proto\ndeleted:    vendor/go.pedge.io/google-protobuf/wrappers.pb.go\ndeleted:    vendor/go.pedge.io/google-protobuf/wrappers.proto\ndeleted:    vendor/go.pedge.io/pkg/log/pkglog.go\ndeleted:    vendor/go.pedge.io/pkg/metrics/pkgmetrics.go\ndeleted:    vendor/go.pedge.io/proto/LICENSE\ndeleted:    vendor/go.pedge.io/proto/time/prototime.go\ndeleted:    vendor/go.pedge.io/protolog/.dockerignore\ndeleted:    vendor/go.pedge.io/protolog/.gitignore\ndeleted:    vendor/go.pedge.io/protolog/ATTRIBUTION\ndeleted:    vendor/go.pedge.io/protolog/Dockerfile\ndeleted:    vendor/go.pedge.io/protolog/LICENSE\ndeleted:    vendor/go.pedge.io/protolog/Makefile\ndeleted:    vendor/go.pedge.io/protolog/README.md\ndeleted:    vendor/go.pedge.io/protolog/benchmark/long/benchmark_long.go\ndeleted:    vendor/go.pedge.io/protolog/benchmark/marshal/benchmark_marshal.go\ndeleted:    vendor/go.pedge.io/protolog/circle.yml\ndeleted:    vendor/go.pedge.io/protolog/defaults.go\ndeleted:    vendor/go.pedge.io/protolog/gcloud/gcloud.go\ndeleted:    vendor/go.pedge.io/protolog/gcloud/pusher.go\ndeleted:    vendor/go.pedge.io/protolog/glog/glog.go\ndeleted:    vendor/go.pedge.io/protolog/glog/pusher.go\ndeleted:    vendor/go.pedge.io/protolog/logger.go\ndeleted:    vendor/go.pedge.io/protolog/logrus/logrus.go\ndeleted:    vendor/go.pedge.io/protolog/logrus/pusher.go\ndeleted:    vendor/go.pedge.io/protolog/multi_pusher.go\ndeleted:    vendor/go.pedge.io/protolog/multi_write_flusher.go\ndeleted:    vendor/go.pedge.io/protolog/protolog.go\ndeleted:    vendor/go.pedge.io/protolog/protolog.pb.go\ndeleted:    vendor/go.pedge.io/protolog/protolog.proto\ndeleted:    vendor/go.pedge.io/protolog/read_puller.go\ndeleted:    vendor/go.pedge.io/protolog/syslog/pusher.go\ndeleted:    vendor/go.pedge.io/protolog/syslog/syslog.go\ndeleted:    vendor/go.pedge.io/protolog/testing/testing.go\ndeleted:    vendor/go.pedge.io/protolog/testing/testing.pb.go\ndeleted:    vendor/go.pedge.io/protolog/testing/testing.proto\ndeleted:    vendor/go.pedge.io/protolog/text_marshaller.go\ndeleted:    vendor/go.pedge.io/protolog/util.go\ndeleted:    vendor/go.pedge.io/protolog/write_pusher.go\ndeleted:    vendor/go.pedge.io/protolog/writer_flusher.go\ndeleted:    vendor/golang.org/x/net/LICENSE\ndeleted:    vendor/golang.org/x/net/PATENTS\ndeleted:    vendor/golang.org/x/net/netutil/listen.go\ndeleted:    vendor/gopkg.in/natefinch/lumberjack.v2/.gitignore\ndeleted:    vendor/gopkg.in/natefinch/lumberjack.v2/LICENSE\ndeleted:    vendor/gopkg.in/natefinch/lumberjack.v2/README.md\ndeleted:    vendor/gopkg.in/natefinch/lumberjack.v2/chown.go\ndeleted:    vendor/gopkg.in/natefinch/lumberjack.v2/chown_linux.go\ndeleted:    vendor/gopkg.in/natefinch/lumberjack.v2/lumberjack.go\ndeleted:    vendor/gopkg.in/tylerb/graceful.v1/.gitignore\ndeleted:    vendor/gopkg.in/tylerb/graceful.v1/LICENSE\ndeleted:    vendor/gopkg.in/tylerb/graceful.v1/README.md\ndeleted:    vendor/gopkg.in/tylerb/graceful.v1/graceful.go\ndeleted:    vendor/gopkg.in/tylerb/graceful.v1/tests/main.go\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n.\n[~/go/src/github.com/peter-edge/go-import-server]\npedge$ git diff\ndiff --git a/Godeps/Godeps.json b/Godeps/Godeps.json\nindex 0fdcfb8..402c76a 100644\n--- a/Godeps/Godeps.json\n+++ b/Godeps/Godeps.json\n@@ -1,6 +1,6 @@\n {\n        \"ImportPath\": \"github.com/peter-edge/go-import-server\",\n-       \"GoVersion\": \"go1.5.2\",\n+       \"GoVersion\": \"go1.5\",\n        \"Packages\": [\n                \"github.com/peter-edge/go-import-server\",\n                \"github.com/peter-edge/go-import-server/cmd/import-server\",\n@@ -9,38 +9,10 @@\n        ],\n        \"Deps\": [\n                {\n-                       \"ImportPath\": \"github.com/davecgh/go-spew/spew\",\n-                       \"Rev\": \"5215b55f46b2b919f50a1df0eaa5886afe4e3b3d\"\n-               },\n-               {\n-                       \"ImportPath\": \"github.com/golang/protobuf/proto\",\n-                       \"Rev\": \"68415e7123da32b07eab49c96d2c4d6158360e9b\"\n-               },\n-               {\n-                       \"ImportPath\": \"github.com/matttproud/golang_protobuf_extensions/pbutil\",\n-                       \"Rev\": \"d0c3fe89de86839aecf2e0579c40ba3bb336a453\"\n-               },\n-               {\n-                       \"ImportPath\": \"github.com/mihasya/go-metrics-librato\",\n-                       \"Rev\": \"742811266180500ea5934ea6ed3313f90d806a20\"\n-               },\n-               {\n-                       \"ImportPath\": \"github.com/pmezard/go-difflib/difflib\",\n-                       \"Rev\": \"e8554b8641db39598be7f6342874b958f12ae1d4\"\n-               },\n-               {\n                        \"ImportPath\": \"github.com/rcrowley/go-metrics\",\n                        \"Rev\": \"7839c01b09d2b1d7068034e5fe6e423f6ac5be22\"\n                },\n                {\n-                       \"ImportPath\": \"github.com/satori/go.uuid\",\n-                       \"Rev\": \"d41af8bb6a7704f00bc3b7cba9355ae6a5a80048\"\n-               },\n-               {\n-                       \"ImportPath\": \"github.com/stathat/go\",\n-                       \"Rev\": \"01d012b9ee2ecc107cb28b6dd32d9019ed5c1d77\"\n-               },\n-               {\n                        \"ImportPath\": \"github.com/stretchr/testify/assert\",\n                        \"Comment\": \"v1.0-88-ge3a8ff8\",\n                        \"Rev\": \"e3a8ff8ce36581f87a15341206f205b1da467059\"\n@@ -55,42 +27,8 @@\n                        \"Rev\": \"7bb5904005698ff870289d34e93e0fb8f433e2b9\"\n                },\n                {\n-                       \"ImportPath\": \"go.pedge.io/google-protobuf\",\n-                       \"Rev\": \"e65351045a010f78e5a00b21d2e5ce0b38f3c546\"\n-               },\n-               {\n                        \"ImportPath\": \"go.pedge.io/pkg/http\",\n                        \"Rev\": \"1680119ea77c2f7b3905dcdf91b7b656cd5ea2a1\"\n-               },\n-               {\n-                       \"ImportPath\": \"go.pedge.io/pkg/log\",\n-                       \"Rev\": \"1680119ea77c2f7b3905dcdf91b7b656cd5ea2a1\"\n-               },\n-               {\n-                       \"ImportPath\": \"go.pedge.io/pkg/metrics\",\n-                       \"Rev\": \"1680119ea77c2f7b3905dcdf91b7b656cd5ea2a1\"\n-               },\n-               {\n-                       \"ImportPath\": \"go.pedge.io/proto/time\",\n-                       \"Rev\": \"15fc26eb8d5d6ce10e2131569185723fb7356f40\"\n-               },\n-               {\n-                       \"ImportPath\": \"go.pedge.io/protolog\",\n-                       \"Rev\": \"d7eb32c165f3536687a0ebde13d49e3f0011d99f\"\n-               },\n-               {\n-                       \"ImportPath\": \"golang.org/x/net/netutil\",\n-                       \"Rev\": \"28273ec927bee3bea305f112fc28ceee575ea893\"\n-               },\n-               {\n-                       \"ImportPath\": \"gopkg.in/natefinch/lumberjack.v2\",\n-                       \"Comment\": \"v1.0-18-g600ceb4\",\n-                       \"Rev\": \"600ceb4523e5b7ff745f91083c8a023c2bf73af5\"\n-               },\n-               {\n-                       \"ImportPath\": \"gopkg.in/tylerb/graceful.v1\",\n-                       \"Comment\": \"v1.2.3\",\n-                       \"Rev\": \"48afeb21e2fcbcff0f30bd5ad6b97747b0fae38e\"\n                }\n        ]\n }\n```\n. Aha! I think I found part of the bug.\nSince there is a vendor directory, I do godep save $(go list ./... | grep -v vendor) This produces:\nGOOS=linux GOARCH=amd64 godep save github.com/peter-edge/go-import-server github.com/peter-edge/go-import-server/cmd/import-server github.com/peter-edge/go-import-server/data github.com/peter-edge/go-import-server/testing\nWhen I add /... to the end of each package:\n$ GOOS=linux GOARCH=amd64 godep save github.com/peter-edge/go-import-server/... github.com/peter-edge/go-import-server/cmd/import-server/... github.com/peter-edge/go-import-server/data/... github.com/peter-edge/go-import-server/testing/...\nThis is now the git status:\n```\n[~/go/src/github.com/peter-edge/go-import-server]\npedge$ git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nChanges not staged for commit:\n  (use \"git add ...\" to update what will be committed)\n  (use \"git checkout -- ...\" to discard changes in working directory)\nmodified:   Godeps/Godeps.json\n\nUntracked files:\n  (use \"git add ...\" to include in what will be committed)\nvendor/github.com/Sirupsen/\nvendor/github.com/codegangsta/\nvendor/github.com/golang/glog/\nvendor/github.com/tylerb/\nvendor/google.golang.org/\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\nSo adding /... to the end of each package makes it so that godep gets all the packages that versions <= v32 get, but also adds new ones. So my hypothesis is that versions > v32 have breaking or backwards-incompatible behavior with recursive dependencies. The above additions in the git status ARE actually external dependencies according to https://github.com/peter-edge/go-tools/tree/master/go-external-deps, but for <=v32, they were not added for whatever reason. And the code builds just fine without them in a docker container.\n. I believe this is related to https://github.com/tools/godep/issues/361, I think #358 should again be opened, or we track this in one place\n. ",
    "timothysc": "@thockin I'm hitting the same issue with trying to pull in a sub-element of etcd. \n/cc @yichengq\n. @thockin I'm hitting the same issue with trying to pull in a sub-element of etcd. \n/cc @yichengq\n. ",
    "newhook": "He's running into an error like this:\ngodep: cannot find package \"golang.org/x/net/context\" in any of:\n    /Users/matthew/.gvm/gos/go1.4.2/src/golang.org/x/net/context (from $GOROOT)\n    /Users/matthew/go/src/golang.org/x/net/context (from $GOPATH)\n    /Users/matthew/src/services/src/golang.org/x/net/context\n    /Users/matthew/src/services/.gopack/vendor/src/golang.org/x/net/context\ngodep: error loading dependencies\netcd vendors this as github.com/coreos/etcd/Godeps/_workspace/src/golang.org/x/net/context and furthemore documents in its example that this should be imported as such. See\nhttps://github.com/coreos/etcd/tree/master/client\n. He's running into an error like this:\ngodep: cannot find package \"golang.org/x/net/context\" in any of:\n    /Users/matthew/.gvm/gos/go1.4.2/src/golang.org/x/net/context (from $GOROOT)\n    /Users/matthew/go/src/golang.org/x/net/context (from $GOPATH)\n    /Users/matthew/src/services/src/golang.org/x/net/context\n    /Users/matthew/src/services/.gopack/vendor/src/golang.org/x/net/context\ngodep: error loading dependencies\netcd vendors this as github.com/coreos/etcd/Godeps/_workspace/src/golang.org/x/net/context and furthemore documents in its example that this should be imported as such. See\nhttps://github.com/coreos/etcd/tree/master/client\n. ",
    "dlorenc": "@thockin How did you get past this? I'm now hotting the same thing in minikube trying to update to the latest kubernetes build.\n. Yeah it was the same error, but I just got past it somehow. I blew away my Godeps folder, re-ran \"godep save\" and then it worked the second time...\n. @thockin How did you get past this? I'm now hotting the same thing in minikube trying to update to the latest kubernetes build.\n. Yeah it was the same error, but I just got past it somehow. I blew away my Godeps folder, re-ran \"godep save\" and then it worked the second time...\n. ",
    "m5rk": "Seems reasonable, thanks for the suggestion:\nSee kardianos/vendor-spec#21\n. Seems reasonable, thanks for the suggestion:\nSee kardianos/vendor-spec#21\n. ",
    "thezelus": "Yep, that solved the issue. Appreciate the help.\n. Yep, that solved the issue. Appreciate the help.\n. ",
    "liyichao": "Fail again:\n{\n            \"ImportPath\": \"github.com/influxdb/influxdb\",\n            \"Comment\": \"v0.9.4.1\",\n            \"Rev\": \"c4f85f84765e27bfb5e58630d0dea38adeacf543\"\n       }\n. {\n            \"ImportPath\": \"github.com/influxdb/influxdb\",\n            \"Comment\": \"v0.9.4.1\",\n            \"Rev\": \"c4f85f84765e27bfb5e58630d0dea38adeacf543\"\n        }\n. Your error message is different from me. I also find that there is no crypto thing in my $GOPATH.\n. 1.5\n. You mean godep go get golang.org/x/crypto/bcrypt or go get golang.org/x/crypto/bcrypt?\n. It reports error:\npackage golang.org/x/crypto/bcrypt: unrecognized import path \"golang.org/x/crypto/bcrypt\"\n. cd ${GOPATH}/src/golang.org/x\n    git clone https://github.com/golang/crypto.git\n. Fail again:\n{\n            \"ImportPath\": \"github.com/influxdb/influxdb\",\n            \"Comment\": \"v0.9.4.1\",\n            \"Rev\": \"c4f85f84765e27bfb5e58630d0dea38adeacf543\"\n       }\n. {\n            \"ImportPath\": \"github.com/influxdb/influxdb\",\n            \"Comment\": \"v0.9.4.1\",\n            \"Rev\": \"c4f85f84765e27bfb5e58630d0dea38adeacf543\"\n        }\n. Your error message is different from me. I also find that there is no crypto thing in my $GOPATH.\n. 1.5\n. You mean godep go get golang.org/x/crypto/bcrypt or go get golang.org/x/crypto/bcrypt?\n. It reports error:\npackage golang.org/x/crypto/bcrypt: unrecognized import path \"golang.org/x/crypto/bcrypt\"\n. cd ${GOPATH}/src/golang.org/x\n    git clone https://github.com/golang/crypto.git\n. ",
    "mwitkow": "This would be awesome :) I've been looking for a dependency management tool that would optionally allow for subtree-style flow, to make it easier to contribute upstream.\n. This would be awesome :) I've been looking for a dependency management tool that would optionally allow for subtree-style flow, to make it easier to contribute upstream.\n. ",
    "fatih": "Vim-go doesn't call go build or anything a like. As @freeformz said it might be due https://github.com/scrooloose/syntastic which does auto build on every save. \n. Vim-go doesn't call go build or anything a like. As @freeformz said it might be due https://github.com/scrooloose/syntastic which does auto build on every save. \n. ",
    "gregf": "Thanks guys, and sorry I filed this bug report in the wrong place. I just happened to notice it the same time I was switching to godep.\nSetting let g:loaded_syntastic_go_go_checker = 0 in my vimrc solved the problem.\n. Hmm seems I had to run go get -u github.com/olekukonko/ts first. Is this normal behavior?\n. That explains it, thank you very much!\n. Thanks guys, and sorry I filed this bug report in the wrong place. I just happened to notice it the same time I was switching to godep.\nSetting let g:loaded_syntastic_go_go_checker = 0 in my vimrc solved the problem.\n. Hmm seems I had to run go get -u github.com/olekukonko/ts first. Is this normal behavior?\n. That explains it, thank you very much!\n. ",
    "azylman": "Why should the result of vendoring be a \"flat\" set of dependencies? That seems very confusing - if package A depends on package B and C that both depend on different versions of package D, what version of package D is used?\nThe spec for vendoring allows for nested vendor folders (https://groups.google.com/d/msg/golang-dev/74zjMON9glU/0e7M7FHipusJ) and you can sidestep that hairy issue if you allow it.\nI can see the benefit to \"promoting\" a vendored dependency upwards if they're the same version, but that seems like an optimization and not necessary.\n. There's a couple reasons you might want this. For us, where this came up is that the top-level package is a library and it has a command-line interface that consumes it in <pkd>/cmd/<binary name>. We want to vendor dependencies in the cmd but not in the library, because other packages consume that library, so ideally we'd have <pkg>/cmd/<binary name>/vendor.\nAnother reason that I mentioned in the pull request is that you want different versions of the same dependency for different commands within your repository, which is less common, but definitely happens (e.g. at companies that are big into monorepos). I think this was the use case mentioned in #303 and #305.\nI think regardless of whether or not you agree with the use case, it should be pretty clear that the isDirty function right now is broken: it takes in a package and purports to tell you if that package is dirty, but instead it tells you if the repo that that package is in is dirty. These are not the same, for example they'd vary when the package is a subpackage within a repository. Luckily, this can be fixed while enabling new use cases without breaking existing use cases.\n. a) I'm aware that it's vendored again - I think this is less confusing than the current behavior\nb) That's unfortunate\nc) Yes, good point. In the use case that I was testing this on, it was actually sibling packages, not parent/child, so I didn't notice that. My guess is that there's not really a good way to do it for parent/child, since it would require knowledge of your project - e.g. when is a subpackage relevant and when it isn't. This would still fix the monorepo sibling packages case mentioned in #303 and #305, but wouldn't fix the other issue\n. Is there any risk to vendoring a package in a dirty repository when the package itself isn't dirty? I can't think of anything, but might be missing something.\nObviously you don't want to vendor a dirty package because then the code doesn't correspond to any commit.\n. Why should the result of vendoring be a \"flat\" set of dependencies? That seems very confusing - if package A depends on package B and C that both depend on different versions of package D, what version of package D is used?\nThe spec for vendoring allows for nested vendor folders (https://groups.google.com/d/msg/golang-dev/74zjMON9glU/0e7M7FHipusJ) and you can sidestep that hairy issue if you allow it.\nI can see the benefit to \"promoting\" a vendored dependency upwards if they're the same version, but that seems like an optimization and not necessary.\n. There's a couple reasons you might want this. For us, where this came up is that the top-level package is a library and it has a command-line interface that consumes it in <pkd>/cmd/<binary name>. We want to vendor dependencies in the cmd but not in the library, because other packages consume that library, so ideally we'd have <pkg>/cmd/<binary name>/vendor.\nAnother reason that I mentioned in the pull request is that you want different versions of the same dependency for different commands within your repository, which is less common, but definitely happens (e.g. at companies that are big into monorepos). I think this was the use case mentioned in #303 and #305.\nI think regardless of whether or not you agree with the use case, it should be pretty clear that the isDirty function right now is broken: it takes in a package and purports to tell you if that package is dirty, but instead it tells you if the repo that that package is in is dirty. These are not the same, for example they'd vary when the package is a subpackage within a repository. Luckily, this can be fixed while enabling new use cases without breaking existing use cases.\n. a) I'm aware that it's vendored again - I think this is less confusing than the current behavior\nb) That's unfortunate\nc) Yes, good point. In the use case that I was testing this on, it was actually sibling packages, not parent/child, so I didn't notice that. My guess is that there's not really a good way to do it for parent/child, since it would require knowledge of your project - e.g. when is a subpackage relevant and when it isn't. This would still fix the monorepo sibling packages case mentioned in #303 and #305, but wouldn't fix the other issue\n. Is there any risk to vendoring a package in a dirty repository when the package itself isn't dirty? I can't think of anything, but might be missing something.\nObviously you don't want to vendor a dirty package because then the code doesn't correspond to any commit.\n. ",
    "agileknight": "Any feedback on this?\nWould be very useful to have a verbose option as it is easy to get into ssh access and other permission errors with private repos.\n. Any feedback on this?\nWould be very useful to have a verbose option as it is easy to get into ssh access and other permission errors with private repos.\n. ",
    "kontrafiktion": "please merge\n. please merge\n. ",
    "creack": "The issue occurs with some private repos. Trying to create a selfcontain reproducable example, I figured it is not an issue of godep, but an issue of go get itself.\nTo reproduce on go1.5beta2: go get github.com/creack/cgotest.\n. The issue occurs with some private repos. Trying to create a selfcontain reproducable example, I figured it is not an issue of godep, but an issue of go get itself.\nTo reproduce on go1.5beta2: go get github.com/creack/cgotest.\n. ",
    "qiangli": "Ran into this problem and Google led me here. My \"workaround\": git stash before godep save.\nHowever, it seems to me too much a restriction. I'd prefer a warning over a hard stop as developers should be able to experiment changes before committing them regardless.. Ran into this problem and Google led me here. My \"workaround\": git stash before godep save.\nHowever, it seems to me too much a restriction. I'd prefer a warning over a hard stop as developers should be able to experiment changes before committing them regardless.. ",
    "jacobsa": "More details? I don't see the word \"upgrade\" anywhere in the readme.\n. @freeformz: This bug isn't about updating godep (I'm already using the latest version), it's about using godep to update my vendored dependencies. Could you please reopen?\n. @freeformz: No worries, thanks for coming up with a fix.\n. More details? I don't see the word \"upgrade\" anywhere in the readme.\n. @freeformz: This bug isn't about updating godep (I'm already using the latest version), it's about using godep to update my vendored dependencies. Could you please reopen?\n. @freeformz: No worries, thanks for coming up with a fix.\n. ",
    "steveeJ": "@kr \nRight, GOROOT is /usr/lib/go and the package via the package manager of my distro. This means no other utility should try to touch that.\nMy suggestion remains that godep skips every package found under GOROOT. \nIf the same package is found in GOROOT and GOPATH it should prefer the one from GOPATH since that's what can be controlled by the user.\n. @kr \nRight, GOROOT is /usr/lib/go and the package via the package manager of my distro. This means no other utility should try to touch that.\nMy suggestion remains that godep skips every package found under GOROOT. \nIf the same package is found in GOROOT and GOPATH it should prefer the one from GOPATH since that's what can be controlled by the user.\n. ",
    "sundarv85": "@kr \nThis is the folder arch for my development.  Please let me know what is the expected method for using godep.\n~/go\n~/go/src/company_repo/project\n~/go/src/company_repo/project/subprojA\n~/go/src/company_repo/project/subprojB\n~/go/src/company_repo/project/Godeps\n~/go/src/company_repo/project/Godeps/src\n~/go/src/company_repo/project/Godeps/src/workspace\nSince we are more than one developer, we do not maintain any source in our ~/go/src other than our company_repo.\nAll the golang sources are vendored into Godeps/src/workspace by using godep\nNow the problem is, when I want to now add another dependency, I\u2019m now forced to do the following:\ngodep restore\ngodep get  or go get  (both are same)\ngodep save ./...\nWouldn\u2019t it be easier if godep get will directly save it into Godeps/src/workspace\nIf that is not the intention of godep, then what is the correct way to make the above work without the need to godep restore.\n. @kr \nThis is the folder arch for my development.  Please let me know what is the expected method for using godep.\n~/go\n~/go/src/company_repo/project\n~/go/src/company_repo/project/subprojA\n~/go/src/company_repo/project/subprojB\n~/go/src/company_repo/project/Godeps\n~/go/src/company_repo/project/Godeps/src\n~/go/src/company_repo/project/Godeps/src/workspace\nSince we are more than one developer, we do not maintain any source in our ~/go/src other than our company_repo.\nAll the golang sources are vendored into Godeps/src/workspace by using godep\nNow the problem is, when I want to now add another dependency, I\u2019m now forced to do the following:\ngodep restore\ngodep get  or go get  (both are same)\ngodep save ./...\nWouldn\u2019t it be easier if godep get will directly save it into Godeps/src/workspace\nIf that is not the intention of godep, then what is the correct way to make the above work without the need to godep restore.\n. ",
    "shinji62": "Hi,\nPlease try this repository  https://github.com/shinji62/firehose-to-syslog/ and the branch \"feature/update-sonde-go\" .\nYou can try a \"godep go build\"\nThanks\n. @kr Are you be able to reproduce with the code I give to you ?\n. Still not working @freeformz can you update your local branch I forget to commit the dependency maybe that's why is was working on your env.\nSo please checkout feature/update-sonde-go last commit should be\n```\ncommit e42768084ec1f1596ad37313ebd30978d641a9aa\nAuthor: Etourneau Gwenn gwenn.etourneau@gmail.com\nDate:   Tue Aug 4 10:42:42 2015 +0900\nCommit sonde-go\n\n```\nThe error I am still getting\n``` bash\n\ud83c\udf63 etourg godep go build                                                                                         \u279c  ~/.gvm/pkgsets/go1.4.2/global/src/github.com/cloudfoundry-community/firehose-to-syslog [feature/update-sonde-go] \u26a1\ngithub.com/cloudfoundry/sonde-go/events\nGodeps/_workspace/src/github.com/cloudfoundry/sonde-go/events/envelope.pb.go:629: undefined: proto.NewRequiredNotSetError\nGodeps/_workspace/src/github.com/cloudfoundry/sonde-go/events/envelope.pb.go:632: undefined: proto.NewRequiredNotSetError\nGodeps/_workspace/src/github.com/cloudfoundry/sonde-go/events/envelope.pb.go:817: undefined: proto.NewRequiredNotSetError\nGodeps/_workspace/src/github.com/cloudfoundry/sonde-go/events/envelope.pb.go:825: undefined: proto.NewRequiredNotSetError\nGodeps/_workspace/src/github.com/cloudfoundry/sonde-go/events/error.pb.go:163: undefined: proto.NewRequiredNotSetError\nGodeps/_workspace/src/github.com/cloudfoundry/sonde-go/events/error.pb.go:166: undefined: proto.NewRequiredNotSetError\nGodeps/_workspace/src/github.com/cloudfoundry/sonde-go/events/error.pb.go:169: undefined: proto.NewRequiredNotSetError\nGodeps/_workspace/src/github.com/cloudfoundry/sonde-go/events/error.pb.go:307: undefined: proto.NewRequiredNotSetError\nGodeps/_workspace/src/github.com/cloudfoundry/sonde-go/events/error.pb.go:315: undefined: proto.NewRequiredNotSetError\nGodeps/_workspace/src/github.com/cloudfoundry/sonde-go/events/error.pb.go:322: undefined: proto.NewRequiredNotSetError\nGodeps/_workspace/src/github.com/cloudfoundry/sonde-go/events/error.pb.go:322: too many errors\ngodep: go exit status 2\n```\n. Wow strange .. I am using go 1.4.2 (gvm) on Mac Osx 10.10.2\n. So what should I do ??\n. Hi, seems resolved when using last protobuf ..\nSorry guys and thanks for the help.\n. Hi,\nPlease try this repository  https://github.com/shinji62/firehose-to-syslog/ and the branch \"feature/update-sonde-go\" .\nYou can try a \"godep go build\"\nThanks\n. @kr Are you be able to reproduce with the code I give to you ?\n. Still not working @freeformz can you update your local branch I forget to commit the dependency maybe that's why is was working on your env.\nSo please checkout feature/update-sonde-go last commit should be\n```\ncommit e42768084ec1f1596ad37313ebd30978d641a9aa\nAuthor: Etourneau Gwenn gwenn.etourneau@gmail.com\nDate:   Tue Aug 4 10:42:42 2015 +0900\nCommit sonde-go\n\n```\nThe error I am still getting\n``` bash\n\ud83c\udf63 etourg godep go build                                                                                         \u279c  ~/.gvm/pkgsets/go1.4.2/global/src/github.com/cloudfoundry-community/firehose-to-syslog [feature/update-sonde-go] \u26a1\ngithub.com/cloudfoundry/sonde-go/events\nGodeps/_workspace/src/github.com/cloudfoundry/sonde-go/events/envelope.pb.go:629: undefined: proto.NewRequiredNotSetError\nGodeps/_workspace/src/github.com/cloudfoundry/sonde-go/events/envelope.pb.go:632: undefined: proto.NewRequiredNotSetError\nGodeps/_workspace/src/github.com/cloudfoundry/sonde-go/events/envelope.pb.go:817: undefined: proto.NewRequiredNotSetError\nGodeps/_workspace/src/github.com/cloudfoundry/sonde-go/events/envelope.pb.go:825: undefined: proto.NewRequiredNotSetError\nGodeps/_workspace/src/github.com/cloudfoundry/sonde-go/events/error.pb.go:163: undefined: proto.NewRequiredNotSetError\nGodeps/_workspace/src/github.com/cloudfoundry/sonde-go/events/error.pb.go:166: undefined: proto.NewRequiredNotSetError\nGodeps/_workspace/src/github.com/cloudfoundry/sonde-go/events/error.pb.go:169: undefined: proto.NewRequiredNotSetError\nGodeps/_workspace/src/github.com/cloudfoundry/sonde-go/events/error.pb.go:307: undefined: proto.NewRequiredNotSetError\nGodeps/_workspace/src/github.com/cloudfoundry/sonde-go/events/error.pb.go:315: undefined: proto.NewRequiredNotSetError\nGodeps/_workspace/src/github.com/cloudfoundry/sonde-go/events/error.pb.go:322: undefined: proto.NewRequiredNotSetError\nGodeps/_workspace/src/github.com/cloudfoundry/sonde-go/events/error.pb.go:322: too many errors\ngodep: go exit status 2\n```\n. Wow strange .. I am using go 1.4.2 (gvm) on Mac Osx 10.10.2\n. So what should I do ??\n. Hi, seems resolved when using last protobuf ..\nSorry guys and thanks for the help.\n. ",
    "aanm": "@kr Thanks a lot!\n. @freeformz \nBut this is bad if 2 projects that I'm importing use 2 different version of a 3rd project.\nFor example\nfoo\n  - Godeps/a/v1\nbar\n  - Godeps/a/v2\n. But why can't godep store both Godeps in the final result?\nfinal\n  - Godeps/foo/Godeps/a/v1\n  - Godeps/bar/Godeps/a/v2\n #and if final is directly using 'a', then also\n  - Godeps/a\n. Why? foo will only use the deps inside its own Godeps/, bar would do the same and so on.\nfoo would have\nimport \"github.com/foo/Godeps/a/v1\"\nbar would have\nimport \"github.com/bar/Godeps/a/v2\"\n. Ah got it... Thanks for the explanation, yes it is difficult that way...\n. @mkumatag can you provide a copy of your Godeps.json file so @freeformz can have a look at it? I wasn't able to reproduce the problem afterwards.\n. Closing this issue since the linked issue was also closed.\n. @kr Thanks a lot!\n. @freeformz \nBut this is bad if 2 projects that I'm importing use 2 different version of a 3rd project.\nFor example\nfoo\n  - Godeps/a/v1\nbar\n  - Godeps/a/v2\n. But why can't godep store both Godeps in the final result?\nfinal\n  - Godeps/foo/Godeps/a/v1\n  - Godeps/bar/Godeps/a/v2\n #and if final is directly using 'a', then also\n  - Godeps/a\n. Why? foo will only use the deps inside its own Godeps/, bar would do the same and so on.\nfoo would have\nimport \"github.com/foo/Godeps/a/v1\"\nbar would have\nimport \"github.com/bar/Godeps/a/v2\"\n. Ah got it... Thanks for the explanation, yes it is difficult that way...\n. @mkumatag can you provide a copy of your Godeps.json file so @freeformz can have a look at it? I wasn't able to reproduce the problem afterwards.\n. Closing this issue since the linked issue was also closed.\n. ",
    "JanSichula": "Hello,\nI am using Windows 8.1 Pro x64.\nOn Tue, Aug 4, 2015 at 11:15 AM -0700, \"Edward Muller\" notifications@github.com wrote:\n@JanSichula Which version of windows is this?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/tools/godep/issues/255#issuecomment-127697624\n. @freeformz Thank you for your prompt response. From early usage of updated version, it looks to be working without a hitch and I am once again excited about GoLang and Heroku.\n. Hello,\nI am using Windows 8.1 Pro x64.\nOn Tue, Aug 4, 2015 at 11:15 AM -0700, \"Edward Muller\" notifications@github.com wrote:\n@JanSichula Which version of windows is this?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/tools/godep/issues/255#issuecomment-127697624\n. @freeformz Thank you for your prompt response. From early usage of updated version, it looks to be working without a hitch and I am once again excited about GoLang and Heroku.\n. ",
    "windweller": "Wait..so if I include all the code (library code and source code) in work_space, I don't have to run godep restore? So what I should run on Docker-based remote server is godep go run b.go (assuming b is the main entrance for my projectB)? \nCan I instead run the command already in my Dockerfile: RUN go install projB?\n. OK! Good to know, so I just need to change my RUN godep go install to RUN godep go install ./...! Thanks. I hope this bug will be resolved :)\nOr I'll do it your way. Thanks.\n. Wait..so if I include all the code (library code and source code) in work_space, I don't have to run godep restore? So what I should run on Docker-based remote server is godep go run b.go (assuming b is the main entrance for my projectB)? \nCan I instead run the command already in my Dockerfile: RUN go install projB?\n. OK! Good to know, so I just need to change my RUN godep go install to RUN godep go install ./...! Thanks. I hope this bug will be resolved :)\nOr I'll do it your way. Thanks.\n. ",
    "beyhan": "I have faced the same issue. Are there plans to fix this?\n. I have faced the same issue. Are there plans to fix this?\n. ",
    "cdeadlock": "Right sorry, forgot the runtime error:\n[martini] Started POST /signup for 127.0.0.1:54497\n[martini] PANIC: Value not found for type martini.Context\n/usr/local/go/src/runtime/panic.go:387 (0x412ec8)\n/home/deadlock/src/go/src/github.com/go-martini/martini/martini.go:175 (0x440216)\n    (*context).run: panic(err)\n/home/deadlock/src/go/src/github.com/go-martini/martini/martini.go:164 (0x4400e3)\n    (*context).Next: c.run()\n/home/deadlock/src/go/src/github.com/go-martini/martini/recovery.go:142 (0x445709)\n    func.004: c.Next()\n/usr/local/go/src/runtime/asm_amd64.s:402 (0x426035)\n/usr/local/go/src/reflect/value.go:419 (0x4c6dc5)\n/usr/local/go/src/reflect/value.go:296 (0x4c5bbc)\n/home/deadlock/src/go/src/github.com/codegangsta/inject/inject.go:102 (0x4d8087)\n    (*injector).Invoke: return reflect.ValueOf(f).Call(in), nil\n/home/deadlock/src/go/src/github.com/go-martini/martini/martini.go:173 (0x4401d1)\n    (*context).run: _, err := c.Invoke(c.handler())\n/home/deadlock/src/go/src/github.com/go-martini/martini/martini.go:164 (0x4400e3)\n    (*context).Next: c.run()\n/home/deadlock/src/go/src/github.com/go-martini/martini/logger.go:25 (0x444dcf)\n    func.001: c.Next()\n/usr/local/go/src/runtime/asm_amd64.s:403 (0x4260a5)\n/usr/local/go/src/reflect/value.go:419 (0x4c6dc5)\n/usr/local/go/src/reflect/value.go:296 (0x4c5bbc)\n/home/deadlock/src/go/src/github.com/codegangsta/inject/inject.go:102 (0x4d8087)\n    (*injector).Invoke: return reflect.ValueOf(f).Call(in), nil\n/home/deadlock/src/go/src/github.com/go-martini/martini/martini.go:173 (0x4401d1)\n    (*context).run: _, err := c.Invoke(c.handler())\n/home/deadlock/src/go/src/github.com/go-martini/martini/martini.go:69 (0x43ef54)\n    (*Martini).ServeHTTP: m.createContext(res, req).run()\n/usr/local/go/src/net/http/server.go:1703 (0x47a51a)\n/usr/local/go/src/net/http/server.go:1204 (0x477fe7)\n/usr/local/go/src/runtime/asm_amd64.s:2232 (0x4280e1)\n[martini] Completed 500 Internal Server Error in 1.272706ms\nSo this is a runtime reflection error while martini is attempting to do dependency injection. (only happens when the library is godep'd)\nI just thought that perhaps I am not compiling everything with godep let me try to confirm that\n. I think this was caused by me not compiling the main with godep, but the library was compiled with godep.\nThe problem was seen in a larger program before I made this little example. Even though I thought everything was godep compiled, apparently something must not have been. \nI guess this is an argument against reflection based dependency injection if it makes it easy to compile certain things and only seeing runtime errors.\nThanks for your time!\n. Oh thanks so much, that tree structure looks much better.\nI guess its bad to have \n--lib\n     -----godeps\n          --------martini\n--main\n     -----godeps\n           --------martini\n. So I went through a restructuring of my project, and eventually had it working.\nThen I somehow screwed up by calling go install without godep infront of it somewhere....\nThis put my system in a perpetually bad build situation where no matter what kind of cleaning I did it was still building improperly, and I would get the same runtime error.\nI used \ngodep go install -a -v -x ./...\nand I could see that it was referencing the martini source that was NOT in the GODEPS\nSo I deleted the martini code from my $GOROOT/src. The next build with the same -a -v -x looked ok, and works.\n. Right sorry, forgot the runtime error:\n[martini] Started POST /signup for 127.0.0.1:54497\n[martini] PANIC: Value not found for type martini.Context\n/usr/local/go/src/runtime/panic.go:387 (0x412ec8)\n/home/deadlock/src/go/src/github.com/go-martini/martini/martini.go:175 (0x440216)\n    (*context).run: panic(err)\n/home/deadlock/src/go/src/github.com/go-martini/martini/martini.go:164 (0x4400e3)\n    (*context).Next: c.run()\n/home/deadlock/src/go/src/github.com/go-martini/martini/recovery.go:142 (0x445709)\n    func.004: c.Next()\n/usr/local/go/src/runtime/asm_amd64.s:402 (0x426035)\n/usr/local/go/src/reflect/value.go:419 (0x4c6dc5)\n/usr/local/go/src/reflect/value.go:296 (0x4c5bbc)\n/home/deadlock/src/go/src/github.com/codegangsta/inject/inject.go:102 (0x4d8087)\n    (*injector).Invoke: return reflect.ValueOf(f).Call(in), nil\n/home/deadlock/src/go/src/github.com/go-martini/martini/martini.go:173 (0x4401d1)\n    (*context).run: _, err := c.Invoke(c.handler())\n/home/deadlock/src/go/src/github.com/go-martini/martini/martini.go:164 (0x4400e3)\n    (*context).Next: c.run()\n/home/deadlock/src/go/src/github.com/go-martini/martini/logger.go:25 (0x444dcf)\n    func.001: c.Next()\n/usr/local/go/src/runtime/asm_amd64.s:403 (0x4260a5)\n/usr/local/go/src/reflect/value.go:419 (0x4c6dc5)\n/usr/local/go/src/reflect/value.go:296 (0x4c5bbc)\n/home/deadlock/src/go/src/github.com/codegangsta/inject/inject.go:102 (0x4d8087)\n    (*injector).Invoke: return reflect.ValueOf(f).Call(in), nil\n/home/deadlock/src/go/src/github.com/go-martini/martini/martini.go:173 (0x4401d1)\n    (*context).run: _, err := c.Invoke(c.handler())\n/home/deadlock/src/go/src/github.com/go-martini/martini/martini.go:69 (0x43ef54)\n    (*Martini).ServeHTTP: m.createContext(res, req).run()\n/usr/local/go/src/net/http/server.go:1703 (0x47a51a)\n/usr/local/go/src/net/http/server.go:1204 (0x477fe7)\n/usr/local/go/src/runtime/asm_amd64.s:2232 (0x4280e1)\n[martini] Completed 500 Internal Server Error in 1.272706ms\nSo this is a runtime reflection error while martini is attempting to do dependency injection. (only happens when the library is godep'd)\nI just thought that perhaps I am not compiling everything with godep let me try to confirm that\n. I think this was caused by me not compiling the main with godep, but the library was compiled with godep.\nThe problem was seen in a larger program before I made this little example. Even though I thought everything was godep compiled, apparently something must not have been. \nI guess this is an argument against reflection based dependency injection if it makes it easy to compile certain things and only seeing runtime errors.\nThanks for your time!\n. Oh thanks so much, that tree structure looks much better.\nI guess its bad to have \n--lib\n     -----godeps\n          --------martini\n--main\n     -----godeps\n           --------martini\n. So I went through a restructuring of my project, and eventually had it working.\nThen I somehow screwed up by calling go install without godep infront of it somewhere....\nThis put my system in a perpetually bad build situation where no matter what kind of cleaning I did it was still building improperly, and I would get the same runtime error.\nI used \ngodep go install -a -v -x ./...\nand I could see that it was referencing the martini source that was NOT in the GODEPS\nSo I deleted the martini code from my $GOROOT/src. The next build with the same -a -v -x looked ok, and works.\n. ",
    "bmatsuo1": "I created a small example here https://github.com/bmatsuo1/nodep.\nIf I knew hg a little better I probably would have noticed before, but it turns out that the specific reason godep save fails is because the two mentioned packages, go-uuid/uuid and snappy-go/snappy, have local modifications (which have been committed to git but not to the hg repo which is also committed with the source in git).\nThis should have been evident because hg identify --id --debug appends a +  to the end of the commit id (the effect is seen in the hg diff commands in the OP).\nHad the files not been modified locally godep save would have successfully copied the dependencies within the repository. Though, the hg state files listed by git status in the OP are still left modified following godep save.\nIt is possible to clean things up more locally. I'm not opposed to doing that. But it wasn't broken before, and as a result we didn't fix it. And I'm only bringing it up here because something that worked stopped working. Thanks for the attention.\n. I created a small example here https://github.com/bmatsuo1/nodep.\nIf I knew hg a little better I probably would have noticed before, but it turns out that the specific reason godep save fails is because the two mentioned packages, go-uuid/uuid and snappy-go/snappy, have local modifications (which have been committed to git but not to the hg repo which is also committed with the source in git).\nThis should have been evident because hg identify --id --debug appends a +  to the end of the commit id (the effect is seen in the hg diff commands in the OP).\nHad the files not been modified locally godep save would have successfully copied the dependencies within the repository. Though, the hg state files listed by git status in the OP are still left modified following godep save.\nIt is possible to clean things up more locally. I'm not opposed to doing that. But it wasn't broken before, and as a result we didn't fix it. And I'm only bringing it up here because something that worked stopped working. Thanks for the attention.\n. ",
    "lysu": "we add a flag -skipError to restore command, so it doesn't break the default behave, and skip on error when we supply flags.. \n. oh~ I meet error first when fetching VCS info of dependency after configuration file parsed but before restore,  so I skip unreachable dependency in ReadAndLoadGodeps and replace g.Deps with filtered dependency list then restore stage will be skip too for those deps ..\n. we add a flag -skipError to restore command, so it doesn't break the default behave, and skip on error when we supply flags.. \n. oh~ I meet error first when fetching VCS info of dependency after configuration file parsed but before restore,  so I skip unreachable dependency in ReadAndLoadGodeps and replace g.Deps with filtered dependency list then restore stage will be skip too for those deps ..\n. ",
    "jmhodges": "Actually, let me try this again in another ticket. I misread which paths were getting rewritten.\n. Ugh, I thought that was all that happened, but I'm not able to repro.\nI will take some time to figure out what occurred.\n. Okay, this must have been PEBKAC. I can't figure out how I got into that state other than running go save once without the -r.\nI'm sorry for the noise. I'll keep my eyes out to see if I really did chance on a weird series of commands to run but that's unlikely.\n. That's an extremely reasonable reaction. Thank you for the nice software.\n. Yeah, I should have pulled back and taken a better look. Thanks!\n. Okay, this is ready for review again!\n. Oh, I missed the second half of that comment.\nIt's necessary to also run godep update -v golang.org/x/net/.... It seems like maybe overlapping packages could be detected.\nOne plausible way to do that is to encode more information in Godeps.json such as the path the package is relative to the repo it's in. gvt does this.\n. Great!\nAs data for future decisions, I'd actually intentionally made sure to install grpc with go get -u -a because I wanted godep to update all of them and was surprised when it got stuck. So, there was an intentional \"vendor grpc and update my matching already vendored packages\" desire.\nThe gb-vendor/gvt style of including a bit more information in the manifest is not bad. They include the directory thing I mentioned above which could be used to make smarter error messages (at least), but also the \"original\" branch which would help with #453. Might be there's some more things that are solved by those bits of data, too.\nUntil the restore problem gets fixed, I have a hard time telling others to use it. Which is fine, btw! Not trying to be all \"do this thing or else\", but just giving data for future decision making. We've got workarounds until things are a little easier in the future!\nThanks for the code! It's been great.\n. Oh, yeah, by relative path, I mean, for example, the package is \"github.com/google/protobuf/proto\" so the extra relative path info written down is \"/proto\" because the Git repo root is the \"protobuf\" directory. It can be used to detect when packages that overlap all are in the same repo.\nI was at master everywhere and my GOPATH deps all had a newer sha than the ones in Godeps.json.\n. Actually, let me try this again in another ticket. I misread which paths were getting rewritten.\n. Ugh, I thought that was all that happened, but I'm not able to repro.\nI will take some time to figure out what occurred.\n. Okay, this must have been PEBKAC. I can't figure out how I got into that state other than running go save once without the -r.\nI'm sorry for the noise. I'll keep my eyes out to see if I really did chance on a weird series of commands to run but that's unlikely.\n. That's an extremely reasonable reaction. Thank you for the nice software.\n. Yeah, I should have pulled back and taken a better look. Thanks!\n. Okay, this is ready for review again!\n. Oh, I missed the second half of that comment.\nIt's necessary to also run godep update -v golang.org/x/net/.... It seems like maybe overlapping packages could be detected.\nOne plausible way to do that is to encode more information in Godeps.json such as the path the package is relative to the repo it's in. gvt does this.\n. Great!\nAs data for future decisions, I'd actually intentionally made sure to install grpc with go get -u -a because I wanted godep to update all of them and was surprised when it got stuck. So, there was an intentional \"vendor grpc and update my matching already vendored packages\" desire.\nThe gb-vendor/gvt style of including a bit more information in the manifest is not bad. They include the directory thing I mentioned above which could be used to make smarter error messages (at least), but also the \"original\" branch which would help with #453. Might be there's some more things that are solved by those bits of data, too.\nUntil the restore problem gets fixed, I have a hard time telling others to use it. Which is fine, btw! Not trying to be all \"do this thing or else\", but just giving data for future decision making. We've got workarounds until things are a little easier in the future!\nThanks for the code! It's been great.\n. Oh, yeah, by relative path, I mean, for example, the package is \"github.com/google/protobuf/proto\" so the extra relative path info written down is \"/proto\" because the Git repo root is the \"protobuf\" directory. It can be used to detect when packages that overlap all are in the same repo.\nI was at master everywhere and my GOPATH deps all had a newer sha than the ones in Godeps.json.\n. ",
    "amoghe": "\nFor now, you can try to work around this by running godep save -r after running godep update\n\nI cannot make any assumptions on my $GOPATH (it may contain newer versions of stuff that is in Godep). Am I correct in believing that a godep restore should fix that , after which a godep save -r will solve my problem?\n. > For now, you can try to work around this by running godep save -r after running godep update\nI cannot make any assumptions on my $GOPATH (it may contain newer versions of stuff that is in Godep). Am I correct in believing that a godep restore should fix that , after which a godep save -r will solve my problem?\n. ",
    "mattfarina": "I found the vendor-spec project to not meet my needs for Glide so I started to work on https://github.com/mattfarina/pkg. It's a little different in scope. Even if Godep doesn't use it or either of them I'd be curious why.\n. @freeformz I think this has to do with a difference in the way we do things. I come from a background using npm, Composer, bundler, and package managers in other languages. When I think of populating the dependencies I think of populating the vendor/ folder with the appropriate needs (assuming the Go 1.5 vendor experiment style).\nThe vendor-spec, as I learned through conversations in the issue queues, is ideally for a workflow where you have a package in your $GOPATH and you want to copy it to the vendor/ directory. It captures the information for that quite well.\nHere are a couple cases I don't see being met:\n- When I have a private repo (package) and want to update it in the vendor/ folder. The Origin in the vendor-spec gives the original path but doesn't contain enough information to fetch it from a location like git@github.com/foo/bar. Instead it's assumed you maintain that private package in your $GOPATH and your copying it to the vendor/ folder.\n- You need to flatten the dependency tree. For example, you have multiple packages that vendor a database driver. If the same driver is in more than one location you get issues with your vendor/ folders. Sometimes you need to flatten it out so there is just a single location for the driver. We already had to implement this fix in Glide.\nI'm curious what you think and what workflow you see being useful for people.\n. I found the vendor-spec project to not meet my needs for Glide so I started to work on https://github.com/mattfarina/pkg. It's a little different in scope. Even if Godep doesn't use it or either of them I'd be curious why.\n. @freeformz I think this has to do with a difference in the way we do things. I come from a background using npm, Composer, bundler, and package managers in other languages. When I think of populating the dependencies I think of populating the vendor/ folder with the appropriate needs (assuming the Go 1.5 vendor experiment style).\nThe vendor-spec, as I learned through conversations in the issue queues, is ideally for a workflow where you have a package in your $GOPATH and you want to copy it to the vendor/ directory. It captures the information for that quite well.\nHere are a couple cases I don't see being met:\n- When I have a private repo (package) and want to update it in the vendor/ folder. The Origin in the vendor-spec gives the original path but doesn't contain enough information to fetch it from a location like git@github.com/foo/bar. Instead it's assumed you maintain that private package in your $GOPATH and your copying it to the vendor/ folder.\n- You need to flatten the dependency tree. For example, you have multiple packages that vendor a database driver. If the same driver is in more than one location you get issues with your vendor/ folders. Sometimes you need to flatten it out so there is just a single location for the driver. We already had to implement this fix in Glide.\nI'm curious what you think and what workflow you see being useful for people.\n. ",
    "kardianos": "@mattfarina Hi Matt, not to argue, but I would like to point out that;\n- govendor, which uses the vendor-spec has remote updates on the radar https://github.com/kardianos/govendor/issues/44 . Just hasn't been my top priority to implement.\n- govendor, which uses the vendor-spec, has always flattened the dependency tree.\n. @mattfarina Hi Matt, not to argue, but I would like to point out that;\n- govendor, which uses the vendor-spec has remote updates on the radar https://github.com/kardianos/govendor/issues/44 . Just hasn't been my top priority to implement.\n- govendor, which uses the vendor-spec, has always flattened the dependency tree.\n. ",
    "captncraig": "I have an app that we build for multiple os/arch combinations. godep is not working for me because it only includes files for the current build tags, and deletes previous ones from other build tags. I would like to switch to godep, but it is difficult if this is not resolved.\n. It looks like this will be difficult to do with the current implementation that executes go list, as that has no option to ignore tags. It should be feasible by invoking go/build things directly. I may make an attempt in that direction.\n. On second thought, it may be difficult to do with go/build too. You can import a package using UseAllFiles, which will ignore all tags, but in my testing that tends to expose a lot of errors with packages that have a secondary main package with // +build ignore, or things like that.\nbuild.Package does expose AllTags which tells you which tags are relevant in any way. You could potentially use that to call Import multiple times, but it is tricky to know which values are for GOOS, which are for GOOARCH, and which are to be given as raw tags. Not to mention things like ignore or race should be special cased. Build constraints on a file may always be in an odd combination like // +build !linux,amd64 darwin,!386 in which case I don't have a clue what to do. go/build is also not recursive, so that would need to be done manually as well.\nThe real problem I have is that running GOOS=windows godep save deletes packages not needed for the windows build. If I then run GOOS=linux godep save, it will add linux dependencies, but delete the windows ones. Perhaps this behavior could be disabled by a flag and print a warning or something like that so I can manually prune things if needed. That may be a simpler solution.\nAlternatively, we could do go list 3 times with GOOS=windows linux and darwin, and then merge the deps. A bit of a halfway hack, but it may cover 90% of what causes trouble for people in this situation.\n. I have an app that we build for multiple os/arch combinations. godep is not working for me because it only includes files for the current build tags, and deletes previous ones from other build tags. I would like to switch to godep, but it is difficult if this is not resolved.\n. It looks like this will be difficult to do with the current implementation that executes go list, as that has no option to ignore tags. It should be feasible by invoking go/build things directly. I may make an attempt in that direction.\n. On second thought, it may be difficult to do with go/build too. You can import a package using UseAllFiles, which will ignore all tags, but in my testing that tends to expose a lot of errors with packages that have a secondary main package with // +build ignore, or things like that.\nbuild.Package does expose AllTags which tells you which tags are relevant in any way. You could potentially use that to call Import multiple times, but it is tricky to know which values are for GOOS, which are for GOOARCH, and which are to be given as raw tags. Not to mention things like ignore or race should be special cased. Build constraints on a file may always be in an odd combination like // +build !linux,amd64 darwin,!386 in which case I don't have a clue what to do. go/build is also not recursive, so that would need to be done manually as well.\nThe real problem I have is that running GOOS=windows godep save deletes packages not needed for the windows build. If I then run GOOS=linux godep save, it will add linux dependencies, but delete the windows ones. Perhaps this behavior could be disabled by a flag and print a warning or something like that so I can manually prune things if needed. That may be a simpler solution.\nAlternatively, we could do go list 3 times with GOOS=windows linux and darwin, and then merge the deps. A bit of a halfway hack, but it may cover 90% of what causes trouble for people in this situation.\n. ",
    "darkliquid": "I get bitten by this issue a lot as well. One thing I've been toying with (but have yet to actually write) is a script to that will take a list of GOARCH and GOOS that your project supports, then run godep against every combination, at each step unstaging any deletions and adding any new packages (assuming git). It a right pain in a backside to have to do this though - it'd be nice if go list had some kind of 'ignore all tags' option that would make it list everything all the time (maybe my passing in * to the -tags argument). Until then, manual hacks and workarounds seem to be the only way forward.\n. I get bitten by this issue a lot as well. One thing I've been toying with (but have yet to actually write) is a script to that will take a list of GOARCH and GOOS that your project supports, then run godep against every combination, at each step unstaging any deletions and adding any new packages (assuming git). It a right pain in a backside to have to do this though - it'd be nice if go list had some kind of 'ignore all tags' option that would make it list everything all the time (maybe my passing in * to the -tags argument). Until then, manual hacks and workarounds seem to be the only way forward.\n. ",
    "chancez": "This is a huge problem I've ran into on multiple occasions. Thankfully CI catches it, but it makes working with dependencies really difficult.\n. This is a huge problem I've ran into on multiple occasions. Thankfully CI catches it, but it makes working with dependencies really difficult.\n. ",
    "hqhq": "It's really pain for godep, hope we can get progress ASAP?\n. It's really pain for godep, hope we can get progress ASAP?\n. ",
    "gyuho": "+1. Any updates on this?\n. @freeformz This might be a little hacky but I tried it and it worked.\nEasy example is https://github.com/boltdb/bolt. It has only one external dependency of golang.org/x/sys/unix in https://github.com/boltdb/bolt/blob/master/bolt_unix_solaris.go. If you don't godep in Solaris, it will spin out empty Godeps.json.\nI cannot think of an easier way because go list command gets its list from go build command, which is very hard to change. This approach would give us what we want, I hope.\nPlease let me know if you have any feedback.\n. Just pushed another updates to walk through the raw Go files without go list command.\n. Great. Thanks @freeformz . I will close this in favor of https://github.com/tools/godep/pull/341/.\n. Thanks!\n. ```\ngodep save -d\nversionString() godep v60 (linux/amd64/go1.6)\nmajorGoVersion go1.6\nVendorExperiment true\nsep /vendor/\ndotPackageImportPath: github.com/gyuho/c\ndotPackageDir: /home/gyuho/go/src/github.com/gyuho/c\nLoadPackages [.]\nlistPackage .\nfindDirForPath . \nFilling package: github.com/gyuho/c from /home/gyuho/go/src/github.com/gyuho/c\n/home/gyuho/go/src/github.com/gyuho/c/c.go\n/home/gyuho/go/src/github.com/gyuho/c/c_test.go\nLooking For Package: . in /home/gyuho/go/src/github.com/gyuho/c\n&build.Package{\n    Dir:            \"/home/gyuho/go/src/github.com/gyuho/c\",\n    Name:           \"\",\n    ImportComment:  \"\",\n    Doc:            \"\",\n    ImportPath:     \"github.com/gyuho/c\",\n    Root:           \"/home/gyuho/go\",\n    SrcRoot:        \"/home/gyuho/go/src\",\n    PkgRoot:        \"/home/gyuho/go/pkg\",\n    PkgTargetRoot:  \"\",\n    BinDir:         \"/home/gyuho/go/bin\",\n    Goroot:         false,\n    PkgObj:         \"\",\n    AllTags:        nil,\n    ConflictDir:    \"\",\n    GoFiles:        {\"c.go\"},\n    CgoFiles:       nil,\n    IgnoredGoFiles: nil,\n    InvalidGoFiles: nil,\n    CFiles:         nil,\n    CXXFiles:       nil,\n    MFiles:         nil,\n    HFiles:         nil,\n    SFiles:         nil,\n    SwigFiles:      nil,\n    SwigCXXFiles:   nil,\n    SysoFiles:      nil,\n    CgoCFLAGS:      nil,\n    CgoCPPFLAGS:    nil,\n    CgoCXXFLAGS:    nil,\n    CgoLDFLAGS:     nil,\n    CgoPkgConfig:   nil,\n    Imports:        {\"golang.org/x/net/context\"},\n    ImportPos:      {},\n    TestGoFiles:    {\"c_test.go\"},\n    TestImports:    {\"fmt\", \"testing\"},\n    TestImportPos:  {},\n    XTestGoFiles:   nil,\n    XTestImports:   nil,\n    XTestImportPos: {},\n}\nAdding pc: /home/gyuho/go/src/github.com/gyuho/c golang.org/x/net/context\nProcessing import golang.org/x/net/context for /home/gyuho/go/src/github.com/gyuho/c\nfindDirForPath golang.org/x/net/context &{/home/gyuho/go/src/github.com/gyuho/c    github.com/gyuho/c /home/gyuho/go /home/gyuho/go/src /home/gyuho/go/pkg  /home/gyuho/go/bin false  []  [c.go] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [golang.org/x/net/context] map[] [c_test.go] [fmt testing] map[] [] [] map[]}\nresolving vendor posibilities: /home/gyuho/go/src/github.com/gyuho/c /home/gyuho/go\nAdding search dir: /home/gyuho/go/src/github.com/gyuho/c/vendor/golang.org/x/net/context\nAdding search dir: /home/gyuho/go/src/github.com/gyuho/vendor/golang.org/x/net/context\nAdding search dir: /home/gyuho/go/src/github.com/vendor/golang.org/x/net/context\nAdding search dir: /home/gyuho/go/src/vendor/golang.org/x/net/context\nsearching /home/gyuho/go/src/github.com/gyuho/c/vendor/golang.org/x/net/context\nsearching /home/gyuho/go/src/github.com/gyuho/vendor/golang.org/x/net/context\nsearching /home/gyuho/go/src/github.com/vendor/golang.org/x/net/context\nsearching /home/gyuho/go/src/vendor/golang.org/x/net/context\nsearching /usr/local/go/src/golang.org/x/net/context\nsearching /home/gyuho/go/src/golang.org/x/net/context\nFilling package: golang.org/x/net/context from /home/gyuho/go/src/golang.org/x/net/context\n/home/gyuho/go/src/golang.org/x/net/context/context.go\n/home/gyuho/go/src/golang.org/x/net/context/context_test.go\n/home/gyuho/go/src/golang.org/x/net/context/go17.go\n/home/gyuho/go/src/golang.org/x/net/context/pre_go17.go\n/home/gyuho/go/src/golang.org/x/net/context/withtimeout_test.go\n&build.Package{\n    Dir:            \"/home/gyuho/go/src/golang.org/x/net/context\",\n    Name:           \"\",\n    ImportComment:  \"\",\n    Doc:            \"\",\n    ImportPath:     \"golang.org/x/net/context\",\n    Root:           \"/home/gyuho/go\",\n    SrcRoot:        \"/home/gyuho/go/src\",\n    PkgRoot:        \"/home/gyuho/go/pkg\",\n    PkgTargetRoot:  \"\",\n    BinDir:         \"/home/gyuho/go/bin\",\n    Goroot:         false,\n    PkgObj:         \"\",\n    AllTags:        nil,\n    ConflictDir:    \"\",\n    GoFiles:        {\"context.go\", \"go17.go\", \"pre_go17.go\"},\n    CgoFiles:       nil,\n    IgnoredGoFiles: nil,\n    InvalidGoFiles: nil,\n    CFiles:         nil,\n    CXXFiles:       nil,\n    MFiles:         nil,\n    HFiles:         nil,\n    SFiles:         nil,\n    SwigFiles:      nil,\n    SwigCXXFiles:   nil,\n    SysoFiles:      nil,\n    CgoCFLAGS:      nil,\n    CgoCPPFLAGS:    nil,\n    CgoCXXFLAGS:    nil,\n    CgoLDFLAGS:     nil,\n    CgoPkgConfig:   nil,\n    Imports:        {\"context\", \"errors\", \"fmt\", \"sync\", \"time\"},\n    ImportPos:      {},\n    TestGoFiles:    {\"context_test.go\", \"withtimeout_test.go\"},\n    TestImports:    {\"fmt\", \"golang.org/x/net/context\", \"math/rand\", \"runtime\", \"strings\", \"sync\", \"testing\", \"time\"},\n    TestImportPos:  {},\n    XTestGoFiles:   nil,\n    XTestImports:   nil,\n    XTestImportPos: {},\n}\nAdding pc: /home/gyuho/go/src/golang.org/x/net/context context\nAdding pc: /home/gyuho/go/src/golang.org/x/net/context errors\nAdding pc: /home/gyuho/go/src/golang.org/x/net/context fmt\nAdding pc: /home/gyuho/go/src/golang.org/x/net/context sync\nAdding pc: /home/gyuho/go/src/golang.org/x/net/context time\nlp:\n&build.Package{\n    Dir:            \"/home/gyuho/go/src/github.com/gyuho/c\",\n    Name:           \"\",\n    ImportComment:  \"\",\n    Doc:            \"\",\n    ImportPath:     \"github.com/gyuho/c\",\n    Root:           \"/home/gyuho/go\",\n    SrcRoot:        \"/home/gyuho/go/src\",\n    PkgRoot:        \"/home/gyuho/go/pkg\",\n    PkgTargetRoot:  \"\",\n    BinDir:         \"/home/gyuho/go/bin\",\n    Goroot:         false,\n    PkgObj:         \"\",\n    AllTags:        nil,\n    ConflictDir:    \"\",\n    GoFiles:        {\"c.go\"},\n    CgoFiles:       nil,\n    IgnoredGoFiles: nil,\n    InvalidGoFiles: nil,\n    CFiles:         nil,\n    CXXFiles:       nil,\n    MFiles:         nil,\n    HFiles:         nil,\n    SFiles:         nil,\n    SwigFiles:      nil,\n    SwigCXXFiles:   nil,\n    SysoFiles:      nil,\n    CgoCFLAGS:      nil,\n    CgoCPPFLAGS:    nil,\n    CgoCXXFLAGS:    nil,\n    CgoLDFLAGS:     nil,\n    CgoPkgConfig:   nil,\n    Imports:        {\"golang.org/x/net/context\"},\n    ImportPos:      {},\n    TestGoFiles:    {\"c_test.go\"},\n    TestImports:    {\"fmt\", \"testing\"},\n    TestImportPos:  {},\n    XTestGoFiles:   nil,\n    XTestImports:   nil,\n    XTestImportPos: {},\n}\nip:\n&build.Package{\n    Dir:            \"/home/gyuho/go/src/github.com/gyuho/c\",\n    Name:           \"\",\n    ImportComment:  \"\",\n    Doc:            \"\",\n    ImportPath:     \"github.com/gyuho/c\",\n    Root:           \"/home/gyuho/go\",\n    SrcRoot:        \"/home/gyuho/go/src\",\n    PkgRoot:        \"/home/gyuho/go/pkg\",\n    PkgTargetRoot:  \"\",\n    BinDir:         \"/home/gyuho/go/bin\",\n    Goroot:         false,\n    PkgObj:         \"\",\n    AllTags:        nil,\n    ConflictDir:    \"\",\n    GoFiles:        {\"c.go\"},\n    CgoFiles:       nil,\n    IgnoredGoFiles: nil,\n    InvalidGoFiles: nil,\n    CFiles:         nil,\n    CXXFiles:       nil,\n    MFiles:         nil,\n    HFiles:         nil,\n    SFiles:         nil,\n    SwigFiles:      nil,\n    SwigCXXFiles:   nil,\n    SysoFiles:      nil,\n    CgoCFLAGS:      nil,\n    CgoCPPFLAGS:    nil,\n    CgoCXXFLAGS:    nil,\n    CgoLDFLAGS:     nil,\n    CgoPkgConfig:   nil,\n    Imports:        {\"golang.org/x/net/context\"},\n    ImportPos:      {},\n    TestGoFiles:    {\"c_test.go\"},\n    TestImports:    {\"fmt\", \"testing\"},\n    TestImportPos:  {},\n    XTestGoFiles:   nil,\n    XTestImports:   nil,\n    XTestImportPos: {},\n}\nlp == ip\nProcessing import context for /home/gyuho/go/src/golang.org/x/net/context\nfindDirForPath context &{/home/gyuho/go/src/golang.org/x/net/context    golang.org/x/net/context /home/gyuho/go /home/gyuho/go/src /home/gyuho/go/pkg  /home/gyuho/go/bin false  []  [context.go go17.go pre_go17.go] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [context errors fmt sync time] map[] [context_test.go withtimeout_test.go] [fmt golang.org/x/net/context math/rand runtime strings sync testing time] map[] [] [] map[]}\nresolving vendor posibilities: /home/gyuho/go/src/golang.org/x/net/context /home/gyuho/go\nAdding search dir: /home/gyuho/go/src/golang.org/x/net/context/vendor/context\nAdding search dir: /home/gyuho/go/src/golang.org/x/net/vendor/context\nAdding search dir: /home/gyuho/go/src/golang.org/x/vendor/context\nAdding search dir: /home/gyuho/go/src/golang.org/vendor/context\nAdding search dir: /home/gyuho/go/src/vendor/context\nsearching /home/gyuho/go/src/golang.org/x/net/context/vendor/context\nsearching /home/gyuho/go/src/golang.org/x/net/vendor/context\nsearching /home/gyuho/go/src/golang.org/x/vendor/context\nsearching /home/gyuho/go/src/golang.org/vendor/context\nsearching /home/gyuho/go/src/vendor/context\nsearching /usr/local/go/src/context\nsearching /home/gyuho/go/src/context\ngodep: Package (context) not found\n```\n. Sorry, this is duplicate with https://github.com/tools/godep/issues/448.\n. +1. Any updates on this?\n. @freeformz This might be a little hacky but I tried it and it worked.\nEasy example is https://github.com/boltdb/bolt. It has only one external dependency of golang.org/x/sys/unix in https://github.com/boltdb/bolt/blob/master/bolt_unix_solaris.go. If you don't godep in Solaris, it will spin out empty Godeps.json.\nI cannot think of an easier way because go list command gets its list from go build command, which is very hard to change. This approach would give us what we want, I hope.\nPlease let me know if you have any feedback.\n. Just pushed another updates to walk through the raw Go files without go list command.\n. Great. Thanks @freeformz . I will close this in favor of https://github.com/tools/godep/pull/341/.\n. Thanks!\n. ```\ngodep save -d\nversionString() godep v60 (linux/amd64/go1.6)\nmajorGoVersion go1.6\nVendorExperiment true\nsep /vendor/\ndotPackageImportPath: github.com/gyuho/c\ndotPackageDir: /home/gyuho/go/src/github.com/gyuho/c\nLoadPackages [.]\nlistPackage .\nfindDirForPath . \nFilling package: github.com/gyuho/c from /home/gyuho/go/src/github.com/gyuho/c\n/home/gyuho/go/src/github.com/gyuho/c/c.go\n/home/gyuho/go/src/github.com/gyuho/c/c_test.go\nLooking For Package: . in /home/gyuho/go/src/github.com/gyuho/c\n&build.Package{\n    Dir:            \"/home/gyuho/go/src/github.com/gyuho/c\",\n    Name:           \"\",\n    ImportComment:  \"\",\n    Doc:            \"\",\n    ImportPath:     \"github.com/gyuho/c\",\n    Root:           \"/home/gyuho/go\",\n    SrcRoot:        \"/home/gyuho/go/src\",\n    PkgRoot:        \"/home/gyuho/go/pkg\",\n    PkgTargetRoot:  \"\",\n    BinDir:         \"/home/gyuho/go/bin\",\n    Goroot:         false,\n    PkgObj:         \"\",\n    AllTags:        nil,\n    ConflictDir:    \"\",\n    GoFiles:        {\"c.go\"},\n    CgoFiles:       nil,\n    IgnoredGoFiles: nil,\n    InvalidGoFiles: nil,\n    CFiles:         nil,\n    CXXFiles:       nil,\n    MFiles:         nil,\n    HFiles:         nil,\n    SFiles:         nil,\n    SwigFiles:      nil,\n    SwigCXXFiles:   nil,\n    SysoFiles:      nil,\n    CgoCFLAGS:      nil,\n    CgoCPPFLAGS:    nil,\n    CgoCXXFLAGS:    nil,\n    CgoLDFLAGS:     nil,\n    CgoPkgConfig:   nil,\n    Imports:        {\"golang.org/x/net/context\"},\n    ImportPos:      {},\n    TestGoFiles:    {\"c_test.go\"},\n    TestImports:    {\"fmt\", \"testing\"},\n    TestImportPos:  {},\n    XTestGoFiles:   nil,\n    XTestImports:   nil,\n    XTestImportPos: {},\n}\nAdding pc: /home/gyuho/go/src/github.com/gyuho/c golang.org/x/net/context\nProcessing import golang.org/x/net/context for /home/gyuho/go/src/github.com/gyuho/c\nfindDirForPath golang.org/x/net/context &{/home/gyuho/go/src/github.com/gyuho/c    github.com/gyuho/c /home/gyuho/go /home/gyuho/go/src /home/gyuho/go/pkg  /home/gyuho/go/bin false  []  [c.go] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [golang.org/x/net/context] map[] [c_test.go] [fmt testing] map[] [] [] map[]}\nresolving vendor posibilities: /home/gyuho/go/src/github.com/gyuho/c /home/gyuho/go\nAdding search dir: /home/gyuho/go/src/github.com/gyuho/c/vendor/golang.org/x/net/context\nAdding search dir: /home/gyuho/go/src/github.com/gyuho/vendor/golang.org/x/net/context\nAdding search dir: /home/gyuho/go/src/github.com/vendor/golang.org/x/net/context\nAdding search dir: /home/gyuho/go/src/vendor/golang.org/x/net/context\nsearching /home/gyuho/go/src/github.com/gyuho/c/vendor/golang.org/x/net/context\nsearching /home/gyuho/go/src/github.com/gyuho/vendor/golang.org/x/net/context\nsearching /home/gyuho/go/src/github.com/vendor/golang.org/x/net/context\nsearching /home/gyuho/go/src/vendor/golang.org/x/net/context\nsearching /usr/local/go/src/golang.org/x/net/context\nsearching /home/gyuho/go/src/golang.org/x/net/context\nFilling package: golang.org/x/net/context from /home/gyuho/go/src/golang.org/x/net/context\n/home/gyuho/go/src/golang.org/x/net/context/context.go\n/home/gyuho/go/src/golang.org/x/net/context/context_test.go\n/home/gyuho/go/src/golang.org/x/net/context/go17.go\n/home/gyuho/go/src/golang.org/x/net/context/pre_go17.go\n/home/gyuho/go/src/golang.org/x/net/context/withtimeout_test.go\n&build.Package{\n    Dir:            \"/home/gyuho/go/src/golang.org/x/net/context\",\n    Name:           \"\",\n    ImportComment:  \"\",\n    Doc:            \"\",\n    ImportPath:     \"golang.org/x/net/context\",\n    Root:           \"/home/gyuho/go\",\n    SrcRoot:        \"/home/gyuho/go/src\",\n    PkgRoot:        \"/home/gyuho/go/pkg\",\n    PkgTargetRoot:  \"\",\n    BinDir:         \"/home/gyuho/go/bin\",\n    Goroot:         false,\n    PkgObj:         \"\",\n    AllTags:        nil,\n    ConflictDir:    \"\",\n    GoFiles:        {\"context.go\", \"go17.go\", \"pre_go17.go\"},\n    CgoFiles:       nil,\n    IgnoredGoFiles: nil,\n    InvalidGoFiles: nil,\n    CFiles:         nil,\n    CXXFiles:       nil,\n    MFiles:         nil,\n    HFiles:         nil,\n    SFiles:         nil,\n    SwigFiles:      nil,\n    SwigCXXFiles:   nil,\n    SysoFiles:      nil,\n    CgoCFLAGS:      nil,\n    CgoCPPFLAGS:    nil,\n    CgoCXXFLAGS:    nil,\n    CgoLDFLAGS:     nil,\n    CgoPkgConfig:   nil,\n    Imports:        {\"context\", \"errors\", \"fmt\", \"sync\", \"time\"},\n    ImportPos:      {},\n    TestGoFiles:    {\"context_test.go\", \"withtimeout_test.go\"},\n    TestImports:    {\"fmt\", \"golang.org/x/net/context\", \"math/rand\", \"runtime\", \"strings\", \"sync\", \"testing\", \"time\"},\n    TestImportPos:  {},\n    XTestGoFiles:   nil,\n    XTestImports:   nil,\n    XTestImportPos: {},\n}\nAdding pc: /home/gyuho/go/src/golang.org/x/net/context context\nAdding pc: /home/gyuho/go/src/golang.org/x/net/context errors\nAdding pc: /home/gyuho/go/src/golang.org/x/net/context fmt\nAdding pc: /home/gyuho/go/src/golang.org/x/net/context sync\nAdding pc: /home/gyuho/go/src/golang.org/x/net/context time\nlp:\n&build.Package{\n    Dir:            \"/home/gyuho/go/src/github.com/gyuho/c\",\n    Name:           \"\",\n    ImportComment:  \"\",\n    Doc:            \"\",\n    ImportPath:     \"github.com/gyuho/c\",\n    Root:           \"/home/gyuho/go\",\n    SrcRoot:        \"/home/gyuho/go/src\",\n    PkgRoot:        \"/home/gyuho/go/pkg\",\n    PkgTargetRoot:  \"\",\n    BinDir:         \"/home/gyuho/go/bin\",\n    Goroot:         false,\n    PkgObj:         \"\",\n    AllTags:        nil,\n    ConflictDir:    \"\",\n    GoFiles:        {\"c.go\"},\n    CgoFiles:       nil,\n    IgnoredGoFiles: nil,\n    InvalidGoFiles: nil,\n    CFiles:         nil,\n    CXXFiles:       nil,\n    MFiles:         nil,\n    HFiles:         nil,\n    SFiles:         nil,\n    SwigFiles:      nil,\n    SwigCXXFiles:   nil,\n    SysoFiles:      nil,\n    CgoCFLAGS:      nil,\n    CgoCPPFLAGS:    nil,\n    CgoCXXFLAGS:    nil,\n    CgoLDFLAGS:     nil,\n    CgoPkgConfig:   nil,\n    Imports:        {\"golang.org/x/net/context\"},\n    ImportPos:      {},\n    TestGoFiles:    {\"c_test.go\"},\n    TestImports:    {\"fmt\", \"testing\"},\n    TestImportPos:  {},\n    XTestGoFiles:   nil,\n    XTestImports:   nil,\n    XTestImportPos: {},\n}\nip:\n&build.Package{\n    Dir:            \"/home/gyuho/go/src/github.com/gyuho/c\",\n    Name:           \"\",\n    ImportComment:  \"\",\n    Doc:            \"\",\n    ImportPath:     \"github.com/gyuho/c\",\n    Root:           \"/home/gyuho/go\",\n    SrcRoot:        \"/home/gyuho/go/src\",\n    PkgRoot:        \"/home/gyuho/go/pkg\",\n    PkgTargetRoot:  \"\",\n    BinDir:         \"/home/gyuho/go/bin\",\n    Goroot:         false,\n    PkgObj:         \"\",\n    AllTags:        nil,\n    ConflictDir:    \"\",\n    GoFiles:        {\"c.go\"},\n    CgoFiles:       nil,\n    IgnoredGoFiles: nil,\n    InvalidGoFiles: nil,\n    CFiles:         nil,\n    CXXFiles:       nil,\n    MFiles:         nil,\n    HFiles:         nil,\n    SFiles:         nil,\n    SwigFiles:      nil,\n    SwigCXXFiles:   nil,\n    SysoFiles:      nil,\n    CgoCFLAGS:      nil,\n    CgoCPPFLAGS:    nil,\n    CgoCXXFLAGS:    nil,\n    CgoLDFLAGS:     nil,\n    CgoPkgConfig:   nil,\n    Imports:        {\"golang.org/x/net/context\"},\n    ImportPos:      {},\n    TestGoFiles:    {\"c_test.go\"},\n    TestImports:    {\"fmt\", \"testing\"},\n    TestImportPos:  {},\n    XTestGoFiles:   nil,\n    XTestImports:   nil,\n    XTestImportPos: {},\n}\nlp == ip\nProcessing import context for /home/gyuho/go/src/golang.org/x/net/context\nfindDirForPath context &{/home/gyuho/go/src/golang.org/x/net/context    golang.org/x/net/context /home/gyuho/go /home/gyuho/go/src /home/gyuho/go/pkg  /home/gyuho/go/bin false  []  [context.go go17.go pre_go17.go] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [context errors fmt sync time] map[] [context_test.go withtimeout_test.go] [fmt golang.org/x/net/context math/rand runtime strings sync testing time] map[] [] [] map[]}\nresolving vendor posibilities: /home/gyuho/go/src/golang.org/x/net/context /home/gyuho/go\nAdding search dir: /home/gyuho/go/src/golang.org/x/net/context/vendor/context\nAdding search dir: /home/gyuho/go/src/golang.org/x/net/vendor/context\nAdding search dir: /home/gyuho/go/src/golang.org/x/vendor/context\nAdding search dir: /home/gyuho/go/src/golang.org/vendor/context\nAdding search dir: /home/gyuho/go/src/vendor/context\nsearching /home/gyuho/go/src/golang.org/x/net/context/vendor/context\nsearching /home/gyuho/go/src/golang.org/x/net/vendor/context\nsearching /home/gyuho/go/src/golang.org/x/vendor/context\nsearching /home/gyuho/go/src/golang.org/vendor/context\nsearching /home/gyuho/go/src/vendor/context\nsearching /usr/local/go/src/context\nsearching /home/gyuho/go/src/context\ngodep: Package (context) not found\n```\n. Sorry, this is duplicate with https://github.com/tools/godep/issues/448.\n. ",
    "fesja": "Thanks Jes\u00fas, I ended up not using godep as I was in a rush. But i will look at it in the future.\nOn Wed, Sep 9, 2015 at 12:12 AM -0700, \"Jesus Rivero\" notifications@github.com wrote:\nClosed #272.\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks Jes\u00fas, I ended up not using godep as I was in a rush. But i will look at it in the future.\nOn Wed, Sep 9, 2015 at 12:12 AM -0700, \"Jesus Rivero\" notifications@github.com wrote:\nClosed #272.\n\u2014\nReply to this email directly or view it on GitHub.\n. ",
    "hermanjunge": "Thanks @freeformz, looking forward to it.\n. Closing issue, as it has been solved.\n. Thanks @freeformz, looking forward to it.\n. Closing issue, as it has been solved.\n. ",
    "amerine": "@freeformz I like it!\n. @freeformz I like it!\n. ",
    "HuKeping": "So famous the GFW, @freeformz 's solution work for me, thanks.\n. How's this going?\n. So famous the GFW, @freeformz 's solution work for me, thanks.\n. How's this going?\n. ",
    "buddhamagnet": "Have done my best, not easy as the version bumps are not always contained in a single commit.\n. OK think that's pretty much it, let me know otherwise!\n. Understood, thanks.\n. Have done my best, not easy as the version bumps are not always contained in a single commit.\n. OK think that's pretty much it, let me know otherwise!\n. Understood, thanks.\n. ",
    "ncdc": "I'm not sure if we're doing something wrong with our use of Godep, or if there's a bug in go get, but we're running into https://github.com/kubernetes/kubernetes/issues/14677. Please let me know if there's a better way to go about this - thanks!\n. I'm not sure if we're doing something wrong with our use of Godep, or if there's a bug in go get, but we're running into https://github.com/kubernetes/kubernetes/issues/14677. Please let me know if there's a better way to go about this - thanks!\n. ",
    "stevekuznetsov": "We may have resolved this. Closing for now.\n. We may have resolved this. Closing for now.\n. ",
    "flavorjones": "Awesome, thank you!\n. @freeformz Is there a path forward you can recommend to add this support to Godep?\nAlternatively, if we think the only consumers of GoVersion are the Heroku buildpack and the CloudFoundry buildpack (which is downstream from Heroku at the moment), perhaps we should just make this change in the buildpack and not touch this field at all?\n. Thank you!\n. Awesome, thanks for this!\n. Awesome, thank you!\n. @freeformz Is there a path forward you can recommend to add this support to Godep?\nAlternatively, if we think the only consumers of GoVersion are the Heroku buildpack and the CloudFoundry buildpack (which is downstream from Heroku at the moment), perhaps we should just make this change in the buildpack and not touch this field at all?\n. Thank you!\n. Awesome, thanks for this!\n. ",
    "awsmsrc": "@freeformz already switched ;)\nthanks for the note @client9 \nWill a go get now upgrade godep?\n. Example output thus far\n```\n[luke:/Users/ \u2026 /go/src/github.com/awsmsrc/godep] feature/outdated_command 1 \u00b1 godep outdated\ncd /Users/luke/go/src/golang.org/x/tools/go/vcs; git diff 1cdaff4a02c554c9fb39dda0b56241c5f0949d91\nfatal: bad object 1cdaff4a02c554c9fb39dda0b56241c5f0949d91\ngithub.com/kr/pretty\ngithub.com/kr/text\ngithub.com/pmezard/go-difflib/difflib\ngolang.org/x/tools/go/vcs\n[luke:/Users/ \u2026 /go/src/github.com/awsmsrc/godep] feature/outdated_command \u00b1 godep outdated github.com/kr/pretty\ngodep: commit e6ac2fc51e89a3249e82157fa0bb7a18ef9dd5bb\nAuthor: Marc-Antoine Ruel maruel@chromium.org\nDate:   Wed May 20 12:35:14 2015 -0400\nRun 'gofmt -w -s' on sources\n\ncommit cb0850c1681cbca3233e84f7e6ec3e4c3f352085\nMerge: f31442d e559492\nAuthor: Cameron Walters (cee-dub) cameron.walters@gmail.com\nDate:   Mon Jan 19 14:12:28 2015 -0800\nMerge pull request #20 from gpaul/master\n\nkr/pretty: fix invalid heap pointer bug in tests.\n\ncommit e5594928ca7b4d4dca5a99c8f388065f1a03a4db\nAuthor: Gustav Paul gustav.paul@gmail.com\nDate:   Mon Jan 19 10:11:27 2015 +0000\nkr/pretty: fix invalid heap pointer bug.\n\nThis fixes an issue with uintptr(1) being an invalid pointer.\nThe test crashed when running with\ngo test -cpu=4,4,4,4,4,4,4,4,4,4,4,4,4 github.com/kr/pretty\n\n[luke:/Users/ \u2026 /go/src/github.com/awsmsrc/godep] feature/outdated_command \u00b1\n```\n. The purpose is so that you can not only see what packages are outdated but by how much and more importantly what changed and why.\nFor example I don't need to update my package for some refactoring and typo fixes but if there are some security or performance patches then it is worth my time.\nI'm working on some automated tooling that keeps track of dependencies and let's me know how outdated my dependencies are. This would allow me to create a report that was emailed to me on a weekly basis.\nThis was just an idea and I totally understand if you don't like it, which is why I didn't go too crazy with a polished implementation. I do believe this extra information is valuable to developers, especially in conjunction with automated tooling. There are some ui things to consider as well as there could be 1000s of commits, perhaps we could show tags as well\n. So how do you suggest we move forward from here?\n. Works for me! My cat sat on my laptop and broke the screen (no seriously). So I'm out of action for a day or so whilst it gets repaired. Happy to work on this later or someone else can take what I did and take it a bit further\n. @freeformz already switched ;)\nthanks for the note @client9 \nWill a go get now upgrade godep?\n. Example output thus far\n```\n[luke:/Users/ \u2026 /go/src/github.com/awsmsrc/godep] feature/outdated_command 1 \u00b1 godep outdated\ncd /Users/luke/go/src/golang.org/x/tools/go/vcs; git diff 1cdaff4a02c554c9fb39dda0b56241c5f0949d91\nfatal: bad object 1cdaff4a02c554c9fb39dda0b56241c5f0949d91\ngithub.com/kr/pretty\ngithub.com/kr/text\ngithub.com/pmezard/go-difflib/difflib\ngolang.org/x/tools/go/vcs\n[luke:/Users/ \u2026 /go/src/github.com/awsmsrc/godep] feature/outdated_command \u00b1 godep outdated github.com/kr/pretty\ngodep: commit e6ac2fc51e89a3249e82157fa0bb7a18ef9dd5bb\nAuthor: Marc-Antoine Ruel maruel@chromium.org\nDate:   Wed May 20 12:35:14 2015 -0400\nRun 'gofmt -w -s' on sources\n\ncommit cb0850c1681cbca3233e84f7e6ec3e4c3f352085\nMerge: f31442d e559492\nAuthor: Cameron Walters (cee-dub) cameron.walters@gmail.com\nDate:   Mon Jan 19 14:12:28 2015 -0800\nMerge pull request #20 from gpaul/master\n\nkr/pretty: fix invalid heap pointer bug in tests.\n\ncommit e5594928ca7b4d4dca5a99c8f388065f1a03a4db\nAuthor: Gustav Paul gustav.paul@gmail.com\nDate:   Mon Jan 19 10:11:27 2015 +0000\nkr/pretty: fix invalid heap pointer bug.\n\nThis fixes an issue with uintptr(1) being an invalid pointer.\nThe test crashed when running with\ngo test -cpu=4,4,4,4,4,4,4,4,4,4,4,4,4 github.com/kr/pretty\n\n[luke:/Users/ \u2026 /go/src/github.com/awsmsrc/godep] feature/outdated_command \u00b1\n```\n. The purpose is so that you can not only see what packages are outdated but by how much and more importantly what changed and why.\nFor example I don't need to update my package for some refactoring and typo fixes but if there are some security or performance patches then it is worth my time.\nI'm working on some automated tooling that keeps track of dependencies and let's me know how outdated my dependencies are. This would allow me to create a report that was emailed to me on a weekly basis.\nThis was just an idea and I totally understand if you don't like it, which is why I didn't go too crazy with a polished implementation. I do believe this extra information is valuable to developers, especially in conjunction with automated tooling. There are some ui things to consider as well as there could be 1000s of commits, perhaps we could show tags as well\n. So how do you suggest we move forward from here?\n. Works for me! My cat sat on my laptop and broke the screen (no seriously). So I'm out of action for a day or so whilst it gets repaired. Happy to work on this later or someone else can take what I did and take it a bit further\n. ",
    "qinguoan": "Hi freeformz ,\nThanks for your fast reply. I just clone the kubernetes project. My Godep.json below:\n{\n    \"ImportPath\": \"vulcan/kubernetes\",\n    \"GoVersion\": \"go1.4.2\",\n    \"Packages\": [\n        \"./...\"\n    ],\n    \"Deps\": [\n        {\n            \"ImportPath\": \"bitbucket.org/ww/goautoneg\",\n            \"Comment\": \"null-5\",\n            \"Rev\": \"75cd24fc2f2c2a2088577d12123ddee5f54e0675\"\n        },\n        {\n            \"ImportPath\": \"code.google.com/p/gcfg\",\n            \"Rev\": \"c2d3050044d05357eaf6c3547249ba57c5e235cb\"\n        },\n        {\n            \"ImportPath\": \"code.google.com/p/go-uuid/uuid\",\n            \"Comment\": \"null-12\",\n            \"Rev\": \"7dda39b2e7d5e265014674c5af696ba4186679e9\"\n        },\n        {\n            \"ImportPath\": \"code.google.com/p/google-api-go-client/compute/v1\",\n            \"Comment\": \"release-96\",\n            \"Rev\": \"98c78185197025f935947caac56a7b6d022f89d2\"\n        },\n        {\n            \"ImportPath\": \"code.google.com/p/google-api-go-client/container/v1beta1\",\n            \"Comment\": \"release-105\",\n            \"Rev\": \"98c78185197025f935947caac56a7b6d022f89d2\"\n        },\n        {\n            \"ImportPath\": \"code.google.com/p/google-api-go-client/googleapi\",\n            \"Comment\": \"release-96\",\n            \"Rev\": \"98c78185197025f935947caac56a7b6d022f89d2\"\n        },\n        {\n            \"ImportPath\": \"github.com/Sirupsen/logrus\",\n            \"Comment\": \"v0.6.2-10-g51fe59a\",\n            \"Rev\": \"51fe59aca108dc5680109e7b2051cbdcfa5a253c\"\n        },\n        {\n            \"ImportPath\": \"github.com/abbot/go-http-auth\",\n            \"Rev\": \"c0ef4539dfab4d21c8ef20ba2924f9fc6f186d35\"\n        },\n        {\n            \"ImportPath\": \"github.com/appc/spec/schema\",\n            \"Comment\": \"v0.5.1-55-g87808a3\",\n            \"Rev\": \"87808a37061a4a2e6204ccea5fd2fc930576db94\"\n        },\n        {\n            \"ImportPath\": \"github.com/aws/aws-sdk-go/aws\",\n            \"Comment\": \"v0.6.0-7-gcea3a42\",\n            \"Rev\": \"cea3a425fc2d887d102e406ec2f8b37a57abd82f\"\n        },\n        {\n            \"ImportPath\": \"github.com/aws/aws-sdk-go/internal/apierr\",\n            \"Comment\": \"v0.6.0-7-gcea3a42\",\n            \"Rev\": \"cea3a425fc2d887d102e406ec2f8b37a57abd82f\"\n},\n                {\n                        \"ImportPath\": \"github.com/aws/aws-sdk-go/internal/endpoints\",\n                        \"Comment\": \"v0.6.0-7-gcea3a42\",\n                        \"Rev\": \"cea3a425fc2d887d102e406ec2f8b37a57abd82f\"\n                },\n                {\n                        \"ImportPath\": \"github.com/aws/aws-sdk-go/internal/protocol/ec2query\",\n                        \"Comment\": \"v0.6.0-7-gcea3a42\",\n                        \"Rev\": \"cea3a425fc2d887d102e406ec2f8b37a57abd82f\"\n                },\n                {\n                        \"ImportPath\": \"github.com/aws/aws-sdk-go/internal/protocol/query\",\n                        \"Comment\": \"v0.6.0-7-gcea3a42\",\n                        \"Rev\": \"cea3a425fc2d887d102e406ec2f8b37a57abd82f\"\n                },\n                {\n                        \"ImportPath\": \"github.com/aws/aws-sdk-go/internal/protocol/rest\",\n                        \"Comment\": \"v0.6.0-7-gcea3a42\",\n                        \"Rev\": \"cea3a425fc2d887d102e406ec2f8b37a57abd82f\"\n                },\n                {\n                        \"ImportPath\": \"github.com/aws/aws-sdk-go/internal/protocol/xml/xmlutil\",\n                        \"Comment\": \"v0.6.0-7-gcea3a42\",\n                        \"Rev\": \"cea3a425fc2d887d102e406ec2f8b37a57abd82f\"\n                },\n                {\n                        \"ImportPath\": \"github.com/aws/aws-sdk-go/internal/signer/v4\",\n                        \"Comment\": \"v0.6.0-7-gcea3a42\",\n                        \"Rev\": \"cea3a425fc2d887d102e406ec2f8b37a57abd82f\"\n                },\n                {\n                        \"ImportPath\": \"github.com/aws/aws-sdk-go/service/autoscaling\",\n                        \"Comment\": \"v0.6.0-7-gcea3a42\",\n                        \"Rev\": \"cea3a425fc2d887d102e406ec2f8b37a57abd82f\"\n                },\n                {\n                        \"ImportPath\": \"github.com/aws/aws-sdk-go/service/ec2\",\n                        \"Comment\": \"v0.6.0-7-gcea3a42\",\n                        \"Rev\": \"cea3a425fc2d887d102e406ec2f8b37a57abd82f\"\n                },\n                {\n                        \"ImportPath\": \"github.com/aws/aws-sdk-go/service/elb\",\n                        \"Comment\": \"v0.6.0-7-gcea3a42\",\n                        \"Rev\": \"cea3a425fc2d887d102e406ec2f8b37a57abd82f\"\n                },\n                {\n                        \"ImportPath\": \"github.com/beorn7/perks/quantile\",\n                        \"Rev\": \"b965b613227fddccbfffe13eae360ed3fa822f8d\"\n                },\n                {\n                        \"ImportPath\": \"github.com/codegangsta/negroni\",\n                        \"Comment\": \"v0.1-62-g8d75e11\",\n                        \"Rev\": \"8d75e11374a1928608c906fe745b538483e7aeb2\"\n                },\n                {\n                        \"ImportPath\": \"github.com/coreos/go-etcd/etcd\",\n                        \"Rev\": \"2038b5942e8e7f4f244729ff9353afab8ba11afc\"\n                },\n                {\n                        \"ImportPath\": \"github.com/coreos/go-semver/semver\",\n        \"Rev\": \"6fe83ccda8fb9b7549c9ab4ba47f47858bc950aa\"\n                },\n                {\n                        \"ImportPath\": \"github.com/coreos/go-systemd/daemon\",\n                        \"Comment\": \"v2-27-g97e243d\",\n                        \"Rev\": \"97e243d21a8e232e9d8af38ba2366dfcfceebeba\"\n                },\n                {\n                        \"ImportPath\": \"github.com/coreos/go-systemd/dbus\",\n                        \"Comment\": \"v2-27-g97e243d\",\n                        \"Rev\": \"97e243d21a8e232e9d8af38ba2366dfcfceebeba\"\n                },\n                {\n                        \"ImportPath\": \"github.com/coreos/go-systemd/unit\",\n                        \"Comment\": \"v2-27-g97e243d\",\n                        \"Rev\": \"97e243d21a8e232e9d8af38ba2366dfcfceebeba\"\n                },\n                {\n                        \"ImportPath\": \"github.com/cpuguy83/go-md2man\",\n                        \"Comment\": \"v1.0.2-5-g2831f11\",\n                        \"Rev\": \"2831f11f66ff4008f10e2cd7ed9a85e3d3fc2bed\"\n                },\n                {\n                        \"ImportPath\": \"github.com/davecgh/go-spew/spew\",\n                        \"Rev\": \"3e6e67c4dcea3ac2f25fd4731abc0e1deaf36216\"\n                },\n                {\n                        \"ImportPath\": \"github.com/daviddengcn/go-colortext\",\n                        \"Rev\": \"b5c0891944c2f150ccc9d02aecf51b76c14c2948\"\n                },\n                {\n                        \"ImportPath\": \"github.com/dgrijalva/jwt-go\",\n                        \"Comment\": \"v2.2.0-23-g5ca8014\",\n                        \"Rev\": \"5ca80149b9d3f8b863af0e2bb6742e608603bd99\"\n                },\n                {\n                        \"ImportPath\": \"github.com/docker/docker/pkg/jsonmessage\",\n                        \"Comment\": \"v1.4.1-4045-g2b27fe1\",\n                        \"Rev\": \"2b27fe17a1b3fb8472fde96d768fa70996adf201\"\n                },\n                {\n                        \"ImportPath\": \"github.com/docker/docker/pkg/mount\",\n                        \"Comment\": \"v1.4.1-4045-g2b27fe1\",\n                        \"Rev\": \"2b27fe17a1b3fb8472fde96d768fa70996adf201\"\n                },\n                {\n                        \"ImportPath\": \"github.com/docker/docker/pkg/parsers\",\n                        \"Comment\": \"v1.4.1-4045-g2b27fe1\",\n                        \"Rev\": \"2b27fe17a1b3fb8472fde96d768fa70996adf201\"\n                },\n                {\n                        \"ImportPath\": \"github.com/docker/docker/pkg/term\",\n                        \"Comment\": \"v1.4.1-4045-g2b27fe1\",\n                        \"Rev\": \"2b27fe17a1b3fb8472fde96d768fa70996adf201\"\n                },\n                {\n                        \"ImportPath\": \"github.com/docker/docker/pkg/timeutils\",\n                        \"Comment\": \"v1.4.1-4045-g2b27fe1\",\n                        \"Rev\": \"2b27fe17a1b3fb8472fde96d768fa70996adf201\"\n                },\n                {\n                        \"ImportPath\": \"github.com/docker/docker/pkg/units\",\n                        \"Comment\": \"v1.4.1-4045-g2b27fe1\",\n                        \"Rev\": \"2b27fe17a1b3fb8472fde96d768fa70996adf201\"\n                },\n                {\n                        \"ImportPath\": \"github.com/docker/libcontainer\",\n                        \"Comment\": \"v1.4.0-446-gae812bd\",\n                        \"Rev\": \"ae812bdca78084dc322037225d170e1883521d87\"\n                },\n                {\n                        \"ImportPath\": \"github.com/docker/spdystream\",\n                        \"Rev\": \"83ae67e694a4ab5cbaee4d3126f25118712b26e6\"\n                },\n                {\n                        \"ImportPath\": \"github.com/elazarl/go-bindata-assetfs\",\n                        \"Rev\": \"ae4665cf2d188c65764c73fe4af5378acc549510\"\n                },\n                {\n                        \"ImportPath\": \"github.com/emicklei/go-restful\",\n                        \"Comment\": \"v1.1.3-54-gbdfb7d4\",\n                        \"Rev\": \"bdfb7d41639a84ea7c36df648e5865cd9fbf21e2\"\n                },\n                {\n                        \"ImportPath\": \"github.com/evanphx/json-patch\",\n                        \"Rev\": \"7dd4489c2eb6073e5a9d7746c3274c5b5f0387df\"\n                },\n                {\n                        \"ImportPath\": \"github.com/fsouza/go-dockerclient\",\n                        \"Comment\": \"0.2.1-532-g2f1ad24\",\n                        \"Rev\": \"2f1ad24900b2777139b5becee93eb63a75b00617\"\n                },\n                {\n                        \"ImportPath\": \"github.com/garyburd/redigo/internal\",\n                        \"Rev\": \"535138d7bcd717d6531c701ef5933d98b1866257\"\n                },\n                {\n                        \"ImportPath\": \"github.com/garyburd/redigo/redis\",\n                        \"Rev\": \"535138d7bcd717d6531c701ef5933d98b1866257\"\n                },\n                {\n                        \"ImportPath\": \"github.com/ghodss/yaml\",\n                        \"Rev\": \"588cb435e59ee8b6c2795482887755841ad67207\"\n                },\n                {\n                        \"ImportPath\": \"github.com/godbus/dbus\",\n                        \"Comment\": \"0-7-g939230d\",\n                        \"Rev\": \"939230d2086a4f1870e04c52e0a376c25bae0ec4\"\n                },\n                {\n                        \"ImportPath\": \"github.com/gogo/protobuf/proto\",\n                        \"Rev\": \"ab6cea4a44ef42b748cd88d2d372047b75806e0c\"\n                },\n                {\n                        \"ImportPath\": \"github.com/golang/glog\",\n                        \"Rev\": \"44145f04b68cf362d9c4df2182967c2275eaefed\"\n                },\n                {\n                        \"ImportPath\": \"github.com/golang/groupcache/lru\",\n                        \"Rev\": \"604ed5785183e59ae2789449d89e73f3a2a77987\"\n                },\n                {\n                        \"ImportPath\": \"github.com/golang/protobuf/proto\",\n                        \"Rev\": \"7f07925444bb51fa4cf9dfe6f7661876f8852275\"\n                },\n                {\n                        \"ImportPath\": \"github.com/google/cadvisor/api\",\n                        \"Comment\": \"0.15.1\",\n                        \"Rev\": \"ec588def40e1bb59f28f5a293b279f6762d13d44\"\n                },\n                {\n                        \"ImportPath\": \"github.com/google/cadvisor/cache/memory\",\n                        \"Comment\": \"0.15.1\",\n                        \"Rev\": \"ec588def40e1bb59f28f5a293b279f6762d13d44\"\n                },\n                {\n                        \"ImportPath\": \"github.com/google/cadvisor/collector\",\n                        \"Comment\": \"0.15.1\",\n                        \"Rev\": \"ec588def40e1bb59f28f5a293b279f6762d13d44\"\n                },\n                {\n                        \"ImportPath\": \"github.com/google/cadvisor/container\",\n                        \"Comment\": \"0.15.1\",\n                        \"Rev\": \"ec588def40e1bb59f28f5a293b279f6762d13d44\"\n                },\n                {\n                        \"ImportPath\": \"github.com/google/cadvisor/events\",\n                        \"Comment\": \"0.15.1\",\n                        \"Rev\": \"ec588def40e1bb59f28f5a293b279f6762d13d44\"\n                },\n                {\n                        \"ImportPath\": \"github.com/google/cadvisor/fs\",\n                        \"Comment\": \"0.15.1\",\n                        \"Rev\": \"ec588def40e1bb59f28f5a293b279f6762d13d44\"\n                },\n                {\n                        \"ImportPath\": \"github.com/google/cadvisor/healthz\",\n                        \"Comment\": \"0.15.1\",\n                        \"Rev\": \"ec588def40e1bb59f28f5a293b279f6762d13d44\"\n                },\n                {\n                        \"ImportPath\": \"github.com/google/cadvisor/http\",\n                        \"Comment\": \"0.15.1\",\n                        \"Rev\": \"ec588def40e1bb59f28f5a293b279f6762d13d44\"\n                },\n                {\n                        \"ImportPath\": \"github.com/google/cadvisor/info/v1\",\n                        \"Comment\": \"0.15.1\",\n                        \"Rev\": \"ec588def40e1bb59f28f5a293b279f6762d13d44\"\n                },\n                {\n                        \"ImportPath\": \"github.com/google/cadvisor/info/v2\",\n                        \"Comment\": \"0.15.1\",\n                        \"Rev\": \"ec588def40e1bb59f28f5a293b279f6762d13d44\"\n                },\n                {\n                        \"ImportPath\": \"github.com/google/cadvisor/manager\",\n                        \"Comment\": \"0.15.1\",\n                        \"Rev\": \"ec588def40e1bb59f28f5a293b279f6762d13d44\"\n                },\n                {\n                        \"ImportPath\": \"github.com/google/cadvisor/metrics\",\n                        \"Comment\": \"0.15.1\",\n                        \"Rev\": \"ec588def40e1bb59f28f5a293b279f6762d13d44\"\n                },\n                {\n                        \"ImportPath\": \"github.com/google/cadvisor/pages\",\n                        \"Comment\": \"0.15.1\",\n                        \"Rev\": \"ec588def40e1bb59f28f5a293b279f6762d13d44\"\n                },\n                {\n                        \"ImportPath\": \"github.com/google/cadvisor/storage\",\n                        \"Comment\": \"0.15.1\",\n                        \"Rev\": \"ec588def40e1bb59f28f5a293b279f6762d13d44\"\n                },\n                {\n                        \"ImportPath\": \"github.com/google/cadvisor/summary\",\n                        \"Comment\": \"0.15.1\",\n                        \"Rev\": \"ec588def40e1bb59f28f5a293b279f6762d13d44\"\n                },\n                {\n                        \"ImportPath\": \"github.com/google/cadvisor/utils\",\n                        \"Comment\": \"0.15.1\",\n                        \"Rev\": \"ec588def40e1bb59f28f5a293b279f6762d13d44\"\n                },\n                {\n                        \"ImportPath\": \"github.com/google/cadvisor/validate\",\n                        \"Comment\": \"0.15.1\",\n                        \"Rev\": \"ec588def40e1bb59f28f5a293b279f6762d13d44\"\n                },\n                {\n                        \"ImportPath\": \"github.com/google/cadvisor/version\",\n                        \"Comment\": \"0.15.1\",\n                        \"Rev\": \"ec588def40e1bb59f28f5a293b279f6762d13d44\"\n                },\n                {\n                        \"ImportPath\": \"github.com/google/go-github/github\",\n                        \"Rev\": \"930e6fdb8dc2b11458fdeb55b3cd68e5370a1a28\"\n                },\n                {\n                        \"ImportPath\": \"github.com/google/go-querystring/query\",\n                        \"Rev\": \"547ef5ac979778feb2f760cdb5f4eae1a2207b86\"\n                },\n                {\n                        \"ImportPath\": \"github.com/google/gofuzz\",\n                        \"Rev\": \"bbcb9da2d746f8bdbd6a936686a0a6067ada0ec5\"\n                },\n                {\n                        \"ImportPath\": \"github.com/gorilla/context\",\n                        \"Rev\": \"215affda49addc4c8ef7e2534915df2c8c35c6cd\"\n                },\n                {\n                        \"ImportPath\": \"github.com/gorilla/mux\",\n                        \"Rev\": \"8096f47503459bcc74d1f4c487b7e6e42e5746b5\"\n                },\n                {\n                        \"ImportPath\": \"github.com/imdario/mergo\",\n                        \"Comment\": \"0.1.3-8-g6633656\",\n                        \"Rev\": \"6633656539c1639d9d78127b7d47c622b5d7b6dc\"\n                },\n                {\n                        \"ImportPath\": \"github.com/inconshreveable/mousetrap\",\n                        \"Rev\": \"76626ae9c91c4f2a10f34cad8ce83ea42c93bb75\"\n                },\n                {\n                        \"ImportPath\": \"github.com/influxdb/influxdb/client\",\n                        \"Comment\": \"v0.8.8\",\n                        \"Rev\": \"afde71eb1740fd763ab9450e1f700ba0e53c36d0\"\n                },\n                {\n                        \"ImportPath\": \"github.com/juju/ratelimit\",\n                        \"Rev\": \"772f5c38e468398c4511514f4f6aa9a4185bc0a0\"\n                },\n                {\n                        \"ImportPath\": \"github.com/kardianos/osext\",\n                        \"Rev\": \"8fef92e41e22a70e700a96b29f066cda30ea24ef\"\n                },\n                {\n                        \"ImportPath\": \"github.com/kr/pty\",\n                        \"Comment\": \"release.r56-25-g05017fc\",\n                        \"Rev\": \"05017fcccf23c823bfdea560dcc958a136e54fb7\"\n                },\n                {\n                        \"ImportPath\": \"github.com/matttproud/golang_protobuf_extensions/pbutil\",\n                        \"Rev\": \"fc2b8d3a73c4867e51861bbdd5ae3c1f0869dd6a\"\n                },\n                {\n                        \"ImportPath\": \"github.com/mesos/mesos-go/auth\",\n                        \"Rev\": \"6440c09c9d8a1b365f3c3e9b2297dd856abd017c\"\n                },\n                {\n                        \"ImportPath\": \"github.com/mesos/mesos-go/detector\",\n                        \"Rev\": \"4b1767c0dfc51020e01f35da5b38472f40ce572a\"\n                },\n                {\n                        \"ImportPath\": \"github.com/mesos/mesos-go/executor\",\n                        \"Rev\": \"4b1767c0dfc51020e01f35da5b38472f40ce572a\"\n                },\n                {\n                        \"ImportPath\": \"github.com/mesos/mesos-go/mesosproto\",\n                        \"Rev\": \"4b1767c0dfc51020e01f35da5b38472f40ce572a\"\n                },\n                {\n                        \"ImportPath\": \"github.com/mesos/mesos-go/mesosutil\",\n                        \"Rev\": \"4b1767c0dfc51020e01f35da5b38472f40ce572a\"\n                },\n                {\n                        \"ImportPath\": \"github.com/mesos/mesos-go/messenger\",\n                        \"Rev\": \"4b1767c0dfc51020e01f35da5b38472f40ce572a\"\n                },\n                {\n                        \"ImportPath\": \"github.com/mesos/mesos-go/scheduler\",\n                        \"Rev\": \"4b1767c0dfc51020e01f35da5b38472f40ce572a\"\n                },\n                {\n                        \"ImportPath\": \"github.com/mesos/mesos-go/upid\",\n                        \"Rev\": \"4b1767c0dfc51020e01f35da5b38472f40ce572a\"\n                },\n                {\n                        \"ImportPath\": \"github.com/miekg/dns\",\n                        \"Rev\": \"3f504e8dabd5d562e997d19ce0200aa41973e1b2\"\n                },\n                {\n                        \"ImportPath\": \"github.com/mitchellh/mapstructure\",\n                        \"Rev\": \"740c764bc6149d3f1806231418adb9f52c11bcbf\"\n                },\n                {\n                        \"ImportPath\": \"github.com/onsi/ginkgo\",\n                        \"Comment\": \"v1.2.0-6-gd981d36\",\n                        \"Rev\": \"d981d36e9884231afa909627b9c275e4ba678f90\"\n                },\n                {\n                        \"ImportPath\": \"github.com/onsi/gomega\",\n                        \"Comment\": \"v1.0-28-g8adf9e1730c5\",\n                        \"Rev\": \"8adf9e1730c55cdc590de7d49766cb2acc88d8f2\"\n                },\n                {\n                        \"ImportPath\": \"github.com/prometheus/client_golang/model\",\n                        \"Comment\": \"0.4.0-1-g692492e\",\n                        \"Rev\": \"692492e54b553a81013254cc1fba4b6dd76fad30\"\n                },\n                {\n                        \"ImportPath\": \"github.com/prometheus/client_golang/prometheus\",\n                        \"Comment\": \"0.4.0-1-g692492e\",\n                        \"Rev\": \"692492e54b553a81013254cc1fba4b6dd76fad30\"\n                },\n                {\n                        \"ImportPath\": \"github.com/prometheus/client_golang/text\",\n                        \"Comment\": \"0.4.0-1-g692492e\",\n                        \"Rev\": \"692492e54b553a81013254cc1fba4b6dd76fad30\"\n                },\n                {\n                        \"ImportPath\": \"github.com/prometheus/client_model/go\",\n                        \"Comment\": \"model-0.0.2-12-gfa8ad6f\",\n                        \"Rev\": \"fa8ad6fec33561be4280a8f0514318c79d7f6cb6\"\n                },\n                {\n                        \"ImportPath\": \"github.com/prometheus/procfs\",\n                        \"Rev\": \"490cc6eb5fa45bf8a8b7b73c8bc82a8160e8531d\"\n                },\n                {\n                        \"ImportPath\": \"github.com/rackspace/gophercloud\",\n                        \"Comment\": \"v1.0.0-569-gf3ced00\",\n                        \"Rev\": \"f3ced00552c1c7d4a6184500af9062cfb4ff4463\"\n                },\n                {\n                        \"ImportPath\": \"github.com/russross/blackfriday\",\n                        \"Comment\": \"v1.2-42-g77efab5\",\n                        \"Rev\": \"77efab57b2f74dd3f9051c79752b2e8995c8b789\"\n                },\n                {\n                        \"ImportPath\": \"github.com/samuel/go-zookeeper/zk\",\n                        \"Rev\": \"d0e0d8e11f318e000a8cc434616d69e329edc374\"\n                },\n                {\n                        \"ImportPath\": \"github.com/shurcooL/sanitized_anchor_name\",\n                        \"Rev\": \"9a8b7d4e8f347bfa230879db9d7d4e4d9e19f962\"\n                },\n                {\n                        \"ImportPath\": \"github.com/skynetservices/skydns/msg\",\n                        \"Comment\": \"2.5.1a\",\n                        \"Rev\": \"1be70b5b8aa07acccd972146d84011b670af88b4\"\n                },\n                {\n                        \"ImportPath\": \"github.com/spf13/cobra\",\n                        \"Rev\": \"8f5946caaeeff40a98d67f60c25e89c3525038a3\"\n                },\n                {\n                        \"ImportPath\": \"github.com/spf13/pflag\",\n                        \"Rev\": \"b91b2a94780f4e6b4d3b0c12fd9b5f4b05b1aa45\"\n                },\n                {\n                        \"ImportPath\": \"github.com/stretchr/objx\",\n                        \"Rev\": \"d40df0cc104c06eae2dfe03d7dddb83802d52f9a\"\n                },\n                {\n                        \"ImportPath\": \"github.com/stretchr/testify/assert\",\n                        \"Rev\": \"7e4a149930b09fe4c2b134c50ce637457ba6e966\"\n                },\n                {\n                        \"ImportPath\": \"github.com/stretchr/testify/mock\",\n                        \"Rev\": \"7e4a149930b09fe4c2b134c50ce637457ba6e966\"\n                },\n                {\n                        \"ImportPath\": \"github.com/stretchr/testify/require\",\n                        \"Rev\": \"7e4a149930b09fe4c2b134c50ce637457ba6e966\"\n                },\n                {\n                        \"ImportPath\": \"github.com/syndtr/gocapability/capability\",\n                        \"Rev\": \"3c85049eaeb429febe7788d9c7aac42322a377fe\"\n                },\n                {\n                        \"ImportPath\": \"github.com/ugorji/go/codec\",\n                        \"Rev\": \"8a2a3a8c488c3ebd98f422a965260278267a0551\"\n                },\n                {\n                        \"ImportPath\": \"github.com/vaughan0/go-ini\",\n                        \"Rev\": \"a98ad7ee00ec53921f08832bc06ecf7fd600e6a1\"\n                },\n                {\n                        \"ImportPath\": \"github.com/xyproto/simpleredis\",\n                        \"Comment\": \"v1.0-13-g5292687\",\n                        \"Rev\": \"5292687f5379e01054407da44d7c4590a61fd3de\"\n                },\n                {\n                        \"ImportPath\": \"golang.org/x/crypto/ssh\",\n                        \"Rev\": \"c84e1f8e3a7e322d497cd16c0e8a13c7e127baf3\"\n                },\n                {\n                        \"ImportPath\": \"golang.org/x/exp/inotify\",\n                        \"Rev\": \"d00e13ec443927751b2bd49e97dea7bf3b6a6487\"\n                },\n                {\n                        \"ImportPath\": \"golang.org/x/net/context\",\n                        \"Rev\": \"cbcac7bb8415db9b6cb4d1ebab1dc9afbd688b97\"\n                },\n                {\n                        \"ImportPath\": \"golang.org/x/net/html\",\n                        \"Rev\": \"cbcac7bb8415db9b6cb4d1ebab1dc9afbd688b97\"\n                },\n                {\n                        \"ImportPath\": \"golang.org/x/net/spdy\",\n                        \"Comment\": \"deleted-upstream\",\n                        \"Rev\": \"d175081df37eff8cda13f478bc11a0a65b39958b\"\n                },\n                {\n                        \"ImportPath\": \"golang.org/x/net/websocket\",\n                },\n                {\n                        \"ImportPath\": \"github.com/ugorji/go/codec\",\n                        \"Rev\": \"8a2a3a8c488c3ebd98f422a965260278267a0551\"\n                },\n                {\n                        \"ImportPath\": \"github.com/vaughan0/go-ini\",\n                        \"Rev\": \"a98ad7ee00ec53921f08832bc06ecf7fd600e6a1\"\n                },\n                {\n                        \"ImportPath\": \"github.com/xyproto/simpleredis\",\n                        \"Comment\": \"v1.0-13-g5292687\",\n                        \"Rev\": \"5292687f5379e01054407da44d7c4590a61fd3de\"\n                },\n                {\n                        \"ImportPath\": \"golang.org/x/crypto/ssh\",\n                        \"Rev\": \"c84e1f8e3a7e322d497cd16c0e8a13c7e127baf3\"\n                },\n                {\n                        \"ImportPath\": \"golang.org/x/exp/inotify\",\n                        \"Rev\": \"d00e13ec443927751b2bd49e97dea7bf3b6a6487\"\n                },\n                {\n                        \"ImportPath\": \"golang.org/x/net/context\",\n                        \"Rev\": \"cbcac7bb8415db9b6cb4d1ebab1dc9afbd688b97\"\n                },\n                {\n                        \"ImportPath\": \"golang.org/x/net/html\",\n                        \"Rev\": \"cbcac7bb8415db9b6cb4d1ebab1dc9afbd688b97\"\n                },\n                {\n                        \"ImportPath\": \"golang.org/x/net/spdy\",\n                        \"Comment\": \"deleted-upstream\",\n                        \"Rev\": \"d175081df37eff8cda13f478bc11a0a65b39958b\"\n                },\n                {\n                        \"ImportPath\": \"golang.org/x/net/websocket\",\n                        \"Rev\": \"cbcac7bb8415db9b6cb4d1ebab1dc9afbd688b97\"\n                },\n                {\n                        \"ImportPath\": \"golang.org/x/oauth2\",\n                        \"Rev\": \"b5adcc2dcdf009d0391547edc6ecbaff889f5bb9\"\n                },\n                {\n                        \"ImportPath\": \"google.golang.org/cloud/compute/metadata\",\n                        \"Rev\": \"2e43671e4ad874a7bca65746ff3edb38e6e93762\"\n                },\n                {\n                        \"ImportPath\": \"google.golang.org/cloud/internal\",\n                        \"Rev\": \"2e43671e4ad874a7bca65746ff3edb38e6e93762\"\n                },\n                {\n                        \"ImportPath\": \"gopkg.in/yaml.v2\",\n                        \"Rev\": \"d466437aa4adc35830964cffc5b5f262c63ddcb4\"\n                },\n                {\n                        \"ImportPath\": \"speter.net/go/exp/math/dec/inf\",\n                        \"Rev\": \"42ca6cd68aa922bc3f32f1e056e61b65945d9ad7\"\n                }\n        ]\n}\n. Sorry I forgot to add my errors. \nActually there is no obvious error occurred unless some project moved or delete some folder, it shows \"cannot find package in any of GOROOT GOPATH\", for me they are:\ngithub.com/prometheus/client_golang/model \ngithub.com/prometheus/client_golang/text\ngithub.com/aws/aws-sdk-go/internal/apierr\nall above projects deleted some folders between old and current versions.\n. I got, many thanks !! \ud83d\ude03\n. Hi freeformz ,\nThanks for your fast reply. I just clone the kubernetes project. My Godep.json below:\n{\n    \"ImportPath\": \"vulcan/kubernetes\",\n    \"GoVersion\": \"go1.4.2\",\n    \"Packages\": [\n        \"./...\"\n    ],\n    \"Deps\": [\n        {\n            \"ImportPath\": \"bitbucket.org/ww/goautoneg\",\n            \"Comment\": \"null-5\",\n            \"Rev\": \"75cd24fc2f2c2a2088577d12123ddee5f54e0675\"\n        },\n        {\n            \"ImportPath\": \"code.google.com/p/gcfg\",\n            \"Rev\": \"c2d3050044d05357eaf6c3547249ba57c5e235cb\"\n        },\n        {\n            \"ImportPath\": \"code.google.com/p/go-uuid/uuid\",\n            \"Comment\": \"null-12\",\n            \"Rev\": \"7dda39b2e7d5e265014674c5af696ba4186679e9\"\n        },\n        {\n            \"ImportPath\": \"code.google.com/p/google-api-go-client/compute/v1\",\n            \"Comment\": \"release-96\",\n            \"Rev\": \"98c78185197025f935947caac56a7b6d022f89d2\"\n        },\n        {\n            \"ImportPath\": \"code.google.com/p/google-api-go-client/container/v1beta1\",\n            \"Comment\": \"release-105\",\n            \"Rev\": \"98c78185197025f935947caac56a7b6d022f89d2\"\n        },\n        {\n            \"ImportPath\": \"code.google.com/p/google-api-go-client/googleapi\",\n            \"Comment\": \"release-96\",\n            \"Rev\": \"98c78185197025f935947caac56a7b6d022f89d2\"\n        },\n        {\n            \"ImportPath\": \"github.com/Sirupsen/logrus\",\n            \"Comment\": \"v0.6.2-10-g51fe59a\",\n            \"Rev\": \"51fe59aca108dc5680109e7b2051cbdcfa5a253c\"\n        },\n        {\n            \"ImportPath\": \"github.com/abbot/go-http-auth\",\n            \"Rev\": \"c0ef4539dfab4d21c8ef20ba2924f9fc6f186d35\"\n        },\n        {\n            \"ImportPath\": \"github.com/appc/spec/schema\",\n            \"Comment\": \"v0.5.1-55-g87808a3\",\n            \"Rev\": \"87808a37061a4a2e6204ccea5fd2fc930576db94\"\n        },\n        {\n            \"ImportPath\": \"github.com/aws/aws-sdk-go/aws\",\n            \"Comment\": \"v0.6.0-7-gcea3a42\",\n            \"Rev\": \"cea3a425fc2d887d102e406ec2f8b37a57abd82f\"\n        },\n        {\n            \"ImportPath\": \"github.com/aws/aws-sdk-go/internal/apierr\",\n            \"Comment\": \"v0.6.0-7-gcea3a42\",\n            \"Rev\": \"cea3a425fc2d887d102e406ec2f8b37a57abd82f\"\n},\n                {\n                        \"ImportPath\": \"github.com/aws/aws-sdk-go/internal/endpoints\",\n                        \"Comment\": \"v0.6.0-7-gcea3a42\",\n                        \"Rev\": \"cea3a425fc2d887d102e406ec2f8b37a57abd82f\"\n                },\n                {\n                        \"ImportPath\": \"github.com/aws/aws-sdk-go/internal/protocol/ec2query\",\n                        \"Comment\": \"v0.6.0-7-gcea3a42\",\n                        \"Rev\": \"cea3a425fc2d887d102e406ec2f8b37a57abd82f\"\n                },\n                {\n                        \"ImportPath\": \"github.com/aws/aws-sdk-go/internal/protocol/query\",\n                        \"Comment\": \"v0.6.0-7-gcea3a42\",\n                        \"Rev\": \"cea3a425fc2d887d102e406ec2f8b37a57abd82f\"\n                },\n                {\n                        \"ImportPath\": \"github.com/aws/aws-sdk-go/internal/protocol/rest\",\n                        \"Comment\": \"v0.6.0-7-gcea3a42\",\n                        \"Rev\": \"cea3a425fc2d887d102e406ec2f8b37a57abd82f\"\n                },\n                {\n                        \"ImportPath\": \"github.com/aws/aws-sdk-go/internal/protocol/xml/xmlutil\",\n                        \"Comment\": \"v0.6.0-7-gcea3a42\",\n                        \"Rev\": \"cea3a425fc2d887d102e406ec2f8b37a57abd82f\"\n                },\n                {\n                        \"ImportPath\": \"github.com/aws/aws-sdk-go/internal/signer/v4\",\n                        \"Comment\": \"v0.6.0-7-gcea3a42\",\n                        \"Rev\": \"cea3a425fc2d887d102e406ec2f8b37a57abd82f\"\n                },\n                {\n                        \"ImportPath\": \"github.com/aws/aws-sdk-go/service/autoscaling\",\n                        \"Comment\": \"v0.6.0-7-gcea3a42\",\n                        \"Rev\": \"cea3a425fc2d887d102e406ec2f8b37a57abd82f\"\n                },\n                {\n                        \"ImportPath\": \"github.com/aws/aws-sdk-go/service/ec2\",\n                        \"Comment\": \"v0.6.0-7-gcea3a42\",\n                        \"Rev\": \"cea3a425fc2d887d102e406ec2f8b37a57abd82f\"\n                },\n                {\n                        \"ImportPath\": \"github.com/aws/aws-sdk-go/service/elb\",\n                        \"Comment\": \"v0.6.0-7-gcea3a42\",\n                        \"Rev\": \"cea3a425fc2d887d102e406ec2f8b37a57abd82f\"\n                },\n                {\n                        \"ImportPath\": \"github.com/beorn7/perks/quantile\",\n                        \"Rev\": \"b965b613227fddccbfffe13eae360ed3fa822f8d\"\n                },\n                {\n                        \"ImportPath\": \"github.com/codegangsta/negroni\",\n                        \"Comment\": \"v0.1-62-g8d75e11\",\n                        \"Rev\": \"8d75e11374a1928608c906fe745b538483e7aeb2\"\n                },\n                {\n                        \"ImportPath\": \"github.com/coreos/go-etcd/etcd\",\n                        \"Rev\": \"2038b5942e8e7f4f244729ff9353afab8ba11afc\"\n                },\n                {\n                        \"ImportPath\": \"github.com/coreos/go-semver/semver\",\n        \"Rev\": \"6fe83ccda8fb9b7549c9ab4ba47f47858bc950aa\"\n                },\n                {\n                        \"ImportPath\": \"github.com/coreos/go-systemd/daemon\",\n                        \"Comment\": \"v2-27-g97e243d\",\n                        \"Rev\": \"97e243d21a8e232e9d8af38ba2366dfcfceebeba\"\n                },\n                {\n                        \"ImportPath\": \"github.com/coreos/go-systemd/dbus\",\n                        \"Comment\": \"v2-27-g97e243d\",\n                        \"Rev\": \"97e243d21a8e232e9d8af38ba2366dfcfceebeba\"\n                },\n                {\n                        \"ImportPath\": \"github.com/coreos/go-systemd/unit\",\n                        \"Comment\": \"v2-27-g97e243d\",\n                        \"Rev\": \"97e243d21a8e232e9d8af38ba2366dfcfceebeba\"\n                },\n                {\n                        \"ImportPath\": \"github.com/cpuguy83/go-md2man\",\n                        \"Comment\": \"v1.0.2-5-g2831f11\",\n                        \"Rev\": \"2831f11f66ff4008f10e2cd7ed9a85e3d3fc2bed\"\n                },\n                {\n                        \"ImportPath\": \"github.com/davecgh/go-spew/spew\",\n                        \"Rev\": \"3e6e67c4dcea3ac2f25fd4731abc0e1deaf36216\"\n                },\n                {\n                        \"ImportPath\": \"github.com/daviddengcn/go-colortext\",\n                        \"Rev\": \"b5c0891944c2f150ccc9d02aecf51b76c14c2948\"\n                },\n                {\n                        \"ImportPath\": \"github.com/dgrijalva/jwt-go\",\n                        \"Comment\": \"v2.2.0-23-g5ca8014\",\n                        \"Rev\": \"5ca80149b9d3f8b863af0e2bb6742e608603bd99\"\n                },\n                {\n                        \"ImportPath\": \"github.com/docker/docker/pkg/jsonmessage\",\n                        \"Comment\": \"v1.4.1-4045-g2b27fe1\",\n                        \"Rev\": \"2b27fe17a1b3fb8472fde96d768fa70996adf201\"\n                },\n                {\n                        \"ImportPath\": \"github.com/docker/docker/pkg/mount\",\n                        \"Comment\": \"v1.4.1-4045-g2b27fe1\",\n                        \"Rev\": \"2b27fe17a1b3fb8472fde96d768fa70996adf201\"\n                },\n                {\n                        \"ImportPath\": \"github.com/docker/docker/pkg/parsers\",\n                        \"Comment\": \"v1.4.1-4045-g2b27fe1\",\n                        \"Rev\": \"2b27fe17a1b3fb8472fde96d768fa70996adf201\"\n                },\n                {\n                        \"ImportPath\": \"github.com/docker/docker/pkg/term\",\n                        \"Comment\": \"v1.4.1-4045-g2b27fe1\",\n                        \"Rev\": \"2b27fe17a1b3fb8472fde96d768fa70996adf201\"\n                },\n                {\n                        \"ImportPath\": \"github.com/docker/docker/pkg/timeutils\",\n                        \"Comment\": \"v1.4.1-4045-g2b27fe1\",\n                        \"Rev\": \"2b27fe17a1b3fb8472fde96d768fa70996adf201\"\n                },\n                {\n                        \"ImportPath\": \"github.com/docker/docker/pkg/units\",\n                        \"Comment\": \"v1.4.1-4045-g2b27fe1\",\n                        \"Rev\": \"2b27fe17a1b3fb8472fde96d768fa70996adf201\"\n                },\n                {\n                        \"ImportPath\": \"github.com/docker/libcontainer\",\n                        \"Comment\": \"v1.4.0-446-gae812bd\",\n                        \"Rev\": \"ae812bdca78084dc322037225d170e1883521d87\"\n                },\n                {\n                        \"ImportPath\": \"github.com/docker/spdystream\",\n                        \"Rev\": \"83ae67e694a4ab5cbaee4d3126f25118712b26e6\"\n                },\n                {\n                        \"ImportPath\": \"github.com/elazarl/go-bindata-assetfs\",\n                        \"Rev\": \"ae4665cf2d188c65764c73fe4af5378acc549510\"\n                },\n                {\n                        \"ImportPath\": \"github.com/emicklei/go-restful\",\n                        \"Comment\": \"v1.1.3-54-gbdfb7d4\",\n                        \"Rev\": \"bdfb7d41639a84ea7c36df648e5865cd9fbf21e2\"\n                },\n                {\n                        \"ImportPath\": \"github.com/evanphx/json-patch\",\n                        \"Rev\": \"7dd4489c2eb6073e5a9d7746c3274c5b5f0387df\"\n                },\n                {\n                        \"ImportPath\": \"github.com/fsouza/go-dockerclient\",\n                        \"Comment\": \"0.2.1-532-g2f1ad24\",\n                        \"Rev\": \"2f1ad24900b2777139b5becee93eb63a75b00617\"\n                },\n                {\n                        \"ImportPath\": \"github.com/garyburd/redigo/internal\",\n                        \"Rev\": \"535138d7bcd717d6531c701ef5933d98b1866257\"\n                },\n                {\n                        \"ImportPath\": \"github.com/garyburd/redigo/redis\",\n                        \"Rev\": \"535138d7bcd717d6531c701ef5933d98b1866257\"\n                },\n                {\n                        \"ImportPath\": \"github.com/ghodss/yaml\",\n                        \"Rev\": \"588cb435e59ee8b6c2795482887755841ad67207\"\n                },\n                {\n                        \"ImportPath\": \"github.com/godbus/dbus\",\n                        \"Comment\": \"0-7-g939230d\",\n                        \"Rev\": \"939230d2086a4f1870e04c52e0a376c25bae0ec4\"\n                },\n                {\n                        \"ImportPath\": \"github.com/gogo/protobuf/proto\",\n                        \"Rev\": \"ab6cea4a44ef42b748cd88d2d372047b75806e0c\"\n                },\n                {\n                        \"ImportPath\": \"github.com/golang/glog\",\n                        \"Rev\": \"44145f04b68cf362d9c4df2182967c2275eaefed\"\n                },\n                {\n                        \"ImportPath\": \"github.com/golang/groupcache/lru\",\n                        \"Rev\": \"604ed5785183e59ae2789449d89e73f3a2a77987\"\n                },\n                {\n                        \"ImportPath\": \"github.com/golang/protobuf/proto\",\n                        \"Rev\": \"7f07925444bb51fa4cf9dfe6f7661876f8852275\"\n                },\n                {\n                        \"ImportPath\": \"github.com/google/cadvisor/api\",\n                        \"Comment\": \"0.15.1\",\n                        \"Rev\": \"ec588def40e1bb59f28f5a293b279f6762d13d44\"\n                },\n                {\n                        \"ImportPath\": \"github.com/google/cadvisor/cache/memory\",\n                        \"Comment\": \"0.15.1\",\n                        \"Rev\": \"ec588def40e1bb59f28f5a293b279f6762d13d44\"\n                },\n                {\n                        \"ImportPath\": \"github.com/google/cadvisor/collector\",\n                        \"Comment\": \"0.15.1\",\n                        \"Rev\": \"ec588def40e1bb59f28f5a293b279f6762d13d44\"\n                },\n                {\n                        \"ImportPath\": \"github.com/google/cadvisor/container\",\n                        \"Comment\": \"0.15.1\",\n                        \"Rev\": \"ec588def40e1bb59f28f5a293b279f6762d13d44\"\n                },\n                {\n                        \"ImportPath\": \"github.com/google/cadvisor/events\",\n                        \"Comment\": \"0.15.1\",\n                        \"Rev\": \"ec588def40e1bb59f28f5a293b279f6762d13d44\"\n                },\n                {\n                        \"ImportPath\": \"github.com/google/cadvisor/fs\",\n                        \"Comment\": \"0.15.1\",\n                        \"Rev\": \"ec588def40e1bb59f28f5a293b279f6762d13d44\"\n                },\n                {\n                        \"ImportPath\": \"github.com/google/cadvisor/healthz\",\n                        \"Comment\": \"0.15.1\",\n                        \"Rev\": \"ec588def40e1bb59f28f5a293b279f6762d13d44\"\n                },\n                {\n                        \"ImportPath\": \"github.com/google/cadvisor/http\",\n                        \"Comment\": \"0.15.1\",\n                        \"Rev\": \"ec588def40e1bb59f28f5a293b279f6762d13d44\"\n                },\n                {\n                        \"ImportPath\": \"github.com/google/cadvisor/info/v1\",\n                        \"Comment\": \"0.15.1\",\n                        \"Rev\": \"ec588def40e1bb59f28f5a293b279f6762d13d44\"\n                },\n                {\n                        \"ImportPath\": \"github.com/google/cadvisor/info/v2\",\n                        \"Comment\": \"0.15.1\",\n                        \"Rev\": \"ec588def40e1bb59f28f5a293b279f6762d13d44\"\n                },\n                {\n                        \"ImportPath\": \"github.com/google/cadvisor/manager\",\n                        \"Comment\": \"0.15.1\",\n                        \"Rev\": \"ec588def40e1bb59f28f5a293b279f6762d13d44\"\n                },\n                {\n                        \"ImportPath\": \"github.com/google/cadvisor/metrics\",\n                        \"Comment\": \"0.15.1\",\n                        \"Rev\": \"ec588def40e1bb59f28f5a293b279f6762d13d44\"\n                },\n                {\n                        \"ImportPath\": \"github.com/google/cadvisor/pages\",\n                        \"Comment\": \"0.15.1\",\n                        \"Rev\": \"ec588def40e1bb59f28f5a293b279f6762d13d44\"\n                },\n                {\n                        \"ImportPath\": \"github.com/google/cadvisor/storage\",\n                        \"Comment\": \"0.15.1\",\n                        \"Rev\": \"ec588def40e1bb59f28f5a293b279f6762d13d44\"\n                },\n                {\n                        \"ImportPath\": \"github.com/google/cadvisor/summary\",\n                        \"Comment\": \"0.15.1\",\n                        \"Rev\": \"ec588def40e1bb59f28f5a293b279f6762d13d44\"\n                },\n                {\n                        \"ImportPath\": \"github.com/google/cadvisor/utils\",\n                        \"Comment\": \"0.15.1\",\n                        \"Rev\": \"ec588def40e1bb59f28f5a293b279f6762d13d44\"\n                },\n                {\n                        \"ImportPath\": \"github.com/google/cadvisor/validate\",\n                        \"Comment\": \"0.15.1\",\n                        \"Rev\": \"ec588def40e1bb59f28f5a293b279f6762d13d44\"\n                },\n                {\n                        \"ImportPath\": \"github.com/google/cadvisor/version\",\n                        \"Comment\": \"0.15.1\",\n                        \"Rev\": \"ec588def40e1bb59f28f5a293b279f6762d13d44\"\n                },\n                {\n                        \"ImportPath\": \"github.com/google/go-github/github\",\n                        \"Rev\": \"930e6fdb8dc2b11458fdeb55b3cd68e5370a1a28\"\n                },\n                {\n                        \"ImportPath\": \"github.com/google/go-querystring/query\",\n                        \"Rev\": \"547ef5ac979778feb2f760cdb5f4eae1a2207b86\"\n                },\n                {\n                        \"ImportPath\": \"github.com/google/gofuzz\",\n                        \"Rev\": \"bbcb9da2d746f8bdbd6a936686a0a6067ada0ec5\"\n                },\n                {\n                        \"ImportPath\": \"github.com/gorilla/context\",\n                        \"Rev\": \"215affda49addc4c8ef7e2534915df2c8c35c6cd\"\n                },\n                {\n                        \"ImportPath\": \"github.com/gorilla/mux\",\n                        \"Rev\": \"8096f47503459bcc74d1f4c487b7e6e42e5746b5\"\n                },\n                {\n                        \"ImportPath\": \"github.com/imdario/mergo\",\n                        \"Comment\": \"0.1.3-8-g6633656\",\n                        \"Rev\": \"6633656539c1639d9d78127b7d47c622b5d7b6dc\"\n                },\n                {\n                        \"ImportPath\": \"github.com/inconshreveable/mousetrap\",\n                        \"Rev\": \"76626ae9c91c4f2a10f34cad8ce83ea42c93bb75\"\n                },\n                {\n                        \"ImportPath\": \"github.com/influxdb/influxdb/client\",\n                        \"Comment\": \"v0.8.8\",\n                        \"Rev\": \"afde71eb1740fd763ab9450e1f700ba0e53c36d0\"\n                },\n                {\n                        \"ImportPath\": \"github.com/juju/ratelimit\",\n                        \"Rev\": \"772f5c38e468398c4511514f4f6aa9a4185bc0a0\"\n                },\n                {\n                        \"ImportPath\": \"github.com/kardianos/osext\",\n                        \"Rev\": \"8fef92e41e22a70e700a96b29f066cda30ea24ef\"\n                },\n                {\n                        \"ImportPath\": \"github.com/kr/pty\",\n                        \"Comment\": \"release.r56-25-g05017fc\",\n                        \"Rev\": \"05017fcccf23c823bfdea560dcc958a136e54fb7\"\n                },\n                {\n                        \"ImportPath\": \"github.com/matttproud/golang_protobuf_extensions/pbutil\",\n                        \"Rev\": \"fc2b8d3a73c4867e51861bbdd5ae3c1f0869dd6a\"\n                },\n                {\n                        \"ImportPath\": \"github.com/mesos/mesos-go/auth\",\n                        \"Rev\": \"6440c09c9d8a1b365f3c3e9b2297dd856abd017c\"\n                },\n                {\n                        \"ImportPath\": \"github.com/mesos/mesos-go/detector\",\n                        \"Rev\": \"4b1767c0dfc51020e01f35da5b38472f40ce572a\"\n                },\n                {\n                        \"ImportPath\": \"github.com/mesos/mesos-go/executor\",\n                        \"Rev\": \"4b1767c0dfc51020e01f35da5b38472f40ce572a\"\n                },\n                {\n                        \"ImportPath\": \"github.com/mesos/mesos-go/mesosproto\",\n                        \"Rev\": \"4b1767c0dfc51020e01f35da5b38472f40ce572a\"\n                },\n                {\n                        \"ImportPath\": \"github.com/mesos/mesos-go/mesosutil\",\n                        \"Rev\": \"4b1767c0dfc51020e01f35da5b38472f40ce572a\"\n                },\n                {\n                        \"ImportPath\": \"github.com/mesos/mesos-go/messenger\",\n                        \"Rev\": \"4b1767c0dfc51020e01f35da5b38472f40ce572a\"\n                },\n                {\n                        \"ImportPath\": \"github.com/mesos/mesos-go/scheduler\",\n                        \"Rev\": \"4b1767c0dfc51020e01f35da5b38472f40ce572a\"\n                },\n                {\n                        \"ImportPath\": \"github.com/mesos/mesos-go/upid\",\n                        \"Rev\": \"4b1767c0dfc51020e01f35da5b38472f40ce572a\"\n                },\n                {\n                        \"ImportPath\": \"github.com/miekg/dns\",\n                        \"Rev\": \"3f504e8dabd5d562e997d19ce0200aa41973e1b2\"\n                },\n                {\n                        \"ImportPath\": \"github.com/mitchellh/mapstructure\",\n                        \"Rev\": \"740c764bc6149d3f1806231418adb9f52c11bcbf\"\n                },\n                {\n                        \"ImportPath\": \"github.com/onsi/ginkgo\",\n                        \"Comment\": \"v1.2.0-6-gd981d36\",\n                        \"Rev\": \"d981d36e9884231afa909627b9c275e4ba678f90\"\n                },\n                {\n                        \"ImportPath\": \"github.com/onsi/gomega\",\n                        \"Comment\": \"v1.0-28-g8adf9e1730c5\",\n                        \"Rev\": \"8adf9e1730c55cdc590de7d49766cb2acc88d8f2\"\n                },\n                {\n                        \"ImportPath\": \"github.com/prometheus/client_golang/model\",\n                        \"Comment\": \"0.4.0-1-g692492e\",\n                        \"Rev\": \"692492e54b553a81013254cc1fba4b6dd76fad30\"\n                },\n                {\n                        \"ImportPath\": \"github.com/prometheus/client_golang/prometheus\",\n                        \"Comment\": \"0.4.0-1-g692492e\",\n                        \"Rev\": \"692492e54b553a81013254cc1fba4b6dd76fad30\"\n                },\n                {\n                        \"ImportPath\": \"github.com/prometheus/client_golang/text\",\n                        \"Comment\": \"0.4.0-1-g692492e\",\n                        \"Rev\": \"692492e54b553a81013254cc1fba4b6dd76fad30\"\n                },\n                {\n                        \"ImportPath\": \"github.com/prometheus/client_model/go\",\n                        \"Comment\": \"model-0.0.2-12-gfa8ad6f\",\n                        \"Rev\": \"fa8ad6fec33561be4280a8f0514318c79d7f6cb6\"\n                },\n                {\n                        \"ImportPath\": \"github.com/prometheus/procfs\",\n                        \"Rev\": \"490cc6eb5fa45bf8a8b7b73c8bc82a8160e8531d\"\n                },\n                {\n                        \"ImportPath\": \"github.com/rackspace/gophercloud\",\n                        \"Comment\": \"v1.0.0-569-gf3ced00\",\n                        \"Rev\": \"f3ced00552c1c7d4a6184500af9062cfb4ff4463\"\n                },\n                {\n                        \"ImportPath\": \"github.com/russross/blackfriday\",\n                        \"Comment\": \"v1.2-42-g77efab5\",\n                        \"Rev\": \"77efab57b2f74dd3f9051c79752b2e8995c8b789\"\n                },\n                {\n                        \"ImportPath\": \"github.com/samuel/go-zookeeper/zk\",\n                        \"Rev\": \"d0e0d8e11f318e000a8cc434616d69e329edc374\"\n                },\n                {\n                        \"ImportPath\": \"github.com/shurcooL/sanitized_anchor_name\",\n                        \"Rev\": \"9a8b7d4e8f347bfa230879db9d7d4e4d9e19f962\"\n                },\n                {\n                        \"ImportPath\": \"github.com/skynetservices/skydns/msg\",\n                        \"Comment\": \"2.5.1a\",\n                        \"Rev\": \"1be70b5b8aa07acccd972146d84011b670af88b4\"\n                },\n                {\n                        \"ImportPath\": \"github.com/spf13/cobra\",\n                        \"Rev\": \"8f5946caaeeff40a98d67f60c25e89c3525038a3\"\n                },\n                {\n                        \"ImportPath\": \"github.com/spf13/pflag\",\n                        \"Rev\": \"b91b2a94780f4e6b4d3b0c12fd9b5f4b05b1aa45\"\n                },\n                {\n                        \"ImportPath\": \"github.com/stretchr/objx\",\n                        \"Rev\": \"d40df0cc104c06eae2dfe03d7dddb83802d52f9a\"\n                },\n                {\n                        \"ImportPath\": \"github.com/stretchr/testify/assert\",\n                        \"Rev\": \"7e4a149930b09fe4c2b134c50ce637457ba6e966\"\n                },\n                {\n                        \"ImportPath\": \"github.com/stretchr/testify/mock\",\n                        \"Rev\": \"7e4a149930b09fe4c2b134c50ce637457ba6e966\"\n                },\n                {\n                        \"ImportPath\": \"github.com/stretchr/testify/require\",\n                        \"Rev\": \"7e4a149930b09fe4c2b134c50ce637457ba6e966\"\n                },\n                {\n                        \"ImportPath\": \"github.com/syndtr/gocapability/capability\",\n                        \"Rev\": \"3c85049eaeb429febe7788d9c7aac42322a377fe\"\n                },\n                {\n                        \"ImportPath\": \"github.com/ugorji/go/codec\",\n                        \"Rev\": \"8a2a3a8c488c3ebd98f422a965260278267a0551\"\n                },\n                {\n                        \"ImportPath\": \"github.com/vaughan0/go-ini\",\n                        \"Rev\": \"a98ad7ee00ec53921f08832bc06ecf7fd600e6a1\"\n                },\n                {\n                        \"ImportPath\": \"github.com/xyproto/simpleredis\",\n                        \"Comment\": \"v1.0-13-g5292687\",\n                        \"Rev\": \"5292687f5379e01054407da44d7c4590a61fd3de\"\n                },\n                {\n                        \"ImportPath\": \"golang.org/x/crypto/ssh\",\n                        \"Rev\": \"c84e1f8e3a7e322d497cd16c0e8a13c7e127baf3\"\n                },\n                {\n                        \"ImportPath\": \"golang.org/x/exp/inotify\",\n                        \"Rev\": \"d00e13ec443927751b2bd49e97dea7bf3b6a6487\"\n                },\n                {\n                        \"ImportPath\": \"golang.org/x/net/context\",\n                        \"Rev\": \"cbcac7bb8415db9b6cb4d1ebab1dc9afbd688b97\"\n                },\n                {\n                        \"ImportPath\": \"golang.org/x/net/html\",\n                        \"Rev\": \"cbcac7bb8415db9b6cb4d1ebab1dc9afbd688b97\"\n                },\n                {\n                        \"ImportPath\": \"golang.org/x/net/spdy\",\n                        \"Comment\": \"deleted-upstream\",\n                        \"Rev\": \"d175081df37eff8cda13f478bc11a0a65b39958b\"\n                },\n                {\n                        \"ImportPath\": \"golang.org/x/net/websocket\",\n                },\n                {\n                        \"ImportPath\": \"github.com/ugorji/go/codec\",\n                        \"Rev\": \"8a2a3a8c488c3ebd98f422a965260278267a0551\"\n                },\n                {\n                        \"ImportPath\": \"github.com/vaughan0/go-ini\",\n                        \"Rev\": \"a98ad7ee00ec53921f08832bc06ecf7fd600e6a1\"\n                },\n                {\n                        \"ImportPath\": \"github.com/xyproto/simpleredis\",\n                        \"Comment\": \"v1.0-13-g5292687\",\n                        \"Rev\": \"5292687f5379e01054407da44d7c4590a61fd3de\"\n                },\n                {\n                        \"ImportPath\": \"golang.org/x/crypto/ssh\",\n                        \"Rev\": \"c84e1f8e3a7e322d497cd16c0e8a13c7e127baf3\"\n                },\n                {\n                        \"ImportPath\": \"golang.org/x/exp/inotify\",\n                        \"Rev\": \"d00e13ec443927751b2bd49e97dea7bf3b6a6487\"\n                },\n                {\n                        \"ImportPath\": \"golang.org/x/net/context\",\n                        \"Rev\": \"cbcac7bb8415db9b6cb4d1ebab1dc9afbd688b97\"\n                },\n                {\n                        \"ImportPath\": \"golang.org/x/net/html\",\n                        \"Rev\": \"cbcac7bb8415db9b6cb4d1ebab1dc9afbd688b97\"\n                },\n                {\n                        \"ImportPath\": \"golang.org/x/net/spdy\",\n                        \"Comment\": \"deleted-upstream\",\n                        \"Rev\": \"d175081df37eff8cda13f478bc11a0a65b39958b\"\n                },\n                {\n                        \"ImportPath\": \"golang.org/x/net/websocket\",\n                        \"Rev\": \"cbcac7bb8415db9b6cb4d1ebab1dc9afbd688b97\"\n                },\n                {\n                        \"ImportPath\": \"golang.org/x/oauth2\",\n                        \"Rev\": \"b5adcc2dcdf009d0391547edc6ecbaff889f5bb9\"\n                },\n                {\n                        \"ImportPath\": \"google.golang.org/cloud/compute/metadata\",\n                        \"Rev\": \"2e43671e4ad874a7bca65746ff3edb38e6e93762\"\n                },\n                {\n                        \"ImportPath\": \"google.golang.org/cloud/internal\",\n                        \"Rev\": \"2e43671e4ad874a7bca65746ff3edb38e6e93762\"\n                },\n                {\n                        \"ImportPath\": \"gopkg.in/yaml.v2\",\n                        \"Rev\": \"d466437aa4adc35830964cffc5b5f262c63ddcb4\"\n                },\n                {\n                        \"ImportPath\": \"speter.net/go/exp/math/dec/inf\",\n                        \"Rev\": \"42ca6cd68aa922bc3f32f1e056e61b65945d9ad7\"\n                }\n        ]\n}\n. Sorry I forgot to add my errors. \nActually there is no obvious error occurred unless some project moved or delete some folder, it shows \"cannot find package in any of GOROOT GOPATH\", for me they are:\ngithub.com/prometheus/client_golang/model \ngithub.com/prometheus/client_golang/text\ngithub.com/aws/aws-sdk-go/internal/apierr\nall above projects deleted some folders between old and current versions.\n. I got, many thanks !! \ud83d\ude03\n. ",
    "mavenraven": "Thanks for the info. The CF buildpacks are downstream of the Heroku ones, so it might be possible for us to do this in the upstream repo and send you a PR, if you're interested.\n. Thanks for the info. The CF buildpacks are downstream of the Heroku ones, so it might be possible for us to do this in the upstream repo and send you a PR, if you're interested.\n. ",
    "jtarchie": "@freeformz, can we clarify about the wildcard. We'd like to support it for patch level, not minor/major. I'll reopen this on the buildpack's issues.\n. @kr thanks for the feedback with minor and major. We'll gladly change the copy.\nAs a follow up to the -m flag, I'd like to make a clarification. We wanted to maintain backwards compatibility with the current godep workflow. The flag was introduced to make it opt-in.\nWould the desired work flow then, not be a flag, but a new command (e.g. godep major-version-only) rather than an extension to godep save? That would make it more explicit through the command line.\nHappy to chat!\n. I think we are alright with that. Let me bring it up internally.\n. @kr and @freeformz, we changed the default godep save behaviour to always emit the major version only.\nAs for the buildpack support, @freeformz what were you thinking this has to come in after the buildpack supports it? It is a bit of the chicken an egg problem, I guess. In my humble opinion, the minor version resolution should happen in the buildpack and not via some third party service, like the nodejs buildpack does.\n. Would you be willing to test out a different CI system that would be able to provide that functionality? It can be used in conjunction with travisCI.\n. @freeformz, can we clarify about the wildcard. We'd like to support it for patch level, not minor/major. I'll reopen this on the buildpack's issues.\n. @kr thanks for the feedback with minor and major. We'll gladly change the copy.\nAs a follow up to the -m flag, I'd like to make a clarification. We wanted to maintain backwards compatibility with the current godep workflow. The flag was introduced to make it opt-in.\nWould the desired work flow then, not be a flag, but a new command (e.g. godep major-version-only) rather than an extension to godep save? That would make it more explicit through the command line.\nHappy to chat!\n. I think we are alright with that. Let me bring it up internally.\n. @kr and @freeformz, we changed the default godep save behaviour to always emit the major version only.\nAs for the buildpack support, @freeformz what were you thinking this has to come in after the buildpack supports it? It is a bit of the chicken an egg problem, I guess. In my humble opinion, the minor version resolution should happen in the buildpack and not via some third party service, like the nodejs buildpack does.\n. Would you be willing to test out a different CI system that would be able to provide that functionality? It can be used in conjunction with travisCI.\n. ",
    "jimmyxian": "@freeformz \nOK, Got it. Thanks for your quick reply.\n. @freeformz \nOK, Got it. Thanks for your quick reply.\n. ",
    "rasky": "Just done the same for hg, no clue about bzr though, I don't know it.\n. This should be fixed by my pull #302 \n. What you mean \"there's nothing\"? It's a one character patch. It's small, but it's effective :)\nI think my pull description tries to explain the issue, but I can try again. There are many git repos which are COLLECTIONS of packages, not just single packages. This is especially visibile in /x/ repos. If you import golang.com/x/crypto/ssh and run go get, you will get a full checkout of golang.com/x/crypto which is a single git repository including dozens of different packages (see: https://github.com/golang/crypto). Now let's say that for another project you locally modify a file within golang.com/x/crypto/openpgp, in your GOPATH. If you later run godep save on the first project (the one using golang.com/x/crypto/ssh), you get a dirty error by godep, because the modification in your copy of golang.com/x/crypto/openpgp is wrongly seen as a modification affecting your project; but your project uses golang.com/x/crypto/ssh, not golang.com/x/crypto/openpgp, so there is not need to abort the godep save operation.\nMy one-character PR fixes this.\n. If you run \"godep save\" on a project importing golang.org/x/crypto/ssh, only the ssh package is vendored. So I'm not sure what you mean with \"designed to work against the top level package of a repo\", since it already works the way I expect. \n. Oh now I see. My way of reading the OP post was the same of the bug I pursuing, so the fact that you can't vendor a perfectly clean dependency because of an unrelated modification in THEIR repository, and I felt that the fact that it was putting main in a subdirectory was just an unimportant detail. So we have two issues here:\n1) unrelated modifications in the same git repo of a dependency. This is fixed by PR\n2) running godep in a subdirectory of a git repo. This is unrelated to the first issue, and possibly a larger change to godep.\n. Just done the same for hg, no clue about bzr though, I don't know it.\n. This should be fixed by my pull #302 \n. What you mean \"there's nothing\"? It's a one character patch. It's small, but it's effective :)\nI think my pull description tries to explain the issue, but I can try again. There are many git repos which are COLLECTIONS of packages, not just single packages. This is especially visibile in /x/ repos. If you import golang.com/x/crypto/ssh and run go get, you will get a full checkout of golang.com/x/crypto which is a single git repository including dozens of different packages (see: https://github.com/golang/crypto). Now let's say that for another project you locally modify a file within golang.com/x/crypto/openpgp, in your GOPATH. If you later run godep save on the first project (the one using golang.com/x/crypto/ssh), you get a dirty error by godep, because the modification in your copy of golang.com/x/crypto/openpgp is wrongly seen as a modification affecting your project; but your project uses golang.com/x/crypto/ssh, not golang.com/x/crypto/openpgp, so there is not need to abort the godep save operation.\nMy one-character PR fixes this.\n. If you run \"godep save\" on a project importing golang.org/x/crypto/ssh, only the ssh package is vendored. So I'm not sure what you mean with \"designed to work against the top level package of a repo\", since it already works the way I expect. \n. Oh now I see. My way of reading the OP post was the same of the bug I pursuing, so the fact that you can't vendor a perfectly clean dependency because of an unrelated modification in THEIR repository, and I felt that the fact that it was putting main in a subdirectory was just an unimportant detail. So we have two issues here:\n1) unrelated modifications in the same git repo of a dependency. This is fixed by PR\n2) running godep in a subdirectory of a git repo. This is unrelated to the first issue, and possibly a larger change to godep.\n. ",
    "Alex-Addy": "The problem is that once one starts using godep, one has to always use godep to build and such. The vcs.IsDirty check is preventing us from always using godep during development. Making it more difficult to develop against exactly what the release build will be using. #305 will allow us to develop using the flag, then remove it when building for release, letting us use the sanity check only when needed.\n. I am closing this issue as it is very old and we no longer use godep. It also looks like to be contrary to the intended use of the tool, which is never good.. This would allow for differentiating between development and release builds in the build process. closes #303.\n. The problem is that once one starts using godep, one has to always use godep to build and such. The vcs.IsDirty check is preventing us from always using godep during development. Making it more difficult to develop against exactly what the release build will be using. #305 will allow us to develop using the flag, then remove it when building for release, letting us use the sanity check only when needed.\n. I am closing this issue as it is very old and we no longer use godep. It also looks like to be contrary to the intended use of the tool, which is never good.. This would allow for differentiating between development and release builds in the build process. closes #303.\n. ",
    "jdmcfad": "See the situation @Alex-Addy outlined in #303 for example.  Does that make sense?\n. This is OBE by GO15VENDOREXPERIMENT adopted by Go 1.5/1.6, we haven't looked at this since December.  Thanks for looking at this.\n. See the situation @Alex-Addy outlined in #303 for example.  Does that make sense?\n. This is OBE by GO15VENDOREXPERIMENT adopted by Go 1.5/1.6, we haven't looked at this since December.  Thanks for looking at this.\n. ",
    "aj0strow": "@freeformz for sure https://help.heroku.com/tickets/297464 \n. @nerdyc the best solution we found was to clone the command into your project so it gets built too\n. @freeformz for sure https://help.heroku.com/tickets/297464 \n. @nerdyc the best solution we found was to clone the command into your project so it gets built too\n. ",
    "nerdyc": "@freeformz Any update? I'm actually in the exact same boat. I posted to Stack Overflow before finding this issue, but will update it to point here.\nhttp://stackoverflow.com/questions/33847277/how-do-i-build-utilities-with-my-go-web-app-on-heroku\n. @aj0strow Thanks. That's what I've done so far, but obviously not ideal.\n. @freeformz Any update? I'm actually in the exact same boat. I posted to Stack Overflow before finding this issue, but will update it to point here.\nhttp://stackoverflow.com/questions/33847277/how-do-i-build-utilities-with-my-go-web-app-on-heroku\n. @aj0strow Thanks. That's what I've done so far, but obviously not ideal.\n. ",
    "scisci": "godep v18 (darwin/amd64/go1.5)\nwill try to make a repo that reproduces\n. godep v18 (darwin/amd64/go1.5)\nwill try to make a repo that reproduces\n. ",
    "ddysher": "Ok, thanks.  I think I misunderstood how it works.  If there is only package and commit hash, then current  restore workflow is sound.\n. Ok, thanks.  I think I misunderstood how it works.  If there is only package and commit hash, then current  restore workflow is sound.\n. ",
    "matejkramny": "@freeformz why do we need to commit _workspace into git if it isn't being used to restore the packages?\n. @freeformz ok I understand that, but i am questioning why the tool then fetches the git repos during godep restore.\n. Oh right. Understand.\nThank you for explaining.\n. @freeformz why do we need to commit _workspace into git if it isn't being used to restore the packages?\n. @freeformz ok I understand that, but i am questioning why the tool then fetches the git repos during godep restore.\n. Oh right. Understand.\nThank you for explaining.\n. ",
    "michaeltrobinson": "Okay, I will add a test case and split this into two PRs with more details\n. @freeformz Does seem to be fixed, thanks!\n. I'm open to suggestions, but I haven't been able to figure out any way to get the un-resolved vcs root out of hg (but I am by no means a mercurial expert).\n. Okay, I will add a test case and split this into two PRs with more details\n. @freeformz Does seem to be fixed, thanks!\n. I'm open to suggestions, but I haven't been able to figure out any way to get the un-resolved vcs root out of hg (but I am by no means a mercurial expert).\n. ",
    "sbogacz": "+1\n. +1\n. ",
    "derekdowling": "I'm running into the second issue as well. Not sure how to get around that.\n. Yeah, my issue is with \"But if both the parent project and the dependency project both depend on a 3rd dependency\".\n. @ansel1 luckily I own both repos so I am working around it by not publishing the libraries vendor folders to avoid this.\n. I'm running into the second issue as well. Not sure how to get around that.\n. Yeah, my issue is with \"But if both the parent project and the dependency project both depend on a 3rd dependency\".\n. @ansel1 luckily I own both repos so I am working around it by not publishing the libraries vendor folders to avoid this.\n. ",
    "ansel1": "to workaround missing _workspace folders, I just manually copy them into my vendor folder.  I only need to do this when I add or update a dependency, and the only one which currently has a nested _workspace is godep itself.\nTo workaround the nested vendor folders, I wrapped godep save and update in make targets, which do this afterwards:\nfind vendor/* -type d -name vendor -exec rm -rf '{}' \\;\nHere's what my \"freeze\" make target looks like:\n```\nclean.nested.vendor = find vendor/* -type d -name vendor -exec rm -rf '{}' \\; &> /dev/null\nVendors new dependencies\nvendor.freeze:\n    GO15VENDOREXPERIMENT=1 godep save $(VENDOR_PACKAGES)\nnested vendor folders don't work\n-@$(clean.nested.vendor)\n\n```\n. Oh, does the 3rd party dep use import rewriting?  then your screwed. :(\n. to workaround missing _workspace folders, I just manually copy them into my vendor folder.  I only need to do this when I add or update a dependency, and the only one which currently has a nested _workspace is godep itself.\nTo workaround the nested vendor folders, I wrapped godep save and update in make targets, which do this afterwards:\nfind vendor/* -type d -name vendor -exec rm -rf '{}' \\;\nHere's what my \"freeze\" make target looks like:\n```\nclean.nested.vendor = find vendor/* -type d -name vendor -exec rm -rf '{}' \\; &> /dev/null\nVendors new dependencies\nvendor.freeze:\n    GO15VENDOREXPERIMENT=1 godep save $(VENDOR_PACKAGES)\nnested vendor folders don't work\n-@$(clean.nested.vendor)\n\n```\n. Oh, does the 3rd party dep use import rewriting?  then your screwed. :(\n. ",
    "thiderman": "Was any progress ever made on this? I just started to use godep, and I immediately ran into this. As it stands right now, this hinders me from using it at all. :(\n. Was any progress ever made on this? I just started to use godep, and I immediately ran into this. As it stands right now, this hinders me from using it at all. :(\n. ",
    "bojan-embroker": "Thanks for the suggestion. Unfortunately, I did that already and it doesn't help.\n. Can you please tell me what this message from godep actually means i.e. what is godep trying to do and what is failing.\nWithout understanding that, it just sounds like a chicken and egg problem: I want to run godep save in pre-commit hook, but it won't run in it because I didn't commit.\n. I don't want to add anything to git automatically in pre-commit hook and not give committer opportunity to check and see what exactly he is committing. I want to prevent commit if committer forgot to do \"godep save ./...\", do it for him and tell him to do git add -A so he can review changes before committing.\nThe problem is that when I run \"godep save ./...\" in the folder nothing is changed as I didn't add any new dependencies, but when I do the same from pre-commit hook I get \"godep: dirty working tree (please commit changes): ...\". So basically, the hook isn't letting me commit even though there are no new dependencies.\nHere is the whole hook:\n``` bash\n!/bin/bash\nset -e\nunset GIT_DIR\nunset GIT_INDEX_FILE\nexport GOPATH=$1\n$1/bin/godep save ./...\nNOGODEPCHANGES=\"$(git ls-files . --exclude-standard --others --modified | grep Godeps | wc -l)\"\nif [ $NOGODEPCHANGES -gt 0 ]; then\n  cat <<\\EOF\nERROR: Some Go dependencies have been updated with godep save\nERROR: Please add them to your commit.\nEOF\n  exit 1\nfi\nexit 0\n```\nIt worked as expected with git 1.9.2 and started giving that  \"godep: dirty working tree (please commit changes): ...\" message when I upgraded to 2.6.2.\n. That change doesn't fix my problem unfortunately.\n. Thanks for the suggestion. Unfortunately, I did that already and it doesn't help.\n. Can you please tell me what this message from godep actually means i.e. what is godep trying to do and what is failing.\nWithout understanding that, it just sounds like a chicken and egg problem: I want to run godep save in pre-commit hook, but it won't run in it because I didn't commit.\n. I don't want to add anything to git automatically in pre-commit hook and not give committer opportunity to check and see what exactly he is committing. I want to prevent commit if committer forgot to do \"godep save ./...\", do it for him and tell him to do git add -A so he can review changes before committing.\nThe problem is that when I run \"godep save ./...\" in the folder nothing is changed as I didn't add any new dependencies, but when I do the same from pre-commit hook I get \"godep: dirty working tree (please commit changes): ...\". So basically, the hook isn't letting me commit even though there are no new dependencies.\nHere is the whole hook:\n``` bash\n!/bin/bash\nset -e\nunset GIT_DIR\nunset GIT_INDEX_FILE\nexport GOPATH=$1\n$1/bin/godep save ./...\nNOGODEPCHANGES=\"$(git ls-files . --exclude-standard --others --modified | grep Godeps | wc -l)\"\nif [ $NOGODEPCHANGES -gt 0 ]; then\n  cat <<\\EOF\nERROR: Some Go dependencies have been updated with godep save\nERROR: Please add them to your commit.\nEOF\n  exit 1\nfi\nexit 0\n```\nIt worked as expected with git 1.9.2 and started giving that  \"godep: dirty working tree (please commit changes): ...\" message when I upgraded to 2.6.2.\n. That change doesn't fix my problem unfortunately.\n. ",
    "Son-Lam": "I am having the same issue.\nWould you have any fix for it. It work on Go 1.5.3 but fails on Go 1.6rc1\n. I am having the same issue.\nWould you have any fix for it. It work on Go 1.5.3 but fails on Go 1.6rc1\n. ",
    "bbokorney": "Any feedback on this change?\n. Okay, I'll do that right now.\n. Alright, I've updated the Changelog.\n. Any feedback on this change?\n. Okay, I'll do that right now.\n. Alright, I've updated the Changelog.\n. ",
    "chnrxn": "./... should be the default, no?\n. This is a critical bug IMO.\n. I saw the same behavior too. If the main package is not in the current directory, could you try supplying the path to the main package? E.g. godep save -v ./cmd/...\nNote: I put all my main packages under ./cmd/, hence my example command.\n. ./... should be the default, no?\n. This is a critical bug IMO.\n. I saw the same behavior too. If the main package is not in the current directory, could you try supplying the path to the main package? E.g. godep save -v ./cmd/...\nNote: I put all my main packages under ./cmd/, hence my example command.\n. ",
    "gittycat": "I'm also hitting this bug fwiw\n. I'm also hitting this bug fwiw\n. ",
    "imajes": "hey @freeformz - \ngood call.\n% echo $GOPATH\n/Users/james/src/go\n% pwd         \n/Users/james/Projects/chexology/moonraker\nBut, when i run the commands from within GOPATH, i get the same results.\n. in other words, i think i'm conforming to the go code layout/organization idiom as best as i can, though it's not as easy to work when i'm in $GOPATH. my Projects/chexology/moonraker directory is a symlink into the correct folder in GOPATH, so it should all work as expected.\n. hey @freeformz - \ngood call.\n% echo $GOPATH\n/Users/james/src/go\n% pwd         \n/Users/james/Projects/chexology/moonraker\nBut, when i run the commands from within GOPATH, i get the same results.\n. in other words, i think i'm conforming to the go code layout/organization idiom as best as i can, though it's not as easy to work when i'm in $GOPATH. my Projects/chexology/moonraker directory is a symlink into the correct folder in GOPATH, so it should all work as expected.\n. ",
    "krnowak": "Oh, and this PR is related to comments in #336.\n. I had some problems after rebasing. I solved them with #346 and #351. So my further work would depend on those. Will put something tomorrow.\n. Forgot to mention that I updated this PR.\n. @jonboulle: How about now?\n. @jonboulle: Done.\n. I brought the dotPackage function back, but now it returns our own small struct with only an import path and a directory. That way projectPackages function does not have to return an error too (from filepath.Abs(\".\")).\n. Rebased to fix a minor conflict.\n. Updated, no more dotPkg type.\n. I tried to fix this, but it is usually the package that needs to be fixed actually. Normally, you should not have two files in a directory with two different package names (like bench_test.go has a package webp and gen_helper.go has a package main).\nThis is a fallout from moving away from go list in favor of go/build package.\nUsually, this kind of bug is because that often helper binaries have \"main\" package and a // +build ignore constraint. The constraint was enough for go list to ignore the file alright. But after the switch, the UseAllFiles field is set to true by default, so it takes all the files, not taking // +build constraints into account at all.\nProbably the proper solution would be to fix the offending package, but I tried to somehow work it around and failed.\n. Closing this. It is not enough and I have a problem fixing it. Will file an issue.\n. That's actually already filed - #345\n. Oh yeah, it depends on #346.\n. And sorry about the lack of the tests, will add them tomorrow if needed.\n. @jonboulle: Question is if godep32 and 33 ever worked for rkt. You should have checked the exit status too.\n. Oh, and this PR is related to comments in #336.\n. I had some problems after rebasing. I solved them with #346 and #351. So my further work would depend on those. Will put something tomorrow.\n. Forgot to mention that I updated this PR.\n. @jonboulle: How about now?\n. @jonboulle: Done.\n. I brought the dotPackage function back, but now it returns our own small struct with only an import path and a directory. That way projectPackages function does not have to return an error too (from filepath.Abs(\".\")).\n. Rebased to fix a minor conflict.\n. Updated, no more dotPkg type.\n. I tried to fix this, but it is usually the package that needs to be fixed actually. Normally, you should not have two files in a directory with two different package names (like bench_test.go has a package webp and gen_helper.go has a package main).\nThis is a fallout from moving away from go list in favor of go/build package.\nUsually, this kind of bug is because that often helper binaries have \"main\" package and a // +build ignore constraint. The constraint was enough for go list to ignore the file alright. But after the switch, the UseAllFiles field is set to true by default, so it takes all the files, not taking // +build constraints into account at all.\nProbably the proper solution would be to fix the offending package, but I tried to somehow work it around and failed.\n. Closing this. It is not enough and I have a problem fixing it. Will file an issue.\n. That's actually already filed - #345\n. Oh yeah, it depends on #346.\n. And sorry about the lack of the tests, will add them tomorrow if needed.\n. @jonboulle: Question is if godep32 and 33 ever worked for rkt. You should have checked the exit status too.\n. ",
    "robdimsdale": "Great. Thanks for the responses. Sounds like compilation in older versions might be fixed soon. If not, no worries as the binary releases should also suffice.\n@freeformz would it be possible to update the README to reflect what you said above about only supporting the current and most recent major versions of golang?\n. @freeformz that's fantastic, thank you very much.\n. Great. Thanks for the responses. Sounds like compilation in older versions might be fixed soon. If not, no worries as the binary releases should also suffice.\n@freeformz would it be possible to update the README to reflect what you said above about only supporting the current and most recent major versions of golang?\n. @freeformz that's fantastic, thank you very much.\n. ",
    "indykish": "@freeformz \nThanks for merging this fix, we were scratching our head  last nite when our tree https://github.com/megamsys/megdc.git kept saying no buildable source files while attempting to run godep save ./...\nWas about to move to  https://github.com/nitrous-io/goop.git and luckily found this fix.\nI can save Godeps now.\n. @freeformz \nThanks for merging this fix, we were scratching our head  last nite when our tree https://github.com/megamsys/megdc.git kept saying no buildable source files while attempting to run godep save ./...\nWas about to move to  https://github.com/nitrous-io/goop.git and luckily found this fix.\nI can save Godeps now.\n. ",
    "njohns-grovo": "Update, I reverted to 8956568036ef22a1bad9e349d9b3a991cd6a744f and it's functioning as expected\n. Update, I reverted to 8956568036ef22a1bad9e349d9b3a991cd6a744f and it's functioning as expected\n. ",
    "napitek": "go version go1.3.3 linux/amd64\n. go version go1.3.3 linux/amd64\n. ",
    "hellosworldos": "the same issue here, ubuntu 14.04\ngo1.2.1 linux/amd64\n. the same issue here, ubuntu 14.04\ngo1.2.1 linux/amd64\n. ",
    "gmitre": "I had the same issue here, i don't know why but started yesterday with this new release.\nWhat i did to solve temporarily was download the godep binary from a previous version (https://github.com/tools/godep/releases/download/v32/godep_linux_amd64 for example) directly to the /opt/go/bin/gopdep directory.\n. I had the same issue here, i don't know why but started yesterday with this new release.\nWhat i did to solve temporarily was download the godep binary from a previous version (https://github.com/tools/godep/releases/download/v32/godep_linux_amd64 for example) directly to the /opt/go/bin/gopdep directory.\n. ",
    "tevino": "@freeformz Yes, with GO15VENDOREXPERIMENT=1\n. @freeformz Yes, with GO15VENDOREXPERIMENT=1\n. ",
    "yifan-gu": "\nI did it on Fedora 23 (linux), godep built with 1.5.1...\n@yifan-gu hit the same problem. Not sure his OS\n\nMine is ubuntu 15.04, go version go1.4.2 linux/amd64\ngodep v36\n. > I did it on Fedora 23 (linux), godep built with 1.5.1...\n\n@yifan-gu hit the same problem. Not sure his OS\n\nMine is ubuntu 15.04, go version go1.4.2 linux/amd64\ngodep v36\n. ",
    "thanodnl": "I was running into the same issue today :(, but I have some information for you!\nRunning a git bisect on godep points me to this commit as the cause of the failure: https://github.com/tools/godep/commit/6bb9038f1fdeb750441c6341c8fa785034ba9e0c\nWith this version of logrus:\njson\n{\n    \"ImportPath\": \"github.com/Sirupsen/logrus\",\n    \"Comment\": \"v0.8.6-25-g82c8de1\",\n    \"Rev\": \"82c8de1af23b25ba5a468d801f29077f4f483bce\"\n}\nand the following error output of godep restore:\ngodep: error restoring dep (github.com/Sirupsen/logrus): Unable to find dependent package golang.org/x/sys/unix in context of /tmp/gopath/src/github.com/Sirupsen/logrus\nI indeed do not have specified golang.org/x/sys/unix as a Godep since the version of logrus I'm using does not yet depend on this package. As you will see here the terminal_solaris.go file that depends on golang.org/x/sys/unix is not yet in the version I'm using.\nIt looks like godep restore tries to restore a different -possibly later- version of logrus than I want to be restored.\nHope this helps you in finding the issue more quickly.\nEdit: it looks like #362 solves this issue for me!\n. @eparis I do not see golang.org/x/sys/unix showing up in my path and neither in my Godeps.json after I do a godep save ./.... Could it be that you bumped the version of logrus in the process, hence explaining why it now adds x/sys/unix to your deps?\n. I was running into the same issue today :(, but I have some information for you!\nRunning a git bisect on godep points me to this commit as the cause of the failure: https://github.com/tools/godep/commit/6bb9038f1fdeb750441c6341c8fa785034ba9e0c\nWith this version of logrus:\njson\n{\n    \"ImportPath\": \"github.com/Sirupsen/logrus\",\n    \"Comment\": \"v0.8.6-25-g82c8de1\",\n    \"Rev\": \"82c8de1af23b25ba5a468d801f29077f4f483bce\"\n}\nand the following error output of godep restore:\ngodep: error restoring dep (github.com/Sirupsen/logrus): Unable to find dependent package golang.org/x/sys/unix in context of /tmp/gopath/src/github.com/Sirupsen/logrus\nI indeed do not have specified golang.org/x/sys/unix as a Godep since the version of logrus I'm using does not yet depend on this package. As you will see here the terminal_solaris.go file that depends on golang.org/x/sys/unix is not yet in the version I'm using.\nIt looks like godep restore tries to restore a different -possibly later- version of logrus than I want to be restored.\nHope this helps you in finding the issue more quickly.\nEdit: it looks like #362 solves this issue for me!\n. @eparis I do not see golang.org/x/sys/unix showing up in my path and neither in my Godeps.json after I do a godep save ./.... Could it be that you bumped the version of logrus in the process, hence explaining why it now adds x/sys/unix to your deps?\n. ",
    "krishicks": "I'm away from that machine now but I will check tomorrow.\n. Oops, I was on a super old version of godep. v14.\nIt's hard to tell the current version of godep as there's no 'version' command. I had to go to the GOPATH and look at the tags.\n. I am not sure how I missed that. Maybe I was just doing --version and didn't read the helpful text which said 'version' was a command.\n. I'm away from that machine now but I will check tomorrow.\n. Oops, I was on a super old version of godep. v14.\nIt's hard to tell the current version of godep as there's no 'version' command. I had to go to the GOPATH and look at the tags.\n. I am not sure how I missed that. Maybe I was just doing --version and didn't read the helpful text which said 'version' was a command.\n. ",
    "snikch": "Still an issue, using master.\n\u279c  polecat git:(event-ingestion) \u2717 godep version\ngodep v36 (darwin/amd64/go1.5.2)\n\u279c  polecat git:(event-ingestion) \u2717 rm -rf vendor && rm -rf Godeps && godep save ./... && ls -l vendor/github.com\ntotal 0\ndrwxr-xr-x  3 mal  staff  102 Dec 15 17:24 Shopify\ndrwxr-xr-x  3 mal  staff  102 Dec 15 17:24 Sirupsen\ndrwxr-xr-x  3 mal  staff  102 Dec 15 17:24 dgrijalva\ndrwxr-xr-x  3 mal  staff  102 Dec 15 17:24 elgris\ndrwxr-xr-x  3 mal  staff  102 Dec 15 17:24 gorilla\ndrwxr-xr-x  3 mal  staff  102 Dec 15 17:24 jmoiron\ndrwxr-xr-x  3 mal  staff  102 Dec 15 17:24 julienschmidt\ndrwxr-xr-x  4 mal  staff  136 Dec 15 17:24 onsi\ndrwxr-xr-x  3 mal  staff  102 Dec 15 17:24 snikch\ndrwxr-xr-x  4 mal  staff  136 Dec 15 17:24 vend\ndrwxr-xr-x  4 mal  staff  136 Dec 15 17:24 wvanbergen\ndrwxr-xr-x  3 mal  staff  102 Dec 15 17:24 xeipuuv\n. All good :+1:, I'm happy enough in the meantime with the older version! Thanks.\n. Still an issue, using master.\n\u279c  polecat git:(event-ingestion) \u2717 godep version\ngodep v36 (darwin/amd64/go1.5.2)\n\u279c  polecat git:(event-ingestion) \u2717 rm -rf vendor && rm -rf Godeps && godep save ./... && ls -l vendor/github.com\ntotal 0\ndrwxr-xr-x  3 mal  staff  102 Dec 15 17:24 Shopify\ndrwxr-xr-x  3 mal  staff  102 Dec 15 17:24 Sirupsen\ndrwxr-xr-x  3 mal  staff  102 Dec 15 17:24 dgrijalva\ndrwxr-xr-x  3 mal  staff  102 Dec 15 17:24 elgris\ndrwxr-xr-x  3 mal  staff  102 Dec 15 17:24 gorilla\ndrwxr-xr-x  3 mal  staff  102 Dec 15 17:24 jmoiron\ndrwxr-xr-x  3 mal  staff  102 Dec 15 17:24 julienschmidt\ndrwxr-xr-x  4 mal  staff  136 Dec 15 17:24 onsi\ndrwxr-xr-x  3 mal  staff  102 Dec 15 17:24 snikch\ndrwxr-xr-x  4 mal  staff  136 Dec 15 17:24 vend\ndrwxr-xr-x  4 mal  staff  136 Dec 15 17:24 wvanbergen\ndrwxr-xr-x  3 mal  staff  102 Dec 15 17:24 xeipuuv\n. All good :+1:, I'm happy enough in the meantime with the older version! Thanks.\n. ",
    "tsaikd": "This patch cause an issue for me.\nMy build script is like this:\nsh\ngodep restore\ngo get\ngo build\nexample Godeps/Godeps.json:\njson\n{\n        \"GoVersion\": \"go1.5\",\n        \"Deps\": [\n                {\n                        \"ImportPath\": \"google.golang.org/appengine\", \n                        \"Rev\": \"58c0e2a2044a8d1abd8dd1d97939cd74497d0806\"\n                }\n        ]\n}\nThen run build script in docker golang:1.5 (clean environment for GOPATH)\nError message:\ngodep: Dep (google.golang.org/appengine) restored, but was unable to load it with error:\n    Unable to find dependent package github.com/golang/protobuf/proto in context of /go/src/google.golang.org/appengine\ngodep:  This may be because the dependencies were saved with an older version of godep (< v33).\ngodep:  Try `go get github.com/golang/protobuf/proto`. Then `godep save` to update deps.\ngodep: Error checking some deps.\nBut it worked well on v37 tools/godep@03595abb97a99e98133f9390b9c11e0aecf5f2e8\nPS:\nWhy I don't list all dependence in Godeps.json ?\nWhen I use some package, I don't care what it depend on.\nI just use the top level API.\nSo if I write to Godeps.json, I should update often.\nAnd all dependence in Godeps.json will cause it is hard to understand which package is necessary.\n. @freeformz I test from v45 to v38, all failed.\nBut v37 work.\nI write a test Dockerfile if you want to verify\nhttps://gist.github.com/tsaikd/710fa81c9ca409e7a62e\n```\n$ godep version && godep restore\ngodep v45 (darwin/amd64/go1.5.2)\ngodep: Dep (google.golang.org/appengine) restored, but was unable to load it with error:\n    Package (github.com/golang/protobuf/proto) not found\ngodep: Error checking some deps.\n$ godep version && godep restore\ngodep v44 (darwin/amd64/go1.5.2)\ngodep: Dep (google.golang.org/appengine) restored, but was unable to load it with error:\n    Package (github.com/golang/protobuf/proto) not found\ngodep: Error checking some deps.\n$ godep version && godep restore\ngodep v43 (darwin/amd64/go1.5.2)\ngodep: Dep (google.golang.org/appengine) restored, but was unable to load it with error:\n    Package (github.com/golang/protobuf/proto) not found\ngodep: Error checking some deps.\n$ godep version && godep restore\ngodep v42 (darwin/amd64/go1.5.2)\ngodep: Dep (google.golang.org/appengine) restored, but was unable to load it with error:\n    Package (github.com/golang/protobuf/proto) not found\ngodep: Error checking some deps.\n$ godep version && godep restore\ngodep v41 (darwin/amd64/go1.5.2)\ngodep: Dep (google.golang.org/appengine) restored, but was unable to load it with error:\n    Unable to find dependent package github.com/golang/protobuf/proto in context of /Users/tsaikd/project/go/src/google.golang.org/appengine\ngodep:  This may be because the dependencies were saved with an older version of godep (< v33).\ngodep:  Try go get github.com/golang/protobuf/proto. Then godep save to update deps.\ngodep: Error checking some deps.\n$ godep version && godep restore\ngodep v40 (darwin/amd64/go1.5.2)\ngodep: Dep (google.golang.org/appengine) restored, but was unable to load it with error:\n    Unable to find dependent package github.com/golang/protobuf/proto in context of /Users/tsaikd/project/go/src/google.golang.org/appengine\ngodep:  This may be because the dependencies were saved with an older version of godep (< v33).\ngodep:  Try go get github.com/golang/protobuf/proto. Then godep save to update deps.\ngodep: Error checking some deps.\n$ godep version && godep restore\ngodep v39 (darwin/amd64/go1.5.2)\ngodep: Dep (google.golang.org/appengine) restored, but was unable to load it with error:\n    Unable to find dependent package github.com/golang/protobuf/proto in context of /Users/tsaikd/project/go/src/google.golang.org/appengine\ngodep:  This may be because the dependencies were saved with an older version of godep (< v33).\ngodep:  Try go get github.com/golang/protobuf/proto. Then godep save to update deps.\ngodep: Error checking some deps.\n$ godep version && godep restore\ngodep v38 (darwin/amd64/go1.5.2)\ngodep: Dep (google.golang.org/appengine) restored, but was unable to load it with error:\n    Unable to find dependent package github.com/golang/protobuf/proto in context of /Users/tsaikd/project/go/src/google.golang.org/appengine\ngodep:  This may be because the dependencies were saved with an older version of godep (< v33).\ngodep:  Try go get github.com/golang/protobuf/proto. Then godep save to update deps.\ngodep: Error checking some deps.\n```\n$ godep version && godep restore\ngodep v37 (darwin/amd64/go1.5.2)\n. For example, when I write a nodejs app, I just record necessary dependent packages that I used. Npm will fetch dependencies recursively. In appengine case, why I need to record protobuf? I don't use it. It's the second level dependency. About go get tool, it even forbid to import unused packages.\nIf my use case does not fit the philosophy, just igore it. I can choice the v37 in my project. It works well.\nOne more thing, I use go get after godep restore because I need to fetch packages that I don't record in Godeps.json.\n. This patch cause an issue for me.\nMy build script is like this:\nsh\ngodep restore\ngo get\ngo build\nexample Godeps/Godeps.json:\njson\n{\n        \"GoVersion\": \"go1.5\",\n        \"Deps\": [\n                {\n                        \"ImportPath\": \"google.golang.org/appengine\", \n                        \"Rev\": \"58c0e2a2044a8d1abd8dd1d97939cd74497d0806\"\n                }\n        ]\n}\nThen run build script in docker golang:1.5 (clean environment for GOPATH)\nError message:\ngodep: Dep (google.golang.org/appengine) restored, but was unable to load it with error:\n    Unable to find dependent package github.com/golang/protobuf/proto in context of /go/src/google.golang.org/appengine\ngodep:  This may be because the dependencies were saved with an older version of godep (< v33).\ngodep:  Try `go get github.com/golang/protobuf/proto`. Then `godep save` to update deps.\ngodep: Error checking some deps.\nBut it worked well on v37 tools/godep@03595abb97a99e98133f9390b9c11e0aecf5f2e8\nPS:\nWhy I don't list all dependence in Godeps.json ?\nWhen I use some package, I don't care what it depend on.\nI just use the top level API.\nSo if I write to Godeps.json, I should update often.\nAnd all dependence in Godeps.json will cause it is hard to understand which package is necessary.\n. @freeformz I test from v45 to v38, all failed.\nBut v37 work.\nI write a test Dockerfile if you want to verify\nhttps://gist.github.com/tsaikd/710fa81c9ca409e7a62e\n```\n$ godep version && godep restore\ngodep v45 (darwin/amd64/go1.5.2)\ngodep: Dep (google.golang.org/appengine) restored, but was unable to load it with error:\n    Package (github.com/golang/protobuf/proto) not found\ngodep: Error checking some deps.\n$ godep version && godep restore\ngodep v44 (darwin/amd64/go1.5.2)\ngodep: Dep (google.golang.org/appengine) restored, but was unable to load it with error:\n    Package (github.com/golang/protobuf/proto) not found\ngodep: Error checking some deps.\n$ godep version && godep restore\ngodep v43 (darwin/amd64/go1.5.2)\ngodep: Dep (google.golang.org/appengine) restored, but was unable to load it with error:\n    Package (github.com/golang/protobuf/proto) not found\ngodep: Error checking some deps.\n$ godep version && godep restore\ngodep v42 (darwin/amd64/go1.5.2)\ngodep: Dep (google.golang.org/appengine) restored, but was unable to load it with error:\n    Package (github.com/golang/protobuf/proto) not found\ngodep: Error checking some deps.\n$ godep version && godep restore\ngodep v41 (darwin/amd64/go1.5.2)\ngodep: Dep (google.golang.org/appengine) restored, but was unable to load it with error:\n    Unable to find dependent package github.com/golang/protobuf/proto in context of /Users/tsaikd/project/go/src/google.golang.org/appengine\ngodep:  This may be because the dependencies were saved with an older version of godep (< v33).\ngodep:  Try go get github.com/golang/protobuf/proto. Then godep save to update deps.\ngodep: Error checking some deps.\n$ godep version && godep restore\ngodep v40 (darwin/amd64/go1.5.2)\ngodep: Dep (google.golang.org/appengine) restored, but was unable to load it with error:\n    Unable to find dependent package github.com/golang/protobuf/proto in context of /Users/tsaikd/project/go/src/google.golang.org/appengine\ngodep:  This may be because the dependencies were saved with an older version of godep (< v33).\ngodep:  Try go get github.com/golang/protobuf/proto. Then godep save to update deps.\ngodep: Error checking some deps.\n$ godep version && godep restore\ngodep v39 (darwin/amd64/go1.5.2)\ngodep: Dep (google.golang.org/appengine) restored, but was unable to load it with error:\n    Unable to find dependent package github.com/golang/protobuf/proto in context of /Users/tsaikd/project/go/src/google.golang.org/appengine\ngodep:  This may be because the dependencies were saved with an older version of godep (< v33).\ngodep:  Try go get github.com/golang/protobuf/proto. Then godep save to update deps.\ngodep: Error checking some deps.\n$ godep version && godep restore\ngodep v38 (darwin/amd64/go1.5.2)\ngodep: Dep (google.golang.org/appengine) restored, but was unable to load it with error:\n    Unable to find dependent package github.com/golang/protobuf/proto in context of /Users/tsaikd/project/go/src/google.golang.org/appengine\ngodep:  This may be because the dependencies were saved with an older version of godep (< v33).\ngodep:  Try go get github.com/golang/protobuf/proto. Then godep save to update deps.\ngodep: Error checking some deps.\n```\n$ godep version && godep restore\ngodep v37 (darwin/amd64/go1.5.2)\n. For example, when I write a nodejs app, I just record necessary dependent packages that I used. Npm will fetch dependencies recursively. In appengine case, why I need to record protobuf? I don't use it. It's the second level dependency. About go get tool, it even forbid to import unused packages.\nIf my use case does not fit the philosophy, just igore it. I can choice the v37 in my project. It works well.\nOne more thing, I use go get after godep restore because I need to fetch packages that I don't record in Godeps.json.\n. ",
    "DreadPirateShawn": "Still appears to be failing with godep version 51.\n$ godep version\ngodep v51 (linux/amd64/go1.5.2)\n$ godep restore\ngodep: error restoring dep (github.com/prometheus/client_golang/model): cannot find package \"github.com/prometheus/client_golang/model\" in any of:\n    /usr/local/go/src/github.com/prometheus/client_golang/model (from $GOROOT)\n    /highland/gocode/src/github.com/prometheus/client_golang/model (from $GOPATH)\ngodep: Error restoring some deps. Aborting check.\n{\n        \"ImportPath\": \"github.com/GoogleCloudPlatform/heapster\",\n        \"GoVersion\": \"go1.4.2\",\n        \"Packages\": [\n                \"./...\"\n        ],\n        \"Deps\": [\n                {\n                        \"ImportPath\": \"github.com/prometheus/client_golang/model\",\n                        \"Comment\": \"0.4.0-1-g692492e\",\n                        \"Rev\": \"692492e54b553a81013254cc1fba4b6dd76fad30\"\n                },\n                {\n                        \"ImportPath\": \"github.com/prometheus/client_golang/prometheus\",\n                        \"Comment\": \"0.4.0-1-g692492e\",\n                        \"Rev\": \"692492e54b553a81013254cc1fba4b6dd76fad30\"\n                },\n                {\n                        \"ImportPath\": \"github.com/prometheus/client_golang/text\",\n                        \"Comment\": \"0.4.0-1-g692492e\",\n                        \"Rev\": \"692492e54b553a81013254cc1fba4b6dd76fad30\"\n                },\n                {\n                        \"ImportPath\": \"github.com/prometheus/client_model/go\",\n                        \"Comment\": \"model-0.0.2-12-gfa8ad6f\",\n                        \"Rev\": \"fa8ad6fec33561be4280a8f0514318c79d7f6cb6\"\n                },\n                {\n                        \"ImportPath\": \"github.com/prometheus/procfs\",\n                        \"Rev\": \"490cc6eb5fa45bf8a8b7b73c8bc82a8160e8531d\"\n                }\n        ]\n}\n. Still appears to be failing with godep version 51.\n$ godep version\ngodep v51 (linux/amd64/go1.5.2)\n$ godep restore\ngodep: error restoring dep (github.com/prometheus/client_golang/model): cannot find package \"github.com/prometheus/client_golang/model\" in any of:\n    /usr/local/go/src/github.com/prometheus/client_golang/model (from $GOROOT)\n    /highland/gocode/src/github.com/prometheus/client_golang/model (from $GOPATH)\ngodep: Error restoring some deps. Aborting check.\n{\n        \"ImportPath\": \"github.com/GoogleCloudPlatform/heapster\",\n        \"GoVersion\": \"go1.4.2\",\n        \"Packages\": [\n                \"./...\"\n        ],\n        \"Deps\": [\n                {\n                        \"ImportPath\": \"github.com/prometheus/client_golang/model\",\n                        \"Comment\": \"0.4.0-1-g692492e\",\n                        \"Rev\": \"692492e54b553a81013254cc1fba4b6dd76fad30\"\n                },\n                {\n                        \"ImportPath\": \"github.com/prometheus/client_golang/prometheus\",\n                        \"Comment\": \"0.4.0-1-g692492e\",\n                        \"Rev\": \"692492e54b553a81013254cc1fba4b6dd76fad30\"\n                },\n                {\n                        \"ImportPath\": \"github.com/prometheus/client_golang/text\",\n                        \"Comment\": \"0.4.0-1-g692492e\",\n                        \"Rev\": \"692492e54b553a81013254cc1fba4b6dd76fad30\"\n                },\n                {\n                        \"ImportPath\": \"github.com/prometheus/client_model/go\",\n                        \"Comment\": \"model-0.0.2-12-gfa8ad6f\",\n                        \"Rev\": \"fa8ad6fec33561be4280a8f0514318c79d7f6cb6\"\n                },\n                {\n                        \"ImportPath\": \"github.com/prometheus/procfs\",\n                        \"Rev\": \"490cc6eb5fa45bf8a8b7b73c8bc82a8160e8531d\"\n                }\n        ]\n}\n. ",
    "dcelasun": "\nThis is fine since it's an empty GOPATH\n\nThat's exactly my problem. If you are running Go>1.5, gomail doesn't need that dependency but godep, correctly, still wants to save it anyway. So maybe godep could fetch all such dependencies \"hidden\" behind build tags automatically?\n. @freeformz Any updates on this?\n. > This is fine since it's an empty GOPATH\nThat's exactly my problem. If you are running Go>1.5, gomail doesn't need that dependency but godep, correctly, still wants to save it anyway. So maybe godep could fetch all such dependencies \"hidden\" behind build tags automatically?\n. @freeformz Any updates on this?\n. ",
    "bobbyrullo": "FYI running into this EXACT same problem on go 1.4.2 - seems that godep is not respecting go build tags maybe?\n. FYI running into this EXACT same problem on go 1.4.2 - seems that godep is not respecting go build tags maybe?\n. ",
    "ericchiang": "The issue is that godep running go 1.4.X is looking into a file with a // +build go1.5 tag and finding an import that doesn't exist in go 1.4.X.\nHere's the files that are causing trouble.\n```\n$ head mime.go \n// +build go1.5\npackage gomail\nimport (\n    \"mime\"\n    \"mime/quotedprintable\"\n)\nvar newQPWriter = quotedprintable.NewWriter\n$ head mime_go14.go \n// +build !go1.5\npackage gomail\nimport \"gopkg.in/alexcesaro/quotedprintable.v3\"\nvar newQPWriter = quotedprintable.NewWriter\ntype mimeEncoder struct {\n    quotedprintable.WordEncoder\n```\nThe go tool itself correctly states that mime/quotedprintable isn't part of the imports for this package when using go 1.4.X\n$ go version gopkg.in/gomail.v2\ngo version go1.4.3 linux/amd64\n$ go list -f '{{.Imports}}'\n[bytes crypto/tls encoding/base64 errors fmt gopkg.in/alexcesaro/quotedprintable.v3 io mime mime/multipart net net/mail net/smtp os path/filepath time]\nHowever godep thinks that mime/quotedprintable is a dependency when running go 1.4.X\n. Okay that makes sense. Then the issue here is that mime/quotedprintable isn't a go getable package since it's part of the standard library.\n$ godep restore\ngodep: Dep (gopkg.in/gomail.v2) restored, but was unable to load it with error:\n    Unable to find dependent package mime/quotedprintable in context of /home/eric/src/gopkg.in/gomail.v2\ngodep:  This may be because the dependencies were saved with an older version of godep (< v33).\ngodep:  Try `go get mime/quotedprintable`. Then `godep save` to update deps.\ngodep: Error checking some deps.\nCan godep keep a white list of standard library packages for all go versions, then skip these when attempting to restore a package?\n. bump @freeformz (https://github.com/google/cadvisor/pull/1162#issuecomment-197068631)\n. > So my main concern with this is Godep.json churn. But that's probably un-avoidable if we do want to record the version string.\nThe version would only be changed when you write to Godeps.json (godep save or godep get). So it's inherently going to be part of some larger diff.\n\nw/o using this version elsewhere I'm not sure this is all that useful.\n\nHard to use it until the version's already in Godeps.json :)\n\nAnd I can see trying to enforce the version to add overhead to interactions with developers. But maybe that overhead is already being imposed, just in an ad-hoc way?\n\nYeah that's definitely what I'm getting at. We already have to enforce versions with developers since godep has been around a while (I worked with someone with v20something installed yesterday).\nBut also it's really useful to know when you're running a more recent version of godep as well. When I run a godep save and the diff of the Godeps directory has a bunch of files removed that had nothing to do with the packages I was trying to alter, it's very hard to know if that's user error or because someone was using a really old version of Godeps for the last commit.\nI can see the biggest annoyance begin when you get a commit when the version goes from \"v62\" to \"v61\". But again, this should only happen when you're updating a vendored package anyway and those diffs are generally pretty big.\n. > I guess looking at the git history and the comments would probably tell you enough though about what was done?\nHow so? Without the version in the Godeps.json file we can't tell what version of godep was used to generate which commit.\n. FYI this change also dramatically reduces the memory usage of godep restore (~3 GB) when using it against the Kubernetes repo.. The issue is that godep running go 1.4.X is looking into a file with a // +build go1.5 tag and finding an import that doesn't exist in go 1.4.X.\nHere's the files that are causing trouble.\n```\n$ head mime.go \n// +build go1.5\npackage gomail\nimport (\n    \"mime\"\n    \"mime/quotedprintable\"\n)\nvar newQPWriter = quotedprintable.NewWriter\n$ head mime_go14.go \n// +build !go1.5\npackage gomail\nimport \"gopkg.in/alexcesaro/quotedprintable.v3\"\nvar newQPWriter = quotedprintable.NewWriter\ntype mimeEncoder struct {\n    quotedprintable.WordEncoder\n```\nThe go tool itself correctly states that mime/quotedprintable isn't part of the imports for this package when using go 1.4.X\n$ go version gopkg.in/gomail.v2\ngo version go1.4.3 linux/amd64\n$ go list -f '{{.Imports}}'\n[bytes crypto/tls encoding/base64 errors fmt gopkg.in/alexcesaro/quotedprintable.v3 io mime mime/multipart net net/mail net/smtp os path/filepath time]\nHowever godep thinks that mime/quotedprintable is a dependency when running go 1.4.X\n. Okay that makes sense. Then the issue here is that mime/quotedprintable isn't a go getable package since it's part of the standard library.\n$ godep restore\ngodep: Dep (gopkg.in/gomail.v2) restored, but was unable to load it with error:\n    Unable to find dependent package mime/quotedprintable in context of /home/eric/src/gopkg.in/gomail.v2\ngodep:  This may be because the dependencies were saved with an older version of godep (< v33).\ngodep:  Try `go get mime/quotedprintable`. Then `godep save` to update deps.\ngodep: Error checking some deps.\nCan godep keep a white list of standard library packages for all go versions, then skip these when attempting to restore a package?\n. bump @freeformz (https://github.com/google/cadvisor/pull/1162#issuecomment-197068631)\n. > So my main concern with this is Godep.json churn. But that's probably un-avoidable if we do want to record the version string.\nThe version would only be changed when you write to Godeps.json (godep save or godep get). So it's inherently going to be part of some larger diff.\n\nw/o using this version elsewhere I'm not sure this is all that useful.\n\nHard to use it until the version's already in Godeps.json :)\n\nAnd I can see trying to enforce the version to add overhead to interactions with developers. But maybe that overhead is already being imposed, just in an ad-hoc way?\n\nYeah that's definitely what I'm getting at. We already have to enforce versions with developers since godep has been around a while (I worked with someone with v20something installed yesterday).\nBut also it's really useful to know when you're running a more recent version of godep as well. When I run a godep save and the diff of the Godeps directory has a bunch of files removed that had nothing to do with the packages I was trying to alter, it's very hard to know if that's user error or because someone was using a really old version of Godeps for the last commit.\nI can see the biggest annoyance begin when you get a commit when the version goes from \"v62\" to \"v61\". But again, this should only happen when you're updating a vendored package anyway and those diffs are generally pretty big.\n. > I guess looking at the git history and the comments would probably tell you enough though about what was done?\nHow so? Without the version in the Godeps.json file we can't tell what version of godep was used to generate which commit.\n. FYI this change also dramatically reduces the memory usage of godep restore (~3 GB) when using it against the Kubernetes repo.. ",
    "Entalpi": "This helped resolve it; https://forums.docker.com/t/godep-go-install-not-working/2607\n\n. This helped resolve it; https://forums.docker.com/t/godep-go-install-not-working/2607\n\n. ",
    "mikeatlas": "I've hit this as well while attempting cross platform compilations on our CI build server. I added a go get golang.org/x/sys/unix call prior to the GOOS=x GOARCH=y go build step, and it resolved the \"error\"... although it does seem superfluous to make a call to fetch a core Go package and/or include it in our Godeps. \n. I've hit this as well while attempting cross platform compilations on our CI build server. I added a go get golang.org/x/sys/unix call prior to the GOOS=x GOARCH=y go build step, and it resolved the \"error\"... although it does seem superfluous to make a call to fetch a core Go package and/or include it in our Godeps. \n. ",
    "geofffranks": "Also ran into this with github.com/mattn/go-isatty. GOOS=solaris godep save ./... got me the right deps, but according to #161 the platform-specific fetching was fixed with the latest versions of GoDep. \nPulling from master on godep, and re-installing resolved this for me. maybe take a look at that?\n. Also ran into this with github.com/mattn/go-isatty. GOOS=solaris godep save ./... got me the right deps, but according to #161 the platform-specific fetching was fixed with the latest versions of GoDep. \nPulling from master on godep, and re-installing resolved this for me. maybe take a look at that?\n. ",
    "xealot": "I'm seeing this during save, it's quite confusing.\n$ godep version\ngodep v55 (darwin/amd64/go1.6)\n$ godep save ./cmd/...\ngodep: Package (golang.org/x/sys/unix) not found\nIs this because go get doesn't bother installing golang.org/x/sys/unix anymore?\n. I'm seeing this during save, it's quite confusing.\n$ godep version\ngodep v55 (darwin/amd64/go1.6)\n$ godep save ./cmd/...\ngodep: Package (golang.org/x/sys/unix) not found\nIs this because go get doesn't bother installing golang.org/x/sys/unix anymore?\n. ",
    "andreleblanc-wf": "I am running go 1.6 and godep v56, and still having this issue with logrus:\n```\n$ godep version\ngodep v56 (darwin/amd64/go1.6)\n$ godep restore\ngodep: Dep (github.com/Sirupsen/logrus) restored, but was unable to load it with error:\n    Package (golang.org/x/sys/unix) not found\ngodep: Error checking some deps.\n```\n. I am running go 1.6 and godep v56, and still having this issue with logrus:\n```\n$ godep version\ngodep v56 (darwin/amd64/go1.6)\n$ godep restore\ngodep: Dep (github.com/Sirupsen/logrus) restored, but was unable to load it with error:\n    Package (golang.org/x/sys/unix) not found\ngodep: Error checking some deps.\n```\n. ",
    "roxma": "I had the same issue. Saidly, We Tianchao people can't asscess golang.org directly, and I had to download the package via proxy manually to solve the dependency issue...\n. the terminals_solaris.go  in the Logrus package has a build constraints // +build solaris, which is where golang.org/x/sys/unix get imported.\nI build my project on centos,, so I don't need unix package for it, but godep still claims Unable to find dependent package golang.org/x/sys/unix\nShould we add a -b option into godep to generate dependency following those build constraints?\n. I had the same issue. Saidly, We Tianchao people can't asscess golang.org directly, and I had to download the package via proxy manually to solve the dependency issue...\n. the terminals_solaris.go  in the Logrus package has a build constraints // +build solaris, which is where golang.org/x/sys/unix get imported.\nI build my project on centos,, so I don't need unix package for it, but godep still claims Unable to find dependent package golang.org/x/sys/unix\nShould we add a -b option into godep to generate dependency following those build constraints?\n. ",
    "blainsmith": "Any updates on this? Running Go1.6 and Godep 70 on OSX and still getting this error with godep save ./...\n. Any updates on this? Running Go1.6 and Godep 70 on OSX and still getting this error with godep save ./...\n. ",
    "diogogmt": "I'm also having problems with the golang.org/x/sys/unix when saving the applications dependencies.\n@freeformz \nHowever, would this problem be related to vendoring libraries that also do vendoring?\n. I'm also having problems with the golang.org/x/sys/unix when saving the applications dependencies.\n@freeformz \nHowever, would this problem be related to vendoring libraries that also do vendoring?\n. ",
    "denyskoch": "getting same error [godep: Package (golang.org/x/sys/unix) not found]\n- OSX 10.11.6\n$ godep version\n  godep v74 (darwin/amd64/go1.7)\n$ go version\n  go version go1.7 darwin/amd64\n. getting same error [godep: Package (golang.org/x/sys/unix) not found]\n- OSX 10.11.6\n$ godep version\n  godep v74 (darwin/amd64/go1.7)\n$ go version\n  go version go1.7 darwin/amd64\n. ",
    "thomasmodeneis": "Weird, after updating from 1.6.2 to 1.7 on macos 10.8.x I'm running into the same error\n$ godep save\ngodep: WARNING: Godep workspaces (./Godeps/_workspace) are deprecated and support for them will be removed when go1.8 is released.\ngodep: WARNING: Go version (go1.7) & $GO15VENDOREXPERIMENT= wants to enable the vendor experiment, but disabling because a Godep workspace (Godeps/_workspace) exists\ngodep: Package (golang.org/x/sys/unix) not found\nI got it fixed after deleting /usr/local/go and doing a clean instalation followed by go get golang.org/x/sys/unix\n. Weird, after updating from 1.6.2 to 1.7 on macos 10.8.x I'm running into the same error\n$ godep save\ngodep: WARNING: Godep workspaces (./Godeps/_workspace) are deprecated and support for them will be removed when go1.8 is released.\ngodep: WARNING: Go version (go1.7) & $GO15VENDOREXPERIMENT= wants to enable the vendor experiment, but disabling because a Godep workspace (Godeps/_workspace) exists\ngodep: Package (golang.org/x/sys/unix) not found\nI got it fixed after deleting /usr/local/go and doing a clean instalation followed by go get golang.org/x/sys/unix\n. ",
    "hadv": "I have the same problem when building docker image. It can be solved by adding below go get\nRUN go get golang.org/x/sys/unix\n. I have the same problem here :(\ngodep: Package (context) not found\n. @freeformz so, how can we use godep for go1.6? Thank you!\nI dont have the problem on ubuntu. the godep: Package (context) not found in on my macbook\n. @freeformz thank you, I updated the latest version of godep then it's ok now! \n. I have the same problem when building docker image. It can be solved by adding below go get\nRUN go get golang.org/x/sys/unix\n. I have the same problem here :(\ngodep: Package (context) not found\n. @freeformz so, how can we use godep for go1.6? Thank you!\nI dont have the problem on ubuntu. the godep: Package (context) not found in on my macbook\n. @freeformz thank you, I updated the latest version of godep then it's ok now! \n. ",
    "ashcrow": "go get golang.org/x/sys/unix\nDoesn't seem to work anymore as it's become a redirect to https://godoc.org/golang.org/x/sys/unix. go get golang.org/x/sys/unix\nDoesn't seem to work anymore as it's become a redirect to https://godoc.org/golang.org/x/sys/unix. ",
    "caojunxyz": "I encountered the same problem, my environment is:\nmacOS 10.12.1\ngodep v75 (darwin/amd64/go1.7)\ngo version go1.7 darwin/amd64\ngovendor works well.\nWhen I ran command: go get -u -v golang.org/x/sys/unix, it also failed with output:\nFetching https://golang.org/x/sys/unix?go-get=1\nhttps fetch failed: Get https://golang.org/x/sys/unix?go-get=1: dial tcp 216.239.37.1:443: i/o timeout\npackage golang.org/x/sys/unix: unrecognized import path \"golang.org/x/sys/unix\" (https fetch: Get https://golang.org/x/sys/unix?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)\n. I encountered the same problem, my environment is:\nmacOS 10.12.1\ngodep v75 (darwin/amd64/go1.7)\ngo version go1.7 darwin/amd64\ngovendor works well.\nWhen I ran command: go get -u -v golang.org/x/sys/unix, it also failed with output:\nFetching https://golang.org/x/sys/unix?go-get=1\nhttps fetch failed: Get https://golang.org/x/sys/unix?go-get=1: dial tcp 216.239.37.1:443: i/o timeout\npackage golang.org/x/sys/unix: unrecognized import path \"golang.org/x/sys/unix\" (https fetch: Get https://golang.org/x/sys/unix?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)\n. ",
    "wanghaoran1988": "I met the problem: \ngodep v79 (linux/amd64/go1.7.1\ngo version go1.8 linux/amd64\n```\ngo get golang.org/x/sys/unix                                       \ncd /home/haoran/workspace/devel/src/golang.org/x/sys; git pull --ff-only\nYou are not currently on a branch.\nPlease specify which branch you want to merge with.\nSee git-pull(1) for details.\ngit pull <remote> <branch>\n\npackage golang.org/x/sys/unix: exit status 1\n```\n. After I delete the pakage, and run go get again, it works know. :). I met the problem: \ngodep v79 (linux/amd64/go1.7.1\ngo version go1.8 linux/amd64\n```\ngo get golang.org/x/sys/unix                                       \ncd /home/haoran/workspace/devel/src/golang.org/x/sys; git pull --ff-only\nYou are not currently on a branch.\nPlease specify which branch you want to merge with.\nSee git-pull(1) for details.\ngit pull <remote> <branch>\n\npackage golang.org/x/sys/unix: exit status 1\n```\n. After I delete the pakage, and run go get again, it works know. :). ",
    "dmonay": "I am getting the same error. @ashcrow if the package is no longer hosted at golang.org why do other packages still reference that import path?\ngodep: error downloading dep (golang.org/x/sys/unix): unable to determine git status exit status 128\nWhen I try to go get the package directly, I get this error:\n$ go get -v -u golang.org/x/sys/...\nFetching https://golang.org/x/sys?go-get=1\nhttps fetch failed: Get https://golang.org/x/sys?go-get=1: net/http: TLS handshake timeout\npackage golang.org/x/sys/...: unrecognized import path \"golang.org/x/sys/...\" (https fetch: Get https://golang.org/x/sys?go-get=1: net/http: TLS handshake timeout)\nThe odd part is that when godep restore is running/hanging, I can't access https sites on my entire system (i.e. any browser, curl, etc). I think godep is hanging because of the TLS handshake timeout, but I don't know where this timeout is stemming from - is it something on my system (like a misconfigured certificate) or is it a problem with a Go tool, or is it an issue with the code repositories' hosting?\nThe TLS timeout happens with this package as well:\n$ go get -v gopkg.in/yaml.v2\nFetching https://gopkg.in/yaml.v2?go-get=1\nhttps fetch failed: Get https://gopkg.in/yaml.v2?go-get=1: net/http: TLS handshake timeout\npackage gopkg.in/yaml.v2: unrecognized import path \"gopkg.in/yaml.v2\" (https fetch: Get https://gopkg.in/yaml.v2?go-get=1: net/http: TLS handshake timeout). Turns out this was an issue with OpenDNS https://github.com/fsnotify/fsnotify/issues/204#issuecomment-294367347. I am getting the same error. @ashcrow if the package is no longer hosted at golang.org why do other packages still reference that import path?\ngodep: error downloading dep (golang.org/x/sys/unix): unable to determine git status exit status 128\nWhen I try to go get the package directly, I get this error:\n$ go get -v -u golang.org/x/sys/...\nFetching https://golang.org/x/sys?go-get=1\nhttps fetch failed: Get https://golang.org/x/sys?go-get=1: net/http: TLS handshake timeout\npackage golang.org/x/sys/...: unrecognized import path \"golang.org/x/sys/...\" (https fetch: Get https://golang.org/x/sys?go-get=1: net/http: TLS handshake timeout)\nThe odd part is that when godep restore is running/hanging, I can't access https sites on my entire system (i.e. any browser, curl, etc). I think godep is hanging because of the TLS handshake timeout, but I don't know where this timeout is stemming from - is it something on my system (like a misconfigured certificate) or is it a problem with a Go tool, or is it an issue with the code repositories' hosting?\nThe TLS timeout happens with this package as well:\n$ go get -v gopkg.in/yaml.v2\nFetching https://gopkg.in/yaml.v2?go-get=1\nhttps fetch failed: Get https://gopkg.in/yaml.v2?go-get=1: net/http: TLS handshake timeout\npackage gopkg.in/yaml.v2: unrecognized import path \"gopkg.in/yaml.v2\" (https fetch: Get https://gopkg.in/yaml.v2?go-get=1: net/http: TLS handshake timeout). Turns out this was an issue with OpenDNS https://github.com/fsnotify/fsnotify/issues/204#issuecomment-294367347. ",
    "mattberther": "I'm seeing similar errors. Has anyone identified a solution?\n$ go get -v -u golang.org/x/tools/cmd/gorename\nFetching https://golang.org/x/tools/cmd/gorename?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/cmd/gorename?go-get=1: dial tcp 216.58.216.241:443: connect: host is down\npackage golang.org/x/tools/cmd/gorename: unrecognized import path \"golang.org/x/tools/cmd/gorename\" (https fetch: Get https://golang.org/x/tools/cmd/gorename?go-get=1: dial tcp 216.58.216.241:443: connect: host is down). Turns out mine was an issue with Little Snitch (a network filter), although Im still not clear why.. I'm seeing similar errors. Has anyone identified a solution?\n$ go get -v -u golang.org/x/tools/cmd/gorename\nFetching https://golang.org/x/tools/cmd/gorename?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/cmd/gorename?go-get=1: dial tcp 216.58.216.241:443: connect: host is down\npackage golang.org/x/tools/cmd/gorename: unrecognized import path \"golang.org/x/tools/cmd/gorename\" (https fetch: Get https://golang.org/x/tools/cmd/gorename?go-get=1: dial tcp 216.58.216.241:443: connect: host is down). Turns out mine was an issue with Little Snitch (a network filter), although Im still not clear why.. ",
    "lziest": "Our repo is https://github.com/cloudflare/cfssl\nI guess the following line triggers the error in CI. I need to double-check with my local env\nhttps://github.com/cloudflare/cfssl/blob/master/Godeps/Godeps.json#L111\n. I guess we have solved the problem, apparently the package 'goose' in question is not longer used in our code. Removing that in Godeps.json solves the problem. and godep is now more strict about it?\n. Our repo is https://github.com/cloudflare/cfssl\nI guess the following line triggers the error in CI. I need to double-check with my local env\nhttps://github.com/cloudflare/cfssl/blob/master/Godeps/Godeps.json#L111\n. I guess we have solved the problem, apparently the package 'goose' in question is not longer used in our code. Removing that in Godeps.json solves the problem. and godep is now more strict about it?\n. ",
    "c-knowles": "Seems to be working now, thanks! Any way to add a test for it?\n. How about with running godep save -d ./...? Does the debug mode reveal anything?\n. Seems to be working now, thanks! Any way to add a test for it?\n. How about with running godep save -d ./...? Does the debug mode reveal anything?\n. ",
    "DamienFontaine": "Same problem with Godep v55 and Golang 1.6.\nversionString() godep v55 (windows/amd64/go1.6)\nmajorGoVersion go1.6\nVendorExperiment true\nsep /vendor/\ndotPackageImportPath: github.com/DamienFontaine/lunarc\ndotPackageDir: C:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\lunarc\nLoadPackages [.]\nlistPackage .\nfindDirForPath . <nil>\nFilling package: github.com/DamienFontaine/lunarc from C:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\lunarc\nC:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\lunarc\\handlers.go\nC:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\lunarc\\handlers_test.go\nC:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\lunarc\\lunarc_test.go\nC:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\lunarc\\server.go\nC:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\lunarc\\server_test.go\nLooking For Package: . in C:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\lunarc\n&build.Package{\n    Dir:            \"C:\\\\Users\\\\dfontaine\\\\go\\\\src\\\\github.com\\\\DamienFontaine\\\\lunarc\",\n    Name:           \"\",\n    ImportComment:  \"\",\n    Doc:            \"\",\n    ImportPath:     \"github.com/DamienFontaine/lunarc\",\n    Root:           \"C:\\\\Users\\\\dfontaine\\\\Go\",\n    SrcRoot:        \"C:\\\\Users\\\\dfontaine\\\\Go\\\\src\",\n    PkgRoot:        \"C:\\\\Users\\\\dfontaine\\\\Go\\\\pkg\",\n    PkgTargetRoot:  \"\",\n    BinDir:         \"C:\\\\Users\\\\dfontaine\\\\Go\\\\bin\",\n    Goroot:         false,\n    PkgObj:         \"\",\n    AllTags:        nil,\n    ConflictDir:    \"\",\n    GoFiles:        {\"handlers.go\", \"server.go\"},\n    CgoFiles:       nil,\n    IgnoredGoFiles: nil,\n    InvalidGoFiles: nil,\n    CFiles:         nil,\n    CXXFiles:       nil,\n    MFiles:         nil,\n    HFiles:         nil,\n    SFiles:         nil,\n    SwigFiles:      nil,\n    SwigCXXFiles:   nil,\n    SysoFiles:      nil,\n    CgoCFLAGS:      nil,\n    CgoCPPFLAGS:    nil,\n    CgoCXXFLAGS:    nil,\n    CgoLDFLAGS:     nil,\n    CgoPkgConfig:   nil,\n    Imports:        {\"crypto/tls\", \"errors\", \"fmt\", \"github.com/DamienFontaine/lunarc/config\", \"github.com/dgrijalva/jwt-go\", \"log\", \"net\", \"net/http\", \"os\", \"syscall\"},\n    ImportPos:      {},\n    TestGoFiles:    {\"handlers_test.go\", \"lunarc_test.go\", \"server_test.go\"},\n    TestImports:    {\"crypto/tls\", \"github.com/DamienFontaine/lunarc/config\", \"github.com/dgrijalva/jwt-go\", \"golang.org/x/net/http2\", \"log\", \"net\", \"net/http\", \"net/http/httptest\", \"os\", \"strings\", \"testing\", \"time\"},\n    TestImportPos:  {},\n    XTestGoFiles:   nil,\n    XTestImports:   nil,\n    XTestImportPos: {},\n}\nAdding pc: C:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\lunarc crypto/tls\nAdding pc: C:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\lunarc errors\nAdding pc: C:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\lunarc fmt\nAdding pc: C:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\lunarc github.com/DamienFontaine/lunarc/config\nAdding pc: C:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\lunarc github.com/dgrijalva/jwt-go\nAdding pc: C:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\lunarc log\nAdding pc: C:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\lunarc net\nAdding pc: C:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\lunarc net/http\nAdding pc: C:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\lunarc os\nAdding pc: C:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\lunarc syscall\nProcessing import crypto/tls for C:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\lunarc\nfindDirForPath crypto/tls &{C:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\lunarc    github.com/DamienFontaine/lunarc C:\\Users\\dfontaine\\Go C:\\Users\\dfontaine\\Go\\src C:\\Users\\dfontaine\\Go\\pkg  C:\\Users\\dfontaine\\Go\\bin false  []  [handlers.go server.go] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [crypto/tls errors fmt github.com/DamienFontaine/lunarc/config github.com/dgrijalva/jwt-go log net net/http os syscall] map[] [handlers_test.go lunarc_test.go server_test.go] [crypto/tls github.com/DamienFontaine/lunarc/config github.com/dgrijalva/jwt-go golang.org/x/net/http2 log net net/http net/http/httptest os strings testing time] map[] [] [] map[]}\nresolving vendor posibilities: C:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\lunarc C:\\Users\\dfontaine\\Go\nAdding search dir: C:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\lunarc\\vendor\\crypto\\tls\nAdding search dir: C:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\vendor\\crypto\\tls\nAdding search dir: C:\\Users\\dfontaine\\go\\src\\github.com\\vendor\\crypto\\tls\nAdding search dir: C:\\Users\\dfontaine\\go\\src\\vendor\\crypto\\tls\nAdding search dir: C:\\Users\\dfontaine\\go\\vendor\\crypto\\tls\nAdding search dir: C:\\Users\\dfontaine\\vendor\\crypto\\tls\nAdding search dir: C:\\Users\\vendor\\crypto\\tls\nAdding search dir: C:\\vendor\\crypto\\tls\nAdding search dir: C:\\vendor\\crypto\\tls\nAdding search dir: C:\\vendor\\crypto\\tls\nAdding search dir: C:\\vendor\\crypto\\tls\nAdding search dir: C:\\vendor\\crypto\\tls\nAdding search dir: C:\\vendor\\crypto\\tls\nAdding search dir: C:\\vendor\\crypto\\tls\nAdding search dir: C:\\vendor\\crypto\\tls\nAdding search dir: C:\\vendor\\crypto\\tls\nAdding search dir: C:\\vendor\\crypto\\tls\nAdding search dir: C:\\vendor\\crypto\\tls\nAdding search dir: C:\\vendor\\crypto\\tls\nAdding search dir: C:\\vendor\\crypto\\tls\nAdding search dir: C:\\vendor\\crypto\\tls\nAdding search dir: C:\\vendor\\crypto\\tls\nAdding search dir: C:\\vendor\\crypto\\tls\nAdding search dir: C:\\vendor\\crypto\\tls\nAdding search dir: C:\\vendor\\crypto\\tls\n. @freeformz It works, thanks !\n. Same problem with Godep v55 and Golang 1.6.\nversionString() godep v55 (windows/amd64/go1.6)\nmajorGoVersion go1.6\nVendorExperiment true\nsep /vendor/\ndotPackageImportPath: github.com/DamienFontaine/lunarc\ndotPackageDir: C:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\lunarc\nLoadPackages [.]\nlistPackage .\nfindDirForPath . <nil>\nFilling package: github.com/DamienFontaine/lunarc from C:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\lunarc\nC:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\lunarc\\handlers.go\nC:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\lunarc\\handlers_test.go\nC:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\lunarc\\lunarc_test.go\nC:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\lunarc\\server.go\nC:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\lunarc\\server_test.go\nLooking For Package: . in C:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\lunarc\n&build.Package{\n    Dir:            \"C:\\\\Users\\\\dfontaine\\\\go\\\\src\\\\github.com\\\\DamienFontaine\\\\lunarc\",\n    Name:           \"\",\n    ImportComment:  \"\",\n    Doc:            \"\",\n    ImportPath:     \"github.com/DamienFontaine/lunarc\",\n    Root:           \"C:\\\\Users\\\\dfontaine\\\\Go\",\n    SrcRoot:        \"C:\\\\Users\\\\dfontaine\\\\Go\\\\src\",\n    PkgRoot:        \"C:\\\\Users\\\\dfontaine\\\\Go\\\\pkg\",\n    PkgTargetRoot:  \"\",\n    BinDir:         \"C:\\\\Users\\\\dfontaine\\\\Go\\\\bin\",\n    Goroot:         false,\n    PkgObj:         \"\",\n    AllTags:        nil,\n    ConflictDir:    \"\",\n    GoFiles:        {\"handlers.go\", \"server.go\"},\n    CgoFiles:       nil,\n    IgnoredGoFiles: nil,\n    InvalidGoFiles: nil,\n    CFiles:         nil,\n    CXXFiles:       nil,\n    MFiles:         nil,\n    HFiles:         nil,\n    SFiles:         nil,\n    SwigFiles:      nil,\n    SwigCXXFiles:   nil,\n    SysoFiles:      nil,\n    CgoCFLAGS:      nil,\n    CgoCPPFLAGS:    nil,\n    CgoCXXFLAGS:    nil,\n    CgoLDFLAGS:     nil,\n    CgoPkgConfig:   nil,\n    Imports:        {\"crypto/tls\", \"errors\", \"fmt\", \"github.com/DamienFontaine/lunarc/config\", \"github.com/dgrijalva/jwt-go\", \"log\", \"net\", \"net/http\", \"os\", \"syscall\"},\n    ImportPos:      {},\n    TestGoFiles:    {\"handlers_test.go\", \"lunarc_test.go\", \"server_test.go\"},\n    TestImports:    {\"crypto/tls\", \"github.com/DamienFontaine/lunarc/config\", \"github.com/dgrijalva/jwt-go\", \"golang.org/x/net/http2\", \"log\", \"net\", \"net/http\", \"net/http/httptest\", \"os\", \"strings\", \"testing\", \"time\"},\n    TestImportPos:  {},\n    XTestGoFiles:   nil,\n    XTestImports:   nil,\n    XTestImportPos: {},\n}\nAdding pc: C:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\lunarc crypto/tls\nAdding pc: C:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\lunarc errors\nAdding pc: C:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\lunarc fmt\nAdding pc: C:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\lunarc github.com/DamienFontaine/lunarc/config\nAdding pc: C:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\lunarc github.com/dgrijalva/jwt-go\nAdding pc: C:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\lunarc log\nAdding pc: C:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\lunarc net\nAdding pc: C:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\lunarc net/http\nAdding pc: C:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\lunarc os\nAdding pc: C:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\lunarc syscall\nProcessing import crypto/tls for C:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\lunarc\nfindDirForPath crypto/tls &{C:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\lunarc    github.com/DamienFontaine/lunarc C:\\Users\\dfontaine\\Go C:\\Users\\dfontaine\\Go\\src C:\\Users\\dfontaine\\Go\\pkg  C:\\Users\\dfontaine\\Go\\bin false  []  [handlers.go server.go] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [crypto/tls errors fmt github.com/DamienFontaine/lunarc/config github.com/dgrijalva/jwt-go log net net/http os syscall] map[] [handlers_test.go lunarc_test.go server_test.go] [crypto/tls github.com/DamienFontaine/lunarc/config github.com/dgrijalva/jwt-go golang.org/x/net/http2 log net net/http net/http/httptest os strings testing time] map[] [] [] map[]}\nresolving vendor posibilities: C:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\lunarc C:\\Users\\dfontaine\\Go\nAdding search dir: C:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\lunarc\\vendor\\crypto\\tls\nAdding search dir: C:\\Users\\dfontaine\\go\\src\\github.com\\DamienFontaine\\vendor\\crypto\\tls\nAdding search dir: C:\\Users\\dfontaine\\go\\src\\github.com\\vendor\\crypto\\tls\nAdding search dir: C:\\Users\\dfontaine\\go\\src\\vendor\\crypto\\tls\nAdding search dir: C:\\Users\\dfontaine\\go\\vendor\\crypto\\tls\nAdding search dir: C:\\Users\\dfontaine\\vendor\\crypto\\tls\nAdding search dir: C:\\Users\\vendor\\crypto\\tls\nAdding search dir: C:\\vendor\\crypto\\tls\nAdding search dir: C:\\vendor\\crypto\\tls\nAdding search dir: C:\\vendor\\crypto\\tls\nAdding search dir: C:\\vendor\\crypto\\tls\nAdding search dir: C:\\vendor\\crypto\\tls\nAdding search dir: C:\\vendor\\crypto\\tls\nAdding search dir: C:\\vendor\\crypto\\tls\nAdding search dir: C:\\vendor\\crypto\\tls\nAdding search dir: C:\\vendor\\crypto\\tls\nAdding search dir: C:\\vendor\\crypto\\tls\nAdding search dir: C:\\vendor\\crypto\\tls\nAdding search dir: C:\\vendor\\crypto\\tls\nAdding search dir: C:\\vendor\\crypto\\tls\nAdding search dir: C:\\vendor\\crypto\\tls\nAdding search dir: C:\\vendor\\crypto\\tls\nAdding search dir: C:\\vendor\\crypto\\tls\nAdding search dir: C:\\vendor\\crypto\\tls\nAdding search dir: C:\\vendor\\crypto\\tls\n. @freeformz It works, thanks !\n. ",
    "barakmich": "+1 for this, or a similar fix. My Travis builds are failing because of this (testing against Go tip).\n. +1 for this, or a similar fix. My Travis builds are failing because of this (testing against Go tip).\n. ",
    "zchee": "@freeformz Thanks merged.\n\nDo you think we should record the sha?\n\nYes. Since Golang recent change of cgo often, I also want sha.\nBecause I wanted to run test of travis, First it was pr only in 'devel'\n. @freeformz Thanks merged.\n\nDo you think we should record the sha?\n\nYes. Since Golang recent change of cgo often, I also want sha.\nBecause I wanted to run test of travis, First it was pr only in 'devel'\n. ",
    "mitake": "@freeformz thanks for your review. I'll add a new flag for the purpose and update this PR later.\n. @freeformz updated, the new PR adds a new flag '-T' to godep. With the option, godep skips packages required by test files (-T must not be used with -t at the same time). I also added a test case for the option.\n. @freeformz sorry, I forgot to add the change for test :( I'll update this PR later.\n. @freeformz updated, could you take a look?\n. @freeformz updated, the new version lets restore command check GOPATH in the head of runRestore(). Could you take a look?\n. oooops... really sorry, I filed in a different project :(\n. @freeformz thanks for your review. I'll add a new flag for the purpose and update this PR later.\n. @freeformz updated, the new PR adds a new flag '-T' to godep. With the option, godep skips packages required by test files (-T must not be used with -t at the same time). I also added a test case for the option.\n. @freeformz sorry, I forgot to add the change for test :( I'll update this PR later.\n. @freeformz updated, could you take a look?\n. @freeformz updated, the new version lets restore command check GOPATH in the head of runRestore(). Could you take a look?\n. oooops... really sorry, I filed in a different project :(\n. ",
    "drekar": "That works as well.  I was considering \"devel\" as a completely separate case from released version 1.6 for clarity and potentially divergent behavior from devel and the released, tagged version 1.6.  Future versions of 'devel' may not use the environment variable at all.\nI can make that change.\n. That should do 'er then.  Thanks!\n. That works as well.  I was considering \"devel\" as a completely separate case from released version 1.6 for clarity and potentially divergent behavior from devel and the released, tagged version 1.6.  Future versions of 'devel' may not use the environment variable at all.\nI can make that change.\n. That should do 'er then.  Thanks!\n. ",
    "kevinburkeshyp": "@freeformz running into this same problem... just want to be sure, the recommended/only workaround is to blow away Godeps? \n. @freeformz running into this same problem... just want to be sure, the recommended/only workaround is to blow away Godeps? \n. ",
    "radeksimko": "I also ran into this. Tried godep update github.com/aws/aws-sdk-go/... and there was no change in the /vendor directory at all. The -v argument returned the following:\nsh\ngodep: not in manifest: github.com/aws/aws-go-sdk/...\ngodep: no packages can be updated\nI just ended up running the following sequence of commands:\n``` sh\ngodep restore\nRemove all occurrences of \"ImportPath\": \"github.com/aws/aws-sdk-go/aws from Godeps/Godeps.json\nRun git checkout v1.1.15 from $GOPATH/src/github.com/aws/aws-go-sdk\ngodep save ./...\n```\nwhich did update both Godeps/Godeps.json and the /vendor directory.\n. I also ran into this. Tried godep update github.com/aws/aws-sdk-go/... and there was no change in the /vendor directory at all. The -v argument returned the following:\nsh\ngodep: not in manifest: github.com/aws/aws-go-sdk/...\ngodep: no packages can be updated\nI just ended up running the following sequence of commands:\n``` sh\ngodep restore\nRemove all occurrences of \"ImportPath\": \"github.com/aws/aws-sdk-go/aws from Godeps/Godeps.json\nRun git checkout v1.1.15 from $GOPATH/src/github.com/aws/aws-go-sdk\ngodep save ./...\n```\nwhich did update both Godeps/Godeps.json and the /vendor directory.\n. ",
    "GarethLewin": "The solution we have come up with is to cycle between\ngodep save ./...\ngodep update github.com/aws/aws-sdk-go/...\nuntil no changes happen in the vendor folder\n. The solution we have come up with is to cycle between\ngodep save ./...\ngodep update github.com/aws/aws-sdk-go/...\nuntil no changes happen in the vendor folder\n. ",
    "majewsky": "Godep should be able to run outside a GOPATH, maybe with a warning, and then resorting to generating relative include paths.\nI'm actively avoiding putting my stuff inside GOPATH to ensure that it stays compilable everywhere, so that users can just git clone && make without needing to worry about setting up a GOPATH, and packagers can grab a tarball and have it compile everywhere (even without internet connection).\n. Godep should be able to run outside a GOPATH, maybe with a warning, and then resorting to generating relative include paths.\nI'm actively avoiding putting my stuff inside GOPATH to ensure that it stays compilable everywhere, so that users can just git clone && make without needing to worry about setting up a GOPATH, and packagers can grab a tarball and have it compile everywhere (even without internet connection).\n. ",
    "boyand": "This is really a problem at the moment. Even passing godep save -t will not vendor those dependencies properly.\n. This is really a problem at the moment. Even passing godep save -t will not vendor those dependencies properly.\n. ",
    "MrJoy": "I'm having the same issue with packages hosted on a Github Enterprise server.  \n$ godep restore ./...\ngodep: error downloading dep (<our internal domain name>/tools/go-<product>/client): unrecognized import path \"<our internal domain name>/tools/go-<product>/client\"\ngodep: error downloading dep (<our internal domain name>/tools/go-test-tools/httptestserver): unrecognized import path \"<our internal domain name>/tools/go-test-tools/httptestserver\"\ngodep: error downloading dep (<our internal domain name>/tools/golang-jenkins): unrecognized import path \"<our internal domain name>/tools/golang-jenkins\"\ngodep: Error downloading some deps. Aborting restore and check.\n(Removing actual domain name and the name of one of our products as I'm not yet sure what I can/can't say out loud.)\nIf I manually git clone the relevant repos under the expected locations in my $GOPATH all works well.  The relevant URL form for the git clone command winds up being git@<our internal domain name>:tools/<package>.\nThoughts on how best to proceed other than adding setup instructions telling people to manually clone a bunch of repos?\n. Is there an option to godeps that will cause it to spit out the generated URL, or some other means by which I can get you more information here?\n. Actually, I've sussed out what's happening on my end, and I think it may be of relevance to the original issue:\nGo has knowledge of specific domain names, and when presented with a thing that looks like a domain but is unknown, will tend to kvetch.  You can give it a hint by adding, for example, \".git\" to the portion of the import path that represents the repo.\nSo for us, we fixed the issue by changing import paths to:\n<our internal domain name>/tools/<package>.git/<sub-package>\nOr:\n<our internal domain name>/tools/<package>.git\nAs appropriate.\nThe Goji folks are using a mechanism to nudge go get to figure out what kind of repo it is, and where to find it by putting a special marker in the HTML at https://goji.io:\nhtml\n<meta name=\"go-import\" content=\"goji.io git https://github.com/goji/goji\">\nSo if the original author changes the import from goji.io to github.com/goji/goji, then he can proceed.\nFor you, maintaining this project, you may wish to look at how Go susses this stuff out and the cheats and hints it accepts, and try to mirror that.\n. The relevant arcana can be found via go help importpath.\n. :+1: \n. I'm having the same issue with packages hosted on a Github Enterprise server.  \n$ godep restore ./...\ngodep: error downloading dep (<our internal domain name>/tools/go-<product>/client): unrecognized import path \"<our internal domain name>/tools/go-<product>/client\"\ngodep: error downloading dep (<our internal domain name>/tools/go-test-tools/httptestserver): unrecognized import path \"<our internal domain name>/tools/go-test-tools/httptestserver\"\ngodep: error downloading dep (<our internal domain name>/tools/golang-jenkins): unrecognized import path \"<our internal domain name>/tools/golang-jenkins\"\ngodep: Error downloading some deps. Aborting restore and check.\n(Removing actual domain name and the name of one of our products as I'm not yet sure what I can/can't say out loud.)\nIf I manually git clone the relevant repos under the expected locations in my $GOPATH all works well.  The relevant URL form for the git clone command winds up being git@<our internal domain name>:tools/<package>.\nThoughts on how best to proceed other than adding setup instructions telling people to manually clone a bunch of repos?\n. Is there an option to godeps that will cause it to spit out the generated URL, or some other means by which I can get you more information here?\n. Actually, I've sussed out what's happening on my end, and I think it may be of relevance to the original issue:\nGo has knowledge of specific domain names, and when presented with a thing that looks like a domain but is unknown, will tend to kvetch.  You can give it a hint by adding, for example, \".git\" to the portion of the import path that represents the repo.\nSo for us, we fixed the issue by changing import paths to:\n<our internal domain name>/tools/<package>.git/<sub-package>\nOr:\n<our internal domain name>/tools/<package>.git\nAs appropriate.\nThe Goji folks are using a mechanism to nudge go get to figure out what kind of repo it is, and where to find it by putting a special marker in the HTML at https://goji.io:\nhtml\n<meta name=\"go-import\" content=\"goji.io git https://github.com/goji/goji\">\nSo if the original author changes the import from goji.io to github.com/goji/goji, then he can proceed.\nFor you, maintaining this project, you may wish to look at how Go susses this stuff out and the cheats and hints it accepts, and try to mirror that.\n. The relevant arcana can be found via go help importpath.\n. :+1: \n. ",
    "afex": "@freeformz hi has there been any progress towards your research?\n. @freeformz hi has there been any progress towards your research?\n. ",
    "skippyta": "Pinging this again. I've been able to work around the restore problems manually for now but it's a bit of a pain. Any update?\n. Pinging this again. I've been able to work around the restore problems manually for now but it's a bit of a pain. Any update?\n. ",
    "kaidence": "@freeformz Pinging this again, is this something godep will try to solve?\n. @freeformz Pinging this again, is this something godep will try to solve?\n. ",
    "gradywang": "Sorry for logging this issue in a wrong place.\n. Sorry for logging this issue in a wrong place.\n. ",
    "cmoesel": "Interestingly enough, I have the same exact problem -- with the same exact dependency (gopkg.in/mgo.v2/bson).  It's in the Godeps.json file, but doesn't get copied over to the vendor directory.\n. Interestingly enough, I have the same exact problem -- with the same exact dependency (gopkg.in/mgo.v2/bson).  It's in the Godeps.json file, but doesn't get copied over to the vendor directory.\n. ",
    "russellhaering": "Yes, its not clear to me what fixed it, but this issue no longer seems to affect me. Thanks for looking into it.\n. Yes, its not clear to me what fixed it, but this issue no longer seems to affect me. Thanks for looking into it.\n. ",
    "alexflint": "I just ran into this problem, too.\n. I just ran into this problem, too.\n. ",
    "Manbeardo": "Still seeing the problem after applying #418. Double-check that my process is good?\n- cd $GOPATH/src/github.com/tools/godep\n- git pull\n- git cherry-pick 81f8a9945e94471bea4f838423494d84dd8ffc5b\n- go install github.com/tools/godep\n- rerun godep\n. FWIW, resolving symlinks on Darwin is surprisingly painful.\n. Still seeing the problem after applying #418. Double-check that my process is good?\n- cd $GOPATH/src/github.com/tools/godep\n- git pull\n- git cherry-pick 81f8a9945e94471bea4f838423494d84dd8ffc5b\n- go install github.com/tools/godep\n- rerun godep\n. FWIW, resolving symlinks on Darwin is surprisingly painful.\n. ",
    "s7anley": "In my case the command is finished, but results is still bad. ImportPath is changed from project name to . and all dependencies are removed. As workaround I work directly from \n$GOPATH/src/company-name/project\n. In my case the command is finished, but results is still bad. ImportPath is changed from project name to . and all dependencies are removed. As workaround I work directly from \n$GOPATH/src/company-name/project\n. ",
    "aeden": "Same problem here. Workaround is simple enough, just cd to the actual location under $GOPATH and run godep save there.\n. Same problem here. Workaround is simple enough, just cd to the actual location under $GOPATH and run godep save there.\n. ",
    "gannulka": "Thank you ! This workaround saved me\n. Thank you ! This workaround saved me\n. ",
    "mildred": "Another way to say it is that I want to save some packages I depend on, but not all.\n. Another way to say it is that I want to save some packages I depend on, but not all.\n. ",
    "gracedo": "$ godep version\ngodep v34 (darwin/amd64/go1.5.1)\nSorry, yeah the package I'm importing is in my $GOPATH; private as in private git repo, so I had to clone it into my $GOPATH\n. @freeformz Yup that was it, bah! Thanks :+1: \n. Tried it, but same results\n. {\n    \"ImportPath\": \"github.com/SocialCodeInc/advisor-notifications\",\n    \"GoVersion\": \"go1.6\",\n    \"Packages\": [\n        \"./...\"\n    ],\n    \"Deps\": [\n        {\n            \"ImportPath\": \"github.com/Sirupsen/logrus\",\n            \"Comment\": \"v0.9.0-3-g3455d89\",\n            \"Rev\": \"3455d89ac9652295c85db2a98ea32f1d61c380bc\"\n        },\n        {\n            \"ImportPath\": \"github.com/SocialCodeInc/go-common/bouncer\",\n            \"Rev\": \"53c8f79f9ed6a6c7bb93f82d81cba9cb0d601f53\"\n        },\n        {\n            \"ImportPath\": \"github.com/SocialCodeInc/go-common/echo\",\n            \"Rev\": \"53c8f79f9ed6a6c7bb93f82d81cba9cb0d601f53\"\n        },\n        {\n            \"ImportPath\": \"github.com/SocialCodeInc/go-common/log\",\n            \"Rev\": \"53c8f79f9ed6a6c7bb93f82d81cba9cb0d601f53\"\n        },\n        {\n            \"ImportPath\": \"github.com/aws/aws-sdk-go/aws\",\n            \"Comment\": \"v1.1.1-4-g72a68b4\",\n            \"Rev\": \"72a68b4e5a9c3f6a75813e6d4393b3a21749e9c4\"\n        },\n        {\n            \"ImportPath\": \"github.com/aws/aws-sdk-go/private/endpoints\",\n            \"Comment\": \"v1.1.1-4-g72a68b4\",\n            \"Rev\": \"72a68b4e5a9c3f6a75813e6d4393b3a21749e9c4\"\n        },\n        {\n            \"ImportPath\": \"github.com/aws/aws-sdk-go/private/protocol\",\n            \"Comment\": \"v1.1.1-4-g72a68b4\",\n            \"Rev\": \"72a68b4e5a9c3f6a75813e6d4393b3a21749e9c4\"\n        },\n        {\n            \"ImportPath\": \"github.com/aws/aws-sdk-go/private/signer/v4\",\n            \"Comment\": \"v1.1.1-4-g72a68b4\",\n            \"Rev\": \"72a68b4e5a9c3f6a75813e6d4393b3a21749e9c4\"\n        },\n        {\n            \"ImportPath\": \"github.com/aws/aws-sdk-go/private/waiter\",\n            \"Comment\": \"v1.1.1-4-g72a68b4\",\n            \"Rev\": \"72a68b4e5a9c3f6a75813e6d4393b3a21749e9c4\"\n        },\n        {\n            \"ImportPath\": \"github.com/aws/aws-sdk-go/service/dynamodb\",\n            \"Comment\": \"v1.1.1-4-g72a68b4\",\n            \"Rev\": \"72a68b4e5a9c3f6a75813e6d4393b3a21749e9c4\"\n        },\n        {\n            \"ImportPath\": \"github.com/aws/aws-sdk-go/service/sns\",\n            \"Comment\": \"v1.1.1-4-g72a68b4\",\n            \"Rev\": \"72a68b4e5a9c3f6a75813e6d4393b3a21749e9c4\"\n        },\n        {\n            \"ImportPath\": \"github.com/davecgh/go-spew/spew\",\n            \"Rev\": \"5215b55f46b2b919f50a1df0eaa5886afe4e3b3d\"\n        },\n        {\n            \"ImportPath\": \"github.com/evalphobia/logrus_sentry\",\n            \"Comment\": \"v0.1.0-3-g65f2b21\",\n            \"Rev\": \"65f2b219f0df0df966a71020752970a4290ebfc8\"\n        },\n        {\n            \"ImportPath\": \"github.com/getsentry/raven-go\",\n            \"Rev\": \"1cc47a9463b90f246a0503d4c2e9a55c9459ced3\"\n        },\n        {\n            \"ImportPath\": \"github.com/go-ini/ini\",\n            \"Comment\": \"v0-48-g060d7da\",\n            \"Rev\": \"060d7da055ba6ec5ea7a31f116332fe5efa04ce0\"\n        },\n        {\n            \"ImportPath\": \"github.com/gobs/pretty\",\n            \"Rev\": \"fea6a868a0fb8b17bb1869c1ab5b95578ac273f7\"\n        },\n        {\n            \"ImportPath\": \"github.com/hydrogen18/stalecucumber\",\n            \"Rev\": \"9b38526d4bdf8e197c31344777fc28f7f48d250d\"\n        },\n        {\n            \"ImportPath\": \"github.com/jmespath/go-jmespath\",\n            \"Comment\": \"0.2.2\",\n            \"Rev\": \"3433f3ea46d9f8019119e7dd41274e112a2359a9\"\n        },\n        {\n            \"ImportPath\": \"github.com/labstack/echo\",\n            \"Comment\": \"v1.3-56-gf42af6e\",\n            \"Rev\": \"f42af6ea9fae26b64fafd30d648b0ffbe880fb11\"\n        },\n        {\n            \"ImportPath\": \"github.com/labstack/gommon/color\",\n            \"Comment\": \"v0.0.3-39-gbfff5bf\",\n            \"Rev\": \"bfff5bf04688a4048a5cb4dd3b3f0697caaad19c\"\n        },\n        {\n            \"ImportPath\": \"github.com/labstack/gommon/log\",\n            \"Comment\": \"v0.0.3-39-gbfff5bf\",\n            \"Rev\": \"bfff5bf04688a4048a5cb4dd3b3f0697caaad19c\"\n        },\n        {\n            \"ImportPath\": \"github.com/mattn/go-colorable\",\n            \"Rev\": \"9fdad7c47650b7d2e1da50644c1f4ba7f172f252\"\n        },\n        {\n            \"ImportPath\": \"github.com/mattn/go-isatty\",\n            \"Rev\": \"56b76bdf51f7708750eac80fa38b952bb9f32639\"\n        },\n        {\n            \"ImportPath\": \"github.com/mrjones/oauth\",\n            \"Rev\": \"fdd43ab9ffd4adbedbecf59a0ec6a7e0d3ef3970\"\n        },\n        {\n            \"ImportPath\": \"github.com/pmezard/go-difflib/difflib\",\n            \"Rev\": \"792786c7400a136282c1664665ae0a8db921c6c2\"\n        },\n        {\n            \"ImportPath\": \"github.com/stretchr/testify/assert\",\n            \"Comment\": \"v1.1.3-2-g9f9027f\",\n            \"Rev\": \"9f9027faeb0dad515336ed2f28317f9f8f527ab4\"\n        },\n        {\n            \"ImportPath\": \"golang.org/x/net/context\",\n            \"Rev\": \"8968c61983e8f51a91b8c0ef25bf739278c89634\"\n        },\n        {\n            \"ImportPath\": \"golang.org/x/net/http2\",\n            \"Rev\": \"8968c61983e8f51a91b8c0ef25bf739278c89634\"\n        },\n        {\n            \"ImportPath\": \"golang.org/x/net/websocket\",\n            \"Rev\": \"8968c61983e8f51a91b8c0ef25bf739278c89634\"\n        },\n        {\n            \"ImportPath\": \"golang.org/x/sys/unix\",\n            \"Rev\": \"833a04a10549a95dc34458c195cbad61bbb6cb4d\"\n        }\n    ]\n}\n. @freeformz Nope. Fwiw, I updated aws-sdk-go and did a godep update github.com/aws/aws-sdk-go/... to grab the new revs. But still running into the same errors.\n. @freeformz I omitted the actual path haha didn't want that extra information being out here :) but I guess it doesn't really matter.. it's $GOPATH/src/github.com/SocialCodeInc/advisor-notifications/\n. $ godep version\ngodep v54 (darwin/amd64/go1.6)\n. @freeformz Looks like it's not case-sensitive\nFile System Personality:  Journaled HFS+\n   Type (Bundle):            hfs\n   Name (User Visible):      Mac OS Extended (Journaled)\n. Both still show $GOPATH/src/github.com/SocialCodeInc/advisor-notifications/\n. So you can't reproduce it after removing Godeps and vendor dirs, and vendoring from scratch?\nHere's the dump (ran godep save -v ./... > out 2>&1 after rm -rf Godeps/ vendor/) :\nout.TXT\n. $ git ls-files --full-name\n.gitignore\n.travis.yml\nCHANGELOG.md\nLICENSE\nREADME.md\ndoc.go\nentry.go\nentry_test.go\nexamples/basic/basic.go\nexamples/hook/hook.go\nexported.go\nformatter.go\nformatter_bench_test.go\nformatters/logstash/logstash.go\nformatters/logstash/logstash_test.go\nhook_test.go\nhooks.go\nhooks/syslog/README.md\nhooks/syslog/syslog.go\nhooks/syslog/syslog_test.go\njson_formatter.go\njson_formatter_test.go\nlogger.go\nlogrus.go\nlogrus_test.go\nterminal_bsd.go\nterminal_linux.go\nterminal_notwindows.go\nterminal_solaris.go\nterminal_windows.go\ntext_formatter.go\ntext_formatter_test.go\nwriter.go\n$ git rev-parse --show-toplevel\n/Users/grace/Code/go/src/github.com/Sirupsen/logrus\n$ echo $GOPATH\n/Users/grace/code/go\nBah, dump is too large at 88MB heh. Here's a zip?\nout.TXT.zip\n. @freeformz Ahh, that makes sense.. it's all good now :smile:  Thanks! Closing this out\n. @freeformz No worries! Thanks for walking through it with me, glad we figured it out :)\n. $ godep version\ngodep v34 (darwin/amd64/go1.5.1)\nSorry, yeah the package I'm importing is in my $GOPATH; private as in private git repo, so I had to clone it into my $GOPATH\n. @freeformz Yup that was it, bah! Thanks :+1: \n. Tried it, but same results\n. {\n    \"ImportPath\": \"github.com/SocialCodeInc/advisor-notifications\",\n    \"GoVersion\": \"go1.6\",\n    \"Packages\": [\n        \"./...\"\n    ],\n    \"Deps\": [\n        {\n            \"ImportPath\": \"github.com/Sirupsen/logrus\",\n            \"Comment\": \"v0.9.0-3-g3455d89\",\n            \"Rev\": \"3455d89ac9652295c85db2a98ea32f1d61c380bc\"\n        },\n        {\n            \"ImportPath\": \"github.com/SocialCodeInc/go-common/bouncer\",\n            \"Rev\": \"53c8f79f9ed6a6c7bb93f82d81cba9cb0d601f53\"\n        },\n        {\n            \"ImportPath\": \"github.com/SocialCodeInc/go-common/echo\",\n            \"Rev\": \"53c8f79f9ed6a6c7bb93f82d81cba9cb0d601f53\"\n        },\n        {\n            \"ImportPath\": \"github.com/SocialCodeInc/go-common/log\",\n            \"Rev\": \"53c8f79f9ed6a6c7bb93f82d81cba9cb0d601f53\"\n        },\n        {\n            \"ImportPath\": \"github.com/aws/aws-sdk-go/aws\",\n            \"Comment\": \"v1.1.1-4-g72a68b4\",\n            \"Rev\": \"72a68b4e5a9c3f6a75813e6d4393b3a21749e9c4\"\n        },\n        {\n            \"ImportPath\": \"github.com/aws/aws-sdk-go/private/endpoints\",\n            \"Comment\": \"v1.1.1-4-g72a68b4\",\n            \"Rev\": \"72a68b4e5a9c3f6a75813e6d4393b3a21749e9c4\"\n        },\n        {\n            \"ImportPath\": \"github.com/aws/aws-sdk-go/private/protocol\",\n            \"Comment\": \"v1.1.1-4-g72a68b4\",\n            \"Rev\": \"72a68b4e5a9c3f6a75813e6d4393b3a21749e9c4\"\n        },\n        {\n            \"ImportPath\": \"github.com/aws/aws-sdk-go/private/signer/v4\",\n            \"Comment\": \"v1.1.1-4-g72a68b4\",\n            \"Rev\": \"72a68b4e5a9c3f6a75813e6d4393b3a21749e9c4\"\n        },\n        {\n            \"ImportPath\": \"github.com/aws/aws-sdk-go/private/waiter\",\n            \"Comment\": \"v1.1.1-4-g72a68b4\",\n            \"Rev\": \"72a68b4e5a9c3f6a75813e6d4393b3a21749e9c4\"\n        },\n        {\n            \"ImportPath\": \"github.com/aws/aws-sdk-go/service/dynamodb\",\n            \"Comment\": \"v1.1.1-4-g72a68b4\",\n            \"Rev\": \"72a68b4e5a9c3f6a75813e6d4393b3a21749e9c4\"\n        },\n        {\n            \"ImportPath\": \"github.com/aws/aws-sdk-go/service/sns\",\n            \"Comment\": \"v1.1.1-4-g72a68b4\",\n            \"Rev\": \"72a68b4e5a9c3f6a75813e6d4393b3a21749e9c4\"\n        },\n        {\n            \"ImportPath\": \"github.com/davecgh/go-spew/spew\",\n            \"Rev\": \"5215b55f46b2b919f50a1df0eaa5886afe4e3b3d\"\n        },\n        {\n            \"ImportPath\": \"github.com/evalphobia/logrus_sentry\",\n            \"Comment\": \"v0.1.0-3-g65f2b21\",\n            \"Rev\": \"65f2b219f0df0df966a71020752970a4290ebfc8\"\n        },\n        {\n            \"ImportPath\": \"github.com/getsentry/raven-go\",\n            \"Rev\": \"1cc47a9463b90f246a0503d4c2e9a55c9459ced3\"\n        },\n        {\n            \"ImportPath\": \"github.com/go-ini/ini\",\n            \"Comment\": \"v0-48-g060d7da\",\n            \"Rev\": \"060d7da055ba6ec5ea7a31f116332fe5efa04ce0\"\n        },\n        {\n            \"ImportPath\": \"github.com/gobs/pretty\",\n            \"Rev\": \"fea6a868a0fb8b17bb1869c1ab5b95578ac273f7\"\n        },\n        {\n            \"ImportPath\": \"github.com/hydrogen18/stalecucumber\",\n            \"Rev\": \"9b38526d4bdf8e197c31344777fc28f7f48d250d\"\n        },\n        {\n            \"ImportPath\": \"github.com/jmespath/go-jmespath\",\n            \"Comment\": \"0.2.2\",\n            \"Rev\": \"3433f3ea46d9f8019119e7dd41274e112a2359a9\"\n        },\n        {\n            \"ImportPath\": \"github.com/labstack/echo\",\n            \"Comment\": \"v1.3-56-gf42af6e\",\n            \"Rev\": \"f42af6ea9fae26b64fafd30d648b0ffbe880fb11\"\n        },\n        {\n            \"ImportPath\": \"github.com/labstack/gommon/color\",\n            \"Comment\": \"v0.0.3-39-gbfff5bf\",\n            \"Rev\": \"bfff5bf04688a4048a5cb4dd3b3f0697caaad19c\"\n        },\n        {\n            \"ImportPath\": \"github.com/labstack/gommon/log\",\n            \"Comment\": \"v0.0.3-39-gbfff5bf\",\n            \"Rev\": \"bfff5bf04688a4048a5cb4dd3b3f0697caaad19c\"\n        },\n        {\n            \"ImportPath\": \"github.com/mattn/go-colorable\",\n            \"Rev\": \"9fdad7c47650b7d2e1da50644c1f4ba7f172f252\"\n        },\n        {\n            \"ImportPath\": \"github.com/mattn/go-isatty\",\n            \"Rev\": \"56b76bdf51f7708750eac80fa38b952bb9f32639\"\n        },\n        {\n            \"ImportPath\": \"github.com/mrjones/oauth\",\n            \"Rev\": \"fdd43ab9ffd4adbedbecf59a0ec6a7e0d3ef3970\"\n        },\n        {\n            \"ImportPath\": \"github.com/pmezard/go-difflib/difflib\",\n            \"Rev\": \"792786c7400a136282c1664665ae0a8db921c6c2\"\n        },\n        {\n            \"ImportPath\": \"github.com/stretchr/testify/assert\",\n            \"Comment\": \"v1.1.3-2-g9f9027f\",\n            \"Rev\": \"9f9027faeb0dad515336ed2f28317f9f8f527ab4\"\n        },\n        {\n            \"ImportPath\": \"golang.org/x/net/context\",\n            \"Rev\": \"8968c61983e8f51a91b8c0ef25bf739278c89634\"\n        },\n        {\n            \"ImportPath\": \"golang.org/x/net/http2\",\n            \"Rev\": \"8968c61983e8f51a91b8c0ef25bf739278c89634\"\n        },\n        {\n            \"ImportPath\": \"golang.org/x/net/websocket\",\n            \"Rev\": \"8968c61983e8f51a91b8c0ef25bf739278c89634\"\n        },\n        {\n            \"ImportPath\": \"golang.org/x/sys/unix\",\n            \"Rev\": \"833a04a10549a95dc34458c195cbad61bbb6cb4d\"\n        }\n    ]\n}\n. @freeformz Nope. Fwiw, I updated aws-sdk-go and did a godep update github.com/aws/aws-sdk-go/... to grab the new revs. But still running into the same errors.\n. @freeformz I omitted the actual path haha didn't want that extra information being out here :) but I guess it doesn't really matter.. it's $GOPATH/src/github.com/SocialCodeInc/advisor-notifications/\n. $ godep version\ngodep v54 (darwin/amd64/go1.6)\n. @freeformz Looks like it's not case-sensitive\nFile System Personality:  Journaled HFS+\n   Type (Bundle):            hfs\n   Name (User Visible):      Mac OS Extended (Journaled)\n. Both still show $GOPATH/src/github.com/SocialCodeInc/advisor-notifications/\n. So you can't reproduce it after removing Godeps and vendor dirs, and vendoring from scratch?\nHere's the dump (ran godep save -v ./... > out 2>&1 after rm -rf Godeps/ vendor/) :\nout.TXT\n. $ git ls-files --full-name\n.gitignore\n.travis.yml\nCHANGELOG.md\nLICENSE\nREADME.md\ndoc.go\nentry.go\nentry_test.go\nexamples/basic/basic.go\nexamples/hook/hook.go\nexported.go\nformatter.go\nformatter_bench_test.go\nformatters/logstash/logstash.go\nformatters/logstash/logstash_test.go\nhook_test.go\nhooks.go\nhooks/syslog/README.md\nhooks/syslog/syslog.go\nhooks/syslog/syslog_test.go\njson_formatter.go\njson_formatter_test.go\nlogger.go\nlogrus.go\nlogrus_test.go\nterminal_bsd.go\nterminal_linux.go\nterminal_notwindows.go\nterminal_solaris.go\nterminal_windows.go\ntext_formatter.go\ntext_formatter_test.go\nwriter.go\n$ git rev-parse --show-toplevel\n/Users/grace/Code/go/src/github.com/Sirupsen/logrus\n$ echo $GOPATH\n/Users/grace/code/go\nBah, dump is too large at 88MB heh. Here's a zip?\nout.TXT.zip\n. @freeformz Ahh, that makes sense.. it's all good now :smile:  Thanks! Closing this out\n. @freeformz No worries! Thanks for walking through it with me, glad we figured it out :)\n. ",
    "tcurdt": "I was wondering if it's somehow related to https://github.com/tools/godep/issues/401 ... but trying from inside the GOPATH folder does not seem help either.\n. @freeformz I tried both. So yes - all inside the $GOPATH did not work for me.\nIs the following structure correct for godep?\n``\nexport GOPATH=pwd`/.go\ntree .go\n\u251c\u2500\u2500 bin\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 godep\n\u2502   ...\n\u251c\u2500\u2500 pkg\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 github.com\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 project\n            \u251c\u2500\u2500 Godeps\n                \u251c\u2500\u2500 Godeps.json\n                \u2514\u2500\u2500 _workspace\n                    \u2514\u2500\u2500 src\n                        \u251c\u2500\u2500 github.com\n                        ...\n. But that is `cd $GOPATH/src/github.com/<project>` and there I was trying `godep save`\n.\n$ go version\ngo version go1.5.3 darwin/amd64\n$ godep version\ngodep v53 (darwin/amd64/go1.5.3)\n```\nand there is a vendor directory (with only one dep in there) - but I don't see anywhere a GO15VENDOREXPERIMENT=1 (if that's what you are asking).\n. My setup is without any symlinks. Would be really great if you had an idea.\nHere is the output (too big for a comment): http://vafer.org/pub/output.txt.gz\n. I've upgrade to v57 (and go1.6). This is what I get or godep save -d -v:\n$ godep save -d -v\n    godep: WARNING: Go version (go1.6) & $GO15VENDOREXPERIMENT= wants to enable the vendor experiment, but disabling because a Godep workspace (Godeps/_workspace) exists\n    versionString() godep v57 (darwin/amd64/go1.6)\n    majorGoVersion go1.6\n    VendorExperiment false\n    sep /Godeps/_workspace/src/\n    dotPackageImportPath: github.com/foo/bar/backend\n    dotPackageDir: /Users/tcurdt/.go/src/github.com/foo/bar/backend\n    godep: Go Version: go1.6\n    godep: WARNING: Recorded major go version (go1.5) and in-use major go version (go1.6) differ.\n    godep: To record current major go version run `godep update -goversion`.\n    godep: Finding dependencies for [.]\n    LoadPackages [.]\n    listPackage .\n    findDirForPath . <nil>\n    Filling package: github.com/foo/bar/backend from /Users/tcurdt/.go/src/github.com/foo/bar/backend\n    Looking For Package: . in /Users/tcurdt/.go/src/github.com/foo/bar/backend\n    &build.Package{\n        Dir:            \"/Users/tcurdt/.go/src/github.com/foo/bar/backend\",\n        Name:           \"\",\n        ImportComment:  \"\",\n        Doc:            \"\",\n        ImportPath:     \"github.com/foo/bar/backend\",\n        Root:           \"/Users/tcurdt/.go\",\n        SrcRoot:        \"/Users/tcurdt/.go/src\",\n        PkgRoot:        \"/Users/tcurdt/.go/pkg\",\n        PkgTargetRoot:  \"\",\n        BinDir:         \"/Users/tcurdt/.go/bin\",\n        Goroot:         false,\n        PkgObj:         \"\",\n        AllTags:        nil,\n        ConflictDir:    \"\",\n        GoFiles:        nil,\n        CgoFiles:       nil,\n        IgnoredGoFiles: nil,\n        InvalidGoFiles: nil,\n        CFiles:         nil,\n        CXXFiles:       nil,\n        MFiles:         nil,\n        HFiles:         nil,\n        SFiles:         nil,\n        SwigFiles:      nil,\n        SwigCXXFiles:   nil,\n        SysoFiles:      nil,\n        CgoCFLAGS:      nil,\n        CgoCPPFLAGS:    nil,\n        CgoCXXFLAGS:    nil,\n        CgoLDFLAGS:     nil,\n        CgoPkgConfig:   nil,\n        Imports:        nil,\n        ImportPos:      {},\n        TestGoFiles:    nil,\n        TestImports:    nil,\n        TestImportPos:  {},\n        XTestGoFiles:   nil,\n        XTestImports:   nil,\n        XTestImportPos: {},\n    }\n    Done Looking For Package: . in /Users/tcurdt/.go/src/github.com/foo/bar/backend\n    &main.Package{\n        Dir:            \"/Users/tcurdt/.go/src/github.com/foo/bar/backend\",\n        Root:           \"/Users/tcurdt/.go\",\n        ImportPath:     \"github.com/foo/bar/backend\",\n        Deps:           nil,\n        Standard:       false,\n        Processed:      false,\n        GoFiles:        nil,\n        CgoFiles:       nil,\n        IgnoredGoFiles: nil,\n        TestGoFiles:    nil,\n        TestImports:    nil,\n        XTestGoFiles:   nil,\n        XTestImports:   nil,\n        Error:          struct { Err string }{},\n        Imports:        nil,\n    }\n    godep: Found package: github.com/foo/bar/backend\n    godep:  Deps: \n    []*main.Package{\n        &main.Package{\n            Dir:            \"/Users/tcurdt/.go/src/github.com/foo/bar/backend\",\n            Root:           \"/Users/tcurdt/.go\",\n            ImportPath:     \"github.com/foo/bar/backend\",\n            Deps:           nil,\n            Standard:       false,\n            Processed:      false,\n            GoFiles:        nil,\n            CgoFiles:       nil,\n            IgnoredGoFiles: nil,\n            TestGoFiles:    nil,\n            TestImports:    nil,\n            XTestGoFiles:   nil,\n            XTestImports:   nil,\n            Error:          struct { Err string }{},\n            Imports:        nil,\n        },\n    }\n    Filtered projectPackages\n    []*main.Package{\n        &main.Package{\n            Dir:            \"/Users/tcurdt/.go/src/github.com/foo/bar/backend\",\n            Root:           \"/Users/tcurdt/.go\",\n            ImportPath:     \"github.com/foo/bar/backend\",\n            Deps:           nil,\n            Standard:       false,\n            Processed:      false,\n            GoFiles:        nil,\n            CgoFiles:       nil,\n            IgnoredGoFiles: nil,\n            TestGoFiles:    nil,\n            TestImports:    nil,\n            XTestGoFiles:   nil,\n            XTestImports:   nil,\n            Error:          struct { Err string }{},\n            Imports:        nil,\n        },\n    }\n    godep: Computing new Godeps.json file\n    fill github.com/foo/bar/backend\n    []*main.Package{\n        &main.Package{\n            Dir:            \"/Users/tcurdt/.go/src/github.com/foo/bar/backend\",\n            Root:           \"/Users/tcurdt/.go\",\n            ImportPath:     \"github.com/foo/bar/backend\",\n            Deps:           nil,\n            Standard:       false,\n            Processed:      false,\n            GoFiles:        nil,\n            CgoFiles:       nil,\n            IgnoredGoFiles: nil,\n            TestGoFiles:    nil,\n            TestImports:    nil,\n            XTestGoFiles:   nil,\n            XTestImports:   nil,\n            Error:          struct { Err string }{},\n            Imports:        nil,\n        },\n    }\n    LoadPackages []\n    path [github.com/foo/bar/backend]\n    uniq, unqualify'd path [github.com/foo/bar/backend]\n    LoadPackages [github.com/foo/bar/backend]\n    listPackage github.com/foo/bar/backend\n    findDirForPath github.com/foo/bar/backend <nil>\n    searching /usr/local/Cellar/go/1.6/libexec/src/github.com/foo/bar/backend\n    searching /Users/tcurdt/.go/src/github.com/foo/bar/backend\n    Looking For Package: github.com/foo/bar/backend in /Users/tcurdt/.go/src/github.com/foo/bar/backend\n    &build.Package{\n        Dir:            \"/Users/tcurdt/.go/src/github.com/foo/bar/backend\",\n        Name:           \"\",\n        ImportComment:  \"\",\n        Doc:            \"\",\n        ImportPath:     \"github.com/foo/bar/backend\",\n        Root:           \"/Users/tcurdt/.go\",\n        SrcRoot:        \"/Users/tcurdt/.go/src\",\n        PkgRoot:        \"/Users/tcurdt/.go/pkg\",\n        PkgTargetRoot:  \"\",\n        BinDir:         \"/Users/tcurdt/.go/bin\",\n        Goroot:         false,\n        PkgObj:         \"\",\n        AllTags:        nil,\n        ConflictDir:    \"\",\n        GoFiles:        nil,\n        CgoFiles:       nil,\n        IgnoredGoFiles: nil,\n        InvalidGoFiles: nil,\n        CFiles:         nil,\n        CXXFiles:       nil,\n        MFiles:         nil,\n        HFiles:         nil,\n        SFiles:         nil,\n        SwigFiles:      nil,\n        SwigCXXFiles:   nil,\n        SysoFiles:      nil,\n        CgoCFLAGS:      nil,\n        CgoCPPFLAGS:    nil,\n        CgoCXXFLAGS:    nil,\n        CgoLDFLAGS:     nil,\n        CgoPkgConfig:   nil,\n        Imports:        nil,\n        ImportPos:      {},\n        TestGoFiles:    nil,\n        TestImports:    nil,\n        TestImportPos:  {},\n        XTestGoFiles:   nil,\n        XTestImports:   nil,\n        XTestImportPos: {},\n    }\n    Done Looking For Package: github.com/foo/bar/backend in /Users/tcurdt/.go/src/github.com/foo/bar/backend\n    &main.Package{\n        Dir:            \"/Users/tcurdt/.go/src/github.com/foo/bar/backend\",\n        Root:           \"/Users/tcurdt/.go\",\n        ImportPath:     \"github.com/foo/bar/backend\",\n        Deps:           nil,\n        Standard:       false,\n        Processed:      false,\n        GoFiles:        nil,\n        CgoFiles:       nil,\n        IgnoredGoFiles: nil,\n        TestGoFiles:    nil,\n        TestImports:    nil,\n        XTestGoFiles:   nil,\n        XTestImports:   nil,\n        Error:          struct { Err string }{},\n        Imports:        nil,\n    }\n    standard or dest skipping github.com/foo/bar/backend\n    New Godeps Filled\n    &main.Godeps{\n        ImportPath: \"github.com/foo/bar/backend\",\n        GoVersion:  \"go1.5\",\n        Packages:   nil,\n        Deps:       nil,\n        isOldFile:  false,\n    }\n    godep: Computing diff between old and new deps\n    []main.Dependency(nil)\n    []main.Dependency(nil)\n    godep: Rewriting paths (if necessary)\n    []string(nil)\n. backend is the root folder of the project on looks something like this:\n.\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 cmd\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 foo\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 main.go\n\u251c\u2500\u2500 db\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 db.go\n.\n\u251c\u2500\u2500 http\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 handlers\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 status.go\n.\nSorry, I've given up on godep and moved on. I am using go1.6 with the standard vendor support now.\nFeel free to close or leave it open but I still think it's an issue.\n. I just mean the go1.6 vendor folder (not a Godeps folder) without import rewriting. For the time being I am using glide to maintain the vendor folder. Not perfect but got the job when I couldn't convince godep to do it. Thanks for the help.\n. Ah - didn't know about the vendor folder support in godep.\nHm - how did I miss that? That's quite prominent in the docs.\nAnyway - what to pass as parameter could indeed be expanded on in docs.\nUnless I missed that, too :-p\n. I was wondering if it's somehow related to https://github.com/tools/godep/issues/401 ... but trying from inside the GOPATH folder does not seem help either.\n. @freeformz I tried both. So yes - all inside the $GOPATH did not work for me.\nIs the following structure correct for godep?\n``\nexport GOPATH=pwd`/.go\ntree .go\n\u251c\u2500\u2500 bin\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 godep\n\u2502   ...\n\u251c\u2500\u2500 pkg\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 github.com\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 project\n            \u251c\u2500\u2500 Godeps\n                \u251c\u2500\u2500 Godeps.json\n                \u2514\u2500\u2500 _workspace\n                    \u2514\u2500\u2500 src\n                        \u251c\u2500\u2500 github.com\n                        ...\n. But that is `cd $GOPATH/src/github.com/<project>` and there I was trying `godep save`\n.\n$ go version\ngo version go1.5.3 darwin/amd64\n$ godep version\ngodep v53 (darwin/amd64/go1.5.3)\n```\nand there is a vendor directory (with only one dep in there) - but I don't see anywhere a GO15VENDOREXPERIMENT=1 (if that's what you are asking).\n. My setup is without any symlinks. Would be really great if you had an idea.\nHere is the output (too big for a comment): http://vafer.org/pub/output.txt.gz\n. I've upgrade to v57 (and go1.6). This is what I get or godep save -d -v:\n$ godep save -d -v\n    godep: WARNING: Go version (go1.6) & $GO15VENDOREXPERIMENT= wants to enable the vendor experiment, but disabling because a Godep workspace (Godeps/_workspace) exists\n    versionString() godep v57 (darwin/amd64/go1.6)\n    majorGoVersion go1.6\n    VendorExperiment false\n    sep /Godeps/_workspace/src/\n    dotPackageImportPath: github.com/foo/bar/backend\n    dotPackageDir: /Users/tcurdt/.go/src/github.com/foo/bar/backend\n    godep: Go Version: go1.6\n    godep: WARNING: Recorded major go version (go1.5) and in-use major go version (go1.6) differ.\n    godep: To record current major go version run `godep update -goversion`.\n    godep: Finding dependencies for [.]\n    LoadPackages [.]\n    listPackage .\n    findDirForPath . <nil>\n    Filling package: github.com/foo/bar/backend from /Users/tcurdt/.go/src/github.com/foo/bar/backend\n    Looking For Package: . in /Users/tcurdt/.go/src/github.com/foo/bar/backend\n    &build.Package{\n        Dir:            \"/Users/tcurdt/.go/src/github.com/foo/bar/backend\",\n        Name:           \"\",\n        ImportComment:  \"\",\n        Doc:            \"\",\n        ImportPath:     \"github.com/foo/bar/backend\",\n        Root:           \"/Users/tcurdt/.go\",\n        SrcRoot:        \"/Users/tcurdt/.go/src\",\n        PkgRoot:        \"/Users/tcurdt/.go/pkg\",\n        PkgTargetRoot:  \"\",\n        BinDir:         \"/Users/tcurdt/.go/bin\",\n        Goroot:         false,\n        PkgObj:         \"\",\n        AllTags:        nil,\n        ConflictDir:    \"\",\n        GoFiles:        nil,\n        CgoFiles:       nil,\n        IgnoredGoFiles: nil,\n        InvalidGoFiles: nil,\n        CFiles:         nil,\n        CXXFiles:       nil,\n        MFiles:         nil,\n        HFiles:         nil,\n        SFiles:         nil,\n        SwigFiles:      nil,\n        SwigCXXFiles:   nil,\n        SysoFiles:      nil,\n        CgoCFLAGS:      nil,\n        CgoCPPFLAGS:    nil,\n        CgoCXXFLAGS:    nil,\n        CgoLDFLAGS:     nil,\n        CgoPkgConfig:   nil,\n        Imports:        nil,\n        ImportPos:      {},\n        TestGoFiles:    nil,\n        TestImports:    nil,\n        TestImportPos:  {},\n        XTestGoFiles:   nil,\n        XTestImports:   nil,\n        XTestImportPos: {},\n    }\n    Done Looking For Package: . in /Users/tcurdt/.go/src/github.com/foo/bar/backend\n    &main.Package{\n        Dir:            \"/Users/tcurdt/.go/src/github.com/foo/bar/backend\",\n        Root:           \"/Users/tcurdt/.go\",\n        ImportPath:     \"github.com/foo/bar/backend\",\n        Deps:           nil,\n        Standard:       false,\n        Processed:      false,\n        GoFiles:        nil,\n        CgoFiles:       nil,\n        IgnoredGoFiles: nil,\n        TestGoFiles:    nil,\n        TestImports:    nil,\n        XTestGoFiles:   nil,\n        XTestImports:   nil,\n        Error:          struct { Err string }{},\n        Imports:        nil,\n    }\n    godep: Found package: github.com/foo/bar/backend\n    godep:  Deps: \n    []*main.Package{\n        &main.Package{\n            Dir:            \"/Users/tcurdt/.go/src/github.com/foo/bar/backend\",\n            Root:           \"/Users/tcurdt/.go\",\n            ImportPath:     \"github.com/foo/bar/backend\",\n            Deps:           nil,\n            Standard:       false,\n            Processed:      false,\n            GoFiles:        nil,\n            CgoFiles:       nil,\n            IgnoredGoFiles: nil,\n            TestGoFiles:    nil,\n            TestImports:    nil,\n            XTestGoFiles:   nil,\n            XTestImports:   nil,\n            Error:          struct { Err string }{},\n            Imports:        nil,\n        },\n    }\n    Filtered projectPackages\n    []*main.Package{\n        &main.Package{\n            Dir:            \"/Users/tcurdt/.go/src/github.com/foo/bar/backend\",\n            Root:           \"/Users/tcurdt/.go\",\n            ImportPath:     \"github.com/foo/bar/backend\",\n            Deps:           nil,\n            Standard:       false,\n            Processed:      false,\n            GoFiles:        nil,\n            CgoFiles:       nil,\n            IgnoredGoFiles: nil,\n            TestGoFiles:    nil,\n            TestImports:    nil,\n            XTestGoFiles:   nil,\n            XTestImports:   nil,\n            Error:          struct { Err string }{},\n            Imports:        nil,\n        },\n    }\n    godep: Computing new Godeps.json file\n    fill github.com/foo/bar/backend\n    []*main.Package{\n        &main.Package{\n            Dir:            \"/Users/tcurdt/.go/src/github.com/foo/bar/backend\",\n            Root:           \"/Users/tcurdt/.go\",\n            ImportPath:     \"github.com/foo/bar/backend\",\n            Deps:           nil,\n            Standard:       false,\n            Processed:      false,\n            GoFiles:        nil,\n            CgoFiles:       nil,\n            IgnoredGoFiles: nil,\n            TestGoFiles:    nil,\n            TestImports:    nil,\n            XTestGoFiles:   nil,\n            XTestImports:   nil,\n            Error:          struct { Err string }{},\n            Imports:        nil,\n        },\n    }\n    LoadPackages []\n    path [github.com/foo/bar/backend]\n    uniq, unqualify'd path [github.com/foo/bar/backend]\n    LoadPackages [github.com/foo/bar/backend]\n    listPackage github.com/foo/bar/backend\n    findDirForPath github.com/foo/bar/backend <nil>\n    searching /usr/local/Cellar/go/1.6/libexec/src/github.com/foo/bar/backend\n    searching /Users/tcurdt/.go/src/github.com/foo/bar/backend\n    Looking For Package: github.com/foo/bar/backend in /Users/tcurdt/.go/src/github.com/foo/bar/backend\n    &build.Package{\n        Dir:            \"/Users/tcurdt/.go/src/github.com/foo/bar/backend\",\n        Name:           \"\",\n        ImportComment:  \"\",\n        Doc:            \"\",\n        ImportPath:     \"github.com/foo/bar/backend\",\n        Root:           \"/Users/tcurdt/.go\",\n        SrcRoot:        \"/Users/tcurdt/.go/src\",\n        PkgRoot:        \"/Users/tcurdt/.go/pkg\",\n        PkgTargetRoot:  \"\",\n        BinDir:         \"/Users/tcurdt/.go/bin\",\n        Goroot:         false,\n        PkgObj:         \"\",\n        AllTags:        nil,\n        ConflictDir:    \"\",\n        GoFiles:        nil,\n        CgoFiles:       nil,\n        IgnoredGoFiles: nil,\n        InvalidGoFiles: nil,\n        CFiles:         nil,\n        CXXFiles:       nil,\n        MFiles:         nil,\n        HFiles:         nil,\n        SFiles:         nil,\n        SwigFiles:      nil,\n        SwigCXXFiles:   nil,\n        SysoFiles:      nil,\n        CgoCFLAGS:      nil,\n        CgoCPPFLAGS:    nil,\n        CgoCXXFLAGS:    nil,\n        CgoLDFLAGS:     nil,\n        CgoPkgConfig:   nil,\n        Imports:        nil,\n        ImportPos:      {},\n        TestGoFiles:    nil,\n        TestImports:    nil,\n        TestImportPos:  {},\n        XTestGoFiles:   nil,\n        XTestImports:   nil,\n        XTestImportPos: {},\n    }\n    Done Looking For Package: github.com/foo/bar/backend in /Users/tcurdt/.go/src/github.com/foo/bar/backend\n    &main.Package{\n        Dir:            \"/Users/tcurdt/.go/src/github.com/foo/bar/backend\",\n        Root:           \"/Users/tcurdt/.go\",\n        ImportPath:     \"github.com/foo/bar/backend\",\n        Deps:           nil,\n        Standard:       false,\n        Processed:      false,\n        GoFiles:        nil,\n        CgoFiles:       nil,\n        IgnoredGoFiles: nil,\n        TestGoFiles:    nil,\n        TestImports:    nil,\n        XTestGoFiles:   nil,\n        XTestImports:   nil,\n        Error:          struct { Err string }{},\n        Imports:        nil,\n    }\n    standard or dest skipping github.com/foo/bar/backend\n    New Godeps Filled\n    &main.Godeps{\n        ImportPath: \"github.com/foo/bar/backend\",\n        GoVersion:  \"go1.5\",\n        Packages:   nil,\n        Deps:       nil,\n        isOldFile:  false,\n    }\n    godep: Computing diff between old and new deps\n    []main.Dependency(nil)\n    []main.Dependency(nil)\n    godep: Rewriting paths (if necessary)\n    []string(nil)\n. backend is the root folder of the project on looks something like this:\n.\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 cmd\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 foo\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 main.go\n\u251c\u2500\u2500 db\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 db.go\n.\n\u251c\u2500\u2500 http\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 handlers\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 status.go\n.\nSorry, I've given up on godep and moved on. I am using go1.6 with the standard vendor support now.\nFeel free to close or leave it open but I still think it's an issue.\n. I just mean the go1.6 vendor folder (not a Godeps folder) without import rewriting. For the time being I am using glide to maintain the vendor folder. Not perfect but got the job when I couldn't convince godep to do it. Thanks for the help.\n. Ah - didn't know about the vendor folder support in godep.\nHm - how did I miss that? That's quite prominent in the docs.\nAnyway - what to pass as parameter could indeed be expanded on in docs.\nUnless I missed that, too :-p\n. ",
    "cyx": "I assume this hasn't been merged, correct?\n. I assume this hasn't been merged, correct?\n. ",
    "sunheng": "Having the same problem with v54. \ngodep: cannot save code.google.com/p/google-api-go-client/googleapi/internal/uritemplates at revision '11626ef0c2fd66fd8c9a128f6ae38b77cd101f30': already have code.google.com/p/google-api-go-client/googleapi at revision 11626ef0c2fd66fd8c9a128f6ae38b77cd101f30.\nHad to switch the older version to get it resolved.\n. Having the same problem with v54. \ngodep: cannot save code.google.com/p/google-api-go-client/googleapi/internal/uritemplates at revision '11626ef0c2fd66fd8c9a128f6ae38b77cd101f30': already have code.google.com/p/google-api-go-client/googleapi at revision 11626ef0c2fd66fd8c9a128f6ae38b77cd101f30.\nHad to switch the older version to get it resolved.\n. ",
    "twmb": "This fails on sqlite3: https://github.com/mattn/go-sqlite3\n$GOPATH/src/github.com/\n                     \u251c\u2500mattn/go-sqlite3\n                     \u2514\u2500twmb/fail/fail.go\nfail.go:\n``` go\npackage main\nimport _ \"github.com/mattn/go-sqlite3\"\nfunc main() {\n    println(\"failure\")\n}\n```\nFailure:\n```\n$ godep save ./...\n$ go build\ngithub.com/twmb/fail/vendor/github.com/mattn/go-sqlite3\nIn file included from vendor/github.com/mattn/go-sqlite3/backup.go:9:\n./sqlite3-binding.h:2:10: fatal error: 'code/sqlite3-binding.h' file not found\ninclude \"code/sqlite3-binding.h\"\n     ^\n\n1 error generated.\n```\ngodep save does not include the go-sqlite3/code/ directory nor contents:\nbash\n$ find vendor -type f\nvendor/github.com/mattn/go-sqlite3/.gitignore\nvendor/github.com/mattn/go-sqlite3/.travis.yml\nvendor/github.com/mattn/go-sqlite3/backup.go\nvendor/github.com/mattn/go-sqlite3/callback.go\nvendor/github.com/mattn/go-sqlite3/doc.go\nvendor/github.com/mattn/go-sqlite3/error.go\nvendor/github.com/mattn/go-sqlite3/LICENSE\nvendor/github.com/mattn/go-sqlite3/README.md\nvendor/github.com/mattn/go-sqlite3/sqlite3-binding.c\nvendor/github.com/mattn/go-sqlite3/sqlite3-binding.h\nvendor/github.com/mattn/go-sqlite3/sqlite3.go\nvendor/github.com/mattn/go-sqlite3/sqlite3_icu.go\nvendor/github.com/mattn/go-sqlite3/sqlite3_libsqlite3.go\nvendor/github.com/mattn/go-sqlite3/sqlite3_load_extension.go\nvendor/github.com/mattn/go-sqlite3/sqlite3_omit_load_extension.go\nvendor/github.com/mattn/go-sqlite3/sqlite3_other.go\nvendor/github.com/mattn/go-sqlite3/sqlite3_windows.go\nin go-sqlite3:\nbash\n$ find code -type f\ncode/sqlite3-binding.c\ncode/sqlite3-binding.h\ncode/sqlite3ext.h\n. This can be simplified:\n$GOPATH/src/github.com/twmb/\n                          \u251c\u2500fail/fail.go\n                          \u251c\u2500cimports/c/cimport.h\n                          \u2514\u2500cimport/cimport.go\nfail.go:\n``` go\npackage main\nimport \"github.com/twmb/cimport\"\nfunc main() {\n    println(cimport.Var())\n}\n```\ncimport.go:\n``` go\npackage cimport\n/*\nimport \"c/cimport.h\"\n*/\nimport \"C\"\nfunc Var() int {\n    return C.variable\n}\n```\ncimport.h:\nc\nconst int variable = 1;\nIn directory cimport, git init; git add .; git commit -m \"minimal cgo\"\nIn directory fail, godep save ./...; go build:\n```\ngithub.com/twmb/fail/vendor/github.com/twmb/cimport\nvendor/github.com/twmb/cimport/cimport.go:4:9: fatal error: 'c/cimport.h' file not found\nimport \"c/cimport.h\"\n    ^\n\n1 error generated.\n```\n. This definitely wont make things easy but ...\nhttps://github.com/search?utf8=%E2%9C%93&q=include+import+%22C%22+language%3AGo+extension%3A.go&type=Code\nIt appears most uses are either with #import <lib> or #import <localdir.h>, which wont be broken.\nI think this would be easier were it parsed with the go/ast as opposed to regex, but I think regexing the prior enclosing /* */ and including all directories that have an import with quotations would suffice.\n. This fails on sqlite3: https://github.com/mattn/go-sqlite3\n$GOPATH/src/github.com/\n                     \u251c\u2500mattn/go-sqlite3\n                     \u2514\u2500twmb/fail/fail.go\nfail.go:\n``` go\npackage main\nimport _ \"github.com/mattn/go-sqlite3\"\nfunc main() {\n    println(\"failure\")\n}\n```\nFailure:\n```\n$ godep save ./...\n$ go build\ngithub.com/twmb/fail/vendor/github.com/mattn/go-sqlite3\nIn file included from vendor/github.com/mattn/go-sqlite3/backup.go:9:\n./sqlite3-binding.h:2:10: fatal error: 'code/sqlite3-binding.h' file not found\ninclude \"code/sqlite3-binding.h\"\n     ^\n\n1 error generated.\n```\ngodep save does not include the go-sqlite3/code/ directory nor contents:\nbash\n$ find vendor -type f\nvendor/github.com/mattn/go-sqlite3/.gitignore\nvendor/github.com/mattn/go-sqlite3/.travis.yml\nvendor/github.com/mattn/go-sqlite3/backup.go\nvendor/github.com/mattn/go-sqlite3/callback.go\nvendor/github.com/mattn/go-sqlite3/doc.go\nvendor/github.com/mattn/go-sqlite3/error.go\nvendor/github.com/mattn/go-sqlite3/LICENSE\nvendor/github.com/mattn/go-sqlite3/README.md\nvendor/github.com/mattn/go-sqlite3/sqlite3-binding.c\nvendor/github.com/mattn/go-sqlite3/sqlite3-binding.h\nvendor/github.com/mattn/go-sqlite3/sqlite3.go\nvendor/github.com/mattn/go-sqlite3/sqlite3_icu.go\nvendor/github.com/mattn/go-sqlite3/sqlite3_libsqlite3.go\nvendor/github.com/mattn/go-sqlite3/sqlite3_load_extension.go\nvendor/github.com/mattn/go-sqlite3/sqlite3_omit_load_extension.go\nvendor/github.com/mattn/go-sqlite3/sqlite3_other.go\nvendor/github.com/mattn/go-sqlite3/sqlite3_windows.go\nin go-sqlite3:\nbash\n$ find code -type f\ncode/sqlite3-binding.c\ncode/sqlite3-binding.h\ncode/sqlite3ext.h\n. This can be simplified:\n$GOPATH/src/github.com/twmb/\n                          \u251c\u2500fail/fail.go\n                          \u251c\u2500cimports/c/cimport.h\n                          \u2514\u2500cimport/cimport.go\nfail.go:\n``` go\npackage main\nimport \"github.com/twmb/cimport\"\nfunc main() {\n    println(cimport.Var())\n}\n```\ncimport.go:\n``` go\npackage cimport\n/*\nimport \"c/cimport.h\"\n*/\nimport \"C\"\nfunc Var() int {\n    return C.variable\n}\n```\ncimport.h:\nc\nconst int variable = 1;\nIn directory cimport, git init; git add .; git commit -m \"minimal cgo\"\nIn directory fail, godep save ./...; go build:\n```\ngithub.com/twmb/fail/vendor/github.com/twmb/cimport\nvendor/github.com/twmb/cimport/cimport.go:4:9: fatal error: 'c/cimport.h' file not found\nimport \"c/cimport.h\"\n    ^\n\n1 error generated.\n```\n. This definitely wont make things easy but ...\nhttps://github.com/search?utf8=%E2%9C%93&q=include+import+%22C%22+language%3AGo+extension%3A.go&type=Code\nIt appears most uses are either with #import <lib> or #import <localdir.h>, which wont be broken.\nI think this would be easier were it parsed with the go/ast as opposed to regex, but I think regexing the prior enclosing /* */ and including all directories that have an import with quotations would suffice.\n. ",
    "karalabe": "@freeformz Sorry I didn't have time sooner to make a repro. However I'm not sure the workaround will be enough for many cases. Usually you have three types of CGO use cases (at least what I've encountered / worked with):\n- Small embedded snippets, usually to access some platform specific stuff.\n- Using C libraries from the host system straight.\n- Using C libraries distributed along the Go codebase.\nIn the first two scenarios, the C code lives beside the Go code in the same folder/packages, so Godep will handle these cases just fine. The problematic part is the third case, where you want to pull in an entire external library (usually because it's not something so common as to be available on all OSes, or easily installable: e.g. snappy encoding, rocksdb, secp256k1 curve crypto). The issue is that these C dependencies can be quite huge, and are already structured as C projects by themselves, so to use them in your own repo, it's not clean practice to copy in Go files into the C project structure. The solution is to simply have a Go package with the wrappers and a subfolder containing the C code that is being wrapped. And this is exactly the scenario Godep fails on currently.\nMaybe a possible solution would be to always copy over .c/.cpp/.h etc files that could be used by CGO? Or perhaps only do this if there's some import \"C\" statement present that could cause them to be needed? Or perhaps you could also use a flag/env var similar to the vendor experiment flag that would (CGOENABLED) that would alter the godep behavior to pull in the C file types?\n. @freeformz Sorry I didn't have time sooner to make a repro. However I'm not sure the workaround will be enough for many cases. Usually you have three types of CGO use cases (at least what I've encountered / worked with):\n- Small embedded snippets, usually to access some platform specific stuff.\n- Using C libraries from the host system straight.\n- Using C libraries distributed along the Go codebase.\nIn the first two scenarios, the C code lives beside the Go code in the same folder/packages, so Godep will handle these cases just fine. The problematic part is the third case, where you want to pull in an entire external library (usually because it's not something so common as to be available on all OSes, or easily installable: e.g. snappy encoding, rocksdb, secp256k1 curve crypto). The issue is that these C dependencies can be quite huge, and are already structured as C projects by themselves, so to use them in your own repo, it's not clean practice to copy in Go files into the C project structure. The solution is to simply have a Go package with the wrappers and a subfolder containing the C code that is being wrapped. And this is exactly the scenario Godep fails on currently.\nMaybe a possible solution would be to always copy over .c/.cpp/.h etc files that could be used by CGO? Or perhaps only do this if there's some import \"C\" statement present that could cause them to be needed? Or perhaps you could also use a flag/env var similar to the vendor experiment flag that would (CGOENABLED) that would alter the godep behavior to pull in the C file types?\n. ",
    "ShanthkumarS079": "I'm running below command \ngodep save gopkg.in/natefinch/lumberjack.v2\nIt's replacing content of godep.json file.\nCould you please help me to resolve this issue.\n. It's making sense now .\nThanks for your support.\nI will try as you said in above comment  and let you know.\n. I tried got the below error.\nDid i miss anyting?\ngodep: error while inspecting \"\\\\src\\vendor\\github.com\\Sirupsen\\logrus\" is not using godep:error loading dependencies\n. godep v53 (windows/amd64/go1.5.1)\nGo version \"go version go1.6 windows/amd64\"\n. I'm running below command \ngodep save gopkg.in/natefinch/lumberjack.v2\nIt's replacing content of godep.json file.\nCould you please help me to resolve this issue.\n. It's making sense now .\nThanks for your support.\nI will try as you said in above comment  and let you know.\n. I tried got the below error.\nDid i miss anyting?\ngodep: error while inspecting \"\\\\src\\vendor\\github.com\\Sirupsen\\logrus\" is not using godep:error loading dependencies\n. godep v53 (windows/amd64/go1.5.1)\nGo version \"go version go1.6 windows/amd64\"\n. ",
    "melihmucuk": "godep v56 (darwin/amd64/go1.6)\nI deleted godep and project folder, then reinstall it. Now It works.\n. godep v56 (darwin/amd64/go1.6)\nI deleted godep and project folder, then reinstall it. Now It works.\n. ",
    "cyphar": "Dammit. Sorry, wrong project. ;)\n. Dammit. Sorry, wrong project. ;)\n. ",
    "WanliTian": "godep v56 (linux/amd64/go1.6)\n. https://raw.githubusercontent.com/WanliTian/gpush/master/error.txt\n. just godep save\n. i change my environment from one machine to another, it works.\n. godep v56 (linux/amd64/go1.6)\n. https://raw.githubusercontent.com/WanliTian/gpush/master/error.txt\n. just godep save\n. i change my environment from one machine to another, it works.\n. ",
    "aeneasr": "Oh I see, could possibly be related to using an outdated version of godep on my side (don't have the system available where the vendoring took place). Thanks for the hint and I'll also check out the new version of godep and report back if I run into problems. Thanks for the uber quick response, appreciate it always when maintainers do that.\n. lucky me ;D\n. Oh I see, could possibly be related to using an outdated version of godep on my side (don't have the system available where the vendoring took place). Thanks for the hint and I'll also check out the new version of godep and report back if I run into problems. Thanks for the uber quick response, appreciate it always when maintainers do that.\n. lucky me ;D\n. ",
    "declantraynor": "Hey, don't worry about the delay. Hardly an urgent matter :smile: \nThanks for the explanation. I definitely understand not wanting to copy everything into vendor/, but I'm still confused about what's going on with Godeps.json. Perhaps I could have phrased my original question better.\nBasically, I'm seeing a bunch of additions in Godeps.json after running a godep save ./.... These appear to correlate exactly with the sub packages of any dependency that I've imported with .. Is this behaviour expected / related to the vendoring changes you've described above?\nThanks again.\n. Ah, I get it now :+1:\nMakes perfect sense now that I re-read your original response. Thanks again, and cheers for all the hard work!\n. Hey, don't worry about the delay. Hardly an urgent matter :smile: \nThanks for the explanation. I definitely understand not wanting to copy everything into vendor/, but I'm still confused about what's going on with Godeps.json. Perhaps I could have phrased my original question better.\nBasically, I'm seeing a bunch of additions in Godeps.json after running a godep save ./.... These appear to correlate exactly with the sub packages of any dependency that I've imported with .. Is this behaviour expected / related to the vendoring changes you've described above?\nThanks again.\n. Ah, I get it now :+1:\nMakes perfect sense now that I re-read your original response. Thanks again, and cheers for all the hard work!\n. ",
    "shawnps": "I see I can do \nexport GO15VENDOREXPERIMENT=0 and it will go away, but for new terminals of course the warning will still show up unless I explicitly put export GO15VENDOREXPERIMENT=0 into my shell rc.\nI'm guessing this is why:\n(v == \"go1.6\" && go15ve != \"0\")\nI'm fine putting export GO15VENDOREXPERIMENT=0 into my shell rc for now, so feel free to close this if you'd prefer not to take action on it.\n. @freeformz it's okay, I just thought that not having the GO15VENDOREXPERIMENT set at all should be the same as having it set to GO15VENDOREXPERIMENT=0. No worries.\n. I see I can do \nexport GO15VENDOREXPERIMENT=0 and it will go away, but for new terminals of course the warning will still show up unless I explicitly put export GO15VENDOREXPERIMENT=0 into my shell rc.\nI'm guessing this is why:\n(v == \"go1.6\" && go15ve != \"0\")\nI'm fine putting export GO15VENDOREXPERIMENT=0 into my shell rc for now, so feel free to close this if you'd prefer not to take action on it.\n. @freeformz it's okay, I just thought that not having the GO15VENDOREXPERIMENT set at all should be the same as having it set to GO15VENDOREXPERIMENT=0. No worries.\n. ",
    "Sironfoot": "I'm having a similar problem. godep save just hangs. If I run \"godep save -d -v ./... &> log\" I end up with a 100MB log file after just a couple of seconds. Well, here is an abridged version of that log file if it helps:\n```\nversionString() godep v57 (darwin/amd64/go1.6)\nmajorGoVersion go1.6\nVendorExperiment true\nsep /vendor/\ndotPackageImportPath: dominic/godep-test\ndotPackageDir: /Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/src/dominic/godep-test\ngodep: Go Version: go1.6\ngodep: No old Godeps.json found.\ngodep: Finding dependencies for [./...]\nLoadPackages [./...]\nlistPackage ./.\nfindDirForPath ./. \nFilling package: dominic/godep-test from /Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/src/dominic/godep-test\n/Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/src/dominic/godep-test/main.go\nLooking For Package: ./. in /Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/src/dominic/godep-test\n&build.Package{\n    Dir:            \"/Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/src/dominic/godep-test\",\n    Name:           \"\",\n    ImportComment:  \"\",\n    Doc:            \"\",\n    ImportPath:     \"dominic/godep-test\",\n    Root:           \"/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode\",\n    SrcRoot:        \"/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/src\",\n    PkgRoot:        \"/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/pkg\",\n    PkgTargetRoot:  \"\",\n    BinDir:         \"/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/bin\",\n    Goroot:         false,\n    PkgObj:         \"\",\n    AllTags:        nil,\n    ConflictDir:    \"\",\n    GoFiles:        {\"main.go\"},\n    CgoFiles:       nil,\n    IgnoredGoFiles: nil,\n    InvalidGoFiles: nil,\n    CFiles:         nil,\n    CXXFiles:       nil,\n    MFiles:         nil,\n    HFiles:         nil,\n    SFiles:         nil,\n    SwigFiles:      nil,\n    SwigCXXFiles:   nil,\n    SysoFiles:      nil,\n    CgoCFLAGS:      nil,\n    CgoCPPFLAGS:    nil,\n    CgoCXXFLAGS:    nil,\n    CgoLDFLAGS:     nil,\n    CgoPkgConfig:   nil,\n    Imports:        {\"fmt\", \"github.com/gorilla/mux\", \"net/http\"},\n    ImportPos:      {},\n    TestGoFiles:    nil,\n    TestImports:    nil,\n    TestImportPos:  {},\n    XTestGoFiles:   nil,\n    XTestImports:   nil,\n    XTestImportPos: {},\n}\nAdding pc: /Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/src/dominic/godep-test fat\nAdding pc: /Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/src/dominic/godep-test github.com/gorilla/mux\nAdding pc: /Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/src/dominic/godep-test net/http\nProcessing import fmt for /Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/src/dominic/godep-test\nfindDirForPath fmt &{/Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/src/dominic/godep-test    dominic/godep-test /Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode /Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/src /Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/pkg  /Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/bin false  []  [main.go] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [fmt github.com/gorilla/mux net/http] map[] [] [] map[] [] [] map[]}\nresolving vendor posibilities: /Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/src/dominic/godep-test /Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode\nAdding search dir: /Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/src/dominic/godep-test/vendor/fmt\nAdding search dir: /Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/src/dominic/vendor/fmt\nAdding search dir: /Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/src/vendor/fmt\nAdding search dir: /Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/vendor/fmt\nAdding search dir: /Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/vendor/fmt\nAdding search dir: /Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/vendor/fmt\nAdding search dir: /Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/vendor/fmt\nAdding search dir: /Volumes/Macintosh HD/Users/sironfoot/vendor/fmt\nAdding search dir: /Volumes/Macintosh HD/Users/vendor/fmt\nAdding search dir: /Volumes/Macintosh HD/vendor/fmt\nAdding search dir: /Volumes/vendor/fmt\nAdding search dir: /vendor/fmt\nAdding search dir: /vendor/fmt\nAdding search dir: /vendor/fmt\nAdding search dir: /vendor/fmt\nAdding search dir: /vendor/fmt\nAdding search dir: /vendor/fmt\nAdding search dir: /vendor/fmt\nAdding search dir: /vendor/fmt\nAdding search dir: /vendor/fmt\nAdding search dir: /vendor/fmt\nAdding search dir: /vendor/fmt\nAdding search dir: /vendor/fmt\nAdding search dir: /vendor/fmt\nAdding search dir: /vendor/fmt\nAdding search dir: /vendor/fmt\nAdding search dir: /vendor/fmt\nAdding search dir: /vendor/fmt\n...snip...\n```\nAdding search dir: /vendor/fmt just repeats over and over again for 1000's of lines.\n. $: godep version\ngodep v57 (darwin/amd64/go1.6)\n$: echo $GOPATH\n/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode\n$: pwd\n/Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/src/dominic/godep-test\nI don't believe the folder \"Dropbox (Personal)\" is symlinked, I think that's the actual folder name. Is there a way to tell? Here's what it looks like in Finder...\n\n. $: echo $HOME\n/Users/sironfoot\nMy Dropbox directory is in my home directory i.e. /User/sironfoot/Dropbox (Personal) and my go path is in my Dropbox directory.\nI'll try setting up a new gopath outside of Dropdown when I get home, to see if that fixes it. Might be something to do with spaces in folder names?\n. OK, the above examples are on my desktop computer (iMac, OSX 10.11.3), but I've tried setting this up on my laptop (MacBookPro, OSX 10.11.3), and it works fine, Godeps and vendor folders are created correctly.\nI have everything setup in the exact same folder structure as before, the only difference is that echo $GOPATH gives a slightly different output. The outputs from all above commands on my laptop are:\n```\n$: godep version\ngodep v57 (darwin/amd64/go1.6)\n$: echo $GOPATH\n/Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/\n$: pwd\n/Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/src/dominic/godep-test\n$: echo $HOME\n/Users/sironfoot\n```\nNotice that the output of $GOPATH includes the disc drive volume part (\"/Volumes/Macintosh HD\") on my laptop where godep works fine. But on my desktop where godep is hanging, the volume bit is missing. Would this be significant? And I'm pretty certain that nothing is symlinked here!\n. @freeformz I'm not an expert on OSX file systems, but I believe the /Volumes/Macintosh HD/ bit of the path is optional as it points to the hard drive. If you omit it, it just assumes the default system drive, which is \"Macintosh HD\" in my case.\nFor instance, if I open a terminal and run:\ncd \"/Volumes/Macintosh HD/Users/sironfoot\"\nor\ncd \"/Users/sironfoot\"\n...I'll end up in the same directory either way.\nAs for why my $GOPATH is missing /Volumes/Macintosh HD it's probably because I have a habit of drag 'n' dropping directories from Finder into a Terminal window, which causes Terminal to split out the full path as a string (super handy), but it seems to omit the /Volumes/Macintosh HD part for some reason.\n. I'm having a similar problem. godep save just hangs. If I run \"godep save -d -v ./... &> log\" I end up with a 100MB log file after just a couple of seconds. Well, here is an abridged version of that log file if it helps:\n```\nversionString() godep v57 (darwin/amd64/go1.6)\nmajorGoVersion go1.6\nVendorExperiment true\nsep /vendor/\ndotPackageImportPath: dominic/godep-test\ndotPackageDir: /Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/src/dominic/godep-test\ngodep: Go Version: go1.6\ngodep: No old Godeps.json found.\ngodep: Finding dependencies for [./...]\nLoadPackages [./...]\nlistPackage ./.\nfindDirForPath ./. \nFilling package: dominic/godep-test from /Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/src/dominic/godep-test\n/Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/src/dominic/godep-test/main.go\nLooking For Package: ./. in /Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/src/dominic/godep-test\n&build.Package{\n    Dir:            \"/Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/src/dominic/godep-test\",\n    Name:           \"\",\n    ImportComment:  \"\",\n    Doc:            \"\",\n    ImportPath:     \"dominic/godep-test\",\n    Root:           \"/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode\",\n    SrcRoot:        \"/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/src\",\n    PkgRoot:        \"/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/pkg\",\n    PkgTargetRoot:  \"\",\n    BinDir:         \"/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/bin\",\n    Goroot:         false,\n    PkgObj:         \"\",\n    AllTags:        nil,\n    ConflictDir:    \"\",\n    GoFiles:        {\"main.go\"},\n    CgoFiles:       nil,\n    IgnoredGoFiles: nil,\n    InvalidGoFiles: nil,\n    CFiles:         nil,\n    CXXFiles:       nil,\n    MFiles:         nil,\n    HFiles:         nil,\n    SFiles:         nil,\n    SwigFiles:      nil,\n    SwigCXXFiles:   nil,\n    SysoFiles:      nil,\n    CgoCFLAGS:      nil,\n    CgoCPPFLAGS:    nil,\n    CgoCXXFLAGS:    nil,\n    CgoLDFLAGS:     nil,\n    CgoPkgConfig:   nil,\n    Imports:        {\"fmt\", \"github.com/gorilla/mux\", \"net/http\"},\n    ImportPos:      {},\n    TestGoFiles:    nil,\n    TestImports:    nil,\n    TestImportPos:  {},\n    XTestGoFiles:   nil,\n    XTestImports:   nil,\n    XTestImportPos: {},\n}\nAdding pc: /Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/src/dominic/godep-test fat\nAdding pc: /Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/src/dominic/godep-test github.com/gorilla/mux\nAdding pc: /Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/src/dominic/godep-test net/http\nProcessing import fmt for /Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/src/dominic/godep-test\nfindDirForPath fmt &{/Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/src/dominic/godep-test    dominic/godep-test /Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode /Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/src /Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/pkg  /Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/bin false  []  [main.go] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [fmt github.com/gorilla/mux net/http] map[] [] [] map[] [] [] map[]}\nresolving vendor posibilities: /Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/src/dominic/godep-test /Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode\nAdding search dir: /Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/src/dominic/godep-test/vendor/fmt\nAdding search dir: /Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/src/dominic/vendor/fmt\nAdding search dir: /Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/src/vendor/fmt\nAdding search dir: /Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/vendor/fmt\nAdding search dir: /Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/vendor/fmt\nAdding search dir: /Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/vendor/fmt\nAdding search dir: /Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/vendor/fmt\nAdding search dir: /Volumes/Macintosh HD/Users/sironfoot/vendor/fmt\nAdding search dir: /Volumes/Macintosh HD/Users/vendor/fmt\nAdding search dir: /Volumes/Macintosh HD/vendor/fmt\nAdding search dir: /Volumes/vendor/fmt\nAdding search dir: /vendor/fmt\nAdding search dir: /vendor/fmt\nAdding search dir: /vendor/fmt\nAdding search dir: /vendor/fmt\nAdding search dir: /vendor/fmt\nAdding search dir: /vendor/fmt\nAdding search dir: /vendor/fmt\nAdding search dir: /vendor/fmt\nAdding search dir: /vendor/fmt\nAdding search dir: /vendor/fmt\nAdding search dir: /vendor/fmt\nAdding search dir: /vendor/fmt\nAdding search dir: /vendor/fmt\nAdding search dir: /vendor/fmt\nAdding search dir: /vendor/fmt\nAdding search dir: /vendor/fmt\nAdding search dir: /vendor/fmt\n...snip...\n```\nAdding search dir: /vendor/fmt just repeats over and over again for 1000's of lines.\n. $: godep version\ngodep v57 (darwin/amd64/go1.6)\n$: echo $GOPATH\n/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode\n$: pwd\n/Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/src/dominic/godep-test\nI don't believe the folder \"Dropbox (Personal)\" is symlinked, I think that's the actual folder name. Is there a way to tell? Here's what it looks like in Finder...\n\n. $: echo $HOME\n/Users/sironfoot\nMy Dropbox directory is in my home directory i.e. /User/sironfoot/Dropbox (Personal) and my go path is in my Dropbox directory.\nI'll try setting up a new gopath outside of Dropdown when I get home, to see if that fixes it. Might be something to do with spaces in folder names?\n. OK, the above examples are on my desktop computer (iMac, OSX 10.11.3), but I've tried setting this up on my laptop (MacBookPro, OSX 10.11.3), and it works fine, Godeps and vendor folders are created correctly.\nI have everything setup in the exact same folder structure as before, the only difference is that echo $GOPATH gives a slightly different output. The outputs from all above commands on my laptop are:\n```\n$: godep version\ngodep v57 (darwin/amd64/go1.6)\n$: echo $GOPATH\n/Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/\n$: pwd\n/Volumes/Macintosh HD/Users/sironfoot/Dropbox (Personal)/Development/Tutorials/gocode/src/dominic/godep-test\n$: echo $HOME\n/Users/sironfoot\n```\nNotice that the output of $GOPATH includes the disc drive volume part (\"/Volumes/Macintosh HD\") on my laptop where godep works fine. But on my desktop where godep is hanging, the volume bit is missing. Would this be significant? And I'm pretty certain that nothing is symlinked here!\n. @freeformz I'm not an expert on OSX file systems, but I believe the /Volumes/Macintosh HD/ bit of the path is optional as it points to the hard drive. If you omit it, it just assumes the default system drive, which is \"Macintosh HD\" in my case.\nFor instance, if I open a terminal and run:\ncd \"/Volumes/Macintosh HD/Users/sironfoot\"\nor\ncd \"/Users/sironfoot\"\n...I'll end up in the same directory either way.\nAs for why my $GOPATH is missing /Volumes/Macintosh HD it's probably because I have a habit of drag 'n' dropping directories from Finder into a Terminal window, which causes Terminal to split out the full path as a string (super handy), but it seems to omit the /Volumes/Macintosh HD part for some reason.\n. ",
    "tuxlinuxien": "@freeformz I have tried to reproduce this bug but I didn't succeed.\nHowever, since I am in china, some go related repositories are blocked by the Great Firewall. I am now running on a full VPN network and I it works well.\n. @freeformz I have tried to reproduce this bug but I didn't succeed.\nHowever, since I am in china, some go related repositories are blocked by the Great Firewall. I am now running on a full VPN network and I it works well.\n. ",
    "hiroxy": "I use godep v58.\nMy understanding is that go1.5 vedoring experiment was enabled by setting GO15VENDOREXPERIMENT environment variable is set to 1 explicitly. But in go1.6 it is 1 by default without setting the environment variable and is disabled by setting GO15VENDOREXPERIMENT=0 explicitly.\nTherefore, in go1.6 godep should save dependencies to vendor unless GO15VENDOREXPERIMENT=0 is set explicitly. But at this moment, godep saves dependencies under Godeps/_workspace because godep refers to only the environment variable.\nI think if godep uses the result of go env GO15VENDOREXPERIMENT instead of the environment variable, this issue is solved.\n. I see. I misinterpreted current code and verified v58 works correctly with go1.6. So sorry. \n. I use godep v58.\nMy understanding is that go1.5 vedoring experiment was enabled by setting GO15VENDOREXPERIMENT environment variable is set to 1 explicitly. But in go1.6 it is 1 by default without setting the environment variable and is disabled by setting GO15VENDOREXPERIMENT=0 explicitly.\nTherefore, in go1.6 godep should save dependencies to vendor unless GO15VENDOREXPERIMENT=0 is set explicitly. But at this moment, godep saves dependencies under Godeps/_workspace because godep refers to only the environment variable.\nI think if godep uses the result of go env GO15VENDOREXPERIMENT instead of the environment variable, this issue is solved.\n. I see. I misinterpreted current code and verified v58 works correctly with go1.6. So sorry. \n. ",
    "didip": "Ah, my build machine is still on older godep. Thanks!\nAfter upgrading, I ran into this bug: https://github.com/tools/godep/issues/377, but go get golang.org/x/sys/unix fixes it.\nFeel free to close this ticket.\n. Ah, my build machine is still on older godep. Thanks!\nAfter upgrading, I ran into this bug: https://github.com/tools/godep/issues/377, but go get golang.org/x/sys/unix fixes it.\nFeel free to close this ticket.\n. ",
    "FelipeUmpierre": "Hey @freeformz, thanks for the reply.\nSorry, when I say \"install\" I mean go get like you said. My bad.\n$ godep version\ngodep v60 (darwin/amd64/go1.6)\nSo, you say that the problem is with go? But why, when I delete the godep folders in my project, it works? That's kind weird.\n. This is an example of the project that I am working on: https://gist.github.com/FelipeUmpierre/7bcf72ceea702d432317\nWhen I run godep save no feedback is showed.\n. That was really it! Thanks!\n. Hey @freeformz, thanks for the reply.\nSorry, when I say \"install\" I mean go get like you said. My bad.\n$ godep version\ngodep v60 (darwin/amd64/go1.6)\nSo, you say that the problem is with go? But why, when I delete the godep folders in my project, it works? That's kind weird.\n. This is an example of the project that I am working on: https://gist.github.com/FelipeUmpierre/7bcf72ceea702d432317\nWhen I run godep save no feedback is showed.\n. That was really it! Thanks!\n. ",
    "dhawal55": "Ok, updated to latest godep - godep v60 (darwin/amd64/go1.6). But nested dependencies is still broken. Here's the real world example. My project is importing github.com/prometheus/client_golang/prometheus which in turn imports golang.org/x/net/context. The golang.org repo is not getting vendored in the latest godep as well.\n. When i use glide (github.com/Masterminds/glide) with --all-dependencies option, it vendors nested dependencies as well but it does not clean the .git folder in vendored dependencies.\n. Closing this. Not sure what the issue was but deleting the entire repo and starting from scratch cleaned things up. \n. godep save -t will vendor test dependencies as well\n. I tried that and then it fails on next dependency. Isn't godep save\nsupposed to vendor all dependencies? Are these godep dependencies because\ni'm able to build my app correctly?\nOn Sep 15, 2016 3:56 PM, \"Edward Muller\" notifications@github.com wrote:\n\ngo get golang.org/x/net/lex/httplex\nhttp://golang.org/x/net/lex/httplex and try again.\nOn Thu, Sep 15, 2016 at 10:10 AM dhawal55 notifications@github.com\nwrote:\n\nExpected behavior\ngodep save should pull all dependencies and save them in vendor folder\ngo build works correctly so all dependencies are present in GOPATH\nActual behavior\nWhen i run godep save, i get error for missing dependencies\ngodep save\ngodep: Package (golang.org/x/net/lex/httplex) not found\nSteps to reproduce behavior\nrm -rf Godeps\nrm -rf vendor\ngo build # This works and binary is created\ngodep save\ngodep version output\ngodep v74 (darwin/amd64/go1.6.2)\ngo version output\ngo version go1.6.2 darwin/amd64\nContents of Godeps.json file\nempty\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/515, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/\nAAAAZwZkOXdecvs5M1yDskpDTaw4hU3fks5qqXwGgaJpZM4J-HDv\n.\n\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/515#issuecomment-247477699, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ADUqlbNb_DBu3OHp79YoJKsvCUNR8KXlks5qqc0BgaJpZM4J-HDv\n.\n. Ok, updated to latest godep - godep v60 (darwin/amd64/go1.6). But nested dependencies is still broken. Here's the real world example. My project is importing github.com/prometheus/client_golang/prometheus which in turn imports golang.org/x/net/context. The golang.org repo is not getting vendored in the latest godep as well.\n. When i use glide (github.com/Masterminds/glide) with --all-dependencies option, it vendors nested dependencies as well but it does not clean the .git folder in vendored dependencies.\n. Closing this. Not sure what the issue was but deleting the entire repo and starting from scratch cleaned things up. \n. godep save -t will vendor test dependencies as well\n. I tried that and then it fails on next dependency. Isn't godep save\nsupposed to vendor all dependencies? Are these godep dependencies because\ni'm able to build my app correctly?\n\nOn Sep 15, 2016 3:56 PM, \"Edward Muller\" notifications@github.com wrote:\n\ngo get golang.org/x/net/lex/httplex\nhttp://golang.org/x/net/lex/httplex and try again.\nOn Thu, Sep 15, 2016 at 10:10 AM dhawal55 notifications@github.com\nwrote:\n\nExpected behavior\ngodep save should pull all dependencies and save them in vendor folder\ngo build works correctly so all dependencies are present in GOPATH\nActual behavior\nWhen i run godep save, i get error for missing dependencies\ngodep save\ngodep: Package (golang.org/x/net/lex/httplex) not found\nSteps to reproduce behavior\nrm -rf Godeps\nrm -rf vendor\ngo build # This works and binary is created\ngodep save\ngodep version output\ngodep v74 (darwin/amd64/go1.6.2)\ngo version output\ngo version go1.6.2 darwin/amd64\nContents of Godeps.json file\nempty\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/515, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/\nAAAAZwZkOXdecvs5M1yDskpDTaw4hU3fks5qqXwGgaJpZM4J-HDv\n.\n\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/515#issuecomment-247477699, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ADUqlbNb_DBu3OHp79YoJKsvCUNR8KXlks5qqc0BgaJpZM4J-HDv\n.\n. \n",
    "smousa": "Thanks, that seemed to work @dhawal55 \n. Thanks, that seemed to work @dhawal55 \n. ",
    "donhcd": "@forty8bits can you take a look at #446 and see if it accomplishes what you want?\n. @forty8bits I'll try that out as soon as I can, maybe next week or so...\n@freeformz I think I can see why you say nested vendor folders are problematic. If you have library A which vendors library B and has an exported function Aa(B.Btype), then no project vendoring A can call A.Aa without removing vendor/A/vendor/B. Is this what you're referring to?\nNested vendor directories do make a ton of sense when the vendored package is only used internally (not in the public API) though, since this allows a project to import different libraries that use different and incompatible versions of the same package.\nWould you be open to allowing nested vendor directories inside internal packages? I haven't thought too hard about this, but I think this solves the problematic case that I listed above. Most libraries will probably require refactors for this proposal to make any sort of difference, but I think this makes sense.\n. ping @freeformz\n. @forty8bits can you take a look at #446 and see if it accomplishes what you want?\n. @forty8bits I'll try that out as soon as I can, maybe next week or so...\n@freeformz I think I can see why you say nested vendor folders are problematic. If you have library A which vendors library B and has an exported function Aa(B.Btype), then no project vendoring A can call A.Aa without removing vendor/A/vendor/B. Is this what you're referring to?\nNested vendor directories do make a ton of sense when the vendored package is only used internally (not in the public API) though, since this allows a project to import different libraries that use different and incompatible versions of the same package.\nWould you be open to allowing nested vendor directories inside internal packages? I haven't thought too hard about this, but I think this solves the problematic case that I listed above. Most libraries will probably require refactors for this proposal to make any sort of difference, but I think this makes sense.\n. ping @freeformz\n. ",
    "forty8bits": "446 seems to describe exactly what I'm looking for @donhcd; I'll give it a try as soon as I get some time in the next day or two to confirm.\n. @donhcd just tried out your branch; although the issue seems to describe exactly what I'm looking for, I'm still getting godep: Package (github.com/go-ini/ini) not found when running godep save against a package the requires aws-sdk-go.\n. Running go get github.com/go/go-ini/ini and go get github.com/jmespath/go-jmespath before running godep save works, but the result is the 'old' way; go-ini and go-jmespath are saved to Godeps.json individually and are top-level under the vendor directory, not under the aws-sdk-go vendor directory.\n. #446 seems to describe exactly what I'm looking for @donhcd; I'll give it a try as soon as I get some time in the next day or two to confirm.\n. @donhcd just tried out your branch; although the issue seems to describe exactly what I'm looking for, I'm still getting godep: Package (github.com/go-ini/ini) not found when running godep save against a package the requires aws-sdk-go.\n. Running go get github.com/go/go-ini/ini and go get github.com/jmespath/go-jmespath before running godep save works, but the result is the 'old' way; go-ini and go-jmespath are saved to Godeps.json individually and are top-level under the vendor directory, not under the aws-sdk-go vendor directory.\n. ",
    "roylou": "@freeformz your statement is so true. But if we don't vendor inside of internal packages, how can internal packages lock their dependencies version?\nI think it's trade off. You either let internal packages vendor with the penalty of two packages referring to different version of a 3rd-party package. Otherwise everyone uses the same version of 3rd-party package , which may be incompatible with internal packages.\n. @freeformz packages as libraries specify ranges of version would alleviate the problem but doesn't solve entirely. You'll still hit into problem that A depends on v1.x and B depends on v2.x, and you don't know what to choose.\nI'm incline to take approach that library packages can \"suggest\" their dependency version ranges. All libraries share the same version of dependency code in your app. Some tool will warn (but not fatal) if imported package uses incompatible dependency, and you take the risk.\n. @freeformz your statement is so true. But if we don't vendor inside of internal packages, how can internal packages lock their dependencies version?\nI think it's trade off. You either let internal packages vendor with the penalty of two packages referring to different version of a 3rd-party package. Otherwise everyone uses the same version of 3rd-party package , which may be incompatible with internal packages.\n. @freeformz packages as libraries specify ranges of version would alleviate the problem but doesn't solve entirely. You'll still hit into problem that A depends on v1.x and B depends on v2.x, and you don't know what to choose.\nI'm incline to take approach that library packages can \"suggest\" their dependency version ranges. All libraries share the same version of dependency code in your app. Some tool will warn (but not fatal) if imported package uses incompatible dependency, and you take the risk.\n. ",
    "dgsb": "related to golang/go#10322 the vendored package should be updated when the fix will be relased\n. related to golang/go#10322 the vendored package should be updated when the fix will be relased\n. ",
    "galeone": "@nithin-bose are you getting the message godep: Package (context) not found?\nI'm asking this because I've this problem and I guess it's the same as yours.\nAll I'm trying to do is to run a godep save on a clean new project, and I got this error.\n. @nithin-bose are you getting the message godep: Package (context) not found?\nI'm asking this because I've this problem and I guess it's the same as yours.\nAll I'm trying to do is to run a godep save on a clean new project, and I got this error.\n. ",
    "ddollar": "I'm getting a similar error to @galeone . I'm on v61 and go 1.6.1\nTrying to re-run godep save gives me godep: Package (fmt) not found\n. No symlinks. Both godep and go installed from Homebrew.\n. Now I can't replicate it either. If it shows back up again I'll grab a log.\n. I'm getting a similar error to @galeone . I'm on v61 and go 1.6.1\nTrying to re-run godep save gives me godep: Package (fmt) not found\n. No symlinks. Both godep and go installed from Homebrew.\n. Now I can't replicate it either. If it shows back up again I'll grab a log.\n. ",
    "stroborobo": "Had this problem with stdlib packages in v61 as well. In v63 it only complained about third party packages. Funny thing is: I ran godep update $mypackage and it complained about another package that was in fact missing in my GOPATH.\n@kr Why?\n. Hey @freeformz :)\nSorry, but how is this relevant for any of the two? In the first case I tried to update a specific package and godep complained that another package is missing. Why would it even check for it's existence? In @kr's suggestion it's about precompiled binaries, but both the homebrew and the golang.org version of Go are precompiled, so where's the difference? And shouldn't godep installed via homebrew rely on GOPATH no matter on which machine is's been compiled on or where it's located on disk?\n. How to reproduce with third party packages, note how I the updated package and the missing one are different:\nbo-mpb:bo [~/src/go/src/github.com/stroborobo/godep-not-found]I> < Godeps/Godeps.json\n{\n        \"ImportPath\": \"github.com/stroborobo/godep-not-found\",\n        \"GoVersion\": \"go1.6\",\n        \"GodepVersion\": \"v63\",\n        \"Deps\": [\n                {\n                        \"ImportPath\": \"github.com/stroborobo/ansirgb\",\n                        \"Rev\": \"c938d9fb2e25c965c50f2440483f7c6107b6c71b\"\n                },\n                {\n                        \"ImportPath\": \"github.com/stroborobo/myfmt\",\n                        \"Rev\": \"2320937f75d54eff996d1d4b1bff673a2e76bfec\"\n                }\n        ]\n}\nbo-mpb:bo [~/src/go/src/github.com/stroborobo/godep-not-found]I> ..\nbo-mpb:bo [~/src/go/src/github.com/stroborobo]I> mv myfmt/ myfmt.bak\nbo-mpb:bo [~/src/go/src/github.com/stroborobo]I> popd\nbo-mpb:bo [~/src/go/src/github.com/stroborobo/godep-not-found]I> godep update github.com/stroborobo/ansirgb\ngodep: Package (github.com/stroborobo/myfmt) not found\nbo-mpb:bo [~/src/go/src/github.com/stroborobo/godep-not-found]I>\nDoesn't go get download the complete source code regardless of architecture? How does that differ from godep exactly? I thought godep copied the needed packages into vendor/, stripping subdirectories and stuff.\n. @freeformz \n\nThe way godep currently works is that to update / save deps the packages need to be in the $GOPATH, even if they are already saved.\n\nI see, assumed it's a bug.\n\nNo, in that the same code can require additional transitive dependencies on different os/architectures.\n\nOf course, thanks! ;)\n@nithin-bose It does, you'll still have a Godep/ dir though, but it only contains the JSON file (and a Readme).\n. Had this problem with stdlib packages in v61 as well. In v63 it only complained about third party packages. Funny thing is: I ran godep update $mypackage and it complained about another package that was in fact missing in my GOPATH.\n@kr Why?\n. Hey @freeformz :)\nSorry, but how is this relevant for any of the two? In the first case I tried to update a specific package and godep complained that another package is missing. Why would it even check for it's existence? In @kr's suggestion it's about precompiled binaries, but both the homebrew and the golang.org version of Go are precompiled, so where's the difference? And shouldn't godep installed via homebrew rely on GOPATH no matter on which machine is's been compiled on or where it's located on disk?\n. How to reproduce with third party packages, note how I the updated package and the missing one are different:\nbo-mpb:bo [~/src/go/src/github.com/stroborobo/godep-not-found]I> < Godeps/Godeps.json\n{\n        \"ImportPath\": \"github.com/stroborobo/godep-not-found\",\n        \"GoVersion\": \"go1.6\",\n        \"GodepVersion\": \"v63\",\n        \"Deps\": [\n                {\n                        \"ImportPath\": \"github.com/stroborobo/ansirgb\",\n                        \"Rev\": \"c938d9fb2e25c965c50f2440483f7c6107b6c71b\"\n                },\n                {\n                        \"ImportPath\": \"github.com/stroborobo/myfmt\",\n                        \"Rev\": \"2320937f75d54eff996d1d4b1bff673a2e76bfec\"\n                }\n        ]\n}\nbo-mpb:bo [~/src/go/src/github.com/stroborobo/godep-not-found]I> ..\nbo-mpb:bo [~/src/go/src/github.com/stroborobo]I> mv myfmt/ myfmt.bak\nbo-mpb:bo [~/src/go/src/github.com/stroborobo]I> popd\nbo-mpb:bo [~/src/go/src/github.com/stroborobo/godep-not-found]I> godep update github.com/stroborobo/ansirgb\ngodep: Package (github.com/stroborobo/myfmt) not found\nbo-mpb:bo [~/src/go/src/github.com/stroborobo/godep-not-found]I>\nDoesn't go get download the complete source code regardless of architecture? How does that differ from godep exactly? I thought godep copied the needed packages into vendor/, stripping subdirectories and stuff.\n. @freeformz \n\nThe way godep currently works is that to update / save deps the packages need to be in the $GOPATH, even if they are already saved.\n\nI see, assumed it's a bug.\n\nNo, in that the same code can require additional transitive dependencies on different os/architectures.\n\nOf course, thanks! ;)\n@nithin-bose It does, you'll still have a Godep/ dir though, but it only contains the JSON file (and a Readme).\n. ",
    "nithin-bose": "So does godep check the vendor folder for dependencies?? Especially in go 1.6 and above?? \n. @stroborobo the only difference I can see while init-ing a project and adding a new dependencies to an existing project using godep is that in the first case, the dependencies are in the src folder, whereas in the second case, godep has already moved existing dependencies to the vendor folder...\n. So does godep check the vendor folder for dependencies?? Especially in go 1.6 and above?? \n. @stroborobo the only difference I can see while init-ing a project and adding a new dependencies to an existing project using godep is that in the first case, the dependencies are in the src folder, whereas in the second case, godep has already moved existing dependencies to the vendor folder...\n. ",
    "cuonglm": "I upgraded my go version to go1.7rc1, and godep stop working:\n$ godep save ./...\nzsh: correct './...' to './..' [nyae]? n\ngodep: Package (github.com/google/gofuzz) not found\nNone of my package use github.com/google/gofuzz.\n. I upgraded my go version to go1.7rc1, and godep stop working:\n$ godep save ./...\nzsh: correct './...' to './..' [nyae]? n\ngodep: Package (github.com/google/gofuzz) not found\nNone of my package use github.com/google/gofuzz.\n. ",
    "tejasmanohar": "Same issue \n$ go version\ngo1.6.3 darwin/amd64\n$ godep version\ngodep v74 (darwin/amd64/go1.6.3)\n. $ godep save ./...\ngodep: Package (encoding/json) not found\n. @freeformz it would be nice to download missing ones, even if behind a --flag. i find sometimes go get ./... doesn't do the trick w/ all nested deps :(\n. @freeformz I'm actually not using Heroku, but seems like people are having issues there.\n. Same issue \n$ go version\ngo1.6.3 darwin/amd64\n$ godep version\ngodep v74 (darwin/amd64/go1.6.3)\n. $ godep save ./...\ngodep: Package (encoding/json) not found\n. @freeformz it would be nice to download missing ones, even if behind a --flag. i find sometimes go get ./... doesn't do the trick w/ all nested deps :(\n. @freeformz I'm actually not using Heroku, but seems like people are having issues there.\n. ",
    "ajayamohan": "Similar issue:\n$godep save ./...\ngodep: Package (github.com/kr/logfmt) not found\nVersions:\n$go version\ngo version go1.7 darwin/amd64\n$godep version\ngodep v74 (darwin/amd64/go1.7)\n. if I manually do, go get:\ngo get github.com/kr/logfmt\nand then do, a \ngodep save\nit works! - Is this still a bug or an operator error on my part?\n. Hi @kris-nova,\nI installed godep through the recommended install option:\ngo get github.com/tools/godep\nAjith\n. Similar issue:\n$godep save ./...\ngodep: Package (github.com/kr/logfmt) not found\nVersions:\n$go version\ngo version go1.7 darwin/amd64\n$godep version\ngodep v74 (darwin/amd64/go1.7)\n. if I manually do, go get:\ngo get github.com/kr/logfmt\nand then do, a \ngodep save\nit works! - Is this still a bug or an operator error on my part?\n. Hi @kris-nova,\nI installed godep through the recommended install option:\ngo get github.com/tools/godep\nAjith\n. ",
    "alyssaq": "Running into this issue:\n$ godep save ./...\ngodep: Package (github.com/stretchr/testify/assert) not found\n$ go version\ngo version go1.7.1 darwin/amd64\n$ godep version\ngodep v75 (darwin/amd64/go1.7.1)\n. Running into this issue:\n$ godep save ./...\ngodep: Package (github.com/stretchr/testify/assert) not found\n$ go version\ngo version go1.7.1 darwin/amd64\n$ godep version\ngodep v75 (darwin/amd64/go1.7.1)\n. ",
    "yhung124": "Same here\n$ go version\ngo version go1.7.1 linux/amd64\n$ godep version\ngodep v75 (linux/amd64/go1.7.1)\nI use a workaround method to get all missing packages, but I don't think it's a good idea.\n```\n!/bin/bash\nrc=\"$(godep save 2>&1)\"\nwhile echo $rc | grep \"not found\";\ndo\n  package=$(echo $rc | sed -n \"s/godep: Package ((.*)) not found/\\1/p\")\n  go get $package\n  rc=\"$(/home/build/go/bin/godep save 2>&1)\"\ndone\n```\n. Same here\n$ go version\ngo version go1.7.1 linux/amd64\n$ godep version\ngodep v75 (linux/amd64/go1.7.1)\nI use a workaround method to get all missing packages, but I don't think it's a good idea.\n```\n!/bin/bash\nrc=\"$(godep save 2>&1)\"\nwhile echo $rc | grep \"not found\";\ndo\n  package=$(echo $rc | sed -n \"s/godep: Package ((.*)) not found/\\1/p\")\n  go get $package\n  rc=\"$(/home/build/go/bin/godep save 2>&1)\"\ndone\n```\n. ",
    "ychen-symphony": "Same here. I am adding a new package to the same code, and getting two different errors from two different Mac OSX machines.\nOn one machine, I simply cannot run godep save ./..., it will report error godep: dirty working tree error. Tried it on another machine and now I am getting godep: Package (context) not found.\n. Hi,\nI am using recent go and godep versions on both Mac OSX machines.  I was\nable to solve the problem on the machine that reports \"Package (context)\nnot found\" by running \"go get -u ./...\", but the issue for dirty working\ntree still persist.\n$ godep version\ngodep v75 (darwin/amd64/go1.7.3)\n$ go version\ngo version go1.7.3 darwin/amd64\n$ godep save\ngodep: dirty working tree (please commit changes): /Users/yichen/go/src/\ngoogle.golang.org/cloud\ngodep: dirty working tree (please commit changes): /Users/yichen/go/src/\ngoogle.golang.org/cloud/compute/metadata\ngodep: dirty working tree (please commit changes): /Users/yichen/go/src/\ngoogle.golang.org/cloud/datastore\ngodep: dirty working tree (please commit changes): /Users/yichen/go/src/\ngoogle.golang.org/cloud/datastore/internal/proto\ngodep: dirty working tree (please commit changes): /Users/yichen/go/src/\ngoogle.golang.org/cloud/datastore/internal/type_proto\ngodep: dirty working tree (please commit changes): /Users/yichen/go/src/\ngoogle.golang.org/cloud/internal\ngodep: dirty working tree (please commit changes): /Users/yichen/go/src/\ngoogle.golang.org/cloud/internal/transport\ngodep: error loading dependencies\nOn Tue, Nov 15, 2016 at 5:46 PM, Edward Muller notifications@github.com\nwrote:\n\nWhat version of godep are you on?\nIf the working tree of a dep is dirty is should say what the dep is. That\nneeds to be resolved as godep won't know what to vendor if the dep's\nworking tree is dirty.\nI'm pretty sure the restriction on the local project being dirty was\nremoved many versions ago.\nOn the other machine I am assuming you have an older version of go/godep as\nwell.\nOn Mon, Nov 14, 2016 at 4:16 PM Yi Chen notifications@github.com wrote:\n\nSame here. I am adding a new package to the same code, and getting two\ndifferent errors from two different Mac OSX machines.\nOn one machine, I simply cannot run godep save ./..., it will report\nerror godep: dirty working tree error. Tried it on another machine and\nnow I am getting godep: Package (context) not found.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/447#issuecomment-260506661, or\nmute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/\nAAAAZ1dd04WT4d8NpSBZEc8KDNFkBSd9ks5q-PnlgaJpZM4H-fKt\n.\n\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/447#issuecomment-260828878, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/APRAhg1scSU9uDjUBk6-dauRqewhYVd5ks5q-mCTgaJpZM4H-fKt\n.\n. Aha so \"git status\" says the \"HEAD detached at abc5503\". Did \"git checkout\nmaster\" and now godep save works!\n\nI didn't realize the message dirty working tree meant the dependencis, not\nmy working repo. Thanks for the help!\nOn Tue, Nov 15, 2016 at 8:32 PM, Edward Muller notifications@github.com\nwrote:\n\nSo the packages in google.golang.org/cloud have local, uncommitted\nchanges.\nOr something else is going on. If you \"cd /Users/yichen/go/src/\ngoogle.golang.org/cloud\" and run \"git status \", what does it say?\nOn Tue, Nov 15, 2016 at 19:50 Yi Chen notifications@github.com wrote:\n\nHi,\nI am using recent go and godep versions on both Mac OSX machines. I was\nable to solve the problem on the machine that reports \"Package (context)\nnot found\" by running \"go get -u ./...\", but the issue for dirty working\ntree still persist.\n$ godep version\ngodep v75 (darwin/amd64/go1.7.3)\n$ go version\ngo version go1.7.3 darwin/amd64\n$ godep save\ngodep: dirty working tree (please commit changes): /Users/yichen/go/src/\ngoogle.golang.org/cloud\ngodep: dirty working tree (please commit changes): /Users/yichen/go/src/\ngoogle.golang.org/cloud/compute/metadata\ngodep: dirty working tree (please commit changes): /Users/yichen/go/src/\ngoogle.golang.org/cloud/datastore\ngodep: dirty working tree (please commit changes): /Users/yichen/go/src/\ngoogle.golang.org/cloud/datastore/internal/proto\ngodep: dirty working tree (please commit changes): /Users/yichen/go/src/\ngoogle.golang.org/cloud/datastore/internal/type_proto\ngodep: dirty working tree (please commit changes): /Users/yichen/go/src/\ngoogle.golang.org/cloud/internal\ngodep: dirty working tree (please commit changes): /Users/yichen/go/src/\ngoogle.golang.org/cloud/internal/transport\ngodep: error loading dependencies\nOn Tue, Nov 15, 2016 at 5:46 PM, Edward Muller <notifications@github.com\nwrote:\n\nWhat version of godep are you on?\nIf the working tree of a dep is dirty is should say what the dep is.\nThat\nneeds to be resolved as godep won't know what to vendor if the dep's\nworking tree is dirty.\nI'm pretty sure the restriction on the local project being dirty was\nremoved many versions ago.\nOn the other machine I am assuming you have an older version of\ngo/godep\nas\nwell.\nOn Mon, Nov 14, 2016 at 4:16 PM Yi Chen notifications@github.com\nwrote:\n\nSame here. I am adding a new package to the same code, and getting\ntwo\ndifferent errors from two different Mac OSX machines.\nOn one machine, I simply cannot run godep save ./..., it will report\nerror godep: dirty working tree error. Tried it on another machine\nand\nnow I am getting godep: Package (context) not found.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/447#issuecomment-260506661,\nor\nmute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/\nAAAAZ1dd04WT4d8NpSBZEc8KDNFkBSd9ks5q-PnlgaJpZM4H-fKt\n.\n\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/447#issuecomment-260828878, or\nmute\nthe thread\n<\nhttps://github.com/notifications/unsubscribe-auth/APRAhg1scSU9uDjUBk6-\ndauRqewhYVd5ks5q-mCTgaJpZM4H-fKt\n.\n\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/447#issuecomment-260846754, or\nmute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAZz_\ngsfw9wQi76MSEzHG7pMQ4LT_oks5q-n2VgaJpZM4H-fKt\n.\n\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/447#issuecomment-260851707, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/APRAhudB4cYxutxZX4-0lyXnqFWg-e87ks5q-odxgaJpZM4H-fKt\n.\n. Same here. I am adding a new package to the same code, and getting two different errors from two different Mac OSX machines.\n\nOn one machine, I simply cannot run godep save ./..., it will report error godep: dirty working tree error. Tried it on another machine and now I am getting godep: Package (context) not found.\n. Hi,\nI am using recent go and godep versions on both Mac OSX machines.  I was\nable to solve the problem on the machine that reports \"Package (context)\nnot found\" by running \"go get -u ./...\", but the issue for dirty working\ntree still persist.\n$ godep version\ngodep v75 (darwin/amd64/go1.7.3)\n$ go version\ngo version go1.7.3 darwin/amd64\n$ godep save\ngodep: dirty working tree (please commit changes): /Users/yichen/go/src/\ngoogle.golang.org/cloud\ngodep: dirty working tree (please commit changes): /Users/yichen/go/src/\ngoogle.golang.org/cloud/compute/metadata\ngodep: dirty working tree (please commit changes): /Users/yichen/go/src/\ngoogle.golang.org/cloud/datastore\ngodep: dirty working tree (please commit changes): /Users/yichen/go/src/\ngoogle.golang.org/cloud/datastore/internal/proto\ngodep: dirty working tree (please commit changes): /Users/yichen/go/src/\ngoogle.golang.org/cloud/datastore/internal/type_proto\ngodep: dirty working tree (please commit changes): /Users/yichen/go/src/\ngoogle.golang.org/cloud/internal\ngodep: dirty working tree (please commit changes): /Users/yichen/go/src/\ngoogle.golang.org/cloud/internal/transport\ngodep: error loading dependencies\nOn Tue, Nov 15, 2016 at 5:46 PM, Edward Muller notifications@github.com\nwrote:\n\nWhat version of godep are you on?\nIf the working tree of a dep is dirty is should say what the dep is. That\nneeds to be resolved as godep won't know what to vendor if the dep's\nworking tree is dirty.\nI'm pretty sure the restriction on the local project being dirty was\nremoved many versions ago.\nOn the other machine I am assuming you have an older version of go/godep as\nwell.\nOn Mon, Nov 14, 2016 at 4:16 PM Yi Chen notifications@github.com wrote:\n\nSame here. I am adding a new package to the same code, and getting two\ndifferent errors from two different Mac OSX machines.\nOn one machine, I simply cannot run godep save ./..., it will report\nerror godep: dirty working tree error. Tried it on another machine and\nnow I am getting godep: Package (context) not found.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/447#issuecomment-260506661, or\nmute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/\nAAAAZ1dd04WT4d8NpSBZEc8KDNFkBSd9ks5q-PnlgaJpZM4H-fKt\n.\n\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/447#issuecomment-260828878, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/APRAhg1scSU9uDjUBk6-dauRqewhYVd5ks5q-mCTgaJpZM4H-fKt\n.\n. Aha so \"git status\" says the \"HEAD detached at abc5503\". Did \"git checkout\nmaster\" and now godep save works!\n\nI didn't realize the message dirty working tree meant the dependencis, not\nmy working repo. Thanks for the help!\nOn Tue, Nov 15, 2016 at 8:32 PM, Edward Muller notifications@github.com\nwrote:\n\nSo the packages in google.golang.org/cloud have local, uncommitted\nchanges.\nOr something else is going on. If you \"cd /Users/yichen/go/src/\ngoogle.golang.org/cloud\" and run \"git status \", what does it say?\nOn Tue, Nov 15, 2016 at 19:50 Yi Chen notifications@github.com wrote:\n\nHi,\nI am using recent go and godep versions on both Mac OSX machines. I was\nable to solve the problem on the machine that reports \"Package (context)\nnot found\" by running \"go get -u ./...\", but the issue for dirty working\ntree still persist.\n$ godep version\ngodep v75 (darwin/amd64/go1.7.3)\n$ go version\ngo version go1.7.3 darwin/amd64\n$ godep save\ngodep: dirty working tree (please commit changes): /Users/yichen/go/src/\ngoogle.golang.org/cloud\ngodep: dirty working tree (please commit changes): /Users/yichen/go/src/\ngoogle.golang.org/cloud/compute/metadata\ngodep: dirty working tree (please commit changes): /Users/yichen/go/src/\ngoogle.golang.org/cloud/datastore\ngodep: dirty working tree (please commit changes): /Users/yichen/go/src/\ngoogle.golang.org/cloud/datastore/internal/proto\ngodep: dirty working tree (please commit changes): /Users/yichen/go/src/\ngoogle.golang.org/cloud/datastore/internal/type_proto\ngodep: dirty working tree (please commit changes): /Users/yichen/go/src/\ngoogle.golang.org/cloud/internal\ngodep: dirty working tree (please commit changes): /Users/yichen/go/src/\ngoogle.golang.org/cloud/internal/transport\ngodep: error loading dependencies\nOn Tue, Nov 15, 2016 at 5:46 PM, Edward Muller <notifications@github.com\nwrote:\n\nWhat version of godep are you on?\nIf the working tree of a dep is dirty is should say what the dep is.\nThat\nneeds to be resolved as godep won't know what to vendor if the dep's\nworking tree is dirty.\nI'm pretty sure the restriction on the local project being dirty was\nremoved many versions ago.\nOn the other machine I am assuming you have an older version of\ngo/godep\nas\nwell.\nOn Mon, Nov 14, 2016 at 4:16 PM Yi Chen notifications@github.com\nwrote:\n\nSame here. I am adding a new package to the same code, and getting\ntwo\ndifferent errors from two different Mac OSX machines.\nOn one machine, I simply cannot run godep save ./..., it will report\nerror godep: dirty working tree error. Tried it on another machine\nand\nnow I am getting godep: Package (context) not found.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/447#issuecomment-260506661,\nor\nmute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/\nAAAAZ1dd04WT4d8NpSBZEc8KDNFkBSd9ks5q-PnlgaJpZM4H-fKt\n.\n\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/447#issuecomment-260828878, or\nmute\nthe thread\n<\nhttps://github.com/notifications/unsubscribe-auth/APRAhg1scSU9uDjUBk6-\ndauRqewhYVd5ks5q-mCTgaJpZM4H-fKt\n.\n\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/447#issuecomment-260846754, or\nmute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAZz_\ngsfw9wQi76MSEzHG7pMQ4LT_oks5q-n2VgaJpZM4H-fKt\n.\n\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/tools/godep/issues/447#issuecomment-260851707, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/APRAhudB4cYxutxZX4-0lyXnqFWg-e87ks5q-odxgaJpZM4H-fKt\n.\n. \n",
    "Narven": "Just leaving here a tip that was helpful for me when running godep save I was getting godep: Package (fmt) not found.\nI ran go get github.com/tools/godep and then godep save and it worked.\nProbably I was running some old version.. Just leaving here a tip that was helpful for me when running godep save I was getting godep: Package (fmt) not found.\nI ran go get github.com/tools/godep and then godep save and it worked.\nProbably I was running some old version.. ",
    "folex": "Had Package (fmt) not found error. both go and godep were installed via brew.\n$ go version\ngo version go1.7.5 darwin/amd64\nThe problem was that I was using godep v78, after updating to v79 via\n$ brew unlink godep\n$ brew install godep\nerror is gone. Hope it will help someone.. Had Package (fmt) not found error. both go and godep were installed via brew.\n$ go version\ngo version go1.7.5 darwin/amd64\nThe problem was that I was using godep v78, after updating to v79 via\n$ brew unlink godep\n$ brew install godep\nerror is gone. Hope it will help someone.. ",
    "skytask": "Same issue\ngodep: package ( {various packages} ) not found. Same issue\ngodep: package ( {various packages} ) not found. ",
    "m1093782566": "godep will not find packages in vendor?. godep will not find packages in vendor?. ",
    "themartorana": "Sorry, tapped the wrong button...\n. For me: godep v60 (darwin/amd64/go1.6)\n. @freeformz seconded.\n. Sorry, tapped the wrong button...\n. For me: godep v60 (darwin/amd64/go1.6)\n. @freeformz seconded.\n. ",
    "CannibalVox": "It's worse than that- deleting go17.go wont' help because it actually refused to read pre_go17.go.  It's like build tag is reversed, it will ONLY read the 1.7 file.\n. Above PR fixes the issue, hopefully we can see the resolution live soon, this is a pretty serious deal :\\\n. Related to #448 \n. It's worse than that- deleting go17.go wont' help because it actually refused to read pre_go17.go.  It's like build tag is reversed, it will ONLY read the 1.7 file.\n. Above PR fixes the issue, hopefully we can see the resolution live soon, this is a pretty serious deal :\\\n. Related to #448 \n. ",
    "ddgenome": "@freeformz I can confirm that using PR https://github.com/tools/godep/pull/451 godep save -v on a project that imports \"golang.org/x/net/context\" finishes successfully whereas it fails with godep: Package (context) not found when using master.\n. This fixes issue #448 for me.\n. @freeformz I can confirm that using PR https://github.com/tools/godep/pull/451 godep save -v on a project that imports \"golang.org/x/net/context\" finishes successfully whereas it fails with godep: Package (context) not found when using master.\n. This fixes issue #448 for me.\n. ",
    "eduncan911": "FWIW, today I got fed up with this and just _banned_ godep restore from my entire system.  I did this with a script:\nhttps://github.com/eduncan911/dotfiles/blob/master/bin/godep\nIf you want it, first make sure your personal ~/bin comes before your $GOPATH/bin:\n$ echo $PATH\n...:/Users/eric/bin:/Users/eric/go/bin:...\nIf so, you are good to go.  If not, you may want to tweak your $PATH to use your personal ~/bin before your GOPATH/bin.\nGet the file locally:\n$ curl -L https://raw.githubusercontent.com/eduncan911/dotfiles/master/bin/godep --create-dirs -o ~/bin/godep\n$ chmod 755 ~/bin/godep\nUse it normally:\n$ godep go run main.go\n$ godep get foo/bar\n...etc.  And when you try to do godep restore:\n$ godep restore\nWARNING: godep restore <- this will frack with your $GOPATH !!\nWARNING: to override, use your installed version of godep like this:\nWARNING:      $GOPATH/bin/godep restore\nWARNING: Aborting ...\nhehe.  \ud83d\udc4d \nI'm in the habit of using the godep prefix for all my go needs anyways:\n$ godep go test ./...\n$ godep go run main.go\n$ godep get foo/bar\n...etc.  But I've accidently used godep restore a few times, like today when I ran a Makefile for a new repo I was working on.  Argh!  Spent over an hour restoring all of my $GOPATH repos back to master.\nNo more!\n. i have to exclude the dozen or so that I am working on...  that do have pending commits, on different branches, etc.\n. FWIW, today I got fed up with this and just _banned_ godep restore from my entire system.  I did this with a script:\nhttps://github.com/eduncan911/dotfiles/blob/master/bin/godep\nIf you want it, first make sure your personal ~/bin comes before your $GOPATH/bin:\n$ echo $PATH\n...:/Users/eric/bin:/Users/eric/go/bin:...\nIf so, you are good to go.  If not, you may want to tweak your $PATH to use your personal ~/bin before your GOPATH/bin.\nGet the file locally:\n$ curl -L https://raw.githubusercontent.com/eduncan911/dotfiles/master/bin/godep --create-dirs -o ~/bin/godep\n$ chmod 755 ~/bin/godep\nUse it normally:\n$ godep go run main.go\n$ godep get foo/bar\n...etc.  And when you try to do godep restore:\n$ godep restore\nWARNING: godep restore <- this will frack with your $GOPATH !!\nWARNING: to override, use your installed version of godep like this:\nWARNING:      $GOPATH/bin/godep restore\nWARNING: Aborting ...\nhehe.  \ud83d\udc4d \nI'm in the habit of using the godep prefix for all my go needs anyways:\n$ godep go test ./...\n$ godep go run main.go\n$ godep get foo/bar\n...etc.  But I've accidently used godep restore a few times, like today when I ran a Makefile for a new repo I was working on.  Argh!  Spent over an hour restoring all of my $GOPATH repos back to master.\nNo more!\n. i have to exclude the dozen or so that I am working on...  that do have pending commits, on different branches, etc.\n. ",
    "frankcarey": "Yeah, I second this.. also seemed to happen if I manually deleted my vendor folder that it wasn't being recreated.\n. Yeah, I second this.. also seemed to happen if I manually deleted my vendor folder that it wasn't being recreated.\n. ",
    "finalsatan": "Can I add a single new dependency without \"godep restore\" now?\nThanks!. Can I add a single new dependency without \"godep restore\" now?\nThanks!. ",
    "0xor1": "I am doing some more investigation into it, I want to make sure it isn't user error before re/opening an issue.\n. appears to be a genuine bug\n. I am doing some more investigation into it, I want to make sure it isn't user error before re/opening an issue.\n. appears to be a genuine bug\n. ",
    "Throckmortra": "godep save -d\nversionString() godep v62 (darwin/amd64/go1.6)\nmajorGoVersion go1.6\nVendorExperiment true\nsep /vendor/\ndotPackageImportPath: .\ndotPackageDir: /Users/aaron/documents/gowork/src/github.com/Throckmortra/ryp\nLoadPackages [.]\nlistPackage .\nfindDirForPath . <nil>\nLooking For Package: . in /Users/aaron/documents/gowork/src/github.com/Throckmortra/ryp\n&build.Package{\n    Dir:            \"/Users/aaron/documents/gowork/src/github.com/Throckmortra/ryp\",\n    Name:           \"\",\n    ImportComment:  \"\",\n    Doc:            \"\",\n    ImportPath:     \".\",\n    Root:           \"\",\n    SrcRoot:        \"\",\n    PkgRoot:        \"\",\n    PkgTargetRoot:  \"\",\n    BinDir:         \"\",\n    Goroot:         false,\n    PkgObj:         \"\",\n    AllTags:        nil,\n    ConflictDir:    \"\",\n    GoFiles:        nil,\n    CgoFiles:       nil,\n    IgnoredGoFiles: nil,\n    InvalidGoFiles: nil,\n    CFiles:         nil,\n    CXXFiles:       nil,\n    MFiles:         nil,\n    HFiles:         nil,\n    SFiles:         nil,\n    SwigFiles:      nil,\n    SwigCXXFiles:   nil,\n    SysoFiles:      nil,\n    CgoCFLAGS:      nil,\n    CgoCPPFLAGS:    nil,\n    CgoCXXFLAGS:    nil,\n    CgoLDFLAGS:     nil,\n    CgoPkgConfig:   nil,\n    Imports:        nil,\n    ImportPos:      {},\n    TestGoFiles:    nil,\n    TestImports:    nil,\n    TestImportPos:  {},\n    XTestGoFiles:   nil,\n    XTestImports:   nil,\n    XTestImportPos: {},\n}\nDone Looking For Package: . in /Users/aaron/documents/gowork/src/github.com/Throckmortra/ryp\n&main.Package{\n    Dir:            \"/Users/aaron/documents/gowork/src/github.com/Throckmortra/ryp\",\n    Root:           \"\",\n    ImportPath:     \".\",\n    Deps:           nil,\n    Standard:       false,\n    Processed:      false,\n    GoFiles:        nil,\n    CgoFiles:       nil,\n    IgnoredGoFiles: nil,\n    TestGoFiles:    nil,\n    TestImports:    nil,\n    XTestGoFiles:   nil,\n    XTestImports:   nil,\n    Error:          struct { Err string }{},\n    Imports:        nil,\n}\n[]*main.Package{\n    &main.Package{\n        Dir:            \"/Users/aaron/documents/gowork/src/github.com/Throckmortra/ryp\",\n        Root:           \"\",\n        ImportPath:     \".\",\n        Deps:           nil,\n        Standard:       false,\n        Processed:      false,\n        GoFiles:        nil,\n        CgoFiles:       nil,\n        IgnoredGoFiles: nil,\n        TestGoFiles:    nil,\n        TestImports:    nil,\n        XTestGoFiles:   nil,\n        XTestImports:   nil,\n        Error:          struct { Err string }{},\n        Imports:        nil,\n    },\n}\nFiltered projectPackages\n[]*main.Package{\n    &main.Package{\n        Dir:            \"/Users/aaron/documents/gowork/src/github.com/Throckmortra/ryp\",\n        Root:           \"\",\n        ImportPath:     \".\",\n        Deps:           nil,\n        Standard:       false,\n        Processed:      false,\n        GoFiles:        nil,\n        CgoFiles:       nil,\n        IgnoredGoFiles: nil,\n        TestGoFiles:    nil,\n        TestImports:    nil,\n        XTestGoFiles:   nil,\n        XTestImports:   nil,\n        Error:          struct { Err string }{},\n        Imports:        nil,\n    },\n}\nfill .\n[]*main.Package{\n    &main.Package{\n        Dir:            \"/Users/aaron/documents/gowork/src/github.com/Throckmortra/ryp\",\n        Root:           \"\",\n        ImportPath:     \".\",\n        Deps:           nil,\n        Standard:       false,\n        Processed:      false,\n        GoFiles:        nil,\n        CgoFiles:       nil,\n        IgnoredGoFiles: nil,\n        TestGoFiles:    nil,\n        TestImports:    nil,\n        XTestGoFiles:   nil,\n        XTestImports:   nil,\n        Error:          struct { Err string }{},\n        Imports:        nil,\n    },\n}\nLoadPackages []\npath [.]\nuniq, unqualify'd path [.]\nLoadPackages [.]\nlistPackage .\nfindDirForPath . <nil>\nLooking For Package: . in /Users/aaron/documents/gowork/src/github.com/Throckmortra/ryp\n&build.Package{\n    Dir:            \"/Users/aaron/documents/gowork/src/github.com/Throckmortra/ryp\",\n    Name:           \"\",\n    ImportComment:  \"\",\n    Doc:            \"\",\n    ImportPath:     \".\",\n    Root:           \"\",\n    SrcRoot:        \"\",\n    PkgRoot:        \"\",\n    PkgTargetRoot:  \"\",\n    BinDir:         \"\",\n    Goroot:         false,\n    PkgObj:         \"\",\n    AllTags:        nil,\n    ConflictDir:    \"\",\n    GoFiles:        nil,\n    CgoFiles:       nil,\n    IgnoredGoFiles: nil,\n    InvalidGoFiles: nil,\n    CFiles:         nil,\n    CXXFiles:       nil,\n    MFiles:         nil,\n    HFiles:         nil,\n    SFiles:         nil,\n    SwigFiles:      nil,\n    SwigCXXFiles:   nil,\n    SysoFiles:      nil,\n    CgoCFLAGS:      nil,\n    CgoCPPFLAGS:    nil,\n    CgoCXXFLAGS:    nil,\n    CgoLDFLAGS:     nil,\n    CgoPkgConfig:   nil,\n    Imports:        nil,\n    ImportPos:      {},\n    TestGoFiles:    nil,\n    TestImports:    nil,\n    TestImportPos:  {},\n    XTestGoFiles:   nil,\n    XTestImports:   nil,\n    XTestImportPos: {},\n}\nDone Looking For Package: . in /Users/aaron/documents/gowork/src/github.com/Throckmortra/ryp\n&main.Package{\n    Dir:            \"/Users/aaron/documents/gowork/src/github.com/Throckmortra/ryp\",\n    Root:           \"\",\n    ImportPath:     \".\",\n    Deps:           nil,\n    Standard:       false,\n    Processed:      false,\n    GoFiles:        nil,\n    CgoFiles:       nil,\n    IgnoredGoFiles: nil,\n    TestGoFiles:    nil,\n    TestImports:    nil,\n    XTestGoFiles:   nil,\n    XTestImports:   nil,\n    Error:          struct { Err string }{},\n    Imports:        nil,\n}\nstandard or dest skipping .\nNew Godeps Filled\n&main.Godeps{\n    ImportPath:   \".\",\n    GoVersion:    \"go1.6\",\n    GodepVersion: \"\",\n    Packages:     nil,\n    Deps:         nil,\n    isOldFile:    false,\n}\n[]main.Dependency(nil)\n[]main.Dependency(nil)\n[]string(nil)\n. ryp aaron$ ls\nGodeps      Procfile    README.md   main.go     manifest.yml    rypresource.go\n$GOPATH\n-bash: /Users/aaron/Documents/gowork: is a directory\ngo install runs and installs \n. https://github.com/Throckmortra/ryp/blob/master/Godeps/Godeps.json\nthis is the Godeps.json when I committed it, working, 23 days ago\n. godep save was working then and correctly saved Deps. Running godep save today after updating godep to v62 is wiping my deps on every project I've run it on \n. as well as v61? https://github.com/Throckmortra/ryp/blob/master/Godeps/Godeps.json was commited while using v60 \n. retrying with fixed path now\n. thank god, that fixed it\n. sorry I'm an idiot. Thank you for your help \n. godep save -d\nversionString() godep v62 (darwin/amd64/go1.6)\nmajorGoVersion go1.6\nVendorExperiment true\nsep /vendor/\ndotPackageImportPath: .\ndotPackageDir: /Users/aaron/documents/gowork/src/github.com/Throckmortra/ryp\nLoadPackages [.]\nlistPackage .\nfindDirForPath . <nil>\nLooking For Package: . in /Users/aaron/documents/gowork/src/github.com/Throckmortra/ryp\n&build.Package{\n    Dir:            \"/Users/aaron/documents/gowork/src/github.com/Throckmortra/ryp\",\n    Name:           \"\",\n    ImportComment:  \"\",\n    Doc:            \"\",\n    ImportPath:     \".\",\n    Root:           \"\",\n    SrcRoot:        \"\",\n    PkgRoot:        \"\",\n    PkgTargetRoot:  \"\",\n    BinDir:         \"\",\n    Goroot:         false,\n    PkgObj:         \"\",\n    AllTags:        nil,\n    ConflictDir:    \"\",\n    GoFiles:        nil,\n    CgoFiles:       nil,\n    IgnoredGoFiles: nil,\n    InvalidGoFiles: nil,\n    CFiles:         nil,\n    CXXFiles:       nil,\n    MFiles:         nil,\n    HFiles:         nil,\n    SFiles:         nil,\n    SwigFiles:      nil,\n    SwigCXXFiles:   nil,\n    SysoFiles:      nil,\n    CgoCFLAGS:      nil,\n    CgoCPPFLAGS:    nil,\n    CgoCXXFLAGS:    nil,\n    CgoLDFLAGS:     nil,\n    CgoPkgConfig:   nil,\n    Imports:        nil,\n    ImportPos:      {},\n    TestGoFiles:    nil,\n    TestImports:    nil,\n    TestImportPos:  {},\n    XTestGoFiles:   nil,\n    XTestImports:   nil,\n    XTestImportPos: {},\n}\nDone Looking For Package: . in /Users/aaron/documents/gowork/src/github.com/Throckmortra/ryp\n&main.Package{\n    Dir:            \"/Users/aaron/documents/gowork/src/github.com/Throckmortra/ryp\",\n    Root:           \"\",\n    ImportPath:     \".\",\n    Deps:           nil,\n    Standard:       false,\n    Processed:      false,\n    GoFiles:        nil,\n    CgoFiles:       nil,\n    IgnoredGoFiles: nil,\n    TestGoFiles:    nil,\n    TestImports:    nil,\n    XTestGoFiles:   nil,\n    XTestImports:   nil,\n    Error:          struct { Err string }{},\n    Imports:        nil,\n}\n[]*main.Package{\n    &main.Package{\n        Dir:            \"/Users/aaron/documents/gowork/src/github.com/Throckmortra/ryp\",\n        Root:           \"\",\n        ImportPath:     \".\",\n        Deps:           nil,\n        Standard:       false,\n        Processed:      false,\n        GoFiles:        nil,\n        CgoFiles:       nil,\n        IgnoredGoFiles: nil,\n        TestGoFiles:    nil,\n        TestImports:    nil,\n        XTestGoFiles:   nil,\n        XTestImports:   nil,\n        Error:          struct { Err string }{},\n        Imports:        nil,\n    },\n}\nFiltered projectPackages\n[]*main.Package{\n    &main.Package{\n        Dir:            \"/Users/aaron/documents/gowork/src/github.com/Throckmortra/ryp\",\n        Root:           \"\",\n        ImportPath:     \".\",\n        Deps:           nil,\n        Standard:       false,\n        Processed:      false,\n        GoFiles:        nil,\n        CgoFiles:       nil,\n        IgnoredGoFiles: nil,\n        TestGoFiles:    nil,\n        TestImports:    nil,\n        XTestGoFiles:   nil,\n        XTestImports:   nil,\n        Error:          struct { Err string }{},\n        Imports:        nil,\n    },\n}\nfill .\n[]*main.Package{\n    &main.Package{\n        Dir:            \"/Users/aaron/documents/gowork/src/github.com/Throckmortra/ryp\",\n        Root:           \"\",\n        ImportPath:     \".\",\n        Deps:           nil,\n        Standard:       false,\n        Processed:      false,\n        GoFiles:        nil,\n        CgoFiles:       nil,\n        IgnoredGoFiles: nil,\n        TestGoFiles:    nil,\n        TestImports:    nil,\n        XTestGoFiles:   nil,\n        XTestImports:   nil,\n        Error:          struct { Err string }{},\n        Imports:        nil,\n    },\n}\nLoadPackages []\npath [.]\nuniq, unqualify'd path [.]\nLoadPackages [.]\nlistPackage .\nfindDirForPath . <nil>\nLooking For Package: . in /Users/aaron/documents/gowork/src/github.com/Throckmortra/ryp\n&build.Package{\n    Dir:            \"/Users/aaron/documents/gowork/src/github.com/Throckmortra/ryp\",\n    Name:           \"\",\n    ImportComment:  \"\",\n    Doc:            \"\",\n    ImportPath:     \".\",\n    Root:           \"\",\n    SrcRoot:        \"\",\n    PkgRoot:        \"\",\n    PkgTargetRoot:  \"\",\n    BinDir:         \"\",\n    Goroot:         false,\n    PkgObj:         \"\",\n    AllTags:        nil,\n    ConflictDir:    \"\",\n    GoFiles:        nil,\n    CgoFiles:       nil,\n    IgnoredGoFiles: nil,\n    InvalidGoFiles: nil,\n    CFiles:         nil,\n    CXXFiles:       nil,\n    MFiles:         nil,\n    HFiles:         nil,\n    SFiles:         nil,\n    SwigFiles:      nil,\n    SwigCXXFiles:   nil,\n    SysoFiles:      nil,\n    CgoCFLAGS:      nil,\n    CgoCPPFLAGS:    nil,\n    CgoCXXFLAGS:    nil,\n    CgoLDFLAGS:     nil,\n    CgoPkgConfig:   nil,\n    Imports:        nil,\n    ImportPos:      {},\n    TestGoFiles:    nil,\n    TestImports:    nil,\n    TestImportPos:  {},\n    XTestGoFiles:   nil,\n    XTestImports:   nil,\n    XTestImportPos: {},\n}\nDone Looking For Package: . in /Users/aaron/documents/gowork/src/github.com/Throckmortra/ryp\n&main.Package{\n    Dir:            \"/Users/aaron/documents/gowork/src/github.com/Throckmortra/ryp\",\n    Root:           \"\",\n    ImportPath:     \".\",\n    Deps:           nil,\n    Standard:       false,\n    Processed:      false,\n    GoFiles:        nil,\n    CgoFiles:       nil,\n    IgnoredGoFiles: nil,\n    TestGoFiles:    nil,\n    TestImports:    nil,\n    XTestGoFiles:   nil,\n    XTestImports:   nil,\n    Error:          struct { Err string }{},\n    Imports:        nil,\n}\nstandard or dest skipping .\nNew Godeps Filled\n&main.Godeps{\n    ImportPath:   \".\",\n    GoVersion:    \"go1.6\",\n    GodepVersion: \"\",\n    Packages:     nil,\n    Deps:         nil,\n    isOldFile:    false,\n}\n[]main.Dependency(nil)\n[]main.Dependency(nil)\n[]string(nil)\n. ryp aaron$ ls\nGodeps      Procfile    README.md   main.go     manifest.yml    rypresource.go\n$GOPATH\n-bash: /Users/aaron/Documents/gowork: is a directory\ngo install runs and installs \n. https://github.com/Throckmortra/ryp/blob/master/Godeps/Godeps.json\nthis is the Godeps.json when I committed it, working, 23 days ago\n. godep save was working then and correctly saved Deps. Running godep save today after updating godep to v62 is wiping my deps on every project I've run it on \n. as well as v61? https://github.com/Throckmortra/ryp/blob/master/Godeps/Godeps.json was commited while using v60 \n. retrying with fixed path now\n. thank god, that fixed it\n. sorry I'm an idiot. Thank you for your help \n. ",
    "yields": "I see, is there a workaround at all?\nSeems to me that godep <pkg> should update a single package and it's dependencies and not error if another package does not exists, is there a reason for this workflow that i'm missing?\nWould love to work on a fix if you're interested :)\n. whoops, my bad.\n. I see, is there a workaround at all?\nSeems to me that godep <pkg> should update a single package and it's dependencies and not error if another package does not exists, is there a reason for this workflow that i'm missing?\nWould love to work on a fix if you're interested :)\n. whoops, my bad.\n. ",
    "kowalczykp": "This is not concerning the architecture at all, I can try to create a simple repro.\nBasically:\nGiven a dependency of packageX in RepoX, go get stops at this point while downloading/requiring dependencies, while godep save requires all the dependencies from RepoX to be existient in the GOPATH before godep save\n. I'm using the newest godep, and it seems that it is indeed working as intended, what has mislead me, was vendored dependencies inside my project's original dependencies. \nGodep enforces to flatten those dependencies, and this is approach I support in 100% (that's why we chose godep in the first place), but I somehow managed to misinterpret the additional dependencies enforcement while saving ;)\nCurrent approach concerning OS tags is wise as well, as I am regulary switching between mac<->linux myself, although adding f.e. windows to blacklist tags in godeps, would be awesome, especially for internal/commercial projects. Looking forward to that feature.\nThanks \n. This is not concerning the architecture at all, I can try to create a simple repro.\nBasically:\nGiven a dependency of packageX in RepoX, go get stops at this point while downloading/requiring dependencies, while godep save requires all the dependencies from RepoX to be existient in the GOPATH before godep save\n. I'm using the newest godep, and it seems that it is indeed working as intended, what has mislead me, was vendored dependencies inside my project's original dependencies. \nGodep enforces to flatten those dependencies, and this is approach I support in 100% (that's why we chose godep in the first place), but I somehow managed to misinterpret the additional dependencies enforcement while saving ;)\nCurrent approach concerning OS tags is wise as well, as I am regulary switching between mac<->linux myself, although adding f.e. windows to blacklist tags in godeps, would be awesome, especially for internal/commercial projects. Looking forward to that feature.\nThanks \n. ",
    "tjannaud": "v69 fixed this, thanks\n. v69 fixed this, thanks\n. ",
    "kristijan-ujevic": "this is not fixed, running version \"godep v74 (linux/amd64/go1.6.2)\"\n. agreed\n. echo $GOPATH\noutput:\n/home/MyUsername/go\n. this is not fixed, running version \"godep v74 (linux/amd64/go1.6.2)\"\n. agreed\n. echo $GOPATH\noutput:\n/home/MyUsername/go\n. ",
    "trungng92": "Wow that's a good idea. I don't know why I didn't think of that. Thanks!\n. Wow that's a good idea. I don't know why I didn't think of that. Thanks!\n. ",
    "calvn": "Your point is fair, but I think that git-ignoring vendor/ should be an option. godep restore should try to fetch remote dependencies if vendor/ is absent before showing failure due to network, if there is one. If vendor/ is already present, then simply skip that step. I think giving users the option is better than excluding it entirely.\nEdit: I just dug deeper into this and saw #123 and #131 along with the proposal to remove such feature.\n. I see. I was thinking maybe godep restore (or some alternate command) could do the fetching to vendor/. Anyhow, I think I've found glide, which has what I am looking for.\n. Your point is fair, but I think that git-ignoring vendor/ should be an option. godep restore should try to fetch remote dependencies if vendor/ is absent before showing failure due to network, if there is one. If vendor/ is already present, then simply skip that step. I think giving users the option is better than excluding it entirely.\nEdit: I just dug deeper into this and saw #123 and #131 along with the proposal to remove such feature.\n. I see. I was thinking maybe godep restore (or some alternate command) could do the fetching to vendor/. Anyhow, I think I've found glide, which has what I am looking for.\n. ",
    "kevinburke": "It would also be nice to have this info in the README next to \"[Add/Update] a Dependency\"\n. It would also be nice to have this info in the README next to \"[Add/Update] a Dependency\"\n. ",
    "YueHonghui": "@freeformz Add an \"origin\" field to each dep worked in this case. But I think the targets of add \"origin\" field to each dep or add \"repo\"(maybe \"redirect\", \"mirror\", \"prefix\"?) to top level of vendor file seems different. For the deps will be added in the future, \"origin\" field of each dep can't do well at now. For the case downloading \"rsc.io/pdf\" from \"anyurl/anypath\", \"repo\" field doesn't work at all. \nPrivate repo mirror to have best control of dependencies or fit the situation lack of access to public network is important for the company use, \"origin\" field to each dep is not the best practice. I'll think more for this.\n. @freeformz Add an \"origin\" field to each dep worked in this case. But I think the targets of add \"origin\" field to each dep or add \"repo\"(maybe \"redirect\", \"mirror\", \"prefix\"?) to top level of vendor file seems different. For the deps will be added in the future, \"origin\" field of each dep can't do well at now. For the case downloading \"rsc.io/pdf\" from \"anyurl/anypath\", \"repo\" field doesn't work at all. \nPrivate repo mirror to have best control of dependencies or fit the situation lack of access to public network is important for the company use, \"origin\" field to each dep is not the best practice. I'll think more for this.\n. ",
    "on99": "I think that's a good start. @freeformz \n. Any progress? @freeformz \n. I think that's a good start. @freeformz \n. Any progress? @freeformz \n. ",
    "vladimirvivien": "@on99 @freeformz Any progress on this feature? \n. @on99 @freeformz Any progress on this feature? \n. ",
    "jmwilkinson": "What is the status on this?. What is the status on this?. ",
    "FlyingShit-XinHuang": "You can get the output from http://pan.baidu.com/s/1hsnV7tM\n. You can get the output from http://pan.baidu.com/s/1hsnV7tM\n. ",
    "setekhid": "Thanks for the guild above, I've figured out the reason.\nWell, I'd like to collect every my own projects into a special path, and link these repo's root directories into $GOPATH. That cause some trouble while godep iterating the dependencies. kr/fs.Walk will not trace symbolic links.\n. Thanks for the guild above, I've figured out the reason.\nWell, I'd like to collect every my own projects into a special path, and link these repo's root directories into $GOPATH. That cause some trouble while godep iterating the dependencies. kr/fs.Walk will not trace symbolic links.\n. ",
    "thedarkphoton": "I assume you meant to write git ls-files\nI get a list of a bunch of files\n.travis.yml\nLICENSE\nREADME.md\nexample/asset/index.html\nexample/asset/index.js\nexample/asset/style.css\nexample/main.go\nioutil.go\nioutil_test.go\nmessage/message.go\nparser/limit_reader.go\nparser/limit_reader_test.go\nparser/packet.go\nparser/packet_test.go\nparser/parser.go\nparser/payload.go\nparser/payload_test.go\npolling/client.go\npolling/polling_test.go\npolling/server.go\npolling/server_test.go\npolling/try_locker.go\npolling/try_locker_test.go\npolling/writer.go\npolling/writer_test.go\npolling/xhr.go\nserver.go\nserver_conn.go\nserver_conn_test.go\nserver_test.go\nsessions.go\nsessions_test.go\ntransport/transport.go\nwebsocket/client.go\nwebsocket/server.go\nwebsocket/websocket.go\nwebsocket/websocket_test.go\nIf you're suggesting I should commit changes in that folder then I kind of tried that already. I don't really know \"dirty\" suppose to mean in this context.\n. Scratch that, I tried to commit these changes again and it works now, not sure what I was doing wrong last time.\n. I assume you meant to write git ls-files\nI get a list of a bunch of files\n.travis.yml\nLICENSE\nREADME.md\nexample/asset/index.html\nexample/asset/index.js\nexample/asset/style.css\nexample/main.go\nioutil.go\nioutil_test.go\nmessage/message.go\nparser/limit_reader.go\nparser/limit_reader_test.go\nparser/packet.go\nparser/packet_test.go\nparser/parser.go\nparser/payload.go\nparser/payload_test.go\npolling/client.go\npolling/polling_test.go\npolling/server.go\npolling/server_test.go\npolling/try_locker.go\npolling/try_locker_test.go\npolling/writer.go\npolling/writer_test.go\npolling/xhr.go\nserver.go\nserver_conn.go\nserver_conn_test.go\nserver_test.go\nsessions.go\nsessions_test.go\ntransport/transport.go\nwebsocket/client.go\nwebsocket/server.go\nwebsocket/websocket.go\nwebsocket/websocket_test.go\nIf you're suggesting I should commit changes in that folder then I kind of tried that already. I don't really know \"dirty\" suppose to mean in this context.\n. Scratch that, I tried to commit these changes again and it works now, not sure what I was doing wrong last time.\n. ",
    "mkumatag": "I also faced this issue while building k8s.io/heapster project with updated github.com/boltdb/bolt, any update on this issue?\n. I also faced this issue while building k8s.io/heapster project with updated github.com/boltdb/bolt, any update on this issue?\n. ",
    "ngtuna": "I found godep save ./... can help. Closed!\n. I found godep save ./... can help. Closed!\n. ",
    "sttts": "I guess I see the same, but independent from any test:\n- I depend on github.com/libopenstorage/openstorage and godep restore complains that github.com/aws/aws-sdk-go/private/endpoints cannot be found. \n- The only reference is in github.com/libopenstorage/openstorage/vendor/github.com/aws/aws-sdk-go/aws/defaults/defaults.go.\n- In newer versions of github.com/aws/aws-sdk-go the endpoints directory has gone away. Godep though sees the vendor directory and falls over.. I guess I see the same, but independent from any test:\n- I depend on github.com/libopenstorage/openstorage and godep restore complains that github.com/aws/aws-sdk-go/private/endpoints cannot be found. \n- The only reference is in github.com/libopenstorage/openstorage/vendor/github.com/aws/aws-sdk-go/aws/defaults/defaults.go.\n- In newer versions of github.com/aws/aws-sdk-go the endpoints directory has gone away. Godep though sees the vendor directory and falls over.. ",
    "0xdeafcafe": "I'm getting this issue running godep save ../... where it is outputting godep: Package (github.com/davecgh/go-spew/spew) not found too. I found that the following packages require it - is there a workaround or fix? I'm fairly new to godep.\n\n. I'm getting this issue running godep save ../... where it is outputting godep: Package (github.com/davecgh/go-spew/spew) not found too. I found that the following packages require it - is there a workaround or fix? I'm fairly new to godep.\n\n. ",
    "e-nikolov": "Have there been any developments to this issue without involving vendoring?. Have there been any developments to this issue without involving vendoring?. ",
    "JasonCoombs": "SOLUTION (*)\n$sudo apt-get remove gccgo-go\n$curl -O https://storage.googleapis.com/golang/go1.6.2.linux-amd64.tar.gz\n$tar -xvf go1.6.2.linux-amd64.tar.gz\n$sudo mv go /usr/local\nAdd the following to .bashrc\nexport PATH=$PATH:/usr/local/go/bin\nRemember:\n$source .bashrc\n(*) Installation instructions per https://golang.org/doc/install\nNow:\n```\n$go version\ngo version go1.6.2 linux/amd64\n$godep version\ngodep v74 (linux/amd64/xgcc (Ubuntu 4.9.3-0ubuntu4) 4.9.3)\n```\nCurrent behavior\nHappiness\nRecommendation\nSomebody tell @Ubuntu to update its repository?\n. SOLUTION (*)\n$sudo apt-get remove gccgo-go\n$curl -O https://storage.googleapis.com/golang/go1.6.2.linux-amd64.tar.gz\n$tar -xvf go1.6.2.linux-amd64.tar.gz\n$sudo mv go /usr/local\nAdd the following to .bashrc\nexport PATH=$PATH:/usr/local/go/bin\nRemember:\n$source .bashrc\n(*) Installation instructions per https://golang.org/doc/install\nNow:\n```\n$go version\ngo version go1.6.2 linux/amd64\n$godep version\ngodep v74 (linux/amd64/xgcc (Ubuntu 4.9.3-0ubuntu4) 4.9.3)\n```\nCurrent behavior\nHappiness\nRecommendation\nSomebody tell @Ubuntu to update its repository?\n. ",
    "dvcrn": "I am also not sure whether this is normal beahvior or a bug. Is godep update supposed to vendor the vendor of the vendor?\n. I am also not sure whether this is normal beahvior or a bug. Is godep update supposed to vendor the vendor of the vendor?\n. ",
    "ronnylt": "I think this is the expected behavior. \nFrom https://golang.org/s/go15vendor\n\nThe second is that this does not attempt to solve the problem of vendoring resulting in multiple copies of a package being linked into a single binary. Sometimes having multiple copies of a library is not a problem; sometimes it is. At least for now, it doesn\u2019t seem that the go command should be in charge of policing or solving that problem.\n\nSo the expected should be to also vendor vendors dependencies'  and so on... \ngodepshould also remove the vendor directories \n. I think this is the expected behavior. \nFrom https://golang.org/s/go15vendor\n\nThe second is that this does not attempt to solve the problem of vendoring resulting in multiple copies of a package being linked into a single binary. Sometimes having multiple copies of a library is not a problem; sometimes it is. At least for now, it doesn\u2019t seem that the go command should be in charge of policing or solving that problem.\n\nSo the expected should be to also vendor vendors dependencies'  and so on... \ngodepshould also remove the vendor directories \n. ",
    "oscarzhao": "I also want flattened dependencies . kubernetes uses github.com/golang/glog, my project uses glog too, but i cannot manage glog with godep\n. kubernetes/client-go  solved my problem, eventually\n. I also want flattened dependencies . kubernetes uses github.com/golang/glog, my project uses glog too, but i cannot manage glog with godep\n. kubernetes/client-go  solved my problem, eventually\n. ",
    "andrewstuart": "Yeah, it'd definitely be nice to not need to run godep restore, but I still think a generic foreach command has the potential to be useful for one-offs and scripts, much as it is with git submodule foreach.\nI think it's just a nice side-effect that for now it does help the process of upgrading old Godeps/_workspace environments using godep restore; godep save; godep foreach git checkout master.\n. Yeah, it'd definitely be nice to not need to run godep restore, but I still think a generic foreach command has the potential to be useful for one-offs and scripts, much as it is with git submodule foreach.\nI think it's just a nice side-effect that for now it does help the process of upgrading old Godeps/_workspace environments using godep restore; godep save; godep foreach git checkout master.\n. ",
    "7AC": "LGTM\n. LGTM\n. ",
    "aaronbee": "My bad. I didn't mean to add those other changes to this PR.\n. I created a new PR: https://github.com/tools/godep/pull/522\n. My bad. I didn't mean to add those other changes to this PR.\n. I created a new PR: https://github.com/tools/godep/pull/522\n. ",
    "JoakimSoderberg": "I was expecting this behavior as well. godep get simply puts the packages into the $GOPATH/src directory.\nThe only way to put them in vendor instead is to use godep save, but what if I don't want to update them to the latest version?\n. I was expecting this behavior as well. godep get simply puts the packages into the $GOPATH/src directory.\nThe only way to put them in vendor instead is to use godep save, but what if I don't want to update them to the latest version?\n. ",
    "Oppodelldog": "I just added a new dependency to a project after month, having the same issue.\ngo 1.5.1, Vendorexperiment not enabled\nI added the new dependency to Godeps.json, godep restore works.\nBut godep save deletes all dependcies from Godeps.json and from Godeps/_workspace.\n. I just added a new dependency to a project after month, having the same issue.\ngo 1.5.1, Vendorexperiment not enabled\nI added the new dependency to Godeps.json, godep restore works.\nBut godep save deletes all dependcies from Godeps.json and from Godeps/_workspace.\n. ",
    "carlosmn": "I've found this to happen when the version of go you're using (that godep shells out to) is different from the one which godep was built with. I had installed godep with 1.6 but I'm now using 1.7 and it looks like it can't tell that the built-in packages correspond to 1.7.\nI re-installed godep with 1.7 and it's working again now.\n. I've found this to happen when the version of go you're using (that godep shells out to) is different from the one which godep was built with. I had installed godep with 1.6 but I'm now using 1.7 and it looks like it can't tell that the built-in packages correspond to 1.7.\nI re-installed godep with 1.7 and it's working again now.\n. ",
    "nvartolomei": "Forgot about this. The problem was fixed by exporting correct GOROOT env variable.\n. Forgot about this. The problem was fixed by exporting correct GOROOT env variable.\n. ",
    "AlexandreRoba": "I'm not sure this would make much sense to have it in the vendor folder.\nUnless I'm mistaken but the vendor folder should not be under source control but the Godeps.json needs to be. Putting them in this folder would create confusion...\nIt could be at the root level.. I'm not sure this would make much sense to have it in the vendor folder.\nUnless I'm mistaken but the vendor folder should not be under source control but the Godeps.json needs to be. Putting them in this folder would create confusion...\nIt could be at the root level.. ",
    "netrounds-joakim": "I now see why this happens when I look at the code.\ngolang\n    godepsFile    = filepath.Join(\"Godeps\", \"Godeps.json\")\n    oldGodepsFile = filepath.Join(\"Godeps\")\nhttps://github.com/tools/godep/blob/master/godepfile.go#L14\nThe old format used a file with the same name as the directory. So one could check if it is a directory first, before trying to read it as a file.\n. Ugh ok... Turns out running Docker in windows (or something other reason doing this in my Docker instance) breaks the cat and more output....\nThe same file after install vim and opening it in that:\njson\n{\n        \"ImportPath\": \"app\",\n        \"GoVersion\": \"go1.6\",\n        \"GodepVersion\": \"v74\",\n        \"Deps\": [\n                {\n                        \"ImportPath\": \"github.com/emicklei/go-restful\",\n                        \"Comment\": \"v1.2-79-g89ef8af\",\n                        \"Rev\": \"89ef8af493ab468a45a42bb0d89a06fccdd2fb22\"\n                },\n                {\n                        \"ImportPath\": \"github.com/emicklei/go-restful/log\",\n                        \"Comment\": \"v1.2-79-g89ef8af\",\n                        \"Rev\": \"89ef8af493ab468a45a42bb0d89a06fccdd2fb22\"\n                },\n                {\n                        \"ImportPath\": \"github.com/emicklei/go-restful/swagger\",\n                        \"Comment\": \"v1.2-79-g89ef8af\",\n                        \"Rev\": \"89ef8af493ab468a45a42bb0d89a06fccdd2fb22\"\n                },\n                {\n                        \"ImportPath\": \"labix.org/v2/mgo/bson\",\n                        \"Comment\": \"287\",\n                        \"Rev\": \"gustavo@niemeyer.net-20140501184651-975yyw9ipld92pji\"\n                }\n        ]\n}\n. I now see why this happens when I look at the code.\ngolang\n    godepsFile    = filepath.Join(\"Godeps\", \"Godeps.json\")\n    oldGodepsFile = filepath.Join(\"Godeps\")\nhttps://github.com/tools/godep/blob/master/godepfile.go#L14\nThe old format used a file with the same name as the directory. So one could check if it is a directory first, before trying to read it as a file.\n. Ugh ok... Turns out running Docker in windows (or something other reason doing this in my Docker instance) breaks the cat and more output....\nThe same file after install vim and opening it in that:\njson\n{\n        \"ImportPath\": \"app\",\n        \"GoVersion\": \"go1.6\",\n        \"GodepVersion\": \"v74\",\n        \"Deps\": [\n                {\n                        \"ImportPath\": \"github.com/emicklei/go-restful\",\n                        \"Comment\": \"v1.2-79-g89ef8af\",\n                        \"Rev\": \"89ef8af493ab468a45a42bb0d89a06fccdd2fb22\"\n                },\n                {\n                        \"ImportPath\": \"github.com/emicklei/go-restful/log\",\n                        \"Comment\": \"v1.2-79-g89ef8af\",\n                        \"Rev\": \"89ef8af493ab468a45a42bb0d89a06fccdd2fb22\"\n                },\n                {\n                        \"ImportPath\": \"github.com/emicklei/go-restful/swagger\",\n                        \"Comment\": \"v1.2-79-g89ef8af\",\n                        \"Rev\": \"89ef8af493ab468a45a42bb0d89a06fccdd2fb22\"\n                },\n                {\n                        \"ImportPath\": \"labix.org/v2/mgo/bson\",\n                        \"Comment\": \"287\",\n                        \"Rev\": \"gustavo@niemeyer.net-20140501184651-975yyw9ipld92pji\"\n                }\n        ]\n}\n. ",
    "johanoskarsson": "We're seeing the same problem. We have one codebase but multiple starting points in: project/cmd//main.go. We don't have any .go files in the project root. Unfortunately this seems to confuse godep as described in this issue.. We're seeing the same problem. We have one codebase but multiple starting points in: project/cmd//main.go. We don't have any .go files in the project root. Unfortunately this seems to confuse godep as described in this issue.. ",
    "GrimTheReaper": "Experiencing the same issue.\n. Experiencing the same issue.\n. ",
    "MikeSpreitzer": "Closed?  There was no assent that the originator had his problem solved.\nBTW, this looks a lot like #517 \nThe work-around posted there and here is not working for me.. I tried that, and eventually ran into this roadblock:\nmjs10:tpr-example mspreitz$ godep save\ngodep: Package (github.com/docker/distribution/digest) not found\nmjs10:tpr-example mspreitz$ go get github.com/docker/distribution/digest\npackage github.com/docker/distribution/digest: cannot find package \"github.com/docker/distribution/digest\" in any of:\n    /usr/local/go/src/github.com/docker/distribution/digest (from $GOROOT)\n    /Users/mspreitz/Documents/go/src/github.com/docker/distribution/digest (from $GOPATH)\n. Starting from a fresh installation of go 1.8.1 and an empty go workspace:\n```\nmjs10:~ mspreitz$ printenv GOPATH\n/Users/mspreitz/Documents/go2\nmjs10:~ mspreitz$ ls -l ${GOPATH}/*\n/Users/mspreitz/Documents/go2/bin:\n/Users/mspreitz/Documents/go2/pkg:\n/Users/mspreitz/Documents/go2/src:\nmjs10:~ mspreitz$ printenv GOROOT\n/usr/local/go\nmjs10:~ mspreitz$ ls -l $GOROOT/bin\ntotal 55544\n-rwxr-xr-x  1 root  wheel   9985940 Apr  7 12:54 go\n-rwxr-xr-x  1 root  wheel  15129860 Apr  7 12:59 godoc\n-rwxr-xr-x  1 root  wheel   3320448 Apr  7 12:54 gofmt\nmjs10:~ mspreitz$ go version\ngo version go1.8.1 darwin/amd64\nmjs10:~ mspreitz$ go get github.com/tools/godep\nmjs10:~ mspreitz$ printenv | grep GO\nGOROOT=/usr/local/go\nGOPATH=/Users/mspreitz/Documents/go2\nmjs10:~ mspreitz$ which godep\n/Users/mspreitz/Documents/go2/bin/godep\nmjs10:~ mspreitz$ sudo cp /Users/mspreitz/Documents/go2/bin/godep ${GOROOT}/bin\nPassword:\nmjs10:~ mspreitz$ ls -l $GOROOT/bin\ntotal 73792\n-rwxr-xr-x  1 root  wheel   9985940 Apr  7 12:54 go\n-rwxr-xr-x  1 root  wheel   9340372 May  2 15:54 godep\n-rwxr-xr-x  1 root  wheel  15129860 Apr  7 12:59 godoc\n-rwxr-xr-x  1 root  wheel   3320448 Apr  7 12:54 gofmt\nmjs10:~ mspreitz$ go get github.com/MikeSpreitzer/tpr-example\nmjs10:~ mspreitz$ go version\ngo version go1.8.1 darwin/amd64\nmjs10:~ mspreitz$ godep version\ngodep v79 (darwin/amd64/go1.8.1)\nmjs10:~ mspreitz$ cd /Users/mspreitz/Documents/go2/src/github.com/MikeSpreitzer/tpr-example/\nmjs10:tpr-example mspreitz$ godep save\ngodep: Package (github.com/PuerkitoBio/purell) not found\nmjs10:tpr-example mspreitz$ go get github.com/PuerkitoBio/purell\nmjs10:tpr-example mspreitz$ godep save\ngodep: Package (github.com/davecgh/go-spew/spew) not found\nmjs10:tpr-example mspreitz$ go get github.com/davecgh/go-spew/spew\nmjs10:tpr-example mspreitz$ godep save\ngodep: Package (github.com/docker/distribution/digest) not found\nmjs10:tpr-example mspreitz$ go get github.com/docker/distribution/digest\npackage github.com/docker/distribution/digest: cannot find package \"github.com/docker/distribution/digest\" in any of:\n    /usr/local/go/src/github.com/docker/distribution/digest (from $GOROOT)\n    /Users/mspreitz/Documents/go2/src/github.com/docker/distribution/digest (from $GOPATH)\n. @rdixonbhw Thanks!  That got me past that difficulty.. Next up:\nmjs10:tpr-example mspreitz$ godep save\ngodep: Package (github.com/emicklei/go-restful/swagger) not found\nmjs10:tpr-example mspreitz$ \nmjs10:tpr-example mspreitz$ go get github.com/emicklei/go-restful/swagger\npackage github.com/emicklei/go-restful/swagger: cannot find package \"github.com/emicklei/go-restful/swagger\" in any of:\n    /usr/local/go/src/github.com/emicklei/go-restful/swagger (from $GOROOT)\n    /Users/mspreitz/Documents/go2/src/github.com/emicklei/go-restful/swagger (from $GOPATH)\n. Found that referenced in client-go's Godeps, with a commit ID.  Checking out that commit got me past that one.. @Sikandarkhan: that is a basic issue about using the go tools. See https://golang.org/doc/code.html. Perhaps because somehow the older `godep` in `/usr/local/go` was run.. Dup of https://github.com/golang/go/issues/18544 (because I was actually using an outdated `godep`).. Closed?  There was no assent that the originator had his problem solved.\nBTW, this looks a lot like #517 \nThe work-around posted there and here is not working for me.. I tried that, and eventually ran into this roadblock:\nmjs10:tpr-example mspreitz$ godep save\ngodep: Package (github.com/docker/distribution/digest) not found\nmjs10:tpr-example mspreitz$ go get github.com/docker/distribution/digest\npackage github.com/docker/distribution/digest: cannot find package \"github.com/docker/distribution/digest\" in any of:\n    /usr/local/go/src/github.com/docker/distribution/digest (from $GOROOT)\n    /Users/mspreitz/Documents/go/src/github.com/docker/distribution/digest (from $GOPATH)\n. Starting from a fresh installation of go 1.8.1 and an empty go workspace:\nmjs10:~ mspreitz$ printenv GOPATH\n/Users/mspreitz/Documents/go2\nmjs10:~ mspreitz$ ls -l ${GOPATH}/*\n/Users/mspreitz/Documents/go2/bin:\n/Users/mspreitz/Documents/go2/pkg:\n/Users/mspreitz/Documents/go2/src:\nmjs10:~ mspreitz$ printenv GOROOT\n/usr/local/go\nmjs10:~ mspreitz$ ls -l $GOROOT/bin\ntotal 55544\n-rwxr-xr-x  1 root  wheel   9985940 Apr  7 12:54 go\n-rwxr-xr-x  1 root  wheel  15129860 Apr  7 12:59 godoc\n-rwxr-xr-x  1 root  wheel   3320448 Apr  7 12:54 gofmt\nmjs10:~ mspreitz$ go version\ngo version go1.8.1 darwin/amd64\nmjs10:~ mspreitz$ go get github.com/tools/godep\nmjs10:~ mspreitz$ printenv | grep GO\nGOROOT=/usr/local/go\nGOPATH=/Users/mspreitz/Documents/go2\nmjs10:~ mspreitz$ which godep\n/Users/mspreitz/Documents/go2/bin/godep\nmjs10:~ mspreitz$ sudo cp /Users/mspreitz/Documents/go2/bin/godep ${GOROOT}/bin\nPassword:\nmjs10:~ mspreitz$ ls -l $GOROOT/bin\ntotal 73792\n-rwxr-xr-x  1 root  wheel   9985940 Apr  7 12:54 go\n-rwxr-xr-x  1 root  wheel   9340372 May  2 15:54 godep\n-rwxr-xr-x  1 root  wheel  15129860 Apr  7 12:59 godoc\n-rwxr-xr-x  1 root  wheel   3320448 Apr  7 12:54 gofmt\nmjs10:~ mspreitz$ go get github.com/MikeSpreitzer/tpr-example\nmjs10:~ mspreitz$ go version\ngo version go1.8.1 darwin/amd64\nmjs10:~ mspreitz$ godep version\ngodep v79 (darwin/amd64/go1.8.1)\nmjs10:~ mspreitz$ cd /Users/mspreitz/Documents/go2/src/github.com/MikeSpreitzer/tpr-example/\nmjs10:tpr-example mspreitz$ godep save\ngodep: Package (github.com/PuerkitoBio/purell) not found\nmjs10:tpr-example mspreitz$ go get github.com/PuerkitoBio/purell\nmjs10:tpr-example mspreitz$ godep save\ngodep: Package (github.com/davecgh/go-spew/spew) not found\nmjs10:tpr-example mspreitz$ go get github.com/davecgh/go-spew/spew\nmjs10:tpr-example mspreitz$ godep save\ngodep: Package (github.com/docker/distribution/digest) not found\nmjs10:tpr-example mspreitz$ go get github.com/docker/distribution/digest\npackage github.com/docker/distribution/digest: cannot find package \"github.com/docker/distribution/digest\" in any of:\n    /usr/local/go/src/github.com/docker/distribution/digest (from $GOROOT)\n    /Users/mspreitz/Documents/go2/src/github.com/docker/distribution/digest (from $GOPATH)\n. @rdixonbhw Thanks!  That got me past that difficulty.. Next up:\nmjs10:tpr-example mspreitz$ godep save\ngodep: Package (github.com/emicklei/go-restful/swagger) not found\nmjs10:tpr-example mspreitz$ \nmjs10:tpr-example mspreitz$ go get github.com/emicklei/go-restful/swagger\npackage github.com/emicklei/go-restful/swagger: cannot find package \"github.com/emicklei/go-restful/swagger\" in any of:\n    /usr/local/go/src/github.com/emicklei/go-restful/swagger (from $GOROOT)\n    /Users/mspreitz/Documents/go2/src/github.com/emicklei/go-restful/swagger (from $GOPATH)\n``. Found that referenced in client-go's Godeps, with a commit ID.  Checking out that commit got me past that one.. @Sikandarkhan: that is a basic issue about using the go tools. See https://golang.org/doc/code.html. Perhaps because somehow the oldergodepin/usr/local/gowas run.. Dup of https://github.com/golang/go/issues/18544 (because I was actually using an outdatedgodep`).. ",
    "kris-nova": "Hey @ajayamohan, how did you install godep? Did you compile it yourself?\nThis looks like you are missing a dependency for godep itself, and the go get workaround you submitted seems to be pulling the dependency and dropping it in your $GOPATH. Which will of course allow godep to build properly. \n. Okay thanks - will re-create today and get back to you.\nCheers\n. Hey @ajayamohan,\nThis looks like you ran into the problem while installing go-kit? Is that right?\n\nTake dependency on go-kit packages\n\nIf so can we open up a new bug in go-kit for this? I think I see the problem, but I want to make sure it gets tracked correctly. Also, if that is the case can we get detailed step-by-step reproduction steps on the go-kit issue? \nThanks :)\n. @PandaWhisperer - These are all go dependency errors - how did you install your application, and what are your replication steps?\n. Hey @ajayamohan, how did you install godep? Did you compile it yourself?\nThis looks like you are missing a dependency for godep itself, and the go get workaround you submitted seems to be pulling the dependency and dropping it in your $GOPATH. Which will of course allow godep to build properly. \n. Okay thanks - will re-create today and get back to you.\nCheers\n. Hey @ajayamohan,\nThis looks like you ran into the problem while installing go-kit? Is that right?\n\nTake dependency on go-kit packages\n\nIf so can we open up a new bug in go-kit for this? I think I see the problem, but I want to make sure it gets tracked correctly. Also, if that is the case can we get detailed step-by-step reproduction steps on the go-kit issue? \nThanks :)\n. @PandaWhisperer - These are all go dependency errors - how did you install your application, and what are your replication steps?\n. ",
    "PandaWhisperer": "Getting a similar error here:\ngodep: Package (golang.org/x/sys/unix) not found\nI'm new to go, not sure if related.\n. @kris-nova just like the documentation said \u2013\u00a0go get github.com/tools/godep. Is there anything else to do?\n. Getting a similar error here:\ngodep: Package (golang.org/x/sys/unix) not found\nI'm new to go, not sure if related.\n. @kris-nova just like the documentation said \u2013\u00a0go get github.com/tools/godep. Is there anything else to do?\n. ",
    "parkr": "This happened to me recently because the version of godep was mismatched with my go version. This was a problem for me because Homebrew versions GOROOT (e.g. GOROOT=\"/usr/local/Cellar/go/1.7.3/libexec\").\nconsole\n$ go version\ngo version go1.7.3 darwin/amd64\n$ godep version\ngodep v74 (darwin/amd64/go1.7.1)\nI had it installed via Homebrew. Solution was to brew remove godep && go get github.com/tools/godep. Hope this helps someone else!\n. These should be automatically installed when you run go get github.com/tools/godep. What error did you see when these are not installed and you run go get github.com/tools/godep?. Fixed by #524.. @freeformz, have a sec to merge the related PR?. Thank you very much, @freeformz! If you need any help going through PR's, please let me know. I'd be happy to help!. @freeformz I'd be honored to maintain this tool. A first step is to mark that it's in maintenance mode and no features will be added going forward. What do you think?. This happened to me recently because the version of godep was mismatched with my go version. This was a problem for me because Homebrew versions GOROOT (e.g. GOROOT=\"/usr/local/Cellar/go/1.7.3/libexec\").\nconsole\n$ go version\ngo version go1.7.3 darwin/amd64\n$ godep version\ngodep v74 (darwin/amd64/go1.7.1)\nI had it installed via Homebrew. Solution was to brew remove godep && go get github.com/tools/godep. Hope this helps someone else!\n. These should be automatically installed when you run go get github.com/tools/godep. What error did you see when these are not installed and you run go get github.com/tools/godep?. Fixed by #524.. @freeformz, have a sec to merge the related PR?. Thank you very much, @freeformz! If you need any help going through PR's, please let me know. I'd be happy to help!. @freeformz I'd be honored to maintain this tool. A first step is to mark that it's in maintenance mode and no features will be added going forward. What do you think?. ",
    "LeslieK": "@kris-nova Figured it out! I cloned a repo using 'go get' and then did 'godep save'\nI got an error that godep could not find a dependency. I got the missing dependency with 'go get' and ran 'godep save' again. I repeated this process for every missing dependency. Eventually, 'godep save' worked. The reason appears to be that go is trying to be efficient: It only imports packages that are appropriate for my OS (ubuntu). godep, on the other hand, is looking for all dependencies, regardless of the value of GOOS. Solution: 'go get' missing dependencies until 'godep save' works.. @kris-nova Figured it out! I cloned a repo using 'go get' and then did 'godep save'\nI got an error that godep could not find a dependency. I got the missing dependency with 'go get' and ran 'godep save' again. I repeated this process for every missing dependency. Eventually, 'godep save' worked. The reason appears to be that go is trying to be efficient: It only imports packages that are appropriate for my OS (ubuntu). godep, on the other hand, is looking for all dependencies, regardless of the value of GOOS. Solution: 'go get' missing dependencies until 'godep save' works.. ",
    "rdixonbhw": "It's probably looking at the master branch which no longer has a digest directory (blame docker), maybe try manually checking out https://github.com/docker/distribution/tree/release/2.6 in your $GOPATH and then running godep save in your project.. It's probably looking at the master branch which no longer has a digest directory (blame docker), maybe try manually checking out https://github.com/docker/distribution/tree/release/2.6 in your $GOPATH and then running godep save in your project.. ",
    "carlosonunez": "I wrote a small bash script to automate this for those interested:\nbash\nmissing_package=\"start\"\nwhile [ \"$missing_package\" != \"\" ]\ndo\n  missing_package=$(godep save 2>&1 | \\\n    egrep '^godep: Package (.*) not found' | \\\n    sed 's/.*(\\(.*\\)).*/\\1/'); \n [ \"$missing_package\" != \"\" ] && { \n   echo \"Installing missing package: ${missing_package}\" ; \n   go get -u \"${missing_package}\"\n  }\ndone\ngodep save. No problem! I'm glad I could help.\nSent from my iPhone\n\nOn Jun 20, 2017, at 20:10, 1138-4EB notifications@github.com wrote:\n@carlosonunez , thank you. That script worked for me. Although I had to add ./... to godep save:\ngodep_save() {\n  missing_package=\"start\"\n  while [ \"$missing_package\" != \"\" ]\n   do\n    missing_package=$(godep save $@ 2>&1 | \\\n      egrep '^godep: Package (.) not found' | \\\n      sed 's/.((.))./\\1/'); \n   [ \"$missing_package\" != \"\" ] && { \n     echo \"Installing missing package: ${missing_package}\" ; \n     go get -u \"${missing_package}\"\n    }\n  done\n  godep save $@\n}\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I wrote a small bash script to automate this for those interested:\n\nbash\nmissing_package=\"start\"\nwhile [ \"$missing_package\" != \"\" ]\ndo\n  missing_package=$(godep save 2>&1 | \\\n    egrep '^godep: Package (.*) not found' | \\\n    sed 's/.*(\\(.*\\)).*/\\1/'); \n [ \"$missing_package\" != \"\" ] && { \n   echo \"Installing missing package: ${missing_package}\" ; \n   go get -u \"${missing_package}\"\n  }\ndone\ngodep save. No problem! I'm glad I could help.\nSent from my iPhone\n\nOn Jun 20, 2017, at 20:10, 1138-4EB notifications@github.com wrote:\n@carlosonunez , thank you. That script worked for me. Although I had to add ./... to godep save:\ngodep_save() {\n  missing_package=\"start\"\n  while [ \"$missing_package\" != \"\" ]\n   do\n    missing_package=$(godep save $@ 2>&1 | \\\n      egrep '^godep: Package (.) not found' | \\\n      sed 's/.((.))./\\1/'); \n   [ \"$missing_package\" != \"\" ] && { \n     echo \"Installing missing package: ${missing_package}\" ; \n     go get -u \"${missing_package}\"\n    }\n  done\n  godep save $@\n}\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "1138-4EB": "@carlosonunez , thank you. That script worked for me. Although I had to add ./... to godep save:\ngodep_save() {\n  missing_package=\"start\"\n  while [ \"$missing_package\" != \"\" ]\n   do\n    missing_package=$(godep save $@ 2>&1 | \\\n      egrep '^godep: Package (.*) not found' | \\\n      sed 's/.*(\\(.*\\)).*/\\1/'); \n   [ \"$missing_package\" != \"\" ] && { \n     echo \"Installing missing package: ${missing_package}\" ; \n     go get -u \"${missing_package}\"\n    }\n  done  \n  godep save $@\n}. @carlosonunez , thank you. That script worked for me. Although I had to add ./... to godep save:\ngodep_save() {\n  missing_package=\"start\"\n  while [ \"$missing_package\" != \"\" ]\n   do\n    missing_package=$(godep save $@ 2>&1 | \\\n      egrep '^godep: Package (.*) not found' | \\\n      sed 's/.*(\\(.*\\)).*/\\1/'); \n   [ \"$missing_package\" != \"\" ] && { \n     echo \"Installing missing package: ${missing_package}\" ; \n     go get -u \"${missing_package}\"\n    }\n  done  \n  godep save $@\n}. ",
    "jockchou": "```\n$ ll\ntotal 8601\ndrwxr-xr-x 1 jockc 197609       0 7\u6708   8 00:08 conf/\n-rwxr-xr-x 1 jockc 197609 8793600 7\u6708   8 06:02 contentlibs.exe*\ndrwxr-xr-x 1 jockc 197609       0 7\u6708   7 23:09 doc/\ndrwxr-xr-x 1 jockc 197609       0 7\u6708   8 06:03 Godeps/\n-rw-r--r-- 1 jockc 197609    1065 7\u6708   6 04:59 LICENSE\n-rw-r--r-- 1 jockc 197609     345 7\u6708   8 05:30 main.go\ndrwxr-xr-x 1 jockc 197609       0 7\u6708   8 05:32 module/\n-rw-r--r-- 1 jockc 197609      70 7\u6708   6 04:59 README.md\ndrwxr-xr-x 1 jockc 197609       0 7\u6708   8 05:33 utils/\ndrwxr-xr-x 1 jockc 197609       0 7\u6708   8 06:03 vendor/\njockc@DESKTOP-MDSE3EM MINGW64 ~/go/src/contentlibs (master)\n$ pwd\n/c/Users/jockc/go/src/contentlibs\n```\n$ godep go build\nmain.go:4:2: cannot find package \"contentlibs/module\" in any of:\n        D:\\Go\\src\\contentlibs\\module (from $GOROOT)\n        C:\\Users\\jockc\\go\\src\\contentlibs\\Godeps\\_workspace\\src\\contentlibs\\module (from $GOPATH)\nmain.go:6:2: cannot find package \"github.com/go-martini/martini\" in any of:\n        D:\\Go\\src\\github.com\\go-martini\\martini (from $GOROOT)\n        C:\\Users\\jockc\\go\\src\\contentlibs\\Godeps\\_workspace\\src\\github.com\\go-martini\\martini (from $GOPATH)\nmain.go:7:2: cannot find package \"github.com/martini-contrib/render\" in any of:\n        D:\\Go\\src\\github.com\\martini-contrib\\render (from $GOROOT)\n        C:\\Users\\jockc\\go\\src\\contentlibs\\Godeps\\_workspace\\src\\github.com\\martini-contrib\\render (from $GOPATH)\ngodep: go exit status 1\n. \n```\n$ ll\ntotal 8601\ndrwxr-xr-x 1 jockc 197609       0 7\u6708   8 00:08 conf/\n-rwxr-xr-x 1 jockc 197609 8793600 7\u6708   8 06:02 contentlibs.exe*\ndrwxr-xr-x 1 jockc 197609       0 7\u6708   7 23:09 doc/\ndrwxr-xr-x 1 jockc 197609       0 7\u6708   8 06:03 Godeps/\n-rw-r--r-- 1 jockc 197609    1065 7\u6708   6 04:59 LICENSE\n-rw-r--r-- 1 jockc 197609     345 7\u6708   8 05:30 main.go\ndrwxr-xr-x 1 jockc 197609       0 7\u6708   8 05:32 module/\n-rw-r--r-- 1 jockc 197609      70 7\u6708   6 04:59 README.md\ndrwxr-xr-x 1 jockc 197609       0 7\u6708   8 05:33 utils/\ndrwxr-xr-x 1 jockc 197609       0 7\u6708   8 06:03 vendor/\njockc@DESKTOP-MDSE3EM MINGW64 ~/go/src/contentlibs (master)\n$ pwd\n/c/Users/jockc/go/src/contentlibs\n```\n$ godep go build\nmain.go:4:2: cannot find package \"contentlibs/module\" in any of:\n        D:\\Go\\src\\contentlibs\\module (from $GOROOT)\n        C:\\Users\\jockc\\go\\src\\contentlibs\\Godeps\\_workspace\\src\\contentlibs\\module (from $GOPATH)\nmain.go:6:2: cannot find package \"github.com/go-martini/martini\" in any of:\n        D:\\Go\\src\\github.com\\go-martini\\martini (from $GOROOT)\n        C:\\Users\\jockc\\go\\src\\contentlibs\\Godeps\\_workspace\\src\\github.com\\go-martini\\martini (from $GOPATH)\nmain.go:7:2: cannot find package \"github.com/martini-contrib/render\" in any of:\n        D:\\Go\\src\\github.com\\martini-contrib\\render (from $GOROOT)\n        C:\\Users\\jockc\\go\\src\\contentlibs\\Godeps\\_workspace\\src\\github.com\\martini-contrib\\render (from $GOPATH)\ngodep: go exit status 1\n. ",
    "Sikandarkhan": "I am getting this error. How can I proceed to solve this now ?\ngo get github.com/tools/godep\npackage github.com/tools/godep: cannot download, ### $GOPATH not set. For more details see: go help gopath. I am getting this error. How can I proceed to solve this now ?\ngo get github.com/tools/godep\npackage github.com/tools/godep: cannot download, ### $GOPATH not set. For more details see: go help gopath. ",
    "bklau": "Any workaround to allow me to do \"godep save ./...\"? I hit the error \n\"godep: package (github.com/docker/distribution/digest) not found\"\nI build alright but just failed at \"godep save ./...\"\n. Any workaround to allow me to do \"godep save ./...\"? I hit the error \n\"godep: package (github.com/docker/distribution/digest) not found\"\nI build alright but just failed at \"godep save ./...\"\n. ",
    "juniorz": "Replacing homebrew's godep with go get github.com/tools/godep fixed the issue.\n. Replacing homebrew's godep with go get github.com/tools/godep fixed the issue.\n. ",
    "NeoCN": "we come across the same issue. \n. we come across the same issue. \n. ",
    "dlsniper": "I guess we can close this for now as Alias have been postponed for 1.9\n. @freeformz can you please push the button to merge && release this. Thank you!. I guess we can close this for now as Alias have been postponed for 1.9\n. @freeformz can you please push the button to merge && release this. Thank you!. ",
    "calebthompson": "I'm still seeing this, @freeformz. I was on 1.7.4 and updated to the beta thinking this might be related.\ngodep save ./...\ngodep: WARNING: Godep workspaces (./Godeps/_workspace) are deprecated and support for them will be removed when go1.8 is released.\ngodep: Godeps/_workspace/src/golang.org/x/net/context/go18.go:17:14: expected type, found '=' (and 1 more errors)\n$ go version\ngo version go1.8beta1 darwin/amd64\n$ godep version\ngodep: WARNING: Godep workspaces (./Godeps/_workspace) are deprecated and support for them will be removed when go1.8 is released.\ngodep v75 (darwin/amd64/go1.8beta1). I'm still seeing this, @freeformz. I was on 1.7.4 and updated to the beta thinking this might be related.\ngodep save ./...\ngodep: WARNING: Godep workspaces (./Godeps/_workspace) are deprecated and support for them will be removed when go1.8 is released.\ngodep: Godeps/_workspace/src/golang.org/x/net/context/go18.go:17:14: expected type, found '=' (and 1 more errors)\n$ go version\ngo version go1.8beta1 darwin/amd64\n$ godep version\ngodep: WARNING: Godep workspaces (./Godeps/_workspace) are deprecated and support for them will be removed when go1.8 is released.\ngodep v75 (darwin/amd64/go1.8beta1). ",
    "lucasmrod": "Came across this issue with go1.9 (with now official support for type alias)\nFYI: Fixed by recompiling godep with go1.9.. Came across this issue with go1.9 (with now official support for type alias)\nFYI: Fixed by recompiling godep with go1.9.. ",
    "tobstarr": "ping @freeformz. \ud83d\udc4d . ping @freeformz. \ud83d\udc4d . ",
    "willglynn": "This remains broken under go1.8beta2, as is expected given the implementation of determineVendor().. This remains broken under go1.8beta2, as is expected given the implementation of determineVendor().. ",
    "1ambda": "It happened when Godep doens't changed at all. To reproduce this issue,\n\nRemove vendor dir\nRun godep save ./...\nExecute ls vendor\n\n$ godep version\ngodep v75 (darwin/amd64/go1.7.3)\n$ go version\ngo version go1.7.3 darwin/amd64. It happened when Godep doens't changed at all. To reproduce this issue,\n\nRemove vendor dir\nRun godep save ./...\nExecute ls vendor\n\n$ godep version\ngodep v75 (darwin/amd64/go1.7.3)\n$ go version\ngo version go1.7.3 darwin/amd64. ",
    "brettonfinch-wf": "That looks like the case I have setup in my project, nice to know your were able to reproduce it in an isolate case. That looks like the case I have setup in my project, nice to know your were able to reproduce it in an isolate case. ",
    "MikeMcQuaid": "A gentle request: please don't retag things, folks. If you use Git you'll not receive the updated tag without manually deleting and refetching it as it's considered rewriting public history. It also means you break the checksums for things like Homebrew that rely on your tags (https://github.com/Homebrew/homebrew-core/issues/9293). Thanks!. Thanks! \n\nIMO tags are mutable and should be treated as such\n\nJust FYI: Git disagrees \ud83d\ude09 . (well, as much as Git considers anything immutable \ud83d\ude06)\nThanks again!. A gentle request: please don't retag things, folks. If you use Git you'll not receive the updated tag without manually deleting and refetching it as it's considered rewriting public history. It also means you break the checksums for things like Homebrew that rely on your tags (https://github.com/Homebrew/homebrew-core/issues/9293). Thanks!. Thanks! \n\nIMO tags are mutable and should be treated as such\n\nJust FYI: Git disagrees \ud83d\ude09 . (well, as much as Git considers anything immutable \ud83d\ude06)\nThanks again!. ",
    "xrl": "@freeformz I have a similar issue. I'm new to the kubernetes project (as well as godep). Here's what I got:  https://gist.github.com/xrl/080e18909538e9d748eb87cd5d58c7ae . Downgrading to v74 got me going again.. @freeformz I have a similar issue. I'm new to the kubernetes project (as well as godep). Here's what I got:  https://gist.github.com/xrl/080e18909538e9d748eb87cd5d58c7ae . Downgrading to v74 got me going again.. ",
    "AlmogBaku": "same here. same here. ",
    "turtlemonvh": "Temporary solution\nbash\ngo get gopkg.in/tools/godep.v76 && \\cp $GOPATH/bin/godep.v76 $GOPATH/bin/godep. Temporary solution\nbash\ngo get gopkg.in/tools/godep.v76 && \\cp $GOPATH/bin/godep.v76 $GOPATH/bin/godep. ",
    "olliephillips": "Yes, thanks. I'm trying to raise with Bluemix. Looking back through old repos that I have had working on Bluemix Cloud Foundry I can see that full package path has always been stored in the ImportPath var, so it has to be something changed with Bluemix. Thanks for taking a look at this though. I'll update if/when get answer.. I'm a bit further on with this. Nothing from Bluemix, but it appears that this could be down to the inclusion of `test in my package directory. \nfor example godeps.json:\n{\n    \"ImportPath\": \"github.com/olliephillips/test\",\n    \"GoVersion\": \"go1.7.5\",\n...\nand Procfile:\nweb: test\nWill NOT push\nBuild godeps.json from cftest directory, such that test is replaced with cftest and replace test in Procfile with cftest and it pushes just fine. \nSo this is nothing to do with Godeps, and all the problems appear to be down to a poor choice of directory name when setting this up to test.\n. Yes, thanks. I'm trying to raise with Bluemix. Looking back through old repos that I have had working on Bluemix Cloud Foundry I can see that full package path has always been stored in the ImportPath var, so it has to be something changed with Bluemix. Thanks for taking a look at this though. I'll update if/when get answer.. I'm a bit further on with this. Nothing from Bluemix, but it appears that this could be down to the inclusion of `test in my package directory. \nfor example godeps.json:\n{\n    \"ImportPath\": \"github.com/olliephillips/test\",\n    \"GoVersion\": \"go1.7.5\",\n...\nand Procfile:\nweb: test\nWill NOT push\nBuild godeps.json from cftest directory, such that test is replaced with cftest and replace test in Procfile with cftest and it pushes just fine. \nSo this is nothing to do with Godeps, and all the problems appear to be down to a poor choice of directory name when setting this up to test.\n. ",
    "ilovezfs": "Thanks for the help!. Thanks for the help!. ",
    "erreobi": "I have the same problem. I have the same problem. ",
    "mhughes": "I'm seeing the same issue \n\n$ godep version\ngodep v79 (windows/amd64/go1.8)\n$ go version\ngo version go1.8 windows/amd64\n\nAdditionally it seems godep is trying to find packages in Godeps/_workspace\n\n$ godep get github.com/redacted/backend-go/hutch\ncan't load package: package github.com/redacted/backend-go/hutch: cannot find package >\"github.com/redacted/backend-go/hutch\" in any of:\n       C:\\Go\\src\\github.com\\redacted\\backend-go\\hutch (from $GOROOT)\n       C:\\Users\\tute6\\go\\src\\github.com\\redacted\\backend->go\\Godeps_workspace\\src\\github.com\\redacted\\backend-go\\hutch (from $GOPATH)\ngodep: go exit status 1\ngodep: exit status 1\n. I'm seeing the same issue \n$ godep version\ngodep v79 (windows/amd64/go1.8)\n$ go version\ngo version go1.8 windows/amd64\n\nAdditionally it seems godep is trying to find packages in Godeps/_workspace\n\n$ godep get github.com/redacted/backend-go/hutch\ncan't load package: package github.com/redacted/backend-go/hutch: cannot find package >\"github.com/redacted/backend-go/hutch\" in any of:\n       C:\\Go\\src\\github.com\\redacted\\backend-go\\hutch (from $GOROOT)\n       C:\\Users\\tute6\\go\\src\\github.com\\redacted\\backend->go\\Godeps_workspace\\src\\github.com\\redacted\\backend-go\\hutch (from $GOPATH)\ngodep: go exit status 1\ngodep: exit status 1\n. \n",
    "chrispassas": "Same problem also.. Same problem also.. ",
    "fifths": "$ godep version\ngodep v79 (linux/amd64/go1.8.3)\n/home/fifths/go/src/test/Godeps/_workspace/src/gopkg.in/mgo.v2/bson (from $GOPATH)\ngodep: go exit status 1\nsame problem . $ godep version\ngodep v79 (linux/amd64/go1.8.3)\n/home/fifths/go/src/test/Godeps/_workspace/src/gopkg.in/mgo.v2/bson (from $GOPATH)\ngodep: go exit status 1\nsame problem . ",
    "ngauthier": "I noticed you're on windows. I have the same problem and I'm on windows but I'm on the linux subsystem (WSL).\nnick@DESKTOP-5C3NHDT:~/go/src/github.com/ngauthier/meetspace$ go version\ngo version go1.8.3 linux/amd64\nnick@DESKTOP-5C3NHDT:~/go/src/github.com/ngauthier/meetspace$ godep version\ngodep v79 (linux/amd64/go1.8.3)\nnick@DESKTOP-5C3NHDT:~/go/src/github.com/ngauthier/meetspace$ godep path\nError: GO15VENDOREXPERIMENT is enabled and the vendor/ directory is not a valid Go workspace.\nnick@DESKTOP-5C3NHDT:~/go/src/github.com/ngauthier/meetspace$ ls -l vendor/\ntotal 0\ndrwxrwxrwx 0 nick nick 512 Jun 12 12:16 github.com\ndrwxrwxrwx 0 nick nick 512 Jun 12 12:16 golang.org\nnick@DESKTOP-5C3NHDT:~/go/src/github.com/ngauthier/meetspace$\nCould it be something weird with windows permissions or paths?. FYI in my case my GOPATH wasn't properly set up, and my source was not actually on my GOPATH. I was a bit confused because I was still getting used to the windows subsystem for linux. So I recommend double-checking your GOPATH and pwd.. I noticed you're on windows. I have the same problem and I'm on windows but I'm on the linux subsystem (WSL).\nnick@DESKTOP-5C3NHDT:~/go/src/github.com/ngauthier/meetspace$ go version\ngo version go1.8.3 linux/amd64\nnick@DESKTOP-5C3NHDT:~/go/src/github.com/ngauthier/meetspace$ godep version\ngodep v79 (linux/amd64/go1.8.3)\nnick@DESKTOP-5C3NHDT:~/go/src/github.com/ngauthier/meetspace$ godep path\nError: GO15VENDOREXPERIMENT is enabled and the vendor/ directory is not a valid Go workspace.\nnick@DESKTOP-5C3NHDT:~/go/src/github.com/ngauthier/meetspace$ ls -l vendor/\ntotal 0\ndrwxrwxrwx 0 nick nick 512 Jun 12 12:16 github.com\ndrwxrwxrwx 0 nick nick 512 Jun 12 12:16 golang.org\nnick@DESKTOP-5C3NHDT:~/go/src/github.com/ngauthier/meetspace$\nCould it be something weird with windows permissions or paths?. FYI in my case my GOPATH wasn't properly set up, and my source was not actually on my GOPATH. I was a bit confused because I was still getting used to the windows subsystem for linux. So I recommend double-checking your GOPATH and pwd.. ",
    "tqoliver": "$ godep version\ngodep v79 (darwin/amd64/go1.8.1)\n$ godep path\nError: GO15VENDOREXPERIMENT is enabled and the vendor/ directory is not a valid Go workspace.\n$ sw_vers\nProductName:    Mac OS X\nProductVersion: 10.12.5\nBuildVersion:   16F73\nsame problem. $ godep version\ngodep v79 (darwin/amd64/go1.8.1)\n$ godep path\nError: GO15VENDOREXPERIMENT is enabled and the vendor/ directory is not a valid Go workspace.\n$ sw_vers\nProductName:    Mac OS X\nProductVersion: 10.12.5\nBuildVersion:   16F73\nsame problem. ",
    "praveenkumar": "Same issue :(\n```\n$ godep version\ngodep v79 (linux/amd64/go1.7.5)\n$ godep path\nError: GO15VENDOREXPERIMENT is enabled and the vendor/ directory is not a valid Go workspace.\n```. Same issue :(\n```\n$ godep version\ngodep v79 (linux/amd64/go1.7.5)\n$ godep path\nError: GO15VENDOREXPERIMENT is enabled and the vendor/ directory is not a valid Go workspace.\n```. ",
    "Skarlso": "Yep, here too.\n```\ngodep v79 (darwin/amd64/go1.8.3)\ngodep path\nError: GO15VENDOREXPERIMENT is enabled and the vendor/ directory is not a valid Go workspace.\n```. Yep, here too.\n```\ngodep v79 (darwin/amd64/go1.8.3)\ngodep path\nError: GO15VENDOREXPERIMENT is enabled and the vendor/ directory is not a valid Go workspace.\n```. ",
    "javier-sanz": "Same environment as @Skarlso and It happens to me as well. . Same environment as @Skarlso and It happens to me as well. . ",
    "alyandon": "I hit this as well and since there hasn't been any commit activity on godep since February, I decided to move to using glide.  It was extremely easy to set up for my particular projects - run glide init and commit the generated files.. I hit this as well and since there hasn't been any commit activity on godep since February, I decided to move to using glide.  It was extremely easy to set up for my particular projects - run glide init and commit the generated files.. ",
    "schmohlio": "same issue here:\ngodep v79 (darwin/amd64/go1.9.1)\nseems this tool is rather unusable? . same issue here:\ngodep v79 (darwin/amd64/go1.9.1)\nseems this tool is rather unusable? . ",
    "weichangdong": "i have same problem \n`$godep  path\nError: GO15VENDOREXPERIMENT is enabled and the vendor/ directory is not a valid Go workspace.`\nand \n`$godep save\ngodep: dirty working tree (please commit changes): /code/go/src/github.com/astaxie/beego\ngodep: dirty working tree (please commit changes): /code/go/src/github.com/astaxie/beego/cache\ngodep: dirty working tree (please commit changes): /code/go/src/github.com/astaxie/beego/cache/memcache\ngodep: dirty working tree (please commit changes): /code/go/src/github.com/astaxie/beego/cache/redis\ngodep: dirty working tree (please commit changes): /code/go/src/github.com/astaxie/beego/config`\nso many errors,why so many person  use it????  use glide  is better than godep.  . rm -rf  github.com/astaxie/beego  and  go get  github.com/astaxie/beego\nwill  fix  this  problem.\n. i have same problem \n`$godep  path\nError: GO15VENDOREXPERIMENT is enabled and the vendor/ directory is not a valid Go workspace.`\nand \n`$godep save\ngodep: dirty working tree (please commit changes): /code/go/src/github.com/astaxie/beego\ngodep: dirty working tree (please commit changes): /code/go/src/github.com/astaxie/beego/cache\ngodep: dirty working tree (please commit changes): /code/go/src/github.com/astaxie/beego/cache/memcache\ngodep: dirty working tree (please commit changes): /code/go/src/github.com/astaxie/beego/cache/redis\ngodep: dirty working tree (please commit changes): /code/go/src/github.com/astaxie/beego/config`\nso many errors,why so many person  use it????  use glide  is better than godep.  . rm -rf  github.com/astaxie/beego  and  go get  github.com/astaxie/beego\nwill  fix  this  problem.\n. ",
    "joelpresence": "Bump.  Any updates?. Bump.  Any updates?  Can somebody please help ... Thanks!  :-). Thanks @fforootd !\nBut I'm not using godep to build.  I'm doing my builds inside of LiteIDE for rapid development and iteration.  However, I need godep for deployment to heroku.  I just need godep to not break my builds in LiteIDE.  Any ideas?. Bump.  Any updates?. Bump.  Any updates?  Can somebody please help ... Thanks!  :-). Thanks @fforootd !\nBut I'm not using godep to build.  I'm doing my builds inside of LiteIDE for rapid development and iteration.  However, I need godep for deployment to heroku.  I just need godep to not break my builds in LiteIDE.  Any ideas?. ",
    "fforootd": "i guess you need to use \"godep go build -o main\" instead of \"go build -o main\". i guess you need to use \"godep go build -o main\" instead of \"go build -o main\". ",
    "benbenedek": "I'm having a similar issue.\nubuntu@box220:~/url_unfurl$ go version\ngo version go1.8.1 linux/amd64\nubuntu@box220:~/url_unfurl$ godep version\ngodep v79 (linux/amd64/go1.8.1)\n```\nubuntu@box220:~/url_unfurl$ make\ngodep restore ./...\ngodep: [WARNING]: godep should only be used inside a valid go package directory and\ngodep: [WARNING]: may not function correctly. You are probably outside of your $GOPATH.\ngodep: [WARNING]:   Current Directory: /home/ubuntu/url_unfurl\ngodep: [WARNING]:   $GOPATH: /home/ubuntu/.go_workspace:/usr/local/go_workspace\ngo build -o go_unfurl_service ./main/service.go\ncommand-line-arguments\nmain/service.go:27: cannot use router (type \"github.com/gin-gonic/gin\".Engine) as type \"github.com/fiverr/url_unfurl/vendor/github.com/gin-gonic/gin\".Engine in argument to service.Routes\nmake: *** [go_unfurl_service] Error 2\n. I'm having a similar issue.ubuntu@box220:~/url_unfurl$ go version\ngo version go1.8.1 linux/amd64```\nubuntu@box220:~/url_unfurl$ godep version\ngodep v79 (linux/amd64/go1.8.1)\n```\nubuntu@box220:~/url_unfurl$ make\ngodep restore ./...\ngodep: [WARNING]: godep should only be used inside a valid go package directory and\ngodep: [WARNING]: may not function correctly. You are probably outside of your $GOPATH.\ngodep: [WARNING]:   Current Directory: /home/ubuntu/url_unfurl\ngodep: [WARNING]:   $GOPATH: /home/ubuntu/.go_workspace:/usr/local/go_workspace\ngo build -o go_unfurl_service ./main/service.go\ncommand-line-arguments\nmain/service.go:27: cannot use router (type \"github.com/gin-gonic/gin\".Engine) as type \"github.com/fiverr/url_unfurl/vendor/github.com/gin-gonic/gin\".Engine in argument to service.Routes\nmake: *** [go_unfurl_service] Error 2\n```. ",
    "jonathanfishner": "\u05de\u05d4 \u05d0\u05e0\u05d9 \u05d7\u05d5\u05d5\u05d4 \u05e4\u05d4 ? \n@fiverrben . \u05de\u05d4 \u05d0\u05e0\u05d9 \u05d7\u05d5\u05d5\u05d4 \u05e4\u05d4 ? \n@fiverrben . ",
    "huangjiuyuan": "I have encountered the same issue.. I have encountered the same issue.. ",
    "anaskhan96": "@pierrre Thanks that worked for me as well. I was really confused as to where the problem was.. @pierrre Thanks that worked for me as well. I was really confused as to where the problem was.. ",
    "nafisfaysal": "I think you have not set GOBIN correctly, so try  export PATH=$GOPATH/bin:$PATH  I hope it will work out well.. I think you have not set GOBIN correctly, so try  export PATH=$GOPATH/bin:$PATH  I hope it will work out well.. ",
    "nehagup": "I would like to make a PR for this.. I would like to make a PR for this.. ",
    "Ortham": "I'm wondering this too, since godep restore and godep get seem to have no problem downloading and installing the dependencies specified in Godeps.json. If we don't need offline builds, do we really need to commit the vendor/ folder? Is something going to blow up in my face if I don't?\nThe FAQ gives the reasoning why the godep authors think vendor/ should be checked in, but some clarity that this is (seems to be?) merely an opinion and not a technical requirement would go a long way. For example, the readme currently has\n\nThen commit the Godeps/ and vendor/ directories to version control.\n\nIs the following alternative valid?\n\nThen commit the Godeps/ directory to version control. The godep authors also recommend committing the vendor/ directory to allow offline builds and reduce reliance on the availability of external systems.. I'm wondering this too, since godep restore and godep get seem to have no problem downloading and installing the dependencies specified in Godeps.json. If we don't need offline builds, do we really need to commit the vendor/ folder? Is something going to blow up in my face if I don't?\n\nThe FAQ gives the reasoning why the godep authors think vendor/ should be checked in, but some clarity that this is (seems to be?) merely an opinion and not a technical requirement would go a long way. For example, the readme currently has\n\nThen commit the Godeps/ and vendor/ directories to version control.\n\nIs the following alternative valid?\n\nThen commit the Godeps/ directory to version control. The godep authors also recommend committing the vendor/ directory to allow offline builds and reduce reliance on the availability of external systems.. \n"
}