{
    "alloy": "The name is MacRuby, not Mustache\u2026\n. @moderator-kitteh, no disrespect meant: \n. Could you move the IRB code to lib/rdoc as it currently is as well? Because the code in lib/irb is not the same as the upstream IRB :)\n. YOU BROKE MY GNUSTEP BUILD SYSTEM!\n\n. \n(That was the last one, I promise.)\n. The reason I\u2019d imagine that it\u2019s important to keep these things in is for ease of merging upstream changes. But I can\u2019t judge on that since I have never merged MRI code into MR\u2026\n. To be clear, the 32-bit code I removed will be re-added again.\n. - Should the NSException category move to error.c, or is this the right way?\n- Should we also override -[NSException callStackSymbols] to return the Ruby backtrace if it exists?\n. So would rb_eRubyException be a subclass of Exception/NSException but the superclass of all in Ruby defined exception classes? E.g. StandardError.\nAnd how does that work when people subclass Exception? Would we under the hood actually subclass rb_eRubyException instead?\n. And lastly:\nRegarding: https://github.com/alloy/MacRuby/blob/nsexception/compiler.cpp#L6876\nShould we just use the body of rb_rb2oc_exc_handler here directly?\nBecause we no longer need to convert the exception, just throw it.\nRegarding: https://github.com/alloy/MacRuby/blob/nsexception/vm.cpp#L3563\nHow does this work? It seems that no information is set on the allocated exception.\n. lol\n:tada:\n. @ferrous26 Missed the 6th anniversary too. Time does fly.. I would be great if you could update the spec for this as well: https://github.com/MSch/MacRuby/blob/master/spec/macruby/command_line/ruby_deploy_spec.rb\n. Thanks!\n. Should I define a local BS_TYPE macro which gets the structure name?\n. Wow, upside down world, I don\u2019t even understand why I didn\u2019t include a spec\u2026 :O\nMaybe I just forgot to include it in the patch, will make it in order tonight, sir!\n. Thanks!\n. Regarding adding a ChangeLog, I don\u2019t see why not, it can only help to put out new releases faster.\n. You\u2019re not merging it? I think you should just go ahead and do so, it\u2019s not like it\u2019s irreversible :)\n. ",
    "dj2": "+1. Fork[http://help.github.com/fork-a-repo] Mustache\nMustache?\n. ",
    "lrz": "Indeed, it's way faster with this change!\n. The change has been merged into master.\n. To celebrate the first pull request, let's add a lolcat picture: \n. This awesome change has been merged into master!\n. I don't know if the runtime execution benefits of this change are significant enough to justify the overall complexity brought by it. Also, I'm not confident in exposing the Compiler class as an API of MacRuby (stdlib), because it would mean that we would need to support it.\nI understand that the goal is to make macruby_deploy faster here, but maybe macruby_deploy could just require macrubyc and use the Compiler class directly? (Assuming macrubyc is updated so that it's requirable).\n. Thanks for working on this! Looking at the diff quickly, I just have one issue. Could you not introduce the RUBYC_LIBRARY constant and instead check if FILE == $0 in bin/rubyc?\n. Thanks, merged in master branch :)\n. Isn't these the same changes as in https://github.com/MacRuby/MacRuby/pull/8 ?\n. I see, only https://github.com/takaokouji/MacRuby/commit/1f8e4e063bc6cf395518594c15435e01255e4cc3 should be merged here.\n. I think this change was merged to master. https://github.com/MacRuby/MacRuby/blob/master/test_vm.rb seems to have it. So I'm closing this request.\n. This change was merged to master, however I reverted the changes in vm.cpp, I think these are debug code?\nThanks for this work! We needed to update RDoc :)\n. Thanks for submitting this! It would probably make sense to convert your test to the RubySpec syntax and add it as part of spec/macruby/core, as Kouji suggested. (In case you don't have the time to do it, we can help.)\n. No problemo, I committed your fix separately in 87ef59480dbe3e79cd251b80015377ec02d89358 (I had to change your patch to conform to our code quality guidelines, so I could not simply merge the pull request). Thanks for taking the time to fix that problem, we will commit the spec separately.\n. I think it would be better to add support for this feature in vm.cpp sanitize_regexp_string().\nEDIT: I meant re.c, sorry (not enough sleep :)).\n. Hi Kouji-san, did you get any chance to look at this? I think fixing regexp compatibility bugs is very important for the next release. I may have some spare time later this week to look at it, unless you're on it.\n. No problemo. Thanks for working on the prototype, I will look at this and see how to better integrate it.\n. I think the workaround has been merged, however we should really emulate the missing ICU behavior. I filed http://www.macruby.org/trac/ticket/1229 to not forget.\n. It's not a big deal if it doesn't match MRI behavior :) Thanks for making those changes, I merged your commits into master.\n. I think a better change would be to locate the llc program in the LLVM path, which the previous rubyc used to do (before 52371e783decf9cf14145e21315af30ed38af3f4).\n. I see, indeed. I changed rubyc to locate the executables at demand and no longer as part of the Compiler class's scope function in 46c64f4bfb8ff5f868cbf3ffa285449ca4fbafd4, which I believe is a better way of fixing this problem.\n. Hi Kouji, I gave you commit access to the MacRuby repository, because you contribute frequently. Can you commit your changes and close this pull request? Thanks :)\n. Hi Kouji, I gave you commit access to the MacRuby repository, because you contribute frequently. Can you commit your changes and close this pull request? Thanks :)\n. Thanks. I tested this change but it doesn't seem to work.\nWhen running macruby_deploy on a test app, I see that only the Current symlink remains.\n$ ls -l /Users/lrz/build/Release/DotView.app/Contents/Frameworks/MacRuby.framework/Versions\ntotal 0\ndrwxr-xr-x  5 lrz2  staff  170 Apr 12 11:57 Current\nHowever, the application's main executable refers to a different linking path (...Versions/0.11/...).\n$ otool -L /Users/lrz/build/Release/DotView.app/Contents/MacOS/DotView \n/Users/lrz/build/Release/DotView.app/Contents/MacOS/DotView:\n    /System/Library/Frameworks/Cocoa.framework/Versions/A/Cocoa (compatibility version 1.0.0, current version 17.0.0)\n    @executable_path/../Frameworks/MacRuby.framework/Versions/0.11/usr/lib/libmacruby.dylib (compatibility version 0.11.0, current version 0.11.0)\n    /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 159.0.0)\nWhich causes the app to fail at runtime.\n$ /Users/lrz/build/Release/DotView.app/Contents/MacOS/DotView \ndyld: Library not loaded: @executable_path/../Frameworks/MacRuby.framework/Versions/0.11/usr/lib/libmacruby.dylib\n  Referenced from: /Users/lrz/build/Release/DotView.app/Contents/MacOS/DotView\n  Reason: image not found\n. I fixed that problem as well as a few others in a separate commit that I will add on top of yours, before merging to master.\n. Done! Thanks for working on this :)\n. I think that the chances to see this happening are about the same as finding a chicken with teeth.\n. I think there is no concern cleaning up instruby.rb. Actually, I would ever prefer if we could get rid of it and move the proper installation commands into the Rakefile-based build system instead (currently, `rake install' calls instruby.rb). instruby.rb is an old file inherited from CRuby when I originally forked the project, years ago, and it's kind of hard of maintain. \n. Thanks, merged.\n. Thank you for the patch, it has been merged into master!\n. I see. My only concern with that patch is that it overrides the httputils.rb file without adding a comment, so it will be hard to remember to preserve that change when merging changes from CRuby upstream.\n. It seems that the following expression is still leaking memory:\np=Proc.new { 42 }; loop { instance_eval(&p) }\n. Besides my comments, I think the change is good! It works fine under my environment, also.\nWhen you commit it, can you do it atomically? (in one big commit instead of all small commits?). It is because there has been lots of experiment changes and it might confuse the history logs, when we go back in time to find regressions.\n. To answer your questions:\n1) The fact that the C++ exception mechanism isn't used in 32-bit doesn't matter here, as we will use the ObjC runtime, which falls back to SjLj when ran in 32-bit.\n2) Maybe, but that seems minor. I prefer to see a version of the patch integrated into master before tackling these edge cases.\n3) I would rather not. But Exception#message can poke at NSException#reason in case there is no message (if it's a pure ObjC exception). Again, that seems minor here, let's integrate a first version of patch before.\n4) Exception should be an alias to NSException, and we should introduce a class like RubyException for Ruby-raised exceptions.\n. As for the patch itself, it's not usable right now because you removed 32-bit code. Please add it back and make it work, then we can start iterating on the patch :)\n. Nice work! I have a couple questions:\n1) what does this new JSON implementation bring compared to the current one? Is the current one not good or does not conform to CRuby?\n2) is there a test/spec suite that we can use to check if it works as expected? I'm quite worried about memory management, because MacRuby's GC is different, and C extensions can sometimes not work properly or can leak memory under MacRuby.\n. OK, I agree, please go ahead and merge! Thanks for the work :)\n. Thanks for the patch. I applied it locally and spec:rubyspec seems to crash with the following backtrace:\nThread 0 Crashed:: Dispatch queue: com.apple.main-thread\n0   libc++abi.dylib                 0x00007fff9218dc02 parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*) + 48\n1   libc++abi.dylib                 0x00007fff9218d801 __gxx_personality_v0 + 269\n2   libunwind.dylib                 0x00007fff9173591f _Unwind_RaiseException + 139\n3   libc++abi.dylib                 0x00007fff9218e145 __cxa_throw + 101\n4   libobjc.A.dylib                 0x00007fff8816ba6a objc_exception_throw + 327\n5   libmacruby.dylib                0x0000000105fb52ae rb_vm_raise + 430 (vm.cpp:3625)\n6   libmacruby.dylib                0x0000000105e92999 rb_exc_raise + 9 (eval.c:291)\n7   libmacruby.dylib                0x0000000105e90774 rb_raise + 308\n8   libmacruby.dylib                0x0000000105e9082c rb_invalid_str + 60\n9   libmacruby.dylib                0x0000000105ebfb24 rb_cstr_to_dbl + 356 (object.c:2756)\n10  libmacruby.dylib                0x0000000105ebfe54 rb_str_to_dbl + 148 (object.c:2788)\n11  libmacruby.dylib                0x0000000105ec551a rb_Float + 362 (object.c:2813)\n12  libmacruby.dylib                0x0000000105f14b4b rb_str_format + 1931 (ruby.h:195)\n13  libmacruby.dylib                0x0000000105f19111 rstr_format + 113 (string.c:2610)\n14  libmacruby.dylib                0x0000000105fa15c2 rb_vm_dispatch + 8594 (dispatcher.cpp:161)\n[...]\nIs that the same as yours? I'm going to look at it.\n. I'm getting mixed crashes when running spec:rubyspec. Last try it ran successfully. But looking at the frequency of other crashes there is probably a memory problem somewhere.\n. Running rake spec:rubyspec with VM_DISABLE_RBO=1 does not make it crash anymore. I tried 3 times in a row.\n. I applied the new changes, but spec:rubyspec still crashes from time to time.\n. I am wondering if we couldn't change rary_concat() to use GC_MEMMOVE if both ary and other are RARY. This way all callers of rary_concat() will benefit from your optimization, not only rary_copy().\n. If specs pass, feel free to commit :)\n. I tried your change on both Snow Leopard and Lion, and I get a segfault when running spec:rubyspec:\n```\nThread 0 Crashed:  Dispatch queue: com.apple.main-thread\n0   libSystem.B.dylib               0x00007fff81e47420 libunwind::LocalAddressSpace::getEncodedP(unsigned long long&, unsigned long long, unsigned char) + 112\n1   libSystem.B.dylib               0x00007fff81e4c9fc libunwind::CFI_Parser::decodeFDE(libunwind::LocalAddressSpace&, unsigned long long, libunwind::CFI_Parser::FDE_Info, libunwind::CFI_Parser::CIE_Info) + 764\n2   libSystem.B.dylib               0x00007fff81e4769f _unw_add_dynamic_fde + 31\n3   libmacruby.dylib                0x00000001004e6a50 (anonymous namespace)::JITEmitter::finishFunction(llvm::MachineFunction&) + 864\n4   libmacruby.dylib                0x00000001001e7641 (anonymous namespace)::Emitter::runOnMachineFunction(llvm::MachineFunction&) + 337\n5   libmacruby.dylib                0x00000001005839f3 llvm::MachineFunctionPass::runOnFunction(llvm::Function&) + 83\n6   libmacruby.dylib                0x00000001009d8110 llvm::FPPassManager::runOnFunction(llvm::Function&) + 704\n7   libmacruby.dylib                0x00000001009d8392 llvm::FunctionPassManagerImpl::run(llvm::Function&) + 146\n8   libmacruby.dylib                0x00000001009d876c llvm::FunctionPassManager::run(llvm::Function&) + 236\n9   libmacruby.dylib                0x00000001004d5540 llvm::JIT::runJITOnFunctionUnlocked(llvm::Function, llvm::MutexGuard const&) + 48\n10  libmacruby.dylib                0x00000001004d5a9f llvm::JIT::getPointerToFunction(llvm::Function) + 1119\n11  libmacruby.dylib                0x00000001001442b1 RoxorCore::compile(llvm::Function*, bool) + 145 (vm.cpp:595)\n[...]\n```\nIf I set VM_DISABLE_RBO=1, spec:rubyspec passes fine. However, I wonder if your change is faulty here. I believe this crash also occurred without your change, but less frequently.\n. It always crashes when going through spec/frozen/core/module/public_instance_methods_spec.rb, however running that spec file only doesn't make it crash. To investigate...\nIn the meantime, please commit that change, it seems good :) We will figure out the crash separately. Thanks for keeping an eye on this change and working on it :)\n. Thanks :)\n. I can't find the words to say how happy I'm, so here is a picture:\n\n. After giving it a try without success, I realized you patched the wrong templates (Xcode3 vs Xcode4). The Xcode4 templates are in the misc/xcode4-templates directory. I do not know if your changes can be backported to the Xcode4 templates :(\n. Awesome! I checked again and it seems to work! Thanks for your contribution.\n. I fixed the problem differently in 97de43e5592b329c4f635fb2517524ec5551385d, I think this request can be closed.\n. Interesting change. Would it is possible to make this automatic? (and perhaps introduce a --no-cache option to avoid caching).\nThis way, existing projects will build faster without the need to change their Xcode project files.\n. Comparing the struct name to {CF,NS}Range seems a bit fragile, but I don't see any other way of doing it. The patch seems good, go ahead and commit it :) Can you also add a spec?\n. Looks good I think, feel free to integrate :)\n. Can this be integrated or does it need more polish?\n. Walking the C backtrace in rb_current_realfilepath() is a bit fragile. Perhaps there is a better (more robust) way of doing this.\n. Bug in the compiler? Would be interesting to do a bit of detective work and see what's going wrong here...\n. Why not doing this at the NSObject level? This way it would work for non CF types too (ex NSBundle.mainBundle.inspect).\n. Looks good to me but could you rename config.h to something else? (debug_config.h seems better).\n. Thanks a lot for working on this Mark :)\nI think we can use \"The MacRuby Team\" for the time being. Worst case scenario... well, we will change it to something else?\nFeel free to merge the changes to master!\n. Should probably be better to do:\nrb_sys_fail(\"fcntl() failed\")\n(Like we do elsewhere in the same code file.)\n. ditto\n. Why keeping the header files? Header files are only required when building C extensions, they should not be needed at runtime. It seems that removing them is the right thing to do, since we want to save as much space as we can when MacRuby is bundled inside a Cocoa app.\n. Maybe this line should not be added? \n. I think this should be GC_WB(&b->outer, NULL); instead.\nWith this change, loop { instance_eval(&p) } no longer leaks memory.\n. Is there a risk here that real_node->outer and outer could be the same address? If yes, we will crash, and we should do instead:\nif (real_node->outer != outer) {\n    GC_RELEASE(real_node->outer);\n    real_node->outer = outer;\n    GC_RETAIN(real_node->outer);\n}\n. Same as https://github.com/MacRuby/MacRuby/pull/24/files#r30934\n. Same as https://github.com/MacRuby/MacRuby/pull/24/files#r30934\n. Same as https://github.com/MacRuby/MacRuby/pull/24/files#r30934\n. It's never deleted, yet. It's another leak, but not critical.\n. Can you use rary_ptr() here?\n. You probably want:\nrb_cCFType = (VALUE)objc_getClass(\"__NSCFType\");\nif (rb_cCFType != 0) {\n  ...\n}\n. ",
    "tenderlove": "Awesome :heart:\n. ",
    "ferrous26": "Also, the drop in rake tasks (taken from the original trac ticket) are located in this gist.\n. Hmm, I hadn't even thought about the support issue. Sorry!\nIt wasn't just macruby_deploy I wanted to speed up, I was hoping it could be used with gems (eventually), and also be exposed as a rake task.\nI can try keeping the Compiler class in rubyc and make it requirable, and I'll update this pull request.\n. Ok, updated to hide the Compiler class away from stdlib, but still requirable.\n. Updated as requested.\n. Hasn't this been merged?\n. This seems like a good idea. I think I'll merge it. >_>\n. \nOk, this deal is done! A proper rake task is in the future and this is just a band-aid.\n. Merged.\n. I think we missed the one year anniversary of this pull request. :P\n. Seems this pull request is dead. It also will not merge cleanly. \nI'd rather not throw this away, so if there are no objections, I'll try and get it cleaned up (including turning it on by default) soon.\n. Sorry about not having merged this yet, Laurent. I wanted to include some tests with it before merging. Aside from that, there were only a couple of comments with typos that I have already changed locally.\n. Looks like the old APIs were deprecated a long time ago. Good catch @benilovj, thanks for the patch.\n. Ah, yes, I think your solution makes things easier since this problem happens in other places.\nThe only downside is that you give up the ability to force loading \".rb\" instead of \".rbo\" unless you use VM_DISABLE_RBO, but that will disable all \".rbo\". I think it is probably worth the trade though.\n. Hi Isaac,\nSorry for not getting to this months ago. I believe the goal was to have this in for the next release, so I'd like to merge this now. It looks like everything is done, however, instruby.rb no longer exists (it got turned into rakelib/install.rake recently) and so this will not cleanly merge. ` no longer exists this cannot be merged as is. \nIf you are willing/have the time to fix it up that would be great, if not then I'll get that done for you.\n. Unfortunately there is a problem. MacRuby binaries are still installed to FRAMEWORK_USR_BIN but now they are not being symlinked.\n. Hmm, I'm not sure what the best course of action in this case would be. Installing the binaries only to /usr/local/bin means we would also lose the ability to use macruby_select. Perhaps it would be best to restore the symlinking.\n. Fuuuuuuuuuuuuuuuuuuuuuuuuu. I still can't compile things. It looks like this is because macrubyc gets the bindir from RbConfig and looks for llc there. This will be the same case for macruby_deploy and the rake/compiletask extension, and possibly others. So changing the bindir in RbConfig has bigger consequences now that we have changed back to symlinking.\nI've checked out both rubinius and jruby, and they are overriding the paths just for rubygems: \nhttps://github.com/rubinius/rubinius/blob/master/lib/rubygems/defaults/rbx.rb\nhttps://github.com/jruby/jruby/blob/master/lib/ruby/shared/rubygems/defaults/jruby.rb\n. Thank you, @isaac, for this pull request. :smiley:\nI cherry picked what worked and added the last bit. :thumbsup:\n. A pull request is a good way to let us know because then the work is already done. :)\nHowever, I think the commit subject is not very obvious, or at least it won't be in 6 months. Something like \"Fixed a GCD spec\" would have been better.\n. DYLIB_ALIASES needs to be expanded at install time in order to make some of the symlinks. I didn't see any other options that didn't involve duplicating the information. \nSince the values are static for a given installation, I didn't see any harm in computing the value ahead of time.\n. Hi Daniel,\nThis is great!\nI have one question though. Did you try it out with files names that have spaces? Files such as \"test file.rb\" or \"Bug Tracker.app\" will probably need to be escaped or have quotes put around them. \n. Thank you, sir, very much. :)\n. Thanks, but I am about to push a fix similar to this.\n. I haven't found any issues with normal usage yet. I think this is good to merge.\nSo much faster. :)\nAlso, rubygems/test_case.rb will allow us to test things in macruby_deploy related to embedding gems much more easily.\n. RI and RDoc generation should already be off by default because of:\nhttps://github.com/MacRuby/MacRuby/blob/master/lib/rubygems/defaults/macruby.rb#L4\nSo perhaps that broke?\n. The problem seems to be that our defaults are not being loaded; this fixes it: https://gist.github.com/1778413\n. Actually, a better fix would be to change GEM_PRELUDE to be false. I added a better_fix.diff to the gist...\n. I think this is safe to merge now. However, while this topic is open I wonder how many of the changes can be pushed back to the official rubygems source or moved to defaults/macruby.rb.\n7e152bb is only needed until GH-46 is merged\n1068887 has already been pushed to rubygems, and will be in the next version\ne87ec49 I think MacRuby needs to be changed to be compatible for this patch to go away\ne96da03 do you know if this because IO still needs more work or because NSData#to_str returns UTF-8 now?\n9cbb85e this seems like a bug in MacRuby as well, when I check the method it says it takes a variable number of arguments:\nirb(main):005:0> Zlib::GzipReader.method(:new).arity\n=> -1\n. Ok, I created several tickets to track the various issues. Everything here is good for merge. :)\n. Looks good so far! I even made this change:\ndiff --git a/rakelib/builder.rake b/rakelib/builder.rake\nindex 998e9e8..d137f87 100644\n--- a/rakelib/builder.rake\n+++ b/rakelib/builder.rake\n@@ -144,6 +144,8 @@ AOT_STDLIB = [\n   'lib/net/**/*.rb',\n   'lib/optparse.rb',\n   #'lib/stringio.rb', #spec fails\n+  'lib/rake.rb',\n+  'lib/rake/**/.rb',\n   'lib/rexml.rb',\n   'lib/rexml/**/*.rb',\n   'lib/{r,}ubygems.rb',\nrake/compiletask also still works.\n. Unfortunately, there are some problems:\nruby\ntask :test do\n  ruby 'perf.rb'\nend\nThis task will crash before running the command.\nruby\ntask :other_test do\n  sh 'echo lol'\nend\nThis task will crash after running the command.\n. Hmm, you seem to be right. Sorry.\nIt is a shame we can't compile that file, the load time for rake has gone up since 0.8.7...\n. Ok, so it get's past the crash when calling out to the shell! :)\nNow onto the next problem :(\nFor some reason, when I rake test it loads the stdlib minitest instead of the minitest gem which I have explicitly activated using gem. I'm not sure if this is an intended feature of rake or a bug. One example of this is with the AXElements test suite...\n. I've been using now for the past day without any issues :smile:\n. I think this is safe enough for merge now. Thank you, Watson! :cat:\n:shipit:\n. Applying the alias to rb_cNSObject or rb_mKernel doesn't seem to do anything. I guess I'll have to dig deeper... :/\n. Commit 704335d adds the desired effect, however it also causes rubygems to crash...\n. Thanks, Watson. :)\nI think your solution works, but #description is required to conform to the NSObject protocol so I do not think we need to check if the object responds first. Perhaps I am missing a case?\nI've traced the crash down a bit more. It happens when #method_missing is triggered. Continuing to dig...\nsh\nmacruby -e \"Object.derp\"\n. Rebased and cleaned up. I did some simple benchmarking here: https://gist.github.com/2010801\n. Ah, I didn't see \"A nontrivially derived Object being observed through NSKeyValueObservation can be inspected\", but I only ran \"spec:core\"...the second failure had me puzzled...I thought immediate types would have #description as well.\n. Tests are passing now. Thank you, Watson. :sweat:\n. Closing for now...\n. Sorry...I had put this in my master branch and wanted to push changes but didn't want to fiddle around with adding more tracking branches.\nYou make a good point. :)\nI'll just push it...apparently github does not have an emoji for \"push it\", so I'll just use the :shipit: squirrel instead.\n. Nice! Works for me so far... :smile:\n. Let's do it to it! :shipit:\n. Is this safe to merge into master now?\n. @macrotis thank you for the fixes! :)\n. ",
    "takaokouji": "Yes, I'm sorry. \n. I checked test_vm.rb. It's nice.\nThanks.\n. Yes, I will move IRB code to lib/rdoc.\n. I fixed. I created new pull request. I close this.\n. I move IRB code to lib/rdoc.\n. Yes, the changes in vm.cpp are debug code.\nThanks.\n. Would you add the spec below?\nhttps://www.macruby.org/trac/attachment/ticket/1198/framework_spec.zip\n. I think you put it in spec/macruby/core/.\n. I'm sorry. I did not check framework_spec.zip. It is not RubySpec. So framework_spec.zip will not include MacRuby.\n. I'm sorry, this is miss operation.\n. Sorry late reply.\nOK. I try to modify sanitize_regexp_string() in re.c tonight.\n. I could not modify re.c. It is very difficult for me.\nI created prototype in ruby.\nhttps://gist.github.com/907895\n. I see.\nI will commit this later.\n. I see.\nI will commit this later.\n. I commited this.\n. I think that first we merge this patch, then we must check that why does not effect _make_regex().\n. Thanks to contribute and sorry late reply. This pull request merged in 241d2735e02c6c0868f747969a2be16221ba966f. Please review it. Thanks.\n. Thanks for comment. I will apply all. And I commit these atomically, because I agree with your opinion.\n. I updated changes. I did not get segfault on rubyspec. However, I set fails tag below spec.\n(spec/frozen/tags/macruby/library/bigdecimal/add_tags.txt)\nfails:BigDecimal#add raises TypeError when adds nil\nfails:BigDecimal#add raises TypeError when precision parameter is nil\nfails:BigDecimal#add raises ArgumentError when precision parameter is negative\nI think that above spec has a bug before I changed.\n. I recreated patch, so close this request.\n. Thanks for reviewing. I will commit this as soon as posible. And I will commit with --squash.\n. I commited this \"7b14592 fixed below.\" , so I close this request.\n. Hmm, I think this patch is not good. My best idea is that, if we specify requiring feature(which is basename) with extention \".rb\" and compiled ruby file (which has \".rb\" extention) exist, then we should load compiled one. I think that we should fix load.c. Thanks.\n. OK. I wrote that, when we specify requiring feature _with \".rb\"_ and (snip). So I means below.\nruby\nif feature.extention == \".rb\"  # <- NEW FEATURE\n  if \".rbo\".exists? \n    if \".rb\".exists? && \".rb\".timestamp > \".rbo\".timestamp\n      # newer \".rb\" than \".rbo\"\n      load \".rb\"\n    else\n      load \".rbo\"\n    end\n  end\nend\nDo you understand?\n. Good!\nHowever, I think rb_current_realfilepath() is not good.\nIt use backtrace() to get target script path.\nI think usually we should not use backtrace().\nBut, I don't know another way to get target script path :<\n. Yes. I will remove it.\n. I checked it. I should be GC_WB(&b->outer, b->outer->outer); instead.\n. ",
    "nerdyc": "Ok, but where should I put it? I asked about testing on the mailing list and Laurent said the existing tests for the framework method (in test-macruby/cases/framework_test.rb ) are no longer used. He suggested I submit a patch for this, and then we'd figure out an update for the MacRuby specs.\nThe spec I wrote was for my own good, and as an example of the intended behaviour. But it's been unclear from the start where the real tests for this method should go.\n. I've been a bit pressed for time, but don't mind finally digging into MacRuby's test suite. I won't be able to get to it until the weekend, so if you'd all rather do it, I can just learn from your example.\n. ",
    "warpflyght": "Okay, I've made that change. I initially used the IO object's path as the failure reason because that's what Ruby 1.9.2 does. The new message is more consistent with the rest of the file, but doesn't match MRI's behavior.\n. ",
    "chrisrhoden": "Actually, the functionality hasn't changed -- it's about when it's executed.\nIn the version referenced by that commit, there are no constants pointing at the executables. As a result, they are located at runtime, and there is a switch to check to see if the --internal flag was provided (line 63)\nThe commit referenced locates all executables at the beginning of execution and saves them as constants. In this case, there are 2 constants for the two different llc executables we may be interested in, MACRUBY_LLC and LLC. The former is not available until the current version of macruby is installed, the latter points at the LLVM path.\nWithout my patch, the script will attempt to locate both and will immediately raise an exception when MACRUBY_LLC cannot be located. This is despite the fact that it's not actually interested in MACRUBY_LLC, it's interested in LLC.\nThe big problem here is that in most cases, it should use MACRUBY_LLC. But it needs to use LLC to compile and install, so there is the --internal flag to switch between them. The rake tasks for compiling MacRuby run rubyc with that flag.\n. ",
    "chrislloyd": "Thanks for your extra work on this. Time to submit!\n. Cool, fixed in 48b1c71225d2f16c148fe5479644846e0696c76e.\n. ",
    "jballanc": "This might seem a bit odd, but we should probably leave this code in if it's not doing any harm. You never know when someone might decide to port MacRuby to run under GNUstep on Windows.\n. \n. Ok, seriously...there's this false notion I have in my head that MacRuby's core lib (esp. the Ruby parts) shouldn't diverge from MRI's...but I realize this is probably not entirely realistic. So long as we're still passing all the specs (or, well, all the specs we were passing before this change), I have no argument with the removal.\n. Yes, this was my original point...perhaps @lrz can comment on how important that concern is?\n. Wow! Awesome work...I still need to spend some more time going through the deeper parts, but I figure I can start off with a simple question...\nWhat's the purpose behind moving the expansion of the DYLIB_ALIASES?\n. Just tried and all looks good. Thanks for all the hard work!!!\n. I don't think we need to make mention of failing specs in the README until we actually have a release. I think most developers would expect some failing specs on HEAD.\nThat said, we really should get either a 0.11 or 0.12 release out soon...\n. This seems more like debugging information than something we would want in final code. If the assertion is failing, then it's a bug we should fix.\nIf you look at the top of vm.cpp, you'll see that we already have a number of debugging defines. Perhaps you could wrap this code in an #if block using one of these?\n. Starting to look good! Just a couple points:\n- You should leave the #define to 0 for the pull request. Anyone interested in doing debugging can change these locally when they compile\n- You still have two printfs that are outside the #if guard. Is there a reason these should normally be compiled in?\n- The diff seems a bit...chatty (just my personal opinion). I get that you want to have a trail of when exceptions are pushed/poped to try and understand why our assertions are failing, and I think this could be really useful. I just wonder if copious logging is the best way.\nMy recommendation would be to try and narrow down the number of places that you need to modify for logging. For example, you are constantly logging after RoxorVM::current_exception. Why not put the logging inside that method instead?\nIf you're feeling really ambitious, what would be really really useful would be to have the ability to log everything about an exception in a structured manner. You can look at MallocStackLogging (some info here) for inspiration. That way, we could build tools around the info... but that's just my crazy idea. For now, I think what you have is a good start.\n. (sorry...clicked the wrong button...)\n. Looking good...give me to the weekend to play with this in some depth...\n. Hmm...that was a rather long weekend ;)\nLooks good! Branch passes spec:language and spec:library, and I really like the added exception logging.\nThanks for the hard work!\n. I think the idea here is to do something so that scripts which expect require_relative in Ruby 1.9 don't fail under most cases. That said, I also don't like using backtrace, especially since the current implementation has bugs. The only other thing I can think of is to update the rb_current_realfilepath each time we enter a new file...but I don't have a good idea of how to do that at the moment.\n. It would be kinda neat to actually set up some sort of legal entity for \"The MacRuby Team\" eventually (when one of us has the time...ha!), but as for this notice... I found this PDF for US law: http://www.copyright.gov/circs/circ03.pdf\nIn what's required of a copyright notice it says:\n1. The name of the copyright owner, an abbreviation by \n   which the name can be recognized, or a generally known \n   alternative designation of owner.\nSo, I think \"The MacRuby Team\" qualifies as \"a generally known alternative designation\". The only thing we might want to do is explain who is this \"MacRuby Team\" in the COPYING...or in a CONTRIBUTORS/AUTHORS file. At any rate, for what little part of the code I could claim as copyright I'd be happy with that.\n. ",
    "TomK32": "Don't be a chicken and get a real computer instead :D\n. \n. ",
    "Watson1978": "Thank you for your comment :)\n1) This implement will solve,\n1. fix a #1275 \"JSON library outdated or broken\"\n2. Cost of the maintenance will decrease. currently implement is MacRuby original. \n     I think what somebody of MacRuby Team continues maintaining all the time will be high cost.\n2) unit test exists in \"test/test-mri/test/json/test_*.rb\"\n  The test seemed to work well.\n. Thank you!\nI merged.\n. when applied this change into rary_concat(), rubyspec displayed as following.\nmacruby(51247,0x7fff70eb8ca0) malloc: auto_zone_write_barrier_memmove: will overwrite block 0x201768740, size 128 by 16 bytes.rake aborted!\nso, I thought whether GC_MEMMOVE could only use when data was copied into head of memory.\n. Sorry.\nAbout the error on previous my comment, it was been mistake by my code.\nSo, I moved optimization to rary_concat().\n. Thank you for your review!\nI forgot to close this request :(\n. Thank you!\n. Thank you!!\n. Thank you!\n. Thank you!\n. Sorry, I commited my patch that I think a better. (19514ab3772bb743960deaaf18d57dc721fe8dce)\nThank you for your works!!\n. Thanks!\n. Ok.\nI created the project in Xcode which use a \"rexml/document\" (required \"rexml/encoding\").\nand works fine when run the deployed Application.\nGood Job!\n. I think,\nif \".rbo\".exists? \n  if \".rb\".exists? && \".rb\".timestamp > \".rbo\".timestamp\n    # newer \".rb\" than \".rbo\"\n    load \".rb\"\n  else\n    load \".rbo\"\n  end\nend\n//  currently, load the \".rbo\" even if newer \".rb\" exists.\n. Thanks!\n. I think this patch is not good.\nFollowing script should return string of UTF-8.\nHowever, this patch return string of ASCII-8BIT.\n```\n-- coding: utf-8 --\nstr1 = \"Happy new year \".force_encoding('BINARY')\nstr2 = str1.dup\nstr2.concat('in \u4e16\u754c')\np str2\np str2.encoding\n```\nExpect:\n```\n$ ruby19 t.rb\n\"Happy new year in \u4e16\u754c\"\n\n```\nResult:\n```\n$ macruby t.rb\n\"Happy new year in \\xE4\\xB8\\x96\\xE7\\x95\\x8C\"\n\n```\n. This should be fixed with #187.\n. Generating RI documents, it is much slow. So, I changed that they are not generated by default.\nI want to know anyone needs RI documents :p\n. Thanks, Mark!\nI reverted my misunderstood, and commited your changing.\n. It seems to need more  work to support encoding at IO.\nNSData#to_str returns UTF-8.\n\nCRuby's Zlib::GzipReader.new accepts Hash object as optional argument to specify encoding.\nLike:\nZlib::GzipReader.new(io, {:encoding => 'UTF-8'})\nHowever, MacRuby's does not accept. https://github.com/MacRuby/MacRuby/blob/master/ext/zlib/zlib.c#L3479\nI think that your snippet might indicate bug of Method#arity.\n. :sparkles::sparkles::sparkles: Good Job, and thank you for your works !! :sparkles::sparkles::sparkles:\n. Apparently, its crashes appear when try your test after compiling 'lib/rake.rb in my environment.\n. Hmm, it seems that following point causes crashes\n``` diff\ndiff --git a/lib/rake/file_utils.rb b/lib/rake/file_utils.rb\nindex e02d541..d262b3c 100644\n--- a/lib/rake/file_utils.rb\n+++ b/lib/rake/file_utils.rb\n@@ -65,7 +65,9 @@ module FileUtils\n   private :set_verbose_option\ndef rake_system(cmd) # :nodoc:\n-    Rake::AltSystem.system(cmd)\n+    # XXX MACRUBY use Kernel.system directly for RBO\n+    #Rake::AltSystem.system(cmd)\n+    system(cmd)\n   end\n   private :rake_system\n```\nHowever, I don't know detail its crashes and I can't make reproduction code yet :(\n. Hmm, it looks there is a strange difference in LOAD_PATH.   \nI got a LOAD_PATH in your gem's helper.rb after require 'minitest/autorun'\nwith rake 0.8.7:\n[\"/Users/watson/src/github/AXElements/lib\",\n \"/Users/watson/src/github/AXElements/test\",\n \"/Users/watson/src/github/AXElements/ext\",\n \"/Library/Ruby/Gems/MacRuby/0.12/gems/minitest-2.11.2/lib\",\n \"/Library/Frameworks/MacRuby.framework/Versions/0.12/usr/lib/ruby/site_ruby/1.9.2\",\n--- SNIP ---\nwith rake 0.9.2.2:\n[\"/Users/watson/src/github/AXElements/lib\",\n \"/Users/watson/src/github/AXElements/test\",\n \"/Users/watson/src/github/AXElements/ext\",\n \"/Library/Frameworks/MacRuby.framework/Versions/0.12/usr/lib/ruby/1.9.2\", # <= Why?\n \"/Library/Ruby/Gems/MacRuby/0.12/gems/minitest-2.11.2/lib\",\n--- SNIP ---\n. @ferrous26 I commited a patch. Please try it! :+1:\n. Thank you for your works !! :star: :star:\n. Does this work for Xcode 4.2 and older? \n. I think that this should use the xcode_dir instead of \"/Application/Xcode.app/xxx\".\nDoes anyone rename or move Xcode.app?\n$ sudo mv Xcode.app/ Xcode\\ 4.3.app/\n$ sudo xcode-select -switch /Applications/Xcode\\ 4.3.app/Contents/Developer/\n. It seems to remove PackageMaker from Xcode 4.3.\nYou could download \"Auxiliary Tools for Xcode\" from\nhttps://developer.apple.com/downloads/index.action?name=for%20Xcode%20-\n. Yes\n. I think that MacRuby Package needs post install script.\nhttp://www.macruby.org/trac/ticket/1466\n. Thank you for your works!\n. I think  rb_obj_inspect should return the RubyString.\nI also saw crash when I run RubySpec with your changing.\nIf you hope to return NSString,  it looks like we need to implement rb_enc_str_buf_cat() at https://github.com/MacRuby/MacRuby/blob/master/string.c#L6640\ndiff --git a/object.c b/object.c\nindex e575d49..bcb275a 100644\n--- a/object.c\n+++ b/object.c\n@@ -472,6 +472,12 @@ rb_obj_inspect(VALUE obj, SEL sel)\n            }\n        }\n     }\n+    else if (!RCLASS_RUBY(obj)) {\n+       SEL selDescription = sel_registerName(\"description\");\n+       if (rb_vm_respond_to(obj, selDescription, false)) {\n+           return rb_str_new3(rb_vm_call(obj, selDescription, 0, 0));\n+       }\n+    }\n     return rb_funcall(obj, rb_intern(\"to_s\"), 0, 0);\n }\n. I think we should mush the failure which are caused by change with `rake spec:ci' \n``\n1)\nA nontrivially derived Object being observed through NSKeyValueObservation can be inspected FAILED\nExpected to not get Exception\nbut got RuntimeError (NSInvalidArgumentException: *** -objCType only defined for abstract class.  Define -[FancyWrapper objCType]!)\n/Users/watson/src/macruby-master/spec/macruby/core/kvo_spec.rb:59:inblock'\n/Users/watson/src/macruby-master/spec/macruby/core/kvo_spec.rb:40:in `'\n2)\nRational#inspect returns a string representation of self FAILED\nExpected \"(-9223372036854775808/1)\" to equal \"(9223372036854775808/1)\"\n/Users/watson/src/macruby-master/spec/frozen/shared/rational/inspect.rb:20:in block'\n/Users/watson/src/macruby-master/spec/frozen/core/rational/inspect_spec.rb:4:inblock'\n/Users/watson/src/macruby-master/spec/frozen/core/rational/inspect_spec.rb:1:in `'\n```\n. I had mistook. \nRCLASS_RUBY(obj) always returns FALSE, I don't expect it.\nI might need to be as follows, to check object whether it is Ruby's Class or ObjC's Class.\ndiff\ndiff --git a/object.c b/object.c\nindex c55511e..6d426f1 100644\n--- a/object.c\n+++ b/object.c\n@@ -472,7 +472,7 @@ rb_obj_inspect(VALUE obj, SEL sel)\n            }\n        }\n     }\n-    else if (!RCLASS_RUBY(obj)) {\n+    else if (!SPECIAL_CONST_P(obj) && !RCLASS_RUBY(RBASIC(obj)->klass)) {\n       return rb_str_new3(rb_vm_call(obj, selDescription, 0, 0));\n     }\n     return rb_funcall(obj, rb_intern(\"to_s\"), 0, 0);\n. Good Job, Mark!\nI have one request :)\nIt is to be inserted the copyright into parse.y.\nhttps://github.com/MacRuby/MacRuby/blob/master/parse.y\n. Hmm, this reqesut can't build on Snow Leopard.\n. Oh, sorry. I needed to clean build. I removed only \"./objs\" when copied local repository from Lion and compiled it on Snow Leopard.\n. It seems to me that this request is good.\nHowever, it will be pulled after releasing 0.12 since this request looks big.\n. @ferrous26 I think this is safe, however, master version should be up to 0.13(1.0?) before merging :)\nhttps://github.com/MacRuby/MacRuby/blob/master/version.h#L10\n. Thanks!\n. Thank you for spending your time to this work.\nI'll try to look this to find the time at this weekend.\n\u3069\u3046\u3082\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059(^_^)\n. Looks this is great patch :sparkles:  Thanks!\n. Thanks !!\n. ",
    "MSch": "@alloy Done, see #31\n. Oops, sorry :)\nGoing to look at how to patch the xcode4 templates\n. @lrz I removed the Xcode 3 changes and fixed the Xcode 4 templates\n. And a bit shameless self promotion, I wrote a blogpost: Xcode 4 Templates: Make one target depend on another\n. ",
    "martinh": "There, now CFBundleName and CFBundleExecutable both says MacRuby.\n. ",
    "isaac": "Hi Mark,\nNo problem - I have rebased these commits off master and amended them to apply the changes to install.rake instead of instruby.rb.  Let me know if everything looks OK.\nCheers,\nIsaac\n. I have restored the symlinking - I agree this seems like the best way to go.  Let me know if I missed anything else.\n. I have added the llc install back and the gem repository path now includes MACRUBY_VERSION.  Thanks for your help!\n. ",
    "mkempe": "Works like charm. Thanks.\n. ",
    "danielwestendorf": "Good idea Mark. I've added a commit that adds quotes to each file name.\n. ",
    "msabramo": "Sample output for an actual crash:\nRoxorVM::pop_current_exception (vm.cpp:3607) - Warning: Assertion about to fail: ((size_t)pos < current_exceptions.size()); pos = 1; current_exceptions.size() = 1\ncurrent_exceptions[1]: \"#<NoMethodError: undefined method `[]' for nil:NilClass>\"\nAssertion failed: ((size_t)pos < current_exceptions.size()), function pop_current_exception, file vm.cpp, line 3616.\n. @jballanc OK, I added some #ifs; hope that's useful.\n. @jballanc OK, I switched the #defines off and got rid of one of the printfs in compiler.cpp. I did play a bit with putting the logging in RoxorVM::current_exception, but I didn't commit it for now, as it the output is not as useful for debugging, because it tells you the __FILE__ and __LINE__ of the code in vm.h instead of the relevant line in vm.cpp which seems more useful.\nI agree with you that sprinkling the code with printfs is pretty ugly and probably not the best way to debug. Along the lines of your suggestion of having structured exception logging, I wonder if DTrace could be leveraged more effectively for this sort of debugging. Here's a start:\n$ sudo dtrace -n ':*ruby*::raise { printf(\"%s\", copyinstr(arg0)) }' -c 'macruby -e nil[]'                           \ndtrace: description ':*ruby*::raise ' matched 3 probes\n-e:1:in `[]': undefined method `[]' for nil:NilClass (NoMethodError)\ndtrace: pid 71519 has exited\nCPU     ID                    FUNCTION:NAME\n  0 119858           _ZL10__vm_raisev:raise NoMethodError\n. ping\n. Bump\n. ping\n. Done. See 20fcc1f.\n. ",
    "siuying": "+1 on merge this, if it don't break other specs.\n. ",
    "noeticpenguin": "no, fixing.\nOn Feb 19, 2012, at 7:47 AM, Watson wrote:\n\nDoes this work for Xcode 4.2 and older?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/MacRuby/MacRuby/pull/59#issuecomment-4041693\n. Watson,\n\nThats what I'm trying to work out. I was wondering if Xcode-select will properly work with 4.3\nif so, we can utilize the xcode-select method to derive where to write the link.\nI'll uninstall 4.2 here and see if that resets where Xcode-select is putting things.\n-pkj\nOn Feb 19, 2012, at 8:22 AM, Watson wrote:\n\nI think that this should use the xcode_dir instead of \"/Application/Xcode.app/xxx\".\nDoes anyone rename or move Xcode.app?\n$ sudo mv Xcode.app/ Xcode\\ 4.3.app/\n   $ sudo xcode-select -switch /Applications/Xcode\\ 4.3.app/Contents/Developer/\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/MacRuby/MacRuby/pull/59#issuecomment-4041852\n. I've updated the pull request with a patch that uses the Xcode_dir from the installer.\n\nshould work with 4.2 and 4.3\nOn Feb 19, 2012, at 8:22 AM, Watson wrote:\n\nI think that this should use the xcode_dir instead of \"/Application/Xcode.app/xxx\".\nDoes anyone rename or move Xcode.app?\n$ sudo mv Xcode.app/ Xcode\\ 4.3.app/\n   $ sudo xcode-select -switch /Applications/Xcode\\ 4.3.app/Contents/Developer/\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/MacRuby/MacRuby/pull/59#issuecomment-4041852\n. \n",
    "mattetti": "Awesome, I'll check that out when I'll et home. Thx a lot \n-m\nSent from my iPhone\nOn Feb 19, 2012, at 4:41, Kevin Poormanreply@reply.github.com wrote:\n\nThis set of changes should allow macruby .pkg's to \"just work\" with xCode 4.3\nyay!\nYou can merge this Pull Request by running:\ngit pull https://github.com/noeticpenguin/MacRuby xcode4.3-updates\nOr you can view, comment on it, or merge it online at:\nhttps://github.com/MacRuby/MacRuby/pull/59\n-- Commit Summary --\n- simple update to accommodate Xcode 4.3 by changing the installation  directory for file templates to the user's library app support directory.\n- updated to create rb_nibtool symbolic link inside the app bundle\n-- File Changes --\nM rakelib/install.rake (10)\n-- Patch Links --\nhttps://github.com/MacRuby/MacRuby/pull/59.patch\n https://github.com/MacRuby/MacRuby/pull/59.diff\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/MacRuby/MacRuby/pull/59\n. Sorry, this isn't quite ready yet. I upgraded to Xcode 4.3 and tried to build the nightly build but there are some expectations made by the build tools and they also need to be updated. I also thing that need to update the pmdox project.\nBy the way, did you try to build the installer and installed the nightly build?\n\n```\n$ rake nightly\n...\nln -sf /Library/Frameworks/MacRuby.framework/Versions/0.12/usr/bin/rb_nibtool /tmp/macruby-nightly/Developer/Tools/\nrake aborted!\nNo such file or directory - (/Library/Frameworks/MacRuby.framework/Versions/0.12/usr/bin/rb_nibtool, /tmp/macruby-nightly/Developer/Tools/)\nTasks: TOP => install => install:all => install:xcode_support => install:nibtool\n(See full trace by running task with --trace)\nPackaging MacRuby\nrake aborted!\nNo such file or directory - /Developer/usr/bin/packagemaker --doc /Users/mattetti/src/MacRuby/rakelib/../misc/release/macruby_nightly.pmdoc/ --out /Users/mattetti/tmp/macruby_nightly-2012-02-19.pkg --version 2012-02-19-nightly\n```\n. Quick note that the installer would also fail:\nInstalling IB support\nln -sf /Library/Frameworks/MacRuby.framework/Versions/0.12/usr/bin/rb_nibtool /Developer/Tools/\nrake aborted!\nNo such file or directory - (/Library/Frameworks/MacRuby.framework/Versions/0.12/usr/bin/rb_nibtool, /Developer/Tools/)\n/Developer was removed during the Xcode 4.3 upgrade.\n. @Watson1978 but it doesn't get installed in /Developer anymore but as an app which is one of the issues.\n. it makes sense\n. ",
    "vincentisambart": "\n\nAdd new copyright strings for 2012 with the name set to The MacRuby Team\nChange the RUBY_COPYRIGHT constant to The MacRuby Team and reset the birth year to 2012\n\n\nI am not a lawyer but I have doubts you can assign copyright to an\nentity that does not exist legally...\n. ",
    "macrotis": "That's odd, plblockimp should support Snow Leopard. Can you post the output of rake up to the failure point?\n. ",
    "eitoball": "\nMaybe, we might need this changing too : ruby/ruby@65ca601#L1R337\n\nI added the changes in ruby/ruby@65ca601 as @Watson1978 suggested. Actually, to fix #188, only #do_write needs to be fixed because Net::IMAP seems to use only #print and #print relies on #do_write.\n. ",
    "wamatt": "Would be nice to see this committed. FWIW I'm working on adding MacRuby to Brew Cask and it doesn't support custom scripts outside the official package.\n. @timfall oh, mm that doesn't seem like an optimal situation.\n. @Watson1978 any chance we might see this committed?\n. ",
    "timfall": "@wamatt I'm not sure they're actively reviewing pull requests. For some reason the most recently closed one was 6 months ago, and others have been open for a while.\n. Very much agreed ;).\n. "
}