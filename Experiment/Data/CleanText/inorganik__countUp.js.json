{
    "inorganik": "Added this in - it's not a param, but is a var set inside the countUp object.\n. @HHSnopek can you please adjust your coffeescript file to reflect recent changes? Then I'll merge your commits and update the changelog. \n. agreed, if the function exists, I'm saying it equals itself, otherwise it's pointed to the vendor-prefixed equivalent function.\n. Added this ability in by adding a startVal param - countUp will detect which direction to count. \n. What license would suit your ability to make a contribution? \n. Added MIT license\n. You can toggle easing if you don't like it, just change this line to:\nthis.useEasing = false;\n. Technically it's doing what it's supposed to - at 60 fps and 5 seconds, you are showing 300 different numbers, and countUp.js has a lot of ground to cover from 0 to 1,000,000. If you log the output, 50% of the numbers are still above 900,000. I looked and in the last frame before it turns over 1,000,000 was 999,992 (this will vary each time you run it). I'd say that's pretty good. \nBut if you want it to count up by just 1 whole number at a time in the last, say second of the animation, fork this repo and make it happen :)\n. Thanks! I want to keep countUp.js uncompiled, with comments intact, so it will be easy to understand and change if someone wants to. If you want, add countUp.min.js and completely minify it. Can you make that change or remove your change to countUp.js and I'll merge. \nI appreciate your contribution to this project!\n. no rush thanks :)\nOn Tue, Jan 14, 2014 at 10:59 AM, HHSnopek notifications@github.com wrote:\n\nComments are still viewable in countUp.coffee [image: :wink:] I'll do\nthis once I get home, eta 30min till fix\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/inorganik/countUp.js/pull/11#issuecomment-32289449\n.\n. Nice, thanks! \n. It doesn't work currently on ie8, but I think that could be easily fixed by\ndefining requestAnimationFrame with a callback. I'll fix this soon. Thanks\n\nOn Wednesday, January 15, 2014, Phil Darnowsky notifications@github.com\nwrote:\n\nWhich browsers does this work with? Specifically, will it work with IE8?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/inorganik/countUp.js/issues/12\n.\n\n\nSent from Gmail Mobile\n. Done.\n. @HHSnopek thanks!\n. Just added a stop() method. (v 0.0.5)\n. nice thanks!\n. I think showing how to include the script (by any method) seems rather\nobvious. But maybe I should put a note that says that bower and component\n.json support files are included?\nIf they are like me, they'll d/l the script, modify it to suit their\napplication, and incorporate it into the app's main code base. For instance\nthe rAF polyfill might be defined somewhere else so they would remove that.\nOr maybe they build in a callback. Point is every project is different, I\ndon't think there is a definitive best practice.\nTo me \"fork on GitHub\" just tells someone looking at the site that the\nproject is on github- in this case it's in the URL, so IMHO no need.\nEither way I appreciate your input :)\nOn Sunday, January 19, 2014, HHSnopek notifications@github.com wrote:\n\nInstead of having Download on Github at the bottom of the for gh-pages,\nit should show how to install via bower & component. This should also be in\nthe readme.md.\nThat said it should have the classic Fork on Github/github.com/blog/273-github-ribbonsin an upper corner of the page. The users should more inclined to add\ncountUp.js via bower or component rather than downloading it themselves.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/inorganik/countUp.js/issues/18\n.\n\n\nSent from Gmail Mobile\n. Yea. I'll make some changes today as soon as I get a chance.\n. Enhanced!\n. Hmm, there's been a restart method since the initial release... however I fixed it in v0.0.5 to restart to the startVal instead of 0. But it's there.... \nEDIT: I should mention that the method is called 'reset' - but same idea.\n. Ahhh, ok. Can you please change the name of the method to be \"resume\"? To me \"restart\" means starting from the beginning. I think that's why I got confused (I should have read the title of this more carefully, trying to do too many things at once). \n. I just sandboxed this code, and it doesn't quite work in the expected way - what happens is the duration timer continues after you press 'Stop'. So if you wait out the duration, and then press 'Resume', it instantly displays 'endVal'. \nTry the sandboxed demo with @jolyonruss's resume function and enter a startVal of 0 and 100 as the endVal. Use 0 decimals and 5 seconds. Start it, then press stop, and wait 5 seconds. Press resume, it will instantly display 100. It should resume from the point it stopped, with the time remaining when it was stopped.\nIf you want to accomplish a true \"resume\", I think you need to need to change the scope of the progress var, that's within the count() method, and define it in the root of the countUp object. Create a resume() that simply calls count() but passes the progress var instead of the timestamp.\nIf you want I can just make this change and commit it....\n. No prob. Just got into it and it turns out its a bit more complicated than I thought. Working on it... I've got some stuff to do so I'm going to circle back to it tonight or later today.\n. Added resume() method.\n. Thanks for contributing to this repo! Unfortunately I can't merge this request because what you have added can be replaced with one line (the methods were already defined): \nself.d.innerHTML = self.addCommas(startVal.toFixed(decimals));\nAlso, it requires two parameters to be passed that were already defined when the countUp object gets initialized.\nHowever, you did rightfully point out that the startVal needs to be formatted, so I'll fix that. Thanks!\n. fixed.\n. awesome thanks!!\n. Well, on mine the var names are reassigned to a, b, c, etc., which is why the file is smaller. Maybe your uglify is out of date? Have you tried it since you installed that plugin?\nI don't understand what you mean when you say its more efficient when it's compiled from coffee to js? Isn't a smaller .min.js file more efficient? \n. Oh, nevermind, I see now.\n. Thanks! :hamburger: \n. Thanks! Someone else added the bower.json file, so I was not aware that registering it was required. \nDone!\n. Ok, created a 1.0.0 release.\n. Open-source FTW :wink: \n. Thanks Jack! Is this so you could use a jQuery selector as a target?\n. Nice. Thanks.\n. Did you try putting an id on the text element, and passing the id as the target param?\n. Is the svg part of your markup or are you loading it after the DOM loads? \n. In either case you might try this, because my guess is that the svg isn't loaded by the time your js fires. Put your svg in a div with an id 'svgContain'.\njs\nvar svgContain = document.getElementById(\"svgContain\");\nvar target;\nsvgContain.addEventListener(\"load\", function() {\n    var svgDoc = svgContain.contentDocument; // get the inner DOM of svg\n    target = svgDoc.getElementById(\"textToAnimate\"); // the element to animate\n    numAnim = new countUp(target, 24.02, 99.99, 2, 1.5);\n    numAnim.start();\n}\n. Cool project. I forked your repo and got countUp working - check the pull request. \n. Good ideas! I think the countUp library should stay pretty simple and boilerplate, but there's plenty of room for customization. For your case you could add something to the count() method like:\njs\nif (self.frameVal >= 10000) createFireworks();\nor\njs\nif (self.frameVal >= 75) target.style.color = \"red\";\n. I was thinking of making a branch for this feature actually, but couldn't figure out how to do it.\n. Much thanks!\n. Just enter 0 for the decimals param.\njs\nvar demo = new countUp(\"myTargetElement\", 24.02, 94.62, 0, 2.5);\ndemo.start();\nThe options object is optional, and you only need it if you are changing the number formatting or toggling easing.\n. Just want to clarify, are you saying you want to pass a Date() object for the start and end params, so you could count to a date?\n. So you want to do a timer? Or do you want it to count fast like a countUp animation? For a timer you'd be better off using setInterval.\n. It would be fairly easy to make a few adjustments to the script and make it do that. Here's how I would go about it:\n1. For startVal and endVal, pass a date object. Then use the date object's getTime() method to give you the milliseconds value of your time - assign the milliseconds values to this.startVal and this.endVal. \n2. Inside the count method, where you see the \"format and print value\" comment, instead of using the formatNumber method, you can use the milliseconds to make the time back into a date object, i.e. new Date(self.frameVal). \n3. Now that you have a Date object you can format it however you like. Use the date object's getHours and getMinutes method, and build a string like \"8:30\" to be displayed. \nJust remember that when you make a date with milliseconds in javascript, it will always display the time in your local timezone. So if you need to show a time for a different time zone, use the date object's getTimezoneOffset method and make adjustments.\n. It's already registered - just did a search and verified it's there.\n. If you still can't install it let me know!\n. You kids with all your new-fangled package managers. :) I'll try to register it soon, thanks.\n. Cool! As long as it is only a reference to this repo - because otherwise everytime I fix a bug or update the project there's another place to update it. :)\n. @HHSnopek In as much as something can be a \"class\" in javascript, countUp is. There are different ways to do it but they're all skinning the same cat. What did you have in mind, and why would it be better?\n. Hey Henry - I'm still unclear what the specific issue is in regards to the style of class it is. Could you please clarify?\nTo minify I use a sublime plugin that uses uglify.js.\n. Thanks for clarifying. I think the file structure you're describing is efficient, and a makefile would be a great add-on, but making that the core of the repo is not very accessible. Newcomers should be able to hack on countUp, modify it, and quickly understand how it works without a big time investment, and they will always start with the base javascript file, since vanilla javascript is the foundation for any js framework.\nRemember everyone has a different workflow and uses different frameworks, and most people visiting this repo are just trying to knock out some small aspect of their project as quickly as possible. Since their workflows vary so widely, we should give them to most simplified, commented, uncompressed version possible. \n. You can. Your only error was wrapping this in a jQuery wrapper - when you do that it creates a jQuery object with over 100 properties that is meant to be used with jQuery functions. \nAlso, you do not need to specify options unless you desire those properties in the options object to differ from the defaults. I used an attribute rather than data to set the endVal, but you can do it however you prefer. \njs\n$('.countUpMe').each(function() {\n    var target = this;\n    var endVal = parseInt($(this).attr('data-endVal'));\n    theAnimation = new countUp(target, 0, endVal, 1, 2.5);\n    theAnimation.start();\n});\nhttp://jsfiddle.net/3p4Gt/\n. I think I didn't merge it initially bc I didn't include info in the README about how to include it with any other methods. I think it's helpful though, if you're into CDNs for your code, I'll merge.\n. Scratch that, going to remove it now because the CDN version is already out-of-date.\n. If you would be up to it - both of those things would be very helpful, thanks!\n. jsDelivr sounds pretty sweet. Go for it!\n. Good eye. Thanks Jack!\n. You must be doing something wrong, because you can change the separator to an empty string in the demo and it works just fine. If you want to post your code, I could take a look at it.\n. What version of Chrome?\nWhat plugins do you have running?\nWhat platform (win/mac)?\nWhat exactly is the \"crash\" - does the browser quit completely? If not, what's logged in the console?\nThanks.\n. Thanks a bunch. I'll have to look into it further :)\n. Yea, I just replicated it in browserstack. I think that's a great suggestion. \nI think I'll do this: \njs\nif (self.options.separator == '') self.options.useGrouping = false;\n. @sgtmercs Thanks again for finding this bug and posting an issue! Sorry I doubted you. :beers: \n. Thanks!\n. Good catch, thanks!\n. Great. Could you update?\n. Can you address this?\n. Hmm, don't think so, for animation frame stuff - you have to just watch it :)\n. Thanks for hacking on countUp! I checked out your code and tested it. It works well except for a couple small issues.\n- reset() method doesn't work\n- you have removed the initialization line - so the input/element must have the startVal hard-coded in the html or it won't show up until start() is fired.\nThis is a nice modification though, good work.\n. @kmclaugh care to fix those issues and resubmit?\n. Been busy, haven't had a chance to look at it quite yet. Don't worry, I haven't forgotton. Sorry for the delay.\n. Going to streamline the formatPrint() method a little bit but good work.\n. Thanks. I removed it until it gets fixed. You can still find it on the gh-pages branch.\n. @hhsnopek do you want to redo the coffeescript version? If not that's cool, I'll close this issue.\n. Use a callback:\njs\nvar firstCount = new countUp(\"myTargetElement\", 24.02, 94.62, 0, 2);\nvar secondCount = new countUp(\"otherTargetElement\", 0.02, 45.62, 0, 2);\nfirstCount.start(function() {\n    secondCount.start();\n});\n. I forgot to tag a new release. It is tagged now. Thanks for reporting this.\n. The demo is meant to show the methods you can use - stop() and resume() are meant to be used programmatically, and you would never call resume() before you called stop() on an animation. \nThat said I guess I could just call stop() inside the resume button's method for the demo.\n. What exactly are you trying to achieve? There's probably a way to do it using countUp as it works now. \n. Why do you need to put each digit in a span?\n. Oh - You need fixed dimensions for each digit - gotcha. You've got a good solution there. \n. That's a legitimate bug. Thanks for reporting it. I'll post an update soon.\n. Ok, got this resolved. Turns out there were several things going on - first was that there was a truthy/falsy (if (value)) test on the value to print. Fixed that. Also, countUp rounded the value before checking if the result exceeded the endVal. The endVal can be exceeded because the progress can exceed duration in the last frame. If you are counting to zero, this could result in a -0. Got both these issues resolved in v1.3.1.\n. Hi, thanks for making that. Just curious, why are you posting a link back to your blog, instead of submitting a pull request so that your code can be part of this repo? \nThis is an open source project, so that everyone can contribute to it and everyone can benefit from it. Lots of people have helped make this repo better. You are asking for suggestions in your post to improve your code. That's exactly what makes open-source great - people will improve it, if there are improvements to be made. And more people will benefit from it.\nAnd while we're talking about your code - you add in defaults for decimals and animation length, which are already there in countUp.js. You only need to pass a target, startVal and endVal. I'd also like to point  out that your illustration of the default usage depicts one of the messiest possible implementations. If you have your code dialed in, it would look something like this.\njs\nvar numAnim = new countUp('target', start, end).start();\nIn any case... thanks for hacking on countUp.\n. Thanks, I'll make sure you get credit for it. Should definitely be a welcome addition to this repo!\n. Wow - so, instead of a pull request you rip off countUp wholesale and create a mirror repo under a different name? That's a whole new level of shiesty. Nice one. FYI countUp was already written in coffeescript, it was just temporarily removed because an update broke it. @HHSnopek will fix it and it will get reposted soon.\n. If you're just writing a coffeescript version, I think it should be\nmerged.... I was upset when I saw your repo bc the code was the same, minus\nthe polyfill. Someone else wrote an angular directive for countUp and put\nit in another repo and I don't get that- it won't be compatible if there\nare changes to countUp, and it won't benefit from any improvements either.\nIf everyone forked countUp into separate repos, no one would benefit from\neach other's improvements.\nIf you do decide to merge, please don't remove the vanilla js, bc that\nkeeps it readable, hackable, and accessible to people who don't write\ncoffeescript.\nAlso I'm curious, how are our goals different?\nOn Sunday, October 5, 2014, Kyle Needham notifications@github.com wrote:\n\nI created a new repo because, i believe our end goals where different. If\nyou agree with the way i am taking the new mirror we can merge that into\ncountUp. FYI i am in the process of updating the README and giving credit\nto countUp.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/inorganik/countUp.js/pull/55#issuecomment-57953262.\n\n\nSent from Gmail Mobile\n. My issue is that he forked this repo and put it under a new name, as though\nhe wrote it. At the time there wasn't even any attribution. Simply writing\nthis code as coffeescript (which was already done) doesn't make it your own\ncreation. He's passing off someone else's work as his own.\nOn Tuesday, October 7, 2014, Bradley Weston notifications@github.com\nwrote:\n\n@inorganik https://github.com/inorganik what is your issue? You've\nlicensed your countUp.js repository as MIT. Granted to distribute...\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software.\nhttps://github.com/inorganik/countUp.js/blob/master/LICENSE.md\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/inorganik/countUp.js/pull/55#issuecomment-58155934.\n\n\nSent from Gmail Mobile\n. @bweston92 There's no license issue here. It's more of a character issue. In any case I'm not doing anything about it... is that what you're wondering? \n. Ok hopefully at least he won't make a career out of ripping off other\npeople's work. You're his friend right? Have a sit-down with him, try to\nsteer him in the right direction... Oh wait... You're defending him. Maybe\nyou're not the best judge of character  Nevermind.\nOn Tuesday, October 7, 2014, Bradley Weston notifications@github.com\nwrote:\n\nNot wondering anything just wanted to make sure you knew your repository\nwas fully open source and with that arguments like these are pointless.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/inorganik/countUp.js/pull/55#issuecomment-58203891.\n\n\nSent from Gmail Mobile\n. How bout you call your repo \"countUp\" and we can put all this behind us.\nOn Tuesday, October 7, 2014, Kyle Needham notifications@github.com wrote:\n\nWell that escalated quickly. This is clearly going nowhere so lets just\nleave it there.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/inorganik/countUp.js/pull/55#issuecomment-58243219.\n\n\nSent from Gmail Mobile\n. \ud83c\udf7b\nOn Tuesday, October 7, 2014, Kyle Needham notifications@github.com wrote:\n\nSure. That's done.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/inorganik/countUp.js/pull/55#issuecomment-58272773.\n\n\nSent from Gmail Mobile\n. Based on the numbers you gave me, you want it to count 100 times per hour,\nwhich is pretty slow. For this you could use a simple setInterval and just\nmake a calculation for what to display based on Date().getTime().\ncountUp is for animations that span one session, one visit to a page.\nOn Thursday, November 27, 2014, chaintm notifications@github.com wrote:\n\nI like to think myself as a dabbler in javascript as I have worked with it\nfor years but never fully as a main coding project. Most of my work is php\nand sql server base. I have need of a counter (which countUp.js is the best\nI have seen so far) that can however base it's visual current number on the\ntime a browser would see it.\nSo say, the start time is 8am and the end time is 4pm , the start time\nwould be value 0 on the countup and the end value would be say 800. So when\na browser would see this at say 12pm (noon) the value would be counting up\nfrom 400, 401 402 etc as the clock changes.\nThen at 4pm the final number would just show 800 till the next day at 8am\nit resets to 0 and starts again.\nIs this possible within countUp? I read as much as i could find on\n\"customizations\" of this code , but not being a guru of script like this I\nthought I would ask the developer himself. Thank you for your time on this\nsubject.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/inorganik/countUp.js/issues/56.\n\n\nSent from Gmail Mobile\n. To get you started: http://jsfiddle.net/5c9Lu8ya/\n. Thanks. \nTo fix it, rather than changing innerHtml, just add another condition to the if statement in the printValue method - that way, countUp will still work if you use it on a regular html element or input. \njs\nelse if (self.d.tagName == 'text') {\n    this.d.textContent = result;\n}\n. I added this in 1.3.2. Thanks again for pointing this out.\n. Submit a pull request and I'll merge.\nOn Sunday, December 7, 2014, bumbu notifications@github.com wrote:\n\nPlease add a package.json file. It will allow using not only bower\n(through bower.js) but also NPM\nhttp://blog.npmjs.org/post/101775448305/npm-and-front-end-packaging.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/inorganik/countUp.js/issues/58.\n\n\nSent from Gmail Mobile\n. You may have noticed in the README (read it :smile:) that there is a callback -\nwith optional callback:\n``` js\nnumAnim.start(someMethodToCallOnComplete);\n// or an anonymous function\nnumAnim.start(function() {\n    // do something\n})\n```\n. Why do you need a jQuery version? \n. You want multiple elements to animate to the same number?\n. I don't have any plans to build this, but you are welcome to! I'll leave the issue open in case anyone else wants to take it on.\n. I might actually make a jQuery version at some point. Or someone else can. \n. Although @trevanhetzel's solution is great stopgap measure, a jQuery version could offer things like method chaining, control over more params, and more control over when animations run.\n. That's one way to do it.... I think a lot of new devs like the ease of jQuery though.\nBabel looks cool, I hadn't heard of it.\n. countUp will never depend on jQuery - I'm just saying we have it as a separate offering. I know too many people rely on jQuery, but one little lib that forces them to use vanilla js is not enough to convert them. Fact is jQuery is a great convenience, it's even built into Angular. I think it would be a nice thing to offer separately... btw if you ever want to chat more about this stuff hit me up on gchat, we can keep the github spam to a minimum\n. Now included.\n. @fjeddy, If I included the jquery version in the bower file, people who aren't using jquery in their projects would have the same issue you are having with angular in the issue you filed, #177 - They would get a jQuery undefined error.\nThe plan is to remove angular from the bower file. Then have separate projects in bower for angular and jquery. That way you'll have three bower projects to choose from so you get only what you need:\n- countUp.js\n- countUp.js angular\n- countUp.js jquery\nThis hasn't been done yet. . I think you've got a point there but changing it would risk breaking a lot of people's code if Bower or Component pulls the latest version into their project. This is a style issue, and has nothing to do with the functionality of the code so I think I'll leave it as is unless a lot of people have a problem with it.\n. You could always fork this repo and format the code however you'd like....\n. Thanks. Comma definitely shouldn't be there, I'll fix it soon.\n. CountUp accepts either a var of a previously selected element or an id of an element. For your idea to work you'll need to refactor a bit. I think this would be a great learning opportunity for you. Fork this and try it out. Going to close this one because you're asking for this same thing in this issue. \n. For what you are trying to do, countUp is the wrong solution. countUp is for single page visits and animations that last under a minute. If you want to display a time counter, like say a stopwatch or timer, you should use setInterval and have it update every second. Example:\n``` js\nsetInterval(function() {\n    // calculate time to display in counter based on current time, and counter start time.\n}, 1000) \n```\nIf you want to give me more details about what you're trying to do, I can help you write it.\n. You sure? It would probably be super simple to write.... if you want you could make it open source ;)\n. You can have as many counters as you want. Please be specific about what problem you're running into - there is no reason why you can't have multiple counters on a page. \n. Getting no response from the poster, going to close this until a specific issue is identified.\n. Here's an example of multiple counters on a page. For each counter, you need to create a separate instance of CountUp:\n```js\nvar demo1 = new CountUp(\"demo1Target\", 0, 3882, 0, 2.5);\ndemo1.start()\nvar demo2 = new CountUp(\"demo2Target\", 3882, 0, 0, 2.5);\ndemo2.start()\nvar demo3 = new CountUp(\"demo3Target\", 98, 475, 0, 2.5);\ndemo3.start()\n``\nNotice how:\n- each instance has a different target - \"demo1Target\", \"demo2Target\", etc\n- each instance hasstart()` called on it\nhttp://jsfiddle.net/bcujgvf0/. Thanks!\n. Nice one, thanks\n. Thanks for making a contribution here! I don't want to merge, because of very subjective reasons. I just don't like the code style google-closure forces you into. Also, I really dislike JSLint - it doesn't allow completely valid JS. I've heard great arguments for it, but I'd prefer to keep the style of coding I have. Again, thanks anyway.\n. Hadn't read up on AMD, as I'm in the angular world which has it baked in. Thanks!\n. Thanks Henry, looks like you put a fair amount of time into this, I appreciate it. Well, I just merged a PR that makes this lib support AMD, which means it also supports UMD. I see though that you created a distribution folder, and added a gulpfile and package.json file. \nHere's what I would like to do... basically just merge the gulpfile and package.json. I can't justify a new release just for adding the gulpfile, that's really the only thing from this PR that's changed from the last release. The readme changes are very minimal and arbitrary, I don't think they're necessary. Also, I'd rather not have 2 copies of countUp.js, in both the root and dist folders. I'd like to just have 1 in the root. Most people when they submit a PR forget to update the minified version, let alone another copy of countUp. \nI hope that's ok with you, I think the gulpfile and package.json would be nice to include.\n. The problem I have with using this build system (although I already use gulp) for the repo is that it forces anyone using this lib to use it... this repo has become fairly bloated already, I'd love to keep it as trim and simple as possible. It's a small component, I would suspect people will copy and paste the bits they need and integrate them into their code base. Sorry to be stubborn on this...\nCould you please elaborate why AMD doesn't equal UMD support? How are they different? From what I could find the wrapper is the same. \n. Hey Henry, you are quite right, I haven't used javascript package managers before. Tell you what. I made some minor changes to countUp.js to clean up some code... if you could please merge those to your codebase, and update the README to better describe how one would install with said build system, I'll merge. Thanks for explaining stuff to me and all your contributions!\n. Woohoo!, thanks Henry. I updated the version to 1.5.2 and I will make a new release. \n. hehe you scared me. Yea, no code changes.\n. Will do. Thanks.\n. @hhsnopek - bower is already registered - but in your last commit you changed the name from \"countUp.js\" to \"countup\" - why? Is there a reason to register a duplicate?\n@tzd thanks for letting us know, I made a new release which fixes the path in the bower file, which was broken. I just tested running \"bower install countUp.js\" and it worked. Try again and let us know if you have any problems... thanks.\n. I guess I kind of rubber-stamped that one without thinking about it... Anyhow I changed it back.\n. Thanks!\n. Thanks!\n. Your change is merged.... please try again - \"bower install countUp.js\"\n. Looks like you are creating 4 separate instances of CountUp and assigning them all to numAnim.  So you're just redefining one instance over and over. Name each instance something different. \nThe error you're getting is probably because the second CountUp you created for \"dataListed\" is using the same target \"stat--listings\" as your animation for \"dataListings\". \nSo,\n- make sure each animation has its own target\n- make sure each animation has a different instance name, even if you just did numAnim1, numAnim2, etc.\nMake these changes and let me know if you still get an error. \n. You are still using the same target for the first 2 animations.\n. You are selecting classes. You have to select IDs. \n. Happens :)\n. What is your issue?\n. Going to close this unless you can please clarify your issue... interested why you want to have a count up animation if the startVal and endVal are the same\n. Yeah, it's the condition you pointed out: self.startVal !== self.endVal.\nI would suggest not initializing the countUp until you actually want it to count - because setting the startVal and endVal to the same number wouldn't animate anyway. Or you could remove that condition.\n. I would merge this... (and it's a lame reason) but I don't have a good conflict resolution tool. Do you guys have any suggestions?\n. Don't worry, I'm merging now. \n. Yea... think about it. If you give it 3 seconds to animate from 0 to 61 million, it has a long way to go and a short time to do it, so it has to skip a lot of numbers. So it's working exactly as it should.\nOne option would be to set your endVal to 50 less than your actual endVal, then use the callback to call update() and set the endVal to your actual endVal. Like this:\njs\nvar demo = new CountUp('target', 0, 61450930, 0, 2);\ndemo.start(function() {\n    demo.update(61450980)\n});\nhttp://jsfiddle.net/4d29w039/ \n. Fixed in 1.6\n. This is fixed in 1.6.\n. Just tagged 1.6.1. \n. It's only a google search away Alex. I googled \"javascript get attribute value\" - \njs\nvar target = document.getElementById('myTarget'),\n    endVal = target.getAttribute('endVal'), // if you had an 'endVal' attribute on your target\n    animation = new CountUp(target, 0, endVal).start();\nhttp://jsfiddle.net/r5mdb61q/\n. There is no reason you should be blocked by using an attribute value- for the boostrap bar that is meant to be a \"setter\", so I think you should avoid that altogether and roll your own progress bar, It's really easy. You just absolutely position a div in another div, with the parent div having the following props: overflow:hidden; position:relative and the child div having position:absolute; width:100%; left:-100%; background:blue Then you animate the left prop of the child div inside the count function in CountUp because it is firing every frame (because it's called by requestAnimationFrame()). In this way, the progress bar and the number animation are synced together.\n. I think I'm understanding better what you are trying to do..... Just go inside the count() function and set the attribute of the progress bar there. Should be pretty darn close to:\njs\nvar percent = progress * 100\ndocument.getElementById('progressBar').setAttribute('attrName', percent);\nIt was unclear to me what you were trying to do so sorry for all the back-n-forth.\nNot so sure that the progress bar will update its size on every frame, because the boostrap script that is setting it's width may only fire on load, or something else.... so my previous suggestion would probably work better.\n. You probably didn't read the README eh? Use the decimals param.\n. Mixture - can you elaborate?\n. Seems like the obvious solution is to use a 0 for the decimals param on numbers you want whole, and  1 for numbers you want a decimal. Am I missing something?\n. You're looking for scroll-spy - that's a separate lib. You can get one with Bootstrap, but I prefer to roll my own. You need a window.onscroll function that looks at the document offset and compares it with the offset of your countUp target element.\nHere's an angular scroll spy module I wrote. You should be able to pick out the parts you need: https://gist.github.com/inorganik/cd6da5a79106d17b7c1b\n. Sure, in the start() function, just add a timeout:\njs\nthis.start = function(callback) {\n        self.callback = callback;\n        // make sure values are valid\n        if (!isNaN(self.endVal) && !isNaN(self.startVal) && self.startVal !== self.endVal) {\n            var delay = 1000; // 1 second\n            setTimeout(function() {\n                self.rAF = requestAnimationFrame(self.count);\n            }, delay);\n        } else {\n            console.log('countUp error: startVal or endVal is not a number');\n            self.printValue(endVal);\n        }\n        return false;\n    };\nThis will delay all countUp animations. If you want to delay certain ones, do a check on the target. \n. This was fixed in 1.6.\n. Thanks Mikael, I removed the extra minified file. The intention is to use the files in the dist/ folder. \n. Thanks Hizbul! I appreciate the contribution. There are some issues though:\n- if jQuery isn't defined on the page, it will throw an error and stop the script\n- jQuery objects can represent a set of objects, which countUp can't handle\nI would really rather just port countUp to a jQuery version, so people using jQuery can use that, and it can handle multiple objects, chaining, and other nice jQuery stuff. There is an open issue for it. Maybe you could build it?\n. @hhsnopek ?\n. I contacted the person who owns the package \"countup\" on npm, @srk9. They aren't maintaining whatever they have there, so I'm hoping he'll let me use the name. As soon as I find out, I can hopefully get this resolved and publish it under \"countup\". Stay tuned...\n. Thanks for the reply @srk9. Well I kind of screwed up because your repo is countup, another guy has countup.js which is the name in the package.json file. So now I have contacted him and if I can get that one, I can publish there and resolve this.\n. Sorry for the long delay ..... I give you...... \n\ud83c\udf89 https://www.npmjs.com/package/countup \ud83c\udf89\n. Thanks!\n. CountUp is designed for animating over a pre-determined duration, so you can't use it as a preloader, because the duration is unknown at the start. \nThere is a nice angular lib you can try: http://chieffancypants.github.io/angular-loading-bar/\nIt's animating a bar from left to right, but you can hack it so it just animates that percentage width as a number.\n. I just tested in IE8, IE9, and IE11. It's works in all 3. If you look at the script, there is already an if (!window.requestAnimationFrame) (Polyfil). Try some debugging - check if you are passing valid values for startVal and endVal, put some log statements and break points to see what's going on.\n. Actually, I think I can still merge your changeset, I just need to add if statement:\njs\nif ($attrs.id) {\n    $scope.$on($attrs.scrollSpyEvent, function (event, data) { \n        if (data === $attrs.id) { animate(); } \n    }\n);\n. Nevermind, you added it! thanks\n. Hi Vivien - this looks great - just a couple things:\n1. Please run gulp, so that the minified version of the angular module is created in the \"dist\" folder - it also copies the unminified version there. It should be pretty easy - just cd to the countUp directory, then run npm install and then gulp in your console, and you'll be good to go.\n2. I would like reanimate on click to remain the default behavior\nOnce you make those changes I can merge.\nThanks!\n. run npm update\n. You didn't like 2.5? In any case, nice work!\n. Thank you for your contribution! This needs a little bit of work - I really think this should leverage jQuery more and let params control the animation. Currently, calling this:\njs\n$('.countup').CountUp(0, 94.62);\nwill fire the same animation on every element on the page that has the class countup. I think you ought to be able to do something like:\nhtml\n<h1 class=\"countup\" data-endval=\"123\"></h1>\n<h1 class=\"countup\" data-endval=\"456\"></h1>\n<h1 class=\"countup\" data-endval=\"789\"></h1>\n...where it animates to the number in the data-endval param.\nOther issues:\n- stray global var self;\n- callback param is ignored in $.fn.CountUp definition\nFor what it's worth, I was able to duplicate your functionality without re-defining CountUp with this block:\n``` js\n(function( window, $ ) {\n$.fn.CountUp = function(startVal, endVal, decimals, duration, opts,callback) {\n    var cu = new CountUp(this, startVal, endVal, decimals, duration, options);\n    cu.d = $(this);\n    cu.printValue = function(val) { \n        cu.d.html(val) \n    };\n    return cu;\n};\n\n})(window, jQuery); \n```\nI need to do the same thing for the angular plugin. Maybe you can do the same and just make CountUp a dependency?\n. Hey, looks like this PR got a little stale. Sorry... totally forgot about it. Also, I ended up writing a quick, simple jQuery plugin and accidentally added it. Perhaps if you're interested, you could fix that one up?\n. Hey, thanks for being so willing. Right now I have a simple implementation that basically does this:\njs\n$('#countMe').countUp(4927.3);\nIt can also accept a params object instead of just an endVal. But it is missing the ability to get params from attributes. I would like it to be able to chain methods, like this, instead of as an argument like you had:\njs\n$('#countMe').pauseResumeCountUp();\n$('#countMe').updateCountUp();\n$('#countMe').resetCountUp();\nIf you are up for it, great! But if not, I understand.\n. There are conflicts in your branch, so you need to pull master and merge it into your branch. Then I'll merge. Thanks.\n. Sorry, been very busy. I will check it soon.\n. Hi, Sorry for the long delay on this. Looks like you implemented the functions as string arguments:\njs\n$(\".countup\").CountUp(\"reset\");\nBut I had requested that they each be their own methods:\njs\n$('#countMe').resetCountUp();\nAlso, methods should start with a lowercase letter - countUp not CountUp. The CountUp class in countUp.js is uppercase because it is a \"class\" - or as close as you can get to a class in javascript. But methods should start with lowercase.\nIn addition the countUp() method should keep it's existing functionality of passing the endVal like \njs\n$('#countMe').countUp(4927.3);\nSo that no existing implementations get broken by the change. Omitting the argument would use the data-endVal attribute property of the element in the selector.\nI understand you may not want to put forth the effort to do these things, and if not, that's ok. But to merge them here I would like those changes.\nThanks,\nJamie\n. Hmm, I tested the existing code with 0 \u2013\u00a02.4 for 10 seconds and 1 decimal, and also 0 \u2013 2.456 for 10 seconds and 3 decimals. In both situations, it worked properly. Do you have a test case where it fails?\nAlso, please be sure to run gulp to build the files in dist/ before you commit.\nThanks.\n. feel free to submit a PR... in the meantime, why don't you just set the duration directly:\ndemo.duration = 2000; // new duration (2 secs)\ndemo.update(newValue);\n. Thanks, can you please merge and resolve any conflicts?\n. Thanks!\n. Awesome, thanks\n. Thanks!\n. Done. I have the latest under the package name countup.js. \n. Thanks!\n. For the sake of simplicity in the demo, I will probably remove the textarea showing the easing function; it's confusing that it's readonly - I kept trying to focus it and thought it was broken. \n. Oh that would be sweet. Can you just have the \"custom easing\" heading, and the select. Then have createCountUp() fire onChange.\n. Thanks man!\n. Hey @hhsnopek, to update for Bower I just tag a release right? \n. Confirmed, just need to tag a release. You should be good to go.\n. Please remember to build next time before making a PR. I will build and commit.\n. I assume what you mean is that you are setting 20054.44 as the endVal, but it is stopping at 20054.43? Testing this on the demo page, I can't reproduce using the default easing. However, if you use a custom easing function, it could cause this issue. Best to use the built in easing function, or fix whatever custom easing function you are passing in.\n. Also, checkout the README, I just updated it so that it shows an example of how to smooth out animations for large numbers, like what you are trying to do.\n. What's the issue?\n. There was a bug introduced in 1.6.0 that caused this, but it is fixed now in 1.7.1.\n. Hmm. This would be called from the request animation frame function - so probably around of 60 times per second. I don't understand the use-case for this. Why would you need this when you already can pass a custom formatting function, and even a post-formatting function?\nSecondly the way it is now, there is no check if the function is defined, if undefined, it will break the script.\n. Oh gotcha, didn't see that sorry. Yes I think you should be able to use the optional formatting function. Good luck!\n. Thanks for reporting the issue, you found a bug! Looks like it was introduced in 1.6.1. I'll make a fix and tag a new release here in a bit.\n. This is fixed in new version 1.7.1.\n. Yea, I will add a deprecation notice. Thanks.\n. Is the reason for this because bower requires a case-sensitive countUp? npm doesn't care.\n. Thanks! I accidentally committed that file before I even tested it! Assuming it works then with your fix?\n. ^^^\n. You would need to just edit the formatNumber function. split the string it outputs and wrap each digit in a span, which you can style.\n. Our build system (see gulpfile.js) already automatically wraps modules with UMD code and copies them into the dist folder. We deliberately left the angular file out, because many people prefer to load angular modules the way that's prescribed in the Angular Seed Project. \n. If you really want it, then you should edit the gulpfile, not the angular file in the root. \n. Can you please make a PR?\n. pinging @clabnet ^^^. hey there @clabnet, can you please make a PR?. Tante grazie @clabnet . 2 possible ways.\nUsing vanilla javascript:\njs\nvar arrayOfMatchedElements = document.getElementsByClassName('myClass');\nUsing jQuery: \njs\nvar arrayOfMatchedElements = $('.myClass');\nEither way gives you an array of matched elements. From here you can iterate over the array or just pick the first one:\njs\nvar target = arrayOfMatchedElements[0];\nvar numAnim = new CountUp(target, 24.02, 99.99);\n. If you please submit a PR I can take a look. Thanks\nOn Friday, September 23, 2016, J\u00e9r\u00f4me Brunel notifications@github.com\nwrote:\n\nHello,\nSince CountUp is not defined on the window object, it appears as not\ndefined iwhen using it with webpack. Making it window-wise fixed the\nissue, I can provide a PR for this.\nIs it OK on your side?\nThanks,\nJerome\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/inorganik/countUp.js/issues/124, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAGr8X2cyxtmYo1OkOvvMyYFGZkgzLxwks5qs_FggaJpZM4KFG6h\n.\n\n\nSent from Gmail Mobile\n. @HeyDaniyar make sure you are using the countUp.js file that is in the dist folder.. countUp is not defined means just that! For some reason, the script is not being included in your bundle. You need to troubleshoot how the script is being included.. the Usage section in the README explains it very clearly. Did you debug? What do you see in the console?\n. Angular is not defined means just that. If you are not using Angular, you only need to include countUp.js, and nothing else. The only reason we also include angular-countUp.js is in case you are using Angular, which it appears you aren't.\n. Scroll spy is a separate angular module. You need to create an angular app to use it. You need to read up that. There's plenty of docs for angular. \nPlease don't create issues when you get stuck. Troubleshoot and debug yourself. Do some research. This isn't a help center.\n. Thanks for the heads up. The correct link is: http://inorganik.github.io/angular-scroll-spy/\nWhere did you get that link? I'm trying all my links and they seem to work fine...\n. Found it. Incorrect link in the README. Thanks again.\n. nope. feel free to make a PR!. thanks!\n. I just merged a separate PR which adds angular 2 support, it included a typescript definition file. Could you take a look and see if it accomplishes what you needed?. Merged. Thanks.. It took me a moment to realize what you wanted - you want it to count like:\n9.8\n9.9\n10\n10.1\n10.2\netc\nI'd really rather not bloat the lib any more with additional options. But you can do it like this:\nInside the formatNumber function, replace this line: \nnStr = nStr.toFixed(self.decimals);\nwith this:\nif (nStr % 1 > 0) {\n    nStr = nStr.toFixed(self.decimals);\n}. Thanks yes I need to update the npm package. npmjs seems to be down atm but I did tag a new release. Will try again later to update.. Sorry for the delay, it's updated now.. This one is for @vigie, since he added Angular 2 support. Pinging @vigie can you please look into this?. You'd have to use countUp in conjunction with a scroll-spy script. I wrote one for angular,  which can be integrated with the angular countUp directive included in this repo. Here's a demo . whatever hook you are using to change visibility, use that to call start() on your animation.. Maybe you have a $scope variable that causes the visibility to change? In that case, you can do an ng-if. When the DOM is created, the countUp will be constructed and will animate.\n<h2 ng-if=\"thisIsVisible\" count-up end-val=\"873.4\"></h2>. Hey @alexgurrola would you mind syncing your branch up with master so I can merge this?. Hey @alexgurrola, sorry but upon further examination of your PR, I decided not to merge this, here's why:\n- you're calling your step function on every frame regardless if the dev passed a countInstance in their instance\n- you're calling $parse on every frame in your step function, which concerns me performance-wise\n- you're calling $digest on a parent scope, which may or may not apply to a related animation the dev is doing - it's too specific\n- you're calling $digest extremely often by calling it in the step function (up to 60x/second) which is almost guaranteed to interrupt a digest in progress and throw console errors. \nIt might work as a good custom solution for what you are doing but I don't think this is boilerplate or safe enough to merge. Thanks anyway.\nAlso, it's a moot point but you didn't use the build system described in the README which creates minified files.. Edit this line of the formatNumber() function:\nx2 = x.length > 1 ? self.options.decimal + x[1] : '';\n\nto look like this:\nx2 = x.length > 1 ? '<span>'+self.options.decimal+'</span>' + x[1] : '';\n\nNow you have a span tag around your decimal and you can style it with CSS:\n```css\nnumAnim span {\nfont-size:80%;\n\n}\n``. CountUp only watches numbers and an options object. You provided almost no info whatsoever about what you're doing or how you're doing it, so I cannot help you.. It counts when you runstart(). Use a scroll spy script. you must include countUp.js as well... is it included? @vigie is this anything you an help with?. @vigie ^^^ Might need to remove angular 2 support unless this can be fixed.. Is anyone able to fix? If so please submit a PR - else I might have to pull angular 2 support :(. pinging @vigie can you please make sure this is resolved?. @vigie please check this. Thanks very much @vigie. Closing.. @JWesorick and @tskweres - in your console, when you typeCountUp`, is it defined? Per @vigie,  you need to make sure that CountUp is a global. \nUnfortunately I stopped working with Angular on 1.x, so I can't help much, but certainly try some debugging and report back.. I like what you're doing here, smart change to make. But you didn't use the build system that creates the files in dist/ which is explained in the README. Also I left a comment on one of your changes. Thanks.. @iamandrewluca Did you see my comments above? Please let me know your response so I can accept a revised PR or close this one, thanks.. Thank you, merged. Hi, thank you for your pull-request. I'm unclear on what you are demonstrating with the image above - you can easily style text like that with css without any modifications to countUp.js. \nBut even if you needed a custom function, there is already an optional formatting function that can be passed in the options as you know. If you need the default formatNumber function to run in addition to some custom code you are doing, simply copy that function into your custom function, but replace the references to vars defined in the scope of the CountUp instance. Then pass it as the optional formatting function.\nLet me know if I am missing some use-case, else I will close this PR. Thanks.. Yes, I think that's what you should do. But even better would be to not use images at all and style your text with CSS. It's pretty easy to create the glow effect with text-shadow. Here's a generator: http://css3gen.com/text-shadow/\nClosing this one... good luck.. @pslean, in #143 we discussed what you wanted to do and we resolved it: \nIf you want a custom function to pass the result through, pass it in options.formattingFn. If you still want the result to be passed through the default formatting function, copy the formatting function code into your custom function that you pass to options.formattingFn. \nAlso please don't open an issue that just references a closed issue.. Curious about this use-case. I've used count-up with scroll spy (see example) and not needed an isCounting property. Can you please elaborate how you would use it?. My example is angular, but all angular does in that directive is give us a reference to the element. Other than that it's just regular 'ole js. I'm not trying to be a pain\u2013 but if the counting element is not scrolled into view, it wouldn't matter whether it was counting or not because it was out of view. Therefore you can always start the animation as the element is scrolled into view.. Closing this since I am releasing a major update - 2.0. Not properly embedded? The link works, what's the issue?. What's the point of a copyright anyway right? We should probably remove this line altogether.. Wow, how did we miss that. I will run the build since you forgot - it makes the minified files. Thanks.. Trailing zeroes can be set with the value passed for the decimals argument. If you want leading zeroes, you will need to pass a custom formatting function in the options object:\njs\nvar options = {\n    formattingFn: myCustomFormatter\n}. Yes there is, it's specified in the README and the Demo page. https://www.npmjs.com/package/countup.js. don't use curly braces.\n<h2 count-up end-val=\"myValue\"></h2>. @vigie ?. hey community, can I get your help on this one? I do not use webpack currently on any projects. Can someone please troubleshoot this and make a fix, and then create a pull request? \nSeems like you'd be helping a lot of folks out.. @vigie :D. Sorry to hear this issue hasn't been resolved yet. Has anyone actually tried to fix it? \nI've not yet dove into the world of Angular 2 and typescript. But if someone could please link me a zip of a sample project I could try to troubleshoot. I'm sure this is something simple... it just needs some attention. . Hi all. Great news! The Angular 2 module for CountUp.js has moved into its own repo as of v1.9.0. \nIt has it's own npm package now as well, countup.js-angular2. \nPlease make sure you update your projects, and please test to make sure I properly set it up. I'm not currently using angular ^2 so I have not tested yet. Feel free to make any PRs necessary over there and I'll merge them ASAP.\nClosing this issue, as this repo no longer contains angular 2 files. . When you call reset(), it passes your startVal to self.formattingFn, (which defaults to formatNumber()). The only way I could reproduce this is if I passed an empty string as the start value, which must be what you've done.\nYou must pass a number as the startVal. Can you please elaborate on your case? Say exactly what you did and how you did it.. Try this: Paste this code just before the return statement in createCountUp function in angular-countUp.js\njs\nconsole.log('createCountUp -------');\nconsole.log('starVal', isNaN(sta), sta);\nconsole.log('endVal', isNaN(end), end);\nLet us know the result.. Updated the test above to use isNaN() instead of typeof, since typeof will still say 'number' for NaN.. Currently when you initialize countUp, it sets self.startVal = Number(startVal);. \nWhen you call reset(), it sets self.startVal = startVal;. \nI'm working on a change to use an intialize() function which gets called in both cases. It also will do error checks, which should solve your issue. I'll close this when I make the update.. Please pull latest (v1.8.3) @lukaszsamson and your issue should be fixed.. I believe this is a duplicate of #154 . Closing this, since the Angular 2 module has moved into its own repo as of v1.9.0. Please open any issues you have there.. This lib does not include the file you stated, but includes a file called countUp-jquery.js.\nAlso please remember Github issues aren't the place to run to whenever you have the slightest problem. You need to do some basic debugging.. This is not the lib for continuous counting - you're trying to achieve a clock-like effect? This is not a lib for that, sorry.. I think you might be confused how CountUp is used - have you used it? . Interesting, I have never heard of a destroy method in javascript. It doesn't exist natively, since garbage collection is done automatically with js. As with any object in javascript though, you can simply delete it after it does what you need it to do. Here I call delete in the callback so it deletes after it finishes animating:\njs\nvar numAnim = new CountUp(\"SomeElementYouWantToAnimate\", 24.02, 99.99);\nnumAnim.start(function() {\n    delete numAnim;\n});\nThese might free up a tiny bit of memory, but it will have absolutely no performance benefit in your app. \nIt's completely unnecessary.\n. Yep, you are right. I'll make a fix. thanks. haha you happened to catch me at a good time :). Fixed in v1.8.4.. Need more info, please paste the options object you are passing to CountUp. This line: this.get('formattingFn') is not returning a function. Did you test it? Put this in your code:\nconsole.log('formattingFn', this.get('formattingFn')).\nI tested passing a custom formatting function to the current version of CountUp and it worked fine. Let me know what you find.\nAlso, you do realize that there is a default formatting function built-in to CountUp and that you do not need to pass anything? It's for custom formatting in case you need it.. You'll notice up on line 107 of that file that there is another check for > 999. The reason is that it creates a smoother animation for large numbers. It subtracts 100 from the endVal on the initialization line, and when it starts down on the line you referenced, it uses the on-complete callback to call update() and finish the animation.\nThis technique is demonstrated here: http://inorganik.github.io/angular-scroll-spy/\nIn that case it's Angular 1.4.6 but it uses the same technique to smooth the animation for large numbers. The Angular modules still import the regular vanilla CountUp.js, and that code ensures requestAnimationFrame stops getting called after the end val is reached.\n. I see it now. I'm working on a fix. Thanks for bringing this to my attention.. Ok, this is fixed in v1.8.5.. Pull the latest version (1.8.5) and that should be fixed. If not, please\nlet me know\nOn Fri, May 5, 2017 at 7:23 PM arman yessenamanov notifications@github.com\nwrote:\n\nIf you follow one of the examples given in the readme, you may end up in\nan infinite loop.\nvar endVal = 9645.72;var numAnim = new CountUp(\"targetElem\", 0, endVal - 100, 1.5);numAnim.start(function() {\n  // Try adding this log message to see that it is being printed repeatedly\n  console.log(endVal + ' ' + numAnim.frameVal + ' ' + (endVal === numAnim.frameVal));\n  numAnim.update(endVal);\n});\nThe infinite loop is: callback() > self.update() > self.count() >\ncallback() > self.update() > self.count() > ...\nThe reason seems to be a precision error when comparing numbers in\nupdate() function:\nif (newEndVal === self.frameVal) return;\nOne workaround is to clear the callback before calling update, so it won't\nbe called again on the next iteration:\nnumAnim.start(function() {\n  numAnim.callback = null;\n  numAnim.update(endVal);\n});\nAnother workaround is to compare numbers in the update function with some\ntolerance:\nif (Math.abs(newEndVal - self.frameVal) < epsilon) return;\ni.e. consider numbers being equal if their difference is less than some\nvalue epsilon. It's hard to say what value to use for epsilon, because it\nmay be different for different use cases. In case of the example above\nepsilon of 0.5 seems to be enough.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/inorganik/countUp.js/issues/165, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAGr8SvlD5uE3W2V-3vA5EZXlAOGEOTjks5r28t1gaJpZM4NSkmo\n.\n-- \nSent from Gmail Mobile\n. The reason it's happening in your pen is because you're passing 1.5 for number of decimals, which is an invalid value. You initialized like this:\njs\n    var numAnim = new CountUp(\"counter\", 0, endVal - 100, 1.5); // wrong\nThe order of the args is target, startVal, endVal, decimals, duration, options. \n\nAdd the missing argument and it works properly.\njs\n    var numAnim = new CountUp(\"counter\", 0, endVal - 100, 2, 1.5);\nhttps://codepen.io/inorganik/pen/ZKabZL. Ah, sorry about that. Merged.. I think your right. Probably the best thing is to use Number() and then do a check with ensureNumber() like we do with startVal and endVal. . It looks like i already added the check but it makes sense to add it before the other lines. Thanks. Possible duplicate of #154 . Closing this, since the Angular 2 module has moved into its own repo as of v1.9.0. Please open any issues you have there.. Closing this, since the Angular 2 module has moved into its own repo as of v1.9.0. Please open any issues you have there.. Nice work. It would have been nice if this was part of the same repo (like the angular wrapper is), but with all the react dependencies in package.json I can see why it needed to be separate.\nOne request, I know this is nit-picky, but can you put the React stuff after Angular 2, in each section? That way it is linked in the order it was added. Then I'll merge. Thanks.. Thanks!. read the README. I'm unclear what you're asking.\n\nIs there a way to display the counter in one window while setting up updated values in a separate browser window?. This could be easily accomplished by passing a custom formatting function:\n```js\nvar options = {\n    formattingFn: function(num) {\n        var result = Math.round(num / 1000) * 1000; // round to nearest 1000\n        return result\n    }\n}\n\nvar demo = new CountUp(\"myTargetElement\", 0, 10000, 0, 2.5, options);\ndemo.start()\n```\nhttp://jsfiddle.net/wgLyn1gg/. You must be using bower eh? The angular module is included in the bower file.... I have heard from at least one other person that they were getting it and didn't want it. I actually added it because someone requested it.  \nCan you confirm if you installed via bower? If so I will just remove it from the bower file.. I have moved angular modules (1 & 2) out of this repo and into their own repos as of v1.9.0. So this issue has been resolved.. Thanks for the contribution. Here's why it prints the same value more than once - easing. If you disabled easing (linear), every value would be different. \nEven though this only adds 3 lines of code, it's completely unnecessary. There's absolutely no harm done by printing the same value twice. Therefore, increasing the size of the lib isn't worth it. Thanks anyway though.. Closing this since I am releasing a major update - 2.0. Thanks Glenn. If you look at countUp.js:90 there is a check that should prevent the loop you referred to. I tried to reproduce via the demo page and couldn't reproduce an endless loop. Could this issue have to do with the way CountUp gets implemented in React?. Cool. I realized all the options processing gets done when you instantiate CountUp(). Maybe it would be better to move that into the initialize() member function.. Thank you for this - will merge as soon as I have time (need to increment version number in package.json and clean up some spacing for consistency ). . Looking into this, I decided to rename \"digits\" to \"numerals\", since these are numeral systems.\nI couldn't find any standardized ISO codes for numeral systems, because I think numerals are lumped in with language, so language codes determine which numerals are used\nWhat's the use-case for needing to specify a numeral system? If your browser language is set to ar-*, wouldn't it use the eastern arabic numerals (\"\u0661\u0662\u0663\u0664\")? \nI'm also wondering about using en for \"1234\". It's confusing but those are Arabic numerals. Arabic numerals are used for lots of languages besides English. Should we leave the codes as they are anyway? en, ar, fa? \n. Good suggestion, this is now implemented in v1.9.0, and you can also demo it.. Oi, isNaN(' ') equates to false. smh. Fixed in 1.9.1.. Although I don't think there's a use-case for numeric separators, it's a big improvement to drop the regex testing from that function. Thanks!. You can do\nvar startVal = document.getElementById('target').getAttribute('data-from')\nAnd so on\nOn Fri, Sep 22, 2017 at 5:38 AM Richard Cook notifications@github.com\nwrote:\n\nI need to set this up to pull in values via CMS. Is it possible to use\ndata-attributes inline? For example:\n0\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/inorganik/countUp.js/issues/187, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAGr8dpemuwBcIdcxuE4z_THCb136e5dks5sk5wvgaJpZM4Pglpo\n.\n-- \nSent from Gmail Mobile\n. There\u2019s also vanilla is class selectors, I just don\u2019t know them off the top\nof my head. You might also try the included jQuery plugin, I can\u2019t remember\nif it reads attributes\n\nOn Fri, Sep 22, 2017 at 8:12 AM Jamie Perkins jamie.perkins@gmail.com\nwrote:\n\nYou can do\nvar startVal =\ndocument.getElementById('target').getAttribute('data-from')\nAnd so on\nOn Fri, Sep 22, 2017 at 5:38 AM Richard Cook notifications@github.com\nwrote:\n\nI need to set this up to pull in values via CMS. Is it possible to use\ndata-attributes inline? For example:\n0\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/inorganik/countUp.js/issues/187, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAGr8dpemuwBcIdcxuE4z_THCb136e5dks5sk5wvgaJpZM4Pglpo\n.\n--\nSent from Gmail Mobile\n\n-- \nSent from Gmail Mobile\n. Can you share a screenshot? \n\nI tested CountUp.js in Safari on iOS 11 on my iPhone and it looked fine.. Here you go :) https://github.com/xlsdg/vue-countup-v2\nI added a link in the README as well.. Yikes! Thanks for the heads up, on it. Fixed now in 1.9.3. . Did you test this without defining defaults.complete? Concerned it might throw an error.. Going to close, since this doesn't have an undefined check for defaults.complete. Feel free to update and i can reopen. Thank goodness @ALL does not ping everyone \ud83d\ude42\nPlease report Angular issues in the countUp Angular repo. \nIn your component, you need to import * as CountUp from 'countup.js'\nAs well, you need to include code to actually invoke CountUp. \nAgain, see countUp Angular repo. That repo has some issues but I will be pushing a fix to it soon. The main gotcha is the way you need to import CountUp. I will close this issue when I push a fix there.. Yes - installing via npm puts countUp in your node_modules folder. Run the install command with the --save option so that is listed as a dependency in your package.json, so the next person who downloads your repo and runs npm install will get it installed for them.\nThe import statement makes CountUp available to your component. The way modules work (node and es6) including a module in your bundle doesn't make globals, so you have to use import to get a reference to them.. Hi all, I just pushed an update over here: https://github.com/inorganik/countUp.js-angular2\nI tested and it's working great. Please see the README, it has all new instructions for usage.. This is something you can add pretty easily yourself:\n```js\nvar numAnim = new CountUp(\"SomeElementYouWantToAnimate\", 24.02, 99.99);\nvar myDelay = 1000; // 1 second\nsetTimeout(function() {\n    numAnim.start();\n}, myDelay);\n```. There are only 3 required arguments currently, and even though the post you cited says \"More than three or four parameters for a method\" constitutes code smell, that is not a good enough reason to introduce a major-breaking change.\nIt would cause a huge headache for not only people using the lib outright, but other libs/repos depending on it like the angularjs, angular and react libs (and more). They would all need to change. \nI agree non-required args should probably be refactored into the options arg, but the consequences are too great for such an arbitrary change.. Would be cool to do a 2.0 release which removes the polyfil and is all es6. Would totally include this improvement in that.... Sorry, I can't merge this. It would break for everyone who is passing their own custom easing functions, because the easing function signature is different with your change.\nIt's an easy fix for you though:\njs\nvar options = {\n    easingFn: function(t, b, c, d ) {\n        return jQuery.easing.whatever(null, t, b, c, d);\n    }\n}\nvar numAnim = new CountUp(\"SomeElementYouWantToAnimate\", 24.02, 99.99, options);. 150px is quite wide for a prefix like \"$\" or most use cases... plus it causes the options line to wrap. If you are passionate about this and want to submit another for like 25px I would merge. Thanks!. I tried running your issue through google translate:\ntitle: \"Can't be reused, can't change number style 25,000.00 can only do this\"\nmessage: \"Can not be reused, if I use a few 20 to 10 together, I also declare 20 variables one by one to write?\"\nI don't understand what your issue is. But you should have a separate instance of countUp for each animation.\n\u6211\u4e0d\u660e\u767d\u4f60\u7684\u95ee\u9898\u662f\u4ec0\u4e48\u3002\u4f46\u662f\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u52a8\u753b\uff0c\u60a8\u5e94\u8be5\u6709\u4e00\u4e2a\u5355\u72ec\u7684 countUp \u5b9e\u4f8b\u3002\n. Just FYI, prefix/suffix are meant for 1-2 character strings that get attached on either side of the number. For longer strings you should do:\njs\n<h1>So and so is <span id=\"countUpTarget\"></span> years old</h1>\nEither way is valid.. There isn't an animation callback, but I would suggest using requestAnimationFrame(), as CountUp does. If you are looking to do something at a specific interval like 100ms or 500s or an arbitrary value, use setInterval.. If you pass in a custom formatting function (options.formattingFn), it will get called on every frame with the current number value of the frame. \nCountUp still expects a valid target to be passed, but it should be easy to supply a hidden DOM element... would this work for your purpose?. I could never think of a use case for elastic easing in a counting animation. You want it to go past your target, then under it, then over it, then under it, then arrive at the target? . Hmm, I found this: http://lmgtfy.com/?q=angular2+scroll+spy. There is an angular 6 wrapper for this linked right in the README. Should work fine for you. This isn't a CountUp issue - you can look through the code and you won't find any calls to .focus() or window.onscroll because CountUp doesn't do anything with focus or scrolling. In a separate scroll-spy lib I did for AngularJS I integrated CountUp and you can see things can count regardless if they are in view or not - http://inorganik.github.io/angular-scroll-spy/\nMore than likely it's the waypoint scroll-spy code you've got there. Here's something that doesn't look right in your code - you are looping over this.element inside $waypoint.waypoint(function(direction) {, but then calling this.destroy(). Without seeing the rest of your code it's hard to troubleshoot. Can you recreate the issue in a jsfiddle or codepen? \nGoing to close this but I'm happy to help you troubleshoot.\n. Hmm, I couldn't reproduce. I ran the demo at http://inorganik.github.io/countUp.js/ on Safari and Firefox, with 200000000 as the start val and it worked fine. The demo creates a new instance every time you click \"start\". \nJust to make sure, in Firefox I copied from the code visualizer into the console:\njs\nvar demo = new CountUp('myTargetElement', 200000000, 5182, 0, 2.5, options);\nAs expected, it changed the startVal to 200000000. Then I did:\njs\ndemo.start();\nAnd it worked fine.\nCan you please copy all your js and html that is relevant to countUp and paste it here so I can see if anything else could be the issue? Likely your selector or how you are passing the values.. If you are displaying a 0 in the target element, it will remain until CountUp initializes. You might want to just leave the element empty, and init CountUp when the page inits.\nLet me know what you find so we can close this out. Hmm. I found this: https://github.com/webpack/webpack/issues/2675\nCan you explain more about your build setup? What version of webpack, ts vs js, things like that? \nIn demo.ts, (in same dir as countUp.ts) I am importing countUp and in the demo html I have a script tag for require and it's data-main attribute points to the transpiled demo.js. That's all I had to do and it works without errors. \nIt is a little different though now, because before 2.0, I used gulp-wrap-umd to wrap it in a UMD module and it exposed CountUp as a global. Now typescripts wraps it and it does it in such a way that CountUp is not exposed as a global. \nWonder if you could try something... in tsconfig.json, change the module to commonjs and then do npm run build, and try using the common js module wrapped file instead and see if that fixes it for you. Also check out that issue I linked from webpack and see if that helps. \nAlso thanks for the kind words :). Ok. Sounds like I need to change module to commonjs. . @hraboviyvadim could you please check if amd module wrapping works with webpack?. @hraboviyvadim thanks. was this with the module wrapping it has currently or another module wrapping?. Gotcha. Could you please try this: in tsconfig.json change module to \"amd\",\nthen run npm run build, and see if you are able to build your project?\nOn Tue, Feb 26, 2019 at 7:20 AM Vadym Grabovyi notifications@github.com\nwrote:\n\nI'm not sure if I understand your question correctly, but I used\ncountUp.js which I've got after changing \"module\": \"umd\" to \"module\":\n\"commonjs\" in tsconfig.json\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/inorganik/countUp.js/issues/210#issuecomment-467456055,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAGr8cSF9vIVt4swvsd6maPVb0NEppKIks5vRUK6gaJpZM4bJmbs\n.\n. In that case I would like to change the module wrapping to AMD and cut another release. Although we know commonjs works well with webpack, it's a node module wrapper and not optimized for browser usage... I was not able to use it in my demo with just requirejs. I'm sure if I googled and troubleshooted long enough I'd eventually figure out a way but it shouldn't be that hard for everyone else. AMD works well with just requirejs; in fact requirejs recommends AMD. So if it's compatible with webpack lets go with AMD. I'll close after I release with AMD.. 2.0.1 now wraps with AMD module.. Does this help at all? It seems like @hraboviyvadim was able to get his webpack setup to successfully include an AMD module. Maybe he can shed some light.... PRs welcome for anyone who wants to add documentation for including CountUp with webpack.\n\nhttps://webpack.js.org/api/module-methods/#amd. No worries I want it to be compatible for as many people as possible. For now you can simply pin the version at 1.9.3. FYI all, I switched the module (again, sheesh) to commonjs in v2.0.2. . It's the AMD module wrapping - how are you including CountUp in your project?. @mirkosantangelo in CountUp 2.0, CountUp is no longer defined as a global. You'll need to use a build tool to include it. I'm going to add a section on including CountUp... stay tuned for that.\nIn the meantime you can pin CountUp at 1.9.3 where it is still defined as a global.. Update: I experimented with multiple ways to include CountUp with all major module systems - UMD, AMD, and Commonjs and also tested different tools like Requirejs and Browserify. \nI settled on switching to a Commonjs module wrapping in 2.0.2 for two reasons:\n1. Super compatible with Webpack\n1. Super easy to bundle with Browserify if you don't want to deal with the complexity of Webpack\nI also added a section on Including CountUp in the README - it is quick and painless. I tested the steps on a test project and it was really quick and easy.  Hope this helps everyone.. Hey @ReeceKenney, change is hard, and I know updating CountUp has been a bumpy road. I've struggled with it quite a bit myself, having experimented with pretty much every module system, as well as brushing up on my typescript skills. Also, as I mentioned in another issue, I made a mistake in the \"including CountUp section\" where I forgot to add the new keyword in the example which caused a lot of people to have an error. \nHowever, I finally settled on the ES6 module wrapping in 2.0.4, and it really is super easy to implement (no build tools required!). But even better, it's future-proof- By the time the kids you are teaching are grown up it will be the standard everyone uses and knows. \nDespite all the headaches though, I think this repo is in a better place. Struggling through all these things - typescript, build systems, modules and tests - has helped me learn quite a bit, and I hope it can be an example for novice coders so they can see what a professionally-built project looks like. \n. Thanks!. Hmm, I tested the demo with the minified file and couldn't reproduce the error. Can you post your webpack config? I'm not sure what would cause this error.. Couple things you could try - \n\nuse the vue.js CountUp wrapper instead\ntry installing countup.js@2.0.0 (umd wrapper)\ntry installing countup.js@2.0.1 (amd wrapper)\n\n2.0.2 and above have a commonjs wrapper. Let me know..... did anyone try the vue.js countup wrapper as previously suggested?. Can everyone on this thread please give me details on your build? Webpack config, and any other relevant info. If I can't reproduce the error I can't fix it. Thanks. Oh boy. Well big time facepalm guys. \ud83d\ude02 I forgot to put the new in example usage. This fixes it:\njs\nwindow.onload = function () {\n  var countUp = new countUpModule.CountUp('countup', 2000);\n  countUp.start();\n}\nSorry about that. @Log1x thank you for the code, it helped me discover the error. FYI with yarn you can do yarn && yarn build. Also I updated the README.. FYI, if you upgrade to 2.0.4, it's now an ES6 module. Then it's simply:\n```js\nimport { CountUp } from 'countup.js';\nvar countUp = new CountUp('countup', 2000);\n```\nIf you want to stick with commonjs, you can lock in at v2.0.3.. It should work as \njs\nimport { CountUp } from 'countup.js';\nLet me know. I looked into it, and have not figured it out yet. I asked on SO: https://stackoverflow.com/q/55167994/591487. That's awesome, thanks for working on it! Since I re-wrote CountUp in typescript, the modules have been a HUGE headache. (Issue thread) Before 2.X, I used gulp-umd-wrapper which produced a UMD module and globally scoped CountUp which is very compatible for everyone... Typescript wrapped UMD module does not make CountUp global, which makes bad compatibility, especially with Webpack.\nSo I released again with an AMD wrapper, it seemed to be compatible with both requirejs and Webpack. But people still had issues. So I released again with commonjs module wrapping. I found it works well with Browserify and Webpack. \nI did some tests and was able to use es6 export successfully with vanilla js and webpack. Perhaps I'll issue another release.... I went ahead and released CountUp 2.0.4 as an ES6 module. Try it out.... Hi Chenxiaomian! Thank you for the PR. Right now this adds a duplicate of countUp.js to the root (it already exists in the dist/ folder). If you want to make changes, make them to countUp.ts, and run the build.\nHowever, if the purpose of your PR is to polyfill requestAnimationFrame, don't worry, countUp already has that covered! Just include countUp.withPolyfill.min.js and if rAF is not supported, it is polyfilled with setInterval. Please take a look and reconsider if this PR is needed, and please notice the contributing guidelines in the README. Thanks!. Had to remove this, since formattingFn is undefined. This breaks the demo.\n. we want to reference the passed options not the defaults defined in self.options because we are extending the defaults with whatever the user passes. ",
    "PDXIII": "Maybe the easing needs a little improvement, because it is quite extreme. And it should be a param, though you don't have to mess with the code!\n. Thanx!\n. ",
    "hhsnopek": "@inorganik updated to recent changes; all set to merge\n. The global vars you see equal the initial var, which is for each vendor browser. See mdn docs and take notice of the first line in the example. This doesn't overwrite at all, just chooses the correct vendor.\nAlso considering your thought of introducing 3 vars with only using var once is a great short hand in any language when creating multiple variables of the same type. No need for jshintrc as well, just use an editor like sublimetext with a linter, or hint plugin for this case.\n. @inorganik close this one?\n. MIT is nice\n. Done! :grinning: \n. @inorganik able to be closed :closed_book: \n. Comments are still viewable in countUp.coffee :wink: I'll do this once I get home, eta 30min till fix\n. @inorganik finished, sorry for the delay!\n. @inorganik I forgot to re-update the bower/component.json files, the file they link to should be countUp.min.js\n. https://github.com/inorganik/countUp.js/pull/16 complete\n. Well I do agree there is no right or wrong method, but without know that they can require the library using bower/component is a big advantage for me. I can just install the package like so, with bower/component, then easily require using commonjs or requirejs. Otherwise I have to add it manually, which personally I don't do ever anymore.\nI agree it should be clarified that countUp does support bower and component. After thinking about it the download option should be kept.\nThe \"fork on Github\" I use often when going to a site, it's much faster than going to github or google typing the project + github and finding it.\n. @inorganik We should probably mention you can countDown as well in the readme.md... It should be funny like\n\"We felt a little rebellious and made an arbitrary method to countDown\" or something haha \n. Lovely, would you be able to do an interactive rebase on the commit message, it's a little long haha\nAs well within git you can set your email/name and your commits won't appear as a ghost :ghost: \n. if you do an git rebase -i a411b19 you can then keep the commit, using \"reword\"\nThen just save it and push, if it doesn't like the push, force it\n. @jolyonruss this way the amendment(commit) & merge all are one commit, and it's clean :)\n. Check out the interactive-rebase docs. Within the editor should show you all the possibilities for that commit you did, in our case it'll look something like this:\n```\npick  a411b19 added a restart method, so if you've stopped you don't have to start from the beginning again\nRebase a411b19\n\nCommands:\np, pick = use commit\nr, reword = use commit, but edit the commit message\ne, edit = use commit, but stop for amending\ns, squash = use commit, but meld into previous commit\nf, fixup = like \"squash\", but discard this commit's log message\nx, exec = run command (the rest of the line) using shell\n\nIf you remove a line here THAT COMMIT WILL BE LOST.\nHowever, if you remove everything, the rebase will be aborted.\n\n```\nYou'll want to change pick to reword then change the commit message\nreword a411b19 added restart method\nquit vi(mine is nano) & save changes; push to github\ngit push origin/master --force\n. If it went through properly, it shouldn't show the past commits in here, just the new reword'ed one\nAlso after you close your editor, if you do git status; it should say you're behind master by 2 commits(or head), which means you'll have to force push to github\n. oh no >_<\nI would read over the documentation, otherwise you're ghost has appeared again! seems like git doesn't recongize who is committing to your fork(this could be the issue)\n. @inorganik I didn't even realize, I think this one is suppose(if i'm not mistaken), continue where you stopped last. I don't believe, at least the example(gh-pages) starts from the beginning again\n. :+1: \n. I personally would love it if you did, keeps commits/merges small. Not sure what @inorganik  thinks though\n. @inorganik sounds good :+1: \nI got this updating down pat!\n. They're the same, but my version is the compiled coffee. Which technically is the faster of the two, due to how it's compiled down to js. Otherwise the only difference is a variable d is doc, and self is just this(@ in coffee).\nI believe we should be using my version because of how it's compiled from coffee to js, I believe it's more efficient.\n- I got that plugin now, so much more efficient :grinning:  \nedit: After thinking it over with my friend, might just keep yours for minfied.\n. That is strange how your min.js is ~700 char's shorter than the compiled coffee version though\n. I'm taking back my statement of more efficient. :frowning: \nMine is up to date, the compiled coffee is different than your js file. How it compiles down is to proficiency of the compiler, it's generally faster than hand written js. \nClarity on js vs min.js - min.js is more efficient on loading and running because it is just one line, while normal js has tabs, linebreaks and comments to parse through. It's best to create your js then minify it for loading/running the script itself. \nCoffeescript is just shorthand javascript which compiles accordingly; soon Coffeescript II Redux will be complete and the compiler will produce better javascript\n. Reason for closing pr?\n. Use waypoints.js\nOn Feb 12, 2014 6:50 PM, \"niallthompson\" notifications@github.com wrote:\n\nhow could you get it so that the counting only started once the element\nwas in view?\nI.e if it was further down the page, if the user scrolled to it then it\nwould start counting up...\n\nReply to this email directly or view it on GitHubhttps://github.com/inorganik/countUp.js/pull/30#issuecomment-34937032\n.\n. @inorganik This can be closed, triggers shouldn't be apart of this :grinning: \n. Hmm but why have an exclusive trigger when you could just use events, callbacks, promises, or generators?\n. There are two ways I'd handle this\n1. I would use countUp to go to 70 as a break then re initiate it to go from 70 to X. This would have a stopping point though.\n2. We can just listen to our countup element as it counts and read the values as it changes. Which wouldn't have a break point and just continue. This method is it what you implemented.\n\nBoth of these work and method 2 can be implemented in various ways. It just depends on how you want to implement it.\nEDIT: I would use method 2, and just have an event listener which would trigger my function on what ever needs to occur. \n. @lumiscript, look at options within countUp.js\nNotice within the demo if you remove the decimal(in the options), no decimal is present in the counter\n. Haha - thank you!\nWe might want to upload countUp to all CDN's too :wink: \n. I'm going to get this working this week\n. haha don't worry it is\n. @inorganik what's your thoughts on making countup a class instead of a function?\n. Classes in any form will give the component a better structure and allow it to be more extendable. In Coffee, classes are easy to implement and when it is compiled down they become prototypes. \nWith component the module needs to be exported as so: module.exports = countup or we could do it like moment.js. I'd prefer the former with a prototype style class, but I can implement the latter if we stick with the function style class.\nAlso while I'm improving the readme, I thought we should create a compile process: Coffee -> JS -> minified JS using a makefile. Thoughts on this? (what minifier are you using btw?)\n. Actually my friend just showed me Hogan.js made by twitter, also the creators of bower... So twitter actually might be jumping off the bower boat - my only reason for keeping bower is that Polymer uses it. \n. Basically I want to remove the javascript file, and just have a build process from Coffeescript -> Javascript -> minified JS In coffeescript classes are declared like so: class CountUp. My previous thoughts on the class style in javascript has changed and I think we should just remove the javascript file and stick with coffeescript as our top file. I can add a makefile that compiles and minifies everything as well, allowing us to maintain organization. \n. Yeah - the javascript file will still contain the comments and everything, but our base would be the coffeescript file. We could use jsDoc's for comments and clarification within our code, and those would stay in there once compiled, and then once minified they would be removed. We'd be keeping all the comments and unsimplified version for those who like javascript over coffeescript\n. Alright so supporting component is just adding commonjs support which exports it as a module. I'll add this, it's a work in progress (getting back in the swing)\n. see #72\n. @inorganik Lets merge this in! :smile: \n. Well actually - it should say accessible by cdn... I'll leave that up to you on the wording tho\n. Whoops >_< I should of looked at that too, if you want I can make a PR for using it in your code. I was going to get #35 Component support working too\n. @inorganik so if we want to keep jsdelivr they have auto-updating, considering that the repo is already submitted I'll just add the update.json file which will take care of this for us. Thoughts?\n. :+1: Nice catch! :D\n. yupp - will do in my PR\n. see #72\n. :+1: \n. Yeah I noticed when I was working on making countup commonjs compliant. It's on my todo list\n. We shouldn't need this open anymore as realistically coffee users can still use our package and if they'd like to modify the source users should conform to owners style. You can close this out :grinning: \n. @inorganik this can be closed out I believe \n. Why make a jQuery version when countUp can be updated to allow classes and an config option to read data-attributes?\n. I think if we were to do anything like chaining and such we should just convert the library to ES6 then implement native ES6 promises. We could then make those part of the public api and allow chaining. We can then use babel to support es5 until all browsers support es6. \n. The problem is that all devs are relying on jQuery which we don't want to do. If I want to use chaining I shouldn't have to load jQuery just to do so. A majority of devs don't know the power of promises until they've used them as well. It's better than jQueries \"promise\" implementation and also native. Plus making jQuery a requirement means that we have to test  against new versions of jQuery.\nI'm fine with using jQuery, but if countUp started to need jQuery by default that would mean that countUp is no longer light and self sufficient. To me and other devs is one of the most appealing parts of a library, being light and self sufficient.\n. I was unsure what you'd like to include in the CHANGELOG.md so I left that open for your changes\n. @inorganik I just realized in #43 and #35 that I referenced the wrong #. Sorry about that! \n. ping @inorganik - lemme know if there's anything I can help clarify in this PR\n. @inorganik you some good points, let me clarify the changes.\n1. When updating the library you run npm run build which will build both versions (minified/unminified). This pulls out all the middle work you had to previously do, which was manually updating both.\n2. The countUp.js located at the root of the project is the source code. The other versions located in /dist is what the consumers/users should be using. As best practice you should separate the source code from the UMD wrapper. This is so that when someone does modify the source they don't tamper with the wrappers and the wrappers stay up to date.  What we really should do is move /countUp.js to /lib/index.js, but I neglect that because I don't find it necessary. \n3. AMD support != UMD support, UMD supports both AMD (like require.js) and Common.js (like browserify and component). The previous commit only supports AMD which doesn't support Common.js The gulpfile automates the wrapping of the UMD and keeps everything up to date. As stated in point 2 this is a best practice.\n4. The markdown changes are very minimal and arbitrary. This just cleans up, beautifies and tidy's up the markdown with tidy-markdown.\n. Anyone using the repo doesn't have to use gulp unless they're developing CountUp. Pardon me If i'm wrong, but I don't think you understand how downloading these libraries works with Bower, Component & NPM. We have .npmignore, bower.json and component.json which defines what will and won't be available when downloading the library. No one will get gulpfile.js, they will only get what we want them to have. No bloat found at all. Actually all the \"bloat\" I've added is really a convenience for developers. It makes it less time consuming for developers, they don't have to worry about screwing with UMD or having to build and uglify the project. They can now just gulp build and it will build both with UMD support.\nCommonJS vs AMD vs Global syntax: http://stackoverflow.com/a/14033636/1576404\nUMD: https://github.com/umdjs/umd#umd-universal-module-definition\n. @inorganik this is all set\n. this just requires a changelog update, if you could take care of that @inorganik \n. wait!\n. nvm haha - thought it should be 1.6.0 but since there's no breaking changes you're right\n. I could have also removed my commit that did a minor version bump in my PR :wink: \n. @inorganik I thought we both decided to change it in #43\n. :+1: sounds good\n. cc @inorganik \n. that's odd, is that the latest minified version?\n. looks like you never published it? https://gist.github.com/coolaj86/1318304\n. ",
    "mgan59": ":+1: \n. ",
    "ErtugKaya": "For instance if you are to show a fast going stock in an e-commerce site, it would be great to count down from a bigger number to smaller. This is really nice job and should have starting number setup, which may be lower or higher than the final number.\n. Thank you.\n. In case somebody will need triggers: #30 \n. To start I am not a javascript guy. I know a thing or two about it. So I believe there must be a better way than I implemented.\nI agree that a callback event passing current value may be better in general. For instance if you are filling a gauge synchronously.\nI used an event to trigger on predefined values because it will make things simpler to coder. Imagine you set countUp to count from 0 to 99.99 and you have a callback passing each values. If you want something to happen at 70 as in my fiddle, you need to check values in callback. But you won't get a perfect 70.00 instead you'll get 70 point something. Next you'll get 70 point something else. So you need to make sure to handle the value and make it trigger only once. This adds unnecessary complexity to coder. Instead I prefered those made in countUp code and trigger exact value once.\nNow I see that this should not be included in code. You are right about it. But I think someone will need callback on current value.\n. Thank you @HHSnopek \n. ",
    "livibetter": "I don't really mind, but your project already has quite some contributions by others.\n. I thought there were many contributors, the graph shows only three has commits.\nSo, if @lifthrasiir and @inorganik also agree using MIT, then it's done.\n. ",
    "noahbuscher": "I usually go with MIT for its readability and simplicity.\n. ",
    "alexcroox": "Probably, a technique known as easing. This isn't meant to be used as a timer, more of a nice animation of a number.\nIt can be disabled as explained in #1 \n. ",
    "jolyonruss": "Hey, have added my name/email and did this:\n$ git commit --amend -m \"Added restart method\"\nto rename the commit message.\n. Am having trouble getting git to do what you're asking :-|\nWhen I do git rebase -i a411b19 I get thrown into vi with options but no\nseeming way to edit the file and my google-foo is drawing a blank.\nOn 20 January 2014 14:49, HHSnopek notifications@github.com wrote:\n\n@jolyonruss https://github.com/jolyonruss this way the\namendment(commit) & merge all are one commit, and it's clean :)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/inorganik/countUp.js/pull/19#issuecomment-32765144\n.\n. Ok, I think I managed it, not sure if I'll need to create another pull request as the commit message is still the long one here.\n. Sorry, dude - been struggling to get rebase to work how you described, I thought I'd managed it, but it looks like I've just created another commit, with no changes in it.\n\nGAH!!!\nshakes fist in the air\n. Yes, reset starts from 0, restart begins where the counter was stopped.\n. Ok, I'm cool with that.\n. Added, it looks like my persona is associated with the commit now.\nDo you still want me to squash the commits?\n. That would be great if you could commit that Jamie.\nI seem to have tied myself in all kinds of knots trying to fix my git issues.\nWhen I'd been testing locally, I assumed that it was the easing function that was causing the value to jump so much.\n. ",
    "cisiqo": "Yes\uff0c you are right. I am an newer of javascript.\n. ",
    "thejamespinto": "I did read the form-me part :smile: \n@inorganik this countdown is awesome :smile: \n. ",
    "elidupuis": "Awesome, thanks!\nFor completeness, you should tag your versions with Git. That allows Bower to see all the versions you've released and enables easy installation of any of them! For reference: https://github.com/inorganik/countUp.js/releases\n. Thanks for the speedy update! Looking forward to cleaning up some code and using this instead!\n. ",
    "jackrugile": "Hey, no problem. Nah, in my case it was just so I could use a previously selected element stored in a var. For example:\nvar element = document.querySelector('.counter');\n// other code here\nvar numAnim = new countUp(element, 24.02, 99.99, 2, 1.5);\nOr just pass whatever selection code you want when starting things up:\nvar numAnim = new countUp(document.querySelector('.counter'), 24.02, 99.99, 2, 1.5);\nI just don't use IDs too often, so it was more of a convenience thing for keeping my code consistent. Just an idea, loving the plugin so far!\n. I can replicate this too, Jamie. The tab becomes unresponsive.\nI think I know why it's happening. I only get it to trigger this bug when the separator is empty, use grouping is set to true, and the value is over 1000. This makes sense, because the regex is only triggered when there are more than 3 digits.\nI think a fix for this could happen on line 149:\nif (self.options.useGrouping) {\n    while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + self.options.separator + '$2');\n    }\n}\nChange to:\nif (self.options.useGrouping && self.options.separator != '') {\n    while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + self.options.separator + '$2');\n    }\n}\n. ",
    "brentajones": "Indeed. There is an ID on the text element and the id is the target param.\nThe script is working otherwise, because I can swap out the text element of the SVG with a span in the HTML for testing, and it works great. That's why I thought perhaps it didn't support SVG.\n. I never did get this to work, but it's likely it has more to do with my inexperience than your code.\nHere's the project I was trying to get it to work with: https://github.com/stlpublicradio/20140204-bridgestats (demo).\nIn testing, I did remove the snap.svg js in case of conflicts, and added a text element to the SVG manually, but still couldn't get it to count up.\nThanks for your help, and the awesome script.\n. ",
    "niallthompson": "how could you get it so that the counting only started once the element was in view?\nI.e if it was further down the page, if the user scrolled to it then it would start counting up...\n. Perfect. Thanks\n. ",
    "lumiscript": "Thanks for the fast response, but when I do that I get this 3,753,027undefined00 \ninstead of 3,753,027\n. thanks it worked!!\n. ",
    "xavhan": "It could yes, it would be great but what i mean at first was the possibility to count (increment) with seconds(base60)/minutes(base60)/hours(base12/24)... instead of always base 10.\n. ",
    "anderssonma": "I think I'm in the same boat as @xavhan. Your script seems solid but I'd like to count minutes instead of base 10 integers. Basically 8.58... 8.59.. 9.00 etc, but with the same fast count animation.\n. ",
    "tomshaw": "Thought I tried bower install countUp and countUp.js? weird thanks.\n. Works fine. Thanks again. :+1: \n\nbower install countUp.js\nbower countUp.js#*          not-cached git://github.com/inorganik/countUp.js.git#*\nbower countUp.js#*             resolve git://github.com/inorganik/countUp.js.git#*\nbower countUp.js#*            download https://github.com/inorganik/countUp.js/archive/v1.1.0.tar.gz\nbower countUp.js#*             extract archive.tar.gz\nbower countUp.js#*            resolved git://github.com/inorganik/countUp.js.git#1.1.0\nbower countUp.js#~1.1.0        install countUp.js#1.1.0\n\n. ",
    "tylerfowle": "it crashes the demo for me also\nedit - make sure the ending number has 4 digits\n. Chrome: Version 34.0.1847.131 m\nno plugins\nwindows 8.1\nbrowser freezes, number doesn't pass 999, cannot click anything, \n. @inorganik hey thanks! No problem! You work fast! \n. ",
    "atari86": "I got it!\n``` Javascript\n\n\n    // set countUp options\n    var options = {\n        useEasing : true, // toggle easing\n        useGrouping : true, // 1,000,000 vs 1000000\n        separator : ',', // character to use as a separator\n        decimal : '.', // character to use as a decimal\n    }\n    var useOnComplete = false;\n    var useEasing = true;\n    var useGrouping = true;\n\n    // create instance\n    window.onload = function() {\n        // fire animation\n        // var element = document.querySelector('.jumbo');\n        var demo = new countUp('stat-counter-1', 1, 250, 2, 5, options);\n        demo.start();\n        var demo2 = new countUp('stat-counter-2', 1, 500, 2, 5, options);\n        demo2.start();\n\n        // display version (no hassling with markup!)\n        document.getElementById('version').innerHTML = 'v'+demo.version();\n    }\n\n\n\n```\n. ",
    "kmclaugh": "Hi Jamie,\nI would love to. I'll try to get to it later this week or early next week.\nThanks,\nKevin\nOn Wed, Jul 30, 2014 at 11:17 AM, Jamie Perkins notifications@github.com\nwrote:\n\n@kmclaugh https://github.com/kmclaugh care to fix those issues and\nresubmit?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/inorganik/countUp.js/pull/45#issuecomment-50638346.\n. Hi Jamie,\n\nI believe I have resolved the issues. I've also merged with the prefix/suffix update and verified the results so I believe my branch is ready to be merged into the main. Let me know if there's anything else I need to do.\nThanks\n. Hi Jamie,\nAny comments on this? Will you merge it into the main branch?\nThanks,\nKevin\n. Awesome. Thanks, Jamie! I've made extensive use of this library in my new\nsite so thanks for creating it.\nOn Thu, Aug 21, 2014 at 9:14 PM, Jamie Perkins notifications@github.com\nwrote:\n\nGoing to streamline the formatPrint() method a little bit but good work.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/inorganik/countUp.js/pull/45#issuecomment-53014166.\n. \n",
    "williamabbott": "Ok, I added to the printValue function to achieve, not ideal and probably not the best written code but I thought I would post it incase others wanted to add the same functionality:\n```\n// Print value to target\nthis.printValue = function(value) {\n    var width = 3;\n    var result = (value) ? self.formatNumber(value) : '--';\n// 1. make string\nresult = result + '';\n\n// 2. add padding of four 0's\nresult = result.length >= 4 ? result : new Array(4 - result.length + 1).join('0') + result;\n\n// 3. wrap digits with span tags\nresult = '<span>' + result.split('').join('<\\/span><span>') + '<\\/span>';\n\nif (self.d.tagName == 'INPUT') {\n    this.d.value = result;\n} else {\n    this.d.innerHTML = result;\n}\n\n}\n```\n. As the title says... \"Wrapping individual digits in span or div tags\" I am adding styling to the counter where I need fixed dimensions for each digit.\n. ",
    "mhbapcc": "Is this method still working?\n\nOk, I added to the printValue function to achieve, not ideal and probably not the best written code but I thought I would post it incase others wanted to add the same functionality:\n```\n// Print value to target\nthis.printValue = function(value) {\n    var width = 3;\n    var result = (value) ? self.formatNumber(value) : '--';\n// 1. make string\nresult = result + '';\n\n// 2. add padding of four 0's\nresult = result.length >= 4 ? result : new Array(4 - result.length + 1).join('0') + result;\n\n// 3. wrap digits with span tags\nresult = '<span>' + result.split('').join('<\\/span><span>') + '<\\/span>';\n\nif (self.d.tagName == 'INPUT') {\n    this.d.value = result;\n} else {\n    this.d.innerHTML = result;\n}\n\n}\n```\n\n. ",
    "425615730452": "Project already has a solution, my apologies.\n. ",
    "andrewboni": "My apologies- will submit a pull request shortly!\n. Hi, I've went ahead and published the Angular directive in its own repo- I figured it made more sense as a separate module than as part of the core of countUp.js. To anyone interested, you can find it here.\nThanks for the great work overall, @inorganik !\n. ",
    "KyleNeedham": "I created a new repo because, i believed our end goals where different. If you agree with the way i am taking the new mirror we can merge that into countUp. FYI i am in the process of updating the README and giving credit to countUp.\n. I would like to have the CoffeeScript as the main source and build the JS from that, however base on this discussion you had with @hhsnopek that is not what you want for countUp. I have also created a data-* API and merged decimals and duration into the options object.\n. Well that escalated quickly. This is clearly going nowhere so lets just leave it there.\n. Sure. That's done.\n. countUp.js already has AMD support use dist/countUp.js\n. ",
    "bweston92": "@inorganik what is your issue? You've licensed your countUp.js repository as MIT. Granted to distribute...\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software\nand associated documentation files (the \"Software\"), to deal in the Software without restriction,\nincluding without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software.\nhttps://github.com/inorganik/countUp.js/blob/master/LICENSE.md\n. Doesn't matter, you had it under MIT licence, its like telling Facebook off for making HHVM out of a PHP fork.\n. Not wondering anything just wanted to make sure you knew your repository was fully open source and with that arguments like these are pointless.\n. Well I'm just glad we're both not ginger :)\n. ",
    "chaintm": "Thnx inorganik, I will look into this and another and let you know, I really appreciate the input, my guess is I will be following threw with your code and going this rout. Will let you know!\n. ",
    "davidbani": "@inorganik might be good for tspan element as well. Sorry to raise the issue again.\n. ",
    "bumbu": "I found a workaround for this: using napa.\nIt allows installing packages that have no package.json. It is an ugly solution, but it worked for me.\n. ",
    "marcobiedermann": "If you got multiple elements which you want to call your method on and for chaining.\n. No. I want three elements with different numbers. I do not want to use three different IDs, instead I would like to call the countUp method on all elements with a class of .count-up for example. The different options should be passed with each elements data-attribute.\n. Nice, thanks @trevanhetzel \n. You are right. My problem is that JSHint marks this as warning. If you release it as a new major version it would be ok in my opinion.\n. ",
    "trevanhetzel": "For those like @marcobiedermann that want to animate multiple elements with different numbers without having to use different IDs, this does the trick (albeit not as performant as modifying the plugin itself to accept classes):\n```\n$.each($('.js-countup'), function () {\n    var count = $(this).data('count'),\n        numAnim = new CountUp(this, 0, count);\nnumAnim.start();\n\n});\n```\nThe markup then just needs a class and data attribute:\n<span class=\"js-countup\" data-count=\"97\"></span>\n<span class=\"js-countup\" data-count=\"73\"></span>\n<span class=\"js-countup\" data-count=\"67\"></span>\n. ",
    "ghost": "And how would you use the jQuery version with bower?. That won't work in my scenario and is not how bower is intended to be used.. Not a viable solution to introduce new stuff to get this to work. And still, not how bower is intended to be used.\nI know of 10 different ways to make it work, that's not the issue, the issue is that this doesn't work out of the box with bower.. Yes sir, indeed using bower. It worked fine roughly a 6 months ago? when I installed it, updating it yesterday made my entire app stop functioning :/ Had to revert to the \"old\" version.. ",
    "Abruptive": "bower install countUp.js --save and then include it from the root of the module (bower_components/countup.js/countUp-jquery.js). Then install it via bower as I indicated and then use a task runner like Grunt to copy it to your JS vendor directory. I use this to get everything from bower / npm to my assets/js/vendor:\nhttps://github.com/gruntjs/grunt-contrib-copy. Not sure what you mean by that.. Still, what do you mean by \"not how it's intended to be used\" ? \ud83d\udc6f\u200d\u2642\ufe0f \ud83d\ude04 . ",
    "digitalclover": "Thanks for the prompt response.  I was trying to save some time by finding an existing jQuery plug-in rather than writing custom script of my own.  I'll be fine with setting something up, but I appreciate your willingness.\nThanks again,\nJoshua\n. ",
    "julienstuder": "sorry about that, everything is ok, was an error on my side !\n. ",
    "raimie": "Hey Ignorik, \nI'm grateful for your help. \nI'd like to have 4 counters on a single page. \nWhen I only change the ID of the counter from 'demo' to 'demo1' to 'demo2', etc., it does not work.\nFor example, with two counters 'demo' and 'demo2', only the second counter will load. The first one on the page simply sits at '0' and does not count up. \nCan you please help me understand how to place multiple counters on a single page?\nBest, \nWalter\n. ",
    "Jonathan-Hickey": "I have the same issue as raimie.. Hi Inorganik, \nThanks for the quick reply. I was doing that... One small difference was that I was creating the CountUp instances on a response from a get request. \nI have moved the declarations outside the get, and the updates within response function.\nRegards,\nJonathan. ",
    "sahat": "This needs to be documented. Pretty useful method.\n. Thanks @aludvigsen !\n. ",
    "aludvigsen": "@sahat, I created a PR for the updated documentation and demo now.\n. ",
    "tzd": "Please check countUp.js bower package (1.5.2)\nWhen I try to install this package I got bower EMALFORMED error, it seems that you have fixed this in #74 \n. ",
    "mastermind1981": "Thank you it works \n. ",
    "vdecree": "I was just thinking the same so I did the above:\nvar dataListings = 267;\nvar dataListed = 13;\nvar dataUsers = 88;\nvar dataSold = 7;\nvar numAnim1 = new CountUp(\"stat--listings\", 0, dataListings, 0, 2);\nnumAnim1.start();\nvar numAnim2 = new CountUp(\"stat--listings\", 0, dataListed, 0, 2.5);\nnumAnim2.start();\nvar numAnim3 = new CountUp(\"stat--users\", 0, dataUsers, 0, 3);\nnumAnim3.start();\nvar numAnim4 = new CountUp(\"stat--sold\", 0, dataSold, 0, 3.5);\nnumAnim4.start();\nBut still getting the error. It's very strange as it's never given me problems before now!\n. Whoops apologies there, my eyes are melting looking at code all day long.\nSo it's now:\nvar dataListings = 267;\nvar dataListed = 13;\nvar dataUsers = 88;\nvar dataSold = 7;\nvar numAnim1 = new CountUp(\"stat--listings\", 0, dataListings, 0, 2);\nnumAnim1.start();\nvar numAnim2 = new CountUp(\"stat--listed\", 0, dataListed, 0, 2.5);\nnumAnim2.start();\nvar numAnim3 = new CountUp(\"stat--users\", 0, dataUsers, 0, 3);\nnumAnim3.start();\nvar numAnim4 = new CountUp(\"stat--sold\", 0, dataSold, 0, 3.5);\nnumAnim4.start();\nand the HTML:\n<div class=\"stat-counts\" id=\"stats\">\n  <div class=\"contain\">\n    <div class=\"stat-counts__item\">\n      <!-- icon -->\n      <div class=\"total stat--listings\"></div>\n      <div class=\"title\">Live Listings</div>\n    </div> <!-- end item -->\n    <div class=\"stat-counts__item\">\n      <!-- icon -->\n      <div class=\"total stat--listed\"></div>\n      <div class=\"title\">Live Listings</div>\n    </div> <!-- end item -->\n    <div class=\"stat-counts__item\">\n      <!-- icon -->\n      <div class=\"total stat--users\"></div>\n      <div class=\"title\">Live Listings</div>\n    </div> <!-- end item -->\n    <div class=\"stat-counts__item\">\n      <!-- icon -->\n      <div class=\"total stat--sold\"></div>\n      <div class=\"title\">Live Listings</div>\n    </div> <!-- end item -->\n  </div>\n</div>\nStill getting the error though \u2014 unless I'm missing some more over obvious mistakes on my part?\n. Oh god! How did I overlook that. Sorry sir\n. ",
    "marjss": "Hey, I am developing a dashboard, in which multiple values are calculated dynamically and i use this plugin to show some effective anime to the user so that he can guess the calculation by counts, So my issue is when i use a single countup and set a start value \"0\" and end value to some variable, it works fine but when i use multiple countups on a single page with start value \"0\", and in some the end value will be \"0\" then the countup doesnt work on all the counts..\n. ",
    "mikaelgson": "@hhsnopek any idea when this can be merged?\n. @inorganik Seems like the only conflict is countUp.min.js and thats bound to happen right?\n. I think i need to sync my fork and update my PR for this to work since the minified file is versioned.\n. ",
    "daggmano": "Looks like the #1.6 version still has this issue.  Master is correct, but grabbing 1.6 over bower still exhibits this behaviour.  Could you tag a #1.7 version?\n. Awesome!\n. Let me know if you need any documentation on using the new parameter. Should be fairly straightforward.\n. ",
    "AlexeiDarmin": "Getting the attribute value is easy, changing the attribute value via countUp is what I can't seem to do!\nAs countUp runs on endVal, endVal should take on the values within the range and this should be reflected in the HTML. In your fiddle you are just using it as an upper bound, and it is a fixed value.\n. Ahh, I didn't consider looking into the count function itself, I was too focused on finding an external way to do it. Yes this looks like it'd definitely work. \nI have another more makeshift solution which is to trigger a css transition of equal duration when start() is executed. So the number increases as does the bar width at the same time with no need for further calculations after the initial one. \n. ",
    "carylarcher": "I was wondering if there was a way of having a mixture of decimal and whole numbers. So far all I've been able to do is have all to one decimal point or none.\n. For example, I have three stats showing up in a row. Say, 50%, 40%, 99.6%. The last one counts up to be 100% which I don't want. \nWhen I change the parameters to show one decimal point as expected all the numbers are changed. For example, 50.0%, 40.0%, 99.6%. I don't want this either! I want some numbers to one decimal place and some to be whole. I'm sorry if I'm barking up the wrong tree here.\n. I've tried adding some javascript to check if the value has a \".\" in the string equivalent of the value  and have console.log(options) to check it is setting the right values here is the values of options that i have used but it still counts to 100\ndecimal: \".\"\ndecimals: 1\nprefix: \"\"\nseparator: \",\"\nsuffix: \"\"\nuseEasing: true\nuseGrouping: true\nhere is the call to CountUp\nvar countUpElement = new CountUp($(\"span.value\",this).get(0), 0, dataEndValue, 0, 2.5, options);\ndataEndValue holds 99.6 according to console.log()\n. ",
    "IrishAdo": "We found the issue number of decimals is not supposed to be in the options object but the 3rd last parameter.\n. ",
    "GeGeek": "Thanks, i found this : https://remysharp.com/2009/01/26/element-in-view-event-plugin it's working great :)\n. ",
    "Awedbyacumen": "Okay, worked perfectly! Thank you very much :)\n. ",
    "tscok": "Problem is the countUp.min.js file doesn't seem to have been affected by the updates in 1.6 \n. Ok, thanks :+1: \n. ",
    "Vivihung": "+1 publish to npm. \nAny plan?\n. Yeah! Thanks for all the effort!!\n. Just found this change will break scrollSpyEvent scenario\n$scope.$on($attrs.scrollSpyEvent, function (event, data) {\n                            if (data === $attrs.id) {\n                                animate();\n                            }\n                        });\nAny better suggestion about not using id but can support scrollSpyEvent?\n. Usage example\nHtml\nhtml\n<span count-up\n           end-val=\"number\"\n           decimals=\"numberDecimal\"\n           duration=\"numberAnimationDuration\"\n           reanimate-on-click=\"false\"></span>\nJavaScript\njavascript\n$scope.number=12;\n$scope.numberDecimal=1;\n$scope.numberAnimationDuration=3;\n. I hit errors when run gulp. Trying to resolve it. Any hint will be helpful.\n[12:45:27] Warning: gulp version mismatch:\n[12:45:27] Global gulp is 3.9.0\n[12:45:27] Local gulp is 3.8.11\n[12:45:28] Using gulpfile ~\\documents\\GitHub\\countUp.js\\countUp.js\\gulpfile.js\n[12:45:28] Starting 'clean'...\n[12:45:28] Finished 'clean' after 3.02 ms\n[12:45:28] Starting 'umd'...\nstream.js:74\n      throw er; // Unhandled stream error in pipe.\n      ^\nError\n    at new JS_Parse_Error (eval at  (C:\\Users\\vivihung\\documents\\GitHub\\countUp.js\\countUp.js\\node_modules\\gulp-uglify\\node_modules\\uglify-js\\tools\\node.js:22:1), :1526:18)\n    at js_error (eval at  (C:\\Users\\vivihung\\documents\\GitHub\\countUp.js\\countUp.js\\node_modules\\gulp-uglify\\node_modules\\uglify-js\\tools\\node.js:22:1), :1534:11)\n    at croak (eval at  (C:\\Users\\vivihung\\documents\\GitHub\\countUp.js\\countUp.js\\node_modules\\gulp-uglify\\node_modules\\uglify-js\\tools\\node.js:22:1), :2025:9)\n    at token_error (eval at  (C:\\Users\\vivihung\\documents\\GitHub\\countUp.js\\countUp.js\\node_modules\\gulp-uglify\\node_modules\\uglify-js\\tools\\node.js:22:1), :2033:9)\n    at unexpected (eval at  (C:\\Users\\vivihung\\documents\\GitHub\\countUp.js\\countUp.js\\node_modules\\gulp-uglify\\node_modules\\uglify-js\\tools\\node.js:22:1), :2039:9)\n    at semicolon (eval at  (C:\\Users\\vivihung\\documents\\GitHub\\countUp.js\\countUp.js\\node_modules\\gulp-uglify\\node_modules\\uglify-js\\tools\\node.js:22:1), :2059:43)\n    at simple_statement (eval at  (C:\\Users\\vivihung\\documents\\GitHub\\countUp.js\\countUp.js\\node_modules\\gulp-uglify\\node_modules\\uglify-js\\tools\\node.js:22:1), :2239:73)\n    at eval (eval at  (C:\\Users\\vivihung\\documents\\GitHub\\countUp.js\\countUp.js\\node_modules\\gulp-uglify\\node_modules\\uglify-js\\tools\\node.js:22:1), :2112:19)\n    at eval (eval at  (C:\\Users\\vivihung\\documents\\GitHub\\countUp.js\\countUp.js\\node_modules\\gulp-uglify\\node_modules\\uglify-js\\tools\\node.js:22:1), :2072:24)\n    at block_ (eval at  (C:\\Users\\vivihung\\documents\\GitHub\\countUp.js\\countUp.js\\node_modules\\gulp-uglify\\node_modules\\uglify-js\\tools\\node.js:22:1), :2352:20)\n. I figure out the error comes from my code change which uses ES6 \"let\".\nI'm not sure if you would like to update gulp config to support ES6.  [Reference link] \nSo I just replace it with \"var\" for now.\nI will close this request and squash all my commits into one change. Then send another pull request.\nHere is another reference about how to investigate gulp task errors. Node will hide the original error with helpless message shown above, with this code in gulpfile.js, you can see the error details (filename, line#) in console.\n[How to debug gulp build errors]\n. In Readme, you said it's default to 2. So I changed it to make it align with documentation and countUp.js\n:)\n. ",
    "preco21": "+1 I hope solved well.\n. ",
    "srk9": "I looked into removing it but npm says its a bad idea because nobody will\nbe able to use the same name ever again. You can see this yourself by\ntrying to delete a project. If there is a work around please let me know, I\nwould like to help you if I can.\nOn Tue, Dec 22, 2015 at 1:24 PM Plusb Preco notifications@github.com\nwrote:\n\n+1\nI hope solved well.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/inorganik/countUp.js/issues/90#issuecomment-166696458\n.\n\nWarmest Regards,\n\nDustin Gelegonya\n. ",
    "FlorentD": "Thank you !! :+1: :-)\n. ",
    "Shadowstep33": "Well, it worked in Chrome and Firefox... Only place it doesn't work is IE. I am using bitwise operators and parseInt, so maybe those don't work in IE. Or maybe IE just can't parse numbers.\nI saw in the code '--' is returned when a NaN is supplied/parsed. I was in IE11 btw. Maybe I have an old version of CountUp or something. I pulled it a few months ago.\nBut in case someone else sees this and agrees with me that there is a problem in IE, this seemed to be a reliable fix:\nvar goldNumber = new CountUp(\"gold-number\", (lastGold | (parseInt(data.character.Gold) | 0) ), parseInt(data.character.Gold), 0, 1, options);\n                goldNumber.start(function(){\n//Possibly check for $(\"#gold-number\").text() == \"--\" if you want\n                    $(\"#gold-number\").text(data.character.Gold).digits();\n                });\n. ",
    "xiangming": "@masterpowers \nTry remove #\nrfn_bonus = new CountUp(\"rfn_bonus\", 1, this.rfnbonus, 0, 6, options);\n. ",
    "pantrif": "I totally agree with you to keep countUp lib as dependency.\nI followed your suggestion but in order to make data-endval to work seperatelly for each element i had to store an array of instances. I havent been able to find time to create demo but here how it works:\nStart:\njavascript\n$(\".countup\").CountUp(\"start\", 10, 162, 0, 1.5,{useEasing:true,separator:\"\"});\nIf data-endval has been set for an element it would not take into account the endVal argument.\nWith callback:\njavascript\n$(\".countup\").CountUp(\"start\", 10, 162, 0, 1.5,{useEasing:true,separator:\"\"},function(){alert(\"done\")});\nUpdate with argument:\njavascript\n$(\".countup\").CountUp(\"update\",1000);\nOr you could do something like this if you want only one element:\njavascript\n$(\".countup\").first().data(\"endval\",1000);\n$(\".countup\").CountUp(\"update\");\nRest of the methods:\njavascript\n$(\".countup\").CountUp(\"pauseResume\");\n$(\".countup\").CountUp(\"reset\");\nTest it yourslf to tell me if i missed anything.\nBest,\nLeonidas\n. Hello, no problem. What needs to be fixed?\n. I have already implemented this behaviour. Just accept the pull request and you are set.\nhttps://github.com/pantrif/countUp.js/blob/master/countUp.jquery.js\n. Ok Jamie I think we are ok now! After you test it make the merge (i say in a previous post how to use options).\n. Hello Jamie, are you planning to accept this pull request?\n. Hello, unfortunately right now i have not the time to put more effort on this. So feel free to reject this pull request. \nBest,\nLeonidas\n. ",
    "notflip": "Sorry didn't read well enough! Delete me pls\n. ",
    "anoakie": "Sure!  Sorry for not reading the Contributing.md earlier.  I just amended pushed the gulp'd version. \nIt looks like my patch might need a little more work to make the decaying count work nicely with it, which I can do if you might accept this.  \nI was able to test it by running this on the test page:\njavascript\nvar options = {\n\u2003\u2003useEasing : true,\n\u2003\u2003useGrouping : true,\n\u2003\u2003separator : ',',\n\u2003\u2003decimal : '.',\n\u2003\u2003prefix : '',\n\u2003\u2003suffix : ''\n};\nvar demo = new CountUp(\"myTargetElement\", 0, 3, 1, 1, options);\nsetTimeout(function() { if ( document.getElementById(\"myTargetElement\").innerHTML == 3 ) throw 'Fail - Saw 3 too early'; else console.log('Test 1 passed') }, 950);\ndemo.start();\nsetTimeout(function() { if ( document.getElementById(\"myTargetElement\").innerHTML != 3 ) throw 'Fail - Saw 3 too late'; else console.log('Test 2 passed') }, 1050);\nThis test is kind of janky because I'm using timeouts, but you get the idea.\nTo see it more visually, run it with the following:\njavascript\nvar options = {\n\u2003\u2003useEasing : true,\n\u2003\u2003useGrouping : true,\n\u2003\u2003separator : ',',\n\u2003\u2003decimal : '.',\n\u2003\u2003prefix : '',\n\u2003\u2003suffix : ''\n};\nvar demo = new CountUp(\"myTargetElement\", 0, 3, 0, 10, options);\ndemo._printValue = demo.printValue;\nvar startTime = new Date().getTime();\ndemo.printValue = function(value) {\n        self = demo;\n        var result = (!isNaN(value)) ? self.formatNumber(value) : '--';\n        result = result + ' - ' + ((new Date().getTime()) - startTime) + 'ms';\n        if (self.d.tagName == 'INPUT') {\n            this.d.value = result;\n        }\n        else if (self.d.tagName == 'text' ||\u00a0self.d.tagName == 'tspan') {\n            this.d.textContent = result;\n        }\n        else {\n            this.d.innerHTML = result;\n        }\n}\ndemo.start();\nYou should see it hit 3 when it counts to 10000ms\n. ",
    "clabnet": "It should be remove also bower.json (not .bower.json) or at least sync the two files.\n. Ok Jamie, I have submitted my PR.\nThank's, bye\nClaudio\nIl 13/03/2017 23:54, Jamie Perkins ha scritto:\n\nhey there @clabnet https://github.com/clabnet, can you please make a PR?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub \nhttps://github.com/inorganik/countUp.js/issues/122#issuecomment-286268997, \nor mute the thread \nhttps://github.com/notifications/unsubscribe-auth/AFyVmqpVfw9h1cI_tsZ_dKlACQqcABS-ks5rlckQgaJpZM4J5bkd.\n\n\n. ",
    "Jaskey": "Thank you, as a new user, since it is not demonstrated at the doc, I don't know these properties are public properties and can be set/update directly  like this way without public method,\nI will try. Thank you.\n. ",
    "jgranstrom": "@inorganik no problem, it's now up to date with upstream\n. ",
    "mmieluch": "Glad to be of help.\n. No problem. I could do it for you and send you a PR tomorrow.\n. No problem, I see how the textarea could be confusing. Cheers!\n. ",
    "mouthzipper": ":+1: \n. ",
    "Gorden-Wang": "One day , I use this below \nvar options = {\n\u2003\u2003useEasing : true, \n\u2003\u2003useGrouping : true, \n\u2003\u2003separator : ',', \n\u2003\u2003decimal : '.', \n\u2003\u2003prefix : '', \n\u2003\u2003suffix : '' \n};\nvar demo = new CountUp(\"myTargetElement\", 0, 16.4, 2, 2.5, options);\ndemo.start();\nit end with 16.39 \u3002\n. ",
    "oodzchen": "It can be used to create other animation, such as change the color of text or background-color of elements, and when the animation must synchronize with the changing number.\nOK, I just found out that what I need can be done with the formatting function. Maybe my additions is unnecessary, but I still want to say that my code won't break the script because there is a check.\n. ",
    "jackmcpickle": "Awesome thanks. Also noted that you have 2 npm modules under different names? \nhttps://www.npmjs.com/package/countup\nand \nhttps://www.npmjs.com/package/countup.js (new?)\nnot sure if you can delete one or and a depreciation notice?\n. ",
    "ACollectionOfAtoms": "Yup, bower doesn't recognize countup.js as a valid package. \n\n. ",
    "mattgarkusha": "Yea, my fix doesn't rely on indexes and just uses the element itself as the\nargument for passing into the init method. It's is currently working in my\nproject!\nOn Mon, May 9, 2016 at 1:07 PM, Jamie Perkins notifications@github.com\nwrote:\n\nThanks! I accidentally committed that file before I even tested it!\nAssuming it works then with your fix?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/inorganik/countUp.js/pull/117#issuecomment-217925886\n. \n",
    "sushant357": "Thanks Boss its done. Really thanks.\nOn Fri, Jun 3, 2016 at 8:22 PM, Jamie Perkins notifications@github.com\nwrote:\n\nYou would need to just edit the formatNumber function. split the string\nit outputs and wrap each digit in a span, which you can style.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/inorganik/countUp.js/issues/119#issuecomment-223600783,\nor mute the thread\nhttps://github.com/notifications/unsubscribe/AE7SGFm8cdtRqeJGCPkzzi9b449T8Kr_ks5qID-wgaJpZM4ItXPV\n.\n\n\nThanks & Regards,\nSushant Jadhav\nUI Developer\n. ",
    "unterweltler": "@sushant357 \nif got the same problem - could you please share your code with us?\nThx\n. ",
    "WangJi": "I don't quite understand. There won't be any side effect of adding a UMD wrapper for the module. People can import it either by the Angular Seed provided way(which is plain script tag) or by AMD module loader.\nWhy do the cut.\n. ",
    "jeerbl": "Actually I analysed how your code is generated and I noticed that countUp.js is copied in the dist folder and some code is added so that it can be imported or required.\nLet me close this.\nThanks,\nJerome\n. ",
    "HeyDaniyar": "I meet the same situation when I used webpack to import the countUp.js, it shows that \"counUp is not defined at createCountUp\" in the console error, can you provide any solution to this issue? Thanks,\nDaniyar. @inorganik Thanks for replying. \nI'm very sure that I imported the countUp.js file from the dist folder, and I also imported the angular-countUp.js, injected the 'countUpModule'. However, the error is still there: \"CountUp is not defined at createCountUp...\" :(\nThanks,\nDaniyar. ",
    "thasmo": "Using the es-module syntax import CountUp from 'countup.js'; doesn't seem to work.. So, it should work actually?. Indeed, that seems to work now.. ",
    "kapoko": "@thasmo's solution works for me. ",
    "adityakrshnn": "This is what I got in console\nUncaught ReferenceError: angular is not defined\n    at file:///D:/WT/project/js/angular-countUp.js:136:4\nPlease help\n. I want to use scroll-spy-event=\"elementFirstScrolledIntoView\", that requires angular-count-up.js right?\nBut even with regular countUp I can't see the counter.\nwhat should I do?\n. Thank you for your help\n. ",
    "ThYpHo0n": "The other PR just added a definition file for the new directive for Angular 2 not for CountUp.js itself. This PR would give Typescript support for the project for everyone who doesn't use Angular 2.. ",
    "Sparker73": "same here, github repo differs from the npm package. ",
    "unamix": "Please update the npm package. ",
    "vigie": "Hi @Ionaru I'm afraid I only tested this in an app where Systemjs was the loader and Angular was RC4. To fix the first issue, the module parameter in tsconfig.json should be changed to either CommonJS or UMD.\nFor the second issue, for now you can just list the directive in the declarations property of your app module, instead of the old directives property. I have tested this with Angular 2.2.4 and it is working (again, with SystemJS as the loader). Of course the proper fix is to create an NgModule and export the directive from there.\nTo summarize: a change should be prepared that does the following:\n\nChanges the module format in the tsconfig.json\nUpdates the package.json peerDependcies to make the supported version of Angular expicit (^2.0.0)\nCreates an NgModule and exports the directive in the regular way\nUpdates the README documentation to state that the above module should be imported into the AppModule, rather than explicitly declaring the contained directive.\n\nI will certainly try to get to this change personally, but it might be a couple days so feel free to beat me to it.... @wuzhouyang Can you confirm the version of countup.js you are using and also that you are separately including the countup.js file as an external global dependency, as documented in the README?. > I use webpack and before bootstrapping I included this:\nimport 'countup.js/countUp.js';\nThen in a module I added this:\nimport { CountUpModule } from 'countup.js/countUp.module';\nYes, this is exactly how the README instructs the usage, except you should include the transpiled file from the dist/ folder and not the typescript source. I think this should fix the tslint errors also.\n\nprovidePlugin is plugin for webpack making avaialable variables globally\n\n@szykov Can you confirm you have this working now in a webpack environment? Could you perhaps share how you configured the above plugin to solve the problem?. @inorganik It's not clear to me if there is any issue here, as per my last comment.\nAs documented in the README, you must make sure the Countup object is available to your application as a global.\nThis needs to be the case irrespective of how you bundle or load modules. The Angular directive is a simple wrapper around the core technology, which happens to be a javascript global.\nI have never used webpack, but according to @szykov's comment there is a plugin for webpack called ProvidePlugin that is able to provide globals. People using webpack should try using that, or similar.\nI will try to find time to personally verify the webpack scenario, hopefully by this weekend.\nIn the meantime I would recommend closing this issue, unless @szykov or @hameltomor have experienced any errors when following the instructions? I have been using this directive for a while now and never encountered any issues.. I'll try to have a look at the angular-cli use case this week. Other eyes on this also very welcome.. ",
    "jeffreydinh": "I'm sorry I forgot to mention not using scroll, the entire dashboard will be on one page and it is transitioning with visibility:hidden to visibility:visible. I've tried it with the angular-scroll-spy, but it doesn't work when the dashboard is not scrolling. We are using the angular module version where we didn't have to use start() ?. ",
    "ezatla": "how can I use Scroll Spy?. ",
    "wuzhouyang": "so many errors likes \n\n. ",
    "TobiasFeld": "Same here :(. Hi maybe this is more information for you, it looks like this is a webpack issue.\nWebpack log:\nWARNING in ./~/countup.js/dist/countUp.module.js\n15:24 Critical dependency: require function is used in a way in which dependencies cannot be statically extracted. ",
    "szykov": "I use webpack and before bootstrapping I included this:\nimport 'countup.js/countUp.js';\nThen in a module I added this:\nimport { CountUpModule } from 'countup.js/countUp.module';\n...\n@NgModule({\n    imports: [..., CountUpModule],\n    ...\n})\nError disappeard but now another one appeard:\n\nEXCEPTION: Error in ./AboutComponent class AboutComponent - inline template:81:83 caused by: CountUp is not defined\n\nIt imports CountUp.js but not in a global scope :\\\nupdate:\nprovidePlugin is plugin for webpack making avaialable variables globally. Also I noticed that during webpack compilation tslint loader raises some errors:\n```\n\nERROR in ./~/countup.js/countUp.module.ts\n(11,13): error TS7005: Variable 'CountUp' implicitly has an 'any' type.\nERROR in ./~/countup.js/countUp.module.ts\n(91,4): error TS7008: Member '_countUp' implicitly has an 'any' type.\nERROR in ./~/countup.js/countUp.module.ts\n(95,27): error TS7006: Parameter 'sta' implicitly has an 'any' type.\nERROR in ./~/countup.js/countUp.module.ts\n(95,32): error TS7006: Parameter 'end' implicitly has an 'any' type.\nERROR in ./~/countup.js/countUp.module.ts\n(95,37): error TS7006: Parameter 'dec' implicitly has an 'any' type.\nERROR in ./~/countup.js/countUp.module.ts\n(95,42): error TS7006: Parameter 'dur' implicitly has an 'any' type.\n```\n. @vigie I can't tell for sure but when I tried how you suggested I most probably had the same issue as people above. Anyway, I believe I need to try it on a clean fresh project with webpack when I will have a time. And in fact I wasn't feeling right about making countUp.js available globally, at least that I use angular with a lazy loading, so I stopped trying for now. \n. \n",
    "hameltomor": "Guys, who knows how fix it?. ",
    "JWesorick": "I'm still having this issue with a fresh Angular 4 app. I've included the CountUpModule in my app. \n```\n...\nimport { ClaimModule } from './claim/claim.module';\n@NgModule({\n  declarations: [\n    AppComponent,\n  ],\n  imports: [\n    ...\n    CountUpModule\n  ],\n...\n})\nexport class AppModule {}\n```\nAnd I've added\nimport 'countup.js/dist/countUp';\nimport 'countup.js/dist/angular-countUp';\nto polyfills.ts. And the error in the console:\ncountUp.module.js:15 Uncaught Error: Cannot find module \".\"\n    at webpackMissingModule (countUp.module.js:15)\n    at webpackJsonp.../../../../countup.js/dist/countUp.module.js.Object.defineProperty.value (countUp.module.js:15)\n    at Object.../../../../countup.js/dist/countUp.module.js (countUp.module.js:21)\n    at __webpack_require__ (bootstrap bde483c5bce87e16b45c:54)\n    at Object.../../../../../src/app/app.module.ts (app.config.ts:5)\n    at __webpack_require__ (bootstrap bde483c5bce87e16b45c:54)\n    at Object.../../../../../src/main.ts (environment.ts:8)\n    at __webpack_require__ (bootstrap bde483c5bce87e16b45c:54)\n    at Object.2 (main.bundle.js:3825)\n    at __webpack_require__ (bootstrap bde483c5bce87e16b45c:54)\nwebpackMissingModule @ countUp.module.js:15\nwebpackJsonp.../../../../countup.js/dist/countUp.module.js.Object.defineProperty.value @ countUp.module.js:15\n../../../../countup.js/dist/countUp.module.js @ countUp.module.js:21\n__webpack_require__ @ bootstrap bde483c5bce87e16b45c:54\n../../../../../src/app/app.module.ts @ app.config.ts:5\n__webpack_require__ @ bootstrap bde483c5bce87e16b45c:54\n../../../../../src/main.ts @ environment.ts:8\n__webpack_require__ @ bootstrap bde483c5bce87e16b45c:54\n2 @ main.bundle.js:3825\n__webpack_require__ @ bootstrap bde483c5bce87e16b45c:54\nwebpackJsonpCallback @ bootstrap bde483c5bce87e16b45c:25\n(anonymous) @ main.bundle.js:1\nclient?ffdb:41 [WDS] Warnings while compiling.\nclient?ffdb:106 ./~/countup.js/dist/countUp.module.js\n15:24-31 Critical dependency: require function is used in a way in which dependencies cannot be statically extracted. ",
    "tskweres": "same issue as @JWesorick \n. I just ignored the Angular2x module and use CountUp directly:\nimport * as CountUp from 'countup.js/dist/countUp';\nthen using pure CountUp works just fine. ",
    "dolapci": "If you working in vscode and import plugins automatically (like Ctrl+.), sometimes it will generate \nimport { Some } from \".\" .It occurs if you import modules to current file from file which in same directory. Because of that if you find this unrelevant import, you can fix it.. ",
    "iamandrewluca": "Hi @inorganik, can I get some feedback here?  Thanks! :smiley: . I will review it today. @inorganik I loop through default options because only this are needed for the extension. And if default option exists in user option I put it in defaults. Problem is that if user passes a bigger object, extension have to loop through all passed properties, instead only for defaults.. ",
    "pslean": "@inorganik Please help to review the code. thanks.. In my user-case, I want to use images to show my numbers. If I pass the formattingFn to format my number, I will do the same thing in your self.formatNumber funtion firstly, and then change my numbers to images in css. After we get the result from the formattingFn function, we can use the udfNumber function to format the result. Or I will do duplicate work in the self.formatNumber. This is my code:\n\nIn this case, I am using the default formatNumber function to format my numbers and then use the udfNumberFn to change them to images.. ",
    "mizzos": "Your example is suitable for Angular applications. I don't use Angular for my projects.\nI must confess the event elementFirstScrolledIntoView is pretty good and exacly what I need.\nHowever, my self-made scroll event listener fires every time the page is scrolled:\njavascript\nvar oldFunction = document.onscroll;\n        var newFunction = function () {\n            counterFunction();\n            if (typeof( oldFunction ) == 'function')\n                oldFunction();\n        };\n        document.onscroll = newFunction;\nIn counterFunction I need to be able to check whether the counter is still in the process of counting and the desired element is in the viewport:\njavascript\nfunction counterFunction() {\n    if ((!counterCustomers.isCounting) && isScrolledIntoView($(\"#counterCustomers\"))) {\n        counterCoustomers.start();\n    }\n}\nThat would be my usecase.. ",
    "jculverwell": "I am getting this too.  Using the latest verison on the angular-cli I am getting this warning:\nWARNING in ./~/countup.js/dist/countUp.module.js\n15:24-31 Critical dependency: require function is used in a way in which dependencies cannot be staticall\ny extracted. I suspect this maybe something to do with the Angular-CLI switching to AOT by default. Thank you, much appreciated\nOn Thu, Aug 24, 2017 at 9:19 AM, Jamie Perkins notifications@github.com\nwrote:\n\nHi all. Great news! The Angular 2 module for CountUp.js has moved into\nits own repo https://github.com/inorganik/countUp.js-angular2 as of\nv1.9.0.\nIt has it's on npm package now as well, countup.js-angular2.\nPlease make sure you update your projects, and please test to make sure I\nproperly set it up. I'm not currently using angular ^2 so I have not tested\nyet. Feel free to make any PRs necessary over there and I'll merge them\nASAP.\nClosing this issue, as this repo no longer contains angular 2 files.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/inorganik/countUp.js/issues/154#issuecomment-324489242,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAfqUsI9SIP1VxaNV6_5EnQ31Y5s3jdRks5sbLOUgaJpZM4Md5L-\n.\n. \n",
    "japalo": "Any ways of fixing this? I am having the same issue.\nI am using angular-cli.. Would very much love to, but i sadly lack the knowledge. If we do have white knight among us that can have a go at it and finds the solution i would very much appreciate to discuss what the solution is.. @AndreasGassmann I ended up using a different package :(. ",
    "hughred22": "I am having this issue as well. Please help to get this working again. Thanks! . ",
    "KevinBeckers": "Same issues. ",
    "alexreynier": "Has anyone figured this out by any chance? :-). ",
    "fisherspy": "same issue. ",
    "yanai101": "same issue . ",
    "AndreasGassmann": "I have the same error and tried to get it working for quite some time, but sadly I wasn't successful. Did anyone find a workaround?. I'm using https://github.com/izupet/angular2-counto now, but it just doesn't look as nice as this package :(.. ",
    "cbaxter713": "I'm having the same exact issue.  Any updates?\nGetting this error as well from the angular-cli:\nWARNING in ./~/countup.js/dist/countUp.module.js\n15:24-31 Critical dependency: require function is used in a way in which dependencies cannot be statically extracted\n. ",
    "brookstudio": "@cbaxter713 Same issue for me. But I make a not smart change on the countUp.module.ts just copy the code of declaration of CountUp from countUp.js into it and replace the \"declare var CountUp\". Now it work for me. here is the repo https://github.com/brookstudio/countUp.js and demo source here https://github.com/brookstudio/countUpDemo. check the demo here https://github.com/brookstudio/countUpDemo\n. ",
    "lukaszsamson": "No, I init it with a  valid number.\nI have the element inside an *ngIf=\"condition\". The failing call to reset() happens when Angular re-renders the element after the sequence\ncondition = false\ncondition = true\nI hope it helps.. //condition = true\ncreateCountUp -------\nstarVal false 0\nendVal false 2.8828150\n//condition = false\n...\n//condition = true\ncreateCountUp -------\nstarVal false 2.8828150\nendVal false 2.8828150\nEXCEPTION: nStr.toFixed is not a function...\ndebugging it I can see that the value gets corrupted in reset() line\nself.startVal = startVal;\nThe closure variable is somehow a string. I suspect some typescript or angular compiler shenanigans.\nHowever, changing the line to simple\nself.startVal = Number(startVal);\nin reset fixes the exception in my case. ",
    "myork": "Wow, that was an amazingly fast response. Thanks.. ",
    "brunowego": "The output stack:\nTypeError: self.options.formattingFn is not a function\n    at CountUp.self.printValue (countUp.js:130)\n    at new CountUp (countUp.js:232)\n    at count-up.js:19\n    at fn (ember.debug.js:915)\n    at invokeWithOnError (ember.debug.js:346)\n    at Queue.flush (ember.debug.js:405)\n    at DeferredActionQueues.flush (ember.debug.js:529)\n    at Backburner.end (ember.debug.js:599)\n    at Backburner.run (ember.debug.js:713)\n    at Backburner._runExpiredTimers (ember.debug.js:1107)\nMy ember implementation:\n```js\nimport Component from 'ember-component';\nimport CountUp from 'countup.js';\nimport observer from 'ember-metal/observer';\nimport { next } from 'ember-runloop';\nexport default Component.extend({\n  tagName: 'span',\ndidInsertElement() {\n    this._insertAndStartCountUp();\n  },\nchanged: observer(\n    'startVal', 'endVal', 'decimals', 'duration', 'useEasing', 'easingFn',\n    'useGrouping', 'separator', 'decimal', 'prefix', 'suffix', 'formattingFn',\n    'onComplete', function() {\n      this._insertAndStartCountUp();\n    }),\n// private\n_insertAndStartCountUp() {\n    next(() => {\n      let countup = new CountUp(\n        this.get('elementId'),\n        this.get('startVal') || 0,\n        this.get('endVal') || 0,\n        this.get('decimals') || 0,\n        this.get('duration') || 2,\n        {\n          useEasing: this.get('useEasing'),\n          easingFn: this.get('easingFn'),\n          useGrouping: this.get('useGrouping'),\n          separator: this.get('separator') || '.',\n          decimal: this.get('decimal') || ',',\n          prefix: this.get('prefix') || '',\n          suffix: this.get('suffix') || '',\n          formattingFn: this.get('formattingFn')\n        }\n      );\n  if (this.attrs.onComplete) {\n    countup.start(this.attrs.onComplete);\n  } else {\n    countup.start();\n  }\n});\n\n}\n});\n```\nThanks, sorry for the delay.. ",
    "UnwrittenFun": "The problem we ran into is that here the callback is set to call update when the animation has finished, however, update then sets of the raf again causing essentially an infinite loop, and causing repaints every frame even when the number is stable.\n. ",
    "yesenarman": "It still happens in version 1.8.5\nHere is a demo codepen. If you look in the console log, you can notice a message being printed about once per two seconds.\nIt also seems to depend on the duration of the animation. If the duration is 2s or more it doesn't loop, but with smaller values like 1.5s or less it loops.. I see. I didn't notice that there is a decimals argument missing. I have created a small pull request to update the readme.. Thank you. This library is exactly what I need for my current project.\nI also had somewhat related issue. I had a code similar to the example above on my site, and didn't notice that I was passing a string newEndVal argument to update() function instead of a number. The reason it was a string is because I extracted it from element text using jQuery $element.text() function.\nIt was also looping indefinitely in this case, since there is a strict comparison in:\njavascript\nif (newEndVal === self.frameVal) return;\nWhat do you think about adding a number conversion before comparing in that statement? Something like:\njavascript\nif (Number(newEndVal) === self.frameVal) return;. I have submitted a pull request with the proposed changes.. ",
    "glennreyes": "\nIt would have been nice if this was part of the same repo (like the angular wrapper is), but with all the react dependencies in package.json I can see why it needed to be separate.\n\nExactly, also react-countup wouldn't work without countup.js as a dependency.\n\nOne request, I know this is nit-picky, but can you put the React stuff after Angular 2, in each section? That way it is linked in the order it was added.\n\nSure!. Thanks for pointing to the check. Yes, we copied the formatNumber function since we wanted to render the formatted value and needed this extra check to prevent an infinite loop. I'll close this PR.. ",
    "zhaoxiong123": "living comfortably without anybody's help  ^_^. ",
    "keslo": "Thank's ). ",
    "codemonkeynorth": "ah great thanks. ",
    "duxthefux": "hey, the reason why we added this to countUp.js is because the UI blocks for less-performant devices, when using multiple counters. So I wouldn't rate it \"completely unnecessary\" as it brings better performance. \nCheckout how often its updated unnecessarily by opening chrome console / elements, as you can easily see which elements get rerendered and how often.\nin the end your decision.. ",
    "Pourbahrami": "You're right. Maybe we should get a ten elements array in options for custom output characters instead of language codes?\n'chars': ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'] // to outputting bfd as 153\nEdit: Its usage is for when user's browser language is not set to Persian, but you want to display your page -even its numerals- fully in Persian. . ",
    "richgcook": "Thanks @inorganik . ",
    "jacywang": "Thanks for looking into this, @inorganik! We just found out that this is due to a CSS attribute (transform) on our side. I'm going to close this. . ",
    "brammitch": "Great! Thanks @inorganik :+1: . ",
    "jamessawyer": "same demand needed,plz update a ng4+ version, thx. ",
    "mikecabana": "Having the same issue. @inorganik In my case I installed countup.js (not countup.js-angular2) via NPM. Does import * as CountUp from 'countup.js' still apply?\n. @inorganik So does that mean the countup.js-angular-2 module is not needed. As it stands by reading this stream as well as the angualr repo, my understanding of what must be done to use this is: \n```\nimport {CountUpModule} from 'countup.js-angular2/dist/countUp.module';\n@NgModule({\n  declarations: [\n CountUpModule\n...\nAND in my component\nimport * as CountUp from 'countup.js';\n...\nlet cu = new CountUp(...);\n```\nI'd like to use this as the angular repo intended as a directive as I find this kind of package useful.\n. ",
    "gigifrias": "So I figured out this solution shortly after asking the question, thanks for responding nonetheless. Sorry for the silly question!. ",
    "SeanDKendle": "I'm just going to leave my code as it is. It matches the signature of the jQuery easing functions we use everywhere.  Hopefully this helps someone else with the same problem.. ",
    "jerriais": "Thanks, I've submitted a new PR :-). OK, thanks for the tip, I hadn't thought about doing it that way. This was my first time contributing to open source repo so still lots to learn. . ",
    "designbyadrian": "I've got the answer.\nThe option formattingFn mentioned in the docs takes a number and expects to return a string:\njavascript\nformattingFn: (num) => { return `foo ${num} bar` }\nthen I'm just doing basic number checking:\n``javascript\nif (num > 99999) {\n    return${(num / 1000000).toFixed(2)} M`;\n}\nif (num > 999) {\n  return ${(num / 1000).toFixed(2)} k;\n}\nreturn num;\n```. ",
    "ronnievdc": "Yes, were creating a voting application where one of the views is an animating number. We want building excitement by using a 'wave' animation which exceeds the ending value and later slowly equalize at the ending value.. ",
    "parkerwebteam": "Fair enough, it does appear that $(document).foundation(); is causing this odd behaviour. . ",
    "kartagis": "Sorry, wrong project.. ",
    "ScottHarrisonDev": "Interesting, I'll double check the code we have and ensure we are not displaying 0 before CountUp is called (I'm pretty sure we aren't but will check). Thanks. Thanks for the prompt responses Jamie, looking into the code (We inherited the code and only have the minified JS so as you can imagine it's a bit of a slog!) I just found a line of code: $(\"#contador\").html((0).format()), .... no idea why it was in there but that was almost certainly causing the issue which now is no longer a problem in FF or Safari.\nThanks again I'll close the issue \ud83d\udc4d . ",
    "Mikurox": "I'm using CountUp by doing:\nimport { CountUp } from 'countUp.js';\nthen later the new signature methods:\nthis.countUp = new CountUp('gold-counter-id', goldCount);\nthis.countUp.start();\n...\nthis.countUp.update(newCount);\nI just noticed the above warning which is never good to have but it works normally otherwise.\nI'd like to say though that this library is awesome, thanks for everything, it's just so smooth, other libraries can't beat that ;-). ",
    "hraboviyvadim": "@inorganik Hi! I've got the same problem:\nWARNING in ./node_modules/countUp.js/dist/countUp.min.js\n1:328-335 Critical dependency: require function is used in a way in which dependencies cannot be statically extracted\nI'm using latest Laravel Mix for assets compilation.\nBeside this, I have error in browser console when trying to import this module:\nUncaught Error: Cannot find module \".\" . update:\nI've tried to change umd to commonjs and it works. . @inorganik I took countUp.js from /dist and put it directly in my project and then imported it like this: import { CountUp } from \"../vendors/countUp\"; And it works without any errors/warnings in console. . I'm not sure if I understand your question correctly, but I used countUp.js which I've got after changing \"module\": \"umd\" to \"module\": \"commonjs\" in tsconfig.json. It still works with amd. \nThe only one thing - I had to exclude countUp.js from ESLint, because it produces error:\n../../countUp.js\n  12:1  error  'define' is not defined  no-undef\nBut it could be a problem from my side.. @CPelletier I got this error from ESLint and fixed it after adding ignore rule for whole file. But after install version 2.0.1 it just works good without any errors. ",
    "CPelletier": "Hi sorry, I still got an error when I build with webpack 4. I'm using 2.0.1.\nI use import { CountUp } from 'countup.js' in my component, and it's working without any errors.\nBut when I try to generate a build, I got this :\n```\nERROR   /                                                                                                                                               17:28:33\nReferenceError: define is not defined\n    at Object. (/node_modules/countup.js/dist/countUp.min.js:1:309)\n    at Module._compile (module.js:635:30)\n    at Object.Module._extensions..js (module.js:646:10)\n    at Module.load (module.js:554:32)\n    at tryModuleLoad (module.js:497:12)\n    at Function.Module._load (module.js:489:3)\n    at Module.require (module.js:579:17)\n    at require (internal/module.js:11:18)\n    at /node_modules/vue-server-renderer/build.prod.js:1:76965\n    at Object. (webpack/bootstrap:2:0)\n    at n (webpack/bootstrap:2:0)\n    at Module.23 (pages/index.vue:1:0)\n    at n (webpack/bootstrap:2:0)\n    at \n```\nI'm using Nuxt 2.4.. Sorry to bother you, I was just asking a question and let you know there is a problem with webpack when you generate a static website using Nuxt.\nYour library is great, I've used it in many projects, I was just disappointed it doesn't work in the project I'm working on.\nI keep on searching, I'll let you know if I found something.. ",
    "d30jeff": "My mistake, the options param only introduced in version 2.x. ",
    "mirkosantangelo": "Same error here. With a simple script embed from the CDN.\n\n. ",
    "ReeceKenney": "Thanks for taking the time to follow up with this. \nI know these changes are for the better but I'm disappointed to see them. I teach programming to kids in my free time and what I liked about countUp was the ability to simply include the count up JS file and call the function. It was really quick and easy to teach and for the students to get their head around. \nI followed the steps in the 'including count up' section and I still had a lot of trouble getting it set up. I saw error after error that I eventually figured out but it was most definitely not quick or painless. Obviously this is due to my lack of knowledge but the process is now much more complicated and there's just no way I can use this in my teachings any longer. \nI honestly thank you so much for taking the time to respond here and resolve this issue so quickly though! :) \n. I completely understand! I know these changes are definitely for the better. \nI do love the work you're doing here. Please keep it up!! . ",
    "ejwaibel": "I'm seeing this exact same error when using it with Vue. ",
    "melkishengue": "Getting the same error with webpack 3.4.1.\nconst countUpModule = require('countup.js');\nconst countUp = countUpModule.CountUp('count', 2000);\ncountUp.start();\n Uncaught TypeError: this.validateValue is not a function. @inorganik not using vue neither. ",
    "Log1x": "Not using Vue, but I'm also getting this issue using webpack 4 (Laravel Mix 4).\n. https://log1x.com/files/countup.js-example.zip\nyarn install && yarn run build. ",
    "btopro": "js\nUncaught SyntaxError: The requested module '../../countup.js/dist/countUp.min.js' does not provide an export named 'CountUp'. Thank you. for context, this would make it easy to integrate with webcomponents and ship natively on the front-end without really needing to do much in the way of tooling.\nUntil this is worked out for the time being I've included the base of the code directly though I'd much rather want to reference and pull it in for sustainability purposes (this component was mostly to demonstrate what's gained / potential of this approach) -- https://www.webcomponents.org/element/@lrnwebcomponents/count-up/demo/demo/index.html\nSeeing that you've worked on React / Angular wrappers I figured I'd make the WC one to get it up and running. It's built in Polymer 3.. excellent that worked thank you! next release of the polymer 3 element will use this directly :). ",
    "ChenXiaoMian": "ok, I konw. Thanks!. "
}