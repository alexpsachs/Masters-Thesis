{
    "simonsarris": "You need to set the layoutConditions for the Diagram.linkTemplate so that adding new links does not cause a re-layout:\nmyDiagram.linkTemplate =\n  $(go.Link,  // the whole link panel\n    { \n      layoutConditions: go.Part.LayoutNone,\n      ... (other link properties)\nThen it will work as you are expecting.\nPen with that change: http://codepen.io/simonsarris/pen/emzBVZ\n. Thanks for finding and submitting this. We have fixed this issue in the just-released version 1.4.17.\n. Thanks again for reporting. This bug has also been fixed in version 1.4.17.\n. Wait, where are you looking?\nFor instance here: http://gojs.net/latest/api/symbols/GridLayout.html\nIt says \"The default value is GridLayout.LeftToRight.\"\n. Is this still an issue? Have you tried a CSS reset of divs and the canvas inside of the #myDiagram ID'd element?\n. I mean you could find the rules that are modifying the Diagram div or its canvas and reset them to defaults, e.g.:\nmyDiagram canvas {\n/* modify all canvases inside of myDiagram ID, reversing whatever Bootstrap rule is breaking GoJS */\n}\n. Okay, closing the issue then. Thanks for reporting.\n. ?\n. Github issues are not for support, use http://forum.nwoods.com for support.\n. Closing this issue. If you believe you've found a bug please comment with a reproducible case and we'll reopen the issue, or contact us directly: http://www.nwoods.com/contact.html\nIf you need support, please use the forum: http://forum.nwoods.com/?FID=8\n. You will need to call myDiagram.requestUpdate() when the DIV that contains the diagram is fully in view. See:\nhttp://gojs.net/latest/intro/resizing.html\nhttp://gojs.net/latest/samples/tabs.html\n. @nadvez  Did you see how this was implemented?\nhttp://gojs.net/latest/samples/tabs.html\n. Closed issues in Github is not really the place to ask for support help. Use the forum instead.\n. Yes, all of the sample diagram code is free to re-use.\n. I see what you mean. I've taken your suggestions and improved the sample, thanks.\nThose changes will be out with GoJS 1.6's next beta release, but we are not going to update it for the 1.5 branch.\n. I'm not sure what you mean exactly, but if you have a question and not a bug to report, please ask on our forum: http://forum.nwoods.com/c/gojs\n. You can add \"use strict;\" at the top of your own files and it should not conflict with GoJS.\n. Thanks for bringing this to our attention. Could you confirm that adding:\n\"typings\": \"./release/gojs.d.ts\"\nTo the package.json is all that's needed?\nCommitted: https://github.com/NorthwoodsSoftware/GoJS/commit/3825ec1644169382b8a184a2ba2e7cebc3611cdd \n. No, it will be published with our next real release, probably in about a\nweek. Sorry for the delay.\nOn Apr 11, 2016 1:16 PM, \"Schmulik Raskin\" notifications@github.com wrote:\n\nHas this been published to NPM? I can test it and let you know.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly or view it on GitHub\nhttps://github.com/NorthwoodsSoftware/GoJS/issues/17#issuecomment-208455234\n. Thanks. It may be worth changing it to:\n\n\"typings\": \"release/gojs.d.ts\"\n(removing the ./) just to see if that works. I was following what I saw on a Typescript page as an example path.\n. Thanks for your findings. I'll keep investigating.\n. It looks like to me, that the line at the start of our .d.ts file:\ndeclare module go {\nShould actually be:\ndeclare namespace go {\nBut as far as I can tell, the other declare module at the bottom:\ndeclare module \"go\" {\n    export = go;\n}\nneeds to stay to support AMD require.\nSo if you overwrite the file in your project so that the first line says declare namespace instead of declare module, does it work as you'd expect?\n. This seems to be how other libraries are doing it, for example:\nhttps://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/d3/d3.d.ts\nhttps://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/flowjs/flowjs.d.ts\nhttps://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/leaflet/leaflet.d.ts\netc.\nSo I think its correct if our definition file takes the form:\n```\ndeclare namespace go {\n    ...\n}\ndeclare module \"go\" {\n    export = go;\n}\n```\n. Can you link me to any discussions or guides about this new syntax?\nSorry for the trouble, I'm not well-versed in TypeScript.\nWe did make this definition file by hand, and not with a generator. (The source isn't .ts, its plain JS)\n. Going to close out this issue. Please contact us (email - gojs (at) nwoods.com,  or at our forum) if support related.  Or you can open a new issue if you still believe there is a bug.\n. Generally, if you have two models that need to interact, you will want to set properties like makeUniqueKeyFunction and nodeKeyProperty on both of them, though there may be exceptions.\n\nWhy is the variable key for the first node not 1001?\n\nWhen adding new node data, GoJS does this:\n\nIf the data.key does not exist, generate one, calling makeUniqueKeyFunction\nElse, the node data has a data.key, so use that key.\n\nUnless the key is already in the map, then call makeUniqueKeyFunction\n\n\nThe first node to be copied over from the palette has a key assigned (by the palette) so the \"Else\" is true. It does not need to call makeUniqueKeyFunction to ensure uniqueness.\nThe second node to be copied over from the palette has the same key assigned, so \"Else\" is true again, but this time the \"Unless\" clause is also true. Duplicate keys are not acceptable, so it calls makeUniqueKeyFunction to ensure uniqueness.\nThese rules are important, because if you wanted to add new nodes (perhaps from a loaded source) that have keys defined already, you would not want to destroy that data.\nYou could also set the makeUniqueKeyFunction on the Palette's model, so that it doesn't use its default.\n\nthe function gets called, and the value is correct for uuid, but it is unclear why there is also a \"key\" saved, which is even not unique.\n\nBecause you are copying data from myPalette.model, and the data looks like this:\n{text: \"???\", figure: \"Diamond\", key: -3, loc: \"0 110\"}\nSo the data is copied over faithfully. Then, a key is added to that data, since it has none (since you declared the nodeKeyProperty to be \"uuid\" instead of \"key\")\nGoJS will not destroy the \"key\" node data (or any node data), and the \"key\" was present in the palette, when you copy it to another model.\nYou could avoid that by setting nodeKeyProperty on both the Palette and the Diagram models.\n. Just so we are on the same page, when you are copying data from the palette, such as:\n{\"text\":\"???\", \"figure\":\"Diamond\", \"key\":-3, \"loc\":\"-121.875 -131\"}\nYou really want to copy this instead:\n{\"text\":\"???\", \"figure\":\"Diamond\", \"loc\":\"-121.875 -131\"} // no key\nSo that the Diagram Model is forced to make its own new key every time. Is that correct?\n. If you do really think there is a bug, some data that we can experiment with would be very helpful.\n. This looks fine to me, so I'm going to need more detail.\n\n. Closing this as not library-bug-related. If you need help, you can use the forum.\n. It looks like your browsers or system's default font is not a sans-serif font, as specified in the sample, but a monospace serif font. I do not know why this is, but I suspect its an issue with HTML canvas rendering and measuring that particular font.\n. This is not a place to ask for support/library help, only submit bugs and other issues. Use the forum instead.\n. We'll investigate.\n. I think this will be fixed in the next release. If you want to help with testing, you can email us, gojs (at) nwoods.com, and I'll send you a provisional version of the library.\n. This has been fixed in 1.6.11 (to be released soon)\nThanks for reporting this @dominicdesu \n. No, except that length is not a property of Diagram, as the error states.\nThis is not an appropriate use of the Issues.\n. Future versions of GoJS will use modules, but we do not have a concrete timetable for the release.. Buy a license for GoJS.\nThis is the GoJS license watermark and is removed when you purchase the library.. You may include the evaluation version of GoJS in open source projects, but people who use your project and want to use GoJS with it will have to purchase a license.\nSince this is not a bug or code issue, please email us (gojs @ nwoods.com) instead of using the issue tracker.. Parts, Groups, Links, and Nodes are top-level objects, you cannot add them to each-other.\nInstead of adding a Group as an element of a Node, change that element to be a Panel.. In the future, please use the forum for future support questions. That's weird. Are you sure you have installed the latest version with NPM? We just published less than an hour ago.. For general support, please use the contact form or the support forum.\nIf this is a bug and you can reproduce a case, say in codepen, we'll investigate it.. Thanks for the report. Since we build releases by modifying and uploading each version at once and not incrementally on github, I have to reject your merge. But the fix will be in the next release.\n(If we accepted, then the files here would be out of date with our download zip for the same version). We are de-emphasizing PhantomJS (Headless WebKit) in favor of puppeteer (Headless Chrome), which should be able to render images. Here is an example.\nYou will need to install node, npm, and puppeteer. Then run it with:\nnode puppet.js\n```javascript\nconst puppeteer = require('puppeteer');\nconst fs = require('fs');\nconst parseDataUrl = (dataUrl) => {\n  const matches = dataUrl.match(/^data:(.+);base64,(.+)$/);\n  if (matches.length !== 3) {\n    throw new Error('Could not parse data URL.');\n  }\n  return { mime: matches[1], buffer: Buffer.from(matches[2], 'base64') };\n};\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  // This does not have to be a page on the web, it can be a localhost page, or file://\n  await page.goto('https://gojs.net/samples/orgChartEditor.html', {\n    waitUntil: 'networkidle2' // ensures images are loaded\n  });\nconst imageData = await page.evaluate(() => {\n    window.myDiagram.animationManager.stopAnimation();\nreturn window.myDiagram.makeImageData();\n\n});\n// Output the GoJS makeImageData as a .png:\n  const { buffer } = parseDataUrl(imageData);\n  fs.writeFileSync('gojs-screenshot.png', buffer, 'base64');\n// Output a page screenshot\n  await page.screenshot({ path: 'page-screenshot.png' });\n  await browser.close();\n})();\n```. Please do not ask questions in the bug tracker. Please use the forum for general GoJS questions.. Thank you. We have found the bug and it will be out with the next release, probably within a day or two.. We have just released the fix for this:\nhttps://forum.nwoods.com/t/gojs-version-1-8-11/9923\nhttps://www.nwoods.com/app/activate.aspx?sku=gojs. Yes, see: https://www.nwoods.com/sales/index.html\nPlease use the contact form for questions: https://www.nwoods.com/contact.html. Thanks, we'll take a look.. I do see what you mean. This is actually intentional.\nFor touch events, we have a delay in the dragging tool on starting it in order to allow easier panning. If you do not like this simply set the DraggingTool.delay to 0:\nmyDiagram = $(go.Diagram, \"myDiagramDiv\",\n                  {\n                    \"draggingTool.delay\": 0,\n                     ...\n\nSome background:\nThe versions you are getting \"immediate\" behavior in are not using PointerEvents in IE, instead they're using IE's simulated Mouse events. These versions have some issues, the most obvious one being dragging between Diagrams (you can see that you can't drop from the Palette in 1.8.10's flowchart).\nChrome and Firefox don't emit simulated mouse events, instead they emit touch events, so they already work this way, with the delay.\n. See your own comment.... Thanks, this will be fixed in the next release.. We allow server side rendering, but do not automatically render server side and serve to client.\nhttps://gojs.net/latest/intro/serverSideImages.html\nPlease do not use the issue tracker for questions, use the forum instead.. We will not change the .js files to have an \"export\" statement because it will break the .js in most browsers. Of course, you can do so for your project.\nFor doing this in our ExtensionsTS directory automatically, we give an example of that in a project, here:\nhttps://github.com/NorthwoodsSoftware/GoJS-projects/blob/master/angular-basic/src/app/diagram-editor/diagram-editor.component.ts#L4\nSee the last section of the TSconfig:\nhttps://github.com/NorthwoodsSoftware/GoJS-projects/blob/master/angular-basic/tsconfig.json\nThe extensions directory files are meant to be included as plain JavaScript files. The extensionsTS directory files are similarly built to be included as UMD modules. If you want to use them as ES6 modules, you can, you just need to either rebuild the .js sources, or add some config to your project for them, like above.\n. GoJS has no dependencies. Have you seen: https://github.com/NorthwoodsSoftware/GoJS-projects/tree/master/angular-basic. Thanks for reporting this. What are you using to compile? What is your project built on?. This should be fixed in 2.0.2, released today. Please let us know if there's still a problem.. Sorry, but we do not accept commits of this nature.\nHowever, we plan to create a forum topic where we link to samples made by other people and would be happy to link to yours, if you put it in your own repository.. This is intentional, because the selection may have several deletable true parts, while others are false. canDeleteSelection() really tests if any arbitrary selection (assuming one exists) can be deleted, and does not look into which, if any of it, will actually get deleted.. ",
    "ertant": "Ah ok, sorry i think my downloaded copy is older. Thanks for very fast reply.\n. ",
    "iivanov2": "Hi,there is no such thing as CSS reset you can't isolate an div or other tag as you think.\u00a0I sloved my problem as I embed the diagram in an iframe, in this \u00a0way it has separate CSS rules, without bootstrap.I see that you released a new version\u00a01.4.22\u00a0(I am still using\u00a01.4.19) but it has still this bug, I send you \u00a0new images here:http://s14.postimg.org/t9b2c62u9/Capture1.pnghttp://s1.postimg.org/nl2ocoqlr/Capture2.pnghttp://s29.postimg.org/3ro5ppahj/Capture3.png\u00a0\u00a0 \u00a0\u00a0I repeat, this problem occurs most visible in IE9 when I am using bootsrap, and there is similar problem with other browsers (Chrome, Firefox).\n      From: Simon Sarris notifications@github.com\n To: NorthwoodsSoftware/GoJS GoJS@noreply.github.com \nCc: iivanov2 iivanov2@yahoo.com \n Sent: Wednesday, February 25, 2015 9:06 PM\n Subject: Re: [GoJS] Problem with GoJS and bootstrap (#6)\nIs this still an issue? Have you tried a CSS reset of divs and the canvas inside of the #myDiagram ID'd element?\u2014\nReply to this email directly or view it on GitHub. \n. I understand now but I didn't try this it was easier for me to embed it in iframe.\n      From: Simon Sarris notifications@github.com\n To: NorthwoodsSoftware/GoJS GoJS@noreply.github.com \nCc: iivanov2 iivanov2@yahoo.com \n Sent: Wednesday, February 25, 2015 10:19 PM\n Subject: Re: [GoJS] Problem with GoJS and bootstrap (#6)\nI mean you could find the rules that are modifying the Diagram div or its canvas and reset them to defaults, e.g.:#myDiagram canvas {\n /* modify all canvases inside of myDiagram ID, reversing whatever Bootstrap rule is breaking GoJS */\n}\u2014\nReply to this email directly or view it on GitHub. \n. ",
    "WalterNorthwoods": "I'm unable to reproduce this problem.  I had a page with three Diagrams.  Diagrams A and B had their respective model's Model.dataFormat at the default value, the empty string; Diagram C's Model.dataFormat was set to \"THREE\".  I could easily copy and paste from A to A and from A to B, but I could not from A to C.  This is the expected behavior, and it worked the same way in IE, Firefox, and Chrome.\nDrag-and-drop is similarly limited: permitted within A and from A to B, but disallowed from A to C.\n. Github issues are not for support, use http://forum.nwoods.com/c/gojs for support.\n. Thanks for reporting this bug.  Yes, the link data should have been modified.  This will be fixed in 1.5.21, which we'll release later this week.  (Today's a holiday, actually.)\n. Yes, I saw that;  I still think the TypeScript documentation is quite inadequate regarding these issues.\nI am still unable to create a .d.ts file that works with all of the usage styles that we can envision and that works with both TypeScript 1.* and TypeScript 2.0.  You might want to look at http://gojs.net/beta/release/go.d.ts for the latest file.\nNote the file name change.  The name \"goJS.d.ts\" was chosen by someone on behalf of DefinitelyTyped, which was not our choice.  With the name change I think finding the .d.ts file for the \"go.js\" library will be easier.\nOne can now use the definition file without using modules:\njavascript\n    /// <reference path=\"go.d.ts\">\n    function init() {\n        const $ = go.GraphObject.make;\n        var myDiagram: go.Diagram =\n            $(go.Diagram, \"myDiagramDiv\",\n                { layout: $(go.TreeLayout, { angle: 90 }) });\n        . . .\n    }\nOr one can write:\njavascript\n    import go = require(\"go\");\n    export function init() {\n        const $ = go.GraphObject.make;\n        var myDiagram: go.Diagram =\n            $(go.Diagram, \"myDiagramDiv\",\n                { layout: $(go.TreeLayout, { angle: 90 }) });\n        . . .\n    }\nand then require that file:\njavascript\n  <script>\n    require([\"go-tests\"], function(app) {\n      app.init();\n    });\n  </script>\nI noticed in the 2.0 branch at DefinitelyTyped that there is a newer version of our .d.ts file, using some new syntax for which I could not find any documentation: export as namespace go;.  This does not work in TypeScript 1.8.  Furthermore it does an export = go not inside a module declaration.  (This is commented out in at the end of our new go.d.ts file.)\nFurther experimentation found that if I remove the namespace declaration and the export = go from the go.d.ts file, it is possible to do things like:\njavascript\n    import { Diagram, GraphObject, Panel, Part, Node, Link, Group, Placeholder, Adornment, TextBlock, Shape, InputEvent, Point, Spot, Binding, GraphLinksModel, TreeLayout, TreeNetwork, TreeVertex, TreeEdge } from \"go\";\n    export function init() {\n        var $ = GraphObject.make;  // for conciseness in defining templates\n        var myDiagram: Diagram =\n            $(Diagram, \"myDiagram\",  // create a Diagram for the DIV HTML element\n            . . .\nNote that there is no longer any need to prefix GoJS types with \"go.\".  However I do not then understand how to import all of the exported symbols using a wildcard or some other syntax for importing.\n. If there is no declare namespace go { ... } in the go.d.ts file, thereby having a lot of top-level exports, what you write:\nimport * as go from 'go';\ndoes not work to allow references to types such as Diagram without any \"go.\" prefix.  The \"go.\" is still required.\nI was hoping for a way to import selected types, perhaps with aliasing, and allow references not to be prefixed with \"go.\".  So that's why something like this works:\n```\n    import { Diagram, GraphObject, Node } from \"go\";\nconst $ = GraphObject.make;\n\n```\nBut I was also hoping to be able to import all of the types using a wildcard, so that the programmer does not need to list all of the specific types as I did.  I tried:\nimport { * } from \"go\";\nBut that is not valid syntax.  And:\nimport * from \"go\";\nis invalid syntax too.\nThis is valid syntax:\nimport \"go\";\nBut it doesn't work either.\nThis does work:\nimport go = require(\"go\");\nBut it requires prefixing all the GoJS class names with \"go.\".\n. I think importing all of the exported symbols of a module should be a common usage.\nAnyway, that along with working in TypeScript 1.* is why the new go.d.ts file continues to declare a namespace rather than only having top-level exports of the classes, which is what you had been requesting in this Issue.\n. That's a flaw in the sample.  The problem is that replacing the Diagram.model may change the selection, which will result in a call to scope.$apply() at a time when that apparently is undesirable.\nSo change the \"ChangedSelection\" DiagramEvent listener to be:\n// update the model when the selection changes\n          function updateSelection(e) {\n            var selnode = diagram.selection.first();\n            diagram.model.selectedNodeData = (selnode instanceof go.Node ? selnode.data : null);\n            scope.$apply();\n          }\n          diagram.addDiagramListener(\"ChangedSelection\", updateSelection);\nand then make the model-watching listener smarter:\n// notice when the value of \"model\" changes: update the Diagram.model\n          scope.$watch(\"model\", function(newmodel) {\n            var oldmodel = diagram.model;\n            if (oldmodel !== newmodel) {\n              diagram.removeDiagramListener(\"ChangedSelection\", updateSelection);\n              diagram.model = newmodel;\n              diagram.addDiagramListener(\"ChangedSelection\", updateSelection);\n            }\n          });\nAlas it is too late for this change to go into the 1.6.5 release, which is partly released already.  When master has been updated here, I'll update the samples/angular.html file.\n. It sounds like your new node data object already has a key property declared on it.  Search for \"key\" in your sources.\nWhen loading a node data object, if the key is not undefined and is already unique, it is kept and the Model.makeUniqueKeyFunction should not be called.  After all, if you are loading data that already has keys defined, you would not want to replace them with new keys, thereby losing information from the model.\nNote how everything seemed to work well once you used a different Model.nodeKeyProperty name.  That is because none of the node data objects already had values for that property.\n. By the way, the Model.makeUniqueKeyFunction does not need to modify the data object.  This should also work:\nmodel.makeUniqueKeyFunction = function() { return new UUID(4).format(); };\n. Another possibility is to leave the use of \"key\" as the Model.nodeKeyProperty in the Palette, and to continue to use \"uuid\" as the Model.nodeKeyProperty in the main Diagram, and to add this DiagramEvent listener:\n. . . ,\n            \"ExternalObjectsDropped\": function(e) {\n              e.diagram.nodes.each(function(n) {\n                n.data.key = undefined;\n              });\n            },\n. So you actually have cyclical references in your data?  I do not believe that either Model.toJson or Model.toIncrementalJson** check for that.\nFor now, I do not have a good work-around for you.  Are you depending on maintaining those cyclical or shared references when loading the model back in?\n. I was going to suggest making the \"back-pointer\" properties be non-enumerable, or prefixing them with \"_\", but I see now that you have updated your comment to anticipate that possibility.\nYes, using getter/setter properties is another way to solve the problem.  It looks like you have a good grasp on the situation.  If you have any other questions, contact us through our forum, https://forum.nwoods.com/c/gojs, or by email.\n. The ToolManager.holdDelay property just controls when the Tool.doWaitAfter method is called.  The default value is 850 milliseconds.  A timer is started upon mouse-down, is restarted on mouse-move beyond a certain distance (Tool.isBeyondDragSize), and is cancelled upon mouse-up and in a few other circumstances.\nThe DragSelectingTool.delay property controls how long to wait before DragSelectingTool.canStart can return true.  The default value is 175 milliseconds.  No timer is involved.\nSo the ToolManager.holdDelay property should not affect the behavior of the DragSelectingTool.\nI believe the user does have to move the mouse after a mouseHold event in order to get a new mouseHold event.  The same goes for mouseHover events, which implement tooltips.  So that might explain why sometimes you do not get any event.\nI cannot explain why the timings are less than 800ms.  We'll investigate.  I suspect it's interacting with waiting for mouseHover events.\n. Ah, this is a bug in your test code.  You wrote:\nmyDiagram.toolManager.doMouseDown=function(){\n        start = new Date().getTime();\n        go.Tool.prototype.doMouseDown.call(myDiagram.toolManager)\n    }\nBut the call to the overridden method should have been:\nmyDiagram.toolManager.doMouseDown=function(){\n        start = new Date().getTime();\n        go.ToolManager.prototype.doMouseDown.call(myDiagram.toolManager)\n    }\nBasically, your code was not calling the normal ToolManager.doMouseDown functionality.\nWith the fix I am consistently getting times of about 850-860 ms.\n. I'm using TypeScript 1.8.35, and when the go.d.ts file includes, at the end of the file:\n// for TypeScript 1.*:\ndeclare module \"go\" {  // comment out module declaration for TypeScript 2.0\n  export = go;         // but keep export = go in all versions for compatibility with AMD and CommonJS\n}\nI do not get an error when compiling the following code:\n```\n    var $ = go.GraphObject.make;  // for conciseness in defining templates\nvar myDiagram: go.Diagram =\n    $(go.Diagram, \"myDiagram\",  // create a Diagram for the DIV HTML element\n        {\n            // position the graph in the middle of the diagram\n            initialContentAlignment: go.Spot.Center\n        });\n\n```\nAnd the code executes correctly too.\nSo could you explain why you think there should not be a \"go\" module declaration in the go.d.ts file?\nAre you using modules, and if so, how?\n. Which fix \"suggested at the top\" are you talking about?\n---Walter\nOn Sep 13, 2016 05:25, \"Dan Kirkham\" notifications@github.com wrote:\n\nI'm seeing the same problem. The package.json looks fine, both main and\ntypings are pointing to the correct files. The typescript compiler throws\nthe following: error TS2306: File 'C:/snipped/node_modules/gojs/release/go.d.ts'\nis not a module. The fix suggested at the top does work. The problem I\nhave with the whole thing is that this is not a sustainable practice. I\ncan't comment this code out during CI deployment or on another developer's\nmachine. Can you please take another look at this problem.\nTypescript 1.8.10.\nGoJs 1.6.15.\nNode v4.4.7.\n``\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/NorthwoodsSoftware/GoJS/issues/26#issuecomment-246625627,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AKv8d1rHMUK6EI_ZFf_l_q0rLD_SCcMWks5qpmwfgaJpZM4Jbs5R\n.\n. How are you importing GoJS in your TypeScript code?\n\nLater today I can experiment how such a change would work in AMD\nenvironments, although I thought it did not.\n---Walter\nOn Sep 13, 2016 05:45, \"Dan Kirkham\" notifications@github.com wrote:\n\nI need to change following lines in go.d.ts file:\ndeclare module \"go\" {\nexport = go;\n}\nto\nexport = go;\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/NorthwoodsSoftware/GoJS/issues/26#issuecomment-246630353,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AKv8d8U-ApQJXbHjMljAYofGkAHQhdvJks5qpnCogaJpZM4Jbs5R\n.\n. OK, I still cannot reproduce that TSC error, and that error you quoted does not make sense anyway.  And a lot of other TypeScript definition files wrap their export = blah with a declare module \"blah\" { }.\n\nBut it does seem to work without that module declaration, so I'll change it for 1.6.17.\n. \"AvoidsNodes\" routing puts all orthogonal link segments on an internal grid, except at the ends where it connects with a port whose link connection point is not also on the same internal grid.\nI'm guessing that the avoids-nodes routing hadn't taken place, perhaps because a transaction had not been performed after diagram initialization?  That would explain both behaviors.\n. First, I should clarify that what you are talking about deals with routing, not rendering.  Rendering is just a \"painting\" or \"drawing\" action; routing is what determines the exact points that a Link takes (i.e. the Link.points list).\nThe AvoidsNodes routing of Links is implemented as the same as the default Orthogonal routing, except that it afterwards checks to see if the route crosses over any Nodes that are Node.avoidable.  If it does, then it calculates and keeps a shortest route on a grid.\nSo for your Issue #1 I do not understand why it decided to discard the default routing which you see in Image #1.  There do not seem to be any nodes in the way.\nAnd as I said, I cannot explain why Issue #2 is happening, unless you have made changes after setting the Diagram.model without using a transaction.  (You can make all the changes you want to a model without a transaction until after you assign the model to a Diagram.)\nSo can you provide us a way to reproduce your problems?  Also, I would prefer it if you either used our forum (https://forum.nwoods.com/c/gojs) or e-mail (GoJS at our nwoods domain), since I do not check for GitHub issues very often.\n. Are these still issues for you?\n. Not yet, but I would expect any competent dead code elimination mechanism to recognize classes that are not used and remove them.  The Closure compiler does this, for example -- no need to require ES6 and modules.\n. Shouldn't you be setting GraphLinksModel.nodeIsGroupProperty to a function on your Palette as well as your main Diagram?\nWe'd prefer if you ask questions on our forum, https://forum.nwoods.com/c/gojs.\n. Yes.\nGitHub issues are meant for reporting problems, not asking questions. I suggest that you search the forum and ask questions there. https://forum.nwoods.com/c/gojs. Sorry about that -- I forgot to include the subdirectories in that project.  I have checked them in, but I'm not going to try to modify the release -- that will have to wait until 1.7.4.. A web search finds:\nhttps://gist.github.com/michaelryancaputo/f11ec3db2c8aa3158f702f27472608ff\nhttp://stackoverflow.com/questions/40451705/using-gojs-in-reactjs\nhttps://forum.nwoods.com/t/using-gojs-with-reactjs-and-redux/8015\nUsage questions are not issues that should be entered here -- they can be asked in the forum, https://forum.nwoods.com/c/gojs, or by email, https://www.nwoods.com/contact.html.. Thanks for noticing this error in that sample.  The problem is that it is trying to show guidelines when nothing is being dragged.  The fix is to modify the GuidedDraggingTool.js file:\n```\nGuidedDraggingTool.prototype.doDragOver = function(pt, obj) {\n  // clear all existing guidelines in case either show... method decides to show a guideline\n  this.clearGuidelines();\n// gets the selected part\n  var partItr = (this.copiedParts || this.draggedParts).iterator;\n  if (partItr.next()) {\n    var part = partItr.key;\nthis.showHorizontalMatches(part, this.isGuidelineEnabled, false);\nthis.showVerticalMatches(part, this.isGuidelineEnabled, false);\n\n}\n}\n/\n On a mouse-up, snaps the selected part to the nearest guideline.\n If no guidelines are showing, the part remains at its position.\n This calls {@link #guidelineSnap}.\n @this {GuidedDraggingTool}\n*/\nGuidedDraggingTool.prototype.doDropOnto = function(pt, obj) {\n  // gets the selected (perhaps copied) Part\n  var partItr = (this.copiedParts || this.draggedParts).iterator;\n  if (partItr.next()) {\n    var part = partItr.key;\n// snaps only when the mouse is released without shift modifier\nvar e = this.diagram.lastInput;\nvar snap = this.isGuidelineSnapEnabled && !e.shift;\n\nthis.showHorizontalMatches(part, this.isGuidelineEnabled, snap);\nthis.showVerticalMatches(part, this.isGuidelineEnabled, snap);\n\n}\n}\n```\nThis will be in our next release, 1.7.8.\n. Ah, I didn't understand that drag-and-dropping from another Diagram was required to produce the bug.  OK, I have checked in what I think is a bit better change than what you have proposed.\nThanks for pointing out the bug.. We can add such a feature, at least on Edge.  We'll look into it.. I believe this now works in version 1.8.3.. Ah, that's because I didn't update the package.json file, which for some reason has an explicit list of files to include.  I cannot re-release 1.7.11 in npm, so this will have to wait until the next release.  Sorry about that.\n. Thanks for the error message and stack, but what version of go.js is it?\nCould you tell us how to reproduce the error?. (Closed due to lack of information.). Does this help: http://gojs.net/latest/intro/resizing.html ?. I suppose we could learn enough about Vue.js to be able to create a sample.\nBut you must be using it now, yes?  What problems have you encountered?  You shouldn't have any issues using GoJS, because GoJS has no dependencies and few requirements on usage, other than getting an HTML DIV element to host a Diagram.. https://gojs.net/latest/samples/vue.html. I'm assuming you mean repeated calls to Model.setDataProperty.\nIf you have enabled the UndoManager, then of course it will record the change in a ChangedEvent, which does take some memory. This is required if the change wants to be undone.\nIf you don't want the change to be recorded, remember the value of Model.skipsUndoManager, temporarily set Model.skipsUndoManager to true, do your change(s), and then restore Model.skipsUndoManager to its original value.\nIf you want to limit how many Transactions the UndoManager remembers, set https://gojs.net/latest/api/symbols/UndoManager.html#maxHistoryLength.\nIf there is some other reason for the memory retention, please describe it.. We'll investigate this after the holidays.. Thanks for reporting the non-optimal HTML in that sample.  Here's what will be in 1.8.7, which will be released within a week or so.\n<div style=\"width: 100%; display: flex; flex-wrap: wrap\">\n  <div>\n    <div id=\"myDiagramDiv\" style=\"border: solid 1px black; width:350px; height:300px; margin: 0 2px 0 0\"></div>\n    <p>\n      <label><input type=\"checkbox\" onclick=\"allChecks()\" id=\"MD1allowDragOut\" />allowDragOut</label>\n      <label><input type=\"checkbox\" onclick=\"allChecks()\" id=\"MD1allowDrop\" />allowDrop</label>\n      <label><input type=\"checkbox\" onclick=\"allChecks()\" id=\"MD1isReadOnly\" />isReadOnly</label>\n    </p>\n    <p>\n      <label><input type=\"checkbox\" onclick=\"allChecks()\" id=\"MD1allowCopy\" />allowCopy</label>\n      <label><input type=\"checkbox\" onclick=\"allChecks()\" id=\"MD1allowDelete\" />allowDelete</label>\n      <label><input type=\"checkbox\" onclick=\"allChecks()\" id=\"MD1allowInsert\" />allowInsert</label>\n      <label><input type=\"checkbox\" onclick=\"allChecks()\" id=\"MD1allowMove\" />allowMove</label>\n    </p>\n  </div>\n  <div>\n    <div id=\"myDiagram2\" style=\"border: solid 1px black; width:350px; height:300px\"></div>\n    <p>\n      <label><input type=\"checkbox\" onclick=\"allChecks()\" id=\"MD2allowDragOut\" />allowDragOut</label>\n      <label><input type=\"checkbox\" onclick=\"allChecks()\" id=\"MD2allowDrop\" />allowDrop</label>\n      <label><input type=\"checkbox\" onclick=\"allChecks()\" id=\"MD2isReadOnly\" />isReadOnly</label>\n    </p>\n    <p>\n      <label><input type=\"checkbox\" onclick=\"allChecks()\" id=\"MD2allowCopy\" />allowCopy</label>\n      <label><input type=\"checkbox\" onclick=\"allChecks()\" id=\"MD2allowDelete\" />allowDelete</label>\n      <label><input type=\"checkbox\" onclick=\"allChecks()\" id=\"MD2allowInsert\" />allowInsert</label>\n      <label><input type=\"checkbox\" onclick=\"allChecks()\" id=\"MD2allowMove\" />allowMove</label>\n    </p>\n  </div>\n</div>\n<div>\n  Using the Robot extension class:<br />\n  <button onclick=\"dragBetaAcross()\">Drag Beta across</button><br />\n  <button onclick=\"copyBetaBack()\">Copy Beta back</button>\n</div>\n\n. Ah, sorry about that.  I've added them manually for now.  Thanks for reporting the problem!. How are you loading the OrthogonalLinkReshapingTool.js code?  I suggest that you import it from ..../extensionsTS/OrthogonalLinkReshapingTool.. extensions/*.js are scripts; extensionsTS/*.js are UMD modules.. I think the problem is that you haven't correctly defined CustomLink as a subclass of go.Link before you use it to build a template.\nSo move the CustomLink constructor before you create the link template, and immediately after the constructor call go.Diagram.inherit(CustomLink, go.Link);.\nOr define CustomLink as a proper class in ES6, class CustomLink extends go.Link { . . .. For a sample demonstrating a GoJS diagram in the Vue framework, see https://gojs.net/latest/samples/vue.html.\n. Please do not use the GitHub issue tracker, unless you are reporting a potential bug.\nFor help and support, please use the GoJS forum: https://forum.nwoods.com/c/gojs. Please do not use the GitHub issue tracker, unless you are reporting a potential bug.  For help and support, please use the GoJS forum: https://forum.nwoods.com/c/gojs\nThe locations of the nodes are correct, are they not?  The normal routes that links would take are just like those that you show in the lower diagram.  What values are you using for fromSpot and toSpot?  What properties have you set on the Links?  Chances are that you have specified some properties unnecessarily.. You need to pass a specific link data object reference to GraphLinksModel.removeLinkData: https://gojs.net/latest/api/symbols/GraphLinksModel.html#removeLinkData\nYou cannot create a new object and expect to find a similar object that is a link data object.. Please do not use the GitHub issue tracker, unless you are reporting a potential bug.\nFor help and support, please use the GoJS forum: https://forum.nwoods.com/c/gojs\nYou might want to set Layout.isInitial to false, to prevent the GenogramLayout from running when you load a model.. If you are asking about animated GIFs, please read https://forum.nwoods.com/t/using-animated-gif-in-gojs-picture-object/7572. If your node template has a OneWay Binding on Node.location, I could see how that could happen.  That would not be a bug in the library, but in how you define and use your node template and in what data you have in the model.\nIf you don't need a binding on Node.location, remove it and the corresponding source property on the node data objects.\nIf you do need a binding on Node.location despite the Diagram.layout being a ForceDirectedLayout, then make it a TwoWay Binding.. Could you please post questions in the forum?  https://forum.nwoods.com/c/gojs. I'm not sure what you are asking for. \n$ npm i gojs\nimport * as go from 'gojs';\n. Thanks for catching that typo.\nYou should be copying only the code that you need to your own files. Those * Script. * files are just the samples, not meant for direct reuse.. To add to what Simon says, I will mention that the selected Parts are not the only Parts that may be deleted.\nWhat if some of the (unselected) Links connected with selected Nodes have Part.deletable set to false?\nEven more complicated, what if CommandHandler.deletesTree is true? I can imagine that it would be reasonable in some situations to not to allow deletions when some child node's are not deletable; but I can imagine other situations where the opposite policy is desired.\nThat is why you can override those methods on CommandHandler.. ",
    "martienvlent": "You were right. The problem was elsewhere in my code.\nSorry for the inconvenience.\n. Oops.\nThanks for the swift reply.\nGroeten, Martien\n\nVan: WalterNorthwoodsmailto:notifications@github.com\nVerzonden: \u200e16-\u200e6-\u200e2016 14:48\nAan: NorthwoodsSoftware/GoJSmailto:GoJS@noreply.github.com\nCC: Martien van Lentmailto:mvlent@outlook.com; Authormailto:author@noreply.github.com\nOnderwerp: Re: [NorthwoodsSoftware/GoJS] holdDelay (#24)\nAh, this is a bug in your test code.  You wrote:\nmyDiagram.toolManager.doMouseDown=function(){\n        start = new Date().getTime();\n        go.Tool.prototype.doMouseDown.call(myDiagram.toolManager)\n    }\nBut the call to the overridden method should have been:\nmyDiagram.toolManager.doMouseDown=function(){\n        start = new Date().getTime();\n        go.ToolManager.prototype.doMouseDown.call(myDiagram.toolManager)\n    }\nBasically, your code was not calling the normal ToolManager.doMouseDown functionality.\nWith the fix I am consistently getting times of about 850-860 ms.\n\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub:\nhttps://github.com/NorthwoodsSoftware/GoJS/issues/24#issuecomment-226474973\n. ",
    "vapits": "Well you;re right. I manage to do that (i am using angular) by broadcasting a scope so i can now when to run it. Still though it does not render (the function runs without error).\nI'm doing it like this:\n$scope.renderDiagram = function(){\n          $scope.$broadcast('showDiagram');\n};\nand in my directive:\nscope.$on('showDiagram', function () {\n        diagram.requestUpdate();\n});\n. And my code is almost exactly like this sample:\nhttp://www.gojs.net/latest/samples/angular.html\n. @nadvez Sorry mate it's so long before I don't remember exactly and it's a private repo. Tho...\nIf you work with Angular-Ui (boothstrap) it should work. Otherwise add a listener on your tabs (you've got one by angular-ui) and on the change do the diagram.requestUpdate() mentioned above.\nTake care.\n. Change the diagram with your diagram's name.\n. ",
    "nadvez": "Hi, I am stuck up with the similar situation.I am using angular with GOJS and tabs. My diagram is in tab3 and i have to click on inspect for it to show up. \nDid you guys had it work and what was the solution ?\n. @simonsarris. Thanks but i dont think this will help me. As i am using angular uib tabset where each tab set has redirection to pages like this and each one of them has their own scope. \nsee below: \n \n```\n    \n\n        <uib-tab-heading>Step 1 : Validate NED\n        </uib-tab-heading>\n        <div ng-include=\"'app/config_gen/templates/validateNed.html'\"></div>\n    </uib-tab>\n    <uib-tab heading=\"Service Parameters\" class=\"navhead\" id=\"devicetabs\">\n        <uib-tab-heading> Step 2 : Service Parameters\n        </uib-tab-heading>\n        <div ng-include=\"'app/config_gen/templates/serParam.html'\"></div>\n    </uib-tab>\n    <uib-tab heading=\"Mapping\" class=\"navhead\" id=\"tab3\">\n        <uib-tab-heading> Step 3 : Mapping\n        </uib-tab-heading>\n        <div ng-include=\"'app/config_gen/templates/mapping.html'\"></div>\n    </uib-tab>\n    <uib-tab heading=\"Make Package\" class=\"navhead\" id=\"tab4\">\n        <uib-tab-heading> Step 4 : Make and Deploy Package\n        </uib-tab-heading>\n        <div ng-include=\"'app/config_gen/templates/makePackage.html'\"></div>\n    </uib-tab>\n\n</uib-tabset>\n\n\n```\nI was just wondering how vapits acheived it in angular ?\n. Hi Vapits, \nHow did you implement the diagram for the tab other than the first one. Is there a way to check your code. is it on the github for me to compare ?\n. @vapits  Thanks. DO you remember how did you invoke the scope of the diagram.requestUpdate() from the directive ?\nit will return undefined as diagram is defined as part of directive which is inside the controller of the html included in the UI tabset?\n. @simonsarris. also tried the tab implementation using the minimal go js implementation even then same problem. Do you know when to invoke the diagram.requestUpdate() ?\nas it was returning undefined if i have it as Immediately executable function on tab load ? \n. Ya ... The problem is i am usinh uib tabset to include the html which\ndiagram as part of its controller .\n. now how can i call that function on load on this tab ?\nDid you use scope.brodcast?\nOn May 11, 2016 8:45 AM, \"Vassilis Pitsounis\" notifications@github.com\nwrote:\n\nChange the diagram with your diagram's name.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/NorthwoodsSoftware/GoJS/issues/10#issuecomment-218463515\n. \n",
    "roni-frantchi": "+1\n. ",
    "AlmogShaul": "+1\n. ",
    "schmuli": "Has this been published to NPM? I can test it and let you know. Thank you very much for the quick response.\n. I tried changing the package.json on a local version, and unfortunately it doesn't work by just adding the above line.\nI'm trying to understand what is required in order for it to work, and I will update this issue.\n. I'll check but I think the issue is more to do with the contents of the file.\nI don't have confirmation yet, but I think the file needs to be written without:\n``` javascript\ndeclare module gojs {\n    ...\n}\ndeclare module \"gojs\" {\n    ...\n}\n```\nI still have to test further, but if I understand correctly, the file needs to directly export the interfaces; the module name is automatically understood from the context.\nI will continue testing and update the issue if I get something that works.\n. So after testing this for a while, this is what I have learnt.\nIn the .d.ts file, all declare module need to be removed, as mentioned above. Additionally, all the exported classes, interfaces, etc. need to be exported using the export keyword.\nThe TypeScript compiler can generate such .d.ts files, if the original TypeScript code is written using ES6 Modules, meaning export and import statements.\nI don't know how you are generating your .d.ts file today, but if this is something that is possible, that would be excellent. Considering that the current file doesn't do anything without a separate tool, like typings, maybe supporting both formats in the package is not a must.\n. Without going to deep into the subject, TypeScript has a number of different ways to determine the .d.ts file when it encounters a require('gojs') or import gojs from 'gojs' statement:\n1. It will go to node_modules/gojs and look in the package.json for the typings key and use that, in which case it already knows that the file it is loading is the 'gojs' module, and it doesn't need (or want) the declare module as that is already inferred and useless\n2. It will look through the files provided to the compiler as input, and will look for a module that matches the imported name, which it matches by comparing the declare module 'gojs' statement with the imported name\nAll the files found on DefinitelyTyped are used as part of the input to the TypeScript compiler, which is why they all use the old syntax. I'm calling it the old syntax, because there is active work by TypeScript and the community to move all definition files into node_modules.\nJust changing the module to namespace doesn't work, the module/namespace needs to be removed, and all the interfaces and classes need to be exported.\nI understand that this is an issue for you, because it basically requires supporting two versions of the .d.ts file, one for node_modules and another for DefinitelyTyped.\nThe only remaining question is, since I'm assuming that you guys are generating the .d.ts file, is it possible to support both formats, one which will work with the typings keyword in node_modules, and the other that will remain backwards-compatible?\nIf you could do that, you will be preparing for the future as well as earning mine and other's appreciation.\nThank you for your quick responses and willingness to help!\n. There is a lot of detail in this answer by Ryan Cavanaugh, who is a contributor to TypeScript: http://stackoverflow.com/a/30357635. \nYou can also look at the original discussion on TypeScript for the ES6 Module support design: https://github.com/Microsoft/TypeScript/issues/2242.\n. I know it has been a while, but the TypeScript document has been updated too, please have a look at:\nhttps://www.typescriptlang.org/docs/handbook/writing-declaration-files.html\nAdditionally, see the page of Modules.\n. The 2.0 branch is for TypeScript 2.0, which is still in Beta release currently. They have made many improvements for libraries such as yourself, that want to be able to include a definition file as part of the NPM module, while still supporting the different possible syntaxes (i.e. a comment, using require and using `import ... from 'go').\nI will have another look at your beta go.d.ts (I like this name better too), and see how well this works.\nTo answer how to import with a wildcard, you can use:\njavascript\nimport * as go from 'go';\nand now go will act almost exactly like the current namespace object.\n. As you have seen, there is no way to import all without a prefix or referencing each individual export. But I think that is close enough for most use cases.\nBy the way, the last import example is called a side-effect import (or something similar), and is used to cause a side-effect without actually using anything from the imported file.\n. ",
    "FritzHerbers": "Thx for the clarification and pointing to the existence of a generated key for the nodes in the palette diagram, which is copied over to the diagram.\nI successfully used your last proposal. thx again.\n. ",
    "Glidias": "Hmm.. saw the below Model documentation and i guess it's a limitation that i have to get around with when it comes to integrating GOJs graph's Transaction ChangeEvents with de.polygonal.ds.Graph data structures class.  (I'm storing a dynamically Graph-created de.polygonal.ds.GraphNode as a property called \"node\" within each GOJS Model node's data when a GOJS node is created, and each GraphNode consist of a dynamic val object where all my app-specific data is stored including positioning info).  Whatever transactions made on GoJS, is mirrored onto the related de.polygonal.ds.GraphNode/Graph instances accordingly (and i also then run whatever de.polygonal.ds.Graph traversal functions to perform any pathfinding/visibility calculated preview updates, etc. in real time). The thing is, GraphNode class has a next/prev property because it's part of a linked list...which thus results in the \"Too much Recursion\" problem when more than 1 GraphNode is added to the Graph because Model.toJSON will scan this custom \"node\" property and run through the \"next/prev\" pointers in the node's linked list.  Also, each GraphNode class instance has a reference pointer back to the Graph that it belongs to, and the Graph also consist of references back to it's GraphNodes.\nIn Model documentation...\n\nNote that JSON and other textual data formats cannot faithfully store all JavaScript functions. toJson and Model.fromJson do not try to save and load functional property values. You should arrange that all such functions, including event handlers, are established by your app. toJson and Model.fromJson also cannot handle circular references; any sharing of references will be lost too. They also skip properties that are not enumerable, those whose names start with an underscore, and those whose values are undefined.\n\nWhat I could do though, is perhaps, underscore prefix \"_\" the node property? Would that skip it? BUt anyway, I think i'm just going to avoid toIncrementalJson for now. But I think I should consider using an integer reference key ID or/and proxy helper setter/getter methods later on or something for the \"node\" reference, so the actual innards of the class instance doesn't get exposed to JSON.\neg. For the app-specific value object, I have sharing of certain \"library\" data objects between nodes.\nGoJS Model GraphNode....contains \n -> de.polygonal.ds.GraphNode....which contains\n       -> LocationPacket (unique per node) ...which contains ->\n               LocationDefinition (shared content between nodes), \n               LocationDefinitionOverwrites (shared or unique content  among nodes),   \n               LocationState (unique per node).\nBasically, I need a binding system that allows changing one LocationDefinition's details to affect the visuals of all related Nodes that are using that same location definition library reference. But the data-binding paradigm is purely 1 to 1 (ie. it only visually updates the current instance being updated)...without the possibly of sharing library/theme references between nodes and having the other related nodes update as well. I guess i have to run through the model manually to visually update those nodes with any matching/related definitions via e.model.updateTargetBindings(o, \"text\");.\nMy \"text\" property actually drills into the LocationPacket to see if there is an (optional) label in LocationDefinitionOverwrites or LocationDefinition itself (which can be shared between nodes).... In the end, I resorted to a getter/setter proxy using Object.defineProperty(o, \"text\", someProxyToHandleGetterSetterOps), because the GOJS two way databinding with conversion functions was a bit too hard to work with this situation which was more complex. I had to manually update the related nodes' bindings in the model that were sharing the same LocationDefinition when I detected a ChangedEvent for \"text\" property. With a getter/setter proxy, I could also handle various backend database/data-structure resolutions/linkage changes when the \"text\" property changes accordingly. \n. ",
    "hstarorg": "@simonsarris In my browser,is this: \n.\nMy browser is : Chrome 48.0.2564.109 m\n. I think so, but I have no solution to resolve it.\n. ",
    "dominicdesu": "Hi @simonsarris,\nthanks for fixing this issue, it works fine now on the Surface using finger gestures.\nWhen playing around with the Surface Pen, though, I realized that I cannot access the context-menu. I assume the Surface is sending a different event when long-pressing with the pen compared to long-pressing with a finger. As the pen has no right-click, I don't know how else to open the conext menu using the pen. Is this something which can be \"fixed\" in goJS or do I need to find a seperate solution?\n. ",
    "herecydev": "I'm seeing the same problem. The package.json looks fine, both main and typings are pointing to the correct files. The typescript compiler throws the following: error TS2306: File 'C:/snipped/node_modules/gojs/release/go.d.ts' is not a module. The fix suggested at the top does work. The problem I have with the whole thing is that this is not a sustainable practice. I can't comment this code out during CI deployment or on another developer's machine. Can you please take another look at this problem.\n\nTypescript 1.8.10. \nGoJs 1.6.15. \nNode v4.4.7.\n\n. > I need to change following lines in go.d.ts file:\n\ndeclare module \"go\" {\n export = go;\n}\nto\nexport = go;\n. With ES6 syntax; import * as go from \"gojs\"\n. I can have a look at the transaction, but I didn't believe that was necessary? I can't see where you're performing a transaction in the flowchart example. I would like to keep the \"AvoidsNodes\" as it's exceptionally useful, but are you sure that 2 links that share no ports, but the same fromNode are supposed to be on the same grid? Looking at the first image, the rendering seems much clearer (and intentional). If they really are supposed to be joined, how can I get it into a state similar to the first image (separate lines if the links share no ports with another link)\n. After some tweaking, this turned out to require setsPortSpot to false.\n. \n",
    "Chali-Anne": "Hi,\nI set it on the Palette's model with a cast and now it displays groups properly.\nThank you!\n. ",
    "wu-sheng": "Just send the mail. Have some questions about license things.. ",
    "akagaeng": "I'll show you an example. I applied GuidedDraggingTool on flowchart example(http://gojs.net/latest/samples/flowchart.html). I added a few lines to apply GuidedDraggingTool on it.\n```\n\nmyDiagram=\n$(go.Diagram, \"myDiagramDiv\",\n        {\n         draggingTool: new GuidedDraggingTool(),\n          \"draggingTool.horizontalGuidelineColor\": \"blue\",\n          \"draggingTool.verticalGuidelineColor\": \"blue\",\n          \"draggingTool.centerGuidelineColor\": \"green\",\n          \"draggingTool.guidelineWidth\": 1,\n        });\n```\nWhen I drag a shape from the palette to the right division, it shows guidelines after drop.\n(It successfully clears guidelines existing shape in the right division, it happens when dropping shapes from the palette on the left side.)\n\n. ",
    "gaoconggit": "I'm sorry to see this answer now.\n$(go.Picture,\n            {\n                name: 'Picture',\n                maxSize: new go.Size(80, 100)\n               //,desiredSize: new go.Size(80, 100)  //When using desiredSize, if the image 404, go.js will die\n                , margin: new go.Margin(3, 3, 3, 3)\n            }\nWhen using desiredSize, if the image 404, go.js will die,Use maxSize to solve this problem\n. ",
    "lifanmvc": "It's work,thanks you very much.\n\u53d1\u81ea\u6211\u7684 iPad\n\n\u5728 2017\u5e747\u67084\u65e5\uff0c\u4e0a\u534812:00\uff0cWalterNorthwoods notifications@github.com \u5199\u9053\uff1a\nDoes this help: http://gojs.net/latest/intro/resizing.html ?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "GodFaker": "yeah ,i just make a suggestion ,because i find that there is a example for ng in the sample folder\u3002if there is a simple demo for vue, it can give a direct guide for vuer that the product can work fine with vue\u3002anyway, i am happy for you add a example:)haha. ",
    "pingwei-sun": "Improper use\uff0cIs not set maxHistoryLength. ",
    "nephilimboy": "thanks for reply\nit solve now,, i used extensionsTS/OrthogonalLinkReshapingTool.ts instead of extensions/OrthogonalLinkReshapingTool.js file, but why the js file doesn\u2019t work with typescript?\ni added that js file in my script section on .angular-cli.json like this \n\"./assets/OrthogonalLinkReshapingTool.js\"\nand it doesn\u2019t work. even if i add it in my index.html () it doesn\u2019t  work either. only if i use the TS version, it work properly. i know the TS files convert to js file at the end so it shouldn't  problem if i use js file or ts file as library, so why it matter in this case?. ",
    "dominic-simplan": "Thanks!. I see, so it wasn't about pressing hard after all \ud83d\ude03 .\nI have changed the delay to 20 and now it's what I've expected. Thanks also for the background information!. ",
    "XiaoxinJiang": "Thank you very much.I try it. ",
    "njwest": "Duly noted, thanks!. ",
    "milu2003": "ok. ",
    "cheng0532": "I solved by overriding PanningTool.canStart\uff01. ",
    "RonjaKnudtsen": "Yes, this is the dependencies for setting up any Angular project. But there are no details as to how to import GoJS library into Angular. . "
}