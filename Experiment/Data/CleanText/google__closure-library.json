{
    "joeltine": "Bug was in reference to old demos page. I tested the new event target demo, and it works.\n(Beware alert spam)\nhttp://closure-library.googlecode.com/git-history/0148f7ecaa1be5b645fabe7338b9579ed2f951c8/closure/goog/demos/index.html\n. This is obsolete. iter.js compiles fine.\n. Obsolete, we have a new generated API page @ http://google.github.io/closure-library/api\n. Can't repro. This works in this test case:\nhttps://jsfiddle.net/c2c6zvrk/2/\n. I have a fix internally for this. \n. Fixed in b17e45c44d4eb676b47ba08595d56c10db615ff6\n. Fixed in 1a6a0acd85042859d63802976ad0ace352e8055f \n. @nanaze can you PTAL at the PR for this issue? They've signed the CLA.\n. Closing, we don't formally support PhantomJS.\n. WAI - The API is \"Html5HistoryState\"... for browsers that support Html5. history.js is the cross-browser alternative.\n. Fixed in 20be95baf89cb36dfd55c708d69a375e2326123a \n. Compiler issue\n. Can't repro.\n. #290 needs to be merged to resolve this\n. Would consider this obsolete in favor of https://github.com/google/closure-library/issues/379\n. Can't repro.\n. goog.graphics is deprecated \n. Fixed in 1e2dbd63d3631c19ef1addedf1386301350f0a4e\n. No current or future plans for gesture support in closure-library\n. WAI - This is more of a stylistic choice, am/pm is common.\n. Not feasible - impossible to account for all vendor UA variations\n. Waiting for user response.\n. Obsolete - fixed in later versions \n. Duplicate of #118 \n. Fixed in c0d77a545fcbca0ecf1782bd68e95b1903d4a098\n. Wasn't clear if user needed runtime or compile time capabilities. In either case, reviewers provided solutions to both with no response from user.\n. WAI - It correctly increments a full day, even over DST boundaries. \n. Can't repro\n. Fixed internally\n. Not enough info to repro\n. This should be fixed in https://github.com/google/closure-library/commit/31359fa3304a066b58c254fc73240c290cf35ead. LMK, and I'll re-open if you're still having this issue.\n. Creating an enum for HTTP verbs doesn't add much value. These verbs never change and creating an enum would be redundant, e.g., \"GET: 'GET'\". What is useful, however, is groupings based on semantic meaning of the verbs. E.g, https://github.com/google/closure-library/blob/master/closure/goog/net/xhrio.js#L245\n. WAI all of those initial values are initialized to 0 in startDrag and are only updated when a drag occurs.\n. Not enough info to repro.\n. Can't merge the fix if I wanted to, no CLA from author. That said, this use case is pretty obscure. No one has complained in > 2 years about it, and, AFAICT, very few ppl actually dispose pubsub anyway.\n. No CLA and goog.ui is maintenance only.\n. Obsolete IE7 issue \n. Fixed in https://github.com/google/closure-library/commit/35cece6353d81454bd938c3d396704fe401302aa\n. Not worth the refactoring effort considering it's been this way for 2 years.\n. Incorrect assumption about AssertionError's purpose. assertThrows should be used instead.\n. Subjective and arguable improvement to API. Not worth effort at this point.\n. TL;DR any URIs encoded via escape() have the potential to throw. escape() encodes them in a format not compatible with the standard decodeURIComponent, and has been deprecated since ~2000. \nOne potential fix here is to find/replace any escape() encodings that deviate from the standard UTF-8 encodings. From ref-urlencode, it seems to be approximately %80 through %FF.\nFrom the original issue:\nMost types of malformed URIs are handled incorrectly, but this one throws an exception:\nvar uri = new goog.Uri(\n    'http://www.cpdee.ufmg.br/~elt/docs/DSP/Microsoft%20PowerPoint' +     \n    '%20%20Aula_01_Aritm%E9tica.pdf')\ndecodeURIComponent blows up trying to decode it.\nMore concretely decodeURIComponent('%E9') throws.\nescape('\u00e9') -> \"%E9\"\nencodeURIComponent('\u00e9') -> \"%C3%A9\"\n. For posterity, taken from the original issue: \nThe thing to note here is that it's not always necessary to include deps.js in your compilation. It's only necessary when you happen to be using a Closure library that references a type that is not goog.require'd in the file. This can happen when a file references a particular type in annotations in comments (e.g., @type {Foo}), but never actually uses the type directly (e.g., invoking via \"new\" or referencing its statics). For an explanation on why we do this see the thread: https://code.google.com/p/closure-library/issues/detail?id=401. \n. Updated closurebuilder docs to mention deps.js https://developers.google.com/closure/library/docs/closurebuilder?hl=en#additional-flags-to-closure-compiler\n. No longer an issue in the new generated API\n. Fixed in https://github.com/google/closure-library/commit/98aad107ae6fa20c0a2f06b0ab827fa361017c6b\n. Can't repro.\n. Obsolete. Method has been re-written since original issue.\n. This more of a feature request that doesn't seem high priority to me.\n. can't repro\n. Can't repro\n. Fixed in https://github.com/google/closure-library/commit/31359fa3304a066b58c254fc73240c290cf35ead\n. UI being in maintenance, this isn't worth the fix unless someone sends a PR.\n. Have an internal fix for this.\n. > What's the right way of calling the super class method?\nThe way I did in the commit.\nBased on this comment in the compiler, the base calls are special cased. They get re-written without the string literal method name. \n@concavelenz to correct me if I'm wrong.\n. From original issue:\n\nIn goog.net.XhrManager.prototype.handleComplete_:\nvar request can be undefined if the request has been retried too many times.   The request is removed from this.requests_ in the retry_ method when the retry limit is reached; a subsequent completion state change will land in handleComplete_ with the request having already been disposed.  This can occur, for example, when network connectivity is lost or a remote server goes down.\nIf the request variable is undefined, then the handleComplete_ method will throw an exception when it tries to check request.hasReachedMaxRetries().\nThe fix is trivial:  Just check that request is defined before asking for request.hasReachedMaxRetries().  I believe you still want to send the COMPLETE event in this case; the rest of this method is already proof against request being undefined.\nFor what it's worth:  handleError_ has exactly the same problem.\n. Obsolete, externs were updated a while back.\n. I can't understand the issue.\n. The TL;DR here is that using \"toString\" on each key in a Map isn't as robust as it could be. Other alternatives could include using \"===\", a deep equals like goog.object.equals, or allowing a custom key equality function.\n\nA code example displaying the issue:\n```\nvar key1 = function () { return 'key' }\nvar key2 = function () { return 'key' }\nmap.set(key1, 'foo');\nmap.set(key2, 'bar');\nmap .get(key1); // 'bar'\nmap .get(key2); // 'bar'\n```\n. Fixed in https://github.com/google/closure-library/commit/8a339dbb1dd822bd042f05040b93cdd64f68e02a#diff-2041ed0ecf43713bcd46c4e3f6958723\n. Tested internally. This works on IE8 now, AFAICT.\n. Fixed\n. No response w/ needed details to attempt to repro.\n. Fixed somewhere along the way \n. Fixed\n. Fixed\n. This is impossible to implement.\n. Not enough info to repro \n. Will not fix - bug in non-browser environment \n. obsolete browser bug, since fixed\n. apparently fixed\n. Either this was fixed or the user's report was invalid, because I can't repro\n. Create and dispose goog.editor with monitoring instances as below.\ngoog.Disposable.MONITORING_MODE = goog.Disposable.MonitoringMode.PERMANENT;\ndocument.body.appendChild(goog.dom.createDom('div', {'id': 'toolbar'}));\ndocument.body.appendChild(goog.dom.createDom('div', {'id': 'editMe'}));\nvar myField = new goog.editor.Field('editMe');\n/*\n- @param {goog.editor.Plugin} plugin The plugin to register.\n  /\n  var registerPlugin = function(plugin) {\n  myField.registerPlugin(plugin);\n  myField.registerDisposable(plugin);\n  };\n// Create and register all of the editing plugins you want to use.\nregisterPlugin(new goog.editor.plugins.BasicTextFormatter());\nregisterPlugin(new goog.editor.plugins.RemoveFormatting());\nregisterPlugin(new goog.editor.plugins.UndoRedo());\nregisterPlugin(new goog.editor.plugins.ListTabHandler());\nregisterPlugin(new goog.editor.plugins.SpacesTabHandler());\nregisterPlugin(new goog.editor.plugins.EnterHandler());\nregisterPlugin(new goog.editor.plugins.HeaderFormatter());\nregisterPlugin(new goog.editor.plugins.LoremIpsum('Click here to edit'));\nregisterPlugin(new goog.editor.plugins.LinkDialogPlugin());\nregisterPlugin(new goog.editor.plugins.LinkBubble());\n// Specify the buttons to add to the toolbar, using built in default buttons.\nvar buttons = [\n  goog.editor.Command.BOLD,\n  goog.editor.Command.ITALIC,\n  goog.editor.Command.UNDERLINE,\n  goog.editor.Command.FONT_COLOR,\n  goog.editor.Command.BACKGROUND_COLOR,\n  goog.editor.Command.FONT_FACE,\n  goog.editor.Command.FONT_SIZE,\n  goog.editor.Command.LINK,\n  goog.editor.Command.UNDO,\n  goog.editor.Command.REDO,\n  goog.editor.Command.UNORDERED_LIST,\n  goog.editor.Command.ORDERED_LIST,\n  goog.editor.Command.INDENT,\n  goog.editor.Command.OUTDENT,\n  goog.editor.Command.JUSTIFY_LEFT,\n  goog.editor.Command.JUSTIFY_CENTER,\n  goog.editor.Command.JUSTIFY_RIGHT,\n  goog.editor.Command.SUBSCRIPT,\n  goog.editor.Command.SUPERSCRIPT,\n  goog.editor.Command.STRIKE_THROUGH,\n  goog.editor.Command.REMOVE_FORMAT\n];\nvar myToolbar = goog.ui.editor.DefaultToolbar.makeToolbar(buttons, goog.dom.getElement('toolbar'));\n// Hook the toolbar into the field.\nvar myToolbarController = new goog.ui.editor.ToolbarController(myField, myToolbar);\ngoog.events.listen(myField, goog.editor.Field.EventType.LOAD, function() {\n  myField.makeUneditable();\n  myField.dispose();\n  myToolbarController.dispose();\n  var undisposedObjects = goog.Disposable.getUndisposedObjects();\n  console.log(undisposedObjects.length);\n});\nmyField.makeEditable();\nWhat is the expected output? What do you see instead?\nThe console output\nexpected: 0\nactual: 3\nWhat version of the product are you using? On what operating system?\nr2325\nPlease provide any additional information below.\nThe undisposed objects:\ngoog.async.Delay in goog.editor.Field\n(https://code.google.com/p/closure-library/source/browse/trunk/closure/goog/editor/field.js?r=2325#140)\n(https://code.google.com/p/closure-library/source/browse/trunk/closure/goog/editor/field.js?r=2325#868)\ngoog.events.EventHandler in goog.editor.plugins.AbstractBubblePlugin\n(https://code.google.com/p/closure-library/source/browse/trunk/closure/goog/editor/plugins/abstractbubbleplugin.js?r=2325#63)\n. From original issue:\nWhat steps will reproduce the problem?\n1. HTML:\nab\n2. JS:\nvar hc = new goog.ui.HoverCard({ \"A\": \"tooltip\" });\nhc.setTransition(showTransition, hideTransition)\nhc.addEventListener 'beforeshow' ->\n  hc.getAnchorElement() === undefined\n1. move your mouse from link a to link b\nWhat is the expected output? What do you see instead?\nexpected: hc.anchor is link b.\nactual: hc.anchor is undefined.\nWhat version of the product are you using? On what operating system?\nlatest.\n\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11\"\nPlease provide any additional information below.\nstack trace:\n```\ngoog.ui.Tooltip.onHide_ (tooltip.js:524)\n\nthis.anchor = undefined; // this.getState() === goog.ui.Tooltip.State.WAITING_TO_SHOW\ngoog.ui.AdvancedTooltip.onHide_ (advancedtooltip.js:205)\ngoog.ui.HoverCard.onHide_ (hovercard.js:344)\ngoog.ui.PopupBase.continueHidingPopup_ (popupbase.js:624)\n(anonymous function) (base.js:1093)\ngoog.events.Listener.handleEvent (listener.js:178)\ngoog.events.fireListener (events.js:782)\ngoog.events.fireListeners_ (events.js:758)\ngoog.events.dispatchEvent (events.js:881)\ngoog.events.EventTarget.dispatchEvent (eventtarget.js:181)\ngoog.fx.Animation.dispatchAnimationEvent (animation.js:451)\ngoog.fx.TransitionBase.onEnd (transitionbase.js:176)\ngoog.fx.dom.PredefinedEffect.onEnd (dom.js:117)\ngoog.fx.dom.FadeOutAndHide.onEnd (dom.js:508)\ngoog.fx.Animation.stop (animation.js:306)\ngoog.ui.PopupBase.setVisible (popupbase.js:438)\nif (this.hideTransition_) this.hideTransition_.stop(); // state_ === goog.fx.TransitionBase.State.PLAYING\ngoog.ui.Tooltip.positionAndShow_ (tooltip.js:614)\nthis.anchor = el;\ngoog.ui.Tooltip.maybeShow (tooltip.js:551)\ngoog.ui.HoverCard.maybeShow (hovercard.js:403)\n```\n. From original report:\n1. Have an even viewSize.width & viewSize.height \n2. Use Google Chrome Version 23.0.1271.52 beta on Ubuntu 12.10\n3. Display a ui.Dialog\n\nWhat is the expected output? \nThe dialog should show fine\nWhat do you see instead?\nThere is a blank space between the border and the dialog (see attached picture)\nWhat version of the product are you using? \nsvn revision 2309\nOn what operating system?\nUbuntu 12.10\nPlease provide any additional information below.\nThis is caused by the .5px of the positioning (top & left) - see attached screenshot.\nDigging into the code I have noticed that goog.style.setPosition() uses rounded values but for Gecko only - see goog.style.getPixelStyleValue_().\nI guess Math.round() is avoided for speed reasons ? \nIf this is the case, isn't computing buggyGeckoSubPixelPos (in setPosition) time consuming ? May be the compiler is able to \"cache\" the result ?\n. Screenshot:\n\n. Fixed in https://github.com/google/closure-library/commit/572dbc8b6aaae1660930dd3f4992a5c74ea117b5#diff-e68c15d9233319f7494503a7f1a813e3\n. Expected behavior. See original issue for details.\n. Confirmed only on FF16, let you decide what you want to do.\n. asertEquals('../a.js', goog.Uri.removeDotSegments('../a.js'))\nThe .. case needs to updated to:\n} else if (segment == '..') {\n      if (out.length > 1 || out.length == 1 && out[0] != '') {\n        out.pop();\n      } else if (leadingSlash && pos == segments.length) {\n        out.push('');\n      } else {\n        out.push(segment);\n      }\nI haven't run the tests so maybe this is incomplete or breaks something else\n. SVN is obsolete\n. This was fixed somewhere along the line, but I've added a regression test internally that should be out soon.\n. Fixed in https://github.com/google/closure-library/commit/5c7b7354f1eae77c45a4a8d577d481b482fff3a8#diff-0e9f1694ef03072a1ec1a38c6fdafb69\n. Invalid use of calcdeps.py\n. Nothing actionable\n. fixed in https://github.com/google/closure-library/commit/2e7eb4561a49d20205f656031906448221a1c794\n. Have fix internally for this. \n. not seeing this\n. Have an internal fix pending for this\n. question\n. Fixed in https://github.com/google/closure-library/commit/b2cc62aeec361ea1279db21b3ed70823375d8dad#diff-01579e95a5b65736bffa763fc4797129\n. @ziegs can you help determine the appropriate priority for this?\n. Fixed some time in 2014\n. obsolete: date method was rewritten\n. Fixed  in https://github.com/google/closure-library/commit/7e1771d87e1800f65e0f38c179639f82715d4cac\n. Fixed\n. No CLA for patch\n. Invalid report\n. Obsolete\n. I confirmed this is actually broken for IE10 and IE11. I've pinged the original author to get a CLA for his patch.\n. For the record... this change was an absolute nightmare to try to submit internally. A lot of internal code really wasn't equipped to work with ActiveXObject. As a compromise I added a new opt-in param to prefer ActiveXObject, when available. This can be used by those who need select*Node support on IE.\n. Fixed in https://github.com/google/closure-library/commit/fc52dfe80f2022cd1d1e4860cb8229479406a993\n. Fixed\n. Fixed in https://github.com/google/closure-library/commit/fc68343662bd3f1f9987a72b72bea094d8f0cab0\n. invalid use of test system\n. Was never repro'd\n. Fixed\n. No real issue here, just recommendations (some obsolete)\n. No CLA and no response\n. Incorrect assumption\n. Source of confusion around including  deps.js in compilation. This was clarified in the docs @ https://developers.google.com/closure/library/docs/closurebuilder?hl=en\n. obsolete documentation report\n. Original bug was resolved\n. No CLA and demo patch not really necessary \n. Fixed a while back\n. Obsolete docs\n. Tool is deprecated\n. This is actually WAI (the unit tests explicitly test for this behavior), albeit I can see how this would be confusing. I'll update the comment to clarify.\n. Disposed in EventTarget super class\n. Fixed\n. Can't repro\n. UI patch for extra functionality \n. Sounds like the reviewer decided not to merge\n. Bug only w/ old API docs\n. Patch obsolete w/ latest version \n. UI Feature request\n. Fixed\n. Can't repro must've been fixed\n. fixed in https://github.com/google/closure-library/commit/a3737f04b763af9f193223f0dace98175c8ee9f8\n. This API doc no longer exists\n. No mention of the affected Class or Lib\n. UI Feature Request\n. This member no longer exists in the class\n. This has been fixed\n. UI == maintenance \n. UI is maintenance, no new features\n. Fixed\n. This has been fixed\n. At the very least, we should document this behavior. I'll add something.\n. No new feature requests for UI\n. Since 2010 touch/mobile has made its way into various parts of the library \n. Invalid issue but common source of confusion\n. I honestly can't understand this one\n. Fixed in https://github.com/google/closure-library/pull/304\n. Not enough context\n. Gears is obsolete\n. merged fix in https://github.com/google/closure-library/pull/298\n. Closure's API docs are now generated with open-source, js-dossier.\n. Obsolete report.\n. AFAICT, fixed long ago.\n. @nanaze @concavelenz This was first opened in 2009. Is this still worthwhile?\n. This test has been passing for a while now.\n. This particular issue is obsolete now that we use js-dossier... but that <pre> formatting is broken there as well.\n. It's a bit easier if I just take over the PR (few lint issues and want to run internal tests before merging). The canonical is now https://github.com/google/closure-library/pull/544.\n. @nicks if you rebase this on the current master, I'll look at merging. Otherwise, I can take it over. Let me know.\n. Moving this PR into https://github.com/google/closure-library/pull/579. \n. This would be much easier to diagnose if you could provide a failing test case. Here's a fiddle template you can use to load Closure deps: https://jsfiddle.net/2mjc800g/\n. @nanaze Would appreciate if you took a look at this. \n. PR stagnated.\n. Using createDom is a reasonable way to do this\n. This doesn't sound like an issue w/ Closure.\n. For posterity, the API link is http://google.github.io/closure-library/api/ and its on the main github page. \nThe demos link on the developers site is pointing to http://google.github.io/closure-library/source/closure/goog/demos/\n. @dcodeIO Hi, can you please sign the CLA or give permission to the author in #498 so we can use this fix?\n. #498 is now the canonical. Thanks for the fix!\n. @jvu One thing that would help speed things up is to get the PR into Google JS Style conformance. There are quite a few basic things (e.g., 80 col limit, spacing) that could be addressed now and save your reviewer time. Here's the style guide. The Closure linter should help.\n. You should be able to just run this to lint: https://github.com/google/closure-library/blob/master/scripts/ci/lint_pull_request.sh. If not, just use the same gjslint arguments.\n. Hmm, is this PR rebased on top of the current master?\n. Actually, NVM, I see you merged the latest. I really want to run the CI tests against this PR. I'll troubleshoot the issue.\n. In the meantime, you're going to need to squash all your commits down into 1. \n. Nope: http://gitready.com/advanced/2009/02/10/squashing-commits-with-rebase.html. \n. FYI: https://github.com/google/closure-library/pull/556 should fix the CI failure. Can you rebase on master to run the tests again?\n. @jvu I'm still seeing 17 commits for this PR. I should only see 1.\n. Yes, merging master over this period of time can making squashing difficult. You have options:\n1) When you do the interactive rebase (-i), you can actually re-arrange your commits however you wish. I.e., delete the lines containing your commits and paste at the top of the history as a contiguous set. Then the \"squash\" instructions should work much more nicely.\n2) Create a separate PR as you suggested.\n. Honestly, something like #2 is probably easiest at this point considering it's only 3 files. You could just create backups of the 3 files, force this branch to be equivalent to master, paste in your back ups, then --force push the branch. This would allow us to preserve the comment history in this PR.\n. Also had another suggestion from a co-worker. You can:\n1) Create a new branch synced to latest master\n2) From the new branch run\ngit checkout old-branch -- file1.js file2.js...\n3) This will just cherry pick the files you need from this branch into a fresh one. Commit.\n4) Do a git reset --hard in the old-branch to match the new clean branch.\n5) --force push for this PR.\n. Just FYI: I'll be out of office until Monday. \nOn a side note, I just took a closer look at your changes, and I think I'm going to need to do a more thorough review myself. There are a few stylistic things that stand out, and that subformatFixed method is a monolithic monster. It's hard to believe there can't be some improvements here.\n. Argh... I just found out that Sauce Labs doesn't work with Travis for PRs outside of the main repo :(. That's why it continues to fail.  I'll figure out what to do on Monday.\nNote that due to security restrictions, the Sauce Labs addon is not available on pull request builds.\n. Re: the CI failures, I've disabled the tests for external PRs in https://github.com/google/closure-library/pull/557. Can you rebase on to that change to get Travis green?\n. Finished initial pass. In general, I'm finding it difficult to read and understand this. I think it mostly has to do with 1) my general lack of experience with this i18n lib 2) it's doing too much all in the same method and 3) this problem seems to require (probably?) a brute force approach. \nI think once the logic is broken up, it'll be easier. LMK when ready and I'll take another pass. \n. Something's weird with the PR, there should only be 1 commit.\n. Not quite, it should say 1 commit, not 22, if done correctly.\nWhen you want to update your branch, rebase onto the latest master instead of merging to avoid these issues and make squashing commits easier. Also git commit --amend (doesn't add a new commit) followed by a git push ... --force will allow you to avoid squashing altogether.\n. On a side note, I'd recommend compiling/linting before pushing new changes to this PR. Will help you iterate faster. Take a look at https://github.com/google/closure-library/blob/master/scripts/ci/compile_closure.sh for a command to compile.\n. You have a type mismatch. You're passing in a nullable parts and returning it, but the @return annotation requires that it be non-nullable. \nChanging all your function params to non-nullable should fix it.\n. Much better! Thanks for sticking with it. \nI don't know what's wrong with googlebot. I manually verified we have a CLA for @jvu with email jvu.calpoly@gmail.com. Maybe you changed your account's email address?\nI'll merge this now, and hopefully it sticks internally. Thanks again!\n. https://github.com/google/closure-library/pull/424 is the canonical \n. Duplicate of https://github.com/google/closure-library/issues/327\n. This might've been fixed in Chrome as I can't repro the warning. \n. initialValue is a non-optional argument of goog.array.reduce (note, its type {?}), so your initial failing use case is an improper use of the closure reduce API. \nThat said, it seems reasonable to make it optional (that is, {?=}) to conform to the spec. If you're interested, feel free to create a separate PR specifically for that issue.\n. @moagrius Create a PR and I'll comment.\n. No response.\n. I don't think this is behavior we want to support, but I may not be understanding your proposal. It'd be much easier to review it in code form. If you feel like this would be an improvement, create a PR and re-open this issue.\n. Relevant docs @ https://github.com/google/closure-compiler/wiki/Manage-Closure-Dependencies\n. Thanks for the heads up on this Paul et al.\nThe goog.json.serialize(undefined) case has changed since this was first opened.  In 35c9311042b95796d7b12f58cd2bec6086052f7e serializing undefined now returns 'null'. \nThe fix to serialize a function property seems reasonable. Because this PR has potential to break a bunch of internal stuff and the PR has gotten out of sync with the current implementation, I'm not going to merge it directly. I'll work on a fix internally, and push it out crediting you.\nMoving to https://github.com/google/closure-library/issues/491\n. No follow up on PR request.\n. Finally done in https://github.com/google/closure-library/pull/528! It's only Chrome atm, but will expand to multiple browsers on Sauce labs soon. Track @ https://github.com/google/closure-library/issues/554\n. This is WAI. See the comment at https://github.com/google/closure-library/blob/master/closure/goog/i18n/datetimeparse.js#L105\n. I'm not seeing this. When I emulate an IE11 UA, goog.userAgent.VERSION is 11. See https://jsfiddle.net/2mjc800g/13/. Please provide a repro case and I'll re-open.\n. @coruus are you still interested in this PR? Looks like there are several remaining comments that need to be addressed. \n. Closing due to lack of response.\n. Hi, I'd like to make this change, but to add your change I'll need you to sign the CLA. Please follow the instructions at https://github.com/google/closure-library/blob/master/CONTRIBUTING\n. I'll re-open once there's a CLA. \n. Merged at SHA d07e083774f11d7dc4f84eba497d2d27f1407229\n. I'm not too familiar with this API, but I took a quick scan. My guess is, it's failing because you didn't create the element via createDom().\nAn example:\njavascript\nvar graphics = new goog.graphics.CanvasGraphics(100, 100);\ngraphics.createDom();\ngraphics.drawText('foo', ...);\n...\ngraphics.render(someElement);\nBTW, there is a builder method createGraphics that does this for you. It appears to be the standard way to construct these graphics subclasses. \nThis API could obviously be much better documented. Also, the fact you can even attempt to draw something with an uninitialized element seems pretty bad. It should at least throw an exception with something like \"Did you create the DOM?\". Unfortunately, this library is deprecated, and we can't justify spending time on it. However, I would be willing to review straightforward/simple PRs if it helps your project. \n. goog.ui is considered only in maintenance mode for serious issues. For a work around, you can just apply a similar fix that the PR was attempting to-do.  E.g.,\njavascript\ndatepicker.setShowOtherMonths(false);\ndatepicker.setUserSelectableDataRange(\n    goog.date.DateRange.thisMonth(datepicker.getDate()));\n. Updates on this?\n. Good job on the test! I'm impressed. It's testing exactly what I expect and written in accordance with the surrounding style. Well done.\n. Thanks!\n. Is there a justifiable reason for this change?  (perf doesn't seem to work)\n. Possible reasons EARLY_CANCEL is dispatched: disabled dragger, dragging with the right mouse button or releasing the button before reaching the hysteresis distance.\nPlease provide a repro case using https://jsfiddle.net/c2c6zvrk/ if you can demonstrate a bug.\n. What Doctype are you using? Any chance it's related to http://stackoverflow.com/questions/4815283/using-doctype-let-scrolltop-return-0-why.\n. NVM, just saw your commit comment using HTML5 DocType.\n. See comment in https://github.com/google/closure-library/pull/423.\n. This is currently hard to test because, sadly, no one has a Windows device around here.  Is this reproducible in desktop IE by chance... or maybe even an emulator?\nOne thing that's curious is that all the info I can find on this issue seems to be for older doctypes only. It seems odd this would fail only for a semi-modern version of IE, with HTML5 doctype, and on mobile. \n. I found some emulators hosted by Windows: https://msdn.microsoft.com/en-us/library/windows/apps/Mt162269.aspx. Is this the same version you have?\n. I spent some time on this today, and I just simply wasn't able to reproduce this on any of the emulation tools available to me. Emulating Windows phone w/ IE (regardless of version) always increments the scrollTop properly. I even fiddled with the doc modes, and all worked well. Perhaps this is something specific to the manufacturer? \nBeyond that, this fix would likely need to be made in the underlying getDocumentScrollElement_  method whose job it is to return the appropriate scroll element for every UA. That's the real root cause of this.\n@manakor Please let me know if this is reproducible on something I can easily test without the specific device you mentioned. I'd be happy to take another look.\n. Unfortunately, it looks like the original change this was based on got clobbered in https://github.com/google/closure-library/commit/889d16ae55c74aa0144d0be29b61243a9a49dcf7.  This could make merging messy. \nI'll take a look at a PR based off the current master, if you're still interested.\n. Does this PR make https://github.com/google/closure-library/pull/337 obsolete? \n. Overall, the PR LGTM, but I just want to be 100% sure I understand the issue with targetTouches.\nIs it this phrase that can cause unexpected results: ...whose touchstart event occurred inside the same target element as the current target element.? In other words, the event target is the constraining factor, whereas changedTouches is agnostic to where the event actually occurred. \n. Fixes https://github.com/google/closure-library/issues/41\n. Cool, LGTM. Ignore the Travis failure. It's from an unrelated change.\n. Looks like a lint error in this PR.\n---- FILE  :  /home/travis/build/google/closure-library/closure/goog/fx/dragger.js -----\nLine 454, E:0132: Unused private member: this.mouseDownTime_.\nFound 1 error, including 0 new errors, in 1 file (2 files OK).\n. Haha! You're right. I'm surprised this was never caught internally.\n. No worries, I can do it internally.\n. FYI lint fixed in https://github.com/google/closure-library/commit/af3bd978759bf301c1faf84af7ac8562ab596df9 \n. Thanks for your work and persistence on this.\n. Can you expand on why you don't trust changedTouches or targetTouches?\n. @myphysicslab I can understand your skepticism. In general, dealing with touch events uniformly is non-trivial.  \nUnfortunately, not being confident in how browsers handle it isn't enough to affect this PR. If you can provide reproducible evidence, I'd be happy to take a look.\n. FYI: finally got this to stick internally. Rolled forward in https://github.com/google/closure-library/commit/b2cc62aeec361ea1279db21b3ed70823375d8dad\n. Support table for timeout: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#Browser_Compatibility\n. Feel free to create a PR.\n. Fixed in https://github.com/google/closure-library/commit/59ef41bd24014cddaf96c5ce549b8ab7fed61744#diff-59ad00690c3488039024368101b23393\n. The libraries in goog/dom/animationframe are for this purpose.\n. I'm not too familiar with Closure in Node, but I'm a bit confused by this proposal. Shouldn't depswriter.py, when used correctly, just be auto-generating the correct relative paths for you? You shouldn't ever be manually editing your deps.js file.\nPlease re-open this issue with more context if you still think this is a valuable change.\n. Huh, that should probably be replaced with goog.isArrayLike\n. I'm pretty sure this is working as intended. If someone tries to resolve a relative URI that contains encoded query data, this will create a new absolute URI with the encoded params exactly as they are. Then, if someone tries to call a method like getEncodedQuery later on the absolute URI, it will double encode the query data. \n. Thanks for the code snippet, I see the issue now. Unfortunately, I can't reopen the PR. It looks like the branch changed.\nMy concern is that this change could be hard to land internally. People may have been coding based on the current behavior for resolve. \nI'm going to run some tests on the change to get a sense for the breakages.\n. Moved the issue to https://github.com/google/closure-library/issues/585\n. Fixed. See https://github.com/google/closure-library/issues/51\n. See https://github.com/google/closure-library/issues/352 \n. Thanks. \n. startDrag fires a goog.fx.Dragger.EventType.START event on touchstart. This change will affect that behavior by firing START on touchmove events instead of start. This is semantically incorrect and could break code relying on that assumption.\nBeyond that, it looks like the code wasn't intended to fit your use case. It specifically calls preventDefault() to avoid bad user experiences like following a clicked link instead of dragging an element.\n. See https://github.com/google/closure-library/issues/443\n. Ya, an unfortunate side effect of using form.elements. The easy answer to this is \"just don't use inputs named 'item'\". Given that the fix is likely ugly, we haven't had anyone complain about this internally, and the work around is trivial, it's probably not worth the effort.\nWhat we can do though is fail fast with a meaningful message (e.g., throw when elements returns a non-HTMLCollection or user passes the reserved names) or at the very least add a comment to the method. Just silently returning null now (which I assume is what it does) seems bad.\nFeel free to re-open and/or send a PR with either of these and I'll review it.\n. > the only way I see out of the pickle is to have some browser-exposed API tell us which we should be using\nDoes https://github.com/google/closure-library/commit/5c9bd9e268aae210d96ed6a1d7634f0666b7c844 resolve this?\n. Looks like the bug mentioned in the comment above the \"isFirefoxMobile\" line has since been fixed. I have a fix internally that just removes isFirefoxMobile altogether.\n. It's only internally. The fix will make it into master likely early next week.\n. It's for a 2 year old version of FF, so I'm not too worried. AFAIK, FF16+ has auto-update and this bug is from a specific version of FF22.\n. Fixed see https://github.com/google/closure-library/issues/34 \n. I added a test.\n. Had some trouble reverting the rollback internally. The blockers have been removed and we're going to try to get this change in next week. Stay tuned.\n. Still more blockers on this internally :(. It's being worked on though. May take longer than we thought.\n. Progress events are now supported as of https://github.com/google/closure-library/commit/42162f3d5ccbb2f59e3c8a9780ec2924e919dd91\n. Had to rollback this one twice internally, but I think we finally got it to stick with https://github.com/google/closure-library/commit/1e0c8103ae97a0e568e63bf5d6906597b25a4544\n. You're going to need to provide concrete steps to reliably repro the problem before anyone can consider looking at your PR. Here's a template you can use: https://jsfiddle.net/c2c6zvrk/. Feel free to re-open the issue once you have a repro case.\n. Sorry for slow response. Until recently, the open-source Closure has only had volunteer based upkeep.\nI'd hold off on this for now. We're still working out our plans for ES6 features and how to safely roll them out. It may involve modifying existing data structures (like goog.structs.Map) or even writing entirely new ones. Also, goog.structs.Map is one of the most commonly used libraries internally. There's a lot of room for breakages here, and a significant refactor would be hard to coordinate.\n. Can you provide a repro case with https://jsfiddle.net/2mjc800g/?\n. I can't repro this. I always see the -jar before --compilation_level. If you're still having this issue, please try using the latest version of closure and include the exact error output of the script.\n. Thanks. I'm going to see if the author of the change you linked is interested in giving it a look. Otherwise, if you're still interested, I'd definitely be willing to review a PR. I'll update this issue when I hear back.\n. Turns out the original author is on paternity leave for 2 weeks. If you want to take a stab at fixing this, the associated test file is style_test.js in the same dir. To run the test, just open the style_test.html file (also in the same dir) in a browser. Otherwise, this will probably just sit until he gets back.\n. You don't want to construct the actual DataTransfer object. You can just create a mock object. The existing test already does this. For example: https://github.com/google/closure-library/blob/eb26f425dbd99a70d2955d8fcc892f2fd0178acb/closure/goog/events/filedrophandler_test.js#L55\n. The PR  LGTM minus the quotes thing. I'l just change it myself before merging.\n. Can you create a simplified repro case? Here's a template you can use: https://jsfiddle.net/2mjc800g/.\n. Please re-open with a repro example.\n. CLDR still shows Bs from what I can see.\n. We generate these symbols directly from CLDR. Please file a change request directly against them at http://cldr.unicode.org/index/bug-reports. Once changed, it will eventually make its way into Closure.\n. We generate these symbols directly from CLDR. Please file a change request directly against them at http://cldr.unicode.org/index/bug-reports. Once changed, it will eventually make its way into Closure.\n. FYI: CLDR already has a ticket on this issue: http://unicode.org/cldr/trac/ticket/8417\n. I think HTTP_ERROR (code 6) is an appropriate response for this case. It's used for non-successful HTTP response codes, which 0 falls under. The debug text you mentioned could probably be improved.\nOFFLINE is when there is no network connectivity, and TIMEOUT is when there is literally a timeout.\n. It's not about the server, it's about the client. OFFLINE means the client doesn't have internet access. \n. The errorcode.js comments already do explain this.  If you think you can improve them, create a PR and I'll take a look.\n. Oops, looks like this commit was another victim of https://github.com/gingerik/closure-library/commit/889d16ae55c74aa0144d0be29b61243a9a49dcf7. Thanks for the update.\n. This PR is the first step to resolve #379\n. Canonical is now https://github.com/google/closure-library/pull/528. Thanks Jeff!\n. Oh, sorry. For some reason I was thinking that #330 was a fix for Long only. \nI do like the fix in #330 better. Can you change the PR to use >>> and can you also add the Long fix in this PR as well?\n. Actually, scratch that. Without a CLA or permission from the author of #330 I can't merge that change. We may just have to go with the 5 batch digits fix if we don't hear from him.\n. I'll try and contact the author. Hold off on doing anything just yet.\n. @gfredericks the author signed the CLA in https://github.com/google/closure-library/pull/330. Would you be willing to incorporate the Long fix into this PR as well? \n. Where's the fix for Long?\n. LGTM. \\o/ this is a good fix. Thanks!\n. I signed it!\n. I'm not too familiar with this code. Trying to see if I can get someone more appropriate to take a look.\n. Unfortunately, I couldn't find any volunteers, so you're going to force me to brush up on my bit arithmetic now :).\nIt'd be very helpful if you could provide a breakdown explanation of what your algorithm does, and also provide some example test cases that demonstrate the issue and why it occurs.\n. Can you address the CLA issue before I look at the PR?\n. I'm guessing it's the commits using your real name instead of \"ducklord\" are those that are causing issues. Is there another email address you use when making those commits? If so, sign the CLA w/ it. Otherwise, I'd recommend just creating a fresh PR against the latest master with the ducklord commits.\n. Can you give me an example use case where this method is more convenient than what's already in the API?\n. OOPS. My bad. I don't think the linter catches this particular jsdoc issue. \n. Thanks for the contribution!\n. Can you please be more explicit about what exactly this change intends to accomplish? A unit test would help as well.\n. Thanks. I actually am making this change when merging the original PR into the internal VCS. It should be out today or tomorrow.\n. The TL;DR is things got really out of sync, and the easiest/quickest way to get into a good state was to force an external push. Up until recently Closure has only been a volunteer based effort. People didn't have a lot of time to spend untangling big messes. \nIt's difficult keeping both an external and internal version of a large library like Closure in sync, especially considering they're not even the same VCS. Going forward though, this shouldn't happen again as Closure is formally staffed for some external support. \n. Does the Travis run on this PR use the new config?\n. You can use Closure with Node/NPM right now. Look at the README.\nWe don't promise support for any particular library though. It's possible some are making references to web-only constructs and will break. That said, the libs that are obviously not web-based are fine (e.g., goog.crypt).\n. https://travis-ci.org/google/closure-library/builds/74149678 seems like something is wrong with Travis and/or the config.\n. Oh, it had been running for ~4hrs when I checked it last night. I thought something was wrong.\n. OMG. It actually works! It's a Christmas miracle!\n. @concavelenz Did you want to take a look at this before merging?\n. Commits squashed.\n. Thanks!\n. Ya, I didn't really consider that. I work with the GH source so much, it's easy to forget there can be others.\nReverted above.\n. Thanks a lot for the PR. Hopefully this helps you and/or other people in the future. I'll merge it tomorrow.\nOOC, is this division algorithm \"standard\"? The first result on Google is one that involves subtraction. Why this one over others?\n. On a side note, I added a blurb about this in the Closure Builder documentation today: https://developers.google.com/closure/library/docs/closurebuilder?hl=en#additional-flags-to-closure-compiler\n. @concavelenz do you want to tweak the args at all?\n. Gonna get this in so I can run it on another PR.\n. Can you add a test for this please? Thanks!\n. > I noticed some capitalization issues in jsloader_test.js from my previous PR #417 . Do you prefer this commit to fix it or an addional one?\nStyle/formatting changes should always be separate. This reduces required mental bandwidth of the reviewer, and protects those changes from being rolled back in the more complicated change.\n. @concavelenz what are your concerns about this change? Being able to load discrete sets of dependencies in parallel seems like it could be useful. It's off by default, so there isn't much harm in enabling these use cases. \n. > I've tried discussing loadMany on closure google group before and have found helpful people but no user.\n@bebbi I see you started a thread on closure-library-discuss back in January, which was the right thing to do. Closure has only been maintained by volunteers up until this June. These types of design proposals should get more attention going forward.\n. Sorry @bebbi, just can't get consensus on this. I'd recommend you just use your own forked impl or overwrite loadMany in your code base.\n. You're going to have to be more specific. What exactly is this issue? I'm assuming bower is http://bower.io/?\n. Sorry, I don't think this is something we want to maintain at this time. Even if we did, it would never be prioritized as there's so much else higher in the priority list. \n. @jeffbcross Jeff, to silence googlebot can you sign the CLA at https://developers.google.com/open-source/cla/individual\n. BTW, this is only Chrome right now. Once we get this one out, I'll look into enabling the rest.\n. I'm not seeing \"omarkilani\" as having signed the CLA. Can you sign it with this user name?\n. See similar comment in https://github.com/google/closure-library/pull/532\n. We generate these symbols directly from CLDR. If it's incorrect there, please file a change request directly against them at http://cldr.unicode.org/index/bug-reports. Once changed, it will eventually make its way into Closure.\n. It's possible it hasn't be regenerated in a while. I can check.\n. OK. It turns out these (currency.js and currencycodemap.js) are the few remaining files we don't auto-generate, and apparently whoever last updated, missed this one. \nOur i18n maintainer is aware of this discrepancy and will update it as soon as possible in the internal closure. It will then make it out externally shortly after. \nOn a side note, we are currently working on a big refactoring of all the locale data generators so this shouldn't happen again!\n. Oops thought this was an issue, not a PR. Please track https://github.com/google/closure-library/issues/534 for the fix on this.\n. Using sauce labs works around this\n. Ping the thread, if you add tests.\n. Your best bet is to follow the existing patterns in https://github.com/google/closure-library/blob/master/closure/goog/fx/abstractdragdrop_test.js. Just open the associated _test.html file in a browser to run the tests. \n. @Znegl ping the thread if you add a test.\n. I'm not seeing a test in this PR\n. Thanks! Looks like some lint issues in the PR.\n. Nope, just push your changes to your PR branch and the tests will be run again.\n. So I ran the tests on this, and it fails in IE11. It works in IE8, IE9, and IE10 though. Here's the test case I'm running: \nfunction testSelectSingleNodeInIe() {                                            \n  var xml = goog.dom.xml.loadXml('<a><b><c>d</c></b></a>');                      \n  var node = xml.firstChild;                                                     \n  var bNode = goog.dom.xml.selectSingleNode(node, 'b');                          \n  assertNotNull(bNode);                                                          \n}\nWith result\nERROR in testSelectSingleNodeInIe\nExpected not to be <null>\nYou might as well add the test (i.e., in xml_test.js) to this PR as well. You'll need it to repro and we're going to need it anyway.\n. Can you squash your commits please? https://github.com/ginatrapani/todo.txt-android/wiki/Squash-All-Commits-Related-to-a-Single-Issue-into-a-Single-Commit\n. Unfortunately had to roll this back internally. Will look into a fix on Monday.\n. This fails for all IE versions now that it's returning ActiveXObject for the document. The root cause is someone trying to, ultimately, do this:\nvar doc = new ActiveXObject('MSXML2.DOMDocument');\ndoc.appendChild(document.createElement('body')); // Throws \"Type mismatch\"\nThe actual Closure code is:\nvar dummyDoc = goog.dom.xml.createDocument('html');\ngoog.dom.appendChild(dummyDoc.firstChild, goog.dom.createDom('body'));\nI guess the question becomes, is this a use case we want to support? This works for all other browsers when using document.implementation.createDocument.\n. Thanks for the PR!\nRe: CLA, yes, can you please sign @ https://developers.google.com/open-source/cla/individual?\n. Can you please take a look at the lint errors in Travis?\n. Also, would you mind adding unit tests for these new methods?\n. I keep forgetting about alltests.js being linted. This should fix it: https://github.com/google/closure-library/commit/a785b1ffc7b71f78a7d2cbed8f7b48faa7934bb0. \n. > I also tidied up the references in alltests.js and closure/deps.js, assume that's required as well?\nActually, for now you can just exclude these from the PR. Our internal scripts to generate these are slightly different than the external, so it'll have to be done by me anyway. \n. Minus the couple remaining nits, this LGTM. Once you address them, I'll merge :).\n. @ziegs Can you label this? If valid, this seems pretty blatantly broken, but you know priority better than I.\n. PRs welcome\n. This passed a global presubmit. LGTM.\n. What problem is this PR trying to solve?\n. Also, we have no CLA for lewistg\n. Huh, seems crazy such a blatant bug would exist this long, but I'm not too surprised as there's no tests.\n. For this to be considered, it'd need to be a PR.\n. You'll also need to squash your commits before this can be merged.\n. ARGH. Travis is having issues. Builds are taking forever. \n. @concavelenz thoughts on this?\n. Added the \"standard\" set in https://github.com/google/closure-library/pull/562. Will leave this issue open for enabling some of the non-standard ones (e.g., Edge, Chrome 28, Android, etc.).\n. Do not review this, yet\n. Note: unsurprisingly the tests fail in all IE version for one reason or another. For now, only enabling FF+Chrome.\n. Ignore this PR for now. Just trying to get IE passing on Sauce. (It's having all sorts of trouble)\n. Required for https://github.com/google/closure-library/pull/562\n. @kencheung I took a look at the test failures in IE, and they're not related to your PR. Don't worry about it.\n. FYI: Rebasing on the latest master should fix the test failure on Travis. Fixed in https://github.com/google/closure-library/commit/c82f7daf8da79ec0e9164478728b634d5581a8aa.\n. @ducklord You can ignore those lint warnings. They're expected.\n. It's not legit. Those are known lint issues w/ base.js.\n. PR = Pull Request\n. I was going to merge this, but a bunch of tests failed. I looked into it a little bit, but it wasn't obvious (to me) what the fix is. I'm closing this PR, but opened https://github.com/google/closure-library/issues/580 to track the issue.\nHere's a dump of the results in case anyone is motivated to make the change in the future:\n```\n11:38:38.433  testRangeEndPoints : FAILED (run individually)\n11:38:38.437  ERROR in testRangeEndPoints\nStart node should have text: abc\nExpected  (String) but was \n\nassertEquals at http://localhost:8080/closure/goog/testing/asserts.js:388:3\ntestRangeEndPoints at http://localhost:8080/closure/goog/dom/browserrange/browserrange_test.js:61:5\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:775:21\ngoog.testing.TestCase.safeRunTest_ at http://localhost:8080/closure/goog/testing/testcase.js:725:8\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:794:17\ngoog.testing.TestCase.runNextTest_ at http://localhost:8080/closure/goog/testing/testcase.js:714:8\ngoog.testing.TestCase.finishTestInvocation_ at http://localhost:8080/closure/goog/testing/testcase.js:839:10\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:794:17\ngoog.testing.TestCase.safeTearDown_ at http://localhost:8080/closure/goog/testing/testcase.js:742:8\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:794:17\ngoog.testing.TestCase.safeRunTest_ at http://localhost:8080/closure/goog/testing/testcase.js:725:8\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:794:17\ngoog.testing.TestCase.runNextTest_ at http://localhost:8080/closure/goog/testing/testcase.js:714:8\ngoog.testing.TestCase.finishTestInvocation_ at http://localhost:8080/closure/goog/testing/testcase.js:839:10\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:794:17\ngoog.testing.TestCase.safeTearDown_ at http://localhost:8080/closure/goog/testing/testcase.js:742:8\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:794:17\ngoog.testing.TestCase.safeRunTest_ at http://localhost:8080/closure/goog/testing/testcase.js:725:8\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:794:17\ngoog.testing.TestCase.runNextTest_ at http://localhost:8080/closure/goog/testing/testcase.js:714:8\ngoog.testing.TestCase.finishTestInvocation_ at http://localhost:8080/closure/goog/testing/testcase.js:839:10\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:794:17\ngoog.testing.TestCase.safeTearDown_ at http://localhost:8080/closure/goog/testing/testcase.js:742:8\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:794:17\ngoog.testing.TestCase.safeRunTest_ at http://localhost:8080/closure/goog/testing/testcase.js:725:8\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:794:17\ngoog.testing.TestCase.runNextTest_ at http://localhost:8080/closure/goog/testing/testcase.js:714:8\ngoog.testing.TestCase.finishTestInvocation_ at http://localhost:8080/closure/goog/testing/testcase.js:839:10\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:794:17\ngoog.testing.TestCase.safeTearDown_ at http://localhost:8080/closure/goog/testing/testcase.js:742:8\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:794:17\ngoog.testing.TestCase.safeRunTest_ at http://localhost:8080/closure/goog/testing/testcase.js:725:8\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:794:17\ngoog.testing.TestCase.runNextTest_ at http://localhost:8080/closure/goog/testing/testcase.js:714:8\ngoog.testing.TestCase.finishTestInvocation_ at http://localhost:8080/closure/goog/testing/testcase.js:839:10\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:794:17\ngoog.testing.TestCase.safeTearDown_ at http://localhost:8080/closure/goog/testing/testcase.js:742:8\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:794:17\ngoog.testing.TestCase.safeRunTest_ at http://localhost:8080/closure/goog/testing/testcase.js:725:8\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:794:17\ngoog.testing.TestCase.runNextTest_ at http://localhost:8080/closure/goog/testing/testcase.js:714:8\ngoog.testing.TestCase.finishTestInvocation_ at http://localhost:8080/closure/goog/testing/testcase.js:839:10\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:794:17\ngoog.testing.TestCase.safeTearDown_ at http://localhost:8080/closure/goog/testing/testcase.js:742:8\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:794:17\ngoog.testing.TestCase.safeRunTest_ at http://localhost:8080/closure/goog/testing/testcase.js:725:8\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:794:17\ngoog.testing.TestCase.runNextTest_ at http://localhost:8080/closure/goog/testing/testcase.js:714:8\n11:38:38.437  Breaking async\n11:38:38.456  testRangeEndingBeforeBR : FAILED (run individually)\n11:38:38.460  ERROR in testRangeEndingBeforeBR\nStartnode should have text:123\nExpected <123> (String) but was \nassertEquals at http://localhost:8080/closure/goog/testing/asserts.js:388:3\ntestRangeEndingBeforeBR at http://localhost:8080/closure/goog/dom/browserrange/browserrange_test.js:447:5\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:775:21\ngoog.testing.TestCase.safeRunTest_ at http://localhost:8080/closure/goog/testing/testcase.js:725:8\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:794:17\ngoog.testing.TestCase.runNextTest_ at http://localhost:8080/closure/goog/testing/testcase.js:714:8\ngoog.testing.TestCase.startNextBatch_ at http://localhost:8080/closure/goog/testing/testcase.js:851:8\n11:38:38.469  testRangeEndingWithBR : FAILED (run individually)\n11:38:38.471  ERROR in testRangeEndingWithBR\nStartnode should have text:123\nExpected <123> (String) but was \nassertEquals at http://localhost:8080/closure/goog/testing/asserts.js:388:3\ntestRangeEndingWithBR at http://localhost:8080/closure/goog/dom/browserrange/browserrange_test.js:391:5\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:775:21\ngoog.testing.TestCase.safeRunTest_ at http://localhost:8080/closure/goog/testing/testcase.js:725:8\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:794:17\ngoog.testing.TestCase.runNextTest_ at http://localhost:8080/closure/goog/testing/testcase.js:714:8\ngoog.testing.TestCase.finishTestInvocation_ at http://localhost:8080/closure/goog/testing/testcase.js:839:10\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:794:17\ngoog.testing.TestCase.safeTearDown_ at http://localhost:8080/closure/goog/testing/testcase.js:742:8\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:797:15\ngoog.testing.TestCase.safeRunTest_ at http://localhost:8080/closure/goog/testing/testcase.js:725:8\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:794:17\ngoog.testing.TestCase.runNextTest_ at http://localhost:8080/closure/goog/testing/testcase.js:714:8\ngoog.testing.TestCase.startNextBatch_ at http://localhost:8080/closure/goog/testing/testcase.js:851:8\n11:38:38.478  testRangeEndingWithBR2 : FAILED (run individually)\n11:38:38.481  ERROR in testRangeEndingWithBR2\nStart node should have text:123\nExpected <123> (String) but was \nassertEquals at http://localhost:8080/closure/goog/testing/asserts.js:388:3\ntestRangeEndingWithBR2 at http://localhost:8080/closure/goog/dom/browserrange/browserrange_test.js:417:5\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:775:21\ngoog.testing.TestCase.safeRunTest_ at http://localhost:8080/closure/goog/testing/testcase.js:725:8\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:794:17\ngoog.testing.TestCase.runNextTest_ at http://localhost:8080/closure/goog/testing/testcase.js:714:8\ngoog.testing.TestCase.finishTestInvocation_ at http://localhost:8080/closure/goog/testing/testcase.js:839:10\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:794:17\ngoog.testing.TestCase.safeTearDown_ at http://localhost:8080/closure/goog/testing/testcase.js:742:8\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:797:15\ngoog.testing.TestCase.safeRunTest_ at http://localhost:8080/closure/goog/testing/testcase.js:725:8\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:794:17\ngoog.testing.TestCase.runNextTest_ at http://localhost:8080/closure/goog/testing/testcase.js:714:8\ngoog.testing.TestCase.finishTestInvocation_ at http://localhost:8080/closure/goog/testing/testcase.js:839:10\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:794:17\ngoog.testing.TestCase.safeTearDown_ at http://localhost:8080/closure/goog/testing/testcase.js:742:8\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:797:15\ngoog.testing.TestCase.safeRunTest_ at http://localhost:8080/closure/goog/testing/testcase.js:725:8\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:794:17\ngoog.testing.TestCase.runNextTest_ at http://localhost:8080/closure/goog/testing/testcase.js:714:8\ngoog.testing.TestCase.startNextBatch_ at http://localhost:8080/closure/goog/testing/testcase.js:851:8\n11:38:38.489  testRangeStartingAfterBR : FAILED (run individually)\n11:38:38.492  ERROR in testRangeStartingAfterBR\nStartnode should have text:4567\nExpected <4567> (String) but was \nassertEquals at http://localhost:8080/closure/goog/testing/asserts.js:388:3\ntestRangeStartingAfterBR at http://localhost:8080/closure/goog/dom/browserrange/browserrange_test.js:506:5\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:775:21\ngoog.testing.TestCase.safeRunTest_ at http://localhost:8080/closure/goog/testing/testcase.js:725:8\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:794:17\ngoog.testing.TestCase.runNextTest_ at http://localhost:8080/closure/goog/testing/testcase.js:714:8\ngoog.testing.TestCase.finishTestInvocation_ at http://localhost:8080/closure/goog/testing/testcase.js:839:10\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:794:17\ngoog.testing.TestCase.safeTearDown_ at http://localhost:8080/closure/goog/testing/testcase.js:742:8\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:797:15\ngoog.testing.TestCase.safeRunTest_ at http://localhost:8080/closure/goog/testing/testcase.js:725:8\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:794:17\ngoog.testing.TestCase.runNextTest_ at http://localhost:8080/closure/goog/testing/testcase.js:714:8\ngoog.testing.TestCase.finishTestInvocation_ at http://localhost:8080/closure/goog/testing/testcase.js:839:10\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:794:17\ngoog.testing.TestCase.safeTearDown_ at http://localhost:8080/closure/goog/testing/testcase.js:742:8\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:797:15\ngoog.testing.TestCase.safeRunTest_ at http://localhost:8080/closure/goog/testing/testcase.js:725:8\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:794:17\ngoog.testing.TestCase.runNextTest_ at http://localhost:8080/closure/goog/testing/testcase.js:714:8\ngoog.testing.TestCase.finishTestInvocation_ at http://localhost:8080/closure/goog/testing/testcase.js:839:10\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:794:17\ngoog.testing.TestCase.safeTearDown_ at http://localhost:8080/closure/goog/testing/testcase.js:742:8\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:797:15\ngoog.testing.TestCase.safeRunTest_ at http://localhost:8080/closure/goog/testing/testcase.js:725:8\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:794:17\ngoog.testing.TestCase.runNextTest_ at http://localhost:8080/closure/goog/testing/testcase.js:714:8\ngoog.testing.TestCase.startNextBatch_ at http://localhost:8080/closure/goog/testing/testcase.js:851:8\n11:38:38.503  testRangeStartingWithBR : FAILED (run individually)\n11:38:38.506  ERROR in testRangeStartingWithBR\nEndnode should have text:456\nExpected <456> (String) but was \nassertEquals at http://localhost:8080/closure/goog/testing/asserts.js:388:3\ntestRangeStartingWithBR at http://localhost:8080/closure/goog/dom/browserrange/browserrange_test.js:483:5\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:775:21\ngoog.testing.TestCase.safeRunTest_ at http://localhost:8080/closure/goog/testing/testcase.js:725:8\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:794:17\ngoog.testing.TestCase.runNextTest_ at http://localhost:8080/closure/goog/testing/testcase.js:714:8\ngoog.testing.TestCase.finishTestInvocation_ at http://localhost:8080/closure/goog/testing/testcase.js:839:10\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:794:17\ngoog.testing.TestCase.safeTearDown_ at http://localhost:8080/closure/goog/testing/testcase.js:742:8\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:797:15\ngoog.testing.TestCase.safeRunTest_ at http://localhost:8080/closure/goog/testing/testcase.js:725:8\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:794:17\ngoog.testing.TestCase.runNextTest_ at http://localhost:8080/closure/goog/testing/testcase.js:714:8\ngoog.testing.TestCase.finishTestInvocation_ at http://localhost:8080/closure/goog/testing/testcase.js:839:10\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:794:17\ngoog.testing.TestCase.safeTearDown_ at http://localhost:8080/closure/goog/testing/testcase.js:742:8\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:797:15\ngoog.testing.TestCase.safeRunTest_ at http://localhost:8080/closure/goog/testing/testcase.js:725:8\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:794:17\ngoog.testing.TestCase.runNextTest_ at http://localhost:8080/closure/goog/testing/testcase.js:714:8\ngoog.testing.TestCase.finishTestInvocation_ at http://localhost:8080/closure/goog/testing/testcase.js:839:10\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:794:17\ngoog.testing.TestCase.safeTearDown_ at http://localhost:8080/closure/goog/testing/testcase.js:742:8\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:797:15\ngoog.testing.TestCase.safeRunTest_ at http://localhost:8080/closure/goog/testing/testcase.js:725:8\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:794:17\ngoog.testing.TestCase.runNextTest_ at http://localhost:8080/closure/goog/testing/testcase.js:714:8\ngoog.testing.TestCase.finishTestInvocation_ at http://localhost:8080/closure/goog/testing/testcase.js:839:10\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:794:17\ngoog.testing.TestCase.safeTearDown_ at http://localhost:8080/closure/goog/testing/testcase.js:742:8\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:797:15\ngoog.testing.TestCase.safeRunTest_ at http://localhost:8080/closure/goog/testing/testcase.js:725:8\ngoog.testing.TestCase.invokeTestFunction_ at http://localhost:8080/closure/goog/testing/testcase.js:794:17\ngoog.testing.TestCase.runNextTest_ at http://localhost:8080/closure/goog/testing/testcase.js:714:8\ngoog.testing.TestCase.startNextBatch_ at http://localhost:8080/closure/goog/testing/testcase.js:851:8\n```\n. In the future, these questions should be directed to closure-library-discuss.\nWhy is goog.ui not popular anymore?\n\nTL;DR frameworks came along that people preferred using and fit their use cases better.  \n\nWhat should people who start a new project with closure library use to build ui?\n\nPolymer? Angular? Closure is purposely not opinionated on these decisions. The onus is on the developer to decide what's best for their project. \n\nIs closure library going to support new means of developing ui?\n\nNo current plans.\n. Questions should be asked on the public group closure-library-discuss.\n. There are some compilation errors in the travis report.\n. @concavelenz did you mean \"rather not\"?\n. @fredj Got a jsperf?\n. Merged in https://github.com/google/closure-library/commit/54b3bebb1698a0ad00ce3dce6a9850e381c7d521#diff-c359099ba4bc09bc2864536c49356d52\n. @irock I ran all internal tests against this and there were multiple failures. As expected, people are relying on the encoding. We can leave this issue open to track the issue, but I'm not sure it's worth the effort to land the fix. I'd recommend just working around it in your code.\n. I can't look at this until a CLA is signed. \n. None of the travis failures are legit. merging.\n. You can ignore the lint. base.js has some known, currently unfixable, lint issues.\nThis is too specific a use case for Closure though. DEBUG is specifically for non-production modes (including testing, as observed in goog.async.run.resetQueue). You typically want verbose logs in this mode. \nIf you want to quiet logs, I'd recommend looking into something like goog.debug.logger which allows you to control the log level programmatically: https://github.com/google/closure-library/blob/master/closure/goog/debug/logger.js#L157.  You could even create your own goog.defines that set these levels for you.\n. These files are auto-generated based on CLDR. If it's correct there, it's possible we haven't pushed the latest changes. If it isn't, you can file a bug against CLDR.\n. Oh, nah. That test is testing is3dSupported which is false for GECKO < 10. The only reason the tests didn't fail is because we don't run them on older GECKO versions.\n. Unfortunately, this doesn't work. It was recommended to me by Sauce labs support... the registry command is probably wrong.\n. Thanks for all the work on this!\nOn Mon, Dec 14, 2015 at 2:04 PM, joth76 notifications@github.com wrote:\n\nClosed #600 https://github.com/google/closure-library/issues/600.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/issues/600#event-491543887.\n. Done. https://github.com/google/closure-library/wiki/Formatting-.js-with-clang-format\n. Various asynchronous tests are flaky on the Travis+Sauce Labs\ninfrastructure. You can ignore them.\n\nOn Fri, Nov 13, 2015 at 11:37 AM, Erik Neumann notifications@github.com\nwrote:\n\nI don't understand the Travis CI errors. This is only a change to a\ncomment, hard to see how it could change any test results.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/pull/602#issuecomment-156537094\n.\n. There are 10 commits in this PR. Can you get it down to 1?\n\njs-dossier supports markdown style code blocks: http://daringfireball.net/projects/markdown/syntax#precode.  Can you get this working with 4 indented spaces instead? It's easier to read that way.\n. @ChadKillingsworth won't this cause confusion for ppl who are used to \"google-closure-library\"?\n. @dferrara19 do you have concerns with this?\n. Do not review this. I'll be gradually adding new tests to the blacklist as they flake out.\n. Yes.\n. Thank you!\n. FYI if anyone is curious, the \"clang-format off\" comments don't work for the clang-format-diff.py script as it doesn't parse the entire file. \n. ... and until the internal clang format check has had time to bake (just submitted today)\n. Yes, please format. See this for more detail: https://github.com/google/closure-library/wiki/Formatting-.js-with-clang-format.\n. Thanks. Sorry.\n. The compiler fix was merged.\n. Honestly, not a clue atm. \nWere you able to repro the breakage on your machine at any point in the past? \n. Mmkay I figured it out. It was only the node_modules glob that was broken. I have a fix here: https://github.com/google/closure-library/pull/642.\nMy guess is that you didn't have any node modules installed in your closure directory and that's why your build succeeded.\n. The latest travis failure is unrelated to this change. It was fixed in https://github.com/google/closure-library/commit/b21ef3809877bca8fe191f87bc88eff4fea579a7.\nCan you please rebase and kick off another Travis run? If it's good, I'll merge this.\n. BTW I'll look into automating npm releases soon (hopefully a week or two).\n. See https://github.com/google/closure-library/wiki/Internationalization-(i18n)-changes-in-Closure-Library\n. See https://github.com/google/closure-library/wiki/Internationalization-(i18n)-changes-in-Closure-Library\n. @Dominator008 Thanks for the quick turnaround.\n. The test using goog.module was easy enough to add and it seems to work fine. I'll see about getting this out in the next couple days.\n. Does depswriter.py not do what you want? It's intended as the replacement for this script's deps file generation. It supports goog.module.\n. Ah. Sorry. I didn't have full context on this change. \nI'm going to run this by the compiler folks first and make sure there's no existing workaround. \n. MMkay, I think the main issue here is developing on the deprecated calcdeps.py. If list output mode is a missing feature, we should be adding it to depswriter.py instead of continuing to drag calcdeps along. Is that something you'd be willing to take on?\n. @ChadKillingsworth also mentioned compiling with the CommonJS pass can be painful. Can the list of excluded files change if you're using that? \nI was thinking a nice solution could be to create a closure_compile_ignore text file that contains a list of those exclusion patterns required to compile Closure Library with dep_mode LOOSE or NONE. Then we can just tell people to add --flagfile closure_compile_ignore.  We'd need to document it still, of course. \n. Chad, why do you need to exclude the bootstrap/ stuff? \n. Also, I don't know if I'm sold that exporting the glob patterns in bootstrap/nodejs.js makes sense. It seems nicer to have a compilation-specific module that only handles these types of concerns. Then we could convert our compilation shell script to node. \n. > For the second, you need to exclude them as they are not used and the commonjs rewrites cause errors.\nWhat errors are you seeing in compilation? Shouldn't this file pass compilation regardless? \n. Ah. I wasn't sure if you supported node core modules in the commonjs pass. Thanks for the clarification. \n. I couldn't find any discernible performance difference: http://jsperf.com/stablesort-perf/3.\nOOC, what were the NTI errors?\n. Just seems like an oversight in the original implementation to me. I'll try to create a change that removes isNaN and deprecates this method internally.\n. @bpilot Still waiting on a CLA from you. We can't move unless you sign it.\n. When/if you sign the CLA, please ping the thread.\n. Closing due to lack of response from author.\n. This is likely a python 2 vs 3 issue. Using python 2.X should work until we\ndecide on a fix internally.\nOn Mon, Feb 29, 2016 at 8:55 AM, ruszki notifications@github.com wrote:\n\nRunning closure/bin/build/closurebuilder.py script with 'script'\noutput_mode raise an exception \"can't concat bytes to str\":\n./library/closure-library-20160208/closure/bin/build/closurebuilder.py\n--root=library/closure-library-20160208/ --root=library/protobuf/\n--root=protobuf --input=protobuf/reference.js --output_mode=script\n--output_file=js/closure.js\n./library/closure-library-20160208/closure/bin/build/closurebuilder.py:\nScanning paths...\n./library/closure-library-20160208/closure/bin/build/closurebuilder.py:\n1521 sources scanned.\n./library/closure-library-20160208/closure/bin/build/closurebuilder.py:\nBuilding dependency tree..\nTraceback (most recent call last):\nFile\n\"./library/closure-library-20160208/closure/bin/build/closurebuilder.py\",\nline 287, in\nmain()\nFile\n\"./library/closure-library-20160208/closure/bin/build/closurebuilder.py\",\nline 253, in main\nout.write(src.encode('utf-8') + '\\n')\nTypeError: can't concat bytes to str\nThere are several problems with this code part:\n- str.encode() returns a bytearray to which string cannot be added\n  this way\n- out's write doesn't accept bytearrays\nClosure library version: 20160208\nPython version: 3.5.1\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/issues/665.\n. @ghosttie I think these API additions would be better off as a general structs utility. That is, a method in https://github.com/google/closure-library/blob/master/closure/goog/structs/structs.js. This may be more than you'd like to take on though.\n. @MatrixFrog Do you recall why goog.structs.forEach was slated for deprecation and Map has its own implementation? \n. Mainly for the reasons expressed in the previous comment, I'm closing this out.\n. Where exactly is WindowsError: [Error 206] coming from? From the error description, it only has to do with filenames. How does args equate to filenames or extensions?\n. Also, you'll need to squash your commits to one. See https://github.com/google/closure-library/pull/574#issuecomment-146009727 and http://gitready.com/advanced/2009/02/10/squashing-commits-with-rebase.html\n. This error is from a Closure Compiler bug. They're working on it.\n\n./closure/goog/test_module.js:25: ERROR - required \"goog.test_module_dep\" namespace never provided\ngoog.require('goog.test_module_dep');\nThe other errors were from Sauce Labs. It reached its VM limit (due to multiple runs). A test rerun usually solves this.\n. Can you please squash your commits? http://gitready.com/advanced/2009/02/10/squashing-commits-with-rebase.html\n. > The opposite actually.\nWhoops, sorry about that. I misread that mouseDown_ statement.\n\nOr did you have something more comprehensive in mind?\n\nSomething more comprehensive. Just lobbing touch events into a mouseDown_ method feels forced. All of the comments mention mouse specifically. \nWe just need better naming on those mouse specific methods. Maybe dragStartHandler_ dragStopHandler_? \n. I just pulled in the new version internally. I'll run some tests and update the thread.\n. FYI: I've had to rollback this change internally. The change will make it out to the github repo at head either today or tomorrow.\nThe reasoning is:\n\"This interaction makes it so the user cant scroll since for drag targets that cover the whole scrollable area. Plus this is not the conventional way to drag and drop on touch. Conventionally, you need to long-press, and this one drags immediately\"\nThis feature will probably need to be made configurable.\n. Maybe unrelated, but you're not using the \"official\" npm package. It's here: https://www.npmjs.com/package/google-closure-library.\nTake a look at our compilation script for an idea of flags to compile closure library itself: https://github.com/google/closure-library/blob/master/scripts/ci/compile_closure.sh.\n. The line I think you're referring to has a trailing whitespace. Running\nclang on your file will solve it:\nhttps://github.com/google/closure-library/wiki/Formatting-.js-with-clang-format\nOn Fri, May 6, 2016 at 12:19 PM, gmalartre notifications@github.com wrote:\n\nWell I tried, the CLANG thingy seems to break on my comment, it does not\nspecify anything to do.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/issues/702#issuecomment-217535243\n. Is this no longer an issue?\n. Ah, sorry. Didn't even notice that.\n. The bug can still be triggered if someone sets withCredentials to true and then to false again, yes? Would a better solution be to wrap the block in a try/catch so it never throws?\n. Reading the bug more closely, it sounds like this is intended behavior in FF, per the spec. \n\nBut, considering this completely breaks sync XHR for FF11 in the default case, the fix seems fine to me.\n. Ya, you'll want to ignore those _perf.js files when compiling closure. See our build script for a list of exclusions: https://github.com/google/closure-library/blob/master/scripts/ci/compile_closure.sh\n. No sorry. This PR was created as a result of me debugging our NPM release script.\n. Ignore it. It's a sauce labs bug.\n. Fixes issues like https://travis-ci.org/google/closure-library/builds/137966450 where we've fixed stuff for a newer version of Chrome but the default version is behind.\n. Closing due to lack of response.\n. Use the search bar. See https://github.com/jleyba/js-dossier/issues/73. It's not really obvious, sorry abou thtat.\n. The UI was reworked. Use the search bar or top-left drop-down at http://google.github.io/closure-library/api/\nPlease reopen if this was not the page you were referring to.\n. Any chance of a PR? goog.ui is mostly in maintenance mode atm.\n. Seems reasonable enough at first glance. I'm having trouble finding useful references describing potential issues stripping BOM. If you want to create a PR, we can test it out internally.\n. Sauce Labs shakes fist!\nThat failure is unrelated to this CL. It's a Sauce Labs infra platform issue.\n. Same. It means we ran out of VMs on Sauce Labs. It typically happens when multiple PRs/commits come in at the same time.\n. I restarted it.\n. I wouldn't be too concerned getting Travis green. It's pretty obvious your change isn't introducing any new breakages.\n. PR looks good. Can you please squash your commits into 1 and add a unit test to https://github.com/google/closure-library/blob/master/closure/goog/ui/container_test.js?\n. @ghosttie waiting on the last comment before merging.\n. @fabalbon, I don't see currency.js listed here: https://github.com/google/closure-library/wiki/Internationalization-(i18n)-changes-in-Closure-Library. Isn't it also auto-generated from CLDR?\n. Thanks @fabalbon.\n@DavidSkazy, we're running global tests on this change internally to see if we break any existing users. @fabalbon should have an idea of the impact soon.\n. I'm assuming this was fixed in the last release https://github.com/google/closure-library/releases\n. I restarted the CI build.\n. Basic change LGTM, minus a couple comments. Can merge when they're addressed, and please remember to squash your commits to 1.\nOOC, did you get this regex anywhere or did you just make it up yourself? I.e., I'm wondering if it came from a trusted/tested source as regex matching can be tricky. \n. Feel free to re-open once code review comments are addressed.\n. Closing until verifiably reproducible\n. Sorry, we're woefully understaffed with too much to do atm. I can take a proper look at this on Tuesday.\n. Seems reasonable enough to me. I'll need to run some tests on this PR internally to make sure it doesn't break existing tests relying on old behavior.\n. You'll also need to squash your commits into 1 before I'll be able to merge this: http://gitready.com/advanced/2009/02/10/squashing-commits-with-rebase.html\n. Everything passed internally for this. Thanks for the change.\n. Huh, any clue why the build on master is still passing even without this change?\n. Oh... it is broken. It just hasn't run in a while. Thanks.\n. Google is a large company. There are several teams writing JS that might be considered \"core\" and not all of it is in Closure. This mainly becomes a problem for open-source users as the code doesn't appear under the same code repository as they do internally. \nTBH, it's unlikely we'll roll this library into Closure Library proper. Open-sourcing an internal project is surprisingly difficult and the Closure team doesn't have the capacity to take ownership of the e2e crypto libs. I'd recommend just using the two libs separately as you are. If you'd like to be a good citizen maybe a comment in some of the crypto libs pointing to pkcs7 would be appropriate? Maybe a wiki article?\n. @fabalbon Don't we already have something like this?\n. Can you give me detail about exactly how you're encountering this error? In general, this should only be an issue if you're compiling your tests using mockmatchers. The mockmatchers library is strictly not a \"compilation friendly\" class (it has other issues outside of these exported symbols). \nIn general the use of the private _displayStringForValue() in mockmatchers seems like a terrible hack. Exporting it just makes it worse. If anything, I would just fix the use of  that method to use something local in mockmatchers.js.\n. > Any ideas for a better approach?\nThe best thing would be to extract the method(s) into a shared, public, namespace and use them between the two files (asserts.js and mockmatchers.js). Believe me when I say the way this is used right now is pretty cringeworthy. I don't like it all. Unless you're willing to do the legwork to extract out the shared code (which might be tricky), I'd suggest continuing to work around it with your own hack.\n. Maybe this will help https://github.com/roman01la/webpack-closure-compiler. Although, the js compiler team doesn't support any webpack plugin formally. \nAlso, what are your exact errors? It sounds like you're just missing some compiler flags and/or are trying to compile uncompilable code.\n. Conceptually, the change seems fine to me. A few concerns:\n1. You need to add unit tests. See ui/datepicker_test.js.\n2. goog.ui is in maintenance mode and we're generally only accepting major bug fixes. To land this, you'd need someone to champion it for you and get it submitted internally. I will try to do this but if any troubles arise that require non-trivial work, I'll have to pass on it.\n. Woopsie daisy. You got it right :D. Master should be fixed.\n. We rewrote history... so please clone a new version (or rebase away the offending change locally)...\n. Merged in https://github.com/google/closure-library/commit/6043dd177a0f75faad59023c9c6d42dde30d73b9\n. It seems like the maven build passes with this, so we'll give it a try. The failures are just sauce labs flakes unrelated to the jscomp build.. Code LGTM. Waiting for passing Travis. Feel free to merge yourself if you'd like.. @MatrixFrog FYI. No concrete plans that I know of. We're kind of understaffed atm and\ncleaning up deprecated methods is rather low priority. Feel free to submit\na PR (or CL) if you'd like.\nOn Thu, Apr 20, 2017 at 9:18 AM, Keghani Kouzoujian \nnotifications@github.com wrote:\n\nGreetings from https://github.com/googlei18n/libphonenumber!\nI'm getting errors compiling our JS library with the latest closure\ndependencies (closure-library, closure-compiler) because testrunner.js\nhttps://github.com/google/closure-library/blob/0592a220b21b53db3cb77caaaea69cadec20789d/closure/goog/testing/testrunner.js#L440\nis making a call to deprecated goog.testing.TestCase.getTestResults\nhttps://github.com/google/closure-library/commit/acf652655b8f67ed36e01cdfff03765f1595c901#diff-f2db8d43347663cf7438b30cc1701fb0R712\nwhich is deprecated; and we treat deprecation issues as errors (our\ncompilation flags\nhttps://github.com/googlei18n/libphonenumber/blob/master/javascript/build.xml#L41\n).\nIs there a plan to update the code in testrunner.js?\nThe deprecation message is also in this repo's Travis output\nhttps://travis-ci.org/google/closure-library/builds/221324571#L3713,\nbut probably not stopping builds because of this compilation flag\nhttps://github.com/google/closure-library/blob/e5a94170fbdc5eb759cfc4edfff4b55d95eb4fee/scripts/ci/compile_closure.sh#L15\n.\nTo reproduce:\ngit clone https://github.com/googlei18n/libphonenumber.git\ncd libphonenumber\nln -s $CLOSURE_LIBRARY_DIR_PATH ../closure-library\nln -s $CLOSURE_COMPILER_DIR_PATH ../closure-compiler\nant -f javascript/build.xml compile\nOutput contains:\n [exec] /tmp/closure-library/closure/goog/testing/testrunner.js:440: ERROR - Property getTestResults of type goog.testing.TestCase has been deprecated.\n [exec]     return this.testCase.getTestResults();\n [exec]            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n [exec]\n [exec] 1 error(s), 0 warning(s), 97.6% typed\n [exec] calcdeps.py: JavaScript compilation failed.\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/closure-library/issues/821, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AMh5YPjV-vcc_pNSqtqArDTrzvJvfp-Yks5rx4VbgaJpZM4NDQuy\n.\n. Can start that, but was there any compatibility issue between the two versions? I am not aware of any backward incompatible changes between the two (but I could be wrong).. Ya, just took a look, and it turns out we don't have a repo equivalence between the 4/9 and 4/23 closure compiler release. In other words, the 4/23 release would be the same as the 4/9. So you should be good. . The access-control-allow-origin header should be set in the server response, not the client request.. Can you remove it from this PR?\n. It'd be easier if you just edit it. Just indent the cases properly with spaces and not tabs.\n. I'm not a big fan of this loop. It enables a use of the API that's not intended (i.e., it allows an arbitrary number of arguments). \n\nI'd convert this logic to just reference \"val\" and \"f\" directly and pushing onto \"params\".\n. Change the param name to \"opt_val\"\n. One \"var\" per line per variable please.\n. BTW, when in doubt always refer to the google JS style guide: http://google.github.io/styleguide/javascriptguide.xml?showone=var#var\n. Don't use arguments. Just look for the existence of \"val\" directly.\n. Don't mention this is testing a patch in the test name.\n. I'm pretty sure this whole thing could be written much more simply.  From the spec description, it sounds like all providing initialValue does is unshift the value onto the original array. I'd suggest trying that and using the same forEach logic that was there before.\n. Write a test that exercises the case where native reduce isn't available.\n. The test name description should describe what this is testing. This is actually testing behavior when initialValue isn't provided.\n. \"f\" can never be undefined. It's of type \"function\" which is non-nullable. See JavaScript Types.\nIf \"val\" is undefined, you just don't push it onto \"params\". E.g.,\njavascript\nif (goog.isDef(val)) {\n  params.push(val);\n}\n. See above.\n. Got it now. It didn't click because using \"undefined\" as an initialValue seems pretty nonsensical to me, but I guess it's technically supported. \nSorry for the confusion.\n. Thinking about this more, supporting initialValue as optional doesn't seem worth the added complexity here. Doing all this arguments stuff is quite ugly and the old API is much more clear. I also noticed that \"reduceRight\" uses the same non-optional initialValue. The way it is currently is more consistent, and, in general, we're not too concerned with conforming to the spec. The \"undefined\" initialValue use case is still possible if someone really wants it.\nI'm going to close this PR. Thanks for the effort.\n. In your scenario, you'd just pass 0 as initialValue.\n. Add a @return type to loadMany.\n. I'm wondering if we can just kill the bracket notation here instead.\n. This should be non-nullable type {!goog.math.Coordinate}.\n. Please ensure 80 col limit (I can't tell if it is).\n. What's this sleep 5 for?\n. indent 4. See examples throughout file.\nIn the future, you should try running the closure linter on your PR files. Will speed things up :). Eventually, this will be an automated step in Travis for all PRs, but for now you can run manually.\n. Can you please add a comment explaining why 5 is sometimes used? I.e., the issue with base 36.\n. testBase36ToString\n. Can you provide a link to the github issue here?\n. This test is hard to understand. Isn't there a simpler way to write this?\n. E.g.,\nassertEquals('zzzzzz', goog.math.Integer.fromString('zzzzzz', 36).toString(36));\n. Can you move the comment above the intval declaration and provide a brief explanation of why the 0 bit shift is necessary? You can be concise and reference the github issue. \n. can you move this assertion into its own test function, \"testBase36ToString\"?\n. Also, plz provide a comment w/ reference to the github issue.\n. 80 col limit plz: \nhttp://google.github.io/styleguide/javascriptguide.xml#Multiline_string_literals\n. Link to github issue here or in the slowDivide_ jsdoc\n. You can get rid of the \"NOTE:\" text.  We use the notation \"NOTE(user): \" as a way to track down the relevant person, but it's not really necessary here.\n. s/this/\"this\"/\n. So goog.math.Integer is nullable by default, but the code doesn't seem to compensate. Line 593 would throw a runtime error if \"other\" was ever actually null.\n. This is the place to add a high level overview of what this method does, and why it exists compared to the normal divide.\n. Can move comment like this up into the comments above the method.\n. semicolon. \n. Missing space before \"(\"\n. On a side note, running your PRs through gjslint would probably be helpful: https://github.com/google/closure-linter\n. Check out nullable and non-nullable types at http://google.github.io/styleguide/javascriptguide.xml#JavaScript_Types. For the most part, non-primitive types are nullable by default without explicitly specifying \"!\" in the type annotation.\nUnfortunately, you can't just make this non-nullable as the calling method also (incorrectly) is passing a nullable Integer. You'll just have to code defensively for null.\n. Yes, you're right, divide would crash and it's unfortunate it's set up that way :(. However, each method should be considered in isolation and abide by its annotated type contract. You never know how or where this method will be used in the future. \nThe right thing to do here is to make both the divide and slowDivide's other params non-nullable. Considering this would completely break people's JS if they passed null right now anyway, it should be a safe change. Can you do that? Thanks.\n. kill newline\n. This method is exactly the same as createChangedTouchEvent below. Can you consolidate into one?\n. remove\n. Ehhh, I think I'd prefer you not change the behavior of this method this radically. The original impl was designed with a specific use case in mind and breaking that assumption could cause breakages internally.\nCan you revert this back to the original fix w/ only @return added?\n. I think the addition is reasonable. I wouldn't make it the default though. Adding another field to opt_options is probably the best way to do it.  Take a look at the goog.net.jsloader.Options type.\nThat said, can you do that in a separate PR? This returning deferred change seems valuable enough on its own.\n. > But since we always return deferreds now, that use-case could easily be handled by the caller.\nI don't know if I agree with this. Yes, it's possible for the caller to manage it, but it would require passing around a deferred to anything that wants to chain loads. The way it is now, your only dependency is on jsloader, and invoking loadMany means you are always guaranteed to get the latest deferred regardless of where/how you call it. IMO, this seems nicer.\nRe: backwards compatibility, this is the cost of maintaining a widely used library. You have to weigh the cost and potential payoff of a change. If we make this change and I break 200 tests internally, is it really worth me spending 3 days fixing them for this change? Especially when it's just as easy to just add an option to enable the functionality you want without breaking anyone.\n. I'm seeing this as 80 cols. Were you getting lint errors?\n. End w/ period.\nIn general though, try to avoid making changes like this. It just increases the required mental bandwidth of the reviewer. These can just go into separate PRs.\n. passing null isn't necessary.\n. Actually, I'm guessing you're trying to emulate what load does? If so, that's fine.\n. Can you add a unit test that validates the returned deferred corresponds to the completion of loading all scripts?\nThe file is jsloader_test.js in the same dir. Just open jsloader_test.html in a browser to run the tests.\n. kill newlines\n. Lines 157+158 Between function definitions, yes. Not at the end of a function block though. \n. not used, plz remove\n. Is this 80 cols?\n. end w/ period.\n. Please use proper capitalization and end sentence w/ period.\n. Can you reference #498 instead, here and in Long. Thanks.\n. Capital \"T\" on \"toString\" here and in other test.\n. Oh, I'm sorry. I'm talking about English grammar. https://en.wikipedia.org/wiki/Capitalization\n. OHHH. Haha, I thought \"these\" started a new sentence. A side effect of using the \"unified\" view. Sorry for confusion.\n. so these commands aren't synchronous?\n. I can delete both of these scripts right?\n. This PR ended up breaking tests internally. This change was the cause of some of them. It's mainly due to tests that mock the touch event and don't include \"target\".\nThe question I have is, how confident are we that using the \"target\" of the touch instead of the event, \"e\", is the right thing? Per MDN the touch.target is:\n\nThe Element on which the touch point started when it was first placed on the surface, even if the touch point has since moved outside the interactive area of that element or even been removed from the document.\n\nDo you have any clue how this could differ from e.target? \n. BTW, to do today's external push, I'll likely be pushing the rollback of this change out. Once we decide on the correct fix, this will be pushed out again. \n. e.target does seem correct. Specifically the docs for this.target says Target that fired the event., which is exactly what e.target represents.\nI'll just make this fix internally when I try to roll forward the change.\n. can you format this similar to the event on line 609?\n. Comment seems unnecessary \n. Seems like a decent change. I'd like to see a unit test though.\n. Can you move these tests into their own testLoadManySkipQueue method? I think this also means you can just re-use the existing jsloader_test# files?\n. We have a new style for tests now. All your .js should be in a separate _test.js file, with a single goog.require for your test namespace. E.g., see https://github.com/google/closure-library/blob/master/closure/goog/async/debouncer_test.html.  Required test DOM can stay in the .html file.\n. newline\n. newline\n. OOC, what exactly is graphics here in the case there's no browser support?\n. Do you need an accompanying tearDown method to potentially reset the DOM?\n. You can revert this. Made this change in https://github.com/google/closure-library/commit/a785b1ffc7b71f78a7d2cbed8f7b48faa7934bb0.\n. There is actually a shouldRunTests method specifically designed for this: https://github.com/google/closure-library/blob/master/closure/goog/testing/testcase.js#L417. That way you don't have to check for graphics in every test.\n. Can you move this up with the other constants?\n. Oops. NVM. Didn't notice.\n. Sorry, I just noticed goog.graphics.Element is nullable here. While it doesn't look like it would have any negative effect, there's no use wasting cycles if elem is null. Can you return immediately in that case? Also, you can tighten the @param of CanvasGroupElement's removeElement to be non-nullable.\n. It's a bit odd to have a documented method with a required param that does nothing. I think I'd prefer to leave this with just name, and just have the replace in  unescapeEntities_ call lookupEntity_ correctly with the right thing.\n. Tell travis to persist this directory across runs. It holds our required nodejs modules.  Added comment.\n. It doesn't support POST.\n. done.\n. Sorry, ignore this PR for now. I created it just to test an end-to-end run on Sauce/Travis w/ \"multiCapabilities\". It's the only way (AFAIK) to do it.\n. This should be {!Array}\n. I think the original indentation was correct.\n. Was the linter complaining about this?\n. Prefer to have function on the same line as its params\n. High level comment: you're adding a bunch of dense code to an already large method. I think it would greatly help readability/comprehension if you could break some of this logic up into discrete testable functions rather than a monolithic chunk of code.\n. Are all of these test cases and assertions testing something unique? If not, there's no real point in having them. \n. You need to add a descriptive comment here for this new class attribute. What does it do? Where is it used? Etc.\n. Move closing parens like these to the line above, along with the opening curly. I see this in a couple places in the file.\n. Can't this just be an else if?\n. Not a big fan of the opening paren by itself on a line. Move as much as you can to the opening line.\n. Collapse all these closing parens to a single line.\n. 1 entry here please\n. The indentation seems weird. I think the original was correct. Can you double check?\n. Include the type annotation in the comment above\n. Method descriptions should start with a sentence written in the third person declarative voice. E.g., \"Formats blah blah blah...\".\n. there may be\n. {!Array<string>} so this is non-nullable. Here and throughout.\nSee \"Nullable/non-nullable types\" here: https://google.github.io/styleguide/javascriptguide.xml?showone=JavaScript_Types#JavaScript_Types\n. These param descriptions should be meaningful in isolation.  Just referencing variables from another method isn't particularly useful. \n. These methods need to be on the goog.i18n.NumberFormat namespace with a trailing underscore to signify they're private. See https://google.github.io/styleguide/javascriptguide.xml#Visibility__private_and_protected_fields_\n. I'm noticing this method description doesn't really describe what this method does. It says it's called, but doesn't say what its operations are and what it returns.\n. Sorry, technically !string is correct, but string is a non-nullable type by default. You can just omit ! on string here for consistency throughout the file.\n. Does this need to be on the prototype? It seems static.\n. Can you align this w/ currentGroupSize\n. Repeating\n. Repeating (typo)\n. Extra newline\n. It's fine.\n. It doesn't have to be a huge paragraph, I just want a succinct description of what exactly this method does. It should be as simple as possible while getting the point across. Like \"Takes a foo does bar then returns a final baz except if blah happens\".\n. !Array<number>\n. These method calls don't look right in terms of formatting.\n. Think I'd prefer .push(..) here.\n. push\n. !Array<string>\n. !Array<number>\n. You can remove this after changing param types.\n. Same thing for these params !Array<string>\n. !Array<number>\n. Wow, I just noticed parts passed to subformatFixed_ is, incorrectly, non-nullable. That's why this is causing confusion. \nCan you move this check to the top of subformatFixed_ instead?\n. > In regards to your second comment, I really at a struggle since the original person who wrote it didn't seem to give a description either. I'll see what I can do.\nThis PR is looking much better, but I'm still waiting for this to be addressed.\n. It's not just parts. It's all the params that are missing stand-alone\ndescriptions (i.e., the ones that just say \"this is the same \"foo\" variable\nfrom that other method\")\nOn Wed, Sep 16, 2015 at 11:05 AM, John Hu\u00e2n V\u0169 notifications@github.com\nwrote:\n\nIn closure/goog/i18n/numberformat.js\nhttps://github.com/google/closure-library/pull/335#discussion_r39664195:\n\n@@ -580,6 +588,140 @@ goog.i18n.NumberFormat.prototype.roundNumber_ = function(number) {\n/*\n- * This function is called when the length of the repeating digits is at least\n- * one digit. In the number grouping concept, anything left of the decimal\n- * place is followed by non-repeating digits and then repeating digits. If the\n- * pattern is #,##,###, then we first (from the left of the decimal place) have\n- * a non-repeating digit of size 3 followed by repeating digits of size 2\n- * separated by a thousand separator. If the length of the digits are six or\n- * more, there be repeating digits required. For example, the value of 12345678\n- * would be formatted as 1,23,45,678 where the repeating digit is length 2.\n- \n- * @param {Array} parts The original parts variable that built in\n\n@joeltine https://github.com/joeltine : Thanks for your recent comment.\nI'll work on it today. Was held up by daily stand up and other tasks. I'll\nsee what I can do about the parts variable. Let me know if there's\nanything else since my involvement with the pull request exceeded my\noriginal estimated time for this.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/pull/335/files#r39664195.\n. Updated.\n. Can you add a unit test that verifies withCredentials is set for XhrIos created using XhrIoPool?\n. @private {boolean}\n. More detail on what \"withCredentials_\" means would be useful here. See the associated docs in XhrIo for an example.\n. Should this be set in handleAvailableXhr_ instead?\n. I don't think this isDef is necessary.\n. While correct, these type changes have the potential to break a bunch of ppl. \n. @private {boolean}\n. Instead of piggy-backing on the testSetHeaders method for this assertion, can you create a separate testSetCredentials..?\n. Do you still need the entity encoding if you're using 4 indents? I assumed\nthe encoding was only to fix the generated API.\n\nOn Mon, Nov 16, 2015 at 3:20 PM, Erik Neumann notifications@github.com\nwrote:\n\nIn closure/goog/events/eventid.js\nhttps://github.com/google/closure-library/pull/603#discussion_r45000355:\n\n@@ -18,15 +18,15 @@ goog.provide('goog.events.EventId');\n/*\n- A templated class that is used when registering for events. Typical usage:\n  - * \n  - *   /* @type {goog.events.EventId}\n  - * \n\nUnfortunately that seems to not work: then the > does not show up as <\nin the docs. See #603 (comment)\nhttps://github.com/google/closure-library/pull/603#issuecomment-156789878\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/pull/603/files#r45000355.\n. @Belelros were you going to take a look at this?\n. I could've swore clang-format-diff.py wasn't respecting the \"// clang-format on|off\" comments. This was supposed to be a quick workaround, but I just tested it now and it seems to be working. I will remove all of this clang_ignore stuff.\n. I'm concerned about lack of external unit test on this change. It appears we have one internally, however. Because you signed the CLA, I can try pulling this internally and testing it. \n. They're the tests that have promise timeouts that fail before the set timeout value. I just add them to this list as they come up. \n. Obviously, this is meant to be temporary. \n. delete = False means this file won't be deleted even after the program exits, correct? I'd prefer not to pollute the user's disk as someone could be compiling very often.\n\nCan you write this in such a way that it cleans up after itself? For example, rm'ing the file after compilation.\n. Why {null=} here? This type wizardy scares and confuses me.\n. How did you determine these @param types?\n. Please stay consistent with the += (compared to extend()) usage already in the file\n. Space after #. Also, properly capitalize and end comments with a period. Here and throughout.\n. We have an 80 char line length limit. I can't tell if this line or :133 are over 80.\n. compiler_flags can be None here and throw. You'll need to initialize it in that case.\n. I'm confused. Why are you re-adding jvm_flags to the arg list? This is redundant as they're added above.\n. Passing a flags_file handle feels very strange here. I think a better pattern would be something like:\nargs = getjscompilerargs(...)\nflag_file = getflagfile(....)\nargs += ['--flag_file', flag_file.name]\nWith this you have a nice separation of concerns and you're not left guessing what GetJsCompilerArgs does with a flags file you pass it. \n. You can just remove the file in a finally block\n. ... also please add a comment why we're using --flag_file.\n. Rm trailing whitespace\n. It's unfortunate we lose the logging of all the the --js flags here. I honestly don't know how much people rely on this output. We can just try it as-is for now and see if anyone complains.\n. Add a link to this PR as a reference please.\n. do you need the parens around compiled_source?\n. At a glance, this change seems fine to me. There's a bigger underlying question here of python 3 support in general for our tools. This may fix this one issue, but I'm sure there are other places in the code that aren't Py3 compliant. Also, I don't have a lot of experience making scripts both Py3 and Py2 compatible, but I'd hate to see this type of pattern repeated all over the place (i.e., if py3: do blah else: do foo).\nLet me chat with some other folks about this.\n. You'll need to update the unit test jscompiler_test.py to reflect these changes.\n. OK, I think we're OK merging these types of fixes.\n. Can you remove them?\n. I don't think this will work. You bind both MOUSEDOWN and TOUCHSTART to mouseDown_ listener, but mouseDown_ intentionally returns on TOUCHSTART. This will break basically everything as the \"start drag\" event will never fire. \nIn general, this change needs to do some refactoring to abstract the concept of \"mouse\" out of  these methods. \n. What was this removal of GECKO for?\n. What is 1.0-SNAPSHOT? Do we have to update this in the future?\n. If ordering of these matters now, note it in the comment.\n. I think I'd prefer you move the ES6 module test to its own unit test method. Also, you can add a specific _TEST_ES6_MODULE_SOURCE for that test alone. \n. we have an 80 col limit. The proper formatting is something like:\n_SYMBOL_REGEX_STRING = r'[a-zA-Z_$][a-zA-Z0-9$_]*'\n_REQUIRE_REGEX_STRING = (r'^\\s*(?:(?:var|let|const)\\s+{?' + _SYMBOL_REGEX_STRING\n                         + '(?:\\s*,\\s*' + _SYMBOL_REGEX_STRING + ')*}?'\n                         r'\\s*=\\s*)?goog\\.require\\(\\s*[\\'\"](.+)[\\'\"]\\s*\\)')\n. $(mktmp)?\n. You really have to run the command on every single file? I thought dossier would just operate on a root directory.\n. Include $TRAVIS_COMMIT too.\n. +1\n. ?number\n. Need to account for null on timezoneOffset\n. {!goog.date.Date}\n. I think to complete this change, you'd also need to update this.date_ here. Otherwise other methods that rely on date_ will be incorrect. E.g., calling getDate() immediately after setting an offset will not return the expected time.\n. It doesn't. @shicks and I were working together on this and he just hosted it in repo for convenience. I definitely won't commit it like this. Once we verify the script works, we'll point this to master.. ",
    "ChadKillingsworth": "Any update on this? The documentation really needs regenerated anyway as the goog.dom.classes file needs the @deprecated annotations.\n. @MatrixFrog I'm not a committer on closure-library so someone else will have to hit merge.\n. > If Google Closure will be installed as node module under node_modules/ dir, I am wondering how will you use it on the client? I bet your project static directory (where you store static assets) is not node_modules/, right?\nI've seen this handled a few different ways:\n1. A pre-build task copies the library over to the static resources folder.\n2. The local dev server has a route that maps node_modules/closure-library to some relative url to the project root.\n3. The project has a dev task that watches source files and compiles the project with SIMPLE_OPTIMIZATIONS for development automatically.\nAs for duplicate copies - that's an implementation issue and you would need to make the decision that makes most sense for you.\n. @MatrixFrog This PR needs merged before closure-library can be published to NPM.\n. This is being deleted\n. @MatrixFrog done\n. Looking at the commit history, the git date for 1ee4e8e88687d5167dedcbe2cfe19f1a2279583c is March 25, 2015 while the commit date is April 9, 2015. I'm guessing the original commit was on March 25 and the MOE sync happened on April 9?\nRegardless, I'm not sure why the @interface change didn't cause errors in the first place.\n. Can this be merged? I have projects frozen on a specific commit as this code does not currently compile.\n. I'll go ahead and publish it before it's merged then.\n. This has been superceded.\n. Added the needed goog.forwardDeclare calls and type casts to more objects.\n. The 'google-' prefix was added to the projects because templates and compiler names were already taken. The correct path here would be to get a scoped npm organization @google to prefix all the names with. It's on my list to bring up today at the compiler meeting.\nBut yes, changing the name would definitely break existing users - so will adding a scope name.\n. We discussed it at the compiler meeting and aren't going to change the names at this point. There wasn't really a benefit. No matter what avenue is taken, require statements would have to be changed.\n. Ping me when you get there. Happy to help.\n. Here's the exclusion pattern I'm using with the --process_common_js_modules flag:\njs\n[\n     'node_modules/google-closure-library/closure/**/*.js',\n     'node_modules/google-closure-library/third_party/**/*.js',\n     '!node_modules/google-closure-library/**/*test.js',\n     '!node_modules/google-closure-library/**/*tester.js',\n     '!node_modules/google-closure-library/**/*_perf.js',\n     '!node_modules/google-closure-library/closure/goog/bootstrap/nodejs.js',\n     '!node_modules/google-closure-library/closure/goog/bootstrap/bytestring_perf.js'\n]\nI'm using --dependency_mode=STRICT so we'd need some combination of these.\n. For npm, it would be rather nice if the exclusion pattern were exported such that:\njs\n// name the property whatever you feel is appropriate\nvar closureGlobPatterns = require('google-closure-library').GLOB_PATTERN;\nThat should be as simple as adding the following to the NodeJS bootstrap file:\njs\nmodule.exports = {\n    GLOB_PATTERN: [ ... ]\n}\n. There are 2 distinct use cases involved:\n1. Use within a NodeJS server/process\n2. Use as a traditional front-end library\nFor the first case, you need the bootstrap so that goog.require/provide calls work without compilation. For the second, you need to exclude them as they are not used and the commonjs rewrites cause errors.\n. The bootstrap file contains references to core node modules - it has no place in a front end dev chain and the compiler doesn't know how to handle this:\n```\n/node_modules/google-closure-library/closure/goog/bootstrap/nodejs.js:43: ERROR - Failed to load module \"fs\"\nvar fs = require('fs');\n         ^\n/node_modules/google-closure-library/closure/goog/bootstrap/nodejs.js:44: ERROR - Failed to load module \"path\"\nvar path = require('path');\n           ^\n/node_modules/google-closure-library/closure/goog/bootstrap/nodejs.js:45: ERROR - Failed to load module \"vm\"\nvar vm = require('vm');\n         ^\n3 error(s), 0 warning(s)\n```\n. It's being actively discussed, but even then this would only apply to server side node uses. The front-end dev can't use a core node module.\n. Is there still a performance hit for passing the arguments array out of the function?\n. Is the code size difference here really even worth discussing? We can't be talking about much - even on large projects.\nIt's an easy enough peephole optimization to write. I wouldn't even mind doing it.\n. @MatrixFrog Has there been an internal release yet? Can this be merged?\n. Yes exactly! For reference, here's the compiler version: https://github.com/google/closure-compiler-npm/blob/master/package.json#L3\nI'm not sure how the npm publication works internal to Google either. For the compiler, we have travis auto publish it to npm on every successful build. Since you can't publish the same version twice, travis only publishes new versions when the package.json changes.. Native images of closure compiler are now published on npm. . I can - I just didn't think it would do anything useful and other library projects don't have one. https://github.com/angular/angular.js/blob/master/package.json\n. No they are restricted to those two files. I'll update with @package.\n. The other option would be to increase the bracket usage:\nxhr['open']('get', src, false);\nThis is also occurring on Line 850 which doesn't use brackets.\n. ",
    "adam-rocska": "@joeltine Is this issue lost? \nWhen I click the link to the original issue, I get redirected to an unrelated pull request with which the only common point is the id in this url, and the id of the unrelated pull request. . ",
    "shicks": "It would appear to be the case.  Looks like Google shut down code.google.com and just redirect to the same-id issues in GitHub, which is obviously wrong.\nFWIW, it's still available on archive.org.  The whole goog.ui package is mostly dead at this point, though.. Since the repro demo is no longer working, I can't verify if this is even still an issue.  There have been some changes to the mousewheel handler since this issue was filed, so potentially it's already been fixed?  If it's actually still an issue, please reopen the issue and post a new repo case.\n. This has been fixed.\n. That commit is correct, but your master branch points to a child commit of it that merges in many more - hence why github still shows 22 commits in the PR.  To visualize this, try git log --graph --decorate --color master upstream/master (where upstream is whatever you named Google's remote; if you don't have one, git remote add upstream https://github.com/google/closure-library.git) and see the extra lines all over the place.  What you need to do is to reset your master branch to it (git checkout master; git reset --hard 9b96a11 and then do git push --force origin master (where origin is whatever your fork's remote is named), which will allow you to rewind the branch on your own fork.\nI'm assuming the mess is because you tried to push the squashed commit to your fork and it complained that github was ahead of your local commit so the push failed, and it recommended you pull first, which you did, and ended up re-merging everything.  The correct solution then is not to pull but to --force your push.  Since you don't have anybody downstream to cause problems to, rewriting your history is exactly what you want here.\n. Yes, that's much better.  Thank you.\n. Looks reasonable to me.\n. goog.array.bucket should be able to do what you need.  You'll get an object {'true': [...], 'false': [...]} but otherwise it's the same thing (and possibly better since it's clear which element is which).\n. Please squash these commits into a single one we can pull.  Thanks!\n. It doesn't look like you were able to squash these on top of master, but rather merged master into it, which isn't the same thing.  The trick is that when you push back to your own github repository, you need to use git push -f github master (or whatever your remote is called).  Otherwise, git will complain that your push would rewrite history and suggest you pull and merge (which is what you did) first.  But in this case, rewriting your fork's history is exactly what you want to do.\n. Looks good.  Can you please squash this down to a single commit so we can pull it?\n. I still see \"9 commits\" up at the top.  Make sure that after you rebase on top of our master branch, you use git push -f to push it back to your fork.  Otherwise the push will fail and suggest you pull and merge, which defeats the whole purpose of squashing.  Try git log --graph --decorate --color --all to see more clearly what I mean.\n. This doesn't actually work quite how you'd expect.  I opened https://github.com/google/closure-compiler/issues/1176 to address the underlying problem.\n. Even with the compiler bug, this is still potentially helpful.  But it also has the potential to break a lot of tests.  I'm running it through our internal testing tools to see what it does before pulling.  Thanks for finding this!\n. Looks like nothing's broken as a result.  @concavelenz what do you think?\n. Would you be up for putting together a pull request for this?\n. You can use GitHub's button to fork this repository.  It may only be a few small changes, but a commit needs to be made, and merged, etc.  Since it's a low-priority issue, we would prefer if you could make that change and then we can just pull it in after Travis tests it.\n. This is adding a lot of code - a whole new function that takes 6 parameters - and I'm not convinced it's pulling its weight, since most of what it's \"factoring out\" is simply passing parameters through to a factory method.\nI could get behind factoring out the rest of the methods, though - if you wanted to define something that took a button and a starting color and attached what needed to be attached.  Then you'd have (abbreviated)\n....fontColor = function(...) {\n  var button = ....makeColorMenuButton(...);\n  ....decorateColorMenuButton_(button, '#000');\n  return button;\n}\nor even\nreturn ....decorateColorMenuButton_(....makeColorMenuButton(...), '#000');\n. @joeltine - does the travis failure look legit or is it a tool failure?  The error I see under \"details\" is\nLine 1085, E:0251: Invalid suppression type: newCheckTypes\nLine 1086, E:0217: Missing @return JsDoc in function with non-trivial return\nwhich doesn't seem relevant to this change.\n. @psam44 can you squash all these commits so that we can pull it in as a single commit?\nTo do this:\ngit rebase -i master\nand then change all but the first pick to squash.  Then you can rebase it on top of upstream/master (or whatever you've named our repo's remote).  When you push the branch back to your fork, you'll need to use git push -f to force it to rewrite your history (otherwise it will tell you to pull and merge, which undoes everything you'd just done).\n. I'm not sure why the CLA check still fails for you, since you did respond in the last PR.  Maybe it's having trouble linking the address you signed with to your github username?\n. Thanks for putting this together.  Before we can merge, we're going to need you to squash these to a single commit on top of our master branch (note, you'll need to use git push -f after rebasing to avoid having to pull and merge).\n. Looks reasonable to merge, except for the testIs3dSupported change.  Could you please revert that last test change and then squash your commits onto our master?  (you may need to git push -f).\n. Please squash your commits into a single commit, then rebase it on top of master.  You'll need to git push -f to rewrite your fork's history.  Then we can merge.. I tried testing this internally and am getting some errors in Firefox:\n```\nERROR in testScale\nAn invalid or illegal string was specified\n\ngoog.style.transform.getScale at style/transform.js:107:18\nsetAndAssertScale at style/transform_test.js:79:17\ntestScale at style/transform_test.js:176:3\n\nERROR in testScaleZ\nAn invalid or illegal string was specified\n\ngoog.style.transform.getScale at style/transform.js:107:18\nsetAndAssertScale at style/transform_test.js:79:17\ntestScaleZ at style/transform_test.js:172:3\n```. Looks good, thanks for doing this!\n\nIf you could please squash your commits down to a single commit (git rebase -i) and then rewrite history on your fork (git push -f) we can go ahead and pull this.\n. Maybe you misunderstood what I meant by \"here\" - the \"goog\" should be lined up with \"myEventId\" since we use +4 indent for line continuations.  I wasn't intending to indent the entire code block extra.  In any case, it's not a big deal.  I'm pulling this internally.  Thanks for doing this!\n. So should we close this PR?  And/or open an issue to track what to do about it?\n. Aside from adding even more complexity to an already poor API, I don't know of a specific reason.  I'm hesitant to add yet another optional constructor argument to the already-excessive number of them, but if you can come up with a reasonable alternative that allows injecting a factory and doesn't break existing callers (I'm at a loss, here), we'd be open to pull requests.\n. Looks good, thanks.  Pulling for internal review.\n. Merged.\n. Thanks for working on this - I've sent it to one of our UI folks to review it more thoroughly.  In the mean time, could you look into adding a regression test for this?  Thanks!\n. I don't really understand the test, so hopefully @dferrara19 can chime in here.  In terms of enabling all tests in strict mode, my guess is it'll break a lot of things.  @joeltine can consider whether/how this could be feasible.\n. Where I'm confused is how the you're running this particular test in strict mode?  I would have expected to see a 'use strict'; in the test function or something, but maybe we're talking about different meanings for strict?\n. I see.  Sorry for dragging this out so much - I'm a little hesitant to make such a big change to goog.ui, and would really like some input from @dferrara19 who has more experience with this codebase than either Joel or myself do.  In any case, I'll run a test to see if this breaks any internal tests.  If not, that will give me at least a bit more confidence to proceed.\nMeanwhile, I'm a bit curious - if we needed to jump through such specific hoops to get the test to run in strict mode, then how is it that this bug came up in production in the first place?  My assumption is that you're compiling your code and outputting it with a strict mode wrapper, but would be interested to hear more specifically how it came up.  Thanks!\n. @hochhaus Thanks for the background.  Yes, I would say that this is intended use, and so in principal we should support strict mode here.  It's just a question of doing so in the \"legacy\" goog.ui library.\nThe internal test seemed to pass okay.  So I'll pull it and hope for the best.\n. Merged in 546bfccde8b9b9c78c43cc028a8cb05d6cf10fe3\n. Looks good, thanks for making this change.\n. Yes, please do rebase.  Additionally, you'll need to use git push -f after rebasing, rather than adding an extra merge commit.\n. Good catch.  This looks like an issue that the current compiler's type inference lets go (it assumes that since Listener is an implementation of ListenableKey, that you probably know what you're doing), but the New Type Inference will snag on this.  Would you be up for putting together a pull request that adds a goog.asserts.assertInstsanceof(listener, goog.events.Listener); call before the markAsRemoved(), which should resolve this?  (Note that you'll need to add the goog.require() and regenerate the deps.js file, too.  If you'd rather not, that's okay, but it's a great way to get started contributing!)\n. We'll merge a fix internally.  Thanks for pointing this out!\n. Seems like this is a prime candidate for allowing \"overloads\" of type signatures.\n. Thanks for putting this together.  Can you please sign the CLA as described by GoogleBot's post above?  Once that's taken care of (and GoogleBot tags this as CLA: yes) then we can merge it.\nAlso, if you could revert the change to deps.js, that would be great.  We'll take care of regenerating it automatically when we merge.\n. This has been merged internally and should be resolved in our next push.\n. Seems like it should be fixable even without a FragmentData API, no? Then again, I haven't look at goog.Uri recently...\n. I'd bet Jason Leyba would be open to contributions to make the generated documentation easier to read, and we'd certainly welcome any improvements we got here as a result!  I fully agree with your example that explicitly including the namespace and the return type is more readable, FWIW.\n. @jart We migrated away because the old documentation was built by a tool based on the original internal version of Kythe, but when they moved to open-source Kythe it became incompatible and so eventually we were no longer able to regenerate the docs.  The old tool was also completely unmaintained, so there were various bugs and I think it was pretty appealing to move to a tool that was actually being maintained.  I have no idea why it's in Jason's personal account, but presumably he's cleared it through all the appropriate channels (for comparison, Truth used to also be a \"moonlighting\" project hosted outside of Google).\n. Thanks for the contribution - in order for us to merge it, could you please squash these commits and rebase it on top of our master branch and then git push -f to rewrite your history (rather than merging).\n. I'm not sure we actually want to be encouraging the use of goog.structs.Map at all.  Now that the compiler supports ES6 Map, that's really a better option in basically every situation.  goog.structs.Map has a number of fundamental problems (primarily around non-string keys) and gives users a false sense of confidence that it will \"do the right thing\" when it really won't.  I'm hopeful that it will be officially deprecated Any Day Now\u2122.\n. Yes and no - the behavior would be welcome, but I'm concerned about over-configurability and API design.  The various XHR classes are a tangled mess that have been having their constructor parameters grow unbounded and between the pool and the manager there's lots of places where constructor parameters just get passed along to some other class...\nIf we could add the behavior in a sane way that doesn't add yet another positional parameter to a method that already takes 4+ parameters, then it's probably worth adding.  Maybe an appropriate way would be a function that can be called repeatedly to return a delay (possibly with a parameter that's the number of tries so far) - then different retry strategies can be generated and/or composed.  This is an awful lot like an Iterator, but we can't really use ES6 here (yet)...\n. I'm not clear on what the solution should be.  As I understand it, goog.Html5History should probably be preferred over goog.History, so workaround #2 is out.  And as you point out, simply unlistening popstate (as the other two solutions seem to be doing, though admittedly I don't really grok ClojureScript) doesn't solve the problem because it breaks the Back button.\nIf you could provide more details (or even better, a patch), then we could look into it further.  Perhaps a workaround would be to detect and swallow a duplicate event in onHistoryEvent_?  But I'm not familiar enough with the circumstances to suggest how that might be detected.  Is this bug also present in older versions of Safari, or only 9?  (What about future versions? is it just an incompatibility with the spec? does the spec say anything about whether the browser should fire this popstate event or not?)\n. Looks reasonable.  I'm going to try to push this through our internal presubmit and see if anything breaks.\n. Presubmit passed.  We'll get another set of eyes on it and then should be able to check it in.\n. This seems to have been addressed.. Could we change its type to the following?\njs\n/** @param {function(this: T, ...*): R} func\n    @param {...*} var_args\n    @return {function(this: T, ...*): R}\n    @template T, R */\ngoog.partial = function(func, var_args) {};\nThis should fix the definition, but could introduce problems if callers have underlying type mismatches that were getting glossed over by the raw Functions before.  In the interim, we could keep the @return type as {!Function} and then fix callers in a second pass.\n. The link seems to be broken - I think you want https://github.com/google/closure-library/blob/master/closure/goog/promise/testsuiteadapter.js\nAs far as that import and package.json go, we don't use it internally, so I don't really know what that's all about.  Feel free to send a PR to fix it.\n. Thanks for reporting this.  Do you think you could put together a pull request to implement your workaround?\n. Thanks for your interest.\nThe context only matter if the first argument (resolver) passed into new goog.Promise refers to this.  The resolver in withResolver only refers to local variables, so the context doesn't actually play a role here.\n. Should be as simple as moving goog.loadModule and goog.loadModuleFromSource_ out of the debug loader.\nI don't see a reason to guard it at all - what's the argument in favor?\n. Closure compiler will be providing polyfills in the near future.  Given that it was never finished, can we just delete this file?\n. Does the built-in Element.prototype.classList meet your needs?  goog.dom.classlist is basically just a shim for that and shouldn't really be used.  That said, if you can fix it to work, you're welcome to send a PR.\n. This seems to be WAI.  The reference to this was added the same time as the use of this was banned, so this appears to be a test that this banned behavior is doing what it should.  My instinct is that the test should probably not be compiled.\nPlease see https://github.com/google/closure-library/blob/master/scripts/ci/compile_closure.sh for an example of how to compile closure and omit test files.\nDoes it work if you use if (!COMPILED) to gate the offending code?  If so, you're welcome to send a PR.\n. I'm not clear on why this breaks newer browsers - they should bail out early with either WebKitCSSMatrix or MSCSSMatrix, and then this removed code is ever executed.  Am I missing something?\nAlso, we have another PR #596 that adds DOMMatrix - where does that fit into this?\n. This has already been fixed upstream.\n. Makes sense.  Feel free to send a PR.\n. Oh, I thought this was just one of those (\u256f\u00b0\u25a1\u00b0)\u256f\ufe35 \u253b\u2501\u253b moments...  \"I've had it up to here with this library, you know what, I think I'll just delete the whole thing.\"\n. Thanks for the review, merging.\n. Agree that documentation would be good, and maybe it would be good to fix.  We'd welcome any PR to do either of those!\n. @mikekap Does that seem sufficient?  If not, feel free to reopen and suggest where else we could document it to make it clearer.. Awesome, thanks! Will merge internally and then push it back out in the next push.\n. The main problem in your code is that Multimap<function(!Match)> is nonsense since Multimap is not declared with @template.  The compiler should probably have a warning for using template paramaters for non-template types (it was impossible when generics were first added since there were so many spurious/incorrect usages, but now that's it's been there for years, this may be feasible).\nBut Dimitris is right that the \"correct\" solution would be to add the @template.  This should be possible, but goog.structs and goog.labs.structs are both basically in maintenance mode, since we are working on a cleaner and more coherent collections library.  If you want to try to add the generics and properly type the methods, feel free to send a PR.\n(Also note that the ! in !string and !function are redundant - the compiler already assumes these lower-case types are non-nullable.). I submitted this internally but ended up having to roll it back due to conformance violations.  It might be a while before we can actually land it permanently.. Closed by a53790dfb23e3014f2783b664d0058a4272ecdde. assertEquals is not aware of different classes' conception of equivalence.  Calling == is \"working as intended\" in this case, though it would be great if we had a framework that worked better, since assertTrue is going to provide a useless failure message.\nWe're experimenting with what a more modern test assertion framework would look like, and equivalence support is absolutely one of the features we're hoping to target.  For now, I don't think we have much helpful to say in this specific case, though I wouldn't be opposed to adding an assertLongEquals method if an appropriate place can be found for it (not sure there is one, though).  But do stay tuned - in the next few quarters we're hoping to have a better answer.. Looks like assertObjectEquals does exactly what you want.  Thanks, Nick!. This test is currently failing in IE8:\nERROR in testGetReallyEmptyCookieIE\nExpected <> (String) but was <undefined>\nAnd unfortunately, since it's IE8, it won't give any better stack trace information.... Sorry, I assumed since the author responded in agreement, that he implemented your suggestion.  I guess that wasn't the case.  We can't merge this until IE8 passes, so if we can get that test fixed, that would be great.\nFor your option 1 are you suggesting we simply || the result with undefined so that get() never returns empty string (or vice versa - I'd personally prefer never returning undefined)?  I don't know under what situations there's currently a difference (it sounds like newer browsers are capable of distinguishing empty strings from absent) so if we made that change I'd need to run it through some more rigorous internal testing to make sure we're not breaking anybody who's depending on one behavior or the other.. Resolved by using String.split(';') instead of the regex, and then goog.string.trim on the result.  Cookies should be read infrequently enough that this shouldn't be particularly problematic.  Should go out in the next push.. Oops, closed the wrong PR with that last commit.. As @mashedcode points out, if we rewrote the library in TS then non-TS users would have a harder time using it.  On the other hand, if a .d.ts file is sufficient, you might look into Clutz, which (as I understand it) extracts .d.ts files out of closure-annotated .js files.\nIf you get it working, feel free to contribute any wisdom (in the form of a wiki article or a script, whatever) so that others may benefit from this!. Do you have a link that explains this property - what browsers is it available under?. Looping back, it looks like the timeStamp property is pretty limited in terms of browser support.  If there is a reasonable way to fill it in for goog.events.Event (or BrowserEvent) then I'd be open to a PR that adds it.  The second link seems to suggest it's got to do with \"high resolution\" timestamps, which might be harder to polyfill.. Mostly looks good - after addressing the one comment, if you could squash your commits and then rebase on top of our master (you'll need to git push -f to avoid creating a merge commit) then we can pull this internally.\nThanks!. Closed by a6e579df9016cf21b785a31946c32706bf0d217a. I have to agree with @mashedcode here.  On the one hand, I agree that the functionality is somewhat useful.  On the other, each additional optional parameter comes at a pretty high API cost, and I'm not convinced the cost is worth the benefit given the other options already available.  If we had opted for using an object to \"name\" the optional parameters when this was originally implemented, then the API cost would be near zero and I'd have no problem merging this.  But as it stands now, I'd prefer to let this one go.\nAdditionally, I'd encourage you to look at modern browsers' built-in \"fetch\" API, which we hope will eventually supersede goog.net.XhrIo, since it offers a significantly cleaner interface, if it's supported in the browsers you need to support at least.. LGTM.. @concavelenz Do we want to try to fix these?  Seems like a bit of a lost cause to me.... Looks like the problem is on line 168, where we assume that each character is a byte and we OR together four characters (left-shifted 0, 8, 16, and 24 bits).  For the first three characters in each quad, this means we get the wrong result, since we've OR'd the high byte of one character into the low byte of the next character.  For the fourth, the high byte is simply dropped.\nI can imagine two reasonable fixes, not sure which is better (or importantly, more correct):\n1. Treat the string as proper UTF-8, with multi-byte characters actually taking up multiple bytes in the buffer.  This will presumably come with a performance hit across the board.\n2. Treat the string as UTF-16 (which is more consistent with how JS treats strings internally, IIUC), inserting padding bytes next to every single-byte character.  This changes the hash for all existing strings.\nAnd a wrong fix would be to rotate the high byte of the fourth character into the low byte and XOR instead of OR.  But I'm pretty sure this would result in other collisions, so (without confirming this) I'm not going to consider it as a viable alternative, though it's the easiest.. Looking further, this is a problem with most or all of our hash implementations.  I had hoped to simply deal with higher characters only when we see them, but since this logic would have to be replicated across many files, we'll probably want a separate utility function/class.  Simplest would be to just immediately transform all strings into a UTF-8 array, but that's going to be a performance hit.  Another option is to create a wrapper class to do it lazily (though checking the length is still going to be expensive up-front).\n(Brainstorming here...) Potentially we could abstract this across all types with a ByteSource class.  The exact length isn't strictly needed, so we could afford to be fuzzy about it until we reach the end of the string, but that's a pretty crummy API.  What we really need is a way to request entire blocks at a time.  The optimization for compressing a block-at-a-time may be unnecessary if the wrapper can just read bytes in place - the main problem would be how to handle incomplete blocks.\nIn any case, Hash.prototype.update does specify that strings need to have only single-byte characters.  It might be reasonable to throw if we encounter higher characters, though there's a lot of places we'd need to check (across a lot of files) so I'm not sure it's worth it.  I might take a look at Guava's ByteSource API and see if we can take some inspiration from that.. Testing internally to see if anything breaks.. Why 8 and 10, but not 9?. @dankurka Can you take a look at this?. @dankurka deprecated this - I'm not sure we want to simply undeprecate it.  Rather, we should be able to remove the deprecated usage from within our own library.  I believe we had previously tried to do this.. Is the clojurescript essential to this question? I'm pretty baffled by the\nseemingly random dots, slashes, and hyphens. Can you post the generated JS\n- does that possibly reveal what's going on?\nOn May 19, 2017 10:03 PM, \"David Meister\" notifications@github.com wrote:\n\nJust messing around with this in clojurescript.\nMonitoring code:\n(let [history (History.)]\n   (goog.events/listen history goog.History/EventType.NAVIGATE\n    (fn [e]\n     (prn (.-token e)))))\nCase A:\nset the hash directly\n(-> js/window .-location .-hash (set! \"foo\")) ; \"\" is printed\n(prn (-> js/window .-location .-hash)) ; \"foo\" is printed\nCase B:\nuse setToken\n(.setToken history \"foo\") ; \"foo\" is printed\n(prn (-> js/window .-location .-hash)) ; \"foo\" is printed\nI expect to see \"foo\" printed from the monitoring code both times, but it\nonly seems to work for .setToken\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/closure-library/issues/825, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAIyG-QAub1UVJs_8lwwpGXFeOjYSUJBks5r7nQRgaJpZM4NhMYO\n.\n. Not sure quite what's going on here.  I tried to repro locally but (a) history is a read-only property of the global object.  Is your constructor call the builtin History or goog.History?  If the latter, then I'm not able to repro - I get \"foo\" logged everywhere as expected.  If the former, then there's various other issues: Chrome tells me\n\nvar h = new History()\nVM566:1 Uncaught TypeError: Illegal constructor\n    at <anonymous>:1:9\nso it doesn't even let me instantiate it.  If I just use the global history object, it still doesn't work:\ngoog.events.listen(history, goog.History.EventType.NAVIGATE, () => {});\nevents.js:264 Uncaught Error: addEventListener and attachEvent are unavailable.\n    at Object.goog.events.listen_ (events.js:264)\n    at Object.goog.events.listen (events.js:185)\n    at <anonymous>:1:13\ngoog.events.listen_ @ events.js:264\ngoog.events.listen @ events.js:185\n(anonymous) @ VM675:1\nbecause history isn't an event target, so it doesn't have an addEventListener method.\nCan you provide some more details?  What browser?  A specific .js file that I can run to reproduce the error on that browser?. Not sure if Travis will run the new script - presumably it will: https://travis-ci.org/google/closure-library/builds/242668533?utm_source=github_status&utm_medium=notification. I don't think so.  Can you provide more details about how you're getting this?. I dug through the history a bit and it looks like it's been there from the start.  I think it was just added because back in 2007, all form elements had a type, and they wanted to not blow up when lowercaseing it.\nIf you want to send a PR that falls through to the default case if type isn't given, that would be fine.. The NPM publishing is all black magic to me.  I don't think MOE manages this file at all.  No idea how it's kept in sync/generated/etc.  Are you saying it should be simply \"20170626.0.0\"?. @ChadKillingsworth Is this what it should be?. Oh, that would be awesome to get that set up.  Currently we have a script that @joeltine wrote to manually push to NPM.  I believe the script is also supposed to (separately) create a pull request to update package.json, but it's been erroring at that step for the last several months, and nobody's taken the time to figure out why or how to fix it.. A few formatting issues, but we can take care of that on import.\nI'm a bit worried that we'll expose some bad typing on at least one or two internal projects with this change, since introducing better typing is always dangerous.  But I'll run it through our internal queue and see what happens.. This did expose a handful of type errors.  Once the fixes have been submitted, I will pull this change.. This is now being merged.. @jplaisted wanna try pulling this one?. This is definitely a \"help wanted\" sort of issue, though a number of these will be difficult due to internal usages.. That's a good idea.  We actually hide the warnings during compilation internally (preferring to instead expose them during code review) so we don't have as much visibility into that.  Feel free to put together a PR, since this is a lower priority item for us and we may not get to it very soon.. For now the best bet is probably to suppress it.  Internally we're working on infrastructure to be able to add ES6 code into existing files, but that won't likely finish until end of year (we have a lot of older projects with development serving systems that don't transpile).  Once that's done, then the first place to start migrating would be Closure Library-internal usages, that don't bleed into the API.  For instance, a particularly hairy usage is goog.ui.dialog, which subclasses goog.structs.Map.  Changing this to use an ES6 Map is a significantly incompatible API change, so it's going to be a lot of work to migrate existing usages.. The reason is basically internal hemorrhaging.  We needed to stop the bleeding.  We'd tried other means to communicate \"don't use this\" and none of them were effective enough - we were still seeing multiple new usages of these types every week, in code that should have been using the ES6 classes.  Internally, we don't recommend people compile with deprecated warnings enabled, and instead surface the warnings in our IDEs, code review, and source viewing tools.  So it's simultaneously more obvious and less intrusive.  We do want to migrate away, but we simply couldn't wait until Closure was migrated before deprecating, since every week we waited, the harder any migration was going to be.. Can you provide some more details about your setup?  What does your compiler invocation look like?. I think your link is a little bit off, since scheme isn't defined in terms of unreserved, but is is defined in Appendix A as ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" ), so you're correct that . should be allowed.\nThat said, I'm a bit puzzled about how to distinguish scheme:hier-part from authority:port, since we currently parse foo.bar:80 as the authority foo.bar with port 80, but if we allow foo.bar to parse as the scheme, then (in my reading) 80 is also a valid hier-part via path-rootless which can be one or more pchar, which includes all unreserved characters (including digits).\nDo you have a specific use case in mind?. @jplaisted is working on revamping our debug loader to work with ES6 modules, and part of that involves making it more asynchronous.  I believe this will come for free when that rolls out, though I can't say for sure.. I guess I misunderstood the request.  We are looking into the possibility of building a late-loader into Closure, but it's unclear what its mechanism will be, and it's a lot less certain to happen.  As @jplaisted points out, it's unlikely we'll want to tie it to the same symbols used by goog.require (especially since these are increasingly dinosaurs in our ES6 world).  So I'd say stay tuned and please chime in on a separate issue if you have thoughts about late loading, but this particular issue is WAI.. Just to be clear, we consider late loading an orthogonal issue to goog.require and to the ES6 module loading issue, and it's honestly somewhat low priority.\nIn particular is that we're primarily concerned with late-loading production (compiled) code, and it's pretty unclear how this would fit into Closure Library.  It's not impossible that we'd work on it, but I wouldn't hold me breath on it.. It sounds like you're saying you're not actually interested in late loading, per se, but that for some reason you still need to do your initial code loading after document.ready.\nI agree that we want to support the case of loading uncompiled code directly in the browser without a long compilation step.  Where you're losing me is that I don't understand why this doesn't work for you.  I think you're saying it has to do with wanting to use goog.require for \"live patching\", i.e. replacing (a subset of) JS implementation in place without reloading the entire HTML.\nI understand that there are Chrome developer tools to do this, but have never looked into how they work.  I'm not sure that goog.require is appropriate for this - for example, and already-existing instances of old classes will no longer be instanceof the new replaced version of the same class - you need some deep browser integration to make that work right.\nOr am I still misunderstanding what you're trying to do?\nI don't know the complete history, but my understanding is that we use document.write for a reason - specifically, we need to work in CSP contexts where eval is not allowed.  So simply replacing one for the other is a non-starter.  Maybe there's a way for you to switch into the eval mode using the already existing infrastructure?. TL;DR: I think you might be able to get what you need by bootstrapping the following before loading base.js:\njs\nvar CLOSURE_DEFINES = {'goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING': true};\nWould you mind trying that out?\nLonger story:\nI find the following in base.js:\n```js\n/*\n * @define {boolean} Whether to use a Chrome app CSP-compliant method for\n *     loading scripts via goog.require. @see appendScriptSrcNode_.\n /\ngoog.define('goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING', false);\n/\n * Appends a new script node to the DOM using a CSP-compliant mechanism. This\n * method exists as a fallback for document.write (which is not allowed in a\n * strict CSP context, e.g., Chrome apps).\n \n * NOTE: This method is not analogous to using document.write to insert a\n * ",
    "drucifer": "The following code solves the issue, and avoids the compiler warning mentioned in the original issue report.  It's somewhat redundant, but the compiler appears to deal with it effectively, as the overall compiled file size is about the same for me.  I tried a few approaches of combining the first two if statements, but they generally resulted in less readable code, or a larger compiled output, or both.\n```\ngoog.ui.media.FlashObject.prototype.isLoaded = function() {\n  if (!this.isInDocument() || !this.getElement()) {\n    return false;\n  }\nif (this.getFlashElement().readyState &&\n      this.getFlashElement().readyState ==\n          goog.ui.media.FlashObject.SwfReadyStates_.COMPLETE) {\n    return true;\n  }\nif (this.getFlashElement().readyState &&\n      this.getFlashElement().readyState == \"complete\") {\n    return true;\n  }\nif (this.getFlashElement().PercentLoaded &&\n      this.getFlashElement().PercentLoaded() == 100) {\n    return true;\n  }\nreturn false;\n};\n```\n. Fixed in 3f950c0\n. ",
    "jhiswin": "I would recommend some kind of command line option to select encodings.\nFirst solution would also make it compatible with Python3.\nI've already signed the Google CLA.\n``` javascript\nimport codecs\nfileobj = codecs.open(path, encoding=\"utf-8-sig\")\n```\nif some kind of special encodings need to be supported, you could just strip UTF-8 BOM sig:\n``` javascript\nfrom codecs import BOM_UTF8\n  if str.startswith(BOM_UTF8):\n      return str[len(BOM_UTF8):]\n  else:\n      return str\n\n```\n. @concavelenz I've made a pull request that I believe also resolves this issue: https://github.com/google/closure-library/pull/301\nI'm sure that pull request could be made more elegant somehow.\nBut, due to the way it's handled in depswriter.py and nuances with file encodings, I'm not 100% sure this is the preferred way, or if it might have side effects for some code/file somewhere that works around this some other way or uses some non-UTF8 encoding.\n\n\nAutomagically detecting file encodings is non-trivial, so if someone is using a code-base with non-UTF8 encodings this patch could potentially break things, and there isn't really an easy way to detect the encodings.\n\n\nHowever, I am using this as-is and have not run into any issues yet, but this is only because it was strictly enforced for the codebases I worked with that everything be converted to UTF-8 encodings.\n. Hi Nathan.  I think I signed it as Jonathan Hsu.  I can re-sign a CLA if necessary.\n. @concavelenz Is there any particular way that I have to sign the CLA?  I've tried to sign the CLA multiple times now, but it doesn't seem to get through.\n. ",
    "thinkingmedia": "This needs to get fixed.\n. I just ran into this issue. The deps is quietly skipping utf 8 files.\n. ",
    "concavelenz": "Is there a patch already? Otherwise please submit one\nOn Oct 10, 2014 10:41 AM, \"Mathew Foscarini\" notifications@github.com\nwrote:\n\nThis needs to get fixed.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/issues/11#issuecomment-58690118\n.\n. That is unfortunate. That we don't have testing for these python utilities is just lame.\n. I'll have a fix pushed out shortly (along with a regression test)\n. Should be fixed now.\n. @jimbojetlag that is correct, both goog.base and the \"base\" method get rewritten to something like:  class.superClass_.method(...)\n. We aren't limiting this library to browser only environments.\n. However, this is fixed by setting goog.json.USE_NATIVE_JSON which is required for environments like Chrome Extensions.\n. The original issue is unrelated to the Apr 30 comment.  non-advanced mode dependencies is a compiler issue.  For the original issue, this comment leads me to think this is no longer an issue:\nhttps://github.com/google/closure-library/blob/master/third_party/closure/goog/deps.js\n. I don't know why these have been sitting so long.  Nick are you still interested in having this merged?\n. Before someone can look at this a CLA must be signed.\nhttps://github.com/google/closure-library/blob/master/CONTRIBUTING\n. This has been available for a while: http://google.github.io/closure-library/source/closure/goog/demos/\n. before anyone can look at this a CLA must be signed:\nhttps://github.com/google/closure-library/blob/master/CONTRIBUTING\n. No know CLA signature.\n. Sorry, I don't see it.  Please resign a CLA : \nhttps://github.com/google/closure-library/blob/master/CONTRIBUTING\n. Verified the CLA has been submitted for gingerik\n. This looks correct but it would be nice to have a regression test that shows the issue.\n. Likely, I'm missing the obvious documentation.  However, any of the \"test.js\" files should be a good example (https://github.com/google/closure-library/blob/master/closure/goog/net/xhrio_test.js and its matching .html file for naive test runners).  The \"goog.testing.jsunit\" is the key dependency.  \n\nThere is also a chapter in the book.\nhttps://www.safaribooksonline.com/library/view/closure-the-definitive/9781449381882/ch15.html\n. Looks good to me, can you update to fix the merge conflicts?\n. @nanaze  Who can review this?\n. This is a difference between the internal google and external command-line interface.\n. I would try to make it the text agnostic to how this is actually enabled.\n. It isn't misleading to google engineers using the internal CLI, but as it\nis enabled by default in both it doesn't match much.  \"mark as compiled\" is\na separate compiler option (see markAsCompiled in CompilerOptions.java).\nYes, \"Overridden to true by the compiler when closure pass is enabled\"\nwould be fine.\nOn Thu, Jul 24, 2014 at 3:06 PM, Paul Draper notifications@github.com\nwrote:\n\nI imagine most users (or at least the users who need the documentation\nmost) are using the CLI. But I don't really care either way.\n--closure-pass is misleading though, is your suggestion to have\nOverridden to true by the compiler when closure pass is enabled\"?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/pull/312#issuecomment-50084819\n.\n. These were integrated internally but the basictextformatter test was rolledback because it failed on IE8.  Any chance you can update for IE8?\n. Also the enterhandler_test Brendan fixed more generally as noted above.\n. ok, these tests are still broken on IE9:\n\neditor/plugins/firststrong_test.testFirstCharacter_LTR\neditor/plugins/firststrong_test.testFirstCharacter_RTL\neditor/plugins/firststrong_test.testFirstStrongCharacterWithInnerDiv_LTR\neditor/plugins/firststrong_test.testFirstStrongCharacterWithInnerDiv_RTL\neditor/plugins/firststrong_test.testFirstStrongCharacter_LTR\neditor/plugins/firststrong_test.testFirstStrongCharacter_RTL\neditor/plugins/firststrong_test.testNotFirstStrongCharacter_LTR\neditor/plugins/firststrong_test.testNotFirstStrongCharacter_RTL\n. Needs a CLA. https://github.com/google/closure-library/blob/master/CONTRIBUTING\n. Confirmed CLA signed Mar 6.\n. Duplicate.  Fixed at 56d51fa\n. @meheffernan Where are we at here?\n. Merge conflicts must be resolved\n. I would like to take a look at merging this but I don't see that a CLA was signed.  Please go to  https://cla.developers.google.com/ \nMore details here: https://raw.githubusercontent.com/google/closure-library/master/CONTRIBUTING\n. I'm trying to work through the pull requests (doing the obvious and easy ones first).\n. @jvu   I don't see a CLA signed for jvu or PayPal under what account was it signed?\n. Ok, I verify the CLA has been recorded, now we can see about getting someone to review the change.\n. The compiler was modified to allow this as part of the experimental Type\nTransformation Language work.\nOn Sep 18, 2014 12:34 AM, \"Fr\u00e9d\u00e9ric Junod\" notifications@github.com wrote:\n\nBut it's working with the latest version of the compiler (v20140814). Is\nit an expected behavior?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/pull/343#issuecomment-56004467\n.\n. we won't be making this change.\n. No CLA found: https://github.com/google/closure-library/blob/master/CONTRIBUTING\n. No response.\n. Can you give an minimal repro case of \"this\" in an IIFE not being \"window\"?\nDo you provide an alternate \"this\"?\n\nOn Thu Oct 23 2014 at 8:29:34 PM Ocean notifications@github.com wrote:\n\ngoog.global is not equal to window after complie. In IE9, the 'this' in\nanonymous function is not window. So it takes some problems in google\nclosure. when it complied. it will create some anonymous function, and\ngoog.global is in this anonymous function. So, goog.global = this is not\nwindwo. TT\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/issues/361.\n. Sure, the question is what the wrapping function looks like.  goog.global\nis set to this so the wrapper must preserve it which if in strict mode\nneeds to be done explicitly.\nOn Oct 24, 2014 2:44 AM, \"Ocean\" notifications@github.com wrote:\n[image: ie9-bug]\nhttps://cloud.githubusercontent.com/assets/3797972/4767839/36ffca9c-5b62-11e4-9d67-bff22ab85f50.png\ngoog.global is not window ...\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/issues/361#issuecomment-60365964\n.\n. We need an internal test against the last external release or similar.\nOn Oct 31, 2014 7:38 PM, \"Tyler Breisacher\" notifications@github.com\nwrote:\nTheoretically yes but doing a new compiler release does take some work, so\nwe probably couldn't do it every single time the externs change.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/issues/368#issuecomment-61355699\n.\n. One way or another there needs to be more coordination. I was discussing\nthis today.  Basically we need to push the library, push the compiler\nrelease and tag the library as known good for that release.\n\nThen folks can use head for both or the compiler release and the tagged\nlibrary  version knowing both will work.\nOn Nov 4, 2014 5:47 PM, \"teppeis\" notifications@github.com wrote:\n\n@MatrixFrog https://github.com/MatrixFrog Why doesn't closure-library\nhave release tags ? closure-compiler has tags.\nI think just tagging stable and compiler-synced revision is a reasonable\nsolution.\nAlso tags makes merging pull-request more casual.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/issues/368#issuecomment-61747432\n.\n. Well the tests are in place so we are much less likely to push out a broken\nset of changes. The tagging is TBD.\nOn Nov 4, 2014 9:32 PM, \"John Lenz\" concavelenz@gmail.com wrote:\nOne way or another there needs to be more coordination. I was discussing\nthis today.  Basically we need to push the library, push the compiler\nrelease and tag the library as known good for that release.\nThen folks can use head for both or the compiler release and the tagged\nlibrary  version knowing both will work.\nOn Nov 4, 2014 5:47 PM, \"teppeis\" notifications@github.com wrote:\n\n@MatrixFrog https://github.com/MatrixFrog Why doesn't closure-library\nhave release tags ? closure-compiler has tags.\nI think just tagging stable and compiler-synced revision is a reasonable\nsolution.\nAlso tags makes merging pull-request more casual.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/issues/368#issuecomment-61747432\n.\n. Looks like you didn't provide your deps to the compiler, the compiler will trim them but they need to be there first.  \n\n\nYes, we need easy to follow docs for this.\nI think we should un-deprecate until this is in place.\n. I thought someone patched this:\nIt is an easy fix:\nblah.displayName -> blah['displayName']\nOr we do a compiler release (which isn't ready).\nOn Mon, Nov 17, 2014 at 1:09 PM, Dominator008 notifications@github.com\nwrote:\n\nGetting a Closure Compiler Warning on assert.js:\nclosure-library/closure/goog/asserts/asserts.js:360: WARNING - Property\ndisplayName never defined on Function\nAccording to MDN, this property isn't standard.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/issues/378.\n. I thought I updated this.  Are you sure you are using the latest?\nOn Nov 27, 2014 6:44 AM, \"pstjvn\" notifications@github.com wrote:\ndepswriter.py does not produce the new dependency format needed for the\nmodule support, thus it prevent the usage of modules in third party code.\nPlease push the needed updates to the open source repo.\nThanks.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/issues/382.\n. drat, it was missed, I was thinking about something else.  Thanks for\nreporting this, the fix is trivial and I have it out for review.  If you\nwant to patch it locally, replace _GetDepsLine with:\n\ndef _GetDepsLine(path, js_source):\n  \"\"\"Get a deps.js file string for a source.\"\"\"\nprovides = sorted(js_source.provides)\n  requires = sorted(js_source.requires)\n  module = 'true' if js_source else 'false'\nreturn 'goog.addDependency(\\'%s\\', %s, %s, %s);\\n' % (\n      path, provides, requires, module)\nOn Thu, Dec 4, 2014 at 2:39 PM, pstjvn notifications@github.com wrote:\n\npeterj | Jobs: 0 | @work:~/Documents/Projects/closure/library\n$ git pull\nAlready up-to-date.\npeterj | Jobs: 0 | @work:~/Documents/Projects/closure/apps/material\n$ python ../../library/closure/bin/build/depswriter.py --root_with_prefix=\"js ../../../apps/mobiletv/js\"\n// This file was autogenerated by ../../library/closure/bin/build/depswriter.py.\n// Please do not edit.\ngoog.addDependency('../../../apps/mobiletv/js/app.js', ['app'], ['material.app']);\ngoog.addDependency('../../../apps/mobiletv/js/m60.js', ['m60.weather'], ['goog.Promise', 'goog.json', 'goog.labs.net.xhr']);\ngoog.addDependency('../../../apps/mobiletv/js/matetial.js', ['material.app'], ['pstj.material.decorator']);\nI am not 100% sure what the new format should be, but this looks like it\nis not (missing last argument?)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/issues/382#issuecomment-65716790\n.\n. No CLA found. https://github.com/google/closure-library/blob/master/CONTRIBUTING\n. Feel free to reopen after signing a CLA\n. Did this get resolved?\n\nOn Fri, Dec 19, 2014 at 5:58 PM, Daniel Steigerwald \nnotifications@github.com wrote:\n\nI reset bower cache and reload from\nhttp://dl.google.com/closure-compiler/compiler-latest.zip, so it should\nbe last one.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/issues/388#issuecomment-67720821\n.\n. Is this still pending?\n. no CLA found, which is necessary before anyone looks at this:\nhttps://github.com/google/closure-library/blob/master/CONTRIBUTING\n. Confirmed signed CLA Feb 10, 2015\n. looks like there are conflict, do you want to update this?\n. Thanks Nick.\n. confirmed CLA\n. Needs CLA: https://github.com/google/closure-library/blob/master/CONTRIBUTING\n. What is required for this? is something you can contribute?\n. You are asking for regularly tagged releases?\n\nOn Mon, Mar 30, 2015 at 12:28 AM, Teppei Sato notifications@github.com\nwrote:\n\n@concavelenz https://github.com/concavelenz bower requires bower.json\nand git tag.\nhttp://bower.io/docs/creating-packages/\nIf closure-library publish git tag, I can contribute about bower.json.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/issues/421#issuecomment-87578755\n.\n. If we were to tag versions, it would be something that was based on the day:\n\n20150331.0.0\nOn Mon, Mar 30, 2015 at 2:10 PM, Ali Mihandoost notifications@github.com\nwrote:\n\n@nanaze https://github.com/nanaze (excuse me paul)\nBower is not package provide for backbend or node\nIt's just for front end\nAnd you can easily use for download and update js/vendor project\nAnd don't have any relation with npm+browserify\nUse can easily hosy your files contain bower files with browserify or\naccess files with npm ...\nI don't understand your question clear\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/issues/421#issuecomment-87832291\n.\n. I was unable to find a CLA. There needs to be one before anyone can look at this.\nhttps://github.com/google/closure-library/blob/master/CONTRIBUTING\n. I was able to confirm the CLA. Thanks.\n. We an internal team meeting tomorrow. I'll see if I can get some of these\nissues unblocked.\nOn Mar 23, 2015 5:37 AM, \"Nik Sumeiko\" notifications@github.com wrote:\nHave anyone from Google team is planning to look at it? I have provided\nall the necessary information to simulate issue #422\nhttps://github.com/google/closure-library/issues/422 on Windows Mobile.\nPlease let me know if I can help more somehow.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/pull/423#issuecomment-84975220\n.\n. If you look for requestAnimationFrame in the library you should fine the\nexisting work? Or did you want to change something?\n\nOn Sat, Mar 14, 2015, 3:01 PM Dillon Forrest notifications@github.com\nwrote:\n\nHi all! I discovered the closure library and am learning more and more\nabout it due to picking up clojurescript recently. AWESOME WORK!! :D\nSeriously cool stuff!!\nI noticed there's currently no way to leverage requestAnimationFrame\ninside the closure library. How would you feel about adding it to the\nlibrary?\nI'd be happy to contribute and submit a pull request. The implementation I\nhave in mind is basically copying it from React (cross-browser\nrequestAnimationFrame\nhttps://github.com/facebook/react/blob/2aeb8a2a6beb00617a4217f7f8284924fa2ad819/src/vendor/core/nativeRequestAnimationFrame.js,\nand also a polyfill\nhttps://github.com/facebook/react/blob/2aeb8a2a6beb00617a4217f7f8284924fa2ad819/src/vendor/core/requestAnimationFrame.js\nbasically the same as you have already, so should reuse with existing\ncode). It's a pretty straightforward PR from what I can tell so far.\nThe main questions I have are:\n1. Is there a reason why this doesn't exist already in the closure\n   library? Am I missing some context? o__O\n2. If you'd like it to be added, are there opinions about how its api\n   should function? The same, or extending it?\n3. Do you have any implementation suggestions?\nThanks for your time! Either way, looking forward to learning more about\nthis library as I keep digging into it. [image: :+1:]\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/issues/428.\n. See also:\n\nhttps://github.com/google/closure-library/blob/2012c5372fdb02ce9531cf4b2561b05e3ce2ab39/closure/goog/dom/animationframe/polyfill.js#L33\nOn Sat, Mar 14, 2015 at 6:27 PM, Dillon Forrest notifications@github.com\nwrote:\n\nHi, I think we're on different pages right now, as I believe I'm totally\nmissing the mark with this issue. Thanks for clarifying that it's already\nthere!\nInitially I thought requestAnimationFrame wasn't in the closure library\nat all. I just did a more thorough search of the code and found this:\nhttps://github.com/google/closure-library/blob/2012c5372fdb02ce9531cf4b2561b05e3ce2ab39/closure/goog/async/animationdelay.js#L248\nThis is the only area of the closure library where I see\nrequestAnimationFrame created for cross-browser compatibility, but it's a\nprivate method.\nIs there value in creating a separate function? Maybe\ngoog.async.requestAnimationFrame? I'm not sure if it'd be best in async,\ndom, fx, or some other area.\nI found myself wanting to call requestAnimationFrame directly, but didn't\nsee it in the closure api, so this issue is about adding it to the api. :)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/issues/428#issuecomment-80791768\n.\n. Do you want to send a pull request?  See:\nhttps://github.com/google/closure-library/blob/master/CONTRIBUTING\n. LGTM\n. Please reopen if the current node bootstrap doesn't work for you:\nhttps://github.com/google/closure-library/blob/master/closure/goog/bootstrap/nodejs.js\n. This is a compiler, not a library issue.\n. Thanks for the pull request.  I'll do some testing and get this merged.\n. Ok, I merged this change internally with a few minor fixes and it should be pushed out soon.\n. verify fixed.\n. fixed elsewhere.\n. LG\n. Can you include a unit test that demostrates the problem?\n. If nothing else, you can create a new branch based on master and apply just the changes you mean here. We can't accept this PR as is. Feel free to create a new PR when ready or reopen this when ready.\n. Add the very least this would need a unit test.\n. Thanks for the report, this behavior should at least be documented on for the function.\n. On the mailing list this was a chome extension causing problems.  If you can reproduce this without extension, please reopen.\n. If nothing else, you can create a new branch based on master and apply just the changes you mean here. We can't accept this PR as is. Feel free to create a new PR when ready or reopen this when ready.\n. Nathan can you take a look at this?\n. This file is auto-generated based on data from http://cldr.unicode.org/ \n. Defining values on the prototype causes the class shape to change when the values are set, which cause both memory and performance issues in modern VMs.  Best practice is to only set final values on the prototype and set mutable values in the constructor.\n. Looks live to me.\nOn Jun 4, 2015 3:34 AM, \"Dmytrii Shchadei\" notifications@github.com wrote:\nClosure Library website (i.e.\nhttps://developers.google.com/closure/library/) points to\nhttp://google.github.io/closure-library/api/, which is empty\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/issues/478.\n. Do you see any errors in the dev console?  What browser are you using?  It\nlooks fine in Chrome for me.\n\nOn Sat, Jun 6, 2015 at 4:01 AM, Dmytrii Shchadei notifications@github.com\nwrote:\n\nFor me the page is empty :\n[image: screen shot 2015-06-06 at 1 02 28 pm]\nhttps://cloud.githubusercontent.com/assets/946519/8019393/1438d8dc-0c4c-11e5-8edc-9e44ac59c868.png\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/issues/478#issuecomment-109564798\n.\n. Click on the arrow to the right of \"types\" for some reason it is starting\ncollapsed for you.\n\nOn Mon, Jun 8, 2015 at 5:07 PM, John Lenz concavelenz@gmail.com wrote:\n\nDo you see any errors in the dev console?  What browser are you using?  It\nlooks fine in Chrome for me.\nOn Sat, Jun 6, 2015 at 4:01 AM, Dmytrii Shchadei <notifications@github.com\n\nwrote:\nFor me the page is empty :\n[image: screen shot 2015-06-06 at 1 02 28 pm]\nhttps://cloud.githubusercontent.com/assets/946519/8019393/1438d8dc-0c4c-11e5-8edc-9e44ac59c868.png\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/issues/478#issuecomment-109564798\n.\n. Thanks for tracking it down.  Extensions injecting corrupting code is a\ncontinous source of problems for sites that don't have CSP that protect\nagainst it.\n\n\nOn Tue, Jun 9, 2015 at 3:50 AM, Dmytrii Shchadei notifications@github.com\nwrote:\n\nDamn :) That's one of my extensions, which breaks it. In a private mode\neverything works fine.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/issues/478#issuecomment-110317063\n.\n. googlecode is obsolete.\n\nhttp://google.github.io/closure-library/api/\n. Can you add a test case that would fail without your change?\n. How are you running the compiler? I don't see that in my simple test case.\nhttp://closure-compiler-debugger.appspot.com/#input0%3Dgoog.module('foo')%253B%26input1%3Dgoog.module('bar')%253B%250Agoog.require('foo')%253B%26conformanceConfig%26externs%26refasterjs-template%26includeDefaultExterns%3D1%26CHECK_SYMBOLS%3D1%26CHECK_TYPES%3D1%26CLOSURE_PASS%3D1%26FOLD_CONSTANTS%3D1%26INLINE_VARIABLES%3D1%26MISSING_PROPERTIES%3D1%26REMOVE_UNUSED_VARIABLES%3D1\nOn Fri, Jul 3, 2015 at 8:26 AM, kaaaahhhhnnnn notifications@github.com\nwrote:\n\nI have some module files that don't actually export anything (they are\ndoing things like adding event listeners to a page), but in order to\ninclude them I'm defining them as modules:\ngoog.module('foo');document.addEvent(...)\nthen in my top-level js file I have:\ngoog.module('site');\ngoog.require('foo');\nEach of these \"empty\" modules produces empty object at the end of the\ntotal output. The last bit of my compiled file is:\n({});({});({});({});\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/issues/487.\n. no response from author\n. Can you explain your use case and why this is the best solution? Or the\nbenefit of your solution? It seems like there would be a more composable\nsolution\nOn Jul 19, 2015 12:55 PM, \"Alex Golubtsov\" notifications@github.com wrote:\nReopened #489 https://github.com/google/closure-library/pull/489.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/pull/489#event-359524251.\n. I think you have a misconception as to what goog.async.run does.  It doesn't throttle work in any way and  tries to run in as soon as possible (it was written to back goog.Promise).  Assuming you are trying to allow work \"in the background\" without blocking other operations, you need some form of task schedule that actually breaks up the work and has some concept of latency goals.  \n\nIf you would like continue with this, perhaps a design discussion on closure-library-discuss@ would be the best path forward.  Closing for now.\n. Most of the i18n data is auto generated from CLDR (http://cldr.unicode.org/).  It looks like this file is not however but we should make sure it is consistent with the CLDR before merging.\n. If nothing else, you can create a new branch based on master and apply just the changes you mean here. We can't accept this PR as is.  Feel free to create a new PR when ready or reopen this when ready.\n. You would also need to add a \"goog.forwardDeclare\" for this type, this is there to support projects using minimal externs.\n. There are number of problems with this patch (it is a breaking change, it introduces a define in the wrong namespace, etc).  Can you be specific as to the problem you were facing and what you motivation was for this change.  \n. We would like to build a roadmap to ES6 modules but the world isn't ready for that yet and we aren't going to go to something else before that.\n. No browser implements es6 modules.\nOn Tue, Aug 4, 2015, 5:25 PM Daniel Steigerwald notifications@github.com\nwrote:\n\nWorld ready is. Check https://babeljs.io\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/issues/511#issuecomment-127802641\n.\n. @joeltine I'm not sure what you are trying to point out.\n. Usually, we ask folks to squash there commits before merging.  Can you do that?\n. merge conflict?\n. I signed it!\n. I'm not sure I would have merged this.  If you get the source bundle from another source, it is useful to know where the definitive source is.\n. This is a good change, the only question I have is if we should invert the logic here, so we are only checking for old IE:\n\n!(goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(11))\n. @anwerso   Were you going to invert the condition? The lint failure should have been fixed separately.\n. If you include the deps.js file, it will provide the forward declarations\nneeded to avoid these warnings.\nWe need to move the wiki over but it is mentioned here:\nhttps://code.google.com/p/closure-library/wiki/FrequentlyAskedQuestions#When_I_compile_with_type-checking_on,I_get_warnings_about\n\"\nOn Tue, Aug 11, 2015 at 3:38 AM, Mattias Granlund notifications@github.com\nwrote:\n\nI noticed a few compiler warnings when compiling against bbb7ae6\nhttps://github.com/google/closure-library/commit/bbb7ae68f9a90a46c6c7a43cfdb896e9439dfe2f\n:\n...\nclosure-library/closure/goog/ui/ac/autocomplete.js:767: WARNING - Bad type annotation. Unknown type goog.ui.ac.RenderOptions\n- @param {(boolean|goog.ui.ac.RenderOptions)=} opt_options If true,\n                  ^\nclosure-library/closure/goog/ui/ac/autocomplete.js:788: WARNING - Bad type annotation. Unknown type goog.ui.ac.RenderOptions\n- @param {(boolean|goog.ui.ac.RenderOptions)=} opt_options If true,\n                  ^\nclosure-library/closure/goog/ui/ac/autocomplete.js:798: WARNING - Property getPreserveHilited never defined on optionsObj\n      optionsObj ? optionsObj.getPreserveHilited() : opt_options;\n                              ^\nclosure-library/closure/goog/ui/ac/autocomplete.js:820: WARNING - Property getAutoHilite never defined on optionsObj\n  if (optionsObj && optionsObj.getAutoHilite() !== undefined) {\n                               ^\nclosure-library/closure/goog/ui/ac/autocomplete.js:821: WARNING - Property getAutoHilite never defined on optionsObj\n    autoHilite = optionsObj.getAutoHilite();\n                            ^\n0 error(s), 5 warning(s), 97.7% typed\nclosure-library/closure/bin/build/closurebuilder.py: JavaScript compilation succeeded.\nThis is because goog.ui.ac.AutoComplete has at least one function that\ntakes a parameter of type goog.ui.ac.RenderOptions. Fixjsstyle removes\ngoog.require('goog.ui.ac.RenderOptions') if added to autocomplete.js. Is\nfixjsstyle correct in removing it or what is the intended solution to this?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/issues/521.\n. Can you describe your use case and why you feel this is generally useful?\n. I'm not yet convinced this is an appropriate addition.  Please don't merge this yet.\n. The real question isn't whether the functionality is useful but whether it introduces unneeded complexity, confusion and risk to this class and if it would be better in a private fork of the class.   I'd feel better if others were advocating for the useful this of this change.\n. Please leave a comment as to which browsers are known not to have setCapture and then squash your commits? \n. Joel did you look at all at creating a Karma plugin?\n. going with this as is until we publish a browser support policy\n. You were the not the first to state that IE Edge seems closer to IE 11 than Webkit/Blink and we had a long debate about this internally to Google.  There were two camps those that were for following the MS recommendation of treating MS Edge as \"webkit\" and those that wanted to threat it as \"ie\".  What we now  is Edge as separate layout engine.  I would like to know what they actually changed to be closer to webkit.\n. The files are autogenerated from other sources, as noted at the start of the file.  As such we don't accept changes to these files as any such changes would be overwritten the next time the files are generated.  You would need to get the root source updated.\n. http://stackoverflow.com/questions/19638981/window-activexobject-difference-in-ie11\n. I have small backlog repository syncs that need manual touch ups. I'll merge this after those have cleared.\n. LG, you can merge this when travis is green if I don't get to it first.\n. tl;dr  use a recent compiler release\n\nThe subclass are allowed to be struct and are type checked more strictly that the non-struct super classes.  However as any subclass of a \"struct\" is also \"struct\" the superclass can't be marked struct without also fixing all the subclasses.  This makes it difficult to mark the common base classes (Disposable, etc) as struct without breaking the world (we may do this some day but not yet).\nThe current and recent releases of the compiler don't warn about this:\nhttps://groups.google.com/d/msg/closure-compiler-discuss/uIMiBxKxGB8/BKHZ3t62IwAJ\n. This change can't land until such a time as the compiler can describe this.\n. PR?\n. Generally, I would rather keep adding these unless there is some inherit performance advantage to the native methods (which there generally is not as the VMs just write these methods in JS).\n. sorry, yes \"rather not\".   Is there a clear performance advantage?\n. I'll pull this in manually.  This revealed an issue with the conformance framework, so it needed some work to land.  Should go out today.\n. This is not under consideration for inclusion.\n. What specific messages did you want to get rid of?  If some code is\nparticularly noisy we can look at removing some messages, turning them\ndown, etc.\nOn Fri, Oct 23, 2015 at 10:43 AM, Joel Martinez notifications@github.com\nwrote:\n\nClosed #593 https://github.com/google/closure-library/pull/593.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/pull/593#event-444064691.\n. Thanks for the PR, can you enable the appropriate tests in style/transform_test.js?\n. LG\n. merged\n. https://github.com/google/closure-library/commit/32ff833db42bf13ee0dc1c6fe961fa90bdb65af1\n. Since this isn't generally true, you will need to provide exact reproduction steps.\n. The IArrayLike is define in the closure-compiler master:\nhttps://github.com/google/closure-compiler/blob/master/externs/es3.js#L41\n\nSeems like the issue is how you are running the compiler, or you have a custom set of externs that needs to be update.\n. LG\n. Still waiting?\n. LGTM\n. Thanks.  I'll get this merged.\n. Would you mind updating this PR to be in sync with the formatting changes that were made?\n. no hurry\n. As noted at the top of the file, this is generated from the CLDR.  You need\nto request the change there and then we can pick it up.\nOn Jan 25, 2016 9:10 PM, \"Myeongseok Seo\" notifications@github.com wrote:\n\nIn Korea, and in Japan, currencies does not used with fractions normally.\nThe Currincies does not written usually 1,000\u20a9 not 1,000.00\u20a9 and 1,000\u00a5\nnot 1,000.00\u00a5.\nYes, there's no coins for the fractions.\nOnly for the exact calculation fractions used like 1,000.11\u20a9, 1,000.00\u00a5.\nThere's may be the standards for this\nhttps://en.wikipedia.org/wiki/ISO_4217#Active_codes\nIn closure/goog/i18n/currency.js file follows that.\nBut not in i18n/closure/numberSymbolsExt.js , see each CURRENCY_PATTERN.\nfor the simple view, see:\nhttps://github.com/google/closure-library/search?utf8=%E2%9C%93&q=KRW\nhttps://github.com/google/closure-library/search?utf8=%E2%9C%93&q=JPY\nHow about change the currency pattern with no fractions?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/issues/636.\n. LG\n. LG\n. LG\n. I generally the \"arguments\" lint check is too aggressive.  This is really\nES6 specific, right now I think you can only suppress all lint checks which\nis a little too broad.  I feel like you should be able to toggle checks\nmore specifically.\n\nOn Thu, Feb 11, 2016 at 5:14 AM, Chad Killingsworth \nnotifications@github.com wrote:\n\nEven excluding the nullable reference check, I'm getting quite a few\nlinting errors. If these are intentional, can we at least add @suppress\nannotations to them?\nI have to keep the linting rules turned off on my own code because of this.\n/node_modules/google-closure-library/closure/goog/array/array.js:888: ERROR - This use of the arguments object is discouraged. See https://github.com/google/closure-compiler/wiki/Lint-warning-about-%60arguments%60\n  return Array.prototype.splice.apply(arr, goog.array.slice(arguments, 1));\n                                                            ^\n/node_modules/google-closure-library/closure/goog/asserts/asserts.js:152: ERROR - This use of the arguments object is discouraged. See https://github.com/google/closure-compiler/wiki/Lint-warning-about-%60arguments%60\n        '', null, opt_message, Array.prototype.slice.call(arguments, 2));\n                                                          ^\n/node_modules/google-closure-library/closure/goog/asserts/asserts.js:181: ERROR - This use of the arguments object is discouraged. See https://github.com/google/closure-compiler/wiki/Lint-warning-about-%60arguments%60\n            Array.prototype.slice.call(arguments, 1)));\n                                       ^\n/node_modules/google-closure-library/closure/goog/asserts/asserts.js:198: ERROR - This use of the arguments object is discouraged. See https://github.com/google/closure-compiler/wiki/Lint-warning-about-%60arguments%60\n        opt_message, Array.prototype.slice.call(arguments, 2));\n                                                ^\n/node_modules/google-closure-library/closure/goog/asserts/asserts.js:216: ERROR - This use of the arguments object is discouraged. See https://github.com/google/closure-compiler/wiki/Lint-warning-about-%60arguments%60\n        opt_message, Array.prototype.slice.call(arguments, 2));\n                                                ^\n/node_modules/google-closure-library/closure/goog/asserts/asserts.js:235: ERROR - This use of the arguments object is discouraged. See https://github.com/google/closure-compiler/wiki/Lint-warning-about-%60arguments%60\n        opt_message, Array.prototype.slice.call(arguments, 2));\n                                                ^\n/node_modules/google-closure-library/closure/goog/asserts/asserts.js:253: ERROR - This use of the arguments object is discouraged. See https://github.com/google/closure-compiler/wiki/Lint-warning-about-%60arguments%60\n        opt_message, Array.prototype.slice.call(arguments, 2));\n                                                ^\n/node_modules/google-closure-library/closure/goog/asserts/asserts.js:271: ERROR - This use of the arguments object is discouraged. See https://github.com/google/closure-compiler/wiki/Lint-warning-about-%60arguments%60\n        opt_message, Array.prototype.slice.call(arguments, 2));\n                                                ^\n/node_modules/google-closure-library/closure/goog/asserts/asserts.js:290: ERROR - This use of the arguments object is discouraged. See https://github.com/google/closure-compiler/wiki/Lint-warning-about-%60arguments%60\n        opt_message, Array.prototype.slice.call(arguments, 2));\n                                                ^\n/node_modules/google-closure-library/closure/goog/asserts/asserts.js:310: ERROR - This use of the arguments object is discouraged. See https://github.com/google/closure-compiler/wiki/Lint-warning-about-%60arguments%60\n        opt_message, Array.prototype.slice.call(arguments, 2));\n                                                ^\n/node_modules/google-closure-library/closure/goog/asserts/asserts.js:336: ERROR - This use of the arguments object is discouraged. See https://github.com/google/closure-compiler/wiki/Lint-warning-about-%60arguments%60\n        opt_message, Array.prototype.slice.call(arguments, 3));\n                                                ^\n/node_modules/google-closure-library/closure/goog/base.js:1818: ERROR - This use of the arguments object is discouraged. See https://github.com/google/closure-compiler/wiki/Lint-warning-about-%60arguments%60\n    var boundArgs = Array.prototype.slice.call(arguments, 2);\n                                               ^\n/node_modules/google-closure-library/closure/goog/base.js:1821: ERROR - This use of the arguments object is discouraged. See https://github.com/google/closure-compiler/wiki/Lint-warning-about-%60arguments%60\n      var newArgs = Array.prototype.slice.call(arguments);\n                                               ^\n/node_modules/google-closure-library/closure/goog/base.js:1888: ERROR - This use of the arguments object is discouraged. See https://github.com/google/closure-compiler/wiki/Lint-warning-about-%60arguments%60\n  var args = Array.prototype.slice.call(arguments, 1);\n                                        ^\n/node_modules/google-closure-library/closure/goog/base.js:2290: ERROR - This use of the arguments object is discouraged. See https://github.com/google/closure-compiler/wiki/Lint-warning-about-%60arguments%60\n  var caller = arguments.callee.caller;\n               ^\n/node_modules/google-closure-library/closure/goog/object/object.js:250: ERROR - This use of the arguments object is discouraged. See https://github.com/google/closure-compiler/wiki/Lint-warning-about-%60arguments%60\n  var keys = isArrayLike ? var_args : arguments;\n                                      ^\n/node_modules/google-closure-library/closure/goog/string/string.js:124: ERROR - This use of the arguments object is discouraged. See https://github.com/google/closure-compiler/wiki/Lint-warning-about-%60arguments%60\n  var subsArguments = Array.prototype.slice.call(arguments, 1);\n                                                 ^\n/node_modules/google-closure-library/closure/goog/string/string.js:1211: ERROR - This use of the arguments object is discouraged. See https://github.com/google/closure-compiler/wiki/Lint-warning-about-%60arguments%60\n  return Array.prototype.join.call(arguments, '');\n                                   ^\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/issues/654.\n. yes, but to do otherwise involves work.  I think we should rewrite \"slice\" in the compiler.  I wrote about this.  I'll copy it here:\n\nArray.prototype.slice.call(arguments) and its twin\n[].slice.call(arguments) are known to perform badly because they escape \"arguments\" but both are common.  I thinking of adding a compiler pass to rewrite them, but that would expanding them into a for loop wouldn't be good for code size.  But I think I've found a compromise:\nhttp://jsperf.com/arguments-to-array/40\n\"f6\" calls an parameters-to-array helper method using \"apply\", which performs 10x better than \"slice.call\" on Chrome (2x on Firefox) but avoids the verbosity of a loop.  But it is always possible I've fooled myself.  It is also possible that this performance improvement doesn't actually matter in a more complex function.\n. I don't think code size is an issue if you are calling a helper method (but the helper method means you should only do it in advanced mode).  Generally, I'm more concerned with adding code complexity for the user due to satisfying the lint check. \n. I'd be tempted to just remove string as an in type\n. isFinite coerses unlike Number.isFinite\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite\nisFinite(null) returns true.\n. What is the use case for this?  Were you intending to update the other tools as well?\n. Did you have a PR for this @nicks ?\n. It is no longer possible to modify the Google Code site, we should shut it\ndown entirely.  The \"redesign\" of the docs was unintentional and a\nside-effect of changing doc generation tools.    Was there something\nspecific about the old docs that you miss?\nOn Wed, Mar 2, 2016 at 10:46 AM, Justine Tunney notifications@github.com\nwrote:\n\nIf you can't bring the old design back, then I highly recommend changing\nthe old docs on Google Code so they 301 redirect to the new docs. This is\nbecause the old docs are very out of date, yet they still dominate in the\nsearch results.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/issues/668#issuecomment-191368078\n.\n. I'll work with @jleyba to pick up the latest.\n. I think it is worth having a conversation about whether this is something the compile based linter is going to add first.\n. any chance you can take a look at the merge conflicts?\n. Fixed\n. The instance is sealed by default, if you add \"use strict\" you'll get an\nerror.  Set the value it the constructor to avoid changing its shape after\nconstruction\nOn Mar 21, 2016 6:36 AM, \"ikabirov\" notifications@github.com wrote:\ngoog.provide(\"Foo\");\nFoo = goog.defineClass(null, {\n    constructor: function() {\n```\n},\nvalue: \"Default\",\nupdateValue: function(value) {\n    this.value = value;\n}\n```\n});\nvar foo = new Foo();\nfoo.updateValue(\"Updated\");\nwindow.console.log(foo.value); // Default in debug\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/issues/680\n. That doesn't seem useful.\n. I don't know how I would find out.\n. As noted at the start of the file, it is autogenerated from the CLDR.  You need to wrong with them to update the expectations and then we will pick it up with the next update:\n\nhttp://cldr.unicode.org/\nIf for some reason we don't match the version of the CLDR (v29 currently), feel free to reopen this issue.\n. Thanks for the report\n. That seems fine, if they aren't used they will be removed.\n. yes, this looks like the author lost interest after a rollback.\nOn Fri, May 27, 2016 at 2:56 PM, Paul Draper notifications@github.com\nwrote:\n\nhttps://github.com/google/closure-library/blob/master/closure/goog/structs/weak/weak.js#L18-L20\n- The helpers in this file are used for the shim implementations of\n- {@code goog.structs.weak.Map} and {@code goog.structs.weak.Set}, for browsers\n- that do not support ECMAScript 6 native WeakMap and WeakSet.\nThis suggests that goog.structs.weak.Map and goog.structs.weak.Set exist,\nbut they do not.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/closure-library/issues/712, or mute the thread\nhttps://github.com/notifications/unsubscribe/ABMDKpSVJ4x_LDHlFIg8m5QCe9dNx75dks5qF2iKgaJpZM4Io5OL\n.\n. generally, goog.dom is for HTML and SVG support is limited at best.\n\nOn Thu, Jul 7, 2016 at 12:42 PM, Stephen Hicks notifications@github.com\nwrote:\n\nDoes the built-in Element.prototype.classList meet your needs?\ngoog.dom.classlist is basically just a shim for that and shouldn't really\nbe used. That said, if you can fix it to work, you're welcome to send a PR.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/closure-library/issues/714#issuecomment-231185599,\nor mute the thread\nhttps://github.com/notifications/unsubscribe/ABMDKg2FjsYSc2S-W3JdfiYxXn0EtS5qks5qTVaagaJpZM4Iqn6B\n.\n. There is a static base method defined on the constructor:\n\nvar MyClass = goog.defineClass({\n   constructor: function() {\n       MyClass.base(this, 'constructor');\n   }\n});\nThis is compatible with goog.defineClass.   goog.base doesn't work in\nstrict mode and is deprecated.  See:\nhttps://github.com/google/closure-library/wiki/How-to-migrate-from-goog.base\nMore generally, now that current browsers support ES6 classes consider\nusing them instead.  The Closure Compiler translates ES6 classes to ES5\nstyle code classes in an efficient manner, so it is reasonable to do so\neven those extremely concerned with code size (classes and arrow functions\nare nearly free).\nOn Thu, Jun 9, 2016 at 3:36 PM, Thayne McCombs notifications@github.com\nwrote:\n\nIf you attempt to use goog.base to call the super constructo from the\nconstructor of a class defined with goog.defineClass it fails with the\nerror \"goog.base called from a method of one name to a method of a\ndifferent name\".\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/closure-library/issues/717, or mute the thread\nhttps://github.com/notifications/unsubscribe/ABMDKkI6a3piruqTzD9pK60hczKzrJJ4ks5qKJVkgaJpZM4IyeNd\n.\n. You want to report this against the compiler. \n. Np\n\nOn Jul 15, 2016 12:27 PM, \"Jacques de Hooge\" notifications@github.com\nwrote:\n\nWrong spot, thanks & sorry...\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/closure-library/issues/730#issuecomment-233048712,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABMDKqJbklvmgWvAO03nFHxTEfQoofVCks5qV98zgaJpZM4JNtM7\n.\n. Thanks for the report.\n\nOn Sep 9, 2016 6:23 AM, \"Nick Santos\" notifications@github.com wrote:\n\nThis code: https://github.com/google/closure-library/blob/master/\nclosure/goog/editor/field.js#L2273\ngoog.editor.Field.prototype.installStyles = function() {\n  if (this.cssStyles && this.shouldLoadAsynchronously()) {\n    goog.style.installStyles(this.cssStyles, this.getElement());\n  }\n};\ngives us the warning:\n/closure/goog/editor/field.js:2270: ERROR - Property installStyles of type goog.style has been deprecated: Use {@link #installSafeStyleSheet} instead.\n    goog.style.installStyles(this.cssStyles, this.getElement());\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/closure-library/issues/755, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABMDKqcwmrZyg0Kqdn-m61V2kWbxWLAyks5qoV21gaJpZM4J5Cw7\n.\n. Nice\n. LGTM. reopen if some details are provided. Do you have a suggested fix?\n\nOn Feb 15, 2017 12:04 PM, \"John Robinson\" notifications@github.com wrote:\n\nGiven the following user-agent:\nMozilla/5.0 (iPhone; CPU iPhone OS 10_2_1 like Mac OS X)\nAppleWebKit/602.1.50 (KHTML, like Gecko) CriOS/56.0.2924.79 Mobile/14D27\nSafari/602.1\ngoog.userAgent.product.VERSION reports an empty string. I believe it\nshould return the CriOS version.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/closure-library/issues/795, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABMDKuf9pztMT4bEDQpXvMNzt_vT1mXhks5rc1pSgaJpZM4MCLsL\n.\n. LGTM. Many things break if goog.global isn't set correctly.  Having it use global\nin node would be the correct thing.   That should be fixed.\n\nOn Mon, Jun 4, 2018, 3:15 PM Andrew n marshall notifications@github.com\nwrote:\n\ngoog.Timer.defaultTimerObject defaults to goog.global, but goog.global is\nmay be (errantly?) assigned the node module (referenced as this here\nhttps://github.com/google/closure-library/blob/master/closure/goog/base.js#L49)\ninstead of Node's global\nhttps://nodejs.org/api/globals.html#globals_global.\nThe result when code is served through browserify is that the expected\nsetTimeout(), etc. functions do not exist. This breaks Timer functions,\nand may also break other code dependent of goog.global acting like window.\nSee google/blockly#1901 https://github.com/google/blockly/issues/1901.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/closure-library/issues/903, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABMDKohgH05s-wM8_z77s5ObBhuNkDMbks5t5bGBgaJpZM4UZ3b2\n.\n. I think the test framework can be migrated to use Promise rather than goog.Promise.    The polyfill should work.. I think we are talking past each other.  The test framework itself should be as independent of the test running as we can make it.  It should use the native Promise whenever possible for scheduling tests, just as it saves off the native setTimeout, etc to do its own scheduling so MockClock can't interfere with it.\n\n. Looks like perhaps you have some tabs in this file?\n. how is this change related to  keypad input?\n. Seems like this should be two separate tests\n. year\n. Can you change this so that this is on by default and off for old IE and old Safari.\n. I wonder if we can just drop the alternate branch.\n. No, your right, I was sleepy.\n. ok, lets drop it.\n. I put together a separate PR for this. good idea:\nhttps://github.com/google/closure-library/pull/538\n. The head travis script now runs the linter (from github)\n. Why is this necessary?\n. Can you leave a comment that blick/webkit don't have setCapture.\n. I'm going to get complaints about this as folks like code to run exception clean so they can \"pause on throw\" in the debuggers.  Also, for compiled code, correct behavior here relies on creating ActiveXObject being detected as having side-effects which as far as I know isn't actually the case.  Also if it isn't eliminated, calling this in global scope means the code will never be eliminated.\nGenerally, I think using using goog.userAgent.IE will be a lot cleaner, and allow the code to be eliminated when the appropriate \"ASSUME\" defines are set.  (MS Edge is not considered IE by the user agent code).\n. I would find this acceptable, if you write it so property declarations weren't not conditional on the user agent:\n/* ... /\ngoog.dom.xml.ACTIVEX_SUPPORT = goog.userAgent.IE && goog.dom.xml.hasActiveXObjectSupport_();\nThis would allow both the code removal and avoid the exception on everything but IE.\n. \"Use container-based infrastructure\"\n. What is this?\n. consider using goog.Promise here.\n. Can you explain why can't use the SimpleHttpServer directly?\n. I think simply \"result = (...) >>> 0\" ?\n. Can you add an example in a comment of what you are trying to build here?\n. I'm not sure I understand. It looks like this is just a refactoring, how are additional browsers added here?\n. we dont have tuples: Array<Array<T>> is correct\n. \"IE images\" here you mean \"sause labs images\"?\n. - This isn't a goog.module, you don't want to introduce a global name here.\n- This is missing proper jsdoc and type declarations\n- It would be better to call a private method with parameters, rather than to return a function expression.  The former is more regular and more likely to be optimized by VMs and the Closure Compiler.\n. @private please.\n. private methods should be named with a trailing underscore:\ngoog.color.alpha.extractColor_\nthanks.\n. don't these need to turn off clang format internally too?  Shouldn't this be in the source?\n. Can you add an appropriate unit test that exercices this change?\n. I'm really not excited to have string implement IArrayLike.   It seems more\nlikely to be an error than correct code.\nOn Fri, Feb 12, 2016 at 4:05 PM, Michael Zhou notifications@github.com\nwrote:\n\nIn closure/goog/array/array.js\nhttps://github.com/google/closure-library/pull/655#discussion_r52815312:\n\n@@ -496,8 +496,8 @@ goog.array.count = function(arr, f, opt_obj) {\n-     for every element. This function takes 3 arguments (the element, the\n-     index and the array) and should return a boolean.\n- @param {S=} opt_obj An optional \"this\" context for the function.\n  - * @return {T|null} The first array element that passes the test, or null if no\n  - *     element is found.\n  - * @return {T|string|null} The first array element that passes the test, or\n\nMaking string implement IArrayLike seems better. Would it be hard to land\nsuch a fix internally though? @concavelenz\nhttps://github.com/concavelenz\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/pull/655/files#r52815312.\n. I would rather prohibit string as an input than force string to be included\nin the return type.\nOn Feb 12, 2016 11:35 PM, \"Michael Zhou\" notifications@github.com wrote:\nIn closure/goog/array/array.js\nhttps://github.com/google/closure-library/pull/655#discussion_r52824745:\n\n@@ -496,8 +496,8 @@ goog.array.count = function(arr, f, opt_obj) {\n-     for every element. This function takes 3 arguments (the element, the\n-     index and the array) and should return a boolean.\n- @param {S=} opt_obj An optional \"this\" context for the function.\n  - * @return {T|null} The first array element that passes the test, or null if no\n  - *     element is found.\n  - * @return {T|string|null} The first array element that passes the test, or\n\nString can implement IArrayLike, but not string.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/pull/655/files#r52824745.\n. Which?\n. Array.prototype.find.call(\"foo\",...) would be the equivalent\nOn Feb 14, 2016 6:29 PM, \"Michael Zhou\" notifications@github.com wrote:\nIn closure/goog/array/array.js\nhttps://github.com/google/closure-library/pull/655#discussion_r52854849:\n\n@@ -496,8 +496,8 @@ goog.array.count = function(arr, f, opt_obj) {\n-     for every element. This function takes 3 arguments (the element, the\n-     index and the array) and should return a boolean.\n- @param {S=} opt_obj An optional \"this\" context for the function.\n  - * @return {T|null} The first array element that passes the test, or null if no\n  - *     element is found.\n  - * @return {T|string|null} The first array element that passes the test, or\n\nhttps://github.com/google/closure-compiler/blob/master/externs/es6.js#L1424\nI don't think \"foo\".find works.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/pull/655/files#r52854849.\n. I've made the change locally and will do a run to see if there is anything to be concerned about.\n. I'm a little unclear on why things are continually being added to this list.\n. \n",
    "ducklord": "After this has been merged into master, we are having some issues building. Running Python2.7, we get something like goog.addDependency('../res/fontconfig.js', [u'sweeper.FONT.Setting', u'sweeper.FONT.config'], [u'jst.text.FontConfig'], false); in our deps.js. \n. Not sure what went wrong, all commits has been made by me. But made from a few different machines. Had some issues in the merge to update to current master. When I got a mail about the CLA check failing I accepted that it was all me. So not sure why it still fails. Can you help me resolve the issue?\n. Sorry for the trouble, a merge from master branch appeared to do the trick. I am unfortunately not fluent in git juggling yet. :)\n. Currently it is not possible to expand an already existing box using a coordinate, only using another box. If I should expand a box using current API, I would have to create a new fake box, with the coordinate. The function that currently takes a list of coordinates that has been refactored, creates a new box. I want to reuse that bounding box, and expand it at a later time. \n. Sorry about that, did not notice that when multi line, there should be 4 space indentation. What setting should be added to the linter to test for this? Default settings does not report an error on the missing 4 spaces. Yes, I do use the linter. :) And yes would be awesome if the test ran automaticly, automagic is always awsome. :) \n. What the ..... happened there. Tried to make a rebase, Something went very wrong there.\n. The diff looks clean, but after the rebase, for some reason the unit test fails at various places that is not touched by the patch. Like a key variable that is used in for each loops, but the key value is never used.\n. Funny. Works fine in Firefox. In Chrome Version 50.0.2661.26 beta (64-bit) i get dossier.js:80 Uncaught TypeError: Cannot read property 'length' of null in the console.\n. Sure, i will do that.\n. Just an update, problem found. Was my \"WebGL Inspector\" plugin, that for som reason was messing up script nodes. \n. Sorry about that.\n. The mathematical representation is \"det\", just like \"lerp\" is not written \"linearInterpolation\".\n. ",
    "Ubehebe": "goog.color.isValidHexColor_ is probably private just because no one has needed to use it before. Pull requests are welcome.\n. According to caniuse.com, the global market share of IE9 is only ~2%. Also, with a couple notable exceptions like SVG, XML is becoming a less prominent part of the web platform.\n@firehist, is goog.dom.xml broken for you on IE10/11? If so, could you send a PR with a patch to xml_test.js that fails under IE10/11 but passes with other browsers?\n. What @nicks said. TabPane hasn't been substantively updated since 2008. Unfortunately, we're still using it internally, so there's no easy way to get rid of it.\n. You are probably using an old version of the Closure Compiler that doesn't support generic types. Try checking out the compiler at HEAD, building it, and using it to compile the JavaScript.\n. The relevant API isn't innerText, which was never standardized, but Node.textContent, which is present in IE9+ and everywhere else.\nUnfortunately, it's not clear from the documentation what the exact behavior of goog.dom.getTextContent is. It deviates from Node.textContent, for example:\ngoog.dom.getTextContent(document.createTextNode('\\xA0')); // ''\ndocument.createTextNode('\\xA0').textContent; // ' '\nIt would be nice for getTextContent to default to Node.textContent, falling back to innerText in IE<9. If you send a PR, I can run internal tests and see what breaks.\n. It does seem like we could replace .apply(...) with direct function calls in many of the methods you point out. Feel free to send pull requests. Beyond that, was there a more general API change you had in mind? \n. Pull requests are welcome.\n. Pull requests are welcome.\n. @caitp Does @mihnita's workaround work for you?\n. @mihnita is this obsolete? It looks like CLDR 26 was released in September.\n. Please also write a test in filehandler_test.js that fails at HEAD but passes under this patch.\n. Pull requests are welcome. See CLA directions.\n. Closing because the user seems to have deleted their GitHub account.\n. LGTM, though I don't have the power to merge it.\n. @nicks WDYT?\n. There is good unit test coverage for this: see goog.events.KeyEventTest#testGeckoStyleKeyHandling. I just ran it locally on Firefox 33 and it passed. Can you write a test case in the style of KeyEventTest showing the exact problem?\n. It still passes.\nYou can run the tests yourself directly from your working copy by running a server:\n$ python -m SimpleHTTPServer 8000\nand navigating to keyhandler_test.html.\n. Pull requests are welcome. See CLA directions.\n. Can you link to a minimal test case?\n. goog.net.XhrIo.base does the same thing as goog.base. In fact, 83c6a0b97bd16e23a8578ddb1a53d8e1a21fb4cf migrated most of Closure from goog.base to the Foo.base style.\n. See Closure Compiler commit 04a448.\n. I'm curious why pulling from the library's HEAD seems to be a common workflow. The compiler and library are mature, and new features are comparatively rare. Wouldn't the simplest workflow be just to find a compiler+library combination that works, and pin them via submodules for months at a time?\n. This duplicates issue 368.\n. Duplicates #368.\n. Can you add a regression test in flashobject_test.js? Set up a goog.ui.media.FlashObject and verify that it loads. This test should fail at HEAD but pass with your PR.\n. Closure Library Discuss is a better place for this discussion.\n. +1. I'd like to look into this once my Promise testing stuff lands.\n. The current type signature makes sense: you add MenuItems to a ComboBox, but MenuSeparator is not a MenuItem.\n. What is the problem in the screenshot? The input tag looks well-formed.\n. Could you squash your 3 commits into one? That makes this a little cleaner on our side.\n. Thanks for the report. Any chance you can fix this and send a pull request?\n. Can you add a test to stringformat_test.js that fails without your patch but passes with it?\n. Thanks! Could you squash your 2 commits down to 1? It makes merging a little cleaner.\n. @lomonosv You need to sign a CLA before we can merge this PR.\n. @lomonosv This PR now has 12 commits instead of 1. I think you may need to rebase onto HEAD?\n. @moagrius I'd try rebasing.\n. @steida What is the SHA of the compiler you are using?\n. All of the primitive goog.is* predicates have the useful property of being disjoint with goog.isObject. Removing this disjointness would be a very big change. If you want to make this change, you should start a discussion on the mailing list.\n. @coruus @meheffernan This PR causes at least five unit tests to fail:\nclosure/crypt/sha12mc_test\ncom.google.testing.javascript.runner.core.TimeoutError: Test timed out in 240.105 seconds after exceeding timeout of 240 seconds.\nG_testRunner not detected: test failed to load\nclosure/crypt/hmac_test.testHmac\ncom.google.testing.javascript.runner.core.JavaScriptFailure: ERROR in testHmac\ntest 1 failed\nExpected <b617318655057264e28bc0b6fb378c8ef146be00> (String) but was <0bd1bed50cc0b29f08a8c4390f6667100dd60ef0> (String)\nclosure/crypt/pbkdf2_test.testPBKDF2\ncom.google.testing.javascript.runner.core.JavaScriptFailure: ERROR in testPBKDF2\nmismatch at index 0: \nExpected <12> (Number) but was <2> (Number)\nclosure/crypt/sha1_test.testHashing\ncom.google.testing.javascript.runner.core.JavaScriptFailure: ERROR in testHashing\nExpected <da39a3ee5e6b4b0d3255bfef95601890afd80709> (String) but was <0a39a3ee0e6b4b0d0255bfef056018900fd80709> (String)\nclosure/crypt/sha1_test.testLength\ncom.google.testing.javascript.runner.core.JavaScriptFailure: ERROR in testLength\nExpected <a9993e364706816aba3e25717850c26c9cd0d89d> (String) but was <02957e6f0a07ff52028650bc02c2e22b0030929a> (String)\nI've rewritten the history of the project so that this PR was never merged. We need a better process for testing PRs before merging, to avoid headaches like this.\n. @coruus In order to land this PR, you'll need to point me to a CI setup showing all Closure unit tests passing. I'd like to set up Travis for this project, but I can't commit to doing it anytime soon. Maybe you can help?\n. Can you point to the line where goog.db.ObjectStore uses goog.db.KeyRange? I see three references in JsDoc comments, but these are not genuine uses. See this FAQ.\n. @MatrixFrog I've got a push ready to go. @nanaze wanted me to hold off until the next compiler release, but if the library's already broken, there's nothing to lose. WDYT?\n. @koto please close this issue if the library builds at HEAD for you now.\n. @liolick Interesting. I can confirm this is happening on IE11 (but not, for example, Chrome).\nI'd like to get a better understanding of the IE11 bug before patching Closure. Stepping through your example in a debugger, the dataset API is always being used\u2014it's just not propagating to the CSS for some reason.\nA quick web search didn't turn up an existing IE bug. Could you dig around some more?\n. @kvanberendonck How should we change it?\n. @kvanberendonck Are you referring to goog.events.EventTarget#addEventListener? It's deprecated, so there's little reason to change it.\n. This is the file you want to change, but it's part of the Closure Compiler project, not the Library.\n. @koto Thanks for catching this. Here's what happened:\n- Last week, I merged #391 by @coruus.\n- The PR broke several unit tests (see PR discussion), and also doesn't compile, as you noticed.\n- I rewrote the project's history using git push --force to make it so that the PR had never been merged.\n- But I must not have done this correctly, since @coruus' original commit (e9dcd0ba641a8a3817e49b295a347954e47b3379) was from August, and it remained in the project's history.\nI have now reverted e9dcd0ba641a8a3817e49b295a347954e47b3379 in 2a79f2bc6b43115631fc6a1000e027c9d863a24d and the library should build again. Please verify and close this issue if it works.\n. @nicksay You sent an internal CL for this, right? It'll appear on GitHub the next time someone does a push.\n. s/function(){/function() {\n. Indent +2, not +4, to be consistent with the rest of this file.\n. Instead of the try ... catch, how about\nif (dt.effectAllowed) {\n  dt.effectAllowed = 'all';\n}\n. ",
    "niksumeiko": "Here's a direct link to the commit with an issue: https://.../goog/ui/ac/inputhandler.js#L440\n. @nanaze, but the typo this pull request fixes is going to be fixed automatically? Otherwise, if we don't fix the typo in the source, newly generated docs are still going to keep it.\n. Closed pull request, because commit comment doesn't match issue it solves \u2013 reference to a wrong issue.\n. Just tried to simulate on IE10/11 Desktop browsers on Windows 7, issue is not presented, proving its mobile-only nature.\n. @concavelenz, there shall be one already. I am submitting a pull request to this repo not a first time. Would appreciate if you check once again (looking for my Github username or full name 'Nikita Sumeiko' in Google's CLA individual records).\n. Have anyone from Google team is planning to look at it? I have provided all the necessary information to simulate issue #422 on Windows Mobile.\nPlease let me know if I can help more somehow.\n. If Google Closure will be installed as node module under node_modules/ dir, I am wondering how will you use it on the client? I bet your project static directory (where you store static assets) is not node_modules/, right? So you will not be able to reference to it like follows on your HTML page while working in development mode:\nhtml\n<script src=\"/closure-library/closure/goog/base.js\"></script>\nOr you think making duplicate copies of the library stored in different directories makes sense? The one from node_modules/ is required for a server usage, and the one in static directory for client usage?\nWhen in development mode, I personally store closure-library/ inside my static directory and access it for both client/server usage. And when in production, I compile and switch static directory to a production one what doesn't include closure-library/ at all, but just a compiled files. However, for server usage it's still being required from my development static directory. And it doesn't force me to have duplicate copies.\n. ",
    "blueoctopus": "I've tested this bug again and it seems to be fixed in the updated Google Chrome: Version 42.0.2311.135 (64-bit).\nHowever it's still reproducible in Firefox (version 37.0.2) with time zone set to to \"Brasilia Summer Time\" (City: S\u00e3o Paulo - Brazil).\nQuick copy/paste code to reproduces this issue in the console:\njavascript\ngoog.now = function() { return new Date(2013, 9, 20, 19).getTime(); };\nnew goog.date.Date().getDate(); // returns 19, should return 20!\n. ",
    "lukas-vlcek": "It seems I am running to this issue as well.\nI think that JSDoc types of goog.string.html.htmlSanitize and goog.string.html.HtmlSanitizer are not quite in sync. Here is the error:\n[Goog.ERROR]: JSC_TYPE_MISMATCH. actual parameter 2 of goog.string.html.HtmlSanitizer does not match formal parameter\nfound   : (function (string): string|undefined)\nrequired: (function (string): string|null) at [...]/closure-library/third_party/closure/goog/caja/string/html/htmlsanitizer.js line 75 : 20\n[Goog.ERROR]: JSC_TYPE_MISMATCH. actual parameter 3 of goog.string.html.HtmlSanitizer does not match formal parameter\nfound   : (function (string): string|undefined)\nrequired: (function (string): string|null) at [...]/closure-library/third_party/closure/goog/caja/string/html/htmlsanitizer.js line 75 : 35\nPossibly the JSDoc of goog.string.html.htmlSanitize should be changed to:\njavascript\n/**\n * Strips unsafe tags and attributes from HTML.\n *\n * @param {string} htmlText The HTML text to sanitize.\n * @param {?function(string): string} urlPolicy A transform to apply to URL\n *     attribute values.\n * @param {?function(string): string} nmTokenPolicy A transform to apply to\n *     names, IDs, and classes.\n * @return {string} A sanitized HTML, safe to be embedded on the page.\n */\ngoog.string.html.htmlSanitize= function(htmlText, opt_urlPolicy, opt_nmTokenPolicy) {[...]};\nor the way how parameters are checked and passed to goog.string.html.HtmlSanitizer constructor inside this function should improved?\nApart from this issue, is there any known workaround how to have my code compiled in ADVANCED mode if I can not change closure library sources? Are there any JSDoc suppress annotations that I can use in my code where I make call to\njavascript\nvar sanitizedHtml = goog.string.html.htmlSanitize('<html>...</html>');\nto make the compiler ignore this issue?\n. @steida yea, that is what I was hoping could solve the issue. But I am afraid it is not possible.\nFirst, it seems the suppress annotations are not well documented, at least not on closure-library side (may be there is more complete documentation on the closure-compiler side somewhere?). If I am not mistaken, list of all supported suppress annotations can be found only in source code in ParserConfig.properties file. But having just a list may not be enough to fully understand how to properly use each of them.\nSecond, the problem I was hitting was probably caused by the sole fact that my code goog.required either goog.string.html.HtmlSanitizer(.*) or goog.string.html.htmlSanitize. In fact the sole fact that htmlsanitizer.js file was added to the dependencies during ADVANCED compilation. The problem is in the mentioned file itself. I can not change any source file from closure-library just to workaround this problem. I can only change my own code. I doubt adding any suppress annotation into my own code can solve this issue. May be if I could add suppress annotation into closure-library code then yes (however, I can not do this). I think it would be much better to fix it instead.\nBtw, I wonder this file is really used anywhere in Google's project today. There are even broken javascript code style rules in it, for example check parameter name opt_urlPolicy where the JSDoc does not end with \"=\" character or the other issue reported with access to private properties - see the original ticket for details, it has been reported one year ago, and what is even more surprising I did not find a single unit test for goog.string.html.HtmlSanitizer(.*) or goog.string.html.htmlSanitize. Not what I would expect. (But still, I am glad the code is there and I have a plan to use it in production :smile:)\nThe way I solved it for me for now is that I just copied code from htmlsanitizer.js into my own namespace and fixed relevant issues there: \n- added @suppress {accessControls} here\n- fixed some JSDoc mismatch in both goog.string.html.htmlSanitize AND goog.string.html.HtmlSanitizer. Notably I also changed type annotation of opt_urlPolicy property to {?function(string):?string} (note added second question mark, this is good if you want sanitized HTML to completely omit Element attributes). And of course I had to drop the opt_ prefix to get rid of gjslint warning.\n. Thanks!\nSo the other option would be to issue specific flag to the compiler itself (may be --jscomp_warning=checkTypes would be the one?) but that would turn this flag for all my code as well, no? As I explained above I can not add suppress flag directly to @fileoverview of htmlsanitizer.js itself.\n. Thanks.\n(seems like there are more options listed directly in DiagnosticGroups.java file but as stated in ParserConfig.properties not all of them are probably intended for use in suppress annotation in our code?, though still the wiki might be missing some)\n. Just realized the Warnings wiki is now here https://github.com/google/closure-compiler/wiki/Warnings \n. @nanaze Does it make sense to prepare a PR that would fix some of the issues mentioned above? If yes, I am fine to work on one (adding some tests and fixing at least some JSDoc inconsistency between goog.string.html.htmlSanitize and goog.string.html.HtmlSanitizer).\n. bump, is there anything I explained in a wrong way or used inappropriate words? I would like to get this fixed and I am fine to take my part in this and prepare initial PR. Though some feedback/comments first would be very valuable to me.\n. :+1: web service would be nice but I think releasing the code, even if not supporting all platforms would be useful too.\n. ",
    "steida": "Protip: Look for @suppress annotation in Closure Library to see how it's used.\n. https://code.google.com/p/closure-compiler/wiki/Warnings\n. No, you can't. But you asked for documentation.\n. Try ping in https://groups.google.com/forum/#!forum/closure-library-discuss.\n. It's rare for third party deps to follow advanced verbose mode requirements, so they should stay out of Closure compilation stack. With Gulp we can easily incorporate them anyway.\n. Check goog.dom there is a helper for that: goog.dom.createTable\nOn Thu, Jul 31, 2014 at 4:00 PM, Cheng Gu notifications@github.com wrote:\n\nCause 'goog.dom.htmlToDocumentFragment()' cannot render a '\n' node, so, if I want to insert a '' node into a table, how can I create a\nnode of '' with closure?\nCurrently, I use 'ele.innerHTML' and manually add a string that includes\n'' tag.\nIs there any better ways?\nOr, how can I use 'goog.dom.appendChild()' method?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/issues/326.\n. Nice, team is working on fix: https://groups.google.com/d/msg/closure-library-discuss/VIHvGfVitNs/mcWP2BfovQwJ\n. +1\n. Temp workaround for Bower. Add:\n\"closure-library\": \"google/closure-library#03b4b6894b304c9a6e1abac8725d95a02e3bb635\"\nOr different SHA.\n\nOr add missing externs https://github.com/google/closure-compiler/commit/04a448a7dfbf6a163964c67579a4dfc172f538f9\n. @Ubehebe So we always should compile compiler from Github repo? For years Library and Compiler were in sync.\n. So release fresh compiler build anytime externs are changed. It is possible?\n. Ok, that makes sense. Then release Closure Compiler whenever new Closure Library is released :-) \n. @concavelenz Can you just bump new compiler for now? It's confusing for many developers. Thank you.\n. @MatrixFrog Closure Library has SHA's. I think it's enough and pretty agile. No need for semver imho.\n. I reset bower cache and reload from http://dl.google.com/closure-compiler/compiler-latest.zip, so it should be last one.\n. Yes.\n. World is ready. Check https://babeljs.io\n. JavaScript is compiled language now. I don't know why you guys are not eating your dog food - Traceur. Or use Babel.\n. ",
    "jimbojetlag": "What's the right way of calling the super class method? There are more than one way of doing this in the library, why is that this is not consistent?\n@joeltine how does your way of goog.ui.Ratings.base(this, 'enterDocument'); work with closure compiler advanced mode? Doesn't enterDocument method get renamed, while you are referencing to it via a string?\n. Thanks for this information.\n\nWhile Gmail and Google Maps may use Closure Library they are not using the goog.ui package and are using other UI frameworks.\n\nWhich UI frameworks are these? Are they open source?. It looks like deps maker process does something, but it's painfully slow. Moe debugging showed that the call to closure-compiler's gjd() takes an average of 1 second per file. Is this a known issue?. Maybe I'm missing something here. This is the tool that makes closure dependencies during application development. The python implementation takes 0.5-2 seconds. With the javascript implementation, Is the developer supposed to wait 10-15 seconds after each changes for a page refresh? That'd be 10x to 30x slower than the python implementation.\nAs a reference I tried to compile https://github.com/google/jsaction on a macbook pro, with python:\n```sh\ntime ./node_modules/google-closure-library/closure/bin/build/depswriter.py \\\n  --root_with_prefix='./node_modules/jsaction/ ../../../jsaction' \\\n[output omitted]\nreal    0m0.451s\nuser    0m0.129s\nsys 0m0.181s\n```\nWith javascript:\n```sh\ntime node ./node_modules/google-closure-library/closure-deps/bin/closuremakedeps.js \\\n  --closure-path ./node_modules/google-closure-library/closure/goog \\\n  --root ./node_modules/jsaction/ \\\nError: Error in source file \"[...]/node_modules/jsaction/actionflow.js\": Could not find \"goog.array\".\n    at new SourceError ([...]/node_modules/google-closure-library/closure-deps/lib/sourceerror.js:27:5)\n    at validate ([...]/node_modules/google-closure-library/closure-deps/lib/depgraph.js:285:19)\n    at Graph.validate ([...]/node_modules/google-closure-library/closure-deps/lib/depgraph.js:337:9)\n    at main ([...]/node_modules/google-closure-library/closure-deps/bin/closuremakedeps.js:194:30)\nreal    1m3.412s\nuser    2m21.133s\nsys 0m5.773s\n.\nnode ./bin/closuremakedeps.js --root ./node_modules/google-closure-library/closure/goog/ --root ./node_modules/google-closure-library/third_party/closure/goog/ --exclude ./node_modules/google-closure-library/closure/goog/transpile.js --exclude ./node_modules/google-closure-library/closure/goog/testing/testdata --exclude ./node_modules/google-closure-library/closure/goog/bin --exclude ./node_modules/google-closure-library/closure/goog/conformance --exclude ./node_modules/google-closure-library/closure/goog/css --exclude ./node_modules/google-closure-library/closure/goog/demos --exclude ./node_modules/google-closure-library/closure/goog/docs --exclude ./node_modules/google-closure-library/closure/goog/transpile --exclude ./node_modules/google-closure-library/closure/goog/debug_loader_integration_tests --exclude ./node_modules/google-closure-library/closure/goog/base_debug_loader_test.js\n```\nI tried your command on an mbp, and had to cancel it after 5 minutes. My Node version is v10.9.0.. I had graalvm installed on my machine (trying to make a native-image of closure compiler), which apparently comes with its own Node. After removing graalvm Node from the path, the timings are much better.\nCould you provide the command you used for compiling jsaction? I keep getting the above Could not find \"goog.array\" error. When compiling my own application, should I just use --closure-path path/to/goog/closure instead of --root path/to/goog/closure to speed up dependency generation?\nI think the incremental approach you mentioned is a must for development. It'd be great to have that feature.. > You either need to include Closure Library when running the command, or just add --no-validate. \nThanks for the detailed explanation, but I'm still having a hard time getting the right arguments for closuremakedeps.js.\nBy 'including Closure Library' do you mean using --closure-path path/to/goog.closure, or --root path/to/goog.closure?\nI assumed that --closure-path means that closuremakedeps.js will use the existing deps.js, apparently that is not what's happening, and it's unclear to me what --closure-path does.\nWould you please provide the command you used for compiling jsaction that gave you the timing of real  0m0.862s in the above?. Thanks a lot, usage of closuremakedeps.js is now more clear.\nI am closing this issue as the performance problem was due to the graalvm Node, and not related to closuremakedeps. You may want to reopen this if the issue applies to the discussed feature request.. Thank you @jplaisted. How is it possible to use Closure Library in Typescript today? It seems like Clutz has not been applied to Closure Library, or at least the resulting d.ts files are not open sourced.\nWould the existing deps.js of Closure Library be enough to use the library, or would it need dynamic dependency generator? Is there a minimal example project to demonstrate this?. This issue https://github.com/angular/clutz/issues/755 by @gregbown demonstrates that Clutz cannot be successfully used to generate .d.ts fo Closure Library. The issue remains unanswered.\nGiven that Clutz was created to target Closure annotations, it is ironic that both Clutz and Closure Library are open sourced, but the resulting Typescript definitions are not!. > I believe the idea is that clutz should be used to generate the .d.ts files on the fly.\nWhen using Closure Library as a static library, wouldn't the .d.ts files be also static, similar to the generated deps.js that comes with Closure Library?\nSorry to ask this question again, what is the workflow for developing a (leaf) application in Typescript that uses Closure Library? I can see Clutz must be used to generate the .d.ts files, does that mean that from that point Closure Library can be used just like a Typescript library, or does it still require Closure Library specific module loaders during development?. > I took a look at JsAction. They publish some pre-built code you could use. If that's all that you need, and don't want to use the Closure Compiler or Library, I'd recommend using those files.\nYou are right. However, the precompiled files are more or less for demo purposes. For anything nontrivial, you will have to define your own dispatch handler which would require the use of Closure Library and Closure Compiler.\nOne option is to develop some minimal code that depends on jsaction in Closure Scripts (goog.provide), or Closure modules (goog.module), which will be compile by Closure Compiler and used as a library by the main application written in ES modules. This would require the small library calling jsaction to be a project of its own.\nAnother option would be to use an environment that both Closure Scripts and ES modules can be used together. This helpful demo of closure-webpack-plugin shows that this can be made possible by Webpack loader. There seem to be some overlapping between this Webpack plugin and closuremakedeps.js in this repo, they both make it possible to mix ES modules with Closure Scripts.\nI guess the optimum setup for an application that uses Closure Library is the one that the developer can use the above mix modules, and yet be able to compile the code down to the Closure Compiler annotated version for best optimizations in production. It seems to me that closure-webpack-plugin is able to provide that environment. It would be good to have that plugin in referenced Closure Library wikis.\nOverall, the external developer experience for using Closure Library, and libraries that depend on it, remains poor, and not having an improving trend. When Closure Compiler was first open sourced, there was only one way of developing apps with it: Closure Scripts. Now there are many combinations, and making decisions about them is not easy, sometimes leading to impossible situations. For example, you can see in https://github.com/google/closure-templates/issues/169 how the side effect of compiling Typescript to Closure Script led to unopensourcing the Incremental DOM Soy compiler.\n. ",
    "joth76": "Text from the original bug:\nWhat steps will reproduce the problem?\n1. Use goog.crypt.base64.encodeString on a UTF8 encoded string or goog.crypt.base64.decodeString on a Base64-encoded UTF8 string.\nWhat is the expected output? What do you see instead?\nThe encoding/decoding is not done correctly. It looks like the base64 encode/decode are not using the utf8 byte array methods (see example below).\nWhat version of the product are you using? On what operating system?\nPlease provide any additional information below.\nHere's an example:\ngoog.require('goog.crypt.base64');\nvar utf8string = 'k\u016bhl';\nvar base64 = goog.crypt.base64.encodeString(utf8string, true);\nconsole.log('base64: ' + base64);\nvar decoded = goog.crypt.base64.decodeString(base64, true);\nconsole.log('decoded: ' + decoded);\nvar base64Correct = goog.crypt.base64.encodeByteArray(\n          goog.crypt.stringToUtf8ByteArray(utf8string), true);\nconsole.log('base64Correct: ' + base64Correct);\nvar correct = goog.crypt.utf8ByteArrayToString(\n              goog.crypt.base64.decodeStringToByteArray(base64Correct, true));\nconsole.log('correct: ' + correct);\n. The problem here is the example code is NOT actually passing utf8 string, it's passing a native JS string which is UCS-2 or utf16 or whatever. (The fact JS sourcecode maybe encoded as utf-8 is not important here: this is not how utf8string is viewed to the VM or library code).\nSo the second version of the code (base64Correct = goog.crypt.base64.encodeByteArray(\ngoog.crypt.stringToUtf8ByteArray(utf8string)...  etc) is indeed the correct way to get the desired result: first convert the string from the internal JS charset to utf-8, then base64 encode it.\nNote that passing opt_webSafe=true to goog.crypt.base64.decodeString() is semi-masking the issue: passing false probably would send it down the \"atob()\" version of decodeString (where supported) and that correctly throws an encoding exception:\nvar utf8string = 'k\u016bhl';\nvar base64 = goog.crypt.base64.encodeString(utf8string, false);\nUncaught DOMException: Failed to execute 'btoa' on 'Window': The string to be encoded contains characters outside of the Latin1 range.(\u2026)\nIt's unfortunate that the websafe path (and encodeByteArray in general) does not validate that input bytes are in the valid 0-255 range, but throwing that exception  could be a backward compat risk to change that now (all be it, a compatibility break for code that's already probably producing incorrect output)\n. Fixed in these two\nhttps://github.com/google/closure-library/commit/f52663715cbf9507708fae9e1e9dfc5f58fb5847\nhttps://github.com/google/closure-library/commit/f2a72dde7b0374ff8b81f6af2c559ad97badf5e3\n. ",
    "dferrara19": "Documentation is pretty clear\nhttps://closure-library.googlecode.com/git-history/docs/local_closure_goog_ui_component.js.source.html#line977\nYou can't add a child that's already in the document, this is WAI\n. Use the new base method (defined in goog.inherit)\nMyClass = fn() {\n  MyClass.base(this, 'constructor')\n}\nReplace 'constructor' with the base method name you want to call else where.\nOn Fri, Aug 21, 2015, 10:56 AM supersteves notifications@github.com wrote:\n\nI'm using Closure Compiler in WHITESPACE_ONLY mode and hence goog.base\nfrom Closure Library is appearing in my output. I'm using\nECMASCRIPT6_STRICT output language, since I'm in \"development mode\"\n(non-transpiled) and this is my source level.\nUsing Chrome Canary, this fails because of the first line inside goog.base:\ngoog.base = function(me, opt_methodName, var_args) {\n  var caller = arguments.callee.caller;\nThe error seen in Canary is:\nUncaught TypeError: 'caller', 'callee', and 'arguments' properties may not be accessed on strict mode functions or the arguments objects for calls to them\nThe workaround is to turn off STRICT mode, but then that prevents me using\nlet, const, etc. outside of strict mode (i.e. goog.module) functions.\nAlso see google/closure-compiler#611\nhttps://github.com/google/closure-compiler/issues/611\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/issues/537.\n. Probably don't want to restructure the DOM. Happy the review a PR with a solution.\nYou might also be able to set hysteresis on the dragger. \n. \n",
    "firehist": "Hello,\nWe got this problem on IE9/10/11 any news about this topic ?\nThanks a lot.\n. ",
    "elemoine": "The original bug report includes a patch. Why has this patch never been applied? Is there anything we can do to see this patch, or another patch, applied?\n. https://code.google.com/p/closure-library/issues/detail?id=382 has Labels: CLASigned.\n. See https://github.com/google/closure-library/pull/405 for the PR. I basically ported the patch that was attached to the code.google.com issue. I'm happy to make other changes if necessary.\n. Yes. There now is a PR (https://github.com/google/closure-library/pull/405), but it's not merged yet. \n. @MatrixFrog, I think you can close this one. \n. This change makes sense!\nThe goog.style.getClientPosition function may be used to return the client position of an event. In the case of a touch event it doesn't make sense to rely on the targetTouches.\nThis is the definition of targetTouches (from mdn):\n\u00ab\u00a0A TouchList listing all the Touch objects for touch points that are still in contact with the touch surface and whose touchstart event occurred inside the same target element as the current target element.\u00a0\u00bb\nSo, on a touchstart, targetTouches[0] may not refer to the new touch point, but to a previous touch that is still in contact with the touch surface! So I think that currenly goog.style.getClientPosition may only work for the fist touchstart.\n@fredj's patch fixes that problem. It also makes goog.style.getClientPosition work on touchend and touchcancel events, as mentioned in the issue description.\nPotential caveat: when multiple touches are simultaneously added/removed to/from the touch surface then goog.style.getClientPosition doesn't make sense, because there are multiple \"client positions\" in that case. @fredj uses the touch object at index 0 in the changedTouches list. I think this is acceptable. @fredj what do you think about documenting this behavior in the comment block above the function?\n. @fredj, in fact, with #405, goog.style.getClientPosition could look like this:\njs\ngoog.style.getClientPosition = function(el) {\n  goog.asserts.assert(el);\n  if (el.nodeType == goog.dom.NodeType.ELEMENT) {\n    return goog.style.getClientPositionForElement_(\n        /** @type {!Element} */ (el));\n  } else {\n    var targetEvent = el.changedTouches ? el.changedTouches[0] : el;\n    return new goog.math.Coordinate(\n        targetEvent.clientX,\n        targetEvent.clientY);\n  }\n};\nIndeed, with #405, if el is a goog.events.BrowserEvent then el.clientX and el.clientY should be correct already. So the only specific case is that of a native touch Event.\nThoughts?\n. See https://github.com/google/closure-library/compare/master...elemoine:41.\n. See https://github.com/google/closure-library/pull/424.\n. Here is an example that uses a patched version of goog.fx.Dragger: http://erilem.net/ngeo/dragdrop/layerorder.html. goog.fx.DragListGroup is used really in this example.\n. Any chance to see this merged? Is there anything else I can do?\n. @MatrixFrog, thanks. I rebased the commit onto the latest master, and I added a more detailed description of the problem and of the solution in the commit message. I hope this helps.\n. @MatrixFrog, out of curiosity,  did you finally have someone else review this? \n. No problem, I know what it is. \n. > long ago goog.labs.events.touch was introduced to merge our touch/pointer handling. I would hope that we could start solidifying on that.\nI agree that a better event architecture integrating touch/pointer handling would be a good thing. \n. Thanks @fredj. I'll have a look.\n. Let me explain why I want to window.CLOSURE_BASE_PATH to '' (the empty string) in my application.\nIn my application I use Pyramid's Cache Busting for static resources, so URLs to static resources look like this: http://www.example.com/static/c9658b3c0a314a1ca21e5988e662a09e/js/myapp.js. Note the md5 hash in the URL.\nFor this to work I need to let the web framework (Pyramid) generate the static URLs (using request.static_url) when generating the goog.addDependency statements. So my goog.addDependency statements look like this:\njs\ngoog.addDependency('http://localhost:5000/proj/a1805ca3eeeb4733bd670f7492e9961e/js/appmodule.js', ['app'], ['ngeo']);\nAnd for this to work I obviously need to set window.CLOSURE_BASE_PATH to the empty string.\nI hope this makes sense, and I hope this explanation can help this patch be merged into master.\n. @MatrixFrog, this one should be quite easy for you :-) \n. @fredj have you seen micro-benchmarks comparing the performance of both approaches? Just curious.\n. I think this is a good patch :-) Anything I can do to get this reviewed? \n. Any change to get this reviewed? Anything I can do on my side? Thanks.\n. > I'll take a look at a PR based off the current master, if you're still interested.\nYes, I am very much interested in this PR. I do think this is a good change. I'll look at updating the PR.\n. Yes. This is why the issue description includes \"Fixes #337\". #337 will be automatically closed when this one is closed. \n. @joeltine, I updated my targettouches branch. The branch includes two commits:\n- 6d440bf This commit is the same as the one that was merged with https://github.com/google/closure-library/pull/405, and that was then clobbered by https://github.com/google/closure-library/commit/889d16ae55c74aa0144d0be29b61243a9a49dcf7.\n- 853329f This commit is the one effectively fixing the issue described in the description of this PR.\nBoth commits include more details about the changes they hold.\n. The comment attached to https://github.com/google/closure-library/commit/d9c1478d82a256dd05e5c51336debafaa37651e0 explains the problem.\ngoog.events.BrowserEvent.prototype.init uses the \"relevant touch\" to set the values of the BrowserEvent's clientX, clientY, screenX and screenY values.\nBut the question is: what is the \"relevant touch\"?\nAs indicated in the comment attached to d9c1478 targetTouches[0] is unlikely to be the \"relevant touch\" when there are multiple touches on the touch surface, because, as documented on MDN, targetTouches is the list of \"all the Touch objects for touch points that are still in contact with the touch surface\". targetTouches[0] may be unrelated to the current touch event, so using its clientX, clientY, screenX and screenY values does not make sense.\nchangedTouches is the list of \"all the Touch objects for touch points that contributed to this touch event\", so it makes more sense to use changedTouches[0] as the \"relevant touch\" when setting the BrowserEvent's clientX, clientY, screenX and screenY values.\nHope this clarifies it.\n. Thanks for the additional comments. I'll update the PR. \n. PR\u00a0updated. Thanks again for the comments.\n. > Looks like a lint error in this PR.\nReally? That doesn't seem to be related to my changes to me.\n. I'm happy to add a commit that removes it if you think it makes sense to do it as part of this PR.\n. I'll have a closer look Monday or Tuesday.\n. Cool. Thanks for following up on this @joeltine.\n. Can't you just set CLOSURE_BASE_PATH to the empty string? See https://github.com/google/closure-library/pull/418.\n. https://github.com/google/closure-library/commit/889d16ae55c74aa0144d0be29b61243a9a49dcf7 removes other changes to browservent.js we rely on!! I really don't understand how the development of closure-library works. External patches get merged and they are then reverted with such \"force current state of Google VCS\" commit!? How can we prevent this from happening?\n. In any case, I agree with my commit being merged into master again.\n. > Does the Travis run on this PR use the new config?\nYes. See https://travis-ci.org/google/closure-library/builds/73896026. \"This job is running on container-based infrastructure\".\n. After more thinking, and looking at #337, I think it's a mistake to rely on targetTouches. With multiple touches on the touch surface targetTouches[0] is unlikely to be the \"relevant touch\". See my comments in #337 for more details, and see the targetTouches definition on mdn. So as done in #337 I'm tempted to rewrite this whole block as follows:\njs\n  /**\n   * On touch devices use the first \"changed touch\" as the relevant touch.\n   * @type {Touch}\n   */\n  var relevantTouch = e.changedTouches ? e.changedTouches[0] : null;\n. Here's a branch implementing this: https://github.com/elemoine/closure-library/tree/targettouches. @mtsgrd, I'd be curious to know if that makes a difference with iOS 8.\n. @mtsgrd this example is based on my targettouches branch: http://erilem.net/ngeo/layerorder-touch/layerorder.html. Does it work for you in iOS 8?\n. > Do you have any clue how this could differ from e.target?\nFYI, that particular change (this.target) came from an old patch: https://code.google.com/p/closure-library/issues/detail?id=382.\nSo here we're talking about initializing a goog.events.BrowserEvent instance from a touch event, i.e. a browser event resulting from a touch action on the touch surface.\nAnd we want to provide the most relevant values for this.client*, this.screen* and this.target, this being the goog.events.BrowserEvent instance.\nThis PR suggests relying on e.changedTouches[0] for this.client* and this.screen*, as discussed already.\nNow we're discussing this.target, trying to figure out whether it should be set to e.target or e.changedTouches[0].target.\nSo e.target refers to the Element the browser event was dispatched to (see this mdn page for a good reference). e.changedTouches[0].target is the Element associated with the touch itself, which may be totally unrelated to the e.target. this.target should refer to the event's target, so I think it makes more sense to set always set it to e.target, even when e is a touch event.\nIf you agree, I can just remove that particular change from my branch.\n. This would be the new commits: https://github.com/google/closure-library/compare/master...elemoine:changedtouches\nI can create a new PR if you agree.\n. ",
    "MatrixFrog": "It would be a lot easier if someone rewrote that patch as a Github PR. Do we know if the original author of the patch signed the CLA?\n. lgtm\n. I'm not either. Our MOE config was somewhat stuck but I think we're close to getting it unstuck.\n. Looks like you already made the change on that wiki page; thanks!\n. EDIT: Nevermind, I think I accidentally ran an old jar that was sitting in my downloads folder.\nThe compiler version with the relevant change was released on Oct 23: https://github.com/google/closure-compiler/wiki/Releases#october-23-2014-v20141023\nbut I just downloaded the zip and it gave me:\n$ java -jar compiler.jar --version\nClosure Compiler (http://code.google.com/closure/compiler)\nVersion: v20140508\nBuilt on: 2014/05/12 10:06\nso we might have pushed an old zip to dl.google.com accidentally. cc @blickly \n. Ignore previous comment. @mortaliorchard you probably just have to download it again. We release a new version about once a month and if you run the latest library you generally also need the latest compiler.\n. The latest released compiler should always work with the head of the closure-library repo, so you shouldn't have to build the compiler yourself (though of course you can if you want to). If that's not the case, it may just be because the MOE process for one or the other is stuck temporarily.\n. Okay, I see. This is a bit tricky. On Github we treat the externs as part of the compiler (you get updated externs when you use the latest compiler) but in Google's internal repo we treat the externs as just regular files, so as soon as they're changed, everyone gets the new version immediately. Perhaps we should make it easier for open-source users to get up-to-date externs without needing to upgrade their compiler.\nOr you can just build the compiler from head, or use @steida 's workaround.\n. Theoretically yes but doing a new compiler release does take some work, so we probably couldn't do it every single time the externs change.\n. Pushing a new compiler release requires a non-trivial amount of work. I would suggest you either build the compiler yourself from head (which is just ant jar if you already have ant installed) or stick to an earlier version of closure-library until the next JS Compiler release lands.\n. I doubt anyone will want to do the work of putting a \"release\" of Closure library on dl.google.com like we do for the compiler. But definitely +1 to having git tags that correspond to compiler releases.\n. I don't think anyone uses depswriter.py within Google, so (if I remember correctly) we want to try and get rid of it, but I don't know if we have any suitable replacement for open-source users.\n. At least for the moment, yes :(\n. I think we saw a similar issue in a Google-internal project recently, and the fix was something like\n--output_wrapper='(function() { %output% }).call(this)'\nwhich ensures that this inside the function is the global object. goog.global gets set by goog.global = this; so that also ensures that goog.global is set correctly. We should definitely document this better.\n. Okay, I understand now. Yes, I think it generally assumes that goog is the same as window.goog. I don't think we have a solution for this unfortunately. The --rename_prefix_namespace may be helpful here but to be honest I'm not entirely familiar with the details of what that does.\n. Oh cool. That seems to happen a lot (old compiler versions get cached in various places that we don't control) so it's always good to double-check :)\n. @Ubehebe did you want to do a MOE push now that https://github.com/google/closure-library/pull/391 is merged? If not, I'll probably have time to do one next week.\n. Good point. I say go for it :)\nFWIW the last compiler release was about a month ago so we can probably do one next week.\n. Filed at https://connect.microsoft.com/IE/feedbackdetail/view/1104713/dataset-property-does-not-work-correctly-in-some-cases\n. We've already fixed this internally, we just need to do a MOE push.\n. I'll see if I can find someone who knows more about touch events than I do. It would probably also help if the commit description was more detailed: Fix it how? What was broken about it? etc.\n. No, I ended up reviewing it myself. I'm not an expert on this stuff but it seems pretty clear that you know what you're doing. Having a good commit description is very helpful :)\nSorry for the delay, thanks for your patience.\n. I don't think this has anything to do with closure-library. Filed on wrong project?\n. #413 is merged so re-closing.\n. Thanks! Can you sign the CLA?\n. Sending this internally with the MOE config update so that it'll get synced without someone having to do it manually on the next MOE push.\n. Sorry I was wrong. Not being deleted :(\n. lgtm. Someone will merge this in a few days (I know, the delay is annoying. Hopefully we'll be able to speed up the process soon.)\n. This is my mistake by the way: When I split lintChecks and analyzerChecks into separate categories, I should have recommended this in the public release notes.\n. We're already having that conversation in https://github.com/google/closure-compiler/issues/1615\n. goog.structs.forEach is just a bit weird. It's handling maps, sets, arrays, and any collection that happens to have a method called 'forEach', all in one function. It's rare that you want to iterate over something but have no idea what the thing is. If you know it's a map, use the map's own forEach method. Likewise with goog.structs.get{Keys,Values}.\n. https://github.com/google/closure-compiler/issues/1688\n. Yup, thanks for the reminder.\n. was just testing the release script. looks like it worked.\n. lgtm. lgtm . I think the linter will complain that anything ending in _ has to be private. So we probably have to rename these as well.\n. Are these used anywhere besides this file and htmlsanitizer.js? If not we can probably make them @package.\n. This is because you're building from head. You can use the released compiler (from maven central) instead but when I set this up, I did this because\n1. It was easier, and I was lazy\n2. This lets us detect immediately if the compiler team lands a change that's going to break things in Closure, or if a PR in Closure is going to break when compiled with unreleased compiler changes.\n. I think Travis effectively runs on a fresh machine each time, so I would expect this to always return true. If I'm wrong you just might compile using an older compiler, which should generally be fine I suppose.. I don't understand what this line is doing. or this one. ",
    "pauldraper": "Fixed by https://github.com/google/closure-library/commit/cc6cee3028a7bbe4f794ba13d74ddce7bbf7181d.\n. Fixed by https://github.com/google/closure-library/commit/ef582988b757c94394fee36525648fe4ae396111.\n. And calls to this.comparator_ are no longer unnecessarily duplicated (per the suggestion in the issue).\n. valueDragger_ and extentDragger_ have been fixed by https://github.com/google/closure-library/commit/1434a54008bcb1c01f180801f6c7784c251bb5dd\n. The proposed patch goes against the current convention in goog.net.XhrIo and goog.testing.net.XhrIo to share implementations. Currently, much of implementations is duplicated (e.g. setTimeoutInterval).\nFYI, my preferred approach to handling this duplication would be to introduce a common class, e.g. goog.net.AbstractXhrIo, they could inherit from.\nThough it would be best to do that for all the duplicate code, rather than have just one function shared, which might be surprising.\n. It looks like this has been completed: https://github.com/google/closure-library/commit/137b25bbaac0d3cf04b73f5d4bcc370abc388e62 (plus a few other links).\n. It worked. Thanks!\n. https://github.com/google/closure-library/commit/7b8bc4e3c5cb0434a716c2f0e2c500e3f7fc1d5a has the same API, but differs in its implementation, and runtime.\nAnd the documented runtime is wrong:\nDocumented: O(S(f(n))\nActual: O(f()*S(n))\nBetter: O(n*f() + S(n))\nI will likely file a new pull request to fix this.\n. Yeah, f(n) just doesn't make sense.\nThe key function takes a single argument. There isn't any n to consider.\n. Right. https://github.com/google/closure-library/commit/7b8bc4e3c5cb0434a716c2f0e2c500e3f7fc1d5a calls keyFn much more than necessary (2*n*log n times vs n times).\nThis PR has assumed it may be expensive, so it used the Schwartzian transform to remove the redundant calculations.\nBut if we assume keyFn is fast (FYI, not quite the same thing as saying it is O(1)), the redundant calculations aren't that important.\n. Example where a non-trivial keyFn makes it slower:\nhttp://jsperf.com/goog-array-sortbykey\njavascript\nvar keyFn = function(x) {\n  return [Math.sin(x), Math.cos(x)].toString();\n};\n. Yes.\nThere is the question of which the Closure Libraries documentation refer to: the Java API or the CLI.\nI think it should be the latter, and other documentation in the Libraries does this.\n. I imagine most users (or at least the users who need the documentation most) are using the CLI. But I don't really care either way.\n--closure-pass is misleading though, is your suggestion to have\n\nOverridden to true by the compiler when closure pass is enabled\"?\n. No, that's pretty much it.\n. The Google Style Guide doesn't mention any dangers of String specifically, but this is one:\n\njavascript\nalert(\"foo\" === \"foo\") // true\nalert(new String(\"foo\") === \"foo\") // false\nThe primitive wrapper and the primitive are not really the same types. (And the primitive wrappers are just bad.)\n. It appears this has been fixed (tested on Chrome 38, Ubuntu 12.04).\n. @AceMood, JSON.stringify(undefined) being undefined is required by that exact spec. \n\nThe abstract operation Str(key, holder) has access to ReplacerFunction from the invocation of the stringify method. Its algorithm is as follows:\n...\n11. Return undefined.\n\nThough I believe (?) goog.json neither claims or desires to adhere to that spec.\n\nOf course, this is just an FYI, since this pull request intends to fix a more egregious and less obscure bug, where \"JSON\" is created that is unparsable by nearly all client- and server-side implementations.\n. It looks one of the lines is too long.\nYou can run\nsh\nscripts/ci/install_closure_deps.sh\nscripts/ci/lint_pull_request.sh\nIt will check the files that have changed from master.\n. > I'd prefer option one because the best use case for empty cookies that comes into my mind does not justify their existence if they're not supported by everyone.\nAgreed.. Okay. (This was copied from non-testing xhrio.js, which was not private.)\n. ",
    "mtsgrd": "This still looks broken to me. Can anyone else confirm?\n. @elemoine awesome, thanks.\n. Ack!\n. @elemoine @MatrixFrog I don't have hard evidence for you, but I've just tested this for my closure project and dragging now works on iOS 7, but not on iOS 8. Any thoughts?\n. This is probably related: http://developer.telerik.com/featured/scroll-event-change-ios-8-big-deal/\n. Thanks @concavelenz, that makes perfect sense.\n. ",
    "volkflo": "Is there any update about a time picker?\nI really need one for the google blockly project.. ",
    "mbeijen": "Unfortunately, the original issue on Google Code redirects to this issue; which means the text is gone.. I signed it!\n. ",
    "martone": "This is now possible by setting goog.json.USE_NATIVE_JSON to true, or changing callsites to use goog.json.hybrid.\n. What Nick said.\n. Use @suppress {checkStructDictInheritance} for now.\nSee also: https://groups.google.com/d/msg/closure-library-discuss/alD4sqOW_mM/x5lt0jBELHoJ\n. This is now fixed.\n. This should be fixed at head now.\n. This is now fixed at head.\n. ",
    "nanaze": "I would love to take this, but I cannot do so without a signed CLA. I don't have a record of one for you, Jakub.\nI am closing this for now -- please reopen when the CLA is signed.\nhttps://developers.google.com/open-source/cla/individual\n. ok, great, thank you\n. The generated docs are generated from source. They have not yet been migrated to github. they will be soon. the pull request will not be merged, as this is done automatically by script\n. in the future I'll probably just pull these in and make edits when i do so.\n. I think easiest might be to pull it into a local repo and make my edits on top. It's one thing to do internal code reviews to spread tech and style knowledge, but it's a pain for non-Googlers to have to do style-nit back and forths. But the pull request UI is great.\n. I have reverted this change in https://github.com/google/closure-library/commit/5a4878ece3dd35230a21d745411ab0985cf99e15\nBreaking IE7 and IE8 tests.\n. Test output:\nPlease address and I will revisit this pull request.\n\nIE7\n1) google3/javascript/closure/dom/textrange_test\nERROR in testGetEndPositionReversed\nExpected <(360, 550)> (Object) but was <(356, 550)> (Object)\n   x: Expected <360> (Number) but was <356> (Number) which was more than 1 away\n> anonymous()\n> anonymous(\"\", \"Expected <(360, 550)> (Object) but was <(356, 550)> (Object)\n   x: Expected <360> (Number) but was <356> (Number) which was more than 1 away\")\n> anonymous(\"\", \"Expected <(360, 550)> (Object) but was <(356, 550)> (Object)\n   x: Expected <360> (Number) but was <356> (Number) which was more than 1 away\")\n> anonymous(\"\", false, \"Expected <(360, 550)> (Object) but was <(356, 550)> (Object)\n   x: Expected <360> (Number) but was <356> (Number) which was more than 1 away\")\n> anonymous((360, 550), (356, 550), 1)\n> testGetEndPositionReversed()\n2) google3/javascript/closure/dom/textrange_test\nERROR in testGetStartPositionRightToLeft\nExpected <(908, 322)> (Object) but was <(1251, 322)> (Object)\n   x: Expected <908> (Number) but was <1251> (Number) which was more than 1 away\n> anonymous()\n> anonymous(\"\", \"Expected <(908, 322)> (Object) but was <(1251, 322)> (Object)\n   x: Expected <908> (Number) but was <1251> (Number) which was more than 1 away\")\n> anonymous(\"\", \"Expected <(908, 322)> (Object) but was <(1251, 322)> (Object)\n   x: Expected <908> (Number) but was <1251> (Number) which was more than 1 away\")\n> anonymous(\"\", false, \"Expected <(908, 322)> (Object) but was <(1251, 322)> (Object)\n   x: Expected <908> (Number) but was <1251> (Number) which was more than 1 away\")\n> anonymous((908, 322), (1251, 322), 1)\n> testGetStartPositionRightToLeft()\nIE8\nThere were 3 failures:\n1) google3/javascript/closure/dom/textrange_test\ncom.google.testing.javascript.runner.core.JavaScriptFailure: ERROR in testGetEndPosition\nExpected <(352, 541)> (Object) but was \n    Expected <(352, 541)> (Object) but was \n> anonymous()\n> anonymous(\"\", \"Expected <(352, 541)> (Object) but was <null>\n    Expected <(352, 541)> (Object) but was <null>\")\n> anonymous(\"\", \"Expected <(352, 541)> (Object) but was <null>\n    Expected <(352, 541)> (Object) but was <null>\")\n> anonymous(\"\", false, \"Expected <(352, 541)> (Object) but was <null>\n    Expected <(352, 541)> (Object) but was <null>\")\n> anonymous((352, 541), null, 1)\n> testGetEndPosition()\n2) google3/javascript/closure/dom/textrange_test\n ERROR in testGetEndPositionReversed\nExpected <(352, 541)> (Object) but was \n    Expected <(352, 541)> (Object) but was \n> anonymous()\n> anonymous(\"\", \"Expected <(352, 541)> (Object) but was <null>\n    Expected <(352, 541)> (Object) but was <null>\")\n> anonymous(\"\", \"Expected <(352, 541)> (Object) but was <null>\n    Expected <(352, 541)> (Object) but was <null>\")\n> anonymous(\"\", false, \"Expected <(352, 541)> (Object) but was <null>\n    Expected <(352, 541)> (Object) but was <null>\")\n> anonymous((352, 541), null, 1)\n> testGetEndPositionReversed()\n3) google3/javascript/closure/dom/textrange_test\nERROR in testGetEndPositionRightToLeft\nExpected <(902, 427)> (Object) but was \n    Expected <(902, 427)> (Object) but was \n> anonymous()\n> anonymous(\"\", \"Expected <(902, 427)> (Object) but was <null>\n    Expected <(902, 427)> (Object) but was <null>\")\n> anonymous(\"\", \"Expected <(902, 427)> (Object) but was <null>\n    Expected <(902, 427)> (Object) but was <null>\")\n> anonymous(\"\", false, \"Expected <(902, 427)> (Object) but was <null>\n    Expected <(902, 427)> (Object) but was <null>\")\n> anonymous((902, 427), null, 1)\n> testGetEndPositionRightToLeft()\n\n. Reopening.\n. @wilbertom wilbertom sorry, I can't take this until you verify that you have signed the contributor license agreement\nhttps://github.com/google/closure-library/blob/master/CONTRIBUTING\n. @jhiswin  - I don't have a record of your CLA signature. I only have your username to go off of.\n. We don't have a record of gingerik signing CLA. Please sign: https://cla.developers.google.com/clas\n. I can try, but this may be overwritten by MOE. Please let me know if they regress again.\nhttps://code.google.com/p/moe-java/\n. Though we have not been doing a good job keeping it up to date, it should remain.\n. @concavelenz any of the people currently configured in the review sharding tool. link: https://goto.google.com/bnjfj\n. As it happens, a Google engineer implemented this independently in the last week. Closing this PR.\nhttps://github.com/google/closure-library/commit/7b8bc4e3c5cb0434a716c2f0e2c500e3f7fc1d5a\n. It's assumed that f() is O(1).\n. The point is that it's assumed that calling f() on an element is not expensive. We are trying to minimize implementation size and thus I'm happy with the impl.\n. @concavelenz can you handle merging this when you're happy with a diff? I've added you as a contributor.\n. There are virtual images available here: https://modern.ie/en-us/virtualization-tools#downloads\n. Closing as these have been applied internally.\n. Please contact the author of fixclosure. That tool must be aware of what other files are providing.\n. @nicks  we cannot auto merge this at head. please reopen when ready.\n. cannot take change unless CLA is signed.\nsee CONTRIBUTORS file. Please reopen when this is done.\n. these files are autogenerated from http://cldr.unicode.org/\nhttp://cldr.unicode.org/translation/number-patterns\nPlease update upstream and these will be caught in a future release.\n. Sorry, I'm trying to review this an am not familiar with this code. Could you explain in a bit more detail what was going wrong and how this fixes it?\n. Cannot accept changes without CLA signed. Please see CONTRIBUTOR file. Please reopen when ready.\n. cannot accept without CLA. please see CONTRIBUTORS file. please reopen when CLA is signed.\n. @jvu  I don't have a CLA for you. Contacting you offline.\n. fixed in https://github.com/google/closure-library/commit/8f3a53ea581ad3589000c226c8e7b0bce609f1fd\n. Please file the issue on the soy project. \n. These files are autogenerated from CLDR data.\nChanges should be suggested here: http://cldr.unicode.org/index/bug-reports\n. opening issue\n. Hi -- we need a CLA to be able to take this patch. We have no record for \"camio\"\nSee https://cla.developers.google.com\n. sorry, I do not see a CLA for Stellar Science.\n. Sorry, my bad. I have it. \n. closing. These type annotations are unfortunately too loose, but necessarily so.\n. Please update this PR. Right now it is not mergeable.\n. merged with minor edits\n. Note: @coruus is from the US. No concerns about accpeting crypto code.\n. long ago goog.labs.events.touch was introduced to merge our touch/pointer handling. I would hope that we could start solidifying on that.\n. We can't take changes without signing the CLA\nhttp://cla.corp.google.com/\n. see CLA instructions: https://github.com/google/closure-library/blob/master/CONTRIBUTING\n. @wibblymat and @paulirish are both Googlers and Bower team members. perhaps they can chime in. Sorry, but we're largely unfamiliar with Bower.\n. Does Closure's \"require what you use\" model map well to Bower? \n. > 1. What's the current project version and versions history ?\n\n\nWhat's your version structure\n\n\nAt present, there is no versioning other than commit hashes. Google always works from head. Thus, the current version is listed here: https://github.com/google/closure-library\nFor example, the current version is 8294cd7b14902717d2f1cab53d80025721d75a83\n\nis it compatible with semver.org ?\n\nAs far as I understand it, semver requires an X.Y.Z versioning. Clearly we don't have that format.\n. fixed\n. Note that doing a heavyweight check as in in solution 3 is a non-starter. Checks at runtime need to be near-free, and code size for checks need to be ~1 statement.\n. Adding context -- quick chat with @RByers  -- I'd suggested that we just let body and documentElement both control the page, but apparently that's not a route forward since too many sites rely on adding them both in geom calculations.\nAs stated before -- run time testing of behavior is not going to be OK.\nWe need to know, in one line, what we're supposed to use to control scrolling. CLosure had done this as a useragent check due to WebKit/Blink's buggy behavior, but the only way I see out of the pickle is to have some browser-exposed API tell us which we should be using so we know, in the lib, . If getScrollingElement existed and gave us the proper scrolling object (whatever is implemented), we would modify the Closure code to use that and eventually drop the userAgent check.\n. looks good, making slight edits\n. What is the output  of \"java -version\" on your system?\n. LGTM\n. lgtm\n. - @param {boolean} start Whether to get the position of the start or end.\n. null;\n. you are welcome to send a change.\n. actually it's missing the trailing slash.\nhttp://code.google.com/p/closure/library/\n. let's go with sortByKeyFunction, please. \n. document the default\n. note with comments that you're using 'a' and 'b' as placeholders to make a tuple of key and index. '0' and '1' might make more sense.\nsortObjectsByKey is an unfortunate function, since it really munges concepts of compiler renamability.  It would also be nice to deprecate it and point people at this function.\nYou could make this more readable (and shorter) by just using readable records and letting the compiler do its thing:\nvar records = goog.array.map(arr, function(elem) {\n  return { key: keyFn(elem), value: elem};\n});\nvar compare = opt_compareFn || goog.array.defaultCompare;\ngoog.array.sort(arr, function(a,b) {\n  compare(a.key, b.key);\n});\nreturn goog.array.map(records, function(record) {return record.value});\n. {!Array.}\n. !\n. !\n. make @private with trailing underscore.\n. The \"| 0\" is a type hint to the VM? Can you note this in a comment at the top of the file?\n. This actually has to stay a Component as it is overriding parent class's addChild()\n. same\n. please remove this change from the branch. if you would like to submit it, send as separate PR\n. full word please\n. spelling\n. not used\n. missing goog.array\n. ",
    "jakubboucek": "I understand and agree. License is now signed electronically.\n. ",
    "nicks": "ya, i wish the accept-with-edits workflow was easier.\n. sure\n. i think TabPane is deprecated, and has been for years. it seems unlikely that fixes will be accepted. see:\nhttps://github.com/google/closure-library/blob/master/closure/goog/ui/tabpane.js#L54\n. i don't have an ie8 machine readily available, so it's unlikely.\n. Notice that this file is auto-generated from CLDR. direct patches probably will not be accepted. \n. this guide:\nhttps://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml?showone=Providing_Dependencies_With_goog.provide#Providing_Dependencies_With_goog.provide\nsays not to do this.\nin particular, it doesn't make sense to require SliderBase.EventType independently of SliderBase.\n. SliderBase.Orientation is provided for legacy reasons.\n. @nanaze is there anything i can do to help get this PR merged? it seems low-risk.\n. The closure tools are strongly opinionated that the string primitive and the String wrapper object should not be used interchangeably. The style guide bans the use of the String wrapper object.\nhttps://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml?showone=Wrapper_objects_for_primitive_types#Wrapper_objects_for_primitive_types\n. lgtm! merge it! merge it!\n. what version of the compiler do you have when you do --version?\n. @MatrixFrog closure-library has a node.js shim layer. the path to it is in the bug report?\n. I submitted a fix for this at https://github.com/google/closure-library/pull/413. I have no idea why the author used vm.Script.runInThisContext instead of vm.runInThisContext, maybe it was a node v0.11 thing\n. I believe the JavaDoc/JSDoc standard explicitly does not escape HTML. The real solution is that the comment here should use entities (e.g., &lt;)\n. If I had to take a shot in the dark, my guess is that your webpage is stomping on variables in the global scope, and that goog.isString coincidentally got renamed to one of the variable names you're stomping on. If you remove Pubsub, it would change the renaming slightly, and a different variable would get stomped on.\n. cool! do you have any idea when that might happen?\n. i think assertObjectEquals is usually better for structural equality? i think it will defer to the equals() method if one exists.. for what it's worth, I sometimes get errors like \nThe FetchEvent for \"https://google.github.io/closure-library/api/goog.Delay.html\" resulted in a network error response: the promise was rejected.\nserviceworker.js:2 Uncaught (in promise) TypeError: Failed to execute 'fetch' on 'ServiceWorkerGlobalScope': 'only-if-cached' can be set only with 'same-origin' mode\n    at serviceworker.js:2\n    at <anonymous>\nso it might be a service worker caching issue, which would explain the non-determinism. fixed\n. fixed\n. i thought the 'blessed' way to do this was to use vm.createScript rather than invoking the constructor directly? see:\nhttp://nodejs.org/api/vm.html#vm_class_script\n. you should probably set 'main' to do something reasonable? like maybe load the nodejs bootstrapper and return 'goog'?\n. ",
    "gorakhargosh": "I see that there's already a pull request for one of the changes.\nMaking a comment on that one instead and dropping this PR.\n. Should this not be 'such as Gmail and Google Drive.' now that the \nproduct brand name has been updated?\n. ",
    "ziegs": "Hey there,\ngoog.ui.Dialog is very opinionated about its DOM structure. The JSDoc at the top of dialog.js outlines the structure it will use. Dialog is very inflexible with regards to the DOM.\nsetVisible is not passing an element to render because ModalDialog (Dialog's parent class) is only guaranteed to work correctly when rendered into the body tag (you're not missing anything!). I'm curious what your usage looks like that you don't want to use Dialog as-is.\nWe're happy to consider proposals for a more flexible dialog in this regard, the caveat being it must remain API-and behavior-compatible with existing usages of Dialog in the wild.\nMarking this as \"Closed\" for now, but please feel free to reopen if you have a proposal for a change.\n. ",
    "lypanov": "I'm seeing the same behaviour of current timezone being applied to the passed in timezone while formatting. Also storing locally in UTC.\n. ",
    "wilbertom": "Hey @nanaze, sorry I missed that part. I just signed the electronic one under username: wilbertom and full name Wilberto Morales\n. ",
    "wesalvaro": "Yes, please!\n. ",
    "h4": ":+1:\n. ",
    "teppeis": ":+1: \n. @MatrixFrog Why doesn't closure-library have release tags ? closure-compiler has tags.\nI think just tagging stable and compiler-synced revision is a reasonable solution.\nAlso tags makes merging pull-request more casual.\n. I have singed CLA.\n. thanks!\n. @concavelenz bower requires bower.json and git tag.\nhttp://bower.io/docs/creating-packages/\nIf closure-library publish git tag, I can contribute about bower.json. \n. @concavelenz yes, tagged releases required to support for bower.\nbut it needs changing the current release flow and now it's TBD in the previous discussion #368.\nIncidentally to start tagged release, it may be good to register CL with bower.\n. anyone could review this tiny PR?\n. @vlkous One more!\nhttps://github.com/google/closure-library/blob/d29dd58cf9eae030f93da3e175f89787fdd12f81/closure/goog/ui/popupmenu.js#L330\n. fixedfixed at master.\n. @koto this repo already has CI and the conflict was caught: https://travis-ci.org/google/closure-library/builds/59411093, but ignored...\n. thanks!\n. fixed at master.\n. fixed with google-closure-deps. thanks!. @jplaisted yargs has been added to the deps, but it's not used yet.\nIs switching working in progress? or can I work on it?. Also, yargs v12 is not latest now. v13 is the latest.. @jplaisted Great.\nIf \"some technical restrictions\" means dropping support for Node v6, it's reverted recently in v13.2.2 https://github.com/yargs/yargs/pull/1308. @blickly Please merge and publish new version to npm!. @blickly Thanks!. @blickly closure-deps is not updated\nhttps://www.npmjs.com/package/google-closure-deps. The CI job failed in ./scripts/ci/generate_latest_docs.sh, but it's not related to this PR.. It seems that lock files were not intentionally added, so I ignored.. Is this better?\nsuggestion\n    \"google-closure-compiler\": \">=20181008.0.0\". fixed https://github.com/google/closure-library/commit/8e98199d401884257bc0758f3a35e173d0c178b5. ",
    "langpavel": ":100: \u00d7 :+1: \n. ",
    "rdpanek": "yes\n. ",
    "ThomasG77": "+1 because the API referencing demos that do not work is a problem.\n. ",
    "jds13": "Note that if you're running compiler output to stdout (rather than using --output-file) and you have the compile command in a .bat file, you must precede the compile command with \"@echo off\" so the compile command isn't included with the compiler output.\n. ",
    "eriktim": "Thanks @nanaze, I added 'gingerik' to the CLA. Is it correct now? \n. I agree. Is there some overview on the testing architecture? I'd enjoy writing a regression test if have a good starting point.\n. OK, I managed to add two simple tests. Let me know what you think.\n. Done, @concavelenz. I had to update lint_pull_request.sh as well.\n. updated xhriopool_test.html as well\n. Done!\n. ",
    "fredj": "+1\n. fixed with 116609a6de5a687a85299f3feeb6e044efa0d1a5\n. Any change for this to get reviewed? Thanks \n. I'll add a comment, thanks\n. @elemoine please create a pull request with your branch (and add fixes #337 in the description)\n. Compiler version: v20140625\n. But it's working with the latest version of the compiler (v20140814). Is it an expected behavior? \n. @mtsgrd is there any error messages from Safari? \nI suspect https://bugs.dojotoolkit.org/ticket/18168#comment:4\n. No, I haven't\n. See http://jsperf.com/object-keys-vs-hasownproperty for a speed comparison\n. Forgot about this pull request...\nI don't need this anymore because I use Object.keys() directly (dropping support for IE < 8)\n. This pull request depends on https://github.com/google/closure-compiler/pull/1190\n. I don't need this anymore, closing\n. > was there any compatibility issue between the two versions?\nNot to my knowledge. I will use the v20170409 release of the library. ",
    "diracdeltas": "goog.array.extend and goog.array.flatten have been fixed.\n. I meant to open this between branches in my own fork but accidentally opened it here instead. Closing this for now until licensing issues are settled.\n. Cool, licensing issues resolved. I should be covered under the Google Corporate CLA for Yahoo, Inc.\n. This appears to be fixed now with @adhintz's chunk-push method, and my test case passes. Closing.\nThanks!\n. ",
    "dennismi": "ok, where do i find this CLDR file, so i can patch that :)\n. or, can someone migrate my changes to the CLDR system, so we can get the correct formatting for danish ...\n. ",
    "eyakcn": "Really?\ngoog.provide('goog.ui.SliderBase');\ngoog.provide('goog.ui.SliderBase.AnimationFactory');\ngoog.provide('goog.ui.SliderBase.Orientation');\ngoog.ui.SliderBase.Orientation is also enum, why provided?\nActually I create this issue because there is a third-party tool - fixclosure - which will fix dependencies automatically. My code need to listen to 'goog.ui.SliderBase.EventType.DRAG_VALUE_START', and that tool automatically add \n'goog.require('goog.ui.SliderBase.EventType');'. \nIf you think it's not closure's problem, maybe I need to contact the author of fixclosure.\n. @nanaze I see. Thank you for your answer. But I still want to know why goog.provide('goog.ui.SliderBase.Orientation');\n. @nicks OK, I got it. Thank you!\n. I created a pull request here:\nhttps://github.com/google/closure-library/pull/377\n. @Ubehebe I tried on closure demo html, and it works without problem. I think there is a bug in our code which I have not find yet. Sorry to bring you any inconvenience. \n. ",
    "codedust": "Signed it.\n. ",
    "KengoTODA": "I've reverted my incorrect replacement (iff to if).\n. Thanks, I've applied it. I'm waiting response.\n. Thanks, I've applied it. I'm waiting response.\n. I found that we have a lot of conflict between my branch and latest master. I will make new branch, and make new PR from it.\n. Thanks!\n. I close this MR according to #317 \n. ",
    "coruus": "Indeed they do! Fixed that by adding better tests. Calling style now identical to SHA1, tests pass, might be correct even. Also fixed a bug in sha1.js when input length is explicitly passed but longer than input. Synchronized fix to sha2.js.\n. Just as a note: The present client code for the precomputed schedule code (the new functions prescheduled and scheduledUpdate) is End-to-End\u2019s S2K: https://github.com/coruus/e2e/blob/s2k-sha256/javascript/crypto/e2e/openpgp/s2k.js\n. Added Monte Carlo known-answer-tests for all the SHA functions in Closure. (The script shamc.py was used to generate them, if you would like to choose different parameters.)\nImproved performance of SHA-2-512 by about 20% on Chrome 36 by not allocating unneeded goog.math.Longs. All tests pass, including new KATs. \n.  Thanks much!\n(I don't know how I fooled myself into thinking I had improved sha2_64b.js; my baseline run must have been way way off. That's been reverted.)\n. Any updates on this?\n. Hmm. I'm somewhat perplexed: When I tested this recently, I'm fairly\ncertain that all tests were passing.\nIs this on a specific target, or all targets?\nI know that all tests were passing on V8/amd64 when I first submitted the\nprevious PR...\nIn that thread, there was a mention of some platform-specific issues,\nthough?\nDo you have a preferred CI setup that I can test against?\n. Sounds like fun.\nOn Tue, Jan 20, 2015 at 11:34 AM Brendan Linn notifications@github.com\nwrote:\n\n@coruus https://github.com/coruus In order to land this PR, you'll need\nto point me to a CI setup showing all Closure unit tests passing. I'd like\nto set up Travis for this project, but I can't commit to doing it anytime\nsoon. Maybe you can help?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/pull/391#issuecomment-70717221\n.\n. Hmm. So, actually, the problem was fairly trivial (and not platform-specific). Here's the diff:\n\n``` diff\ndiff --git a/closure/goog/crypt/sha1.js b/closure/goog/crypt/sha1.js\nindex a1979ea..a96cc96 100644\n--- a/closure/goog/crypt/sha1.js\n+++ b/closure/goog/crypt/sha1.js\n@@ -179,7 +179,7 @@ goog.crypt.Sha1.prototype.compress_ = function(buf, opt_offset) {\n   // performance by about 10% on Chrome 35.\n   for (i = 16; i < 80; i++) {\n     t = W[(i - 3) & 15] ^ W[(i - 8) & 15] ^ W[(i - 14) & 15] ^ W[i & 15];\n-    W[i & 15] = (((t << 1) | (t >>> 31)) & 0xfffffff) | 0;\n+    W[i & 15] = (((t << 1) | (t >>> 31)) & 0xffffffff) | 0;\n     if (i < 40) {\n       if (i < 20) {\n         f = d ^ (b & (c ^ d));\n@@ -206,11 +206,11 @@ goog.crypt.Sha1.prototype.compress_ = function(buf, opt_offset) {\n     a = t;\n   }\n\nthis.chain_[0] = ((this.chain_[0] + a) & 0xfffffff) | 0;\nthis.chain_[1] = ((this.chain_[1] + b) & 0xfffffff) | 0;\nthis.chain_[2] = ((this.chain_[2] + c) & 0xfffffff) | 0;\nthis.chain_[3] = ((this.chain_[3] + d) & 0xfffffff) | 0;\nthis.chain_[4] = ((this.chain_[4] + e) & 0xfffffff) | 0;\nthis.chain_[0] = ((this.chain_[0] + a) & 0xffffffff) | 0;\nthis.chain_[1] = ((this.chain_[1] + b) & 0xffffffff) | 0;\nthis.chain_[2] = ((this.chain_[2] + c) & 0xffffffff) | 0;\nthis.chain_[3] = ((this.chain_[3] + d) & 0xffffffff) | 0;\nthis.chain_[4] = ((this.chain_[4] + e) & 0xffffffff) | 0;\n };\n```\n. And see #404 for the fixed version.\n. The .travis.yml just compiles and lints Closure at the moment. goog.crypt.sha* lint clean.\n. Any updates on this?\n. It's for E2E's S2K: https://github.com/coruus/e2e/blob/s2k-sha256/javascript/crypto/e2e/openpgp/s2k.js\n\nPerformance tests here: https://github.com/coruus/e2e/blob/s2k-sha256/javascript/crypto/e2e/openpgp/s2k_test.html\nIt's roughly 4x faster, because S2K only needs a few message schedule computations, but many hash updates. \n(And see E2E issue 113: https://code.google.com/p/end-to-end/issues/detail?id=113 )\n. I don't feel strongly either way. One argument for the other side: Suppose that you're using to, e.g. derive a key from a password, but pass an off-by-one length. (And ignore the exception.) If you don't update the hash at all, then the derived key will always be the same value.\n(So perhaps the instance should be poisoned -- i.e., a flag set so that it always afterwards returns undef on a call to digest() -- if you want to go that route.) \n. Yep, done.\n. This was for an integration with Sauce that I never bothered writing, IIRC. Inessential.\n. ",
    "meheffernan": "Thanks for working on this.  I'm on vacation right now, but I'll have a look when I return next week.\n. I ran some performance tests of my own: closure-optimized code which computes hash of a 3MB string and also computes many hashes of short strings.  The results look good for sha1 and sha256.  For Chrome 37: sha1 and sha256 are ~20-30% faster for the large string tests, and maybe 10% for the short string tests.  On Firefox 31, sha256 is ~6x faster for sha256 large string test and 20% faster for sha1 large string test.  Somehow this code fixes some performance regression with sha256 on firefox which has crept in.  The sha*_perf.html tests show comparable results.\nSHA512 seems to be slower, though.  ~50% slower on Chrome 37.\nSo all-in-all the optimizations added to speed up update() in sha1.js and sha2.js look good to me.  Very nice improvement :-)  I'll let the closure library maintainers comment on the style and the appropriateness of extending the api to include preschedule() and scheduledUpdate() as well as the new tests. \n. It looks good to me.  The performance improvement is nice especially on FF.\n. @dig-yahoo As I mentioned on Nov 13, it looks good to me.  Not sure if I'm supposed to explicitly approve it in the UI or not (I don't know github).  FWIW I just verified the performance results with the latest change on FF 34.0 and Chrome 40.0.  Looks good.\n. computeChunk_ takes no arguments.  It computes over this.chunk_ which should be a block-sized array containing the current message chunk to update.  With this change this.chunk_ doesn't appear to be updated when iterating over the full blocks so the hash is not computed properly for messages which are the same size or larger than one block.  Amazingly the tests still pass(!).\n. Since you're modifying this file, please change \"& 0xffffffff\" to \"| 0\" here and elsewhere.\n. Add a bit more to the comment to make the W optimization a bit clearer.  This optimization confused me more than it should have.  Maybe something like: \"Traditionally W is precomputed as an 80-byte array.  However, only 16 elements are needed for any iteration so compute W on the fly and keep only the last 16 values.\"\n. I'd prefer to assert on bad input rather than silently correct it.  Not sure what the conventions are in the closure library though.\n. Where is this function used?\n. This doesn't appear to be used either.\n. Please add some more comments about optimization which splits these loops.\n. ",
    "dlg-yahoo": "I'm not quite clear on jacquerie's comments here? Is there something that I should be doing (dlg-yahoo == coruus).\n. There is a rebased and squashed version at https://github.com/google/closure-library/pull/391\n@meheffernan Could I get some feedback before I need to rebase again?\n. ",
    "jacquerie": "Err, that was a major screwup on my part. I mistakenly force pushed on my own fork of google/closure-library a copy of google/traceur-compiler. This resulted in the creation of hundreds of comments referring to a completely different project.\nI asked GitHub if there's anything I can do to fix this, they said no. I'm terribly sorry!\n. ",
    "gucheen": "\nCheck goog.dom there is a helper for that: goog.dom.createTable\n\nThe problem here is that I want to insert a single line of data into a table, the table was already created.\nNow I am using goog.dom.createDom to create it.\n. ",
    "mihnita": "In javascript/closure/i18n/numberformatsymbolsext.js we can check that the entry for goog.i18n.NumberFormatSymbols_es_GT contains DEF_CURRENCY_CODE: 'GTQ'\nThese are mapped to \"friendly symbols\"  in javascript/closure/i18n/currency.js:\n   'GTQ': [2, 'Q', 'GTQ'],\nSo it should work.\nBut the currency data is split in two tiers to reduce size, and es_GT is in the second tier.\nTo activate tier 2  one needs to call\n  goog.i18n.currency.addTier2Support();\n. It is not a hack for one individual locale, it is for a full set of locales.\nThe main reason for the whole tier 2 is to reduce size (59 in base, 94 in tier 2)\nIf you are ok to pay the price, you can enable add it always.\nOr, if you use your own copy of closure, you can customize tier 1 for your specific needs (and that might even reduce the size compared to the default version)\n. LGTM\n. In javascript/closure/i18n/numberformatsymbolsext.js we can check that the entry for goog.i18n.NumberFormatSymbols_es_AR contains DEF_CURRENCY_CODE: 'ARS'\nThese are mapped to \"friendly symbols\"  in javascript/closure/i18n/currency.js:\n   'ARS': [2, '$', 'AR$'],\nSo it should work.\nBut the currency data is split in two tiers to reduce size, and es_AR is in the second tier.\nTo activate tier 2  one needs to call\n  goog.i18n.currency.addTier2Support();\n. Confirmed as is a bug.\nIt is caused by the \"simple fallback\" implemented by the data generator (cutting from the right, Java style).\nThe ICU fallback is smarter (for instance en_CA => en_US, but es_IN => en_GB)\n(this affects more than number formatting, and other locales)\nWill fix in the next locale data update (after CLDR 26 / ICU 54 are out).\n. It takes a bit, but it is coming.\nBut I can confirm that this bug is fixed by the CLDR 26 update.\n(we test the changes quite a bit, to make sure it does not break anything)\n. Hello,\nThank you very much for your contribution.\nUnfortunately, it cannot go in \"as is\", because the file is generated.\nThe way to fix this is more complicated, but also more rewarding :-)\nHere is how:\nThe data comes from Unicode Common Locale Data Repository (CLDR, http://cldr.unicode.org/)\nIn this case, from this area of the CLDR Survey Tool: http://st.unicode.org/cldr-apps/v#/rw/Gregorian/\nShort summary on how CLDR works:\n- accepts locale data from contributors (native speakers, linguists) using the Survey Tool\n- the contributors can submit, then argument pro / against certain changes\n- the contributors can submit supporting documents (dictionaries, country academy, newspapers, etc.)\n- the contributors vote to make the final decision\n- a new version of CLDR is released every 6 months\nYou can either\n- become a CLDR contributor (more complicated, but also more power, recommended if you want to contribute longer time)\n- you can just file a bug at http://unicode.org/cldr/trac (very lightweight, you don't even have to create an account, can even do it anonymously). Of course, some adding some official supporting documents to the bug can help, if is not an obvious mistake\nCLDR is then used by closure, and also by the ICU libraries (http://site.icu-project.org)\nIt all trickles down into Mac OS X, Android, Linux, and hundreds of other projects.\nYes, it is more difficult than a github fix, and will take longer.\nBut you get the satisfaction that you made things better for all the Kinyarwanda speakers in the world.\nBetween http://cldr.unicode.org/#TOC-Who-uses-CLDR- and http://site.icu-project.org/#TOC-Who-Uses-ICU- you can see that pretty much everybody uses CLDR and / or ICU.\nThank you very much,\nMihai\n. ",
    "caitp": "@Ubehebe no, we can't really add hacks for individual locales in angular, it wouldn't really work\n. we don't \"use closure\" at all, per se --- it's not that quite that simple.\n. ",
    "necolas": "All the UI demos are also 404's: e.g., button demo linked to from here http://docs.closure-library.googlecode.com/git/class_goog_ui_Button.html\n. ",
    "SamHasler": "Still broken...\n. ",
    "donmccurdy": "API docs link seems fixed now. Although the \"Check out the goog.UI demos.\" link on https://developers.google.com/closure/library/ is linking to https://github.com/google/closure-library/tree/master/closure/goog/demos/, but should probably be pointing to http://google.github.io/closure-library/source/closure/goog/demos/ instead.\n. ",
    "dcodeIO": "\u00a0\u00a0 zzzzzz36\n= 217678233510\n= 100000011011111100001111111111112\nAs we see, the base 2 representation is 32 bits long with the msb set, thus the value wraps around to a negative value when assigned to a signed 32 bit integer, making the Long#toString([36]) function in this case return -z141z5 instead of zzzzzz, which would be correct. The worst case scenario of this possibly are return values with enclosed - characters if the input is longer than 6 digits.\nThe fix is simply casting the intermediate 32 bit integer intval used in long.toString() to unsigned by using the >>> operator. Without, the returned value is signed and wraps around as described above. This is safe as the function already makes sure that, at this point, the value is always positive:\njs\n  if (this.isNegative()) {\n    if (this.equals(goog.math.Long.MIN_VALUE)) {\n      ...\n      return ...;\n    } else {\n      return '-' + this.negate().toString(radix);\n    }\n  }\nThe result is that the intermediate variable digits holding the textual representation of what is in intval (which takes into account 6 digits of the input converted through native Number#toString(), see intval.toString(radix);) to the specified base is now correct and does not falsely have a negative sign, resulting in invalid return values.\nDoes this fix all possible issues? zzzzzz is the largest possible (6) digits string with the largest possible base of 36, thus this should cover all possible values. From the source: // Do several (6) digits each time through the loop.\nEdit: Note that var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6)); would have that issue too, if 366 would be somehow converted to a 32 bit signed integer, but it luckily isn't. Hence, the foregoing cause why this actually happens is that Long#toInt() (see var intval = rem....toInt()) always returns a signed 32 bit integer (this is the contract), which is then assigned to the intermediate intval, making the cast necessary. With this in mind, another possible fix would be to use Long#getLowBitsUnsigned() instead of Long#toInt() >>> 0 with the drawback of one additional if-statement and, if negative, one additional number computation required. Even more efficient than using Long#toInt() >>> 0 would be using Long#low_ >>> 0 as it removes the additional function call, at the cost of a bit less traceability.\nEdit 2: This is not an issue in Long.fromString(), even that it uses 8 digits each, because the Long#toInt() method isn't used there and calculations are performed on numbers only, which are safe up to a maximum integer value of 253-1. 368 = 2821109907456 fits into 42 bits. Given that, another possible fix would be to use Long#toNumber() instead in Long#toString() but this would have the drawback of a higher computation cost compared to the proposed cast to unsigned. Overall I believe that using Long#toInt() >>> 0 is a good compromise regarding speed and readability.\nHope this helps\nLong.js is a Long class for representing a 64 bit two's-complement integer value derived from the Closure Library for stand-alone use and extended with unsigned support. That's how I got round to debug this.\n. Just added my GitHub username to my CLA, hope this helps.\n. Apparently it does ;)\n. ",
    "mikelehen": "Just ran into this as well (though I believe the closure-library version I'm using is before either of the commits you mentioned).  I logged a bug against V8, since this seems like a regression and could possibly break other apps as well.\nhttps://code.google.com/p/v8/issues/detail?id=3528\n. ",
    "lostsource": "Also related, https://code.google.com/p/chromium/issues/detail?id=405533 \n. ",
    "kkleidal": "LGTM :+1: \n. ",
    "diegone": "This should fix issue https://github.com/google/closure-library/issues/174\n. Why do you expect 0? \n1/1/1 is a valid date and it should (and it does) parse to year 1 AD (not 2001).\n. So your expectation is that \"1/1/2001\" should also fail (because it must have exactly 2 digits months and dates) and if I really want \"January 1st 1 AD\" I should enter it as \"01/01/0001\"?\n. Strict parsing simply includes validation. Regular parsing would be happy to parse a date like \"33/33/33\", while strict would not allow it.\n. ",
    "haddonhill": "(+1) - I need this to format numbers and currency correctly for India locales.  That's about 17% of the world's population.\n. ",
    "theresakhoo": "This fix works for me.  :+1:\n. ",
    "DuaneOBrien": "CLA should be filed and confirmed now.\n. ",
    "jvu": "Hey @nanaze , based on @DuaneOBrien 's comment, are we good now?\n. I signed it!\n. @concavelenz : I'm going to re-sign it. Please let me know if you still don't see it.\n. I signed it!\n. I signed it!\n. You're awesome @concavelenz :heartbeat: \n. @mihnita , I'm scheduled for next sprint to work on this. After I abide to the style guide and the Closure linter that @joeltine set out, I can at least get done correctly.\n. Hey All,\nMy colleagues and I finally scheduled in this next sprint for me to get this done. I'll be starting on it today.\nJohn\n. @joeltine , I see your lint_pull_request.sh is now part of the continous-integration. Danke!\n. Ugh ... there are some issues I've never made. :\\\nOh well. I'll try to fix it.\n. I signed it!\n. According to https://travis-ci.org/google/closure-library/builds/79554451, the issue is unrelated to my changes. I ran the GJsLint and we should be good. Do you have any suggestions for my next task?\n@concavelenz , @joeltine ?\n. @joeltine : I don't think I've ever done that before (squash all your commits down into 1). Are you implying that I should re-do my work again?\n. Thanks @joeltine ... I'll be learning quite a lot.\n. @joeltine : I think I did that correctly? First time squashing ... that was an odd one.\n. @joeltine : Sorry, I'm still new to this rebasing ... never done it before. At least you're telling me the goal, now I'm curious how to \"get there.\"\n. @joeltine : Either we tried or I'm doing it wrong! https://travis-ci.org/google/closure-library/builds/79570092 :stuck_out_tongue_winking_eye:\nIs there a way I can ping or talk to you online? I feel going back and forth might not be the best idea. However, if not, I can let you know what's concerning me. As of right now, I see the squash works great if the git history included my last number of commits. However, if it includes other commits (such as merging from upstream), I haven't seen a way to cherry pick my own commits into one commit.\n. Hey @joeltine & everyone else:\nI talked with some of my colleagues to help me out. They don't know how to easily make it into one single commit due to the following reasons:\n(1) My first commit was from August 20, 2014\n(2) My repository has been pulling upstream changes throughout the time\n(3) I'm getting noop when running git rebase -i\nI'll continue to look at options on how to get my 17 commits down to 1 commit but I don't know the answer at the moment. Any insights from all of you will be great. Heck, maybe I need to rewrite my code in a new pull request?\n@jvu\n. Thank you @joeltine , I'll try one of these options tomorrow at work! Really appreciate all of your help. :smiley: \n. Open to all suggestions @joeltine ! I haven't been able to clean up the code for a long time and I'd love to have my work assist the 1.252 billion people of India with my fix.\n. @joeltine : Failure is due to something with selenium standalone server: https://travis-ci.org/google/closure-library/builds/79691329\n. Sorry @joeltine for bugging you during your vacation. I appreciate your message. :)\n. Monday's the day. Let me know how I can help you since I'm allocated to get this done and moving. :)\n. I signed it!\n. @joeltine : Thanks for the initial pass. I apologize for the lack of response due to other company's commitments today. I'll definitely look at it tomorrow and take in your feedback. I really appreciate it.\n. Alright. Just committed my latest code @joeltine . Feel free to have me elaborate more if necessary. I'm still trying to digest my beastly code!\n. @joeltine , no, not weird. Just me trying to learn your process that you want me to wrap up all my sexy commits into one each time.\n. Wrapped it all for you: https://github.com/google/closure-library/commit/9b96aa147495656fd7af04bc60578d390947551e\n. Thanks @shicks and @joeltine for your comments. Yes, I'm still learning this and this is indeed a very new concept to me. I'll try it tomorrow with your suggestions.\n. @shicks : The second paragraph is exactly what happened to me. Before I read your message yesterday, I reverted my quash commit yesterday so I'm somewhat stuck now today. I'll try to figure out today and hopefully get this working again.\n. @joeltine and @shicks , that took a while but I believe I did it correctly. I copied my changed file again, force reset before the merge, did a rebase  These resources helped me out a bit more:\n- https://github.com/ginatrapani/todo.txt-android/wiki/Squash-All-Commits-Related-to-a-Single-Issue-into-a-Single-Commit\n- https://robots.thoughtbot.com/keeping-a-github-fork-updated\n- Running git push --force origin master instead of a pull after the merge via rebase\n. @joeltine, I miss that step before I pushed it. I've been running gjslint --strict --jslint_error=all whenever I can.\n. @joeltine , just trying to write you the paragraph right now.\n. @joeltine : The error in the build doesn't clearly make any sense to me:\nfound   : (Array<string>|null)\nrequired: Array<string>\nWhat you originally told me to do was:\n{!Array<string>}\nI can run compile_closure in the future but if I don't understand, how would I even proceed?\n.  @joeltine : Hope that's better.\n. @joeltine : Thank you! I think the reason why Googlebot was going back and forth could be due to my merges. Thanks again for helping me through this entire process. The next I contribute to ANY open source project, I will keep in mind the high standards to help EVERYONE.\n. Done. Will be part of the next commit. Here's what I have so far:\n/**\n   * The grouping array is used to store the values of each number group\n   * following left of the decimal place. For example, a number group with\n   * goog.i18n.NumberFormat('#,##,###') should have [3,2] where 2 is the\n   * repeated number group following a fixed number grouping of size 3.\n   */\n  /** @private {!Array} */\n  this.groupingArray_ = [];\n. You're correct. Will be part of the next commit. Wonder what I was reading from gjshint before.\n. I believe so. That's why I think I removed it.\n. Done. Will be part of the next commit.\n. I'm usually aggressive on testing my work - especially for an open source project. I agree with you that the test cases and assertions should be unique but I want to test \"just enough\" and one bit over. If you really want me to spend more time on removing some test cases, I can.\n. I only found it in one place. I used the following regex to try to search for it:\n^[ ]+\\)[ ]*\\{\n. That change will be part of the next commit.\n. YOU CAUGHT ME! I didn't see that. Thanks!\nWill be part of the next commit.\n. I also fixed the following else if in the block.\n. Done. Will be part of the next commit.\n. Force of habit. Will be fixed on the next commit.\n. I agree. I'll start to deal with this after I commit the cosmetic changes mentioned in your other comments.\n. Is the {!Array} a typo ... shouldn't it be {Array<number>}?\n. Okay.\n. How? Run gjslint? I always run gjslint --strict --jslint_error=all <file> every time I check in and push.\nI did it again now and viola, we're good. Do you want me to revert it back to what we had?\n. I reverted it back and it's not complaining either. :\\ I'll submit it on the next commit.\n. Alright. I'll merge it.\n. I'll try to remember that. Should be pushed on the next commit that I push for rebase.\n. Done.\n. Did not know that. Ah!\n. Thanks @joeltine \n. In regards to your second comment, I really at a struggle since the original person who wrote it didn't seem to give a description either.  I'll see what I can do.\n. Done.\n. @joeltine : Would I help if I took all the inline comments within the function and write a formal paragraph about it?\n. You're correct. Removing.\n. Done.\n. Done.\n. Done.\n. Fixed.\n. Done.\n. Done.\n. Done.\n. Done.\n. Sure. Moving.\n. Done.\n. Done.\n. @joeltine : Thanks for your recent comment. I'll work on it today. Was held up by daily stand up and other tasks. I'll see what I can do about the parts variable. Let me know if there's anything else since my involvement with the pull request exceeded my original estimated time for this.\n. ",
    "googlebot": "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\n need_author_cla \n. We found a Contributor License Agreement for you (the sender of this pull request) and all commit authors, but as best as we can tell these commits were authored by someone else.  If that's the case,  please add them to this pull request and have them confirm that they're okay with these commits being contributed to Google.  If we're mistaken and you did author these commits, just reply here to confirm.\n need_author_consent \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\n need_author_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\n need_author_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. We found a Contributor License Agreement for you (the sender of this pull request) and all commit authors, but as best as we can tell these commits were authored by someone else.  If that's the case,  please add them to this pull request and have them confirm that they're okay with these commits being contributed to Google.  If we're mistaken and you did author these commits, just reply here to confirm.\n need_author_consent \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. We found a Contributor License Agreement for you (the sender of this pull request) and all commit authors, but as best as we can tell these commits were authored by someone else.  If that's the case,  please add them to this pull request and have them confirm that they're okay with these commits being contributed to Google.  If we're mistaken and you did author these commits, just reply here to confirm.\n need_author_consent \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. We found a Contributor License Agreement for you (the sender of this pull request) and all commit authors, but as best as we can tell these commits were authored by someone else.  If that's the case,  please add them to this pull request and have them confirm that they're okay with these commits being contributed to Google.  If we're mistaken and you did author these commits, just reply here to confirm.\n need_author_consent \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. We found a Contributor License Agreement for you (the sender of this pull request) and all commit authors, but as best as we can tell these commits were authored by someone else.  If that's the case,  please add them to this pull request and have them confirm that they're okay with these commits being contributed to Google.  If we're mistaken and you did author these commits, just reply here to confirm.\n need_author_consent \n. We found a Contributor License Agreement for you (the sender of this pull request) and all commit authors, but as best as we can tell these commits were authored by someone else.  If that's the case,  please add them to this pull request and have them confirm that they're okay with these commits being contributed to Google.  If we're mistaken and you did author these commits, just reply here to confirm.\n need_author_consent \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\n need_author_cla \n. CLAs look good, thanks!\n ok \n. We found a Contributor License Agreement for you (the sender of this pull request) and all commit authors, but as best as we can tell these commits were authored by someone else.  If that's the case,  please add them to this pull request and have them confirm that they're okay with these commits being contributed to Google.  If we're mistaken and you did author these commits, just reply here to confirm.\n need_author_consent \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. We found a Contributor License Agreement for you (the sender of this pull request) and all commit authors, but as best as we can tell these commits were authored by someone else.  If that's the case,  please add them to this pull request and have them confirm that they're okay with these commits being contributed to Google.  If we're mistaken and you did author these commits, just reply here to confirm.\n need_author_consent \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\n need_author_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\n need_author_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. We found a Contributor License Agreement for you (the sender of this pull request) and all commit authors, but as best as we can tell these commits were authored by someone else.  If that's the case,  please add them to this pull request and have them confirm that they're okay with these commits being contributed to Google.  If we're mistaken and you did author these commits, just reply here to confirm.\n need_author_consent \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\n need_author_cla \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf your company signed a CLA, they designated a Point of Contact who decides which employees are authorized to participate. You may need to contact the Point of Contact for your company and ask to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot.\nIn order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf your company signed a CLA, they designated a Point of Contact who decides which employees are authorized to participate. You may need to contact the Point of Contact for your company and ask to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot.\nIn order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again.\n\n need_sender_cla \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf your company signed a CLA, they designated a Point of Contact who decides which employees are authorized to participate. You may need to contact the Point of Contact for your company and ask to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot.\nIn order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf your company signed a CLA, they designated a Point of Contact who decides which employees are authorized to participate. You may need to contact the Point of Contact for your company and ask to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot.\nIn order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address on your commit.  Check your existing CLA data and verify that your email is set on your git commits.\nIf your company signed a CLA, they designated a Point of Contact who decides which employees are authorized to participate. You may need to contact the Point of Contact for your company and ask to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot. The email used to register you as an authorized contributor must be the email used for the Git commit.\nIn order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address on your commit.  Check your existing CLA data and verify that your email is set on your git commits.\nIf your company signed a CLA, they designated a Point of Contact who decides which employees are authorized to participate. You may need to contact the Point of Contact for your company and ask to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot. The email used to register you as an authorized contributor must be the email used for the Git commit.\nIn order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address on your commit.  Check your existing CLA data and verify that your email is set on your git commits.\nIf your company signed a CLA, they designated a Point of Contact who decides which employees are authorized to participate. You may need to contact the Point of Contact for your company and ask to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot. The email used to register you as an authorized contributor must be the email used for the Git commit.\nIn order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address on your commit.  Check your existing CLA data and verify that your email is set on your git commits.\nIf your company signed a CLA, they designated a Point of Contact who decides which employees are authorized to participate. You may need to contact the Point of Contact for your company and ask to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot. The email used to register you as an authorized contributor must be the email used for the Git commit.\nIn order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. \nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it.\n\nWhat to do if you already signed the CLA\nIndividual signers\n\nIt's possible we don't have your GitHub username or you're using a different email address on your commit. Check your existing CLA data and verify that your email is set on your git commits.\n\nCorporate signers\n\nYour company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot.\nThe email used to register you as an authorized contributor must be the email used for the Git commit. Check your existing CLA data and verify that your email is set on your git commits.\nThe email used to register you as an authorized contributor must also be attached to your GitHub account.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. We found a Contributor License Agreement for you (the sender of this pull request), but were unable to determine that you authored the commits in this PR.  Maybe you used a different email address in the git commits than was used to sign the CLA?  If someone else authored these commits, then please add them to this pull request and have them confirm that they're okay with them being contributed to Google.  If there are co-authors, make sure they're formatted properly.\nIn order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.\n unknown_author \n. CLAs look good, thanks!\n ok \n. \nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it.\n\nWhat to do if you already signed the CLA\nIndividual signers\n\nIt's possible we don't have your GitHub username or you're using a different email address on your commit. Check your existing CLA data and verify that your email is set on your git commits.\n\nCorporate signers\n\nYour company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to go/cla#troubleshoot (Public version).\nThe email used to register you as an authorized contributor must be the email used for the Git commit. Check your existing CLA data and verify that your email is set on your git commits.\nThe email used to register you as an authorized contributor must also be attached to your GitHub account.\n\n need_sender_cla \n. \nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it.\n\nWhat to do if you already signed the CLA\nIndividual signers\n\nIt's possible we don't have your GitHub username or you're using a different email address on your commit. Check your existing CLA data and verify that your email is set on your git commits.\n\nCorporate signers\n\nYour company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to go/cla#troubleshoot (Public version).\nThe email used to register you as an authorized contributor must be the email used for the Git commit. Check your existing CLA data and verify that your email is set on your git commits.\nThe email used to register you as an authorized contributor must also be attached to your GitHub account.\n\n need_sender_cla \n. ",
    "mimckenna": "Hi!  It looks like the CLA was signed - is there any ETA for when this PR will get merged into master?\n. ",
    "moagrius": "@joeltine does this look right? https://github.com/google/closure-library/compare/master...moagrius:array-reduce?expand=1\n. @joeltine PR created: https://github.com/google/closure-library/pull/492\nThanks\n. Not sure what happened here, but looks like my PR now has conflicts...  Should I delete this PR and create a new one?  My relevant commit is fairly small.\nThanks\n. @ubehebe thanks, closing this PR, will open a new one cleaned up\n. per #360 \n. @joeltine thanks very much for your comments.  I'll definitely make the changes you suggested where appropriate, and barring the 2 spots where I commented, I agree with everything you noted.\nThe undefined thing I mentioned in the line comments (in response to yours) gets a little tricksy and it's been a while since I wrote this initially (I think it's been something like 7-8 months since the original issue), so I'm probably not explaining it as well as I could since it's not fresh in my mind - if it's not immediately obvious, post back and I'll try to write up something more detailed and specific.\nThanks again\n. the problem here is that both \"val\" and \"f\" would be \"undefined\", which is a valid value - to properly meet spec, you need to rebuild using arguments, explicitly using length.\n. Same issue here.  If val is undefined, it still qualifies.  If you try the changes you've suggested against any standard test of reduce, I think the specific problem will become obvious - LMK if you'd like more detail\n. Here's a couple pens that might help explain the issue more clearly:\nhttp://codepen.io/moagrius/pen/RPqMVG?editors=001 (just inline comments since the lines here are getting crowded, no output)\nhttp://codepen.io/moagrius/pen/jPQzrz?editors=001 (has a simple example showing the issue)\n. i understand your point about f being not nullable, and that's fine - but the second point is still not correct - undefined is a valid value, it should be tested by array length...  that's to say that fun(undefined, undefined) is different than fun(), in terms of how the reduce spec is provided, as i understand it\n. Gotcha, I understand.  FWIW, the current implementation fails most basic use-cases of reduce, e.g.,\n// sum an array of numbers\ngoog.array.reduce([1,2], function(a,b){\n  return a+b;\n});\n^ Fails, whereas the native implementation (and my patch) returns 3, as expected.\nNot the end of the world, but definitely not a drop in replacement for Array.prototype.reduce.\n. Cool\n. ",
    "adhintz": "I did some performance tests comparing this pull to the new flatten chunk/push style (sorry, not yet in public github, but pasted below). Both are similar for small arrays, the chunk/push is faster for 180k-size arrays, and this commit is faster for 18M-size arrays.\n``` javascript\ngoog.array.flatten = function(var_args) {\n  var CHUNK_SIZE = 8192;\nvar result = [];\n  for (var i = 0; i < arguments.length; i++) {\n    var element = arguments[i];\n    if (goog.isArray(element)) {\n      for (var c = 0; c < element.length; c += CHUNK_SIZE) {\n        var chunk = goog.array.slice(element, c, c + CHUNK_SIZE);\n        var recurseResult = goog.array.flatten.apply(null, chunk);\n        for (var r = 0; r < recurseResult.length; r++) {\n          result.push(recurseResult[r]);\n        }\n      }\n    } else {\n      result.push(element);\n    }\n  }\n  return result;\n};\n```\n. LGTM. The code is simpler than the original. A simple performance test with this code runs in 5057ms whereas the original runs in 7525ms.\njavascript\nfor(var x=0; x<5000; x++){\n  var g2 = [0, 1, 2, 4, 8, 2, 4, 8];\n  for (var i=0; i<1000; i++) {\n    goog.array.extend(g2, f2);\n  }\n}\n. As requested by the Closure team, here are some JsPerf benchmarks:\nLarge 1M array, showing that the existing implementation throws an error: http://jsperf.com/goog-array-extend-with-large-arrays\nSmall 8 byte array, showing that this pull is 11% slower: http://jsperf.com/goog-array-extend-with-large-arrays/2\nMedium 1k array, showing that this pull is 30% faster: http://jsperf.com/goog-array-extend-with-large-arrays/3\n. ",
    "camio": "Hi -- There should be a CLA on file for all of Stellar Science. Is there any other information you need?\n. ",
    "donkeybonks": "Could it be that we use capture mode?\nWould you mind adding the capture argument into the existing test and seeing if that makes a difference?\n. Thanks, when I go back to work (around the 18th) I will run it in our\nenvironment where we are having the issues and see if it fails.\nOn 8 Nov 2014 10:44, \"Brendan Linn\" notifications@github.com wrote:\n\nIt still passes.\nYou can run the tests yourself directly from your working copy by running\na server:\n$ python -m SimpleHTTPServer 8000\nand navigating to keyhandler_test.html.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/issues/359#issuecomment-62232119\n.\n. We have been using a workaround for some time on the ESC key that calls the capture mode handler from the non-capture mode handler with an isInternal flag. In the capture mode handler we throw away the event if it wasn't raised internally, so essentially we can't ever handle ESC on the capture even under browsers where it works.\n\nFor some reason we recently had to amend this workaround to include the ENTER key under Internet Explorer (not EDGE, and not other versions) only. Resultant bug is intermittent and disappears, so we have to avoid using capture mode for ESC/ENTER completely and use only non-capture, otherwise after a little while on the page, both handlers end up firing and the event is raised twice.\nOther keys are working fine in capture mode handler under all browsers.. Just chuck a |string to the end of it would fix it up, but be less safe for all the other events.\nIt already lets through the big evil ones null and undefined.\n. I was referring to the native addEventListener ie window.addEventListener. This is still a bug\n. Ok, thanks, my mistake.\n. ",
    "oceanjack": "\ngoog.global is not window ... \n. ",
    "codyebberson": "I think this could be resolved as a documentation bug.  The FAQ suggested this example:\n--output_wrapper=(function(){%output%})();\n... which does not preserve \"this\" in strict mode.\nI just updated it to this:\n--output_wrapper=(function(){%output%}).call(window);\n... which fixed my build.\n. @shicks @joeltine - Thanks for looking at this.\n\nintentionally returns on TOUCHSTART\n\nThe opposite actually.  I modified that early exit to allow TOUCHSTART.  The mouseDown_ method had an early exit on !event.isMouseActionButton() to check for \"non-action\" cases such as right click and ctrl+click.  I want to allow TOUCHSTART as another \"action\" case.\nI considered modifying isMouseActionButton to allow touchstart, but (1) didn't want to increase the footprint of the pull request and (2) felt like that was not in the spirit of a function with \"mouse\" in the name.\n\nIn general, this change needs to do some refactoring to abstract the concept of \"mouse\" out of these methods.\n\nPerhaps a \"isActionButton\" method such as:\nfunction isActionButton(e) {\n    return e.isMouseActionButton() || e.type !== goog.events.EventType.TOUCHSTART;\n}\nOr did you have something more comprehensive in mind?\n\nI don't think this will work.\n\nWe have been using this patch in production for over a year, and it has behaved as expected for our use cases.  \nYour comment did lead me to reconsider assumptions.  The one case that might get messy is a touchscreen laptop where the user can both click and touch.  You could get into a weird state under those circumstances.  I believe that is an acceptable edge case, and that this is still a positive improvement.\n. > We just need better naming on those mouse specific methods. Maybe dragStartHandler_ dragStopHandler_?\nSure, understood.  Stay tuned.\n. Quick bump that suggested changes have been submitted.\n. ",
    "AceMood": "For more information see: \nhttps://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine.onLine.\nI understand this code.\n. Indeed all browsers JSON.stringify(undefined) returns 'undefined',\nbut as comments in the source code the authors depend on the Specs in Ecma262\n. Could you find some way to run all tests for \"Browser compatibilities\" when integrated with Travis for every pull request? Delegate build server may be lack of this functionality.\n. Does isDocumentModeOrHigher works in IE11 with a 7,8,9,10 doc mode settings? \n. Safari6 also support it \n. ",
    "mortaliorchard": "Cleaning the cache of bower did the trick. The version that was in:\njava -jar compiler.jar --version\nClosure Compiler (http://github.com/google/closure-compiler)\nVersion: v20140923\nBuilt on: 2014/09/25 10:45\nMany thanks for helping out!\n. ",
    "vlkous": "+1\n. Ok thx\n. ",
    "jachym": "Exactly: I'm using HEAD, because there are no releases. Either make sure (compiler and library), both will always work together, or make tags, so we know, what works.\n. ",
    "arron0": "+1 This practicaly breaks any compilation. It's a breaking issue!\n. ",
    "Dominator008": "Turns out I forgot to build the compiler :( \n. @gberaudo This is a known bug https://github.com/google/closure-compiler/issues/1407\nI have a fix but it's not merged yet.\n. @gberaudo Good to know. Thanks for testing it out!\n. https://github.com/google/closure-compiler/pull/1480 Should fix that regression. Thanks for finding this out!\n. Can you rebase it on top of the current master to kick off another Travis CI run? The current run looks stale.\n. @federkasten Please squash the commits into a single one.\n. @bpilot\nGoogle Developers pages on Closure: https://developers.google.com/closure/\nClosure Library Wiki: https://github.com/google/closure-library/wiki\nClosure Compiler Wiki: https://github.com/google/closure-compiler/wiki\n. @bpilot Can you sign the CLA at #663 so we can accept your contribution? Thanks.\n. I think this is closed by https://github.com/google/closure-compiler/commit/3734b26b1215693d5c46636d91b7a5bb2715f690.\n. @shicks Yes, overloads would be ideal but we need intersection types for that.\n. @joeltine \n```\n../closure-library/closure/goog/array/array.js:1136: WARNING - The right side in the assignment is not a subtype of the left side.\nleft side  : T\nright side : {index:number, value:T}\narr[i] = {index: i, value: arr[i]};\n^\n\n../closure-library/closure/goog/array/array.js:1142: WARNING - Invalid type for parameter 2 of function goog.array.sort.\nexpected : function(T,T):number|null|undefined\nfound    : function({index:number, value:?} (loose),{index:number, value:?} (loose)):?\ngoog.array.sort(arr, stableCompareFn);\n                       ^\n../closure-library/closure/goog/array/array.js:1144: WARNING - Cannot access property value of non-object type T.\n    arr[i] = arr[i].value;\n             ^\n. @shicks Thanks!\n. @jart [Dossier](https://github.com/jleyba/js-dossier) is the new tool.\n. This might require an internal cleanup if some teams are still on gjslint.\n. @MatrixFrog \n. @MatrixFrog I think what @concavelenz meant was that whether the Compiler-based linter should actually check for \"extraProvide\", not just whether the suppression should be allowed (and essentially ignored).\n. @concavelenz I'm adding `extraProvide` to allowed suppression types in the Compiler-based linter in https://github.com/google/closure-compiler/pull/1624. I've reduced this PR to just fixing some lint warnings.\n. @ghosttie I think that's a known failure not related to your change.\n. This is something related to the Closure Compiler, not Closure Library. Can you report to https://github.com/google/closure-compiler instead? Thanks!\n. It's there for me.\n. I'm running Chrome Version 51.0.2687.0 on Linux x86-64 and it's working for me. If you can reproduce it feel free to file an issue against [Dossier](https://github.com/jleyba/js-dossier/issues), the tool to build the API docs.\n. @joeltine Will there be a v20160520.0.0 release?\n. @joeltine Ok thanks for the explanation. Just wondering because I was updating some dependencies.\n. AFAIK Closure does not recognize / use the `@augments` tag. Does it crash Closure Compiler? \n. @myphysicslab is correct. https://github.com/google/closure-library/blob/master/scripts/ci/compile_closure.sh#L22 shows that this file is not supposed to be included in your project.\n. Could you elaborate on what the problem was?. Can you try declaring `Collapsible` asjs\nclass Collapsible extends goog.events.EventTarget\n``\n?. @Belelros Extending an ES5 class from an ES6 class should work pretty well.. Making String implement IArrayLike seems better. Would it be hard to land such a fix internally though?  @concavelenz\n.Stringcan implementIArrayLike, but notstring.\n. Allowing string as an input makes it more in line with ES6'sArray.prototype.find`.\n. https://github.com/google/closure-compiler/blob/master/externs/es6.js#L1424\nYou can make calls like Array.prototype.find.call(\"123\", function(x) { return x < 2; }).\n. Yeah I realized that...\n. OK thanks.\n. I wonder if closure/goog/editor/plugins/abstractdialogplugin_test.html is fixed by the following commit:\nhttps://github.com/google/closure-library/commit/a1b20191b1cfd7937b1a3402eb1347bd54bc3116#diff-c0a7f4c78a87dc0d9c753419bf2fd040R89\n. Seems like in this case it's better to manually edit the original deps.js file. I think changing\ngoog.addDependency('events/listenermap.js', ['goog.events.ListenerMap'], ['goog.array', 'goog.events.Listener', 'goog.object'], false);\nto\ngoog.addDependency('events/listenermap.js', ['goog.events.ListenerMap'], ['goog.array', 'goog.asserts', 'goog.events.Listener', 'goog.object'], false);\nis the only modification needed.\n. @concavelenz Is there an update on this?\n. It's assigned upon calling goog.dom.getDomHelper():\nhttps://github.com/Dominator008/closure-library/blob/domHelper/closure/goog/dom/dom.js#L79-L85\nMaking it !goog.dom.DomHelper | undefined still triggers an NTI warning:\n../closure-library/closure/goog/dom/dom.js:82: WARNING - Returned type does not match declared return type.\ndeclared : goog.dom.DomHelper\nfound    : goog.dom.DomHelper|undefined\nalthough one can argue that NTI should have inferred goog.dom.defaultDomHelper_ is not undefined in this case.\n. I think it's a bug in NTI, filed https://github.com/google/closure-compiler/issues/1600.\n. @shicks That's part of analyzerChecks which is off for Closure Library now: https://github.com/google/closure-compiler/blob/master/src/com/google/javascript/jscomp/DiagnosticGroups.java#L507.\n. I removed that suppression for now. In fact most of the lint warnings in Closure Library are \"@suppress is not allowed here\". I think we need to allow more suppressions in the Compiler: https://github.com/google/closure-compiler/issues/1615.\n. I think it is a legacy parameter or something.. I can't figure out its full name.\n. These are Soy templates.\nsoy_test.js uses:\ngoog.soy.renderElement: https://github.com/google/closure-library/blob/master/closure/goog/soy/soy.js#L67-L68\ngoog.soy.renderAsFragment: https://github.com/google/closure-library/blob/master/closure/goog/soy/soy.js#L91-L92\nI determined the types from the signatures there.\n. ",
    "banguit": "Sorry that I missed detailed description. The problem that all content replaced by history_state input field during goog.History object creation. As you can see from my commit, I just changed method of adding hidden input field to the document.\n. ",
    "pstjvn": "So basically this is a no-op for open source then?\n. ```\npeterj | Jobs: 0 | @work:~/Documents/Projects/closure/library\n$ git pull\nAlready up-to-date.\npeterj | Jobs: 0 | @work:~/Documents/Projects/closure/apps/material\n$ python ../../library/closure/bin/build/depswriter.py --root_with_prefix=\"js ../../../apps/mobiletv/js\"\n// This file was autogenerated by ../../library/closure/bin/build/depswriter.py.\n// Please do not edit.\ngoog.addDependency('../../../apps/mobiletv/js/app.js', ['app'], ['material.app']);\ngoog.addDependency('../../../apps/mobiletv/js/m60.js', ['m60.weather'], ['goog.Promise', 'goog.json', 'goog.labs.net.xhr']);\ngoog.addDependency('../../../apps/mobiletv/js/matetial.js', ['material.app'], ['pstj.material.decorator']);\n```\nI am not 100% sure what the new format should be, but this looks like it is not (missing last argument?)\n. Thank you\n. Sorry, dismiss that.\n. ",
    "shmax": "Sure, will submit something after work.\n. > Why do you expect 0?\nCan't you guess? Evidently my expectations don't match reality, but I expect 0 because my pattern specifically spells out 'yyyy', and a value matching that pattern was not passed in. I would expect a method called \"strictParse\" to be a little more, well, strict about it. In my own particular scenario, I don't want to have to be in the position of trying to guess which century the user had in mind when he typed in \"01\", so I would rather the parser catch the mismatch. If I'm doing it wrong, how should I be doing it?\n. Well, yes, at least when we're talking about \"strictParsing\". Otherwise, what is the pattern even for if we're not going to respect the number of digits it spells out? If you don't intend to pay any attention to the number of digits, then all patterns may as well be single characters (eg. \"m-d-y\"), and the documentation and tests should make no mention of anything else. \nI grant that general parsing should be able to make best guesses, but surely there should also be some mechanism for more strict validation.\nAt this point I'm still not sure if we're talking about a bug, or a missing feature; at best it's a misleading method name. When I get more time I'll spend some time analyzing the tests and going over the code in more detail.\n. Hmm, looking at the code some more, I'm not sure this is right. Going to close and think about it some more...\n. ",
    "lomonosv": "I added new Unit Test. Please check it.\n. Thanks for accepting my pull request.\n. Sorry, may be I don't understand something, but I don't see my changes in code in closure/goog/string/stringformat.js and closure/goog/string/stringformat_test.js files. Thank you beforehand for the explanation.\n. Thanks for your answer. I signed a CLA.\n. ",
    "jarabek": "Unfortunately, that didn't do the trick.  When I use your output_wrapper, goog.global is the global window object, which is the same as it was when I was using my original wrapper.  So this still results in the case where anything that is defined with goog.define() is being added to the global window object, and anything defined directly on the 'goog' object in the closure stays within the closure.  \nIs it the intention that goog.define() is supposed to be globally scoping these variables?  Because I am using a wrapper to avoid having variable collisions, but it seems like goog.define() is explicitly trying to circumvent that.\nThanks,\nChris\n. I went looking for the --rename_prefix_namespace flag and couldn't find it.  Turns out that my compiler.jar didn't get updated correctly when I did my upgrade.  I grabbed the latest compiler, and everything works as expected, no runtime errors, no namespace pollution.\nThanks a lot for your help.\n. ",
    "koto": "Works OK, thanks!\n. It works now, thanks! \n. This seems to be because of merging error in the given file:\n/**\n * Handles a KEYDOWN browser event on one of the popup targets.\n * @param {goog.events.BrowserEvent} e The browser event.\n * @param {!goog.events.BrowserEvent} e The browser event.\n * @private\n */\nThe @param line was modified recently in the internal version.\n. This commit is a culprit: https://github.com/google/closure-library/commit/39651a984888d5386e8b7bcec58d357d9e127fcb\n. ",
    "liolick": "I'm just find some links (not sure if they are usefull):\nhttp://stackoverflow.com/questions/26268129/css-rules-involving-the-value-of-data-in-ancestors-not-working-well-with-ie-wh\nhttps://github.com/niloy/blog/issues/20 (no answers)\nhttp://stackoverflow.com/questions/27029565/data-attributes-not-working-in-ie\n. ",
    "nicksay": "This is an interesting problem.  Assuming we force a repaint by toggling a unique generated CSS class on the element, we can work around  the issue, but that may have an unwanted performance impact in applications that make heavy use of datasets.  We will have to test the speed of doing that.\nI think there are 3 solutions we can consider:\n1: Check for IE via User Agent and toggle a class\nThis limits the impact of the change to just IE, but introduces an extra dependency on the User Agent code in goog.dom.dataset.  Some of the extra dependency impact could be mitigated by setting compile-time flags for IE vs other browers.\n2. Use a independent define and toggle a class\nThis limits the impact of the change to users who explicitly set a compile-time flag, but reduces the scope of the fix.\n3. Add a documentation warning, do nothing and have users implement their own fix.\nThis introduces no overhead and limits the impact to those users relying on data attribute base CSS rule, but reduces the scope of the fix.\n. After some investigation, toggling an unrelated unique class does not cause IE to propagate the dataset values, so options 1 and 2 are out.  Doing nothing somewhat defeats the purpose of using a library, so option 3 is out.  I think the best solution is:\n4: Restrict IE to setAttribute and provide a @define to override\nThis returns functional behavior to IE.  The performance hit is relatively minor and can be avoided if desired by overriding the define during compilation.  In my opinion, those users seeking the highest possible performance will/should opt for using other non-DOM-based data storage anyway.\n. @jonathansampson I was originally looking for a \"current but not future\" property in the hopes that the bug is fixed in IE by the time the property disappears.  Do you have an expected relative timeline for the removal of msPointerEnabled vs fixing the dataset behavior?\n. Thanks @jonathansampson.  We'll avoid using the msPointerEnabled and similar workarounds in favor of a standard check.\n. Updated to avoid using workarounds like msPointerEnabled in favor of a standard check, and removed the additional define to simplify the IE code path.\n. Yes, I'm keeping the external PR in sync for the benefit of the issue thread.  I'll close this once the internal CL is pushed.\n. This was committed as ff4954ce8dba70f9725909e537334646e23b6741\n. ",
    "jonathansampson": "I work on the Internet Explorer team and noticed this behavior some time back; recently I seeded Stack Overflow with a question and answer to assist others running into this issue.\nWe're aware of the issue and have a bug filed internally for tracking it. I'll add this Issue to that ticket as an indicator that this is impacting live sites.\nWith regards to the work-around, I'd suggest avoiding navigator.msPointerEnabled and instead (if you're going to take this route) look at window.PointerEvent. The former may not stick around much longer.\n. On internal builds we have already removed support for msPointerEnabled. We will likely see this change surface in the public before Windows 10 RTMs. We tweeted this news just now. The dataset issue is likely to take a bit longer given our present backlog for Project Spartan.\n. ",
    "soycode": "K great, thanks!\n. ",
    "sevaseva": "Given where the browsers are, it may make sense to add goog.userAgent.product.CHROMIUM and deprecate goog.userAgent.product.CHROME = CHROMIUM. Developers would care whether it is based on Chromium 99.9% of the time, not whether it is Google Chrome.\nIn addition to Android WebViews, Opera on Linux, Windows, OSX and Android is based in Chromium.\nIf something like that will be accepted, I may be able to contribute that.\n. Thanks for discovering this, but this should have been closed by now. I submitted this internally a while ago per request from the team.\n. ",
    "cmperez": ":+1: \n. ",
    "jrrera": ":+1: \n. ",
    "SandraShklyaeva": "Yes, I'll resolve it shortly.\n. ",
    "kuzmisin": "thanks (ok for nodejs v0.10.29, v0.12.0)\n. ",
    "myphysicslab": "sorry I meant to post this on closure compiler, not closure-library!\n. Chiming in because I use touch events and have had perhaps related difficulties.  My comments:\n1.  touch events seem to not be well defined in either goog.events or the externs.  A case-insensitive search for \"touch\" or \"touches\" doesn't reveal where targetTouches or changedTouches is defined, except for in the file externs/iPhone.js.  Is iPhone the accepted standard for this?  The other relevant file seems to be goog/labs/events/touch.js but it doesn't define targetTouches or changedTouches either, and being in the labs directory implies to me it is experimental.\n2. I therefore am using the externs/iPhone.js definitions.  After a bunch of experiments, I don't trust the changedTouches or targetTouches at all.  Instead I just use TouchEvent.touches with the following idea:  \na. A single touch in the target element (a Canvas) is treated like a mouseDown, and I start a mouse drag operation.  This is in response to a TOUCHSTART event.\nb. Multiple touches during TOUCHSTART or TOUCHMOVE events (or a TOUCHEND event) ends an ongoing mouse drag.\nThis works for me on Android, iPhone, iPad, Mac, Windows.\n. I think because both of changedTouches and targetTouches are leaving out some touches, and I'm not confident about understanding how they decide what to leave out (and whether all browsers/platforms make those decisions the same way).  For my situation it seems pretty solid to regard a single touch to be equivalent to a mouse-down and any multiple touch event cancels an existing mouse drag operation.\nAt the time I was working on this (October 2014) I read this old post from 2010 on the closure list; this seemed to be the most current info I could find about using touch events with closure-library\nhttps://groups.google.com/forum/#!searchin/closure-library-discuss/touch/closure-library-discuss/8XE2c8HZicE/xEptT6CovqYJ\nThe recommendation given there was:\n\nFor rarely-accessed event properties, we often just use BrowserEvent's\ngetBrowserEvent method to get the underlying native event object. See\ngoog.events.MouseWheelHandler for a good example of this.\n\nSo that's what I'm still doing:\njavascript\nSimController.prototype.touchStart = function(evt) {\n  if (evt.target == this.labCanvas_.getCanvas()) {\n    var bevt = /** @type {!TouchEvent} */(evt.getBrowserEvent());\n    if (bevt != null) {\n      var touches = bevt.touches;\n      if (touches.length == 1) {\n        // single touch in our canvas is treated as mouseDown.\n        this.doMouseDown(evt, touches[0].clientX, touches[0].clientY);\n      } else {\n        // Multiple touch cancels an ongoing mouse drag.\n        this.finishDrag(evt);\n      }\n    }\n  }\n};\nFrom my point of view I would like a \"patched cross platform\" way of getting all the current touches during any touch event.\n. works for me on Macbook Pro OS X 10.9.5,  Chrome  43.0.2357.65 (64-bit)\n. After getting a recent version of closure-library, my unit tests were failing because I run them with goog.DEBUG off.  Turning on goog.DEBUG causes lots of unwanted debug code (in my own code) to write to the console during my unit tests.\nThe failure message was something like goog.async.run.resetQueue is undefined which happened while trying to uninstall a MockClock.\n. Travis is reporting a lint problem on goog.loadModuleFromSource_ in base.js, but I didn't change anything in or near that function.\n----- FILE  :  /home/travis/build/google/closure-library/closure/goog/base.js -----\nLine 1123, E:0251: Invalid suppression type: newCheckTypes\nLine 1124, E:0217: Missing @return JsDoc in function with non-trivial return\nFound 2 errors, including 0 new errors, in 1 file (1 file OK).\nThis is the function in goog.base where the lint errors are being reported:\njavascript\n  /**\n   * @private @const {function(string):?}\n   *\n   * The new type inference warns because this function has no formal\n   * parameters, but its jsdoc says that it takes one argument.\n   * (The argument is used via arguments[0], but NTI does not detect this.)\n   * @suppress {newCheckTypes}\n   */\n  goog.loadModuleFromSource_ = function() {\n    // NOTE: we avoid declaring parameters or local variables here to avoid\n    // masking globals or leaking values into the module definition.\n    'use strict';\n    var exports = {};\n    eval(arguments[0]);\n    return exports;\n  };\n. I was mainly concerned with messages in my own code, so using goog.debug.logger or using goog.defines to make a custom symbol will work OK.\n. I don't understand the Travis CI errors.  This is only a change to a comment, hard to see how it could change any test results.\n. I will make a new fork to get rid of those old commits (or is there a better way to do that?) and resubmit the PR.\nThe <pre> tags are necessary otherwise the &lt; is not interpreted.  I can indent, but then the result will have extra indentation.  Here are examples in github's markdown, which has similar behavior:\nPre-tag without extra indent\n\n/** @type {goog.events.EventId<MyEventObj>} * /\nvar myEventId = new goog.events.EventId(\n    goog.events.getUniqueId(('someEvent'));\n// No need to cast or declare here since the compiler knows the\n// correct type of 'evt' (MyEventObj).\nsomething.listen(myEventId, function(evt) {});\n\nPre-tag with extra indent\n\n    /** @type {goog.events.EventId<MyEventObj>} * /\n    var myEventId = new goog.events.EventId(\n        goog.events.getUniqueId(('someEvent'));\n    // No need to cast or declare here since the compiler knows the\n    // correct type of 'evt' (MyEventObj).\n    something.listen(myEventId, function(evt) {});\n\nNo pre-tag, just indent -- note that &lt; is not interpreted:\n```\n/** @type {goog.events.EventId<MyEventObj>} * /\nvar myEventId = new goog.events.EventId(\n    goog.events.getUniqueId(('someEvent'));\n// No need to cast or declare here since the compiler knows the\n// correct type of 'evt' (MyEventObj).\nsomething.listen(myEventId, function(evt) {});\n```\n. Here is info about \"using markdown style code blocks with 4 indented spaces\" in response to a question in previous PR #602:\nThe <pre> tags are necessary otherwise the &lt; is not interpreted.  I've added some indentation, but note the result has extra indentation.  Here are examples in github's markdown, which has similar behavior:\nPre-tag without extra indent\n\n/** @type {goog.events.EventId<MyEventObj>} * /\nvar myEventId = new goog.events.EventId(\n    goog.events.getUniqueId(('someEvent'));\n// No need to cast or declare here since the compiler knows the\n// correct type of 'evt' (MyEventObj).\nsomething.listen(myEventId, function(evt) {});\n\nPre-tag with extra indent\n\n    /** @type {goog.events.EventId<MyEventObj>} * /\n    var myEventId = new goog.events.EventId(\n        goog.events.getUniqueId(('someEvent'));\n    // No need to cast or declare here since the compiler knows the\n    // correct type of 'evt' (MyEventObj).\n    something.listen(myEventId, function(evt) {});\n\nNo pre-tag, just indent -- note that &lt; is not interpreted:\n```\n/** @type {goog.events.EventId<MyEventObj>} * /\nvar myEventId = new goog.events.EventId(\n    goog.events.getUniqueId(('someEvent'));\n// No need to cast or declare here since the compiler knows the\n// correct type of 'evt' (MyEventObj).\nsomething.listen(myEventId, function(evt) {});\n``\n. Good catch, it turns out that the<` entity is not needed with 4 indents, and I'm not getting the js-dossier errors either.  Here is an example using github's markdown.\n```\n/** @type {goog.events.EventId} * /\nvar myEventId = new goog.events.EventId(\n   goog.events.getUniqueId(('someEvent'));\n// No need to cast or declare here since the compiler knows the\n// correct type of 'evt' (MyEventObj).\nsomething.listen(myEventId, function(evt) {});\n```\nI made a new commit to remove the <pre> tag and just use 4 indents.\n. I've squashed to a single commit.  I don't think adding an extra space on each line of the code sample is helpful because you wind up seeing that extra space at start of each line in the documentation (see examples below).  \nI did change the closing comment symbol */ to use a back-slash instead *\\.  I'm not sure if that's what you were suggesting.... it's odd-looking but I think anyone would understand what is intended.\nFor comparison here is the comment with and without the extra space, in github's markdown:\nwith 4 spaces indent\n```\n/* @type {goog.events.EventId} \\\nvar myEventId = new goog.events.EventId(\n   goog.events.getUniqueId(('someEvent'));\n// No need to cast or declare here since the compiler knows the\n// correct type of 'evt' (MyEventObj).\nsomething.listen(myEventId, function(evt) {});\n```\nwith 5 spaces indent\n```\n /* @type {goog.events.EventId} \\\n var myEventId = new goog.events.EventId(\n    goog.events.getUniqueId(('someEvent'));\n// No need to cast or declare here since the compiler knows the\n // correct type of 'evt' (MyEventObj).\n something.listen(myEventId, function(evt) {});\n```\n. FWIW, I've been using Dossier on my own project and IT IS FANTASTIC.  Yes,\nthe choice of output is limited to what Jason has set up now, but I'll bet\nthat is malleable somehow (perhaps not yet easily).  What is so great about\nDossier is that it works directly with Closure Compiler based code, pretty\nmuch as good as (or better) than the equivalent JavaDoc tools in the Java\nworld.\nNote that the current Dossier outputs a somewhat different style than what\nis seen in the Closure Library docs.  I also would like to make some\nchanges in the output, but that is subsidiary to having a tool that is able\nto grok Closure Compiler code.\n--ErikN\nOn Thu, Mar 3, 2016 at 2:25 PM, Justine Tunney notifications@github.com\nwrote:\n\nI would consider chipping in some 20% time to make Dossier's output look\nslightly more fabulous. But before doing that, I would like to have a\nbetter understanding of what was wrong with the old tool? Why did Closure\nLibrary choose to migrate to Dossier? Why is Dossier hosted under Jason's\npersonal account rather than Google?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/issues/668#issuecomment-191994300\n.\n. Closure Compiler started with the JSDoc tags but the two projects have\ndiverged since then, there is not much relation between them now.  Around\nbeginning of 2015 I tried to use the JSDoc documentation generator\nhttp://usejsdoc.org with my Closure Compiler based code with rather\nlimited success.  Closure Library is now using Dossier\nhttps://github.com/jleyba/js-dossier to generate documentation.  I'm also\nusing Dossier and it works great.\n\nOn Fri, Aug 19, 2016 at 12:36 PM, Tom MacWright notifications@github.com\nwrote:\n\nSure - for the purposes of comparison, assume that this is the @extends\ntag, which usejsdoc documents as an alias. I'll update that in the example\nin this ticket.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/closure-library/issues/746#issuecomment-241114691,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AD32csPAiKa3if3lRGkMC0ADZvbGw9Ntks5qhgXFgaJpZM4JokjE\n.\n. The best documentation on Closure Compiler's tags is\nhttps://developers.google.com/closure/compiler/docs/js-for-compiler\n\nIn general the Closure Compiler documentation is currently scattered and out of date.  There is some stuff in the wiki at https://github.com/google/closure-compiler/wiki.  The book by Michael Bolin \"Closure: The Definitive Guide\" is still very useful but is out of date in details.\n. The eventtargettester.js code seems to be only for testing.  It probably shouldn't be included in a project other than for testing closure-library itself.  How are you using it?  Do you know how it is included into your project?\n. See the latest commit which incorporate the review comments.\n. I've confirmed that this is fixed in my test case.. I've figured out the problem, it's on this line of goog.html.SafeUrl.sanitizeAssertUnchanged\nif (!goog.asserts.assert(goog.html.SAFE_URL_PATTERN_.test(url))) {\n  url = goog.html.SafeUrl.INNOCUOUS_STRING;\n}\n\nIf I change it to the following, then I am able to see the test results.\nif (!goog.html.SAFE_URL_PATTERN_.test(url)) {\n  url = goog.html.SafeUrl.INNOCUOUS_STRING;\n}\n\nThis assertion is failing (under SIMPLE compile) when I run by opening the file on my local machine.  If I upload to my website, then this doesn't fail.  This is because goog.html.SAFE_URL_PATTERN_ doesn't allow a file:// prefix on the url.  I suspect that with ADVANCED compile I have goog.DEBUG turned off which disables the assertion.\nThe code doesn't make sense.  If the assertion fails, then we can never make it to the next line with goog.html.SafeUrl.INNOCUOUS_STRING.  Why not just have the plain assertion?  Why have an if statement that depends on an assertion failing?\nAs written, I can't see the test results when running the test on my local machine.\nThe goog.html.SafeUrl.sanitizeAssertUnchanged changes happened in commit 3689198649041f33b340460d39d19a00eb270409\n. I had to set goog.DEBUG=true because in some unit tests I was using goog.testing.MockClock uses goog.async.run which requires goog.DEBUG to be true.  Perhaps that has changed, but there is still one at least one place that requires goog.DEBUG.\nSo, I would have to stop using MockClock in order to get this to work.\n(I still think that code doesn't make sense for the reasons I outlined above... an assertion should just cause a failure, why would you ever test the result of an assert?)\nI've stopped using goog.testing.jsunit because of this and other issues, so it's no longer a problem in my code.\n. Unfortunately that seems to not work: then the &gt; does not show up as < in the docs.  See https://github.com/google/closure-library/pull/603#issuecomment-156789878\n. Will the compiler know what type is returned?  I'm concerned that this means adding tests to figure out what the result is.  Especially with NTI (new type inference).  Here is an example:\njavascript\n  // find first body with finite mass\n  var body = goog.array.find(this.sim.getBodies(),\n    function(bod) {\n      return isFinite(bod.getMass());\n    });\n  if (body != null) {\n    this.graph.line.setXVariable(body.getVarsIndex()+0);\n}\nWill I need to change the test to\njavascript\n  if (body != null && !goog.isString(body)) {\nWorse would be this\njavascript\n  if (body != null && body instanceOf Polygon) {\n. ",
    "zchee": "This ?\n. Ok, I was submitted to CLA.\n. ",
    "bebbi": "cla done\n. @concavelenz  why label cla:no? CLA is \"signed and filed\" March 10 (via email confirmation from google)\n. fixed author now matching signed CLA (re-write commit)\n. verified email in github too in case that's necessary\n. done. (rebased commit, annotated return and simplified code.) Synopsis for PR:\nFixes issue where caller doesn't know when load sequence is finished in loadMany\nFixes issue where it's impossible to parallelize script loading with multiple independent loadMany calls, e.g.: loadMany([A, B, C]) and loadMany([D, E, F])\nImpact: since caller knows what's going on, there is no need for a goog.net.jsloader.scriptsToLoad_ queue. Clients can avoid the race condition mentioned.\n. ok nevrmind, going to submit per spec. Just let me know in case you change decision\n. I'm seeing a linter issue for long line. Going to truncate all lines to 80 and re-submit\n. See #523 for the PR with skipQueue\n. done. Comment changes reset, my bad\n. hey thanks. hope we've got it now (for today at least that's it for me..). tx for patience. I've rebased #523 on top of this one, will add test once agreed.\n. Thanks to you. I hope we can add #523 too. I've checked all grammar and linting already :)\n. (I'll add a test when the code is agreed)\n. This addresses an issue where it's impossible to parallelize the loading of independent sequences of scripts with multiple loadMany calls - e.g.: loadMany([A, B, C]) and loadMany([D, E, F]) can not be parallelized even if D/E/F have no dependency on A/B/C.\nThe proposed code allows skipping the queue forced by loadMany and have caller-side management of dependencies.\n. Additionally, in terms of general usefulness, this commit allows a caller to manage their own loadMany queue however it suits them - i.e. this will make loadMany more generic and increase the number of possible use-cases it can support. Any feedback appreciated.\n. - added test\n- I couldn't reproduce the deps.js formatting using depswriter.py (License text etc), so I manually added the new files. Best practice feedback welcome.\n- I noticed some capitalization issues in jsloader_test.js from my previous PR #417 . Do you prefer this commit to fix it or an addional one?\n. @concavelenz I just run into another use-case now.\nloading many scripts required:\nloadMany(manyScriptURLs),\nand in another caller:\nloading 2 small scripts for more time critical stuff:\nloadMany(smallstuff, {skipQueue: true})\nNow there's a chance I can finish number 2 early without too much cross-talk, as long as the skipQueue feature exists. Otherwise my main view is going to wait long for all other stuff to load. Does that make sense?\n. Updated: separate test, and an additional commit for fixing comment syntax in merged PR #417 \n. any news on this?\n. I see. That's possibly an information dissemination problem then, I've tried discussing loadMany on closure google group before and have found helpful people but no user. github issues are probably a better place. Generally, would be good to establish a place to agree on features with owners before coding.\n. ok will do in a week or so.\nOn 30 Jul 2015, at 19:56, Joel Martinez notifications@github.com wrote:\n\nIn closure/goog/net/jsloader.js:\n\n};\n-  popAndLoadNextScript();\n-  return popAndLoadNextScript();\n  Add a @return type to loadMany.\n\n\u2014\nReply to this email directly or view it on GitHub.\n. Ok. I had asked for feedback on the google group. It's a very specific use-case. The problem I see is it blocks other use-cases, as the caller has no control. Do you agree w/ some option to use/skip the queue? A param (opt_queue), or maybe an add'l func? Tx\nOn 11.08.2015, at 18:58, Joel Martinez notifications@github.com wrote:\nIn closure/goog/net/jsloader.js:\n\nif (!uris.length) {\n-    return;\n-  }\n\nvar isAnotherModuleLoading = goog.net.jsloader.scriptsToLoad_.length;\n  Ehhh, I think I'd prefer you not change the behavior of this method this radically. The original impl was designed with a specific use case in mind and breaking that assumption could cause breakages internally.\n\n\nCan you revert this back to the original fix w/ only @return added?\n\u2014\nReply to this email directly or view it on GitHub.\n. I\u2019ll do as you suggest. However, a quick request for comment:\nIt seems to me that the code loses a tad elegance.\nTo support the original use-case, we now need to store the active deferred to return it in the if (isAnotherModuleLoading) clause.\nBut since we always return deferreds now, that use-case could easily be handled by the caller.\nI'm happy to code for it in loadMany, but as \"with queue\" is more specific than w/o (judged by the number of lines), it would seem more natural to use the option to enable it (\"..plus one uri queue please\") rather than disable it (\"..oh, without that queue thing please\").\nI am aware that backwards compatibility can be a issue somewhere.\nWith that, could you confirm that you keep your preference and I'll PR per your spec.\n. which ones? I've copied the writing style in that file, they're all over the place\n. ah - just saw it now. tx\n. done. not sure what capitalization refers to. deferred? have changed sentence to work around.\n. I got that. But aside from the word 'deferred' (I tend to write instances in lower case but probably one can argue for upper case here), I didn't spot any case issues in other words that I added. Is it okay as amended?\n. Yes that should work. Unless you object, I'll keep 1 loadMany + 1 loadMany(skipQueue) as the testing scenario though, it seems to make most sense.\n. \n",
    "AliMD": "why not ? easyer install, fast access, bower is popular, bla bla ...\n. @concavelenz \nwhy not ? easyer install, fast access, bower is popular, bla bla ...\n. Hmmm\n@paulirish thank you\nIs any problem with bower ?!\nComponent is good but bower is more popular\nAnd by the way could you please add tag versions\nThank you\n. @paulirish\nI know it, OK I will make it\nthank you for invitation\n. @nanaze (excuse me paul)\nBower is not package provide for backbend or node\nIt's just for front end\nAnd you can easily use for download and update js/vendor project\nAnd don't have any relation with npm+browserify\nUse can easily hosy your files contain bower files with browserify or access files with npm ...\nI don't understand your question clear\n. Done (https://github.com/components/closure-library)\nPlease check the issues and continue there\nThank you\n. I think you need change this way if you want to Match with open sources world.\n. ",
    "paulirish": "@AliMD are you up for maintaining the bower package of closure on https://github.com/components ?\nIf so, that would be best.\n. @AliMD components github org is used for Bower to maintain distributable packages... (like a dist folder)\n(it has nothing to do with the Component package manager)\nI don't see any tags either in closure. Looks like its just a matter of using latest on master (which is how we do things at Google)\n@AliMD if you want to maintain https://github.com/components/closure-library/ please do. \n. Bower just gets the files on your machine. It's pretty basic.\nI don't know how well it integrates with npm+browserify or jspm+system.js\nBut that's mostly what you'd be asking.\n. \u200bDay-based tags makes sense, yeah.\nDon't worry about for now.  Once we have a reliable package maintainer then\nwe can sort out that side. :)\n. ",
    "dillonforrest": "Hi, I think we're on different pages right now, as I believe I'm totally missing the mark with this issue. Thanks for clarifying that it's already there!\nInitially I thought requestAnimationFrame wasn't in the closure library at all. I just did a more thorough search of the code and found this: https://github.com/google/closure-library/blob/2012c5372fdb02ce9531cf4b2561b05e3ce2ab39/closure/goog/async/animationdelay.js#L248\nThis is the only area of the closure library where I see requestAnimationFrame created for cross-browser compatibility, but it's a private method.\nIs there value in creating a separate function? Maybe goog.async.requestAnimationFrame? I'm not sure if it'd be best in async, dom, fx, or some other area.\nI found myself wanting to call requestAnimationFrame directly, but didn't see it in the closure api, so this issue is about adding it to the api. :)\n. Cool, thanks! Does that mean I'd have to include goog.dom.animationFrame.polyfill just so I can use requestAnimationFrame? Is that the intended usage?\n. Hey there @concavelenz , just want to check in again to hear your thoughts. What's the intended idiomatic way for closure users to call requestAnimationFrame?\n. ",
    "AlastairTaft": "I don't think I'll be able to use different absolute paths by modifying the base path.\n. ",
    "ama-ch": "OK, I'll prepare it.\n. I've sent a pull request, thank you.\n. I have signed CLA.\n. ",
    "irock": "@joeltine Sorry for the late response.\nIf someone tries to resolve a relative URI that contains encoded query data, this will create a new absolute URI with the encoded params exactly as they are. - This is what this patch set is supposed to fix. Currently, the resolve() function willl decode the query data, which seem like a strange behavior to me.\nI would have expected that both of the expressions below would do the same thing:\ngoog.Uri.parse('http://www.google.com/search')\n  .resolve(goog.Uri.parse('?q=%26')).toString());\ngoog.Uri.parse('http://www.google.com/search?q=%26').toString();\nThis is not the case in the current version of the library.\n. ",
    "fbsolo": "4-12-15 / additional fixes:\nRevised commit adds fixes for two Google editor bugs:\n1. Originally, a  paragraph tag at the start of a highlighted Google Editor 'editMe' textarea would map to an extra blank line\n\nand this commit fixes that bug.\n1. Originally, the Google Editor 'fieldContents' in editor.html would have an &nbsp when the page itself first loads. This commit fixes that bug.\n. John Lenz\nHello. Thank you for the recommendation re: Google Closure Library issue\n502 https://github.com/google/closure-library/issues/502 and associated PR\n468 https://github.com/google/closure-library/pull/468.\nTo learn more about unit testing standards, I did some research, first\nreading through the Closure Library website\nhttps://github.com/google/closure-library and then extending past it. I\nlooked in\nhttps://code.google.com/p/closure-library/issues/detail?id=110\nhttps://en.wikipedia.org/wiki/Unit_testing\nhttps://github.com/google/closure-library\nhttps://developers.google.com/closure/library/\nhttp://google.github.io/closure-library/api/\nhttp://google.github.io/closure-library/source/closure/goog/demos/\nbut I never found a specific description. If you have an example URL that\nexplained the Google Closure Library unit testing standards, I will\nproceed. If you'd like, I'm willing to write a unit testing readme document\nfor the library https://github.com/google/closure-library once I see the\nexpected unit test structure.\nThank you!\n- Frank Solomon\n\nFrom: John Lenz notifications@github.com\nDate: Tue, Aug 4, 2015 at 4:20 PM\nSubject: Re: [closure-library] This PR fixes a bug that will \"arbitrarily\"\ndelete text in the Google Editor. This usually happens when the user first\nstarts using a fresh Google Editor. (#468)\nTo: google/closure-library closure-library@noreply.github.com\nCc: fbsolo fbsolo@gmail.com\nAdd the very least this would need a unit test.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/pull/468#issuecomment-127793037.\n. I started working on this and I hit a wall because of issues with the charCodeAt function. In some email traffic, Lokedhs explained that the solution would involve extracting the high and low surrogate pairs that map to the \"special\" characters - those that have code points greater than 0xFFFF. The charCodeAt function would handle all this. I had trouble getting it to work and I finally built a small test file in my local Closure instance for development, testing in Chrome. No luck. Then I built this JSFiddle which does this:\n\nIn that JSFiddle code, I found the \"overload\" for charCodeAt here. I placed the code from that JSFiddle back in the local Closure test instance and in Chrome, it does this:\n\nIn IE, it does this:\n\nBottom line: I don't see a reliable way to grab the surrogate pairs for characters outside the BMP. Until I figure this out, or someone has a suggestion, I can't proceed. I almost think I discovered a more fundamental bug.\n. I apologize. Yes - my mistakes. I would fix these myself but I don't want to cause any problems. If you / whomever could fix this, I would be grateful.\nThank you!\n. I apologize for this - it is not. I logged a number of separate pull requests and the change to this file got caught in this PR - PR #472.\nFor PR #472, only file\nclosure/goog/demos/keyhandler.html\nshould change.\n. ",
    "rconnamacher": "We (Intuit) signed it.\n. Thanks!\n. ",
    "RByers": "\nthe only way I see out of the pickle is to have some browser-exposed API\ntell us which we should be using\nDoes 5c9bd9e\nhttps://github.com/google/closure-library/commit/5c9bd9e268aae210d96ed6a1d7634f0666b7c844\nresolve this?\n\nYep, that's exactly what we did - shipped document.scrollingElement (https://drafts.csswg.org/cssom-view/#dom-document-scrollingelement) in blink and had closure use that if present.  Other browsers plan to ship this API too.\nSorry I forgot to close this bug.\n. ",
    "schedul-xor": "I've signed it!\n2015-04-24 23:05 GMT+09:00 googlebot notifications@github.com:\n\nThanks for your pull request. It looks like this may be your first\ncontribution to a Google open source project, in which case you'll need to\nsign a Contributor License Agreement (CLA).\n[image: :memo:] Please visit https://cla.developers.google.com/\nhttps://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll\nverify. Thanks.\n\nIf you've already signed a CLA, it's possible we don't have your\n  GitHub username or you're using a different email address. Check your\n  existing CLA data https://cla.developers.google.com/clas and verify\n  that your email is set on your git commits\n  https://help.github.com/articles/setting-your-email-in-git/.\nIf you signed the CLA as a corporation, please let us know the\n  company's name.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/closure-library/pull/456#issuecomment-95943708\n.\n\n\n\u5ddd\u5cf6\u548c\u6f84\nMAIL : schedul.xor@gmail.com\n. Thanks.\n. ",
    "ghost": "@joeltine sorry but I can't see how it got fixed. I can't see any change.\n. @joeltine ohh I see that's great. So the mentioned bug (the reason why that line was added) will not be taken care of at all. Is that correct?\n. Alright. I thought so I just did not want to file a pull request removing support for a certain browser version on a certain device. Thanks for caring about it though.\n. Your right sorry about that, for some reason with closure compiler and an enum of 0 it was giving me false with this function but changing the enum value to 1 fixed it. I'll try to track down the exact cause better.. Signed CLA.. ",
    "GetContented": "@joeltine can you reference this issue in the change when it drops? (Or put another way, I'd like a way for github to notify me when this drops so I can encourage clojurescript authors to depend on a later version of google closure library) :) Sorry, I just realised this issue is still open (I'd stupidly thought it was closed), and I'll obviously get notified when the issue is closed after the feature closes it.)\n. Thanks so much @joeltine  :)\n. Except that this happens when the server isn't online. In other words, there was no response code, because there was no response.\nCould you please elucidate the difference between the error codes? What does offline mean, for example? It'd be quite lovely if the documentation explained the semamtics a bit better.\nMeantime I'll run some tests of the 5 different things my codebase needs (by setting up contexts for each) and just use that to determine the error states.\nThanks! :)\n. AH! Ok... would it be possible to explain this somewhere? Say in some docs? Just a few lines explaining what each means? Sorry if this is a hassle. Awesome thankyou :)\n. Ah ok. I think the thing that threw me was this:\n\"The Http response returned a non-successful http status code.\" because it doesn't explain what the \"Http response\" is, and I naturally assumed it was the ordinary meaning of HTTP resonse, which would be something that came from the server.\nIn reading the online documentation, it seems to suggest that the code should return -1 if the server hasn't started sending its response.\nThe HTTP status code sent by the server (200 for success, 404 if the URL wasn't found, etc.) if the\n    server has started sending its response. If the server has not started responding, returns -1.\nhttps://developers.google.com/closure/library/docs/xhrio\nIn order to change the error code comments, I'd need to understand what they do. I currently don't.\nIt's fine though, if you're happy that they're good, then I'm happy :) I had a problem understanding, but let's just treat it as an aberration, in lieu of my actually being able to make any kind of modification to the docs because of my not understanding how the code functions.\nThanks very much.\n. ",
    "freshp86": "No response after 20 days...\nDoes this at least sound like a good idea? Are there any known major blockers on doing this? I was contemplating starting to investigate, but don't want to waste time if this is a no-go.\n. ",
    "lokedhs": "I wouldn't use that one at all. I would rather simply iterate over the characters and do surrogate processing manually. Something like this (note, completely untested):\njavascript\nvar i;\nvar pendingHighSurrogate = null;\nfor(i = 0 ; i < s.length ; i++) {\n    var ch = s[i];\n    // High surrogate?\n    if(ch >= 0xD800 && ch <= 0xDBFF) {\n        if(pendingHighSurrogate != null) {\n            throw \"Illegal format: Two high surrogates in a row\";\n        }\n        pendingHighSurrogate = ch;\n    }\n    else if(ch >= 0xDC00 && ch <= 0xDFFF) {\n        if(pendingHighSurrogate == null) {\n            throw \"Illegal format: Low surrogate not preceeded by high surrogate\";\n        }\n        encodeChar(((pendingHighSurrogate - 0xD800) << 10) | (ch - 0xDC00));\n        pendingHighSurrogate = null;\n    }\n    else {\n        encodeChar(ch);\n    }\n}\nif(pendingHighSurrogate) {\n    throw \"Illegal format: truncated surrogate pair\";\n}\n. ",
    "JensVerneuer": "works for me @ Chrome Version 42.0.2311.135 (64-bit) \n. ",
    "benzen": "I'got the exact same 42.0.2311.135 (64-bit)\nOn a Macbook air.\nWeird, do you have the error I've mentioned in the webconsole?\n. ",
    "vvvvalvalval": "Same thing, on Chrome v43.0.2357.124 and Macbook Air 2015 with OSX 10.10.3.\nGoogle Closure doc website not working on Chrome, you have to admit that's kind of hilarious ^^\n. ",
    "dbwhddn10": "my java version is 1.8.0_45\n. ",
    "rafasoares": "Great. It seems everybody auto-genereates this data based on somewhere else... lol\nOkay, I'll try and propose a change there.\nBut thanks, anyway.\n. ",
    "metrofun": "For me the generated docs are empty:\n\n. @concavelenz It's empty even when uncollapsed and there is a console error \n\nGoogle Chrome Version 44.0.2403.30 beta (64-bit)\nOSX 10.10.3\n. Damn :) That's one of my extensions, which breaks it. In a private mode everything works fine.\n. Surprisingly, the reason was http://benvanik.github.io/WebGL-Inspector/\n. ",
    "prahladyeri": "Sorry, realized that those backslashes were only required for multi-line python commands! So stripping them, the command runs without any issues now:\npython closure-library/closure/bin/build/closurebuilder.py --root=closure-library/ --root=myproject/ --namespace=\"myproject.start\"\n. ",
    "adelespinasse": "I actually have a partially working fix in my fork. That is, it seems to work for my purposes, but it isn't well tested, and I think it could be cleaner. I don't feel like it's ready for a PR. I'd need a better understanding of what tests might need to be updated, and how to run them, to begin with.\nIf someone else wants to work with my changes, or start over, that would be great. Or if you tell me how to get started on dealing with tests, I can hopefully get to it at some point.\n. ",
    "rikuayanokozy": "I signed it!\n. Um... I have not idea about construct a DataTransfer object in test.\n. Thanks for ur help. I added test case.\n. Okay, I use defineProperty instead of defineSetter, now the test is compatible with IE8+. The test renamed to testEffectAllowedExceptionIsCaught, unneeded eventdispatches and assertions has been removed. And now indent with 2.\n. OK, I'll commit soon.\nThe event DRAGENTER is needed, because of event dragenter set dndContainsFiles_ and onElemDrop_ need it.\n. ",
    "G0L0L": "I signed it\n. That's pretty simple. It's very useful in case, when you need to process big data array or to do 'hard' operations with it without user agent locking.\nAs another example, take a look on this library.\n. ",
    "jeffbcross": "I amended my commit to fix an issue with the name of the \"postinstall\" script that is responsible for installing selenium and chromedriver dependencies. s/post_install/postinstall\n. Looking into why Chrome is crashing on Travis now...\n. Looks like Travis is good to go (with some love to fix or ignore the failing tests). Passing the baton to @joeltine from here\n. To give selenium server time to start up before protractor runs.\n. ",
    "gfredericks": "I signed it!\n. Looks like this is a duplicate of #330 \n. Before I put any more work into this, could you confirm you're interested in this approach over the one in #330? I've tested #330 pretty thoroughly and it seems to be correct (and much simpler than mine).\n. Oh wow I didn't notice that #330 was about Long and not Integer. But in any case it's still true that the #330 fix applied to Integer fixes this bug.\nYeah the CLA issues were the main reason I wasn't sure how this should proceed.\nWould you like an improved PR with the 5-digit fix applied to Long as well?\n. Will do, sounds good\n. Pushed new commit that should address all the comments.\n. Oh I'm sorry I misinterpreted what you meant by \"incorporate the Long fix\". I'll add that too.\n. Pushed again\n. \u263a\n. The commit I referenced (above) from my own fork seems to fix this problem (based on my extensive tests), but might not be the best performance-wise.\nIt ought to be strictly better than the current situation though, since it actually works and will be a fast check for not-very-large numbers.\nShould I make a PR out of that, or wait for someone to do something with more of an eye on performance?\n. I will absolutely do that. I suppose I may as well upgrade this to a pull request while I'm putting in that effort.\n. Okay I created #518, which has inline comments in the algorithm, and includes a regression test that can double as code to reproduce the problem. Let me know if there's anything I've left unaddressed.\n. Okay, I think all the comments are addressed.\n. I made up the algorithm myself. I think the difference between mine and the one you linked to (which I wasn't aware of) is that I didn't have to figure out the details of how the signed representation of Integer works (in particular how it works across the different 32-bit chunks). E.g., how do I determine the bitCount for a given Integer? I don't know.\n. The smallest example of this bug I could find is \nffffffff00000001 \u00b7 1ffffffffffffffff\nwhich should be\n1fffffffe0000000100000000ffffffff\nbut goog.math.Integer gives:\n1fffffffd0000000100000000ffffffff\n. My pull request was merged, so I assume it's not an issue on master at\nleast. I haven't checked if it's been released.\n. I don't understand this build failure. It seems to have a compile error on completely unrelated code.\n. I added an extra test for the smallest failing case I could find. Travis reports that the latest master build failed as well, so I'm not sure how to tell if I did something wrong. The integer tests pass on my machine.\n. > is nullable by default\ndoes this mean all the code in the codebase is supposed to allow null arguments, or that I've accidentally indicated other can be null, or something else?\n. But if I'm reading the code correctly, the divide method will crash on its first line (calling .isZero) if its argument is null, is that correct? So if slowDivide is only called by divide its argument should never be null?\nAnd what does coding defensively mean here? What should this method do if it receives a null argument?\n. Absolutely, that's exactly what I was thinking as well.\n. Sorry about the style issues; I couldn't get the closure-linter to install. Hopefully there aren't more issues.\n. no, I explicitly checked and it was somewhere around 50, but I must have checked in an extremely wrong fashion because it's actually 82.\n. Sure, I thought 330 was more helpful, but will switch\n. done\n. ",
    "def0x099": "@fbsolo wtf is that link. ",
    "edejin": "I signed it!\n. My improvement mean that developer should select by his own how should work goog.json (same as goog.array). Because some environments didn't allow eval by security reasons.\n. ",
    "disjukr": "+1\n. ",
    "gterzian": "Signed it :memo: \n. @concavelenz That's a good point, have you considered if  there perhaps is a better way to provide this information to users? (As a side note, the Google code page ranks higher in search results, and it only contains a link to the Github repo).\nOne could say the README is is all about briefly presenting the project in the best possible way, and having this link in there didn't quite do the project justice IMHO. \n. ",
    "Anish2": "tests are now separated\n. ",
    "anwerso": "I signed it!\n. I thought about inverting logic too. In that case textarea will also work in Presto (no need to extra condition).\n. Made some changes and added test.\n. Looks like I've grokked squash magic.\n. So, PR with goog.structs.Map replaced with ES6 Map (and Set) will be accepted or it can break some internal CL usage and we should start with @suppress {deprecated} instead?. I don't see a reason to deprecate goog.structs.Map/Set without codebase refactoring in a first place.\nRight now I've just suppressed it in my Closure Library branch in places I use. PR is an other story, @suppress {deprecated} working mysteriously. For example I couldn't find how to suppress it in code like goog.ui.IdleTimer.defaultActivityMonitorReferences_ = new goog.structs.Set();. Only solution I found is suppress deprecated code in whole file (@fileoverview section), which is not an ideal solution.. Well, at least it should be escaped to work on Windows (..\\\\..\\\\..\\\\..\\\\path\\\\to\\\\file.js). But it is not an ideal solution when you commit deps.js to repo (like in CL). Python script always generated path with forward slashes. Reasonable aproach would be to repeat this behavior.. Thanks for the comments. I'll look into this. Not sure I have time to do it this week though.\n. ",
    "Znegl": "I signed it!\n. Oops. Wrong branch.\n. Sorry I haven't reacted the last couple of weeks. Are there any resourcers on how to make unit tests for the library or should i just guess based on the existing tests?\nI've tried googling it, but couldn't find anything.\n. I've just pushed a unit test to the branch form which this pull request is made.\n. I couldn't see it at first either, but it's  there: https://github.com/Znegl/closure-library/commit/171a900e8f68829b74ca8d9bc778c80ffc27e7e6\n. ",
    "lygstate": "Yes, I means http://bower.io/search/\nI want to install closure library with \nbower install closure-library\n or something alike\n. ",
    "omarkilani": "I signed it!\n(As Remember The Milk Inc.)\n. I signed it!\n(As Remember The Milk Inc.)\n. @joeltine: I added my corporate email to GitHub and googlebot is happy now. Thanks!\n@concavelenz Yup.\nAs an aside, I feel like people are going to spend a lot of time re-adding all the IE checks back for Edge -- I obviously don't know how much testing is being done internally over there but it may have been better  (?) to just s/IE/EDGE_OR_IE/ when EDGE was introduced and then remove the hacks as it was proven they were no longer required.\nAs far as I can see, Edge still has all of the baggage associated with IE (execCommand, etc) and most of the same bugs. The layout engine even seems to need the exact same CSS hacks as IE 11.\n. @concavelenz Well... they could have fooled me. I guess it's early days but unless there's some X-UA-Compatible setting that I'm missing... I don't see how it's anything like Blink/WebKit.\nNot to mention the glacial JS engine on real world apps, but that's another story entirely. I may be slightly jaded... :smile: \n. I'm not sure that's right given the comment in the header:\n*     IE doesn't have native support for input event. WebKit before version 531\n *     doesn't have support for textareas. For those browsers an emulation mode\n *     based on key, clipboard and drop events is used. Thus this event won't\n *     trigger in emulation mode if text was modified by context menu commands\n *     such as 'Undo' and 'Delete'.\nSeems to say that emulation is only on for those specific browsers (IE [and Edge], WebKit before 531)... so the code seems clear in that case?\nI guess that can be EDGE_OR_IE to save some characters? I may have misunderstood your request. :)\n. I guess it depends what Google's minimum supported versions are?\nI'd happily drop it... :)\n. ",
    "jbnicolai": "It seems the travis-ci build is failing due to linting errors not introduced in this PR.\n. ",
    "c960657": "@joeltine The change was implemented in CLDR about a year ago and included in release 26 that was released in September 2014.\nShouldn't it have appeared in Closure by now, or do I just need more patience? :-)\n. ",
    "supersteves": "Thanks. My bad, it was my code calling the old goog.base, not Closure Compiler transpiled outputs.\n. Thanks! Sorry I didn't get around to this myself.. ",
    "vincenta": "Yes, sorry about that, one line is too long... :/\nShould I submit a new pull request ?\n. Commits are squashed.\n. As ActiveX usage can be disabled using MSIE's security level, it is not reliable to only use goog.userAgent.IE to test for availability of ActiveXObject... In fact, I do think that trying to instantiate the ActiveXObject is the only reliable way of testing for ActiveX support.\nFor the global scope issue, is this a better (not perfect) solution ?\n``` javascript\nif (goog.userAgent.IE) {\n  /*\n   * Check for ActiveXObject support by the browser.\n   * @return {boolean} true if browser has ActiveXObject support.\n   * @private\n   /\n  goog.dom.xml.hasActiveXObjectSupport_ = function() {\n    [...]\n  };\n/*\n   * True if browser has ActiveXObject support.\n   * Possible override if this test become wrong in coming IE versions.\n   * @type {boolean}\n   /\n  goog.dom.xml.ACTIVEX_SUPPORT =\n    goog.dom.xml.hasActiveXObjectSupport_();\n} else {\n  /*\n   * True if browser has ActiveXObject support.\n   * Possible override if this test become wrong in coming IE versions.\n   * @type {boolean}\n   /\n  goog.dom.xml.ACTIVEX_SUPPORT = false;\n}\n```\n. goog.dom.xml.ACTIVEX_SUPPORT value depends on the return value of the previously declared function...\nShould I declare goog.dom.xml.ACTIVEX_SUPPORT before the function and set its value later ?\n. ",
    "chrisprice": "Tests added, lint errors fixed (waiting for build though) and CLA signed - but now I've spotted that the entire goog.graphics package is now deprecated :cry: \nFWIW we ended up maintaining a bunch of patches to the library which can be found in the old closure-charts repo. They are very old now but I mention them in case they're of some use to someone.\n. All done I think, I'd lazily copied the svggraphics_test.html. \nI also tidied up the references in alltests.js and closure/deps.js, assume that's required as well?\n. So apparently Travis isn't a fan of the pre-existing formatting of alltests.js?\n. All done. \nAnd in less than the time taken to produce 2.5 elephants :elephant: :elephant: ( :elephant: / 2 )\n. Done.\n. ",
    "lewistg": "@joeltine The issue I experienced related to the regular expression used here. It contains a capturing group, that will be passed into the callback here as the second parameter. The first parameter is the full match.\nHere is a little example that exposes the bug:\ngoog.string.html.htmlSanitize('<img src=\"https://test.com?a=45&amp;b=34\">', function(url){return url;});\nresults in\n<img src=\"https://test.com?a&#61;45b&#61;34\">.\nThe ampersand was deleted.\n. Also, I signed the CLA, but I am not sure how I can verify my consent. I will try again maybe.\n. @joeltine I force pushed, so it seems your original comment was deleted. But, I agree about the unused parameter.\n. ",
    "elwinarens": "We've also ran into the issue of not being able to efficiently set withCredentials for Xhr objects when using the XhrManager. It's currently possible by listening to the goog.net.EventType.READY on the XhrManager, but this means an additional overhead by calling xhrIo.setWithCredentials(true) every time an  goog.net.EventType.READY is dispatched.\nConsidering the current architecture and implementation of the XhrIoPool and the XhrManager, i think this PR is the most desirable solution, though ultimately it highlights the inability to control dependencies (via dependency injection). \n. ",
    "weiwl": "We can prove that the two functions below are equivalent.\njavascript\nfunction(str) {\n  var result = 0;\n  for (var i = 0; i < str.length; ++i) {\n    result = 31 * result + str.charCodeAt(i);\n    result |= 0;\n    if (result < 0) {\n      result += goog.string.HASHCODE_MAX_;\n    }\n  }\n  return result;\n};\njavascript\nfunction(str) {\n  var result = 0;\n  for (var i = 0; i < str.length; ++i) {\n    result = 31 * result + str.charCodeAt(i);\n    result |= 0;\n  }\n  if (result < 0) {\n    result += goog.string.HASHCODE_MAX_;\n  }\n  return result;\n};\nBut for chrome browser, the second function is slower than the first one.\nSee http://jsperf.com/goog-string-hashcode-vs-improved/2 for reference.\n. Yes, you are right. It is more simple. Thanks.\n. ",
    "fabalbon": "Hi Samuel,\nClosure's locale data is generated from CLDR (the industry standard locale data repository - http://cldr.unicode.org/) which uses pt_BR as the default locale for pt. We have to keep Closure consistent with CLDR therefore to change this you should submit a request directly to CLDR (http://cldr.unicode.org/index/bug-reports) and it will be automatically updated into Closure when CLDR is updated.\nRegards!\n. As joeltine said, Closure's locale data is generated from CLDR (the industry standard locale data repository - http://cldr.unicode.org/) which uses '.' as the grouping separator for the 'da' locale. We have to keep Closure consistent with CLDR therefore to change this you should submit a request directly to CLDR (http://cldr.unicode.org/index/bug-reports) and it will be automatically updated into Closure when CLDR is updated.\nRegards!\n. Closure's locale data is generated from CLDR (the industry standard locale data repository - http://cldr.unicode.org/). We have to keep Closure consistent with CLDR therefore to use yyyy for SHORT_DATE you should submit a request directly to CLDR (http://cldr.unicode.org/index/bug-reports) and it will be automatically updated into Closure when CLDR is updated.\nRegards!\n. Thanks for pointing this out. This was fixed internally and will be available on the next Closure release.\n. @joeltine currency.js is the only locale data file not being auto-generated. Still, we try be consistent with the data on CLDR.\n. Thanks for pointing out the bug in the XPF currency, we are updating it internally according to the data available on CLDR and it will be out on the next Closure release. Regarding EUR, it has a broader impact thus we won't update at this moment.\nWe strongly discourage the use of the APIs on currency.js to get the the currency sign\u2019s position, several of these functions have already been deprecated. This is because the position of the currency sign depends on the display locale, but the data on goog.i18n.currency.CurrencyInfo is based on the currency\u2019s default locale, which is a problem with currencies such as EUR which don't have a default locale.\nTo format currencies we recommend the use of goog.i18n.NumberFormat(goog.i18n.NumberFormat.Format.CURRENCY, \u201cEUR\") which uses locale-dependent data which is auto-generated from CLDR.\n. @joeltine We have closure/goog/date/relative.js, but it has minute precision. If I'm not mistaken, what @danielcompton is proposing is to add second precision to this API. Regarding backwards compatibility I think it might be a problem because users might be expecting minute precision so I wouldn't change the default behavior.\n. Hi Nick, for the moment we are not planning to make this data publicly available. We are planning to reimplement the NativeNames and LocalizedNames APIs which will require new locale data files which we are going to make available.\n. Closure locale data is obtained from CLDR using ICU. ICU ultimately takes this data from here in CLDR: common/supplemental/supplementalData.xml/weekData/firstDay\nEven though the \"ar\" locale doesn't have an explicit territory, in CLDR the implicit territory is \"EG\" for these types of calculation. And for the \"EG\" territory the first day of the week is Saturday. Please note that FIRSTDAYOFWEEK is meant to be the first day of the week as shown on a calendar page, not the first working day.\nCLDR is the industry standard repository for locale data and we keep Closure in sync with it. If there is any bugs or issues in CLDR data please file a bug here: http://cldr.unicode.org/index/bug-reports . After this bug is fixed this data will be incorporated in Closure on the next locale data update.. Please look at the reply here: https://github.com/google/closure-library/issues/780#issuecomment-267144177. This was fixed internally. It will be available on the next Closure release. Thanks!. This is a bug, thanks for reporting!. This bug was fixed internally and will be available in the next closure release.. Thanks for your pull request. #813 was fixed internally and will be available shortly.. ",
    "igrep": "I tried goog.array.bucket in my case, looks fine though a bit verbose.\njavascript\n    ( // <- parenthesis required when using desctructuring assignment like below.\n      { 'true': this.dones, 'false': this.notYets } = goog.array.bucket(schedules, (\n        /** KeepMeContributing.Worker.TimeOfDay */ timeOfDay\n      ) => {\n        return timeOfDay.millisecsAfter(now) <= 0;\n      })\n    );\nThanks for advising and reviewing! :+1: \nI'll close.\n. ",
    "pawelkrupinski": "Ignore it, I meant to put it in blockly (unless it makes sense here obv).\n. ",
    "plu83": "Thanks for the feedback, @shicks. I've added the additional return statements and squashed the commits into 26076c6.\n. Thanks for the information, @shicks and sorry for my newbie-ness. As you might have guessed, this was my first squashing. It's a great idea, particularly with large repositories like Closure Library.\n. ",
    "waitingcheung": "I have squashed my commits into a single one.\nI notice that many of my builds fail on particular browsers. I am aware that the compatibility of FF41 may be one of the causes, but sometimes they fail also on particular versions of IE. What will be possible causes for my failed builds?\nI have difficulties in understanding why my builds fail in the beginning because the file I changed does not seem to be related to the failed tests presented in the build reports. As I can test my code on only a single platform and I do not have access to the build reports in SauceLabs, I am interested in how certain commits or upgrade of certain browsers correlate to build failures.\n. I think it works this time. Thank you very much for your help.\n. I changed to private method and added jsdoc as suggested. I don't understand why the build fails on only firefox on linux, even though the code does not seem to be browser dependent.\n. Revised as suggested. Thank you.\n. ",
    "psam44": "I don't have the repository to make a PR. The fix is only two tiny copy-paste.\n. PR done. There is a Travis fail, but it isn't on my changes.\n. I signed the CLA\n. Superseded by https://github.com/google/closure-library/pull/584\n. CLA: yes, my primary google email and my github email are different.\nAdded the github account name, to see if it helps.\n. You're probably right, because of {!Element} of Document.prototype.createElement.\n. ",
    "bowbahdoe": "This issue should be closed, a PR was merged that fixed it as mentioned in #584. Its unclear to me if the new ES6 module support will be usable from outside the closure compiler. As of right now there is a way to use the closure library from node.js, but that relies on a bootstrap script which uses the 'fs' module, and so is not suited for regular bundling with alternative tools such as browserify and webpack. Is there a global polyfil that could make goog.require and good.provide parse correctly, or is there a way to \"convert\" the closure library on npm to use regular es6/commonjs modules?. You answered my question more or less. I was wondering how a person in the node ecosystem could use the closure library. Right now the package on npm is useable from node.js, but not from code compiled from the frontend using that ecosystem. I was wondering if this issue implied that the current system on nodejs for polyfilling goog.require and goog.provide would be updated so that it could be used on the frontend without the Google closure compiler. Based on your response, I gather that transpiling the closure library to commonjs (eliminating the need for the fs bootstrap) is something that is on the radar.. I signed it!. ",
    "rcfox": "Sorry, I'm not sure what you're asking.\n. I don't have a pull request for you; I'm just reporting a bug.\n. ",
    "andrejewski": "For anyone looking for a solution, see here: https://gist.github.com/andrejewski/3887f205fd834eea1b506a908db76e38. ",
    "kxpvcr": "I appreciate the chance to contribute ;)\n. ",
    "hochhaus": "Closure-library does not include the necessary plugins to compile a .proto file to .pb.js. Some third-party projects have written this code though. See the following projects for a starters:\nhttps://github.com/rethinkdb/protobuf-plugin-closure\nhttps://github.com/samegoal/protoclosure\n. I signed it!\n. @shicks @dferrara19 Absolutely, I will add a regression test. I think that doing so requires running such a test in strict mode (on browsers that support it). That made me start to wonder, if the goal is for closure-library to be strict mode compatible, why not run all unit tests in strict mode?\nWould a change running all tests in strict mode be considered or would you prefer an isolated test which only uses  IeMouseEventSequenceSimulator_ in strict mode?\nThanks for the guidance before I spend too much time on the wrong path.\n. @shicks @dferrara19 I added a regression test. However, it requires makeLeftMouseEvent_ to be run in strict mode. If you can think of cleaner way to write this test please let me know and I'll update the code.\nThanks for your help.\n. I squashed all of the changes into a single commit to ease reviewing/merging this change. At this point, I think it is ready for review. Please let me know if you have any suggestions for improvement and I will implement them promptly.\n. @shicks Thanks. The current test confirms that an ACTION event will be fired as the result of individual click MouseEvent. The reason this is necessary is because on a MouseEvent the {type,button} properties are read only. However, this is not true of the fake events sent from goog.testing.events.fireClickSequence(). Therefore, testIeMouseEventSequenceSimulator() completes successfully (even in strict mode). Since testIeMouseEventSequenceSimulatorStrictMode() uses a native MouseEvent it triggers the ES5 strict mode error.\nRE: running all tests in strict mode, I no longer think that is a good idea. As goog.testing.events.fireClickSequence() does not fire real MouseEvents doing so would miss many issues anyways.\n. @shicks Good point. I wanted to put the 'use strict'; in the test function but then strict mode only applies to that function (not the functions called by it). Therefore, you'll find the 'use strict'; in goog.ui.Control.IeMouseEventSequenceSimulator_.makeLeftMouseEvent_. This is ugly because that is not strictly testing code but I did not see another way to get that function to run in strict mode.\n. @shicks No worries, thanks for helping to move this forward.\nIn prod we run our entire application in strict mode ('use strict'; at the file level for each compiled module). As all functions are running in strict mode we ran into this problem. Per John Lenz on CLD, I think other Google apps are likely doing the same (but just not using goog.ui). Is doing this intended to be supported by closure-library?\n. @shicks Thanks for your work. I understand the pain of dealing with a change of this size to legacy code.\n. @shicks Thanks!\n. @joeltine If the internal test does not add enough coverage let me know and I'll add a test to this change. Thanks for having a look!\n. Thanks @joeltine \n. Per my understanding depswriter.py does not have a mode equivalent to calcdeps.py's --output_mode=list. This mode is especially helpful for closure compiler --module flag file counting. The deps.js file output written by depswriter.py would require extra post processing to determine the order in which the files should be compiled.\n. Thanks for your help. From the discussion in https://github.com/google/closure-compiler/issues/1474 I don't think a  work around currently exists. I would be very happy to be proven wrong though.\n. That is a good point, I understand not wanting to update deprecated utilities. Regrettably, at the moment I don't have the time to look into adding a mode to depswriter.py. I honestly think that the compiler itself may be a better place than depswriter.py for a long term solution.\nWhen I have more time I'll loop back and if no support exists in the compiler I'll look into adding the mode to depswriter.\nThanks for your help.\n. So I looked again and realized that closurebuilder.py does in fact have a --output_mode=list option (similar to the output in calcdeps.py). The problem is that, similar to the compiler manifest, the ordering of output dependencies is not well suited to module calculation. Therefore, when I get time to come back to this issue, the action item is to either (a) fix the output ordering of the compilers manifest or (b) fix the output ordering of closurebuilders --output_mode=list.\n. Thanks. I sent a PR fixing this issue.\n. Fixed by bee7888290515eaf239abff519da8841e55cd5c0.\n. ",
    "dockbiz": "Thank you.So useful library\n. ",
    "Squazz": "@joeltine thanks, it was also wrong there, and I have therefor filed a bug there: http://unicode.org/cldr/trac/ticket/9060\n@fabalbon thanks for the link for bug-reports :+1: \n. ",
    "Antonio-Laguna": "I signed it!\n. I signed it!\n. Sure thing @concavelenz will do.\n. I've just removed the returning from the check on GECKO as it doesn't seem to be necessary anymore and they should be all passing AFAIK. \n. Any news on this?\n. I may be wrong since this went on a long time ago in a galaxy far far away but I that GECKO check is removed so the test can be run against firefox (which was being excluded since it wouldn't work) since the fix is to make it work on Firefox, the test should be run against firefox too. Those are my two cents.\n. Fair enough!\n. Hey @Dominator008 that worked. Thanks a lot. Since goog.events.EventTarget isn't a Class I thought that couldn't be actually done but it seems to work and no need for the ugly .call(this), super() works just fine. \nClosing this.. Yep. Will try to get it nailed today.\n. ",
    "rzhw": "Ping, any updates on this?. ",
    "BradMclain": "I will put some time towards trying to reproduce in an isolated environment. This should confirm whether the problem lies in the application code or not.\n. Apologies this does appear to be our fault. We had added google analytics and forgotten to add an external.\nThanks for your help.\n. ",
    "Dmytro-K": "I signed it!\n. ",
    "marcjansen": "The CI failure stems from ./scripts/ci/compile_closure.sh failing. I doubt this is related to this PR. \n. I can do that. But this will have to wait some hours... currently not near a real computer\n. Travis is still unhappy:\n$ ./scripts/ci/check_code_format.sh\nERROR: Found formatting errors!\ndiff\n--- closure/goog/array/array_test.js    (before formatting)\n+++ closure/goog/array/array_test.js    (after formatting)\n@@ -1067,9 +1067,8 @@\n       '-3 should be found at index 10', 10,\n       goog.array.binarySearch(e, -3, revNumCompare));\n   pos = goog.array.binarySearch(e, 0, revNumCompare);\n-  assertTrue(\n-      '0 should be found at index 7 || 8 || 9',\n-      pos == 7 || pos == 8 || pos == 9);\n+  assertTrue('0 should be found at index 7 || 8 || 9',\n+             pos == 7 || pos == 8 || pos == 9);\nDo you want me to format this as suggested by the check_code_format.sh? Or is that probably not checking things according to the new format?\n. Ok, will do. Sorry this takes so long.\n. @joeltine @concavelenz I reformatted and rebased as suggested. CI build still errors, but this is again unrelated, I fear. \n. Hey @concavelenz & @joeltine, is there anything else you want me to do? Did I miss something?\n. No worries. Thanks for merging.\n. ",
    "clichedmoog": "Okay thank you.\n. Even this is a closed issue but I should inform that decimal separator in ko is a dot.\nI also commented in the angular.js repo. ",
    "gberaudo": "Travis is unhappy due to some errors caused by the compiler.\nWith an older compiler version it passes at my place.\nERROR - Cannot read: !**\\./node_modules**.js\n...\n12 error(s), 0 warning(s)\nThe command \"./scripts/ci/compile_closure.sh\" exited with 12.\n. I bisected the closure compiler and found the first failing commit to be\n62ca536d0a184a8852646e2bc2db178f700f5cfc Fix the bug that jscompiler does not respect relative order of --js to --zip inputs.\n. Thanks @Dominator008. Looking forward for the merging of your fix.\n. Thanks @joeltine and @Dominator008.\nI tested the pending PR https://github.com/google/closure-compiler/pull/1469 and it fixes the build.\n. @joeltine, @Dominator008, just restarted the build but it still fails on travis.\nThat is strange since on my machine, with the same version of the compiler, a call toscripts/ci/compile_closure.sh works fine. Any idea of what could be wrong?\n. Travis is passing now, thanks @joeltine.\n. ",
    "federkasten": "Sure!\n. I have added a unit test for this change.\n. I've done rebase and squash.\n. ",
    "bpilot": "Pull request is ready: https://github.com/google/closure-library/pull/663\nSorry for the delay, we were busy building new functionality with the Closure Library!\nAs an aside, what is the best resource to complement Closure learning besides Michael Bolin's book?\n. ",
    "angryagr": "could you resolve this issue?\nmy errors RROR in ./node_modules/google-closure-library/closure/goog/bootstrap/nodejs.js\nModule not found: Error: Can't resolve 'fs' in '/Users/gryn_alina/projects/registrationApp/node_modules/google-closure-library/closure/goog/bootstrap'\nERROR in ./node_modules/google-closure-library/closure/goog/bootstrap/nodejs.js\nModule not found: Error: Can't resolve 'path' in '/Users/gryn_alina/projects/registrationApp/node_modules/google-closure-library/closure/goog/bootstrap'\nERROR in ./node_modules/google-closure-library/closure/goog/promise/testsuiteadapter.js\nModule not found: Error: Can't resolve 'promises_aplus_tests' in '/Users/gryn_alina/projects/registrationApp/node_modules/google-closure-library/closure/goog/promise'\nERROR in ./node_modules/google-closure-library/closure/goog/bootstrap/nodejs.js\nModule not found: Error: Can't resolve 'vm' in '/Users/gryn_alina/projects/registrationApp/node_modules/google-closure-library/closure/goog/bootstrap'. ",
    "ruszki": "Yes, I've checked with version 2.7.11. It worked without problems.\n. ",
    "jart": "If you can't bring the old design back, then I highly recommend changing the old docs on Google Code so they 301 redirect to the new docs. This is because the old docs are very out of date, yet they still dominate in the Google search results.\n. - The menu being collapsed by default. Makes it easier to Ctrl+F\n- The shade of blue in the old docs was easier to read.\n- I found this:\ngoog.dom.flattenElement(element) \u21d2 Element | undefined\nMore readable than this: \nflattenElement(element)\n- I'm not feeling the underlines on some of the section tags\nDoes this new tool give you a choice of design?  I'd be happy to review them and give you my 2 cents :dancer: \nAnother example of really readable documentation is this: https://docs.python.org/2/library/datetime.html I think that the tool that makes that is sort of general purpose.\n. I would consider chipping in some 20% time to make Dossier's output look slightly more fabulous. But before doing that, I would like to have a better understanding of what was wrong with the old tool? Why did Closure Library choose to migrate to Dossier? Why is Dossier hosted under Jason's personal account rather than Google?\n. @jleyba That search functionality in the latest version seems to work really well. I like the material design. The only thing that might be problematic is a lot of clicks are required to find libraries when not using the search.\nIs there any chance you'd be interested in making a build rule contribution to the https://github.com/bazelbuild/rules_closure project, adding support for Dossier? I think the project could benefit greatly from your documentation generator.\n. @pcj Oh your documentation is quite beautiful. I would like it very much if Dossier produced output that looked more more similar to this.\n. ",
    "jleyba": "The closure API docs are several versions behind on dossier. Here's an example of what the latest version looks like. I'd gladly welcome contributions on the design front. For instance, I need to make the keyboard shortcuts more discoverable (/ focuses the search box, n toggles the nav menu)\nI do have an open issue (jleyba/js-dossier#18) for supporting custom templates.\n@shicks Dossier isn't a Google project - it has been cleared through the appropriate channels.\n. This was due to a bug in an earlier version of the doc generator. It should render correctly now:\nhttps://google.github.io/closure-library/api/goog.html#inherits\n. ",
    "pcj": "@jart Awhile back I wrote a custom closure compiler Document pass to teach myself the compiler.  Sample output is at https://developer.pubref.org/static/apidoc/global/closure/goog/ui/Component.html.  \nIt does not traverse the type system as faithfully as dossier, but IMHO is easier to grok.  At some point I'll probably work to incorporate the output with dossier, but you're welcome to refer to this output as an alternative rendering. \n. CLA signed.  Soul accepted by devil.\n. Will Retry\n. Looks like build is failing on master despite this change.  Any suggestions?\n. Hmm.  By gum you're right!  Thanks for the explanation.\n. Right, similar approach I'm using.  I feel like I've spent quite a bit on time on a routing library / routing bugs that I'd hope there would be a common library for it in the closure world. . Well if people are interested in such a library, here the one I'm using.  PRs welcome.\nhttps://github.com/stackb/ui.js\n. ",
    "ghosttie": "I don't see how my change could have made testExistingImage timeout\n. OK I only did it that way because Map seemed to use member functions rather than utility functions e.g. goog.array.forEach vs goog.structs.Map.prototype.forEach\n. https://github.com/google/closure-library/pull/733\n. I'm not sure I understand why the The Travis CI build failed\n. @mashedcode thanks, that was very helpful - I'll be more self-sufficient next time\n. I don't think \n\nFailed: Modal dialog present: The Acrobat DC PDF browser plug-in is missing.\n\nis my fault...\n. How about\n\nFailed: ERROR The test with session id c52b1bf454734499adc752c66df1edcd has already finished, and can't receive further commands.\n. Does it automatically retry or do I need to do something?\n. > closure/goog/net/streams/jsonstreamparser_test.html timed out after 45s!\n\nThis is less fun than I was expecting\n. Sorry, I do intend to do squash the commits and add a unit test\n. When I was writing the tests I realized it was working even without my changes.  highlightedIndex_ is set in goog.ui.Container.prototype.handleHighlightItem so it doesn't need to be set directly in setHighlightedIndex.  I can't think why I had the problem in the first place.\n. ",
    "ikabirov": "I signed it!\n. Traceback (most recent call last):\n  File \"C:\\projects\\libs\\closure\\closure\\bin\\build\\closurebuilder.py\", line 287, in <module>\n    main()\n  File \"C:\\projects\\libs\\closure\\closure\\bin\\build\\closurebuilder.py\", line 276, in main\n    compiler_flags=options.compiler_flags)\n  File \"...\\libs\\closure\\closure\\bin\\build\\jscompiler.py\", line 133, in Compile\n    return subprocess.check_output(args)\n  File \"C:\\Python27\\lib\\subprocess.py\", line 566, in check_output\n    process = Popen(stdout=PIPE, *popenargs, **kwargs)\n  File \"C:\\Python27\\lib\\subprocess.py\", line 710, in __init__\n    errread, errwrite)\n  File \"C:\\Python27\\lib\\subprocess.py\", line 958, in _execute_child\n    startupinfo)\nWindowsError: [Error 206] The filename or extension is too long\nPython fails to create process on big projects. Temp file on our projects can reach 100-150 KB\n. What happened with Travis CI build? \n. But it's ok for compiler. Maybe move \ngoog.defineClass.applyProperties_(cls.prototype, def);\nto wrappedCtr function before Object.seal(instance); to achieve the same behavior?\nvar wrappedCtr = function() {\n      // Don't seal an instance of a subclass when it calls the constructor of\n      // its super class as there is most likely still setup to do.\n      var instance = ctr.apply(this, arguments) || this;\n      instance[goog.UID_PROPERTY_] = instance[goog.UID_PROPERTY_];\n      goog.defineClass.applyProperties_(instance, def);\n      if (this.constructor === wrappedCtr) {\n        Object.seal(instance);\n      }\n      return instance;\n    };\n. Maybe you should use @suppress {deprecated}?. Fixed\n. ",
    "gilad-bendor": "```\nbody p { margin-bottom: 0cm; margin-top: 0pt; } \nDone - thanks\u00a0 :-)\nOn 22-Mar-16 23:04, Michael Zhou wrote:\nThis is something related to the Closure Compiler, not Closure\n    Library. Can you report to https://github.com/google/closure-compiler\n    instead? Thanks!\n  \u2014\n    You are receiving this because you authored the thread.\n    Reply to this email directly or view\n      it on GitHub\n```\n. ",
    "gurmukhp": "Thanks Joeltine, that was the problem!\n. ",
    "aharui": "I would be surprised if Google does not have experts in ECCN rules and regulations.  If you read up on ECCN, it seems like serious stuff.  Apache Software Foundation projects are expected to conform.  I would think Google would want its open source projects to conform as well.\n. ",
    "gmalartre": "Well I tried, the CLANG thingy seems to break on my comment, it does not specify anything to do.\n. I signed it!\n. ATM the bug is always triggered by a write operation of goog.net.XhrIo.withCredentials on the underlying XMLHtppRequest.withCredentials; change it to false or true or leave it alone and still the exception will get thrown by an unecessary write from goog.net.XhrIo. \nThe default value is false for the underlying XMLHttpRequest just avoiding the rewrite of XMLHttpRequest.withCredentials will not only avoid the error to get thrown, but will also avoid any side affect that could affect halting the Firefox XMLHttpRequest.open function containing the exception thrower. \nI would advise to keep it like I proposed but remain open to push a new commit with an additional try catch.\nExample of a successful synchronous call:\n//Never touch withCredentials\nvar test = new XMLHttpRequest();\ntest.open(\"GET\", \"http://localhost/rest/authentication/lastAuth/\", false);\n//Yeah no error thrown\nExample of what goog.net.XhrIo does:\nvar test = new XMLHttpRequest();\ntest.withCredentials = false; //Get set no matter what, the error is not thrown here\ntest.open(\"GET\", \"http://localhost/rest/authentication/lastAuth/\", false);\n// Firefox throw the following: Error: A parameter or an operation is not supported by the underlying object\n. @mashedcode should be ok now, thanks!. Travis CI build failed due to what a appear to be the protactor test The command \"travis_wait 30 ./scripts/ci/run_all_tests.sh\" exited with 1.. Is there an acceptable way to re-trigger the build? From what I've found on SO closing and re-opening the PR will trigger the build, but I doubt this is acceptable here.. Rebase worked fine, thank you!. I think I hallucinated removing two spaces there, based on the Travis-clang report.\nWill do the changes required asap.. ",
    "acousticguru": "Thank you much.\n. ",
    "tmccombs": "Thanks, I wasn't aware goog.base was deprecated. It isn't marked as such in the API documentation (http://google.github.io/closure-library/api/namespace_goog.html#base). \nI would like to use ES6 classes, but we still support browsers that don't support ES6 classes, and if we used ES6 we would only be able to debug these browser with compiled code, which makes debugging much more difficult.\n. ",
    "myjian": "I signed it!\n. ",
    "dkzd": "Yes, just noticed the menu on the top left corner with the contents. Not super obvious but working. Thanks.\n. ",
    "MarkusBordihn": "After several different combinations of @suppress, I have no idea why the following errors still showing up on Travis CI:\n```\n./closure/goog/graphics/vmlelement.js:120: ERROR - missing require: 'goog.graphics.VmlGraphics'\n  goog.graphics.VmlGraphics.toSizeCoord(height);\n\n  ^\n\n./closure/goog/graphics/vmlelement.js:278: ERROR - missing require: 'goog.graphics.VmlGraphics'\n  goog.graphics.VmlGraphics.toSizePx(height);\n\n  ^\n\n./closure/goog/graphics/vmlelement.js:426: ERROR - missing require: 'goog.graphics.VmlGraphics'\n  goog.graphics.VmlGraphics.toPosPx(height);\n\n  ^\n\n3 error(s), 0 warning(s)\n```\nI'm unable to reproduce these errors locally.\n. I had the case that getExpandIconElement(), getIcontElement(), ... returned no real element like an \u00a0  (which has not attribute or style).\n. ",
    "ducky427": "PR sent. #728 \n. ",
    "JdeH": "Wrong spot, thanks  & sorry...\n. ",
    "mashedcode": "@ghosttie well it's because if setHighlightedIndex(-1) is called the highlight should be removed. Obviously no child at the index -1 is found and this.highlightedIndex_ > -1 will always evaluate to false because of your change. Therefore you can't remove the current highlight anymore and the test fails.\nYou obviously only want to set the highlighted index to something > -1 if there's actually a child that will be highlighted anyway so that's another issue.\n. This patch is somewhat important even though the closure-library itself does not make use of es6  because unit tests without compilation in browsers that do not support es6  would fail if the closure-library would start to use es6.\nBut apart from that others will use es6 in their project and it's very likely that they use the build tool provided by the closure-library.\nThe regex provided by @redforks is obviously not fully extensive since we can make use of much more complicated destructuring assignments in es6 but IMHO an acceptable trade-off if you do not want to use a regex such as goog\\.require\\(\\s*[\\'\"](.+)[\\'\"]\\s*\\) (with no ^).\n. Did you double-check that the input element was actually written to the DOM?\nBecause I've just tried this and it works for me.\nUsually it's not written to the DOM if you attempt to load the script asynchronously.\nFurthermore I'd consider it best practice to provide those elements to goog.History.\n. ## Proof of bug existence\n```\n// ==ClosureCompiler==\n// @compilation_level ADVANCED_OPTIMIZATIONS\n// @output_file_name default.js\n// @use_closure_library true\n// ==/ClosureCompiler==\ngoog.module('dpx');\nconst dom = goog.require('goog.dom');\n// Obviously this throws a warning\nconst pixelRatio = dom.matchesPixelRatio_;\n// Because of the bug this will either evaluate to 0.75 or to 1\nconst dpx = pixelRatio(.75) || pixelRatio(1.5) || pixelRatio(2) || pixelRatio(3) || 1;\nalert(dpx);\n```\nCompile it!\nTry it!\n. @joeltine I've done that.\nI thought I was off pretty good with only three commits for the entire thing though.\nIt feels weird to squash an entire pull request into one commit since you could simply revert an entire merge too.\nAnyways all good :smile: \n. Please close this PR.\n. That's because you try to play with the sign bit which you shouldn't do in the first place.\nIn IEEE 754 0x8000000000000000 is represented as 9223372036854776000 which is the value that is just above the highest positive number that is representable by an 64 bit integer and the closure-library explicitly checks against the number.\nBut because 9223372036854776000 > 0x7FFFFFFFFFFFFFFF (9223372036854775807) it'll be converted to the highest positive number that is representable by an 64 bit integer because that's probably what the user wants.\nI don't think anyone would like to get a negative number back if they pass in a positive number.\nBut you seem to simply want to have the smallest 64 bit number without parsing from string which you can get from goog.math.Long.getMinValue() and you can always initialize form two 32 bit numbers to be clear about what you want: new goog.math.Long(0, -0x80000000)\n. I can see your thought process but even though those two calls look the same to you they're not the same. The string representation is much more accurate where's the representation after IEEE 754 lost accuracy and therefore they're not the same. Especially since you can use much higher numbers in IEEE 754 than you can use when only an 64 bit integer is available to you.\nSo when converting from string it's clear what you want where's when you initialize it from number it's not so clear and the decision made should benefit the user and the user most certainly won't expect a positive number turn negative in my opinion.\nYour example seems very contrived. I can not see an actual application in which you'd want that behavior. The only reason it becomes a negative number if you parse it from string is that there are not enough bits to represent this number and not because the user would like to have a negative number therefore your initial assumption that -9223372036854775808 == 0x8000000000000000 is incorrect. The expected value would be 9223372036854775808 but poorly it can't be represented.\nFurthermore by now it's considered bad practice in every language I can think of to calculate the maximum or minimum value by making use of this kind of overflow.\nThe value is instead usually provided by some constant.\nSo no IMHO this behavior is justified.\n. As far as I can tell from the source code it seems like this is intended functionality.\n@rpelizzi ?\n. I don't understand why a user would pick a different timezone than set on his device. I'd argue that the user should change the timezone on his device if it's incorrect.\nThere obviously might be a permission issue with setting the timezone on the device but in that case the issue is probably greater because if the timezone on the device is incorrect how can one be sure that the time is correct.\n. @Joffrey example and more detailed explanation please!. I'd love to see you write a good commit message! Just in case you want to do me a favor.. In IE8 and earlier, empty-string matches are ignored by .split(RexExp). Therefore getParts_ does not return the empty cookie in the first place and the test fails in IE8.\nWe could:\n\nIgnore empty cookies in general.\nFix getParts_ for lte IE8 to support empty cookies.\n\nI'd prefer option one because the best use case for empty cookies that comes into my mind does not justify their existence if they're not supported by everyone.. @shicks I've already explained why it fails #788 ie8 comment.. @shicks no the suggestion of option 1 was to simply if (part === '') continue;.. I assume that you talk about using the closure library in a project that uses TypeScript and for this you'd like to have this TypeScript definition file so that your code completion tool knows what type parameters are and functions return.\nIn that case:\n\n\nI don't get why JSDoc is too verbose since you don't have to write any JSDoc. Furthermore I don't think JSDoc is too verbose since most of it is just the description of each parameter.\n\n\nType checking would be handled by TypeScript if you would call a function from the closure library. That would be the case for your project I guess.\n\n\nI don't know this Intellisense code completion tool but my guess would be that Intellisense supports TypeScript and not the other way around. You can probably write an extension for Intellisense so that it supports JSDoc if you wish.\n\n\nYou can write one if you need one and maybe even make a PR.\nIt doesn't seem useful to anyone who doesn't write a project in TypeScript and would like to use the closure compiler.\nYou could probably even write a tool that generates one. Have fun!. Na you can simplify too:\n```\n// ==ClosureCompiler==\n// @compilation_level ADVANCED_OPTIMIZATIONS\n// @output_file_name default.js\n// @use_closure_library true\n// ==/ClosureCompiler==\ngoog.module('foo');\nconst StringBuffer = goog.require('goog.string.StringBuffer');\n/*\n * Print the provided buffer.\n * @param {!StringBuffer} buffer\n /\nexports.printBuffer = function(buffer) {\n  console.log(buffer.toString());\n};\nexports.printBuffer(new StringBuffer('foo', 'bar'));\nexports.printBuffer(1);  // This will throw a warning.\n```\nThe fully qualified name is used so much in the closure library because historically you'd have to do it that way. But in any new code you write there's no reason to do so.\nAs far as I understand writing a TypeScript definition file is all about knowing the types and you know them just by looking at the annotations. You don't need to know the codebase for that.. For further reference note that there's teppeis/closure-library.d.ts generated by teppeis/closure-ts.. Please elaborate how and what behavior is different.. For keypress events you should use the charCode property of a goog.events.BrowserEvent instance instead.. Event.timeStamp is not part of the patched cross browser event at the moment.\nIf you really need this property you could either access it via the private _event property: .event_['timeStamp'] but this will obviously throw a JSC_BAD_PRIVATE_PROPERTY_ACCESS warning if properly annotated and is generally speaking bad practice.\nOr you could add it yourself and create a PR. But I don't think that there're too many use cases for this in production code.. I don't like this.\nWhy can't you just set the factory via goog.net.XmlHttp.setGlobalFactory or use the non-static version of send?. You need to squash your commits.\nI don't think it makes much difference.\nYes SHA-1 is not considered secure.. #803. @Yannic can you provide information on how to reproduce these errors?. What's wrong with document.title?. Great that you look at the source code and make comments.\nBut it would be better if you'd figure out what commit actually introduced HTML5 tags and from there on you could go figure out why it's missing.\nYou could then open a PR and fix this stating why this was missing and why you need it and also add all other tag names that are missing while you're at it.\nFor example the HTML5 tag names where added to this project nearly five years ago in 03451dec299109612bf33376809ef4edca2a6883 and they were taken from the HTML5 draft specification that is linked at tagname.js#L22. In that draft the main tag was not proposed yet therefore it was not added back then.\nYou're welcome to open a PR and add tag names according to the current specification.\nI would be very astonished if one of the developers who maintain this project as part of their job would look into it in that much detail based on a single sentence you drop in an issue backed up by no research. So please try to do some research on your own.. @b-strauss @binarykitchen and everyone else sorry for my toxic behavior. @paulcapron thanks for taking care of this.. If you rebase your commit without changing anything and push force again it should trigger a new Travis build.. Feel free to complete what has began in #739.. I added a comment and rebased.\nNote that the previous author knew that the order would be important too.\n. Use clang-format. These three lines fit on one line now.\n. It seems like the use of the deprecated keyIdentifier property is justified because KeyboardEvent.key is not supported in Safari.\nPlease explain why you think that this is an issue. I'm pretty sure that for Chrome 54 (which you refereed to) keyCode (used earlier in the code) will work just fine.\nReference: KeyboardEvent.keyIdentifier, KeyboardEvent.key\n. Add variable name and capitalize first word in sentence and end sentence with period.\n. I'd love to see you use goog.isNull.\n. Use functionNamesLikeThis.\nThis is no exception. See goog.ui.Tooltip.prototype.getHideDelayMs.\n. A sentence should end with a period.\n. Consider that it might be worth to reduce the amount of redundant code at this point since this is the second time you do all of this and it's pretty clear that in future you'll almost always have to do the same thing to take the timezone offset into consideration.\nThis would also fix the issue of having declared but not assigned variables.\n. Simply use Date instead of goog.date.UtcDateTime  because you don't use any of the features that goog.date.UtcDateTime provides to you and when goog.ui.DatePicker.prototype.setDate will be called it'll build a new goog.date.Date anyways and furthermore it does already accept a Date too.\nAlso since goog.date.Date mimics Date this won't be an issue in goog.ui.DatePicker.prototype.redrawCalendarGrid_ either.\nThe only reason you can't use goog.date.Date directly is that it strips the time information.\n. s/ Date/ date/ maybe?\n. This may be null so it should be @type {?number}.\n. Please format JavaScript with clang-format.. I'd prefer the ternary operator instead of the if to avoid the uninitialized variable. See 5.1.3 Declared when needed, initialized as soon as possible or Deferred initialization.. I'd prefer the ternary operator instead of the if to avoid the uninitialized variable. See 5.1.3 Declared when needed, initialized as soon as possible or Deferred initialization.. In my opinion null fits better than undefined in this case.. Please use 5.1.2 One variable per declaration even though the closure-library seems to conform to the old JavaScript style guide.. I'd prefer null instead of undefined see also a call to goog.net.XhrIo.send.. Missing message.. Why does this need to be tested again if it was already tested in testStaticSend. It seems to me that most of the tests here are not affected by the custom factory.. This should be an if statement since the result is not used.. Complete sentences should use appropriate capitalization and punctuation.. Complete sentences should use appropriate capitalization.. Your clang-format seems to be off. See also CI. Read formatting .js with clang-format again. In other words make sure you use an up-to-date clang-format version and the Google coding style.. The use of goog.net.XmlHttp is illegal here since this is only the mock implementation of goog.net.XhrIo.\nHistorically it was the case that goog.net.XmlHttp used to be the same as MockXmlHttp in goog.net.XhrIoTest today.\nProbably MockXmlHttp should be moved somewhere where goog.testing.net.XhrIoTest can use it too but since goog.net.XmlHttp is not globally mangled by the MockXmlHttp alias anymore this is all incorrect now and you either want to remove the use of goog.net.XmlHttp(); or refactor as mentioned above.\n. The comment above applies here. By the way this seems to be the only case where goog.net.XmlHttp is called in this module and createXhr does not seem to be called ever by anyone than yourself.. @code-4-fun Ohh right. The closure-library seems to still use 3.7.1 at the moment and yes you probably do want to revert the formatting of the unchanged parts of the code anyways.\n@joeltine would you like to bump up the clang format version?\nNote: This formatting change was included in the clang release 3.8.0 but I do have trouble finding the commit that introduced this change in clang-format. (Hopefully this change was intentional.). I'd assume that  @shicks meant that he'd prefer: int(x or 0) which will not throw a TypeError since no base was given. I did like your previous solution too, except for the unnecessary negation.. Why does it need to be hosted in the fork of @shicks?. Hopefully it does! Thanks for working on this. It really hurts to see so many tests fail because of these.. Seems more like personal preference to me.. You don't want to do this. The whole reason why there's BROWSER_KNOWN_ is that if the browser is known the call (in this case to goog.labs.userAgent.browser.isOpera) does not have to be made.\nWith this modification it would be made if the browser is known but it's not opera.. ES6 is not used in this library at the moment since this would make it impossible to test against older browsers without compiling and compiling the test cases seems to be an issue.. If you want to check against null use goog.isNull. Also 'platform' in nav introduces a bug since the key might exist even though the value is undefined. Also you can't use in on null and nav might be null.. The cast will not actually make it a string if the value is undefined because that's not what closure-compiler casts do.\nAlso you want to use nav here since you renamed the variable.. Revert this line change and squash the commits.\nAlso make sure to use the imperative mood in the subject line of the final commit message.. @gmalartre you are looking at the wrong line\n Before you squashed you had one commit that added two spaces and one commit that removed the two spaces you added.\nIn this change you simply removed the new line in the end of the file.. This line should not be changed. (You were looking at this line instead.). ",
    "redforks": "Well, the continuous-integration test failed is not my commit fault. How do I re-run the check?\n. ",
    "xcthulhu": "I found the original bug with a more elaborate test involving modular square roots:\nhttps://github.com/Sepia-Officinalis/secp256k1/blob/master/test/secp256k1/math_test.cljs#L22\n@gfredericks We talked out of band about using this test, should I implement it here?\nThe idea would be to implement modular square root, pick a bunch of (potentially large) primes and check for various numbers that:\n(\u221ax mod p)\u00b2 mod p = x mod p\n. Similarly, modular multiplicative inverse is a good way of testing both multiplication and division algorithms are implemented - these would be sort of math integration tests but they are strong validations that everything is implemented properly.\n. \ud83d\udc4d Good catch.\n. ",
    "tmcw": "Sure - for the purposes of comparison, assume that this is the @extends tag, which usejsdoc documents as an alias. I'll update that in the example in this ticket.\n. Thanks @myphysicslab - I'll refer to dossier for understanding closure-library's annotations.\n. ",
    "danielcompton": "\nIf I'm not mistaken, what @danielcompton is proposing is to add second precision to this API.\n\nYep, that's correct.\n\nRegarding backwards compatibility I think it might be a problem because users might be expecting minute precision so I wouldn't change the default behavior.\n\nI can see two possibilities to preserve backwards compatibility:\n1. Provide an extra parameter to goog.date.relative{format, formatDay, formatPast, ...}, as to be consistent, all of the relative formatters should be able to return the same format.\n2. Make setTimeDeltaFormatter a publicly usable function and let users override it. However this doesn't feel like a very good approach.\n3. Add another function to toggle if relative date formats include seconds.\nI'm happy to put together a PR with some guidance on which option (or another) would be preferred. Not sure if I'm in love with any of the options. Instantiating and using a formatter feels like a better option. There's a comment from 2013 suggesting that this be moved to goog.i18n.DateTimeFormat once a new version of CLDR comes out.\n. ",
    "AlesJiranek": "Of course, thank you, there were wrong build paths in my project, test files were not excluded, thank you\n. ",
    "afathman": "I signed the agreement! \ud83d\udc4d \n. I believe the CI failure was due to master being broken, could you please re-run CI when master is green again?\n. ",
    "KamranAsif": "I signed it!\n. We are using a modified closure-loader for our unit tests using intern. We had to add certain hacks to export globals such as asserts, but since this function isn't exported we couldn't grab it in the global scope.\nI agree that the private usage is pretty bad, however it depends on _trueTypeOf which is a super long function that would also have to be copied over. \nAny ideas for a better approach?\n. Awesome, thanks for the clarification! \nI was using arrays but forgot to wrap it in my example.\nThe documentation for onlyAllowAttributes looks like it didn't esacpe the asterik, so it reads: \n\nThe tagName can be \"\", which means all tags\n\nIn hindsight, I should have double checked the original annotation because it seems a little suspicious. \n. ",
    "larest": "ok, but I think that I will get same result for fromString(\"0x8000000000000000\",16) and fromNumber(0x8000000000000000)?\n. ",
    "rpelizzi": "The argument to both onlyAllowAttributes call is malformed. The method takes an array of {tagName, attributeName, policy} objects, so in your case it would be:\nsanitizer.onlyAllowAttributes([{tagName: 'a', attributeName: 'href'}])\nAlso the format to register the tag to any handler is'*', not '':\nsanitizer.onlyAllowAttributes([{tagName: '*', attributeName: 'href'}])\nNote that the second call does not do anything -- whatever attribute handler you provide with your call (in your case, allow all) is chained to the existing one, so that the policy for the handler can only be restricted further, and in your case no restriction happens.\nThe reason why you can define a handler for '', 'HREF' and not for 'a', 'HREF' is that the original handler for HREF is defined on '', not on 'a', and is further refined in the builder's build method to sanitize the url for XSS attacks. Currently you can only define a handler over an existing one, and we don't pipe 'a','href' over to the default '*','href' policy.\nBy design, the builder in htmlsanitizer.js does not allow specifying unsafe configurations (if you did not pipe the new policy with the existing one, you could override a safe policy with an unsafe one). If you need to loosen the default policy, look into unsafe.js, which adds builder methods to do exactly that. The capabilities of the unsafe module are still pretty limited, I am working on extending it. Stay tuned for (breaking!) changes.\n. ",
    "austinfathman": "I submitted!\n. I authored this commit/ afathman is my personal account\n. @mashedcode, thanks for looking over my PR. I'll look into re-generating deps.js in the morning as well as getting some test cases setup, however I've addressed the rest of your line comments. \n. Made a quick modification: changed the offset from hours to minutes to avoid using decimal numbers / match Javascript's internal Date.getTimezoneOffset and popular timezone libraries (eg moment-timezone.js).\n. @mash, you're exactly right about opt_date also needing to be handled if it's null, as it would display the wrong date if it was not set and Timezone offset was. I'll address the rest of your CR comments tomorrow/monday.\n. Yea, I hate redundant code too. I'll abstract this out to a function and add it in my next commit.\n. Cool function, will use from now on!\n. Done, thanks!\n. Good catch, thanks\n. Added a period to all of the sentences.\n. Thanks, fixed\n. fixed\n. ",
    "svieira": "@mashedcode - the reason we need this is because we're not using the device's date and time but rather the user's preferred time zone (which might not be the same timezone as the time zone that they are currently in / their device is set to).\n. ",
    "c-dy": "This is in fact documented in XhrManager.send:\n\nNote also that requests of equal priority are sent in an implementation specific order - to get FIFO queue semantics use a monotonically increasing priority for successive requests.\n. Done, thanks!. Agreed, thank you.. \n",
    "drauggres": "I signed it!. ",
    "keghani": "Thanks for the explanation!\nassertObjectEquals does what I need so I'll use it for now.. Thanks @joeltine! I just realized the deprecated method is part of this project (d'oh) so sent a PR.. ",
    "Joffrey": "The closure compiler has a weird behavior with the 0 value for an enum {number}.. ",
    "rshamyan": "I signed it!. @mashedcode, commit message has generated by github. I rewrote it. ",
    "ayusun": "Hi,\nThanks for the comments.\n1) Consider the scenario, you are using closure library to write a web app, in one of the function parameter you have passed a parameter, say list of project, but the whole qualified namespace would be xxx.yyy.zzz.aaa.bbb.project. So our param annotation would be \n@param {Array.<xxx.yyy.zzz.aaa.bbb.project>}\nusing typescript it would be something like\nimport {Project} from xxx.yyy.zzz.aaa.bbb and just use \nfunction(param:project){} and you are good to go and if there are multiple module, we wouldn't need to write so much packages\nI just started using closure, so probably it will take me some time(probably a lot), so if some of the older contributors who knows codebase better will probably make it sooner. So, if they probably see it and decide it to be part of next release, probably will make the library a lot easier to use.. ",
    "CoreyCole": "There are also type definitions in this fork of DefinitelyTyped fivetran/DefinitelyTyped.. Note: There is a @types scoped package for google-closure-compiler. It looks like the author of one of the definitions files has an npm package for using types here with slightly awkward usage:\njavascript\n// Import index.ts to load type information of Closure Library.\nimport closure = require('./node_modules/closure-library.ts/index');\n// Call register() to enable `goog.requrie()`.\nclosure.register();\n// Then `googl.require` returns the namespace!\nvar Queue = goog.require('goog.structs.Queue');\n// Type information of Closure Library is available in TypeScript.\nvar q = new Queue<number>();. ",
    "dimvar": "Filed https://github.com/google/closure-compiler/issues/2249. ",
    "manoj-compro": "I am using this sample code but in returns different values in Chrome and Firefox as following\nIf user press ENTER chrome returns 13 and Firefox return 0 as Firefox does not support this property but I think this should be handled by library.\n```\nthis.headerElement = document.getElementById(\"containerParent\")\ngoog.events.listen(this.headerElement, goog.events.EventType.KEYPRESS,\n    this.parentHandler, false, this);\ntutorial.notepad.Note.prototype.parentHandler = function (e) {\n console.log(event.keyCode)\n};\n``. Thanks @mashedcode \nI faced one more minor issue today as:\nchecked \"timeStamp\" property for click and keypress events and got \"undefined\" as result.\nalso checked withgoog.events.BrowserEvent` instance\nIs there any special handling for this also as i am new to google closure library.\n. https://developer.mozilla.org/en-US/docs/Web/API/Event/timeStamp \nhttps://googlechrome.github.io/samples/event-timestamp/. ",
    "code-4-fun": "I signed it!. I have also included committer email id to the agreement.. Hi @mashedcode, I would like to use XhrIO.send to post some data to my API's. However, I think it will be cool, to have the ability to use XmlHttpFactory as an option. This way, developers can avoid maintaining global factory instance. It will also be useful when one wants to use static send method for a short lived API call and has the ability to use his / her own implementation of XmlHttpRequest. Please let me know if this makes sense... :). fixed. This condition is not required as the argument for constructor itself is optional. Removed if...else block.. fixed. fixed.. fixed. fixed. fixed. removed these repeated test scenarios. done. done. done. done. fixed. This condition is not required as the argument for constructor itself is optional. Removed if...else block.. I am using clang-format version 4.0.0 and also confirmed that I use style=Google flag while formatting. When I execute clang-format -i -style=Google foo.js bar.js for the first time before commit, it did reformat the complete file. I think, I should have used the git diff*** variant of the command instead.. yeah, I also realised, creating an XmlHttp instance in this mock is quite un-necessary. So, now we simply return and empty object. I think that makes sense.. ",
    "MarcusSorealheis": "I signed it!. @mashedcode I will squash them. SHA-1 is only useful as a content identifier, which is its purpose on git. I think we should not use it for any other purpose.. ",
    "Yannic": "The errors I'm seeing are\n```\nREDACTED/closure-library/closure/goog/useragent/useragent.js:108: ERROR - could not determine the type of this expression\n  return goog.global['navigator'] || null;\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nREDACTED/closure-library/closure/goog/useragent/useragent.js:211: ERROR - could not determine the type of this expression\n  return navigator && navigator.platform || '';\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nREDACTED/closure-library/closure/goog/useragent/useragent.js:211: ERROR - could not determine the type of this expression\n  return navigator && navigator.platform || '';\n                      ^^^^^^^^^^^^^^^^^^\nREDACTED/closure-library/closure/goog/useragent/useragent.js:339: ERROR - could not determine the type of this expression\n      goog.string.contains(navigator['appVersion'] || '', 'X11');\n                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nREDACTED/closure-library/closure/goog/useragent/useragent.js:410: ERROR - could not determine the type of this expression\n    version = arr ? arr[1] : '';\n    ^^^^^^^\nREDACTED/closure-library/closure/goog/useragent/useragent.js:410: ERROR - could not determine the type of this expression\n    version = arr ? arr[1] : '';\n              ^^^^^^^^^^^^^^^^^\nREDACTED/closure-library/closure/goog/useragent/useragent.js:420: ERROR - could not determine the type of this expression\n    if (docMode != null && docMode > parseFloat(version)) {\n                                                ^^^^^^^\nREDACTED/build/closure-library/closure/goog/useragent/useragent.js:425: ERROR - could not determine the type of this expression\n  return version;\n         ^^^^^^^\nREDACTED/closure-library/closure/goog/useragent/useragent.js:467: ERROR - could not determine the type of this expression\n  return doc ? doc['documentMode'] : undefined;\n         ^^^\nREDACTED/closure-library/closure/goog/useragent/useragent.js:467: ERROR - could not determine the type of this expression\n  return doc ? doc['documentMode'] : undefined;\n               ^^^\nREDACTED/closure-library/closure/goog/useragent/useragent.js:520: ERROR - could not determine the type of this expression\n  return goog.userAgent.ASSUME_ANY_VERSION ||\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nREDACTED/closure-library/closure/goog/useragent/useragent.js:521: ERROR - could not determine the type of this expression\n      goog.reflect.cache(\n      ^^^^^^^^^^^^^^^^^^^\nREDACTED/closure-library/closure/goog/useragent/useragent.js:571: ERROR - could not determine the type of this expression\ngoog.userAgent.DOCUMENT_MODE = (function() {\n                               ^^^^^^^^^^^^^\nREDACTED/closure-library/closure/goog/useragent/useragent.js:574: ERROR - could not determine the type of this expression\n  if (!doc || !goog.userAgent.IE) {\n       ^^^\nREDACTED/closure-library/closure/goog/useragent/useragent.js:577: ERROR - could not determine the type of this expression\n  return mode || (doc['compatMode'] == 'CSS1Compat' ?\n                  ^^^\n`. I enabledreportUnknownTypesto see if there are unknown types in my code and got about 900 errors in closure-library.. The compiler seems to have a problem determining the type ofgoog.global['navigator'] || null. I also don't see whynavigatorwould ever beundefinedexcept if someone set it toundefined`, but this might cause problems in both versions.. You're right, I didn't see that.. ",
    "JARWATI": "Pada tanggal 11 Mar 2017 02.39, \"Yannic Bonenberger\" \nnotifications@github.com menulis:\nAdd documentation\nYou can view, comment on, or merge this pull request online at:\nhttps://github.com/google/closure-library/pull/805\nCommit Summary\n\ngoog.userAgent\n\nFile Changes\n\nM closure/goog/useragent/useragent.js\n   https://github.com/google/closure-library/pull/805/files#diff-0 (72)\n\nPatch Links:\n\nhttps://github.com/google/closure-library/pull/805.patch\nhttps://github.com/google/closure-library/pull/805.diff\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/closure-library/pull/805, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AY-ovfRhnOXT3rrVanhtHWdljMDGn5yYks5rkZjrgaJpZM4MZuO2\n.\n. Pada tanggal 15 Mar 2017 10.52, \"Michael Heuberger\" \nnotifications@github.com menulis:\nah, right :)\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/closure-library/issues/806#issuecomment-286625851,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AY-ovR17l2QJn4pUC4djEGY0HNENsBLUks5rl1JTgaJpZM4MdZA_\n.\n. ",
    "binarykitchen": "ah, right :). ",
    "vobruba-martin": "Forced Travis rebuild. /cc @brad4d . Forced Travis rebuild. ",
    "martinklepsch": "js\n/**\n * First day of week. 0 = Mon, 6 = Sun.\n * @type {number}\n * @private\n */\ngoog.date.Date.prototype.firstDayOfWeek_ =\n    goog.i18n.DateTimeSymbols.FIRSTDAYOFWEEK;\nGiven this implementation of firstDayOfWeek_ it becomes even more troubling because the pattern used in the tests (as below) is effectless on what's regarded as first day of the week.\njs\ngoog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_en_ISO;\n. ",
    "yegortimoshenko": "Signed.. ",
    "dankurka": "We have an internal CL that removes the deprecation and updates some other things. I'll take care of landing this and making sure it hits OS soon.. ",
    "lararennie": "While that is true, he deprecated it without giving an alternative so it's not very simple to do that. In the meantime, this is breaking compilation, so as a short-term fix, rolling back the deprecation seems reasonable?. ",
    "thedavidmeister": "uh, it's just the example i had on hand, and i haven't done much JS lately sorry >.<\nThe syntax is just interop so should be nearly 1:1 with JS.\nhttp://www.spacjer.com/blog/2014/09/12/clojurescript-javascript-interop/\nI don't have the generated output but if i translate by hand it should look something like this:\nMonitoring code:\nvar history = new History();\ngoog.events.listen(history, goog.History.EventType.NAVIGATE, function(e) { console.log(e.token); });\nCase A:\nwindow.location.hash = \"foo\"; // \"\" is logged\nconsole.log(window.location.hash); // \"foo\" is logged\nCase B:\nhistory.setToken(\"foo\"); // \"foo\" is logged\nconsole.log(window.location.hash); // \"foo\" is logged. The point is that the callback function in the monitoring code, for the NAVIGATE event, sometimes sees an empty string instead of \"foo\", on the token property of the event.\nBased on the tests I wrote, this seems to be reproducible, and dependant on whether the location hash is set directly in vanilla JS or via the setToken method.\nImmediately after the event, the value of window.location.hash is identical in both cases, it's just a matter of what is available to the event callback.. ok, there's a PR up @shicks \nI'm seeing this failing in the tests but not sure how to resolve:\n0.01s$ ./scripts/ci/lint_pull_request.sh\n+java -jar ../closure-compiler/target/closure-compiler-linter-1.0-SNAPSHOT.jar closure/goog/dom/forms.js\nError: Unable to access jarfile ../closure-compiler/target/closure-compiler-linter-1.0-SNAPSHOT.jar\nAlso, soz that there's a lot of noise in the commits because I didn't realise that the tests were all repeated in different browsers and the behaviour of goog.dom.forms.getValue() is inconsistent in IE9 for meter elements that have no value set yet (it returns null while other browser return whatever min is set to).. I signed the CLA. why would you avoid using random in tests? if anything min and max should be randomised too.. maybe it is an issue, i can fix that up. ok. i can change this.\nthe double indenting is just how this was already done in setValue.. the tests don't seem to be running in IE8 on Travis from what i can tell in the logs.\nhttps://travis-ci.org/google/closure-library/builds/247947020?utm_source=github_status&utm_medium=notification\nI'm seeing chrome, ff, ie9 and ie11\nI don't have a copy of ie8 handy, and tbh i'm not even sure how to run the tests for closure locally.\nI'm not sure how to reproduce the failure somewhere that i can see, and then fix it. Is this something you could help with @shicks ?. @shicks ok i think i've done as much as i can for this PR, let me know how you go. @shicks yay :). ",
    "jplaisted": "Things would be more asynchronous but not necessarily dynamic. I don't think we really want to support dynamic loading post document load. Even with a new debug loader for ES6 modules you'd still have to hack things. We can't resolve relative paths post script evaluation. So you'd have to use absolute paths or symbols/namespaces. Later is fine but the former breaks the conventions we're adding (granted azizzaeny is doing in his example, so maybe users are fine with it, but it'd be confusing, imo). Also the debug loader doesn't get loaded in compiled or bundled environments, meaning you can't dynamic load there.\nBack over to @shicks to decide if this something we want to support in the future. But the new debug loader I'm writing for ES6 modules will not add this; we'd have to address the above concerns and then probably some more.. Compiler tracking issue is here. https://github.com/google/closure-compiler/issues/2658. I'm not sure what you're asking here. Are you worried about the Closure library moving to ES6 modules and how that will work with node.js? This bug isn't about moving Closure library to ES6 modules, just adding support for people that wish to use ES6 modules in their own library that depends Closure. The former is further off than the latter due to compatibility issues, both internally and with node.\nSo yes if someone writes a Javascript library using ES6 modules and Closure it won't be able to be loaded by node without some kind of transformation. But that's not really on us.\nOdds are our node solution will probably end up being that we transform to CommonJS before making our npm.\nAlso per some discussion internally and in the compiler issue we're thinking of transpiling ES6 modules to some $jscomp.module instead, which will be pollyfiled. They'll act similarly to goog.module but without the dependency on the Closure library. Of course in a full compile these won't exist (they'll be transformed again), only in bundles and per file transpilation.\nSo the above statement:\n\nThe above two bullets combine so that when whitespace bundling mixed Closure / ES6 module code only ES6 modules need to be lightly transpiled to goog modules. Imported paths will become goog.require'd paths.\n\nIs incorrect and should now be:\n\nThe above two bullets combine so that when whitespace bundling ES6 module code ES6 modules need to be lightly transpiled to $jscomp.moduels. Imported paths will become $jscomp.import'd paths.\n\nApologies for not updating this issue, but I did update the compiler issue and the document. Though I think this is unrelated to your question.. What issues are you getting? Closure Library doesn't use ES6 modules yet, I assume it is your code?\nbase.js should support ES6 modules today (as of d786e236e303707ddd49b697480935cf274100ee), along with the compiler. However some of the tools aren't update (like closurebuilder.py and depswriter.py).. I'd ask @ChadKillingsworth about how to use Closure Library + ES6 modules + Browserify, I think he's done a bit of work with that. Though I could be wrong.. blockly_compressed contains Closure's base.js already if you look at it, it defines goog. It contains some of blockly (not sure what pieces) and its dependencies, including parts of Closure. I don't know why goog isn't defined but I'm not super familiar with Browserify.\nI'd also maybe ping the blockly folks and see what their recommended workflow is. I think in your instance since you want to use Closure too you shouldn't include their precompiled / compressed files. You should include their raw sources you need. That way Closure itself is only loaded once.\nI don't think the work done for and todo with this issue will help you at all if you're using Browserify.\nSpeaking of which reading @bowbahdoe 's older comments now make more sense to me now. I was perhaps mislead in my \"CommonJS like\" statements. I was just discussing the underlying implementation details, and they aren't actually CommonJS modules - just basded on them. And this issue has nothing to do with Closure Library itself transforming to CommonJS or anything like that. This bug is / was all about changing the code loader in base.js to load ES6 modules, the transpiler in transpile.js to be able to handle ES6 modules, and for some interop via goog.require. And the design does require loading through base.js or the Closure Compiler and sadly is not (currently) compatible with Browserify or Webpack or the like. You'll have to go through our workflows for now, this issue isn't about adding that support, though it'd be nice to.\nThis bug is not about moving Closure Library to ES6 modules, which would be nice. Adding the support described above is a prerequisite to an incremental migration. There's a lot of other blockers, however, and I personally think a migration very far off, if ever.\ntl;dr this issue is about adding ES6 support to the Closure Debug Loader and Compiler, sorry for any confusion around that. It is not about adding support outside of that, e.g. to Browserify.. It isn't possible to wrap ES6 modules. import and export statements must be at the top level of a module. We transform them to a CommonJS-like module if we need to (e.g. for a bundle or transpilation). Closure's code loader in closure/goog/base.js will attempt to load them untransformed, if possible.\nI'll admit I don't know much about Karma. Does it create a bundle, does it try to load files \"raw\" (in a <script src=\"filename.js></script> tag), or does it let the Closure code loader in closure/goog/base.js load the code (when using the karma-closure plugin)? Depending on the answer to this how to handle ES6 module <=> Closure interop will be different.\nAlso fwiw Karma itself does not support ES6 modules. See https://github.com/karma-runner/karma/issues/2903. I'm guessing this will complicate things.\nTo answer this specific question:\n\nLooking at the design doc, I'm not exactly sure of the recommended way to do runtime transpilation for ES6 modules, directly in the browser, without any bundling phase\n\nIf you can go through Closure's code loader it will do the runtime transpilation for you, if needed. \"If needed\" currently means that 'noModule' in document.createElement('script') returns false.. >Simply put, once I get the contents of an ES6 module as a string, is there any API provided by base.js that can parse the raw JS and do the Closure\u2192ES6 transpilation?\nNot publicly, no. The idea is that you should go through Closure's debug code loader or provide a bundle, preferably the latter (the debug code loader is pretty old and non-standard at this point!). If you are using Closure's code loader it can transform ES6 modules on browsers that do not support them.\nIf you transform your ES6 modules, either by bundling or serving on a per file basis before serving, then Closure will need to be made aware of them. Closure needs to know about them while they are executing so that goog.module.declareNamespace works correctly and so that goog.require will return a value inside the module.\nIf you take a look at the implementation of goog.module.declareNamespace you can see how base expects this to be done. It expects a module runtime on the global $jscomp object that acts like CommonJS so it can get a reference to the exports.\njs\n   // ...\n   // Bundled - not debug loading, no module loader state.\n    var jscomp = goog.global['$jscomp'];\n    if (!jscomp || typeof jscomp.getCurrentModulePath != 'function') {\n      throw new Error(\n          'Module with namespace \"' + namespace +\n          '\" has been loaded incorrectly.');\n    }\n    var exports = jscomp.require(jscomp.getCurrentModulePath());\n    // ...\nIf you want to load the ES6 modules raw (e.g. <script type=\"module\">) then things are a little more complicated. The current design assumes you are going through the goog.Dependency interface which allows you to register ES6 module exports via goog.LoadController.prototype.registerEs6ModuleExports. But if you're loading code through Karma you won't be going through this interface. I think its still possible to use this interface, though a little messy.\nSo if we wanted to load this file with Karma:\njs\n// examplemodule.js\ngoog.module.declareNamespace('example.module');\nconst array = goog.require('goog.array');\nexport const filtered = array.filter([0, 1, 2, 3], (e) => e  % 2);\nYou could write a bootstrap file like so:\n```js\n// bootstrap.js\n// Singleton dependency that is used to register ES6 module exports and nothing more.\nconst karmaEs6Dependency = new class extends goog.Dependency {\n  constructor() {\n    super('', '', [], [], {});\n  }\n  preLoadingModule(path) {\n    this.path = path;\n    this.loadingModule = true;\n    // Fake a call to goog.addDependency, which in turn will make \"path\"\n    // require-able. When require'd it will call the createDependency method\n    // of the DepenencyFactory, which we've set to just return this object. Then\n    // it will call this object's load method.\n    goog.addDependency(path, [path], []);\n    goog.require(path);\n    this.controller.setModuleState(goog.ModuleType.ES6);\n  }\n  registerModule(exports, namespace = undefined) {\n    // namespace is the argument of goog.module.declareNamespace. Optional, only if called\n    // in the module.\n    this.controller.registerEs6ModuleExports(this.path, exports, namespace);\n    this.loadingModule = false;\n  }\n  postLoadingModule() {\n    this.controller.clearModuleState();\n    this.controller.loaded();\n  }\n  load(controller) {\n    if (!this.loadingModule) throw new Error();\n    this.controller = controller;\n  }\n};\nclass KarmaDependencyFactory extends goog.DependencyFactory {\n  createDependency() { return karmaEs6Dependency; }\n}\ngoog.setDependencyFactory(new KarmaDependencyFactory());\n```\nAnd then ensure your html generator writes something like:\nhtml\n<script src=\"goog/base.js\"></script>\n<script src=\"bootstrap.js\"></script>\n<!-- other closure files (dependencies of goog.array) !-->\n<script src=\"goog/array/array.js\"></script>\n<!-- \n  Use 3 different script tags so that if the middle module errors\n  (which can happen if any dependencies error) then the state\n  is still cleaned up.\n-->\n<script type=\"module\">\n  karmaEs6Dependency.preLoadModule('/examplemodule.js');\n</script>\n<script type=\"module\">\n  import * as m from '/examplemodule.js';\n  karmaEs6Dependency.registerModule(m, 'example.module');\n</script>\n<script type=\"module\">\n  karmaEs6Dependency.postLoadingModule();\n</script>\nThe example shows an ES6 module with goog.module.declareNamespace, which means it can be goog.required. However that complicates things quite a bit. If a Closure file (e.g. a goog.provide or goog.module file, not an ES6 module) did goog.require that namespace, it must be loaded after the ES6 module it requires. If you load code with script src=\"path\" this isn't an issue, just add defer (well, on IE11+ I think). But if you're putting raw text in a script tag (<script>goog.loadModule/*...*/</script>) then you can't defer that. You could make it a type=\"module\", which would work for goog.module files (since they'd just be calls to goog.loadModule), but it wouldn't work for goog.provide files, which can create globals. You could try having a type=\"module\" that calls goog.global eval for those files.\nSo we might also have the following later the that html file:\njs\n<script type=\"module\">\n  goog.loadModule(function(exports) {\n    goog.module('example.goog.module');\n    const exampleModule = goog.require('example.module');\n    console.log('from goog.module: ' + exampleModule.filtered);\n  });\n</script>\n<script type=\"module\">\n  // eval'd globally so as to ensure global values are global\n  goog.globalEval(`\n    goog.provide('example.provide');\n    goog.require('example.module');\n    var exampleGlobal = 0;\n    console.log('from goog.provide: ' + goog.module.get('example.module').filtered);\n  `);\n</script>\nA lot of this stuff doesn't have public documentation yet (the code is the current documentation). I wanted to vet this internally before publicly advertising it. Also our tools to parse files aren't up to date for ES6 modules yet (e.g. the stuff in closure/bin/build that generates deps.js files). I plan on writing a new node package to parse Closure files rather than continue editing python code. This new package will be available as a library as well, which may help you out. No need to parse things yourself.\nSorry for the wall of text. Documentation is coming, but only once things are vetted and we have the new node package to parse this stuff.. As joeltine said, this is up to the server to grant your app permission to the response by giving you an appropriate \"Allow-Access-Control-Origin\" response header. This is not a bug with the Closure Library.\nSuggested reading:\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\nhttps://www.html5rocks.com/en/tutorials/cors/. Closed by #861 . What page(s) are giving you errors and in what browser(s)?. +@jleyba who owns js-dossier. This probably has to with the fact that goog.module is a function and a namespace.\nhttps://github.com/google/closure-library/tree/master/closure/goog/module. LGTM. LGTM. Actually, now that @shicks is available again I'd like him to take a quick look.. This makes sense to me. The idea behind assertions is that they're enabled in debug, disabled in production. So the reason this fails in a test is because you're debugging. The assert should be doing its job, throwing an exception, and letting you know in the console.\n@shicks @concavelenz are tests meant to be run locally with file://? Or are you required to start up an HTTP server locally and serve the tests?. Duplicate of #869 . Since this is just plain old object destructuring (as opposed to ES6 import destructing, which is different) you could try this in two lines.\nconst mymodule = goog.require('my_module');\nconst {\n  exportOne,\n  exportTwo,\n  exportThree,\n  exportFour,\n  exportFive,\n  exportSix,\n  exportSeven\n} = mymodule;\nThe Google Style guide discourages multiline imports, so I think there a lot of tools that rely on regexing for single lines as a result.. I kicked off a restart but looking closely at the logs looks like it isn't connecting to sauce labs (though we don't run that anymore, can probably rip it out?). But I don't see your environment being set correctly. There's no SAUCE_USERNAME/SAUCE_ACCESS_KEY like in passing builds..\nThat being said, can probably just disable connecting to sauce labs for now; we aren't runny tests.. No worries, I'm pretty new at dealing with Travis as well. Thanks for the link, that appears to be the culprit. When I encrypted our sauce labs credentials I did not realize that would break travis with external PRs without additional handling. I'll be sure to fix this, thanks!. Better yet @concavelenz to avoid getting out of sync can you fix this right after you do a push? Should be a simple one liner in our travis config, see @ivanixgames' link above.. Was a little eager on closing since the Library's own build started to fail last week. It is fixed now and I restarted your build to make sure yours passes too. Looks like it is still trying to connect to sauce labs, need to sync first?. They should be compatible, but I don't use Angular. Ask the Angular folks, they should know!\nhttps://github.com/angular/angular. It is an optional parameter that you shouldn't need. If you take a look at the implementation the scope has a precedence that ends with itself.\nopt_scope /* argument to listen */ || self.handler_ /* constructor argument */ || self /* this */\nTo put it another way, super() should have the functionality you're looking for with super(this).. Duplicate of #856\nI've thus far been unable to reproduce. Having set repro steps would help.. New version soon anyway.... New version soon anyway.... Looks like the common balance method messes it up. An insert will insert, then recursively (balance then update height). So as it goes up the tree balancing the heights are incorrect. Because it is balancing on incorrect heights it stays incorrect. I'm also guessing this will lead to broken AVL-trees (less rigid balancing). I'm not sure it will break the order of elements though, which is more critical than balancing.\nI'll look into a fix, thanks!. I don't see these errors. Have you rolled something back? Investigating in the mean time.. So a quick peek in the inspector shows you have a $jscomp object that only has a scope property. You have a blockly_compressed.js file that defines this. This looks like something compiled with Closure Compiler that has some optimizations turned on that removes the runtime but does not run Closure pass or rename anything. So $jscomp still exists and the goog.provide calls are preserved. Thus goog.provide ends up erroring with the stack trace above.\nSimple fix to just check if that method exists before calling it. This only breaks certain compiled bundles as described above.. Yep, I have the fix internally and am getting it through review.. I assume you mean a release. We should push a library release with the next compiler release. @lauraharker when is that?. We have no plans to update the Closure UI widgets (goog.ui). Google has many other UI frameworks that are recommended, including Polymer and Angular. While Gmail and Google Maps may use Closure Library they are not using the goog.ui package and are using other UI frameworks.. I'm not going to delve into their implementation details since if they aren't using anything open source it doesn't help you out. If you want an open source library look at the existing ones and then see if any of those support MD 2. If they don't you can ask if/when they will.\nOur material component repros, which is probably the best place for you to start:\nhttps://github.com/material-components/\nhttps://material.io/develop/\nIf you want to use them Polymer and Angular are still actively maintained and I would think would update their styles if they haven't already.\nhttps://material.angular.io/\nhttps://www.polymer-project.org/. Stab in the dark: ES6 modules are transpiled before the conformance check and thus are globals. Other possibility: check doesn't understand module scoping.. I don't know that there's a work around besides the one you mentioned. I'm working on a fix now, sorry if that wasn't clear.. I fixed this in the compiler. When it is committed to github I'll link it here and close this then.. @lauraharker Are you still on release / do you know when the next compiler release is scheduled?. We don't own the karma-closure processor. The karma team does (at least the original version, not sure what your fork of a fork is). We don't currently have any plans to support Karma on our end but we're glad that Karma does on theirs. I suggest just waiting for Karma to add support for ES6 modules.\nI suspect for Karma usable ES6 module support is a larger task than just ES6 module support - generally people don't want to write browser compliant paths.\nIf at the point at which Karma does support ES6 modules but Closure-ES6 module interop fails in Karma I'd be more than happy to take a look. But as far as base support for ES6 modules go I'd wait for Karma to add it.. You can require the package google-closure-library and it works fine. However that isn't compiled. Looks like our bootstrap script evals Closure's base.js with the global context.\nSo yeah, without special handling Closure Compiled output will be pretty broken in Node. I think most people just don't use the compiled code in Node as code size isn't generally an issue and instead will require the npm package.\nSo question is that a valid work flow? Type check with Closure but don't build if you plan to run in Node?. Thanks for filing all of these.\nFYI we use https://github.com/jleyba/js-dossier to generate this documentation, so these bugs lie there. I'll re-file these issues there.. This will just disable custom resolution, which isn't right (notice after this change that the module resolve ris unused). It seems like the correct thing is to have the keys of the map be absolute paths.. Alternatively use path.join rather than path.resolve in the PathModuleResolver.. I think this will break using mock clock to tick promises in tests. When you have an async test (returns a thenable) then the test framework will use goog.Promise to resolve them. It will call your nth test (where n > 0) in a goog.Promise callback.\nRight now mock clock can be installed and then it will intercept all goog.Promise calls made afterwards because they each will have their own callback queue.\nBut if we have a global callback queue, which is in the middle of being processed in a test, then mock clock won't intercept any goog.Promises made in the test.\nDon't get me wrong, ticking Promises synchronously was always a bad idea, but we'll have to migrate people off this pattern or think of something else. Right now this seems blocked on mock clock.. Then you get into different timing issues. MockClock forces goog.Promise to use next tick to schedule, rather than native Promise. It never undoes this action. Even if we did make it undo the action on uninstallation, if anyone installs the mock clock over multiple tests we're not better off.\nI think, without going to far, we can say this probably isn't going to be trivial due to various issues around MockClock.. You're right, I wasn't clear sorry. But upon further investigation I was incorrect anyway.\nI thought what was happening was MockClock forced goog.Promises to use macrotasks, but if the test runner was microtasks then you could get interference between tests where they was none before.\nHowever looking a bit deeper the issue is actually that uninstalling or resetting a MockClock that was never installed will wipe out the goog.async queue. This happens in the goog.Promise tests. When each goog.Promise had its own callback queue this didn't matter - the promises made in the individual tests would not run callbacks after the test is run if the mock clock wasn't installed. However now that there's a global queue, running that gets cancelled, and goog.Promise will never schedule anything ever again since it is still waiting to run its callbacks that it thinks it scheduled.\nBut the tl;dr of all my posts is MockClock will be a larger headache than we probably think.. We've discussed elsewhere that this works better as its own package (that can have a dependency on google-closure-deps).. I'm going to merge this with a few edits. The only one that impacts functionality is that it won't use JSON by default at all. The default behavior (no copy function) will be assignment copy (e.g. the = operator, so it won't be a deep copy by default). You can copy with JSON if you like.. Hey @miketaylr,\nThanks for reporting this. We've tried testing with Firefox Nightly on both OS X and Linux, enabling the dom.keyboardevent.keypress.set_keycode_and_charcode_to_same_value flag, and are not seeing any obvious issues with keyboard shortcuts on Docs, Slides, and Gmail.\nCan you give a more specific repro case? Thanks!\n. Thanks again for reporting this, and for the additional info.. Thanks for this! Adding the tests will help keep us in a better state in the future :+1: . > Following this wiki page, it seems like the existing depswriter.py is not able to do this, and the only way to achieve this is by using google-closure-deps, is that correct?\nCorrect. The idea was to try to consolidate our code around this (reuse the code from the compiler), and also  to write our tooling in JavaScript rather than Python going forward.\n\nIt looks like deps maker process does something, but it's painfully slow. Moe debugging showed that the call to closure-compiler's gjd() takes an average of 1 second per file. Is this a known issue?\n\nDo you have any more details about your machine?\nRunning on my linux desktop for Closure Library (1567 files) I get.\nreal    0m13.691s\nuser    0m19.947s\nsys 0m0.491s\nRunning the same thing on my macbook air I get similar results:\nreal    0m15.002s\nuser    0m18.720s\nsys 0m0.586s\nIf you'd like to reproduce to compare, I cloned the github repro, then ran:\ncd closure-deps/\nnpm install\nnode ./bin/closuremakedeps.js --root ./node_modules/google-closure-library/closure/goog/ --root ./node_modules/google-closure-library/third_party/closure/goog/ --exclude ./node_modules/google-closure-library/closure/goog/transpile.js --exclude ./node_modules/google-closure-library/closure/goog/testing/testdata --exclude ./node_modules/google-closure-library/closure/goog/bin --exclude ./node_modules/google-closure-library/closure/goog/conformance --exclude ./node_modules/google-closure-library/closure/goog/css --exclude ./node_modules/google-closure-library/closure/goog/demos --exclude ./node_modules/google-closure-library/closure/goog/docs --exclude ./node_modules/google-closure-library/closure/goog/transpile --exclude ./node_modules/google-closure-library/closure/goog/debug_loader_integration_tests --exclude ./node_modules/google-closure-library/closure/goog/base_debug_loader_test.js. Another question would be: do you have any super large files (or even directories) that can be excluded? Use the --exclude flag.. Something seems wrong with your machine / environment. Can you try it on another machine, just to get another data point? Here's JS Action for me on linux with node 11:\nreal    0m0.862s\nuser    0m1.525s\nsys 0m0.071s\nAnd on my macbook air with node 10.1:\nreal    0m1.153s\nuser    0m1.591s\nsys 0m0.096s\n\nThe python implementation takes 0.5-2 seconds. With the javascript implementation, Is the developer supposed to wait 10-15 seconds after each changes for a page refresh? That'd be 10x to 30x slower than the python implementation.\n\nYeah, this is a good point. On the other hand, dependencies most likely not updated often. As an FYI, the python version does simple regex searches, while the new JS version performs an AST traversal, which probably slows things down, but is more correct.\nI think what we could add to the JS version is an incremental update mode. You give it the existing deps file that needs updating, and what files updated, and it will look at only those files. It should also be simple to make a wrapper around this that actively watches for changes and updates your deps file automatically. That should significantly speed things up if it only updates what actually changed, during development.. You either need to include Closure Library when running the command, or just add --no-validate. And since we're on the subject of feature requests, we could also add support for reading in other deps.js files. So you wouldn't need --no-validate, but just add Closure Library's deps.js file as input, and it would see goog.array is provided there.. fyi @ChadKillingsworth @concavelenz about graalvm (see @jimbojetlag 's post above). > By 'including Closure Library' do you mean using --closure-path path/to/goog.closure, or --root path/to/goog.closure?\nThe latter. But that will also scan all of Closure Library, and include it in the output, which is probably not what you want. --no-validate will disable the validation of the dependency graph entirely, so that goog.array doesn't need to be seen at all. As above, it'd probably be nicer to edit this tool to be able to read in Closure's deps.js file, see goog.array in there, and use that for validation.\n\nI assumed that --closure-path means that closuremakedeps.js will use the existing deps.js, apparently that is not what's happening, and it's unclear to me what --closure-path does.\n\nCorrect, it does not do that. It's just used to determine the relative path to Closure (which is needed in the output).\n\nWould you please provide the command you used for compiling jsaction that gave you the timing of real 0m0.862s in the above?\n\nAssuming you first run npm install google-closure-deps and npm install jsaction:\ntime node ./node_modules/google-closure-deps/bin/closuremakedeps.js   --closure-path ./node_modules/google-closure-library/closure/goog   --root ./node_modules/jsaction/ --no-validate. So, this is complicated. Closure Library hasn't yet to wholly move to goog.module yet, or even has wide use of ES6+ features. The library will always (sadly) be behind due to it needing to support the lowest common denominator.\nFor your own project I think it highly depends on your situation. Are you a leaf project, and no one depends on you? If so, you can use whatever module format you like! My personal opinion would be ideally ES modules, though if you have a better developer setup or IDE that works better with something else, go for that. Whatever makes you most productive, followed by whatever is standardized. This may also include TypeScript via tsickle and clutz.\nIf your project is not a leaf, meaning you have projects depending on yours, you need to take them into consideration and what they support. ES modules are still not widely supported in the wild. Examples: Still not supported in Node (well, it's behind a flag...), browser support is there, but not terribly ergonomic due to only supporting relative paths (import maps hopefully eventually solve that), etc. Though you may be able to get around this by transforming your source code to a module format that is supported widely, e.g. write in ES modules but use webpack to provide a single, non-module bundle. Or babel to UMD/CJS with RequireJS, etc.\nFor the time being it doesn't matter what your source code is in, in all cases you will use goog.require to get access to Closure Library, as it is currently all goog.provide and goog.module files (or import 'goog:namespace' in TypeScript).\n@concavelenz @shicks @nreid260 may have more thoughts or guidance. . I believe the idea is that clutz should be used to generate the .d.ts files on the fly. I was not aware of that issue, thank you for bringing it to my attention. I'll reach out to the Angular folks and talk with them about it.. > When using Closure Library as a static library, wouldn't the .d.ts files be also static, similar to the generated deps.js that comes with Closure Library?\nIf you're using an npm release, yes. If you constantly sync to head, no. Closure Library is only as static as you want it to be :)\nI'll discuss within the team if we should provide these files with our release.\n\nSorry to ask this question again, what is the workflow for developing a (leaf) application in Typescript hat uses Closure Library? I can see Clutz must be used to generate the .d.ts files, does that mean that from that point Cosure Library can be used just like a Typescript library, or does it still require Closure Library specific module loaders during dvelopment?\n\nNo worries! @mprobst should be able to comment more here. I believe it may force you into using tsickle (which will compile your TypeScript to goog.module files), but I am not 100% sure.\nAs far as source code goes, I believe should be able to use a special import syntax in your TypeScript files. If your import specifier is goog:namespace, then that should import the Closure namespace.\nimport * as googArray from 'goog:goog.array';. So stemming from #937, I took a look at JsAction. They publish some pre-built code you could use. If that's all that you need, and don't want to use the Closure Compiler or Library, I'd recommend using those files.\nIf you want to use the Closure Compiler then you should probably write ES modules or goog.modules (goog.provide is super old and is in the global scope). You could try using TypeScript with the Closure Compiler via tsickle and clutz, though I don't think we have a well worn path around this for small external projects yet (like having a super fast edit / refresh dev flow). If you want to use TypeScript but not the Closure Library/Compiler, then there's no reason to use clutz or tsickle, just use the minifed / prebuilt JsAction files. They should be super simple to write some .d.ts files for, if they don't already exist.\nSo fundamentally this all depends on your use case. What combinations Closure Library, the Closure Compiler, JsAction, and TypeScript did you want to use?. Thanks for pinging. I needed to make this PR and then continue with the work, which I clearly left hanging (it would've ideal to do it in the same PR...). For now due to some technical restrictions we need to use v12.. Really these are URLs, not posix paths. But we may have to use posix paths, I'm not sure node really support making relative URLs.. goog.userAgent.isMobile_ has the comment TODO(nnaze): Investigate swapping in goog.labs.userAgent.device.isMobile().. Now may be a good time to address that?. (So at the very least, for now, you could use that labs method). Hey Asier,\nI'm going to assume this is resolved with the Closure web worker bootstrap file. Feel free to reopen if not!. We now have the google-closure-deps npm package as a replacement for depswriter.py. Try using that instead. It should understand them.. Personal thoughts: There's a more general problem that our mocking framework isn't type checkable. If it was, then having the compiler type check your tests would catch this.\nIf we did ever get to the point where mocks were type checkable I don't think we could have a $returnsAsync function that was checked correctly unless we had overloads. Generally the way to type check mocks is to have a when() method roughtly typed like\n```\n/*\n * @param {T} mock\n * @return {!Expectation}\n * @template {T}\n /\nfunction when(mock) {}\n/ @template {T} */\nclass Expectation {\n  / @param {T} value */\n  $returns(value) {}\n  // etc\n}\n```\nSo an example usage would look like  when(mock.methodCall(paramMatcher)).$return(0);. Using your above example, when(mock()).$returns(43) would fail to compile, as you passed a number where it expects a !Promise<number>, forcing you to change to when(mock()).$returns(Promise.resolve(43)) to compile.\nWithout overloads when() can only return a single value (at type checking), which would need both $returns and $returnsAsync on it, meaning nothing is preventing you from calling the wrong one. Though I guess you could have a whenAsync(mock()).$return(0) instead, where whenAsync has an AsyncExpectation or something?. Yes that package is used to make dependency files (goog.addDependency statements) and also just parse dep graph of Closure files in general. I thought it would be released with our library release, let me check our scripts.. Thanks! I'll take a look at making sure this stays in lock step with the library's dep. For now we can just accept this PR.. My two cents:\n\nThere's a bunch of isSameblah static methods. This fits in with those.\nUsing \"time\" by itself is confusing here. Perhaps refer to it as time ignore date? e.g. isSameIgnoreDateMonthAndYear or something?. This links to your fork, not the main repo :). This doesn't make the key an absolute path. This code should just return end up being dep.path again. path.dirname('./a/b') will be ./a, fyi.\n\npath.resolve will make a path absolute. path.join won't.\npath.join('../a', 'b') will be ../a/b. path.resolve('../a', 'b') will be some absolute path ending with /a/b.\nhttps://nodejs.org/docs/latest/api/path.html#path_path_resolve_paths\nhttps://nodejs.org/docs/latest/api/path.html#path_path_join_paths\ntl;dr I think that when a Dependency is created you should say this.path = path.resolve(filePath) in the constructor. I think that should force all Dependencys to have absolute paths, meaning this map will use absolute paths, and PathModuleResolver can remain unchanged.. Some of these (not sure which) are not native to Node. You need to update package.json for these new dependencies.\nBut maybe this would work better as a separate Node package to keep this package's dependencies minimal?. This only works for basic objects (doesn't copy methods) and will wipe out the prototype chain.\nclass A {\n  foo() { console.log('foo'); }\n}\nconst copy = JSON.parse(JSON.stringify(new A()));\ncopy instanceof A; // false\ncopy.foo(); // error\nMaybe have copy take an optional copy function? It can use JSON as the default.\nclass A {\n  copy() {\n    return new A();\n  }\n}\ntree.copy((a) => a.copy());. Single space here and below.. If you want to use ES6 in this new code (which I'm not sure will land - but I'll fix it when I pull this in if it can't) then please be consistent and use const or let here... Google style is indent 2 spaces.. this.root_ is null for empty trees (add a unit tests for this too please).. Most of the above is copy and pasted from another unit test and isn't really relevant. At the very least delete this comment, we aren't really testing the rotation here.. I'll think about adding this in the future, for this and the library.. SG. This is probably fine for now since it isn't too old. I'll make a PR in the future to have the closuremakedeps_test ignore *_test.js files in the expected output, and then we can use the head library again.. ",
    "azizzaeny": "the hack was using goog.net.loadMany\njs\ngoog.provide = goog.exportPath_\ngoog.lobal.CLOSURE_IMPORT_SCRIPT = function(file){\n if(goog.inHtmlDocument_){  // loaded\n    goog.net.jsloader.load(file)\n  }\n}\nuse somewhere goog.net.jsloader.loadMany()`, will pull dependencies\nbut now its deprecated, @shicks and @jplaisted do you know any alternative to goog.net.jsloader ?\nthe examples above are just plain, rough and doesn't enough solution but the idea is there..\nwe can actually call goog.require after page loaded it will produce null\nwith requirement the first goog.addDependencies graph is introduced and the first goog.require call is evaluated\nbut when the first goog.require not yet evaluated then the problem is there..\nto reproduce my issue add goog/base and goog/deps.js to html\nhtml\n<script src=\"public/main.out/goog/base.js\"></script>\n<script src=\"public/main.out/goog/deps.js\"></script>\nthen you eval in REPL goog.require('somens.foo') to invoke document.write at document.body it wil refuse because first goog.require must introduced before document.ready\nwhen you add at require before document.ready\nhtml\n<script src=\"public/main.out/goog/base.js\"></script>\n<script src=\"public/main.out/goog/deps.js\"></script>\n<!-- others js -->\n<script>goog.require(\"somens.foo\");</script>\nthen you eval then you eval in REPL `goog.require('somens.bar') it will ok and output null and the dependencies scripts is not there meaning not loaded\nnamespaces to path ns->path foo.bar mean foo/bar.js right?\nbased relative to base.js  http://<<server>>/goog/base.js\ngoog.require('foo.bar') => eval load_script(\"foo/bar.js\") =>  http://<<server>>/foo/bar.js\nthe idea of goog.require is to ensure dependencies is there\ni come along this issue when using clojurescript\ni cannot use goog.module because cljs generated google-closure\nin cljs when you declare namespaces (ns foo.bar) it would produce\ngoog.provide('foo.bar')   -> produce global code\ngoog.require('cljs.core') -> ensure core loaded\nin es6\ngoog.module --> ensure loaded as module es6 -> translated into goog.loadModule((exports)=> )\ni think the issue was seperate each other, es6 has its own mechanism of async code loading and plain es5 must have its own instead document.write\nand hopefully there is no dinosours in goog.require ;-)\n. Although all of this are not necessarily\n when compilation bundle is advanced.\nthis is to support other user that develop code incrementally\nlets define whats is interactive and dynamic development (not dynamic loading, i think we had already dynamic loading)\n\ninteractive mean incrementall evaluation\ndynamic mean reintroduce new code in runtime without long compiling code again\n\nwhat i do was just connect to browser REPL with editor and then start evaluating code there (changing things and live patching there)\ninteractive mean we evaluate code from repl and sends it through the evaluation envionment [browser/nodejs]\nwhen you have ES6 REPL it mean you [type ES6 code] --> [transform to es5] --> [browser understand es5 then evaluate it ]\nwhen you have cljs repl [write cljs code] --> [transform to es5] -> [browser understand that] -> [evaluate inside the browser]\nlong compilation can be skipped by just translating what necesarly to load in browser or in nodejs\nyes future is must asynchronously and also future development should be supported\nfuture development is when you connected to your creations and changes things inside but to do that at the compensate you must build it onces, once it compiled load it in evironment \nconnected:\n[compile] -> [evaluated dynamicly]\ncommon approach:\n[compile es6] -> [changes] -> [reload] -> [compile again] -> [reload]\ngoog.require need its own asynchronous loading not necesarly like es6 debug loader (nb: i think this is theissue too in es6 world when the code must be compiled to understand it)\nwe just dont do document.write!! maybe replace it by head.write!! or xhr.eval in dev-mode google-compiler\nif we call in cljs (require '[cljsjs.react]) => it will translated and function call (loadScirpt \"cljsjs/react.js\")\nwhen we call it again and again incrementally  (require '[cljsjs.react]) (require '[cljsjs.react]) => loadScript is skipped because its already there\nbut when you have document.write it will have side effects that it will keep adding to the document.body\nwe can actually make it pure by remove previous same script.src and add again with document.parrent.removeChild \nthe issue is small and tiny fix, replace document.write with somethings else in dev mode , in production advanced compilation they all bundled \ncan we reopen the case maybe others will have same issue and have difference perspective?. ",
    "joeychia": "I also meet the similar issue. My application FOO is post loading another script (BAR.js) which uses goog.require() to acquire all its dependencies. The BAR.js is unknown before FOO's onload event. Since goog.require() is using document.write after pageload, it wipes out the entire DOM.\nI'm looking for a way to avoid this. Maybe some parameter for goog.require() to append dependencies as ",
    "WearyMonkey": "Whoops, sorry for the mis-post.. ",
    "BusbyActual": "Any updates on this? I'm trying to use the library through browserify for blockly and I'm running into reference issues for the FS library.. @jplaisted perhaps I'm mistaken about the library being the problem. I'll check in with Chad if he's available. This issue is goog is not defined after I require it.  This library is dependent on closure and doesn't specify how to use it.\nExample:\napp.js\nrequire('base.js');\nrequire('blockly_compressed');\nrequire('blockly/logic.js');\nUncaught ReferenceError: goog is not defined\n// references logic.js these lines\ngoog.provide('Blockly.Blocks.logic');\ngoog.require('Blockly.Blocks');\n. @jplaisted  I appreciate you for your insight into the issue. You've been a great help cheers.. ",
    "nckh": "I'm working on an update to the karma-closure preprocessor. Currently it wraps Closure modules with goog.loadModule('......') similarly to described here.\nLooking at the design doc, I'm not exactly sure of the recommended way to do runtime transpilation for ES6 modules, directly in the browser, without any bundling phase. The examples in the doc seem to document the ahead of time transpilation. My question is what/how should I wrap/rewrite any ES6 modules that use goog.require. Thank you :). Thanks so much for the detailed answer John.\nKarma does actually support ES6 but internally. Currently it requires overriding a few params in the conf file in order to load scripts with injected ",
    "orian": "FYI I've managed to auto-generate .d.ts files by https://github.com/angular/clutz. Although, I had to fix few problems by hand.. There was a list of around 7-10 changes I had to make. I thought I've pasted it in clutz issue tracker but cannot find it.\nMost of them where related to wrong encapsulating. There was also a problem of incorrect inheritance transpiling for goog.Promise type (this one took me longer to figure out).\nYou can find the closure.d.ts file here:\nhttps://stackoverflow.com/questions/47074867/closure-compiler-failed-to-load-a-closure-library-module\nI can prepare diff if your are interested (have original and modified file at home PC).. Take a look at:\nhttps://google.github.io/closure-library/api/goog.module.html\nThe doc is empty, but when I go to source it has description: \nhttps://github.com/google/closure-library/blob/master/closure/goog/base.js#L378. ",
    "lellisga": "Sorry, why did you closed this? Removing that params still doesn\u2019t solve the issue. . ",
    "atannus": "Oh no, ButtonSet is going away!?\nOn Tue, Nov 28, 2017 at 11:29 AM, Joshua Marantz notifications@github.com\nwrote:\n\nWhen I compile my application I see:\n/Users/jmarantz/dev/closure-library/closure/goog/ui/dialog.js:705:\nWARNING - Class goog.ui.Dialog.ButtonSet has been deprecated: This type is\nmisleading: use ES6 Map instead.\nthis.buttons_ = new goog.ui.Dialog.ButtonSet(this.getDomHelper());\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/Users/jmarantz/dev/closure-library/closure/goog/ui/prompt.js:89: WARNING\n- Class goog.ui.Dialog.ButtonSet has been deprecated: This type is\nmisleading: use ES6 Map instead.\nvar buttonSet = new goog.ui.Dialog.ButtonSet(opt_domHelper);\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nIs there a way to get full error reporting for my own issues, but suppress\nwarnings within closure library? Alternatively, will this be fixed soon?\nI want my builds to be warning-clean. I can kind of resolve this with grep\n-v but it's ugly because to be surgical for this error I need a version of\ngrep -v that's stateful across multiple lines.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/closure-library/issues/855, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAo2m9doOj2WiNmnrmNJVY_kzDotaSCsks5s7Aq3gaJpZM4QtPJQ\n.\n\n\n-- \nAndr\u00e9 Tann\u00fas | Epungo | +55 11 2389-4360\nWe are a layer\n. I'm not sure I understand what you're asking, but if I am:\nI use goog.History to set/monitor the URL and make appropriate chances to\nwidgets based on the URL routes.\nOn Fri, Sep 7, 2018 at 12:29 AM Paul Cody Johnston notifications@github.com\nwrote:\n\nJust curious:\nGiven the breadth of the closure library, I have often wondered why there\nare no goog.ui.Component routing utilities for single-page apps. For\nexample. if I have a URL like \"foo/bar/baz\" and some nested component\nheirarchy that matches that, SHOW/HIDE components along that path.\nSo for non-angular single-page apps witthin google that use the closure\nlibrary, how do you approach this problem? Is this considered an\nanti-pattern?\nThanks in advance. Still loving the closure library in 2018.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/closure-library/issues/926, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAo2m39rvl-Dh237klVJ5RpvHNQLXhOaks5uYegwgaJpZM4WeHwa\n.\n\n\n-- \nAndr\u00e9 Tann\u00fas | Epungo | +55 11 2389-4360\nWe are a layer\n. Well, goog.History and goog.history.Html5History are it.\nClosure is pretty much low level, you'll find the parts to build anything\nyou want, but not much in the \"plug and go\" section.\nOn Fri, Sep 7, 2018 at 2:31 PM Paul Cody Johnston notifications@github.com\nwrote:\n\nRight, similar approach I'm using. I feel like I've spent quite a bit on\ntime on a routing library / routing bugs that I'd hope there would be a\ncommon library for it in the closure world.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/closure-library/issues/926#issuecomment-419511397,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAo2m8DIqtYpRaIHjRzvSwI2GwpFLASKks5uYq15gaJpZM4WeHwa\n.\n\n\n-- \nAndr\u00e9 Tann\u00fas | Epungo | +55 11 2389-4360\nWe are a layer\n. ",
    "ribrdb": "This is not fixed. I still randomly get javascript errors at https://google.github.io/closure-library/api/\nand the documentation fails to load.. I'm using chrome. My teammate has also seen the same issue on chrome.\nIt's really inconsistent. Sometimes a page will load, but none of the links do anything when you click on them. Sometimes it's the search results that are broken. Once the page for a class loaded but all the methods were missing. When I reloaded the page it worked.. Could be service worker. I just hit this again. In the console I see two of the stack traces I originally posted, then \"Service Worker termination by a timeout timer was canceled because DevTools is attached.\"\nI opened a new tab, typed DateTime into the search box, and clicked on goog.date.DateTime. Nothing visibly happened but I found the error in the console after. Not sure if it's relevant but I have 3 other tabs open on the docs.. Also I tried reloading the page, didn't fix it in this case. But manually changing the url from https://google.github.io/closure-library/api/ to https://google.github.io/closure-library/api/goog.date.DateTime.html did fix it.. wrong tab. Oops, wrong tab.. ",
    "btrice": "Cordialement ,\nMoussa AIDARA\n\nLe 26 d\u00e9c. 2017 \u00e0 12:04, googlebot notifications@github.com a \u00e9crit :\nI signed it!\n. \n",
    "dudaerich": "I signed it!. ",
    "jkevingutierrez": "Any updates on this? . ",
    "pentapache": "Suggested solution to this issue: prior to dispatching with ancestorsTree, clear the parentEventTargets, then dispatch with the ancestorsTree array, then restore the parentEventTargets using the ancestorsTree.\neventtarget.js.zip\n. ",
    "b-strauss": "Thanks, I ended up using the mymodule object as a prefix.. ",
    "ivanixgames": "I signed it! CLA. @jplaisted   apologies for my ignorance, but I am not sure what i can do from my side to get travis to pass.\nI don't have a sauce labs account. I did link travis to my github account and enabled the forked repo.  From what i can tell at https://docs.travis-ci.com/user/pull-requests/,   as I am an external contributor, the encrypted variables used by travis are not available and the tests will fail.\n . ",
    "koba04": "I signed it!. ",
    "nreid260": "This should no longer be an issue now that the extern for Node::textContent is annotated @implictCast. Thanks for the effort though!. I'm not able to reproduce this under Chrome, Edge, Firefox, IE9, IE10, IE11, or Safari 10. Do you have any more context?. Could you tell me the browser/platform? We're disinclined to accept changes until we can verify the problem.. Sorry for the very long delay!\nAfter giving it a second shot, I can indeed reproduce this. I had some concerns with the proposed fix so I've put something together on my end. It will most likely appear in the next release.\nThanks for your pointers and patience :). We've switched to doing decimal place shifts using string representations rather than multiplication and division.. Will be partially included in the next release. We decided against adding ZWD.. What specifically does this fix? It looks like these alerts convey information as part of the demo, and would be fine in this context. Additionally, this change only eliminates one of many alerts.. Hello!\nWhat have you tried and what didn't work? We don't currently know of any blockers with using Closure in a WebWorker.. Per that stack trace, it looks like CLOSURE_IMPORT_SCRIPT is your issue. Please take a look at closure-library/closure/goog/bootstrap/webworkers.js. It should have a solution.\nBasically (and I'm no expert) it looks like the DebugLoader uses script tags to load code by default. This doesn't make sense inside a WebWorker. By setting CLOSURE_IMPORT_SCRIPT to a different value before trying to load your main app, a different loading mechanism, appropriate for a Worker, will be used instead.. Hi John!\nWe appreciate your enthusiasm, but we're currently not interested in adding an more surface to goog.dom. Since goog.dom was initially written, web standards and cross-platform comparability have improved greatly to the point that it now doesn't serve much purpose. \nWe recommend developers just call the native methods directly when writing new code, instead of using goog.dom as a trivial wrapper.. Should be in the next release.. Will be included in the next release. Thanks!. ",
    "foolip": "I'm a little bit confused about what this snippet does. I think it will end up matching Chrome, Edge and Safari, which is now the per-spec behavior. If that's right, when this is fixed, then maybe it should be inverted to instead detect Firefox older than a certain version as having the bug?\nBut... what version could be checked, before we know that this change will successfully be made in Firefox?. ",
    "bzbarsky": "I'm pretty confused by the Closure code.  Firefox fires keydown for non-printable chars.  That's not changing.  The only change being made is to stop firing keypress for some of them.\nPut another way, what would break if this code were changed to:\ngoog.events.KeyHandler.USES_KEYDOWN_ = true;\n\n?. What this snippet does is do keypress-like handling on keydown for key events that would not normally fire keypress, but only for IE/Edge/WebKit UA strings.  What this means is that this code could in fact set USES_KEYDOWN_ = true and as long as it does preventDefault() on the keydown in cases when it does its special handling this should work in every Firefox version ever, as far as I can tell.. The actionhandler bit just listens for keypress vs keydown.  Again, it looks to me like it could always listen to keydown and preventDefault it..... > I do get multiple keydown's for FireFox on Windows 10, and Debian for held keys correctly.\nI get multiple keydowns on Mac as well, for Firefox versions starting with Firefox 4 (Firefox 3.6 and earlier do not fire multiple keydowns for a held key).\nLooking a bit, I think the Mac behavior was changed to the current one in https://bugzilla.mozilla.org/show_bug.cgi?id=599887 and the Linux behavior in https://bugzilla.mozilla.org/show_bug.cgi?id=597981 (though that was just dealing with a change in how GTK sends key events; before GTK made that change Firefox on Linux would send repeated keydown events).\nWindows repeated keydown all along; see https://bugzilla.mozilla.org/show_bug.cgi?id=91592#c8 from back in 2004.\nSo I think bug 91592 was fixed by the fixes in bug 597981 and bug 599887, and those fixes shipped in Firefox 4.. ",
    "birtles": "cc @masayuki-nakano. ",
    "miketaylr": "There's a similar condition in actionhandler.js as well:\nhttps://github.com/google/closure-library/blob/be0326ba32f47ea74af4fbe8df038e579ec35215/closure/goog/events/actionhandler.js#L84-L89. cc @jplaisted @dtapuska @masayuki-nakano. Hi @jplaisted, thanks!\nHere's more specific pointers to bugs, with better STR, all assuming dom.keyboardevent.keypress.set_keycode_and_charcode_to_same_value is set to true (which shouldn't require a browser restart):\nGmail\n1. https://bugzilla.mozilla.org/show_bug.cgi?id=1497519\n\ngo to gmail\nin settings, enable keyboard shortcuts\nfrom your inbox, click on a conversation to give it focus\npress x\n\nExpected:\nThe checkbox for that conversation is filled and it's \"selected\"\n\nActual:\nNothing happens\nGoogle Docs\nIn https://bugzilla.mozilla.org/show_bug.cgi?id=1497518#c6\nIt says the user was not able to type certain keys.\n1. go to google docs, start a new document\n2. try to type the top letters of a QWERTY keyboard: qwertyuiop\nexpected output: \nqwertyuiop\nactual output:\neio\nNote: I'm testing on OSX 10.13.6, using Firefox Nightly 64.0a1 (2018-10-15) (64-bit). (ok, i've updated the gmail STR -- i can reproduce it now). ",
    "masayuki-nakano": "Although I've not read the code around key event handling, I have no idea why the original developer needed to listen to keypress events only for Firefox because keypress events for non-printable keys and key combinations which are fired only on Firefox  are just redundant. So, I mean, any web applications must not need to wait keypress event only on Firefox. Instead, web apps should/can listen to keydown event to handle non-printable key actions.\nBut if there were other compatibility issue which made the original developer listen to keypress for Firefox, we (Mozilla) need to fix the incompatible points first.\nSo, I think that if there were no reasons to listen to keypress for Firefox, it just does not make sense to set USES_KEYDOWN_ to false.. Hmm, if so, there should be KeyboardEvent.isPrintable or something which actually indicates if followed by keypress event... (I proposed that but rejected.). Reading around USES_KEYDOWN_ briefly. Looks like that firesKeyPressEvent should be fixed too. It checks UA string to guess if the keydown event is followed by keypress event. Additionally,  looks like that there should be a check of ignoring unexpected keypress events (i.e., if firesKeyPressEvent returns false for a keypress event, it should've already dispatched closure's event, so, not necessary to dispatch same event again.).. Yeah, I fixed a lot around the key repeat behavior. Here is the document:\nhttps://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Auto-repeat_handling\nWhen I implement KeyboardEvent.repeat on Firefox, I checked all platforms which currently Firefox supports. In any those platforms, I see same behavior except some special cases like OS doesn't use auto-repeat, etc.. The new behavior can be detected with:\nfunction onKeyPress(event) {\n  let keyCode, charCode;\n  if (isGecko) {\n    if (event.keyCode === event.charCode) {\n      if (event.keyCode < 0x20) {\n        keyCode = event.keyCode;\n        charCode = 0;\n      } else {\n        keyCode = 0;\n        charCode = event.charCode;\n      }\n    } else {\n      keyCode = event.keyCode;\n      charCode = event.charCode;\n    }\n  }\n  ...\n}\nNote that Gecko won't take the new behavior without stopping dispatching non-printable keypress events. So, you need to treat only Enter key press specially if keyCode and charCode are same.. ",
    "dbaron": "The way the code is structured feels like using keydown was a workaround for the \"bug\" of not firing keypress in the non-Gecko browsers.. ",
    "dtapuska": "@EiraGe @NavidZ do either of you want to take a stab at updating closure and testing it against FireFox?. Appears this bug is still open.. https://bugzilla.mozilla.org/show_bug.cgi?id=91592\nI do get multiple keydown's for FireFox on Windows 10, and Debian for held keys correctly. \n@masayuki-nakano please advise why that issue is still open. ",
    "ojanvafai": "This code was written in 2008. At the time, keydown events didn't repeat in Firefox when you held down a key. Has that changed? If so, USES_KEYDOWN_ should change to whatever Firefox version changed this behavior or (even better) be removed entirely.. ",
    "julen": "I signed it!. ",
    "AnmAtAnm": "@jplaisted The version served by blockly-demo.appspot.com was compiled April 20th and does not have errors. Today, recompiling the same code gives the errors listed above. Obviously we are not going push such code out to our server with this error.. > So a quick peek in the inspector shows you have a $jscomp object that only has a scope property.\nThis is not new. The object existed in previous builds from Closure. Latest build on master branch: https://github.com/google/blockly/blob/7679d227df8f62a12316334ee708d4a9a800ef17/blockly_compressed.js#L4\nIt is not clear to me why this object was created or how we could influence it.\n\nSimple fix to just check if that method exists before calling it. This only breaks certain compiled bundles as described above.\n\nThen this sounds like a correction that needs to occur in isInEs6ModuleLoader_. Correct?. Still seeing the same error on the compiler service.  What is the schedule to get this to production?. ",
    "lauraharker": "The next compiler release is in progress. I should be finished today.. The next compiler release will be at the beginning of June\n\nOn May 18, 2018, at 6:13 PM, John Plaisted notifications@github.com wrote:\n@lauraharker Are you still on release / do you know when the next compiler release is scheduled?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "luzhang": "Ah, thanks for explaining that John! Can you advise how to get around with it?  To make it work, I just added another file to extend the \"Global var check\" rule with some whitelists, which is not ideal.. Thanks for looking into this issue John! . Thanks for fixing it John, it will be rolled out with the next Closure release? Any idea when that will happen?\n. Thanks John, I will contact the Karma team to see when we may get the ES6 module support.  . Yeah using absolute path makes more sense to me.\nWe also need to normalize those paths used for the keys.\nE.g. users use parser.parseFile('./src/js/first.js') to generate deps, the key should be 'src/js/first.js' instead of './src/js/first.js', so it is consistent with the result from the this.moduleResolver.resolve() call. I updated the file, let me know if makes sense.\n. Sorry for spamming the commits, I barely use the github UI directly to make commits, seems it sent out 3 commits instead of 1.. Thanks John, you are right, path.dirname does not remove './' prefix of the path. Absolute path definitely works.\nIt is nice to use relative path as it is cleaner. But it is not necessary in this case.\nE.g. src/js/second.js vs./Users/{username}/path/to/project/src/js/second.js. \n. Thanks for catching it, I have added those dependencies into package.json.\nI feel using a single package.json for the module is easier to maintain and use, especially when there are only 3 dependencies, probably not necessary to create a separate package.json.. ",
    "touletan": "I have been able to reproduce a similar issue with the following code:\nconst nf = new NumberFormat(NumberFormat.DECIMAL);\nnf.setMaximumFractionDigits(12);\nnf.format(1.1e15);\nI raised PR #922 . you can probably reproduce the problem on your side . In one of the test file, comparison is done againts a result that is not good in the current version:\n/closure/goog/i18n/numberformat_test.js\nOne of the test is showing that fmt.format(1.3456E20) = 134,559,999,999,999,980,000\nWith the proposed PR the value is now = 134,560,000,000,000,000,000\n@@ -85,7 +85,7 @@ function testVeryBigNumber() {\n   fmt = new goog.i18n.NumberFormat(goog.i18n.NumberFormat.Format.DECIMAL);\n  str = fmt.format(1.3456E20);\n  assertTrue(veryBigNumberCompare('134,559,999,999,999,980,000', str));\n  assertTrue(veryBigNumberCompare('134,560,000,000,000,000,000', str));\n. let me know if you need more input to reproduce to issue.. Could you please let me know how this has been fixed? . ",
    "mprobst": "@jplaisted is right, you'll need to use tsickle (https://github.com/angular/tsickle) to compile your code, which emits goog.module code, and then on the client side, it's using the Closure module system to bind everything together.\nI'm afraid we don't have a very well trodden setup for all these bits together, and you might encounter some trouble with tsickle and the path names it generates. We haven't seen a lot of people using Closure together with TypeScript outside of Google yet.. ",
    "asanzesp": "Hello Nick, nice to meet you and very grateful for your help.\nThis is my WebWorker:\nself.addEventListener('message', function(e) {\n  importScripts(\"../js/closure-library/closure/goog/base.js\");\n\n  mainFunction();\n\n  self.postMessage(\"message\");\n\n  self.close();\n\n}, false);\nFrom inside the Web Worker does not recognize the libraries.\nThis is the log that I get:\nCannot use default debug loader outside of HTML documents. base.js:826:5\ngoog.logToConsole_\nhttp://localhost/js/closure-library/closure/goog/base.js:826:5\ngoog.Dependency.prototype.load\nhttp://localhost/js/closure-library/closure/goog/base.js:3332:7\ngoog.DebugLoader_.prototype.loadDeps_/<\nhttp://localhost/js/closure-library/closure/goog/base.js:2960:11\ngoog.DebugLoader_.prototype.loadDeps_\nhttp://localhost/js/closure-library/closure/goog/base.js:2875:8\ngoog.DebugLoader_.prototype.loadClosureDeps\nhttp://localhost/js/closure-library/closure/goog/base.js:2776:5\n\nhttp://localhost/js/closure-library/closure/goog/base.js:3979:5\n\nhttp://localhost/dashboard/do_work.js:18:4\nConsider setting CLOSURE_IMPORT_SCRIPT before loading base.js, or setting CLOSURE_NO_DEPS to true. base.js:826:5\ngoog.logToConsole_\nhttp://localhost/js/closure-library/closure/goog/base.js:826:5\ngoog.Dependency.prototype.load\nhttp://localhost/js/closure-library/closure/goog/base.js:3339:9\ngoog.DebugLoader_.prototype.loadDeps_/<\nhttp://localhost/js/closure-library/closure/goog/base.js:2960:11\ngoog.DebugLoader_.prototype.loadDeps_\nhttp://localhost/js/closure-library/closure/goog/base.js:2875:8\ngoog.DebugLoader_.prototype.loadClosureDeps\nhttp://localhost/js/closure-library/closure/goog/base.js:2776:5\n\nhttp://localhost/js/closure-library/closure/goog/base.js:3979:5\n\nhttp://localhost/dashboard/do_work.js:18:4. ",
    "johnlinp": "Hi @nreid260,\nI see. Thank you for your explanation and suggestions.. Closed by the comment https://github.com/google/closure-library/issues/944#issuecomment-443061254. ",
    "aparkins": "Follow-up: I discovered after opening this issue that there other SafeUrl functions for creating URLs for blobs directly, but these ended up not working for me either. I am attempting to download a binary file generated by our server's API, and it seems that the options for creating SafeUrls from Blobs reject if the MIME type is not one of a handful of specific audio, video, or image formats (which my data is definitely not).\nIs there perhaps a way for me to manually create a SafeUrl when I know the location is coming from a trusted source? It seemed like TrustedResourceUrls also had stringent requirements that my blob: urls were unable to satisfy directly.. Ah... safeUrlFromStringKnownToSatisfyTypeContract was what I was looking for. Thanks for info, @xtofian :). ",
    "xtofian": "Blob URLs have the origin of the context that called createObjectUrl, which is typically your application.  Hence, calling createObjectUrl on blob contents that are not trustworthy (provided by a potential attacker; e.g. different user of your application) is potentially dangerous - it creates a URL that's same-origin with your app, but whose contents are attacker-controlled.  This can result in XSS vulnerabilities if the URL gets navigated to by your app on purpose, or the attacker can arrange for that to happen; potentially by guessing what the URL is (unfortunately, blob URLs are not required to be hard to guess by the spec, see https://github.com/w3c/FileAPI/issues/74#issuecomment-311785512).\nIf you're sure from context that the content of the blob is trustworthy, you can use goog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract to \"bless\" the blob URL into a SafeUrl.\nIf the content of the blob is not trustworthy, you can do the whole thing inside a sandboxed iframe, where the blob URL origin will be the sandboxed origin of the iframe.  . ",
    "Kalaston": "Thing is, HMAC uses an array of numbers instead of a string, so when parsing it from byteArray to string I get the same result of an online version \nAsked this on Stack Overflow, answer can be found here.. ",
    "cletusw": "Yeah, the real problem is the lack of type-checking here, so if that can be solved, that would be better.. ",
    "katrinleinweber": "You're welcome :-). ",
    "blickly": "Sorry I missed that! I'm trying to both do a library release for the first time and better document the steps so that we're more consistent with the closure library releases; it looks like I missed the npm publism step in my instructions.\nI think it's released now (https://www.npmjs.com/package/google-closure-library) and that it's not necessary to merge the http://go/gh/google/closure-library/tree/npm-v20190215.0.0 branch into master.  Let me know if any of the assumptions I've made aren't true.\nThanks for catching!. @jplaisted, do you know what that package is and how it is released?. OK, I think this should be (finally) released.. ",
    "ruimarinho": "Not since the rewrite for node 0.11, afaik. http://nodejs.org/docs/v0.11.13/api/vm.html#vm_class_script. The constructor version works on node 0.10 too, but can't tell for sure if there are any drawbacks with it.\n. ",
    "Kolo9": "Absolutely! I wasn't fond of it, either, but figured I'd stay consistent with the rest of the cases. I'll change the tests up as you mentioned to make them more readable.\n. ",
    "keemyb": "No, that looks like a mistake on my part.\n. ",
    "roseswang": "(nit) extra line here\n. (nit) extra line\n. ",
    "kevin-dp": "Indeed!\nI will add this.. "
}