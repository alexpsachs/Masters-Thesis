{
    "nelhage": "Thanks, merged.\n. > If I run rtorrent as-is, then reptyr can move it however my old terminall still display rtorrent until i kill it (rtorrent that is).\nThat is expected and a known limitation. You can either close the old terminal (reptyr should protect rtorrent against being killed when you do so), or you can background rtorrent using ^Z in the new window, and then run bg; disown in the old terminal to detach it entirely.\nI've just pushed a fix that should fix attaching processes run via screen. Can you let me know if it works for you?\n. My apologies; I did a refactor that broke compiling on amd64. I've since fixed that -- can you try again at your convenience?\n. Hm. It looks like rtorrent is using epoll to wait for keyboard input, so while it's taking input from the right place, epoll holds a reference internally to the old terminal that I can't swap out. I have an idea for a different \"attach\" strategy that might work, but this is unfortunately probably unfixable with the current implementation. Thanks for the report, though :/\n. Yeah, it's very Linux-only. It might be possible to port, but it wouldn't be trivial. I'll add an error message that should make that clearer.\n. Thanks for the note. I just pushed a commit that tries to detect this failure mode and print a helpful message, and I'll add a note to the  docs.\n. It looks like RHEL 5's kernel, at least recent versions, does support those flags, but their userspace ptrace.h doesn't include them. I just pushed a patch that defines those constants ourselves if ptrace.h didn't, which should make reptyr work on RHEL 5 machines. Let me know if it works for you.\n. Unfortunately, there is no good way to free the old terminal in general. You can background the program and then do 'bg; disown' yourself, or just close the old terminal (i.e. close the xterm or kill the screen window or whatever) -- reptyr causes the attached program to ignore SIGHUP so that it shouldn't be killed.\n. If I was willing to assume that the shell understands the \"bg\" and \"detach\" commands, I could probably inject those into the terminal and feed them to the shell at an appropriate time, and it wouldn't be unreasonable to add an option to do that. It wouldn't be trivial, though, since I'd need to find the other end of the pty in order to inject commands, and I don't know of a straightforward way to do that.\n. There is nothing that can be done about this in general, unfortunately. However, if you send htop (or most curses programs) a ctrl-L, it will redraw itself. reptyr sends programs a window-size-changed event on attach, which causes many programs to redraw themselves, but some, like htop, detect if the window hasn't actually changed size, and skip the redraw.\n. A port would be non-trivial; It depends pretty deeply on the details of the Linux kernel API, Linux's terminal handling ioctls, Linux system calls, and ptrace. I suspect there are appropriate analogs for all of the pieces on modern BSDs, but I don't know much about BSD, so I'm unlikely to invest the effort any time soon. I'm happy to cluedump someone else if they want to try it, though.\n. Yeah, this seems like something reptyr could do. It's an easier problem than the\none I solve, in that there's no need to worry about the termios wankery, but\nthere's no reason not to support it.\nI don't have a lot of time for reptyr hacking right at the moment, but I'll add\nit to my TODO list.\n- Nelson\nOn Fri, May 06, 2011 at 10:03:51AM -0700, nbecker wrote:\n\nOne thing often happens.  I start some long-running process - maybe in emacs\nshell.  Now I want to go home, but unfortunately, I did not use emacs\n--daemon.  Too late now.\nI can use reptyr (start new emacs --daemon + emacsclient, shell, reptry).  But\nwhat I'd like is to daemonize the process.  That is, redirect the\nstdout/stderr to a logfile (with configurable logfile behaviour), and then\ndaemonize the process.\nSeems like reptyr could be a useful tool for this.  Any thoughts?  Maybe make\na daemonize.py python script, and invoke it from reptry from it after\ndeamonize redirects it's stdout/stderr?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/nelhage/reptyr/issues/10\n. It's not really intended behavior, but I don't know of a good way to fix it, since the relevant state is mostly held within the old terminal process, not in the kernel or the child process, and I don't want to make assumptions about the old terminal. So while I consider it a bit of a bug, I'm not sure it's one I can fix.\n. Sure, I'd be happy to take a French translation of the man page.\n\nGlad you like the program!\nOn Aug 6, 2011 1:10 AM, \"lgautrot\" \nreply@reply.github.com\nwrote:\n\nHello,\nAre you interested in a French manpage for reptyr?\nThanks, by the way, this program is really great.\nRegards\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/nelhage/reptyr/pull/12\n. Yeah, it's a known bug that it doesn't work right on anything with\nsubprocesses, like most shell scripts. I think this is solvable, but\nI haven't gotten around to it. It should probably at least fail more\ngracefully, though.\n- Nelson\n\nOn Mon, Oct 24, 2011 at 9:52 AM, bidaian\nreply@reply.github.com\nwrote:\n\nI'm using nelhage-reptyr-61cc5f8 on Ubuntu 10.04.3 LTS). \u00a0On a terminal I created a script like this:\n!/bin/bash\nwhile true\ndo\n\u00a0 \u00a0 \u00a0 \u00a0sleep 5\n\u00a0 \u00a0 \u00a0 \u00a0date\ndone\nOnce I started it I open another terminal and tried to reptyr the bash process, or the parent bash process. \u00a0The original one was stopped (as if ^Z had been typed) but the output was still coming out on the original terminal. \u00a0Maybe that's normal behaviour for scripts but just in case I report it.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/nelhage/reptyr/issues/13\n. Yeah, I think you can just walk the process tree and basically do\nthe same operation to each child. I haven't actually tried to do so,\nhowever. There are definitely some things that could go wrong, but I\nthink it may work.\n\nOn Mon, Feb 27, 2012 at 1:59 PM, robryk\nreply@reply.github.com\nwrote:\n\nOne could probably `transplant' the whole process group, one by one. I will try to look into it.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/nelhage/reptyr/issues/13#issuecomment-4200417\n. No updates. It's not really something I have the time to actively work on at the moment, unfortunately.\n. The new -T option should work properly for scripts under most circumstances!\n. lgtm, feel free to merge.\n- Nelson\n\nOn Mon, Oct 31, 2011 at 9:45 AM, Evan Broder\nreply@reply.github.com\nwrote:\n\nDebian wants to be able to inject a standard set of buildflags, some based on policy and some based on user input (for instance, -O2, unless DEB_BUILD_OPTIONS is set to noopt)\nThis patch lets me run \"make CFLAGS=foo\" and have that foo append, rather than override, the CFLAGS in your Makefile\nYou can merge this Pull Request by running:\ngit pull https://github.com/ebroder/reptyr master\nOr you can view, comment on it, or merge it online at:\nhttps://github.com/nelhage/reptyr/pull/14\n-- Commit Summary --\n- Use override to allow appending build flags from the command line\n-- File Changes --\nM Makefile (2)\n-- Patch Links --\nhttps://github.com/nelhage/reptyr/pull/14.patch\n\u00a0https://github.com/nelhage/reptyr/pull/14.diff\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/nelhage/reptyr/pull/14\n. Thanks for the patch. I'd been holding on to the debug information\nbecause sometimes it's useful in debugging a non-reproduceable\nfailure, but I haven't gotten any such bug reports in a while, so I\nthink I agree it makes sense to be silent by default.\n\nApplied with one minor tweak, and I've added documentation that the\noption exists.\n- Nelson\nOn Tue, Dec 20, 2011 at 11:08 PM, Randy MacLeod\nreply@reply.github.com\nwrote:\n\nreptyr should just work and not utter all those\ndebug messages unless asked.\nSigned-off-by: Randy MacLeod rwmacleod@gmail.com\nYou can merge this Pull Request by running:\ngit pull https://github.com/rwmacleod/reptyr master\nOr you can view, comment on it, or merge it online at:\nhttps://github.com/nelhage/reptyr/pull/15\n-- Commit Summary --\n- Add a [-V]erbose flag; default is off.\n-- File Changes --\nM reptyr.c (15)\n-- Patch Links --\nhttps://github.com/nelhage/reptyr/pull/15.patch\n\u00a0https://github.com/nelhage/reptyr/pull/15.diff\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/nelhage/reptyr/pull/15\n. Hey,\n\nI am fine carrying a specfile in the repo, but have you talked to whoever is maintaining reptyr in Fedora (http://pkgs.fedoraproject.org/gitweb/?p=reptyr.git)? Looks like they already have a slightly different specfile, and it probably makes sense for me to carry whichever one is actually being used, assuming they would also find that useful.\n. Hm. I can confirm this behavior, but I am not sure quite what is causing it, at the moment. I'll investigate some time soon.\nNote that it is likely difficult to make backgrounding work exactly as though the target were actually started in the new shell, for various technical reasons.\n. Merged, with some slight modifications to be more pedantic about the volatile variable, and document the remaining race.\n. Thanks! Merged.\n. Thanks, merged.\n. I like the concept. Is there a reason to have the $REPTYR_REDIRECT\nenvironment variable, instead of a command-line option?\nAlso, out of curiosity, what's your use case for this?\n- Nelson\nOn Thu, Aug 16, 2012 at 11:43 AM, Vitaly Shukela\nnotifications@github.com wrote:\n\nAlso pushed more extensive scripting support with fork/exec and REPTYR_*\nenvionment variables.\n\u2014\nReply to this email directly or view it on GitHub.\n. What do you think of this: https://github.com/nelhage/reptyr/tree/subcommand\n\nI'm happy to do an 0.4 release with this feature once we merge it.\nOn Thu, Aug 16, 2012 at 11:56 AM, Vitaly Shukela\nnotifications@github.comwrote:\n\n(Now thinking what to put to dive's documentation... \"Use special vi's\nversion of reptyr\" or \"Use reptry not less that v0.4\")\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/nelhage/reptyr/pull/20#issuecomment-7789829.\n. Just pushed a commit that I think will fix that. Let me know if it works.\n- Nelson\n\nOn Thu, Aug 16, 2012 at 12:38 PM, Vitaly Shukela\nnotifications@github.comwrote:\n\n\"dive\" successfully works with \"subcommand\" version of reptyr.\n/* Some area of improvement: it would be good if \"reptyr -L bash\" could\nwork like \"socat -,raw,echo=0 exec:bash,pty,setsid,stderr\". The latter\ngives job control in the shell, the former gives normal terminal resizing.\nI want both. */\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/nelhage/reptyr/pull/20#issuecomment-7791196.\n. Great. I've pushed to master and tagged 0.4.\n- Nelson\n\nOn Thu, Aug 16, 2012 at 1:13 PM, Vitaly Shukela notifications@github.comwrote:\n\nWorks. Documented one more \"reptyr\" workaround in \"dive\" (in addition to\nthat socat's).\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/nelhage/reptyr/pull/20#issuecomment-7792230.\n. Unfortunately, due to somewhat-arcane technical reasons, reptyr does not support attaching processes that make use of subprocesses (like repo). I've just pushed a commit which adds earlier checking and hopefully a somewhat-better error message in this case.\n\nThis limitation might be possible to partially work around with some more work, but unfortunately, I think the primitives Linux gives us makes it impossible to work fully-correctly :/\n. reptyr does attach to the process via ptrace and perform operations in the process' address space, so it is theoretically possible for a bug somewhere to cause memory corruption. That said, I've written it with some care to minimize such risks, and never observed that sort of bug.\nI do recommend testing reptyr on a dry-run against any super-critical processes, but if that works, I would be pretty confident that it will fail safely, if it does, rather than by silently corrupting data.\n. Interesting. We should be restoring the terminal state, but I can reproduce this issue, so I'll have to investigate. Thanks for the report.\n. Huh. Finally digging now. It turns out gdb does put the terminal in -echo, and then does echo itself (presumably via libreadline), (which is quite common), but that after being restored, it stops echoing. I haven't yet pegged why it does so.\n. Yeah, I'd really love to have this feature, but I've given it a bunch of thought and experimentation, and don't know of a robust way to do it with the operations Linux gives you. I came up with a completely different approach involving stealing the pty, but unfortunately it won't work for things started directly from an ssh session, which is much of the utility of reptyr :/\nIf that'd be useful, I'd consider doing a prototype, but I just don't know how to do this in general.\n. reptyr master now includes a -T option, which uses an entirely different attachment strategy that, among other advantages, will attach the entire target terminal, including all processes. I still consider it experimental, but I'd appreciate testing and bug reports.\nOne known limitation, unfortunately, because of how it works and an interaction with how setuid works on Linux, is that it won't normally work on sessions that are spawned out of an ssh session unless the attaching reptyr is run as root.\n. 1. is expected, because of the heuristic reptyr uses to find the terminal emulator (after attach, the reptyr becomes the new terminal emulator). It would be possible to fix this with a little creative work.\n2. I'm not quite sure what situation you're describing here. Can you be more specific about specifically which processes are doing what?\n. @melikyuksel It should work with -T in most cases, and I don't know of a way to make it work in reptyr's default mode, due to fundamental limitations of the terminal APIs exposed by the kernel. If you have specific issues with -T, feel free to open a new issue.\n. Thanks for the report. I think including <linux/ptrace.h> should be fine. Want to send along a pull reqest?\n. Thanks, merged\n. I'm pretty sure this will grant reptyr the ability to ptrace(2) any binary on the system, including ones running as different users.\nNow, this probably won't let you reptyr arbitrary processes, because you still can't read their /proc/ entries, so reptyr will error it. But it means that any security bugs in reptyr -- buffer overflows, etc -- are now exploitable for root access on your system. And while I've tried to be careful while writing reptyr, that is not in its threat model, and I can't recommend you relying on accidental behavior in a security-critical way.\n. Hi, \nAre you able to build from the grab-console branch, and report back whether that works for you?\n- Nelso\n. You can just override PREFIX by passing it on the command-line -- see the Debian packaging: https://github.com/nelhage/reptyr/blob/debian/debian/rules#L10\nSee http://www.gnu.org/software/make/manual/html_node/Overriding.html --\n\nAn argument that contains \u2018=\u2019 specifies the value of a variable: \u2018v=x\u2019 sets the value of the variable v to x. If you specify a value in this way, all ordinary assignments of the same variable in the makefile are ignored; we say they have been overridden by the command line argument.\n\nGiven that, do you still need this?\n. See #29 -- this is actually redundant. But I've pushed e4757cdeedd4c4c0034d85db82d496ec5736d974 which adds a comment.\n. It seems like there should be a better place for this, but since there seems to be some interest in having it, and I'm unsure what other options obviously make sense, I'm happy to pick this up. Thanks!\n. Thanks!\n. I'm really not excited about adding autotools. It's an awful lot of complexity that mostly doesn't add much, since reptyr is super-unportable regardless. I really value having the simple \"just run make\" build.\nIf we want reallocarray -- which I agree with in general, but it seems more stylistic here, since I don't think you can possibly have that many fd's -- I'd probably just inline it as \"xreallocarray\" or some other name, instead of sucking in all that complexity.\n. @worr I'd be happy to see a more-portable reptyr (OOC, what platform(s) are you hoping to target?), but I'd rather hold off on the full-autotools route until it's clear we're getting value from it. My suspicion is that even if we added a (e.g.) FreeBSD port, we could get away with one file of definitions for Linux, and one for FreeBSD, and a simple conditional inclusion. The real value of autoconf is if there are N different axes along which platforms can be different, and you want to consider each of them individually.\n. Cool, I'd love to see that. And I'm definitely open to autotools if it provides clear wins, I just prefer to avoid it until then, since the pure-'make' build flow is so much simpler.\nI'm going to close this for now; Feel free to open another PR for either xreallocarray or similar, or for Solaris support as that developers!\n. Cool, I'd love to see that. And I'm definitely open to autotools if it provides clear wins, I just prefer to avoid it until then, since the pure-'make' build flow is so much simpler.\nI'm going to close this for now; Feel free to open another PR for either xreallocarray or similar, or for Solaris support as that developers!\n. I believe that on Linux we can't get EINTR until we set up the SIGWINCH signal handler -- EINTR can only happen if a signal arrives and is handled by a userspace signal handler (c.f. http://www.gnu.org/software/libc/manual/html_node/Interrupted-Primitives.html). And there's a handful of things that are retried by this patch (e.g. sscanf) that can't ever (again, AFAIK) return EINTR. \nIf we do need to go down this route, I think I'd rather adopt something like glibc's TEMP_FAILURE_RETRY macro, instead of open-coding all the do / while loops inline everywhere.\n. Hm. I see no mention in termios(3) of those functions being allowed to return EINTR, and, in general, I don't expect non-long-blocking functions to be ever return EINTR.\n. Hm, fair enough. Ok, I'd take that patch.\n. Cool, thanks.\n. Thanks!\n. Thanks!\n. Thanks, seems reasonable.\n. I'm not particularly interested in error-handling fprintf, since it will just make the code much noisier for no particular practical benefit. sigaction would be reasonable.\n. I don't know what I would do if the fprintf fails, here -- if we can't write to stderr, how are we going to report the error to the user? It should also be a super rare condition for writing to stderr to error out.\n. You can background+disown the process from the new terminal, as usual. reptyr has no particular support for detaching or backgrounding a process.\nhttps://en.wikipedia.org/wiki/Disown_(Unix)\n. Yep, it's on my list to do by year-end. I'd ideally like to get a few reports of reptyr -T working for people other than me, but I'll definitely do a release soonish regardless.\n. slower than I'd hoped, but done!\n. Hi,\nWas pid 31637 started via ssh? It's a known limitation with -T that it can't attach things started directly out of an ssh session, because the ssh process can't be ptrace'd because it dropped privileges. If 31637 doesn't have children, you can try running without -T\n. Oh, sorry, I missed the sudo in your command line. I would expect that to work, although I haven't been able to test -T on arm, so it's possible something is up there. Can you run sudo strace -fo /tmp/reptyr.strace reptyr -T 31637 and attach the /tmp/reptyr.strace file?\n. ah-ha, I see the problem. Does https://github.com/nelhage/reptyr/commit/eacces make things better? That's a hackish solution, but if it works I can think about implementing a better one.\n. I think I've reproduced locally, but probably won't have a chance to dig further until later today or tomorrow.\n. I can reproduce something that seems similar on x86, so I'm hopeful it isn't.\n. Ok, does the https://github.com/nelhage/reptyr/commit/multifd branch do anything better for you?\n. Yep -- that's what reptyr -T does. It grabs the entire terminal session containing the process, shell and all. Without -T, it will just attach the specific process. Unfortunately, I don't know of a way to grab an entire process tree that isn't rooted in a terminal session.\n. That's correct (with -T). The behavior with and without -T are substantially different, unfortunately, with different limitations and advantages to each. I'm struggling with how to best document this / provide guidance on which to use :/\n. @PythonNut reptyr works by using ptrace to attach to the target processes and make syscalls remotely, which depends intimately on details of the underlying architecture's syscall ABI. As such, for each (OS, architecture) pair, it needs knowledge of the syscall register calling convention, syscall numbers, and some related information.\n. Merged by hand! I also wanted to finally add some automated testing to increase my confidence that I didn't break Linux support :)\nThanks for all your work!\n. Bah, I should have seen this coming. I'm deliberately ignoring the return value of chown, but I should have made that explicit. I'll push a fix. You can likely get to built via CFLAGS=-Wno-unused-result or take the next commit. I can push an 0.6.1 tag if that makes your life easier.\n. closed by d734f5f1b3e4c6be2753be1e1f52a2a4ab7ea4ab and 3960d133c8530c16d1c3bcebcc330b7055778647\n. Thanks!\n. Hmm. Is the builder running an ix86 chroot inside an x86_64 host? If so, this may be related to that configuration.\nI'll try to spin up a Fedora box and see if I can debug.\n. an update \u2013 I spun up a Fedora 20 i386 box today and have been able to reproduce the failure. Haven't dug in further yet, but will update this issue as I do.\n. Turns out I completely misunderstood socketcall, and this never worked on ia32 (I never actually ran the test suite on 32-bit, myself). Thanks for reporting this! Can you verify that current master fixes the issue for you? If so, I'll release an 0.6.2.\n. Whoops, thanks for the report. Replaced with sysconf calls, and tested on both i386 and ARM.\n. Awesome,  thanks for verifying. Pushed 0.6.2 with both fixes.\n. awesome, thanks!\n. @Ulrar does reptyr then exit with an error, ot what do you see after that? That error is itself mostly harmless; It's an attempt to ensure that the shell running the old process (if there is one) behaves properly, but we can often still attach if that fails (and the code attempts to do so). Sounds good, thanks!\n. Doesn't CAP_SYS_PTRACE grant the process the ability to ptrace any process on the system? You could e.g. steal a shell from root.\nIn order to make this safe, I think we'd have to make reptyr aware of when it was launched with elevated capabilities, and implement its own permission model for which processes it will allow itself to attach.\n. Cool, thanks! And yeah, I'd be happy to have this pulled into the port tree. I don't suppose that comes with any form of CI/automated builds to catch things like this in the future? :)\n. Hm, that's frustrating. It seems like a bug that vim doesn't respect ^L in that case, but it's also not unreasonable to want repytr to fail faster here. I think it wouldn't be hard to do a quick \u201cCan I attach?\u201d check before the initial SIGSTOP, but I'll take a look.\n. I just pushed a quick test to the preflight-check branch, that works in my testing. Want to take a look?\n. Hm, I think that it won't work currently if run on a non-root process as root, although I might be able to fix that.\nDoes sudo reptyr -T $pid work? That will engage a different mode of attaching, which is designed to work if run as root, among other things.\n. Does the above commit fix it? Seems like the easiest fix.\nWe had some vaguely similar issues with the clang analyzer that were fixed in f6f156365b15542714da601d2e26eecc49bbdeb0, but this one isn't obviously errno-related.\n. thanks!\n. I'm not opposed to this, but I'm curious if there was a specific motivation here. Did you run into problems with a particular GCC version or do you think reptyr is particularly likely to run into such problems?\n. My suspicion is that 4.4 and 4.5 aren't disparate enough to be likely to surface bugs, and that a lot of your problems are related to older kernel headers, which unfortunately aren't easy to test via Travis.\nI'd be happy to take a change to optionally disable -Werror in the Makefile, if that would make your life easier in that regard.\n. How do you feel about that fix I just pushed?\n. Can you confirm that #71 fixes this issue for you as well, and then I'll go ahead and merge.\n. The PR_SET_PTRACER code should only be needed under yama (which is to say, ~recent Ubuntu kernels, effectively). Does https://github.com/nelhage/reptyr/pull/70 do anything good?\n. Just pushed another commit on that branch \u2013 does that do any good?\n. Yeah \u2013 is that problematic in some way? I'm not sure of an easy way to check whether it's necessary. I could grub around for the yama sysctls, but that seems unsatisfactory.\n. Got it. Just pushed a change that will just swallow the ImportError with a warning message. That passes tests on my CentOS 5 VM, and I think should also work on Travis. I'll merge assuming it does.\n. :+1: thanks\n. :+1: thanks\n. Yep, this seems credible. Thanks!\n. reptyr doesn't natively support \"detaching\" from a process once it's been attached, and it would be tricky to do so. You might be able to re-reptyr the process back from the original shell, but in general I'd recommend using a tool like screen(1) or tmux(1) if you know you're going to be wanting to move shells around a bunch.\n. thanks!\n. See the discussion on #24 and I think a few other issues; On Linux it's possible with the -T option, but that hasn't been ported to FreeBSD yet. Unfortunately, I don't know of an effective way to do this, due to quirks in how the termios subsystem is designed.\n. Is there a good or fundamental reason that PTRACE_TRACEME will be defined iff __ptrace_request exists, or does that just \"happen to work\" today?\n. Yeah, OK, this makes sense to me \u2013 if it's defined, it's probably not an enumeration, and vice versa.\nThanks for the patch!\n. Hi,\nCan you confirm if the gcc7 branch builds for you? It builds using my gcc-7 from ubuntu-toolchain-r/test, but it'd be good to get confirmation.\nThanks for the report!. Thanks for the report! I'd love to get this in CI to make sure we don't regress, but I don't see an easy way to get gcc-7 packages in travis right now.. We don't support macOS, unfortunately. Probably that should be a better error, though, at least \u2026. I've got no plans to, as I don't use macOS and am not familiar with its terminal and debugging APIs and what it would take to implement reptyr. I'd potentially be open to a PR if such an expert is interested.. It may work better with -T, which uses a different strategy to attach.\nBut the default mode of operation cannot attach processes with children.\nOn Tue, Jun 20, 2017, 08:41 Manjunatha S M notifications@github.com wrote:\n\n~/reptyr-master$ ./reptyr 946227\n[-] Process 946489 (gmake) shares 946227's process group. Unable to attach.\n(This most commonly means that 946227 has sub-processes).\nUnable to attach to pid 946227: Invalid argument\nRegards,\nManju\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/nelhage/reptyr/issues/84, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AABBVZhYASfxqkfJVpkCz9c5yirZknk9ks5sF-gogaJpZM4N_xxT\n.\n. > My system lacks /etc/sysctl.d/10-ptrace.conf: What should I put it instead?\n\nAdding kernel.yama.ptrace_scope = 0 to any .conf file in /etc/sysctl.d (or a new one) will work, if your system has YAMA and not that config file. Do you have a /proc/sys/kernel/yama/ptrace_scope?\n\nI'm sometimes not sure how to use Reptyr with multiprocess programs\n\nreptyr -T is the only mode that will (may) work with multi-process programs, for somewhat complicated reasons.. If you run reptyr -l with a command line, it will execute that command with the REPTYR_PTY environment variable set.  So you could do something like\nreptyr -l sh -c 'echo $REPTYR_PTY > /tmp/reptyr-pty'\nand then read the pty out of that tmpfile.. Thanks!. Thanks, merged.\n. > If I run rtorrent as-is, then reptyr can move it however my old terminall still display rtorrent until i kill it (rtorrent that is).\nThat is expected and a known limitation. You can either close the old terminal (reptyr should protect rtorrent against being killed when you do so), or you can background rtorrent using ^Z in the new window, and then run bg; disown in the old terminal to detach it entirely.\nI've just pushed a fix that should fix attaching processes run via screen. Can you let me know if it works for you?\n. My apologies; I did a refactor that broke compiling on amd64. I've since fixed that -- can you try again at your convenience?\n. Hm. It looks like rtorrent is using epoll to wait for keyboard input, so while it's taking input from the right place, epoll holds a reference internally to the old terminal that I can't swap out. I have an idea for a different \"attach\" strategy that might work, but this is unfortunately probably unfixable with the current implementation. Thanks for the report, though :/\n. Yeah, it's very Linux-only. It might be possible to port, but it wouldn't be trivial. I'll add an error message that should make that clearer.\n. Thanks for the note. I just pushed a commit that tries to detect this failure mode and print a helpful message, and I'll add a note to the  docs.\n. It looks like RHEL 5's kernel, at least recent versions, does support those flags, but their userspace ptrace.h doesn't include them. I just pushed a patch that defines those constants ourselves if ptrace.h didn't, which should make reptyr work on RHEL 5 machines. Let me know if it works for you.\n. Unfortunately, there is no good way to free the old terminal in general. You can background the program and then do 'bg; disown' yourself, or just close the old terminal (i.e. close the xterm or kill the screen window or whatever) -- reptyr causes the attached program to ignore SIGHUP so that it shouldn't be killed.\n. If I was willing to assume that the shell understands the \"bg\" and \"detach\" commands, I could probably inject those into the terminal and feed them to the shell at an appropriate time, and it wouldn't be unreasonable to add an option to do that. It wouldn't be trivial, though, since I'd need to find the other end of the pty in order to inject commands, and I don't know of a straightforward way to do that.\n. There is nothing that can be done about this in general, unfortunately. However, if you send htop (or most curses programs) a ctrl-L, it will redraw itself. reptyr sends programs a window-size-changed event on attach, which causes many programs to redraw themselves, but some, like htop, detect if the window hasn't actually changed size, and skip the redraw.\n. A port would be non-trivial; It depends pretty deeply on the details of the Linux kernel API, Linux's terminal handling ioctls, Linux system calls, and ptrace. I suspect there are appropriate analogs for all of the pieces on modern BSDs, but I don't know much about BSD, so I'm unlikely to invest the effort any time soon. I'm happy to cluedump someone else if they want to try it, though.\n. Yeah, this seems like something reptyr could do. It's an easier problem than the\none I solve, in that there's no need to worry about the termios wankery, but\nthere's no reason not to support it.\nI don't have a lot of time for reptyr hacking right at the moment, but I'll add\nit to my TODO list.\n- Nelson\nOn Fri, May 06, 2011 at 10:03:51AM -0700, nbecker wrote:\n\nOne thing often happens.  I start some long-running process - maybe in emacs\nshell.  Now I want to go home, but unfortunately, I did not use emacs\n--daemon.  Too late now.\nI can use reptyr (start new emacs --daemon + emacsclient, shell, reptry).  But\nwhat I'd like is to daemonize the process.  That is, redirect the\nstdout/stderr to a logfile (with configurable logfile behaviour), and then\ndaemonize the process.\nSeems like reptyr could be a useful tool for this.  Any thoughts?  Maybe make\na daemonize.py python script, and invoke it from reptry from it after\ndeamonize redirects it's stdout/stderr?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/nelhage/reptyr/issues/10\n. It's not really intended behavior, but I don't know of a good way to fix it, since the relevant state is mostly held within the old terminal process, not in the kernel or the child process, and I don't want to make assumptions about the old terminal. So while I consider it a bit of a bug, I'm not sure it's one I can fix.\n. Sure, I'd be happy to take a French translation of the man page.\n\nGlad you like the program!\nOn Aug 6, 2011 1:10 AM, \"lgautrot\" \nreply@reply.github.com\nwrote:\n\nHello,\nAre you interested in a French manpage for reptyr?\nThanks, by the way, this program is really great.\nRegards\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/nelhage/reptyr/pull/12\n. Yeah, it's a known bug that it doesn't work right on anything with\nsubprocesses, like most shell scripts. I think this is solvable, but\nI haven't gotten around to it. It should probably at least fail more\ngracefully, though.\n- Nelson\n\nOn Mon, Oct 24, 2011 at 9:52 AM, bidaian\nreply@reply.github.com\nwrote:\n\nI'm using nelhage-reptyr-61cc5f8 on Ubuntu 10.04.3 LTS). \u00a0On a terminal I created a script like this:\n!/bin/bash\nwhile true\ndo\n\u00a0 \u00a0 \u00a0 \u00a0sleep 5\n\u00a0 \u00a0 \u00a0 \u00a0date\ndone\nOnce I started it I open another terminal and tried to reptyr the bash process, or the parent bash process. \u00a0The original one was stopped (as if ^Z had been typed) but the output was still coming out on the original terminal. \u00a0Maybe that's normal behaviour for scripts but just in case I report it.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/nelhage/reptyr/issues/13\n. Yeah, I think you can just walk the process tree and basically do\nthe same operation to each child. I haven't actually tried to do so,\nhowever. There are definitely some things that could go wrong, but I\nthink it may work.\n\nOn Mon, Feb 27, 2012 at 1:59 PM, robryk\nreply@reply.github.com\nwrote:\n\nOne could probably `transplant' the whole process group, one by one. I will try to look into it.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/nelhage/reptyr/issues/13#issuecomment-4200417\n. No updates. It's not really something I have the time to actively work on at the moment, unfortunately.\n. The new -T option should work properly for scripts under most circumstances!\n. lgtm, feel free to merge.\n- Nelson\n\nOn Mon, Oct 31, 2011 at 9:45 AM, Evan Broder\nreply@reply.github.com\nwrote:\n\nDebian wants to be able to inject a standard set of buildflags, some based on policy and some based on user input (for instance, -O2, unless DEB_BUILD_OPTIONS is set to noopt)\nThis patch lets me run \"make CFLAGS=foo\" and have that foo append, rather than override, the CFLAGS in your Makefile\nYou can merge this Pull Request by running:\ngit pull https://github.com/ebroder/reptyr master\nOr you can view, comment on it, or merge it online at:\nhttps://github.com/nelhage/reptyr/pull/14\n-- Commit Summary --\n- Use override to allow appending build flags from the command line\n-- File Changes --\nM Makefile (2)\n-- Patch Links --\nhttps://github.com/nelhage/reptyr/pull/14.patch\n\u00a0https://github.com/nelhage/reptyr/pull/14.diff\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/nelhage/reptyr/pull/14\n. Thanks for the patch. I'd been holding on to the debug information\nbecause sometimes it's useful in debugging a non-reproduceable\nfailure, but I haven't gotten any such bug reports in a while, so I\nthink I agree it makes sense to be silent by default.\n\nApplied with one minor tweak, and I've added documentation that the\noption exists.\n- Nelson\nOn Tue, Dec 20, 2011 at 11:08 PM, Randy MacLeod\nreply@reply.github.com\nwrote:\n\nreptyr should just work and not utter all those\ndebug messages unless asked.\nSigned-off-by: Randy MacLeod rwmacleod@gmail.com\nYou can merge this Pull Request by running:\ngit pull https://github.com/rwmacleod/reptyr master\nOr you can view, comment on it, or merge it online at:\nhttps://github.com/nelhage/reptyr/pull/15\n-- Commit Summary --\n- Add a [-V]erbose flag; default is off.\n-- File Changes --\nM reptyr.c (15)\n-- Patch Links --\nhttps://github.com/nelhage/reptyr/pull/15.patch\n\u00a0https://github.com/nelhage/reptyr/pull/15.diff\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/nelhage/reptyr/pull/15\n. Hey,\n\nI am fine carrying a specfile in the repo, but have you talked to whoever is maintaining reptyr in Fedora (http://pkgs.fedoraproject.org/gitweb/?p=reptyr.git)? Looks like they already have a slightly different specfile, and it probably makes sense for me to carry whichever one is actually being used, assuming they would also find that useful.\n. Hm. I can confirm this behavior, but I am not sure quite what is causing it, at the moment. I'll investigate some time soon.\nNote that it is likely difficult to make backgrounding work exactly as though the target were actually started in the new shell, for various technical reasons.\n. Merged, with some slight modifications to be more pedantic about the volatile variable, and document the remaining race.\n. Thanks! Merged.\n. Thanks, merged.\n. I like the concept. Is there a reason to have the $REPTYR_REDIRECT\nenvironment variable, instead of a command-line option?\nAlso, out of curiosity, what's your use case for this?\n- Nelson\nOn Thu, Aug 16, 2012 at 11:43 AM, Vitaly Shukela\nnotifications@github.com wrote:\n\nAlso pushed more extensive scripting support with fork/exec and REPTYR_*\nenvionment variables.\n\u2014\nReply to this email directly or view it on GitHub.\n. What do you think of this: https://github.com/nelhage/reptyr/tree/subcommand\n\nI'm happy to do an 0.4 release with this feature once we merge it.\nOn Thu, Aug 16, 2012 at 11:56 AM, Vitaly Shukela\nnotifications@github.comwrote:\n\n(Now thinking what to put to dive's documentation... \"Use special vi's\nversion of reptyr\" or \"Use reptry not less that v0.4\")\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/nelhage/reptyr/pull/20#issuecomment-7789829.\n. Just pushed a commit that I think will fix that. Let me know if it works.\n- Nelson\n\nOn Thu, Aug 16, 2012 at 12:38 PM, Vitaly Shukela\nnotifications@github.comwrote:\n\n\"dive\" successfully works with \"subcommand\" version of reptyr.\n/* Some area of improvement: it would be good if \"reptyr -L bash\" could\nwork like \"socat -,raw,echo=0 exec:bash,pty,setsid,stderr\". The latter\ngives job control in the shell, the former gives normal terminal resizing.\nI want both. */\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/nelhage/reptyr/pull/20#issuecomment-7791196.\n. Great. I've pushed to master and tagged 0.4.\n- Nelson\n\nOn Thu, Aug 16, 2012 at 1:13 PM, Vitaly Shukela notifications@github.comwrote:\n\nWorks. Documented one more \"reptyr\" workaround in \"dive\" (in addition to\nthat socat's).\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/nelhage/reptyr/pull/20#issuecomment-7792230.\n. Unfortunately, due to somewhat-arcane technical reasons, reptyr does not support attaching processes that make use of subprocesses (like repo). I've just pushed a commit which adds earlier checking and hopefully a somewhat-better error message in this case.\n\nThis limitation might be possible to partially work around with some more work, but unfortunately, I think the primitives Linux gives us makes it impossible to work fully-correctly :/\n. reptyr does attach to the process via ptrace and perform operations in the process' address space, so it is theoretically possible for a bug somewhere to cause memory corruption. That said, I've written it with some care to minimize such risks, and never observed that sort of bug.\nI do recommend testing reptyr on a dry-run against any super-critical processes, but if that works, I would be pretty confident that it will fail safely, if it does, rather than by silently corrupting data.\n. Interesting. We should be restoring the terminal state, but I can reproduce this issue, so I'll have to investigate. Thanks for the report.\n. Huh. Finally digging now. It turns out gdb does put the terminal in -echo, and then does echo itself (presumably via libreadline), (which is quite common), but that after being restored, it stops echoing. I haven't yet pegged why it does so.\n. Yeah, I'd really love to have this feature, but I've given it a bunch of thought and experimentation, and don't know of a robust way to do it with the operations Linux gives you. I came up with a completely different approach involving stealing the pty, but unfortunately it won't work for things started directly from an ssh session, which is much of the utility of reptyr :/\nIf that'd be useful, I'd consider doing a prototype, but I just don't know how to do this in general.\n. reptyr master now includes a -T option, which uses an entirely different attachment strategy that, among other advantages, will attach the entire target terminal, including all processes. I still consider it experimental, but I'd appreciate testing and bug reports.\nOne known limitation, unfortunately, because of how it works and an interaction with how setuid works on Linux, is that it won't normally work on sessions that are spawned out of an ssh session unless the attaching reptyr is run as root.\n. 1. is expected, because of the heuristic reptyr uses to find the terminal emulator (after attach, the reptyr becomes the new terminal emulator). It would be possible to fix this with a little creative work.\n2. I'm not quite sure what situation you're describing here. Can you be more specific about specifically which processes are doing what?\n. @melikyuksel It should work with -T in most cases, and I don't know of a way to make it work in reptyr's default mode, due to fundamental limitations of the terminal APIs exposed by the kernel. If you have specific issues with -T, feel free to open a new issue.\n. Thanks for the report. I think including <linux/ptrace.h> should be fine. Want to send along a pull reqest?\n. Thanks, merged\n. I'm pretty sure this will grant reptyr the ability to ptrace(2) any binary on the system, including ones running as different users.\nNow, this probably won't let you reptyr arbitrary processes, because you still can't read their /proc/ entries, so reptyr will error it. But it means that any security bugs in reptyr -- buffer overflows, etc -- are now exploitable for root access on your system. And while I've tried to be careful while writing reptyr, that is not in its threat model, and I can't recommend you relying on accidental behavior in a security-critical way.\n. Hi, \nAre you able to build from the grab-console branch, and report back whether that works for you?\n- Nelso\n. You can just override PREFIX by passing it on the command-line -- see the Debian packaging: https://github.com/nelhage/reptyr/blob/debian/debian/rules#L10\nSee http://www.gnu.org/software/make/manual/html_node/Overriding.html --\n\nAn argument that contains \u2018=\u2019 specifies the value of a variable: \u2018v=x\u2019 sets the value of the variable v to x. If you specify a value in this way, all ordinary assignments of the same variable in the makefile are ignored; we say they have been overridden by the command line argument.\n\nGiven that, do you still need this?\n. See #29 -- this is actually redundant. But I've pushed e4757cdeedd4c4c0034d85db82d496ec5736d974 which adds a comment.\n. It seems like there should be a better place for this, but since there seems to be some interest in having it, and I'm unsure what other options obviously make sense, I'm happy to pick this up. Thanks!\n. Thanks!\n. I'm really not excited about adding autotools. It's an awful lot of complexity that mostly doesn't add much, since reptyr is super-unportable regardless. I really value having the simple \"just run make\" build.\nIf we want reallocarray -- which I agree with in general, but it seems more stylistic here, since I don't think you can possibly have that many fd's -- I'd probably just inline it as \"xreallocarray\" or some other name, instead of sucking in all that complexity.\n. @worr I'd be happy to see a more-portable reptyr (OOC, what platform(s) are you hoping to target?), but I'd rather hold off on the full-autotools route until it's clear we're getting value from it. My suspicion is that even if we added a (e.g.) FreeBSD port, we could get away with one file of definitions for Linux, and one for FreeBSD, and a simple conditional inclusion. The real value of autoconf is if there are N different axes along which platforms can be different, and you want to consider each of them individually.\n. Cool, I'd love to see that. And I'm definitely open to autotools if it provides clear wins, I just prefer to avoid it until then, since the pure-'make' build flow is so much simpler.\nI'm going to close this for now; Feel free to open another PR for either xreallocarray or similar, or for Solaris support as that developers!\n. Cool, I'd love to see that. And I'm definitely open to autotools if it provides clear wins, I just prefer to avoid it until then, since the pure-'make' build flow is so much simpler.\nI'm going to close this for now; Feel free to open another PR for either xreallocarray or similar, or for Solaris support as that developers!\n. I believe that on Linux we can't get EINTR until we set up the SIGWINCH signal handler -- EINTR can only happen if a signal arrives and is handled by a userspace signal handler (c.f. http://www.gnu.org/software/libc/manual/html_node/Interrupted-Primitives.html). And there's a handful of things that are retried by this patch (e.g. sscanf) that can't ever (again, AFAIK) return EINTR. \nIf we do need to go down this route, I think I'd rather adopt something like glibc's TEMP_FAILURE_RETRY macro, instead of open-coding all the do / while loops inline everywhere.\n. Hm. I see no mention in termios(3) of those functions being allowed to return EINTR, and, in general, I don't expect non-long-blocking functions to be ever return EINTR.\n. Hm, fair enough. Ok, I'd take that patch.\n. Cool, thanks.\n. Thanks!\n. Thanks!\n. Thanks, seems reasonable.\n. I'm not particularly interested in error-handling fprintf, since it will just make the code much noisier for no particular practical benefit. sigaction would be reasonable.\n. I don't know what I would do if the fprintf fails, here -- if we can't write to stderr, how are we going to report the error to the user? It should also be a super rare condition for writing to stderr to error out.\n. You can background+disown the process from the new terminal, as usual. reptyr has no particular support for detaching or backgrounding a process.\nhttps://en.wikipedia.org/wiki/Disown_(Unix)\n. Yep, it's on my list to do by year-end. I'd ideally like to get a few reports of reptyr -T working for people other than me, but I'll definitely do a release soonish regardless.\n. slower than I'd hoped, but done!\n. Hi,\nWas pid 31637 started via ssh? It's a known limitation with -T that it can't attach things started directly out of an ssh session, because the ssh process can't be ptrace'd because it dropped privileges. If 31637 doesn't have children, you can try running without -T\n. Oh, sorry, I missed the sudo in your command line. I would expect that to work, although I haven't been able to test -T on arm, so it's possible something is up there. Can you run sudo strace -fo /tmp/reptyr.strace reptyr -T 31637 and attach the /tmp/reptyr.strace file?\n. ah-ha, I see the problem. Does https://github.com/nelhage/reptyr/commit/eacces make things better? That's a hackish solution, but if it works I can think about implementing a better one.\n. I think I've reproduced locally, but probably won't have a chance to dig further until later today or tomorrow.\n. I can reproduce something that seems similar on x86, so I'm hopeful it isn't.\n. Ok, does the https://github.com/nelhage/reptyr/commit/multifd branch do anything better for you?\n. Yep -- that's what reptyr -T does. It grabs the entire terminal session containing the process, shell and all. Without -T, it will just attach the specific process. Unfortunately, I don't know of a way to grab an entire process tree that isn't rooted in a terminal session.\n. That's correct (with -T). The behavior with and without -T are substantially different, unfortunately, with different limitations and advantages to each. I'm struggling with how to best document this / provide guidance on which to use :/\n. @PythonNut reptyr works by using ptrace to attach to the target processes and make syscalls remotely, which depends intimately on details of the underlying architecture's syscall ABI. As such, for each (OS, architecture) pair, it needs knowledge of the syscall register calling convention, syscall numbers, and some related information.\n. Merged by hand! I also wanted to finally add some automated testing to increase my confidence that I didn't break Linux support :)\nThanks for all your work!\n. Bah, I should have seen this coming. I'm deliberately ignoring the return value of chown, but I should have made that explicit. I'll push a fix. You can likely get to built via CFLAGS=-Wno-unused-result or take the next commit. I can push an 0.6.1 tag if that makes your life easier.\n. closed by d734f5f1b3e4c6be2753be1e1f52a2a4ab7ea4ab and 3960d133c8530c16d1c3bcebcc330b7055778647\n. Thanks!\n. Hmm. Is the builder running an ix86 chroot inside an x86_64 host? If so, this may be related to that configuration.\nI'll try to spin up a Fedora box and see if I can debug.\n. an update \u2013 I spun up a Fedora 20 i386 box today and have been able to reproduce the failure. Haven't dug in further yet, but will update this issue as I do.\n. Turns out I completely misunderstood socketcall, and this never worked on ia32 (I never actually ran the test suite on 32-bit, myself). Thanks for reporting this! Can you verify that current master fixes the issue for you? If so, I'll release an 0.6.2.\n. Whoops, thanks for the report. Replaced with sysconf calls, and tested on both i386 and ARM.\n. Awesome,  thanks for verifying. Pushed 0.6.2 with both fixes.\n. awesome, thanks!\n. @Ulrar does reptyr then exit with an error, ot what do you see after that? That error is itself mostly harmless; It's an attempt to ensure that the shell running the old process (if there is one) behaves properly, but we can often still attach if that fails (and the code attempts to do so). Sounds good, thanks!\n. Doesn't CAP_SYS_PTRACE grant the process the ability to ptrace any process on the system? You could e.g. steal a shell from root.\nIn order to make this safe, I think we'd have to make reptyr aware of when it was launched with elevated capabilities, and implement its own permission model for which processes it will allow itself to attach.\n. Cool, thanks! And yeah, I'd be happy to have this pulled into the port tree. I don't suppose that comes with any form of CI/automated builds to catch things like this in the future? :)\n. Hm, that's frustrating. It seems like a bug that vim doesn't respect ^L in that case, but it's also not unreasonable to want repytr to fail faster here. I think it wouldn't be hard to do a quick \u201cCan I attach?\u201d check before the initial SIGSTOP, but I'll take a look.\n. I just pushed a quick test to the preflight-check branch, that works in my testing. Want to take a look?\n. Hm, I think that it won't work currently if run on a non-root process as root, although I might be able to fix that.\nDoes sudo reptyr -T $pid work? That will engage a different mode of attaching, which is designed to work if run as root, among other things.\n. Does the above commit fix it? Seems like the easiest fix.\nWe had some vaguely similar issues with the clang analyzer that were fixed in f6f156365b15542714da601d2e26eecc49bbdeb0, but this one isn't obviously errno-related.\n. thanks!\n. I'm not opposed to this, but I'm curious if there was a specific motivation here. Did you run into problems with a particular GCC version or do you think reptyr is particularly likely to run into such problems?\n. My suspicion is that 4.4 and 4.5 aren't disparate enough to be likely to surface bugs, and that a lot of your problems are related to older kernel headers, which unfortunately aren't easy to test via Travis.\nI'd be happy to take a change to optionally disable -Werror in the Makefile, if that would make your life easier in that regard.\n. How do you feel about that fix I just pushed?\n. Can you confirm that #71 fixes this issue for you as well, and then I'll go ahead and merge.\n. The PR_SET_PTRACER code should only be needed under yama (which is to say, ~recent Ubuntu kernels, effectively). Does https://github.com/nelhage/reptyr/pull/70 do anything good?\n. Just pushed another commit on that branch \u2013 does that do any good?\n. Yeah \u2013 is that problematic in some way? I'm not sure of an easy way to check whether it's necessary. I could grub around for the yama sysctls, but that seems unsatisfactory.\n. Got it. Just pushed a change that will just swallow the ImportError with a warning message. That passes tests on my CentOS 5 VM, and I think should also work on Travis. I'll merge assuming it does.\n. :+1: thanks\n. :+1: thanks\n. Yep, this seems credible. Thanks!\n. reptyr doesn't natively support \"detaching\" from a process once it's been attached, and it would be tricky to do so. You might be able to re-reptyr the process back from the original shell, but in general I'd recommend using a tool like screen(1) or tmux(1) if you know you're going to be wanting to move shells around a bunch.\n. thanks!\n. See the discussion on #24 and I think a few other issues; On Linux it's possible with the -T option, but that hasn't been ported to FreeBSD yet. Unfortunately, I don't know of an effective way to do this, due to quirks in how the termios subsystem is designed.\n. Is there a good or fundamental reason that PTRACE_TRACEME will be defined iff __ptrace_request exists, or does that just \"happen to work\" today?\n. Yeah, OK, this makes sense to me \u2013 if it's defined, it's probably not an enumeration, and vice versa.\nThanks for the patch!\n. Hi,\nCan you confirm if the gcc7 branch builds for you? It builds using my gcc-7 from ubuntu-toolchain-r/test, but it'd be good to get confirmation.\nThanks for the report!. Thanks for the report! I'd love to get this in CI to make sure we don't regress, but I don't see an easy way to get gcc-7 packages in travis right now.. We don't support macOS, unfortunately. Probably that should be a better error, though, at least \u2026. I've got no plans to, as I don't use macOS and am not familiar with its terminal and debugging APIs and what it would take to implement reptyr. I'd potentially be open to a PR if such an expert is interested.. It may work better with -T, which uses a different strategy to attach.\nBut the default mode of operation cannot attach processes with children.\nOn Tue, Jun 20, 2017, 08:41 Manjunatha S M notifications@github.com wrote:\n\n~/reptyr-master$ ./reptyr 946227\n[-] Process 946489 (gmake) shares 946227's process group. Unable to attach.\n(This most commonly means that 946227 has sub-processes).\nUnable to attach to pid 946227: Invalid argument\nRegards,\nManju\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/nelhage/reptyr/issues/84, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AABBVZhYASfxqkfJVpkCz9c5yirZknk9ks5sF-gogaJpZM4N_xxT\n.\n. > My system lacks /etc/sysctl.d/10-ptrace.conf: What should I put it instead?\n\nAdding kernel.yama.ptrace_scope = 0 to any .conf file in /etc/sysctl.d (or a new one) will work, if your system has YAMA and not that config file. Do you have a /proc/sys/kernel/yama/ptrace_scope?\n\nI'm sometimes not sure how to use Reptyr with multiprocess programs\n\nreptyr -T is the only mode that will (may) work with multi-process programs, for somewhat complicated reasons.. If you run reptyr -l with a command line, it will execute that command with the REPTYR_PTY environment variable set.  So you could do something like\nreptyr -l sh -c 'echo $REPTYR_PTY > /tmp/reptyr-pty'\nand then read the pty out of that tmpfile.. Thanks!. ",
    "slashbeast": "I can't even compile it.\ncc -Wall -Werror -D_GNU_SOURCE -g   -c -o reptyr.o reptyr.c\ncc -Wall -Werror -D_GNU_SOURCE -g   -c -o ptrace.o ptrace.c\ncc -Wall -Werror -D_GNU_SOURCE -g   -c -o attach.o attach.c\nattach.c: In function \u2018ignore_hup\u2019:\nattach.c:158: error: \u2018scratch_page\u2019 undeclared (first use in this function)\nattach.c:158: error: (Each undeclared identifier is reported only once\nattach.c:158: error: for each function it appears in.)\nmake: *** [attach.o] Error 1\n. Works... almost, when I have 'screen rtorrent' after reptyr screen is died ([screen is terminating]) and rtorrent in new terminal does not wok at all, the same when I do 'screen' and then 'rtorrent' so rtorrent is running in screen by shell (zsh in that case). However moving 'mc' from screen works. Maybe you could try it yourself with rtorrent? Basicly after install you can start it without any configuration.\n. Good to add into 'known issues'. Anyway I love your reptyr so I added it (as live-git ebuild) to Funtoo's Portage, looking forward for taged version. ;-)\n. I can't even compile it.\ncc -Wall -Werror -D_GNU_SOURCE -g   -c -o reptyr.o reptyr.c\ncc -Wall -Werror -D_GNU_SOURCE -g   -c -o ptrace.o ptrace.c\ncc -Wall -Werror -D_GNU_SOURCE -g   -c -o attach.o attach.c\nattach.c: In function \u2018ignore_hup\u2019:\nattach.c:158: error: \u2018scratch_page\u2019 undeclared (first use in this function)\nattach.c:158: error: (Each undeclared identifier is reported only once\nattach.c:158: error: for each function it appears in.)\nmake: *** [attach.o] Error 1\n. Works... almost, when I have 'screen rtorrent' after reptyr screen is died ([screen is terminating]) and rtorrent in new terminal does not wok at all, the same when I do 'screen' and then 'rtorrent' so rtorrent is running in screen by shell (zsh in that case). However moving 'mc' from screen works. Maybe you could try it yourself with rtorrent? Basicly after install you can start it without any configuration.\n. Good to add into 'known issues'. Anyway I love your reptyr so I added it (as live-git ebuild) to Funtoo's Portage, looking forward for taged version. ;-)\n. ",
    "lam2mo": "Nice, that fixed it. Thanks! This is a pretty cool utility. Good work!\n. Nice, that fixed it. Thanks! This is a pretty cool utility. Good work!\n. ",
    "ssadler": "Out of interest, is it not possible to write commands to background and detatch the process to the old terminal?\n. Ah okay. Thanks\n. Out of interest, is it not possible to write commands to background and detatch the process to the old terminal?\n. Ah okay. Thanks\n. ",
    "pozdnychev": "Alright, sounds good.  Anyway, thanks for this tool, it's pretty useful and fun to use.\n. Alright, sounds good.  Anyway, thanks for this tool, it's pretty useful and fun to use.\n. ",
    "robryk": "One could probably transplant' the whole process group, one by one. I will try to look into it.\n. One could probablytransplant' the whole process group, one by one. I will try to look into it.\n. ",
    "thonixx": "Would be useful to have the feature for shell scripts.\n. any updates?\n. Would be useful to have the feature for shell scripts.\n. any updates?\n. ",
    "remino": "+1\n. +1\n. ",
    "MrBuddyCasino": "Just stumbled over this, would be a very useful feature to have.\n+1\n. Just stumbled over this, would be a very useful feature to have.\n+1\n. ",
    "jpbruyere": "+1 for -T option\n. +1 for -T option\n. ",
    "aheadley": "oh wow, some how i completely missed that, nevermind! their spec is better so if you wanted to carry one that'd be the one to go with.\n. oh wow, some how i completely missed that, nevermind! their spec is better so if you wanted to carry one that'd be the one to go with.\n. ",
    "haridsv": "I can confirm this as well and it is easy to reproduce with vim.\n. I can confirm this as well and it is easy to reproduce with vim.\n. ",
    "lijat": "I have the same problem, if anyone knows of a fix / hack to make it work I would be happy.\n. I have the same problem, if anyone knows of a fix / hack to make it work I would be happy.\n. ",
    "helix84": "I just ran into this, too. It would be great if this could be fixed.\n. I just ran into this, too. It would be great if this could be fixed.\n. ",
    "abc-mikey": "Can confirm the same behavior in debian wheezy.\n. Can confirm the same behavior in debian wheezy.\n. ",
    "msva": "One more confirmation (4.9/4.10 kernels, Gentoo).. One more confirmation (4.9/4.10 kernels, Gentoo).. ",
    "sguillia": "One more confirmation (Ubuntu 16.04). One more confirmation (Ubuntu 16.04). ",
    "vi": "Also pushed more extensive scripting support with fork/exec and REPTYR_* envionment variables.\n. Already pushed one more commit that makes '-L' alias to '-l' with REDIRECT.\nIn my programs I use environment variables for configuration more than non-positional arguments.\nUse case: start programs that can clobber terminal or steal it's ownership.\nExample: http://github.com/vi/dive\nAfter starting it in usual mode the calling shell loses terminal owner status. But with \"reptry -L\" the problem is worked around.\n. (Now thinking what to put to dive's documentation... \"Use special vi's version of reptyr\" or \"Use reptry not less that v0.4\")\n. \"dive\" successfully works with \"subcommand\" version of reptyr.\n/* Some area of improvement: it would be good if \"reptyr -L bash\" could work like \"socat -,raw,echo=0 exec:bash,pty,setsid,stderr\". The latter gives job control in the shell, the former gives normal terminal resizing. I want both. */\n. Works. Documented one more \"reptyr\" workaround in \"dive\" (in addition to that socat's).\nThat \"Opened a new pty: /dev/pts/33\" probably should not be displayed at all in \"-L\" mode.\n. Also pushed more extensive scripting support with fork/exec and REPTYR_* envionment variables.\n. Already pushed one more commit that makes '-L' alias to '-l' with REDIRECT.\nIn my programs I use environment variables for configuration more than non-positional arguments.\nUse case: start programs that can clobber terminal or steal it's ownership.\nExample: http://github.com/vi/dive\nAfter starting it in usual mode the calling shell loses terminal owner status. But with \"reptry -L\" the problem is worked around.\n. (Now thinking what to put to dive's documentation... \"Use special vi's version of reptyr\" or \"Use reptry not less that v0.4\")\n. \"dive\" successfully works with \"subcommand\" version of reptyr.\n/* Some area of improvement: it would be good if \"reptyr -L bash\" could work like \"socat -,raw,echo=0 exec:bash,pty,setsid,stderr\". The latter gives job control in the shell, the former gives normal terminal resizing. I want both. */\n. Works. Documented one more \"reptyr\" workaround in \"dive\" (in addition to that socat's).\nThat \"Opened a new pty: /dev/pts/33\" probably should not be displayed at all in \"-L\" mode.\n. ",
    "bjovanovic": "No updates? This is showstopper for pretty much any shell process that does something.. Being able to use reptyr would be great to be able to reattach to long running shell scripts remotely/safely... (once you figure out they are taking too long)...\n. No updates? This is showstopper for pretty much any shell process that does something.. Being able to use reptyr would be great to be able to reattach to long running shell scripts remotely/safely... (once you figure out they are taking too long)...\n. ",
    "piotrkochan": "It'll be really good to develop this feature. therealprologic commented a year ago...\n. It'll be really good to develop this feature. therealprologic commented a year ago...\n. ",
    "droidzone": "Would have been a pretty useful feature to have\n. Would have been a pretty useful feature to have\n. ",
    "stuartpb": "If the kernel features currently available aren't sufficient, perhaps this calls for some new kernel features? (Hell, that's what Google did with cgroups, and had they not we wouldn't have systemd or Docker.)\n. If the kernel features currently available aren't sufficient, perhaps this calls for some new kernel features? (Hell, that's what Google did with cgroups, and had they not we wouldn't have systemd or Docker.)\n. ",
    "drocsid": "I'm running as root using sudo -i, but get unable to attach to pid 3822: Permission denied\n. I'm running as root using sudo -i, but get unable to attach to pid 3822: Permission denied\n. ",
    "cuteboi": "if you're using Ubuntu, there are rules in place to prevent you from doing that.  http://www.bay12forums.com/smf/index.php?topic=65326.0\n. if you're using Ubuntu, there are rules in place to prevent you from doing that.  http://www.bay12forums.com/smf/index.php?topic=65326.0\n. ",
    "Smattr": "This is really cool. Impressive lateral thinking, Nelson.\nA couple of initial surprises that I'm not sure I'd consider bugs:\n1. You can't seem to re-parent a session twice. E.g. if I use reptyr -T 3822 to grab a target session everything works as expected and subprocesses seem to have the same PIDs. However, if I open a new terminal and run reptyr -T 3822 again it can't seem to find the (still existing) session. I get [-] Unable to find the fd for the pty!.\n2. Exiting a backgrounded process of the original terminal leaves it suspended. I.e. If you open a process \"blah\", background it, then reptyr another session, then exit \"blah\", it remains suspended. After exiting the reptyred (is that an acceptable verb now?) session \"blah\" is still suspended and you need to foreground it to have it terminate.\n. Sorry, disregard the second point. I was experimenting using mplayer and it turns out this is normal behaviour outside the context of reptyr. E.g. Start mplayer, Ctrl+Z, bg, quit mplayer. Mplayer remains suspended in the background until you fg it and it terminates.\n. @Sandoras you're new to Linux but you're running reptyr... You really have chosen to dive in at the deep end :)\nSome minimal steps to get a runnable version of the github tip if you don't care about Bash completion and do not have root/sudo:\n$ git clone https://github.com/nelhage/reptyr\n$ cd reptyr\n$ mkdir -p /path/where/reptyr/will/live\n$ make PREFIX=/path/where/reptyr/will/live BASHCOMPDIR=$(mktemp -d) install\n$ /path/where/reptyr/will/live/bin/reptyr --help\n\nHTH. Did you mean version 0.5? It doesn't look to me like it's reached 5.0.\nAs far as I'm aware, the two versions should happily co-exist if that's what you're asking. You might want to uninstall the apt-get-provided version to avoid confusion though.\nWith regards to what directory to put it in, Linux isn't particularly picky about where you put things. For example, you could install it to ~/reptyr and then run it as ~/reptyr/bin/reptyr. If you want to be able to run it by just typing reptyr you'll want to look into modifying your PATH variable and your ~/.bashrc or equivalent. Some searching online should turn up plenty of advice for doing this.. This is really cool. Impressive lateral thinking, Nelson.\nA couple of initial surprises that I'm not sure I'd consider bugs:\n1. You can't seem to re-parent a session twice. E.g. if I use reptyr -T 3822 to grab a target session everything works as expected and subprocesses seem to have the same PIDs. However, if I open a new terminal and run reptyr -T 3822 again it can't seem to find the (still existing) session. I get [-] Unable to find the fd for the pty!.\n2. Exiting a backgrounded process of the original terminal leaves it suspended. I.e. If you open a process \"blah\", background it, then reptyr another session, then exit \"blah\", it remains suspended. After exiting the reptyred (is that an acceptable verb now?) session \"blah\" is still suspended and you need to foreground it to have it terminate.\n. Sorry, disregard the second point. I was experimenting using mplayer and it turns out this is normal behaviour outside the context of reptyr. E.g. Start mplayer, Ctrl+Z, bg, quit mplayer. Mplayer remains suspended in the background until you fg it and it terminates.\n. @Sandoras you're new to Linux but you're running reptyr... You really have chosen to dive in at the deep end :)\nSome minimal steps to get a runnable version of the github tip if you don't care about Bash completion and do not have root/sudo:\n$ git clone https://github.com/nelhage/reptyr\n$ cd reptyr\n$ mkdir -p /path/where/reptyr/will/live\n$ make PREFIX=/path/where/reptyr/will/live BASHCOMPDIR=$(mktemp -d) install\n$ /path/where/reptyr/will/live/bin/reptyr --help\n\nHTH. Did you mean version 0.5? It doesn't look to me like it's reached 5.0.\nAs far as I'm aware, the two versions should happily co-exist if that's what you're asking. You might want to uninstall the apt-get-provided version to avoid confusion though.\nWith regards to what directory to put it in, Linux isn't particularly picky about where you put things. For example, you could install it to ~/reptyr and then run it as ~/reptyr/bin/reptyr. If you want to be able to run it by just typing reptyr you'll want to look into modifying your PATH variable and your ~/.bashrc or equivalent. Some searching online should turn up plenty of advice for doing this.. ",
    "melikyuksel": "Why was this closed even though it still doesn't work?\n. Why was this closed even though it still doesn't work?\n. ",
    "mystica555": "reptyr -T worked fine for me with a stuck old dpkg process that spawned a whiptail subshell for configuration options from another ssh session. \nGreat work and Thanks!\n. reptyr -T worked fine for me with a stuck old dpkg process that spawned a whiptail subshell for configuration options from another ssh session. \nGreat work and Thanks!\n. ",
    "infinity0": "You can reptyr -T the same process twice, the second time you just have to give the PID of the reptyr process that you used the first time.\nYour terminal ends up in a weird state where you can type in commands but the process is running \"at the same time\" in the background, but since it is not a direct child of the shell, you can't do fg or bg to get it back under your control.\nStill, it's useful if you need to move a long-running build process around into a different terminal just to keep it alive, for whatever reason.\n. @akashaggarwal7 not sure, but you can run pstree -alpu to see which processes still exist and how they're all related.. You can reptyr -T the same process twice, the second time you just have to give the PID of the reptyr process that you used the first time.\nYour terminal ends up in a weird state where you can type in commands but the process is running \"at the same time\" in the background, but since it is not a direct child of the shell, you can't do fg or bg to get it back under your control.\nStill, it's useful if you need to move a long-running build process around into a different terminal just to keep it alive, for whatever reason.\n. @akashaggarwal7 not sure, but you can run pstree -alpu to see which processes still exist and how they're all related.. ",
    "akashagarwal7": "@infinity0 Thanks! That worked wonders. Quick question, if I have to do it for the third time, I'd still be using the PID of first reptyr right?\n. @infinity0 Thanks! That worked wonders. Quick question, if I have to do it for the third time, I'd still be using the PID of first reptyr right?\n. ",
    "JeromeJ": "Completely ignore the -T argument for me, it isn't even listed in --help. I got version 0.5, when has this been implemented? I've got the latest version offered by my source depot on Debian 8.. Completely ignore the -T argument for me, it isn't even listed in --help. I got version 0.5, when has this been implemented? I've got the latest version offered by my source depot on Debian 8.. ",
    "Sandoras": "@JeromeJ I have the exact same problem. I found out I have the 0.5 version also, which is about 4 years old now. Since I am new to Linux all in all, I need to figure out how i can upgrade something that is already in the source depot.. Oh well, at least I'm having fun. . @Smattr Thank you! I already installed the 5.0 version of reptyr via apt-get. This will still work? And what directory do you suppose I can put it in?. @JeromeJ I have the exact same problem. I found out I have the 0.5 version also, which is about 4 years old now. Since I am new to Linux all in all, I need to figure out how i can upgrade something that is already in the source depot.. Oh well, at least I'm having fun. . @Smattr Thank you! I already installed the 5.0 version of reptyr via apt-get. This will still work? And what directory do you suppose I can put it in?. ",
    "glensc": "ok committed and pushed. can you merge that, or you need real PR?\n. ok committed and pushed. can you merge that, or you need real PR?\n. ",
    "ghost": "Building b408a3133766e970e6e2f375dbb7fe048e18b27e works for me. The db4fa12621406454f01e9c849180eb7aef5a875b breaks compiling for me. My glibc is 2.18.\n. Great! Now it works perfectly. Thanks!\n. Building b408a3133766e970e6e2f375dbb7fe048e18b27e works for me. The db4fa12621406454f01e9c849180eb7aef5a875b breaks compiling for me. My glibc is 2.18.\n. Great! Now it works perfectly. Thanks!\n. ",
    "qmind": "Yes, it does works at my board! \n. Yes, it does works at my board! \n. ",
    "nbraud": "Indeed not.\nThanks for the tip :D\n. Nevermind. I messed up when comparing with the MIT license, and that's indeed it.\nSorry for the noise.\n. Indeed not.\nThanks for the tip :D\n. Nevermind. I messed up when comparing with the MIT license, and that's indeed it.\nSorry for the noise.\n. ",
    "Thanatermesis": "Same problem here, using Debian Wheezy with a debian kernel (upgraded) 3.10\n. Tried also with the default kernel, I got this:\n~ \u276f\u276f\u276f reptyr 8453                                                             1\n[+] Allocated scratch page: b7723000\n[+] Looking up fds for tty in child.\n[+] Resolved child tty: 880c\n[+] Found an alias for the tty: 0\n[+] Found an alias for the tty: 1\n[+] Found an alias for the tty: 2\n[+] Opened the new tty in the child: 3\n[+] Target is not a session leader, attempting to setsid.\n[+] Forked a child: 8592\n[+] Change pgid for pid 8453\n[+] Change pgid for pid 8579\n[-]  failed: Permission denied\n[-] Failed to setsid: Operation not permitted\n[+] Change pgid for pid 8453\n[+] Change pgid for pid 8592\nUnable to attach to pid 8453: Operation not permitted\n. yes, also tried as root\n. Same problem here, using Debian Wheezy with a debian kernel (upgraded) 3.10\n. Tried also with the default kernel, I got this:\n~ \u276f\u276f\u276f reptyr 8453                                                             1\n[+] Allocated scratch page: b7723000\n[+] Looking up fds for tty in child.\n[+] Resolved child tty: 880c\n[+] Found an alias for the tty: 0\n[+] Found an alias for the tty: 1\n[+] Found an alias for the tty: 2\n[+] Opened the new tty in the child: 3\n[+] Target is not a session leader, attempting to setsid.\n[+] Forked a child: 8592\n[+] Change pgid for pid 8453\n[+] Change pgid for pid 8579\n[-]  failed: Permission denied\n[-] Failed to setsid: Operation not permitted\n[+] Change pgid for pid 8453\n[+] Change pgid for pid 8592\nUnable to attach to pid 8453: Operation not permitted\n. yes, also tried as root\n. ",
    "rossjones": "Did you do this as mentioned in the documentation/readme?\necho 0 > /proc/sys/kernel/yama/ptrace_scope\n. Did you do this as mentioned in the documentation/readme?\necho 0 > /proc/sys/kernel/yama/ptrace_scope\n. ",
    "jensenak": "I had this problem with a pg_basebackup that I wanted to move to a screen session. I followed similar steps to those previously mentioned (suspend, background, disown, reptyr) and got \"permission denied\" exactly as mentioned by Thanatermesis.\nOddly, as root I was unable to assume control of the process, but as postgres, it worked. I hope that helps someone. \n. I had this problem with a pg_basebackup that I wanted to move to a screen session. I followed similar steps to those previously mentioned (suspend, background, disown, reptyr) and got \"permission denied\" exactly as mentioned by Thanatermesis.\nOddly, as root I was unable to assume control of the process, but as postgres, it worked. I hope that helps someone. \n. ",
    "Earnestly": "Note for others, even with ptrace_scope set to 0, the UIDs of both parent and child needs to be the same, thus if you try to reptyr as root (or as a different UID) a program running as your user, it will not let you.\n. Note for others, even with ptrace_scope set to 0, the UIDs of both parent and child needs to be the same, thus if you try to reptyr as root (or as a different UID) a program running as your user, it will not let you.\n. ",
    "eromoe": "echo 0 > /proc/sys/kernel/yama/ptrace_scope donot work in a docker container\nAnd Seems ptrace and strace not work due to security features\nhttps://github.com/moby/moby/issues/20064\nhttps://github.com/moby/moby/issues/21051\nRunning docker with\n--security-opt=\"apparmor=unconfined\" --cap-add=SYS_PTRACE. echo 0 > /proc/sys/kernel/yama/ptrace_scope donot work in a docker container\nAnd Seems ptrace and strace not work due to security features\nhttps://github.com/moby/moby/issues/20064\nhttps://github.com/moby/moby/issues/21051\nRunning docker with\n--security-opt=\"apparmor=unconfined\" --cap-add=SYS_PTRACE. ",
    "embear": "Thanks and sorry for the noise!\n. Thanks and sorry for the noise!\n. ",
    "gnowxilef": "+1\n. +1\n. ",
    "worr": "I'm trying to do some work to make reptyr a bit more portable, and this was the first logical step to doing so.\nYeah, I'll admit that it is highly unlikely that you'd encounter integer overflowing multiplying no. fds, but this struck me as safer, regardless.\nIf you don't want to go down the portable road, I can just write/include xreallocarray and use that instead.\n. My eventual goal is Solaris 10, as I want to deploy it at my site which is a mixed RHEL and Solaris env.\nI'll ditch autotools for now, unless it becomes absolutely necessary for my portability concerns.\n. Wow, yeah. My notion of EINTR semantics was totally wrong. Thanks for the information.\nI believe that tcsetattr(3) can be safely restarted on EINTR. Would you accept a PR for that?\n. I was going off of the POSIX docs, since the Linux manpages don't specify which values for errno are valid: http://pubs.opengroup.org/onlinepubs/009695399/functions/tcsetattr.html\n. I'm trying to do some work to make reptyr a bit more portable, and this was the first logical step to doing so.\nYeah, I'll admit that it is highly unlikely that you'd encounter integer overflowing multiplying no. fds, but this struck me as safer, regardless.\nIf you don't want to go down the portable road, I can just write/include xreallocarray and use that instead.\n. My eventual goal is Solaris 10, as I want to deploy it at my site which is a mixed RHEL and Solaris env.\nI'll ditch autotools for now, unless it becomes absolutely necessary for my portability concerns.\n. Wow, yeah. My notion of EINTR semantics was totally wrong. Thanks for the information.\nI believe that tcsetattr(3) can be safely restarted on EINTR. Would you accept a PR for that?\n. I was going off of the POSIX docs, since the Linux manpages don't specify which values for errno are valid: http://pubs.opengroup.org/onlinepubs/009695399/functions/tcsetattr.html\n. ",
    "elfring": "I would appreciate if the specified output was successfully written to a file.\nHow do you think about to detect every error situation as early as possible?\n. A failure (e. g. full log file) could be indicated by the return value of your program, couldn't it?\nAre you interested to apply aspect-oriented software development?\nHow do you think about to encapsulate error detection and corresponding exception handling as a reusable aspect in your software?\n. I would appreciate if the specified output was successfully written to a file.\nHow do you think about to detect every error situation as early as possible?\n. A failure (e. g. full log file) could be indicated by the return value of your program, couldn't it?\nAre you interested to apply aspect-oriented software development?\nHow do you think about to encapsulate error detection and corresponding exception handling as a reusable aspect in your software?\n. ",
    "johntdyer": "+1\n. +1\n. ",
    "PythonNut": "Does this not work even with root? (31637 was indeed started with SSH)\n. Done, see this gist. (I had to reboot, so the PID is not the same).\n. Hm... oddly the \"Permission denied\" error goes away, and instead reptyr just hangs and does nothing. Would you like another strace?\n. Out of curiosity, is this armhf specific?\n. Oddly enough, that seemed to replace the current shell with the shell instance the process was originally started with, (complete with state). Quite cool, but not the intended result.\nDoes that even make sense at all?\n. So, if I understand this correctly, you do not (and indeed, should not) background and disown the process in the shell. (As demonstrated in #34).\nIf so, then everything seems to be working. (I'll close when the branch is merged)\n. Out of curiosity, what of this is x86 specific?\n. Does this not work even with root? (31637 was indeed started with SSH)\n. Done, see this gist. (I had to reboot, so the PID is not the same).\n. Hm... oddly the \"Permission denied\" error goes away, and instead reptyr just hangs and does nothing. Would you like another strace?\n. Out of curiosity, is this armhf specific?\n. Oddly enough, that seemed to replace the current shell with the shell instance the process was originally started with, (complete with state). Quite cool, but not the intended result.\nDoes that even make sense at all?\n. So, if I understand this correctly, you do not (and indeed, should not) background and disown the process in the shell. (As demonstrated in #34).\nIf so, then everything seems to be working. (I'll close when the branch is merged)\n. Out of curiosity, what of this is x86 specific?\n. ",
    "heckendorfc": "The architecture specific changes are all in the arch/* headers. There were some minor changes between the Linux and FreeBSD arch files, mainly converting between the two struct formats containing the registers.\n. The architecture specific changes are all in the arch/* headers. There were some minor changes between the Linux and FreeBSD arch files, mainly converting between the two struct formats containing the registers.\n. ",
    "gtmanfred": "Sorry, I got busy and couldn't follow up with this.\nThanks!  There was no need to make a release, I could have done the CFLAGs. But since there is a new release anyway, thanks again!\nDaniel\n. Sorry, I got busy and couldn't follow up with this.\nThanks!  There was no need to make a release, I could have done the CFLAGs. But since there is a new release anyway, thanks again!\nDaniel\n. ",
    "scop": "Forgot to note that this is with both reptyr 0.6.1 and the current git.\n. Yes, I believe the setup is like that.\n. With current master the test suite now passes in my local i386 chroot as well as in the Fedora build system. But now build fails for armv7hl:\nhttps://kojipkgs.fedoraproject.org//work/tasks/5778/8785778/build.log\ncc -O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches  -march=armv7-a -mfpu=vfpv3-d16  -mfloat-abi=hard -Wall -Werror -D_GNU_SOURCE -g   -c -o attach.o attach.c\nIn file included from platform/platform.h:26:0,\n                 from attach.c:46:\nattach.c: In function 'setup_steal_socket_child':\nattach.c:398:48: error: 'PAGE_SIZE' undeclared (first use in this function)\n                         steal->child_scratch + PAGE_SIZE/2,\n                                                ^\nplatform/linux/linux.h:73:49: note: in definition of macro 'do_socketcall'\n             __ret = ptrace_socketcall((child), (scratch),               \\\n                                                 ^\nattach.c:398:48: note: each undeclared identifier is reported only once for each function it appears in\n                         steal->child_scratch + PAGE_SIZE/2,\n                                                ^\nplatform/linux/linux.h:73:49: note: in definition of macro 'do_socketcall'\n             __ret = ptrace_socketcall((child), (scratch),               \\\n                                                 ^\nattach.c: In function 'steal_child_pty':\nattach.c:447:48: error: 'PAGE_SIZE' undeclared (first use in this function)\n                         steal->child_scratch + PAGE_SIZE/2,\n                                                ^\nplatform/linux/linux.h:73:49: note: in definition of macro 'do_socketcall'\n             __ret = ptrace_socketcall((child), (scratch),               \\\n                                                 ^\n<builtin>: recipe for target 'attach.o' failed\nmake: *** [attach.o] Error 1\nShould those PAGE_SIZEs be changed to sysconf(_SC_PAGE_SIZE)? If not, I guess (untested) adding #include <asm/page.h> to attach.c would fix it.\n. Build and test suite success now in Fedora devel i386, x86_64, and armv7hl.\n. It's something I tried while trying to track down #67, #68, and #69.\n-Werror in reptyr's CFLAGS does make it prone to build errors with different compiler versions (and other stuff in CFLAGS, like demonstrated by #68). Maybe the Travis builds should in addition to different compilers be build both without any -O (like at the moment) as well as with e.g. -O2?\n. Well, there's not much difference in say make WERROR= and sed -i -e 's/ -Werror//' Makefile, especially since I'm dealing with the Fedora/EPEL reptyr package builds which means I won't be typing that often at all. But it would be cleaner if the CFLAGS I set anyway would be appended to the reptyr defaults instead of the other way around; then I could do make CFLAGS=\"$whatever_i_do_anyway -Wno-error\", maybe something like:\ndiff\n--- a/Makefile\n+++ b/Makefile\n@@ -1,4 +1,5 @@\n-override CFLAGS+=-Wall -Werror -D_GNU_SOURCE -g\n+ALL_CFLAGS := -Wall -Werror -D_GNU_SOURCE -g $(CFLAGS)\n+override CFLAGS = $(ALL_CFLAGS)\n. Seems fine, thanks.\n. Yep, it does.\n. Yes, that fixes the compilation. The actual tests still end up failing:\n$ make test\npython test/basic.py\npython test/tty-steal.py\nTraceback (most recent call last):\n  File \"test/tty-steal.py\", line 12, in <module>\n    prctl.set_ptracer(PR_SET_PTRACER_ANY)\nAttributeError: 'module' object has no attribute 'set_ptracer'\nmake: *** [test] Error 1\nBut I suppose that prctl stuff isn't needed either? If so, would be nice if the prctl python module would be required only wherever its set_ptracer would do any good.\n. It does, however of course the prctl python module is still required even if it doesn't end up being used.\n. python-prctl is not available (in packaged form) in Fedora or EPEL so I'm going to have to patch it out. Not a big problem. But if you still want to consider doing something about this and autodetection is messy/unsatisfactory, perhaps do the Python prctl stuff only if it's not disabled via an environment variable, like SKIP_PRCTL=1 make test and\npython\nif not os.environ.get(\"SKIP_PRCTL\"):\n    import prctl\n    # rest of that stuff\n. ...and there are a few more:\nplatform/linux/linux.c: In function \u2018get_terminal_state\u2019:\nplatform/linux/linux.c:232:13: error: In the GNU C Library, \"major\" is defined\n by <sys/sysmacros.h>. For historical compatibility, it is\n currently defined by <sys/types.h> as well, but we plan to\n remove this soon. To use \"major\", include <sys/sysmacros.h>\n directly. If you did not intend to use a system-defined macro\n \"major\", you should undefine it after including <sys/types.h>. [-Werror]\n     if (major(steal->target_stat.ctty) != UNIX98_PTY_SLAVE_MAJOR) {\n             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                                                                                                                                                                                                                                                                                                                 \nplatform/linux/linux.c: In function \u2018find_master_fd\u2019:\nplatform/linux/linux.c:270:13: error: In the GNU C Library, \"makedev\" is defined\n by <sys/sysmacros.h>. For historical compatibility, it is\n currently defined by <sys/types.h> as well, but we plan to\n remove this soon. To use \"makedev\", include <sys/sysmacros.h>\n directly. If you did not intend to use a system-defined macro\n \"makedev\", you should undefine it after including <sys/types.h>. [-Werror]\n         if (st.st_rdev != PTMX_DEVICE)\n             ^~~~~~~~~~~~~~~~~~~~~~~~~~                                                                                                                                                                                                                                                                                                                                                    \nplatform/linux/linux.c:290:13: error: In the GNU C Library, \"minor\" is defined\n by <sys/sysmacros.h>. For historical compatibility, it is\n currently defined by <sys/types.h> as well, but we plan to\n remove this soon. To use \"minor\", include <sys/sysmacros.h>\n directly. If you did not intend to use a system-defined macro\n \"minor\", you should undefine it after including <sys/types.h>. [-Werror]\n         if (ptn == (int)minor(steal->target_stat.ctty)) {\n             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. Yep, the gcc7 branch builds for me.. One way to get gcc7 and pretty much anything would be to use docker in Travis, for inspiration see e.g. what I've done in https://github.com/rpm-software-management/rpmlint (not necessarily the prettiest, but has worked for me).. Forgot to note that this is with both reptyr 0.6.1 and the current git.\n. Yes, I believe the setup is like that.\n. With current master the test suite now passes in my local i386 chroot as well as in the Fedora build system. But now build fails for armv7hl:\nhttps://kojipkgs.fedoraproject.org//work/tasks/5778/8785778/build.log\ncc -O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches  -march=armv7-a -mfpu=vfpv3-d16  -mfloat-abi=hard -Wall -Werror -D_GNU_SOURCE -g   -c -o attach.o attach.c\nIn file included from platform/platform.h:26:0,\n                 from attach.c:46:\nattach.c: In function 'setup_steal_socket_child':\nattach.c:398:48: error: 'PAGE_SIZE' undeclared (first use in this function)\n                         steal->child_scratch + PAGE_SIZE/2,\n                                                ^\nplatform/linux/linux.h:73:49: note: in definition of macro 'do_socketcall'\n             __ret = ptrace_socketcall((child), (scratch),               \\\n                                                 ^\nattach.c:398:48: note: each undeclared identifier is reported only once for each function it appears in\n                         steal->child_scratch + PAGE_SIZE/2,\n                                                ^\nplatform/linux/linux.h:73:49: note: in definition of macro 'do_socketcall'\n             __ret = ptrace_socketcall((child), (scratch),               \\\n                                                 ^\nattach.c: In function 'steal_child_pty':\nattach.c:447:48: error: 'PAGE_SIZE' undeclared (first use in this function)\n                         steal->child_scratch + PAGE_SIZE/2,\n                                                ^\nplatform/linux/linux.h:73:49: note: in definition of macro 'do_socketcall'\n             __ret = ptrace_socketcall((child), (scratch),               \\\n                                                 ^\n<builtin>: recipe for target 'attach.o' failed\nmake: *** [attach.o] Error 1\nShould those PAGE_SIZEs be changed to sysconf(_SC_PAGE_SIZE)? If not, I guess (untested) adding #include <asm/page.h> to attach.c would fix it.\n. Build and test suite success now in Fedora devel i386, x86_64, and armv7hl.\n. It's something I tried while trying to track down #67, #68, and #69.\n-Werror in reptyr's CFLAGS does make it prone to build errors with different compiler versions (and other stuff in CFLAGS, like demonstrated by #68). Maybe the Travis builds should in addition to different compilers be build both without any -O (like at the moment) as well as with e.g. -O2?\n. Well, there's not much difference in say make WERROR= and sed -i -e 's/ -Werror//' Makefile, especially since I'm dealing with the Fedora/EPEL reptyr package builds which means I won't be typing that often at all. But it would be cleaner if the CFLAGS I set anyway would be appended to the reptyr defaults instead of the other way around; then I could do make CFLAGS=\"$whatever_i_do_anyway -Wno-error\", maybe something like:\ndiff\n--- a/Makefile\n+++ b/Makefile\n@@ -1,4 +1,5 @@\n-override CFLAGS+=-Wall -Werror -D_GNU_SOURCE -g\n+ALL_CFLAGS := -Wall -Werror -D_GNU_SOURCE -g $(CFLAGS)\n+override CFLAGS = $(ALL_CFLAGS)\n. Seems fine, thanks.\n. Yep, it does.\n. Yes, that fixes the compilation. The actual tests still end up failing:\n$ make test\npython test/basic.py\npython test/tty-steal.py\nTraceback (most recent call last):\n  File \"test/tty-steal.py\", line 12, in <module>\n    prctl.set_ptracer(PR_SET_PTRACER_ANY)\nAttributeError: 'module' object has no attribute 'set_ptracer'\nmake: *** [test] Error 1\nBut I suppose that prctl stuff isn't needed either? If so, would be nice if the prctl python module would be required only wherever its set_ptracer would do any good.\n. It does, however of course the prctl python module is still required even if it doesn't end up being used.\n. python-prctl is not available (in packaged form) in Fedora or EPEL so I'm going to have to patch it out. Not a big problem. But if you still want to consider doing something about this and autodetection is messy/unsatisfactory, perhaps do the Python prctl stuff only if it's not disabled via an environment variable, like SKIP_PRCTL=1 make test and\npython\nif not os.environ.get(\"SKIP_PRCTL\"):\n    import prctl\n    # rest of that stuff\n. ...and there are a few more:\nplatform/linux/linux.c: In function \u2018get_terminal_state\u2019:\nplatform/linux/linux.c:232:13: error: In the GNU C Library, \"major\" is defined\n by <sys/sysmacros.h>. For historical compatibility, it is\n currently defined by <sys/types.h> as well, but we plan to\n remove this soon. To use \"major\", include <sys/sysmacros.h>\n directly. If you did not intend to use a system-defined macro\n \"major\", you should undefine it after including <sys/types.h>. [-Werror]\n     if (major(steal->target_stat.ctty) != UNIX98_PTY_SLAVE_MAJOR) {\n             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                                                                                                                                                                                                                                                                                                                 \nplatform/linux/linux.c: In function \u2018find_master_fd\u2019:\nplatform/linux/linux.c:270:13: error: In the GNU C Library, \"makedev\" is defined\n by <sys/sysmacros.h>. For historical compatibility, it is\n currently defined by <sys/types.h> as well, but we plan to\n remove this soon. To use \"makedev\", include <sys/sysmacros.h>\n directly. If you did not intend to use a system-defined macro\n \"makedev\", you should undefine it after including <sys/types.h>. [-Werror]\n         if (st.st_rdev != PTMX_DEVICE)\n             ^~~~~~~~~~~~~~~~~~~~~~~~~~                                                                                                                                                                                                                                                                                                                                                    \nplatform/linux/linux.c:290:13: error: In the GNU C Library, \"minor\" is defined\n by <sys/sysmacros.h>. For historical compatibility, it is\n currently defined by <sys/types.h> as well, but we plan to\n remove this soon. To use \"minor\", include <sys/sysmacros.h>\n directly. If you did not intend to use a system-defined macro\n \"minor\", you should undefine it after including <sys/types.h>. [-Werror]\n         if (ptn == (int)minor(steal->target_stat.ctty)) {\n             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. Yep, the gcc7 branch builds for me.. One way to get gcc7 and pretty much anything would be to use docker in Travis, for inspiration see e.g. what I've done in https://github.com/rpm-software-management/rpmlint (not necessarily the prettiest, but has worked for me).. ",
    "Ulrar": "So I just tried attaching to a resize2fs a colleague had started, I just got that : \n[-] Timed out waiting for child stop.\nNothing else. Does that mean my resize2fs is dead in the background ? Kinda need to know, the client is waiting for this to finish ... No it just hangs.\nThe resize2fs finished a few hours later and I had to kill reptyr, which\nwas still running even though the process it was trying to attach didn't\nexist anymore.\nNo other shell if that matters, it had been disowned\nLe 24 mai 2017 16:57, \"Nelson Elhage\" notifications@github.com a \u00e9crit :\n\n@Ulrar https://github.com/ulrar does reptyr then exit with an error, ot\nwhat do you see after that? That error is itself mostly harmless; It's an\nattempt to ensure that the shell running the old process (if there is one)\nbehaves properly, but we can often still attach if that fails (and the code\nattempts to do so)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/nelhage/reptyr/issues/54#issuecomment-303768933, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AA1Tzwps6Vykp5gY0RIB1VtWAbV18iYyks5r9FNIgaJpZM4DnTyS\n.\n. So I just tried attaching to a resize2fs a colleague had started, I just got that : \n\n[-] Timed out waiting for child stop.\nNothing else. Does that mean my resize2fs is dead in the background ? Kinda need to know, the client is waiting for this to finish ... No it just hangs.\nThe resize2fs finished a few hours later and I had to kill reptyr, which\nwas still running even though the process it was trying to attach didn't\nexist anymore.\nNo other shell if that matters, it had been disowned\nLe 24 mai 2017 16:57, \"Nelson Elhage\" notifications@github.com a \u00e9crit :\n\n@Ulrar https://github.com/ulrar does reptyr then exit with an error, ot\nwhat do you see after that? That error is itself mostly harmless; It's an\nattempt to ensure that the shell running the old process (if there is one)\nbehaves properly, but we can often still attach if that fails (and the code\nattempts to do so)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/nelhage/reptyr/issues/54#issuecomment-303768933, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AA1Tzwps6Vykp5gY0RIB1VtWAbV18iYyks5r9FNIgaJpZM4DnTyS\n.\n. \n",
    "widdma": "Ah so it does, my mistake. There seems to be a bit of conflicting information out there but the YAMA source cleared it up. \n. Ah so it does, my mistake. There seems to be a bit of conflicting information out there but the YAMA source cleared it up. \n. ",
    "andoriyu": "Submitted PR to ports tree: https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=200720\nAs for CI, don't know if there anything for freebsd out there besides local Poudriere setup. \n. Submitted PR to ports tree: https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=200720\nAs for CI, don't know if there anything for freebsd out there besides local Poudriere setup. \n. ",
    "jnpkrn": "Thanks! Can help with testing and perhaps even with some prototypes, just let me know what you think would be optimal.\n. Works well for me, thanks!\n. Thanks! Can help with testing and perhaps even with some prototypes, just let me know what you think would be optimal.\n. Works well for me, thanks!\n. ",
    "trusktr": "sudo reptyr -T $pid didn't work. It seems to freeze the terminal where the job I want to transfer is located, and on the destination terminal where I ran sudo reptyr -T $pid the process just hangs, but I can ctrl+c out of it.\n. sudo reptyr -T $pid didn't work. It seems to freeze the terminal where the job I want to transfer is located, and on the destination terminal where I ran sudo reptyr -T $pid the process just hangs, but I can ctrl+c out of it.\n. ",
    "1j": "I also had this same issue on Ubuntu 14.04, but it was solved by following the suggestion in the README:\necho 0 > /proc/sys/kernel/yama/ptrace_scope\nand then executing reptyr as non-root (using the same user that initiated the process).\n. I also had this same issue on Ubuntu 14.04, but it was solved by following the suggestion in the README:\necho 0 > /proc/sys/kernel/yama/ptrace_scope\nand then executing reptyr as non-root (using the same user that initiated the process).\n. ",
    "xrage": "Faced this issue in ubuntu 16.04 but sudo reptyr -T $pid worked.. Faced this issue in ubuntu 16.04 but sudo reptyr -T $pid worked.. ",
    "ony": "Yes this helps. Thank you.\n. Yes this helps. Thank you.\n. ",
    "tobimensch": "What I mean by restoring it to a usable state is, that I want it to run inside its original terminal again.\n. What I mean by restoring it to a usable state is, that I want it to run inside its original terminal again.\n. ",
    "sairon": "I can't guarantee that PTRACE_TRACEME will cease to exist once the __ptrace_request gets its way to musl but it is true at least in the proposed patch in musl's mailing list: http://www.openwall.com/lists/musl/2015/09/17/1\nIt is also undefined in uClibc and glibc, so this heuristics seems right. Or do you have another suggestion how to decide which signature should be used?\n. I can't guarantee that PTRACE_TRACEME will cease to exist once the __ptrace_request gets its way to musl but it is true at least in the proposed patch in musl's mailing list: http://www.openwall.com/lists/musl/2015/09/17/1\nIt is also undefined in uClibc and glibc, so this heuristics seems right. Or do you have another suggestion how to decide which signature should be used?\n. ",
    "kutsan": "@nelhage Will you support macOS in future? Probably not but just asking.. @nelhage Will you support macOS in future? Probably not but just asking.. ",
    "ericbaranowski": "The only thing I can really find that does anything close to reattaching a process on MacOS is from this repo tmux-MacOSX-pasteboard, I don't really know that much about C, but I'll try to do some comparing between the two programs. The only thing I can really find that does anything close to reattaching a process on MacOS is from this repo tmux-MacOSX-pasteboard, I don't really know that much about C, but I'll try to do some comparing between the two programs. ",
    "tbodt": "The macos debugging api is much more annoying and less well documented than on linux.. @alexreg You'd have to add a new directory under platform.. Likely not, except platform/platform.h.. The macos debugging api is much more annoying and less well documented than on linux.. @alexreg You'd have to add a new directory under platform.. Likely not, except platform/platform.h.. ",
    "alexreg": "I'd definitely be interested in a macOS version too, and would submit a PR, but have no idea what part of the codebase would even need to be changed!. No existing code would have to be changed?. Okay, thanks... I have no idea what the macOS APIs are like, but may have a look soon.. I'd definitely be interested in a macOS version too, and would submit a PR, but have no idea what part of the codebase would even need to be changed!. No existing code would have to be changed?. Okay, thanks... I have no idea what the macOS APIs are like, but may have a look soon.. ",
    "SRGOM": "For me, scala programs run using sbt fail to re-attach despite trying -T on parent sbt process. . For me, scala programs run using sbt fail to re-attach despite trying -T on parent sbt process. . ",
    "wsdjeg": "now neovim and vim8 support job, so they have suprocesses.\nwhen I use this tools I get:\n[-] Process 8411 (python2) shares 8407's process group. Unable to attach.\n(This most commonly means that 8407 has suprocesses).\nUnable to attach to pid 8407: Invalid argument. now neovim and vim8 support job, so they have suprocesses.\nwhen I use this tools I get:\n[-] Process 8411 (python2) shares 8407's process group. Unable to attach.\n(This most commonly means that 8407 has suprocesses).\nUnable to attach to pid 8407: Invalid argument. "
}