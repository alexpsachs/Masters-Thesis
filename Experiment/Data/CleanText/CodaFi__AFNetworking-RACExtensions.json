{
    "CodaFi": "I really do appreciate all that's contained within the PR, it really cleans up a lot of loose ends.  Thanks (especially for the CocoaPods integration) :sparkles: \n. Clear to merge, thanks\n. :+1: Thanks for this.  I'd been meaning to get around to writing a cancellation mechanism, and the vanilla-ization of those signals is just icing on the cake. \n. I'm not sure if you'd be willing to wait for Unit Tests ( #9 ) before I merge this.  It really is a necessary change to the repo, in my eyes, but the lack of any testing is suspect.  This is all my fault, so after those changes get made, go ahead and let me know if you'd like this merged now or later.  I'd be more than willing to write tests for this, unless you had something in mind.\n. I use Expecta (and Specta) across my projects, so you can count on those being ++'d.  It's possible it could eventually be converted to Lagrangian, but that's way in the future.\n. :sailboat: I'll just go ahead and test it all myself.  Thanks for your contribution!\n. Beautiful.  Just to make sure: this won't screw with CocoaPods, will it?\n. Alright, then.  Thanks!  :sailboat: \n. @dewind That would be awesome, thanks!  I just tagged 0.1.2.\n. Thanks again.  :sparkles: \n. My only complaint is that removing the submodules file was uncalled for.  I personally do not use CocoaPods, and I'm sure there are others who would much rather git pull/clone/submodule add than use CP.   Other than that, this looks great.\n. Will it interfere with CocoaPods to have a .gitmodules file?\n. Doesn't it make sense to remove the podfile for the example, then? \n. You've corrupted the submodules reference tree somehow (probably incompatible repos being pulled after you re-added the submodules file).  For each submodule you'll need to git checkout a valid SHA.  Probably a good idea to git pull origin master for the latest of each too.\n. No, you can't just clone and pray.  Git actually maintains a submodules tree, and you've pointed the tree at invalid SHAs.  You need to cd into each submodule, then git checkout a valid SHA.\n. No, I will merge it, but only if the submoduke tree gets restored.\n. Actually, that's your branch... The submodule SHAs you can clone this thing with work just fine.\n. Even if mine are bad, checkout good ones and fix it.  You're allowed to do that without my acting first.  It'll save you a really crappy merge conflict fix.\n. try to merge upstream one more time.  Let's see if I fixed this submodule stuff.\n. You're all absolutely right: 3 months is too long to wait.  I've cherry picked and prodded this pull request and pushed to master.  AFN2 and the latest RAC are there, AFN 1.x has been relegated to its own branch with an older RAC.\nClosing this.\n. This was a problem in the other one.  To be clear: Do not remove my submodules!  I despise CocoaPods.\n. Is there some reason why the two can't coexist?  I'll gladly merge this if you'd revert 1aed51c7bae7bd64ef1aaef3d47a3e93d83dd90a.\n. Fixed by bc5ad64153bb9dbebcb9b9f8c09ad72550ef5baa\n. Dank\u00eb! \n:sailboat: \n. Dank\u00eb!\n:sailboat: \n. Oh wow, thanks!  And you fixed the podspec you generous human being, you!\nThank you again for this.  Merging\n:sparkles: \n. Thanks! :sparkles: \n. Good catch.  Once #34 goes through, I'll merge and retag.\n. There we go.  Thanks for the pull request!  :sparkles: \n:boat: \n. So wait, is this a file from AFNetworking or did you write this yourself?\n. Then I have to request some things of you:\n- Change the license to MIT.  I can't merge anything with the AFN license, it's a hassle.\n- Re-namespace everything.  I use raf to avoid AFNetworking's stuff\n- Adhere to the code style of the rest of the files.\nI'll leave more specific notes in line comments.\n. Hm... Yeah, I meant rac.\n. :sparkles: Thanks! :sparkles:\n. Thank you so much for contributing!\n:boat: \n. This needs to be namespaced.  I don't want to taint the AFNetworking namespace, so RAFN- works just fine.\n. Now that these signals have been de-memoized, the header documentation needs to reflect it.\n. rac_ is fine for the methods, and I did mistype.  Yes, RAF is fine.\n. This entire file seems to be using spaces instead of tabs.  That might be my fault, but could you fix it really quick?\n. Please rename these methods to the previous rac_*Path forms.\n. I'm not entirely sure why this got changed\n. Is Flickr's API not working?\n. Weird.  Thanks for catching it :sparkles: \n. Do the tests still compile with the omission?\n. Having taken a look at the new AFNetworking API, I do think you made the right call with this.  Ignore the other calls to rename methods as well.\n. Let's be consistent and use path instead of URLString for that parameter name\n. This needs to be formatted with tabs.\n. This needs to be a constant string exposed in the header.  Perhaps\nNSString *const RACAFNResponseObjectErrorKey;\n. Pointer stars need consistency.\n. Egyptian curly braces always.\n. Newline here.\n. return error.userInfo[key] ?: underlyingError.userInfo[key];\n. All of these properties need documentation.\n. You don't have to republish this here.  LICENSE.md takes care of that.\n. I do not recommend making that part of this library public.\n. Newline here\n. And here\n. Can we FOUNDATION_EXPORT these instead of extern\n. ",
    "kastiglione": "I should note that this change also implements two changes discussed in https://github.com/CodaFi/AFNetworking-RACExtensions/issues/7#issuecomment-17054760.\nThe first one, sending both operation and responseObject wrapped in a RACTuple, would be a breaking change.\nAlso note that I couldn't test this in the repo's project, but have used this code in my own project.\n. Thanks for asking. Since it's your repo, go ahead and hold off until you're comfortable. Tests are good.\nWhat test framework are you planning to use?\n. Great, and thanks for sharing the library.\n. Call -replayLast on the cold signal to execute the connection and save the response in a replay subject.\nMaking the signals hot by default prevents requests from being composed into a sequence, or for any preflight checks to take place, such as checking for reachability.\nEDIT: If the request signals were created hot, they could still be composed but it would require the caller to wrap each request in +defer:, which is clunky.\n. It's worth documenting this, and I think #11 might be for exactly this.\nWhile not as useful for http requests, there's also -replay and -publish.\n. -replayLast and -replay both return a RACReplaySubject, and as such they can be subscribed to many times and only receive replay's of the original signal's values.\n-replayLazily is like -replay, but does not immediately make the cold signal hot. It gives you the replay, but without immediately triggering the underlying request. From your original comment, it seems you want to make the request immediate.\n. There may be cases where a caller wants to re-trigger a signal's underlying request. I can identify at least one situation where I've used a signal's ability to redo a request, though it was for a demo app for coworkers, so who knows how real world it is.\nIn this code, I create a cold request, then supply a catch block that checks if the response status for unauthorized, in which case the API client performs login followed by the re-triggered original API call. I don't think this would work if the original signal had -replayLazily applied, but I haven't tested it.\n``` objc\nRACSignal* requestSignal = [client rac_postPath:path parameters:parameters];\nreturn [requestSignal catch:^(NSError error) {\n    AFHTTPRequestOperation operation = error.userInfo[RAFNetworkingOperationErrorKey];\n    if (operation.response.statusCode == 401) {\n        return [[client login] sequenceMany:^{\n            return requestSignal;\n        }];\n    } else {\n        return [RACSignal error:error];\n    }\n}];\n``\n. @knshiro It turns out the GitHub/ReactiveCocoa team use-replayLazily` on request signals, as you can see in octokit/octokit.objc\nhttps://github.com/octokit/octokit.objc/blob/ed116e78808ffe13d14a543a533e942e1d4b2d19/OctoKit/OCTClient.m#L205\n. The current podspec uses the 0.1.1 tag, so no, it shouldn't screw with it. When you tag a new version, someone will update the podspec to point to RAC 2.0.\n. :soccer: \n. :eight_spoked_asterisk: \n. I thought about that too. I wasn't sure what the best name would be, I'm glad you brought it up. Do you mean RAFNetworkingOperationErrorKey, which would be a RAF- prefix? Or RAFNNetworkingOperationErrorKey and thus RAFN- prefix?\nOn that note, should the category methods be updated to a new prefix in place of rac_?\n. You're referring to the documentation saying it returns a replay subject?\nhttps://github.com/CodaFi/AFNetworking-RACExtensions/blob/7139284d8d15fa8ca596a19eb38f119cc3f74fce/ReactiveAFNetworking/AFHTTPClient%2BRACSupport.h#L76\n. Indeed the entire .xcodeproj is set to use spaces.\n. ",
    "knshiro": "Hello guys,\nFirst, thank you so much for sharing this library.\nSorry to bother you guys after the change but there is another breaking change coming with this: you cannot execute a request without subscribing to it.\nI'm saying that because I wondered for a while which was the best way to do for these requests. I finally opted for the replay connection because of the previous reason that could give me surprises.\nOne other reason was that it was done like that in the Github api demo project: https://github.com/ReactiveCocoa/GHAPIDemo/blob/master/GHAPIDemo/GHGitHubClient.m\nThat's just my 2 cents worth.\n. I totally get your point. I didn't know about -replayLast.\nThank you very much for the info.\n. And how about replayLazily to be sure the request will not be called twice if subscribed twice ?\n. Sorry I should have been clearer in my last comment. \nFor my first concern I will use replayLast for sure.\nMy last comment was for the library itself: using replayLazily would give a cold signal but that could be triggered only once. \nI was just wondering if it was safer to return this instead. I can understand that for a library you would want to get the most raw signal you can get, I'm just curious about what you would lose by providing this extra layer.\n. Indeed, if you didn't have access to the call parameters path and paramaters but only to the signal there's no way you could have made the same call again.\nThank you very much for your explanation.\n. Thanks for the info. \nI still like your elegant way of recovering from 401. I have similar code in one project, but I was using the operation object object to restart the request. When I have time I'll try to merge your way of doing and wrap the final return in a replayLazily.\n. I can revert this change if you prefer.\nDo you want me to keep the podspec file though?\n. There are two aspects for CocoaPods\nThe Podspec that defines the library. The .gitmodules don't interfere with that.\nThe Podfile which is only for the Example project not the library itself. The .gitmodules could interfere with it, actually it's the .xcodeproj that defines dependencies as links which could be redundant with pods definitions.\nEither way I'm fine since I don't use the example project.\n. That's what I was proposing and I agree, that was uncalled for.\nOn a side note: I don't know if you are not using CocoaPods by choice or if you ever tried it, if it's the latter you should, it rocks :+1: \nGive me a few hours and I'll push a version without the Podfile (I'm out right now)\nCheers\n. I managed to init the submodules but when I updated I got this:\ngit submodule update\nfatal: reference is not a tree: 56262b5c95d0bafc70119edf9981b2b219667272\nfatal: reference is not a tree: 95a97099d2d4e2a36f0dde908ee8488575bdf780\nfatal: reference is not a tree: afc6ada0a5e5d03826021117cc9015a323878843\nUnable to checkout '56262b5c95d0bafc70119edf9981b2b219667272' in submodule path 'External/AFNetworking'\nUnable to checkout '95a97099d2d4e2a36f0dde908ee8488575bdf780' in submodule path 'External/Expecta'\nUnable to checkout 'afc6ada0a5e5d03826021117cc9015a323878843' in submodule path 'External/Specta'\n. How do you want to proceed?\nDo you want me to merge your work?\n. I just cloned the repos from scratch and got the error.\ngit clone https://github.com/CodaFi/AFNetworking-RACExtensions.git\ncd AFNetworking-RACExtensions\ngit submodule init\ngit submodule update\nPulling heads of master branches dependencies is not a good way to go for me.\n. > No, you can't just clone and pray.\nIndeed I should be able to clone and it should work! http://git-scm.com/book/en/Git-Tools-Submodules#Cloning-a-Project-with-Submodules\nI didn't point any tree to any SHAs and they didn't just appear from my /dev/random, you did. So what I was implying before, was for you to fix those references in your project.\n@aehlke Ok no worries\n. Man, you still have 3 out of 4 submodules that point to inexistant commits...\nJust try to click from github you'll see.\nI can't fix it until you fix that.\n. Sorry to disagree but I just reproduced those steps from my office computer:\n1. Go to https://github.com/CodaFi/AFNetworking-RACExtensions/tree/master/External\n2. Click on any commit reference in the list of submodules except ReactiveCocoa (e.g. https://github.com/AFNetworking/AFNetworking/tree/56262b5c95d0bafc70119edf9981b2b219667272 )\n3. Get a 404\nCan anybody else try and tell me if they observe the same thing as me?\n. Flickr API returns a 200 code which is a OK and the subscribeError never gets called.\n. The \" had to be changed to < > because of the use of CocoaPods\nThe \"-  #import \"AFHTTPClient+RACSupport.h\" is my own initiative\n. Is it ok if:\n1. I bridge the old methods from the new one ?\n2. I mark the old ones as deprecated ?\n. I added the relevant headers in the spec files.\n. ",
    "thestoics": "+1\n. If you tag it I will create a new spec and check it in to the cocoapods specs repo.\n. Done. I've checked it in.  \nNext up, AFNetworking 2.0? ;-)  \n\nJustin DeWind | Maker\nAtomic Object | http://atomicobject.com\n[Ph] +1 616 776 6020 [Fx] +1 616 776 6015\nOn Friday, September 27, 2013 at 11:40 PM, Robert Widmann wrote:\n\n@dewind (https://github.com/dewind) That would be awesome, thanks! I just tagged 0.1.2.\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/CodaFi/AFNetworking-RACExtensions/pull/14#issuecomment-25289862).\n. \n",
    "aehlke": "Thanks for this work. AFHTTPRequestOperationManager is legacy support though - AFHTTPSessionManager will be the new way going forward. I've added preliminary support for it in my fork ( https://github.com/aehlke/AFNetworking-RACExtensions ), would love to see this get integrated. I'm new to ObjC so it might need cleaning up, it's also yet untested since I couldn't figure out how to get the test suite to run :/\n. Sorry, it's not in a state ready to merge as it is, did not intend to imply that. The only relevant change is the addition of AFHTTPSessionManager+RACSupport (and AFNetworkReachabilityManager+RACSupport). The rest was me fumbling around with ObjC and XCode for the first time and doing whatever just to get it to build asap - please disregard.\n. Yes thanks, sorry- I haven't worked with submodules before and I know I did it incorrectly by not using the proper submodule commits, I just got it working for what I needed to do. Please ignore anything but the classes I mentioned. Been busy but I can prepare a proper pull request in a couple weeks. Thought I'd let you know of my progress anyway - sorry to confuse you with the other broken bits.\niPhone\u001b$B$+$iAw?.\u001b(B\nNov 2, 2013 6:35 PM\u001b$B!\"\u001b(BRobert Widmann notifications@github.com \u001b$B$N%a%C%;!<%8\u001b(B:\n\nNo, you can't just clone and pray. Git actually maintains a submodules tree, and you've pointed the tree at invalid SHAs. You need to cd into each submodule, then git checkout a valid SHA.\n\u001b$B!=\u001b(B\nReply to this email directly or view it on GitHub.\n. Same for me...\n. \n",
    "nimast": "Does this mean this PR is gonna be left out? :(\n. 404s here as well. Guys, this is an important update to a really great project, lets get it out there!\n. ",
    "aceontech": "Is there anything else left to do to make AFN2-support happen? I'd be glad to help out if necessary.\n. ",
    "jongold": "Bump - is there anything we can do to move this along?\n. ",
    "sstorkel": "I'd be curious to know why you despise CocoaPods...\nI have to admit: I was originally reticent to start using them, too. But\nthey do seem to be sweeping through the Open Source community and it turns\nout they have some nice advantages over Git submodules. For your project, I\ncan't see that there's any real downside to using CocoaPods. Am I missing\nsomething?\n-- Scott\nOn Tue, Dec 17, 2013 at 6:39 AM, Robert Widmann notifications@github.comwrote:\n\nThis was a problem in the other one. To be clear: Do not remove my\nsubmodules! I despise CocoaPods.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/CodaFi/AFNetworking-RACExtensions/pull/19#issuecomment-30755598\n.\n. For standalone libraries, I completely agree! \n\nFor libraries that depend on other popular libraries, as this one does, I find that CocoaPods make development, testing, and debugging easier. I find that it's particularly nice for being able to test or debug against different versions of the libraries you depend on. Not that you can't do this with Git submodules, you certainly can, it's just that CocoaPods make the process a bit easier. It can also be nice to have CocoaPods help with dependency resolution when you have multiple libraries that all want to build on the same components (ex: Specta, Expecta).\n. ",
    "PrideChung": "I love CocoaPods and use it in all of my projects but I also know that not everybody loves it. I think it would be better to leave people choices instead of forcing them to adopt CocoaPods.\n. ",
    "AknEp": "+1\n. ",
    "kevinrenskers": "Awesome, thanks! Can we get a new release with this fix? Or is there a timeline?\n. By the way, should this also be changed? https://github.com/CodaFi/AFNetworking-RACExtensions/blob/master/RACAFNetworking/AFHTTPSessionManager%2BRACSupport.m#L74\n. And this https://github.com/CodaFi/AFNetworking-RACExtensions/blob/master/RACAFNetworking/AFHTTPSessionManager%2BRACSupport.m#L38\n. ",
    "rayshih": "You're welcome! :)\n. OK I'll do it later\n. ",
    "Legoless": "This is a file I wrote myself when using your library. I submitted it to AFNetworking main repo, but according to owner they do not want to pollute the global namespace with category methods. Usually this is not needed much with main AFNetworking blocks as you get operation which contains these objects on the fly. In this case we only get NSError when subscribed and it is annoying to pull out information from it (some boilerplate code). This category removes that.\n. Okay, I'll update this. Just wondering did you mean \"raf\" or \"rac\"? Cause it seems it should be prefixed with rac, not raf.\n. Updated, check if all good. :) Thanks.\n. Okay, LICENSE file is basically from you in this case. What should I do then?\n. ",
    "orkenstein": "Please, merge it @CodaFi \n. ",
    "yarry": "Should I just remove this subspec? \nOr make it unavailable by default?\n. "
}