{
    "necolas": "Fixed by 5a43cabbc4b934b5e1708bf52dd1492e851bb9cd\n. Anyone interested in a quick-start Flight application might be interested in using our generator-flight module.\nIt's a Node.js module that you can install and use to generate a boilerplate Flight application for you - all the dependencies, the application structure, the module loading, and the test setup. It's the easiest way to get set up very quickly with a modern, automated workflow.\nIf you're very hesitant to use Node and Node-based tools (but you really should give them a try!), then you can at least get some guidance on a suitable application structure from the generator-flight README.\nI hope that helps a little while we work on further supporting documentation.\n. Thanks. Closing and moving to the website repo: flightjs/flightjs.github.io#2\n. Closing as something that should be addressed by the Flight website \u2013 https://github.com/flightjs/flightjs.github.io\n. This should be supported now (e.g., https://github.com/flightjs/flight/blob/v1.2.0/doc/mixin_api.md#creating-a-new-component-from-an-existing-one)\n. Fixed by fcdb7ee7881138c0692cb66d81d1bfbd0b05b0e6\n. Thanks!\n. Moved to flightjs/flightjs.github.io#3\n. > Do mixins fit in here at all? I was thinking an Ajax mixin would be a nice one to have.\nYeah, works for mixins too. @angus-c is working on some guidelines / idioms.\n. This is only about this repo now. I'm half way through rewriting / reorganizing the docs.\n. Fixed by aae9426f3a75d769a7240a9ea0f5560b7ac79423\n. > two blocks of \"// loaded without require\" in karma conf?\nYeah should work combined. As long as the shim loads before flight-jasmine (not being used here), it should be fine\u2026I got burnt by that in the generator project and just wanted to ensure that the shimming was always in place before anything else loaded, to have each script run in the same global environment. But probably unnecessary.\n. Done\nhttps://github.com/flightjs/example-app\nhttp://flightjs.github.io/example-app/\n. Fixed by fcdb7ee7881138c0692cb66d81d1bfbd0b05b0e6\n. Done.\nhttp://flightjs.github.io/\nhttps://github.com/flightjs/flightjs.github.io\n. Travis can't find the .travis.yml for some reason, so the build is failing but I don't think it's related to this change: https://travis-ci.org/twitter/flight/builds/7682597\n. @angus-c Fixed this. I had cut off gh-pages before the tests were added.\nAlso fixed master by avoiding using Phantom for the time being.\n. Also, if you use Chrome's Web Inspector, there's an option to see all the event listeners attached to the node you're inspecting.\n. Thanks\n. A better fix is just to run the CI tests in Firefox for now.\n. Fixed by e9c1a2a5fd334b5b75784cc37aaa03432d183e7e\n. Thanks. Included in e9c1a2a5fd334b5b75784cc37aaa03432d183e7e\n. This is done now. There's a separate issue about reworking / removing the mixin documentation.\n. Thanks. Applied in 6feebd661ad0803ac1af9c82a22e4dc464468b11\n. Thanks! Good idea. I added it to the section about Flight components instead.\nLet's catch up next week to talk about the website and your ideas.\n. Should this.node be included here too?\n. Any feedback on this? Should this.node be included in this documentation too?\ncc @angus-c @danwrong @kennethkufluk\n. Updated the changeset\n. Any feedback on this?\n. Fixed each issue in the new diff.\n. Rebased on master following merge of 'docs/base_api'\n. Sure. But since it's referenced by several modules, it's always loaded / bundled.\n. Oh. Loadbuilder doesn't seem to like this syntax when trying to build the standalone flight.js file.\n. This is still an acceptable AMD format according to the spec, but there's no requirement for an AMD loader to scan for dependencies. That may be why LoadBuilder doesn't.\n. Suggestion:\n1. We add the 1.0.11 tag to the same commit as 1.0.9\n2. We make a make a couple of tweaks and then do a minor release 1.1.0.\n. Fixed\n. This change would need accompanying documentation added to doc/base_api.md\n. This could be a good time to address #141 too.\n. Is it worth aliasing to this.defaultAttrs if there's a breaking change?\n. This will be fixed when #294 is merged.\n. Applied in e66b0ec7d644a566b9aca31ec10469d64a596eda\n. closing (> 1 year old)\n. Fixed\n. Thanks. I just noticed this bug last night too. Please can you squash your commits and force push to your patch branch.\n. Opened a new issue to decide whether to introduce code style checks. Going to close this old PR though.\n. Blocked by karma-runner/karma#699\n. Applied in 4ebfa318d1478850e01f64f99746db1accbcd860\n. Moved to flightjs/flightjs.github.io#4\n. The dependency is correct as Flight works with any version of jQuery above 1.8.0.\nIf you want to use jQuery 1.9.x in your project, you should add that version of jQuery as a dependency in your project's bower.json.\n. LGTM. Not sure how I missed it. But looks like we don't have enough test coverage of the logger module.\n. squash these commits please :)\n. Can we close this?\n. closing (nearly 1 year old)\n. ship it!\n. I feel like this.once() is more intuitive than something like a utility.\n. I see. Thanks for the explanation!\n. Also needs documentation added to the doc/utils_api.md file\n. Please could you squash your commits too (you can force push to your feature branch and this PR will be automatically updated)\n. Great, thanks. Still need to move the ran = true line.\n. Looks like it might have been because you referenced utils rather than util. We need to normalize it to utils in our tests at some point.\n. Happy to leave this in your hands to maintain. I see you made a repo that we could link to: https://github.com/cam-stitt/flight-snippets. \n. lgtm\n. I think we can host the UMD bundle (previously know as 'standalone') at http://github.com/flightjs/flight-umd, and update the bower registry to point to that URL. It can include a minified build too.\n. You can get a UMD bundle (minified too) of every release from 1.0.0 to 1.2.0 at https://github.com/flightjs/flight-umd now.\nRe-registering flight on Bower to point to that repo would probably break existing installations if people have been referencing the internal AMD modules directly (as has historically been endorsed in the documentation). Perhaps I should include the AMD library for each existing version, but not for future versions.\n. Added the source library too. Please test this out and let me know of any problems.\n. Has anyone had a chance to try using the flight-umd repo?\n. Would explicitly say that this refers to defaultAttrs.\n. That's right, Flight does not support IE6.\n. The payload has to be an object. Relevant API docs: https://github.com/flightjs/flight/blob/master/doc/base_api.md#thistriggerselector-eventtype--eventpayload\n. @tbrd might have some insight too, as TweetDeck uses client-side rendering with Flight\n. I don't think there's enough value / chance of us using it.\n. we should just remove the year\n. Apparently the date on the notice establishes how far back the claim is made: http://stackoverflow.com/a/2391555. So we'll keep it as 2013.\n. This is the website now - http://flightjs.github.io/. GitHub must be caching the old one.\n. This mixin should address the use cases described - https://github.com/flightjs/flight-with-child-components/\n. See #237 to review a proposed fix. Will close this. Thanks for reporting the issue.\n. you don't need to globally install karma though.\n. ping @angus-c \n. This should be a minor release because it adds new functionality without breaking backwards compatibility - http://semver.org/\n. Thanks. Applied in 5c0d743\n. Thanks. Fixed in d9e834d\n. Adding the debug module to the standalone build would result it in getting shipped into production a lot.\n. Pretty sure there are people using the build for real. Once we port the lib to commonjs, I thought it could be good to have a repo at 'github.com/flightjs/flight-umd' that hosts the built UMD bundles. Then we can point Bower at that and include minified and debug builds too (on a gh-pages branch so they can be hotlinked for use in JS playgrounds). How does that sound?\n. Are you saying the cost of include DEBUG is too small to matter? That's probably true.\n. Not my call to merge it in. Was merely noting that the patch doesn't only affect the standalone build, since it's modifying the main entry file.\n. > lib/debug is already included in the definition, just not exposed\ntrue! i don't think my earlier concerns hold up. lgtm.\n. I've integrated the change into the branch for #294. Thanks for this.\n. Merged in e66b0ec7d644a566b9aca31ec10469d64a596eda\n. Is this still an issue in the stable release (1.2.0) that includes this.attributes?\n. I think the docs are quite clear on this though.\nThe signature clearly shows that the first arg is optional, can be any DOM node, and defaults to the root node. The first example shows an event being bound to document. It's also noted that the handler argument can be a map of targets to callbacks, and that this is effectively event delegation to the root node.\n. If you read @patricknixon's comment, you'll see why I mentioned those other things.\nI can't see why you'd assume that the selector is relative to this.node when that isn't said or implied anywhere, and the examples often use document as the first arg.\n. OK. Going to reopen. Please improve this part of the docs as you see fit.\n. > it seems weird for a component to know about the \"other world\" DOM structure.\nYeah I know what you mean. I think we only use that feature to bind to the document to listen to global events (e.g., data updates). But you could probably use an event emitter for that rather than the DOM, and then enforce encapsulation in the library.\n. none of our codebases use es6 modules. commonjs is widespread and not going away any time soon.\n. yeah i know, but we write all our code as commonjs.\n. Yes I hope so. And available on npm.\n. Changes to jasmine-flight to support a switch to commonjs: https://github.com/flightjs/jasmine-flight/pull/44\n. Would want more review of the changes to the test extensions and the consequences that might have on testing your app. Wasn't so keen on having to let the karma preprocessor/files know about every commonjs file in your dependency tree.\n. the commonjs stuff has been in limbo for a while and isn't a requirement of getting flight registered with npm. so instead, we could publish the UMD build to npm (using a prepublish script to build it) and make sure the test extensions work with node's require.\n. Closing. Will leave the branch in place if there's interest in picking it up in the future.\n. Added npm support https://github.com/flightjs/flight/commit/f462336da539e9bb0c5489969584258c89b62149\nI published 1.3.0 to npm.\n. Fixed the unused 'require'. Should be good to merge now.\n. Thanks. Please could you squash your commits.\n. Thanks!\n. Fixed by 808ca3247d3ce84205c3c8c72dfc4f390e3886c1\n. that's not right. the former is an app boilerplate generator, the latter a flight module generator.\n. We're not going to add version numbers to the source code files. How are you installing the library?\n. @giuseppeg neither will be the element you're after afaik. Question is about whether we can instead augment the jquery event with a new property (e.g., e.delegator), since it's the object that has all the other node references, rather than polluting the event payload. With this Flight pattern, you can't do a simple iteration over the props of the data in a handler, because you have to filter out el in case the handler is used in this delegation pattern. \n. Merged\n. Thanks\n. Closing. Will leave the branch in place if there's interest in picking it up in the future.\n. Would be good if TD could help with that. You're both a consumer of the extensions and using AMD, so checking that they work for you will help get them in the right state. There's an existing PR you can try using - I'd be surprised if it \"just worked\" but you never know!\n. I'd be interested in us require-ing jQuery. We could set it as a peer dependency for the npm-install too. I believe it was originally included as a global due to the requirements of many jQuery plugins. But modern build tools like Webpack have features that can help:\nFor example: inject jQuery into modules that use jQuery as a global variable; or extract jQuery from modules where it is require-ed so that jQuery can be included in a separate bundle.\nhttp://webpack.github.io/docs/list-of-plugins.html#provideplugin\nhttp://webpack.github.io/docs/shimming-modules.html#plugin-provideplugin\nhttp://webpack.github.io/docs/library-and-externals.html\nhttps://github.com/webpack/webpack/issues/108#issuecomment-26287856\nhttp://stackoverflow.com/a/23374129\n. Closing as it looks like Flight is sticking with AMD, and supporting npm can be done simply with a prepublish script that publishes the UMD module to the npm registry.\nI've closed the related tickets: #269, #296\nAnd the related test framework tickets: https://github.com/flightjs/jasmine-flight/pull/44\n. You should still be able to do that once Flight's UMD bundle is published to npm.\n. lgtm\n. It should expose the registry for the umd build too. We only test that the build exposes the same properties as the entry file does.\n. I felt that something like this was missing too, and ended up playing around with hacks like http://codepen.io/necolas/pen/Djbpr to get the desired outcome.\n. Fixed by 5a43cabbc4b934b5e1708bf52dd1492e851bb9cd\n. Anyone interested in a quick-start Flight application might be interested in using our generator-flight module.\nIt's a Node.js module that you can install and use to generate a boilerplate Flight application for you - all the dependencies, the application structure, the module loading, and the test setup. It's the easiest way to get set up very quickly with a modern, automated workflow.\nIf you're very hesitant to use Node and Node-based tools (but you really should give them a try!), then you can at least get some guidance on a suitable application structure from the generator-flight README.\nI hope that helps a little while we work on further supporting documentation.\n. Thanks. Closing and moving to the website repo: flightjs/flightjs.github.io#2\n. Closing as something that should be addressed by the Flight website \u2013 https://github.com/flightjs/flightjs.github.io\n. This should be supported now (e.g., https://github.com/flightjs/flight/blob/v1.2.0/doc/mixin_api.md#creating-a-new-component-from-an-existing-one)\n. Fixed by fcdb7ee7881138c0692cb66d81d1bfbd0b05b0e6\n. Thanks!\n. Moved to flightjs/flightjs.github.io#3\n. > Do mixins fit in here at all? I was thinking an Ajax mixin would be a nice one to have.\nYeah, works for mixins too. @angus-c is working on some guidelines / idioms.\n. This is only about this repo now. I'm half way through rewriting / reorganizing the docs.\n. Fixed by aae9426f3a75d769a7240a9ea0f5560b7ac79423\n. > two blocks of \"// loaded without require\" in karma conf?\nYeah should work combined. As long as the shim loads before flight-jasmine (not being used here), it should be fine\u2026I got burnt by that in the generator project and just wanted to ensure that the shimming was always in place before anything else loaded, to have each script run in the same global environment. But probably unnecessary.\n. Done\nhttps://github.com/flightjs/example-app\nhttp://flightjs.github.io/example-app/\n. Fixed by fcdb7ee7881138c0692cb66d81d1bfbd0b05b0e6\n. Done.\nhttp://flightjs.github.io/\nhttps://github.com/flightjs/flightjs.github.io\n. Travis can't find the .travis.yml for some reason, so the build is failing but I don't think it's related to this change: https://travis-ci.org/twitter/flight/builds/7682597\n. @angus-c Fixed this. I had cut off gh-pages before the tests were added.\nAlso fixed master by avoiding using Phantom for the time being.\n. Also, if you use Chrome's Web Inspector, there's an option to see all the event listeners attached to the node you're inspecting.\n. Thanks\n. A better fix is just to run the CI tests in Firefox for now.\n. Fixed by e9c1a2a5fd334b5b75784cc37aaa03432d183e7e\n. Thanks. Included in e9c1a2a5fd334b5b75784cc37aaa03432d183e7e\n. This is done now. There's a separate issue about reworking / removing the mixin documentation.\n. Thanks. Applied in 6feebd661ad0803ac1af9c82a22e4dc464468b11\n. Thanks! Good idea. I added it to the section about Flight components instead.\nLet's catch up next week to talk about the website and your ideas.\n. Should this.node be included here too?\n. Any feedback on this? Should this.node be included in this documentation too?\ncc @angus-c @danwrong @kennethkufluk\n. Updated the changeset\n. Any feedback on this?\n. Fixed each issue in the new diff.\n. Rebased on master following merge of 'docs/base_api'\n. Sure. But since it's referenced by several modules, it's always loaded / bundled.\n. Oh. Loadbuilder doesn't seem to like this syntax when trying to build the standalone flight.js file.\n. This is still an acceptable AMD format according to the spec, but there's no requirement for an AMD loader to scan for dependencies. That may be why LoadBuilder doesn't.\n. Suggestion:\n1. We add the 1.0.11 tag to the same commit as 1.0.9\n2. We make a make a couple of tweaks and then do a minor release 1.1.0.\n. Fixed\n. This change would need accompanying documentation added to doc/base_api.md\n. This could be a good time to address #141 too.\n. Is it worth aliasing to this.defaultAttrs if there's a breaking change?\n. This will be fixed when #294 is merged.\n. Applied in e66b0ec7d644a566b9aca31ec10469d64a596eda\n. closing (> 1 year old)\n. Fixed\n. Thanks. I just noticed this bug last night too. Please can you squash your commits and force push to your patch branch.\n. Opened a new issue to decide whether to introduce code style checks. Going to close this old PR though.\n. Blocked by karma-runner/karma#699\n. Applied in 4ebfa318d1478850e01f64f99746db1accbcd860\n. Moved to flightjs/flightjs.github.io#4\n. The dependency is correct as Flight works with any version of jQuery above 1.8.0.\nIf you want to use jQuery 1.9.x in your project, you should add that version of jQuery as a dependency in your project's bower.json.\n. LGTM. Not sure how I missed it. But looks like we don't have enough test coverage of the logger module.\n. squash these commits please :)\n. Can we close this?\n. closing (nearly 1 year old)\n. ship it!\n. I feel like this.once() is more intuitive than something like a utility.\n. I see. Thanks for the explanation!\n. Also needs documentation added to the doc/utils_api.md file\n. Please could you squash your commits too (you can force push to your feature branch and this PR will be automatically updated)\n. Great, thanks. Still need to move the ran = true line.\n. Looks like it might have been because you referenced utils rather than util. We need to normalize it to utils in our tests at some point.\n. Happy to leave this in your hands to maintain. I see you made a repo that we could link to: https://github.com/cam-stitt/flight-snippets. \n. lgtm\n. I think we can host the UMD bundle (previously know as 'standalone') at http://github.com/flightjs/flight-umd, and update the bower registry to point to that URL. It can include a minified build too.\n. You can get a UMD bundle (minified too) of every release from 1.0.0 to 1.2.0 at https://github.com/flightjs/flight-umd now.\nRe-registering flight on Bower to point to that repo would probably break existing installations if people have been referencing the internal AMD modules directly (as has historically been endorsed in the documentation). Perhaps I should include the AMD library for each existing version, but not for future versions.\n. Added the source library too. Please test this out and let me know of any problems.\n. Has anyone had a chance to try using the flight-umd repo?\n. Would explicitly say that this refers to defaultAttrs.\n. That's right, Flight does not support IE6.\n. The payload has to be an object. Relevant API docs: https://github.com/flightjs/flight/blob/master/doc/base_api.md#thistriggerselector-eventtype--eventpayload\n. @tbrd might have some insight too, as TweetDeck uses client-side rendering with Flight\n. I don't think there's enough value / chance of us using it.\n. we should just remove the year\n. Apparently the date on the notice establishes how far back the claim is made: http://stackoverflow.com/a/2391555. So we'll keep it as 2013.\n. This is the website now - http://flightjs.github.io/. GitHub must be caching the old one.\n. This mixin should address the use cases described - https://github.com/flightjs/flight-with-child-components/\n. See #237 to review a proposed fix. Will close this. Thanks for reporting the issue.\n. you don't need to globally install karma though.\n. ping @angus-c \n. This should be a minor release because it adds new functionality without breaking backwards compatibility - http://semver.org/\n. Thanks. Applied in 5c0d743\n. Thanks. Fixed in d9e834d\n. Adding the debug module to the standalone build would result it in getting shipped into production a lot.\n. Pretty sure there are people using the build for real. Once we port the lib to commonjs, I thought it could be good to have a repo at 'github.com/flightjs/flight-umd' that hosts the built UMD bundles. Then we can point Bower at that and include minified and debug builds too (on a gh-pages branch so they can be hotlinked for use in JS playgrounds). How does that sound?\n. Are you saying the cost of include DEBUG is too small to matter? That's probably true.\n. Not my call to merge it in. Was merely noting that the patch doesn't only affect the standalone build, since it's modifying the main entry file.\n. > lib/debug is already included in the definition, just not exposed\ntrue! i don't think my earlier concerns hold up. lgtm.\n. I've integrated the change into the branch for #294. Thanks for this.\n. Merged in e66b0ec7d644a566b9aca31ec10469d64a596eda\n. Is this still an issue in the stable release (1.2.0) that includes this.attributes?\n. I think the docs are quite clear on this though.\nThe signature clearly shows that the first arg is optional, can be any DOM node, and defaults to the root node. The first example shows an event being bound to document. It's also noted that the handler argument can be a map of targets to callbacks, and that this is effectively event delegation to the root node.\n. If you read @patricknixon's comment, you'll see why I mentioned those other things.\nI can't see why you'd assume that the selector is relative to this.node when that isn't said or implied anywhere, and the examples often use document as the first arg.\n. OK. Going to reopen. Please improve this part of the docs as you see fit.\n. > it seems weird for a component to know about the \"other world\" DOM structure.\nYeah I know what you mean. I think we only use that feature to bind to the document to listen to global events (e.g., data updates). But you could probably use an event emitter for that rather than the DOM, and then enforce encapsulation in the library.\n. none of our codebases use es6 modules. commonjs is widespread and not going away any time soon.\n. yeah i know, but we write all our code as commonjs.\n. Yes I hope so. And available on npm.\n. Changes to jasmine-flight to support a switch to commonjs: https://github.com/flightjs/jasmine-flight/pull/44\n. Would want more review of the changes to the test extensions and the consequences that might have on testing your app. Wasn't so keen on having to let the karma preprocessor/files know about every commonjs file in your dependency tree.\n. the commonjs stuff has been in limbo for a while and isn't a requirement of getting flight registered with npm. so instead, we could publish the UMD build to npm (using a prepublish script to build it) and make sure the test extensions work with node's require.\n. Closing. Will leave the branch in place if there's interest in picking it up in the future.\n. Added npm support https://github.com/flightjs/flight/commit/f462336da539e9bb0c5489969584258c89b62149\nI published 1.3.0 to npm.\n. Fixed the unused 'require'. Should be good to merge now.\n. Thanks. Please could you squash your commits.\n. Thanks!\n. Fixed by 808ca3247d3ce84205c3c8c72dfc4f390e3886c1\n. that's not right. the former is an app boilerplate generator, the latter a flight module generator.\n. We're not going to add version numbers to the source code files. How are you installing the library?\n. @giuseppeg neither will be the element you're after afaik. Question is about whether we can instead augment the jquery event with a new property (e.g., e.delegator), since it's the object that has all the other node references, rather than polluting the event payload. With this Flight pattern, you can't do a simple iteration over the props of the data in a handler, because you have to filter out el in case the handler is used in this delegation pattern. \n. Merged\n. Thanks\n. Closing. Will leave the branch in place if there's interest in picking it up in the future.\n. Would be good if TD could help with that. You're both a consumer of the extensions and using AMD, so checking that they work for you will help get them in the right state. There's an existing PR you can try using - I'd be surprised if it \"just worked\" but you never know!\n. I'd be interested in us require-ing jQuery. We could set it as a peer dependency for the npm-install too. I believe it was originally included as a global due to the requirements of many jQuery plugins. But modern build tools like Webpack have features that can help:\nFor example: inject jQuery into modules that use jQuery as a global variable; or extract jQuery from modules where it is require-ed so that jQuery can be included in a separate bundle.\nhttp://webpack.github.io/docs/list-of-plugins.html#provideplugin\nhttp://webpack.github.io/docs/shimming-modules.html#plugin-provideplugin\nhttp://webpack.github.io/docs/library-and-externals.html\nhttps://github.com/webpack/webpack/issues/108#issuecomment-26287856\nhttp://stackoverflow.com/a/23374129\n. Closing as it looks like Flight is sticking with AMD, and supporting npm can be done simply with a prepublish script that publishes the UMD module to the npm registry.\nI've closed the related tickets: #269, #296\nAnd the related test framework tickets: https://github.com/flightjs/jasmine-flight/pull/44\n. You should still be able to do that once Flight's UMD bundle is published to npm.\n. lgtm\n. It should expose the registry for the umd build too. We only test that the build exposes the same properties as the entry file does.\n. I felt that something like this was missing too, and ended up playing around with hacks like http://codepen.io/necolas/pen/Djbpr to get the desired outcome.\n. ",
    "tbrd": "It's done, on another ticket. Probably should have mentioned that.\nOn 4 March 2013 18:45, Nicolas Gallagher notifications@github.com wrote:\n\nWhy did this get closed?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/twitter/flight/issues/2#issuecomment-14397191\n.\n\n\ntom hamshere\n@tbrd\nlondon\n. Well, TweetDeck renders everything client-side, in the UI components. We use Hogan, so the templates are pre-compiled and very fast to render. HTML is definitely a UI thing, not a data thing, so it should be exclusively ui components that deal with it. \nAs for getting the templates, check out the flight-hogan mixin, (https://github.com/tbrd/flight-hogan). It uses the mixin definition scope to cache compiled templates for the whole site, so there's no need to pass them as arguments. In TweetDeck, we have a templates cache outside the flight framework - a throwback from the pre-flight days.\nI figure templates are closely tied to the UI component that renders them - it's going to be rare that a UI component is going to render different templates with the same data. Though, thinking about it, there might be some room for decoupling there.\n. They're shared across instances.\nOn 24 Feb 2014 19:27, \"giuseppeg\" notifications@github.com wrote:\n\n@tbrd https://github.com/tbrd are those top level variables (the one\nholded in the mixin definition scope) shared across the component instances\nor does each instance get a copy of them?\n\nReply to this email directly or view it on GitHubhttps://github.com/flightjs/flight/issues/224#issuecomment-35924951\n.\n. We've already got a google group: https://groups.google.com/forum/#!forum/twitter-flight\n. Exposure, accessibility. Not everyone uses groups.\n\nOn 9 March 2014 13:34, Vsevolod Ivanov notifications@github.com wrote:\n\ni know, i wrote few messages here. i said that to point on - \"why we need\nsomething worse when we already have something better\", imho ofc :)\n\nReply to this email directly or view it on GitHubhttps://github.com/flightjs/flight/issues/228#issuecomment-37127059\n.\n. We've been discussing this at TweetDeck. It is really useful to be able to\ntear down a component and all the child components it instantiated. The\nfolks at TweetDeck have built a mixin for this, but (if I understood\ncorrectly) feel that it does belong in the core. I'd like to see that\nhappen, but there are some bigger architectural fish to fry first.\n\nOn 19 March 2014 08:09, giuseppeg notifications@github.com wrote:\n\nThere is no such thing as collections in Flight.\nIn fact\nComponents do not engage each other directly\n.\nIn order to do what you propose, one can write mixins and pack(compose)\nthem in a component.\neg.\nreturn defineComponent(Overlay, withDialog, withDrag, withKeyboardNav, withWhatever);\n\nReply to this email directly or view it on GitHubhttps://github.com/flightjs/flight/issues/231#issuecomment-38026121\n.\n. Well, no. TweetDeck has implemented withTeardown. A component using this\nmixin will automatically teardown all child components on teardown. There\nare no named collections. I feel like this would be prone to error - would\nit not be quite easy to accidentally tear down the wrong component by\nmixing up collection names or through maintenance errors?\n\nOn 19 March 2014 09:56, giuseppeg notifications@github.com wrote:\n\n@tbrd https://github.com/tbrd Yeah something like this I guess\nhttps://gist.github.com/giuseppeg/9638666\n\nReply to this email directly or view it on GitHubhttps://github.com/flightjs/flight/issues/231#issuecomment-38033361\n.\n. That's a slightly different use-case, more related to pages. Why not just\nuse registry.teardownAll()?\n\nOn 19 March 2014 14:35, Robert Lavoie AKA BobbyDigital \nnotifications@github.com wrote:\n\nI understand components don't engage with each other directly and they\nwouldn't in this case. Each component would just assign themselves to a\ncollection. I can see how random collection names could cause confusion.\nMy issue was that in my SPA, when you went from one route to another, I\nneed to tear down all the components on the old route. The ability to tear\ndown a component and all the child components it instantiated, would solve\nthis issue. I'm only suggesting adding this feature to the core, because I\ncan see this being helpful in most applications.\n\nReply to this email directly or view it on GitHubhttps://github.com/flightjs/flight/issues/231#issuecomment-38057243\n.\n. I'm not sure I agree either. I certainly made this mistake when I first started using Flight. It's easy to assume this behaviour, so some additional clarity around the actual behaviour would make sense.\n. To say \"I can't see why you'd assume\" rather than \"I'm not sure I\nunderstand. Can you tell me why you think...\" feels rather aggressive. Can\nwe have a conversation, rather than an argument?\n\nI shouldn't have to defend why I felt confused. That implies some stupidity\non my part. The very fact that myself and others were confused means that\nthis is in some way confusing.\nOn 23 July 2014 18:30, Nicolas Gallagher notifications@github.com wrote:\n\nIf you read @patricknixon https://github.com/patricknixon's comment,\nyou'll see why I mentioned those other things.\nI can't see why you'd assume that the select is relative to this.node\nwhen that isn't said or implied anywhere, and the examples often use\ndocument as the first arg.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/flightjs/flight/issues/265#issuecomment-49907187.\n. I think this conversation is getting off topic. The basic thing is, it\nmakes sense to have a line in the documentation that clarifies that this.on\ndoes not behave like this.$node.on\n\nOn 24 July 2014 18:54, Staffan Eketorp notifications@github.com wrote:\n\n@angus-c https://github.com/angus-c sure...guess I was a little\nunclear. I was primarily thinking of code that calls attachTo. By moving\nthe selectors to attr you open of for the possibility of overriding,\nwhich is of course also valid in the case of a mixin. This may or may not\nbe what you want. Point is, you don't have an option. There is not such\nthing as defaultPrivateAttrs or defaultProtectedAttrs.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/flightjs/flight/issues/265#issuecomment-50053668.\n. I don't think this is the issue, but there's no need to keep a reference to\nself in your mixin. Methods are executed in the component context. E.g.:\n\ndefine(function (require) {\n     'use strict';\n     var defineComponent = require(\u2018flight/lib/component\u2019);\n     var myMixin = require(\u2018mixins/ui/withMyMixin\u2019);\nreturn defineComponent(MyComponent, withMyMixin);\nfunction MyComponent() {\n    this.doAnimations = function(){\n        var someObject = {};\n        someObject.field = 'something'\n        this.trigger('triggerAnimation', someObject);\n    }\n}\n});\ndefine(function () {\n     'use strict';\n     return MyMixin;\n     function MyMixin() {\n      this.after('initialize', function () {\n            this.on('triggerAnimation', this.startAnimations);\n          });\n          this.startAnimations = function(){\n              // doing some work here\n          }\n     }\n});\nIf you need to use a method as a callback from a jquery method (such as\nanimate complete), you can bind it to the current context:\nthis.startAnimations = function () {\n  this.select('aSelector').animate({top: 100}, {\n   complete: this.onAnimationComplete.bind(this)\n  });\n};\n. We've been making use of this - it's a nice, easy reference to the node\nwhich matched the delegate selector. Useful for looking at attributes on\nel. IIRC, otherwise you have to do a $(event.target).closest(selector), or\nsomething similar.\nOn 27 July 2014 22:19, Nicolas Gallagher notifications@github.com wrote:\n\nThe delegate pattern for this.on adds el to the data:\nthis.on('eventName', {\n  someSelector: f});\nthis.f = function (e, data) {\n  console.log(data.el);\n  // => DOMNode};\nCan't work out why. Thanks\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/flightjs/flight/issues/290.\n. I like the idea of being able to teardown a component from the parent. We do this anyway with events - would seem sensible to provide a simple API for that. \n. The naming convention was a decision we made very early on (about 3 years\nago now). There's certainly no expectation that anyone else will follow\nTwitter's conventions, nor have we any idea whether they're actually\nhelpful. We've just never tried anything else.\n\nOn 16 April 2015 at 16:34, Brett Willemsen notifications@github.com wrote:\n\nSo I'm looking to switch from a in-house framework to Flight, they're very\nsimilar except that Flight is obviously supported by many more developers.\nI had a question about attributes though.\nIn our in-house solution we define defaultAttributes as:\n{ events: {\n    'bob': 'blahblah',\n    'bill': 'bloobloo' },\n  selectors: {\n    'anne': 'meepmeep',\n    'ariel': 'moopmoop' },\n  ...\n}\nas opposed to flight which suggest defining the defaultAttributes as:\n{ 'bobEvent': 'blahblah',\n  'billEvent': 'bloobloo',\n  'anneSelector': 'meepmeep',\n  'arielSelector': 'moopmoop',\n  ...\n}\nWe found that the Flight standard is very verbose. and results in a lot of\nrepetition in our code. Is this really the best practice? We've thought\nabout creating a mixin which will use 'selector.' for .select() but that\nseems really hacky and I would rather not have to do that.\nAlso it looks like if I were to create a mixin I would also have to do it\nfor .on as well. :\\\nThoughts?\nP.S. Posted this same question on Gitter but no replies, sorry for the\ndouble post.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/flightjs/flight/issues/344.\n. It's done, on another ticket. Probably should have mentioned that.\n\nOn 4 March 2013 18:45, Nicolas Gallagher notifications@github.com wrote:\n\nWhy did this get closed?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/twitter/flight/issues/2#issuecomment-14397191\n.\n\n\ntom hamshere\n@tbrd\nlondon\n. Well, TweetDeck renders everything client-side, in the UI components. We use Hogan, so the templates are pre-compiled and very fast to render. HTML is definitely a UI thing, not a data thing, so it should be exclusively ui components that deal with it. \nAs for getting the templates, check out the flight-hogan mixin, (https://github.com/tbrd/flight-hogan). It uses the mixin definition scope to cache compiled templates for the whole site, so there's no need to pass them as arguments. In TweetDeck, we have a templates cache outside the flight framework - a throwback from the pre-flight days.\nI figure templates are closely tied to the UI component that renders them - it's going to be rare that a UI component is going to render different templates with the same data. Though, thinking about it, there might be some room for decoupling there.\n. They're shared across instances.\nOn 24 Feb 2014 19:27, \"giuseppeg\" notifications@github.com wrote:\n\n@tbrd https://github.com/tbrd are those top level variables (the one\nholded in the mixin definition scope) shared across the component instances\nor does each instance get a copy of them?\n\nReply to this email directly or view it on GitHubhttps://github.com/flightjs/flight/issues/224#issuecomment-35924951\n.\n. We've already got a google group: https://groups.google.com/forum/#!forum/twitter-flight\n. Exposure, accessibility. Not everyone uses groups.\n\nOn 9 March 2014 13:34, Vsevolod Ivanov notifications@github.com wrote:\n\ni know, i wrote few messages here. i said that to point on - \"why we need\nsomething worse when we already have something better\", imho ofc :)\n\nReply to this email directly or view it on GitHubhttps://github.com/flightjs/flight/issues/228#issuecomment-37127059\n.\n. We've been discussing this at TweetDeck. It is really useful to be able to\ntear down a component and all the child components it instantiated. The\nfolks at TweetDeck have built a mixin for this, but (if I understood\ncorrectly) feel that it does belong in the core. I'd like to see that\nhappen, but there are some bigger architectural fish to fry first.\n\nOn 19 March 2014 08:09, giuseppeg notifications@github.com wrote:\n\nThere is no such thing as collections in Flight.\nIn fact\nComponents do not engage each other directly\n.\nIn order to do what you propose, one can write mixins and pack(compose)\nthem in a component.\neg.\nreturn defineComponent(Overlay, withDialog, withDrag, withKeyboardNav, withWhatever);\n\nReply to this email directly or view it on GitHubhttps://github.com/flightjs/flight/issues/231#issuecomment-38026121\n.\n. Well, no. TweetDeck has implemented withTeardown. A component using this\nmixin will automatically teardown all child components on teardown. There\nare no named collections. I feel like this would be prone to error - would\nit not be quite easy to accidentally tear down the wrong component by\nmixing up collection names or through maintenance errors?\n\nOn 19 March 2014 09:56, giuseppeg notifications@github.com wrote:\n\n@tbrd https://github.com/tbrd Yeah something like this I guess\nhttps://gist.github.com/giuseppeg/9638666\n\nReply to this email directly or view it on GitHubhttps://github.com/flightjs/flight/issues/231#issuecomment-38033361\n.\n. That's a slightly different use-case, more related to pages. Why not just\nuse registry.teardownAll()?\n\nOn 19 March 2014 14:35, Robert Lavoie AKA BobbyDigital \nnotifications@github.com wrote:\n\nI understand components don't engage with each other directly and they\nwouldn't in this case. Each component would just assign themselves to a\ncollection. I can see how random collection names could cause confusion.\nMy issue was that in my SPA, when you went from one route to another, I\nneed to tear down all the components on the old route. The ability to tear\ndown a component and all the child components it instantiated, would solve\nthis issue. I'm only suggesting adding this feature to the core, because I\ncan see this being helpful in most applications.\n\nReply to this email directly or view it on GitHubhttps://github.com/flightjs/flight/issues/231#issuecomment-38057243\n.\n. I'm not sure I agree either. I certainly made this mistake when I first started using Flight. It's easy to assume this behaviour, so some additional clarity around the actual behaviour would make sense.\n. To say \"I can't see why you'd assume\" rather than \"I'm not sure I\nunderstand. Can you tell me why you think...\" feels rather aggressive. Can\nwe have a conversation, rather than an argument?\n\nI shouldn't have to defend why I felt confused. That implies some stupidity\non my part. The very fact that myself and others were confused means that\nthis is in some way confusing.\nOn 23 July 2014 18:30, Nicolas Gallagher notifications@github.com wrote:\n\nIf you read @patricknixon https://github.com/patricknixon's comment,\nyou'll see why I mentioned those other things.\nI can't see why you'd assume that the select is relative to this.node\nwhen that isn't said or implied anywhere, and the examples often use\ndocument as the first arg.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/flightjs/flight/issues/265#issuecomment-49907187.\n. I think this conversation is getting off topic. The basic thing is, it\nmakes sense to have a line in the documentation that clarifies that this.on\ndoes not behave like this.$node.on\n\nOn 24 July 2014 18:54, Staffan Eketorp notifications@github.com wrote:\n\n@angus-c https://github.com/angus-c sure...guess I was a little\nunclear. I was primarily thinking of code that calls attachTo. By moving\nthe selectors to attr you open of for the possibility of overriding,\nwhich is of course also valid in the case of a mixin. This may or may not\nbe what you want. Point is, you don't have an option. There is not such\nthing as defaultPrivateAttrs or defaultProtectedAttrs.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/flightjs/flight/issues/265#issuecomment-50053668.\n. I don't think this is the issue, but there's no need to keep a reference to\nself in your mixin. Methods are executed in the component context. E.g.:\n\ndefine(function (require) {\n     'use strict';\n     var defineComponent = require(\u2018flight/lib/component\u2019);\n     var myMixin = require(\u2018mixins/ui/withMyMixin\u2019);\nreturn defineComponent(MyComponent, withMyMixin);\nfunction MyComponent() {\n    this.doAnimations = function(){\n        var someObject = {};\n        someObject.field = 'something'\n        this.trigger('triggerAnimation', someObject);\n    }\n}\n});\ndefine(function () {\n     'use strict';\n     return MyMixin;\n     function MyMixin() {\n      this.after('initialize', function () {\n            this.on('triggerAnimation', this.startAnimations);\n          });\n          this.startAnimations = function(){\n              // doing some work here\n          }\n     }\n});\nIf you need to use a method as a callback from a jquery method (such as\nanimate complete), you can bind it to the current context:\nthis.startAnimations = function () {\n  this.select('aSelector').animate({top: 100}, {\n   complete: this.onAnimationComplete.bind(this)\n  });\n};\n. We've been making use of this - it's a nice, easy reference to the node\nwhich matched the delegate selector. Useful for looking at attributes on\nel. IIRC, otherwise you have to do a $(event.target).closest(selector), or\nsomething similar.\nOn 27 July 2014 22:19, Nicolas Gallagher notifications@github.com wrote:\n\nThe delegate pattern for this.on adds el to the data:\nthis.on('eventName', {\n  someSelector: f});\nthis.f = function (e, data) {\n  console.log(data.el);\n  // => DOMNode};\nCan't work out why. Thanks\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/flightjs/flight/issues/290.\n. I like the idea of being able to teardown a component from the parent. We do this anyway with events - would seem sensible to provide a simple API for that. \n. The naming convention was a decision we made very early on (about 3 years\nago now). There's certainly no expectation that anyone else will follow\nTwitter's conventions, nor have we any idea whether they're actually\nhelpful. We've just never tried anything else.\n\nOn 16 April 2015 at 16:34, Brett Willemsen notifications@github.com wrote:\n\nSo I'm looking to switch from a in-house framework to Flight, they're very\nsimilar except that Flight is obviously supported by many more developers.\nI had a question about attributes though.\nIn our in-house solution we define defaultAttributes as:\n{ events: {\n    'bob': 'blahblah',\n    'bill': 'bloobloo' },\n  selectors: {\n    'anne': 'meepmeep',\n    'ariel': 'moopmoop' },\n  ...\n}\nas opposed to flight which suggest defining the defaultAttributes as:\n{ 'bobEvent': 'blahblah',\n  'billEvent': 'bloobloo',\n  'anneSelector': 'meepmeep',\n  'arielSelector': 'moopmoop',\n  ...\n}\nWe found that the Flight standard is very verbose. and results in a lot of\nrepetition in our code. Is this really the best practice? We've thought\nabout creating a mixin which will use 'selector.' for .select() but that\nseems really hacky and I would rather not have to do that.\nAlso it looks like if I were to create a mixin I would also have to do it\nfor .on as well. :\\\nThoughts?\nP.S. Posted this same question on Gitter but no replies, sorry for the\ndouble post.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/flightjs/flight/issues/344.\n. \n",
    "cpb": ":+1:\n. :+1:\n. ",
    "angus-c": "@akre54 thanks for this. Will verify performance across browsers shortly.\n. @dilvie although the iframe thing can be dodgy for testing instanceof in the case of $ being passed between iframes, I think it's highly unlikely you'd be running flight in one frame and installing jquery in another\n@akre54 FWIW my tests show instance of to be slightly slower in chrome and significantly slower in firefox and IE. But I'm not really concerned about performance in either case. It's just not called often enough for 100,000 times per second to be considered a concern.\nIt would be nice if flight were decoupled from jQuery, but that is a huge project and this change would be the tip of the iceberg (actually that test might no longer even be required if we had no jQuery) \n. Thanks - will take a look. \nClosing since not an issue or bug\n. thanks! fixed\n. Not a bad idea - will consider this. Thanks!\n. pedantry welcome :) \n. current dependency is jquery 1.83 - will modify when upgrading to jquery 1.9\n. Removed $.browser reference\nsee https://github.com/twitter/flight/commit/4109c2d872d5fdb1ed057400d103766aaea97f98\n. after/before work on methods, not events.\nSo for example this.after(\"initialize\", ...) works because components get an empty initialize method by default.\nYou can get the desired effect by doing this.before(\"handleTest\", ...) \n. It's just for demo purposes. \n. this will make me happy too :)\n. es5-shim is using a symlink to map component.json to package.json - which seems to cause a problem for windows.\nsee https://github.com/yeoman/yeoman/issues/751\nYou could try forking es5-shim and then just copy package.json into component.json \nfailing that I would manually copy es5-shim.js and es5-sham.js to components/es5-shim \n. thanks - fix pulled\n. thank you - nicely done\n. thank you!\n. How to Install is here https://github.com/twitter/flight#installation\nGeneral suggestions are good - will work on it.\n. @alex-seville @jamm see also https://github.com/twitter/flight/issues/19\n. thanks!\n. not duplicates: one is es5-shim, other is es5sham\n. Yes, by all means. Components are not defined in terms of DOM nodes, rather you attach an instance of a Component to one or more DOM nodes after it is defined. There is nothing to stop DOM node of one component instance being nested inside the DOM node of another.\nAre you having an issue with it?\n. actually its requirejs.js in component directory - but wrongly so\nwill make a new branch to fix both at once then merge\nthanks for the PR!\n. thanks!\n. Yes this is true - it appears to be a css issue rather than something directly related to flight or JavaScript so I figured we could live with it. (The icons are nested within disabled buttons - but for some reason are not themselves disabled)\nClosing as not an issue with flight itself\n. Hi \nSo each Block instance needs an attr value that specifies the DOM selector it should listen on, this can be done by passing a custom attr via attachTo.\nSo:\nMenu.attachTo('#menu1');\nMenu.attachTo('#menu2');\nBlock.attachTo('#block1', {menuSelector: '#menu1'});\nBlock.attachTo('#block2', {menuSelector: '#menu1'});\nThen in the Block component, let the listener know which selector to listen on (this is the optional first argument of component.on)\nthis.on(this.attr.menuSelector, 'menuItemClicked', changeColor)\nIf the new color is also customizable it should be sent as payload when 'menuItemClicked' is triggered by Menu\nthis.trigger('menuItemClicked', {color:red});\n(again if the color is instance specific it can be passed via attachTo)\nThis can be picked up by the data argument of the callback on Block \nthis.changeColor(ev, data) {\n  $node.css({'color': data.color});\n}\nHope this helps!        \n. I take your point about the coupling implications of being told to listen to events on specific DOM node - but I feel that returning a component as a handle so that it's methods can be invoked externally is a much tighter coupling. Once you make a component API available to the outside world the component is no longer isolated and you are inviting a ratcheting up of complexity.\nAlso bear in mind I am not suggesting listening to events from a specific component - just listening to any event emanating from a DOM node. It could originate from one of many components, or it could be a native DOM event - we don't care and we don't need to know.\nI don't know your DOM structure - but I'd also suggest you don't need to listen to the menu element specifically - as long as you listen on any DOM node that events from the other menu will not bubble up to.\nAlternatively (and perhaps most simply) just have the second menu trigger a different event name from the first menu.\n. thanks!\n. It works for me - what error are you seeing?\n. does f12 developer tools show an error message in the console?\nUpdate: OK I notice it fails in IE8 compatibility mode. Are you running IE9 in IE8 compatibility mode? Will fix this anyway. \n. Glad it worked\nI've just fixed for IE8 now. (https://github.com/twitter/flight/commit/116175d133)\nHaven't tested the demo app in IE7 - but flight framework should work in IE7\n. 1. Not yet.\n2. It would have worked as an AMD module too. For twitter.com we found having jQuery as a module made designing jQuery plugin modules unsatisfactory\n. thanks - pulling (but I'll follow with my own PR to put all parameter marshaling up front, and also add a test to make sure non function callbacks fail on the correct exception)\n. done: resolved merge conflicts manually\n. thanks!\n. We did this to discourage passing of functions between components. Allowing a component's functionality to be invoked, by proxy, elsewhere compromises the isolation of a function - making testing more tricky and inviting model complexity.\nYou can run with debug off if this is not a concern to you. Curious what your use case for passing a jQuery object is\n. No - the reason it is only forbidden in debug mode is so it is caught in development. We didn't want such tests in production because of inconsistent cross browser support and the additional (albeit slight) overhead of the postMessage.\nWas asking about passing jQuery object in case there was a good use case that we had overlooked. Disallowing non-serializable payloads was primarily targeted at discouraging function payloads - but I'm not seeing a good use case for passing jQuery objects either (not saying there isn't one - just not seeing one)\n. @simonsmith\u2014basically this https://github.com/twitter/flight/issues/38#issuecomment-13390278\nWe don't want to compromise the decoupling of components. Limiting their external object dependencies to simple hashes, primitives etc. keeps them detangled and easily testable.\n. many thanks for these - curiously demo worked for me in IE8 vmware\n. Hi Michal\nDid you try this?\nthis.on(this.attr.inputSelector, 'blur', blurCb);\n(you can specify the DOM node - or selector thereof - to attach the listener to).\nAlso, should be no need to bind the callback - flight ensures it gets bound to the component instance by default.\nHope this helps!\n. Ok - maybe I should wait for the demo - but to clarify (in case it helps) - if the callback argument is a function the binding happens immediately, but if its a hash the binding happens at event time (much like live or delegate in jQuery)\nI think, however, you already grasped this, since in your original example you were indeed passing a hash - and the problem is that blur just doesn't bubble up at all. Is there no way you can bind after the element is dynamically created?\nMaybe this is something we could look to fix in flight.\n. @cam-stitt Thanks, planning to do this!\nLooking forward to checking out the app\n. thanks!\n. @houfeng0707 actually withDialog is itself just a mixin, we're not interested in its prototype.  Instead we want withPositioning to be mixed into whatever withDialog is being mixed into - which is represented by this, i.e. the context in which withDialog is being invoked.\nBy way of example, imagine we have a Component type called TweetBox which is defined by mixing the core tweetBox function with the mixin withDialog: \n```\ndefineComponent(tweetBox, withDialog);\nfunction tweetBox() {//... \n```\nSo now when withDialog is being invoked using the original code you cited above, this is TweetBox.prototype and that's what both withDialog and withPosition will be mixed into.\nHope this helps. It probably sounds confusing in words, but once you play with the code it should become apparent. Please look at the demoApp source code for more examples.\n. thanks!\n. Flight does not dictate how you should model your data or where your data model should live. That's your choice.\ntwitter.com generates HTML from server-side data models. Tweetdeck, on the other hand, uses client-side data modelling.\nThere is no requirement to use DOM data-attributes. \n. @tbrd this looks great - thanks!\nminor issues in run_tests.js:\n1) remove the loadrunner specific comments from the top\n2) either remove console.log of tests, or move unshift 'lib/component' to after console.log\n. you can do this by using \nthis.after('<fnName>', function() {\n  //..\n});\nsee https://github.com/twitter/flight#advice\n. yes, you can add a mixin to anything at anytime:\ncompose.mixin(componentInstance, [arrayOfMixins]);\nmake sure you import 'lib/compose'\n. @gbrits initialize is the only method guaranteed to be called by every component. Teardown is probably best managed by the client app\n. OK - just a heads up I'm planning to add a developer hook to baseComponent. Should be out in the next few days, but can't guarantee.\n. There's already an mixin called withBaseComponent which gets mixed into every component, but it's currently private within the scope of component.js. Might be a good idea to open this up so folks can add their own custom base behavior via before or after (see https://github.com/twitter/flight#advice). I'll look into it.\nIn the meantime I guess you could make a fork to either amend this mixin or add your own mixin here (see https://raw.github.com/twitter/flight/master/lib/component.js):\n```\n  // prepend common mixins to supplied list, then mixin all flavors\n  mixins.unshift(withBaseComponent, advice.withAdvice, registry.withRegistration);\ncompose.mixin(Component.prototype, mixins);\n```\n. @mkuklis the slice(3) is delightful :)\nI think @gbrits might be talking about a base component that all components will automatically extend - much as they extend baseComponent (internally) now.\nPlanning to add an external hook to baseComponent so that custom base code can be added by advice.\n. @fscz decorators (after, before, around) need to be called in the right sequence.\nYou need the this.render method to be in place before the this.after('render', function() {}) decorator is invoked. The normal way to do this is to have base methods in the component and decorators in the mixin. So for example:\ncomponent\nthis.render = function(ev,data) {\n  //base render functionality\n}\nmixin\n```\nthis.after('render', function(ev,data) {\n  //extra decoration specific to the mixin\n});\nthis.after('initialize', function() {\n  //...\n  this.render(); //invokes render, including mixin's decoration\n}\n```\nHowever if the base render method does everything you want you don't need a decorator in the mixin. Also FWIW, if you had a decorator without a base render method it would still work - the decorator would, in this case, become the base render method\n(re-opening issue for a while as a general FYI)\n. @fscz hmm this should be working as you expect. When you do \ndefineComponent(terminalComponent, withMemDB, withTemplate, withMedia);\nthis creates one component containing all functions from all mixins. For your example to work it doesn't even matter which order the mixins are added (although they are, in fact, added in the order specified) because initialize is not called until you create an instance of the component (using attachTo)\nCan you post a simplified version of where you are defining the component and where you are doing attachTo? Thanks.\n(by the way you don't need to assign this to self in the initialize method)\n. @dannymidnight At twitter we have use a mixin that supplies an ajax wrapper. Instead of defining success and error callbacks, the wrapper defines success and error events, which will be auto-triggered with the ajax response.\nMaybe this may be the level of abstraction you're really looking for?\n. @simonsmith there's quite a lot of twitter specific stuff going on too, but in a nutshell, you pass the event names to the wrapper, which uses a helper method to make them into success/error callbacks which are then passed to the appropriate slots in the ajax call.\n. The optional first element specifies which DOM node you will listen for the event on. If it's not supplied it defaults to (as you say) the element you attach(ed)To \n. Easiest way would be to use around and only invoke original function if validation passes\njs\nthis.around('submit', function(originalSubmit) {\n  if (validates()) {\n    originalSubmit();\n  }\n}\n. thanks! - fixed\n. @kevinrobinson this is one of those situations that can never be quite perfect. Yes it would be nice if the mixin could define a \"default default\"\u2014the problem is how do we know the developer's intention. It's possible that the mixin defines an attr with the same name purely by accident\u2014we don't want a situation where some mixins cannot be used with some components because of accidental name clashes. Similarly we can't assume the base attr always wins\u2014if it clobbers a mixin attribute that was intended for an entirely different purpose the mixin stops working.\nBottom line, we can't second guess the developer's intention, and we can't fail (or succeed) silently.\n. closing, see https://github.com/twitter/flight/pull/68\n. you can use http://api.jquery.com/selector/\n. Add a comment to explain why you building arguments array longhand\n. definitely add a comment to explain why you are building arguments array longhand.\n. you now have two successive this.on implementations\n. I make good and frequent use of describe (toString() evaluation) in developer tools debugging. Would like to see it kept in DEBUG mode\n. no special reason other than the existence of a global 'use strict' at the top is easier to verify. The directive itself is benign. If it's not the first statement in a file or a function it is ignored - so shouldn't affect single file case\u2013which incidentally will also need a global 'use strict' at the top.\n. yeah needs work - looking at it today\n. OK so it was partially working but triggers were not showing up. I've fixed this with https://github.com/twitter/flight/pull/90\nTo get logging to show up, the client app needs to enable debugging and mix logging into the registry. (In hindsight this may be asking a bit much of the client app - we should consider automating the second part if debug.enable is true). For example here's how its done in our demo app (https://github.com/twitter/flight/blob/gh-pages/demo/index.html)\nfunction(compose, registry, advice, withLogging, debug) {\n  debug.enable(true);\n  compose.mixin(registry, [advice.withAdvice, withLogging]); \n  //.. \n }\nThe next step is to persist user logging level requests with localStorage so that they endure beyond the current page\n. debug preferences now persisted\n. Yeah I got this too and I don't understand why. Tag v1.0.6 definitely has the right component.json\nhttps://github.com/twitter/flight/blob/v1.0.6/component.json.\nI ended up copying manually :(\nWill look into it some more\n. fixed after upgrade to v1.0.7\n. @danse Which version of firefox? The demo app makes copious use of this.trigger and works fine in FF19 (as does twitter.com) \n. sorry for the delay - will get to this soon\n. We shouldn't qualify event listening by instance data. If I subscribe to an event I want all events of that name, regardless of the instance which triggered it.\n. going to do this once I've used it to add tests to demo app\n. Code looks fine. Not sure how much demand there is for this util. @danwrong, @sayrer? \n. think it's easier just to have the component listen for an event and in the callback do this.teardown()\n. @mpelzsherman \nYes, each registry instance has an events property which is an array of all bound events.\ne.g.\njs\n//first binding of first element\nregistry.allInstances[0].events[0];\n//all bindings for instance with identity 23 \nregistry.allInstances.findInstanceInfo(23).events;\n//second binding for first instance attached to myElem\nregistry.allInstances.findInstanceInfoByNode(myElem)[0].events[1];\nIf you want to debug from the console you can retrieve registry.allInstances like this (assuming you are using AMD syntax)\njs\nvar allInstances;\nrequire(['components/flight/lib/registry'], function(registry) {\n  allInstances = registry.allInstances;\n})\nHope this helps.\n. excellent catch!\n. @rogeliog I ended up doing something similar and gave you an inspiration credit on the commit :)\n. second before should be an after\n. component_api talks about this.node so we should probably just link the first node reference to that\n. this is legacy - you can substitute defaults for attr\n. debug.js is not part of core - it's not required to make flight work\n. loadrunner has a plugin for it - however its not about loadrunner so much as whatever module loader flight clients are most likely to use - hence we went with amd\n. @danse I thnk defaultAttrs work - it's plural because its a collection of attr(ibutes)\nAgain I'd call it componentAttrs - assuming it can create more than one attr.\n. Oh I see your point. I do not have a good explanation for that inconsistency :)\n. @krava this is by design, see https://github.com/flightjs/flight/blob/master/doc/component_api.md#triggering-events (\"...the event payload which must always be an object\")\n. @wwwsevolod Added some tests to reproduce it - but the tests passed https://github.com/flightjs/flight/pull/147\nCan you give more specifics of how to reproduce? Thanks.\n. gut reaction is that this couples us a little more deeply to jquery, so I'm reticent\n. I'm doing this as part of 1.1.0 commit\n. all utils are linking to \n. This is not a bug. It's chrome being forced to adopt the over zealous w3c CSP. FWIW there is no possible CSS loophole with new Function() when no args are passed because there is nowhere to inject a script.\n. The change is in master but not v1.1.0\n(git diff v1.1.0 -- lib/registry.js)\nWe'll make a new tag shortly and then bower will deploy with that update\n@angustweets\nOn Tue, Oct 8, 2013 at 2:56 PM, John Schulz notifications@github.comwrote:\n\nHas this change made it into the version available via bower install? I'm\nstill seeing the new Function line when I install via bower.\nMore info:\n\u2023 $(npm bin)/bower install flight#1.1.0\nbower flight#~1.1.0             cached git://github.com/flightjs/flight.git#1.1.0\nbower flight#~1.1.0           validate 1.1.0 against git://github.com/flightjs/flight.git#~1.1.0\nbower flight#1.1.0              cached git://github.com/flightjs/flight.git#1.1.0\nbower flight#1.1.0            validate 1.1.0 against git://github.com/flightjs/flight.git#1.1.0\nbower jquery#>=1.8.0            cached git://github.com/components/jquery.git#2.0.3\nbower jquery#>=1.8.0          validate 2.0.3 against git://github.com/components/jquery.git#>=1.8.0\nbower jquery#>= 1.9.0           cached git://github.com/components/jquery.git#2.0.3\nbower jquery#>= 1.9.0         validate 2.0.3 against git://github.com/components/jquery.git#>= 1.9.0\nbower flight#~1.1.0            install flight#1.1.0\nflight#1.1.0 lib/bower_components/flight\n\u251c\u2500\u2500 es5-shim#2.0.0\n\u2514\u2500\u2500 jquery#2.0.3\n\u2023 grep -r 'new Function' lib/bower_components/flight/*\nlib/bower_components/flight/lib/registry.js:      registry.trigger = new Function;\npackage.json in both masterhttps://github.com/flightjs/flight/blob/master/package.json#L3and\n1.1.0 https://github.com/flightjs/flight/blob/v1.1.0/package.json#L3both list the same version number (1.1.0) but only master\nhas the fixhttps://github.com/flightjs/flight/blob/v1.1.0/lib/registry.js#L203,\nnot the 1.1.0 taghttps://github.com/flightjs/flight/blob/master/lib/registry.js#L200\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/flightjs/flight/pull/157#issuecomment-25931194\n.\n. @giuseppeg we've considered this \u2013 but I like the idea of keeping string literals in defaultAttrs because a) they are easier to find and modify b) they can be overriden by passing options in attachTo which is great for testing (among other things)\n. this should fail in development, as payloads must be serializable\n. sorry, my bad,  misread as a trigger\n. done as https://github.com/flightjs/flight/pull/164\n. see https://github.com/flightjs/flight/pull/163\n. I think this will be expensive - there would be a slice, map, filter and join in every call to select. Given that this case seems quite rare it would be better to just define your attr with two selectors\n\nmenuTitleOrItemSelector: '.menu-title, .menu-item'\n. @olivierlesnicki this at the component scope refers to the component's prototype, so assigning a value there will apply to all instances. Similarly a var at the component level is available via closure scope to every instance. \nHowever this within a function refers only to the current instance, so typically you would declare an instance specific property in the initialize method:\ne.g.\njs\n  this.after('initialize', function() {\n    this.x = 'blah';\n    //...\n  });\nthe property x will then be available to any component method and is instance specific.\nHope this helps.\n. messed this branch up, making a new PR\n. issue #160\n. On my phone so can't be certain but your proposed fix looks like it delegates the same callback to every event target - which would be wrong\n. Right (knew I shouldn't try and read it on my phone :))\nYes, this would more-or-less work (although blur and focus still wouldn't invoke the callback when triggered on elements that weren't covered by one of the delegateRule selectors - in contrast to the behavior for bubbling events).\nNot sure if always binding the event to this hybrid selector, instead of just the node (or specified), requires extra overhead on the part of jQuery (see http://james.padolsey.com/jquery/#v=1.10.2&fn=jQuery.event.add). If it does, it might not be worth doing for the sake of these two edge cases. \nYou could also workaround delegation for blur and focus by using a hybrid selector in these cases only:\nthis.on(blurrableSelectors.join(','), 'blur', {/*delegateObj*/}) \nWill work on this more. Thanks for the input!\n. On Sep 29, 2013, at 2:07, giuseppeg notifications@github.com wrote:\n\nalthough blur and focus still wouldn't invoke the callback when triggered on elements that weren't covered by one of the delegateRule selectors - in contrast to the behavior for bubbling events\nThat's fine I guess.\nNot sure if always binding the event to this hybrid selector, instead of just the node (or specified), requires extra overhead on the part of jQuery (see http://james.padolsey.com/jquery/#v=1.10.2&fn=jQuery.event.add). If it does, it might not be worth doing for the sake of these two edge cases.\nYeah that requires some investigation/tests.\n\"Delegated events that use more complex selectors, particularly hierarchical ones, can be several times slower--although they are still fast enough for most applications.\" obviosly.\nYou could also workaround delegation for blur and focus by using a hybrid selector in these cases only:\nthis.on(blurrableSelectors.join(','), 'blur', {/delegateObj/})\nThis wouldn't be event delegation anymore.\nYes because true event delegation is not possible for non bubbling events. It is however identical to your proposed fix (but this time only when it's actually needed) and uses jQuery's delegation API as suggested.\n\u2014\nReply to this email directly or view it on GitHub.\n. Yes and I assumed that's what jQuery on (with delegates) would end up doing too because of the composite selector argument - i.e. the attached event handler would listen on any element matching the composite selector\n\nI may be wrong though - will check out jQuery.add when I'm on my computer. \nIn any case I suspect for non bubbling events jQuery is forced to do some awkward thing under the covers that would compromise true event delegation\nOn Sep 29, 2013, at 7:57, giuseppeg notifications@github.com wrote:\n\nI mean $element would be blurrableSelectors instead of this.node (or any other anchestor) meaning that you are actually binding to the target elements, am I wrong?\n\u2014\nReply to this email directly or view it on GitHub.\n. The intention is that this should an error, period. We don't check it in\nproduction, only because of the performance hit of the postMessage call.\n\nAdmittedly we could do a better job of preventing this kind of nasty\nsurprise \u2014 we always have debug mode in twitter.com outside of production\nbut we shouldn't assume this is the same across the board.\nCurious why you need to pass serializable data - we throw an error because\nit flaunts flight's principle of entirely decoupled components. For example\nonce you pass a function the entire closure scope of the originating\ncomponent is available elsewhere - there is almost certainly a better way\nof doing it.\n@angustweets\nOn Wed, Oct 9, 2013 at 11:29 AM, John Schulz notifications@github.comwrote:\n\nBump.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/flightjs/flight/issues/179#issuecomment-25995887\n.\n. good catch Jean! \u2013 don't know what I was smoking when I did that :)\nFWIW the componentInfo assignment can be moved outside the loop too \u2013 I'll do that next\n. @naoina catching all errors and failing silently is not the way to go. The access denied error is useful data that we should not be suppressing. \n\nYour error was probably thrown because of the URL mismatch @tjwudi cited. \n. easy way is to add a function wrapper called once in utils.js\nso then this.on('click', utils.once(myHandler))\nTal expressed interest in doing this\n. The overhead of adding fully fledged this.once is we would need registry\nand logger to have new counterparts to match. With a once(fn) wrapper we\ncould add a re-usable util AND get this.once type behavior at very little\ncost and preserve the simple trigger/on/off event troika\nHaving a withOnce mixin would be saying we don't want it baked into core. I\nmean again its not wrong but idf we were to have a fully fledged this.once\n(as opposed to my once(fn) util suggestion) then we may as well add it\ndirectly to core.\n@angustweets\nOn Wed, Oct 16, 2013 at 2:03 PM, Tom Ashworth notifications@github.comwrote:\n\nI'm interested in why this isn't baked in. I totally respect the decision\nnot to have it, but I'm just wondering what the reasoning is?\nAlso, what are the pros and cons of, for example, using a withOnce mixin?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/flightjs/flight/issues/185#issuecomment-26458056\n.\n. Intuitive because jQuery does it? Seems like a slightly gratuitous\nextension of the API when really all we want is a new flavour of on.\n\ntrigger/on/off is a really simple event API and I'd prefer to keep it at\nthat if we can. If utils.once(fn) proves gnarly then sure lets do this.once\ninstead\n@angustweets\nOn Wed, Oct 16, 2013 at 2:09 PM, Nicolas Gallagher <notifications@github.com\n\nwrote:\nI feel like this.once() is more intuitive than something like a utility.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/flightjs/flight/issues/185#issuecomment-26458614\n.\n. Ah I see! Yes, I got the wrong end of the stick.\n\nStill I think utils.once(fn) could be a useful util in general - and we\nalready have a utils.js module with several function wrappers in this vain\nso its probably easier / less surprising to just put it there\n@angustweets\nOn Wed, Oct 16, 2013 at 2:23 PM, Tom Ashworth notifications@github.comwrote:\n\nOk, I see \u2013 but just to be clear, I wasn't suggesting Flight ship with a\nwithOnce, I was just suggesting it as an alternative to a util. Or was\nthat clear, and I've missed what you meant?! :)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/flightjs/flight/issues/185#issuecomment-26459980\n.\n. @giuseppeg why does it need to? In fact isn't it cleaner to remove all handlers in one go at teardown?\n\nMoreover your solution is incomplete, we'd also need to add one advice methods to registry and logger. IMO keeping all binding in a single API (on) causes less confusion all around and keeps our codebase small. Also one and once are both very unintuitive names for an event binder - they don't suggest binding at all (just because jQuery did it doesn't make it right) \nLet's try and keep our API simple. The following is intuitive and adds nothing to our core code base (other than a reusable util)...\nthis.on('click', utils.once(myHandler)) \n. @necolas I think its fine as is no?\nAs long as we set ran = true after if (ran) {return} then it achieves the objective right?\n. I made a stab at something which may be cleaner and more efficient\nhttps://github.com/flightjs/flight/pull/191\nBasically you don't assign guid to the callback until just before unbind\n(its not needed before then). At that point we know which instance we are\ndealing with and can assign guid as appropriate\nLet me know what you think\nOn Tue, Oct 22, 2013 at 4:06 PM, Tom Ashworth notifications@github.comwrote:\n\nFrom Angus via email:\nMany thanks for bringing this up. Excellent find. Going to noodle on this\nfor a while - my first reaction is we might be able to do this a bit more\nefficiently and still take advantage of jQuery's bound<->target association\nvia guid. Also want to make sure we don't break this: #21https://github.com/flightjs/flight/pull/21\nI agree on the efficiency point \u2013 there may be a more efficient way to\nremove the handlers. I'm thinking particularly about findEventsByTarget -\nthere's slightly too much iteration over events going on.\nHowever, I'd be very hesitant to manipulate jQuery's guids. For one, it\nties Flight tightly into jQuery's way of doing event handler registration.\nWill take another look at this in the morning. We tore our hair out a bit,\nfiguring out what was going on \u2013 ironically, a debugging browser extension\nmight have helped! Spurs me on a bit :)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/flightjs/flight/pull/189#issuecomment-26862302\n.\n. We're already totally depending on jquery for event binding and propagation - it already\ntrawls through all the events for us for free. Not seeing a good reason to add our own mechanism to shadow this - it adds code bulk and inefficiency. \n\nThis isn't a question of whether jQuery is the best library or whether we will always use it - it's about making full use of what we use right now. While we have jQuery we should use it.\nOn Oct 23, 2013, at 2:42, Tom Ashworth notifications@github.com wrote:\n\nI don't think that tying Flight's event implementation to jQuery's is a good idea. jQuery could easily change this in future, and then Flight would have to change \u2013 or enforce an old jQuery version.\nMy view would be to let jQuery do its event binding however it wants, and deal with Flight's in a Flight-specific way.\n\u2014\nReply to this email directly or view it on GitHub.\n. going to submit a similar solution to https://github.com/flightjs/flight/pull/191, but without guid\n. et voila https://github.com/flightjs/flight/pull/192\n. (see https://github.com/flightjs/flight/pull/191)\n. @ wwwsevolod that would require every event to be associated with a unique element - in tom's use case, both component instances are listening on the same element (document)\n. Qualifying an event with the component that triggered it would remove the\nprinciple of component isolation on which flight is built.\n\nOn Wed, Oct 23, 2013 at 10:04 AM, Vsevolod Ivanov\nnotifications@github.comwrote:\n\nwhy you need to unique element? for example every instance of every\ncomponent have its own UID, and you listen event not 'click' but\n'click.superdruperprefixUID' only for component, and when you need to off\nevents you off only group off events with suffix 'superdruperprefixUID'\nwhere UID is unique identifier of components instance, may be i\nmisunderstood something? you can add any number of 'group events handlers'\nfor element, and they fires on 'click' not only on\n'click.superdruperprefixUID' but add ability to off them only by group, not\naffecting every other handler on this element for this event.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/flightjs/flight/pull/191#issuecomment-26923255\n.\n. see https://github.com/flightjs/flight/pull/192 for guid-free solution\n. @phuu not getting this - if they specify a handler it just unbinds that one, if not it unbinds all\n. merging this today unless objections\n. @garretts https://github.com/flightjs/flight/blob/fe146ede46ee31eb8168445753ef63fb9a7de99f/test/spec/events_spec.js line 128 \n. @phuu because we need to be consistent with how registry and teardown works. if you bind the same event twice for the same element with the same handler (though why?) the registry would store that even t twice and teardown would call off twice. If we unbound both events in the first off, the second off would be left high and dry with nothing to do. Moreover there would be a danger of unbinding callbacks bound to other elements (but the same instance) even when such unbindings had not been requested.\n\nI'm also interested: could we not have iterated on my PR (with the big commit message + explanation) to this?\n\n\nWe could have iterated on your PR but the emphasis was different, yours was entirely focused on registry.js, this one is focused on base.js \n. yes I've used this pattern in other repos and like it (can even have an additional prop which stores any curried args). I hope ES6 adds this data to bound functions for free\n. could we go a step further and put  if (window.DEBUG && window.DEBUG.enabled) around the body of withLogging?\n. true\n. can you make it this style to be more consistent with other flight code?\njs\nif (info && info.instance) {\n  info.instance.teardown();\n}\n. Not wild about it -  bear in mind this is infrastructure code - complexity\nthreshold is almost by necessity higher than application code. e.g.\nwouldn't expect or require code climate to give jQuery a good score.\nTo be honest I'd trust any human reviewer to gauge code complexity way more\nthan I would an arbitrary, one size fits all robot :)\nOn Fri, Oct 25, 2013 at 9:04 AM, Chris Aniszczyk\nnotifications@github.comwrote:\n\n@angus-c https://github.com/angus-c, @danwronghttps://github.com/danwrongwhat do you think?\nIf you like this, I'd like to use it on all of our external javascript\nprojects.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/flightjs/flight/pull/195#issuecomment-27104581\n.\n. case in point https://codeclimate.com/github/flightjs/flight/lib/base.js\n\nthe 'highly complex' method is a module wrapper - this is just a plain dumb\nanalysis.\nthen there are 23 jslint errors most of which are equally stupid (e.g.\npossible strict violations even though we are running strict mode,\ncomplaints about == on typeof which is silly)\nOn Fri, Oct 25, 2013 at 9:04 AM, Chris Aniszczyk\nnotifications@github.comwrote:\n\n@angus-c https://github.com/angus-c, @danwronghttps://github.com/danwrongwhat do you think?\nIf you like this, I'd like to use it on all of our external javascript\nprojects.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/flightjs/flight/pull/195#issuecomment-27104581\n.\n. fixed by #198 \n. merging - will fix the ef thing myself \n. Will look into this - bear in mind event data will sometimes be too big to show\n. fixed see #213\n. working for me in chrome 31\n. Hi wwwsevold\n\njQuery special events are a fairly obscure feature and not commonly used. Rather than coupling flight further to jquery I'd prefer to let handlers (or where appropriate code the that calls trigger) deal with such things conditionally.\n. @phuu not sure we should document this - it's a legacy of pre-open source twitter code (for a specail case) and I hope we can get rid of it\n. can you make this \"2013-2014\" please - thanks\n. love this\n. thanks for putting these together @giuseppeg \nHowever I'm not sure either is quite what we want - the first solution, as you say is possibly too restrictive \u2014 if you did want to call the original function with other params, it is quite painful now.\nThe second solution might not be intuitive to people reading code that uses it - for example in your snippet we call the original function with  '5' - which the na\u00efve reader will probably now assume the only parameter passed.\nI agree it's a little gnarly to have to slice the arguments in consumer code in order to pass what we want to the original function, but hopefully these cases are fairly rare \n. yep travis issue looks like - bower install is failing\nwant to clean up a couple of things anyway - so not quite pull-ready \n. fixed travis issue (jquery-bower deploy path changed) and cleaned up code\n. @DKunin I quite like @giuseppeg's strategy - but to your original question - it really is a matter of taste. Flight tries not to be prescriptive - so if for some reason it made sense in your situation to generate markup on the client then that's perfectly fine too\n. Nice catch.\nI think \nbase.mixedIn = Object.prototype.hasOwnProperty.call(base, 'mixedIn') ? base.mixedIn : [];\nwould be a little cleaner / more explicit\n. @phuu \"Tearing down all components is very unlikely, and not particularly useful in a single page app.\" \nteardownAll only removes components instances for a give constructor, not all components\n@rlavoie it sounds like a more useful and cleaner solution to what you want is a teardownAll that takes an html node as an argument. With help from the registry it could teardown all component instances attached to  that node and any descendant nodes. The only headache is having a registry dictionary of instances keyed by node (since the key must be a string and we can't necessarily determine unique selectors programmatically). Of course once ES6 (maps, weakMaps) comes along that's no longer a problem.\n. @phuu cool look forward to seeing this!\nwas more trying addressing @rlavoie's specific problem with what could be a very simple solution requiring no component level references - but if you've covered that too, so much the better\n. want to land this, but trying to get travis to npm install without griping (not your fault)\n. Would you mind merging from master? (there was a karma peer dependency issue that was making travis fail) \n. thanks (I tweaked package.json). All good now\n. this fails travis with the same error I was getting - hence my change\n. Not in my opinion. myComponent is effectively a mixin too. I'd rather encourage devs to think about the order of precedence on a case by case basis\n. This is already noted at the beginning of the section: \"Flight will automatically bind the context (this) of the callback to the component instance\"\n. looks like we need to whitelist attrDef when write protecting. cc @danwrong \n. fixed in branch: attributes_in_debug.\nHowever looking at test failure in master before I PR\n. Fixed: https://github.com/flightjs/flight/pull/279\n. bear in mind that the eventPayload has to be an object - it's a string in your test. This might be the issue\n. The more I use flight, the more I see the value in binding to the document. I agree binding to anything between the node and the document (or body) feels a bit icky - but I don't see the point in being overly prescriptive.\n. If you use this.select you are always binding relative to the node, and this forces you to use the selectors defined by the attrs (hence DRY). If you go by this principle (never hard code a selector outside the attrs) then the only elements you can bind to outside the component node are document and body - both of which are reasonable bind targets. \n. @staeke can you clarify what you mean by \"outside users of your component\"?. Since attrs are declared/assigned defaults  within the component, they can only be overriden by either an attachTo argument or by a mixin (using the new attributes syntax). In both cases this overriding is probably by design. \n. looks good - as discussed. adding an issue to test index.js. We needed it before this, but these changes highlight it.\nSome apprehension about defineComponent -> flight.component in terms of lost descriptive power. But not sure I have a better solution right now.\n. @alexgorbatchev AFAIK it's still a WIP\n. looks good\n. this is excellent - really like webpack\n. looking at this now (not forgotten it :)\n. I wouldn't mind seeing this split into 2 PRs. One for the per-instance callback removal and one for event namespacing (sure this wouldn't allow callback-less unbinds per instance, but I like to keep PRs single purpose)\nSo sthg like:\njs\n        if (callback) {\n          //this callback may be the original function or a bound version\n          var boundFunctions = callback.target ? callback.target.bound : callback.bound || [];\n          //set callback to version bound against this instance\n          boundFunctions && boundFunctions.some(function(fn, i, arr) {\n            if (fn.context && (this.identity == fn.context.identity)) {\n              arr.splice(i, 1);\n              callback = fn;\n              return true;\n            }\n          }, this);\n          $element.off(type, callback);\n        } else {\n          // Loop through the events of `this` instance\n          // and unbind using the callback\n          registry.findInstanceInfo(this).events.forEach(function (event) {\n            if (type == event.type) {\n              $element.off(type, event.callback);\n            }\n          });\n        }\n@sayrer @alexgorbatchev, you see any perf concerns with the added overhead? (the else condition is new)\n. Since the regex is potentially expensive (compiling a new one for every callback-less off directive) how about we only go there if the event contains a dot?\n. yeah sorry, getting kind of hard to follow this PR triangulation :)\nI guess I'll merge 282 and we can leave this one hanging pending further discussion on the merits of namespaced events. (FWIW I'm not against them, though its difficult to gauge the demand for them - as always we don't want to add code to core just to satisfy cases) \n. @sayrer and I put it behind the debug guard because we were concerned about perf. That's two extra function calls for every trigger, and there can be multiple triggers per click\n. Almost impossible to answer. What's the use case you need it for?\n. idea from @kloots: do a this.after('trigger', function() {//...});\n. your component (just the regular advice pattern)\n. can you paste the code here?\n. @necolas In the pattern you are using it for I would create a props property to iterate over. Better to call it out explicitly than rely on data having the right thing (e.g., what if later you wanted to add another payload item that was not to be iterated over\nSo\nObject.keys(data.props).forEach(//..\nnot\nObject.keys(data).forEach(//..\n. In what ways does having jQuery as a global hurt us? Several Twitter devs were pleased with the move to global jQuery because it made debugging a lot less gnarly\n. this might be reasonably easy - the registry (or whatever) would build up a selector-to-handler lookup for each event type and then, for each type call\nthis.on(document, eventType, utils.delegate(\n  this.resolveDelegateRules(lookup)\n));\nQuestion is do we scope every event delegate at the document level or would this be unnecessarily costly in the case of custom events? Or perhaps we could just do auto-delegation for native event types.\n. @simonsmith You don't need to attachTo document for the sake of event delegation, you can \nthis.on(document, 'click', { followBtnSelector: this.followBtnClick });\nThat said, if document is the most inner common element for your listeners, it suggests document might be your most appropriate component node. \n. this looks good on first scan - will look in detail tomorrow - thanks!\n. I like. Is there a risk that a flight client's legacy code might include function attrs that they didn't intend to be evaluated?\n. ah good point - ship it\n. ah - good point...sorry merged prematurely\n. could also simplify the code that calls it (in lib/base.js) - though it would still work as is\n. Thanks. So as not to break up the this.select description I think this would work better in parentheses at the bottom of the section (after the example code). Also I think can not may might be more accurate:\n\n(You can access the component's node directly by using the component's node attribute. e.g. this.node.) \n. Thanks - yes could you squash the commits please.\n. Sure thing (cc @phuu) \n. @phuu whoops yes! thanks\n. If clobbering is detected in debug mode doesn't it throw an error? If it does than I think that's fine. If it doesn't then it should.\n. We should make it error (it used to). Unless no-one cares about clobbering (but they probably should)\n. yeah you right, idk. \n. @akre54 thanks for this. Will verify performance across browsers shortly.\n. @dilvie although the iframe thing can be dodgy for testing instanceof in the case of $ being passed between iframes, I think it's highly unlikely you'd be running flight in one frame and installing jquery in another\n\n@akre54 FWIW my tests show instance of to be slightly slower in chrome and significantly slower in firefox and IE. But I'm not really concerned about performance in either case. It's just not called often enough for 100,000 times per second to be considered a concern.\nIt would be nice if flight were decoupled from jQuery, but that is a huge project and this change would be the tip of the iceberg (actually that test might no longer even be required if we had no jQuery) \n. Thanks - will take a look. \nClosing since not an issue or bug\n. thanks! fixed\n. Not a bad idea - will consider this. Thanks!\n. pedantry welcome :) \n. current dependency is jquery 1.83 - will modify when upgrading to jquery 1.9\n. Removed $.browser reference\nsee https://github.com/twitter/flight/commit/4109c2d872d5fdb1ed057400d103766aaea97f98\n. after/before work on methods, not events.\nSo for example this.after(\"initialize\", ...) works because components get an empty initialize method by default.\nYou can get the desired effect by doing this.before(\"handleTest\", ...) \n. It's just for demo purposes. \n. this will make me happy too :)\n. es5-shim is using a symlink to map component.json to package.json - which seems to cause a problem for windows.\nsee https://github.com/yeoman/yeoman/issues/751\nYou could try forking es5-shim and then just copy package.json into component.json \nfailing that I would manually copy es5-shim.js and es5-sham.js to components/es5-shim \n. thanks - fix pulled\n. thank you - nicely done\n. thank you!\n. How to Install is here https://github.com/twitter/flight#installation\nGeneral suggestions are good - will work on it.\n. @alex-seville @jamm see also https://github.com/twitter/flight/issues/19\n. thanks!\n. not duplicates: one is es5-shim, other is es5sham\n. Yes, by all means. Components are not defined in terms of DOM nodes, rather you attach an instance of a Component to one or more DOM nodes after it is defined. There is nothing to stop DOM node of one component instance being nested inside the DOM node of another.\nAre you having an issue with it?\n. actually its requirejs.js in component directory - but wrongly so\nwill make a new branch to fix both at once then merge\nthanks for the PR!\n. thanks!\n. Yes this is true - it appears to be a css issue rather than something directly related to flight or JavaScript so I figured we could live with it. (The icons are nested within disabled buttons - but for some reason are not themselves disabled)\nClosing as not an issue with flight itself\n. Hi \nSo each Block instance needs an attr value that specifies the DOM selector it should listen on, this can be done by passing a custom attr via attachTo.\nSo:\nMenu.attachTo('#menu1');\nMenu.attachTo('#menu2');\nBlock.attachTo('#block1', {menuSelector: '#menu1'});\nBlock.attachTo('#block2', {menuSelector: '#menu1'});\nThen in the Block component, let the listener know which selector to listen on (this is the optional first argument of component.on)\nthis.on(this.attr.menuSelector, 'menuItemClicked', changeColor)\nIf the new color is also customizable it should be sent as payload when 'menuItemClicked' is triggered by Menu\nthis.trigger('menuItemClicked', {color:red});\n(again if the color is instance specific it can be passed via attachTo)\nThis can be picked up by the data argument of the callback on Block \nthis.changeColor(ev, data) {\n  $node.css({'color': data.color});\n}\nHope this helps!        \n. I take your point about the coupling implications of being told to listen to events on specific DOM node - but I feel that returning a component as a handle so that it's methods can be invoked externally is a much tighter coupling. Once you make a component API available to the outside world the component is no longer isolated and you are inviting a ratcheting up of complexity.\nAlso bear in mind I am not suggesting listening to events from a specific component - just listening to any event emanating from a DOM node. It could originate from one of many components, or it could be a native DOM event - we don't care and we don't need to know.\nI don't know your DOM structure - but I'd also suggest you don't need to listen to the menu element specifically - as long as you listen on any DOM node that events from the other menu will not bubble up to.\nAlternatively (and perhaps most simply) just have the second menu trigger a different event name from the first menu.\n. thanks!\n. It works for me - what error are you seeing?\n. does f12 developer tools show an error message in the console?\nUpdate: OK I notice it fails in IE8 compatibility mode. Are you running IE9 in IE8 compatibility mode? Will fix this anyway. \n. Glad it worked\nI've just fixed for IE8 now. (https://github.com/twitter/flight/commit/116175d133)\nHaven't tested the demo app in IE7 - but flight framework should work in IE7\n. 1. Not yet.\n2. It would have worked as an AMD module too. For twitter.com we found having jQuery as a module made designing jQuery plugin modules unsatisfactory\n. thanks - pulling (but I'll follow with my own PR to put all parameter marshaling up front, and also add a test to make sure non function callbacks fail on the correct exception)\n. done: resolved merge conflicts manually\n. thanks!\n. We did this to discourage passing of functions between components. Allowing a component's functionality to be invoked, by proxy, elsewhere compromises the isolation of a function - making testing more tricky and inviting model complexity.\nYou can run with debug off if this is not a concern to you. Curious what your use case for passing a jQuery object is\n. No - the reason it is only forbidden in debug mode is so it is caught in development. We didn't want such tests in production because of inconsistent cross browser support and the additional (albeit slight) overhead of the postMessage.\nWas asking about passing jQuery object in case there was a good use case that we had overlooked. Disallowing non-serializable payloads was primarily targeted at discouraging function payloads - but I'm not seeing a good use case for passing jQuery objects either (not saying there isn't one - just not seeing one)\n. @simonsmith\u2014basically this https://github.com/twitter/flight/issues/38#issuecomment-13390278\nWe don't want to compromise the decoupling of components. Limiting their external object dependencies to simple hashes, primitives etc. keeps them detangled and easily testable.\n. many thanks for these - curiously demo worked for me in IE8 vmware\n. Hi Michal\nDid you try this?\nthis.on(this.attr.inputSelector, 'blur', blurCb);\n(you can specify the DOM node - or selector thereof - to attach the listener to).\nAlso, should be no need to bind the callback - flight ensures it gets bound to the component instance by default.\nHope this helps!\n. Ok - maybe I should wait for the demo - but to clarify (in case it helps) - if the callback argument is a function the binding happens immediately, but if its a hash the binding happens at event time (much like live or delegate in jQuery)\nI think, however, you already grasped this, since in your original example you were indeed passing a hash - and the problem is that blur just doesn't bubble up at all. Is there no way you can bind after the element is dynamically created?\nMaybe this is something we could look to fix in flight.\n. @cam-stitt Thanks, planning to do this!\nLooking forward to checking out the app\n. thanks!\n. @houfeng0707 actually withDialog is itself just a mixin, we're not interested in its prototype.  Instead we want withPositioning to be mixed into whatever withDialog is being mixed into - which is represented by this, i.e. the context in which withDialog is being invoked.\nBy way of example, imagine we have a Component type called TweetBox which is defined by mixing the core tweetBox function with the mixin withDialog: \n```\ndefineComponent(tweetBox, withDialog);\nfunction tweetBox() {//... \n```\nSo now when withDialog is being invoked using the original code you cited above, this is TweetBox.prototype and that's what both withDialog and withPosition will be mixed into.\nHope this helps. It probably sounds confusing in words, but once you play with the code it should become apparent. Please look at the demoApp source code for more examples.\n. thanks!\n. Flight does not dictate how you should model your data or where your data model should live. That's your choice.\ntwitter.com generates HTML from server-side data models. Tweetdeck, on the other hand, uses client-side data modelling.\nThere is no requirement to use DOM data-attributes. \n. @tbrd this looks great - thanks!\nminor issues in run_tests.js:\n1) remove the loadrunner specific comments from the top\n2) either remove console.log of tests, or move unshift 'lib/component' to after console.log\n. you can do this by using \nthis.after('<fnName>', function() {\n  //..\n});\nsee https://github.com/twitter/flight#advice\n. yes, you can add a mixin to anything at anytime:\ncompose.mixin(componentInstance, [arrayOfMixins]);\nmake sure you import 'lib/compose'\n. @gbrits initialize is the only method guaranteed to be called by every component. Teardown is probably best managed by the client app\n. OK - just a heads up I'm planning to add a developer hook to baseComponent. Should be out in the next few days, but can't guarantee.\n. There's already an mixin called withBaseComponent which gets mixed into every component, but it's currently private within the scope of component.js. Might be a good idea to open this up so folks can add their own custom base behavior via before or after (see https://github.com/twitter/flight#advice). I'll look into it.\nIn the meantime I guess you could make a fork to either amend this mixin or add your own mixin here (see https://raw.github.com/twitter/flight/master/lib/component.js):\n```\n  // prepend common mixins to supplied list, then mixin all flavors\n  mixins.unshift(withBaseComponent, advice.withAdvice, registry.withRegistration);\ncompose.mixin(Component.prototype, mixins);\n```\n. @mkuklis the slice(3) is delightful :)\nI think @gbrits might be talking about a base component that all components will automatically extend - much as they extend baseComponent (internally) now.\nPlanning to add an external hook to baseComponent so that custom base code can be added by advice.\n. @fscz decorators (after, before, around) need to be called in the right sequence.\nYou need the this.render method to be in place before the this.after('render', function() {}) decorator is invoked. The normal way to do this is to have base methods in the component and decorators in the mixin. So for example:\ncomponent\nthis.render = function(ev,data) {\n  //base render functionality\n}\nmixin\n```\nthis.after('render', function(ev,data) {\n  //extra decoration specific to the mixin\n});\nthis.after('initialize', function() {\n  //...\n  this.render(); //invokes render, including mixin's decoration\n}\n```\nHowever if the base render method does everything you want you don't need a decorator in the mixin. Also FWIW, if you had a decorator without a base render method it would still work - the decorator would, in this case, become the base render method\n(re-opening issue for a while as a general FYI)\n. @fscz hmm this should be working as you expect. When you do \ndefineComponent(terminalComponent, withMemDB, withTemplate, withMedia);\nthis creates one component containing all functions from all mixins. For your example to work it doesn't even matter which order the mixins are added (although they are, in fact, added in the order specified) because initialize is not called until you create an instance of the component (using attachTo)\nCan you post a simplified version of where you are defining the component and where you are doing attachTo? Thanks.\n(by the way you don't need to assign this to self in the initialize method)\n. @dannymidnight At twitter we have use a mixin that supplies an ajax wrapper. Instead of defining success and error callbacks, the wrapper defines success and error events, which will be auto-triggered with the ajax response.\nMaybe this may be the level of abstraction you're really looking for?\n. @simonsmith there's quite a lot of twitter specific stuff going on too, but in a nutshell, you pass the event names to the wrapper, which uses a helper method to make them into success/error callbacks which are then passed to the appropriate slots in the ajax call.\n. The optional first element specifies which DOM node you will listen for the event on. If it's not supplied it defaults to (as you say) the element you attach(ed)To \n. Easiest way would be to use around and only invoke original function if validation passes\njs\nthis.around('submit', function(originalSubmit) {\n  if (validates()) {\n    originalSubmit();\n  }\n}\n. thanks! - fixed\n. @kevinrobinson this is one of those situations that can never be quite perfect. Yes it would be nice if the mixin could define a \"default default\"\u2014the problem is how do we know the developer's intention. It's possible that the mixin defines an attr with the same name purely by accident\u2014we don't want a situation where some mixins cannot be used with some components because of accidental name clashes. Similarly we can't assume the base attr always wins\u2014if it clobbers a mixin attribute that was intended for an entirely different purpose the mixin stops working.\nBottom line, we can't second guess the developer's intention, and we can't fail (or succeed) silently.\n. closing, see https://github.com/twitter/flight/pull/68\n. you can use http://api.jquery.com/selector/\n. Add a comment to explain why you building arguments array longhand\n. definitely add a comment to explain why you are building arguments array longhand.\n. you now have two successive this.on implementations\n. I make good and frequent use of describe (toString() evaluation) in developer tools debugging. Would like to see it kept in DEBUG mode\n. no special reason other than the existence of a global 'use strict' at the top is easier to verify. The directive itself is benign. If it's not the first statement in a file or a function it is ignored - so shouldn't affect single file case\u2013which incidentally will also need a global 'use strict' at the top.\n. yeah needs work - looking at it today\n. OK so it was partially working but triggers were not showing up. I've fixed this with https://github.com/twitter/flight/pull/90\nTo get logging to show up, the client app needs to enable debugging and mix logging into the registry. (In hindsight this may be asking a bit much of the client app - we should consider automating the second part if debug.enable is true). For example here's how its done in our demo app (https://github.com/twitter/flight/blob/gh-pages/demo/index.html)\nfunction(compose, registry, advice, withLogging, debug) {\n  debug.enable(true);\n  compose.mixin(registry, [advice.withAdvice, withLogging]); \n  //.. \n }\nThe next step is to persist user logging level requests with localStorage so that they endure beyond the current page\n. debug preferences now persisted\n. Yeah I got this too and I don't understand why. Tag v1.0.6 definitely has the right component.json\nhttps://github.com/twitter/flight/blob/v1.0.6/component.json.\nI ended up copying manually :(\nWill look into it some more\n. fixed after upgrade to v1.0.7\n. @danse Which version of firefox? The demo app makes copious use of this.trigger and works fine in FF19 (as does twitter.com) \n. sorry for the delay - will get to this soon\n. We shouldn't qualify event listening by instance data. If I subscribe to an event I want all events of that name, regardless of the instance which triggered it.\n. going to do this once I've used it to add tests to demo app\n. Code looks fine. Not sure how much demand there is for this util. @danwrong, @sayrer? \n. think it's easier just to have the component listen for an event and in the callback do this.teardown()\n. @mpelzsherman \nYes, each registry instance has an events property which is an array of all bound events.\ne.g.\njs\n//first binding of first element\nregistry.allInstances[0].events[0];\n//all bindings for instance with identity 23 \nregistry.allInstances.findInstanceInfo(23).events;\n//second binding for first instance attached to myElem\nregistry.allInstances.findInstanceInfoByNode(myElem)[0].events[1];\nIf you want to debug from the console you can retrieve registry.allInstances like this (assuming you are using AMD syntax)\njs\nvar allInstances;\nrequire(['components/flight/lib/registry'], function(registry) {\n  allInstances = registry.allInstances;\n})\nHope this helps.\n. excellent catch!\n. @rogeliog I ended up doing something similar and gave you an inspiration credit on the commit :)\n. second before should be an after\n. component_api talks about this.node so we should probably just link the first node reference to that\n. this is legacy - you can substitute defaults for attr\n. debug.js is not part of core - it's not required to make flight work\n. loadrunner has a plugin for it - however its not about loadrunner so much as whatever module loader flight clients are most likely to use - hence we went with amd\n. @danse I thnk defaultAttrs work - it's plural because its a collection of attr(ibutes)\nAgain I'd call it componentAttrs - assuming it can create more than one attr.\n. Oh I see your point. I do not have a good explanation for that inconsistency :)\n. @krava this is by design, see https://github.com/flightjs/flight/blob/master/doc/component_api.md#triggering-events (\"...the event payload which must always be an object\")\n. @wwwsevolod Added some tests to reproduce it - but the tests passed https://github.com/flightjs/flight/pull/147\nCan you give more specifics of how to reproduce? Thanks.\n. gut reaction is that this couples us a little more deeply to jquery, so I'm reticent\n. I'm doing this as part of 1.1.0 commit\n. all utils are linking to \n. This is not a bug. It's chrome being forced to adopt the over zealous w3c CSP. FWIW there is no possible CSS loophole with new Function() when no args are passed because there is nowhere to inject a script.\n. The change is in master but not v1.1.0\n(git diff v1.1.0 -- lib/registry.js)\nWe'll make a new tag shortly and then bower will deploy with that update\n@angustweets\nOn Tue, Oct 8, 2013 at 2:56 PM, John Schulz notifications@github.comwrote:\n\nHas this change made it into the version available via bower install? I'm\nstill seeing the new Function line when I install via bower.\nMore info:\n\u2023 $(npm bin)/bower install flight#1.1.0\nbower flight#~1.1.0             cached git://github.com/flightjs/flight.git#1.1.0\nbower flight#~1.1.0           validate 1.1.0 against git://github.com/flightjs/flight.git#~1.1.0\nbower flight#1.1.0              cached git://github.com/flightjs/flight.git#1.1.0\nbower flight#1.1.0            validate 1.1.0 against git://github.com/flightjs/flight.git#1.1.0\nbower jquery#>=1.8.0            cached git://github.com/components/jquery.git#2.0.3\nbower jquery#>=1.8.0          validate 2.0.3 against git://github.com/components/jquery.git#>=1.8.0\nbower jquery#>= 1.9.0           cached git://github.com/components/jquery.git#2.0.3\nbower jquery#>= 1.9.0         validate 2.0.3 against git://github.com/components/jquery.git#>= 1.9.0\nbower flight#~1.1.0            install flight#1.1.0\nflight#1.1.0 lib/bower_components/flight\n\u251c\u2500\u2500 es5-shim#2.0.0\n\u2514\u2500\u2500 jquery#2.0.3\n\u2023 grep -r 'new Function' lib/bower_components/flight/*\nlib/bower_components/flight/lib/registry.js:      registry.trigger = new Function;\npackage.json in both masterhttps://github.com/flightjs/flight/blob/master/package.json#L3and\n1.1.0 https://github.com/flightjs/flight/blob/v1.1.0/package.json#L3both list the same version number (1.1.0) but only master\nhas the fixhttps://github.com/flightjs/flight/blob/v1.1.0/lib/registry.js#L203,\nnot the 1.1.0 taghttps://github.com/flightjs/flight/blob/master/lib/registry.js#L200\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/flightjs/flight/pull/157#issuecomment-25931194\n.\n. @giuseppeg we've considered this \u2013 but I like the idea of keeping string literals in defaultAttrs because a) they are easier to find and modify b) they can be overriden by passing options in attachTo which is great for testing (among other things)\n. this should fail in development, as payloads must be serializable\n. sorry, my bad,  misread as a trigger\n. done as https://github.com/flightjs/flight/pull/164\n. see https://github.com/flightjs/flight/pull/163\n. I think this will be expensive - there would be a slice, map, filter and join in every call to select. Given that this case seems quite rare it would be better to just define your attr with two selectors\n\nmenuTitleOrItemSelector: '.menu-title, .menu-item'\n. @olivierlesnicki this at the component scope refers to the component's prototype, so assigning a value there will apply to all instances. Similarly a var at the component level is available via closure scope to every instance. \nHowever this within a function refers only to the current instance, so typically you would declare an instance specific property in the initialize method:\ne.g.\njs\n  this.after('initialize', function() {\n    this.x = 'blah';\n    //...\n  });\nthe property x will then be available to any component method and is instance specific.\nHope this helps.\n. messed this branch up, making a new PR\n. issue #160\n. On my phone so can't be certain but your proposed fix looks like it delegates the same callback to every event target - which would be wrong\n. Right (knew I shouldn't try and read it on my phone :))\nYes, this would more-or-less work (although blur and focus still wouldn't invoke the callback when triggered on elements that weren't covered by one of the delegateRule selectors - in contrast to the behavior for bubbling events).\nNot sure if always binding the event to this hybrid selector, instead of just the node (or specified), requires extra overhead on the part of jQuery (see http://james.padolsey.com/jquery/#v=1.10.2&fn=jQuery.event.add). If it does, it might not be worth doing for the sake of these two edge cases. \nYou could also workaround delegation for blur and focus by using a hybrid selector in these cases only:\nthis.on(blurrableSelectors.join(','), 'blur', {/*delegateObj*/}) \nWill work on this more. Thanks for the input!\n. On Sep 29, 2013, at 2:07, giuseppeg notifications@github.com wrote:\n\nalthough blur and focus still wouldn't invoke the callback when triggered on elements that weren't covered by one of the delegateRule selectors - in contrast to the behavior for bubbling events\nThat's fine I guess.\nNot sure if always binding the event to this hybrid selector, instead of just the node (or specified), requires extra overhead on the part of jQuery (see http://james.padolsey.com/jquery/#v=1.10.2&fn=jQuery.event.add). If it does, it might not be worth doing for the sake of these two edge cases.\nYeah that requires some investigation/tests.\n\"Delegated events that use more complex selectors, particularly hierarchical ones, can be several times slower--although they are still fast enough for most applications.\" obviosly.\nYou could also workaround delegation for blur and focus by using a hybrid selector in these cases only:\nthis.on(blurrableSelectors.join(','), 'blur', {/delegateObj/})\nThis wouldn't be event delegation anymore.\nYes because true event delegation is not possible for non bubbling events. It is however identical to your proposed fix (but this time only when it's actually needed) and uses jQuery's delegation API as suggested.\n\u2014\nReply to this email directly or view it on GitHub.\n. Yes and I assumed that's what jQuery on (with delegates) would end up doing too because of the composite selector argument - i.e. the attached event handler would listen on any element matching the composite selector\n\nI may be wrong though - will check out jQuery.add when I'm on my computer. \nIn any case I suspect for non bubbling events jQuery is forced to do some awkward thing under the covers that would compromise true event delegation\nOn Sep 29, 2013, at 7:57, giuseppeg notifications@github.com wrote:\n\nI mean $element would be blurrableSelectors instead of this.node (or any other anchestor) meaning that you are actually binding to the target elements, am I wrong?\n\u2014\nReply to this email directly or view it on GitHub.\n. The intention is that this should an error, period. We don't check it in\nproduction, only because of the performance hit of the postMessage call.\n\nAdmittedly we could do a better job of preventing this kind of nasty\nsurprise \u2014 we always have debug mode in twitter.com outside of production\nbut we shouldn't assume this is the same across the board.\nCurious why you need to pass serializable data - we throw an error because\nit flaunts flight's principle of entirely decoupled components. For example\nonce you pass a function the entire closure scope of the originating\ncomponent is available elsewhere - there is almost certainly a better way\nof doing it.\n@angustweets\nOn Wed, Oct 9, 2013 at 11:29 AM, John Schulz notifications@github.comwrote:\n\nBump.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/flightjs/flight/issues/179#issuecomment-25995887\n.\n. good catch Jean! \u2013 don't know what I was smoking when I did that :)\nFWIW the componentInfo assignment can be moved outside the loop too \u2013 I'll do that next\n. @naoina catching all errors and failing silently is not the way to go. The access denied error is useful data that we should not be suppressing. \n\nYour error was probably thrown because of the URL mismatch @tjwudi cited. \n. easy way is to add a function wrapper called once in utils.js\nso then this.on('click', utils.once(myHandler))\nTal expressed interest in doing this\n. The overhead of adding fully fledged this.once is we would need registry\nand logger to have new counterparts to match. With a once(fn) wrapper we\ncould add a re-usable util AND get this.once type behavior at very little\ncost and preserve the simple trigger/on/off event troika\nHaving a withOnce mixin would be saying we don't want it baked into core. I\nmean again its not wrong but idf we were to have a fully fledged this.once\n(as opposed to my once(fn) util suggestion) then we may as well add it\ndirectly to core.\n@angustweets\nOn Wed, Oct 16, 2013 at 2:03 PM, Tom Ashworth notifications@github.comwrote:\n\nI'm interested in why this isn't baked in. I totally respect the decision\nnot to have it, but I'm just wondering what the reasoning is?\nAlso, what are the pros and cons of, for example, using a withOnce mixin?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/flightjs/flight/issues/185#issuecomment-26458056\n.\n. Intuitive because jQuery does it? Seems like a slightly gratuitous\nextension of the API when really all we want is a new flavour of on.\n\ntrigger/on/off is a really simple event API and I'd prefer to keep it at\nthat if we can. If utils.once(fn) proves gnarly then sure lets do this.once\ninstead\n@angustweets\nOn Wed, Oct 16, 2013 at 2:09 PM, Nicolas Gallagher <notifications@github.com\n\nwrote:\nI feel like this.once() is more intuitive than something like a utility.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/flightjs/flight/issues/185#issuecomment-26458614\n.\n. Ah I see! Yes, I got the wrong end of the stick.\n\nStill I think utils.once(fn) could be a useful util in general - and we\nalready have a utils.js module with several function wrappers in this vain\nso its probably easier / less surprising to just put it there\n@angustweets\nOn Wed, Oct 16, 2013 at 2:23 PM, Tom Ashworth notifications@github.comwrote:\n\nOk, I see \u2013 but just to be clear, I wasn't suggesting Flight ship with a\nwithOnce, I was just suggesting it as an alternative to a util. Or was\nthat clear, and I've missed what you meant?! :)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/flightjs/flight/issues/185#issuecomment-26459980\n.\n. @giuseppeg why does it need to? In fact isn't it cleaner to remove all handlers in one go at teardown?\n\nMoreover your solution is incomplete, we'd also need to add one advice methods to registry and logger. IMO keeping all binding in a single API (on) causes less confusion all around and keeps our codebase small. Also one and once are both very unintuitive names for an event binder - they don't suggest binding at all (just because jQuery did it doesn't make it right) \nLet's try and keep our API simple. The following is intuitive and adds nothing to our core code base (other than a reusable util)...\nthis.on('click', utils.once(myHandler)) \n. @necolas I think its fine as is no?\nAs long as we set ran = true after if (ran) {return} then it achieves the objective right?\n. I made a stab at something which may be cleaner and more efficient\nhttps://github.com/flightjs/flight/pull/191\nBasically you don't assign guid to the callback until just before unbind\n(its not needed before then). At that point we know which instance we are\ndealing with and can assign guid as appropriate\nLet me know what you think\nOn Tue, Oct 22, 2013 at 4:06 PM, Tom Ashworth notifications@github.comwrote:\n\nFrom Angus via email:\nMany thanks for bringing this up. Excellent find. Going to noodle on this\nfor a while - my first reaction is we might be able to do this a bit more\nefficiently and still take advantage of jQuery's bound<->target association\nvia guid. Also want to make sure we don't break this: #21https://github.com/flightjs/flight/pull/21\nI agree on the efficiency point \u2013 there may be a more efficient way to\nremove the handlers. I'm thinking particularly about findEventsByTarget -\nthere's slightly too much iteration over events going on.\nHowever, I'd be very hesitant to manipulate jQuery's guids. For one, it\nties Flight tightly into jQuery's way of doing event handler registration.\nWill take another look at this in the morning. We tore our hair out a bit,\nfiguring out what was going on \u2013 ironically, a debugging browser extension\nmight have helped! Spurs me on a bit :)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/flightjs/flight/pull/189#issuecomment-26862302\n.\n. We're already totally depending on jquery for event binding and propagation - it already\ntrawls through all the events for us for free. Not seeing a good reason to add our own mechanism to shadow this - it adds code bulk and inefficiency. \n\nThis isn't a question of whether jQuery is the best library or whether we will always use it - it's about making full use of what we use right now. While we have jQuery we should use it.\nOn Oct 23, 2013, at 2:42, Tom Ashworth notifications@github.com wrote:\n\nI don't think that tying Flight's event implementation to jQuery's is a good idea. jQuery could easily change this in future, and then Flight would have to change \u2013 or enforce an old jQuery version.\nMy view would be to let jQuery do its event binding however it wants, and deal with Flight's in a Flight-specific way.\n\u2014\nReply to this email directly or view it on GitHub.\n. going to submit a similar solution to https://github.com/flightjs/flight/pull/191, but without guid\n. et voila https://github.com/flightjs/flight/pull/192\n. (see https://github.com/flightjs/flight/pull/191)\n. @ wwwsevolod that would require every event to be associated with a unique element - in tom's use case, both component instances are listening on the same element (document)\n. Qualifying an event with the component that triggered it would remove the\nprinciple of component isolation on which flight is built.\n\nOn Wed, Oct 23, 2013 at 10:04 AM, Vsevolod Ivanov\nnotifications@github.comwrote:\n\nwhy you need to unique element? for example every instance of every\ncomponent have its own UID, and you listen event not 'click' but\n'click.superdruperprefixUID' only for component, and when you need to off\nevents you off only group off events with suffix 'superdruperprefixUID'\nwhere UID is unique identifier of components instance, may be i\nmisunderstood something? you can add any number of 'group events handlers'\nfor element, and they fires on 'click' not only on\n'click.superdruperprefixUID' but add ability to off them only by group, not\naffecting every other handler on this element for this event.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/flightjs/flight/pull/191#issuecomment-26923255\n.\n. see https://github.com/flightjs/flight/pull/192 for guid-free solution\n. @phuu not getting this - if they specify a handler it just unbinds that one, if not it unbinds all\n. merging this today unless objections\n. @garretts https://github.com/flightjs/flight/blob/fe146ede46ee31eb8168445753ef63fb9a7de99f/test/spec/events_spec.js line 128 \n. @phuu because we need to be consistent with how registry and teardown works. if you bind the same event twice for the same element with the same handler (though why?) the registry would store that even t twice and teardown would call off twice. If we unbound both events in the first off, the second off would be left high and dry with nothing to do. Moreover there would be a danger of unbinding callbacks bound to other elements (but the same instance) even when such unbindings had not been requested.\n\nI'm also interested: could we not have iterated on my PR (with the big commit message + explanation) to this?\n\n\nWe could have iterated on your PR but the emphasis was different, yours was entirely focused on registry.js, this one is focused on base.js \n. yes I've used this pattern in other repos and like it (can even have an additional prop which stores any curried args). I hope ES6 adds this data to bound functions for free\n. could we go a step further and put  if (window.DEBUG && window.DEBUG.enabled) around the body of withLogging?\n. true\n. can you make it this style to be more consistent with other flight code?\njs\nif (info && info.instance) {\n  info.instance.teardown();\n}\n. Not wild about it -  bear in mind this is infrastructure code - complexity\nthreshold is almost by necessity higher than application code. e.g.\nwouldn't expect or require code climate to give jQuery a good score.\nTo be honest I'd trust any human reviewer to gauge code complexity way more\nthan I would an arbitrary, one size fits all robot :)\nOn Fri, Oct 25, 2013 at 9:04 AM, Chris Aniszczyk\nnotifications@github.comwrote:\n\n@angus-c https://github.com/angus-c, @danwronghttps://github.com/danwrongwhat do you think?\nIf you like this, I'd like to use it on all of our external javascript\nprojects.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/flightjs/flight/pull/195#issuecomment-27104581\n.\n. case in point https://codeclimate.com/github/flightjs/flight/lib/base.js\n\nthe 'highly complex' method is a module wrapper - this is just a plain dumb\nanalysis.\nthen there are 23 jslint errors most of which are equally stupid (e.g.\npossible strict violations even though we are running strict mode,\ncomplaints about == on typeof which is silly)\nOn Fri, Oct 25, 2013 at 9:04 AM, Chris Aniszczyk\nnotifications@github.comwrote:\n\n@angus-c https://github.com/angus-c, @danwronghttps://github.com/danwrongwhat do you think?\nIf you like this, I'd like to use it on all of our external javascript\nprojects.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/flightjs/flight/pull/195#issuecomment-27104581\n.\n. fixed by #198 \n. merging - will fix the ef thing myself \n. Will look into this - bear in mind event data will sometimes be too big to show\n. fixed see #213\n. working for me in chrome 31\n. Hi wwwsevold\n\njQuery special events are a fairly obscure feature and not commonly used. Rather than coupling flight further to jquery I'd prefer to let handlers (or where appropriate code the that calls trigger) deal with such things conditionally.\n. @phuu not sure we should document this - it's a legacy of pre-open source twitter code (for a specail case) and I hope we can get rid of it\n. can you make this \"2013-2014\" please - thanks\n. love this\n. thanks for putting these together @giuseppeg \nHowever I'm not sure either is quite what we want - the first solution, as you say is possibly too restrictive \u2014 if you did want to call the original function with other params, it is quite painful now.\nThe second solution might not be intuitive to people reading code that uses it - for example in your snippet we call the original function with  '5' - which the na\u00efve reader will probably now assume the only parameter passed.\nI agree it's a little gnarly to have to slice the arguments in consumer code in order to pass what we want to the original function, but hopefully these cases are fairly rare \n. yep travis issue looks like - bower install is failing\nwant to clean up a couple of things anyway - so not quite pull-ready \n. fixed travis issue (jquery-bower deploy path changed) and cleaned up code\n. @DKunin I quite like @giuseppeg's strategy - but to your original question - it really is a matter of taste. Flight tries not to be prescriptive - so if for some reason it made sense in your situation to generate markup on the client then that's perfectly fine too\n. Nice catch.\nI think \nbase.mixedIn = Object.prototype.hasOwnProperty.call(base, 'mixedIn') ? base.mixedIn : [];\nwould be a little cleaner / more explicit\n. @phuu \"Tearing down all components is very unlikely, and not particularly useful in a single page app.\" \nteardownAll only removes components instances for a give constructor, not all components\n@rlavoie it sounds like a more useful and cleaner solution to what you want is a teardownAll that takes an html node as an argument. With help from the registry it could teardown all component instances attached to  that node and any descendant nodes. The only headache is having a registry dictionary of instances keyed by node (since the key must be a string and we can't necessarily determine unique selectors programmatically). Of course once ES6 (maps, weakMaps) comes along that's no longer a problem.\n. @phuu cool look forward to seeing this!\nwas more trying addressing @rlavoie's specific problem with what could be a very simple solution requiring no component level references - but if you've covered that too, so much the better\n. want to land this, but trying to get travis to npm install without griping (not your fault)\n. Would you mind merging from master? (there was a karma peer dependency issue that was making travis fail) \n. thanks (I tweaked package.json). All good now\n. this fails travis with the same error I was getting - hence my change\n. Not in my opinion. myComponent is effectively a mixin too. I'd rather encourage devs to think about the order of precedence on a case by case basis\n. This is already noted at the beginning of the section: \"Flight will automatically bind the context (this) of the callback to the component instance\"\n. looks like we need to whitelist attrDef when write protecting. cc @danwrong \n. fixed in branch: attributes_in_debug.\nHowever looking at test failure in master before I PR\n. Fixed: https://github.com/flightjs/flight/pull/279\n. bear in mind that the eventPayload has to be an object - it's a string in your test. This might be the issue\n. The more I use flight, the more I see the value in binding to the document. I agree binding to anything between the node and the document (or body) feels a bit icky - but I don't see the point in being overly prescriptive.\n. If you use this.select you are always binding relative to the node, and this forces you to use the selectors defined by the attrs (hence DRY). If you go by this principle (never hard code a selector outside the attrs) then the only elements you can bind to outside the component node are document and body - both of which are reasonable bind targets. \n. @staeke can you clarify what you mean by \"outside users of your component\"?. Since attrs are declared/assigned defaults  within the component, they can only be overriden by either an attachTo argument or by a mixin (using the new attributes syntax). In both cases this overriding is probably by design. \n. looks good - as discussed. adding an issue to test index.js. We needed it before this, but these changes highlight it.\nSome apprehension about defineComponent -> flight.component in terms of lost descriptive power. But not sure I have a better solution right now.\n. @alexgorbatchev AFAIK it's still a WIP\n. looks good\n. this is excellent - really like webpack\n. looking at this now (not forgotten it :)\n. I wouldn't mind seeing this split into 2 PRs. One for the per-instance callback removal and one for event namespacing (sure this wouldn't allow callback-less unbinds per instance, but I like to keep PRs single purpose)\nSo sthg like:\njs\n        if (callback) {\n          //this callback may be the original function or a bound version\n          var boundFunctions = callback.target ? callback.target.bound : callback.bound || [];\n          //set callback to version bound against this instance\n          boundFunctions && boundFunctions.some(function(fn, i, arr) {\n            if (fn.context && (this.identity == fn.context.identity)) {\n              arr.splice(i, 1);\n              callback = fn;\n              return true;\n            }\n          }, this);\n          $element.off(type, callback);\n        } else {\n          // Loop through the events of `this` instance\n          // and unbind using the callback\n          registry.findInstanceInfo(this).events.forEach(function (event) {\n            if (type == event.type) {\n              $element.off(type, event.callback);\n            }\n          });\n        }\n@sayrer @alexgorbatchev, you see any perf concerns with the added overhead? (the else condition is new)\n. Since the regex is potentially expensive (compiling a new one for every callback-less off directive) how about we only go there if the event contains a dot?\n. yeah sorry, getting kind of hard to follow this PR triangulation :)\nI guess I'll merge 282 and we can leave this one hanging pending further discussion on the merits of namespaced events. (FWIW I'm not against them, though its difficult to gauge the demand for them - as always we don't want to add code to core just to satisfy cases) \n. @sayrer and I put it behind the debug guard because we were concerned about perf. That's two extra function calls for every trigger, and there can be multiple triggers per click\n. Almost impossible to answer. What's the use case you need it for?\n. idea from @kloots: do a this.after('trigger', function() {//...});\n. your component (just the regular advice pattern)\n. can you paste the code here?\n. @necolas In the pattern you are using it for I would create a props property to iterate over. Better to call it out explicitly than rely on data having the right thing (e.g., what if later you wanted to add another payload item that was not to be iterated over\nSo\nObject.keys(data.props).forEach(//..\nnot\nObject.keys(data).forEach(//..\n. In what ways does having jQuery as a global hurt us? Several Twitter devs were pleased with the move to global jQuery because it made debugging a lot less gnarly\n. this might be reasonably easy - the registry (or whatever) would build up a selector-to-handler lookup for each event type and then, for each type call\nthis.on(document, eventType, utils.delegate(\n  this.resolveDelegateRules(lookup)\n));\nQuestion is do we scope every event delegate at the document level or would this be unnecessarily costly in the case of custom events? Or perhaps we could just do auto-delegation for native event types.\n. @simonsmith You don't need to attachTo document for the sake of event delegation, you can \nthis.on(document, 'click', { followBtnSelector: this.followBtnClick });\nThat said, if document is the most inner common element for your listeners, it suggests document might be your most appropriate component node. \n. this looks good on first scan - will look in detail tomorrow - thanks!\n. I like. Is there a risk that a flight client's legacy code might include function attrs that they didn't intend to be evaluated?\n. ah good point - ship it\n. ah - good point...sorry merged prematurely\n. could also simplify the code that calls it (in lib/base.js) - though it would still work as is\n. Thanks. So as not to break up the this.select description I think this would work better in parentheses at the bottom of the section (after the example code). Also I think can not may might be more accurate:\n\n(You can access the component's node directly by using the component's node attribute. e.g. this.node.) \n. Thanks - yes could you squash the commits please.\n. Sure thing (cc @phuu) \n. @phuu whoops yes! thanks\n. If clobbering is detected in debug mode doesn't it throw an error? If it does than I think that's fine. If it doesn't then it should.\n. We should make it error (it used to). Unless no-one cares about clobbering (but they probably should)\n. yeah you right, idk. \n. \n",
    "ericelliott": "instanceof isn't safe across iframe boundaries. I haven't seen the broader context of this change, but if that is potentially an issue, I would suggest a different approach.\n. Why not do a different type of feature detection?\n. I'll second the bower thing.. in fact, I'll go even further and ask for a CommonJS port that we can use with Browserify or Stitch.\n. instanceof isn't safe across iframe boundaries. I haven't seen the broader context of this change, but if that is potentially an issue, I would suggest a different approach.\n. Why not do a different type of feature detection?\n. I'll second the bower thing.. in fact, I'll go even further and ask for a CommonJS port that we can use with Browserify or Stitch.\n. ",
    "akre54": "@dilvie the solution might be for Flight to hold on to a reference to its DOM manipulation lib object, e.g. via Flight.$, if there is a concern about differing prototypes across iframe boundaries. And if this is the case, there's probably a bigger concern if the $ instances don't share a common prototype in that $element.on and $element.off would refer to a different $ object.\n. @dilvie the solution might be for Flight to hold on to a reference to its DOM manipulation lib object, e.g. via Flight.$, if there is a concern about differing prototypes across iframe boundaries. And if this is the case, there's probably a bigger concern if the $ instances don't share a common prototype in that $element.on and $element.off would refer to a different $ object.\n. ",
    "marcobarbosa": "Any updates on this?\nI personally feel that I'd have to load jQuery just because of Flight. But maybe that's just my case scenario...\n. Quite helpful @mkuklis , thanks for sharing!\nI was wondering about the same thing.\n. Any updates on this?\nI personally feel that I'd have to load jQuery just because of Flight. But maybe that's just my case scenario...\n. Quite helpful @mkuklis , thanks for sharing!\nI was wondering about the same thing.\n. ",
    "crazycactuz": "I would like this too, i might be stupid but i had to modify the source to make flight work with my requirejs-setup. I copy pasted everything from the demo projects demo-folder into /javascripts/flight in my project and all the relative links broke. (like ./advice) i could not get it to work by setting baseurl, so had to edit the source. jquery worked without problems though, so if its made like that even i can make it work :P \n. If you meant me its cause i dont know bower and wanted to take one step at a time. I also didnt think bower would work with my convoluted file structure, but upon reading closer it seems it could be solved by a couple .bowerrc files. last but not least, i thought it would be easiest to take the demo app, copy paste and go :P\n. I would like this too, i might be stupid but i had to modify the source to make flight work with my requirejs-setup. I copy pasted everything from the demo projects demo-folder into /javascripts/flight in my project and all the relative links broke. (like ./advice) i could not get it to work by setting baseurl, so had to edit the source. jquery worked without problems though, so if its made like that even i can make it work :P \n. If you meant me its cause i dont know bower and wanted to take one step at a time. I also didnt think bower would work with my convoluted file structure, but upon reading closer it seems it could be solved by a couple .bowerrc files. last but not least, i thought it would be easiest to take the demo app, copy paste and go :P\n. ",
    "recipher": "Why wouldn't you use bower though? Not a rhetorical question - I'm interested.\n. Why wouldn't you use bower though? Not a rhetorical question - I'm interested.\n. ",
    "alex-seville": "I think this could be accomplished with a grunt script using grunt-contrib-requirejs plugin.  Obviously it would not be as simple as just using the plugin, but it would help.  Additionally, linting and minification are easily added to grunt scripts.\nI've seen that Twitter projects tend to use Makefiles, but hopefully you might consider grunt as it's a nice JS based solution (and tends to be easier for Windows users).\nI'm happy to whip up a partial demo if you're interested in using this approach...\n. @jamm, \n1) If you install node+npm you shouldn't need cygwin to install bower.  I've installed bower without cygwin on Windows 7. \nHowever, es5-shim uses a symbolic link for it's component.json file in bower (to point to the package.json, to    avoid having to maintain both).  This symbolic link will likely cause a bower installation of Flight to fail.  \nLuckily I found a workaround, if you create a .bowerrc file and add { \"json\":\"package.json\" } to it you can install  Flight without any problem.\n2) There's nothing to stop you from using jQuery hosted anywhere, or any local copy you might have.  You specific the jQuery script reference manually in your HTML page or requirejs config.  You could always use the bower-installed copy as a local fallback.\n. No problem. The README should probably be updated to match (https://github.com/twitter/flight/pull/27) (I submitted the PR's in reverse order)\n. What about changing it to typeof callback != 'function', moving it back to where it was, but then moving callback.target = originalCb; below it?  \nI've attached another commit with the changes...\n. Should a zero length arguments also throw a clean error message? \ni.e. this.on();.\n. Sorry, found a couple more and added them on.  The others are trailing commas in objects, so they will break in IE8.\n. I was refactoring code (converting it to Flight components), so the passing of a jQuery object was just part of that process.  I've since refactored that bit of code and moved it into a ui component, so there's no passing of any objects, but I found it curious that I was getting different results depending on whether Debug was enabled or not.\nSo is the reason it's discouraged, rather than explicitly forbidden in the code, because you're waiting to see if people have use cases for passing jQuery objects?\n. Good to know.\n. I think this could be accomplished with a grunt script using grunt-contrib-requirejs plugin.  Obviously it would not be as simple as just using the plugin, but it would help.  Additionally, linting and minification are easily added to grunt scripts.\nI've seen that Twitter projects tend to use Makefiles, but hopefully you might consider grunt as it's a nice JS based solution (and tends to be easier for Windows users).\nI'm happy to whip up a partial demo if you're interested in using this approach...\n. @jamm, \n1) If you install node+npm you shouldn't need cygwin to install bower.  I've installed bower without cygwin on Windows 7. \nHowever, es5-shim uses a symbolic link for it's component.json file in bower (to point to the package.json, to    avoid having to maintain both).  This symbolic link will likely cause a bower installation of Flight to fail.  \nLuckily I found a workaround, if you create a .bowerrc file and add { \"json\":\"package.json\" } to it you can install  Flight without any problem.\n2) There's nothing to stop you from using jQuery hosted anywhere, or any local copy you might have.  You specific the jQuery script reference manually in your HTML page or requirejs config.  You could always use the bower-installed copy as a local fallback.\n. No problem. The README should probably be updated to match (https://github.com/twitter/flight/pull/27) (I submitted the PR's in reverse order)\n. What about changing it to typeof callback != 'function', moving it back to where it was, but then moving callback.target = originalCb; below it?  \nI've attached another commit with the changes...\n. Should a zero length arguments also throw a clean error message? \ni.e. this.on();.\n. Sorry, found a couple more and added them on.  The others are trailing commas in objects, so they will break in IE8.\n. I was refactoring code (converting it to Flight components), so the passing of a jQuery object was just part of that process.  I've since refactored that bit of code and moved it into a ui component, so there's no passing of any objects, but I found it curious that I was getting different results depending on whether Debug was enabled or not.\nSo is the reason it's discouraged, rather than explicitly forbidden in the code, because you're waiting to see if people have use cases for passing jQuery objects?\n. Good to know.\n. ",
    "danwrong": "We've got something in the works for this. Should land pretty soon. \nSent from my iPhone\nOn Feb 11, 2013, at 18:55, Alex Seville notifications@github.com wrote:\n\nI think this could be accomplished with a grunt script using grunt-contrib-requirejs plugin. Obviously it would not be as simple as just using the plugin, but it would help. Additionally, linting and minification are easily added to grunt scripts.\nI've seen that Twitter projects tend to use Makefiles, but hopefully you might consider grunt as it's a nice JS based solution (and tends to be easier for Windows users).\nI'm happy to whip up a partial demo if you're interested in using this approach...\n\u2014\nReply to this email directly or view it on GitHub.\n. It depends what you mean?  Are you thinking of having an attachTo for a component called from inside another component or having components attached to DOM nodes that are decendants of a DOM node that has another component attached?\n\nIf its the former, use with extreme caution because it can create strong coupling where you mind not want it.  If the latter, then yes, that's very much the pattern Flight is designed to encourage.\n. Hmm, I don't think belongs in Flight really.  There are better specialized tools for profiling out there that people can use if they need to.\n. @taterbase There should be nothing in Flight to prevent you from doing this and I agree, your use case is a valid one.  We've not made use of it in any of our code bases yet but there's nothing to stop anyone else from.  Unless, well, there is, in which case its a bug :)\n. Hmm, in regards to this actual issue. I think we should re-open it, it's a real problem.  However, it seems like using namespaced events to fix might be a little hacky.  I wonder if there's another way?\n. @versioncontrol Okay, many apologies, I understand the issue now.  But I'm a little confused as to why this happens.  When we call this.on in flight it does make a new handler function rather than just use this.resize every time in order to bind to the component instance so Im not sure why this.off, if passed the function instance, doesn't unbind.  Perhaps we are handling the function reference wrongly.\nEither way, I think we do need to re-open this issue but I either can't or can't find the button to re-open it. @angus-c  can you re-open this?\n. I can imagine it being a useful tool for client-side apps that need more granular controller over teardowns.  However, it could be abused.  I think its worth adding though.\n. Couple of reasons why we don't do this:\n1. We use jQuery's event system.  It's out of scope of Flight to adjust how events work at a low level.\n2. In practice (in other projects) I've found that this often results in sluggish performance.  setTimeout 0 is more like setTimeout 20 in practice and when there are large amounts of events flying around it can get very noticeable.\n. Ah, that's interesting.  Didn't know about the async hacks.  \nI know we wouldn't need to alter jquery code specifically but I meant that I think that Flight should not change how events work.  Setting an event handler via Flight should act the same as setting an event handler directly with jquery.  I think diverging would cause confusion.\n. We did this intentionally.  We originally loaded jquery via AMD but due to the fact that jquery plugins mutate the jquery object we found it just didn't work predictably when managed via AMD and complicated our tests.\n. Changes to load builder would be minimal and will in fact simplify matters quite a bit. We currently scan require() for dependencies to make the AMD wrapper dep list so we can just strip this out. \n. @necolas: Indeed, originally had it so that this.attributes was an alternate system that worked alongside this.attributes.  Think I might go back to that.\n. Hmm, I think that if we keep jQuery as a solid dependency the path of least surprise is to add support for this.  However, we're a bit on the fence in this regard and adding code to Flight that locks it to jquery is not ideal.\nWhat would be ideal is if we can refactor Flight so that it doesn't get in the way of this feature working but doesn't actually have any knowledge of namespaces in its code base.  I wonder if that's possible?\n. Why would this be better than what's already there? Im not sure what value Object.create gives you there.\n. I don't think the check is worth it in this case.  This isn't documented API but yeah, it's shorter. The main reason I did it like this is that Attributes shows in the debugger which is nice but Im not bothered either way really.\n. I like the idea of adding a property to the Event object rather than data. Adding it to event data goes against own own rule of data being serializable.\n. The reason we moved away from requiring jQuery was that lQuery plugins break the require model by mutating $ and in a module environment this cause unpredictability and load order dependence so, to avoid that, we decided just to treat jQuery like part of the environment.  Same goes for ES5-Shim/sham, it mutates other objects and therefore isn't suitable for loading as a module so its not so much that we couldn't provide jQuery to plugins, its that depending on what plugins are loaded then the jQuery you get can be completely different depending on what happens to have loaded before then.  By (quickly) reading through those links, this isn't addressed although I do think there might be a shim that could turn plugins into modules somehow.  Spent some time trying to work that out but didn't get anything working before I gave up and we globalled jQuery.\nWhat does it requiring jQuery get us?\n. This seems like a reasonable change although it doesn't change behavior over adding advice individually to both read and write.  The check runs for every execution of read and write.  Its equivilent to this:\n``` javascript\nfunction localStorageOnly(func, key, value) {\n  if (this.supportsLocalStorage) {\n    return func(key, value);\n  } \nreturn false;\n}\nthis.around('read', localStorageOnly);\nthis.around('write', localStorageOnly);\n```\nIt's simple and fairly nice though.  Im into merging this....any objections?\n. I like the API you are proposing here. Also like making it explicit rather than implicit given the stickiness we discussed last week.  Seems like a good candidate for a mixin.\n. Was intending to update with docs if people liked the idea.\nRe legacy:  This only works for this.attributes so shouldnt be too much of an issue.\n. We've got something in the works for this. Should land pretty soon. \nSent from my iPhone\nOn Feb 11, 2013, at 18:55, Alex Seville notifications@github.com wrote:\n\nI think this could be accomplished with a grunt script using grunt-contrib-requirejs plugin. Obviously it would not be as simple as just using the plugin, but it would help. Additionally, linting and minification are easily added to grunt scripts.\nI've seen that Twitter projects tend to use Makefiles, but hopefully you might consider grunt as it's a nice JS based solution (and tends to be easier for Windows users).\nI'm happy to whip up a partial demo if you're interested in using this approach...\n\u2014\nReply to this email directly or view it on GitHub.\n. It depends what you mean?  Are you thinking of having an attachTo for a component called from inside another component or having components attached to DOM nodes that are decendants of a DOM node that has another component attached?\n\nIf its the former, use with extreme caution because it can create strong coupling where you mind not want it.  If the latter, then yes, that's very much the pattern Flight is designed to encourage.\n. Hmm, I don't think belongs in Flight really.  There are better specialized tools for profiling out there that people can use if they need to.\n. @taterbase There should be nothing in Flight to prevent you from doing this and I agree, your use case is a valid one.  We've not made use of it in any of our code bases yet but there's nothing to stop anyone else from.  Unless, well, there is, in which case its a bug :)\n. Hmm, in regards to this actual issue. I think we should re-open it, it's a real problem.  However, it seems like using namespaced events to fix might be a little hacky.  I wonder if there's another way?\n. @versioncontrol Okay, many apologies, I understand the issue now.  But I'm a little confused as to why this happens.  When we call this.on in flight it does make a new handler function rather than just use this.resize every time in order to bind to the component instance so Im not sure why this.off, if passed the function instance, doesn't unbind.  Perhaps we are handling the function reference wrongly.\nEither way, I think we do need to re-open this issue but I either can't or can't find the button to re-open it. @angus-c  can you re-open this?\n. I can imagine it being a useful tool for client-side apps that need more granular controller over teardowns.  However, it could be abused.  I think its worth adding though.\n. Couple of reasons why we don't do this:\n1. We use jQuery's event system.  It's out of scope of Flight to adjust how events work at a low level.\n2. In practice (in other projects) I've found that this often results in sluggish performance.  setTimeout 0 is more like setTimeout 20 in practice and when there are large amounts of events flying around it can get very noticeable.\n. Ah, that's interesting.  Didn't know about the async hacks.  \nI know we wouldn't need to alter jquery code specifically but I meant that I think that Flight should not change how events work.  Setting an event handler via Flight should act the same as setting an event handler directly with jquery.  I think diverging would cause confusion.\n. We did this intentionally.  We originally loaded jquery via AMD but due to the fact that jquery plugins mutate the jquery object we found it just didn't work predictably when managed via AMD and complicated our tests.\n. Changes to load builder would be minimal and will in fact simplify matters quite a bit. We currently scan require() for dependencies to make the AMD wrapper dep list so we can just strip this out. \n. @necolas: Indeed, originally had it so that this.attributes was an alternate system that worked alongside this.attributes.  Think I might go back to that.\n. Hmm, I think that if we keep jQuery as a solid dependency the path of least surprise is to add support for this.  However, we're a bit on the fence in this regard and adding code to Flight that locks it to jquery is not ideal.\nWhat would be ideal is if we can refactor Flight so that it doesn't get in the way of this feature working but doesn't actually have any knowledge of namespaces in its code base.  I wonder if that's possible?\n. Why would this be better than what's already there? Im not sure what value Object.create gives you there.\n. I don't think the check is worth it in this case.  This isn't documented API but yeah, it's shorter. The main reason I did it like this is that Attributes shows in the debugger which is nice but Im not bothered either way really.\n. I like the idea of adding a property to the Event object rather than data. Adding it to event data goes against own own rule of data being serializable.\n. The reason we moved away from requiring jQuery was that lQuery plugins break the require model by mutating $ and in a module environment this cause unpredictability and load order dependence so, to avoid that, we decided just to treat jQuery like part of the environment.  Same goes for ES5-Shim/sham, it mutates other objects and therefore isn't suitable for loading as a module so its not so much that we couldn't provide jQuery to plugins, its that depending on what plugins are loaded then the jQuery you get can be completely different depending on what happens to have loaded before then.  By (quickly) reading through those links, this isn't addressed although I do think there might be a shim that could turn plugins into modules somehow.  Spent some time trying to work that out but didn't get anything working before I gave up and we globalled jQuery.\nWhat does it requiring jQuery get us?\n. This seems like a reasonable change although it doesn't change behavior over adding advice individually to both read and write.  The check runs for every execution of read and write.  Its equivilent to this:\n``` javascript\nfunction localStorageOnly(func, key, value) {\n  if (this.supportsLocalStorage) {\n    return func(key, value);\n  } \nreturn false;\n}\nthis.around('read', localStorageOnly);\nthis.around('write', localStorageOnly);\n```\nIt's simple and fairly nice though.  Im into merging this....any objections?\n. I like the API you are proposing here. Also like making it explicit rather than implicit given the stickiness we discussed last week.  Seems like a good candidate for a mixin.\n. Was intending to update with docs if people liked the idea.\nRe legacy:  This only works for this.attributes so shouldnt be too much of an issue.\n. ",
    "cbou": "You can use jquery.migrate if you want to use jquery 1.9.0\nhttps://github.com/jquery/jquery-migrate/\n. You can use jquery.migrate if you want to use jquery 1.9.0\nhttps://github.com/jquery/jquery-migrate/\n. ",
    "trevex": "Perfect thanks, I seem to have misunderstood the behaviour in the first place. Thanks for making it clear.\n. Perfect thanks, I seem to have misunderstood the behaviour in the first place. Thanks for making it clear.\n. ",
    "mkuklis": "looks like it's green :)\n. Hi Angus,\nThank you for the fast feedback. I think your suggestion works when the input element is already attached to the root node of the component. In my situation these input elements are being attached dynamically after the binding happens.\nThe reason I used bind on the callback with this.$node.on was because on in this situation comes from jQuery and I was loosing component context.\nSorry for taking your time on this. I think I will try to create a demo somewhere so it will be easier to illustrate my problem.\n. @angus-c as you mentioned the blur just doesn't bubble up at all. I don't think this an issue related to binding to not existing/dynamically created element.\n@giuseppeg I'm going to try focusout later today. it's an interesting idea.\n. @giuseppeg it looks like the focusout worked for me. Thank you for the suggestion! This is how it looks like now:\njs\nthis.on('focusout', { 'editSelector': this.requestUpdate });\n. @giuseppeg thanks! @danwrong mentioned that jQuery has a support for focusout in Firefox and other browsers. I just tested it in Firefox and it looks like it works fine.\n. Hi @OscarGodson I'm not sure if this will be helpful/useful but you could take a look at the setup here:\nhttps://github.com/addyosmani/todomvc/blob/gh-pages/dependency-examples/flight/app/js/data/todos.js\nthe todo app is using localStorage (depot.js)\nhttps://github.com/addyosmani/todomvc/blob/gh-pages/dependency-examples/flight/app/js/store.js\nbut you could replace it with your own store (for example xhr store which interacts with the server etc).\n. @OscarGodson I think the beauty of the Flight framework is that you can structure your code the way you like it. \n@angus-c and @danwrong talk a little bit about the philosophy behind it here and here. \nI like your approach as well. I think it means you would need multiple instances of the TodoUI component (one per todo) like you suggested.   \nI've started experimenting with the idea of the asComponent mixin with  a default set of CRUD event types which could be used with different data providers (localStorage, xhr etc). There could be potentially another mixin on the view side of things to bind to these events. I'm not sure if this is a good idea yet but I will see where this will take me.\n. @angus-c @gbrits I ran into a similar case. I think 'extending' existing components could be valuable in certain situations. I'm currently doing something similar to this (which is probably against Flight's philosophy and a terrible idea but I find it useful):\n``` js\nfunction extend(/mixins/) {\n  var mixins = utils.toArray(arguments);\n  var parentMixins = this.prototype.mixedIn;\nreturn define.apply(this, parentMixins.slice(3).concat(mixins));\n}\n```\nthe extend is attached to Component in definde\njs\nComponent.extend = extend;\nThis allows for something like this:\nbase component\n``` js\nfunction (defineComponent, withMixin1, withMixin2) {\n  return defineComponent(base, withMixin1, withMixin2);\nfunction base() {\n    this.hello1 = function () {\n      console.log('hello from base...');\n    }\n  }\n}\n```\nanother component\n``` js\nfunction (BaseComponent) {\n    return BaseComponent.extend(anotherComponent);\nfunction anotherComponent() {\n  this.hello2 = function () {\n    console.log('hello from another component...');\n  }\n\n  this.after('initialize', function () {\n    this.hello1(); // hello from base...\n    this.hello2(); // hello from another component...\n  });\n}\n\n}\n``\n. haha I knew you will like theslice` :). :+1:  for the hook. \n. @dannymidnight have you thought about using a promise in this case? For example:\n``` js\n$.ajax('/hello', { context: this }).then(function () { \n  this.trigger('world'); \n});\n``\n. +1\nIt seems like the CommonJS style is more readable (my personal opinion) when there are more dependencies involved. Another bonus is that one doesn't have to worry about the order of dependencies betweendefine` and the callback. \n. looks like it's green :)\n. Hi Angus,\nThank you for the fast feedback. I think your suggestion works when the input element is already attached to the root node of the component. In my situation these input elements are being attached dynamically after the binding happens.\nThe reason I used bind on the callback with this.$node.on was because on in this situation comes from jQuery and I was loosing component context.\nSorry for taking your time on this. I think I will try to create a demo somewhere so it will be easier to illustrate my problem.\n. @angus-c as you mentioned the blur just doesn't bubble up at all. I don't think this an issue related to binding to not existing/dynamically created element.\n@giuseppeg I'm going to try focusout later today. it's an interesting idea.\n. @giuseppeg it looks like the focusout worked for me. Thank you for the suggestion! This is how it looks like now:\njs\nthis.on('focusout', { 'editSelector': this.requestUpdate });\n. @giuseppeg thanks! @danwrong mentioned that jQuery has a support for focusout in Firefox and other browsers. I just tested it in Firefox and it looks like it works fine.\n. Hi @OscarGodson I'm not sure if this will be helpful/useful but you could take a look at the setup here:\nhttps://github.com/addyosmani/todomvc/blob/gh-pages/dependency-examples/flight/app/js/data/todos.js\nthe todo app is using localStorage (depot.js)\nhttps://github.com/addyosmani/todomvc/blob/gh-pages/dependency-examples/flight/app/js/store.js\nbut you could replace it with your own store (for example xhr store which interacts with the server etc).\n. @OscarGodson I think the beauty of the Flight framework is that you can structure your code the way you like it. \n@angus-c and @danwrong talk a little bit about the philosophy behind it here and here. \nI like your approach as well. I think it means you would need multiple instances of the TodoUI component (one per todo) like you suggested.   \nI've started experimenting with the idea of the asComponent mixin with  a default set of CRUD event types which could be used with different data providers (localStorage, xhr etc). There could be potentially another mixin on the view side of things to bind to these events. I'm not sure if this is a good idea yet but I will see where this will take me.\n. @angus-c @gbrits I ran into a similar case. I think 'extending' existing components could be valuable in certain situations. I'm currently doing something similar to this (which is probably against Flight's philosophy and a terrible idea but I find it useful):\n``` js\nfunction extend(/mixins/) {\n  var mixins = utils.toArray(arguments);\n  var parentMixins = this.prototype.mixedIn;\nreturn define.apply(this, parentMixins.slice(3).concat(mixins));\n}\n```\nthe extend is attached to Component in definde\njs\nComponent.extend = extend;\nThis allows for something like this:\nbase component\n``` js\nfunction (defineComponent, withMixin1, withMixin2) {\n  return defineComponent(base, withMixin1, withMixin2);\nfunction base() {\n    this.hello1 = function () {\n      console.log('hello from base...');\n    }\n  }\n}\n```\nanother component\n``` js\nfunction (BaseComponent) {\n    return BaseComponent.extend(anotherComponent);\nfunction anotherComponent() {\n  this.hello2 = function () {\n    console.log('hello from another component...');\n  }\n\n  this.after('initialize', function () {\n    this.hello1(); // hello from base...\n    this.hello2(); // hello from another component...\n  });\n}\n\n}\n``\n. haha I knew you will like theslice` :). :+1:  for the hook. \n. @dannymidnight have you thought about using a promise in this case? For example:\n``` js\n$.ajax('/hello', { context: this }).then(function () { \n  this.trigger('world'); \n});\n``\n. +1\nIt seems like the CommonJS style is more readable (my personal opinion) when there are more dependencies involved. Another bonus is that one doesn't have to worry about the order of dependencies betweendefine` and the callback. \n. ",
    "poppe1219": "You are quite right.\nManually downloading the requirements solved the problem on Windows.\nI tried installing on Ubuntu to verify that the symlink was the problem and es5-shim was installed without problems.\nI really didn't think Windows was the culprit this time... who would've thought? ;D\nInteresting though, that the dependency tree can be disrupted by symlinks in project subcomponents on Windows systems.\nAs a side note:\nInstalling on Ubuntu wasn't all smooth sailing. \nThe nodejs package for Ubuntu 12.04 LTS was too old for Bower and I had to manually download and compile it.\nWhen I got to running bower install it resulted in a new error:\n```\nbower cloning git://github.com/twitter/flight\nbower cached git://github.com/twitter/flight\nbower fetching flight\nbower error status code of git: 128\nThere were errors, here's a summary of them:\n- flight status code of git: 128\n```\nAs I understand it, it's a SSH vs firewall problem.\nI tried changing the flight dependency in the component.json to use HTTPS:\n\"dependencies\": {\n    \"flight\": \"https://github.com/twitter/flight.git#1.0.0\"\n  }\nAfter that bower install worked just fine.\n. You are quite right.\nManually downloading the requirements solved the problem on Windows.\nI tried installing on Ubuntu to verify that the symlink was the problem and es5-shim was installed without problems.\nI really didn't think Windows was the culprit this time... who would've thought? ;D\nInteresting though, that the dependency tree can be disrupted by symlinks in project subcomponents on Windows systems.\nAs a side note:\nInstalling on Ubuntu wasn't all smooth sailing. \nThe nodejs package for Ubuntu 12.04 LTS was too old for Bower and I had to manually download and compile it.\nWhen I got to running bower install it resulted in a new error:\n```\nbower cloning git://github.com/twitter/flight\nbower cached git://github.com/twitter/flight\nbower fetching flight\nbower error status code of git: 128\nThere were errors, here's a summary of them:\n- flight status code of git: 128\n```\nAs I understand it, it's a SSH vs firewall problem.\nI tried changing the flight dependency in the component.json to use HTTPS:\n\"dependencies\": {\n    \"flight\": \"https://github.com/twitter/flight.git#1.0.0\"\n  }\nAfter that bower install worked just fine.\n. ",
    "TaraWij": "Yes, it would definitely help to make learning Flight more iterative than to have to read the current reference documentation several times. Currently some words are used before they are defined, and when you get to the definition there's a lot of information around there that the user doesn't really have to know when starting out with the Flight framework. It took me about three reads to clearly understand the general concept.\nWe would also appreciate it if the example had comments that explain what the code does.\n. Yes, it would definitely help to make learning Flight more iterative than to have to read the current reference documentation several times. Currently some words are used before they are defined, and when you get to the definition there's a lot of information around there that the user doesn't really have to know when starting out with the Flight framework. It took me about three reads to clearly understand the general concept.\nWe would also appreciate it if the example had comments that explain what the code does.\n. ",
    "e-oz": "Thank you!\nI hope \"bower\" will not be required but only recommended. Because, 1) it's not so obvious how to install bower in Windows (I suppose I need cygwin) and we need to install node and npm also; 2) I prefer to use jQuery hosted by Google CDN. I understand it's only me, but I think some users will share my opinion :)\n. Thank you!\nI hope \"bower\" will not be required but only recommended. Because, 1) it's not so obvious how to install bower in Windows (I suppose I need cygwin) and we need to install node and npm also; 2) I prefer to use jQuery hosted by Google CDN. I understand it's only me, but I think some users will share my opinion :)\n. ",
    "masahitojp": "Sorry. It mistook. \n. Sorry. It mistook. \n. ",
    "ghost": "DOM nodes instantiation is important, but not in relation to the  the point\ni am making about DRY and reusability.\nThere needs to be an easy and thought out way for coders to be able to take\nthe component and override aspects of the CSS and the HTML template for it.\nThis will allow many many users to customise it for their needs.\nIt will also allow this to be used for the many mobile platforms that are\nhtml5 based that are coming out.\nThis is a huge opportunity to have a great component system that will be\nable to easily adapt to the many needs.\nOtherwise it could turn into the Tragedy of the Commons.\nThe exact same patterns happens with CMS system. You have a component, and\nyou want to override some of it as a module.\nthen you can use that module in many different places.\nBut if the component architecture is good, you can also inject overrides\nfrom the page level down into a module because you will need to change it\nin some way for that particular page.\nOn 5 February 2013 19:27, Dan Webb notifications@github.com wrote:\n\nIt depends what you mean? Are you thinking of having an attachTo for a\ncomponent called from inside another component or having components\nattached to DOM nodes that are decendants of a DOM node that has another\ncomponent attached?\nIf its the former, use with extreme caution because it can create strong\ncoupling where you mind not want it. If the latter, then yes, that's very\nmuch the pattern Flight is designed to encourage.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/twitter/flight/issues/26#issuecomment-13143607.\n\n\nContact details:\n+49 1573 693 8595 (germany)\n+46 73 364 67 96 (sweden)\nskype: gedw99\n. DOM nodes instantiation is important, but not in relation to the  the point\ni am making about DRY and reusability.\nThere needs to be an easy and thought out way for coders to be able to take\nthe component and override aspects of the CSS and the HTML template for it.\nThis will allow many many users to customise it for their needs.\nIt will also allow this to be used for the many mobile platforms that are\nhtml5 based that are coming out.\nThis is a huge opportunity to have a great component system that will be\nable to easily adapt to the many needs.\nOtherwise it could turn into the Tragedy of the Commons.\nThe exact same patterns happens with CMS system. You have a component, and\nyou want to override some of it as a module.\nthen you can use that module in many different places.\nBut if the component architecture is good, you can also inject overrides\nfrom the page level down into a module because you will need to change it\nin some way for that particular page.\nOn 5 February 2013 19:27, Dan Webb notifications@github.com wrote:\n\nIt depends what you mean? Are you thinking of having an attachTo for a\ncomponent called from inside another component or having components\nattached to DOM nodes that are decendants of a DOM node that has another\ncomponent attached?\nIf its the former, use with extreme caution because it can create strong\ncoupling where you mind not want it. If the latter, then yes, that's very\nmuch the pattern Flight is designed to encourage.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/twitter/flight/issues/26#issuecomment-13143607.\n\n\nContact details:\n+49 1573 693 8595 (germany)\n+46 73 364 67 96 (sweden)\nskype: gedw99\n. ",
    "artisologic": "Hi Angus,\nThanks for your quick reply.\nI thought of this solution too before of course, but it doesn't satisfy me so much unfortunately.\nI would say it's more a workaround.\nAs I was saying I was looking for a solution without passing anything from one component to another (either using options or the DOM).\nHere I feel like we are tightly coupling the 2 modules together from their definition already (as we are defining an option in Block, defining which menu should control it).\nIdeally, components should trigger events and not know who's dealing with them later on.\nAny component instances should be able to listen to any specific events.\nHow about the following implementation?\nI noticed that the call to attachTodoesn't return anything. What if it returned the instance of the component? Then you could setup the listener outside the Component definition (ie. after it's been instantiated) like that:\n```\nvar menu1 = Menu.attachTo('#menu1');\nvar menu2 = Menu.attachTo('#menu2');\nvar block1 = Block.attachTo('#block1');\nvar block2 = Block.attachTo('#block2');\nmenu1.on('menuItemClicked', function(){ block1.changeColor('red'); });\nmenu2.on('menuItemClicked', function(){ block2.changeColor('blue'); });\n```\nLet me know what you think of this or if you have another more elegant solution?\nThanks!\n. I understand the reasons not to expose the methods to the outside. It makes perfect sense. I guess it is just a different approach. In my case, I am very conscious about not using those methods carefully and rigorously. In your case it just makes it a lot easier cause just impossible and very protected.\nThanks for taking the time to explain your approach!\n. Hi Angus,\nThanks for your quick reply.\nI thought of this solution too before of course, but it doesn't satisfy me so much unfortunately.\nI would say it's more a workaround.\nAs I was saying I was looking for a solution without passing anything from one component to another (either using options or the DOM).\nHere I feel like we are tightly coupling the 2 modules together from their definition already (as we are defining an option in Block, defining which menu should control it).\nIdeally, components should trigger events and not know who's dealing with them later on.\nAny component instances should be able to listen to any specific events.\nHow about the following implementation?\nI noticed that the call to attachTodoesn't return anything. What if it returned the instance of the component? Then you could setup the listener outside the Component definition (ie. after it's been instantiated) like that:\n```\nvar menu1 = Menu.attachTo('#menu1');\nvar menu2 = Menu.attachTo('#menu2');\nvar block1 = Block.attachTo('#block1');\nvar block2 = Block.attachTo('#block2');\nmenu1.on('menuItemClicked', function(){ block1.changeColor('red'); });\nmenu2.on('menuItemClicked', function(){ block2.changeColor('blue'); });\n```\nLet me know what you think of this or if you have another more elegant solution?\nThanks!\n. I understand the reasons not to expose the methods to the outside. It makes perfect sense. I guess it is just a different approach. In my case, I am very conscious about not using those methods carefully and rigorously. In your case it just makes it a lot easier cause just impossible and very protected.\nThanks for taking the time to explain your approach!\n. ",
    "cosijuan": "Just do not do anything, all the buttons are shown disabled, in the same team in Chrome works properly.\n\n. Worked well, just change the way Internet Explorer 9 browser in developer tools, was estabecido in Internet Explorer 8.\nWhat is the minimum version of Internet Explorer that worked on the flight?\nThank you very much.\n. Run the application in Internet Explorer 8 browser mode Internet Explorer 7 and Intertet Explorer 8 compatibility mode and it did not work.\nIn browser mode Internet Explorer 8 if it works.\n. Just do not do anything, all the buttons are shown disabled, in the same team in Chrome works properly.\n\n. Worked well, just change the way Internet Explorer 9 browser in developer tools, was estabecido in Internet Explorer 8.\nWhat is the minimum version of Internet Explorer that worked on the flight?\nThank you very much.\n. Run the application in Internet Explorer 8 browser mode Internet Explorer 7 and Intertet Explorer 8 compatibility mode and it did not work.\nIn browser mode Internet Explorer 8 if it works.\n. ",
    "tbranyen": "I've found working with plugins and AMD to be surprisingly easy.  I wrote use.js to address this problem in the Dojo and RequireJS loaders (might work in the Twitter loader as well).  The concept is loading jQuery as a dependency to any plugin.\nExample (in RequireJS):\njavascript\nrequire.config({\n  shim: {\n    // Ensure jQuery is loaded before the chosen jQuery plugin\n    \"chosen.jquery\": [\"jquery\"]\n  }\n});\nand then you can load it wherever (the loader should cache after the first execution):\njavascript\nrequire([\"jquery\", \"chosen.jquery\"], function($) {\n  /* Chosen plugin is available here. */\n});\nWhat sort of issues did you encounter and were they loader-specific?\n. I've found working with plugins and AMD to be surprisingly easy.  I wrote use.js to address this problem in the Dojo and RequireJS loaders (might work in the Twitter loader as well).  The concept is loading jQuery as a dependency to any plugin.\nExample (in RequireJS):\njavascript\nrequire.config({\n  shim: {\n    // Ensure jQuery is loaded before the chosen jQuery plugin\n    \"chosen.jquery\": [\"jquery\"]\n  }\n});\nand then you can load it wherever (the loader should cache after the first execution):\njavascript\nrequire([\"jquery\", \"chosen.jquery\"], function($) {\n  /* Chosen plugin is available here. */\n});\nWhat sort of issues did you encounter and were they loader-specific?\n. ",
    "szepeviktor": "It is really very easy to implement both ways (called UMD)\nhttps://github.com/umdjs/umd/blob/master/jqueryPlugin.js\n. It is really very easy to implement both ways (called UMD)\nhttps://github.com/umdjs/umd/blob/master/jqueryPlugin.js\n. ",
    "simonsmith": "@angus-c I have an Ajax mixin that triggers an event with the arguments from beforeSend, complete etc and one of those is the jqXHR object. Obviously I'm hitting the same issue as that object contains methods.\nIs this something you would not expect to be passed between components?\n. @dannymidnight  Could probably use $.Deferred in other situations? - http://api.jquery.com/category/deferred-object/\n. @angus-c Interesting idea with the wrapper. I've been looking at something similar. Do you just pass in normal Ajax options alongside your desired event names?\nEdit: I'm now using this - https://gist.github.com/simonsmith/5089415 \nDoes the job but improvements welcomed \n. Figured it's due to what element is passed to .attachTo.\n. Read this section - https://github.com/twitter/flight#subscribing-to-events \nCovers how you can use the defaultAttrs as delegate selectors\n. Makes sense. Thanks\n. You can work round this by using the shim config. Working example - https://github.com/simonsmith/flight-demo/blob/master/app/main.js\n. Just to note, jQuery will always create a global $ regardless of AMD/non-AMD use.\n. I imagine you'd still need the shim option to get jQuery plugins to play nice. I've seen hardly any support AMD.\n. Do mixins fit in here at all? I was thinking an Ajax mixin would be a nice one to have.\n. Is there an example where you wouldn't have it as part of the defaultAttrs?\n. What is the current recommendation for delegation when attaching components? For example I have multiple button components that I want to use delegation on. Right now I attach to the document and delegate to the button components with a selector in the attributes:\njs\nthis.on('click', { followBtnSelector: this.followBtnClick });\nDoesn't quite feel right attaching to the document but it's the best way I can think of.\n. In my example I can't attachTo directly to my button components, as more may be added to the page via an Ajax request (similar I guess to tweets being added on scroll). In this case I have been attaching the component to the document and using a selector to attach behaviour to the buttons.\nDoes this seem a reasonable way to solve such a use case?\n. I have been using event.target for that purpose\n. @angus-c I have an Ajax mixin that triggers an event with the arguments from beforeSend, complete etc and one of those is the jqXHR object. Obviously I'm hitting the same issue as that object contains methods.\nIs this something you would not expect to be passed between components?\n. @dannymidnight  Could probably use $.Deferred in other situations? - http://api.jquery.com/category/deferred-object/\n. @angus-c Interesting idea with the wrapper. I've been looking at something similar. Do you just pass in normal Ajax options alongside your desired event names?\nEdit: I'm now using this - https://gist.github.com/simonsmith/5089415 \nDoes the job but improvements welcomed \n. Figured it's due to what element is passed to .attachTo.\n. Read this section - https://github.com/twitter/flight#subscribing-to-events \nCovers how you can use the defaultAttrs as delegate selectors\n. Makes sense. Thanks\n. You can work round this by using the shim config. Working example - https://github.com/simonsmith/flight-demo/blob/master/app/main.js\n. Just to note, jQuery will always create a global $ regardless of AMD/non-AMD use.\n. I imagine you'd still need the shim option to get jQuery plugins to play nice. I've seen hardly any support AMD.\n. Do mixins fit in here at all? I was thinking an Ajax mixin would be a nice one to have.\n. Is there an example where you wouldn't have it as part of the defaultAttrs?\n. What is the current recommendation for delegation when attaching components? For example I have multiple button components that I want to use delegation on. Right now I attach to the document and delegate to the button components with a selector in the attributes:\njs\nthis.on('click', { followBtnSelector: this.followBtnClick });\nDoesn't quite feel right attaching to the document but it's the best way I can think of.\n. In my example I can't attachTo directly to my button components, as more may be added to the page via an Ajax request (similar I guess to tweets being added on scroll). In this case I have been attaching the component to the document and using a selector to attach behaviour to the buttons.\nDoes this seem a reasonable way to solve such a use case?\n. I have been using event.target for that purpose\n. ",
    "danse": "i found the same problem. I was sending some components in an event in order to add them to an (already initialized) form component. Either i send them to the container component somehow, or i have to import (require) them in the container component and send just the path. i thought that the first solution was more elegant but now i see it is discouraged\n. also on 1.0.5 (updated quickly thanks to bower ;) ) , line 97\n. My fault. I had:\nsuccess: this.success\nin the jQuery request object and\nthis.success = function(data){\n   this.trigger('success', data);\n}.bind(this)\nin the component.\nThis was wrong.\nThe correct way showed to be:\nsuccess: this.success.bind(this)\nin the jQuery request object and\nthis.success = function(data){\n   this.trigger('success', data);\n}\nin the component\n. i'm really sorry about the lack of details in this issue, i didn't had the time to collect information, please wait until monday - @fishlevel we should build a testcase and collect versions\n. I built a simple test case here https://github.com/danse/flight/blob/95/failing.js but i was not able to reproduce the error. Clearly, the problem was not as simple as we expected, and we cannot file any issue on flight until we are able to better isolate the error. It could easily be an error in our code. Thanks anyway for the support!\n. so should it also be this.attrs ?\n. a developer can remember the difference when developing components, but when developing things working with components the choice adds uncertainty\nfrom the interface point of view, i think it should be possible to introduce a coherent attribute / method and deprecate the other one still keeping it present\n. i found the same problem. I was sending some components in an event in order to add them to an (already initialized) form component. Either i send them to the container component somehow, or i have to import (require) them in the container component and send just the path. i thought that the first solution was more elegant but now i see it is discouraged\n. also on 1.0.5 (updated quickly thanks to bower ;) ) , line 97\n. My fault. I had:\nsuccess: this.success\nin the jQuery request object and\nthis.success = function(data){\n   this.trigger('success', data);\n}.bind(this)\nin the component.\nThis was wrong.\nThe correct way showed to be:\nsuccess: this.success.bind(this)\nin the jQuery request object and\nthis.success = function(data){\n   this.trigger('success', data);\n}\nin the component\n. i'm really sorry about the lack of details in this issue, i didn't had the time to collect information, please wait until monday - @fishlevel we should build a testcase and collect versions\n. I built a simple test case here https://github.com/danse/flight/blob/95/failing.js but i was not able to reproduce the error. Clearly, the problem was not as simple as we expected, and we cannot file any issue on flight until we are able to better isolate the error. It could easily be an error in our code. Thanks anyway for the support!\n. so should it also be this.attrs ?\n. a developer can remember the difference when developing components, but when developing things working with components the choice adds uncertainty\nfrom the interface point of view, i think it should be possible to introduce a coherent attribute / method and deprecate the other one still keeping it present\n. ",
    "boschni": "I've ran into the same problem. I want to automatically initialize all Flight components within a specific DOM node with my ComponentInitializer component. The ComponentInitializer will search for uninitialized Flight components within a given DOM node, and initializes them automatically.\nBut before the components are initialized, I want to trigger a \"before initialization event\" so that other (existing) components have the ability to process/modify the DOM node (the context) before the Flight components within it are initialized. Because of this, I need to send the node together with the \"ComponentInitializer:beforeInitializeContext\" event like this:\nthis.trigger('ComponentInitializer:beforeInitializeContext', { context: context });\nUnfortunately, Flight throws an error because the context property (the DOM node) is not serializable. Would this be a valid use case or am I moving in the wrong direction?\n. I've ran into the same problem. I want to automatically initialize all Flight components within a specific DOM node with my ComponentInitializer component. The ComponentInitializer will search for uninitialized Flight components within a given DOM node, and initializes them automatically.\nBut before the components are initialized, I want to trigger a \"before initialization event\" so that other (existing) components have the ability to process/modify the DOM node (the context) before the Flight components within it are initialized. Because of this, I need to send the node together with the \"ComponentInitializer:beforeInitializeContext\" event like this:\nthis.trigger('ComponentInitializer:beforeInitializeContext', { context: context });\nUnfortunately, Flight throws an error because the context property (the DOM node) is not serializable. Would this be a valid use case or am I moving in the wrong direction?\n. ",
    "traviskaufman": "can't pass FormData either, making decoupling data and ui for a \"File Upload\" component pretty tricky\n. resurrecting this I think but if it's still something everyone is interested in I would be happy to take a look. It also might be a good candidate to add into flight-inspector.\n. can't pass FormData either, making decoupling data and ui for a \"File Upload\" component pretty tricky\n. resurrecting this I think but if it's still something everyone is interested in I would be happy to take a look. It also might be a good candidate to add into flight-inspector.\n. ",
    "giuseppeg": "@angus-c wouldn't focusout(*) solve his issue? If I understood correctly he is experiencing an event bubbling issue.\nThe jQuery version works because of a workaround https://github.com/jquery/jquery/blob/master/src/event.js#L682\n(*) which, ok, is not supported in some browsers like gecko iirc\n. @mkuklis great! \nAnyway take in mind that focusout is not supported by Firefox (Gecko). (see the browser compatibility table on MDN)\nAnother way of implementing event delegation for the blur event is by setting the useCapture parameter of addEventListener to true:\njavascript\ndocument.addEventListener('blur', function (event) {\n    console.dir(event.target);\n}, true);\n. @mkuklis Yep, so did I in my second-last comment.\njQuery simulates the event delegation creating a special event for each element, plus a single capturing handler that is attached to the ancestor actually :)\nAwesome implementation of todomvc by the way!\n. @BugiDev in v1.1.4 you will be able to extend existing base components see https://github.com/flightjs/flight/commit/ffaeb88ce268ebaca253b61d14f1d3b55a9bb4cd\n. @angus-c agreed.\nI am just evaluating the pros and cons of having a selectors object in order to avoid the Selector prefix/suffix.\njavascript\nthis.defaultAttrs({\n    fooSelector: \".foo\",\n    barSelector: \".bar\"\n    baz: true\n});\nvs\njavascript\nthis.defaultAttrs({\n    selectors: {\n        foo: \".foo\",\n        bar: \".bar\"\n    },\n    baz: true\n});\nAnd trying to find a standard way to deal with Selectors and Classnames that are the same.\nRight now that's what I do:\njavascript\nthis.defaultAttrs({\n    foo: \".foo\",\n});\n/* ... */\nthis.select('foo');\n/* ... */\nthis.$elem.addClass(this.attr.foo.slice(1));\nI think that we can close the Issue, but I would like to know your thoughts on this.\n. I think that you could just mention that it works like the jQuery on does\n. My bad, I realized that after a chat with a guy in the bower irc channel\n. Because those events do not bubble up the document tree, and as far as I understood Flight's delegate doesn't use the jQuery's one (which can capture those \"normalized events\").\nIf you don't care about gecko based browsers (Firefox) you can listen for focusin and focusout.\nHopefully they will look into this issue at some point :)\n. this.$node.on('focus', this.attr.inputSelector, this.emailFocused); \nshould work too (see http://jsfiddle.net/2Panx/)\nBy the way you can capture those events by setting the addEventListener's useCapture argument value to true (IE>8). You may want to read Delegating the focus and blur events \n. @wwwsevolod correct.\nThat could be fixed tho:\n``` javascript\nvar instanceInfo = flight.registry.findInstanceInfo(this); \nif (instanceInfo) {\n    instanceInfo.events.push({\n        callback: this.doSomething,\n        element: this.node,\n        type: 'focus'\n    });\nthis.$node.on('focus', this.attr.inputSelector, this.doSomething.bind(this));\n\n}\n```\nQuite dirty and hacky if you want, but it should work. Obviously we need a neat, native working solution.\nI'll see if I can come up with a fix next week when I'll be back from vacations.\nCheers\nG.\n. Here is a quick fix:\nhttps://gist.github.com/giuseppeg/6612820\nAt this point utils.delegate does some unnecessary work, and its logic should be changed a bit.\nI would like to hear what the Flight's team members think about this.\n. how so?\nThe callback (event handler) is a function produced by utils.delegate which will make sure that the correct callback is called.\nhttps://github.com/flightjs/flight/blob/master/lib/utils.js#L217\n. > although blur and focus still wouldn't invoke the callback when triggered on elements that weren't covered by one of the delegateRule selectors - in contrast to the behavior for bubbling events\nThat's fine I guess.\n\nNot sure if always binding the event to this hybrid selector, instead of just the node (or specified), requires extra overhead on the part of jQuery (see http://james.padolsey.com/jquery/#v=1.10.2&fn=jQuery.event.add). If it does, it might not be worth doing for the sake of these two edge cases.\n\nYeah that requires some investigation/tests.\n\"Delegated events that use more complex selectors, particularly hierarchical ones, can be several times slower--although they are still fast enough for most applications.\" obviously.\n\nYou could also workaround delegation for blur and focus by using a hybrid selector in these cases only:\nthis.on(blurrableSelectors.join(','), 'blur', {/*delegateObj*/})\n\nThis wouldn't be event delegation anymore.\n. You know what, I have an idea.\nI think that we could easily fix it mapping focus and blur to focusin and focusout.\n``` javascript\nvar special = {\n    focus: 'focusin',\n    blur: 'focusout'\n};\ntype = type.replace(new RegExp(Object.keys(special).join('|'), 'ig'), function (evt) {\n    if (special[evt]) {\n        return special[evt];\n    }\n});\n``\n. I mean$elementwould beblurrableSelectorsinstead ofthis.$node(or any other anchestor) meaning that you are actually binding to the target elements, am I wrong?\n. @necolas yeah, I think so.\n. While I think that is good to have an utility likeonce, I would like to point out that a such method doesn't remove event handlers after the first execution of the fn.\nBy the way jQuery calls itone`.\nMy proposal: https://gist.github.com/giuseppeg/7020843\n. @angus-c because it keeps listening for that event and handling it when we actually don't need it anymore.\nThat said, I am fine with the util solution :)\n. @wwwsevolod a solution that involves events namespacing would be weak and unsafe imho.\nAngus' solution looks great although I share phuu's thoughts\n. You can dispatch the event to other DOM nodes eg. this.trigger(document, 'foo') exposing the namespace (component id) to other instances/components.\nIn fact you can get the namespace form jQueryEvent.handleObj.namespace\nwth am I saying? this is totally wrong! \nPlease forgive me, I am tired :)\n. If you do so you will be able to trigger events only to the component's descentants.\nTherefore something like this.trigger(document, 'foo', data) wouldn't work.\nTry this:\njavascript\nthis.defaultAttrs({\n  childSelector: '.child'\n});\nthis.trigger(this.select('childSelector'), 'click');\n. @angus-c not if you console.dir(eventData) !?\nIt would be cool to have tabular data in certain cases i.e. use console.table but this should be disabled by default.\n. I'd personally go for the solution suggested by @angus-c on the google group\nFor your specific problem you'd be better off using a variable or a component property (`var list = []` or `this.list = []`) since there is no instance specific value that you need to pass thru in the attachTo\nIf you still want to deep clone... you could use a mixin like this: \nhttps://gist.github.com/giuseppeg/8516790 \nYou can see it in action here http://jsfiddle.net/dBM6K/2/\nps. the .bind(this) at line 14 is not needed (my bad) :)\n. @caryfitzhugh I don't think you need an external utility for cloning.\nAnyway I'd wait for other opinions on my suggestion.\nYou may want to bring the discussion to the IRC channel for a quick response.\n. Returns new object representing multiple objects merged together. Optional final argument is boolean which specifies if merge is recursive. Original objects are unmodified.\nBasically utils.merge is a wrapper for jQuery's extend that always merge the Objects into a brand new one.\nSo if you pass a single Object and true (deepCopy) it actually clone it.\n. I hear you @angus-c. Thanks for sharing your opinion.\nHowever I have a few objections to make:\nfor example in your snippet we call the original function with '5' - which the na\u00efve reader will probably now assume the only parameter passed\nThat's true but it is not a big deal in my opinion. He/she will probably use only the new parameters and ignore the rest.\nI can't imagine why one would invoke existingFuncName without the original parameters. In fact the developer may want to wrap existingFuncName without changing its behaviour.\nOn the other hand I see the inconsistency. We would call existingFuncName() without parameters but in fact we are passing them behind the scenes.\nThat said, I think that the best thing to do is to just mention this somewhere in the docs.\nIf you agree we can close this issue.\n. It doesn't. It supports IE 7+\nProgressive enhancement ftw\n. Hi @DKunin \nYes, data components should only deal with data - fetch/prepare/broadcast.\nhere is what I would do (which is similar to what you described):\n- compile and dump your templates as json string in a file (templateName - template pairs)\n- make those templates global or pass them to the page (eg. app/page/default.js) when you boot/initialize it (on app/main.js)\n- create a mixin that you can use with UI components. It exposes a render method/interface to the template engine\n- when you attach the UI component to DOM elements you pass a template from the templates object like this \njavascript\nFoo.attachTo(document.body, {\n    fooTpl: templates.foo\n});\n- that you can render later\njavascript\nthis.dataReceived = function (event, data) {\n    var tpl = this.render(this.attr.fooTpl, data);\n    this.$node.append(tpl);\n};\nIf you want to decouple you could create a UI component that would act as renderer (like a network printer). It would hold all the tempaltes and any UI component could ask it to render a templateName with some data. Here you'd have to deal with the event ownership issue. Also the UI component should know the templateName in advance.\nOverall the latter adds more complexity and I am not sure whether it is an optimal solution.\n. @tbrd are those top level variables (the one holded in the mixin definition scope) shared across the component instances or does each instance get a copy of them? Shared right?\n. I actually prefer Github issues, the UI is clean and I get notifications via email which I can label, filter, search.\nWhat if you guys create a custom label for support questions / other topics here on Github?\nIRC is great as well, actually I would love to see people joining the IRC channel to ask questions or just to chat in general :)\nGoogle groups are a bit messy and Facebook is just for branding/exposure imho.\n. There is no such thing as collections in Flight. \nIn fact Components do not engage each other directly\nIn order to do what you propose, one can write mixins and pack(compose) them in a component.\neg.\njavascript\nreturn defineComponent(Overlay, withDialog, withDrag, withKeyboardNav, withWhatever);\n. @tbrd Yeah something like this I guess https://gist.github.com/giuseppeg/9638666\n. @tbrd that's correct and I thought of that issue while I was writing that example. \nObviously the best way to do it would be to look for child nodes that have a component instance attached to them.\n@phuu I haven't had such need so far :)\n. @tbrd that would teardown them all.\n@rlavoie  in that case you could modify the gist I posted before. Just change the condition to something like\nif (component.attr.teardown) { component.teardown(); } or !component.attr.teardown as you prefer.\nOh and instead of using advice, convert it to a function eg this.awesomeTeardown = function () {};.\n. If I understand correctly you want to do event delegation in Flight.\nThis is documented on the base api docs - 3rd example\n. Remember that you are using the Flight on method not the jQuery one.\nYour line of code translates to $('input').on('blur', this.handler);\nSo each input gets two event handlers (or as many as your instances are).\nYou should use event delegation here. See the example.\n. I may have a solution for this issue, the idea is simple: we always unbind using the callback (we have it in the registry afterall).\nBefore I do further tests, write actual tests and submit a PR, I would like to ask for your feedback @staeke @phuu @angus-c @danwrong @kennethkufluk \nhttps://gist.github.com/giuseppeg/2611a50416443bf6d375\nand the diff\n. Yep, because proxyEventTo returns a function\n. Yes they do because it only loops through the current instance events.\nImproved it a bit so it unbinds namespaced events too [diff]\n. @phuu #283 matches jQuery's behaviour by using the regular expression from jQuery to add namespace support.\n. The jQuery's on signature is slightly different, and it would be worth mentioning that Flight's api != jQuery's one.\nBecause of the similarities people don't read the doc and get confused imho (I did the same mistake at the beginning).\nOften times event delegation is really what you want to do. Personally I've never bound to this.select('descendants').\n@staeke is right when he says that a component shouldn't be able to query the DOM like that, and maybe it would be nice to allow it to select only a subset of it eg. window, document, html, head, body, link, meta, script etc. but that's OT\n. Makes sense.\nPer instance callback removal is now #282 \nNamespace events is now #283\n. If we merge #280 we are halfway to the solution I guess\n. Correct, I need that commit to add namespace support.\n. Good idea, that should work.\n@angus-c after #264 I wonder if we still want to add namespaces support\n. No problem and sorry for the mess :)\nPersonally I haven't had the need to use namespaced events so far :)\nI agree with you and I am concerned about performances too - it is bad that we have to do the same thing that jQuery does later (test against the regex).\n. Why would you do that?\nYou may want to do something like this:\nUI component:\njavascript\nthis.on('dataFetched', this.consumeData);\nthis.trigger('uiSomething'/* , optionalData */);\nData component:\n``` javascript\nthis.fetchData = function (event, data) {\n  // do request... and on success trigger dataFetched with the responsedata\n  this.trigger('dataFetched', responseData);\n};\nthis.on('uiSomething', this.fetchData);\n```\n. Oops @varontron replied while I was writing my comment :p \nAnyway if you still want to do that you can do this:\njavascript\nthis.trigger('dataRequested', {\n  callback: function(data) {\n     // use data here\n  }.bind(this)\n});\nbut that's silly imho\n. You could use unique ids on your components to determine event ownership.\nhtml\n<div class=\"myComponent\" data-guid=\"tweet-123456\"></div>\nIDs are server side generated in a deterministic way (eg. type-id)\nThe UI component gets the responseData (containing the ID) from the data component.\njavascript\nthis.consumeData = function (event, data) {\n   if (!data.GUID || data.GUID != this.$node.attr(\"data-guid\")) {\n      return;\n   }\n};\nThis check could be part of a mixin actually that you can use with advice's before like this:\njavascript\nthis.on('dataFetched', this.before('consumeData', this.checkForEventOwnership));\n. We kind of discussed this once https://github.com/flightjs/flight/pull/199/files\nHowever it is still there. Also I am no 100% sure that what @angus-c said is correct (have to test it)\ne.delegateTarget would be document while e.currentTarget should be the correct one?\n. @simonsmith attachTo the closest common parent. In the tweets example it could be the timeline.\nevent.currentTarget is a reference to the dom element within the event bubbling phase (your button).\n. event.currentTarget is a reference to the dom element within the event bubbling phase (your button)\nerr this is not true in Flight (it is in jQuery though)\n. @simonsmith it's not the same thing. Anyway we are off-topic here.\n. +1\n. @BugiDev no. You already have this.node though\n. @nkzawa it'll return a NodeList I suppose that you can still convert to a jQuery object if you decide to use jQuery in your project\n. @nkzawa it should be fairly easy to use advice to write a withJQuery mixin.\n``` javascript\nfunction withJQuery() {\n  // define this.$node\n  this.after('initialize', function () {\n    this.$node = $(this.node);\n  });\n// wrapper for select to return jQuery objects\n  this.around('select', function (select) {\n    return $(select([].slice.call(arguments, -1)));\n  });\n}\n```\nThat you can manually mix with a component:\njavascript\n// Must be the first mixin\nvar MyComponent = flight.component(withJQuery, function () {});\nOr we could decide to hook into the registry and do that automatically for you.\n. @phuu you can close this I guess\n. @angus-c you may want to take a look at #237 too\n. sure go ahead\n. @phuu I guess we can. Let's see what the other people think about it.\n. sure np\n. Those events don't bubble. You may want to try with mouseover/mouseout. See #178 too.\n. This may be not that straightforward, because all we have is a function (the rules live in its closure).\nhttps://github.com/flightjs/flight/blob/master/lib/utils.js#L235\n. @phuu @danwrong if you make it public (push to a dev branch) we could fork/help.\n. @phuu +1 on this, your proposal sg2m too.\n. Wouldn't this go against the principle of separation of concerns?\nFlight enforces strict separation of concerns. When you create a component you don't get a handle to it. Consequently, components cannot be referenced by other components and cannot become properties of the global object tree. This is by design. Components do not engage each other directly\nWhat would happen when\n- the child component is torn down\n- your try to do something with the instance\n@tbrd with events instead the child components teardown themselves in case they are still around\n. @phuu I hear you but that's one of the best features of flight in my opinion.\nMaybe we can improve withChildComponents to solve some of those problems.\nFor example we could add a children registry where we store some info about children components,\npush stuff on it when we use this.attachChild and have this.attachChild return a ChildComponent object that exposes the API you suggested ie. you get instance info only from this.attachChild instead of Component.attachTo.\nthis.attachChild would mix an object in the child component so that after teardown we can remove the child from the parent's registry.\nChildComponent would have access to the children registry of course.\nI also suggest to introduce a new concept of RootComponent|ComponentsGroup|FlightSquares :) or something like that so that people understand that components that get withChildComponents are just a common place where you can organise the subtree and establish those relationships - at yelp we call them controllers (see comment below)\n. The other day I realized that the idea above is implemented in Deku (a component-based framework from Segment). They call these things Scene(s) https://github.com/segmentio/deku/wiki/Scene-API\nThis is not a thing anymore, Scenes are normal components in the tree.\n. Would it make more sense to try es6 classes first (and mixins) and see how goes?\nEither ways I would like to add the sugar! Let's just agree on which one we like the most.\n. Yeah we could have a flag on attributes say strictmode to disable the strict checks introduced by this method. In this way defaultAttrs would only be a proxy fn to attributes with strictmode: false\n. flight-toolbox++\n. @ZhihaoJia that's correct. \nThe old this.defaultAttrs would fail when the second mixin had an attribute already defined on the previous mixins:\nUncaught Error: utils.push attempted to overwrite \"wantsCookies\" while running in protected mode\nWhen the docs were updated Nicolas forgot to invert the order I guess.\nHere is the relevant code\n. @phuu I'd say lets improve the current docs first, maybe starting by adding more examples. We can turn them into a Jekyll site in no time later.\nGood examples could be:\n- managing the lifecycle of a group of components in a page\n- PJAX-ing with flight\n- integration with Boostrap\nIn general FAQ kind of articles.\n. @phillip-haydon I am ok with that although I think that keeping the docs in the same repo is better for a simple reason: when you tag a new release the docs reflect that version state.\nAlso people can contribute with pull requests already, although that's not as straightforward as editing a wiki :)\n. I think we have two options here:\n1) we start to polyfill a whole bunch of stuff (not too excited about this)\n2) we suggest to use or we find a way to bundle FT's polyfills with flight - no tests required form our end\nhttp://git.io/vO3gc\n. sg2m, we'll have to figure out how to make standalone builds from their repo and maybe deploy it in a separate repo under the flightjs org. Would you keep es5-shim or should we include its shims in the Flight bundle?\nbtw yes they have polyfills for all the \u00b1 new features, CustomEvent included.\n. I like that :shipit: \n. Hey Tom, count on me if you need some project management help and want to speed up the v2 release + occasional code contributions.\n. @phuu https://github.com/flightjs/flight/issues/368 let me know if you need further info.\n. @phuu my understanding is that trigger is broken when you fire with an event object \u2013 relevant code.\nConsider this:\njavascript\nthis.trigger(document, { type: \"click\" });\nHere's what happens step by step:\n``` javascript\nvar element, type, data, event;\nvar lastIndex = arguments.length - 1, lastArg = arguments[lastIndex];\n// lastIndex == 1\n// lastArg == { type: \"click\" }\nif (typeof lastArg != 'string') { // evaluates to true\n    lastIndex--;\n    data = lastArg;\n}\n// lastIndex == 0\nif (lastIndex == 1) { // evaluates to false\n    element = dom.select(arguments[0]);\n    event = arguments[1];\n} else {\n    element = this.node;\n    event = arguments[0];\n}\n// element == this.node instead of document\n// event == document instead of { type: \"click\" }\n``\n. @phuu I was thinking that maybe I can split this PR in two and we can merge theselect[All]fix for now and fixtigger` later.\nIf you agree what do you think about my suggestion to remove document and window from the selectorShortcuts and add html? This mean that dom.select('document') for example won't work anymore... I don't see why you would use dom.select to select document or window :)\n. @phuu no problem, thank you guys for open sourcing the framework in the first place :)\n. weird it should throw in strict mode\n. The framework is fairly mature and stable. \nIn the meantime new frameworks came up with excellent ideas like declarative UIs, vdom and many others - @phuu wrote about this recently. Implementing those into flight in my opinion would mean write a new and totally different framework.\nWhile I still love Flight, I think that the declarative UI and mono directional data flow pattern of React is a bit more practical and efficient.\n. @angus-c wouldn't focusout(*) solve his issue? If I understood correctly he is experiencing an event bubbling issue.\nThe jQuery version works because of a workaround https://github.com/jquery/jquery/blob/master/src/event.js#L682\n(*) which, ok, is not supported in some browsers like gecko iirc\n. @mkuklis great! \nAnyway take in mind that focusout is not supported by Firefox (Gecko). (see the browser compatibility table on MDN)\nAnother way of implementing event delegation for the blur event is by setting the useCapture parameter of addEventListener to true:\njavascript\ndocument.addEventListener('blur', function (event) {\n    console.dir(event.target);\n}, true);\n. @mkuklis Yep, so did I in my second-last comment.\njQuery simulates the event delegation creating a special event for each element, plus a single capturing handler that is attached to the ancestor actually :)\nAwesome implementation of todomvc by the way!\n. @BugiDev in v1.1.4 you will be able to extend existing base components see https://github.com/flightjs/flight/commit/ffaeb88ce268ebaca253b61d14f1d3b55a9bb4cd\n. @angus-c agreed.\nI am just evaluating the pros and cons of having a selectors object in order to avoid the Selector prefix/suffix.\njavascript\nthis.defaultAttrs({\n    fooSelector: \".foo\",\n    barSelector: \".bar\"\n    baz: true\n});\nvs\njavascript\nthis.defaultAttrs({\n    selectors: {\n        foo: \".foo\",\n        bar: \".bar\"\n    },\n    baz: true\n});\nAnd trying to find a standard way to deal with Selectors and Classnames that are the same.\nRight now that's what I do:\njavascript\nthis.defaultAttrs({\n    foo: \".foo\",\n});\n/* ... */\nthis.select('foo');\n/* ... */\nthis.$elem.addClass(this.attr.foo.slice(1));\nI think that we can close the Issue, but I would like to know your thoughts on this.\n. I think that you could just mention that it works like the jQuery on does\n. My bad, I realized that after a chat with a guy in the bower irc channel\n. Because those events do not bubble up the document tree, and as far as I understood Flight's delegate doesn't use the jQuery's one (which can capture those \"normalized events\").\nIf you don't care about gecko based browsers (Firefox) you can listen for focusin and focusout.\nHopefully they will look into this issue at some point :)\n. this.$node.on('focus', this.attr.inputSelector, this.emailFocused); \nshould work too (see http://jsfiddle.net/2Panx/)\nBy the way you can capture those events by setting the addEventListener's useCapture argument value to true (IE>8). You may want to read Delegating the focus and blur events \n. @wwwsevolod correct.\nThat could be fixed tho:\n``` javascript\nvar instanceInfo = flight.registry.findInstanceInfo(this); \nif (instanceInfo) {\n    instanceInfo.events.push({\n        callback: this.doSomething,\n        element: this.node,\n        type: 'focus'\n    });\nthis.$node.on('focus', this.attr.inputSelector, this.doSomething.bind(this));\n\n}\n```\nQuite dirty and hacky if you want, but it should work. Obviously we need a neat, native working solution.\nI'll see if I can come up with a fix next week when I'll be back from vacations.\nCheers\nG.\n. Here is a quick fix:\nhttps://gist.github.com/giuseppeg/6612820\nAt this point utils.delegate does some unnecessary work, and its logic should be changed a bit.\nI would like to hear what the Flight's team members think about this.\n. how so?\nThe callback (event handler) is a function produced by utils.delegate which will make sure that the correct callback is called.\nhttps://github.com/flightjs/flight/blob/master/lib/utils.js#L217\n. > although blur and focus still wouldn't invoke the callback when triggered on elements that weren't covered by one of the delegateRule selectors - in contrast to the behavior for bubbling events\nThat's fine I guess.\n\nNot sure if always binding the event to this hybrid selector, instead of just the node (or specified), requires extra overhead on the part of jQuery (see http://james.padolsey.com/jquery/#v=1.10.2&fn=jQuery.event.add). If it does, it might not be worth doing for the sake of these two edge cases.\n\nYeah that requires some investigation/tests.\n\"Delegated events that use more complex selectors, particularly hierarchical ones, can be several times slower--although they are still fast enough for most applications.\" obviously.\n\nYou could also workaround delegation for blur and focus by using a hybrid selector in these cases only:\nthis.on(blurrableSelectors.join(','), 'blur', {/*delegateObj*/})\n\nThis wouldn't be event delegation anymore.\n. You know what, I have an idea.\nI think that we could easily fix it mapping focus and blur to focusin and focusout.\n``` javascript\nvar special = {\n    focus: 'focusin',\n    blur: 'focusout'\n};\ntype = type.replace(new RegExp(Object.keys(special).join('|'), 'ig'), function (evt) {\n    if (special[evt]) {\n        return special[evt];\n    }\n});\n``\n. I mean$elementwould beblurrableSelectorsinstead ofthis.$node(or any other anchestor) meaning that you are actually binding to the target elements, am I wrong?\n. @necolas yeah, I think so.\n. While I think that is good to have an utility likeonce, I would like to point out that a such method doesn't remove event handlers after the first execution of the fn.\nBy the way jQuery calls itone`.\nMy proposal: https://gist.github.com/giuseppeg/7020843\n. @angus-c because it keeps listening for that event and handling it when we actually don't need it anymore.\nThat said, I am fine with the util solution :)\n. @wwwsevolod a solution that involves events namespacing would be weak and unsafe imho.\nAngus' solution looks great although I share phuu's thoughts\n. You can dispatch the event to other DOM nodes eg. this.trigger(document, 'foo') exposing the namespace (component id) to other instances/components.\nIn fact you can get the namespace form jQueryEvent.handleObj.namespace\nwth am I saying? this is totally wrong! \nPlease forgive me, I am tired :)\n. If you do so you will be able to trigger events only to the component's descentants.\nTherefore something like this.trigger(document, 'foo', data) wouldn't work.\nTry this:\njavascript\nthis.defaultAttrs({\n  childSelector: '.child'\n});\nthis.trigger(this.select('childSelector'), 'click');\n. @angus-c not if you console.dir(eventData) !?\nIt would be cool to have tabular data in certain cases i.e. use console.table but this should be disabled by default.\n. I'd personally go for the solution suggested by @angus-c on the google group\nFor your specific problem you'd be better off using a variable or a component property (`var list = []` or `this.list = []`) since there is no instance specific value that you need to pass thru in the attachTo\nIf you still want to deep clone... you could use a mixin like this: \nhttps://gist.github.com/giuseppeg/8516790 \nYou can see it in action here http://jsfiddle.net/dBM6K/2/\nps. the .bind(this) at line 14 is not needed (my bad) :)\n. @caryfitzhugh I don't think you need an external utility for cloning.\nAnyway I'd wait for other opinions on my suggestion.\nYou may want to bring the discussion to the IRC channel for a quick response.\n. Returns new object representing multiple objects merged together. Optional final argument is boolean which specifies if merge is recursive. Original objects are unmodified.\nBasically utils.merge is a wrapper for jQuery's extend that always merge the Objects into a brand new one.\nSo if you pass a single Object and true (deepCopy) it actually clone it.\n. I hear you @angus-c. Thanks for sharing your opinion.\nHowever I have a few objections to make:\nfor example in your snippet we call the original function with '5' - which the na\u00efve reader will probably now assume the only parameter passed\nThat's true but it is not a big deal in my opinion. He/she will probably use only the new parameters and ignore the rest.\nI can't imagine why one would invoke existingFuncName without the original parameters. In fact the developer may want to wrap existingFuncName without changing its behaviour.\nOn the other hand I see the inconsistency. We would call existingFuncName() without parameters but in fact we are passing them behind the scenes.\nThat said, I think that the best thing to do is to just mention this somewhere in the docs.\nIf you agree we can close this issue.\n. It doesn't. It supports IE 7+\nProgressive enhancement ftw\n. Hi @DKunin \nYes, data components should only deal with data - fetch/prepare/broadcast.\nhere is what I would do (which is similar to what you described):\n- compile and dump your templates as json string in a file (templateName - template pairs)\n- make those templates global or pass them to the page (eg. app/page/default.js) when you boot/initialize it (on app/main.js)\n- create a mixin that you can use with UI components. It exposes a render method/interface to the template engine\n- when you attach the UI component to DOM elements you pass a template from the templates object like this \njavascript\nFoo.attachTo(document.body, {\n    fooTpl: templates.foo\n});\n- that you can render later\njavascript\nthis.dataReceived = function (event, data) {\n    var tpl = this.render(this.attr.fooTpl, data);\n    this.$node.append(tpl);\n};\nIf you want to decouple you could create a UI component that would act as renderer (like a network printer). It would hold all the tempaltes and any UI component could ask it to render a templateName with some data. Here you'd have to deal with the event ownership issue. Also the UI component should know the templateName in advance.\nOverall the latter adds more complexity and I am not sure whether it is an optimal solution.\n. @tbrd are those top level variables (the one holded in the mixin definition scope) shared across the component instances or does each instance get a copy of them? Shared right?\n. I actually prefer Github issues, the UI is clean and I get notifications via email which I can label, filter, search.\nWhat if you guys create a custom label for support questions / other topics here on Github?\nIRC is great as well, actually I would love to see people joining the IRC channel to ask questions or just to chat in general :)\nGoogle groups are a bit messy and Facebook is just for branding/exposure imho.\n. There is no such thing as collections in Flight. \nIn fact Components do not engage each other directly\nIn order to do what you propose, one can write mixins and pack(compose) them in a component.\neg.\njavascript\nreturn defineComponent(Overlay, withDialog, withDrag, withKeyboardNav, withWhatever);\n. @tbrd Yeah something like this I guess https://gist.github.com/giuseppeg/9638666\n. @tbrd that's correct and I thought of that issue while I was writing that example. \nObviously the best way to do it would be to look for child nodes that have a component instance attached to them.\n@phuu I haven't had such need so far :)\n. @tbrd that would teardown them all.\n@rlavoie  in that case you could modify the gist I posted before. Just change the condition to something like\nif (component.attr.teardown) { component.teardown(); } or !component.attr.teardown as you prefer.\nOh and instead of using advice, convert it to a function eg this.awesomeTeardown = function () {};.\n. If I understand correctly you want to do event delegation in Flight.\nThis is documented on the base api docs - 3rd example\n. Remember that you are using the Flight on method not the jQuery one.\nYour line of code translates to $('input').on('blur', this.handler);\nSo each input gets two event handlers (or as many as your instances are).\nYou should use event delegation here. See the example.\n. I may have a solution for this issue, the idea is simple: we always unbind using the callback (we have it in the registry afterall).\nBefore I do further tests, write actual tests and submit a PR, I would like to ask for your feedback @staeke @phuu @angus-c @danwrong @kennethkufluk \nhttps://gist.github.com/giuseppeg/2611a50416443bf6d375\nand the diff\n. Yep, because proxyEventTo returns a function\n. Yes they do because it only loops through the current instance events.\nImproved it a bit so it unbinds namespaced events too [diff]\n. @phuu #283 matches jQuery's behaviour by using the regular expression from jQuery to add namespace support.\n. The jQuery's on signature is slightly different, and it would be worth mentioning that Flight's api != jQuery's one.\nBecause of the similarities people don't read the doc and get confused imho (I did the same mistake at the beginning).\nOften times event delegation is really what you want to do. Personally I've never bound to this.select('descendants').\n@staeke is right when he says that a component shouldn't be able to query the DOM like that, and maybe it would be nice to allow it to select only a subset of it eg. window, document, html, head, body, link, meta, script etc. but that's OT\n. Makes sense.\nPer instance callback removal is now #282 \nNamespace events is now #283\n. If we merge #280 we are halfway to the solution I guess\n. Correct, I need that commit to add namespace support.\n. Good idea, that should work.\n@angus-c after #264 I wonder if we still want to add namespaces support\n. No problem and sorry for the mess :)\nPersonally I haven't had the need to use namespaced events so far :)\nI agree with you and I am concerned about performances too - it is bad that we have to do the same thing that jQuery does later (test against the regex).\n. Why would you do that?\nYou may want to do something like this:\nUI component:\njavascript\nthis.on('dataFetched', this.consumeData);\nthis.trigger('uiSomething'/* , optionalData */);\nData component:\n``` javascript\nthis.fetchData = function (event, data) {\n  // do request... and on success trigger dataFetched with the responsedata\n  this.trigger('dataFetched', responseData);\n};\nthis.on('uiSomething', this.fetchData);\n```\n. Oops @varontron replied while I was writing my comment :p \nAnyway if you still want to do that you can do this:\njavascript\nthis.trigger('dataRequested', {\n  callback: function(data) {\n     // use data here\n  }.bind(this)\n});\nbut that's silly imho\n. You could use unique ids on your components to determine event ownership.\nhtml\n<div class=\"myComponent\" data-guid=\"tweet-123456\"></div>\nIDs are server side generated in a deterministic way (eg. type-id)\nThe UI component gets the responseData (containing the ID) from the data component.\njavascript\nthis.consumeData = function (event, data) {\n   if (!data.GUID || data.GUID != this.$node.attr(\"data-guid\")) {\n      return;\n   }\n};\nThis check could be part of a mixin actually that you can use with advice's before like this:\njavascript\nthis.on('dataFetched', this.before('consumeData', this.checkForEventOwnership));\n. We kind of discussed this once https://github.com/flightjs/flight/pull/199/files\nHowever it is still there. Also I am no 100% sure that what @angus-c said is correct (have to test it)\ne.delegateTarget would be document while e.currentTarget should be the correct one?\n. @simonsmith attachTo the closest common parent. In the tweets example it could be the timeline.\nevent.currentTarget is a reference to the dom element within the event bubbling phase (your button).\n. event.currentTarget is a reference to the dom element within the event bubbling phase (your button)\nerr this is not true in Flight (it is in jQuery though)\n. @simonsmith it's not the same thing. Anyway we are off-topic here.\n. +1\n. @BugiDev no. You already have this.node though\n. @nkzawa it'll return a NodeList I suppose that you can still convert to a jQuery object if you decide to use jQuery in your project\n. @nkzawa it should be fairly easy to use advice to write a withJQuery mixin.\n``` javascript\nfunction withJQuery() {\n  // define this.$node\n  this.after('initialize', function () {\n    this.$node = $(this.node);\n  });\n// wrapper for select to return jQuery objects\n  this.around('select', function (select) {\n    return $(select([].slice.call(arguments, -1)));\n  });\n}\n```\nThat you can manually mix with a component:\njavascript\n// Must be the first mixin\nvar MyComponent = flight.component(withJQuery, function () {});\nOr we could decide to hook into the registry and do that automatically for you.\n. @phuu you can close this I guess\n. @angus-c you may want to take a look at #237 too\n. sure go ahead\n. @phuu I guess we can. Let's see what the other people think about it.\n. sure np\n. Those events don't bubble. You may want to try with mouseover/mouseout. See #178 too.\n. This may be not that straightforward, because all we have is a function (the rules live in its closure).\nhttps://github.com/flightjs/flight/blob/master/lib/utils.js#L235\n. @phuu @danwrong if you make it public (push to a dev branch) we could fork/help.\n. @phuu +1 on this, your proposal sg2m too.\n. Wouldn't this go against the principle of separation of concerns?\nFlight enforces strict separation of concerns. When you create a component you don't get a handle to it. Consequently, components cannot be referenced by other components and cannot become properties of the global object tree. This is by design. Components do not engage each other directly\nWhat would happen when\n- the child component is torn down\n- your try to do something with the instance\n@tbrd with events instead the child components teardown themselves in case they are still around\n. @phuu I hear you but that's one of the best features of flight in my opinion.\nMaybe we can improve withChildComponents to solve some of those problems.\nFor example we could add a children registry where we store some info about children components,\npush stuff on it when we use this.attachChild and have this.attachChild return a ChildComponent object that exposes the API you suggested ie. you get instance info only from this.attachChild instead of Component.attachTo.\nthis.attachChild would mix an object in the child component so that after teardown we can remove the child from the parent's registry.\nChildComponent would have access to the children registry of course.\nI also suggest to introduce a new concept of RootComponent|ComponentsGroup|FlightSquares :) or something like that so that people understand that components that get withChildComponents are just a common place where you can organise the subtree and establish those relationships - at yelp we call them controllers (see comment below)\n. The other day I realized that the idea above is implemented in Deku (a component-based framework from Segment). They call these things Scene(s) https://github.com/segmentio/deku/wiki/Scene-API\nThis is not a thing anymore, Scenes are normal components in the tree.\n. Would it make more sense to try es6 classes first (and mixins) and see how goes?\nEither ways I would like to add the sugar! Let's just agree on which one we like the most.\n. Yeah we could have a flag on attributes say strictmode to disable the strict checks introduced by this method. In this way defaultAttrs would only be a proxy fn to attributes with strictmode: false\n. flight-toolbox++\n. @ZhihaoJia that's correct. \nThe old this.defaultAttrs would fail when the second mixin had an attribute already defined on the previous mixins:\nUncaught Error: utils.push attempted to overwrite \"wantsCookies\" while running in protected mode\nWhen the docs were updated Nicolas forgot to invert the order I guess.\nHere is the relevant code\n. @phuu I'd say lets improve the current docs first, maybe starting by adding more examples. We can turn them into a Jekyll site in no time later.\nGood examples could be:\n- managing the lifecycle of a group of components in a page\n- PJAX-ing with flight\n- integration with Boostrap\nIn general FAQ kind of articles.\n. @phillip-haydon I am ok with that although I think that keeping the docs in the same repo is better for a simple reason: when you tag a new release the docs reflect that version state.\nAlso people can contribute with pull requests already, although that's not as straightforward as editing a wiki :)\n. I think we have two options here:\n1) we start to polyfill a whole bunch of stuff (not too excited about this)\n2) we suggest to use or we find a way to bundle FT's polyfills with flight - no tests required form our end\nhttp://git.io/vO3gc\n. sg2m, we'll have to figure out how to make standalone builds from their repo and maybe deploy it in a separate repo under the flightjs org. Would you keep es5-shim or should we include its shims in the Flight bundle?\nbtw yes they have polyfills for all the \u00b1 new features, CustomEvent included.\n. I like that :shipit: \n. Hey Tom, count on me if you need some project management help and want to speed up the v2 release + occasional code contributions.\n. @phuu https://github.com/flightjs/flight/issues/368 let me know if you need further info.\n. @phuu my understanding is that trigger is broken when you fire with an event object \u2013 relevant code.\nConsider this:\njavascript\nthis.trigger(document, { type: \"click\" });\nHere's what happens step by step:\n``` javascript\nvar element, type, data, event;\nvar lastIndex = arguments.length - 1, lastArg = arguments[lastIndex];\n// lastIndex == 1\n// lastArg == { type: \"click\" }\nif (typeof lastArg != 'string') { // evaluates to true\n    lastIndex--;\n    data = lastArg;\n}\n// lastIndex == 0\nif (lastIndex == 1) { // evaluates to false\n    element = dom.select(arguments[0]);\n    event = arguments[1];\n} else {\n    element = this.node;\n    event = arguments[0];\n}\n// element == this.node instead of document\n// event == document instead of { type: \"click\" }\n``\n. @phuu I was thinking that maybe I can split this PR in two and we can merge theselect[All]fix for now and fixtigger` later.\nIf you agree what do you think about my suggestion to remove document and window from the selectorShortcuts and add html? This mean that dom.select('document') for example won't work anymore... I don't see why you would use dom.select to select document or window :)\n. @phuu no problem, thank you guys for open sourcing the framework in the first place :)\n. weird it should throw in strict mode\n. The framework is fairly mature and stable. \nIn the meantime new frameworks came up with excellent ideas like declarative UIs, vdom and many others - @phuu wrote about this recently. Implementing those into flight in my opinion would mean write a new and totally different framework.\nWhile I still love Flight, I think that the declarative UI and mono directional data flow pattern of React is a bit more practical and efficient.\n. ",
    "houfeng0923": "actually it sounds confusing in words, but now i do feel apparently when i saw the modified example  code in the link (https://github.com/twitter/flight#how-do-i-apply-mixins-to-a-regular-object). :+1: \nwe(my colleagues and me ) like flight .\n. actually it sounds confusing in words, but now i do feel apparently when i saw the modified example  code in the link (https://github.com/twitter/flight#how-do-i-apply-mixins-to-a-regular-object). :+1: \nwe(my colleagues and me ) like flight .\n. ",
    "OscarGodson": "Yes, that answered my question I think. Thank you. So, @mkuklis, it appears my suspicions were correct then unless the todomvc is a bad example. Instead of having components that reference a model (i.e. each to do item is a todo UI component that references a todo model) and the UI components have event handlers on them, you have event handlers on DOM elements that sift through the DOM for data properties. From the example:\njs\nthis.requestRemove = function (e, data) {\n  var id = $(data.el).attr('id').split('_')[1];\n  this.trigger('uiRemoveRequested', { id: id });\n}\nI'd like to have it like:\njs\nthis.requestRemove = function (e, data) {\n  this.trigger('uiRemoveRequested', { id: this.id });\n}\nPersonally I prefer to keep data out of the DOM. I've found that's made things to be a headache to refactor and change in the future. In the 2nd example the DOM can be freely changed (or completely removed for that matter) and it'd still work. But, as a I said, maybe this is a bad example?\n. @angus-c @mkuklis I see. I think it'd be beneficial to maybe have an example of this then in the Advice section. I was struggling to figure out the \"Flight way\" from the included example since it was just a giant object of data and when talking to some coworkers about it we were struggling to figure out how the data should be passed around since there are no models. It's a different train of thinking I believe that threw me off and leaves more up to interpretation. It seems so obvious now, however :)\n. Yes, that answered my question I think. Thank you. So, @mkuklis, it appears my suspicions were correct then unless the todomvc is a bad example. Instead of having components that reference a model (i.e. each to do item is a todo UI component that references a todo model) and the UI components have event handlers on them, you have event handlers on DOM elements that sift through the DOM for data properties. From the example:\njs\nthis.requestRemove = function (e, data) {\n  var id = $(data.el).attr('id').split('_')[1];\n  this.trigger('uiRemoveRequested', { id: id });\n}\nI'd like to have it like:\njs\nthis.requestRemove = function (e, data) {\n  this.trigger('uiRemoveRequested', { id: this.id });\n}\nPersonally I prefer to keep data out of the DOM. I've found that's made things to be a headache to refactor and change in the future. In the 2nd example the DOM can be freely changed (or completely removed for that matter) and it'd still work. But, as a I said, maybe this is a bad example?\n. @angus-c @mkuklis I see. I think it'd be beneficial to maybe have an example of this then in the Advice section. I was struggling to figure out the \"Flight way\" from the included example since it was just a giant object of data and when talking to some coworkers about it we were struggling to figure out how the data should be passed around since there are no models. It's a different train of thinking I believe that threw me off and leaves more up to interpretation. It seems so obvious now, however :)\n. ",
    "aackerman": "This should be fixed on master, as of jquery 1.9 $.browser is not supported that call was removed.\n. This should be fixed on master, as of jquery 1.9 $.browser is not supported that call was removed.\n. ",
    "hensmith": "@theron17 Fair enough dude, good point. But that particular piece of jQuery usage is just one of many, so removing that one line effectively just changes the line number of the error message.\n. Commit 3e9b44c fixes another instance of this issue. At this point the jQuery dependency is no longer the main obstacle.\nThe following is beyond the scope of this pull request, but I'm going to mention it anyway in case any Flight developers are interested in sorting this out. The problem now is the usage of the \"window\" global variable, which is obviously not defined in Node's runtime environment. When I try to instantiate my UI component, I get the following error:\nReferenceError: window is not defined\n    at Component.trigger (/home/h2s/src/tdd-flight/components/flight/lib/component.js:65:13)\nWith that, I think we enter full-blown refactor territory in terms of supporting Node execution. Would I be right in thinking this is out of the question? I still think the jQuery thing is a valid fix though.\n. @theron17 Fair enough dude, good point. But that particular piece of jQuery usage is just one of many, so removing that one line effectively just changes the line number of the error message.\n. Commit 3e9b44c fixes another instance of this issue. At this point the jQuery dependency is no longer the main obstacle.\nThe following is beyond the scope of this pull request, but I'm going to mention it anyway in case any Flight developers are interested in sorting this out. The problem now is the usage of the \"window\" global variable, which is obviously not defined in Node's runtime environment. When I try to instantiate my UI component, I get the following error:\nReferenceError: window is not defined\n    at Component.trigger (/home/h2s/src/tdd-flight/components/flight/lib/component.js:65:13)\nWith that, I think we enter full-blown refactor territory in terms of supporting Node execution. Would I be right in thinking this is out of the question? I still think the jQuery thing is a valid fix though.\n. ",
    "lgn21st": ":+1: \n. @tbrd What about get rid of loadrunner.js and loadrunner_plugin under /text/assets directory?\n. :+1: \n. @tbrd What about get rid of loadrunner.js and loadrunner_plugin under /text/assets directory?\n. ",
    "fscz": "thanks. \nOn Feb 26, 2013, at 5:34 PM, angus croll notifications@github.com wrote:\n\nyou can do this by using\nthis.after(''\", function() {\n  //..\n});\nsee https://github.com/twitter/flight#advice\n\u2014\nReply to this email directly or view it on GitHub.\n. I found, the error only get's thrown, when the decorator in the component is missing. This is actually a good thing, because generally you will want to add listeners in this decorator.\n\nI'm somewhat unsure if it's desired behaviour, that adding the method 'render' from the mixin, actually causes the decorator in the component not to be called at all (i think adding it there overrides the function, added through this.after('render')). But as it stands now, I can do what I wanted.\n. Thanks a lot for clearing that up. Especially the last part about the decorator becoming the 'render' method, if none is in place. That's actually a great idea and I like how it feels like responding to certain events in the init/load process of a component. You could do the same thing by triggering a local event from the mixin but the resulting code in the component is more difficult to read.\n. I've thrown together a minimized example and there it worked. But anyways, I've forked flight and mix in the the database in component.js now. \nNever mind this <-> self. I do that in every component that deals with ui, because, once you deal with listeners, it's convenient.\n. I've been working a lot with flight, recently and I found out, that the order you pass your mixins to defineComponent is relevant. consider the gist https://gist.github.com/fscz/5089241\nThe call to defineComponent there will fail, but not, if you reorder it, like so\ndefineComponent(mixin, myComponent);\nGenerally you want to order this call by dependencies and that means that the actual component\nusually goes at the end.\n. thanks. \nOn Feb 26, 2013, at 5:34 PM, angus croll notifications@github.com wrote:\n\nyou can do this by using\nthis.after(''\", function() {\n  //..\n});\nsee https://github.com/twitter/flight#advice\n\u2014\nReply to this email directly or view it on GitHub.\n. I found, the error only get's thrown, when the decorator in the component is missing. This is actually a good thing, because generally you will want to add listeners in this decorator.\n\nI'm somewhat unsure if it's desired behaviour, that adding the method 'render' from the mixin, actually causes the decorator in the component not to be called at all (i think adding it there overrides the function, added through this.after('render')). But as it stands now, I can do what I wanted.\n. Thanks a lot for clearing that up. Especially the last part about the decorator becoming the 'render' method, if none is in place. That's actually a great idea and I like how it feels like responding to certain events in the init/load process of a component. You could do the same thing by triggering a local event from the mixin but the resulting code in the component is more difficult to read.\n. I've thrown together a minimized example and there it worked. But anyways, I've forked flight and mix in the the database in component.js now. \nNever mind this <-> self. I do that in every component that deals with ui, because, once you deal with listeners, it's convenient.\n. I've been working a lot with flight, recently and I found out, that the order you pass your mixins to defineComponent is relevant. consider the gist https://gist.github.com/fscz/5089241\nThe call to defineComponent there will fail, but not, if you reorder it, like so\ndefineComponent(mixin, myComponent);\nGenerally you want to order this call by dependencies and that means that the actual component\nusually goes at the end.\n. ",
    "gebrits": "Alright thanks. I'm going to use the ability to extend the base-component to have teardown (and thus the entire livecycle) strictly managed. Like how Backbone Marionette uses Regionmanagers to do the same. All apps require something different of course, so I'm happy to extend it myself. \n. Yeah, I was talking for a hook to allow to extend from a custom base-component. A hook wouldn' t allow for an arbitrary hierachy btw, but if would be more than enough for my purposes, great!\n. Alright thanks. I'm going to use the ability to extend the base-component to have teardown (and thus the entire livecycle) strictly managed. Like how Backbone Marionette uses Regionmanagers to do the same. All apps require something different of course, so I'm happy to extend it myself. \n. Yeah, I was talking for a hook to allow to extend from a custom base-component. A hook wouldn' t allow for an arbitrary hierachy btw, but if would be more than enough for my purposes, great!\n. ",
    "BugiDev": "Hello guys, \nis there any progress on this topic?\nWhat do you think about this idea: \nAdd the possibility to create the array of mixins that should be, in addition to existing ones, added to the base component. This array can be stored in, for example, requireJSs config (but this might be risky because the requireJS doesn't have a public API to access the config file but there is a hack for that) or to store it in the separate .json file. \n. @kmargaritis I had the same prroblem and I have managed to make it work, but you must change the flight's files to enable this.\nFirst, create a require module for private jquery (jquery that is not in global scope):\n```\njquery-private.js\n\ndefine(['jquery'], function ($) {\n    'use strict';\n    return $.noConflict( true );\n});\n```\nthen, in your require config file, add the paths to jquery and jquery-private and map the request to jquery to route to jquery-private.\n```\ncommon.js\n\nrequirejs.config({\n    baseUrl: 'your/base/path',\n    paths: {\n        'flight': '../libs/flight',\n        'jquery': 'jquery/jquery',\n        'jquery-private': '../libs/jquery-private'\n    },\n    map: {\n        // '' means all modules will get 'jquery-private'\n        // for their 'jquery' dependency.\n        '': { 'jquery': 'jquery-private' },\n    // 'jquery-private' wants the real jQuery module\n    // though. If this line was not here, there would\n    // be an unresolvable cyclic dependency.\n    'jquery-private': { 'jquery': 'jquery' }\n}\n\n});\n```\nafter you have done that, you will have to include the dependency for jquery everywhere you want to use it:\ndefine(\n    [\n        'flight/lib/component',\n        'jquery'\n    ],\n    function (defineComponent, $) {\n        'use strict';\n        //here you can use $.('something')\n}\nNow comes the tricky part. You will have to change these Flight files to make it work: base.js ; component.js ; logger.js ;  utils.js\nThe only change that you have to make is to add the jquery dependency and to use it as a $ sign:\n```\nutils.js\n\ndefine(\n['./debug','jquery'],\nfunction(debug, $) {\n    'use strict';\n    // Flight code for utils.js ...\n}\n```\n. @kmargaritis It would definitely suite my project. :)\nIMO, even if you keep the changes to flight's files as i wrote in previous post, you will not have any errors, because it is only the difference in whether you are using private jquery or not. I haven't tested this but, because you can load the jquery in require, and because the special treatment of jquery in require, it will add the jquery by default to global scope, and that is the wanted behavior as it is used now in Flight.\nBut, if you want to use private jquery, you can only make the change in require config file as I showed, and it will work because of the changes in Flight.\nSo, my proposal is to add the changes to the Flight and document the usage of jQuery as a separate page, so that devs will know that they can use either jQuery as a <script> , to add it to require on the global scope, or to add it as private jQuery, not polluting the global scope.\n. Yes, of course, sorry :)\ncomponent:\n```\ndefine(\n    [\n        'flight/lib/component',\n        'mixins/ui/withMyMixin',\n    ],\n    function (defineComponent, withMyMixin) {\n        'use strict';\n    function myComponent() {\n\n        var self;\n\n        this.after('initialize', function () {\n            self = this;\n        });\n\n        this.doAnimations = function(){\n              var someObject = {};\n              someObject.field = 'something'\n              self.trigger('triggerAnimation', someObject);\n       }\n\n       }\n\n    return defineComponent(myComponent, withMyMixin);\n}\n\n);\n```\nMixin:\n```\ndefine([],\n    function () {\n        'use strict';\n    function myMixin() {\n\n        var self;\n\n        this.after('initialize', function () {\n            self = this;\n            self.on('triggerAnimation', self.starAnimations);\n        });\n\n       this.startAnimations = function(){\n            // doing some work here\n       }\n    }\n\n    return myMixin;\n\n}\n\n);\n```\nI am sorry that i can't paste the real code, but i think this is enough for explanation. \nThe thing is, when i turn debugging on debug.enable(true); the method in mixin this.startAnimations() is never called (the listener never fires on triggerAnimation).\nWhen i turn debugging of debug.enable(false); everything works, the event is triggered, caught and the animations are working.\n. @tbrd Thanks for the answer, but the thing with self reference is that i'm saving it for the use in some methods (not shown in the examples), that has closures and are changing the scope, so i need this reference that i can user (this in terms of component). \nThe problem with DEBUG enabled still persists. I should probably mention that the code was written in Flight v 1.1.2 and since then, I have updated the versions. Everything was working fine until the version of 1.2.0, so my assumption is that something was changed in the newest version that is breaking my code. \n. +1\nBut i have a question, is there a way to get the selector which the component is attached to from inside the component?\nIn my app, i need to have the reference to node object of the component.\n. Agree with @phuu . I have tried the flight-with-child-component mixin, and the first thing that I was missing was the instance of the child inside of the parent. I wanted to manipulate the child through the instance, instead of throwing the event and catching it. \nIn case where i store some info of the children in parent and i know exactly which child i want to interact with, i don't need to create a listener and trigger an event, then check if that event is meant for that child, etc... It would be a lot easier if i could store the instance of the attached children and then just call a method on one child instance. \nThis will also be good for the attachment of components. \nIn some parent component:\njavascript\nvar childComponent = this.attachChild(SomeChildComponent, 'nodeToAttachChildTo', \n    {\n         name: 'John Do',\n         count: 3\n     });\nthis.attr.childrenArray.push(childComponent);\nAnd then, when i need to call some method of the child:\njavascript\nthis.attr.childrenArray[3].someMethod();\n. Hello guys, \nis there any progress on this topic?\nWhat do you think about this idea: \nAdd the possibility to create the array of mixins that should be, in addition to existing ones, added to the base component. This array can be stored in, for example, requireJSs config (but this might be risky because the requireJS doesn't have a public API to access the config file but there is a hack for that) or to store it in the separate .json file. \n. @kmargaritis I had the same prroblem and I have managed to make it work, but you must change the flight's files to enable this.\nFirst, create a require module for private jquery (jquery that is not in global scope):\n```\njquery-private.js\n\ndefine(['jquery'], function ($) {\n    'use strict';\n    return $.noConflict( true );\n});\n```\nthen, in your require config file, add the paths to jquery and jquery-private and map the request to jquery to route to jquery-private.\n```\ncommon.js\n\nrequirejs.config({\n    baseUrl: 'your/base/path',\n    paths: {\n        'flight': '../libs/flight',\n        'jquery': 'jquery/jquery',\n        'jquery-private': '../libs/jquery-private'\n    },\n    map: {\n        // '' means all modules will get 'jquery-private'\n        // for their 'jquery' dependency.\n        '': { 'jquery': 'jquery-private' },\n    // 'jquery-private' wants the real jQuery module\n    // though. If this line was not here, there would\n    // be an unresolvable cyclic dependency.\n    'jquery-private': { 'jquery': 'jquery' }\n}\n\n});\n```\nafter you have done that, you will have to include the dependency for jquery everywhere you want to use it:\ndefine(\n    [\n        'flight/lib/component',\n        'jquery'\n    ],\n    function (defineComponent, $) {\n        'use strict';\n        //here you can use $.('something')\n}\nNow comes the tricky part. You will have to change these Flight files to make it work: base.js ; component.js ; logger.js ;  utils.js\nThe only change that you have to make is to add the jquery dependency and to use it as a $ sign:\n```\nutils.js\n\ndefine(\n['./debug','jquery'],\nfunction(debug, $) {\n    'use strict';\n    // Flight code for utils.js ...\n}\n```\n. @kmargaritis It would definitely suite my project. :)\nIMO, even if you keep the changes to flight's files as i wrote in previous post, you will not have any errors, because it is only the difference in whether you are using private jquery or not. I haven't tested this but, because you can load the jquery in require, and because the special treatment of jquery in require, it will add the jquery by default to global scope, and that is the wanted behavior as it is used now in Flight.\nBut, if you want to use private jquery, you can only make the change in require config file as I showed, and it will work because of the changes in Flight.\nSo, my proposal is to add the changes to the Flight and document the usage of jQuery as a separate page, so that devs will know that they can use either jQuery as a <script> , to add it to require on the global scope, or to add it as private jQuery, not polluting the global scope.\n. Yes, of course, sorry :)\ncomponent:\n```\ndefine(\n    [\n        'flight/lib/component',\n        'mixins/ui/withMyMixin',\n    ],\n    function (defineComponent, withMyMixin) {\n        'use strict';\n    function myComponent() {\n\n        var self;\n\n        this.after('initialize', function () {\n            self = this;\n        });\n\n        this.doAnimations = function(){\n              var someObject = {};\n              someObject.field = 'something'\n              self.trigger('triggerAnimation', someObject);\n       }\n\n       }\n\n    return defineComponent(myComponent, withMyMixin);\n}\n\n);\n```\nMixin:\n```\ndefine([],\n    function () {\n        'use strict';\n    function myMixin() {\n\n        var self;\n\n        this.after('initialize', function () {\n            self = this;\n            self.on('triggerAnimation', self.starAnimations);\n        });\n\n       this.startAnimations = function(){\n            // doing some work here\n       }\n    }\n\n    return myMixin;\n\n}\n\n);\n```\nI am sorry that i can't paste the real code, but i think this is enough for explanation. \nThe thing is, when i turn debugging on debug.enable(true); the method in mixin this.startAnimations() is never called (the listener never fires on triggerAnimation).\nWhen i turn debugging of debug.enable(false); everything works, the event is triggered, caught and the animations are working.\n. @tbrd Thanks for the answer, but the thing with self reference is that i'm saving it for the use in some methods (not shown in the examples), that has closures and are changing the scope, so i need this reference that i can user (this in terms of component). \nThe problem with DEBUG enabled still persists. I should probably mention that the code was written in Flight v 1.1.2 and since then, I have updated the versions. Everything was working fine until the version of 1.2.0, so my assumption is that something was changed in the newest version that is breaking my code. \n. +1\nBut i have a question, is there a way to get the selector which the component is attached to from inside the component?\nIn my app, i need to have the reference to node object of the component.\n. Agree with @phuu . I have tried the flight-with-child-component mixin, and the first thing that I was missing was the instance of the child inside of the parent. I wanted to manipulate the child through the instance, instead of throwing the event and catching it. \nIn case where i store some info of the children in parent and i know exactly which child i want to interact with, i don't need to create a listener and trigger an event, then check if that event is meant for that child, etc... It would be a lot easier if i could store the instance of the attached children and then just call a method on one child instance. \nThis will also be good for the attachment of components. \nIn some parent component:\njavascript\nvar childComponent = this.attachChild(SomeChildComponent, 'nodeToAttachChildTo', \n    {\n         name: 'John Do',\n         count: 3\n     });\nthis.attr.childrenArray.push(childComponent);\nAnd then, when i need to call some method of the child:\njavascript\nthis.attr.childrenArray[3].someMethod();\n. ",
    "dannymidnight": "@mkuklis That is an excellent and really obvious idea especially because of the name I gave the function :relaxed: !\nI guess this pull request still has relevance for method calls that don't return jquery promises.\n. Yeah true @simonsmith. I could do something like this:\njavascript\nthis.doSomething = function() {\n  var defer = $.Deferred(function() {\n    console.log('do something...');\n  });\n  defer.then(function() {\n    this.trigger('hello');\n  });\n  defer.resolveWith(this);\n};\nMaybe this is better? If people don't feel the need for something like this then I'm happy to close :grin:\n. Yeah I think I agree with having a mixin for this sort of thing. I'm going to close.\nCheers for the input @mkuklis, @simonsmith, @angus-c.\n. Cheers @angus-c that'll do it.\n. @mkuklis That is an excellent and really obvious idea especially because of the name I gave the function :relaxed: !\nI guess this pull request still has relevance for method calls that don't return jquery promises.\n. Yeah true @simonsmith. I could do something like this:\njavascript\nthis.doSomething = function() {\n  var defer = $.Deferred(function() {\n    console.log('do something...');\n  });\n  defer.then(function() {\n    this.trigger('hello');\n  });\n  defer.resolveWith(this);\n};\nMaybe this is better? If people don't feel the need for something like this then I'm happy to close :grin:\n. Yeah I think I agree with having a mixin for this sort of thing. I'm going to close.\nCheers for the input @mkuklis, @simonsmith, @angus-c.\n. Cheers @angus-c that'll do it.\n. ",
    "ehtb": "Thanks.\n. This http://jsfiddle.net/ZB6En/ is an example of the problem. \nI have replaced Flight's proxy for jQuery's, since the problem is not caused by Flight's delegation.\njQuery removes all listeners, since the handles are not unique, neither are their GUIDs.\nAdding a namespace to the event type will solve this, see: http://jsfiddle.net/vM9JS/1 ( fn called twice ).\nSince the delegation still works without the namespace, I don't see it breaking code.\n. @Dan, I have to remember what the exact cause of the issue was again. I think it was because listeners are not unique per instance. Perhaps it has been fixed with the recent changes, but that's something I have to test. \n@George, I fixed this by simply adding the identity as a namespace parameter to the event listener: \njavascript\nthis.on( window, 'resize.' + this.identity, this.resize )\nThis can be done unobtrusively though by Flight, utilizing a function already available on jQuery.\n. I was playing with the idea to add some component hierarchy to my app. I like how React solves the inverse data flow and the idea of passing callbacks as props / attributes to the child components.\nTo test this on Flight, all I had to do was remove these three lines:\nhttps://github.com/flightjs/flight/blob/master/lib/base.js#L84\nThis removes the ability to call a function in this.attributes, but it enables me to do stuff like:\nthis.attachChild(Playlist, this.select('playlistSelector'), {\n onSongClick: this.onSongClick.bind(this)\n});\nFor me the challenge now, is how to share state with the child components. On an individual component level you can add state through with-state, but it would be great to update the child component's attributes through a React like function render without a need for a virtual dom (which is my use case for using Flight).  \nIMO state should be a inherent part of Flight. Children could only be initialised through attachChild and pushed into an array. When the parent state is updated, a method like this.afterStateChanged would be invoked on the child.\n. Thanks.\n. This http://jsfiddle.net/ZB6En/ is an example of the problem. \nI have replaced Flight's proxy for jQuery's, since the problem is not caused by Flight's delegation.\njQuery removes all listeners, since the handles are not unique, neither are their GUIDs.\nAdding a namespace to the event type will solve this, see: http://jsfiddle.net/vM9JS/1 ( fn called twice ).\nSince the delegation still works without the namespace, I don't see it breaking code.\n. @Dan, I have to remember what the exact cause of the issue was again. I think it was because listeners are not unique per instance. Perhaps it has been fixed with the recent changes, but that's something I have to test. \n@George, I fixed this by simply adding the identity as a namespace parameter to the event listener: \njavascript\nthis.on( window, 'resize.' + this.identity, this.resize )\nThis can be done unobtrusively though by Flight, utilizing a function already available on jQuery.\n. I was playing with the idea to add some component hierarchy to my app. I like how React solves the inverse data flow and the idea of passing callbacks as props / attributes to the child components.\nTo test this on Flight, all I had to do was remove these three lines:\nhttps://github.com/flightjs/flight/blob/master/lib/base.js#L84\nThis removes the ability to call a function in this.attributes, but it enables me to do stuff like:\nthis.attachChild(Playlist, this.select('playlistSelector'), {\n onSongClick: this.onSongClick.bind(this)\n});\nFor me the challenge now, is how to share state with the child components. On an individual component level you can add state through with-state, but it would be great to update the child component's attributes through a React like function render without a need for a virtual dom (which is my use case for using Flight).  \nIMO state should be a inherent part of Flight. Children could only be initialised through attachChild and pushed into an array. When the parent state is updated, a method like this.afterStateChanged would be invoked on the child.\n. ",
    "kevinrobinson": "@angus-c Thanks for the explanation!\nAs for developer intention, I think the way you've defined the semantics of #defaultAttr is really clear, and there isn't any guesswork necessary; the rule is that the base attr always wins.  If an attribute has already been provided (when the component was instantiated, by the component itself, or by another mixin), then no need to use the default.  From the readme:\nThe defaultAttr method is available to both component and mixin modules.\nWhen used with mixins it will not overwrite attributes already defined in the component module.\nBy throwing an exception instead, it forces mixin authors to choose whether they want to define defaults themselves or allow consuming components to define their own defaults.\nYeah, if the mixin defines a default that accidentally collides with a component or other mixin, it would definitely be a problem.  But I think the ordering there is backwards for normal development.  If I'm writing a component and I want to use a mixin, I need to see which attributes that mixin uses so that I can pass arguments to it and so I can avoid name collisions.  Right now, I can't see that in the with_select mixin other than reading through the function bodies.  Allowing defaultAttr in mixins would make that a bit better.\nSince you've written substantially more Flight code than I have, I'm sure you have much better perspective here and I'm thankful to hear how you think about it.  :)\n. @angus-c Thanks for the explanation!\nAs for developer intention, I think the way you've defined the semantics of #defaultAttr is really clear, and there isn't any guesswork necessary; the rule is that the base attr always wins.  If an attribute has already been provided (when the component was instantiated, by the component itself, or by another mixin), then no need to use the default.  From the readme:\nThe defaultAttr method is available to both component and mixin modules.\nWhen used with mixins it will not overwrite attributes already defined in the component module.\nBy throwing an exception instead, it forces mixin authors to choose whether they want to define defaults themselves or allow consuming components to define their own defaults.\nYeah, if the mixin defines a default that accidentally collides with a component or other mixin, it would definitely be a problem.  But I think the ordering there is backwards for normal development.  If I'm writing a component and I want to use a mixin, I need to see which attributes that mixin uses so that I can pass arguments to it and so I can avoid name collisions.  Right now, I can't see that in the with_select mixin other than reading through the function bodies.  Allowing defaultAttr in mixins would make that a bit better.\nSince you've written substantially more Flight code than I have, I'm sure you have much better perspective here and I'm thankful to hear how you think about it.  :)\n. ",
    "janx": "Ref: http://api.jquery.com/selector/\n. @angus-c I cannot, it doesn't work on $node of attached component, that's the problem. The node in $(selector).each loop no long has selector info.\n. Ref: http://api.jquery.com/selector/\n. @angus-c I cannot, it doesn't work on $node of attached component, that's the problem. The node in $(selector).each loop no long has selector info.\n. ",
    "taterbase": "@angus-c are namespaced events totally out of the question for Flight? I could see namespaced events offering quite a few benefits in regards to scoping, semantics, and flexibility in reacting to the pulse of the application.\nFor example:\n``` javascript\n// Potentially a routing component or some other overseeing component\nthis.on('transition.*', function() {\n  // Prepare for a page transition\n})\n// A smaller component that needs to act on a specific transition\nthis.on('transition.profile', function(){\n  // Set up profile page and attach to dom\n})\n// The communication component\nthis.trigger('transition.profile', profileInfo)\n```\n. > There should be nothing in Flight to prevent you from doing this\nAre you saying that Flight already supports event namespaces or that such functionality should be left to developers using flight to add on top?\n. I see, manage the namespacing in the instance creation instead of in the event hub. Very cool.\n. @angus-c are namespaced events totally out of the question for Flight? I could see namespaced events offering quite a few benefits in regards to scoping, semantics, and flexibility in reacting to the pulse of the application.\nFor example:\n``` javascript\n// Potentially a routing component or some other overseeing component\nthis.on('transition.*', function() {\n  // Prepare for a page transition\n})\n// A smaller component that needs to act on a specific transition\nthis.on('transition.profile', function(){\n  // Set up profile page and attach to dom\n})\n// The communication component\nthis.trigger('transition.profile', profileInfo)\n```\n. > There should be nothing in Flight to prevent you from doing this\nAre you saying that Flight already supports event namespaces or that such functionality should be left to developers using flight to add on top?\n. I see, manage the namespacing in the instance creation instead of in the event hub. Very cool.\n. ",
    "gziolo": "First approach is more popular in open source projects. In my opinion it doesn't make sense to change docs at the moment. Every dev can decide which style to use in his project.\n. First approach is more popular in open source projects. In my opinion it doesn't make sense to change docs at the moment. Every dev can decide which style to use in his project.\n. ",
    "cloud8421": "Worth mentioning the specific doc in the require.js documentation.\n. Worth mentioning the specific doc in the require.js documentation.\n. ",
    "kennethkufluk": "This is true, but then a subcomponent needs to know that it might be removed. I feel that should be outside of the responsibility of that component, and in a big mvc project would tend to add boilerplate.\n. Closed for lack of interest / use cases. As Angus says, you could just teardown on an event.\n. LGTM. I think I'd have been tempted to name the set _guids, just in case you're clobbering any existing guids methods.\n. This is true, but then a subcomponent needs to know that it might be removed. I feel that should be outside of the responsibility of that component, and in a big mvc project would tend to add boilerplate.\n. Closed for lack of interest / use cases. As Angus says, you could just teardown on an event.\n. LGTM. I think I'd have been tempted to name the set _guids, just in case you're clobbering any existing guids methods.\n. ",
    "maxkueng": "+1 \n. https://github.com/kriskowal/q/blob/master/q.js#L85-L166\n. @simonsmith Thanks, this works great! But still I think Flight should be consistent about using the AMD module approach and not make exceptions. jQuery is available as an AMD module in the Bower repository. bower install jquery --save\nHow it currently is:\njavascript\ndefine(\n  [\n    './advice',\n    './utils',\n    './compose',\n    './registry',\n    './logger',\n    '../tools/debug/debug'\n  ],\n  function(advice, utils, compose, registry, withLogging, debug) {\n    ...\n    $element = $(arguments[0]);\n    ...\nHow it should be:\njavascript\ndefine(\n  [\n    'jquery',\n    './advice',\n    './utils',\n    './compose',\n    './registry',\n    './logger',\n    '../tools/debug/debug'\n  ],\n  function($, advice, utils, compose, registry, withLogging, debug) {\n    ...\n    $element = $(arguments[0]);\n    ...\n. jQuery could still be manually assigned to the window.$ and/or window.jQuery variables if desired, so that jQuery plugins can mutate it. \nIf jQuery is by default in the global scope, other code might accidentally access it even if jQuery is not used throughout the rest of the project.\nI believe if jQuery should be made available globally, it should be done intentionally.\n. http://blog.jquery.com/2013/11/15/jquery-1-11-02-1-0-beta-2-released/\n\njQuery has supported having the library itself loaded by an AMD loader ever since version 1.7. Now, we\u2019re using AMD internally as well [...]\n\nI haven't investigated this much further but it might be that Flight could now even load individual modules of jQuery, i.e. only those it actually needs. So if Flight depends on jQuery events it could probably use just jQuery's events module. And the jQuery DOM things could even be made optional.\nGood point about $.noConflict, @webpro \n. +1 \n. https://github.com/kriskowal/q/blob/master/q.js#L85-L166\n. @simonsmith Thanks, this works great! But still I think Flight should be consistent about using the AMD module approach and not make exceptions. jQuery is available as an AMD module in the Bower repository. bower install jquery --save\nHow it currently is:\njavascript\ndefine(\n  [\n    './advice',\n    './utils',\n    './compose',\n    './registry',\n    './logger',\n    '../tools/debug/debug'\n  ],\n  function(advice, utils, compose, registry, withLogging, debug) {\n    ...\n    $element = $(arguments[0]);\n    ...\nHow it should be:\njavascript\ndefine(\n  [\n    'jquery',\n    './advice',\n    './utils',\n    './compose',\n    './registry',\n    './logger',\n    '../tools/debug/debug'\n  ],\n  function($, advice, utils, compose, registry, withLogging, debug) {\n    ...\n    $element = $(arguments[0]);\n    ...\n. jQuery could still be manually assigned to the window.$ and/or window.jQuery variables if desired, so that jQuery plugins can mutate it. \nIf jQuery is by default in the global scope, other code might accidentally access it even if jQuery is not used throughout the rest of the project.\nI believe if jQuery should be made available globally, it should be done intentionally.\n. http://blog.jquery.com/2013/11/15/jquery-1-11-02-1-0-beta-2-released/\n\njQuery has supported having the library itself loaded by an AMD loader ever since version 1.7. Now, we\u2019re using AMD internally as well [...]\n\nI haven't investigated this much further but it might be that Flight could now even load individual modules of jQuery, i.e. only those it actually needs. So if Flight depends on jQuery events it could probably use just jQuery's events module. And the jQuery DOM things could even be made optional.\nGood point about $.noConflict, @webpro \n. ",
    "andybryant": "Hi Dan,\nYou shouldn't need to switch away from using jQuery.trigger() - just add the async nature before calling it.\nIf you look at the Q code, it tries a bunch of techniques to make this fast as possible (setTimeout is a last resort for old browsers). On Chrome for instance it uses MessageChannel, which in ad-hoc testing adds delay of less than 1ms.\n. Your call - although I'm guessing jquery made the decision to allow synchronous event handlers back when there wasn't an efficient way of forcing asynchronous behaviour. \n. Hi Dan,\nYou shouldn't need to switch away from using jQuery.trigger() - just add the async nature before calling it.\nIf you look at the Q code, it tries a bunch of techniques to make this fast as possible (setTimeout is a last resort for old browsers). On Chrome for instance it uses MessageChannel, which in ad-hoc testing adds delay of less than 1ms.\n. Your call - although I'm guessing jquery made the decision to allow synchronous event handlers back when there wasn't an efficient way of forcing asynchronous behaviour. \n. ",
    "phated": "Is there any chance to reevaluating this issue?  Other AMD loaders, such as Curl and Dojo loader don't have a shims option and it causes headaches when trying to load Flight.  I know that at least jQuery 2.0 attaches to window as well as exposing the jQuery object as an AMD module, which should allow plugins to work fine.\n. Is there any chance to reevaluating this issue?  Other AMD loaders, such as Curl and Dojo loader don't have a shims option and it causes headaches when trying to load Flight.  I know that at least jQuery 2.0 attaches to window as well as exposing the jQuery object as an AMD module, which should allow plugins to work fine.\n. ",
    "webpro": "+1\nWhen using $.noConflict(), $ is not even available in global scope. So putting \"jQuery\" and \"first-class support for AMD\" in one sentence doesn't feel right to me.\n. @kmargaritis I haven't used jQuery for a while. You might want to give DOMtastic a shot, curious if it would work with Flight.\n. @kmargaritis Thanks for trying, please open an issue in that project if you are willing to share more details.\nApologies to everyone for getting off-topic here.\n. +1\nWhen using $.noConflict(), $ is not even available in global scope. So putting \"jQuery\" and \"first-class support for AMD\" in one sentence doesn't feel right to me.\n. @kmargaritis I haven't used jQuery for a while. You might want to give DOMtastic a shot, curious if it would work with Flight.\n. @kmargaritis Thanks for trying, please open an issue in that project if you are willing to share more details.\nApologies to everyone for getting off-topic here.\n. ",
    "jeffrose": "+1\nNow that jQuery is using AMD internally and offering specialized builds, it's possible to not have jQuery in the global scope. Anyone who needs jQuery to be the global scope can put it there, but for those who don't calling $.noConflict is not always a good solution. For example in large enterprises where a page can be constructed with code from multiple development teams and vendors, there may already be s $ variable or even another version of jQuery on the page.\n. Yup. I was just basing my approach off of code used in utils.js. Normally I'd just use Object.prototype or ({}) directly.\n. +1\nNow that jQuery is using AMD internally and offering specialized builds, it's possible to not have jQuery in the global scope. Anyone who needs jQuery to be the global scope can put it there, but for those who don't calling $.noConflict is not always a good solution. For example in large enterprises where a page can be constructed with code from multiple development teams and vendors, there may already be s $ variable or even another version of jQuery on the page.\n. Yup. I was just basing my approach off of code used in utils.js. Normally I'd just use Object.prototype or ({}) directly.\n. ",
    "margaritis": "@webpro Have you find a way to work with $.noConflict() mode.? I have tried various ways to overcome the issue but none seem to work.\n. Thanks @webpro. It seems very interesting. I will check it along with Rest.js \n. @webpro I have tried to use DOMtastic but it does not seem to work with flightjs.\n. @necolas I am developing some widgets with flight.js and the number one issue that i encounter is jQuery conflicts. I have created all the shim configuration for requiring jQuery in noConflict mode but flight can not work in noConflict mode. Can you please consider reopening this pull request or see if there is an \"official\" workaround ? I believe that the idea of being able to use jQuery in noConflict mode is pretty solid. \n. @BugiDev I have done the EXACT same setup. Would't it be better to include these changes to flight.js and be supported by default instead of keeping multiple private version of flight.js. I think that more people have this problem.\nP.S Thank you very much for your quick response and your help.!!\n. +1\n. @necolas That would be great since the addition of new versions will be reflected immediately.\n. @necolas I believe that @hyeluri fix is proper since flight has been updated and new versions have been released in 2014. From what i have found, the notice may include a range of years (e.g., 2008-2014), starting from the date of the oldest published elements and ending with the date of the newest published elements. You can take a look at the following links, Ref. 1, Ref. 2, Ref. 3\n. +1\n. :+1: \n. Hey Tom. Would be happy to join! Some members of my team are interested as well.\n. @webpro Have you find a way to work with $.noConflict() mode.? I have tried various ways to overcome the issue but none seem to work.\n. Thanks @webpro. It seems very interesting. I will check it along with Rest.js \n. @webpro I have tried to use DOMtastic but it does not seem to work with flightjs.\n. @necolas I am developing some widgets with flight.js and the number one issue that i encounter is jQuery conflicts. I have created all the shim configuration for requiring jQuery in noConflict mode but flight can not work in noConflict mode. Can you please consider reopening this pull request or see if there is an \"official\" workaround ? I believe that the idea of being able to use jQuery in noConflict mode is pretty solid. \n. @BugiDev I have done the EXACT same setup. Would't it be better to include these changes to flight.js and be supported by default instead of keeping multiple private version of flight.js. I think that more people have this problem.\nP.S Thank you very much for your quick response and your help.!!\n. +1\n. @necolas That would be great since the addition of new versions will be reflected immediately.\n. @necolas I believe that @hyeluri fix is proper since flight has been updated and new versions have been released in 2014. From what i have found, the notice may include a range of years (e.g., 2008-2014), starting from the date of the oldest published elements and ending with the date of the newest published elements. You can take a look at the following links, Ref. 1, Ref. 2, Ref. 3\n. +1\n. :+1: \n. Hey Tom. Would be happy to join! Some members of my team are interested as well.\n. ",
    "imsky": "Good idea, I'd like to see this, too.\n. Good idea, I'd like to see this, too.\n. ",
    "rogeliog": "What about splitting this into two standalone issues, one in flightjs/flight and one in flightjs/flightjs.github.io? So that this issue only have responsibilities related to this repo :)\n. Great! \n. #116 \n. ### Personal thoughts about Flight Docs++\nFor what I understand the idea is to eventually move docs to a webpage, right? \nHere are some things that I like about the docs of other JS frameworks/libraries.\nBackbone docs\n\nIt is super simple. There are no subpages.\nThere is only one level of submenus in the sidebar. \nDescriptions of methods are generally not longer than one paragraph.\nA play button to execute the snippet of code.\n\nAngular docs\n\nHas a complete playable and editable example of each part of the API.\nEvery part of the API has an \"Improve this doc\" button\nThere is an individual DISQUS thread for each section.\nI find their sidebar to be super complicated to understand :(\n\njQuery docs\n\njQuery docs are quite complete but there is something that I hate, whenever you are navigating through the API menu and click on a method API it does a full reload of the page which makes it feel like a pretty heavy action instead of inviting you to surf and click. :(\n\nMocha docs\n\nFor some reason I love the minimalistic look of it. Feels really clean and well organized.\nEven though it is nicely organized it lack of a way to navigate in the page so it is a bit difficult to have a see the full picture. :(\n\nJasmine docs\n\nI feel almost the exact same way as with Mocha.\nIt is awesome that every section has \"permalinkable\" icon for easy reference and sharing. This a really nice touch, making it easy to share and bookmark without sacrificing simplicity.\n\nThoughts?\n. Awesome!\n. Sounds great\n. Should this be closed?\n. Yep, I think you are right!\n. Great,\nI'll keep open rogeliog/flight-components-app#5 for future reference.\n. Haven't tried it, but @brenoc flight-standalone has a  repo, which you should be able to bower install flight-standalone. It is not official or anything but you can give it a try.\n. What about splitting this into two standalone issues, one in flightjs/flight and one in flightjs/flightjs.github.io? So that this issue only have responsibilities related to this repo :)\n. Great! \n. #116 \n. ### Personal thoughts about Flight Docs++\nFor what I understand the idea is to eventually move docs to a webpage, right? \nHere are some things that I like about the docs of other JS frameworks/libraries.\nBackbone docs\n\nIt is super simple. There are no subpages.\nThere is only one level of submenus in the sidebar. \nDescriptions of methods are generally not longer than one paragraph.\nA play button to execute the snippet of code.\n\nAngular docs\n\nHas a complete playable and editable example of each part of the API.\nEvery part of the API has an \"Improve this doc\" button\nThere is an individual DISQUS thread for each section.\nI find their sidebar to be super complicated to understand :(\n\njQuery docs\n\njQuery docs are quite complete but there is something that I hate, whenever you are navigating through the API menu and click on a method API it does a full reload of the page which makes it feel like a pretty heavy action instead of inviting you to surf and click. :(\n\nMocha docs\n\nFor some reason I love the minimalistic look of it. Feels really clean and well organized.\nEven though it is nicely organized it lack of a way to navigate in the page so it is a bit difficult to have a see the full picture. :(\n\nJasmine docs\n\nI feel almost the exact same way as with Mocha.\nIt is awesome that every section has \"permalinkable\" icon for easy reference and sharing. This a really nice touch, making it easy to share and bookmark without sacrificing simplicity.\n\nThoughts?\n. Awesome!\n. Sounds great\n. Should this be closed?\n. Yep, I think you are right!\n. Great,\nI'll keep open rogeliog/flight-components-app#5 for future reference.\n. Haven't tried it, but @brenoc flight-standalone has a  repo, which you should be able to bower install flight-standalone. It is not official or anything but you can give it a try.\n. ",
    "databyte": "There's a debugging section of the README that covers that.\nSince the framework relies on jQuery and binds to elements, you can use jQuery to inspect elements for their events using:\njavascript\n$._data(element, \"events\")\nYou could also technically replace the trigger event if you want to know whose's triggering what.\njavascript\noldEventTrigger = jQuery.event.trigger\njQuery.event.trigger = (event, data, elem, onlyHandlers) ->\n  console.log(\"trigger\", event) if elem instanceof jQuery\n  oldEventTrigger.apply(this, arguments)\nOf course using debug is probably easier since that's built in.\n. There's a debugging section of the README that covers that.\nSince the framework relies on jQuery and binds to elements, you can use jQuery to inspect elements for their events using:\njavascript\n$._data(element, \"events\")\nYou could also technically replace the trigger event if you want to know whose's triggering what.\njavascript\noldEventTrigger = jQuery.event.trigger\njQuery.event.trigger = (event, data, elem, onlyHandlers) ->\n  console.log(\"trigger\", event) if elem instanceof jQuery\n  oldEventTrigger.apply(this, arguments)\nOf course using debug is probably easier since that's built in.\n. ",
    "mpelzsherman": "Yep, saw the debugging stuff, and it's great.\nI was thinking it would also be nice to be able to view the node bindings without having to manipulate the UI, by inspecting the Registry, perhaps?\n. Yep, saw the debugging stuff, and it's great.\nI was thinking it would also be nice to be able to view the node bindings without having to manipulate the UI, by inspecting the Registry, perhaps?\n. ",
    "jrsconfitto": ":cool:\n. i seem to remember seeing something similar before. Is this a duplicate of #259?\n. :cool:\n. i seem to remember seeing something similar before. Is this a duplicate of #259?\n. ",
    "brettstimmerman": "Nice one! I cleaned up the history with git rebase.\n. Is it possible LoadBuilder could be patched to understand the alternative syntax?\n. Fixed the missing strict pragma and commented-out var.\nRe: targeted lint options, I go back and forth on this one. On one hand, I agree that top-of-file is much more maintainable, but the downside is those directives then apply to the whole file which isn't always what you want.\nI feel like validthis and eqnull might better be defined globally in .jshintrc. newcap and -W058 are special, and we don't necessarily want them to be global, or even file scope.\nI tried to strike a reasonable balance, but I only took a stab. I'm not entirely sure what the \"right\" solution is, which is why I opened the PR to get things going.\n. Updated this PR based on latest master. \nAlso, new changes:\n- Move most flags into .jshintrc; only a few lingering options littered about as one-offs.\n- Include test/ in the set of linted files\n. Yep! Fixed in a9439528cb2\n. :+1:\n. The official Flight website is at: http://flightjs.github.io/ and not http://twitter.github.io/flight/. This must be a remnant from moving Flight to its own Github org.\nThe official site links correctly to https://github.com/flightjs/example-app/.\n@caniszczyk: Can you take a look? Does it make sense to redirect or just nuke the old URL?\n. Nice one! I cleaned up the history with git rebase.\n. Is it possible LoadBuilder could be patched to understand the alternative syntax?\n. Fixed the missing strict pragma and commented-out var.\nRe: targeted lint options, I go back and forth on this one. On one hand, I agree that top-of-file is much more maintainable, but the downside is those directives then apply to the whole file which isn't always what you want.\nI feel like validthis and eqnull might better be defined globally in .jshintrc. newcap and -W058 are special, and we don't necessarily want them to be global, or even file scope.\nI tried to strike a reasonable balance, but I only took a stab. I'm not entirely sure what the \"right\" solution is, which is why I opened the PR to get things going.\n. Updated this PR based on latest master. \nAlso, new changes:\n- Move most flags into .jshintrc; only a few lingering options littered about as one-offs.\n- Include test/ in the set of linted files\n. Yep! Fixed in a9439528cb2\n. :+1:\n. The official Flight website is at: http://flightjs.github.io/ and not http://twitter.github.io/flight/. This must be a remnant from moving Flight to its own Github org.\nThe official site links correctly to https://github.com/flightjs/example-app/.\n@caniszczyk: Can you take a look? Does it make sense to redirect or just nuke the old URL?\n. ",
    "ivankravchenko": "but it's ok if argument is number :)\nok, thanks, I understand, will use only objects\n. but it's ok if argument is number :)\nok, thanks, I understand, will use only objects\n. ",
    "wwwsevolod": "oh sorry it is my bad, i passed one more argument through this.trigger like this.trigger(document, 'event:name', eventData, eventData2) and it failed. Sorry for my stupidiness\n. @giuseppeg it is a bad solution, bcz ruin flight's \"teardown\" functionality to clean memory when components instance not needed anymore. it's needed to be fixed in flight, i think\n. i think, you are wrong, twice.\n1) event \u00abgroup\u00bb api added very long long time ago, and never changed, afaik\n2) because it is under the hood of flight if jQuery change \u2018group events\u2019 api you can fix it under the flight hood.\nWhy you need to do something, that was done before, but not invented here?\nI can say, why i would use flight, flight could change, i\u2019ll write my own flight, with models and frp, lol.\n23 \u00ee\u00ea\u00f2. 2013 \u00e3., \u00e2 13:43, Tom Ashworth notifications@github.com \u00ed\u00e0\u00ef\u00e8\u00f1\u00e0\u00eb(\u00e0):\n\nI don't think that tying Flight's event implementation to jQuery's is a good idea. jQuery could easily change this in future, and then Flight would have to change \u2013 or enforce an old jQuery version.\nMy view would be to let jQuery do its event binding however it wants, and deal with Flight's in a Flight-specific way.\n\u2014\nReply to this email directly or view it on GitHub.\n. oh sorry, i thought it was for my comment on #191 (same issue)\n. why not to use built-in ability in jQuery to remove events via event's groups? You need only unique identifier for every components instance, so you can delegate events not to jQuery('.some-element').on('click'), but jQuery('.some-element.uniqueId123') and off them like jQuery('.some-element).off('.uniqueId123')? it would be easier, simple always better.\n. @angus-c why you need to unique element? for example every instance of every component have its own UID, and you listen event not 'click' but 'click.superdruperprefixUID' only for component, and when you need to off events you off only group off events with suffix 'superdruperprefixUID' where UID is unique identifier of components instance, may be i misunderstood something? you can add any number of 'group events handlers' for element, and they fires on 'click' not only on 'click.superdruperprefixUID' but add ability to off them only by group, not affecting every other handler on this element for this event.\n. @giuseppeg why weak and unsafe? i don't understand that, sorry. it is pretty stable, i use it in \"backbone-like\" environment for event teardown, and for 2 years in production of this code i haven't got any problem with it.\n. haha, i won\n. Some times it is not working really, I had this error couple times, and it didn't work for hour or two\n13 \u00e4\u00e5\u00ea. 2013 \u00e3., \u00e2 23:37, angus croll notifications@github.com \u00ed\u00e0\u00ef\u00e8\u00f1\u00e0\u00eb(\u00e0):\nworking for me in chrome 31\n\u2014\nReply to this email directly or view it on GitHub.\n. @caryfitzhugh i prefer not use mutable objects in default fields, only for some immutable objects (like hash table of something). I store data objects with flight outside of components, and it is better, bcz if this data needed in another component, i can get it with no pain, and you can create caching with ease\n. js\nthis.on('click', {\n     prevBtn: this.prevHandler\n});\n. google groups are better\n. i know, i wrote few messages there. i said that to make point on \u2013 \"why we need something worse when we already have something better\", imho ofc :)\n. @angus-c \n\nThe only headache is having a registry dictionary of instances keyed by node\nDOM element attribute (not like data- attr, just javascript property) or $.data(element, key, value) would simplify this thing. Like you can create unique id for element, save it in 'flight-id' with unique id as value, and do something like \n//pseudo java's crypt warning\n   for (var node of childNodes) {if ($.data(node, 'flight-id') {this.getComponentsToTeardownFromRegistry($.data(node, 'flight-id'))}\n\n\nofc maps and weakmaps are better\n. i think that flight must check payload to be an object, and throw error if not, bcz so many people had problems like that\n. may be just add console shim script on page? i think this is not bug, because debug mode not for production\n. Why not es6 modules? Handlebars.js using it, for example\n. @necolas but es6 transpilers can compile it to commonjs, or amd or standalone with change in build command one param, look at handlebars source, it is really awesome example of es6 module system.\n. oh sorry it is my bad, i passed one more argument through this.trigger like this.trigger(document, 'event:name', eventData, eventData2) and it failed. Sorry for my stupidiness\n. @giuseppeg it is a bad solution, bcz ruin flight's \"teardown\" functionality to clean memory when components instance not needed anymore. it's needed to be fixed in flight, i think\n. i think, you are wrong, twice.\n1) event \u00abgroup\u00bb api added very long long time ago, and never changed, afaik\n2) because it is under the hood of flight if jQuery change \u2018group events\u2019 api you can fix it under the flight hood.\nWhy you need to do something, that was done before, but not invented here?\nI can say, why i would use flight, flight could change, i\u2019ll write my own flight, with models and frp, lol.\n23 \u00ee\u00ea\u00f2. 2013 \u00e3., \u00e2 13:43, Tom Ashworth notifications@github.com \u00ed\u00e0\u00ef\u00e8\u00f1\u00e0\u00eb(\u00e0):\n\nI don't think that tying Flight's event implementation to jQuery's is a good idea. jQuery could easily change this in future, and then Flight would have to change \u2013 or enforce an old jQuery version.\nMy view would be to let jQuery do its event binding however it wants, and deal with Flight's in a Flight-specific way.\n\u2014\nReply to this email directly or view it on GitHub.\n. oh sorry, i thought it was for my comment on #191 (same issue)\n. why not to use built-in ability in jQuery to remove events via event's groups? You need only unique identifier for every components instance, so you can delegate events not to jQuery('.some-element').on('click'), but jQuery('.some-element.uniqueId123') and off them like jQuery('.some-element).off('.uniqueId123')? it would be easier, simple always better.\n. @angus-c why you need to unique element? for example every instance of every component have its own UID, and you listen event not 'click' but 'click.superdruperprefixUID' only for component, and when you need to off events you off only group off events with suffix 'superdruperprefixUID' where UID is unique identifier of components instance, may be i misunderstood something? you can add any number of 'group events handlers' for element, and they fires on 'click' not only on 'click.superdruperprefixUID' but add ability to off them only by group, not affecting every other handler on this element for this event.\n. @giuseppeg why weak and unsafe? i don't understand that, sorry. it is pretty stable, i use it in \"backbone-like\" environment for event teardown, and for 2 years in production of this code i haven't got any problem with it.\n. haha, i won\n. Some times it is not working really, I had this error couple times, and it didn't work for hour or two\n13 \u00e4\u00e5\u00ea. 2013 \u00e3., \u00e2 23:37, angus croll notifications@github.com \u00ed\u00e0\u00ef\u00e8\u00f1\u00e0\u00eb(\u00e0):\nworking for me in chrome 31\n\u2014\nReply to this email directly or view it on GitHub.\n. @caryfitzhugh i prefer not use mutable objects in default fields, only for some immutable objects (like hash table of something). I store data objects with flight outside of components, and it is better, bcz if this data needed in another component, i can get it with no pain, and you can create caching with ease\n. js\nthis.on('click', {\n     prevBtn: this.prevHandler\n});\n. google groups are better\n. i know, i wrote few messages there. i said that to make point on \u2013 \"why we need something worse when we already have something better\", imho ofc :)\n. @angus-c \n\nThe only headache is having a registry dictionary of instances keyed by node\nDOM element attribute (not like data- attr, just javascript property) or $.data(element, key, value) would simplify this thing. Like you can create unique id for element, save it in 'flight-id' with unique id as value, and do something like \n//pseudo java's crypt warning\n   for (var node of childNodes) {if ($.data(node, 'flight-id') {this.getComponentsToTeardownFromRegistry($.data(node, 'flight-id'))}\n\n\nofc maps and weakmaps are better\n. i think that flight must check payload to be an object, and throw error if not, bcz so many people had problems like that\n. may be just add console shim script on page? i think this is not bug, because debug mode not for production\n. Why not es6 modules? Handlebars.js using it, for example\n. @necolas but es6 transpilers can compile it to commonjs, or amd or standalone with change in build command one param, look at handlebars source, it is really awesome example of es6 module system.\n. ",
    "ahume": "Also, spotted a problem with supporting handler as an object mapping. Will come back to this (with docs) next week, if people think it's worth it.\n. We need to get the observable stuff out so it can help inform this, but the mixins we have created would arguably benefit from having more direct knowledge of their parent/child relations (it would remove some boilerplate that we're using withResource for). Let's try and get a version of that out next week.\n. @mikkotikkanen I didn't quite follow the jQuery point, but I think I agree with how this hides some of the simplicity, in particular of Flight just being function composition (that I think 2.0 clarifies?).\nHaving said that, I think exploring patterns of component definition is a good exercise, and there might be some more generic abstraction which looks a little like what @phuu suggests. Not sure about focusing on it for a 2.0.0 milestone though.\n. Also, spotted a problem with supporting handler as an object mapping. Will come back to this (with docs) next week, if people think it's worth it.\n. We need to get the observable stuff out so it can help inform this, but the mixins we have created would arguably benefit from having more direct knowledge of their parent/child relations (it would remove some boilerplate that we're using withResource for). Let's try and get a version of that out next week.\n. @mikkotikkanen I didn't quite follow the jQuery point, but I think I agree with how this hides some of the simplicity, in particular of Flight just being function composition (that I think 2.0 clarifies?).\nHaving said that, I think exploring patterns of component definition is a good exercise, and there might be some more generic abstraction which looks a little like what @phuu suggests. Not sure about focusing on it for a 2.0.0 milestone though.\n. ",
    "tgvashworth": "What's the thinking on this now, a few months later?\nThis might break TweetDeck, but not badly. Afaik, we're only passing an object to attachTo in a few places and from a quick scan of the code, the attributes are defined in most places.\nOne thing I'd like to add to this discussion: a misconception I had when starting with Flight was that the component function was run once per instance at attach time. That meant I did things like:\n``` javascript\nthis.defaultAttrs({\n  rifftumbles: []\n});\nthis.somethingGood = function () {\n  this.attr.rifftumbles.push({\n    beep: 'boop'\n  });\n};\n```\nOf course, then the rifftumbles are shared between instances of the component.\nMy question then is: should instance-specific state go in instance.attr? If so, is there a possible  syntax that avoids this kind of thing?\nThis seems to verbose, not to mention the redundant static data it would produce.\njavascript\nthis.attributes(function () {\n  return {\n    boopSelector: '.boop',\n    rifftumbles: []\n  };\n});\n. I'm interested in why this isn't baked in. I totally respect the decision not to have it, but I'm just wondering what the reasoning is?\nAlso, what are the pros and cons of, for example, using a withOnce mixin?\n. Ok, I see \u2013 but just to be clear, I wasn't suggesting Flight ship with a withOnce, I was just suggesting it as an alternative to a util. Or was that clear, and I've missed what you meant?! :)\n. I think this can be closed, as it got added in #186.\n. From Angus via email:\n\nMany thanks for bringing this up. Excellent find. Going to noodle on this for a while - my first reaction is we might be able to do this a bit more efficiently and still take advantage of jQuery's bound<->target association via guid. Also want to make sure we don't break this: https://github.com/flightjs/flight/pull/21\n\nI agree on the efficiency point \u2013 there may be a more efficient way to remove the handlers. I'm thinking particularly about findEventsByTarget - there's slightly too much iteration over events going on.\nHowever, I'd be very hesitant to manipulate jQuery's guids. For one, it ties Flight tightly into jQuery's way of doing event handler registration.\nRegarding that issue, there's a test in place and I was thinking about it when I put together this fix.\nWill take another look at this in the morning. We tore our hair out a bit, figuring out what was going on \u2013 ironically, a debugging browser extension might have helped! Spurs me on a bit :)\n. I don't think that tying Flight's event implementation to jQuery's is a good idea. jQuery could easily change this in future, and then Flight would have to change \u2013 or enforce an old jQuery version.\nMy view would be to let jQuery do its event binding however it wants, and deal with Flight's in a Flight-specific way.\n. So am I still wrong? :)\nThis is all getting very confusing. You're referring to the PR @angus-c has opened with a different fix for the same bug? If so, can you delete the comment here and move them over if you think it's still appropriate?\n. But, by using jQuery guids we're depending jQuery's implementation, not its interface. Any DOM library worth its salt will clean up listeners, but absolutely not all will use guids.\n. @angus-c Would be great to get one of these two merged.\nIn summary of my points here: I think messing with guids is a bad idea as it relies on jQuery's implementation, not exposed API, and I think we should iterate on this PR to make finding the right callback to pass to .off more efficient.\nI would also like to point out that Flight already iterated through the instance's events once in removeBind, so any iteration bottleneck was already there. We can probably roll them into one and maintain the same performance characteristics.\n. Closing because it seems like we'll go with #192.\n. (If you saw/got emails about my earlier comments, please ignore \u2013 wasn't concentrating)\nThis looks good, although I think off should remove all handlers, not just one at a time.\nI'd also like to see include come docs about why this changed.\n. @angus-c You're using callback.bound.some and returning on the first one found. That means, if one component registers the same event twice (with the same callback, on the same node), you won't remove all of them \u2013 so you have to call off once for every on. I think it should remove all matching events.\nSeems you could use callback.bound = callback.bound.filter(...).\nHere's a test that fails and demonstrates it:\njavascript\nit('unbinds all event handlers which share the same node, event, callback and instance', function () {\n  var instance1 = (new Component).initialize(window.outerDiv);\n  var spy = jasmine.createSpy();\n  instance1.on(document, 'event1', spy);\n  instance1.on(document, 'event1', spy);\n  instance1.off(document, 'event1', spy);\n  // uncomment this and the test passes\n  // instance1.off(document, 'event1', spy);\n  instance1.trigger('event1');\n  expect(spy).not.toHaveBeenCalled();\n});\nI'm also interested: could we not have iterated on my PR (with the big commit message + explanation) to this?\n. I'm ok with this fix, although I don't much like adding to the callback. It seems to me the registry is where this should be focused as much as possible, as it's such a flight-specific thing, but this works too.\n. That would mean you can't enable logging later, right? Unless you register (and deregister?) the advice when enabled changes.\n. Lgtm, although it does trouble me how unreadable that argument extraction code is!\n. Aiming to do a revamp of the developer experience for 2.0.0 \u2014 something like this would be very useful.\n. Hmm. What nodes are your instances attached to? Do you have a reduced test-case?\n. Closing \u2014 will pick up again in future if there's demand.\n. Oh, ok! I thought it was a bit \"magic\". Is there a plan to remove it?\n. I'd be interested in seeing the use case (problem & solution) that having a collection addresses \u2013 gives something to base a discussion on.\nFWIW, withTeardown would actually support collection-style behaviour. We need to get it out so y'all can play with it.\n. The behaviour you describe is exactly what we use withTeardown for in TweetDeck \u2013 single-page-app with component trees per \"page\".\n. Tearing down all components is very unlikely, and not particularly useful in a single page app.\nFor example you would almost certainly want to (frequently) teardown the set of view components the user could currently see, but you would not want to teardown your auth component. teardownAll is very heavy-handed; withTeardown allows sub-sections of the DOM tree (and therefore the component tree) to teardown in isolation, without bringing the rest of the app down.\n. @angus-c Sure - but when are you going to be a whole app with instances of the same component?\nI'm yet to hear of an example that can't be solved using withTeardown (which is why TD is interested in getting it into Flight core, but that's a discussion for another time), but I won't make the argument for withTeardown again here - rather, I'll put together something more comprehensive.\n. @angus-c Great \u2013 will get it somewhere asap.\n. There's no test for this case, so I'd guess it's just missing functionality. Will put a patch together, unless you beat me to it ;)\n. Not sure of the intention here. Closing, happy to reopen if there's something specific to be changed.\n. Actually, on second thoughts \u2014 I rather this didn't go into Flight. It's not very obvious what's happening. Might save someone some debugging time (\"Why isn't this event being listened for here? Why is it suddenly popping up there?\") if we force people to be specific when they want to do this.\n. @houyhea Closing, happy to repoen if this you're still having trouble.\n. Hey @gc-victor \u2014 thanks for this, sorry about the delay in getting to it.\nCould you link back to the Flight mailing list discussion if it's still relevant? Would like some more context. Thanks!\n. Totally agree that this is bug, but I don't think relying on jQuery namespaces is the solution; we should just implement off such that it matches user expectations by only unbinding the relevant listeners.\n. Thanks for looking at this! Haven't got a sec to look at it right now, but a thing to look out for + test is if this works with multiple instances of the same component. If one unbinds, do the others' listeners stick around?\n. @gc-victor Is this still relevant? It's broken the build, so needs a refactor. Will close if not.\n. It seems to me the functionality you want doesn't match jQuery's behaviour, because namespaces act more like tags than a hierarchy. For example, in your e.namespace example, I think the namespace would be wants.\nThe way I see it, that means the functionality you want would have be implemented in Flight internally, which complects the core.\nI haven't tried, but it might be possible to build it the functionality you want with a mixin.\n. @giuseppeg Indeed, I was saying that the jQuery behaviour doesn't match the behaviour @jfsiii  described.\nI don't think the feature being present in jQuery has any bearing on this \u2013 jQuery has plenty of features Flight doesn't have.\nWe could move this in the direction of a \"Flight needs namespacing\" discussion. It's a different question, the answer to which could be a different API.\n. @jfsiii Cool \u2013 if you come up with something nice, please do publish it! Now Flight has .mixin it's easy to mix & match functionality, and namespacing may turn out to be a really great feature.\n. Pull request to fix this gladly accepted! @staeke \n. Leaving this open but marking for 2.0.0 milestone, which will include a documentation revamp.\n. Closing \u2014 Attributes is nice and this isn't a huge thing. It could change for 2.0.0.\n. Hmm. After a few hours on it, I'm going to wontfix and close this. We're going to remove proxying before 2 (and move it into userland with a mixin), so I don't think it bears too much effort now.\n. This contains the per instance callback removal \u2013 is that right?\nI also don't feel good about namespaces but I think we should have a discussion about it \u2014  #264 is probably the right place.\n. Closing as this doesn't seem to have moved anywhere. Happy to reopen if there are objections.\n. Hmm. Ok, well I'll PR generator-flight-package to get it working again.\n. In TweetDeck we use events similarly to the way described by @giuseppeg and others: uiNeedsX and dataX. But I think this is not always a good way of doing things, because it ties the component implementations too closely.\nMy recommendation would be that, wherever possible, you build your components reactively:\n``` js\n// UI Component\nthis.trigger('uiFinshedDoingAThing', { ... });\nthis.on('usefulDataForAnotherThing', function (e, data) { ... });\n// Data Component\nthis.on('uiFinshedDoingAThing', function (e, data) {\n  this.trigger('usefulDataForAnotherThing', { ... });\n});\n```\nThe event names are not really related, so if something changes in the data layer between uiFinishedDoingAThing and usefulDataForAnotherThing, you don't have to go change the UI component too.\nIf you're using a UI controller pattern, you can use this kind of thing to coordinate multiple UI components' behaviour without changing their code.\nOf course, it depends. :wink:\n. If I benchmarked the difference, how much would be unacceptable?\n. Am working on Flight tooling, hooking into trigger to show what's being triggered where amongst other things. Afaict, really the only hookable bit of Flight is the registry (exposed in standalone, mostly requireable in AMD), and the one method that isn't always exposed is trigger.\nI would say it's fine to keep behind debug mode, but TweetDeck can't run in debug mode because we're passing non-seriablizable data around, and we aren't the only ones \u2013 the Airbnb search page does it too, and most likely others.\nUnless there's another way to advice every component's trigger, added at runtime after the flight app may have loaded, the utility of & scope for the tools I'm building will be severely limited :/\nMy view is that two, essentially noop, function calls per trigger is fine.\n. What's this in that example?\n. There isn't a component here \u2013 it's an external tool that hooks into Flight. That's why I need it on the registry \u2013 it's the only bit has externally exposed methods that are called with a component's context (from withRegistration).\nFwiw, I am actually using advice on trigger, but it's the registry's trigger \u2013 and that's why I need it to not be behind the debug flag.\n. I'm not already using advice to go around trigger \u2013 I'm only able to do that when it's exposed and not behind the flag. This PR just makes it possible when the flag is off.\n. @sayrer I don't know why we are, but we are.\nTo summarise again: I want a way to hook into every trigger on all components, with arguments. This is possible with registry.trigger, but the call cannot be behind a flag for the tools to be useful to TweetDeck and, it turns out, Airbnb. I'm sure there are others.\nIf there's an alternate way to do this without a PR, I'm all ears.\n. We have a huge amount of non-Flight code and so in some cases it's simply impractical to use something serializable to get data in and out of that layer.\n. Closing as we agreed offline to add the necessary data to the DEBUG global.\n. @BugiDev is this still an issue?\nFwiw, that var self is going to cause you trouble because the scope it's declared in is shared by all instances of the mixin \u2014 add some logging next to it to demonstrate how often it's run. There's almost certainly a better way.\n. This sounds good \u2013 can't see any obvious issues. Do we have any idea how long it'll take to the test extensions up to scratch?\n. Ok, I'll give it a go.\n. I would merge it but I'm not sure how to test the standalone version. Will it be affected by this change?\n. Yeah, I think this is nice. Will add a quick comment.\n. Also needs a test!\n. Sweet, thanks @prashaantt!\n. Yeah, good point. I'll pick it up tomorrow unless you'd like to throw up a PR?\n. Hey @patricknixon \u2014 thanks for your thoughts.\nI think the use case you describe is unlikely enough that it's not a problem \u2014 and you're right in saying it's probably a horrible design!\n. Hey @zeno, thanks for the report. Are you still seeing this?\n. This is closely related to #320, and will probably be fixed by that.\n. Yep! Woohoo.\n. I think I agree with your comments @giuseppeg \u2014 proxying is giving us this combinatorial complexity issue that would be better as a separate API. Happy for me to close this?\n. @danwrong Think it's worth moving forward with this? I don't like the prototype copying hack much, but it's not much code and only turns on in debug mode.\n. Not going to merge now, but come back and iterate this in future.\n. Like it. Needs documentation?\n. Let's make sure we get this documented.\n. Thanks for this @giuseppeg.\nFor backward compatibility I'd like to keep data.el, otherwise this needs to go out with a major version bump (well, for this semver-ish project it's minor), not to mention a load of refactoring in TweetDeck. Can we just add currentTarget and the test?\n. Gonna close this cos I've put up another with some fixes (#329) \u2014 not sure of a better way to contribute to your pull!\n. To differentiate between delegated and directly bound events, we'll probably need a syntax like this:\njs\nthis.off('click', { \n  buttonSelector: this.calculateShippingPrice\n});\n. Yeah, this'll definitely require some redoing of the delegation stuff.\n. Nice, thanks!\n. That's expected behaviour \u2014 you should use an object.\n. Hi @hwclass \u2014 currently, Flight has a hard dependency on jQuery. A jQuery-less version  has been built before, but we haven't got it to a finished state yet. I'll try to convince @danwrong to put up a pull request for it.\n. WIP is on the feature/remove-jquery-320 branch.\n. So this is actually kinda done. v2 isn't ready to use yet, but as of recently it doesn't use jQuery! Woo!\nThis issue on the flight-toolbox will track adding jQuery back if you want it, via a dom plugin replacement of some kind. The specifics of that are yet to be worked out.\n. Thanks @twuttke \n. Thank you @jared-stilwell \n. Thanks for your thoughts @BugiDev.\nTo clarify, I don't think the parent should have access to the methods of the child. Have a look at the actor model for some context about why.\nI actually mean a very limited interface for talking/modifying to the child. The kind of thing that could simply be done with events.\n@BugiDev Your example is troublesome because of the teardown behaviour \u2014 it has to work automatically. A parent should not depend on a child being there (nor the reverse, really).\n. Hmm. It's a tough question. Here's my thinking behind this; perhaps it'll clarify why I want it (though there aren't really any answers here).\nIn short(ish), I don't really think the actor model (aka, Flight-philosophy) is really suitable for building complex interfaces, and Flight throws the baby out with the bath water in it's insistence on separating components from each other. \nReact and cousins have shown there's a huge amount of value in embracing component hierarchy, and I think there's a comfortable middle ground for Flight.\nPerhaps this will make more sense when TweetDeck open-sources the observable stream stuff we've been using \u2014 it's absolutely staggering how much more simple, testable and readable components become when you architect around the inherent tree-structure of UI.\nIt's possible we don't need this, but I'd be really interested to discuss it.\n. Hey @mikkotikkanen. The intention is that this is just a mixin/utility that helps you with component definition and is therefore totally optional. The general thing here is just to start thinking about hiding some of the API intuition bugs in Flight.\n. Threw together a quick POC of an ES6 class-based API. Main thing is that we can do mixins (tho the value of them is questionable) and static attribute definition (static analysis anyone?).\n``` js\nclass Component {\n  constructor(node, attr={}) {\n    this.attr = Object.assign(Object.create(this.constructor.attributes || {}), attr);\n    this.constructor.mixins.forEach(Mixin => Mixin.call(this));\n  }\n}\nfunction BooperMixin() {\n  this.booper = true;\n}\nclass Button extends Component {\n  static attributes = {\n    onClick: () => {}\n  };\n  static mixins = [BooperMixin];\n/ ... /\n}\nnew Button(document.body, {\n  onClick: () => { console.log('sup!') }\n})\n``\n. Thinking this could be done by making attributes and defaultAttrs compatible (currently they're mutually exclusive).\n. Enough time has passed fordefaultAttrsto have been migrated away from, so the deprecation strategy will be:\n- release a1.xthat spits warnings (in debug mode) whendefaultAttrsis used\n- make defaultAttrs a warning-spitting (regardless of debug mode) no-op in2`\nWe need to be this strict about it because the two are mutually exclusive, so projects like TweetDeck will have to do an all-at-once switch.\n. Thanks for this!\nYeah, the event object will stay \u2014 but the jQuery change is quite a while away and I think there will be a big documentation rework at the same time.\n. Thanks!\n. Thanks alot for this @aemonge. I'm afraid it's something we can't merge as it's a backward incompatible change \u2014 for example, it forbids a component to listen on the document which is behaviour Flight encourages.\nYou could however enforce this behaviour in your own code by creating a mixin with the API you want, and mixing it into a new base component. Happy to help out if you'd like to do this.\n. Landed in 1f3203d, but we also need a mixin the add this back via the API discussed above.\n. I've submitted an issue on the new flight-toolbox repo to track the creation of this mixin: https://github.com/flightjs/flight-toolbox/issues/1\n. @marti1125 Sure! Just a link and bit of text would be perfect \u2014 thanks :smile: \n. @marti1125 Ooh, good question. I think the first one, but I'll have a think about how we can integrate this stuff into the main documentation.\n. Hey @paulwib \u2014 thanks for reporting these, I'll fix them right away.\nYes, v2 is happening on master \u2014 I'll delete the v2 branch too.\n. Hi @c0. Huh, this is interesting \u2014 thanks for bringing it up.\nPerhaps we could call it defineComponent \u2014 the noun definition is a funny one.\nAs an aside, this would be good to get out in v1.x release, so could you put it up against that branch instead? Thanks!\n. Thanks very much for moving this over.\nSo now the question is: do we merge this or wait for amd-optimize to fix their bug?\n. That's a good question. It's possible that we'll move to CommonJS for v2 but for now this seems good enough to prevent these errors.\nWill merge now but I probably won't get a release out until next week.\n. Thanks! :heart: \n. Thanks @AndrewLorente!\n. Hey @crudbug.\nI think virtual-dom is usable already, although I've not tried it myself. I see no problem with a component rendering itself with virtual-dom, and just not using the jQuery-based features, but I don't know how it would work in a large component tree.\nIf you experiment with this, please report back! I'll be really interested to hear how you get on.\n. Looks unlikely this going to go anywhere in Flight core. User-land may provide support.\n. Thanks!\n. Fantastic, thanks!\n. Thanks! Sorry for the delay.\n. Hey @fridays \u2014 thanks for this! Unfortunately, making an optimisation like this would only work if the DOM under a component was static \u2014 if the set of nodes that matched the selector changes, a cached version would miss these changes. The boolean flag is useful, but the assumption in existing code is that select is dynamic, so this would be a significant breaking change.\nYou could however make a (really useful) mixin called something like withSelectCached that added a method exactly like you describe (perhaps this.selectCached) that helps in the case that you know the DOM is static.\n. Hey! I'd love to see an updated, modern Flight website with full documentation and examples. It's just a case of when we'll have time to work on it!\n. Cool! My approach would be to keep the docs in the same repo as the code and use a build task to commit them in website form to a gh-pages branch.\nThe build-step approach might be wrong but I think it's important to keep the docs beside the code, so commits can contain both and be checked for consistency.\n. The documentation is OK for what we have now \u2014 there's unlikely to be any more core Flight development, so going to close this for now.\n. Thanks!\n. Thanks! \n. Perhaps it doesn't need to be broken out, and a DOM plugin library would just sit alongside... That makes things a whole lot easier for us!\n. :skull: \n. This is a fiddly one \u2014 we definitely should. I'm not really sure how to test it \u2014 I'd rather not force closest use the built-in in browsers that support it, so that the Flight implementation is used, because it would make the tests leak into the function.\nMaybe as a compromise we could expose the Flight implementation as flightClosest (and not mention it), test that function, and then make closest a feature-detector and not test it.\nWhat do you think? \n. Oh, that's an interesting approach, and there might be other polyfills we could use (CustomEvent?) for all the stuff that's soon to be standardised. What do you think about coming up with a baseline browser feature-set for Flight? (We already require es5-shim, I think)\n. I was thinking we just declare a baseline and ask users to deliver that however they like \u2014 what do you think of that?\n. v2 thing \u2014 will close this. Maybe someone in future will come back and work on Flight 2!\n. Thanks Giuseppe.\n. Hey! Sorry for the stupendously long wait on this one. I'm going to cherry pick your work onto master and close this. Thanks for your contribution!\n. Hey! Sorry for the stupendously long wait on this one. I'm going to cherry pick your work onto master and close this. Thanks for your contribution!\n. Hey @JungMinu \u2014 thanks for the change. I'm not seeing any Flight-y stuff on your site, and it doesn't seem to be built with Flight. Am I missing something? Sorry if I am!\n. This looks like your CV \u2014 will accept another PR if it's for an app that uses Flight. Thanks!\n. Great, thanks everyone!\nIf you're up for contributing, I'd love to see some work on some of the open issues for v2. To get started have a look at the helpwanted label, or start submitting and fixing issues of your own!\n. @sperovic Thanks!\n. v2 thing \u2014 closing.\n. Thanks for this @giuseppeg. Could you provide a bit more info about what's broken? Would help me out a lot.\n. Thanks @giuseppeg. So what's still broken \u2014 the ('document', { ... }) case? Definitely we should test for that if it's a valid use of the API.\n. @giuseppeg Totally reasonable, yeah \u2014 and I'm onboard with removing those string shortcuts too.\n. @angus-c Thanks for handling this one! Did you mean to merge it (rather than just close)?\n. Sorry @giuseppeg \u2014 looks like v2 isn't going to happen, will close this. Thanks for all your work.\n. @rymai Hey! Sorry for the stupendously long wait on this one. I'm going to cherry pick your commits (which are great) back onto master and close this. Thanks for your contribution!\n. Thanks @jshen212!\n. Hi @chenqing. Flight is not under active development, which includes v2.\n. \ud83d\udea2 . What's the thinking on this now, a few months later?\nThis might break TweetDeck, but not badly. Afaik, we're only passing an object to attachTo in a few places and from a quick scan of the code, the attributes are defined in most places.\nOne thing I'd like to add to this discussion: a misconception I had when starting with Flight was that the component function was run once per instance at attach time. That meant I did things like:\n``` javascript\nthis.defaultAttrs({\n  rifftumbles: []\n});\nthis.somethingGood = function () {\n  this.attr.rifftumbles.push({\n    beep: 'boop'\n  });\n};\n```\nOf course, then the rifftumbles are shared between instances of the component.\nMy question then is: should instance-specific state go in instance.attr? If so, is there a possible  syntax that avoids this kind of thing?\nThis seems to verbose, not to mention the redundant static data it would produce.\njavascript\nthis.attributes(function () {\n  return {\n    boopSelector: '.boop',\n    rifftumbles: []\n  };\n});\n. I'm interested in why this isn't baked in. I totally respect the decision not to have it, but I'm just wondering what the reasoning is?\nAlso, what are the pros and cons of, for example, using a withOnce mixin?\n. Ok, I see \u2013 but just to be clear, I wasn't suggesting Flight ship with a withOnce, I was just suggesting it as an alternative to a util. Or was that clear, and I've missed what you meant?! :)\n. I think this can be closed, as it got added in #186.\n. From Angus via email:\n\nMany thanks for bringing this up. Excellent find. Going to noodle on this for a while - my first reaction is we might be able to do this a bit more efficiently and still take advantage of jQuery's bound<->target association via guid. Also want to make sure we don't break this: https://github.com/flightjs/flight/pull/21\n\nI agree on the efficiency point \u2013 there may be a more efficient way to remove the handlers. I'm thinking particularly about findEventsByTarget - there's slightly too much iteration over events going on.\nHowever, I'd be very hesitant to manipulate jQuery's guids. For one, it ties Flight tightly into jQuery's way of doing event handler registration.\nRegarding that issue, there's a test in place and I was thinking about it when I put together this fix.\nWill take another look at this in the morning. We tore our hair out a bit, figuring out what was going on \u2013 ironically, a debugging browser extension might have helped! Spurs me on a bit :)\n. I don't think that tying Flight's event implementation to jQuery's is a good idea. jQuery could easily change this in future, and then Flight would have to change \u2013 or enforce an old jQuery version.\nMy view would be to let jQuery do its event binding however it wants, and deal with Flight's in a Flight-specific way.\n. So am I still wrong? :)\nThis is all getting very confusing. You're referring to the PR @angus-c has opened with a different fix for the same bug? If so, can you delete the comment here and move them over if you think it's still appropriate?\n. But, by using jQuery guids we're depending jQuery's implementation, not its interface. Any DOM library worth its salt will clean up listeners, but absolutely not all will use guids.\n. @angus-c Would be great to get one of these two merged.\nIn summary of my points here: I think messing with guids is a bad idea as it relies on jQuery's implementation, not exposed API, and I think we should iterate on this PR to make finding the right callback to pass to .off more efficient.\nI would also like to point out that Flight already iterated through the instance's events once in removeBind, so any iteration bottleneck was already there. We can probably roll them into one and maintain the same performance characteristics.\n. Closing because it seems like we'll go with #192.\n. (If you saw/got emails about my earlier comments, please ignore \u2013 wasn't concentrating)\nThis looks good, although I think off should remove all handlers, not just one at a time.\nI'd also like to see include come docs about why this changed.\n. @angus-c You're using callback.bound.some and returning on the first one found. That means, if one component registers the same event twice (with the same callback, on the same node), you won't remove all of them \u2013 so you have to call off once for every on. I think it should remove all matching events.\nSeems you could use callback.bound = callback.bound.filter(...).\nHere's a test that fails and demonstrates it:\njavascript\nit('unbinds all event handlers which share the same node, event, callback and instance', function () {\n  var instance1 = (new Component).initialize(window.outerDiv);\n  var spy = jasmine.createSpy();\n  instance1.on(document, 'event1', spy);\n  instance1.on(document, 'event1', spy);\n  instance1.off(document, 'event1', spy);\n  // uncomment this and the test passes\n  // instance1.off(document, 'event1', spy);\n  instance1.trigger('event1');\n  expect(spy).not.toHaveBeenCalled();\n});\nI'm also interested: could we not have iterated on my PR (with the big commit message + explanation) to this?\n. I'm ok with this fix, although I don't much like adding to the callback. It seems to me the registry is where this should be focused as much as possible, as it's such a flight-specific thing, but this works too.\n. That would mean you can't enable logging later, right? Unless you register (and deregister?) the advice when enabled changes.\n. Lgtm, although it does trouble me how unreadable that argument extraction code is!\n. Aiming to do a revamp of the developer experience for 2.0.0 \u2014 something like this would be very useful.\n. Hmm. What nodes are your instances attached to? Do you have a reduced test-case?\n. Closing \u2014 will pick up again in future if there's demand.\n. Oh, ok! I thought it was a bit \"magic\". Is there a plan to remove it?\n. I'd be interested in seeing the use case (problem & solution) that having a collection addresses \u2013 gives something to base a discussion on.\nFWIW, withTeardown would actually support collection-style behaviour. We need to get it out so y'all can play with it.\n. The behaviour you describe is exactly what we use withTeardown for in TweetDeck \u2013 single-page-app with component trees per \"page\".\n. Tearing down all components is very unlikely, and not particularly useful in a single page app.\nFor example you would almost certainly want to (frequently) teardown the set of view components the user could currently see, but you would not want to teardown your auth component. teardownAll is very heavy-handed; withTeardown allows sub-sections of the DOM tree (and therefore the component tree) to teardown in isolation, without bringing the rest of the app down.\n. @angus-c Sure - but when are you going to be a whole app with instances of the same component?\nI'm yet to hear of an example that can't be solved using withTeardown (which is why TD is interested in getting it into Flight core, but that's a discussion for another time), but I won't make the argument for withTeardown again here - rather, I'll put together something more comprehensive.\n. @angus-c Great \u2013 will get it somewhere asap.\n. There's no test for this case, so I'd guess it's just missing functionality. Will put a patch together, unless you beat me to it ;)\n. Not sure of the intention here. Closing, happy to reopen if there's something specific to be changed.\n. Actually, on second thoughts \u2014 I rather this didn't go into Flight. It's not very obvious what's happening. Might save someone some debugging time (\"Why isn't this event being listened for here? Why is it suddenly popping up there?\") if we force people to be specific when they want to do this.\n. @houyhea Closing, happy to repoen if this you're still having trouble.\n. Hey @gc-victor \u2014 thanks for this, sorry about the delay in getting to it.\nCould you link back to the Flight mailing list discussion if it's still relevant? Would like some more context. Thanks!\n. Totally agree that this is bug, but I don't think relying on jQuery namespaces is the solution; we should just implement off such that it matches user expectations by only unbinding the relevant listeners.\n. Thanks for looking at this! Haven't got a sec to look at it right now, but a thing to look out for + test is if this works with multiple instances of the same component. If one unbinds, do the others' listeners stick around?\n. @gc-victor Is this still relevant? It's broken the build, so needs a refactor. Will close if not.\n. It seems to me the functionality you want doesn't match jQuery's behaviour, because namespaces act more like tags than a hierarchy. For example, in your e.namespace example, I think the namespace would be wants.\nThe way I see it, that means the functionality you want would have be implemented in Flight internally, which complects the core.\nI haven't tried, but it might be possible to build it the functionality you want with a mixin.\n. @giuseppeg Indeed, I was saying that the jQuery behaviour doesn't match the behaviour @jfsiii  described.\nI don't think the feature being present in jQuery has any bearing on this \u2013 jQuery has plenty of features Flight doesn't have.\nWe could move this in the direction of a \"Flight needs namespacing\" discussion. It's a different question, the answer to which could be a different API.\n. @jfsiii Cool \u2013 if you come up with something nice, please do publish it! Now Flight has .mixin it's easy to mix & match functionality, and namespacing may turn out to be a really great feature.\n. Pull request to fix this gladly accepted! @staeke \n. Leaving this open but marking for 2.0.0 milestone, which will include a documentation revamp.\n. Closing \u2014 Attributes is nice and this isn't a huge thing. It could change for 2.0.0.\n. Hmm. After a few hours on it, I'm going to wontfix and close this. We're going to remove proxying before 2 (and move it into userland with a mixin), so I don't think it bears too much effort now.\n. This contains the per instance callback removal \u2013 is that right?\nI also don't feel good about namespaces but I think we should have a discussion about it \u2014  #264 is probably the right place.\n. Closing as this doesn't seem to have moved anywhere. Happy to reopen if there are objections.\n. Hmm. Ok, well I'll PR generator-flight-package to get it working again.\n. In TweetDeck we use events similarly to the way described by @giuseppeg and others: uiNeedsX and dataX. But I think this is not always a good way of doing things, because it ties the component implementations too closely.\nMy recommendation would be that, wherever possible, you build your components reactively:\n``` js\n// UI Component\nthis.trigger('uiFinshedDoingAThing', { ... });\nthis.on('usefulDataForAnotherThing', function (e, data) { ... });\n// Data Component\nthis.on('uiFinshedDoingAThing', function (e, data) {\n  this.trigger('usefulDataForAnotherThing', { ... });\n});\n```\nThe event names are not really related, so if something changes in the data layer between uiFinishedDoingAThing and usefulDataForAnotherThing, you don't have to go change the UI component too.\nIf you're using a UI controller pattern, you can use this kind of thing to coordinate multiple UI components' behaviour without changing their code.\nOf course, it depends. :wink:\n. If I benchmarked the difference, how much would be unacceptable?\n. Am working on Flight tooling, hooking into trigger to show what's being triggered where amongst other things. Afaict, really the only hookable bit of Flight is the registry (exposed in standalone, mostly requireable in AMD), and the one method that isn't always exposed is trigger.\nI would say it's fine to keep behind debug mode, but TweetDeck can't run in debug mode because we're passing non-seriablizable data around, and we aren't the only ones \u2013 the Airbnb search page does it too, and most likely others.\nUnless there's another way to advice every component's trigger, added at runtime after the flight app may have loaded, the utility of & scope for the tools I'm building will be severely limited :/\nMy view is that two, essentially noop, function calls per trigger is fine.\n. What's this in that example?\n. There isn't a component here \u2013 it's an external tool that hooks into Flight. That's why I need it on the registry \u2013 it's the only bit has externally exposed methods that are called with a component's context (from withRegistration).\nFwiw, I am actually using advice on trigger, but it's the registry's trigger \u2013 and that's why I need it to not be behind the debug flag.\n. I'm not already using advice to go around trigger \u2013 I'm only able to do that when it's exposed and not behind the flag. This PR just makes it possible when the flag is off.\n. @sayrer I don't know why we are, but we are.\nTo summarise again: I want a way to hook into every trigger on all components, with arguments. This is possible with registry.trigger, but the call cannot be behind a flag for the tools to be useful to TweetDeck and, it turns out, Airbnb. I'm sure there are others.\nIf there's an alternate way to do this without a PR, I'm all ears.\n. We have a huge amount of non-Flight code and so in some cases it's simply impractical to use something serializable to get data in and out of that layer.\n. Closing as we agreed offline to add the necessary data to the DEBUG global.\n. @BugiDev is this still an issue?\nFwiw, that var self is going to cause you trouble because the scope it's declared in is shared by all instances of the mixin \u2014 add some logging next to it to demonstrate how often it's run. There's almost certainly a better way.\n. This sounds good \u2013 can't see any obvious issues. Do we have any idea how long it'll take to the test extensions up to scratch?\n. Ok, I'll give it a go.\n. I would merge it but I'm not sure how to test the standalone version. Will it be affected by this change?\n. Yeah, I think this is nice. Will add a quick comment.\n. Also needs a test!\n. Sweet, thanks @prashaantt!\n. Yeah, good point. I'll pick it up tomorrow unless you'd like to throw up a PR?\n. Hey @patricknixon \u2014 thanks for your thoughts.\nI think the use case you describe is unlikely enough that it's not a problem \u2014 and you're right in saying it's probably a horrible design!\n. Hey @zeno, thanks for the report. Are you still seeing this?\n. This is closely related to #320, and will probably be fixed by that.\n. Yep! Woohoo.\n. I think I agree with your comments @giuseppeg \u2014 proxying is giving us this combinatorial complexity issue that would be better as a separate API. Happy for me to close this?\n. @danwrong Think it's worth moving forward with this? I don't like the prototype copying hack much, but it's not much code and only turns on in debug mode.\n. Not going to merge now, but come back and iterate this in future.\n. Like it. Needs documentation?\n. Let's make sure we get this documented.\n. Thanks for this @giuseppeg.\nFor backward compatibility I'd like to keep data.el, otherwise this needs to go out with a major version bump (well, for this semver-ish project it's minor), not to mention a load of refactoring in TweetDeck. Can we just add currentTarget and the test?\n. Gonna close this cos I've put up another with some fixes (#329) \u2014 not sure of a better way to contribute to your pull!\n. To differentiate between delegated and directly bound events, we'll probably need a syntax like this:\njs\nthis.off('click', { \n  buttonSelector: this.calculateShippingPrice\n});\n. Yeah, this'll definitely require some redoing of the delegation stuff.\n. Nice, thanks!\n. That's expected behaviour \u2014 you should use an object.\n. Hi @hwclass \u2014 currently, Flight has a hard dependency on jQuery. A jQuery-less version  has been built before, but we haven't got it to a finished state yet. I'll try to convince @danwrong to put up a pull request for it.\n. WIP is on the feature/remove-jquery-320 branch.\n. So this is actually kinda done. v2 isn't ready to use yet, but as of recently it doesn't use jQuery! Woo!\nThis issue on the flight-toolbox will track adding jQuery back if you want it, via a dom plugin replacement of some kind. The specifics of that are yet to be worked out.\n. Thanks @twuttke \n. Thank you @jared-stilwell \n. Thanks for your thoughts @BugiDev.\nTo clarify, I don't think the parent should have access to the methods of the child. Have a look at the actor model for some context about why.\nI actually mean a very limited interface for talking/modifying to the child. The kind of thing that could simply be done with events.\n@BugiDev Your example is troublesome because of the teardown behaviour \u2014 it has to work automatically. A parent should not depend on a child being there (nor the reverse, really).\n. Hmm. It's a tough question. Here's my thinking behind this; perhaps it'll clarify why I want it (though there aren't really any answers here).\nIn short(ish), I don't really think the actor model (aka, Flight-philosophy) is really suitable for building complex interfaces, and Flight throws the baby out with the bath water in it's insistence on separating components from each other. \nReact and cousins have shown there's a huge amount of value in embracing component hierarchy, and I think there's a comfortable middle ground for Flight.\nPerhaps this will make more sense when TweetDeck open-sources the observable stream stuff we've been using \u2014 it's absolutely staggering how much more simple, testable and readable components become when you architect around the inherent tree-structure of UI.\nIt's possible we don't need this, but I'd be really interested to discuss it.\n. Hey @mikkotikkanen. The intention is that this is just a mixin/utility that helps you with component definition and is therefore totally optional. The general thing here is just to start thinking about hiding some of the API intuition bugs in Flight.\n. Threw together a quick POC of an ES6 class-based API. Main thing is that we can do mixins (tho the value of them is questionable) and static attribute definition (static analysis anyone?).\n``` js\nclass Component {\n  constructor(node, attr={}) {\n    this.attr = Object.assign(Object.create(this.constructor.attributes || {}), attr);\n    this.constructor.mixins.forEach(Mixin => Mixin.call(this));\n  }\n}\nfunction BooperMixin() {\n  this.booper = true;\n}\nclass Button extends Component {\n  static attributes = {\n    onClick: () => {}\n  };\n  static mixins = [BooperMixin];\n/ ... /\n}\nnew Button(document.body, {\n  onClick: () => { console.log('sup!') }\n})\n``\n. Thinking this could be done by making attributes and defaultAttrs compatible (currently they're mutually exclusive).\n. Enough time has passed fordefaultAttrsto have been migrated away from, so the deprecation strategy will be:\n- release a1.xthat spits warnings (in debug mode) whendefaultAttrsis used\n- make defaultAttrs a warning-spitting (regardless of debug mode) no-op in2`\nWe need to be this strict about it because the two are mutually exclusive, so projects like TweetDeck will have to do an all-at-once switch.\n. Thanks for this!\nYeah, the event object will stay \u2014 but the jQuery change is quite a while away and I think there will be a big documentation rework at the same time.\n. Thanks!\n. Thanks alot for this @aemonge. I'm afraid it's something we can't merge as it's a backward incompatible change \u2014 for example, it forbids a component to listen on the document which is behaviour Flight encourages.\nYou could however enforce this behaviour in your own code by creating a mixin with the API you want, and mixing it into a new base component. Happy to help out if you'd like to do this.\n. Landed in 1f3203d, but we also need a mixin the add this back via the API discussed above.\n. I've submitted an issue on the new flight-toolbox repo to track the creation of this mixin: https://github.com/flightjs/flight-toolbox/issues/1\n. @marti1125 Sure! Just a link and bit of text would be perfect \u2014 thanks :smile: \n. @marti1125 Ooh, good question. I think the first one, but I'll have a think about how we can integrate this stuff into the main documentation.\n. Hey @paulwib \u2014 thanks for reporting these, I'll fix them right away.\nYes, v2 is happening on master \u2014 I'll delete the v2 branch too.\n. Hi @c0. Huh, this is interesting \u2014 thanks for bringing it up.\nPerhaps we could call it defineComponent \u2014 the noun definition is a funny one.\nAs an aside, this would be good to get out in v1.x release, so could you put it up against that branch instead? Thanks!\n. Thanks very much for moving this over.\nSo now the question is: do we merge this or wait for amd-optimize to fix their bug?\n. That's a good question. It's possible that we'll move to CommonJS for v2 but for now this seems good enough to prevent these errors.\nWill merge now but I probably won't get a release out until next week.\n. Thanks! :heart: \n. Thanks @AndrewLorente!\n. Hey @crudbug.\nI think virtual-dom is usable already, although I've not tried it myself. I see no problem with a component rendering itself with virtual-dom, and just not using the jQuery-based features, but I don't know how it would work in a large component tree.\nIf you experiment with this, please report back! I'll be really interested to hear how you get on.\n. Looks unlikely this going to go anywhere in Flight core. User-land may provide support.\n. Thanks!\n. Fantastic, thanks!\n. Thanks! Sorry for the delay.\n. Hey @fridays \u2014 thanks for this! Unfortunately, making an optimisation like this would only work if the DOM under a component was static \u2014 if the set of nodes that matched the selector changes, a cached version would miss these changes. The boolean flag is useful, but the assumption in existing code is that select is dynamic, so this would be a significant breaking change.\nYou could however make a (really useful) mixin called something like withSelectCached that added a method exactly like you describe (perhaps this.selectCached) that helps in the case that you know the DOM is static.\n. Hey! I'd love to see an updated, modern Flight website with full documentation and examples. It's just a case of when we'll have time to work on it!\n. Cool! My approach would be to keep the docs in the same repo as the code and use a build task to commit them in website form to a gh-pages branch.\nThe build-step approach might be wrong but I think it's important to keep the docs beside the code, so commits can contain both and be checked for consistency.\n. The documentation is OK for what we have now \u2014 there's unlikely to be any more core Flight development, so going to close this for now.\n. Thanks!\n. Thanks! \n. Perhaps it doesn't need to be broken out, and a DOM plugin library would just sit alongside... That makes things a whole lot easier for us!\n. :skull: \n. This is a fiddly one \u2014 we definitely should. I'm not really sure how to test it \u2014 I'd rather not force closest use the built-in in browsers that support it, so that the Flight implementation is used, because it would make the tests leak into the function.\nMaybe as a compromise we could expose the Flight implementation as flightClosest (and not mention it), test that function, and then make closest a feature-detector and not test it.\nWhat do you think? \n. Oh, that's an interesting approach, and there might be other polyfills we could use (CustomEvent?) for all the stuff that's soon to be standardised. What do you think about coming up with a baseline browser feature-set for Flight? (We already require es5-shim, I think)\n. I was thinking we just declare a baseline and ask users to deliver that however they like \u2014 what do you think of that?\n. v2 thing \u2014 will close this. Maybe someone in future will come back and work on Flight 2!\n. Thanks Giuseppe.\n. Hey! Sorry for the stupendously long wait on this one. I'm going to cherry pick your work onto master and close this. Thanks for your contribution!\n. Hey! Sorry for the stupendously long wait on this one. I'm going to cherry pick your work onto master and close this. Thanks for your contribution!\n. Hey @JungMinu \u2014 thanks for the change. I'm not seeing any Flight-y stuff on your site, and it doesn't seem to be built with Flight. Am I missing something? Sorry if I am!\n. This looks like your CV \u2014 will accept another PR if it's for an app that uses Flight. Thanks!\n. Great, thanks everyone!\nIf you're up for contributing, I'd love to see some work on some of the open issues for v2. To get started have a look at the helpwanted label, or start submitting and fixing issues of your own!\n. @sperovic Thanks!\n. v2 thing \u2014 closing.\n. Thanks for this @giuseppeg. Could you provide a bit more info about what's broken? Would help me out a lot.\n. Thanks @giuseppeg. So what's still broken \u2014 the ('document', { ... }) case? Definitely we should test for that if it's a valid use of the API.\n. @giuseppeg Totally reasonable, yeah \u2014 and I'm onboard with removing those string shortcuts too.\n. @angus-c Thanks for handling this one! Did you mean to merge it (rather than just close)?\n. Sorry @giuseppeg \u2014 looks like v2 isn't going to happen, will close this. Thanks for all your work.\n. @rymai Hey! Sorry for the stupendously long wait on this one. I'm going to cherry pick your commits (which are great) back onto master and close this. Thanks for your contribution!\n. Thanks @jshen212!\n. Hi @chenqing. Flight is not under active development, which includes v2.\n. \ud83d\udea2 . ",
    "creativej": "Would love to see DEBUG working in the standalone version. It would help me so much.\n. icic. Cheers.\n. Would love to see DEBUG working in the standalone version. It would help me so much.\n. icic. Cheers.\n. ",
    "fehmicansaglam": "+1\n. +1\n. ",
    "fhpriamo": "I came across this issue too. The lack of documentation on the standalone version specifics is a frustrating issue as well.\n. I came across this issue too. The lack of documentation on the standalone version specifics is a frustrating issue as well.\n. ",
    "6twenty": "Looks like the debug module has been left out of the standalone version during the build process. You can fix this and do a manual build (provided you have Node) in order to activate debugging with the standalone version:\n1. Clone the git repo, and cd into the directory\n2. Run npm install and bower install\n3. Open lib/index.js and add the debug module (see example file below)\n4. Run mkdir build\n5. Run node tools/standalone/build.js (compiled flight.js and flight.min.js will appear in the build directory)\n6. Prior to loading your Flight component(s), add:\njavascript\nflight.debug.enable(true);\nDEBUG.events.logAll();\nLastly: when building your Flight component(s), pass flight.logger as a mixin to activate debug logging:\njavascript\nvar myWidget = flight.component(init, flight.logger);\nfunction init () { ... }\n``` javascript\n// lib/index.js\ndefine(\n[\n    './advice',\n    './component',\n    './compose',\n    './debug',\n    './logger',\n    './registry',\n    './utils'\n  ],\nfunction(advice, component, compose, debug, logger, registry, utils) {\n    'use strict';\nreturn {\n  advice: advice,\n  component: component,\n  compose: compose,\n  debug: debug,\n  logger: logger,\n  registry: registry,\n  utils: utils\n};\n\n}\n);\n```\nI've sent a pull request (#258) to try to get this incorporated into Flight master.\n. Correction; I wasn't using the correct form to enable debug logging. The correct method is like so:\njavascript\nflight.debug.enable(true); // Must pass true (or false)\nDEBUG.events.logAll();\n. Looks like I wasn't using the correct form to enable debug logging. The correct method is like so:\njavascript\nflight.debug.enable(true);\nDEBUG.events.logAll();\nSetting DEBUG.enabled = true; isn't required.\n. Looks like the debug module has been left out of the standalone version during the build process. You can fix this and do a manual build (provided you have Node) in order to activate debugging with the standalone version:\n1. Clone the git repo, and cd into the directory\n2. Run npm install and bower install\n3. Open lib/index.js and add the debug module (see example file below)\n4. Run mkdir build\n5. Run node tools/standalone/build.js (compiled flight.js and flight.min.js will appear in the build directory)\n6. Prior to loading your Flight component(s), add:\njavascript\nflight.debug.enable(true);\nDEBUG.events.logAll();\nLastly: when building your Flight component(s), pass flight.logger as a mixin to activate debug logging:\njavascript\nvar myWidget = flight.component(init, flight.logger);\nfunction init () { ... }\n``` javascript\n// lib/index.js\ndefine(\n[\n    './advice',\n    './component',\n    './compose',\n    './debug',\n    './logger',\n    './registry',\n    './utils'\n  ],\nfunction(advice, component, compose, debug, logger, registry, utils) {\n    'use strict';\nreturn {\n  advice: advice,\n  component: component,\n  compose: compose,\n  debug: debug,\n  logger: logger,\n  registry: registry,\n  utils: utils\n};\n\n}\n);\n```\nI've sent a pull request (#258) to try to get this incorporated into Flight master.\n. Correction; I wasn't using the correct form to enable debug logging. The correct method is like so:\njavascript\nflight.debug.enable(true); // Must pass true (or false)\nDEBUG.events.logAll();\n. Looks like I wasn't using the correct form to enable debug logging. The correct method is like so:\njavascript\nflight.debug.enable(true);\nDEBUG.events.logAll();\nSetting DEBUG.enabled = true; isn't required.\n. ",
    "superlukas": "Done. Turns out this isn't even a bug in chrome ...\n. Done. Turns out this isn't even a bug in chrome ...\n. ",
    "jfsiii": "Has this change made it into the version available via bower install? I'm still seeing the new Function line when I install via bower.\nMore info:\n```\n\u2023 $(npm bin)/bower install flight#1.1.0\nbower flight#~1.1.0             cached git://github.com/flightjs/flight.git#1.1.0\nbower flight#~1.1.0           validate 1.1.0 against git://github.com/flightjs/flight.git#~1.1.0\nbower flight#1.1.0              cached git://github.com/flightjs/flight.git#1.1.0\nbower flight#1.1.0            validate 1.1.0 against git://github.com/flightjs/flight.git#1.1.0\nbower jquery#>=1.8.0            cached git://github.com/components/jquery.git#2.0.3\nbower jquery#>=1.8.0          validate 2.0.3 against git://github.com/components/jquery.git#>=1.8.0\nbower jquery#>= 1.9.0           cached git://github.com/components/jquery.git#2.0.3\nbower jquery#>= 1.9.0         validate 2.0.3 against git://github.com/components/jquery.git#>= 1.9.0\nbower flight#~1.1.0            install flight#1.1.0\nflight#1.1.0 lib/bower_components/flight\n\u251c\u2500\u2500 es5-shim#2.0.0\n\u2514\u2500\u2500 jquery#2.0.3\n\u2023 grep -r 'new Function' lib/bower_components/flight/*\nlib/bower_components/flight/lib/registry.js:      registry.trigger = new Function;\n```\npackage.json in both master and 1.1.0 both list the same version number (1.1.0) but only master has the fix, not the 1.1.0 tag\n. Bump.\n. @necolas \"shipped into production\" by whom? I thought the standalone build was for online example convenience, not production use.\nEven if it was \"shipped to production\" what's the concern? Extra bytes? Undesired event logging?\nThe standalone build is the easiest (only?) way to include Flight in online JS editors/playgrounds (JSBin, JSFiddle, CodePen, etc). However, there is currently no way to use Flight's debugging in those examples. Perhaps this should be split into a new ticket, but I think this is an important use case that's not currently addressed.\n. What's the downside of including lib/debug in the standalone build? \nAFAICT, filesize and backwards compatibility aren't issues; but perhaps they are. Can you explain the (potential) negative consequences you see in this PR?\n. I just want to clarify what's preventing this PR from merging. It has great utility and, AFAICT, no/negligible downside.\n. I see. Thanks for the explanation.\nAFAICT, the only thing this does is expose debug as a part of lib/index. It adds, like, 30 bytes to overall filesize (lib/debug is already included in the definition, just not exposed) and is an opt-in feature so it shouldn't cause backwards-compatibility problems. As ever, I could be wrong. \n@angus-c, would you mind commenting on this?\n. @phuu Even though I included an example, I think the last paragraph is the crux of the issue. This is in jQuery. Flight requires jQuery. Why is this not in Flight?\nThat's not a loaded question. I'm just looking for the reason the behavior isn't supported. Maybe @angus-c @kennethkufluk @danwrong can help?\nPerhaps the bigger issue is my ignorance of the relationship between jQuery and Flight. I assumed that Flight's event handling was a superset of jQuery's so I was surprised this behavior wasn't supported.\n. That's probably the right course.  I'll close this but won't open a namespacing ticket. I think this was because I brought assumptions to how .on behaved. I'll deal with this in userland, if at all, before asking for it in core.\n. Has this change made it into the version available via bower install? I'm still seeing the new Function line when I install via bower.\nMore info:\n```\n\u2023 $(npm bin)/bower install flight#1.1.0\nbower flight#~1.1.0             cached git://github.com/flightjs/flight.git#1.1.0\nbower flight#~1.1.0           validate 1.1.0 against git://github.com/flightjs/flight.git#~1.1.0\nbower flight#1.1.0              cached git://github.com/flightjs/flight.git#1.1.0\nbower flight#1.1.0            validate 1.1.0 against git://github.com/flightjs/flight.git#1.1.0\nbower jquery#>=1.8.0            cached git://github.com/components/jquery.git#2.0.3\nbower jquery#>=1.8.0          validate 2.0.3 against git://github.com/components/jquery.git#>=1.8.0\nbower jquery#>= 1.9.0           cached git://github.com/components/jquery.git#2.0.3\nbower jquery#>= 1.9.0         validate 2.0.3 against git://github.com/components/jquery.git#>= 1.9.0\nbower flight#~1.1.0            install flight#1.1.0\nflight#1.1.0 lib/bower_components/flight\n\u251c\u2500\u2500 es5-shim#2.0.0\n\u2514\u2500\u2500 jquery#2.0.3\n\u2023 grep -r 'new Function' lib/bower_components/flight/*\nlib/bower_components/flight/lib/registry.js:      registry.trigger = new Function;\n```\npackage.json in both master and 1.1.0 both list the same version number (1.1.0) but only master has the fix, not the 1.1.0 tag\n. Bump.\n. @necolas \"shipped into production\" by whom? I thought the standalone build was for online example convenience, not production use.\nEven if it was \"shipped to production\" what's the concern? Extra bytes? Undesired event logging?\nThe standalone build is the easiest (only?) way to include Flight in online JS editors/playgrounds (JSBin, JSFiddle, CodePen, etc). However, there is currently no way to use Flight's debugging in those examples. Perhaps this should be split into a new ticket, but I think this is an important use case that's not currently addressed.\n. What's the downside of including lib/debug in the standalone build? \nAFAICT, filesize and backwards compatibility aren't issues; but perhaps they are. Can you explain the (potential) negative consequences you see in this PR?\n. I just want to clarify what's preventing this PR from merging. It has great utility and, AFAICT, no/negligible downside.\n. I see. Thanks for the explanation.\nAFAICT, the only thing this does is expose debug as a part of lib/index. It adds, like, 30 bytes to overall filesize (lib/debug is already included in the definition, just not exposed) and is an opt-in feature so it shouldn't cause backwards-compatibility problems. As ever, I could be wrong. \n@angus-c, would you mind commenting on this?\n. @phuu Even though I included an example, I think the last paragraph is the crux of the issue. This is in jQuery. Flight requires jQuery. Why is this not in Flight?\nThat's not a loaded question. I'm just looking for the reason the behavior isn't supported. Maybe @angus-c @kennethkufluk @danwrong can help?\nPerhaps the bigger issue is my ignorance of the relationship between jQuery and Flight. I assumed that Flight's event handling was a superset of jQuery's so I was surprised this behavior wasn't supported.\n. That's probably the right course.  I'll close this but won't open a namespacing ticket. I think this was because I brought assumptions to how .on behaved. I'll deal with this in userland, if at all, before asking for it in core.\n. ",
    "maiah": "Thanks, that's why I'm confused on your earlier comment.\nDo you think we can merge it now? For me it would be good documentation because currently  it's not that straight forward to know how to get the eventPayload from the event listener that is emitted by the trigger event. (until you check the sample email app)\n. Yup, but remember that there are also users who are not familiar with jquery.\n. Thanks, that's why I'm confused on your earlier comment.\nDo you think we can merge it now? For me it would be good documentation because currently  it's not that straight forward to know how to get the eventPayload from the event listener that is emitted by the trigger event. (until you check the sample email app)\n. Yup, but remember that there are also users who are not familiar with jquery.\n. ",
    "chee": "This is also true at the top: simple email client demo (browse the source), where source points to https://github.com/twitter/flight/blob/gh-pages/demo, which also, of course, foofs.\n. This is also true at the top: simple email client demo (browse the source), where source points to https://github.com/twitter/flight/blob/gh-pages/demo, which also, of course, foofs.\n. ",
    "rymai": "+1\n. @phuu No problem, thank you! /cc @dharFR @zeno @michaelvial\n. +1\n. @phuu No problem, thank you! /cc @dharFR @zeno @michaelvial\n. ",
    "olivierlesnicki": "@angus-c it did help! Thanks.\n. @angus-c it did help! Thanks.\n. ",
    "lwc": "Ah right - well I can confirm that flight isn't using jQuery's delegation system, as in the above example I tried the following, which worked fine:\njavascript\n$('#myForm').on('blur', '#myField', function() {\n    console.log('Hello from jQuery delegation');\n});\nI'd be interested to know why they decided against using jQuery's implementation.\nThanks for the advice RE focusin and focusout, unfortunately we'll need to support a wide range of browsers with though though :(\n. Ah right - well I can confirm that flight isn't using jQuery's delegation system, as in the above example I tried the following, which worked fine:\njavascript\n$('#myForm').on('blur', '#myField', function() {\n    console.log('Hello from jQuery delegation');\n});\nI'd be interested to know why they decided against using jQuery's implementation.\nThanks for the advice RE focusin and focusout, unfortunately we'll need to support a wide range of browsers with though though :(\n. ",
    "rexmortus": ":+1:\n@wwwsevolod is right, that handler would stick around until the sun turns black.\n. :+1:\n@wwwsevolod is right, that handler would stick around until the sun turns black.\n. ",
    "brainkim": "Thank goodness.\nOn Wed, Sep 18, 2013 at 5:23 PM, Rogelio Guzman notifications@github.comwrote:\n\nYep, I think you are right!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/flightjs/flight/pull/180#issuecomment-24700631\n.\n. Thank goodness.\n\nOn Wed, Sep 18, 2013 at 5:23 PM, Rogelio Guzman notifications@github.comwrote:\n\nYep, I think you are right!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/flightjs/flight/pull/180#issuecomment-24700631\n.\n. \n",
    "tjwudi": "This is because you are opening http://localhost:8000/a.html instead of http://127.0.0.1:8000/a.html, while you are referring to b.html by using url http://127.0.0.1:8000/b.html, so the domain mismatched.\nCheck out this page for details.\nIn conclusion, not flight's fault :)\n. This is because you are opening http://localhost:8000/a.html instead of http://127.0.0.1:8000/a.html, while you are referring to b.html by using url http://127.0.0.1:8000/b.html, so the domain mismatched.\nCheck out this page for details.\nIn conclusion, not flight's fault :)\n. ",
    "naoina": "flight have checked whether it can use window.localStorage.\nhttps://github.com/flightjs/flight/blob/master/lib/debug.js#L97\nhttps://github.com/flightjs/flight/blob/master/lib/debug.js#L105-L106\nTherefore, I think should be work fine even if Uncaught SecurityError occurred.\n. flight have checked whether it can use window.localStorage.\nhttps://github.com/flightjs/flight/blob/master/lib/debug.js#L97\nhttps://github.com/flightjs/flight/blob/master/lib/debug.js#L105-L106\nTherefore, I think should be work fine even if Uncaught SecurityError occurred.\n. ",
    "psyduk": "i made a pull request to implement this feature into utils.  it is similar to the lodash/underscore implementations.\n. I think this fits in nicely with the \"util\" idea.  It provides something that underscore or lodash provides without having to actually including the libraries.\n. updated with usage and documentation.\n. no problem at all. updated usage case to have an example of click event.\n. Squashed\n. Oddly enough it actually broke the tests when i changed it.  I'm not exactly sure on the reasoning though.  I can look into why it wouldn't work.\n. @angus-c That seems correct.  I can change it to either way.\n. or maybe just throw the standalone version into the current bower repo just named differently?  I would also love this!\n. i made a pull request to implement this feature into utils.  it is similar to the lodash/underscore implementations.\n. I think this fits in nicely with the \"util\" idea.  It provides something that underscore or lodash provides without having to actually including the libraries.\n. updated with usage and documentation.\n. no problem at all. updated usage case to have an example of click event.\n. Squashed\n. Oddly enough it actually broke the tests when i changed it.  I'm not exactly sure on the reasoning though.  I can look into why it wouldn't work.\n. @angus-c That seems correct.  I can change it to either way.\n. or maybe just throw the standalone version into the current bower repo just named differently?  I would also love this!\n. ",
    "cam-stitt": "Yeah. I did start putting some snippets up there. I'll need to push some new ones, but would be happy for you to link to it.\n. Yeah. I did start putting some snippets up there. I'll need to push some new ones, but would be happy for you to link to it.\n. ",
    "GarrettS": "Where is the test for it? Thanks.\n. I see that you are no longer occasionally relying the guid feature of jQuery that is used internally. Good! That seemed very inconsistent and unreliable.\nI would rather semi-formalize the context-bound callback. To turn this:-\n\ncallback = originalCb.bind(this);\ncallback.target = originalCb;\ncallback.context = this;\n\nInto something more like this (untested):\n\n// Untested.\ncallback = makeBoundCallback(originalCb, this);\n\n\nfunction makeBoundCallback(originalCb, context) {\n  function callback(ev) {\n    originalCb.call(this.context, ev);\n  }\n  callback.originalCb = originalCb;\n  callback.context = context;\n  context = null;\n  return callback;\n}\n\n. Where is the test for it? Thanks.\n. I see that you are no longer occasionally relying the guid feature of jQuery that is used internally. Good! That seemed very inconsistent and unreliable.\nI would rather semi-formalize the context-bound callback. To turn this:-\n\ncallback = originalCb.bind(this);\ncallback.target = originalCb;\ncallback.context = this;\n\nInto something more like this (untested):\n\n// Untested.\ncallback = makeBoundCallback(originalCb, this);\n\n\nfunction makeBoundCallback(originalCb, context) {\n  function callback(ev) {\n    originalCb.call(this.context, ev);\n  }\n  callback.originalCb = originalCb;\n  callback.context = context;\n  context = null;\n  return callback;\n}\n\n. ",
    "caniszczyk": "@angus-c, @danwrong what do you think?\nIf you like this, I'd like to use it on all of our external javascript projects.\n. What's the easiest way to create a package (we aren't familiar with .NET / NuGet)? Do we need some type of manifest file?\n. We would love for someone in the community to step up and maintain the package. I don't think any of the flight team (or me) use Windows to be able to publish a package.\n. tagging helpwanted\n. Thanks!\n. Awesome, thanks! cc: @angus-c \n. @angus-c, @danwrong what do you think?\nIf you like this, I'd like to use it on all of our external javascript projects.\n. What's the easiest way to create a package (we aren't familiar with .NET / NuGet)? Do we need some type of manifest file?\n. We would love for someone in the community to step up and maintain the package. I don't think any of the flight team (or me) use Windows to be able to publish a package.\n. tagging helpwanted\n. Thanks!\n. Awesome, thanks! cc: @angus-c \n. ",
    "ramen": "Thanks, Brett. twitter.github.io/flight/ is the top result on Google for \"twitter flight\" right now.\n. Thanks, Brett. twitter.github.io/flight/ is the top result on Google for \"twitter flight\" right now.\n. ",
    "jsbuzz": "@kennethkufluk \nYou can try this tool: https://github.com/jsbuzz/flightMonitor\nAlready added feature breakOn\n. @kennethkufluk \nYou can try this tool: https://github.com/jsbuzz/flightMonitor\nAlready added feature breakOn\n. ",
    "sayrer": "Fixed by #202 \n. patch looks good but travis failing due to missing jquery?\n. lgtm assuming we can get our large projects to pass with this, and we fix the pretty print\n. var prototype = Object.create(this.attrDef || null);\nedit: \nwe should also try this... \nvar prototype = Object.create(typeof this.attrDef === \"object\" ? this.attrDef : null);\nThat is strictly better, because the first argument to Object.create must be an Object or null. the typeof operator happens to have similar rules.\n. well \"if (this.attrDef) {\" isn't great as a guard. if its value happens to be a string or 'true' it doesn't work.\nI can see a point of view that says that's nonsense that should never happen. If so,\nvar prototype = Object.create(this.attrDef || null);\nis shorter and better.\n. anyway, what happened was Angus imported 1.2.0 and I left a nit comment saying it looked like Object.create to me, and the initial read was a bit confusing to me. so, yeah, this is still just a nit\n. I'd like to know why you're passing non-serializable data around before we start hacking things up to work around it.\n. I want to know why Tweetdeck can't use debug mode... this is what it's for. Restating the thread as a demand is a bit facile.\n. Fixed by #202 \n. patch looks good but travis failing due to missing jquery?\n. lgtm assuming we can get our large projects to pass with this, and we fix the pretty print\n. var prototype = Object.create(this.attrDef || null);\nedit: \nwe should also try this... \nvar prototype = Object.create(typeof this.attrDef === \"object\" ? this.attrDef : null);\nThat is strictly better, because the first argument to Object.create must be an Object or null. the typeof operator happens to have similar rules.\n. well \"if (this.attrDef) {\" isn't great as a guard. if its value happens to be a string or 'true' it doesn't work.\nI can see a point of view that says that's nonsense that should never happen. If so,\nvar prototype = Object.create(this.attrDef || null);\nis shorter and better.\n. anyway, what happened was Angus imported 1.2.0 and I left a nit comment saying it looked like Object.create to me, and the initial read was a bit confusing to me. so, yeah, this is still just a nit\n. I'd like to know why you're passing non-serializable data around before we start hacking things up to work around it.\n. I want to know why Tweetdeck can't use debug mode... this is what it's for. Restating the thread as a demand is a bit facile.\n. ",
    "klzns": "It seems to be working now for me as well.\nI'm closing the issue.\n. @rogeliog thanks :)\nIf anyone have any issue with it, feel free to open an issue. I'm glad to help.\n. It seems to be working now for me as well.\nI'm closing the issue.\n. @rogeliog thanks :)\nIf anyone have any issue with it, feel free to open an issue. I'm glad to help.\n. ",
    "jhdrn": "I just realised that there is a project at http://nugetpackages.codeplex.com/ which maintains \"A set of NuGet packages for common libraries that are maintained by the NuGet community, rather than the library authors themselves.\". Could be an alternative if you don't want to manage a NuGet package on your own.\nIf you however want to manage NuGet packages on your own and prefer the command line, check out http://docs.nuget.org/docs/creating-packages/creating-and-publishing-a-package. I prefer using NuGet Package Explorer (read more about it at http://docs.nuget.org/docs/creating-packages/using-a-gui-to-build-packages) as it comes with a GUI. You'll also need an account at nuget.org to publish a package to the official repository. \nHere is an example package I created: https://www.dropbox.com/s/1zbuj75rpqfao39/FlightStandalone.1.1.1.nupkg\n. Added a request for a package at https://nugetpackages.codeplex.com/workitem/14. \n. There is not much happening with the issue I created att codeplex, so I decided to take care of it myself. I've now created a repo (https://github.com/jonathanhedren/flight-nuget) to create NuGet packages with the help of grunt tasks. \nI also uploaded them to nuget.org:\nhttps://www.nuget.org/packages/Flight/1.1.4\nhttps://www.nuget.org/packages/Flight.Standalone/1.1.3\nFeedback is welcome.\n. I just realised that there is a project at http://nugetpackages.codeplex.com/ which maintains \"A set of NuGet packages for common libraries that are maintained by the NuGet community, rather than the library authors themselves.\". Could be an alternative if you don't want to manage a NuGet package on your own.\nIf you however want to manage NuGet packages on your own and prefer the command line, check out http://docs.nuget.org/docs/creating-packages/creating-and-publishing-a-package. I prefer using NuGet Package Explorer (read more about it at http://docs.nuget.org/docs/creating-packages/using-a-gui-to-build-packages) as it comes with a GUI. You'll also need an account at nuget.org to publish a package to the official repository. \nHere is an example package I created: https://www.dropbox.com/s/1zbuj75rpqfao39/FlightStandalone.1.1.1.nupkg\n. Added a request for a package at https://nugetpackages.codeplex.com/workitem/14. \n. There is not much happening with the issue I created att codeplex, so I decided to take care of it myself. I've now created a repo (https://github.com/jonathanhedren/flight-nuget) to create NuGet packages with the help of grunt tasks. \nI also uploaded them to nuget.org:\nhttps://www.nuget.org/packages/Flight/1.1.4\nhttps://www.nuget.org/packages/Flight.Standalone/1.1.3\nFeedback is welcome.\n. ",
    "criso": "+1\n. +1\n. ",
    "drewherbst": "This would be great.\n. This would be great.\n. ",
    "DanNordness": "I want this also.\n. I want this also.\n. ",
    "paulmeyerle": "+1\n. +1\n. ",
    "HorstMumpitz": "+1 \u2013 It would really simplify the integration into rails. A standalone version in the current bower repo would be fine. \n. +1 \u2013 It would really simplify the integration into rails. A standalone version in the current bower repo would be fine. \n. ",
    "caryfitzhugh": "Thanks - the challenge with @angus-c 's solution is that I do pass things into attachTo.\nWhen I bootstrap a data component, I'm passing it's initial data through attachTo, which should set the defaultAttrs fields.\nAdding a variable as 'var foo' at the top - was something I initially tried as well - but I don't think it works?!?! It is what I'd think might work. But I think the flight component definition function is only run once, so it doesn't make a copy for each instance.  Every instance shares the same variables.  That was my other solution, to use vars and wrap the entire component definition function in another function.  But that just started to feel a bit nutzo :)\nI extended the fiddle to do this and var, and the this method is the only one that works.\nhttp://jsfiddle.net/dBM6K/4/\nI value keeping all the variables in one place (helpful on a team), and don't want to have to write code to copy things like:\njavascript\n  if (this.attr.bootstrap_list){ \n    this.list = this.attr.bootstrap_list;\n  }\nIt's also simpler that the variable passed into attachTo is the same as the one in attrs and used in the component.\nI thank you @giuseppeg for the mixin. I'll look into using that.  If I can use a method like this.attributes({ .... }) that does all I want, then I'll use that.\nI'd suggest  to the flight team at large that this behavior is really a deviation from what a developer would expect.  It's been done for good reasons, but it may be helpful to put some info around this feature.  I always just assumed that defaults were a way to easily pass in variables on attachTo (really the only way) and never suspected they were read-only. Maybe change the name, put some comments into the docs, something? Because it was a bear to track down what was making my tests pass one run, then fail the next.  Oy!\nThanks!\n. I ended up with this:\njavascript\nZ.mixins.MutableDefaults = function () {\n  this.before('initialize', function () {\n    this.defaults = _.cloneDeep(this.defaults);\n  });\n};\nThanks\n. @wwwsevolod -- I have found that putting all my data into a flight component, and only interacting with it through events to be wonderful (so far at least!).  I have all the benefits, like being able to cache, refactor easily, etc.  It's pretty performant. And my nightmares from Backbone and all their spaghetti of inter-connected dependencies is gone.\nThat being the case, defaultAttrs is just what I am looking for at this point.\n@giuseppeg I am using lodash in the rest of the system, so adding it there wasn't a big deal for me and our system.\nI looked at the flight utils API docs and it didn't seem to say specifically if merge cloned things - I imagined that it didn't.  The second parameter seemed to flag whether it was going to squawk if you merged something oddly (nested hashes or something).  Did I mis read it?\n. My goodness.. That's what I would have suspected (true == deepClone).  But - when I looked up the API docs this morning I must have looked at push!  ha. there the last param is to \"protect\".  Hence my confusion.\nAnyway. Thanks :)\n. Thanks - the challenge with @angus-c 's solution is that I do pass things into attachTo.\nWhen I bootstrap a data component, I'm passing it's initial data through attachTo, which should set the defaultAttrs fields.\nAdding a variable as 'var foo' at the top - was something I initially tried as well - but I don't think it works?!?! It is what I'd think might work. But I think the flight component definition function is only run once, so it doesn't make a copy for each instance.  Every instance shares the same variables.  That was my other solution, to use vars and wrap the entire component definition function in another function.  But that just started to feel a bit nutzo :)\nI extended the fiddle to do this and var, and the this method is the only one that works.\nhttp://jsfiddle.net/dBM6K/4/\nI value keeping all the variables in one place (helpful on a team), and don't want to have to write code to copy things like:\njavascript\n  if (this.attr.bootstrap_list){ \n    this.list = this.attr.bootstrap_list;\n  }\nIt's also simpler that the variable passed into attachTo is the same as the one in attrs and used in the component.\nI thank you @giuseppeg for the mixin. I'll look into using that.  If I can use a method like this.attributes({ .... }) that does all I want, then I'll use that.\nI'd suggest  to the flight team at large that this behavior is really a deviation from what a developer would expect.  It's been done for good reasons, but it may be helpful to put some info around this feature.  I always just assumed that defaults were a way to easily pass in variables on attachTo (really the only way) and never suspected they were read-only. Maybe change the name, put some comments into the docs, something? Because it was a bear to track down what was making my tests pass one run, then fail the next.  Oy!\nThanks!\n. I ended up with this:\njavascript\nZ.mixins.MutableDefaults = function () {\n  this.before('initialize', function () {\n    this.defaults = _.cloneDeep(this.defaults);\n  });\n};\nThanks\n. @wwwsevolod -- I have found that putting all my data into a flight component, and only interacting with it through events to be wonderful (so far at least!).  I have all the benefits, like being able to cache, refactor easily, etc.  It's pretty performant. And my nightmares from Backbone and all their spaghetti of inter-connected dependencies is gone.\nThat being the case, defaultAttrs is just what I am looking for at this point.\n@giuseppeg I am using lodash in the rest of the system, so adding it there wasn't a big deal for me and our system.\nI looked at the flight utils API docs and it didn't seem to say specifically if merge cloned things - I imagined that it didn't.  The second parameter seemed to flag whether it was going to squawk if you merged something oddly (nested hashes or something).  Did I mis read it?\n. My goodness.. That's what I would have suspected (true == deepClone).  But - when I looked up the API docs this morning I must have looked at push!  ha. there the last param is to \"protect\".  Hence my confusion.\nAnyway. Thanks :)\n. ",
    "PatrickJS": "@angus-c .done()\n. @angus-c .done()\n. ",
    "hoverbird": "Very slick, Cameron.\n. Very slick, Cameron.\n. ",
    "rlavoie": "Yup that would be what I am missing.\nThanks\n. I understand components don't engage with each other directly and they wouldn't in this case. Each component would just assign themselves to a collection.  I can see how random collection names could cause confusion. \nMy issue was that in my SPA, when you went from one route to another, I need to tear down all the components on the old route.  The ability to tear down a component and all the child components it instantiated, would solve this issue. I'm only suggesting adding this feature to the core, because I can see this being helpful in most applications.\n. Yup that would be what I am missing.\nThanks\n. I understand components don't engage with each other directly and they wouldn't in this case. Each component would just assign themselves to a collection.  I can see how random collection names could cause confusion. \nMy issue was that in my SPA, when you went from one route to another, I need to tear down all the components on the old route.  The ability to tear down a component and all the child components it instantiated, would solve this issue. I'm only suggesting adding this feature to the core, because I can see this being helpful in most applications.\n. ",
    "DKunin": "Hi @giuseppeg! \nThanks a lot for the detailed reply! I am currently using the method you describe, although I use htm templates - with requre.js text plugin and each ui component fetches it's own templates and prerenders them to add recieved data.\nI also like the idea of network-printer-style seperate rendere - but I guess you're right - it'll add unnecessary complexity!\nThanks again!\n. @tbrd Thanks for the info, heard of hogan - but never tried it, actually, would check it out! \nI actually have couple of templates that are used for same data - I have an information sheet - and the other template that renders form, with questions based on the same data, like a learn-check yourself cycle. So I try to keep my templates loose from the components.\n. Hi @giuseppeg! \nThanks a lot for the detailed reply! I am currently using the method you describe, although I use htm templates - with requre.js text plugin and each ui component fetches it's own templates and prerenders them to add recieved data.\nI also like the idea of network-printer-style seperate rendere - but I guess you're right - it'll add unnecessary complexity!\nThanks again!\n. @tbrd Thanks for the info, heard of hogan - but never tried it, actually, would check it out! \nI actually have couple of templates that are used for same data - I have an information sheet - and the other template that renders form, with questions based on the same data, like a learn-check yourself cycle. So I try to keep my templates loose from the components.\n. ",
    "staeke": "Ok, so I've stumbled upon this problem now as well. SPA, navigation away from view, need to tear down all components in that view, while other components exist on page.\nRegistry style\nUsing Flight registry this is obviously quite simple. We did something similar to the gist @giuseppeg provided, but instead used the findInstanceByNode, since we know all nodes we attached flight components to. \nEvent style\nThe other option would be to have all used Flight components listen for an event. e.g. \"requestTeardown\" and then, as a consumer, fire an event on the respective DOM nodes. The components would then check if (evt.target === this.node) { this.teardown() }. This could be accomplished in a number ways though.\nTo summarize possible ways:\n1. Do it through registry like above. Works fine, but...is it against Flight philosophy? Registry is currently also undocumented. Is that something to rely on? @tbrd ? (Could also be exposed in core through something like Component.teardownByNode(selector|Element|ElementCollection). Possibly Component.teardownByNode could also check if any component's node has the passed node as an ancestor and then teardown. Or there could be a Component.teardownRemoved that checks registry for components that are attached to removed nodes. I could make a pull request for this if you're interested.\n2. Have a soft requirement on all components to implement the \"requestTeardown\" event above. Not good in that it easily fails, as it's simply not the case that all 3rd party components implement this.\n3. Have some kind of extension that extends the relevant components with this teardown behavior (or mixes it in) in the cases where it makes sense. Problem is how to \"subclass\" or mixin to existing defined components. Looked at https://github.com/flightjs/flight/issues/57, but unless I'm mistaken that seems to be a problem as of  now.\nOverall - I really think 1. makes most sense, and thus just a blessing and some documentation of registry would be nice.\n. @giuseppeg Yes, thank you.\n. @phuu Sure, that may be an even better idea. \n. Renamed issue name to better correspond to content\n. I think it sounds like a simple and effective idea. Quick control question - would it work for the case where the \"handler\" is a string, i.e. when you just re-broadcast the event.\n. great\n. @necolas Hmm...I really don't agree. First, there hasn't been any confusion around whether the first arg is optional or whether one is able to send any DOM node, or that the default is this.node unless you pass a selector. That is clear. Also, there's no confusion around the case where you pass a map of targets.\nThe confusion is where you pass a string. Nowhere in the docs does it say that this selector is relative to document. Both @patricknixon and I assumed this.node. I believe others have/will as well.\nMy recommendation would be to, under \"selector: String | Element | Element collection\", include\n\"If selector is a string, that selector will be resolved from document. In other words, it would be equivalent to passing $(selector)\"\n. Thanks @tbrd for your comment and @necolas for reopening. \nRegarding your question @necolas - about why I (and others) assume that it was relative to this.node - why assume that? Well, it seems weird for a component to know about the \"other world\" DOM structure. Or to have requirements on clients on how the outer document should be laid out - then it's not very well encapsulated IMO. So that seems like an odd use case. Secondly, having internal selectors (the click handler for that button rendered in our template) seems like a very common use case, that's why I assumed the overload was built for that purpose. \nAnother reason is that the signature VERY much looks looks like jQuery's on, which uses current node relative selectors.\n. @angus-c This definitely seems like the recommended approach. The downside I see with that though is that internal selectors are overrideable by outside users of your component. You might want to lock those down to prevent that, or avoid the risk of having naming conflicts with other mixins.\n. @angus-c sure...guess I was a little unclear. I was primarily thinking of code that calls attachTo. By moving the selectors to attr you open of for the possibility of overriding, which is of course also valid in the case of a mixin. This may or may not be what you want. Point is, you don't have an option. There is not such thing as defaultPrivateAttrs or defaultProtectedAttrs.\n. Ok, so I've stumbled upon this problem now as well. SPA, navigation away from view, need to tear down all components in that view, while other components exist on page.\nRegistry style\nUsing Flight registry this is obviously quite simple. We did something similar to the gist @giuseppeg provided, but instead used the findInstanceByNode, since we know all nodes we attached flight components to. \nEvent style\nThe other option would be to have all used Flight components listen for an event. e.g. \"requestTeardown\" and then, as a consumer, fire an event on the respective DOM nodes. The components would then check if (evt.target === this.node) { this.teardown() }. This could be accomplished in a number ways though.\nTo summarize possible ways:\n1. Do it through registry like above. Works fine, but...is it against Flight philosophy? Registry is currently also undocumented. Is that something to rely on? @tbrd ? (Could also be exposed in core through something like Component.teardownByNode(selector|Element|ElementCollection). Possibly Component.teardownByNode could also check if any component's node has the passed node as an ancestor and then teardown. Or there could be a Component.teardownRemoved that checks registry for components that are attached to removed nodes. I could make a pull request for this if you're interested.\n2. Have a soft requirement on all components to implement the \"requestTeardown\" event above. Not good in that it easily fails, as it's simply not the case that all 3rd party components implement this.\n3. Have some kind of extension that extends the relevant components with this teardown behavior (or mixes it in) in the cases where it makes sense. Problem is how to \"subclass\" or mixin to existing defined components. Looked at https://github.com/flightjs/flight/issues/57, but unless I'm mistaken that seems to be a problem as of  now.\nOverall - I really think 1. makes most sense, and thus just a blessing and some documentation of registry would be nice.\n. @giuseppeg Yes, thank you.\n. @phuu Sure, that may be an even better idea. \n. Renamed issue name to better correspond to content\n. I think it sounds like a simple and effective idea. Quick control question - would it work for the case where the \"handler\" is a string, i.e. when you just re-broadcast the event.\n. great\n. @necolas Hmm...I really don't agree. First, there hasn't been any confusion around whether the first arg is optional or whether one is able to send any DOM node, or that the default is this.node unless you pass a selector. That is clear. Also, there's no confusion around the case where you pass a map of targets.\nThe confusion is where you pass a string. Nowhere in the docs does it say that this selector is relative to document. Both @patricknixon and I assumed this.node. I believe others have/will as well.\nMy recommendation would be to, under \"selector: String | Element | Element collection\", include\n\"If selector is a string, that selector will be resolved from document. In other words, it would be equivalent to passing $(selector)\"\n. Thanks @tbrd for your comment and @necolas for reopening. \nRegarding your question @necolas - about why I (and others) assume that it was relative to this.node - why assume that? Well, it seems weird for a component to know about the \"other world\" DOM structure. Or to have requirements on clients on how the outer document should be laid out - then it's not very well encapsulated IMO. So that seems like an odd use case. Secondly, having internal selectors (the click handler for that button rendered in our template) seems like a very common use case, that's why I assumed the overload was built for that purpose. \nAnother reason is that the signature VERY much looks looks like jQuery's on, which uses current node relative selectors.\n. @angus-c This definitely seems like the recommended approach. The downside I see with that though is that internal selectors are overrideable by outside users of your component. You might want to lock those down to prevent that, or avoid the risk of having naming conflicts with other mixins.\n. @angus-c sure...guess I was a little unclear. I was primarily thinking of code that calls attachTo. By moving the selectors to attr you open of for the possibility of overriding, which is of course also valid in the case of a mixin. This may or may not be what you want. Point is, you don't have an option. There is not such thing as defaultPrivateAttrs or defaultProtectedAttrs.\n. ",
    "maxwellE": "Awesome! Thanks for the update @angus-c !\n. Do you mean merge with master? I do not know what that would do though, there does not seem to be any differences other than those I made.\n. Rebased with your new master.  Can you rerun TravisCI?\n. Awesome! Thanks for the update @angus-c !\n. Do you mean merge with master? I do not know what that would do though, there does not seem to be any differences other than those I made.\n. Rebased with your new master.  Can you rerun TravisCI?\n. ",
    "matthew-andrews": "Oops, my mistake the eventPayload should only be an object.. I wonder where I saw it was a string...\n. I may have missed something but as far as I can see I suspect it could support strings as payloads with not much work - strings are objects too, after all...\n. Oops, my mistake the eventPayload should only be an object.. I wonder where I saw it was a string...\n. I may have missed something but as far as I can see I suspect it could support strings as payloads with not much work - strings are objects too, after all...\n. ",
    "aj0strow": "Ah I see now, thanks. \nUnfortunate that it needs to have the selector as an attribute to achieve delegation. Confusing abstraction for me. \n. Ah I see now, thanks. \nUnfortunate that it needs to have the selector as an attribute to achieve delegation. Confusing abstraction for me. \n. ",
    "kloots": "I think this change makes sense. Submit a pull request.\nThanks,\nTodd\n. If you're already using advice to go around trigger(), could you not just have your wrapper for trigger() fire a custom event on the document that could then be listened to by any third party?\n. I think this change makes sense. Submit a pull request.\nThanks,\nTodd\n. If you're already using advice to go around trigger(), could you not just have your wrapper for trigger() fire a custom event on the document that could then be listened to by any third party?\n. ",
    "prashaantt": "Yes it is. I just ran into this issue too.\nAttempting to define this.attributes on a component that also has a mixin that defines its own this.attributes throws this error \u2014 and it doesn't matter if the attrs defined are completely different. Reverting to using this.defaultAttrs for both resolves this issue.\n. Sorry about that.\n. Well, this is embarrassing. Today, after weeks of fiddling with Flight, I got DEBUG to work on my project. What I was doing wrong was trying to require my default.js (in terms of the Flight generator) in the main require:\n``` javascript\nrequire(\n  [\n    'flight/lib/compose',\n    'flight/lib/registry',\n    'flight/lib/advice',\n    'flight/lib/logger',\n    'flight/lib/debug',\n    'page/default'\n  ],\nfunction (compose, registry, advice, logger, debug, initializeDefault) {\n    debug.enable(true);\n    initializeDefault();\n  }\n);\n```\nDEBUG seems to work only when I put\njavascript\nrequire(['page/default'], function (initializeDefault) {\n  initializeDefault();\n});\ninside the function block above, which effectively ensures debug has been set up before page/default is loaded \u2014 I should've known that. Either has no effect on the overall functionality of my app \u2014 the events get fired regardless.\n. Thanks for the consolation :) You know I ran into a real deadlock trying to use the requireJS optimizer with this setup. The optimizer (r.js) requires the main app to be required in the main require block, but that meant I wouldn't be able to use Debug on my project. I was going to reopen this thread when I made a last-ditch effort by creating a new file just to initialize the Debug, and requiring it before the main app in the main require. That worked! But yeah, it would be so much nicer if these things could be documented.\n. Can you please explain the rationale behind this move from AMD to CommonJS?\n. Just wondering if you guys still think this is cool. When I wrote it, I was really just trying to emulate jQuery ($node.addClass('red green blue')) so people already familiar with that kind of syntax will reach out for it naturally.\nAs a Flight user, I think this would fit nicely into the Flight scheme of things.\n. Thanks for your feedback! I've refactored the code and added a test.\n. Thanks, makes sense to update the Advice API doc too?\n. Sure, I'll give it a stab.\n. A very interesting observation! Thanks @patricknixon, I hadn't thought of this.\nHowever, I just reverted to 1.3 and it didn't seem to handle this situation either:\njs\nthis['Patrick Nixon'] = function () {\n  console.log('Patrick');\n}\n...\nthis.before('Patrick Nixon', function () {\n  console.log('Before Patrick');\n});\n...\nthis.on('someEvent', this['Patrick Nixon']);\nThe only output for this in 1.3 is \"Patrick\" and the before remained ignored, which is the case even in 1.4. Unless you meant another way of writing the before?\n. Uh, I looked around and saw you're trying to deprecate jQuery dependence in a future release (#320). I think most of these changes will still pass, except for my specific mention of jQuery events at one place. I suppose the event object is going to stay but no longer as a jQuery object?\n. I missed updating the Readme. Looks like I'll need to creater another PR. :(\n. Yes it is. I just ran into this issue too.\nAttempting to define this.attributes on a component that also has a mixin that defines its own this.attributes throws this error \u2014 and it doesn't matter if the attrs defined are completely different. Reverting to using this.defaultAttrs for both resolves this issue.\n. Sorry about that.\n. Well, this is embarrassing. Today, after weeks of fiddling with Flight, I got DEBUG to work on my project. What I was doing wrong was trying to require my default.js (in terms of the Flight generator) in the main require:\n``` javascript\nrequire(\n  [\n    'flight/lib/compose',\n    'flight/lib/registry',\n    'flight/lib/advice',\n    'flight/lib/logger',\n    'flight/lib/debug',\n    'page/default'\n  ],\nfunction (compose, registry, advice, logger, debug, initializeDefault) {\n    debug.enable(true);\n    initializeDefault();\n  }\n);\n```\nDEBUG seems to work only when I put\njavascript\nrequire(['page/default'], function (initializeDefault) {\n  initializeDefault();\n});\ninside the function block above, which effectively ensures debug has been set up before page/default is loaded \u2014 I should've known that. Either has no effect on the overall functionality of my app \u2014 the events get fired regardless.\n. Thanks for the consolation :) You know I ran into a real deadlock trying to use the requireJS optimizer with this setup. The optimizer (r.js) requires the main app to be required in the main require block, but that meant I wouldn't be able to use Debug on my project. I was going to reopen this thread when I made a last-ditch effort by creating a new file just to initialize the Debug, and requiring it before the main app in the main require. That worked! But yeah, it would be so much nicer if these things could be documented.\n. Can you please explain the rationale behind this move from AMD to CommonJS?\n. Just wondering if you guys still think this is cool. When I wrote it, I was really just trying to emulate jQuery ($node.addClass('red green blue')) so people already familiar with that kind of syntax will reach out for it naturally.\nAs a Flight user, I think this would fit nicely into the Flight scheme of things.\n. Thanks for your feedback! I've refactored the code and added a test.\n. Thanks, makes sense to update the Advice API doc too?\n. Sure, I'll give it a stab.\n. A very interesting observation! Thanks @patricknixon, I hadn't thought of this.\nHowever, I just reverted to 1.3 and it didn't seem to handle this situation either:\njs\nthis['Patrick Nixon'] = function () {\n  console.log('Patrick');\n}\n...\nthis.before('Patrick Nixon', function () {\n  console.log('Before Patrick');\n});\n...\nthis.on('someEvent', this['Patrick Nixon']);\nThe only output for this in 1.3 is \"Patrick\" and the before remained ignored, which is the case even in 1.4. Unless you meant another way of writing the before?\n. Uh, I looked around and saw you're trying to deprecate jQuery dependence in a future release (#320). I think most of these changes will still pass, except for my specific mention of jQuery events at one place. I suppose the event object is going to stay but no longer as a jQuery object?\n. I missed updating the Readme. Looks like I'll need to creater another PR. :(\n. ",
    "jared-stilwell": "@angus-c that's it. closing this. thanks.\n. @angus-c that's it. closing this. thanks.\n. ",
    "patricknixon": "+1\nI made the same assumption.  It might be a good idea to also show how to use relative selectors:\nthis.on(this.select('selectorAttribute'), eventType, handler)\nOR\nthis.on(eventType, { selectorAttribute: handler })\nIt should be noted somewhere that in the first case, event handlers are attached directly to elements matching the selector, and are not delegated to the current node like they would be if one passes an object as the second argument\n```\n// this handler is attached directly to the matching element:\nthis.on(selector, eventType, handler)\n// this handler is attached to this.node and and will capture events from\n// all children that match selector now and in the future\nthis.on(eventType, { selector: handler })\n```\n. Don't be embarrassed!  That is very counterintuitive.  The docs should indicate that debug mode has to be enabled before defining any components (if that's even the case ?)\n. I know I'm late to the party, but I'm not a huge fan of this change.\nRemember that Javascript objects are maps and therefore method names are simple string keys that may contain spaces.  A rare use case, for sure, but this is definitely a breaking change that could affect developers.  I could imagine, for instance, a case where someone generated methods using user data:\njavascript\nvar users = [\"Prashant Tiwari\", \"Tom Ashworth\", \"Dan Webb\", \"Patrick Nixon\"];\n...\nusers.forEach(function(name) {\n  this[name + \"_callback\"] = generateUserCallback(name);\n}.bind(this));\n(This may or may not be a horrible design choice by the imagined developer.  I'm just giving an example.)\n. @prashaantt Not sure what I did differently, but here is your example working in 1.3: http://jsfiddle.net/ug8f5623/1/\n. +1\nI made the same assumption.  It might be a good idea to also show how to use relative selectors:\nthis.on(this.select('selectorAttribute'), eventType, handler)\nOR\nthis.on(eventType, { selectorAttribute: handler })\nIt should be noted somewhere that in the first case, event handlers are attached directly to elements matching the selector, and are not delegated to the current node like they would be if one passes an object as the second argument\n```\n// this handler is attached directly to the matching element:\nthis.on(selector, eventType, handler)\n// this handler is attached to this.node and and will capture events from\n// all children that match selector now and in the future\nthis.on(eventType, { selector: handler })\n```\n. Don't be embarrassed!  That is very counterintuitive.  The docs should indicate that debug mode has to be enabled before defining any components (if that's even the case ?)\n. I know I'm late to the party, but I'm not a huge fan of this change.\nRemember that Javascript objects are maps and therefore method names are simple string keys that may contain spaces.  A rare use case, for sure, but this is definitely a breaking change that could affect developers.  I could imagine, for instance, a case where someone generated methods using user data:\njavascript\nvar users = [\"Prashant Tiwari\", \"Tom Ashworth\", \"Dan Webb\", \"Patrick Nixon\"];\n...\nusers.forEach(function(name) {\n  this[name + \"_callback\"] = generateUserCallback(name);\n}.bind(this));\n(This may or may not be a horrible design choice by the imagined developer.  I'm just giving an example.)\n. @prashaantt Not sure what I did differently, but here is your example working in 1.3: http://jsfiddle.net/ug8f5623/1/\n. ",
    "alexgorbatchev": "ping!\n. :+1: \n. @angus-c is something blocking this PR?\n. Does it make sense to do a major semver change on this broad change? Technically API doesn't change here, but it's large enough change and it would be nice not to scare folks away by \"sneaking\" it under more liberal semver requirements using ^.\n. @angus-c ping!\n. ping!\n. :+1: \n. @angus-c is something blocking this PR?\n. Does it make sense to do a major semver change on this broad change? Technically API doesn't change here, but it's large enough change and it would be nice not to scare folks away by \"sneaking\" it under more liberal semver requirements using ^.\n. @angus-c ping!\n. ",
    "andrewk": "Is the idea here that a new major version would ship using CommonJS instead of RequireJS?\nVery much in favour of this PR :+1:\n. You can use Flight and CommonJS right now if you swap browserify for\nwebpack.\nOn 25 Oct 2014 13:57, \"Rafael Peruggia\" notifications@github.com wrote:\n\nToo sad that @necolas https://github.com/necolas closed this PR. I had\nhoped that one day I could use FlightJS with Browserify.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/flightjs/flight/pull/269#issuecomment-60469517.\n. Is the idea here that a new major version would ship using CommonJS instead of RequireJS?\nVery much in favour of this PR :+1:\n. You can use Flight and CommonJS right now if you swap browserify for\nwebpack.\nOn 25 Oct 2014 13:57, \"Rafael Peruggia\" notifications@github.com wrote:\nToo sad that @necolas https://github.com/necolas closed this PR. I had\nhoped that one day I could use FlightJS with Browserify.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/flightjs/flight/pull/269#issuecomment-60469517.\n. \n",
    "peruggia": "Too sad that @necolas closed this PR. I had hoped that one day I could use FlightJS with Browserify.\n. @andrewk Thank you for the tip. I'm gonna give it a try.\n. Too sad that @necolas closed this PR. I had hoped that one day I could use FlightJS with Browserify.\n. @andrewk Thank you for the tip. I'm gonna give it a try.\n. ",
    "jcemer": ":+1: \n. :+1: \n. ",
    "varontron": "Your 'dataRequested' handler can trigger another event, e.g., 'dataRetrieved' and pass the data.  An 'on('dataRetrieved',...) handler, perhaps in the original UI component can then use it.\n. Your 'dataRequested' handler can trigger another event, e.g., 'dataRetrieved' and pass the data.  An 'on('dataRetrieved',...) handler, perhaps in the original UI component can then use it.\n. ",
    "nkzawa": "@varontron  @giuseppeg: thank you for your replies.\nI think another event is not enough for me. When some UI components use a same data component, all these UI components would receive a result at the same time, even though only one needs it.\nI know can use other event names for each UI components, but I want to make data components isolated as much as possible.\n@giuseppeg  I will try {callback: function() {}} approach, thanks. \n. @giuseppeg It would be one of the answers though it looks a bit redundant. Thanks anyway :)\n. @phuu I didn't think of that pattern ... making components reactive is where I should go. Thank you!\n. What about this.select which returns a jQuery object?\n. @giuseppeg Yeah, but that will break backward compatibility. We need a new method for that.\n. @giuseppeg It sounds great!\n. @varontron  @giuseppeg: thank you for your replies.\nI think another event is not enough for me. When some UI components use a same data component, all these UI components would receive a result at the same time, even though only one needs it.\nI know can use other event names for each UI components, but I want to make data components isolated as much as possible.\n@giuseppeg  I will try {callback: function() {}} approach, thanks. \n. @giuseppeg It would be one of the answers though it looks a bit redundant. Thanks anyway :)\n. @phuu I didn't think of that pattern ... making components reactive is where I should go. Thank you!\n. What about this.select which returns a jQuery object?\n. @giuseppeg Yeah, but that will break backward compatibility. We need a new method for that.\n. @giuseppeg It sounds great!\n. ",
    "mikemliu": "Looking at the new branch, it seems the jQuery $ references are still global. Is the plan to shim the dependency? I am upgrading my code to match the new API so would like to get clarification. Thanks!\n. That's a bummer because I already ported my scripts in anticipation of this -- including bundling with browserify...\n. Looking at the new branch, it seems the jQuery $ references are still global. Is the plan to shim the dependency? I am upgrading my code to match the new API so would like to get clarification. Thanks!\n. That's a bummer because I already ported my scripts in anticipation of this -- including bundling with browserify...\n. ",
    "gabrielhpugliese": "I'm having this issue when trying to debug inside a define() block with a MyComponent.mixin() call\n. What if I don't want to call this.calculateShippingPrice. How would the syntax be?\n. We are using flightjs a lot and I probably can contribute.\n. I'm having this issue when trying to debug inside a define() block with a MyComponent.mixin() call\n. What if I don't want to call this.calculateShippingPrice. How would the syntax be?\n. We are using flightjs a lot and I probably can contribute.\n. ",
    "kbingman": "Not depending on jQuery would be great. +1\n. @phuu @danwrong yeah, I would be interested in looking at that very much and helping out.\n. Not depending on jQuery would be great. +1\n. @phuu @danwrong yeah, I would be interested in looking at that very much and helping out.\n. ",
    "karlhp": "+1\n. +1\n. ",
    "allanchang": ":thumbsup: for referring to it as pedantic\n. :thumbsup: for referring to it as pedantic\n. ",
    "hwclass": "@phuu @danwrong great, good news. The base strcuture of flight encourages developers to develop apps with seperation of concers, so to remove the dependency over jQuery would be a good work to do for the future of the framework. I would also be interested in developing something else for that work. Thanks..\n. I am interested as well.\n. @phuu @danwrong great, good news. The base strcuture of flight encourages developers to develop apps with seperation of concers, so to remove the dependency over jQuery would be a good work to do for the future of the framework. I would also be interested in developing something else for that work. Thanks..\n. I am interested as well.\n. ",
    "panesofglass": ":+1:\n. :+1:\n. ",
    "tunderdomb": "+1\nI'd really love to see a lightweight version without the dependency too. \nAlso, out of curiosity, why did you decide to make it a requirement in the first place? I mean I can see this framework stand on its own without it just fine. Thanks!\n. +1\nI'd really love to see a lightweight version without the dependency too. \nAlso, out of curiosity, why did you decide to make it a requirement in the first place? I mean I can see this framework stand on its own without it just fine. Thanks!\n. ",
    "mikkotikkanen": "Yeah, this is a real problem. First solution would be to document properly how cases like this should be handled (ie. setting them as var's in main scope, as properties of this in initialize or in attributes?).\nBest case scenario of course would be such implementation that it avoids issues like this.\n. I presume you are talking about \"another way\" (more compressed) to define components? 'cos the wonderful thing about flight as it is at the moment is the simplicity and how close it ends up being just pure jQuery, meaning that it has been really easy to integrate to the team know-how - \"relax, it's just jQuery\".\nHaving too much of a proprietary structure would in my mind hinder the ability to just jump in and start using it, which in our case was one of the main reasons to start using it.\n. Sorry, I was bit vague on that :P\nI meant that how it looks like, it's just a set functions, much like everything else is in jQuery and/or any other object construct, meaning it's easy to approach and thus fast to get new people on board. Which was something that attracted me into flight in the first place (lean is mean :).\n. Yeah, that sounds good to me :)\n. Yeah, this is a real problem. First solution would be to document properly how cases like this should be handled (ie. setting them as var's in main scope, as properties of this in initialize or in attributes?).\nBest case scenario of course would be such implementation that it avoids issues like this.\n. I presume you are talking about \"another way\" (more compressed) to define components? 'cos the wonderful thing about flight as it is at the moment is the simplicity and how close it ends up being just pure jQuery, meaning that it has been really easy to integrate to the team know-how - \"relax, it's just jQuery\".\nHaving too much of a proprietary structure would in my mind hinder the ability to just jump in and start using it, which in our case was one of the main reasons to start using it.\n. Sorry, I was bit vague on that :P\nI meant that how it looks like, it's just a set functions, much like everything else is in jQuery and/or any other object construct, meaning it's easy to approach and thus fast to get new people on board. Which was something that attracted me into flight in the first place (lean is mean :).\n. Yeah, that sounds good to me :)\n. ",
    "Mr0grog": "\nso that each component is a function that can be run at instantiation time.\n\nFor what it\u2019s worth, I\u2019ve been experimenting with using mixins to add properties to to component types/constructors (rather than instances), so a change like this would break that. I imagine that\u2019s not something very common, though, and I\u2019m not even sure how well it will pan out for myself.\nExample:\njavascript\nfunction SomeComponentOrMixin() {\n  this.constructor.something = function() {...};\n}\n. > so that each component is a function that can be run at instantiation time.\nFor what it\u2019s worth, I\u2019ve been experimenting with using mixins to add properties to to component types/constructors (rather than instances), so a change like this would break that. I imagine that\u2019s not something very common, though, and I\u2019m not even sure how well it will pan out for myself.\nExample:\njavascript\nfunction SomeComponentOrMixin() {\n  this.constructor.something = function() {...};\n}\n. ",
    "fridays": "What is the status on this?\nShould I take it as a feature and make use of variables that are shared between component instances, or will this behaviour be removed in v2?\n. I like this idea.\n. What is the status on this?\nShould I take it as a feature and make use of variables that are shared between component instances, or will this behaviour be removed in v2?\n. I like this idea.\n. ",
    "salbertson": "@phuu I agree, changing the way components are constructed so that the outer scope is run once per instance, rather than once per component, would be great.\nA team member and I quickly ran into issues using local variables in components. We were both surprised to find out they were shared across component instances.\n. @phuu I agree, changing the way components are constructed so that the outer scope is run once per instance, rather than once per component, would be great.\nA team member and I quickly ran into issues using local variables in components. We were both surprised to find out they were shared across component instances.\n. ",
    "Balder79": "+1\n. +1\n. ",
    "raulgundin": "+1\n. +1\n. ",
    "aemonge": "Ohhh!!!! Backwards compatibility it's a big issue. In other hand, it didn't got the idea that flight encourages me to listen to document . But I'm glad I know that =D\nThanks for the quick response.\n. Ohhh!!!! Backwards compatibility it's a big issue. In other hand, it didn't got the idea that flight encourages me to listen to document . But I'm glad I know that =D\nThanks for the quick response.\n. ",
    "marti1125": "@phuu Could I help with this?\n. @phuu excuse me. Is it https://github.com/flightjs/flight/blob/master/README.md or https://github.com/flightjs/flight/tree/master/doc\n. @phuu maybe in https://github.com/flightjs/flight/blob/master/doc/mixin_api.md I am waiting of your instructions for help in this issue :)\n. @phuu Could I help with this?\n. @phuu excuse me. Is it https://github.com/flightjs/flight/blob/master/README.md or https://github.com/flightjs/flight/tree/master/doc\n. @phuu maybe in https://github.com/flightjs/flight/blob/master/doc/mixin_api.md I am waiting of your instructions for help in this issue :)\n. ",
    "paulwib": "Also s/incompatibile/incompatible/ ;)\n. Also s/incompatibile/incompatible/ ;)\n. ",
    "c0": "Boom: https://github.com/flightjs/flight/pull/340\n. I wonder if only this one should be merged. I'm not fully versed in the AMD spec, but is define essentially a reserved word? If so, this PR is applicable regardless of changes to amd-optimize.\n. \n. Boom: https://github.com/flightjs/flight/pull/340\n. I wonder if only this one should be merged. I'm not fully versed in the AMD spec, but is define essentially a reserved word? If so, this PR is applicable regardless of changes to amd-optimize.\n. \n. ",
    "mtj8033": "@phuu Any chance you can push a new release of 1.x to npm?\n. Any chance this can get merged in and a new build pushed out to npm?\n. @phuu Any chance you can push a new release of 1.x to npm?\n. Any chance this can get merged in and a new build pushed out to npm?\n. ",
    "phillip-haydon": "@phuu I would like to learn flight.js but there's no real doco, which is why I suggested using the Wiki, atleast then its easy for the community to contribute to the doco so it takes the burden off you.\nMaybe 60% of the doco for Nancy framework isn't written by us, its written by the community. Any errors always corrected by the community.\nWorking examples can be linked to jsfiddle or similar. \n. All this needs is for @phuu to open the Wiki so we can contribute to it.\nBut this has taken too long I've lost interest in helping now. Will move on to another framework. I'll leave this open for you but I'm unsubscribing.\n. @phuu I would like to learn flight.js but there's no real doco, which is why I suggested using the Wiki, atleast then its easy for the community to contribute to the doco so it takes the burden off you.\nMaybe 60% of the doco for Nancy framework isn't written by us, its written by the community. Any errors always corrected by the community.\nWorking examples can be linked to jsfiddle or similar. \n. All this needs is for @phuu to open the Wiki so we can contribute to it.\nBut this has taken too long I've lost interest in helping now. Will move on to another framework. I'll leave this open for you but I'm unsubscribing.\n. ",
    "taveras": "Have to agree with @phillip-haydon and @phuu, when I first read about flight it sounds like a delight. The README and the API Documentation are great resources. But a web page with more literature and examples would be awesome!\n. Have to agree with @phillip-haydon and @phuu, when I first read about flight it sounds like a delight. The README and the API Documentation are great resources. But a web page with more literature and examples would be awesome!\n. ",
    "jkup": "I'd love to help on adding documentation / building out a modern website. Should we have a different repo for this?\n. Added a PR on the flight site repo: https://github.com/flightjs/flightjs.github.io/pull/15\n. I'd love to help on adding documentation / building out a modern website. Should we have a different repo for this?\n. Added a PR on the flight site repo: https://github.com/flightjs/flightjs.github.io/pull/15\n. ",
    "JungMinu": "Thank you!\n. I am really interested as well.\n. @phuu Would you please invite me to FlightJS organization(https://github.com/flightjs) so that I can contribute more examples apps for FlightJS? \n. Thank you!\n. I am really interested as well.\n. @phuu Would you please invite me to FlightJS organization(https://github.com/flightjs) so that I can contribute more examples apps for FlightJS? \n. ",
    "jvennix-rmn": "Ah! I was looking for a gh-pages branch, I forgot the site is on a different repo. Thanks @jkup !\n. Ah! I was looking for a gh-pages branch, I forgot the site is on a different repo. Thanks @jkup !\n. ",
    "sperovic": "It would sound promising, but all I see is that you guys are ditching Flight internally? :(\n. It would sound promising, but all I see is that you guys are ditching Flight internally? :(\n. ",
    "perajovic": "I'm maybe interested.\n. Hello, what is a status regarding off flightjs? Is it abandoned or not?\n. I'm maybe interested.\n. Hello, what is a status regarding off flightjs? Is it abandoned or not?\n. ",
    "paulswartz": "I'm interested as well.\n. I'm interested as well.\n. ",
    "bzmw": "My team is very small, but we would love to contribute in some small ways.\n. My team is very small, but we would love to contribute in some small ways.\n. ",
    "joelbyler": "@angus-c I've made a second commit to move the note down, does this work for you now? I can squash the commits if you want too.  Let me know, and thanks for the feedback! \n. @angus-c squashed down to a single commit.  I'd be glad to help out with other things if you need some help with some of these issues.  Feel free to reach out to me! :)\n. @angus-c I've made a second commit to move the note down, does this work for you now? I can squash the commits if you want too.  Let me know, and thanks for the feedback! \n. @angus-c squashed down to a single commit.  I'd be glad to help out with other things if you need some help with some of these issues.  Feel free to reach out to me! :)\n. ",
    "gustavopinto": "Hi @angus-c, do you have any comments?\n. Hi @angus-c, do you have any comments?\n. ",
    "mmoss": "The software history is available in it's entirety through both the Releases and the Commit log.. The software history is available in it's entirety through both the Releases and the Commit log.. ",
    "alunny": "Nope, writing to a non-writable property does not throw an error. It just fails silently.\n``` js\n\nfoo = {}\n{}\nfoo.bar = 'hello'\n'hello'\nObject.defineProperty(foo, 'bar', { writable: false })\n{ bar: 'hello' }\nfoo.bar = 'goodbye'\n'goodbye'\nfoo.bar\n'hello'\n```\n. It looks like this behavior's been the same since the first open source commit, at least.\n. (long delayed response).\nweird it should throw in strict mode\n\nYeah my mistake, I was running the node repl in sloppy mode.\nThat said, flight cannot control whether the code that uses it runs in strict mode or sloppy mode. So I think the problem is still valid.. Nope, writing to a non-writable property does not throw an error. It just fails silently.\n``` js\n\nfoo = {}\n{}\nfoo.bar = 'hello'\n'hello'\nObject.defineProperty(foo, 'bar', { writable: false })\n{ bar: 'hello' }\nfoo.bar = 'goodbye'\n'goodbye'\nfoo.bar\n'hello'\n```\n. It looks like this behavior's been the same since the first open source commit, at least.\n. (long delayed response).\nweird it should throw in strict mode\n\nYeah my mistake, I was running the node repl in sloppy mode.\nThat said, flight cannot control whether the code that uses it runs in strict mode or sloppy mode. So I think the problem is still valid.. ",
    "elgalu": "Cool, thanks for clarifying plus great post link\n. Cool, thanks for clarifying plus great post link\n. "
}