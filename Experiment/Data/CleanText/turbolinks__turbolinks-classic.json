{
    "josh": "Looking at chromes default accept header\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nwe probably want to copy that.\n. @dhh ha, yeah, well we actually need to handle that case and do a hard fallback redirect.\n. > detect a tag extension in the href.\n:-1:\n. Redirecting on a 406 will work all the time. Checking the extension just sets up a false exception that this thing will magically handle all the no turbo cases.\n. @dhh also, you'll have to deal with everyone submitting pulls for \".XXX should always be skipped\"\n. an extension blacklist just seems like a bad idea\n. It's best to do this lazily on the first link click.\n. You can't do it in popstate.\nShould happen in visit, right before reflectNewUrl. setInitialState.\nhttps://github.com/rails/turbolinks/blob/master/lib/assets/javascripts/turbolinks.js.coffee#L3\n. Browsers already cache html for us.\nWe really want to cache the dom fragment itself.\n. Good direction :+1:\n. Heres how I handled this in pjax - https://github.com/defunkt/jquery-pjax/blob/master/jquery.pjax.js#L619-670\n. @davydotcom I do really like this history.length idea for position tracking. wana patch pjax w/ this approach :P\n. This should actually be covered by the dom caching code. pushState saves scroll position itself.\n. Those should probably be off document instead.\nAny listeners on body or any other element should be rebound on the page update event.\n. :-1:\n. > Why not? It seems like we should try to catch as many of these snags as possible.\nThe is a slippery slope blacklist again.\nShould we next add your pet [data-behavior]? what about all the twitter bootstrap conventions? data-toggle, data-dismiss, data-alert, ... How about for me anything that has a class name that starts with a js- class name.\nJS event handlers that can't act independently of each other is poor design.\nCan we just expose a turobolinks.ignoreLink hook? Also, maybe not for the standard rails.js stuff, but for rails-behaviors, this is solved by ensuring turbolink calls event.stopImmediatePropagation.\n. $('[data-behavior]').data('no-turbolink', true) isn't a good idea. That only applies that to the current page, not any new data-behaviors added in a pjax/turbolink update.\nalso should note that $.fn.data will never write out attrs, $().data('no-turbolink') != $().attr('data-no-turbolink')\n. Another thing we should do is always try to run our click handler last. Basically allow any other shit link data-behaviors, data-remote, check if the event was preventDefault and if so, skip turobolinks. Try to act more like we are replacing the default link behavior.\n. Still from last pull, scroll position is remembered by pushState and attempted to be restored at popstate.\n. I need to pull this down again and check it out. A bunch of debug code got pulled in.\n. Already works. b28a46c826435e7b600d8f244f8530d88620842e\n. :+1:\n. I don't know if mutating the event listener stack mid-flight is a good idea. Another option is to use a setTimeout and run it in the next tick after the click.\nAlso remember that events bubble up all the way to window.\n. > I'm not entirely sure this is the best approach since it brings \"hard to maintain\" code to Turbolinks\nThat'd be my concern too. Although, I'm not maintaining this code :wink: \nJust noting that the same thing exists in pjax, except we can rely on $.fn.serializeArray.\nhttps://github.com/defunkt/jquery-pjax/blob/master/jquery.pjax.js#L132\n\nIn that case I don't think Turbolinks should re-submit the form without AJAX as it does with links (maybe we could simply fire an event?).\n\nYeah, theres no great sane default. You just gotta implement a custom error handler I think. pjax just fires an event. Not ideal.\n. I don't think it should be global.\n. Sure this is going to work with <body class=\"home-page\" attr changes?\n. Should work okay for back, but not for snapping forward.\n. Really want to keep this delayed e64765eb4261ec6f9122d42940056b4d9d8b9028\n. > It is essentially delayed now\nIts not delay. It happens on page load. Really should touch replaceState until we have too.\n. ",
    "dhh": "Josh, we don't want / because we're acting on the response and doing transformations. So if we get a gif back, we're fucked ;).\n@davydotcom, content-type is not needed, only accept. Content-type is for the response.\n. Not if we express state that we don't accept those replies? Then we should be getting a 406 back. You should be using data-no-turbolink on stuff linking straight to assets, no?\nOn Sep 26, 2012, at 2:37 PM, Joshua Peek wrote:\n\n@dhh ha, yeah, well we actually need to handle that case and do a hard fallback redirect.\n\u2014\nReply to this email directly or view it on GitHub.\n\n\nDavid Heinemeier Hansson\n. Feel free to compile the coffee by hand into JS and put that into your project.\nOn Sep 26, 2012, at 2:38 PM, David Estes wrote:\n\n@dhh, yea noticed that i left the / out for the exact reason mentioned above. Is this going to only be available in coffee form on final version? Would like to not require coffee on projects that might need this.\n\u2014\nReply to this email directly or view it on GitHub.\n\n\nDavid Heinemeier Hansson\n. I like that idea a lot! Please make it so.\nOn Sep 26, 2012, at 2:41 PM, David Estes wrote:\n\n@dhh, thats exactly what I did, works like a charm now thanks. Could we perhaps make it smarter and detect a tag extension in the href. if it does not use a acceptable extension, fall back so we dont need to even use data-no-turbolink\n\u2014\nReply to this email directly or view it on GitHub.\n\n\nDavid Heinemeier Hansson\n. JP, why not?\nActually, we should probably do both. \nOn Sep 26, 2012, at 2:41 PM, Joshua Peek wrote:\n\ndetect a tag extension in the href.\n\u2014\nReply to this email directly or view it on GitHub.\n\n\nDavid Heinemeier Hansson\n. I think both makes sense, though. Redirect on 406, if the link slips through, but don't require double links on the default /image.gif case?\nOn Sep 26, 2012, at 2:44 PM, Joshua Peek wrote:\n\nRedirecting on a 406 will work all the time. Checking the extension just sets up a false exception that this thing will magically handle all the no turbo cases.\n\u2014\nReply to this email directly or view it on GitHub.\n\n\nDavid Heinemeier Hansson\n. I think the rule is pretty simple, it's /.([a-z]+)$/ and checking whether that's .html.\nIt's not a black list, it's \"all extensions are banned except html\".\nOn Sep 26, 2012, at 2:49 PM, Joshua Peek wrote:\n\n@dhh also, you'll have to deal with everyone submitting pulls for \".XXX should always be skipped\"\n\u2014\nReply to this email directly or view it on GitHub.\n\n\nDavid Heinemeier Hansson\n. @sstephenson fixed this in 1a43aee9f759ce614a9d1db3b57a8c77e23f11c5\n. When using innerHTML like that, you're technically ending up with \u2026. That seems like it might be fragile.\nOn Sep 26, 2012, at 3:59 PM, David Estes wrote:\n\nmy solution was a 1 liner if your going for brief.\n\u2014\nReply to this email directly or view it on GitHub.\n\n\nDavid Heinemeier Hansson\n. Implemented in cdc3c3f3f8c7f5d56131d3f3357634e05fb10533 -- thanks!\n. Great, fixed in 77474d6a1810af208bb7b1b81730ee8687ac0f22!\n. It's packaged as a Rails gem to get all version control and dependency advantages of bundler. And since that's the case, it's imo fine to rely on coffee-script since that's part of the default stack. I'm happy with some integration vinegar for people opting out of those defaults.\nThe code is MIT, so if you want to maintain a JS-compiled, gem-free version, feel free.\nOn Sep 26, 2012, at 6:34 PM, James Coglan wrote:\n\nTo reduce users' dependency on the developer's toolchain, it helps to publish JavaScript functionality as JavaScipt, rather than as CoffeeScript. If and when CoffeeScript supports source maps, by all means bundle the source and the map with the compiled JS.\nI would also advise publishing this as a single JS file, since that's all it really is it doesn't make a lot of sense to publish it as a Ruby gem. Still, I've changed things just enough so that the gem contains JS rather than CS.\nYou can merge this Pull Request by running:\ngit pull https://github.com/jcoglan/turbolinks publish-js\nOr view, comment on, or merge it at:\nhttps://github.com/rails/turbolinks/pull/11\nCommit Summary\n\u2022 Compile the CoffeeScript source to JavaScript before packaging the gem.\nFile Changes\n\u2022 A .gitignore (4)\n  \u2022 A Gemfile (3)\n  \u2022 A lib/assets/javascripts/turbolinks.coffee (0)\n  \u2022 M test/config.ru (1)\n  \u2022 M turbolinks.gemspec (6)\nPatch Links\n\u2022 https://github.com/rails/turbolinks/pull/11.patch\n  \u2022 https://github.com/rails/turbolinks/pull/11.diff\n\u2014\nReply to this email directly or view it on GitHub.\n\n\nDavid Heinemeier Hansson\n. Light-weight refers to the weight of the JavaScript itself. That it doesn't have any external dependencies and that it's not much code, so it's light enough to run even on low-powered mobile devices. It's not a statement about whether its wrapped in a gem or not.\nI'd be happy to drop the gem-wrapping for this as soon as Rails gains the powers to have bundle-style vanilla-JS dependencies. Maybe through bower or something like that. But until that happens, this is how it's going to roll. It's not like it's exactly that hard for someone interested in using this outside of Rails to extract the 1 JS file and compile it.\n. I can't replicate this problem. Added test in 2e307a15edb43920f545efe4785f6c17418cc9a1.\n. Why not? It seems like we should try to catch as many of these snags as possible. Since we know that data-remote links are never intended to be followed normally, why wouldn't we opt those out? Especially as this is packaged as a Rails plugin.\nSame goes for #-links.\nOn Sep 27, 2012, at 8:37 AM, Joshua Peek notifications@github.com wrote:\n\n\u2014\nReply to this email directly or view it on GitHub.\n. I think that a Rails plugin should out of the box work with existing in-the-box Rails conventions. So I think data-remote is different from either custom hooks, like data-behavior, or hooks from other packages, like data-dismiss.\n\nHow would ignoreLink be different from $('[data-behavior]').data('no-turbolink', true)?\nOn Sep 27, 2012, at 8:49 AM, Joshua Peek notifications@github.com wrote:\n\nWhy not? It seems like we should try to catch as many of these snags as possible.\nThe is a slippery slope blacklist again.\nShould we next add your pet [data-behavior]? what about all the twitter bootstrap conventions? data-toggle, data-dismiss, data-alert, ... How about for me anything that has a class name that starts with a js- class name.\nJS event handlers that can't act independently of each other is poor design.\nCan we just expose a turobolinks.ignoreLink hook? Also, maybe not for the standard rails.js stuff, but for rails-behaviors, this is solved by ensuring turbolink calls event.stopImmediatePropagation.\n\u2014\nReply to this email directly or view it on GitHub.\n. Aight, let's add a manual hook for alsoIgnoreLink or something of the kind.\n\nBut we should still make sure that the out-of-the-box experience does not require any configuration.\nOn Sep 27, 2012, at 8:55 AM, Joshua Peek notifications@github.com wrote:\n\n$('[data-behavior]').data('no-turbolink', true) isn't a good idea. That only applies that to the current page, not any new data-behaviors added in a pjax/turbolink update.\nalso should note that $.fn.data will never write out attrs, $().data('no-turbolink') != $().attr('data-no-turbolink')\n\u2014\nReply to this email directly or view it on GitHub.\n. +1\n\nOn Sep 27, 2012, at 9:01 AM, Joshua Peek notifications@github.com wrote:\n\nAnother think we should do is always try to run our click handler last. Basically allow any other shit link data-behaviors, data-remote, check if the event was preventDefault and if so, skip turobolinks. Try to act more like we are replacing the default link behavior.\n\u2014\nReply to this email directly or view it on GitHub.\n. It makes the order of inclusion important, but that's probably not too big of a deal. I do like that better than having an explicit data-remote opt-out.\n\nOn Sep 27, 2012, at 9:16 AM, David Estes wrote:\n\n+1 was gonna say check if a clickHandler already exists before adding or just make it last.\n\u2014\nReply to this email directly or view it on GitHub.\n\n\nDavid Heinemeier Hansson\n. Let's go with the put-turbolinks-last approach. Then we don't need this specific opt-out as data-remote will itself cancel the event before it reaches turbolinks.\n. Yes, this is a limitation of turbolinks. You can't fix this problem without cooperation from the server side and much added complexity. Not in the cards at the moment. \n. We might do a helper ala redirect_via_turbolinks_to or something like that. Would just send Turbolinks.visit(url). \n. We need something better that. It doesn't provide any good fallback mechanism at the moment. We need to detect Turbolinks vs not. format.js won't work, because Turbolinks actually requests format.html.\nOn Oct 15, 2013, at 4:27 PM, Seth notifications@github.com wrote:\n\nSo @dhh is the idea that redirect_via_turbolinks_to is supposed to be used with a format.js {} block? I see that it outputs JS. How are you guys handling that @ 37s for Basecamp?\n\u2014\nReply to this email directly or view it on GitHub.\n. CSS is not affected. \n. As of 0.1.5, the scroll position was definitely not being remembered. Did that change in the commits coming after that?\n\nOn Sep 27, 2012, at 8:40 AM, Joshua Peek notifications@github.com wrote:\n\nStill from last pull, scroll position is remembered by pushState and attempted to be restored at popstate.\n\u2014\nReply to this email directly or view it on GitHub.\n. Josh, this doesn't address the caching changes though? Wouldn't we still want those simplifications?\n. I was testing in Safari when I saw it not working in 0.1.5.\n\nOn Sep 27, 2012, at 9:06 AM, David Estes notifications@github.com wrote:\n\nAlso it doesnt work...it works in Chrome automagically but not firefox.\n\u2014\nReply to this email directly or view it on GitHub.\n. Josh, what say ye? Do you have any other tricks for making scrolling work in Safari/Firefox? Otherwise this seems good to me.\n\nOn Sep 27, 2012, at 9:10 AM, David Estes notifications@github.com wrote:\n\n@dhh, Ok so it seems Chrome remembers scroll position but firefox and safari do not.. This pull request plays it safe and does a window.scrollTo() to correct the problem.\n\u2014\nReply to this email directly or view it on GitHub.\n. Hold the horse for a minute. Doing a monster refactor to get the flow back. Done shortly.\n. Committed the refactoring. So please rebase against that.\n. (The bulk of this PR is already part of that, but your lazy initialization is not)\n. Another issue, if you currently click the same link twice, it's added to the pageCache twice in a row. Which isn't intuitive. Browser caches will reject adding the same page twice in a row. We should fix that.\n. Finally, we should cap the cache. I think it would leak memory like a sieve if it was just left unbounded like now.\n. There's a page:change event being thrown when turbo links changes the page. You can use that to refire any hooks you might need.\n\nOn Sep 27, 2012, at 8:55 AM, Pierre Olivier Martel notifications@github.com wrote:\n\nThis is not really a Turbolinks issue but a problem I guess many will run into using the Facebook JS SDK. The SDK is initiliazed inside the HTML body like this: https://developers.facebook.com/docs/reference/javascript/\nWhen the SDK initializes, it creates a fb-root iframe tag to communicate with the FB API. When Turbolinks reloads the page, the fb-root tag vanishes and there doesn't seem to be a way trigger the re-initilialization of the Facebook sdk.\nI'm trying to figure out the best way to handle this. Can an element of the body remain in between two requests? How can inline javascript be executed? (Let me know I should repost to Stack Overflow instead)\n\u2014\nReply to this email directly or view it on GitHub.\n. Yeah, I could see something like that. We've thought about page:changing and page:changed.\n\nOn Sep 27, 2012, at 9:25 AM, Pierre Olivier Martel wrote:\n\nWouldn't it also be helpful to have a before-change event like there is in pjax? This way I could put the FB tags in a variable and reinject them when the page:change event is triggered. Not yet sure this is the best way to proceed it would add some flexibility.\n\u2014\nReply to this email directly or view it on GitHub.\n\n\nDavid Heinemeier Hansson\n. pjax has a special, custom GA hook for this. I'm not overly keen on adding that to the main bundle.\nOn Sep 27, 2012, at 9:18 AM, David Estes wrote:\n\nJust a thought, how does google analytics behave to this? Does the analytics snippet need changed in order to work?\nOr do we handle this another way?\n\u2014\nReply to this email directly or view it on GitHub.\n\n\nDavid Heinemeier Hansson\n. You can just listen for that event and document.addEventListener('page:change', function() {}).\nOn Sep 27, 2012, at 2:24 PM, Fabian Becker wrote:\n\nThe same question applies to other analytics tools like Piwik. Is there any way to hookup a function callback that gets called on page:change?\n\u2014\nReply to this email directly or view it on GitHub.\n\n\nDavid Heinemeier Hansson\n. I'm not actually sure that dom:loaded is even going fire the jquery document.ready, but yes, I actually do think it's worth considering. Originally we talked about not being sure what compatibility issues this might cause, but I think we should examine the case.\nOn Sep 27, 2012, at 2:50 PM, David Estes wrote:\n\n@dhh, hate to sound dumb but can we not fire a dom:loaded event on page:change so we can just monitor document.ready ?\n\u2014\nReply to this email directly or view it on GitHub.\n\n\nDavid Heinemeier Hansson\n. I like the sound of that. That's what a normal link would do, no?\nOn Sep 27, 2012, at 10:16 AM, David Estes wrote:\n\nCould be fixed by setting referer on fetchReplacement\n\u2014\nReply to this email directly or view it on GitHub.\n\n\nDavid Heinemeier Hansson\n. Wonder is that's too broad. Maybe you patch redirect_to :back?\nOn Sep 27, 2012, at 22:35, David Estes notifications@github.com wrote:\n\nRecommend using alias_chain_method for Rack::Request referer method...something like\ndef referer_with_turbolinks\n  @env['X_PUSH_STATE_REFERER'] || referer_without_turbolinks\nend\nalias_chain_method :referer,:turbolinks\nIf we are ok with that approach, ill implement later.\n\u2014\nReply to this email directly or view it on GitHub.\n. Fixed in 46818ee84e0e4085a9ca66685039e993380b5d52\n. Rails digests use the numbers as part of the file name, but yeah, I think we should modify it none the less to look before parameters.\n\nOn Sep 27, 2012, at 10:17 AM, David Estes wrote:\n\nIf linked to digested image files (like in a photo gallery), the filter for .html extension does not work because it ends in something like ?dafdfeadfe , need to change match string to look before ?\n\u2014\nReply to this email directly or view it on GitHub.\n\n\nDavid Heinemeier Hansson\n. @davydotcom do you want to take a stab at making sure turbolinks run last?\n. Fixed in 46818ee84e0e4085a9ca66685039e993380b5d52\n. Good. Can you add a test link to the test/index.html to verify these states?\n. I think we actually need a gif link to test this properly. Because html was already going to flow through. So add a dummy gif to test/ and link against that.\n. Replicated it.\n. Wups. My bad. Fixed.\n. I'm sure that's because the drop-down menu is relying on a document.ready initializer. That won't automatically work.\nOn Sep 27, 2012, at 8:27 PM, Chris Grant wrote:\n\nAlso, after a turbolink has been followed, the drop-down menu ceases to operate -- on any page. I have to perform a full refresh of the page to have that function again. Weird stuff!\n\u2014\nReply to this email directly or view it on GitHub.\n\n\nDavid Heinemeier Hansson\n. Might be better to listen to page:load instead of page:change so you don't apply DOM manipulations twice from stuff in the cache.\nOn Sep 27, 2012, at 8:46 PM, David Estes notifications@github.com wrote:\n\n@interhive may i suggest this fix if using jQuery... add this to your\n\n document.addEventListener('page:change',jQuery.ready);\n\n\u2014\nReply to this email directly or view it on GitHub.\n. If you mutate your DOM and only expect that mutation to happen once, you still need to treat them differently.\n\nOn Sep 27, 2012, at 8:50 PM, David Estes notifications@github.com wrote:\n\n@dhh cache uses a cloneNode(true) per @sstephenson and resets events. page:change has to be checked to preserve bindings correct?\n\u2014\nReply to this email directly or view it on GitHub.\n. Fixed in 46818ee84e0e4085a9ca66685039e993380b5d52\n. Let's make it do just a DOM refresh. We're going to bake in asset refreshes directly anyway.\n. We're working on an automated solution for this.\n\nOn Sep 28, 2012, at 11:56 AM, Luiz Eduardo Kowalski wrote:\n\nyou can use data-no-turbolink on your delete links, like this\nArticles\n\u2014\nReply to this email directly or view it on GitHub.\n\n\nDavid Heinemeier Hansson\n. Fixed in 46818ee84e0e4085a9ca66685039e993380b5d52\n. Did we clarify whether ie9 supports pushState?\nOn Sep 28, 2012, at 13:20, David Estes notifications@github.com wrote:\n\nIE 9 throws exception for invalid format 'text/html' This happens on line 105 where it tests to see if the DOMParser supports text/html. #39\nYou can merge this Pull Request by running:\ngit pull https://github.com/davydotcom/turbolinks patch-5\nOr view, comment on, or merge it at:\nhttps://github.com/rails/turbolinks/pull/43\nCommit Summary\nFixes IE 9 bug\nFile Changes\nM lib/assets/javascripts/turbolinks.js.coffee (3)\nPatch Links\nhttps://github.com/rails/turbolinks/pull/43.patch\nhttps://github.com/rails/turbolinks/pull/43.diff\n\u2014\nReply to this email directly or view it on GitHub.\n. Lets go lazy then. \n\nOn Sep 28, 2012, at 21:29, David Estes notifications@github.com wrote:\n\nIt does not, but that method executes at startup to determine its \"replacement\" method for the current browser... This fix works but I would rather this execution be lazy \nSent from my iPhone \nOn Sep 28, 2012, at 9:34 PM, David Heinemeier Hansson notifications@github.com wrote: \n\nDid we clarify whether ie9 supports pushState? \nOn Sep 28, 2012, at 13:20, David Estes notifications@github.com wrote: \n\nIE 9 throws exception for invalid format 'text/html' This happens on line 105 where it tests to see if the DOMParser supports text/html. #39 \nYou can merge this Pull Request by running: \ngit pull https://github.com/davydotcom/turbolinks patch-5 \nOr view, comment on, or merge it at: \nhttps://github.com/rails/turbolinks/pull/43 \nCommit Summary \nFixes IE 9 bug \nFile Changes \nM lib/assets/javascripts/turbolinks.js.coffee (3) \nPatch Links \nhttps://github.com/rails/turbolinks/pull/43.patch \nhttps://github.com/rails/turbolinks/pull/43.diff \n\u2014 \nReply to this email directly or view it on GitHub. \n\u2014 \nReply to this email directly or view it on GitHub. \n\n\u2014\nReply to this email directly or view it on GitHub.\n. It doesn't matter that the body has been replaced when you stop your spinner. If there's a spinner there from earlier in the cache, the turn off will work. If there's not, there just won't be a spinner to turn off. Either way you're good.\n\n\nI'm not sure I understand what the js namespace issue is. You can always look at document.location.href to tell where you are. If you have some app specific issue that requires knowing for sure the action and controller names, you could send those in additional headers from your controller.\n. I'll apply a patch for that. \n. Instead of doing the refactor myself, I've dotted the patch with what I would have done. Better for passing on the style than just doing it myself ;)\n. Also, we need to make the custom headers both optional and document them in the README. People should be able to pluck turbolinks.js.coffee and use in their own framework with or without the extra headers.\n. Perfect.\nOn Oct 2, 2012, at 3:13 PM, David Estes wrote:\n\nThe custom headers are optional in that the turbolinks js is not dependent on them, it gracefully falls back to standard behavior\n\u2014\nReply to this email directly or view it on GitHub.\n. Something like:\n\n``\nmodule X\n  extend ActiveSupport::Concern\nincluded do\n    alias_method_chain x\n  end\ndef _compute_redirect_to_location_with_turbolinks\n  end\nend\n```\nOn Oct 2, 2012, at 3:40 PM, David Estes wrote:\n\nOk not sure how to use ActiveSupportConcern to alias _compute_redirect_to_location_with_turbolinks(options)..Any tips would be appreciated.\n\u2014\nReply to this email directly or view it on GitHub.\n```\n. Still missing the reflectRedirectedUrl fix.\n\nOn Oct 2, 2012, at 4:10 PM, David Estes wrote:\n\nChanges requested by @dhh have been made\n\u2014\nReply to this email directly or view it on GitHub.\n. You unlocked a power-up for surviving the code review gauntlet!\n. Opted to just not do turbolinks on legacy browsers. Upgrade cycle is fast enough that we don't need this baggage.\n. Not sure I'm all too keen on adding a bunch of backwards compatibility code to an iOS version that's going to be mothballed soon. I'd rather just have these versions opt out of using turbolinks.\n. Can you find out how old? If it's for versions before 4, I don't care about that either, and they should just not get turbolinks.\n\nOn Oct 2, 2012, at 2:52 PM, David Estes wrote:\n\nThat is a possibility as well, it does add complications to the code set. However, it was not solely an iOS5 issue, some older versions of safari also suffer from the issue.\n\u2014\nReply to this email directly or view it on GitHub.\n. Fixed in 46818ee84e0e4085a9ca66685039e993380b5d52\n. I'd like something more generic where you can add this to any container and whatever is in that container is then disabled. So add it to a div and all the ahrefs in there will be disabled.\n\nOn Sep 30, 2012, at 7:13 AM, David Estes notifications@github.com wrote:\n\nGood call +1\n\u2014\nReply to this email directly or view it on GitHub.\n. Yes, that'll work as well.\n\nOn Oct 2, 2012, at 5:36 PM, David Estes wrote:\n\ncould this be simplified to state that if any script or link tag does not exactly match the first page load head, do a full page reload...Including if an extra asset is defined\n\u2014\nReply to this email directly or view it on GitHub.\n. Fixed in #67.\n. @sstephenson, can you chime in on this?\n. I'm not sure it makes sense since there's no fetching phase that takes any time. It's yanked immediately from cache.\n\nWhat are you trying to use it for?\n. Are you sure you still need to do that if we solve #62?\n. Sorry, #61.\n. Pjax is a good fit for when you don't want to use the full page. It doesn't fit into my vision of what turbolinks should be, though.\nOn Oct 2, 2012, at 10:07 PM, Richard Taylor wrote:\n\nI've just hacked together a quick implementation of specifying a configurable cache element, so you can do something like this:\nTurbolinks.setup({cache_id: 'main_container'});\nFor instances where you don't want to refresh the entire body. I have this requirement on two projects I'm working on so thought it might be a common case. Thoughts?\n\u2014\nReply to this email directly or view it on GitHub.\n. Although do share the specifics of your requirement. Curious to hear when full-page doesn't fit.\n. Gotcha. Pjax is probably a better fit for that, then.\n. Let's start with having this be an external concern. I think most people using turbolinks would have ajax forms anyway, so it's not as important of a concern as the links themselves. But do start a separate turboforms project that depends on turbolinks. If you have any specific recommendations on how the turbolinks api could be made better for something like turboforms, let us know.\n. The point with ajax forms is often to trigger custom JS on their submission, though. Hide this, show that. Those choices can't be automated.\n. Love to have extensions to this, but at this time I'm not thinking it's a fit for core.\n. You can hook that in yourself by listening to the events. It doesn't belong in the package itself, though.\n. Fixed in #67\n. You are a machine! Great work on all of this.\n. Do you know whether this is actually a performance issue? I'd rather not take this unless there's something to be gained.\n. Aight. Just one note on naming, then we can apply.\n\nOn Oct 3, 2012, at 2:27 PM, David Estes wrote:\n\nIf you look at createDocument it actually does a \"test parse\" every time createDocument is called to see if DOMParser works. So there is definitely some overhead in determining which parser method is best suited for the browser you are using. While it may not be a ton of overhead, and I don't have benchmarked numbers at the moment. It could be an issue. The original method replaced itself at load with a do -> section of code.\n\u2014\nReply to this email directly or view it on GitHub.\n. Can you show the HTML that's being used on the first load and the second load?\n. Please do patch the README to account for this.\n\nOn Oct 3, 2012, at 5:59 PM, Richard Taylor wrote:\n\nGood point! Maybe its just a documentation job then?\n\u2014\nReply to this email directly or view it on GitHub.\n. I don't think that would catch browsers like iOS5 that supports pushState but not window.history.state.\n. Yeah, I generally can't be bothered. If you need to rely on certain version numbers, use the published gems.\n. How is the datepicker currently initialized? Using jQuery.ready?\n. What have you needed this for?\n. Okay. I don't think that's a good fit for the core feature set at this time. Fine extension to have in our own app, though.\n\nOn Oct 5, 2012, at 4:35 PM, Fran\u00e7ois KLINGLER wrote:\n\nI don't know how to explain it simply, so I'll explain with the context :\nOn a SaaS project I can manage all the brands when I'm superadmin, so I made a select to select the brand I'm currently working on. The managed brand is not a param in the route, since the brand managers can only work on their brand.\nThe current brand_id is just stored in session when you are superadmin. So the select only calls an action in ajax which change the current brand, and then reloads the page.\n\u2014\nReply to this email directly or view it on GitHub.\n. Having it as a separate file sounds fine. \n\nOn Oct 10, 2012, at 1:46, David Estes notifications@github.com wrote:\n\nMan the more I look at jquery.turbolinks, the more I think this is awesome. @dhh, would potentially adding this as another asset in the gem be a good idea? Something like add this to your manifest for jquery support. etc.\n\u2014\nReply to this email directly or view it on GitHub.\n. I have no problem using a cookie to deal with this if a regular header won't do. Manually applying data-no-turbolink to body on POST is a no go for me.\n\nOn Oct 18, 2012, at 5:07 AM, Matthieu Barthel notifications@github.com wrote:\n\nYes I guess there is no clean solution for this issue, I let the core team decides what's the best way.\nI didn't find the bug in the webkit issues list: https://bugs.webkit.org \nShall we create one ?\n\u2014\nReply to this email directly or view it on GitHub.\n. This won't get rid of code that's running but is no longer relevant and has been removed from a given script. I don't think that'll do. The same deal with CSS. If you remove declarations, they won't disappear.\n. We can fix the algorithm, but this new approach is not the solution either. If I have something like h1 { color: green } in my css and I remove it, your addition solution won't make that correct update. Same with any JS. We need to reload the page if any of the existing JS or CSS files changed. Also, if we are to dynamically add CSS/JS, we need to consider the proper order. New CSS files might appear before the existing ones or after and that'll affect the execution.\n\nOn Oct 8, 2012, at 1:10 PM, Oliver Morgan notifications@github.com wrote:\n\n@dhh The whole point of turbolinks to refresh the page as little as possible right? At the moment you refresh the page whenever an asset is changed.\nYou do this currently by calculating the intersection between existing assets, and new assets. This algorithm is wrong to begin with, because what if you have a new asset added? The intersection won't tell you whether anything has been added lol. I had this bug on my app, so I re-wrote it like above ^\nMy code only refreshes the page if a script is removed. There is nothing we can do to stop the execution of that javascript on the document instance. So we have to refresh the page to be safe.\nIf a javascript file is added, I use something similar to jQuery's $.getScript() to dynamically add the script to the page. There's no need to refresh!\nStylesheets also can be added & removed dynamically without having to refresh. To be fair I've only tested this on safari and chrome but I suspect if your browser's clever enough to support pushSupport it should handle dynamically adding/removing stylesheets. See: http://jsfiddle.net/E8jw6/\n\u2014\nReply to this email directly or view it on GitHub.\n. We don't have a good use case for this, so let's not bother at this time.\n. Sam, can you confirm if all is well?\n. Until this issue is fixed, we should detect Chrome for iOS as an incompatible browser, and just not activate turbolinks. Could someone make a pull request for that?\n. Yeah, we have custom code to detect and fallback in BCX right now:\n\nruby\nif navigator.userAgent.match /CriOS\\//\n  # Temporary workaround for Turbolinks' incompatibility with Chrome iOS\n  Turbolinks.visit = (url) ->\n    window.location = url\n  bcx.on document, \"click\", \"a\", (event) ->\n    window.location = @href\n    event.preventDefault()\n. @davydotcom Any further thoughts?\n. Looks good to me. Apparently it needs a rebase though.\n. Good deal. Can we get some documentation to go with this?\n. I would like to see more comprehensive testing of turbolinks. If you want to build out a complete suite, that would be awesome. Not a big fan of specs, but whoever does the work gets to choose ;)\nOn Nov 28, 2012, at 5:42 AM, Sasha Koss wrote:\n\n@dhh what do you think about import specs from jquery.turbolinks?\n\u2014\nReply to this email directly or view it on GitHub.\n. I agree. Doesn't seem like it's so cut and dry. Let's keep it separate from now and see how it goes.\n\nBut let's get that COMPATIBILITY readme going.\n. @wycats Either help in the search for solutions or go heckle another git repo.\n. We should only reload on JS and CSS changes IMO. Browsers will unfortunately not pick up dynamically adding the rss link. Most are entirely removing rss support anyway as well. \nOn Oct 19, 2012, at 6:12, Jonathan del Strother notifications@github.com wrote:\n\nHi - I've been using Pjax in a limited scope for a while, but only just started trying out Turbolinks in our app, so forgive me if I'm missing something.\nI'm struggling with the assetsChanged method always returning true for pretty much any two pages on our site, which then results in Turbolinks doing a full page reload. We have a number of oembed  tags in our pages, as well as specialised RSS  for differing areas of the site, and some legacy Facebook  tags like rel=image_src.\nI'm wondering if it would make sense to be able to tell Turbolinks to ignore link tags with certain type or rel attributes (eg \"application/xml+oembed\"). There are obvious problems with that approach - eg the ombed tags would still refer to an old page, but since they're intended for machine consumption only perhaps it doesn't matter. (RSS is a bit trickier... ideally you might replace the old RSS tags in the head with the new ones, though I'm not even sure if browsers would notice the change. Maybe that doesn't matter though, since having an RSS button in your browser chrome seems to be rapidly disappearing.)\nAny thoughts? Or am I doing it wrong?\n\u2014\nReply to this email directly or view it on GitHub.\n. Please do.\n\nOn Oct 19, 2012, at 7:49 AM, Jonathan del Strother notifications@github.com wrote:\n\nIf you like I can try to come up with a patch this weekend for just extracting  and <link rel=stylesheet> tags when building the list of assets?</p>\n<p>\u2014\nReply to this email directly or view it on GitHub.\n. @davydotcom do we still need something like this?\n. I'm not so sure automatically reloading on those cases is worth the hassle. Pages that have per-page RSS links would not be able to use turbolinks, then. They might well rather want turbolinks than correct RSS links.\n. Strict sounds fine to me for starters.\n. No, I closed #105 saying we were doing the work here instead ;)\n. Went with a new explicit strategy in #133.\n. I'd like to see at least one useful case where these are being used as public. Please reopen this when you have a case to look at.\n. Both these have been fixed. Thanks.\n. Try using https://github.com/rails/turbolinks/pull/86. If that doesn't work, you'll need to rework LiveReload to work with the new events or do without.\n. Sounds good to me. Can you test it out and add a section to the README?</p>\n</blockquote>\n<p>On Nov 2, 2012, at 23:11, Ryan Bates notifications@github.com wrote:</p>\n<blockquote>\n<p>It appears Safari 5.1.7 does not support window.history.state which was introduced in commit 185dec1. Since it degrades gracefully I can understand if you don't want to support this version, but I wanted others to be aware of it in case they try to test Turbolinks behavior on this version.</p>\n<p>Perhaps it should state somewhere in the readme which browser versions are supported? This can help when developers are testing and debugging on various browsers.</p>\n<p>\u2014\nReply to this email directly or view it on GitHub.\n. I added a compatibility section to the README. Send pull requests for updates.\n. Please remove the unrelated newWindowLink commit from this pull request.\n. Can you update the pull request to just have that commit? I'll apply then.\n. Instead of having this be a negative, could we change it to a positive? What are the ones we accept?\n. Going with https://github.com/rails/turbolinks/pull/94 instead and just CSS+JS.\n. This pull request includes a bunch of unrelated stuff. Can you clean it up just to be about the target issue and I'll apply?\n. Initialization probably relies on $.ready stuff. Needs to be rewritten to fit with Turbolinks.\n. With 0.5.2, this should be fixed. If not, please reopen.\n. I believe this is already fixed via https://github.com/rails/turbolinks/pull/113 ?\n. No longer an issue post #133.\n. This is still an issue. We need to delay gathering the asset list until the dom has loaded.\n. I don't follow?</p>\n</blockquote>\n<p>Presumably you're only going to explicitly mark a small subset of your js/css with data-turbolinks-track. Not shit like a google analytics tracker.</p>\n<p>On Dec 4, 2012, at 4:29 PM, David Estes wrote:</p>\n<blockquote>\n<p>Be aware, this breaks things with asset removal in the future because dynamic js scripts get added before dom is loaded. </p>\n<p>On Dec 4, 2012, at 10:28 AM, David Heinemeier Hansson notifications@github.com wrote: </p>\n<blockquote>\n<p>This is still an issue. We need to delay gathering the asset list until the dom has loaded. </p>\n<p>\u2014 \nReply to this email directly or view it on GitHub. </p>\n<p>\u2014\nReply to this email directly or view it on GitHub.\n. Yeah, we gave the automatic version enough of a shot. Too many issues. The explicit way is better, clearer, and less prone to error. No server side magic needed either.</p>\n</blockquote>\n</blockquote>\n<p>On Dec 4, 2012, at 4:33 PM, David Estes wrote:</p>\n<blockquote>\n<p>Ah, didn't see that you now have to set the tracking attribute. Thats pretty awesome. Completely resolves the issue. Just saw the email and wanted to make sure we didn't accidentally break that. </p>\n<p>On Dec 4, 2012, at 10:30 AM, David Heinemeier Hansson notifications@github.com wrote: </p>\n<blockquote>\n<p>I don't follow? </p>\n<p>Presumably you're only going to explicitly mark a small subset of your js/css with data-turbolinks-track. Not shit like a google analytics tracker. </p>\n<p>On Dec 4, 2012, at 4:29 PM, David Estes wrote: </p>\n<blockquote>\n<p>Be aware, this breaks things with asset removal in the future because dynamic js scripts get added before dom is loaded. </p>\n<p>On Dec 4, 2012, at 10:28 AM, David Heinemeier Hansson notifications@github.com wrote: </p>\n<blockquote>\n<p>This is still an issue. We need to delay gathering the asset list until the dom has loaded. </p>\n<p>\u2014 \nReply to this email directly or view it on GitHub. </p>\n<p>\u2014 \nReply to this email directly or view it on GitHub. </p>\n</blockquote>\n<p>\u2014 \nReply to this email directly or view it on GitHub. </p>\n</blockquote>\n<p>\u2014\nReply to this email directly or view it on GitHub.\n. Please elaborate. </p>\n</blockquote>\n</blockquote>\n<p>On Nov 27, 2012, at 23:33, fei0456116 notifications@github.com wrote:</p>\n<blockquote>\n<p>turbolinks 0.5.2 does not work with rails 3.2.9</p>\n<p>\u2014\nReply to this email directly or view it on GitHub.\n. Please reopen if you can reproduce.\n. We already have a different event for when the loading happens from history. Otherwise it doesn't make sense to me not to trigger events per page load. \n. Closed in favor of #133\n. I think we are getting too clever with the asset refresh trying to catch everything. </p>\n</blockquote>\n<p>Instead, I propose that we switch to marking the assets that should be tracked. So on app.js and app.css we could either just hardcore a list of those named assets ala Turbolinks.watched_assets or have something like data-turbolinks-watched. </p>\n<p>On Dec 4, 2012, at 2:59, Yasuharu Ozaki notifications@github.com wrote:</p>\n<blockquote>\n<p>I think the problem of #118 is that turbolinks does not work in development environment. Today user can use turbolinks only in production environment.</p>\n<p>In development environment, the turbolinks' problem is extractAsstes detects \"application.js\" is added in the next page.\nBy just sending rails environment to the client, client can handle the envoronment difference well.</p>\n<p>This commit still requires turbolinks to be the last line in the application.js manifest,\nBut I think turbolinks should not use server power as much as possible and should use client power.</p>\n<p>For that reason, I will submit pull-req '=require turbolinks' to be bottom of application.js manifest later.</p>\n<p>This is related #94 #118 #129 and the design is opposite #129.</p>\n<p>I want your thoughts.</p>\n<p>You can merge this Pull Request by running:</p>\n<p>git pull https://github.com/YasuOza/turbolinks ignore_applicationjs\nOr view, comment on, or merge it at:</p>\n<p>https://github.com/rails/turbolinks/pull/132</p>\n<p>Commit Summary</p>\n<p>Ignore application.js in test or development environment\nFile Changes</p>\n<p>M lib/assets/javascripts/turbolinks.js.coffee (8)\nM lib/turbolinks.rb (9)\nPatch Links</p>\n<p>https://github.com/rails/turbolinks/pull/132.patch\nhttps://github.com/rails/turbolinks/pull/132.diff\n\u2014\nReply to this email directly or view it on GitHub.\n. No, I mean that #visit is only NOT used if the named assets change. Otherwise #visit is used all the time.</p>\n</blockquote>\n<p>On Dec 4, 2012, at 10:22 AM, Yasuharu Ozaki wrote:</p>\n<blockquote>\n<p>@dhh So you mean turbolinks tracks named assets and use Turbolinks#visit only when next page's named assets are same as those of current page?</p>\n<p>note.\nThough this pull-req will not be merged, I fixed typo.</p>\n<p>\u2014\nReply to this email directly or view it on GitHub.\n. Do you want to take a stab at that? I say we just go with a data-marker, like assets data-turbolinks-asset-watched and only look for changes on them.</p>\n</blockquote>\n<p>On Dec 4, 2012, at 11:28 AM, Yasuharu Ozaki wrote:</p>\n<blockquote>\n<p>That's OK. I agree with you. </p>\n<p>On Tue, Dec 4, 2012 at 6:56 PM, David Heinemeier Hansson \nnotifications@github.com wrote: </p>\n<blockquote>\n<p>No, I mean that #visit is only NOT used if the named assets change. Otherwise #visit is used all the time. </p>\n<p>On Dec 4, 2012, at 10:22 AM, Yasuharu Ozaki wrote: </p>\n<blockquote>\n<p>@dhh So you mean turbolinks tracks named assets and use Turbolinks#visit only when next page's named assets are same as those of current page? </p>\n<p>note. \nThough this pull-req will not be merged, I fixed typo. </p>\n<p>\u2014 \nReply to this email directly or view it on GitHub. </p>\n</blockquote>\n<p>\u2014 \nReply to this email directly or view it on GitHub.\n\u2014\nReply to this email directly or view it on GitHub.\n. Correct.</p>\n</blockquote>\n</blockquote>\n<p>On Dec 4, 2012, at 11:46 AM, Yasuharu Ozaki wrote:</p>\n<blockquote>\n<p>I meant your suggested idea is currently the best. </p>\n<p>My understands is that track current page's named asstes(like \n\"data-turboliks-asset-watched\") and \nfetch clicked page and reload the page ONLY if named assets was changed. \nIs it right? </p>\n<p>On Tue, Dec 4, 2012 at 7:32 PM, David Heinemeier Hansson \nnotifications@github.com wrote: </p>\n<blockquote>\n<p>Do you want to take a stab at that? I say we just go with a data-marker, \nlike assets data-turbolinks-asset-watched and only look for changes on them. </p>\n<p>On Dec 4, 2012, at 11:28 AM, Yasuharu Ozaki wrote: </p>\n<blockquote>\n<p>That's OK. I agree with you. </p>\n<p>On Tue, Dec 4, 2012 at 6:56 PM, David Heinemeier Hansson \nnotifications@github.com wrote: </p>\n<blockquote>\n<p>No, I mean that #visit is only NOT used if the named assets change. \nOtherwise #visit is used all the time. </p>\n<p>On Dec 4, 2012, at 10:22 AM, Yasuharu Ozaki wrote: </p>\n<blockquote>\n<p>@dhh So you mean turbolinks tracks named assets and use \nTurbolinks#visit only when next page's named assets are same as those of \ncurrent page? </p>\n<p>note. \nThough this pull-req will not be merged, I fixed typo. </p>\n<p>\u2014 \nReply to this email directly or view it on GitHub. </p>\n</blockquote>\n<p>\u2014 \nReply to this email directly or view it on GitHub. \n\u2014 \nReply to this email directly or view it on GitHub. </p>\n</blockquote>\n</blockquote>\n<p>\u2014 \nReply to this email directly or view it on GitHub.\n\u2014\nReply to this email directly or view it on GitHub.\n. Closed in favor of #133\n. Ryan, seems to work well here. What problem are you seeing? This change makes the order of the requires irrelevant.</p>\n</blockquote>\n</blockquote>\n<p>On Dec 4, 2012, at 4:01 PM, Ryan Ahearn wrote:</p>\n<blockquote>\n<p>This still doesn't work in development if you use = javascript_include_tag \"application\", data: {'turbolinks-track' =&gt; ''}\nand don't have</p>\n<p>//= require_self\n//= require turbolinks\nAs the last two requires in application.js. That seems like a lot of setup to have to remember to do to get this configured properly.</p>\n<p>\u2014\nReply to this email directly or view it on GitHub.\n. I currently have this order in my application.css:</p>\n</blockquote>\n<p>```</p>\n<h1>= require_self</h1>\n<h1>= require turbolinks</h1>\n<h1>= require_tree .</h1>\n<p>```</p>\n<p>And it works as expected.\n. Ah, I'm sorry. I misunderstood. Never use config.assets.debug. Seems like we should delay the rememberCurrentTrackingAssets until the DOM is entirely loaded. Want to have a look at that?</p>\n<p>On Dec 4, 2012, at 4:20 PM, Ryan Ahearn wrote:</p>\n<blockquote>\n<p>I'm still seeing the same problem as when I originally opened #118. Using your order of requires with #= require_tree . below #= require turbolinks I end up with</p>\n<p><script data-turbolinks-track=\"\" src=\"/assets/jquery.js?body=1\" type=\"text/javascript\">\n\n\n\n\n\n\n\nin the page source. When rememberCurrentTrackingAssets is called courses.js, navigation.js, and scorecards.js are not yet in the DOM and thus are not added to the trackingAssets array. When Turbolinks loads the next page, it passes the entire page source to assetsChanged and extractedTrackAssets is now different than trackingAssets thus triggering a full page reload.\n\u2014\nReply to this email directly or view it on GitHub.\n. Clever. Yes, indeed that's what we can do. Can you make a pull request for it?\n\nOn Dec 4, 2012, at 5:13 PM, Nick Reed wrote:\n\nSince we're now explicitly declaring which assets to remember and thus don't have to worry about dynamically added scripts, couldn't we just wait to extract the current assets until a link is clicked? Like this?\ncurrentAssets = null\nassetsChanged = (doc) ->\n    currentAssets ||= extractTrackAssets document\n    newAssets = extractTrackAssets doc\n    newAssets.length isnt currentAssets.length or intersection(newAssets, currentAssets).length != currentAssets.length\n\u2014\nReply to this email directly or view it on GitHub.\n. Please do turn this into a pull request. Thanks!\n\nOn Dec 4, 2012, at 8:25 PM, John-David Dalton wrote:\n\nUsing window.eval will deoptimize the produced JS in at least Chrome and IE:\nhttp://jsperf.com/tag-vs-eval-fn-construction#chart=bar\nYou can avoid this by using script injection:\ntry {\n  copy.appendChild(document.createTextNode(script.innerHTML));\n} catch(e) {\n  copy.text = script.innerHTML;\n}\nparent.insertBefore(copy, parent.childNodes[0]);\nYou have most of what's needed already in the code.\n\u2014\nReply to this email directly or view it on GitHub.\n. To be honest, I think the time has run out on such an elaborate email obfuscater. In a post-Gmail world, spam just isn't really an issue, and besides, the harvesters are clever enough to digest stuff like this.\n\nSo my vote would be to move the mail_to obfuscator into a plugin and turn the one in core into a plain-jane version.\nOn Dec 9, 2012, at 2:55 AM, Nick Reed wrote:\n\nThe issue is with the mail_to method's use of document.write. When using the javascript encoding, it simply creates a script element that looks like this:\neval(decodeURIComponent(\"encoded string\"));\nWhich is really going to be:\neval(\"document.write('<a href=\\\"mailto:me@domain.com\\\">My email&lt;\\/a&gt;');\");\nThis works fine if the page is loading, but if you call document.write anytime after the page is loaded, it will overwrite the entire document. So that's what you're seeing. The issue isn't really Turbolinks-specific, as it would behave this way anytime you grab html containing a mail_to :encode => javascript from the server via ajax and insert it into the DOM.\nI checked the PJAX project, and sure enough, there's an open issue for this exact same problem: defunkt/jquery-pjax#178\nI think the only way to really fix this is to change how the mail_to method creates the link. I was able to get it working by changing these lines:\ncase encode\nwhen \"javascript\"\n    string = ''\n    html   = content_tag(\"a\", name || email_address_obfuscated.html_safe, html_options.merge(\"href\" => \"mailto:#{email_address}#{extras}\".html_safe))\n    html   = escape_javascript(html.to_str)\n    \"document.write('#{html}');\".each_byte do |c|\n        string << sprintf(\"%%%x\", c)\n    end\n    \"eval(decodeURIComponent('#{string}'))\".html_safe\nto this:\ncase encode\nwhen \"javascript\"\n  string = ''\n  set_attributes = ''\n  html_options.merge(\"href\" => \"mailto:#{email_address}#{extras}\".html_safe).each_pair do |name,value|\n    set_attributes += \"a.setAttribute('#{name}', '#{value}');\"\n  end\n  create_link = \"var script = document.getElementsByTagName('script');\" +\n                \"script = script[script.length - 1];\" +\n                \"var a = document.createElement('a');\" +\n                \"#{set_attributes}\" + \n                \"a.appendChild(document.createTextNode('#{name || email_address_obfuscated.html_safe}'));\" +\n                \"script.parentNode.insertBefore(a,script);\"\n  create_link.each_byte do |c|\n    string << sprintf(\"%%%x\", c)\n  end\n  \"eval(decodeURIComponent('#{string}'))\".html_safe\nI put the entire method in a gist: https://gist.github.com/4242930. Put it in an initializer and let me know if it fixes the issue for you. If it does, I can submit a pull request to rails for this.\n\u2014\nReply to this email directly or view it on GitHub.\n. Go for it!\n\nOn Dec 9, 2012, at 21:04, Nick Reed notifications@github.com wrote:\n\n@codeblooded Ah, sorry about that. I changed those variable names from what I had been testing with. I'm glad it worked for you.\n@dhh Good idea. Are you going to work on that, or would you like me to?\n\u2014\nReply to this email directly or view it on GitHub.\n. Given that Turbolinks is an on-by-default option, I don't see a problem. Especially given that these markers have no ill effects if you are not using Turbolinks.\n\nBut in this specific case we won't actually need to build any specific Turbolinks markers in there. We are just removing crusty obfuscation code and then we'll add an exception to Turbolinks on ahrefs starting with mailto:\nOn Dec 9, 2012, at 23:26, Aaron Patterson notifications@github.com wrote:\n\nIt concerns me that we have to push changes to Rails specifically to support Turbolinks. Is it now a requirement that Rails helpers emit \"Turbolinks safe\" code?\n\u2014\nReply to this email directly or view it on GitHub.\n. Nick, there shouldn't even be any obfuscation code any there in my opinion. We can extract all this junk into a plugin for backwards compatibility and for people who think it'll do them any good.\n\nOn Dec 9, 2012, at 22:53, Nick Reed notifications@github.com wrote:\n\nWill do. So we're on the same page, do you want me to remove all the encoding from the core method, so it looks something like this?\ndef mail_to(email_address, name = nil, html_options = {})\n  email_address = ERB::Util.html_escape(email_address)\nhtml_options = html_options.stringify_keys\nextras = %w{ cc bcc body subject }.map { |item|\n    option = html_options.delete(item) || next\n      \"#{item}=#{Rack::Utils.escape_path(option)}\"\n  }.compact\n  extras = extras.empty? ? '' : '?' + ERB::Util.html_escape(extras.join('&'))\nemail_address_obfuscated = email_address.to_str\n  email_address_obfuscated.gsub!(/@/, html_options.delete(\"replace_at\")) if html_options.key?(\"replace_at\")\n  email_address_obfuscated.gsub!(/./, html_options.delete(\"replace_dot\")) if html_options.key?(\"replace_dot\")\ncontent_tag \"a\", name || email_address_obfuscated.html_safe, html_options.merge(\"href\" => \"mailto:#{email_address}#{extras}\".html_safe)\nend\n\u2014\nReply to this email directly or view it on GitHub.\n. Turbolinks really doesn't require much if any safety from the Rails' side. Only thing we have needed is to mark app.css/js to be watched so asset reloading will work. Everything else is happening on the Turbolinks side.\n\nBut yes, we should indeed educate people on what it means to have a long-running JS session rather than having everything reset per page view. \nOn Dec 9, 2012, at 23:34, Aaron Patterson notifications@github.com wrote:\n\nShould we be testing that helpers in Rails emit Turbolinks safe code? Do we need to educate people on \"do's and don'ts\" when writing JS with Turbolinks?\n\u2014\nReply to this email directly or view it on GitHub.\n. Perfect. Thanks!\n\nOn Dec 10, 2012, at 3:44, Nick Reed notifications@github.com wrote:\n\n@dhh I was playing it safe, but I agree with you. I'll get started on the extracted gem before submitting a pull request to slim down the core method.  \n\u2014\nReply to this email directly or view it on GitHub.\n. Looking good but let's go with the name actionview-encoded_mail_to. Thanks for working on this!\n\nOn Dec 12, 2012, at 4:47, Nick Reed notifications@github.com wrote:\n\n@dhh How does this look? reednj77/rails_encoded_mail_to\n\u2014\nReply to this email directly or view it on GitHub.\n. I think it's fine under your account.\n\nDid you submit a PR to remove the other mail_to in rails/master?\nOn Dec 15, 2012, at 9:11 PM, Nick Reed wrote:\n\nHappy to do it. Here's the renamed repo: reednj77/actionview-encoded_mail_to\nDo you plan on moving this into rails/actionview-encoded_mail_to or is it fine under my account? It doesn't matter much to me, but I'm going to hold off on publishing the gem until I know where the project is going to be stored.\n\u2014\nReply to this email directly or view it on GitHub.\n. Nice spike, Nick! I don't think we need this right now but it'll be nice to have this PR to pull out of the archives for a road map if we get there.\n\nOn Dec 10, 2012, at 5:51, Nick Reed notifications@github.com wrote:\n\nIf we don't expect the code base to get much larger than it currently is, I don't know if doing something like this is necessary. But it can't hurt to suggest it. What do you all think?\nThis doesn't change any of the current functionality.\nYou can merge this Pull Request by running:\ngit pull https://github.com/reednj77/turbolinks modularization\nOr view, comment on, or merge it at:\nhttps://github.com/rails/turbolinks/pull/138\nCommit Summary\nRefactor into classes\nFile Changes\nM lib/assets/javascripts/turbolinks.js.coffee (212)\nA lib/assets/javascripts/turbolinks/assets.js.coffee (20)\nA lib/assets/javascripts/turbolinks/cache.js.coffee (44)\nA lib/assets/javascripts/turbolinks/cached_page.js.coffee (6)\nA lib/assets/javascripts/turbolinks/click.js.coffee (50)\nA lib/assets/javascripts/turbolinks/document_parser.js.coffee (26)\nA lib/assets/javascripts/turbolinks/event.js.coffee (9)\nA lib/assets/javascripts/turbolinks/page.js.coffee (34)\nA lib/assets/javascripts/turbolinks/state.js.coffee (19)\nA lib/assets/javascripts/turbolinks/turbolinks.js.coffee (47)\nPatch Links\nhttps://github.com/rails/turbolinks/pull/138.patch\nhttps://github.com/rails/turbolinks/pull/138.diff\n\u2014\nReply to this email directly or view it on GitHub.\n. Please reopen if you can find an issue. \n. Yeah, I don't think this is a good idea. The whole point of Turbolinks is to avoid reloading scripts, so trying to optimize for what happens in the body doesn't gel with that. So no thanks on this for now. \n. Need a comment to explain this is just for ie10\n. Please re-open if you can post a reproducible example. Thanks.\n. @davydotcom You're going to take a swing at this?\n. We should put all these adaptions together in a COMPATIBILITY read me file in the root of turbo links. Then we can collect the solutions to all the issues we hit so people can deal with them.\n\nNick, do you want to gather them up?\nOn Jan 11, 2013, at 3:13 PM, hyperrjas notifications@github.com wrote:\n\nThank you, after several hours I was able to solve the problem with a new code for masonry because with $('#page').masonry('reload');\nI get on console:\ncannot call methods on masonry prior to initialization; attempted to call method 'reload'\nSo, the final that is working for me is a new masonry code with:\n$(document).on('page:load', function(){\n   $('#page').waitForImages(function(){\n    finished: function() {\n      var $container;\n      $container = $(\"#page\");\n      $container.imagesLoaded(function() {\n       return $container.masonry({\n       .\n       .\n       //options here\n       });\n     });\n   }, \n   waitForAll: true\n });\n});\nYou can download waitForImages plugin for here:\nhttps://raw.github.com/alexanderdickson/waitForImages/master/dist/jquery.waitforimages.min.js\nThis is waitForImages page:\nhttps://github.com/alexanderdickson/waitForImages\nThank you very much!\n\u2014\nReply to this email directly or view it on GitHub.\n. Let's rename it to browserIsntBuggy and place that check right after the other browserX check.\n. Would be great if someone could look into if there actually is a way to make it work as well, though. But at least this doesn't leave things in a busted state.\n. Lets start with checking null and removing the other patch. \n\nThem drum up a PR of what's needed for real support and we will look at the code. Thanks!\nOn Jan 11, 2013, at 23:37, David Estes notifications@github.com wrote:\n\nOk so did some research, window.history.state is always null for chrome for iOS, I believe we had this issue for some older versions of safari as well at some point. We resolved it by just not supporting browsers that didnt support window.history.state , Unfortunately our check is checking window.history.state != undefined, we need it to check null as well. Or, we can wrap pushState, popState, and replaceState and fix support for this. @dhh , looking for a preference here.\n\u2014\nReply to this email directly or view it on GitHub.\n. I haven't heard a compelling use case yet. We have a way to deal with changing CSS and the crsf token shouldn't just be changing like that. What's the actual case driving this?\n. You can still have per-page meta tags, though, that work with first-hit requests. Doesn't that satisfy Twitter cards etc?\n\nThing is, if you constantly need to reload, then what is turbo links doing for you?\nOn Feb 27, 2013, at 6:24 PM, Nick Reed notifications@github.com wrote:\n\nI think the submitter should defend his idea, but I'll throw this out there:\nThere are plenty of third-party API's that use page-specific meta tags, like Facebook's Open Graph or Twitter Cards (both of which you'd find in the source of this page). I think this would make compatibility easier to achieve.\nOur current method of handling asset changes just falls back to a normal page load if there are any changes. Using this solution would allow assets to change without abandoning the turbolinks session.\n\u2014\nReply to this email directly or view it on GitHub.\n. Looking good but let's get some comments in there for the various tests explaining what they're intended for.\n. I concur with reednj77. Turbolinks can't know this. So it's reasonable to require you to mark those links with the no-turbolinks marker.\n. I think it's easier to make Pjax do what you want than turbolinks in this case. \n\nOn Feb 13, 2013, at 19:37, Kyle Ellman notifications@github.com wrote:\n\nI'm curious if there is a way to not replace the entire body.\nI'm hoping to have an element on the page that stays consistent (and plays media throughout page-changes). This doesn't seem to work, and detaching the div that enables the media playback kills playback permanently, so reattaching the player after page:change wouldn't work (and would have a gap in playback, anyway).\nThe following code works until a page-change.\nclass MediaPlayer\n  constructor: ->\n    @setupInterval = setInterval ( =>\n      if $('#mediaPlayer').length\n        clearInterval @setupInterval\n        @setup()\n    ), 500\nsetup: =>\n    console.log 'setting up...'\n    @player = $('#mediaPlayer')\n    @player.jPlayer\n      ready: =>\n        console.log 'seems to be working...'\n        @player.jPlayer \"setMedia\",\n          m4a: 'http://www.jplayer.org/audio/m4a/Miaow-07-Bubble.m4a'\n          oga: 'http://www.jplayer.org/audio/ogg/Miaow-07-Bubble.ogg'\n        @player.jPlayer 'play'\n      swfPath: '/assets'\n      supplied: 'm4a, oga'\n      solution: 'flash, html'\nApplication.mediaPlayer = new MediaPlayer\nSo, is there any way to make Turbolinks leave part of the page alone, or only change part of it? I know this is possible with Pjax, but the page-change callbacks that Turbolinks offers are invaluable to making the rest of my application work properly.\nAny help would be appreciated.\n\u2014\nReply to this email directly or view it on GitHub.\n. :+1:\n. There's no option to turn it of. You'll have to fork the code and remove it by hand. A\n\nOn Mar 13, 2013, at 6:00, Wojtek Kruszewski notifications@github.com wrote:\n\n\"Readme\" file mentions a \"10-slot client-side cache\". I'd have to understand it better and consider implications for cleaning up after my scripts before using it. For now I'd prefer to just disable it. How can I do it?\n\u2014\nReply to this email directly or view it on GitHub.\n. I don't think this is worth it. With Turbolinks you're only evaluating these files once and then you're reusing the environment. So unlike a normal site where it's important to optimize this eval such that it doesn't happen at every page load, that doesn't matter nearly as much with Turbolinks.\n\nOn Mar 21, 2013, at 6:43 PM, Mario Visic notifications@github.com wrote:\n\nTo gain some extra front end performance it's good to move your script tags to the bottom of the body element of the page (to avoid blocking browser rending very early on). If this is done with turbolinks then each external file gets reparsed each time which can be problematic and very slow.\nI'd like to suggest having a data attribute that will be checked for script tags and if present, those script tags won't get executed on each page load.\nSomething like this:\n<script data-turbolinks-eval=false\nsrc=\"my-external-libraries\">\nLet me know if this is a good idea and i'll send over some code.\n\u2014\nReply to this email directly or view it on GitHub.\n. I could live with data-turbolinks-eval=false if it's a very low impact code change.\n. I'm not quite sure what this is solving? When you start a TL session, you're going to have a CRSF token in your head. Why would that CRSF token change between requests?\n. Yeah, I guess the login/logout part is somewhat reasonable. But don't know if you shouldn't just force the TL session to be terminated in this case. Anyway, I guess I'm OK with this.\n. I would say this is out of scope for Turbolinks itself. Lots of browsers already supply this animation built-in, including Safari for Mac. Github used to have this animation on their site and it was a real hassle when used via Safari, because you\u2019d get both the browser swipe animation and then the app swipe. They did away with their own animation in their latest version.\n\nOn Feb 24, 2014, at 4:45 PM, Jens Balvig notifications@github.com wrote:\n\nPossibly this is a bit out of scope and/or crazy but I am currently working on a plugin for turbolinks recreating the iOS7 style sideways swipe when changing pages and am running into a similar issue.\nWould love to hear if you have any ideas for workarounds or just open my eyes to whether this is a terrible idea in the first place :)\nTo achieve the effect you basically need to have the current page as well as the next page on screen and then animate the two. I was testing out adding to the turbolinks code a way to override the default behavior of changePage() (replacing the entire dom) via a custom event:\nif triggerEvent('page:replace', html: body)\n  document.documentElement.replaceChild body, document.body \nThe plugin would then hook into this event, append the new content to the current content, do a CSS animation, remove the old content, and finally return false thus bypassing the default replaceChild() (simplified code):\n$(document).on 'page:replace', (e) -> \n```\nnewContent = $(e.originalEvent.data.html).find('#content')\noldContent = $('#content')\noldContent.after(newContent)\nnewContent.addClass('transition in')\noldContent.addClass('transition out')\nnewContent.on 'webkitTransitionEnd', ->\n  newContent.removeClass('transition in')\n  oldContent.remove()\nfalse\n```\nThe problem is that since oldContent is a reference to part of document.body which is shared with the cache, it actually removes that div from the cached page too, even though the animation happens after cacheCurrentPage() is run! If you ever have a spare moment I would love to hear your thoughts on this.\n\u2014\nReply to this email directly or view it on GitHub.\n. We do the same, and UIWebViews do support the swipe! At least we found a way to make that work. I haven\u2019t looked at the code myself.\n\nOn Feb 24, 2014, at 6:24 PM, Jens Balvig notifications@github.com wrote:\n\nThank you for the quick reply!\nYeah...the use case for me is a UIWebView - containing most of the UI - within an app. As far as I can tell UIWebViews currently don't support the swipe, thus the jumping through hoops!\nAlso, since everything including the header and tab bar of the app is rendered in HTML I found myself wanting to control when to have the swipe animation (for example popping through a stack of nested pages vs clicking tabs) and what part of the page to animate (ie the tab bar moving sideways to reveal a new tab bar looks a bit strange), which I could do with a custom CSS-based transition but not using the built-in swipes.\nI guess this is what I get for going to such lengths to avoid implementing everything in Objective-C :)\n\u2014\nReply to this email directly or view it on GitHub.\n. Looks OK to me.\n. I'm :+1: on not changing the url until the resource has been successfully loaded. That's more inline with how regular HTTP requests work.\n. Is this still open?\n. I like this idea. It definitely helps with the perceived speed of BCX where we use it via Stacker.\n\nI don't think the DOM manipulation is a problem. When you fetch from cache, you don't run all those hooks again. Just like when we fetch from the back-button cache. It's the same approach. So I don't see any new problems there.\nWe don't offer a way to opt-out of the back-button cache, so don't see why we need a way for this.\nOn Jul 10, 2013, at 2:06 AM, Nick Reed notifications@github.com wrote:\n\nThis is an interesting idea, but I'm not sure how practical it is for all use cases. If your site uses a lot of javascript to add/remove/change DOM elements, the page that gets cached could be vastly different from the one that is being fetched from the server. This would result in a jarring and/or confusing experience for the user.\n\u2014\nReply to this email directly or view it on GitHub.\n. Solving the infinity page issue is a separate concern. Would love to figure that part out as well. But I don't think it should hold us back from pursuing this. We are no worse off with that problem by using the cache on links that match than without.\n\nSo I say we go with it, without a turn-off for now.\nAlso, we should expose the cache size setting so people can change that. We have it set relatively low such that Turbolinks can be used for mobile devices without bloating too much. But I could well see setups where that's not an important concern and you want to go with a larger cache.\nOn Jul 10, 2013, at 3:20 PM, Matt De Leon notifications@github.com wrote:\n\n@dhh I personally haven't run into the DOM manipulation problem yet, but I can see it happening on BCX-like \"infinite pages\" where the page reload could chop off the content the user is viewing. The difference with the back button is that the back button doesn't trigger a page reload.\nI'm not sure of the best way forward. I can continue to test this on my apps, but I'm not sure we'll know what (if anything) bugs developers until they use it.\n\u2014\nReply to this email directly or view it on GitHub.\n. Why isn't that a problem with the back button, Nick?\n\nOn Jul 10, 2013, at 5:18 PM, Nick Reed notifications@github.com wrote:\n\nHere is a very rudimentary example of a potential issue. Say you have a page that when it loads, an element slides from the left side of the page to the right side. With this new feature, if you leave the page and then come back to it, you will see the page load with the element on the right side briefly before it \"jumps\" to the left side and then slides back to the right side.\nI think the better way to gain some speed is to go with @davydotcom's idea of implementing a prefetcher (#229). It would be opt-in and entirely tunable so that developers could get the best performance for their needs, all without the user seeing anything out of the ordinary.\n\u2014\nReply to this email directly or view it on GitHub.\n. Ah, I see what you mean. This hasn't been a problem for us with BCX. I\nthink it's the preferred default behavior to get the speed increase and\nthen just having a way to opt-out. I'd prefer the opt-out to be on the\nlink, though. Like data-turbolinks-no-refresh or something like that, so\nit'll just fetch from the cache and not refresh the page.\n\nOn Wed, Jul 10, 2013 at 5:33 PM, Nick Reed notifications@github.com wrote:\n\nBecause the cached page isn't being immediately replaced by a fetched page.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rails/turbolinks/pull/248#issuecomment-20750642\n.\n. We've been using the \"use the cache for links\" method on BCX with no issues for quite a while now. And we have a very varied set of pages and setups. So far no issues. Again, doesn't mean that there could never be any issues anywhere. Just don't think it's a majority concern. So a documented opt-out for those cases would be good.\n\nAlso, I'd like to make it easy to adjust the cache size as I say with this. On Basecamp, we don't have a limit for the page cache for Stacker because it's designed for the desktop. On mobile you kinda need a limit or you'll get zapped, but it should be easy to increase it.\nOn Jul 10, 2013, at 5:39 PM, Matt De Leon notifications@github.com wrote:\n\nNick, it's clear where the problem might occur, but whether the problem \nexists in reality and to what extent it's an issue is unknown. The \"element \njump\" example is speculative \nThis is a zero configuration win for developers in what may be the vast \nmajority of use cases. Just try it out on an app. Prefetching seems obscure \nand requires configuration. \nOn Jul 10, 2013 11:21 AM, \"Nick Reed\" notifications@github.com wrote: \n\nHere is a very rudimentary example of a potential issue. Say you have a \npage that when it loads, an element slides from the left side of the page \nto the right side. With this new feature, if you leave the page and then \ncome back to it, you will see the page load with the element on the right \nside briefly before it \"jumps\" to the left side and then slides back to the \nright side. \nI think the better way to gain some speed is to go with @davydotcomhttps://github.com/davydotcom's \nidea of implementing a prefetcher (#229https://github.com/rails/turbolinks/issues/229). \nIt would be opt-in and entirely tunable so that developers could get the \nbest performance for their needs, all without the user seeing anything out \nof the ordinary. \n\u2014 \nReply to this email directly or view it on GitHubhttps://github.com/rails/turbolinks/pull/248#issuecomment-20749523 \n. \n\u2014\nReply to this email directly or view it on GitHub.\n. Matt, what we're trying to offer is an opt-out that gives us back \"how things work right now\". That is, don't show the cache, wait for the fetched version.\n\n\nI could be talked into a custom meta tag saying \"never show a cached version of this page\" that turbo links would pick up. Didn't like having it as part of body/div.\nOn Jul 10, 2013, at 6:00 PM, Matt De Leon notifications@github.com wrote:\n\nDavid I think with turbolinks we want the opposite, an opt out to display \nthe cache, not to prevent reload. Otherwise the page may never get \nreloaded. With stacker a sheet is kept from reloading only if it is stacked \nbeneath and has the no reload option. \nI would also suggest any config be in the page itself. That way we can \navoid the mental overhead of adding a config for each link to a particular \npage. Plus the config wouldn't differ link to link \nThis this is all a bit speculative and I might recommend we see the problem \nin action before solving it \nOn Jul 10, 2013 11:48 AM, \"David Heinemeier Hansson\" < \nnotifications@github.com> wrote: \n\nAh, I see what you mean. This hasn't been a problem for us with BCX. I \nthink it's the preferred default behavior to get the speed increase and \nthen just having a way to opt-out. I'd prefer the opt-out to be on the \nlink, though. Like data-turbolinks-no-refresh or something like that, so \nit'll just fetch from the cache and not refresh the page. \nOn Wed, Jul 10, 2013 at 5:33 PM, Nick Reed notifications@github.com \nwrote: \n\nBecause the cached page isn't being immediately replaced by a fetched \npage. \n\u2014 \nReply to this email directly or view it on GitHub< \nhttps://github.com/rails/turbolinks/pull/248#issuecomment-20750642> \n. \n\n\u2014 \nReply to this email directly or view it on GitHubhttps://github.com/rails/turbolinks/pull/248#issuecomment-20751323 \n. \n\u2014\nReply to this email directly or view it on GitHub.\n. David, prefetch is orthogonal to this issue. Fetching stuff from the cache makes as much sense when you're clicking on a link as it does when you're clicking the back button. If we then ALSO want to explore a prefetch on top of that for pages that's not in the cache, I'm game for looking into that as well. But that doesn't take away from using the cache on links being a good (and very well tested in Basecamp) idea.\n\n\nOn Jul 10, 2013, at 6:32 PM, David Estes notifications@github.com wrote:\n\nAlso worth noting we can do this for iOS with a touchstart event as a standard link click in iOS is naturally delayed 300ms to detect double taps. touch start could start the prefetch saving you an extra 300ms potentially. \nOn Jul 10, 2013, at 9:30 AM, David Estes davydotcom@gmail.com wrote: \n\nPersonally, I think this is a silly solution. Why don't we do what chrome does, capture a mouseover event on a link and start a prefetch for that page. so that by the time its clicked it might come up earlier. Rather than relying on historyCache. \nOn Jul 10, 2013, at 9:23 AM, David Heinemeier Hansson notifications@github.com wrote: \n\nMatt, what we're trying to offer is an opt-out that gives us back \"how things work right now\". That is, don't show the cache, wait for the fetched version. \nI could be talked into a custom meta tag saying \"never show a cached version of this page\" that turbo links would pick up. Didn't like having it as part of body/div. \nOn Jul 10, 2013, at 6:00 PM, Matt De Leon notifications@github.com wrote: \n\nDavid I think with turbolinks we want the opposite, an opt out to display \nthe cache, not to prevent reload. Otherwise the page may never get \nreloaded. With stacker a sheet is kept from reloading only if it is stacked \nbeneath and has the no reload option. \nI would also suggest any config be in the page itself. That way we can \navoid the mental overhead of adding a config for each link to a particular \npage. Plus the config wouldn't differ link to link \nThis this is all a bit speculative and I might recommend we see the problem \nin action before solving it \nOn Jul 10, 2013 11:48 AM, \"David Heinemeier Hansson\" < \nnotifications@github.com> wrote: \n\nAh, I see what you mean. This hasn't been a problem for us with BCX. I \nthink it's the preferred default behavior to get the speed increase and \nthen just having a way to opt-out. I'd prefer the opt-out to be on the \nlink, though. Like data-turbolinks-no-refresh or something like that, so \nit'll just fetch from the cache and not refresh the page. \nOn Wed, Jul 10, 2013 at 5:33 PM, Nick Reed notifications@github.com \nwrote: \n\nBecause the cached page isn't being immediately replaced by a fetched \npage. \n\u2014 \nReply to this email directly or view it on GitHub< \nhttps://github.com/rails/turbolinks/pull/248#issuecomment-20750642> \n. \n\n\u2014 \nReply to this email directly or view it on GitHubhttps://github.com/rails/turbolinks/pull/248#issuecomment-20751323 \n. \n\u2014 \nReply to this email directly or view it on GitHub. \n\n\u2014 \nReply to this email directly or view it on GitHub. \n\n\n\u2014\nReply to this email directly or view it on GitHub.\n. It's not the same solution. Even if you prefetch, it's still going to be considerably slower than just pulling from cache.\n\n\nI'm fine with having an opt-out in a meta tag or something, but I feel strongly that it makes sense as a default to have on.\nTurbolinks has been extracted from the lessons of Basecamp Stacker and this approach works great in Basecamp and stacker. That's a real life case of an app with hundreds of screens being used by millions of people for more than a year. I'd like something more compelling than \"I can imagine\u2026\" as a counter-example of why this isn't a great idea.\nAlso, before we roll with prefetch, I'd like to see that concept tried out in a real app and how it goes. I can imagine it not necessarily working that well in real life. I'm thinking of a Basecamp case with like the messages index. You move your mouse curser down the list to click on the 9th item. That means you've now kicked off 8 prefetches. A heavy task both for client-side and server-side to deal with.\nOn Jul 10, 2013, at 7:15 PM, David Estes notifications@github.com wrote:\n\nIm saying its silly cause turbolinks does a great job at preserving some of the standard browser behavior. The jarring affect could happen on different sites. It's not necessarily a one size fits all feature. If there is an opt-out then great. or opt-in really. Doing a prefetch does essentially solve the same issue. Makes your page load on ios at least 300ms faster if you do it right. (Definitely perceivable).\n\u2014\nReply to this email directly or view it on GitHub.\n. I don't know why this would be optional? We do not make it optional for the back-button cache. Also, seems easy to pair this with prefetch: if the page to be prefetched is already cached, don't prefetch it.\n\nOn Jul 18, 2013, at 7:35, Nick Reed notifications@github.com wrote:\n\nConsidering we could potentially be implementing prefetch behavior in the future, I think using the term for this feature is out of the question. What do you think about referring to this behavior as a cached transition from one page to the next?\nAs for the docs, of course that's ok.\n\u2014\nReply to this email directly or view it on GitHub.\n. I think the delay setup seemed like an interesting idea. Still a little skeptical but I'd be happy to see a PR that I can test and then render a more informed opinion. I'd like to explore optimizing for touchstart as a separate issue though.\n\nAlso, seems like the best thing to do with prefetch is to populate the existing cache we have and then just pull from that cache on the actual page change.\nOn Jul 19, 2013, at 19:49, David Estes notifications@github.com wrote:\n\nYea that wouldn't be hard to add to the prefetch logic. But I didn't think you liked prefetch. If you want me to add it to the PR for prefetch I can. \nOn Jul 19, 2013, at 12:44 PM, David Heinemeier Hansson notifications@github.com wrote: \n\nI don't know why this would be optional? We do not make it optional for the back-button cache. Also, seems easy to pair this with prefetch: if the page to be prefetched is already cached, don't prefetch it. \nOn Jul 18, 2013, at 7:35, Nick Reed notifications@github.com wrote: \n\nConsidering we could potentially be implementing prefetch behavior in the future, I think using the term for this feature is out of the question. What do you think about referring to this behavior as a cached transition from one page to the next? \nAs for the docs, of course that's ok. \n\u2014 \nReply to this email directly or view it on GitHub. \n\u2014 \nReply to this email directly or view it on GitHub. \n\n\u2014\nReply to this email directly or view it on GitHub.\n. I'll try to get some time to review this stuff this week. Thanks again for the explorations of both concepts.\n\n\nOn Jul 29, 2013, at 15:08, David Estes notifications@github.com wrote:\n\nThe code diff in the commit doesn't show too much additional I refactored and minimized the huge code size change that was there initially. on the \"skew to analytics\" that entirely depends on if your using server side analytics or what. The extra server requests are minimal as was previously proven. I haven't heard anything. @reed wanted me to try an initial attempt at prefetch. So I'm kinda waiting to hear from the rails guys. \nOn Jul 29, 2013, at 3:17 PM, Matt De Leon notifications@github.com wrote: \n\nAny update here @dhh @reed @davydotcom? \nOn my apps, I've been switching between testing @davydotcom's branch (prefetching) and my branch (\"transition cache\"). While prefetching is a really interesting concept there are known downsides (skew to analytics, extra requests to the server, lots of extra code to make the feature work). \nOn the other hand I'm satisfied with the improvement of transition cache and see no immediate downsides that can't be remedied by easily turning off the caching via the data-no-turbolinks-transition-cache option. It's also proven to work in Basecamp. \nI may be biased, but I think a reasonable approach would be to go forward with transition cache and continue the discussion on prefetching. The two can live side-by-side. \n\u2014 \nReply to this email directly or view it on GitHub. \n\u2014\nReply to this email directly or view it on GitHub.\n. Finally had a chance to try to review this. I tried to reuse more of the existing infrastructure and wrap it in the fetch* methods. But I kept hitting issues with the cache not lining up correctly and ran out of time. https://gist.github.com/dhh/8460cd271cc57dc361d0\n. I saw two issues:\n\n\n1) Wrong cache restores for the URL.\n2) No cache being restored when I expected.\nBut it was a frustrating debugging experience because it didn't appear deterministic. I'm sure it is, but I couldn't spot the pattern.\nI think we need a better automated test suite around this. We're already more than pushing our luck with the complexity of the current implementation and the nonexistent test suite.\nIt'd be great to have a selenium driven suite that can run in Chrome/Safari where we can properly cover all these cases.\nOn Aug 19, 2013, at 12:36 PM, Matt De Leon notifications@github.com wrote:\n\nWhat's the symptom? Is an incorrect cache being shown, or is a cache that should be shown not being found? The latter is an issue because of the reliance on currentState.position as a cache key. It was a compromise to avoid adding a new cache whose keys are urls (this is preferable for transition cache).\nI'm happy to dive deeper into the code, especially now that this PR has diverged from master quite a bit. Similar to @davydotcom I put this out there to see interest before investing too much more time. Are there other hesitations that still need to be addressed?\n\u2014\nReply to this email directly or view it on GitHub.\n. I've needed this as well. \"page:before-change\" would do it for me.\n\nOn Jul 4, 2013, at 8:37 AM, roody notifications@github.com wrote:\n\nMany sites have such kind of functions: When user do some changes, and when he try to switch/reload/close page, site will give a notice that \"unsaved changes,....\". The common way is add \"window.onbeforeunload\" event, and return \"message\" to solve this problem.\nbut under turbolinks, page navigation could not trigger this, unless you add \"data-no-turbolink\" for the target links. So I check turbolinks to find another event, \"page:fetch\" will be triggered when page navigates, but there is no way to block browser keep on loading page.\nso, Is there a good way for this ? or we could have some events like \"page:pre-fetch\" ?\n\u2014\nReply to this email directly or view it on GitHub.\n. :+1:\n\nOn Jul 10, 2013, at 1:11, Nick Reed notifications@github.com wrote:\n\nWould this be enough?\npageChangePrevented = ->\n  !triggerEvent('page:before-change')\nhandleClick = (event) ->\n  unless event.defaultPrevented\n    link = extractLink event\n    if link.nodeName is 'A' and !ignoreClick(event, link)\n      visit link.href unless pageChangePrevented()\n      event.preventDefault()\n...which you could use like this:\n$ ->\n  $(document).on 'page:before-change', ->\n    confirm 'Are you sure you want to leave this page?'\n\u2014\nReply to this email directly or view it on GitHub.\n. I'd like to rename to #pagesCached, so it's clear what the integer is setting (pages, not megabytes or whatever). \n\nOn Jul 11, 2013, at 4:46, Nick Reed notifications@github.com wrote:\n\n@dhh This look good to you?\nView the current cache size\nTurbolinks.cacheSize() \nSet the cache size\nTurbolinks.cacheSize 20\nYou can merge this Pull Request by running\ngit pull https://github.com/reed/turbolinks configurable-cache-size\nOr view, comment on, or merge it at:\nhttps://github.com/rails/turbolinks/pull/251\nCommit Summary\nMake cache size configurable\nFile Changes\nM CHANGELOG.md (4)\nM README.md (12)\nM lib/assets/javascripts/turbolinks.js.coffee (14)\nPatch Links:\nhttps://github.com/rails/turbolinks/pull/251.patch\nhttps://github.com/rails/turbolinks/pull/251.diff\n. If the main speed increase is on mobile and from listening to touchdown, why not just bind that event to following the link without the prefetch?\n\nI'm not a big fan of this prefetch scheme as a general approach. Chrome does not in fact per default do this on any apps I've tested. The barrage of requests that happen from hovering over a list of links is not acceptable.\nOn Jul 18, 2013, at 22:27, Matt De Leon notifications@github.com wrote:\n\nDavid I'm not sure I see any way around checking for data-remote attributes on links, and not prefetching in those cases. If the link is anything but a GET and the route doesn't exist, a 404 is returned. That could cloud log files and is a false alarm.\n\u2014\nReply to this email directly or view it on GitHub.\n. I'd be happy to get this feature back in on an experimental off-by-default basis, like we just did with the transition cache. Then we can get some good usage in the wild and determine where to go with it next.\n. Sounds great. Probably needs a bit of rebasing to fit in with the new transition cache. Thanks for working on this!\n\nOn Jan 8, 2014, at 7:37, David Estes notifications@github.com wrote:\n\nSounds great. Ill look into modding it with a toggle in the next few days. cool?\n\u2014\nReply to this email directly or view it on GitHub.\n. I've just bound 'page:change' to both dom ready and the turbolinks change, exactly for this. So $(document).on 'page:change\", renderAddThisButtons should be what you need.\n. I don't, no. Fetching an HTML file shouldn't take so long that you need a progress bar. If it does, that's a specialized situation, and you can use this as a reference for your own implementation.\n\nOn Aug 11, 2013, at 6:10 PM, Nick Reed notifications@github.com wrote:\n\nNot at this time.\nBut we could implement it by providing proxied access to the XMLHttpRequest progress event, like this:\nTurbolinks code:\nfetchReplacement = (url) ->\n...\nxhr.onprogress = (e) ->\ntriggerEvent 'page:fetch:progress', e\n...\nUsage:\n$ ->\n$(document).on 'page:fetch:progress', (e) ->\nprogress = e.originalEvent.data\nif progress.lengthComputable\npercentComplete = parseInt (progress.loaded / progress.total) * 100, 10\nconsole.log percentComplete + '%'\n@dhh Think this is worth adding?\n\u2014\nReply to this email directly or view it on GitHub.\n. Actually, I don't like this idea all that much. For live polling in Basecamp, we use setTimeout on a function that is supposed to run every 3 seconds. It doesn't really matter whether you change pages or not. Having this permanent state is part of the deal with Turbolinks.\n\nI'd rather attack this from an angle of either \"install a timeout function that'll only run once\" or a way to find out if the timeout you're setting has already been set.\nI could imagine something like: setExclusiveTimeout 'name for timeout', timeoutFunction.\n. Yeah, we're using page:change for all sorts of initialization that needs to happen on full/first page change. So I'm sympathetic to wanting this to happen for POSTs as well.\n. Yeah, this is for initialization like converting absolute to relative timestamps and so forth. Needs to happen whether we're turbolinked or not.\n. I think having this on by default but with both local and global opt-outs would be great. \n\nOn Oct 14, 2013, at 20:27, Matt De Leon notifications@github.com wrote:\nNick, you bring up some good points, but I believe you are misguided in thinking the idea should be tossed. This feature has worked really well for my app (www.lesson.ly) and Basecamp. Where it works, it does a lot for increasing perceived site speed. It would surprise me if a hefty percentage of apps running Turbolinks wouldn't benefit greatly.\nInstead, I would try to see how we can meet half way. I know @dhh needs to weigh in, but is there not room for a global opt-in/out and page-by-page opt-in/out? Is this not something worthy of releasing, getting feedback, and deciding upon once more than a few of us have weighed in?\n\u2014\nReply to this email directly or view it on GitHub.\n. :+1:\n\nOn Oct 15, 2013, at 7:24 AM, Nick Reed notifications@github.com wrote:\n\nIf it's implemented like data-no-turbolink, the local and global opt-outs would be one and the same.\n\u2014\nReply to this email directly or view it on GitHub.\n. Apologize for not having time to review this yet. Hope to soon get a moment.\n\nOn Nov 4, 2013, at 12:15, Nick Reed notifications@github.com wrote:\n\nYou've dismissed all of my concerns, so I'm just going to refrain from expressing any more opinions on this. I'll leave it to you and DHH to hash out the rest.\n\u2014\nReply to this email directly or view it on GitHub.\n. I continue to think this would make a good default. But we need to make sure that things like the limit on the cache remains, as this is a concern on memory-constrained mobile devices. Do you have a solution for that?\n. Ah, I see. Makes sense.\n\nHere\u2019s what I\u2019d actually like to do. I\u2019d like to introduce this feature as off by default first, then shake out any issues in production systems, and then later turn it on by default.\nSo maybe we can start by having a data-transition-cache=true setting?\nOn Dec 22, 2013, at 6:03 PM, Matt De Leon notifications@github.com wrote:\n\nYes, see commit smidwap@9fb3425. Basically, if the cache is full, then the oldest cache is deleted first.\nHere's a quick list of what remains to get done:\n\u2022 Decide if \"transition cache\" is an appropriate name within the code and for exposing the opt-out data-no-transition-cache\n  \u2022 Write documentation for the feature and opt-out.\nBesides those things, anything else holding us back?\n\u2014\nReply to this email directly or view it on GitHub.\n. I think \"transition cache\" makes sense as in \"use the cache during page transitions\". This is otherwise looking good to me. Agree with the global opt-in like that!\n. Didn't see this PR before I fixed it. But this is even better with tests. Can you rebase and I'll merge?\n. Nick, what do you tie to DOMReady that you don\u2019t want to have happen on page:load?\n\nOn Dec 5, 2013, at 7:31, Nick Reed notifications@github.com wrote:\n\npage:load is fired at the end of the Turbolinks loading process. By not firing it on the initial page load, it provides a way to distinguish between a normal page load and a Turbolinks page load. To me, that's it's entire purpose. I get your point though. Maybe it's worthwhile to have another event that fires on DOM ready and page:load.\n\u2014\nReply to this email directly or view it on GitHub.\n. :+1:\n. Dealing with that issue too. Seems like a recent regression?\nOn May 21, 2014, at 9:07 PM, Ankur Patel notifications@github.com wrote:\nI am also having the same issue and the back button doesnt fetch or render the previous view.\n\u2014\nReply to this email directly or view it on GitHub.\n. Looks OK to me!\n. Yup, we should fix this. Turbolinks should work in IE8 through the fallback.\n. Turbolinks specifically is not active for this use case. You can use a regular Ajax setup to do this with form_for ... remote: true.\n. Turbolinks is turned on when you hit a GET, so every other GET from there will be turbolinked.  It\u2019s not turned on as a result of a POST.\n\nOn Mar 7, 2014, at 12:23, amisarca notifications@github.com wrote:\n\nThanks for the response, as it makes sense to me.\nBut I find these lines from the description a bit confusing then\n\u2022 POST :create => resource successfully created => redirect to GET :show\n      \u2022 Turbolinks ENABLED\n  \u2022 POST :create => resource creation failed => render :new\n      \u2022 Turbolinks DISABLED\n\u2014\nReply to this email directly or view it on GitHub.\n. That doesn\u2019t resolve the issue fully, though. If you link to, say, an image or any non-TL page, you still can\u2019t go back. We gotta fix this at the root.\n\nOn Jul 3, 2014, at 6:06 AM, Pierre Pretorius notifications@github.com wrote:\n\nThis issue is resolved by including turbolinks js in your error page. Thanks to @Marnes for the solution:\n<%= javascript_include_tag 'turbolinks' %>\n@reed: Perhaps place turbolinks in the default rails error page?\n\u2014\nReply to this email directly or view it on GitHub.\n. Nick, please make it so. The new way isn't worth this brokenness.\n\nOn Mon, Jul 21, 2014 at 11:41 PM, Nick Reed notifications@github.com\nwrote:\n\n@dhh Reverting to the old behavior of waiting to change the URL until after the new page has been loaded would resolve the issue.\nReply to this email directly or view it on GitHub:\nhttps://github.com/rails/turbolinks/issues/353#issuecomment-49703618\n. @reed Did you ever get a chance to look at reverting the behavior?\n. No worries. That would be great. It\u2019s the biggest issue I have with TL at this time!\n\nOn Aug 19, 2014, at 16:17, Nick Reed notifications@github.com wrote:\n\nNo, sorry, other things have gotten in the way. I'll try to get it done this week. I do know that it'll probably require at least a minor version bump, since some people might be reading the current URL on page:fetch or page:receive.\n\u2014\nReply to this email directly or view it on GitHub.\n. Awesome. Thanks! Let's cut and push a new gem with this fix. \nOn Aug 22, 2014, at 8:13, Nick Reed notifications@github.com wrote:\nShould be fixed now. I initially thought reverting the behavior would have side effects in other parts of the code, but as far as I can tell there aren't any.\n\u2014\nReply to this email directly or view it on GitHub.\n. Have you looked into fixing this yourself?\nOn Aug 22, 2014, at 5:30, Alex Khanin notifications@github.com wrote:\nany updates? when can we expect a fix?\n\u2014\nReply to this email directly or view it on GitHub.\n. No plans to support partial replacement. Use Pjax if that's what you want.\n. Can you add some of the specific code examples that you need to run on this event?\n\nOn May 1, 2014, at 9:33 PM, R\u00e9mi Pr\u00e9vost notifications@github.com wrote:\n\nThis pull request adds a new page:processed event that is triggered right after the received document is processed (to check for changed assets for example) and just before the content is changed.\nThe use case for this is that I often want to execute some code at the last moment before the HTML content is changed. Normally I would use the page:receive but sometimes processResponse will force a page reload (if an asset has changed) and there\u2019s a small delay between the page:received event and the actual page reload.\nSo I added this event to make sure we can execute code just before the page is changed.\nLet me know if this is not something you think is necessary or if I could something to improve the pull request.\nThanks!\nYou can merge this Pull Request by running\ngit pull https://github.com/mirego/turbolinks master\nOr view, comment on, or merge it at:\nhttps://github.com/rails/turbolinks/pull/371\nCommit Summary\n\u2022 Add page:processed event\n  \u2022 Update README.md with page:processed event\nFile Changes\n\u2022 M README.md (7)\n  \u2022 M lib/assets/javascripts/turbolinks.js.coffee (1)\nPatch Links:\n\u2022 https://github.com/rails/turbolinks/pull/371.patch\n  \u2022 https://github.com/rails/turbolinks/pull/371.diff\n\u2014\nReply to this email directly or view it on GitHub.\n. This looks pretty promising. I\u2019d love to see some use cases for some of the more exotic use cases. Been thinking about introducing the simple \u201cdata-turbolinks-keep\u201d to prevent certain elements from being refreshed on a new page. But of course graft has a bunch more stuff. Not sure I\u2019m loving having full tg-remote stuff. That\u2019s an awful lot of logic to burden the templates with imo. But let\u2019s see if we can\u2019t push some of the partial element replace stuff into Turbolinks.\nOn Jan 4, 2015, at 11:50 AM, Thibaut Courouble notifications@github.com wrote:\nClosing this. Shopify's version of Turbolinks (with the features described above) is available here:\nhttps://github.com/Shopify/turbograft https://github.com/Shopify/turbograft\n\u2014\nReply to this email directly or view it on GitHub https://github.com/rails/turbolinks/pull/379#issuecomment-68646184.\n. 1.8.7 is not supported. All new code is being written with 1.9.3 as the minimum baseline. \nOn May 29, 2014, at 13:42, Joseph Magen notifications@github.com wrote:\nIt doesn't appear that gem 'turbolinks' works with Rails 3.2.x + Ruby 1.8.7. However, I was expecting to find documentation or google search answers, but surprisingly didn't. My error is\nsuper: no superclass method `url_for' for #<#Class:0x7faf08ece050:0x7faf08ecc188>\nCan you confirm that Ruby 1.8.7 is not supported? Otherwise, I will dig for the bug in my app.\n\u2014\nReply to this email directly or view it on GitHub.\n. Aren\u2019t the keywords and description meta tags used solely by crawlers and robots? Who won\u2019t be accessing things through turbolinks anyway?\n\nOn Jul 14, 2014, at 9:58 AM, dontfidget notifications@github.com wrote:\n\nJust found another use for this. The keywords and description meta tags are varying between my pages but turbolinks prevents them from being updated. I'm just throwing them into the digest I used as a query param for my fake asset, but it would be easier if I could just mark each of those meta tags as data-turbolinks-track.\nI'll add that I'm more than happy to make a pull-request for this but I'd like to know that a feature like this would be considered. Thanks.\n\u2014\nReply to this email directly or view it on GitHub.\n. Great digging. Let's just fork TL for now, apply your fix, and use it for a bit. If all turns out well, we can merge upstream. \nOn Oct 3, 2014, at 06:11, Tom Ward notifications@github.com wrote:\nTo recreate, add the following markup to a view that will be loaded via turbolinks:\n\nUsing Chrome, open the Developer Tools, click the device emulation button and choose a \ndevice with a dots per pixel ration of greater than 1 (such as the iPhone 5). In the emulator\nnavigate to the view with the img tag (N.B. don't go directly to the page; turbolinks must\nload the page for the bug to be triggered)\nWhat should happen:\nOne of the high resolution images such example@2x.png or example@3x.png should be displayed\ndepending on the device.\nWhat does happen:\nexample.png will be shown. If you refresh the page (loading it directly) the correct image\nwill be shown. This affects not only Chrome, but AFAIK all Webkit/Blink based browsers, including\ncrucially Safari on iOS and Chrome on Android. It doesn't affect Firefox nightly.\nWhy does this happen?:\nThe document factories createDocumentUsingParser, createDocumentUsingDOM, and \ncreateDocumentUsingWrite create new detached DocumentElements which until they're displayed\nhave an internal device pixel ratio (dpr) of 1. Image srcset selection takes place as the\ndocument is built, not when it is displayed, so the lowest resolution image will always\nbe shown.\nPossible solutions:\nWhile this might arguably be a bug in Webkit, we'd like to use resolution independent images\nnow and so would appreciate a solution from turbolinks. Using the following create document \nfunction fixes this issue for me on Chrome and Safari on OSX, and on Android and iOS. I believe \nit works because the clone of the documentElement has the same dpr as the existing document.\ncreateDocumentWithClone = (html) ->\n  doc = document.documentElement.cloneNode()\n  doc.innerHTML = html\n  doc.head = doc.querySelector 'head'\n  doc.body = doc.querySelector 'body'\n  doc\nHowever, I don't know the full background behind the other implementations - whether they exist for efficiency or to work around other bugs - so I don't know if this introduces other problems. I also don't get how to run/use the existing tests.\nI'd love to help fix this. Any guidance appreciated.\nP.S. For easy testing, here are the images I've been using. They make it easy to see which resolution\nhas been selected looking solely at the number: example.png, example@2x.png, \nexample@3x.png, \nexample@4x.png\n\u2014\nReply to this email directly or view it on GitHub.\n. Mucho gracias! This is so much nicer.\n. We\u2019ll be releasing a new version shortly. I\u2019ll get this out right now, actually.\nOn Oct 24, 2014, at 10:28 AM, Simon de la Court notifications@github.com wrote:\nHi folks,\nI noticed that Turbolinks.enableProgressBar(); is added to the readme, but I could not find the function in the Turbolinks I was running.\nMy Gemfile.lock shows that is sporting version 2.4, but I could not find the function in the JS (generated through Rails). I've noticed that the function also does not yet exist in 2.4 (in the git repo).\nMaybe adding this in the readme?\nGreetings\nSimon\n\u2014\nReply to this email directly or view it on GitHub https://github.com/rails/turbolinks/issues/418.\n. It was released in 2.5.0. So it\u2019s out now :+1:\n\nOn Oct 27, 2014, at 5:31 PM, Gage Bachik notifications@github.com wrote:\n\nLet me know when this is added!\n-Thanks\n\u2014\nReply to this email directly or view it on GitHub.\n. I think it makes fine sense to have a default top z-index to avoid common issues, and would take a PR to that. There\u2019s never going to be a time where you want the progress bar but don\u2019t want to see it.\nOn Nov 1, 2014, at 11:51 PM, Adam Becker notifications@github.com wrote:\non setting the z-index inside of the Turbolinks lib. Turbolinks should not make assumptions about your CSS.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/rails/turbolinks/issues/418#issuecomment-61372443.\n. Went with #423.\n. Went with #423.\n. I've heard no objections, so we're going to merge this, and then I'm sure if there are any issues, we'll hear the objections flow in :)\n. cookies is indeed a reserved word for Rails, so there's unfortunately not much to do here, except for Rails to provide a better error message. Please do open a PR to make that happen :+1:\n. Quick note. I think we'd use the name \"partial\" to refer to a named section, so it'd be:\n\nhtml\n<h1>Dashboard</h1>\n<nav data-turbolinks-partial=\"sidebar\">\n  <a data-turbolinks-partial=\"order-count\">Orders <%= @open_order_count %></a>\n</nav>\nOne concern is indeed whether partial is already an overloaded word. I'm starting to think that it probably is. Turbolinks partials wouldn't necessarily correspond fully to Rails partials. So how about data-turbolinks-section=\"name\" instead?\nAt Basecamp, I see the following use cases currently:\n\u2022 Keep a navigation sidebar that includes per-user stuff separate from the perma pages for, say, a message. Our sidebar is lazy loaded, but once it's there, page changes shouldn't eject it.\n\u2022 Server-side responses to updates that use redirect_via_turbolinks_to and use a change/keep selector to mutate just part of the page. Could be when you update subscribers on a post, it only changes that section.\n\u2022 Every form we use on Basecamp is a remote: true.\nI don't think the nested issue is that big of a deal. I'm fine with the fact that if you replace a specific section, any permanent sections within it are overwritten.\nInteresting thoughts on the partial element, but at least for us, it's not really an issue. We russian doll cache all our partials. If something hasn't changed, then it won't take material time to render it, because it's coming out of a cache. But it's worth thinking about as a separate element.\n. I don't mind the server-side knowing which elements it just updated, and basically passing on optimization hints to the rendering phase. The cool thing about something like this:\nruby\ndef create\n  @post.comments.create! comment_params\n  redirect_to @post, change: :comments\nend\nIs that it'll work just as well whether you're in Turbolinks mode or not. So you still have a rendering flow that's completely unaltered regardless of whether it's a first or subsequent load or it's a POST or a GET.\nThe second thing is that I don't think pages are going to get littered with this. Our initial intention was just to add data-turbolinks-permanent, but even with this more flexible proposal, as you've found, it's usually just 1 or 2 sections that need replacement.\nI'm not as big a fan of watch because we're not setting up any event flow here. The elements are not doing the watching, they're the \"dumb\" part of this. They just have a name that we can refer to in the place that is triggering the action and that does have the knowledge of which parts changed.\n. It's funny, btw, that we're talking about the comment example. I just ripped out some code that basically did $('comments').append('<%=j render @comment %>') in favor of just doing a turbolinks redirect and a \"full\" replacement. The micro optimization turned out not to be worth it.\nI'm finding that in a lot of cases, and I think it'll be even more true when we can do section updates like this. You just won't need as much SJR. You're still doing remote: true forms, but their result will most often just be a Turbolinks.visit response.\n. Yeah, I think that's the part I'm the least hot on. That the dom would basically include conditional logic. To me that's a bridge too far. IMO, the controller knows best how to route this. So it could do:\nruby\ndef create\n  if @post.comments.create(comment_params)\n    redirect_via_turbolinks_to @post, change: :comments\n  else\n    redirect_via_turbolinks_to new_post_comment_url(@post), change: :error, error: 'Something not right!'\n  end\nend\nI think flow logic belongs in the controller.\nI'm :+1: on cutting down on SJR by having these partial updates that allow state to be retained. I think there's really something here.\n. When I say conditional, I mean refresh-on-success/refresh-on-error/full-refresh-on-error-except \u2013 that the DOM is specifiying these different paths. In my opinion, it's the responsibility of the controller to direct to what happens after an interaction \u2013 especially when it's a multi-path flow, like error handling.\nI think the beauty of partial rerendering is exactly that you don't need to do render action: :new, at least not in the Turbolinks case. Since we're not replacing the full form. So you could just do a partial redirect/rerender where you're only changing the error block. But yes, that wouldn't allow for per-field changing of things. But don't think you're getting around that anyway.\n. Anyway, I think you're right that it's not likely that these setups are generally going to be so deeply intricate. Most of the time you're just going to want to either refresh just once specific section, or have one section that you keep around. I think we could start by moving that stuff over, if you're interested? Then we can see what we can possibly build on from there.\nI think we absolutely share the same vision, though. Simply re-render whole pages most of the time. A few nibs at stable elements. And this will get us 90% of the way.\n. Why can't you find the nodes via ('[data-turbolinks-section=X]')?\nAnd yeah, this def is similar in many ways to the React stuff. Hopefully we can get away with far less complexity.\n. Ah, yes, of course. Makes sense. Although I\u2019d expect that the normal case would be that you only have the 1:1? But I guess we need to deal with both.\n\nOn Jan 7, 2015, at 09:57, Kristian PD notifications@github.com wrote:\nThe ('[data-turbolinks-section=x]') selector will only returns nodes that are \"watching\" that section. As soon as you have multiple nodes \"watching\" the same section, you can't really make great guesses as to which node you should be replacing in your front buffer DOM with a node from the back buffer DOM. If it's only ever a 1:1 section key, then it would work.\nI think we also considered tracking it in a simple index like\n* front-buffer DOM *\n{\n0: [div id=\"customer_list\"\n]\n1: [div id=\"customer_bubble\"\n]\n2: [div id=\"customer_modal\"\n]\n}\nHowever without some kind of unique identifier (we used id), you run in to problems if your page refresh adds or removes something based on the state change of the data\nback-buffer DOM\n{\n0: [div id=\"customer_list\"\n]\n1: [div id=\"customer_modal\"] // how do I know this index 1 is actually index 2 in my front buffer?\n}\n\u2014\nReply to this email directly or view it on GitHub.\n. :metal: \nOn Feb 5, 2015, at 10:10, Kristian PD notifications@github.com wrote:\nI'm still planning on getting around to this in a couple weeks, been swamped lately.\nI'm going to take a shot at pulling out the partial refresh stuff from Turbograft and hook it up to a respond_with option / controller decision as @dhh had suggested.\n\u2014\nReply to this email directly or view it on GitHub.\n. I think the auto-detection is an interesting experiment, but the underlying power to update selectively is still valuable. You won't always be able to follow the automatic inference, and you'll need the lower level API to do it anyway. So I'm most interested in getting the manual building blocks in place first, then trying to level-up on top of that afterwards.\n. Ross, that\u2019s an interesting project. I\u2019m curious as to when it matters to truly flow through react vs just doing these innerHTML replacements. I get it in the actual React case, because the logic is all client-side, so you\u2019re basically just doing a redraw. But in our case, redraw only happens in response to a HTTP request. And in that case, I don\u2019t think innerHTML is the bottleneck. The bottleneck is likely to be the remote operation, and the transfer of the response. \n\nHappy to be enlightened to otherwise.\nI like React because it\u2019s the same motivation as Turbolinks: Avoid client-side state as much as possible! It\u2019s just whether the updates are triggered from client or server.\n\nOn Feb 20, 2015, at 07:46, Ross Allen notifications@github.com wrote:\nThis is an interesting discussion, and if you take it to the extreme of tracking every DOM node automatically you can get something like what I've put together: https://github.com/ssorallen/turbo-react\nturbo-react doesn't modify Turbolinks. It monkeypatches document.documentElement.replaceChild, the method Turbolinks calls at the end of the loading process, with a version that turns the HTML into JSX, then uses the JSX parser to convert to React function calls, and then lets React do its DOM diffing and minimal updating. This limits the manual cues needed from the developer and needs no extra help from the server.\nThe HTML -> JSX -> React combination behaves similar to ideas mentioned above: it tracks DOM nodes with unique IDs (data-react-id) and updates only parts of the page that have changed. Node IDs are determined by their path in the tree, which means if their path changes between renders it will not be considered the same node. That's where something like data-turbolinks-partial has an advantage: the developer can mark nodes as being the same across renders.\n\u2014\nReply to this email directly or view it on GitHub.\n. Ross, gotcha. That seems perfectly legit for that use case. Thanks for putting it out there.\nOn Feb 20, 2015, at 10:07, Ross Allen notifications@github.com wrote:\n@dhh Yup, I don't think innerHTML is a bottleneck, and I didn't mean to imply turbo-react was fixing a bottleneck or any problems in Turbolinks. I added React as an experiment to have finger-grained automatic mutations than documentElement.replaceChild to enable things like CSS transitions. The example in the turbo-react README demonstrates a simple case:\ncss:\n.foo { transition: background-color 0.5s\n; }\n.bar { background-color: yellow\n; }\n.baz { background-color: blue; }\ndoc1:\n<body\n\n<\ndiv class=\"foo bar\"></div\n\ndoc2:\n\n<body\n\n<\ndiv class=\"foo baz\"></div\n\nTurbolinks replaces the body with the body tag of doc2, but turbo-react finds that the minimum change to get from doc1 to doc2 is actually div.className = 'foo baz' (or maybe some use of classList if supported). With turbo-react you'll see the background-color transition.\n\n\u2014\nReply to this email directly or view it on GitHub.\n. :+1:\nOn Jan 9, 2015, at 13:14, Javan Makhmali notifications@github.com wrote:\nTo remain compatible with older versions of Rails, perhaps we should prefer _filter if defined and otherwise use _action. What do you think?\n\u2014\nReply to this email directly or view it on GitHub.\n. :+1: \u2013 if you're interested in helping us work to improve the precision of replacement in TL, please checkout https://github.com/rails/turbolinks/issues/448\n. Lovely. For the record, this goes into master under the target that master is now targeting a 3.0 release.\n. Why wouldn\u2019t Turobolinks.visit not always change the url, even when using change? Change just says \u201cwherever we\u2019re going, we\u2019re just only going to change this specific DOM element\u201d.\nOn Mar 3, 2015, at 11:17 AM, Nick Reed notifications@github.com wrote:\nAs it is now, Turbolinks.visit(url, change: 'comments') won't change the current URL. I see the value of that, but I also see scenarios where I'd want the URL to change. Would anyone object if I added the ability to specify that you want it to change?\nSomething like this:\nTurbolinks.visit(url, change: 'search-results', change_url: true)\n@Thibaut https://github.com/Thibaut @kristianpd https://github.com/kristianpd @dhh https://github.com/dhh\n\u2014\nReply to this email directly or view it on GitHub https://github.com/rails/turbolinks/pull/468#issuecomment-77014008.\n. \ud83d\udc4d\nOn Feb 28, 2015, at 7:57 AM, Arthur Nogueira Neves notifications@github.com wrote:\nthanks\n\u2014\nReply to this email directly or view it on GitHub https://github.com/rails/turbolinks/pull/470#issuecomment-76531627.\n. I think we should actually just implement the behavior for the user. Check if jquery is defined, if so, do the right thing. (In addition to this generic approach).\n. Sounds good \ud83d\udc4d\nOn Mar 8, 2015, at 16:11, Thibaut Courouble notifications@github.com wrote:\n@dhh  I'm happy to take this on but I'd rather do it in a separate PR.\nWhile testing this I found some potential issues with back/forward navigation (not related to the changes in this PR). I'd like to make sure those are fixed and tested before adding a jQuery \"auto-cleanup\" (which is potentially breaking for apps running master).\n\u2014\nReply to this email directly or view it on GitHub.\n. Hey, @reed, I think the per-item expiry is helpful when you specifically have something known like a sidebar that gets replaced or dropped during key-specific updates. But maybe that could still be combined into one event with page:expire and just having the elements that are GC'ed passed along with that event.\n. Seems good to me! \ud83d\udc4c\n. If you want to render only partials, then pjax is probably a better fit for your use case. \nOn Apr 25, 2015, at 19:46, riccardoa notifications@github.com wrote:\n@Thibaut Why I should reply with a full index view, when I don't need it ? the problem is that it's different the response time/size.\nIf I reply only with a partial it's only 20ms vs 100ms for the full index view...if wasn't for the problem in old browser, this solution works very well and it's competitive with backbone or other mvc js frameworks.\nIt's like when I do:\nredirect_to @post, change: [:comments, :super_test]\nIt reply to me with a full page html(that is a lot more big than a simple partial)\n\u2014\nReply to this email directly or view it on GitHub.\n. That wouldn't work for us. We use xhr when we are doing other Ajax requests. I'd suggest doing a manual Ajax request for that 1 request in your app when you want to render a partial. \nOn Apr 25, 2015, at 20:04, Thibaut Courouble notifications@github.com wrote:\nWhy don't give the opportunity to people to render page/html conditionally ?\nIf you use jquery-ujs, you can already do this:\nrender :index, change: :comments, layout: (request.xhr? ? nil : 'application')\nHowever, I just realized Turbolinks doesn't send X-Requested-With: XMLHttpRequest when it fetches a page, so request.xhr? won't be true. @dhh any reason why that's not the case? Ok if I make the change?\n\u2014\nReply to this email directly or view it on GitHub.\n. I think we should be using the same attribute, but restrict where it's used. So you do data-transition-cache=\"false\" on the body for ignoring the whole page, and if you do it on a single element, only that element is not cached. We can then deprecate data-no-transition-cache.\n. console.log warning sounds good, along with a note in release notes. Should\nmark for removal in 4.0.\n\nOn Sun, May 10, 2015 at 4:24 PM, Christophe Maximin \nnotifications@github.com wrote:\n\n@Thibaut https://github.com/Thibaut Done, looks good?\nOn the deprecation of data-no-transition-cache, I don't know what's the\npreferred process. I was thinking of submitting another pull request, where\nusing would still work but would generate a console.log warning. Any better\nway?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rails/turbolinks/pull/521#issuecomment-100646934.\n. Agree with Matt's analysis. We should be very careful not to\nover-complicate the caching scheme. What I would like, though, is a dynamic\nway to make the current page as dirty for caching purposes. So for example\nin the expand example, you mark the page dirty if the block is expanded.\nOtherwise not.\n\nOn Thursday, June 4, 2015, Matt De Leon notifications@github.com wrote:\n\nI wrote the transition cache feature, and I thought about this problem.\nAnd I think @christophemaximin https://github.com/christophemaximin's\nsolution isn't general enough...\nThe problem is that users may temporarily see a cached page and get a bit\nconfused (e.g. \"Post created!\" is shown, then disappears). The situation I\nmost run into is a cached page with an expandable section. Turbolinks may\ncache the page with the section expanded, which can be a bit surprising to\nusers.\nA contrived example:\n- User loads /posts and clicks \"new post\"\n- /posts page expands with a new post form\n- User clicks link to a totally different page (e.g. /users)\n- User comes back to /posts\n- User sees cache with new post form, but form disappears when new\n  copy loads\n- User = maybe slightly confused?\nRemoving sections from cached pages wouldn't solve this problem.\nThis has been my personal solution so far:\n- If the difference between a cached and fresh copy of a page is\n  drastically different, I'll add data-no-transition-cache to the\n  page. In practice, this only happens with pages that have infinite\n  scrolling.\n- If the difference is small (expanded section or flash notice), I\n  don't bother. Not ideal, but also not a big deal unless your pages are\n  taking several seconds to load (bigger problem to fix!)\nIt'd be nice to have a more general solution, but I don't think this is\nit. data-no-transition-cache is easier to understand and more useful.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rails/turbolinks/pull/521#issuecomment-108984391.\n. Like both ideas!\nOn Jun 7, 2015, at 16:44, Thibaut Courouble notifications@github.com wrote:\nWhat I would like, though, is a dynamic way to make the current page as dirty for caching purposes.\nAFAICT if you add a data-no-transition-cache element to the page after it has loaded, it does just that. I agree this is the simplest solution. We could add an API for it, e.g. noTransitionCacheOnCurrentPage.\nTo solve the flash problem, we could fire an event right before we restore a page, passing the cached  to the callback:\n$(document).on 'page:before-restore', (event) ->\n  $(event.data).remove('.flash')\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks for digging into this so clearly. I think it's worth taking a shot\nat 4, but for me, the most important feature to keep is\ndata-turbolinks-permanent. Can't live without that any more, but could give\nwithout the other partial replacements (although I'd prefer not to!).\n\nOn Mon, Jun 1, 2015 at 1:34 PM, Thibaut Courouble notifications@github.com\nwrote:\n\nThanks for your thoughts, Nick.\nI can give (4) a shot in the coming weeks. If we can pull it off (I only\nthought of it while writing this issue), it'd give us the best of both\nworlds.\nRegarding (5), we'd still get to keep half the features announced at\nRailsConf (data-turbolinks-permanent).\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rails/turbolinks/issues/551#issuecomment-107408881.\n. I think we should just release Turbolinks 3 now. Turbolinks 5 is a complete rewrite and will be the version we'll be bundling with Rails 5. There are some backwards compatibility issues, though, so we shouldn't hardcode a 5+ dependency. Very likely that someone upgrading an existing app to Rails 5 will want to continue using TL3. But new, from-scratch, apps should use TL5.\n\nWe'll finish the extraction from Basecamp 3 along with the native wrappers for iOS and Android. That was the big driver for TL5. Needing more hooks and more control to make the native experience perfect.\n. I think there's a compelling argument that 3.0 isn't going to be released,\ngiven that 5.0 is close at hand, and it changes the API in significant ways.\nBut, hey, it's just code. If the current state of this repo serves your\nneeds, you don't need any official blessing from anyone to use it. You can\nuse it as-is, you can fork, you can do whatever you want. MIT baby!\nOn Tue, Nov 17, 2015 at 12:03 PM, Rico Sta. Cruz notifications@github.com\nwrote:\n\nI guess at the very least, the current state can be released as\nv3.0.0-pre1.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rails/turbolinks/issues/628#issuecomment-157338292.\n. We are working on getting TL5 ready for release. Since it changes a lot of\nthings we need new documentation and more.\n\nWe don't have a current plan to add partial replacement from TL3 to TL5. It\nmay be possible in the future but its not in the cards now. So releasing\nTL3 with a feature set that's not available in TL5 doesn't make a lot of\nsense.\nOn Dec 30, 2015 02:48, \"Nate Berkopec\" notifications@github.com wrote:\n\nhttps://github.com/basecamp/turbolinks looks fairly up-to-date. Now that\nRails 5.0.0.beta1 is out, is there any update on the release plans or\nschedule for Turbolinks 5?\nFWIW, I think it would be nice if TL3 was forked and released. I think a\nlot of people would find it useful, and the fork should live on for at\nleast as long as it's feature set (like partial replacement) can be added\nto TL5.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rails/turbolinks/issues/628#issuecomment-167915897.\n. Hasan, I would start with TL5 if you're working on something new. The core\nAPI has changed entirely, though (hence the big version leap). We're\nworking on adding that documentation now.\n\nOn Thu, Jan 14, 2016 at 10:12 AM, Hasan Kumar Reddy A \nnotifications@github.com wrote:\n\nWe are just getting started with adding turbolinks back to our rails 4.1\napplication. Is it recommended to use the TL5\nhttps://github.com/basecamp/turbolinks/tree/v5 or TL3\nhttps://github.com/rails/turbolinks/tree/master ?\nIf we go ahead with TL5, can I safely use the 2.5-stable\nhttps://github.com/basecamp/turbolinks/tree/2-5-stable README for\nsupported API or has the underlying core API changed after adding the\nhybrid support?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rails/turbolinks/issues/628#issuecomment-171580925.\n. TL3 still exists in this repo. The work isn't being burned at the stake. If you want to use this version of Turbolinks, you're completely free to do so. The work is even MIT, so if you want to further develop this branch, that's also possible. That's the wonder of OSS!\n\nTL5 is a rewrite for two reasons: 1) To better accommodate native iOS and Android wrappers by giving them access to the relevant points in the lifecycle of a request. This was the driving use case. 2) To facilitate #1, it turned out to be easier to do a rewrite rather than a patch. And to be frank, the code base needed it anyway. The new code base is far cleaner. TL isn't an enormous framework, so does this as a rewrite as completely feasible.\nTL3 was never released, so the only people who've used it were those active involved with the development or extra adventurous souls. A small group compared to the people using TL2!\nPartial replacement turned out to be a feature I didn't really think lived up to the promise, at least not with the current implementation. data-permanent was, imo, 95% of the value, and that feature is present in TL5. For other cases where you just need to change a small part of the page, doing things via ajax is in my opinion the better way for now. But that just describes our use case. There may well be other use cases where it works better.\nSo TL5 is going to ship without partial replacement, beyond the permanent marker, and we can consider adding that back in via a plugin or directly, but that's a secondary priority.\nWe're working on wrapping up documentation, testing, and the native wrappers for TL5 to coincide with Rails 5 final.\n. Yes, at this time, you're going to have to dig into the source of\nTurbolinks 5. It really isn't too bad. It's not that long. But it's a\nbigger hill to climb than reading a baked tutorial.\nThat's exactly what I'd recommend. Use SJR when you just need to change one\nlittle part of the page. Use Turbolinks with the permanent tag for the\nmajority of page changes where you want to change everything except a\nstable navigation bar or shopping cart or whatever.\nBest of luck!\nOn Mon, Jan 18, 2016 at 3:52 PM, inchr notifications@github.com wrote:\n\nJust to be clear: I really appreciate the work that you/rails core\nteam/basecamp team do with rails/turbolinks. I appreciate also the work of\nthe contributors of this branch.\nBtw: few comments above, you've suggested to use turbolinks5+rails5 for a\nnew project...but there is any doc/readme/example/blog post about\nturbolinks5 ? I'm really interested to try it for a new project.\nI was justing thinking that a good alternative for partial replacement, is\ndo a simple ajax request, and reply with a create.js.coffee for\nexample(RJS) and from there, render the new partials, where you want. What\nyou think ? it's a good idea ?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rails/turbolinks/issues/628#issuecomment-172550209.\n. Greg, that's exactly the motivation for Turbolinks 5! To provide an\nalternative path to client-side (native or JS) implementations for that\nwhich can be just as well served by Turbolinks. Which in the case of\nBasecamp 3 turned out to be most of it! That's why we're so excited about\nthe TL5 approach. It really is a major breakthrough in productivity for\npeople who have to build apps that do both web and native at the same time.\n\nWe're readying the documentation for TL5. We're getting the native wrappers\npolished. Sam is intending to deliver a presentation at RailsConf about it\nall. We'll get all the information out there!\nOn Mon, Jan 18, 2016 at 4:56 PM, Greg Blass notifications@github.com\nwrote:\n\nMakes sense to me @dhh https://github.com/dhh!\nI think I speak for a large part of the Rails community in that we'd love\nto hear more about how basecamp implemented your native iOS and Android\nwrappers (@sstephenson https://github.com/sstephenson -\nhttps://twitter.com/sstephenson/status/687667917341642752).\nI've been searching for resources on how to learn about something like\nthis, but have found nothing. I think the fact that you guys pulled that\noff is a huge deal and would be a game changer for tons of people.\nTo get truly native feeling navigation for my rails app for mobile, I've\nbeen learning Ionic/Angular and how to use Rails as an API. It does the job\nbut its an incredible amount of work for a small team. Angular seems like\noverkill to me. I am not looking forward to rewriting my whole Rails\ncodebase to use an API.\nMaybe a quick youtube like you did for ActionCable, or a Signal vs. Noise\npost? Or, do you have any resources you could offer that helped your team\nunderstand what was required to roll that out?\nMy gut instinct tells me this isn't something that can be explained in a\nblog post, and that is why you hire swift and java guys :( But I really\ndon't know!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rails/turbolinks/issues/628#issuecomment-172568846.\n. Jim, yep! We want to supply the whole toolkit that enables people to build\nhybrid apps like Basecamp 3 with Turbolinks.\n\nOn Mon, Jan 18, 2016 at 5:06 PM, Jim Jones notifications@github.com wrote:\n\n@dhh https://github.com/dhh Are you planning on open sourcing a generic\nversion of the iOS and Android apps that wrap these web views?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rails/turbolinks/issues/628#issuecomment-172571196.\n. Lest I over-promise: What we've developed is a wrapper around the web views\nfor both Android and iOS that makes them work well with Turbolinks.\nIncluding all the animations for back/forward etc. This does not mean\nyou'll get an app like Basecamp 3 without knowing how to do iOS or Android\ndevelopment.\n\nOn Mon, Jan 18, 2016 at 5:10 PM, Greg Blass notifications@github.com\nwrote:\n\nAmazing. This is a huge game changer. Very excited! Thanks @dhh\nhttps://github.com/dhh!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rails/turbolinks/issues/628#issuecomment-172572866.\n. I've blogged about the general approach in the past:\nhttps://blogcabin.37signals.com/posts/3743-hybrid-sweet-spot-native-navigation-web-content\n\nBut yeah, still a bunch of work to do to outline the technical aspects in\ndetail.\nOn Mon, Jan 18, 2016 at 5:24 PM, Greg Blass notifications@github.com\nwrote:\n\nGotcha, understood - I'm definitely looking forward to learning, and\nunderstand that native wrappers means actually writing swift and java. This\ndoesn't scare me, and it still seems like a better approach than\nrefactoring an entire app to use an API and a JS framework. I think an\noverview of how you guys did it would be tremendous for the community and\nwill open up tons of blog posts and support around the concept. Should make\nfor some really interesting twitter arguments to say the least.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rails/turbolinks/issues/628#issuecomment-172576467.\n. We'll be releasing Turbolinks 5.0.0.beta1 today. Along with it is a new organization on GitHub to hold all the repos as well as a FAQ answering why the rewrite. Have a look: https://github.com/turbolinks/turbolinks\n. Plan remains to release Turbolinks 5.0.0.final alongside Rails 5.0.0.final together with the iOS and Android wrappers and documentation.\n. Note: As part of Turbolinks 5, we're going to move this repo to turbolinks/turbolinks-classic. So all the work is still available. It'll just live within the new turbolinks organization on GitHub.\n. Correct. Was just keeping it open to inform everyone what was going on until we had the repos setup.\n. Yeah, I think having Turbolinks on NPM makes lots of sense. @sstephenson is\nhandling the release. Can you transfer the name to him? Thanks!\n\nOn Tue, Feb 2, 2016 at 7:50 PM, Justin Gordon notifications@github.com\nwrote:\n\nBy the way, this doesn't change the fact that a gem still needs to be\ninstalled. One downside of including TurboLinks via NPM is that the version\nof the ruby code and the JS could could be different.\nFor React on Rails, v2+, we also have the JavaScript side distributed via\nNPM, and the Ruby code checks that the version numbers match.\nThe current code behind the http://www.reactrails.com includes Turbolinks\nin a \"application.js\" type file, as shown HERE\nhttps://github.com/shakacode/react-webpack-rails-tutorial/blob/master/app%2Fassets%2Fjavascripts%2Fapplication_non_webpack.js#L5\n.\nSo it is feasible to have a couple exceptions to including all\ndependencies via npm.\nThe bottom line is that if we think providing the JS code of TurboLinks\nvia the Gem is the really the only desired distribution mechanism, I\nprobably won't spend much time evaluating the option of npm. But if we\nmight provide this, then I'll prototype this using a fork.\nThanks for your consideration.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rails/turbolinks/issues/658#issuecomment-178754219.\n. I'd be curious as to how people are using this through NPM. Is this for\nthose who opt out of the asset pipeline and use grunt or whatever\nthemselves?\n\nOn Wed, Feb 3, 2016 at 7:09 PM, Justin Gordon notifications@github.com\nwrote:\n\nRoger that @dhh https://github.com/dhh! Let me know if we can also\ntransfer jquery-ujs.\n@callumacrae https://github.com/callumacrae, my collaborator on\njquery-ujs, pointed me to this:\n[image: 2016-02-03_10-03-53]\nhttps://cloud.githubusercontent.com/assets/1118459/12791866/e58dbc8e-ca5d-11e5-89c8-6f4d164f2530.png\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rails/turbolinks/issues/658#issuecomment-179382993.\n. Sounds good to me. Would be happy to see them mirrored, if we can find a\nworkflow that's predictable and not likely to splinter the versions and\ndependencies.\n\nOn Thu, Feb 4, 2016 at 11:32 AM, Callum Macrae notifications@github.com\nwrote:\n\nBasically, yeah. Front-end developers don't usually like interacting with\nthe asset pipeline, and I've spoken to quite a few companies who have\nswitched to using gulp or grunt for that reason (it's nice to be able to\nwrite tooling in your main language, you know?). react_on_rails,\n@justin808 https://github.com/justin808's project, uses webpack, which\nagain gets its dependencies from npm.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rails/turbolinks/issues/658#issuecomment-179760712.\n. Oh, I don't doubt the steps. Just that it needs to be part of the release\npipeline.\n\nOn Thu, Feb 4, 2016 at 11:44 AM, Callum Macrae notifications@github.com\nwrote:\n\nTo make a release, it's basically just a case of updating the version\nnumber in package.json (and if you use the npm version command, it\nhandles the git tag for you too), and then running npm publish. It's\nsuper simple :)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rails/turbolinks/issues/658#issuecomment-179764634.\n. Line up variable assignments with the three top ones, add an extra carrier return after the five has been declared.\n. This isn't really about Push-State but about XHR. So let's go with X-XHR-Referer.\n. Rename to reflectRedirectedUrl and move the function down to underneath reflectNewUrl.\n. No need for the extra set of parenthesis, just need a space after the if. Also, rename the header to X-XHR-Current-Location.\n. Do we need to leave this in?\n. Are you sure we still need this now that we're running createDocument delayed? Wasn't this just to catch IE9?\n. Rename to installClickHandlerLast.\n. Rename to handleClick.\n. As noted in the original ticket, I'm not hot on adding legacy browser support for this stuff. Needlessly balloons the code base.\n. Kill needless space.\n. Use && instead of and and rename the header to X-XHR-Referer.\n. Use only two spaces for indention. Use X-XHR-Current-Location as the header name.\n. Why would the response fail to be parsed? Do you have a case where this happens?\n\nNo interest in defensive programming for the future. If you have IE10 available, let's test and find out if it's a problem. But no preemptive programming otherwise.\n. Rename module to SetXHRCurrentLocation.\n. Also, rename method to set_xhr_current_location.\n. This should live in its own Turbolinks module and be included in ActionController on its own. Rather than by reopening Redirecting. Use ActiveSupport::Concern with included do/end to set the alias_method_chain.\n. Add carrier return after require for readability.\n. Carrier return is in the wrong spot ;). Nothing after the start of the block, but in between the require and the ActionController::Base call.\n. Let's go with :xhr_referer instead of :turbolinks.\n. You can inline both this file and xhr_current_location in turbolinks.rb. No need to have these as separate files imo.\n. Space needed after the last comma.\n. Same carrier return style as mentioned above. Although I guess you won't need the require now that we're inline the two modules that provide this.\n. You can turn this into a one-liner:\neval(script.innerHTML) for script in document.body.getElementsByTagName('script' )\n. Nix these two top returns.\n. Nix return after module declaration.\n. Collapse the two initializers into the same thing.\n. Actually, collapse both of these modules into a new one called \"XHRHeaders\". Not enough meat on these bones to warrant them being separate.\n. Strip the generate part. Just browserCompatibleDocumentParser.\n. I prefer separate methods.\n. I prefer the inline assignment. Rather than separate assignment, check.\n. Yes, that's no good. But I prefer it for the simple case. \nOn Jun 19, 2013, at 15:41, Marek notifications@github.com wrote:\n\nIn lib/assets/javascripts/turbolinks.js.coffee:\n\n\nif doc = validateResponse()\n  In this case that can be done, if you wish.\n  But in general I have the oposite opinion on inline assigments in conditions, because then someone may try write something like this:\n  else if invalidContent() or assetsChanged (doc = createDocument xhr.responseText) \n  (fully: https://github.com/rails/turbolinks/blob/master/lib/assets/javascripts/turbolinks.js.coffee#L170-L174)\n  which literally hurts\n\n\n\u2014\nReply to this email directly or view it on GitHub.\n. Don't have to declare the origSetTimeout variable up here. We're using CoffeeScript, so that'll happen automatically, and this doesn't add anything enlightening to the state.\n. Why is this commented out?\n. Could abstract to if location.hasNoHash() then document.location.hash else ''\n. :scissors: newline, indent all below private.\n. Yeah, would be great if we weren't exposing this to potential memory leaks. AdoptNode sounds like what we want.\n. ",
    "davydotcom": "@dhh, yea noticed that i left the / out for the exact reason mentioned above. Is this going to only be available in coffee form on final version? Would like to not require coffee on projects that might need this.\n. @dhh, thats exactly what I did, works like a charm now thanks. Could we perhaps make it smarter and detect a tag extension in the href. if it does not use a acceptable extension, fall back so we dont need to even use data-no-turbolink\n. agreed, 406 redirect but if you can minimize any double requests that would be ideal.\n. @dhh exactly only i added htm as a valid extension as well \ninvalidExtension = (link) ->\n  return false unless link.href.match /.[a-z]+$/g\n  return false if link.href.match /.html?$/g\n  return true\n. ^ there are backslashes in there, just didnt come through when i pasted :/\n. confirmed on OS X as well. http response comes back correctly with document response. Issue probably lies in replaceHTML\n. further research shows doc.open and doc.write is not making doc.body available even after doc.close\n. Pull Request submitted with fix\n. my solution was a 1 liner if your going for brief.\n. np, good to know! thanks.\n. not so, hitting back is still firing a fetchReplacement. attempted to cache dom fragment itself, however it appears after a popState the document object is cleared\n. instead of appendChild on document with doc.body using doc.body.cloneNode() prevents loss of data on the dom fragment and allows it to be cached.\n. Forward and reverse caching now works. DOMContentLoaded needed to be used to get initial cache for current page\n. Sure, I have to work today so ill take a look this evening\n. Page caching is saved when the page initially loads so scroll position cannot be saved at that point\n. +1 was gonna say check if a clickHandler already exists before adding or just make it last.\n. XHR Has no way to detect if a request is a redirect. The redirect is captured by the browser before hitting the response. Checked to see if it could be caught onreadystatechange but no dice. This may be a limitation of turbolinks\n. This fixes scroll position, i removed some debug code that got pulled in accidentally from a previous pull request. This changes caching to happen at the same time the scroll position is updated so there is not an extra call to saveScrollPosition. It also has reduced complexity of overall cache logic.\n. Also it doesnt work...it works in Chrome automagically but not firefox.\n. @dhh, Ok so it seems Chrome remembers scroll position but firefox and safari do not.. This pull request plays it safe and does a window.scrollTo() to correct the problem.\n. Is this pull gonna conflict when he tries to merge it in, noticed he renamed a critical method. ill pull down and fix\n. Bump* Resolved merge conflict for whats on master\n. @dhh merged in your cleanup, juuust missed it on last merge\n. made rememberInitialPage lazy initialized again\n. ^ will do working on refactoring now\n. Ok fixed fetchHistory to use body.cloneNode(true) per @sstephenson , limited cache to 10 pages with garbageCollectCache per @dhh, lazy loading per @josh \n. @dhh, hate to sound dumb but can we not fire a dom:loaded event on page:change so we can just monitor document.ready ?\n. we only have to consider the browsers that support pushState which makes it a little easier to deal with.\n. Isnt really an issue with the gem per-say ...removing\n. Could be fixed by setting referer on fetchReplacement\n. Ah, so are we going to have to do a custom header var and server side handling to override referrer?\n. This is actually a history pushstate bug and is already fixed in chromium\nhttp://code.google.com/p/chromium/issues/detail?id=45361\nMay have to wait for that.\n. Also already fixed in firefox 4 and greater..\nhttps://developer.mozilla.org/en-US/docs/DOM/Manipulating_the_browser_history#Adding_and_modifying_history_entries\n. perhaps we can add header X-Push-State-Referer to the request, and leave it to the user to implement a server side solution.\n. Recommend using alias_chain_method for Rack::Request referer method...something like\ndef referer_with_turbolinks\n  @env['X_PUSH_STATE_REFERER'] || referer_without_turbolinks\nend\nalias_chain_method :referer,:turbolinks\nIf we are ok with that approach, ill implement later.\n. personally I almost never use :back, i prefer to be explicit on the redirects. doing it at the rack level would ensure rails treats the request just like any other regular request.\n. We do have to override redirect_to, checked source it uses\nrequest.headers[\"Referer\"] \nnot request.referer to determine back.\n. Probably needs an override to look at custom referee header like redirect_to :back does.\nOn Apr 7, 2013, at 11:57 AM, Robin Chou notifications@github.com wrote:\n\nI think this issue still occurs and I am using turbolinks 1.1.1. Does anyone else have problems with the link_to :back helper generating a link to the current page?\n<%= link_to \"Back\", :back %>\n\u2014\nReply to this email directly or view it on GitHub.\n. PR #234 contains a fix\n. thats true, weird that was rails 3.2.8 as well using link_to helper. Wonder how the parameters got inserted\n. ^ ah, paperclip was adding the ?digests\n. ^ better would be to make sure click event of turbolinks is fired last... makes me wonder if we are respecting data-method as well\n. Suppose so, I'm this deep into it anyway :). \n\nAny thoughts or ideas would be most welcome.\nOn Sep 27, 2012, at 6:24 PM, David Heinemeier Hansson notifications@github.com wrote:\n\n@davydotcom do you want to take a stab at making sure turbolinks run last?\n\u2014\nReply to this email directly or view it on GitHub.\n. done\n. done\n. ^ Refactored it. There was a rare case where you could get a click event to happen after the turbolinks click event.\n\nFixed by taking advantage of the behavior of the bubbling/capture event type. with a beforeClick and afterClick... Also changed so it only happens on valid turbolink links...less overhead\n. ^ this could be due to the click event being the first event to fire initially and it was calling stopEverything... this may work for you now.\n. Ok Give that a shot, major code reduction, added extra fluff code trying to get it to work in the first place...It's a lot simpler now.\n. Ah, i see it. i dont have bootstrap on my test environment so hard to catch that one...one sec\n. ^ correct that is a separate issue. There is a bug if clicking on a non link or anywhere else on the dom other than a link...fixing\n. ok @interhive ... your errors should no longer occur. You will still have issues  on the drop down menu after visiting another page. This is because you need to check page:change (may have to modify bootstrap) to reinitialize (looking into firing a dom loaded event manually as well)\n. @interhive may i suggest this fix if using jQuery... add this to your \nactually doesnt work... checked source jQuery removes all ready events after it fires. no way to get them back\n. @dhh this pull request looks to work, added test to html file as well. Free to review at your convenience\n. @dhh cache uses a cloneNode(true) per @sstephenson and resets events. page:change has to be checked to preserve bindings correct?\n. page:load doesnt even exist in copy from rails/master as a valid triggerEvent\n. ah there they are, was missing latest from rails/master in latest pull request, everything up to date now\n. bump on this, its working for the original pull request goals.\n. @sstephenson, i'm leaning towards agreeing with you at this point. Could further lower javascript overhead on page change as well. If thats what we want ill make that change to go with this pull request.\n. using a setTimeout to accomplish that sounds gross. I avoid that at all costs. The mid-flight adjustment works on all compatible browsers and works pretty well. Im using it in production already. \n. Why would mid-flight event manipulation be a bad idea? technically the bubble/ non-bubble events are separate event stacks.\nObjective: Ensure click event is fired as last event...\nRequires: Changing event execution order\nAnd thats exactly what we are doing, setTimeout is an indirect method to accomplish what we are already capable of doing at the core level.\n. @dhh, note for when you are refactoring... with this fix ignoreLink checking for remoteLink is no longer necessary. remoteLink is captured before the event ever fires.\n. This is in edge pull request, closing\n. This is a known implementation limitation, redirects cannot be captured on the address bar. The browser captures the 302 or 301 and processed before even firing responses on the xhr js side. No way to capture\n. Previous ticket exists #22\n. weird, IE9 does not even support history pushState so this should not even be getting called.\n. Server Side overrides are available in this push request...It's automagic!\n. short summary, redirect_to adds a flash[:x_push_state_location] to save it for the next request (after the redirect has occurred) ... then an after_filter is in place that detects this flash variable and assigns response.headers['X-Push-State-Location']\ntubolinks detects this header on ajax response and adjusts history.replaceState\n. You have to hold the header in the flash becaus a redirect is actually performed as a seperate request by the browser... The redirect sends a location header and a 302 status back... Browser sees that, then makes a request to the URL in location... This is where an after filter detects a flash variable and appends it back to the header... XHR sees the response header only from the final request, and this is where The response header is set.\n. Redirect fix no longer uses FlashHash. Simpler solution is to simply always send X-Push-State-Location on all responses with request.fullpath ... turbolinks catches this and uses window.history.replaceState\n. Edge Pull request closing\n. I would think this is ok. Take a non turbolinks site for example. click a link that is the same page as the page you are on. The browser refreshes. The fact that it does a full page reload could be left that way to force an asset refresh. Or it could be changed to do a DOM refresh.\n. this may be a simple fix to do what you want.\n. fixed, just needed to remove 1 filter.\n. fixed in latest pull @dhh\n. I believe pull request #36 resolves this.. waiting for further review.\n. It does not, but that method executes at startup to determine its \"replacement\" method for the current browser... This fix works but I would rather this execution be lazy\nSent from my iPhone\nOn Sep 28, 2012, at 9:34 PM, David Heinemeier Hansson notifications@github.com wrote:\n\nDid we clarify whether ie9 supports pushState? \nOn Sep 28, 2012, at 13:20, David Estes notifications@github.com wrote: \n\nIE 9 throws exception for invalid format 'text/html' This happens on line 105 where it tests to see if the DOMParser supports text/html. #39 \nYou can merge this Pull Request by running: \ngit pull https://github.com/davydotcom/turbolinks patch-5 \nOr view, comment on, or merge it at: \nhttps://github.com/rails/turbolinks/pull/43 \nCommit Summary \nFixes IE 9 bug \nFile Changes \nM lib/assets/javascripts/turbolinks.js.coffee (3) \nPatch Links \nhttps://github.com/rails/turbolinks/pull/43.patch \nhttps://github.com/rails/turbolinks/pull/43.diff \n\u2014 \nReply to this email directly or view it on GitHub. \n\u2014\nReply to this email directly or view it on GitHub.\n. Lazy it is, createDocument runs and replaces itself with subdefined functions based on compatibility, also executes compatible createDocument to handle first run. I left the try in there on the createDOMParser as this may be useful for IE10\n. whoops, looks like pull request #36 got added into this branch...ill reset tomorrow if #36 does not get approved\n. resetting this branch to only contain IE9 fix. closing and will resubmit.\n. Check that, this patch does not work. Chrome throws error unsafe header \"Accept-Encoding\"...XHR Does not allow this header to be set... :(\n. Also an edge pull request, closing\n. Glad to hear it.\n\n\nSent from my iPhone\nOn Sep 29, 2012, at 5:43 PM, Chris Grant notifications@github.com wrote:\n\nRedirect functionality is working swimmingly. Oh, and I was able to resolve the Bootstrap issues I was having using the 'page:change' event. Thanks again for these features!\n\u2014\nReply to this email directly or view it on GitHub.\n. You should not have to monitor this flash at all. The redirect uses an after filter to set a response header. The response header is all that's needed and turbolinks handles this automatically\n\nSent from my iPhone\nOn Sep 29, 2012, at 5:47 PM, Chris Grant notifications@github.com wrote:\n\nOne thing I did notice in the redirect functionality is that I have to monitor for the :x_push_state_location key in my code:\n- flash.each do |key, msg|\n  - unless key == :x_push_state_location\n    # display code...\n    There's not really any way around this but I thought I'd give the heads-up for those implementing their flash this way.\n\u2014\nReply to this email directly or view it on GitHub.\n. Ah ic your iterating over all flash messages , there is a way to fix this, one minute\n\nSent from my iPhone\nOn Sep 29, 2012, at 5:52 PM, Chris Grant notifications@github.com wrote:\n\nI had to add this because the URL is showing as one of the flash messages. I'll remove the conditional and re-test with the latest commit though to make doubly sure.\n\u2014\nReply to this email directly or view it on GitHub.\n. fixed.\n. ah, yea side affect of patching while watching a Purdue Game... Boiler Up!\n. There ya go. flash.delete(:x_push_state_location) in before filter rather than flash[:x_push_state_location] = nil\n. No problem, I just had a lightbulb moment though. May be able to skip using flash entirely! I'll look at it tomorrow , want to think on it.\n\nSent from my iPhone\nOn Sep 29, 2012, at 6:15 PM, Chris Grant notifications@github.com wrote:\n\nBingo. Good to go!\n\u2014\nReply to this email directly or view it on GitHub.\n. Simplified redirect fix per other pull request, and added iOS 5 patch fix.\n. Haha, simple case of over-thinking it.\n. Hmm, ill check into that. what browser?\n. Execution order for checkHeaders was off by one line. Fixed\n. @dhh thanks. I made most of your changes with exception of using ActiveSupport::Concert. never used it so researching it now.\n. The custom headers are optional in that the turbolinks js is not dependent on them, it gracefully falls back to standard behavior\n. Ok not sure how to use ActiveSupportConcern to alias _compute_redirect_to_location_with_turbolinks(options)..Any tips would be appreciated.\n. Ok I was close, just had the alias_method_chain in the wrong spot... Hows this\n. Changes requested by @dhh have been made\n. Ok I think we are pretty close now, renamed check headers, didnt see that comment in the stream of suggestions ;). Merged modules, renamed initializer  to make more sense now that it was 1 initializer.\n. Pulled in master branch to latest.\n. Haha, no kidding!, I need a coffee now, back to other work.\n. Step 2 is not correct. it is possible to go back 3 pages for example by hitting the back button. now your window.history.length is not in sink with current state. if you push a new page onto the stack the 1+position will not be correct. Hence the reason for using currentState. Close though, let me see if I can come with a fix real quick.\n. not too bad. I submitted another option that reduces the passing of \"position\" around so much. Could be a potential for making mistakes in the future / a bit hard to follow. Im also not sure if we may need to know the current historyState for other situations as we build this out, so I created some wrappers for pushState and replaceState to store that information. \n\nEither solution is valid.\n. That is a possibility as well, it does add complications to the code set. However, it was not solely an iOS5 issue, some older versions of safari also suffer from the issue.\n. Good call +1\n. @vickash, could take a stab at this one?\n. Looks good .\n. This if statement was originally in place because if clicking on the link to the current page the page got cached every time. This is ok as the cache gets replaced and not added on to the cache stack. This is a result of no history pushState due to the new url being the same as the current url (in reflectNewUrl)...\n. I Know inline js shouldn't even be in there but we should support inline js execution if we can.\n. No js in your response body will operate at all.\nThis requires keeping everything out of the view including an init function call.\nThis is due to the use of DOMParser. it appears DOMParser will not evaluate javascript. document.write, however, will evaluate js to a point.\n. Heck, I might jus consider this a feature ! :)\n. Right its also a potential issue that inline js using document references will have the wrong doc reference until after the content is replaced into the main document. A potential option is to scan for script tags after replace and evaluate them.\nOn Oct 1, 2012, at 12:21 PM, Daniel Beattie notifications@github.com wrote:\n\nMy inner arsehole tends to agree with you! This be given thought though - is Rails' stance to simply not recommend doing this, or to prevent it working at all?\n\u2014\nReply to this email directly or view it on GitHub.\n. I got it to work by modifying changePage to get all script elements. I have not made a pull request yet, as i know @dhh is doing a major refactor. But this may be useful... document also gets the proper reference because they are not evaluated until after the fact.\n\nchangePage = (title, body) ->\n  document.title = title\n  document.documentElement.replaceChild body, document.body\n  scripts = document.body.getElementsByTagName 'script'\n  eval(script.innerHTML) for script in scripts\n  currentState = historyState\n  triggerEvent 'page:change'\n. Fixed\n. Fix submitted as(ref #56 pull request)\n. merged into edge pull request and made requested change...closing this pull request.\n. could this be simplified to state that if any script or link tag does not exactly match the first page load head, do a full page reload...Including if an extra asset is defined\n. Pull request #67 has this change, assetsChanged method is not too brilliant...if asset count is different or asset order is different, it will state true. You could potentially expand it to not care about asset order\n. never mind, I made it smarter.\n. @sstephenson made a comment regarding this in #36 pull request suggesting it.\n. I shoved this into #67 pull request.\n. It's replacing the hole page, so the way you could fix your problem is using the page:change and page:load events. Store position and restore\nSent from my iPhone\nOn Mar 13, 2013, at 12:47 PM, Jamon Holmgren notifications@github.com wrote:\n\nWould it be possible to disable this behavior for particular links? We're building a page with sidebar links acting as \"filters\" and it's jarring when the page scrolls to the top every time they click a filter. Maybe something like:\nlink_to product_filters_path(@filters), data: { no_scroll: true }\nI realize we could rebuild it using ajax, but that was the primary reason we wanted to use Turbolinks.\nI can submit a pull request if this is desirable.\n\u2014\nReply to this email directly or view it on GitHub.\n. i dont think so, those events fire so quickly that i believe it will set position before the webkit renderer kicks in . Give it a shot if it continues. we'll figure something else out .\n. No problem.. Haha, my brain was goin 90 miles an hour on this project... Now I can focus on other things :)\n\nSent from my iPhone\nOn Oct 3, 2012, at 6:01 AM, David Heinemeier Hansson notifications@github.com wrote:\n\nYou are a machine! Great work on all of this.\n\u2014\nReply to this email directly or view it on GitHub.\n. If you look at createDocument it actually does a \"test parse\" every time createDocument is called to see if DOMParser works. So there is definitely some overhead in determining which parser method is best suited for the browser you are using. While it may not be a ton of overhead, and I don't have benchmarked numbers at the moment. It could be an issue. The original method replaced itself at load with a do -> section of code.\n. Done, had to move createDocument = null to top, error otherwise. \n. i would suggest modifying the youtube player code to :\n\nvar firstScriptTag = document.body.getElementsByTagName('script')[0];\n. one option to fix this is to rememberAssets to run immediately but a race condition could still occur in which the youtube script tag could get added too early.\n. The analytics code wont work correctly anymore anyway from a straight copy. You have to modify it to send trackPageView on page:change. So this may be a limitation where those scripts will need modified to work with turbo\n. Perhaps this would be a case where someone could add some Wiki guides to using some of the standard analytics / youtube code with turbolinks\n. Thinking about this some more, would a solution be to add an attribute to the dynamic script tags to tell them to get ignored by asset change detection.\n. Issue resolved with request #72, i would just make sure turbolinks is included before any dynamic js script tags.\n. Im not sure if this will work in all cases. For example yes, now it can see that the asset is in the head on the first request. But any subsequent requests will be missing that script, which could still cause the asset change to fire.\n. I may have a fix, testing now.\n. Issue resolved with request #72, i would just make sure turbolinks is included before any dynamic js script tags.\n. Im seeing several libraries verifying replaceState. It makes me nervous to leave this out. Also, moving the function to the top doesn't really make sense. where it was before was close to where it was used and made it a little easier to follow.\n. No, it just runs. and sets initialized = false;\nIf initialized = false it recreates the date picker div. If initialized = true, .datepicker() on an object will not create the div.\nIt's kinda lazy initialized.\nOn Oct 5, 2012, at 9:56 AM, David Heinemeier Hansson notifications@github.com wrote:\n\nHow is the datepicker currently initialized? Using jQuery.ready?\n\u2014\nReply to this email directly or view it on GitHub.\n. Also,\nI looked into firing document.ready() as an event for jQuery, but unfortunately jQuery removes the events from the event listener as they are fired from the ready event. So there is no way to re-fire those events.\n\nOn Oct 5, 2012, at 9:56 AM, David Heinemeier Hansson notifications@github.com wrote:\n\nHow is the datepicker currently initialized? Using jQuery.ready?\n\u2014\nReply to this email directly or view it on GitHub.\n. Ah, thanks\n\nOn Oct 18, 2012, at 10:52 PM, Ryan Florence notifications@github.com wrote:\n\n... or open tickets with jQuery UI (and everybody else in the world) to jump hoops to decide if their widgets have been blown away or not :P\n. Actually there is already a ticket and pull request for the date picker to fix this bug anyway. The bug is the fact that if the dpDiv does not exist in the body, to readd it.\n\nThis affects more than just turbolinks, it apparently affects some other edge cases as well.\nOn Oct 19, 2012, at 8:05 AM, davydotcom@gmail.com wrote:\n\nAh, thanks\nOn Oct 18, 2012, at 10:52 PM, Ryan Florence notifications@github.com wrote:\n\n... or open tickets with jQuery UI (and everybody else in the world) to jump hoops to decide if their widgets have been blown away or not :P\n. This was originally mentioned in the issue, however it causes the date\npicker to add multiple event listeners\n\n\nOn Wednesday, December 19, 2012, Rafal wrote:\n\nI know that this ticket is closed but I solved this problem in different\nway:\n$(document).on 'page:change', ->\n  $.datepicker.initialized = false\nIt works like a charm.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rails/turbolinks/issues/76#issuecomment-11527748.\n. also, twitter-bootstrap-turbo gem \"clone\" of twitter-bootstrap-rails with turbo support is available in the interim. It uses a different solution to solving the problem, I actually prefer the pull-request solution over mine, but they both work. \n. That's pretty nice, however maybe out of scope here... One note is he binds to page:change where page:load would be more appropriate\n\nSent from my iPhone\nOn Oct 9, 2012, at 6:45 PM, Ryan Walker notifications@github.com wrote:\n\n@yury mentioned jquery.turbolinks as a possible fix to the issue as well.\nI wonder if turbolinks should detect if app has jquery, and if so, apply the following code from https://github.com/kossnocorp/jquery.turbolinks/blob/master/src/jquery.turbolinks.coffee\n$ = require?('jquery') || window.jQuery\nList for store callbacks passed to $ or $.ready\ncallbacks = []\nCall each callback in list\nready = ->\n  callback() for callback in callbacks\nBind ready to DOM ready event\n$(ready)\nStore callbacks in list on $ and $.ready\n$.fn.ready = (callback) ->\n  callbacks.push(callback)\nBind ready to Tubolinks page change event\n$(document).on('page:change', ready)\n\u2014\nReply to this email directly or view it on GitHub.\n. Man the more I look at jquery.turbolinks, the more I think this is awesome. @dhh, would potentially adding this as another asset in the gem be a good idea? Something like add this to your manifest for jquery support. etc.\n. The ONLY, downside I see to kossonocopr jquery.turbolinks solution is that the order in which these js files are included become very important.\n. Not if its a seperate js file that you can require in your manifest optionally.\n. Ok, been thinking about this for a bit. We definitely need to disable turbolinks on POST/PUT request loads. \n\nProblems Presented: No javascript solution to detect request method, and history pushState not smart enough to change request method.\nPotential Solution: We already set a X-XHR-Location header on every request on the server side. What about also, setting a Cookie titled \"Request-Method\" that contains the active pages request method, and modify the javascript to detect this value.\n. I know its a Cookie, but seems much cleaner and can cover a broader range of edge cases than other solutions presented. @dhh may have input on the use of Cookies here.\n. This takes care of pushstate  in general. The easy way server side trick you have mentioned would definitely work , however you have to manually be aware of the issue and apply this. A more automatic solution would be better.\nSent from my iPhone\nOn Oct 18, 2012, at 2:45 AM, Matthieu Barthel notifications@github.com wrote:\n\nThanks for the work. I don't feel comfortable with your hack, it seems complicated. The easy way server side would be :\n>\nAlso, your commit doesn't take care if the browser is webkit based or not. As it looks like a webkit issue, I don't know what's the best way to treat it\n\u2014\nReply to this email directly or view it on GitHub.\n. cookie seems to be the best way to convey information to the javascript, since we dont have access to the header. \n. Ill submit a pull request to fix this tonight. If the baby is asleep.\n. I believe the intersection method may be able to be modified to work if assets are added. Ill research this a bit more.\n. Ok so here are some things I found. the rememberAssets() call being moved to run immediately rather than on link click (due to dynamic javascript additions), has a downside. In Chrome, at least, the asset for the javascript file that is including turbolinks will not detect any script tags below the script for asset change detection. Im not quite sure how to solve this yet. \n. It applies to your branch such that, due to the dynamic js being added to the head by (for example) analytics code, your code may detect a removal on subsequent pages if we have to change that back.\n. Im not sure this is necessary. As, when you may share your page on facebook, I believe facebook makes a full load request to get these opengraph tags. So as long as they get changed on a full page reload, I do not believe turbolinks needs to change these.\n. But it does bring up a point of customizing what may get loaded from a turbolinks request. and what we store in the cache. @dhh, would it potentially be a good idea to pass the pageCache object as a parameter to the triggered page:change and page:load events so the received document can be scanned for any custom headers a user may need?\n. Oh, this one is going to be just awesome. Since Chrome is simply using a UIWebView control they may be using some interesting js hacks to accomplish a true browser feel in the first place.\n. have an idea that might fix this. I know Chrome for iOS is a WebView wrapper. usually the only way to get event hooks out to native Objective C is to use urls and catch them in the delegate for a UIWebview. It may be possible to fix this if we restrict turbolinks to only fire on links that have no protocol defined or have http or https ?\n. Sweet, is it actually working or doing its graceful fallback?\n\nOn Wednesday, December 19, 2012, Ryan Ahearn wrote:\n\nFWIW, I tested a site I wrote that uses turbolinks 0.6.1 today in Chrome\nfor iOS and it seems to work fine.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rails/turbolinks/issues/82#issuecomment-11535191.\n. If its not doing a full reload than yup it's working. Awesome... @dhh I\nthink we can close this\n\nOn Wednesday, December 19, 2012, Ryan Ahearn wrote:\n\nI'm not actually sure. It's not falling back to a full page reload as\nthere's only one request for the page. Is there a way to tell if its\nworking based on production logs?\nOn Wednesday, December 19, 2012 at 10:59 AM, David Estes wrote:\n\nSweet, is it actually working or doing its graceful fallback?\nOn Wednesday, December 19, 2012, Ryan Ahearn wrote:\n\nFWIW, I tested a site I wrote that uses turbolinks 0.6.1 today in\nChrome\nfor iOS and it seems to work fine.\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/rails/turbolinks/issues/82#issuecomment-11535191>.\n\n\u2014\nReply to this email directly or view it on GitHub (\nhttps://github.com/rails/turbolinks/issues/82#issuecomment-11535250).\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rails/turbolinks/issues/82#issuecomment-11535371.\n. This may be related to using the new Date().getTime instead of window.history.length patch\n. i thought it was gracefully falling back already. am I wrong on that assumption?\n. hah ok. one sec.\n. @dhh there you go issue #161 pull has a check on initializeTurbolinks if browserIsntCriOS\n. There is a pull request that fixes this\n\nSent from my iPhone\nOn Nov 22, 2012, at 12:17 AM, leaf notifications@github.com wrote:\n\nThe logic is still broken. The size of the intersection should be equal to the size of the new set of assets and equal to the size of the remembered assets.\nWhy are you even using an intersection function? It's just making things more confusing. The set operation you are looking for is: http://en.wikipedia.org/wiki/Symmetric_difference\nHere's a slow but functional solution:\nassetsChanged = (doc) ->\n  not setsAreEqual extractAssets(doc), assets\nsetsAreEqual = (a, b) ->\n  for item in a\n    return false if item not in b\nfor item in b\n    return false if item not in a\ntrue\n\u2014\nReply to this email directly or view it on GitHub.\n. The intersection can never be greater than the new asset array, only equal or less ... So only one equal detection needs to happen\n\nSent from my iPhone\nOn Nov 22, 2012, at 12:17 AM, leaf notifications@github.com wrote:\n\nThe logic is still broken. The size of the intersection should be equal to the size of the new set of assets and equal to the size of the remembered assets.\nWhy are you even using an intersection function? It's just making things more confusing. The set operation you are looking for is: http://en.wikipedia.org/wiki/Symmetric_difference\nHere's a slow but functional solution:\nassetsChanged = (doc) ->\n  not setsAreEqual extractAssets(doc), assets\nsetsAreEqual = (a, b) ->\n  for item in a\n    return false if item not in b\nfor item in b\n    return false if item not in a\ntrue\n\u2014\nReply to this email directly or view it on GitHub.\n. This can be closed as #113 resolved it.\n. In the case of this issue, simply detecting if the current view was a POST/PUT request, and disabling turbolinks for that page view, all of these issues can be resolved.\n. ^ granted this is harder than it sounds,  as we cannot access the current active documents response headers.Which may mean a server side solution may be necessary.\n. The issue, is not only does it affect form submissions, but it breaks the refresh button. History push state does not change the request method as you further traverse the site.\n\nOn Oct 17, 2012, at 8:04 PM, Nick Reed notifications@github.com wrote:\n\nI get what you're saying. I was trying to prevent having to disable turbolinks after every POST/PUT request, since there aren't any problems (that I could see) after a successful form submission (where there's a redirect). And I was using the sessionStorage to detect the form submissions, but if you think a server-side solution is better, I won't argue.\n\u2014\nReply to this email directly or view it on GitHub.\n. Exactly, and this Cookie option would resolve that.\n\nSent from my iPad\nOn Oct 17, 2012, at 9:07 PM, Nick Reed notifications@github.com wrote:\n\nThe issue is that the refresh button breaks after a POST/PUT request doesn't redirect. If the server redirects, then the last request method is GET and there are no issues with push state going forward.\n\u2014\nReply to this email directly or view it on GitHub.\n. You cannot always assume a form was re-rendered with errors... A search field form would be an example here. As after doing a search we could still be on the same url.\n\nSent from my iPhone\nOn Oct 17, 2012, at 9:07 PM, Nick Reed notifications@github.com wrote:\n\nThe issue is that the refresh button breaks after a POST/PUT request doesn't redirect. If the server redirects, then the last request method is GET and there are no issues with push state going forward.\n\u2014\nReply to this email directly or view it on GitHub.\n. Ah, good call. I like that better. Ill think about it a little more today. Just want to make sure we get all the potential POST request issues covered here. I think this one may do that. Another thought I had is to potentially add a feature to turbolinks where it uses turbolinks ajax to actually do the form submissions like pjax does. We would still need a fix like this for data-no-turbolinks style forms.\n. Should work ok, haven't tested though. Can we get a test scenario added to the pull request?\n. Hold on this #79 would resolve this issue.\n. What if an external site fires a post request and you render something on the page. This would not catch that. The cookie solution would catch all possibilities of a POST event from behaving improperly. This isn't a bad solution, but would rather have a broader catch on this.\n\nOn Nov 26, 2012, at 3:51 PM, Nick Reed notifications@github.com wrote:\n\nUsing a cookie? My second commit (410093e) eliminates the need to check any server-side information.\n\u2014\nReply to this email directly or view it on GitHub.\n. #79 may resolve this. I'm a little confused with what you are saying, but basically if a cookie is set titled say: \"Request-Method\" and its value is not GET or blank. Then turbolinks will actually not even initialize and standard web behavior will be in affect.\n. Yes ... @dhh take a look when you can\n\nSent from my iPhone\nOn Nov 26, 2012, at 7:52 PM, Nick Reed notifications@github.com wrote:\n\n@davydotcom Is this what you had in mind?\n\u2014\nReply to this email directly or view it on GitHub.\n. @dhh we close on this one?\n. Ok cool, I'll go through some of these other issues later see if we can close them.\nOn Jan 11, 2013, at 9:44 AM, David Heinemeier Hansson notifications@github.com wrote:\nLooks good to me. Apparently it needs a rebase though.\n\u2014\nReply to this email directly or view it on GitHub.\n. +1\n. wow @dhh on a role today :)\n. Page:load doesn't fire on initial document ready\n\nSent from my iPhone\nOn Dec 9, 2012, at 9:39 AM, Marc-Andr\u00e9 Cournoyer notifications@github.com wrote:\n\nMaybe I'm missing something, but couldn't all this code be replaced w/\n$.fn.ready = (callback) -> $(document).on 'page:load', callback\nWhat's the point of reimplementing callback dispatching?\n\u2014\nReply to this email directly or view it on GitHub.\n. perhaps it may be better afterall to leave jquery.turbolinks as a seperate gem seeing as how there are still updates being made and in the event jquery library itself has any changes, may be easier to get updates pushed out rather than including here.\n. heh, was just about to write...good to merge, you beat me to it.\n. right now i believe this is running as an after_filter, perhaps changing to a before_filter would resolve this.\n. :+1: @dhh \n. This is true, actually not a difficult fix either. This was implemented before turbolinks decided to retain events on the dom on page change.  I would recommend avoiding writing any js in the document.body if you can avoid it. This was added to help those who couldnt do that for various reasons.  \n\nHowever, now that the dom is preserved in the history, along with all event listeners, this really needs to only be executed on page:load type fetch requests and not when pages are restored from history cache.\n. I'll try and submit a pull request that does just that this evening for you.\n. @fklingler would appreciate testing on pull request #91 with regards to your issue.\n. I believe this issue can be closed now.\n. If you go through the limit,the page is refetched which will clear your event listeners as well. So even if you pass the cache limit. It should work properly. I'll try a test case tomorrow but without seeing how you have binded events, it's a bit difficult to test.\nSent from my iPhone\nOn Oct 18, 2012, at 3:49 AM, Fran\u00e7ois KLINGLER notifications@github.com wrote:\n\nI did not test this solution for now, but I think I already see a problem with that implementation : the historyCache has a limit, so if you go through this limit, issue #90 is still there.\n\u2014\nReply to this email directly or view it on GitHub.\n. Try $(document.body).on or avoid binding to document for events like this.  Your right this fix would not directly fix. document binds but it would fix child element binds like document.body.\nThe document object is persisted across page changes, it's events do not clear on page:change.\n\nSent from my iPhone\nOn Oct 18, 2012, at 5:05 AM, Fran\u00e7ois KLINGLER notifications@github.com wrote:\n\nHmm ok I just tested it and it does not solve the problem I have :-/, even when there is cache.\nTo give more explanations (and detail issue #90)\nI bind the event like that (in coffeescript):\n$(document).on 'nested:fieldAdded:steps', (event) ->\n    event.field.find('a.add_nested_fields').click()\nI have a \"double\" nested form (with ryanb/nested_form), and when I add a field in the first nesting level, I want that a field is automatically added in the second nesting level.\nIf I go on the page once, only one field is added in the second nesting level, but if I go to the same page another time, the second-nesting-level-field is added twice (or even more if I go to the same page multiple times)\n\u2014\nReply to this email directly or view it on GitHub.\n. Hah, leave this issue open, I'll reply with a more descriptive explanation in a few hours \n\nSent from my iPhone\nOn Oct 18, 2012, at 5:16 AM, Fran\u00e7ois KLINGLER notifications@github.com wrote:\n\nOk this works great now, thanks! Even though I did not really understand how it works x).\n\u2014\nReply to this email directly or view it on GitHub.\n. Ok, quick explanation as to why switching to $(document.body).on() inside your script tags that are in the body.\n\nOne of the reasons turbolinks makes link following so much faster is that it does not have to reload shared assets. To accomplish this, the only thing that gets replaced on a page load is the document.body and the title tag.\nThis means that any event listeners you add to document, will not go away on page change. (Really, another reason why not putting javascript in the document body can be a good idea.). However, any document.body and childNodes on the page will loose their event listeners on a fresh page:load , (though not on a page:change, which is when a page is pulled out of the history cache).\nSo, by moving your event listener to the document.body, we now ensure that the event gets reset on page:load.\nHope that helps you understand a bit more.\n. It does before my patch. My patch fixed it because of the page:change does not loose events.\nIt is different because, we have a copy of the state of the dom for each history cache. The events already exist as a result of this. It also makes it quicker to jump back and forward through history.\nOn Oct 18, 2012, at 9:05 AM, Fran\u00e7ois KLINGLER notifications@github.com wrote:\n\nThank you very much for your explanation, even though I did not understand it entirely:\nHowever, any document.body and childNodes on the page will loose their event listeners on a fresh page:load , (though not on a page:change, which is when a page is pulled out of the history cache).\nDoes the document.body lose its event listeners on a page:load before your patch ?\nAnd why is it different between the page:load and just the page:change (from history cache) concerning this issue ?\n\u2014\nReply to this email directly or view it on GitHub.\n. I discovered this myself, on a blog site I was working with turbolinks on last weekend with regards to rss. I wrote this particular chunk of code and forgot to consider those cases. Blame me for that one :/\n. closable\n. very important difference between page:load and page:change...\n\npage:load is a fresh dom request only\npage:change is fired every time a page is changed. This includes cached DOMS. For performance, the DOM history is cached (up to 10) This means binded events within document.body (or .body itself) are preserved, and refiring on ready events may not be necessary as you would accidently add an event handler again.\n. There is already an open pull request that fixes the asset changed detection for your 2nd issue\nSent from my iPhone\nOn Oct 19, 2012, at 12:59 PM, Jonathan del Strother notifications@github.com wrote:\n\nThere's two parts to this pull request - the first commit tweaks extractAssets to only consider javascript and stylesheet tags, rather than also considering RSS links, oembed tags etc, as discussed at rails/turbolinks#92.\nThe second commit I'm less sure about... I think the current logic of assetsChanged is wrong, but perhaps it's too late on a Friday afternoon and my brain has stopped working. AFAICT, the current behaviour will ignore new scripts - say the current page has scripts A and B, and the new page has A, B, and C, the intersection is just A,B, and so assetsChanged returns false. @davydotcom, could you take a look?\nYou can merge this Pull Request by running:\ngit pull https://github.com/jdelStrother/turbolinks assetsChanged\nOr view, comment on, or merge it at:\nhttps://github.com/rails/turbolinks/pull/94\nCommit Summary\nOnly consider ",
    "spadin": "@josh I think you're right. But I'm not sure of a good implementation for that. One solution could be to call replaceState in the popstate callback before calling fetchReplacement that might also be a good opportunity to save the scroll position too.\n. ",
    "jcoglan": "Seems like it would be plenty easy to develop this as a platform-agnostic JS project, which is what it is, and provide a gem for glueing it into Rails (which should not be necessary, but that's a different kettle of fish).\nThat way you still get to package it in a way that Bundler can understand, but the library is not locked up inside a Ruby project when JS users want to apply it to other environments. The 'vinegar' you mention only serves to harm reusability.\n. As a friend of mine has pointed out, the readme states that \"Turbolinks is designed to be as light-weight as possible\". Coupling the distribution of a single JavaScript file to a completely unrelated language runtime, web framework, compiler toolchain and package manager seems at odds with this statement.\n. I agree with you that it's unlikely since it requires very precise timing. I just think it's worth implementing in a way that definitely works, rather than a way that probably works. You're using document.cookie to implement semantics that it doesn't support.\n. Apologies for not replying before. I was suggesting you implement it using a tag or script embedded in the page, rather than using a cookie. Deleting on read does nothing to combat this problem since the problem is caused by another request changing the cookie in the time between receiving the current request's headers and executing the page's JavaScript.\n. It's worth noting that on slow networks the time window for this bug to manifest can be very large, and concurrent requests could easily break things. It's worth doing an implementation that isn't prone to this race condition at all, by construction.\n. Why not?\n. ",
    "troyk": "nope, not hard at all, just one more setup step before being able to get shit done.  In case anyone happens to come across this because turbolinks.js.coffee errors it's probably because you need to add coffee-rails directly to your Gemfile if your running a threaded server, otherwise you'll run into WARN: tilt autoloading 'coffee_script' in a non thread-safe way; explicit require 'coffee_script' suggested.\nHowever, bitching aside, thank you for Turbolinks!  I just put it in and it is very cool!\n. ",
    "badcarl": "For example: badcarl/turbolinks@62b5901\n. Pull request sent to bootstrap: https://github.com/twitter/bootstrap/pull/5308\n. Pull request on bootstrap addressing this: https://github.com/twitter/bootstrap/pull/5308\n. ",
    "colinyoung": "Thanks @badcarl and @josh for being on top of this so soon after Turbolinks was released. Using it right now.\n. ",
    "deepakdargade": "issue solved by specifying data-no-turbolink=\"true\"\n. working fine for me.\nFor adding data-no-turbolink attribute in all the links\njavascript\ndocument.addEventListener(\"page:change\", function() {\n  //jquery selector\n  $(\"a[data-remote='true'], a[href='#']\").attr(\"data-no-turbolink\",\"true\")\n});\nand then load the turbolinks.\n+1 for handling this in turbolinks itself.\n. issue solved by specifying data-no-turbolink=\"true\"\n. +1\n. ",
    "4ware": "Nope, not really \"solved\". I've got many occurances of href=\"#\", href: \"#\", href='#' or similar througout my app. it would be really good to handle this in turbolinks.\n. ",
    "fklingler": "It seems to work great on my app, it seems to be managed by this method\n. :+1:, that looks very great.\nCan I have a clue on how to implement the X-Push-State-Location on the server to \"fix\" issue #22 ?\n. Sorry, didn't see that, that's really great ! :-)\n. On a rails project (not on the test pages), the back button of the browser doesn't work.\nIf i comment the following lines, it works again !\ncoffeescript\nif(location = xhr.getResponseHeader('X-Push-State-Location'))\n  historyReplaceState currentState, '', location\n. Tested mainly on Chrome, but it does not work on Safari or Firefox either. (if I remember well)\n. Thanks for the fix, I had trouble finding where the issue was. It's really great now.\n. About that, the test suite manages it without the headers, it shows that it works well... But maybe we should do a test suite with Rails so we can test the redirect code ?\n. What is the actual easiest way to do so that when we submit a form, the page is not completely reloaded (like with internal links in turbolinks) ?\n. I don't know how to explain it simply, so I'll explain with the context :\nOn a SaaS project I can manage all the brands when I'm superadmin, so I made a select to select the brand I'm currently working on. The managed brand is not a param in the route, since the brand managers can only work on their brand.\nThe current brand_id is just stored in session when you are superadmin. So the select only calls an action in ajax which change the current brand, and then reloads the page.\n. I did not test this solution for now, but I think I already see a problem with that implementation : the historyCache has a limit, so if you go through this limit, issue #90 is still there.\n. Hmm ok I just tested it and it does not solve the problem I have :-/, even when there is cache.\nTo give more explanations (and detail issue #90)\nI bind the event like that (in coffeescript):\ncoffeescript\n$(document).on 'nested:fieldAdded:steps', (event) ->\n    event.field.find('a.add_nested_fields').click()\nI have a \"double\" nested form (with ryanb/nested_form), and when I add a field in the first nesting level, I want that a field is automatically added in the second nesting level.\nIf I go on the page once, only one field is added in the second nesting level, but if I go to the same page another time, the second-nesting-level-field is added twice (or even more if I go to the same page multiple times)\n. Ok this works great now, thanks! Even though I did not really understand how it works x).\n. Thank you very much for your explanation, even though I did not understand it entirely:\n\nHowever, any document.body and childNodes on the page will loose their event listeners on a fresh page:load , (though not on a page:change, which is when a page is pulled out of the history cache).\n\nDoes the document.body lose its event listeners on a page:load before your patch ?\nAnd why is it different between the page:load and just the page:change (from history cache) concerning this issue ?\n. I think that this should be in another method, like noRemoteLink(link)\n. Oops ! ;)\n. :+1:  @davydotcom...\n. ",
    "RickWong": "+1 for moving this fix (really) into turbolinks itself.\n. ",
    "kennon": "I realize that this is \"Rails-specific\" and may not apply to the scope you're intending for Turbolinks, but as it's probably going to be used by many rails sites, it strikes me as a sensible default.\nOr, barring that, should there be a turbolinks-rails file?\n. +1 from me, we've probably spent entirely too much mental time today on a literally 2 minute, 0.5 line change!\nOn Sep 27, 2012, at 4:37 PM, David Heinemeier Hansson wrote:\n\nLet's go with the put-turbolinks-last approach. Then we don't need this specific opt-out as data-remote will itself cancel the event before it reaches turbolinks.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "subimage": "So @dhh is the idea that redirect_via_turbolinks_to is supposed to be used with a format.js {} block? I see that it outputs JS. How are you guys handling that @ 37s for Basecamp?\n. ",
    "sstephenson": "We're going to want to do a deep clone of the cached document.body (document.body.cloneNode(true)), both when we save it and when we restore it:\n- When it's saved, cloning the tree recreates the elements without any attached event handlers or data, so handlers can be safely re-added when the page:change event fires.\n- When it's restored, if we didn't clone the tree again we'd reuse the same tree for successive hits to the cache.\n. Now that we can distinguish between a fresh page load event and a cached page load event, perhaps it's fine not to clone the cached DOM trees and just leave the handlers attached. /cc @josh\n. Oh, and good luck with this one. Chrome provides essentially no debugging tools aside from alert.\n. Nope, just tried the latest Turbolinks on Basecamp and it's still not working in Chrome.\n. There's no roadmap right now. Turbolinks 5 is still an R&D project here at Basecamp. Continue using the current version, and we'll make sure there's a migration path everyone's happy with when the time comes.\n. I don\u2019t think you\u2019re likely to encounter this in a real app. It\u2019s a rate limit of 100 state change operations per 30 seconds, not a hard limit of 100 operations.\n. ",
    "pomartel": "Wouldn't it also be helpful to have a before-change event like there is in pjax? This way I could put the FB tags in a variable and reinject them when the page:change event is triggered. Not yet sure this is the best way to proceed it would add some flexibility.\n. It's regarding the load of Facebook JS SDK. The SDK creates an iframe that is used to communicate with Facebook. To keep that iframe in between requests, I have to do something like this :\n```\nfetchingPage = ->\n  fb_root = $('#fb-root').detach()\npageChanged = ->\n  $('#fb-root').replaceWith fb_root\n```\nThe fetchingPage method would need to be called whenever a page change is triggered (from cache or from the server). This would make things more consistent I guess since page:change is always called no matter if it's fresh or from cache.\n. Ok, I understand what's going on. I detach the fb-root div before the page is cached. When it is fetched for cache, that div doesn't exist anymore in the DOM so the replaceWith call doesn't work.  I found a work-around that does not require page:fetch to be called when the page is cached. Thanks for your help!\n. @m4n, here is essentially my solution. It's been working on my production site for over a month without any glitch. Don't hesitate to drop me a line if you have any question.\n``` coffeescript\nfb_root = null #variable use to transfer the state of the fb-root div tag between page requests\n$ ->\n  load_facebook_sdk()\n  $(document)\n    .on('page:fetch', fetching_page)\n    .on('page:change', page_changed)\nfetching_page = ->\n  $(\"body\").addClass(\"wait\")\n  fb_root = $('#fb-root').detach()\npage_changed = ->\n  if $('#fb-root').length > 0\n    $('#fb-root').replaceWith fb_root\n  else\n    $('body').append fb_root\n  $(\"body\").removeClass(\"wait\")\n  facebook_sdk_loaded()\nload_facebook_sdk = ->\n  window.fbAsyncInit = initialize_facebook_sdk\n  $.getScript(document.location.protocol + \"//connect.facebook.net/#{$('#fb-root').data('locale')}/all.js\")\ninitialize_facebook_sdk = ->\n  FB.init\n    appId      : $('#fb-root').data('app-id')\n    channelUrl : $('#fb-root').data('channel-url')\n    status     : true\n    cookie     : true\n    xfbml      : true\n  FB.Canvas.setAutoGrow()\n  facebook_sdk_loaded()\nfacebook_sdk_loaded = ->\n  $(document).trigger(\"fb:initialized\")\n  @scroll_top(150)\n```\n. @kwantopia More information on the topic here : http://reed.github.io/turbolinks-compatibility/facebook.html\n. @moomerman You could also try what I do with the Facebook SDK and keep your player alive by detaching that content from the DOM tree before fetching the new page. I'm not sure that would work with an audio player though. Some code here #62\n. Thanks for your help Nick! I forked Turbolinks and tried your second solution and it almost worked. I display three buttons on the page, one for each plan. That's what it looks like on a fresh page load  and that's what it looks like with Turbolinks when I apply your patch.\nI read the JS source code of the Stripe Button and what the script does basically is take all the script elements with the class \"stripe-button\" and insert the button after the last one. This works on a fresh load since the script is not delayed and everything after the script tag has not yet been loaded. This won't work with Turbolinks though since the page has been fully loaded when the scripts are executed.\nI guess there is not much we can do about that. For now, I just disabled Turbolinks for that specific page but I will contact Stripe support (they have great support!) to see if they could think of another way of doing this.\nI still think your patch would be helpful. Maybe you could suggest a pull request?\n. ",
    "houen": "This page has a good solution that I am using: http://www.blackfishweb.com/blog/asynchronously-loading-twitter-google-facebook-and-linkedin-buttons-and-widgets-ajax-bonus\n. Might as well post it as well:\njavascript\nif (typeof (FB) != 'undefined') {\n    FB.init({ status: true, cookie: true, xfbml: true });\n}\nelse {\n    $.getScript(\"http://connect.facebook.net/en_US/all.js#xfbml=1\", function () {\n        FB.init({ status: true, cookie: true, xfbml: true });\n    });\n}\n. ",
    "eugenemiretsky": "So basically you have to reload the FB SDK on every page load? One of the reasons why i wanted to use turbolinks was to save the time it takes to initialize it. \n. ",
    "reed": "@eugenemiretsky does this work for you?\nreednj77.github.com/turbolinks-compatibility/facebook.html\n. Sorry, I messed up the markup.  Try this:\nreed.github.com/turbolinks-compatibility/facebook.html\n. Matt,\nI'm having trouble reproducing your problem.  How are you triggering the initial post action?  Is it a form submission, or are you doing something like binding a click event handler on a link that submits an ajax post? \n. Ah, I misunderstood your original post and was testing after a successful submission.  I tested a failed submission, and I can confirm the issue you're seeing.  It appears to be a browser-specific issue, as the reload attempted a POST in Chrome and Safari, but not Firefox (all three on a Mac).\n. @sailor It's a bug in the latest version of chrome.  See #187 \n. In the past, I've been alright with adding support for meta tag management, so I think it's @dhh you should be asking.\n. I get what you're saying.  I was trying to prevent having to disable turbolinks after every POST/PUT request, since there aren't any problems (that I could see) after a successful form submission (where there's a redirect).  And I was using the sessionStorage to detect the form submissions, but if you think a server-side solution is better, I won't argue.\n. The issue is that the refresh button breaks after a POST/PUT request doesn't redirect.  If the server redirects, then the last request method is GET and there are no issues with push state going forward. \n. Are you implying that my solution doesn't? If so, can you explain why?  I'm just wondering because I haven't been able to find a scenario where it doesn't work.  \nI don't doubt that using a cookie would work.  I considered using a cookie too, but I wasn't sure if using one was frowned upon or not.\n. Here's a simplified version of my solution, which doesn't try to detect if there was a redirect or not.  It just disables turbolinks after a form submission.  I figure it can't hurt to run this past you.  If you still think a server-side solution is better, just say the word and I'll close this request.\n. Unless I'm mistaken, it seems like that's what was proposed in issue #64.  I agree that it'd be a good feature to have.\n. Using a cookie?  My second commit (410093e4ed6172bb162c5bab3a278edcf1ca9e87) eliminates the need to check any server-side information.\n. @davydotcom Is this what you had in mind?\n. @davydotcom How does it look now?  I also added some documentation since people would otherwise be wondering why TL isn't running on certain pages.\n. Cleaned up and rebased.  Should be good to go now.\n. Submitted a pull request to fix the Rails tests: rails#8946\n. Would this work?\ncoffeescript\n$(document).bind 'page:load', ->\n  $.getScript $('.stripe-button').attr 'src'\nI can't answer your question about whether or not Turbolinks should handle external scripts, but if so, this could possibly be a way to handle it:\ncoffeescript\nexecuteScriptTags = ->\n  for script in document.body.getElementsByTagName 'script' when script.type in ['', 'text/javascript']\n    if script.src? and not script.getAttribute('data-turbolinks-evaluated')?\n      copy = document.createElement 'script'\n      copy.setAttribute attr.name, attr.value for attr in script.attributes\n      copy.setAttribute 'data-turbolinks-evaluated', ''\n      parent = script.parentNode\n      parent.removeChild script\n      parent.insertBefore copy, parent.childNodes[0]\n    else\n      eval(script.innerHTML)\n. I didn't think to test multiple buttons on the same page, but now that I have, I see what you're seeing.  It is certainly a bit unorthodox the way the Stripe button JS works, and I completely agree with your assessment on how to proceed from here.  Since Stripe's Button feature is still in beta (according to their documentation), this is something I would think their support team would be willing to consider fixing.\nThanks for your opinion on my patch.  I'm going to submit a pull request for it in a few minutes. \n. Here are two ways you can handle this:\n1. Convert the JS snippet that Twitter provides into a named function, move it into one of your application JS files, and bind it to both the document ready and page:load events.  Take a look at #131 for more details on the general premise.\n2. Cut out the middle man.  Just put this in the body:\nhtml\n<script src=\"//platform.twitter.com/widgets.js\"></script>\nNote that the execution of external script tags within the body was just recently pulled into turbolinks (#88), so the only way you can use the second method is to either wait for the next version (0.5.3) or point your gemfile to the github repo.\n. I created a new app with Rails 3.2.9 and Turbolinks 0.5.2, generated a scaffold resource, then added :target => '_blank' to one of the links.  Clicking the link opened the page in a new tab as expected.  I tried this in Chrome, Firefox, and Safari.  \nHow does your scenario differ from the one I set up?  When you click the link, does it load the page in the existing window, or does the link not work at all?\n. What browser(s) are you seeing this in?\nWhen clicking the link loads the page in the same window, is it loading the page with Turbolinks?\nIf you inspect the source, what does the HTML for that link look like?\n. I believe that's a separate issue (see #118).  Setting config.assets.debug = false and ensuring that Turbolinks is the last script in your manifest should resolve it for the time being.\nI still can't replicate your issue.  Can you provide some code?  I'd specifically like to see how you're calling link_to and the HTML it produces.\n. It's just personal preference.  I like the way I did it, but I'd have no issue with changing it.  I'll leave it up to @dhh to decide how he wants it before adding another commit.\n. Take a look at issue #118.  Until we have it fixed, you should be able to get your example app working by changing the  application.js manifest from:\njs\n//= require jquery\n//= require jquery_ujs\n//= require turbolinks\n//= require_tree .\nto: \njs\n//= require jquery\n//= require jquery_ujs\n//= require_tree .\n//= require_self\n//= require turbolinks\n. Hey, thanks for including an example.  Here's what's happening.  By design, turbolinks will ignore non-html links, which means any url that ends with .[a-z].  So, when it sees a link to /users/john.doe, it has no choice but to be safe and assume \"doe\" is a mime type and just treat it like a normal link.  I don't think we'll be able to prevent this side effect, as it's impractical, if not impossible, to verify that \"doe\" isn't a valid mime type.\nThat doesn't mean you can't fix it on your end, though.  Just add a trailing slash to the url, like /users/john.doe/.  That has an effect on caching, though, so it might not be worth it.\n. Take a look at #127.  That should fix things for you.\n. I cloned your repo and confirmed that turbolinks wasn't working.  Then, after changing the js manifest to what you see below, the problem was resolved.  Is that not the case for you?\njs\n//= require jquery\n//= require jquery_ujs\n//= require_tree .\n//= require_self\n//= require turbolinks\n. This might help you with livereload: #100\n. What if you move the script to the body and make two small changes to the code like you see below?  Does it work then?\njs\n// Before\nwindow.$zopim ||\n// After\nwindow.$zopim = null;\njs\n// Before\nd.getElementsByTagName(s)[0]\n// After\nd.body.getElementsByTagName(s)[0]\n. Is that actually causing a problem, other than cluttering up the HTML?  What if you did something like this?\njs\nfunction zopim_chat(){\n    $('[__jx__id], embed#__zopnetworkswf').remove();\n    // rest of function\n}\n. Awesome.  I'm glad I could help.\n. Since we're now explicitly declaring which assets to remember and thus don't have to worry about dynamically added scripts, couldn't we just wait to extract the current assets until a link is clicked?  Like this?\n``` coffeescript\ncurrentAssets = null\nassetsChanged = (doc) ->\n    currentAssets ||= extractTrackAssets document\n    newAssets = extractTrackAssets doc\n    newAssets.length isnt currentAssets.length or intersection(newAssets, currentAssets).length != currentAssets.length\n```\n. Yeah, I'll submit it in a few minutes.\n. I can submit the pull request for you if you want.  Is this what you had in mind?\ncoffeescript\nexecuteScriptTags = ->\n  for script in document.body.getElementsByTagName 'script' when script.type in ['', 'text/javascript'] \n    copy = document.createElement 'script'\n    copy.setAttribute attr.name, attr.value for attr in script.attributes\n    unless script.src? and script.src isnt ''\n      try copy.appendChild document.createTextNode script.innerHTML\n      catch e\n        copy.text = script.innerHTML\n    parent = script.parentNode\n    parent.removeChild script\n    parent.insertBefore copy, parent.childNodes[0]\n. Good call (on all of those suggestions).  I'll make the changes and submit the pull request shortly.\n. The issue is with the mail_to method's use of document.write.  When using the javascript encoding, it simply creates a script element that looks like this:\nhtml\n<script>eval(decodeURIComponent(\"encoded string\"));</script>\nWhich is really going to be:\nhtml\n<script>eval(\"document.write('<a href=\\\"mailto:me@domain.com\\\">My email<\\/a>');\");</script>\nThis works fine if the page is loading, but if you call document.write anytime after the page is loaded, it will overwrite the entire document.  So that's what you're seeing.  The issue isn't really Turbolinks-specific, as it would behave this way anytime you grab html containing a mail_to :encode => javascript from the server via ajax and insert it into the DOM.  \nI checked the PJAX project, and sure enough, there's an open issue for this exact same problem: https://github.com/defunkt/jquery-pjax/issues/178\nI think the only way to really fix this is to change how the mail_to method creates the link.  I was able to get it working by changing these lines:\nruby\ncase encode\nwhen \"javascript\"\n    string = ''\n    html   = content_tag(\"a\", name || email_address_obfuscated.html_safe, html_options.merge(\"href\" => \"mailto:#{email_address}#{extras}\".html_safe))\n    html   = escape_javascript(html.to_str)\n    \"document.write('#{html}');\".each_byte do |c|\n        string << sprintf(\"%%%x\", c)\n    end\n    \"<script>eval(decodeURIComponent('#{string}'))</script>\".html_safe\nto this:\nruby\ncase encode\nwhen \"javascript\"\n  string = ''\n  set_attributes = ''\n  html_options.merge(\"href\" => \"mailto:#{email_address}#{extras}\".html_safe).each_pair do |name,value|\n    set_attributes += \"a.setAttribute('#{name}', '#{value}');\"\n  end\n  create_link = \"var script = document.getElementsByTagName('script');\" +\n                \"script = script[script.length - 1];\" +\n                \"var a = document.createElement('a');\" +\n                \"#{set_attributes}\" + \n                \"a.appendChild(document.createTextNode('#{name || email_address_obfuscated.html_safe}'));\" +\n                \"script.parentNode.insertBefore(a,script);\"\n  create_link.each_byte do |c|\n    string << sprintf(\"%%%x\", c)\n  end\n  \"<script>eval(decodeURIComponent('#{string}'))</script>\".html_safe\nI put the entire method in a gist: https://gist.github.com/4242930.  Put it in an initializer and let me know if it fixes the issue for you.  If it does, I can submit a pull request to rails for this.\n. @codeblooded Ah, sorry about that.  I changed those variable names from what I had been testing with.  I'm glad it worked for you.  \n@dhh Good idea.  Are you going to work on that, or would you like me to?\n. Will do.  So we're on the same page, do you want me to remove all the encoding from the core method, so it looks something like this?\n``` ruby\ndef mail_to(email_address, name = nil, html_options = {})\n  email_address = ERB::Util.html_escape(email_address)\nhtml_options = html_options.stringify_keys\nextras = %w{ cc bcc body subject }.map { |item|\n    option = html_options.delete(item) || next\n      \"#{item}=#{Rack::Utils.escape_path(option)}\"\n  }.compact\n  extras = extras.empty? ? '' : '?' + ERB::Util.html_escape(extras.join('&'))\nemail_address_obfuscated = email_address.to_str\n  email_address_obfuscated.gsub!(/@/, html_options.delete(\"replace_at\")) if html_options.key?(\"replace_at\")\n  email_address_obfuscated.gsub!(/./, html_options.delete(\"replace_dot\")) if html_options.key?(\"replace_dot\")\ncontent_tag \"a\", name || email_address_obfuscated.html_safe, html_options.merge(\"href\" => \"mailto:#{email_address}#{extras}\".html_safe)\nend\n```\n. @dhh I was playing it safe, but I agree with you.  I'll get started on the extracted gem before submitting a pull request to slim down the core method.\n. @dhh How does this look? reednj77/rails_encoded_mail_to\n. Happy to do it.  Here's the renamed repo: reednj77/actionview-encoded_mail_to\nDo you plan on moving this into rails/actionview-encoded_mail_to or is it fine under my account?  It doesn't matter much to me, but I'm going to hold off on publishing the gem until I know where the project is going to be stored.\n. After publishing the gem, I did: rails/rails#8523\n. Thanks for the feedback.  I'm probably going to maintain this version alongside the master from this point forward.  That way it'll be ready to go if we ever need it.\n. I chose to go with \"reset\" because the word has two meanings.  It can mean \"to set again\", which applies to the current recallScrollPosition(), or it can mean \"to restore to zero\", which applies to the current resetScrollPosition().  \nI think naming the parameter 'runScript' would be limiting.  What if, down the line, we need the changePage method to perform another action that's dependent on the source (cache or xhr) of the new page?  Then having a runScript variable wouldn't make sense.  Plus, in my opinion, when you call a method, you should pass it information, not instructions.  But I understand your point about passing in true not being very descriptive.  It wasn't my first choice, but it was the cleanest.\n. I'm not seeing the same behavior.  These are screenshots from IE 10, but IE 9 gave the same results:\nSite with port in URL:\n\nSite without port in URL:\n\nCould you provide an example of what you're seeing that's different?\n. @elia No, I was unable to reproduce it in Windows 8.\n. @elia But I couldn't reproduce it in any browser/OS setup.  Which either means that the issue is specific to your environment or I'm not testing an identical scenario.  Can you give me some more details on what's going on when you see this problem?  It looks like you're using Pow, but where is it running and how is it configured?  And what does the link that you checked in your screenshot look like?\n. This would create a dependency on Rails 4.0, wouldn't it?\n. I don't see the harm in providing an option for exempting scripts from execution after changing the page.  It could be implemented with half a line of code.  Just have the executeScriptTags function ignore scripts that have a data-turbolinks-run-once attribute.  \nI can submit a PR if anyone else thinks it's a good idea.\n. I'm having trouble seeing a scenario where window.history.state is null at this point in the script.  Attempting to follow your example, the call to Turbolinks.visit in the ajax callback would first trigger reflectNewUrl (which will set window.history.state) before calling changePage.  Could you help me out with what I'm missing?\nIf I'm wrong (entirely possible) and this fix is necessary, then do you think it might be better to implement it in one line by just putting the if condition at the end of the existing line? \n. Reopen this if you find a way to reliably reproduce the issue.\n. The page:restore event is triggered after a page is loaded from cache.  Isn't that what you're looking for?\n. Nothing to be sorry about.  I'm glad you were able to get your issue resolved.\n. I found this article:\nhttp://www.redkart.com/google_adsense.html\n...and used the basic premise to come up with this solution, which appears to work on the sample app you provided:\n1. Add the following script tag to the head, above the application.js file:\nhtml\n   <script src=\"//www.google.com/jsapi\"></script>\n2. Define these classes somewhere in your application's JS:\n``` coffeescript\n   class Adsense\n     constructor: (@ad_client) ->\n       if google?\n         google.load 'ads', '1'\n         google.setOnLoadCallback @initPage\n         @ads = {}\n         $(document).on 'page:fetch', =>\n           @clearAds()\n         $(document).on 'page:load', =>\n           @initPage()\n initPage: =>\n   ad.load() for id, ad of @ads\n\n clearAds: ->\n   @ads = {}\n\n newAd: (container, options) ->\n   id = options.format + '_' + container.id\n   @ads[id] = new Ad @, id, container, options\n\n```\n``` coffeescript\n   class Ad\n     constructor: (@adsense, @id, @container, @options) ->\n load: ->\n   if @ad_object? then @refresh() else @create()\n\n refresh: ->\n   @ad_object.refresh()\n\n create: ->\n   @ad_object = new google.ads.Ad @adsense.ad_client, @container, @options\n\n```\n3. Add this line to your application's JS to initialize adsense\ncoffeescript\n   window.MyAdsense = new Adsense \"ca-pub-4379359399658390\" # your google_ad_client id\n4. Create a container with an ID for each ad on the page\nhtml\n   <body>\n     <%= yield %>\n     <div id=\"my_ad\"></div>\n   </body>\n5. Add a script tag to the body of the page that will initialize the ad:\nhtml\n   <script>\n   window.MyAdsense.newAd(document.getElementById('my_ad'), {\n     'format': google.ads.LEADERBOARD,\n     'ad_slot': \"4746598348\",\n     'ad_width': 300,\n     'ad_height': 250\n   });\n   </script>\nAnd you should be set.  \n@guangnan @caarlos0 Can you guys try this out and see if it works?\n. Cool, thanks for the feedback.  I'm glad it worked for you.\n. Have you tried using jquery.turbolinks?\n. I've helped people get a handful of these third party javascript snippets ( Facebook, Twitter, Stripe, Zopim, Map-Generator, etc. ) working with turbolinks, and I'm fairly certain that none of them would be fixed by triggering DOMContentLoaded on page:change. Could you provide an example of one that would be fixed by doing this?\n. I can think of a few ways, but it's hard to say which is going to be best for you. \n1. In the function that you're binding to the scroll event, you could put a condition to only take action if the current page is the one you want. \n2. If the current page is the one you need the scroll callback on, do a one-time bind on page:change to unbind the callback. \ncoffeescript\n$(document).on 'page:load', ->\n  if page is scrollPage   # pseudo code \n    $(window).bind 'scroll', customScrollFunction\n    $(document).one 'page:change', ->\n      $(window).unbind 'scroll', customScrollFunction\nIf neither of these work for you, I can give you some other ideas.\n. With third party scripts like these, I've found that the key to making them turbolinks-friendly is to first figure out what they do, and then hack that behavior in some way.  For example, I figured out that you can fix your map-generator problem by adding this to your site's javascript:\ncoffeescript\n$(document).bind 'page:load', ->\n  initializeMgMaps() if $('#mggapiloader')?\nWith that, I was able to get a basic example working.  \nI can't help you with the other two services since you didn't provide any code for me to work with, but I encourage you to try to hack them on your own.  It'll give you a better understanding of what these scripts are doing to your site.  Check out issues #119 (Twitter) and #131 (Zopim) for ideas on how you might be able to fix them.  If you get stuck, I'll be happy to help.\n. This is essentially the same concept proposed in #143, which was rejected by DHH.  The implementation is different, but I don't know if that's enough to change his mind.\n. Each time I saw this problem (which wasn't every time), I was able to fix it by opening the console and executing this command:\njavascript\n$('#page').masonry('reload');\nBetter yet, I was able to prevent it from happening on all subsequent pages by entering this:\njavascript\ndocument.addEventListener('page:load', function(){ $('#page').masonry('reload'); });\nHave you tried that?\n. I could be wrong but I would think that you'd want to run that fix on page:load, so it should look like this:\njavascript\n$(document).on('page:load', function(){\n   $('#page').waitForImages(function(){\n      $('#page').masonry('reload');\n   });\n});\nHopefully using waitForImages works for you, but if it doesn't, I would suggest creating an issue on the masonry project.  While your issue is a side effect of using turbolinks, it isn't really a turbolinks issue.  Therefore, the solution is going to come in the form of manipulating masonry, so you'd be better off asking someone with a better understanding of masonry for help.  If, in doing so, you discover something that turbolinks could or should be doing better, then by all means let us know. \n. @dhh Sure, I can do that.\n. If you bind to a link's click event and then call event.preventDefault(), Turbolinks won't take over.  Like this:\ncoffeescript\n$('#link').on 'click', (event) ->\n  # ...\n  event.preventDefault()\nIs that what you had in mind?\n. This is an interesting idea, but there are couple bugs in your implementation.\n1. Your method of appending the nodes to the head will not trigger script nodes to execute.  You'll have to use the same method we use in executeScriptTags().\n2. You're not replacing the head tags when we fetch a page from the cache.  In order to do that, you'll have to add the nodes with data-turbolinks-replace to the cache objects.  Also, we don't want the script tags to execute when fetching from the cache, so we'll have to account for that as well.\n3. I'm sorry to nitpick, but you misspelled replaceable in extractReplaceableNodes.\nI think you can fix these bugs by doing this:\n``` coffeescript\nfetchReplacement = (url) ->\n  # ...\n  else\n    changePage extractTitleAndBody(doc)...\n    replaceHeadNodes extractReplaceableNodes(doc.head), true\n    reflectRedirectedUrl xhr\n  # ...\nfetchHistory = (state) ->\n  # ...\n  changePage page.title, page.body\n  replaceHeadNodes page.replaceableHeadNodes\n  recallScrollPosition page\n  # ...\ncacheCurrentPage = ->\n  # ...\n  pageCache[currentState.position] =\n    url: document.location.href,\n    # ...\n    replaceableHeadNodes: extractReplaceableNodes document.head\n  # ...\nreplaceHeadNodes = (nodes, execute) ->\n  document.head.removeChild node for node in extractReplaceableNodes(document.head)\n  for node in nodes\n    if execute\n      copy = document.createElement node.nodeName\n      copy.setAttribute attr.name, attr.value for attr in node.attributes\n      copy.appendChild document.createTextNode node.innerHTML\n      document.head.appendChild copy\n    else\n      document.head.appendChild node\n```\n. @dhh what do you think of this?  If he makes the changes I suggested, I like it.  Gives developers more control in a manner that promotes the use of turbolinks, as opposed to providing ways to circumvent it. \n. I think the submitter should defend his idea, but I'll throw this out there:\nThere are plenty of third-party API's that use page-specific meta tags, like Facebook's Open Graph or Twitter Cards (both of which you'd find in the source of this page).  I think this would make compatibility easier to achieve.  \nOur current method of handling asset changes just falls back to a normal page load if there are any changes.  Using this solution would allow assets to change without abandoning the turbolinks session. \n. Yeah, you're right.  I was under the (false) impression that those meta tags (for FB and Twitter) are used by the javascript they have you embed in your page.   I still wouldn't be surprised if there are libraries that do use meta tags like that, but without an example, my argument is dead on that front.\nI think this solution has value, but I don't feel strongly enough about it to continue advocating for it if Marc-Andre doesn't need it anymore.   \n. Closing in favor of #200 \n. If you put that code (in your second comment) in the body, it's going to bind a new function to the page:fetch event on every page load.  So, after the initial page load, if you visit two pages via turbolinks, your next page:fetch event will trigger three separate functions that call alert('fetched').  To guarantee the function only gets bound once, you should either move the code into the head, or bind the code to execute on page ready.  \nWith regards to Olark, I'm not sure you're going to be able to get it working with turbolinks.  I was only able to give it a quick look, but the script that it runs does a lot.  It creates a handful of cookies, sets a JS timeout, adds a few scripts and stylesheets to the DOM, creates an iframe in the body, etc.  Hacking it so that it can reinitialize on every page would be pretty messy.  When I get a chance, I'll dig a little deeper and see if I can get it working.  You may want to contact Olark's support team and see if they have any suggestions.\n. Sweet, I'm glad you got it working.  I was trying a similar solution, but I don't have an Olark account, so it was difficult for me to test it.  I saw errors in the console and figured it was broken, but according to the post, it works despite those errors.  Thanks for being proactive and sharing the solution you found with us.  I'll be sure to include it in the compatibility readme that I'm working on.\n. I summed up that article here:\nhttp://reed.github.io/turbolinks-compatibility/olark.html\nIf there's anything you'd like me to add to it or change, let me know.\n. Would this pull request work for you?\n. Yeah, this is normal behavior.  Turbolinks is only applied to link tags (<a>).  The button_to helper creates a form with an input (type: submit) element, so clicking it won't trigger turbolinks.\n. Have you considered using data attributes instead of global variables?  \nhtml\n<body data-item=\"<%= item.to_json %>\">\n(I used the body element in that example, but it could be any element in the body.)\nRegardless, the example of using a script to set page-specific variables is a great use case for your existing pull request (#165), isn't it?  If it were to be pulled in, all you'd need to do is move the script to the head and add data-turbolinks-replace to it.  Right?\n. Actually, disregard that last paragraph.  If you make the changes I suggested for that PR, the script still wouldn't be executed on page:restore.  Not sure what I was thinking there.  \nThe decision to not execute scripts when fetching from the cache was deliberate (#91).  It prevents the rebinding of event handlers.  So I don't think that's something we'd want to revert.  \nI'd be interested to know how you'd go about implementing the second solution you proposed.\n. If you bind your variables to document.body instead of window, they wouldn't persist across page changes, and they would be cached with the page so there would be no issue with page:restore.  Is there any reason why that wouldn't work?\nIn regards to how you're caching the window.meta variable, it seems easy enough, but I'm more curious to know how you'd propose we go about caching all user-defined global variables.  As you pointed out, using the meta variable isn't a generic solution.  \n. I can confirm the issue (with both Firefox 9 and Opera 12.12), but this doesn't fix it.  It gets rid of the exception, but the end result is a full page load if you're tracking any assets.  Here's why:\ncoffeescript\nDOMParser_proto.parseFromString = (markup, type) ->\n  if (/^\\s*text\\/html\\s*(?:;|$)/i.test(type))\n    doc = document.implementation.createHTMLDocument(\"\")\n    doc.body.innerHTML = markup\n    return doc\n  else\n    return real_parseFromString.apply(this, arguments)\nWhen this gets called by turbolinks, the markup variable is going to contain the entire page that we just retrieved from the server.  So when you assign it to doc.body.innerHTML, you're inserting the entire page into the body. As a result, the head will be empty and all of your scripts will be in the body.  If you're tracking any assets, turbolinks will then reload the page because it believes the assets have changed.  If you're not tracking any assets, then turbolinks will change to this new page and execute all the scripts in the body, which will be all of your scripts.  \nThe DOMParser extension code that you use is actually different from what was included in issue #168.  That implementation solves the problem I just described by assigning the markup to doc.documentElement.innerHTML.  Updating your pull request with this change would make it valid, but I don't think it's the way to go.  I think overloading a built-in browser function should be avoided at all costs (unless it's your application).  Luckily, I think we can avoid it.  I submitted a pull request (#175) for how I would implement it.  Can you check it out and see if it works for you?  \n. Updated with comments.\n. It's more of a browser issue.  When javascript appends a noscript tag containing a style tag to the DOM, the browser appears to apply the CSS, ignoring the fact that it's inside a noscript tag. \nI'm about to submit a PR to handle this issue.  It's just going to remove all the noscript tags from the body.  For the time being, you can fix your application by adding this to your javascript:\ncoffeescript\n$(document).on 'page:change', ->\n  $('noscript').remove()\n. Can you provide some more details?  How does php factor in to your Rails app?\n. So you're not using Rails at all?\n. Well, it's written specifically for Rails.  You could probably get it working with PHP, but you're going to have to implement the backend functionality defined in turbolinks.rb.  Part of that functionality deals with redirects, so that's likely the cause for your issue.   \n. When you say you \"moved the include tag for application.js to the bottom of your template\", where exactly are you putting it?\n. Keep the application.js in the <head>.  Otherwise, Turbolinks (and all the rest of your JS) will reload on every page.  \n. The only way turbolinks would be handling remote links is if the unobtrusive javascript driver isn't working.  Does updating to the latest jquery-ujs (by updating the jquery-rails gem) have any effect?\n. @davidray You're welcome.  I'm glad you got everything working.\n. To answer your question, I don't think we've had any CDN-related issues submitted until now.\nI've never used Cloudflare, but I just looked through their site and it seems that it does a lot of things (more than a standard CDN) that could interfere with how turbolinks works.  Without knowing more specific details on what it does, there's not much I can tell you.  Turning off Cloudflare, like you suggested, could very well be your only option.   \n. I can think of a way turbolinks could handle this, but it'd be messy and would result in the file being sent from the server twice.  That especially wouldn't be good for large files.  I think the best and fastest way to handle this is to do what you said and just add the data-no-turbolink attribute to the link.\n. I think most of what you're trying to say can be inferred from other parts of the readme.  That said, I think it might be helpful if we just added a line to the \"Evaluating script tags\" section saying something like:\nAs a rule of thumb when switching to Turbolinks, move all of your javascript tags inside the head and then work backwards, only moving javascript code back to the body if absolutely necessary.\nWhat do you think?  \n. Good catch.  Thanks for submitting a fix.\n. Everything you described is working as intended, except of course the browser triggering a POST request.  I tried to reproduce your issue but couldn't.  \nHow is your form being submitted?  What version of Chrome are you using?\n. So the form isn't being submitted via ajax?\n. After submitting the form with correct data, instead of visiting another page and reloading, just reload that initial page (the one you were redirected to).  Does the browser attempt a POST?\n. Turbolinks shouldn't have any role in the process you just outlined.  So I'm curious: if you remove Turbolinks from your app, does the problem go away?  (When testing, reload the initial page after submission, like you just did.)\n. Well something else is wrong, because the browser shouldn't be submitting a POST request when reloading after a form submission that redirected.  \nI have a vanilla rails app with one scaffold resource and turbolinks disabled, and using the same version of chrome as you, reloading the page after creating a resource results in a GET request.  \nWhat does your controller code look like?  (specifically, the redirect code)\n. I realized the same thing.  You're not doing the redirect wrong.  It appears to be a bug in the latest version of Chrome:\nhttps://code.google.com/p/chromium/issues/detail?id=177855&q=reload&colspec=ID%20Pri%20Mstone%20ReleaseBlock%20OS%20Area%20Feature%20Status%20Owner%20Summary \n. No problem.  Hopefully they fix it quickly.\n. What do you mean when you say the function isn't invoked successfully?  What's happening?\nAfter all the changes you made, what does your code look like?\n. Closing due to no response from submitter.  If you decide you still need help with this, open an issue on the turbolinks-compatibility project and I'll be happy to work with you.\n. The solution is written in coffeescript.  If you're inserting it directly into a script tag, it won't work.  It needs to be compiled into javascript, either manually or via the Rails asset pipeline.\n. Same issue as #187 \nIt's a bug in Chrome that appeared in version 25.  There's an open ticket for it:\nhttps://code.google.com/p/chromium/issues/detail?id=177855&q=reload&colspec=ID%20Pri%20Mstone%20ReleaseBlock%20OS%20Area%20Feature%20Status%20Owner%20Summary\nIf you need to implement a workaround, you could try adding data-no-turbolink to the body of the page that's rendered after a successful form submission.  Then the next link that's clicked will trigger a full page load, which will wipe away the problem.\n. That works.  How is it breaking font awesome icons?\n. Confirmed that the issue with Turbolinks is resolved in the latest Canary build (27.0.1441.0).\n. An exact duplicate of Turbolinks Compatibility issue #4.  Closing this in favor of having the discussion there.\n. Thanks for catching and fixing this for us.\n. @mariovisic I aim to please!\n. This actually crossed my mind a few days ago.  My thought was that it should be triggered right after the asset check so that it doesn't run your callbacks if the page is about to do a full page reload.  Just thought I'd throw that out there in case it changes your thinking at all.  \nI'd like to have DHH weigh in before taking any action on this.  He seemed open to a similar concept proposed in #25.  \nAdministratively, I'd suggest that you change the name to page:receive so that it matches the tense of the other events.  Also, it'd be great if you could add documentation to the README about this event.\n. Looks good.  Thanks for making those changes.\n. @dhh are you cool with this?\n. Thanks for informing us of these issues.  For the first one, could we fix it by just removing the hash when checking the link type?  Like this:\n``` coffeescript\ncurrent - returns false for /sample.csv#hoge.html\nnonHtmlLink = (link) ->\n  link.href.match(/.[a-z]+(\\?.)?$/g) and not link.href.match(/.html?(\\?.)?$/g)\nfixed - returns true for /sample.csv#hoge.html\nnonHtmlLink = (link) ->\n  url = removeHash link\n  url.match(/.[a-z]+(\\?.)?$/g) and not url.match(/.html?(\\?.)?$/g)\n```\nThis would fix the example you have in your demo, but would it fix all cases?\n. How does this pull request look?\n. Yeah, nice catch.  I updated the PR.  Do you think it's sufficient now?\n. Alright, so I guess we'll just stick with the content-type check for now.\n. This looks good.  Would you be willing to consider a few cosmetic suggestions?\n``` diff\n-  def is_sameorigin(a, b)\n+  def same_origin?(a, b)\n     a = URI.parse(a)\n     b = URI.parse(b)\n-    a.scheme + a.host + a.port.to_s == b.scheme + b.host + b.port.to_s\n+    [a.scheme, a.host, a.port] == [b.scheme, b.host, b.port]\n   end\ndef abort_xdomain_redirect\n     to_uri = response.headers['Location'] || \"\"\n     current = request.headers['X-XHR-Referer] || \"\"\n-    if (!to_uri.empty? && !current.empty? && !is_sameorigin(current, to_uri))\n+    unless to_uri.blank? || current.blank? || same_origin?(current, to_uri)\n       self.status = 403\n     end\n   end\n```\n. I just pulled it in.  Thanks again for pointing out these security issues and helping us resolve them.\n. I can see both sides of this issue.  The turbolinks mantra that all scripts should go in the head is an easy one to promote, and implementing this solution would undercut that.  It would also open up the scenario where the performance of turbolinks page loads degrades, which could happen if you were to move large inline scripts to the body.  \nOn the other hand, considering that the entire goal of turbolinks is increased speed, it seems silly to ignore Mario's valid concerns about the speed of the first page load.  For sites with large amounts of javascript, I think the benefits of this solution outweigh any potential pitfalls we may be concerned about.\nMy vote would be to implement this solution, provided it comes with clear and concise documentation in the README outlining the scenarios where you should or shouldn't use it.\n. Running these benchmark tests on localhost is missing the point.\n. Alright, I think we've discussed this enough. \n@dhh final verdict?\n. Looks good.  Before I pull it in, could you please remove the .DS_Store file from the PR?\n. Thank you\n. Thanks for responding.  I can't say I agree with your first line, though.  It's not a case of coupling Turbolinks to CSRF tokens because if you aren't using CSRF tokens, Turbolinks won't care.  So it's a case of Turbolinks supporting CSRF.  It's essentially the same implementation as keeping the title attribute current, except it's not required.  Instead of saying that \"TL has to care about CSRF tokens\", I'd say that \"TL will care about CSRF tokens if the server does.\" \nI have no problem with your solution, but it was essentially rejected because the only valid use case we could come up with was CSRF meta tags.  So that's the mindset I took when deciding to construct a solution that just deals with CSRF automatically and transparent to the users.  \n. @macournoyer (#165) and @satb (#171) both outlined scenarios where the token would change between turbolinks requests.  \nIf your login link uses the jquery_ujs driver (:remote => true, :method => :post) and your app calls reset_session when a user signs in (as is recommended in the Rails security guide), the csrf token would change, wouldn't it?\n. If someone finds an issue with this solution, then we can easily change it to abandon the TL session.\n. The bootstrap:layout generator puts the javascript_include_tag at the end of the body.  Move it to the head and I think you'll be good.\n. Glad I could help.\n. We need to change the spinner example, because it wouldn't work.  Starting the spinner on page:fetch is good, but by the time page:change fires, the body has been replaced, so the spinner that was started doesn't exist anymore.  The other problem with page:change is that it's fired when restoring a page from the cache, so you'll again be trying to stop a spinner that isn't spinning.  \nI implemented a spinner on one of my sites, and the solution I used was to start it on page:fetch and stop it on page:receive.  If you agree with that implementation, could you update the PR to use page:receive instead of page:change?  The rest of your changes look good.\n. Yeah, I agree with you.  Thanks for making the change.\n. Yeah, you're doing it right.\n. Good call.  What do you think about using return instead of undefined?  They achieve the same result, but return looks better and actually compiles to nothing, while undefined compiles to return void 0;.\n. Using cloneNode wouldn't preserve event listeners, so that wouldn't be ideal.  \nI'm not sure I follow your scenario where you're able to access cached pages.  If you could post some code, I might be able to help you prevent it from happening.\n. Is it necessary to remove the views?  Why can't they be cached?  \nWhat does the code for removing the views look like?  Are you wanting to the views to be removed from the existing page or the new page?\n. Closing due to inactivity.  Feel free to reopen if you want to continue the discussion.\n. It's a nice feature, but I'm not sure it needs to be incorporated into Turbolinks.  I think most people wouldn't have a need to use it, and those that do might want to handle it differently.  You were able to implement it cleanly in just a few lines, and that seems sufficient to me.  \nThe only way I'd see merit in persisting the scroll position on elements is if we could do it automatically (and internally) for all elements, essentially mimicking browser behavior and thus eliminating the need to declare specific elements to persist.  I can't think of an efficient way to do that, can you?  \n. If you really want this, I think it could easily be bundled as a separate gem.\n. Thanks for the PR, but I don't think it's necessary now that we have the page:receive event.  The only thing that could occur between page:receive and page:unload is a full page reload, so any time the page:unload event fires, it will have been preceded immediately by a page:receive.  So the two aren't really distinguishable from one another.  Your example would function exactly the same if you use page:receive instead of page:unload.  The only difference is that sometimes you'll be running the @dispose() method unnecessarily because the page is about to reload.  \n. I'm not sure the explicit example is necessary, but I do think the phrase \"mark a div with data-no-turbolink\" is a little ambiguous.  If we fix it with something like \"add a data-no-turbolink attribute to a div\", do you think it'd be clear enough so that we wouldn't need the example?\n. Well, your first thought was correct: data-no-turbolink is a data attribute since it starts with data-.  I still think you wouldn't have had a problem if the readme specifically referred to it as an attribute, but if you insist on the need for an example, let's at least make it more useful.  Let's change it from an example showing \"how to add an attribute to an element\" to one that illustrates the attribute's effect.  Maybe something like this:\nhtml\n<a href=\"/\">Home (via Turbolinks)</a>\n<div data-no-turbolink>\n  <a href=\"/\">Home (without Turbolinks)</a>\n</div>\nThoughts?\n. Do you want to update your pull request?\n. Try switching to the patch-1 branch of your repo, then browse to the readme file.  This link should take you there: https://github.com/marcamillion/turbolinks/blob/patch-1/README.md.  You should be able to edit it there, and any commit you make should be added to the pull request.\n. Sorry to make you change it again, but I think we can get rid of the \"The marked div would look like this:\" line. \n. @marcamillion I'm sorry, I didn't notice you added that last commit.  Thanks! \n. The solution works, but I'm wondering if it's necessary.  If your users are running into this bug, it means your site contains broken links.  Rather than relying on Turbolinks to compensate for that, it makes more sense to me to just fix the broken links.\n. I'm not sure what good that does, besides making more work for both of us.  If your concern is that someone browsing the commit history might wonder what the purpose of the clientError() check is, they'd have three ways to figure it out:\n1. The code is commented with a link to the bug report.\n2. The commit message describes what it's purpose is.\n3. The title of this PR includes a link to your PR.\n. Included these changes in merge of #209\n. Depends on the changes you want to make.  Do what you think makes more sense.\n. I agree with you that the documentation could be clearer in explaining the order in which the events are fired, but your assessment is only partially accurate.  If the page is being retrieved from the cache, only the change and restore events will fire.\n. Looks good, but it's not just the back button.  It tries to load from the cache when the popstate event is fired.  The back button, the forward button, history.back(), history.forward(), and history.go() all trigger the popstate event.\n. Yeah, it's common and acceptable.  It's actually the essence of the jquery.turbolinks gem, and I think the documentation in that section if sufficient enough to where we don't need to add any examples here.  \nAs for what you have so far, I'd say it looks good.  I'm not sure we need to list out all the actions that trigger popstate, though.  Seems a little verbose to me, but I'll let you make the call on whether it's needed since you're doing the work.\n. Yeah, absolutely.\n. Closed with #217 \n. I want it to return false.  I don't want to put all my trust in the browser to stop executing the javascript once we tell it to reload.  If a browser bug ever presents itself that breaks that expected functionality, your implementation would throw an error because the code in fetchReplacement would just keep going as if everything was ok.  I wrote the code like this specifically to safeguard against that. \nIn addition, anyone reading the current fetchReplacement code can instantly tell that if validateResponse finds the response to be invalid, the rest of the code won't be executed.  Someone reading your implementation would have no idea that validateResponse might prevent the next line from running.  \nI appreciate the time you took to submit the request, but I'm going to stick with the existing code.  \n. Looks good, but I think we might be able to make it better.  What if instead of filtering the array of scripts, we just ask for a filtered array?  Like this:\ncoffeescript\nscripts = Array::slice.call document.body.querySelectorAll 'script:not([data-turbolinks-eval=\"false\"])'\nWhat do you think?\nAlso, if you don't mind, can you add an entry to the changelog file for this?\n. Perfect.  Thanks!\n. A similar question was asked a while back.  Check out #128 and let me know if you still have questions.\n. There are ways around it, like I mentioned in that issue, but no, there's no way to configure turbolinks to bypass this check.\n. Can I see an example?  I tried it out and it opens in a new tab like it's supposed to.\n. This is an issue with Twitter Bootstrap's Dropdown plugin, not Turbolinks.  See issue #7118 for more information.\nIf you want proof that it's not Turbolinks-related, go to the Twitter Bootstrap demo site and try to Cmd-Click any link.\n. That should fix it for you.  Let me know if it doesn't.\n. Thanks.  Sorry if that created any confusion for you.\n. The client-side code expects X-XHR-Current-Location to be a path (/users/1), but the value of session[:_turbolinks_redirect_to] will be a full URI (http://example.com/users/1).  \nAlso, if the link that was clicked had an anchor in it's href, that anchor is going to be appended onto the end of the redirected URL.  So you could end up with two anchors: http://example.com/users/1#controller-anchor#link-anchor\n. Regardless of whether or not it creates an issue, it's bad code.  When the client compares X-XHR-Current-Location to document.location.pathname + document.location.search, it'll return false for the wrong reason.  \nThe pull request you're referring to (#125) is one that you actually supported.  To answer your question, we want to retain the anchor after a redirect because that's what the browser does.\n. It appears that without Turbolinks, browsers handle the double anchor situation by preserving the redirect anchor and dropping the link anchor.\n. It doesn't preserve the anchor on a redirect.\n. ruby\ndef edit\n  redirect_to action: :new\nend\n. This would be much, much simpler:\ncoffee\nreflectRedirectedUrl = ->\n  if (location = xhr.getResponseHeader 'X-XHR-Current-Location')?.length\n    preservedHash = if removeHash(location) is location then document.location.hash else ''\n    window.history.replaceState currentState, '', location + preservedHash\n. Like you said, we should probably change the name of X-XHR-Current-Location to something like X-XHR-Redirected.  And do we even need to send the response header if there hasn't been a redirect?  All it's doing is making the client have to check two conditions (the existence of the header and the length of it's value).\n. No, I mean something like this:\nruby\ndef set_xhr_redirected\n  redirected = session.delete :_turbolinks_redirect_to\n  if redirected\n    response.headers['X-XHR-Redirected'] = redirected\n  end\nend\ncoffee\nreflectRedirectedUrl = ->\n  if (location = xhr.getResponseHeader 'X-XHR-Redirected')?\n    preservedHash = if removeHash(location) is location then document.location.hash else ''\n    window.history.replaceState currentState, '', location + preservedHash\n. I think you're missing my point.  There's no reason to send the header at all if it's just going to be an empty string.  \nMy example could be cleaner.  This is better:\nruby\ndef set_xhr_redirected\n  if session[:_turbolinks_redirect_to]\n    response.headers['X-XHR-Redirected'] = session.delete :_turbolinks_redirect_to\n  end\nend\n. It's fine, as long as you don't make the accidental mistake of using the last line of reflectNewUrl like your example shows.\n. You can rebase it if you want.  \nI want to make sure we're not overlooking anything.  @dhh do you see any problems with this?\n. Do you have the \"Better Pop Up Blocker\" Chrome extension installed?\n. I did a search for that error message and came across this issue:\nmootools/mootools-core/issues/2202\n. Thanks for the PR.  At first glance, I'd say it looks good, but I think it would be best to split this into separate pull requests: one for the error handling and one for the refactoring.  Would you mind doing that?\n. I'd like to pull this one in first, so can you update it so that it only includes the error handling changes?  It'd also be great if you could add an entry to the changelog and make this minor change:\ndiff\n- response.status >= 400 and response.status < 600 \n+ 400 <= response.status < 600\n. The only things I can gather from that stack trace are that the request redirected and the value of the 'Location' response header wasn't escaped (causing the error).  Can you provide a little more context to the scenario that produces this error?  What does the link look like?  What does the controller code look like?  Where is the redirect happening?\n. This should be fixed with 0fca317ef1aec1c91d74c08ab0c0b546d5a0280c.  Can you verify?\n. Reopen if there's still an issue.\n. I should have realized this sooner, but aren't we already handling server errors with this line?\ncoffeescript\nxhr.onerror   = -> document.location.href = url\n. Yeah, it seems xhr.error catches some 5xx errors (like 508 Loop Detected) but not others (like 500 Internal Server Error).  So this PR is warranted.\n. Unless I'm mistaken, Turbolinks doesn't \"break\" prefetching/prerendering, it just circumvents it.  They're essentially alternatives to one another, and if you're choosing to use turbolinks on your site, I'm not sure why you would also explicitly define prefetch/prerender links.  And considering that turbolinks will always use less bandwidth than prefetching/rendering, and the fact that merely defining prefetch/render links doesn't necessarily mean they will actually be prefetched, I don't think turbolinks should automatically \"back off\" in this scenario.  \nI'm not all that knowledgable on this subject, so it's possible you can change my mind with a good counter-argument.\n. If you'd like to submit a PR to update the readme, I'd be happy to pull it in.\n. @davydotcom I wouldn't be opposed, if you'd like to take a stab at it.\n. Turbolinks doesn't do anything with the keypress event.  If the script is being loaded via turbolinks (although you said it's not), then you'd need to do the binding on page:load in addition to dom ready.\n. I'm not on board with moving the pushState call to after the server's returns a response.  It was designed the way it is so that the URL would change as soon as the link is clicked.  Otherwise, the user would have no idea that anything is happening.  \n. There may be other reasons for the way it's currently designed, so I'm not going to do anything about this without some insight from the guys that designed it.  @dhh @davydotcom\n. I still have some minor issues, mostly related to style:\nLine 26,126: There's no need to pass the xhr variable to the method.  \nLine 146: Remove the parentheses.\nLine 147: Remove the parentheses.\nLine 149: Simply saying return instead of return null will achieve the same result.\nLine 255: Can be shortened to if state?.turbolinks.\n. Thanks for making those changes.\nIt's not technically a global variable.  It can only be used by the Turbolinks code.  Since we use the xhr variable in other functions, your proposed change wouldn't be getting rid of it.  So all we'd be doing is creating three new variables that are unnecessary.  \nAlso, I was saying that the return null at the end of processResponse should be changed to return, not removed entirely.\n. This should be fixed with #231 \n. I can't reproduce this.  Can you give me steps to follow that will lead me to this error?  \nAre you manipulating the history elsewhere in your app?\n. I started to work on this a while back, and my solution was essentially the same as yours.  It looks like you've run into the same problem I did: it works with Rails 3, but not with Rails 4.  I didn't have much time to look into it at the time, but I recall it having to do with how we're including the XHRUrlFor module.\n. This was fixed by #231 \n. I don't know why you'd want to, but this would be the best way:\nerb\n<body <%= 'data-no-turbolink' if Rails.env.development? %>>\n. I should've closed this when closing #237.  Could no longer reproduce.\n. Confirmed the issue for Canary, but not the latest stable build (27.0.1453.116).  \nWe're getting close to pulling in PR #231, which removes the initialized variable.  Once it's pulled in, we'll have to discuss how to re-implement your fix.\n. Unless I'm testing it incorrectly, I can't reproduce this anymore.  I've tried each channel, and they all work for me:\n- 28.0.1500.95\n- 29.0.1547.49 beta\n- 30.0.1592.0 canary\nLet me know if I'm wrong.\n. Closing due to no response and the fact that I can't reproduce it anymore.\n. Thank you\n. I'm assuming that this style tag is only included on a certain page.  So here are some options:\n- Add a class or ID to the body tag to represent the current page.  Then move your page-specific styles from the style tag in with the rest of your application's CSS, scoped by the class/ID of that page.\n- Move the page-specific styles into an external stylesheet, then insert a link to it where the style tag was.  Then add the data-turbolinks-track attribute to the link.  This is a worse option than the first one because it will cause the page to do a full reload.\n. Turbolinks doesn't evaluate embedded scripts inside the head, so it actually does handle style and script tags the same way.  \nHow about this?  Just put the style tag right after the opening body tag and give it the scoped attribute.  Even though only Firefox implements the attribute, it's still valid HTML5 and the styles will be applied in all browsers.  \nhtml\n<body>\n  <style type=\"text/css\" scoped>\n    body { color: red }\n  </style>\n  ...\n</body>\n. Yeah, it only applies to script tags in the body.  \nI'm glad that solution works for you.\n. Like I said when I suggested it, the purpose of adding the scoped attribute was to make it \"valid\" HTML, not to gain the scoped functionality.  Therefore, the bugs you've linked to aren't relevant.  Not to mention the Firefox bug was immediately dismissed as being normal behavior.\n. Isn't that what this whole thread has been about?\n. If you put the scoped style tag right after the opening body tag, how does it change the semantics of the CSS rules?\n. Well I still think you could make it work.\nTo answer your question, there is no correct way of doing it.  Embedded styles that change from page to page are not supported by Turbolinks.\n. Thanks\n. Would either of these alternatives work?\n1. Bind a click event handler to all the links on your page (the same way Turbolinks does) that stops any existing animations.\n2. Stop any existing animations on page:restore.\n. You said that the issue manifests when the back button is pressed and the page that was cached with the animation is fetched from the cache and displayed to the user.  So my suggestion was to remove the animation after this happens.  \nI don't really see the first option as a hack.  Turbolinks explicitly binds as the last handler on clicked links so that you can do things like this if you need to.  \nI'm resistant to add another event, as we already have five of them.  We've gotten to the point where the more we have, the harder it is to understand the distinctions between them without having to study the source code.\n. 1669820353fee935744e031ff6e6a2305ac7305a Added the page:before-change event.\n. There's a link to PJAX because it was the inspiration for Turbolinks.  Moreover, credit is given to the creators of PJAX at the bottom of the readme.  I don't see the same justification for including a link to your project.  The second paragraph in our readme shouldn't be directing readers to a project that purports to be a superior alternative.  Not to mention that linking to Wiselinks there doesn't make sense within the context of the sentence.\n. No, the size of the cache isn't configurable at this time. \n. ..but now it is.  (v1.3.0 - #251) \n. @davydotcom didn't you do some work way back when with the bootstrap plugins?\n. The only way I'm able to reproduce this issue is by moving the javascript_include_tag inside the body.  Is that how you have it set up?\n. Because you are including your javascript in the body, they are loading on every page, which is causing your issue.  Either move your javascript inside the head, or add the data-turbolinks-eval=false attribute to them so that they are only evaluated on the first page load.\n. I think it's better for methods like nonHtmlLink to stay internal.  Having ignoreClick call nonHtmlLink knowing full well that it may have been overridden to do anything it wants would be a bad idea, in my opinion. \nHowever, I wouldn't be opposed to implementing an option on the public API for whitelisting file extensions that could be processed by turbolinks.  Would something like that work for you?\n. It looked normal when I tested it.  Can you show some code?\n. I'm still not seeing anything wrong in Safari.  Regardless, I don't see how Turbolinks would be interfering with CSS.\n. Turbolinks is essentially all javascript.  Have you used the web inspector to see how the styles are being applied? \n. Closing due to inactivity.  Reopen if this is still an issue.\n. Done.  Nice work.\n. This is an interesting idea, but I'm not sure how practical it is for all use cases.  If your site uses a lot of javascript to add/remove/change DOM elements, the page that gets cached could be vastly different from the one that is being fetched from the server.  This would result in a jarring and/or confusing experience for the user.\n. Here is a very rudimentary example of a potential issue.  Say you have a page that when it loads, an element slides from the left side of the page to the right side.  With this new feature, if you leave the page and then come back to it, you will see the page load with the element on the right side briefly before it \"jumps\" to the left side and then slides back to the right side.\nI think the better way to gain some speed is to go with @davydotcom's idea of implementing a prefetcher (#229).  It would be opt-in and entirely tunable so that developers could get the best performance for their needs, all without the user seeing anything out of the ordinary.\n. Because the cached page isn't being immediately replaced by a fetched page.\n. I don't understand why you're using the term \"prefetch\" in your solution.  It has nothing to do with the concept of prefetching, so it's quite a bit misleading.\nAlso, keep in mind that this solution won't be pulled in without proper documentation for it added to the readme.\n. Considering we could potentially be implementing prefetch behavior in the future, I think using the term for this feature is out of the question.  What do you think about referring to this behavior as a cached transition from one page to the next?  \nAs for the docs, of course that's ok.\n. Would this be enough?\n``` coffeescript\npageChangePrevented = ->\n  !triggerEvent('page:before-change')\nhandleClick = (event) ->\n  unless event.defaultPrevented\n    link = extractLink event\n    if link.nodeName is 'A' and !ignoreClick(event, link)\n      visit link.href unless pageChangePrevented()\n      event.preventDefault()\n```\n...which you could use like this:\ncoffeescript\n$ ->\n  $(document).on 'page:before-change', ->\n    confirm 'Are you sure you want to leave this page?'\n. 1669820353fee935744e031ff6e6a2305ac7305a Added the page:before-change event\n. Browsers don't allow the popstate event to be canceled.  There's nothing we can do to get around that.\n. I think it's a good idea, and I wouldn't change anything about your implementation, except that you can drop the brackets around url: url.  Would you like to create a pull request for this?\n. Yeah, that's better.\n. This isn't really related to turbolinks, just a result of dynamically inserting an image into a page without specifying dimensions.  Any client-side performance profiler will tell you that you should always specify image dimensions, so I think that should be considered the solution to this problem.\n. What does your client side code look like for subscribing to the events?\n. Try this: remove the javascript tag from the bottom and create one inside the <head> with the following content:\n``` javascript\n$(function(){\n  initChat();\n  $(document)\n    .on('page:load', initChat)\n    .on('page:restore', openStream);\n});\nfunction initChat(){\n  if ($('#chat').length > 0){\n    openStream();\n$(document.body).on('submit', 'form', function(e) {\n  $.post('/', {msg: \"<%= user %>: \" + $('#msg').val()});\n  $('#msg').val(''); $('#msg').focus();\n  e.preventDefault();\n});\n\n$(document).one('page:change', closeStream)\n\n}\n}\nfunction openStream(){\n  window.es = new EventSource('/stream');\n  window.es.onmessage = function(e) { $('#chat').append(e.data + \"\\n\") };\n}\nfunction closeStream(){\n  if (window.es){\n    window.es.close();\n    window.es = undefined;\n  }\n}\n```\nI haven't tested that, so I'm not promising it'll work.\n. Closing due to inactivity.\n. Same as #244.  Check there for how to fix your problem.\n. This was a good idea, and I'm sorry it took SO long for me to notice it.  I just committed a slightly more cautious implementation, but the functionality is the same.\n. Thank you\n. Following the last example in the article you linked to, I would guess that this would work:\n``` coffee\n$ ->\n  renderAddThisButtons()\n$(document).on 'page:load', renderAddThisButtons\nrenderAddThisButtons = ->\n  addthis.toolbox '.addthis_toolbox'\n``\n. Have you ever seen this happen?  I understand that it technically could happen, but it seems highly unlikely.  Even if it did, the likelihood that it would have an effect on the behavior of turbolinks is remote because the cookie is only used to detect a very specific set of circumstances.  \n. I don't think we ever thought it was a pretty solution, but we lacked a better option.  How are you suggesting we implement it?  \n. Closing due to inactivity.  Plus, we're now deleting the cookie when we read it, which I think makes this situation even more unlikely.  \n. I don't see injecting HTML into every response as a viable option.  \n. Because, in my opinion, adding a middleware component to Turbolinks that parses the body of every response and inserts content inside thetag (after first verifying that it is a valid HTML document with a` tag) all for the sake of handling a browser bug that rarely manifests itself (I'm referring to the original POST/reload issue) is inefficient, intrusive, and unnecessary.  But if you would like to submit a pull request that proves me wrong, I'd be happy to consider it.\n. Not at this time.  \nBut we could implement it by providing proxied access to the XMLHttpRequest progress event, like this:\n``` coffeescript\nTurbolinks code:\nfetchReplacement = (url) ->\n  # ...\n  xhr.onprogress = (e) ->\n    triggerEvent 'page:fetch:progress', e\n  # ...\nUsage:\n$ ->\n  $(document).on 'page:fetch:progress', (e) ->\n    progress = e.originalEvent.data\n    if progress.lengthComputable\n      percentComplete = parseInt (progress.loaded / progress.total) * 100, 10\n      console.log percentComplete + '%'\n```\n@dhh Think this is worth adding?\n. Yeah, that was pretty much my thinking too.  But I figured it couldn't hurt to throw out a possible solution just in case I was alone in that opinion.\n. Considering that Zurb foundation is a Rails gem, I think the responsibility for getting it to work with TL lies with it's authors.  \nThat said, if you still need help with this, I can try to help, but you're going to have to give me some more information.\n. How are you initializing Zurb foundation?\n. I meant how are you initializing the javascript.\nBriefly looking at the Zurb documentation, my initial thought would be to try something like this:\ncoffeescript\n$(document).on 'page:change', ->\n  $(document).foundation('off').foundation()\n. Awesome.  I'm glad I could (sort of) help.\n. Thanks for submitting this.  I've had to deal with this issue in my own apps, so I can see it's merit.  The only problem I have with your solution is the overriding of the built-in setTimeout method.  Doing something like that is fine for your own app, but as a plugin, I generally feel that we should leave built-in functions alone.  \nThis is how I chose to handle timeouts in my app:\n``` coffeescript\nclass @Timeouts\n  constructor: ->\n    @timeouts = []\nadd: (func, delay) =>\n    @timeouts.push setTimeout(func, delay)\nclear: =>\n    clearTimeout(timeout) for timeout in @timeouts\n    @timeouts = []\n```\nWhich I initialize and use like this:\n``` coffeescript\n@timeouts = new Timeouts\n$ ->\n  window.timeouts.add hideFlashes, 4000\n$(document).on 'page:change', window.timeouts.clear\n$(document).on 'page:load', ->\n  window.timeouts.add hideFlashes, 4000\n```\nPretty similar to what you're proposing, but without manipulating setTimeout.  \nWhat do you think about combining our methods by implementing a Turbolinks.setTimeout() method?\n. You've made good points, and I can't really say I disagree with them.  I'll defer to @dhh on the final decision because he might feel strongly one way or the other, but in the meantime it can't hurt to explore any possible drawbacks to overriding setTimeout.  \nAs far as I can tell, the only scenario where this could be a problem is if you're wanting your timeout to persist across page changes.  I can't think of a practical example of this, but it's not farfetched to think that a developer who has chosen to use Turbolinks might then embrace the fact that he's now working with a persistent session spanning across pages and use timeouts with that in mind.  Unfortunately for him, his timeouts are being cleared automatically, and he has no way of stopping it.  Is this a valid concern?\nAlso, should setInterval be handled the same way?\n. For the case of adding TL to an existing app, I think that deciding how to handle your timeouts is just part of the conversion process.  The example I showed at the beginning of this thread was from an existing app.  I needed a way to handle my timeouts, and by doing so I ended up with much cleaner code than what I had before.  \nNot all apps are going to use timeouts the same way, so I think the handling of them should be left up to the developer of the app.  Between my solution and your cleanSlate.js (which looks good), I feel comfortable closing this knowing that anyone who comes across this thread will likely come away with an good idea of how to proceed.\n. What do you mean by \"cleaned up\"?\n. I can maybe see how this could possibly cause an issue, but instead of just assuming I'm right, could you give a detailed outline of the scenario in which you're seeing this cause problems?\n. Cool, that's the exact scenario I had thought of.  Thanks for writing it out.  \nNo, there's no reason for keeping the cookie around.  I'll work on adding this tonight.\n. Implemented: 557f9542ab5b45ec39d90b64f88a2dc1429ddf42\n. I think you're probably on to something here.  There's really no need to be setting the cookie on Ajax requests, since we only read the cookie after a full page load, when initializing turbolinks.\n. Assuming that Modernizr is creating those classes, it would appear that it is running on every page load.  Is your Modernizr <script> tag located in the body?  If it is, it should be moved inside the head.  \n. Your suggestion won't really work with stylesheets.  It's easy to opt out of executing javascripts because turbolinks is explicitly executing them.  Stylesheets are downloaded and executed automatically by the browser when they are added to the DOM.  So the only way to opt out of that would be to remove the element from the page.  That's not really ideal, but it's technically feasible.  The problem, though, is that when the page A (from your example) is removed from the DOM (replaced by page B), the styles defined in style.css will also be removed.  And since the link to the stylesheet  in page B has been removed, page B will be left unstyled.  (You can easily verify this in your example by removing the stylesheet link in b.html.)\nSo I don't think this is a good idea.  If you want to prevent the stylesheet from being downloaded more than once, you can use client-side caching or you can use javascript to move the link tag from the body to the head on page:before-change.\n. Actually, no.  Have you is the correct idiom to use there.  \nhttp://www.thefreedictionary.com/or+what+have+you\n. I tried implementing this a few weeks ago.  The problem I ran into is that there is no straightforward way to cancel the popstate event.  I came up with a way to do it, but it wasn't very clean and I wasn't sure that it would work for all scenarios.  I haven't had a chance to revisit it since then, but I hope to soon.\n. The popstate event can't be canceled.  And it makes sense why browsers implement it that way.  The user has explicitly told the browser they want to go back to the previous page.  A website shouldn't be able to prevent that from happening.  \nI'm going to close this, for the reason I just described and also the fact that there's no apparent way to implement it. \n. The line can be read in a way that's correct, but I do see the ambiguity.  I've changed the wording to make it more clear.  \nThanks.\n. I disagree.  The difference between fetching from the server or the cache is an ajax request, and the page:fetch and page:receive events are there to act as bookends for the ajax request.  \nInstead, I suggest triggering the page:before-change event on popstate.  I think it would allow you to accomplish what you're trying to do, while also providing the functionality requested in #273.  \nWhat do you think?\n. @trungpham I don't think it's a good idea, so I wasn't planning on merging it.  How would this help you with the Facebook JS SDK?\n@keram You say that the ajax request is only an implementation detail of retrieving data, but it's not.  It's the entirety of the implementation.  The code may refer to restoring a cached page as \"fetching\", but all we're really doing is reading a value from a variable.  When you think of it that way, reading a variable and making an ajax request to the server to retrieve a new page are completely different actions, and treating them as if they're the same would be unwise.\n. I agree with @chilian.  The page:before-change event is fired as a direct result of user action (clicking a link), and devs sometimes use the event to prompt the user if they intended to leave the page.  If we were to fire page:before-change on Turbolinks.visit(), which is not the direct result of user action, then the user would be prompted and have no idea why.  If you want the user to be able to cancel your calls to Turbolinks.visit(), just add the confirm dialog yourself.\n. Thanks for investigating this.  I don't see any mistakes in your analysis.  Sure seems like a browser bug to me, so I'd be grateful if you submitted it to the Chromium team.\n. Are you saying it only happens when you use the lazyload plugin?\n. When is the combo_box_init function being called?\n. Is your submit handler function running when you attempt to submit the form?\nI ran into an issue recently where I was having trouble getting a form to work when it was embedded in a table row like you're doing here.  So just for the sake of covering all bases, try moving the form_for declaration outside the <table> tags and see if it makes a difference.\n. Instead of $('.form-with-combo-box').submit(function(){, try $(document.body).on('submit', '.form-with-combo-box', function(){\n. I would prefer it if TL didn't trigger any of its events when it's not enabled.  That said, something should be done to fix the issue described.\n@dhh Since you found cause to tie DOMContentLoaded and page:change to each other, I'm assuming your using it in your work.  If you're just binding to page:change instead of the old way of binding to both, how are you handling unsupported browsers?\n. For unsupported browsers too?\n. page:load is fired after Turbolinks fetches a new page from the server.  Tying it to DOMContentReady would defeat its purpose.\n. Well, page:load doesn't fire on DOMContentReady when TL is supported, so why would we fire it when it's not supported?\n. It isn't being parsed correctly because it's not valid HTML.  form elements are not allowed to be children of table, tbody, or tr elements.  I don't think we could fix this if we wanted to.\n. It's intentional.  For nearly all purposes of javascript, you would never want to run the same script more than once on a page.  I don't know what your ShoppingCart object does, but let's just say that, for instance, it creates an element and inserts it into the page.  Well, when fetchHistory restores the page from the cache, that element will be on the page, so you wouldn't want to recreate it.\n. Those solutions are hacks to make 3rd party libraries (code you can't change) work.  They're not exactly the best examples of normal script functionality that should be used to prove your point.  What's more, I guarantee that those solutions wouldn't get any cleaner by executing the script tags on fetch:history.  \nI mentioned inserting an element into the page as just one of many examples.  Here are some more things that a script could do that you wouldn't want to run twice on the same page:\n- Load an external JS library\n- Bind event handlers to elements\n- Set timeouts or intervals\n- Trigger animations\n- Initialize plugins (video players, tooltips, modals, etc..)\nTo me, it seems much easier to modify your code to work with Turbolinks using page:restore and page:change than it would be to deal with the consequences of re-executing scripts that have already run.\n. First of all, I wouldn't really recommend using Turbolinks with Backbone.  Not that I've tried, but it's sort of a one or the other type deal.  \nYou changed the subject a bit abruptly, so you kinda lost me.  What exactly are you asking?\n. > instantiates objects specific to that page\nCan you give an example of what instantiating these objects actually does?  Like in your initial example, what is new ShoppingCart() specifically doing?\nWhenever I need to pass data to JS, it almost always can be tied to a DOM element, so I use data attributes.  But who said you can't use script tags in the body?  You absolutely can.  The debate is whether they should be executed again on cached pages.\n. Telling me to inspect the source of sites that don't use Rails or Turbolinks doesn't help.  Just because those sites implement something a certain way doesn't mean it is the only way it can be done.  \nThe fact of the matter is that Turbolinks used to execute script tags when restoring from the cache, but then we intentionally changed that (#91) because of the issues that I've been trying to convey to you (like #90).  We're not going to revert back to the old behavior.  It's not as if you're without options for accomplishing what you're after.  Define public variables on document.body instead of window (#173), bind events to document.body instead of document, etc.  I've been trying to get you to give me a specific example so that I could show you that there's a way to make it work.  What's more, if executing script tags on cached pages is exactly what you need to make all of your JS work, then you can implement it yourself in 10 lines of code.  Just copy our executeScriptTags method and bind it to page:restore.\n. > Turbolinks is not a drop-in solution but a library that requires rather specific changes to JS to work.\nCorrect.\n\nYes, you could litter the DOM with data- attributes for this data. With large amounts of data or data that doesn't belong in the DOM, that doesn't make sense.\n\nAdding large amounts of data inside the body of a script tag is still adding large amounts of data to the DOM.  \n\nWhether you get to that page via your history or by clicking a link and moving forward, you are still rendering a page.\n\nThis is correct, unless you're using Turbolinks.  When Turbolinks restores a page from the cache, it's not rendering it.  It's just fetching it from memory and restoring it exactly how it was when you left it.  \n\nWhen you click the back button in your browser on a plain old HTML site, script tags are executed.\n\nCorrect, because they've never been run before.  All the script tags in the head will also be executed.  Do you propose Turbolinks do that too? No, because they've already been executed, just like the ones in the body.\n. The docs claim that it just works, but the very next paragraph adds the caveat that you might have to alter the way you write JS.   \nIf you're starting a new Rails project, it's pretty simple to adopt the mindset of writing JS code that works with Turbolinks.  So I don't see a problem with it being enabled by default.  Rails is opinionated.  If you don't want to use Turbolinks, it is very easy to remove it.\n. pjax inspired Turbolinks.  Turbolinks is essentially the idea of pjax applied only for the body element.  Extending Turbolinks to handle more specific elements isn't on our roadmap because that's exactly what pjax is for.\n. Now that I've tried it out, I feel the need to reiterate my concern for this.  Turbolinks offers an actual increase in speed through the reduction of network requests and asset processing.  The beneficial side effect of the implementation is a smoother experience for users navigating the site.  The feature being proposed has only one focus: increasing the speed of the users' perception of a changing page.  Another way to put it would be: tricking the user into thinking the site is faster than it really is.  This might sound fine, but not when you consider the costs:\nMore Processing\nWhen you click a link for a page that's in the cache, these are the events that fire:\n``` coffeescript\nfetch from cache\npage:before-change\npage:change\npage:update\npage:restore\nfetch from server\npage:fetch\npage:receive\npage:change\npage:update\npage:load\n```\nNot only does this fire every event turbolinks has, it fires page:change and page:update twice.  So all the JS you have bound to these events will be executed twice.  That certainly doesn't help performance.  \nNot to mention: what happens when the handler for the first page:change isn't finished running when the page changes a second time?  Or if your page:change handler sets a timeout?\nDegraded User Experience\nThis is what I described in the last thread.  It stems from this feature's assumption that a cached page (which is cached at the end of a page's lifespan) is always going to be virtually identical to the new copy being fetched from the server.  Maybe this is true for Basecamp, but it's going to be a problem for many sites.  The assumption ignores two factors: Time (the page returned by the server might be pretty different from a copy that may have been cached an hour ago) and DOM manipulation (in my testing, it took only 4 clicks before I came across this problem).  \nSimply dismissing this concern by saying it's not an issue in your apps is reckless.  All conceivable use cases should be considered.\nIt should say something that a feature whose entire purpose is a better user experience could potentially result in a worse user experience.\n\nIn my opinion, this is Turbolinks getting too cute for it's own good.  I just don't see the benefit outweighing the potential drawbacks.  \nI realize that my concerns will probably be ignored on this, and that's fine.  Just be sure to include a global opt-out so that I can use it for all my projects.\n. It's not a public site, so I'm not going to post video of it.  But the issues are generic enough to where describing them should be enough.  \nThe first involved tabbed content.  After visiting the page, you click on a second tab (other than the default) to view that tab's content.  Then you click a link to go to another page.  Now, if you come back to this page, you'll see the second tab active briefly before it suddenly switches back to the default tab.  \nAnother issue involved graphs.  I have a dashboard page with multiple graphs.  Their initialization involves animation.  If you click back to this page, you see the outdated graphs briefly before they disappear and then animate back to how they were.  \nThese aren't catastrophic events, but they create a confusing effect.\n. If it's implemented like data-no-turbolink, the local and global opt-outs would be one and the same.\n. Are we sure indexing the cache by url is a good idea?\nLet's say after navigating around an app for a while, your browser history looks like this:\ncoffeescript\n1. Page A # START\n2. Page B\n3. Page A\n4. Page C\n5. Page A\n6. Page D # CURRENT\nNow, if you start hitting the back button, each time you get to page A, you're going to see what it looked like at state 5.  Shouldn't the page appear the same as it did at that point in history? \nWhat's more, this would now allow turbolinks to span across full page loads.  Consider this:\ncoffeescript\n1. Page A # START\n2. Page B\n3. Page A\n4. Page C # <- Full page load (turbolinks re-initialized)\n5. Page A\n6. Page D # CURRENT\nNow if you go back, it will fetch from the cache at states 3 and 1 even though those states weren't cached in the same session.  Even if you like that behavior, it's still a logic error, isn't it?  \nThoughts?\n. 1. You haven't eased my mind about caching by url.  In fact, you admitted that it will result in behavior that differs from the default browser behavior.  Maintaining as much of the default browser behavior as possible is a big part of what this library tries to accomplish.\n2. Your opt-out isn't implemented like data-no-turbolink.  You're tying it to the cached page instead of the clicked link.\n3.  I still don't think the term transition cache makes any sense.  Makes it sound like we're keeping a cache full of transitions.\n. You've dismissed all of my concerns, so I'm just going to refrain from expressing any more opinions on this.  I'll leave it to you and DHH to hash out the rest.\n. Are both requests from Turbolinks (AJAX requests)?  Or is one of them a full page load?\n. Typically, this would be the result of the JS/CSS assets having changed.  Is that the case?  (I realize that it's unlikely since they're the same page, but it's not impossible, so I have to ask.)\nIf not, what browser are you using?  (If it's chrome, a version number will help.)  Or does it happen on all browsers?\n. So does it work on other browsers?  If so, could be related to #278.  Not sure why it would only be happening on redirects though.\n. @2called-chaos If Turbolinks redirected straight to the already redirected target, then the resulting page would be missing things that are set by the original action, such as flash messages.  Like you said, you shouldn't be using GET requests for destructive actions, but if you must for some reason, just use data-no-turbolink.  \nClosing this since I can't reproduce (without doing something where the double request is by design).\n. This is cool, but it probably won't work alongside the upcoming cached transition feature (#286) since the page will be changing twice.\n. Thanks\n. I implemented this last night in response to the discussion for #278.  Had I realized before that this PR did the same thing, I would have just pulled it in.  Sorry about that.  Thanks for taking the time to submit this.\n. Would I be correct in saying that the only scenario where you'd use this is if you're reloading the current page?  I mean, it wouldn't really make sense to keep the scroll position after visiting a different page, right?  So maybe it would be cleaner and more intuitive to add a Turbolinks.reload() function instead of modifying the visit function.  What do you think?\n. Sorry for taking so long to get to this.  I named it page:expire because remove is a little ambiguous.\n. I moved the fix for this into a new release (v1.3.1) so you won't be forced to upgrade to 2.0.0 (master) in order to get Turbolinks working again in Chrome.\n.  I think favicons are too variable for us to handle them.  It's not always just one link tag, and there are many different combinations for the type and rel attributes, not to mention other attributes.  I'm not sure we could implement it in a way that supported all potential combinations.\n. I couldn't reproduce this, using the same version of Chrome and Turbolinks.  The problem may be with jquery.turbolinks, as it has caused problems with remote forms in the past.  Try removing it, or maybe just require it after jquery_ujs, and see if it makes a difference.\n. When the form submits, what is the server responding with?  Assuming it's javascript, what does the script do, if anything?\n. Is your form located inside a table, spanning across multiple cells?\n. You're welcome.\n. I don't think you can depend on the X-Requested-With header being set.  jQuery and other frameworks set it automatically, but if you're just using vanilla javascript to make an ajax request and don't set that header, you'll get the exact opposite problem to the one you're attempting to solve.  What do you think?\n. I'd like to get DHH's input before doing anything with this, since the redirect_via_turbolinks feature was his idea.\n@dhh How does this fit in with what you mentioned here?\n. This isn't an issue anymore, since a check if the request is XHR has been added to the new redirect code.\n. Have you found out any information about this?\n. Going to close this since all signs point to this being an Android bug, and I don't see a way that it could be fixed from within Turbolinks.  Reopen if you disagree or have more information to share.\n. Can you take a look at the discussion for #267 and let me know if that helps you in any way?\n. Thanks @mrfoto \n. Thanks for bringing this to our attention.  We're intentionally binding these events regardless of whether Turbolinks is supported or not to allow for graceful degradation, so the ideal solution would be to get it working for IE < 9 rather than removing degradation for all unsupported browsers.  What we can do is use attachEvent if addEventListener isn't defined.  \n``` coffeescript\ninstallDocumentReadyPageEventTriggers = ->\n  triggerDocumentReadyPageEvents = ->\n    triggerEvent 'page:change'\n    triggerEvent 'page:update'\nif document.addEventListener?\n    document.addEventListener 'DOMContentLoaded', triggerDocumentReadyPageEvents, true\n  else if document.attachEvent?\n    document.attachEvent 'DOMContentLoaded', triggerDocumentReadyPageEvents\n```\nHow does that look?\n. Sweet.  Before I pull it in, would you mind cleaning it up so that it doesn't include a commit for the PR I merged earlier today?\n. How about this?\n``` coffeescript\nbrowserSupportsCustomEvents =\n  document.addEventListener and document.createEvent\ninstallDocumentReadyPageEventTriggers = ->\n  if browserSupportsCustomEvents\n    document.addEventListener 'DOMContentLoaded', ( ->\n      triggerEvent 'page:change'\n      triggerEvent 'page:update'\n    ), true\n```\nPrevents exceptions in IE without cutting support for other browsers that don't support Turbolinks.  \nIn case you update the PR with this, the browserSupportsCustomEvents variable declaration should go beneath the browserSupportsTurbolinks declaration.\n. page:load is fired at the end of the Turbolinks loading process.  By not firing it on the initial page load, it provides a way to distinguish between a normal page load and a Turbolinks page load.  To me, that's it's entire purpose.  I get your point though.  Maybe it's worthwhile to have another event that fires on DOM ready and page:load.\n. Anything that only needs to run once.  Why do you ask?\n. coffeescript\n$ ->\n  runYourCode()\n  $(document).on 'page:load', runYourCode\n. Modify the unobtrusive_flash.js file and make this change:\ndiff\n- $(function() {\n-  showFlashFromCookies();\n- });\n+ $(document).on('page:change', showFlashFromCookies);\n. Does this article help you?\n. It'd probably be better (cleaner) to do it like this:\n``` coffeescript\nbrowserSupportsCustomEvents =\n  document.addEventListener and document.createEvent\nif browserSupportsCustomEvents\n  installDocumentReadyPageEventTriggers()\n  installJqueryAjaxSuccessPageUpdateTrigger()\n```\n. Thanks\n. This is the same issue as #273, so I'm going to close this one.  I've yet to come up with a way to implement it.  I'm open to suggestions.  \n. I don't really follow what you're saying here:\n\nThe code is being executed from sources that starts with VM and ends with 5 digits, example VM29823 that are created in chrome each time it visits a page with script tag inside of its body.\n\nCan you elaborate?\nIs it possible for you to modify your scripts to detect if they've been run already?\n. @wgc-as thanks for sharing your findings.\nI'm gonna close this since the issue and how to avoid it seem to have been agreed upon.\n. Thanks for bringing this to our attention.\n. Updated.  Thanks for the notice.\n. What does the generated HTML look like?\n. What do you mean by \"the css gets reloaded every time\" and \"every page loads the changePage function always triggers on all my css files\"?\n. I tried using slim and turbolinks worked just fine.  \nThe browser doesn't know and doesn't care what template handers the server uses.  All it gets is the generated HTML, and if the HTML for both slim and erb are 100% identical as you say, there shouldn't be any difference client-side.  \nI don't know what ChromeStdInjector.js is, but I would bet that it's interfering in some way.  \nAlso, if turbolinks.js is fetching CSS assets, it means that they're located in the body of the page.  If that's the case, then loading them on every page is normal behavior.\n. Your doctype is invalid.  Instead of doctype, it should be doctype html.\n. All good.  Glad you were able to get it working.\n. If the server is doing an external redirect, then the XDomainBlocker module should catch it and return a 403 status, causing Turbolinks to abort.  So I'm not sure how you're seeing this error.  Can you further explain the scenario?\n. I'm still not seeing where Turbolinks factors into this.  The browser handles the loading of image tags.  Turbolinks only handles clicked links.\n. Why bother running the request through your app?  Why not do this instead?\n``` ruby\nroutes.rb\napplication_helper.rb (or wherever)\ndef tltest_path\n  'http://www.placecage.com/200/400'\nend\nSome view.html.haml\n= link_to image_tag(tltest_path), tltest_path\n```\nThe issue is on the server side, so that's where it should be fixed.  I think I have a fix, but I need to do more testing to make sure it doesn't break anything.  And I'm also still debating whether it actually needs to be fixed, given how unorthodox the practice that causes the issue to manifest is.\n. I believe I've fixed the root cause of the issue.  Try it out and let me know how it goes.\n. That's by design.  It's what I described in my first response.  Javascript doesn't throw an exception; the request returns an error status and Turbolinks handles it client-side by doing a full request.  The behavior is a safeguard against XSS, so it should stay as it is.\n. Already fixed.  See #314 \n. Where in the layout are you including your javascript?\n. Your layout doesn't have a dropdown menu.  Am I missing something?\n. So...what's the problem?\n. Your markup is invalid.  Simplified, you have:\nhtml\n<div class=\"modal-body\">\n  <form>\n</div>\n<div class=\"modal-footer\">\n  <input type=\"submit\" />\n</div>\n</form>\nYou should move the opening form tag to just below the opening tag for the modal-content div.\n. That commit (e69bead) should reference issue 332, not 322.  \n. Thanks\n. Cool.  It might be a good idea to clarify that it's for use with Symfony, though.  Just add it in parenthesis after the link.\n. Thanks\n. I can't reproduce this issue in Safari on iOS 8.  I tried the original poster's demo and that worked.  I tried the signature pad library that @ArthurN mentioned, and that worked.  \nI did just add a commit to Turbolinks that changes the way documents are parsed in the latest version of Safari, so if there is in fact an issue, it might be fixed now, so try it out and let me know.\n. Hmm.  I'll have to figure out how I'm going to test that.  All my iOS devices are running 8.\n. Released transition cache feature in v2.2.0.\n. Bumped version to 2.2.0\n. The line that you're wanting to prevent from running is a fallback in case the ajax request fails or the fetched page's assets are different than the current page's.  The line itself doesn't just update the url; it triggers the browser to do a full (normal) page load, essentially doing what the browser would normally (without turbolinks) do when a link is clicked.  And at this point in the code, the new url (even if it's the same) has already been pushed onto the history stack, so document.location.href != url will always be false.\n. Hmm.  Well it's hard to identify the root cause without knowing the specifics.  When you say that turbolinks is refreshing the page after the url has already changed to '/search', is it doing a full page load or is turbolinks changing the page?  \nRegardless, it's probably a good idea to separate turbolinks and backbone if you can.\n. Closing this since the proposed change would break the fallback behavior when the response isn't valid.\n. Thanks for bringing this issue to my attention.  Your solution doesn't completely work though.  It doesn't take into consideration browsers that don't trigger the popstate event on the initial page load.    \nI took a different approach in the solution I just pushed (e69bead).  It simply delays the binding of installHistoryChangeHandler for half a second so that the initial popstate will pass.  It's not pretty, but it's the generally advised way to handle the discrepancy between browsers.  So try it out (v2.1.1) and let me know how it goes.  \nGood news, though, is that Chrome finally gave in and is doing away with the initial popstate fire.  Look for it in version 34 (currently in Canary).  Hopefully Safari will follow.\n. No, I don't think it's worth it.  It only fixes part of the problem.  My solution, as far as I can tell, covers all of it.  It ensures absolute urls are used not just for cache keys but in state objects as well.  This solution completely ignores the cache lookup in the history change handler.  Which means that if, for example, all you use are relative urls in your app, pages will be cached by absolute url but every state object will use a relative one.  Anytime you hit the back or forward button, it will use the state object's relative url to find the page in the cache and it will fail.   So merging this PR would actually create a bigger issue than the one it's trying to fix.\nAll I'm waiting on is someone besides me to confirm that my PR works and fixes the issue.  If either one of you can do that, I'll pull it in.\n. My concern is that some people may be dynamically changing classes on the html element during the turbolinks process, perhaps to change the look of a page during the transition from page to page.  I don't know if anyone does this, but I do know that your fix would remove the capability.\nHow is your theme adding the classes to the html element?  I bet we could find a simple workaround to get it working properly with turbolinks.\n. So are those classes being added by javascript or are they in your layout view file?\n. Can I see the code for that?\n. There are a number of different ways to handle this.  Here's one:\napplication_helper.rb\nruby\nmodule ApplicationHelper\n  def theme_classes\n    { \n      front: 'front',\n      back: 'back top-dark sidebar sidebar-full sidebar-collapsible sidebar-width-wide sticky-sidebar',\n      common: 'fluid top-full menuh-top sticky-top'\n    }.to_json\n  end\nend\nFront layout (in Haml, because it's easier to read):\nhaml\n%html{data: {theme: theme_classes}}\n  %head\n  %body{data: {layout: :front}}\nBack layout:\nhaml\n%html{data: {theme: theme_classes}}\n  %head\n  %body{data: {layout: :back}}\napplication.js\n``` coffeescript\n$ ->\n  $(document).on 'page:change', ->\n    layout = $('body').data 'layout'\n    themeClasses = $('html').data 'theme'\n$('html')\n  .removeClass((classes for _,classes of themeClasses).join(' '))\n  .addClass [themeClasses['common'], themeClasses[layout]].join(' ')\n\n```\nIt might seem like more effort than it's worth, but that's just because I tried to make it somewhat elegant and easy to extend.\n. No problem.  So is that a suitable alternative to your pull request?\n. Thanks\n. Wouldn't this solve the issue?\n``` coffeescript\n$ ->\n  sendPageView()\n  $(document).on 'page:load page:restore', sendPageView\nsendPageView = ->\n  ga('send', 'page pageview')\n``\n. Sorry for overlooking that.  Thanks for catching it.  \n. **2012-2014** would be better.\n. Thanks\n. Thanks\n. Your screenshot wasn't attached, but I _think_ I understand what you're saying.  I'm assuming that the left column has a form and that the \"refresh\" button you mentioned submits the form.  In order to get the result you're wanting, this form should be a remote form (remote: true`) and the server should respond with the necessary javascript statements to update the right column with the rendered output.  The page will not be reloaded and the scroll position will not change.  And turbolinks will play no role in it.  \nThere are other ways to do it, but that's the simplest.  In fact, you don't even have to leave this page to see another way of doing exactly what you're wanting to do.\n. Glad I could help.\n. Good call.  Thanks!\n. Good idea.  Thanks for the contribution.\n. It's not expected behavior.  Before the commit you referenced, this case was unintentionally handled by the cross-origin check. Should be fixed now.  Thanks for letting me know about this.     \n. Is there another way to do the check, or do I have to remove it?\n. Nevermind, I got it.\n. I was going to go with:\ncoffeescript\nconstructor: (@original = document.location.href) ->\n    return @original if @original.constructor.name is @constructor.name\nThat work for you?\n. That works too, but it's a comparison of two functions, which seems less efficient than comparing just the names of those functions.  So I'm going to go with that.  Thanks for bringing this to my attention.   \n. Based on this argument, I've joined your side.  \nChanged in c5cda21\n. Are you working off the latest release or master?\n. Would this work?\n``` coffee\nBefore\n@origin = [@protocol, '//', @host].join ''\nAfter\n@origin = [@protocol, '//', @hostname].join ''\n@origin += \":#{@port}\" unless @port.length is 0\n```\nBrowsers seem to implement host differently, but hostname shouldn't ever include the port.\n. What version of turbolinks are you using?\n. This issue was actually resolved last week via #344.  So if you need this fix, you can use the master branch until we release the next version.\n. Are you using the master branch?  If not, try it out and let me know if it changes anything.\n. That means you're using the latest released version, which is good, but we've made a few improvements that will be in the next release.  So try those improvements out by changing your Gemfile entry to this:\ngem 'turbolinks', git: 'https://github.com/rails/turbolinks.git', branch: 'master'\n...and let me know if it makes a difference.  I just want to make sure that this isn't something that we've already fixed.\n. I think I found the issue.  I just pushed a fix, so when you get a chance, try it out and see if request.referer returns the correct url.\n. @dhh Reverting to the old behavior of waiting to change the URL until after the new page has been loaded would resolve the issue.\n. No, sorry, other things have gotten in the way.  I'll try to get it done this week.  I do know that it'll probably require at least a minor version bump, since some people might be reading the current URL on page:fetch or page:receive.\n. Should be fixed now.  I initially thought reverting the behavior would have side effects in other parts of the code, but as far as I can tell there aren't any.\n. Done.\n. I'm not sure I completely understand your scenario.  Can you show some of the relevant code?  \nIf each page in your application has it's own CSS and javascript files, then using Turbolinks isn't really going to work for you.\n. I think you would be better served just using pjax to accomplish what you need.  Replacing the entire body is what sets Turbolinks apart from pjax, so adding the ability to make Turbolinks act like pjax doesn't really align with the purpose of this project.\n. Closing in favor of the partial page replacement feature introduced in v3.0.  Should give you the functionality you need.\n. Why would you need the target URL in the scenarios you described?\n. You would think this would work (like I originally did when writing this module), but it doesn't.  It works in Rails 4, but not Rails 3.  It won't throw any errors, but calls to link_to and url_for would no longer use the method chain that this module sets up.\n. Released v2.2.2.  My assessment on this patch still stands, so I'm just going to keep this module's code as it currently is.  Thanks for submitting it though, and sorry I didn't release the fix sooner. \n. I'm not sure this would be a good idea, as it would potentially add a large delay (depending on how many scripts you have) between the page being changed and the page:change event being fired.  And your proposed solution creates other problems, as everything that currently happens between page:change and page:load would get moved to before page:change, including page:load itself.  Since there are ways to avoid problems like the one you outlined, I'm going to close this.\n. The issue is only present in Firefox.  It's handled in pjax, so it should be handled by Turbolinks too. \n. Autofocus works fine for me in that version of Chrome (mac).  That said, my patch should still resolve the issue if it's present, regardless of what browser you're using.  \nIf you're using the patched version of turbolinks and are still seeing the issue, show me your HTML so I can try to reproduce. \n. I've already fixed it.  Autofocus works as expected in every browser I try it in.  Until someone proves to me that it's still broken, I consider the issue resolved.\n. Use Turbolinks 2.2.3\n. This is by design, so you don't have to add a fallback for unsupported browsers.  Just bind to page:change and it'll always work.\n. I think making this change would do more harm than good.  It would remove the fallback for browsers that don't support Turbolinks but do support custom events.  That's a feature users really wanted to have, so I don't see it going over too well if we removed it.  \nGoing back to your original example, I think you're checking for the wrong thing.  You don't need to know if Turbolinks isn't supported- you just need to know if custom events aren't.  \n``` coffee\ndoSomethingOncePerPage = ->\n$(document).on \"page:change\", doSomethingOncePerPage\nunless document.addEventListener and document.createEvent\n  $(document).ready doSomethingOncePerPage\n```\nI'm going to close this because I can't see us removing the fallback support.\n. Well, the point of the example is to show which events to bind a spinner to.  Adding the check to see if addEventListener is defined might distract the reader from that point, making it look more like an example of how to listen to turbolinks events.  Since most people use a framework like jQuery to bind event listeners, such an example isn't really necessary.  For the people who just use vanilla javascript, chances are that they already know that they need to add the check to support IE.  That being said, you're right that the readme shouldn't be showing an example that's faulty.  So I'm just going to change it to use jQuery for simplicity's sake:\n``` javascript\n// using jQuery for simplicity\n$(document).on('page:fetch', startSpinner);\n$(document).on('page:receive', stopSpinner);\n``\n. We've added thepage:before-unloadevent, which is exactly what you were wanting, with the only difference being that it also fires before changing the page to a cached page.  Nevertheless, it should give you the functionality you need.\n. Can you explain how you would use these two methods in your application?  \n. One of your problems is that you're binding to page:change incorrectly.clearInterval(interval)` is actually being called and its return value is what is being bound to the event.  You'll need to wrap it in an anonymous function to get it to work.\nThe other issue is that page:change is called on DOM ready, and you don't want to clear the interval then.  Instead, you can bind to both page:load and page:restore, like this:\njavascript\n$(document).on(\"page:load\", function(){ window.clearInterval(interval) });\n$(document).on(\"page:restore\", function(){ window.clearInterval(interval) });\nBut that's not a perfect solution, because the interval won't be set if you navigate back to that page.  If I were you, I would add a way to check if the current page is the page that should have the interval, and then set up something like this (which I'm writing in coffeescript to make easier to read):\n``` coffeescript\ninterval = null\nresetInterval = ->\n  window.clearInterval interval if interval?\n  if page is interval page # your custom way of checking the page\n    intervalTime = 10 * 1000\n    interval = window.setInterval ( ->\n      alert \"called\"\n      update_url = $('#episodes').data('schedule-update-url')\n      $.getScript(update_url) if update_url?\n    ), intervalTime\n$ ->\n  $(document).on 'page:change', resetInterval\n```\n. I think this is what you're looking for:\nhttp://stackoverflow.com/questions/21333184/reload-the-comment-count-of-disqus\nIf that doesn't work, you should open an issue on Stack Overflow.  This isn't an issue with Turbolinks, and without knowing what count.js does, I can't really help you.\n. Looks like you found a solution here.  Apologies for not responding sooner.\n. Can you elaborate on what you'd use this event for?  Because I can't see how this could really help you.  When you hit the back button, fetchReplacement will only be called if the page isn't in the cache.  And even if you return false and prevent the method from running, the URL has already changed (either via pushState or popstate), so you're only really canceling part of the process.\n. Closing due to the issues I previously outlined, the fact that browsers don't provide a way to cancel the back button, and the lack of response from submitter.\n. I don't have enough knowledge of AngularJS to help you.  Your question would be better served on Stack Overflow.\n. I often use remote forms with Turbolinks and they work just fine.  We've had this issue reported a couple times before, and the cause is typically invalid HTML.  If you show me the actual HTML output, maybe I can identify the problem.\n. Your closing </form> tag is right after the opening form tag.\n. Like I said in that discussion, using AS::Concern in that module does not fix the error- it just results in the module not being loaded correctly.  You don't see the error anymore because the method chain the module sets up isn't being used.  If you know a different way of loading the module that works with Rails 3 & 4 and Ruby 1.8-2.1, I'd love to hear it.\nSo as it stands, turbolinks isn't going to work with ruby 1.8.  But I think you're right about there being a difference between \"not supported\" and \"not working\".  Even though you probably shouldn't use turbolinks with 1.8, you should at least be able to expect that your app is still going to run if you have turbolinks in your gemfile.  So I've patched the code so that the XHRUrlFor module is not loaded when using ruby 1.8.  The result is that calls to link_to :back or redirect_to :back may not return the correct url when using 1.8, but at least it doesn't throw any errors.\n@dhh If you don't like this, the alternative is to declare in the gemspec that the gem requires ruby >=1.9 to run.\n. I'm sorry for not responding much sooner.\nThis functionality was also proposed in #335, although it was limited to just the class attribute.  Take a look.  I think my initial concern I expressed there still applies here.  I certainly see the appeal of having turbolinks automatically handle the HTML attributes and wish I could say yes, but I think the problem with it is that it makes assumptions about how everyone uses those attributes, and in doing so actually limits the ways in which they can be used.  For that reason, I think it's probably best to leave it as is and have issues like the one you described in #375 be handled by app-specific solutions, which I don't think would require much work in your case.\n. Thanks for the heads up.  Looks like the Chrome team has fixed the issue in 37 and 38.  It's working for me in 38.0.2100.0.\n. Still works fine for me (Chrome (Mac) 36.0.1985.125).  You're using the turbolinks master branch, right? \n. Closing this since I can't reproduce the issue.  The fix was released in v2.2.3.\n. Are you seeing this in development or production?  What webserver is running?  \nMy guess is that you're running an environment that doesn't support concurrency, which means the delay is on the server end.  Calling xhr.abort() on page:fetch is necessary, but it doesn't make the server stop processing the request.\n. Thanks\n. Can you show me an example of the javascript you're using to show a different element based on the anchor?\n. Thanks for pointing out the issue.  It should be fixed now.\n. Thanks\n. What is adding these elements?  If it's a script that's located in the body, add data-turbolinks-eval=false to it.\n. How can we identify the problem with your javascript when you haven't provided any?\n. I'm ok with the idea, but the problem with the implementation is that Turbolinks.EVENTS isn't read-only.  So a script could do something like Turbolinks.EVENTS.FETCH = 'page:load' or just remove all the keys from the object and completely break Turbolinks.  Not good.\n. That seems alright to me.\n. I've been thinking about this for a while, because having that events method seems ugly to me.  After playing around with some alternatives, I think I've settled on one that I think works best, both for functionality and code aesthetics.  \n``` coffeescript\nkeep this the same\nEVENTS = \n  BEFORE_CHANGE:  'page:before-change'\n  FETCH:          'page:fetch'\n  RECEIVE:        'page:receive'\n  CHANGE:         'page:change'\n  UPDATE:         'page:update'\n  LOAD:           'page:load'\n  RESTORE:        'page:restore'\n  BEFORE_UNLOAD:  'page:before-unload'\n  EXPIRE:         'page:expire'\nadd this utility method, preferably near other utility methods popCookie and triggerEvent\nclone = (original) ->\n  return original if not original? or typeof original isnt 'object'\n  copy = new original.constructor()\n  copy[key] = clone value for key, value of original\n  copy\nexport\n@Turbolinks = { \n  visit, \n  pagesCached, \n  enableTransitionCache, \n  allowLinkExtensions: Link.allowExtensions, \n  supported: browserSupportsTurbolinks, \n  EVENTS: clone(EVENTS)\n}\n```\nThis restores the original proposal's functionality of exporting the entire object and not just the values.  Plus it gives the added benefit of a reusable clone method should we ever need it.  \nLet me know what you think.\n. Well I actually see another spot in the code where I could use clone, so that's why it doesn't seem like overkill to me.  Plus it's a lot more useful than an events method, which I couldn't imagine ever using for anything else.\nI can't think of a use case for renaming the events either.  Though my concern was less about being able to rename them than being able to remove them from the object altogether.  So if someone comes up with a good use case, I'd be willing to consider adding a setter method.\n. This implementation would break in the scenario where you have a POST/PUT request that results in a redirection via a GET request.  It's actually because of this scenario that we're using cookies in the first place.  So you just need to ensure that you cookie is not set after a GET request.  This would work:\nruby\ndef set_request_method_cookie\n  if request.get?\n    cookies.delete :request_method\n  else\n    cookies[:request_method] = request.request_method\n  end\nend\n. That's a perfect description.\n. Why close it?  Your idea was good.  The implementation just needed to be sure that no cookie is set after a GET request.\n. cookies.delete will only cause the Set-Cookie header to be sent if the cookie exists.  So it will only send the header in the scenario we discussed.  Any other normal GET request will be cacheable.  And since pages loaded after POST/PUT requests typically include some sort of confirmation that the action was successful (usually in a flash message), isn't it ideal that they won't be cacheable?\n. Thanks!\n. redirect_via_turbolinks_to is intended for when the client is expecting a Javascript response.  So for it to work, you should add remote: true to your destroy links and change your controller action to look like this:\nruby\ndef destroy\n  @topic = Topic.find(params[:id])\n  @topic.destroy\n  respond_to do |format|\n    format.js { redirect_via_turbolinks_to topics_path }\n    format.html { redirect_to topics_path }\n  end\nend\n. You're welcome\n. I thought I fixed the issue, but it turns out I only fixed part of it.  I'll revisit this tomorrow.\n. I think this is clearly a bug in Safari.  Each of the three methods Turbolinks uses to parse the retrieved document produce an incorrect result with even the most basic sample:\n\nI think @nekogami is correct about which elements are effected.  After placing the form in a div, all three methods produce the desired result:\n\n. I think I fixed it.  Try it out and let me know.\n. I can't speak to a loss in performance, but I couldn't see any other way to fix it without disabling Turbolinks in Safari.  The way I wrote the code though, if Safari fixes the bug, Turbolinks will automatically go back to using the old method of parsing the page.  \nI thought the audio tag problem was fixed.  I cloned your repo and couldn't even get it working on a full page load until I replaced the Rails audio_tag helper with this:\nhtml\n<audio controls=\"controls\">\n  <source src=\"<%= asset_path('new_message_alert.mp3') %>\" type=\"audio/mpeg\" />\n  <source src=\"<%= asset_path('new_message_alert.wav') %>\" type=\"audio/vnd.wave\" />\n  <source src=\"<%= asset_path('new_message_alert.ogg') %>\" type=\"audio/ogg\" />\n</audio>\nThen it worked, with or without Turbolinks.\n. Just to clarify, the cookie is actually only useful on non-turbolinks requests.  But regardless, this shouldn't be a problem for you anymore, after #405.  Read that PR for the details.\n. Can you show me all the response headers?\nDoes this only happen in Rails 4.2?\n. Typically, Turbolinks-initiated cross-origin redirects are caught by a Turbolinks after_filter and a 403 status is returned to the client, causing Turbolinks to fallback to a normal page request.  In your scenario, Devise seems to be initiating the redirect from within a Rack middleware, so the action_filter is never running.  And since the response that Devise returns doesn't include a Content-Type header, it results in the error you're seeing because Turbolinks assumes that the header exists.  \nKnowing this, you should probably add data-no-turbolink to the login link, if for no other reason than to avoid the double request.  But it'd also probably be better to remove the assumption that the header exists from Turbolinks, which I just did.\n. Thanks for using Turbolinks.  Your question is best suited for Stackoverflow, as Github is for actual issues with Turbolinks.  It's not our responsibility to help you get your code working.\nThat said, I'd feel like a jerk if I left it at that, so here are a few thoughts on your problem.\n1. There is no clean way to do what you want with Turbolinks.  Ideas have been proposed that would make it easier, but as of now they've been rejected.  One of the reasons for this is that it seems counterproductive.  You may think it looks cooler, but you're intentionally making your site slower by making the user wait for the content to fade in.\n2. At the time page:receive fires, the page has not been changed yet, so your handler is fading in the content that you just faded out.  Your code isn't manipulating the new page at all.\n3.  The reason you're not seeing any effects at all is probably because the fadeOut line doesn't halt the execution of the rest of the code.  The Turbolinks process isn't waiting for the content to finish fading, so in all likelihood, your fadeIn call is running before the content has had the time to fade out.\n4.  I don't really recommend you try getting this to work, for the reason outlined above, but if you insist, maybe this would work.  It'll use pure CSS for the fading: \n``` scss\ncontent {\nopacity: 1;\n  transition: opacity 0.6s;\n  -webkit-transition: opacity 0.6s;\n  &.changing {\n    opacity: 0;\n  }\n}\n```\nEnsure that the initial state of the #content element is hidden by adding the the changing class to it in your layout.  Then add these JS handlers:\n``` coffee\n$(document).on 'page:change', ->\n  $('#content').removeClass 'changing'\n$(document).on 'page:fetch', ->\n  $('#content').addClass 'changing'\n```\nAnd that should be it.  Just note that if the request takes longer than 600ms, then your user will be left looking at nothing between then and when the page finally changes.\n. Wow, not sure how I messed that up so bad.  Sorry!\n. Looks like you've accepted an answer on the SO post, so I'll close this.\n. Thanks\n. What browser do you see the warning in?\n. The way the class is written, @elementSelector can be any element, and your patch assumes it will always be html.  Even though html is the only element used in the code, you should still update your patch to allow for other elements.  Something like this would work:\ncoffeescript\n_createCSSRule: ->\n  \"\"\"\n  #{@elementSelector}.#{className}#{if @elementSelector is 'html' then ' body' else ''}::before {\n. Nope, because I didn't write it.  :smile: \n. This sounds good in theory, but what if the external script takes a long time to load?  That could significantly effect the site's perceived speed.  And what if the external script doesn't load at all (4xx/5xx response)?  The onload event won't fire, the rest of the scripts won't run, and turbolinks won't finish the page change process.\n. Thanks\n. Safari already does this, both on normal page loads and on Turbolinks page loads when .focus() is called.  Firefox and Chrome don't.  In general, we do everything we can to maintain native browser behavior, only actively fixing things that Turbolinks has broken (like setting the focus on elements with the autofocus attribute).  It isn't the role of Turbolinks to fix browser discrepancies.  The Safari behavior shows that if a browser wants autofocused elements to have existing text selected, Turbolinks isn't preventing it.  If you or anyone else ever find a case now or in the future where that isn't true, then we'll take action.  Just reopen the PR if you do.\n. The back button works fine for me for Rails 3.2, 4.0.13, 4.1, and 4.2.  Considering that neither Turbolinks 2 nor Rails 4.0 are new releases, if there was an issue we would've heard about it a lot sooner than now, and from a lot more people.  There must be something in your code that's causing the problem, or the problem pertains to a specific scenario that you're not providing any details about.  \n. I think the more ideal solution would be to somehow get the rocket loader to run on page:load.  Have you looked into that?  Because I would imagine that the rocket.js loads the rocketscripts differently than turbolinks loads regular scripts, so it would be better if the rocketscripts were executed the way that they were intended to be.  \nIf it's not possible to do that, then I think that it'd be best if you handled the execution of the rocketscripts in your own code.  Essentially take what you put into this PR and run it on page:load.  Because if we add support for this third party feature, then we'd be opening ourselves up to having the obligation to support all the other third party libraries.\n. Where in the page do you include your site's javascript?\n. Glad you got it working.\n. @davydotcom Would you recommend adding the param across the board or specifically targeting IE?\n. As it is now, Turbolinks.visit(url, change: 'comments') won't change the current URL.  I see the value of that, but I also see scenarios where I'd want the URL to change.  Would anyone object if I added the ability to specify that you want it to change?  \nSomething like this:\ncoffeescript\nTurbolinks.visit(url, change: 'search-results', change_url: true)\n@Thibaut @kristianpd @dhh \n. Yeah, I thought I saw the value of not changing the URL, but the more I think about it, I can't come up with a scenario where you wouldn't want it to change.  Not that that means there isn't one. \nThe relevant code currently looks like this:\ncoffeescript\nif doc = processResponse()\n  reflectNewUrl url unless options.change? || options.keep? || options.flush?\n  reflectRedirectedUrl() # will change url if server redirected\n  # ...\nelse\n  document.location.href = crossOriginRedirect() or url.absolute # will change url\nIf change/keep/flush are set, issues arise in two cases.  First, if processResponse() returns false, then the URL is going to change, but if it returns a valid document, then it won't...unless the second case happens, where the server has redirected.  Then the URL will be changed by reflectRedirectedUrl(), which will actually use history.replaceState and overwrite the current state (which was supposed to be the state created by reflectNewUrl had it not been skipped).\n. Made the change: 7387a96\n. Thanks.  If you find a way to get rid of the obsolete warning without losing the functionality, I'd be happy to merge it.\n. I personally think that changePage is clearer and better conveys what the method is doing.  If you're going to change anything, I'd suggest making the change to changePage that allows a string to be passed in, and then just export changePage to the public API aliased as replace.\n``` diff\n-replace = (html, options = {}) ->\n-  changePage createDocument(html), options\nchangePage = (doc, options = {}) ->\n+  doc = createDocument(doc) if typeof doc is 'string'\n@Turbolinks = {\n  visit,\n-  replace,\n+  replace: changePage,\n``\n. Looks great.  I wonder if it'd be beneficial to point out in the readme that the partial replacement feature is new to v3.0, especially since it hasn't been released yet.\n. Awesome.  Thanks for doing this.  \n. Wait, why are we executing scripts onfetchHistorynow?  \n. Actually, it changed 8 days ago in this commit: 7c9d6b279b9d21c2d81b75bc32b43193bb070196.  MovingextractTitleAndBodyintochangePageresulted inrunScriptsbeing set regardless of whether it wasfetchReplacementorfetchHistorythat calledchangePage.  \n. Because those scripts have already been executed for that page.  And since the transition cache usesfetchHistory, the scripts would run then too.  \n. Yeah, without tests it's easy to miss important things like this when they're implemented so subtly.   \n. @Thibaut I just discovered that due to this change, permanent nodes disappear from cached pages.  I hit the back button and all the sections withdata-turbolinks-permanentwere gone.  Thoughts?\n. I get where you're coming from.  But the little server-side code this gem has doesn't change very often (the partial replacement feature was an exception), leading me to believe that this is not as hindering as you might think.  I'm not opposed to removing support for 3.2 in the future, provided we have a good reason to.  Until that happens, I'd like as many people as possible to be able to use this gem.  \n. Closing this in favor of #485.  \n. We already have similar functionality with thepage:expireevent that is triggered when a cached page is removed.  If this is necessary (which it seems to be), then I have a few questions that might be worth considering.\n- If users are given the means to choose between cleaning up after each node removal or cleaning up once a page has been expired from the cache, is it always going to be beneficial to choose one over the other?  Or are there some cases where one method is better and other cases where the other method is?  (This answer will likely inform the answers to the next questions, and should probably also influence how you decide to implement the automatic behavior that DHH suggested.)  \n- Is triggeringpage:expirestill needed?  \n- If it is, would it make sense to just use one event forpage:expireandpage:after-remove`?\nIt's possible that I'm misunderstanding which nodes are being passed to page:after-remove (originals/clones/etc), and that these two events don't really have anything to do with each other.  If that's the case, then we should probably try to make things a little clearer for users in the readme.\n. Yeah, I'm not in any way arguing against the per-item expiry.  Just thought the relationship between these two events was worth discussing.\n. Here's the original issue that requested it: #294\n. Looks great.  Sorry for taking so long to address this.\n. Merci.\n. The master branch is currently on version 3.0.0, and the readme correctly reflects the new API for the enabling and disabling progress bar.\n. The master branch on github is currently at version 3.0.0, and the progress bar API changed from what it was in version 2.  If you want to read the readme for version 2.5.3, go here.\n. I'm on board with the functionality, but I'm not sure about the name of the attribute.  Seems strange that data-turbolinks-eval=true and data-turbolinks-eval=false don't mean opposite things.  Plus, I think it's always been implied that any script tag without a data-turbolinks-eval=false attribute meant that data-turbolinks-eval=true.  \nOff the top of my head, some alternative names could be data-turbolinks-cache-eval, data-turbolinks-history-eval, data-turbolinks-re-eval, or data-turbolinks-always-eval.  Or any other name you think might be better.\n. That would work.\n. Thanks\n. Sorry for not responding sooner.  I have no problem with the concept or the implementation, but the name of the attribute seems a bit misleading, because this new functionality has nothing to do with the transition cache.  It just has to do with the turbolinks cache.  You could have the transition cache disabled and still use this attribute.  I think naming the attribute data-transition-cache would likely confuse users, making them think that it will only have an effect during a transition.\nPerhaps data-turbolinks-cache=\"false\" would be better, and if an element has that attribute it should also imply the existence of a data-no-transition-cache (or data-transition-cache=\"false\" if you still want to change it) attribute.\n. Add data-turbolinks-eval=false to the application.js <script> tag and it'll work.  Without it, all your javascript will re-evaluated on every page.\n. Thanks for laying it all out for us to discuss, Thibaut.\nIn my opinion, (1) and (2) aren't good options because of the loss of state.  We've always made it a point of emphasis that Turbolinks should mimic native browser behavior in every way possible.  Losing the state when navigating through history would be a big contradiction to that.  \nWhen the change was made to cache body.outerHTML instead of body, I understood the reasoning behind it, but I wasn't thrilled with the fact that it meant that event bindings would have to be reapplied on cached pages.  I had assumed (without thinking about it that much) that I'd be able to just bind my initialization JS to page:change instead of ready page:load and it'd be alright, but Thibaut has illustrated why it's not that simple.  \nSo I would favor any solution that included reverting to the old way of caching pages.  If it can be done, (4) would be the ideal option.\n(I personally wouldn't have a huge problem with (5), except that it's probably not an option since it's already been announced/promoted and people seem enthusiastic about it.  I think one of the reasons we resisted the idea of partial replacements for so long is because in the back of our minds we saw the potential of running into a caching issue like this.  Hopefully we can find a way to make it work, but if we can't, dropping partial replacement might be our best move.) \n. I was just about to say what @rafaelfranca just said.  Adding a pre-built .js file to the repo might mislead users into thinking that's all they need to use turbolinks.\n. There are definitely things that won't work without the backend component.  Disabling after non-GET requests and handling redirects, to name a couple.  I'd never recommend using just the JS file.\n. We all seem to have the same reaction to this, which is that we don't see what the benefit of it is.  Simply giving the ability to require turbolinks in a bower manifest instead of application.js doesn't seem to justify the extra work required to maintain a compiled JS file (as well as the manifest itself, which we would all have to remember to update whenever we change versions).  \nI think it'd be best if bower support was maintained in a separate repo (like it was before that account was deleted) by someone who actually uses it.  @Thibaut gave some advice on how to potentially go about that.  I'm going to go ahead and close this.\n. I'm still opposed to arbitrarily limiting who can use our gem.  If there was actually a reason for doing this that was specific to our code and not simply an effort to match the requirements of Rails, it'd be a different story.  But as far as I can tell, there's really no benefit at all to making these changes at this time.\n. Title tags are a required element of all HTML documents.  Therefore, Turbolinks shouldn't have to handle the case where the title tag is absent.  You should just add a title so the document is valid HTML.\n. I tried that initially, but it wouldn't trigger the load event.\n. Yeah, that crossed my mind too, but I left it out in order to simplify the PR.  But since you're on board, I'll add it back in.\n. I added URI.escape to fix this issue: #227 \n. You shouldn't have to do this.  The reason that test failed is because referer in Rails 3 is defined in Rack and checks for the header named HTTP_REFERER not Referer.\n. ",
    "rceee": "@reednj77 Hey, that link didn't work, but I'd really like to see what you've got.\n. Thanks, I appreciate it!\n. ",
    "rickypai": "should replace the link to:\nhttp://reed.github.com/turbolinks-compatibility/facebook.html\n. ",
    "ZiaMM": "I've tried all these and more (fb and twitter).  They do nothing until I reload the page - then they show up.  How to make them fire without a page-reload?\n. ",
    "Dorian": "A simplier way to load facebook worked for me: https://gist.github.com/Dorian/84af8d867e48a10526c4\n. ",
    "besi": "I was able to resolve the issue like so:\nAdd the jquery-turbolinks gem to your Gemfile:\n``` ruby\nSee http://stackoverflow.com/a/18834209/784318\ngem 'jquery-turbolinks'\n```\nNow all jQuery document reaady callbacks will be called in case of a turbo-link click event.\n``` slim\n/application/_facebook_init.html.slim\ncoffee:\n   # This line below is crucial because otherwise this code won't be reached in case of a turbo-link click\n  $ ->\n    ((d, s, id) ->\n      js = undefined\n      fjs = d.getElementsByTagName(s)[0]\n      if d.getElementById(id)\n        return\n      js = d.createElement(s)\n      js.id = id\n      js.src = '//connect.facebook.net/en_US/sdk.js#xfbml=1&appId=[SOME_APP_ID]&version=v2.0'\n      fjs.parentNode.insertBefore js, fjs\n      return) document, 'script', 'facebook-jssdk'\n```\n. ",
    "Tashows": "For anyone using the new turbolinks gem see this issue. ",
    "halfdan": "The same question applies to other analytics tools like Piwik. Is there any way to hookup a function callback that gets called on page:change?\n. ",
    "steverandy": "Why not do this instead?\n$ -> $(document).trigger 'page:change'\n. ",
    "lewis-od": "I tried this:\ncoffeescript\nfetchReplacement = (url) ->\n  xhr = new XMLHttpRequest\n  xhr.open 'GET', url, true\n  xhr.setRequestHeader 'Accept', 'text/html, application/xhtml+xml, application/xml'\n  xhr.setRequestHeader 'Referer', historyCache[window.history.state.position - 1].url\n  xhr.onload  = -> fullReplacement xhr.responseText, url\n  xhr.onabort = -> console.log \"Aborted turbolink fetch!\"\n  xhr.send()\nBut it doesn't work (on chrome) and gives the warning Refused to set unsafe header \"Referer\". I don't think it'll possible as setting the referer is disallowed by the XHR spec (see here).\n. ",
    "chourobin": "I think this issue still occurs and I am using turbolinks 1.1.1.  Does anyone else have problems with the link_to :back helper generating a link to the current page?\n<%= link_to \"Back\", :back %>\n. ",
    "yasuoza": "One way to  make :back option works, we have to override HTTP_REFERER in request header, however it is blocked by browser.\nAnother way to make :back option works, we can change _back_url method defined in actionpack/lib/action_view/helpers/url_helper.rb, like this\nruby\ndef _back_url # :nodoc:\n  referrer = controller.respond_to?(:request) && (controller.request.env[\"HTTP_X_XHR_RFERER\"] || controller.request.env[\"HTTP_REFERER\"])\n  referrer || 'javascript:history.back()'\nend\nBut this makes the newly potential xss pitfall, since attacker can prepare to send another referrer by setting X-XHR-Referer header.\nSo in my opinion, to use javascrtip:hisotry.back() you should write it to link_to target path, or hook history.back() on clicking the link.\n. I tried writing complete tests using phantomjs and poltergeist, because poltergeist supports network_traffic monitoring.\nBut phantomjs does not support window.history.state, so it was failed.\nDoes anyone have another idea for complete suite?\n. @kossnocorp Can those emulate accessing assets changed page through turbolinks and detect it?\n. @kossnocorp Keep going. I also think about test for turbolinks.\n. Could you show me reproduced problem pages?\n. I think suggested assetsChanged does not work following situation.\nHowever, if this is turbolink's design, please ignore this comment.\n``` coffee\nassets = [1..5]\nextractedAssetsWithDoc = [100..97].concat [5]\nOriginal version\nassetsChanged = (doc)->\n  extractedAssets = extractedAssetsWithDoc\n  extractedAssets.length isnt assets.length or intersection(extractedAssets, assets).length != assets.length\nintersection = (a, b) ->\n  [a, b] = [b, a] if a.length > b.length\n  value for value in a when value in b\nthrow \"original assetsChanged should return true\" if assetsChanged() isnt true\nNewly suggested version\nassetsChanged = ->\n  newAssets = []\n  for asset in extractedAssetsWithDoc\n    newAssets.push asset\n    break if asset is assets[-1..][0]\n  newAssets.length isnt assets.length\nthrow \"newly assetsChanged should return true\" if assetsChanged() isnt true\n```\n. @rahearn What you want do is like following code?\ncoffee\nassetsChanged = (doc)->\n  extractedAssets = extractAssets doc\n  extractedAssets.length isnt assets.length or intersection(extractedAssets, assets).length != assets.length\n  [lessAssets, manyAssets] = [assets, extractedAssets]\n  [lessAssets, manyAssets] = [manyAssets, lessAssets] if lessAssets.length > manyAssets.length\n  newAssets = []\n  for asset in lessAssets\n    newAssets.push asset if asset in extractedAssets\n     break if asset is manyAssets[-1..][0]\n  newAssets.length is manyAssets.length\nAbove code and maybe your design ignores changed assets, so it is out of current turbolinks' design.\n. @murdoch Ensure turbolinks.js is placed last of script tags in . For ease, you can run your rails app in production environment with assets precompiled. \n. This should be discussed.\nTo solve this, we must implement some methods to prevent resetScrollPosition() calling when same page link.\nHowever, same page reloading through turbolinks looks like \"page not reloading\" because browser makes no scrolling.\nI think same page reloading through turbolinks is rare case and application must shows user  that \"page is reloading\". \n. @sandelius @semiweb  This issue seems to be solved by #133, doesn't it? If not, could you reproduce this issue?\n. I also tested target=\"_blank\" situation, but it worked in Chrome, Safari and Firefox. I think some other javascript file(s) make conflicts. Could you reproduce your situation?\n. :+1: \n. Why do you think page:load should not triggered after another page loaded?\n. @dhh So you mean turbolinks tracks named assets and use Turbolinks#visit only when next page's named assets are same as those of current page? \nnote.\nThough this pull-req will not be merged, I fixed typo.\n. That's OK. I agree with you.\nOn Tue, Dec 4, 2012 at 6:56 PM, David Heinemeier Hansson\nnotifications@github.com wrote:\n\nNo, I mean that #visit is only NOT used if the named assets change. Otherwise #visit is used all the time.\nOn Dec 4, 2012, at 10:22 AM, Yasuharu Ozaki wrote:\n\n@dhh So you mean turbolinks tracks named assets and use Turbolinks#visit only when next page's named assets are same as those of current page?\nnote.\nThough this pull-req will not be merged, I fixed typo.\n\u2014\nReply to this email directly or view it on GitHub.\n\n\u2014\nReply to this email directly or view it on GitHub.\n. I meant your suggested idea is currently the best.\n\nMy understands is that track current page's named asstes(like\n\"data-turboliks-asset-watched\") and\nfetch clicked page and reload the page ONLY if named assets was changed.\nIs it right?\nOn Tue, Dec 4, 2012 at 7:32 PM, David Heinemeier Hansson\nnotifications@github.com wrote:\n\nDo you want to take a stab at that? I say we just go with a data-marker,\nlike assets data-turbolinks-asset-watched and only look for changes on them.\nOn Dec 4, 2012, at 11:28 AM, Yasuharu Ozaki wrote:\n\nThat's OK. I agree with you.\nOn Tue, Dec 4, 2012 at 6:56 PM, David Heinemeier Hansson\nnotifications@github.com wrote:\n\nNo, I mean that #visit is only NOT used if the named assets change.\nOtherwise #visit is used all the time.\nOn Dec 4, 2012, at 10:22 AM, Yasuharu Ozaki wrote:\n\n@dhh So you mean turbolinks tracks named assets and use\nTurbolinks#visit only when next page's named assets are same as those of\ncurrent page?\nnote.\nThough this pull-req will not be merged, I fixed typo.\n\u2014\nReply to this email directly or view it on GitHub.\n\n\u2014\nReply to this email directly or view it on GitHub.\n\u2014\nReply to this email directly or view it on GitHub.\n\n\n\u2014\nReply to this email directly or view it on GitHub.\n. @jdalton :+1: \n. Current turbolinks.coffee is just 209 lines. I think refactor into classes is not necessary until total test is somehow established.\n. Good point!\nMy vote is ...\n- recallScrollPosition  merges resetScrollPosition \n  I think current separated methods are easy to understand. Because the name \"recall\" and \"reset\" is not same. \n- changePage\n  How about following one? Use runScript variable to trigger executeScriptTag(), for easy understanding.\n\n``` coffee\nchangePage = (page, runScript = false) ->\n  document.title = page.title if page.title?\n  document.documentElement.replaceChild page.body, document.body\n  executeScriptTags() if runScript\n  rememberCurrentState()\n  resetScrollPosition page\n  triggerEvent 'page:change'\nIn fetchReplacement()\nchangePage page, 'runScript'  # Instead of 'true', 'runScript' is easy to understand\nIn fetchHistory()\nchangePage page\n```\n- The others\n  Seems good to merge into master.\n. > I chose to go with \"reset\" because the word has two meanings\nIf we assign two meanings to resetScrollPosition, it will arise misunderstand or confuse for the new to turbolinks code. I want to keep the code readable and easy to understand for the future use. So I think separated and concrete naming is required even though similar but not the same  things is done in those methods.\n\nWhat if, down the line, we need the changePage method to perform another action that's dependent on the source (cache or xhr) of the new page? \n\nWe do not have to think about another action by changePage with current version, right? How about keeping current changePage until we need to change it and its parameters?\n. I agree with @jipiboily. Implementation of data-turbolinks-run-once may be easy like following, but I think turbolinks should be minimum and obey rail's way: static assets should be loaded in header.\ncoffee\nexecuteScriptTags = ->\n  for script in document.body.getElementsByTagName 'script' when script.type in ['', 'text/javascript'] and not script.getAttribute?('data-turbolinks-run-once')?\n    copy = document.createElement 'script'\n. Does this work without turbolinks and jquery.turbolinks?\njQuery replace default 'click' method. See http://api.jquery.com/click/\n. Turbolinks' principle is just require it and just works. Cheers.\n. The following code posts.js.coffee works for me.\ncoffeescript\njQuery ($) ->\n  $(document).on 'page:fetch', ->\n    return false\n    alert 'You must not see this alert'\nand application.js is following.\njs\n//= require jquery\n//= require jquery_ujs\n//= require turbolinks\n//= require_tree .\nCould you reproduce this issue? Simple and easy one OK.\n. @ccmcbeck Oh I got it. Sorry for my misunderstanding. Turbolinks does not provide any methods to prevent turbolinks' original page:fetch.  If you want to prevent page:fetch, please use event.preventDefault() same as the way you prevent from click event. And If you are eager to abort page:fetch with your application status variable, you can edit turbolinks' code as you want with MIT-LICENSE.\n. In my application with turbolinks, a form with remote: true sends only one ajax request. Could you reproduce the issue?\n. Hmm... I could not reproduce the issue. Could you push reproduced app? Then please paste the link to the repo.\n. Thanks for creating repo.\nThe issue should be fixed with following code.\n``` coffee\njQuery ->\n  # $(document).on 'change', 'input[type=text]', ->\n  $('input[type=text]').unbind('change').change ->\n    console.log($(this).closest('form').attr('action'))\n    $.ajax\n      beforeSend: (xhr) ->\n        xhr.setRequestHeader(\"Accept\", \"application/json\")\n      data: \"_method=post&#{$(this).attr('name')}=#{encodeURIComponent($(this).val())}&csrf_param=#{encodeURIComponent($('meta[name=csrf-token]').attr('content'))}\"\n      dataType: \"text\"\n      type: \"post\"\n      url: \"#{$(this).closest('form').attr('action')}\"\n  error: (data) ->\n    alert(\"Erro!\")\n\n  success: (data) ->\n    alert(\"Success!\")\n\n```\n. Your way to unbind the scroll event is good. \nAnother way to unbind the scroll event, you can include scroll event manage javascript file within body tag like this\nhtml\n<body>\n  <script src=\"scroll_event.js\"></script>\n</body>\nNick, do you have any idea? @reednj77\n. Turbolinks should work not only in rails, but if you have redirect, plz send X-XHR-Current-Location with redirect full path. \nSee: \nhttps://github.com/rails/turbolinks/blob/master/lib/turbolinks.rb#L19\n. @mariovisic \nThis feature was once rejected by dhh in #143. \nI think body is the content of the page and javascript files are not content.\nDoes putting assets file in head makes page loading so slow?\n. @mariovisic These days, I was examining page loading to be faster when putting javascripts(10 scripts, each 600kb)  at the bottom of body with Chrome benchmark extension named Page Benchmarker. However, I could not confirm putting javascripts at the bottom of body makes page load speed faster, to make matters worse, sometimes it is slower than putting javascripts in head. \nCould you give us an example we can confirm putting scripts tag at the bottom makes page loading faster.\nThanks.\n. Maybe it is because your using turbolinks does not work well. Above script woks good in my turbolinks sandbox application.\nCould you update turbolinks gem? If you have trouble after update, please create http://immense-fortress-8830.herokuapp.com source code repository. Then I will investigate it. Thanks.\n. Good.\nFeel free to ask us anytime you have troubles with turbolinks.\nOn Sunday, April 21, 2013, Geremia Taglialatela wrote:\n\nI'm sorry.\nI always repeat to me: \"double check you are using the latest version of\nthe gem, then try the master branch\" but I fail everytime\nI was using an older version (1.0.0) and I don't know why, since I didn't\nspecified the version number in the gemfile and I was assuming it was using\nthe latest version:\nhttps://github.com/tagliala/turbospinner/blob/master/Gemfile#L25\nForcing the '1.1.1' it works as a charm. thanks for the hint and sorry\nagain\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rails/turbolinks/pull/202#issuecomment-16708775\n.\n\n\nYasuharu Ozaki\nE-mail : yasuharu.ozaki@gmail.com\n. This is good example to bind event hook turbolinks provides .\nNice catch!\n. Yes, developer should fix the broken link, but sometimes if developer made\na broken link, user loses his way not only site's bug, but also turbolinks'\nbug.\nBugs should be fixed, isn't it?\nOn Sunday, April 21, 2013, Nick Reed wrote:\n\nThe solution works, but I'm wondering if it's necessary. If your users are\nrunning into this bug, it means your site contains broken links. Rather\nthan relying on Turbolinks to compensate for that, it makes more sense to\nme to just fix the broken links.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rails/turbolinks/pull/209#issuecomment-16709941\n.\n\n\nYasuharu Ozaki\nE-mail : yasuharu.ozaki@gmail.com\n. As you say, turbolinks(and any other javascript) cannot override document.referrer. \nAddition to it, I think providing page:before_fetch event from turbolinks is not clever idea because in usual we cannot hook any trigger just before page changes.\nSo my answer, cache the current location as window['referer'] after page change event and use it after page:load(or anytime you want).\n. The code looks good to me, but I think to make history of project, it is better that first add feature then refactor the code.\nHow do you think?\nIf you agree with that, I want to modify pull-reqed code first, so please do not merge that pull-req.\n. Thanks for your kindness as I do not have to work more. But I don't care about it so please do not concern.\nI made a little change to #209 and done my work. \nSo, could you update your code?\n. I appreciate you that you discussed with me.\nI want to propose a little refactoring to this PR. \nSo, should I open a new PR or should I comment to your code? \n. >  If a browser bug ever presents itself that breaks that expected functionality, your implementation would throw an error\nIf there are some browser bugs, maybe current master source will through an error. So we should change to use try catch instead of returning false.\n\nSomeone reading your implementation would have no idea that validateResponse might prevent the next line from running.\n\nYes, I feel so too. In your opinion, anyone reading fetchReplacement will know that the rest of code is not evaluated  based on doc value not validateResponse method name. Is it right? \nSo I think we should change the name of current validateResponse something like rejectInvalidResponse or rejectedInvalidResponse and so on.\nWhat do you think?\n. > the value of session[:_turbolinks_redirect_to] will be a full URI (http://example.com/users/1)\nI know it, but does it make some issue?\n\nanchor is going to be appended onto the end of the redirected URL\n\nThanks for feedback. I want to ask you about reflectRedirectedUrl.\nCurrent core source code of it is \ncoffee\nreflectRedirectedUrl = ->\n    window.history.replaceState currentState, '', location + document.location.hash\nmade by fadab58e246.\nAnother anchor appending issue will be solved if the code is changed like\ncoffee\nreflectRedirectedUrl = ->\n    window.history.replaceState currentState, '', location\nWhy did you want to retain current document.location.hash even after redirected to new location?\n. turbolinks.rb\n``` ruby\ndef _compute_redirect_to_location_with_xhr_referer(options)\n  session[:_turbolinks_redirect_to] =\n    if options == :back && request.headers[\"X-XHR-Referer\"]\n       _compute_redirect_to_location_without_xhr_referer(request.headers[\"X-XHR-Referer\"])\n    else\n      _compute_redirect_to_location_without_xhr_referer(options)\n    end\nend\ndef set_xhr_current_location\n  response.headers['X-XHR-Current-Location'] = session.delete(:_turbolinks_redirect_to) || ''\nend\n```\nturbolinks.js.coffee\ncoffee\nreflectRedirectedUrl = ->\n  location = xhr.getResponseHeader 'X-XHR-Current-Location'\n  if location and location != ''\n    window.history.replaceState currentState, '', location\nsolves issues in #110, #218, and #221.\nI think it is good to change the name of set_xhr_current_location to like set_xhr_redirect_to, but could you check above code  first?\n. Can you show your controller code?\n. I understand what you mean.\nAdded commit should fix anchor preserving issue. Could you check?\n. Thanks. \nSquished.\n. Yes, we should change the name like X-XHR-Redirected.\n\ndo we even need to send the response header if there hasn't been a redirect?\n\nWithout sending redirect_to location, how can we detect redirected location? Or Do you mean we should set redirected flag such as X-XHR-Redirected to 1 when redirected and X-XHR-Redirected-To to redirect location in header?\n. It will be shorter:\nruby\ndef set_xhr_redirected                                         \n  response.headers['X-XHR-Redirected'] = session.delete(:_turbolinks_redirect_to) || '' \nend\ncoffee\nreflectRedirectedUrl = ->\n  if location = xhr.getResponseHeader 'X-XHR-Redirected'\n    preservedHash = if removeHash(location) is location then document.location.hash else ''\n    window.history.pushState { turbolinks: true, position: currentState.position + 1 }, '', url\nI wrote above code once first changed to check whether location isn't blank to be more valid code.\nWhat do you think?\n. So, how about this?\nAnd I changed X-XHR-Redirected to X-XHR-Redirected-To because X-XHR-Redirected sounds like state, not location.\nruby\ndef set_xhr_redirected_to\n  if session[:_turbolinks_redirect_to]\n    response.headers['X-XHR-Redirected-To'] = session.delete :_turbolinks_redirect_to\n  end\nend\ncoffee\nreflectRedirectedUrl = ->\n  if location = xhr.getResponseHeader 'X-XHR-Redirected-To'\n    preservedHash = if removeHash(location) is location then document.location.hash else ''\n    window.history.pushState { turbolinks: true, position: currentState.position + 1 }, '', url\n. Added a commit. Need to be squished?\n. This issue is related to #231.  We cannot use request.referer correctly when assets change as long as calling pushState() before window.reload().\nIMO, I do not recommend to use turbolinks in a site where assets change frequently. It makes overhead. \n. Changed \nfrom \ncoffee\n if xhr.status.toString().match(/^40/)\nto\ncoffee\n if xhr.status.toString().match(/^4/)\n. ",
    "leckylao": "+1 with @chourobin that link_to back doesn't work on neither v1 nor v1.1.1\n. ",
    "speedmax": "+1 @lecky it's funny how we run into the same bug\n. ",
    "shoutsid": "+1\n. ",
    "n-studio": "+1\n. ",
    "antonjn": "+1 . @kuboon, thx!\n. ",
    "zaksoup": "I'm on turbolinks 1.1.1 and still seeing this occur.\n. Still seeing this happen in Rails 4 rc2 with turbolinks 1.2.0\n. ",
    "m5n": "This issue still exists with Rails 4.0.2, Turbolinks 2.2.0.  Here's how to reproduce:\n```\n$  rails new TurbolinksTest\n$  cd TurbolinksTest\n$  rails generate controller First\n$  rails generate controller Second\n$  vi config/routes.rb\nroot 'first#index'\nget 'second' => 'second#index'\n$  vi app/views/first/index.html.erb\nFirst Page\n<%= link_to 'Second', second_path %>\n$  vi app/views/second/index.html.erb\nSecond Page\n<%= link_to 'Back', :back %>\n$  rails s\n```\nLoad http://localhost:3000, click on \"Second\" link, once on the 2nd page click on \"Back\" link. You stay at the 2nd page.\nNow reload the page. The link changes to javascript:history.back() . \nTested in Firefox 25 and Chrome 32.\n. Just to close the loop on this, @reed's commit above fixed my issue. Thanks!\n. ",
    "rodrigoruiz": "@reed It is still not working on Safari 7.0.1.\n. ",
    "interhive": "I got around this by adding data-no-turbolink attribute to the link. Since this is going into Rails, it may be a good idea to make this the default behavior.\n. Looks good. Will test right quick.\n. Will test with updated version. Previous commit worked, as well. Thanks!\n. This commit works but it breaks something else that the previous commit had corrected. The issue I'm having now concerns JS handling within Twitter Bootstrap drop-down menus:\nhaml\n%a.dropdown-toggle{href: '/user', data: {toggle: 'dropdown', target: '#'}}\nWith JavaScript enabled, Bootstrap will disregard the HREF and, instead, use the data-target attribute. Of course, it's nice to have the HREF for failover when JS is disabled -- highly unlikely but 'proper design.' Prior to you making the changes to alleviate the original issue, I had to add data-no-turbolink to get it to work. Prior to the most recent commit, the intended behavior was working, as-expected (without the data-no-turbolink attribute).\nThoughts on why this might be happening (again)?\n. The most recent commit also kills the responsive, collapsible nav elements within Bootstrap, as well.\n. Ok, getting some weird results...\nThe drop-down works on (most) pages except on the page that matches the HREF ('/user' in my case).\nAlso, on the root page of the site, clicking the link leads to the following ActionController exception:\nNo route matches [GET] \"/undefined\"\n. To clarify the exception behavior:\n1. Click the drop-down link : menu drops down\n2. Click outside of the drop-down menu (to hide it) : ActionController exception.\n. Also, after a turbolink has been followed, the drop-down menu ceases to operate -- on any page. I have to perform a full refresh of the page to have that function again. Weird stuff!\nNOTE: this behavior is what lead me to believe that the drop-down menu did not operate on the page that the HREF pointed at. When I perform a full reload, the drop-down does work on that page but only until a turbolink is clicked.\n. @dhh: you're probably right on that one.\n. @davydotcom: the ActionController exception issue has been fixed with the most recent commit. I'll have to see what can be done about the Bootstrap/page:change situation. Thanks for this. I'm about to open another Issue for a redirect_to issue I'm seeing. Thanks!\n. Yeah, that didn't work. I need to look into how Bootstrap initializes and hook into that. Thanks for the suggestion.\n. Sorry about that. I skimmed the issues list and didn't see that there. I'll track that ticket.\n. This is good stuff. I had actually tried overriding redirect_to, as well, but couldn't get it to work (used HEADERS instead of flash[]). The headers don't seem to be sent with XHR requests -- or maybe I was doing something wrong?\nIn any case, looking forward to this -- yanked turbolinks from my codebase until this issue was resolved.\n. Redirect functionality is working swimmingly. Oh, and I was able to resolve the Bootstrap issues I was having using the 'page:change' event. Thanks again for these features!\n. One thing I did notice in the redirect functionality is that I have to monitor for the :x_push_state_location key in my code:\nhaml\n- flash.each do |key, msg|\n  - unless key == :x_push_state_location\n    # display code...\nThere's not really any way around this but I thought I'd give the heads-up for those implementing their flash this way.\n. I had to add this because the URL is showing as one of the flash messages. I'll remove the conditional and re-test with the latest commit though to make doubly sure.\n. Yeah, I'm seeing:\n\n. Seeing:\n\nThe broken flash box is being shown on every page now.\n. Perhaps:\nruby\nflash.tap {|f| f.delete(:x_push_state_location)}\n. Cool. Will test. Thanks again.\n. Bingo. Good to go!\n. Groovy. Looks to be much simpler in the implementation and works just as well. Keep watching that college ball -- leads to some good stuff! :D\n. ",
    "moomerman": "I would expect it to do the same thing as all other links on the page tbh.  In a non-turbo site then it goes to the server and does a full page load.  If that link is a turbolink then I would expect it to do the turbolink page load.  Doing the turbolink page load even though you're on that page is better than doing an entire asset refresh imo.\nClicking on a link you're already on in a non-turbolink page is not a special case, so why make it a special case in turbolinks?\n. Yep, this works great.  Thanks (ref #41)\n. Fair enough.  The most recent case is a persistent visible audio player on the page with play progress indicator, I don't want that reloading on each page load.\n. @fklingler I'm away for the weekend but will try and put something together mon/tue next week\n. @jeremyhaile haven't released anything yet I'm afraid, I had to make changes to my version of Turbolinks to support my extension and didn't get round to submitting that as a suggestion as I wasn't that happy with the changes I made, I just 'got it working'.\n. It turns out its an odd case if you have any script tag in the head and use common async js loaders.\nTake this first request HTML for example:\n```\n<!DOCTYPE html>\n\n\nTest App\n\n\n\nconsole.log('head script');\n\n\n\n\n\n\n\n    // load YouTube player api asynchronously.\n    var tag = document.createElement('script');\n    tag.src = \"http://www.youtube.com/player_api\";\n    var firstScriptTag = document.getElementsByTagName('script')[0];\n    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n  \n\n\n```\nThe async JS loaders (GA and YT) both attach themselves above the first script element on the page, so if this is in the head then turbolinks extractAssets function sees the async created nodes and thinks the assets have changed.\n. Yeah, I can't think of a nice solution.  It is quite trivial to fix as you pointed out, but the problem I see is copying and pasting Google Analytics code is very common and rails layouts default with a script tag in the head so it will be a common problem people will encounter.  Worse still is that its quite common only to include the GA code in production so everything will look great in dev and then break when you push it into prod.\n. Good point!  Maybe its just a documentation job then?\n. ",
    "luizkowalski": "you can use data-no-turbolink on your delete links, like this\n<a href=\"/articles\" data-no-turbolink>Articles</a>\n. ",
    "elia": "Here's the fix for broken DOMParser from MDN: https://developer.mozilla.org/en-US/docs/DOM/DOMParser\nJust in case some other browser supporting pushstate with broken DOMParser is found\n. I found it dealing with port 80, which seemed to be omitted on one of them, \nI'll try to give some proofs next time get my hands on that lovely browser :)\n. \nok, this is what's happening on a win7 vm, maybe it's fixed under win8, @reednj77 you able to reproduce?\n(seems unlikely that this is due to local libs)\n. @dhh seems a win7 bug, can you reopen/merge?\n. I'd like to see this merged too\n. cc @Thibaut \n. updated: e4f9454\n. I managed to fix it by storing the raw url.absolute => xhr.responseText in a separate cache for transition-cache instead of using the history cache. Then the restore process uses createDocument on the stored raw html and repeats the extraction of title & body as it does when the contents come from xhr.\nI'd send a PR but would need a v2 branch to target first (#572). \nThe change is available here anyway: https://github.com/elia/turbolinks/compare/2-stable...elia:fix-transition-cache\n. Alas we had to drop Turbolinks support in our app (we have too many third party ad/tracking JavaScript that we haven't control over and are not PJAX-friendly). \nNot sure if I'll be able to upgrade, re-enable and test in a timely manner. Feel free to close if it should be fixed on master.\n. Thanks!\n. ",
    "janlimpens": "Thanks for the comments!\n. ",
    "igrigorik": "facepalm .. right, the browser adds it automagically.\n. ",
    "vickash": "Ah, you're right. That should actually be currentState.position + 1 instead of window.history.length.\n. I can see how this could be useful. Pull request here.\n. ",
    "fred": "+1 to vickash solution\n. @davydotcom Very good point. I did not think about that, indeed Facebook/twitter/googleplus will all get a full reloaded page to get fresh headers.\nI guess its not really necessary to have this feature after all.\n. are you requiring turbolinks 'after' all other javascripts in the manifest ?\n. ",
    "danbt79": "Works for me.\n. My inner arsehole tends to agree with you! This should be given thought though - is Rails' stance to simply not recommend doing this, or to prevent it working at all?\n. That sounds potentially brittle to me - I'd leave that up to caveat empor and making the developer aware of how this works. If you're using .js in this way and relying on document references like that, there should be some pain! I think we should just make sure .js can actually execute, and leave implementation details up to the .js author, rather than hacking a solution upstream on this library.\n. ",
    "marcalc": "I just saw the issue was related to my application. Some jquery was overriding the click event.\n. ",
    "m4n": "\nI found a work-around that does not require page:fetch to be called when the page is cached.\n\n@pomartel I am experiencing the same problem with the fb-root div. Would you mind sharing your specific work-around with the rest of us?\n. ",
    "kwantopia": "@pomartel where do you put this coffee script and what do you have in your view?\n. ",
    "benbonnet": "Happy to hear about this form 'issue'. On a new project, I don't feel like it is that external.\nI've been surprised not to see it working out-of-the-box on forms\nAt first I felt like turbo links was about making your site fully ajaxified, which is not the case when forms aren't considered\n. This won\"t work when using it programatically with $.fancybox.open\n. ",
    "johnnyshields": "\nI think most people using turbolinks would have ajax forms anyway\n\n@dhh turbolinks is precisely the reason I'd want to not have ajax forms--because turbolinks should do it for me!\n:+1: +1 to re-opening this.\n. Agreed that it should not be the default. In @timurvafin's fs/turboform gem, he requires to add a turboform: true  attribute to the form to enable the functionality. This would be quite useful.\n. Fair enough, thanks for the reply :beers:\n. ",
    "jeremyhaile": "@moomerman - did you turn your extension into a gem yet?  What's the status?\n. ",
    "amnesia7": "Is it not just a case of something like the following that I'm currently using in a helper.js file included in application.js and applying data-turbolinks-form attribute to forms that I want it to work with:\njs\n$(document).on('submit', 'form[data-turbolinks-form]', function(e) {\n  var options = {};\n  Turbolinks.visit(\n    this.action + (this.action.indexOf('?') === -1 ? '?' : '&') + $(this).serialize(),\n    options\n  );\n  return false;\n});\nThis could be extended to check for a data-turbolinks-change attribute on the form to just update a part of the page (v3-specific) or maybe any other options that could be passed in to .visit()\n. Actually the inners should probably all be within if (Turbolinks.supported) { so that return false; doesn't prevent form from submitting on older browsers.\n. Sorry, page hadn't shown that you'd commented.\n. @Thibaut if I use remote: true on the form and use change server side I'm then without any indication to the user that the page is loading when the user clicks the submit button until the response comes back from the server.\nI could apply listeners to the ujs ajax:beforeSend and ajax:complete to start and stop the turbolinks progressbar if that's the way to do it.\nThe page updates ok but my url doesn't seem to change when I use render :index, change: 'content' in the index action of my controller after clicking my search form's submit button. Am I missing something here?\n. @Thibaut I'm not sure where to go with this in my case because any js browser could do the remote form submission but only those that support turbolinks would be able to interpret the turbolinks-centric response that is returned so I'm wondering how it would affect them. \nWouldn't it cause them to wait for the remote form submission to return a response which the browser then wouldn't understand (because it doesn't support turbolinks) and cause the browser to reload the new url meaning that using the search for those browsers would take twice as long (and cause twice as many server hits) as it should?\nThis is in contrast to my original jquery js would only be submitted via turbolinks if the browser supports turbolinks and the page would submit to the new search url if it didn't.\nI'm all in favour of using the rails tools that we have (turbolinks, ujs, etc) but I'm not sure that it beats the jquery code that I mentioned above unless you can convince me otherwise.\n. @Thibaut updating turbolinks to allow for GET forms would be great.\nIf I want to update the whole body (so that the search form query field can stay in tune with the url between page changes once the fix has been applied) then ajax:complete will no longer fire because the form that launched the ajax call has been removed so I would need to use a turbolinks event to set the progressbar as done().\nI assume once the fix has been applied I will be able to use:\njs\n$(document).on('page:load page:restore', function () {\n  Turbolinks.ProgressBar.done();\n});\nbecause this doesn't seem to be firing as it currently stands.\n. Have you had a look at wiselinks gem (https://github.com/igor-alexandrov/wiselinks/blob/master/lib/assets/javascripts/_dom_parser.js.coffee) to see if that does it any different because that has worked (off and on) back to IE8 using different functions depending on support for various things.\n. Maybe @aishek (I saw a PR about fixing wiselinks for IE8) or @igor-alexandrov might be able to offer any suggestions about this issue since wiselinks allows replacing portions of the html?\n. Yes. The js seems to fire the event but the readme docs don't mention it in the list of ones that are run when restoring a cached page from the client side cache.\n. @Thibaut I've seen that this has now been closed with a pull request that doesn't cache the body if there's a partial replacement but just wanted to query something about this. \nI'm not sure if I've missed something somewhere but is there a reason why you would not cache the entire body html even if it was just a partial replace and reload the full body html from cache when going back and forward?\nWould this not mean that you were always caching the full body no matter how much of it got updated (page or partial) and going backwards and forwards through multiple pages would just grab the cache for that url and re-insert it all so as not to need to cherry-pick bits based on whether it had done partial or full pages changes between the page that the user was on and the one they are now trying to go back to?\nWouldn't any js that should only be called once be run on page:fetch rather than page:load so that it would only insert the \"extra\" html once that would then get cached and so if the user clicked the back button it wouldn't re-insert that html again and any js functions would be bound to document which wouldn't change so wouldn't be lost between page changes if need be?\n. Ah, good point. Glad you're on the ball.\n. ",
    "Thibaut": "@amnesia7 This isn't possible without adding a dependency on jQuery or a big chunk of code for doing form serialization (see https://github.com/rails/turbolinks/pull/379). Both options aren't a good fit for Turbolinks.\nYou can do the equivalent using jquery-ujs and server-side change.\n. > I could apply listeners to the ujs ajax:beforeSend and ajax:complete to start and stop the turbolinks progressbar if that's the way to do it.\nTurbolinks's progress bar API is public for that purpose yes.\n\nThe page updates ok but my url doesn't seem to change when I use render :index, change: 'content' in the index action of my controller after clicking my search form's submit button. Am I missing something here?\n\nUpdating the current URL on render + :change & non-GET form submissions would break the reload/back/forward buttons (e.g., when creating a post from /posts/new but the post is invalid and you re-render the form, you wouldn't want the URL to become /posts). In that case you should use redirect_to + :change.\nFor GET requests it makes sense to update the URL, though. I'll make the change soon.\n. @amnesia7 Yes, Turbolinks.replace / render :change  is unsupported in browsers that don't support Turbolinks \u2014 see #526.\nIdeas are welcome for ways to get around that. For now my position is that it's your responsibility to check for Turbolinks.supported before using that feature (I'll update the docs soon to make that clear). This is very easy to do if you write your own JS, and jquery-ujs already has a callback you can use to disable it in certain browsers.\nYour solution adds a dependency on jQuery and only works with GET forms. If it works for you, great, that's exactly the kind of thing Turbolinks 3 wants to enable devs to easily do, but it's not something we'd want to add to Turbolinks core.\nOnce I make the change to update the URL on GET + render :change, this is how you could implement a remote search form with partial replacement:\n```\n$(document).on 'rails:attachBindings', ->\n  return false unless Turbolinks.supported\nform_tag search_url, remote: true, method: 'get' do\n  [...]\nend\ndef search\n  render :index, change: 'search_results'\nend\n``\n. @amnesia7 this will work after #537, which makesTurbolinks.replace/render :changefirepage:load. We should probably callTurbolinks.ProgressBar.done()too; I'll look into it.\n. Closing since no activity in more than a year. Feel free to open a new PR on the latestmaster`.\n. > Right now when the partial changes the page scrolls to the top.\n@drewhamlett This shouldn't happen with Turbolinks.replace / render :action, change: :key. Can you post the code that you're using?\n. @drewhamlett Oops, I forgot that Turbolinks.visit / redirect_to can also do partial replacements. Expect a PR / fix soon.\n. @tzvetkoff I'm working on a similar PR with tests for some of the edge cases and a fix for the problem @drewhamlett described. Will keep you updated.\n. Turbolinks.visit(url, scroll: false) has been merged into master (#528). I will PR data-turbolinks-scroll=false and update the docs this week-end.\nThanks all for pushing this forward.\n. I don't think we should be delaying the page:load event until all images have loaded.\n@chrisjacob's solution is a good work-around. Feel free to PR a new event that behaves like that if the code required to make it work isn't too long.\n. This may be useful, but also quite complex to implement. Feel free to open a PR if you still want it.\n. Why should the reload scroll to the top? As a user I think it makes more sense to go back to the same scroll position. Most of the time an asset change doesn't radically change the site.\n. Feel free to re-open if this is still an issue.\n. Fixed by #528.\n. Providing public APIs for doing pushState / replaceState via Turbolinks wouldn't be a bad idea. Feel free to open a PR.\nIn the meantime you can do what @jvenezia suggested (but keep in mind that this isn't officially supported and may break in the future).\n. @inspire22 @dmastylo @hakunin is this still happening with turbolinks master?\nI tried to reproduce with both protocol-relative and relative URLs but couldn't.\n. Without repro steps I can't fix this. Feel free to link to a demo and I'll re-open / try to fix it.\n. I don't understand why you're calling pushState / replaceState manually and would prefer not exposing Turbolinks's internals like that.\nFeel free to reopen if this is still an issue for you.\n. Closing this. Shopify's version of Turbolinks (with the features described above) is available here:\nhttps://github.com/Shopify/turbograft\n. Tests pass on IE 10. Feel free to re-open if this is still an issue with the latest master.\n. Feel free to re-open a PR on the latest master with a test case.\n. @michaeltrilford could you point to a simple HTML page where we can reproduce the problem?\n. Could you point to a simple HTML page where we can reproduce the problem?\n. @MichaelRoshen ping (@reed's question)\n. Can't reproduce in Firefox/Chrome/Safari/IE10.\n. @slatem @alexJunger I'm happy to look into this but could you point to a simple website or repo where I can reproduce? Also could you try turbolinks master? (there are many unreleased changes that may have fixed this)\n. Without repro steps or an example app we can't fix this. Feel free to provide more info and we'll reopen / look into it.\n. This has been fixed in master by 86518e10ea503c691e9f24ac2621a50602696bb4 and d67a2d5ad8680ce4a653242840d9300206c2a997.\n. Do you have a demo app I can use to reproduce?\n. tldr;\n``` html\n\n\n    Sidebar, never changed!\n  \n\n    You have new comments. <%= link_to 'See new comments', comments_path, change: 'comments' %>\n  \n\n\n\n\nSee 45 more comments\n\n<%= form_for Comment.new, remote: true, id: 'new_comment' do |form| %>\n    <% # Show validation errors %>\n<%= form.text_area :content %>\n<%= form.submit %>\n\n<% end %>\n\n\n# Will change #flash, #comments:collection, #comments:link\nTurbolinks.visit(url, change: 'comments')\n\n# Will change #flash, #comment_123\nTurbolinks.visit(url, change: 'comment_123')\n\n# Will only keep #sidebar\nTurbolinks.visit(url)\n\n# Will only keep #sidebar, #flash\nTurbolinks.visit(url, keep: 'flash')\n\n# Will keep nothing\nTurbolinks.visit(url, flush: true)\n\n# Same as visit() but takes a string\nTurbolinks.replace(html, options)\n\n```\n``` ruby\nclass CommentsController < ActionController::Base\n  def index\n    # renders, but keeps #sidebar\n  end\ndef create\n    @comment = Comment.new(comment_params)\nif @comment.save\n  # This will change #flash, #comments:collection, #comments:link\n  # -> Turbolinks.visit('/comments', change: 'comments')\n  redirect_to comments_url, change: 'comments'\nelse\n  # Validation failure\n  # -> Turbolinks.replace('<%=j render :new %>', change: 'new_comment')\n  render :new, change: :new_comment\nend\n\nend\nend\n``\n. FYI me and @kristianpd will write docs for this next week.\n. And I'm also going to try to add some automated JS tests.\n. I agreeTurbolinks.visitshould always change the url, andTurbolinks.replaceshould never.\nAlso agree with @reed that aredirect_to url, change: :foo` should push a state, not replace the current one.\n@kristianpd what was your reasoning behind reflectNewUrl url unless options.change?\nhttps://github.com/rails/turbolinks/blob/34a426741f07eaac9fa59718c9e8219933f42dfe/lib/assets/javascripts/turbolinks.js.coffee#L69\nIt would be good to add some tests for these scenarios. I can work on that maybe tonight or this week-end.\n. @kristianpd that makes sense :+1: \n. @reed @kaspth Thanks for the comments. Updated.\n. :+1: \nCould you add replace here:\nhttps://github.com/Shopify/turbolinks/blob/bb133cde5d5960a34f7b84ee97454628ad868a32/lib/assets/javascripts/turbolinks.js.coffee#L607\n. replace is doing more than just changePage now: https://github.com/rails/turbolinks/blob/0fd9410b01b8a0f4b9ff1fafa799d9b95d1a82a5/lib/assets/javascripts/turbolinks.js.coffee#L127-L129\n. Added one commit: 7a9b63ade9b2cdf8980e06206e87f5bad419e40d\n. This issue came up in https://github.com/rails/turbolinks/pull/472/files#r25563876\nI'll look into it today or tomorrow.\n. @reed This code/behavior hasn't changed in at least 6 months. I just noticed the unnecessary variable.\n. @reed You're right. Sorry I looked at the wrong code. Why should we not execute scripts on fetchHistory?\n. Makes sense. The lack of tests had to bite us on that big PR :P\nI'll fix this soon.\n. @reed @jtomaszewski I noticed some weird stuff around back/forward navigation too. I'll PR tests and a fix by the end of the week.\n. Updated, but I still don't like this :P\n. @reed No problem. FYI there's no need to re-add https://github.com/rails/turbolinks/pull/480/files#diff-9da50910637da91c22aff050425a9fabL36 \u2014 Rails 3.2 requires Ruby 1.9.3+ and Ruby 1.8 has been EOL for a long time.\n. This doesn't work in Rails 3.2. I'll fix it later.\n. Updated\n. Great find, but we'll need to tweak this a little bit compared to Turbograft:\n- we shouldn't trigger the event on permanent nodes (L176)\n- we should trigger the event on the original nodes, not clones (L179)\n- when we're cloning nodes, we need to make sure we don't trigger the event on a body element that contains the original of those nodes\n- no need for removeNode\n- this needs tests (Turbolinks has some now :P)\nI started working on this yesterday and have a PR almost ready to go.\n. We also need to make sure that this plays well with back/forward navigation.\n. @dhh :+1:  I'm happy to take this on but I'd rather do it in a separate PR.\nWhile testing this  I found some potential issues with back/forward navigation (not related to the changes in this PR). I'd like to make sure those are fixed and tested before adding a jQuery \"auto-cleanup\" (which is potentially breaking for apps running master).\n. This should be good to merge.\n. @reed Good question.\nWhat's the use-case of the page:expire event? If it's to allow users to clean up events &co, then it's incomplete and we should remove it.\n. - Added history.back() tests. \n- Removed page:expire. From what I understand this event was trying to achieve a similar effect as page:before-remove \u2014 to enable scripts to clean up after themselves \u2014 but because it was delaying the event until the page is removed from the cache, it allowed up to \"cache size\" pages to leak.\n  When a page is restored from the cache, we replace the current body with the cached body's outerHTML (a string). This means that all state (e.g. event listeners) in the cached body's children is lost (scripts should re-apply it with the page:change event), and there is no point waiting until the page is removed from the cache to clean it up.\n- Following this, there's no point in storing body elements in the cache \u2014 we can just cache outerHTML and save lots of memory :)\n. Rebased. JS tests pass on CI :)\n@reed Let me know if you want more changes.\n. > on some pages\ncan you post a link?\n. Can't reproduce. Feel free to post more info and we'll reopen.\n. I'll look into this\n. We need the require because the constant is named Redirect but the file is redirection.rb, so Rails can't autoload it. But I don't know why the tests didn't catch this.\n. Could you create an example app where we can replicate the problem?\n. This is happening because you put your <script [...] data-turbolinks-track=\"true\"> in the <body>, so they (including Turbolinks) get re-evaluated on every page load. Move them to the <head> and everything will work normally.\n. :+1: good catch\n. No problem :+1: \nSorry it took this long.\n. It this still a problem with latest master?\nWe recently switched from using alias_method_chain to prepend.\n. This should be fixed now that we use prepend instead of alias_method_chain.\n. Tests don't pass on 3.2: https://travis-ci.org/rails/turbolinks/builds/55747542\n. @jasnow Good catch. Will take care of this later this week.\n. https://github.com/rails/turbolinks/pull/503\n. You could do:\nruby\nrender partial: 'video_details', change: \"video-#{@video.id}\", turbolinks: true\nor \nruby\nrender partial: 'video_details', change: \"video-#{@video.id}\", turbolinks: request.xhr?\nFor render with a change option, I think it makes sense to render with Turbolinks by default for XHR+GET. I don't remember what my thinking was at the time to not do that (probably just to be consistent with redirect_to).\nI'm not sure we should do that for redirect_to, though. Most of the time a redirect on a GET request goes to something like the login page or a different domain, in which case you don't want to redirect via Turbolinks.\n. @reed mentioned in #478:\n\nBecause those scripts have already been executed for that page. And since the transition cache uses fetchHistory, the scripts would run then too. \n\nI think both use-cases are legit and we should make this opt-in. Maybe with data-turbolinks-eval=true?\n. Reproduced using standard <audio> / <video> elements and data-turbolinks-permanent. Unfortunately it appears browsers always stop playback of those elements when they're transferred from one document to another, so we can't fix this in Turbolinks.\nI'll add a list of know issues like this and #511 to the README soon.\n. How about data-turbolinks-eval=always?\n. Updated :+1: \n. @reed good catch on the name. data-turbolinks-eval=false was confusing. \n\nOn Apr 18, 2015, at 12:58, Nick Reed notifications@github.com wrote:\nThanks\n\u2014\nReply to this email directly or view it on GitHub.\n. @gregblass bind a function to the page:load event. It'll get called every time the page changes (including on back/forward navigation).\n. This is a limitation of iframes \u2014 both WebKit and Firefox agree that they should be reloaded when they're moved in the DOM tree:\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=254144\nhttps://bugs.webkit.org/show_bug.cgi?id=13574\n\nIt's even part of the spec now:\nhttps://github.com/w3c/web-platform-tests/pull/1286\nSo unfortunately we can't fix this in Turbolinks.\n. > Why move the node at all, though?\nBecause we're replacing a parent of the permanent node (the <body>). When that happens, we need to move the node from its old parent (which was removed from the DOM) to its new parent.\n\nThe only node that should be affected is the div containing rest of the site.\n\nThat div is the <body>. Turbolinks doesn't let you specify a custom container. If this is your use case, check out jquery-pjax.\n. That would be quite complex (what if a permanent node is nested in a div that has other children, page cache would need to be re-implemented, etc.). \n. Have you tried:\nruby\nredirect_to users_place_path(@place), change: 'place_users'\n. What's the response body of the POST /place/invite_user request?\n. Are you using the latest master? What does Turbolinks::VERSION give you in the rails console?\n\nI don't know if that's a clue but i'm trying to use it in engine.\n\nWhat do you mean?\n. You're not using Turbolinks master. Add this to your Gemfile:\ngem 'turbolinks', github: 'rails/turbolinks', branch: 'master'\n. No problem ;)\n. @galulex what do you mean you \"should get an errror\"? If you do render :show, keep: :foo, flush: true, the flush option will be ignored since keep takes precedence over it. However, you'll only get a Turbolinks.replace response on XHR requests (e.g. jQuery.ajax, but not Turbolinks.visit).\n. @galulex Right. Sorry I forgot we had that. Is request.xhr? true before the call to render?\n. @galulex the Turbolinks render / redirect_to options only apply to XHR requests (remote links). You should get an exception in that case (only).\n. Due to browser limitations, we can't fix this without implementing a JavaScript loader within Turbolinks.\nSee https://github.com/defunkt/jquery-pjax/issues/331 for more info.\nClosing as #wontfix. If a solution surfaces feel free to comment and we'll re-open.\n. @riccardoa you should be rendering the full index view, not a partial:\nruby\nrender :index, change: :comments\nTurbolinks will only replace the response with Turbolinks.replace([...], change: ['comments']) when the request is XHR, so if you make your JavaScript perform an XHR only for browsers that support pushState (Turbolinks does that for links already, forms are up to you), it will all work (non-pushState browsers will get a normal HTML response, pushState browsers will get a Turbolinks response following an XHR).\n. @riccardoa If you use Russian-doll caching then rendering the full index view is not a problem. This is the recommended way of using Turbolinks.\nThe size of the response doesn't matter \u2014 with gzip the difference is negligible.\n. > Why don't give the opportunity to people to render page/html conditionally ?\nIf you use jquery-ujs, you can already do this:\nrender :index, change: :comments, layout: (request.xhr? ? nil : 'application')\nHowever, I just realized Turbolinks doesn't send X-Requested-With: XMLHttpRequest when it fetches a page, so request.xhr? won't be true. @dhh any reason why that's not the case? Ok if I make the change?\n. @riccardoa with regards to custom headers, Turbograft works exactly the same way as Turbolinks + jquery-ujs.\n- on custom XHRs (Turbograft.Remote vs. $.ajax) and remote forms, a custom header is sent (X-Requested-With: XMLHttpRequest), which you can check with request.xhr? in your controller.\n- on page visits, there is no custom header. You can/should re-render the entire page all the time.\n. > The problem with turbolinks is that is easy add the custom header for requests, but not for form request(where Turbograft has a custom class called Turbograft.Remote)\nWith Turbolinks, which headers you send on XHR / form requests is entirely up to you, since Turbolinks doesn't provide this functionality.\nIf you use jQuery, just do:\njavascript\n$.ajaxSetup({\n    headers: { 'x-foo': 'bar' }\n});\nBoth Turbolinks and Turbograft will not let you add custom headers to page-visit requests. \n\nso what is it the useful stuff about partials ?\n\nTo be able to refresh parts of a page without losing state (e.g. a search form that reloads as-you-type).\n\nIf a user use my form with remote: true, I think that I still got the request.xhr? true, also if the request isn't done by turbolinks(because user is using IE8 and doesn't support pushState)\n\nNow this is a problem. I believe render :foo, change: 'bar' + jquery-ujs is broken on browsers that don't support pushState, because we don't have a fallback for Turbolinks.replace :/\n. @riccardoa :+1: \nTurbolinks.replace should actually work in all browsers that support querySelectorAll (including non-pushState browsers like IE 9). I'll investigate in the coming weeks.\n. I'm not sure what you mean. We only unload the current page after we've received the new page, by replacing the <body> element in the DOM. The replacement is done with a single atomic operation \u2014 there is no remove/add.\nIf you mean loading the scripts &co of the new page before replacing it, that's not possible because we'd have to load the new body in a different context (iframe) than the current DOM (of which there is only one), which would break all kinds of things.\nWhich events are you binding to for your transition?\n. Hi @Stafie \nI don't think it's possible to achieve such a transition with the current Turbolinks. You might get a slightly better transition by hooking into page:before-unload (fires when the new body has been received and the existing one is about to be replaced) instead of page:fetch (before the XHR), but since we don't keep both bodies in the DOM you'll get a \"flash\" when the body is replaced.\nTo make this work we would need a callback that lets you override the default replaceChild with a function that keeps both elements in the DOM (see #288), plus as you said the ability to scope Turbolinks to a container, since AFAIK it's not possible to keep two <body> in the DOM.\nI like the second idea (Turbolinks container), less so the first one (overriding replacement). I'll give this more thought in the coming weeks and see if we can make it work. I agree it'd be nice for Turbolinks to support page transitions like that.\n. Thanks. There were a couple more places where we used CoffeeScript. I made all the changes in 69e2034992036609137725d7e3e11a1f8f76a61e.\n. @matthewd Good call. What would you call the config option to disable the default?\n\nBonus non-aesthetic reason to do it that way: right now, this will autoload all the listed controllers at boot. \n\nI was concerned about that too :+1: \n. Updated.\nI wonder if instead of include Turbolinks::ControllerConcern we should add a class method like enable_turbolinks to ActionController::Base?\n. > I don't know. For aesthetics a method seems better, but I like the explicitly of including a ruby module. Since it is not the default to disable that option I'd use the normal include.\n:+1: \n:cool: to :ship:?\n. This doesn't give us enough information to replicate the issue. Could you put an example app on GitHub/Heroku?\n. Did you include turbolinks.coffee in your javascript bundle?\n\nand then I have to write this below the \"link_to\"?\n\nNo. You need to run that javascript code dynamically, not put it in a <script> tag.\nThis doesn't sound like a Turbolinks issue. Until you have an example code / repro steps, please use the mailing list or StackOverflow for questions/help, where a wider community will be able to help you.\n. @ginolon a quick Google search for \"javascript tutorial\" or \"turbolinks tutorial\" will give you plenty of examples. I don't have time to help you beyond issues directly caused by Turbolinks, sorry.\n. Thanks for your contribution. I like the idea but not sure about the name of the attribute, maybe data-transition-cache=\"false\" (similar to data-turbolinks-eval=\"false\").\n@reed what do you think?\n. @christophemaximin :+1:\nJust waiting for @reed's thoughts on the name. No rush.\n. @dhh great idea :+1: \n@christophemaximin let me know if you need a hand with the changes.\n. > What I would like, though, is a dynamic way to make the current page as dirty for caching purposes.\nAFAICT if you add a data-no-transition-cache element to the page after it has loaded, it does just that. I agree this is the simplest solution. We could add an API for it, e.g. noTransitionCacheOnCurrentPage.\nTo solve the flash problem, we could fire an event right before we restore a page, passing the cached <body> to the callback:\ncoffee\n$(document).on 'page:before-restore', (event) ->\n  $(event.data).remove('.flash')\n. @christophemaximin feel free to open a new PR with these two changes. Otherwise I'll get to it in a few weeks.\n. Which library makes the request to the partial endpoint? \nIf you let Turbolinks make the request (when clicking a link or by using Turbolinks.visit), then the change option will be ignored (since Turbolinks requests are not considered XHR in the controller, and the partial replacement options only apply to XHR requests).\nThis is because all your links (and visit URLs) are expected to point to endpoints that render full pages. Otherwise your website would be broken in browsers that don't support Turbolinks, like IE9 and search engine bots (the browser will follow the link/URL and show the partial).\nTo use partials this way, you need to use jQuery / jquery-ujs (or send X-Requested-With: XMLHttpRequest in your XHRs + automatically execute scripts when the response type is JavaScript).\nOtherwise you have to render the full page and manually call Turbolinks.visit with a change option (normal links don't support partial replacements at the moment).\nI'll update the README soon to make this more clear.\n. Fixed by #524.\n. :+1: \nAgree with what you said in #523.\nSince this is a breaking change, could you add a changelog entry?\n. Thanks!\n. Fixed this morning: 7bb5fa74b71b5b1ce83823f78a0c3a750b7d1032\n. @amnesia7 Yes, I tried it all. Couldn't make all the things work. \n. Remove , turbolinks: true. The option's primary purpose is to turn off Turbolinks responses in certain actions. Here you're forcing the response to be Turbolinks.visit(...) for all types of requests (not just XHRs / remote: true, which is the default), which means if you enter that URL in the address bar you'll see the JS response instead of being redirected.\n. Try again without turbolinks: true ;)\n. Refactored and added Turbolinks.visit(url, scroll: false) to opt out of the default \"scroll to top\" behavior. In a future PR this could be enabled on a link-per-link basis using <a href=\"url\" data-turbolinks-scroll=\"false\">.\n@kaspth Let me know what you think.\nPS: no doc for now. I need to revamp the README first (tomorrow or next week-end).\n. @kaspth @rafaelfranca good to :ship:?\n. Are you sure you're not getting an error in the console? You need to give the div an id.\n. Do you have a live website where we can replicate the bug?\n. @imton does this occur in both Chrome and Firefox?\n. Also, make sure you don't have code that calls stopImmediatePropagation in a hashchange event handler.\n. I tried my best to replicate using jquery-stickytabs, but wasn't able to.\nFeel free to re-open if you can provide a failing test case or example code that we can use to replicate.\n. Closing this issue as I see you already answered your own question on SO.\nPutting your initialization code in a <script data-turbolinks-eval=always> is one option. A better one is to put the code in a page:load callback:\njs\n$(document).on(\"ready page:load\", function() {\n  $(\".ladda-button\").ladda();\n  $(\".ladda-button\").ladda('stop');\n  $(\".ladda-button\").ladda('bind');\n});\nThis will get called on every page load + history back/forward.\n. >  Is it possible to call Turbolinks.visit('some_url', {change: 'some_element_id'}) somehow from controller?\nredirect_to some_url, change: 'some_element_id' & use remote: true.\n. You don't need to redirect to another action. Just do render :index, change: 'list' and make sure your link is remote: true. If you want the URL to be updated, you should capture the click event on the link and call Turbolinks.visit(url, change: ['list']) manually.\nPartial replacement isn't really meant to speed up navigation. Its primary goal is to let you refresh bits of the same page you're currently looking at, e.g., following a form submission.\nIf you want to keep state around from page to page, you can do that using data-turbolinks-permanent.\n. > It would be nice to have this helper out of the box.\nThis has come up a couple times. I'll likely PR a similar helper soon. Thanks for the feedback.\n. This points to issues with the way the page:load and page:change events fire on partial replacement. We should pass which elements were replaced so that callbacks can skip re-adding state to nodes that weren't replaced. I'll look into this soon.\n. https://github.com/rails/turbolinks/pull/537\n. Do you just mean we should add that to the README?\n. Fixed\n. cc @rafaelfranca, would be great if you could take a quick look at this one as well.\n. Thanks @rafaelfranca. I'll revamp the events docs this week-end in a separate PR.\n. :+1: \n. Could you update the existing CHANGELOG entry instead of adding a new one (you can add your name to it if you want) and also update the README.\n. You shouldn't handle popstate events in your code. Turbolinks will already do that for you (restore the previous page's content, or if you want to always force a round-trip to the server, you can do Turbolinks.pagesCached(0)).\nIf you see nothing happening when pressing back, it means that some other piece of code called pushState. Turbolinks will only handle popstate events for states that it created, so make sure you never call pushSate (you can, however, call replaceState if you keep the same state object and only change the URL param).\n. @ginolon The tutorial you linked to is an alternative to Turbolinks \u2014 not something you'd do alongside it.\nThis type of question is best asked on Stack Overflow. We don't offer support in this repo, sorry.\nThe short answer is you shouldn't need any of this code if you use jquery-ujs (for form elements) and let Turbolinks handle click events / popstate events. You can also programmatically trigger a visit with Turbolinks.visit (outside click events), but never with $.getScript / history.pushState.\n. The tests pass for me on IE 10. Do you have a live demo where we can replicate?\n. Looks great! :+1: \nCould you add a CHANGELOG entry please (no need to update the README; I'll revamp it soon).\n. > I suggest adding a Contributing section :)\n:+1: I'll ping you on the PR :P\n. @javan Thanks for the feedback. Updated: a2b1810a60fea0ea131eea39fae65a771f2938a9\n. Hard to debug with just a screenshot. Could you link to a live demo? Which browser are you using?\n. Feel free to reopen if you can put together an example app.\n. Unlike Turbograft, Turbolinks 3 re-runs all scripts on the page on partial replacement. But I think it makes sense to only run those nested in the elements that have been swapped in, instead of all of them, now that we have data-turbolinks-eval=always (which we would also re-run).\nI'll PR the change soon.\n. Fixed by #618.\n. Thanks for nicely explaining your issue.\nI think the fix here is to not use the transition cache when the change option is set. I can't think of a scenario where you'd want that to happen.\n-  if transitionCacheEnabled and cachedPage = transitionCacheFor(url.absolute)\n+  if transitionCacheEnabled and !options.change and cachedPage = transitionCacheFor(url.absolute)\nWould this work for you?\n. Because \nif transitionCacheEnabled and cachedPage = transitionCacheFor(url.absolute) and !options.change\nis equivalent to:\nif transitionCacheEnabled and cachedPage = (transitionCacheFor(url.absolute) and !options.change)\n. simple_form_for(@link, remote: request.xhr?) do |f|\nwhy is this not remote: true?\n. remote: true just adds an attribute to the form. It won't break the form when JavaScript is disabled (on the contrary, it leaves the form unchanged for exactly that reason).\nYour current implementation doesn't work when JS is disabled, as you're only responding to js.\nYour create action should look like this:\n``` ruby\ndef create\n  @link = Link.new(link_params)\nif @link.save\n    redirect_to new_review_path\n  else\n    render :new, turbolinks: request.xhr?\n  end\nend\n```\n. Why don't you want the form to be remote even on a regular HTML page?\nIf you really want to differentiate between the two, I would use a query param ?modal=1 that you carry over in your redirections, not request.xhr? (as this won't be true when Turbolinks makes the request).\n. Yes the request to /reviews/new will not be JS / request.xhr?, as it's made by Turbolinks (this is intended and we can't change it). So you'd need to do something like this:\nruby\nif params[:modal]\n  redirect_to new_review_path(modal: '1')\nelse\n  redirect_to new_review_path\nend\nClosing as this isn't a Turbolinks issue.\n. Thanks!\n. Thanks for your thoughts, Nick.\nI can give (4) a shot in the coming weeks. If we can pull it off (I only thought of it while writing this issue), it'd give us the best of both worlds.\nRegarding (5), we'd still get to keep half the features announced at RailsConf (data-turbolinks-permanent).\n. @kristianpd: \n- in scenario 1, #something-else-conditionally-shown wouldn't be inserted since it doesn't match the change key and isn't already in the DOM. To reverse that operation, we would re-insert the replaced nodes (#resources and #timer-banner).\n- reversing a keep operation would be much harder. To get around that, I'd just kill the option, since I don't think it's that useful.\n- the real challenge I think will be when we need to re-insert elements that have been removed from the page. E.g., a data-turbolinks-permanent that wasn't on the next page, or if the JS running on the page changes the DOM so much that we can't easily reverse a change. The first issue could be solved by inserting hidden divs on the page, so we know where to put the nodes back. The second issue I don't see a solution other than saying \"don't do that\".\n@WojtekKruszewski thanks for digging into this!\n\nAs I understand popstate, the user can return to any state in history, not just pop last one from the stack\n\nGood catch. This isn't a blocker, but again adds more complexity (we'd need to assign an incrementing ID to each state, so that when you pop A from C we know we need to reverse both C and B).\n. > In case of partial replacement we cache neither DOM nodes nor serialized HTML (@Thibaut's proposal 1.) On popstate URL will be fetched anew.\n@dhh @reed what do you think?\nThis would be a way to keep the feature in place. The downside is that most people will probably make use of it, since it's so easy to do from the controller, and end up with slightly inconsistent back button behavior.\n. Unless there are any objections I'll implement what @WojtekKruszewski suggested above (keep partial replacement, but remove pages that have been partial-replaced from the cache so we can go back to caching document.body and un-break the back button for normal navigation) in the coming weeks.\n. @amnesia7 You're describing how the cache worked before the fix for this issue. The problem is that as soon as we cache HTML (as a string), we lose all DOM state (not just event listeners but any data stored on the DOM elements themselves or which is only referenced through them).\nMost JS code is not written with \"separating DOM transformations from DOM state\" in mind. Writing code in such a way is hard and most of the time bad practice. We can't expect people to do that.\n. This is a limitation of the DOM. AFAIK there is no solution. See #511.\n. Some fixes for the back button just went out in master (btw data-turbolinks-eval=always isn't available in the latest stable release). If this is still a problem, please open a new issue with a complete example that we can use to reproduce the issue.\n. Use this to initialize your plugins:\njs\n$(document).on('ready page:load', function(event) {\n  $('.foo').bar();\n});\n. @tortuetorche My example was if you don't use jquery-turbolinks. If you do, then yes, you should use $(document).ready(fn), as that will automatically bind to the page:load event as well.\n@gregblass Try bundle update.\n. @rafaelfranca is it ok to delete the existing tag, or just push a new one?\n. Thanks\n. This is intentional but I think it makes sense to also fire the callback on Turbolinks.visit(). I'll make the change soon.\n. @vizo sorry I haven't had time to do much work on Turbolinks lately. I'll take care of this within the next two weeks.\n. Could you provide an example app where we can reproduce this?\n. https://github.com/rails/turbolinks/pull/621\n. Thanks for the bug report, but this is documented in the README and isn't an issue (just the way Turbolinks works).\nTo initialize your plugins on every page you either need to use jquery.turbolinks or bind to the page:load event (in addition to DOMContentLoaded).\n. Could you provide an example app where we can reproduce this?\n. This doesn't seem to be an issue with Turbolinks. Please ask on StackOverflow, or provide a test case to reproduce the issue. \n. Is this still an issue in Turbolinks 3 / master?\n. I'll close then. Sorry for the late reply.\n. Please post code or a URL where we can reproduce.\n. > Is Turbolinks remote replacement supposed to work only with remote: true?\nYes, at the moment server-side partial replacement can only be used with jQuery or another JavaScript library that sends X-Requested-With: XMLHttpRequest and evaluates JS responses \u2014 not using Turbolinks itself.\nYou can also do it manually client-side using the change option of Turbolinks.visit/replace, and we might add partial replacement capabilities to links in the future (with data attributes).\nUpdated the README: https://github.com/rails/turbolinks#partial-replacement-30 \n. Fixed by 9d0e8f0a464142901b298eec11ad8d7a768a2c8b.\n. Done: https://github.com/rails/turbolinks/tree/2-5-stable\n. Sorry for the late reply. This should be fixed in Turbolinks 3 (master). Could you try it?\n. Docs in #576.\n. This sounds like an issue with floodlights. Please post code / reproducible steps or close this issue.\n. Please post code or a URL where we can reproduce / investigate.\n. @javan should we provide an option for delaying the progress bar by n milliseconds?\n. Thanks!\n. Thanks for the PR.\nWith the addition of data-turbolinks-permanent in Turbolinks 3 I'm not convinced there's a need for scoping Turbolinks on a certain element other than the <body>.\nHappy to reconsider if there's a use-case I didn't think of.\n. Thanks for the detailed bug report. I'll look into this soon.\n. Also, make sure you're using Turbolinks master. Turbolinks 3 hasn't been released yet (Rails 4.2 is still on 2.5).\n. Feel free to reopen if you have reproducible steps.\n. Could you open separate PRs for each change and add tests please.\n. - implemented the page:before-change change in 6d4f600b38f4ebd34409a19ba24917ec868d6fc6\n- see my comment on https://github.com/rails/turbolinks/issues/589#issuecomment-141810777\n- feel free to open a new PR for the last commit (with a test case please)\n. > In array of nodesToChange, elements with data-turbolinks-temporary attribute are dupliacted. This causes error and javascript stops (my PR solved that).\nPlease open a new PR with a test case.\n\npage:before-change event.data doesn't hold list of affected elements, just url.\n\nThis is intended. page:before-change is only for preventing visits (not partial replacements), in which case there are no affected elements (yet). Changing that would break backward compatibility.\n\nSo for example, if form on page is changed by user, you can't detect if form is child of elements that will be replaced in DOM, so you can't show confirmation box\n\nYou can use the page:change event to detect that.\n. Why are you trying to prevent it?\n. > 5 Inside event function you can show confirmation box just if elements that will be replaced in DOM affects dirty form, if not, don't show confirmation at all and change DOM.\nIn my opinion this is too much of an edge case to justify the additional complexity in Turbolinks (if we add a new event). You can probably achieve the same behavior by checking which link was clicked and/or the URL (or just showing the confirmation box all the time).\n. At the time that page:before-change is fired, we don't know yet which elements are going to get swapped (the server could return a Turbolinks.visit/replace response), unless you manually called Turbolinks.visit(url, change: ['key']). It would be confusing to pretend otherwise.\nIf you called Turbolinks.visit(url, change: ['key']) manually, then I don't see what the problem is. You can just as easily not call visit based on the change key that that code intends to pass.\nIf you really care about this, it's easy to patch Turbolinks to do what you want:\ncoffee\noriginalVisit = Turbolinks.visit\nTurbolinks.visit = (url, options) ->\n  return if # fire new event with options.change and check if prevented\n  originalVisit()\n. Could you provide a test app for reproducing this?\nI don't think the solution is to expose the scroll option server-side.\n. The fix isn't to expose scroll server-side. We should make Turbolinks.visit with change scroll to the URL fragment by default, instead of leaving the scroll position unchanged.\nI will take care of this in the coming weeks.\n. Thanks for the test. I'll look into this in the coming weeks.\n. Fixed by 27318d2f0ab37e0abfee405e1bb85dde7d90f226. Thanks again!\n. Fixed by 27318d2f0ab37e0abfee405e1bb85dde7d90f226.\n. :+1: \n. Thanks for the bug report. Could you add a test?\n. Fixed by 66b913ee4a5171df3c3755218f0d8b2c3b974835.\n. I can't reproduce this. Could you make an example app that exhibits the bug?\n. The documentation in master is for Turbolinks 3.\nSee https://github.com/rails/turbolinks/tree/2-5-stable for the latest stable release.\n. Sorry for the delay \u2014 looks great!\nPlease squash your commits and I'll merge.\n. :heart: \n. > I then include each library from that directory in my Rails application.js and/or application.css, and Sprockets does its usual thing.\nI'm still not clear on what the benefit of using Bower is, vs. just adding #= require turbolinks at the top of your application.js. Versioning of Turbolinks is done via the gem so I don't see how using a separate manifest for the JS file makes any difference, especially since Turbolinks has no dependencies of its own. Am I missing something?\n\nWould that JS file works without the backend component?\n\nI don't see any major issue apart from the two small ones that @reed pointed out, which we could address by writing a server \"spec\". However, I'm a bit reluctant to release something we're not 100% committed to supporting over the long run, and which none of the core contributors use themselves.\nIf someone is up for maintaining a JS-only version of Turbolinks, I would suggest they fork the repo, write the server spec, publish on bower, get some traction, at which point we can merge and give them commit access to the main repo.\nBut without someone \"championing\" the JS version, I don't think this is a good idea. Personally I have too much on my plate to be that person.\n. > Can you elaborate on what you mean by a server \"spec\"?\n- server must return a request_method cookie on non-GET requests, to get around this (Turbolinks automatically pops the cookie when it initializes, and the server should do that too on GET requests). \n- server must set a X-XHR-Redirected-To header on the final response of a Turbolinks request that went through one or more redirections, so that Turbolinks can reflect the final location in the browser's location bar. See this test. On the first request we store the location in the session here or here. On the next request we set the header to tell Turbolinks where we ended up. \n- Turbolinks sends an X-XHR-Referer header that is supposed to take precedence over the standard Referer header. I don't remember why we do that, except that it lets us identify Turbolinks requests for doing the previous point.\nIdeally we turn that into an integration test suite.\n. :+1: \n. Try to add require 'turbolinks' in your gem's main file.\n. Thanks for the PR. We should set up CI with rails/master so that we can add a test for this. I'll make the changes soon.\n. @nettofarah Not yet. I'll add CI with rails/master over the week-end so we can write a test.\n. I set up CI with rails/master but couldn't figure out a clean way to write a test either. :ship: \n. Do you have a link to an app where we can replicate?\n. Thanks. Could you try using Turbolinks 3 / master?\n. This is intended, because popstate events are not preventable (unlike normal visits). Also, when the popstate event fires, the URL has already changed, so firing page:before-change at that time would lead to inconsistent behavior.\nWhat are you using the event for?\n. Have you tried using page:before-unload? It fires before the page changes (including on partial replacement).\n. It is invoked on history back/forward. What URL did you expect it to report? How are you reading the URL?\n. The changed nodes are in event.data.\n. Hmm that's weird. Is there anything in event.originalEvent.data?\n. Too bad jQuery doesn't make the DOM event's data available on its custom event object\u2026\nI'll close this when I update the docs to mention that.\n. We discussed compatibility earlier this year and decided to keep supporting old versions of Rails while we can. I don't see a reason why we should change that now. @reed @rafaelfranca thoughts?\n. Agreed. There's a bunch of code we could clean up by dropping support for old versions of Rails, but it works now and isn't hampering new features so let's keep things as they are until we have a good reason to drop support.\nThanks anyway for the PR, @maclover7.\n. Fixed by #618.\n. :+1: on the issue.\nWill review soon.\n. Hey\n- do you have any other gems in your Gemfile that affects the render function, or are you overriding it in your code?\n- make sure you didn't set config.turbolinks.auto_include to false\n- make sure you're running the latest version (bundle update)\n. Thanks for the investigation @anarchocurious.\nalias_method_chain is deprecated in Rails 5. This should be fixed in meta-tags, not Turbolinks.\n. Nice PR.\nI'd prefer making prepend / append act like change in JS:\nTurbolinks.visit(url, prepend: ['id'])\nTurbolinks.replace(string, append: ['id'])\ninstead of having them be booleans. \n. Sorry for the delay. I'll review this next week-end.\n. If you rebase the tests should pass.\n. Thanks\n. Turbolinks needs the X-XHR-Redirected-To header to update the URL in the location bar when the server performs a redirection. Without it it would use the wrong URL (the one before the redirection).\nClosing the issue since this is not a Turbolinks bug. I'd recommend asking on StackOverflow.\n. Thanks :+1: \n. The plan is to release Turbolinks 3 at the same time as Rails 5. @rafaelfranca is that still correct?\nThere are a couple more things I want to add/change before we cut a release. I'll try to get them done in the coming weeks.\n. If TL5 is to be included in Rails 5 then I agree there's no point in releasing TL3, except maybe as a separate gem (if there's demand for it).\nIt's a bit unfortunate that TL5 diverged significantly from TL3 without a heads up here \u2014 there are bug fixes in TL3 that I don't see in TL5, no test suite in TL5, and many people will be disappointed that partial replacement is gone :/\nLooking forward to seeing the iOS/Android integration, though.\n@javan happy to chat on BC3, or Hangout on the weekends.\n. The progress bar already does this to a certain extent, but feel free to send a PR updating the README if you think this is worth documenting.\n. I think this is correct. page:before-unload and page:change fire on all page changes, including back/forward.  Same in master, except that those events are now receiving the affected DOM elements (in event.data).\n. Are you using Turbolinks master in your Gemfile? The new version hasn't been released yet.\n. There is currently no way to detect Turbolinks requests server-side. This is intentional \u2014 for simplicity (no if request.turbolinks? all over your codebase), and because Turbolinks needs the entire page to be rendered to work properly (to track assets, update CSRF tokens, update <title>, etc.)\n. This sounds like a foundation-rails issue. One of the requirements of Turbolinks is that scripts that would normally run on ready / DOMContentLoaded must now also listen for page:load events.\n. This sounds like an issue with Masonry. You could also ask on StackOverflow (we don't offer support here, sorry).\n. This is should be easy to do. You can listen for the page:before-change event, which will pass you the new URL (for the hard refresh) and is cancellable.\nTurbolinks already forces full-page refreshes when assets change (in the <head>), but if you don't deploy often and want to work-around memory issues, then I can't think of a less hacky way :P \nNo changes required in Turbolinks.\n. Closing since you opened a PR and this isn't a bug.\n. Could you add a test and update the README?\n. Already fixed: https://github.com/rails/turbolinks/commit/120aceacead8bf7f1da6cce2ce08d7e330b90aaf\n. :+1: \n. I don't think we need to URI.escape anymore since we're only looking at scheme, host and port. But maybe I'm missing something?\nURI.escape doesn't guarantee a valid URI string, e.g. URI.escape(':') => ':'.\n. @kaspth I don't like that we're defining a method with such a generic name in a module that's then included in ActionController::Base.\nAlso, the decision to return false on invalid URI is IMO specific to XDomainBlocker and may not match other applications' definition of what constitutes same_origin?.\n. @kaspth Let me know if you'd like me to rename to something else, but to me it feels weird that same_origin? would return true when one of the URIs is invalid (which is the behavior we want here). Or else we put the rescue in abort_xdomain_redirect.\n. @reed Interesting. So I guess we have to keep doing that then. The URI.escape is obsolete warnings are a bit annoying, but I couldn't find a replacement\u2026\n. @dhh @kristianpd the current implementation clones data-turbolinks-permanent nodes on every visit/replace, losing all event listeners attached to them in the process. Is that what we want?\nThis could lead to major memory leaks if code holds references to these nodes or their children, but I guess Turbolinks already sets the expectation that one shouldn't do that.\nI haven't tested this but looks like we could use document.adoptNode to transfer nodes from one document to another.\n. I'm not sure this is the right way to do this?\n. Rails 4 requires Ruby 1.9. This was added for Rails 3.2 compatibility: https://github.com/rails/turbolinks/commit/42285201dfb3365dfabe87b4b66a8c7569a07b48\n. @kaspth :+1: removed\n. I don't like this, but Rails 4.0 doesn't let us access the request object it creates:\nhttps://github.com/rails/rails/blob/4-0-stable/actionpack/lib/action_dispatch/routing/redirection.rb#L18\nUnlike 4.2:\nhttps://github.com/rails/rails/blob/4-2-stable/actionpack/lib/action_dispatch/routing/redirection.rb#L24\nEdit: forgot about env['rack.session']\n. This was added in #189 because getElementsByTagName returns a \"live\" node list. However, this now uses querySelectorAll, which doesn't return a live collection. See http://devdocs.io/dom/nodelist#Description\nI added a regression test for this and verified that it doesn't pass when using getElementsByTagName.\n. @kristianpd what was the use-case for this?\nRight now in master:\n- <script data-turbolinks-temporary> is eval-ed twice on full replace (second time here)\n- <script data-turbolinks-temporary> is eval-ed once on partial replace\n- <script id=\"change\"> is eval-ed once on partial replace with change: ['change']\n- <script id=\"change\" data-turbolinks-temporary> is eval-ed twice on partial replace with change: ['change']\nIn this PR:\n- <script data-turbolinks-temporary> is eval-ed once on full replace\n- <script data-turbolinks-temporary> is not eval-ed on partial replace\n- <script id=\"change\"> is not eval-ed on partial replace with change: ['change']\n- <script id=\"change\" data-turbolinks-temporary> is not eval-ed on partial replace with change: ['change']\nI'm guessing we want:\n- <script data-turbolinks-temporary> is eval-ed once on full replace\n- <script data-turbolinks-temporary> is eval-ed once on partial replace\n- <script id=\"change\"> is eval-ed once on partial replace with change: ['change']\n- <script id=\"change\" data-turbolinks-temporary> is eval-ed once on partial replace with change: ['change']\n?\ncc @dhh\n. @dhh that makes perfect sense :+1:\nUpdated.\n. This was doing unnecessary work (firing unneeded after-remove events) when doing a full replacement, since the body, on which the swaps happen, is replaced below (L150).\n. PhantomJS 2.0 supports all the good stuff (pushState &co).\n. This is the default Gemfile for script/server (replaces the old test/Gemfile).\n. I was lazy and did the same as in https://github.com/rails/turbolinks/pull/496/files :P\nDon't think we need it. Let's see.\n. @kaspth without the check the tests don't pass on Rails 3.2 + Ruby 2.2. Something in 3.2 must be interfering with prepend\u2026\n. Actually I can remove this one but not the other.\n. good catch\n. > just include would work here since this class is already ActionController::Base\n:+1: updated\n. > This is public now. Should we document what behavior will change in people's controllers or link them to documentation where they can see that?\nI don't think there's enough \"substance\" in Turbolinks to need proper rdocs (maybe because I'm lazy :P). However, I'm planning a complete revamp of the README in the next few weeks with more/better docs.\n\nI also don't like the Concern suffix here. Would Turbolinks::Controller be too broad?\n\n@matthewd suggested that too. IMO it's confusing since that module isn't a controller. It's \"something you add to your controller\". So maybe Turbolinks::ControllerBehavior, Turbolinks::ControllerFeatures, ...?\n. @matthewd @kaspth Thanks for the feedback. Updated.\n. Don't need this. onNodeRemoved was already called on the element or one of its parents when a new page was loaded.\n. ChildNode.remove doesn't work in IE. Use node.parentNode.removeChild(node).\nI would do this inline in fetchHistory:\ncoffee\nnode.parentNode.removeChild(node) for node in findNodes(newDocument, '[data-ignore-from-transition-cache]')\n. Also could you move these tests before this line so they run on CI.\n. > I'd prefer CoffeeScript's equality sugar here. document.title = title if title isnt false or document.title = title unless title is false\nAFAIK we don't have a convention to use one syntax or the other in Turbolinks (I prefer != but don't feel strongly about it). There's a mix of both in that file. We can settle on one when I add a CONTRIBUTING.md if you want.\n. I would prefer a test that asserts that the page doesn't get restored from cache. The fact that it won't scroll to top is just a side effect of this (which already has a test here).\n. No need for a changelog entry as this is changing a feature (change option) that hasn't been released yet.\n. with :change, skips transition cache\n. I think scripts with data-turbolinks-eval=\"always\" should always be eval-ed, even when they are in permanent nodes.\n. When would hasAttribute be undefined?\n. We can remove when script.type in ['', 'text/javascript'] now.\n. I would prefer you add assertions here and here instead of making a new test (also, the behavior isn't specific to partial replacement, since permanent nodes are also replaced on full page visit/replace).\nWe should also add a test asserting that data-turbolinks-eval=\"always\" scripts get run every time.\n. Right. element.hasAttribute?('data-turbolinks-permanent') sounds good then.\n. We do options.change or options.append or options.prepend in many places now, so let's add a helper function. E.g. isPartialReplacement(options).\n. No need for nodesToAppend / nodesToPrepend / nodesToReplace. I'd just keep appending to nodesToChange. Same on L166.\n. No need for this.\n. Constantize ^\n. We can skip this loop when !options[:keep] && !options[:flush].\n. if js_options.present?\n. adoptNode has bad side effects in IE (textarea placeholder bug - https://github.com/rails/turbolinks/commit/d67a2d5ad8680ce4a653242840d9300206c2a997) and Chrome/Safari (double-eval scripts - https://github.com/rails/turbolinks/commit/27318d2f0ab37e0abfee405e1bb85dde7d90f226). On L210 I believe it's required for DOM data (event listeners &co) to be transferred properly, but here we can skip it because we only care about the markup. \nThe spec says we should call importNode / adoptNode before inserting a node into a different document, but in reality no browsers actually enforce this (see http://devdocs.io/dom/document/adoptnode#Notes).\n. Right, sorry I misread the diff. This code is a bit verbose but it's fine for now. I'll take a stab at refactoring it after this is merged.\n. ",
    "jamonholmgren": "Would it be possible to disable this behavior for particular links? We're building a page with sidebar links acting as \"filters\" and it's jarring when the page scrolls to the top every time they click a filter. Maybe something like:\nruby\nlink_to product_filters_path(@filters), data: { no_scroll: true }\nI realize we could rebuild it using ajax, but that was the primary reason we wanted to use Turbolinks.\nI can submit a pull request if this is desirable.\n. Screenshot of our application. Seems like this is a fairly normal usage.\n\n. Thanks, @davydotcom . Would this result in a \"flicker\" to the top and back down?\n. Sounds good. Thanks!\n. It worked. For future reference, this is what I did:\nhttps://gist.github.com/5154738\ncoffeescript\n  $(document).on \"page:change\", ->\n    window.prevPageYOffset = window.pageYOffset\n    window.prevPageXOffset = window.pageXOffset\n  $(document).on \"page:load\", ->\n    if $(\".fix-scroll\").length > 0\n      $('.fix-scroll').hide().show() # force re-render -- having an issue with that on Chrome/OSX\n      window.scrollTo window.prevPageXOffset, window.prevPageYOffset\n. Ours actually wasn't a form (just links), but that's cool that you made it work with a form.\n. ",
    "linesarefuzzy": "I wrote a simple patch for turbolinks to enable or disable this on a link-by-link basis with a \"data-keep-scroll\" attribute. I've opened a pull request. Meanwhile, you can use my fork by altering your Gemfile:\nruby\ngem 'turbolinks', github: 'linesarefuzzy/turbolinks'\nI also made this work with a form, like @jamonholmgren was asking about (uses jQuery):\n``` coffee\nclass TurboForm\n  constructor: (@form) ->\nsubmit: (keepScroll = false) ->\n    @form.action ||= location.pathname\n    url = @form.action + (if '?' in @form.action then '&' else '?') + $(@form).serialize()\n    Turbolinks.visit(url, keepScroll)\n```\nThen, the click/change handler for each form element:\ncoffee\n(event) ->\n  turboForm = new TurboForm(event.target.form)\n  turboForm.submit($(event.target).data('keep-scroll'))\nNow you can put a \"data-keep-scroll\" attribute on any form element to designate it in the same way as with links. \n. For what it's worth, I also made this work with a form (uses jQuery):\n``` coffee\nclass TurboForm\n  constructor: (@form) ->\nsubmit: (keepScroll = false) ->\n    @form.action ||= location.pathname\n    url = @form.action + (if '?' in @form.action then '&' else '?') + $(@form).serialize()\n    Turbolinks.visit(url, keepScroll)\n```\nThen, the click/change handler for each form element:\ncoffee\n(event) ->\n  turboForm = new TurboForm(event.target.form)\n  turboForm.submit($(event.target).data('keep-scroll'))\nNow you can put a \"data-keep-scroll\" attribute on any form element to designate it in the same way as with links. \n. ",
    "gosseti": "I\u2019ve just updated Turbolinks from 0.3.0 to current latest (0.5.0). In the interest of keeping unnecessary JS footprint from devices that don\u2019t support font-face, I\u2019ve asynced Typekit webfonts via yepnope (aka Modernizr.load). This worked without problems in 0.3.0. Here\u2019s the async snippet:\nModernizr.load([{\n  test: Modernizr.fontface,\n  complete: function() {\n    TypekitConfig = {\n      kitId: 'rndstring',\n      scriptTimeout: 3000\n    };\n    (function() {\n      var t = setTimeout(function() {\n        h.className = h.className.replace(/(\\s|^)wf-loading(\\s|$)/g, '');\n        h.className += ' wf-inactive';\n      }, TypekitConfig.scriptTimeout);\n      var tk = document.createElement('script');\n      tk.src = '//use.typekit.com/' + TypekitConfig.kitId + '.js';\n      tk.onload = tk.onreadystatechange = function() {\n        var rs = this.readyState;\n        if (rs && rs != 'complete' && rs != 'loaded') return;\n        clearTimeout(t);\n        try { Typekit.load(TypekitConfig); } catch (e) {}\n      };\n      var s = document.getElementsByTagName('script')[0];\n      s.parentNode.insertBefore(tk, s);\n    })();\n  }\n}]);\nWith the current version of Turbolinks, the pushState isn\u2019t firing with this async also going on. The standard page load (graceful fallback) is triggered. This seems to happen regardless of where the async code goes.\n. ",
    "gsamokovarov": "Hm, don't have such a device, but it's weird that it is that way :) Bringing back the undefined test. Does someone relies on window.history.replaceState too?\n. No need for this one then, closing.\n. ",
    "ryanflorence": "The jQuery datepicker initializes on the first call to $.fn.datepicker, and then sets a global variable to true.\nhttps://github.com/jquery/jquery-ui/blob/master/ui/jquery.ui.datepicker.js#L1816-1820\n@davydotcom's solution will bind the mousedown event with every page load, which is terrible.\nYou just need to append the element to the document again:\njavascript\njQuery.datepicker.dpDiv.appendTo( jQuery('body') );\n... or open tickets with jQuery UI (and everybody else in the world) to jump hoops to decide if their widgets have been blown away or not :P\n. @davydotcom, nice, they have a pull request open too:\nBug tracker\nhttp://bugs.jqueryui.com/ticket/5679\npull request\nhttps://github.com/jquery/jquery-ui/pull/543\n. ",
    "rafalbromirski": "I know that this ticket is closed but I solved this problem in different way:\n$(document).on 'page:change', ->\n  $.datepicker.initialized = false\nIt works like a charm.\n. ",
    "caarlos0": "thanks :)\n. I see. currently I using twitter-bootstrap-turbo, and it's working well for me...\n. :+1: @davydotcom \nWith this solution, the turbolinks JS should always be the last included.\nAlso, I'm not a JS-ninja, but I do believe that it will generate a dependency of jQuery to turbolinks, huh?\n. seems legit.\n. :+1:\n. Same issue here.\n. @reed your solution mixed with @guangnan tips worked here =D\nThank you both.\n. I'm get this error randomly when use Turbolinks.visit lots of times in a row.. but in chrome for mac.\nMore exactly, the issue is in:\njs\n cacheCurrentPage = function() {\n    rememberInitialPage();\n    pageCache[currentState.position] = { // Uncaught TypeError: Cannot read property 'position' of null\n      url: document.location.href,\n      body: document.body,\n      title: document.title,\n      positionY: window.pageYOffset,\n      positionX: window.pageXOffset\n    };\n    return constrainPageCacheTo(10);\n  };\n. Basically, I have a few links like:\nhtm\n<a href=\"#\" class=\"js-someaction\">Do something</a>\nThen, in my coffee file, I do somethings, in this specific case, I add parameters to the location.search, and tell turbolinks to visit the URL with the new search part: Turbolinks.visit(path+search)\nAfter doing this action a few times, i.e. user click various times in buttons like the example, the window.history.state became null and nothing works anymore.\nAnswering your question, no. Every time that I need to programmatically visit some URL I call Turbolinks.visit method.\nCheers\n. It could be. The bug always happen with URLs with hashes, just like the issue you cited (#256).\nI'll test your fix suggestion ASAP.\nThanks.\n. Sorry, I forgot to check the proposed e.preventDefault solution. Will do that right now...\n. yeah, looks like preventDefault fixes it. I update you guys if I found something. Thanks!\n. Besides the pull request made by me cited here (#233), I already experienced this bug before.\n:+1: \n. ",
    "ryw": "Note to future visitor using SCSS via https://github.com/anjlab/bootstrap-rails \u2014\nI've applied @davydotcom's fix to that project in my fork: https://github.com/ryw/bootstrap-rails\n. @yury mentioned jquery.turbolinks as a possible fix to the issue as well.\nI wonder if turbolinks should detect if app has jQuery, and if so, apply the following code, that wil  help with this issue on a multitude of plugins, not just bootstrap.\nFrom https://github.com/kossnocorp/jquery.turbolinks/blob/master/src/jquery.turbolinks.coffee\n``` coffeescript\n$ = require?('jquery') || window.jQuery\nList for store callbacks passed to $ or $.ready\ncallbacks = []\nCall each callback in list\nready = ->\n  callback() for callback in callbacks\nBind ready to DOM ready event\n$(ready)\nStore callbacks in list on $ and $.ready\n$.fn.ready = (callback) ->\n  callbacks.push(callback)\nBind ready to Tubolinks page change event\n$(document).on('page:change', ready)\n```\n. +1\nPerhaps a short doc above the code explaining the issue why this was added to turbolinks, and update README to explain how/when to use this?\nOnce this is merged in I'd be happy to add the docs.\n. @kossnocorp yeah, I'll take a crack at docs.\n. Hi @optikfluffel Can you supply sample code? Are you binding a javascript event to the button? Does the button work if you load that page directly, or is the button only broken after getting to the page after a click from a different page? \nTo help, need to know more precisely what you mean by \"Turbolinks stops working\".\n. So when you click the newly added button the page reloads?\nA few ideas...\n1) I think you'd want that button to be opted out of Turbolinks. See https://github.com/rails/turbolinks#opting-out-of-turbolinks.\n2)  I don't know exactly what the obfuscated widgets.js Javascript is doing but it does call preventDefault seven times. From the Turbolinks README:\n\nAlso, Turbolinks is installed as the last click handler for links. So if you install another handler that calls event.preventDefault(), Turbolinks will not run. This ensures that you can safely use Turbolinks with stuff like data-method, data-remote, or data-confirm from Rails.\n. \n",
    "MatthieuBarthel": "Yes it's a form submission, the controller renders the form with errors (initial pageload). Then I click a classic link to navigate to another page (leaving the form with errors), the page is rendered by turbolinks. Now hitting the browser's refresh button will reload the page in POST on a url that is accessible via GET.\n. I tried a simple test using PushState without turbolinks, it has the same issue in Chrome and Safari too.\nI didn't find any fix, the only ugly solution I could imagine is to add the attribute \"data-no-turbolinks\" to the body element when a post request is rendered.\n. Thanks for the work. I don't feel comfortable with your hack, it seems complicated. The easy way server side would be :\n<body <%= \"data-no-turbolink\" if request.post? %>>\nAlso, your commit doesn't take care if the browser is webkit based or not. As it looks like a webkit issue, I don't know what's the best way to treat it\n. Yes I guess there is no clean solution for this issue, I let the core team decides what's the best way.\nI didn't find the bug in the webkit issues list: https://bugs.webkit.org \nShall we create one ?\n. I've just find a specific case where this patch would cause an \"issue\".\nIf you have an iOS web app, using the meta apple-mobile-web-app-capable and adding it to home screen, when you follow a GET link you leave the single full screen app to safari mobile. So when turbolinks is disabled you leave the web-app ability. \nA possible solution would be, after a post request, to handle links with window.location=#{url} which will make a new page load without leaving the web app. But I'm not 100% sure that it will still resolve the issue #79\n. Sorry my english isn't very good, I will try to explain better: \nIf I write an iOS webapp and I rely on Turbolinks to prevent links to act \"normaly\" (which would leave the app and open the link into Safari Mobile), then this fix will cause an issue for that case (the standard web behavior cause the issue).\nThis is a very specific use case, do not hesitate if I can give more informations or put an example online.\n. ",
    "sailor": "I get the same error on Chrome (v.25.0.1364.99), when i get redirected after a post action. Every refresh attempts re-submit the form. I can't reproduce this issue on Safari or Firefox.\n. ",
    "ollym": "@dhh The whole point of turbolinks to refresh the page as little as possible right? At the moment you refresh the page whenever an asset is changed.\nYou do this currently by calculating the intersection between existing assets, and new assets. This algorithm is wrong to begin with, because what if you have a new asset added? The intersection won't tell you whether anything has been added lol. I had this bug on my app, so I re-wrote it like above ^\nMy code only refreshes the page if a script is removed. There is nothing we can do to stop the execution of that javascript on the document instance. So we have to refresh the page to be safe.\nIf a javascript file is added, I use something similar to jQuery's $.getScript() to dynamically add the script to the page. There's no need to refresh!\nStylesheets also can be added & removed dynamically without having to refresh. To be fair I've only tested this on safari and chrome but I suspect if your browser's clever enough to support pushSupport it should handle dynamically adding/removing stylesheets. See: http://jsfiddle.net/E8jw6/1/\n. @dhh My solution only works with assets with a \"src or href\" attribute. That's what I consider as an \"asset\". And yes, it will work if you dynamically remove/add a <link rel=\"stylesheet\" ... stylesheet - try it!\nBut I agree with you 100% I need to re-write my solution to consider order.\n. @davydotcom I think I understand your point, but not sure how it applies to my branch. Could you provide a jsFiddle?\n. @davydotcom I understand. Let me think about it and see what I can come up with. For now, your solution to the intersection issue should work fine.\n. ",
    "hgani": "Hi,\nHow about for SEO purposes? As a search engine crawler follows the links on our website, we want the meta tags to be refreshed to reflect the currently crawled page\nCheers\n. @jehughes thanks for the response\nDo you mean something like this?\n\n Insert meta tags here \n  <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track' => true %>\n  <%= javascript_include_tag 'application', 'data-turbolinks-track' => true %>\n\nIs this a documented behaviour? For some reason, I missed this.\nCheers\n. @jehughes Cool, thanks ... It's good to know SEO is not sacrificed when using Turbolinks :)\n. ",
    "jehughes": "@hgani I'm finding that as long as I set meta tags before including turbolinks in the <head> section, they update fine on each page. \n. @hgani Yes, exactly. If it's in the docs, I missed it as well :) I saw the comment at the bottom of this blog post  that got me pointed in this direction. \nHere's a gist of the code I ended up with.\n. ",
    "maxgronlund": "Ok I tested and tripple tested, \nFacebook has a scraper where you can type in the url for the page you want to test:\nhttps://developers.facebook.com/tools/debug\n1: Try to input. a url for a page where i injected the metatags using jquery\n2: nothing found\n3: inspected the page I can se the meta tags, I used jquery to inject them after the page loaded\n4: at the bottom of the https://developers.facebook.com/tools/debug page there is a little link\n'Scraper URL' If I expand that there is no meta tags\nConclusion Facebook don't execute javascripts ha ha. foolish me\ninserting meta tags before including turbolinks dont work for me, so I'm not quite done \n. ",
    "arkmediastudio": "Hi\nI am using share-button https://github.com/carrot/share-button and i have problem with meta tags not being updated. For facebook it works but for twitter and google+ it is not working, it gets the meta tags of the page with had a full reload. So can we please have an option to atleast update the below three common meta tags when using turbolinks?. Turn that off by default and if some wants it they can turn it on?. \nmeta[property=\"og:title\"]\nmeta[property=\"og:image\"]\nmeta[property=\"og:description\"]\n. @reed what do you think about my comment above?. Does this use case justify the need to add the ability to get the meta tags to be updated when using turbolinks?.\nThank You\n. Yes. @dhh\n. ",
    "philklei": "I extend the current turbolinks js ;)\nhttps://github.com/philklei/turbolinks\n. ",
    "ncri": "Adding the meta tags above including Turbolinks does not work for me. The tags don't update....\n. ",
    "quindici": "@dhh. You are right that when scraper discover a page it would fire a full page load request. However lots of sharing service does extract the meta tag and pass the card related information to social media directly. When Facebook get this urls for the first time, it would just cached what's given so the scraper does not work. Something flexibility to allow meta tags to be updated is very much needed.\n. ",
    "rahearn": "FWIW, I tested a site I wrote that uses turbolinks 0.6.1 today in Chrome for iOS and it seems to work fine.\n. I'm not actually sure. It's not falling back to a full page reload as there's only one request for the page. Is there a way to tell if its working based on production logs?\nOn Wednesday, December 19, 2012 at 10:59 AM, David Estes wrote:\n\nSweet, is it actually working or doing its graceful fallback?  \nOn Wednesday, December 19, 2012, Ryan Ahearn wrote:  \n\nFWIW, I tested a site I wrote that uses turbolinks 0.6.1 today in Chrome\nfor iOS and it seems to work fine.  \n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rails/turbolinks/issues/82#issuecomment-11535191.  \n\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/rails/turbolinks/issues/82#issuecomment-11535250).\n. Yes, I spoke too soon. I was expecting to see either a double request or a total lack of navigation for breakage. I am seeing problem 2 in the initial bug report, which is cause the turbolinks code to silently crash and the click event to be handled by the anchor tag. Never thought I'd be enjoying the benefits of graceful degradation in a fully js enabled browser.\n\nTurbolinks is behaving properly in the Switch browser for iOS, so this might just be a bug in Chrome itself, and not a problem for every UIWebView based browser.\n. Right, that's what I meant by exposed by 0.5.2. 0.5.1 just ignored assets that came after turbolinks (which is probably also a bug.)\nEven putting turbolinks last in the manifest doesn't work for development mode unless you also have a //= require_self line because application.js is included (even if it is empty) after all requires if not explicitly added.\nAccording to the README, turbolinks by design should only be checking for asset changes and additions before turbolinks is included. I'll have some time tonight to work on a better assetsChanged check so I'll try and add a pull request to this by tomorrow.\n. The updated assetsChanged check loops over the newly retrieved assets until it finds the last asset from the original call to rememberCurrentAssets. It then checks that count of assets against the original to determine if anything was added or removed before turbolinks was included.\n. You're right. This should be more robust. I'll fix that in the morning.\nOn Nov 27, 2012, at 21:36, Yasuharu Ozaki notifications@github.com wrote:\nI think suggested assetsChanged does not work following situation.\nHowever, if this is turbolink's design, do not care about this comment.\nassets = [1..5]extractedAssetsWithDoc = [100..97].concat [5]\nOriginal versionassetsChanged = (doc)->\nextractedAssets = extractedAssetsWithDoc\n  extractedAssets.length isnt assets.length or\nintersection(extractedAssets, assets).length != assets.length\nintersection = (a, b) ->\n  [a, b] = [b, a] if a.length > b.length\n  value for value in a when value in b\nthrow \"original assetsChanged should return true\" if assetsChanged() isnt true\nNewly suggested versionassetsChanged = ->\nnewAssets = []\n  for asset in extractedAssetsWithDoc\n    newAssets.push asset\n    break if asset is assets[-1..][0]\n  newAssets.length isnt assets.length\nthrow \"newly assetsChanged should return true\" if assetsChanged() isnt true\n\u2014\nReply to this email directly or view it on\nGitHubhttps://github.com/rails/turbolinks/pull/118#issuecomment-10787411.\n. A much better solution than remembering current assets on DOM load was proposed in #133. Closing this pull request in favor of it.\n. This still doesn't work in development if you use = javascript_include_tag \"application\", data: {'turbolinks-track' => ''} and don't have\n//= require_self\n//= require turbolinks\nAs the last two requires in application.js. That seems like a lot of setup to have to remember to do to get this configured properly.\n. I'm still seeing the same problem as when I originally opened #118. Using your order of requires with #= require_tree . below #= require turbolinks I end up with \n<script data-turbolinks-track=\"\" src=\"/assets/jquery.js?body=1\" type=\"text/javascript\"></script>\n<script data-turbolinks-track=\"\" src=\"/assets/jquery_ujs.js?body=1\" type=\"text/javascript\"></script>\n<script data-turbolinks-track=\"\" src=\"/assets/tinynav.js?body=1\" type=\"text/javascript\"></script>\n<script data-turbolinks-track=\"\" src=\"/assets/application.js?body=1\" type=\"text/javascript\"></script>\n<script data-turbolinks-track=\"\" src=\"/assets/turbolinks.js?body=1\" type=\"text/javascript\"></script>\n<script data-turbolinks-track=\"\" src=\"/assets/courses.js?body=1\" type=\"text/javascript\"></script>\n<script data-turbolinks-track=\"\" src=\"/assets/navigation.js?body=1\" type=\"text/javascript\"></script>\n<script data-turbolinks-track=\"\" src=\"/assets/scorecards.js?body=1\" type=\"text/javascript\"></script>\nin the page source. When rememberCurrentTrackingAssets is called courses.js, navigation.js, and scorecards.js are not yet in the DOM and thus are not added to the trackingAssets array. When Turbolinks loads the next page, it passes the entire page source to assetsChanged and extractedTrackAssets is now different than trackingAssets thus triggering a full page reload.\n. That seems like a much better solution than trying to reliably do on DOM load without jQuery.\n. Thank you. This works wonderfully.\n. Ideally this for loop would be written similar to\nextractedAssets = extractAssets doc\nextractedAssets = extractedAssets[0..extractedAssets.indexOf(assets[-1..][0])]\nBut I don't know how to do cross-browser indexOf cleanly without jQuery or underscore.js\n. ",
    "liamzebedee": "Hey all, has this been closed permanently as a non-fixable issue?\n. Anyone have any idea as to the root cause? Push.js from the Ratchet framework is able to function in Chrome on iOS (by simply using replaceState), could someone explain why Ratchet needs specific access to window.history.state? I'd be willing to give it a try to fix, Turbolinks is much better :)\n. ",
    "javan": "It's worth revisiting the issues Sam outlined in his initial report. If it's working now in the latest Chrome for iOS, we can scope the browser check to older versions.\n. This sounds like the expected transition cache behavior.\n\nFor example, if Page A is already cached by Turbolinks and you are on Page B, clicking a link to Page A will immediately display the cached copy of Page A. Turbolinks will then fetch Page A from the server and replace the cached page once the new copy is returned.\n\nCan you clarify what you mean by reload?\n. Turbolinks adds its own state object with pushState  and then checks for that state object onpopstate so in theory you should be able to use them independently without conflict.\nI feel like I may not be understanding your issue though. Can you provide a simple example?\n. If you're using an <a> element to initiate your own pushState, try opting that element out of Turbolinks: https://github.com/rails/turbolinks#opting-out-of-turbolinks\n. That's only true if the browser supports addEventListener and the DOMContentLoaded event so in IE 8 there's no way to \"Just bind to page:change\". Here's a test case: http://jsfiddle.net/Cu28Q/\n\nIn IE 8, only the ready callback fires. In more modern browsers, both callbacks fire. So there's no way to reliably execute code once per page change.\nIf Turbolinks.supported was (accurately) false in this case, then it would be clear that fallback support was needed.\n. Can you give an example of how you'd use this? Do you need to differentiate between Turbolinks and general XHR (request.xhr?) requests?\n. :beers: \n. Please open a separate issue if you can isolate <script> in body problem.\n. 62cc3db457ad9745ccda047dd43ab84fb3d8970 seems to describe to reason. Is it causing an issue for you?\n. Is this still an issue with the latest release?\n. The style is applied to the html element so that the animation can finish after the body element is replaced by Turbolinks. If applied to the body, the progress bar will abruptly disappear at the end instead of smoothly finishing.\nI'd like to explore fixing #436 with CSS alone so feel free to assign it to me (and explore on your own :grin:).\n. The animation not finishing when using the body is subtle because it happens quickly. Here's a version running 3x slower that reveals the problem. Using the body also prevents the progress bar from displaying at all when loading pages from the Turbolinks cache.\nOn body\n\nOn html\n\nI'm investing some fixes now.\n. Here's my diff:\n``` diff\ndiff --git a/lib/assets/javascripts/turbolinks.js.coffee b/lib/assets/javascripts/turbolinks.js.coffee\nindex 5e4d633..2ff9ae3 100644\n--- a/lib/assets/javascripts/turbolinks.js.coffee\n+++ b/lib/assets/javascripts/turbolinks.js.coffee\n@@ -44,7 +44,7 @@ enableTransitionCache = (enable = true) ->\n enableProgressBar = (enable = true) ->\n   return unless browserSupportsTurbolinks\n   if enable\n-    progressBar ?= new ProgressBar 'html'\n+    progressBar ?= new ProgressBar 'body'\n   else\n     progressBar?.uninstall()\n     progressBar = null\n@@ -380,7 +380,7 @@ class ProgressBar\n     @value = 0\n     @opacity = 1\n     @content = ''\n-    @speed = 300\n+    @speed = 1000\n     @install()\ninstall: ->\ndiff --git a/test/index.html b/test/index.html\nindex 864947c..f735196 100644\n--- a/test/index.html\n+++ b/test/index.html\n@@ -5,7 +5,7 @@\n   Home\n\n",
    "brendon": "Is this bug/problem/workaround present in Turbolinks 5?. ",
    "kossnocorp": "If you put turbolinks.js not below all scripts then assetsChanged always returns true. \n. Suddenly we found bug in jquery.turbolinks (https://github.com/kossnocorp/jquery.turbolinks/issues/4). Now it fixed (https://github.com/kossnocorp/jquery.turbolinks/commit/3212b54944b104b472d3b47e0b830ad51207a9b9). Sorry.\n. One more bug was fixed: https://github.com/kossnocorp/jquery.turbolinks/issues/6\n. Update:\n- Set $.isReady to false after page:fetch #6;\n- add $.setFetchEvent function;\n- remove all delegated events after trigger fetch event #8.\n. @dhh about documentation: I'm far away from native speaker, so it's better to delegate work on documentation to someone else. But anyway, I can copy texts from kossnocorp/jquery.turbolinks/README.\n@\u0430ll Hey guys, can you help me with documentation to jquery.turbolinks? You can rework README for jquery.turbolinks or write new one from scratch. Thanks! /cc @ryw\n. @dhh what do you think about import specs from jquery.turbolinks?\n. @YasuOza I'm pretty sure it can be done via Mocha + Chai.js + Sinon.js. Actually I successfully emulate DOM in jquery.turbolinks via jsdom: https://github.com/kossnocorp/jquery.turbolinks/blob/master/spec/jquery.turbolinks_spec.coffee#L3:L4.\n. Actually I was start building specs for Turbolinks, but I'm not sure when I can finish it: https://github.com/kossnocorp/turbolinks/commit/1b109a70f175211b87b38357c9abfad9e1ab5f2d.\n. @YasuOza we can just stub requests, isn't?\n. Docs are shipped :tada:! @ryw, thank you a lot!\n. @macournoyer take a look at these issues: https://github.com/kossnocorp/jquery.turbolinks/issues/6 & https://github.com/kossnocorp/jquery.turbolinks/issues/8. \n. I'm tested this pull request with #86. Works well! Thanks!\n. 1. Please show output for: cat Gemfile.lock | grep turbolinks.\n2. Check what is going on in this part: https://github.com/rails/turbolinks/blob/master/lib/assets/javascripts/turbolinks.js.coffee#L28:L34. I guess assetsChanged(doc) may return true.\n. Can you figure out why assetsChanged(doc) returns true?\n. @fei0456116, looks like symptoms for https://github.com/rails/turbolinks/pull/118. I have same problem when I merged few pull-requests to one for use in my project. I 'fixed\" it by this commit. I hope it can help you with problem solve.\n. :+1:\n. I see. Also since Turbolinks is completly bracketless it's pointless to try add brackets to improve readability. I'm just point you to opportunity remove two more brackets :smile_cat:.\n. ",
    "leafo": "The logic is still broken. The size of the intersection should be equal to the size of the new set of assets and equal to the size of the remembered assets.\nWhy are you even using an intersection function? It's just making things confusing. The set operation you are looking for is: http://en.wikipedia.org/wiki/Symmetric_difference\nHere's a slow but functional solution:\n``` coffee\nassetsChanged = (doc) ->\n  not setsAreEqual extractAssets(doc), assets\nsetsAreEqual = (a, b) ->\n  for item in a\n    return false if item not in b\nfor item in b\n    return false if item not in a\ntrue\n``\n. Ah, I missed the other clause you added,extractedAssets.length isnt assets.length`. What you have in the commit works. In any case I'd love to see this merged. Master is broken. :thumbsup: \n. ",
    "rafaelfranca": "This change busts the cache and made the Rails tests fail. https://travis-ci.org/rails/rails/jobs/4151284/#L599\n.  Please use the mailing list or StackOverflow for questions/help, where a wider community will be able to help you. We reserve the issues tracker for issues only.\n. Thanks\n. Is not this related to jPlayer? Maybe it has code to trigger pause/stop events on the load.\n.  Please use the mailing list or StackOverflow for questions/help, where a wider community will be able to help you. We reserve the issues tracker for issues only.\n. No problem. BTW, this message is semi-automatic. We usually don't take feature requests at our issues trackers.\nBut I think I can answer that question. If you want a header just to manage browsers that not support pushState is not better to just use a polyfill? https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills#html5-history-api-pushstate-replacestate-popstate\n. > I wonder if instead of include Turbolinks::ControllerConcern we should add a class method like enable_turbolinks to ActionController::Base?\nI don't know. For aesthetics a method seems better, but I like the explicitly of including a ruby module. Since it is not the default to disable that option I'd use the normal include.\n.  :shipit:\n.  :shipit:\n. Patch looks good. Are you going to document it on this same PR?\n. Yeah\n. I think I didn't understand it. Would sprockets directives like #= require works with bower?\n. Also, you would have to use the gem anyway because there are a lot of Ruby code on this gem, so I don't think using bower to manage turbolinks would even work.\n. But why do you need to use turbolinks on bower if you still needs the gem and you will still use sprockets and sprockets will load the gem's version? Just to list turbolinks as a frontend dependency?\n. Would that JS file works without the backend component?\nI still don't see any good reason to support turbolinks on bower, even more because you still need the gem.\nBut like @javan said, if we manage to make a usable .js file that works without the backend component we can have official bower support.\n. It is hard to know. The announcement was made yesterday and only Basecamp people have context about it. That said you can ask this question in their repository.\n. We don't need to tie Turbolinks 3 with Rails 5. If it is feature done and stable enough we can release it before Rails 5.\nA problem would be a change to Rails that could break turbolinks like was the change in the response that I fixed last week. I don't believe we are using any more internal method that could break but if we want to be safe, better to wait the Rails 5 beta\n. > Should we release TL3 or revise it to point toward TL5?\nIf that is the case I'd say we should revise it to point toward TL5\n. I'd prefer to not remove support to Rails 4.2 right now. So can we conditionally check the Rails version where it is necessary?. Yes of course. I'll release it tomorrow. I still didn't had time to release it, but I'll work on it soon. Meanwhile you can always point to github using bundler (this is one of the best features that bundler has). Oh. It was easier than I thought. It 2.5.4 is released now. Fixed at https://github.com/rails/turbolinks/commit/12de3ececa875095476c9fee09e8eaecc006ea65\n. just include would work here since this class is already ActionController::Base\n. ",
    "macournoyer": "Maybe I'm missing something, but couldn't all this code be replaced w/\njavascript\n$.fn.ready = (callback) -> $(document).on 'page:load', callback\nWhat's the point of reimplementing callback dispatching?\n. Here's the actual code I use:\n``` javascript\njQuery_ready = $.fn.ready\n$.fn.ready = (callback) ->\n  jQuery_ready callback\n  $(document).on 'page:load', callback\n```\nBinding the callbacks to document ready AND page:load.\nI believe it does the same thing.\n. My use case for this was when the csrf token changes because the session has been reseted on the server.\nEg.: using a memcache session store w/ 2 hours expiry\n1. User browse to page.\n2. Leaves page opened for > 2h.\n3. Goes back to page. Browse around.\n4. Submits an ajax form or anything that uses the csrf meta tags.\nNow csrf token in meta tag is invalid and will stay invalid until a full page refresh is triggered by the user or some other code.\nHowever this is no longer an issue for me, we've since gone back to the cookie store. And of course could be solved by increasing expiry too.\n. The issue it that head tag is not changed on page change via TL. I submitted this PR https://github.com/rails/turbolinks/pull/165 as a solution around this. But a temp solution I did in one of my apps is to put the meta tag inside the body, although this it invalid HTML.\n. Data attributes could be an option. But then you'd have to be extra careful to reload that value on page:change or always go through $(\"body\").data(...), which would have to re-parse the value/json each time.\nBinding to event in inline scripts seems like a bad practice to me. Because of that fix, Turbolinks breaks a legitimate use of inline scripts (passing variables) for the sake of fixing a bad use (non-idempotent event binding in inline scripts).\nAnyways, here's the code I use to restore a global variable named window.meta in my app:\n``` coffeescript\nmetaCache = {}\ncacheMeta = (position) ->\n  metaCache[position] = $.extend({}, meta)\n  constrainCacheTo(10)\nSame as Turbolinks\nconstrainCacheTo = (limit) ->\n  for own key, value of metaCache\n    metaCache[key] = null if key <= window.history.state.position - limit\nrestoreMeta = (position) ->\n  if meta = metaCache[position]\n    root.meta = meta\nTo cache the first page loaded w/o Turbolinks\n$(document).one 'page:fetch',   -> cacheMeta window.history.state.position - 1\n$(document).on  'page:load',    -> cacheMeta window.history.state.position\n$(document).on  'page:restore', -> restoreMeta window.history.state.position\n```\n. Holy crap you're right! Setting vars on document.body should work. I think that's a fine solution.\nThanks!\n. I think it couples Turbolinks to that specific Rails feature and decrease its cohesion (TL now has to care about csrf tokens).\nW/ my previous solution, the original meta_csrf_tag helper could be updated to add the proper data attribute and the update would be transparent to the users.\nMy $0.02 :)\n. ",
    "maccman": "I've fixed this on Stripe's side. Should be deployed soonish.\n. ",
    "CoincoinNico": "Hello,\nI'm getting the error with turbolinks (Uncaught error: StripeCheckout is not defined). Removing turbolinks fixes the issue.\nIs there something I'm missing ? Can't I get turbolinks & stripe ?\n. ",
    "bogdanovich": "Getting the same error with turbolinks and checkout.js \"Uncaught ReferenceError: StripeCheckout is not defined\"\n. ",
    "collin": "this works as a before_filter with no rescue :dancer: \n. ",
    "wycats": "Issues like this are why Turbolinks is a bad idea.\n. I hope you can see that this is turning into whack-a-mole.\n. Turbolinks is trying to reimplement enough of the browser's semantics so it can satisfy the goals of being a drop-in. Good luck!\n. ",
    "jdelStrother": "If you like I can try to come up with a patch this weekend for just extracting <script> and <link rel=stylesheet> tags when building the list of assets?\n. Oh - see https://github.com/rails/turbolinks/pull/83.  Feel free to pull that and then 72fae6ac1ac766fe5d090413a25d487718c9fc77 then, or I could update my github branch to drop the latter commit.\n. ",
    "elfassy": "Ok found a solution: http://www.stormconsultancy.co.uk/blog/development/code-snippets/jquery-document-ready-events-and-turbolinks/\njavascript\nvar do_on_load = function() { \n  // do some things \n}\n$(document).ready(do_on_load)\ndocument.addEventListener('page:change', do_on_load)\nIs this the right way to do this? If it is, i'll update the readme.\n. ",
    "rstacruz": "Some practical use cases:\n- Getting Turbolinks to work with forms would be a great use for this. #64 Not all Turbolinks users's forms use data-remote. For instance, I'd like to have a 3-step signup process flow more smoothly with Turbolinks, but that's not possible because data is passed on as POST between steps.\n- Instead of having the page simply change the <body> from one to another, I'd like to have a custom exit/entrance animation happen. (granted, this pull req doesn't make that possible, but it's a step forward to that)\n. So which one's telling the truth?\n. Confirming that the correct one is on @rails's documentation: the load order should be jQuery -> jQuery.turbolinks -> other scripts -> Turbolinks.\nThis ensures that the jquery.turbolinks hijacks $.fn.ready so that other scripts can consume it.\nTurbolinks then needs to be at the end of all scripts that can attach click handlers to links so that it will not intercept link clicks that should've been handled by other scripts.\nIt's @kossnocorp's documentation that needs to be amended.\n. I guess at the very least, the current state can be released as v3.0.0-pre1. \n. ",
    "dedico": "Hi,\nlatest fancyBox version 2.1.2 and turbolinks are working fine. Unfortunately fancyBox from version 2.0 is not free for commercial use anymore.\nI'm closing the issue as probably the problem is on the fancyBox side...\n. Cool!\nThanks for your help @jd-erreape and @R-osey!\nMarek\n. ",
    "Rosey": "For those wondering how to get fancybox 1.3.4 working with turbolinks (because I didn't want to update my fancybox.) :\nCall $.fancybox.init() on page:change\nUpdate this line in the fancybox js file (function is _start, approx. line 76 on the non minified version): \nselectedOpts = $.extend({}, $.fn.fancybox.defaults, (typeof $(obj).data('fancybox') == 'undefined' ? selectedOpts : $(obj).data('fancybox')));\nto \ncurrentOpts = selectedOpts = $.extend({}, $.fn.fancybox.defaults, (typeof $(obj).data('fancybox') == 'undefined' ? selectedOpts : $(obj).data('fancybox')));\nThis seemed to fix all my problems :)\n. ",
    "jd-erreape": "I've been able to use it without changing the fancybox.js file. Only with:\n$(window).bind('page:change', function() {\n    $.fancybox.init();\n});\nThanks R-osey! :)\n. ",
    "antpaw": "It doesnt work for me (v. 2.1.5)\ni made this hack to make it work \n// turbolinks vs fancybox bug\n$galleryHolder = $('<div id=\"gallery_holder\"></div>').appendTo(document.body);\n$('.gallery').fancybox({\n    parent: $galleryHolder,\n    openEffect: 'none',\n    closeEffect: 'none'\n});\nI guess something is cached wrong inside fancyBox.\n. @allaire i think the part where the \"parent\" elem is cached in the fancyBox is broken because they dont let go of it after it was removed from the dom, pretty sure this is not a turbolink issue\n. @allaire no i think thats okay, the holder contains only the big images that you see when you click on the thumbs, im sure this element will get some children once you click\n. it still has some bugs after the popstate event (whenever you use the back button) :( \nhope they stop caching $('body') soon\n. https://github.com/rails/turbolinks/pull/332 Could be the same issue that I have, try to run the code from my commit and see if it helps\n. Thanks, yes it solves the problem\n. ",
    "allaire": "@antpaw thank you for this, I had this issue on iOS only, your code fixed it! Did you had the problem also on desktop or mobile only like me?\n. @antpaw any idea why the parent attribute fix it?\n. @antpaw Thanks for the additional info. It's still weird tho, since the parent is not truly the parent of the lightbox stack in the DOM (see https://cloudup.com/cBATDstodGb)\n. @antpaw nothing change when I click, the container does not get any child elements, but I guess that's ok, as long as it fixes the issue :)\n. ",
    "joselo": "@antpaw it works for me, thanks\n. ",
    "alpracka": "@antpaw thank you too. This problem is still relevant for v2.1.5 as it's the latest version.\n. Same issue here, example: I can't determine exact height of the right column which I need for sliding of the left column with horizontal borders (now I'm getting wrong values). I tried $(window).on(\"page:load, ... but it behaves the same. I'm getting wrong values especially in the very first load of the page via turbolinks. For the best understanding:\n1. The mainpage is loaded, my JS is fired via $(window).load(ready) (ready is the function with my JS).\n2. I click on the link of the article, my JS is fired via $(window).on('page:load', ready) and I get the wrong height values of DOM element objects.\n3. I click on the link again, JS is fired as previous and now I get the correct values.\nI also tried @smidwap suggestion, but this won't fire on div elements and I'm not sure the loaded images are always the last loaded elements.\nThanks for any suggestions.\n. ",
    "tomasmuller": "Thank you @jd-erreape!\n. ",
    "henev": "Thank you @antpaw.\nWorking fine for me. I am using fancybox version 2.1.5\nBut I suggest you to use:\n``` code\n// turbolinks vs fancybox bug\nvar $galleryHolder = $('#gallery_holder');\nif ($galleryHolder.length === 0) {\n    $galleryHolder = $('').appendTo(document.body);\n}\n$('.gallery').fancybox({\n    parent: $galleryHolder,\n    openEffect: 'none',\n    closeEffect: 'none'\n});\n```\n. ",
    "sheharyarn": "The solutions mentioned by @iceless58 and @antpaw not working for me. \nUsing Fancybox2-Rails (Fancybox 2.1.5) with Ruby 2.2.0, Rails 4.2.0 and Turbolinks 2.5.3. (cc: @kyparn)\n. ",
    "Padchi": "1 Gives me: \nturbolinks (0.5.1)  \nturbolinks\n2 Yes, assetsChanged(doc) returns true. Why and how can I fix this?\n. I have not a clue, what does assets Changed(doc) do? The source are too complex for me and I haven't changed any assets.\nIf i remove https://github.com/rails/turbolinks/blob/master/lib/assets/javascripts/turbolinks.js.coffee#L28-30 everything works fine but after a few clicks i get an error on https://github.com/rails/turbolinks/blob/master/lib/assets/javascripts/turbolinks.js.coffee#L54\n\"currentState is null\". Maybe can help?\n. After commenting out all other files the order is jquery, jquery_ujs, turbolinks\n. Its google maps that trigger the assetsChanged(doc), if I remove  from my head tag everything works like it should. Why and how can I prevent this?\n. ",
    "glebm": "will resubmit in a bit\n. Fixed with https://github.com/rails/turbolinks/commit/8ba70faed4f8574bc1d564376bd68522f9f368e4\nI do like my solution better\nWhat do you think?\n. Updated, also rebased\nNo need to check is document because document.parentNode is also null\n. Nice, thanks!\n. This is still broken with the latest Chrome.\nTurns out this also breaks for scheme-relative URLs, e.g. //site.com/asset.js, while absolute URLs work.\n. ",
    "julian7": "Should we accept anything else than stylesheet here? For reference, there are a few, but not many of them: http://www.whatwg.org/specs/web-apps/current-work/multipage/links.html#linkTypes\n. Much better, thanks!\n. ",
    "limitingfactor": "I can no longer reproduce this issue.  My manifest was:\n``` ruby\n//\n//= require jquery\n//= require jquery_ujs\n//= require turbolinks\n//= require bootstrap\n//= require jquery.md5\n//= require_tree .\n```\nNot sure what changed, but it is consistently working now.\n. ",
    "stevenbristol": "OK, this is cleaned now. I've moved the other stuff to branches and and I'll add pull requests for those individually. \n. No, that fixes something else. With his fix the back button does load the\ncorrect page (which is an improvement, but it doesn't load it from cache,\nit calls the server again.\nOn Mon, Nov 26, 2012 at 12:53 PM, David Heinemeier Hansson \nnotifications@github.com wrote:\n\nI believe this is already fixed via #113https://github.com/rails/turbolinks/issues/113?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rails/turbolinks/pull/116#issuecomment-10725895.\n. You're right, it's not happening all the time. Let me do some more digging.\n. According to the specs, \"inline\" would refer to the name of a frame or\niframe and should be ignored by turbolinks. \"_self\" is valid and should not\nbe ignored (but it's not generally used). I'd be glad to add support for\n\"_self\" if a commiter requests it.\n\nOn Tuesday, November 6, 2012, Ayrton De Craene wrote:\n\nIn lib/assets/javascripts/turbolinks.js.coffee:\n\n@@ -183,11 +183,14 @@ noTurbolink = (link) ->\n     link = link.parentNode\n   ignore\n+targetLink = (link) ->\n-  link.target.length isnt 0\n\nPerhaps this should take link.target == 'inline' into account as well.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rails/turbolinks/pull/107/files#r2046088.\n\n\nCheers,\nSteven Bristol\nsteve@lesseverything.com\nhttp://lesseverything.com\nhttp://lessaccounting.com\n. As I said, I'll leave it to a commiter to decide.\nOn Tuesday, November 6, 2012, Ayrton De Craene wrote:\n\nIn lib/assets/javascripts/turbolinks.js.coffee:\n\n@@ -183,11 +183,14 @@ noTurbolink = (link) ->\n     link = link.parentNode\n   ignore\n+targetLink = (link) ->\n-  link.target.length isnt 0\n\n@stevenbristol https://github.com/stevenbristol I mistakenly typed\ninline before, but corrected this shortly after. I agree that it's\ngenerally not used, but this might be useful to cover the edge cases.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rails/turbolinks/pull/107/files#r2046815.\n\n\nCheers,\nSteven Bristol\nsteve@lesseverything.com\nhttp://lesseverything.com\nhttp://lessaccounting.com\n. ",
    "hyperrjas": "with https://github.com/kossnocorp/jquery.turbolinks is fixed this problem.\nThank you very much!\n. Hi Thank you for this fast response. Yes I have tried with:\ndocument.addEventListener('page:load', function(){ $('#page').masonry('reload'); });\nBut this is not working for me  :(.\nI am trying with a fix, but yet I don't know if is working this fix.\nhttps://raw.github.com/alexanderdickson/waitForImages/master/dist/jquery.waitforimages.min.js\nI have added jquery.waitforimages.min.js to vendor folder and after on my application.js I have added:\n$('#page').waitForImages(function() {\n    $(\"#page\").masonry(\"reload\");\n });\nPlease let me know if you find a fix for this error.\nThank you very much!\n. Thank you, after several hours I was able to solve the problem with a new code for masonry because with $('#page').masonry('reload');\nI get on console:\ncannot call methods on masonry prior to initialization; attempted to call method 'reload'\nSo, the final that is working for me is a new masonry code with:\n$(document).on('page:load', function(){\n   $('#page').waitForImages(function(){\n    finished: function() {\n      var $container;\n      $container = $(\"#page\");\n      $container.imagesLoaded(function() {\n       return $container.masonry({\n       .\n       .\n       //options here\n       });\n     });\n   }, \n   waitForAll: true\n });\n});\nYou can download waitForImages plugin for here:\nhttps://raw.github.com/alexanderdickson/waitForImages/master/dist/jquery.waitforimages.min.js\nThis is waitForImages page:\nhttps://github.com/alexanderdickson/waitForImages\nThank you very much!\n. @dhh :+1:  It's a great idea\n. ",
    "jeandenis-k": "Hey there, same for me on Chrome and Safari. When I click on a link with an anchor, the full URL appears in the navigation, then the anchor is dropped.\nThis is a problem for me as I use the anchor to highlight a particular element on the page. For now I'm just disabling Turbolinks for links with anchors.\n. Still not working. I'll have some time to reproduce this problem on a minimal example in a bit.\n. ",
    "optikfluffel": "Ok sorry, by \"Turbolinks stops working\" I mean it does whole page reloads after I follow the steps from twitter.com to add a button and add this to my template:\nhtml\n<a href=\"https://twitter.com/optikfluffel\" class=\"twitter-follow-button\" data-show-count=\"false\" data-lang=\"en\">\n  Follow @user\n</a>\n<script>\n  ! function (d, s, id) {\n    var js, fjs = d.getElementsByTagName(s)[0];\n    if (!d.getElementById(id)) {\n      js = d.createElement(s);\n      js.id = id;\n      js.src = \"//platform.twitter.com/widgets.js\";\n      fjs.parentNode.insertBefore(js, fjs);\n    }\n  }(document, \"script\", \"twitter-wjs\");\n</script>\n. No not the link itself is the problem. If I only inlcude the widget.js it starts reloading everything.\n. ah OK, Thanks :)\n. ",
    "fei0456116": "Click on a link will trigger  twice request. one is ajax request , another  not\n. change application\n//= require jquery\n//= require jquery_ujs\n//= require_tree .\n//= require_self\n//= require turbolinks\n. ",
    "svyatov": "Do not confirm. I use 3.2.9 and turbolinks 0.5.2 works just fine.\n. ",
    "murdoch": "I am experiencing this this issue too with the following setup:\nBrowsers: FireFox 17, Chromium 20\nRails: 3.2.9\nRuby: 1.9.3\nOS: wattOS\n. ",
    "jmcervera": "I can confirm that this happens with turbolinks 0.5.2, but not with 0.5.1\n. ",
    "semiweb": "\nI think same page reloading through turbolinks is rare case\n\nIn my case, it's not rare and having a \"go to previous line\" option on same page reload would be helpful.\n. ",
    "penchiang": "My app is using Rails 3.2.1 and Turbolinks 0.5.2. When clicking on the link, the link works. However, it loads the page in the existing/same window. Also, I noticed that the back button stops to work as well. After removing the turbolinks, then it behaves normally.\n. I am using the most recent version of Chrome. When inspecting the element, it looks like that each page was reloaded and turbolinks was not used. This behavior applies to every link, including the one that opens a new window. I am using bootstrap and wondering if this problem has something to do with it.\n. The \"link_to\" statement used in my application is:\n<%= link_to 'RMap 4 Document'.html_safe, \"/rmap4/HTML/index.html\", :target=> \"_blank\" %>\nThe produced HTML statement is:\nRMap 4 Document\nI have tested it again and it still does not work.\n. After switching to Rails 3.2.9, the problem was resolved. Thanks for all of your help.\n. Hi,\nI also have to clean out some of my jquery JavaScript to make it work.\nOn Dec 14, 2012, at 11:50 AM, \"Kristijan\" notifications@github.com<mailto:notifications@github.com> wrote:\nHum... are you sure it works? I'm using Rails v3.2.9 with gem v0.6.1 and it doesn't work (no special JS).\nIt's also wird when you hit the \"back\" button in a browser. In this case the page is not reloaded properly (the last url stays visible).\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rails/turbolinks/issues/124#issuecomment-11383049.\n. ",
    "phuongnd08": "@YasuOza: So given the page:load of page1 will do certain setup for the page1 to display properly but may mess the display of page2, re-trigger the page:load of page1 should not be called when user navigate to page2. \n@dhh: It may be from history, but may not. User may revisit the page1 after navigate to page2 by clicking on a link from a navigation menu.\n. ",
    "terracatta": "Ah got it! Thanks :)\n. ",
    "tagliala": "Thanks. I supposed something like that.\n. Hi,\nI'm having troubles here: the 'page:receive' event seems not to be fired.\nThis is a demo app, based on ruby 2 and rails 3.2.13: http://immense-fortress-8830.herokuapp.com\nThis is my whole application.js.coffee. If you need the whole application source code feel free to ask me\n``` coffee\n= require jquery\n= require jquery_ujs\n= require turbolinks\n= require_tree .\nstartSpinner = ->\n  console.log 'Start Spinner'\nstopSpinner = ->\n  console.log 'Stop Spinner'\ndocument.addEventListener 'page:fetch', startSpinner\ndocument.addEventListener 'page:receive', stopSpinner\n```\nAs you can see in the console, the only reported event is Start Spinner\nI have this issue in both production and development.\nTested on chrome 26, firefox 20 on ubuntu.\nIs this an issue of mine?\nTIA\n. I'm sorry.\nI always repeat to me: \"double check you are using the latest version of the gem, then try the master branch\" but I fail everytime\nI was using an older version (1.0.0) and I don't know why, since I didn't specified the version number in the gemfile and I was assuming it was using the latest version: https://github.com/tagliala/turbospinner/blob/master/Gemfile#L25\nForcing the '1.1.1' it works as a charm. thanks for the hint and sorry again\n. ",
    "thibaudgg": "Sadly requiring turbolinks in last doesn't fix it for me.\n. Yeah on the railscast example it works, but it wasn't on my project. Now that I have commented typekit & livereload javascript it works. Do you know any workaround for these?\n. Ok I found that for typekit: http://www.jmmcduffie.com/2012/11/using-turbolinks-with-typekit-and-google-analytics\nI'll have a look for livereload now.\n. #100 not help me that much, but moving:\nhtml\n<script type=\"text/javascript\" src=\"/__rack/swfobject.js\"></script>\n<script type=\"text/javascript\" src=\"/__rack/web_socket.js\"></script>\n<script type=\"text/javascript\" src=\"/__rack/livereload.js?host=docs.sublimevideo.dev\"></script>\nbefore application.js fix it.\nThanks for your support!\n. ",
    "fpleme": "Embed Zopim Live Chat Widget\nCopy the following script and insert it into your website's HTML source code between the head tags.\nThis code must be inserted into every page on which you wish to display the Zopim chat widget.\njavascript\nwindow.$zopim||(function(d,s){var z=$zopim=function(c){z._.push(c)},$=z.s=\nd.createElement(s),e=d.getElementsByTagName(s)[0];z.set=function(o){z.set.\n_.push(o)};z._=[];z.set._=[];$.async=!0;$.setAttribute('charset','utf-8');\n$.src='//cdn.zopim.com/?MY_APP_KEY';z.t=+new Date;$.\ntype='text/javascript';e.parentNode.insertBefore($,e)})(document,'script');\n. Hi Nick, thanks for your help.\nI made the changes as you said. And moved the code to the body. Continued not working. But this manner worked.\n``` javascript\nfunction zopim_chat(){\n    window.$zopim = null;\n    (function(d,s){\n        var z=$zopim=function(c){\n            z..push(c)},$=z.s=d.createElement(s),e=d.body.getElementsByTagName(s)[0];\n            z.set=function(o){\n                z.set..push(o)\n            };\n            z.=[];\n            z.set.=[];\n            $.async=!0;\n            $.setAttribute('charset','utf-8');\n            $.src='//cdn.zopim.com/?MY_APP_KEY';\n            z.t=+new Date;\n            $.type='text/javascript';\n            e.parentNode.insertBefore($,e)\n    })(document,'script');\n}\n$(document).on('ready', zopim_chat);\n$(window).bind('page:load', zopim_chat);\n```\nOnly now, every link clicked code is replicated on the page.\n``` html\n .zopim { display: none !important } \n   61@media print { object[name=ultimate-status-bar]{top: -9999px} }\n   62\n .zopim { display: none !important } \n\n   63@media print { object[name=ultimate-status-bar]{top: -9999px} }\n   64\n .zopim { display: none !important } \n\n   65@media print { object[name=ultimate-status-bar]{top: -9999px} }\n   66\n .zopim { display: none !important } \n\n\n\n\n\n\n```\nAny idea?\n. Thanks Nick, it worked perfectly. =)\n. ",
    "infernalmaster": "I use that code before closing body tag. Maybe it will be useful for someone. Cause in my case proposed solution adding function zopim_chat as event handler after any loading page with turbolink, so it triggers multiple times. So I remove any handlers in namespace zopim with off('page:change.zopim') and after add them again.\njavascript\n<!--Start of Zopim Live Chat Script-->\n//http://reed.github.io/turbolinks-compatibility/zopim.html\nfunction zopim_chat(){\n  $('[__jx__id]').remove();\n  window.$zopim = null;\n  (function(d,s){\n    var z = $zopim = function(c){\n      z._.push(c)\n    }, $ = z.s = d.createElement(s), e = d.body.getElementsByTagName(s)[0];\n    z.set = function(o){\n      z.set._.push(o)\n    };\n    z._ = [];\n    z.set._ = [];\n    $.async = !0;\n    $.setAttribute('charset','utf-8');\n    $.src = '//v2.zopim.com/?MY_API_KEY';\n    z.t = +new Date;\n    $.type = 'text/javascript';\n    e.parentNode.insertBefore($,e)\n  })(document,'script');\n}\n$(window).off('page:change.zopim').on('page:change.zopim', zopim_chat);\n</script>\n. As you know,  turbolinks does not reload all page, but just replaces page  content with new. So it automatically executes inlined into the page body script $(window).on('page:change.zopim', zopim_chat);. So after third page change this script will executes 3 times and you will have 3 registered callbacks on 'page:change.zopim. So to prevent this I removes all handlers every time with this .off('page:change.zopim').\n@mupty you are right about socket connection, because this script does not destroy previous zopim instance with closing connection. Because there is no such functionality there. \nSo all previous zopim instances are still alive (and sockets too) but it views are removed by turbolinks page reload. And my solution is dirty hack. \nSo now I see better solution:\n1. init zopim only once (do it in page header)\n2. before page change (page:before-change) remove zopim view from DOM but keep it in memory\n3. after page change (page:change) insert zopim view from memory into right place in DOM\n. ",
    "mupty": "@infernalmaster : what do you mean about so it triggers multiple times? Does it init alot of socket connection to zopim?\nI implemented as 2 above ways, but it init one socket connect each time I click to other page. Is that correct?\nBelow image shows the sockets was inited after I click on 4 links on my web page:\n\n. @infernalmaster: Thank you for your reply. I will try to implement base on your idea. \n. @infernalmaster : I implemented as your above idea, but it did not work fine. The reason is: zopim uses an iframe to display chat content, so, when I:\n2. before page change (page:before-change) remove zopim view from DOM but keep it in memory\n3. after page change (page:change) insert zopim view from memory into right place in DOM, all events of elements would not bound any more. \nBelow snippet code works fine withinsert zopim view from memory into right place in DOM, but cannot work with events on each elements as before:\n```\nvar zopimViewOuterHtml = [];\nvar zopimViewInnerHtml = [];\nfunction zopimChat() {\n    $('[__jx__id]').remove();\n    window.$zopim || (function (d, s) {\n        var z = $zopim = function (c) {\n            z..push(c)\n        }, $ = z.s = d.createElement(s), e = d.body.getElementsByTagName(s)[0];\n        z.set = function (o) {\n            z.set..push(o)\n        };\n        z. = [];\n        z.set. = [];\n        $.async = !0;\n        $.setAttribute('charset', 'utf-8');\n        $.src = '//v2.zopim.com/?YOUR_KEY';\n        z.t = +new Date;\n        $.type = 'text/javascript';\n        e.parentNode.insertBefore($, e);\n    })(document, 'script');\napplyZopimViewContent();\n\n}\nfunction getZopimViewContent() {\n    zopimViewOuterHtml = [];\n    zopimViewInnerHtml = [];\n    $.each($('.zopim'), function (index, ele) {\n        zopimViewOuterHtml.push(ele.outerHTML);\n        zopimViewInnerHtml.push($(ele).find('iframe').contents().find('html').html());\n    });\n}\nfunction applyZopimViewContent() {\n    zopimViewInnerHtml = zopimViewInnerHtml.reverse();\n    zopimViewOuterHtml = zopimViewOuterHtml.reverse();\n    $.each(zopimViewOuterHtml, function (index, outer) {\n        $('body').prepend(outer);\n        $('iframe')[index].contentDocument.write(zopimViewInnerHtml[index]);\n    });\n}\n$(window).on('page:before-change', getZopimViewContent);\n$(window).on('page:change', zopimChat);\n```\nSo, I fixed this by define a blank page, that contains only zopim chat box. Then, I call it on iframe on page where I want to chat box appears. This blank page could be served as static html page easily.\nDetail:\n- html page:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE html>\n\n\n\n\n\n\nYour title\nStart of Zopim Live Chat Script\n\n    window.$zopim||(function(d,s){var z=$zopim=function(c){\n      z.<em>.push(c)},$=z.s=\n      d.createElement(s),e=d.getElementsByTagName(s)[0];z.set=function(o){z.set.\n      </em>.push(o)};z.<em>=[];z.set.</em>=[];$.async=!0;$.setAttribute('charset','utf-8');\n      $.src='//v2.zopim.com/?YOUR_KEY';z.t=+new Date;$.\n        type='text/javascript';e.parentNode.insertBefore($,e)})(document,'script');\n  \nEnd of Zopim Live Chat Script\n\n\n\n\n```\n- And on page where I where I want to chat box appears:\n<div class=\"support-chat\">\n  <iframe src=\"path_to_above_html_file\" class=\"iframe-support-chat\"></iframe>\n</div>\n- Some css for chat box\n```\n.support-chat {\n  position: fixed;\n  bottom: 0;\n  right: 0;\n  max-width: 290px;\n  max-height: 400px;\n  overflow: hidden;\n  z-index: 3;\n}\n.iframe-support-chat {\n  height: 400px;\n  width: 290px;\n  overflow: hidden;\n  border: none;\n}\n```\nPros:\n\nImplement zopim in official way.\nPrevent zopim init a socket connection each click to other page.\n\nCons:\n\npath_to_above_html_file will be hit more each request, but this could be reduced by serving this file as a static html page.\nCan not know what page that user send message when view on zopim dashboard.\n. \n",
    "swrobel": "@dhh:\n\nNever use config.assets.debug\n\nWhy?\n. ",
    "jdalton": "I'd love to but I lack the CS chops for it.\ncopy.text = ... should work for most browsers though the appendChild(document.createTextNode(...)) is the more proper way. If you don't plan on reaching that bit with IE < 9 you can simply use\njs\ncopy.appendChild(document.createTextNode(script.innerHTML));\nparent.insertBefore(copy, parent.childNodes[0]);\n. @reednj77\nYap thank you! Though, as mentioned in my previous comment you can most likely remove the try-catch as that's for IE < 9 which I'm guessing won't get to this point.\nAlso you could preserve script DOM order by grabbing a reference to script's next sibling sibling = script.nextSibling before it's removed by parent.removeChild script.\nThen the line parent.insertBefore copy, parent.childNodes[0] would become parent.insertBefore copy, sibling\n. @reednj77 you can even remove the unless script.src? and script.src isnt '' check and just append the text node, because if a script element has a src which would be applied via copy.setAttribute attr.name, attr.value for attr in script.attributes the browser will ignore any inlined script content anyway.\n. ",
    "codeblooded": "I am experiencing this issue as well.  I replicated it in another rails app and made a screencast showing the issue: \nTurbolinks mail_to Screencast\nThe issue seems to be turbolinks, because, using a browser where it isn't active, produces the appropriate result.  However, in the past, it was addressed that using a JavaScript encoding with mail_to might produce a security vulnerability in rails... see GoogleGroup discussing Issue.\n. @reednj77 the result is as expected.  The page is not overwritten.  However, the name of the link becomes 'href'.  This occurs because the name in the block interferes with the name parameter.  Changing the block starting at line 20 to:\nruby\nwhen \"javascript\"\n          string = ''\n          set_attributes = ''\n          html_options.merge(\"href\" => \"mailto:#{email_address}#{extras}\".html_safe).each_pair do |tag,value|\n            set_attributes += \"a.setAttribute('#{tag}', '#{value}');\"\n          end\nresolves the problem with naming.\nThank you for fixing this issue.\n. ",
    "tenderlove": "It concerns me that we have to push changes to Rails specifically to support Turbolinks.  Is it now a requirement that Rails helpers emit \"Turbolinks safe\" code?\n. Should we be testing that helpers in Rails emit Turbolinks safe code?  Do we need to educate people on \"do's and don'ts\" when writing JS with Turbolinks?\n. ",
    "mislav": "document.write is often used for dynamic script injection, \"widgets\" and so on. The big don't of writing JS with Turbolinks would be \"never use document.write\".\n. Note that IE indeed has a history of aggressively caching HTTP resources, but it does respect cache-controlling response headers if you set them from the application.\n. ",
    "frodsan": "Yes, I didnt' think about that :-1:. Closing.\n. ",
    "jipiboily": "I'll add my 2 cents here, not only about that issue but in general. I think turbolink should not deal with all edge cases but have conventions, just like Rails. Turbolinks users just needs to adapt their stack to turbolinks' conventions. If it's too hard, maybe this is not the right solution for you? If we deal with all edge cases, we'll end up having reimplemented the whole browser thing, pile of crap code that will be unnecessary complex and less maintainable.\nThis is just my 2 cents! :)\nDisclaimer: I am not a maintainer and haven't even wrote a single line for turbolinks so take that with a grain of salt, please. That said, I am thankful for all the work that was done for turbolinks.\n. ",
    "lucas-clemente": "I understand your point. For now I just put my script tags into the header. That solves the issue, but at the expense of speed in non-turbolinks environments. For me that's not a problem, but it might be for others.\nAt the end, the question boils down to \"where do I put my script tags\". Thinking about it again I see three options:\n- Leave it as it is and put everything into the header (using $(document).on(\"page:load\", ...) for attaching stuff)\n- Leave it as it is and put js libraries (jquery, ...) into the header, stuff that registers handlers on the page into the body\n- Change the behavior of turoblinks to allow putting everything into the body.\nProbably you are right and this doesn't justify a change in turbolinks. Maybe these options should be listed and explained in the readme?\n. ",
    "neersighted": ":+1:\n. ",
    "ccmcbeck": "@YasuOza, thanks for the response.\nI was wrong about turbolinks having any responsibility.\nI've removed all the JS except jQuery 1.7.2 and '.click()' or '.trigger('click') doesn't work for me anymore on anchor tags.  In my commit before I migrated from pjax to turbolinks, it worked on both anchors and buttons.  Clearly, it's unrelated to turbolinks.\nSo, I've closed this issue.  If I find out more I'll update it here.\n. Despite some stack overflow posts to the contrary, jQuery's .click() does not launch the href on an anchor tag.  I was fooled by the fact that my previous pjax solution was providing a click handler.  WIth turbolinks, I need to implement it myself.\n. You guys did a great job.  I had to unwind all the special case code I added for PJAX.  If I'd started with Turbolinks, it would have just worked right out of the box.\n. @Yasu\nMy application.js is the same as yours except I have jquery_turbolinks\n//= require jquery\n//= require jquery_ujs\n//= require turbolinks\n//= require jquery.turbolinks\nHowever, I have the same issue even if I remove jquery_turbolinks\nThe salient portion of my Gemfile is \ngem 'turbolinks', '0.6.1'\ngem 'jquery-turbolinks','0.2.1'\ngem 'rails', '3.2.6'\nFor clarification, my event code runs (like yours) and returns false.  I can see in the Web Inspector that \nevent.isDefaultPrevented: function returnTrue()\nevent.isPropagationStopped: function returnTrue()\nWhen I run your code or mine, the event handler is called and the page is fetched and rendered.  I'm hoping to short circuit the fetch.  Are you saying that your fetch does not take place and you remain on the same page?\n. @YasuOza, after recording the events in Web Inspector, I see that page:fetch doesn't propagate.  So, I'll use an $('a').on 'click' handler.  That is a better solution since I need to abort navigation even in the case of data-no-turbolink.  Thanks for helping me think this through.\n. ",
    "davidray": "I've seen this occasionally on trooptrack.com, though I can't reproduce it reliably.\n--- five minutes later ---\nI just remembered that I was seeing it a lot when I was using the jquery turbolinks gem. I took it out of trooptrack and handled the document load myself and the problem stopped occurring.\n. Thanks. That fixed it for me.\n. ``` haml\n!!! Strict\n%html{:lang => \"en\", \"xml:lang\" => \"en\", :xmlns => \"http://www.w3.org/1999/xhtml\"}\n  %head\n    %meta{:content => \"text/html; charset=utf-8\", \"http-equiv\" => \"Content-Type\"}\n    %meta{'http-equiv' => \"X-UA-Compatible\", :content => \"chrome=1\"}\n    %meta{:name => \"google\", :value => \"notranslate\"}\n    %meta{:name => \"viewport\", :content => \"width=device-width, initial-scale=1.0\"}\n    %meta{:name => \"google-site-verification\", :content => \"CSaSp7lHlWZwx28FAKPWwJFqcQFWDsKRzD_HYoow4OQ\"}\n    %link{:href => \"/assets/favicon.png\", :rel => \"Shortcut Icon\"}/\n    %title= page_title\n    /[if lt IE 9]\n      = javascript_include_tag \"http://html5shim.googlecode.com/svn/trunk/html5.js\"\n= stylesheet_link_tag 'application'\n= javascript_include_tag \"application\"\n= csrf_meta_tag\n\n%body{:id => body_id, :class => body_class}\n    - if @login_user\n      - Announcement.current(cookies.signed[:hidden_announcement_ids]).each do |announcement| \n        = div_for announcement do \n          = announcement.message.html_safe \n          = link_to icon('icon-remove'), hide_announcement_path(announcement), remote: true \n    .container\n      .navbar.navbar-fixed-top.navbar-inverse\n        .navbar-inner\n          .container\n            = link_to image_tag('logo.png'), root_path, :class => \"brand\"\n            #page_loading= image_tag('ajax-loader.gif')\n            %ul.nav.pull-right.dropdown\n              - if @login_user.nil? \n                %li.visible-desktop= link_to \"Boy Scouts\", '/boy_scouts'\n                %li.visible-desktop= link_to \"Cub Scouts\", '/cub_scouts'\n                %li.visible-desktop= link_to \"American Heritage Girls\", '/american_heritage_girls'\n                %li.visible-desktop= link_to 'Girl Scouts', '/girl_scouts'\n                %li= link_to 'Testimonials', testimonials_path\n                %li.dropdown\n                  = link_to caret('Learn More'), '#', {'data-toggle' => \"dropdown\", :class => 'dropdown-toggle'}\n                  %ul.dropdown-menu{'role' => \"menu\"}\n                    %li.hidden-desktop= link_to \"Boy Scouts\", '/boy_scouts'\n                    %li.hidden-desktop= link_to \"Cub Scouts\", '/cub_scouts'\n                    %li.hidden-desktop= link_to \"American Heritage Girls\", '/american_heritage_girls'\n                    %li.hidden-desktop= link_to 'Girl Scouts', '/girl_scouts'\n                    %li= link_to 'Compare to TroopMaster', '/troopmaster'\n                    %li= link_to 'User Guide', help_pages_path\n                    %li= link_to 'Pricing', '/pricing'\n                %li= link_to \"Log In\", new_user_account_session_path, :remote => true\n              - elsif @troop.nil?\n                %li= link_to \"Dashboard\", [:admin, :dashboard]\n              - else\n                %li.dropdown\n                  = link_to caret(@login_user.name), '#', {'data-toggle' => \"dropdown\", :class => 'dropdown-toggle'}\n                  %ul.dropdown-menu{'role' => \"menu\"}\n                    %li= link_to 'Your Profile', [:manage, @login_user]\n                    %li= link_to 'User Name & Password', edit_user_account_path, :remote => true\n                    %li= link_to 'Logout', user_account_session_path, :method => :delete\n                %li= link_to \"Notifications (#{@notifications.size})\", notifications_path\n                %li.dropdown\n                  = link_to caret('Support'), '#', {'data-toggle' => \"dropdown\", :class => 'dropdown-toggle'}\n                  %ul.dropdown-menu{'role' => \"menu\"}  \n                    %li= link_to \"User Guide\", help_pages_path, :target => '_blank'\n                - unless @login_user.is_scout?\n                  %li= link_to \"Get Help\", new_question_path, :remote => true\n                  %li= link_to \"All Your Requests\", questions_path\n                  / %li= link_to \"Vote on a Feature\", questions_path(:feature_requests => true)\n                %li= link_to 'Testimonials', testimonials_path\n                - unless @login_user.is_scout?\n                  %li= link_to \"Submit a Testimonial\", new_testimonial_path, :remote => true\n            %li.visible-desktop= link_to 'People', user_powerbars_path, :remote => true\n            - if @login_user.access_level == 'Unit'\n              %li.visible-desktop= link_to 'Reports', reports_powerbars_path, :remote => true\n            - unless @my_money_accounts.nil? || @my_money_accounts.empty?\n              %li.visible-desktop= link_to 'Money', money_powerbars_path, :remote => true\n            - if @login_user.mailing_list_users.where(:can_send => true).size > 0\n              %li.visible-desktop= link_to 'Quick Message', new_communicate_message_path, :remote => true\n\n            %li.dropdown.hidden-desktop\n              = link_to caret('Quick Nav'), '#', {'data-toggle' => \"dropdown\", :class => 'dropdown-toggle'}\n              %ul.dropdown-menu{'role' => \"menu\"}    \n                %li.user_powerbar= link_to 'People', user_powerbars_path, :remote => true\n                - if @login_user.access_level == 'Unit'\n                  %li.reports_powerbar= link_to 'Reports', reports_powerbars_path, :remote => true\n                - unless @my_money_accounts.nil? || @my_money_accounts.empty?\n                  %li.money_powerbar= link_to 'Money', money_powerbars_path, :remote => true\n                - if @login_user.mailing_list_users.where(:can_send => true).size > 0\n                  %li= link_to 'Quick Message', new_communicate_message_path, :remote => true\n- if @troop && !@troop.new_record? && @troop.unit_type_id     \n  .visible-desktop= render \"layouts/header_unit_type_#{@troop.unit_type_id}\"\n  .hidden-desktop= render 'layouts/mobile_header'\n.container\n  - if @troop\n    - unless @troop.announcement.blank?\n      .row\n        .span12\n          .notice_box\n            = @troop.announcement\n\n  = bootstrap_flash \n  #the_modal.modal.hide.fade\n  #the_wide_modal.modal.hide.fade\n  #the_shizzle  \n    = yield :layout\n\n  = render 'layouts/footer'\n\n```\nThis is the original layout with application.js at the top. I encountered the error when I moved the include into the footer partial, like this:\n``` haml\nfooter\n.row\n    .span4= \"\u00a9 2008 - #{Date.today.year} TroopTrack LLC. All rights reserved\"\n    .span2= link_to 'Terms of Service', '/terms_of_service'\n    .pull-right\n      .span1\n        .left= image_tag('twitter.png')\n        .left= link_to 'Twitter', 'http://twitter.com/trooptrack', :target => '_blank'\n      .span1\n        .left= image_tag('facebook.png')\n        .left= link_to 'Facebook', 'http://facebook.com/trooptrack', :target => '_blank'\n      .span1\n        .blue.bold= link_to 'Privacy', 'privacy'\n  .row\n    .span12\n      .center TroopTrack is not affiliated with Boy Scouts of America or Girl Scouts of America.\n- if @troop.try :is_ahg_troop?\n  .row-fluid\n    .span12\n      .center= link_to image_tag('ahg_full_logo.jpeg'), 'http://ahgonline.org'\n= javascript_include_tag \"application\"\n= yield :scripts \n```\nI know there's lots of noise in that code, just wanted to be precise.\n. Thanks Nick. That was fairly stupid of me actually - sorry. I'm not really stupid. :) \nI'm sure that's also the cause of the multiple submits.\nI have put the application.js back in the head and turned turbolinks back on but I still get the occasional error message about an html template not being found even though all links to the actions I get error messages for are remote. I don't have this problem when turbolinks is not included. It's intermittent and not easily reproduced. Any ideas?\n. Grr. I was on a 1.0 version. Sorry. I'm going to deploy that tonight, assume it's the cause, and close this issue. If it continues to be a problem after I deploy it I will re-open an issue.\nThanks for your help Nick!\n. Just to follow up, I deployed the upgraded jquery-rails gem to prod last night and haven't seen the issue since. Thanks for your help @reednj77!\n. ",
    "satb": "Yes, that seems to be working. Sorry...I am still learning how this works.\n. I had to perform this ugly kludge in my session destroy.js.erb. I don't like it, but this is atleast getting the browser to give me the right authenticity token again\n$('meta[name=csrf-token]').attr('content', '<%= form_authenticity_token %>')\nI wish this was taken care of in turbolinks/rails without having to apply this kludge\n. Oh well!, I had to have \"data-turbolinks-track\"=>\"true\" even on the page specific script. Then it triggers download of ALL scripts/css again not just page specific ones. Maybe scope for improvement here\n. ",
    "chengguangnan": "I've setup an rails app that demonstrate this. I will put the link here later, maybe tomorrow. \n. @davydotcom , check out this.\nYou may not see any ads because your domain name isn't allowed, but you can see a blank box.\nNow click to anther page, the box is gone, although the new page has adsense. The expected result is a blank box always be there.\n\n. Hi @reed ,\nI removed the google.ads.LEADERBOARD line and it worked. Thank you.\nMy changes:\n-   <script src=\"//www.google.com/jsapi\"></script>\n+   <script src=\"https://www.google.com/jsapi\"></script>\n...\n-    id = options.format + '_' + container.id\n+    id = 'ads_' + container.id\n...\n-  'format': google.ads.LEADERBOARD,\n. Hi guys, further updates are moved to here.\n. jquery.turbolinks doesn't resolve my problem. jquery.turbolinks just overwrites the ready() function in jquery.  This has no control over non-jquery functions. \nI see that turbolinks works well if all the code are your own.  If you have 3-rd party codes like adsense, turbolinks doesn't handle that well.\nSo I wonder why can't we simulate DOMContentLoaded on page:change. So that we don't need to change any code at all?\n. ",
    "AstonJ": "Hi @reed @guangnan \nThanks for this solution! However there is one drawback, it adds 3 render-blocking javascript files which can slow the site down. I go from a pagespeed score of 93 to 84 when I add adsense via this method. \nWhat about doing something as simple as this? (There would be no need to add the script tag to the head then - which is what causes the slow down.)\n```\nadOne = ''\n// Adsense\n$(document).on 'page:fetch', ->\n  adOne = $('#ad_one').html()\n$(document).on 'page:change', ->\n   $('#ad_one').html(adOne)\n```\nWhere you have a div with and id of 'ad_one' that contains the adsense code.\nAny thoughts on this? I'm a JS noob so I might be missing something.\n. ",
    "leods92": "I think I've developed a good solution for the newest adsbygoogle.js script.\nFeel free to refine it.\nBasically I'm reseting all global variables set and used by Google AdSense script.\nIf one doesn't use this, after some pages being loaded ads will stop being shown. This is a must for websites running AdSense.\nAs I don't display ads on all my website's pages I opted for loading Google's script at the end of <body> instead of <head>. You might consider putting in <head> if your whole website is covered by it to better take advantage of Turbolinks. Moving to <head> might cause side effects my solution doesn't cover.\n``` javascript\nMyApp.Turbolinks.GoogleAds = {\n  reset: function() {\n    if (typeof adsbygoogle !== 'undefined') {\n      // It's okay to use forEach since browsers that don't support it\n      // don't support Turbolinks anyway. If browser doesn't support Turbolinks,\n      // its events (hence this) won't be triggered.\n      [\n        \"adk2_experiment\",\n        \"async_config\",\n        \"correlator\",\n        \"exp_persistent\",\n        \"iframe_oncopy\",\n        \"jobrunner\",\n        \"num_0ad_slots\",\n        \"num_ad_slots\",\n        \"num_reactive_ad_slots\",\n        \"num_sdo_slots\",\n        \"num_slot_to_show\",\n        \"num_slots_by_channel\",\n        \"onload_fired\",\n        \"persistent_language\",\n        \"persistent_state\",\n        \"persistent_state_async\",\n        \"prev_ad_formats_by_region\",\n        \"prev_ad_slotnames_by_region\",\n        \"pstate_expt\",\n        \"pstate_rc_expt\",\n        \"reactive_ads_global_state\",\n        \"top_js_status\",\n        \"unique_id\",\n        \"viewed_host_channels\"\n      ].forEach(function(val) {\n        delete window[\"google_\" + val];\n      });\n  delete window.adsbygoogle;\n}\n\n},\nenable: function() {\n    $(document).on(\"page:fetch\", this.reset);\n  }\n};\nMyApp.Turbolinks.GoogleAds.enable();\n``\n. @jpstokes It's just a namespace. I like to have a single namespace for the whole app and I also have another one for Turbolinks fixes. To fix your issue you just need to define those namespaces, for instanceMyApp = { TurboLinks: {} }. @tomasgregor Sorry for the delay in answering. Could you elaborate? I don't understand your question.\n. After some tests I can assert that anyone implementing this must set location manually.\nDo that by callingga('send', 'pageview', { location: '...' })`.\nIf you let GA script set it on its own it will set the first page browser loaded, the script caches that value.\nI suggest you setting location as Google suggests here.\nHere's the snippet pasted:\njavascript\nvar location = window.location.protocol +\n    '//' + window.location.hostname +\n    window.location.pathname +\n    window.location.search;\n. ",
    "jpstokes": "@leods92 Is the code you provided the whole solution? When I add it to my site I still don't get the ads to show up consistently. I've inserted it in the head after application.js is loaded.\n. Well, looks like I was getting an error says undefined MyApp. I changed \"MyApp.Turbolinks.GoogleAds\" to \"AdsenseFix\" and it seems to be working...I guess all the '.' was throwing it off.\n. Cool...thx.\n. ",
    "tomasgregor": "leods92 - thank you for the fix. To keep code structure clean I placed your code to a file required by application.js which is set download asynchronously and it works as well. Is there any reason to put the code in  or ?\n. @leods92  I meant you placed your script in the  tag and elaborated on placing it in the  as another option. In my Rails project I put the code in a separate file turoblinks-settings.js which is required by application.js. My question was whether there's a reason to put the script directly in the body or head tag or it can be uploaded with javascript_inlcude_tag.\n. ",
    "vysakh0": "The issue does not arise when a page is refreshed or reached directly through url. But arises, when I move on to a page (using turbolink \"get\"). When the form is submitted, the number of requests  varies every time from 2 to sometimes 12. This happens with all forms and all link_to where there is remote: true.\n. @segfault88 Ah! I exactly had it outside the head tag! thanks. \n. ",
    "segfault88": "Just thought I'd add some more information since I was having this exact problem too.\nTurns out I had stuck the <%= javascript_include_tag \"application\" %> tag outside the head (at the footer of the page. So on each turbolinks navigation the js would be loaded again (and the events bound again) so my remote form would submit as many times as I had navigated around. If I reloaded manually on the page with the form it would only submit once.\nSo check the location of your javascript tags.\n. Sorry, yes - you are right. I was trying to put in keywords (hoping to have the solution come up in Google), but what you wrote is probably better.\n. ",
    "danieldocki": "I have this issue and reproduce the issue https://github.com/danieldocki/turbo-links-issue-153\nForwards and back to generate multiple requests for TurboLinks, then try to register a User.\n. @YasuOza Oh Thanks ;)\n. ",
    "deepakmani": "Hi yasuoza,\nI'm seeing the same issue when submitting all forms with remote => true. It seems to have happened all of a sudden. I was wondering which version of jquery has your fix.\nI'm using the following versions:\ngem 'jquery-rails', '3.1.1'\ngem 'turbolinks', '1.1.1'\nand bootstrap 3\nI'm including the following in   of application.html.erb \n<head>\n  <title><%= full_title(yield(:title)) %></title>\n  <script src=\"/javascripts/jquery-2.0.2.js\"></script> <!-- For Lightbox -->\n  <script src=\"/javascripts/jquery-ui.js\"></script> <!-- For Progress Bar -->    \n  <script src=\"/javascripts/spin.js\"></script> <!-- Loading Spinner -->\n  <link rel=\"stylesheet\" href=\"http://code.jquery.com/ui/1.10.4/themes/smoothness/jquery-ui.css\">\n  <script src=\"/javascripts/bootstrap-dialog.js\"> </script> <!-- For Dialog box -->\n  <%= stylesheet_link_tag    \"application\", media: \"all\", \"data-turbolinks-track\" => true %>\n  <%= javascript_include_tag \"application\", \"data-turbolinks-track\" => true %>\n  <%= csrf_meta_tags %>\n  <%= render 'layouts/shim' %> <!-- I.E. shim --> \n</head>\nI've resolved this issue\nI was using a $('div').load('/route') inside a page and in the controller method was not rendering a partial and instead the whole page. So rails was loading all the assets inside the div and and in the  of the page which caused multiple versions of jquery added to the page.\n. ",
    "carlesjove": "Even though this issue is closed, just say that I got into this problem too, using Rails 4.2. Removing Turbolinks solved the issue. I tried to reproduce the situation in integration tests (using Capybara), unsuccessfully. It seems to happen only in the browser.\nMy app is really simple (yet) because I'm just starting to build it, so it's almost barebones, and even though it is a private project of mine, I wouldn't mind sharing the code base with any of you if this can help fixing the issue. \n. ",
    "johannesE": "It says here: https://github.com/kossnocorp/jquery.turbolinks\nIf you find that some events are being fired multiple times after using jQuery Turbolinks, you may have been binding your document events inside a $(function()) block. For instance, this example below can be a common occurrence and should be avoided:\n/* BAD: don't bind 'document' events while inside $()! */\n$(function() {\n  $(document).on('click', 'button', function() { ... })\n});\nYou should be binding your events outside a $(function()) block. This will ensure that your events will only ever be bound once.\n/* Good: events are bound outside a $() wrapper. */\n$(document).on('click', 'button', function() { ... })\nHope this helps..\n. ",
    "chloerei": "Oh, I forget there is a one-time bind method, it works. And I also bind page:restore to bind scroll when popstate.\n\"Do note that this of course means that you'll have a long-running, persistent session with maintained state ... pay additional care not to leak memory\" Could add some extra tutorials link for this? I think some people will worry about that like me. I googled some article about memory leaks: \nhttp://javascript.info/tutorial/memory-leaks\nhttp://www.ibm.com/developerworks/library/wa-jsmemory/index.html\n. How do you organize assets or script? Looks like multiple load jQuery or ujs.\n. @lepture Got it, I suggest do like this:\ncoffescript\nif doc = processResponse()\n  # ...\nelse\n  document.location.href = xhr.getResponseHeader('Location') || url\n. > page:receive the page has been fetched from the server, but not yet parsed\nI think trigger first is semantically. Although it's a redirect, not a page, but it's fetched from server, and not yet parsed.\n. Chrome 34.0.1847.116 issues.\nOpen a link with anchor, for example https://github.com/rails/turbolinks/pull/364#issue-31436343 , test in console:\n```\n\nhistory.length\n3\ndocument.location.href = document.location.href\n\"https://github.com/rails/turbolinks/pull/364#issue-31436343\"\nhistory.length\n4\n```\n\nCurrent url has been push to history, then click \"back\" button, chrome trigger a popstate event with current url, cause turbolinks could not restore correct page.\nUse Element.scrollIntoView() can avoid this issues, https://developer.mozilla.org/en-US/docs/Web/API/Element.scrollIntoView .\nI'm not sure if chrome will change this behavior later. \n. Chrome updated to 34.0.1847.132, issues still exists.\n. Chrome 35.0.1916.114, issues not exists. Not need to fix.\n. ",
    "palodelincak": "Thanks for your help!\nI thought it should work out of box. I'll try to hack these javascripts on my own. Thanks again for showing the right way.\n. ",
    "ellyliang": "cannot call methods on masonry prior to initialization; attempted to call method 'reload',why??\n. ",
    "woto": "Sorry for bad English. Hi, thanks for answer. I am sorry but i can't remember where i was need this. May be in text editor after making it's dirty and leaving page. I'll close this issue and reopen if proposed technique doesn't help me.\n. i've made some attempt to implement this, but it's some buggy https://github.com/woto/turbolinks\nMay be it's will be useful, don't know.\nSorry for bad English.\n. ",
    "cmer": ":+1: \n. +1\n. It seems like tagging the script tag with something like [script turbolinks-execute='always'] could be a decent solution. These could be executed every time they're encountered, rather than just one.\n. ",
    "willfults": "OK I found out that if you place this code in a js file\n    document.addEventListener('page:fetch', function() {\n        alert('fetched')\n    });\nIt runs once per page.  But if you place the same code in a partial that gets displayed in the body (with a script tag), and then move around your site, it may run more than once per page load.  Not sure if that part is a bug or a feature :) Still having issues with 3rd party libraries though.\n\n. Thanks reednj77 appreciate the help.   On a similar note regarding 3rd party js libraries, is google analytics compatible with turbolinks?  I saw an open issue a while back - https://github.com/rails/turbolinks/issues/26\nBut it seems like it got closed without any action.  I'm going to be playing with google analytics today and see if I can get that working w/ turbolinks but if there are any suggestions on how to get that working I'm all ears.\n. Alright got google analytics working.  All you need to do is include the google analytics code in a partial that is displayed on every page & also add this line of code in a js file....\n    document.addEventListener('page:change', function() { _gaq.push(['_trackPageview']) })\n. Found a solution - http://empact.posterous.com/running-olark-under-turbolinks\n. ",
    "aawilson": "Hey guys. We (Olark) kind of have a minor bit of bandwidth for something like this, but since it's probably going to be a bigger issue when Turbolinks becomes part of mainline Rails, we'd love to work with you guys. The posterous link above is gone, but the All-Seeing Eye of Google seems to have caught it:\nhttp://webcache.googleusercontent.com/search?num=20&site=&source=hp&q=cache%3Ahttp%3A%2F%2Fempact.posterous.com%2Frunning-olark-under-turbolinks&oq=cache%3Ahttp%3A%2F%2Fempact.posterous.com%2Frunning-olark-under-turbolinks&gs_l=hp.3...2482.2482.0.3024.1.1.0.0.0.0.185.185.0j1.1.0...0.0.0..1c.1.17.hp.4dcCj-7cPzs\nLet us know if you're plugging around on this and need any specific questions answered about the things you run into.\n. ",
    "Primigenus": "@aawilson I tried getting Olark working with (client-side) turbolinks. Here's the code I'm using: https://gist.github.com/Primigenus/5928718\nOn initial pageload (hard refresh with the browser), everything works. Clicking a link with turbolinks enabled works as well. However, after clicking the turbolink, I start getting lots of errors logged to the console from application.js. It doesn't appear to affect functionality of Olark itself, but I can't be sure, so I wanted to check. Either way, having a bunch of errors logged to the console isn't pretty, so it would be nice if we could work towards resolving that situation.\nHere's an idea of what kind of errors are being logged:\nUncaught TypeError: Cannot read property 'theme' of undefined application.js:395\nUncaught TypeError: Cannot read property 'strict' of undefined application.js:17\nUncaught TypeError: Cannot read property 'theme' of undefined application.js:395\n[framesocket] timed out while flushing to persistent storage application.js:344\nerror - getDetails Cannot read property 'strict' of undefined application.js:1\nUncaught TypeError: Cannot read property 'allowEndConversation' of undefined application.js:150\n. ",
    "GriffinHeart": "@reed we're using your solution and works awesome the only small detail is that using the back button breaks olark. Been trying to fix that but haven't had any success.\n\nI summed up that article here:\nhttp://reed.github.io/turbolinks-compatibility/olark.html\nIf there's anything you'd like me to add to it or change, let me know.\n. \n",
    "mitosch": "Hi there\nI saw this thread after trying to implement UserReport with turbolinks. Currently it is not possible to use it together.\nSo I thought about a generic solution:\n- Create an iframe within your turbolinks app pointing to a special layout without turbolinks\n- Put every third party application which doesn't support turbolinks or manual re-initialization into that iframe \n- Everytime a turbolinks page load is triggered (i guess it is \"page:load\" or \"page:change\"?) send a real page-reload to the iframe\nWhat do you think about this solution? Do you see some disadvantages?\nI'll try that on my app and leave the feedback in here. I guess there are a lot of third party tools which only handles the \"normal\" page reloads and are therefore not compatible with turbolinks, so a generic solution could be useful.\nThanks for feedback.\n. ",
    "erichmenge": "The other thought I have is that maybe visit() should be wrapped in a try/catch so that if anything fails we can still get the user on his or her way. This likely happens anyway for a normal link, but if you're calling Turbolinks.visit() within a script the user may end up clicking on something and getting no response.\n. Heh, don't recall closing this issue. Not sure how that happened.\n. ",
    "msievers": "I have a similar problem with current Opera 12.12 so I took the MDN code and moved it to CoffeeScript. PR is pending (https://github.com/rails/turbolinks/pull/174).\n. Thanks for your reply, works for me, so I close this in favor  of #175 \n. ",
    "WojtekKruszewski": "I seems to me that invalidating Turbolinks cache on session changes would be \"proper\" solution.\n. @kristianpd In scenario 2) on transition from A->B, shouldn't #resources items stay \"one\" and \"two\", due to keep parameter?\n. @kristianpd As I understand popstate, the user can return to any state in history, not just pop last one from the stack. This means the user might be switching from some page C which has completely different body to A, after navigating A->B->C. So it's not just matter of reverting one transformation.\n. Let's consider an example with partial replacement, if we implemented @Thibaut's proposal 4 (as I understand it):\nPage A:\nhtml\n    <body>\n    <nav>...</nav>\n    <main id=\u201ccontainer\u201d>I\u2019m page A</main>\n    <footer>\u2026</footer>\n    </body>\nPage B:\nhtml\n    <body>\n    <nav>...</nav>\n    <main id=\u201ccontainer\u201d>I\u2019m page B</main>\n    <footer>\u2026</footer>\n    </body>\nPage C:\nhtml\n    <body>\n    <p>Thank you</p>\n    </body>\nUser performs following actions:\n1. Turbolinks.visit(\u201c/page-b\u201d, change: \u201ccontainer\u201d)\n2. Turbolinks.visit(\u201c/page-c\u201d)\n3. popstate to state 1.\nOn transition from state 1. to 2. we cached whole body HTML and safely stored DOM node for #container. Now, going back from page C to A Turbolinks has no choice but to re-construct body from serialized HTML. Then, optionally Turbolinks could replace newly constructed #container with one stored in cache.\nWhen debugging problems with JS plugins I\u2019d rather not have to reason about some elements on a page being re-constructed from serialized HTML and some re-attached.\n\nProposal\nHow about we cache DOM nodes, but only for simple full-page transitions, with no change, keep params or data-turbolinks-permanent elements? In nutshell back to Turbolinks 2.5 caching in simple cases.\nIn case of partial replacement we cache neither DOM nodes nor serialized HTML (@Thibaut's proposal 1.) On popstate URL will be fetched anew.\nThis way \"plain\" web applications get speed up with Turbolinks without breaking \"back\" button behavior. And burden of solving problems falls on developers who opt-in to using partial replacement.\nAnd maybe if you're building something that more like an SPA, then you don't ever care about back button using cache and keeping input state that much?\n. ",
    "mirzadelic": "If not logged in, php redirect user to login page, but turbolinks just shows blank page.\n. No, PHP, but i thought that it will work with php as well ?\n. ",
    "samdunne": "Looking into this further I believe it's the fact Cloudflare is loading jquery on top of the site. But jquery.turbolinks doesn't seem to fix it as you can't select what order the cloudflare javascript stuff is loaded in\nMy suggested fix would be to turn off cloudflare javascript\n. Turning off Rocketloader and CDNJS seems to fix the issue. I only had CDNJS turned on and they are in the process of updating the libraries (according to themselves)\n. ",
    "kyleellman": "Good call. There's no point in trying to force Turbolinks into something it wasn't designed to do.\n. ",
    "Nerian": "Chrome version:  25.0.1364.99\nHere is one of the forms:\n``` ruby\n= simple_form_for(@user, :html => { :class => 'form-horizontal' }) do |f|\n  = error_notifications @user\n  = f.input :first_name, autofocus: @user.new_record\n  = f.input :last_name\n  = f.input :email, hint: 'Se enviar\u00e1 un email a esta direcci\u00f3n con la clave de acceso'\n  = f.input :active, as: :radio, hint: 'Los usuarios desactivados no pueden entrar en el sistema'\n.form-actions\n    = f.button :submit, class: 'btn-primary', :disable_with => t(\"simple_form.submitting\")  \n    = link_to t(\"buttons.cancel\"), users_path, class: 'btn'\n    = link_to t(\"buttons.reset_password\"), '', class: 'btn'\n```\n. Nope, just plain old form submission.\n. Yes the browser try a POST request. Here is the full example:\n- I go to the treatments form\nStarted GET \"/es/treatments/new\" for 127.0.0.1 at 2013-02-24 19:28:15 +0100\nProcessing by TreatmentsController#new as HTML\n  Parameters: {\"locale\"=>\"es\"}\n  MOPED: 127.0.0.1:27017 QUERY        database=eucalipto_development collection=users selector={\"_id\"=>\"512a53e9a1d24c6cd4000002\"} flags=[:slave_ok] limit=0 skip=0 batch_size=nil fields=nil (0.3159ms)\n  MOPED: 127.0.0.1:27017 QUERY        database=eucalipto_development collection=clinics selector={\"$query\"=>{}, \"$orderby\"=>{:_id=>1}} flags=[:slave_ok] limit=-1 skip=0 batch_size=nil fields=nil (0.3741ms)\n  Rendered shared/_error_messages.html.slim (0.0ms)\n  Rendered treatments/_form.html.slim (5.6ms)\n  Rendered treatments/new.html.slim within layouts/treatments (6.8ms)\n  Rendered shared/_top_submenu.html.slim (1.6ms)\n  Rendered shared/_flash_messages.html.slim (0.0ms)\n  Rendered layouts/application.html.slim (15.7ms)\nCompleted 200 OK in 29ms (Views: 27.2ms)\n- Submit it with correct info\nStarted POST \"/es/treatments\" for 127.0.0.1 at 2013-02-24 19:28:17 +0100\nProcessing by TreatmentsController#create as HTML\n  Parameters: {\"utf8\"=>\"\u2713\", \"authenticity_token\"=>\"+xN2QJdxOT8GJxSaq09zscfJw4ab9cQ6wRQeJvvy3tE=\", \"treatment\"=>{\"name\"=>\"dsvsd\", \"value\"=>\"2343\"}, \"commit\"=>\"Crear Tratamiento\", \"locale\"=>\"es\"}\n  MOPED: 127.0.0.1:27017 QUERY        database=eucalipto_development collection=users selector={\"_id\"=>\"512a53e9a1d24c6cd4000002\"} flags=[:slave_ok] limit=0 skip=0 batch_size=nil fields=nil (0.3521ms)\n  MOPED: 127.0.0.1:27017 QUERY        database=eucalipto_development collection=clinics selector={\"$query\"=>{}, \"$orderby\"=>{:_id=>1}} flags=[:slave_ok] limit=-1 skip=0 batch_size=nil fields=nil (0.5379ms)\n  MOPED: 127.0.0.1:27017 INSERT       database=eucalipto_development collection=treatments documents=[{\"_id\"=>\"512a5bc1a1d24c1a3c000005\", \"name\"=>\"dsvsd\", \"value\"=>2343, \"clinic_id\"=>\"512a53e9a1d24c6cd4000001\", \"_keywords\"=>[\"dsvsd\"], \"updated_at\"=>2013-02-24 18:28:17 UTC, \"created_at\"=>2013-02-24 18:28:17 UTC}] flags=[] (0.1299ms)\nRedirected to http://localhost:3000/es/treatments\nCompleted 302 Found in 5ms\n- Get redirected to the index\nStarted GET \"/es/treatments\" for 127.0.0.1 at 2013-02-24 19:28:17 +0100\nProcessing by TreatmentsController#index as HTML\n  Parameters: {\"locale\"=>\"es\"}\n  MOPED: 127.0.0.1:27017 QUERY        database=eucalipto_development collection=users selector={\"_id\"=>\"512a53e9a1d24c6cd4000002\"} flags=[:slave_ok] limit=0 skip=0 batch_size=nil fields=nil (0.3662ms)\n  MOPED: 127.0.0.1:27017 QUERY        database=eucalipto_development collection=clinics selector={\"$query\"=>{}, \"$orderby\"=>{:_id=>1}} flags=[:slave_ok] limit=-1 skip=0 batch_size=nil fields=nil (0.4270ms)\n  Rendered treatments/index.html.slim within layouts/treatments (0.6ms)\n  Rendered shared/_top_submenu.html.slim (1.4ms)\n  Rendered shared/_flash_messages.html.slim (0.0ms)\n  Rendered layouts/application.html.slim (14.9ms)\nCompleted 200 OK in 21ms (Views: 19.2ms)\n- A datatable request.\nStarted GET \"/es/treatments.json?sEcho=1&iColumns=2&sColumns=&iDisplayStart=0&iDisplayLength=10&mDataProp_0=0&mDataProp_1=1&sSearch=&bRegex=false&sSearch_0=&bRegex_0=false&bSearchable_0=true&sSearch_1=&bRegex_1=false&bSearchable_1=true&iSortCol_0=0&sSortDir_0=asc&iSortingCols=1&bSortable_0=true&bSortable_1=true&_=1361730497967\" for 127.0.0.1 at 2013-02-24 19:28:18 +0100\nProcessing by TreatmentsController#index as JSON\n  Parameters: {\"sEcho\"=>\"1\", \"iColumns\"=>\"2\", \"sColumns\"=>\"\", \"iDisplayStart\"=>\"0\", \"iDisplayLength\"=>\"10\", \"mDataProp_0\"=>\"0\", \"mDataProp_1\"=>\"1\", \"sSearch\"=>\"\", \"bRegex\"=>\"false\", \"sSearch_0\"=>\"\", \"bRegex_0\"=>\"false\", \"bSearchable_0\"=>\"true\", \"sSearch_1\"=>\"\", \"bRegex_1\"=>\"false\", \"bSearchable_1\"=>\"true\", \"iSortCol_0\"=>\"0\", \"sSortDir_0\"=>\"asc\", \"iSortingCols\"=>\"1\", \"bSortable_0\"=>\"true\", \"bSortable_1\"=>\"true\", \"_\"=>\"1361730497967\", \"locale\"=>\"es\"}\n  MOPED: 127.0.0.1:27017 QUERY        database=eucalipto_development collection=users selector={\"_id\"=>\"512a53e9a1d24c6cd4000002\"} flags=[:slave_ok] limit=0 skip=0 batch_size=nil fields=nil (0.2880ms)\n  MOPED: 127.0.0.1:27017 QUERY        database=eucalipto_development collection=clinics selector={\"$query\"=>{}, \"$orderby\"=>{:_id=>1}} flags=[:slave_ok] limit=-1 skip=0 batch_size=nil fields=nil (0.3278ms)\n  MOPED: 127.0.0.1:27017 COMMAND      database=eucalipto_development command={:count=>\"treatments\", :query=>{\"clinic_id\"=>\"512a53e9a1d24c6cd4000001\"}} (0.3471ms)\n  MOPED: 127.0.0.1:27017 COMMAND      database=eucalipto_development command={:count=>\"treatments\", :query=>{\"clinic_id\"=>\"512a53e9a1d24c6cd4000001\"}} (0.4401ms)\n  MOPED: 127.0.0.1:27017 QUERY        database=eucalipto_development collection=treatments selector={\"$query\"=>{\"clinic_id\"=>\"512a53e9a1d24c6cd4000001\"}, \"$orderby\"=>{\"name\"=>1}} flags=[:slave_ok] limit=10 skip=0 batch_size=nil fields=nil (0.7830ms)\nCompleted 200 OK in 9ms (Views: 6.9ms)\n- At this point I try to reload the page and I am prompted with a \"Do you want to resend the form?\". I say yes. \n```\nStarted POST \"/es/treatments\" for 127.0.0.1 at 2013-02-24 19:28:49 +0100\nProcessing by TreatmentsController#create as HTML\n  Parameters: {\"utf8\"=>\"\u2713\", \"authenticity_token\"=>\"+xN2QJdxOT8GJxSaq09zscfJw4ab9cQ6wRQeJvvy3tE=\", \"treatment\"=>{\"name\"=>\"dsvsd\", \"value\"=>\"2343\"}, \"commit\"=>\"Crear Tratamiento\", \"locale\"=>\"es\"}\n  MOPED: 127.0.0.1:27017 QUERY        database=eucalipto_development collection=users selector={\"_id\"=>\"512a53e9a1d24c6cd4000002\"} flags=[:slave_ok] limit=0 skip=0 batch_size=nil fields=nil (0.3998ms)\n  MOPED: 127.0.0.1:27017 QUERY        database=eucalipto_development collection=clinics selector={\"$query\"=>{}, \"$orderby\"=>{:_id=>1}} flags=[:slave_ok] limit=-1 skip=0 batch_size=nil fields=nil (0.3772ms)\n  MOPED: 127.0.0.1:27017 INSERT       database=eucalipto_development collection=treatments documents=[{\"_id\"=>\"512a5be1a1d24c1a3c000006\", \"name\"=>\"dsvsd\", \"value\"=>2343, \"clinic_id\"=>\"512a53e9a1d24c6cd4000001\", \"_keywords\"=>[\"dsvsd\"], \"updated_at\"=>2013-02-24 18:28:49 UTC, \"created_at\"=>2013-02-24 18:28:49 UTC}] flags=[] (0.1390ms)\nRedirected to http://localhost:3000/es/treatments\nCompleted 302 Found in 5ms\nStarted GET \"/es/treatments\" for 127.0.0.1 at 2013-02-24 19:28:49 +0100\nProcessing by TreatmentsController#index as HTML\n  Parameters: {\"locale\"=>\"es\"}\n  MOPED: 127.0.0.1:27017 QUERY        database=eucalipto_development collection=users selector={\"_id\"=>\"512a53e9a1d24c6cd4000002\"} flags=[:slave_ok] limit=0 skip=0 batch_size=nil fields=nil (0.3898ms)\n  MOPED: 127.0.0.1:27017 QUERY        database=eucalipto_development collection=clinics selector={\"$query\"=>{}, \"$orderby\"=>{:_id=>1}} flags=[:slave_ok] limit=-1 skip=0 batch_size=nil fields=nil (0.4160ms)\n  Rendered treatments/index.html.slim within layouts/treatments (0.6ms)\n  Rendered shared/_top_submenu.html.slim (1.4ms)\n  Rendered shared/_flash_messages.html.slim (0.0ms)\n  Rendered layouts/application.html.slim (63.3ms)\nCompleted 200 OK in 98ms (Views: 96.6ms)\nStarted GET \"/es/treatments.json?sEcho=1&iColumns=2&sColumns=&iDisplayStart=0&iDisplayLength=10&mDataProp_0=0&mDataProp_1=1&sSearch=&bRegex=false&sSearch_0=&bRegex_0=false&bSearchable_0=true&sSearch_1=&bRegex_1=false&bSearchable_1=true&iSortCol_0=0&sSortDir_0=asc&iSortingCols=1&bSortable_0=true&bSortable_1=true&=1361730530153\" for 127.0.0.1 at 2013-02-24 19:28:50 +0100\nProcessing by TreatmentsController#index as JSON\n  Parameters: {\"sEcho\"=>\"1\", \"iColumns\"=>\"2\", \"sColumns\"=>\"\", \"iDisplayStart\"=>\"0\", \"iDisplayLength\"=>\"10\", \"mDataProp_0\"=>\"0\", \"mDataProp_1\"=>\"1\", \"sSearch\"=>\"\", \"bRegex\"=>\"false\", \"sSearch_0\"=>\"\", \"bRegex_0\"=>\"false\", \"bSearchable_0\"=>\"true\", \"sSearch_1\"=>\"\", \"bRegex_1\"=>\"false\", \"bSearchable_1\"=>\"true\", \"iSortCol_0\"=>\"0\", \"sSortDir_0\"=>\"asc\", \"iSortingCols\"=>\"1\", \"bSortable_0\"=>\"true\", \"bSortable_1\"=>\"true\", \"\"=>\"1361730530153\", \"locale\"=>\"es\"}\n  MOPED: 127.0.0.1:27017 QUERY        database=eucalipto_development collection=users selector={\"_id\"=>\"512a53e9a1d24c6cd4000002\"} flags=[:slave_ok] limit=0 skip=0 batch_size=nil fields=nil (0.3369ms)\n  MOPED: 127.0.0.1:27017 QUERY        database=eucalipto_development collection=clinics selector={\"$query\"=>{}, \"$orderby\"=>{:_id=>1}} flags=[:slave_ok] limit=-1 skip=0 batch_size=nil fields=nil (0.3502ms)\n  MOPED: 127.0.0.1:27017 COMMAND      database=eucalipto_development command={:count=>\"treatments\", :query=>{\"clinic_id\"=>\"512a53e9a1d24c6cd4000001\"}} (0.4129ms)\n  MOPED: 127.0.0.1:27017 COMMAND      database=eucalipto_development command={:count=>\"treatments\", :query=>{\"clinic_id\"=>\"512a53e9a1d24c6cd4000001\"}} (0.4351ms)\n  MOPED: 127.0.0.1:27017 QUERY        database=eucalipto_development collection=treatments selector={\"$query\"=>{\"clinic_id\"=>\"512a53e9a1d24c6cd4000001\"}, \"$orderby\"=>{\"name\"=>1}} flags=[:slave_ok] limit=10 skip=0 batch_size=nil fields=nil (0.7331ms)\nCompleted 200 OK in 9ms (Views: 6.5ms)\n```\n. If I remove turbolinks:\nAfter submiting the form and being redirected, if I refresh the page, I still get the 'Do you want to resend the form' message, but when I visit other pages the behaviour it the normal one.\n. Here is a video where I show what happens with turbolinks enabled:\nhttps://dl.dropbox.com/u/834494/ScreenFlow.mov\n. Here is the controller's code:\nruby\n  def create\n    @treatment = @clinic.treatments.new(params[:treatment])\n    if @treatment.save\n      redirect_to treatments_path, flash: { success: \"Tratamiento creado\" }\n    else\n      render :new\n    end\n  end\n. If I change the redirect to:  redirect_to @treatment then it works. It no longer tries to do a POST on refresh. This is really weird, am I doing the redirect wrong?\n. Ah there you go. So Chrome was the culprit of this mischievous behaviour. \nThank you for your help, I appreciate it.\n. Yes. I disabled it and the error went away.\nHow did you know that one?\nThanks!\n. ",
    "cpuguy83": "Found a better(?) workaround.\nSubmit the form with js, then have the create action render create.js.erb, then handle the redirect in the view with:\njavascript\nTurbolinks.visit('<%= foo_path(@foo) %>');\nThis issue also had a horrible side-effect of breaking my font-awesome icons.\n. It turns them into square boxes like it can't find the font anymore, I don't ever see any issue crop up in the js console or rails logs, so I'm not 100% sure of what's happening, probably something to do with the post/put request that persists after the redirect\nThe issue does not occur when using the workaround as above.\n. Issue fixed here:\nhttp://trac.webkit.org/changeset/145735\nHave not tested with turbolinks.\n. ",
    "charliesome": ":+1: :tractor: \n. ",
    "bensmithett": ":+1:\n. ",
    "keithpitt": ":+1: \n. ",
    "mariovisic": ":+1: seems legit!\n. Love your work @reed ; Nice quick response :)\n. I think it's still important to make sure the first page load is as fast as possible for end users; you want to wow them when they come through the door. This addition will allow use to speedup the first page load for our users.\nIt should also be very little extra code, a single check to see if the script tag has the attribute.\nWhat do you think?\n. There are plenty of resources and benchmarks online which will show you that loading your javascript in the head slows down page load times. It matters especially when latency is high, on mobile devies for example or users outside of the US.\nSure you could add an external script loader but then you need to either inline 1KB or more JavaScript into your page or block until it downloads from an external source, i've also run into cross browser problems, for example head.js doesn't play too nice with older Internet Explorer.\n. Yes, but turbolinks re-executes any javascript in the body tag, so you're going to have to load all of your javascript each time a user clicks a link, which is going to be slow and problematic.\n. Yes, adding <script> tags to head will block the browser, there are some ways to get around this but most will have some downside to them\n. @YasuOza you can find some info about it here http://developer.yahoo.com/blogs/ydn/high-performance-sites-rule-6-move-scripts-bottom-7200.html\n. Awesome, thanks :)\nI've opened pull request #214  Closing this issue.\n. Sounds good, i've updated the changelog and updated the script selector. I tested the rack app and it still works fine :)\n. ",
    "matthieua": "No worries @reed :)\n. ",
    "benweint": "Thanks for the feedback! I've changed the name and added a note to the README about this callback.\nRegarding the triggering of this event after doing the resource freshness checks: I can seen pros and cons to each approach, but at least for my purposes I'd rather have a more accurate split between 'backend' and 'frontend' time by putting the 'end of backend time' marker earlier in the pipeline. In the case where resource checks trigger a full reload, the page:load event (which we're planning to hook into as well) won't fire, and we'll capture timings via our traditional pre-Turbolinks methods.\n. ",
    "samg": "This seems like a really useful addition to the turbolinks events.  Any idea when it might get merged?\n. ",
    "mala": "Yeah, check of extension is useful to prejudgment.\nSince hash fragment does not affect content-type certainly, removeHash is right.\nSome attack vectors will remain. \n/sample.csv.html\n/sample.csv?dummy.html\n/sample.csv/\n/some_api.html?format=raw\nWow, I don't want to think for every cases, complicated regexp is meaningless and bad.\nSo, check of content-type will be required and more important.\nOK: text/html, application/xhtml+xml, application/xml\nNG: text/plain, text/csv, text/html-sandboxed\n. Hmm, text/html-sandboxed was already removed http://www.w3.org/html/wg/wiki/ChangeProposals/text_html_sandboxed\nbut some another things may be defined as text/html-xxx \n\"text/html\".match(/^(?:text\\/html|application\\/xhtml\\+xml|application\\/xml)(?:;|$)/) // match\n\"text/html-xxxxx; param=text/html\".match(/^(?:text\\/html|application\\/xhtml\\+xml|application\\/xml)(?:;|$)/) // not match\n. Very good, no problem at content-type case.\nI can't judge for content-disposition case.\nProbably the check of content-type fully covers both.\n\"Content-Disposition: attachment\" should be used together with \"application/octet-stream\".\nThe other case is unspecified at RFC2616. It's only based on the specification of the browser. \nSo, \"attachment\" file which the user uploaded should not be distributed by text/html.\n. I wrote a patch https://github.com/rails/turbolinks/pull/197\nThe redirection by the Rails itself can be prevented.\nIt will not block mod_rewrite or other methods.\n. Thanks for your help.  I just updated pullreqest.\n. ",
    "frohoff": "It looks like the restriction of using Content-Disposition: attachment only with Content-Type: application/octet-stream set forth by http://tools.ietf.org/html/rfc2616 was lifted in http://tools.ietf.org/html/rfc6266 based on usage in the wild.\n\nAccording to RFC 2616, the disposition type \"attachment\" only applies to content of type \"application/octet-stream\".  This restriction has been removed, because recipients in practice do not check the content type, and it also discourages properly declaring the media type.\n\nApplications serving user-uploaded html files and issuing Content-Disposition: attachment and matching Content-Type: text/html headers (as per the updated spec) will still be vulnerable to XSS attacks unless additional checks for the Content-Disposition header in the response are added.\n. Function renamed, test case reordered, additional test case added, progress bar issue fixed, rebased into single commit.\n. My pleasure. Thanks.\n. renamed as suggested\n. moved as suggested\n. ",
    "alexeypetrushin": "+1 also have that problem, in my case the first page load time is also important.\n. Isn't it simpler to just move scripts to the bottom of page than bothering with loading it dynamically?\n. I know it :). My point was that it's simple and standard practice to put scripts into bottom of page (instead of bothering with dynamic loading) and it would be nice if turbolinks supported it.\n. The goal isn't to load full page faster, the goal is to load partially page faster - to have visible content (css + html) while scripts aren't uploaded yet.\nAlso, about the \"first paint\" - I'm not sure but it seems chrome has buffering, it doesn't fire the paint event if page content is small - i.e. testing should be done on real pages, not small html snippets.\n. No, I'm also can't came up with an efficient way to do that automatically. It's possible to mark elements with let's say data-persistent-scroll attribute, but it's kind of the same, not automatic.\nNot insisting on including it, having it would be nice, but having turbolinks small and simple is nice too.\n. Yes, it totally solves my problem.\n. I created testcase (use simple http server to host it, it won't work if loaded directly from file system).\na.html\nhtml\n<!DOCTYPE html>\n<html>\n  <head>  \n  </head>\n  <body>\n    <a href=\"b.html\">b</a>\n    <link rel=\"stylesheet\" type=\"text/css\" media=\"all\" href=\"style.css\" data-turbolinks-eval=\"false\">\n    <script src=\"turbolinks-1.3.0.js\" data-turbolinks-eval=\"false\"></script>\n  </body>\n</html>\nb.html\nhtml\n<!DOCTYPE html>\n<html>\n  <head>  \n  </head>\n  <body>\n    <a href=\"a.html\">a</a>\n    <link rel=\"stylesheet\" type=\"text/css\" media=\"all\" href=\"style.css\" data-turbolinks-eval=\"false\">\n    <script src=\"turbolinks-1.3.0.js\" data-turbolinks-eval=\"false\"></script>\n  </body>\n</html>\nstyle.css\ncss\nbody {color: red;}\n\n. I proposed what's already done, didn't check latest updates, feel stupid, sorry.\n. > Even if the user doesn't interact with the page, there is a noticeable flicker\nI also see it, Maybe Turbolinks should check if the page retrieved from the server is the same as from cache and in that case not update DOM.\n. ",
    "inspire22": "Maybe I'm missing something, but: \nIf you really want to delay the downloading of the javascript file until after domready, just add a bit of script in the header to load it dynamically by appending a script tag after domready.\nBut I don't think it's necessary - personally I didn't notice a huge impact from the downloading of the JS code from the header (don't do premature optimization, actually benchmark it!) - and my scripts are quite large.  \nIf you're executing slow javascript in your code wrap it in a $(document).ready and it should solve your problem.\n. This article has me convinced we need something like this after all.  As it mentions, modern pipelining improves the situation, but it is still there (especially on mobile, which is a pretty big % these days)\nhttp://samsaffron.com/archive/2012/02/17/stop-paying-your-jquery-tax\n. works, meant to reply earlier\n. Since this comes up in search, replying that rails4 I think handles setting the referer properly automatically.  If you're using rails 3, you can get the \"turbolinks referer\" from request.env['HTTP_X_XHR_REFERER']\n. The stack trace doesn't include my app at all, which is strange.\nIt appears to be a request that resulted in a redirect to a page with a space in it.  Usually this just works, and I don't replace spaces with %20 automatically.   Looks like the turoblinks checking of URI.parse doesn't escape spaces, while the main rails redirects probably do?  Or browsers just have been doing the right thing..\nInspecting the logged request is:\n@body=[\"<html><body>You are being <a href=\\\"http://mysite.com/stories/by/sky black\\\">redirected</a>.</body></html>\"]\nSince it only happens when turbolinks is handling the redirect it's tricky to test/duplicate\nI'll try overloading my redirect_to to replace spaces with %20, to see if that fixes the problem.\n. The redirect location in my site is unfortunately very difficult to \nverify, but I agree that change should fix it. Thanks! I'll keep you \nposted if I see any more errors pop up in production.\nNick Reed wrote:\n\nThis should be fixed with 0fca317\nhttps://github.com/rails/turbolinks/commit/0fca317ef1aec1c91d74c08ab0c0b546d5a0280c. \nCan you verify?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rails/turbolinks/issues/227#issuecomment-18716345.\n. Yeah - that causes warnings with SSL pages though.  But if it's easy for you then that works.  If you set the css backgroundImage to what it already was, it'll show too:\n\n$('.my_image_div').loop (e) ->\n    return unless e.attr('style') and e.attr('style').indexOf(\"url(\") > -1\n    url = e.attr('style').match(/url\\((.*)\\)/)[1]\n    e.css 'backgroundImage', \"url(\" + url + \")\"\n    console.log \"fixed bg image\", url\n. Glad to hear it helped! :)\n. I'm having the same issue, it is driving me nuts!\nI came across the \"vue\" project having the same issue, they said: \nThis is actually a bug in IE10/11: when a <textarea> with placeholder attribute is cloned, the clone's value is set to the original's placeholder. I implemented a workaround in Vue's template parser to deal with this.\n. here's the workaround I'm using until this is fixed - I call this at page:change  (coffeescript)\nfix_ie10_placeholder = ->\n  $('textarea').each ->\n    if $(@).val() == $(@).attr('placeholder')\n      $(@).val ''\n. ",
    "vincentwoo": "+1\n. ",
    "marianposaceanu": "I was thinking about the same thing: yes, subsequent page loads do read the JavaScript files from cache but the first page load can be still slow (i.e. anywhere from 50ms..2s) this defeats the purpose of the lib especially on mobile devices.\n. @YasuOza  @mariovisic I just did the Page Benchmarker test and the results are clear : in Chrome there's no difference whatsoever i.e the time to first paint it's actually better on the version with the JS at the top. \n \nAt least in Chrome it seems the myth is busted and going on a leap here, probably on most recent browsers there wouldn't be a noticiable impact except maybe the mobile ones. \n. ",
    "fshowalter": "Done. \n. ",
    "SleeplessByte": "I currently have this issue in Chrome for Windows. Same line as @caarlos0.\nversion 30.0.1599.69 m.\n. ",
    "ponny": "I've also tried the 'jquery-turbolinks' gem and the 'twitter-bootstrap-turbo' gem but neither fixed it.\n. It works perfectly now. Thanks a bunch, Reed :beers: \n. Using same example from my previous issue: https://github.com/rails/turbolinks/issues/201\n. Same thing happens with Ctrl+Click on Windows (7) and Linux (Ubuntu).\n. ",
    "timruffles": "Yes that makes sense. Still, unless the spinner had something to clean up you could just rely on it being GCd once removed from the DOM. Will change the example as proposed, I think it's still fine for giving an intuition.\n. nice - done. will be using that in future elsewhere\n. ",
    "woniesong92": "Using spin.js\n``` javascript\n        (function(){\n            var spinner = makeSpinner();\n            $(document).on(\"page:fetch\", alert(\"start\")); // startSpinner(spinner, document.getElementById('loading_mark')));\n            $(document).on(\"page:receive\", alert(\"end\")); // stopSpinner(spinner);\n        }());\n    function makeSpinner() {\n        var opts = {\n          lines: 7, // The number of lines to draw\n          length: 20, // The length of each line\n          width: 10, // The line thickness\n          top: 'auto', // Top position relative to parent in px\n          left: 'auto' // Left position relative to parent in px\n      };\n        var spinner = new Spinner(opts);\n        return spinner;\n    }\n\n    function startSpinner(spinner, target) {\n      spinner.spin(target);\n    }\n\n    function stopSpinner(spinner) {\n        spinner.stop();\n    }\n\n```\nThe alerts seem to pop up simultaneously. Am I listening to the page events correctly?\nI'm using the latest version, 1.2.0\n. ",
    "meleyal": "Here's an outline of the app code. Basically we are using ready, page:load, and page:restore to do all the JS initialisation (on normal page load, turbolinks page load, and turbolinks cached page load respectively), and page:change to do the cleanup / teardown.\n``` coffeescript\n$(document).on 'ready page:load page:restore', ->\n  # attach Backbone views to elements on the page...\n$(document).on 'page:change', ->\n  # remove Backbone views so they can be garbage collected...\n```\nAnd here's an approximate stack trace of the turbolinks code causing the issue:\n``` coffeescript\nfetchHistory()\n  cacheCurrentPage() #\u00a0<- here the page is cached\n    if cachedPage\n      changePage(cachedPage) ... \n          triggerEvent 'page:change' # <- here views are removed\n```\nSo when page:change is triggered, all the views and the elements they were attached to get removed, this is the way Backbone does view cleanup, see http://backbonejs.org/#View-remove\nAnd while page:change happens after the page is cached, any changes we make to the document (e.g. removing elements) will also affect the cached page because it's a reference and not a copy, which I would say is unexpected / unpredictable behaviour and therefore a bug.\n. What about not exporting the EVENTS object and instead exporting a method (Turbolinks.events()?) that returns an array of the values?\n. Created a separate pull request that includes the EVENTS object from @rmosolgo, plus an .events() getter, see #404 \n. ",
    "balvig": "Possibly this is a bit out of scope and/or crazy but I am currently working on a plugin for turbolinks recreating the iOS7 style sideways swipe when changing pages and am running into a similar issue. \nWould love to hear if you have any ideas for workarounds or just open my eyes to whether this is a terrible idea in the first place :)\nTo achieve the effect you basically need to have the current page as well as the next page on screen and then animate the two. I was testing out adding to the turbolinks code a way to override the default behavior of changePage() (replacing the entire dom) via a custom event:\ncoffee\nif triggerEvent('page:replace', html: body)\n  document.documentElement.replaceChild body, document.body\nThe plugin  would then hook into this event, append the new content to the current content, do a CSS animation, remove the old content, and finally return false thus bypassing the default replaceChild()  (simplified code):\n``` coffee\n$(document).on 'page:replace', (e) -> \nnewContent = $(e.originalEvent.data.html).find('#content')\n  oldContent = $('#content')\noldContent.after(newContent)\nnewContent.addClass('transition in')\n  oldContent.addClass('transition out')\nnewContent.on 'webkitTransitionEnd', ->\n    newContent.removeClass('transition in')\n    oldContent.remove()\nfalse\n```\nThe problem is that since oldContent is a reference to part of document.body which is shared with the cache, it actually removes that div from the cached page too, even though the animation happens after cacheCurrentPage() is run! If you ever have a spare moment I would love to hear your thoughts on this.\n. Thank you for the quick reply!\nYeah...the use case for me is a UIWebView - containing most of the UI - within an app. As far as I can tell UIWebViews currently don't support the swipe, thus the jumping through hoops!\nAlso, since everything including the header and tab bar of the app is rendered in HTML I found myself wanting to control when to have the swipe animation (for example popping through a stack of nested pages vs clicking tabs) and what part of the page to animate (ie the tab bar moving sideways to reveal a new tab bar looks a bit strange), which I could do with a custom CSS-based transition but not using the built-in swipes.\nI guess this is what I get for going to such lengths to avoid implementing everything in Objective-C :)\n. I of course don't know what I'm talking about but it looks like the Basecamp app uses the native NavBarController to pop in separate individual UIWebViews for each page and also handle the navigation and swipe animations (although I may be missing something!) \nIt's a great workaround I think, meanwhile I'll be dreaming of a world where everything can be done in HTML :)\nAnyway, thanks for the discussion! I'll explore what other options there are. :+1: \n. Flickering seems to appear on elements using -webkit-overflow-scrolling: touch; on iOS (regardless of whether the page has images or not) as well. Quite noticeable when using something like https://github.com/maker/ratchet, where the whole page is basically contained in a scrollable div. Not sure why this happens but thought I'd share as @smidwap suggested :)\n. ",
    "trungpham": "has anyone tried using turbolinks on mobile devices? horrible experience navigating back and forth between pages. iOS7 caches the previous page with the old scroll position. then turbolinks rerenders the page and reset the scroll to the top.\n. What about forward button? I want to know this as well. \n. can we merge this into master? desperately need this fix to get the Facebook JS SDK working with the back button.\n. ",
    "andruby": "@trungpham I've been a little frustrated by that behaviour as well. When navigating back using Chrome on OS X, the same rerender and scroll reset happens. Have you found a solution or workaround for this?\n. ",
    "vedant1811": "thanks @alexeypetrushin for this wonderful solution\n. ",
    "roman-zaharenkov": "yeah, you are right, I am not sure I wanna dispose my widgets if page will be reloaded anyway. But thanks for attention, I think I can use 'page:receive' event.\n. ",
    "marcamillion": "I don't think so. Well. It may just be me - but I had to look it up to see\nwhat was right.\nAt first I thought that you had to declare a data attribute....I.e. like\ndata=data-no-turbolink.\nPlus I tried a few others and they just drove me crazy.\nSo I don't see the harm in giving an explicit HTML example. What's the\nproblem with it?\nOn Saturday, April 20, 2013, Nick Reed wrote:\n\nI'm not sure the explicit example is necessary, but I do think the phrase\n\"mark a div with data-no-turbolink\" is a little ambiguous. If we fix it\nwith something like \"add a data-no-turbolink attribute to a div\", do\nyou think it'd be clear enough so that we wouldn't need the example?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rails/turbolinks/pull/208#issuecomment-16710391\n.\n\n\nMarc Gayle\nwww.marcgayle.com\nwww.twitter.com/marcgayle\n. Yes.....that looks good to me.\nThe important part is just showing the way that data-no-turbolink is used\nwithin the div.\nBut adding the extra links does make sense.\nMarc Gayle\nwww.marcgayle.com\nwww.twitter.com/marcgayle\nOn Sat, Apr 20, 2013 at 5:27 PM, Nick Reed notifications@github.com wrote:\n\nWell, your first thought was correct: data-no-turbolink is a data\nattribute since it starts with data-. I still think you wouldn't have had\na problem if the readme specifically referred to it as an attribute, but if\nyou insist on the need for an example, let's at least make it more useful.\nLet's change it from an example showing \"how to add an attribute to an\nelement\" to one that illustrates the attribute's effect. Maybe something\nlike this:\nHome (via Turbolinks)\nHome (without Turbolinks)\nThoughts?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rails/turbolinks/pull/208#issuecomment-16712464\n.\n. I would love to....but not quite sure how.\n\nI updated this via Github's web interface - not from a local push.\nHow do I update it?\nEdit: When I go to the actual file in the commit, the 'Edit' button is greyed out. Do I have to delete it and create a new one?\n. Ahh...cool.\nLet's get this accepted and merged :)\n. No prob. Thanks for accepting!\n. @oppih Should this go within the document.ready() function or outside of it? Neither seem to work for me. Rails 4.1.6 and the latest TL gem.\n. The weird thing is that I am experiencing this same issue with Turbolinks 5.0.1 in a Rails 5.0.1 app.\nShouldn't this fix be applied there, if it indeed fixed it?. ",
    "hayesr": "Gotcha. It also seems like pages are only retrieved from the cache when the back-button is used. How close is this:\nLoad a fresh version of a page from the server:\n- page:fetch starting to fetch a new target page\n- page:receive the page has been fetched from the server, but not yet parsed\n- page:changed the page has been parsed and changed to the new version\n- page:load is fired at the end of the loading process.\nRestore a cached page from the client-side cache:\n- page:change page has changed to the cached page.\n- page:restore is fired at the end of restore process.\nTurbolinks caches 10 pages. Pages are retrieved from the cache when the browser back button is used.\nSo if you wanted to have a client-side spinner \u2026\n. Ah, that makes sense. Now I have another question: in my reading of the source and experimenting so far it seems that on loading the first page of the app no Turbolink events are fired. So what I've been doing is listening to both, ie $(document).on 'ready page:load', -> \u2014it works, but is this common/acceptable practice? If so, perhaps there's a place for examples on that here as well.\nThe copy thus far:\nEvents\nWith Turbolinks pages will change without a full reload, so you can't rely on DOMContentLoaded or jQuery.ready() to trigger your code. Instead Turbolinks fires events on document to provide hooks into the lifecycle of the page:\nLoad a fresh version of a page from the server:\n- page:fetch starting to fetch a new target page\n- page:receive the page has been fetched from the server, but not yet parsed\n- page:changed the page has been parsed and changed to the new version\n- page:load is fired at the end of the loading process.\nTurbolinks caches 10 of these page loads. It listens to the popstate event and attempts restore page state from the cache when it's triggered. That means when the browser back and forward buttons are pressed, or when history.back(), history.forward(), and history.go() are used the following process happens:\nRestore a cached page from the client-side cache:\n- page:changed page has changed to the cached page.\n- page:restore is fired at the end of restore process.\nSo if you wanted to have a client-side spinner, you could listen for page:fetch to start it and page:receive to stop it.\ndocument.addEventListener(\"page:fetch\", startSpinner);\ndocument.addEventListener(\"page:receive\", stopSpinner);\nDOM transformations that are idempotent are best. If you have transformations that are not, hook them to happen only on page:load instead of page:change (as that would run them again on the cached pages).\n. I think you're right about the verbosity. Should I submit a PR for this?\n\u2026\nTurbolinks caches 10 of these page loads. It listens to the popstate event and attempts restore page state from the cache when it's triggered. When popstate is fired the following process happens:\n\u2026\n. ",
    "alex88": "Uh ok got it, and is there a way to override this behaviour?\n. Uhm ok, I think I'll fork it. Thanks anyway\n. ",
    "shlima": "Thanks!\n. Ops, it happens when using turbolinks with lazyload jQuery plugin \n. Yes, it is\n. ",
    "sindrenm": "Glad to help! :smile: \nAnd yeah, it made me wonder for a little while, but then I saw that the other events were written like \"fetch\" and \"load\" etc., so I figured I'd take a look into the source. :wink: \nThanks for merging!\n. ",
    "k1w1": "@YasuOza I have confirmed that your commit fixes the issue for me too. Thanks.\n. Your reply made me realize that I probably didn't do a fair test. I tested only on my development system which is an order of magnitude slower than the production system. I deployed Turbolinks 2.2.0 to the production environment with the transition cache disabled, then enabled it manually in my browser. Now I am seeing what you described: pages appear instantaneously, and the real page load in the background is fast enough that there is no chance to start interacting with the page and causing the problems I described.\nI need to do some more testing, but so far it does seem like a noticeable improvement (which is surprising because I thought our page loads were already very fast - sub 100ms in most cases).\nThe flickering that I was seeing after the real page load in development doesn't appear in production, but I am not completely sure why. It might be due to the different cache settings of images.\n. The flicking that I see in development is with the images, and it does appear to be because the images are not cached. In production the images are cached and don't flicker when the page is loaded (at least in Chrome which is all I have tested so far).\n. Sorry, I deleted the comment because I realized that I might be misunderstanding how turbolinks is supposed to work. In this particular case it is possible to get to the same URL via a redirect, and also from a link. I am not 100% sure yet whether it is working or not. I will post again if I can more clearly reproduce a problem.\n. ",
    "blessedone": "just wanted to mention that \"better popup blocker\" actually has a option to disable everything it does for this problem just go tot he settings and scroll down to \"Blocked Functions\"  then \nunckeck \"Automatically moving & resizing windows\"\nand ding fries are done!\nyou can unblock any of the blocked functions as its fully configurable ... dont hate on something you dont understand\ni <3 / love  Better popup blocker its meant to be as aggressive as you need it to be\nwhich is what i need most of the time\ni hope this helps everyone\n. ",
    "keram": "done, with even better refactoring .) \n. Sorry for that, it was because I needed refactor a bit code to understand how to correctly fix it at first.\nIf it will be need  resend again also PR #225 let me know.\nand thnks for merge\n. no, xhr.onerror handle errors only whch happen in way from client -> server,\n(for example if requested domain is unaccessible).\n. hello :),\nagreed, user feedback is one of the biggest challenges to the use of turbolinks.\nMy arguments/opinions against change url before resource loading are:\nUrl change should happen only if there would be standard indicator of resource loading in browser. Without it, may in oposite be confusing for user see content of pageX with url X on url Y. (especially on slow loading resource).\nIt require more effort treat edge cases, like F5 (current page reloading when loading next page via turbolinks), https://github.com/rails/turbolinks/blob/master/lib/assets/javascripts/turbolinks.js.coffee#L165 etc.)\nIt's seem to be confusing to me even when is required full reload. \nIt mess implementation with presentation.\nAnd for url change after successfull resource load:\nIt's more logical.\nNicely simplifies the code.\nWhen response is fast enough user will not even notice diference.\nIt is better when is required full reload (error or assets change..)\nLoading feedback must implement application developer. \nMy suggestion is show custom loading indicator and change cursor with rule cursor: progress; etc.\nFor that I think that current solution is unnecessarily (require more effort than is good) and should only be present if we had data from user testing that would demonstrate its necessity.\nMake user testing with focus on this issue and get relevant data is best idea to near future, anyway.\n. @reed thank you, comments incorporated.\nI do not like work with global objects if it is not necessary, for that I tried maked xhr local in processResponse. \nAlso expression state?.turbolinks looks to me too cryptic, but I can live with that :)\nI have another suggestion; what would you say, if we put to method processResponse only what it really needs? \nImplementation could looks like this:\n``` javascript\nprocessResponse xhr.responseText, xhr.getResponseHeader('Content-Type'), xhr.status\n...\nprocessResponse = (text, type, status) ->\n  clientOrServerError = ->\n    400 <= status < 600\nvalidContent = ->\n    type.match /^(?:text\\/html|application\\/xhtml+xml|application\\/xml)(?:;|$)/\nextractTrackAssets = (doc) ->\n    (node.src || node.href) for node in doc.head.childNodes when node.getAttribute?('data-turbolinks-track')?\nassetsChanged = (doc) ->\n    loadedAssets ||= extractTrackAssets document\n    fetchedAssets  = extractTrackAssets doc\n    fetchedAssets.length isnt loadedAssets.length or intersection(fetchedAssets, loadedAssets).length isnt loadedAssets.length\nintersection = (a, b) ->\n    [a, b] = [b, a] if a.length > b.length\n    value for value in a when value in b\nif not clientOrServerError() and validContent()\n    doc = createDocument(text)\n    return doc if doc and !assetsChanged(doc)\n```\n. > Also, I was saying that the return null at the end of processResponse should be changed to return, not removed entirely. \nOriginally I put there return null, make it more obvious that  if doc was not created is returned falsey value. \nReturn null had more sense for me than return false or undefined.\nBut as you suggested remove null, then I remove it entirely, because is it equal returning undefined which is there by default.\nI hope nothing more prevents merge, and other ideas for improvement I will address in future PR.\n. > I disagree. The difference between fetching from the server or the cache is an ajax request, and the page:fetch and > page:receive events are there to act as bookends for the ajax request. \nYou are right, implementation of page:before-change on popstate will solve my problem. Then I just add another line in init script:\n``` javascript\n    doc.on('page:fetch', spinner_on);\ndoc.on('page:receive', clear_ui);\n*doc.on('page:before-change', clear_ui);*\ndoc.on('page:load', reload_ui);\ndoc.on('page:restore', reload_ui);\n\n```\nwhich will be only another duplication as it is with 'load' and 'restore' events. \nI think ajax request is only implementation detail of retrieving data and these events can be abstracted from that.\nAnother point:\nOne day, someone decide implement new feature: keep pages in browser localStorage for future user visit. \n(And I like this idea already for some usecases :)). \nWhat events should be triggered on that? :)\nI would rather go in oposite direction and make 'page:restore' event obsolete in favor of 'page:load', \nand deal only with these three events ('fetch', 'receive', 'load') in all circumstances. :)\nI'm also open to get feedback if there are some drawbacks which I am not aware at this moment.\nSo even if you decide go with your solution, please keep this here open for while, to get opinions from others.\n. In this case that can be done, if you wish.\nBut in general I have the oposite opinion on inline assigments in conditions, because then someone may try write something like this:\nelse if invalidContent() or assetsChanged (doc = createDocument xhr.responseText) \n(fully: https://github.com/rails/turbolinks/blob/master/lib/assets/javascripts/turbolinks.js.coffee#L170-L174)\nwhich literally hurts\n. ",
    "troelskn": "You're right, it doesn't break as much as it just takes over. I suppose it's not much different from the conflict there might be between http-caching and turbolinks. For now, I handle this with a conditional in my code, testing for the browser-agent. Maybe a mention in the documentation would be appropriate though?\n. ",
    "Peeja": "Cheers! :beers: \nThanks for this!\n. The assets aren't changing in production, but it breaks in development.\nIs it possible to instead window.history.back() and then window.location.href = rather than window.reload()?\n. ",
    "markevich": "Does browser add # to your url on link clicks? If so, issue #256 may be the answer.\nTry to prevent default events on your link. \njavascript\n$('.js-someaction').on 'click', (e) =>\n      e.preventDefault();\n. I think that bug in this event listener \n``` coffescript\nwindow.addEventListener 'popstate', (event) ->\n    state = event.state\nif state?.turbolinks\n  if pageCache[state.position]\n    fetchHistory state.position\n  else\n    visit event.target.location.href\n\n, false\n```\nif state?.turbolinks is false than nothing happens\nevent.state is null on popstate with hash location\n. Does Turbolinks push new state on hash changes? If not, this may be the answer why popstate event doesn't have state.\n. Yea. Did you try to use Turbolinks with Angular which use push state for routing? Everything just blows up. So every time we need to write hacks for maintaining turbolinks state in history. This is so awful =(. \nWe really need some kind of public function for changing history state without breaking turbolinks logic. @DohanKim , please polish and share your code, it may be very helpful for other users.\n. ",
    "tadast": "This is no longer just canary problem. 29 is in beta now.\n. ",
    "eljojo": "I see,\nmaybe we could check if the state has the turbolinks property and at the same time the pageCache is empty.\nWe would need a clean way to get the length of the pageCache object, though.\n. Well, my patch does fix it,  But, as stated, if they pull #231 it would stop working and to be honest I haven't had time to work on top of that one. \nFeel free to use https://github.com/eljojo/turbolinks/tree/cache-fix\nI'm going to keep it there until this gets fixed in master. I'll comment here when I remove it. \n. ",
    "ajb": "FWIW, just started seeing this once my Chrome updated. Chrome 29.0.1547.22, latest Turbolinks. Pretty unnerving... what's the status of a fix?\n. This is what I'm doing. Much simpler:\ncoffeescript\nmsg = 'You have unsaved changes. If you leave this page, you will lose those changes!'\n$(window).bind 'beforeunload', -> msg \n$(document).on 'page:before-change', -> confirm(msg)\n. thanks reed, done!\n. :+1: -- can we get an updated status/reason for exclusion on this? This feature is useful to me in another way -- for appending items to a list via AJAX.  The server responds with redirect_via_turbolinks_to, but the scroll position stays the same.\n. Thanks @Thibaut and everyone!\n. Sweet, thanks reed!\n. :-1: on setting the z-index inside of the Turbolinks lib. Turbolinks should not make assumptions about your CSS.\n. I would humbly suggest https://github.com/rails/turbolinks/pull/422 instead.\n. Oooof, alright. Thanks for the consideration.\nOn Tue, Nov 4, 2014 at 12:49 PM, David Heinemeier Hansson \nnotifications@github.com wrote:\n\nClosed #422 https://github.com/rails/turbolinks/pull/422.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rails/turbolinks/pull/422#event-188176981.\n\n\nAdam Becker\n510.928.9111\n@AdamJacobBecker\n. classList doesn't exist in older browsers, it appears.\n. Whoops, duplicate of #426.\n. /cc @reed @javan \nDon't mean to bother y'all on the weekend, but since the progress bar is in the docs and not marked as \"alpha\" or anything, this might be considered a severe bug.\n. Additionally, it might be great to figure out some sort of automated testing that would prevent against this in the future. \n. Can you clarify the reason for inclusion of elementselector in the first\nplace?\nOn Friday, December 5, 2014, Nick Reed notifications@github.com wrote:\n\nThe way the class is written, @elementSelector can be any element, and\nyour patch assumes it will always be html. Even though html is the only\nelement used in the code, you should still update your patch to allow for\nother elements. Something like this would work:\n_createCSSRule: ->\n  \"\"\"  #{@elementSelector}.#{className}#{if @elementSelector is 'html' then ' body' else ''}::before {\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rails/turbolinks/pull/437#issuecomment-65867512.\n\n\nAdam Becker\n510.928.9111\n@AdamJacobBecker\n. Alright, updated. Maybe @javan could clear up the elementSelector question?\n. Thanks @javan, that makes sense.\nStill, I would recommend adding some kind of warning to the README. As the code currently stands, enabling the progress bar will completely break your website on Safari 6. \n. Here's a (very) isolated test case:\nhtml\n<!doctype html>\n<html>\n<head>\n<style>\nhtml::before {\n  content: '';\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 2000;\n  background-color: #0076ff;\n  height: 3px;\n  opacity: 1;\n  width: 50%;\n}\n</style>\n</head>\n<body>\n  <p> This is the body </p>\n</body>\n</html>\n. Actually, it appears that you might be mistaken with regard to the animation not finishing because of the <body> replacement: \n\nFeel free to take a look, we're running my fork: https://screendoor.dobt.co/dobt\n. I don't mean to be demanding of anyone's time, but there's a bunch of folks out there using the progress bar who probably don't know that their sites are totally borked in Safari 6.\n. That's the strangest, I'm seeing different behavior on Yosemite + Chrome 39.0.2171.71:\n\nslightly higher quality link\n. Please try out the included PR. I've just tested it with @speed = 1000 and it's still working properly. \n. I would suspect that it has to do with the fact that the <html> element is the one that holds the turbolinks-progress-bar class, which lets the <body> element be replaced without affecting the animation.\n. Nice find, lgtm!\n\n. Awesome, cheers!\nOn Monday, December 8, 2014, Javan Makhmali notifications@github.com\nwrote:\n\nThanks for your help and [image: :eyes:], @ajb https://github.com/ajb!\nI just cut a new release.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rails/turbolinks/pull/440#issuecomment-66123573.\n\n\nAdam Becker\n510.928.9111\n@AdamJacobBecker\n. ",
    "dnagir": "Thanks @reed.\nBut unfortunately what you are suggesting can't work in my case.\nThe styles are not regular assets. The embedded styles are generated dynamically based on user's details.\nThus moving them into the rest of the assets is just impossible.\nThere is also no advantage of moving the dynamically generated CSS into a separate file because it is only used on a single page.\nMy expectation was that if turbolinks evaluate script tags so it should evaluate style tags too (well, basically just insert them into the header).\n. > Turbolinks doesn't evaluate embedded scripts inside the head, so it actually does handle style and script tags the same way.\nAre you sure about this?\nREADME states:\n\nTurbolinks will evaluate any script tags in pages it visits, if those tags do not have a type or if the type is text/javascript. All other script tags will be ignored.\n\nPerhaps it only applies to body\n\nJust put the style tag right after the opening body tag and give it the scoped attribute. Even though only Firefox implements the attribute, it's still valid HTML5.\n\nDidn't realise there's scoped in HTML5. Handy how it suddenly makes the style within body a valid HTML.\nThanks for that.\nThis solves the problem for me quite nicely.\n. @reed, just FYI. This solution doesn't really work. At the moment only Firefox supports scoped and Chrome when experimental features are enabled.\nBut when the scoped is used, the following issues make your suggestion impossible to use:\n- https://code.google.com/p/chromium/issues/detail?id=272653\n- https://bugzilla.mozilla.org/show_bug.cgi?id=904999\nSee the example: http://jsfiddle.net/r2DTT/\nSo I reckon this issue needs to be reopen because we wouldn't be able to include style tag into body with turbolinks (assuming valid HTML5).\n. So what is the correct way of embedding normal stylesheets (non-scoped, so that the same behaviour is preserved) into the page with turbolinks with a valid HTML?\n. @reed sorry, not sure what you mean.\nNormally embedded stylesheets are included via style tag into the document header.\nApparently turbolinks can't understand that without a workaround I provided.\nYour suggestion of making the HTML valid with the scoped can't be used because it changes the semantics of the CSS rules.\nSo my question is what is the correct way of doing it with turbolinks so that the HTML is still valid?\n. > If you put the scoped style tag right after the opening body tag, how does it change the semantics of the CSS rules?\nThe CSS selectors precedence will be ignored and the scoped rules will always override other (even more specific) rules defined in a usual way.\nSee http://dev.w3.org/csswg/css-cascade/#cascading\n\nIn other words, for normal declarations the inner scope's declarations override, but for !important rules outer scope's override.\n. page:restore wouldn't help because the page isn't actually restored from cache when user clicks one link and then another one immediately.\n\nThe first option may work, but that would be a hack and not a solid implementation.\nI would rather avoid re-implementing what turbolinks does in regards to handling the events.\n. The issue manifests when using the browser's back button as well as clicking another link while the animation is being shown.\nI believe that handling the click events on the links is still a hack because our own handlers will need to reimplement the logic of ignoreClick at the very least:\ncoffeescript\nignoreClick = (event, link) ->\n  crossOriginLink(link) or anchoredLink(link) or nonHtmlLink(link) or noTurbolink(link) or targetLink(link) or nonStandardClick(event)\nwhich isn't the most trivial thing and is likely to change in the future.\nI understand that you want to avoid adding more code basically, but I don't see a big problem with that really.\nLooking at the code below, it is clear to me that caching and fetching are two distinct actions. \ncoffeescript\n  visit = (url) ->\n    referer = document.location.href\n    cacheCurrentPage()\n    fetchReplacement url\nWhich makes me a little puzzled by why there is the event for one action, but not the other.\n. @reed thanks a lot. Much appreciated :star2: \n. This issue is quite related to the other one https://github.com/rails/turbolinks/issues/241#issuecomment-20458418\n. ",
    "igor-alexandrov": "But, don't you think that giving all options and alternatives to your users is a good way? And why it doesn't make sense within the context of the sentence?\n. ",
    "teodor-pripoae": "thanks  :+1: \n. ",
    "loqman": "@reed I don't think it's bootstrap's problem. Even when I remove the bootstrap's plugin, the problem persists.\n. @davydotcom caching is disabled both on rails and on browser (firefox & chrome). I used firebug for debugging and I can see that the entire document is replaced but I have no clue why double add it between page loads.\n. Yes, like this:\nerb\n<body>\n    <!-- other stuffs -->\n    <!-- Javascripts\n    ================================================== -->\n    <!-- Placed at the end of the document so the pages load faster -->\n    <%= javascript_include_tag \"application\" %>\n    <%= yield :javascripts %>\n</body>\n. Thanks, data-turbolinks-eval=false did the trick.\n. ",
    "ctilley83": "Not sure what code would be relevant, but I'll post some code if the following details don't reproduce it.  One way to reproduce would be to create two pages with tables (with different number if columns), then navigate between the two with link_to statements.\nSent from my iPhone\n\nOn Jul 3, 2013, at 10:39 PM, Nick Reed notifications@github.com wrote:\nIt looked normal when I tested it. Can you show some code?\n\u2014\nReply to this email directly or view it on GitHub.\n. Narrowed down to a Safari issue.  Chrome and firefox work fine.  Not sure why disabling turbolinks fixes the problem in this situation.\n. Idk.  For some reason it does on my machine.\n. \n\n\n\nTo reiterate, turning off turbolinks fixes issue.  Does that gem use any javascript?  The last image is correct and what appears after page refresh\n. ",
    "smidwap": "Just realized that this implementation is brittle because pageCache can hold several versions of the same page, making it unclear what pageCacheForUrl will return. Looking into fixing it, but open to any ideas.\n. I'm thinking there may be a few changes to make around how events are triggered, i.e. maybe triggering \"page:change\" when the cached version is shown is a bad idea. But would like to see what the interest is in this feature before putting too much more work into it.\n. This is true. But the value here is really high for sites and pages where that is not the case. The instant page load is a great experience. I'm using this on two apps currently and not seeing any issues. I suspect it may only be edge cases where this impedes the UX.\nThat said, I see a few options\n1. Enable opt-out\nSimilar to the data-no-turbolinks attribute, if the link clicked is nested within a tag that contains a data-no-turbolinks-cache attribute (needs a better name), then don't display the cache.\n2. Make it opt-in\nSame as #1 but I guess it would be data-turbolinks-cache\n3. Split this into a separate script that listens to \"page:fetch\".\nThe problem here is that if you look at the diff, the reflectNewUrl call is aware of whether a cache has been displayed. There'd be some bugginess if this wasn't bundled with Turbolinks\nI'm not sure we'll know the answer until we test in real apps. We can make it opt-in, get feedback, then assess what to do next. What do you think?\n. Or, maybe the best option would to be check if a cached page has a data-prevent-turbolinks-cache before displaying the cache. If it does, don't display the cache and proceed as normal.\nExample cached page:\nhtml\n<body>\n  <div data-prevent-turbolinks-cache></div>\n  ...\n</body>\nThat way you can target the specific pages that are having difficulties.\n. @dhh I personally haven't run into the DOM manipulation problem yet, but I can see it happening on BCX-like \"infinite pages\" where the page reload could chop off the content the user is viewing. The difference with the back button is that the back button doesn't trigger a page reload.\nI'm not sure of the best way forward. I can continue to test this on my apps, but I'm not sure we'll know what (if anything) bugs developers until they use it.\n. Nick, it's clear where the problem might occur, but whether the problem\nexists in reality and to what extent it's an issue is unknown. The \"element\njump\" example is speculative\nThis is a zero configuration win for developers in what may be the vast\nmajority of use cases. Just try it out on an app. Prefetching seems obscure\nand requires configuration.\nOn Jul 10, 2013 11:21 AM, \"Nick Reed\" notifications@github.com wrote:\n\nHere is a very rudimentary example of a potential issue. Say you have a\npage that when it loads, an element slides from the left side of the page\nto the right side. With this new feature, if you leave the page and then\ncome back to it, you will see the page load with the element on the right\nside briefly before it \"jumps\" to the left side and then slides back to the\nright side.\nI think the better way to gain some speed is to go with @davydotcomhttps://github.com/davydotcom's\nidea of implementing a prefetcher (#229https://github.com/rails/turbolinks/issues/229).\nIt would be opt-in and entirely tunable so that developers could get the\nbest performance for their needs, all without the user seeing anything out\nof the ordinary.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rails/turbolinks/pull/248#issuecomment-20749523\n.\n. David I think with turbolinks we want the opposite, an opt out to display\nthe cache, not to prevent reload. Otherwise the page may never get\nreloaded. With stacker a sheet is kept from reloading only if it is stacked\nbeneath and has the no reload option.\n\nI would also suggest any config be in the page itself. That way we can\navoid the mental overhead of adding a config for each link to a particular\npage. Plus the config wouldn't differ link to link\nThis this is all a bit speculative and I might recommend we see the problem\nin action before solving it\nOn Jul 10, 2013 11:48 AM, \"David Heinemeier Hansson\" \nnotifications@github.com wrote:\n\nAh, I see what you mean. This hasn't been a problem for us with BCX. I\nthink it's the preferred default behavior to get the speed increase and\nthen just having a way to opt-out. I'd prefer the opt-out to be on the\nlink, though. Like data-turbolinks-no-refresh or something like that, so\nit'll just fetch from the cache and not refresh the page.\nOn Wed, Jul 10, 2013 at 5:33 PM, Nick Reed notifications@github.com\nwrote:\n\nBecause the cached page isn't being immediately replaced by a fetched\npage.\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/rails/turbolinks/pull/248#issuecomment-20750642>\n.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rails/turbolinks/pull/248#issuecomment-20751323\n.\n. David E, I would encourage you to try this branch out in a real app and\nreport back on why it's a silly solution. The technique is proven to work\nin the real world already with bcx and the apps I'm working on\n\nIt'd be great to see code for the prefetch and compare. They're different\nsolutions to different problems tho\nOn Jul 10, 2013 11:34 AM, \"David Estes\" notifications@github.com wrote:\n\nAlso worth noting we can do this for iOS with a touchstart event as a\nstandard link click in iOS is naturally delayed 300ms to detect double\ntaps. touch start could start the prefetch saving you an extra 300ms\npotentially.\nOn Jul 10, 2013, at 9:30 AM, David Estes davydotcom@gmail.com wrote:\n\nPersonally, I think this is a silly solution. Why don't we do what\nchrome does, capture a mouseover event on a link and start a prefetch for\nthat page. so that by the time its clicked it might come up earlier. Rather\nthan relying on historyCache.\nOn Jul 10, 2013, at 9:23 AM, David Heinemeier Hansson \nnotifications@github.com wrote:\n\nMatt, what we're trying to offer is an opt-out that gives us back \"how\nthings work right now\". That is, don't show the cache, wait for the fetched\nversion.\nI could be talked into a custom meta tag saying \"never show a cached\nversion of this page\" that turbo links would pick up. Didn't like having it\nas part of body/div.\nOn Jul 10, 2013, at 6:00 PM, Matt De Leon notifications@github.com\nwrote:\n\nDavid I think with turbolinks we want the opposite, an opt out to\ndisplay\nthe cache, not to prevent reload. Otherwise the page may never get\nreloaded. With stacker a sheet is kept from reloading only if it is\nstacked\nbeneath and has the no reload option.\nI would also suggest any config be in the page itself. That way we\ncan\navoid the mental overhead of adding a config for each link to a\nparticular\npage. Plus the config wouldn't differ link to link\nThis this is all a bit speculative and I might recommend we see the\nproblem\nin action before solving it\nOn Jul 10, 2013 11:48 AM, \"David Heinemeier Hansson\" \nnotifications@github.com wrote:\n\nAh, I see what you mean. This hasn't been a problem for us with\nBCX. I\nthink it's the preferred default behavior to get the speed increase\nand\nthen just having a way to opt-out. I'd prefer the opt-out to be on\nthe\nlink, though. Like data-turbolinks-no-refresh or something like\nthat, so\nit'll just fetch from the cache and not refresh the page.\nOn Wed, Jul 10, 2013 at 5:33 PM, Nick Reed \nnotifications@github.com\nwrote:\n\nBecause the cached page isn't being immediately replaced by a\nfetched\npage.\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/rails/turbolinks/pull/248#issuecomment-20750642>\n.\n\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/rails/turbolinks/pull/248#issuecomment-20751323>\n.\n\u2014\nReply to this email directly or view it on GitHub.\n\n\u2014\nReply to this email directly or view it on GitHub.\n\n\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rails/turbolinks/pull/248#issuecomment-20754890\n.\n. Quick status update: been out for the past 5 days but I plan to work on a solution for opting-out this week. @dhh I'll experiment with meta tags...What feels important is how easy it is to target specific views in  Rails.\n. @dhh take a look at my latest commit: https://github.com/smidwap/turbolinks/commit/50b5be408f838db41410bf65b9fe4ad45a3fc8ca\n\nTo disable \"prefetch cache\", I chose to allow programmers to add a data-no-turbolinks-prefetch-cache attribute anywhere in the DOM. Example usage:\nhtml\n<div class=\"page has_lots_of_things_that_jump_around\" data-no-turbolinks-prefetch-cache>\n  ...\n</div>\nTo disable for all pages:\nhtml\n<body data-no-turbolinks-prefetch-cache>...</body>\nHere's why I like this approach:\n1. It feels natural to include it like this in the view (as opposed to manipulating meta tags). It's the particulars of a view that would prevent prefetch caching.\n2. It's easy to disable for all pages.\n3. It's easy to target specific blocks of view code (think: partials).\nI'm open to other techniques like meta tags, just not sure how programmers would change meta tags in a view or why it'd be a better solution.\nReally excited to get this into the wild.\n. I actually wasn't thinking of the same prefetch we've been discussing, but I can see why it might be confusing. I named it prefetch cache because it's the cache displayed before the replacement is fetched. I can think of some other names although I think \"prefetch\" works quite well here.\nThanks for the heads up on docs. I'll add docs once we've settled on the feature and the opt-out terminology. Is that ok?\n. re: making this optional. We had concluded earlier to have an \"opt out\" to allow people to restore Turbolinks to \"the way it was before.\" It's analogous to letting people opt out Turbolinks for individual links using data-no-turbolink.\nre: integration with prefetch. I'm not sure the integration is that simple. We can have the prefetch use the cache but an actual page load still needs to happen after displaying the cache. I'd like to know whether prefetch is going to happen before putting in the work there.\n. Any update here @dhh @reed @davydotcom?\nOn my apps, I've been switching between testing @davydotcom's branch (prefetching) and my branch (\"transition cache\"). While prefetching is a really interesting concept there are known downsides (skew to analytics, extra requests to the server, lots of extra code to make the feature work).\nOn the other hand I'm satisfied with the improvement of transition cache and see no immediate downsides that can't be remedied by easily turning off the caching via the data-no-turbolinks-transition-cache option. It's also proven to work in Basecamp.\nI may be biased, but I think a reasonable approach would be to go forward with transition cache and continue the discussion on prefetching. The two can live side-by-side.\n. What's the symptom? Is an incorrect cache being shown, or is a cache that should be shown not being found? The latter is an issue because of the reliance on currentState.position as a cache key. It was a compromise to avoid adding a new cache whose keys are urls (this is preferable for transition cache).\nI'm happy to dive deeper into the code, especially now that this PR has diverged from master quite a bit. Similar to @davydotcom I put this out there to see interest before investing too much more time. Are there other hesitations that still need to be addressed?\n. Ok, finally getting a chance to get back to this. Just made a big move and am now settled.\nI am now working on rewriting this off the current master branch. In the process, I've discovered what may be causing the issues you brought up (at least the first). I fixed one of them, but there's a lingering problem that is caused by mucking around (very scientific, I know) with the back + forward button.\nA lot of the issues I believe are a result of using the existing pageCache to conserve memory. Grabbing the cache for a particular URL is complicated and error-prone because pageCache is designed to fetch caches by history position, not by url. Can we add a new cache, say pageCacheByUrl? Or would that be too burdensome on mobile?\n. Running some tests on my app right now. So far looks really interesting.\nOne issue is that the same prefetch can be fetched twice. I noticed if I hovered over a link, moved away, and then came back over the link it would fetch again. This slows down the transition because the script waits for the second prefetch to finish before navigating to the new link\nIs there no concern around the extra number of requests this might generate? Seems like this could double or triple the load on a server, but I have no idea.\nJust thought of something: how does this jive with remote links? Should handlePrefetch check to ensure the link isn't a remote one?\n. Here's an example in my app causing trouble:\n\nNaturally my mouse hovers over each link as I go down the list. This causes several requests (more depending on how far down the link is) to be sent to the server. A data-no-prefetching attribute could be added similar to data-no-turbolink. Not clear how often this would be needed.\nAt the very least I can see this being useful for \"top level\" navigation bars, where the user isn't frequently hovering except to click a link. In that case maybe an \"opt-in\" is a better idea.\n. I've been testing this branch on my app that is deployed to Heroku, and it makes a big difference. I won't know for sure until I do a screenshare with real users to see how the effect. But it feels as snappy as the \"transition cache\" I was working on, with the added benefit of working for all pages, not just cached pages.\nI would push for an opt-out on the link. data-no-prefetch or something along those lines in case we see a big spike in requests and can trace it to a certain set of links (like the dropdown menu above)\n. Still snappy!\n. Happy to report that the \"hover over a lot of links\" problem was solved by @davydotcom's latest commits. I noticed only one page request when moving my mouse down a dropdown menu. Great work David!\n. Noticing some strange behavior: looks like link clicking is happening on mousedown, not click. Going to look into a fix.\n. David I'm not sure I see any way around checking for data-remote attributes on links, and not prefetching in those cases. If the link is anything but a GET and the route doesn't exist, a 404 is returned. That could cloud log files and is a false alarm.\n. re: barrage of requests. With the 50ms delay on mouseover before prefetch starts, I don't think this is as much of an issue. When I tested it on my app with a dropdown menu of links, only the final link I clicked on was prefetched. If it's a real concern an \"opt-out\" could be a good idea.\nAnother concern around prefetching include the skew to analytics it causes (hits on pages that aren't viewed).\n. Definitely, but we want a general solution, no?\n. What would be the use case?\nOn Aug 16, 2013 7:55 PM, \"Alex Heeton\" notifications@github.com wrote:\n\n@davydotcom https://github.com/davydotcom [image: :+1:]\nTo help with the server load, what about sender a prefetch header or\nsomething that the server can optionally ignore in special circumstances?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rails/turbolinks/pull/253#issuecomment-22802547\n.\n. I'm not sure when that actual use case would arise. It seems like the pages\nthat take the longest to load are the best candidates to prefetch...to\nspeed up that page transition.\n\nThe slight delay definitely reduces extra load. Still not sure how this\nwould play out in reality. The extra load doesn't worry me too much...it's\nthe server-side analytics that become troublesome. We can no longer count\non a page hit being a real page hit. We're using server-side analytics for\nan app right now, and I suspect many other developers are.\nOn Fri, Aug 16, 2013 at 9:40 PM, Alex Heeton notifications@github.comwrote:\n\nPrefetching is a nice-to-have and could increase server load. If the\nserver can ignore prefetch requests in certain situations extra load could\nbe nullified.\nI guess with the slight delay before prefetching, the extra load effect is\npretty minimal anyway?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rails/turbolinks/pull/253#issuecomment-22803353\n.\n. It's not used as far as I can tell, so not sure why it would be kept.\n. Looks like others might be using the url attribute. Closing this.\n. Ok, I have the constrainPageCacheTo function back in place. It's not beautiful, but it works according to my testing.\n. Nick, would it be possible to upload a video of the DOM manipulation problem in the context of your app? That would be helpful to understand the issue for apps other than my own (where DOM manipulation is not a big deal).\n. Nick, you bring up some good points, but I believe you are misguided in thinking the idea should be tossed. This feature has worked really well for my app (www.lesson.ly) and Basecamp. Where it works, it does a lot for increasing perceived site speed. It would surprise me if a hefty percentage of apps running Turbolinks wouldn't benefit greatly.\n\nInstead, I would try to see how we can meet half way. I know @dhh needs to weigh in, but is there not room for a global opt-in/out and page-by-page opt-in/out? Is this not something worthy of releasing, getting feedback, and deciding upon once more than a few of us have weighed in?\n. I added an opt-out. I think all that's left is adding documentation.\nre: back/forward behavior. I had the same question when changing the cache to be by url, but I can't see why it's worse than the default browser behavior. The behavior mimics Basecamp's caching. I can't imagine a time when displaying a newer state while using the back button would be a bad idea.\n. Btw, the opt-out is including data-no-transition-cache anywhere in the html doc. A global opt-out would mean adding that to the body tag in a layout.\n. re: opt-out. I believe attaching it to the clicked link would be a bad idea. Here's why: you want to opt-out a page, not a link. Let's say I want to opt-out my /posts index page. I would need to search for every link to the /posts page and add data-no-transition-cache.\nre: caching by url. The point of Turbolinks is to change the browser's default behavior. I wouldn't consider Turbolinks' purpose to \"maintain as much default behavior as possible\" but rather \"depart from default behavior when the benefits are greater than the costs.\" In this case, I think the cost of departing from default behavior is tiny (non-existant?). We've already debated the benefits.\nre: transition cache name. The name seems ok (we discussed it here: https://github.com/rails/turbolinks/pull/248#issuecomment-21163565), but maybe slightly non-revealing. Lengthening the name to page transition cache might make more sense. What do you think?\n. What about just naming it \"cache\" or \"page cache\"? The code already makes\nuse of the term caching for the purposes of back/forward navigation, but\nI'm not sure Rails developers currently see turbolinks as caching anything.\nThen we can make the opt out \"data-no-turbolinks-cache\" or maybe\n\"data-no-page-cache\"\nMaybe this is a bit confusing because all pages still get cached for\nhistory nav, but I think it would make sense for people using turbolinks\nOn Oct 22, 2013 5:59 AM, \"Nick Reed\" notifications@github.com wrote:\n\n1.\nYou haven't eased my mind about caching by url. In fact, you admitted\n   that it will result in behavior that differs from the default browser\n   behavior. Maintaining as much of the default browser behavior as possible\n   is a big part of what this library tries to accomplish.\n   2.\nYour opt-out isn't implemented like data-no-turbolink. You're tying it\n   to the cached page instead of the clicked link.\n   3.\nI still don't think the term transition cache makes any sense. Makes\n   it sound like we're keeping a cache full of transitions.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rails/turbolinks/pull/286#issuecomment-26764343\n.\n. @dhh @reed any follow up? I'd like to make sure the opt-out is ok before writing any documentation.\n. @dhh do you still want to review this?\n. Yes, see commit https://github.com/smidwap/turbolinks/commit/9fb3425415b1d29240a25ee17a41747922b6d798. Basically, if the cache is full, then the oldest cache is deleted first.\n\nHere's a quick list of what remains to get done:\n1. Decide if \"transition cache\" is an appropriate name within the code and for exposing the opt-out data-no-transition-cache\n2. Write documentation for the feature and opt-out.\nBesides those things, anything else holding us back?\n. Ok, I added documentation and turned off transition cache by default. To enable:\njavascript\nTurbolinks.enableTransitionCache()\nI decided to make the opt-in via javascript, not data attributes. Two reasons:\n1. There still needs to be an opt-out via data attributes for individual pages. We can't have both an opt-in and opt-out via data attributes, at least not without some wonky code and confusing documentation.\n2. We want a global opt-in, not a page-by-page opt-in, so it doesn't make sense to tie opt-in to the DOM.\n@dhh how do you feel about the name \"transition cache\"? I agree with @reed that's it not the best name, but I honestly cannot think of another one.\nExcited to get this out the door.\n. Have you seen jquery's \"load\" event?\nhttps://api.jquery.com/load-event/\nIt appears you could do something like\njs\n$(document).on(\"page:change, function() {\n  $(document).find(\"img\").on(\"load\", function() {\n    // image resizing or w/e you need done\n. Any chance you're working off of Turbolinks master? Just merged something yesterday that could be at fault.\n. Ahh I see the issue. You need to point the turbolinks gem to master. Transition cache was not included in 2.1.0. I should make this clear in the documentation. Try this:\ngem 'turbolinks', github: 'rails/turbolinks'\nPlease report back on how transition cache works out for you.\n. Thanks for the detailed report; this sort of feedback is certainly helpful.\nThe short answer to your question is no, there's not a simple solution. Transition cache is designed to be used for dynamic content, and as such a fresh copy must always be fetched from the server.\nHowever, transition cache is currently used successfully by at least Basecamp and my own company, Lesson.ly. What I think makes transition cache successful is that real users rarely notice the delay between displaying the cached version and new version. Unless you have a slow page, the time between the two is not enough to do stuff like open drop-downs or start writing text. Instead, it's just enough time for one to acclimate his eyes to the page.\nAs a developer, I definitely notice the lag...the same way an actor or musician notices his mistakes on stage, but the audience doesn't. However, as a power user of Basecamp, I rarely notice the lag and think that the speed increase far outweighs any UI wonkiness.\nThat said, your mileage may vary. If you find a page that is causing UI wonkiness, you can disable transition cache for that page using data-no-transition-cache. UI wonkiness can be caused by pages that are slow loading, have many moving parts, or otherwise change dramatically when an update is made. To be honest, Lesson.ly doesn't opt-out any pages and from what I can tell, Basecamp only opts-out a few pages that have \"infinite scrolling\".\nLastly, you might try signing up for a demo of Basecamp and play around to see how transition cache works. Or, if you have the infrastructure setup, do a beta test on Aha.\n. Ah, I recall having that flicker issue as well. It was only apparent in development and on pages that served images, and is probably due to cache settings in images. It would be great to have a better explanation for this issue in case it might affect someone's production. @k1w1 do you have any more insight?\n@alexeypetrushin Try deploying to production and manually enabling transition cache via the console (like @k1w1  did). You should no longer spot the flicker.\n. I did some more testing of the \"image flicker problem.\" I see the flicker happen only rarely on production, using both Chrome and Safari. It's hard to predict because I'm not sure of each browser's cache invalidation rules. But for the most part, there's no flickering.\nI say let's keep this thread open for others to comment on their experience with transition cache, either positive or negative. @k1w1 and @alexeypetrushin if you enable on production, please report back with how things go.\n. As @reed mentioned in #336, this won't quite work. If @reed's refactor for some reason doesn't move forward, the essence of the fix is this:\nStep 1. Add a function absoluteUrl that transforms a url to an absolute one\nabsoluteUrl = (url) ->\n  (link = document.createElement 'a').href = url\n  link.href\nStep 2. Use absoluteUrl in the places where you changed to using document.location.href\n. @k1w1 did you happen to delete your comment? I received it by email, but I don't see it on GitHub any longer. I'll include it at the bottom for reference.\nCan you describe the problem more specifically? I'm having troubles reproducing. What is the setup for your redirect? Is it a link or a form? Why does it redirect at one point but then not redirect later?\nAnd to be clear, this is not a problem with absoluteUrl(...) but with currentState.url, correct?\n\nI am seeing a problem with @smidwap's approach. I modified cacheCurrentPage to be:\ncacheCurrentPage = function() {\n    pageCache[absoluteUrl(currentState.url)] = {\nThe problem is that after a redirect, currentState.url contains the original URL, not the destination of the redirect. This means that the current page is cached to the wrong URL, leaving a stale version of the page in the cache which is used when the user navigates back to this page normally (not through the redirect).\n. Sounds good. I don't use redirects with Turbolinks often. Instead, I try to use Turbolinks.visit(...) in js responses. May not fit every use case, though.\n. @reed do you think it'd be worth merging this PR to get the bug fixed and consider your refactor separately? I know this issue affects my app as well, so it'd be nice to get it straightened out.\n. It's not clear how Turbolinks plays a role in your problem. Can you clarify? Maybe post a screenshot of the pages your describing?\n. Hey @calvincorreli I did a quick test of this with videojs and confirmed the problem. The video will re-initialize just fine if Turbolinks is OFF and you're using the browser's back button. But if Turbolinks is on, the video will freeze if using the back button.\nYou may be able to fix the problem by re-initializing videos with videojs on page:change. I tried this quickly and found that videojs can't re-initialize a video. But, you could use videojs' dispose() method on page:before-change to clean up the video so it can be re-initialized again on page:change. I tried this but couldn't quite get it to work. But seems like a promising path.\nYou might try this before adding a data-no-turbolinks-cache feature to Turbolinks.\n. What about cloning the video tag before videojs is initialized, then putting the cloned video element into after calling dispose?\nSo it might work like:\n- visit page with video\n- page:change: clone video tag and initialize videojs\n- click link to another page\n- page:before-change: dispose of videojs and put cloned video tag back in the dom\n- go back to video page\n- page:change: start over, clone video tag, and initialize videojs\nIt's an idea if your PR doesn't get merged. I'm not a maintainer of Turbolinks, so I can't say whether that will happen.\n. Just reminded about this, @elia.\nAre there any hesitations? Happy to resolve merge conflicts once I know everyone's onboard. I'm using a fork of Turbolinks in production to apply the fix, so it'd be great to get this merged!\n. Thanks Thibaut!\nEl sept. 20, 2015 12:51 PM, \"Thibaut Courouble\" notifications@github.com\nescribi\u00f3:\n\nClosed #494 https://github.com/rails/turbolinks/pull/494 via b459755\nhttps://github.com/rails/turbolinks/commit/b459755b903e082f716ae7345461a7c1c62f292f\n.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rails/turbolinks/pull/494#event-414214103.\n. I wrote the transition cache feature, and I thought about this problem. And I think @christophemaximin's solution isn't general enough...\n\nThe problem is that users may temporarily see a cached page and get a bit confused (e.g. \"Post created!\" is shown, then disappears). The situation I most run into is a cached page with an expandable section. Turbolinks may cache the page with the section expanded, which can be a bit surprising to users.\nA contrived example:\n- User loads /posts and clicks \"new post\"\n- /posts page expands with a new post form\n- User clicks link to a totally different page (e.g. /users)\n- User comes back to /posts\n- User sees cache with new post form, but form disappears when new copy loads\n- User = maybe slightly confused?\nRemoving sections from cached pages wouldn't solve this problem.\nThis has been my personal solution so far:\n- If the difference between a cached and fresh copy of a page is drastically different, I'll add data-no-transition-cache to the page. In practice, this only happens with pages that have infinite scrolling.\n- If the difference is small (expanded section or flash notice), I don't bother. Not ideal, but also not a big deal unless your pages are taking several seconds to load (bigger problem to fix!)\nIt'd be nice to have a more general solution, but I don't think this is it. data-no-transition-cache is easier to understand and more useful.\n. Hey @gregblass, Turbolinks and the back button should play nicely.\nDo you have multiple <div>'s with id #derp? If so, that could be why the click event isn't registering.\nAlso, where does this javascript code live? In the view wrapped by <script data-turbolinks-eval=always> or in the compiled js file?\n. I'm still working on a solution to constrain the cache size. It was easy when the cache key was the position. With the change to url as the cache key it's not so simple...or maybe it is, but I haven't figured it out yet.\n. ",
    "iamroody": "Maybe it will be better that post this on stackoverflow, but i'm looking forward to get answer here.\n. ",
    "kinopyo": "I'm interested in this too, have same use case.\n. ",
    "johnmpotter": "I've been working on this issue for the entire day so I thought I'd share the only way I was able to get the beforeunload event to work with turbolinks.\nOn the page that you want to have the beforeunload dialog appear,  disable turbolinks for the entire page by adding \"data-no-turbolink\" to the body. This will allow beforeunload to work as originally intended.  You can do this dynamically in jquery as shown below. \n$('body').attr(\"data-no-turbolink\", \"true\");\nYou can take it a step further by only disabling turbolinks if an input field is changed.\n$(':input').bind(\"change\", function() { \n    $('body').attr(\"data-no-turbolink\", \"true\");\n});\nTo initiate the beforeunload prompt, return any string.\n$(window).bind('beforeunload', function(){\n    return \"Unsaved changes will be lost if you leave the page.\";\n});\n. ",
    "HendrikPetertje": "Stupid question and sorry for asking this.\nI've been trying to prevent confirm(msg) in page:before-change when a submit button is clicked... throwing a var to true onClick and testing the var within page:before-change doesn't seem to pick up.\ncan you advise? \n. ",
    "alecguintu": "@PicoReclame doing a return like return confirm(\"Are you sure?\") should prevent it.\n. I have a different question though, is there a way to trigger onbeforeunload or create a confirm box the same as how window.onbeforeunload does it like different buttons and a custom header saying like Confirm Navigation so they would look the same as how onbeforeunload does.\n. ",
    "pwalvarado": "This works for me: http://www.railsmine.net/2013/11/javascript-alert-for-unsaved-changes-turbolinks-jquery.html\n. ",
    "jhubert": "@reed How this would help with the back button being pressed? In chrome it seems to just allow the back button event to happen regardless of onbeforeunload or page:before-change events.\n. @rafaelfranca Any chance of getting this in? We can fork, but this seems really useful to those of us who've yet to upgrade to Turbolinks 5.. @rafaelfranca Woohoo! Thank you. \ud83d\udc9f . ",
    "MauricioMoraes": "@pwalvarado, thanks for the simple and effective solution: to verify if there are unsaved changes when the user clicks a link, without the need to disable turbolinks.\nAlong with window.onbeforeunload this solved the issue (in my specific case).\n. I found this gem useful: Turboboost. What do you think?\n. ",
    "ghost": "How to use it just on the pages with a form?\n. I've got the same issue with the same Chrome version: 34.0.1847.116\n. I can confirm that the autofocus now works fine in Chrome when I use the patched version. Thanks!\n. I removed turbolinks and still get the same error. I think the issue is with Rails, not Turbolinks.\n. For future reference in case anyone else gets this error, I just didn't have a JS runtime specified. I added gem execjs and therubyracer and now everything works perfectly.\n. I can't post on Heroku. I have a standard Rails app 4.2.\nI added in Gemfile the turbolinks gem from Github branch master and now I use in my views index.html.erb a link_to from \"sidebar\" to update div \"areaDiv\" which is in \"content\" div of page.\nThe link_to is on the same page. It'a a link with params that filter the query from controller.\nI repeat, all too standard.\nBut it just doesn't work.\nThe page just reload entire, like normal link.\nQuestion: I have to put this in index.html.erb??\n<%= link_to \"Something\", root_path({category: category.name, game: game}) %>\nand then I have to write this below the \"link_to\"?\n<script> Turbolinks.visit(url, { change: 'areaDiv' }); </script>\nI don't understand how to do. Is there an example on a standard app?\nI need the transformation in views, not in controller. Because I have a standard menu just with some category filter.\nHow to do partial replacement in this way?\nI think turbolinks partial replacement is for not use heavy javascript framework like angular. Because simply partial replacement is not too much complicated to use it with Angular. I'm wrong?\n. Can you post an example for learn to me how to: \"run that javascript code dynamically, not put it in a <script> tag.\"???\n. I'm using onclick: in \"link_to\". I'm wrong?\n. Ok, but if I remove , turbolinks: true Chrome says me in the \"Network\" tab that the request is well completed and everything is ok, but on my page nothing changes.\nWith , turbolinks: true it works, but there is the problem in subject.\nHow to fix?\nI have to put , turbolinks: true in the link_to, with remote: true?\n. Or maybe in the controller:\nruby\ndef chosen_category\n  redirect_to books_path({category: params[:category], tag: params[:tag]}), turbolinks: true, change: 'categorydiv'\nend\nI have to check if the request is by remote: true or by address bar direct? It's a good way?\n. Thanks. Now it works. I'm so proud of being a tester for your beautiful job!\n. Is there a way to not reload all queries in controller if I just want to \"replace\" with this new Turbolinks 3.0 just one part of the page and so just one part of the controller query?\nLike unobtrusive way of partial render in ajax...\n. I confirm that in Rails Console Live Log there is no error.\nIn Chrome Tools yes, it says to me to put an id.\n. Also I need something like this in a page with two columns:\nMENU AREA     |     ITEMS AREA\n              |\n              |\n              |\nHow to accomplish this?\nUsing this (http://railscasts.com/episodes/246-ajax-history-state) cast, I fix my problem, but with Turbolinks 3 (I love it!) I can't use that code (i mentioned also in: https://github.com/rails/turbolinks/issues/542) because you said to me it's wrong code.\nQuestion:\nWith the code in railscast my application is too fast;\ninstead with Turbolinks (visit, replace, remote:true and everything I tried) the page is reloaded every time in background (so, the menu is reloaded every time, with many queries to the database and the single div \"ITEMS AREA\" is updated because of \"change\" command.\nWHAT I really need is a system like that code (that works unless onpopstate event that doesn't work with Turbolinks) that allows me to update (and not regenerate in background!!!) just a REAL partial of the page.\nIs that possible with Turbolinks's methods?\n. @vizo Do you know the n\u00b0 246 Railscast?\n. Now I've just discovered something:\n- If i start with first load of the page let's say here:\nlocalhost/books/\nthe jsTree start good and everything works excellent\n(Turbolinks 3 partial replacement has not yet been called!)\n- I click on a node (the links is like this above):\nruby\n<%= link_to \"Something\", choose_category_path(category.name), remote: true %>\nand the new page is loaded with Turbolinks 3 partial replacement.\nNow the page is like this:\nlocalhost/books?category=Thriller\nand jsTree is frozen at the same level before the click (the node's levels are opened where I opened them because of partial replacement)\nbut now I can't click on the node because it don't works.\n- If I click again on another or the same link of before (the link's structure are the same of the first one) the jsTree came back to works again! MAGICAL! And now it's still Turbolinks 3 Partial replacement! Absurd!\nWhy this?\nI add in application.js this code:\n``` javascript\nvar ready;\nready = function() {\n    $('#menu').on('click', '.jstree-anchor', function (e) { $(this).jstree(true).toggle_node(this); });\n}\n$(document).ready(ready);\n$(document).on('page:load', ready);\n```\nWhere am I wrong?\n. Thanks @vizo for your answer.\nNothing to do. It doesn't work!\n. Or better, if I use this code it doesn't work because it don't close the tree, it just reopen:\n``` javascript\nvar ready;\nvar change;\nready = function() {\n    something\n}\nchange = function() {\n  $('#menu').on('click', '.jstree-anchor', function (e) { $(this).jstree(true).toggle_node(this); });\n  alert(\"Change!\");\n}\n$(document).ready(ready);\n$(document).on('page:load', ready);\n$(document).on('page:change', change);\n```\nIf I change the line:\njavascript\n $('#menu').on('click', '.jstree-anchor', function (e) { $(this).jstree(true).open_node(this); });\nit works. But I have to close the tree with icon e not with single click on node!\n. Great! It works now!\nI still don't know why, but it works!!!!\nCan you explain me why?\n. UPDATE:\nIn this situation I have a \"popstate got!\" message in my console.log also if I have Turbolinks active.\nBut the page is not reloaded when i come back.\nWhy this?\n. Dear @Thibaut,\nthanks for your precious answer.\nI'm following this tut:\nhttp://railscasts.com/episodes/246-ajax-history-state\nand so I have this code:\n``` javascript\nif (history && history.pushState) {\n    $(function() {\n        $(document).on(\"click\", \"#list th a, #list .pagination a\", function() {\n            Turbolinks.ProgressBar.start();\n            $.getScript(this.href);\n            history.pushState(null, document.title, this.href);\n            Turbolinks.ProgressBar.done();\n            return false;\n        });\n    $(document).on(\"submit\", \"#form_books\", function() {\n        Turbolinks.ProgressBar.start();\n        $.get(this.action, $(this).serialize(), null, \"script\");\n        history.pushState(null, document.title, this.action + \"?\" + $(this).serialize());\n        Turbolinks.ProgressBar.done();\n        return false;\n    });\n\n    $(document).on(\"change\", \"#little_book\", function(){\n        Turbolinks.ProgressBar.start();\n        $(this).closest('form').submit();\n        Turbolinks.ProgressBar.done();\n        return false;\n    });\n\n    $(window).on(\"popstate\", function() {\n        Turbolinks.ProgressBar.start();\n          $.getScript(location.href);\n        Turbolinks.ProgressBar.done();\n    });\n});\n\n}\n```\nso I have to call \"pushState\" many times.\nHow to handle popstate with Turbolinks 3.0? Is there a way?\n. Ok, @Thibaut, thanks for your super answer.\nIf I use only \"index.js.erb\" with this example code:\njavascript\nTurbolinks.visit(\"http://www.google.com\");\nalert(\"Hello!\");\nor this:\njavascript\n$(\".container\").html(\"Bye!\");\nalert(\"Hello!\");\nI can't change the url (like the previous history.pushstate), right?\nWhere I'm wrong?\n. I have a page with two columns like this:\nMENU AREA     |     ITEMS AREA\n              |\n              |\n              |\nUsing this (http://railscasts.com/episodes/246-ajax-history-state) cast, I fixed my problem, but with Turbolinks 3 (I love it!) I can't use that code because you said to me it's wrong code.\nQuestion:\nWith the code in railscast my application is too fast and everything works except the onpopstate event (Back button of the browser);\ninstead with Turbolinks (visit, replace, remote:true and everything I tried) the page is reloaded every time in background (so, the menu is reloaded every time, with many queries to the database and the single div \"ITEMS AREA\" is updated because of \"change\" command.\nWHAT I really need is a system like that code in the cast that allows me to update (and not regenerate in background!!!) just a REAL partial of the page.\nIs that possible with Turbolinks 3.0's methods?\n. I tried! nothing! The page loads itself!\n. I think is a problem with Turbolinks. Anyway, thanks. :dancers:\nhttp://stackoverflow.com/questions/31251951/turbolinks-3-and-older-onclick-on-tr-of-a-table-cant-trigger-click-if-link-is\n. Yes, please.\n. ",
    "junaidatique": "+1 @johnmpotter \n. ",
    "melnikaite": "There is a nice jquery plugin AreYouSure\nI just added turbolinks support, but it's not yet merged\nhttps://github.com/codedance/jquery.AreYouSure/pull/119\n. ",
    "soundasleep": "Note if you are using Turbolinks 5, the page:before-change event no longer exists, but you can use the turbolinks:before-visit event instead.\n```javascript\n  $(window).bind(\"beforeunload\", function(event) {\n    if (true) {\n      event.returnValue = \"Are you sure?\";\n      return event.returnValue;\n    }\n  });\n// Turbolinks 4 and 5\n  $(document).on(\"page:before-change turbolinks:before-visit\", function() {\n    if (true) {\n      return confirm(\"Are you sure?\");\n    }\n  });\n```. ",
    "bf4": "Awesome, thanks!\n. ",
    "gustafnk": "What's the status on this? I think it's an interesting idea..\n. ",
    "heeton": "@davydotcom :+1: \nTo help with the server load, what about sender a prefetch header or something that the server can optionally ignore in special circumstances? \n. Prefetching is a nice-to-have and could increase server load. If the server can ignore prefetch requests in certain situations extra load could be nullified. E.g. I can ignore prefetches at peak times if I need to. \nI guess with the slight delay before prefetching, the extra load effect is pretty minimal anyway? \n. I didn't mean pages that take a long time, but if people are worried about increased load, presumably that only matters at certain times. If the load thing isn't an issue, ignore me :) \nI personally prefer using client-side page load events (I care about people seeing pages, not my app serving pages). Browsers are beginning to do this kind of thing anyway, so maybe a move to more realistic stats is in order. Server-side logs of requests without a prefetch header would then show you non-js viewers at least. \n. ",
    "andriytyurnikov": "While UI triggered automatic prefetch with global opt-out sounds debatable, prefetching predefined set of links and storing them in cache is very promising feature for those who can make their own trade-offs.\n<a href=\"/whatever\" data-turbolinks-prefetch-cache=\"true\">\n This link is being prefetched and cached on DOMReady!\n Yay!\n</a>\nBeing able to do such thing would be awesome\n. Wow. You are right, and page will be changing twice But a) cached transition may be turned off, \nand b) in fact instead of having one function (as in my example)\nTurbolinks.defaultBodyUpdater\nwe could have 2\nruby\nTurbolinks.cacheBodyUpdater\nTurbolinks.networkBodyUpdater\nor all 3 of them :)\nAny thoughts?\n. ",
    "felixbuenemann": "@davydotcom Are you still planing to make this configurable? Otherwise I might give it a try.\n. ",
    "prashaantt": "Hey @davydotcom, I'd really love to see this work! Are you still thinking of taking this through? I think @andriytyurnikov's idea is the best compromise and the easiest first solution to this debate: set data-attributes on specific links that you need pre-fetched. Other strategies can be refined and worked out later on. \n. ",
    "nicbarker": "https://github.com/sydneyitguy/colorbox/commit/11cb088358429c4fb80ced7da0c6b49f7285a084\n. ",
    "lentg": "thanks\n. ",
    "gerardogc2378": "My chat it's just like this https://github.com/sinatra/sinatra/blob/master/examples/chat.rb\n. ",
    "lepture": "@chloerei I thought it should be before\ntriggerEvent 'page:receive'\n. ",
    "l4u": "oh sorry. actually the script that I am trying to implement is the smart layer.\noriginal code from addthis.com\n<script type=\"text/javascript\" src=\"//s7.addthis.com/js/300/addthis_widget.js\"></script>\n<script type=\"text/javascript\">\n  addthis.layers();\n</script>\nI have tried \n<script type=\"text/javascript\" src=\"//s7.addthis.com/js/300/addthis_widget.js\"></script>\nrenderAddThisButtons = ->\n  addthis.layers()\n$ ->\n  renderAddThisButtons()\n$(document).on 'page:change', renderAddThisButtons\nThe smart layer loads on direct visit, or reloads.\nBut on page change it doesnt regenerate the add this smart layer.\nI tried to call destroy before change too. The destroy methods work, but again addthis.layers() isn't working.\n$(document).on 'page:before-change', () ->\n  addthis.layers().destroy()\n  true\nThanks\n. @gfranko Thanks for the suggestion but that doesn't seem to be working\nA slightly modified version (not working) is as follow.\naddthisInit = () ->\n  addthis.layers((api) ->\n    window.api = api\n  )\n$(document).ready () ->\n  addthisInit()\n$(document).on 'page:change', addthisInit()\n$(document).on('page:before-change', () ->\n  if (window.api)\n    window.api.destroy()\n)\n. @reed Building a progress bar is a specific use case. But adding a event trigger for xhr.onprogress can be useful so that we do not need to hack on rails-turbolinks.\n. ",
    "gfranko": "Try this instead:\njavascript\naddthis.layers(function(api) {\n  $(document).on('page:before-change', function() {\n    api.destroy();\n    addthis.layers();\n  });\n});\n. @l4u You do not need to remove the global addthis properties for Smart Layers.  We just released new code that should have improved the destroy functionality.  Here is how the destroy method for Smart Layers works now:\nDestroy with a callback function\nSince Smart Layers is loaded asynchronously, it is required to pass a callback function to the addthis.layers() method.  The callback function will be provided a smartlayers object that includes the destroy() method.\njavascript\naddthis.layers(function(smartlayers) {\n  smartlayers.destroy();\n});\nDestroying Individual Layers\nYou can now destroy individual layers by passing the layer name to the destroy() method.  Like this:\njavascript\naddthis.layers(function(smartlayers) {\n  // This example will destroy the share layer\n  smartlayers.destroy('share');\n});\nI'm not familiar with how TurboLinks works, but you should be able to very easily destroy and re-call AddThis Smart Layers using some of the hooks you mentioned above.\n@crohr Unfortunately, our legacy codebase exposes a few global properties.  Smart Layers does not expose any.\n. ",
    "crohr": "Don't know if it's still of any help, but I managed to get Addthis working with turbolinks by doing the following (in my case it was for displaying the toolbox -- addthis.toolbox() didn't work):\n```\n$(document).on('ready page:change', function() {\n  // Remove all global properties set by addthis, otherwise it won't reinitialize\n  for (var i in window) {\n    if (/^addthis/.test(i) || /^_at/.test(i)) {\n      delete window[i];\n    }\n  }\n  window.addthis_share = null;\n// Finally, load addthis\n  $.getScript(\"http://s7.addthis.com/js/250/addthis_widget.js#pubid=ra-503b2c8949c5b313\");\n});\n```\nIt looks like Addthis is polluting the global window namespace (tens of properties set on window), and checks for various properties before reloading. So I went with this solution, but I'd love to know if you've managed to find another one.\n. ",
    "mskog": "I am using SmartLayers and the only solution that has worked so far was similar to the one @crohr posted.\nSomething ugly like this:\ncoffeescript\n  if window.addthis\n    window.addthis = null\n    window._adr = null\n    window._atc = null\n    window._atd = null\n    window._ate = null\n    window._atr = null\n    window._atw = null\nThen load the script and call addthis.layers with your options\n. ",
    "MichaelSp": "for the googlers: have a look here https://github.com/caarlos0/nprogress-rails\n. ",
    "ericsaboia": "thanks @MichaelSp !\n. ",
    "tomascharad": "Hi Nick,\nThank you very much.\nWhat information do you need?\n2013/9/23 Nick Reed notifications@github.com\n\nConsidering that Zurb foundation is a Rails gem, I think the\nresponsibility for getting it to work with TL lies with it's authors.\nThat said, if you still need help with this, I can try to help, but you're\ngoing to have to give me some more information.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rails/turbolinks/issues/267#issuecomment-24963241\n.\n\n\nSaludos,\nTom\u00e1s\n. I've opened a stack overflow question a while ago which I think that\nexplains the case in detail.\nhttp://stackoverflow.com/questions/18220560/dropdown-select-list-wont-display-items-with-custom-forms-of-zurb-foundation-4\n2013/9/25 Tom\u00e1s Charad tomas.charad@gmail.com\n\nHi Nick,\nThank you very much.\nWhat information do you need?\n2013/9/23 Nick Reed notifications@github.com\n\nConsidering that Zurb foundation is a Rails gem, I think the\nresponsibility for getting it to work with TL lies with it's authors.\nThat said, if you still need help with this, I can try to help, but\nyou're going to have to give me some more information.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rails/turbolinks/issues/267#issuecomment-24963241\n.\n\n\nSaludos,\nTom\u00e1s\n\n\nSaludos,\nTom\u00e1s\n. As the railscast of Ryan B.\nterminal\nrails new store\nrails g scaffold product name price:decimal --skip-stylesheets\nrake db:migrate\nrails g foundation:install\nGemfile\ngem 'zurb-foundation'\n2013/9/25 Nick Reed notifications@github.com\n\nHow are you initializing Zurb foundation?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rails/turbolinks/issues/267#issuecomment-25137280\n.\n\n\nSaludos,\nTom\u00e1s\n. Thanks! That was a very useful insight!\nActually the gem was initializing foundation in application.js like this:\n$(function(){ $(document).foundation(); });\nI tried your way but it wouldn't work either.\nSo I checked the docs and I used this:\n\n  $(document).foundation();\nAfter the  tag in the application layout and everything seems\nto be working like a charm!\n2013/9/26 Nick Reed notifications@github.com\n\nI meant how are you initializing the javascript.\nBriefly looking at the Zurb documentation, my initial thought would be to\ntry something like this:\n$(document).on 'page:change', ->\n  $(document).foundation('off').foundation()\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rails/turbolinks/issues/267#issuecomment-25219021\n.\n\n\nSaludos,\nTom\u00e1s\n. You totally helped.\nCheers!\n2013/9/27 Nick Reed notifications@github.com\n\nAwesome. I'm glad I could (sort of) help.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rails/turbolinks/issues/267#issuecomment-25248159\n.\n\n\nSaludos,\nTom\u00e1s\n. ",
    "dtao": "OK, obviously it isn't my call in the end; but here's my two cents. I personally prefer the approach of overriding window.setTimeout, even though I realize that overriding built-in functions is typically frowned upon. In this case I believe it's justified. Here's my reasoning.\n1. Functionally, no change is being made. The pattern of caching the original function, then calling it with orig.apply(this, arguments) maintains the previous behavior exactly. All that we're doing is remembering the result.\n2. I would even argue that, actually, we're doing one better than that. The issue here is that the behavior that sites may rely on with setTimeout is being broken by Turbolinks; this change corrects that issue. So even though we are overriding setTimeout, we're effectively bringing it back to where it should be.\n3. Most importantly, I think the aversion to overriding existing functionality is misplaced here, because this whole library is based on a system of overriding normal behavior in a way that's as transparent as possible. E.g., normally when you click on a link in a browser, the page reloads, the JavaScript environment is refreshed, etc. Turbolinks changes all of that. It overrides what hyperlinks do, how the browser history works, etc. But the appeal of this library is that it does so magically, going to great lengths to eliminate any burden on application developers of modifying their code to get it to work.\nIt's because of this last point that I would vote against your suggestion to introduce Turbolinks.setTimeout instead of overriding window.setTimeout. The former, while it avoids the supposed unpleasantness of overriding a built-in function, places the burden on app developers to modify their code* after adding Turbolinks in order for it to work correctly. The latter takes that responsibility from within the library. And as I hope I've argued\u2014if not convincingly, then at least without sounding like a fool\u2014the unpleasantness here is really a harmless programming maneuver, to which many devs have an understandable aversion, but which in this case is quite benign.\n*I also wanted to add another point to this. Not only does requiring code changes place the coding burden on application developers; it requires for them to independently discover the problem on their own, search for a solution, and eventually find out about Turbolinks.setTimeout in the documentation. Even if you explain this very visibly in the project's README, there are plenty of devs who will miss it. The end result is potentially many person-hours, spread over many projects, spent debugging an issue that could have been avoided. To me, having the library \"just work\" in this case is a far preferable scenario.\n. Yeah, setInterval definitely should be handled the same way\u2014i.e., whichever way it is ultimately decided setTimeout should be handled.\nI just added a commit (with a test page) to treat setInterval the same way.\nI agree with your suggestion to brainstorm the possible drawbacks of overriding setTimeout. In addition to the scenario you proposed, one other possibility I thought of is that a developer might actually check for reference identity for various built-in functions, including setTimeout, before and after loading libraries. Presumably this would be to just know what has been \"tampered\" with. Despite my best intentions, I realize that there are going to be some devs who just say No, don't override anything! no matter what; these devs would likely prefer to keep the original setTimeout until such time as they discover a need to override it.\nFor this case\u2014and anyway, since providing the choice can't be a bad thing, if you were to go with my approach\u2014I also added Turbolinks.restoreSetTimeout and Turbolinks.restoreSetInterval for basically undoing the change and reverting those respective methods to whatever they were before Turbolinks was initialized.\n. Something I didn't really consider when submitting this PR is that there are two very different use cases for Turbolinks.\nThe first, which appears to be @dhh's priority (and rightly so, probably), is the greenfield application that starts with Turbolinks off the bat. A developer in this case ought to understand what Turbolinks is doing and embrace the new persistent environment, up to and including having setTimeout/setInterval callbacks traverse page changes on purpose, as with Basecamp.\nThe case I had in mind\u2014and to be fair, I have no idea how common this is\u2014is the existing/legacy application that adds a dependency on Turbolinks to improve UI performance. This is what I was concerned about: a developer adds Turbolinks to his/her site, everything looks great, but there are these subtle bugs around page changes and things appearing/disappearing, etc.\nSo I get that maybe it doesn't make sense for Turbolinks to do this, esp. if the primary target is the greenfield app. That said, to toss a bone to developers in the second camp I would at least propose adding a \"gotchas\" section to the README.\nTo make it as easy as possible to make a page change in Turbolinks act a bit more like a page change in a traditional non-Turbolinks app, I whipped up a little JavaScript library yesterday called cleanSlate.js. Calling Clean.slate() clears not only any pending calls to setTimeout and setInterval (via the same mechanism as in this pull request); it also aborts any pending web requests and terminates any running web workers.\nSo I believe getting the behavior I proposed here for a legacy app would be as simple as:\njavascript\ndocument.addEventListener('page:change', function() {\n  // reset setTimeout, setInterval, etc.\n  Clean.slate();\n});\nIf either of you has any feedback on this idea or other thoughts about what I've said, I'm curious to hear it. Otherwise I'm fine with you closing this pull request.\n. ",
    "dudeman": "Sorry, should have been more specific.  Cookie should be removed.\n. Sure.  It goes something like this:\nA form gets submitted with a POST request, the response to that request has the request_method=POST cookie in it which Turbolinks sees and decides not to initialize because of the value of the cookie.\nLets say the next request is just following a normal link, so a GET request is performed, normally the server would rewrite the request_method cookie to GET and all would be good, but this page is cached on a Varnish server or CDN, so the request never gets to the server to rewrite the cookie, and on this next request Turbolinks doesn't initialize since the cookie value is still POST.  And for the rest of the session, each subsequent request that gets served off the cache from the CDN won't have Turbolinks initialized since the cookie is stuck to POST.\nIs there any reason to keep the cookie around after its value has been read and stored in the requestMethod variable?\n. Great! Thanks!\n. It looks like they're using Turbolinks 2.2.0, which removes the cookie: \nhttps://github.com/helthe/Turbolinks/blob/ef86859ec4ee452100117314bd949a29f5bdd929/Resources/public/coffee/turbolinks.js.coffee#L154\nYou shouldn't have any trouble using with Varnish.\n. Setting the cookie for every request should be fine, since Turbolinks checks for GET https://github.com/helthe/Turbolinks/blob/master/Resources/public/coffee/turbolinks.js.coffee#L340\nAre you having trouble with Turbolinks or Varnish?\nIs the php version of Turbolinks working correctly for you without varnish in front of it?\nIn case you're not aware, by default Varnish doesn't cache requests with cookies in them. https://www.varnish-cache.org/docs/3.0/tutorial/cookies.html\n(which is probably what you want in the case of logged in / user session cookies)\n. It's pretty easy to handle this yourself, not sure if should be included Turbolinks to make the faux calls on pages when browserSupportsTurbolinks is false (since its a lot easier to add it in than to try and disable those calls if you don't want them when Turbolinks is disabled)\nAfter turbolinks is loaded: \n``` coffeescript\njQuery ->\n  $document = $(document)\n  $document.trigger 'page:load'\n  unless Turbolinks?.supported\n    $document.trigger 'page:change'\n    $document.trigger 'page:update'\n    $document.on 'ajaxSuccess', (event, xhr, settings) ->\n      return unless $.trim xhr.responseText\n      $document.trigger 'page:update'\n```\n. Any reason you don't want to also trigger page:load on DOMContentReady?\n. Sorry, I meant in the context of when Turbolinks is not supported.\n. Sounds like you're looking for pjax - https://github.com/defunkt/jquery-pjax\n. Sorry should have specified, that's on master.\n. Looks good to me.\nThanks!\n. You can achieve this by putting your js at the bottom of your body and have the data-turbolinks-eval=\"false\" attribute on the script tags.\nhttps://github.com/rails/turbolinks#evaluating-script-tags\n. I think you're mistaking my suggestion for the data-no-turbolink attribute.\nThe data-turbolinks-eval=\"false\" tells turbolinks not to load/compile/execute those script tags, so you can have them at the bottom of the page, and they'll be run on the first initial page load, but not on subsequent turbolink body transitions.\n. @loureirorg for more info you can see the initial discussion (which talks about the exact same thing you propose here, and has been implemented in turbolinks for some time now) \nhttps://github.com/rails/turbolinks/issues/198\n. ",
    "thomaswelton": "I've using a PHP version.\nDoes this mean the cookie only needs to be set if the request method is not get.\nSee their implementation here\nhttps://github.com/helthe/Turbolinks/blob/ef86859ec4ee452100117314bd949a29f5bdd929/Turbolinks.php#L78\nI too really want to get this working with varnish\n. I can confirm the JS I'm using has the popCookie function.\nAlso, using my dev tools if I inspect document.cookie I can see that it is empty after every page request.\nBut it looks like the PHP lib is always returning a Set-Cookie header on normal and ajax requests is this the correct behaviour? Wouldn't this break Varnish.\nOr could there be something in my vcl config that is breaking this. Would I be able to check your vcl file @dudeman, or @reed do you have think this is a problem with the PHP library. \n. Looks like in the the python version the cookie is conditionally set https://github.com/lepture/flask-turbolinks/blob/0cee26b79c67c863e1b43eaf3ed21cf85ae48b48/flask_turbolinks.py#L48\nSo I think this could be a bug in the PHP version.\n. Turbolinks works fine.\nI was just hoping that I could Varnish cache all my turbo links requests. It seems like the only reason we step a cookie from turbolinks is to make sure a request wasn't get.\nI was thinking that the server could only send the Set-Cookie header when it was totally required, and turbolinks on the front end would remove the cookie and prevent it from being sent up to the server for get requests.\nI'm working on a personal site/blog. And right now I've decided that I likely do not need to send post requests from the front end, or have user sessions.\nSo for now I have just told Varnish to strip and ignore all cookies.\nThis works and everything is super fast. But I am still wondering if there is a less brutal solution.\n. I've also found http://instantclick.io/ which requires no cookies or server side integration.\n. ",
    "carlalexander": "@thomaswelton Just released a new version of the Turbolinks PHP package with the cookie changes in #405. If you're still using the package, test it and let me know.\n. Fixed that for you. Thanks!\n. ",
    "mbajur": "yes, that was it! Thank you very much.\n. Yeah, but it was not working neither.\n. There is no body, just a 302 redirect to users_place_path\n. Oh, it seems that i was using some old version, i'm an idiot. Sorry for this and big thanks for your urgent support! :)\n. ",
    "edorgeville": "I have the same issue but the script tag is already in the <head>\n<script src=\"/assets/modernizr-1c4f6f2383346e76a4305023c45e4904.js\"></script>\n</head>\n. Any update on this ? \n. ",
    "yonbergman": "Hi,\nWe just ran some test to check out your request, and it seems that it's not an issue.\nIf you have a linked stylesheet at the bottom of your pages and navigate between them using Turbolinks the browser won't refetch or re-evaluate the same css twice.\nWe tested it by adding a simple css file to the /test directory and linked to it at the bottom of the index.html and other.html\n<link rel='stylesheet' type='text/css' href='/my.css'>\nHere are screenshots from both chrome and firefox network tabs showing that while we move between pages we don't reload the stylesheet.\n\n\n. ",
    "mrjabba": "Sorry. My mistake :-) Thanks for checking.\n. ",
    "rmosolgo": ":+1: for some event before loading a page from popstate\n. :+1:\n. See reactjs/react-rails#87 for more info\n. Thanks @reed, you're killin it!\n. In case this workaround isn't on your radar, you can also: \nruby\ngem 'turbolinks', github: 'rails/turbolinks', ref: '34e81268edd8677a7dfb5ea71b108699f81f3d84'\nto get the latest right from github.\n. Are you using react-rails 1.0.0-pre? \nI'm using that version, plus disabling the turbolinks cache:\njs\nTurbolinks.pagesCached(0)\n. :+1:\n. Fine with me, I also prefer the Turbolinks.EVENTS interface. clone seems overkill for this use case, but hey you're the owner! :stuck_out_tongue: \nThought experiment: if you had a writable Turbolinks.EVENTS, is there any time someone would want to rename those events? (I can't think of one but the thought hit me.)\n. :+1: thanks @reed!\n. :+1: for matching how a \"normal\" page would execute scripts \nTests look good for me locally:\n\n. Thanks for those details! \nSomehow, I think it is happening in our app. We've seen it on bugsnag (but I didn't look carefully, I thought it was Safari with localStorage turned off), and finally a user sent a screenshot of his JS console: \n\nI'll have to read up on the 30-second limit. I found that I could replicate the issue in a timespan greater than 30 seconds: \n- Open safari \n- Open web console \n- Define turboVisit to repeatedly visit a new page with Turbolinks: \njs\n  function turboVisit(fromI, untilI, timeout) { \n    // toggle between pages in the app:\n    var path = window.location.pathname == \"/stations\" ? \"/people\" : \"/stations\" \n    if (fromI < untilI) { \n      setTimeout(function() { turboVisit(fromI + 1, untilI, timeout) }, timeout)\n    }\n    console.log(fromI + \":  =>  \" + window.location.pathname)\n    Turbolinks.visit(path) \n  }\n- Make 120 visits, 400ms apart: \njs\n  // toggle pages 120 times, with a 400ms break in between\n  turboVisit(0, 120, 400)\n- Wait: \n\n- Interestingly, calling turboVisit(0, 120, 1000) yields a slightly different outcome (104 successful pushState calls): \n\nIf I understand correctly, that's 100 * 0.400 => 40 seconds or 104 * 1 => 104 seconds, so, does that mean we're affected despite the 30s limit? Or have I overlooked something?\n. ",
    "shadowed87": "Is it there any workaround to this? Really need to intercept the back button\n. ",
    "ardensol": "My workaround was adding to the history stack with turbolinks set to false: \nvar url = 'fakeurl.com/url#step-1'\nhistory.pushState({turbolinks: false, url: url}, '', url);\nI then added a hash on the id link of my multi-step form where I navigated to\nwindow.location.hash = 'step-2';\nand set up a listener to fade the form in and out based on the hash change:\nwindow.onhashchange = checkHashChange;\nvar checkHashChange = function() {\n  doSomething();\n}\n. ",
    "sausman": "This should work:\njs\nwindow.history.replaceState(window.history.state, '', page_tab);\n. No problem! Try this:\njs\nwindow.history.pushState({ turbolinks: true, position: window.history.state.position + 1 }, '', page_tab);\n. ",
    "cj": "@sausman thanks for the response!  That almost works :)  Is there anyway to still add it to browser history?\n. @sausman Thank you, that worked perfectly!\n. ",
    "fedegos": "How would you achieve this effect in the current Turbolink version? . ",
    "stebo": "+1 for that issue\n. ",
    "chilian": "\"page:before-change event gets only fired, when the user clicks on a link\" => correct. The event \"page:before-change\" is only to go between the \"link clicked\" and \"page fetch\" states, for giving you e.g. the possibility to cancel the page change process. If you want to listen to an event which is fired by any link or Turbolinks.visit(), then use \"page:fetch\". \"page:fetch\" is fired when turbolinks starts to fetch a new target page, so its independent as you want it. \n. ",
    "scarfacedeb": "I like to dig deeper in this kind of code. You can learn a lot just by looking at it. :)\nHere's the issue: https://code.google.com/p/chromium/issues/detail?id=291791\nI guess, if they won't fix this soon enough, you can just use getAttribute method instead.\n(Let's hope they fix it)\n. @glebm It would work if you add a host to the assets' urls, but it's clearly not a permanent solution.\n``` ruby\ninside config/environments/development.rb\nconfig.action_controller.asset_host = \"http://localhost:3000\"\n```\n@reed I suggest to replace node.src and node.href with node.getAttribute('src') and node.getAttribute('href') respectively in this method (turbolinks.js.coffee:153):\nruby\n extractTrackAssets = (doc) ->\n    (node.src || node.href) for node in doc.head.childNodes when node.getAttribute?('data-turbolinks-track')?\nYou can see in the test case that I submitted to the chromium tracker that this should work in the latest Chrome.\n. @reed thanks!\n. ",
    "shikendon": "Hi, I made a sample to show this issue: http://jsfiddle.net/kp4T2/2/\nIE10 result:\n\n. ",
    "jonwolfe": "I'm having this issue myself. It does not only happen when you use the jquery lazyload plugin -- it's not in my app.\nOn IE10, the contents of noscript tags show when a page is visited via turbolinks.\n. My hunch is that IE10 does not allow javascript to remove noscript elements from the DOM for some reason.\n. That looks great, thanks for being so responsive. I'll add that code to my\nfork, replace the event binding, and test it in the old versions of IE (I\nhave them all going back to 6). I'll let you know the results.\nOn Wed, Dec 4, 2013 at 9:04 PM, Nick Reed notifications@github.com wrote:\n\nThanks for bringing this to our attention. We're intentionally binding\nthese events regardless of whether Turbolinks is supported or not to allow\nfor graceful degradation, so the ideal solution would be to get it working\nfor IE < 9 rather than removing degradation for all unsupported browsers.\nWhat we can do is use attachEvent if addEventListener isn't defined.\ninstallDocumentReadyPageEventTriggers = ->\n  triggerDocumentReadyPageEvents = ->\n    triggerEvent 'page:change'\n    triggerEvent 'page:update'\nif document.addEventListener?\n    document.addEventListener 'DOMContentLoaded', triggerDocumentReadyPageEvents, true\n  else if document.attachEvent?\n    document.attachEvent 'DOMContentLoaded', triggerDocumentReadyPageEvents\nHow does that look?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rails/turbolinks/pull/304#issuecomment-29871867\n.\n. Reed, your code fixes the crash on IE7-9. I reverted my commit and put yours into #298bbe1.\n. Actually, there are still issues on IE8. I didn't realize it because I had IE set to the wrong document mode when I was testing.\n\nThe event callbacks are now installed correctly on IE8, which kicks the can downstream to triggerEvent(), which crashes because document.createEvent() isn't supported on IE8.\nDid some research on how to create and trigger custom events on IE8, and found this gist (https://gist.github.com/frequent/6904575) down in the bowels of this S.O. thread: http://stackoverflow.com/questions/13435008/how-to-trigger-a-custom-javascript-event-in-ie8\nI think the approach in the gist could work in Turbolinks, but maybe it's too much of a hassle, and we should just call installDocumentReadyPageEventTriggers() if the browser supports Turbolinks.\n. The more I think about this, the more I think my initial commit is the best way for people like me who need to support shitty browsers. I could be missing something, but bear with me.\nTrying to trigger and respond to custom events in IE8 looks really ugly. You have to not only create the event in a custom way, you have to change the code that listens for the event. It's the reason things like jQuery were created, but Turbolinks can't require any third-party library of course.\nIf you accept my original commit, all you really lose on shitty browsers is triggering page:change and page:update when the document has loaded. There's no need to patch triggerEvent() (with all of the other changes that would require), since it never gets called.\nFor people who don't need to support shitty browsers, they can just put all their intialization code in \na page:change callback like so:\n$(document).on 'page:change', ->\n  myInitFunction()\n...while for those of us who do have to support shitty browsers, we can do this:\n$(document).ready ->\n  myInitFunction()\n$(document).on 'page:load', ->\n  myInitFunction()\nThis works since page:load is (at least currently) not called on a non-turbolinks page load.\nThis works on IE8 and other shitty browsers with minimal changes to Turbolinks, and as far as I can see, with minimal changes to application code.\nAs for how to clean up the commits in my pull request, I can't see a way to do this, so I may just close this issue and open a new one with a fresh pull request.\n. That works, if you also test browserSupportsCustomEvents in installJqueryAjaxSuccessPageUpdateTrigger. The end result is pretty much the same as only calling installDocumentReadyPageEventTriggers and installJqueryAjaxSuccessPageUpdateTrigger if browserSupportsTurbolinks.\nI don't know how to remove commits that are already referenced in this thread, so I'm going to close this issue and open a new one with a fresh pull request.\n. Please DON'T fire page:load on DOMReady. I agree with what reed said: \"By not firing it on the initial page load, it provides a way to distinguish between a normal page load and a Turbolinks page load. To me, that's it's entire purpose.\"\n. I agree. See the commit above.\n. Hi. I'm the author of the pull request that is causing you problems. My comments below are based on my understanding of the issues involved, but if I'm missing something, please educate me:\nIE8 doesn't support triggering custom events without a lot of custom code. That would have been handled by jQuery, but Turbolinks doesn't rely on jQuery. As far as I know, none of that code to actually make custom events work on older browsers like IE8 was ever in Turbolinks.\nSo, before this change was made, turbolinks simply crashed IE8 (triggered javascript exceptions would be a more accurate way to put it). Your application wouldn't have worked on IE8 anyway with the way TL was implemented.\nAdding and debugging all the code to Turbolinks to make custom event triggering work on IE8 was outside the scope of what I needed (and frankly outside of my area of expertise), which was just to have IE8 not crash when the turbolinks library was loaded. For my app, it now gracefully degrades to standard full-page-load behavior on IE8. But, then again, my IE8 experience doesn't depend on page:change firing.\n. @gersmann , @semaperepelitsa , thanks for explaining more about the issues you're having. I wasn't aware that the page:change event triggering was new to Turbolinks 2.0.0.\nI agree that it makes sense to open a separate issue, since my intention with this issue was to just do some quick triage to stop IE8 from crashing every time Turbolinks was loaded.\nI'm not a Rails core member or anything, so I don't know their decision-making process, but I don't get why they chose to not have Turbolinks use jQuery for triggering custom events. It would just work on IE8 (as long as you stay with jquery 1.x). Just about everybody who's going to use Turbolinks is also using jQuery, and major parts of Rails (https://github.com/rails/jquery-ujs/blob/master/src/rails.js) already depend jQuery. So, I don't quite get it.\n. IE8 support is critical for us (http://www.techvalidate.com/), as it\nprobably is for most B2B companies who want to use Rails. We've been able\nto drop support for IE 6 & 7, but we have ~23% of visitors still on IE8.\nOn Tue, Feb 4, 2014 at 1:22 AM, gersmann notifications@github.com wrote:\n\nI think the idea behind JQuery UJS is that the JS framework should be\npluggable though I don't think there is a different implementation. I just\nfind it strange that there is Turbolinks has default functionality\n(page:change on DOM ready) that doesn't work in IE8. I'm also not sure\nabout the support status of Rails for IE8, but to my knowledge it is still\nquite common in the real world.\n\nReply to this email directly or view it on GitHubhttps://github.com/rails/turbolinks/pull/311#issuecomment-34042362\n.\n. Until the issue is resolved, you might find this useful (http://reed.github.io/turbolinks-compatibility/google_analytics.html), though you already see the heart of the issue, and with more elegant code. \n\nAs it is now, you do have to check to see if the browser supports Turbolinks, and if so, track the pageview on page:change. If the browser doesn't support Turbolinks, just track the pageview on $(document).ready. You have to do either-or, or you'll get duplicate pageviews recorded.\n. ",
    "Arcath": "Its called at the end of the page just before </body> I use <%= content_for(:page_js) { \"combo_box_init();\" } %> with <%= yield(:page_js) %> at the bottom of the page.\nI know the function is being called no problem because the select box is being swapped out for the text field.\nIts odd, if my JS wasn't running I'd expect the form to submit wrong instead of not at all.\n. Moving the form outside the <table> tag seems to have fixed it! Why would that be?\n. Actually... its not calling my submit function.\nI've fixed it for my uses by using $('#combo-box-search').blur() instead to set the selection but would still be nice to know why my submit function isn't working.\n. That works fine thanks!\n. ",
    "ssorallen": "A lot of JavaScript has to change to accommodate Turbolinks, and so saying some JS injects elements on page load shouldn't be motivation for features or changes in Turbolinks. That JS should change and properly clean up after itself.\nYou ran into this exact problem in your Map Generator example and got around it by evaluating the <script> tag yourself:\n\n\n\nAdd a class to the script tag for each map you have in your application.\n<script class=\"init_map_generator\" type=\"text/javascript\">\n\n\n\n...\n\nwindow.eval initMapGenerator.text() if init and (initMapGenerator = $('script.init_map_generator'))?\n\nHaving to tag <script> tags you want to execute just to eval them yourself seems like a problem with Turbolinks's history handling.\nAlso, I believe your AdSense example will leave the window.google_prev_ad_slotnames_by_region and window.google_num_ad_slots values in improper states if the back button is used because 'page:fetch' is not fired to call the clearAds method. It looks like the example is trying to do the work of the <script> tag that it suggests putting at the bottom of the <body>.\nEvaluating <script> tags on popstate seems expected to me. It should be the same as loading the page from the server except the fetch/receive/load events are not fired.\n. If you don't communicate with JS about page-specific data through the <body>, where do you put it?\nWhere do you put the bootstrapping for your JS? Data that doesn't belong in the DOM that is specific to the page, like JSON representations of models, endpoints for Ajax requests that are not just the current page. Backbone's documentation puts <script> tags at the bottom of the <body> for this to customize each page: http://documentcloud.github.io/backbone/#FAQ-bootstrap If someone follows the Bootstrap guide and attempts to use Turbolinks, the back button will leave their app in a funky state.\ndata- attributes are an option, but for key:value data you end up writing JavaScript structures as strings that end up being interpreted as JavaScript anyway. (see: Knockout JS)\nYou could dump data into the <head>, but I suggest that only because of the way Turbolinks works and not because it seems like a good option.\n. A typical use case of a <script> at the bottom of the page is a bootloader that instantiates objects specific to that page. Open a web inspector on facebook.com or youtube.com for examples.\nTurbolinks makes page-specific bootloaders, at least in <script> tags, impossible because they won't run on popstate.\nIn your use cases, how do you pass page-specific data that doesn't belong on a DOM element to JavaScript if you can't use <script> tags in the body?\n. youtube.com is passing configuration options for the current page. There's more than is useful to paste here, but open an inspector and see for yourself.\nIf you inspect amazon.com, it is passing information about the item you are viewing and which submodules to load for that item.\nPutting a lot of information into data- attributes is overloading the purpose of those attributes with info that is only intended to be interpreted by a script.\nIf you don't execute the scripts on popstate, the page is not fully executed. Re-rendering the HTML without running its <script> tags gives you a partial state of that page.\n. The issue in #90 was that someone was binding event listeners in a <script> tag. That is a bad idea, but that doesn't mean executing <script> tags is bad.\nAssigning variables to document.body like you suggested when someone else reported this as a bug, gives the DOM unnecessary references to JavaScript objects. If that is the route you suggest, Turbolinks is not a drop-in solution but a library that requires rather specific changes to JS to work.\nHere is an example that is demonstrable of what YouTube, Amazon, and Facebook are doing on their pages but applied to GitHub:\nrepository.js:\n``` js\nfunction Repository(ownerName, repoName) {\n  this.ownerName = ownerName;\n  this.repoName = repoName;\n  this.pollUrl = Repository.pollUrlTemplate\n    .replace(\":ownerName\", ownerName)\n    .replace(\":repoName\", repoName);\n}\nRepository.pollUrlTemplate = \"/:ownerName/:repoName/updates.json\";\nRepository.prototype.poll = function() {\n  $.getJSON(this.pollUrl, function() {\n     console.log(\"We're polling now.\");\n  });\n};\n```\nrepository.html.erb\n``` html\n  ...\n\n    // Bootloader like I mentioned in previous comments\n    new Repository(\n      &lt;%= @repository.owner_name.to_json %&gt;,\n      &lt;%= @repository.name.to_json %&gt;);\n  \n\n```\nYes, you could litter the DOM with data- attributes for this data. With large amounts of data or data that doesn't belong in the DOM, that doesn't make sense.\nYes, you could give the DOM a reference to your JavaScript object via document.body.\nBut those are workarounds to fit with Turbolinks world. If Turbolinks executed <script> tags on popstate the same as clicking your back button does, it would behave the way a browser does.\n. The example is ultimately irrelevant here. We can both come up with examples to prove our own points. #91 was merged because it fit someone's use case, and I find that unfortunate.\nExecuting <script> tags is part of rendering a page. Whether you get to that page via your history or by clicking a link and moving forward, you are still rendering a page.\nTurbolinks is reimplementing browser navigation, and executing <script> tags when a page is rendered is expected. When you click the back button in your browser on a plain old HTML site, <script> tags are executed.\n. > > Turbolinks is not a drop-in solution but a library that requires rather specific changes to JS to work.\n\nCorrect.\n\nShould it really be enabled by default in new Rails projects then?\n. I understand the arguments for the way the library currently works and see that it will likely stay that way.\nA choice not mentioned yet would be to allow the user to add more state to the pushState call to store the things I mentioned in the bootloader. However, that would make developing for Turbolinks a conscious effort rather than the drop-in speed boost that it is selling right now (The docs claim, \"It just works.\"). It has already started down that road, which is why I question whether this belongs as a core Rails library.\n. This is an interesting discussion, and if you take it to the extreme of tracking every DOM node automatically you can get something like what I've put together: https://github.com/ssorallen/turbo-react\nturbo-react doesn't modify Turbolinks. It monkeypatches document.documentElement.replaceChild, the method Turbolinks calls at the end of the loading process, with a version that turns the HTML into JSX, then uses the JSX parser to convert to React function calls, and then lets React do its DOM diffing and minimal updating. This limits the manual cues needed from the developer and needs no extra help from the server.\nThe HTML -> JSX -> React combination behaves similar to ideas mentioned above: it tracks DOM nodes with unique IDs (data-react-id) and updates only parts of the page that have changed. Node IDs are determined by their path in the tree, which means if their path changes between renders it will not be considered the same node. That's where something like data-turbolinks-partial has an advantage: the developer can mark nodes as being the same across renders even if the nodes move within the document.\n. @dhh Yup, I don't think innerHTML is a bottleneck, and I didn't mean to imply turbo-react was fixing a bottleneck or any problems in Turbolinks. I added React as an experiment to have finger-grained automatic mutations than documentElement.replaceChild to enable things like CSS transitions. The example in the turbo-react README demonstrates a simple case:\ncss:\ncss\n.foo { transition: background-color 0.5s; }\n.bar { background-color: yellow; }\n.baz { background-color: blue; }\ndoc1:\nhtml\n<body>\n  <div class=\"foo bar\"></div>\n</body>\ndoc2:\nhtml\n<body>\n  <div class=\"foo baz\"></div>\n</body>\nTurbolinks replaces the body with the body tag of doc2, but turbo-react finds that the minimum change to get from doc1 to doc2 is actually div.className = 'foo baz' (or maybe some use of classList if supported). With turbo-react you'll see the background-color transition.\n. @tmlayton I don't want to hijack this thread. Do you want to open an issue on turbo-react to chat? Happy to chat there.\n. ",
    "scottjacobsen": "I was about to open an issue like this. Then I did some experimenting and noticed chrome is the only browser that consistently runs script tags in the body when navigating the history anyway. So :+1:  to the way it works now. :heart_eyes_cat: \n. ",
    "brauliobo": "nice @dudeman. but it sounds to me that turbolinks is near that support, isn't it?\n. ",
    "tomichj": "Is it possible to correct the url attribute rather than nuking it?\n. There's a whole class of improvements that could be made that are url-based. For example, I've developed a feature to allow a link (via a data- attribute) to fetch a page from the cache by url if possible. It's a small addition but dramatically improves the user experience. But, it depends on the url in the pageCache.\n. BTW, I do see the url problem when the back button is clicked: document.location.href is incorrect when cacheCurrentPage is called via back button. I solved it in my own fork by adding url: to the state object pushed onto window.history, but this may not be the ideal solution.\n. ",
    "slbug": "only last one is full page load.\n. No asset changes. Opera Developer 18.0.1284.2  (Chrome/31.0.1650.4)\n. ",
    "2called-chaos": "I have the same problem and I only discovered it due to an somewhat edge case \"logout\" with a sudo/login_as session. I had in mind to redirect the admin back to the backend user page (where he started off with the sudo action). There is a change in the assets but I don't understand why turbolinks doesn't redirect to the already resolved destination:\n\nSince the logout action is visited twice the admin will logged out completely. Usually get requests shouldn't be destructive and I possibly should just add data-no-turbolink to logout links but I still would expect turbolinks to redirect to the already redirected target where the actual asset change happens.\n. ",
    "naofumi": "Cool!\n. ",
    "tzvetkoff": "I've rebased against current master, updated the code and changed the \"logic\" a bit to respect the name (keep_scroll)\n. Rewrote the patch to conform to the latest Turbolinks code and updated the PR description.\n. ",
    "morr": "@reed no it is not the only scenario. Keeping scroll position is also makes sense for applications with some turbolinks filters on left or right page side.\nPlease look at #66.\n\n. ",
    "drewhamlett": "I believe this will be more important with the new Turbolinks 3 partial changes.  Right now when the partial changes the page scrolls to the top.  This is not what you really want happening.  \nRight now I'm doing this.  Which was posted in one of the other issues about scrolling.\n``` coffee\n$(document).on \"page:change\", ->\n  window.prevPageYOffset = window.pageYOffset\n  window.prevPageXOffset = window.pageXOffset\n$(document).on \"page:load\", ->\n  window.scrollTo window.prevPageXOffset, window.prevPageYOffset\n```\n. I must be missing something, because I'm using the redirect to in this case.  I have a section on a page that gets updated, but the page requires a bunch of other data to re render that page, not specific the section that gets updated.  If I just use render I have to duplicate a lot of code to fetch all the other pieces of the page.\nUnless I'm doing something wrong?\n. \n. ",
    "vizo": ":+1:  Thanks guys, very useful. Browsing will look like on SPA :)\n. Please somebody merge this.\n. Ok let's say i want to refresh a partial list by pointing link to index action in controller.\nSo i need to point it first to another action which have redirect to index action to render it? Or is there any other way to use just one (same) action? \n. I know how turbolinks works, but i was hoping there is other simpler way to do it. \nI think  speed up navigation = refresh bits of the same page ;)\nActually this is what i did. I wrote jQuery plugin that finds all elements with attribute data-turbolinkvisit=\"{change: 'some_element_id'}\", binds click event calling \njavascript\nTurbolinks.visit(element.attr('href'), JSON.parse(element.attr('data-turbolinkvisit')); return false;\nIt would be nice to have this helper out of the box.\nP.S. Your scroll solution works perfectly, navigation trough page looks like on SPA.\nThanks for your help!\n. Ok it's my mistake. I set \"data-turbolinks-permanent\" attribute to element which is not in DOM for all pages (not permanent).\nBut anyway i think some human error should be printed in console.\n. Try with .on(\"page:change\", ready).\n. How many times alert(\"Change!\")? is triggered? Maybe it's not just once, so toggle_node is called more than once on single click.\nIn my cases i did:\njavascript\n$('#menu').off('click.jstree').on('click.jstree', '.jstree-anchor', function (e) {\n  $(this).jstree(true).toggle_node(this);\n});\nThis will bind \"click\" event just once.\n. I think this would also solve https://github.com/rails/turbolinks/issues/586. Triggering page:before-change should be moved to visit function. There are also known affected elements, so event.data could provide them.\n. @Thibaut it's ok, i understand. I made pull request https://github.com/rails/turbolinks/pull/588 if you are interested ... \n. I figured it out. If you are using jQuery, you must look at event.originalEvent.data.\nBut i still get just url property :(\n\nAttach affected elements to the page:before-unload, page:change, page:load and page:partial-load events (in event.data).\n\nI want to trigger confirm dialog on page:before-change (to cancel event or not), but i need also to know affected elements (if parent element of form will be changed, if not, i don't need to ask user). I think this is very common case.\nIs there a reason why page:before-change event.data holds just url and not also affected elements?\n. Hi @tortuetorche, you are welcome. Now is passing.\n. I can make separate PRs, but i don't know how, sorry. But it's time to learn :) Google said that i must do new branch with each change and then request PR on each branch? Is that correct? About tests, i am also new ... but i think there should be just few new tests, so i can try.\n. There are two more things:\n- In array of nodesToChange, elements with data-turbolinks-temporary attribute are dupliacted. This causes error and javascript stops (my PR solved that).\n- page:before-change event.data doesn't hold list of affected elements, just url.\n  So for example, if form on page is changed by user, you can't detect if form is child of elements that will be replaced in DOM, so you can't show confirmation box)\n. Ok clear. But as i know page:change event is not cancellable with event.preventDefault(), like event page:before-change? So how can i know first which elements will be changed and then prevent it? \n. I want to prevent it if form is dirty and user clicks cancel in confirmation box (\"Your changes will be lost. Continue?\").\nUse case:\n1. Page with form\n2. User do some input but doesn't submit yet (makes dirty form).\n3. User clicks on some other link (turbolink link, so some parts of page will be changed).\n4. page:before-change is triggered\n5. Inside event function you can show confirmation box just if elements that will be replaced in DOM affects dirty form, if not, don't show confirmation at all and change DOM.\n. I accept you opinion but it's sad because this data is already available, just not passed to an event.\nWhat i wrote is just one case. It's very useful when you have more forms on same page. I am not asking for new event, but for more information in event.data.\nBelieve me i tried a lot of workarounds before I made PR. I agree that you can do it with click events on all other links, but not all links are navigating away to other page in real application (some have just js events, also sometimes they are not links, just elements with click events, also canceled events and so on...). It becomes messy. Another problem is binding as a first event to trigger, before others (ugly workarounds to insert it as first, source: google). Also it doesn't cover if user press back button.\npage:before-change covers it all and it's right place to cancel or allow page changes (like it is), But my opinion is, we should really know what changes will be made in DOM, so we can decide smart (to allow or not). I guess that's why event.preventDefault() is available? But how can we decide smart just with URL (i also use multilingual URLs for SEO in my app)? From my point of view, URL information on client side is useless in real application (unless you use client side router). Correct me if i am wrong.\nImagine keypress event without telling you which key was pressed. I feel the same :)\nAlso i don't see a reason why not all page:* events have event.data object of all parameters (like \"change\", \"scroll\", \"url\", ..) to make it flexible for all use cases. This means unique API for all events and also more backward compatibility in the future, because more params could be added.\nTurbolinks could be very good substitute of other client side frameworks.\n. In my PR i moved page:before-change to place where you already know which elements are going to be changed (it is some logic behind, temp, keep, ...).\nI don't call it manually.\nI made patch before, but there you don't know all elements that will be changed (just listed). I must write logic for temp and keep and so on, so this is far from DRY. I can't use turbolinks logic out of the box.\nLooks like i will need to use my fork then.\nThanks anyway for your time.\n. Use case is when you update some resource \"inline\" (single page).\nFor example you have list of items with edit button which calls turbolinks.visit to edit inline (to show form for this item on list) and after save you do redirect_to with anchor to scroll back to saved item on list.\nBut without scroll true it doesn't scroll to anchor (to saved item on list).\nI can send you private message with link to my private app where i use this.\nI think if change param is exposed to server side, i don't see problem to expose scroll as well ;)\n. Yes i agree, this solution is better. Thanks :)\n. ",
    "wadako111": "+1\n. ",
    "jeremy": "I ran in to this same problem.\nNote that history state was originally replaced before page-change, but it was reverted: http://github.com/rails/turbolinks/commit/e1b0b20bd8b0c2703347a1c7ac5902fe59f7baa8\nNot sure why. The commit message doesn't explain. @davydotcom could you shed some light on this?\n. @Shoroh are you resetting cookiePath on page:update? https://github.com/wenzhixin/bootstrap-table/tree/master/src/extensions/cookie#cookiepath\n. TL3 offers major new features that TL5 immediately removes. That's a rocky road that doesn't offer clear landmarks. Where are we headed? Should we release TL3 or revise it to point toward TL5?\n. @Thibaut Yes indeed. Best to huddle up and discuss the motivation behind the ground-up rework. It was driven by pressures exposed by iOS/Android integration.\n/cc @sstephenson @packagethief\n. ",
    "ghiculescu": "Looks like this has been fixed by @dhh in https://github.com/rails/turbolinks/commit/52284eaa3a08fbe961939f3198db0e01b3058617\n. ",
    "phallguy": "With this change, it introduces a problem with history state and navigating back. For example\n- Start Page 1\n- Click Link to Page 2\n- Server redirects to Page 3\n- Click Link to Page 4\n- Hit Back Button, Page 3 is Sown\n- Hit Back Button, Page 3 is Shown again, should be page 1\nThe problem seems to relate to reflectRedirectUrl which uses currentState instead of window.history.state. currentState is set by changePage so calling reflectRedirectedUrl before changePage uses the wrong state.\nChanging reflectRedirectedUrl to use window.history.state instead seems to resolve the issue.\n. ",
    "knuton": "Great, thanks!\n. ",
    "seanwash": "+1 I'm also having the same issue. Any help is appreciated!\n. +1\nRails 4.1.1\nTurbolinks 2.0.2\nSafari 8.0, mobile safari iOS 8\n. ",
    "aivils": "I use lib https://github.com/desandro/imagesloaded\nand https://github.com/kossnocorp/jquery.turbolinks\nThese both allow my write a code:\n$(function(){\n  imagesLoaded('#main_background_image', resize_promo);\n});\nbecause jquery.turbolinks fire jQuery DOM ready on turbolinks page load\n. ",
    "chrisjacob": "How about this? ... should work for first page load, new page load, and restoring a page from cache?\njavascript\n    /*\n     * Window.onload will be triggered on the first page load as normal, and then manually for Turbolinks pages.\n     */\n    window.loadEventsBound = false;\n    $(document).on('page:change', function(){\n        if(window.loadEventsBound) {\n            // Assuming all JS and CSS is downloaded and processed on the first page load...\n            // ...then when loading a new page via Turbolinks the only thing delaying Window.onload is Images.\n            // So use: http://imagesloaded.desandro.com -- and JavaScript is all like \"You images done yet or what?\"\n            imagesLoaded('body', function(){\n                $(window).trigger('load');\n            });\n        }\n    });\n    $(window).on('load', function(){\n        window.loadEventsBound = true;\n        console.log('Window loaded');\n    });\n. ",
    "markopostma": "It's confirmed to be a Chrome bug in the new version (31.0.1650.48), issue has already been discussed at: https://github.com/rails/turbolinks/issues/278\n. ",
    "ronanrodrigo": "It is exactly my version. Thanks\n. I se in console a request from chrome run twice. On safari, just one.\n. ",
    "macpoint": "No, neither moving jquery.turbolinks after jquery_ujs, nor removing it for good did not help. Still no request sent.\n. Submitting the form calls a create action that responds with create.js.erb here: https://gist.github.com/macpoint/7571979\nInteresting is that I have a similar destroy action which also responds with javascript and this works ok. The difference is that destroy action is called with link_to while the failing create action is called by submitting the form.\n. Yes, it is indeed inside a table, spanning across multiple td tags. Moving the form tag before the table tag really helped and it is working now! Did not expect this could cause the issue, although I knew it would fail the HTML validator. Anyway, thank you for your help.\n. ",
    "blinkist": "After some more research, I totally agree that it isn't a super reliable solution to only check for this header field. Maybe we should add a regex for the Content-Type\u001c header / MIME type, too? Having another positive check on top would make it more likely to have an AJAX request. \nI saw in the sources that turbo links assembles its own XHR request including headers. We could add another line into the turbolinks.js.coffee saying xhr.setRequestHeader 'X-Requested-With', 'XMLHttpRequest'. BTW, sending a turbo links call as script response for the redirection wouldn't make sense at all when the library isn't available. When we think even further it would maybe make sense to add a X-Turbolinks-Request = true or something similar.\nAfter all, there should be a differentiation in the response depending on the request that is handled by turbo links instead of including a test into every controller separately using the respond_to block.\nIdeas? \n. @dhh Is there any input from your site on this topic?\n. ",
    "tomafro": "I'm afraid not, at least nothing interesting.  We had hoped the issue would resolve itself in a patch release, but as of Android 4.4.2 it is still present.  Our workaround at present is to add data-no-turbolink to the html tag of pages when requested via an Android WebView, disabling turbolinks.  Not ideal, but at least it keeps things working.\nThe issue seems in the implementation of document.history.pushState, but exactly what I'm not sure.  I think the Android developers could easily make the case that when using something like turbolinks that the standard callbacks should not be called, as Android itself does not know when the page starts and finished loading (or even really how to override the url change).\n. That's cool by me. We've disabled turbolinks so aren't likely to come up with more info.\n. @jayohms Do you know anything about the latest state of this? Are we using turbolinks on later versions of our Android app?\n. ",
    "nonameolsson": "Any news about this? Or is there a workaround? We must use turbolinks in our application, but it would be really good to be able to use it in a WebView in Android.\n. ",
    "Kbutler": "Hi Reed,\nThanks for the reply.\nI also found https://github.com/zurb/foundation/issues/3642 and http://railscasts.com/episodes/390-turbolinks is also useful.\n..Keith\n. This has been addressed with Zurb\nhttps://github.com/zurb/foundation-rails/pull/50\n. ",
    "mrfoto": "This is not a Turbolinks issue - it's Bootstrap default functionality. You can change it like so http://stackoverflow.com/questions/9685968/best-way-to-make-twitter-bootstrap-tabs-persistent\n. Well I guess better question would be - is there something that you would want to run on page:load that you don't want to run on DOMReady. Cause that's my issue. Cause for DOMReady you don't go via page:* turbolinks events anyway.\n. ",
    "hardywu": "Then how to distinguish the normal page load from a page:restore? \nIf one want to execute js on the initial page load, page:change would cause the js executed on a page restore. Putting the js codes at the end of the html.body looks a bad practice to me.\n. Thanks @reed, I missed that point. \nI forget to mention I am not using Jquery. \nwindow.onload = () ->\n  runYourCode()\ndocument.addEventListener \"page:load\", ->\n  runYourCode()\n. ",
    "yoyos": "Thanks my life saver!\n. ",
    "semaperepelitsa": "Do I understand correctly that IE8 still does not gracefully degrade since it doesn't trigger page:change? So any javascript page setup would be skipped.\n. I understand now that you just fixed the crash in this pull request. I have created a new issue since it is not really related.\n. @DHH, since you were the author of the change, can you please give your opinion on this? I imagine most Rails apps must support IE 8. And Turbolinks is advertised to gracefully degrade in older browsers which isn't true anymore.  We are stuck at Turbolinks 1.3 currently.\n. @reed \nThanks for your help! I have deployed this solution for a while now and it works fine. Here is the final code for reference:\n``` coffee\nhit = ->\n  ga('send', 'pageview')\nhit()\n$(document).on \"page:load page:restore\", hit\n```\n. ",
    "gersmann": "I experience the same issue. My application broke, because in IE8 Turbolinks doesn't trigger page:change anymore on document ready.\nIs this desired behavior? It looks pretty wrong to me.\n. Hi John, that the application didn't work before might be true if I had been using the previous minor version of Turbolinks. I have been using Turbolinks 1.3.1 though before I upgraded. 1.3.1 didn't trigger page:change on DOM ready for any browser.  2.0.0 changed this behavior.\nI guess, then 2.0.0. is to blame for introducing behavior which just doesn't work in IE8. Anyhow, I am using jQuery and I fixed this for my application using jQuery. I just find it a bit troubling, bc I assume that most commercial web sites still need to be compatible with IE8.\nThe 'proper' solution from my point of view then would be to disable 'page:change' on document ready for any browser / version. But as I mentioned, my specific problem is solved using jQuery, just my 2 cents.\n. I think the idea behind JQuery UJS is that the JS framework should be pluggable though I don't think there is a different implementation. I just find it strange that there is Turbolinks has default functionality (page:change on DOM ready) that doesn't work in IE8. I'm also not sure about the support status of Rails for IE8, but to my knowledge it is still quite common in the real world.\n. ",
    "wael34218": "Sure, so lets say my javascript code generates slider on page load. When I open the page for the first time, the page will generate 1 slider. If, I navigate away from the page then go to the previous page again it will generate 2 sliders.\nTo make sure I understood the problem, I placed a debugger statement inside the page on load script. The code stopped at that debugger statement with a number equal to the number of times the page is loaded. Each time debugger statement stopped at different source name starting with VM and ending with different 5 digit number.\nI searched a little bit about VM. VM[digits] are a dummy name to help distinguish code which are not directly tied to a file name, such as code created using eval and friends.\nhttp://stackoverflow.com/questions/17367560/chrome-development-tool-vm-file-from-javascript\nThank you for your response, I really appreciate it.\n. @jonnymacs yes my scripts are in $(document).ready event and I am using jquery-turbolinks.\nMy website will need a lot of work to get rid of all the $(document).ready scripts for many specific pages. I temporarily disabled turbolinks until we have time to make all these changes, or make a hack to fix it.\n. ",
    "jonnymacs": "@wael34218 are your scripts inside a jquery $(document).ready event?  \nI can repro this problem when I have a script in the body of a page and it's wrapped in a jquery $(document).ready event.  I'm running jquery-turbolinks.\nI have a few pages where I bind an autocomplete list to an editable div for a typeahead feature.  I rewrote it so this binding script does not depend on a $(document).ready event and all is well\n. I ran into this problem again where I am dependent on the document being fully loaded before executing some scripts that are delivered in the html body.\n@wgc-as this is a clever approach... This is probably the right solution, but I haven't been able to find a good way without the angular $compile method.\nso meanwhile - \nI implemented a more hacky solution of setting a jquery global variable in the script tag that is returned in the html body.  There is a check for this global in the $(document).ready in my main common.js file.  It's disappointing bc this check will run on every page, but it works.\nso it's something like\n```\n//common.js\n$(document).ready(function(){\n  if($.condition_var == true) {\n    $.condition_var = null\n    //do what I want when $condition_var is true\n  }\n});\n//body markup.haml\n:javascript\n  $.condition_var = true\n```\n. ",
    "wgc-as": "We had a somewhat similar problem when we enabled Turbolinks: the script tags in the body were executed twice.\nWe are also using Angular in our pages, and reinitialize Angular in a page:load listener, like this:\ncoffee\nangular.module(\"iOApp\").run ['$compile', '$rootScope', '$document', ($compile, $rootScope, $document) ->\n  $document.on \"page:load\", ->\n    body = angular.element(\"body\")\n    compiled = $compile(body.html())($rootScope)\n    body.html compiled\n]\nIt turned out that the body.html compiled call also executes the <script> tags, so the solution on our side was to turn off the script evaluation by Turbolinks by adding a data-turbolinks-eval=\"false\" attribute to the <script> tag in the body.\nMaybe it helps others who ended up on this page :)\n. ",
    "michaeltrilford": "\ndata-turbolinks-eval=\"false\" didn't seem to work, as it broke other scripts from running :(\n\n. Hey Reed,\nIt is a script in the body. I have tried \"data-turbolinks-eval=false\", it seemed to cause some errors. I will try again, thanks.\n. Yeh, it seems to stop the scripts from running on the first load.\nE.g. \"http://salvattore.com/\" doesn't fire / run until I refresh the page.\n. Any ideas anyone? We are using Rails, and it is installed automatically.\nCheers.\n. Hello,\nI thought I would just attach one of the issues, and we can see what you suggest, them implement that on other parts of code which have errors.\nI believe the errors happen when the items are appended to the document. I have just extracted part of the code, as this is where the div is added. If you need the entire document, I can easily send that through.\njQuery touchTouch plugin:\n/* Creating the plugin */\n  $.fn.touchTouch = function(){\n```\nvar placeholders = $([]),\n  index = 0,\n  allitems = this,\n  items = allitems;\n// Appending the markup to the page\noverlay.hide().appendTo('body');\nslider.appendTo(overlay);\n```\n. ",
    "gaganmurghai": "@wael34218 @wael34218 @reed @reed @jonnymacs @michaeltrilford \nI am using angular 4 and adding a javscript (index.js) file in my html file on specific component. But when I trying to use that javascript's file function again and again from one component to another component, its calling multiple times. As I debug I can see \"VM40 index.js\" with my code. I think is the issue that my function is calling multiple time. If you guys have any solution then please let me know.. ",
    "rodrigoddalmeida": "No problem, @reed. Nice solution, by the way.\n. ",
    "murb": "Can this be changed to match /Firefox\\/2[6|7]/ instead of just version /Firefox\\/26/? It is still present in 27 beta and https://bugzilla.mozilla.org/show_bug.cgi?id=949471 suggests it will only be fixed in 28... please let me know when I should make a separate+fix for this\n. ",
    "ravzski": "the generated HTML is 100% identical for both .slim and .erb\n. Hi,\nThis is what's happening..\n\neven if I put data-turbolinks-eval to false every page load reloads all my css.\nThis behavior only happens if I use .SLIM on my application.html\n. Hi reed,\ncan you check this sample app\nhttps://github.com/ravzski/turbolinks_slim_test\nit's really weird because the generated html using the template is identical to the erb yet behavior is different.\nregarding the ChromeStdInjector.js, it's one of my chrome extension. Unfortunately that does not have any effect on the sample app.\n. Oh got it already.\nYea that's causing the problem.\nMy mistake was using http://html2slim.herokuapp.com/ on application.html.erb\nmy laziness..my mistake.. \n. ",
    "raw5": "I am facing the same issue. @satb Were you able to find any solution?\n. ",
    "jdurand": "At some point, I had an image tag like this: <img src=\"localhost:3000/placeholder/some_params\">, my app then redirected to an external URL based on a bunch of stuff and I would get this error.\n. I can't remember how in hell I ended up doing something like this, but try it:\n``` ruby\nroutes.rb\nget \"/tltest\" => \"app/application#tltest\", :as => :tltest\napplication_controller.rb\ndef tltest\n  redirect_to 'http://www.placecage.com/200/400'\nend\nSome view.html.haml\n= link_to image_tag(tltest_path), tltest_path\n```\nIf you click on the image and then click back, you'll get the error I'm referring to. You won't get the error on my fork.\nIn this case it doesn't matter much, but I remember that it somehow broke whatever I was doing.\nTurbolinks handles clicks and browser history. In this case the bug has to do with browser history management (tested on Chrome).\n. I agree, this is unorthodox. The example I gave was just to reproduce out the error. However, I think Turbolinks should handle requests the same way a regular request would be handled by the browser and not fail on this whether it's orthodox or not.\n. Yes it works!\nI found another JS Exception, but I think we'll have to live with it.\nIn the same use case, when clicking on the image Turbolinks will initiate an XHR and fail with 403 forbidden because the URL it's trying to fetch is on another domain. I looked around and couldn't find any solution to that. onreadystatechange never gets the 3xx response, so AFAIK there's no solution.\nWhat do you think?\n. It's all good then!\n. ",
    "ziyan-junaideen": "The javascripts are included on the head tag. Here is my layout file.\nhttps://gist.github.com/ziyan-junaideen/9c103494dfdc303d7e20\n. ",
    "pavelbeliaev": "I have the similar problem with bootstrap sidebar. In firebug i noticed jquery.min.js invoked many times on dropdown items. After disabling Turbolinks all works fine. \n. Thank you. I don't know yet, what better way in my case.  But it would be nice to make turbolinks work. \n. ",
    "Emprivo": "There are many existing JS components that break when using Turbolinks if you are defer-loading your JS (placing it at the bottom). A band-aid fix is to place them in the <head>, as is the case with the Bootstrap dropdown. But the cost of doing that is higher than the benefit of using Turbolinks, in my opinion.\nIf you MUST use Turbolinks, you'll need to move two parts of your JS to the top to make the Bootstrap dropdown work -- JQuery and Bootstrap.js.\n. ",
    "oppih": "I find a solution here: http://stackoverflow.com/questions/23937361/bootstrap-sass-gem-fails-to-load-js-for-dropdown-menu\nAdd this to the end of your application.js file :\n$('.dropdown-toggle').dropdown();\nThe dropdown should work now.\n. @marcamillion Later on I found myself added two lines of application.js that caused the problem. After I removed one then I just worked!\n. ",
    "plicjo": "A less hacky fix would be to add the jquery-turbolinks gem.\nThe reason the dropdowns aren't working is because they are bound to $(document).ready instead of $(document).on('page:change'), which is what turbolinks uses.\nThe jquery-turbolinks gem will make it so that ready calls will also respond to turbolink's page:change calls.\n_Step 1:_ Add gem 'jquery-turbolinks' to your Gemfile.\n_Step 2:_ Add it to your JavaScript manifest file, in this order:\n//= require jquery\n//= require jquery.turbolinks\n//= require jquery_ujs\n//\n// ... your other scripts here ...\n//\n//= require turbolinks\nBadabing!\n. ",
    "sameerkhanna": "Another cause for this could be you have your javascript placed at the end of body. It should be in the head. I noticed this when bootstrap dropdowns would work on initial page load, but not after subsequent clicks.\n. ",
    "colepanike": "@plicjo Thanks for the tips! That' got me working!\n. ",
    "bguban": "Use https://github.com/kossnocorp/jquery.turbolinks/blob/master/README.md to fix this problem\n. ",
    "barrkel": "Seconding this. It's especially tedious on mobile, where you may have a long way to scroll back to the top of the page, and no handy Home button to get there faster.\n. ",
    "arthurnn": "@pollinoco can you provide more content about what is broken? otherwise I would close the issue.\nthanks\n. cookies is an internal method of Rails AFAIK, so this would be a problem there too, not sure if we should do anything about tho.\n. thanks\n. thanks\n. :tada: :heart: :green_heart: :yellow_heart: :heart_eyes: \n. thanks\n. thanks\n. can you post the entire stacktrace? \nnot sure how to simulate this.\n. wonder why tests do catch this?!?\n. yeah... discussed this IRL with @Thibaut , and Redirect will not match the file name for autoloading, so we need to explicit require this file.\nthanks all\n. thanks all!\n. thanks\n. thanks\n. can remove this I think.\n. ",
    "zousandian": "@reed i have a img slider created by jquery.flexslider.js on one page, \nwhen link to this page through turbolink the slider won't show,\nit means the jquery.flexslider.js doesn't execute\uff1b\nthe slider will show until i refresh the page.\ni've already put the  jquery.flexslider.js in the previous page. but still not work.\ncan you give me some help?\n. ",
    "ramza1": "use jQuery(window).bind('page:change', function(){\n  //flex slider stuff\n})\n. ",
    "railsfactory-nandhini": "This works ... thank u\n. ",
    "hernansartorio": "Nope, just the default Gemfile installation, and I noticed it a few days ago. Tested on a vanilla Rails app too. \n. ",
    "darthdeus": "Is there any update on this?\n. ",
    "ankurp": "I am also having the same issue and the back button doesnt fetch or render the previous view.\n. ",
    "mihaibb": "Any news ?\n. ",
    "ErneX": "Same issue here, managed to get around it by appending the data-no-turbolink attribute to all the links on the page you need to have anchors in the meantime.\n. ",
    "ramschmaerchen": "This work around is not suitable at all though. Hopefully someone finds time to fix this issue. Thank you in advance.\n. thanks a lot!\n. ",
    "MathieuDoyon": "We create Laravel 4.1.* package inspired by your symphony bundle https://github.com/frenzyapp/turbolinks\n. ",
    "goooseman": "OK, for now I found a way to disable turbolinks to this page on an iOS with browser gem. I just use <% if browser.name === 'iPhone' || browser.name === 'iPad' %> data-no-turbolink <% end %> on every link to the page, where I use canvas.\nI will not push this change to the production server, until I will create a demo page, which represents this problem.\nUPD I have created a demo, so I will push the changes (turn turbolinks off for iPad and iPhone) to the server.\n. ",
    "passion8": "I have faced too . Please fix it . \n. ",
    "kamui": "I've just encountered this as well.\n. @reed Pretty sure it's iOS 7 only (maybe lower too?). I had this bug on my iPhone on an iOS 7 device. I also had iOS 8 beta on an iPad, but that had no issues. \n. ",
    "chadmmills": "I seem to be running into the same issue. I am rendering a Chart.js chart on a canvas element and it renders fine on a hard refresh. But when the page is visited through turbolinks, the chart will not show. \nEven if I reinitialize the chart inside a page:load event, it will not show the chart on the canvas.\nThe chart will render fine on Desktop Safari/Chrome/Firefox and even mobile Chrome for iOS, but not mobile Safari on either the iPhone or iPad.\nThanks for the help!\n. iOS 8 fixed the issue I was having as well. After running iOS 7.1 on the iOS Simulator I can reproduce the issue. So it does seem to be iOS 7-ish specific. Using turbolinks v 2.3.0. \n. ",
    "ArthurN": "+1 on this issue. I am running into it with this HTML5 signature pad library: https://github.com/szimek/signature_pad\n. ",
    "roymckenzie": "I am running into this issue as well with a website I am working on, except for it's related to the <video> element. When you refresh the page it works fine, but when you click to the page and then try to play the video the whole page crashes. \nPage that navigate from (http://www.propellerlabs.co/clients) to (http://www.propellerlabs.co/clients/cruise). When you refresh the 'to' page. The page will work fine. Going to disable turbolinks for iPhone until I can figure this out.\nEDIT: I have since removed Turbolinks from this project. The above links are no longer good for reference as of 10/27/2014.\n. ",
    "nicka": "Thanks for your comment!\nGoing to update my Gemfile. :+1: \n. @smidwap Updated my Gemfile and tested the enableTransitionCache function.\nI really like it. My interface feels a lot faster now. \nAlso like the fact that the page gets updated(if needed) after the request is finished in the background.\n. ",
    "mattsjohnston": "We're probably running into a weird edge case where they're actually equal for us. We are running a pretty standard rails app, but for our search page we're using Backbone.js with pushstate enabled. To reproduce this situation, we hit our search route, which then loads the search js app. You change a few filters, each of which does a pushstate to the url to update the filters params. When you click back through the states it all works within our backbone app, but when you eventually get back to the original search route with no parameters, turbolinks is refreshing the page after the url has already changed to '/search'.\n. Oh I see what you're saying. You're saying it's always going to be equal at that point. I guess we need some other way to disable the page refresh in this weird scenario I described above. We may just remove turbolinks altogether from the search page.\n. ",
    "ginter": "To give you a concrete example, these are the two sets of classes when on the home page vs the backend:\n\"front fluid top-full menuh-top sticky-top\"\n\"back fluid top-full top-dark menuh-top sticky-top sidebar sidebar-full sidebar-collapsible sidebar-width-wide sticky-sidebar\"\nSo it seemingly uses them to customize the different possible layout combinations mainly.\nHere's a link to the theme in case you're interested: http://bit.ly/1fwNqi2\n. In the layout\n. I have 2 layouts. For the front layout the html tag looks like\n\nfor the general application layout it looks like\n\"\n. Thanks for the suggestion\n. Yes it does what I need\n. ",
    "PatrickJS": "@reed .done()\n. ",
    "jxxcarlson": "Hi,  thanks so much for your reply.  I am attaching a screenshot.  The page\nfrom which the screen shot is taken extends well below the screen, which\nis part of the problem --- see below.\nIn my rails app (http://vschool.herokuapp.com) I have an editor in which\ncontent is created (usiing asciidoc / asciidoctor )  One column of the view\ndisplays the source file.  A second column displays the rendered output.\nAll OK so far.  When I press \"refresh\", the source is saved and the rendered\noutput is displayed.  This requires a trip back to the server.  As a result,\nthe display \"jumps back\" to the top of the source and rendered output.  I would\nlike to \"hold my place\".  \nI may be quite mistaken that this has anything to \ndo with Turbolinks --- I've been scratching my head and searching the \nweb for answer ... so far nada.\nThanks so much!\nJim\njxxcarlson@icloud.com\nhttp://square-the-circle.com\nOn Feb 18, 2014, at 5:39 PM, Matt De Leon notifications@github.com wrote:\n\nIt's not clear how Turbolinks plays a role in your problem. Can you clarify? Maybe post a screenshot of the pages your describing?\n\u2014\nReply to this email directly or view it on GitHub.\n. Thankyou! \n\nI will try this. \nJim\nSent from my iPhone\n\nOn Mar 8, 2014, at 9:07 PM, Nick Reed notifications@github.com wrote:\nYour screenshot wasn't attached, but I think I understand what you're saying. I'm assuming that the left column has a form and that the \"refresh\" button you mentioned submits the form. In order to get the result you're wanting, this form should be a remote form (remote: true) and the server should respond with the necessary javascript statements to update the right column with the rendered output. The page will not be reloaded and the scroll position will not change. And turbolinks will play no role in it.\nThere are other ways to do it, but that's the simplest. In fact, you don't even have to leave this page to see another way of doing exactly what you're wanting to do.\n\u2014\nReply to this email directly or view it on GitHub.\n. Nick,\n\nJust to let you know that after better understanding what you\ntold me about \nremote: true\n-- I have everything working to my satisfaction.\nThank you very much!\nJim\njxxcarlson@icloud.com\nhttp://square-the-circle.com\nOn Mar 9, 2014, at 3:05 PM, James Carlson jxxcarlson@mac.com wrote:\n\nThankyou! \nI will try this. \nJim\nSent from my iPhone\nOn Mar 8, 2014, at 9:07 PM, Nick Reed notifications@github.com wrote:\n\nYour screenshot wasn't attached, but I think I understand what you're saying. I'm assuming that the left column has a form and that the \"refresh\" button you mentioned submits the form. In order to get the result you're wanting, this form should be a remote form (remote: true) and the server should respond with the necessary javascript statements to update the right column with the rendered output. The page will not be reloaded and the scroll position will not change. And turbolinks will play no role in it.\nThere are other ways to do it, but that's the simplest. In fact, you don't even have to leave this page to see another way of doing exactly what you're wanting to do.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n\n",
    "twalpole": "I think instanceof should work with coffeescript classes although I havent tried it  in this case\n. or if you want to be sure its ComponentUrl and not an object further derived it \nX.constructor is ComponentUrl\n. You should just be able to do.  @original.constructor is ComponentUrl\n. @reed comparing 2 functions should be more performant than comparing two strings since it should boil down to just a pointer comparison\n. ",
    "joelcollinsdc": "2.2.1\n. gracias!\n. ",
    "pushrax": "Sorry, targeted the wrong repo...\n. Ahh, GitHub, your automatic buttons are too automatic. Sorry for the noise.\n. ",
    "nekogami": "Yes we are on master, version: 2.2.1\nThis is what we have in our Gemfile\ngem 'turbolinks'\n. I'll try by tomorrow it's already after work here XD. \nThanks for the quick replies. I'll let you know if it changes anything. \nCordialement,\nFran\u00e7ois TCHENG.\n\nLe 4 mars 2014 \u00e0 19:07, Nick Reed notifications@github.com a \u00e9crit :\nThat means you're using the latest released version, which is good, but we've made a few improvements that will be in the next release. So try those improvements out by changing your Gemfile entry to this:\ngem 'turbolinks', git: 'https://github.com/rails/turbolinks.git', branch: 'master'\n...and let me know if it makes a difference. I just want to make sure that this isn't something that we've already fixed.\n\u2014\nReply to this email directly or view it on GitHub.\n. Still no luck, I'm stil getting the current url instead of the previous one through request.referer request.original_url, with rails/turbolinks on master branch.\n. Same here, funny thing is that if I place the moving element BEFORE the form, it doesn't move :/\n\nRails: 4.1\nTurbolinks: 2.0.2\n. More informations:\nThe element placed BEFORE the form are not nested with this bug.\nIf the form is isolated by being placed inside a div, there is no nesting. Which could mean that only direct siblings placed AFTER the form are affected.\n. hmm it looks like ma app is also crashing after a make at least one redirect and then wait for a random amount of time :/\nI'll try to reproduce this on a clean env\n. Hey there, I created a little repo with steps in the readme to make safari 7.1/8 crash on a rails site with turbolinks and audio_tag\nhttps://github.com/nekogami/safari-7-1-turbolink-crash#readme\n. Oh, and it only crashed IF asset.debug is true ...\n. I confirm the DOM problem is solved (no dom mangling after a turbolinks page load is finished).\nBut I'm under the impression that we lost quite much in performance, but it may be just me.\nStill have the audio_tag problem though ...\nThanks for the fix !\n. Ok i'll try that then, thks !\n. ",
    "crhan": "Same issue. And I have test the master branch at 23e5937ca74d4e81f8322c7afb735d096186061d\n. ",
    "amisarca": "Thanks for the response, as it makes sense to me.\nBut I find these lines from the description a bit confusing then\n- POST :create => resource successfully created => redirect to GET :show\n  - Turbolinks ENABLED\n- POST :create => resource creation failed => render :new\n  - Turbolinks DISABLED\n. ",
    "btrepp": "I've noticed this too. Very annoying.\n. ",
    "xpepermint": "True.\n. Including\n``` ruby\n= require jquery\n= require jquery_ujs\n= require turbolinks\n```\ninto your application.js.coffee should work (this are the defaults).\n. @reed is there any other way to delay page change (e.g. 2000ms after a click is triggered on a website)? I would be happy if you could help me with an example. Many thanks.\n. ",
    "trinode": "Yep it's damn annoying, I don't plan on having errors but I can imagine some users thinking the whole site is down if back just shows the same error. plus I get plenty of errors during development and it's becoming frustrating.\n. ",
    "pierre-pretorius": "This issue is resolved by including turbolinks js in your error page.  Thanks to @Marnes for the solution:\n<%= javascript_include_tag 'turbolinks' %>\n@reed: Perhaps place turbolinks in the default rails error page?\n. @gaoguoxin ask this on stackoverflow it is not a turbolinks bug.  This issue can be closed.\n. ",
    "mrloop": "Turbolinks is used through out the project I'm working on, there's a lot less code to change using turbolinks with this amendment (2 lines excluding the formatting changes) than removing it and adding pjax. I'm trying to think of any other good reason you'd want to override the default page replace, but can't.\n. ",
    "xinuc": "+1 for this.\nI think there's nothing to lose by this, and there are many use cases people will need something like this.\nIn my usecase, I have a persistent websocket connection & some elements I don't want to replace everytime user clicks some links.\n. ",
    "lacco": "+1 for fixing this.My use case is asking the user if he really want to leave current page when there are dirty form fields:\ncoffeescript\n$(window).on 'page:before-change', (event) ->\n  targetUrl = ???\n  if $(\".dirty\").length > 0\n    AlertDialog.confirm \"Really want to quit page?\", (ok) ->\n      Turbolinks.visit(targetUrl) if ok\n    return false\n  else\n    return true\nOf course this can be done synchronously with window.confirm, but as soon as you have some asynchronous message dialog you are stuck. \n. ",
    "clarkewd": "I would also like to see this implemented\n. ",
    "neilsarkar": "+1\n. ",
    "ohadlevy": "@reed actually, I wrote this patch before 8eaf3f8 (as I was using the latest gem version) as I'm using it in a rails 3 project.\nI confirmed it works with rails 3, the missing piece is using ActiveSupport::Concerns.\nin either case, I would love to have a new version of the gem :-) thanks!\n. thanks!\n. ",
    "andoq": "The behavior for the transition cache should be included here - with the current pull, if the transition cache is enabled, even if the link includes 'data-keep-scroll', the page will be scrolled to the scroll positions from the cached page.\nI don't think it's good for the transition cache to use recallScrollPosition, really - this is not default browsing behavior.  When a user navigates to a new page, I expect them to be scrolled to the top, but the transition cache sets the scroll position unexpectedly.  I'm not quite sure of the use case scenario for recallScrollPosition in the transition cache, so my suggested fix would be to remove recallScrollPosition entirely and use this mechanism instead.  But perhaps there's a scenario I'm not aware of here.\n. ",
    "Burkazoid": "@DohanKim I am experiencing the same issue and would definitely appreciate seeing the added function. I think such an addition to Turbolinks would be very useful for people who do need to use history.pushState for other purposes which currently conflict.\n. ",
    "AlexRiedler": "I am using something similar to modal with pushState and would ideally like some way to do this as well. There currently is an issue on History.back() because there is no way to prevent a 'popstate' from propagating through into turbolinks. Even just some way to tell Turbolinks to do a History.back() without handling it would be perfect.\n. I thought a little more about this; It feels like a relatively large undertaking though...\nThe issue is that window.addEventListener on 'popstate' handlers cannot be prevented; so either we need to be able to hackily 'cancel' it when a popstate occurs and bind earlier then it; or be able to setup our own initialization so we can use our own event binding libraries such as jQuery.\nmaybe someone has any other ideas? I would consider moving it to use history.js or similar but in a way it is nice cause turbolinks is self-contained.\n. @javan the issue is that you cannot stop the turbolinks from firing their onpopstate event.\ne.g.\n- you have a custom modal that pushes their own state\n- you hit back button (you don't want turbolinks to handle this pop cause the page has not changed)\n- there is no way to stop the propagation to the turbolinks handler, or make it stop since its binding natively (if you bindFirst in the stack of popstate handlers in for say jquery, you could stopImmediatePropagation, and return false).\n. I worked around this by forking and adding a cancel function to the api, which cancels for one popstate. It's not ideal, but it does the job in my scenario. Really when dealing with pop state you need to be able to control the event stack manually and delegate it as necessary.\n. @jvenezia its easy to add a turbolink state yourself; just using the visit action (but maybe I am misinterpreting)\n. err, how did this happen... my bad\n. ",
    "jgrannas": "I am having a similar issue. I am updating my page with an ajax response with data-remote on an anchor tag and manually calling history.pushState in the JS response to make the URL match the proper page.\nhistory.pushState({}, '', '<%= request.path %>');\nHowever, this causes the back button to no longer work, i have to manually refresh to get my page changes. I also tried adding data-no-turbolink to the anchor tags but that makes no difference. Is there a way to use turbolinks to update the URL rather than me manually calling pushState? Or a way to force reloads on back/next?\nI'm on turbolinks 2.5.3 and rails 4.2.0\n. ",
    "jvenezia": "Not sure to understand this issue, but mine seems related.\nI need to call history.pushState() manually, and the back button does work for those manually added states.\nI worded around by visiting the url my self when window.onpopstate is triggered.\nIt works, but I would prefer to have something to add a Turbolink state my self.\n. @AlexRiedler Actually, I need it to be different from a turbolinks visit. I need to update a section of my page (without reloading everything), and keep the history.\nHere's what I did:\n``` coffeescript\nwindow.onpopstate = (event) ->\n  if event.state && event.state.isMyCustomState\n    Turbolinks.visit(document.URL)\n...\nhistory.pushState({isMyCustomState: true}, '', url)\n...\n```\nIt works well, but i'm not sure it is the best way to handle this.\n. I just realized that it works perfectly using a state similar to turbolink's:\ncoffeescript\nhistory.pushState({turbolinks: true, url: url}, '', url)\nThis way, the back event is handled by turbolinks.\nSorry, it may not be related to this issue.\n. ",
    "thomasdavis": "Thanks @jvenezia I imagine you just saved me a bunch of time!\n. ",
    "jaredhales": "\nProviding public APIs for doing pushState / replaceState via Turbolinks wouldn't be a bad idea. Feel free to open a PR.\n\n@Thibaut Any reason why this can't be marked as a \"Feature Request\" and left open?\nFor now I'll use the solution proposed by @jvenezia but I'd like to replace that in the future if/when someone is able to implement a public api for this.\n. ",
    "agnjunio": "Here`s what I did:\nfunction changeUrl(newUrl, options) {\n    if (window.history.state.turbolinks)\n        window.history.replaceState(options, document.title, newUrl);\n    else\n        window.history.pushState(options, document.title, newUrl);\n}\nIt works well\nEDIT: ...unless you need to make an a href from the page and go back\n. ",
    "mattgibson": "This fixes an issue I just ran into where using an anchor link makes it necessary to press the back button 2 or 3 times.\n. ",
    "mrhead": "In my case issue is present in chrome. Version 34.0.1847.116\n. ",
    "mlilley": "This issue occurring in Chrome (win) version 35.0.1916.114\n- refresh page: autofocus works\n- come to page from another: autofocus doesn't work\n- remove turbolinks: autofocus works\n. ",
    "brandonhilkert": "Same for me on OSX with Chrome Version 35.0.1916.153\n. ",
    "chuck-john": "Linux Chrome v35.0.1916.153 experiences this as well.  Submitting a new issue.\n. @reed Sorry for the delay.  Yes, I was seeing the issue in the Turbolinks master branch (v2.2.2).  Haven't tried it with Chrome 36 though.\n. ",
    "twiz718": "any updates? when can we expect a fix?\n. jquery-turbolinks (2.0.2)\nturbolinks (2.2.2)\nI am using Google Chrome 36.0.1985.143 (installed via google-chrome-stable pkg) on Ubuntu 14.04.1.\nI have a form with an input like this:\nhttps://gist.github.com/twiz718/21b0248a6ea0d78b161c\nWhen I navigate to the form page, it does not autofocus this field.\nOnce on that page, I hit refresh. The autofocus takes place.\nIt should autofocus when navigating to that page w/o needing a refresh of the already loaded page.\n. Yep, that works. Thanks reed. \n. ",
    "bluehallu": "Just ran into this, bundle update solved everything!\n. ",
    "juniorjp": "My bad. The form tag was not closing properly. Sorry.\n. ",
    "seekayel": "Thanks @reed that all makes sense.\n. ",
    "dmastylo": "Just ran into this problem. Odd that it hasn't been addressed yet.\n. Looks like it only happens in Chrome, and this might be an alternate solution as well: http://stackoverflow.com/questions/20051244/turbolinks-with-carrierwave-images-as-css-background-image\n. I actually went with the reload script you posted above. Works well.\n. ",
    "hakunin": "It would be awesome if tips like this one could make it into the wiki. For someone just starting with turbolinks (like myself) it would save a lot of headaches and production issues to just go through some gotchas and implement appropriate workarounds.\n. no longer using turbolinks in my app\n. ",
    "remiprev": "I\u2019m using Masonry to build a tile layout in my page.\n``` js\nfunction TileList(element) {\n  this.masonry = new Masonry(element, {});\n}\nTileList.prototype.destroy = function() {\n  this.masonry.destroy();\n}\n$(document).on('page:load',    function() { window.tileList = new TileList; });\n$(document).on('page:receive', function() { window.tileList.destroy() });\n```\nThis code works fine most of the times. When I\u2019m leaving the page, it removes the Masonry behavior from my element (unbinding events and reverting the tile layout).\nThe problem is if the assets (CSS or JavaScript) have changed by the time I click on a link to go to another page, there\u2019s a small delay because the browser refreshes the page and there\u2019s a noticeable change in the layout (because the Masonry behavior was removed) while it loads the other page.\nThis happens because the processResponse method can take some time before it does something and I only want my event to be triggered if it does nothing special (ie. if it doesn\u2019t halt the regular Turbolinks flow).\nThis is why I think we need to add this page:processed event, because it\u2019s the only event that we are 100% sure will be triggered if the Turbolinks flow isn\u2019t halted, just before the page is changed.  The page:receive event happens a little too early for me to unbind events and destroy components because it can leave the page in a broken state if the Turbolinks flow is stopped.\njs\n// This will work everytime, because we are 100% sure that the event\n// will be triggered when the page is just about to change\n$(document).on('page:processed', function() { window.tileList.destroy() });\nI hope I\u2019m making myself clear. If not, tell me :smile:\n. Oh cool, thanks for the followup @reed!\n. ",
    "jjoos": "The page I was talking about fetches a list and has some state (also variable used below). Every time (user changes state or on initial page request) the list is fetched from the backend:\n``` coffeescript\n  # We want to update the url and the cache (both our cache as the Turbolinks one)\n  list.on 'sync', (collection, response, {initial_sync}) ->\n    if initial_sync == true\n      window.history.replaceState {\n        turbolinks: true,\n        url: collection.absoluteUrl()\n      }, window.title, collection.absoluteUrl()\n    else\n      window.history.pushState {\n        turbolinks: true,\n        url: collection.absoluteUrl()\n      }, window.title, collection.absoluteUrl()\ncache[collection.absoluteUrl()] = response\n\nif Turbolinks.supported\n  Turbolinks.rememberCurrentState()\n  Turbolinks.cacheCurrentPage()\n\n```\nAnd then when the page get restored we reset the state, so we don't need another fetch:\ncoffeescript\n  $(document).on \"page:restore\", (event) ->\n    if cache[location.href]\n      # We should replace the state instead of pushing, since the url is already\n      #  correctly reset by Turbolinks\n      state.set cache[location.href], replace_state: true\n. This bug is present in at least version 37 and 38 and isn't present in 35.\n. ",
    "RoryDH": "Honestly, I haven't had to look at this in quite a while. Using request.xhr? is probably fine actually seeing as you'll know whether it's a page as opposed to JSON which you're rendering.\nThanks :+1: \n. ",
    "collimarco": "Same issue here with I18n. I think that turbolinks should automatically update lang attribute on html tag because it's something standard and relevant. Why not update it as we do with title?\n\nAlways use a language attribute on the html tag to declare the default language of the text in the page. \nhttp://www.w3.org/International/questions/qa-html-language-declarations\n. \n",
    "tezzataz": "No worries, thanks for getting back to me!\n. ",
    "davidguthu": ":+1:\n. ",
    "Fire-Dragon-DoL": "I don't think turbolinks is inteded to work with AngularJS, in theory angular is used to create SPA, so what's the purpose of using it with turbolinks?\n. ",
    "Frank004": "```\n\n\n\n              Lava mano Puntuaci\u00f3n: 9\n\n\n\n\n\n\n\nPuntuaci\u00f3n 9 - Bueno      Seleccione Puntuaci\u00f3n\n10 - Excelente\n9 - Bueno\n8 - Satisfactorio\n7 - Regular\n6 - Deficiente\n5 - No aceptable\n\n\n\nEditar\nEliminar\n\n\n\n\n\n```\n. Im having the same problem where I use the remote:true\n. ",
    "isratrade": "Thanks @dhh.  closing this issue.\n. @dhh, @reed, why not accept PR #358 which adds ActiveSupport::Concern and makes turbolinks work with Ruby 1.8.7? I created a fresh rails new app on 1.8.7, added turbolinks, and got following the error.  I think there should be a difference between \"not supported\" and \"not working\" out-of-the-box.\nsuper: no superclass method `url_for' for #<#<Class:0x7f15a629ea88>:0x7f15a629bab8>\n. @reed, thanks for the fix on 1.8 so it doesn't throw an error. \n. ",
    "walterdavis": "Thanks so much, very nice of you.\nWalter\nOn Sep 13, 2014, at 7:19 PM, Nick Reed wrote:\n\nClosed #384 via 7de4e46.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "IvanUkhov": "@reed, may I ask for some feedback. If the feature is not that useful, please close the pull request. Thank you.\n. @reed, thank you for the detailed answer!\n. ",
    "loureirorg": "@dudeman unfortunately if I do this, turbolinks will be disabled for this code: it will load/compile/execute my script every time I change the page - this is not what I'm proposing here. What I propose is to maintain the exactly same behaviour of turbolinks (the script be loaded/compiled/executed only at the first time), but be placed inside the body tag. The goal is to keep all the good qualities of turbolinks, but also add the advantages of put the JS at bottom of body tag.\n. ",
    "dogweather": ":+1: Thanks @dudeman for the good explanation.\n. ",
    "avilyn": "In what version of Turbolinks should this be fixed? If this isn't fixed in a released version, can you point me to the commit that should resolve this?\nI'm using Turbolinks 2.2.2. I can reproduce in Chrome 36, Firefox 30, and Internet Explorer 11 on Windows 7.\n. Ah, here it is: https://github.com/rails/turbolinks/commit/3aab7249bb0b695b49f2a31493653f0dce87729c\n. ",
    "rajatgarg79": "Did you find a solution to this issue? I am having the same problem\n. I removed turbolinks as well\n. ",
    "dieuit07": "Because I using rails 4. have gem 'turbolinks'. It is the reason the JS not load again. So I remove it from my gemfile. And it work\n. ",
    "ashanbrown": "One other use case I have is a situation where I am adding css assets to the head dynamically based on some javascript.  Marking these dynamically added links as data-turbolinks-track completely fails with turbolinks because it compares the final head from the current page with the initial unexecuted head from the fetched page, so it always reloads the page.  So I instead just create a digest of both my assets and again use the fake script approach to force turbolinks to reload the entire page.  If I could say\nhtml\n<meta name=\"<my digest>\" data-turbolinks-track>\nthen I wouldn't need the fake script approach.\n. Just found another use for this.  The keywords and description meta tags are varying between my pages but turbolinks prevents them from being updated.  I'm just throwing them into the digest I used as a query param for my fake asset, but it would be easier if I could just mark each of those meta tags as data-turbolinks-track.\nI'll add that I'm more than happy to make a pull-request for this but I'd like to know that a feature like this would be considered.  Thanks.\n. Yes, I hadn't realized that.  I do see this has been discussed before at https://github.com/rails/turbolinks/pull/165.\nMaybe my css asset choice case is a better example of why this is useful.  In any case, unlike the pull-request mentioned above, I'm not suggesting trying to find and replace the tags.  I'd just like to force a reload if they have changed and currently to make this possible I am using this fake-asset?<digest> hack.\nThere are also other meta tags in my application that vary from request to request, such as\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\nwhich is only inserted in the head if I believe you are using a mobile browser (the same case where I'm delivering a different css asset).\n. I should add that the reason I can't pick the css asset when I generate the header that is that I'm doing a javascript-based browser detect.  I want my pages to be cacheable by a cdn (although I'm only using memcached in this particular case), so decisions about which css to link to need to be based on javascript browser detection (or a user-controllable cookie, which I imagine some people would prefer).\n. ",
    "kamilpogo": "@dhh: There is one reason to have meta tags updated with turbolinks:\n- System: Windows 8/8.1 and IE10 / IE11\n- Page supports pinning and uses meta tags \"msapplication-config\", \"application-name\",...\nWhen the user was browsing your page and pins it, windows loads the configraion from msapplication-config meta tag when the page was fully loaded - not from the acutal page. \nSee http://msdn.microsoft.com/en-us/library/ie/dn439794(v=vs.85).aspx\n. ",
    "Ravenstine": "Sorry, this is basically a duplicate issue.\n. ",
    "yaneeka": "Moving this to StackOverflow (http://stackoverflow.com/questions/25022441/is-there-a-way-for-turbolinks-to-run-within-rspec-capybara) and closing here.\n. ",
    "masonjm": "I ran into this using jQuery UI Tabs with some custom handlers to store the active tab in the anchor: https://gist.github.com/masonjm/0ad6206007394ef2e084\n. ",
    "bryannovoed": "Could the updated version of this gem be published to rubygems?\n. ",
    "tirdadc": "@rmosolgo, do you have to write custom code to properly mount/unmount your components? I'm using Turbolinks 2.5.3 with the latest version of react-rails, and I noticed that some components do not get mounted properly when they are fetched from cache.\nIf you have an example of your custom work, that'd be great.\n. Figured it out, I had two conflicting declarations that resulted in the correct binding being overridden (ie one binding was from a React component and one was a generic one for dropdowns).\nI didn't need to unmount anything manually, and I still have turbolinks caching enabled and it works fine!\n. ",
    "mattbrictson": "Thanks for the review. Is this an accurate description of the POST/PUT\u2192GET flow?\n1. Browser sends a POST request.\n2. set_request_method_cookie is called, which sets a request_method cookie to POST.\n3. Rails sends a 302 redirect using e.g. redirect_to post_path(@post). The 302 redirect includes the request_method cookie.\n4. Browser receives the 302, stores the cookie, and sends a GET request based on the Location header.\n5. set_request_method_cookie is called, which sets a request_method cookie to GET.\n6. Browser receives the GET response and stores the cookie.\n7. Turbolinks initializes because the request_method cookie value is GET.\nWhat you're saying is that without step 5, the browser cookie would still have the POST value from before, preventing Turbolinks from initializing.\nDid I get that right? Thanks for your help!\n. Got it. I'll close this PR and consider a different approach.\n. Unless I'm mistaken, cookies.delete will still cause the Set-Cookie header to be sent in the response. My goal is to eliminate the Set-Cookie header to allow public caching.\n. Hmm, I think you're right. I'll incorporate the cookies.delete solution and rebase this PR.\n. @reed I've updated the PR based on our earlier discussion. Now cookies.delete is called on the GET request, ensuring that the existing cookie is cleared, if it is exists (e.g. in the POST\u2192GET redirect scenario).\n. I'm also using 2.5.1 with Rails 4.1.6 and jquery-turbolinks, and the progress bar doesn't work. I'm testing in Safari 7.1.\nAfter adding Turbolinks.enableProgressBar(); I saw no effect.\nFollowing the example in the README, I next added the following CSS:\ncss\nhtml.turbolinks-progress-bar::before {\n  background-color: red !important;\n  height: 5px !important;\n}\nNow I see a brief flicker of red in the top-left corner of the page, but that doesn't seem like the intended behavior. Even if I create a page that takes a full second to load (i.e. sleep(1) in the controller), no progress bar appears. Instead, I see no indication of page loading during that 1 second, followed by a flicker of red after the page finally paints.\nI've switched to Pace.js which works perfectly (it shows a moving progress bar during page loads/pauses as expected): http://github.hubspot.com/pace/docs/welcome/\n. Changing the z-index worked. Thanks!\nSince Twitter Bootstrap is so popular, and its top navbar obscures the progress bar by default, I think this will trip up a lot of developers. Personally I would set a higher default z-index in Turbolinks. My 2\u00a2.\n. ",
    "Aufree": "@reed Thanks, It works!\n. ",
    "abaldwin88": "Requesting this to be reopened.  I am seeing this behavior on a recent version of Microsoft Edge.  Build # 40.15063.0.0\nNo issues for chrome or IE11 on the same page.. ",
    "nguyenchiencong": "+1\n. ",
    "mikeverbeck": "upgraded my turbolinks gem to 2.5.1 and it looks fixed.  Thanks!\n. ",
    "scottwb": "FWIW I have a small javascript repro that illustrates this Safari bug (still in Safari 8.0.3), very similar to @reed's console examples above, without using turbolinks/rails:\nhttp://jsfiddle.net/spa9LbLr/2/\nThis shows a bare-bones document with a <form> and a <div> after it. When that HTML is parsed with DOMParser, you can see that it clearly pulls anything after the form up into the form. Experimenting with that jsfiddle shows that it will grab everything after the form until the closing tag of the form's parent.\nChrome, Firefox, and IE10 (didn't test lower) all parse this correctly. Wish I would have discovered this thread first, before I did all that debugging. :-$ \n. ",
    "mxaddict": "Thanks for the reply anyway, I solved my problem with the API by overriding the set_request_method_cookie method for my API Base Class :)\nruby\n    # This method is only here to disable the cookie that turbolinks sets!\n    def set_request_method_cookie\n        # NOTHING: This is exactly what we want this method to do\n    end\n. ",
    "john-999": "Just tested with Rails 4.1.5: I actually get the same result, here are the details from Firebug:\nRequest headers\nAccept  text/html, application/xhtml+xml, application/xml\nAccept-Encoding gzip, deflate\nAccept-Language en-US,en;q=0.5\nCookie  _myapp_session=bGlVYmVYNml5SmY[...]MlZScDRRa38; request_method=GET\nHost    localhost.ssl:3000\nReferer https://localhost.ssl:3000/login\nUser-Agent  Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:32.0) Gecko/20100101 Firefox/32.0\nX-XHR-Referer   https://localhost.ssl:3000/login\nResponse headers\nCache-Control   no-cache\nConnection  keep-alive\nContent-Length  252\nLocation    https://www.facebook.com/dialog/oauth?client_id=134[...]3865&redirect_uri=https%3A%2F%2Flocalhost.ssl%3A3000%2Fusers%2Fauth%2Ffacebook%2Fcallback&response_type=code&scope=email&state=d3b05a8d[...]025b6a78\nServer  thin 1.6.2 codename Doc Brown\nSet-Cookie  _myapp_session=c1BOV2swcmN[...]b61e1; path=/; secure; HttpOnly\nStrict-Transport-Security   max-age=31536000\nX-Request-Id    7a378f93-23fb-4182-b665-59de36c47314\nX-Runtime   0.020632\nResponse\nRedirecting to https://www.facebook.com/dialog/oauth?client_id=134[...]65&redirect_uri=https%3A%2F%2Flocalhost.ssl%3A3000%2Fusers%2Fauth%2Ffacebook%2Fcallback&response_type=code&scope=email&state=d3b[...]6a78...\nXML\nXML Parsing Error: syntax error Location: moz-nullprincipal:{50c15e52-5828-40d8-b393-a61dfca2c99a} Line Number 1, Column 1:\nRedirecting to https://www.facebook.com/dialog/oauth?client_id=134[...]65&r...\n^\n. ",
    "maheeptathgur": "Thanks for the reply.. My site 90% is a blogging site.. so not worried about speed on UI here yet..\nHowever even this solution doesnt seems to be working when i move between pages.. the delay is not there.. it just has the flick effect as earlier only and not the fade effect for what i am looking at.. \nThanks\n. ",
    "swistak": "Ok. I've found a problem that caused this. Aparently turbolinks goes crazy if you have a <script> element in your body that references file on other server it goes bit crazy.\n. ",
    "gbachik": "Let me know when this is added!\n-Thanks\n. Make the z-index higher and it shows up\nalso set the height to something ridiculous if you can't see it\n. ",
    "sandrods": "I'm using 2.5.1 and can't get it to work. \nAm I missing something? Any configuration needed besides Turbolinks.enableProgressBar(); ?\nRails 4.1.6 and Bootstrap and jquery-turbolinks\n. ",
    "noinkling": "Maybe the z-index should be set to a high value by default? Especially since popular CSS frameworks often set their top navbars' z-indices higher (e.g. 1030 for a Bootstrap fixed nav).\nNice feature anyway :+1:\n. ",
    "jtperreault": "You're welcome. Glad to help.\n. ",
    "ybart": "Because of a customer using a very old version of Firefox (11.0) which required a parameter to cloneNode, I overriden turbolinks.js.coffee. The problem caused the links not working at all.\nHere is the changed line:\ndoc = document.documentElement.cloneNode(true)\n. ",
    "etipton": "+1\n. @bwoolley I also experienced an issue with the Android default browser (it would turn the entire browser window the color of the progress bar... possibly some weird interaction with my specific code)\nAnyway, this gem is working well for me so far: https://github.com/caarlos0/nprogress-rails\n. ",
    "bwoolley": "@etipton i experienced the whole screen color issue also with safari 5.1.x which is a css incompatibility issue i believe.  thanks for the suggestion!\n. Hi javan, i just checked and aol 9.7 seems to be ok now..  i can't really verify any older versions.\ni will remove the temp fix and see how it goes :)\nthanks a bunch!\n. ",
    "fransstudio2": "Have the same problem... And my links are menu links that is created dynamically, so its sometimes hard to differentiate between turning off turbolinks or not. \nI would love to see this get fixed as well :)\n. ",
    "seven1m": "Thanks @reed. I don't have a good answer for your concerns. Adding some sort of loading timeout might work, but could lead to unpredictable behavior for devs.\nFeel free to close.\n. ",
    "Undistraction": "Was a Chrome Extension called Tab Lock overwriting the title every time Turbolinks changed it.\n. ",
    "DaniG2k": "That did the trick!\n. ",
    "kristianpd": "@dhh interesting to see this discussion taking place. A few comments:\nRouging out a few examples:\n``` html+erb\nDashboard\n\nOrders <%= @open_order_count %>\n\nYou have <%= @open_order_count %> orders that need your attention.\n\n<%= link_to \"Update your account to have more features\", onclick=\"Turbolinks.visit(url, change: ['sidebar'])\" %>\n\n option 1: care less about what changes and more about what doesn't \n\n<%= link_to \"Capture and fulfill all orders\", onclick=\"Turbolinks.visit(url, keep: ['sidebar'])\" %>\n\n option 2: you have context on what's changing and are likely performing a more focused partial replacement \n\n<%= link_to \"Capture and fulfill all orders\", onclick=\"Turbolinks.visit(url, change: ['order-count'])\" %>\n```\n\nGET vs. POST\nA good chunk of Turbograft's design is driven by the fact that you'll be mutating data and then refreshing one or many sections of the page as a result of that change. Turbolinks is different in that it's purely for a faster UX on GET's. For this reason, I'm curious what flow you see the Turbolinks.visit call with change or keep being used in? \n- Is it for when someone performs an AJAX request and then wants to refresh a section of the page they know changed? \n- Is it more to avoid refreshing sections (data-turbolinks-permanent) that will never change? \n- Would it be used in conjunction with remote=true calls to refresh a page after some form of persisting action took place?\nchange keys can be greedy\nIn the example above, if you wanted to display an open order count in your sidebar nav, anytime you change the outer key sidebar you will affect any keys within it (at least in our implementation). That's not a problem in this case, but it does raise the question of what you do if you have a data-turbolinks-permanent node inside a node with a change key. \nThis hasn't caused us any real pain yet, but there have been a few cases where we avoided putting keys on a wrapping node, and became more selective on the child nodes instead because of this. \nwe try to think of our keys as what-data-changes and not what-sections-change\nSince Turbolinks is more GET than POST, I actually may prefer the section-a example of keys if you're thinking of using this more for higher-level layout control than for reflecting data changes in the UI. If however, it's being done more for refreshing sections after mutative calls have taken place, we try to keep our refresh keys more descriptive of the data that changes.\nOf note, most of our pages only have 1 or 2 unique change keys on them, with additional refresh-always (sorta like a data-turbolinks-ephemeral) keys on our pages. We also rarely call visit with more than one change key.\na rough thought on partials\nA long long time ago, we had the idea that one day we may be able to hook in to rails partials to have speedier page rendering if we introduced the concept of refresh/section keys at a server level. We haven't done this, performance hasn't been an issue and it's probably an over optimization for us however I'm curious what your thoughts are on it playing more with Turbolinks. \nThe idea was basically\nlayouts/application.html.erb\n``` html+erb\n  <%= render 'main_nav', \"data-turbolinks-partial\" => \"user_account\" %>\n<%= yield %>\n```\nviews/foos/index.html.erb\nhtml+erb\n  <%= render 'foo_table', \"data-turbolink-partial\" => \"foos\" %>\n  <%= render 'bar_table', \"data-turbolink-partial\" => \"bars\" %>\njavascript\nTurbolinks.visit(url, change: ['foos'])  // only ends up rendering foos partial server side.\nIf rails would somehow acknowledge (HTTP headers?) change keys, we could make render aware of our partial rendering strategy and simply skip rendering any partials that don't share a key we care about. This was an early idea on how we could cut down on the size of response body but also has a few challenges (like greedy keys mentioned above) that we chose to never overcome. It also proved to not be a performance issue to render an entire layout + body in the back buffer even if we only needed a section or two.\nHaven't really thought about this idea in a while, but this PR sparked it again.\nInterested in seeing where this goes!\n. re: both \n\nSo how about data-turbolinks-section=\"name\" instead?\n\nand\n\nServer-side responses to updates that use redirect_via_turbolinks_to and use a change/keep selector to mutate just part of the page. Could be when you update subscribers on a post, it only changes that section.\n\nAgreed that partial is probably a little overloaded at this point. section is pretty good, though my only hesitation there is that section sort of implies you'll have to worry about what segments of page you want to update from the caller instead of letting your DOM + ERB describe the flow of your page.\nI'm sensitive to thinking of partial replacements in the space of \"what sections need updating on my page\", because it feels more SJR to me. This was a big discussion early in our Turbograft days, I had summarized it here. Our end result for a simple add comment flow looks like this with turbograft. \nThis is getting a little nitpicky but the latter example feels a little more \"data driven\" to me, which was one big takeaway from our Batman days. Our goal was a single render path on your view that through HTML + ERB describes as much of the flow of your app as possible. In Batman, we had DOM bound to data and the view described the flow, all you had to do was get your data in to the right state.\nPerhaps something more like data-turbolinks-watch, which says \"I'm interested in being told when this changes\". I find this more clear that many elements of the DOM can \"watch\" the same thing, and you don't get huge chains of change: ['section-a', 'section-b', 'section-c']calls in your JS. This avoids your JS knowing as much about your DOM as your DOM. Your DOM decide what it cares about. \nA simple example being:\nhtml+erb\n<nav>\n  <a data-turbolinks-watch=\"comments\">Comments (<%= @comments.count %>)</a>\n</nav>\n<!-- a bunch of other stuff -->\n<div data-turbolinks-watch=\"comments\">\n  <%= @comments.each do |comment| %> \n    <!-- ... -->\n  <% end %>\n</div>\n<!-- form to add a comment with -->\n<!-- Turbolinks.visit(url, change: ['comments']) -->\nvs. \nhtml+erb\n<nav>\n  <a data-turbolinks-section=\"comments-nav-counter\">Comments (<%= @comments.count %>)</a>\n</nav>\n<!-- a bunch of other stuff -->\n<div data-turbolinks-section=\"comments-list\">\n  <%= @comments.each do |comment| %> \n    <!-- ... -->\n  <% end %>\n</div>\n<!-- form to add a comment with -->\n<!-- Turbolinks.visit(url, change: ['comments-nav-counter', 'comments-list']) -->\nI just see people naturally seeing  section as a 1:1 (data:node) relationship instead of a 1:*(data:nodes) where I much prefer the latter.\n. I'm interested in seeing where we could go with the redirect_to @post, change: :comments, we solved this without a rails change by doing stuff like refresh-on-success. This keeps the refresh keys in the DOM/JS, but perhaps there's a more encompassing Rails approach that relates the loose coupling between keys, ivars and rails conventions.\nOK, watch is no better because it definitely sounds like event flows which isn't what it should be. As we built out our entire app, we added helper patterns like refresh-on-success in the DOM because that's where the refresh keys are defined and we were hoping to avoid server side decisions on what keys updated.  The simple example being\nhtml+erb\n<a remote=\"true\" href=\"/orders/1/close\" remote-method=\"POST\" refresh-on-success=\"orders\">Close order</a>\nThis was our solution to common and simple remote: true forms and links. Create would do something like redirect_via_turbolinks_to :index and we'd pull whatever watch/change/partial/section/refresh  (:smile:) keys we care about out of the resulting DOM.\nThe elements aren't watching, but they're hinting that they care about this set of data. \nWe have no SJR in Shopify with Turbograft and mitigate repetitive Turbolinks.visit type calls with some remote helper attributes like refresh-on-success\n. I'm not quite getting your point on conditional logic in the DOM.\n- We always rely on form helpers/html form tags to build out our action URLs and use data attributes to avoid tons of onSubmit visit calls.\n- In pretty much every case, we use stuff like refresh-on-success to handle our responses. Perhaps this is where you have the issue, and would prefer rails to tell you what's refreshing?\n- We actually have very few visit(change: []) style calls in the end. Once our admin was completed, we had moved most to the few  refresh-on-success, refresh-on-error patterns we pulled out. The more I think about it, the more I'm interested in seeing an example where the server defines what to refresh (as you've shown). \n- We originally started out with a POST then separate GET after that response was successful then quickly switched to a POST with inline response when possible to avoid multiple unnecessary XHRs.\n- One nitpick about create style endpoints in your example that you need to render the view inline without a redirect (so we can keep validation errors in context). We end up doing a render action: new and handling that response inline from the create POST (no redirect). This also led us to create a special pattern for modals with form validations (we basically treat it like any other /new endpoint without a layout). This is getting pretty implementation specific so I won't go too far on it here\n. :+1:.\nOne restriction we added to partial replacement nodes is they need an ID as well as the key so we can find the corresponding note in the replacement DOM. There's also a few cases like \"what if the node goes away or is created\" that need to be handled. Sort of like a poor mans React diff.\nI'll try to find a little time this week to open a PR with some partial replacement prototyping.\n. The ('[data-turbolinks-section=x]') selector will only returns nodes that are \"watching\" that section. As soon as you have multiple nodes \"watching\" the same section, you can't really make great guesses as to which node you should be replacing in your front buffer DOM with a node from the back buffer DOM. If it's only ever a 1:1 section key, then it would work. \nI think we also considered tracking it in a simple index like \nfront-buffer DOM\njavascript\n{\n  0: [div id=\"customer_list\"]\n  1: [div id=\"customer_bubble\"]\n  2: [div id=\"customer_modal\"]\n}\nHowever without some kind of unique identifier (we used id), you run in to problems if your page refresh adds or removes something based on the state change of the data\nback-buffer DOM\njavascript\n{\n  0: [div id=\"customer_list\"]\n  1: [div id=\"customer_modal\"] // how do I know this index 1 is actually index 2 in my front buffer?\n}\n. I'm still planning on getting around to this in a couple weeks, been swamped lately. \nI'm going to take a shot at pulling out the partial refresh stuff from Turbograft and hook it up to a respond_with option / controller decision as @dhh had suggested.\n. Yeah, that's a good point @aantix. I had suggested the same to @dhh but the only downside is that now you're coupling the fragment caching to it (maybe not necessarily a downside :)). Two considerations:\n1. You'll need some kind of DOM node hook for the current Turbograft refresh strategy to know what to replace. It's possible for nodes to come and go during a partial replace, so we use id + refresh attributes on the node itself to hook it. You may be able to do something with comment nodes to avoid any possible effect on the DOM structure.\n2. You'll need your cache keys to have some predictable prefix on them as the suffix of the key will likely change with each partial update (the data is changing). You may be able to use action and action_suffix options for this, we don't have this style of caching in our app so I can't really speak to any other gotchas here.\nI'm also really interested in seeing if this works, feel free to ping me on PRs. I will likely play around with this at the end of Feb (we have a few hack days coming up), maybe we can bounce a few ideas around before then.\n. @Thibaut TBH It's from Turbograft but now that I think about it, the differentiator should really be whether you visit or replace. Since turbograft doesn't have the change option on .visit, it sort of implies that the only time you're doing a partial replace is when you're not changing the URL. Since Turbolinks may want to change the URL and keep things like the sidebar i propose:\nTurbolinks.visit - Changes URL always (it may stay the same, but we remove that block)\nTurbolinks.replace - Does not call reflectNewUrl\n. :sheep: :it:\nAlso, +1 to \"New features in Turbolinks 3.0\" comment from @reed\n. /cc @Thibaut \n. :+1: i'm fine for forcing people to be explicit with data-turbolinks-eval=always to help prevent weird inline JS problems. thanks @Thibaut \n. 4 sounds achievable up front but I'm worried it may dramatically increase the complexity of our replacement logic and still have gotchas.\nI think the trickery will be around data-turbolinks-permanent and data-turbolinks-temporary behaviours in reverse as well as the difference between change and keep.\nPage A partial replace with Page B\nPage A\nhtml\n<div id=\"nav\" data-turbolinks-permanent=\"true\">\n  ...\n</div>\n<ul id=\"resources\">\n  <li>one</li>\n  <li>two</li>\n</ul>\n<div id=\"timer-banner\" data-turbolinks-temporary=\"true\">\n  ...\n</div>\nPage B\nhtml\n  <ul id=\"resources\">\n    <li>three</li>\n  </ul>\n  <div id=\"something-else-conditionally-shown\" data-turbolinks-temporary=\"true\">\n     ... \n  </div>\nScenario 1: Turbolinks.visit(url, change: 'resources')\nhtml\n<div id=\"nav\" data-turbolinks-permanent=\"true\">\n  ...\n</div>\n<ul id=\"resources\">\n  <li>three</li>\n</ul>\n<div id=\"something-else-conditionally-shown\" data-turbolinks-temporary=\"true\">\n ...\n</div>\n<div id=\"timer-banner\" data-turbolinks-temporary=\"true\">\n  ...\n</div>\nScenario 2: Turbolinks.visit(url, keep: 'resources')\nhtml\n<div id=\"nav\" data-turbolinks-permanent=\"true\">\n  ...\n</div>\n<ul id=\"resources\">\n  <li>three</li>\n</ul>\n<div id=\"something-else-conditionally-shown\" data-turbolinks-temporary=\"true\">\n ...\n</div>\nSo now we want to get back from B to A and If I'm understanding \"reverse-apply\" correctly, we hope to reverse run the replacement? Does that meen doing a change where we had a keep and vice versa? If we keep just the set of nodes that changed, how do we know exactly where they end up in the DOM structure unless we use the current DOM as a starting point?\nhtml\n<div id=\"nav\" data-turbolinks-permanent=\"true\">\n  ...\n</div>\n<ul id=\"resources\">\n  <li>three</li>\n</ul>\n<!-- I'd expect this to go away -->\n<div id=\"something-else-conditionally-shown\" data-turbolinks-temporary=\"true\">\n ...\n</div>\n<!-- I'd want this to come back -->\n<div id=\"timer-banner\" data-turbolinks-temporary=\"true\">\n  ...\n</div>\nIn this case it's all a flat node hierarchy, but you could imagine if this was nested we wouldn't really know where to put the nodes if we have no reference point (a handle with the same id in the current DOM).\nI think the biggest challenge here is that since we don't enforce any kind of DOM structuring requirements in the replacement body we don't know enough about the DOM structure to make an easy guess on where a reverse-applied node belongs. We may be able to achieve this if we started tracking parents and siblings but that's scary.\nAm I missing something big?\n. Yeah, good point. I was thinking about this a bout when we tweaked that cloneNode fix. AFAICT, the DOM node reference in the source doc is actually removed when you replaceChild in the targetDoc, but haven't fully confirmed that (that's the bug @dhh saw on basecamp).\n. I figured it would be nice to supply either a Document or HTML string here.\n. I think it was some combination of not executing turbolinks-eval false and data-turbolinks-permanent more than once. \nWe should add a test for data-turbolinks-permanent only executing once. Also, data-turbolinks-eval false should probably override all.\n. ",
    "mrkurt": "This discussion of the future solves a current problem for us. So :+1: \n. ",
    "obsidienne": "With this you can keep an audio/video playing between page navigation so :+1:\n. ",
    "aantix": "I've been following the conversation and have an alternative idea: there's parity between the view's cached fragments and the sections that need to be updated on an XHR request.\nWhy not have the (view) cache blocks double as the section definitions?  When an xhr request is made, the page is rendered but only the cache sections that are re-rendered (non-cached) are sent back to the client (a hash of changes).  Some lightweight js can find the prior section and replace it with the new render?  \nBy having a 'section' definition, the developer gets the initial Russian Doll fragment caching along with defining appropriate sections for client side updates.\nI'll do a proof of concept and open a separate PR. \n. Great considerations @kristianpd.  \n1) For the initial proof of concept, I was going to just render a div.  Comment nodes look much more promising and less intrusive.  Thanks for the suggestion.\n2) I was hoping div_for was smart enough to create a unique, predictable ID for varying dependencies.  It's not the case.  I can probably extract something from the cache helper (I think there's a unique ID generated before the cache digest is computed).\nI'll definitely ping you on the PR when it's done.\n. Fantastic @kristianpd \n. @dhh Are you planning on open sourcing a generic version of the iOS and Android apps that wrap these web views? \n. ",
    "Daniel254": "I just leave it here.\nIt's similar project with partial rendering\nhttps://github.com/igor-alexandrov/wiselinks\n. ",
    "qq99": "re: @ssorallen \n\nI added React as an experiment to have finger-grained automatic mutations than documentElement.replaceChild to enable things like CSS transitions.\n\nThat's amazing!  I was just musing the other day that some kind of DOM diffing instead of outright replacements would be the only way for TurboGraft to work well with replacements & CSS transitions without adding some kind of animation lock  (cc @tmlayton)\n. https://github.com/ssorallen/turbo-react\nhttps://github.com/ssorallen/turbo-react/blob/master/src/reactize.js\n. The code linked does global.document.documentElement.replaceChild = Reactize.applyDiff;\nIt may be nice if Turbolinks supplied a Turbolinks.replaceNode(parent, child) in the public API so that one could override this more cleanly\n. I think this may still be a good place to discuss it wrt interplay between the 2 libraries.  I'm not sure that Turbolinks should ever include turbo-react, but if we can discuss here how to make the integration between the two smoother, that'd be good\n. The other missing part, I feel, would be this:\njs\n    } catch(e) {\n      // If any problem occurs when updating content, send the browser to a full\n      // load of what should have been the next page. Reactize should not\n      // prevent navigation if there's an exception.\n      if (nextDocument !== undefined && nextDocument.URL !== undefined) {\n        global.location.href = nextDocument.URL;\n      }\ninstead of doing this, it would be better to call the original Turbolinks.replaceNode\n. Good point about the redirect_to, I wasn't thinking too closely about that one and agree that it should be left as is until there's a compelling pattern for it\n. :+1: thanks @Thibaut \n. @pbhogan \nYeah I think I've encountered the same thing that you have, but using https://github.com/Shopify/turbograft\nDisconnecting the node from the DOM and re-adding it can have negative effects:\n- full screen API status is cancelled\n- playing state oddities like you've noticed\n- css transitions/animations are killed\n. ",
    "tmlayton": "re: turbo-react; That is great. @ssorallen any reservations about moving it beyond an experiment?\n. Sorry didn't realize there was a turbo-react repo. Closing and moving this\n. ",
    "MGotink": "I've reproduced it once with the iOS simulator, but can't reproduce it anymore now. If it's not reproducible on a real device I wouldn't spend any more time on it, it could as well be an issue with the simulator.\n. The link at the end of my previous message points to some demo code.\n. ",
    "georgeclaghorn": "Sure. I'll look into that.\n. Done. Look good?\n. ",
    "slatem": "Switching back to 1.3.1 fixes it.\n. It breaks right at the 2.0.0 version so must be something there that's incompatible with Rails 4.0.13\n. Upgraded to Rails 4.1.9 and Turbolinks 2.5.3 and back button is still broken. Downgrading to 1.3.1 fixes it again.\n. ",
    "alexJunger": "Having the same issue - and downgrading to 1.3.1 doesn't help either.\n. I'm sorry @Thibaut, I can't disclose the project where this occured and I don't have time right now to re-create it as a clean app. Guess that's okay since it doesn't seem to happen to many others, however I might provide some more info at some point.\n. ",
    "kritik": "Yes, we thought about the same fix. But it would be nice if turbolinks fixes this behaviour out of the box.\n. ",
    "yui-knk": "I come up with same bug.\nSee https://connect.microsoft.com/IE/feedback/details/811408/ie10-11-a-textareas-placeholder-text-becomes-its-actual-value-when-using-innertext-innerhtml-or-outerhtml\n. @Thibaut  Thanks !!!! \n. Thanks !!\n. ",
    "naveed-ahmad": "You can simply disable rocketscript for some script tags by adding data-cfasync => false\nruby\n    javascript_tag 'data-cfasync' =>  false do\n      your JS stuff here and rocketscript won't mess with it\n    end\n. Add data-turbolinks-temporary to DOMs you don't want to cache, not tested though :) Playing with turbolinks now a days. \n. Ok, maybe its just browser cache. Did you closed the alert before navigating to other page? \n. thanks @anarchocurious you did amazing job :) \n. ",
    "kartikluke": "I'm seeing the same issue @fruwe. How did you fix it?\n. I have opened up a ticket and will discuss it with them. Your solution will work but as you can probably tell you lose all the benefits of RocketLoader by this method on pages loaded by Turbolinks.\n. Yeah that's true. You lose the benefits for the embedded scripts. But that's not too bad. I think for now we should find a way to run your script outside of Turbolinks so we can keep using the latest turbolinks. @reed Could you suggest a way to do that?\n. Cool I think I'll use your branch for now. The RocketLoader made for quite a speed boost. Have you come across any issues with your implementation?\n. ",
    "fruwe": "@kartikluke Unfortunately I did not have time to figure out the best/right approach. Furthermore disabling rocketscript is also not a viable option. I am still using my branch.\nhttps://github.com/fruwe/turbolinks/tree/cloudflare_compatibility\nPlease let me know, if you figure out a better approach\n. Thanks a lot. The part I changed is only executed after a page transition via Ajax, when all external scripts are already loaded and only embedded scripts are executed. Thus you should be able to keep 99% of the benefits of RocketLoader, I think (at least in my case it was like that). I am interested to learn more though ^_^\n. I agree\n(By the way, I just merged the latest turbolinks into my branch)\n. Sorry, for my late reply. I do not recall, but I think, I had some timing issues with things, I wanted to execute after a page has been loaded.\nNo, warranties, but if you run into such problems you might use this. (If somebody knows a better solution, please tell me. I am not familiar with jquery queues)\n``` haml\n- flash.each do |name, msg|\n  - content_for :page_bottom do\n    :coffee\n      document.queueAfterLoad () ->\n        $.notify({message: '#{msg.to_s.html_safe}', type: '#{(name != :error ? 'danger' : 'info')}'})\n...\n= yield :page_bottom\n```\n``` coffee\nqueue of functions\ndocument.afterLoadQueue = $({});\nqueue processing started flag\ndocument.afterLoadStarted = false\nqueue or process immediately\ndocument.queueAfterLoad = (func) ->\n  if document.afterLoadStarted\n    func()\n  else\n    document.afterLoadQueue.queue 'afterLoadQueue', (next) ->\n      func()\n      next()\nprocess queue\ndocument.dequeueAfterLoad = () ->\n  document.afterLoadStarted = true\n  document.afterLoadQueue.dequeue 'afterLoadQueue'\n$ ->\n  # called once\n  document.dequeueAfterLoad()\n  $(document).on 'page:fetch', ->\n    # called when page will change\n    document.afterLoadStarted = false\n  $(document).on 'page:load, page:restore', ->\n    # called after page loaded\n    document.dequeueAfterLoad()\n```\n. this might interest you as well:\nhttps://github.com/kossnocorp/jquery.turbolinks \nalthough, i have not tried it in conjunction with cloudflare, I tried this gem and it seems to be a \"drop in, solve all my troubles and forget it\" solution.\n. ",
    "haggen": "Sure. There 2 cases. 1) I'm using a remote link to change something via AJAX and then calling Turbolinks.visit to reload the page, I'd like to display the progress on the AJAX call. 2) I'm making my forms to work via AJAX and change the page also using Turbolinks.visit.\n. Thanks guys, you're awesome!\n. ",
    "arthurtalkgoal": "Hi @reed,\nthanks for your help. I figure out it is the wyishtml5 set up need the follow script with turbolinks:\n$(document).on('page:load', function(){\n  window['rangy'].initialized = false\n})\n. ",
    "nowhereman": "@davydotcom Can you tell us which versions of IE have this issue, please ?\n. See also https://github.com/defunkt/jquery-pjax/pull/496https://github.com/defunkt/jquery-pjax/pull/496\n. ",
    "kmcphillips": ":rocket: :crescent_moon: \n. ",
    "kurtfunai": ":+1: :cake: \n. ",
    "phoet": "@thibaut <3\n. ",
    "jtomaszewski": "Yeah, I think I noticed the same behaviour at my app.\n. ",
    "kaspth": "Aside from the possible quibble, this looks good to me :+1:\n. Looks good to me :+1: \n. @Thibaut lovely, :smile:.\n. Nice @Thibaut :+1:\n. Not as far as I know.\nDo send pull requests if you find any issues with master. Otherwise 3.0 could be a lipstick on a pig release. Then the theoretical safety is out the sty :grin:\n. Nice, this looks good to me :heart:\n. Wouldn't it just be clearer to rewrite same_origin? as:\nruby\ndef same_origin?(a, b)\n  URI(a).select(:scheme, :host, :port) == URI(b).select(:scheme, :host, :port)\nrescue URI::InvalidURIError\n  false\nend\n. Well, same_origin? has been there since March 2013 and I found zero issues on Rails mentioning same_origin? as breaking their applications.\nI think your fear is a little overblown here and prefixing _turbolinks_ reads like a crutch to me. But I'll leave it there :smile:\n. This would put Rails and Turbolinks in an interdependent relationship which I don't know how well works out dependency wise.\nI think it's okay to rely on documentation to enforce this. Should people submit bugs on Rails 3.2, we say it's unsupported and close, same as we do on the Rails repo.\n. For some reason this feels meager to me, as if there's more that needs to be said. But I can't come up with anything at the moment.\n. @dhh your comment is empty.\n. Why do we need to check the Rails version here?\n. Well, 3.2 doesn't support Ruby 2.2, so maybe we should exclude that from the build queue? So if that's the only failure I think we can get away with it.\nThis would be unlike #496 which failed on 3.2 everywhere: https://travis-ci.org/rails/turbolinks/jobs/55903649\n. Right, I don't know why the other doesn't work. But :+1: on this.\n. This is public now. Should we document what behavior will change in people's controllers or link them to documentation where they can see that?\nI also don't like the Concern suffix here. Would Turbolinks::Controller be too broad?\n. Yeah, I like that distinction, Matthew.\nThibaut, looking forward to the readme :+1:\n\nKasper\n\nDen 04/05/2015 kl. 14.14 skrev Thibaut Courouble notifications@github.com:\nIn lib/turbolinks.rb:\n\n@@ -7,19 +7,27 @@\n require 'turbolinks/redirection'\nmodule Turbolinks\n-  module ControllerConcern\n  @matthewd @kaspth Thanks for the feedback. Updated.\n\n\u2014\nReply to this email directly or view it on GitHub.\n. I found the recall hard to understand here. It's ambiguous as to whether or not it means remembering or redacting.\n. \n",
    "fxn": "Adding require calls here seems normal to me.\nWhy is the code assuming that ActionDispatch::Request has been loaded for example? I don't recall Action Pack makes that promise?\n. FTW, Rails does not autoload its own classes in the sense of\ndependencies.rb.\nIt could be the case that Action Pack has an autoload call in place, but I\ndon't think this is something 3rd party code can rely on. The fact that\nit's in the source code does not mean it is a public contract.\n. Does it also need a \"s\"?\n. ",
    "shellfly": "I just use it on my first rails project: http://wanshiu.com/\nYou can replicate this issue by clicking some nav bar buttons and hit browser's back button\n. Problem solved. Thanks for your help!\n. ",
    "peterjm": "/cc @Thibaut \n. value is a badly generic name; I'm not sure what type of object is returned by a call to redirect_to\n. ",
    "calvincorreli": "I've spent quite a bit of time trying to find a workaround without making changes to Turbolinks, including seeing if I could somehow get in and monkeypatch Turbolinks, which I couldn't figure out either.\nThe problem is that once initialized, especially when using the Flash tech as I do for some platforms, the original video tag is gone. \nIf you don't do the dispose, then you get javascript errors of type \"undefined is not a function\". If you do dispose, then when the page comes back from the cache, the original video tag is gone, and the initialization code does nothing. \nVideo.js has an issue logged for this (https://github.com/videojs/video.js/issues/1516) and have no plans to fix things so it would work with solutions like Turbolinks.\nThis is my best bet at the moment. I've already implemented this on my production application (https://simplero.com), and it seems to work well.\n. ",
    "daniel-rikowski": "I still have the same problem. \nSwitching to prepend instead of include in lib/turbolinks.rb restores the functionality:\nif app.config.turbolinks.auto_include\n   # include Controller # Doesn't work\n   prepend Controller   # Works\nend\nSetting config.auto_include to false and manually prepending Turbolinks::Controller in ApplicationController works, too.\n. ",
    "chancancode": "cc @rafaelfranca\n. ",
    "kirs": "@garbles :rocket: \n. ",
    "garbles": "@Thibaut looks that way. I will take another look later today.\n. ",
    "jasnow": "Also getting this warning:\nDEPRECATION WARNING: alias_method_chain is deprecated. Please, use Module#prepend instead. From module, you can access the original method using super. (called from block (3 levels) in <class:Engine> at .../.rvm/gems/ruby-2.2.1@sp50rt/bundler/gems/turbolinks-b8d43ac4822e/lib/turbolinks.rb:42)\nand line 42 of turbolinks/lib/turbolinks.rb is: alias_method_chain :call, :turbolinks.\nFYI.\n. Thanks...\n. ",
    "glittershark": "oops, forgot to [ci skip]\n. ",
    "jacek213": "I had the same problem when working with backbone router. No hacks found on blogs/stackoverflow worked for me as the logic was quite complex. Using master branch fixed the issue and now routing works out of box, because no unnecessary events get triggered on back button.\n. For me switching to 3.0 from master fixed the issue, no hacks needed any longer.\n. ",
    "audreykemajou": "I have the same problem too.\n. Thxs! It works now\n. ",
    "confact": "Will it work if you add this to your require?\n//= require nprogress-turbolinks\nYou won't need to have any enable or disable then.\n. I have this issue on production so: https://dirble.com/ <-- drag mouse over station logo, click play, click on any link to trigger turbolinks, turbolinks fetch page, music stops.\n. Okay, sorry for spamming, but i made a workaround with calling \n$('#player').jPlayer(\"play\");\non page:change, bit ugly but works.\n. ",
    "cars10": "This require throws an error - \"couldn't find file 'nprogress-turbolinks' with type 'application/javascript'\"\n. thats it. thanks! a hint for that might be nice in the wiki.\n. ",
    "kevinhughes27": ":+1: \n. I like it! thanks guys!\n. ",
    "gregblass": "Any idea how I could add this to code in application.js where there is no script tag? And any advice on how I'd go about using this with all the baked in bootstrap stuff that I'm using? (popovers, tooltips, modals, etc)\nEdit: Stupid question. Just put your code in a script tag with data-turbolinks-eval=always on the bottom of your application.html.erb. It probably should be in application.js anyway. And take it out of a document onready. Then it will fire every time, even with back and forward.\n. Looks like someone has asked this already: https://github.com/rails/turbolinks/issues/507\nAnd commited a solution here: https://github.com/rails/turbolinks/pull/509\nWhat if there is no script tag though? My code is in application.js. And what about all the baked in bootstrap code? Popovers, Tooltips, Modals, etc...\n. My solution was to just place your code in a script tag with data-turbolinks-eval=always on the bottom of your application.html.erb, and remove the jQuery onready. Then any js in there is fired even when using back or forward.\n. Thanks for the heads up. Just making sure, I should be using on page:load instead?\n. Thank you @Thibaut. Sorry to keep bugging you, but I'm trying to get my app using the master branch. However, when I run 'gem update turbolinks', nothing happens. I'm specifying the github repository in my gemfile like:\ngem 'turbolinks', git: 'https://github.com/rails/turbolinks.git'\nI also tried:\ngem 'turbolinks', git: 'https://github.com/rails/turbolinks.git', branch: 'master'\nStill nothing seems to get updated. I was definitely experience back button issues so I wanted to see if the latest changes helped anything.\n. @Thibaut That worked, thanks!\n. Someone fixed this issue already with this gist:\nhttps://gist.github.com/ejholmes/6135198\n. Nevermind. This can be deleted. False alarm.\n. @jklon I can't remember, but for what its worth, you should be using Turbolinks 5. Its much more refined!\n. Solution I came up with is to just put in the head tag instead of the body.\n. Blah. Hopefully Rails 5 drops soon because it seems like some good issues that I've opened here are being ignored (I understand why now).\n. Makes sense to me @dhh!\nI think I speak for a large part of the Rails community in that we'd love to hear more about how basecamp implemented native iOS and Android wrappers (@sstephenson - https://twitter.com/sstephenson/status/687667917341642752). \nI've been searching for resources on how to learn about something like this, but have found nothing. I think the fact that you guys pulled that off is a huge deal and would be a game changer for tons of people.\nTo get truly native feeling navigation for my rails app for mobile, I've been learning Ionic/Angular and how to use Rails as an API. It does the job but its an incredible amount of work for a small team. Angular seems like overkill to me. I am not looking forward to rewriting my whole Rails codebase to use an API.\nMaybe a youtube demonstration like you did for ActionCable, or a Signal vs. Noise post? Or, were there any resources that helped your team understand how to build it? \nMy gut instinct tells me this isn't something that can be explained in a blog post, and that is why you hire swift and java guys :( But I really don't know!\n. Amazing. This is a huge game changer. Very excited! Thanks @dhh!\n. Gotcha, understood - I'm definitely looking forward to learning, and understand that native wrappers means actually writing swift and java. This doesn't scare me, and it still seems like a better approach than refactoring an entire app to use an API and a JS framework. I think an overview of how you guys did it would be tremendous for the community and will open up tons of blog posts and support around the concept. Should make for some really interesting twitter arguments to say the least.\n. OK, I solved my issue, more or less. I was using a custom loader image. I basically had a div covering everything that was the same color as the background with a loader image that I would hide and show:\n$(document).on('page:fetch', function() {\n   $(\"#turbolinks-loader\").show();\n });\n $(document).on('page:change', function() {\n   $(\"#turbolinks-loader\").hide();\n });\nRemoving that allows me to see that the cache is working...but its weird, for my long pages, the top will display right away, but something else is taking a long time for the page to load all the way. I'll investigate this personally since its probably something going on within my app (unless anyone has any insight here).\nBut, any advice on how to only get this to happen when its fetching NOT from the cache? In other words, don't run that code at all if its displaying a cached page (because its instant and not needed)?\n. Oh I think I get it now...the page is displayed instantly, then any differences are updated? Yeah, that must be it...\nI just went back to the stock top bar loader for now. But if there is a way to do something like:\n$(document).on('page:fetch-not-from-cache', function() { });\nLet me know!\n. I'm thinking its gonna be:\npage:load   [newBody]   A new body element has been loaded into the DOM. Does not fire on partial replacement or when a page is restored from cache, so as not to fire twice on the same body.\nI could use this instead and keep my custom loader...and it won't show up if its pulling from the cache. Will confirm.\n. This interaction brought to you by rubber duck debugging, LLC.\n. After tons of depressing debugging and thinking over the past few days, this solution seems to work (but is very hack-ish):\nJS:\n$(document).on(\"page:restore\", function() {\n   $(\"body\").prepend(\"<div id='ghost-blocker' onclick='return false;'></div>\");\n   setTimeout(function() {\n     $(\"#ghost-blocker\").remove();\n    }, 300);\n  });\nCSS:\n#ghost-blocker {\n   position: absolute;\n   left: 0;\n   right: 0;\n   height: 100%;\n   width: 100%;\n   z-index: 999;\n }\nI basically debugged all the callbacks with alerts and saw that the last thing that happened after loading the page from the cache but before the ghost click fired was the page:restore function.  I made a blocker div that covers the whole screen and cancels out any click event, then removed it 300ms later. This does the job, albeit sloppily. The page:restore callback is also a great time to reset the page in any other way that you need, such as resetting loader images that were left over (I'm using ladda).\nI'm now going to try to dive deeper and attempt to catch the ghost click event and prevent it from happening instead of manipulating the DOM with a whole div.\nI'd love to hear if anyone has any ideas as to how I could cancel out the click that is passing through in a more programatic way instead of shoving a whole blocker div into the dom and then removing it. And I'd really like to hear the opinions on some of the core team here...I think the bigger issue is that most companies are not using turbolinks with the transition cache enabled + fastclick. Github itself is using Turbolinks, but not fastclick...I'd love to hear why. Perhaps this issue?\n. It seems like most companies aren't using fastclick in production for their mobile responsive app - or if they are, its not in conjunction with turbolinks. \nMost seem to roll out separate hybrid or native apps for a great mobile experience. I guess I'll go the same route. Ionic seems awesome.\n. Blahhhhhhhhh.\nJust tested on a slower android phone and this hack isn't working.\nI am now learning angular/ionic to make real hybrid apps and will disable fastclick completely on the mobile website side due to its compatibility issues with turbolinks.\nEagerly awaiting turbolinks 5!\n. This is no longer an issue with Turbolinks 5. Also, fastclick is basically no longer necessary since iOS 9.3 was released yesterday and supports touch-action:manipulation. Overall Turbolinks 5 is amazing IMO, and there is no reason that I can see to still be using 3.\n. This is no longer an issue with Turbolinks 5. I'd highly recommend everyone to upgrade as it is way more polished and usable.\n. I don't think this issue was with turbolinks - I had other code that was causing this.\n. ",
    "ruigomeseu": "Here's an example for the behaviour described: https://github.com/ruigomeseu/turbolinks-permanent-bug\n. ",
    "pbhogan": "Why move the node at all, though? This is an obvious case where the part of the DOM being updated is not in the direct hierarchy of the permanent node and should leave the permanent node entirely untouched. The only node that should be affected is the div containing rest of the site. The fact that Turbolinks does touch the permanent node is completely unintuitive.\n. Can't there be a way to specify don't replace the body itself, only children that are not marked permanent? It seems like such a common use case.\n. No-one said it would be easy. ;)\nHowever, I'm talking more about a specific exception for how the body node is processed optionally. I'm not fond of the inconsistency of it, but the idea that there can be a node hanging immediately off of body that can remain untouched would at least provide a solution for everyone having an issue with this. If the permanent node is deeper down the hierarchy then it would be subject to current behavior.\n. Yes, I am.\n. ",
    "galulex": "@Thibaut I have 3.0.0 version of turbolinks and it does not work.\nWhen i run render :show, keep: :foo, flush: true i should get an error. But it just renders the view\n. @Thibaut thanks for your response. i will check\n. @Thibaut I was talking about this line. Also I have checked with XHR request and got the same results. I always get the html but it should be wrapped with Turbolinks\n. @Thibaut request.xhr? returns 0 when i click on remote link, in all other cases it is nil.\n. Gotcha! the problem was with remotipart gem it overwrites the render method. Will create an issue there. @Thibaut thanks you for your responses.\n. You should add 'data-no-turbolinks' attribute to any parent element of your link. Click\n. @tortuetorche I am running these command separately\n. @tortuetorche Thank you. I have removed the data-turbolinks-temporary attribute and it works.\nBut i don't think that it is correct behavior. For instance:\nsimple rails action:\nruby\ndef show\n  render :show, change: 'main', layout: !!request.xhr?\nend\nwill generate the next js: Turbolinks.replace('show template', { change: ['main']}). And it will not work because the show template should be wrapped in div with id 'main'\n. @tortuetorche Thank you for your help. Closing the issue\n. ",
    "riccardoio": "@rafaelfranca sorry about it, I wasn't sure if was best here or stackoverflow, but my main concern was:\nwhy don't implement the request header ? (so was a feature request/discussion)\nbtw sorry again, I really appreciate the work that you guys are doing with rails and turbolinks!\n. @rafaelfranca I will try it! thank you and sorry again!\n. @Thibaut Why I should reply with a full index view, when I don't need it ? the problem is that it's different the response time/size.\nIf I reply only with a partial it's only 20ms vs 100ms for the full index view...if wasn't for the problem in old browser, this solution works very well and it's competitive with backbone or other mvc js frameworks.\nIt's like when I do:\nredirect_to @post, change: [:comments, :super_test]\nIt reply to me with a full page html(that is a lot more big than a simple partial)\n. @dhh yes but for example I need this specific thing only for 1 page...for the rest of all website turbolinks does great.\nWe don't always need best performances, but it's useful have this option when you need it.\n@Thibaut I will look in it.\n. Just a question:\nWhy don't give the opportunity to people to render page/html conditionally  ? it's only need a custom header(like pjax)\nI think that is worth it to have more choices for 'complex' app/pages (but this is only a suggestion, I really appreciate the work that you've done with turbolinks and I love it)\n. Guys, but why doesn't implement a simple and specific header for every turbolinks request ? honestly I think it worth it...\nTurbolinks is more powerful than jquery-pjax right now...\nexample:\n- Don't need jquery specifically\n- It can change multiple blocks at the time(thing that with jquery-pjax you can't do easily)\n  request.xhr? it very generic and could be any ajax request, so myabe people that doesn't know code, could be have some problems at the begin to figure out where is simple ajax or where works with turbolinks.\nEDIT: Ok just read the @dhh reply! honestly yes it's not a problem of my application specifically(I can use a specific ajax call or I can fork turbolinks and add a custom header), but I wanted listen your opinions, because I think that this will be a common problem now that turbolinks support for partials.\n. Ok just a update:\nFor now I'll use turbograft where with only 2 line of codes I've added a custom header to normal and form requests...\nThe problem with turbolinks is that is easy add the custom header for requests, but not for form request(where Turbograft has a custom class called Turbograft.Remote)\nI really hope that this will be introduced in turbolinks too(not specifically the Remote class, but that for every request/submitted form there is a custom header)...now that turbolinks supports for partials, user should be able to manage when the request is done by Turbolinks or not).\nThe Turbolinks concept is really good now that it supports for partials too(but without a custom header, it's a bit useless IMHO) and I'm dropping my MVC JS framework :) so thank you @dhh and team!\n. @Thibaut Yes I know but was easy to add it(I've customized the gem), btw I will try to do some other test.\nI've some doubt that I can check request.xhr? because:\nIf a user use my form with remote: true, I think that I still got the request.xhr? true, also if the request isn't done by turbolinks(because user is using IE8 and doesn't support pushState)\nI wonder why you say: You can/should re-render the entire page all the time. so what is it the useful stuff about partials ? just that I can have permanent nodes ?\n. @Thibaut right now I feel like a complete idiot...I don't have thought about something so easy like ajaxSetup...sorry for the time lost!\nHonestly my problem now is fixed! maybe we should think about a fallback for Turbolinks.replace for all the community/people that want use tubolinks.\nThanks you so much to all people of this discussion and the team of turbolinks.\n. ",
    "Stafie": "Hi @Thibaut, thanks for trying to help!\nSorry if i was unclear earlier. Currently i'm using:\n``` javascript\n$(document).on 'page:fetch', ->\n  //transitions for page out\n$(document).on 'page:load', ->\n  //transitions for page in\n```\nBut the animations are chained, meaning that they occur one after another. What i'm looking for is to animate the pages simultaneously. Here's a good example of a transition i'm trying to achieve:\nhttps://www.dropbox.com/s/1bjhjpuy8i8py8p/transitions.mp4?dl=0\nI think this would be possible if there was a way to insert a different .page-wrapper element instead of <body/> and keep both .page-wrapper elements in the DOM until the transitions for page-in are done.\nDo you think this would be possible to achieve or I'm rambling nonsense? ;)\n. Great, thanks again for taking the time to explain this to me and even considering it as a new feature!\n. ",
    "saboyutaka": ":+1: \n. ",
    "matthewd": "Having this list of controllers in a config seems backwards.\nI think we should instead move this stuff into a concern (Turbolinks::Controller, say) which interested controllers can include for themselves.\nThen we only need a boolean config option, to opt out of having it automatically included into AC::Base.\nBonus non-aesthetic reason to do it that way: right now, this will autoload all the listed controllers at boot. \n. > IMO it's confusing since that module isn't a controller. It's \"something you add to your controller\".\nI think that's just the nature of ruby module naming. Technically, nor is Enumerable an enumerable... it's equally \"a set of features you add to something that is already enumerable (i.e., implements each)\".\n. ",
    "the-teacher": "looks like my wrong\n. ",
    "abitdodgy": "If anyone stumbles across this issue, it happened because the markup was wrong. If you look closely you can see that the head and body tags are not nested correctly under the html tag. This causes Turbolinks to bind a new event on every page change. Just an FYI for those who may stumble on this.\nslim\ndoctype html\nhtml\nhead\n  title Dummy App\n  = stylesheet_link_tag      :application, 'data-turbolinks-track' => true, media: :all\n  = javascript_include_tag :application, 'data-turbolinks-track' => true\n  = csrf_meta_tags\nbody\n  .body\n     = yield\n. @nonameolsson sorry, off topic, but what packages are you using to get Polymer working with Rails?\n. ",
    "christophemaximin": "Also like the idea of a name change, but wouldn't data-transition-cache=\"false\" conflict semantically with the existing data-no-transition-cache ?\n. BTW I did the fixes you suggested in the code comments, relating to removeNodes\n. @Thibaut Done, looks good?\nOn the deprecation of data-no-transition-cache, I don't know what's the preferred process. I was thinking of submitting another pull request, where using would still work but would generate a console.log warning. Any better way?\n. @reed Good points. PR updated.\n. +1\n. @Thibaut  Your change is much better indeed! I submitted PR #549 related to this.\nOn the side, I'm curious as to why \n+  if transitionCacheEnabled and !options.change and cachedPage = transitionCacheFor(url.absolute)\nworks but \n+  if transitionCacheEnabled and cachedPage = transitionCacheFor(url.absolute) and !options.change\nwhich I tried before, breaks the Turbolinks.visit() with transition cache test ?\n. Good catch!\n. Thank you for looking into that issue!\n. Good point! I'll update the commit in a few minutes.\n. Indeed.\n. ",
    "stalcottsmith": "Thank you @Thibaut -- I was unclear whether it was okay to distinguish Turbolinks requests from non Turbolinks requests, by for example looking for the params[:_].  Apparently this is not the intention.  In my use case it would be faster to only render the partial as I am displaying both a collection and a resource in the page but I want to stick as close as possible to the intended usage.\n. ",
    "rhardih": "Sure. Added.\n. ",
    "tortuetorche": "I've done an experimental shim for IE 8 and 9 to support the Turbolinks.replace() method of Turbolinks 3, you can grab the code here.\nIt isn't ready for production-ready yet, but the basic features are OK.\nYou can see an online demo here, which is built with the PHP framework Laravel.\n. According to jQuery Turbolinks it's not recommended to use $(document).on('ready', function).\nWe should use instead $(document).ready(function) or $(function).\n@Thibaut Can you confirm that?\n. @Thibaut Thank you for the clarification.\n. Hi @galulex,\nI think your first call of Turbolinks.replace() removes the <div id=\"main\"></div> node and replaces it with New content text. So your second Turbolinks.replace() call can't find the main node because it doesn't exist anymore.\n. My bad.\nFor the first call I think it's the expected behaviour, you need to replace the <div id=\"main\"></div> node by another main id node (E.G. <div id=\"main\">My content</div>  or <p id=\"main\">My content</p>).\nIf the original <div id=\"main\"></div> node hasn't  a data-turbolinks-temporary attribute, your second Turbolinks.replace() call will work. So It's a bug related to data-turbolinks-temporary attribute.\n. If your main node is in the layout, I think it's the correct behavior.\nOtherwise, if it's in your show view, you're right it's not the correct behavior.\n. Hi @vizo,\nThank you for your contributions, can you also update the tests of Turbolinks?\nBecause actually, they failed, see: https://travis-ci.org/rails/turbolinks/builds/75558928\nHave a good day,\nTortue Torche\n. Hi @cchko,\nFrom the CoffeeScript turbolinks_replace_test.coffee file, I guess:\ncoffee\n document.addEventListener 'page:partial-load', (event) ->\n   # your code here\nOr in Javascript:\njavascript\ndocument.addEventListener('page:partial-load', function(event) {\n  // your code here\n});\nHave a good day\n. Hi @firedev,\nCan you try this ?\njavascript\nTurbolinks.replace('<div id=\u200b\"id\" data-turbolinks-temporary>hello</div>', {change: ['id']});\nCheers,\nTortue Torche\n. For replacing a <td>, you can do that:\njavascript\nTurbolinks.replace('<table><tr><td id=\u200b\"my_id\">hello</td></tr></table>', {change: ['my_id']});\nBecause Turbolinks need a well-formed HTML fragment.\n. I don't think that replacing the DOM content with a HTML fragment is the main goal of Turbolinks.replace().\nYou should have an entire HTML page in the first argument of Turbolinks.replace(), not a fragment of it.\nMaybe jQuery UJS is more appropriate for what you want to do...\n. Hi @firedev,\nIn the Turbolinks docs, there is a concept of namespaced ids, maybe you can use it instead of CSS class?\n\nIf the id contains a colon, the key before the colon can also be targeted to replace many nodes with a similar prefix.\n\nhtml\n<div id=\"comments:1\"></div>\n<div id=\"comments:2\"></div>\n<!-- ... -->\n<div id=\"comments:12\"></div>\nCheers,\nTortue Torche\n. Sorry, I don't really understand what you said.\nMy English knowledge isn't as good as I hope.\nIf you use dom_id() helper, you can prefix it with comments:.\nIn a Rails console:\nruby\ncomment = Comment.first\nhelper.dom_id(comment)\n=> \"comment_2\"\nhelper.dom_id(comment, 'comments:')\n=> \"comments:_comment_2\"\nThe generated id is a bit weird, but it should work.\nThen, when you run this Javascript command:\njavascript\nTurbolinks.replace('some HTML tags', {change: 'comments'});\nTurbolinks will replace all the HTML nodes with an id beginning with this string: comments:.\n. Why do you render the same fragment in a few places of the page?\n. Well, maybe you can do something like that:\n``` ruby\nclass Comment < ActiveRecord::Base\n  attr_accessor :context_id\ndef to_key\n    super << @context_id\n  end\nend\n```\nWhere @context_id is the context of you record in the page.\n. Or monkey patching the dom_id() helper to add a third argument, who appends a suffix.\nruby\ncomment = Comment.first\ndom_id(comment, 'comments:', 1)\n=> \"comments:_comment_2_1\"\n. ",
    "gastonmorixe": "Forgot to add I partially solved by forking the repo and adding:\ncoffeescript\nreturn if !cacheCurrentPage\n. @Thibaut sadly not. I was using the master this repo as gem. Ask me for any info that might help. \n. Haven't tested it on Firefox.\nWell I am using https://github.com/aidanlister/jquery-stickytabs\nGaston Morixe\nPartner Black.uy\n+59898704249\n@_imton http://twitter.com/_imton\nMontevideo, Uruguay\nOn Sun, May 17, 2015 at 11:00 AM, Thibaut Courouble \nnotifications@github.com wrote:\n\nAlso, make sure you don't have code that calls stopImmediatePropagation\nin a hashchange event handler.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rails/turbolinks/issues/530#issuecomment-102806223.\n. \n",
    "chrise86": "I had a need for this too, where I had a sidebar and main content area and wanted the progress bar to appear in the main content area only. I solved it using the following:\nhtml.turbolinks-progress-bar::before {\n  margin-left: 220px; // where 220px is sidebar width\n}\nThis way you can also alter it responsively as needed.\n. ",
    "19ray": "Thanks @reed ! It does work!\n. ",
    "FiloSpaTeam": "I don't want to necrobump this but i used this solution to use turbolinks and reload dropdown (inside turbolinks:load event):\ncoffeescript\n$(document).on \"turbolinks:load\", ->\n  $('.dropdown-toggle').dropdown(). ",
    "gmalette": "Done and done!\n. > no need to update the README; I'll revamp it soon\nI suggest adding a Contributing section :)\n. Sorry this is a little beyond my CoffeeScript knowledge. It does compile to something that looks legit\n. ",
    "tombroomfield": "Okay, more information on this,\nThe rendering issue occurred because the bottom of the grid had no height set, so expanded to fit the children items. When I changed an element, reducing the height, the overall grid also reduced, but failed to render the lower items correctly. I fixed this by settings the grids height to fill the page.\nHowever, I still get a white flash on replace, which is quite jarring, any idea what is causing this?\nThanks,\n. Yeah, I understand how limited my information, apologies for that. Unfortunately the app is private/enterprise so a link i s difficult, Ill see if I can throw together an example application just reproducing this issue and link it back.\nThanks,\nTom.\n. Are you using Jquery tubolinks?\n. ",
    "edlebert": "It seems to currently run scripts in partials twice.  If I have a script tag in a partial, and I say \"Turbolinks.visit(url, { change: 'mypartial' }), scripts in 'mypartial' are evaluated twice.  This only happens if I specify a 'change' option on visit.\n. ",
    "pch": "The idea is to have the form work both within the modal (xhr) and as a regular html page (in case someone visits the url (/links/new) manually).\n. Sorry, I edited my comment above to better explain what I wanted to achieve. It's not just about having it work with js disabled.\nThere are other respond_to formats (html) - I just stripped them down from the example code.\n. Setting remote: true doesn't work either, but I'll try to work around it with an additional param - we'll see how it works. Thanks. \n. ",
    "caike": "Looks like this question has come up before here with a suggestion here.\n. It took me some time to understand this as well. Here's how you can make it work:\nFirst, change your link to use xhr, like:\n= link_to \"render test in tabs\", test_users_path, remote: true\nThen, make sure your test view template also has a div with id tabs. \nThat should be all!\n. ",
    "marczking": "Thanks for your suggestion. Unfortunately I am not able to not cache certain parts of my DOM.\nI tried data-turbolinks-temporary and data-no-turbolink. Both without success.\nWhile using partial replacement with JS according to the docs I can:\nTurbolinks.visit(url, { cacheRequest: false });\nMy idea is you could add a data-cache-request=false. Or one of the above to work. For now I'll just live with notices reappearing every once in a while...\n. Yeah, I did. It just caches the element in the current state. I'm not sure if it is possible to cache the whole page except some element.\nFor that one would need to remove the element first and then cache it. Maybe worth considering in a future version of turbolinks :smiley: \n. Changed the link, should work again ;)\n. Thanks for checking it out. At least this can be referenced to people who encounter this problem :)\n. ",
    "mosinski": ":+1: same in my case I trying to deal with cached notices.\nMaybe there's now any solution for this problem :question: \n. Gem version:\nUsing turbolinks 5.0.0.beta2\nI'm testing now Preparing the Page to be Cached perhaps this is the solution.\nI'm using toastr notification gem.\nI made this code:\njavascript\ndocument.addEventListener(\"turbolinks:before-cache\", function() {\n  console.log('Listener');\n  if(document.getElementById('toast-container')) {\n    document.getElementById('toast-container').remove();\n    console.log('Removed');\n  }\n});\nconsole returns:\nListener\nRemoved\nListener\nFirst two lines are shown when I click next page immediately after pop-out notification, last line displays when I back to previous page.\nSo it looks like it remove the notification container before cached, unfortunately notification is still cached and pop-out again.\nUPDATE\nit turned out that it was enough to remove before cached page the script that started notofications.\n. ",
    "nuflowx": "I haven't had a look on the new turbolinks, but maybe it's handled differently with that one.? \n. ",
    "nitinkumar24": "I am facing the similar issue.\n error and notice are showing Multiple times\n@marczking did you find any solution?. ",
    "nflorentin": "+1 \n. ",
    "stephenson": "That would be fantastic!\n. ",
    "gildo": ":+1: \n. ",
    "MrHubble": "@ginolon your StackOverflow question no longer exists. Did you find a solution to your onclick problem? I'm also using Turbolinks.visit(link); on row click and the GET request is being called twice.\nUPDATE: my issue was with my own messy js, not Turbolinks.\n. ",
    "maltesa": "I have the same issue. Turbolinks and remote forms work fine together as long as the remote form is not wrapped around a table row.\nThis only works, after refreshing the page. Otherwise no post is made.\n[...]\n%tr.course-day{ id: \"course_day_#{course_day.id}\" }\n  = simple_form_for course_day, remote: true do |f|\n    %td\n      = f.input_field :day, as: :date_picker, placeholder: \"01.01.2000\"\n[...]\nUpdate: It's already not working as long as the form is within a table.\n. ",
    "syropian": "We've also been encountering this in ie11. A full page refresh works fine, but if the page is shown with \nturbolinks, the media queries activate, even if they don't match the current screen size. I tried triggering resize with $(window).trigger('resize') but that didn't fix anything. I have to physically change the browser dimensions to get it to update.\nEdit: To reproduce, just have a style tag within your page's body that has media query rules, and then load the page through turbolinks.\n. ",
    "Fudoshiki": "Only actual for pages where present button tag or input type='submit'. ",
    "itay-grudev": "Tubolinks 5 is in another project. See turbolinks/turbolinks. This repo is for the old versions < 3.. I needed to update something if the user goes back. You could create an event that is invoked in both cases, and explicitly state that it can't be prevented and document the inconsistencies. It would still be useful.\n. I tried many solutions and I ultimately gave up. I did tried before-unload, but as far as I remember it wasn't invoked on going back or it reported wrong URL. I don't really remember, but it didn't do the job.\n. I ultimately used a variable to store the previous page loaded and I bypassed the problem. Thank you for your time and will to help, but this was a month ago and I really don't remember.\n. ",
    "deepeeess": "Sorry for the delay will test and report back soon.\n. I believe this issue to be resolved.  Thank you for your help.  Closing this issue.\n. ",
    "Shoroh": "I have the same issue. \nI'm using the Bootstrap Tables with cookie extension, and it stores cookies wrong way in everywhere in application:\n\nBut it should be only one path: /administrator/users\nWithout turbolinks it works well. Any idea? \n. Oops, I didn't. Thanks!\n. ",
    "jklon": "Hello\nI am getting the same problem. What is the solution?\n. ",
    "Argonus": "@gregblass, @jklon  Hi, i also have this issue, i try to add turbolinks 5. Do you remember what was solution?\n. ",
    "AmitPatel-BoTreeConsulting": "I am facing the same issue with trubolinks5 in production. How can I fix that?. ",
    "misner": "Exactle the same bug here. Any fix were found apart from just removing progress bar from mobile ?\n. ",
    "patricklehmann": "@javan thanks for your reply: i'm dooing something like this\n/\n= require ... \n/ \n@Thibaut i'll give it a try!\n. ",
    "monkbroc": "@javan implemented this slightly differently in #608 \n. r? @javan\n. OK. If you think the delay should live somewhere else I can just close this PR.\nMy reasoning for this implementation was to avoid timing issues by keeping the method call sequence the same (start --> advanceTo --> done). If start is delayed using setTimeout what happens if done is called before start? The start timer will need to be cancelled.\nThe other reason was to keep all the logic related to ProgressBar encapsulated. Other code using the class don't need to care if it's delayed or not. Another thought I had was adding an optional parameter to start specifying the delay so users could get an immediate or delayed progress bar in their own Javascript.\n. This implementation looks and works great @javan! Thanks for including my suggestion for the start delay option in here. I'lll close #604.\n. ",
    "sedx": "Solved.\nIt cause because this two page has different templates with different assets.\nWhen add  data-no-turbolink to link problem is gone.\n. ",
    "cchko": "Thanks!\n. ",
    "lewispb": "https://github.com/lewispb/turbolinks-img-example\nRefer to the partial:  _test.html.haml\nI believe it was because my partial lacked the same div as was referred to in my javascript. Maybe this issue just needs a better error message.\n. ",
    "jordanthomas": "Took a different approach to this in #601.\n. Caught up to master. I'm unsure why the failures with rails32 are happening, though. It's not happening locally for me.\n. @Thibaut Squashed, thanks!\n. @tortuetorche Thanks!\n. The document node doesn't implement hasAttribute. We could check nodeType instead if you think checking for hasAttribute is too opaque.\n. :+1: \n. Sounds good.\n. Oh, neat! I didn't know you could use ? with a function call.\n. ",
    "rails-bot": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @reed (or someone else) soon.\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\nPlease see the contribution instructions for more information.\n. r? @Thibaut\n(@rails-bot has picked a reviewer for you, use r? to override)\n. Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @Thibaut (or someone else) soon.\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\nPlease see the contribution instructions for more information.\n. Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @Thibaut (or someone else) soon.\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\nPlease see the contribution instructions for more information.\n. Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @Thibaut (or someone else) soon.\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\nPlease see the contribution instructions for more information.\n. Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @Thibaut (or someone else) soon.\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\nPlease see the contribution instructions for more information.\n. r? @Thibaut\n(@rails-bot has picked a reviewer for you, use r? to override)\n. Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @Thibaut (or someone else) soon.\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\nPlease see the contribution instructions for more information.\n. Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @Thibaut (or someone else) soon.\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\nPlease see the contribution instructions for more information.\n. Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @Thibaut (or someone else) soon.\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\nPlease see the contribution instructions for more information.\n. Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @Thibaut (or someone else) soon.\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\nPlease see the contribution instructions for more information.\n. Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @Thibaut (or someone else) soon.\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\nPlease see the contribution instructions for more information.\n. Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @Thibaut (or someone else) soon.\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\nPlease see the contribution instructions for more information.\n. ",
    "schneidmaster": "The main file is not super important - it is only there because it is required for a valid bower specification. It would typically point to a built/minified/zipped production .min.js file suitable for concatenation with other javascripts or whatever else. But in this case, anyone who is using Turbolinks is using Rails and anyone using Rails is just going to put it in their application.js manifest anyway, so it primarily serves as a reference.\n. > I think I didn't understand it. Would sprockets directives like #= require works with bower?\nThink of it this way - bower is analogous to bundler. In my Rails project I have a bower.json that contains a list of frontend dependencies (Turbolinks, jQuery, Bootstrap, etc.), and bower handles installing all of them for me. So bower will grab the latest versions of the code for each frontend library and stick them in e.g. vendor/assets/bower_components. I then include each library from that directory in my Rails application.js and/or application.css, and Sprockets does its usual thing. Bower is essentially a replacement for copying files manually into vendor/assets in the same way that Bundler is a replacement for manually downloading a bunch of gems and sticking them in vendor/bundle. It doesn't \"work with\" sprockets directives because it's a dependency manager, not an asset compiler. Does that explanation make more sense?\n\nWhy is bower needed then if you're already using Rails and have Turbolinks available in your asset load path?\n\nI use bower for a bunch of things, not just Turbolinks. jQuery, Bootstrap, etc. - essentially everything that is a frontend asset. Given that I'm using bower for everything else on the frontend, it's convenient to use it for turbolinks as well.\n\nI understand the desire to add Bower support, but it seems like we should be listing a pre-built .js file.\nAlso, you would have to use the gem anyway...\nI was just about to say what @rafaelfranca just said...\n\nYou do still have to use the gem, correct. Bower is just for the frontend component. Listing a pre-built JS file is not really necessary IMO since you only can use Turbolinks with Rails anyway, and might cause the confusion that @reed mentioned.\n. > I think the basic page changing behavior would work for non-Rails apps and that's a reason to register a pre-built .js file. I'm not invested in this at all so don't take this as an argument for or against. \nAh, if true, that would actually be a great reason for a pre-built .js file as well as another reason for bower support. I was not aware that was the case.\n\nBut why do you need to use turbolinks on bower if you still needs the gem and you will still use sprockets and sprockets will load the gem's version? Just to list turbolinks as a frontend dependency?\n\nBecause I prefer to keep backend dependencies (gems) and frontend dependencies (bower packages) separated in dependency manifests, for better application structuring and so it's easy to see what is used where. It just happens that turbolinks has both backend and frontend components - but I guess I still think of it primarily as a frontend dependency. \n. If there's interest in that I can augment the default Rake task to build a JS file. (And update the bower.json accordingly)\n. I would probably be up for championing the JS version as you described.\n\nwhich we could address by writing a server \"spec\"\n\nCan you elaborate on what you mean by a server \"spec\"?\n. ",
    "sebastianzillessen": "Yeah that did it \n. ",
    "nettofarah": "You can reproduce this by creating a controller that inherits from ActionController::API using both edge rails and edge turbolinks.\n. @Thibaut is there anything I can do on my end to help?\n. Thanks, Thibaut.\nOn Sun, Sep 20, 2015 at 2:00 PM Thibaut Courouble notifications@github.com\nwrote:\n\nMerged #606 https://github.com/rails/turbolinks/pull/606.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rails/turbolinks/pull/606#event-414215496.\n. \n",
    "alexhanh": "@Thibaut I added a simple Rails app you can test https://github.com/alexhanh/turbolinks_nav_test\n1. Navigate to root localhost:3000\n2. Click new post and go to /posts/new\n3. Make a submit with validation error by submitting empty form, still on /posts/new\n4. Fix input (fill author and body) and successfully post, now on /posts/1\n5. Press browser's back button, now on /posts/new\n6. Press browser's forward button, now on /posts/1\n7. Press browser's back button\nAnd we end up in /posts instead of /posts/new. Not identical to the original, but still the hierarchy seems to be broken, since I believe it should be / > posts/new > posts/1.\n. ",
    "KyzarKy": "I filed a bug with Chrome... seems to be an issue on their end. It would still be good to know if anyone has found workarounds!\nChrome bug: https://code.google.com/p/chromium/issues/detail?id=533742\n. ",
    "yoelblum": "@KyzarKy I'm on chrome 47 with osx (el capitan) , seems not to happen . Example - old website of mine (www.shurot.net)\n. ",
    "futura": "I found this page because the same thing is happening to me. Chrome 47, El Capitan.\n. ",
    "metaskills": "I thought about looking there... but did not see it? Thanks in advance for the help!\n\n. Bingo!\n\n. Thanks!!!\n. ",
    "firedev": "Okay I see now. \nBut still, I need to replace <td> and it works only with <div>. Is it by design?\n. Thanks I'll try in the morning. But this means I need to add another view around my td just to render it from Turbolinks.\nKind of defeats the purpose. \n. In fact I am rendering this from the controller. And yes I am replacing js.erb partial with render change. But it happens that I can render only part of the view. \n. Yep, that is the problem. I don't have the luxury of React that keeps track of it's components and can't do cycle in rails for obvious reasons. All in all id-based approach seems like a dead-end to me. I use \"semi-unique\" identifiers made from cell name and dom_id of the main object so it looks kind of like this:\n<div class=\"calendar-day_1234\">\nThis way I don't have to worry about updating the wrong fragment and if there are more than one - no problem.\n. I render the same fragment in a few places on the page, I can't generate #comments:comment_1:1 #comments:comment_1:2 #comments:comment_1:3. But if using css selectors, or even data-id one is good enough: .comments-comment_1. \nRails is going backwards here. Imagine each fragment is very expensive to compute, pre-rendederd and cached and I can't change id for each instance. What about russian-doll caching?\n. I am building a worktime calendar app, there are few stats cells on each end, there are day cells you can edit in a modal window and they are being updated on-the-fly.\nJust remembers that this came up before and I was asking on StackOverflow: http://stackoverflow.com/questions/25418379/storing-object-id-in-html-document-id-vs-data-id-vs\nApparently there are cases when you want more than one kind of the same object on the page.\n. I'll just rename the title to a more general 'selector-based' replacement, so it allows more freedom of speech.\n. ",
    "alecdotninja": "The specs in 202.17 seem to be failing because of an issue upstream on Rails master.\n. Hello @christopherdupont,\nAfter a small investigation, the source of the problem seems to be the way that the meta-tags gem is using alias_method_chain to extend render in lib/meta_tags/controller_helper.rb.\nWould you verify this by trying my fork of meta-tags (`gem \"meta-tags\", github: 'anarchocurious/meta-tags')?\nIf that does indeed solve your problem, perhaps someone with a better understand of alias_method_chain can explain why this is an issue, and whether it should be corrected in turbolinks or meta-tags.\n. Again, the issue with the specs on 209.17 seems to be upstream on Rails master.\n. @Thibaut  The API now matches what you have requested.\nI should note, however, that exactly one of the append, prepend, or change options may be used in call to Turbolinks.visit or Turbolinks.replace.\nDo you think there should be support for using several of these options at the same time?\n. After some experimenting with my own projects, it quickly became clear to me that in order for the append and prepend options to be most useful, they should be allowed in combination with each other and the change option.\nFor example, when progressively enhancing to create an infinitely scrollable list, it is intuitive to want to append new entries to the list container while performing a change on a node at the bottom of the page containing pagination links. From this point, a small amount of unobtrusive JavaScript can be added to programmatically click the \"next\" link as it approaches the viewport.\nThe combination of the append and change options allows the easy creation of an infinitely scrollable list that seamlessly degrades when JavaScript is not available (and perhaps more importantly, remains indexable by search engines).\nThese changes are now reflected on my branch.\n. @Thibaut I have rebased to master and squashed my commits.\n. Hello @glennfu,\nHaving looked at your code example, it seems that this is not a typical usage of Turbolinks.replace. When Turbolinks::Redirection#render generates a JavaScript response, it will include the entire page's content as the first argument, not just the elements that are changed.\nThere are several reasons it makes sense to do this, not the least of which is the problem you just highlighted. Since Turbolinks depends on the browser's native DOM implementation, passing anything other than a well-formed document source is technically undefined. In this case, it seems that both of our browsers have decided to ignore <tr/>'s outside of <table/>'s. \nNote that even with the <table/>, the missing document structure still materializes:\njavascript\nvar replacement = document.documentElement.cloneNode();\nreplacement.innerHTML = '<table><tr></tr></table>';\nconsole.log(replacement.innerHTML); // \"<head></head><body><table><tbody><tr></tr></tbody></table></body>\"\nThat being said, if you're willing to risk this problem, you could render a partial with only the changed elements, but this has the drawback of not working transparently when JavaScript is disabled.\n. I don't understand.\nThese are separated out because they are treated differently during replacement (the nodesToAppend are passed to swapNodes for appending and become appendedNodes, etc.).\nSee L167 - L169.\n. Although the tests pass without it, I believe this is required in some browsers as targetNode (and therefore it's childNodes) are from the parsed document tree and being inserted into the live document.\nThe same thing is done on L210. Removing this line also allows the tests to pass.\n. ",
    "christopherdupont": "Hi Thibaut,\nRender function isn't overrided in my code. \nconfig.turbolinks.auto_include = true is set in my development.rb file.\n$ bundler show | grep turbolinks                                                                    \u2039ruby-2.2.3\u203a\n  * jquery-turbolinks (2.1.0 6f336f1)\n  * turbolinks (3.0.0 83d4b3d)\nGemfile\n```\nsource \"https://rubygems.org\"\nruby ENV[\"CUSTOM_RUBY_VERSION\"] || \"2.2.3\"\nBundle edge Rails instead: gem \"rails\", github: \"rails/rails\"\ngem \"rails\", \"~> 4.2.4\"\nA set of Rails responders to dry up your application\ngem \"responders\", \"~> 2.0\"\nUse PostgreSQL as the database for Active Record\ngem \"pg\"\nUse SCSS for stylesheets\ngem \"sass-rails\", \"~> 5.0\"\nIntegrate SassC-Ruby with Rails!\ngem \"sassc-rails\"\nUse Uglifier as compressor for JavaScript assets\ngem \"uglifier\", \">= 1.3.0\"\nUse CoffeeScript for .js.coffee assets and views\ngem \"coffee-rails\", \"~> 4.1.0\"\nSee https://github.com/sstephenson/execjs#readme for more supported runtimes\ngem \"therubyracer\",  platforms: :ruby\nUse jquery as the JavaScript library\ngem \"jquery-rails\"\nTurbolinks makes following links in your web application faster. Read more: https://github.com/rails/turbolinks\ngem \"turbolinks\", github: \"rails/turbolinks\", branch: \"master\"\njQuery plugin for drop-in fix binded events problem caused by Turbolinks\ngem \"jquery-turbolinks\", github: \"kossnocorp/jquery.turbolinks\", branch: \"master\"\nPage-specific javascript for Rails done right\ngem \"paloma\"\nBuild JSON APIs with ease. Read more: https://github.com/rails/jbuilder\ngem \"jbuilder\", \"~> 2.0\"\nbundle exec rake doc:rails generates the API under doc/api.\ngem \"sdoc\", \"~> 0.4.0\", group: :doc\nUse ActiveModel has_secure_password\ngem \"bcrypt\", \"~> 3.1.10\"\nUse Capistrano for deployment\ngem \"capistrano-rails\", group: :development\nSlim template engine\ngem \"slim\", github: \"slim-template/slim\", branch: \"master\"\nSASS Bootstrap\ngem \"autoprefixer-rails\"\ngem \"bootstrap-sass\", \"~> 3.3.5\"\nForms made easy for Rails! It's tied to a simple DSL, with no opinion on markup.\ngem \"simple_form\"\nKinder, gentler I/O for Ruby\ngem \"kgio\"\nSimple HTTP and REST client for Ruby, inspired by microframework syntax for specifying actions.\ngem \"rest-client\"\nA Ruby interface for the wonderful e-mail newsletter application Sendy\ngem \"sendyr\"\nFetch and parse feeds as quickly as possible\ngem \"feedjira\"\nHTML/XML parser\ngem \"nokogiri\"\nRails helper to generate navigation links with a selected class.\ngem \"nav_lynx\"\nQuick and configurable canonical tag to use in Rails views.\ngem \"canonical-rails\", github: 'jumph4x/canonical-rails'\nEnumerated attributes with I18n and ActiveRecord/Mongoid support\ngem \"enumerize\"\nDatabase based asynchronous priority queue system\ngem \"delayed_job_active_record\"\nA simple date validator for Rails.\ngem \"date_validator\"\nThis Gem adds useful methods to your Rails app to validate, display and save phone numbers.\ngem \"phony_rails\"\nPreflight for HTML email\ngem \"premailer-rails\"\nTranslate your rails app route to various languages\ngem \"route_translator\"\nSearch Engine Optimization (SEO) plugin for Ruby on Rails applications\ngem \"meta-tags\"\nTime calculation with business / working hours\ngem \"working_hours\", github: \"Intrepidd/working_hours\"\nActiveModel email validator (mx, disposable, ...)\ngem \"email_check\", github: \"dapatil/email_check\"\nThe Ruby gem for querying Maxmind.com's GeoIP database\ngem \"geoip\"\nkramdown is a fast, pure Ruby Markdown superset converter\ngem \"kramdown\"\nSegment.com library\ngem 'analytics-ruby', '~> 2.0.0', :require => 'segment/analytics'\ngroup :development, :test do\n  # A modern, concurrent web server for Ruby\n  gem \"puma\"\n# Call \"byebug\" anywhere in the code to stop execution and get a debugger console\n  gem \"byebug\"\n# Spring speeds up development by keeping your application running in the background. Read more: https://github.com/rails/spring\n  gem \"spring\"\n# Quiet Assets turns off the Rails asset pipeline log\n  gem \"quiet_assets\"\n# Better Errors replaces the standard Rails error page with a much better and more useful error page.\n  gem \"better_errors\"\n  gem \"binding_of_caller\"\n# Supporting gem for Rails Panel (Google Chrome extension for Rails development)\n  gem \"meta_request\"\n# Rspec for tests\n  gem \"rspec-rails\"\n# Guard for automate gem installations, livereload, rails server restarts, etc\n  gem \"guard-rails\"\n  gem \"guard-bundler\"\n  gem \"guard-rspec\"\nend\ngroup :production do\n  # A fast and robust web server and application server for Ruby, Python and Node.js\n  gem \"passenger\"\n# Enable all Heroku platform features\n  gem \"rails_12factor\"\n# Enable gzip compression on heroku, but don\"t compress images.\n  gem \"heroku-deflater\"\n# New relic monitoring\n  gem \"newrelic_rpm\"\nend\n```\n. Hello anarchocurious,\nThanks for your investigation, indeed, after my tests too, the issue is with the \"meta-tags\" gem.\nNow, I'm using jQuery UJS for updating some area in my page.\n. ",
    "vevisystems": "While I agree it may be not a turbolink bug, it is really a problem as inverse proxies are very common in any web architecture, so in my opinion turbolinks should support it. Anyway, I will try to find a solution and suggest it here if I found one.\n. Not really, we had to change our implementation to avoid this problem. I don't actually remember what we needed to do, but in any case it was not a solution to this problem.. ",
    "quentindemetz": "@vevisystems any luck?. ",
    "justin808": "FWIW, I really need the 3.x version of Turbolinks due to the need for the script option of data-turbolinks-eval=always.\nI need it for this PR: https://github.com/shakacode/react_on_rails/pull/104\nI'm guessing there is no simple workaround without going to v3 for this functionality. \nSo here's my vote for releasing v3!\n. @dhh would you be willing to consider a PR on this one?\nWe got over 23,000 downloads in the past month on npm of jquery-ujs: https://www.npmjs.com/package/jquery-ujs\nInstalling JavaScript, given those numbers, via NPM is definitely something the community is doing.\nI just reserved turbolinks on npm and would like to help either by doing what we're doing with jquery-ujs (supporting the distribution via a fork) or handing over turbolinks on npm to the rails team (along with jquery-ujs, if that's feasible).\nIncidentally, the performance of our React on Rails demo at http://www.reactrails.com/ is quite snappy thanks to Turbolinks!\n\n. By the way, this doesn't change the fact that a gem still needs to be installed. One downside of including TurboLinks via NPM is that the version of the ruby code and the JS could could be different.\nFor React on Rails, v2+, we also have the JavaScript side distributed via NPM, and the Ruby code checks that the version numbers match.\nThe current code behind the http://www.reactrails.com includes Turbolinks in a \"application.js\" type file, as shown HERE.\nSo it is feasible to have a couple exceptions to including all dependencies via npm.\nThe bottom line is that if we think providing the JS code of TurboLinks via the Gem is the really the only desired distribution mechanism, I probably won't spend much time evaluating the option of npm. But if we might provide this, then I'll prototype this using a fork.\nThanks for your consideration.\n. Here is a document describing how we include and debug Turbolinks in the context of React on Rails.\n. Roger that @dhh! Let me know if we can also transfer jquery-ujs. \n@callumacrae, my collaborator on jquery-ujs, pointed me to this:\n\n. https://www.npmjs.com/package/turbolinks LIVE! We did it today. you can see it in use at http://www.reactrails.com.\nPR showing using it from NPM: https://github.com/shakacode/react-webpack-rails-tutorial/pull/259\n. ",
    "TheNeikos": "So if I understood correctly partial replacement will not be included in the official release (with Rails 5)?\n. ",
    "nateberkopec": "https://github.com/basecamp/turbolinks looks fairly up-to-date. Now that Rails 5.0.0.beta1 is out, is there any update on the release plans or schedule for Turbolinks 5? \nFWIW, I think it would be nice if TL3 was forked and released. I think a lot of people would find it useful, and the fork should live on for at least as long as it's feature set (like partial replacement) can be added to TL5.\n. ",
    "mintuhouse": "We are just getting started with adding turbolinks back to our rails 4.1 application. Is it recommended to use the TL5 or TL3 ? \nIf we go ahead with TL5, can I safely use the 2.5-stable README for supported API or has the underlying core API changed after adding the hybrid support?\n. Thanks DHH for taking time to respond immediately. \nUsing turbolinks v5 then. \n. ",
    "inchr": "Honestly I don't like the idea that many contributors here has worked for free on TL3 and now TL5(that will be default in rails5) has a totally different API.\nBtw @dhh : what is changed in TL5 ? where we can see the new APIs ? what are the advantages ?\nIn what is better than TL3 ?\nWhy the choice of remove the partials ? (technocally speaking...the partial changes were  very useful for change only little pieaces of the app, how you can get the same performances with TL5 ?)\nPS: I really appreciate the work done on TL3/5 - I'm only a bit worried that in this way(TL5 that has a totally different API, when TL3 is still not released), people will think that turbolinks is not a valid/solid project for a new webapp.\nPS2: Any links/guide for turbolinks5 new api ?\n. @dhh It's still possible do something like this: render :index, change: \"todos\" in turbolinks5 ?\n. Just to be clear: I really appreciate the work that you/rails core team/basecamp team do with rails/turbolinks. I appreciate also the work of the contributors of this branch.\nBtw: few comments above, you've suggested to use turbolinks5+rails5 for a new project...but there is any doc/readme/example/blog post about turbolinks5 ? I'm really interested to try it for a new project.\nI was justing thinking that a good alternative for partial replacement, is do a simple ajax request, and reply with a create.js.coffee for example(RJS) and from there, render the new partials, where you want. What you think ? it's a good idea ? \n. Ok! I will read the turbolinks5 code!\nYou're right...with SJR, it's not a big deal don't have partials replacement from controllers.\nThanks!\n. Just for information:\n@dhh is right(again). I'm developing a new project(for now it's still rails4+turbolinks3...but I guess, it will be very easy to migrate to rails5+turbolinks5) with turbolinks and SJR and it's great!\nThe partial replacement done from controllers was totally useless and I don't miss it!\nSo don't worry for losing this feature and embrace SJR!\n. ",
    "sgrif": "Should this issue be closed? It sounds like turbolinks 3 isn't being released\n. ",
    "glennfu": "I've been inspired by DHH's RailsConf speech about Turbolinks vs modern js frameworks! My priority has been \"how can I build a fast front-end experience using Turbolinks instead of Backbone/Ember/Angular\" and not \"Make my site work\u00a0well without JavaScript\". With that in mind, and since Turbolinks 3 is still so new, I've been having a lot of fun experimenting!\nPartial and text rendering to Turbolinks with the 'change' attribute has given me a lot of really cheap and easy ajaxy features with very little front-end javascript. I would expect this kind of benefit to be highlighted especially in the case of pages that have a lot of html.\n. ",
    "zerosicks": "With partial replacement you can hook into the events to trigger exit and entrance transitions during the request:\nI use this:\n``` coffeescript\n$(document).on 'page:fetch', ()->\n  $('#dynamic .content').addClass('fadeOut')\n$(document).on 'page:change', ()->\n  $('#dynamic .content').addClass('fadeIn')\n  setTimeout $('#dynamic .content').removeClass('fadeOut fadeIn'), 150\n```\nI admit I went through a roundabout journey of research before coming back and realizing how useful the events are.\n. ",
    "mmplisskin": "This is not the issue it has to do with additional html I will close this. \n. ",
    "devmarwen": "Yes. I'm using the master branch\n. It's Coming from the jbuilder 2.3.1 Gem. Updating it to 2.3.2 fixed the problem and Turbolinks works again like expected!\n. ",
    "inopinatus": "When Turbolinks is fetching a page for replacement via AJAX, it sets the X-XHR-Referer header. I've use this server-side as a hint that \"turbolinks was probably used\", to tune the UX of a particular form.\nUpside: it is the common case and good enough for tuning UI behaviour.\nDownsides: undocumented; other components could set it; sometimes turbolinks will fallback and fetch a page by built-in navigation rather than an AJAX call, in which case the header is not set. Cannot be relied upon for general behaviour.\nHence:\nruby\nclass ApplicationController < ActionController::Base\n  # ...\n  def its_probably_turbolinks\n    request.headers[\"X-XHR-Referer\"].present?\n  end\nend\nIf you really want to be sure, you'll have to fork the gem, set your own private header, and deal with the edge cases.\n. @grosser Are you looking at Turbolinks 5? That header is not set in turbolinks-classic.\n. For those who visit this thread later, please note, this is not the Turbolinks 5 repository. For turbolinks 2.5, request.headers[\"X-XHR-Referer\"] remains the best available way.\n. ",
    "grosser": "this seems to work: request.env[\"HTTP_TURBOLINKS_REFERRER\"]. 5. ",
    "nicolasmlv": "Is this feature something similar to Turbolinks.pagesCached(20); // Set the cache size ?https://github.com/rails/turbolinks#page-cache\n. ",
    "matthewjsummers": "I don't think so.  You might want turbolinks to continue its caching strategy.  Our concern is that (especially when moving to turbolinks) there might be leaky JS or global state that is being added to/polluted.  Moving large JS codebases to turbolinks is an undertaking that shouldn't be take lightly - so we wondered whether building in the ability to hard reload every X requests would minimise potential issues.  Our users have long running sessions - they will log in at the beginning of the day and use the app all day - so any issues in memory bloat or the like could be pronounced by the end of the day after several thousand page fetches inside one session.\n. ",
    "a-barbieri": "The documentation is not so explicit and I cannot make @caike suggestion to work. \nI'm having hard time as well understanding how this works.\nDid you find a way to sort that out?\nIs there any hope or should I just drop it?\nI just want to load content asynchronously but maybe it's not the right tool.\n. ",
    "rmm5t": "Looks like Turbolinks 5 implements this with an action option. For example:\njavascript\nTurbolinks.visit(url, { action: \"replace\" });\n. ",
    "chrisvfritz": "It looks like that app wasn't forcing SSL in production.rb via config.force_ssl = true. It is now and turbolinks works! I'd hope not too many apps are using SSL without that option, but I think I'll rename the issue instead of closing it, because I'd expect at least one of these to happen:\n- When turbolinks is installed, but SSL is not forced either in the config or controller, pages served via SSL 500 with a useful error logged. This might not be feasible, because I can imagine cases where turbolinks might just not be used on SSL pages and this could be difficult to detect.\n- Turbolinks uses the same protocol as the current page for relative links, just like normal links do. (This would be my personal preference.)\n. ",
    "Deuteu": "\ndifficult to detect\n\nIn my case on http page, turbolink changes it to https in the url so easy to detect but unwanted so second point would be great.\n. ",
    "ericenns": "I am having the exact same issue. For me it is when my users sessions is destroyed and they are redirected to the sign in which has a different layout. Using devise btw if that matters.\n. ",
    "callumacrae": "Basically, yeah. Front-end developers don't usually like interacting with the asset pipeline, and I've spoken to quite a few companies who have switched to using gulp or grunt for that reason (it's nice to be able to write tooling in your main language, you know?). react_on_rails, @justin808's project, uses webpack, which again gets its dependencies from npm.\n. To make a release, it's basically just a case of updating the version number in package.json (and if you use the npm version command, it handles the git tag for you too), and then running npm publish. It's super simple :)\n. ",
    "sebastianpicklum": "Is there any reason why this piece is loaded via AJAX? Seems like an unnecessary server round-trip to me.\n. ",
    "jtokoph": "I should mention that my current workaround is to listen to page:before-unload and save scroll positions. Then on page:update restoring those scroll positions. Would be nice if I didn't have to do that for each scroll view though.\n. ",
    "Jelkster": "I've been trying for the last 2 days to try and get turbolinks to persist elements.  What's the secret?  Elements I annotate with the data-turbolinks-permanent are not persisting.  I copied your html and when I clicked on a link, it disappeared, even though the network tab shows it was loaded via turbolinks.  I've tried v3 and v5 to no avail.\n. ",
    "saetia": "this will work if you don't want to worry about permanent\njs\nvar scrollLeft = 0;\n//restore the menu position\n$(document).on('page:change', function() {\n  $('.menu').scrollLeft(scrollLeft);\n});\n//before the current page goes away, save the menu position\n$(document).on('page:before-unload', function() {\n  scrollLeft = $('.menu').scrollLeft();\n});\n. ",
    "bodrovis": "https://github.com/kossnocorp/jquery.turbolinks/issues/56\n. ",
    "nilbus": "Is this backward-compatible with Rails 4?\n. ",
    "aried3r": "\nIs this backward-compatible with Rails 4?\n\nNot fully, I think. Module#prepend came with Ruby 2.0 but Rails 4 supports Ruby 1.9.3.. Ping @rafaelfranca, would you be open to a PR that removes compatibility for Ruby <2, maybe even Rails <4.2?\nWe cannot yet switch to TL 5 in our project, so we want to keep using TL-classic for the time being.. ",
    "mmoll": "what's the status here?. I can take a look how far I can get, but first #678 would need to get merged.. hrm, I guess that whole testing stuff should go to 2-5-stable, like this PR?. please see #679 . @rafaelfranca \u261d\ufe0f . could there be a 2.5.4 release on rubygems?. @rafaelfranca I know I'm annoying, but: any news here?. anybody?. @rafaelfranca Thanks a bunch! Because of the way we package our software for nightly RPM/DEB builds it's not easily possible to use git repos in bundler for production builds.... ",
    "samjewell": "@rafaelfranca Any reason this can't be merged? I know the tests are failing, but they must be failing on master too - this is a pure documentation change.. ",
    "neohunter": "I guess this is the right solution:\ngem 'turbolinks', github: 'turbolinks/turbolinks-classic'. ",
    "xprazak2": "tests failing due to missing Rakefile in 2-5-stable branch. ",
    "jdxcode": "missing a space on this line\n/pedantic\n. ",
    "ayrton": "Perhaps this should take link.target == '_self' into account as well.\n. @stevenbristol I mistakenly typed inline before, but corrected this shortly after. I agree that it's generally not used, but this might be useful to cover the edge cases.\n. ",
    "DrewMartin": "replaceChild returns the node that was replaced so we can use its return value\n. "
}