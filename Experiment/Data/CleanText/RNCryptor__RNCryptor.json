{
    "Gavintc": "Hi rnapier, thanks for your library. Since part of my project is written in Java, I need to decrypt those stuff generated from Java. Output from Java is a salt, IV, cipher text and password. I have successfully get the encryption key using keyForPassword in your library, but what's next? Since your decryption API needs a HMACKey, I still don't know where to get it after going through all the header files. Encryption in Java is using AEC/CBC/ZeroBytePadding. Thanks.\n. ",
    "rnapier": "See JNCryptor for a Java implementation of the RNCryptor encryption format. https://github.com/RNCryptor/JNCryptor\n. Thanks for testing. I'm really glad to have someone trying this out before I announce it to the world.\nI've now built a test case that demonstrates this problem. It's not actually related to bad passwords. It's a function of the file size relative to the block size (you get the same crash for a good password as a bad password when the file size is 993 bytes for instance).\nYou can follow Issue #19 to track when I fix this.\n. It's done. See https://github.com/rnapier/RNCryptor/blob/master/RNCryptor/RNOpenSSLDecryptor.h.\n. I am currently working on this on the 'async' branch. It can currently encrypt asynchronously using RNEncryptor. This is backward compatible with RNCryptor. See the testAsync test case for an example usage.\n. The async branch now has working async functionality. After a little review, further testing, and documentation, I will move this to master.\n. Just to check: did your adding the extra files resolve this sufficiently? http://stackoverflow.com/questions/9958661/how-to-compile-and-use-commoncrypto-for-ios-4\n. I've never seen a number that low in 2012. That's about the number of people who switched by November or December of last year. Many important apps have gone iOS5-only. It's fine that you've chosen to support iOS4, but it's nowhere near 45% in general. Your specific market may be different, but the general market has upgraded.\n. Your 45% number is about equal to the 40% number reported last Nov: http://www.mactrast.com/2011/11/nearly-40-of-all-iphones-are-already-running-ios-5/.\nInstapaper went iOS5-only in March to little customer push-back.\nPxldot claims 75% iOS 5. http://pxldot.com/post/18754186750/ios-ebb-and-flow\nDavid Smith claims ~80% in March. http://david-smith.org/blog/2012/03/10/ios-5-dot-1-upgrade-stats/index.html\nThese aren't scientific; Apple won't give us the best numbers. But there's no way the answer is 45% for 5+ in April, 2012.\n. The move to CCCryptorCreate() also forces it back to AES-CBC, which is less secure than AES-CTR (this is why CCCryptorCreateWithMode is used). The padding oracle attack isn't a huge issue in most of the uses that RNCryptor is likely to encounter, but I had hoped to move the bar forward. My solution will likely be to provide a different cryptor (which is why I built the system to allow multiple cryptor configurations).\n. AES does not restrict its output to legal string encodings. That would dramatically reduce its security. If you need to encode arbitrary data as a \"string\" (I assume you mean a 7-bit ASCII string rather than a UTF-8 string), you can use encodings like Base64. That's unrelated to encryption. \nMy recommended Base64 encode/decode functions are from Matt Gallagher: http://cocoawithlove.com/2009/06/base64-encoding-options-on-mac-and.html\n. I don't understand what you mean. Base64 is for encoding arbitrary data as a printable string. It has nothing to do with security. You may want to ask your question on the \"RNCryptor\" google group. \n. Thanks. Good generalization.\n. I spoke with the Security team at WWDC about CTR. This is bug in iOS 6. Also, based on that discussion and a lot of other thought, I'm switching back to CBC mode (this is changed in top-of-tree on master). See http://robnapier.net/blog/mode-rncryptor-767 for full details. Note that if you try to use top-of-tree on master, please let me know. There's a serious security bug in it that came in during a recent pull request. I've fixed it on the async branch, but I haven't merged that change to master yet.\nSpeaking of which, you may be interested in the new async branch that I'm working on which I believe is going to be useful in more scenarios. It's coming along quickly and can handle async encryption. I'm working out async decryption now. This will be a pretty major API change, but I think it will make things much easier for those who want to integrate with NSURLConnection (which is common). See #21 for full details.\n. Fixed by switching to CBC.\n. Please upgrade to the latest version. The problem is that iOS 6 currently doesn't support CTR (it was an oversight). I've switched to CBC after discussion with the Apple Security team and reworked the API to allow much better async operation. Please let me know if the new API makes anything difficult.\n. The latest version has a different API, and I dropped direct support for\nNSStream, replacing it with a full async API. If you're using NSStream, let\nme know. I dropped it because it seemed much less useful than the new async\nAPI.\n. Can you describe your specific use case? Are you reading files, data\nstreams, arbitrary streams determined at runtime (that was what it was\noriginally designed to handle)? Even if I add it back in, it will likely\nhave a somewhat different API (to integrate with the async support), so I\nwant to match it to actual use cases.\n. This is what the new async interface is designed for, and does it much\nbetter (and more easily implemented) than the old NSStream interface.\n. RNCryptor v1.1 and v2.0 have slightly different file formats. In\nparticular, I needed to change the AES mode from CTR to CBC. This makes\nthem incompatible. CTR caused problems for older versions of iOS and Mac OS\nX, and introduced a possible security vulnerability. See\nhttp://robnapier.net/blog/mode-rncryptor-767 for details.\nYou can detect RNCryptor 1.1 vs 2.0 by the first byte. RNCryptor 1.1 wrote\n0 here. RNCryptor 2.0 writes 1 here.\n. @skabber, please see @ChristianKienle's fork: \nhttps://github.com/ChristianKienle/RNCryptor/commit/ae2e4db2ae267a2d2e8dfffb8c3cb69a12ac6575\nI've added some comments on things to improve before integrating it, but he has some good work going there that will come into my fork soon.\n. Fixed in https://github.com/rnapier/RNCryptor/commit/3dbab5dc68b71d7d9fbdbd6b56ccb6137a0fcf84\n. I believe your fix is correct. Thanks. I'll develop some test cases for that.\n. OpenSSL has moved to https://github.com/rnapier/RNOpenSSLCryptor\n. Recent versions of RNCryptor do not support the original v0 format (which required a difficult-to-port AES mode). I will add this support back however, since it clearly is a concern.\n. At this point, going all the way back to v0 is probably out of the question (I haven't even implemented v2 support.)\n. Do you mean that you're compiling RNCryptor without ARC, or that you're compiling RNCryptor with ARC in a project that doesn't use ARC elsewhere? RNCryptor requires ARC for itself, though ARC code interoperates with correctly written non-ARC code (correctly written meaning that it correctly follows the naming conventions for memory management).\n. You should not use -fno-objc-arc on RNCryptor. Are you compiling with the iOS 5 or iOS 6 SDK? This is probably due to the changes in iOS 6. dispatch objects are real objects in iOS 6 and have to be treated differently. I haven't put in the required #ifdef code for that. It should compile against the iOS 5 SDK.\nSee https://github.com/rnapier/RNCryptor/pull/29 for one fix for this (but note my comments on this pull request and it needs to be implemented slightly differently, using OS_OBJECT_USE_OBJC).\n. Merged #33 \n. @ChristianKienle, there are a couple of standard or pseudo-standard formats that I've considered. CMS (RFC5652+RFC6476) is quite complicated and would add a lot of overhead. I've also considered the aescrypt format, but it has several security problems that bother me (and if I fixed, wouldn't be compatible with aescrypt anymore).\n. @mhergon , the IV is raw data. You can't just turn raw data into ASCII bytes and print them. Well, you can, but you'll get a string like the one you printed. A common way to transmit raw bytes is with Base-64 encoding, but python is generally capable of reading data directly without encoding. I have no idea how you're posting the data.\n. When your remove your \"signature\" I think you meant to use range.location-1 rather than +1.\nNote that appending a constant string isn't usually thought of as \"signing\" since it is trivially faked. But it's fine if you don't need a security check. If it's just a static string, though, it's usually easier to put it at the start if the file. \nRob\nOn Nov 9, 2012, at 7:23 AM, Achraf notifications@github.com wrote:\n\nI'm using RNCryptor to encrypt/decrypt files in ios and mac app, i want to 'sign' my file with a string so i can know if its my crypted file or not.\nmethodologie : \nencryption:\n1-crypt file.\n2-add my string as data to the crypted data.\ndecryption:\n1-get the range of the string and remove it from crypted data.\n2-decrypt the data.\nbut when i decrypt file, ihave this error \"Error Domain=net.robnapier.RNCryptManager Code=-4301 \"L\u2019op\u00e9ration n\u2019a pas pu s\u2019achever. (net.robnapier.RNCryptManager erreur -4301).\"\nI'm pretty sur that sign/unsign work because i sign an image and when i unsign it i have a good result.\ncode:\nNSMutableData *originalData = [NSMutableData dataWithContentsOfFile:[file.filePath stringByReplacingOccurrencesOfString:@\"file://localhost\" withString:@\"\"]];\nNSMutableData _cryptedData= [NSMutableData dataWithData:[RNEncryptor encryptData:originalData withSettings:kRNCryptorAES256Settings password:textFieldPassWordForEncryption.stringValue error:&error]];\nNSMutableData signedData = [self signFileData:cryptedData];\nNSMutableData unsigneddata = [self removeSigntureInRange:[self testIntegrityFromData:signedData] FromData:signedData];\nNSMutableData decryptedData = [NSMutableData dataWithData:[RNDecryptor decryptData:unsigneddata withPassword:textFieldPassWordForDecryption.stringValue error:&error]];\nNSLog([error description]);\n[imageTest setImage:[[NSImage alloc]initWithData:decryptedData]];\n     -(NSMutableData_) signFileData:(NSMutableData) fileData\n   {\n   NSData *signData = [signture dataUsingEncoding:NSASCIIStringEncoding];\n   [fileData appendData:signData];\n    return fileData;\n   }\n-(NSRange) testIntegrityFromData:(NSMutableData*)fileData\n{\n  NSData* dataToFind = [signture dataUsingEncoding:NSASCIIStringEncoding];\n  NSRange range = [fileData rangeOfData: dataToFind options:0 range:NSMakeRange(0, [fileData    length])];\nif (range.length > 0)\n{\n    return range;\n}\nelse\n{\n    return range;\n}\n }\n-(NSMutableData*) removeSigntureInRange:(NSRange)range FromData:    (NSMutableData*)dataFile\n {\n  NSMutableData *d = [NSMutableData dataWithData:[dataFile subdataWithRange:NSMakeRange(0, range.location+1)]];\n return d;\n  }\n\u2014\nReply to this email directly or view it on GitHub.\n. You are either stripping the wrong bytes or you're corrupting your data when you transmit it. The HMAC mismatch means the data you're handing to RNDecryptor does not exactly equal the data that you got back from RNEncryptor. \n\nSignatures are generally done with a cryptographic hash. Google for \"digital signature.\" The HMAC that RNCryptor uses is a simple form if symmetric signature. That's why it's failing to decrypt. The signature isn't validating because the data does not exactly match what was signed. \nOn Nov 9, 2012, at 7:41 AM, Achraf notifications@github.com wrote:\n\nThank you for replay but i have the same issue when i add the string to the start of file, her's my new code:\nNSMutableData originalData = [NSMutableData dataWithContentsOfFile:[file.filePath stringByReplacingOccurrencesOfString:@\"file://localhost\" withString:@\"\"]];\nNSLog(@\"originalData data lenth = %li\",originalData.length);\nNSMutableData cryptedData= [NSMutableData dataWithData:[RNEncryptor encryptData:originalData withSettings:kRNCryptorAES256Settings password:textFieldPassWordForEncryption.stringValue error:&error]];\nNSLog(@\"cryptedData data lenth = %li\",cryptedData.length);\nNSMutableData signedData = [self signFileData:cryptedData];\nNSLog(@\"signedData data lenth = %li\",signedData.length);\nNSMutableData unsigneddata = [self removeSigntureInRange:[self testIntegrityFromData:signedData] FromData:signedData];\nNSLog(@\"unsigneddata data lenth = %li\",unsigneddata.length);\nNSMutableData *decryptedData = [NSMutableData dataWithData:[RNDecryptor decryptData:unsigneddata withPassword:textFieldPassWordForDecryption.stringValue error:&error]];\nNSLog(@\"decryptedData data lenth = %li\",decryptedData.length);\nNSLog([[error userInfo] description]);\nlog :\noriginalData data lenth = 21854\ncryptedData data lenth = 21922\nsignedData data lenth = 21938\nIES.FileSign.com\nunsigneddata data lenth = 21922\ndecryptedData data lenth = 0\n{\nNSLocalizedDescription = \"HMAC Mismatch\";\n}\nyou can see that the \"cryptedData\" lenth is equal to the \"unsigneddata\" so the sigh/unsigne work fine.\nthere's other way to sign my file in the right way not with a string ?\n\u2014\nReply to this email directly or view it on GitHub.\n. I've updated the Data-Format link with more information on how to implement this format in other languages. It's not just a matter of a header. You have to encrypt correctly. Almost all common AES encryption sample code does it very insecurely. You can't just put a header on the front and fix that. The Data-Format page walks through how to do it correctly. This is how you would do it securely even if you weren't using RNCryptor.\n\nhttps://github.com/rnapier/RNCryptor/wiki/Data-Format\n. I take it you don't have a password and have generated random 256-bit AES keys? If so, RNCryptor should be able to handle that. Give some more details and I can write it up. If you have passwords, then there's no secure way to perform AES encryption without generating and sending a salt.\n. This is fine. You'll still need to generate an HMAC. See http://docs.python.org/2/library/hmac.html\nPut the package together without the salts:\ncryptor - options - iv - data - hmac\nYou can then call decryptData:withEncryptionKey:HMACKey: (or the initWithDecryptionKey:... version). It won't look for salts (in the code, you'll see references to kRNCryptorOptionHasPassword which determines whether to look for salts). I'll try to write this up later in the docs. I very seldom run into people using random keys, but I built the system to handle it.\nYou'll want a random HMAC key to go along with the encryption key. Using the same key for the encryption and the HMAC is discouraged, though it's not a complete security failure if you do. I'm not aware of any specific related-key attacks on that setup, and it's definitely much stronger than having no HMAC. But if you can generate a second key for the HMAC, I'd recommend it.\n. There is now a python implementation included in RNCryptor\n. Removed.\n. You've done great work here. I may like to copy this code as an example for PHP usage. I believe your mistake is in the last $data= line. You pass chr(0) as the options (second byte). This should be chr(1) to indicate that you're using a password. This may be due to an earlier mistake in my data format documentation. I've since updated it. (https://github.com/rnapier/RNCryptor/wiki/Data-Format)\n. chr(2) for version 2. chr(1) indicates password (chr(0) indicates no\npassword).\n-Rob\nOn Wed, Jan 23, 2013 at 1:00 PM, tarekhallak notifications@github.comwrote:\n\nHi,\nIt looks that you update data-fromat page again since 2 days?\nDoes that means that the first byte should be chr(2) and the second byte\nshould be chr(0) to indicate that I'm using password ?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rnapier/RNCryptor/issues/45#issuecomment-12612897.\n\n\nRob Napier -- Software and Security Consulting\nCocoaphony blog -- http://robnapier.net/blog\niOS Programming Pushing the Limits -- http://robnapier.net/book\n. The HMAC is now computed over [0 to n-32]. I'm looking into the rest of your issue. I don't know yet. I need to install mcrypt here so I can test it.\n. See https://github.com/rnapier/RNCryptor/blob/master/php/encrypt.php\n. http://stackoverflow.com/questions/14481605/dispatch-queues-and-asynchronous-rncryptor/14586231\n. I may still reconsider NSStream support on the new Swift API. I'm not certain yet if it's necessary.\n. Fixed in 8b01b2b\n. Do you have any specific cases where you need multiple encryption settings for the same code base? I've left room in the format to add new encryption settings, but I've resisted adding it as a feature until there is a specific use case. It complicates the code and testing, and adds new error conditions, so I like there to be a reason.\nThe way I've intended to implement it would look like this:\n- Add a new bit to the options flag indicating that a custom configuration is encoded.\n- The next byte defines which standard configuration to use (0 indicates the current default, 1 might be some other stock setting like AES-128). \"FF\" indicates that it is a custom setting\n- If FF, then the next 27-or-so bytes encode the settings. Encoding these settings correctly is a slight pain without making the header huge (I have to make sure that the size of each field is large enough for the largest possible value).\nIt's quite doable, but there should be a use case for doing it.\n. I probably won't be able to seriously consider this until April, but note\nthat it is trivial to modify the header to whatever settings you want in\nyour own code if you're not trying to interoperate with others. The only\ntime that configuration is important is if one program needs to deal with\ndifferent settings in different contexts (particularly when reading).\nOn Tue, Mar 12, 2013 at 9:46 AM, inismor notifications@github.com wrote:\n\nRob, I need the exact same method. It's not so much for the iOS-side, but\nfor the encryption side which is being done in JavaScript and by necessity\nneeding to use fewer iterations for PKBDF2 that I need to account for in my\niOS code.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rnapier/RNCryptor/issues/49#issuecomment-14775664\n.\n\n\nRob Napier -- Software and Security Consulting\nCocoaphony blog -- http://robnapier.net/blog\niOS Programming Pushing the Limits -- http://robnapier.net/book\n. I was puzzling over this this morning and came to the same conclusions as you. My current thinking is to add a no-option encryptor and recommend its use rather than one with settings. \nI'm going through a BDD round right now as I move to Kiwi tests. That's helping me think through the API more. \nI've just run into the \"too many iterations\" problem myself as I work on a JavaScript implementation. (If others have one already I'm happy to take pull requests.)\nThanks for the PR. \n. Sorry, I was confusing. I basically like the way you've done it; just need\nto study it a little more. I'm not currently planning to remove the\nsettings: option; I just want to stop listing it as the expected call.\n. @yeahphil, I've applied this PR with some bug fixes (you didn't apply the default settings in the init methods, which breaks async). I still have work to do, making some new encryption methods that don't require passing settings (since settings really now has the concept of \"default\"), and I want to provide an easier way to modify the PBKDF2 rounds, since this is almost always the setting you want to mess with. I'll attack all of that when I finish porting the test suite to Kiwi (which is already exposing other subtle problems). But your basic approach is good and I've applied it. Thanks a lot.\n. At some point I will probably make this change, but it is a version-impacting change, and since there is no actual security concern, and it increases the size of the header as I recall, I've been hesitant to make the change.\nRob\nSent from my iPhone\nOn Feb 3, 2013, at 2:20 PM, TimoKr notifications@github.com wrote:\n\nI know that it might not be a security issue, but I've noticed that in the default RNCryptorSettings kRNCryptorAES256Settings SHA1 is used as PRF for PBKDF2.\nBut as there are no performance differences, I'd recommend to use SHA-2 (e.g. SHA-256) for the key generation. What do you think?\n\u2014\nReply to this email directly or view it on GitHub.\n. Will be addressed in v4.\n.  I'm very suspicious of this line:\n\n__block NSOutputStream *outputStream = [[NSOutputStream alloc]\ninitToFileAtPath:outputPath append:YES];\nThe \"append:YES\" almost certainly should be \"NO\". Are you sure you\ndon't already have a file at the targe path that you're accidentally\nappending to?\nAs a side note, for encrypting and decrypting large files, see the code here:\nhttp://stackoverflow.com/a/14586231/97337\nThe way you're doing it is ok, but it can use a lot more memory than\nyou expect, especially on slow devices like iPad 1. (See the question\nfor the background).\n.  Have you updated to to at least ed2f5bc8c4 (Jan 25)? There were some async\nfixes particularly on iOS 6.\nhttps://github.com/rnapier/RNCryptor/commit/ed2f5bc8c4942d956084a9acd51ef056b6747e33\n. One of the recent pull requests broke OpenSSL-256. I've fixed it\nin 33363f7. Look at testOpenSSLDecryptStream in the test cases for an\nexample.\n. Can you provide more information on what's leaking and how you know it's a\nleak? Do you have a retain loop?\n. Are you including the semaphore? That's not required for most app-like projects. See the SO answer or the latest README.md for a more usual case. \nNote that a memory spike is not the same as a leak. It's still a problem, but it represent something different and has different solutions. A leak means that the memory is allocated but inaccessible by the program. You can spike memory usage without an actual leak. \n\nfile and noticing that the memory went from 50 MB to above 400 MB and then app crashed. Unfortunately I coudn't find out the exact problem. I'll get back to you after I do some more tests.\n\u2014\nReply to this email directly or view it on GitHub.\n. And I've just merged in the latest changes. The PHP is getting quite good. Thanks a lot!\n. That should be sufficient, though the iOS version wouldn't be able to read it (though MGCryptor could). Is there a reason you want to use a 128-bit key?\n. hash_pbkdf2() is compatible with RNCryptor (it's the standard PBKDF2 algorithm, so is compatible with every implementation). I don't know specifically which versions of PHP it is designed for.\n. In your code, you're stripping the HMAC. This is a critical part of securing AES. Without an HMAC, an attacker can in some cases modify your ciphertext to cause it to decrypt to a different value.\n\nYou're also not checking padding correctly; you're just stripping \"control characters.\" The padding should never be null characters; it should also be a byte indicating the number of padding characters (PKCS#7 padding).\nThere's no reason to use RNCryptor if you're going to strip most if its security features. The basic CCCrypt() call would take less code, and that's all you're wrapping here.\n. I haven't written a PHP decrypt() yet. Issue #39\nYou can see the file format here if you want to create a decryptor. I'm\nopen to pull requests.\nhttps://github.com/rnapier/RNCryptor/wiki/Data-Format\nOn Fri, Mar 1, 2013 at 11:31 AM, vsymguysung notifications@github.comwrote:\n\nThanks for your answer.\nDo you have any example codes for decrypting for PHP?\nI know you did good job on encrypting for php through the encrypt.php file.\nThanks always.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rnapier/RNCryptor/issues/55#issuecomment-14297943\n.\n\n\nRob Napier -- Software and Security Consulting\nCocoaphony blog -- http://robnapier.net/blog\niOS Programming Pushing the Limits -- http://robnapier.net/book\n. Note that there was a change in how the HMAC is calculated between the v1\nand v2 file formats. If you're trying to support both file formats, then\nyou have to check the version byte in the header, and calculate the HMAC\ncorrectly. v1 calculated the HMAC over just the ciphertext. v2 calculates\nthe HMAC over the entire message up to the HMAC itself (so it includes the\nheader).\n. I don't understand the question. Is this related to RNCryptor? I began work on porting to python, but I haven't completed it yet. If you're interested in implementing the RNCryptor format in python, you'll want to see the Data Format: https://github.com/rnapier/RNCryptor/wiki/Data-Format\n. I have nothing but the beginning of a sketch. It doesn't handle passwords, and it doesn't write an HMAC. I was just playing with how python can encrypt at all. And it requires the Crypto library, which is pretty complex, so I'm not certain yet whether that's a good idea. This is all the code, but as I said, this is not compatible with RNCryptor (and barely works).\n```\n!/usr/bin/python\nfrom Crypto.Cipher import AES\nfrom Crypto import Random\nimport StringIO\nfrom pkcs7 import PKCS7Encoder\nclass RNCryptor:\n    \"\"\"Cryptor for RNCryptor\"\"\"\n    def init(self, settings):\n        self.settings = settings\ndef encrypt(self, message, key, hmac_key):\n    output = StringIO.StringIO()\n    output.write(1) # Version 1\n    output.write(0) # No options\n    iv = Random.new().read(AES.block_size)\n    cipher = AES.new(key, AES.MODE_CBC, iv)\n    encoder = PKCS7Encoder()\n    output.write(iv)\n    output.write(cipher.encrypt(encoder.encode(message)))\n    return output.getvalue()\n\ndef main():\n    plaintext = b\"Attack at dawn\"\n    key = '000102030405060708090a0b0c0d0e0f'.decode(\"hex\")\n    hmac_key = '0f0e0d0c0b0a09080706050403020100'.decode(\"hex\")\n    cipher = RNCryptor(\"\")\n    ciphertext = cipher.encrypt(plaintext, key, hmac_key)\n    print ''.join('%02x' % ord(byte) for byte in ciphertext)\nif name == 'main':\n    main()\n``\n. See https://github.com/rnapier/RNCryptor/blob/master/python/RNCryptor.py for an encryptor based on pycrypt. I haven't written a decryptor yet.\n. There is now an encryptor and decryptor in python/RNCryptor.py\n. @GirirajMulay I don't believe [RNCryptor-python](https://github.com/RNCryptor/RNCryptor-python) supports key-based encryption. You should open an issue there to request it if you need that.. http://stackoverflow.com/a/15419958/97337\n. I don't understand how this question relates to RNCryptor. What is$_Files(or$_FILES`)? This isn't part of RNCryptor. I assume it's part of your code outside of the decryptor? I can't say why your array is broken.\nIf $b64_data means that it's base-64 encoded, this isn't going to work unless you convert it to real data at some point. I assume you mean to do that with $bin_data, but you don't.\nI notice that you're computing, but not checking your HMAC. That's means you're vulnerable to the file being modified in transit. If you don't care about that (I can't imagine why you wouldn't care, but if so), then you shouldn't waste time calculating the HMAC just to throw it away.\nIs there a bug with RNCryptor that you're reporting?\n. RNCryptor does not Base64-encode or decode anything. It takes binary NSData and returns binary NSData. The PHP low-level functions also take and return binary data. Base64-encoding is not part of encryption; it's purely for passing binary data over 7-bit ASCII channels.\n@guysung has adapted PHP routines for this here: \n   https://github.com/rnapier/RNCryptor/blob/master/php/decrypt.php\nI haven't heavily reviewed this code, but he indicates that it is working, it's based on some original PHP code that I wrote, and it looks correct. You should compare your code to his. I will probably revise guysung's code a little bit to possibly make it clearer and to improve error-checking, but I'm not a PHP developer and am not particularly familiar with what is common practice in PHP.\nIf you are seeing HMAC mismatches, the most likely cause is failure to compute the HMAC over the correct data. In the v1 file format, the HMAC was computed over the ciphertext. In the v2 file format, the HMAC is computed over the entire message (before the HMAC itself of course), including the header.\n. Fantastic. I'll look this over shortly. Thanks for the work!\nRob\nOn Mar 28, 2013, at 11:12 PM, Erik Wrenholt notifications@github.com wrote:\n\nRob,\nHere's a Ruby version of your RNCryptor format with both encryption and decryption. It only supports version 2 at the moment.\nRegards,\n-Erik\nPS: I really enjoyed your iOS 6 book!\nYou can merge this Pull Request by running\ngit pull https://github.com/timestretch/RNCryptor master\nOr view, comment on, or merge it at:\nhttps://github.com/rnapier/RNCryptor/pull/63\nCommit Summary\nAdded Ruby example\nFile Changes\nA ruby/LICENSE.txt (19)\nA ruby/README.md (28)\nA ruby/Rakefile.rb (6)\nA ruby/example.rb (14)\nA ruby/lib/ruby_rncryptor.rb (64)\nA ruby/spec/ruby_rncryptor_spec.rb (32)\nPatch Links:\nhttps://github.com/rnapier/RNCryptor/pull/63.patch\nhttps://github.com/rnapier/RNCryptor/pull/63.diff\n. You are likely passing an NSData as the password rather than an NSString.\nYou should see a warning about this. You can never ignore warnings in ObjC.\n\nOn Tue, Apr 30, 2013 at 5:13 AM, sammio2 notifications@github.com wrote:\n\nHi There,\nI am experiencing a crash when using RNCryptor, specifically within the\nfollowing method...\n+[RNCryptor keyForPassword:salt:settings:]\nThe error i get is when .UTF8String is called upon the password\nparameter, I get the following error:\n*** Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: '-[NSConcreteMutableData UTF8String]: unrecognized selector sent to instance 0x1e0853e0'\nHowever, the issue is not always repeatable and I can't seem to figure out\nwhat is causing it.\nCan anyone shed any light on this?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rnapier/RNCryptor/issues/66\n.\n\n\nRob Napier -- Software and Security Consulting\nCocoaphony blog -- http://robnapier.net/blog\niOS Programming Pushing the Limits -- http://robnapier.net/book\n. The error indicates that \"password\" is an NSConcreteMutableData at this\npoint. I don't know what you mean by \"doing a isKindOfClass:\" on the\npassword. That won't change the password's type. There is no NSAssert here.\nThere error is due to passing -UTF8String to an NSMutableData, which does\nnot respond to it. Check the class of password in this method in the\ndebugger or with an NSLog. Whether you mean to or not, you're passing an\nNSData rather than an NSString.\nYou don't indicate whether you're calling +keyForPassword:salt:settings:\ndirectly or if it's through the encryptor or decryptor methods. Check\nwhether you're calling initWithPassword:handler: with an NSData. Or post a\ngist of a small example that demonstrates the problem.\nOn Tue, Apr 30, 2013 at 2:00 PM, sammio2 notifications@github.com wrote:\n\nHi Dude,\nWell that's the weird thing, I'm not... It's definitely an NSString\nbecause I'm generating it on the fly. There aren't any compiler warnings\neither, I don't ignore them ;-)\nI've coded around this now by doing a isKindOfClass:[NSString class] on\nthe password before passing it to RNCryptor, but it's not the cleanest\nsolution.\nCould this not be dealt with by populating the supplied NSError object\nrather than using an NSAssert? Just a thought.\nCheers\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rnapier/RNCryptor/issues/66#issuecomment-17243696\n.\n\n\nRob Napier -- Software and Security Consulting\nCocoaphony blog -- http://robnapier.net/blog\niOS Programming Pushing the Limits -- http://robnapier.net/book\n. If I added such a check, it would be an assert (since it would indicate a programming error), so it would have the same effect. \nPlease post code that demonstrates what you're describing. Strings do not by themselves become NSData; there is some point in the code that is incorrect. Check with a debugger the value of password at various points to see where it becomes something you did not expect. \nOn Apr 30, 2013, at 2:15 PM, sammio2 notifications@github.com wrote:\n\nI'm doing my own validation that the password is an NSString before I pass it to the RNCryptor method...\nI'm not calling it directly, its through the encryptor or decryptor methods, which do a check to make sure the password isn't nil, which is an NSAssert (If i recall correctly) You could introduce a check here to make sure the password is an NSString before passing it to the RNCryptor methods?\n\u2014\nReply to this email directly or view it on GitHub.\n. OK, I finally am starting to understand this commit. Your goal seems to be in order to compile with an old version of clang (from Xcode 3.2.5) and without ARC. I do not intend to support that. You can build for iOS 4.2 using a current version of Xcode, and that should already be supported by RNCryptor.\n\nThe changes you've made may compile, but they'll leak memory since you can't just remove ARC without adding memory management. And you can't just switch ivars into class variables without creating race conditions. In order to do what you want would take a lot more rewriting.\nLet me know if there is something more you are trying to solve (beyond Xcode 3.2.5 support) and I'll try to help you. As I say, iOS 4.2 should already work.\n. Correct. And then pass that to the encryptor and decryptor. I've recently\nadded methods on the decryptor to allow you to do this.\nOn Wed, May 8, 2013 at 7:58 PM, Tom Brennan notifications@github.comwrote:\n\nMany thanks for your input Rob :)\nMuch appreciated...\nQuestion: Since I have undo'd the iterations on my end, what is the proper\nway to set up a customized setting?\nIs it this:\nRNCryptoSettings customSettings = kRNCryptorAES256Settings; customSettings.keySettings.rounds = 1000;\n?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rnapier/RNCryptor/pull/67#issuecomment-17641648\n.\n\n\nRob Napier -- Software and Security Consulting\nCocoaphony blog -- http://robnapier.net/blog\niOS Programming Pushing the Limits -- http://robnapier.net/book\n. Fantastic! I really appreciate getting a real PHP developer to rewrite my\ncobbled together stuff. Let me take a quick lookover and I'm happy to\nintegrate this into the tree.\nOn Thu, May 9, 2013 at 1:54 AM, Curtis Farnham notifications@github.comwrote:\n\nI modernized the PHP implementation and added support for file version 1.\nIt'd be nice to see it incorporated into your tree!\nThanks,\nCurtis\nYou can merge this Pull Request by running\ngit pull https://github.com/curtisdf/RNCryptor master\nOr view, comment on, or merge it at:\nhttps://github.com/rnapier/RNCryptor/pull/68\nCommit Summary\n- PHP Implementation: Adding support for RNCryptor file version 1,\n  migrating procedural code to OO, and file structure cleanup\nFile Changes\n- A php/RNCryptor.phphttps://github.com/rnapier/RNCryptor/pull/68/files#diff-0(175)\n- D php/crypt-common.inchttps://github.com/rnapier/RNCryptor/pull/68/files#diff-1(48)\n- D php/decrypt.phphttps://github.com/rnapier/RNCryptor/pull/68/files#diff-2(223)\n- D php/encrypt.phphttps://github.com/rnapier/RNCryptor/pull/68/files#diff-3(63)\n- A php/examples/decrypt.phphttps://github.com/rnapier/RNCryptor/pull/68/files#diff-4(12)\n- A php/examples/encrypt.phphttps://github.com/rnapier/RNCryptor/pull/68/files#diff-5(12)\n- A php/functions.phphttps://github.com/rnapier/RNCryptor/pull/68/files#diff-6(51)\nPatch Links:\n- https://github.com/rnapier/RNCryptor/pull/68.patch\n- https://github.com/rnapier/RNCryptor/pull/68.diff\n\n\nRob Napier -- Software and Security Consulting\nCocoaphony blog -- http://robnapier.net/blog\niOS Programming Pushing the Limits -- http://robnapier.net/book\n. Yes, the HMAC bug in schema 1 is also in schema 0. I don't know where you'll find a CTR implementation for PHP. One of the major reasons I switched to CBC is that CTR is much less widely supported.\n. I wouldn't worry about v0 unless it specifically impacts you. Most of the\nports only support v2.\nOn Thu, May 9, 2013 at 6:16 PM, Curtis Farnham notifications@github.comwrote:\n\nHi Rob,\nAs you can see, I've done considerable cleanup of RNCryptor.php today. :-)\nI also added a suite of PHPUnit tests. All tests are passing except for\ndecrypting schema-0 data from the iOS implementation. I'm still having the\nsame problems there which I previously mentioned, and I'm out of ideas.\nMaybe someone else will pick this up and run with it.\nThanks,\nCurtis\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rnapier/RNCryptor/pull/68#issuecomment-17693403\n.\n\n\nRob Napier -- Software and Security Consulting\nCocoaphony blog -- http://robnapier.net/blog\niOS Programming Pushing the Limits -- http://robnapier.net/book\n. Why do you say they're misplaced? They're only used by the testphp project as far as I know. Where do you believe they should be? Thanks.\n. Wow; totally correct. Fixed.\n. The python example encryption code is writing the data in hex digits to simplify output. You need raw bytes to decrypt in RNCryptor. In the example python code, message is raw bytes. It just prints it out as hex (line 58).\nIf you want to convert hex into raw bytes, see the rncrypt project. It's a simple commandline tool that accepts the output from the python example code. It has a Hex->Bytes converter.\n. I'm sorry this took a while to look out. It's colliding with the recent addition of decrypt from @brantyoung. Can you merge those changes together (or back out brantyoung's changes)? I don't do a lot of python development work myself, so I'm open to others deciding which interfaces work best.\n. @brantyoung, @ykalchevskiy, I decided to go with this one. I like the way it's structured a bit better. Thanks to both of you for all the work on this.\n. That is a really good catch and a major security issue. The password is being significantly shortened for multibyte passwords.\nThe fix is very easy:\n[password lengthOfBytesUsingEncoding:NSUTF8StringEncoding], // passwordLength\nMy problem is thinking through how to address it for existing files, since this change would cause files that were encrypted with multibyte characters to no longer decrypt at all.\nThe obvious answer is to rev the format version so the semantics are clear. I'm just trying to think through if that's the only way to do it correctly.\n. What version did you use to encrypt the data? The current version of RNCryptor will not current decrypt the v0 file format. If there is much demand for it, I'll reinvestigate adding support for that.\n. Duplicate of #31 \n. Can you see how this compares to https://github.com/rnapier/RNCryptor/pull/75 from @ykalchevskiy? I haven't been able to look at RNCryptor for a few months now, but will be working on a new release around the end of the year, and would like to pick a python implementation.\n. To put my vote in, getting rid of the separate pkcs7 module makes me very\nhappy\u2026 It always felt very ugly to me.\n. Thanks for the work on this one. I decided to go with the #75 version.\n. Can you provide any more information? A stack trace or an example piece of code?\n. This line is illegal:\nencryptedString = [[NSString alloc] initWithData:encryptedData\n                                        encoding:[NSString defaultCStringEncoding]];\nYou cannot just turn an arbitrary NSData into a string. You meant to run base64EncodedString on the encryptedData (you base64-encode data, not strings).\n. When you say you have the same problem, did you try the same solution? What happened?\n\nOn Apr 6, 2014, at 6:24 AM, cironapo notifications@github.com wrote:\nHi! I have the same problem. I can not decrypt a string in php.\nNSData toPHPData = [String dataUsingEncoding:NSUTF8StringEncoding];\nNSError error;\nNSData *encryptedData = [RNEncryptor encryptData:toPHPData\nwithSettings:kRNCryptorAES256Settings\npassword:@\"myPassword\"\nerror:&error];\nI then send the data to server php but I do not know how to decrypt. Help me please!!\n\u2014\nReply to this email directly or view it on GitHub.\n. You're correct that's the output of -description. I don't know of any networking library that transparently calls -description on data it is passed. If there is such a library, it's broken and should be fixed. I suspect this is actually a bug in the client code, not the networking library. The most likely bug is that someone is writing JSON with stringWithFormat and just passed the data to %@ without calling base64EnxodedStringWithOptions. That's just incorrectly written JSON. Using the built-in JSON encoder rather than hand-writing JSON would have been an even better solution.\n\nThere is no such thing as an \"encrypted string\" in the way you mean. There are just various string encodings of encrypted data. One of those encodings is base64. Another popular one is hex encoding (which is used heavily in the RNCryptor tests). There are uuencoding and yEnc. Some people need a full MIME body. iOS's base64 encoder offers several formatting options that callers may want to use. Many uses do not require string encoding at all. \nRather than force one formatting of base64 on the caller, RNCryptor returns data that you may format any way you like. \nSince the addition of an easy to use base64EncodedStringWithOptions: method, there has been no reason to add base64 to RNCryptor even as a convenience.\n. You need to add an @autoreleasepool inside your readStreamBlock. I've added this to the test code as well.\nNote that the code you've copied is test code. It's not actually doing anything with the data (you have to do something with the result of addData:).\n. The correct device here is MCRYPT_DEV_URANDOM. The problem is that DEV_RANDOM will block if there is insufficient entropy. DEV_URANDOM will not block, but therefore can contain less entropy (for most applications, this is generally a good trade-off). Ideally the choice of device should be configurable. MCRYPT_RAND relies on rand() which should not be used for cryptographic purposes.\nThe special check for \"WIN\" is because prior to 5.3, MCRYPT_RAND was the only RNG available on Windows. This test should likely be better implemented.\n. 3840 means the plist is corrupt. That most likely means that you are\nincorrectly handling the NSData either going into encryption or coming out\nof encryption. Try skipping the encryption entirely, and see if you don't\nget the same error. My guess would be that you're truncating the last byte\nby accident (since XML plists often end in a newline, which can be safely\nlost).\n. Closing this from the ObjC repo. Re-open on RNCryptor-python. \n. For the first question, see Brute Forcing Password. The answer in most cases is about 8 characters.\nEncrypting a key with a password is no problem. I recommend generating two completely random keys (use randomDataForLength:). One is your encryption key and one is your HMAC key. Then just use the key-based routines in RNCryptor rather than the password routines. You can then encrypt the two keys using a password and store them in the keychain or on the disk (they're already encrypted, so keychain isn't adding much security).\nIn the next version of the file format, I do plan to use random keys that are encrypted with a password, but since the encrypted keys will be in the file, it doesn't change the attacker's job very much. I'm doing this to make RNCryptor faster and easier to use, not to make it more secure (it doesn't reduce security; it just doesn't change it).\nIf you want to discuss RNCryptor usage further, you may be interested in the new forum: https://groups.google.com/forum/#!forum/rncryptor\n. I broke them at some point. You can recreate them by running \"appledoc\" in the top-level directory (you can install appledoc with homebrew if you don't have it). I'll be rebuilding the docs in the 2.3 release. Until then, the headers are the docs (that's where the appledocs come from anyway).\n. AESCrypt is not related to RNCryptor. If you encrypted with AESCrypt, you\nneed to decrypt with AESCrypt.\n. Ruby moved to its own repo.\n. I'd like @timestretch to take a look at this. I'm not sufficiently familiar with best practice in ruby to structure this correctly.\nI agree that the repository should be split into per-language repositories to reduce clutter and confusion. I plan to do that in the next major version.\n. I'll probably just create a parent organization, like AFNetworking does.\nThat'll make it easy for people to find all the versions, and make it\neasier to have separate maintainers.\n. Repository has been split to https://github.com/RNCryptor/ruby_rncryptor. You are both team members for it.\n. In 4.0 this is a precondition() failure\n. Glad it worked for you.\n. Can you describe the process you're using to include RNCryptor? Is this through CocoaPods or a subproject or some other way? I assume this is only on iOS.\n. The short answer is \"no.\" For the longer answer of why, see http://rncryptor.github.io/blog/2014/01/21/why-not-scrypt/\n. Yes, they currently should all interoperate (including the JavaScript\nimplementation, which did not interoperate until recently). Any\nincompatibilities should be reported as bugs. The Spec should be\nconsidered the standard, and where the Spec is unclear, the Objective-C\nimplementation should be considered the reference implementation (and bugs\nshould be opened against the Spec).\n. These look fine, as long as you're passing this structure to both the encryption and decryption methods. You need to use the \"withSettings:\" method on both sides.\nThat said, most people who go down this road are making the mistake that this will make RNCryptor compatible with some other, non-RNCryptor encryption format. That's not true. There is no standard AES encryption format. If RNCryptor did not write it data, it generally can't read it. There is seldom reason to make a change like this one.\n. The output of the cryptor is data, not a string. A random sequence of bytes is very unlikely to be legal UTF-8.\nIf you want to convert to a printable string, you need to use an encoding like Base-64 or hex. Base64 encoding is now built-in. See [NSData base64EncodedDataWithOptions:].\n. See https://github.com/RNCryptor/RNCryptor-php\n\nOn Apr 6, 2014, at 6:31 AM, cironapo notifications@github.com wrote:\nHi! I have the following problem: \nI have encrypted the data in ios in the following way:\nNSData toPHPData = [String dataUsingEncoding:NSUTF8StringEncoding];\nNSError error;\nNSData *encryptedData = [RNEncryptor encryptData:toPHPData\nwithSettings:kRNCryptorAES256Settings\npassword:@\"myPassword\"\nerror:&error];\nI then send the data to server php but I do not know how to decrypt. Help me please!!\n\u2014\nReply to this email directly or view it on GitHub.\n. The output looks reasonable (it's a v3 message with the password option turned on). You should discuss with @curtisdf who maintains the PHP project. You should also make sure you're using the latest version of the PHP code.\n. I believe this is an error in the calling code. Closing.\n. 2.2 should read 2.1 files. (2.1 will not read 2.2 files however.)\n\nAre the files encrypted with a multibyte password (by multibyte, I mean a character set outside Latin-1, particularly Chinese.)\nWhat error do you receive?\n. You're correct. I'll make the change on my copy of the openssl code. I've been removing it from the main RNCryptor tree and pulling it into its own repo (since it's not compatible with RNCryptor).\n. I don't understand this change. How are you linking? If you add RNCryptor as a subproject, it should pass your architecture selection down to that build. How did you establish the dependencies?\n. I'm trying to reproduce the specific configuration that causes this issue. I'm not fond of hardcoding architectures in subprojects unless there is a really strong reason for it that devs can't reasonably work around. It imposes overhead on devs who didn't ask for it, and it becomes an maintenance step every time something new comes out.\nI'm currently testing with this setup:\n- Create new project\n- Copy RNCryptor folder into project folder\n- Drag RNCrypto project in as subproject\n- Add libRNCryptor.a as link\n- Add simplest possible test code:\n#import \"../RNCryptor/RNCryptor/RNEncryptor.h\"\nNSData *data = [RNEncryptor encryptData:[NSData data] withSettings:kRNCryptorAES256Settings password:@\u201cx\u201d error:nil];\n  NSLog(@\"%@\", data);\nI am having trouble finding a config where this fails to build and run. If it's a corner case like you describe, I'd like to see an example project that I can test against. Generally I'd like to keep things as defaults unless the defaults are fundamentally broken and a relevant radar has been opened with Apple. I would rather not modify the project defaults to support CocoaPods. If CocoaPods requires special handling, then I'd rather see that in the CocoaPods config so it doesn't interfere with people who don't use CP (I generally do not). I don't know that this is a CocoaPods issue or not; just noting the link.\n. Thank you for the PR. I'd prefer not to special-case writing from one file to another this way. The NSStream mechanism is good, but it needs to be exposed to the caller. I might still have a convenience function for passing file to file, but I wouldn't want that hard-coded this way.\nI'm going to reconsider how to integrate my old NSStream interfaces when I work on the v4 update in the next few months. This PR also adds NSLog() calls during normal operations. Libraries should never do that. I'd also need a lot more documentation to explain the methods, and especially their threading behavior (since that's not obvious to the caller).\nDo you have a particular use for this? I'd expect writing from one local file to another to be a fairly rare event. In general you should never write a sensitive file in plaintext if you can help it. Is this Mac-specific (where encryption existing files might make some sense).\n. The new 4.0 Swift implementation should remove the need for this. Thanks for the work on it. I'll consider it again if there's much call for enhancements in the pure ObjC version.\n. Compatibility with what?\nOn Thu, May 22, 2014 at 9:37 AM, BackSeatGreg notifications@github.comwrote:\n\nFor compatibility RNCryptor should allow to encrypt without adding a\nheader and decrypt file without header.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/RNCryptor/RNCryptor/issues/123\n.\n\n\nRob Napier -- Software and Security Consulting\nCocoaphony blog -- http://robnapier.net/blog\niOS Programming Pushing the Limits -- http://robnapier.net/book\n. (There is no such thing as a SHA256 encryptor. I assume you mean AES-256.)\nThe header holds all the metadata required to decrypt the ciphertext;\nspecifically the salts and IV. (There is also a required HMAC at the end.)\nHow is your other encryptor transferring that metadata? If it uses AES-CBC\nwith passwords, and doesn't have salts, a random IV, and an HMAC, then the\nencryption format is highly insecure.\n\u200b\nNote that there is no widely-used standard format for transmitting block\ncypher metadata. Every implementation has its own format. The RNCryptor v3\nformat is defined here:\nhttps://github.com/RNCryptor/RNCryptor-Spec/blob/master/RNCryptor-Spec-v3.md\nIt has implementations on a variety of platforms.\nWhat specific encryptor are you trying to interoperate with?\n. See https://github.com/RNCryptor/RNCryptor-cs for an (alpha quality)\nexample of how to read and write the RNCryptor format in C#.\u200b\n. Humans are terrible at generating randomness. Really, really terrible. And to maintain the 256-bit keyspace, you'd need to pick a totally random 39 character password from every easily-typed character on the keyboard (about 96 different symbols for most). Humans can't do this, so we don't ask them to.\nThe point of a KDF (such as PBKDF2) is two-fold:\n- Its output must be computationally indistinguishable from random.\n- It must be time consuming to compute on all available hardware.\nThe first point means that an attacker cannot use knowledge of the algorithm to limit her keyspace search. If you consider every possible salt (64 bits) plus the randomness of a human selected password (let's be generous and say another 64 bits, which is a wild overstatement of password entropy), that's only 128 bits of key. That's insignificant compared to a 256-bit keyspace (by a factor of 10^38). So in theory, the attacker only needs to search that tiny (in comparison) keyspace. But a good KDF promises that there is no way for her to figure out which part of the keyspace is actually used faster than performing every possible hash. So the attacker is left with either brute-forcing the full AES keyspace, or trying to brute force the KDF. Brute-forcing the full AES-256 keyspace is impractical (I can go into the numbers, but I assume you already know this part).\nThe second feature, that it must be slow on all available hardware, means that brute forcing the KDF is also impractical. AES itself is very fast to compute, and is designed to be hardware optimized. It relies on the fact that its key is random over an enormous keyspace, so you guessing billions of different keys is going to get you nowhere. KDFs face the opposite issue. Their input (human passwords) are out of a tiny space and a few billion guesses will absolutely be enough to crack many of them. So I need each test to be really expensive. The differences we're talking about are millions of tests per second for AES versus 12 per second for PKBDF2 on the same hardware. And if I want to make PBKDF2 even slower, I can just increase the iteration count (many crypto algorithms do not scale so easily).\nSo yes, an attacker can try to brute-force the PBKDF2 generated key, but they are going to have to spend a lot of computing power to achieve it, and like AES-256 itself, this rapidly becomes more computing power than is actually available.\nThere's nothing that stops them from just guessing your password of course. If it's \"password\" and they guess that on the first try, they'll still get in. But if you choose a strong password, a KDF means they can't brute force it. Just using the password directly as a key can definitely be brute forced.\n. see also #138. OpenSSL support has been moved to https://github.com/rnapier/RNOpenSSLCryptor and is no longer actively supported.\n. Yet another example of how easy it can be to make security errors, even in the simplest code. Thanks for the fix.\n. I believe the Swift version has more reliable memory usage, and no longer has a misleading example.\n. You cannot directly convert arbitrary NSData (such as encrypted data) into an NSString. The resulting string would almost certainly be illegal and you'll return nil. If you need a string for some reason, you'll need to use a data-to-string encoding such as Base64.\n. There isn't currently, I'm hoping to work on one later this year, though I\nam open to contributors before that. I'm currently focused on getting to\nthe v4 format in ObjC and then helping the other implementations migrate to\nv4.\n. Closing for lack of information and inactivity.\n. I don't support the OpenSSL backend anymore. It was creating extra complexity in the RNCryptor code, while being a data format I discourage. The RNCryptor format was created explicitly to address various deficiencies in the OpenSSL AES format.\nThat said, I always meant to put the code back up. It's available here: https://github.com/rnapier/RNOpenSSLCryptor\n. Certainly not the normal RNDecryptor. That's never been possible, since\nthey write completely different formats. But you can still use\nhttps://github.com/rnapier/RNOpenSSLCryptor, which offers a similar API,\nand reads OpenSSL encryption. That's where I moved all the openssl support.\n(I don't support those files, and it doesn't even have a project associated\nwith it, just source code.)\n. (Note that the OpenSSL code has moved to https://github.com/rnapier/RNOpenSSLCryptor. I don't actually support it anymore, but that's where it is.)\nI suspect you may be running into a bug in enc. I believe they truncate at 1024 (possibly actually 1023 for \\0). In apps.c, they have this code:\ni = BIO_gets(pwdbio, tpass, APP_PASS_LEN);\nif(keepbio != 1) {\n    BIO_free_all(pwdbio);\n    pwdbio = NULL;\n}\nAPP_PASS_LEN is 1024. I don't see any evidence that they generate a warning or error if it's longer than that. Try decrypting with the first 1023 characters (or try a 1023 character password).\n. I don't encourage modifying the settings, and it was a mistake on my part to make it a setting on the encryptor side. I've been working on a new file format that would encode the most critical settings, but it's been slow going.\nMy recommendation to people who want to modify the settings is to just modify the code itself to match what you want. Note that the security of the system is strongly impacted by the number of rounds of PBKDF2. JavaScript is generally too slow to handle more than 1000 rounds, but it is much less secure (though possibly adequate for some uses).\n. There is no common standard for AES formats. Both sides must use the same format. The RNCryptor format is implemented in Java and PHP (see github.com/RNCryptor for full list of implementations).\nNote that you should not expect to get the same result for the same key and plaintext. A good crypto system will generate a different result every time. Your implementation below is extremely insecure.\nRob\n\nOn Sep 15, 2014, at 1:08 AM, traximus notifications@github.com wrote:\nHi, I need your help!!!\nI need encrypt a string\"1234\" with AES128 (AES/ECB/PKCS5Padding), the secret_key is F609C0A126E0712B9E5CC7F56D53C0EA, I tried RNCryptor but can not get the same result as Android&PHP Does the default kRNCryptorAES256Settings a problem?\nHow can I get the same result as Android&PHP did?\nhere is the android code:\ncontent = @\"1234\"\npassword = @\"F609C0A126E0712B9E5CC7F56D53C0EA\"\npublic static String encrypt(String content, String password){\n   try{\n           SecretKeySpec key = new SecretKeySpec(password.getBytes(\"UTF-8\"), \"AES\");\n           Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n           cipher.init(Cipher.ENCRYPT_MODE, key);\n           byte[] result=  cipher.doFinal(content.getBytes());\n           return Hex.encodeHexString(result);\n           return byte2hex(result);\n    }\n    catch(Exception e){\n          e.printStackTrace();\n    }\n}\npublic static String byte2hex(byte[] b){\n     String hs = \"\";\n     String stmp = \"\";\n     for(int n=0, n<b.length; n++){\n         stmp = (java.lang.Integer.toHexString(b[n] & 0xFF));\n         if( stamp.length() ==1)\n              hs = hs + \"0\" + stmp;\n         else\n              hs = hs + stmp;\n     }\n     return  hs.toUpperCase();\n}\n\u2014\nReply to this email directly or view it on GitHub.\n. If you want to match the Java implementation, you'll need to write it using\nCCCryptor (\nhttps://developer.apple.com/library/ios/documentation/System/Conceptual/ManPages_iPhoneOS/man3/CCCryptor.3cc.html#//apple_ref/doc/man/3cc/CCCryptor).\nRNCryptor generates a completely different format.\n\nOn Mon, Sep 15, 2014 at 9:17 AM, traximus notifications@github.com wrote:\n\nthanks for your reply, and sorry for such a stupid question.\nbut now I need encrypt the content and generate the same result like\nAndroid, thus the server can recognize my encrypted data....I did a lot\nsearch, but did not help; What I mean is that \"does the\nkRNCryptorAES256Settings made the result different from Android Code? \"\nI just hope can generate the same content like the java code above. Any\nhelp will be great appreciate.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/RNCryptor/RNCryptor/issues/137#issuecomment-55588304.\n\n\nRob Napier\nCocoaphony blog -- http://robnapier.net/blog\niOS Programming Pushing the Limits -- http://robnapier.net/book\n. The OpenSSL code was moved to https://github.com/rnapier/RNOpenSSLCryptor.\nIt's not supported, but I would accept a CocoaPod if someone has a PR for\nthat. (You'll probably need a new xcodeproj.)\nThe main RNCryptor code is supported, but I don't do much with CocoaPods in\ngeneral. My thinking is I should actually tag a branch that just fixes this\nwarning so that CP users don't have to deal with all the major version\nupdates.\n. See https://github.com/rnapier/RNOpenSSLCryptor\n. It is very dangerous for libraries to embed other libraries for exactly this reason. No library should itself link RNCryptor. It is the job of the application to link all of the libraries together at the end.\n. First, you should avoid this: [NSString defaultCStringEncoding]. This isn't a well-defined encoding; it is user-dependent. In all the most most unusual cases, you should use NSUTF8StringEncoding.\nYou don't check your errors, and you don't mention what \"trouble\" you're seeing. Do you get an error? Do you decrypt to garbage? Do you decrypt to empty data? Do you decrypt to data, but then create an empty string? A nil string?\nWhat Base64 is generated? If you provide that Base64 directly to the PHP (without a POST), does it work? Are you sure that the Base64 string that PHP is looking at is the same as the Base64 string generated on iOS?\nThere are many moving parts in sending ciphertext to another machine. You need to isolate which step fails.\n. Closing due to inactivity. If there are still questions on this, they are probably better addressed at https://github.com/RNCryptor/RNCryptor-php.\n. See https://github.com/rnapier/RNOpenSSLCryptor\n. I don't think I quite understand the question. You need to pass all of the data returned by the encryptor to the decryptor. The HMAC error is telling you that you didn't do that. Do you mean that you're streaming the data and need to decrypt in blocks? There's an asynchronous interface to handle that. But you can't just throw away some of the data.\n. The RNCryptor format is designed to be a whole-file format. It's not really designed to encrypt individual blocks within a larger file. But if you're using it that way, then a wrapper header sounds fine.\nRandom access encryption is a specialized problem. There are definitely ways to do it, but it isn't the goal of RNCryptor. \n. You failed to put an @autoreleasepool in your loop. This is a common requirement when you allocate and release a lot of memory inside a loop.\nfor (int i=0;  i < [datasource fileCount]; i++) {\n    @autoreleasepool {\n        ...\n        datacrypto = [RNDecryptor decryptData:datacrypto withSettings:kRNCryptorAES256Settings password:passcode error:nil];\n        ....\n    }\n}\nSee Advanced Memory Management Programming Guide for more information.\n. Try making the .h files public for the iOS build, rather than Project.\n(right-hand pane, look for \"Target Membership\"). If that works, I'll push a\nversion that includes that.\nI never use CocoaPods and am not particularly familiar with how it works. I\njust include RNCryptor's files in my main project, and it generally is\nfine. If someone has a PR for the podspec, I'm happy to merge it.\n. I haven't been ignoring this conversation, btw, I just have been hoping\nthat a solution would present itself. I do believe it's transition pains\nfor Swift. I'd like to avoid removing the constants, since they're\nimportant documentation. That said, I've long considered the need to\npass kRNCryptorAES256Settings a design flaw rather than a feature.\nRNCryptor doesn't really expect you to make random changes to that struct.\nI wonder if there's an easy way to fix this by providing a Swift interface\nthat does not expose the settings struct at all. Maybe split the Swift\ninterface into its own header and not import RNCryptor.h itself into Swift.\nI have been very overloaded with other projects, and RNCryptor hasn't\ngotten a lot of attention recently. I hope to change that, but I'm not\ncertain when. PRs are of course welcome and encouraged.\n. Please help test the fix I've applied. I decided to go with something a little more radical than @bassrock's solution #149. Rather than swapping out the types, I copied all the types we need into a temporary header file. This should help a little with type safety (not much for ObjC, but maybe a little), documents better, and is very easy to pull out when CommonCrypto is fixed.\nIf I can get someone else to confirm that it works for them, I'll tag it.\n. @lolgear Have you tested the commit I reference above? cb1036f I'm waiting for a confirmation that this fix works for other people before tagging it.\n. It looks like you have some mix of versions here. RNOpenSSLCryptor is not part of that cb1036f. It was removed for security concerns and put into its own package. If you have something referencing those files, then it suggests you don't have a clean version of RNCryptor.\nI suspect that AISecurityKit.h imports RNCryptor.h. That will likely cause problems if you later import CommonCryptor.h. You should import CommonCrypto first if you need it directly. (I assume this is an ObjC framework rather than a Swift framework.)\nIf that causes more trouble, then I'll have to drop the common crypto defines entirely and rename them all to internal constants. That's not a huge problem.\nDo make sure you're not trying to link RNCryptor inside of another framework. That would be incredibly dangerous in cases that a consuming app uses RNCryptor for other purposes. Make sure that the final app links all the necessary frameworks (yours and anything you depend on). You should reference your headers from whatever version the app uses; they shouldn't be embedded either or you can get nasty surprises. (See http://stackoverflow.com/a/31116766/97337 for one of many discussions on this problem.)\n. \"Unknown header\" means that you're handing it something that is not\nRNCryptor data. HMAC Mismatch means your password is wrong, your data is\ncorrupted, or it is not RNCryptor data (but happens to have a legal\nRNCryptor header, which can happen by chance).\nI suspect that whatever you are not handing exactly the data you got from\nthe encryptor to the decryptor. Check your bytes.\n. In all these cases, if you're getting HMAC errors, you either have the wrong password or you've corrupted the data. The more common cause is data corruption, usually due to writing it or reading it in a format you didn't expect. If you're getting the results randomly, you may have race conditions. But in all the cases, you should inspect the data your receive from RNCryptor and the data you send to RNCryptor and confirm they are identical. They are almost certainly not (or the password has changed).\n. @javalnanda See the FAQ. See also #161 for a much longer discussion.\n. Thanks for this version; I've decided to fix it another way. See cb1036fe9eaa5e9d1ad2cc8549af0a26acbffc3d.\n. Currently there is no reliable way to detect encryption. You can easily\ndetect that something isn't encrypted, but there is a high false-positive\nrate determining that things are encrypted. If the first two bytes aren't\neither 0x0300 or 0x0301, then you know it isn't RNCryptor (0x0300 is\nkey-encrypted; 0x0301 is password-encrypted).\nOne of the goals of the v4 format was to make this a little more reliable\nby putting a few bytes of magic at the start.\nI'm a little confused by the use case. If \"everything on the device should\nbe encrypted at all times,\" then why would this ever be a question?\nIf this is a major issue, you can always wrap the RNCryptor data in an\nenvelope. Just put a few bytes at the front of the file that indicates its\nstatus. Or use different file names.\n. If your goal is to always have the file encrypted, I would never write it\nunencrypted in the first place. See the \"Asynchronous usage\" section if you\nneed to encrypt as you go (for example during download). It's not as simple\nto use as I'd like, but it's the tool for this.\nSo are you suggesting that I check the first two bytes of the file for\n\n0x0300 or 0x0301 such that if the first two bytes correspond to either of\nthem, then we know for a fact that the file is encrypted?\n\nNo, I'm saying if the first two bytes are not one of those two pairs,\nthen it is not RNCryptor data. It is completely legal for a file to have\nthose first two bytes and have nothing to do with RNCryptor. (That's\nactually true of any leading header, but the longer the header the more\nlikely you won't have a collision.) If you know something about the files\nyou're encrypting, then you may be able to know that they will never start\nwith those two bytes and use that information.\n. Looks like your message is corrupt. You need to make sure that you're decrypting exactly the output of the encryptor. The common mistake is to fail to correctly convert between data and base64 encoded strings.\n\nOn Jun 23, 2015, at 2:07 AM, ad1269 notifications@github.com wrote:\nHi I'm having a problem when encrypting my data on iPhone then decrypting it on PHP. My iPhone code throws no errors and neither does my PHP, but when I put them together, it throws out a bunch of errors. I used a wrapper class to encrypt because using the kRNCryptorAES256Settings constant threw a bunch of errors for me.\nHere's my encryption code:\nvar myMessage = \"This is my top secret message!\"\nlet myPassword = \"cool\"\nlet myData = myMessage.dataUsingEncoding(NSUTF8StringEncoding, allowLossyConversion: false)!\nlet eData = ACEncryptor.encryptData(myData, password: myPassword, error: nil)\n//Send to server\nDecryption code:\nrequire DIR.'/autoload.php';\n$aes = new \\RNCryptor\\Decryptor();\n$data = $aes->decrypt($eData, $password);\nThe error that the php throws out is below. It returned it in the terminal of my app so there are a lot of html tags.\nFatal error: Uncaught exception 'Exception' with message 'Unsupported schema version 211' in /home/u350976909/public_html/lib/RNCryptor/Cryptor.php:70\nStack trace:\n0 /home/u350976909/public_html/lib/RNCryptor/Decryptor.php(66): RNCryptor\\Cryptor->_configureSettings(211)\n1 /home/u350976909/public_html/lib/RNCryptor/Decryptor.php(49): RNCryptor\\Decryptor->_parseHeaders('\\xD3}5\\xD7V\\xF4s\\xBD\\x9B\\xE9\\xB6\\xFC\\xDD\\xEE\\xFA...')\n2 /home/u350976909/public_html/lib/RNCryptor/Decryptor.php(22): RNCryptor\\Decryptor->_unpackEncryptedBase64Data('<030111b0 c72b6...')\n3 /home/u350976909/public_html/Decrypt.php(62): RNCryptor\\Decryptor->decrypt('<030111b0 c72b6...', 'cool')\n4 {main}\nthrown in /home/u350976909/public_html/lib/RNCryptor/Cryptor.php on line 70\nThanks in advance!\n\u2014\nReply to this email directly or view it on GitHub.\n. This doesn't make sense for decryption. RNCryptor includes the IV in the header, so the decryptor knows what it is. Do you mean for encryption?\n\nFor encryption there's a method that accepts the IV, but it should generally only be used in testing. It's difficult to use this method without breaking your security.\ninitWithSettings:encryptionKey:HMACKey:handler:\nExcept for testing, I can't imagine a use for calling this method. What are you doing?\n. Your format is not compatible with RNCryptor, and you can't use RNCryptor\nto read or write this. If you must use this format, you will need to\nimplement your own system using CommonCryptor.\nNote that your format has several security problems, including weak\nencryption of at least the first block (possibly more depending on your\ndata format), lack of authentication (so third parties who know or can\nguess the plaintext can modify your messages in predictable ways), and\npossible vulnerability to padding oracle attacks. Preventing these kinds of\nsecurity problems are why I developed RNCryptor in the first place.\n-Rob\nOn Tue, Sep 15, 2015 at 8:09 AM, hadwanihardik notifications@github.com\nwrote:\n\nHello rob,\nEncryption is currently done with encryption mechanism is AES_CBC_PKCS5\nwith 128 bit Key \"Key\" and Dynamic initialization vector\n00000000000000000000000000000000.\ncan you suggest me how i can use this algorithm to decrypt my file for\nabove given encryption specs.\n. @ernestopino I believe this is precisely the question I answered two comments ago. See also the newly created FAQ.\n\nNote that your encryption format has security flaws in at least the first block, and potentially additional blocks depending on their contents. It is not strong encryption.\n. @ernestopino I've updated the repository with examples of how to correctly generate keys for RNCryptor. This was writing for the latest (Swift) version, but will also work for the ObjC implementation.\nNote that you're generating keyData incorrectly from keyString. The example demonstrates how to correctly convert a password into a key. (keyString in your example is not a key; it's a password.)\nNote that none of this will make RNCryptor output what you are likely expecting. RNCryptor is a specific data format. If you hard-code the IV to 0s, the format will still output the IV in the header. If you're looking for something that will output \"the result of running data through AES+CBC with a given key, no header, no HMAC, no additional manipulation\" then RNCryptor is not the correct tool. See the FAQ, \"Can I use RNCryptor to read and write my non-RNCryptor data format?\"\n. Changing the keySettings PRF has no effect on security. Any collision resistant has there is equivalent. Using MD5 wouldn't reduce security. The ability for attackers to generate collisions on the hash is irrelevant to PBKDF2's security proof. But set it any way you like. \nIncreasing the number of iterations is the #1 most impactful thing you can do. 1,000,000 iterations is not an absurd setting. \nBetter is to forbid passwords entirely and generate totally random encryption and hmac keys. That's most secure and much, much faster. \nThose are really the only tunable things that make sense to adjust IMO. \n. The most common cause of this is not making the .m files part of your target. In the inspector (right hand pane), make sure there's a check mark for each target you want for each .m\n. You're using decryptData:withPassword:error. You would have to use\ndecryptData:withSettings:password:error:. Otherwise the decryptor doesn't\nknow your settings.\nI have not yet been able to imagine a situation where this requirement\nmakes sense in conjunction with using RNCryptor. The security of 3DES is\nsufficient for many situations, so this isn't necessarily a broken system\nor anything. I just can't really imagine the chain of events that would\nlead to needing 3DES and also needing RNCryptor. That said, I don't see any\nreason it wouldn't work.\n-Rob\nOn Wed, Aug 26, 2015 at 6:20 PM, Wei notifications@github.com wrote:\n\nHi,\nFor some reason I have to use 3 DES encryption for my data. But It seems\nthat I cannot correctly encrypt/decrypt data. For the setting, I create a\ninstance kRNCryptor3DESSettings:\nstatic const RNCryptorSettings kRNCryptor3DESSettings = {\n    .algorithm = kCCAlgorithm3DES,\n    .blockSize = kCCBlockSize3DES,\n    .IVSize = kCCBlockSize3DES,\n    .options = kCCOptionPKCS7Padding,\n    .HMACAlgorithm = kCCHmacAlgSHA1,\n    .HMACLength = CC_SHA1_DIGEST_LENGTH,\n```\n.keySettings = {\n    .keySize = kCCKeySize3DES,\n    .saltSize = 8,\n    .PBKDFAlgorithm = kCCPBKDF2,\n    .PRF = kCCPRFHmacAlgSHA1,\n    .rounds = 10000\n},\n.HMACKeySettings = {\n    .keySize = kCCKeySize3DES,\n    .saltSize = 8,\n    .PBKDFAlgorithm = kCCPBKDF2,\n    .PRF = kCCPRFHmacAlgSHA1,\n    .rounds = 10000\n}\n```\n};\nand call\nNSData data = [@\"Data\" dataUsingEncoding:NSUTF8StringEncoding];\n    NSData encryptedtestData = [RNEncryptor encryptData:data\n                                        withSettings:kRNCryptor3DESSettings\n                                            password:@\"test\"\n                                               error:&error];\nNSData *decryptedData = [RNDecryptor decryptData:encryptedtestData\n                                    withPassword:@\"test\"\n                                           error:&error];\nThe decryptedData is always nil. Can anyone help me check if the 3 DES\nsettings is not correct? Thanks!!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/RNCryptor/RNCryptor/issues/158.\n\n\nRob Napier\nCocoaphony blog -- http://robnapier.net/blog\niOS Programming Pushing the Limits -- http://robnapier.net/book\n. The header does not include most of the settings.\ndecryptData:withPassword:error: assumes you use standard settings.\nIt was a mistake on my part to make settings user configurable. RNCryptor\nwas never designed to work with modified settings. RNCryptor defines a\nspecific format with just a couple of things that can be modified.\n-Rob\nOn Thu, Aug 27, 2015 at 9:34 AM, Wei notifications@github.com wrote:\n\nHi Rob,\nThank you for your reply. I got it. But just a little curious. In the\ndocumentation of RDCryptor it is said\n*\nThis generates an NSData including a header, encryption salt, HMAC salt,\nIV, ciphertext, and HMAC. To decrypt this bundle:\nNSData *decryptedData = [RNDecryptor decryptData:encryptedData\nwithPassword:aPassword\nerror:&error];\nNote that RNDecryptor does not require settings. These are read from the\nheader.\n*\nSo from what you said I believe the header is not applied to 3DES\nencryption ?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/RNCryptor/RNCryptor/issues/158#issuecomment-135430397\n.\n\n\nRob Napier\nCocoaphony blog -- http://robnapier.net/blog\niOS Programming Pushing the Limits -- http://robnapier.net/book\n. I don't maintain the pod spec. It's been contributed and maintained by various people and I'm happy to take pull requests on it. \n. What benefits do you believe you'll get from CTR for video files while\nwithin RNCryptor? While streaming modes can have some benefits, many of\nthem are lost when you switch to a format like RNCryptor (and also when you\ndo it on iPhone, which doesn't parallelize CTR the way it could). RNCryptor\n(v3 format) includes all it authentication, including password checking, at\nthe end of the stream. That's fine for transferring file-like data (which\nis RNCryptor's focus), but if you mean to actually stream video, that\ndoesn't work nearly as well as other approaches.\nWatch out also for https://github.com/RNCryptor/RNCryptor/issues/129. I\nhaven't dug into that one deeply and could impact you. I'm finally at a\nplace where I'll be looking at that again.\nI won't be putting CTR back into RNCryptor as an option. The fact that I\nexpose the settings at all was actually a mistake, since RNCryptor defines\na format, not just an implementation. The format doesn't currently include\nany encoding of settings (other than the use of password). So modifying the\nsettings violates the format rules and breaks all other implementations.\nWithout forking, you can't change the mode, because you have to use\nthe CCCryptorCreateWithMode() call in RNCryptorEngine. (That breaks 10.6\ncompatibility, which is what caused me to remove the call entirely.)\n-Rob\nOn Thu, Sep 17, 2015 at 9:38 AM, sust86 notifications@github.com wrote:\n\nI know there was a time where RNCryptor used AES - CTR encryption. Now\nit's CBC and I think I got the point that it's just more secure since it's\nnot that easy to mess up its parameterisation.\nBut I need to encrypt video files where I've to use AES - CTR (since it's\nbasically a stream cipher it comes with many advantages for video\nencryption).\nWas there a reason RNCryptor did drop the AES - CTR option completely? Are\nthere any plans to bring it back in any form (reading the description\ndoesn't sounds like there are).\nDoes anybody know any alternative library to use AES - CTR? I would need\nto use it in an asynchronous way like RNCryptor offers it in a very elegant\nway.\nOr do I have to fork this project to adapt it for my personal use?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/RNCryptor/RNCryptor/issues/161.\n\n\nRob Napier\nCocoaphony blog -- http://robnapier.net/blog\niOS Programming Pushing the Limits -- http://robnapier.net/book\n. Yeah, this is pretty much exactly what I suspected you were doing. It's not quite as simple as you're probably hoping.\nFirst, the elephant in the room: In nearly every case that I've had this discussion, I've asked \"so, who are you securing this data from?\" And the answer, in every case, has been \"from my users.\" That's not encryption. That's DRM. DRM is a completely different problem with completely different solutions (it actually has no real solution, since it requires an ongoing war with your users, but in any case the techniques for fighting your users are very different from the techniques for protecting your users). RNCryptor is designed to provide security, not DRM. See Obfuscating Cocoa and this SO question for more on that.\nIf you're not at war with your users, then the best solution to this is TLS for transport and device data protection for local storage. There's no need for RNCryptor.\nBut let's say you're at war with your users and want encryption to help with that. RNCryptor is a decent guide, but is not the right tool for streaming video. Yes, you can turn on CTR mode. That won't give you random access because you can't start an RNCryptor stream in the middle, regardless of the block cipher mode. RNCryptor expects a header, and there won't be one.\n\nThe app encrypts / decrypts videos files from a specific trusted source. Thus I think this scenario shouldn't concern me since it's not really possible to do such \"power cycles\" with large video files?\n\nThe problem in CTR is that you need a nonce and a key, and you need to make sure that no two packets ever (in the world, at least in the group that the attacker can see) have the same nonce and key, or both packets can be decrypted. Selecting unique nonces is surprisingly tricky. It's not just the first nonce you have to worry about. It's every nonce. A long stream (like video) can require tens or hundreds of millions of nonces. Making sure that two packets never have the same nonce is harder than it sounds.\nWhen you factor in that your random number generator might be biased, it gets much worse. The \"power cycle\" issue has to do with the fact that it is very difficult to avoid a biased RNG shortly after you've booted, so random numbers picked soon after a reboot may be much more predictable than you would expect. To do CTR correctly, you really need to both track nonces and rotate keys periodically. That is very different from how RNCryptor works (and why I removed CTR). If you do go down the CTR route, and need real encryption, you should at least study Appendix B of NIST-800-38A.\nWeak DRM solutions, though, don't really need good encryption. They just need something that unskilled attackers will give up on. The linked Java examples is wildly insecure since they use a hard-coded key and nonce. That's totally broken on several levels, but for weak DRM it's probably fine. Any serious attacker has lots of ways to decrypt your stream anyway, so \"encryption lite\" is good enough. But that's all this is. If you want actual encryption, the examples in that article are useless. I haven't looked at the underlying library. I don't know how its internal security is, though it could be fine if used correctly (the examples just don't).\nThe key feature you would need to reimplement to get random access (and that RNCryptor is poorly suited for) is the rebaseCipher() function. Using CTR alone isn't enough. You may find RNCryptorEngine useful, but it's probably the highest-level class in the system that would really work for you.\nPersonally I'd research HLS or HTML5 video rather than trying to invent a new solution. HLS has DRM built in, maintained by Apple and enforced by the OS and device. It's far from perfect, but certainly stronger than anything you'd build in a week or two. There has been talk about HTML5 video DRM, though I don't know a lot about that. I don't know if offline storage is directly supported, but you can always implement it via proxies (either via NSURLProtocol, or CocoaHTTPServer.\nGood luck!\n. @sdrapkin @sust86 \nInferno does look nice. The author's underlying goals are basically identical to RNCryptor's (tilted towards .NET choices rather than CommonCrypto choices). At first look I think his specific choices are good ones. I haven't studied his CTR implementation, but it looks like a good way to do it safely.\nThat said, you could pretty easily implement his Streaming AEAD on top of RNCryptor. All he's done is concatenated a bunch of ~80k message blocks. Each block has a full header and HMAC. You could build exactly the same thing by encrypting each block you want using RNCryptor and then concatenating them with a wrapper that said how long the block is (using a fixed length block would be slightly more complicated because RNCryptor uses padding). The overhead would be slightly larger than for Inferno, but not by a lot. It could be done securely without any modifications to RNCryptor. As I say, just take each block of data, encrypt it, and then glue them together, and you get something pretty close to Inferno with just a little bit more overhead (~10-26 bytes per block).\nI'm not sure what use Inferno would be directly, though. It's very .NET specific.\n. @sust86 See FAQ: Does RNCryptor support random access decryption?\n. I believe this is no longer relevant for 4.0 Swift version.\n. See https://github.com/RNCryptor/RNCryptor/releases. I'll update the changelog.\n. This is the Swift and ObjC repo. Please see the PHP repo to report issues in the PHP implementation. \nhttps://github.com/RNCryptor/RNCryptor-php\n. This appears to be a bug in Xcode. http://www.openradar.me/22917151\nI don't know of any work around until Xcode is fixed.\n. Update: This issue continues in the the final 7.2. Haven't discovered any way to address it yet.\n. To reiterate for future commenters: is a known bug in Swift (radar://22805286). Apple has not responded with a fix or workaround. If you discover a workaround or fix, please post. If you just want to keep track of it, you can click \"Subscribe\" in the right-hand pane.\n. This should now be resolved in 5.0. I've moved ObjC bridging to RNCryptor/RNCryptor-objc.\n. See the latest release notes: https://github.com/RNCryptor/RNCryptor/releases/tag/RNCryptor-4.0.0\nv4 is Swift, but bridges completely to ObjC. For those desiring a pure ObjC implementation, see v3, which is fully compatible.\nIf there is strong interest in a updated, pure ObjC implementation (to avoid overhead of linking the Swift standard library, to support pre-Swift platforms), then I'll consider continuing that branch.\n. Do you have an example docx that demonstrates? So far I can't reproduce this using Word 2016.\nDoes it corrupt in Release mode, but assert in Debug mode? I've pushed a change to master to log a bit more information during the assertion. Can you check that? It'll tell us the error code that comes back from CommonCrypto.\n. Can you send me an example of your mistake? Even if you did everything wrong, I did not expect that assertion to fire.\nWhat would you particularly want in an async method? RNCryptor v3 had async methods, but I took them out because they made the calling code needlessly complicated. It's generally so easy to just wrap things in dispatch_async. But there may be use cases I haven't considered. (Can you open that as a separate issue, though? I don't want to track it as comments in a bug report.)\n. I don't understand this question. RNCryptor implements a specific encrypted data format. It is not a general-purpose library of cryptographic primitives.\nFAQ: Can I use RNCryptor to read and write my non-RNCryptor data format?\n. This is a very strange scheme. Using a fixed salt undermines many of the benefits to using scrypt in the first place. You should pick a random salt, apply scrypt, and concat the salt to the hash. It's a very common approach, simple to implement, and dramatically more secure. If you've done things correctly, hashing the same password repeatedly should generate different output every time. Anything that maps a password to exactly one hash is an insecure system.\nRNCryptor does not include an scrypt KDF function. It implements a specific data format that relies on PBKDF2 (a similar, but distinct KDF). You will need to find an scrypt implementation in C, Objective-C, or Swift. I'm sure there are several available.\nFAQ: Can I use RNCryptor to read and write my non-RNCryptor data format?\n. Creating your Encryptor is expensive because you're using a password. That's on purpose. Converting a password into a key, by design, takes non-trivial time even on fast hardware.\nThe solution is not to use a password, but to use keys instead. See Key Based Encryption.\nIf you need to use a password as the initial keying material, you can convert that into a pair of keys one time and reuse the keys in your loop. If that's the problem you're facing, I'll write up docs. If you can just generate two 32-byte random keys (they should be random in all their bits; not just a random 32-character string), that's better and faster. If you need help generating random keys in code, I can write that up. (RNCryptor includes that functionality already.)\nIf the array is large, this may still create a lot of autoreleased NSData objects. In order to keep the RNCryptor API simple, I chose to internally copy the data in some cases, and ARC may not immediately release those. For simple usage, you can just wrap your loop body in an autoreleasepool:\nfor data in arrayToEncrypt {\n    autoreleasepool {\n        ...\n    }\n}\nThat will make sure the excess NSData objects are cleaned up and don't push up your high-water mark more than necessary. This doesn't eliminate the copy and memory churn, however.\nIf you have a performance-critical situation, that would likely require some non-trivial enhancements to the RNCryptor API (or a new random-access format that I've discussed before to support video). I don't have any current plans to implement that, but if someone needs it, I'd be happy to discuss on a consulting basis.\n. See the new Examples/KeyDerivation that should explain everything you need.\n. Did you add import \"RNCryptor.h\" to your ObjC file. I probably need to explain that for ObjC (it's not necessary or allowed for Swift).\n. Is this still an open question? I'm not certain what you mean. There is a rncrypt command-line example project (though it probably needs the same fix as #202).\n. Please just post code into the question rather than a screenshot. I can't compile a screenshot, and they're very hard to read.\nError 1 is an HMAC error. Either your data is corrupted or your password is incorrect. Most likely, the data in encodedData is not precisely the data that came out of the encryptor. You should verify that it is.\nNote that NSException never makes sense in Swift. Switch can't catch them. They only make sense in ObjC if you're going to crash the program shortly after. They're not memory-safe in ObjC. You meant to use Swift's throw and ErrorType, which are unrelated to raise or NSException.\n. RNCryptor generates autoreleased data. If you call it in a loop, you need to let ARC know when to release that data. (Normally, ARC won't clean it up until the end of the event loop.)\nYour loop should look like this:\nfor _ in 1...100 {\n    autoreleasepool {\n        let encryptor = RNCryptor.EncryptorV3(encryptionKey: encryptKey, hmacKey: hmacKey)\n        let encrypted = encryptor.encryptData(data)\n    }\n}\nNote the addition of autoreleasepool. At the end of the block, all autoreleased objects will be released.\nYou need to create a new encryptor for each separate stream of data (as in your first example). The second example should probably be causing an assert(), since it's undefined behavior. I'll think about adding that to prevent mistakes.\nUsing encryptData() to encrypt a 10MB file will take a total of 20MB of memory (which is where you're getting 2GB; 20MB*100). If that's still too much memory, remember that you can encrypt as you read from the file. See the \"Incremental Usage\" section of the README. That way you don't have to ever have the entire file in memory.\n. If you're using cocoapods, add @import RNCryptor;\n. I've updated the docs.\nOn Mon, Nov 16, 2015 at 11:01 AM, Max Mitchell notifications@github.com\nwrote:\n\nWhy is that not in the documentation?! That could have saved me an hour...\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/RNCryptor/RNCryptor/issues/176#issuecomment-157079346\n.\n\n\nRob Napier\nCocoaphony blog -- http://robnapier.net/blog\niOS Programming Pushing the Limits -- http://robnapier.net/book\n. My belief is that the new system is easier to use with NSStream because I removed the complex callbacks. For example, here is some example code I'm working on. The read/write loop is:\n```\nconfig.input.open()\nconfig.output.open()\nvar buffer = UInt8\nlet cryptor: RNCryptorType = config.encrypt ?\n    RNCryptor.Encryptor(password: config.password) : RNCryptor.Encryptor(password: config.password)\nvar length = 0\ndo {\n    var inLength = 0\n    while true {\n        let inLength = config.input.read(&buffer, maxLength: buffer.count)\n        guard inLength >= 0 else {\n            throw Error.ReadError(config.input.streamError)\n        }\n        guard inLength > 0 else {\n            break\n        }\n        let inputData = NSData(bytesNoCopy: &buffer, length: inLength)\n        let result = try cryptor.updateWithData(inputData)\n        let outLength = config.output.write(UnsafePointer(result.bytes), maxLength: result.length)\n        guard inLength != outLength else { throw Error.ShortWrite }\n    }\n}\n```\nIs there a use case you're finding hard to integrate w/ streams? I'm contemplating a separate framework devoted to transforming streams (where \"encrypt\" would be one possible transformation). That's my vision for these kinds of problems rather than adding more API to RNCryptor.\n. \ud83d\udc4d \n. I don't know what this means. Can you provide any details and code that demonstrates? There is no timestamp in RNCryptor. \n. I have no idea what that means. How did you build this framework? What version of RNCryptor is it? Where does this message appear? Do you have a project you can post that demonstrates the issue? What platform is this? What version?\n. The only \"timestamp server\" I know of is for code signing. Are you sure you're not trying to code sign a framework?\n. I'm really thinking this is a build script you're running. That would explain the \"/bin/sh\" error and the code signing error. Are you sure you're really running your app itself and not a build script?\n. I believe the latest podspec will resolve this when merged.\n. > I am using RNCryptor and eveytime i encrypt a string i get different encrypted string.\nCorrect. That is an important security feature, and we go to a bit of trouble to make sure this happens.\n\nI need it to be same so that i can save it on server side and match it later for login purpose.\n\nEncryption is the wrong tool for this job. You mean to use hashing. RNCryptor provides the piece you need.\n- Select a per-application salt. For example, you might choose com.example.mygreatapp. We'll call this staticSalt.\n- Select a per-user salt. The most common is the username. We'll call this userSalt.\n- Concatenate them and convert to NSData. We'll call this salt.\nswift\nlet staticSalt = \"com.example.mygreatapp\"\nlet userSalt = \"bob@example.org\"\nlet salt = (staticSalt + userSalt).dataUsingEncoding(NSUTF8StringEncoding)\n- Pass that to keyForPassword:\nswift\nlet password = \"SomethingTheUserTyped\"\nlet hash = RNCryptor.FormatV3.keyForPassword(password, salt: salt)\nSend that hash to your server. Then SHA-256 that hash one more time on the server side before storing/comparing to your database.\nThe client-side piece makes sure that no one can crack the actual password, even if they've stolen password hashes from other sites and even if multiple users have the same password. The server-side piece makes sure that even if someone steals your database, they still can't use those tokens to log into your system.\nThere are no random values in this algorithm, so it is deterministic. You'll get the same result every time.\n. Thanks. That makes sense.\n. This is planned as part of the v4 data format. There's no way to integrate it compatibly into the v3 data format. \nhttps://github.com/RNCryptor/RNCryptor-Spec/blob/master/draft-RNCryptor-Spec-v4.0.md\n\nOn Jan 15, 2016, at 9:50 PM, Dave Gray notifications@github.com wrote:\nI'd like to specify an override for the number of pbkdf2Rounds Do you have plans to add an option to specify this? I'm looking at this both from the standpoint of sometimes 10000 may be too few iterations, and other times I may want less (it is known that password is long and complex, and decode time needs to be faster)\nThanks for building RNCryptor I really appreciate the time you've taken into creating a simple and powerful model\ndave\n\u2014\nReply to this email directly or view it on GitHub.\n. I believe the new podspec resolves this.\n. The ObjC and Swift implementations of RNCryptor (which are the primary implementations) do use constant-time hash comparisons. Have you found otherwise? The most common server side implementation is PHP, which also does constant-time hash comparisons (currently, though this took longer to get fixed then I liked).\n\nI didn't write and don't directly support all the implementations, but please feel free to open issues on any implementations with this or any other error. RNCryptor defines a format. It has several implementations that various developers maintain. \nIf you believe there is any defect in the Swift or ObjC implementations, I am happy to look at that here, but this repository doesn't cover all the independent implementations of the format. GitHub doesn't have any way to manage organization-level issues, so a separate issue is required on each repository. \nThanks.\n. That's fine. But if you found specific implementations that had trouble, please let me know. I'm happy to open the issues myself. I'll go ahead and audit them all, but if you've already done some of it, that'll save me some time. \nThanks for the notice.\n. Yes. I believe it is discarding it.\n. Thank you. Always glad to have extra eyes on these things. \n\nOn Jan 24, 2016, at 10:41 PM, Scott notifications@github.com wrote:\nOK, I think I found all the variable-time MAC validation flaws in the various implementations. I think there might be questionable choices w.r.t. the CSPRNG implementations on some of them, but until I research that in depth I don't feel comfortable raising the alarm.\nHave fun.\n\u2014\nReply to this email directly or view it on GitHub.\n. Agreed and thanks. I thought already had an assertion in there for that case. I agree that it's confusing. \n\nIs this something you're doing a bit. Generating a key from the password is very expensive, so it may be better to provide a way to reset the cryptor for reuse instead if this use case is actually coming up. \n. Need to save this for 5.1. It changes API (switch statements) so shouldn't go in 5.0.1.\n. Sorry for the long delay answering this.\nIdeally the HMAC would be verified prior to decrypting any part of the message, but in practice this is too slow for general use. You'd have to spool everything into memory or disk before you could even begin to decrypt. (The next version of the data format does a better job of this by providing a password validator, but it still can't promise the data wasn't modified until the end of decryption.)\nThe security trade-off is two-fold: If there's a bug in RNCryptor itself (or CommonCryptor), the current scheme makes it slightly easier to exploit because the attacker can craft an arbitrary message. (In practice, though, it's hard to imagine a case where this would legitimately be an avenue of attack that pre-verifying would prevent.)\nThe second security problem, which is much easier to imagine and is the vector of several known exploits, would occur if the caller started processing the data before it was validated. Then, if the caller has bugs it may be possible to craft a message that exploits those. The caller can avoid this by not processing any data until finalData is completed. Managing this risk is best left to the caller, and RNCryptor doesn't try to fix it for you. (RNCryptor would basically have to remove the async interface to protect the caller, and that's a very high cost.)\nSwapping the order in DecryptorEngineV3.finalData would probably be a fine change (and actually would make the code ever-so-slightly cleaner). It's difficult to imagine an exploit that would take advantage of the current order, but it's still worth doing.\n. Searchable encryption is a complex and fascinating topic, but the algorithms used by RNCryptor will not help you. You'll want a homomorphic algorithm, which RNCryptor intentionally does not provide.\nYou'll definitely want to study the topic before selecting a solution. It's easy to make encryption searchable if you make it very insecure. What's difficult is maintaining security at the same time. \nYou can also search for database encryption schemes specifically. \nBest of luck. \nRob\n\nOn Jan 31, 2016, at 10:59 AM, Datadriven notifications@github.com wrote:\nHi,\nFirst of all thank you for the great library, really appreciate your efforts\nI have a large database that is encrypted, I want to provide a search functionality I do not want to decrypt the data and store it somewhere for search as it would defy the purpose\nHopefully someone can help me and provide a direction for this\n\u2014\nReply to this email directly or view it on GitHub.\n. Just pull the v3.0.1 release. It's fully supported, and has all the same features (though the API is a little clunkier IMO). https://github.com/RNCryptor/RNCryptor/tree/RNCryptor-3.0.1\n\nIf there's interest, I'll pull the ObjC version into its own repository to continue supporting it. I really should have put the Swift code in a new repository, but it's a bit late to fix that.\n. No. When you created a new cryptor object, it would inject a new header (among other problems of remembering the new IV).\nRob\n\nOn Feb 29, 2016, at 9:38 PM, Ari Braginsky notifications@github.com wrote:\nWould the incremental usage outlined in the README be able to support appending onto an encrypted NSData object across multiple application sessions? E.g., writing encrypted data to a file, which is then appended to over time.\n\u2014\nReply to this email directly or view it on GitHub.\n. You'd also have to read all the previous ciphertext to get the HMAC into the right state. And you wouldn't be able to decrypt and validate properly until the stream was finalized (to write the HMAC). It's certainly possible to build this, but it's not a good fit for the RNCryptor format. You'd want to build a different format for it, probably with HMACs computed over blocks rather than over the whole stream. \n. Fixed via #194 \n. Sorry for the long lag responding. RNCryptor is not very well suited to encrypting video. See the FAQ \"Does RNCryptor support random access decryption?\". See also #161.\n. @dunhamsteve Thanks for adding the comment. There's already been some work down this road for RNCryptor (as a new format, not the existing RNCryptor format). Yes, the readme is misleading; it creates restrictions and breaks various other things, but it is possible.. This absolutely would require large code changes. It won\u2019t be made part of RNCryptor; it would be a new format. . The result of this line is an NSData:\n\nciphertext = RNCryptor.encryptData(data, password: password)\nIf you print that, you'll get something like <00 01 02 .... That's just a \"description\" of the data. It can't be converted back (at least not with the built-in tools). When you convert that string into data again, you get a data that represents the UTF-8 values for \"<\", \"0\", \"0\", \" \", \"0\", \"1\", ... This isn't your original data.\nIf you want to print ciphertext, you must encode it in a printable format, such as Base64. For example, see NSData.base64EncodedString.\n. The classes in RNCryptor are final because they're not designed for subclassing. Allowing arbitrary subclasses is fragile if not documented and tested. If you need to look at my implementation in order to write your subclass, then you're relying on an implementation detail that may change. It's hard to imagine many subclasses that you could safely write purely from the API documentation. (This is one of the great mistakes that happened in OOP, which is one reason there is frequent discussion of making final the default in Swift and a general leaning towards structs.)\nAs a rule, I strongly recommend composition rather than inheritance. If at all possible, create a type of your own that HAS-A RNCryptor rather than IS-A RNCryptor. I'd be happy to discuss any specific problem you're facing.\nA subclass of RNCryptor that modifies the format is also not an RNCryptor. That's just Liskov. A subclass must be substitutable in every place that the superclass is usable. If MYModifiedCryptor cannot accept the RNCryptor format as input, then it it's incorrect to make it a subclass. So any interesting subclass you made would likely have to be more complicated than you desire.\nRNCryptor is already designed for composition. You'll note that the \"RNCryptor-level\" objects forward everything to \"V3-level\" objects. This is intentional. It is possible to create a new encryptor or decryptor that writes a different format and plug it into the RNCryptor wrapper. That's currently private but could potentially be made more public. (That said, I'm not certain how it would help very much unless you're trying to read both RNCryptor and other formats; in that case, it's built exactly to solve that problem.)\nNote that RNCryptor is widely ported and is generally not that hard to implement. Is there a particular platform that would be helpful to have an implementation?\nCan you explain the actual problem you're facing and what other format you're trying to write? I'm having trouble picturing what kind of format a subclass would be useful for. Perhaps you just want to use Engine. I intentionally pulled that out to make it easier to write more general-purpose formats.\n. Do you mean the compiler crashes? Or the code when used? What is the crash?\n. Change the \"Error\" after the colon to Swift.Error. \n. In progress fixing these, but haven't pushed because I need to do a much larger change to work w/ Swift 3. Swift 3 will ship with a bug that breaks RNCryptor's ObjC bridging (the Swift team has already confirmed it's a bug and they're not fixing it yet), so I need to rework some things to avoid that.\n. See https://bugs.swift.org/browse/SR-2267.\nCurrently you cannot call RNCryptor from ObjC if built for Swift 3. This will show up as a linker error, so it won't bite you at runtime. If your program links, it will work.\n. I just pushed fix for that to the swift3 branch. Tomorrow I'll tag and release it, but feel free to take a look now and let me know if there are any problems. I had to pull ObjC bridging for now. There are just too many weird compiler issues. I've pulled an ObjC-specific version into a new repo. \n\nOn Sep 11, 2016, at 2:42 PM, Daniel notifications@github.com wrote:\nAny help any of us can be with the swift3.0? Need to update one of my apps that use RNCryptor.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. This should be fixed in the latest 5.0 release.\n. Thanks for the report. I'll update the examples.\n. Thanks. I immediately broke it by making changes (merge errors). :D I'll check in the future if I like what it does to my code.\n. I assume you mean \"use a 128 bit key\" here (AES 128 can mean two different things). \n\nYou would have to modify the code and create you're own incompatible version of RNCryptor. It's a trivial change, but it strongly suggests a misunderstanding about RNCryptor. Why are you trying to do this?  Have you read rhe FAQ entry \"Can I use RNCryptor to read and write my non-RNCryptor data format?\"\n. Closing for now; if you have further questions, feel free to reopen.\n. Almost certainly the data that you're pulling from the server is not exactly the same data you pushed to the server. My guess would be that you're doing something like Base64 encoding the data when you push it, but failing to Base64 decode it when you pull the data, but it's impossible to know from the code above. You'll need to compare the output of encryptData in tranformedValue to the later value of data in reverseTransformedValue. The two must be byte-for-byte identical.\n. Please let me know if you have further issues with this.\n. To create a PR, fork the project, create a branch on your fork, and then push to your fork. When you visit your fork's GH page, you'll see the option to create a pull request that can pull back to the original. (And Thanks)\nhttps://help.github.com/articles/creating-a-pull-request/\n. Resolved on the swift2 branch. Please see release 4.1.0. https://github.com/RNCryptor/RNCryptor/tree/RNCryptor-4.1.0\n. I don't understand this pull request. It doesn't compile. The current release is Swift 3. If you need Swift 2.3, see the previous release: https://github.com/RNCryptor/RNCryptor/tree/RNCryptor-4.0.0.\nDid you mean just to add tvos support to the podspec?\n. I added tvOS now through another commit. Thanks for the submissions.. This bothers me: RNCRyptor. Did you mistype that in the bug report, or is that actually the capitalization?\nRNCryptor 5.0 does not export to ObjC (there were too many compiler bugs to make this work). I have extracted the pure-ObjC implementation into its own repository so that ObjC callers don't need to bridge from Swift: https://github.com/RNCryptor/RNCryptor-objc. (It is my belief that you can import both versions and they won't fight.)\nThere is a tentative podspec in the ObjC repository. I do not use CP on any projects, so I do not know if it works. If anyone who uses CP finds issues, please send a PR and I will be happy to include it.\n. What do you mean by \"faces some cryptography issue?\" And what do you mean by \"library doesn't gives any error?\" How are you checking for error?\nDid you verify that the file wrote successfully and was exactly what was originally encrypted?\nThe very likely problem is that you've truncated the data because the file was marked as data protection \"Complete\" rather than \"UnlessOpen.\" But it's very hard to diagnose from the above information. I don't know how you're downloading in the background. Are you using NSURLSession's background download system?\nBut the main question is, what are \"some cryptography issue?\" What cryptography issue?\n. If you do not receive an error during decryption, then you should verify that the decrypted bytes are the same as the original bytes. CommonCryptor definitely does not care whether the device is locked. You are almost certainly having a problem reading or writing files or accessing keychain. These are things that change when the device is locked.\n. Have you looked at release 5?\n. I don't know what you mean by \"didn't work.\" What were the 35 errors? What problem did you encounter with CocoaPods?\nFor CocoaPods, you'll want ~> 5.0.\n. See if this fixes it for you; if so, I'll tag it 4.0.1.\n. I don't know much about the podspec. I did update its version number, but I don't know if that's enough to let you see it. If you know anything else that needs doing, I am happy to apply it,  but I generally don't debug CocoaPods. \n. pod trunk push doesn't succeed because pod spec lint doesn't succeed. It complains with:\n\n\u201cUse Legacy Swift Language Version\u201d (SWIFT_VERSION) is required to be configured correctly for targets which use Swift. Use the [Edit > Convert > To Current Swift Syntax\u2026] menu to choose a Swift version or use the Build Settings editor to configure the build setting directly.\n\nIt seems related to watchOS (it seems to work for everything else). This is the kind of CP-specific problem that I've tried to avoid getting dragged into. If someone can make pod spec lint work, I will be happy to accept a PR. \nBeyond that, RNCryptor is intentionally kept trivial to drop into projects directly so that you should not require a package manager. It does not need, or particularly want, to be shipped as a separate framework.\n. You want 5.0.1. It is much better to use ~> 5.0 rather than exactly 5.0.0.\nI almost always wind up bumping the patch version for cocoapods; something almost always goes wrong with it on the first try.\n. 5.0.1 is definitely published: https://cocoapods.org/pods/RNCryptor. I don't know how to troubleshoot CocoaPods. I don't use it for anything.\n. You want RNCryptor 5.0\n. I thought I pushed this yesterday, but I see there was an auth error. Now pushed:\n-> RNCryptor (5.0.1)\n   Cross-language AES Encryptor/Decryptor data format.\n   pod 'RNCryptor', '~> 5.0.1'\n   - Homepage: https://github.com/rnapier/RNCryptor\n   - Source:   https://github.com/rnapier/RNCryptor.git\n   - Versions: 5.0.1, 4.0.0, 4.0.0-beta.1, 3.0.1, 3.0.0, 2.2, 2.1, 2.0, 1.1 [master repo]\n. Thanks; I already added this in another commit, but thank you for the submission.. I would recommend using the ObjC code. It's fully supported. I anticipate doing an API refresh on it to more closely match the Swift API (I made some API mistakes early in RNCryptor's life that I fixed in the Swift version). It is my intent that the Swift and ObjC versions should be able to live in the same code base without conflict if needed. RNCryptor is pretty small, so I believe two simple implementations is better than one complicated implementation.\nI have not abandoned the ObjC version at all. Had to do over again, I would have created a new \"RNCryptor-Swift\" repository starting at version 1.0 and left the ObjC version here. Hijacking this repository for the Swift implementation was a mistake, but hard to unwind now.\nBridging between Swift and ObjC forces compromises on both that I think are unwarranted in a project this small, so I expect that the two will remain separate for the foreseeable future. ObjC bridging is valuable, but comes at a cost.\nPlease feel free to open any issues you find in the ObjC code (including feature requests). It is not legacy or abandoned.\n. Agreed. I made all the calls in Swift synchronous because it's much easier to handle the async yourself when you want it than to get the framework to stop it. \n. Pushed.\n-> RNCryptor (5.0.1)\n   Cross-language AES Encryptor/Decryptor data format.\n   pod 'RNCryptor', '~> 5.0.1'\n   - Homepage: https://github.com/rnapier/RNCryptor\n   - Source:   https://github.com/rnapier/RNCryptor.git\n   - Versions: 5.0.1, 4.1.0, 4.0.0, 4.0.0-beta.1, 3.0.1, 3.0.0, 2.2, 2.1, 2.0,\n   1.1 [master repo]\nI'd had some problems with CocoaPods, but the team finally get me setup correctly.\n. Fixed in 98f442f. Please let me know if you need a full release (4.1.1). I can do that, but I'd planned to have more changes before I did.\n. Please see the FAQ: https://github.com/RNCryptor/RNCryptor/blob/master/README.md#faq\nQ: Can I use RNCryptor to read and write my non-RNCryptor data format?\n. I don't understand this issue. The latest release is Swift 3. \n. 4.0.0-beta is not Swift 3 compatible. You want 5.0. Please check the Releases page.. > Some of them are encrypted since when clicking on it to view, they are just text.\nThis doesn't make sense. The output of RNCryptor.encrypt() is never text. It is binary data, just like the image.\nI am unfamiliar with Kingfisher. I would first suspect that your encryption code is not actually being called, particularly since you say it seems to ignore the password.\nI don't believe there is any RNCryptor issue here; I suspect that you are misconfiguring Kingfisher.\n. I don't understand the question. There is an ObjC implementation of RNCryptor (see the repo at RNCryptor/RNCryptor-objc).. RNCryptor is currently exclusive Swift 3. Documentation updated.. See the FAQ: Can I use RNCryptor to read and write my non-RNCryptor data format?. This means the data you're passing to PHP is not the exact data that ObjC output. In most cases it means you've applied an incorrect encoding somewhere along the way. 197 is a kind of surprising first byte (since it's not a Base64 value), but that's definitely the issue. You've corrupted your data.\nLook at the data that is output by ObjC. Look at the data that you're passing to PHP. The two must be byte-for-byte identical.. The ObjC version is not deprecated. It's fully supported and will likely have updates in the future. It hasn't been updated in a while mostly because it hasn't needed many changes. I originally wanted the Swift version to be directly usable from ObjC, but this turned out to be very complicated due to some bugs in the Swift compiler, and forced ObjC users to include the Swift runtime (which was bad for everyone). I extracted the ObjC version to its own repository to make it a first-class citizen, not to deprecate it.. Fairly specific to RNCryptor, but I would expect it in a lot of Swift libraries. Maintaining ObjC compatibility requires a lot of trade-offs and you don't get it for free. Maintaining a separate version for ObjC and one for Swift lets each be the best for the language it's intended for, and you can use both in the same program, so there's not much downside. . I don't understand the question. What do you mean by \"I created password manually?\" What code did you use to create the password and to use the password?. You've never decoded the Base64 encoding. You treated it as UTF8 encoding. You meant:\nlet encryptedData = Data(base64Encoding: stringToSendToPHP)!\n\n. Do you have a question about RNCryptor?. Very good stuff. Seems to work, and I think CocoaPods is still happy. If we need to change the version labelling scheme (which is fine), the podfile will need a small change for that. Not sure if changing that creates any upgrade problems (I believe the answer is 'no'). Haven't checked Carthage yet, but I expect it to be ok.\nRNCryptor.h is currently imported as the bridging header via the xcodeproj. Might need to touchup the README, but looks like it should be a very small change there. Very exciting.. Short version: RNCryptor uses SHA-1 as part of PBKDF2. PBKDF2 is responsible for stretching passwords into keys. The main goal of stretching is to be slow and difficult to parallelize. So the only thing I need to prove is that given an input (a password and a salt), there is no shortcut to derive the key faster than running PBKDF2. To achieve that, my hash function needs to be unpredictable, but does not need to be collision resistant. MD5 would be fine for PBKDF2. Any hash whose output is indistinguishable from random (and even MD5 achieves that) is totally fine.\nThat said, if I were picking my hash with no preconditions, I'd have used used one of the SHA-2 variants (probably SHA-512). Why, when I say it doesn't matter? Hygiene. Using a better algorithm as your default, even when it doesn't matter, means that the lesser algorithm isn't in the system and is harder to accidentally use when it does. But I do have preconditions: existing crypto libraries. Excellent, well-vetted PBKDF2+HMAC+SHA1 implementations are insanely common on many platforms. If I used something else, I'd likely have to write my own PBKDF2 primitive on some platforms, and I avoid writing security primitives if I can help it. It's too easy to mess them up. (This is a current debate around the v4 protocol; I still may switch to SHA-2 there.)\nSlightly more technical version: To be secure, PBKDF2 requires some pseudorandom function (a PRF). A PRF has a very specific definition. First, it must be \"efficiently computable.\" Second, if you consider all PRF functions together as a set, and select one of them, then there is no efficient algorithm that could distinguish between the function you selected and a truly random function (usually called a \"random oracle\"). \"Distinguish\" has a slightly technical meaning that includes \"with significant advantage.\" Basically, you can't reliably guess more than 50% of the time which is which. (\"Efficient\" also has a technical definition. It doesn't mean \"fast.\" Just about everything in cryptography has a technical definition\u2026)\nTo reiterate the point, though: PBKDF2 requires a PRF. It does not require a hash. It doesn't care about hashes. You could hand any PRF to PBKDF2 and it achieves its security proof. So we just need some PRF.\nWe use HMAC (when we say \"PBKDF2 with SHA-1\" we really mean \"PBKDF2 with HMAC with SHA-1\"). HMAC has been proven to be a PRF provided its hash's compression function is a PRF. (The \"compression function\" is a piece of a cryptographic hash function, such as SHA-1.) This is a really important finding. Before 2006, it was only known that HMAC was a PRF if the compression function were a PRF and the hash function were weakly collision resistant. (The failure of \"weakly collision resistant\" in SHA-1 is your question.) But since 2006, we've had a solid proof that if the compression function is a PRF, we're good.\nNow comes an interesting question. Is the compression function of SHA-1 (Davies-Meyer) a PRF? (We're now at the very edge of my crypto training, so hopefully this part is correct\u2026) Well\u2026 I think we actually know it isn't, but it is really close to a PRF and no one has formulated an attack based on the difference. That said, it's kind of irrelevant to your question, since both MD5 and SHA-2 use the same compression function. For practical purposes, we generally treat SHA-1/SHA-2 and their compression function as a PRF. We only question their collision resistance, not their randomness, and their collision resistance is irrelevant to HMAC and thus to PBKDF2.\nThe real takeaways from this long-winded discussion are:\n\nSHA1 is totally fine to use in PBKDF2+HMAC. Even MD5 would be fine. If you trust SHA-2 in PKBDF+HMAC, you should trust SHA-1 for the same reasons.\n\"Secure\" vs \"insecure\" is based on proofs that cover entire systems, not just individual pieces. Combining \"secure\" pieces incorrectly can lead to highly insecure systems. Conversely, pieces that have known attacks in one context may be perfectly suitable in another.. What is your question!. (Sorry for the exclamation point. Autocorrect.). The latest version of RNCryptor only supports Swift 3. Why do you think there's no Swift 3 support?. I believe this is tagged. Are you seeing this problem still?. Resolved with #236 . Thanks! Fixed.. First, please see the FAQ: Can I use RNCryptor to read and write my non-RNCryptor data format?, and also FAQ: How do I manually set the IV.\n\nThe RNCryptor format includes the IV in the message. I don't see that feature in the main JNCryptor API. I'm not certain what you're describing or what you're trying to achieve. If you used any IV other than the one in the message, then you'd break the HMAC.. See FAQ: Can I use RNCryptor to read and write my non-RNCryptor data format?, and following questions.\nIf you need a PHP implementation of the RNCryptor format, see RNCryptor/RNCryptor-php.\nIf you need to reverse engineer the RNCryptor format to extract the IV and other metadata, see the v3 spec. Note that extracting the IV will not make the RNCryptor format compatible wth Laravel.. PKCS#7 padding and PKCS#5 padding are the same thing. That said, make sure you've read FAQ: Can I use RNCryptor to read and write my non-RNCryptor data format?. Can anyone confirm that they're seeing this in the Swift version (this repository currently holds the Swift version, not the ObjC version; that got moved over to RNCryptor-objc).. Note that this is resolved in the ObjC version; please let me know if anyone is having trouble in the Swift version (I don't think you should be).. The pod version should be 3.0.5:\nhttps://cocoapods.org/?q=rncryptor-obj\nAm I misreading something? (I don't use CocoaPods myself, so this doesn't come up in any of my projects.). See FAQ: How do I encrypt/decrypt a string?. The above code is trying to decrypt a String; the first parameter of decrypt() is a Data, so the above code shouldn't even compile. Without knowing what data you're passing or what error you're receiving, or at least the actual code you're using, I can't help you.. If this happened only once, that strongly suggests that the user defaults value was just empty or corrupted. I would expect that you got to a place in the code where you read the value without actually having written it or having written it incorrectly. \nAs written I assume the above code still can't compile. cipherData looks to be of type Any. But I assume you convert it to Data at some point. If you converted with \"as! Data\" then it would have crashed your program. . https://github.com/RNCryptor/RNCryptor-objc. RNCryptor is not particularly well suited to video encryption. See \"Does RNCryptor support random access decryption?\" in the FAQ (in the main README).. @gregggreg That sounds like a reasonable solution. Sorry for the delay getting something out; I'll try this and push a new version this week.. What version of RNCryptor are you using? This repository is Swift-only now. The ObjC version was moved to RNCryptor-objc. The current version of RNCryptor-objc shouldn't have this problem (it checks whether you're OS X 10.6 or earlier).\nSee also https://github.com/RNCryptor/RNCryptor-objc/issues/19. @adrianevs What version of RNCryptor are you using? See note above about move to new repository.. @itinance What version of RNCryptor-objc are you using, though? It is incredibly common to fail to update your Cocoapods trunk, so pod 'RNCryptor-objc' could be anything.. @Nandulucky \nSee previous comment on this thread:\n\nWhat version of RNCryptor are you using? This repository is Swift-only now. The ObjC version was moved to RNCryptor-objc. The current version of RNCryptor-objc shouldn't have this problem (it checks whether you're OS X 10.6 or earlier).\nSee also RNCryptor/RNCryptor-objc#19. See the FAQ: https://github.com/RNCryptor/RNCryptor/blob/master/README.md#can-i-use-rncryptor-to-read-and-write-my-non-rncryptor-data-format\n\nYou probably want something like CryptoSwift if you're building a custom format. \n\nOn Jul 28, 2017, at 6:39 PM, gfisch notifications@github.com wrote:\nI'm working with an existing system that has the encrypted version of the AES Key and IV sent as part of the message. However, there is no capability to use the HMAC key. I thought there was an older Swift version of RNCryptor that only required the Key and IV. The current Format3 seems to be close to what I need, but requires the HMAC key. How should I handle this issue?\nThanks!\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. How are you building this for watchOS and tvOS? There's not modulemap built-in; it gets created as part of the build process, so it depends on how you're building this.. How did you add the module map? I don't think there's one added for iOS. . I'm not seeing this issue in any recent builds. Are you seeing it in 5.0.1?. I thought we had SPM working now (recently added). What's the numbering issue?. I believe this is resolved in 5.0.3.. Is CFAvailability.h available on Ububtu? (Is CoreFoundation there?) Is there a replacement for CFAvailability that sets the macros?. Please see the FAQ: How do I encrypt/decrypt a string?. This can only be answered by your attorney. (I used to give advice, and an attorney friend of mine correctly explained to me that my advice is meaningless and harmful, particularly because the regulations are complex, non-obvious, and change.)\n\nCossack Labs did a helpful write up, and I more or less believe them, but they also aren't lawyers and so their advice is also basically meaningless. Even so, here it is: https://medium.com/@cossacklabs/apple-export-regulations-on-crypto-6306380682e1\n. CryptoSwift is not the same project as RNCryptor. This error refers to CryptoSwift.. If this is an Objective-C project, use RNCryptor-objc.. Please try the latest release, 5.0.2. This should include the tvOS fix as well as other build improvements.. If you want to convert the value to Base64, then it's simpler to do it this way:\nlet base64String = cipherText.base64EncodedString()\n\nBut generally, yes, this is how you could print the data as Base64.\n. I would expect the above code to grow in memory without bound. You're saving all the cipher texts onto data:\n    self.data.append(dataObject)\n\nIs there any point where you remove them? That doesn't sound like a leak.. Your code uses memory mapping to the disk. If the data isn\u2019t modified, it doesn\u2019t have to create any dirty pages (it can just reload them from disk when needed). When you encrypt, you\u2019re creating non-mapped pages because they don\u2019t match what\u2019s on disk anymore. . What error are you receiving? Do you have an example of the output?. \"Unknown header\" means that the data you're passing isn't in RNCryptor format. That usually means it's encoded somehow (like Base64). The first byte of the data you're passing to decrypt should be 03.. Sorry for the lag on this; is it still a problem? Where do you receive the error? I'm suspicious of this code:\n                let inputData = NSData(bytesNoCopy: &buffer, length: inLength!)\n                let result = try decryptor.update(withData: inputData as Data)\n\nIt doesn't quite feel legal to treat a bytesNoCopy as bridged to Data that way, and if it's wrong that would cause this particular error. This line is also invalid (but I wouldn't expect that error):\n            ops?.write(UnsafePointer(finalData.bytes), maxLength: finalData.count)\n\nYou can't construct an UnsafePointer that way. You have to use withUnsafeBytes as you did for result.. Please see the FAQ: Can I use RNCryptor to read and write my non-RNCryptor data format?.\nIf your situation is urgent, I provide consulting services to reproduce existing encryption formats in iOS. Please contact me at robnapier@gmail.com to discuss rates.. This last line is incorrect:\n    let decryptedString : String = decryptedData.base64EncodedString(options: Data.Base64EncodingOptions.lineLength76Characters)\n\nYou meant this:\n    let decryptedString = String(data: decryptedData, encoding: .utf8)\n\nThis is the inverse transform from this line:\nlet data: Data = plainText.data(using: .utf8)!\n\nThe output you're getting is the Base64-encoding of the plaintext (because you called base64EncodedString) . You can see this by decoding it:\n$ echo MTIzNDU2Nzg5 | base64 -D\n123456789. RNCryptor using a password intentionally adds a fairly large delay. This is a security feature to prevent password cracking.\n\nIf you are encrypting or decrypting a large number of separate payloads with the same password, you can dramatically speed things up by computing the encryption keys just one time and using the key interface. \nI\u2019m not a computer right now so I can\u2019t write it up but I\u2019ll write more details tomorrow if the docs aren\u2019t clear.. @caldwbr I don't understand why anyone would tell you that. RNCryptor works on data. It doesn't know anything about strings. In fact, one of the FAQ entries is \"How do I encrypt/decrypt a string?\" because people ask all the time. RNCryptor doesn't care what the data represents. It just encrypts bytes.\nThe usual reason for \"unknown header\" is that failing incorrectly encoding or decoding the data between the steps. You need to make sure that the data passed to the decryptor is precisely the data returned by the encryptor. The \"unknown header\" error specifically means that the first byte the decryptor was passed is not 0x03 (which is the RNCryptor v3 header, and always the first byte returned by the encryptor).\nLooking at your code, I'm not certain that it's a lossless transform. There's a lot of stuff going on there, and it's not exactly clear to me what it's trying to do. (Also, I think you're leaking the the rawData buffer.). No, by design. See FAQ:Can I use RNCryptor to read and write my non-RNCryptor data format? for full information.. A key is random bytes, not a UTF-8 encoded String. \nIf you want a String from a Data you\u2019ll need to encode it somehow. See the FAQ for more:\nhttps://github.com/RNCryptor/RNCryptor/blob/master/README.md#how-do-i-encryptdecrypt-a-string\n(That question refers to cypher text, but keys are the same.)\nRob\n\nOn Mar 5, 2018, at 4:59 PM, sesdev1 notifications@github.com wrote:\nHello,\nI am unable to obtain the ASCII has using the example code. Swift4, Xcode 9.2. Any help would be much appreciated.. hashS is nil.\nCode:\nlet staticSalt = \"com.example.mygreatapp\"\nlet userSalt = \"bob@example.org\"\nlet salt = (staticSalt + userSalt).data(using: String.Encoding.utf8)\nprint(salt)\nlet kDerivationSettings = RNCryptorKeyDerivationSettings(keySize: 256, saltSize: 64, PBKDFAlgorithm: 2, PRF: 3, rounds: 10000, hasV2Password: false)\nlet password = \"SomethingTheUserTyped\"\nlet hash = RNCryptor.key(forPassword: password, salt: salt, settings: kDerivationSettings)\n\nprint(hash)\n\nlet hashS = String(data: hash!, encoding: String.Encoding.utf8)\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Using CocoaPods, you just need to import RNCryptor. There's no need to modify your bridging header.. RNCryptor is a specific encryption format. It is not a general-purpose library for handling custom formats like your C#. If you plan to use the RNCryptor format on both platforms, see RNCryptor-cs for a C# implementation.\n\nIf you need the C# format as given, then you'll need to reimplement in Objective-C. I can implement this for you on a consulting basis if you need this service.. Interesting; I'm not seeing this issue in Xcode 10 on High Sierra. Is it only happening on Mojave?\nDid you add import CommonCrypto somewhere else? I can force errors by adding that, but I'm not seeing any errors in the standard build.. I can't reproduce what you're describing so far. I did the following:\n\nCreate a new iOS project\npod init\nAdd pod 'RNCryptor' to Podfile\npod install\nOpen workspace\nBuild\n\nI then added import RNCryptor to my AppDelegate, and created a cryptor. Still builds without trouble.\nWhat Cocoapods issues are you seeing?. What\u2019s confusing me here is this is a bug I fixed in 5.0.3. I have a feeling you\u2019re basing your work on a copy of 5.0.2. \n\nOn Jun 13, 2018, at 10:45 AM, Phillip G. Apley notifications@github.com wrote:\nThis was fixed with this:\npublic static func makeKey(forPassword password: String, withSalt salt: Data) -> Data {\n\n    var derivedKey = Data(count: keySize)!\n    let passwordData = password.data(using: String.Encoding.utf8)!\n\n    let result: CCCryptorStatus = derivedKey.withUnsafeMutableBytes {\n        (derivedKeyPtr : UnsafeMutablePointer<UInt8>) in\n        passwordData.withUnsafeBytes { (passwordPtr : UnsafePointer<Int8>) in\n            salt.withUnsafeBytes { (saltPtr : UnsafePointer<UInt8>) in\n\n                // All the crazy casting because CommonCryptor hates Swift\n                let algorithm     = CCPBKDFAlgorithm(kCCPBKDF2)\n                let prf           = CCPseudoRandomAlgorithm(kCCPRFHmacAlgSHA1)\n                let pbkdf2Rounds  = UInt32(10000)\n\n                return CCCryptorStatus(\n                    CCKeyDerivationPBKDF(\n                    algorithm,\n                    passwordPtr,   passwordData.count,\n                    saltPtr,       salt.count,\n                    prf,           pbkdf2Rounds,\n                    derivedKeyPtr, keySize)\n                )\n            }\n        }\n    }\n\n    guard result == CCCryptorStatus(kCCSuccess) else {\n        fatalError(\"SECURITY FAILURE: Could not derive secure password (\\(result)).\") // : \\(derivedKey)\n    }\n    return derivedKey\n}\n\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I can't reproduce this so far on Xcode 10, and the PR you provided appears based on 5.0.2 (I'd commented on the PR but forgot to submit it; check out the PR now). Do you have a project I can see that demonstrates this issue?. If it's crashing inside RNCryptor, that's a serious bug. Can you attach the stack trace and the value of encryptedData?\n\nLooking at your code, however, I suspect the crash is because of dataToDecrypt!, which will crash if the decode did not work. Your mistake is probably the use of NSData here. What you likely meant was this:\nlet dataToDecrypt = Data(base64Encoded: encryptedText)\n\nNote that this line is also very dangerous:\ndecryptedText = String(data: originalData, encoding: String.Encoding.utf8)!\n\nThere is no promise that what you get back will be a UTF8-encoded string. If it isn't, then this code will crash.. I've reproduced this issue.. See https://bugs.swift.org/browse/SR-8219. As a temporary fix, making Credential non-private will resolve this crash.\n```\ndiff --git a/Sources/RNCryptor/RNCryptor.swift b/Sources/RNCryptor/RNCryptor.swift\nindex 5d66daa..223ccb6 100644\n--- a/Sources/RNCryptor/RNCryptor.swift\n+++ b/Sources/RNCryptor/RNCryptor.swift\n@@ -614,7 +614,7 @@ internal final class Engine {\ninternal typealias V3 = RNCryptor.FormatV3\n-private enum Credential {\n+/private/ enum Credential {\n     case password(String)\n     case keys(encryptionKey: Data, hmacKey: Data)\n }\n``. @papley I found it through minimization. I just kept removing more and more of the code until I found the smallest bit of code that reproduces the problem (see the [Swift bug report](https://bugs.swift.org/browse/SR-8219) for the final version). I then altered each piece of that code to see what mattered (changing which class, class/struct, private/public/internal, removing/adding properties, removing/adding functions). In the end, the change that made the problem go away but didn't alter the code was removing theprivate`.. Update: This has been resolved in https://github.com/apple/swift/pull/17590, so I expect the next Xcode beta to resolve this issue.. I believe that Xcode10b4 resolves this. Can others confirm? @papley @DavidFaraday . @DavidFaraday I've seen these warnings with other frameworks in Xcode10. Generally a full clean (cmd-shift-k) or removing DerivedData has cleared them up.. See https://github.com/RNCryptor/RNCryptor/issues/276. Thanks for all the research. See https://github.com/RNCryptor/RNCryptor/issues/276 for the current status and work-around until the next beta.. RNCryptor has a minimum target of iOS 8. But this is a compile-time error, which means it can't be happening when you run on iOS at all. When you say \"when I run RNCryptor on iOS version below 11,\" what do you actually mean you're doing? Where does this error appear?. This is a very interesting problem. Have you seen this on multiple SE devices or just one? Is it across a range of OS versions? Do you have an example of the output from an SE device? How are you sending the data to the server?. See #255 . This change is not compatible with the RNCryptor file format.\n. I don't understand this change. Did you modify the project file?\n. I don't understand this change. This makes _HMACContext and __inData into static (class) rather than instance variables.\n. Have you discussed this with Duncan (JNCryptor maintainer)? You can pass different options to RNCryptor to change the number of iterations. Don't modify the constants in the header. I still don't understand the change marked here and how it could compile as given.\n. This is incorrect. The padding should never be null characters. The padding should always be PKCS#7. If there is one byte of padding, then there is one 0x01. If there are two bytes of padding, then there are two 0x02's. Etc. If there is no padding required, then there is a full block (16-bytes) of 0x10 appended. The decryption code needs to verify the padding. (I know this was wrong in Guysung's code as well.)\nThe function _padToBlockSizeMultiple() is correctly applying the required padding.\n(I'm going to go ahead and merge these changes and open a defect, since the changes are still better than the previous code.)\n. I'm not a Ruby developer, so I'm not highly familiar with gems. Just curious whether there's a reason for leading it with \"ruby_\" Isn't that implied in being a gem?\n. Are you perhaps importing CommonHMAC somewhere else? I could see that leading to the collision. Otherwise I'm unclear how adding this but removing the enum \"balance.\". Why did this need to be added back in? This generates most of the changes in this PR, but shouldn't be required in Swift 4.. This looks like it's based on 5.0.2 rather than 5.0.3.. ",
    "ghost": "I've been doing some testing, and sometimes, when I decrypt with a bad password, this line in performOperation of RNCryptor will throw an exception:\n  *aFooter = [readBuffer subdataWithRange:NSMakeRange([readBuffer length] - aFooterSize, aFooterSize)];\nThe exception is: 'NSRangeException', reason: '*** -[NSConcreteMutableData subdataWithRange:]: range {4294967294, 32} causes integer overflow'\nThe value of [readBuffer length] is 30, and when aFooterSize, which is 32 is subtracted from it, it wraps to the number 4294967294.\nBTW, thanks for all your hard work on this library, it is very useful to me.\n. Apologies.  It is already there.  I mistyped the name!\n. Ditto on CocoaPods support!\n. ",
    "tudormunteanu": "As far as I understand, decrypting files from openssl has been delayed? \nI'm creating encrypted files from the command line with: \"openssl enc -aes-256-cbc .... \"\n. I see. Thank you.\n. I'm sure that there are no existing files, because my test folder is always cleaned after each try. \n. I'm using the latest version from master, freshly downloaded this morning :)\n. Thanks poiting me in the right direction!\nEncryption and decryption with RNCryptor, based on the stackoverflow link you posted, works reliably (https://gist.github.com/4707883), but the same can't be said about encrypted files that come from openssl. I see that the tests run with a very basic openssl command so I tried: \"openssl enc -aes-256-cbc -in initial.zip -k 1234 -p -out initial_enc.zip\", but the result can not be decrypted. Is there anything missing?\n. Now it works! You rock. :+1: \n. FYI, the flow in testOpenSSLDecryptStream is massively leaking (my use case with >4GB zip files). I ended up using Calman's answer from http://stackoverflow.com/questions/14481605/dispatch-queues-and-asynchronous-rncryptor\n. I was using the code in your test, almost line-by-line and I noticed the leak while unpacking a big file and noticing that the memory went from 50 MB to above 400 MB and then app crashed. Unfortunately I coudn't find out the exact problem. I'll get back to you after I do some more tests.\n. ",
    "rlalwani": "Rob, yes.\nI had to include CommonKeyDerivation.c, CommonKeyDerivation.h, CommonKeyDerivationPriv.h in my Xcode project, but that was enough \u2013 because it seems other supporting/underlying functions needed by CCKeyDerivationPBKDF are already included in iOS4 CommonCrypto.\nSo, now CCKeyDerivationPBKDF is available on iOS4 devices.\nIt seems only about 45% or so users have upgraded to iOS5 - so restricting the app to iOS5 would be too restricting.\n. Rob, what numbers do you see or hear now? Can you point to any sources?\n. Thanks Rob. If the iOS 5 numbers are in the 75-80% range, that's really awesome. \n. ",
    "barnstar": "Other than the PBPKF functions, the only other iOS 5 function used is CCCryptorCreateWithMode().   Replacing this with the older CCCryptorCreate() in the readStream:stream:maxLength method would allow this to be used in iOS4. \n. ",
    "jacksun1203": "Hi rnapier: \nI using below codes to convert encrypted data to be NSString. Then I send the string to remote server and decode the string with base64_decode of php. But it outputs empty which (I think) should  be the encrypted data. Could you point me where could be wrong?\nNSData *encryptedData = [RNEncryptor encryptData:data withSettings:kRNCryptorAES256Settings password:key\n                                           error:&error];\nNSString *encryptedData_string = [data base64EncodedString];\n. Thanks for the comments. I will those suggestions. Thanks again!\n. ",
    "rfunk82": "Hey Rob is there a better way to encode a string to an encoded NSString?  I feel like base64 is not that safe... \n. If you still using the old version just replace this line:\nkey = [NSData dataWithBytes:md length:sizeof(md)];\nwith:\nkey = [NSMutableData dataWithData:[NSData dataWithBytes:md length:sizeof(md)]];\n. ",
    "GojaN": "Thanks to you for this grate code.\n. ",
    "pongchoa": "I have the similar issue and upgraded to the latest code but the api encryptFromStream is commented out. What should I replace it with?\n. Yes, I am using NSOutputStream and NSInputStream which is a subclass of NSStream. It would be great if you can put back the support for NSStream.\n. I am reading a data stream from a remote server using NSURL loading into NSData. When NSURL loading completed, I open a file output stream and write the encrypted data to the output stream.\nThe goal is to avoid having 1 copy of unencrypted NSData in memory and an encrypted NSData in memory. Sometime the file we tried to load is quite big. The iOS device may run out of memory.\n. The bigger issue is the backward compatibility. If I encrypted a file in iOS5 with older version of the RNCryptor, will I be able to decrypt it in the new RNCryptor in iOS6?\n. Thanks\n. ",
    "skabber": "I just ran into this as well.\n. ",
    "LightMan": "Talking about test cases, the OpenSSL test failed when testing in iPhone 5.1 Simulador (Xcode 4.5.2), the path of the test.enc file is nil because is not loaded properly (it returns nil). The correct way to load a file in unit testing is this:\n    NSString *path = [[NSBundle bundleForClass:[self class]] pathForResource:kOpenSSLPath ofType:nil];\n. ",
    "kvangork": "I worked around the same issue by commenting out this line: https://github.com/rnapier/RNCryptor/blob/master/RNCryptor/RNCryptor.m#L182\nDisables error reporting though, so not a shippable fix. After hours poking at it, I still cannot figure out what's wrong with the error property on that class.\nUpdate:\nI think the issue may be including RNCryptor in my project as source with the no-arc compiler flags turned on, and something subtle about ARC's autoreleasing out parameters.\n. I was using RNCryptor in an ARC project, with the -fno-objc-arc flag set on all the RNCryptor files, because I got a bunch of compile errors on dispatch_release and dispatch_retain calls, saying they're forbidden in ARC code.\n. Thanks for the guidance. Pull request for fix is at rnapier/RNCryptor#33\n. ",
    "YDing": "Hi kvangork and rnapier,\nI still get a compiler warning with this, saying that \"dispatch_get_current_queue\" is deprecated in iOS6.  Is there another way of accomplishing this?\n. ",
    "lawrencelomax": "Sorry, didn't see the other pull request for this.\nClosing\n. ",
    "ChristianKienle": "https://github.com/rnapier/RNCryptor/wiki/Data-Format\nBytes 18-33\nOr do you mean by code?\n. Remarks:\nThe the IV is already part of the encrypted file. If you transmit the encrypted file to the server then the server already knows the IV because its in the header of the files contents. You don't have to transmit the IV separately. If you are using RNCryptor on the server side you can simply decrypt everything by using the correct decryption key. RNCryptor will figure out the IV for itself. If you are not able to use RNCryptor on your server then you have to the the magic yourself.\nRob: Isn't there a standardised file format for embedding encryption related information in a file header? \n. Is this a homework question?\n. There is nothing special about NSData. NSData is just a simple BLOB.\nThere is no RNCryptor for Python.\nWhat have you tried? Why did it fail? How did it fail? \n. ",
    "mhergon": "So, how to decrypt RNCryptor NSData sended to server with Python + Tornado Web Server ?\nAny idea?\nThanks!\n. No, not homework. Simply I've tried every way possible and I have not gotten a correct result.\nIs there RNCryptor for Python? If yes, where can I find it?. If not, how to decrypt received data (NSData) on the server?\nThank you!\n. For example, I tried this;\n\nNSData *sub = [encryptedData subdataWithRange:NSMakeRange(18, 16)];\nNSLog(@\"%@\", [[NSString alloc] initWithData:sub encoding:NSASCIIStringEncoding]);\n\nAnd the NSLog shows:: N\u008e\u008e\u00f4\u00c0\u00be\u00a8\u00e3\u00d8J\u00b0\u0081\u00e2ho\nI understand that it is wrong, not the IV I'm looking for. Am I right?\nAlso, I tried with UTF8, UTF16, etc\nI think that I need the IV to send to the server for decrypt data on server side. Am I right? If not, I don't know how to decrypt this data on server Python. \nSorry if I seem heavy, but I have not gotten anything after several days ...\nThanks!\n. @rnapier I'm sending data using POST method. \nI'll try to send the IV in Base64 \nThank you!\n. Hi @rnapier ,\nI tried the next:\n1. Convert N\u008e\u008e\u00f4\u00c0\u00be\u00a8\u00e3\u00d8J\u00b0\u0081\u00e2ho to Base64 --> OK\n2. On server side, I decode Base64 string to binary --> OK\n3. I use the following function to decrypt Python: \"AES.new(key, AES.MODE_CBC, iv)\" but \"iv\" is an string and decoded Base64 iv not works.\n. Wow! Thanks!\n. Uops! I have a problem.\nI wanted to create this structure only with bytes \n[0] - [1] - [2-17] - [18 - ...]\ncryptor - options - iv - data\nThe last block corresponds to encrypted data.\nDoes anyone know how to implement it in Python?\nThanks\n. Sorry, it's true.\nI have a randomly generated KEY\nI will have a randomly generated IV for each iteration\nAES mode -> CBC\nWell, now I do:\npython\ncryptor = AES.new(KEY, AES.MODE_CBC, IV)\nbodyEncripted = cryptor.encrypt(paddedBody)\nWell, my problem begins when I try to put together in correct format, I don't know how do it...\nThanks!\n. ",
    "Red-Mak": "Thank you for replay but i have the same issue when i add the string to the start of file, her's my new code:\nNSMutableData *originalData = [NSMutableData dataWithContentsOfFile:[file.filePath stringByReplacingOccurrencesOfString:@\"file://localhost\" withString:@\"\"]];\nNSLog(@\"originalData data lenth = %li\",originalData.length);\nNSMutableData *cryptedData= [NSMutableData dataWithData:[RNEncryptor encryptData:originalData withSettings:kRNCryptorAES256Settings password:textFieldPassWordForEncryption.stringValue error:&error]];\nNSLog(@\"cryptedData data lenth = %li\",cryptedData.length);\nNSMutableData *signedData = [self signFileData:cryptedData];\nNSLog(@\"signedData data lenth = %li\",signedData.length);\nNSMutableData *unsigneddata = [self removeSigntureInRange:[self testIntegrityFromData:signedData] FromData:signedData];\nNSLog(@\"unsigneddata data lenth = %li\",unsigneddata.length);\nNSMutableData *decryptedData = [NSMutableData dataWithData:[RNDecryptor decryptData:unsigneddata withPassword:textFieldPassWordForDecryption.stringValue error:&error]];\nNSLog(@\"decryptedData data lenth = %li\",decryptedData.length);\nNSLog([[error userInfo] description]);\nlog : \noriginalData data lenth = 21854\ncryptedData data lenth = 21922\nsignedData data lenth = 21938\nIES.FileSign.com\nunsigneddata data lenth = 21922\ndecryptedData data lenth = 0\n{\n    NSLocalizedDescription = \"HMAC Mismatch\";\n}\nyou can see that the \"cryptedData\" lenth is equal to the \"unsigneddata\" so the sigh/unsigne work fine.\nthere's other way to sign my file in the right way not with a string ?\n ( if you think that have no relation with RNCrytor, should i move it to stackoverflow? )\n. wrong bytes calcul, th\n. ",
    "danielvy": "The data block you receive from RNCryptor's encrypt is not just the encrypted AES output, it also contains some meta data, IV, Salt and HMAC. See the description of the format here:\nhttps://github.com/rnapier/RNCryptor/wiki/Data-Format\nSo you either:\n1. Use lower level functions in iOS to create the encryption key and IV yourself to be later used in PHP (but then, why use RNCryptor in the first place)\n2. Extract these parts from the RNCryptor format in PHP and call the PHP decrypt functions with the relevant parts of it (note you need to use PBKDF2 to recreate the key from the pass + salt).\n3. Or you extract it from the RNCryptor format in iOS and submit it separately (but will still need to create the key from pass + salt).\n. ",
    "cenedella": "In light of v2, do these comments still stand?  Or was mhergon correct regarding the python implementation?\n. ",
    "cyrille-legrand": "I confirm that with Calman's patch, it works on iOS6.\n. ",
    "tarekhallak": "Thanks rnapier for your positive feedback, I changed the second chr(0) to chr(1) and still got the same result -> data is empty in iOS objective-c code. What do you think ?\nI have another question... I'm planning to send the encrypted base64-encoded string to my ios app as a response of HTTP request.. but now for testing purposes I'm echo-ing the generated vale from php and copying from web-browser it to my iOS class file and run my iOS test app... my question is : does copying & pasting cause any lose of data (as I think no... am I right)\n. Hi,\nIt looks that you updated data-fromat page again since 2 days?\nDoes that mean that the first byte should be chr(2) and the second byte should be chr(0) to indicate that I'm using password ?\n. Thank you v.much Rob,\nBut I still have one question, to calculate final HMAC : you said : [HMAC is computed over entire message prior to the HMAC (header + ciphertext).] ... does the entire message preior to the HMAC = dateByte[0 to n-32] ? or only the the cipher text without any salt or options ?\n. I still have a problem ... and It kills me\nBelow is my code:\nPHP \n1-I removed the pre-padding and generated the IV with 16 bytes.\n2-I dorced the pbkdf2 function to return 8 bytes for key & hmacKey\n$key = \"myKey\";\n$plainText = \"iphone\";\n$iv = mcrypt_create_iv(16, MCRYPT_RAND);\n$keySalt = '12345678';\n$hmacSalt = '12345678';\n$_key = pbkdf2('SHA1', $key, $keySalt, 10000, 8, true);\n$_hmacKey = pbkdf2('SHA1', $key, $hmacSalt, 10000, 8, true);\n$cipherText = mcrypt_encrypt(MCRYPT_RIJNDAEL_128, $_key, $plainText, MCRYPT_MODE_CBC, $iv);\n$dataWithoutHMAC = chr(2).chr(1).$keySalt.$hmacSalt.$iv.$cipherText;\n3-first try I passed the cipher text to the hash_hmac\n     $data = base64_encode($dataWithoutHMAC.hash_hmac('SHA256',$cipherText,$_hmacKey, true));\nand I got \"et.robnapier.RNCryptManager error -4301\" while decrypting in iOS. \"which mean too small buffer as I think\"\n4-second try I passed the header (chr(2).chr(1).$keySalt.$hmacSalt.$iv) + cipher text to the hash_hmac (but I got the same result for the first try [-4301])\n     $data = base64_encode($dataWithoutHMAC.hash_hmac('SHA256',$dataWithoutHMAC,$_hmacKey, true));\nIn iOS \n```\ndecryptionError = nil;\nNSData *fromPHPData = [@\"AgExMjM0NTY3ODEyMzQ1Njc4WvrmgsFy6IoWNmm2hYL9N2jNVxU13Eo15cRyQRakRZ9WsjZ2CY/B5y4YkmG9uGdB2vHFpmpjsnm3O4d59Ex7Nw==\" base64DecodedData];\nNSData *fromPHPDecryptedData = [RNDecryptor decryptData:fromPHPData withPassword:@\"myKey\" error:&decryptionError];\nNSLog(@\"decryptionError %@\", decryptionError);\nNSString *fromPHPEcryptedStr = [fromPHPDecryptedData base64EncodedString];\nNSLog(@\"2nd : %@\", fromPHPEcryptedStr);\n```\nthe error I got in iOS is : \"The operation couldn\u2019t be completed. (net.robnapier.RNCryptManager error -4301.)\"\n. Thank you Rob very much.. It works for me .. I was creating 8 bytes keys not 32 ... \nI appreciate your helpful responses\n. ",
    "megabri": "Hi,\nI'm looking to an ANSI C library to embed in a microcontroller that can work with RNCryptor data output for excange crypted information from iPhone and microcontroller.\nHave you some suggestion where I can find out it ?\nThank's a lot and compliments for great work in RNCryptor.\nGabriele Merlonghi\nInviato da iPad\n. ",
    "siriusdely": "Thank you for this. This really helps.\n. ",
    "AriX": "See acee3c1ea6c7a7b49166991e67abbf8b29727311 for one possible implementation.\nIt supports every possible combination of stream types - you can hook up an NSOutputStream to an NSInputStream, an NSInputStream to an NSOutputStream, or even an NSOutputStream to an NSOutputStream or NSInputStream to NSInputStream. This is very useful for using various encryption/description operations with Cocoa's URL Loading System (such as NSURLConnection or NSURLSession).\nIt's not suitable for a direct merge, because my fork is non-ARC for 32-bit compatibility, but feel free to copy/improve.\n. ",
    "TimoKr": "It's difficult to speak in general, but my specific cases for multiple encryption settings in one project are mainly due to performance reasons. Assume that you can classify the information to encrypt in different categorys (highly sensitive, normal, low priority). Especially if there is lots of low priority data, setting down the iteration count for this category will provide a performance boost on a mobile device (and vice versa highly sensitive information could be stored with a higher iteration count).\nYour intended way for implementation (inserting new bytes between options and encryption salt) seems to be a bigger change of the data structure (which is definitely an issue for upgrading from the actual code basis and for the usability of existing encrypted data, isn't it?). Also I'd prefer not to save the custom settings containing the iteration count etc. (for my specific case I know which setting to use for which encrypted data). In this case just adding a method like the following would do the job:\n- (NSData )decryptData:(NSData )theCipherText withSettings:(RNCryptorSettings)theSettings password:(NSString )aPassword error:(NSError *)anError\nAlternatively, the type of the setting could be saved. Isn't it possible to use the version or the option flag for that? For example, in each RNCryptorSettings the developer could provide a number which is higher than kRNCryptorFileVersion. When reading out the first byte you could switch it (equals kRNCryptorFileVersion => standard configuration, is higher than kRNCryptorFileVersion => get the setting with that number).\nHopefully my thoughts aren't too complicated ;)\n. ",
    "inismor": "Rob, I need the exact same method. It's not so much for the iOS-side, but for the encryption side which is being done in JavaScript and by necessity needing to use fewer iterations for PKBDF2 that I need to account for in my iOS code.\n. ",
    "yeahphil": "I've just run into this as well. Like other folks above, I want to change the number of PBKDF2 rounds used.\nRob, would you be open to a pull request that added this? I've written up the method @TimoKr suggests above,\n(NSData )decryptData:(NSData *)theCipherText withSettings:(RNCryptorSettings)theSettings password:(NSString *)aPassword error:(NSError *)anError\nand would be happy to clean it up and submit a pull request.\n. Went ahead and submitted the pull request. \nThe other encrypt/decrypt methods in the library all take a settings argument -- RNDecryptor is the only exception. And the way things stand now, RNEncryptor is a bit of a landmine: if you supply an argument other than kRNCryptorAES256Settings, RNDecryptor will likely not be able to decrypt the result.\nI don't think you need to change the data format to accommodate. Applications that use multiple encryption settings will just have to keep track of how their encrypted data was encoded outside that data itself.\nAnother reasonable approach might be to remove the settings argument and force users to always use the standard settings. I'd prefer not to see that happen, but it would be internally consistent. But in that case, it would be worth wrapping the settings that are used in something like:\n```\nifndef kRNCryptorActiveSettings\ndefine kRNCryptorActiveSettings kRNCryptorAES256Settings\nendif\n```\nand using that instead. That would let library users modify their encryption settings from their own config, without having to change RNCryptor.h.\nThanks again for a great library!\n. Can I make one more plea for also having an API that allows passing settings? I'm all for some settings-free class methods (that seems like the most common use case). \nBut for anyone who wants to vary settings within the app, without a more flexible API, RNCryptor gets a lot less useful. They'll have to take over key/HMAC generation and pass those directly, fork the library, or do kludgy stuff (if the idea is just to change the number of rounds) like pre-stretching the key and passing that in (then managing a second salt).\nTo reiterate, I'd love to help write this up in a way that lets me keep using the library -- if the PR I sent isn't how you want to do it or you want tests, etc. let me know and I'm happy to make changes.\n. Oh -- awesome! I misunderstood...\nSorry if my reply was a little overheated and thanks!\n. ",
    "sgtsquiggs": "Rob linked to a PHP example in the Data Format page.\nExample: http://stackoverflow.com/a/13785706/97337\n. ",
    "curtisdf": "There's now a very robust PHP implementation of RNCryptor.  Check it out in the repository in the php folder.\n. Thanks Rob!  It was a lot of fun.  :-)\n-Curtis\nOn May 29, 2013, at 9:12 AM, Rob Napier notifications@github.com wrote:\n\nAnd I've just merged in the latest changes. The PHP is getting quite good. Thanks a lot!\n\u2014\nReply to this email directly or view it on GitHub.\n. Hi Rob,\n\nExcellent!  Thanks for this outstanding crypto library too!\nIt'd be really nice if, for the sake of completeness, we could include support for schema 0 in the PHP implementation.  I know schema 0 is nowhere near as secure as schema 2, but people may have data that was encrypted by earlier versions still.  I tried hard (hours!) yesterday to make the new RNCryptor.php class support schema 0, but I got nowhere.  Information in the PHP community on using AES CTR mode is scant.  Also, I couldn't get the HMAC validation to work either.  I'm not sure if I missed some other differences between schemas 0 versus 1 and 2.  Any pointers?\nI tried reading through the RNCryptor 1.x Obj-C implementation to see if the HMAC bug in schema 1 also exists in schema 0.  I want to say it does, but I'm not completely sure.  It's a little hard for me to know what's going on there.  Are you able to confirm it's in schema 0 too?\nThanks,\nCurtis\nOn May 9, 2013, at 8:41 AM, Rob Napier notifications@github.com wrote:\n\nFantastic! I really appreciate getting a real PHP developer to rewrite my\ncobbled together stuff. Let me take a quick lookover and I'm happy to\nintegrate this into the tree.\nOn Thu, May 9, 2013 at 1:54 AM, Curtis Farnham notifications@github.comwrote:\n\nI modernized the PHP implementation and added support for file version 1.\nIt'd be nice to see it incorporated into your tree!\nThanks,\nCurtis\nYou can merge this Pull Request by running\ngit pull https://github.com/curtisdf/RNCryptor master\nOr view, comment on, or merge it at:\nhttps://github.com/rnapier/RNCryptor/pull/68\nCommit Summary\n- PHP Implementation: Adding support for RNCryptor file version 1,\n  migrating procedural code to OO, and file structure cleanup\nFile Changes\n- A php/RNCryptor.phphttps://github.com/rnapier/RNCryptor/pull/68/files#diff-0(175)\n- D php/crypt-common.inchttps://github.com/rnapier/RNCryptor/pull/68/files#diff-1(48)\n- D php/decrypt.phphttps://github.com/rnapier/RNCryptor/pull/68/files#diff-2(223)\n- D php/encrypt.phphttps://github.com/rnapier/RNCryptor/pull/68/files#diff-3(63)\n- A php/examples/decrypt.phphttps://github.com/rnapier/RNCryptor/pull/68/files#diff-4(12)\n- A php/examples/encrypt.phphttps://github.com/rnapier/RNCryptor/pull/68/files#diff-5(12)\n- A php/functions.phphttps://github.com/rnapier/RNCryptor/pull/68/files#diff-6(51)\nPatch Links:\n- https://github.com/rnapier/RNCryptor/pull/68.patch\n- https://github.com/rnapier/RNCryptor/pull/68.diff\n\n\nRob Napier -- Software and Security Consulting\nCocoaphony blog -- http://robnapier.net/blog\niOS Programming Pushing the Limits -- http://robnapier.net/book\n\u2014\nReply to this email directly or view it on GitHub.\n. Hi Rob,\n\nAs you can see, I've done considerable cleanup of RNCryptor.php today.  :-)  I also added a suite of PHPUnit tests.  All tests are passing except for decrypting schema-0 data from the iOS implementation.  I'm still having the same problems there which I previously mentioned, and I'm out of ideas.  Maybe someone else will pick this up and run with it.\nThanks,\nCurtis\n. Okay thanks Rob!  I've made an attempt to fix the padding.  I'll submit another pull request shortly.\n. I got schema 0 to work in PHP!!!  :-D  AFAIK, the PHP implementation is now compatible with all versions of your iOS implementation released to-date.  I know that not many people will benefit from schema 0 in PHP, and maybe none at all.  But it was nagging me that I couldn't figure it out.  So it was partly an academic exercise.  I wanted to learn more about crypto stuff anyway.\n. You'll need to get better at debugging your own code.  There is no standard HTTP method called \"authentication\", so that makes me wonder if those lines inside your IF statement are even being run.  Also, the paths to the RNCryptor classes look like an outdated or highly customized version of RNCryptor-php.  Try upgrading to the latest version.\nAlso, turn on the maximum level of error reporting in your PHP setup.  PHP usually has a lot of kinds of errors hidden by default, which makes it difficult to know what's going on.  A quick way of maximizing your error reporting is to insert the following lines above your require_once statements:\nerror_reporting(E_ALL);\nini_set('display_errors', 'On');\nGood luck!\n. Hi @cironapo.  Have you double-checked if the encrypted value in iOS is reaching your server intact? I had a similar issue once, and it turned out that that the value was getting URL encoded/escaped but the reverse was not properly done on the server side, so the effect was that some strings (the ones without any offending characters) made it through, but others did not.\n. It's hard to say since there are many PHP factors that could influence the outcome.  But if you could provide us a sample of a problem string encrypted on the iOS side right before it gets transmitted, and what it looks like when it arrives in your PHP script (i.e. in $_POST), we could probably give you some good ideas.\n. Okay, I see now. :-)\nThis string has several \"+\" characters which in raw HTTP are interpreted as spaces.  So when PHP receives this string, it (correctly) decodes the POST values and replaces the \"+\" with space characters instead.  Which is not what you want in this case.\nThe quick and dirty way of solving this would be on the PHP side, replace space characters in this value with \"+\" instead.  But I'm not sure if this is the only character that would get mangled like this.  There might be others that are more rare, which you'd also need to handle.\nThe \"right\" way is that you need to urlencode this value on the iOS side before it is sent.  There are 100 ways to do this.  This StackOverflow post might give you some ideas: http://stackoverflow.com/questions/8088473/url-encode-an-nsstring\n. If the string sent by iOS is not the same as what's received by PHP, it means it's somehow getting altered during transit.  You need to take a look at your iOS code and also PHP code and step through it to see what's happening.  The strings you shared indicate you haven't yet gotten URL encoding to work.  PHP still is receiving the string with spaces in it.  This should not be.\n. ",
    "guysung": "Could I just change the line 9 in the encrypt.php like below?\nFrom \nphp\n$key_size = 32;\nTo\nphp\n$key_size = 16;\nI am looking forward to hearing from you.\nThanks much.\n. Hi Rob,\nWith some research, I was finally able to make a decryptor for PHP and understand what the HMAC is for.\nI also made a pull request. Please feel free to comment on it. \nThanks much.\n. More commits have been made after the initial commit.\nThis time I created  a new decrypt_data() for the RNEncryptor and renamed the previous decrypt_data() function for the CPCryptController to CPCryptController_decrypt_data().\nI put the corresponding codes example of iOS below.\n``` objective-c\n// Corresponding iOS encrypt codes example.\nNSData *encryptedData = [RNEncryptor encryptData:srcData\n                                         withSettings:kRNCryptorAES256Settings\n                                             password:@\"password\"\n                                               error:&error];\nNSString *encryptedDataBase64Final = [encryptedData base64EncodedString];\n//If no error we send the post, voila!\nif (!error) {\n      NSMutableDictionary *params = [[NSMutableDictionary alloc] init];\n      // Post enctypted\n      [params setObject:encryptedDataBase64Final forKey:@\"JSONEncryptedBase64\"];  \n      // Do Post!\n      [[RKClient sharedClient] post:postResourcePath params:params delegate:self];\n}\n```\nI am looking forward to hearing from you soon.\nThanks.\n. That's good to know. Rob.\nConsidering what you mentioned above, current implementation of the decrypt.php so far is just for v2 as far as I can tell.\nLet me know if you want me to add codes for v1. I will consider it later some time.\nThanks much.\n. FYI, I actually moved  hash_pbkdf2() function to new crypto-common.inc file and use it as a include file  for both encrypt.php and decrypt.php.\n. ",
    "vsymguysung": "It's a long story.\nI was using RNCryptor1.1 and PHP 5.2.14.\nFirst I couldn't find a right PBKDF2 implementation in PHP, so I just used a pre-generated 128 bit key hardcoded in both iOS and PHP side(kRNCryptorKey)  as a temporary solution, I even don't know whether this current temporary implementation is good or not. ( Any recommendation or example for PBKDF2 implementation in PHP 5.2.14? so that I can only use the salf and number of interation.). I tried a lot of examples for implementing PBKDF2 from the stakoverflow, those were not good to work.\nFinally, the reason I selected 128 bit key is that is the only way I could be able to implement the encrypt in iOS and decrypt in PHP successfully.\nNow I am looking for the method of the encrypt in PHP and decrypt in iOS so I just to want same bit key for both.\nI want to share my implementation for the encrypt in iOS and decrypt in PHP and hear from you.\nAny code reviews would be very appreciated.\nRNCrytor settings\nobjective-c\nstatic const RNCryptorSettings kRNCryptorAES256Settings = {\n    .algorithm= kCCAlgorithmAES128,\n    .mode = kCCModeCBC,\n    .keySize = kCCKeySizeAES128,\n    .blockSize = kCCBlockSizeAES128,\n    .IVSize = kCCBlockSizeAES128,\n    .padding = ccPKCS7Padding,\n    .saltSize = 8,\n    .PBKDFRounds = 10000,\n    .HMACAlgorithm = kCCHmacAlgSHA1,\n    .HMACLength = CC_SHA1_DIGEST_LENGTH,\n};\niOS encryption code snippet.\n``` objective-c\n // Start AES128 ecryption\n // NSData key = [[self.cryptor class] randomDataOfLength:kCCKeySizeAES128];\n // To create the kRNCryptorKey, I use the above line.\n        NSData key = [NSData dataFromBase64String:kRNCryptorKey];\n        NSData *IV = [[self.cryptor class] randomDataOfLength:kCCBlockSizeAES128];\n        DebugLog(@\"Key: %@\", key); DebugLog(@\"IV: %@\", IV);\n    NSInputStream *encryptInputStream = [NSInputStream inputStreamWithData:srcData];\n    NSOutputStream *encryptOutputStream = [NSOutputStream outputStreamToMemory];\n\n    [self.cryptor performOperation:kCCEncrypt\n                        fromStream:encryptInputStream\n                      readCallback:nil\n                          toStream:encryptOutputStream\n                     writeCallback:nil\n                     encryptionKey:key\n                                IV:IV\n                        footerSize:0\n                            footer:nil\n                             error:&error];\n\n    [encryptOutputStream close];\n    [encryptInputStream close];\n\n    NSData *encryptedData = [encryptOutputStream propertyForKey:NSStreamDataWrittenToMemoryStreamKey];\n    DebugLog(@\"encryptedData: %@\", encryptedData);\n\n    // Do Base64 encoding for AES128 encrypted data\n    NSString *encryptedDataBase64 = [encryptedData base64EncodedString];\n    DebugLog(@\"encryptedDataBase64: %@\", encryptedDataBase64);\n\n    // Attach IV to the encrypted data as a header.\n    NSString *encryptedDataBase64WithIVHeader = [NSString stringWithFormat:@\"%@%@\", [IV base64EncodedString], encryptedDataBase64];\n    DebugLog(@\"encryptedDataBase64 plus IV header: %@\", encryptedDataBase64WithIVHeader);\n\n    //If no error we send the post, voila!\n    if (!error) {\n        NSMutableDictionary *params = [[NSMutableDictionary alloc] init];\n         // Post enctypted\n        [params setObject:encryptedDataBase64WithIVHeader forKey:@\"JSON-Encrypted-Base64\"];\n\n        // Do Post!\n        [[RKClient sharedClient] post:postResourcePath params:params delegate:self];   \n    }\n\n```\nPHP decryption code snippet.\n``` objective-c\nfunction decrypt_data($data, $key) {\n$key = base64_decode($key);\n\n$cypher = mcrypt_module_open(MCRYPT_RIJNDAEL_128, '', MCRYPT_MODE_CBC, '');\n\n// Retrieve $iv which is the first 22 characters plus ==, base64_decoded.\n$iv = substr($data, 0, IV_SIZE + sizeof('==')); //print'iv:'; print($iv); \n$iv = base64_decode($iv);\n\n// Remove $iv from $data.\n$data = substr($data, IV_SIZE + sizeof('==')); //print'data:'; print($data); \n$data = base64_decode($data);\n\n// initialize encryption handle\nif (mcrypt_generic_init($cypher, $key, $iv) != -1) {\n\n        // decrypt\n        $decrypted = mdecrypt_generic($cypher, $data);\n\n        // http://www.php.net/manual/en/function.mdecrypt-generic.php\n        // We found that sometimes the resulting padding is not null characters \"\\0\" but rather one of several control characters.\n        // If you know your data is not supposed to have any trailing control characters \"as we did\" you can strip them like so.\n        $decrypted = preg_replace( \"/\\p{Cc}*$/u\", \"\", $decrypted );\n\n        // clean up\n        mcrypt_generic_deinit($cypher);\n        mcrypt_module_close($cypher);\n\n        return trim($decrypted);\n}\n\nreturn false;\n\n}\n```\n. I've just noticed you have hash_pbkdf2() function in the encrypt.php file. Is this hash_pbkdf2()  compatible with RNCryptor verion 1.1 and PHP 5.2?\n. I've juste tested it, it works with RNCryptor 1.1 and PHP5.2.\nThanks much for the work again.\n. Thanks for your answer.\nDo you have any example codes for decrypting for PHP?\nI know you did good job on encrypting for php through the encrypt.php file.\nThanks always.\n. Actually, I would like to create a decryptor for php but I really don't know how to parse the enctypted data in PHP side which is the posted value of [[CPCryptController sharedController].encryptedData base64EncodedString] from the iOS app. If you have a good starting point for this or any references, It will be very helpful.\nThis is another question. I bought the book called \"Pushing the limits\", read through the chapter 11 but I don't see any chapter for HMAC. \nI don't quite understand what the HMAC role is in AES cryptography, so I couldn't image how the missing HMAC is vulnerable in AES. Could you help me understand the role of HMAC in AES? or \nDo you have any resources that I can learn from about HMAC and AES?\n. ",
    "JurajKub": "Yes. I want to encrypt and decrypt in Python. Can you post your code?\nOdoslan\u00e9 z iPhonu\nD\u0148a 13.3.2013, o 20:59, Rob Napier notifications@github.com nap\u00edsal:\n\nI don't understand the question. Is this related to RNCryptor? I began work on porting to python, but I haven't completed it yet. If you're interested in implementing the RNCryptor format in python, you'll want to see the Data Format: https://github.com/rnapier/RNCryptor/wiki/Data-Format\n\u2014\nReply to this email directly or view it on GitHub.\n. Thank you. I will use it. Do you plan release decryptor?\n\nD\u0148a 18.3.2013, o 0:40, Rob Napier notifications@github.com nap\u00edsal:\n\nSee https://github.com/rnapier/RNCryptor/blob/master/python/RNCryptor.py for an encryptor based on pycrypt. I haven't written a decryptor yet.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "chinhnguyen": "Hi, thanks for the code, I'm doing this way in python\nfrom rncryptor import RNCryptor\nplaintext = b\"this is a test\"\npassword = b\"mypassword\"\nmessage = RNCryptor().encrypt(plaintext, password)\nThen make the message base64 encoded\nimport base64\nbase64.b64encode(message)\nthe result is\n'AgEMuaEeR1iixYgQAUh3bdfwKPBSmFNKhyvswtbqoYyuj+1k8yh66fpi/4aJNUvrZYTYzjoUgHxbqwXOLtcZ13qO83VOgPaCa0JHaeT8zksNdA=='\nIn Obj-C, I do like as below \n    NSData d = GTLDecodeBase64(@\"AgEMuaEeR1iixYgQAUh3bdfwKPBSmFNKhyvswtbqoYyuj+1k8yh66fpi/4aJNUvrZYTYzjoUgHxbqwXOLtcZ13qO83VOgPaCa0JHaeT8zksNdA==\");\n    NSError err;\n    NSData *data = [RNDecryptor decryptData:d withPassword:@\"mypassword\" error:&err];\nAnd I got an error which says\nError Domain=net.robnapier.RNCryptManager Code=2 \"Unknown header\" UserInfo=0xc96fc10 {NSLocalizedDescription=Unknown header}\nI'm pretty new to RNCryptor, thus please help showing what is wrong.\nThanks\n. Hi guys, sorry for posting the question without enough inspecting.\nIt turns out to be that I were using the old version of RNCryptor on Obj-C.\nThe newest code did solve the issue.\nThanks for the great work.\n. ",
    "GirirajMulay": "I have encryption for raw data using RNCryptor in iOS. while decrypting same I am facing issue (Decryption is in  python at server side).\nThis is how I generate random key \n        self.symetricKey = RNCryptor.randomData(ofLength: 32)\n        self.hmacKey = RNCryptor.randomData(ofLength: 32)\nand, Actual encryption is : \nlet encryptor = RNCryptor.EncryptorV3(encryptionKey: self.symetricKey , hmacKey:self.hmacKey )\nlet encryptedData = encryptor.encrypt(data: data)\nThen I just write this \"encryptedData\" to a file\nencryptedData.write(to: file, options: [.atomic])\nNote: Encryption is done using random generated hmac key and encryption key.\nAny help will be appreciated.\nThanks in advance. ",
    "GabCas": "No. Not reporting a bug, just wanted to clarify some doubts. First off, thank you for publishing this library, it has taught me a lot about encryption. Now, regarding the issues you've mentioned:\n1. $_FILES, not $_Files, is an array of items uploaded to the current script via the HTTP POST method. In my case, I'm encrypting in iOS and sending to my PHP server. \n2. $b64_data, in my case, is the data received from the POST method.  In iOS, I create a NSMutableURLRequest and fill it's body with NSData (encrypted with RNCryptor). I then retrieve it in PHP with $_POST[\"message\"]. I was not using \"mb_convert_encoding($b64_data, \"UTF-8\", \"BASE64\")\" because I believed the encrypted sent data was binary already. Apparently I'm wrong.\n3. Checking my HMAC this way: if($hmac_hash != $hmac), always returned true (meaning they were not the same).  Could this be because I was not converting it to binary?  When I converted the b64_data to binary I was not receiving a correct 'decrypted' message.  You can see my code on the link of Issue #60 .\nPerhaps the best way to formulate my question is like this: If I encrypt an array, will the result of it being 'decrypted' be an array as well?\nThank you for your time, and if there is another place where to ask this questions, I'll gladly do it there.\n. Thanks to you I got the HMACs matching! guysung's code works fine, however he is missing the hash_pbkdf2() function in his example. I found it in the sample code you download here. A key element to my problems was the data I was trying to decrypt. The data received was an encrypted string. All I had to do was convert it to base64 before converting it to binary and decrypting it. Thanks again, now I'm using RNCryptor with my code again.\n. ",
    "sammio2": "Hi Dude,\nWell that's the weird thing, I'm not... It's definitely an NSString because I'm generating it on the fly. There aren't any compiler warnings either, I don't ignore them ;-)\nI've coded around this now by doing a isKindOfClass:[NSString class] check on the password before passing it to RNCryptor, but it's not the cleanest solution.\nCould this not be dealt with by populating the supplied NSError object rather than using an NSAssert? Just a thought.\nCheers\n. I'm doing my own validation that the password is an NSString before I pass it to the RNCryptor method...\nI'm not calling it directly, its through the encryptor or decryptor methods, which do a check to make sure the password isn't nil, which is an NSAssert (If i recall correctly) You could introduce a check here to make sure the password is an NSString before passing it to the RNCryptor methods?\n. Yep, I'll fork and implement what I'm describing when I get a second...\nCheers for your help!\n. ",
    "t0mm13b": "Ahhh, yeah, I had to change it to make JNCryptor work proper - 10000 iterations seized up on the android side, hence had to lower it... in fact, that iteration could be commented out if wished to remain compatible.... ?\n. Many thanks for your input Rob :) \nMuch appreciated... \nQuestion: Since I have undo'd the iterations on my end, what is the proper way to set up a customized setting?\nIs it this:\nobjective-C\nRNCryptoSettings customSettings = kRNCryptorAES256Settings; \ncustomSettings.keySettings.rounds = 1000;\n?\n. Thanks  a million for your inputs! :)\n. I was using JNCryptor (see one of my repos), had to lower the iterations count, and also on this project as well to make it compatible and cross-platform encrypt/decrypt\n. The compiler was complaining by way of this error message \"Inconsistent instance variable specification\"\n. BTW Had to change from <CommonCrypto/CommonKeyDerivation.h> to \"CommonCrypto/CommonKeyDerivation.h\" as per my StackOverflow answer http://stackoverflow.com/questions/9958661/how-to-compile-and-use-commoncrypto-for-ios-4/16358916#16358916\n. Was zero aware of being able to specify the option to RNCryptor to change the number of iterations! Did not know that - thought that was hardcoded in place..\n. Maybe, a proper way of doing it is to use a macro in place instead of commenting out the lines? There was similar error that crashed as result of hasV1HMAC with a runtime error something about selector not found or similar, hence had to @synthesize it\n. There is no settings for options on the JNCryptor side which lead me to rather \"think\" incorrectly.\n. ",
    "steipete": "Thanks for merging!\n. ",
    "gluttony": "I mean the content of Base64.h is Base64.m, and the content of Base64.m is Base64.h.\n. ",
    "ykalchevskiy": "Oh. I think there is no way to merge my changes and brantyoung's changes. @brantyoung made additions to your version, but I rewrote almost all code.\nAdvantages of my version are:\n- Python 3 support,\n- no need for additional module for PKCS#7,\n- PEP8 compliant code,\n- tests with iOS, Android, JavaScript realizations of RNCryptor protocol.\nOn the other hand, my version is bigger and maybe little more complex than brantyoung's one. But it helps realization to be more flexible.\nDo @brantyoung have another opinion?\n. Thank you, @rnapier . Feel free to contact me, if you need changes or improvements. \n. @arthurdarcet, you confused with pull request numbers. You should replace #76 with #75 and #75 with #74. \nI wrote my version with a flexibility in priority. Therefore most functions have a wrapper: for example, if you want to change pbkdf2 implementation, you should rewrite only __pbkdf2_ method and don't touch anything in the main code. As you mentioned above, it has pre... and post... methods help to archive more flexibility too.\nAlso, IMHO, another pros of my realization is it doesn't depend on separate pkcs7 module.\n. ",
    "tsileo": "Hi @ykalchevskiy,\nI would love support for big files, for the moment, it can't handle file that doesn't fit in ram.\nI think It should read by chunks and deals with padding (like this snippet).\nThanks!\n. ",
    "arthurwalasek": "I can send you what I did to fix it - it involves when decrypting - if\ndecrypting fails, to check the 2 password lengths (1 with UTF8 1 without).\nIf they differ, then decrypt the old way and re-encrypt the new correct\nway.  I also had to change RNDecryptor for the common header function to\nalso do it the old way if I set a flag.  Basically I made a new\n\"badkeyforpassword\" function that still did it the old way, and called it\ninstead of the correct one when this condition occurred and I couldn't\ndecrypt...\nOn Wed, Aug 21, 2013 at 7:47 PM, Rob Napier notifications@github.comwrote:\n\nThat is a really good catch and a major security issue. The password is\nbeing significantly shortened.\nThe fix is very easy:\n[password lengthOfBytesUsingEncoding:NSUTF8StringEncoding], // passwordLength\nMy problem is thinking through how to address it for existing files, since\nthis change would cause files that were encrypted with multibyte characters\nto no longer decrypt at all.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rnapier/RNCryptor/issues/77#issuecomment-23065251\n.\n. \n",
    "hugo53": "@anjerodesu Have you solved this issue? If you did, please help me to pass this problem. I am encountering the same error: encrypting is good but cannot decrypt by Unknown Header error. Thank you!\n. ",
    "arthurdarcet": "\nBased on the #76, #75 isn't\nAdded a README.md\nA little bit shorter\nUsing six to handle both python 2 and 3, #76 is doing things by hand.\n\n76 RNCryptor class is built so it can be easily extended (with pre_\u2026 and post_\u2026 methods)\n\n\nI think it depends how you want this port to be used: if i had to choose, i would suggest in the README to copy paste the code in your project and go through the few lines of code to remove what is not needed (example function, python 2+3 support (most projects need only one of the two)).\nIn the end the user will probably re-write most of this code to adapt it to his own needs, so i think it should be as simple/short as possible.\n. The implementation i am using in production does have a separate pkcs7 module, of course ; but i kept this one because of the very explanatory comment.\nIt's only two one-liner and moving it to the main class is easy enough\u2026\n. ",
    "panagiotious": "Sorry, forget I even asked. Can't believe I spent 4 hours and didn't see that I hadn't initialised NSError *decryptionError = nil;\n. ",
    "anhhtz": "Work perfect ! Thanks for your reply and library !\n. ",
    "cironapo": "Hi! I have the same problem. I can not decrypt a string in php.\nNSData toPHPData = [String dataUsingEncoding:NSUTF8StringEncoding];\n    NSError error;\n    NSData *encryptedData = [RNEncryptor encryptData:toPHPData\n                                        withSettings:kRNCryptorAES256Settings\n                                            password:@\"myPassword\"\n                                               error:&error];\nI then send the data to server php but I do not know how to decrypt. Help me please!!\n. I already use https://github.com/RNCryptor/RNCryptor-php. This is my code xcode:\nNSData toPHPData = [textfield.text dataUsingEncoding:NSUTF8StringEncoding];\n    NSError error;\n    NSData *encryptedData = [RNEncryptor encryptData:toPHPData\n                                        withSettings:kRNCryptorAES256Settings\n                                            password:@\"myPassword\"\n                                               error:&error];\nNSDictionary * data  =\n[NSDictionary\n dictionaryWithObjectsAndKeys:\n[encryptedData base64EncodedString], @\"user\",\n nil];\nNSString *page=@\"http://server/sito/engine.php\";\n[connection postWithOptions:data SendToUrl:page field:@\"authentication\"];\nmy code php is:\nphp\nrequire_once **DIR** . '/classes/RNCRYPTOR/RNEncryptor.php';\nrequire_once **DIR** . '/classes/RNCRYPTOR/RNDecryptor.php';\n\n<p$password = \"myPassword\";\n$cryptor = new RNDecryptor();\nif ($_SERVER['HTTP_METHOD'] == 'authentication'){\n$toreturn=$_POST['user];\n$result = $cryptor->decrypt($toreturn, $password);\n    print $result;\n}\n?>\nbut the method decrypt doesn't work. It returns a string empty though $toreturn assumes the following value: AwGrDZPZWTjwlfgMQo1w4qYgjx5rS2N2nMjNsWCiFyMFsC5QO7kHgwzMb4Rh01iERhsOSelrl23AnKwLj7WbK UFNyif/cRyLa.\n. Hi curtisdf and rnapier !! I thank you for your time!!\nmy problem is the following: when I decrypt in php string passed from the client ios, sometimes, it is decrypted and sometimes no. I store the returned value into database to check if it is null.\nThis is my code IOS:\n- (IBAction)button:(id)sender {\n          /encryption string/\n      NSData toPHPData = [@\"Hello!!\" dataUsingEncoding:NSUTF8StringEncoding];\n      NSError error;\n      NSData encryptedData = [RNEncryptor encryptData:toPHPData\n                                          withSettings:kRNCryptorAES256Settings\n                                              password:@\"myPassword\"\n                                                 error:&error];\n      NSString value=[encryptedData base64EncodedStringWithOptions:NSUTF8StringEncoding];\n```\n  / setting Connection /\n  NSURL URL = [NSURL URLWithString:@\"http://server/sito/engine.php\"];\n   NSMutableURLRequest  Request = [NSMutableURLRequest requestWithURL:URL cachePolicy:NSURLRequestUseProtocolCachePolicy timeoutInterval:10];\n  [Request setHTTPMethod:@\"POST\"];\n  [Request setHTTPBody:[[NSString stringWithFormat:@\"value=%@\",value] dataUsingEncoding:NSUTF8StringEncoding]];\nNSURLResponse response = nil;\n  NSError error1 = nil;\nNSData *receivedData = [NSURLConnection sendSynchronousRequest:Request\n                                               returningResponse:&response\n                                                           error:&error1];\n  ```\n}\nThis is my code PHP:\n<?php\nerror_reporting(E_ALL);\nini_set('display_errors', 'On');\nrequire_once DIR . '/classes/RNCRYPTOR/RNEncryptor.php';\nrequire_once DIR . '/classes/RNCRYPTOR/RNDecryptor.php';\nrequire ('classes/functions.php');\n$database=_obj('database');\n$cryptor = new RNDecryptor();\n$encrypted_value=$_POST['value'];\n$decrypted_value = $cryptor->decrypt($encrypted_value, 'myPassword');\n/* insert value into database */\n$insert=array('utente'=>$decrypted_value);\n$database->insert('utente',$insert); \n?>\n. in fact the values \u200b\u200bare different. How can I solve this situation?\n. this is the encrypted string ios side (client):\nAwHSIHIAdxk6pWeMCw/dt2p5YkY34qcsRrIF+t5eN6UWasyJ8moM7IrTqTwAvveohk6qQVEDUUtgUGPQY6FsQ1dnrIrV+/xZqSDLyTgPVIw3BQ==\nthis is the encrypted string php side (server):\nAwHSIHIAdxk6pWeMCw/dt2p5YkY34qcsRrIF t5eN6UWasyJ8moM7IrTqTwAvveohk6qQVEDUUtgUGPQY6FsQ1dnrIrV /xZqSDL\n. thank you very much. Now I try to follow your recommendation!!\n. Hi @curtisdf !! I noticed that the string passed to the server php is the same but with an additional piece in IOS side. For example:\nIOS: \nAwGUYwWgJ14uPRDbvBEBZl+LK3Oqd5j9uRbJwgbPsOCj0eopz9Qxep7nzgPneFOBu5xW4q/1yDJV/V1vBB/fGxrZoahzTRXzg/BxOJN7FguOiw==\nPHP:\nAwGUYwWgJ14uPRDbvBEBZl LK3Oqd5j9uRbJwgbPsOCj0eopz9Qxep7nzgPneFOBu5xW4q/1yDJV/V1vBB/fGxrZoahzTRXzg/Bx \nThe additional piece in this case is OJN7FguOiw==\nWhat is this piece?\n. ",
    "startupthekid": "Since this issue is still open, I'd like to add my voice to it as well (although I'm using NodeJS not PHP).\nI believe the issue everyone else is talking about is when we use RNEncryptor to encrypt some NSString instance to an NSData instance and then subsequently send that data object to the server, what's sent to the server is NOT the encrypted string but rather the description method output of the NSData class.\nFor example, if I send my encrypted data to my backend and print out the data, I get:\n<03011103 89d76a9d 108982f8 bca3deb3 64b64592 9a2db47b 89fbcd43 89474672 308d9b05 b5af0b71 aa17d166 0b43279e 8fefc58a 43868e4d beb5d03b cbb79f28 ea3c411c f53332b8 076f63f7 a7f6b444 032e>\nwhich is the same output I get in Xcode by calling [data description]; This is not the behavior I expected, I expected the server to receive the encrypted string itself, although it does make sense as to why it happens. All the networking libraries know is they have to send over the data and for some reason they decide to send the description output of NSData. Having a method on RNEncryptor that returns an encrypted string, not a data object, would be massively helpful. For now, base64 encoding on client side and sending it over to the server will have to do. \n. Right yeah it makes complete sense as to why any server side implementation receives that output. And I misspoke, when I say encrypted string I mean some encoding representation of the encrypted NSData object, and base64 was exactly what I was looking for. \nLove this library by the way, it's a life saver.\n. ",
    "long-nguyen": "encryptedString =   [encryptedData base64EncodedStringWithOptions:0]; is working OK\n. ",
    "skeleton1231": "Same situations, any one can help?\nThere is not any problem in local, but it runs so slow on server\n. I just fix problem on my server \nFind _generateIv function in RNEncryptor.php:\n    /*  if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {\n            $randomSource = MCRYPT_RAND;\n        } else {\n            $randomSource = MCRYPT_DEV_RANDOM;\n        } */\n        $randomSource = MCRYPT_RAND;\nmaybe problem solved\n. ",
    "abhibeckert": "Maybe we should spit out a warning \"random number generation is slow because your server doesn't have enough entropy\" and then instruct people to fix their server so it has more entropy? I assume that's possible?\n. ",
    "guidev": "How can I get more entropy? I'm working with Amazon's EC2.\nThank You.\n\nMaybe we should spit out a warning \"random number generation is slow because your server doesn't have enough entropy\" and then instruct people to fix their server so it has more entropy? I assume that's possible?\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "heikowitte": "Duplicate of: https://github.com/rnapier/RNCryptor/issues/78\n. ",
    "mxsasha": "By the way, I also confirmed that [NSString isEqualToString:] is also not constant time.\n. ",
    "quynhdh": "thanks rnapier, I switch to JNCryptor for java.\n. ",
    "timestretch": "This looks good to me. Leaving the 'ruby_' prefix in this case may help to differentiate it from the main 'RNCryptor' objective-c repo if it was split out. Rob do you want to hold that repo under rnapier/ruby_rncryptor ?  If not, I can hold it under my account.\n. It wasn't using ruby's Random. It was using OpenSSL::Random.random_bytes() -- Note the include OpenSSL. \nI believe SecureRandom.random_bytes uses OpenSSL::Random.random_bytes behind the scenes. SecureRandom also adds the current time and pid to create more entropy in case the program forks and gets a new pid so this change seems ok.\n. No good reason. It makes it easier to Google, but it is cumbersome. I'll drop the ruby_ prefix going forward.\n. ",
    "klaaspieter": "@rnapier That was fast. Nice!\n. ",
    "oliverwoolgar": "Hi Rob,\nWe are including RNCryptor as a subproject in a workspace. Yes iOS.\nOliver.\nOn Tue, Jan 14, 2014 at 4:37 PM, Rob Napier notifications@github.comwrote:\n\nCan you describe the process you're using to include RNCryptor? Is this\nthrough CocoaPods or a subproject or some other way? I assume this is only\non iOS.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/RNCryptor/RNCryptor/issues/109#issuecomment-32323824\n.\n. \n",
    "sbhklr": "Thank you Rob for pointing this out. I had indeed forgotten to set the settings parameter for the decryption method.\n. ",
    "kkazuo": "I'm not the author, but am an audience.\n-initWithData:encoding: may be return nil when encode error.\nDid you consider using NSISOLatin1StringEncoding. Instead of NSUTF8StringEncoding.\n. ",
    "cflorion": "That was actually a mistake on our side. The version of ruby_rncryptor.rb we had on our server wasn't compatible with v3. Sorry about that... Thank you very much for your quick reply ;)\n. ",
    "JaviSoto": "Mmmmm tests failed but I can't see how it's related to my change?\n. I've been trying to look it up and I can't find it. I just remember that there's a particular scenario where Xcode won't build the right arquitecture and you'll get a linker error. ReactiveCocoa for example has this set to NO for all builds (not just DEBUG)\nI have RNCryptor added as a subproject.\n. Example: https://github.com/CocoaPods/CocoaPods/issues/1400\n. This may only be the case when building an app on an iPhone 5S that isn't arm64-ready.\n. I agree. Let's close this issue cause I can't reproduce the failure either on my side. If it comes up somebody else will report it :) So far it has worked for everyone. I'm just curious why the guys at Github have that setting disabled even on release builds.\n. ",
    "BackSeatGreg": "With other SHA256 encryptors. This header is problematic.\nSent using CloudMagic \nOn jeu., mai 22, 2014 at 3:55 PM, Rob Napier notifications@github.com wrote:Compatibility with what?\nOn Thu, May 22, 2014 at 9:37 AM, BackSeatGreg notifications@github.comwrote:\n\nFor compatibility RNCryptor should allow to encrypt without adding a\nheader and decrypt file without header.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/RNCryptor/RNCryptor/issues/123\n.\n\n\nRob Napier -- Software and Security Consulting\nCocoaphony blog -- http://robnapier.net/blog\niOS Programming Pushing the Limits -- http://robnapier.net/book\n\u2014Reply to this email directly or view it on GitHub.\n. I'm trying to cross en/decrypt between Obj-c and .net\nHave to check headers ...\nDate: Thu, 22 May 2014 08:39:07 -0700\nFrom: notifications@github.com\nTo: RNCryptor@noreply.github.com\nCC: greg@objectshaper.com\nSubject: Re: [RNCryptor] Allow \"void header\" (#123)\n(There is no such thing as a SHA256 encryptor. I assume you mean AES-256.)\nThe header holds all the metadata required to decrypt the ciphertext;\nspecifically the salts and IV. (There is also a required HMAC at the end.)\nHow is your other encryptor transferring that metadata? If it uses AES-CBC\nwith passwords, and doesn't have salts, a random IV, and an HMAC, then the\nencryption format is highly insecure.\n\u200b\nNote that there is no widely-used standard format for transmitting block\ncypher metadata. Every implementation has its own format. The RNCryptor v3\nformat is defined here:\nhttps://github.com/RNCryptor/RNCryptor-Spec/blob/master/RNCryptor-Spec-v3.md\nIt has implementations on a variety of platforms.\nWhat specific encryptor are you trying to interoperate with?\n\u2014\nReply to this email directly or view it on GitHub.                  \n. ",
    "yf225": "Thanks so much for the explanation. Now I completely understand the reason\nbehind the PBKDF2 algorithm.\nAnd thanks for the awesome library! Really a life-saver for me as someone\nwho doesn't have a deep understanding of cryptography but still want to use\nit in iOS applications. Please keep up with the great work! :D\nOn Friday, June 6, 2014, Rob Napier notifications@github.com wrote:\n\nHumans are terrible at generating randomness. Really, really terrible. And\nto maintain the 256-bit keyspace, you'd need to pick a totally random 39\ncharacter password from every easily-typed character on the keyboard (about\n96 different symbols for most). Humans can't do this, so we don't ask them\nto.\nThe point of a KDF (such as PBKDF2) is two-fold:\n- Its output must be computationally indistinguishable from random.\n- It must be time consuming to compute on all available hardware.\nThe first point means that an attacker cannot use knowledge of the\nalgorithm to limit her keyspace search. If you consider every possible salt\n(64 bits) plus the randomness of a human selected password (let's be\ngenerous and say another 64 bits, which is a wild overstatement of password\nentropy), that's only 128 bits of key. That's insignificant compared to a\n256-bit keyspace (by a factor of 10^38). So in theory, the attacker only\nneeds to search that tiny (in comparison) keyspace. But a good KDF promises\nthat there is no way for her to figure out which part of the keyspace\nis actually used faster than performing every possible hash. So the\nattacker is left with either brute-forcing the full AES keyspace, or trying\nto brute force the KDF. Brute-forcing the full AES-256 keyspace is\nimpractical (I can go into the numbers, but I assume you already know this\npart).\nThe second feature, that it must be slow on all available hardware, means\nthat brute forcing the KDF is also impractical. AES itself is very fast to\ncompute, and is designed to be hardware optimized. It relies on the fact\nthat its key is random over an enormous keyspace, so you guessing billions\nof different keys is going to get you nowhere. KDFs face the opposite\nissue. Their input (human passwords) are out of a tiny space and a few\nbillion guesses will absolutely be enough to crack many of them. So I need\neach test to be really expensive. The differences we're talking about are\nmillions of tests per second for AES versus 12 per second for PKBDF2 on the\nsame hardware. And if I want to make PBKDF2 even slower, I can just\nincrease the iteration count (many crypto algorithms do not scale so\neasily).\nSo yes, an attacker can try to brute-force the PBKDF2 generated key, but\nthey are going to have to spend a lot of computing power to achieve it, and\nlike AES-256 itself, this rapidly becomes more computing power than is\nactually available.\nThere's nothing that stops them from just guessing your password of\ncourse. If it's \"password\" and they guess that on the first try, they'll\nstill get in. But if you choose a strong password, a KDF means they can't\nbrute force it. Just using the password directly as a key can definitely be\nbrute forced.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/RNCryptor/RNCryptor/issues/124#issuecomment-45383084.\n\n\nYanbin Feng\nCornell University '15\nB.S. Computer Science\nyf225@cornell.edu\n916.420.7019\n. ",
    "Hackmodford": "I can confirm this.\nChanging line 80 to this removes warning.\nkey = [NSMutableData dataWithBytes:md length:sizeof(md)];\n. ",
    "carllindberg": "Sure thing.  You may want to fix it in the text of the spec as well; didn't realize you had the code pasted there.\n. You may want to make that internal call dispatch_async().  I.e.:\ndispatch_async(dispatch_get_main_queue(), readStreamBlock);\nI think that allows the memory to be collected as it goes, at least in my quick test.\n. The other way would be to put in @autoreleasepool { ... } around the content in the dispatch_async() block in RNEncryptor's addData: method.  It seems like with the above pattern, any objects autoreleased in there do not get released until the end of the process.  But if the call to readStreamBlock() in the sample code above is made async (as the comment suggests it might be good to do), then the system autorelease pools get flushed more correctly.\n. From the looks of it, I think you want:\nNSData* encryptedData = [[NSData alloc] initWithBase64EncodedString:@\"AwH3lRq1dHsdyjsWzYmBpIVQSHkdjvGbOXLbCW1r240ZFIgFXgCj\" options:0]\ninstead of\nNSData* encryptedData = [@\"AwH3lRq1dHsdyjsWzYmBpIVQSHkdjvGbOXLbCW1r240ZFIgFXgCj\" dataUsingEncoding:NSUTF8StringEncoding];\nThe string looks to be base64-encoded data, and is not raw encoded bytes, which is what you need to pass to RNDecryptor.\n. According to #103 it was supposed to move to a separate project, but I don't see it with a quick glance.\n. That creates two NSData instances which is not necessary.  Just change to either:\nkey = [NSMutableData dataWithBytes:md length:sizeof(md)]];\nor\nreturn [NSData dataWithBytes:md length:sizeof(md)];\n. @bassrock There must be a better solution than to use horrible magic constants everywhere in the code, and lose type-checking for enums.  CommonCrypto is a system framework and should be importable.  How does importing  work?\n. So if you have a public header, you can't import any, say, Foundation or UIKit headers directly?   That seems like a rather silly restriction from Apple, counter to normal C usage.  At some point, there will be dependent third-party frameworks (i.e. ones which use constants, type names, or superclasses from another framework).  That is usually the type of thing which CocoaPods is supposed to make easy.\nDoes removing the imports (and just adding them to the .pch) work?  That would require all consumers to add the same imports to their .pch files (or at least right before they import RNCryptor wherever that is).  If that works, maybe there is a way in the precompile environment to figure out that a modular framework is being built, and to put the imports inside of some #if !BUILDING_FRAMEWORK checks or something like that.  But to me, using the named constants and types from CommonCrypto in the code should be an absolute must.\nOr is it only a problem when importing individual headers inside the external frameworks, as opposed to the catch-all top-level header?  If that is the case, does changing the imports to  work?\n. I edited my question above... does changing to  work (as opposed to the two individual imports)?  Or is CommonCrypto not a module at all?\n. The errors sounds like importing UIKit/UIKit.h is OK because that's a module header, though UIKit/UIView.h individually might be a problem.   But if CommonCrypto is not a module (rather just a C library) then that sounds like an issue.\nIf CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES doesn't work, another short-term solution might be to do something like\n```\nif !BUILDING_MODULE\nimport \nelif !defined(CC_COMMON_CRYPTOR) // it wasn't imported some other way yet\n// copy definitions from CommonCrypto since we can't import directly\nenum {\n    kCCEncrypt = 0, \n    kCCDecrypt,   \n};\ntypedef uint32_t CCOperation;\n(and so on)\nendif\n```\nThen figure out some way to determine BUILDING_MODULE.  Could be a custom define in the framework target maybe.  That way the messiness is confined to one header, not every usage of the constants in the code.\n. I guess the kRNCryptorAES256Settings constant could be declared extern const in the header (instead of static const), then defined in the .m file instead.  That would limit the extra goop needed to a handful of typedefs.  It is still beneficial to have the type names used in the structure -- it's part of the documentation of allowed values (not that anyone should be using a different structure in that case).\nSeems odd that system headers can be included (it gets the definition of size_t somehow) but not CommonCrypto.  This may just be some growing pain issues with Swift and frameworks which Apple will find better solutions to eventually.\n. It looks like that last commit undid the commit from #152.\n. Hm, without this, this method would return YES if self was an empty NSData and otherData was nil.\n. This is not a bug -- purely a stylistic question.\n. _RNConsumeToIndex: will never return nil, so this isn't needed.  More of a matter of how defensive one wants to be with a known private method.\n. Looks like this is never called with nil, though it would crash if it was.  The preamble length is checked in the calling method, with different error handling.\n. ",
    "xianwen": "I also tried to enwrap the block inside an autoreleasepool, but it doesn't work either.\nThe following is the code I used, mostly the same as the Async and Streams section of ReadMe:\n```\n- (void) encryptFileAtPath: (NSString )inputFilePath toPath: (NSString )encryptedFilePath withKey: (NSString *)key\n{\n// Make sure that this number is larger than the header + 1 block.\n// 33+16 bytes = 49 bytes. So it shouldn't be a problem.\nint blockSize = 32 * 1024;\nNSInputStream inputStream = [NSInputStream inputStreamWithFileAtPath: inputFilePath];\nNSOutputStream encryptedStream = [NSOutputStream outputStreamToFileAtPath: encryptedFilePath append:NO];\n[inputStream open];\n[encryptedStream open];\n// We don't need to keep making new NSData objects. We can just use one repeatedly.\n__block NSMutableData data = [NSMutableData dataWithLength:blockSize];\n__block RNEncryptor encryptor = nil;\ndispatch_block_t readStreamBlock = ^{\n    @autoreleasepool {\n        [data setLength:blockSize];\n        NSInteger bytesRead = [inputStream read:[data mutableBytes] maxLength:blockSize];\n        if (bytesRead < 0) {\n            // Throw an error\n        }\n        else if (bytesRead == 0) {\n            [encryptor finish];\n        }\n        else {\n            [data setLength:bytesRead];\n            [encryptor addData:data];\n            NSLog(@\"Sent %ld bytes to encryptor\", (unsigned long)bytesRead);\n        }\n    }\n};\nencryptor = [[RNEncryptor alloc] initWithSettings:kRNCryptorAES256Settings\n                                         password:key\n                                          handler:^(RNCryptor cryptor, NSData data) {\n                                              @autoreleasepool {\n                                                  NSLog(@\"Encryptor recevied %ld bytes\", (unsigned long)data.length);\n                                                  [encryptedStream write:data.bytes maxLength:data.length];\n                                                  if (cryptor.isFinished) {\n                                                      [encryptedStream close];\n                                                      // call my delegate that I'm finished with decrypting\n                                                  }\n                                                  else {\n                                                      // Might want to put this in a dispatch_async(), but I don't think you need it.\n                                                      readStreamBlock();\n                                                  }\n                                              }\n                                          }];\n// Read the first block to kick things off\nreadStreamBlock();\n}\n```\n. ",
    "iPermanent": "I think you need to use NSFileHandler to encrypt the file data by pieces, you can encrypt the piece data by [NSFileHandler seekTo...] to get pieces of data, and encrypt them, then you can append it to a file, also you can try NSOutputStream to write file. If you get the whole data, it will out of memory with no doubt. \n. ",
    "fagerbua": "For anyone coming in here via Google; I solved this problem by applying the semaphore solution suggested on Stack Overflow:\nhttps://stackoverflow.com/questions/14481605/dispatch-queues-and-asynchronous-rncryptor/14571838#14571838\nUsing code like that my iPad mini successfully encrypted a 2 GB file in one minute, with no memory issues.. ",
    "imclean": "Because it should be this:\n-(NSString_)decrpytRNString:(NSString_)encryptedString{\n    NSData  b64DecData = [[NSData alloc] initWithBase64EncodedString:encryptedString options:0];\n    NSError error = nil;\n    NSData decryptedData = [RNDecryptor decryptData:b64DecData withPassword:kPasswordForEncryption error:&error];\n    NSString decryptedStr = [[NSString alloc] initWithData:decryptedData encoding:NSUTF8StringEncoding];\n    return decryptedStr;\n}\n-(NSString_)encryptedRNPassword:(NSString_)encryptedString{\n    NSData data = [encryptedString dataUsingEncoding:NSUTF8StringEncoding];\n    NSError error = nil;\n    NSData encryptedData = [RNEncryptor encryptData:data withSettings:kRNCryptorAES256Settings password:kPasswordForEncryption error:&error];\n    NSString bas64String = [encryptedData base64EncodedStringWithOptions:0];\n    return bas64String;\n}\n. ",
    "valentinlietz": "Nice function but you can't decode it with PHP :/\n. ",
    "stevenschobert": "There's now a Go version at github.com/RNCryptor/RNCryptor-go :tada: \nIts a first release, so I'd love to hear any feedback you might have.\n. ",
    "data85": "unknown header\n. ",
    "priteshshah1983": "I don't see them either. Xcode 6 shows a warning with the RNCryptor-2.2 release in RNOpenSSLCryptor.h in the line below:\nkey = [NSData dataWithBytes:md length:sizeof(md)];\nBut, I could not find the file at all.\n. ",
    "an0": "@rnapier I see your point of dropping OpenSSL support. But it is possible to invoke \"openssl enc\" in some way so that the result can be decrypted by the latest RNDecryptor? Thanks.\n. I see. Thanks. I'm gonna write a CLI wrapper of https://github.com/RNCryptor/RNCryptor-python and use it instead of openssl to encrypt data. \n. ",
    "traximus": "thanks for your reply, and sorry for such a stupid question.\nbut now I need encrypt the content and generate the same result like Android, thus the server can recognize my encrypted data....I did a lot search, but did not help; What I mean is that \"does the kRNCryptorAES256Settings made the result different from Android Code? \"\nI just hope can generate the same content like the java code above. Any help will be great appreciate.\n. @rnapier  thx very much.\n. ",
    "DamienSirkis": "Found the same issue and fixed it locally. Unfortunately this file was removed in commits after the 2.2 tag so there is no easy way to generate a pull request.\nAny way a new tag could be made and updated in the pod spec so that we can grab the latest version?\n. I guess this isn't really maintained anymore?\n. Tagging a branch could work but it would still be good to tag the latest version too so that it's also accessible via cocoapods.\n. ",
    "levigroker": "+1 for continuing CocoaPod support (and fixing this warning).\n. ",
    "certusstone": "Thank you for the tip about the encoding. I found that when I entered the Base64 directly to the PHP, without the POST, it worked perfectly. How can I fix that?\n. ",
    "chesstrian": "@berrste Check what are you receiving with PHP (just print the b64string you're receiving), maybe you need to urlencode the b64string before sending to PHP.\n. ",
    "AndyIbanez": "I stupidly forgot that Swift cannot deal with C Structs, which is what kRNCryptorAES256Settings is. This issue has nothing to do with the architecture of the devices.\nSo to go around that, I created my own method in RNEcryptor with the sole reason to abstract the need of the C struct.\n+ (NSData *)faireseEncryptData:(NSData *)data password:(NSString *)password error:(NSError **)error {\n    return [RNEncryptor encryptData:data withSettings:kRNCryptorAES256Settings password:password error:error];\n}\nI am not sure how much of a good or bad idea this is, but this makes my project compilable, as I can call my method via Swift without needing to reference any C-only code:\nlet encrypted = RNEncryptor.faireseEncryptData(serializable, password: password, error: nil)\n. ",
    "jasper-ch-chan": "Hi Rob,\nThanks for responding to my question. So I've realized that in my example, in order to successfully decrypt the block, I need to grab a size of 515k bytes because when I encrypted my 512k block, the RNCryptor returns a 515k byte block (these numbers were arbitrarily assigned). \nMy question is, what is the best way so I can always grab the right block size to decrypt successfully? Currently, I am implementing a method to add 4 bytes of NSData as a header for each block I write to the device to hold the number of bytes I need to read (ie. 515k bytes) in order to successfully decrypt the block. The entire encrypted file is on the device and I am trying to write the decrypted version back onto the device at this point in time.\n. Thank you very much for your quick reply! I was just wondering if there was a better/easier way to handle this. Thanks again!\n. Hello Rob,\nThank you very much for your swift reply. The reason why this case is a concern for us because while the app was encrypting a file, the app crashed. When the app was restarted, the temporary folder was deleted and the file left behind (assumed to be encrypted) is left unencrypted.\nSo are you suggesting that I check the first two bytes of the file for 0x0300 or 0x0301 such that if the first two bytes correspond to either of them, then we know for a fact that the file is encrypted?\n. Thank you very much for your information. I will review \"Asynchronous usage\" section again. Thank you once again!\n. ",
    "bbsan2k": "Currently Experiencing the same Issues with CocoaPods 0.3.6.rc.1\nIs there any workaround?\n. ",
    "haaakon": "Having same problem. Anyone found out how to fix it?\n. ",
    "trondkr": "I am having the same issue and hoping to find a fix\n. I managed to get this to work by changing \"CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES\" to Yes in \"Build Settings\". I found this solution on SO: http://stackoverflow.com/questions/24103169/swift-compiler-error-non-modular-header-inside-framework-module. What I don't know is if there is a catch to allowing this non modular framework modules.\n. ",
    "bassrock": "Any maintainers have an idea? I would use CryptoSwift instead, but at the moment it does not have the same speed.\n. @rnapier so the issue is that you can not include CommonCryptor in the Header file. I just created a pull request that should fix this by using the hard values instead of the constants.\n. It is importable. However you can not import it into a header file that will be public. So you have to at least make the base file the end values but could still pas it enums. Open to any other solutions but this is all I could make work.\n. So thats the catch. You can with Swift, but not with an iOS Framework that is written with Obj-C. The best solution would be to rewrite in Swift and then this would work.\nAs far as I could tell the modifications that I made were the only \"easy\" way for this to work, without having to use CocoaPods.\n. Yea using the constants defineltly should be a priority, I just couldn't see how to do it. And when importing the catchall header it was the same issue because it ultimately ends up importing the other ones.\n. Well that is sort of the case I believe I only changed the constants in the header files. It still imports them and uses them in the .m files.\n. Any help any of us can be with the swift3.0? Need to update one of my apps that use RNCryptor. Or does the GM fix this?\n. Using this in my current pod spec and app for a while actually. Works great!\n. ",
    "lolgear": "is this issue fixed?\nI have this issue at version 2.2\nUsing RNCryptor (2.2)\n. @rnapier \nYes\nInformation: I've implemented my security kit that based on apple's CommonCryptor.\n```\n// AIKSecurityKit.m\nimport \"AIKSecurityKit.h\"\nimport \nimport \nimport \nimport \n```\nI have these lines:\nwarnings:\numbrella header for module 'RNCryptor' does not include header 'RNOpenSSLCryptor.h'\numbrella header for module 'RNCryptor' does not include header 'RNOpenSSLEncryptor.h'\numbrella header for module 'RNCryptor' does not include header 'RNOpenSSLCryptor.h'\nerrors: (nearly nine or more, one error for each symbol from CommonCryptor )\nMyProject/Security/SecurityKit/AIKSecurityKit.m:42:12: error: reference to 'kCCHmacAlgSHA256' is ambiguous\n    CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);\n           ^\nIn module 'RNCryptor' imported from \nMyProject/Security/SecurityKit/AIKSecurityKit.m:13:\n/Users/mac/Library/Developer/Xcode/DerivedData/SmartAirkey-himplrkcxiqdkzfpohykmuyhoqcd/Build/Products/Debug-iphonesimulator/RNCryptor.framework/Headers/RNCryptor+Swift.h:134:5: note: candidate found by name lookup is '::kCCHmacAlgSHA256'\n    kCCHmacAlgSHA256,\n    ^\nIn file included from \nMyProject//Security/SecurityKit/AIKSecurityKit.m:11:\n/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator8.4.sdk/usr/include/CommonCrypto/CommonHMAC.h:54:5: note: candidate found by name lookup is '::kCCHmacAlgSHA256'\n    kCCHmacAlgSHA256,\n. @rnapier, well, you are right\nI didn't make frameworks, AIKSecurityKit is a part of my app.\nIt has AIKSecurityKit which contains security related code like encoding/decoding ( SHA128/SHA256 and HMac )\nI try to import RNCryptor into this kit and use it as a replacement\nIt works great for ObjC, but Swift migration/mix causes problems\nI made clean install of pods and made build. \nWarnings disappeared.\nAlso, this import is a part of AIKSecurityKit.m\n```\n// AIKSecurityKit.m\nimport \"AIKSecurityKit.h\"\nimport \nimport \nimport \nimport \n```\n. ",
    "Nathan187": "Does anyone have a clean / concise method of getting RNCryptor to work within a Framework?  I'm using Cocoapods and I'm using frameworks.  Just setting the  CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES to Yes is not solving the problem.  I've been racking my head against the wall for a few hours on this.  \n\n. ",
    "jazeelkt": "Thanks for your reply.\nActually I was using encryption and decryption in two different projects. I encrypted a set of files in one xcode project and saved them to a location. Then I copied those encrypted files to another xcode project and tried to decrypt. The password used for decryption is same as that of encryption.\nAlso the decryption was successful when I ran the same project multiple times, but this occurs in a random fashion. \n. ",
    "aperechnev": "I have the similar problem in my iOS application. I had a solution for this problem a few month ago, but I forgot what I did to solve it :(.\nHere is my code which encrypts and decrypts data, but it can't decrypt data just in a week after encryption:\n```\n- (NSString )encryptString:(NSString )source {\n  NSString * password = [AccountManager sharedInstance].password;\nNSData * sourceData = [source dataUsingEncoding:NSUTF8StringEncoding];\nNSData * encryptedData = [RNEncryptor encryptData:sourceData\n                                       withSettings:kRNCryptorAES256Settings\n                                           password:password\n                                              error:nil];\nNSString * encryptedString = [encryptedData base64EncodedStringWithOptions:0];\nreturn encryptedString;\n}\n\n(NSString )decryptString:(NSString )source {\n  NSString * password = [AccountManager sharedInstance].password;\n\nNSData * sourceData = [[NSData alloc] initWithBase64EncodedString:source options:0];\nNSData * decryptedData = [RNDecryptor decryptData:sourceData\n                                       withSettings:kRNCryptorAES256Settings\n                                           password:password\n                                              error:nil];\nNSString * decryptedString = [[NSString alloc] initWithData:decryptedData\n                                                     encoding:NSUTF8StringEncoding];\n  return decryptedString;\n}\n```\n. ",
    "javalnanda": "@rnapier I have situation where I am using async encrypt for encrypting video file while its downloaded and writing it to file on device. Now i have to decrypt it while its being played using AVPlayer and I am using shouldWaitForLoadingOfRequestedResource for decrypting the requested data length and returning that data. Now I can't figure out way to properly decrypt chunks of data when it was encrypted using async encryption. \n. ",
    "lemarian": "This is my code . I am getting rncryptor error 2 which means unknown header passed\nclass func decrypt(message: String) -> String {\n        print(\"the message to decrypt is (message)\")\n```\n  let encodedData : NSData = NSData(base64EncodedString: message, options: NSDataBase64DecodingOptions(rawValue: 0))!\n    let data = message.dataUsingEncoding(NSUTF8StringEncoding)\nlet data1: NSData = (encodedData as NSString).dataUsingEncoding(NSUTF8StringEncoding)!\nprint(\"data 1 is \\(data1)\")\n\n\ndo {\n    print(\"encoded data :\\(encodedData)\")\n\n    let decData : NSData = try RNCryptor.decryptData(data1, password: password)\n    print(\"The decrypted data is now now \\(decData)\")\n\n    let tokenString: String  =   NSString(data: decData, encoding: NSUTF8StringEncoding)! as String\n    return tokenString\n\n}\ncatch let error as NSError {\n    print(\"The error description is \\(error.localizedDescription)\")\n    print(\"The main error is \\(error.description)\")\n    debugPrint(\"The main main main eror :\\(error)\")\n\n    return \"\"\n}\n\n}\n```\n. This is my code and I get error 1 \nclass func decrypt(message: String) -> String {\n        print(\"the message to decrypt is (message)\")\n        let data1: NSData = NSData(base64EncodedString: message, options: NSDataBase64DecodingOptions(rawValue: 0))!\n```\n    do {\n    let decData : NSData = try RNCryptor.decryptData(data1, password: password)\n    print(\"The decrypted data is now now \\(decData)\")\n\n    let tokenString: String  = NSString(data: decData, encoding: NSUTF8StringEncoding)! as String\n    return tokenString\n\n}\ncatch let error as NSError {\n    print(\"The error description is \\(error.localizedDescription)\")\n    print(\"The main error is \\(error.description)\")\n    debugPrint(\"The main main main eror :\\(error)\")\n\n    return \"\"\n}\n\n}\n```\n. ",
    "ad1269": "Oh! I didn't realize that I forgot to convert my data to a base64 encoded string before sending it to the server! I added this line: \nlet eStr = eData.base64EncodedStringWithOptions(NSDataBase64EncodingOptions(0))\nand it now works. Thank you!\n. ",
    "hadwanihardik": "Hello rob,\nEncryption is currently done with encryption mechanism is AES_CBC_PKCS5 with 128 bit Key \"Key\" and Dynamic initialization vector 00000000000000000000000000000000.\ncan you suggest me how i can use this algorithm to decrypt my file  for above given encryption specs.\n. ",
    "ernestopino": "Hello @rnapier... I need some help.\nI need to encrypt with AES 256 a string with the following specifications:\n- Key\n- Vector: Vector empty, the 16 positions to 0.\n- Format: CBC.\nHow I can set RNEncryptor to get this?\nThanks in advance,\n. Thank you very much for the speed of response and forgive my poor knowledge on the subject.\nAs you commented earlier, I am using encryptData:withSettings:encryptionKey:HMACKey:IV:error: to get a personalized encryption, the vulnerability that entails (IV = NULL or zeroed bytes). The problem is that I do not know what HMACKey use.\n```\nNSString valueString = @\"Asdfg1234\";\nNSString keyString = @\"1234\";\nNSData valueData = [value dataUsingEncoding:NSUTF8StringEncoding];\nNSData keyData = [key dataUsingEncoding:NSUTF8StringEncoding];\nNSMutableData iv = [NSMutableData dataWithLength:16];\nNSError error;\nNSData *encryptedData = [RNEncryptor encryptData:valueData\n                                    withSettings:kRNCryptorAES256Settings\n                                   encryptionKey:keyData\n                                         HMACKey: ???\n                                              IV:iv\n                                           error:&error];\n```\n. ",
    "billychasen": "Cool, thanks so much for such an easy lib, it's working great.\n. ",
    "balos1": "That was indeed the issue. Thanks.\n. ",
    "evan0322": "Hi Rob,\nThank you for your reply. I got it. But just a little curious. In the documentation of RDCryptor it is said \n\nThis generates an NSData including a header, encryption salt, HMAC salt, IV, ciphertext, and HMAC. >To decrypt this bundle:\nNSData *decryptedData = [RNDecryptor decryptData:encryptedData\n                                   withPassword:aPassword\n                                          error:&error];\nNote that RNDecryptor does not require settings. These are read from the header.\n\nSo from what you said I believe the header is not applied to 3DES encryption ?\n. Cool. Thanks for sorting this out. I will close this for now.\n. ",
    "sust86": "Thanks your for quick response Rob!\nLet's say I have a pretty large encrypted video file (500 - 1000MB). Now I don't want to encrypt the whole file before being able to play it. I would like to start playing right away. Especially on iPhones, encrypting the whole file might take a while.\nAlso I would like to be able to do forward / rewind seeking when streaming my video later on. \nI did some research and found a short article how to do this on android: http://libeasy.alwaysdata.net/network/#server\nThey suggest to use stream cipher for video encryption. And for AES it's required to use CTR - NoPadding in order to get random access to any location in the stream.\nI also read your comments on stackoverflow about AES - CTR security concerns:\nhttp://stackoverflow.com/questions/24290338/encrypt-and-decrypt-a-random-nsstring-with-aes128-ctr-in-ios-with-a-given-key\n\"An IV collision immediately leaks information about the plaintext in both packets. For this reason, it is inappropriate to use this mode of operation with static keys. Extraordinary measures would be needed to prevent reuse of an IV value with the static key across power cycles. To be safe, implementations MUST use fresh keys with AES-CTR.\"\nThe app encrypts / decrypts videos files from a specific trusted source. Thus I think this scenario shouldn't concern me since it's not really possible to do such \"power cycles\" with large video files?\nCCCryptorCreateWithMode() is exactly what I'm currently trying to use. But there are many parts in your library I would love to utilize. Doing everything myself might not be the best idea since I'm by far no expert in security related things. \nI'm currently thinking forking your great work will be the best way for me to have some well built base. To get things started, do you think using your implementation with CCCryptorCreateWithMode (CTR, NoPadding) will work or are there any other changes I'll have to do? (I'm not sure if the current configuration / settings will work with CTR)\nI'm sorry because I think this is already a bit off-topic since there are no real issues with RNCryptor. It's a great library! \nThanks for your help Rob. I do really appreciate it!\n. Well, thats by far a way better and more detailed answer than I would have ever expected. Many thanks for your time!\nAnd you are right, in the end I try to protect data from my users. A well built DRM solution would be the best option I guess. This should be my goal in the long term. \n\nhttp://robnapier.net/obfuscating-cocoa\n\nI really enjoyed reading this blog post. Thanks for sharing.\n\nIf you're not at war with your users, then the best solution to this is TLS for transport and device data protection for local storage. There's no need for RNCryptor.\n\nDevice data protection would be sufficient on iOS but it's going to be hard on Mac OSX or Windows.\n\nA long stream (like video) can require tens or hundreds of millions of nonces. \nMaking sure that two packets never have the same nonce is harder than it sounds.\n\nOkay, I got it. For me the effort to correctly implement AES - CTR doesn't doesn't comply with its benefits.\n\nPersonally I'd research HLS or HTML5 video rather than trying to invent a new solution.\n\nThanks for pointing out this options. I would love to use an already working solution like HLS or HTML5 but I'm limited to some requirements where I can't use any of them.\nI think as a first \"quick\" solution I might try to implement some not highly secure AES - CTR encryption.\nI need to provide some basic protection to avoid video files being easily copied and shared. For now it doesn't have to be highly secure. It's more important to avoid poor user experience by long loading / decryption times.\nMany thanks for your help Rob!\n. ",
    "sdrapkin": "@sust86 What you need is authenticated streaming encryption (streaming AEAD). Inferno library supports streaming AEAD and fits your scenario.\n. ",
    "javal-idyllic": "@sust86 Did you implement AES-CTR for your requirement or found any other alternative? I have similar requirement to encrypt downloaded video and decrypt them runtime while they are being played where user can even seek bath and forth.\n. @rnapier Thanks for the info but as @sust86 had similar requirement based on above conversation. Wanted to know what approach he took for the same.\n. ",
    "ps-sstumpfl": "I couldn't come up with any alternative so far!\nI started building something based on Robs RNCryptor library. Basically we were modifying it to use AES-CTR in a fairly insecure and easy to implement approach. It's not yet done since I'm stuck in some other things at the moment!\n. ",
    "sweetevil": "@sust86 @ps-sstumpfl @javal-idyllic  I am in the same situation as of yours. Have any of you figured out how to achieve AES-CTR video streaming ?\nKindly share the alternative you people have used for protection to avoid video files being easily copied and shared.\n. @nishabe  Yes, I ended up using RabbitMQ encryption and decryption instead.. @walshahed Actually, I had to drop RNCryptor and did it by writing my own encryption with Rabbit Algorithm. \nProvide me details what are you exactly want to achieve maybe I can point you to right direction ?. ",
    "rsanchezsaez": "Thanks!\n. ",
    "karantza": "Just to add to this, I've noticed it in my project too. I've got warnings-as-errors turned on, so it was actually causing the build to fail. I tried a clang diangnostic pragma around my @import statement, but that doesn't seem to work like it does on #import or #include. \nThe only workaround I found was to add -Wno-nullability-completeness to my host project's Other Warning Flags section. Of course, this turns off that warning for the whole app, which is unfortunate, but it's better than nothing.\n. ",
    "codytwinton": "Showing up for me as well:\n\n. Still inaccessible via. Cocoapods. I suppose we can tap into the master branch like:\npod 'RNCryptor', :git => 'https://github.com/RNCryptor/RNCryptor.git', :branch => 'master'\nBut, that's the only way I've been able to access version 5\n. @rnapier - Thanks for the follow up! I tried running pod install using:\npod 'RNCryptor', '~> 5.0'\nThis is what I received in error logging:\n```\n[!] Unable to satisfy the following requirements:\n\nRNCryptor (~> 5.0) required by Podfile\nRNCryptor (~> 5.0) required by Podfile\n\nNone of your spec sources contain a spec satisfying the dependency: RNCryptor (~> 5.0).\nYou have either:\n * out-of-date source repos which you can update with pod repo update.\n * mistyped the name or version.\n * not added the source repo that hosts the Podspec to your Podfile.\nNote: as of CocoaPods 1.0, pod repo update does not happen on pod install by default.\n```\nWhen I run pod search RNCryptor in the terminal, this is the result:\n-> RNCryptor (4.0.0)\n   Cross-language AES Encryptor/Decryptor data format.\n   pod 'RNCryptor', '~> 4.0.0'\n   - Homepage: https://github.com/rnapier/RNCryptor\n   - Source:   https://github.com/rnapier/RNCryptor.git\n   - Versions: 4.0.0, 4.0.0-beta.1, 3.0.1, 3.0.0, 2.2, 2.1, 2.0, 1.1 [master repo]\nLooks like the most recent version that Cocoapods is recognizing is version 4.0.0\n. Finally got this resolved. Must have taken a long time to update on the Cocoapods Specs. Thanks!\n. ",
    "chadmoone": "FWIW, marking the file (or even just that line) as an audited region will prevent the warning:\nobjc\nNS_ASSUME_NONNULL_BEGIN\nstatic NSString * const RNCryptorErrorDomain = @\"RNCryptor.RNCryptorError\";\nNS_ASSUME_NONNULL_END\n. ",
    "relatedcode": "Objective-C code is over or I just missed something? Thanks!\n. Ok. Thanks!\n. ",
    "Durgaprasad-kelkar": "Also getting this issue.\nassertion failed: RNCRYPTOR BUG. PLEASE REPORT.: file /Users/durgaprasad/Developer/iosEncryption(synchronous)/iOS/insyncios/insyncios/Shared/RNCryptor.swift, line 598\n. I made a mistake while calling finalData. File was not encrypting properly. \nThanks for giving time to help me. Sorry I filed wrong bug. \nAnyway this sync library is great. Can you add async methods also.\n. ",
    "rokgregoric": "I would need to use a password .. so I would like to generate keys one time and reuse them.\nSo I would generate the salts by using:\n```\nlet encryptionKeySaltData = RNCryptor.randomDataOfLength(RNCryptor.FormatV3.saltSize)\nlet hmacKeySaltData = RNCryptor.randomDataOfLength(RNCryptor.FormatV3.saltSize)\nlet encryptionKeySalt = encryptionKeySaltData.base64EncodedStringWithOptions(NSDataBase64EncodingOptions())\nlet hmacKeySalt = hmacKeySaltData.base64EncodedStringWithOptions(NSDataBase64EncodingOptions())\n```\nand would hardcode that in the app .. later I would use them to generate my keys and initialize the encryptor and decrytor:\n```\nlet encryptionKeySaltData = NSData(base64EncodedString: encryptionKeySalt, options: NSDataBase64DecodingOptions())!\nlet hmacKeySaltData = NSData(base64EncodedString: hmacKeySalt, options: NSDataBase64DecodingOptions())!\nlet encryptionKey = RNCryptor.FormatV3.keyForPassword(password, salt: encryptionKeySaltData)\nlet hmacKey = RNCryptor.FormatV3.keyForPassword(password, salt: hmacKeySaltData)\nencryptor = RNCryptor.EncryptorV3(encryptionKey: encryptionKey, hmacKey: hmacKey)\ndecryptor = RNCryptor.DecryptorV3(encryptionKey: encryptionKey, hmacKey: hmacKey)\n```\nAm I missing something here?\n. ",
    "s6joui": "Hi! I add \n```\nimport \"RNCryptor.h\"\n```\nbut it says 'RNCryptor.h' file not found\n. ",
    "lonkly": "Issues appears using CocoaPods. Just shows unknown type never the less I did not change anything and I have #import \"RNCryptor.h\"\n. ",
    "ljonesfl": "The answer lies in these answers: http://stackoverflow.com/questions/24206732/cant-use-swift-classes-inside-objective-c\nTook me a while to get it right and it was a combination of a couple of different answers  but it works great now.\n. ",
    "maxmitch": "Why is that not in the documentation?! That could have saved me an hour... \n. Also another small thing to change in the doc:\nNSLog(@\"ERROR:%@\", error);\n. > /Frameworks/RNCryptor.framework: The timestamp service is not available.\nIt happens before it reaches my appdelegate!\n. It is a build script you are correct! Any ideas why it is happening? Now instead of it being an issue with the timestamp, it is an error with codesigning rncryptor and it tells me \"no identity found\"\n. http://stackoverflow.com/questions/34356293/error-when-code-signing-framework/34356597#34356597\n. ",
    "pablogeek": "Thanks for your quick response. I'm going to do it with this example and I will let you know. Maybe create RNCryptorFile, and you can do all of the logic of streams inside of this class. That would be good.\n. ",
    "NathanRussak": "Just discovered this issue. I had the same needs as @pablogeek, reading and writing large files using streams. @rnapier, your example above was incredibly helpful and got me up and running... but I just thought I'd let you know there are a few little mistakes in it that were holding me up.\nDecryptor Type-o\nThere is a simple copy/paste type-o in the line where you were declaring your variable, cryptor. The true and false result of your ternary operator creates an Encryptor. The false condition should be a Decryptor. Like so...\nswift\nlet cryptor: RNCryptorType = config.encrypt ?\n    RNCryptor.Encryptor(password: config.password) : RNDecryptor.Decryptor(password: config.password)\n\"Finalized\" Data Cap\nAfter you've finished reading all chunks of data from the NSStream events, it's important that the cryptor's \"final data\" is written to the output stream before it is closed. If this is not done then the resulting file will be corrupt. For example...\nswift\nlet finalData = cryptor.finalData()\nconfig.output.write(UnsafePointer(finalData.bytes), maxLength: finalData.length)\nFigured I'd post this real quick just in case it helps anyone else who attempts to accomplish the same thing as us. Thanks again @rnapier for all of your hard work!\n. ",
    "LookingSharp": "Thanks for the quick response!  I see this issue has options considered as well.\nhttps://github.com/RNCryptor/RNCryptor-Spec/issues/1\nI do wonder if the new spec isn't granular enough.  If the jump from 100,000 to 1,000,000 is too much, and if later on 1,000,000 won't be enough.  But I don't have a better plan.\n. Are you saying the timing vulnerability exists in the swift version?  Looking at the code, I see isEqualInConsistentTime is used to compare data.  Does this vulnerability exist in this version?\n. Thanks for the reply.  I initially thought I might use a password, but because the pbkdf2 iterations were fixed I switched to generating keys. Since I'm using a key to do my decryption, I don't have to pay for the pbkdf2 each time.  I just needed to change my code from caching away the RNCryptor.DecryptorV3 which is cached in decryptor above, to instead generate a new one each time (again, passing in both keys).\nI'm not sure a reset option helps you with passwords though - don't you still need to do the pbkdf2 iterations with the cipher encryption salt?\n. I see now this comes from http://www.opensource.apple.com/source/CommonCrypto/\nthis can be closed.\n. ",
    "paragonie-scott": "\nAre you saying the timing vulnerability exists in the swift version?\n\nNo, I thought this was the main repo for the entire project.\n\nGitHub doesn't have any way to manage organization-level issues, so a separate issue is required on each repository.\n\nI'm sure the people who maintain the language implementations are responsible folks who keep up on security matters and won't need me to tell them individually.\n. https://github.com/RNCryptor/rncryptor-hs/blob/958630b09daad60d0115400c2e37cfdd9627ffa3/src/Crypto/RNCryptor/V3/Decrypt.hs#L110-L124\nMy Haskell kung-fu is weak; is this just discarding the MAC entirely?\n. I made a note in https://github.com/RNCryptor/rncryptor-hs/issues/2\n. OK, I think I found all the variable-time MAC validation flaws in the various implementations. I think there might be questionable choices w.r.t. the CSPRNG implementations on some of them, but until I research that in depth I don't feel comfortable raising the alarm.\nHave fun.\n. ",
    "adinapoli": "@paragonie-scott @rnapier hey folks, made a note about HMAC validation here (happy to accept pointers):\nhttps://github.com/RNCryptor/rncryptor-hs/issues/2\n. ",
    "Datadriven": "Thank you for your prompt reply. \nI'll look into the encryption schemes. Keep up the great work.\nHave a nice day. \nVinay.\n. ",
    "VrasidasP": "Oh great! Somehow I missed looking into the previous versions.\nThanks! :)\n. ",
    "lemonkey-medhelp": "What I suspected, thanks.\n. I suppose you could read in the last 128 bits of an existing file (or stream for that matter) that was encrypted using AES-256 since the block size is consistent (and would be padded if the last appended block wasn't originally 128 bits in length) and use this as the IV when initializing a new cryptor object with the intention of appending.\nHowever in the README you do mention that it is not intended for the IV to be set manually per the custom RNCryptor data format and other security issues.\nThoughts?\n. ",
    "lemonkey": "Got it. I have a working prototype that is just using CCCrypt and (kCCOptionPKCS7Padding | kCCModeCBC) for the options based on the iOS 7 pushing the limits book, but I'm going to evaluate supporting HMAC as well. Thanks again.\n. ",
    "behdadahmadi": "Im very glad that nobody here couldn't help me to find the solution. At last after 3 days trying to solve this problem,I find the solution. In C#,When you want to encrypt your data,you have to set Schema to V3. Now Swift decrypt your data without any error.\n. ",
    "heroims": "194\n. ",
    "nishabe": "@sweetevil , did you succeed in decrypting the file in chunks? . ",
    "walshahed": "@sweetevil I'm trying to do the same thing, can you please provide an example on how to play encrypted video in chunks?. @sweetevil I have local encrypted mp4 file, I need to decrypt the file and play it  using AVplayer but it takes long time to decrypt the whole file before playing. ",
    "dunhamsteve": "Just FYI - you can random-access decrypt with CBC (the readme seems to imply this is not possible). You just can't encrypt random access.  And, of course, you miss out on the HMAC check.\nJust read on a block boundary, and use the previous block as an \"IV\". (Or read a block ahead and throw out the first block.)  In the past I've written a CGDataProvider that does this. . ",
    "Platypus2": "I haven't looked at this in great detail yet, is it worth exploring or should I look into something else?\nI think I understand the concept but the readme is misleading. Would this process not involve setting the IV manually (which the readme essentially says don't/can't)? If that is the case I take it, it would require modification to the code to allow this? . Thanks for the response, I\u2019ll see if I can find some other way of doing it then :). ",
    "cesarvarela": "Thanks I'm closing this because of #201 \n. ",
    "jasonhocker": "Do you have that issue recorded here?  Want to make sure this isn't a bug that affects us that we haven't observed yet.\n. ",
    "nicklockwood": "@rnapier you were kind enough to supply RNCryptor as a test project for SwiftFormat so I thought I'd share the results. Feel free to ignore the PR if it's of no interest - I won't be offended :-)\n. ",
    "maksTheAwesome": "You are absolutely right that those are not the same. Those data are edited on the web side and then I pull updates. I receive data from server without encryption, then encrypt them (to be save on jailbroken phones also) and store in core data. \nWhat I expect here is when new data are incoming I encrypt them and override old data but is seems like it affects decryption process as overridden data cannot be decrypted. I'll make a project to demonstrate it next weak if you do not mind to take look at it.\n. ",
    "johnryan": "@rnapier No, i'm just an idiot and mistyped it. Thanks for the heads up, i'll try out the objC repo and make any PR's there if needed.\n. ",
    "AnkitGupta87": "\n\"faces some cryptography issue?\" -> I am using media files which on download is encrypted and decrypted when it is to be used. After decryption it is not playing.\nFor error I am relying on parameter provided to decryption method.\nYes, both of them are verified. If I just remove the encryption everything works completely fine.\nAfter encryption of data I store it in a file and mark it with \"UnlessOpen\" protection.\nYes, I am using NSURLSession's background download.\n\nIn the scenario I mentioned above if I don't update (kill) the app in locked device state. Then after unlocking the device all media files are playable and there is no issue at all. Is there something which on unlocking done to these files?\n. Thanks Rob for the clue on bytes, it seems to be some byte issue getting created. The library is not the cause.\n. ",
    "Darkwonder": "I have tried the release 5 and it didn't work. I have manually downloaded the RNCryptor.swift and added it to the project. The compiler reconized the file BUT it also gave me 35 errors.\nI also tried via cocoa pods:\n` target \u2018MyApp\u2019 do\n```\nplatform :ios, '9.0'\nComment this line if you're not using Swift and don't want to use dynamic frameworks\nuse_frameworks!\npod 'Alamofire', '~> 3.5.0'\npod 'Alamofire', '~> 4.0'\npod 'RNCryptor', '~> 5.0.0'\npod 'RNCryptor', '5.0.1'\npod 'RNCryptor', '~> 5.0'\npod 'RNCryptor', '~> 4.0.0-beta'\n```\nend`\nAll of it didn't work.\n. ",
    "gbrhaz": "Yes, that seems to work. Thanks!\n. ",
    "aporat": "I think you just need to push the podfile with the pod trunk push [NAME.podspec] command. I'm also migrating my codebase to swift 3, and seeing the same issue\nhttps://guides.cocoapods.org/making/getting-setup-with-trunk.html\n. ",
    "shshalom": "I'm facing this issue as well.\nMy framework depends on RNCryptor, now that we've moved to swift 3 and with cocoapods still points to version 4.0.0 the only solution is to embed version 5.0.1 into the project.\nplease fix this issue.\n. This solution doesn't works for me.\nI'll try to explain why, so my project is an app which depends on another framework; that framework holds the entire server api logic, encryption and so on. natively RNCryptor sits inside the framework.\nNow, the framework is used in private Cocoapod, Inside the podspec I've set RNCryptor as dependency,  since the master repo is set to download version 4.0.0, that's what get downloaded when using the framework.\nSadly I can't set the dependency as you suggested inside the podspec file.\nOne thought I had is, as an exception, to download RNCryptor, pointing to 5.0.1 branch inside the client app PodFile, which seemed to be a good solution, but on compiled it yield the following error:\n\nNo such module 'RNCryptor' \n\nso that solution didn't work :-/\nAnother solution I had in mind, is to embed RNCryptor inside the project, but I'm struggling with the framework not recognizing  RNCryptor.h file (frameworks are not allowed to have bridging header)\nSo my only possible option I can think about right now is to get RNCryptor from Cocoapods with the latest version.\nSo that's my story, if you have another Idea in mind please let me know.\n. So you're saying that both (client and framework) pod files has to have the same line for the \"No such module to disappear\"?\n. Ok, I'll try that.\n. Will do. Thanks.\n. Thanks @rnapier :-)\n@alexs555 it worked :-) \ud83d\udc4d \n. ",
    "alexs555": "@shshalom you can in podfile set\npod 'RNCryptor', :git => 'https://github.com/RNCryptor/RNCryptor.git' and this will checkout master branch of 5.0.1 version\n. Actually, we have the same situation as you described in 1 part. \nOur client app has in its podfile some private pods that have as a dependency RNCryptor. We added in client's pod file line \n pod 'RNCryptor', :git => 'https://github.com/RNCryptor/RNCryptor.git'\n- set the same line in podfile of our private repo project and it works\n. I confirm that both pod files have the same line, pointing to master branch and we have no any errors\n. also, be sure that all pod's targets in client project has \"enable legacy swift version\" option turned off\n. ",
    "hugoschou": "Yes I use that too. Works perfectly !\n. ",
    "chadbag": "OK, thanks.  I did exactly that.  A request when you do look at the ObjC code again is to make synchronous versions of addData: and finish.  I temporarily made addData have a synchronous flag and then async dispatch as is or not using that flag, and made two new routines addData: and synchronousAddData: that default the flag to one or the other.  Also made a synchronousFinish from finish and made the normal finish just dispatch async the new synchronous version.  The need is because we have a subclass of NSInputStream that takes an encrypted source and wraps an normal NSInputStream and in order to read: data and then pass it on the decryption needs to be synchronous.  The Swift version offered this.\n. Many thanks.\n. ",
    "thepoortom": "It'll be good if RNCryptor-objc will be listed in Cocoapods. It took some time to figure out how to include ObjC version to my project, I use checkout for now:\npod 'RNCryptor-objc', :git => 'https://github.com/RNCryptor/RNCryptor-objc.git'\n. ",
    "izotx": "I second that. Can't make it to work in Xcode 8 and Pod: , '~> 4.0.0-beta:\nerror: The following binaries use incompatible versions of Swift:\n/Users/jchudzynski/Library/Developer/Xcode/DerivedData/CelerationChartApp-cymdccxtjjoaaeecqzfmruvxkayg/Build/Products/Debug-iphonesimulator/CelerationChartApp.app/Frameworks/CryptoSwift.framework/CryptoSwift\n/Users/jchudzynski/Library/Developer/Xcode/DerivedData/CelerationChartApp-cymdccxtjjoaaeecqzfmruvxkayg/Build/Products/Debug-iphonesimulator/CelerationChartApp.app/Frameworks/RNCryptor.framework/RNCryptor\n. ",
    "dautermann": "\ud83d\udc4d . ",
    "ilyakalinin": "Thanks. ",
    "stephenfeather": "Isn't that why there is another repo (https://github.com/RNCryptor/RNCryptor-objc) mentioned in the description of this repo?. I also am not an attorney, but I do pay one a lot of money each year.\nOur rule of thumb, when in doubt, file the documents.\nTruth be told, even some of the USG employees are confused by what's covered and what's not.\nI'll extend what Rob said in #255, by saying, if you are in business, have an attorney.  And not the guy that wrote up your will. :). ",
    "kbosselman": "So I was originally using the ObjC library, but when the switch was made to Swift it appeared the ObjC library had been largely deprecated and was no longer being actively supported (before some commits this September it had been over a year between commits), so I switched to the Swift version.\nWith the Swift 3 version dropping ObjC compatibility I'm curious if the ObC library is again going to be a first class citizen. . ",
    "jifang": "Is it a generic problem to all libraries written in swift3 or very specific to RNCryptor?. ",
    "SoftwareEngieer": "@rnapier  could you plz answer?. ",
    "maxisme": "```\n-(int)bytesToEncrypted:(int)bytes{\n    int overhead = 66;\nif (bytes == 0) {\n    return 16 + overhead;\n}\n\nint remainder = bytes % 16;\nif (remainder == 0) {\n    return bytes + 16 + overhead;\n}\n\nreturn bytes + 16 - remainder + overhead;\n\n}\n```. ",
    "verticon": "Carthage\nI created a Cartfile that specifies a dependency on the master branch (there is not yet a new tag) of RNCryptor. Running carthage update successfully builds the Mac and iOS versions. As we had learned previously, Carthage (actually, xcodebuild) complains about not being able to open the KeyDerivation.playground file - this is a benign warning. One thing about this that I had not previously pointed out: if there is a project file and a workspace file that both contain the same schemes, then Carthage will choose to use the workspace file. Hence the KeyDerivation workspace is being used, which causes the playground file to be encountered.\nCocoaPods\n\nI ran pod lib lint and it passed.\nI cannot run pod spec lint RNCryptor.podspec until a new tag is put on the GitHub repo.\nI cannot test the installation of the pod into a project via a pod file: AFAIK that will require pushing a new version to the CocoaPods trunk.\nChanging the version labeling scheme will affect  how the GitHub repo's tag is specified in the pod spec but will not affect how users of the RNCryptor pod write their pod files; the version labels on  CocoaPods do not use the 'RNCyptor' prefix. (Maybe you were thinking something else with regard to upgrades?). BTW: I am very happy to have made my first FOSS contribution!. \n",
    "buscarini": "Thanks for the detailed explanation! \ud83d\udc4d\ud83d\udc4d\ud83d\udc4d. ",
    "ihorrapalyuk": "there is no swift 3.0 support in your lib, can it be added?\n2017-02-24 14:45 GMT+02:00 Rob Napier notifications@github.com:\n\n(Sorry for the exclamation point. Autocorrect.)\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/RNCryptor/RNCryptor/issues/238#issuecomment-282282940,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AG1VMH4giBwHLZOMR1NYgXq1QhBoyJ_yks5rftEHgaJpZM4MK-gF\n.\n. when in Installing RNCryptor (5.0.1) using cocoa pods i get message\n\n. i did that with new, empty project, maybe you just forgot to tag new version for cocoapods. \n",
    "chessboy": "Actually, it would be great if you could update the example Playground for Swift 3.1 \u2013 thanks!. Hi, awesome library! Is it updated for Xcode 8.3 / Swift 3.1? Thanks!. ",
    "nealwangzi": "I meet the same thing.. ",
    "nserror": "also seeing the same issue. ",
    "aizliang": "me too. ",
    "ben-lings-tessella": "The iOS 11 SDK has changed the last parameter of its declaration of SecRandomCopyBytes from uint8_t * to void *, so the declarations no-longer match.. A workaround for this is to replace the line\nextern int SecRandomCopyBytes(SecRandomRef rnd, size_t count, uint8_t *bytes) __attribute__((weak_import));\nwith \nextern int SecRandomCopyBytes(SecRandomRef rnd, size_t count, void *bytes) __attribute__((weak_import));\nor, if you need to support building with previous SDKs too, with \n```\nif __IPHONE_OS_VERSION_MAX_ALLOWED >= 110000\nextern int SecRandomCopyBytes(SecRandomRef rnd, size_t count, void *bytes) attribute((weak_import));\nelse\nextern int SecRandomCopyBytes(SecRandomRef rnd, size_t count, uint8_t *bytes) attribute((weak_import));\nendif\n```. ",
    "honkmaster": "Could this be fixed?. ",
    "prefect42": "Nice! Rob is on it! \nPS: Nice talk at UIKonf once again!. ",
    "Venkat1128": "@rnapier I am using pod 'RNCryptor-objc', '~> 3.0' and still i am getting errro at \nextern int SecRandomCopyBytes\nI can see that pod version is 3.0.2 and which doent have  below code .\nCan you please suggets how can i resolve this issue .\nif __IPHONE_OS_VERSION_MAX_ALLOWED >= 110000\nextern int SecRandomCopyBytes(SecRandomRef rnd, size_t count, void *bytes) attribute((weak_import));\nelse\nextern int SecRandomCopyBytes(SecRandomRef rnd, size_t count, uint8_t *bytes) attribute((weak_import));\nendif\nThanks,\nVenkat. ",
    "Marwan88": "Thank you. ",
    "ReddySanthosh": "Sorry for the incomplete code, I have corrected it. Kindly help.\nWas not able to capture the error, as it happened only once - couldn't get more details.\nOr\nI am suspecting either Encryption failed, below is the code for Encryption -\nENCRYPTION:\nHere upon successful Encryption storing my data in UserDefaults.\n        let value = \"SomeValueToEncrypt\"   \n        let data: Data = value.data   // Converting string to \"Data\" usign String extension\nextension String {\nvar data: Data {\n    if let data = self.data(using: .utf8) {\n        return data\n    } else {\n        return Data()\n    }\n}\n\n}\n    let password = \"AaBbCc\"\n    let cipherData = RNCryptor.encrypt(data: data, withPassword: password)\n\n   // Storing Data in UserDefaults\n    let defaults = UserDefaults.standard\n    defaults.set(cipherData, forKey: \"cipherData\")\n\nDECRYPTION\n       // Fetching from UserDefaults\n        let defaults = UserDefaults.standard\n        if let cipherData = defaults.object(forKey: \"cipherData\"){\n    let password = \"AaBbCc\"\n\n   let decryptedString = RNCryptor.decrypt(data: cipherData, withPassword: password)\n\n. ",
    "iosuma": "Thanks Replay . But i didn't get the file implement file in the file . can you share the document what you have for video encryption and decryption in ios objective c . . ",
    "ikzjfr0": "i got this problem too on Xcode9 beta4. ",
    "lsanches": "iOS 11 changed the signature of that method. RNCryptor devs will need to change it in order to be compatible with the new signature\nThe function signature of SecRandomCopyBytes has changed \nfrom: \n-extern int SecRandomCopyBytes(SecRandomRef rnd, size_t count, uint8_t *bytes) attribute((weak_import));\nto:\n+extern int SecRandomCopyBytes(SecRandomRef rnd, size_t count, void *bytes) attribute((weak_import));\n. ",
    "gregggreg": "Replacing that line with this block seems to be a decent solution that will compile properly in Xcode 8 and 9:\n```\nif __IPHONE_OS_VERSION_MAX_ALLOWED >= 110000\nextern int SecRandomCopyBytes(SecRandomRef rnd, size_t count, void *bytes) attribute((weak_import));\nelse\nextern int SecRandomCopyBytes(SecRandomRef rnd, size_t count, uint8_t *bytes) attribute((weak_import));\nendif\n```. ",
    "adrianevs": "I have the same issue and replacing that line with the new ones  not helps.. ",
    "itinance": "@rnapier, just to let you know and answering your question about it: 'RNCryptor-objc' installed by pod 'RNCryptor-objc' still has this issue.\n. ",
    "Nandulucky": "@rnapier , I got the issue when I'm using  'SecRandomCopyBytes' method like,\nextern int SecRandomCopyBytes(SecRandomRef rnd, size_t count, uint8_t *bytes) attribute((weak_import));\ngot the issue like, \"Conflicting types for 'SecRandomCopyBytes'\"\nI'm using XCode 9.2 what can I do help me please.\nThanks,\nNandu K\n. ",
    "gfisch": "Thanks, Rob!\nI'm already using CryptoSwift, but others in the company felt better with RNCryptor since it was used in other products here.  Having your endorsement means a lot.\nBest regards,\nGreg\n\nOn Jul 29, 2017, at 4:46 AM, Rob Napier notifications@github.com wrote:\nSee the FAQ: https://github.com/RNCryptor/RNCryptor/blob/master/README.md#can-i-use-rncryptor-to-read-and-write-my-non-rncryptor-data-format\nYou probably want something like CryptoSwift if you're building a custom format. \n\nOn Jul 28, 2017, at 6:39 PM, gfisch notifications@github.com wrote:\nI'm working with an existing system that has the encrypted version of the AES Key and IV sent as part of the message. However, there is no capability to use the HMAC key. I thought there was an older Swift version of RNCryptor that only required the Key and IV. The current Format3 seems to be close to what I need, but requires the HMAC key. How should I handle this issue?\nThanks!\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n\n. \n",
    "ezathashim": "I have the RNCryptor project as a subproject to my main project. I'm using XCode 9 Beta, which gives a module warning that it cannot find the proper umbrella header file. When I added a module map file to the watchOS and tvOS targets, the warning went away.\nPerhaps there is a build setting in XCode to tell it that the module map will be created, but I am not away of any such option.. For some reason, I had one for iOS in the project, and the iOS target had the proper build setting to look for the module map.\nI have attached the project with my modifications. The important thing is to add the module map search path for each individual target in the build settings for each one.\nModuleMapping.zip\n. ",
    "iamjono": "LMK if you want me to help you reproduce?. ",
    "mrobert": "Awesome, thanks for the quick response too!. ",
    "Z--EN": "Thanks for your reply. You are right, but why this source work without drain memory:\nlet url = Bundle.main.url(forResource: \"test\", withExtension: \"bin\")!\nlet dataObject = NSManagedObject(entity: entity, insertInto: managedContext)\n\ndo {\n    let binData = try NSData(contentsOf: url, options: NSData.ReadingOptions.mappedIfSafe)\n\n    autoreleasepool {\n        //let cipherData = RNCryptor.encrypt(data: binData as Foundation.Data, withPassword: self.key) as NSData\n\n        dataObject.setValue(index, forKeyPath: \"id\")\n        dataObject.setValue(binData  as Foundation.Data, forKeyPath: \"data\")\n    }\n\n    try managedContext.save()\n    self.data.append(dataObject)\n\n    NSLog(\"added data \\(index) to data\")\n} catch let error as NSError {\n    print(\"Could not save. \\(error), \\(error.userInfo)\")\n}\n\nDo you think system work with Data more carefully? First source is using a lot memory but last source use limit memory only 54 MB for 300 binary data, first source is using 1.36 GB. The different is only with one line. Seems in second source data are saving to disk but in first source data retained in RNCryptor library and don't want unload or clear (. But in second source I am working with NSData too. If it is possible don't drain memory first time I think it is possible don't drain memory in both times.. Ok, thanks. ",
    "RBabb": "respectively it works from MAC encrypt to PC decrypt but not PC encrypt to mac decrypt. I am getting null output. And an error of unknown header. The salt\n(password) is the same. The only thing I think could be the issue is the\nivlength.\nOn Wed, Dec 13, 2017 at 18:53 Rob Napier notifications@github.com wrote:\n\nWhat error are you receiving? Do you have an example of the output?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/RNCryptor/RNCryptor/issues/263#issuecomment-351563279,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AE15dmsST-URxxpgZrm94Z3Tmx9sBfg4ks5tAGNsgaJpZM4Q-PaE\n.\n-- \nRegards,\nBob Babb\nNational Solutions Integration Manager\nWeb & Multichannel Marketing Solutions & Analytics\nKonica Minolta Business Solutions U.S.A., Inc.\nOffice: (215) 293-1428 \nMobile: (470) 779-2200 \nTwitter: @rbabb_kmbs http://twitter.com/rbabb_kmbs\nVisit us: Count on Konica Minolta http://www.countonkonicaminolta.com/\nhttp://www.facebook.com/konicaminoltaus\nhttp://www.twitter.com/konicaminoltaus\nhttps://plus.google.com/u/0/101069343240482341568/about\nhttp://www.linkedin.com/companies/4830\nhttp://www.youtube.com/user/konicaminoltaus\nhttp://www.pinterest.com/konicaminoltaus\nDisclaimer http://kmbs.konicaminolta.us/signature/KMBSUS-Disclaimer%20.png\n. Found the issue....  It was in the RnCryptor-cs\nthe default schema was version 2\nchanged\nprivate Schema defaultSchemaVersion = Schema.V2;\nto\nprivate Schema defaultSchemaVersion = Schema.V3;\nand all is well.  Thanks.. \n",
    "ikishorek": "Thanks for the reply. Let me check.. ",
    "melbin1982": "We also experience the same issue,Application is very slow in iOS version 11.2.2. ",
    "hmansu": "Experiencing the same lagging issue with my application.. ",
    "caldwbr": "Thanks for the explanation! I'll give that a try. I'm trying to also encrypt my images, which is proving to be a difficult task.\n```\nextension UIImage {\nfunc oneTenthIt() -> UIImage {\n    let data = UIImageJPEGRepresentation(self, 0.1)\n    return UIImage(data: data!)!\n}\n\nfunc pixelCrypt(isEncrypted: Bool) -> UIImage {\n    var imageRef = self.cgImage\n\n    let width = imageRef?.width\n    let height = imageRef?.height\n    let colorSpace = CGColorSpaceCreateDeviceRGB()\n    let bytesPerPixel: UInt = 4\n    let bytesPerRow: UInt = bytesPerPixel * UInt(width!)\n    let bitsPerComponent: UInt = 8\n\n    let alphaInfo = imageRef?.alphaInfo\n\n    let sizeOfRawDataInBytes: Int = Int(height! * width! * 4)\n    let alignment = MemoryLayout<Int>.stride\n    var rawData = UnsafeMutableRawPointer.allocate(bytes: sizeOfRawDataInBytes, alignedTo: alignment)\n\n    var context = CGContext(data: rawData, width: width!, height: height!, bitsPerComponent: Int(bitsPerComponent), bytesPerRow: Int(bytesPerRow), space: colorSpace, bitmapInfo: CGBitmapInfo(rawValue: alphaInfo!.rawValue) | CGBitmapInfo.byteOrder32Big)\n    context?.draw(imageRef!, in: CGRect(x: 0, y: 0, width: CGFloat(width!), height: CGFloat(height!)))\n\n    var data = NSMutableData(bytes: rawData, length: sizeOfRawDataInBytes)\n    data = isEncrypted ? data.decryptIt() : data.encryptIt()\n\n    rawData = data.mutableBytes\n\n    context = CGContext(data: rawData, width: width!, height: height!, bitsPerComponent: bitsPerComponent, bytesPerRow: bytesPerRow, space: colorSpace, bitmapInfo: CGBitmapInfo(rawValue: alphaInfo!.rawValue).rawValue)\n    imageRef = context!.makeImage();\n\n    return UIImage(cgImage: imageRef!)\n\n}\n\n}\n```. That did seem to greatly speed up the app (I haven't yet entered a ton of items, but it is so much faster than before).\nI seem to be able to encrypt the underlying data of an image, but when I try to decrypt, it throws an \"unknown header,\" which you say indicates passing in the wrong format of Data or corrupted data or something. I am passing in the Swift type \"Data,\" so I assume that part is correct, so I guess I must be corrupting my Data somehow. I really have no experience with the UnsafeMutableRawPointer stuff, so maybe I've done something wrong. This is where I am right now.\n```\nextension Data {\nfunc encryptIt() -> Data {\n    let data = self\n    let encryptor = RNCryptor.EncryptorV3(encryptionKey: encryptKey!, hmacKey: hmacKey!)\n    return encryptor.encrypt(data: data as Data)\n}\n\nfunc decryptIt() -> Data {\n    do {\n        var data = self\n        let decryptor = RNCryptor.DecryptorV3(encryptionKey: encryptKey!, hmacKey: hmacKey!)\n        let originalData = try decryptor.decrypt(data: data)\n        return originalData\n    } catch {\n        print(\"WE HAD A FREAKING ERROR\" + String(describing: error))\n        return self\n    }\n\n}\n\n}\nextension UIImage {\nfunc oneTenthIt() -> UIImage {\n    let data = UIImageJPEGRepresentation(self, 0.1)\n    return UIImage(data: data!)!\n}\n\nfunc pixelCrypt(isEncrypted: Bool) -> UIImage {\n    let imageRef = self.cgImage\n\n    let width = imageRef?.width\n    let height = imageRef?.height\n    let colorSpace = CGColorSpaceCreateDeviceRGB()\n\n    let sizeOfRawDataInBytes: Int = Int(height! * width! * 4)\n    let alignment = MemoryLayout<Int>.stride\n    let rawData = UnsafeMutableRawPointer.allocate(bytes: sizeOfRawDataInBytes, alignedTo: alignment)\n\n    guard let context = CGContext(data: rawData, width: width!,\n                                  height: height!, bitsPerComponent: 8,\n                                  bytesPerRow: width! * 4, space: colorSpace,\n                                  bitmapInfo: CGImageAlphaInfo.premultipliedFirst.rawValue)\n        else { print(\"What the hay\"); return self }\n\n    context.draw(imageRef!, in: CGRect(x: 0, y: 0, width: CGFloat(width!), height: CGFloat(height!)))\n\n    var data = Data(bytes: rawData, count: sizeOfRawDataInBytes)\n    //print(data.base64EncodedString().characters.prefix(10))\n    data = isEncrypted ? data.decryptIt() : data.encryptIt()\n    //print(data.base64EncodedString().characters.prefix(10))\n\n    //rawData.deallocate(bytes: sizeOfRawDataInBytes, alignedTo: alignment)\n\n    //let nsData = NSMutableData(data: data)\n    //let rawPtr = nsData.mutableBytes\n    let uint8Ptr = UnsafeMutablePointer<UInt8>.allocate(capacity: data.count)\n    uint8Ptr.initialize(from: data) //<-copying the data\n    //You need to keep `uint8Ptr` and `data.count` for future management\n    let uint8PtrCount = data.count\n    //You can convert it to `UnsafeRawPointer`\n    let rawPtr = UnsafeMutableRawPointer(mutating: uint8Ptr)\n    guard let context2 = CGContext(data: rawPtr, width: width!, height: height!, bitsPerComponent: 8, bytesPerRow: width! * 4, space: colorSpace, bitmapInfo: CGImageAlphaInfo.premultipliedFirst.rawValue) else { print(\"What the freaking\"); return self }\n    guard let imageRef2 = context2.makeImage() else { return self }\n    //Deinitialize and deallocate the region\n    uint8Ptr.deinitialize(count: uint8PtrCount)\n    uint8Ptr.deallocate(capacity: uint8PtrCount)\n    return UIImage(cgImage: imageRef2)\n\n}\n\n}\n```. A person on Codementor.io says RNCryptor can't be used for images, but only for Strings, and that that is why I'm getting \"unknown header\" error while trying to do so. Is he correct?. Okay, thanks. I'll keep troubleshooting.. I finally resolved the issue of image encryption - apparently it was a problem to say \"let image = UIImage(data: data)\" and I should have just left that line out. Here is operable code if anyone is interested:\n```\nextension Data {\nfunc encryptIt() -> Data {\n    let encryptor = RNCryptor.EncryptorV3(encryptionKey: encryptKey!, hmacKey: hmacKey!)\n    return encryptor.encrypt(data: self as Data)\n}\n\nfunc decryptIt() -> Data {\n    do {\n        let decryptor = RNCryptor.DecryptorV3(encryptionKey: encryptKey!, hmacKey: hmacKey!)\n        let originalData = try decryptor.decrypt(data: self)\n        return originalData\n    } catch {\n        return self\n    }\n\n}\n\nfunc pixelCrypt(isEncrypted: Bool) -> Data {\n    return isEncrypted ? self.decryptIt() : self.encryptIt()\n}\n\n}\nextension UIImage {\nfunc oneTenthIt() -> Data {\n    let data = UIImageJPEGRepresentation(self, 0.1)\n    return data!\n}\n\n}\n```. ",
    "smilydronavalli": "Hi,\nKindly give me reply of the above query.Here we are waiting for the above query reply.It's very important for us.\nThanks InAdvance. ",
    "papley": "We were unable to include the cocoapod in our project under XCode 10 and High Sierra. \nActually, #import  was in our bridging header, but I had to move it to your header to stop the conflict. I don't understand how they can coexist at all. . This was fixed with this:\n    public static func makeKey(forPassword password: String, withSalt salt: Data) -> Data {\n\n        var derivedKey = Data(count: keySize)!\n        let passwordData = password.data(using: String.Encoding.utf8)!\n\n        let result: CCCryptorStatus = derivedKey.withUnsafeMutableBytes {\n            (derivedKeyPtr : UnsafeMutablePointer<UInt8>) in\n            passwordData.withUnsafeBytes { (passwordPtr : UnsafePointer<Int8>) in\n                salt.withUnsafeBytes { (saltPtr : UnsafePointer<UInt8>) in\n\n                    // All the crazy casting because CommonCryptor hates Swift\n                    let algorithm     = CCPBKDFAlgorithm(kCCPBKDF2)\n                    let prf           = CCPseudoRandomAlgorithm(kCCPRFHmacAlgSHA1)\n                    let pbkdf2Rounds  = UInt32(10000)\n\n                    return CCCryptorStatus(\n                        CCKeyDerivationPBKDF(\n                        algorithm,\n                        passwordPtr,   passwordData.count,\n                        saltPtr,       salt.count,\n                        prf,           pbkdf2Rounds,\n                        derivedKeyPtr, keySize)\n                    )\n                }\n            }\n        }\n\n        guard result == CCCryptorStatus(kCCSuccess) else {\n            fatalError(\"SECURITY FAILURE: Could not derive secure password (\\(result)).\") // : \\(derivedKey)\n        }\n        return derivedKey\n    }\n\n. Sorry, this is really important to us to figure out in the next week or so, but I have other emergencies, and going through all the commits trying to figure out the sequence of issues in our project (not RNCryptor) is complicated because the commits are pretty dense.\n. No. We're using 5.0.3.\n. And it works fine before Xcode 10.\n. You were right. Even though we were specifying 5.0.3 we were getting 5.0.2 because we had a Podfile.lock that was causing our Podfile to be ignored. That and several other problems which were causing reference loops into other cocoapods caused your Pod to be blamed. Once we switched to 5.0.3 and removed a reference into a CocoaLumberjack macro definition, and removed \nimport \"RNCryptor/RNCryptor.h\"\nin favor of \nimport \nin our bridging headers, everything works in all 4 permutations of XCODE 9, XCODE 10, and High Sierra, Mojave, on Mac and iOS.\nSo sorry to raise a false alarm, and thanks for the hint about 5.0.3. I might have missed it a while longer if you hadn't mentioned it.\n. We're really curious how you came across the idea of removing 'private' from the enum. . It does fix our problem.\n. ",
    "DavidFaraday": "I tried as you said, but that didnt work. the strange thing is it worked 1 time and got same crash after that no matter how many times i run the app.\nhere is the code in viewDidLoad\n```\n        let text = \"text to encrypr\"\n        let data = text.data(using: String.Encoding.utf8)\n        let encryptedData = RNCryptor.encrypt(data: data!, withPassword: \"pass\")\n    encryptedText = encryptedData.base64EncodedString(options: NSData.Base64EncodingOptions(rawValue: 0))\n\n    print(\"original text: \\(text)\")\n    print(\"encrypted text: \\(encryptedText)\")\n\n\n    var decryptedText = \"\"\n\n    //convert encrypted string to data\n    let dataToDecrypt = Data(base64Encoded: encryptedText)\n\n    // Decryption\n    do {\n        let originalData = try RNCryptor.decrypt(data: dataToDecrypt! as Data, withPassword: \"pass\")\n        decryptedText = String(data: originalData, encoding: String.Encoding.utf8)!\n    } catch {\n        decryptedText = \"Failed to decrypt!!!\"\n    }\n\n    print(\"decrypted text: \\(decryptedText)\")\n\n```\nScreenshot of the crash\n\nScreenshot of the time it worked (code wasnt changed)\n\nI think the problem is with getting back the base64 string from firebase and converting it back to data, somehow its not the same data so decryptor fails to decrypt it. But this code works fine if i run on xCode 9.x and swift 4. also i had tested it xCode 10 Beta 1, it worked as well. on Beta 3 it crashes. . I also tested on xCode 10 beta 1 and i can confirm that the code worked fine. its crashes on Beta 3 only\nUPDATE: it started to crash on xCode 10 Beta as well.. I can confirm its working fine, tested on simulator and iPhone 8. Does anyone else get this warning? I get it every now and then, after cleaning it it goes away (using xCode 10 beta 4 now, but it appears throughout xCode 10)\n\n. ",
    "johnny77221": "It's crashing on Xcode 10 beta 3 and working well on beta 4. ",
    "karlkowalskiusr": "Filed:\nSummary: Xcode 10 \u00df 3 causes crash when calling RNCryptor.decrypt\nSteps to Reproduce:\n1. Create an Xcode project\n2. Add a Podfile with pod init\n3. Edit the Podfile to include RNCryptor, latest version\n4. Execute pod install to create a workspace with the Xcode project\n5. Open the workspace\n6. Import RNCryptor to a module\n7. Attempt to decrypt an encrypted Data\nExpected Results:\nDecryption succeeds\nActual Results:\nApplication Crashes with EXC_BAD_INSTRUCTION\nVersion/Build:\nXcode 10 \u00df 3\nmacOS 10.13.5, macOS 10.14 \u00df 3\nConfiguration:\nMacBook Pro 15\" 2016\n2.9 GHz Intel Core i7\n16 GB 2133 MHz LPDDR3. ",
    "HeroMonster": "Bro, Just update RNCryptor to 5.0.3 it's fixed this problem.\nAnyway, I just wonder it's working only with iOS11 up.\nIt's seem not support below iOS11.\nI got this error:\nFor encrypt:\n_Extraneous argument labels 'data:withPassword:' in call\nReplace 'data: data, withPassword: ' with 'data, '_\nFor Decrypt:\n_Module 'RNCryptor' has no member named 'decrypt'_\nDid you face that problem?\n. ",
    "ketulbshah": "Ok thank you. Got it. I have to update repo missed that part. . ",
    "vinaychaharg": "Yes I tried it on quite some devices and it worked on \niPhone 5S\niPhone 6\niPhone 6S\niPhone 7\niPhone 8 and\niPhone X\nBut when I tried it on one iPhone SE it did not work, so I tried on another SE and it failed there too.\nWhen we try to decrypt the data on server which is sent by iPhone SE device it returns \"false\" for other devices it returned valid JSON.\nThis is probably because RNCryptor was not able to decrypt the data sent by iPhone SE device. \nFYI: The OS on both the SE devices was iOS 12.0\nLet me know if this helps.\nThanks\n. "
}