{
    "yyuu": "ugh. it's just my moron. thanks for pull req :)\n. Not reproduced on my machine. Perhaps it's the problems around your curl installation or SSL/TLS certificates.\n. Unlike with rbenv, pyenv includes python-build as its default plugin. The pyenv command can find pyenv install from pyenv/plugins/python-build/bin/pyenv-install.\nThe reason why I created python-build as a default plugin of pyenv, is most of users will use them together. IMHO, separating them into 2 projects is waste of time for them.\nRegistering pyenv as a formula of Homebrew is exciting. I'd like to research how I can do it.\n. @OiNutter \nTo manage pyenv plugin as a formula of Homebrew, we have to install these plugins #{HOMEBREW_PREFIX}/var/lib/pyenv/plugins and install symlinks for plugin commands into shell's $PATH.\nI created 2 formulas of pyenv and python-build to install pyenv and python-build, and worked fine on my host. I wan to ask you to review this formula.\nhttps://github.com/yyuu/homebrew/tree/add-pyenv\nIf we decide to follow the future changes of rbenv and ruby-build, it may be a good idea to split out python-build as an independent repository alike ruby-build....\n. Creating Homebrew formula of pyenv is continuing on mxcl/homebrew#17250.\n. hmm...  The problem is happening in Python REPL?\nI think it is a problem of missing dependencies relating to readline.\nI will try to reproduce this in minimal environment.\n. Please check if you have installed and linked readline package of Homebrew.\n% brew install readline\n% brew link readline\nAnd then rebuild python.\n% pyenv install 2.7.3\nIf your python has been built against readline package, there is readline.so module.\n% otool -L ~/.pyenv/versions/2.7.3/lib/python2.7/lib-dynload/readline.so\n/Users/yyuu/.pyenv/versions/2.7.3/lib/python2.7/lib-dynload/readline.so:\n        /usr/local/opt/readline/lib/libreadline.6.2.dylib (compatibility version 6.0.0, current version 6.2.0)\n        /usr/lib/libncurses.5.4.dylib (compatibility version 5.4.0, current version 5.4.0)\n        /usr/lib/libgcc_s.1.dylib (compatibility version 1.0.0, current version 1094.0.0)\n        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 159.1.0)\n. There is special python version system. In system version, pyenv will search python executables from original $PATH of your shell. This will perform as same as Homebrew installed python.\nOr, you can create extra virtualenv based on system version. With using this method, you can use both Homebrew and virtualenv installed python libraries.\n1. Add Homebrew path to your shell $PATH\n2. Install python-virtualenv into your pyenv installation\n3. Create new virtualenv based on system python\n   - pyenv virtualenv --distribute system mysystem\n4. Enable mysystem in pyenv\n. fixed in https://github.com/yyuu/pyenv/commit/167ff2a1988deaa2217f3762a61b15c87ac8a0f7. thanks :)\n. oops :( fix it soon.\n. Fixed in above commit. The problem has been fixed on my side.\nThanks for your report :)\n. Thanks for reporting. Fix it in https://github.com/yyuu/pyenv/commit/ad900ba436733437515d37587438daba33c49d21.\n. hmm.... I've never used pyenv with virtualenvwrapper. I'll try to find the way to co-work them.\nBTW, there is pyenv-virtualenv which is a plugin of pyenv that allows you to switch between virtualenvs.  Isn't this enough for you?\n. @xeross \nModifying shims must not be a good idea to affect current shell since shims are too broadly used when invoking commands via pyenv. pyenv (also rbenv) provides pyenv-sh-* style scripts which will be evaluated in current shell. I think that this is better for current needs.\nI wrote new pyenv plugin pyenv-virtualenvwrapper to use pyenv and virtualenvwrapper together. Please try this out.\n. Thanks for your contribution :)\n. Thanks for request :)\nIt almost looks good to me. Please fix around handling CONFIGURE_OPTS. I'd like to merge this after your fix.\n. It's ok. Thanks for fix.\n. Thanks for request :+1: \n. The python-build will try to build python on $TMPDIR (the default value of $TMPDIR is /tmp). Because the build process of python requires executing files, you need to set exec option on $TMPDIR.\nhttps://github.com/yyuu/pyenv/blob/dce4eb636a20a5e28f8936f58ca7c0e69a0b0bb8/plugins/python-build/bin/python-build#L636\n. @ferhtgoldaraz \nMy Ubuntu 12.10 box doesn't have noexec on /tmp. Isn't this a system-specific problem?\n. Thanks for the advice :)\nBut it is hard to determine the proper mount point to build python. I think that using /tmp by default is reasonable for most systems.\nAlthough, as you say, some system might set noexec on /tmp. For those cases, users can override $TMPDIR to change the behaviour.\nI think that the actual problem is lack of good documentation about changing the default behaviour of pyenv/python-build. I'd like to work to improve it....\n. What is your operating system? I can build 2.5.6 on my Debian sid box without troubles.\n. This seems to be a problem of python build process, not a problem of pyenv.\nBecause the problem is not reproduced on my machine, basically, please find the cause of the trouble by yourself. I'll try to setup Arch Linux as VM, but I cannot promise you anything about this trouble.\n. I tested building CPython 2.5.6 on latest Arch Linux (cleanly installed), and it finishes without any problems. After that, I did sudo pacman -S subversion and then try rebuilding, it fails by the same error as yours.\n. The Python build system expects svnversion to print \"exported\" if the source tree is not on the Subversion repository. But recent version of Suversion prints \"Unversioned directory\" in place of \"exported\". This is the why build fails.\nJust placing following script as svnversion into your $PATH will solve the build problem.\n```\n!/bin/sh\necho exported\n```\nOther workarounds described in the post you pointed are also effective.\nAgain, this is not a kind of problem of pyenv.\n. Reproduced same one on my Debian sid box.\n. Reverting distribute version to prior to 0.6.32 fixes this error. But I don't know  what is changed from this version of distribute. Need to research more.\n. Pushed something for Jython on issue15 branch. However, since this is just a workaround, I need to research more on issues of distribute and pip.\n@reversefold \nI want to ask you to try issue15 branch.\n. The pip 1.3.1 issue around os.O_NOFOLLOW was filed as #849.\n. I created new issue for the problem with distribute \">= 0.6.33\" and Jython 2.5.0 and 2.5.1 as #367.\n. Since virtualenv will download recent version of distribute/setuptools automatically, using pyenv-virtualenv with older Jython (\"<= 2.5.1\") may cause same problems as this issue.\nThere are some options for this problem.\n1. Remove older Jython from pyenv repository\n2. Use setuptools in place of distribute for older Jython\n3. (Add nice workaround for older Jython in distribute)\n. The issue367 of distribute was marked as \"wontfix\". It is still available to send patch to fix this, but I don't know how I can fix this on Jython.\nThe \"2.5.0\" and \"2.5.1\" might be deleted from future release of pyenv.\n. Sent a patch to pip as #935. This is a workaround for pip on Jython.\n\nTODO:\n1. Prepare workaround for distribute on Jython (=> wontfix)\n2. Prepare workaround for pip on Jython (=> #935)\n3. Update docs of pyenv-virtualenv\n   - virtualenv (it might install recent version of distribute and pip automatically) might not work properly with older versions of Python/Jython.\n. Added a feature to use optional version of virtualenv. (yyuu/pyenv-virtualenv@404918c7d9d85a1ab4cbe0a16e0c421661bfbd26)\n\nTODO:\n1. Prepare workaround for distribute on Jython (=> wontfix)\n2. Prepare workaround for pip on Jython (=> #935)\n3. Update docs of pyenv-virtualenv\n. As the workaround for Jython, pyenv tries to keep using older version of distribute and pip. This might cause problems with recent version of virtualenv, but can be avoidable with using older version of virtualenv. (Now pyenv-virtualenv can handle optional version of virtualenv)\nThough, there is issue 935 still in progress, but nothing has to be done in pyenv.\n. This must be a bug of older version of WAF which pycairo 1.10.0 is using. (The WAF bug has been fixed in 183388abceba13006005c78a2ab1d6808de34a91)\nI confirmed success building with following script.\n``` sh\nset -e\nPYENV_ROOT=\"${PYENV_ROOT:-${HOME}/.pyenv}\"\nPREFIX=\"${PYENV_ROOT}/versions/$(pyenv version-name | awk -F: '{print($1)}')\"\ntest -f py2cairo-1.10.0.tar.bz2 || wget http://cairographics.org/releases/py2cairo-1.10.0.tar.bz2\nrm -rf py2cairo-1.10.0\ntar xvf py2cairo-1.10.0.tar.bz2\ncd py2cairo-1.10.0\n./waf --version\n(\n  cd .waf-*\n  wget -O- \"https://gist.github.com/yyuu/5566264/raw/612da9ff5b215cda42eb62fc3d332f3d2ae172db/python.py.patch\" | patch -p0\n)\n./waf --prefix=\"${PREFIX}\" configure\n./waf build\n./waf install\n```\nAgain, this is not a problem of pyenv.\n. The significant difference between pyenv built python and system python must be the version of distribute. This problem might be introduced from WAF's regardless handling around string values from distutils.sysconfig.get_config_var(). That patch is to fix the WAF's behaviour. Rolling back distribute version may help building.\n. I'm not sure how WAF is able to deal with virtualenv. Please check the docs on WAF project.\nhttps://code.google.com/p/waf/wiki/Virtualenv\n. Finally I've succeeded to install pycairo into virtualenv.\nLet us say I have following 2 versions in pyenv.\n1. 2.7.4 is an original CPython\n2. venv27 is a virtualenv created from 2.7.4.\nRun build with following script. The difference to the previous script is defining the path to the python-config as environment variable.\n``` sh\nset -e\nPYENV_ROOT=\"${PYENV_ROOT:-${HOME}/.pyenv}\"\nSOURCE_VERSION=\"2.7.4\" # the source version of virtualenv\nexport PYENV_VERSION=\"venv27\" # the virtualenv\nexport PYTHON_CONFIG=\"${PYENV_ROOT}/versions/${SOURCE_VERSION}/bin/python-config\"\ntest -f py2cairo-1.10.0.tar.bz2 || wget http://cairographics.org/releases/py2cairo-1.10.0.tar.bz2\nrm -rf py2cairo-1.10.0\ntar xvf py2cairo-1.10.0.tar.bz2\ncd py2cairo-1.10.0\n./waf --version\n(\n  cd .waf-*\n  wget -O- \"https://gist.github.com/yyuu/5566264/raw/612da9ff5b215cda42eb62fc3d332f3d2ae172db/python.py.patch\" | patch -p0\n)\n./waf --prefix=\"${PYENV_ROOT}/versions/${PYENV_VERSION}\" configure\n./waf build\n./waf install\n``\n. Thank you!\n. Oops. Never mind since it is very trivial. I'll be more careful next time.\n. Thepython-build(the backend ofpyenv install) will try to download files via mirror site ifPYTHON_BUILD_MIRROR_URLis defined as environment variable. See also [README.md](https://github.com/yyuu/pyenv/blob/master/plugins/python-build/README.md) ofpython-build.\n. I setup official mirror forpython-build` in #20. Just pulling the latest master of pyenv enables it. It might make the downloads faster.\nIf you're still having the trouble of download speed, there're options for you.\n1. Create your private mirror and setup it in ${PYTHON_BUILD_MIRROR_URL}.\n   - You can use https://github.com/yyuu/yyuu.github.com as the template of private mirror site.\n2. Raise your bandwidth.\n. @huntzhan I've removed CPython sources from http://yyuu.github.io in https://github.com/yyuu/yyuu.github.com/commit/391c0d10609a5bd61f30d0529ef2e34b58fe3e6e since CPython sources are distributed via fast.ly nowadays. You can add CPython sources in your clone if needed.\n. The Wiki has been created with importing mostly from rbenv project.\nI created the page Common build problems to gather workarounds for build problems.\n. Created download mirror at http://yyuu.github.io/pythons/. Since GitHub Pages are served by fastly, download using that mirror may be somewhat faster.\n. Enabled mirror in SHA@0bf26d8f1d5917f33c8d070deb276d180fcf690e. As of writing this, archives of Python 2.7 and Python 3.3 are uploaded to the mirror. They are the current mainline of CPython and most users might prefer them.\n- Python-2.7.tgz\n- Python-2.7.1.tgz\n- Python-2.7.2.tgz\n- Python-2.7.3.tgz\n- Python-2.7.4.tgz\n- Python-2.7.5.tgz\n- Python-3.3.0.tgz\n- Python-3.3.1.tgz\n- Python-3.3.2.tgz\n. Download from origin.\n``` sh\n% wget http://python.org/ftp/python/3.3.2/Python-3.3.2.tgz\n--2013-05-18 23:43:02--  http://python.org/ftp/python/3.3.2/Python-3.3.2.tgz\nResolving python.org... 82.94.164.162, 2001:888:2000:d::a2\nConnecting to python.org|82.94.164.162|:80... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 16530940 (16M) [application/x-tar]\nSaving to: \u2018Python-3.3.2.tgz\u2019\n100%[========================================================================================================>] 16,530,940  64.3KB/s   in 6m 40s\n```\nDownload via GitHub Pages.\n``` sh\n% wget http://yyuu.github.io/pythons/0a2ea57f6184baf45b150aee53c0c8da\n--2013-05-18 23:50:56--  http://yyuu.github.io/pythons/0a2ea57f6184baf45b150aee53c0c8da\nResolving yyuu.github.io... 103.245.222.133\nConnecting to yyuu.github.io|103.245.222.133|:80... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 16530940 (16M) [application/octet-stream]\nSaving to: \u20180a2ea57f6184baf45b150aee53c0c8da\u2019\n100%[========================================================================================================>] 16,530,940   326KB/s   in 53s\n2013-05-18 23:51:57 (306 KB/s) - \u20180a2ea57f6184baf45b150aee53c0c8da\u2019 saved [16530940/16530940]\n```\nIn this case, GitHub Pages is 7x faster than origin.\n. Close this temporary. Will open again if the rbenv 0.4.1 were released.\n. This might be a build problem of ssl module with recent version of OpenSSL. I added patch in SHA@5fbc3ae3d5629081507b691a3549007cff1cffc6 to prevent this error.\n@notnoop \nPlease try rebuilding with latest master.\n. @notnoop \nAren't you there?\nI close this since I've confirmed that the build problem has been fixed on my machine.\n. @Rnhmjoj\nWhich version of Python did you met openssl problem with? Please show me the actual output of pyenv install --verbose ${version} as gist.\n. @Rnhmjoj \nhmm... looks somewhat strange :(\nThe build problem of ssl module of CPython 3.3.2 must be another problem. The problem on CPython 3.2 was caused by the recent changes in OpenSSL (it drops support for SSLv2).\nhttps://github.com/yyuu/pyenv/blob/master/plugins/python-build/share/python-build/patches/3.2/Python-3.2/001_openssl_no_ssl2.patch\nThough, CPython 3.3.2 is quite new and equivalent fix has been applied by default, this must not be a problem.\nFor more investigation, I'd like to have another issue for your problem.\n. @beck @yina\nThe commit 6b0710e263ee92a4ae15822e38b1037775d93609 has not been merged into master. I wonder if I should merge it since I can build CPython 2.7.6 with linking against OS X's default OpenSSL 0.9.8 on OS X Mavericks.\nPlease let me know further information:\n1. Do you have Command Line Tools for Xcode installed?\n2. What is your default C compiler? You can check it with which cc; cc -v\n3. The environment variables of CFLAGS, LDFLAGS and CPPFLAGS\n4. The output from pyenv install -v 2.7.6 2>&1 | tee build.log\n. :congratulations: \n. Interesting.\nAgree that the \"faux-readline\" (libedit) must be the most common pitfall especially for OS X users. I'd like to see your patch for this problem.\nI've been working for this problem with following approaches, but none of them is enough effective as of now.\n1. Prepare wki page to collect known pitfalls\n2. Create pyenv-doctor plugin to detect missing libraries\nBecause I'm using OS X too, I think that pyenv should be more friendly for other OS X users :)\n. ok. I'll merge SHA1@ff387010b3501a31a920506c27eeb15c1b8f4d92 into master.\n. The PYENV_ROOT is an environment variable to specify the root directory of pyenv. If you want pyenv to be installed in non-standard location, exporting PYENV_ROOT explicitly in your shell may help you.\nsh\nexport PYENV_ROOT=\"${HOME}/.dotfiles/pyenv\"\nexport PATH=\"${PYENV_ROOT}/bin:${PATH}\"\neval \"$(pyenv init -)\"\n. Which version of OS X are you using? Beta release of OS X 10.9??\nInstalling Python-3.3.2...\nchecking build system type... x86_64-apple-darwin13.0.0\nchecking host system type... x86_64-apple-darwin13.0.0\nMy installation of OS X 10.7 has OpenSSL and SQLite3 at the following paths by default. How's about your system?\n- /usr/lib/libssl.dylib\n- /usr/include/openssl/ssl.h\n- /usr/lib/libsqlite3.dylib\n- /usr/include/sqlite3.h\n. hmm, I've never tried Mavericks yet.\nIf there are no development headers on /usr/include or /usr/local/include, you can specify optional paths for these files via CFLAGS.\nCFLAGS=\"-I/Application/Xcode.app/Contents/Developer/usr/include\"\n. brew might install formulas keg only if they are installed by default. You might need to set LDFLAGS and CFLAGS for some of keg-only formulas explicitly when building CPython.\nCFLAGS=\"-I/Application/Xcode.app/Contents/Developer/usr/include -I$(brew --prefix openssl)/include -I(brew --prefix sqlite3)/include\" LDFLAGS=\"-L$(brew --prefix openssl)/lib -L$(brew --prefix sqlite3)/lib\" pyenv install -v 3.3.2\n. I don't like platform specific workaround in pyenv itself. But there is still a chance in custom pyenv plugin to hook before_install and set proper build flags for the OS X 10.9.\nI'd like to keep track on this issue and see how other packaging tools for OS X deal with this.\n. @zenweasel See #29\n. Ok. Thanks for the confirmation :+1:\n. ugh. I fixed that. Thanks for reporting :+1: \n. The mirror is intended to be used as CDN. On my rough measurement in #20, it was 7x faster than downloading from official.\n. There is an environment variable PYTHON_BUILD_CACHE_PATH in python-build. If the specified directory exists, python-build will lookup downloaded file from the directory, and then cache the file after successful downloaded.\nBy default, if you are using python-build via pyenv, the default value of PYTHON_BUILD_CACHE_PATH will be ${PYENV_ROOT}/cache. Just creating the directory enables caching of downloaded files.\nmkdir -p \"$(pyenv root)/cache\"\n. This must be a bug of llvm-gcc-4.2 shipped with Command Line Tools for Xcode. (See also http://bugs.python.org/issue13241) The SHA1@7a4fe458b85f61c0c69ec53baf526c5ff9342334 has been merged into latest master of pyenv, but has not been released as brew's formula.\npossible workarounds:\n1. Declare CC=clang to force pyenv to use clang as C compiler (CC=clang pyenv install 3.3.2)\n2. Install pyenv from git instead of brew's formula\n. If I understand correctly, do you want to use individual Python versions per your scripts?\nThere is special environment variable PYENV_VERSION. Because the shell configuration precedes than local and global configurations in pyenv, you can inject special Python version from the environment variable PYENV_ROOT.\nFor example, let's say that you have setup a virtualenv named venv32 for command foo. You can invoke foo with venv32 with typing PYENV_VERSION=venv32 foo.\n. sstephenson/rbenv#425\n. If you want to set PYENV_ROOT as /usr/local/opt/pyenv, it is better to declare PYENV_ROOT before invoking pyenv init -. Plus, if you set PYENV_ROOT at custom location, you should not set ${HOME}/.pyenv/shims in your $PATH manually because it will not be maintained by pyenv.\nThis issue might be a problem of rehashing of both pyenv and shell. Try following command if you're using bash.\npyenv rehash && hash -r\nOr, if you're using zsh.\npyenv rehash && rehash\n. The build problem of CPython 3.3.x on OS X might be as same problem as http://bugs.python.org/issue13241. See also #29.\n. I'd like to support even for fish if it is available, but it seems somewhat difficult with current impl :(\nMany of the code of pyenv is written in bash, but there are some of interactions between working shell. They might be the problem to support fish.\n1. pyenv init\n   - need to prepare shell-specific init script\n2. pyenv shell\n   - export is not workable on fish\n3. auto-completion\n   - need shell-specific code\n. Yep, you're right. The global and local can work without init.\n. Adding following snippet in your shell initialization script (something like ~/.profile of sh for fish) might help you.\nsh\nsetenv PYENV_ROOT \"${HOME}/.pyenv\"\nsetenv PATH \"${PYENV_ROOT}/shims:${PYENV_ROOT}/bin:${PATH}\"\npyenv rehash\n. You might need pyenv rehash to generate shim for yolk after installing pip install yolk. Plus, you might need to invoke something like rehash (zsh) or hash -r (bash) to update command table of the current shell.\n. Is there any other problem? Or, I wanna close this.\nUpdating Wiki about tips with fish is welcome :)\n. My decision on this is, pyenv should even work on non-sh-style shells (like fish and csh), but init, shell and auto-completion are limited on these shells.\nSupporting full features on non-sh-style shells is very hard and will not be implemented. This does not mean it is impossible; it is possible if I wrote scripts like libexec/pyenv-init.fish and completions/pyenv.fish and some more. But I will not implement them because I am not an expert of these shells. (patches are welcome!)\nEven if the support is limited, most of the features (like local, global and install) are still available. I think this means pyenv is still useful for the users of non-sh-style shells.\n. Please describe more about the weird problems of pip running 2to3.\n1. Which python version did you use with? \n2. What is the package did you try to pip install?\n3. Please paste the error output from pip\n. Couldn't confirm this weird behaviour.\nI think that there is something wrong in distutils or setuptools. The setup.py running on 2.7.5 should not invoke 2to3 because the distutils of 2.7.5 lacks distutils.util.Mixin2to3. Setting the Python's environment variables of PYTHONHOME or PYTHONPATH might introduce this kind of confusion. But I'm not sure what is happening there :(\n. I heard similar weird behaviour of 2to3 in #38. In that case, upgrading setuptools from 0.7.2 to 0.9.7 (latest) solves the problem.\n. I noticed the update of pip by your mention here. Thanks for your comment :)\n. @Manticore\nI wrote some additional scripts to improve fish support of pyenv. The init, shell and completions are now working on fish. Please try fish-support branch at pyenv repo.\nhttps://github.com/yyuu/pyenv/tree/fish-support\nInitialization code for fish.\nfish\nsetenv PATH \"$HOME/.pyenv/bin\" $PATH\neval (pyenv init - fish)\n. ok. I'll merge it into master :)\n. @tiagofernandez \nOops. You're right. The initialization code has been changed during exporting this feature to rbenv (sstephenson/rbenv#434).\nNow I'm using following initialization code.\nset -x PATH \"$HOME/.pyenv/bin\" $PATH\n. (pyenv init - | psub)\n. Confirmed same on OS X 10.7 with llvm-gcc-4.2.\n. The f77d0727888c358b79152ebef1acd27f2f845285 fixes the most of the problems, but I found that _ctypes is still broken with that patches.\n. I confirmed that the ctypes module of CPython 2.5.6 is broken with both pyenv, pythonz and pythonbrew.\npyenv\n% ~/.pyenv/versions/2.5.6/bin/python -c 'import _ctypes_failed'\nTraceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nImportError: dlopen(/Users/yyuu/.pyenv/versions/2.5.6/lib/python2.5/lib-dynload/_ctypes_failed.so, 2): Symbol not found: _ffi_call\n  Referenced from: /Users/yyuu/.pyenv/versions/2.5.6/lib/python2.5/lib-dynload/_ctypes_failed.so\n  Expected in: flat namespace\n in /Users/yyuu/.pyenv/versions/2.5.6/lib/python2.5/lib-dynload/_ctypes_failed.so\npythonz\n% ~/.pythonz/pythons/CPython-2.5.6/bin/python -c 'import _ctypes_failed'\nTraceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nImportError: dlopen(/Users/yyuu/.pythonz/pythons/CPython-2.5.6/lib/python2.5/lib-dynload/_ctypes_failed.so, 2): Symbol not found: _ffi_call\n  Referenced from: /Users/yyuu/.pythonz/pythons/CPython-2.5.6/lib/python2.5/lib-dynload/_ctypes_failed.so\n  Expected in: flat namespace\n in /Users/yyuu/.pythonz/pythons/CPython-2.5.6/lib/python2.5/lib-dynload/_ctypes_failed.so\npythonbrew\n% ~/.pythonbrew/pythons/Python-2.5.6/bin/python -c 'import _ctypes_failed'\nTraceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nImportError: dlopen(/Users/yyuu/.pythonbrew/pythons/Python-2.5.6/lib/python2.5/lib-dynload/_ctypes_failed.so, 2): Symbol not found: _ffi_call\n  Referenced from: /Users/yyuu/.pythonbrew/pythons/Python-2.5.6/lib/python2.5/lib-dynload/_ctypes_failed.so\n  Expected in: flat namespace\n in /Users/yyuu/.pythonbrew/pythons/Python-2.5.6/lib/python2.5/lib-dynload/_ctypes_failed.so\n. The f77d0727888c358b79152ebef1acd27f2f845285 has not yet been merged into master. Please pull issue33 branch to try it out.\n. The patches for 2.5 series on OS X has been merged into master at e1ea64b0b99cddf0f97713902fb1f374343fc34b. Updating pyenv will solve the problem.\n. You didn't miss anything. This is by the design of pyenv/rbenv.\nThe active version(s) should be set explicitly. I'm afraid that kind of implicit behaviour might introduce the confusions of Python versions on runtime. I don't like to change current behaviour.\n. Though, there is still a chance to change this pyenv's default behaviour in its plugin. Since there is which hook in pyenv,  injecting PYENV_COMMAND_PATH in plugin will change the command lookup strategy of pyenv.\nhttps://github.com/yyuu/pyenv/blob/1a6eb80bcdc3a9746291291d7fe82f4eda36abe3/libexec/pyenv-which#L73\n. Write pyenv plugin to hook pyenv which. See Authoring-plugins at Wiki.\nI had have written somewhat similar plugin for rbenv, rbenv-which-ext. This is a plugin for rbenv, but it is very close to pyenv. Setting up following bash script as which hook will change the pyenv's command lookup strategy as you described.\nsh\nif [ -n \"$PYENV_COMMAND\" ] && [ ! -x \"$PYENV_COMMAND_PATH\" ]; then\n  versions=($(pyenv-whence \"${PYENV_COMMAND}\" 2>/dev/null || true))\n  if [ \"${#versions[@]}\" -eq 1 ]; then\n    PYENV_COMMAND_PATH=\"${PYENV_ROOT}/versions/${versions[0]}/bin/${PYENV_COMMAND}\"\n  fi\nfi\n. Close this tasks since there're no tasks remaining.\nIf you decided to open source your plugin, please add it in Plugins at Wiki.\n. @mehcode :+1: \n. Sorry, I couldn't get what your problem is. Please describe more on your problem.\n1. the environment\n   1. the release of OS X (10.8?)\n   2. your shell type and its configuration around pyenv\n2. the problem detail\n   1. full command line\n   2. the error output (if it is very long, please use gist)\n3. how to reproduce\n   1. the procedure\n   2. expected behaviour\n. Because the development of new setuptools has been moved to bitbucket.org, the docs on http://peak.telecommunity.com/DevCenter/EasyInstall might be outdated. Please refer https://pythonhosted.org/setuptools/easy_install.html instead.\n. Thanks for explanation. And confirmed this weird behaviour with setting ~/.pydistutils.cfg.\nThe PYTHONPATH has been unset in python-build during build. If you want to set custom value for it, just commenting out following line and try env PYTHONPATH=\"$HOME/python.bin\" pyenv install -v 2.7.5 again.\nhttps://github.com/yyuu/pyenv/blob/0c38147fcbefb4d1fd17ed651b297e7ac601d0a2/plugins/python-build/bin/python-build#L1072\nAt last, I don't recommend to install Python libraries at custom location. Because pyenv can manage whole  Python installation by user's privileges, I've never need to have custom install_dir. If you want to manage library environment, I'd recommend you to use virtualenv.\n. This must be the same problem as issue12271 of CPython.\n. Yes, I doubt that the strange installation path of ncurses headers (panel.h) is causing this problem.\nPlease let me know the result of find /usr/include -name panel.h on openSUSE 12.3.\n. The panel.h of ncurses is installed in /usr/include on Debian GNU/Linux, not in /usr/include/ncurses.\n% uname -a\nLinux kujira 3.8-1-amd64 #1 SMP Debian 3.8.11-1 x86_64 GNU/Linux\n% find /usr/include -name panel.h\n/usr/include/ncursesw/panel.h\n/usr/include/panel.h\nI've never tried yet, but appending /usr/include/ncurses as include path might fix this.\nenv CFLAGS=\"-I/usr/include/ncurses\" pyenv install -v 2.6.8\n. I confirmed that specifying --libdir as ./configure option fixes the build of CPython 2.6.8 on openSUSE 12.3 x86-64.\n% env CONFIGURE_OPTS=\"--libdir=$(pyenv root)/versions/2.6.8/lib\" pyenv install -v 2.6.8\nIf the --libdir argument is not specified, the native libraries of CPython will be installed in ${prefix}/lib64, not in ${prefix}/lib. This might be a kind of problem of build system of CPython, but I don't know how I can deal with this behaviour.\n. I've used on Debian/Ubuntu/CentOS of amd64, and pyenv works fine on these platforms. I had have never seen this kind of problem :(\n. These issues might be relating for this.\n- issue15631\n- issue1294959\nThe source of python3 package of openSUSE has been shipped with applying multilib patch which forces distutils to install all python libraries into platform specific directory like lib64. Even if it works fine on openSUSE, it corrupts build on Debian/Ubuntu. Thus, it is not acceptable.\nAs conclusion, only possible workaround for this is just adding --libdir on configure time. It will install 64bit native libraries into lib (instead of lib64) and it might be a violation of policy of openSUSE system. Though, AFAIK, it corrupts nothing. \n. Unfortunately, I couldn't install 2.4.2 on my installation of Debian sid amd64. Now I'm fixing the build.\nBTW, why did you add 2.4.2? The (relatively) latest release of CPython 2.4 series is 2.4.6. If you just want to add one of the release of 2.4 series, I think 2.4.6 is better than 2.4.2.\n. Yep, please add 2.4.6 too.\n. Umm. I couldn't build 2.4.6 on Debian sid amd64. What platform are you using for testing this?\nI think some of patches are needed to build 2.4 series on recent systems.\n. Thanks for information. I confirmed success building on openSUSE 12.3 x86_64 and gcc 4.7.\nI will merge this because this does not corrupt any existing features of pyenv; though, merging this does not guarantee pyenv can build 2.4 on platforms other than openSUSE 12.3. Adding some patches for 2.4 series may be needed.\n. At first, you must learn about markdown formatting.\nI couldn't confirm this behaviour with CPython 3.3.2 + setuptools 0.9.7. This must be a problem of 2to3 was invoked from setup.py of ipython package, must not be a problem of pyenv.\nCheck the version of your setuptools by python -c 'import setuptools; print(setuptools.__version__)', and if it is outdated, updating to the latest version (pip install --upgrade setuptools) might help you.\n. @spacebuoy\nNice! Please let me know the problematic version of setuptools.\n. Thanks for detailed explanation :+1: \n. Please try to set PYENV_ROOT before the initialization of pyenv if you want to have pyenv at non-default location. Guessing PYENV_ROOT from script path might break pyenv installation managed by external package managers (e.g. Homebrew).\nexport PYENV_ROOT=\"/somewhere/to/pyenv\"\nexport PATH=\"${PYENV_ROOT}/bin:${PATH}\"\neval \"$(pyenv init -)\"\n. libreadline-dev\n. Please gist the full output of pyenv install -v 2.5.6 2>&1 | gist.\n. ok. thanks for feedback :)\n. I don't have any of curl errors without mirroring setuptools on Debian sid. It sounds that the SSL Certificate setup of your curl installation might broken.\nPlease describe your actual error output at gist and tell me your platform.\n. Sounds really strange.... Does your network have proxy?\nI can setup mirror of setuptools, but by the problem of disk space, I don't want to do if this does not affect most users. BTW, unlike setuptools-0.7.x, the setuptools-0.9.x is distributed via https://pypi.python.org/ (not https://bitbucket.org/). Updating pyenv (install from either brew or git) doesn't help you?\n. You're welcome.\n. Because pyenv is using shims to inject commands into $PATH, this is not avoidable in pyenv.\n. Your $PATH setup seems to be broken.\nBecause pyenv uses shims to inject commands into $PATH, $HOME/.pyenv/shims should come earlier than /usr/bin. In this case, command -v python should return /home/aleiphoenix/.pyenv/shims/python in place of /usr/bin/python.\nYou must have following code in ~/.bash_profile.\n```\nsome personal setting stuff\nexport PATH=\"$HOME/.pyenv/bin:$PATH\"\neval \"$(pyenv init -)\"\n.\nmkdir -p \"$(pyenv root)/cache\"\n``\n. The cause of build failure of CPython 2.4 is thatsetup.pyis not be able to find libraries from path like/usr/lib/x86_64-linux-gnu. Install all dependencies (such likezlib,readlineandbzip2`) into pyenv's prefix might solve the problem. I think it is overkill, though.\nTo fix build, I backported patch from 2.5 to 2.4.2 and 2.4.6 at 2646c6c1594b306e36b721577085209c9fc92e30. I confirmed it fixes build on Debian sid. Please try it out.\n. ok. I'll merge 2646c6c1594b306e36b721577085209c9fc92e30 into master. Thanks for sending PR :+1: \n. hmm... I could build 2.4.2 too on Debian sid amd64 without any problems.\nI googled and found similar issue like you. Try with env PYTHON_CFLAGS=\"-O0\" pyenv install 2.4.2 might help you.\n. hmm... ok.\nJust curious, I'd like to try building on i386 to find out which release of 2.4 introduces the problem, if I have time.\n. Oops. Thanks :+1:\n. Please try initializing pyenv after setting up your $PATH.\nexport PATH=\"$PYENV_ROOT/bin:$PATH\"\neval \"$(pyenv init -)\"\n. @Adynatos :+1:\n. @alfetopito \npyenv even supports Python flavors other than CPython. Because the dependencies are depending on the Python flavor/version to build, checking dependencies is somewhat complicated.\nI wrote pyenv-doctor to check dependencies before actual build. It might help this kind of situations.\n. I tried to build 2.6.8 on fresh installation of Ubuntu 13.04 Server amd64, and succeeded. I used following script to setup pyenv.\n``` sh\n!/bin/bash -ex\nsudo apt-get update\nsudo apt-get install -y git build-essential zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev\ngit clone https://github.com/yyuu/pyenv.git ~/.pyenv\nexport PATH=\"$HOME/.pyenv/bin:$PATH\"\neval \"$(pyenv init -)\"\npyenv install -v 2.6.8\n```\n@starlocke \nPlease gist the output of pyenv install -v 2.6.8 2>&1.\n. @starlocke \nYep, you don't need to gist if you succeed to build.\nAs you written, the missing build dependencies must be the one of most big pitfall for pyenv users. I'd like to improve pyenv doctor command to notice users what is wrong.\n. libssl-dev\n. not a problem of pyenv.\n. @kennethreitz Thanks for suggestion. I added some code on failed import to display a pointer to the Common-build-Problems in 733cb397b23d771f8165c3d556df9abc5e1487ec.\n. pyenv doesn't care about hashlib. You might need some of dependent libraries/headers for hashlib on Ubuntu 10.04. Or, you might need to add patch  at patches for 2.6.8.\n. You need to learn more about C programming.\n. Personally, I don't like to have application specific marker in shims.\nIn pyenv, there is rehash hook to change the behaviour on generating shims. For example, the pyenv-pip-rehash generates special shims for pip. I think that the implementation depending on the marker (PYENV-SHIM-SCRIPT) in shims is not able to handle those shims generated by plugins.\nI think that there are other ways to determine if the script is the pyenv's shim.\n1. If the script includes the declaration of PYENV_ROOT (kislyuk/argcomplete#60)\n2. If the script path starts from  $(pyenv root)/shims\n. I cannot guarantee anything, but I believe that the changes in directory structures will not be unlikely occurred in near future.\n. Thanks!\n. Thanks :+1: \nI have created pyenv-installer as the semi-automated installer script of pyenv. Need some more work to improve it, though.\n. I've never built CPython with --enable-framework. It seems that the --enable-framework can take an argument of the installation path. Specifying the pyenv's prefix as its value might help the problem of Permission denied. (there might be other problems though)\nenv PYTHON_CONFIGURE_OPTS=\"--enable-framework=$(pyenv root)/versions/3.3.2 --enable-toolbox-glue --enable-ipv6 --enable-big-digits --enable-unicode --with-threads\" pyenv install 3.3.2\n. You should not override --prefix since it will be set by python-build (see python-build)\nI confirmed the build success of CPython, but I found that there is another problem in setuptools with CPython installation built with --enable-framework.\n```\n% env PYTHON_CONFIGURE_OPTS=\"--enable-framework=$(pyenv root)/versions/3.3.2 --enable-toolbox-glue --enable-ipv6 --enable-big-digits --enable-unicode --with-threads\" pyenv install 3.3.2\nInstalling Python-3.3.2...\nInstalled Python-3.3.2 to /Users/yyuu/.pyenv/versions/3.3.2\nDownloading setuptools-1.1.tar.gz...\n-> https://pypi.python.org/packages/source/s/setuptools/setuptools-1.1.tar.gz\nInstalling setuptools-1.1...\nBUILD FAILED\nInspect or clean up the working tree at /var/folders/n5/tgh638196qbcdk03f4ppj8jm0000gn/T/python-build.20130902172148.28731\nResults logged to /var/folders/n5/tgh638196qbcdk03f4ppj8jm0000gn/T/python-build.20130902172148.28731.log\nLast 10 log lines:\n    class bdist(Command):\n  File \"/Users/yyuu/.pyenv/versions/3.3.2/Python.framework/Versions/3.3/lib/python3.3/distutils/command/bdist.py\", line 32, in bdist\n    \"(default: %s)\" % get_platform()),\n  File \"/Users/yyuu/.pyenv/versions/3.3.2/Python.framework/Versions/3.3/lib/python3.3/distutils/util.py\", line 103, in get_platform\n    distutils.sysconfig.get_config_vars(),\n  File \"/Users/yyuu/.pyenv/versions/3.3.2/Python.framework/Versions/3.3/lib/python3.3/distutils/sysconfig.py\", line 531, in get_config_vars\n    func()\n  File \"/Users/yyuu/.pyenv/versions/3.3.2/Python.framework/Versions/3.3/lib/python3.3/distutils/sysconfig.py\", line 456, in _init_posix\n    raise DistutilsPlatformError(my_msg)\ndistutils.errors.DistutilsPlatformError: invalid Python installation: unable to open /Users/yyuu/.pyenv/versions/3.3.2/include/python3.3m/pyconfig.h (No such file or directory)\n``\n. BTW, is there any reason to set--enable-framework?\n. @Rnhmjoj  The problem seems to be the CPython installer failed to runpython3.3executable. Did you remove the pyenv built3.3.2during thepyenv install 3.3.3?\n. @Rnhmjoj \nThepyenv installwill set the shell version internally during build of CPython. This is because CPython installer requires the existing installation of CPython if it is found in$PATH`.\nhttps://github.com/yyuu/pyenv/blob/589872affb167cbd5d611fb99a2771176f258c68/plugins/python-build/bin/pyenv-install#L167\nIn this case, just retrying pyenv install 3.3.3 might solve the issue.\n. @Rnhmjoj What version of pyenv are you using? Because the latest brew formula is 0.4.0-20140110.1, it is not able to handle --enable-framework expectedly.\n. @Rnhmjoj Please try reinstalling pyenv from github HEAD and try again.\n. Not a kind of pyenv problem. See your $PATH of your bash.\n. It sounds strange. The significant changes between rbenv and pyenv are in ruby-build and python-build. There is nothing special in pyenv-init compared with rbenv-init.\nPlease review your bash configuration and retry again.\n. Thanks :+1:\n. Thanks for feedback from OpenBSD :octocat:\nUnfortunately, I cannot merge this since it uses zxvf (gzip) on extraction. Because the archives of stackess and pypy are compressed as bzip2, we need to process more carefully.\n. I pushed 60c662de7f6e5a8ac966dfa88e3128965fa824a1 as workaround for this issue.\n. Please use special version system to use system Python.\n$ pyenv shell system\n. Even if there is ~/.pyenv/shims in $PATH, pyenv will execute system Python if the pyenv version is system.  In pyenv, there is no way to remove ~/.pyenv/shims from $PATH. \n% pyenv shell system\n% which python  # `python` will be looked up from pyenv's `shims` path\n/Users/yyuu/.pyenv/shims/python\n% pyenv which python  # `pyenv` will look up `python` from `/usr/bin` if the version is `system`\n/usr/bin/python\n. Because rbenv doesn't have deactivation feature, I don't like to have it in pyenv too. There is still a chance to implement it as a plugin.\n. As you claimed, there must be the certificate issue in https://pypi.python.org/. Try again with using pyenv's cache might help you.\n% mkdir -p \"$(pyenv root)/cache\"\n% wget --no-check-certificate -O \"$(pyenv root)/cache/setuptools-1.1.4.tar.gz\" https://pypi.python.org/packages/source/s/setuptools/setuptools-1.1.4.tar.gz\n% wget --no-check-certificate -O \"$(pyenv root)/cache/pip-1.4.1.tar.gz\" https://pypi.python.org/packages/source/p/pip/pip-1.4.1.tar.gz\n% pyenv install 3.3.2\n. Nothing is wrong in pyenv.\n. I have never tried pyenv on cygwin, and also have never heard the issue like this :(\nIf you didn't apply --with-system-ffi to ./configure of CPython, the libffi will be build from the source bundled with CPython (see Modules/_ctyles/libffi of source archive of CPython). Because this is a building issue of CPython on Windows, I think that it is better to check the issue tracker of CPython before asking something to libffi guys.\n. I'm no longer using Windows. I don't like to waste my time with such thing. \n. Please describe the detail of the failure.\n. The dependencies you mean is the dependencies of CPython, not pyenv itself. You can maintain dependencies list by yourself because this is an OSS.\n. It seems that setup.py of CPython 2.7.5 prefers ncursesw than ncurses. It might be the problem of lacking development headers of libncursesw.\nMy CPython 2.7.5 built on Debian sid uses libncursesw.so.5.9 from curses.\n% lsof | grep python | grep curses\npython    25046             yyuu  mem       REG                8,1    196512 48791565 /lib/x86_64-linux-gnu/libncursesw.so.5.9\npython    25046             yyuu  mem       REG                8,1    291185 11600608 /home/yyuu/.pyenv/versions/2.7.5/lib/python2.7/lib-dynload/_curses.so\n. It is possible to build readline in pyenv. We're building readline on OS X where the platform with faux readline. See also $(pyenv root)/plugins/python-build/share/python-build/2.7.5.\n. At first, I don't recommend you to use pyenv always, especially for server applications. The pyenv is mainly designed for development use. If you have problem of pyenv with mod_wsgi, I would recommend you to rebuild dedicated CPython for mod_wsgi without using pyenv.\nSecond, if you want to create shared library of CPython, you might need to specify --enable-shared as an option of ./configure. Please try to rebuild with env PYTHON_CONFIGURE_OPTS=\"--enable-shared\" pyenv install -v 2.7.5 to enable shared library. If you have finished building CPython with --enable-shared, you might need to declare proper LD_LIBRARY_PATH to load built shared library.\nThird, the binary size issue between CentOS and Debian sounds strange for me. I'd like to check the difference between them.\n. The LD_LIBRRY_PATH is for GNU/Linux. Darwin uses DYLD_LIBRARY_PATH as the library search path. We must treat most of platforms properly.\n. I pushed 43212f64ed771f4509e2387c9a4c265e2a1cb46a which will set rpath if --enable-shared was given in PYTHON_CONFIGURE_OPTS. With this fix, just passing --enable-shared will resolve the issue.\n$ env PYTHON_CONFIGURE_OPTS=\"--enable-shared\" pyenv install 2.7.5\n. I have never ran into similar problems. Though, the patches are welcome :+1:\n. @s1341 Sorry to be late. I don't like to have definitions per target architectures. I think that doing like pyenv install --debug is fair.\nI created my workaround to build 32bit binary as 387d69a3883cebcf69efe2fd9b98ac56f75a7aa8 (on the branch named 32), please try it later.\n. I pushed 43212f64ed771f4509e2387c9a4c265e2a1cb46a which will set rpath if --enable-shared was given in PYTHON_CONFIGURE_OPTS. With this fix, following one liner will build 32bit Python with shared library.\n% env PYTHON_CONFIGURE_OPTS=\"--enable-shared\" CFLAGS=\"-m32\" LDFLAGS=\"-m32\" pyenv install 2.7.6\n. I don't like to add special feature for building 32bit binaries. Please use CFLAGS and LDFLAGS to specify compiler/linker flags.\n. Please read the README of  python-build at https://github.com/yyuu/pyenv/tree/master/plugins/python-build#special-environment-variables\n. AFAIK, mounting /tmp with noexec is not the default configuration of any major platforms. Because it is a user's custom configuration, it must be treated by oneself.\n. Try pyenv install --keep 2.7.5.\n. RTFM\nCommon-build-problems\n. You can get current version(s) via pyenv version or pyenv version-name. Just use PS1=\"\\w $(pyenv version-name)\" doesn't help in this case?\n. You seems little confused. If you aren't developing something against cross Python versions, you would not need to have multiple global versions at once. Just use single version as global (eg. pyenv global 2.7.5).\n. The global version is the single global version. If you need to switch between the versions conditionally, I think you might prefer the local version or shell version instead of global version.\n. pyenv does nothing about pip's configuration. This seems to be an issue of pip, or an issue of the package of pip.\n. Nothing has to be fixed in this issue.\n. Please use pyenv-virtualenvwrapper instead of using virtualenvwrapper directly from pyenv.\n. This seems similar issue like this.\nhttp://stackoverflow.com/questions/17539229/does-buildout-easy-install-setup-tools-verify-ssl-certificates\nIf the SNI is the matter, just doing apt-get install curl might help.\n. Installing wget 1.14+ or curl 7.18.1+ will help this.\n. 5d9132623fa849b9a941a81a68ec0dd078ea0464\n. It will not take so long. I will process the formula update later.\n. Interesting :+1: \nI added pyparallel as pyparallel-dev in ce78036f2d5de7163451d6d277d32d0139b88d9c (not merged into master yet; just in the add-pyparallel branch of pyenv). Unfortunately, the build of pyparallel-dev is still not succeeded on my Debian sid host. Now I'm investigating to fix the build.\n. I would recommend you to setup PATH if you want to install into shared location. Please see also Deploying-with-pyenv.\nOn the sudo case, if the env_reset has been set in /etc/sudoers, some of environment variables such like PATH will be discarded during execution. To prevent this behaviour, you might need to setup PATH for root user by yourself.\n. I don't like shell function like sudopybrew to keep pyenv solid. But still there might be chances to implement the feature as user's shell configuration, or as a plugin of pyenv.\n. With setting PYENV_ROOT environment variable, you can share pyenv installation between users (including root). To use pyenv via sudo, you might need extra configuration in /etc/sudoers to allow users to run commands in ${PYENV_ROOT}/bin, ${PYENV_ROOT}/libexec and ${PYENV_ROOT}/shims. (See also sudoers(5) for detail)\nIt is available, but I would not recommend such kind of configuration because it is too complicated.\n. I'm happy if you created a new PR.\n. Unfortunately, the base branch add-pyparallel includes the works in #78 that should not be merged into master as of time of writing this. I've cherry-picked 567daceeeab30def1dfa15d69b82660cd207ada1 into master instead of merging this request. Thanks for PR :+1:\n. RTFM\nhttps://github.com/yyuu/pyenv/wiki/Common-build-problems\n. You might need to set LD_LIBRARY_PATH on GNU/Linux if you give --enable-shared as CONFIGURE_OPTS. See also #66.\n. I pushed 43212f64ed771f4509e2387c9a4c265e2a1cb46a which will set rpath if --enable-shared was given in PYTHON_CONFIGURE_OPTS. With this fix, just passing --enable-shared will resolve the issue.\n$ env PYTHON_CONFIGURE_OPTS=\"--enable-shared\" pyenv install 2.7.5\n. :+1:\n. The build dependencies are listed on Common-build-problems.\n. The line Configured with: ... was printed by llvm-gcc (Try gcc --version on OS X) . The displayed configure options are not relevant to the options for CPython.\n% mkdir ./py27\n% bash -x $(pyenv root)/plugins/python-build/bin/python-build 2.7.5 ./py27 2>/dev/null | grep -C1 'Configured with:'\n++++ /usr/bin/gcc --version\nConfigured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/usr/include/c++/4.2.1\n+++ local 'version=Apple LLVM version 5.0 (clang-500.2.79) (based on LLVM 3.3svn)\n. There is special version system in pyenv which allows you to find executables from $PATH as same mechanism as plain shells.\n. Thanks for PR :octocat: \n. You might have wrong value in $SHELL environment variable. I am using pyenv with zsh on OS X 10.9 without any problems.\n/usr/local/Cellar/pyenv/20131116/libexec/../completions/pyenv.bash:16: command not found: complete\nhttps://github.com/yyuu/pyenv/blob/76bf3ee0d65248fb6ffcbc57945d790f7e2fd977/libexec/pyenv-init#L104\n. I would not recommend you to use PYTHONPATH or PYTHONHOME with pyenv.\n. mkdir -p \"$(pyenv root)/cache\"\n. Interesting.\nThere is apply_patches() function in python-build which searches appropriate patches from $(pyenv root)/plugins/python-build/share/python-build/patches/* then apply them. Extending that function might allow you to apply extra patches like pytracemalloc.\nhttps://github.com/yyuu/pyenv/blob/3d5156ed1d2df3e566f5b8891760f99209edcb81/plugins/python-build/bin/python-build#L163\n. I wrote a patch 75559df89de94c441aea999b36db711929573bab (try with apply-extra-patches branch) to apply extra patches from given directory. Please try it out.\n$ git clone https://github.com/wyplay/pytracemalloc.git\n$ mkdir ./patches\n$ cp ./pytracemalloc/python2.7.patch ./patches\n$ env PYTHON_PATCH_PATH=\"./patches\" PYTHON_PATCH_OPTS=\"-p1\" pyenv install -v 2.7.6\n. Now I am working to merge patching feature from ruby-build into python-build (on ruby-build-style-patching branch). With this fix, the pyenv install will read the patch from standard input if -p option is given.\n$ git clone https://github.com/wyplay/pytracemalloc.git\n$ cat pytracemalloc/python2.7.patch | env PYTHON_PATCH_OPTION=\"-p1\" pyenv install -p -v 2.7.6\n. Unfortunately, the patching interface has been changed again :confounded: \nThe current impl of patching mechanism of python-build requires a patch to be formatted as in -p0. Because of the patch of pytracemalloc is provided as in -p1, we need to transform the strip level before applying it. Luckily there is filterdiff(1) available (AFAIK, it is available as a package named patchutils via brew, apt-get, etc.) and it can transform the strip level of a patch.\n$ git clone https://github.com/wyplay/pytracemalloc.git\n$ cat pytracemalloc/python2.7.patch | filterdiff --strip=1 | pyenv install -p -v 2.7.6\n. I confirmed that is working at e1a5b326e41ba9f868f429bd3509462089551ff5 (latest master branch) on Debian GNU/Linux sid. Please tell me your environment if it is not working.\n. The patching feature is working fine for me.\n. pyenv can manage multiple versions at once.\nLet's say if you have two versions of 2.7.6 and 3.3.3. If you prefer 2.7.6 over 3.3.3,\n% pyenv global 2.7.6 3.3.3\n% pyenv versions\n  system\n* 2.7.6 (set by /Users/yyuu/.pyenv/version)\n* 3.3.3 (set by /Users/yyuu/.pyenv/version)\n% python --version\nPython 2.7.6\n% python2.7 --version\nPython 2.7.6\n% python3.3 --version\nPython 3.3.3\nor, if you prefer 3.3.3 over 2.7.6,\n% pyenv global 3.3.3 2.7.6\n% pyenv versions\n  system\n* 2.7.6 (set by /Users/yyuu/.pyenv/version)\n* 3.3.3 (set by /Users/yyuu/.pyenv/version)\n  venv27\n% python --version\nPython 3.3.3\n% python2.7 --version\nPython 2.7.6\n% python3.3 --version\nPython 3.3.3\n. pyenv doesn't manage dependencies relating to Tkinter.\nIt seems that the dependencies of Tkinter has not been installed on your system. If you're using Debian, please try sudo apt-get build-dep python-tk. Then, rebuilding CPython will resolve your issue.\n. Oops. That's too bad :(\nI think you have some options to use pyenv from Chinese network.\n1. Use your own build definitions\n2. Setup and use your own mirror site for python-build\nThe former one is an easy solution. The python-build command (backend of pyenv install) can take a file argument which describes the build definition. If you already have mirror of pypi and it is available over HTTP(S), you can use it by modifying the definition.\nLet's say if you have mirror at http://pypi.example.com/, just replace https://pypi.python.org/ by http://pypi.example.com/ in the definition.\n% cat \"$(pyenv root)/plugins/python-build/share/python-build/2.7.6\" | sed -e 's!https://pypi.python.org!http://pypi.example.com!g' > 2.7.6\n% pyenv install ./2.7.6\nThe latter is a bit more complicated. The python-build has capability to use the optional mirror site via environment variable of PYTHON_BUILD_MIRROR_SITE. There is http://yyuu.github.io/pythons and it is used from python-build by default.\nYou can setup your own mirror by following procedures.\n1. Get source of mirror site from https://github.com/yyuu/yyuu.github.com\n2. Download setuptools and pip, and save them by renaming to their value of md5sum\n3. Make the mirror available via HTTP(S)\n4. Set mirror URL in PYTHON_BUILD_MIRROR_SITE\n. Nothing have to be done.\n. The version-ext-compat has just left for backward compatibility. There's no difference between version-ext-compat and pyenv-version-ext, and you can install both in same time.\nI was too lazy to maintain the plugins listed in pyenv-installer. I will update pyenv-installer to add pyenv-version-ext. Thanks.\n. The pyenv-version-ext is having higher precedence than version-ext-compat. If both of them are installed, pyenv-version-ext will be used always.\nYou don't need to remove version-ext-compat manually. I'm planning remove the version-ext-compat from thefuture release of pyenv.\n. There's no way to hook version switching in pyenv. The version in pyenv will be determined at runtime of shims of pyenv, from one of the sources listed below.\n1. the shell version from environment variable of PYENV_VERSION\n2. the local version from file of .python-version\n3. the global version from file of $(pyenv root)/version\nBecause the pyenv will inject shims for pip in front of the PATH, just executing pip can handle the version switching in pyenv. I would recommend you to setup shell completion without doing anything special.\nexport PATH=\"$HOME/.pyenv/bin:$PATH\"\neval \"$(pyenv init -)\"\neval \"$(pip completion --bash)\"\n. What version of virtualenv are you using? It seems working with virtualenv 1.11 on my machine.\n% pyenv version\n2.7.6 (set by /home/yyuu/foo/.python-version)\n% which python\n/home/yyuu/.pyenv/shims/python\n% pyenv which python\n/home/yyuu/.pyenv/versions/2.7.6/bin/python\n% virtualenv --version\n1.11\n% virtualenv -p \"$(which python)\" bar\nRunning virtualenv with interpreter /home/yyuu/.pyenv/shims/python\nNew python executable in bar/bin/python\nInstalling setuptools, pip...done.\n% ./bar/bin/python -c 'import sys; print(sys.real_prefix)'\n/home/yyuu/.pyenv/versions/2.7.6\n. Reproduced same error with setting the pyenv version as system.\n% pyenv version\nsystem (set by /home/yamashita/foo/.python-version)\n% virtualenv -p \"$(which python)\" bar\nRunning virtualenv with interpreter /home/yamashita/.pyenv/shims/python\nNew python executable in bar/bin/python\nERROR: The executable bar/bin/python is not functioning\nERROR: It thinks sys.prefix is u'/usr' (should be u'/home/yamashita/foo/bar')\nERROR: virtualenv is not compatible with this system or executable\n. It seems that the CPython's sys.executable requires the path to the python executable should be in PATH. The b6f9a6345d5dbc51ad66782ebffe302e234d737d should fix the problem with system version.\n% pyenv version\nsystem (set by PYENV_VERSION environment variable)\n% virtualenv -p \"$(which python)\" bar\nRunning virtualenv with interpreter /home/yyuu/.pyenv/shims/python\nNew python executable in bar/bin/python\nInstalling setuptools, pip...done.\n. It might be an issue of virtualenv with miniconda's python executable. Anyway virtualenv is virtualenv, not pyenv. \n. The pyenv will not support --enable-framework because the setuptools doesn't support the Python installation built with it.\n. @randy3k The --enable-framework has been supported in pyenv from v0.4.0-20140123. It will create symlinks for bin, include, lib and share if --enable-framework is given. Please see also #55.\n. @randy3k Great :+1:\n. Please use pyenv-virtualenvwrapper instead.\n. Basically, I don't like to  modify shims to keep compatibility between sibling projects like rbenv.\nPlus, I don't believe that the ${prefix}/bin is the right place to install non-executable scripts. AFAIK, only virtualenv and viralenvwrapper installs source scripts into ${prefix}/bin. Because they are the irregular cases, I prepared dedicated plugins for them.\n. If you cannot invoke pyenv-sh-* commands from pyenv, perhaps you need to restart your shell after the installation of pyenv-virtualenvwrapper.\nIt is because the shell function of pyenv caches the list of pyenv-sh-* commands in its definition. Just restarting the shell or invoke eval \"$(pyenv init -)\" again will solve the issue.\nAnd, I've added some error handling codes and unit tests in pyenv-virtualenvwrapper. Please try again with latest pyenv-virtualenvwrapper.\n. Again, I really don't like to modify shims to keep compatibility between sibling projects.\n. Any updates on this?\n. The environ GREP_OPTIONS seems to be an extension of GNU grep. Now I'm investigating around the usage of grep  if there is another pitfall affected by GREP_OPTIONS.\n. I pushed 9c823145704d09c94d7fff00ea3c7cb0606ff951 as a workaround for this issue. It includes the fix and test for it. Same change has also sent as sstephenson/rbenv#531 .\n. The sstephenson/rbenv#531 has been rejected. Because of compatibility between rbenv, pyenv impl relating to GREP_OPTIONS might be reverted in future release of pyenv.\n. Please tell me your platform, and gist the actual error output from the failed bulid.\n$ pyenv install -v 3.3.3 2>/dev/null | tee pyenv.log\n. Close the issue by insufficient information.\n. I couldn't get the point to fix.\nThe md5sum will be compared for downloaded contents. If the firewall blocks the URL and returns a HTML, pyenv will stop the processing since the md5sum of downloaded content is unexpected.\nDetecting file types is not reliable, and is incomplete. I believe that comparing the checksum is sufficient here.\n. The python-build will exit with error if the HTTP server returns an error response such like HTTP 404. If the download is successed, the checksum is compared strictly, and raise error if the checksum is differ. I believe there is no problem.\nIf you really think something is insufficient, please send me a workable patch.\n. This must be a problem of a module of CPython. If you have a patch of CPython, you can apply it during build with pyenv.\n$ cat foo.patch | pyenv install -p -v 2.7.6\n. I couldn't find the full build log of CPython from your gist. Did you modify the output from pyenv install -v 3.3.3?\n. I confirmed the success of build of CPython 3.3.3 on Raspbian (2014-01-07-wheezy-raspbian.img) running on QEMU, with installing some extra packages.\npi@raspberrypi ~ $ uname -a\nLinux raspberrypi 3.10.26+ #2 Fri Jan 17 22:13:59 EST 2014 armv6l GNU/Linux\npi@raspberrypi ~ $ sudo apt-get install libssl-dev zlib1g-dev libbz2-dev libreadline-dev\npi@raspberrypi ~ $ pyenv install -v 3.3.3\n(... snip ...)\npi@raspberrypi ~ $ pyenv shell 3.3.3\npi@raspberrypi ~ $ pyenv which python\n/home/pi/.pyenv/versions/3.3.3/bin/python\npi@raspberrypi ~ $ python --version\nPython 3.3.3\n. Nothing was special on Raspbian. There is Common-build-problems, and I think that is appropriate for this kind of problems.\n. Duplication of #42.\nThis can't be avoidable because pyenv manges shims for these *-config executables if there is CPython installed. I'd like to add some workarounds for this issue if available, but haven't found the way to deal with this yet.\n. @nZac You don't have to modify rc file. Just setting the version as system (e.g. pyenv shell system) before installing something with brew can force brew to use system python. Warnings from brew doctor can be safely ignorable in this case.\n. @blueyed You understand correctly. For the user of pyenv who don't want complicated thing about python installation, I'd recommend to use pyenv shell system when installing something relating to python via brew.\n. I don't have any general solution to solve this issue, because this warning is thrown outside from pyenv. Feel free to send patches if someone has idea.\n. It is the expected behaviour since the system python and pyenv-built python are completely different installation.\nIf you are really sure and want to mix libraries between these environments, there are environment variables of PYTHONHOME and PYTHONPATH existed in CPython to manage library path (see also python(1)). Although I would not recommend you to mix them because there might be binary incompatibility issues.\nAs an alternative approach to share libraries between system python and a pyenv version, you can use virtualenv. If the --system-site-packages is enabled for the virtualenv, the python executable in created virtual environment will load the libraries from its source version. In following example, the version foo will be created as a virtualenv with system libraries. Please see also the virtualenv documentation for details.\n$ sudo apt-get install python-virtualenv\n$ git clone https://github.com/yyuu/pyenv-virtualenv.git ~/.pyenv/plugins/pyenv-virtualenv\n$ exec \"$SHELL\"\n$ pyenv virtualenv --system-site-packages system foo\n$ pyenv global foo\n. It seems to be the lack of development header of sqlite3. Please install libsqlite3-dev (on Debian/Ubuntu) or so to fix the issue. Please consult to the Common build problem.\n. Using -p of virtualenv will allow you to create a virtual environment from specified python installation. The virtualenv command will use the runtime python installation as source of new virtual environment if the -p is missing.\n$ virtualenv -p /usr/bin/python --system-site-packages ~/.pyenv/versions/foo\nor, with using pyenv-virtualenv,\n$ pyenv virtualenv --system-site-packages system foo\n. Looks strange. Installing headers of GNU readline (in this case, readline-develop.x86_64) should resolve the issues like this. Please let me know further information.\n1. Check if there is /usr/include/readline/rlconf.h\n2. Check if the readline module has been built for \"python from source by hand\"\n3. Please gist the output from pyenv install -v 2.7.6 2>&1 | tee build.log\n. I'm happy if your issue has been solved. Please let me know the configuration in .pydistutils for future reference, if you can.\nAlso, your build procedure seems fine. You can try testing if the readline module has been built by invoking /vol/apps/user/python/python3.3.3/bin/python -c \"import readline\".\n. Added a workaround for this problem in 854f6f3a46dd2406186816e53235bd7bdc378e62. Will exit with 1 if there is ~/.pydistutils.cfg.\n. Thanks :+1:\n. Thanks :+1:\n. The sudo pip install lxml will execute pip install as the root user. Because the pip will be evaluated in another user's shell, (for most cases) pyenv will not be used during the invocation.\nIf you want to install lxml into pyenv built 2.7.5, please just try invoking with pip install lxml.\n. The issue has solved?\n. Unfortunately, I cannot merge this because Homebrew requires each applications to not have update feature. Please see also Acceptable Formula.\nThere is an external plugin of pyenv-update. Please use it for the update feature.\n. You can use pyenv-installer as\nthe single-line installer for pyenv. Please look at it.\n\n. It is just by my laziness. I will update README later. Or please send me a\nPR to update the doc surely ;-)\n\n. Fix has been merged as #118\n. Thanks :octocat:\n. I don't like to merge this to keep pyenv solid. This can be implemented as an external plugin of pyenv. Please see also Authorizing plugins for details.\n. The Ruby stuff in python-build will never be called during building Pythons. Plus, even if these code will be called, the manipulation of $PATH will just affect python-build which is a child process from pyenv, and will not have no effect for user's shell and other tools (e.g. rbenv).\nhttps://github.com/yyuu/pyenv/blob/a1ffc93372087da0ffd2afe1486d540d20c51e08/plugins/python-build/bin/python-build#L1095\nIf you still have any problem, please let me know how to reproduce it.\n. It will never reach to the python-build during eval \"$(pyenv init -)\", unless you are trying to invoke pyenv install in your ~/.zshenv.  Plus, because the python-build will be invoked as child process of current shell, it will not affect user's shell environment including GEM_HOME and PATH.\nI'm using pyenv and rbenv together without any problems. Please review your shell again.\n. Thanks :+1:\n. Do you have /usr/lib/x86_64-linux-gnu/libffi.so*? Please show me the outputs from dpkg -l | grep libffi and ls -l /usr/lib/x86_64-linux-gnu/libffi.so*.\n. Running sudo ldconfig might help pypy to load libffi.so.6 from /usr/local/lib.\nBut there should be other incompatibility issues of PyPy binary distributions on Debian wheezy. I would recommend you to build PyPy from source. (the official document says that the binary distribution of PyPy 2.2.1 is built for Ubuntu 12.04.2 LTS).\nTo build PyPy from source, please try installing the definition like pypy-2.2.1-src in place of pypy-2.2.1.\n. This must be a binary compatibility of PyPy releases.\nI added some warnings in 0c6b28c9aa58d2b5331b9225e8275cf1f9df0d07 if the binary is not built for the platform. The only possible solution for this is to build PyPy from source.\n. :+1:\n. Currently, the list of build dependencies is maintained on Wiki page.\nI think that something like rbenv-bootstrap is demanded for pyenv.\n. Documentation help is always welcome. Please send me PRs if you update the docs.\n. @fgimian Great article :+1:\n. Please let me know further information for the investigation.\n1. What is your platform and distro?\n2. How did you install GNU Readline 6.3? Just doing like ./configure && make && make install?\n3. Can you build CPython 2.7.6 and 3.3.4 with linking against GNU Readline 6.3?\n4. Please gist the output from pyenv install -v 3.2.5\n. I found some of CPython+Readline issues might affect this. Linking libreadline.so against libtinfo.so (./configure && make SHLIB_LIBS=\"-ltinfo\" && make install && ldconfig) might help if you are on Linux or FreeBSD.\n- https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=602720\n- http://bugs.python.org/issue9408\n- http://bugs.python.org/issue7384\n. I opened #152 to fix the issue with Readline 6.3. Please try it out.\n. AFAIK, llvm (clang) is not a dependency to build CPython on GNU/Linux. On Debian/Ubuntu, installing build-essential will install gcc and it is sufficient.\nPlus, you don't need to install both wget and curl. Installing either is sufficient for most cases. Though, I would recommend you to install curl if you are on older platform such like Ubuntu 10.4 (there is SNI issue with older wget (see also #60)).\n. Please let me think about the compatibility between rbenv and siblings.\nBasically, I don't like to introduce pyenv specific modifications in pyenv core because of the compatibility issues. I'd like to try again to find a way to improve the performance of pyenv virtualenvwrapper_lazy, without modifying pyenv-which.\n. Many of code of pyenv were copied from rbenv, with minimum modifications to add some pyenv specific feature (e.g. multi-versions). For instance, the remove_from_path() is used as is in rbenv.\nTo keep compatibility between rbenv, sometimes I try to backport the pyenv specific feature to rbenv. If this is useful even for rbenv, I might be going to do it.\n. ok, I'll look into this.\nOn Tuesday, October 14, 2014, Daniel Hahler notifications@github.com\nwrote:\n\nAssigned #129 https://github.com/yyuu/pyenv/pull/129 to @yyuu\nhttps://github.com/yyuu.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/yyuu/pyenv/pull/129#event-177812189.\n\n\n\u5c71\u4e0b \u512a (\u3084\u307e\u3057\u305f \u3086\u3046)\npeek824545201@gmail.com\n. LGTM :+1:\n. I have never tested yet, but does this useful for everyone who wants to build CPython 2.6.9? You can apply your own patch with passing -p option to pyenv install. (e.g. cat foo.patch | pyenv install -p 2.6.9)\n. Okay. Please wait for awhile to try this out.\n. I confirmed the build failure of CPython 2.6.9 on latest Debian GNU/Linux sid (readline-dev 6.3, tk-dev 8.6.0). Also, I confirmed that this fixes the build.\n. @zackw \nThe pyenv tests the existence of modules of readline, ssl, sqlite3, zlib and bzip2 after the build. Though, it is not always necessary, as you suggested.\nThe current tests is prepared for my convenience, to use built python for webapps. I might change the behaviour around this in future changes.\n. Thanks :octocat: \n. @westurner There might be some configuration issues (maybe the PYENV_ROOT environment variable) in your pyenv installation. Please describe more about the issue.\n1. your platform\n2. the output from pyenv --version\n3. the output from pyenv root\n. Documentation help is always welcome. Please send me PRs if you update the docs.\n. Thanks :+1: \n. The pyenv does not provide any methods to hook cd in current shell. It is because rbenv also does not provided those features unlike RVM.\nIf you are using zsh, running pyenv commands in precmd() might help for your case. I am not sure how to implement equivalent with bash.\nprecmd() {\n  pyenv prefix 1>/dev/null\n}\n. This needs help from Debian hackers.\nAFAIK, anyone can send RFP/ITP to Debian project. Please help if you want it.\n. I'm working for this on the debian branch.\n. The debian branch might be working but I'm not sure if it is compliant to\nDebian Policy Manual.\nIf you have experience on Debian/Ubuntu packaging, I hope you to try the\nbranch and notice me if there are spmething bad.\nOn Thursday, September 11, 2014, Daniel Hahler notifications@github.com\nwrote:\n\nFor reference: https://wiki.debian.org/RFP\nhttp://Information%20about%20the%20Request%20For%20Package%20process.\n@yyuu https://github.com/yyuu\nDo you think the debian branch / packaging is OK to submit it?\nI could upload it to Ubuntu (universe), but would prefer to have it there\nvia Debian of course.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/yyuu/pyenv/issues/138#issuecomment-55249666.\n\n\n\u5c71\u4e0b \u512a (\u3084\u307e\u3057\u305f \u3086\u3046)\npeek824545201@gmail.com\n. Sorry for delay, but I don't have enough time to work for this right now. I'd love to merge PR if someone wrote it :octocat:\n. I have no time to keep maintaining packages. I won't work for this anymore. I can help if someone else wants to create some packages, though.\n. There is special environment variable PYENV_ROOT in pyenv, please use it to install pyenv into ~/.config if you want it.\n. :+1:\n. Thanks :+1:\n. Some of tests are broken.\nPlus, the outputs from command-line tools are shared between rbenv. I don't want to change them.\n. Add definition of 2.6.4 as similar as other CPython 2.6 releases.\nhttps://github.com/yyuu/pyenv/blob/master/plugins/python-build/share/python-build/2.6.6\nPlus, some older CPython versions might require additional patches to build them on modern system. If there are patches, put them in patches directory.\nhttps://github.com/yyuu/pyenv/tree/master/plugins/python-build/share/python-build/patches/2.6.6/Python-2.6.6\n. Maybe there is a build issue with clang. I don't like to maintain the build of such too old CPython versions on recent systems.\nIf you need it, please write a patch by yourself. I'm happy if you send me back a PR.\n. If you set pyenv global 3.3.3 and there is no other settings in pyenv, just run python --version should return Python 3.3.3.\nThough, if you have activated virtualenv, there might be conflict of PATH setting. Because the PATH will be overwritten by virtualenv, your shell will not be able to invoke the shim of python of pyenv. In that case, just deactivate the virtualenv will resolve the issue.\n. I confirmed this behavior with system version of pyenv. This might be a problem of pyenv-pip-rehash.\n. Added workaround in 2bb20a029bbfb77fcc2099e65be0e96a96108a32 of pyenv-pip-rehash. Please update pyenv-pip-rehash and try again.\n. Documentation help is always welcome. Please send me PRs if you update the docs.\n. Thanks for reporting the problem.\nAs you described, current impl of python-build prefers gcc even if there is clang installed. It is because its build definitions of CPython start with a line require_cc \"gcc\" \"clang\".\nDeciding which compiler to use can be configurable via CC, but it should follow the default cc of the system. I think that just using cc must be the simplest way to deal with this problem. I will prepare a patch later.\n. @goxberry  I opened #150 to fix this problem. Please try it out if the issue has solved.\n. At first, thanks for the investigation around the problem. But, I couldn't find no significant difference between #126 and #149. Please don't create duplicated issues.\nAnd, thanks for sending a patch. I will try it out, and integrate it into python-build. I am happy if you sent me a patch as a pull-request.\n. @cloudforrest I changed the label of #126 from \"question\" to \"bug\".\nAnd, the patch(1) is enough smart and is able to apply patches even if the line numbers differ. I confirmed that the patch for Modules/readline.c for 2.7.6 can also be applied to the one in 2.6.9.\nI opened #152 to fix the problem with Readline 6.3. Please try it out.\n. Basically, I don't like to add extra commands in pyenv core to keep it solid. Please create the feature as a plugin. Please see also Authorizing plugins.\nPlease update Plugins page wiki if you open-source it :octocat:\n. Please report issues if there is trouble with this patch.\n. It's there in the latest release of pyenv v0.4.0-20140404. Don't create duplicated issues.\nhttps://github.com/yyuu/pyenv/blob/v0.4.0-20140404/plugins/python-build/share/python-build/3.4.0\n. ok. I got it.\n. Thanks :octocat:\n. This issue is somewhat complicated and hard to deal with... I think that there are some options to deal with this issue currently.\n1. Always use anaconda in pyenv.\n   - The version of LLVM (or others) might be an issue\n2. Use miniconda instead of anaconda, and create minimum environment\n   - But, miniconda may eventually installs LLVM also.\n3. Always use system version at the last of the pyenv versions\n   - If the anaconda is not activated in pyenv, then fallback to system\nAs an alternative approach, there is still a chance to implement a hook for pyenv-which, like rbenv-which-ext. This needs implementation of new pyenv plugin, but no additional task is required to deal with the situation. \n. I created new plugin pyenv-which-ext.\nThis may help the issues with Anaconda. Please give it a try.\n. No remaining tasks.\n. Don't create dupes.\n. In pyenv, there is no way to deal with multiple system pythons. The python executable in $PATH will be treated as the system version.\n. Actually, this does not solve the issue, but as the temporal solution, the -p of virtualenv might help you to integrate system python3 into your pyenv.\n$ pyenv virtualenv -p /usr/local/bin/python3 venv3\n. @xu-cheng Oops. The pyvenv seems to be not supporting -p.... Please try again after pip install virtualenv.\n. You don't have to activate created virtualenv. The pyenv allow you to use multiple versions at once. For example,\n$ pyenv global venv2 venv3\n$ python2 --version\nPython 2.7.6\n$ python3 --version\nPython 3.4.0\nPlease see also https://github.com/yyuu/pyenv/blob/master/COMMANDS.md#pyenv-global-advanced\n. The current impl of python-build expects that the ${MAKE} is the path to the executable of make without any arguments. Just unsetting ${MAKE} will resolve the build problem. Please use ${MAKE_OPTS} to specify options for make.\nhttps://github.com/yyuu/pyenv/blob/8851acda130c953e9fb1410c791982c98c1839ad/plugins/python-build/bin/python-build#L578\n. Thanks for PR :+1:\nI am happy if you send the same fix to ruby-build.\n. Thanks :octocat: \n. Sorry to be late. Will release a new version soon.\n. Opened new PR as Homebrew/homebrew#29310. Please wait for awhile.\n. Thanks :octocat: \n. Please try with larger instance types during pyenv install. Because the pyenv install will build CPython from source, it consumes bunch of memory and CPU cycles.\n. I could not reproduce the problem on my OS X 10.9.2 + Apple LLVM version 5.1 (clang-503.0.40) (based on LLVM 3.4svn). Didn't you set export CLAGS='-Qunused-argument' manually?\n. Thanks for PR :+1: I'm sorry to be late.\nI know that the version aliasing is one of requested feature of pyenv. Though, unfortunately, I am somewhat conservative to introduce pyenv specific feature in pyenv install to keep compatibility between ruby-build.\nNow I am looking for other methods to implement this feature. The pyenv install has hooks to run scripts before/after the installation process. It may helps to implement the feature.\n. Install the following script as $(pyenv root)/pyenv.d/install/alias.bash.\nsh\nif [ -n \"${VERSION_ALIAS}\" ]; then\n  VERSION_NAME=\"${VERSION_ALIAS##*/}\"\nfi\nThen, confirm that the installed scriopt has been recognized by pyenv.\n$ pyenv hooks install\n/home/yamashita/.pyenv/pyenv.d/install/alias.bash\nThen, try to install 2.7.6 as 2.7.6-shared.\n$ env VERSION_ALIAS=\"2.7.6-shared\" PYTHON_CONFIGURE_OPTS=\"--enable-shared\" pyenv install 2.7.6\nI confirmed that this is working with my installation of pyenv.\n. I don't have any plan to bundle the alias.bash into pyenv to keep it simple.\nBecause the above hook script doesn't require any modifications to pyenv itself, it can be implemented as a plugin of pyenv. Please refer Authoring plugins to how to write plugins. I am happy if you submit a plugin as an OSS.\n. I am not using IRC. Please ask question on this issue if you have.\n. The pyenv hooks are not supported by all pyenv commands. As of now, hooks are supported by following commands.\n- pyenv-exec\n- pyenv-rehash\n- pyenv-which\n- pyenv-install\n- pyenv-uninstall\nIt is not possible to hook the invocation of pyenv shell as of current impl. If you want to do something similar as pyenv shell with some more features, adding special pyenv-sh-myshell as plugin command will work in your current shell.\nPlease see also the plugin impl. The pyenv-virtualenv might be a good example.\nhttps://github.com/yyuu/pyenv-virtualenv/blob/master/bin/pyenv-sh-activate\n. Anyone can edit the Plugins page.\n. This breaks existing tests. I need to review the changes before merging this. Please wait for awhile.\n. It seems that the ./configure prefers CPPFLAGS and LDFLAGS specified in the command-line arguments rather than the one in environment variables.\nIf the LDFLAGS was specified via environment variable, just use it.\n$ env LDFLAGS=\"--version\" ./configure 1>/dev/null 2>&1\n$ echo $?\n77\nIf the LDFLAGS was specified via command line, just use it.\n$ ./configure LDFLAGS=\"--version\" 1>/dev/null 2>&1\n$ echo $?\n77\nIf the LDFLAGS was specified via both of them, it prefers the one from command line.\n$ env LDFLAGS=\"\" ./configure LDFLAGS=\"--version\" 1>/dev/null 2>&1\n$ echo $?\n77\n$ env LDFLAGS=\"--version\" ./configure LDFLAGS=\"\" 1>/dev/null 2>&1\n$ echo $?\n0\nIf the package_options() sets the CPPFLAGS or LDFLAGS in PYTHON_CONFIGURE_OPTS_ARRAY, it will shadow the corresponding environment variables. This means that the current impl of python-build is not handling these variables as it is expected. Now I am trying to fix the behaviour and relating tests.\n. @s1341 I pushed my edition of dont_clober_ldflags_cppflags at 7612f0391de66b3895edb308f8fe299f107e8f97, with passing tests. Please try it if your problem has solved.\n. Thanks :octocat: \n. Added 3.4.1 in #171.\n. Thanks again! And, I added you as a collaborator of this repo :octocat:\n. I will never add those features to keep pyenv smaller and solid. It must be implemented as a plugin for pyenv. Please see Authoring plugins to how to write a plugin.\n. It sounds great, but I have no idea to implement the feature for now.\nAFAIK, the ruby-build project is managing the updates by users as same as pyenv. I'm not sure but something like Debian's uscan might help this issue.\n. #194 makes us free from updating versions of setuptools and pip, and I think it is sufficient for now.\n. Yep, there is race condition in pyenv-rehash what it is hard to deal with.\nI'm not sure if this is worth for your situation, the Jenkins' plugin of pyenv is providing lock mechanism based on mkdir to avoid concurrent invocations of pyenv-rehash from pyenv-install. Please look at how it is deal with the problem.\nhttps://github.com/jenkinsci/pyenv-plugin/blob/master/lib/pyenv/semaphore.rb\n. Unfortunately, there is no way to install extra pyenv plugins via Jenkins pyenv plugin for now. Please write job script to do special tasks.\n. pyenv is not process safe for now. Please use external lock mechanism (e.g. like jenkins-pyenv-plugin is doing) to avoid race conditions.\n. pyenv will be available if there are ${PYENV_ROOT}/bin and ${PYENV_ROOT}/shims in your $PATH.\nIf you're a user of Sublime Text2 on OS X, https://github.com/int3h/SublimeFixMacPath might help. But please don't ask me about it because I am not a user of both of them.\n. Oops. I'll fix it soon...\n. Thanks :+1:\n. Seems fine. Ok, I'll merge it later.\n. Thanks for PR :octocat:\nUnfortunately, I couldn't find any release of anaconda3 on http://continuum.io/downloads. AFAIK, there is miniconda3 but there isn't anaconda3.  Please remove the definition of anaconda3.\n. Oops. I am so sorry. I overlooked it. :(\nI confirmed that the anaconda3 can be downloaded from Continuum. I will merge this soon.\n. It is the expected behaviour with current impl of pyenv, because it will not do nothing for executable filenames other than python and pip.\nCreating symlink of pydoc in ~/.pyenv/versions/3.4.1/bin by hand might help. For now, I don't have any better idea to deal with this issue.\n. After 5c91bc981c22fb495fd760a1b379fdd9198b43a2, python-build will create symlink for pydoc if there is pydonX.Y and there is not pydoc. You can use pydoc command for both Python 2/3.\n. Done the migration of all of checksums in c2cc649cfae9c338980271c2c49f67b37dd91485, with using following script.\n``` sh\n!/usr/bin/env bash\nset -e\nset -x\ncompute_sha2() {\n  local output\n  if type shasum &>/dev/null; then\n    output=\"$(shasum -a 256 -b)\" || return 1\n    echo \"${output% }\"\n  elif type openssl &>/dev/null; then\n    output=\"$(openssl dgst -sha256)\" || return 1\n    echo \"${output## }\"\n  elif type sha256sum &>/dev/null; then\n    output=\"$(sha256sum --quiet)\" || return 1\n    echo \"${output% *}\"\n  else\n    return 1\n  fi\n}\ncompute_md5() {\n  local output\n  if type md5 &>/dev/null; then\n    md5 -q\n  elif type openssl &>/dev/null; then\n    output=\"$(openssl md5)\" || return 1\n    echo \"${output## }\"\n  elif type md5sum &>/dev/null; then\n    output=\"$(md5sum -b)\" || return 1\n    echo \"${output% }\"\n  else\n    return 1\n  fi\n}\nPYTHON_BUILD_SHARE_PATH=\"$(pyenv root)/plugins/python-build/share/python-build\"\nfind \"${PYTHON_BUILD_SHARE_PATH}\" -maxdepth 1 -type f -print0 | xargs -0 --no-run-if-empty cat -- \\\n  | egrep '#[0-9a-f]{31,32}' | egrep -v '#[0-9a-f]{33,}' | awk '{print($3)}' | sed -e 's/\"(.)\"/\\1/' | while read\ndo\n  url=\"${REPLY%%#}\"\n  md5=\"${REPLY##*#}\"\n  cache=\"$(pyenv root)/cache/$(basename \"$url\")\"\n  mkdir -p \"$(dirname \"$cache\")\"\n  if [ -n \"$md5\" ]; then\n    echo \"$url, $md5, $cache\"\n    [ -e \"$cache\" ] || ( wget -O \"$cache\" \"$url\" && sleep 5 )\n    if [[ \"$md5\" != \"$(cat \"$cache\" | compute_md5)\" ]]; then\n      echo \"checksum mismatch: $cache (got $(cat \"$cache\" | compute_md5), expected $md5)\" 1>&2\n      exit 1\n    else\n      sha2=\"$(cat \"$cache\" | compute_sha2)\"\n      find \"${PYTHON_BUILD_SHARE_PATH}\" -maxdepth 1 -type f -print0 | xargs -0 sed -i -e \"s/$md5/$sha2/\"\n    fi\n  fi\ndone\nvim:set ft=sh :\n``\n. @thomasjo Thanks, but I already have done everything :)\n. It's depending on the$PATHsetting. Please make sure$PYENV_ROOT/shimsis in front of/usr/local/binin the$PATH` if you have brew built CPython 2.7.7.\n. hmm... It's strange. \nAre you using bash as your shell? Please let me know the output from which python and pyenv which python.\n. It seems that your installation have some configurations in ~/.pyenv in spite of you have set PYENV_ROOT as /usr/local/opt/pyenv. Try moving ~/.pyenv to somewhere and then restart your shell might help.\n. If there is PYENV_ROOT defined as an environment variable, pyenv will respect the value as its root directory. https://github.com/yyuu/pyenv/blob/6efe6dafe774d84859d5e5336929e45f0bb3403d/libexec/pyenv#L41\nI confirmed that it is working expectedly with my brew installed pyenv v0.4.0-20140602. I have no idea why your pyenv works so strange...\n```\n% brew uninstall pyenv\nUninstalling /usr/local/Cellar/pyenv/20140602...\n% brew install pyenv\n==> Downloading https://github.com/yyuu/pyenv/archive/v0.4.0-20140602.tar.gz\nAlready downloaded: /Library/Caches/Homebrew/pyenv-20140602.tar.gz\n==> Caveats\nTo enable shims and autocompletion add to your profile:\n  if which pyenv > /dev/null; then eval \"$(pyenv init -)\"; fi\nTo use Homebrew's directories rather than ~/.pyenv add to your profile:\n  export PYENV_ROOT=/usr/local/opt/pyenv\n==> Summary\n\ud83c\udf7a  /usr/local/Cellar/pyenv/20140602: 274 files, 2.5M, built in 2 seconds\n% ls ~/.pyenv\nls: /Users/yyuu/.pyenv: No such file or directory\n% exec \"$SHELL\"\n% ls ~/.pyenv\nls: /Users/yyuu/.pyenv: No such file or directory\n% which pyenv\n/usr/local/bin/pyenv\n% export PYENV_ROOT=/usr/local/opt/pyenv\n% eval \"$(pyenv init -)\"\n% pyenv versions\n* system (set by /usr/local/opt/pyenv/version)\n``\n. @llazzaro Probably, you are right.The./bin/activatescript ofvirtualenvmight affect the$PATH`.\nClose this issue because this is out of date. Anyway, please be careful what your $PATH is pointing.\n. See https://github.com/yyuu/pyenv/wiki/Common-build-problems\n. That information is not a trivial; OS X 10.10 DP\nI have never tried it yet, but some workarounds found in #25 (beta release of OS X 10.9) might help you.\nCFLAGS=\"-I$(xcrun --show-sdk-path)/usr/include\" pyenv install -v 2.7.7\n. If you found any workaround for this issue, I'm happy if you update the Wiki page.\n. Thanks for updating the Wiki page :+1:\n. Use system version forces pyenv to search python from standard $PATH. Please see also the command reference\nThe pyenv doesn't care if the directory in ~/.pyenv/versions is a proper Python installation. For example, just putting a file ~/.pyenv/versions/foo/bin/python will force pyenv to recognize a version foo. Just putting virtualenvs into ~/.pyenv/versions might help if you don't want to build CPython.\n. I couldn't reproduce this issue with brew 0.9.5 and pyenv 0.4.0-20140602.\n% export PYENV_ROOT=/usr/local/opt/pyenv\n% eval \"$(pyenv init -)\"\n% pyenv install anaconda-1.9.2\n% pyenv global anaconda-1.9.2\n% pyenv versions\n  system\n* anaconda-1.9.2 (set by /usr/local/opt/pyenv/version)\n% pyenv rehash\n% brew update\nUpdated Homebrew from 2afa40c1 to 35010af9.\n==> Updated Formulae\nbind            goaccess        lmdb            open-scene-graph    pazpar2         unshield\ndos2unix        gvp         lynis           opus-tools      skipfish        wmctrl\nelixir          jetty       mediatomb       par2        spatialindex        yaz\nfuncoeszz       leiningen       mono            passenger       speedtest_cli       zbar\n. I confirmed the same behaviour with patch 2.5.8 on OS X 10.9. (But no problem with patch 2.7.1 on Debian sid) This should be fixed.\nSome changes around patching in 9dac2755670527e95caa8000576e6708de255a74 might be affecting this.\n. This has been fixed in d496c0349791aeba0dca223aaf6b7326cad5cd66.\n. @alexmic \nI don't need to update the tarball of 2.6.6 on http://yyuu.github.io/pythons/ since it has not been modified from original distribution from http://python.org/. The patches for CPython 2.6.6 are bundled with pyenv/python-build, and you can be find them on https://github.com/yyuu/pyenv/tree/master/plugins/python-build/share/python-build/patches/2.6.6/Python-2.6.6\nFrom my internet connection in Tokyo, Japan, I confirmed that I can reach to http://yyuu.github.io/pythons/372f66db46d773214e4619df1794a26449158f626138d4d2141a64c2f017fae1\n```\n% curl -I http://yyuu.github.io/pythons/372f66db46d773214e4619df1794a26449158f626138d4d2141a64c2f017fae1\nHTTP/1.1 200 OK\nServer: GitHub.com\nContent-Type: application/octet-stream\nLast-Modified: Tue, 03 Jun 2014 12:24:02 GMT\nExpires: Mon, 16 Jun 2014 14:21:17 GMT\nCache-Control: max-age=600\nContent-Length: 13318547\nAccept-Ranges: bytes\nDate: Mon, 16 Jun 2014 14:11:21 GMT\nVia: 1.1 varnish\nAge: 4\nConnection: keep-alive\nX-Served-By: cache-ty67-TYO\nX-Cache: MISS\nX-Cache-Hits: 0\nX-Timer: S1402927877.047230721,VS0,VE4238\nVary: Accept-Encoding\n``\n. @lostinplace Because the Homebrew/homebrew#30159 has been merged into the master branch of Homebrew, you can import the changes of pyenv bybrew update && brew upgrade pyenv.\n. Thanks :+1:\n. Thepyenv shellonly affects current shell unlikepyenv localandpyenv global`. See also https://github.com/yyuu/pyenv/blob/master/COMMANDS.md\nYou can also have multiple versions as pyenv shell:\n% pyenv shell 2.7.7 3.4.1\n% pyenv version\n2.7.7 (set by PYENV_VERSION environment variable)\n3.4.1 (set by PYENV_VERSION environment variable)\n% python --version\nPython 2.7.7\n% python2.7 --version\nPython 2.7.7\n% python3.4 --version\nPython 3.4.1\n. Just a problem of usage. We need better documentation.\n. I confirmed the build of 2.1.3, 2.2.3 and 2.3.7 on Debian GNU/Linux sid amd64 :+1:\n. This wasn't reproduced on my latest Debian GNU/Linux sid, with curl 7.37.0 and wget 1.15.\nIt seems that the wget(1) invoked from ez_setup.py died by some error. I suspect that the cause of this error is the lack of Server Name Indication (SNI) support with wget prior than 1.14 (#60).\nPlease let me know the output from following commands:\n1. command -v curl && curl --version\n2. command -v wget && wget --version\n. The curl 7.18.1 must be a version which supports SNI, if it has not been disabled on build.\nhttp://en.wikipedia.org/wiki/Server_Name_Indication\nThe python-build prefers curl than wget if it is found in PATH.\nhttps://github.com/yyuu/pyenv/blob/59c796c138a04a315171ee3d3275222a0f3bc781/plugins/python-build/bin/python-build#L257\nAnd, it seems that ez_setup.py also prefers curl than wget.\nhttps://bitbucket.org/pypa/setuptools/src/f493e6c4ffd88951871110858c141385305e0077/ez_setup.py?at=5.2#cl-255\nI have no idea. Installing later curl may solve the issue if it is possible.\n. I pushed 72eb7f5c32d6e9d622874353df6aa725e0b5fcbb to support command-line options for ez_setup.py. Please try env EZ_SETUP_OPTS=\"--insecure\" pyenv install -v 2.7.6.\n. :+1:\nYou may already know, but you can use fixes or resolves in place of refs to close the issue on GH automatically.\nhttps://help.github.com/articles/closing-issues-via-commit-messages\n. This must be a problem with recent setuptools with --enable-framework. I pushed a661e14580534f66949d3c47e5efba77e0b13621 as a workaround to allow installing older version of setuptools. Please try with older version of setuptools.\n$ env SETUPTOOLS_VERSION=5.2 PYTHON_BUILD_CACHE_PATH=${PYENV_ROOT}/buildcache PYTHON_CONFIGURE_OPTS=\"--enable-framework --enable-unicode=ucs2\" pyenv install 2.7.3\n. This must be a problem of setuptools, not pyenv. You should find a solution by yourself.\n. Please just update the pyenv and try again. It uses https://bootstrap.pypa.io/ez_estup.py and it should solve the checksum issue.\nOr, if you don't want to update pyenv, you can also fix the wrong MD5 value in build definition by yourself. Please fix the following MD5 value in your local clone of git repo: https://github.com/yyuu/pyenv/blob/d378b274d99f6267834f360be6855e694da59518/plugins/python-build/share/python-build/2.7.2#L4\n. Sorry, I've forgotten. I pushed the tag.\n. The pyenv doesn't provide blacklist feature of .python-version. Ignoring .python-version inside ~/Dropbox is not possible with pyenv for now.\n. The PYENV_VERSION environment variable is always favored than global and local by pyenv.\nWith tools like direnv, you can set environment variables to specific directory. With direnv, add following configuration at ~/Dropbox/.envrc allows you to ignore .python-version inside ~/.Dropbox.\n``` sh\n~/Dropbox/.envrc\nexport PYENV_VERSION=\"$(pyenv version-name)\"\n```\n. This is by design of pyenv/rbenv. The version(s) should be declared explicitly in pyenv.\nIf you prefer implicit manner than explicit, there is an extension of concordusapps/pyenv-implict to allow implicit versioning behaviour in pyenv. Please see also #34.\n. Yep, there isn't the definition of 2.6.5 as of now. You can write your custom definition by yourself though.\nThe following example shows that how you can create the custom definition of 2.6.5 based on 2.6.6:\n$ cp \"$(pyenv root)/plugins/python-build/share/python-build/2.6.6\" ./2.6.5\n$ vi ./2.6.5\n$ pyenv install -v ./2.6.5\nYou can find the existing build definitions at https://github.com/yyuu/pyenv/blob/master/plugins/python-build/share/python-build/. I am happy if you sent back me a pull-request of 2.6.5.\n. I am happy if someone was send me back a PR of new build definitions.\n. I couldn't reproduce the behaviour with 2.7.5. It seems that the installation process of pip with using https://bootstrap.pypa.io/get-pip.py has died by HTTP 401 got from somewhere.\nFrom some my quick investigation on get-pip.py, the handle_401 seems to be invoked if the -r or --requirement have been given as an argument to get-pip.py. The python-build (the backend of pyenv install) will pass given arguments to get-pip.py if the environment variable of GET_PIP_OPTS has been declared. Please unset it during pyenv install if it has been declared in your shell.\nhttps://github.com/yyuu/pyenv/blob/b8a7de8a3ce2207eb5ca42e80becb17f1fbd98c6/plugins/python-build/bin/python-build#L1429\n. Plus, the log output in /Users/imtapps/.pip/pip.log might include some useful information. Please try to check it.\n. This must be an issue of pyenv-virtualenv, not plain pyenv.\nIt seems that you're trying to create a virtualenv from OS X's system Python (/usr/bin/python) and it failed by the Permission denied while writing a file /Library/Python/2.7/site-packages/virtualenv.py.\nI would not recommend you to contaminate the system Python if you're in pyenv. I would recommend you to try installing at least one version in pyenv, and then create a virtualenv from it.\n. Not an issue of pyenv.\n. It is pretty weird. By the definition of pyenv init, pyenv must always prepend shims at the top of the $PATH.\nhttps://github.com/yyuu/pyenv/blob/b8a7de8a3ce2207eb5ca42e80becb17f1fbd98c6/libexec/pyenv-init#L101\nThis must be a problem of misconfiguration of bash. Please move eval \"$(pyenv init -)\" (and eval \"$(pyenv virtualenv-init -)\" if you have) to the end of your ~/.bash_profile and try again.\n. Not an issue of pyenv.\n. Please gist the complete output from pyenv. \n. Sorry, I had misunderstood.\nIt seems that the original distribution of pypy3-2.3.1 doesn't include the pypy3 executable in it. The pyenv-exec cannot invoke the executable if it's not there.\n% tar tvf ~/.pyenv/cache/pypy3-2.3.1-linux64.tar.bz2 | grep bin/\ndrwxr-xr-x pjenvey/502       0 2014-06-20 02:32 pypy3-2.3.1-linux64/bin/\n-rwxr-xr-x pjenvey/502 40898384 2014-06-20 02:32 pypy3-2.3.1-linux64/bin/pypy\n. Setup mercurial and try again.\n. You can install mercurial either via pip or apt-get. One thing important is that you need to activate a Python version which is bounded to the mercurial installation during the build of 3.4-dev. (This is because the mercurial is implemented in Python)\nLet's say if you have installed mercurial via apt-get, please enable system version during the build of 3.4-dev (installing via apt-get means that the hg has installed in the system)\n$ pyenv shell 3.4.1 system\n$ pyenv which python\n/home/yyuu/.pyenv/versions/3.4.1/bin/python\n$ pyenv which hg\n/usr/bin/hg\n$ pyenv install 3.4-dev\n(... snip ...)\n$ pyenv shell --unset\n. Please use pyenv-virtualenvwrapper.\n. This must be an issue of pyenv-implicit, not an issue of main project of pyenv. If something should be fixed in pyenv itself, please report back to this issue.\n. LGTM :+1:\n. Thanks for your report :+1: I pushed ae4659538d38fbdf58ac47031b93a2e8f2a73a58 to unset PIP_REQUIRE_VIERTUALENV during the installation of Pythons.\nThough I didn't unset PIP_RESPECT_VIRTUALENV because I could not find any reference for it in pip 1.5.6 source tree. Should I unset this too?\n. The --enable-shared is an option for ./configure of CPython. I don't like --shared in pyenv-install since it is only effective for CPython.\nWe need better documentation about build options though. I think it should be on the Wiki or README.\n. There is a plugin s1341/pyenv-alias (see also #167). With the plugin, you can give a custom name for building version. Please give it a try.\nenv VERSION_ALIAS=\"2.7.8-custom1\" PYTHON_CONFIGURE_OPTS=\"...\" pyenv install 2.7.8\n. This can be solved with using pyenv-alias plugin.\n. I'm reading your article on http://lepture.com/en/2014/python-on-a-hard-wheel\nUnfortunately, this is breaking existing tests. Now I'm trying to deal with the issues.\n. The #222 should fix the issue (& broken tests). Please try again with pulling from master.\n. The repository url of git://github.com/yyuu/pyenv.git isn't wrong. What is your intention of changing the protocol from Git to SSH?\n. It might be a issue of the configuration of your shell. Please review your $PATH and check if the $HOME/.pyenv/shims is in front of /usr/bin.\n. Adding following snippet just after export PYENV_ROOT=/usr/local/opt/pyenv in your ~/.bash_profile might solve your issue.\nsh\nexport PATH=\"$PYENV_ROOT/bin:$PATH\"\neval \"$(pyenv init -)\"\nPlease see also the installation instruction at https://github.com/yyuu/pyenv#installation\n. I confirmed the success of moving $PYENV_ROOT from $HOME to /usr/local/pyenv with following procedures. If your problem persists, please report back to this issue.\n$ mv ~/.pyenv /usr/local/pyenv\n$ export PYENV_ROOT=\"/usr/local/pyenv\"\n$ export PATH=\"${PYENV_ROOT}/bin:${PATH}\"\n$ eval \"$(pyenv init -)\"\n$ pyenv rehash\n$ grep PYENV_ROOT /usr/local/pyenv/shims/python\nexport PYENV_ROOT=\"/usr/local/pyenv\"\n. :+1:\n. Please review your shell configuration and check if there pyenv is configured properly. You will need following configuration to enable pyenv's shell feature.\nsh\nif which pyenv > /dev/null; then eval \"$(pyenv init -)\"; fi\nFor more information about installation instruction, please see README also.\n. This looks reasonable :+1:\n. Thanks for patches! I've added you as a collaborator of this repo :octocat:\n. Looks fine :+1:\nHow do you think is this worthful to merge also into rbenv?\n. Please install patch(1). It can be installed via package manager of your system. (On Debian/Ubuntu systems, it is available as a package named patch).\n. Feel free to reopen if there are still something need to be fixed in pyenv.\n. It is the expected behaviour. Please invoke pyenv rehash after package installation to create shims.\nOr, you can use pyenv-pip-rehash to automate the process. With pyenv-pip-rehash, pyenv will automatically create shims after successful package installation.\n. I agree that the conflict of naming between Python 3.3+'s pyvenv is a problem, too. I need to tackle the problem with better documentation....\n. Sorry for delay :(\n. I have never been to China! Pull requests are welcomed!\n. The C modules of Python is not a script file and it must not work even if you just copy it. You must rebuild the Python and modules against system's curses library.\nThe lack of library or development headers of curses (e.g. libncursesw5-dev) might causes those issues. Please confirm if you have enough package for the module.\n. Released v20140924 at ab9ee414ad836ea21950ed44eeb77a5b272a6549\n. Insufficient information. Possibly just a misconfiguration.\n. I believe that the checking dependent libraries/headers is the responsibility of the ./configure bundled with CPython generated by GNU autotconf. To implement those functions in general way is hard and will become lengthy. I don't think it should be done in python-build.\nI have written a pyenv plugin of pyenv-doctor, which checks the dependencies of CPython/Jython/Stackless/PyPy with using autoconf before building actual Python. I think expanding this plugin will help solving the actual problem of this.\n. There is hook feature in pyenv.\nInstalling following script as install hook (e.g. ${PYENV_ROOT}/pyenv.d/install/doctor.bash) will invoke pyenv-doctor on the invocation of pyenv-install. This hook uses a flag file ${PYENV_ROOT}/DOCTOR_OK and will avoid invoking pyenv-doctor if it has once succeed.\nsh\nif [ -d \"${PYENV_ROOT}/plugins/pyenv-doctor\" ]; then\n  if [ ! -e \"${PYENV_ROOT}/DOCTOR_OK\" ]; then\n    if pyenv doctor --all; then\n      touch \"${PYENV_ROOT}/DOCTOR_OK\"\n    else\n      echo \"pyenv-doctor failed.\"\n      exit 1\n    fi\n  fi\nfi\n. nothing is left to be done.\n. The PyPy project does not provide binary distribution built with --shared. If you want one, please build PyPy with using pypy-*-src (e.g. pypy-2.4.0-src) with special parameters.\nAnd, python-build can read the build parameters of PyPy on the compilation. Please try command like env PYPY_OPTS=\"-Ojit --shared --gcrootfinder=shadowstack pypy/goal/targetpypystandalone pyenv install -v pypy-2.4.0-src to build PyPy with --shared.\nhttps://github.com/yyuu/pyenv/blob/ff995b66548b00d7ef878a5b6e18b128d0e08e8f/plugins/python-build/bin/python-build#L815\n. Building PyPy 2.4.0 with --shared requires to set LD_LIBRARY_PATH (or DYLD_LIBRARY_PATH on Darwin) on runtime. I'll try to find a way to set rpath for the generated binary like python-build is doing for CPython.\n. It takes very very long time to build PyPy....\nIIRC, on Linux, LD_LIBRARY_PATH is just an environment variable for /lib/ld-linux.so. You can set the environment variables anywhere you can set it, including /etc/environment and your ~/.bashrc.\n. I added some workaround in pypy_builder in python-build at 42bb40a5d837451e203c068dfa3d1c3596ac8ede. This allows you to build shared PyPy by running env PYPY_OPTS='-Ojit --shared --gcrootfinder=shadowstack' pyenv install -v pypy-2.4.0-src. The build problem of PyPy with --shared must be cleared with this fix.\nI'm not sure how the built binary of libpypy-c.so on http://uwsgi-docs.readthedocs.org/en/latest/PyPy.html is being maintained. Plus, what the version of PyPy is. I would recommend you to build PyPy yourself if you want to maintain your application built on the libpypy-c.so. Anyway, please decide yourself how you maintain your application.\n. RPython (which is a toolchain of PyPy) requires existing CPython installation, you need to have CPython with proper modules before start building PyPy. The _curses error means your Python installation lacks curses. Please install curses headers (e.g. libncurses5-dev on Debian) and rebuild CPython and try building PyPy again.\nBecause I am not a PyPy guy, please ask PyPy guys how to build PyPy from source.\n. Sorry I just overlooked about curses. I just pushed a patch. Please try\nagain with the Python version which has curses module in\nenvironment PYENV_RPYTHON_VERSION and try building PyPy again.\nOn Monday, October 13, 2014, requiredfield notifications@github.com\n<javascript:_e(%7B%7D,'cvml','notifications@github.com');> wrote:\n\nShould have said I already have libncurses5-dev installed. And like I\nsaid when I import _curses by hand it works:\n\npyenv versions\n  system\n- pypy-2.4.0 (set by /home/ubuntu/.pyenv/version)\n  python -c 'import _curses'  # no ImportError\n  pyenv shell system\n  python -c 'import _curses'  # no ImportError\n  env PYPY_OPTS='-Ojit --shared --gcrootfinder=shadowstack' pyenv install -v pypy-2.4.0-src\n  ...\n  [translation:ERROR] Skipped: no _curses or _minimal_curses module\n  ...\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/yyuu/pyenv/issues/244#issuecomment-58810440.\n\n\n\u5c71\u4e0b \u512a (\u3084\u307e\u3057\u305f \u3086\u3046)\npeek824545201@gmail.com\n. If the next official pypy binary will come with libpypy.so, pyenv will also include it because we don't modify original distributions basically (we may apply additional patches only if the original distribution is not working). Please wait for a while until the next release of pypy....\n. This must be a build issue of stackless 3.3.5 on OS X. Please report the problem to Stackless Python project.\n. I also confirmed the build success of stackless-3.3.5 on OS X 10.9.5 with brew's pyenv 20141011.\n. :+1:\n. I think we need .PHONY target like this.\n``` make\n.PHONY: test\ntest: bats\n        bats/bin/bats --tap test plugins/python-build/test\nbats:\n        git clone https://github.com/sstephenson/bats.git $@\n``\n. I pushedaltinstallbranch which add support foraltinstall` mode with following command line.\nsh\n$ env PYTHON_MAKE_INSTALL_TARGET=\"altinstall\" pyenv install -v 3.4.2\nNow I'm checking whether those changes don't break something on normal installation.\n. Please check the output from which python by yourself first. I think this is a kind of misconfiguration of shell, not a bug.\n. Basically, pyenv will build Pythons with default options. If you want to build Python with specific configuration options, please specify the options via environment variables of PYTHON_COFIGURE_OPTS or PYTHON_MAKE_OPTS. Please see also the README.md of python-build.\n. I opened PR #542 for the fix for this. Can anyone try it?\n. The encoding configuration is done at https://github.com/yyuu/pyenv/blob/v1.0.2/plugins/python-build/bin/python-build#L1922-L1925\nI can tweak the lines to stop configuring UCS4 on OS X. Although, I'm not sure how it should be on other platforms like BSDs.\n. I've opened #726 to stop configuring --enable-unicode=ucs4 on OS X. Please give it a try and will merge it if it works.\n. Please show me the output from 'pyenv versions'.\nOn Thursday, October 23, 2014, Travis Briggs notifications@github.com\nwrote:\n\nI'm on a new Ubuntu 14.04 system, using the built in python.\nI have installed pyenv using the pyenv-installer script, with curl. It\nprinted out commands to put in my .bash_profile, I chose to put them in\n.bashrc instead\nNow I get the following:\n$ pyenv virtualenv s3cmd\npyenv: version system' is not installed\n$ pyenv virtualenv system s3cmd\npyenv: versionsystem' is not installed\n$ pyenv virtualenv 2.7.6 s3cmd\nUsage: pyenv virtualenv [-f|--force] [VIRTUALENV_OPTIONS]  \n       pyenv virtualenv --version\n       pyenv virtualenv --help\n-f/--force       Install even if the version appears to be installed already\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/yyuu/pyenv/issues/258.\n\n\n\u5c71\u4e0b \u512a (\u3084\u307e\u3057\u305f \u3086\u3046)\npeek824545201@gmail.com\n. The message of pyenv: version 'system' is not installed means that you don't have any Pythons in your system. If you're using Ubuntu 14.04, please install python packages by sudo apt-get install python first.\nPlus, if you'd like to create a virtualenv from system version on Ubuntu, I would also recommend you to install python-virtualenv package. Because pyenv runs with user's privileges, it cannot install virtualenv into your system's python basically. Installing python-virtualenv by sudo apt-get install python-virtualenv will install virtualenv into system's python and it will make pyenv to be able to use that virtualenv.\n. LGTM! Thanks :+1:\n. This breaks existing test. I am happy if you fix it.\nBTW, what's the benefit of using HTTPS over HTTP in pyenv? Basically, we are verifying the downloaded binaries with SHA256 checksum and it should avoid MITM attacks. I cannot imagine the benefit of receiving public archive of Pythons via encrypted channel.\n. Unlike Ruby (MRI), Python (CPython) is using HTTPS to distribute their sources/binaries by default nowadays.\nAs described in sstephenson/ruby-build#623, verifying checksum can avoid tampering but cannot avoid MITM without any other encryption mechanism. It might not be literally attack, but I don't want to add weakness to the system. I think that using HTTPS to distribute sources as same as https://python.org is doing might be better in this case.\n. Do you have include headers in /usr/include? If not, you might not have installed Command-Line Tools for Xcode. Please install it and try again.\n. Please read https://github.com/yyuu/pyenv/wiki/Common-build-problems first and solve the problem by yourself. This must not be a pyenv bug.\n. It is pretty weird. I couldn't reproduce such strange behaviour at least on Debian/Ubuntu/OS X. The ~/.bashrc must not be read from non-interactive shell and it should not causes infinite loops.\nhttp://www.gnu.org/software/bash/manual/html_node/Bash-Startup-Files.html\nThe followings are my answers:\n1. You can use pyenv without invoking pyenv init -. Only few of pyenv commands (e.g. pyenv shell) require pyenv init -.\n2. pyenv is written in bash and cannot run with standard POSIX sh\n3. It would be better to be documented if there is possibility of infinite loops. But first, we need to clarify the problem. Please describe your platform and shell information (version, configurations, etc.)\n. I confirmed that this doesn't reproduce with out-of-box Debian/Ubuntu. I created a Docker container for reproduction, but the .bashrc bundled with those distributions will just return if $PS1 is not defined (=~ non-interactive).\nsh\n% docker run -it yyuu/pyenv:issue264 bash -l\nthis is .bashrc\nthis is .profile\nroot@ddbcabcb80ef:/#\nI am wondering if I should fix this in pyenv script. This is caused by a kind miss configuration of the system, I think. Though, this is pretty easy to reproduce. Mentioning about potentially infinite loop in Wiki or README might be sufficient.\nThis is the Dockerfile. (you can also pull the image from DockerHub)\n``` sh\nFROM ubuntu:14.04\nMAINTAINER Yamashita, Yuu peek824545201@gmail.com\nENV PATH /root/.pyenv/shims:/root/.pyenv/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin\nENV DEBIAN_FRONTEND noninteractive\nRUN apt-get --quiet --yes update\nRUN apt-get --quiet --yes upgrade\nRUN apt-get --quiet --yes install build-essential curl git libbz2-dev libreadline-dev libsqlite3-dev libssl-dev patch zlib1g-dev\nRUN git clone --quiet https://github.com/yyuu/pyenv.git /root/.pyenv\nRUN cd /root/.pyenv && git reset --hard 35aed21\nRUN echo 'export BASH_ENV=\"/root/.bashrc\"' >> /etc/profile\nRUN echo 'echo \"this is .profile\"' >> /root/.profile\nRUN echo 'echo \"this is .bashrc\"' >> /root/.bashrc\nRUN echo 'eval \"$(pyenv init -)\"' >> /root/.bashrc\nEnable infinite loop\nRUN sed -i.orig -e '/^[ -z \"\\$PS1\" ]/s/^/#/' /root/.bashrc\n```\n. > Now I'm on the business trip and cannot try CentOS due to the\n\nlimited bandwidth.\nPlease give me back PRs for document improvements, or you can edit the Wiki\nby yourself.\n\n\n\u5c71\u4e0b \u512a (\u3084\u307e\u3057\u305f \u3086\u3046)\npeek824545201@gmail.com\n. Adding warning in README has already been merged.\n. Great! Thanks :+1:\n. Ruuning 'pyenv rehash' to update shim scripts might help. Anyway let me\nknow the output from 'which python'.\nOn Monday, November 10, 2014, bersam notifications@github.com wrote:\n\nhi everybody, i've got installed pyenv on archlinux. installed python\n2.7.8 with pyenv and add pyenv init to .zshenv and pyenv local point to\n2.7.8. but still python --version result in \"Python 3.4.2\" what would be\ni missing?\n$ echo $PATH\n/home/bersam/.rvm/gems/ruby-2.1.2/bin:/home/bersam/.rvm/gems/ruby-2.1.2@global\n/bin:/home/bersam/.rvm/rubies/ruby-2.1.2/bin:/home/bersam/.pyenv/bin:/home/bersam/.pyenv/shims:/home/bersam/.pyenv/bin:/home/bersam/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/bin:/opt/android-sdk/tools:/usr/share/java/gradle/bin:/usr/lib/jvm/default/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl:/home/bersam/.local/bin:/home/bersam/.rvm/bin:/home/bersam/android/sdk/platform-tools:/home/bersam/android/sdk/tools:/home/bersam/.rvm/bin\n$ which python\n/home/bersam/.pyenv/shims/python\n$ pyenv local\n2.7.8\n$ python --version\nPython 3.4.2\nand i'm using release latest release v20141106.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/yyuu/pyenv/issues/268.\n\n\n\u5c71\u4e0b \u512a (\u3084\u307e\u3057\u305f \u3086\u3046)\npeek824545201@gmail.com\n. Sorry, I overlooked it. It seems to be correct shim.\nCould you show me the output from 'env PYENV_DEBUG=1 pyenv which python'?\nOn Monday, November 10, 2014, bersam notifications@github.com wrote:\n\n@yyuu https://github.com/yyuu i've already added output of which python,\npointing to correct shims, i think.\nand after running pyenv rehash still got 3.4.2 instead of 2.7.8\n$ pyenv which python\n/usr/bin/python\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/yyuu/pyenv/issues/268#issuecomment-62363599.\n\n\n\u5c71\u4e0b \u512a (\u3084\u307e\u3057\u305f \u3086\u3046)\npeek824545201@gmail.com\n. It shows that PYENV_VERSION or pyenv-version-name is returning system. Don't you have PYENV_DEBUG=system in your environment?\nsh\n+ [pyenv-which:37] versions=(${PYENV_VERSION:-$(pyenv-version-name)})\n+ [pyenv-which:38] IFS='    \n'\n+ [pyenv-which:40] for version in '\"${versions[@]}\"'\n+ [pyenv-which:41] '[' system = system ']'\n. Let me show the outputs from 'pyenv versions' and 'echo $PYENV_VERSION'.\nThe environment 'PYENV_ROOT' will set by pyenv's embedded shell function if\nyou use 'pyenv shell'.\nAnd, this should not be the cause of this issue, but you should have\n'export' before defining PYENV_ROOT' and 'PATH' to pass those values to\nchild processes. And, I would not recommend you to have custom 'PYTHONHOME'\nif you are using pyenv.\nOn Monday, November 10, 2014, bersam notifications@github.com wrote:\n\nonly these lines in .zshenv\nPython\nPYTHONHOME=/usr/lib/python2.7\nPYENV_ROOT=\"$HOME/.pyenv\"\nPATH=\"$PYENV_ROOT/bin:$PATH\"eval \"$(pyenv init -)\"\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/yyuu/pyenv/issues/268#issuecomment-62365902.\n\n\n\u5c71\u4e0b \u512a (\u3084\u307e\u3057\u305f \u3086\u3046)\npeek824545201@gmail.com\n. It might mean that you once tried 'pyenv shell' and the version is\npersisted in environment. You can reset the environment variable by 'unset\nPYENV_VERSION' or 'pyenv shell --unset'. Please try again ufter unsetting\nshell version if the problem has been fixed.\nOn Monday, November 10, 2014, bersam notifications@github.com wrote:\n\n@yyuu https://github.com/yyuu i find for PYENV_VERSION and PYENV_DEBUG\non /etc and $HOME. but found nothing. (except in ~/.pyenv itself)\n$ pyenv versions* system (set by PYENV_VERSION environment variable)\n  2.7.8\n$ echo $PYENV_VERSION\nsystem\n$ echo $PYENV_DEBUG\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/yyuu/pyenv/issues/268#issuecomment-62367468.\n\n\n\u5c71\u4e0b \u512a (\u3084\u307e\u3057\u305f \u3086\u3046)\npeek824545201@gmail.com\n. pyenv install (precisely, python-build) can apply patch when building python. There are 2 ways to apply patch:\n1. Tell python-build to read a patch from STDIN with supplying -p flag\n   - cat foo.patch | pyenv install -p -v 2.6.9\n2. Use python-build's patching mechanism\n   - cp foo.patch \"$(pyenv root)/plugins/python-build/share/python-build/patches/2.6.9/Python-2.6.9/ && pyenv install -v 2.6.9\nYou can see the python-build's built-in patches for 2.6.9 for an example.\n. @s1341 FWIW, current latest release pyenv v20141106 has a bug in its built-in patching mechanism. I fixed it in 8fee82e4567da4ec8e3ecd49b12d112a6bef5fe1 and c6dd3b946878b38f6a657f40b863f8ea84300f8b. Could you try building again with latest master branch of pyenv?\n. #271 has been merged. Thanks for PR :octocat:\n. @mmarchini Could you try building again with latest 8fee82e4567da4ec8e3ecd49b12d112a6bef5fe1?\n. The built-in patching feature seems to be broken after pyenv v20141106 :disappointed:  Now I'm adding tests for it and will release new version soon.\n. Added some tests for built-in patch feature of python-build in c6dd3b946878b38f6a657f40b863f8ea84300f8b.\n. I'm not sure if this is required to build CPython 2.6.9 on OS X 10.9. I confirmed that my OS X 10.9.5 is able to build 2.6.9 w/o this fix....\nsh\n% sw_vers\nProductName:    Mac OS X\nProductVersion: 10.9.5\nBuildVersion:   13F34\n. Confirmed this fixes the build of 2.6.9 with --enable-framework on OS X 10.9.5 :+1:\n. I've thought that registering to PyPI is less useful since it requires existing installation of python and pip. For many use cases, the existing installation must be the system installation, typically installed inside /usr. Installing extra packages into those python installation must require administrator privileges.\nBTW, pyenv is basically a tool to setup pythons without administrator privileges. Make pyenv to allow installing via pip may introduce a conflict of this use case. In my opinion, it just introduces conflict without any intrinsic benefits. How do you about this?\n. Those pypi packages will install executable inside python's prefix. But\npyenv requires to be installed outside there. I have no idea how to\nimplement it with setup.py.\nUnfortunately, atm I don't have time to tackle this kind of thing too. PRs\nare always welcome so please send me a patch if you wrote something.\nOn Wednesday, November 19, 2014, Oliver Bestwalter notifications@github.com\nwrote:\n\nWell, I didn't think about the technicalities too much yet, but I really\nfeel that instead of an abandoned project with the same name, there should\nbe at least a pointer to this project on PyPi, so that it gets the\nattention that it IMHO deserves.\nI still think that it woud be to possible to create a distutils package\nthat would be pip installable and instead do all that shell magic that you\nare doing (without admin rights) ... that would be really cool.\nIt's not even completely out there to make stuff pip installable that is\nnot python ... I just remembered that XStatic\nhttps://pypi.python.org/pypi/XStatic is doing exactly that, by\npackaging up static files for web frameworks: (e.g.\nhttps://pypi.python.org/pypi/XStatic-Angular-Bootstrap/0.11.0.2).\nJust some food for thought. I'd love to get my hands dirty on this, but at\nleast atm no chance :(\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/yyuu/pyenv/issues/272#issuecomment-63536357.\n\n\n\u5c71\u4e0b \u512a (\u3084\u307e\u3057\u305f \u3086\u3046)\npeek824545201@gmail.com\n. Great effort :+1:\nI think it is better to merge the changes in obestwalter/pyenv-installer into yyuu/pyenv-installer. Plus, I'd like to add you as a collaborator of yyuu/pyenv-installer. How do you think of it?\n. Merged yyuu/pyenv-installer#16\n. I'm using OS X 10.10.1 and confirmed I can install paramiko into pyenv built CPython 2.7.8.\nsh\n% sw_vers\nProductName:    Mac OS X\nProductVersion: 10.10.1\nBuildVersion:   14B25\nThe actual error is as follows. I don't know why it's trying to use python.exe though it's not on Windows.\n```\nclang -bundle -bundle_loader python.exe -L/usr/local/opt/readline/lib -L/usr/local/opt/readline/lib -L/Users/mhindman/.pyenv/versions/2.7.6/lib build/temp.macosx-10.10-x86_64-2.7/src/MD2.o -o build/lib.macosx-10.10-x86_64-2.7/Crypto/Hash/_MD2.so\nld: file not found: python.exe\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\nerror: command 'clang' failed with exit status 1\n``\n. pyenv will find brew's readline and try to use it if installed. Basically, you don't have to dobrew link readline`.\nI couldn't confirm this build error of paramiko with default build of CPython 2.7.8 (setuptools 7.0; pip 1.5.6). Did you specify some ./configure options when building CPython?\n. I confirmed same happens on my OS X 10.10.1, at least, with CPython 2.7.6 and 2.7.7. This might be a build issue of paramiko package itself, though, I couldn't find any related issues on the project. Upgrading to CPython 2.7.8 will fix the issue.\n. @conslo Agreed. This isn't a pyenv specific issue. Thanks for you investigation :smiley: \n. Interesting. I found -bundle_loader in BLDSHARED of CPython 2.7.7 on OS X 10.10.1 with default configure options.\nsh\n% PYENV_VERSION=2.7.7 python -c 'import sysconfig;print(sysconfig.get_config_var(\"BLDSHARED\"))'\nclang -bundle -bundle_loader python.exe -L/usr/local/opt/readline/lib -L/usr/local/opt/readline/lib -L/Users/yyuu/.pyenv/versions/2.7.7/lib\nIn CPython 2.7.8, unlike 2.7.7, it doesn't have -bundle_loader python.exe.\nsh\n% PYENV_VERSION=2.7.8 python -c 'import sysconfig;print(sysconfig.get_config_var(\"`\"))'\nclang -bundle -undefined dynamic_lookup -L/usr/local/opt/readline/lib -L/usr/local/opt/readline/lib -L/Users/yyuu/.pyenv/versions/2.7.8/lib\nI need more investigation on usage of BLDSHARED.\n. The version string 2.7 isn't ambiguous. There is CPython 2.7 (== 2.7.0) sopyenv install 2.7` will try to install the version.\nhttps://github.com/yyuu/pyenv/blob/8761ae8f7c6ce6a672bce6f5a45b07b96c330d8d/plugins/python-build/share/python-build/2.7\nThere is hook mechanism in pyenv install (see https://github.com/yyuu/pyenv/blob/8761ae8f7c6ce6a672bce6f5a45b07b96c330d8d/plugins/python-build/bin/pyenv-install#L138). Please send back me PRs or publish your own plugins if you have any idea.\n. Try 'pyenv install -v 2.3.5'.\nOn Sunday, November 23, 2014, Pedro Candeias notifications@github.com\nwrote:\n\nHi guys. Like the title says, I'm getting a segmentation fault when\nrunning pyenv install:\npyenv install 2.3.5\n/usr/local/bin/pyenv-install: line 71:  1530 Segmentation fault: 11  parse_options \"$@\"\nNot sure why that line is throwing a segmentation fault. I'm looking into\nit and I'll post a solution if I find one, but in the meantime I thought\nI'd report the problem here.\nI'm on an early 2011 macbook pro 13\", OSX 10.10.1, latest xcode and\ncommand line tools.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/yyuu/pyenv/issues/275.\n\n\n\u5c71\u4e0b \u512a (\u3084\u307e\u3057\u305f \u3086\u3046)\npeek824545201@gmail.com\n. Insufficient information.\n. :+1:\nOn Thursday, November 27, 2014, Makoto Sasaki notifications@github.com\nwrote:\n\nClosed #276 https://github.com/yyuu/pyenv/issues/276 via e172eb2\nhttps://github.com/yyuu/pyenv/commit/e172eb28186bde62963ca4a9a27e495797d92a83\n.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/yyuu/pyenv/issues/276#event-199353440.\n\n\n\u5c71\u4e0b \u512a (\u3084\u307e\u3057\u305f \u3086\u3046)\npeek824545201@gmail.com\n. Thanks for PR :octocat: Though, I'm wondering if this is worth for every users of pyenv or not.\nCould you show me your lazy wrapper function of pyenv? And, let me know your intention of writing those the function? (You are using very slow machines?)\n. Specifying --no-rehash to pyenv init (eval \"$(pyenv init - --no-rehash)\") will skip calling pyenv rehash during pyenv's start up. Since pyenv rehash is most time consuming part in pyenv-init, using it must make shell start up faster. Could you try using --no-rehash if it's worth or not?\n. Basically, I want to keep core functionality and code of pyenv synchrorized with rbenv.\nBecause this can be avoided with using --no-rehash, unfortunately, I don't merge this for now. If same patch has been merged into rbenv, I will eventually merge it into pyenv. Again, thanks for PR :+1:\n. :+1:\n. This has been merged in #487. Thanks!\n. I confirmed that I can build CPython on cleanly installed OS X 10.10, by the procedures follows.\n1. Install OS X 10.10.1\n2. Install Command Line Tools (OS X 10.10) for Xcode\n   - https://developer.apple.com/downloads/index.action\n3. Install Homebrew\n   - http://brew.sh/\n4. Install brew formulas of readline and pyenv\n5. Build CPython by pyenv install 3.4.2\nPlease make sure you have properly installed Command-Line tools for Xcode in Yosemite. (I suspect you don't have /usr/include)\n. I couldn't build rbenv's native extension on GNU/Linux. I don't know why the travis-ci tests of rbenv are succeeding.\n. :+1: It's a fix for #101 and no longer supported (patch to rbenv has been rejected). I'll remove code relating to GRE_OPTIONS.\n. IIRC, PKG_CONFIG_PATH needs to be set in user's shell. It might be not easy since the version in pyenv (shell/local/version) will be determined on the execution time.\nSomething like pyenv-virtualenv-init might be needed to hook up every version changes in pyenv.\n. @s1341 Thanks for PR #292. I've merged it into master and it will somehow solve the problem with 2.7.x for now. Because this is intrinsically an issue of CPython (or pip), changes may be reverted in future if it introduces another problem on pyenv built pythons (I don't believe it'll happen, though).\n. You can edit the Wiki page. Please do it by yourself.\n. Thanks for PR :octocat:\n. Importing updates from rbenv / ruby-build is really hard... :disappointed: \n. There is not common ancestor changeset between sstephenson/rbenv and pyenv. I didn't know git rerere and  http://www.scootersoftware.com/. It might help somehow on merging. I'll try them later.\nAnyway, we have to prepare comprehensive tests for pyenv specific features (e.g. multi versions) before automating merges....\n. Actually, 3.4-dev points to the default branch. I'll change the branch to 3.4. Thanks for pointing out.\nhttps://github.com/yyuu/pyenv/blob/9b7b2a6b40848975f257372afe3165880cbe1d72/plugins/python-build/share/python-build/3.4-dev#L3\n. I think this isn't in ruby-build and I don't want to merge changes in plugins/python-build/test/build.bats even if it's simple one. Please choose one to do same.\n1. Unset environment variables in the entrypoint of test (Makefile)\n   - IIRC, you can use unexport keyword in Makefile\n   - https://github.com/yyuu/pyenv/blob/d320d74a07d213819b98ef05ab9468cc276f8ab0/Makefile#L5\n2. Request same patch to ruby-build\n. I agree that it'd be better in test/ for complehensiveness. We have to keep pyenv specific code separated for maintenacibility, though.\n. Sorry for delay! I confirmed this is working as I expected :octocat:\n. Thanks for good PR including tests :+1: Although, I don't think permissive approach is always good to deal with configuration errors.\nWhen pyenv-version-name was invoked, there should be 3 cases.\n1. All versions in pyenv-version-origin are available\n2. Some versions in pyenv-version-origin are available\n3. All versions in pyenv-version-origin are unavailable\nIn case 1 and 3, it's clear what to do. In case 2, pyenv v20141211 displays errors on standard error then exists with 1. This must be the most conservative behaviour.\nOTOH, with this patch, it displays all available versions, then exits with 1 only if none is available. This is permissive behaviour than current v20141211.\nI think being conservative is good enough since it indicates that there is some errors. The version in .python-version might be invalid to local pyenv installation since it might be managed by other users if the file is committed into the application repository. I think that the problem is in some of code  in pyenv-virtualenv and pyenv-virtualenvwrapper which handles output from pyenv-version-name. They should be able to handle the errors from pyenv-version-name properly.\n. :+1:\nThis patch seems to disable reading site-packages from /Library/Python/2.7/site-packages on CPython 2.7 on Darwin built with --enable-framework. I think this isn't general solution for building CPython on OS X. Though, this is useful to confine python libraries inside $(pyenv root) for pyenv built pythons.\n. @blueyed Is this still a problem for you?\n. I'll close this for now. Feel free to reopen if this is still a matter for you.\n. :+1: \n. With system version, pyenv will find an executable as same manner as standard shell. Only possible workaround must be python3 prog.py. If you'd like to run Python 3.x with python, I'd recommend you to install any of Python 3.x inside pyenv.\n. show me the full output from pyenv install -v 3.4.2\n. I can build CPython 3.4.1 without specifying any CFLAGS. Please make sure if you have installed Command-Line Tools for Xcode properly for your OS X installation.\nHere's my output from pyenv install -v 3.4.1 on OS X 10.10.1.\nhttps://gist.github.com/yyuu/62b200ecc5b869582f82\n. I could not reproduce this.\n. This is intrinsically an issue of set up tools itself. Only possible workaround is to specify SETUPTOOLS_VERSION.\n. Please review your shell PATH again and make sure pyenv's shim path is in\nfront of /usr/local/bin.\nOn Wednesday, December 31, 2014, Joao notifications@github.com wrote:\n\nFor help in debugging, here is the result of `env PYENV_DEBUG=1 pyenv\nwhich python\nhttps://gist.github.com/joaoponceleao/884e0b2ddc2018ae1d96\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/yyuu/pyenv/issues/300#issuecomment-68444266.\n\n\n\u5c71\u4e0b \u512a (\u3084\u307e\u3057\u305f \u3086\u3046)\npeek824545201@gmail.com\n. AFAIK, .zshrc will be read by interactive zsh, it must be reason why you need to start Sublime from terminal. Unlike .zshrc, .zshenv will be read by every zsh processes including non-interactive one.\nActually I have pyenv-init in my .zshenv and it is working without problems.\n. Only you don't have to do is to put some path which has python executables (e.g. /usr/bin and /usr/local/bin) into PATH before pyenv's shims path. I'm not sure how you are configuring your shell but basically it is safe to override PATH in .zshrc or somewhere if it doesn't include some executables named 'python' or 'pip' or so.\n. Please see also README about shims and PATH. For zsh configuration, plz ask some other expert on it.\nhttps://github.com/yyuu/pyenv/blob/master/README.md#understanding-shims\n. I really don't like feature request without working patch. Basically you don't have to symlink executables. As same as rbenv, pyenv has system version and it tries to find python executables from PATH as same manner as standard shell.\n. You would need bunch of extra patches to build ancient versions of CPython on recent OS X.\n. Please let me know the version of wget and curl.\n. You're using very old curl/wget which don't support SNI. Setting http://yyuu.github.io/pythons as PYTHON_BUILD_MIRROR_URL might help.\nhttp://en.m.wikipedia.org/wiki/Server_Name_Indication\n. What's the benefit to use SVG instead of PNG?\n. Thanks for explanation! Got it  :octocat:\n. This isn't an issue of pyenv.\n. dupe #267\n. Basically, I don't like ambiguous/implicit version specifier. This would be implemented in pyenv plugin, though.\nInstalling the following script as $(pyenv root)/pyenv.d/install/sembar.bash will force pyenv to install 3.3.6 (latest release version) from pyenv install 3.3. Though, this doesn't working well with 2.7.x since the first release version of 2.7.x is 2.7, not 2.7.0.\n``` sh\nif [ -n \"${DEFINITION}\" ]; then\n  PYTHON_BUILD_INSTALL_PREFIX=\"${0//}\"\n  ORIGIFS=\"${IFS}\"\n  IFS=: PYTHON_BUILD_DEFINITIONS=($PYTHON_BUILD_DEFINITIONS ${PYTHON_BUILD_ROOT:-$PYTHON_BUILD_INSTALL_PREFIX}/share/python-build)\n  IFS=\"${ORIGIFS}\"\nunset FOUND_DEFINITION\n  for DEFINITION_DIR in \"${PYTHON_BUILD_DEFINITIONS[@]}\"; do\n    if [ -f \"${DEFINITION_DIR}/${DEFINITION}\" ]; then\n      FOUND_DEFINITION=1\n      break\n    fi\n  done\nif [ -z \"${FOUND_DEFINITION}\" ]; then\n    list_definition_candidates() {\n      { for DEFINITION_DIR in \"${PYTHON_BUILD_DEFINITIONS[@]}\"; do\n          if [ -d \"${DEFINITION_DIR}\" ]; then\n            find \"${DEFINITION_DIR}\" -maxdepth 1 -type f -and -name \"${DEFINITION}*\" -print0 | xargs -0 -n 1 basename 2>/dev/null\n          fi\n        done\n      } | sort_versions | uniq | remove_unstable_versions\n    }\nsort_versions() {\n  sed 'h; s/[+-]/./g; s/.p\\([[:digit:]]\\)/.z\\1/; s/$/.z/; G; s/\\n/ /' | \\\n    LC_ALL=C sort -t. -k 1,1 -k 2,2n -k 3,3n -k 4,4n -k 5,5n | awk '{print $2}'\n}\n\nremove_unstable_versions() {\n  sed -e '/-beta[1-9][0-9]$/d' -e '/-dev$/d' -e '/-nightly$/d'  -e '/-src$/d' -e '/rc[1-9][0-9]*$/d'\n}\nDEFINITION_CANDIDATES=($(list_definition_candidates))\nif [ \"${#DEFINITION_CANDIDATES[@]}\" -gt 1 ]; then\n  DEFINITION_CANDIDATE=\"${DEFINITION_CANDIDATES[${#DEFINITION_CANDIDATES[*]}-1]}\"\n  echo \"pyenv-sembar: use ${DEFINITION_CANDIDATE} for ${DEFINITION}\" 1>&2\n  DEFINITION=\"${DEFINITION_CANDIDATE}\"\nfi\n\nfi\nfi\n```\n. I don't want to publish this as a plugin since I don't have any plans to use this with my installation.... I hope you to maintain your plugin repository if it's possible :grinning: \nhttps://github.com/yyuu/pyenv/wiki/Authoring-plugins\n. No more action is needed in this issue.\n. It's not possible to hide shims of deactivated versions. It'd be better to run pythonX.Y --version or so to test if the version is available or not.\n. For tox issue, I'm using tox.ini as follows and it is working fine for me with pyenv. AFAIK, it would not try to find executables from PATH if it is  not configured so.\n```\n[tox]\nenvlist = py27,py33,py34\n[testenv]\ncommands=python setup.py test\n[testenv:py27]\nbasepython=python2.7\n[testenv:py33]\nbasepython=python3.3\n[testenv:py34]\nbasepython=python3.4\n```\n. i will do release later today. plz wait for awhile....\nOn Wednesday, February 4, 2015, Alex Gaynor notifications@github.com\nwrote:\n\nAny chance there'll be a release done for this?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/yyuu/pyenv/issues/311#issuecomment-72767491.\n\n\n\u5c71\u4e0b \u512a (\u3084\u307e\u3057\u305f \u3086\u3046)\npeek824545201@gmail.com\n. Sorry for delay. I added a fix and some tests for it in 22ecefd5729d1634bd1c498a43aa30ad87dc351c :disappointed_relieved:\n. I am sorry for not checking this out :disappointed_relieved: \nI think that we don't always have to place pyenv configuration \"at the end of\" shell's profile. Because there are bunch of shell tools similar to pyenv out there, we can put only one of them at the end, though. Where to put pyenv configuration in shell configuration would be heavily depending what is in user's shell profile. I think that one thing pyenv have to notice to users is that it will manage PATH during the pyenv-init. I believe that managing shell PATH is basically user's responsibility. Put pyenv configuration at the end of shell's profile isn't always true and may confuse users.\n. \"towards the end\" sounds relatively better than \"to the end\". Although, this is a documentation issue and it might be sufficient if we wrote some doc in README. Anyway it'd be better to send PR to rbenv as well if we need to modify pyenv-init.\n. Added a note in README where to place pyenv init - in the shell configuration file. Anyway, thanks for sending a PR :octocat: \n. Read the error from your compiler.\n. In my previous comment, I meant that (basically) I would not recommend to use pyenv-built python to dynamically link to external application servers such like Apache's mod_wsgi. It's technically possible and you can try such configuration. I think it's too much complicated, though.\nI'd recommend you to use pyenv-built python for production deployment of python applications as it described in the wiki page. As the answer for your question, for the deployment of Django applications, I can recommend you to use pyenv.\n. What's your actual problem? It's possible to use system's python2 and python3 if you enabled system version in pyenv.\n. :+1: \n. You can create symlink of pyenv into /usr/local/bin. It's your choice. I don't like it, though. I believe, pyenv isn't just for OS X, and /usr/local isn't just for $USER.\n. I'm developing pyenv mainly just for my curious, and for the people who\nare contributing to this project.\nSharing a machine with multiple users is still very common on servers in\nthis 2010's, and I'm using pyenv mainly on Debian GNU/Linux.\nIts '/usr/local/bin' isn't writable from normal users by default.\nI'd like to improve interoperability to OS X since I'm using it as well,\nbut it isn't everything for me. Again, the users of pyenv have options to\ninstall pyenv in '/usr/local/bin' and it'll work properly. Although, I'd\nnot recommend it as the default installation method to keep\ninteroperability to other Unix variants.\n\n\u5c71\u4e0b \u512a (\u3084\u307e\u3057\u305f \u3086\u3046)\npeek824545201@gmail.com\n. I don't have enough time to dig into too. Because there's no significant difference between pyenv and rbenv from the perspective of shell completion configuration, I don't know why only pyenv isn't working well for you. Please let me know again if you find something.\n. dupe #308 \n. :+1:\n. I'll release new version of pyenv soon including this. Thanks :octocat: \n. latest one is always the greatest! :octocat:\n. The .so is shared object, not a script file. Just copying it into custom build Python won't work. You'd need to build that package with pyenv-built python.\n. If you're not sure how you can deal with it, it'd be better to create a\nvirtualenv from system python with supplying '--system-site-package' might\nbe the easiest way to achieve.\n\n\u5c71\u4e0b \u512a (\u3084\u307e\u3057\u305f \u3086\u3046)\npeek824545201@gmail.com\n. Sounds interesting. I'd merge if someone sent me a PR, or I may be write it later.\n. looks weird. I'll try to reproduce later.\n. :+1: \n. @olliewalsh :+1:\n@BengtOFFIS Lack of some versions isn't a problem. Anyone can write patch and send some PRs.\nReplace pypy namespace by pypy-portable would be nice for Linux variants other than Debian/Ubuntu, but it might not be nice for platforms other than Linux such like OS X. Just introducing new namespace of pypy-portable would be the simplest way to deal with....\n. @BengtOFFIS Pushed 292813eca39d3dd18fde2e6c3040071607b25e51 to install pypy-portable on unsupported platforms. This might be the best for your needs.\n. @olliewalsh 292813eca39d3dd18fde2e6c3040071607b25e51 hasn't been merged into master branch yet. Anyway I will merge them later. Thanks for sending PR :octocat: \n. If the version is in .python-version, it is expected behaviour. pyenv version (or pyenv version-origin) will show where the currently activated version came from.\n. @shishirsharma Looks weird. If the system version is visible via pyenv versions, it should be able to be used as a version. I couldn't reproduce the issue. Please let me know the output from PYENV_DEBUG=1 pyenv prefix system.\nsh\nroot@3161ef0662dc:~# pyenv versions\n  system\n* 3.4.3 (set by /root/.pyenv/version)\nroot@3161ef0662dc:~# pyenv global system\nroot@3161ef0662dc:~# pyenv versions\n* system (set by /root/.pyenv/version)\n  3.4.3\nroot@3161ef0662dc:~# pyenv --version\npyenv 20150326-2-gf0eeac6\n. @iamake Please gist the output from PYENV_DEBUG=1 pyenv prefix system once you can reproduce the behaviour.\n. People should know how their shell is configured....\n. @darkkunai Probably you have \"pyenv init\" in your shell configuration file for interactive shells only. To make it working always, you have to have config for all shell processes including non-interactive one. In zsh, it's ~/.zshenv\n. I am using pyenv with zsh and it is working fine for me. Fine here means I\ncan run pyenv outside from $PYENV_ROOT/bin.\nI am not 100% sure what is wrong in your zsh configuration but you would be\nbetter to put pyenv configurations in zshenv or zshrc rather than zprofile\nbecause pyenv needed to be sourced into all shell processes you want to\nwork with it. Actually I'm putting all pyenv stuff in my zshenv.\nBecause pyenv will work with some of environment variables such like\nPYENV_ROOT and PATH, it is very important to have correct values in\nenvironment variables. Please make sure your shell configuration and\nrunning processes are configured properly.\nOn Monday, March 16, 2015, Bryan Bennett notifications@github.com wrote:\n\nI'm attempting to get started with pyenv, but I'm running into a problem\nalmost immediately upon installation. I'm getting the error referenced in\nthe title whenever I launch pyenv *. Upon investigating, it looks like\nit's expecting $CWD to be equal to $PYENV_ROOT whenever pyenv is run.\nHoping this was an environment problem that I was running into and not\nunderstanding fully, I wanted to make sure that $PYENV_ROOT and $PATH\nwere what I expected them to be upon running pyenv init - in .zprofile.\nWhat I did was add a printf call to the top of all of my zsh config files\nto ensure that .zshenv was being called prior to .zprofile, which it is.\nI then made sure that the value of $PYENV_ROOT was right in .zprofile, so\nI echo'd it. It's right.\nAt this point, I'm not sure what expectation I'm violating. I can verify\nthat pyenv will run after I cd $PYENV_ROOT/bin, but this is obviously not\na good solution. Can anyone point me in the right direction? My zsh\ninitialization files are available here\nhttps://github.com/bbenne10/dotfiles, though they're not pared down at\nall. The only ones that should matter though are zshenv and zprofile, which\nare both extremely small.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/yyuu/pyenv/issues/332.\n\n\n\u5c71\u4e0b \u512a (\u3084\u307e\u3057\u305f \u3086\u3046)\npeek824545201@gmail.com\n. FYI, here's the pyenv configuration in my ~/.zshenv. I'd recommend you to set PYENV_ROOT just before invoking eval \"$(pyenv init -)\".\nsh\nif [ -d \"$HOME/.pyenv\" ]; then\n  if [ -d \"$HOME/.pyenv/bin\" ]; then\n    export PATH=\"$HOME/.pyenv/bin:$PATH\"\n  else\n    export PATH=\"$HOME/.pyenv/shims:$PATH\"\n  fi\n  if command -v pyenv >/dev/null 2>&1; then\n    eval \"$(pyenv init - --no-rehash)\"\n    eval \"$(pyenv virtualenv-init -)\"\n  fi\nfi\n. You're right. You can use 'CONFIGURE_OPTS' or 'PYTHON_CONFIGURE_OPTS' (only\nfor python) to pass some options to './configure' at compile time.\nOn Thursday, March 19, 2015, Daniel Bretoi notifications@github.com wrote:\n\nFound this:\n- CONFIGURE_OPTS lets you pass additional options to ./configure.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/yyuu/pyenv/issues/333#issuecomment-83249601.\n\n\n\u5c71\u4e0b \u512a (\u3084\u307e\u3057\u305f \u3086\u3046)\npeek824545201@gmail.com\n. I cannot remember how CPython tries to find sqlite3.h. Please read the impl of CPython.\n. @cilia CONFIGURE_OPTS will be passed to all ./configure, and PYTHON_CONFIGURE_OPTS will be passed only if package name starts from python. If you'd like to pass something to ./configure of CPython, using PYTHON_CONFIGURE_OPTS would be the best option.\nhttps://github.com/yyuu/pyenv/blob/e9aa6cf649673e7de416ef7346be19501d096cb1/plugins/python-build/bin/python-build#L668\nThe packages to be build is depending on the definition of the version. For example, pyenv install 3.4.3 will build readline-6.3 and python-3.4.3 on OS X.\nhttps://github.com/yyuu/pyenv/blob/e9aa6cf649673e7de416ef7346be19501d096cb1/plugins/python-build/share/python-build/3.4.3\n. I couldn't understand what you want to fix. Please explain the problem in detail if you wanna fix something.\n. Hmm. That was my mistake. I updated the Wiki page.\nhttps://github.com/yyuu/pyenv/wiki/Home/_compare/e7e0bcb%5E...e7e0bcb\n. I confirmed that the weird shebang line of pip with jython-2.7-beta3 on OS X. Oddly I couldn't reproduce the issue on my Debian box :disappointed: Probably something wrong in pip's installer script.\nBasically this should be fixed in pip but it might be difficult since Jython 2.7 is still in development and not providing full feature ssl module, AFAIK.\npymongo issue is intrinsically the issue of the module itself. Nothing can be done from pyenv.\n. :+1: \n. Good catch! Thanks :octocat: \n. I am not sure but it looks like some linkage issue of dynamic loading library. Reinstalling libxml2 package doesn't help?\nhttps://bitbucket.org/mirror/cpython/src/648dcafa7e5f40da31079bc7a7f0c445f1ea4ab9/Python/pystate.c?at=v2.7.9#cl-330\n. :+1:\n. good catch :+1:\n. Looks good. Thanks!\n. Thanks for many of improvements :octocat: \nthis change looks reasonable. I will try to change the download links of older PyPy releases as well.\n. This is totally expected behaviour since you configured pyenv global as system in /usr/local/opt/pyenv/version.\n. I found that pyenv-prefix strips trailing /bin/* from PYTHON_PATH. This isn't work well if PYTHON_PATH=/bin/python.\nhttps://github.com/yyuu/pyenv/blob/71c9ff565be5a7f0a7dd47e84730095a4b6d555e/libexec/pyenv-prefix#L34\nProbably same would happen in rbenv as well. Good opportunity to send a patch to rbenv :octocat: \n. I don't believe this is common situation.\n. Please post a link to your PR\n. And, I am happy if you can work to import recent changes from rbenv.... I'll try to work for ruby-build later.\n. subscribed it\n. @blueyed sstephenson/rbenv#819 is merged by #487\n. This would work as expected with current impl of pyenv. I cannot guarantee if pyenv-rehash won't be ran from other places in pyenv, though.\nJust for this case, it'd be sufficient to specify executables in /opt/pyenv/.pyenv/2.7.9/bin as --python-bin and --python-pip as similar as --python-install-lib.\nsh\nfpm --debug -f \n    --python-pypi https://pypi.python.org/simple \\\n    --python-install-lib /opt/pyenv/.pyenv/versions/2.7.9/lib/python2.7/site-packages \\\n    --python-bin /opt/pyenv/.pyenv/versions/2.7.9/bin/python \\\n    --python-pip /opt/pyenv/.pyenv/versions/2.7.9/bin/pip -s python -t deb pyramid\n. This feature might be helpful if the user is using conda environments will be created in ~/.pyenv/versions/anaconda-X.Y.Z/envs/. As of pyenv-virtualenv v20150719, it can list conda environments by pyenv virtualenvs, but pyenv versions doesn't show nothing about those environments. Allow nesting structure of versions would introduce complexity to manage versions, though.\n. After #471, now pyenv can handle virtualenvs in nested directory. At least for now, it only supports virtualenvs inside envs, though.\n. Try running --help or --version would be the easiest for now.\n. I think this is a kind of limitation of pyenv's shims approach. Because it's a core of its concept, it is hard to deal with.\n. :octocat:\n. Pretty cool :+1: Better performance would be really nice.\nAlthough, separating bash processes would be better for simplicity even if it's not the best for performance. I'm not sure performance is how much important for pyenv since pyenv is basically a command-line tool and will be ran only if some python apps are invoked. Most of time would be consumed by application itself.\n. I think we'd be better to wait for/contribute to anyenv. Until then, I want to keep this not merged to avoid unexpected compatibility issues....\n. :+1:\n. RTFM\n. You're a nice guy :stuck_out_tongue_closed_eyes: \n. :dizzy_face: \nAnyway I'll try to check this out. Gimme some more time....\n. I'm really sorry for delay :disappointed:\nAdding --suffix might not be useful for upstream rbenv since they would not need it (only pyenv would need it since it supports multiple versions). I think that this is a kind of corner case. And, I believe it would be better to go for approach like mislav/anyenv if the performance of string manipulation is a matter.\n. Okay, I'll close this for now. Anyway thanks for your help improving the performance!\n. Good. Thanks :+1:\n. Thanks!\n. Realistically it is not possible to support all the filesystem. Please use filesystem which supports longer path name.\n. Looks weird. The definition of pypy-2.5.1 seems to have case clause for linux64 architecture. It should not go to else clause.\nhttps://github.com/yyuu/pyenv/blob/50d5de473168ba159b9035ee592a937c68461bf3/plugins/python-build/share/python-build/pypy-2.5.1#L21\nAnd, even if it goes to the else clause, it should exit with 1, not 0.\nhttps://github.com/yyuu/pyenv/blob/50d5de473168ba159b9035ee592a937c68461bf3/plugins/python-build/share/python-build/pypy-2.5.1#L42\n. I couldn't reproduce the behaviour on a Docker container of Ubuntu trusty.\n```\nroot@1d149f807681:~# pyenv --version\npyenv 20150326-485-g50d5de4\nroot@1d149f807681:~# uname -a\nLinux 1d149f807681 3.16.0-4-amd64 #1 SMP Debian 3.16.7-ckt9-2 (2015-04-13) x86_64 x86_64 x86_64 GNU/Linux\nroot@1d149f807681:~# lsb_release -a \nNo LSB modules are available.\nDistributor ID: Ubuntu\nDescription:    Ubuntu 14.04.2 LTS\nRelease:        14.04\nCodename:       trusty\nroot@1d149f807681:~# pyenv install pypy-2.5.1\nDownloading pypy-2.5.1-linux64.tar.bz2...\n-> https://bitbucket.org/pypy/pypy/downloads/pypy-2.5.1-linux64.tar.bz2\nInstalling pypy-2.5.1-linux64...\nInstalling setuptools from https://bootstrap.pypa.io/ez_setup.py...\nInstalling pip from https://bootstrap.pypa.io/get-pip.py...\nInstalled pypy-2.5.1-linux64 to /root/.pyenv/versions/pypy-2.5.1\nroot@1d149f807681:~# pyenv versions\n* system (set by /root/.pyenv/version)\n  pypy-2.5.1\nroot@1d149f807681:~# pyenv shell pypy-2.5.1\nroot@1d149f807681:~# python --version\nPython 2.7.9 (9c4588d731b7, Mar 23 2015, 16:30:30)\n[PyPy 2.5.1 with GCC 4.6.3]\n``\n. Sorry for delay. Looks fine for me now.\n. @blueyed \nIt'd be nice if pyenv-rehash supports the names of executable likepythonXandpythonX.Yin addition to standardpython. It's not complete, though. There might be other names likepypy,jython` and others.\nI don't think we need to handle all the cases here since I prefer simplicity. An executable named python will be treated as the name of python in pyenv, and it's ruby in rbenv. Basically I think it's sufficient, at least for now.\n. Please check if you have connectivity to the internet.\nhttps://github.com/yyuu/pyenv/blob/50d5de473168ba159b9035ee592a937c68461bf3/plugins/python-build/bin/python-build#L418\n. Thanks for continuous contributions and great patches :octocat:\n. @joshfriend I added you as a collaborator of pyenv!\n. As a workaround, please try 'env PYENV_DEBUG=1 pyenv ...' instead of 'pyenv --debug'. I think this isn't an urgent issue even if it's a kind of bug.\n. Added a FAQ to wiki.\nhttps://github.com/yyuu/pyenv/wiki/Home/_compare/261152b%5E...261152b\nI don't wanna fix this in pyenv since this code is shared between rbenv. There's a workaround and anyone can use it. If you think this should be fixed intrinsically, please send a PR to rbenv to fix this. I'll merge it to pyenv eventually.\n. It would be a problem in get-pip.py itself.\n. If there's some specific pip version which is working well with 3.1.x, we can fix the install definition to install that version of pip only for 3.1.x.\n. I forgot to mention this ticket in the commit comment but I changed to use older pip 1.5.6 for the definition of 3.1.5. Rebuilding 3.1.5 with pyenv would work.\nhttps://github.com/yyuu/pyenv/commit/294738842c12c3ba118641326ec15f1d6a47aa23\n. :+1: \n. Umm. Good catch :+1: Thanks.\n. I confirmed this is working expectedly at least on sed of my OS X 10.10.3. BTW, how I can reproduce the \"Broken pipe\"? I have never seen it on my installation...\n. @blueyed Could you explain the actual use case scenario of this?\n. Idealistically all python, python2 and python3 should be handled evenly. Although, at least with current impl, python is the special name for executable in pyenv (and ruby for rbenv). Honestly I'm not sure what is the benefit of setting PYENV_DIR on invocation of python2 and python3 in addition to python....\n. Kind of internal call, or some kind of legacy code. I've just forgotten what that's for....\nThe PYENV_DIR will be read by ./libexec/pyenv and pyenv will once try to chdir to the directory if it is possible or not. However it will return to original cwd once it suceeded to chdir. So if I understand correctly it isn't so meaningful.\n. Good catch :+1:\nI confirmed the behaviour reported on #404, and confirmed that this changes the behaviour to respect local version at symlink destination.\nI believe your changes seem to be reasonable and useful for most cases, though it changes current behaviour slightly. Please add tests for this feature, then I'll merge this. (and, I think it's worth to reopen PR on rbenv as well)\n. I added tests in 438e828eb507536eebe42adee3e896bceb165d8c and merged into master. Thanks for PR.\n. Yes, I know. I will fix it eventually, but I don't think it's a problem for now since ez_setup.py is relatively small.\n. :+1:\n. duplicated with #380 \n. Umm. Looks weird.\nPlease create a gist from the complete output from pyenv install -v 3.4.3.\n. Your problem looks similar to #263, #273 and #279. You might have some problem in your installation of Command Line Tools for Xcode. Please review your system and try again.\n. In #429, now I'm trying to add functionality to install openssl if it's not found in /usr/include or brew's prefix. It should mitigate the issue like this.\n. I merged changes in #429 into master branch. With latest master, python-build should build & install openssl if it is not available via both Xcode and Homebrew. This should solve the issue of missing OpenSSL library intrinsically.\nFeel free to reopen if you still have some issues.\n. pyenv itself isn't providing the pip installer. please report the issue to https://github.com/yyuu/pyenv-installer\n. The pip package is not maintained as a part of this project. It's experimental hacky solution and not a recommended way to install pyenv at least for now.\n. Could not reproduce the problem on my installation.\nBasically pyenv just invokes pip from its shell scripts, and the problem would be in the package or pip itself.\n. I confirmed the reproduction. I'll investigate the cause. Thanks for reporting :octocat: \n. Found a bug in pyenv-prefix. I fixed that and then added test for it. Thanks again for reporting.\n. Anyone on GH can edit wiki.\n. This is just a configuration issue of your system, not an issue of pyenv. One thing I'm sure is you're using case insensitive filesystem. To make things working, you should at least put /bin in front of the installation path of XAMPP.\n. At first, you should create cache directory by mkdir -p \"$(pyenv root)/cache\" to create repository cache. Then, run pyenv uninstall -f 3.5-dev && pyenv install 3.5-dev everyday.\n. I'm not sure what you want to do. PYTHON_BUILD_CACHE_PATH isn't current directory by default. It's at ${PYENV_ROOT}/cache.\nhttps://github.com/yyuu/pyenv/blob/114063495f08a5c3f53d9eba8238e32959832296/plugins/python-build/bin/pyenv-install#L178\n. pyenv doesn't do nothing special other than custom prefix. Even if there is some problem it would be a problem of the package itself. Anyway you should describe what you did actually and put all the output.\n. I don't know much about dbus-python, but you don't need to install system's python-dev package if you install python via pyenv. Because pyenv builds and installs from source, obviously it is including headers. And, you would need to specify dbus' ./configure script where your python is installed, like './configure --with-python=$(pyenv root)versions/3.3.3/bin/python' or something like that. This is heavily depending how the build system of the package.\n. I think this is a general question if building python, and not an issue of pyenv.\n. :+1:\n. @bartekbrak pyenv-virtualenv is just a wrapper for virtualenv. I think this kind of thing is basically an issue of underlying virtualenv. Go ahead to create separate issue.\n. I added a hook file in yyuu/pyenv-virtualenv@cce1b9535d31abb083f1f0fe56d3dd221472c70b to allow pyenv to find python-config from the source version of currently activated virtualenv. I believe this works well with most cases when building native extensions.\nAlthough, the problem with dbus-python won't be solved by ^ since its build script is expecting python-config at the same directory as python executable. This expectation would be wrong even with vanilla virtualenv (or, pyvenv). I believe it should be fixed in dbus-python side, and I'll try to fix it later if I have time.\nhttps://github.com/posborne/dbus-python/blob/ff53d1085dfc005cefecc5e2a495117b9248caf3/configure.ac#L81\n. Just for reference, I've prepared another hook script as a workaround for dbus-python. Save this file at $(pyenv root)/plugins/pyenv-virtualenv/etc/pyenv.d/virtualenv/python-config.bash and recreate virtualenv with pyenv virtualenv then newly created virtualenv will come with symlinks of python-config.\n``` sh\nsymlink python-config into virtualenv since some of native extensions (e.g. dbus-python)\nexpects it as the same path as python executable.\nhttps://github.com/yyuu/pyenv/issues/397\nsymlink_python_config() {\n  local real_prefix=\"$(pyenv-virtualenv-prefix 2>/dev/null || pyenv-prefix 2>/dev/null || true)\"\n  if [ -n \"${real_prefix}\" ] && [ -d \"${VIRTUALENV_PATH}\" ]; then\n    local file\n    for file in \"${real_prefix}/bin/\"; do\n      if [ -x \"${file}\" ]; then\n        case \"${file##/}\" in \n        \"python\"\"-config\" )\n          ln -fs \"${file}\" \"${VIRTUALENV_PATH}/bin/${file##/}\"\n        ;;\n        esac\n      fi\n    done\n  fi\n}\nafter_virtualenv symlink_python_config\n```\nI confirmed this works well with current impl of dbus-python. I'm still thinking that fixing dbus-python itself would be the proper way, though.\n. Opened posborne/dbus-python#1 for dbus-python issue.\n. Technically nuitka is a Python package and it can be installed via PyPI, by pip install nuitka. What you intended was to run nuitka-run as python from pyenv, like following?\n``` sh\n$ pyenv install nuitka-dev\n$ pyenv shell nuitka-dev\n$ python --help\nUsage: nuitka-run [options] main_module.py\nOptions:\n  --version             show program's version number and exit\n  -h, --help            show this help message and exit\n  --module              Create an extension module executable instead of a\n                        program. Defaults to off.\n  --standalone, --portable\n                        Enable standalone mode in build. This allows you to\n                        transfer the created binary to other machines without\n(... snip ...)\n``\n. @jimmywan Looks like configuration problem with pyenv-virtualenv + anaconda/miniconda. Please move issue to pyenv-virtualenv.\n. Hmm. Probably some broken shims caused it. I'm not sure why, though. Removing everything in ~/.pyenv/shims and then 'pyenv rehash' could be a workaround.\n. :+1: \n. Agreed with @thomasjo. SettingLD_LIBRARY_PATH` is harmful. Plus, it will be effective only for GNU/Linux.\nIn python-build, it sets RPATH to executables to skip setting up LD_LIBRARY_PATH or DYLD_LIBRARY_PATH. I think same would be available for other shared libraries.\nhttps://github.com/yyuu/pyenv/blob/36c5cbf74f484016ebc49cb4961982483fd88525/plugins/python-build/bin/python-build#L1749-L1755\nNevertheless you need to set LD_LIBRARY_PATH, you can setup it in custom exec hook of pyenv. See also https://github.com/yyuu/pyenv/wiki/Authoring-plugins#pyenv-hooks about hooks.\n. If you installed packages into virtualenv, pyenv might not be able to hook invocation of pip install since virtualenv injects the path to itself at the top of PATH. If so, please run pyenv rehash manually to update shims.\n. Thanks for reporting. Please provide me some minimum script to reproduce the issue (or, test case) if you're available.\n. Is there rbenv PR?\n. I couldn't find one in rbenv PRs. I think same can be applied to rbenv and it is definitely useful for them. Please send a PR to them as well.\n. It is because pip handles only virtualenvs differently. I don't think this is an issue of pyenv, would be an issue of pip.\nhttps://github.com/pypa/pip/blob/685c8b5ace6aaac7bf8c2c0269a9adb95e17a6ad/pip/cmdoptions.py#L373-L382\nhttps://github.com/pypa/pip/blob/685c8b5ace6aaac7bf8c2c0269a9adb95e17a6ad/pip/locations.py#L105-L115\nBasically I think the user of pip should specify --src explicitly if s?he wants to install the library to custom destination. I don't want to have something like ~/.pyenv/src since everything in pyenv is basically editable.\n. I'm not sure what is the root cause at least for now, but it looks like your environment has some of problems.\nIt failed to create symlink of python executable:\nhttps://gist.github.com/rothnic/3e785df935ae0e61adb7#file-pyenv_3-4-3_build_log-log-L1295\nIt failed to build ssl module of CPython. It is a requirement to install setuptools/pip.\nhttps://gist.github.com/rothnic/3e785df935ae0e61adb7#file-pyenv_3-4-3_build_log-log-L6583\nPlease make sure if you can build python without using pyenv. If it's possible, something might be wrong in pyenv.\n. I confirmed the reproduction of same compilation error of CPython 3.4.3 on Alpine Linux 3.2. It seems there're some compilation issue with gcc-musl.\nhttps://gist.github.com/rothnic/3e785df935ae0e61adb7#file-pyenv_3-4-3_build_log-log-L6550-L6562\n. Changing compiler could work, obviously....\nsh\napk-install clang\nCC=clang pyenv install -v 3.4.3\n. I haven't yet succeeded to build CPython with MUSL libc. Basically this would be a build problem of CPython itself. As a workaround, please explicitly specify pyenv to use clang when building.\n. This is an issue tracker. You should debug yourself, or you can post a bounty to ask someone to investigate it.\n. @BanzaiMan @alex \nI configured to cline from bitbucket since its bandwidth seems faster than hg.python.org at the time of writing the feature. I think it should be replaced by hg.python.org if the mirror isn't working now. Please  create PR from your patch.\n@joshfriend \nCloning hg repo is much bigger than source tarball, but I think it is not a problem if there's ~/.pyenv/cache. I think it would be better to use source repo than tarball for installing from development HEAD.\n. This must be merged by #487\n. This has been merged in #487. Thanks!\n. @jackmaney Looks weird :disappointed: It is working fine for me with Homebrew's Python 2.7.\nCan you try to reinstall 2.7.x by pyenv install -v 2.7.x 2>&1 and create a gist from it?\n. @jackmaney I confirmed the reproduction of the issue with existence of ~/.local/lib/python2.7/site-packages/homebrew.pth as import site; site.addsitedir(\"/usr/local/lib/python2.7/site-packages\"). Now I'm looking for some workaround....\nThis will only happen if there is Homebrew's library path is in sys.path and there is ensurepip module available. Because ensurepip is available on Python 2.7 from 2.7.9, this would affect only 2.7.9 and 2.7.10 for now. \n. @jackmaney I believe the following branch should fix the issue. Can you try rebuilding 2.7.9 or 2.7.10?\nhttps://github.com/yyuu/pyenv/compare/issue411\n. :+1: \n. :+1: \n. I tried, but I couldn't reproduced.\n```\n% cat <showsitepackages.py\n!/usr/bin/env python\nfrom future import print_function\nimport site\nprint(repr(site.getsitepackages()))\nEOS\n% pyenv version\n2.7.10 (set by PYENV_VERSION environment variable)\n% python showsitepackages.py\n['/home/yyuu/.pyenv/versions/2.7.10/lib/python2.7/site-packages', '/home/yyuu/.pyenv/versions/2.7.10/lib/site-python']\n% python -c 'import importlib; importlib.import_module(\"showsitepackages\")'\n['/home/yyuu/.pyenv/versions/2.7.10/lib/python2.7/site-packages', '/home/yyuu/.pyenv/versions/2.7.10/lib/site-python']\n```\n. I close this for now since I couldn't reproduce it. Feel free to reopen if you still have problem.\n. Windows don't have bash by default. It's not feasible.\n. Probably you had problem downloading file from https://bootstrap.pypa.io/get-pip.py at that time. I couldn't reproduce this.\n. :+1: \n. This is by design and is not easily avoidable. If the behaviour is unacceptable, I'd recommend you to build PATH by yourself.\n. It looks like ssl module failed to be compiled by unknown reason. I'll try to rebuild them later.\n. I confirmed the build of 3.1.2 is failing on Debian sid too. I could build 3.0.1 though.\nI realized that there no patches are installed for 3.1, 3.1.1 and 3.1.2. I'll try to prepare patches for them.\nhttps://github.com/yyuu/pyenv/tree/c0f691fc571dc1df13be98d01825336279389b0c/plugins/python-build/share/python-build/patches\n. Confirmed that the 002_readline63.patch cannot be applied to 3.1.1 and 3.1.2. I'll remove it from those versions for now.\n. I confirmed that I can build 2.4.1 and 2.4.3 on my latest Debian GNU/Linux sid amd64.\n. Confirmed same overflow error with Dockerfile below. Plus, I also confirmed same error on Vagrant's chef/ubuntu-14.04.\nFROM ubuntu:14.04\nMAINTAINER Yamashita, Yuu <peek824545201@gmail.com>\nENV DEBIAN_FRONTEND \"noninteractive\"\nENV PATH \"/root/.pyenv/bin:/usr/bin:/bin:/usr/sbin:/sbin\"\nRUN apt-get update\nRUN apt-get --yes install sudo\nRUN apt-get --yes install build-essential curl git libbz2-dev libsqlite3-dev libssl-dev patch zlib1g-dev\nRUN git clone --depth 1 --quiet https://github.com/yyuu/pyenv.git /root/.pyenv\nRUN pyenv install -v 2.4.3\nI'm still not sure the the root cause of this, but we might need some patches to fix. (actually this is a build issue of CPython itself; the version is no longer maintained, though.)\n. Confirmed env PYTHON_CONFIGURE_OPTS=\"BASECFLAGS=-U_FORTIFY_SOURCE\" pyenv install -v 2.4.3 solves the build issue. It could not be optimal, though.\n. I found that 001_fortify_crash_workaround.diff isn't installed for 2.4 releases and it solves the build issue.\n. readline is just an option module. Please write some patch by yourself if you need it. I don't have motive since I'm not using it anymore.\n. You have trouble to create executables. Please make sure Command Line Tools for Xcode is properly installed and is working. This isn't an issue of pyenv.\n. :+1: \n. As @thomasjo described, it is totally expected behaviour that it means you have some system python. No bug.\n. :+1:\n. Gimme some patch.\n. I found there're some PyPy-STM binaries on https://bitbucket.org/pypy/pypy/downloads/. It would be easy to add definitions for them.\n. Actually python-build is already configured to find openssl from brew's prefix if it is available. With this code, you don't have to do brew link --force openssl.\nhttps://github.com/yyuu/pyenv/blob/43eb33e9295816a79858f5174ae487504476a489/plugins/python-build/bin/python-build#L1265\n. @impressiver I suspect you didn't have Command Line Tools for Xcode at that time and you also didn't have openssl headers in /usr/include/openssl. I'm not sure if Command Line Tools for Xcode is available for 10.11 Beta, but apparently pyenv needs openssl headeres in either /usr/include or brew's prefix.\nThe summoning is required if your system doesn't have proper installation of Command Line Tools for Xcode and doesn't have brew's openssl. If you prefer simpler way, I'd recommend you to install brew and brew install openssl. It also requires Command Line Tools for Xcode, though.\nAnyway, if you find something is missing on the Wiki documentations, feel free to update the document as need. Everyone can edit.\n. @bertjwregeer Umm. Sorry my bad. The use_homebrew_openssl will never be invoked with current pyenv impl. I'll try to fix the python-build to use it. Thanks for letting me know.\n. @bertjwregeer e52ed97 should install use brew's openssl if it's available, or install openssl from source. Can you give it a try?\n. I merged ^ changes into master branch. With latest master, python-build should build & install openssl if it is not available via both Xcode and Homebrew. This should solve the issue of missing OpenSSL library intrinsically.\nFeel free to reopen if you still have some issues.\n. I'm not sure why getaddrinfo() isn't working on your system, but apparently networking on your system isn't configured properly.\nAs workaround, as you can see in the error message, try specifying --disable-ipv6 as a configure option.\nsh\n$ PYTHON_CONFIGURE_OPTS=\"--disable-ipv6\" pyenv install -v 2.7.9\n. I couldn't reproduce such behaviour. Probably you have stale shim scripts in ~/.pyenv/shims/* after you moved ~/.pyenv from other place or doing something. Please run pyenv rehash and then try again.\n. It might be depending on how you've upgraded pip. Anyway try 'pyenv rehash' and check how it goes.\n. Please check if pyenv which pip returns the path to pip executable or not. If it's still not working, please let me know the output from pyenv whence pip2.7 and pyenv versions\n. :+1:\n. Already fixed in 5ba585769b139198f9b2b31cf7b4f7ab24b67c9b\n. I don't like it. Use SO. It's 2015.\n. Okay. Anyway we don't have enough eyes and hands to handle requests from users. Just expanding communication channel must not be the solution for it.\n. Anyone can start hosting ML, chat rooms, or something alike by themselves. I will authorize it if there's no special reason and will put a link to it in README.\n. :+1: \n. #439  should solve this.\n. :+1: \n. @bertjwregeer Which Python version were you using?\n. I couldn't reproduce the error with 2.6.9 on Raspbian. I'll try on OS X later. Anyway, this could be some dependency issue of pip (or, argparse?).\n. Good to know :)\n. Reverting fe934642c51d2a3c76bff6eb4728e091fc530daf would revert the python-build behaviour to install setuptools separately from pip. I believe this is a kind of misconfiguration of pip package and its dependencies, and it has already been resolved.\nI'd like to keep current behaviour since there's no problem with it for now. I'll revert the changes in python-build once similar issue happened again.\n. What's your point? It looks nothing wrong for me.\n. If so, you should not put system at the top of versions.  'pyenv global 3.4.3 system' should solve.\n. I was really frustrated with fire-and-forget non-bug opened issues. Sorry I didn't get what you meant.\nThis is expected behaviour with current impl of pyenv at least for now. python is the special name in pyenv which always points to the executable of python interpreter of first activated version.\nIf you want to switch versions with using python executable, you need to switch version per invocation. (using the PYENV_VERSION would be the easiest)\nsh\n$ pyenv versions\n* system (set by /home/poh/.pyenv/version)\n  2.7.10\n  3.4.3\n  3.5.0\n$ env PYENV_VERSION=system python --version\nPython 3.4.1\n$ env PYENV_VERSION=3.4.3 python --version\nPython 3.4.3\n. I installed pyinstaller 67a5f8d into pyenv built 3.4.3. (I couldn't install pyinstaller to 3.4.3 via PyPI)\n```\n% sw_vers\nProductName:    Mac OS X\nProductVersion: 10.10.5\nBuildVersion:   14F27\n% pyenv version\n3.4.3 (set by /Users/yyuu/.pyenv/version)\n% git clone https://github.com/pyinstaller/pyinstaller.git\nCloning into 'pyinstaller'...\nremote: Counting objects: 26946, done.\nremote: Compressing objects: 100% (356/356), done.\nremote: Total 26946 (delta 214), reused 0 (delta 0), pack-reused 26589\nReceiving objects: 100% (26946/26946), 28.81 MiB | 2.64 MiB/s, done.\nResolving deltas: 100% (19474/19474), done.\nChecking connectivity... done.\n% git describe\n3.0.dev2-31-g67a5f8d\n% python setup.py install\nrunning install\nrunning bdist_egg\nrunning egg_info\ncreating PyInstaller.egg-info\nwriting PyInstaller.egg-info/PKG-INFO\nwriting entry points to PyInstaller.egg-info/entry_points.txt\nwriting top-level names to PyInstaller.egg-info/top_level.txt\nwriting dependency_links to PyInstaller.egg-info/dependency_links.txt\nwriting requirements to PyInstaller.egg-info/requires.txt\nwriting manifest file 'PyInstaller.egg-info/SOURCES.txt'\nreading manifest file 'PyInstaller.egg-info/SOURCES.txt'\nreading manifest template 'MANIFEST.in'\n(... snip ...)\nInstalling pyi-archive_viewer script to /Users/yyuu/.pyenv/versions/3.4.3/bin\nInstalling pyi-bindepend script to /Users/yyuu/.pyenv/versions/3.4.3/bin\nInstalling pyi-makespec script to /Users/yyuu/.pyenv/versions/3.4.3/bin\nInstalling pyi-grab_version script to /Users/yyuu/.pyenv/versions/3.4.3/bin\nInstalling pyi-set_version script to /Users/yyuu/.pyenv/versions/3.4.3/bin\nInstalling pyinstaller script to /Users/yyuu/.pyenv/versions/3.4.3/bin\nInstalling pyi-pprint_toc script to /Users/yyuu/.pyenv/versions/3.4.3/bin\nInstalled /Users/yyuu/.pyenv/versions/3.4.3/lib/python3.4/site-packages/PyInstaller-3.0.dev3+67a5f8d-py3.4.egg\nProcessing dependencies for PyInstaller==3.0.dev3+67a5f8d\nSearching for setuptools==18.3.2\nBest match: setuptools 18.3.2\nAdding setuptools 18.3.2 to easy-install.pth file\nInstalling easy_install-3.4 script to /Users/yyuu/.pyenv/versions/3.4.3/bin\nInstalling easy_install script to /Users/yyuu/.pyenv/versions/3.4.3/bin\nUsing /Users/yyuu/.pyenv/versions/3.4.3/lib/python3.4/site-packages\nFinished processing dependencies for PyInstaller==3.0.dev3+67a5f8d\n% pyenv rehash\n```\nI confirmed the reproduction of the build error on OS X, and I also confirmed it's working on Debian GNU/Linux amd64.\n```\n% pyinstaller hello.py\n27 INFO: PyInstaller: 3.0.dev3+67a5f8d\n27 INFO: Python: 3.4.3\n35 INFO: Platform: Darwin-14.5.0-x86_64-i386-64bit\n36 INFO: wrote /Users/yyuu/pyi/hello.spec\n36 WARNING: You are running 64-bit Python: created binaries will only work on Mac OS X 10.6+.\nIf you need 10.4-10.5 compatibility, run Python as a 32-bit binary with this command:\nVERSIONER_PYTHON_PREFER_32_BIT=yes arch -i386 /Users/yyuu/.pyenv/versions/3.4.3/bin/python\n\n1042 INFO: UPX is not available.\n1043 INFO: Extending PYTHONPATH with /Users/yyuu/pyi\n1043 INFO: checking Analysis\n1043 INFO: Building Analysis because out00-Analysis.toc is non existent\n1044 INFO: Initializing module dependency graph...\n1045 INFO: Looking for graph hooks ...\n1046 INFO: Analyzing base_library.zip ...\n4168 INFO: running Analysis out00-Analysis.toc\n4176 INFO: Analyzing /Users/yyuu/pyi/hello.py\n4179 INFO: Looking for import hooks ...\n4181 INFO: Processing hook   hook-encodings.py\n4189 INFO: Processing hook   hook-xml.py\n4427 INFO: Processing hook   hook-distutils.py\n4430 INFO: Processing hook   hook-pydoc.py\n4430 INFO: Processing hook   hook-xml.sax.py\n4442 INFO: Looking for ctypes DLLs\n4442 INFO: Analyzing run-time hooks ...\n4450 INFO: Looking for dynamic libraries\n4527 INFO: Looking for eggs\n4527 INFO: Python library not in binary depedencies. Doing additional searching...\nTraceback (most recent call last):\n  File \"/Users/yyuu/.pyenv/versions/3.4.3/bin/pyinstaller\", line 9, in \n    load_entry_point('PyInstaller==3.0.dev3+67a5f8d', 'console_scripts', 'pyinstaller')()\n  File \"/Users/yyuu/.pyenv/versions/3.4.3/lib/python3.4/site-packages/PyInstaller-3.0.dev3+67a5f8d-py3.4.egg/PyInstaller/main.py\", line 99, in run\n    run_build(opts, spec_file, pyi_config)\n  File \"/Users/yyuu/.pyenv/versions/3.4.3/lib/python3.4/site-packages/PyInstaller-3.0.dev3+67a5f8d-py3.4.egg/PyInstaller/main.py\", line 47, in run_build\n    PyInstaller.building.build_main.main(pyi_config, spec_file, **opts.dict)\n  File \"/Users/yyuu/.pyenv/versions/3.4.3/lib/python3.4/site-packages/PyInstaller-3.0.dev3+67a5f8d-py3.4.egg/PyInstaller/building/build_main.py\", line 732, in main\n    build(specfile, kw.get('distpath'), kw.get('workpath'), kw.get('clean_build'))\n  File \"/Users/yyuu/.pyenv/versions/3.4.3/lib/python3.4/site-packages/PyInstaller-3.0.dev3+67a5f8d-py3.4.egg/PyInstaller/building/build_main.py\", line 675, in build\n    exec(text, spec_namespace)\n  File \"\", line 16, in \n  File \"/Users/yyuu/.pyenv/versions/3.4.3/lib/python3.4/site-packages/PyInstaller-3.0.dev3+67a5f8d-py3.4.egg/PyInstaller/building/build_main.py\", line 205, in init\n    self.postinit()\n  File \"/Users/yyuu/.pyenv/versions/3.4.3/lib/python3.4/site-packages/PyInstaller-3.0.dev3+67a5f8d-py3.4.egg/PyInstaller/building/datastruct.py\", line 153, in postinit\n    self.assemble()\n  File \"/Users/yyuu/.pyenv/versions/3.4.3/lib/python3.4/site-packages/PyInstaller-3.0.dev3+67a5f8d-py3.4.egg/PyInstaller/building/build_main.py\", line 503, in assemble\n    self._check_python_library(self.binaries)\n  File \"/Users/yyuu/.pyenv/versions/3.4.3/lib/python3.4/site-packages/PyInstaller-3.0.dev3+67a5f8d-py3.4.egg/PyInstaller/building/build_main.py\", line 568, in _check_python_library\n    raise IOError(msg)\nOSError: Python library not found! This usually happens on Debian/Ubuntu\nwhere you need to install Python library:\napt-get install python3-dev\n  apt-get install python-dev\n``\n. It's apparently failing to findlibpython3.4.dylib`.\nhttps://github.com/pyinstaller/pyinstaller/blob/67a5f8d577fe77922ca881d7277d795f569e4ed9/PyInstaller/building/build_main.py#L555-L568\nhttps://github.com/pyinstaller/pyinstaller/blob/67a5f8d577fe77922ca881d7277d795f569e4ed9/PyInstaller/depend/bindepend.py#L834-L851\nBy default of CPython (and pyenv), the python executable will be generated as static linked and libpython*.dylib will not be generated. I confirmed that rebuilding CPython 3.4.3 with enabling framework support (env PYTHON_CONFIGURE_OPTS=\"--enable-framework\" pyenv install -v 3.4.3) solves the issue with PyInstaller.\n@ThomasWaldmann Could you check if you don't have ${PYENV_ROOT}/versions/3.4.3/Python.framework? If so, please rebuild your 3.4.3 with --enable-framework and try running PyInstaller again.\n. I realized that PyInstaller installed into pyenv built 3.4.3 was using libpython3.4.so.1 from /usr/lib/x86_64-linux-gnu (shared object of system python) on Debian GNU/Linux. It seems that current impl of PyInstaller requires CPython built with --enable-shared (or, --enable-framework on OS X).\nI'll update document about how we can build CPython with enabling shared.\n. Opened a PR of pyinstaller/pyinstaller#1510 to improve PyInstaller's error message.\n. Updated Wiki of both PyInstaller and pyenv.\n. I believe that there are no tasks remaining now.\n. I am pretty inconsistent. refs #436\n. If there's cache files in '~/.pyenv/cache', pyenv will use it instead of downloading it. Though 'ensurepip' tries to download install pip and its dependencies via internet.\n. I confirmed that I could install CPython without internet connection with cache files.\n$ mkdir -p \"$(pyenv root)/cache\"\n$ wget -O \"$(pyenv root)/cache/Python-2.7.10.tgz\" https://www.python.org/ftp/python/2.7.10/Python-2.7.10.tgz\n$ wget -O \"$(pyenv root)/cache/get-pip.py\" https://bootstrap.pypa.io/get-pip.py\n$ pyenv install -v 2.7.10\n. You would need internet connections for the versions without ensurepip.\n. Preparing some great-firewall-ready CDN might be good for pyenv users especially in China. I'm not sure which service is good for the purpose & how much does it costs.... Any insights?\n. Basically I don't like to have duplications. If you really want such feature, you can write a plugin to add subcommand.\nhttps://github.com/yyuu/pyenv/wiki/Authoring-plugins\n. :+1: \n. python-build will show all the versions in $(pyenv root)/plugins/python-build/share/python-buuld regardless current platform type. Please check output of 'pyenv --version' between them.\n. I deleted 3.1-dev from pyenv in 78c1d7186d38d2f4ac3a6361ff431f7760a0625b#diff-829bd38e9096ee1ba2d562d4b79d392a since the branch for 3.1 is no longer available on CPython repo. Probably you are using older version of pyenv on OS X.\n. It is failing to install setuptools or pip? Anyway I couldn't reproduce it on non-Docker environment.\n. This must be an encoding issue. Please add ENV LC_ALL C.UTF-8 before pyenv install 3.0.1 and try again.\n. @mcandre any updates?\n. I'm still using Yosemite. Probably you don't have OpenSSL headers in /usr/include.\nThis isn't intrinsic fix but reinstalling pyenv from latest github repo would help since it tries to use brew's openssl otherwise build it by itself.\n. @ashishnegi \nAt first, you have to make sure if orca-env is a virtualenv created from Python 3.x of your system with --system-site-packages. I suspect you created the virtualenv from Python 2.x of your system.\nYou can check virtualenv's parent by python -c 'import sys;print(sys.real_prefix)' (or, python -c 'import sys;print(sys.base_prefix)' if the virtualenv is actually created by pyvenv). You would be also check if the virtualenv is created with --system-site-packages by absent of ${virtualenv_prefix}/lib/pythonX.Y/no-global-site-packages.txt.\nEven if there is something wrong in pyenv and derivatives, this must be an issue of pyenv-virtualenv, not pyenv.\n. This must not be an issue of pyenv.\n. - The 'virtualenv_prefix' I meant would be '~/.pyenv/versions/orca-env', in this case\n- '--system-site-packages' is a feature of virtualenv which indicates created virtualenv to be look for 'sys.real_prefix' (or 'sys.base_prefix') if a library is not available in the virtualenv. See also virtualenv doc\nBasically your issue must not be an actual issue of pyenv/pyenv-virtualenv.  The following commands would fix your 'orca-env' to act as a virtualenv from system's 'python3' with '--system-site-packages'. See also for virtualenv docs about virtualenv options.\npyenv shell 3.4.3\n pip install -U virtualenv\nmv -f ~/.pyenv/versions/orca-env ~/.pyenv/versions/orcaenv.orig || true\npyenv virtualenv --python=/usr/bin/python3 --system-site-packages system orca-env\npyenv shell --unset\n. RTFM and read messages\nhttps://github.com/yyuu/pyenv#basic-github-checkout\n. You just don't have zlib.\n. Hmm, sounds interesting. \nFor more investigation, could you create a gist from output of 'pyenv install -v 3.5'?\n. Umm. I've finished upgrading to El Capitan, but I couldn't reproduce the build failure of 3.5.0 on it....\n. Run xcode-select --install to fix installation of Command Line Tools for Xcode working.\n. It was forked from older version of rbenv readme. If you find something is wrong or outdated, please send us some PR. PRs are always welcomed.\n. PR welcome.\n. @brechtm The cause of this must be as same as #450.... Please try again with env LC_ALL=C.UTF-8 pyenv install 3.0.1.\n. Ah, you're on OS X. C.UTF-8 would not be available on it. I'll look for another workaround....\n. I confirmed that I can build 3.0.1 on Debian GNU/Linux with using pyenv. But I couldn't find any workaround on OS X at least for now.\nI found similar bug report in setuptools but it marked as \"won't fix\". Basically this would be kind of a bug in 3.0, and it has been fixed in 3.1. I tried to port http://bugs.python.org/issue5883 to 3.0.1, but I couldn't since there were significant changes in IO between 3.0 and 3.1.\nAs conclusion, I'd recommend you to use some Linux VMs to install 3.0.1. Please let me know if you find any other workaround.\nSee also:\n- https://bitbucket.org/pypa/setuptools/issues/16\n- https://github.com/pypa/virtualenv/issues/381\n. Added message about setuptools installation failure in efdba2d76b9f7abd5b6e695cfc34f2185bc6c1b4.\n. Starting from 2.7.9, CPython shipped with ensurepip and it will install pip after installation without help from pyenv/pyenv-virtualenv. This should not be an issue.\nhttps://docs.python.org/2/library/ensurepip.html\n. virtualenv bundles setuptools, pip and relatives as its package contents (in the virtualenv_support directory). I suspect you're using way older release of virtualenv and it installed older pip.\nAFAIK, there's no way to suppress to suppress the message. I confirmed that virtualenv v13.1.2 shows the message even with --quiet.\nsh\n% pyenv virtualenv --quiet 2.7.10 foo\nIgnoring indexes: https://pypi.python.org/simple\nRequirement already satisfied (use --upgrade to upgrade): setuptools in /home/yyuu/.pyenv/versions/foo/lib/python2.7/site-packages\nRequirement already satisfied (use --upgrade to upgrade): pip in /home/yyuu/.pyenv/versions/foo/lib/python2.7/site-packages\n. Actually pyenv-virtualenv is just a wrapper for virtualenv and it will never upgrade existing installation of virtualenv if there is some version installed, at least with current impl. Just upgrading virtualenv with pip install -U virtualenv forces pyenv-virtualenv to use latest version of virtualenv.\n. #458\n. I don't have 10.9 anymore. I could not reproduce this.\nI suspect you have weird configuration in DYLD_LIBRARY_PATH.\n. @tjsoftworks Please create some gist from the full output from pyenv with enabling debug logging. That might help for investigation.\n1. Output from env (please conceil your credentials from the output if you have something)\n2. Output from pyenv install -v 3.5.0 2>&1 | tee log.txt\n. Apparently your libSystem.B.dylib is broken. I'd recommend you to reinstall Command Line Tools for OS X, but not sure if it helps.\nAnyway this must not be a problem with pyenv. I believe you cannot build any CPython versions even without pyenv.\n. This must be a problem on broken system, not an issue of pyenv.\n. not an issue of pyenv.\n. I suspect you are using very old version and CPython refused to use it. Plz lemme know the following.\n- version of openssl-devel\n- output from pyenv install -v 2.7.10 2>&1 | tee build.log (plz create a gist)\n. My bad, the command line I pasted was wrong. Please recreate gist with captured output from pyenv install -v 2.7.10 2>&1\n. It looks like your system is just wrongly configured. Reinstalling some of broken libs installed in /usr/local would help. This should not be an issue of pyenv anyways.\nbuilding '_ssl' extension\ngcc -pthread -fno-strict-aliasing -g -O2 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -I. -IInclude -I./Include -I/home/voleary/.pyenv/versions/2.7.10/include -fPIC -I. -IInclude -I./Include -I/home/voleary/.pyenv/versions/2.7.10/include -I/usr/local/include -I/tmp/python-build.20151028143832.5465/Python-2.7.10/Include -I/tmp/python-build.20151028143832.5465/Python-2.7.10 -c /tmp/python-build.20151028143832.5465/Python-2.7.10/Modules/_ssl.c -o build/temp.linux-x86_64-2.7/tmp/python-build.20151028143832.5465/Python-2.7.10/Modules/_ssl.o\n/tmp/python-build.20151028143832.5465/Python-2.7.10/Modules/_ssl.c: In function \u2018_setup_ssl_threads\u2019:\n/tmp/python-build.20151028143832.5465/Python-2.7.10/Modules/_ssl.c:3883: warning: comparison is always false due to limited range of data type\ngcc -pthread -shared -L/home/voleary/.pyenv/versions/2.7.10/lib -L/home/voleary/.pyenv/versions/2.7.10/lib -I. -IInclude -I./Include -I/home/voleary/.pyenv/versions/2.7.10/include build/temp.linux-x86_64-2.7/tmp/python-build.20151028143832.5465/Python-2.7.10/Modules/_ssl.o -L/home/voleary/.pyenv/versions/2.7.10/lib -L/usr/local/lib -lssl -lcrypto -o build/lib.linux-x86_64-2.7/_ssl.so\n/usr/bin/ld: skipping incompatible /usr/local/lib/libgcc_s.so when searching for -lgcc_s\n/usr/bin/ld: skipping incompatible /usr/local/lib/libgcc_s.so when searching for -lgcc_s\n*** WARNING: renaming \"_ssl\" since importing it failed: libssl.so.1.0.0: cannot open shared object file: No such file or directory\n. > *** WARNING: renaming \"_ssl\" since importing it failed: build/lib.freebsd-11.0-CURRENT-amd64-2.7/_ssl.so: Undefined symbol \"SSLv2_method\"\nThis could be the cause. It looks like something related to OPENSSL_NO_SSL2 is not working properly at least on your system.\n\n$ pkg info openssl\nopenssl-1.0.2_4\nName           : openssl\nVersion        : 1.0.2_4\nInstalled on   : Sat Oct 17 21:59:20 CDT 2015\nOrigin         : security/openssl\nArchitecture   : freebsd:11:x86:64\nPrefix         : /usr/local\nCategories     : security devel\nLicenses       : \nMaintainer     : dinoex@FreeBSD.org\nWWW            : http://www.openssl.org/\nComment        : SSL and crypto library\nOptions        :\n(... snip ...)\n    SSL2           : on\n\nBecause SSLv2 is insecure nowadays, I'd recommend you to rebuild openssl without SSL2. I think it should solve the build issue of CPython.\nOtherwise, CFLAGS=\"-DOPENSSL_NO_SSL2\" might work. I think it'd be better to disable openssl completely.\n. I think it's helpful. I'm happy if you update the page. Thanks.\n. Basically uninstallation is just removing ~/.pyenv and shell configurations. To make things better, only PR works.\n// I might be going to add some section for uninstallation later since rbenv already has it in its README\n. Basically it is by design. If you'd like to use multiple versions at once, you need to specify versions in some source (e.g. global, local or shell).\nIf your project has .python-version (local) in its repository, you can override the configuration with using 'pyenv shell' (or PYENV_VERSION envairoment variable) sice shell is the most favable in pyenv. Writing some wrapper script to run tox would work for your project.\nhttps://github.com/yyuu/pyenv/blob/master/COMMANDS.md#pyenv-shell\n. It is expected behaviour at least with pyenv v20151006 / pyenv-virtualenv v20151006.\npyenv will do nothing for envs created by conda. pyenv-virtualenv can activate/deactivate envs created by conda. It won't manage any shims, though.\n. I'd like to add more sophisticated support for cobda envs. There some of differeces and it takes time to implement it, though.\nNow I am planning overall refactoring of activate feature of pyenv-virtualenv (remove dependency to virtualenv/pyvenv/conda's weird activate script) I will update this issue once some of my changes became ready.\n. Ah, actually this must be an issue of pyenv-virtualenv, not pyenv itself.\n. I will do this tomorrow in Japan time.\n. Ah, I've just released v20151103 by some accident. Anyway it should be okay.\nI'd like to ask someone to release v20151103 to Homebrew if possible....\n. :+1: \n. > /usr/bin/ld: /home/demba/.pyenv/versions/2.7.8/lib/libpython2.7.a(abstract.o): relocation R_X86_64_32S against `_Py_NotImplementedStruct' can not be used when making a shared object; recompile with -fPIC\n\n/home/demba/.pyenv/versions/2.7.8/lib/libpython2.7.a: error adding symbols: Bad value\ncollect2: error: ld returned 1 exit status\n\nread the error message.\n. It is saying that your binary isn't built with required compiler options. Read some document and rebuild CPython with those options like this; 'env PYTHON_CFLAGS=-fPIC pyenv install -v 2.7.8'\n. @michaelpacer can you give me minimal command line to reproduce the problem you met?\n. Thanks for letting me know. I will add it later....\n. Those all versions should install pip with using ensurepip. \nhttps://github.com/yyuu/pyenv/blob/9ca7de5b6c0f5b467c9a5a22471d6dc334684c52/plugins/python-build/share/python-build/2.7.10#L4\nhttps://github.com/yyuu/pyenv/blob/9ca7de5b6c0f5b467c9a5a22471d6dc334684c52/plugins/python-build/bin/python-build#L1602-L1610\nI couldn't reproduce issue with ensurepip. Please make sure if you really don't have pip executable in your $(pyenv root)/versions/2.7.10/bin. If there is one, running pyenv rehash should solve the issue.\nIf problem persists, there might be some problem in ensurepip itself. It'd be better to report it to upstream CPython.\n. I suspect you have a virtyalenv named 'system'.\n. Hm, thanks for debug log. Probably I found the cause and will fix it.\n. @DanyC97 It is showing that you have system version at /usr/local/opt/pyenv/versions/system as I expected. I suspect it is a virtualenv. Please review your system configuration again.\n204  + [pyenv-versions:53] for path in '\"${PYENV_ROOT}/versions/\"*'\n205  + [pyenv-versions:54] '[' -d /usr/local/opt/pyenv/versions/system ']'\n206  + [pyenv-versions:55] print_version system\n207  + [pyenv-versions:39] exists system system\n208  + [pyenv-versions:27] local car=system\n209  + [pyenv-versions:28] local cdar\n210  + [pyenv-versions:29] shift\n211  + [pyenv-versions:30] for cdar in '\"$@\"'\n212  + [pyenv-versions:31] '[' system == system ']'\n213  + [pyenv-versions:32] return 0\n214  ++ [pyenv-versions:40] pyenv-version-origin\n215  + [pyenv-version-origin:6] '[' -n '' ']'\n216  + [pyenv-version-origin:9] pyenv-version-file\n217  + [pyenv-version-file:21] find_local_version_file /Users/dany\n218  + [pyenv-version-file:7] local root=/Users/dany\n219  + [pyenv-version-file:8] '[' -n /Users/dany ']'\n220  + [pyenv-version-file:9] '[' -e /Users/dany/.python-version ']'\n221  + [pyenv-version-file:12] '[' -e /Users/dany/.pyenv-version ']'\n222  + [pyenv-version-file:16] '[' /Users/dany = /Users ']'\n223  + [pyenv-version-file:17] root=/Users\n224  + [pyenv-version-file:8] '[' -n /Users ']'\n225  + [pyenv-version-file:9] '[' -e /Users/.python-version ']'\n226  + [pyenv-version-file:12] '[' -e /Users/.pyenv-version ']'\n227  + [pyenv-version-file:16] '[' /Users = '' ']'\n228  + [pyenv-version-file:17] root=\n229  + [pyenv-version-file:8] '[' -n '' ']'\n230  + [pyenv-version-file:22] '[' /Users/dany = /Users/dany ']'\n231  + [pyenv-version-file:24] global_version_file=/usr/local/opt/pyenv/version\n232  + [pyenv-version-file:26] '[' -e /usr/local/opt/pyenv/version ']'\n233  + [pyenv-version-file:28] '[' -e /usr/local/opt/pyenv/global ']'\n234  + [pyenv-version-file:30] '[' -e /usr/local/opt/pyenv/default ']'\n235  + [pyenv-version-file:33] echo /usr/local/opt/pyenv/version\n236  + [pyenv-versions:40] echo '* system (set by /usr/local/opt/pyenv/version)'\n237  * system (set by /usr/local/opt/pyenv/version)\n238  + [pyenv-versions:44] num_versions=7\n. Nothing changed at least in recent releases, and no one encountered similar issues. It would indicate that broken part is just your sustem. Try uninstall and reinstall pyenv with using brew.\n. All are expected behavior and no bugs in it. I'll close this anyways.\n. LGTM :+1:  Thanks~\n. This is issue tracker of pyenv core, not pyenv-virtualenv\n. I confirmed same reproduced with rbenv 0.4.0-183-gc18a3f9. It'd be better to fix this in rbenv as well....\n``` sh\n% find . -type f -ls\n535447    4 -rw-r--r--   1 yyuu     yyuu           14 Nov 21 01:59 ./j9/.ruby-version\n535448    0 -rw-r--r--   1 yyuu     yyuu            0 Nov 21 01:59 ./j9/dummy.txt\n535446    4 -rw-r--r--   1 yyuu     yyuu            6 Nov 21 01:59 ./.ruby-version\n535443    4 -rwxr-xr-x   1 yyuu     yyuu           43 Nov 21 02:02 ./test.rb\n% cat test.rb\n!/usr/bin/env ruby\nputs(RUBY_DESCRIPTION)\n% cat .ruby-version\n2.2.3\n% cat j9/.ruby-version\njruby-9.0.0.0\n% ruby test.rb\nruby 2.2.3p173 (2015-08-18 revision 51636) [x86_64-linux]\n% ruby test.rb j9/dummy.txt\njruby 9.0.0.0 (2.2.2) 2015-07-21 e10ec96 OpenJDK 64-Bit Server VM 25.72-b05 on 1.8.0_72-internal-b05 +jit [linux-amd64]\n```\n. brew failures on Linux? weird....\n. Usually I'm running tests on Debian GNU/Linux and it is passing w/o any failures. There would be some environment specific problem on it. I'll try to reproduce this on Arch Linux image later.\nBTW, I finally realized that there are some differences in test results on Linux and OS X.  test/version-file-read.bats never succeeded on my OS X 10.11.1, probably due to different behaviour of sed between BSD and GNU :disappointed: I'll try to fix it later....\n. @blueyed can you provide me some minimum Docker image or Dockerfile to reproduce the issue?\n. @blueyed I confirmed the reproduction of the failure of non-writable shims directory on Arch image....\nI also confirmed that the weird behaviour on Arch. In this example, touch should fail since the current user doesn't have write permission to the directory.\nThis could be the cause of the test failure. I'm still not sure what is making this, though :disappointed: \nsh\n[root@240f1b3c795a ~]# mkdir -p /tmp/foo\n[root@240f1b3c795a ~]# ls -ld /tmp/foo/\ndrwxr-xr-x 2 root root 4096 Dec 20 08:55 /tmp/foo//\n[root@240f1b3c795a ~]# chmod -w /tmp/foo/\n[root@240f1b3c795a ~]# ls -ld /tmp/foo/\ndr-xr-xr-x 2 root root 4096 Dec 20 08:55 /tmp/foo//\n[root@240f1b3c795a ~]# touch /tmp/foo/bar\n[root@240f1b3c795a ~]# ls -l /tmp/foo/bar\n-rw-r--r-- 1 root root 0 Dec 20 08:56 /tmp/foo/bar\n. Ah, ^ isn't weird since the exec user was root. The test should not be ran by root to pass.\n. It seems Arch has OpenSSL at /bin/openssl and it could be the cause of the failure related to brew. I expect the tests of rbenv and ruby-build will also fail due to same reason.\n. Stubbing curl and yaml must not be a solution for \"yaml is linked from Homebrew\" case since it should not download & build yaml.\nAnd, for openssl issue, I realized that there are 2 executables of openssl on Arch Linux.... I suspect the cause of the failure could be unmatched call count of brew. I'm still not sure why it happens, though.\n[root@e7e946be78b9 /]# echo $PATH\n/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n[root@e7e946be78b9 /]# ls -l /bin/openssl /usr/bin/openssl\n-rwxr-xr-x 1 root root 575832 Dec  3 19:23 /bin/openssl\n-rwxr-xr-x 1 root root 575832 Dec  3 19:23 /usr/bin/openssl\n[root@e7e946be78b9 /]# sha256sum /bin/openssl /usr/bin/openssl\n271cf351ae8ff29254c7ce45dec36aa5c006737405cbc5f04231c3011a2ccdb9  /bin/openssl\n271cf351ae8ff29254c7ce45dec36aa5c006737405cbc5f04231c3011a2ccdb9  /usr/bin/openssl\n. This is the caveats of brew's pyenv formula. I'm happy if you gave me back some PR to improve the documentation.\nhttps://github.com/Homebrew/homebrew/blob/34776235339f59a01e996b29de6de76dd64de2eb/Library/Formula/pyenv.rb#L34-L41\n. 1. If a brew user setup pyenv in one's \"shell profile\" as mentioned in the caveats, s?he will need to restart his/her shell session to make it applied.\n2. Good catch. You're correct. The sentence of \"download and unpack the source\" is just unnecessary. That's what pyenv will do automatically....\n. Solved by #485\n. > /bin/sh: /usr/local//openssl/ssl/man/man3/hmac.3: Too many levels of symbolic links\nProbably you'd have looping symlink at /usr/local/openssl/ssl/man/man3/hmac.3. I'd recommend you to specify dedicated directory as the prefix per versions, instead of installing everything in /usr/local. If you'd like to install everything in /usr/local, it might be better to install CPython simply with ./configure && make && make install. This must not be a pyenv issue anyways.\n. > ERROR: The Python ssl extension was not compiled. Missing the OpenSSL lib?\n\nPlease consult to the Wiki page to fix the problem.\nhttps://github.com/yyuu/pyenv/wiki/Common-build-problems\n. Apparently your system doesn't have OpenSSL header. You must ensure you have libssl-dev installed on your system.\n\nhttps://github.com/yyuu/pyenv/wiki/Common-build-problems#requirements\n. :+1: Probably someone broke the package contents?\n. :+1:\n. @blueyed can you review this if you have time?\n. Submitted to rbenv as sstephenson/rbenv#829\n. :+1: \n. You need to export variable to define environ variables.\n. Obviously eval \"$(pyenv init -)\" in your shell profile isn't working due to some reason if you got this error. Please review your shell configuration and try again.\n\npyenv: no such command shell'\n. BothPYENV_VERSIONandpyenv shellshould work even in shell scripts. Latter requires you to addeval \"$(pyenv init -)\"` in your script, though.\n\nPersonally I like to use PYENV_VERSION since it doesn't require additional shell setup....\n``` sh\n!/bin/bash\nSet version to 2.7.10\nexport PYENV_VERSION=2.7.10\nDO STUFF\npython --version # ==> Python 2.7.10\nReset version\nunset PYENV_VERSION\n``\n. @cjerdonek Environment variables set in child process would not affect same name in parent process. Basically you don't have to restore to original value if your script is run as a script, notsource`'d.\n. Got it. If you have some script after that, it'd be better to revert to original state.\n. Review your PATH again and again.\n. :+1: \n. Looks good. Just for reference, which openssl version are you using?\n. I confirmed the build failure of 2.7.3 with Debian's 1.0.2e-1.\n. I copied same patch to other 2.7 series in 3185dee8a28637f70d45acb171788635876b5cbc. Probably we'd need similar workaround for 2.6 and 3k....\n. @alex Can you create PR for this? Basically just copying & modifying the definition of 3.5.0 would work for it....\nhttps://github.com/yyuu/pyenv/blob/20432dda88b64956969390e16bb30cbc58488fef/plugins/python-build/share/python-build/3.5.0\n. Fixed by #498\n. Thanks :octocat: \n. Obviously bash is a requirement. POSIX sh isn't sufficient to run pyenv itself.\n. pyenv's shell function (output of pyenv-init) should be able to work with every bash, zsh, ksh, fish and other POSIX sh. pyenv's libexec only works with bash, though.\n. bashism is also not welcomed in Debian/Ubuntu. It'd be nice if we can remove bash dependency from rbenv/pyenv completely. Though it'd be tough since it's depending on many of bash extensions like bash arrays....\n. I couldn't get what you meant. Basically .zshrc is for all shell interactive sessions and it should be loaded automatically into every shell.\n. Probably you have 'eval \"$(pyenv init)\"' somewhere in your shell configuration. Please fix it as 'eval \"$(pyenv init -)\"'. Trailing '-' is the key.\n. Installation source isn't a matter. It will only appear if you have missing somewhere in your shell configuration by definition. I don't know configuration of your system, though.\nhttps://github.com/yyuu/pyenv/blob/master/libexec/pyenv-init#L45\n. 1. There is another copy of the function in python-build. It'd be better to update both.\n   - https://github.com/yyuu/pyenv/blob/v20151210/plugins/python-build/bin/python-build#L60-L72\n2. Please send similar fix to https://github.com/rbenv/rbenv and https://github.com/rbenv/ruby-build\n. @mengbo Could you rebase to latest master to fix conflict?\nAnd, it's really helpful for both rbenv and pyenv if the abs_dirname can handle filename without / (==> a file in current directory). Do you have any idea to implement it?\n. Please merge this into #502. I don't like to have many PRs as commit.\n. :+1: \n. IIRC readline isn't a requirement in pyenv. And, I suspect you forgot to capture stderr in the gist.\n. Is the build of 2.5.6 actually failed? I couldn't find any lines of failure message from your gist. I also confirmed that the build of 2.5.6 succeeded on latest Debian sid.\nAs you mentioned, it seems there's error in readline. But the build failure of readline should not make the entire build failed in python-build.\nhttps://github.com/yyuu/pyenv/blob/d6e0120cc86f4e3bc8f2901d994ca75c85bfd06b/plugins/python-build/bin/python-build#L1516\nI know there's a build issue of readline module of older CPython with GNU Readline 6.3+. Though I don't want to maintain patches for them since readline isn't a requirement for python-build.\n. I confirmed that the build success of 2.5.6 on Ubuntu 14.04 with the following Dockerfile.\nFROM ubuntu:14.04\nENV DEBIAN_FRONTEND \"noninteractive\"\nRUN apt-get update\nRUN apt-get --yes install build-essential curl git libbz2-dev libncurses5-dev libreadline-dev libsqlite3-dev libssl-dev make zlib1g-dev\nENV PYENV_ROOT /pyenv\nENV PATH /pyenv/shims:/pyenv/bin:/sbin:/usr/sbin:/bin:/usr/bin\nRUN git clone https://github.com/yyuu/pyenv.git /pyenv\nRUN pyenv install -v 2.5.6\nI suspect there might be some build issue with LLVM in 2.5.6.,I'm not sure, though.\n. Review your PATH again and again and again and again.\n. As mentioned in README, with using system version it will search executables from PATH as standard manner as UNIX shell.\n. Use PYENV_VERSION=system python3 --version\n. :+1: \n. pyenv doesn't manage contrnts inside /Application. It seems there might be something wrong in CPython build script or your environment. Though python-build cannot help the situation since basically it's just a launcher of './configure && make && make install'\n. PR welcome\n. CPython 3.4.4 has already been released and 3.4.4rc1 is obsolete now. I'll just remove it instead of fixing. Thanks for reporting anyway\nhttps://www.python.org/download/releases/3.4.4/\n. There was known issue with PYENV_ROOT=/usr/local/opt/pyenv and the caveat has changed in https://github.com/Homebrew/homebrew/commit/5532aa02ce22b4b3ea53a770b181442c3c9b6310\n. You're right. PYENV_ROOT will be created automatically if it doesn't exist. IIRC, creating the 'versions' directory in the 'Cellar' directory could cause problem after formula update.\n. It's just a build failure of specific packagw. Not a pyenv issue.\n. Google it\nhttp://stackoverflow.com/questions/15403273/possible-conflicting-python-installations\n. It just succeeded....\n. display label of version string doesn't explain nothing. We don't have enough resource for such release engineering.\n. There are only few people actively working, and we don't have enough slots to fullfill requests except pull requests. Luckily it' 2016 and we're on GitHub, anyone can prepare their own patch. We need  actual work efforts as PRs to make things better.\n. Isn't there any guy encountered similar to this? Basically this could be a kind of build issue of CPython itself and could not be a problem in pyenv, though.\n. It'd be better to continue on BTS of CPython.\n. the PATH you modified is one used only from pyenv internally, and will not expose to user's shell. Anyway please open PR to https://github.com/rbenv/rbenv if you want to change common part of rbenv/pyenv.\n. Build problem with specific package isn't an issue of pyenv.\n. Automated rehashing will work only after pip install, pip uninstall, easy-install, conda install, conda remove and conda uninstall. I don't like to hook up setup.py develop since it requires to hook every invocation of python.\nhttps://github.com/yyuu/pyenv/tree/5c5205e172f532a7e7511f86666b1d842198e73a/pyenv.d/exec/pip-rehash\n. How do you think how it should be?\n. > /var/folders/t3/yhd5b6lj2cz_b82qzw4zcwh40000gn/T/python-build.20160114111634.64051/openssl-1.0.1q /var/folders/t3/yhd5b6lj2cz_b82qzw4zcwh40000gn/T/python-build.20160114111634.64051 ~/repos/illuminations\n\nOperating system: i686-apple-darwinDarwin Kernel Version 13.4.0: Sun Aug 17 19:50:11 PDT 2014; root:xnu-2422.115.4~1/RELEASE_X86_64\n\nIt seems it's failing at the build of openssl. Please try using PYTHON_CONFIGURE_OPTS, PYTHON_CFLAGS and PYTHON_LDFLAGS to specify compilation options only for CPython.\nhttps://github.com/yyuu/pyenv/blob/425e44d064f934b78c8858b6d3ad597f46a06fa8/plugins/python-build/share/python-build/2.6.6#L2\n. Already answered.\n. Only PR solves.\n. help yourself\n. Generally speaking, if the problem happens only with PyCharm, it'd be a problem of PyCharm.\n. xcode-select should solve.\nPlease update the Wiki page if you realized something more needed.\nhttps://github.com/yyuu/pyenv/wiki/Common-build-problems#build-failed-error-the-python-zlib-extension-was-not-compiled-missing-the-zlib\n. Hmm. I will work for this in this weekend to modify the definitions of 3.2.x to use specific version of pip....\n. @ThomasWaldmann I pushed 1dc9ef24dfd0d04d3a566ac5b19015bee5ea5f0b and I confirmed that the installation of pip succeeded with CPython 3.2.x and Stackless 3.2.x. Could you check if it's working for you?\n. Okay, I'll release a new version of pyenv / pyenv-virtualenv soon.\n. I released v20160202 and sent PRs to Homebrew.\n. It's on Wiki https://github.com/yyuu/pyenv/wiki/Common-build-problems\n. I'd not recommend to rename directory of built Python installation because path may be hardcoded in built binary or some library files. It'd be better specify custom prefix. pyenv-alias may be what you are looking for.\nhttps://github.com/s1341/pyenv-alias\n. @luzfcb How about adding --retry for curl? I couldn't find equivalent for wget, though.\nAs a temporal workaround, you can place downloaded archives inside $(pyenv root)/cache to prevent pyenv install to download archives every time. python-build (the backend of pyenv install) will use cached archive if it is available\nhttps://github.com/yyuu/pyenv/blob/425e44d064f934b78c8858b6d3ad597f46a06fa8/plugins/python-build/bin/python-build#L416\n. Hmm. It seems aria2 has a feature to resume after failed download. It'd be beneficial to add support in https://github.com/rbenv/ruby-build\n. Umm. It seems that aria2c doesn't have feature to do HEAD request only.... It is a requirement for http client used from ruby-build/python-build. I confirmed that the behaviour with aria2c 1.19.0.\n. python-build uses HEAD request to check if the archive is available on mirror. And, as far as I could confirm, --use-head=true seems to request GET just after HEAD.\nhttps://github.com/yyuu/pyenv/blob/c8ab429d7b0990d901494f9bcd95f6baa5cc51af/plugins/python-build/bin/python-build#L397-L403\n. It seems aria2c's --dry-run isn't a dry run and it will request HEAD to given URL.\n. @luzfcb I prepared a patch for python-build firstly. I'd prepare a patch for ruby-build if it works. Please give it a try.\n. Thanks for bounty :)\nRight. It will show nothing at least for now. \nI just disabled verbose logging for similarity between curl and wget, but it might be better to add some logs.\n. I removed -q from aria2c arguments. It should show the progress of download on verbose mode (pyenv install -v 3.5.1).\n. Added support for environment variable of PYTHON_BUILD_ARIA2_OPTS. Basically I don't want to add environment specific options as the default option in python-build. Please try specifying aria2c options via the environment variable.\n. Basically python-build is just redirecting stdout/stderr. I suspect that the cause of the 1 minute delay is in aria2c itself. Increasing console logging level (--console-log-level=debug?) might help investigation.\n. The optimal default options for aria2c could be diverse per users' environment. For now, I'd like to just keep using default of aria2c. It means, the users need to be set their own PYTHON_BUILD_ARIA2_OPTS in their environment if needed.\nFor brew's formula, I may add aria2 as an optional dependency later. Anyone can also submit PR to them, though \ud83d\ude1b \n. I've merged #539 as the solution for this. Please give it a try.\n. @foxx How did you create ~/.local? Did you use https://github.com/mitsuhiko/pipsi or something?\n. At least for now, pyenv doesn't support pip install --user. Basically it must not be a problem since users of pyenv should have permissions to install libraries into pyenv built pythons. Patches are welcome if there's some workaround to deal with it.\n. :+1:\n. PYPY_OPTS will be passed to RPython. It'd be better to be mentioned in python-build's README.\nhttps://github.com/yyuu/pyenv/blob/c8ab429d7b0990d901494f9bcd95f6baa5cc51af/plugins/python-build/bin/python-build#L939\n. PYPY_OPTS should just work for this.\n. pypy-c-jit-latest is a nightly build binaries provided by PyPy. You'd need as same libraries as their build environment to use it.\n. rbenv/ruby-build#904 has been merged!\n. It's failing at applying patches. I confirmed that I can apply patches to Python-2.6.6.tgz, though.\nhttps://github.com/yyuu/pyenv/tree/c8ab429d7b0990d901494f9bcd95f6baa5cc51af/plugins/python-build/share/python-build/patches/2.6.6/Python-2.6.6\n. pyenv install 2.7 should install 2.7, not the latest release of 2.7. I don't like implicit manner when specifying versions.\nAnd, upgrading between patch releases (e.g. 2.7.8 to 2.7.9) isn't supported.\n. I'll merge this anyways. I may be going to revert this if any problem reported.\n. Good catch :+1: Thanks~\n. Your system's expat installation is broken, or there's broken build in /usr/local/lib or so. Don't know why, though. It's a problem of yours anyways.\n*** WARNING: renaming \"pyexpat\" since importing it failed: dlopen(build/lib.macosx-10.11-x86_64-2.7/pyexpat.so, 2): Symbol not found: _XML_ErrorString\n  Referenced from: build/lib.macosx-10.11-x86_64-2.7/pyexpat.so\n  Expected in: flat namespace\n in build/lib.macosx-10.11-x86_64-2.7/pyexpat.so\nbuilding '_elementtree' extension\nclang -fno-strict-aliasing -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk/usr/include -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -DHAVE_EXPAT_CONFIG_H=1 -DUSE_PYEXPAT_CAPI -I/private/var/folders/mt/vnl_kg3s72dgych6j2j4djxmlbfpd_/T/python-build.20160215184029.70850/Python-2.7.10/./Modules/expat -I/private/var/folders/mt/vnl_kg3s72dgych6j2j4djxmlbfpd_/T/python-build.20160215184029.70850/Python-2.7.10/Mac/Include -I/private/var/folders/mt/vnl_kg3s72dgych6j2j4djxmlbfpd_/T/python-build.20160215184029.70850/Python-2.7.10/Mac/Include -I. -IInclude -I./Include -I/usr/local/opt/readline/include -I/usr/local/opt/openssl/include -I/usr/local/include -I/private/var/folders/mt/vnl_kg3s72dgych6j2j4djxmlbfpd_/T/python-build.20160215184029.70850/Python-2.7.10/Include -I/private/var/folders/mt/vnl_kg3s72dgych6j2j4djxmlbfpd_/T/python-build.20160215184029.70850/Python-2.7.10 -c /private/var/folders/mt/vnl_kg3s72dgych6j2j4djxmlbfpd_/T/python-build.20160215184029.70850/Python-2.7.10/Modules/_elementtree.c -o build/temp.macosx-10.11-x86_64-2.7/private/var/folders/mt/vnl_kg3s72dgych6j2j4djxmlbfpd_/T/python-build.20160215184029.70850/Python-2.7.10/Modules/_elementtree.o\nclang -bundle -undefined dynamic_lookup -L/usr/local/opt/readline/lib -L/usr/local/opt/readline/lib -L/usr/local/opt/openssl/lib -L/Users/kenta.ky.yamamoto/.pyenv/versions/2.7.10/lib -L/usr/local/opt/readline/lib -L/usr/local/opt/readline/lib -L/usr/local/opt/openssl/lib -L/Users/kenta.ky.yamamoto/.pyenv/versions/2.7.10/lib -fno-strict-aliasing -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk/usr/include -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -I. -IInclude -I./Include -I/usr/local/opt/readline/include -I/usr/local/opt/readline/include -I/usr/local/opt/openssl/include -I/Users/kenta.ky.yamamoto/.pyenv/versions/2.7.10/include build/temp.macosx-10.11-x86_64-2.7/private/var/folders/mt/vnl_kg3s72dgych6j2j4djxmlbfpd_/T/python-build.20160215184029.70850/Python-2.7.10/Modules/_elementtree.o -L/usr/local/opt/readline/lib -L/usr/local/opt/openssl/lib -L/Users/kenta.ky.yamamoto/.pyenv/versions/2.7.10/lib -L/usr/local/lib -o build/lib.macosx-10.11-x86_64-2.7/_elementtree.so\n. It's just failing because zlib is not available. If you're on Mac, xcode-select might help. Please refer \"common build problems@ on the wiki.\n. Gimme PRs\n. For RPython's Python issue, there is a workaround in pyenv-install which will find some Python 2.7 from pyenv. Obviously it will not work with bare python-build, though.\nhttps://github.com/yyuu/pyenv/blob/a6f1f480eb6e607d2e5a012873bc7737737dd97f/plugins/python-build/bin/pyenv-install#L203-L224\n. Good catch :+1: \n. pyenv will just work fine without having pyenv-init. Try prepending ~/.pyenv/bin to your PATH and manage PATHs to pythons in ~/.pyenv/versions by youself.\n. @robsonpeixoto \"pyenv prefix ${version}\" could be the thing you're looking for.\n. I couldn't find any problem with this at least for now. Please let me know if there's some trouble with this.\n. Ah, you're right. I'll prepare some patch tomorrow.\n. @minhoryang What does cache mean in your question? Basically I don't recommend you to share built Python installations since there're hardcoded paths in scripts and executables. Just copying the built Python to different path will make it corrupted.\n. Obviously it's failing at installation of pip from https://bootstrap.pypa.io/get-pip.py. I confirmed that it's working for me now. Probably it's due to temporary issue on the pip's website.\n. Basically we don't have to run rehash explicitly for most cases anymore. Obviously we need to update README.\n. By default CPython will be built as '--disable-shared'. \"PYTHON_CONFIGURE_OPTS='--enable-shared' pyenv install -v 2.7.11\" could be what you are looking for. It's not so called dev version, though.\n. ugh. thanks anyways. (cc: @joshfriend )\n. #556 \n. Obviously this must be a kind of C / C++ build environment (compiler or headers?) issue. I'm pretty not sure why size_of(off_t) failed though....\n. I couldn't reproduce this. It might be worth file an issue to CPython if the problem persists.\n. Basically Anaconda/Miniconda installers are released with readline.so included. I believe it should work even on Arch Linux. Please check if you have shared objects of readline in your Anaconda installation.\n% ldd ~/.pyenv/versions/miniconda3-3.19.0/lib/python3.5/lib-dynload/readline.cpython-35m-x86_64-linux-gnu.so\n        linux-vdso.so.1 (0x00007ffc74df3000)\n        libreadline.so.6 => /home/yyuu/.pyenv/versions/miniconda3-3.19.0/lib/python3.5/lib-dynload/../../libreadline.so.6 (0x00007f39c8094000)\n        libncursesw.so.5 => /lib/x86_64-linux-gnu/libncursesw.so.5 (0x00007f39c7e52000)\n        libpython3.5m.so.1.0 => /home/yyuu/.pyenv/versions/miniconda3-3.19.0/lib/python3.5/lib-dynload/../../libpython3.5m.so.1.0 (0x00007f39c7962000)\n        libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f39c7745000)\n        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f39c73a1000)\n        libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f39c719c000)\n        libtinfo.so.5 => /lib/x86_64-linux-gnu/libtinfo.so.5 (0x00007f39c6f72000)\n        libutil.so.1 => /lib/x86_64-linux-gnu/libutil.so.1 (0x00007f39c6d6e000)\n        librt.so.1 => /lib/x86_64-linux-gnu/librt.so.1 (0x00007f39c6b66000)\n        libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007f39c6868000)\n        /lib64/ld-linux-x86-64.so.2 (0x000055b4a908e000)\n% ldd ~/.pyenv/versions/miniconda3-3.19.0/lib/python3.5/lib-dynload/../../libreadline.so.6\n        linux-vdso.so.1 (0x00007ffc6b763000)\n        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007fb0f13a9000)\n        /lib64/ld-linux-x86-64.so.2 (0x000055b98f27c000)\n. Found similar issues with googling.\nhttp://stackoverflow.com/questions/26535043/python-flask-error-importerror-cannot-import-name-compare-digest\nhttp://stackoverflow.com/questions/24853027/django-importerror-cannot-import-name-compare-digest\nI guess this could be a kind of virtualenv issue. I'd recommend you to install virtualenv into 2.7.11 just after pyenv install 2.7.11 to make sure virtualenv installed inside pyenv is invoked.\n. library issue with virtualenv isn't a pyenv issue.\n. Make sure you have pyenv's shims before other system paths (e.g. /usr/bin, /usr/local/bin) in your $PATH. Basically it's your system you should manage yourself.\n. mkdir -p $(pyenv root)/cache\n. You don't have to explicitly declare PYTHON_BUILD_CACHE_PATH since it's defined as the default value.\nhttps://github.com/yyuu/pyenv/blob/v20160310/plugins/python-build/bin/pyenv-install#L183\nAccording to impl, python-build (the backend of pyenv install) will ignore cached tarball if it doesn't have proper checksum.\nhttps://github.com/yyuu/pyenv/blob/v20160310/plugins/python-build/bin/python-build#L431-L447\nPlease make sure if the cached archive has proper SHA256 checksum declared in the build definition of 3.4.3.\nhttps://github.com/yyuu/pyenv/blob/v20160310/plugins/python-build/share/python-build/3.4.3#L4\n. This could be what you were looking for. In brew's formula, actually it tries to install pyenv-install, pyenv-uninstall and python-build into brew's path for executables (==> /usr/local/bin by default). pyenv-install can execute python-build regardless of its installed location if it can be found in PATH.\nhttps://github.com/Homebrew/homebrew/blob/9e5614117b35f049a139fb5141c7f4214ba9ee6b/Library/Formula/pyenv.rb#L18-L20\nhttps://github.com/yyuu/pyenv/blob/v20160310/plugins/python-build/bin/pyenv-install#L244\n. If you installed pyenv via brew, you'd be able to locate the python-build by $(brew --prefix pyenv)/plugins/python-build. Actually there's no general way to locate python-build's installed location, as far as I could remember.\n. The message doesn't mean you're required to prepare .python-version. It just means it is written; the named executable is not found in currently activated versions. Your fix is just misleading.\n. Did you specify some configure option (e.g. PYTHON_CONFIGURE_OPTS) when building CPython with pyenv?\n. If you installed pyenv via Homebrew, it'll be located in Homebrew's prefix of /usr/local.\n. Generally speaking it's hard to say if \"0.6s\" is slow or not because it's (mostly) depending on system's I/O performance.\nIf eval \"$(pyenv init -)\" is slow for your system, please try using eval \"$(pyenv init - --no-rehash)\". With it, the initialization code will omit pyenv rehash which creates many of files and it should help improving the performance.\nhttps://github.com/yyuu/pyenv/blob/v20160310/libexec/pyenv-init#L28-L31\n. :+1:\n. It works at least for me.\n```\n% pyenv install -v pypy3-2.4.0\n/var/folders/rc/_9kglbjs651431bbh2736s300000gn/T/python-build.20160415095109.1922 ~\nDownloading pypy3-2.4.0-osx64.tar.bz2...\n-> https://bitbucket.org/pypy/pypy/downloads/pypy3-2.4.0-osx64.tar.bz2\n/var/folders/rc/_9kglbjs651431bbh2736s300000gn/T/python-build.20160415095109.1922/pypy3-2.4.0-osx64 /var/folders/rc/_9kglbjs651431bbh2736s300000gn/T/python-build.20160415095109.1922 ~\nInstalling pypy3-2.4.0-osx64...\nInstalling pip from https://bootstrap.pypa.io/get-pip.py...\nCollecting pip\n  Downloading pip-8.1.1-py2.py3-none-any.whl (1.2MB)\nCollecting setuptools\n  Downloading setuptools-20.7.0-py2.py3-none-any.whl (508kB)\nCollecting wheel\n  Downloading wheel-0.29.0-py2.py3-none-any.whl (66kB)\nInstalling collected packages: pip, setuptools, wheel\nSuccessfully installed pip-8.1.1 setuptools-20.7.0 wheel-0.29.0\n/var/folders/rc/_9kglbjs651431bbh2736s300000gn/T/tmpdlxfq7/pip.zip/pip/_vendor/pkg_resources/init.py:87: UserWarning: Support for Python 3.0-3.2 has been dropped. Future versions will fail here.\n/var/folders/rc/_9kglbjs651431bbh2736s300000gn/T/python-build.20160415095109.1922 ~\n~\nInstalled pypy3-2.4.0-osx64 to /Users/yyuu/.pyenv/versions/pypy3-2.4.0\n% pyenv shell pypy3-2.4.0\n% python --version\nPython 3.2.5 (b2091e973da6, Oct 19 2014, 18:30:58)\n[PyPy 2.4.0 with GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.51)]\n```\n@ssbb please check if installation of other PyPy versions work or not.\n. The cause of installation failure of PyPy (except pypy*-src) and CPython must be totally different since former is binary distribution. Please don't mix up different things.\nBecause I could not reproduce the issue, I'll just close this. Please let me know if there's still PyPy installation failures occurring for you.\n. I guess you don't have /usr/local/bin in your $PATH at the time of .zshenv is loading. I suggest you to try setting /usr/local/bin in your .zshenv to make sure pyenv symlink prepared by brew available at /usr/local/bin/pyenv.\n. :+1: Thanks~\n. Please show me the output of 'PYENV_DEBUG=1 ansible-playbook'. I guess you have stale shim script.\n. @YAmikep Sorry for delay....\nAt the beginning of the debug print, I found PYENV_FILE_ARG=/usr/bin/ansible-playbook in the script. It must mean you have ansible-playbook executables in both /usr/bin and your /home/vagrant/pyenv and the former has precedence in your ${PATH} configuration.\nBasically I'd recommend you to have pyenv's shims path at almost top of your ${PATH}. Giving precedence to system paths (e.g. /usr/bin, /bin) might cause problem like yours. Please review your ${PATH} and try again.\n+ program=python\n+ [[ python = \\p\\y\\t\\h\\o\\n* ]]\n+ for arg in '\"$@\"'\n+ case \"$arg\" in\n+ '[' -f /usr/bin/ansible-playbook ']'\n+ export PYENV_FILE_ARG=/usr/bin/ansible-playbook\n+ PYENV_FILE_ARG=/usr/bin/ansible-playbook\n+ break\n+ export PYENV_ROOT=/home/vagrant/pyenv\n+ PYENV_ROOT=/home/vagrant/pyenv\n+ exec /home/vagrant/pyenv/libexec/pyenv exec python /usr/bin/ansible-playbook\n+ [pyenv:23] enable -f /home/vagrant/pyenv/libexec/../libexec/pyenv-realpath.dylib realpath\n+ [pyenv:29] '[' -z '' ']'\n++ [pyenv:31] type -p greadlink readlink\n++ [pyenv:31] head -1\n+ [pyenv:31] READLINK=/bin/readlink\n+ [pyenv:32] '[' -n /bin/readlink ']'\n+ [pyenv:53] '[' -z /home/vagrant/pyenv ']'\n+ [pyenv:56] PYENV_ROOT=/home/vagrant/pyenv\n+ [pyenv:58] export PYENV_ROOT\n+ [pyenv:61] '[' -z '' ']'\n+ [pyenv:62] '[' -n /usr/bin/ansible-playbook ']'\n+ [pyenv:63] '[' -L /usr/bin/ansible-playbook ']'\n++ [pyenv:64] abs_dirname /usr/bin/ansible-playbook\n++ [pyenv:39] local cwd=/home/vagrant\n++ [pyenv:40] local path=/usr/bin/ansible-playbook\n++ [pyenv:42] '[' -n /usr/bin/ansible-playbook ']'\n++ [pyenv:43] cd /usr/bin\n++ [pyenv:44] local name=ansible-playbook\n+++ [pyenv:45] resolve_link ansible-playbook\n+++ [pyenv:35] /bin/readlink ansible-playbook\n++ [pyenv:45] path=ansible\n++ [pyenv:42] '[' -n ansible ']'\n++ [pyenv:43] cd ansible\n/home/vagrant/pyenv/libexec/pyenv: line 43: cd: ansible: Not a directory\n. I hate implicit versinoning.\n. I just guess you're overriding $PATH somewhere in your zsh configuration. I definitely don't know your configuration, though.\n. Try 'pyenv install -p'. It will read patch from standard input IIRC\n. Or, you can install the patch as file, like https://github.com/yyuu/pyenv/blob/master/plugins/python-build/share/python-build/patches/3.4.2/Python-3.4.2/010_ssl_no_ssl3.patch\n. I guess you need to build boost:: python against pyenv built python. Probablly boost::python's build script must be providing some configure option to specify path to python installation.\n// I need some answer from active boost users...\n. Fixed~\n. #586 \n. I guess this the message was printed due to wrongly configured $PATH, as same reason as #580. Please ensure $(pyenv root)/shims is located before some system path (e.g. /usr/bin) in your $PATH.\n. I'm not so familiar with VIM's build system. But, I guess this is related to incompatible unicode configuration option between pyenv's and system's.\nAfter #257, pyenv is using ucs4 as the default unicode encoding option.\nhttps://github.com/yyuu/pyenv/blob/a8664a23390c306b6f5d255a9660ee7072d68d39/plugins/python-build/bin/python-build#L1871\nOS X 10.11.4's CPython 2 (=> ucs2)\n```\n% /usr/bin/python\nPython 2.7.10 (default, Oct 23 2015, 19:19:21) \n[GCC 4.2.1 Compatible Apple LLVM 7.0.0 (clang-700.0.59.5)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n\n\nimport sys\nsys.maxunicode                                                                                                                                                       \n65535\n```\n\n\n\nHomebrew's CPython 2 (=> ucs2)\n```\n% /usr/local/bin/python\nPython 2.7.11 (default, Dec  5 2015, 14:44:53) \n[GCC 4.2.1 Compatible Apple LLVM 7.0.0 (clang-700.1.76)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n\n\nimport sys\nsys.maxunicode\n65535\n```\n\n\n\npyenv's CPython 2 (=> ucs4)\n```\n% ~/.pyenv/versions/2.7.11/bin/python\nPython 2.7.11 (default, May  6 2016, 09:53:04) \n[GCC 4.2.1 Compatible Apple LLVM 7.3.0 (clang-703.0.29)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n\n\nimport sys\nsys.maxunicode\n1114111\n```\n\n\n\nI'd recommend you to let brew's to use system's CPython 2 when you're building vim from brew.\n. pyenv rehash is a process to generate shim scripts from all executables matched to $(pyenv root)/versions/*/bin/*. It will be called from pyenv init - to update shims during the initialization if the pyenv init - is called with --no-rehash.\nhttps://github.com/yyuu/pyenv/blob/2017dd0c25467caffd6b9d6749f80dc502128842/libexec/pyenv-rehash#L87-L89\nhttps://github.com/yyuu/pyenv/blob/2017dd0c25467caffd6b9d6749f80dc502128842/libexec/pyenv-init#L107\nAfter clean installation of pyenv, obviously there should be nothing in ~/.pyenv/versions and it lets pyenv rehash to skip working. pyenv rehash will not care about executables installed in system python. You need to install at least 1 python version in pyenv to generate shims.\n. I confirmed that at least CPython 3.5.2 on OS X 10.11.6 creates ./bin directory as normal directory instead of symlink to framework installation path. I pushed bc8dba4beabfa680b5ecc82b4bec3fa51f489c08 as a workaround for it. I'm still not sure what breaks the framework installation, though. Anyway please give it a try.\n. I've merged the changes in #593. Thanks anyways!\n. I'll merge this in favor of #592 since I couldn't find any significant difference between them. Creating topic branch per PR could be better.\n. pyenv will create shim for openssl if you're installing Anaconda installed. Though it'll be just ignored by pyenv's hook. See output of pyenv which openssl.\nhttps://github.com/yyuu/pyenv/blob/2017dd0c25467caffd6b9d6749f80dc502128842/pyenv.d/which/anaconda.bash\nsh\n% which openssl\n/home/yyuu/.pyenv/shims/openssl\n% pyenv which openssl\n/usr/bin/openssl\n. This is not your question forum, an issue tracker.\n. Basically pyenv should choose system's curl even if there's anaconda's curl. I'm not sure what's going on the machine. Though I believe #595 should solve the issue eventually.\n. #595 should solve this.\n. Umm. I'm also using Raspbian and will try reproducing this later. The pypy3-2.4.0 is a binary distribution and the binary may bot be compatible with latest Raspbian.\nTo install some PyPy binary distribution, you don't have to install any CPython version beforehand. Building pypy3 from source distribution by \"pyenv install pypy3-2.4.0-src\" might help. It'll take forever to complete though.\n. Basically I don't like to add such implicit feature in pyenv itself. I believe this can be implemented as a plugin with providing install hook.\nI confirmed that installing this hook script at ~/.pyenv/pyenv.d/install/latest.bash worked on GNU/Linux at least.\nsh\nDEFINITION_PREFIX=\"${DEFINITION%%@*}\"                                                          \nDEFINITION_TYPE=\"${DEFINITION_PREFIX%%-*}\" # TODO: support non-CPython versions                \nif [[ \"${DEFINITION}\" != \"${DEFINITION_PREFIX}\" ]]; then                                       \n  DEFINITION_CANDIDATES=($(python-build --definitions | grep -F \"${DEFINITION_PREFIX}\" | grep \"^${DEFINITION_TYPE}\" | sed -e '/-dev$/d' -e '/-src$/d' | sort -t. -k1,1r -k 2,2nr -k 3,3nr || true))\n  DEFINITION=\"${DEFINITION_CANDIDATES}\"                                                        \n  VERSION_NAME=\"${DEFINITION##*/}\"\nfi\nWith it, you can install the latest version like this.\n$ pyenv install -v 3.5@latest\n. Actually I'm not sure how much portable sort(1)'s version sorting is. I guess it doesn't work well with BSD toolchain.\nhttp://stackoverflow.com/questions/4493205/unix-sort-of-version-numbers\n. @nicktimko I couldn't get what you meant. Could you show me some examples?\n. As of writing this, there're some versions which have -latest as their version suffix.\nhttps://github.com/yyuu/pyenv/blob/master/plugins/python-build/share/python-build/miniconda-latest\nhttps://github.com/yyuu/pyenv/blob/master/plugins/python-build/share/python-build/miniconda2-latest\nhttps://github.com/yyuu/pyenv/blob/master/plugins/python-build/share/python-build/miniconda3-latest\nhttps://github.com/yyuu/pyenv/blob/master/plugins/python-build/share/python-build/pypy-c-jit-latest\nhttps://github.com/yyuu/pyenv/blob/master/plugins/python-build/share/python-build/pypy-c-nojit-latest\nHow do you think how the feature should behave for those versions? For example, should pyenv install miniconda3-latest install miniconda3-latest, or miniconda3-4.0.5?\nIntroducing special keyword like miniconda3@latest isn't so nice. But it'll work well with this kind of situation (as long as there's no version with @ in its version string). This could be kind of corner case, though.\n. I'm not good at wording.... But I feel that the version specification like 3.5-latest (or, 3.5@latest) isn't explicit. Or, in other words, it's not deterministic.\nBasically I don't like to add this feature as long as I can implement it as a plugin. I may create a new plugin based on the hook script I posted before, but will not bundle it to pyenv.\n. Anyone can implement the feature as pyenv plugin. Please don't try solving everything in one place.. :+1:\n. CPython build issue is CPython's build issue. Not pyenv's.\n. Could you send same fix to https://github.com/rbenv/rbenv ?\n. Basically it should work if shims and versions are writable. Just give it a try.\nThis project is voluntary managed OSS and we're not offering any official support things. Post bounty if you need someone's help, otherwise DIY is the answer for questions.\n. This must be the lines showing the message. My guts feeling's telling that this is a kind of silly bug....\nhttps://github.com/yyuu/pyenv/blob/9993d13996c84c4b6db6a5f160ec2dd1e1debc57/libexec/pyenv-which#L63-L64\n. brew's formula is a part of brew. Send PR to fix it by yourself\n. It just means you're configuring pyenv into shell's configuration file for interactive shell (e.g. .zshrc for zsh). Move it to configuration to somewhere for all shells (e.g. .zshenv), or prepending source ~/.bashrc before the command line of cron script, or prepending initialization code of pyenv in your cron script, every method should work.\nThis kind of things isn't pyenv issue anyways. Read your shell's manuals.\n. Good catch. Could you send same fix to https://github.com/rbenv/rbenv ?\n. In this case, since it's obvious, I'll merge this now regardless of rbenv's PR status. I may be going to revert in case of trouble, though.\n. Finished applying similar fix to pyenv-virtualenv. I believe there's no remaining thing in pyenv and plugins. Please let me know (or send PR) if you realize something remaining.\n. @jayvdb just a silly question, but what do you want to test by this? How do you think what is insufficient with stub based testing?\n. This could help preventing the issues like #638.\n. Umm. It seems aria2c -o- isn't working as I expected \ud83d\ude1e \nhttps://github.com/yyuu/pyenv/blob/10957b786a173f995a77fc21ab7707fb6b20ae79/plugins/python-build/bin/python-build#L343\n. It seems that aria2c doesn't support writing content to standard output.\nhttps://github.com/aria2/aria2/issues/190\n. @dochang could you try #620 if the issue solves?\n. I intentionally implemented to download get-pip.py into the source directory. What's the problem?\n. @floswald Please create a gist from output of PYENV_DEBUG=1 python --version.\n. Check if shims exist in ~/.pyenv/shims. If there's nothing in it, run 'pyenv rehash'\n. I couldn't reproduce the behaviour. This must be PATH configuration issue.\n. I couldn't reproduce the problem. It's working for me as it should be. If the problem persists for you, please post some Dockerfile to reproduce the issue then I'll try digging.\n. It's working on GNU/Linux at least. Need more investigation why it doesn't work on OS X. I guess there's something wrong with BSD toolchain.\n. Isn't there any s390x user...? \ud83d\ude1c   Please help us~\n. Waiting PR~\n. This is a kind of bug of both pyenv and rbenv. It's expecting system version is located inside bin directory of non-toplevel.\nhttps://github.com/yyuu/pyenv/blob/8781d132e71b9fc53f2bea34ed3805b14f6a01cc/libexec/pyenv-prefix#L34\n. Obviously no pyenv error. Try building CPython and check config.log\n. aed0eaecebcd16975561df5fa2d64241b79a92c2\n. pyenv rehash will be run implicitly after either pyenv-init, pip (install|uninstall), easy_install or conda (install|remove|uninstall). There must be something invoke it in your configuration.\nhttps://github.com/yyuu/pyenv/blob/v20160509/libexec/pyenv-init#L107\nhttps://github.com/yyuu/pyenv/blob/v20160509/pyenv.d/exec/pip-rehash/pip#L25\nhttps://github.com/yyuu/pyenv/blob/v20160509/pyenv.d/exec/pip-rehash/easy_install#L24\nhttps://github.com/yyuu/pyenv/blob/v20160509/pyenv.d/exec/pip-rehash/conda#L25\n. I'll merge this to apply some aria2c related fixes. I may revert this later though.\n. > pyenv-virtualenv: remove /home/cpa/.pyenv/versions/miniconda2-4.0.5/envs/tst? y\nObviously this is an pyenv-virtualenv issue. Dup of yyuu/pyenv-virtualenv#178\n. Title's liying. Firstly you should consider what simple is. Don't mix up multiple things.\n. #524 \n. I don't need it. If you need something do it by yourself. PRs are welcome.\n. \ud83d\ude1e \nI'll modify definitions to run verify_pyXX before and after ensurepip. It should just work for now. I'll try to prepare some intrinsic fix later....\n. @brechtm please give 3d263c8fa31ba0a14a1bb600482deb0ad9b7fb38 a try to check if it solves the issue.\n. I guess this is same issue #535. Please reinstall py.test with NOT specifying '--user' to pip install. If pip installs executables in ~./.pyenv/versions/*/bin, pyenv can detect those binaries and will generate shims script to hook command executions.\n. BTW I'm also a py.test user and am using it w/ pyenv w/o problems.\n. -L is an linker option and you'd need to look for ld(1) instead of clang(1). Anyway I guess something is wrong on your environment or build options. The output of the following might help further debugging. Anyway this must not be a kind of pyenv's issue.\n- env (remove credentials before pasting!)\n- sw_ver\n- clang --version\n- pyenv install -v 2.7.11\n. It's working at least for me and others. Possibly networking issue.\n. pyenv install (and python-build) supports -p which let python-build to read patch from standard input. cat foo.patch | pyenv install -v 3.4.5 allows users to apply custom patch when building.\nhttps://github.com/yyuu/pyenv/blob/0e298b691d8490064cc069a56be91597afdb590b/plugins/python-build/bin/pyenv-install#L18\nhttps://github.com/yyuu/pyenv/blob/0e298b691d8490064cc069a56be91597afdb590b/plugins/python-build/bin/python-build#L8\nI can bundle the patch as a default patch if there's working configuration.\n. @robsonpeixoto could you send me a PR if possible? Just putting the patch file under $(pyenv root)/plugins/python-build/share/python-build/patches/Python-5.2 should let python-build to apply the patch before building.\n. I'm waiting for your PR~\n. It seems the archive contains .. in pathname and BSD tar refused to extract it. This needs to be fixed in CPython. Please report it to them.\n% sw_vers\nProductName:    Mac OS X\nProductVersion: 10.11.5\nBuildVersion:   15F34\n% tar xvf Python-3.6.0a2.tgz\nx ../Python-3.6.0a2/: Path contains '..'\nx ../Python-3.6.0a2/Doc/: Path contains '..'\nx ../Python-3.6.0a2/Grammar/: Path contains '..'\nx ../Python-3.6.0a2/Include/: Path contains '..'\nx ../Python-3.6.0a2/LICENSE: Path contains '..'\nx ../Python-3.6.0a2/Lib/: Path contains '..'\nx ../Python-3.6.0a2/Mac/: Path contains '..'\nx ../Python-3.6.0a2/Makefile.pre.in: Path contains '..'\nx ../Python-3.6.0a2/Misc/: Path contains '..'\nx ../Python-3.6.0a2/Modules/: Path contains '..'\nx ../Python-3.6.0a2/Objects/: Path contains '..'\nx ../Python-3.6.0a2/PC/: Path contains '..'\nx ../Python-3.6.0a2/PCbuild/: Path contains '..'\nx ../Python-3.6.0a2/Parser/: Path contains '..'\nx ../Python-3.6.0a2/Programs/: Path contains '..'\nx ../Python-3.6.0a2/Python/: Path contains '..'\nx ../Python-3.6.0a2/README: Path contains '..'\nx ../Python-3.6.0a2/Tools/: Path contains '..'\nx ../Python-3.6.0a2/aclocal.m4: Path contains '..'\nx ../Python-3.6.0a2/config.guess: Path contains '..'\nx ../Python-3.6.0a2/config.sub: Path contains '..'\nx ../Python-3.6.0a2/configure: Path contains '..'\nx ../Python-3.6.0a2/configure.ac: Path contains '..'\n( ... )\n. Good catch :octocat: \n. Good catch. I confirmed it is also broken with zsh. The help messages should be written to 2.\n% pyenv shell --help\n(eval):2: parse error near `\\n'\n. Prepared #651 as the workaround. It'd be better to send same PR to https://github.com/rbenv/rbenv as well.\n. I've pushed e93ae00ca1420de631055bd5b7b05565fb95b6db. Now we can expect all help messages will be written to stdout.\n. I'll merge this regardless of rbenv/rbenv#914 since this is obviously a bug. I may be going to revert (or re-implement the feature in different way) later though.\n. It might be time for us to migrate to tar.xz.... Anyway thanks for fixing!\n. @tsahara Umm. I just guessed that it should work fine even on BSD since it worked on OS X 10.11.5 (it must be similar to FreeBSD toolchain). I should have been more careful about diversity between BSD families \ud83d\ude1e \nActually I'm not familiar to those BSD families.... Could you check the following if you get a chance?\n- Do OpenBSD and NetBSD (and FreeBSD, and ...DragonFlyBSD?) have GNU tar package?\n- Do these gtar executable can understand -J option?\nIf nothing helps, it might be better to consider rolling back to .tar.gz....\n. The footprint of .tar.xz could be smaller than .tar.gz for most cases. Plus, I guess majority of pyenv users are on GNU/Linux or OS X where tar supports -J by default. Generally speaking, using .tar.xz could be just better as long as tar supports it.\nIt must be possible to implement that conditional switching of download sources (tar.xz vs. tar.gz) based on availability of tar -J. I'll try to implement it if I get a chance.\n. It's because pyenv-rehash doesn't care if the files found in PATH is an executable file or not. It must be a user's responsibility to keep PATH clean.\nhttps://github.com/yyuu/pyenv/blob/v20160726/libexec/pyenv-rehash#L87-L89\n. It's a bash issue. Documentation enhancement is welcome.\n. Sent as rbenv/rbenv#919\n. I could not reproduce the issue.\nIt seems that one of astroconda's dependencies install custom profile script. Though it just worked fine for me at least.\nsh\n% pyenv sh-activate miniconda3-4.0.5/envs/astroconda\nunset PYENV_VIRTUAL_ENV;\nunset VIRTUAL_ENV;\nif [ -n \"${_OLD_VIRTUAL_PATH}\" ]; then\n  export PATH=\"${_OLD_VIRTUAL_PATH}\";\n  unset _OLD_VIRTUAL_PATH;\nfi;\nif [ -n \"${_OLD_VIRTUAL_PYTHONHOME}\" ]; then\n  export PYTHONHOME=\"${_OLD_VIRTUAL_PYTHONHOME}\";\n  unset _OLD_VIRTUAL_PYTHONHOME;\nfi;\nif [ -n \"${_OLD_VIRTUAL_PS1}\" ]; then\n  export PS1=\"${_OLD_VIRTUAL_PS1}\";\n  unset _OLD_VIRTUAL_PS1;\nfi;\nif declare -f deactivate 1>/dev/null 2>&1; then\n  unset -f deactivate;\nfi;\nexport PYENV_VERSION=\"miniconda3-4.0.5/envs/astroconda\";\nexport PYENV_ACTIVATE_SHELL=1;\nexport PYENV_VIRTUAL_ENV=\"/home/yyuu/.pyenv/versions/miniconda3-4.0.5/envs/astroconda\";\nexport VIRTUAL_ENV=\"/home/yyuu/.pyenv/versions/miniconda3-4.0.5/envs/astroconda\";\nexport CONDA_DEFAULT_ENV=\"astroconda\";\n. \"/home/yyuu/.pyenv/versions/miniconda3-4.0.5/envs/astroconda/etc/conda/activate.d/webbpsf-data.sh\";\n. @pocin the activate script of virtualenv and anaconda will not work without trick in pyenv since the shim script generated by pyenv is created for executables \ud83d\ude1e Even if the activate script works with pyenv, because the script will manage $PATH of user's interactive shell, unfortunately it won't work well with pyenv's shim scripts.\nAs a workaround, I've prepared support for Anaconda style activation in pyenv-virtualenv. I'd recommend Anaconda users to install pyenv-virtualenv if they'd like to use pyenv style versioning with conda's environments. Please give it a try.\nhttps://github.com/yyuu/pyenv-virtualenv/tree/a3bc42cb93c5758ae967b4637829826800053689#anaconda-and-miniconda. @tsahara could you check if this works on NetBSD/OpenBSD?\n. There's nothing weird. You're using miniconda3-latest and the ds9 command isn't available in the version. Please read the error message.\n```\npyenv: ds9: command not found\nThe ds9' command exists in these Python versions:\n  anaconda-4.0.0/envs/astroconda\n```\n. It seems that CPython build script will use the executable namedpython.exe` on OS X even on successful build. It should mean that the name of executable file isn't matter.\n% sw_vers\nProductName:    Mac OS X\nProductVersion: 10.11.6\nBuildVersion:   15G31\n% pyenv install -v 3.5.2\n( ... )\nrm -f /Users/yyuu/.pyenv/versions/3.5.2/bin/2to3\n(cd /Users/yyuu/.pyenv/versions/3.5.2/bin; ln -s 2to3-3.5 2to3)\nrm -f /Users/yyuu/.pyenv/versions/3.5.2/bin/pyvenv\n(cd /Users/yyuu/.pyenv/versions/3.5.2/bin; ln -s pyvenv-3.5 pyvenv)\nif test \"x\" != \"x\" ; then \\\n    rm -f /Users/yyuu/.pyenv/versions/3.5.2/bin/python3-32; \\\n    (cd /Users/yyuu/.pyenv/versions/3.5.2/bin; ln -s python3.5-32 python3-32) \\\n  fi\nrm -f /Users/yyuu/.pyenv/versions/3.5.2/share/man/man1/python3.1\n(cd /Users/yyuu/.pyenv/versions/3.5.2/share/man/man1; ln -s python3.5.1 python3.1)\nif test \"xupgrade\" != \"xno\"  ; then \\\n    case upgrade in \\\n      upgrade) ensurepip=\"--upgrade\" ;; \\\n      install|*) ensurepip=\"\" ;; \\\n    esac; \\\n     ./python.exe -E -m ensurepip \\\n      $ensurepip --root=/ ; \\\n  fi\nIgnoring indexes: https://pypi.python.org/simple\nCollecting setuptools\nCollecting pip\nInstalling collected packages: setuptools, pip\nSuccessfully installed pip-8.1.1 setuptools-20.10.1\n/var/folders/rc/_9kglbjs651431bbh2736s300000gn/T/python-build.20160815141142.3857 ~\n~\nInstalled Python-3.5.2 to /Users/yyuu/.pyenv/versions/3.5.2\nThe actual problem on your system must be this SEGV. I guess your build toolchain (Command Line Tools for Xcode or system libraries) somehow broken, or configure to generate broken executables at least. I'm not sure what's broken though.\nInstalling collected packages: setuptools, pip\n/bin/sh: line 1: 44731 Segmentation fault: 11  ./python.exe -E -m ensurepip $ensurepip --root=/\nmake: *** [install] Error 139\n. Generally speaking, pyenv can work even without calling pyenv-init. Some features (e.g. shell completion, sh-* commands) will not work though.\nFor many cases, the slowness of init could be coming from rehashing shim scripts. Calling as eval \"$(pyenv init - --no-rehash)\" could mitigate the slowness during the bootstrap. (this can be applied to rbenv too)\n. It should be safe to merge since most of changes are mine :octocat: \n. It's your configuration issue. Make sure your shell is properly configured to load eval \"$(pyenv init -)\" on startup.\nhttps://github.com/yyuu/pyenv#basic-github-checkout\n. :+1: \n. Generally speaking, adding something to .gitignore doesn't mean endorsment. Anyway this is harmless and will merge.. patch is a command to apply some changes to files from input; typically which is provided as a package named \"patch\" by Linux distributions. It is a requirement of pyenv.\n. #680 has been merged.\n. We'd be happy if you send us another PR once PyPy's buildbot supports HTTPS :octocat: \n. Umm. I couldn't reproduce the build failure with both env PYTHON_CONFIGURE_OPTS=\"--enable-framework\" pyenv install -v 3.5.2 and env PYTHON_CONFIGURE_OPTS=\"--enable-framework\" pyenv install -v 2.7.11. I'm using pyenv 7417b6d57f43d30a9910826e1212151c0d6b8d83, latest master` branch on GitHub.\n@s1341 how did you test your changes? \n. Because this is a feature related to framework installation, obviously I'm using OS X.\nsh\n%  sw_vers\nProductName:    Mac OS X\nProductVersion: 10.11.6\nBuildVersion:   15G31\nAgain, I couldn't reproduce the issue. I created dummy definition of issue68 with the following content. Obviously it's running build_package_symlink_version_suffix 3 times.\n``` sh\necho $PREFIX_PATH\nmkdir -p \"${PREFIX_PATH}/bin\" \"${PREFIX_PATH}/lib\"\ncat < \"${PREFIX_PATH}/bin/python3.5\"\n!/usr/bin/env bash\necho \"$0 $@\"\nEOS\nchmod a+x \"${PREFIX_PATH}/bin/python3.5\"\nbuild_package_symlink_version_suffix\nbuild_package_symlink_version_suffix\nbuild_package_symlink_version_suffix\nfind \"${PREFIX_PATH}\"\n```\nThen, I ran it with using python-build and it just succeeded.\nsh\n% PYTHON_CONFIGURE_OPTS=\"--enable-framework\" ~/.pyenv/plugins/python-build/bin/python-build -v issue687 /tmp/issue68\n/tmp/issue687\n/tmp/issue687\n/tmp/issue687/bin\n/tmp/issue687/bin.orig\n/tmp/issue687/bin.orig/python3.5\n/tmp/issue687/include\n/tmp/issue687/lib\n/tmp/issue687/Python.framework\n/tmp/issue687/Python.framework/Versions\n/tmp/issue687/Python.framework/Versions/Current\n/tmp/issue687/Python.framework/Versions/issue687\n/tmp/issue687/Python.framework/Versions/issue687/include\n/tmp/issue687/Python.framework/Versions/issue687/lib\n/tmp/issue687/Python.framework/Versions/issue687/share\n/tmp/issue687/share\nIs there anyone who can reproduce the problem?\n. @s1341 sorry for delay. @0xd3d0's information helped me to identify the issue. I'll prepare some workaround for this maybe by the end of today in Japan time.\n. @s1341 @0xd3d0 I've merged #700 as a workaround for mv issue. I confirmed it worked with 2.7.8 on OS X 10.11.6 at least on my environment. Please let me know if you guys still see similar issues.\n. The actual problem is in git-core. It seems it's trying to search gettext.sh from $PATH then source it.\nhttps://github.com/git/git/blob/v2.13.3/git-sh-i18n.sh#L46\nAs a tentative workaround, setting something in GIT_INTERNAL_GETTEXT_TEST_FALLBACKS might work.\nexport GIT_INTERNAL_GETTEXT_TEST_FALLBACKS=1. I've merged #953 into master. By that changes, the shim script for gettext.sh will be generated as source'able script. Just regenerating shims by hitting pyenv rehash.. Could you update the changes as exactly same as rbenv#868 to avoid conflict?\n. As you can see, it's just an ordinary call of ensurepip. It it stuck in your environment, there might be something bad in your network environment or https://bootstrap.pypa.io/\nhttps://github.com/yyuu/pyenv/blob/6601c3440867778ee03b95700984a9123be2527e/plugins/python-build/bin/python-build#L1689\n. Resolved by #697\n. @Samureus just in case, could you add an alias definition named pypy-5.4.1-src like this?\nhttps://github.com/yyuu/pyenv/blob/45173d1f67b91f6623f9d29660dede5d590b42ec/plugins/python-build/share/python-build/pypy-5.4-src\n. Thanks for swift action!\n. It means that your shell isn't initialized with eval \"$(pyenv init -)\". Please review your shell configurations again.\nhttps://github.com/yyuu/pyenv#basic-github-checkout\n. I believe this must be a CPython thing, but not sure what's broken at least for now.\n. I confirmed the reproduction with virtualenv created from 3.6.0b1 with using virtualenv v14.0.3. It'd worth reporting to pypa/virtualenv if there's no similar issues reported yet.\n. In python-build, we're building stackless from source. You don't need to care about dmg.\n. Could you add SHA256 checksum based on archive you downloaded from bitbucket? Idealy it'd be better to use checksum provided by origin, but if there none exists, sometime I'm generating checksome from downloaded archive by myself. It'd be just better than nothing, though.\n. @Samureus From the diff, it looks like you're trying to replace stackless-2.7.9 by stackless-3.4.2. I guess this isn't what you intended to do. Could you review your changes again?\n. @Samureus Great addition of new kind of python! I feel numpy must be an optional package which should be managed by users of pyenv, though. I guess we should remove numpy part from this. How do you think?\n. @Samureus Gotcha, I've got your point. I think it's acceptable to include numpy as a part of pyston installation at present since it's still in its early stage.\n. @Samureus thanks for your effort. I think we don't need warnings at least for now since every users of Pyston would know it's still in earlier stage of development.\n. https://github.com/yyuu/pyenv/blob/v1.0.2/plugins/python-build/share/python-build/2.7.12\n. Why don't you report it to travis-cu guys?\n. The \"system\" means \"executables in PATH except puenv's\". It cares nothing even if the system's \"python\" is a Jython ;p\n. Thanks for your help :+1:\n. I guess it was just imported from https://github.com/rbenv/ruby-build as is. Honestly speaking I couldn't remember if removing the call of {{build_package_ldflags_dirs}} breaks CPython build or not \ud83d\ude35 Because python-build doesn't care so much about contents of LDFLAGS, I don't have strong preference about the behavor; however I don't want to just change current code without some evidence.\nAs a tentative workaround, both of the following could work.\n1. Create your custom build definitions with modifying default build definitions bundled with python-build\n   - just removing build_package_ldflags_dirs could work https://github.com/yyuu/pyenv/blob/1dee022342d5f88f4d72fa686af7878a2bdcc222/plugins/python-build/share/python-build/3.5.2#L4-L8\n   - cp $(pyenv root)/plugins/python-build/share/python-build/3.5.2 ./3.5.2 && sed -i 's/ldflags_dirs//' 3.5.2 && pyenv install -v ./3.5.2\n2. Create new hook plugin for pyenv install to remove LDFLAGS entries with non-existing directories\n. It should work after #730, and I confirmed that I can build 3.6-dev at 41606c43072fb4f0df0267d25fa7017a46c007b9. I guess all you guys are working on older release of pyenv / python-build.\n. Install from pyenv HEAD if you guys would like to try the latest versions.\n. I've just released v1.0.3 which includes pypy3.3-5.5-alpha (plus various fixes made by @Samureus!). Installing pyenv from v1.0.3 tag should solve the issue.\n. pyenv will try installing readline if there's only corrupted libedit exists. Generally speaking rebuilding versions without readline should solve rhe issue\nhttps://github.com/yyuu/pyenv/blob/master/plugins/python-build/bin/python-build#L1342. read error message: zlib not available. Sometime you may need to apply extra patches to build 2.6 on recent systems. It's not possible to keep COython sources buildable on all systems.. We are not doing any special things to 3.4. To check availability of a version, check the exit value of 'python -V' could be the easiest.. The installation of pypy2-5.6.0 is working on macOS 10.12.1 at least for me.\n% pyenv --version\npyenv 1.0.4\n% sw_vers\nProductName:    Mac OS X\nProductVersion: 10.12.1\nBuildVersion:   16B2555. LGTM! I confirmed that this is working on GNU/Linux. Thanks!. \nhttps://github.com/yyuu/pyenv-update. Looks weird. It seems shims path exists at the top of PATH appropriately. Can you verify if you actually have shim script at /usr/local/var/pyenv/shims/python? If there's no such script, running 'pyenv rehash' may help.. Generally speaking that's all users' shell configuration issue. pyenv's doing nothing special in shell's command look up. Review your shell configuration again and again and again. On 3.3+, pyenv-virtualenv will use python -m venv if virtualenv is not available. It might be the cause of different behavior between 2.x and 3.x.. pyenv requires bash in PATH to run. Just installing bash should solve.. I needed to install Debian's libmono-i18n4.0-all to make pip installation working. Anyway I confirmed that it's now installable. Thanks :+1:\n% PYENV_VERSION=ironpython-2.7.7 python -V\nIronPython 2.7 2.7.7.0 on 4.6.1 (Debian 4.6.1.3+dfsg-8). pyenv itself don't support aliasing. If you really want to use alias, you can create some pyenv plugins or hook scripts to do so. See also wiki pages.. install is a command from python-build plugin. It may not be available if your pyenv installation is not configured properly into your shell. Typically you need to add 'eval \"$(pyenv init -)\"' in your shell's initialization script.. failed to download. It's all expected behavior. RTFM. It will run bunch of bash code. It may be slow on slower machine.. ctypes / libffi issue. pyenv is not doing anything for it. pyenv doesn't care how Python installations in ${PYENV_ROOT} have been prepared. Any installation methond should work as long as you have directories at proper locations.\n\n'pyenv versions' will only show installations found in ${PYENV_ROOT}/versions\nhttps://github.com/yyuu/pyenv/blob/master/libexec/pyenv-versions#L110\n'pyenv rehash' will generate shim scripts for all executables found in ${PYENV_ROOT}/versions/*/bin\nhttps://github.com/yyuu/pyenv/blob/master/libexec/pyenv-versions#L110. I've never used IntelliJ for Python projects.... Are you running on macOS?\n\nHonestly speaking, it is kinda misconfiguration of shell which was invoked from IntelliJ's terminal. I suspect changing the position of /usr/bin in PATH conditionally corrupts something. At present I'm not confident enough though. Anyway will try running IntelliJ when I get a chance.. I guess you launched IntelliJ with setting pyenv version as system. That must be the reason why /usr/bin was at the top of the PATH.\n\n\nChange the position of /usr/bin inserted to the tail of PATH variable.\nDo not change PATH variable unless CPython is used.\n\n\nI think both two will reintroduce the issue of #98. If so, I think it's better to keep current code since it's for virtualenv. Umm \ud83d\ude15 . I guess some of the following can be a workaround for the issue. Please let me know if there's some other ways.\n\nModify IntelliJ's launcher script (/usr/local/bin/idea?) to start IntelliJ not via pyenv's shim script\nI guess its shebang is configured as #!/usr/bin/env python\nYou can avoid pyenv's shim to intercept the execution by replacing the line by #!/usr/bin/python \nModify $PATH ordering in shell's configuration file (e.g. .bashrc, .zshrc) if it is an interactive shell running in IntelliJ\nIt seems that shell running inside IntelliJ has DOTDIR=/Applications/IntelliJ IDEA CE.app/Contents/plugins/terminal in environment. I don't have any plan to work for fish since I'm not an active user of the shell. If you think fish users need some notes, please open PRs or edit wiki by yourself.\n\nBTW, I guess it'd be better add 'status --is-interactive' in your fish configuration.\nhttps://github.com/yyuu/pyenv/blob/master/libexec/pyenv-init#L73. Obviously non pyenv issue. Umm. Is pip generating executable with shebang line as python2.7 on jython...? Will check later.. It seems that jython executable is generated with python2.7 in shebang. This file must be generated by Jython's installer. Actually pyenv isn't doing anything for it.\n```\nroot@4ca652f34cdc:~# head -1 ~/.pyenv/versions/jython-2.7.0/bin/*\n==> /root/.pyenv/versions/jython-2.7.0/bin/easy_install <==\n!/usr/bin/env /root/.pyenv/versions/jython-2.7.0/bin/jython\n==> /root/.pyenv/versions/jython-2.7.0/bin/easy_install-2.7 <==\n!/usr/bin/env /root/.pyenv/versions/jython-2.7.0/bin/jython\n==> /root/.pyenv/versions/jython-2.7.0/bin/jython <==\n!/usr/bin/env python2.7\n==> /root/.pyenv/versions/jython-2.7.0/bin/pip <==\n!/usr/bin/env /root/.pyenv/versions/jython-2.7.0/bin/jython\n==> /root/.pyenv/versions/jython-2.7.0/bin/pip2 <==\n!/usr/bin/env /root/.pyenv/versions/jython-2.7.0/bin/jython\n==> /root/.pyenv/versions/jython-2.7.0/bin/pip2.7 <==\n!/usr/bin/env /root/.pyenv/versions/jython-2.7.0/bin/jython\n==> /root/.pyenv/versions/jython-2.7.0/bin/python <==\n!/usr/bin/env python2.7\n``. In thepython:2.7.12container (based on Debian 8; jessie),jython` executable is generated as a Python script.\n```\nroot@4ca652f34cdc:~# cat /etc/issue\nDebian GNU/Linux 8 \\n \\l\nroot@4ca652f34cdc:~# file /root/.pyenv/versions/jython-2.7.0/bin/jython\n/root/.pyenv/versions/jython-2.7.0/bin/jython: Python script, ASCII text executable\n```\nUnlike on jessie, the script is installed as a shell script on my Debian sid box.\n```sh\n% cat /etc/issue\nDebian GNU/Linux stretch/sid \\n \\l\n% file ~/.pyenv/versions/jython-2.7.0/bin/jython\n/home/yyuu/.pyenv/versions/jython-2.7.0/bin/jython: Bourne-Again shell script, ASCII text executable\n```\nIt seems that Jython installer will generate jython executable as Python script if python2.7 is available when installing Jython. I'm usually using 3.5 and it's the reason why my jython executable was created as a shell script. I'll try to prepare some workaround in python-build script..... @gobadiah I believe #801 should solve the issue. Please let me know if you still have some trouble with Jython 2.7+.. You can just create virtualenv in any location. To use it from pyenv, create symlink to the environment in ~/.pyenv/versions. I hope everything worked now. I guess that the problem was incorrect file naming on mirror site.. Both install/uninstall are implemented to call pyenv-rehash automatically.\nhttps://github.com/yyuu/pyenv/blob/v1.0.6/plugins/python-build/bin/pyenv-install#L276\nhttps://github.com/yyuu/pyenv/blob/v1.0.6/plugins/python-build/bin/pyenv-uninstall#L83. insufficient information. issue tracker is not question forum. Thanks~. pyenv won't manage user's PATH except the n pyenv-init. Please take a look on README and review your shell configurations.. I don't want to merge platform specific changes into pyenv core to keep repository content solid. I guess this feature can be implemented as a separated repository (e.g. pyenv-zgen).. Interesting, I just didn't know about $ORIGIN :+1: Will try building with this later.. Verified it's working on GNU/Linux! Thanks!. That's all about Unix's file permissionissues. If you'd like to configure so, try setting setgid and/or sticky bit on installation path.. Check your shell config. You mean #819 is problematic? Honestly speaking I didn't test with virutalenv after merging it.. Just in case, I reverted the changes from master once. Will try investigating later.. Already reverted from master. Thanks~. Yeah, I guess he doesn't have zlib header files in /usr/include. xcode-select --install will solve.. 32bit build is a kind of feature of CPython ./configure and pyenv will NOT take care nothing about it. I guess the configurations like follows will just work.\n% env CFLAGS=\"-m32\" LDFLAGS=\"-m32\" pyenv install 2.7.13. no responce. Kind of basic usage issue. Not a problem in pyenv.. It seems completion function for zsh is doing similar thing. Good catch :+1:\nhttps://github.com/yyuu/pyenv/blob/f36d735e27a7619da02a4bb45c9b4a4958b5a888/completions/pyenv.zsh#L14. @maxnordlund could you open similar PR to https://github.com/rbenv/rbenv as well? Because pyenv's sharing most of code with that, contributing to upstream will be welcomed.. As you know, the latest virtualenv does not support 2.4 anymore. You need to install older version of it mnually.\npyenv-virtualenv will try to install the latest version from pypi by default. If you need to use olfer version, please specify the version in VIRTUALENV_VERSION.\nhttps://github.com/yyuu/pyenv-virtualenv/blob/master/bin/pyenv-virtualenv#L434. What platform are you using?. Hmm. It seems it came from ruby-build.\nhttps://github.com/rbenv/ruby-build/blob/5d62e84c7b59cc3e44c7b83063613a258e1cdf10/bin/ruby-build#L227\nHonestly speaking, I've never realized this since it's 3rd option to compute SHA256. Anyway it'd be better to be fixed.. done!. It just mean your shell isn't loading pyenv function properly. Please follow installation instruction. For typical cases, restarting shell could work.\nhttps://github.com/yyuu/pyenv/tree/ad8f2886aecd7226225c567e5a04c770b70d69b1#installation. I suspect some of dependency of Anaconda installed gcc and its toolchain into Anaconda's prefix. And, gcc shim script generated by pyenv is causing the problem.\nBecause conda may install some system executables in their prefix, we're provisioning this hook script to skip creating shim scripts for them. Adding gcc, ld, etc. to the following script may help.\nhttps://github.com/pyenv/pyenv/blob/fe1bd3144326979451e9c7a1ec94130106722c5c/pyenv.d/rehash/conda.bash\nhttps://github.com/pyenv/pyenv/blob/fe1bd3144326979451e9c7a1ec94130106722c5c/pyenv.d/rehash/conda.txt. I don't provide any support. RTFS. Thanks for taking care \ud83d\udc4d . Umm. It seems Travis CI's not working after migrating to organization. Will have a look..... Sounds weird \ud83d\ude1e  python-build should build CPython with just like usual ./configure && make && make install. I guess there's something wrong with --enable-optimizations....\nhttps://github.com/pyenv/pyenv/blob/d1ff898a2bfbe44d74bf92c2b6c9f7652b1d3aaa/plugins/python-build/bin/python-build#L712-L749. @Samureus could you create new release from current master branch? Let's create another release for Stackless as needed.. why you expect it's included in the version. don't create silly issues.\nhttps://github.com/pyenv/pyenv/blob/master/CHANGELOG.md#108. We cannot fix all problems at once. Especially if it's some distribution specific issue.\nLet's just create a release from latest master and close this. I don't believe recent changes in pyenv caused #843, and it must be at least safe to create a new release. Will work for it if I can get a chance in this week.. Sorry for delay. I didn't have enough time for investigation. Though IIRC trapping EXIT must be sufficient to hook up all exit cases except SIGKILL. I'm not sure if there's actually some cases which will not be covered by EXIT hook.. Report to pypy project.. > error: failed to download Python-3.5.1.tar.xz\nread message.. Thanks!. Please just do and open a PR. Tnaks in advance.. -f is for \"no error if install prefix already exists (force)\".\n```\n% bash Miniconda3-4.1.11-Linux-x86_64.sh -h\nusage: Miniconda3-4.1.11-Linux-x86_64.sh [options]\nInstalls Miniconda3 4.1.11\n-b           run install in batch mode (without manual intervention),\n             it is expected the license terms are agreed upon\n-f           no error if install prefix already exists (force)\n-h           print this help message and exit\n-p PREFIX    install prefix, defaults to /home/yyuu/miniconda3\n\n```\nWe have similar option -f in pyenv install. However, it's checking the existence of ${PREFIX}/bin unlike conda's installer script (it seems it's checking the existence of ${PREFIX} itself). This difference might be a cause of the issue with conda.\nhttps://github.com/pyenv/pyenv/blob/v1.0.10/plugins/python-build/bin/pyenv-install#L157-L17\nAnyway, at least this must be harmless for usual cases. I'll just merge this and will see how it go.. @joshfriend It's less often, but sometime I want to install from latest development HEAD for some testing.... \ud83d\ude15  I don't want to remove '*-dev' ig possible. Though I agreed that it'd be better if dev version is the first option in completion.. @Daenyth it must be just a misconfiguration of your system. I guess you have 2 installations of pyenv in your system and they are conflicting somehow. I'd recommend you to once uninstalling pyenv from both brew and your ~/.pyenv, then reinstall again. See also README about installation instruction.. Thanks!. I'm not very familiar with OpenWRT, but I guess its sha256sum must be Busybox, not from GNU coreutils. I think you modified https://github.com/pyenv/pyenv/blob/v1.0.10/plugins/python-build/bin/python-build#L307 to remove unnecessary whitespaces.\nFor further investigation, could you show me the output of echo foo | sha256sum -b | od -c on your OpenWRT box? The following output is sample output from my Debian GNU/Linux amd64 box.\n% echo foo | sha256sum -b | od -c\n0000000   b   5   b   b   9   d   8   0   1   4   a   0   f   9   b   1\n0000020   d   6   1   e   2   1   e   7   9   6   d   7   8   d   c   c\n0000040   d   f   1   3   5   2   f   2   3   c   d   3   2   8   1   2\n0000060   f   4   8   5   0   b   8   7   8   a   e   4   9   4   4   c\n0000100       *   -  \\n\n0000104\nPlus, if there are problem with BusyBox (or some OpenWRT's toolchain), it might be better to apply some patch to https://github.com/rbenv/ruby-build. Anyway please share the output from sha256sum command when you get a chance.. @Gr1N I've not yet tested on alpine, but I guess just greedily removing characters after some whitespace must be sufficient.\ndiff --git a/plugins/python-build/bin/python-build b/plugins/python-build/bin/python-build\nindex 1037006..4f8b994 100755\n--- a/plugins/python-build/bin/python-build\n+++ b/plugins/python-build/bin/python-build\n@@ -248,7 +248,7 @@ compute_sha2() {\n     echo \"${output##* }\"\n   elif type sha256sum &>/dev/null; then\n     output=\"$(sha256sum -b)\" || return 1\n-    echo \"${output% *}\"\n+    echo \"${output%% *}\"\n   else\n     return 1\n   fi\n@@ -263,7 +263,7 @@ compute_md5() {\n     echo \"${output##* }\"\n   elif type md5sum &>/dev/null; then\n     output=\"$(md5sum -b)\" || return 1\n-    echo \"${output% *}\"\n+    echo \"${output%% *}\"\n   else\n     return 1\n   fi\nFeel free to open PR. And, I want you to open same fix to https://github.com/rbenv/ruby-build as well.. It seems that you opened rbenv/ruby-build#1126. I'll prepare a PR since most of the code around it is equivalent.. Good catch \ud83d\udc4d . Basically it's for performance. It's not a problem even if we do so on modern x86 systems with faster I/O drives. Though it could impose certain amount of overhead for all invocations of python executables on smaller systems, like Raspberry Pi.. I guess not so many users want to run rehash on every invocations of shims. At least for now, I'd recommend you to use your custom patch, or custom hook script to override original pip-rehash.bash (you can install your own custom hook script in $PYENV_HOOK_PATH; https://github.com/pyenv/pyenv/blob/v1.0.10/libexec/pyenv#L91) if you want to do so.. This is adding the option as a configure options. It'd be better to skip it based on the building version....\nhttps://github.com/pyenv/pyenv/blob/master/plugins/python-build/bin/python-build#L1978. Just prepared a workaround. Though actually I've not yet tested it throughly.... Please try #978 if there's someone whom interested in this topic.. Confirmed this worked for me. Thanks!. pyenv's virtualenv plugin is different project https://github.com/pyenv/pyenv-virtualenv. Anyway it's just calling https://github.com/pypa/virtualenv. If it doesn't work with Jython, please report to it.. Thanks for adding this \ud83d\udc4d \nIIRC, my initial intention to create separate definitions for pypy-portable is that it'd be better to prepare definitions per provider. Though it's not so meaningful anymore since we're installing \"pypy-portable\" as \"pypy\" at least on some platforms.\nI think we can just merge pypy and pypy-portable definitions (=~ stop creating pypy-portable definitions from now on). I guess not so many people are actually relying on \"pypy-portable\" since \"pypy\" is setup to install pypy-portable on the platforms where PyPy official binariy is not provided.\n. Created one https://github.com/pyenv/pyenv/releases/tag/v1.1.3. Hmm. Actually we're applying some patches to ssl module of some older releases. We may be able to do similar for the issue.\nhttps://github.com/pyenv/pyenv/blob/7dae19765cf5d592a718978967a4181c33b79846/plugins/python-build/share/python-build/patches/2.7.9/Python-2.7.9/010_ssl_no_ssl3.patch. Try enabling verbose output by adding '-v' to' pyenv install'. Clearly there should be either curl, wget or aria2c. I confirmed the version is 1.1.0 in v1.1.1 https://github.com/pyenv/pyenv/blob/v1.1.1/libexec/pyenv---version#L15\nIt'd be sufficient to cut a new release from current master. Will do.\n. I've released v1.1.2 in favor of fixing v1.1.1. Please let me know if you somehow want me to fix v1.1.1 itself. So that I will create another hotfix for it.\nhttps://github.com/pyenv/pyenv/releases/tag/v1.1.2. Ah, good catch. Will prepare a fix for it.. @anthrotype I've opened #956 for workaround of the issue. Could you give it a try when you get a chance?. pyenv/pyenv-virtualenv#230 will generate pydoc executable. It should solve the issue.. Mutable something should not represent as a tag. Anyway master is something like that at present. If you'd like to do some release management for yourself, do it yourself.. > pip is configured with locations that require TLS/SSL, however the ssl module in Python is not available.\nAs you can read from the message, your python installation doesn't have ssl module. It should be there if the version was built via pyenv install since there's a check for it.\nhttps://github.com/pyenv/pyenv/blob/fd0b8fcfb312aac12efd9529aeb0e516972fa066/plugins/python-build/bin/python-build#L1658\nAnyway it's a pip issue.. Ah, sorry. I mistakenly merged without squashing :disappointed:. Always don't forget to install Xcode Command Line Tools after upgrading macOS version.. pyenv can find plugin executables in $(pyenv root)/plugins/*/bin by default. You don't have to have python-build in your $PATH outside pyenv.\nhttps://github.com/pyenv/pyenv/blob/v1.1.4/libexec/pyenv#L85-L89. As you can see diff, there's any changes in binary execution code between v1.1.3 and v1.1.4.\nhttps://github.com/pyenv/pyenv/compare/v1.1.3...v1.1.4\nI suspect it was caused by some changes in your system. Anyway and actual error message is necessary. Also, putting error output from env PYENV_DEBUG=1 ... (problematic command line) ... may help investigation.. It looks like the changes in #953 and it's generating wrong shim at least on your environment.\nBy default, pyenv rehash will generate source'able shim for the executables listed in $(pyenv root)/pyenv.d/rehash/source.d/default.list. Don't you have python in it?\nhttps://github.com/pyenv/pyenv/blob/v1.1.4/pyenv.d/rehash/source.bash#L3-L11\nhttps://github.com/pyenv/pyenv/blob/v1.1.4/pyenv.d/rehash/source.d/default.list\nI'd recommend you to try rehashing again; PYENV_DEBUG=1 pyenv rehash. It should generate source'able shim only if it is listed in the text files.. @shoichiaizawa\nAnaconda's prefix may contain some executables which is a part of base systems, like tput (a part of ncurses). And, the existence of pyenv's shim scripts for these executable may conceal these executables in your base system. This must be the cause of the problem with nvm.\nThe possible/available workarounds for the issues is follows.\n\nPrevent creating pyenv's shim script for these system executables\nFallback to non-pyenv executables if the given command was not found in active pyenv versions\n\nThe 1 is implemented as a hook script of pyenv. By default, pyenv is configured to skip creating shim scripts based on the blacklist. Adding some text file at $(pyenv root)/pyenv.d/rehash/conda.d/*.list and add tput in it should let pyenv to skip creating shim script for tput. (or, it might be better to add it in the default blacklist; PR welcome)\nThe 2 is implemented as a plugin named pyenv-which-ext. It will try to look up the given command from original $PATH (=~ outside of pyenv) if it was not found inside current active pyenv version. This implicit behavior may be confusing somehow, but it'll work automatically without managing the blacklist by yourself.\nI believe either will work for you. Please give it a try later.. It's just not available for your shell due to insufficient shell configuration. Don't mix up different things and understand your tooling.. The shell commands are available only if pyenv-init has evaluated in the current shell.. This isn\u2019t pyenv issue at all. Write some blog post by yourself.. Why you thought this is a pyenv error?. wrong repository to report issue. I don't remember when was the last time I merged the changes from ruby-build.... \ud83d\ude35 At least I can say this change is equivalent to ruby-build and must be harmless. I'll merge this soon.. @scop the usage of getconf(1) looks nice :+1: I think this is beneficial to get merged into upstream https://github.com/rbenv/ruby-build. Could you open a PR to it as well?. Interesting \ud83d\udc40 \nHowever, I'm still not understanding what is causing the problem in Android Open Source Project.... pwd will change inside pyenv before executing python itself. Though it should be restored to the original directory before pyenv actually start executing python.\nCould you provide some minimal script to reproduce the problem...? I've tried writing some, but I could not find issues so far.\n```sh\n!/usr/bin/env bash\nset -e -o pipefail\nexport PYENV_ROOT=\"$(mktemp -d /tmp/pyenv.XXXXXXXX)\"\ngit clone --depth=1 https://github.com/pyenv/pyenv.git \"${PYENV_ROOT}\"\nexport PATH=\"${PYENV_ROOT}/bin:/usr/bin:/bin\"\neval \"$(pyenv init -)\"\ncreate a dummy version to let pyenv to generate a shim script for python\nmkdir -p \"${PYENV_ROOT}/versions/foo/bin\"\necho -e \"#!/bin/sh\\necho python \\$@\" > \"${PYENV_ROOT}/versions/foo/bin/python\"\nchmod 755 \"${PYENV_ROOT}/versions/foo/bin/python\"\npyenv global system\npwd\ncd /proc/self/cwd\npython -c 'import os;print(repr(os.getcwd()))'\nrm -fr \"${PYENV_ROOT}\"\n```\nThe pwd of python process is set as it should be, in my understanding.\n% ./x.sh\nCloning into '/tmp/pyenv.u1wafgCG'...\nremote: Counting objects: 577, done.\nremote: Compressing objects: 100% (398/398), done.\nremote: Total 577 (delta 268), reused 262 (delta 89), pack-reused 0\nReceiving objects: 100% (577/577), 253.72 KiB | 307.00 KiB/s, done.\nResolving deltas: 100% (268/268), done.\n/home/yyuu\n'/home/yyuu'. Since pyenv is used in various CI provider, I've merged this into pyenv's master to restore the corrupted build of the AOSP.\nI or someone who can work for it may be going to port this change to https://github.com/rbenv/rbenv to keep them compatible. Because the use of cd there in rbenv/pyenv is not anything essential, I don't foresee any issues merging this into rbenv as well.. Can\u2019t you read the repo name? :-1:. It\u2019s SHA256. Use sha256sum or something equivalent.. I remembered that the code around there has changed recently in #1031\nI tried to look up if there's some POSIX standard or something like that for it, but I couldn't find it so far....\nhttp://pubs.opengroup.org/onlinepubs/9699919799/utilities/getconf.html\nhttp://pubs.opengroup.org/onlinepubs/9699919799/functions/sysconf.html. BTW, the python-build script is inheriting most of lines with upstream https://github.com/rbenv/ruby-build. Since this will be worth to merge for ruby-build too, could you prepare a patch and send a PR to it as well once you get a chance?. You should find the meanung of normal first.. The version has been added in #1058 and you are using some old r revision. Do git pull.. wrong repo to report to https://github.com/pyenv/pyenv-doctor. pyenv update is not a part of core pyenv. go https://github.com/pyenv/pyenv-update. Don\u2019t ask us about compiler issue of yours. It\u2019s clear your C compiler has issue.. Thanks!. mkdir -p $(pyenv root)/cache. @joshfriend @blueyed He've been working continuously to improve this project and I believe that it'd be worth adding him as a new contributor. Any objection...?. There's some discussion on this on Gitter\nhttps://gitter.im/yyuu/pyenv?at=5a8b72be53c1dbb7434ef994. The meaning of the system version in pyenv is that \u201clet pyenv to look up python executables from PATH\u201d. \npyenv can find the \u201csystem\u201d as in the standard manner of PATH look up. If the system python was somehow not appeared in PATH, it will show the warning. Since system configuration is totally vary per systems, pyenv cannot deal with non-standard installations.\nSo the answer is, to restore system version working, put system python executable somewhere in PATH, or add system python\u2019s location to PATH. > -> https://repo.continuum.io/archive/Anaconda3-4.4.0-Linux-x86_64.sh\n\nerror: failed to download Anaconda3-4.4.0-Linux-x86_64.sh\n\nAll I can tell is it somehow failed to download the archive. Generally speaking it's some issue in your networking environment. Please try downloading the file by your hand and see how it goes.. Generally speaking, the usage of shims is the core design of pyenv and it'll prevent the user to the availability of some command by checking presence of the command executable. This is core design issue and there's no easy and general workaround for it. One idea would be invoking some no-op command like --version (e.g. pip --version) to verify the availability of the command.. In general pyenv is a tool for developers, not for users. And, they should have responsibility to maintain their systems for their purpose of development. I want to keep pyenv's core solid and simple as much as possible. In reality, pyenv (precisely, python-build plugin) is just invoking ./configure script of CPython as usual CPython build and you can see the output if you want with supplying -v to pyenv install.\nBTW, there's some plugin of pyenv https://github.com/pyenv/pyenv-doctor which tries to check if the system has dependencies to build Python variants. If you prefer, you can invoke similar as a before_install hook script of pyenv install. See also https://github.com/pyenv/pyenv/wiki/Authoring-plugins#pyenv-hooks\n. At first clearly the pyenv project is active. (In reality, pyenv-installer isn\u2019t active as pyenv since it\u2019s not on interest on many people as its core project). In reality, it\u2019s not easy to me to allocation some portion of time for this project these days, but I believe we\u2019re still managing changes in timely manner as it should be.\nAnd, sorry all for my ridiculous doing. My excuse for it is that the issue was keep opened unintentionally on the project and I noticed it after your comment. I just closed the issue after realizing and then I lost communication channel about the ongoing thing. That\u2019s it.\nIMHO, issues on pyenv projecst are not working well at least. People are reporting something as issues of pyenv, but most of them are some issue of their machine setup, networking issue, etc. Clearly these stuffs are not something intrinsic issue of pyenv implementation. There are too many people reporting and 104 opened issues as of Mar 14 2018. Those issues are nearly neglected since no one is motivated or incentivized to close these issues. With monotonically increasing number of opened issues, it\u2019s too easy to overlook something important. I don\u2019t think GitHue issues are the best place for some kind of knowledge sharing. We have Gitter room and people can use some external site (e.g. StackOverflow, Twitter, etc.) to help each other. What I wanted for is to keep focusing this project on GitHub mainly for development purpose.\nBTW, in my understanding, \u201cNot watching\u201d doesn\u2019t work for me since I was still willing to receive some pull requests to these projects. (Plus, people tends to unnecessarily mention my name in their issue; it\u2019s another issue) However, I will give up the maintenance of https://github.com/pyenv/pyenv-installer and https://github.com/pyenv/pyenv-update since I\u2019m not keen on these project at all. My will is, I will keep joining to project as a core committer for most of projects, but not on pyenv-update and pyenv-installer.. I've opened #1123 for issue templates. I think this issue doesn't make any sense anymore. Closing.. * It might be better to add .github/CONTRIBUTING.md too but I ran out of time this time with just preparing issue templates. I may be going to try in another chance.\n* I want to add something like this as some enhanced request, but it might be too much for most cases... \ud83e\udd14 \n  * If your issue was on GNU/Linux, please consider preparing minimum reproducible environment with using Docker.. Thanks for correction :+1:\nI think it's just okay to merge this now. We can revise it later as needed.. I confirmed we need this to deal with https://github.com/pypa/pip/issues/4528 This is harmless since other part of the script is not relying on the variable.. Hmm, I think you're correct. At present, python-build cannot handle quoting/whitespace within PYTHON_CONFIGURE_OPTS correctly \ud83d\ude1e \nAs a tentative workaround to deal with the situation, declaring PYTHON_CONFIGURE_OPTS_ARRAY within custom build definition might work.\n\nCopy the definition to your custom location\nyou can also find it on your local filesystem at $(pyenv root)/plugins/python-build/share/python-build/2.7.14\n\n\nPrepend the following line at the top of the build definitino\nPYTHON_CONFIGURE_OPTS_ARRAY=(\"--with-tcltk-includes='-I/usr/local/opt/tcl-tk/include'\" \"--with-tcltk-libs='-L/usr/local/opt/tcl-tk/lib -ltcl8.6 -ltk8.6'\")\n\n\nCall pyenv install with specifying the custom build definition (e.g. pyenv install -v ./2.7.14)\n. With current implementation, it'll always pick up the first found preferred HTTP client on the system. And, aria2c is at the top.\n\nhttps://github.com/pyenv/pyenv/blob/v1.2.2/plugins/python-build/bin/python-build#L331-L345\nIntroducing some new environment variable like PYTHON_BUILD_HTTP_CLIENT=\"curl\" might help users to deal with the situation like aria2c on FreeBSD. As a happy side effect, it might help simplifying some bats tests of python-build for most cases.\nhttps://github.com/pyenv/pyenv/blob/v1.2.2/plugins/python-build/test/build.bats#L11. I've merged #1146 into master. With using the latest revision, now PYTHON_BUILD_HTTP_CLIENT=curl will let python-build to use the preferred HTTP client on your system.. As a quick workaround , declaring GET_PIP_URL on calling pyenv install will let python-build to use get-pip.py at the given URL. As long as the URL is returning correct response, it should work.\nhttps://github.com/pyenv/pyenv/blob/v1.2.2/plugins/python-build/bin/python-build#L1807\nFor intrinsic fix, for non-CPython distributions, it's actually not easy to know if the Python compatibility version is 2.6/3.2 or not, prior to the installation of the version. I think it's nearly safe to assume/regard most of those non-CPython distributions as kind of edge cases, though.\nAnyway I think that changing get-pip URL for older Pythons is a kind of tentative workaround and will not live longer. I think that pinning pip version within the build definition of 2.6/3.2 must be the right way to deal with the situation. We're doing similar for some ancient versions like 2.5.x.\nhttps://github.com/pyenv/pyenv/blob/v1.2.2/plugins/python-build/share/python-build/2.5.6#L4-L5\n. @hokuto-k sure, thanks for your help!\n\nBTW, the following part won't work if version is bigger than 8.0.0:\nhttps://github.com/pyenv/pyenv/blob/master/plugins/python-build/bin/python-build#L2120-L2123\nbecause get-pip.py has been moved to its own repos.\n\nCorrect. I also confirmed it doesn't work with 8.0.1+. Allowing users to override GET_PIP_URL would still make some sense, but at least the PIP_VERSION part isn't worth anymore. Maybe I'm going to tweak the code around there later.. @joshfriend sorry for delay. I've finally made some changes on custom GET_PIP_URL for 2.6.x as #1131. Please have a look when you get some chance for it~. I've merged #1131 as some tentative workaround for CPython 2.6, 3.2 and 3.3. As some intrinsic fix for the problem, pinning pip version for these Pythons must be still better idea to deal with the situation.. So far it's working good enough at least for me. I gonna just merge this nowl. Issue tracker isn't your question forum. Closing this since this issue is totally ignoring issue template.. I think running rehash in background will lead to non-deterministic result since there might be multiple callers of rehash in the wild. It must become the source of race conditions.\nIf you really want to avoid running rehash in foreground, it'd recommend you to have some single background process that runs rehash periodically, then add --no-rehash to avoid calling rehash from foreground process.. duplicated https://github.com/pyenv/pyenv/issues/106. In general, pyenv doesn't care the packages installed within specific Python version. It sometime manages some symlinks (e.g. pip3 -> pip) to make shim script works better with pyenv, though. Totally this is some issue in pip itself, not pyenv.. At least I can say it is some expected behavior with current code. pyenv's shim script is implemented to pick up local version from first file argument if exists. I think picking up .python-version from script's installation location would be reasonable at some extent, but might not be intuitive for some cases \ud83e\udd14 \nThis behavior was originally derived from rbenv.\n. The shebang line of \"#!/usr/bin/env python\" should let sh to pick up \"python\" executable from PATH. At least the shebang just working fine in my environment with pyenv. And, it looks like you have sane PATH configuration at least for pyenv. At moment I have no idea :(. At moment it's some expected behaviour that pyenv to pick up python version from the script file directory. It might not be intuitive for some cases, though. There are several similar issues e.g. https://github.com/pyenv/pyenv/issues/1150. As far as I could test the behavior, 3.7.1 built by pyenv was linked against OpenSSL built by pyenv, without applying your patch. Am I misunderstanding something around the problem? \ud83d\ude15 \nsh\n% cat ./3.7.1-ossl\ninstall_package \"openssl-1.0.2k\" \"https://www.openssl.org/source/openssl-1.0.2k.tar.gz#6b3977c61f2aedf0f96367dcfb5c6e578cf37e7b8d913b4ecb6643c3cb88d8c0\" mac_openssl\ninstall_package \"Python-3.7.1\" \"https://www.python.org/ftp/python/3.7.1/Python-3.7.1.tar.xz#fa7e2b8e8c9402f192ad56dc4f814089d1c4466c97d780f5e5acc02c04243d6d\" ldflags_dirs standard verify_py37 ensurepip\n% pyenv install -v ./3.7.1-ossl\n( ... snip ...)\n% otool -L \"$(pyenv root)/versions/3.7.1-ossl/lib/python3.7/lib-dynload/_ssl.cpython-37m-darwin.so\"\n/Users/yyuu/.pyenv/versions/3.7.1-ossl/lib/python3.7/lib-dynload/_ssl.cpython-37m-darwin.so:\n        /Users/yyuu/.pyenv/versions/3.7.1-ossl/openssl/lib/libssl.1.0.0.dylib (compatibility version 1.0.0, current version 1.0.0)\n        /Users/yyuu/.pyenv/versions/3.7.1-ossl/openssl/lib/libcrypto.1.0.0.dylib (compatibility version 1.0.0, current version 1.0.0)\n        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1252.50.4)\nNote that I was on macOS High Sierra.\n% sw_vers\nProductName:    Mac OS X\nProductVersion: 10.13.6\nBuildVersion:   17G3025. Hmm, yes I had it in /usr/local and some part of build process might be referring it (during build time only, I guess)\ud83e\udd14 . The only reason why we are using find(1) there is that we needed to exclude \"patches\" directory from the output. The easiest and sufficient workaround might be just applying \"grep -vx patches\" to ls(1) output.. closing as this is not a pyenv's issue. At least I believe that python-build should pick up openssl built by homebrew on macOS by default. For now I have no idea if there is some difference beteeen openssl 1.0 and 1.1. I may gonna try reproducing it later. (IIRC \"--with-openssl\" might work with 3.7+ only anf it might be the cause of the issue \ud83e\udd14 \nhttps://github.com/pyenv/pyenv/blob/master/plugins/python-build/bin/python-build#L1494. jfyi, I'm using pyenv with OpenSSL 1.1 on my Debian GNU/Linux box. As you can find in the python-build, this issue is macOS specific.\n% ldd \"$(pyenv root)/versions/3.7.0/lib/python3.7/lib-dynload/_ssl.cpython-37m-x86_64-linux-gnu.so\"\n        linux-vdso.so.1 (0x00007fff133fa000)\n        libssl.so.1.1 => /usr/lib/x86_64-linux-gnu/libssl.so.1.1 (0x00007fa0e5198000)\n        libcrypto.so.1.1 => /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1 (0x00007fa0e4eb0000)\n        libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007fa0e4e8f000)\n        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007fa0e4cce000)\n        libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007fa0e4cc9000)\n        /lib64/ld-linux-x86-64.so.2 (0x00007fa0e5260000). Generally speaking, management of libraries (including a tool that manages libraries) is a responsibility of users. I think, doing too much into ensurepip would be overkill, or, it will come up as extra maintainance cost which we cannot pay for. Let's ask users to do upgrade of pip as needed.. @chrahunt btw, I've sent you some invitation to the pyenv team, since I believe you have good understanding on the behaviour of the software. Please don't feel stressed by this because we're just poor FOSS team on this small planet :trollface: If you don't prefer to join, please leave the invitation as is, or let me know. Thanks in advance~. We have once tried to support PyPI as https://github.com/pyenv/pyenv-installer/pull/16 (thanks to @obestwalter ). However, we ended up to abandon the approach since it just added extra complexity and dependencies more than benefit. I don't mean supporting PyPI is worthless, but I would never prefer this to be merged into the pyenv's main repo.. > configure: error: C compiler cannot create executables\nThis isn't pyenv's issue. It seems your installation of Command Line Tools for Xcode is somehow corrupted. I'd recommend you to (re)?install it to fix the compilation issue (especially if you upgraded your macOS recently).. As you can find from pyenv-init itself, it only supports POSIX sh, bash, ksh and fish. It'd be theoretically possible to extend the script to support*csh, but it doesn't have any code for the shell so far.\nhttps://github.com/pyenv/pyenv/blob/v1.2.9/libexec/pyenv-init#L47. At first glance, I thought it might be because modification on os.environ was read-only because of platform's restriction, however, it seems it's not the case \ud83e\udd14  I guess, there's some weird shell configuration in shell's configuration file and it is causing some issue, but I'm not sure. I don't believe this is really an issue of pyenv itself.\n$ python -c 'import os, subprocess as s; os.environ[\"PYENV_VERSION\"] = \"3.6.6\"; print s.check_output([\"pyenv\", \"which\", \"py.test\"], shell=False)'. Thanks for making changes :+1:\nbtw, I've been thinking what should happen if,\n\nOpenSSL releases newer than 1.1 have been released\nHomebrew's openssl has been upgraded to install some version newer than 1.1\n\nWith current code, it will always prefer 1.1 over the default openssl of Homebrew. I don't think it's the right behavior, however, in fact, I don't have other better workaround for now. So far I've been waiting for Homebrew to upgrade their default OpenSSL version, but it may gonna require extra time to finish the upgrade. It might be time for us to consider adding this kind of temporary workaround.... \ud83e\udd14 . Please don't just discard original CONFIGURE_OPTS.\n. AFAIK, the bz2 module has been added from CPython 2.3. The test for bz2 module should not be removed.\n. Please write in single line. PYENV_PREFIX_PATH=\"${PYTHON_PATH%/bin/*}\"\n. The ${PYENV_ROOT}/shims might be appeared at the first or last in the $PATH. Plus, the variable declaration of _path should be surrounded with \"\" to avoid unwanted argument expansion.\n. Please keep original patch and create new patch as 002_tkinter.patch or so.\n. It's necessary to install pip during pyenv install. Adding ensurepip runs python -m ensurepip after building of CPython.\nhttps://github.com/yyuu/pyenv/blob/db6a41c90fd028889bd781347f26af27a7ea4e69/plugins/python-build/bin/python-build#L1501\n. Isn't this line \"pypy-2.5.1-linux_i686-portable\"?\n. Please add surrounding quotes.\n. I though that this can be replaced by pyenv's build_package_ensurepip since it'll try to run \"$PYTHON_BIN\" -m ensurepip first. It wasn't working as I expected, though.\nI'm still not sure why we need to call $PYTHON_BIN explicitly, but I confirmed this is working :+1:\nhttps://github.com/yyuu/pyenv/blob/50d5de473168ba159b9035ee592a937c68461bf3/plugins/python-build/bin/python-build#L1532\n. @ipfans could you update openssl to 1.0.1q?\nhttps://github.com/yyuu/pyenv/blob/2767461235c6d1305c26f43948c15543c75f7d3a/plugins/python-build/share/python-build/3.5.0#L2\n. Ah, good catch. I'll fix the code to not to use temporary file.\n. I guess what you need to test here is [ -e \"${PREFIX_PATH}/bin\" ]. mv -f won't fail even if there's existing ${PREFIX_PATH}/bin.orig.\n. I overlooked that there [ -e \"${PREFIX_PATH}/bin\" ] exists at L1471.... Obviously we don't need to duplicate the line.\n. Please update the version in comment as pypy2-5.4.1-src.\n. Please create pyston_architecture() as a wrapper (or an alias) of pypy_architecture(). It'd be just better to avoid reusing PyPy utility for Pyston.\n. I don't think we need separate definitions of pyston-0.5.1 and pyston-0.5.1-numpy. Just make pyston-0.5.1 as \"battery included\" at least for now.\n. @Samureus s/pypy_architecture/pyston_architecture/\n. Because verify_py35 is commented out, it seems that installed version doesn't have python symlink in it. I guess you commented it out as a workaround of some module error.\nTo just create python symlink, adding symlink_version_suffix might work.\nhttps://github.com/yyuu/pyenv/blob/635d83e26c5eed56e8420718423eb3eb08e76674/plugins/python-build/bin/python-build#L1482-L1521\n. IIRC you don't have to specify multiple versions in single line. It should accept one version per line in .python-version.\nhttps://github.com/yyuu/pyenv/blob/master/libexec/pyenv-version-file-read#L13. It seems SHA2 of both tar.gz and tar.xz are configured as same. I think at lease one checksum is wrong.. good catch :+1:. This should be $(pyenv root)/version. Wouldn't it be better to check length of (commandline -opc)like zsh completion's doing? In case of (commandline -opc) == 2, I guess it should return (pyenv commands) instead of (pyenv completions (command -opc)[2..-1]). Please see also zsh's implementation.\nhttps://github.com/yyuu/pyenv/blob/f36d735e27a7619da02a4bb45c9b4a4958b5a888/completions/pyenv.zsh#L11-L15. Ah, understood. LGTM :+1:. It seems pyston's binary is linked against libreadline6 and libssl1.0.0. I couldn't run it on my Debian GNU/Linux sid box. It might be better to add require_distro to show warnings on unsupported distro versions.\nhttps://github.com/pyenv/pyenv/blob/d1ff898a2bfbe44d74bf92c2b6c9f7652b1d3aaa/plugins/python-build/share/python-build/pypy2-5.6.0#L3. It seems pyston executable is linked against so many libraries.\n% ldd pyston\n        linux-vdso.so.1 (0x00007ffe583f7000)\n        libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007fdb6eaa8000)\n        libz.so.1 => /lib/x86_64-linux-gnu/libz.so.1 (0x00007fdb6e88e000)\n        libreadline.so.6 => /lib/x86_64-linux-gnu/libreadline.so.6 (0x00007fdb6e644000)\n        libsqlite3.so.0 => /usr/lib/x86_64-linux-gnu/libsqlite3.so.0 (0x00007fdb6e33c000)\n        libgmp.so.10 => /usr/lib/x86_64-linux-gnu/libgmp.so.10 (0x00007fdb6e0b9000)\n        libmpfr.so.4 => /usr/lib/x86_64-linux-gnu/libmpfr.so.4 (0x00007fdb6de50000)\n        libssl.so.1.0.0 => not found\n        libcrypto.so.1.0.0 => not found\n        libutil.so.1 => /lib/x86_64-linux-gnu/libutil.so.1 (0x00007fdb6dc4d000)\n        liblzma.so.5 => /lib/x86_64-linux-gnu/liblzma.so.5 (0x00007fdb6da27000)\n        librt.so.1 => /lib/x86_64-linux-gnu/librt.so.1 (0x00007fdb6d81f000)\n        libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007fdb6d619000)\n        libtinfo.so.5 => /lib/x86_64-linux-gnu/libtinfo.so.5 (0x00007fdb6d3ef000)\n        libatomic.so.1 => /usr/lib/x86_64-linux-gnu/libatomic.so.1 (0x00007fdb6d1e7000)\n        libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007fdb6cee3000)\n        libstdc++.so.6 => /usr/lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007fdb6cb61000)\n        libgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007fdb6c94a000)\n        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007fdb6c5aa000)\n        /lib64/ld-linux-x86-64.so.2 (0x000055748da7a000)\nActually the pyston executable won't run even on Ubuntu 16.04 if some of runtime dependencies are missing. Let's just show some warning about binary compatibility issue. I don't think installing every dependencies isn't worth doing.. Please fix a mistake in CHANGELOG.md when you get a chance. Then I will merge this. Thanks for contribution~. \ud83d\udc4d . It seems that download URL is https://bitbucket.org/squeaky/portable-pypy/downloads/pypy-5.8-linux_x86_64-portable.tar.bz2 , not pypy-5.8.0-linux_x86_64-portable.tar.bz2. It seems that the download URL need to be fixed as https://bitbucket.org/squeaky/portable-pypy/downloads/pypy3.5-5.8-beta-linux_x86_64-portable.tar.bz2. The anchor to the section must be #how-to-switch-python-versions. 1. The existence of pyenv executable doesn't mean we can skip pyenv-init. We can skip pyenv-init only if it has already source'd (=~ pyenv function exists in current shell)\n1. $PYENV_ROOT may not be declared unless pyenv-init has source'd. It'd be better to use pyenv root since it must work as long as $PATH has set up\nIf you really want to avoid sourcing pyenv multiple times, what you really need to do must be follows. I'm not sure if it worth doing this like this though.\nsh\nif ! declare -f pyenv 1>/dev/null 2>&1; then\n  eval \"$(pyenv init -)\"\nfi. If so, what you need to do before pyenv init is to check the availability of pyenv command. I think relying on PYENV_ROOT here could not be a good idea since not all people are setting it.\nsh\nif command -v pyenv 1>/dev/null 2>&1; then\n  eval \"$(pyenv init -)\"\nfi. At least for this specific case, what we need to do is not checking out git tag, downloading archive of the tagged release, in my opinion. We can download the archive of v1.9.3 from https://github.com/micropython/micropython/releases/download/v1.9.3/micropython-1.9.3.tar.gz. I think just checking with [ ! -d \"${PYENV_DIR}\" ] must be sufficient here.. Just in case, please add quoting around the $(...).\nsh\nPYENV_DIR=\"$(cd \"$PYENV_DIR\" && echo \"$PWD\")\". I should have followed the discussion little more.... Anyway it's good enough to me to proceed for merging~. Honestly speaking I prefer to perform checking beforehand. However, the condition here is not appropriate anymore since it's not checking aria2c.\nAt least I can say that to check the availability of wget only if it is going to be used is the appropriate behavior.. The * case looks like it is assuming the system is very similar to Linux.... To add support for Solaris/Illumos, I prefer to add a case condition for Solaris.. Just in case, please add || true to getconf command line.. It seems that require_distro can take multiple arguments to require any of given patterns.... We must be able to just append xenial after the trusty here.\nhttps://github.com/pyenv/pyenv/blob/66412f556db1e352679b144ec17bb36bf55d3ee6/plugins/python-build/share/python-build/pypy2-5.3.1#L3. ditto. There's some code for (pseudo) multi-process locking in pyenv-rehash. In general, it'd be better to avoid having code for similar purpose in multiple places. \nhttps://github.com/pyenv/pyenv/blob/a8e207f330509b12724454b1dd38dcc31193212f/libexec/pyenv-rehash#L13-L27\nPlease modify the code around the noclobber to,\n\nUse flock or shlock if it is available on the platform (otherwise, fallback to noclobber)\nWait until the release of lock instead of immediate exit as error\n\nFor now it's immediately existing as error if there's another pyenv-rehash process is running. However, it must be some understandable behavior to wait until the release of lock since there're some of internal calls of pyenv-rehash within pyenv and they're actually NOT expecting pyenv-rehash to fail.. The release of lock need to be done as a EXIT trap (e.g. trap release_lock EXIT) to make sure the lock is released at the end of the script.. Could you add SHA256 checksum of this archive like other definitions...?\nhttps://github.com/pyenv/pyenv/blob/v1.2.2/plugins/python-build/share/python-build/3.6.4#L5. ditto. ditto. ditto. This will return \"pwd\" if \"$path\" is /. At least it must not be the correct return value of the function.. I think some fix like following will work sufficiently. Please consider adding tests for it.\n```sh\nwhile [[ \"$path\" == \"/\" ]]; do\n  cd \"${path%/}\"\n  local name=\"${path##/}\"\n  [ -n \"$name\" ] || break\n  path=\"$(resolve_link \"$name\" || true)\"\ndone\npwd\n```. Honestly speaking, I don't have correct words for explanation of this warning.... \ud83d\ude25  Could someone have any idea on this?. POSIX's sleep(1) doesn't support subsecond. It'd be better to regard 1 second as the minimum sleep duration.\nhttps://www.unix.com/man-page/posix/1P/sleep/. At least I don't think it's good idea to hardcode fd of lock file in the script..... In my understanding, this lock relies on the file at $LOCK_FILE_PATH and there might be possibility of unwanted unlock by deletion of the file at the path. I think it's effectively similar as current pseudo lock mechanism based on noclobber.. This effectively skips rehash test on Travis CI, etc. It's not good at least.. Wouldn't it be better to keep the @test for this test and comment out the code instead of deletion...? I'm afraid that the deletion will delete the history as well and it'll be easy to make the merge mistake again \ud83e\udd14 . Maybe I'm missing spme context, but how it should behave if there are multiple versions in PYENV_VERSION and the \"system\" appeared in the middle...?. It seems \"--with-openssl\" has been added since 3.7. I suspect this could make build of older versions failimg \ud83e\udd14 \nhttps://bugs.python.org/issue21541. Is the checksum a SHA256...? It looks like shorter than expected \ud83e\udd14 . \"3.8-dev\" \ud83e\udd14 \nThis would mean pyenv CI will start failing if something bad has been pushed to CPython HEAD. Wouldn't it be sufficient to test some newer released version of CPython, e.g. 3.7.2....?. What is this for...?. If what you are trying to do here is to print out build log, I think passing \"--verbose\" to python-build would be more reliable than this hack \ud83e\udd14 . \ud83d\udc4d . Gotcha. At least I am okay to run test against 3.8-dev, and, with it we might be able to know potential issues with new release proactively.. Ah, I guess I wasn't understanding what's going on there \ud83d\ude05 Since python-build is invoked via bats, to see the output $output has to be printed.... Okay, now everything is clear (to me) and I'm totally okay with current configurations. Thanks for explanation!. ",
    "masudak": "Oh, really... I would to check my environment. Thank you.\n. ",
    "OiNutter": "I've already done the formula for it, that's how I installed it on my system. I just need to submit it to homebrew, happy to do that for you. I think I just need to fix it so it is actually picking up the plugins, probably why the pyenv install isn't working.\n. Yeah, I just needed to configure my PYENV_ROOT value correctly\n. Submitted to homebrew for inclusion https://github.com/mxcl/homebrew/pull/17229\n. Oops, your message came through as I submitted mine, will check yours out, mine is just a copy of the rbenv formula.\n. Ok, well your pyenv formula looks pretty much the same as mine, but your extra python build formula is definitely worth having, I'll retract my pull request and let you submit yours, pointless having 2 for the same thing.\n. Note, add a file listing for pyenv to your pull request. They asked for it on mine.\n. Yep, fixed it for me! Thanks!\n. ",
    "sidwood": "That did the trick for me thanks. \nI had readline installed but I guess it wasn't linked. \n. Thanks \ud83d\udc4d . ",
    "hector": "Thank you!\n. ",
    "ghost": "I've done a bit of research and testing, something along the following lines should fix it (Replacing the exec line in the shim), however I don't know the code for \"sub\"-sourcing a file:\nbash\nif [ \"$_\" != \"$0\" ]; then\n  # Source actual file here\nelse\n  exec \"/home/xeross/.pyenv/libexec/pyenv\" exec \"$program\" \"$@\"\nfi\nTested in zsh, should work in bash and korn\n. Sorry for not responding, I'll give it a spin right now.\n. Seems to work as intended, thanks\n. Something is very wrong... or you should clearly state 'this only works with Homebrew installations'\nOk... to start with... I don't (and won't) use Homebrew. (I had a very, very, very bad experience with it.)\nI installed python 3.4 from the pkg installer from the python site, which puts python3 in /usr/local/bin/ as python3. (The install location cannot be changed.)\nThe default python installation is in /usr/bin/ as python.\npyenv versions only showed the 'system' version in /usr/bin\nI couldn't figure out how to get the python 3.4 version added to the versions directory, and so it appeared that the rehash command wouldn't do anything.\nI tried this and that, and something else... then finally the following:\n- I added a ~/.pyenv/versions/3.4 dir ... rehash did nothing but versions showed the new version\n- I added a link -s /usr/local/bin ~/.pyenv/versions/3.4/bin ... rehash still did nothing\n- I then added a links -s /usr/local/bin/python3.4 /usr/local/bin/python ... finally...rehash created a bunch of links in the shim directory!\n- It put a soft link for everything in that dir in shims including non-python commands (to me this is bad juju)\nAt this point I don't see a benefit of pvenv over changing my path to have /usr/local/bin in front of /usr/bin\n. @yyuu pyenv is awesome, thanks.\nAlso for posterity, I thought I'd write up a small guide about what's happening here:\nfish\nstatus --is-interactive; and . (pyenv init - | psub)\nFirst, status --is-interactive sets the exit $status code to 0 (true) if the terminal is interactive.\nAs for the -, at least in Unix parlance, - means standard input, but pyenv uses it instead as a silent flag to skip printing a help message that explains how to add pyenv to your profile AFIK.\nNow, psub is used for process substitution. Let me explain this via an example, say you want to diff two files:\nfish\ndiff file1 file2\nbut rather use a string like:\nfish\necho $string | diff file1 -\nand with two strings:\nfish\ndiff (echo $s1 | psub) (echo $s2 | psub)\nand translated to bash:\nbash\ndiff <($s1) <($s2)\nIn . (pyenv init - | psub), `.' (a wrapper around the source builtin) will receive whatever comes out of pyenv init - as input.\n. evaluates (parses) the output produced by pyenv init..., which is different from spawning a new process and running the output. \n\n\u26a0\ufe0f  . is deprecated, please use source from now :)\n\nThis, among other things, creates the directories at $PYENV_ROOT/shims, $PYENV_ROOT/versions and sets up pyenv environment.\n. @sooheon Yes, use source please.\n. is history now :)\n. @sooheon Hmm. Can you post the error?\nYou are using the fisherman plugin right?\n. If you run into other issues, please create an issue in the plugin's repo, fisherman's issue tracker or just contact me directly. Happy fishing! :)\n. The posted solution on this issue did not work for me:\nERROR: The Python ssl extension was not compiled. Missing the OpenSSL lib?\nHonestly the approach that this project has taken of shying away with dealing with these problems has simply pushed the problems downstream. And pyenv is in fact the only way on installing Python onto CI containers.. I have a desktop running Ubuntu 14.04 LTS x86_64 (Beta release) and a laptop running Ubuntu 13.10 x86_64. On Ubuntu 13.10, GNU Readline default version is 6.2 and on Ubuntu 14.04, Readline 6.3 is default version. I have installed Readline from official Ubuntu repositories on both machines (libreadline6-dev package).\nOn Ubuntu 13.10 with Readline 6.2, the installation was ok. I downgraded Readline 6.3 on Ubuntu 14.04 to Readline 6.2 and the installation was ok to. \nI found this Readline 6.3 bug report on GNU list:\n- http://lists.gnu.org/archive/html/bug-readline/2014-03/msg00004.html\nI think the problem really is 6.3 version. I got the same error that was reported.\nHere is the output of 3.2.5:\n- https://gist.github.com/geekrrr/f17a1e86f7437c47aba8/#file-python3-2.5-readline6.3.md\n. I got it.\n. requires JDK 7\n. setuptools 4.0.1 is removed.\nhttps://pypi.python.org/pypi/setuptools\nI'll fix it soon.\n. I fixed in about an hour.\n. I fixed this.\n. @nathanielvarona \nThank you.\nSetuptools 5.0 has been released.\nI have been modified to use the setuptools 5.0.\n. I sent pull request to homebrew.\n. @lostinplace\nPull request has been merged.\nPlease try again.\n. This has been fixed in 3169a4894b8a57d91b196ecd7848b37baa71b5e6.\n. I tried to install the CPython 2.7.7 in an environment of CentOS 6.5 and OS X Mavericks.\nAs a result, I was able to install successfully.\nThis fix, pyenv will not be affected by the modification of setuptools and pip.\nI think it's a good thing.\n. This has been fixed in 6697437d1a48ab9350bb1fef8d4b1c7bc14e2c24.\n. This has been fixed in ade2bf2a0da0ea7774b4e7dda6572f84caf25916.\n. @yyuu Is it this error?\nhttps://bitbucket.org/pypa/setuptools/issue/106/ez_setuppy-fails-because-of-insecure-ssl\n. This has been fixed in 22f4218522de9125ead3a1b3d0e2917100c8f927.\n. @yyuu Thank you for advice!\n. Stackless mailing list\n[Stackless] MacOS build error\nhttp://www.stackless.com/pipermail/stackless/2014-April/006304.html\n[Stackless] MacOS build error and merges\nhttp://www.stackless.com/pipermail/stackless/2014-April/006310.html\n[Stackless] Stackless on macos x\nhttp://www.stackless.com/pipermail/stackless/2014-May/006338.html\n\nUse the same compiler that is used by Python.  Use the same revision\ntags as Python but with the added 'slp'.\n\nBitbucket stackless\nhttps://bitbucket.org/stackless-dev/stackless/downloads\nI change it to build from v3.3.5-slp.\n. I can install Stackless 3.3.5 on OS X Yosemite GM Candidate 2, Ubuntu 14.04 32bit and CentOS 6.5 64bit.\n. That may be true, but Python 2.7's is a symlink. I was hoping to be able to invoke python-config regardless of Python version (adding Python bindings via swig to a C library).\n. > I believe, pyenv isn't just for OS X, and /usr/local isn't just for $USER.\n@yyuu So, who is it for then? \n. I don't know if I would say still very common, but yeah, it's definitely not unheard of. \n. Apparently everything was solved reinstalling for the 10th time, using this settings in the .bash_profile:\nexport PATH=\"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\"\nexport PYENV_ROOT=\"$HOME/.pyenv\"\nexport PATH=\"$PYENV_ROOT/bin:$PATH\"\neval \"$(pyenv init -)\"\nafter removing the ~/.pyenv folder.\nAlso, I suggest using this alias alias brew=\"env PATH=${PATH/\\/Users\\/(yourusername)\\/\\.pyenv\\/shims:/} brew\" to remove this kind of warnings when running brew doctor:\n``\nWarning: \"config\" scripts exist outside your system or Homebrew directories../configure` scripts often look for *-config scripts to determine if\nsoftware packages are installed, and what additional flags to use when\ncompiling and linking.\nHaving additional scripts in your path can confuse software installed via\nHomebrew if the config script overrides a system or Homebrew provided\nscript of the same name. We found the following \"config\" scripts:\n/Users/toniogela/.pyenv/shims/python-config\n  /Users/toniogela/.pyenv/shims/python2-config\n  /Users/toniogela/.pyenv/shims/python2.7-config\n  /Users/toniogela/.pyenv/shims/python3-config\n  /Users/toniogela/.pyenv/shims/python3.4-config\n  /Users/toniogela/.pyenv/shims/python3.4m-config\n```\nPeace!\n. Pip was updated with:\npip install --upgrade pip\nI tried pyenv rehash and it gave me nothing.\n. Here's pyenv which pip\n```\nyenv which pip\npyenv: pip: command not found\nThe `pip' command exists in these Python versions:\n  2.7.9\n```\nAnd pyenv whence pip2.7:\n2.7.9\nAnd pyenv versions gives:\nsystem\n  2.7.9\n* 3.4.3\nThere's no pip3 at all in .pyenv/versions/3.4.3:\n~/.pyenv/shims ls -l | grep pip\n-rwxr-xr-x  75 aaa  staff  419  9  1 14:27 pip\n-rwxr-xr-x  75 aaa  staff  419  9  1 14:27 pip2\n-rwxr-xr-x  75 aaa  staff  419  9  1 14:27 pip2.7\n. I tested upgrading pip under python verison 2.7.9 with\npip install --upgrade pip\nand it gave me a success upgrade, i.e. pip is callable.\n. Thank you yyuu :), I reinstalled python 3.4.3 and everything is fine now.\n. I also have this problem.Anyone can help?. ",
    "draftcode": "Thank you! I just appended the option to the end of CONFIGURE_OPTS. Is it okay?\nI noticed I hadn't added a help and now I did.\n. ",
    "ferhtgoldaraz": "Ok, thanks. It may very well be system specific. If you choose to add the check in, i've found that\ntest -z \"$(mount | grep -e /tmp*(*noexec*))\"\ncould work. Close this issue if you think it's unnecessary. Making /etc noexec is recommended by some, like \"Securing Debian Manual\", it seems.\n. I'm going to close this because I no longer rembember enough about it :)\nLet's assume that it's a problem with the environment an not pyenv. ",
    "Azd325": "I have an Arch Linux\n2.7.4 and 2.6.6 are also working for me but the whole 2.5 row not\n. Do you want to have my complete error log?\n. Yep.  I have subversion installed.\nIs the subversion version to high? \n. Or what can be the reason? \n. But thanks for the help\n. ",
    "reversefold": "Yep, that branch allows me to install jython-2.5.0 and jython-2.5.1.\n. :-) Thanks for the work.\n. ",
    "hrzhu": "hmm... thanks for your investigating, but I still fail to compile after applying your patch and that doesn't explain I can compile with pyenv disabled.\n. To be precise, after applying your patch I can now compile with a python installation other than the system one(like 2.7.4 installed by pyenv), but I can't compile with the system python installation(after applying pyenv shell system) or in a virtuanenv created by pyenv-virtualenv.\n. Thanks @yyuu, you made my day!\n. ",
    "momenezes": "Hi,\nIn spite of this being a old thread, I had the same problem trying to compile py2cairo from git in my kubuntu 14.04 using virtualvenv.\n  The above solution still didn't solve the problem of python2.7-config returning 1:\nChecking for program python2.7-config    : /usr/bin/python2.7-config \ncommand ['/home/mario/progs/python/venvs/science/bin/python', '/usr/bin/python2.7-config', '--includes'] returned 1\nMy solution was to use autogen.sh as suggested in the INSTALL. \n```\n$ python -c \"import sys; print sys.prefix\"\n/home/mario/progs/python/venvs/science\n$ ./autogen.sh --prefix=/home/mario/progs/python/venvs/science\n```\nAnd, then\n$ ./configure\n $ make\n $ make install\nI had to resort to sudo make install just because other package needed to find the pycairo.h file in /usr/local/. Otherwise, the above commands did the job installing pycairo correctly. All tests passed!\nRegards\n. ",
    "keitaoouchi": "Sorry, I made a mistake with comit message...\n:ng: 2.7.4\n:ok: 2.7.5\n. ",
    "simlegate": "README.md  link?\n. ",
    "huntzhan": "@yyuu I tried to make a local mirror by cloning yyuu/yyuu.github.com, but it doesn't work. It's seems that https://github.com/yyuu/yyuu.github.com/tree/master/pythons doesn't contains any Python source package, am I right?\n. https://github.com/yyuu/yyuu.github.com/blob/master/pythons/update.sh#L50\nfor file in source/*; do\n  base=\"$(basename \"$file\")\"\n  md5=\"$(compute_md5 < \"$file\")\"\n  sha=\"$(compute_sha2 < \"$file\")\"\n  ln -f \"$file\" \"$md5\"\n  ln -f \"$file\" \"$sha\"\n  sed -i -e \"/>$base</s/^.*$/<li><a href=\\\"$sha\\\">$base<\\/a><\\/li>/\" index.html\ndone\nMaybe I could just create a source directory and download the packages manually, then run the update.sh script.\n. Thanks.\n. It works! thx.\n. @yyuu I've run a few tests on different python versions, and found out that above method doesn't work for 2.6.9. After patching file ./setup.py, the program would still try to download get-pip.py from the internet.\n. Thx. Installing Python 2.* offline is just like nightmare.\n. It's not a GFW related problem. Under the consideration of security, Internet accessing is forbidden in our production environment. Hence, I have to find a way to install all Python related stuffs offline, including specific Python versions, virtualenvs and PyPI distributions.\nBy the way, I've kind of solve above Python 2.6.* installing problem, by just waiting for curl's timeout and then patch setuptools\\pip\\... manually. \n. Thanks, solved my problem!\n. ",
    "rnhmjoj": "I have the same problem. It's not yet fixed.\nI tried installing openssl via homebrew but the problem persists.\n. @yyuu The version is version: 3.3.2. Here is the log.\n. @yyuu \nYou were probably right. The problem is another. I have just tried installing CPython 2.7 and failed. \nI get ImportError: The Python sqlite3 extension was not compiled. Missing the SQLite3 lib?\n. Yes, I am using 10.9.\nI have the two dylib in /usr/lib but the include folder is not in /usr.\u00a0\nI think is inside /Application/Xcode.app\n. I found temporary fix.\u00a0\nIn OS X 10.9 there is a /usr/include for every SDK installed.\nI made a symlink to the old path of include:\nln -s /Library/Developer/CommandLineTools/SDKs/MacOSX10.9.sdk/usr/include/ /usr/include\nand the installation succeeded.\nCan you update pyenv to check for OS X 10.9 and set the correct flags?\n. Have a look at this issue.\n. @zenweasel  I was trying to build CPython 3.3.2, not 3.3.1.\nIn my case the build failed because of the missing /usr/include in Mavericks. On Mountain Lion you should have this directory. I don't know whether the issue is the same, probably not.\n. @daenney I have just tried and it's working. \nIt seems that in the final release of Mavericks there is a /usr/include so @yyuu can close the issue now.\n. Sorry, I don't get it. What should I do exactly?\n. I have never read that wiki page.\nI made the hook and now pyenv is doing what I wanted.\nThank you again.\n. I tried env PYTHON_CONFIGURE_OPTS=\"--enable-framework\" pyenv install 3.3.2 and worked.\nBut with 3.3.3 it failed:\n```\nMichele@iMac-di-Michele > ~ % PYTHON_CONFIGURE_OPTS=\"--enable-framewok\" pyenv install 3.3.3\nConfigured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/usr/include/c++/4.2.1\nDownloading Python-3.3.3.tgz...\n-> http://yyuu.github.io/pythons/831d59212568dc12c95df222865d3441\nInstalling Python-3.3.3...\nBUILD FAILED\nInspect or clean up the working tree at /var/folders/hf/vj7ygsp10yj7dcphtylb_nvh0000gn/T/python-build.20140127001158.5308\nResults logged to /var/folders/hf/vj7ygsp10yj7dcphtylb_nvh0000gn/T/python-build.20140127001158.5308.log\nLast 10 log lines:\n/usr/bin/clang -c -Wno-unused-result -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes     -I. -IInclude -I./Include -           I/usr/local/opt/readline/include -I/Users/Michele/.pyenv/versions/3.3.3/include   -DPy_BUILD_CORE -o Objects/typeobject.o     Objects/typeobject.c\n/usr/bin/clang -c -Wno-unused-result -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes     -I. -IInclude -I./Include -    I/usr/local/opt/readline/include -I/Users/Michele/.pyenv/versions/3.3.3/include   -DPy_BUILD_CORE -o Objects/unicodeobject.o     Objects/unicodeobject.c\n/usr/bin/clang -c -Wno-unused-result -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes     -I. -IInclude -I./Include -    I/usr/local/opt/readline/include -I/Users/Michele/.pyenv/versions/3.3.3/include   -DPy_BUILD_CORE -o Objects/unicodectype.o     Objects/unicodectype.c\n/usr/bin/clang -c -Wno-unused-result -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes     -I. -IInclude -I./Include -    I/usr/local/opt/readline/include -I/Users/Michele/.pyenv/versions/3.3.3/include   -DPy_BUILD_CORE -o Objects/weakrefobject.o     Objects/weakrefobject.c\n/usr/bin/clang -c -Wno-unused-result -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes     -I. -IInclude -I./Include -    I/usr/local/opt/readline/include -I/Users/Michele/.pyenv/versions/3.3.3/include   -DPy_BUILD_CORE -o Python/_warnings.o Python/_warnings.c\n./install-sh -c -d Include\npython3.3 ./Parser/asdl_c.py -h Include ./Parser/Python.asdl\npyenv: version 3.3.2' is not installed\nmake: *** [Include/Python-ast.h] Error 1\nmake: *** Waiting for unfinished jobs....\n```\n. @yyuu Yes, I have only 3.3.3.\n. @yyuu Ok, I installed Python 3.3.2 then 3.3.3. Python built but failed to install setuptools as @jasonbrent told.\nWithPYTHON_CONFIGURE_OPTS=\"--enable-framework=$(pyenv root)/versions/3.3.3\" pyenv install 3.3.3`\nDistutils complains about the python installation: \nraise DistutilsPlatformError(my_msg)\ndistutils.errors.DistutilsPlatformError: invalid Python installation: unable to open /Users/Michele/.pyenv/versions/3.3.3/include/python3.3m/pyconfig.h (No such file or directory)\n. @yyuu I'm using pyenv version 0.4.0-20140110.1 from homebrew. Should I install the one from Github to get the changes?\n. @yyuu Now it works. I only needed the newest version. Thank you.\n. ",
    "beck": "Suggest looking into this ticket once more, was unable to install new pythons with homebrew installed openssl.\nRan into exact same problem and found this ticket:\n``` bash\n$ brew upgrade pyenv\nError: pyenv-20140211 already installed\n$ pyenv install 2.7.4\n....\nBUILD FAILED\nInspect or clean up the working tree at /var/folders/3y/7jrv6jr95fnbs9rr0vx1xwzc0000gn/T/python-build.20140212160358.97455\nResults logged to /var/folders/3y/7jrv6jr95fnbs9rr0vx1xwzc0000gn/T/python-build.20140212160358.97455.log\nLast 10 log lines:\n  File \"\", line 1, in \n  File \"/Users/doug/.pyenv/versions/2.7.4/lib/python2.7/ssl.py\", line 60, in \n    import _ssl             # if we can't import it, let the error propagate\nImportError: No module named _ssl\nThe Python ssl extension was not compiled. Missing the OpenSSL lib?\n```\nWhat worked for me:\nbash\n$ CFLAGS=\"-I$(brew --prefix openssl)/include\" \\\nLDFLAGS=\"-L$(brew --prefix openssl)/lib\" \\\npyenv install 2.7.4\n. @yina in the end I had to ditch the homebrew openssl.\nWhat ended up working for me:\nshell\nbrew uninstall openssl\nbrew upgrade pyenv\npyenv install 2.7.6\n. This recent commit looks as though openssl will be included if not available, so I would try sudo port uninstall openssl.  And if openssl is needed for other projects, use what is delivered with xcode.  Hope this helps\n. :tada: \n. ",
    "yina": "So I updated the 2.7.6 file with the changes in #22 and I still get the same error as the most recent comment from beck. Am I missing something simple. On MacOS Mavericks.\njust running \"pyenv install 2.7.6\"\n. thanks beck. I should clarify that I am using macports for which openssl is installed. I do have the latest pyenv with \"pyenv update\" with the changes I made to the 2.7.6 file. \n. @yyuu after your few comments I looked more closely about my build environment, dumb me didn't specify the LDFLAGS and CPPFLAGS correctly so it wasn't working. I updated the LDFLAGS and CPPFLAGS to\nexport LDFLAGS=\"-L/opt/local/lib\" \nexport CPPFLAGS=\"-I/opt/local/include\"\nand then ran\npyenv install -v 2.7.6\nand it worked! thank you!\n. ",
    "cackovic": "beck's fix also worked for me but I used brew's openssl\nCFLAGS=\"-I$(brew --prefix openssl)/include\" \\\nLDFLAGS=\"-L$(brew --prefix openssl)/lib\" \\\npyenv install 2.7.4\n. ",
    "esebastian": "In Yosemite 10.10.x and homebrew openssl 1.0.2d, I had to change the previous oneliner to:\nLDFLAGS=\"-L$(brew --prefix openssl)/lib\" CPPFLAGS=\"-I$(brew --prefix openssl)/include\" pyenv install 2.7.10\nIt seems that now CPPFLAGS must be used instead of CFLAGS.\n. ",
    "rohshall": "For me, I had to include LDFLAGS and CPPFLAGS for openssl, zlib and sqlite3.\n. ",
    "Conjuror": "The command to link zlib and openssl works for me: CFLAGS=\"-I$(xcrun --show-sdk-path)/usr/include\" LDFLAGS=\"-L$(brew --prefix openssl)/lib\" CPPFLAGS=\"-I$(brew --prefix openssl)/include\" pyenv install -v 3.5.0\nI just upgrade to El Capitan 10.11.\n. ",
    "gah-boh": "I'm also having this problem with ERROR: The Python ssl extension was not compiled. Missing the OpenSSL lib?\nI am running a clean install of El Capitan 10.11 instead of an upgrade. I have tried all the solutions above, the same with the wiki troubleshooting and still get the same error.\nHere is the full error (I can also put the full log in a gist if you'd like):\n```\nERROR: The Python ssl extension was not compiled. Missing the OpenSSL lib?\nPlease consult to the Wiki page to fix the problem.\nhttps://github.com/yyuu/pyenv/wiki/Common-build-problems\nBUILD FAILED (OS X 10.11 using python-build 20150818)\nInspect or clean up the working tree at /var/folders/0f/z22q_whs0v30pr8lg6b_jfxr0000gn/T/python-build.20151003143338.30855\nResults logged to /var/folders/0f/z22q_whs0v30pr8lg6b_jfxr0000gn/T/python-build.20151003143338.30855.log\nLast 10 log lines:\nrm -f /Users/gabo/.pyenv/versions/2.7.10/share/man/man1/python.1\n(cd /Users/gabo/.pyenv/versions/2.7.10/share/man/man1; ln -s python2.1 python.1)\nif test \"xno\" != \"xno\"  ; then \\\n        case no in \\\n            upgrade) ensurepip=\"--upgrade\" ;; \\\n            install|*) ensurepip=\"\" ;; \\\n        esac; \\\n         ./python.exe -E -m ensurepip \\\n            $ensurepip --root=/ ; \\\n    fi\n```\n. ",
    "stlehmann": "Same error with clean El Capitan here:\n```\nStefans-MBP:~ stefan$ pyenv install 3.4.3\nDownloading readline-6.3.tar.gz...\n-> https://yyuu.github.io/pythons/56ba6071b9462f980c5a72ab0023893b65ba6debb4eeb475d7a563dc65cafd43\nInstalling readline-6.3...\nInstalled readline-6.3 to /Users/stefan/.pyenv/versions/3.4.3\nDownloading Python-3.4.3.tgz...\n-> https://yyuu.github.io/pythons/4281ff86778db65892c05151d5de738d\nInstalling Python-3.4.3...\nERROR: The Python ssl extension was not compiled. Missing the OpenSSL lib?\nPlease consult to the Wiki page to fix the problem.\nhttps://github.com/yyuu/pyenv/wiki/Common-build-problems\nBUILD FAILED (OS X 10.11 using python-build 20150818)\nInspect or clean up the working tree at /var/folders/v5/rk06g5z94txf2fglhrk9b3y40000gn/T/python-build.20151004141807.591\nResults logged to /var/folders/v5/rk06g5z94txf2fglhrk9b3y40000gn/T/python-build.20151004141807.591.log\nLast 10 log lines:\n(cd /Users/stefan/.pyenv/versions/3.4.3/share/man/man1; ln -s python3.4.1 python3.1)\nif test \"xupgrade\" != \"xno\"  ; then \\\n        case upgrade in \\\n            upgrade) ensurepip=\"--upgrade\" ;; \\\n            install|*) ensurepip=\"\" ;; \\\n        esac; \\\n         ./python.exe -E -m ensurepip \\\n            $ensurepip --root=/ ; \\\n    fi\nIgnoring ensurepip failure: pip 6.0.8 requires SSL/TLS\n```\n. ",
    "channprj": "@MrLeeh It worked on El Capitan.\n``` shell\n$ xcode-select --install\n$ brew uninstall openssl\n$ pyenv install 3.4.0\nDownloading openssl-1.0.1p.tar.gz...\n-> https://yyuu.github.io/pythons/bd5ee6803165c0fb60bbecbacacf244f1f90d2aa0d71353af610c29121e9b2f1\nInstalling openssl-1.0.1p...\nInstalled openssl-1.0.1p to /Users/CHANN/.pyenv/versions/3.4.0\nDownloading Python-3.4.0.tgz...\n-> https://yyuu.github.io/pythons/d2c83ea0217769a73e8b1ee33ffbca814903f8568e30f8d13e68e3d1f743449c\nInstalling Python-3.4.0...\nInstalled Python-3.4.0 to /Users/CHANN/.pyenv/versions/3.4.0\n```\n. Thanks. Sometimes I forgot adding init code and visit this page. :sweat_smile:\n. ",
    "tjarbour": "Nice! After trying everything else from the 'Common build problems' wiki, Issues #448 (although didn't try copperlight's exact command), #451, all with no success, the above solution from channprj worked for me. OS 10.11, El Capitan. Thanks!\n$ brew uninstall openssl\n$ brew uninstall --force openssl\n$ pyenv install 2.7.10\nDownloading openssl-1.0.1p.tar.gz...\n-> https://yyuu.github.io/pythons/bd5ee6803165c0fb60bbecbacacf244f1f90d2aa0d71353af610c29121e9b2f1\nInstalling openssl-1.0.1p...\nInstalled openssl-1.0.1p to /Users/tylerarbour/.pyenv/versions/2.7.10\nDownloading Python-2.7.10.tgz...\n-> https://yyuu.github.io/pythons/eda8ce6eec03e74991abb5384170e7c65fcd7522e409b8e83d7e6372add0f12a\nInstalling Python-2.7.10...\npatching file ./Lib/site.py\nInstalled Python-2.7.10 to /Users/tylerarbour/.pyenv/versions/2.7.10\n. ",
    "japboy": "+1\n. ",
    "caleb": "Cool! I haven't had a chance to look at it yet. I'll give it a go in the next couple days.\n. My quick test on a lion system shows that your patch worked. Thanks!\n. ",
    "Fiveside": "Excelent, that's fixed my problem!  Thanks a bunch for your help.\n. ",
    "zenweasel": "FWIW, I am seeing issues with building the exact same versions of Python on Mountain Lion, but I get a different error:   File \"\", line 988, in get_code\nValueError: unmarshallable object\nHave two different laptops with different configurations and both fail on just those versions of Python. 3.3.1 (being that its the current stable 3.x) is the big one there.\n. ",
    "KevinSjoberg": "Yeah, this seems to be due to changes made in 10.9 to support multiple SDKs.\nI successfully installed 3.3.2 by doing CFLAGS=\"-I$(xcrun --show-sdk-path)/usr/include\" pyenv install 3.3.2.\n. ",
    "daenney": "I've had no compilation issues on Mavericks/10.9 when calling pyenv install 2.7 or pyenv install 3.3.2.\n. Anything moving on the subject?\n. It got merged!\n. ```\n16:53:25 ~ $ pyenv --version\npyenv 0.4.0-20140317\n16:53:32 ~ $ pyenv install 3.4.0\npython-build: definition not found: 3.4.0\nThe following versions contain `3.4.0' in the name:\n  3.4.0a2\n  3.4.0a3\n  3.4.0a4\n  3.4.0b1\n  3.4.0b2\n  3.4.0b3\n  3.4.0rc1\n  3.4.0rc2\n  3.4.0rc3\nYou can list all available versions with `pyenv install --list'.\nIf the version you're looking for is not present, first try upgrading\npyenv. If it's still missing, open a request on the pyenv\nissue tracker: https://github.com/yyuu/pyenv/issues\n```\n. ",
    "leighmcculloch": "The final release with the latest XCode doesn't have /usr/include. But there is an easy fix by changing your import to #import <sqlite3.h>. The compiler will automatically reference the header contained in the SDK your compiling against and there's no need to reference the SDK specifically or do any hacks like that.\n. ",
    "ansdma": "Brilliant :)\n. Looks its just my path was mixed up. Fixed by insuring that shims are before any other python paths. \n. ",
    "opscolin": "sorry about using pyevn install python after I downloaded the source package \nmy host is \"CentOS Linux release 7.1.1503 (Core) \"\nfor installation is too slow, so I downloaded the source package(Python-3.4.4.tgz via url https://www.python.org/ftp/python/3.4.4/Python-3.4.4.tgz) \nand moved it to /root/.pyenv/cache/ folder(I created by hand) and then re-try to use 'pyenv install 3.4.4' to install, but it still downloads the source package and slow too.\nso what's the problem? where did I do wrong ? or something else ?\nThanks\n. sorry~\nafter detail check and find the root problem\nwhen using pyenv install 3.4.4 -v, it showed : \nDownloading Python-3.4.4.tgz...\n-> https://www.python.org/ftp/python/3.4.4/Python-3.4.4.tgz\nso I downloaded file Python-3.4.4.tgz and moved it to ~/.pyenv/cache/ folder. it didn't work.\nbut when I checked that there was a file named Python-3.4.4.tar.gz under /tmp/python.xxxxxxx.xxxx/\nso I changed name from Python-3.4.4.tgz to Python-3.4.4.tar.gz under ~/.pyenv/cache/ folder, and re-try to install, it worked .\nThanks too.\n. ",
    "atemysemicolon": "What does echo $PYTHON_BUILD_CACHE_PATH give as output on your terminal?. ",
    "mtrovilho": "I've tested both workarounds and they worked.\nThank you!\n. ",
    "spacebuoy": "Hi,\n|Sorry, I was a little dumb on this. I see why the order of export and \ninit is important. Maybe the instructions could specify that?\nAlmost all is working as expected now!\nExcept for 3.3.x. Now when I install 3.3.0 or 3.3.2 a segmentation fault \n11 is returned. Version 3.3.2 was successfully installed with pyenv \nbefore uninstalling pyenv for the above problem. Versions 2.6.8, 2.7.5, \n3.2, 3.2.5 install okay. Any idea what is happening 3.3.x?\n\n\n\nBUILD FAILED\n\n\n\nInspect or clean up the working tree at \n/var/folders/51/k4qphs517k3c9dv55_23b6j80000gp/T/python-build.20130715090124.93494\nResults logged to \n/var/folders/51/k4qphs517k3c9dv55_23b6j80000gp/T/python-build.20130715090124.93494.log\nLast 10 log lines:\n   File \"\", line 1558, in _find_and_load\n   File \"\", line 1525, in \n_find_and_load_unlocked\n   File \"\", line 586, in _check_name_wrapper\n   File \"\", line 1023, in load_module\n   File \"\", line 1004, in load_module\n   File \"\", line 562, in \nmodule_for_loader_wrapper\n   File \"\", line 854, in _load_module\n   File \"\", line 988, in get_code\nValueError: unmarshallable object\nmake: *** [Lib/_sysconfigdata.py] Segmentation fault: 11\nThanks,\nGene\n|\n|\n\nIf you want to set |PYENV_ROOT| as |/usr/local/opt/pyenv|, it is \nbetter to declare |PYENV_ROOT| before invoking |pyenv init -|. Plus, \nif you set |PYENV_ROOT| at custom location, you should not set \n|${HOME}/.pyenv/shims| in your |$PATH| manually because it will not be \nmaintained by pyenv.\nThis issue might be a problem of rehashing of both pyenv and shell. \nTry following command if you're using bash.\n|pyenv rehash && hash -r\n|\nOr, if you're using zsh.\n|pyenv rehash && rehash\n|\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/yyuu/pyenv/issues/31#issuecomment-20947029.\n. Hi Yamashita-san,\n\nYour descriptions and disclosures about how pyenv works are excellent! \nThey are far better than the python.org option.\nGene\nOn 7/14/13 7:49 PM, Yamashita, Yuu wrote:\n\nIf you want to set |PYENV_ROOT| as |/usr/local/opt/pyenv|, it is \nbetter to declare |PYENV_ROOT| before invoking |pyenv init -|. Plus, \nif you set |PYENV_ROOT| at custom location, you should not set \n|${HOME}/.pyenv/shims| in your |$PATH| manually because it will not be \nmaintained by pyenv.\nThis issue might be a problem of rehashing of both pyenv and shell. \nTry following command if you're using bash.\n|pyenv rehash && hash -r\n|\nOr, if you're using zsh.\n|pyenv rehash && rehash\n|\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/yyuu/pyenv/issues/31#issuecomment-20947029.\n. Never mind the seg fault. This appears to be a conflict with updated gcc.\n\nMy aliases for python and ipython work as desired with your approach \nwhich sure simplifies my end.\nThanks,\nGene\nOn 7/14/13 7:49 PM, Yamashita, Yuu wrote:\n\nIf you want to set |PYENV_ROOT| as |/usr/local/opt/pyenv|, it is \nbetter to declare |PYENV_ROOT| before invoking |pyenv init -|. Plus, \nif you set |PYENV_ROOT| at custom location, you should not set \n|${HOME}/.pyenv/shims| in your |$PATH| manually because it will not be \nmaintained by pyenv.\nThis issue might be a problem of rehashing of both pyenv and shell. \nTry following command if you're using bash.\n|pyenv rehash && hash -r\n|\nOr, if you're using zsh.\n|pyenv rehash && rehash\n|\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/yyuu/pyenv/issues/31#issuecomment-20947029.\n. This worked:\n\nCC=clang pyenv install 3.3.2\nThanks,\nGene\n. Hi,\nUpdating setuptools fixed the problems with ipython. I was not expecting \nthis since I just installed the pythons.\nThanks,\nGene\n. Hi,\nOn pythons 3.2.5 and 3.3.2 the setuptools version was 0.7.2. Both were \nupgraded to 0.9.7.\nOn pythons 2.6.8 and 2.7.5 which did not have the problem the setuptools \nversions were 0.7.2 and 0.9.3 (I believe I used pycharm two weeks ago to \nupgrade setuptools on python 2.7.5 but this was after installing ipython \nsuccessfully).\nGene\nOn python 3.2.5 it was\nOn 7/23/13 9:10 AM, Yamashita, Yuu wrote:\n\n@spacebuoy https://github.com/spacebuoy\nNice! Please let me know the problematic version of setuptools.\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/yyuu/pyenv/issues/38#issuecomment-21412401.\n. \n",
    "fjarri": "I'd personally be happy if init worked, I don't really use 2 or 3. Do I understand it correctly that the primary function of init is to call rehash and add stuff to PATH, and that's what makes global/local work?\n. Thank you for the suggestion! In fish syntax it seems to be\nset PYENV_ROOT $HOME/.pyenv\nset -x PATH $PYENV_ROOT/shims $PYENV_ROOT/bin $PATH\npyenv rehash\nThe only problem is that modules that install stuff in bin do not work properly. For example, if I install yolk (a tool that generates a list of available modules), pip correctly installs it in ~/.pyenv/versions/2.7.5/lib/python2.7/site-packages/, and puts yolk executable in ~/.pyenv/versions/2.7.5/bin/, but when I call yolk from the command line, it results in the call to /usr/local/bin/yolk (the system one). \n. Oh, it seems that I did not quite understand what pyenv rehash does. Thank you, that did help, no additional shell commands were necessary.\n. Well, there's still an issue of shell and auto-completion, which may be important for some people. Plus there are some weird problems of pip running 2to3 when I install packages for Py2 and not running it when I install packages for Py3, which does not happen when I install them from their source directory (I cannot pinpoint the cause of this yet).\nBasically, what I'm saying is, the issue of me using pyenv with fish is somewhat resolved, but the issue of pyenv supporting fish is not, so use your best judgement :) I will update the wiki as soon as I resolve the pip problem.\n. For example:\n```\n~> pyenv global 2.7.5\n~> pyenv rehash\n~> pip install decorator -v\nDownloading/unpacking decorator\n  Running setup.py egg_info for package decorator\n    running egg_info\n    writing pip-egg-info/decorator.egg-info/PKG-INFO\n    writing top-level names to pip-egg-info/decorator.egg-info/top_level.txt\n    writing dependency_links to pip-egg-info/decorator.egg-info/dependency_links.txt\n    warning: manifest_maker: standard file '-c' not found\nreading manifest file 'pip-egg-info/decorator.egg-info/SOURCES.txt'\nreading manifest template 'MANIFEST.in'\nwarning: no files found matching 'documentation.py'\nwarning: no files found matching 'documentation3.py'\nwarning: no previously-included files found matching 'Makefile'\nwriting manifest file 'pip-egg-info/decorator.egg-info/SOURCES.txt'\n\nInstalling collected packages: decorator\n  Running setup.py install for decorator\n    running install\n    running build\n    running build_py\n    running install_lib\n    copying build/lib/decorator.py -> /Users/bogdan/.pyenv/versions/2.7.5/lib/python2.7/site-packages\n    byte-compiling /Users/bogdan/.pyenv/versions/2.7.5/lib/python2.7/site-packages/decorator.py to decorator.pyc\n      File \"/Users/bogdan/.pyenv/versions/2.7.5/lib/python2.7/site-packages/decorator.py\", line 158\n        print('Error in generated code:', file=sys.stderr)\n                                              ^\n    SyntaxError: invalid syntax\nrunning install_egg_info\nrunning egg_info\nwriting src/decorator.egg-info/PKG-INFO\nwriting top-level names to src/decorator.egg-info/top_level.txt\nwriting dependency_links to src/decorator.egg-info/dependency_links.txt\nwarning: manifest_maker: standard file '-c' not found\n\nreading manifest file 'src/decorator.egg-info/SOURCES.txt'\nreading manifest template 'MANIFEST.in'\nwarning: no files found matching 'documentation.py'\nwarning: no files found matching 'documentation3.py'\nwarning: no previously-included files found matching 'Makefile'\nwriting manifest file 'src/decorator.egg-info/SOURCES.txt'\nCopying src/decorator.egg-info to /Users/bogdan/.pyenv/versions/2.7.5/lib/python2.7/site-packages/decorator-3.4.0-py2.7.egg-info\nrunning install_scripts\nwriting list of installed files to '/var/folders/hq/kzp38x892h7g5nj6rr5p6d7c0000gn/T/pip-tDOBwU-record/install-record.txt'\n\nSuccessfully installed decorator\nCleaning up...\n```\nNote the syntax error. If you look into https://pypi.python.org/packages/source/d/decorator/decorator-3.4.0.tar.gz you'll see a Py2-style print statement there. If I download the sources, cd there and run pip install ., it installs correctly.\n. Upgrading setuptools did not work for me, unfortunately. I have also found some other mentions of this problem (e.g. http://code.google.com/p/sympy/issues/detail?id=3437), and it seems that it is probably something related to pip and not pyenv. I'll close this for now, since this issue is quite elusive.\n. Just for the sake of closure: the problem has been resolved by updating pip from 1.3.1 to 1.4. Sorry for blaming pyenv :)\n. Yep, everything seems to work, thank you!\n. ",
    "tiagofernandez": "I guess the initialization code for Fish is currently . (pyenv init -|psub), right?\nSince eval (pyenv init - fish) returns pyenv: no such command sh-'.\n. ",
    "lvh": "For posterity: pyenv now supports fish! Try pyenv init in a shell and it will tell you:\n```\nLoad pyenv automatically by adding\nthe following to ~/.config/fish/config.fish:\nstatus --is-interactive; and . (pyenv init -|psub)\n```\n. ",
    "aviddiviner": "@bucaran: Thanks for that awesome explanation! Taught me about how psub works.. cool!\n. ",
    "sooheon": "@brj with a recent version of fish, I'm getting source: '.' command is deprecated, and doesn't work with STDIN anymore. Did you \nmean 'source' or './'? What is the form of this incantation without using ., but source directly?\n. Sorry but my question was just about the syntax of how to do that--directly replacing . with source gives an error.\n. I am now :). I had just copy pasted the snippet above in my fish.config before. Thanks.\n. @sivel What do you mean by this? \n\nhave libffi from brew and added to CFLAGS. \n",
    "halfnhalf": "Looks like fisherman is abandoned. Any new alternatives?. Sorry, yes fisher is alive but what I meant was the pyenv fisher package is abandoned \nhttps://github.com/fisherman/pyenv. ",
    "Sphinxs": "Updates ?. Some update ? this is not working in globa scope too. ",
    "sdouche": "Fisher is alive: https://github.com/jorgebucaran/fisher. ",
    "al3xandru": "As a workaround I've installed 2.5.6 with the (now deprecated) pythonbrew and symlinked ~/.pyenv/versions/2.5.6 to that directory. I'll try out the patched version to see if it solves this issue.\n. I think I remember doing a trick and symlinking the ctypes.so to the one in the Mac OS X installation (or something like that).\n. I've pulled the latest but the build still failed:\nLast 10 log lines:\ncreating Modules/Setup\ncreating Modules/Setup.local\ncreating Makefile\n/usr/bin/gcc -c -fno-strict-aliasing -Wno-long-double -no-cpp-precomp -mno-fused-madd -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes  -I. -IInclude -I./Include -I'/Users/apopescu/.pyenv/versions/2.5.6/include'   -DPy_BUILD_CORE -o Modules/python.o ./Modules/python.c\n/usr/bin/gcc -c -fno-strict-aliasing -Wno-long-double -no-cpp-precomp -mno-fused-madd -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes  -I. -IInclude -I./Include -I'/Users/apopescu/.pyenv/versions/2.5.6/include'   -DPy_BUILD_CORE -o Modules/_typesmodule.o Modules/_typesmodule.c\ncc1: error: unrecognized command line option \"-Wno-long-double\"\ncc1: error: unrecognized command line option \"-Wno-long-double\"\nmake: *** [Modules/_typesmodule.o] Error 1\nmake: *** Waiting for unfinished jobs....\nmake: *** [Modules/python.o] Error 1\nAny other info that might help?\n. Indeed, I've tried the branch version and 2.5.6 installation worked. You\ncan close the issue. Thanks\n. Thanks. Python 2.7.5 installed. 2.5.6 fails with exact the same error--I'm totally confused why one would work and the other would fail the same step.\n. This issue can be closed. As further reference here are the dependencies I had to install:\n- libreadline-dev\n- zlib-dev\n- libbz2-dev\n- libsqlite3-dev\n- libssl-dev\n. ",
    "mehcode": "Just what I needed, thanks. Made an open-sourced plugin out of this: https://github.com/concordusapps/pyenv-implict\n. @yyuu All in my quest to get meld running in arch (rewrites the meld bin to use python2 instead of python) from within a virtualenv created by pyenv. Had to make this https://gist.github.com/mehcode/6172694 ... share the pain.\n. ",
    "jmagnusson": "I personally prefer being a bit more explicit. I have a directory ~/.pyenv-bin-overrides/ where I link bins that should be made global. My usage case is for tox to be able to find the different python versions. One example:\nbash\nln -s $(pyenv which python2.6) ~/.pyenv-bin-overrides\n. @blueyed Unfortunately I don't remember because I no longer use pyenv. Sorry.\n. ",
    "blueyed": "@jmagnusson \nI assume that you have ~/.pyenv-bin-overrides/ before the pyenv shims in your path then?\nI have noticed that pyenv which python2.6 fails already, when using 3.4.1 via ~/.pyenv/version.\n. For reference: this approach/plugin causes problems with tox (#214, https://github.com/concordusapps/pyenv-implict/issues/2).\n. Also anyenv might be an option: https://github.com/mislav/anyenv, assuming that Go on Windows works well.\nAnyenv is supposed to be the successor of rbenv, pyenv etc.\n. @edbordin \nMaybe it is easier to look into https://github.com/mislav/anyenv for this?  It has not been updated in a while, but was meant to replace rbenv/pyenv etc.. For reference: when building Vim make sure to only enable either python2 or python3, otherwise Vim's dynamic loading of python will cause Vim to pick up the system's python.\n(Or you would have to also add rpath information to Vim or use LD_LIBRARY_PATH).\n. @proofit404 \nThere are definitely issues when using pyenv and tox (see https://github.com/yyuu/pyenv/issues?q=is%3Aissue+pyenv+tox), mainly that e.g. python2.6 might \"work\", but then fails with ERROR: InvocationError: Failed to get version_info for python2.6: b\"pyenv: python2.6: command not found\\n\\nThepython2.6' command exists in these Python versions:\\n  2.6.9\\n\\n\"`\nYou need to explicitly enable the Python versions used by tox.\nHowever, the tox-pyenv plugins says at https://github.com/samstav/tox-pyenv/blob/master/tox_pyenv.py#L21-L25, which indicates a mis-setup (shims should come first):\n\nIf pyenv's shims are not at the very front of your path,\nsysfind might lookup the global system version of python\ninstead of preferring a version specified by using pyenv local\nor pyenv global. This plugin changes the way tox finds\nyour python executable to exclusively use pyenv which.\n\n@samstav\nI wonder if your plugin could help with the InvocationError, and could automatically enable the existing/installed Python versions?\n. @samstav \n\nthat's good idea... Should that be the default behavior?\n\nWould make sense to me.  Do you think it's possible after all?\nI am not sure I understand your 2nd commented addressed at me.\n. Thanks @perscitus!\nIt helped me and I've answered a SO question with it: http://stackoverflow.com/a/31299142/15690\n. Just upgraded from virtualenv 1.10.2, but still the same.\nHere is the verbose output:\n```\n$ virtualenv -v -p \"$(which python)\" bar\nRunning virtualenv with interpreter /home/user/.pyenv/shims/python\nCreating bar/lib/python2.7\nSymlinking Python bootstrap modules\nSymlinking bar/lib/python2.7/lib-dynload\nSymlinking bar/lib/python2.7/os.py\nIgnoring built-in bootstrap module: posix\nSymlinking bar/lib/python2.7/posixpath.py\nCannot import bootstrap module: nt\nSymlinking bar/lib/python2.7/ntpath.py\nSymlinking bar/lib/python2.7/genericpath.py\nSymlinking bar/lib/python2.7/fnmatch.py\nSymlinking bar/lib/python2.7/locale.py\nSymlinking bar/lib/python2.7/encodings\nSymlinking bar/lib/python2.7/codecs.py\nSymlinking bar/lib/python2.7/stat.py\nSymlinking bar/lib/python2.7/UserDict.py\nSymlinking bar/lib/python2.7/copy_reg.py\nSymlinking bar/lib/python2.7/types.py\nSymlinking bar/lib/python2.7/re.py\nSymlinking bar/lib/python2.7/sre.py\nSymlinking bar/lib/python2.7/sre_parse.py\nSymlinking bar/lib/python2.7/sre_constants.py\nSymlinking bar/lib/python2.7/sre_compile.py\nIgnoring built-in bootstrap module: zlib\nSymlinking bar/lib/python2.7/warnings.py\nSymlinking bar/lib/python2.7/linecache.py\nSymlinking bar/lib/python2.7/_abcoll.py\nSymlinking bar/lib/python2.7/abc.py\nSymlinking bar/lib/python2.7/_weakrefset.py\nCreating bar/lib/python2.7/site-packages\nWriting bar/lib/python2.7/site.py\nWriting bar/lib/python2.7/orig-prefix.txt\nWriting bar/lib/python2.7/no-global-site-packages.txt\nCreating parent directories for bar/include\nSymlinking bar/include/python2.7\nCreating bar/bin\nNew python executable in bar/bin/python\nChanged mode of bar/bin/python to 0755\nTesting executable with bar/bin/python -c \"import sys;out=sys.stdout;getattr(out, \"buffer\", out).write(sys.prefix.encode(\"utf-8\"))\"\nERROR: The executable bar/bin/python is not functioning\nERROR: It thinks sys.prefix is u'/usr' (should be u'/tmp/bar')\nERROR: virtualenv is not compatible with this system or executable\n$ bar/bin/python -c 'import sys; print(sys.real_prefix)'\nTraceback (most recent call last):\n  File \"\", line 1, in \nAttributeError: 'module' object has no attribute 'real_prefix'\n$ pyenv which python\n/usr/bin/python\n$ head -n3 bar/bin/python\n!/usr/bin/env bash\nset -e\n[ -n \"$PYENV_DEBUG\" ] && set -x\n```\nIsn't the problem that the shim itself gets installed, instead of the python binary?\n. @ibuildthecloud \nThanks for your patch and pointing out that pyenv virtualenvwrapper_lazy isn't that lazy.\nYou could try proposing your patch to rbenv, and then it would be accepted for pyenv, too.\nI would appreciate it!\n(this is what I have done in https://github.com/sstephenson/rbenv/pull/560 a while ago - still waiting to get merged though)\nThere have been several issues been reported in this regard already: #9, #74 (by me), #213 and https://github.com/yyuu/pyenv-virtualenvwrapper/issues/19.\n. This uses bash specific variables ($BASH_LINENO and $BASH_SOURCE) and therefore probably won't work with other shells, when the script is not being executed using its shebang line (#!/usr/bin/env bash).\n. For zsh (if [ -n \"$ZSH_VERSION\" ]) you can apparently use:\n[ \"$ZSH_EVAL_CONTEXT\" == 'toplevel' ] || sourced=1\nReference: http://unix.stackexchange.com/a/171404/1920\n. @ibuildthecloud \nping\n. @Sayhar \nIf I understand it correctly, it is recommended to use pyenv shell system (for the current shell) before installing something through brew.\nBut it's not recommended in general.\n. > pyenv specific modifications in pyenv core\nOh, so the code I've replaced is used in rbenv and others, too?\nWhat speaks against improving performance there, too, then?\n\nimprove the performance of pyenv virtualenvwrapper_lazy, without modifying pyenv-which\n\nPlease try, regardless.. :)\n. @yyuu \nSee above. I have just submitted a PR for rbenv.\n. We should wait what the outcome of https://github.com/sstephenson/rbenv/pull/560 is - I have just made some fixes and added tests.\n. @daenney \nThe PR for rbenv appears to be OK, but has not been merged yet.\n(only for reference, since you've also asked at the PR and got a response there already)\n. I've updated the PR with the tests and the additional commit from rbenv: https://github.com/blueyed/pyenv/commit/42c1b361efa1ba5864b42bbf9e9e97c77a62fef0\nI am not sure about the code that sets PYENV_VERSION, which is different from setting RBENV_VERSION. Does rbenv not support setting multiple versions, separated by commas?\n. For reference: https://wiki.debian.org/RFP.\n@yyuu \nDo you think the debian branch / packaging is OK to submit it?\nI could upload it to Ubuntu (universe), but would prefer to have it there via Debian of course.\n. @yyuu \nIt looks good from skimming, but I would love to have the man pages not in the Debian specific branch, but for pyenv in general.\nThis would allow them to be used for other packages, or even from the installation in ~/.pyenv (if you adjust $MANPATH or something similar).\n. I am closing this issue.\n@krak3n \nFeel free to re-open it in case it is not resolved for you.\n. Thanks, that appears to work.\nStill, I think that when which python2.6 is true (returns the shim), it should call the (best, newest) installed python 2.6.\nAs a sidenote, there is no (zsh) completion for the 2nd and following versions after pyenv shell.\n. Thanks for your help and pointing me to the existing issue for this.\nUsing the pyenv-implicit plugin indeed fixes it.\nIt is really useful with tools like tox which run your tests with different python versions - and since e.g. python2.7 is provided by the shims, it won't skip it, but then fail with the error from pyenv.\n. Just for reference: pyenv-implicit causes issues: https://github.com/concordusapps/pyenv-implict/issues/2\nI am currently just defining multiple python versions.\n. This is related to pyenv-implicit somehow (reported at https://github.com/concordusapps/pyenv-implict/issues/2).\nAfter moving it out of ~/.pyenv/plugins and starting a new shell (exec zsh), with 3.3.5 still activated, it downloaded installed virtualenvwrapper automatically.\n. @yyuu \nYou are correct. But maybe you can see the issue by looking at the code of the plugin?!\nhttps://github.com/concordusapps/pyenv-implict/blob/master/etc/pyenv.d/which/whence.bash\n. I've seen that there's 'VERSIONER_PYTHON_VERSION': '2.7' in your env, which appears to be something MacOS specific (https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/python.1.html).\nMaybe that's related somehow?\ntox appears to use /usr/bin/python to create the virtualenv (which would be OK), but this then fails to work, right?\n. @zhangliyong \nAre you using pyenv-implicit?\nI've been running into a similar issue before: https://github.com/yyuu/pyenv/issues/214\n. OK, I'm closing it as duplicate then.\nFWIW, I recommend to uninstall it and just to define multiple python versions.\n. The bad/old interpreter is probably in /usr/local/lib/pyenv/versions/2.7.8/bin/turses (and other bins/stubs) maybe?!\nYou might be able to relocate it using sed, e.g.\nsed -i 's~/Users/michele/.pyenv/~/usr/local/lib/pyenv/~' /usr/local/lib/pyenv/versions/*/bin/*\nYou should grep for it first, before replacing anything:\ngrep '/Users/michele/.pyenv/' /usr/local/lib/pyenv/versions/*/bin/*\n. > I've added you as a collaborator of this repo\nThanks!\nFor the time being I'll keep submitting PRs for any changes though, to get them reviewed by you.\n. @yyuu \n\nHow do you think is this worthful to merge also into rbenv?\n\nYes, it is - but I have not checked how/if rbenv is affected / uses the same code.\n. The error appears to be: patch: command not found\nThis is usually installed on a Linux system, but you're working with a stripped down image apparently.\n. Can you provide a link to the source of the Autotag plugin, please?\nIs it https://github.com/vim-scripts/AutoTag/blob/master/plugin/autotag.vim ?\nDoes the error happen when the plugin tries to call :python?\nDoes :python print(1) work in Vim then?\nThe problem is maybe that Vim is built against your system python, and you're using Vim with another python version (via pyenv)?\nWhat does :ver say about python support? Are both py2 and py3 enabled? Then vim using dynamic loading, which might behave strange.\n. How do you install Vim? Do you build it from source?\nIt may have picked another / wrong python version then.\n. pyenv appears to use httpie for the download (ref), and it should pick up proxy vars from the environment (according to https://github.com/jakubroztocil/httpie#proxies).\nIf setting http_proxy and https_proxy does not help, please paste the error you're getting, and possibly any logs.\n. My guess would be that this is not intentional, but -s / --silent was meant to be used.\n. @thomasjo \nThanks for your clarification.\n@i5513 \nI will think about adding a note about proxy usage.\n. Maybe some environment variable like PYENV_USE_CURLRC or PYENV_PREFER_WGET could be introduced?\n@columbusmonkey \nYour fix / workaround has been to edit pyenv's code?\nFor this particular issue, I guess that we could add --sslv3 to the list of curl options.\nWhat's your output from curl --version?\n\n% curl --version\ncurl 7.35.0 (x86_64-pc-linux-gnu) libcurl/7.35.0 OpenSSL/1.0.1f zlib/1.2.8 libidn/1.28 librtmp/2.3\nProtocols: dict file ftp ftps gopher http https imap imaps ldap ldaps pop3 pop3s rtmp rtsp smtp smtps telnet tftp \nFeatures: AsynchDNS GSS-Negotiate IDN IPv6 Largefile NTLM NTLM_WB SSL libz TLS-SRP\n. I've added test as a phony target.\n\nI think that bats is better kept in a separate build directory.\n. Is the pyenv entry (to the shims) missing from $PATH inside your tmux session?\n. This appears to be a problem with listxattr and a NFS mount?!\n. Does it work with python 3.4 or the latest 3.3 release?\n. @chrisspen \nThe registered project is mentioned in the top comment already ^^ :)\n. @obestwalter \nThanks!\nI am a bit surprised that PyPI is (still) using SF.net for their issues?!\n. @kevinburke \nThanks for the patch and pushing it upstream!\nI like your approach, and you can currently work around the infinite recursion by removing the function before init:\nThis is what I am using now in ~/.zshenv:\n```\nif [[ -d ~/.pyenv ]]; then\n  if ! type pyenv | grep -q function; then # only once!\n    export PYENV_ROOT=\"$HOME/.pyenv\"\n    prepend_path_if_not_in_already $PYENV_ROOT/bin\npyenv() {\n  if [ -n \"$commands[pyenv]\" ] ; then\n    unfunction pyenv\n    eval \"$(command pyenv init -)\"\n    pyenv virtualenvwrapper_lazy # XXX: crashes zsh when completing mkvirtualenv for the first time\n    pyenv \"$@\"\n  fi\n}\n\nfi\nfi\n```\n. The build/test failure is:\n\nnot ok 70 conflicting GREP_OPTIONS\n\nIs this what you are referring to?\n. Wouldn't installing Python without --enable-framework then also fix it?\nMaybe that could be used as default then on MacOS?\n. :+1: \nSeems to have been forgotten in bfddc69.\n. > Importing updates from rbenv / ruby-build is really hard... :disappointed:\nI can imagine that.\nBut there can be certainly some tooling for this, e.g. a (git) diff filter, which ignores or translates RBENV to PYENV.\nBut then there's no common Git ancestor, is there?\nMaybe that could be faked somehow now, like \"git merge rbenv\", discard/review any changes/conflicts and then commit the \"merge\".\nThen future merges could be as easy as \"git merge rbenv/master\".\nAlso look at git's rerere in this context, which allows to record resolutions to merge conflicts and replays them automatically.\nFor comparing directory trees, I can recommend http://www.scootersoftware.com/, which allows to have \"unimportant\" differences.\nHTH :octocat: \n. Oh, there appears to be some common ancestor at least, git merge worked, with quite some conflicts (for whole files) though: http://dpaste.com/2SR5K0Z\nIf merged properly once, they should work in the future?\nAnyway, rerere would definitely help here - and it would be even possible to share what it has learned with others / centrally (IIRC).\n. Hmm, git merge-base master rbenv/master does not output anything.\n. I do not mean to have automatic merges, but to create a common ancestor now: if you think everything has been merged, then \"git merge -s ours rbenv/master\".\nBut somehow we would need to make git aware of the renaming from rbenv to pyenv, too.\n. Ok, amended.\nI've added it to the Makefile first anyway, but then thought it would be better nearer at the tests itself (e.g. when calling them manually).\n. @yyuu \nACK.\nHave you seen my comments here: https://github.com/yyuu/pyenv/pull/286#issuecomment-66566763 ?\n. AFAIK python3 does not ship python-config, but only python3*-config.\n. I see, and I've noticed this behavior before.\nI think it may be done deliberately (by the Python distribution) to not break programs that assume that python-config is for Python2, but I don't know.\n. Thanks for your PR.\nI think it not only makes sense for fish, but all shells. Can you update the PR to just change the message for all shells?\n. Sorry, forgot about it.\nI've amended it in e9aa6cf - just a single commit, with fixed commit message.\nThanks!\n. You are right.  It should have been \"towards the end\" probably?\n. > ln -s $HOME/.pyenv/bin/pyenv /usr/local/bin\nI would make it more explicit maybe by also specifying the target filename.\nAlso make sure to be in $HOME, or use ~/.pyenv when cloning.\n. There is a pending / incomplete PR for this: #100.\nDo you feel like picking it up maybe?\n. @ZeKoU \n\nSo - the bottom line - you should set eval \"$(pyenv init -)\" wherever, but make sure it is executed after your path is set.\n\nPlease consider creating a PR to clarify this.\n. @bbenne10 \nWhat is line 1 of /home/bryan/.pyenv/bin/pyenv (which is a symlink to ../libexec/pyenv)?  It should be #!/usr/bin/env bash.\nI assume you have bash installed?  Can you start it (via /usr/bin/env bash)?  Maybe something in the bash startup scripts is broken, regarding the pyenv setup?\nIs bin/pyenv a symlink for you after all?\nCan you run libexec/pyenv?\n(I am using zsh, too)\n. The strangest things happen..\nI'm glad you figured it out!\n. @techdragon \nNot sure, because PYTHON_CONFIGURE_OPTS is the option to configure this in the end.\nIt is about CPython not finding SQLite.\nAre you also / all using homebrew? Then it might be related to how it's (sqlite) installed there maybe?\n. @n8henrie \nYou can also just activate/use multiple versions, e.g.\npyenv shell 3.4.3:system\nThis can be added to /usr/local/opt/pyenv/version also.\n. > Would anyone mind if I updated the readme with an example that makes this more clear?\n:+1: \nPlease go ahead!\nYou might want to include the latest 3.4 and 2.7 versions in there then.\nAnd please use \n. > And please use...?\nDon't know anymore.. ;)\nThanks for the PR!\n. I had this happening myself, and submitted a. PR for rbenv yesterday.\n. https://github.com/sstephenson/rbenv/pull/819\n. When trying to use pip in such a version, it fails:\n\npyenv: version tmp/venv-2.7.9-mqO' is not installed\n. Andpyenv uninstallomits thetmp/` part, but appears to remove it anyway(!):\npyenv: remove /home/user/.pyenv/versions/venv-2.7.9-mqO\n. Using source instead as a proof-of-concept brings it down to:\n\nreal    0m3.630s\nuser    0m1.135s\nsys 0m2.742s\nThe pattern there is to use $(source \"$(command -v pyenv-foo)\" args) instead of $(pyenv-foo args).  source and command -v are both builtins, and therefore no new bash gets invoked.\n. > pyenv is basically a command-line tool and will be ran only if some python apps are invoked\nYes, but e.g. with Vim etc, python might be called several times, and then it adds up - especially with things like version checking during startup etc, which are expected to be really fast.\nI guess this should be first discussed / agreed upon for rbenv.\n(btw: see #360 for better merging in the future.. :octocat:)\n. @yyuu \nPerformance is merely an issue, if it gets called often, e.g. with Neovim, where the python interpreter is called multiple times during startup.  But also for things like displaying the pyenv/Python version in your prompt etc.\nI've forwarded it to rbenv (https://github.com/sstephenson/rbenv/issues/736), and that seemed to trigger the \"anyenv\" rewrite in Go.. :)\nThat means that it won't make it into rbenv.\nGiven the common merge ancestor we now have, do you think it's worthwile for pyenv, until anyenv would/could replace it possibly?\n. Makes sense, closing it for now.\n. Hint: which python should result in the path to pyenv's shim, so you probably have not installed it correctly.\n. You should really read the fine manual probably.. :)\n\nI want to know that could I manage multiple versions of Python without using the command \" pyenv install x.y.z \".\n\nYes, pyenv can use the \"system\" version, but all others should be installed through pyenv.\nWhat does which python3 and which python give you?\nIt should point to pyenv's shims for it to have an effect.\npython3 maybe picks up your distribution's version.\n. Sure.\nThe changes are easy to review (there are none).. ;)\nYou could experiment with this trying to merge the latest changes from rbenv etc.\ngit fetch origin\ngit checkout -b merge-rbenv origin/merge-rbenv\ngit remote add rbenv git://github.com/sstephenson/rbenv.git\ngit merge --no-commit rbenv/master\nThis will currently result in a conflict for README.md, mainly because there is a new section about environment variables, which should be adopted.\nAs suggested in https://github.com/yyuu/pyenv/pull/286#issuecomment-66565475 that would be a good time to install/enable git-rerere now, too.. :)\n. Ok, feel free to close it then.\nI am fine with my pyenv-prefix-to-path function, but still think that a helper might be useful.  But I do not have the time currently to add it.\n. LGTM!\n@yyuu \nWhat do you think?\n. Ubuntu Trusty has 3.4.0-0ubuntu2 as python3 (for python3-dev). python3.3-dev only exists for Ubuntu Saucy.\nBut psycopg2 should use your pyenv's python, right?\nIs your \"Install requirements.txt\" task failing?\nYou need to make the psycopg2 build use your .pyenv/versions/.../include/*/Python.h file.\nThere should be no need to install python3-dev, in case you use pyenv only.\nThe problem is likely that pip is not used from from your virtualenv (pyenv): you need to set the executable option to your pyenv's pip (ref).\n. You're welcome, I'm glad I could help - I am closing the issue.\nThis made me look into Ansible finally a bit more.. :)\n(first stop: better indenting support in Vim for it (https://github.com/chase/vim-ansible-yaml/pull/36) ;))\nI'd be interested in any snippets you come up with to improve pyenv with Ansible etc.\n. The problem with the test failure appears to be that the versions are not split correctly.\nThey should be touched one by one, not as a whole.\nHow did you run the tests?\n. And what shell are you using?\n. AFAIK bats should use bash.  Do you have symlinked this to zsh or something like that?\n. What about the user running it in the user's dir?\nSame error? (with \"touch in sorting Python versions\")?\n. The same applies to easy_install.\nIt's probably better to handle this in pyenv.d/exec/pip-rehash.bash, e.g. by comparing it with any version being removed.\n. Is it fine otherwise?\nI think it should be as light as possible, because it gets used often.\nI wonder if the python in create_prototype_shim should be adjusted, too? (https://github.com/yyuu/pyenv/blob/master/libexec/pyenv-rehash#L49)\nThat's a change to be done for rbenv then, too.\n. @yyuu \nWhat do you think about this question from me?\n\nI wonder if the python in create_prototype_shim should be adjusted, too? \n\nI've opened a PR for rbenv: https://github.com/sstephenson/rbenv/pull/735\n. Thanks for closing.\nThe real fix came with merging rbenv in https://github.com/pyenv/pyenv/pull/549.. I don't know how to reproduce it either.\nI have seen it in logs from scripts, where I have redirected output to the log.\nBut iit does not happen very often.\n. @yyuu \nThe \"use case\" is that python2 and python3 get handled like python for this code path (PYENV_DIR gets set).\n. > python is the special name for executable in pyenv \nSo it's just for internal calls?\nThen this PR is void - and I might add a comment instead.  It wasn't really clear to me what this was doing.  I've thought it would be triggered by calling python3 some.py, too.\n. Re-opening.  See https://github.com/yyuu/pyenv/issues/404 for where this is relevant.\n. pyenv local 3.3.3 won't necessarily make a build system pick it up properly.\nAlso note that sudo won't pick up / use your local python, too.\n. @AbdealiJK \nThe error is pretty clear, isn't it?! (from https://circleci.com/gh/coala-analyzer/coala/1132)\n```\nchecking for Python headers using /home/ubuntu/.pyenv/shims/python-config --includes... pyenv: python-config: command not found\nThe python-config' command exists in these Python versions:\n  2.6.6\n  2.6.8\n  2.7\n  2.7.3\n  2.7.4\n  2.7.5\n  2.7.6\n  2.7.7\n  2.7.8\n  2.7.9\n  3.4.2\n```\n. @AbdealiJK \nThere might be onlypython3-config(although 3.3.6 haspython-config).\n(I remember something odd like that happening to me before)\n. @AbdealiJK \nAny news / new findings?\n. I've added a proposed fix for this to #379: https://github.com/blueyed/pyenv/commit/dab47426519ac48900c80fc9de8751286a02cfe8\n. If that's the way to go there should be some test for this then.\n. Create atest.py` file that you call then with the full path or it's symlink,\nwith a local version at the symlink target and symlink's place:\n```\n% cd /tmp\n% cat > test.py\n!/usr/bin/env python\nimport sys\nprint(sys.version_info)\n% chmod +x test.py\n% pyenv local 2.7.10\n% cd ~/tmp\n% pyenv local 3.4.3\n% /tmp/test.py\nsys.version_info(major=2, minor=7, micro=10, releaselevel='final', serial=0)\n% ln -s /tmp/test.py\n% ./test.py\nsys.version_info(major=3, minor=4, micro=3, releaselevel='final', serial=0)\n``\n. Not that I know of - haven't checked.\n. Ok, will do - but not during the next days probably.\nWill close this PR here for now - it should get merged then from rbenv.\n. Can you provide the contents of requirements.txt?\nIs there something to be installed editable in there? (-e`)\nSee the --src option for pip install, where you could use another directory.\n--src <dir>  Directory to check out editable projects into. The\n             default in a virtualenv is \"<venv path>/src\". The\n             default for global installs is \"<current dir>/src\".\n. Maybe stackoverflow would work for this?\nWe could also use the wiki/doc for that, too.\n. You could use \"python2\" explicitly, but that's likely not what you want.\nRe-opening for now.\n. There is a activated one before already?\n. Somewhere PYENV_ROOT gets set to /usr/local/opt/pyenv.\n. It might be something done by brew?\nYou might want to try the manual installation method, which is quite trivial after all.\n. That seems to be triggered by the shim for python (https://github.com/yyuu/pyenv/blob/9ca7de5b6c0f5b467c9a5a22471d6dc334684c52/libexec/pyenv-rehash#L48-L61).\nIt will not consider test.py for the file (because it has no slash), but then uses 27/dummy.txt.\n@yyuu \nShould the */* pattern get changed to * maybe?\n@jagmoreira \nYou can try if that fixes your issue by manually editing ~/.pyenv/shims/python:\ndiff\n--- /home/user/.pyenv/shims/python  2015-10-30 21:57:45.220035993 +0100\n+++ /home/user/.pyenv/shims/python.new  2015-11-12 20:49:37.299762686 +0100\n@@ -7,7 +7,7 @@\n   for arg; do\n     case \"$arg\" in\n     -c* | -- ) break ;;\n-    */* )\n+    * )\n       if [ -f \"$arg\" ]; then\n         export PYENV_FILE_ARG=\"$arg\"\n         break\n. In general it is meant to be a feature, although I am not really sure / convinced about it, but then should only consider the first argument, and not any others.\nEven with python doesnotexist.py 27/test.py, it should not use the version from 27, which means that it probably should break for any non-option already?!\n. > pyenv: cannot change working directory to `test.py'\nLooks like PYENV_FILE_ARG is handled incorrectly then somewhere later.\nLet's see what @yyuu thinks about this altogether.\n. Yeah.. there is no brew command installed, and I did not look to closely at the tests.\nBut I've found another issue, likely related to PATH ordering, which I've submitted to https://github.com/sstephenson/rbenv/pull/819 for now.\n. @yyuu \nMaybe just using this image is enough?\nhttps://hub.docker.com/r/base/archlinux/\n. I could not reproduce it with this Dockerfile:\nFROM pritunl/archlinux\nRUN pacman -Syu --noconfirm git make\nRUN git clone https://github.com/yyuu/pyenv\nRUN cd pyenv && make test\nBut it failed with another test:\n```\nnot ok 79 non-writable shims directory\n(from function `flunk' in file test/test_helper.bash, line 41,\nfrom function `assert_failure' in file test/test_helper.bash, line 54,\nin test file test/rehash.bats, line 24)\n`assert_failure \"pyenv: cannot rehash: ${PYENV_ROOT}/shims isn't writable\"' failed\nexpected failed exit status\n```\n. I am seeing a test failure locally now also with the main tests:\n\u2713 no executable found\n/home/user/.pyenv/bats/libexec/bats-exec-test: line 197: sed: command not found\n/home/user/.pyenv/bats/libexec/bats-exec-test: line 202: sed: command not found\n/home/user/.pyenv/bats/libexec/bats-exec-test: line 260: sed: command not found\n \u2717 no executable found for system version\n   (from function `teardown' in file test/test_helper.bash, line 33,\n    from function `bats_teardown_trap' in file bats/libexec/bats-exec-test, line 231,\n    from function `main' in test file bats/libexec/bats-exec-test, line 1)\n     `' failed with status 127\nEchoing $PATH there shows it as:\n\n/tmp/pyenv.3Wt/root/shims:/home/user/.pyenv/test/libexec:/home/user/.pyenv/test/../libexec:/tmp/pyenv.3Wt/bin:/tmp/pyenv.3Wt/usr-bin:/tmp/pyenv.3Wt/bin:/tmp/pyenv.3Wt/usr-sbin:/tmp/pyenv.3Wt/sbin:/usr/local/bin\n\nThis is caused by 3405c4d0, according to git-bisect (git bisect run sh -c 'PATH=\"./bats/bin:$PATH\" bats test/which.bats):\n```\n3405c4d03cc4b1e63c2829e2565f7651b09bebb1 is the first bad commit\ncommit 3405c4d03cc4b1e63c2829e2565f7651b09bebb1\nAuthor: Mislav Marohni\u0107 \nDate:   Fri Nov 13 22:57:22 2015 -0500\nFix error message when command is not found for \"system\" version\n\nIf `foo` didn't exist and `RBENV_VERSION=system rbenv which foo` was\ncalled, the error message used to be misleading:\n\n    rbenv: version `system' is not installed\n\nInstead, have the error message simply say that the command was not found.\n\nFixes #770\n\n:040000 040000 2ce66aaf64882bf2147a6a05369a7bfbbd79d86b a5d2ad4717762e534ea7c3126157550e3d2f3515 M  libexec\n:040000 040000 ceff1f153d01cb0f8ae6d545b9570a9de25d2b15 f51fb92da9e329ce0abc03c34df7abe8a413dd4e M  test\nbisect run success\n```\n. Hmm, not very useful probably, since it's a commit with rbenv stuff in there?!\n. Thanks!\nI am still seeing the errors from the original issue though, and can reproduce them using this Dockerfile:\n```\nFROM pritunl/archlinux\nRUN pacman -Syu --noconfirm git make\nADD . pyenv\nRUN git clone https://github.com/yyuu/pyenv\nRUN chown -R nobody pyenv\nRUN cd pyenv && su -s /bin/bash -c 'make test' nobody\n```\n```\nnot ok 6 yaml is linked from Homebrew\n(from function `assert_success' in file test/test_helper.bash, line 86,\nin test file test/build.bats, line 152)\n`assert_success' failed\ncommand failed with exit status 1\noutput: Downloading yaml-0.1.6.tar.gz...\n-> http://pyyaml.org/download/libyaml/yaml-0.1.6.tar.gz\nerror: failed to download yaml-0.1.6.tar.gz\n\nBUILD FAILED (Linux 4.2.5-1-ARCH using python-build 20151210-33-g3031cb9)\nnot ok 7 readline is linked from Homebrew\n(from function `unstub' in file test/test_helper.bash, line 44,\nin test file test/build.bats, line 179)\n`unstub brew' failed\nnot ok 8 readline is not linked from Homebrew when explicitly defined\n(from function `unstub' in file test/test_helper.bash, line 44,\nin test file test/build.bats, line 207)\n`unstub brew' failed\n``\n. Poking around in the test, I've noticed thatcurlis stubbed (should it befalse`?!).\nThe failure comes from:\ninstall_fixture definitions/needs-yaml\nassert_success\n. The first issue can be fixed by:\n``` diff\ndiff --git i/plugins/python-build/test/build.bats w/plugins/python-build/test/build.bats\nindex b8aa3ac..3b217d2 100644\n--- i/plugins/python-build/test/build.bats\n+++ w/plugins/python-build/test/build.bats\n@@ -140,6 +140,7 @@ OUT\n }\n@test \"yaml is linked from Homebrew\" {\n+  cached_tarball \"yaml-0.1.6\"\n   cached_tarball \"Python-3.2.1\"\nbrew_libdir=\"$TMP/homebrew-yaml\"\n``\n. Doesunstub brewmaybe just fail becausebrewdoes not exist (and is not used bymake install`), and the expected stuff from the stub is not triggered?\nShould the brew related tests get skipped in this case?\n. > It seems Arch has OpenSSL at /bin/openssl\nI have it at /usr/bin/openssl.\n. @yyuu \n:+1: \n. :+1: \n. In a shell script you would have to explicitly init pyenv - it won't come from your shell config / profile, does it?\n. In my zshenv I am only adding $PYENV_ROOT/bin and if they do not exist already, and do not prepend them unconditionally to the PATH.  This way the python will always be the one from a virtualenv, even with PYTHON_VERSION being set.\nI'm not sure if that's really better though?!\n. Closing in favor of https://github.com/pyenv/pyenv/pull/1216.. Is this from make test?\n. test is the default target.\nI can confirm the same error (and others).\n. Let's see if it fails on Travis, too - I've restarted https://travis-ci.org/yyuu/pyenv/builds/99674315.\n. Works for me now, too - when it failed I had some set -x in place:\n``` diff\ndiff --git a/plugins/python-build/bin/python-build b/plugins/python-build/bin/python-build\nindex 725c9ca..a17d128 100755\n--- a/plugins/python-build/bin/python-build\n+++ b/plugins/python-build/bin/python-build\n@@ -407,6 +407,7 @@ reuse_existing_tarball() {\n   local checksum=\"$2\"\n# Reuse existing file in build location\n+  set -x\n   if [ -e \"$package_filename\" ] && verify_checksum \"$package_filename\" \"$checksum\"; then\n     return 0\n   fi\n@@ -418,6 +419,7 @@ reuse_existing_tarball() {\n   [ -e \"$cached_package_filename\" ] || return 1\n   verify_checksum \"$cached_package_filename\" \"$checksum\" >&4 2>&1 || return 1\n   ln -s \"$cached_package_filename\" \"$package_filename\" >&4 2>&1 || return 1\n+  set +x\n }\ndownload_tarball() {\ndiff --git a/plugins/python-build/test/stubs/stub b/plugins/python-build/test/stubs/stub\nindex bd5c5d6..dc4c843 100755\n--- a/plugins/python-build/test/stubs/stub\n+++ b/plugins/python-build/test/stubs/stub\n@@ -1,5 +1,6 @@\n #!/usr/bin/env bash\n set -e\n+set -x\nstatus=0\n program=\"${0##*/}\"\n@@ -24,6 +25,8 @@ fi\n # Initialize or load the stub run information.\n eval \"${_STUB_INDEX}\"=1\n eval \"${_STUB_RESULT}\"=0\n+[ ! -e \"${!_STUB_PLAN}\" ] || cat \"${!_STUB_PLAN}\" >&2\n+[ ! -e \"${!_STUB_RUN}\" ] || cat \"${!_STUB_RUN}\" >&2\n [ ! -e \"${!_STUB_RUN}\" ] || source \"${!_STUB_RUN}\"\n```\n``\n \u2717 nonexistent version\n   (from functionassert_equal' in file test/test_helper.bash, line 104,\n    from function assert_output' in file test/test_helper.bash, line 113,\n    in test file test/pyenv.bats, line 61)assert_output <<OUT' failed\n   expected: ERROR\nThe following versions contain `2.7.9' in the name:\n     2.7.9-rc1\n     2.7.9-rc2\nSee all available versions with `pyenv install --list'.\nIf the version you need is missing, try upgrading pyenv:\n cd /home/daniel/.pyenv/plugins/python-build/test/../../.. && git pull && cd -\n\nactual:   + status=0\n   + program=python-build\n   ++ echo python-build\n   ++ tr a-z- A-Z_\n   + PROGRAM=PYTHON_BUILD\n   + '[' -n '' ']'\n   + TMPDIR=/tmp\n   + STUB_PLAN=PYTHON_BUILD_STUB_PLAN\n   + _STUB_RUN=PYTHON_BUILD_STUB_RUN\n   + _STUB_INDEX=PYTHON_BUILD_STUB_INDEX\n   + _STUB_RESULT=PYTHON_BUILD_STUB_RESULT\n   + _STUB_END=PYTHON_BUILD_STUB_END\n   + _STUB_DEBUG=PYTHON_BUILD_STUB_DEBUG\n   + '[' -n '' ']'\n   + '[' -e ${TMP}/python-build-stub-plan ']'\n   + '[' -n ${TMP}/python-build-stub-run ']'\n   + eval PYTHON_BUILD_STUB_INDEX=1\n   ++ PYTHON_BUILD_STUB_INDEX=1\n   + eval PYTHON_BUILD_STUB_RESULT=0\n   ++ PYTHON_BUILD_STUB_RESULT=0\n   + '[' '!' -e ${TMP}/python-build-stub-plan ']'\n   + cat ${TMP}/python-build-stub-plan\n   --lib : /home/daniel/.pyenv/plugins/python-build/test/../bin/python-build --lib\n   echo ERROR >&2 && exit 2\n   --definitions : echo 2.6.9 2.7.9-rc1 2.7.9-rc2 3.4.2 | tr ' ' $'\\n'\n   + '[' '!' -e ${TMP}/python-build-stub-run ']'\n   + '[' '!' -e ${TMP}/python-build-stub-run ']'\n   + index=0\n   + IFS=\n   + read -r line\n   + index=1\n   + '[' -z '' ']'\n   + '[' 1 -eq 1 ']'\n   + result=0\n   + command=' --lib : /home/daniel/.pyenv/plugins/python-build/test/../bin/python-build --lib'\n   + '[' ' --lib : /home/daniel/.pyenv/plugins/python-build/test/../bin/python-build --lib' '!=' ' --lib/home/daniel/.pyenv/plugins/python-build/test/../bin/python-build --lib' ']'\n   + patterns=' --lib'\n   + command='/home/daniel/.pyenv/plugins/python-build/test/../bin/python-build --lib'\n   + set -f\n   + patterns=($patterns)\n   + set +f\n   + arguments=(\"$@\")\n   + (( i=0 ))\n   + (( i<1 ))\n   + pattern=--lib\n   + argument=--lib\n   + case \"$argument\" in\n   + (( i++  ))\n   + (( i<1 ))\n   + '[' 0 -eq 0 ']'\n   + set +e\n   + eval '/home/daniel/.pyenv/plugins/python-build/test/../bin/python-build --lib'\n   ++ /home/daniel/.pyenv/plugins/python-build/test/../bin/python-build --lib\n   + status=0\n   + set -e\n   + IFS=\n   + read -r line\n   + index=2\n   + '[' -z '' ']'\n   + '[' 2 -eq 1 ']'\n   + IFS=\n   + read -r line\n   + index=3\n   + '[' -z '' ']'\n   + '[' 3 -eq 1 ']'\n   + IFS=\n   + read -r line\n   + '[' -n '' ']'\n   + '[' 1 -gt 3 ']'\n   + echo PYTHON_BUILD_STUB_INDEX=2\n   + echo PYTHON_BUILD_STUB_RESULT=0\n   + exit 0\n   + status=0\n   + program=pyenv-hooks\n   ++ echo pyenv-hooks\n   ++ tr a-z- A-Z\n   + PROGRAM=PYENV_HOOKS\n   + '[' -n '' ']'\n   + TMPDIR=/tmp\n   + STUB_PLAN=PYENV_HOOKS_STUB_PLAN\n   + _STUB_RUN=PYENV_HOOKS_STUB_RUN\n   + _STUB_INDEX=PYENV_HOOKS_STUB_INDEX\n   + _STUB_RESULT=PYENV_HOOKS_STUB_RESULT\n   + _STUB_END=PYENV_HOOKS_STUB_END\n   + _STUB_DEBUG=PYENV_HOOKS_STUB_DEBUG\n   + '[' -n '' ']'\n   + '[' -e ${TMP}/pyenv-hooks-stub-plan ']'\n   + '[' -n ${TMP}/pyenv-hooks-stub-run ']'\n   + eval PYENV_HOOKS_STUB_INDEX=1\n   ++ PYENV_HOOKS_STUB_INDEX=1\n   + eval PYENV_HOOKS_STUB_RESULT=0\n   ++ PYENV_HOOKS_STUB_RESULT=0\n   + '[' '!' -e ${TMP}/pyenv-hooks-stub-plan ']'\n   + cat ${TMP}/pyenv-hooks-stub-plan\n   install : true\n   + '[' '!' -e ${TMP}/pyenv-hooks-stub-run ']'\n   + '[' '!' -e ${TMP}/pyenv-hooks-stub-run ']'\n   + index=0\n   + IFS=\n   + read -r line\n   + index=1\n   + '[' -z '' ']'\n   + '[' 1 -eq 1 ']'\n   + result=0\n   + command=' install : true'\n   + '[' ' install : true' '!=' ' installtrue' ']'\n   + patterns=' install'\n   + command=true\n   + set -f\n   + patterns=($patterns)\n   + set +f\n   + arguments=(\"$@\")\n   + (( i=0 ))\n   + (( i<1 ))\n   + pattern=install\n   + argument=install\n   + case \"$argument\" in\n   + (( i++  ))\n   + (( i<1 ))\n   + '[' 0 -eq 0 ']'\n   + set +e\n   + eval true\n   ++ true\n   + status=0\n   + set -e\n   + IFS=\n   + read -r line\n   + '[' -n '' ']'\n   + '[' 1 -gt 1 ']'\n   + echo PYENV_HOOKS_STUB_INDEX=2\n   + echo PYENV_HOOKS_STUB_RESULT=0\n   + exit 0\n   + status=0\n   + program=python-build\n   ++ echo python-build\n   ++ tr a-z- A-Z\n   + PROGRAM=PYTHON_BUILD\n   + '[' -n '' ']'\n   + TMPDIR=/tmp\n   + STUB_PLAN=PYTHON_BUILD_STUB_PLAN\n   + _STUB_RUN=PYTHON_BUILD_STUB_RUN\n   + _STUB_INDEX=PYTHON_BUILD_STUB_INDEX\n   + _STUB_RESULT=PYTHON_BUILD_STUB_RESULT\n   + _STUB_END=PYTHON_BUILD_STUB_END\n   + _STUB_DEBUG=PYTHON_BUILD_STUB_DEBUG\n   + '[' -n '' ']'\n   + '[' -e ${TMP}/python-build-stub-plan ']'\n   + '[' -n ${TMP}/python-build-stub-run ']'\n   + eval PYTHON_BUILD_STUB_INDEX=1\n   ++ PYTHON_BUILD_STUB_INDEX=1\n   + eval PYTHON_BUILD_STUB_RESULT=0\n   ++ PYTHON_BUILD_STUB_RESULT=0\n   + '[' '!' -e ${TMP}/python-build-stub-plan ']'\n   + cat ${TMP}/python-build-stub-plan\n   --lib : /home/daniel/.pyenv/plugins/python-build/test/../bin/python-build --lib\n   echo ERROR >&2 && exit 2\n   --definitions : echo 2.6.9 2.7.9-rc1 2.7.9-rc2 3.4.2 | tr ' ' $'\\n'\n   + '[' '!' -e ${TMP}/python-build-stub-run ']'\n   + cat ${TMP}/python-build-stub-run\n   PYTHON_BUILD_STUB_INDEX=2\n   PYTHON_BUILD_STUB_RESULT=0\n   + '[' '!' -e ${TMP}/python-build-stub-run ']'\n   + source ${TMP}/python-build-stub-run\n   ++ PYTHON_BUILD_STUB_INDEX=2\n   ++ PYTHON_BUILD_STUB_RESULT=0\n   + index=0\n   + IFS=\n   + read -r line\n   + index=1\n   + '[' -z '' ']'\n   + '[' 1 -eq 2 ']'\n   + IFS=\n   + read -r line\n   + index=2\n   + '[' -z '' ']'\n   + '[' 2 -eq 2 ']'\n   + result=0\n   + command=' echo ERROR >&2 && exit 2'\n   + '[' ' echo ERROR >&2 && exit 2' '!=' ' echo ERROR >&2 && exit 2' ']'\n   + set -f\n   + patterns=($patterns)\n   + set +f\n   + arguments=(\"$@\")\n   + (( i=0 ))\n   + (( i<0 ))\n   + '[' 0 -eq 0 ']'\n   + set +e\n   + eval ' echo ERROR >&2 && exit 2'\n   ++ echo ERROR\n   ERROR\n   ++ exit 2\n   + status=2\n   + set -e\n   + IFS=\n   + read -r line\n   + index=3\n   + '[' -z '' ']'\n   + '[' 3 -eq 2 ']'\n   + IFS=\n   + read -r line\n   + '[' -n '' ']'\n   + '[' 2 -gt 3 ']'\n   + echo PYTHON_BUILD_STUB_INDEX=3\n   + echo PYTHON_BUILD_STUB_RESULT=0\n   + exit 2\n   + status=0\n   + program=python-build\n   ++ echo python-build\n   ++ tr a-z- A-Z\n   + PROGRAM=PYTHON_BUILD\n   + '[' -n '' ']'\n   + TMPDIR=/tmp\n   + _STUB_PLAN=PYTHON_BUILD_STUB_PLAN\n   + _STUB_RUN=PYTHON_BUILD_STUB_RUN\n   + _STUB_INDEX=PYTHON_BUILD_STUB_INDEX\n   + _STUB_RESULT=PYTHON_BUILD_STUB_RESULT\n   + _STUB_END=PYTHON_BUILD_STUB_END\n   + _STUB_DEBUG=PYTHON_BUILD_STUB_DEBUG\n   + '[' -n '' ']'\n   + '[' -e ${TMP}/python-build-stub-plan ']'\n   + '[' -n ${TMP}/python-build-stub-run ']'\n   + eval PYTHON_BUILD_STUB_INDEX=1\n   ++ PYTHON_BUILD_STUB_INDEX=1\n   + eval PYTHON_BUILD_STUB_RESULT=0\n   ++ PYTHON_BUILD_STUB_RESULT=0\n   + '[' '!' -e ${TMP}/python-build-stub-plan ']'\n   + cat ${TMP}/python-build-stub-plan\n   --lib : /home/daniel/.pyenv/plugins/python-build/test/../bin/python-build --lib\n   echo ERROR >&2 && exit 2\n   --definitions : echo 2.6.9 2.7.9-rc1 2.7.9-rc2 3.4.2 | tr ' ' $'\\n'\n   + '[' '!' -e ${TMP}/python-build-stub-run ']'\n   + cat ${TMP}/python-build-stub-run\n   PYTHON_BUILD_STUB_INDEX=3\n   PYTHON_BUILD_STUB_RESULT=0\n   + '[' '!' -e ${TMP}/python-build-stub-run ']'\n   + source ${TMP}/python-build-stub-run\n   ++ PYTHON_BUILD_STUB_INDEX=3\n   ++ PYTHON_BUILD_STUB_RESULT=0\n   + index=0\n   + IFS=\n   + read -r line\n   + index=1\n   + '[' -z '' ']'\n   + '[' 1 -eq 3 ']'\n   + IFS=\n   + read -r line\n   + index=2\n   + '[' -z '' ']'\n   + '[' 2 -eq 3 ']'\n   + IFS=\n   + read -r line\n   + index=3\n   + '[' -z '' ']'\n   + '[' 3 -eq 3 ']'\n   + result=0\n   + command=' --definitions : echo 2.6.9 2.7.9-rc1 2.7.9-rc2 3.4.2 | tr '\\'' '\\'' $'\\''\\n'\\'''\n   + '[' ' --definitions : echo 2.6.9 2.7.9-rc1 2.7.9-rc2 3.4.2 | tr '\\'' '\\'' $'\\''\\n'\\''' '!=' ' --definitionsecho 2.6.9 2.7.9-rc1 2.7.9-rc2 3.4.2 | tr '\\'' '\\'' $'\\''\\n'\\''' ']'\n   + patterns=' --definitions'\n   + command='echo 2.6.9 2.7.9-rc1 2.7.9-rc2 3.4.2 | tr '\\'' '\\'' $'\\''\\n'\\'''\n   + set -f\n   + patterns=($patterns)\n   + set +f\n   + arguments=(\"$@\")\n   + (( i=0 ))\n   + (( i<1 ))\n   + pattern=--definitions\n   + argument=--definitions\n   + case \"$argument\" in\n   + (( i++  ))\n   + (( i<1 ))\n   + '[' 0 -eq 0 ']'\n   + set +e\n   + eval 'echo 2.6.9 2.7.9-rc1 2.7.9-rc2 3.4.2 | tr '\\'' '\\'' $'\\''\\n'\\'''\n   ++ echo 2.6.9 2.7.9-rc1 2.7.9-rc2 3.4.2\n   ++ tr ' ' '\n   '\n   + status=0\n   + set -e\n   + IFS=\n   + read -r line\n   + '[' -n '' ']'\n   + '[' 3 -gt 3 ']'\n   + echo PYTHON_BUILD_STUB_INDEX=4\n   + echo PYTHON_BUILD_STUB_RESULT=0\n   + exit 0\nThe following versions contain `2.7.9' in the name:\n     2.7.9-rc1\n     2.7.9-rc2\nSee all available versions with `pyenv install --list'.\nIf the version you need is missing, try upgrading pyenv:\n cd /home/daniel/.pyenv/plugins/python-build/test/../../.. && git pull && cd -\n\n```\n. @nathanveenkersonos \nSee https://github.com/pyenv/pyenv/issues/738#issuecomment-254094479.. @robsonpeixoto\nWhat's your impression/feedback?\n. The error message could be improved, yes.\nBut it should be more generic, and then it's the basics of pyenv after all.\n``\nThepython2.7' command exists in these Python versions:\n  2.7.10\nYou can use it by activating one of those versions using 'pyenv local',\n'pyenv shell' etc.\n```. > The current functionality makes python version availability detection in scripts more convoluted because now you have to execute the shim and check for a return code\nUsing python -V also works to check this.\nI think it makes sense to not activate all versions by default, since you might have dozens (e.g. when using pyenv-virtualenv etc).\nIt's good to enable the ones to use explicitly then (you can enable multiple at the same time).\nIIRC there is a plugin (or there could be one) that enables all versions by default.. Closing as duplicate of #580.. Forwarded: https://github.com/rbenv/rbenv/pull/1003. @yyuu \nShould we merge it here already anyway?. Yeah, came across my old PR (https://github.com/rbenv/rbenv/pull/868) for this again.\nSeems to be copied code from bats after all: https://github.com/sstephenson/bats/pull/224.\nThere are even more places where this is used as a copy in pyenv.. :/. A PR with a test is ready in rbenv itself now: https://github.com/rbenv/rbenv/pull/868#issuecomment-310792150.. btw: a workaround, which also improves performance is to run make in pyenv's src dir, which will generate libexec/pyenv-realpath.dylib to skip this method altogether.. Yeah, I have to pick that up again.\nMaybe somebody can help over there?. Closing in favor of https://github.com/pyenv/pyenv/pull/1216.. > most executables are symlinks to ansible\nbtw: that does not seem to be the case anymore, right?\nIt happens for pyenv because pyenv uses abs_dirname for the file argument, which rbenv does not.. I do not get what the issue is from your last comment.\nPlease elaborate.. Where do you add it to? profile or rc?\nAre you using Bash or Zsh?\nIt is almost certainly better to add it to your profile / login shell only, and not your rc.\nBut that depends on how and when your login shell is started etc.\nThere is an issue about addressing this in the README, and IIRC it recommends to use rc since it will work in a new shell without relogin etc.\nI agree in general, that pyenv's init is slow - that's why I am doing it only on demand, i.e. when a pyenv command is called.. @lanox \n\npyenv causing prompt to be slow\n\nThat's not correct, is it?\nIt's not slowing down the prompt itself, i.e. after pressing Enter, is it?. @lanox \n\n1 year old its 2.7 core i5 with 16gb of ram\n\nSSD then also I assume?\nFor debugging, you can put export PYENV_DEBUG=1 before the init.\nAlso make sure that you are not doing the init too often, i.e. more than once.\nAlso you might show us your rc or profile script.. Well, as said before and in other issues: you should not have the init in your rc (e.g. .bashrc), but rather your profile (e.g. .profile), which gets run typically only once when logging in.\nThis is different on macos IIRC (which runs a login shell always).\nTry adding some \"echo profile\" and \"echo bashrc\" to respective files to see what gets parsed when opening a new shell.. @cmcginty \nSince it appears to be related to pyenv-virtualenv, please follow up on https://github.com/pyenv/pyenv-virtualenv/issues/132#issuecomment-383175244.. @sloria \nUsing --no-rehash is certainly a good idea, so it would make sense to put it upstream in prezto IMHO.\nOptimizing rehash would also be good, of course - you can see what it does with PYENV_DEBUG=1 pyenv rehash already.\nIn case you are using pyenv-virtualenv, https://github.com/pyenv/pyenv-virtualenv/issues/274 is relevant: I think pyenv-virtualenv reruns it unnecessarily.\nI have an experiment in https://github.com/pyenv/pyenv/pull/1185, which uses different shim directories per current version, which might be interesting in this regard, since it potentially means that you will have more, but smaller sets of shims (that need to be rehashed).\n\n~400ms\n\nWould be really interesting to see where this is coming from for you, since it is faster for me.\nUsing pyenv master and pyenv-virtualenv master:\n10 loops, best of 3: 128 msec per loop\nWithout pyenv-virtualenv/etc/pyenv.d/rehash/envs.bash:\n10 loops, best of 3: 89.9 msec per loop\n(used python -m timeit \"__import__('subprocess').Popen(['pyenv', 'rehash']).communicate()\"). Can you try the timeit command I've used.\nI have created https://github.com/pyenv/pyenv-virtualenv/pull/275 for pyenv-virtualenv.\nAre you using it?. btw: I am using eval \"$(\"$PYENV_ROOT\"/bin/pyenv init -)\" in my ~/.profile file, i.e. not for every new terminal, and then basically only define the pyenv function (that you get from it) in ~/.zshrc.. btw: you can save some decent milliseconds by providing the shell to pyenv-init, e.g. pyenv init - zsh.\nSee https://github.com/rbenv/rbenv/pull/1099.. @sloria \nAre you using pyenv-virtualenv?  (asked the 3rd already now). As for the original issue / reporter and people reacting to it with thumbs-up: you could export PYENV_DEBUG=1 and then see what it does.\nPlease provide this info here then, and please also try to investigate yourself, i.e. use it without oh-my-zsh or other frameworks that might get into the way.. btw: the original title is misleading (\"Slow init/startup\"), because it is slow on every prompt then, not only its startup.. I'll push a fixup.. Thanks!. See https://github.com/pyenv/pyenv/pull/1169.. Closing as duplicate of #580.. Related PR: https://github.com/pyenv/pyenv/pull/1120\nUpstream: https://github.com/rbenv/rbenv/pull/868. btw: src/configure && make -C src in pyenv's checkout should fix / work around this, and improve performance as a side-effect.. New PR: https://github.com/pyenv/pyenv/pull/1216. @madduck \nGood find.\nI think it makes sense to set umask to 0022 for the tests.\nPlease consider creating a PR.. Not sure..  /cc @yyuu / @sstephenson \nI would argue that its about the test setup, and while 0022 seems to be common sense, it would be still subjective when in bats?!\nThe test, for reference: https://github.com/pyenv/pyenv/blob/0e683164bdaf8d127d8dcf3f151d3794b2492c27/plugins/python-build/test/installer.bats#L46-L61. Why have you installed it as submodule?\nThat way you are changing the repo itself after all.\nYou should clone plugins in plugins/ instead (AFAIK).\nClosing, but feel free to respond/discuss of course.. Then add it to your repos .git/info/exclude maybe?. > I may delete some related files which leads to this result.\nRemove and reinstall 3.5.2 then?!. @junjielizero \nSo it is fixed then?  Or am I missing something?\nIs there anything pyenv could do when you \"delete some related files which leads to this result\"?. Sorry, @yyuu was meant.. Any update on this?. @fnscoder \nI think it really depends on if you want to have better performance (one-time init), vs. working right away (do it in rc).\nIIRC there was some issue / discussion about improving the README in this regard, but I could not find it now.. Related: https://github.com/pyenv/pyenv/issues/810 /cc @piotr-dobrogost. @fnscoder \nSo it might be nice, if you could try looking at previous issues / PRs in this regard (also in pyenv-virtualenv maybe), and then we should have it more generic, instead of based on distribution names.. @Gr1N \nYou can checkout a specific commit, too - in case you want to pin it.\nOr just wait for the next release.. ;). @Gr1N \nI am just a contributor - never did a release myself.. That really depends, and makes it slower in general.. @tukushan \nHave you logged out and in again?. Cannot confirm - just tried reinstalling 2.7.13.\nWhat openssl packages do you have installed?\n% pacman -Q | grep openssl\nlib32-openssl 1:1.1.0.e-1\nopenssl 1.1.0.e-1\nopenssl-1.0 1.0.2.k-3\npython-pyopenssl 17.0.0-1\npython2-pyopenssl 17.0.0-1. Yeah, so much much for being specific about \"any version\".\n3.6.1 also worked fine.\nCan confirm it for 2.7.9.\nLooking at the build log it says for the first error:\ngcc -pthread -fno-strict-aliasing -g -O2 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -I. -IInclud\n/tmp/python-build.20170519212756.11217/Python-2.7.9/Modules/_ssl.c: In function \u2018_create_tuple_for_X509\n/tmp/python-build.20170519212756.11217/Python-2.7.9/Modules/_ssl.c:675:35: error: dereferencing pointer\n             if (rdn_level != entry->set) {\n                                   ^~. Upstream (rbenv) commit for reference: https://github.com/rbenv/rbenv/commit/be2e606fbdbd8d129563a73a588e33e4fe350665.\nFixes https://github.com/pyenv/pyenv/issues/926.\nShould be squashed when merging, to make git-bisect not fail in an unrelated way on the first commit.\n. I am working on merging all rbenv upstream changes, which would also include this.. #927 should fix this also.. Thanks for this!\nI am closing this in favor of #927, which brings in the upstream fix/commit for this.. Duplicate of https://github.com/pyenv/pyenv/issues/916?!. Sounds good to me.\nIIRC they are based on the release tarball names?!\nAliases (symlinks?) seem to be a nice way to keep the old names.\n(for reference, the issue seems to come via https://github.com/travis-ci/travis-ci/issues/6727#issuecomment-307186234 indirectly). Ok, given that it's only about two files here really, I think renaming them would be fine.. For reference: https://github.com/pyenv/pyenv/releases/tag/v1.1.0.. Please show the relevant part of your bash profile file.\nYou might be missing a newline?!. Looks ok.\nYou can put set -x before (and set +x after) this block to see what gets executed before the error.\nMaybe you also have something in bashrc?!. Also make sure that the error goes away when you comment/remove this block etc.. @laurent101 \nWhat exactly solved it? :). @laurent101 \nI would really appreciate some feedback here... /cc @BanzaiMan . For reference, the shellcheck issue:\n```\n:!shellcheck plugins/python-build/bin/python-build\nIn plugins/python-build/bin/python-build line 104:\nis_mac() {                                      \n         ^-- SC1009: The mentioned parser error was in this brace group.\nIn plugins/python-build/bin/python-build line 106:                    \n  [ $# -eq 0 ] || [ \"$(osx_version)\" \"$@\" ]     \n                  ^-- SC1073: Couldn't parse this test expression.\n                                      ^-- SC1072: Expected comparison operator (don't wrap commands in []/[[]]). Fix any mentioned problems and try again.\nshell returned 1                                                                                                                                        \n``. ping @Samureus .pyenvitself has noupdatecommand?  At least for me (I am using the git checkout).. What doesfile ~/.pyenv/versions/custard/bin/pythonandls -l ~/.pyenv/versions/custard/bin/python` give you?. Related: https://github.com/pypa/virtualenv/issues/149 (and links from there).. PR welcome.\nBut in general I recommend to call it in your shell's profile, and not rc file.\nThe doc is not clear on this, and it needs a re-login etc.. btw: as for Zsh: $PATH/$path is typically setup to have unique entries.\nThere it is a matter of not prepending it before other entries then.. The PR should probably get done against rbenv then also, so that it can be merged from there.. True.\nI am using this in my tmux.conf: set -g default-command \"exec $SHELL\". What about doing this automatically based on if it is used interactively (if [ -t 0 ])?. Please make sure it is actually hit.\nIt seems to be hit with echo $(pyenv which foo </dev/null).\nBut it shows that you might want to use if ! [[ -t 1 ]] - i.e. if stdout is not connected to a TTY.. (NOTE: please squash-merge this in case you agree with it). Woah, that looks a bit ugly..\nAnd then it also has not been squash-merged?!. for reference: it comes from here: https://github.com/pyenv/pyenv/blob/005a2e8914ff4733bd28f20d000871feca98320e/libexec/pyenv-init#L87-L91. Should go through rbenv maybe then first: https://github.com/rbenv/rbenv/blob/2d7cefe78279f65a6aa3c6e5db1e5daffe934061/libexec/rbenv-init#L87-L90\nDoes fish have different config files for login vs. non-login shells (as with others)?. Thanks for tackling this.\npyenv's init could indeed export some marker that would prevent it from manipulating the PATH again I think.\n=====\nFWIW: the best is to setup pyenv in your profile, not rc file (which works around this, and prevents this issue):\n~/.profile - sourced from ~/.zprofile (via emulate sh -c 'source ~/.profile'):\nsh\nif [ -d ~/.pyenv ]; then\n  export PYENV_ROOT=\"$HOME/.pyenv\"\n  PATH=\"$PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH\"\n  eval \"$(\"$PYENV_ROOT\"/bin/pyenv init -)\"\n  # Unset PYENV_SHELL=lightdm-session etc.  It will use $SHELL then by default.\n  unset PYENV_SHELL\nfi\nAnd then I am setting up a wrapper function and completion in zshrc (via https://github.com/blueyed/oh-my-zsh/commit/90215b1df328f838f0431b66b84ef88cfe82297c).\nI can then use $+functions[zsh_setup_pyenv] in other places to check if pyenv has been loaded already (e.g. in my theme).\nHaving the wrapper like that might not be necessary anymore, but previously I was loading more plugins there.\nI think it boils down to: do the setup as early, and as lazy as possible.. So it adds /Users/johria/.pyenv/versions/3.6.2/bin and /usr/local/Cellar/pyenv/1.1.3/libexec.\nDo you use 2 Python versions?\nI agree somehow that this would be nice to avoid.\nTry looking at the output after export PYENV_DEBUG=1 to see where it is coming from.\nMaybe this?!\nhttps://github.com/pyenv/pyenv/blob/2ebab025f7c5dcb1de07c6fc38ea13592c7df6e4/libexec/pyenv-exec#L44-L47. See https://github.com/pyenv/pyenv/pull/1169.. Great!\nI cannot reproduce #98 with this PR (virtualenv --python=\"$(which python)\" FOO.\nUsing system Python 3.6.2 and virtualenv 15.1.0.. > I cannot reproduce\nshould have looked at the diff before.. ;) (it gets special-cased still). Maybe some more advanced exec would help here?\nhttps://docs.python.org/3.6/library/os.html#os.execl ?\nAnd maybe just using exec -a does it?\n\nexec [-cl] [-a name] [command [arguments]]\n      If command is specified, it replaces the shell.  No new process is created.  The argu\u2010\n      ments become the arguments to command.  If the -l option is supplied, the shell places\n      a  dash  at  the  beginning  of  the  zeroth argument passed to command.  This is what\n      login(1) does.  The -c option causes command to be executed with an empty environment.\n      If  -a  is supplied, the shell passes name as the zeroth argument to the executed com\u2010\n      mand.  If command cannot be executed for some reason, a non-interactive  shell  exits,\n      unless  the  execfail  shell option is enabled.  In that case, it returns failure.  An\n      interactive shell returns failure if the file cannot be executed.  If command  is  not\n      specified, any redirections take effect in the current shell, and the return status is\n      0.  If there is a redirection error, the return status is 1.\n. I've just seen an issue where\nbash /home/user/.pyenv/libexec/pyenv-exec python3.6 -c import sys;out=sys.stdout;getattr(out, \"buffer\", out).write(sys.prefix.encode(\"utf-8\")) was spinning with tox -e py36-1.11-stripe128 in the pinax-stripe project.\ntox was hanging at the beginning \"py36-1.11-stripe128 create: /home/user/Vcs/pinax-stripe/.tox/py36-1.11-stripe128\". > exec -a\n\nHaven't noticed - but maybe it works better without it then?!. Check out https://github.com/pyenv/pyenv/pull/1169.\nIt ~~uses the full path with exec -a~~ does not use exec -a anymoe, and therefore Python does not look up the (relative) argv0 in $PATH, and we do not need to mangle the $PATH anymore.\nI think it would be good to additionally do not export/have libexec and plugin's bins in there, which could be solved by saving and using the original PATH before the exec - this however is not that critical.. Thank you!. For me sudo pyenv shell system gives sudo: pyenv: command not found, which makes sense, since pyenv is a function normally.  Your error indicated that you are not using the function, which handles shell in a special way.\nsudo pyenv shell system also does not make sense: it would only be configured for the subshell, which exits immediately.\nSince you have a specific use case, why don't you just use the pyenv version you want directly, i.e. the full path?\nBut this should also work: sudo $(pyenv shell system; pyenv which python)..\nThere are many ways, and sudo -E might also help, but it is likely better to configure the user using sudo in this case.\nbtw: sudo pyenv global system likely configures it for the root user only (i.e. in /root).. Would make sense.. maybe even only for files changed in a PR.\n(Related IIRC): https://github.com/pyenv/pyenv/pull/617. Should get reported for https://github.com/pyenv/pyenv-installer then I guess?. pyenv shell 3.6.0 works, right?\nYou might not have the automatic handler for pyenv local's activation installed.. What about your distro?  Arch Linux provides python2-pytest and python-pytest as packages.\nIf you need pytest specifically for some project, I would rather use a virtualenv for that (auto-activated).\nAre you using Zsh by chance?. btw: you can use a function to spawn a subshell (where you can <ctrl-d> out of).\n(Useful to have $SHLVL then displayed in the prompt or some other indicator.)\nsh\npyenv-exec() { $(pyenv shell \"$1\" && shift && pyenv exec \"$@\") }\nBut it would not have tab-completion (which is not that hard to do though probably).. if test \"xupgrade\" != \"xno\"  ; then \\\n        case upgrade in \\\n            upgrade) ensurepip=\"--upgrade\" ;; \\\n            install|*) ensurepip=\"\" ;; \\\n        esac; \\\n         ./python.exe -E -m ensurepip \\\n            $ensurepip --root=/ ; \\\n    fi\nIgnoring ensurepip failure: pip 9.0.1 requires SSL/TLS. Looks like you are missing SSL libs/headers?!\nThere are similar issues already IIRC, so please try to search them and check the docs.. You need to install ansible and keeper then for 3.5.4.. > Shims should allow commands to persist across versions.\nOnly for activated versions.\nThere are ways around this (as a plugin also IIRC), but that is how pyenv works in general.. > if it's possible to merge from rbenv to pyenv (which I don't think is the case)\nIt is.. I've put some effort into it a while ago, so that it works actually..!. > sometimes it wants root which messes up the install\nJust don't use sudo / the root user then.. :)\nTypically you should use virtualenvs for projects, and e.g. pip install --user or your package manager for tools to be installed globally (for your user).. Try PYENV_DEBUG=1 pyenv versions.. It uses versions_dir=/usr/local/opt/pyenv/versions.. @yyuu \nNo.\n@BanzaiMan \nThanks and welcome!. The issue is that the shims have to be in the $PATH to be found, so that it can delegate to the selected version (in the case where it is installed/available).\n(pyenv by now should at least exit with code 127 when a version is not installed.)\n\npyenv can fiddle with $PATH when I activate/deactivate a Python version/virtualenv. It should (have an option to) leave $PATH the hell alone when I'm not actively using pyenv.\n\nA solution to this might be using shell functions instead of shim scripts, i.e. generating a shell function for each entry in \"shims\", and not adding \"shims\" to $PATH.\nHowever, this would make pyenv only work in interactive shells, and not e.g. for programs (like Neovim etc) that look up / use e.g. \"python\" as a binary.. > Why not just add that directory to $PATH when I activate the corresponding Python version instead of creating a bunch of shims?\nOnce you use pyenv, all versions are activated according to this.\nYou might be better off by only enabling pyenv on demand then, too - e.g. by creating a function yourself that does the init when you start using it (I can give you pointers).\nIt needs special handling for pyenv local then though for example, but there are other ways to activate virtualenvs, e.g. https://github.com/Tarrasch/zsh-autoenv/#automatically-activate-python-virtualenvs.\n\nIf it must be shims, why can't they be adjusted when Python versions are (de)activated so that only working shims exist at any given time?\n\nThat is the case already - there should only be shims for programs (including python) that are installed, and those get rehashed / cleaned up (via pyenv rehash).\n\nMaking it appear that a program is available when it isn't and overriding working programs with do-nothing shims is pretty bad behaviour.\n\nThat is only the case for when foo is installed in some virtualenv (and a shim for it has been created therefore).\nThinking about it however, I could imagine it to be smarter indeed, e.g. by using some extra layer, where symlinks would be created to shims that actually exist (reminds me of NixOS/nixpkgs).\nSo pyenv global, pyenv local and pyenv shell would then trigger creating / managing this.\nIt might also be possible already without the extra layer, but only having shims for programs that exist.\nI've noticed however that pyenv-virtualenv explicitly creates shims for all virtualenvs (similar to pyenv itself creating it for all versions).\nSome var or hook could be added (e.g. when a new version is detected, which is only the case when calling the actual shim however with pyenv local (and likely also pyenv global), since only then the config is read.\nSo it might only be feasible with pyenv shell currently, but at least for pyenv local it could use the shell's cd hook to detect if there is a new version then.. /cc @mislav \n(But likely it is better to invest time into https://github.com/mislav/anyenv instead.). One caveat at least: every shell would need a separate shims directory (e.g. based on its PID, but better some UUID/random string), which gets set with init, or the shims entry/placeholder in $PATH could be replaced when the version is changed.\nGiven that the shims for different versions are rather static, it would make sense to have a separate dir  for them (e.g. based on their name), and then link to this for the different shell's $PATH.. I have experimented a bit with separate shim dirs per version: https://github.com/pyenv/pyenv/pull/1185. @techalchemy \nPlease consider giving #1185 a try.. You are free to try and provide feedback with https://github.com/pyenv/pyenv/pull/1185.\n. @1oglop1 \nI am using it myself by default, and have just rebased it on master.\n(but I am mainly using it for installing Python versions, and .venv for projects in general (via python -m venv .venv and a general chdir handler to activate those). Closing as duplicate of #580.. I've started a while back to fix this in rbenv (upstream), but it needs updating: https://github.com/rbenv/rbenv/pull/868.. btw: src/configure && make -C src in pyenv's checkout should fix / work around this, and improve performance as a side-effect.. Closing in favor of https://github.com/pyenv/pyenv/pull/1216.. @webknjaz \nThe code that causes this error is only a fallback, and the realpath extension is preferred in general.\nI've created https://github.com/pyenv/pyenv/pull/1216 now to fix this finally hopefully, please review/test.. Isn't this missing the actual change to use source instead then, too?\nOr are you saying that you get a performance boost because /bin/sh is used?\nI've tested it using t-source.sh:\n```sh\n!/usr/bin/bash\necho 1:$0 $$ $BASHPID\nPATH=$PWD/t-source\necho 1\nt.sh\necho 2\necho $(t.sh)\necho 3\nsource t.sh\n```\nAnd t-source/t.sh:\nsh\necho sub:$0 $$ $BASHPID\nThis outputs:\n1:t-source.sh 20333 20333\n1\nsub:/home/user/.pyenv/t/t-source/t.sh 20334 20334\n2\nsub:/home/user/.pyenv/t/t-source/t.sh 20335 20335\n3\nsub:t-source.sh 20333 20333\nI.e. the same PID is only used when using source t.sh.\nI've done something in this regard also a while ago (https://github.com/pyenv/pyenv/pull/357), it was closed back then since anyenv appeared to be a replacement soon, but that is not the case yet still.\n. What is Carbon Black?. @AndreasBackx \nFeel free to use this patch locally already, of course.\nBut otherwise it is just not clear why that is, and it does not make sense to merge something just-because I guess?!\nYou could compare the output from with and without PYENV_DEBUG=1 exported.. @AndreasBackx \nHave you even tried this PR/patch, or are you just seeing a slowdown in general?. > The video shows the difference very clearly between enabling pyenv and disabling it.\nWe believe you - a video would not help there/here.\n\nThough I don't see a clear difference with this pull request unfortunately.\n\nSo it is off topic for this PR - please create a new issue / search a more fitting one.\nFWIW: it is not really necessary to use pyenv-virtualenv.\nAnd you can also mainly use pyenv just for installation of versions - you can just use e.g. ~/.pyenv/versions/3.7.2/bin/python -m venv .venv to create a virtualenv for a project, and then just ensure that this virtualenv gets activated, e.g. through chpwd hooks.\nThen you can leave pyenv init off by default.\nAnyway, please hesitate to post more off-topic here (with this PR).. You said yourself:\n\nThough I don't see a clear difference with this pull request unfortunately.\n\nYou should at least have some clear description of your issue, and a way to reproduce/measure it.\nTherefore you should take pyenv-virtualenv out of the equation in the first place.\nIt also heavily depends on how you setup pyenv in your shell, and if you e.g. have something slow in bash's interactive rc files, which would just make any bash script slower.\nI have a useful tiny program to run some shell command via Python's timeit module, which is quite useful for profiling: https://github.com/blueyed/dotfiles/blob/master/usr/bin/timeit-shell.\nAs for this PR: this is only showing that your interactive bash startup is slow - and that some external programs might make it worse.\nI've just confirmed though that having a shebang indeed causes some overhead, i.e. a new PID - I've expected bash to be smarter about that.\nUsing these files:\nbash:#!/bin/sh\nbash:echo \"SLEEP\"\nbash:/usr/bin/sleep 1\nbash:/usr/bin/bash \"$@\"\ntest.bash:#!/usr/bin/bash\ntest.bash:set -x\ntest.bash:PATH=$PWD\ntest.bash:t.sh\ntest.bash:t-with-shebang.sh\ntest.bash:echo \"$(t-with-shebang.sh)\"\nt.sh:echo t.sh\nt.sh:echo PID=$$ BASHPID=$BASHPID SHELL=$SHELL\nt-with-shebang.sh:#!bash\nt-with-shebang.sh:echo t-with-shebang.sh\nt-with-shebang.sh:echo PID=$$ BASHPID=$BASHPID SHELL=$SHELL\nbash test.sh shows:\n+ PATH=/home/daniel/.pyenv/t-source\n+ t.sh\nt.sh\nPID=14290 BASHPID=14290 SHELL=/usr/bin/zsh\n+ t-with-shebang.sh\nSLEEP\nt-with-shebang.sh\nPID=14293 BASHPID=14293 SHELL=/usr/bin/zsh\n++ t-with-shebang.sh\n+ echo 'SLEEP\nt-with-shebang.sh\nPID=14296 BASHPID=14296 SHELL=/usr/bin/zsh'\nSLEEP\nt-with-shebang.sh\nPID=14296 BASHPID=14296 SHELL=/usr/bin/zsh\nI.e. it calls \"bash\" when used in a shebang.\nTherefore I think this PR makes sense after all, but should go through rbenv then also - in cas @mislav would take it.. Looking at strace for ./t.sh from bash shows:\n28610 execve(\"./t.sh\", [\"./t.sh\"], 0x5585d6c1ee60 /* 81 vars */) = -1 ENOEXEC (Exec format error)\n28610 openat(AT_FDCWD, \"./t.sh\", O_RDONLY) = 3\n28610 read(3, \"echo t.sh\\necho PID=$$ BASHPID=$B\"..., 128) = 52\n28610 close(3)                          = 0\n28610 pipe([3, 4])                      = 0\n28610 close(3)                          = 0\n28610 close(4)                          = 0\nI.e. execve fails, and then it just reads the file itself.  It is also stating around for \"bash\", finding \"/usr/bin/bash\", and maybe checking if it is itself?!  - but not spawning a new process.\nUsing ./t-with-shebang.sh will use clone (but does appear to use extra files / much additional processing/reading for me).\nI have used strace -f -o O bash, and then tail -f O from another terminal why calling those scripts.. I've rebased this PR for now, ~~and added a new commit to also remove it from libexec/pyenv.~~\nEdit: Reverted, since that gets used as pyenv in the first place.. For me this improves timeit-shell ~/.pyenv/bin/pyenv init - from 47-48ms to 40-42ms.\npyenv versions from ~80ms to 58ms.\npyenv whence python from ~100ms to ~50ms.\npyenv exec python -V from ~70ms to ~50ms\nSo it is quite good in general!. This appears to be quite similar to https://github.com/pyenv/pyenv/pull/357 - where I was using source, but has a far more easier diff/patch.. See https://github.com/pyenv/pyenv/pull/1169.. I think it is confusing, too - and not a good default behavior at least.\nI guess we should bring this up in the rbenv tracker (i.e. \"upstream\").\npyenv's code: https://github.com/pyenv/pyenv/blob/8eeddaebc1153313010724f81917a96d62dc4e2a/libexec/pyenv#L61-L71\nAt least pyenv allows for overriding this behavior because of this indirection:\nYou could export PYENV_DIR=$PWD after cd /tmp/env1.\nAnd for Neomake: try setting it there using let $PYENV_DIR = getcwd().. Rejected for rbenv: https://github.com/rbenv/rbenv/pull/1085#issuecomment-394534582.. The test failure is from a test that should be removed (#1168).. Related rbenv PR, but PATH gets mangled in rbenv for other reasons (rbenv -S): https://github.com/rbenv/rbenv/pull/1088.. See https://github.com/rbenv/rbenv/pull/1089 for the 3 separate commits/issues.\nMissing here is not to change $PATH with regard to libexec and plugin bins.\nLet's wait for feedback on the upstream PRs, and then we can either merge it from there, or just go forward here already (and include the missing change).\nThis fixes a bunch of issues, so is rather nice to have as soon as possible, of course.. Changed this PR back to only remove -a with exec and not changing $PATH.\nAs per https://github.com/rbenv/rbenv/pull/1089#issuecomment-394531896 changing the PATH is intentional in rbenv, and could be brought back to pyenv also, but should then also get skipped again for the system version.. Works quite well for pyenv-shell now already - but no support for fish yet.\nAs for pyenv-local, should we install a chpwd hook ourselves?\nI know that you can have several functions in Zsh, but do not know if there is only a global one in Bash/fish.. @1oglop1 \nI am still using it myself, and invite you to try it - just check out my PR use it from there.\nThere are issues with other plugins at least, so if you use pyenv-virtualenv also (which is not really necessary), you should use my PR from there, too.\nAlso make sure to install a chpwd handler (and example for zsh/zsh-autoenv is above).\nLater we would/should ship a chpwd handler probably, but I also agree with @mislav somehow that there are light solutions after all.\nI am using pyenv myself mainly only for installing different Python versions, and use normal virtualenvs per project (created using python -m venv .venv and then have (another) chpwd handler to activate those automatically).. You can install it in parallel using ~/.pyenv (https://github.com/pyenv/pyenv#basic-github-checkout), but make sure to only use it from there then.  After checking it out there, add my remote and check out this branch there.\nchpwd is a hook Zsh and Bash provide to execute a function if you change a directory, and direnv provide this via direnv hook bash for Bash.\nYou can use direnv (if you are using it already), but would need to change parts of _my_autoenv_pyenv_chpwd, since it uses Zsh globbing (the \"Optimized version of pyenv-version-name\" part).\nTherefore it is not really trivial.. > You can use direnv \nNot really, sorry.\nBut you can use the method it uses to create the chpwd hook:\n_pyenv_hook() {\n  local previous_exit_status=$?;\n  \u2026\n  return $previous_exit_status;\n};\nif ! [[ \"$PROMPT_COMMAND\" =~ _pyenv_hook ]]; then\n  PROMPT_COMMAND=\"_pyenv_hook;$PROMPT_COMMAND\";\nfi. Related: #1273 \nThe following would be great, but requires a recent env:\n```diff\ndiff --git c/libexec/pyenv-rehash i/libexec/pyenv-rehash\nindex b6a1c84..5199bb5 100755\n--- c/libexec/pyenv-rehash\n+++ i/libexec/pyenv-rehash\n@@ -72,7 +72,7 @@ fi\n # serves as a locking mechanism.\n create_prototype_shim() {\n   cat > \"$PROTOTYPE_SHIM_PATH\" <<SH\n-#!/usr/bin/env bash\n+#!/usr/bin/env -S bash -p\n set -e\n [ -n \"\\$PYENV_DEBUG\" ] && set -x\n``. https://github.com/rbenv/rbenv/pull/1151. 1. it looks like something that should go into rbenv already\n2. do you get theset -ubehavior with/usr/bin/env bashalready?  (i.e. doesecho $FOOtriggers it there).\n3. what is your normal shell?\n4. what isaz?  Is it the same within the Makefile and outside of it?  (PATH related)\n5.make` might use a different shell than your normal one, with different init scripts\nIn general I think it might be worth fixing, but could also look like this maybe:\n```diff\ndiff --git a/libexec/pyenv-rehash b/libexec/pyenv-rehash\nindex 5c421c4..d4a65a9 100755\n--- a/libexec/pyenv-rehash\n+++ b/libexec/pyenv-rehash\n@@ -64,7 +64,7 @@ create_prototype_shim() {\n   cat > \"$PROTOTYPE_SHIM_PATH\" <<SH\n #!/usr/bin/env bash\n set -e\n-[ -n \"\\$PYENV_DEBUG\" ] && set -x\n+[ -n \"\\${PYENV_DEBUG:-}\" ] && set -x\nprogram=\"\\${0##/}\"\n if [[ \"\\$program\" = \"python\" ]]; then\n```\nAs for a test, it could just set -u there and call a shim I guess.. Ok, exporting SHELLOPTS is the main issue here.\nBut a) using += here is wrong, since it is joined by colons, not spaces, and b) it is still unclear where the \"nounset\" (set -u) is coming from then.\nFor reference:\n```make\nSHELL := bash\nexport SHELLOPTS=xtrace:nounset\nall:\n    echo \"${SHELLOPTS}\"\n    bash -c 'true; echo $$FOO'\n```. https://github.com/rbenv/rbenv/pull/1151. > The ${PYENV_ROOT}/shims might be appeared at the first or last in the $PATH\nThis gets handled by _path=\":$PATH:\".\n\nPlus, the variable declaration of _path should be surrounded with \"\" to avoid unwanted argument expansion.\n\nI will fix that.\n. Amended the commit.\n. This should be kept to get done unconditionally, but then set +e would be used before sourcing.\n. Yes, use set +e in the block that does the sourcing.\nAlso, there should be a variable like is_sourced, which then would be set according to the different shells and used to determine if source / . or exec is being used.\nI am trying to find a way to detect this in Zsh, but did not succeed yet.\n. Will do.\n. Doesn't look right to just discard errors here.. This seems odd, but comes from rbenv/rbenv@8b0b51a (https://github.com/rbenv/rbenv/pull/873).. Yes, seems to be good - but it confused me a bit.\nProbably source was not available / preferred in older fish versions?!. Breaking is wrong here: the local file might be a symlink itself that needs to get resolved.. There is also pyenv shell.. It might be somewhere else..\nYou might want to include $PYENV_ROOT in the check and/or check for PYENV_ROOT being non-empty and use it in the eval.. As for Bash and other modern shells, using [[ instead of [ is better.\nAnd then also use it in the eval - otherwise it might still fail if $PYENV_ROOT is not in the $PATH.. More like `[[ -x $PYENV_ROOT/bin/pyenv ]] && eval \"$($PYENV_ROOT/bin/pyenv init -)\" I've meant.. @yyuu \nIt is not about avoiding sourcing it multiple times, but in case pyenv is not installed, e.g. when using the same dotfiles somewhere else (?!).. > pyenv-which will be needed for auto rehash\nThis should be handled in a better way, e.g. by exporting/setting the location for it explicitly or something similar.. s/the the/the/. Why is this necessary after all?\nCould also check only if it is a directory then?!. > to get the absolute path\nThis is what I've meant mostly.\nAt least there does not seem to be a failing test when removing the PYENV_DIR=$(cd \"$PYENV_DIR\" && echo \"$PWD\").\nSince this spawns a subshell, it is not really cheap, and should be avoided if not necessary.. Might not be necessary altogether: https://github.com/pyenv/pyenv/pull/1036#discussion_r151895707. Cannot PYENV_ROOT be used to build the absolute path?. This is not really necessary, but only changed for consistency I assume?. Not sure - if so then it should keep the original name (\"rbenv\") probably, too?\nBut anyway, git should handle that - if that's what you are referring to as \"the history\".. Good point.\nIt should only be added if the command is from a non-system version after all, i.e. with PYENV_VERSION=system:3.5.3, PATH should not be changed for pip, which is used from system then.\nTo make this work pyenv-which needs to return the used version in some new mode then maybe?. This required change breaks github.com/yyuu/pyenv-which-ext, but it is also not necessary with this PR anymore.\n(pyenv-which-ext fails to remove the \"system\" shims dir (which should be empty, but if not (due to a bug) causes an infinite loop)).. ",
    "cleocn": "pyenv local 2.7  3.4.7 \nit's work for me.\nhttps://github.com/samstav/circleci-python-sandbox/issues/1\n. run this:\nCFLAGS=\"-I$(xcrun --show-sdk-path)/usr/include\" pyenv install -v 3.4.7\nin mac . it's work for me.\nenjoy.. ",
    "pedzed": "\nI'm afraid that kind of implicit behaviour might introduce the confusions of Python versions on runtime. I don't like to change current behaviour.\n\nThat's fine, but at least provide a more friendly error message? Now people are required to look the problem up themselves...\nA simple \nsh\npyenv global 3.6.5\nwas what I was looking for.. I already have Python 2.7.13, 3.5.3 (system default) and 3.6.5 (using make) installed. I find it difficult to understand what to do with those versions. @FavorMylikes's question is still unanswered, which doesn't help either.. ",
    "dmayle": "I develop my own command line tools in python in their own virtualenvs, so I want to be able to launch a shim in it's own environment if it exists in only one environment, so this is perfect for me.  Here's a modified version of the script that can handle  de-duping virtualenvs (e.g. a virtualenv called \"MINE\" shows up as both \"MINE\" and \"X.Y.Z/envs/MINE\")\nif [ -n \"$PYENV_COMMAND\" ] && [ ! -x \"$PYENV_COMMAND_PATH\" ]; then\n  # What versions are there for this command\n  versions=($(pyenv-whence \"${PYENV_COMMAND}\" 2>/dev/null || true))\n  dedup_versions=($(pyenv-whence \"${PYENV_COMMAND}\" 2>/dev/null || true))\n  # Resolve symlinks in versions\n  for index in ${!versions[*]}; do\n    dedup_versions[$index]=\"$(greadlink -f \"${PYENV_ROOT}/versions/${versions[$index]}\")\";\n  done\n  # De-dup the list of versions\n  dedup_versions=($(echo \"${dedup_versions[@]}\" | tr ' ' '\\n' | sort -u | tr '\\n' ' '))\n  if [ \"${#dedup_versions[@]}\" -eq 1 ]; then\n    PYENV_COMMAND_PATH=\"${PYENV_ROOT}/versions/${versions[0]}/bin/${PYENV_COMMAND}\"\n  fi\nfi. ",
    "abiro": "This is the simplest solution I've found to use 3.5-3.7 for testing with tox while using 3.6 as the default python:\npyenv install 3.6.6\npyenv install 3.5.6\npyenv install 3.7.0\npyenv global 3.6.6 3.5.6 3.7.0\nAfter this:\n```\npython --version \n\nPython 3.6.6\n\npython3 --version\n\nPython 3.6.6\n\npython3.6 --version\n\nPython 3.6.6\n\npython3.5 --version\n\nPython 3.5.6\n\npython3.7 --version\n\nPython 3.7.0\n```\nHope this helps somebody!. \n",
    "RobertAudi": "I managed to change the installation dir (I think) following these instructions: http://peak.telecommunity.com/DevCenter/EasyInstall#mac-os-x-user-installation\nBut now pyenv install 2.7.5 fails saying that GNU readline is not installed even though it is and I linked it as show here: https://github.com/yyuu/pyenv/wiki/Common-build-problems#readline-support\n. And I also trie to install a python with this command:\nLDFLAGS=\"-L/usr/local/opt/readline/lib\" CFLAGS=\"-I/usr/local/opt/readline/include\" pyenv install 2.7.5\n...as shown in this issue: https://github.com/yyuu/pyenv/issues/23\nBut that failed with the same error\n. I also tried this, which didn't work either:\nLDFLAGS=\"-L/usr/local/Cellar/readline/6.2.4/lib\" CFLAGS=\"-I/usr/local/Cellar/readline/6.2.4/include\" pyenv install 2.7.5\n. @yyuu Sorry about that, I should have given more details about my system. Here they are:\n- OS X 10.8.4\n- Homebrew 0.9.4\n- ZSH 4.3.11\nI installed pyenv using Homebrew:\nsh\n% brew install pyenv\nThen I linked readline using this command:\nsh\n% brew link readline --force\nThen I created (then edited according to the new documentation you linked) the file $HOME/.pydistutils.cfg with the following content:\n```\n[easy_install]\nset the default location to install packages\ninstall_dir = /Users/aziz/python.bin\n```\nI obviously created the directory $HOME/python.bin. Then I tried to install python 2.7.5 using pyenv:\nsh\n% pyenv install 2.7.5\nAnd I got the following error:\n```\nDownloading Python-2.7.5.tgz...\n-> http://yyuu.github.io/pythons/b4f01a1d0ba0b46b05c73b2ac909b1df\nInstalling Python-2.7.5...\nInstalled Python-2.7.5 to /usr/local/opt/pyenv/versions/2.7.5\nDownloading setuptools-0.7.2.tar.gz...\n-> https://bitbucket.org/pypa/setuptools/downloads/setuptools-0.7.2.tar.gz\nInstalling setuptools-0.7.2...\nBUILD FAILED\nInspect or clean up the working tree at /Users/aziz/tmp/python-build.20130722142619.94856\nResults logged to /Users/aziz/tmp/python-build.20130722142619.94856.log\nLast 10 log lines:\n* You can add the installation directory to the PYTHONPATH environment\n  variable.  (It must then also be on PYTHONPATH whenever you run\n  Python and want to use the package(s) you are installing.)\n\nYou can set up the installation directory to support \".pth\" files by\n  using one of the approaches described here:\n\nhttp://packages.python.org/setuptools/easy_install.html#custom-installation-locations\nPlease make the appropriate changes for your system and try again.\n```\nI checked the logs and here is the interesting part:\n```\nrunning install\nChecking .pth file support in /Users/aziz/python.bin\n/usr/local/opt/pyenv/versions/2.7.5/bin/python -E -c pass\nTEST FAILED: /Users/aziz/python.bin does NOT support .pth files\nerror: bad install directory or PYTHONPATH\nYou are attempting to install a package to a directory that is not\non PYTHONPATH and which Python does not read \".pth\" files from.  The\ninstallation directory you specified (via --install-dir, --prefix, or\nthe distutils default setting) was:\n/Users/aziz/python.bin\n\nand your PYTHONPATH environment variable currently contains:\n''\n\nHere are some of your options for correcting the problem:\n\n\nYou can choose a different installation directory, i.e., one that is\n  on PYTHONPATH or supports .pth files\n\n\nYou can add the installation directory to the PYTHONPATH environment\n  variable.  (It must then also be on PYTHONPATH whenever you run\n  Python and want to use the package(s) you are installing.)\n\n\nYou can set up the installation directory to support \".pth\" files by\n  using one of the approaches described here:\n\n\nhttp://packages.python.org/setuptools/easy_install.html#custom-installation-locations\nPlease make the appropriate changes for your system and try again.\n```\nI could set the PYTHONPATH shell variable but I don't know what directory to point it to...\nEdit: I tried to set /Users/aziz/python.bin as the PYTHONPATH. Apparently, the python install was successful, but it failed when trying to install setuptools. Here is the output of the command pyenv install 2.7.5:\n```\nDownloading Python-2.7.5.tgz...\n-> http://yyuu.github.io/pythons/b4f01a1d0ba0b46b05c73b2ac909b1df\nInstalling Python-2.7.5...\nInstalled Python-2.7.5 to /usr/local/opt/pyenv/versions/2.7.5\nDownloading setuptools-0.7.2.tar.gz...\n-> https://bitbucket.org/pypa/setuptools/downloads/setuptools-0.7.2.tar.gz\nInstalling setuptools-0.7.2...\nBUILD FAILED\nInspect or clean up the working tree at /Users/aziz/tmp/python-build.20130722143755.8646\nResults logged to /Users/aziz/tmp/python-build.20130722143755.8646.log\nLast 10 log lines:\n* You can add the installation directory to the PYTHONPATH environment\n  variable.  (It must then also be on PYTHONPATH whenever you run\n  Python and want to use the package(s) you are installing.)\n\nYou can set up the installation directory to support \".pth\" files by\n  using one of the approaches described here:\n\nhttp://packages.python.org/setuptools/easy_install.html#custom-installation-locations\nPlease make the appropriate changes for your system and try again.\n```\nAnd here's the part of the log file where it failed:\n```\n~/tmp/python-build.20130722143755.8646/setuptools-0.7.2 ~/tmp/python-build.20130722143755.8646 ~\nrunning install\nChecking .pth file support in /Users/aziz/python.bin\n/usr/local/opt/pyenv/versions/2.7.5/bin/python -E -c pass\nTEST FAILED: /Users/aziz/python.bin does NOT support .pth files\nerror: bad install directory or PYTHONPATH\nYou are attempting to install a package to a directory that is not\non PYTHONPATH and which Python does not read \".pth\" files from.  The\ninstallation directory you specified (via --install-dir, --prefix, or\nthe distutils default setting) was:\n/Users/aziz/python.bin\n\nand your PYTHONPATH environment variable currently contains:\n''\n\nHere are some of your options for correcting the problem:\n\n\nYou can choose a different installation directory, i.e., one that is\n  on PYTHONPATH or supports .pth files\n\n\nYou can add the installation directory to the PYTHONPATH environment\n  variable.  (It must then also be on PYTHONPATH whenever you run\n  Python and want to use the package(s) you are installing.)\n\n\nYou can set up the installation directory to support \".pth\" files by\n  using one of the approaches described here:\n\n\nhttp://packages.python.org/setuptools/easy_install.html#custom-installation-locations\nPlease make the appropriate changes for your system and try again.\n``\n. @yyuu It's crazy, I removed~/.pydistutils.cfg` and now it seems to work fine all of a sudden. I have no clue what I did. Sorry to have wasted you time, and Thanks a lot for your help.\n. ",
    "ndawe": "I've hit the same problem, only I don't have ~/.pydistutils.cfg. setuptools fails to install due to an empty PYTHONPATH (pyenv install 2.7.9 on Ubuntu 14.10). My workaround is to manually set PYTHONPATH in python-build and create the site-packages directory. Is there (or can there be) some way to disable installing setuptools and pip?\n. ",
    "alibitek": "Had the same problem because I've set PYTHONPATH in ~/.profile to export PYTHONPATH=\"/usr/lib/python3/dist-packages/:$PYTHONPATH\"\n```\nException:\nTraceback (most recent call last):\n  File \"/home/alpha/.pyenv/versions/3.5.1/lib/python3.5/shutil.py\", line 538, in move\n    os.rename(src, real_dst)\nPermissionError: [Errno 13] Permission denied: '/usr/lib/python3/dist-packages/pycache/six.cpython-35.pyc' -> '/tmp/pip-k2rz5tn0-uninstall/usr/lib/python3/dist-packages/pycache/six.cpython-35.pyc'\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\n  File \"/home/alpha/.pyenv/versions/3.5.1/lib/python3.5/site-packages/pip/basecommand.py\", line 215, in main\n    status = self.run(options, args)\n  File \"/home/alpha/.pyenv/versions/3.5.1/lib/python3.5/site-packages/pip/commands/install.py\", line 342, in run\n    prefix=options.prefix_path,\n  File \"/home/alpha/.pyenv/versions/3.5.1/lib/python3.5/site-packages/pip/req/req_set.py\", line 778, in install\n    requirement.uninstall(auto_confirm=True)\n  File \"/home/alpha/.pyenv/versions/3.5.1/lib/python3.5/site-packages/pip/req/req_install.py\", line 752, in uninstall\n    paths_to_remove.remove(auto_confirm)\n  File \"/home/alpha/.pyenv/versions/3.5.1/lib/python3.5/site-packages/pip/req/req_uninstall.py\", line 115, in remove\n    renames(path, new_path)\n  File \"/home/alpha/.pyenv/versions/3.5.1/lib/python3.5/site-packages/pip/utils/init.py\", line 267, in renames\n    shutil.move(old, new)\n  File \"/home/alpha/.pyenv/versions/3.5.1/lib/python3.5/shutil.py\", line 553, in move\n    os.unlink(src)                                                                                                                                                                                                                                                           \nPermissionError: [Errno 13] Permission denied: '/usr/lib/python3/dist-packages/pycache/six.cpython-35.pyc' \n```\nAfter unsetting the PYTHONPATH the installation worked correctly, i.e. it installed the package into ./.pyenv/versions/3.5.1/lib/python3.5/site-packages\n. @JGroselle \nYou need to install the development headers for the ncurses library and build the Python version you want again.\nTry this:\nsudo apt-get install libncurses5 libncurses5-dev libncursesw5\npyenv uninstall 3.4.3\npyenv install 3.4.3\npyenv local 3.4.3\npip install glances\n. ",
    "flavio": "Do you think the ncurses issue leads to the final error about readline?\n. flavio@roesti ~ \u00bb rpm -ql ncurses-devel | grep panel.h\n/usr/include/ncurses/panel.h\n/usr/include/ncurses6/ncurses/panel.h\n/usr/include/ncurses6/ncursesw/panel.h\n/usr/include/ncursesw/panel.h\n/usr/share/man/man3/panel_hidden.3curses.gz\nflavio@roesti ~ \u00bb find /usr/include -name panel.h \n/usr/include/ncurses/panel.h\n/usr/include/ncurses6/ncurses/panel.h\n/usr/include/ncurses6/ncursesw/panel.h\n/usr/include/ncursesw/panel.h\n. That solved the ncurses issue but, as expected, didn't help with the readline check: build log.\n. Yes, that helps. Are you sure other 64bit linux distributions are not affected by this issue?\n. Initially I wanted to use version 2.4.2 because it's the one shipped with an older version of SUSE Linux Enterprise Server I need to work on. However I think working on 2.4.6 would be fine too. Do you want me to update the patch?\n. Fixed by adding 2.4.6 on top of 2.4.2.\n. I'm building on openSUSE 12.3 x86_64.\n. ",
    "starlocke": "In certain distros (e.g. Ubuntu family), the package build-essential is a dependency, in addition to those already listed.\n. @alfetopito -- so, you succeeded, using Xubuntu 13.04, 64-bit, fresh install ?  If different, please clarify.\nPS. I installed all those packages, too, since I read #40 and its solution was those packages (more or less)... still, didn't work for me... thus this report.\n. build-essential ! I was lacking that debian package. The issue is resolved, but, I'd like to suggest that pyenv reports on missing pre-requisites and quit before going so far as making an attempt at \"magic\" (building/testing/installing). There's definitely a whole bunch of us who are unfortunately not very savvy with the whole \"compile and install from source\" methodology, myself included.\nThank you very much, @yyuu, for your awesome contribution to python ease-of-use! :+1: (PS. I don't think you need the output from the above script, at this point, right?)\n. I haven't tried pyenv doctor, but I'm sure it deserves a mention in the pyenv main project's README.md :smile:\n. ",
    "simonwsw": "I'm just using bash on Mac OS X 10.6.8. The error is quite simply, curl fail to connect the host. But it's strange that I have no problem viewing the download page from either browser or curl. \ncurl: (7) couldn't connect to host\ntar: Error opening archive: Failed to open 'setuptools-0.7.2.tar.gz': No such file or directory\nThanks! \n. Yeah, that might only be my problem. It will be great if pyenv is updated and uses the new setuptools-0.9.x. At least this will solve my strange problem. \n. After updating to the new version, I have now no problem installing Python. Thanks for the help! \n. ",
    "maaru": "Thank you for your help.  I'll ignore this warning.\n. ",
    "aleiphoenix": "Looks like I forgot about the eval \"$(pyenv init -)\".\nThat works, thanks!\nOne more thing, it seems that pyenv tries to download the whole source tarball every time when pyenv install ..., could this tarball be cached, or provided in some way?\n. That really helps, Thank you!\n. Just for record. When installing Python 2.7.x (or maybe 2.x?), python-build would need to install setuptools by https://bootstrap.pypa.io/ez_setup.py, which has a --download-base argument specifying where to download the setuptools.\nIt can be passed to EZ_SETUP_OPTS environment variable, set it to self-hosted mirror to override the DEFAULT_URL.\n```\n$ export EZ_SETUP_OPTS=\"--download-base='http://your-mirror/'\"\n$ pyenv install 2.7.9\n```\n. ",
    "rodfersou": "It worked like a charm! \\o/\nCould please you merge your branch?\nThank you Yuu\n. I tried 2.4.2 install too and didn't work\n-> http://www.python.org/ftp/python/2.4.2/Python-2.4.2.tgz\nInstalling Python-2.4.2...\n* buffer overflow detected *: ./python terminated\n======= Backtrace: =========\n/lib/i386-linux-gnu/libc.so.6(__fortify_fail+0x63)[0x401b0bc3]\n/lib/i386-linux-gnu/libc.so.6(+0x10593a)[0x401af93a]\n/lib/i386-linux-gnu/libc.so.6(+0x1060e7)[0x401b00e7]\n./python(PySys_SetArgv+0x25a)[0x80e2eaa]\n./python(Py_Main+0x410)[0x8055320]\n./python(main+0x1b)[0x8054e0b]\n/lib/i386-linux-gnu/libc.so.6(__libc_start_main+0xf5)[0x400c3935]\n./python[0x8054e31]\n======= Memory map: ========\n08048000-08141000 r-xp 00000000 08:06 1080519    /tmp/python-build.20130801115817.28485/Python-2.4.2/python\n08141000-08142000 r--p 000f9000 08:06 1080519    /tmp/python-build.20130801115817.28485/Python-2.4.2/python\n08142000-08163000 rw-p 000fa000 08:06 1080519    /tmp/python-build.20130801115817.28485/Python-2.4.2/python\n08163000-08166000 rw-p 00000000 00:00 0\n094ba000-09545000 rw-p 00000000 00:00 0          [heap]\n40000000-40020000 r-xp 00000000 08:06 131815     /lib/i386-linux-gnu/ld-2.17.so\n40020000-40021000 r--p 0001f000 08:06 131815     /lib/i386-linux-gnu/ld-2.17.so\n40021000-40022000 rw-p 00020000 08:06 131815     /lib/i386-linux-gnu/ld-2.17.so\n40022000-40023000 r-xp 00000000 00:00 0          [vdso]\n40023000-40025000 rw-p 00000000 00:00 0\n40025000-40026000 r--p 005e0000 08:06 7702       /usr/lib/locale/locale-archive\n40026000-40027000 rw-p 00000000 00:00 0\n40042000-40059000 r-xp 00000000 08:06 131951     /lib/i386-linux-gnu/libpthread-2.17.so\n40059000-4005a000 r--p 00016000 08:06 131951     /lib/i386-linux-gnu/libpthread-2.17.so\n4005a000-4005b000 rw-p 00017000 08:06 131951     /lib/i386-linux-gnu/libpthread-2.17.so\n4005b000-4005d000 rw-p 00000000 00:00 0\n4005d000-40060000 r-xp 00000000 08:06 131854     /lib/i386-linux-gnu/libdl-2.17.so\n40060000-40061000 r--p 00002000 08:06 131854     /lib/i386-linux-gnu/libdl-2.17.so\n40061000-40062000 rw-p 00003000 08:06 131854     /lib/i386-linux-gnu/libdl-2.17.so\n40062000-40063000 rw-p 00000000 00:00 0\n40063000-40065000 r-xp 00000000 08:06 131984     /lib/i386-linux-gnu/libutil-2.17.so\n40065000-40066000 r--p 00001000 08:06 131984     /lib/i386-linux-gnu/libutil-2.17.so\n40066000-40067000 rw-p 00002000 08:06 131984     /lib/i386-linux-gnu/libutil-2.17.so\n40067000-400a8000 r-xp 00000000 08:06 131887     /lib/i386-linux-gnu/libm-2.17.so\n400a8000-400a9000 r--p 00040000 08:06 131887     /lib/i386-linux-gnu/libm-2.17.so\n400a9000-400aa000 rw-p 00041000 08:06 131887     /lib/i386-linux-gnu/libm-2.17.so\n400aa000-40257000 r-xp 00000000 08:06 131839     /lib/i386-linux-gnu/libc-2.17.so\n40257000-40259000 r--p 001ad000 08:06 131839     /lib/i386-linux-gnu/libc-2.17.so\n40259000-4025a000 rw-p 001af000 08:06 131839     /lib/i386-linux-gnu/libc-2.17.so\n4025a000-403a3000 rw-p 00000000 00:00 0\n403a3000-405a3000 r--p 00000000 08:06 7702       /usr/lib/locale/locale-archive\n405c0000-405db000 r-xp 00000000 08:06 131864     /lib/i386-linux-gnu/libgcc_s.so.1\n405db000-405dc000 r--p 0001a000 08:06 131864     /lib/i386-linux-gnu/libgcc_s.so.1\n405dc000-405dd000 rw-p 0001b000 08:06 131864     /lib/i386-linux-gnu/libgcc_s.so.1\nbfcfa000-bfd1c000 rw-p 00000000 00:00 0          [stack]\nBUILD FAILED\nInspect or clean up the working tree at /tmp/python-build.20130801115817.28485\nResults logged to /tmp/python-build.20130801115817.28485.log\nLast 10 log lines:\nranlib libpython2.4.a\n/usr/bin/gcc -pthread -L'/srv/env/pyenv/versions/2.4.2/lib'  -Xlinker -export-dynamic -o python \\\n                        Modules/python.o \\\n                        libpython2.4.a -lpthread -ldl  -lutil   -lm\ncase $MAKEFLAGS in \\\n        -s)  CC='/usr/bin/gcc -pthread' LDSHARED='/usr/bin/gcc -pthread -shared' OPT='-DNDEBUG -g -O3 -Wall -Wstrict-prototypes' ./python -E ./setup.py -q build;; \\\n        )  CC='/usr/bin/gcc -pthread' LDSHARED='/usr/bin/gcc -pthread -shared' OPT='-DNDEBUG -g -O3 -Wall -Wstrict-prototypes' ./python -E ./setup.py build;; \\\n        esac\nAborted\nmake: ** [sharedmods] Error 134\n. but I don't need it.. just for curiosity\n. Didn't work here.. Ubuntu 13.04 32 bits.\n$ env PYTHON_CFLAGS=\"-O0\" pyenv install 2.4.2\nInstalling Python-2.4.2...\n* buffer overflow detected *: ./python terminated\n======= Backtrace: =========\n/lib/i386-linux-gnu/libc.so.6(__fortify_fail+0x63)[0x401b0bc3]\n/lib/i386-linux-gnu/libc.so.6(+0x10593a)[0x401af93a]\n/lib/i386-linux-gnu/libc.so.6(+0x1060e7)[0x401b00e7]\n./python(PySys_SetArgv+0x25a)[0x80e2eaa]\n./python(Py_Main+0x410)[0x8055320]\n./python(main+0x1b)[0x8054e0b]\n/lib/i386-linux-gnu/libc.so.6(__libc_start_main+0xf5)[0x400c3935]\n./python[0x8054e31]\n======= Memory map: ========\n08048000-08141000 r-xp 00000000 08:06 964438     /tmp/python-build.20130801134653.16343/Python-2.4.2/python\n08141000-08142000 r--p 000f9000 08:06 964438     /tmp/python-build.20130801134653.16343/Python-2.4.2/python\n08142000-08163000 rw-p 000fa000 08:06 964438     /tmp/python-build.20130801134653.16343/Python-2.4.2/python\n08163000-08166000 rw-p 00000000 00:00 0\n0819e000-08229000 rw-p 00000000 00:00 0          [heap]\n40000000-40020000 r-xp 00000000 08:06 131815     /lib/i386-linux-gnu/ld-2.17.so\n40020000-40021000 r--p 0001f000 08:06 131815     /lib/i386-linux-gnu/ld-2.17.so\n40021000-40022000 rw-p 00020000 08:06 131815     /lib/i386-linux-gnu/ld-2.17.so\n40022000-40023000 r-xp 00000000 00:00 0          [vdso]\n40023000-40025000 rw-p 00000000 00:00 0\n40025000-40026000 r--p 005e0000 08:06 7702       /usr/lib/locale/locale-archive\n40026000-40027000 rw-p 00000000 00:00 0\n40042000-40059000 r-xp 00000000 08:06 131951     /lib/i386-linux-gnu/libpthread-2.17.so\n40059000-4005a000 r--p 00016000 08:06 131951     /lib/i386-linux-gnu/libpthread-2.17.so\n4005a000-4005b000 rw-p 00017000 08:06 131951     /lib/i386-linux-gnu/libpthread-2.17.so\n4005b000-4005d000 rw-p 00000000 00:00 0\n4005d000-40060000 r-xp 00000000 08:06 131854     /lib/i386-linux-gnu/libdl-2.17.so\n40060000-40061000 r--p 00002000 08:06 131854     /lib/i386-linux-gnu/libdl-2.17.so\n40061000-40062000 rw-p 00003000 08:06 131854     /lib/i386-linux-gnu/libdl-2.17.so\n40062000-40063000 rw-p 00000000 00:00 0\n40063000-40065000 r-xp 00000000 08:06 131984     /lib/i386-linux-gnu/libutil-2.17.so\n40065000-40066000 r--p 00001000 08:06 131984     /lib/i386-linux-gnu/libutil-2.17.so\n40066000-40067000 rw-p 00002000 08:06 131984     /lib/i386-linux-gnu/libutil-2.17.so\n40067000-400a8000 r-xp 00000000 08:06 131887     /lib/i386-linux-gnu/libm-2.17.so\n400a8000-400a9000 r--p 00040000 08:06 131887     /lib/i386-linux-gnu/libm-2.17.so\n400a9000-400aa000 rw-p 00041000 08:06 131887     /lib/i386-linux-gnu/libm-2.17.so\n400aa000-40257000 r-xp 00000000 08:06 131839     /lib/i386-linux-gnu/libc-2.17.so\n40257000-40259000 r--p 001ad000 08:06 131839     /lib/i386-linux-gnu/libc-2.17.so\n40259000-4025a000 rw-p 001af000 08:06 131839     /lib/i386-linux-gnu/libc-2.17.so\n4025a000-403a3000 rw-p 00000000 00:00 0\n403a3000-405a3000 r--p 00000000 08:06 7702       /usr/lib/locale/locale-archive\n405c0000-405db000 r-xp 00000000 08:06 131864     /lib/i386-linux-gnu/libgcc_s.so.1\n405db000-405dc000 r--p 0001a000 08:06 131864     /lib/i386-linux-gnu/libgcc_s.so.1\n405dc000-405dd000 rw-p 0001b000 08:06 131864     /lib/i386-linux-gnu/libgcc_s.so.1\nbff6b000-bff8d000 rw-p 00000000 00:00 0          [stack]\nBUILD FAILED\nInspect or clean up the working tree at /tmp/python-build.20130801134653.16343\nResults logged to /tmp/python-build.20130801134653.16343.log\nLast 10 log lines:\nranlib libpython2.4.a\n/usr/bin/gcc -pthread -L'/srv/env/pyenv/versions/2.4.2/lib'  -Xlinker -export-dynamic -o python \\\n                        Modules/python.o \\\n                        libpython2.4.a -lpthread -ldl  -lutil   -lm\ncase $MAKEFLAGS in \\\n        -s)  CC='/usr/bin/gcc -pthread' LDSHARED='/usr/bin/gcc -pthread -shared' OPT='-DNDEBUG -g -O3 -Wall -Wstrict-prototypes' ./python -E ./setup.py -q build;; \\\n        )  CC='/usr/bin/gcc -pthread' LDSHARED='/usr/bin/gcc -pthread -shared' OPT='-DNDEBUG -g -O3 -Wall -Wstrict-prototypes' ./python -E ./setup.py build;; \\\n        esac\nAborted\nmake: ** [sharedmods] Error 134\n. Like I said before.. I don't need python 2.4.2 .. I'm just trying to help :)\n. ok, thank you\n. Oh sorry, my mistake.  I thought nuitka was something like a full python distribution, not a package.\nThank you for the answer.\n. ",
    "jangho": "Cool\n. ",
    "shoark7": "Thanks man, it works :)\n. ",
    "sparkleholic": "\ud83d\udd11 to solve a problem.\nThanks!\n. ",
    "Adynatos": "Hi\nI had the same problem but i managed it by instaling libbz2-dev. Maybe that will also work for you.\n. ",
    "artem-a": "@Adynatos Thanks!\n. ",
    "alfetopito": "I also face this issue to install python.\n@yyuu I would suggest the installer detect first if required libraries are available and tell the user everything that is needed in order to complete the installation.\nHere is what you have to install before trying to install python @starlocke \nsudo apt-get install libreadline-dev libbz2-dev zlib1g-dev libssl-dev\nIt might be that you need something else, but those were all for me.\n. Mine worked only with those libraries I mentioned because I didn't notice that build-essential was installed by other package.\n@yyuu I didn't know about pyenv doctor, thanks for pointing it out.\nAnd I agree with @starlocke that a mention on README would help us all on this.\n. ",
    "kenneth-reitz": "@yyuu it would be really nice to have a list of the packages needed for the common systems. Perhaps a wiki page?\n. aha! I found the page, excellent. \nIt may be a good idea to point people with build issues to that page, or perhaps link to it when the exception is raised. Would save a lot of unnecessary issues being opened :)\nhttps://github.com/yyuu/pyenv/wiki/Common-build-problems\n. \\o/\n. Ah thanks, I'll send a pull request there :). not that i'm aware of, just these lines are required. . https://github.com/rbenv/rbenv/pull/1038. ah, interesting. \nIn any case, these commands should only be run during a login session, not during every shell spawn.. I have only tested this with MacOS, so I'm not sure, actually. This is the first time I've heard this. . Can set honor an environment variable maybe, like PYENV_SKIP_ACTIVATION, to skip these activations, if needed?. or PYENV_SKIP_ACTIVATION could be set by a smart program (e.g. pipenv) that launches subshells. @AlJohri you're far from alone, though. TONS of people have their shells mis-configured, and are blaming it on pipenv. . ",
    "changsijay": "sorry, I  don't very understand the specific steps,\nMethod 1\nOn ubuntu 13.04,\ncp /lib/x86_64-linux-gnu/libcrypto.so.1.0.0  ~.pyenv/versions/2.6.6/lib/python2.6/lib-dynload/\nthen tar ~/.pyenv to ubuntu 10.04, \nLD_LIBRARY_PATH=~/.pyenv/versions/2.6.6/lib/python2.6/lib-dynload python it error:\npython: /lib/libc.so.6: version GLIBC_2.14 not found (required by python)\nthen I copy /lib/x86_64-linux-gnu/libc.so.6 from ubuntu 13.04 into it and try again, I got:\n/usr/bin/env: error while loading shared libraries: __vdso_time: invalid mode for dlopen(): Invalid argument\nMethod2\nI see above 2 patches also under \n~/.pyenv/plugins/python-build/share/python-build/patches/2.6.6/Python-2.6.6/\ndoes that mean when I pyenv install 2.6.6 also applied them already?\n. got it , thanks a lot :+1: \n. got it. thank you very much :100: \n. ",
    "mnencia": "If you guarantee that the 2nd property won't change in the future, I'll use that property. It looks like faster and cleaner than inspecting the script to check if it includes the PYENV_ROOT declaration.\n. Ok, It's sufficient for me.\n. ",
    "celeryclub": "I don't know Shell very well, but at least I can help with something. :)\n. ",
    "apbarrero": "Regarding installation, we might consider providing a installation script to perform the described steps automatically, but it may require some more work to support installation at custom directory, $HOME/.pyenv by default.\nAlso install latest stable version by default or let user choose any previous/development version.\n. Good to know about pyenv-installer, I'll give it a try and see if I can contribute.\n. ",
    "Arbitrageur": "Thanks for your comment.\nI tried with this command as you suggested with additional option '--prefix=$(pyenv root)' (without it, it gave me another error)\n\nenv PYTHON_CONFIGURE_OPTS=\"--enable-framework=$(pyenv root)/versions/3.3.2 --enable-toolbox-glue --enable-ipv6 --enable-big-digits --enable-unicode --with-threads --prefix=$(pyenv root)\" pyenv install 3.3.2\n\nBut it gave me these:\nLast 10 log lines:\n(cd /Users/yeolhyunkwon/.pyenv/versions/3.3.2/Python.framework/Versions/3.3/bin; ln -s idle3.3 idle3)\nrm -f /Users/yeolhyunkwon/.pyenv/versions/3.3.2/Python.framework/Versions/3.3/bin/pydoc3\n(cd /Users/yeolhyunkwon/.pyenv/versions/3.3.2/Python.framework/Versions/3.3/bin; ln -s pydoc3.3 pydoc3)\nrm -f /Users/yeolhyunkwon/.pyenv/versions/3.3.2/Python.framework/Versions/3.3/bin/2to3\n(cd /Users/yeolhyunkwon/.pyenv/versions/3.3.2/Python.framework/Versions/3.3/bin; ln -s 2to3-3.3 2to3)\nrm -f /Users/yeolhyunkwon/.pyenv/versions/3.3.2/Python.framework/Versions/3.3/bin/pyvenv\n(cd /Users/yeolhyunkwon/.pyenv/versions/3.3.2/Python.framework/Versions/3.3/bin; ln -s pyvenv-3.3 pyvenv)\nrm -f /Users/yeolhyunkwon/.pyenv/versions/3.3.2/Python.framework/Versions/3.3/share/man/man1/python3.1\n(cd /Users/yeolhyunkwon/.pyenv/versions/3.3.2/Python.framework/Versions/3.3/share/man/man1; ln -s python3.3.1 python3.1)\n/usr/local/bin/python-build: line 921: /Users/yeolhyunkwon/.pyenv/versions/3.3.2/bin/python: No such file or directory\nIt seems that python is located in \"/Users/yeolhyunkwon/.pyenv/versions/3.3.2/Python.framework/Versions/3.3/bin\"\nbut python-build looked for \"/Users/yeolhyunkwon/.pyenv/versions/3.3.2/bin/python.\"\n. You're right.\nAfter my second comment, I tried again with some variations and I come to the same conclusion you've shown above.\nI think I need it for installation of pyobjc.\nI'm building an GUI app.\n. Hmm.. I was stupid... I installed python 3.3.2 without --enable-framework and succeeded to install pyobjc, too.\nI thought I was failed to install pyobjc because of the compile option.\nThanks and I'll close this issue.\n. ",
    "jasonbrent": "A number of things require python to be built as a framework including sip and pyqt (pre-requisites for vitables, an hdf5\nutility).\nCurrently fails:\n1) PYTHON_CONFIGURE_OPTS=\"--enable-framewok\" pyenv install 2.7.6\nFails because it attempts to install to the system Python framework and doesn't have write access.\n2) PYTHON_CONFIGURE_OPTS=\"--enable-framework=$(pyenv root)/versions/2.7.6\" pyenv install 2.7.6\nFails in the 'frameworkinstallmaclib' portion of the build/install due to the 'config' directory in the right hand side\nof the path not existing:\n..snip..\n        ln -fs \"../../../$(PYTHONFRAMEWORK)\" \"$(DESTDIR)$(prefix)/lib/python$(VERSION)/config/libpython$(VERSION).a\"\n..snip..\nThis fails on 2.7.4 and 2.7.6 at least\nManually making 'config' in the destination directory allows the build/install to complete and then function properly. I \ndon't grok the python build system enough where to fix it in the makefile configuration itself.\nI'll file a top-level issue on this as it'd be great to properly support frameworks.\n. ",
    "rcarmo": "This is broken in 2018. See #1003.. Every month or so I come up against this again when setting up a new dev machine or build server, so I'd really like to see a permanent fix for python-build. Maybe even (gasp) a Python script to download the tarball?\nAs of today, I'm getting this on OSX 10.11.6 (which ships with curl 7.43) and the latest pyenv from homebrew (20160726).\nInstalling wget1.18 didn't fix it offhand, because curl is tried first. Since I can't really risk replacing the built-in curl (I can do so using brew, but I'd rather not break some native OSX scripts that I know use curl and libcurl) and aliasing curl every time isn't an option,  I just went into python-build and switched the order of wget vs curl.\nBesides having this break on outdated servers (which I'll grant need upgrading anyway), it's kind of annoying for it not to work on an otherwise \"regular\" configuration that ships out of the box from Apple, so I really would love to see this fixed. Having SNI on the server is great, sure, and you can't fix that, but could you please consider fixing python-build in this regard?\n. I'm also stumped by this. \nPYTHON_CONFIGURE_OPTS=\"--enable-framework=$(pyenv root)/versions/2.7.15/\" pyenv install 2.7.15\n...does not work and tries to write into /Applications, failing with permission denied as per the build log file:\n...\nclang -g -O2 -fno-strict-aliasing -fno-common -dynamic -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -o doscript.o -c ./doscript.m\nclang -g -O2 -fno-strict-aliasing -fno-common -dynamic -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -o main.o -c ./main.m\nclang -L/usr/local/opt/readline/lib -L/usr/local/opt/readline/lib -L/usr/local/opt/openssl/lib -L/Users/rcarmo/.pyenv/versions/2.7.15/lib  -o \"Python Launcher\" FileSettings.o MyAppDelegate.o MyDocument.o PreferencesWindowController.o doscript.o main.o -framework AppKit -framework Carbon\nrm -fr \"Python Launcher.app\"\nDYLD_FRAMEWORK_PATH=/var/folders/58/htdqsjc14l16_gpymyhd92l40000gq/T/python-build.20180830112234.46967/Python-2.7.15 ../../python.exe ./../../Lib/plat-mac/bundlebuilder.py \\\n        --builddir=. \\\n        --name=\"Python Launcher\" \\\n        --executable=\"Python Launcher\" \\\n        --iconfile=./../Icons/PythonLauncher.icns \\\n        --bundle-id=org.python.PythonLauncher \\\n        --resource=./../Icons/PythonSource.icns \\\n        --resource=./../Icons/PythonCompiled.icns \\\n        --resource=./English.lproj \\\n        --resource=./factorySettings.plist \\\n        --plist Info.plist \\\n        build\nBuilding './Python Launcher.app'\nCopying files\nDone.\ntest -d \"/Applications/Python 2.7\" || mkdir -p \"/Applications/Python 2.7\"\nmkdir: /Applications/Python 2.7: Permission denied\nmake[2]: *** [install] Error 1\nmake[1]: *** [install_PythonLauncher] Error 2\nmake: *** [frameworkinstallapps] Error 2\nSince I need a .dylib version to build PyObj-C apps and don't want to go the kludgey way and run the build through sudo, this is a blocking issue for me with pyenv.... I've been digging into the configure scripts and the location of the launcher is determined by FRAMEWORKINSTALLAPPSPREFIX, which defaults to /Applications inside configure and does not seem to be trivially overridable.. ",
    "MortalCatalyst": "I have rbenv installed the exact same way and it persists. Wanted to know what difference pyvenv has so it can be fixed.\n. After changing the order and other details around creating a bash_profile\nand deleting then deleting it. I have got it too persist. However the only\nthing that I did different on the attempt that worked was to put my pvenv\nbashrc entries above the source perlbrew entry.\nSo it appears that perlbrew in someway interferes with persistence if\ncalled from bashrc before pyenv, well maybe?\nOn Mon, Sep 9, 2013 at 5:48 PM, Yamashita, Yuu notifications@github.comwrote:\n\nIt sounds strange. The significant changes between rbenv and pyenv are in\nruby-build and python-build. There is nothing special in pyenv-initcompared with\nrbenv-init.\nPlease review your bash configuration and retry again.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/yyuu/pyenv/issues/56#issuecomment-24050773\n.\n. I do want to be easily able to change between versions though. without unsetting a version and creating a global and then unsetting that and creating the original as gloabl again. just to quickly switch between versions?\n. The issue is that by using system I get python 2.7.11 not 3.5.1\n\nbash\nsayth@sayth-E6410:~$ pyenv global system\nsayth@sayth-E6410:~$ python --version\nPython 2.7.11+\nsayth@sayth-E6410:~$\nNo way to choose which system I want\n. Thanks\n. ",
    "weswigham": "Alright, much nicer\n. ",
    "appleparan": "However, still use ~/.pyenv/shims/python. There is no way to go back to use /usr/local/bin/python?\n. ",
    "jechols": "I'd like to just suggest adding a nicer error message when this happens, as it's liable to frustrate users who may end up choosing not to try out pyenv.  This isn't an error in pyenv, it's true, but it's still an issue that could give users a negative first impression.\n. ",
    "ahmadia": "Cygwin 64-bit is a new platform and they're still working out some of the bugs.  This isn't a pyenv issue, it's a problem with the current Cygwin source installer for Python.\n. ",
    "xymor": "I get the exact same error when running CONFIGURE_OPTS=\" --with-system-ffi \" pyenv install 2.7.6\npkg-config --print-errors libffi\nreturns no errors\n$ cygcheck -l libffi-devel | fgrep .h\n/usr/lib/libffi-3.0.13/include/ffi.h\n/usr/lib/libffi-3.0.13/include/ffitarget.h\n. ",
    "mcandre": "Windows isn't my favorite development platform either, but it's nice to be compatible for their benefit. There are development tools that aren't Unix compatible, and it's annoying to have to go back and forth between them.  You end up with a build system that needs multiple operating systems just to build the application.\n. How granular does the Python Launcher support version numbers? Would #!python2.6.0 work, or just #!python2?\nCan the Python Launcher parse the version in #!/usr/bin/env python[version] shebangs popular in Unix? It would stink to have to constantly change the shebangs back and forth between Unix and Windows.\n. > the Windows Subsystem for Linux\nNope.. Thanks thomasjo! That fixes it.\n. Dependencies (all git-sourced):\n- https://github.com/Doist/hash_ring\n- https://github.com/leifker/SpiffWorkflow\n- https://github.com/mumrah/kafka-python\n- https://github.com/seajosh/python-instagram\nMy coworkers suggest that virtualenv does not have the src/ folder creation issue, only pyenv.\n. Thanks for the tip! Yes, -e editable is used. I might remove it for now.\nI assume the 'global' default applies to pyenv contexts. Would it make sense to encourage pip to make the default ~/.pyenv/src for pyenv contexts?\n. Not sure why behave wasn't on PATH at first, but it works now!\n. Do we need to patch the 3.1.2- recipes to work with newer versions of Ubuntu?\nhttp://stackoverflow.com/a/16300598\n. I think the [3.0.1, ..., 3.1.2] formulas were simply never patched the way 3.1.3 was.\n. Retried with an older Ubuntu version, 12.04 Precise Pangolin, same error.\n. The readline patch has too much fuzz in Pyton 3.1.2 on Ubuntu 14.04:\n```\npyenv install 3.1.2 &&     pyenv global 3.1.2\nDownloading Python-3.1.2.tgz...\nInstalling Python-3.1.2...\npatching file ./setup.py\npatching file ./Lib/ssl.py\npatching file ./Modules/_ssl.c\nHunk #3 succeeded at 1702 (offset 5 lines).\npatching file ./Modules/readline.c\nHunk #1 FAILED at 231.\nHunk #2 FAILED at 774.\nHunk #3 FAILED at 819.\nHunk #4 succeeded at 756 with fuzz 1 (offset -121 lines).\nHunk #5 FAILED at 936.\n4 out of 5 hunks FAILED -- saving rejects to file ./Modules/readline.c.rej\nBUILD FAILED (Ubuntu 14.04 using python-build 20150719-13-g5ff089d)\nInspect or clean up the working tree at /tmp/python-build.20150817182108.40\nResults logged to /tmp/python-build.20150817182108.40.log\nLast 10 log lines:\n/tmp/python-build.20150817182108.40 /\n/tmp/python-build.20150817182108.40/Python-3.1.2 /tmp/python-build.20150817182108.40 /\nThe command '/bin/sh -c pyenv install 3.1.2 &&     pyenv global 3.1.2' returned a non-zero code: 1\n```\n. Retried with an older Ubuntu version, 12.04 Precise Pangolin, same error. These formulas could really use a patch.\n. @yyuu Would you mind trying on Ubuntu 14.04, especially Docker? There's something wrong with the build for these Python versions, whereas other Python versions build just fine.\n. Thank you, much improved!\nPython 2.4.3 build now succeeds, though it still complains about failing to find readline on Ubuntu 14.04:\nDownloading Python-2.4.3.tgz...\n-> http://python.org/ftp/python/2.4.3/Python-2.4.3.tgz\nInstalling Python-2.4.3...\npatching file setup.py\nHunk #2 succeeded at 239 with fuzz 2 (offset -4 lines).\npatching file configure\nHunk #1 succeeded at 20576 (offset -222 lines).\npatching file configure.in\nHunk #1 succeeded at 3147 (offset 75 lines).\nWARNING: The Python readline extension was not compiled. Missing the GNU readline lib?\n. Confirmed, configuring ENV LC_ALL C.UTF-8 in Docker fixes the issue :)\n. Ah, pyenv local and pyenv global do not require eval \"$(pyenv init -)\"?\n. ",
    "CamiloMM": "As someone who is just in need of running Python but am clueless as how things are done in it, this StackOverflow answer makes it seem like it's now simple to have support for multiple pythons in Windows. I don't know if it's true but maybe this helps someone in my situation.\n. @mcandre fuck if I know. Python seems as easy to deploy on Windows as ksh scripts. Actually, one option is to port Python code to Objective-C to make it easier to deploy on Windows!\n. ",
    "ut-adamc": "\nI'm no longer using Windows. I don't like to waste my time with such thing.\n\nSeems short-sighted to me, if you care about pyenv spreading. A lot of us work in places where we have to spend some of our time in Windows, and I'm more likely to prefer a tool I can use across environments than one that only runs in some of them.\nI'm not a fan of Windows either, but the availability of things like virtualenvwrapper across environments has made it much easier for me to justify using them.\n. ",
    "ftomassetti": "I also do not use Windows but users of my open-source projects do, so it would be great to have support for pyenv on Windows. I would use it together to AppVeyor to test my software on Windows without having Windows\n. ",
    "chriskrycho": "As others have commented: Windows development may not be awesome, but a lot of us do use Windows for work because we have to (and some people just love it). I understand that you don't want to spend the time on it yourself, of course. Assuming someone could write Windows-friendly scripting, though, would you potentially accept PRs for it?\n. ",
    "autolife": "you can try pywin[https://github.com/davidmarble/pywin]\n. In  the centos 5.10,we should set the  Setting http://yyuu.github.io/pythons as PYTHON_BUILD_MIRROR_URL in the .bashrc. then it runs ok. thank you very much\n. ",
    "edbordin": "I'm interested in getting this working on Windows in my spare time. A couple of things I wouldn't mind feedback on though:\n1. pyenv install works by compiling python from source. Building python on Windows isn't actually too hard (I just built Python 3.6 with no issues). But getting a comprehensive set of build tools installed looks like a pain. To build all versions of python 2.x.x and 3.x.x you need VC++ 9.0, 10.0 and 14.0 and they all have their own fairly convoluted installation steps. So, perhaps an easier method would just be to download the official Windows builds. Is anyone heavily relying on adding custom build flags/patches etc. to their interpreter?\n\nGiven how many bash scripts have been written, the easiest approach would probably be to patch pyenv so that it works in MSYS bash on Windows. I think this would still be useful, given that once an environment has been created it is relatively self-contained. Anyone see any obvious problems with this approach?. @blueyed Yeah, I wasn't too sure about that project because (a) it seems inactive, and (b) it doesn't seem to implement the pyenv install command at all atm.... @raiderrobert Most of the down-thumbing was on the original response to the feature request which quite frankly had an arrogant and dismissive tone. Of course the maintainers owe nothing to anybody, but if you address people in that manner you cannot reasonably expect zero backlash. Being generous doesn't give you unlimited license to be a jerk to everybody.\n\nTo me, the majority of the responses here have just been constructive feedback on why people would find this feature useful. Whether it is feasible given how much time the devs have is a totally different story - perhaps making that point would have a been a better way to close the issue.\nHaving said all that, I'd also like to thank the maintainers for a really useful tool.. ",
    "slidenerd": "@yyuu  i have a mac and windows machine and I would like to know how to run this on Windows since I use both for testing so that sorta comment s gonna get a lot of dislikes even on GitHub. ",
    "raiderrobert": "Came here to see if this ticket has possibly changed or had an update to it. Of course, I'm disappointed to not see it, but the tone in this thread is totally wrong.\nThe griping and down-thumbing you're doing here has been enough to drive other maintainers away from other projects. This vast majority of this project has been down by 5 people. And they've likely done so to solve their own particular problem, and now we all are benefiting from them doing the extra work of sharing it--this is not a light task.\nI doubt any of them get paid to do this, and even if they are, they're not getting paid by you all. Just being a user doesn't entitle you to features much less one as huge as this.\nSo thanks maintainers! We really appreciate all that you do on this project for the community.. ",
    "flying-sausages": "If you're still trying to find out how to get pyenv running on Windows, you might want to read up a little about the Windows Subsystem for Linux. ",
    "Almenon": "Unfortunately it looks like automatic switching of virtual environments offered by pyenv-virtualenv plugin is simply not possible with windows cmd :(\nhttps://superuser.com/questions/933527/windows-run-script-on-cd. It didn't work on wsl for me @cicorias.  How did you install it?. Same issue. @yyuu can you enable issues in pyenv-doctor please?. Same issue, pkg-config and openssl 1.1.0 installed, as well as all the other packages reccomended for ubuntu instance on the wiki.\n\nCONFIGURE_OPTS=\"--with-openssl=$(brew --prefix openssl@1.1)\" pyenv install 3.6.6\n\ndidn't work for me :(\nI'm using Ubuntu 18.04.1 w/ ubuntu subsystem for windows\n. ",
    "cicorias": "work fine in WSL on Windows 10.  So, I kinda agree, nothing to do here.. I\u2019ve been using Wlinux from the App Store. What distribution are you using and what errors? There probably missing packages that wlinux adds.. ",
    "kirankotari": "On the inspiration of this thread I have ported pyenv for windows which contains basic features of pyenv. \nLink: pyenv-win \nI want to thanks following people in the thread. Who made me, to took a decision on porting for windows.\n@mcandre @ftomassetti @chriskrycho @edbordin @raiderrobert. @yyuu There is a way to install the pyenv out site of python site-packages, that doesn't need admin privileges. I have ported pyenv for windows with pip install feature.\nThis is my setup file: https://github.com/pyenv-win/pyenv-win/blob/master/setup.py\nInstallation steps: pip install pyenv --target $HOME/.pyenv\nHow to get updates from pip: link. > Solution - Add to your shell (~/.bashrc or ~/.zshrc) :\n\nexport PATH=\"/Users/username/.pyenv:$PATH\"\neval \"$(pyenv init -)\"\nRemplace username by your MacBook user.\nRefresh your terminal env, example: $ source ~/.zshrc (or restart your terminal)\n\nFor people who are using fish shell:\nset PYENV_ROOT $HOME/.pyenv\nset -x PATH $PYENV_ROOT/shims $PYENV_ROOT/versions $PATH\npyenv rehash\n. @yyuu update the paths in test files. \nExpected in following location: pyenv.bats\nbats\n@test \"default PYENV_ROOT\" {\n  PYENV_ROOT=\"\" HOME=/home/mislav run pyenv root\n  assert_success\n  assert_output \"/home/mislav/.pyenv\"\n}. I too agree of not getting merged and changing nearly 600 files is not good. The new structure is like python package which is recognised by pypi and pip install. \nwhen I am porting pyenv for windows, I have successfully able to do pip install pyenv-win thought the similar approach might help pyenv.. Checking for alternative solutions without changing the structure.. ",
    "bcbcarl": "I got some errors like this:\nImportError: The Python sqlite3 extension was not compiled. Missing the SQLite3 lib?\nYou should add a dependencies or requirements section to README file.\n. ",
    "luipugs": "From what I understand the cause is if Python 2.7 is configured with readline support, it will use the ncurses library that the libreadline is configured with. Mixing ncurses and ncursesw caused a segfault in FreeBSD so they decided to do all ncurses or all ncursesw. Now, in older versions of Debian libreadline was dependent on libncurses; I understand this was fixed in Debian sid by compiling libreadline against libtinfo instead. Would this be possible in pyenv?\nMore info on the issue I mentioned here.\n. That did the trick, thanks. I'll now see if it's possible on older distributions.\n. ",
    "tarruda": "@yyuu perhaps pyenv could set LD_LIBRARY_PATH from the shim when invoking a python binary compiled with '--enable-shared'? Setting LD_LIBRARY_PATH explicitly on bashrc has the problem that system applications(ubuntu apps for example) that depend on libpython will be dynamically linked to the wrong file.\nIt would be nice to build some apps like vim or weechat against a libpython compiled with pyenv\n- Update: by default pyenv fails to build python with '--enable-shared'  since the installation process will invoke the installed python to complete the installation of pip/setuptools set so pyenv should also set LD_LIBRARY_PATH during installation.\n. I found a better way to do it that doesn't depend on pyenv setting LD_LIBRARY_PATH:\nPYTHON_CONFIGURE_OPTS='--enable-shared' LDFLAGS=\"-Wl,-rpath=$HOME/.pyenv/versions/2.7.5/lib\" pyenv install 2.7.5\nThis will add the the python lib directory to the rpath of the python executable. The rpath is searched before LD_LIBRARY_PATH and ld.conf.so, so there's no way pyenv's installed python will try to load the system's libpython which may be of a different version.\n. ",
    "mark0978": "Here is how we deal with it\nenv PYTHON_CONFIGURE_OPTS=\"--enable-shared\" LD_LIBRARY_PATH=~/.pyenv/versions/2.7.5/lib/ pyenv install -k 2.7.5\nConsidering the # of webapps that need mod_wsgi, this really needs to be an option, or maybe even the default.\n. Thanks, we just started messing with rpath for some of our SO's yesterday.\n. ",
    "seanfisk": "We just got this working with rpath too! Thanks for being on top of this, @yyuu!\n. Oh, that's awesome! My fault on the oversight. Thanks, and feel free to close.\n. I'm not currently in a position to leave an extremely detailed response, but the tools that you mentioned (pyenv, tox, Setuptools, and Travis-CI) are in my opinion each the best of their class.\nI've created Python Project Template as a starting point for using these tools and more together. It's not perfect, but it solves a lot of problems for me. In addition, many people have created templates off Audrey Roy's excellent Cookiecutter (see cookiecutter-pypackage). Those are similar in purpose to mine. Or feel free to create your own configuration.\nAnother excellent source of information is Kenneth Reitz's Hitchhiker's Guide to Python.\nI hope that helps. The setup is a bit complex, but you're on the right track.\n. Haha, I was wondering that too at first and @yyuu was kind enough to enlighten me. It's mentioned in the README but there's no example. Try this:\nbash\n$ cd /path/to/my/project\n$ pyenv local 2.6.9 2.7.6 3.4.0\n$ tox\nThe first one listed is the default. Also, you don't have to install anything into those versions or worry about tox modifying them as tox does its own thing. Let me know if that's what you were after.\n. Great, glad you got it resolved!\n. @flanaman Yes, that's the same issue. Like I said, it's not a bug per se\u200a\u2014\u200ait's just that pyenv expects to manage only Python-related binaries while Anaconda does not take that approach.\n. @yyuu I just got a chance to try this out. It works exactly as expected; thanks so much! I really appreciate your responsiveness and willingness to make this awesome project even better!\n. ",
    "pingsoli": "I use fish shell, what should I do ?\nenv PYTHON_CONFIGURE_OPTS=\"--enable-shared\" LD_LIBRARY_PATH=~/.pyenv/versions/2.7.5/lib/ pyenv install -k 2.7.5 works in bash shell, but not in fish shell.\n. I solved it.\neval (env YTHON_CONFIGURE_OPTS=\"--enable-shared\" pyenv install 3.6.5) works in fish shell.. ",
    "s1341": "Hi,\nSo I've played with it a bit and I have found the following to work:\nThis works, but requires LD_LIBRARY_PATH to be set at run time:\nCONFIGURE_OPTS=\"LDFLAGS=-m32 CFLAGS=-m32 --enable-shared\" LD_LIBRARY_PATH=`pwd`/versions/2.7.4/lib:$LD_LIBRARY_PATH pyenv install 2.7.4 -vfk\nThis is better. It doesn't require LD_LIBRARY_PATH at all. There is, however, an issue with bash quoting or whatever which causes this to fail on stock pyenv. Echoing the command at line 541 in pyenv-build to a file and then executing that file solves this issue. \nPYTHON_CONFIGURE_OPTS='LDFLAGS=\"-m32 -Wl,-rpath=/root/pyenv-tests/pyenv/versions/2.7.3_32bit/lib\" CFLAGS=-m32 --enable-shared' VERSION_NAME=2.7.3_32bit pyenv install 2.7.3 -vfk\nThe following seems to work on OSX, somehow without any DYLIB paths or PYTHONHOME: Note that you need to brew install zlib, readline and sqlite with --universal, and the same bash quoting issue needs to be worked around here too. \nPYTHON_CONFIGURE_OPTS='LDFLAGS=\"-L/usr/local/opt/zlib/lib -L/usr/local/opt/readline/lib -L/usr/local/opt/sqlite/lib -m32\" CFLAGS=\"-m32 -I/usr/local/opt/zlib/include -I/usr/local/opt/readline/include -I/usr/local/opt/sqlite/include\" --enable-shared' VERSION_NAME=2.7.3_32bit pyenv install 2.7.3 -vfk\nIt's probably worth determining how to add rpaths here too. \nAll in all, changes to stock pyenv:\n- comment out the unset of VERSION_NAME in order to be able to give 'aliased' names for e.g. 2.7.3-32bit. Perhaps it would be useful to add an --as argument to pyenv install. \n- work around the bash quoting issue in order to be able to specify LDFLAGS containing spaces. I would be very grateful for assistance in resolving this issue properly. I couldn't figure out how to quote the LDFLAGS correctly so that it would be passed sanely to configure. \nHow would it be best to integrate this into pyenv? Custom definitions? A patch to add -32 (like --debug)? Is anyone else even interested in this?\n. I have not yet completed implementing this. Waiting for some feedback from @yyuu. \nWhat os are you running?\n\nOn Dec 5, 2013, at 19:29, Starsky Lara notifications@github.com wrote:\nI am sorry i am new with pyenv. what i need to do for have python 2.6.9 in 32bit and also install python 3.3.0 32bits and 64 bits. i cant do it. thanks\n\u2014\nReply to this email directly or view it on GitHub.\n. @yyuu I looked at your branch. I think we need to add the rpath stuff and enable shared for this to really work properly. In most of the cases I've encountered, the reason for having a 32bit python in the first place is because some 32bit application wants to link against it. \n. I'd also prefer that. Unfortunately that'd mean rewriting the parse_options function, which currently doesn't support arguments to options. I wanted to keep my commit short to increase the chances it'd get pulled.\n. @yyuu @thomasjo Would you be open to a rewrite of parse_options (for python-build and python-install) to use getopt instead of the current (naive) parsing?\n. @thomasjo Do you have permissions to merge a PR?\n\nIf you'd be willing to do the getopt stuff, that'd be great. I'm trying to deal with a bug to do with LDFLAGS options specified in environment disappearing. \n. @thomasjo Heh. So are you going to do the getopt?\n. @thomasjo ok. I'll wait to see how you manage ;)\n. This seems like a bit of a backwards solution. Will you include this alias.bash script in the official git/distribution?\n. I understand. This makes it difficult to distribute pyenv automatically to a large number of boxes.\nWhat if we built the contents of alias.bash into python-install, allowing the version to be specified via an env argument instead of an \"--alias\" option to pyenv install?\n. Ok. I guess doing it as a plugin is not too bad. @yyuu are you on IRC somewhere? I want to discuss some other things.\n. Ok. I will build a new repo for this plugin (alias) just as you suggested.\nIn addition to this (and the other PR I sent today related to LDFLAGS/CFLAGS), I need to be able to change environment variables (such as LD_LIBRARY_PATH) when pyenv switches to a new shell.\nDo you think that it would be possible to add \"shell\" to the list of hookable commands?\n. ok. I'll look into that.\n. As per @yyuu suggestion, implemented alias as a plugin here https://github.com/s1341/pyenv-alias.\nClosing this issue.\n. @yyuu will you add it to the plugins page?\n. Ok. Done. Thanks\n. @yyuu What about this one? Will you merge it? \nWithout this, you can't build a 32bit python on a 64bit host, as the LDFLAGS specified as environment to pyenv install are overwritten.\n. Ok.\n. If it needs re-work, let me know and perhaps I can help come up with an alternate solution.\n. I ran both the test suites (pyenv and python-build) without getting any errors. Do you have any idea where this is failing?\n. Yeah. I figured it was something like this. Note however that what I fixed is that the call to package_option was dropping the values of the variables specified in the pyenv install environment.\nI.e. I believe this patch will still be needed after you fix the issue you described above.\n. Nope. Still fails.\n. @yyuu?\n. Even though dropping the setuptools version didn't make a difference?\n. I tested this with the latest master. It works. I created a pull request (PR #271) to add the patch needed.\n. I have the same version of OSX and get the following error:\nif test \"\"; then \\\n        gcc -o Python.framework/Versions/2.6/Python  -dynamiclib \\\n            -isysroot \"\" \\\n            -all_load libpython2.6.a -Wl,-single_module \\\n            -install_name /Users/srubenst/infrastructure/sasenv/pyenv/versions/2.6.9/Python.framework/Versions/2.6/Python \\\n            -compatibility_version 2.6 \\\n            -current_version 2.6; \\\n        else \\\n        /usr/bin/libtool -o Python.framework/Versions/2.6/Python -dynamic  libpython2.6.a \\\n             -lSystem -lSystemStubs -arch_only x86_64 -install_name /Users/srubenst/infrastructure/sasenv/pyenv/versions/2.6.9/Python.framework/Versions/2.6/Python -compatibility_version 2.6 -current_version 2.6 ;\\\n    fi\nerror: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/libtool: can't locate file for: -lSystemStubs\nerror: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/libtool: file: -lSystemStubs is not an object file (not allowed in a library)\nmake: *** [Python.framework/Versions/2.6/Python] Error 1\nThis is when I try to build CPython 2.6.9 with the following command:\nPYTHON_BUILD_CACHE_PATH=\"${PYENV_ROOT}/buildcache\" \\                                                                                                                                                                              \nPYTHON_CONFIGURE_OPTS=\"--enable-framework --enable-unicode=ucs2\" \\\npyenv install 2.6.9 -vfk\n. It looks like there is actually a more general problem with pip. If you have a package installed in the system python (/Library/Python/2.7/site-packages) and try to install that same library in a pyenv python, pip says that the requirement is already satisfied.\nYou should be able to reproduce this error by doing the following:\n```\nuninstall pyserial (if it is installed) from your pyenv python\npip uninstall pyserial\ninstall pyserial in the system python:\nsudo pip install pyserial\nnow try to install pyserial in the pyenv python:\npip install pyserial\n```\nYou should get the following output:\nRequirement already satisfied (use --upgrade to upgrade): pyserial in /Library/Python/2.7/site-packages\nCleaning up...\nNote the /Library/Python there. \nI am going to try to engage the pip developers on this as it appears to be a pip bug.\n. This turns out to be an issue resulting from a patch made to python which adds /Library/Python/X.X/site-packages to sys.path for python's built with --enable-framework. See https://github.com/pypa/pip/issues/2160 for details.\nI'll be making a pull-request to fix this issue with some patches.\n. That is the default on OSX. The problem with not building with --enable-framework is that you can't then dynamically link to that Python. The pull request I made resolves this issue. \n. Thanks!\n. Try on OSX.\n. @yyuu any idea how to proceed here?\n. The patch seems to work. Thanks!\n. I can try that.\n. That doesn't work. We need to check for bin.orig, otherwise the mv fails.\n. ",
    "jstarsk": "I am sorry i am new with pyenv. what i need to do for have python 2.6.9 in 32bit and also install python 3.3.0 32bits and 64 bits. i cant do it. thanks\n. i am running osx maverick \n. or at less do you known how to install python 2.6.9 with pyenv but 32 bits\n. ",
    "disconnect3d": "I know that this is old and closed but :+1: for 32 bit targets. Any possibility to rethink adding this into Pyenv?\nShouldn't pyenv be an ultimate and easy installer for any Python version?\nOr at least please state in the README how one can use CFLAGS/LDFLAGS to install 32bit Python\n(so ppl won't have to search for this issue in the future ^^).. ",
    "imposeren": "It does not mention that exec is requred. but thanks for the link\n. ",
    "trsudarshan": "[pythonbrew used to do it]\n. ",
    "robsonpeixoto": "Thanks, it help a lot =D\n. @yyuu Do you know how o make it works on OSX ?\n. Thanks @yyuu. I'll test it\n. @blueyed it's don't work well, because a script can't set a environment variable =/\nI miss something like the pythonz locate 2.7.11. Read more here: https://github.com/saghul/pythonz#print-the-path-to-the-interpreter-of-a-given-version\n. Thanks @yyuu \n. Thanks @joshfriend \n. How we can backport this patch ?\nbug: https://bugs.python.org/issue26664\npatch: https://hg.python.org/cpython/rev/8d7bde14d7a4\n. Thank @yyuu. It's works really well.\ncurl https://hg.python.org/cpython/raw-rev/8d7bde14d7a4 | pyenv install -p 3.5.2\n\nI can bundle the patch as a default patch if there's working configuration.\n\nI'll love it =D\n. I'll \n. https://github.com/yyuu/pyenv/pull/725\n. ERROR: invalid Python executable: /Users/robinho/.pyenv/versions/pypy2-5.6.0/bin/python\nDo not exists the python binary on pypy-5.6.0 tarball. I still with the problem, @yyuu =(\nI installed using https://github.com/yyuu/pyenv-installer\nOn my ~/.zshrc, I put:\n```\npython\nexport PATH=\"$HOME/.pyenv/bin:$PATH\"\nexport PYENV_SHELL=zsh\nexport PYENV_ROOT=$HOME/.pyenv\nexport PYTHON_CONFIGURE_OPTS=\"--enable-unicode=ucs2 --enable-framework\"\nsource $PYENV_ROOT/completions/pyenv.zsh\n```\nAnd I try to install ...\n```\n\u279c  pyenv install -v pypy2-5.6.0\n/var/folders/yr/gzpwxsmx64j4d5d9gcqrv__h0000gn/T/python-build.20170117105111.17952 ~\nDownloading pypy2-v5.6.0-osx64.tar.bz2...\n-> https://bitbucket.org/pypy/pypy/downloads/pypy2-v5.6.0-osx64.tar.bz2\n/var/folders/yr/gzpwxsmx64j4d5d9gcqrv__h0000gn/T/python-build.20170117105111.17952/pypy2-v5.6.0-osx64 /var/folders/yr/gzpwxsmx64j4d5d9gcqrv__h0000gn/T/python-build.20170117105111.17952 ~\nInstalling pypy2-v5.6.0-osx64...\nERROR: invalid Python executable: /Users/robinho/.pyenv/versions/pypy2-5.6.0/bin/python\nThe python-build could not find proper executable of Python after successful build.\nPlease open an issue for future improvements.\nhttps://github.com/yyuu/pyenv/issues\nBUILD FAILED (OS X 10.12.2 using python-build 20160602)\nInspect or clean up the working tree at /var/folders/yr/gzpwxsmx64j4d5d9gcqrv__h0000gn/T/python-build.20170117105111.17952\nResults logged to /var/folders/yr/gzpwxsmx64j4d5d9gcqrv__h0000gn/T/python-build.20170117105111.17952.log\nLast 10 log lines:\n/var/folders/yr/gzpwxsmx64j4d5d9gcqrv__h0000gn/T/python-build.20170117105111.17952 ~\n/var/folders/yr/gzpwxsmx64j4d5d9gcqrv__h0000gn/T/python-build.20170117105111.17952/pypy2-v5.6.0-osx64 /var/folders/yr/gzpwxsmx64j4d5d9gcqrv__h0000gn/T/python-build.20170117105111.17952 ~\n```\nBut the python binary do not exists.\n```\n\u279c  wget https://bitbucket.org/pypy/pypy/downloads/pypy2-v5.6.0-osx64.tar.bz2\n[remove unnecessary info]\nHTTP request sent, awaiting response... 200 OK\nLength: 19304985 (18M) [application/x-tar]\nSaving to: \u2018pypy2-v5.6.0-osx64.tar.bz2\u2019\npypy2-v5.6.0-osx64.tar.bz2              100%[=============================================================================>]  18.41M   317KB/s    in 49s\n2017-01-17 11:06:15 (383 KB/s) - \u2018pypy2-v5.6.0-osx64.tar.bz2\u2019 saved [19304985/19304985]\ntmp\n\u279c  gtar xaf pypy2-v5.6.0-osx64.tar.bz2\ntmp\n\u279c  ls pypy2-v5.6.0-osx64/bin\nlibpypy-c.dylib pypy\ntmp\n```. ",
    "AlJohri": "Solved the issue!\nI needed to run the script as user instead of as root by setting privileged to false in Vagrantfile as follows:\nconfig.vm.provision :shell, :path => 'path/to/my/script', :privileged => false\n. https://github.com/yyuu/pyenv/wiki/Common-build-problems#build-failed-error-the-python-zlib-extension-was-not-compiled-missing-the-zlib\n. this seems like a good idea \ud83d\udc4d .\n@yyuu any chance pyenv-default-packages can become an officially endorsed package mirroring rbenv-default-gems? I just tried the latest version on https://github.com/jawshooah/pyenv-default-packages and it works fine. just needs update git tags and ideally to be uploaded as a proper package to homebrew. would be happy to maintain or make any PRs necessary!. @yyuu makes sense. should I make another issue regarding pyenv-default-packages potentially coming under the pyenv organization? it seems to need very little maintenance. same code has been working since 2016.. hey @yyuu, just curious if this is a possibility? seems like a bit of a deviation from rbenv?\n. @DAZHANBA perhaps this may help https://github.com/doloopwhile/pyenv-register\n. Similar issue\n```\n\u279c   ~  pyenv install 3.6-dev\nCloning https://hg.python.org/cpython...\nInstalling Python-3.6-dev...\nERROR: invalid Python executable: /Users/johria/.pyenv/versions/3.6-dev/bin/python3.6\nThe python-build could not find proper executable of Python after successful build.\nPlease open an issue for future improvements.\nhttps://github.com/yyuu/pyenv/issues\nBUILD FAILED (OS X 10.11.6 using python-build 20160602)\nInspect or clean up the working tree at /var/folders/wc/5cw9h18x48z9h4dwfk1tk7n5jhnlj6/T/python-build.20161106202938.36682\nResults logged to /var/folders/wc/5cw9h18x48z9h4dwfk1tk7n5jhnlj6/T/python-build.20161106202938.36682.log\nLast 10 log lines:\n            upgrade) ensurepip=\"--upgrade\" ;; \\\n            install|*) ensurepip=\"\" ;; \\\n        esac; \\\n         ./python.exe -E -m ensurepip \\\n            $ensurepip --root=/ ; \\\n    fi\nCollecting setuptools\nCollecting pip\nInstalling collected packages: setuptools, pip\nSuccessfully installed pip-9.0.0 setuptools-28.7.1\n```\n. Ah, I was working off of the latest version in homebrew.\n. confirmed it works by running:\nbrew upgrade pyenv --HEAD\npyenv install 3.6.0b3\n. @kennethreitz will this work for both macOS and other nix systems? If I remember correctly, macOS starts each terminal session as interactive, login while standard nix systems start terminal sessions as interactive, non-login.\nif the command only runs for non-login sessions, it would fix child processes on macOS but break terminal sessions on other *nix systems?\nI could be off - I don't have experience working with fish\nref: https://github.com/MikeMcQuaid/dotfiles/issues/4. yeah, this is a good guide: https://github.com/rbenv/rbenv/wiki/Unix-shell-initialization#shell-modes\nwould love to solve this issue once and for all since I'm pretty sure it causes issues with subshells in envdir as well: https://github.com/jezdez/envdir/issues/62 cc @blueyed \nany program that creates subshells using a python program installed via pyenv will end up with a slightly modified/incorrect PATH. @kennethreitz I confirmed this bug exists for zsh and fish in linux as well. In addition, linux does indeed start every shell as a non-login shell. For some reason this bug doesn't exist for bash. https://github.com/AlJohri/test-pyenv-pipenv#test-pyenv-pipenv\n@joshfriend @blueyed would you accept a PR for something like PYENV_SKIP_ACTIVATION which gets set on first pyenv activation preventing it from running in subshells? this would also fix #969. okay, I figured out why bash still works. turns out @berdario (from pew) added a hack specific for bash which alters the bashrc file for the child process and edits the PATH in the last line: https://github.com/berdario/pew/blob/f10e80f85fddf5c3246d85224fe72af87cc92c92/pew/pew.py#L160\nI'd still prefer something that fixes the problem more globally like PYENV_SKIP_ACTIVATION. Thanks @blueyed!\nWhat would be the path forward on this? Can pyenv use the existing PYENV_SHELL marker it already sets to prevent re-execution? Would this need to go through rbenv first or can pyenv attack this independently?\n===\nI think your solution is mac specific as you're relying on zprofile which gets run in login sessions only. On mac, each new tab is a login session; on linux this isn't the case. Modifying my test dockerfile above:\n$ docker-compose run app zsh\nrunning zshenv\nrunning zshrc\nnon-login shell\ninteractive shell\n0cac7261ff48# exit\n$ docker-compose run app zsh --login\nrunning zshenv\nrunning zprofile\nrunning zshrc\nlogin shell\ninteractive shell\nrunning zlogin\n5db04e3a7a2c# exit\nrunning zlogout\n. actually, wait @blueyed I think I'm wrong - if its moved to the profile I think it'll work on linux as well. I forgot that the GUI terminal sessions on linux are all subshells of the login shell anyway.\nwhile something like PYENV_SKIP_ACTIVATION may be useful, it seems like I just misunderstood how to set up my shell properly. okay, I reconfigured my shell and everything works now as expected! (except for #985) thanks all! I'll submit a PR to change the README to recommend zprofile instead of zshenv as you suggested @blueyed. FWIW, I just tried out asdf with asdf-python and for some reason their shims to do not change the PATH.. linking relevant issues:\n- https://github.com/pyenv/pyenv/issues/98\n- https://github.com/pyenv/pyenv/issues/789. cool, I'll debug with the pinax project, I got it running locally with vanilla pyenv.\nbut I'm not sure I understand how exec -a would help in this case? It seems as though exec -a is already being used in the last line of pyenv-exec:\nexec -a \"$PYENV_COMMAND\" \"$PYENV_COMMAND_PATH\" \"$@\"\n. Okay, so looking at the auto rehash more carefully, it seems like it needs access to pyenv-which and pyenv-rehash. I was trying to keep modifications localized in my initial PR.\nI can instead, where possible, make pyenv-xxx into an absolute reference since these are pre-packaged plugins so I know exactly where they are. I can export the path to the main pyenv plugin directory and re-use it in the plugin (or get the path to the main pyenv plugin directory again within the plugin itself). Does this sound like a better approach to you?\nIt seems as though the PATH changing is primarily due to the flexibility of running pyenv-xyz arbitrarily in plugins.. ",
    "moodh": "Awesome, thanks! When do you think it will be available for download in Homebrew?\n. Cool, much appreciated!\n. ",
    "battlemidget": "Awesome! ill pull down the add-pyparallel branch and test it as well\n. Im getting some comment syntax errors and have filed a bug here:\nhttps://bitbucket.org/tpn/pyparallel/issue/2/build-error-against-trunk\n. Apparently, the async code is dependent on Windows at the moment. So should probably disregard this pull request until pyparallel can be ported to *nix\n. > I'm using pyenv on Ubuntu 12.04 and I have to use sudo to install python versions, however pyenv is missing when using sudo.\nYou shouldn't have to use sudo when installing python versions via pyenv since the installed versions are placed in $HOME/.pyenv. I run pyenv on all versions of Ubuntu and I never need the sudo command.\n. ",
    "thedrow": "Shouldn't there be a tool that allows pyenv to always run as sudo? Much like pythonbrew which had two command line interfaces. One for sudo and one for normal users.\n. Is this documented somewhere? Should I create a PR for it?\n. I believe we should add this to the docs somewhere. If two people have encountered this problem, more will.\n. I haven't tested it yet but it's on my TODO list. The piping is a really cool idea.\n. Hmm, does it work?\n. But what if I want to support more than one version of 2.x or 3.x?\n. Thanks\n. @cdwilson You can just write something of the following and turn it into a really small plugin (can't remember the bash syntax):\nif not pyenv global | grep system -> eval \"$(pip completion --bash)\"\n. We probably need to document this.\n. If you can fix the tests and get this merged upstream it will appear here eventually.\n. @yyuu I think we should reopen.\n. If you install pyenv with pip --user the package will be installed to the user's site-packages.\n. Thanks!\n. Yes please!\n@yyuu @luzfcb I'll buy any of you a beer if you implement it both in ruby-build and python-build.\n. I hope 10$ is enough for a beer :)\n. Looks like nothing is broken but I'm not sure how to check that it used aria2c.\nMaybe we should log that to somewhere? It's not logged even in verbose mode.\n. A progress bar would be nice.\n. Can we have PYTHON_BUILD_ARIA2_OPTS set to -x 10 -k 1M by default.\nOtherwise it will be just as slow.\n. This is possibly related to #1241 but I'm not sure.. ",
    "bj0": "So is there a recommended workaround?  I don't need to install anything, I have a python program that requires sudo permissions to access a device file.  I setup a local pyenv install but I can't use it with sudo...\n. ",
    "achimnol": "Being coincided with https://github.com/docker/docker/issues/7198 and docker-py, I just ran into a situation that requires my pyenv environment to run as root.\n. I have faced the same issue, and found that two pyenv installations were conflicting: ~/.pyenv and /usr/local/opt/pyenv because I have installed pyenv natively (on Mac OS X) and then installed it again using home-brew. Removing ~/.pyenv fixed the issue for me. Just FYI.\n. I just faced the same situation:\n\nThis may have to be fixed from the Python distribution, but I think at least it would be nice to have warnings or notices to the pyenv users in the README or documentation.\nOr, if there are any options to skip installing macOS apps in the official build/install scripts, we could add it to pyenv.. Reported to bugs.python.org as well.. As commented in the bugs.python.org thread,\nI found that the root cause was the permission issue: the official GUI installer installed Python as root:wheel, but my pyenv were using joongi:admin privilege. Changing the application folder's permission resolved the installation hang up.\nWhat I'm curious now is: why didn't the install script show explicit permission error instead of hanging up? :confused:. And yes, I'm using --enable-framework option.. Ah! I noticed that \"wow\" is printed from my user site customization test codes. Removing the extra print statement resolved the issue. Sorry for bothering!. ",
    "bhyde": "Root is a traditionalist.  His shell is /bin/sh.   That doesn't notice ~/.bash_profile.  ~/.bash_profile which is where pyenv's clever plumbing is typically established.  This the root cause of this issue, correct?\nOften, /bin/sh is linked to /bin/bash.  When invoked that way you have a shell which is crafted to backward compatible so all the traditional scripts still work, but it is also chock full of extensions so a bash scripts usually work.\nI have no idea if pyenv is intentionally (or unintentionally) crafted in an analogously compatible manner.  \nBut, for me, arranging to source the pyenv's setup in root's /bin/sh init files seems to work.\nThoughts?\n. ",
    "chainly": "add any necessary path (e.g.,/app/pyenv/shims) to secure_path, and it will be passed to sudo commands.\nDefaults    secure_path = /app/pyenv/shims:/sbin:/bin:/usr/sbin:/usr/bin\nmore: define-path-environment-variable-sudo-commands. ",
    "skanduru": "Sorry I failed to notice that. Thanks for the info, It works !\nOn Wed, Nov 20, 2013 at 12:34 AM, Yamashita, Yuu\nnotifications@github.comwrote:\n\nRTFM\nhttps://github.com/yyuu/pyenv/wiki/Common-build-problems\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/yyuu/pyenv/issues/81#issuecomment-28870956\n.\n\n\n```\n If you want to live fully, leave fully !!\n          - Sri Siva Shankar Baba\n\n```\n. ",
    "ckhoo": "Thanks Yuu. Your reference (#66) works for me.\n. Adding a note for anyone who wants to --enable-shared like myself,\n1) I had pyenv inside /opt/pyenv. Therefore, I setup my shared library path like this: export LD_LIBRARY_PATH=/opt/pyenv/versions/2.7.6/lib:$LD_LIBRARY_PATH\n2) be sure that LD_LIBRARY_PATH is a permanent entry in ~/.bashrc and not just during pyenv install 2.7.6.\n. ",
    "lambdalisue": ":+1: \nthis commit saved me a lot. thanks\n. By the way, this issue is partially related to https://github.com/ContinuumIO/anaconda-issues/issues/994 even though I don't think installing ncurses on conda's env is a good way while it overwrites OS's ncurses in conda's session.... Is there any document about that blacklist? I would like to know how to override that setting on my local system.. ",
    "giornaledisistema": "The list is incomplete for just installed distribution.\nFor instance, on my Ubuntu 12.04 LTS without libsqlite3-dev package installation, during the Python 2.7.6 installation I receive this error:\nBUILD FAILED\nInspect or clean up the working tree at /tmp/python-build.20131216080608.2663\nResults logged to /tmp/python-build.20131216080608.2663.log\nLast 10 log lines:\n    from dbapi2 import \n  File \"~/.pyenv/versions/2.7.6/lib/python2.7/sqlite3/dbapi2.py\", line 27, in \n    from _sqlite3 import \nImportError: No module named _sqlite3\nThe Python sqlite3 extension was not compiled. Missing the SQLite3 lib?\nAfter libsqlite3-dev package installation the compilation is ok, but when I try to use IDLE located in\n~/.pyenv/versions/2.7.6/bin/idle\nI receive the message:\n* IDLE can't import Tkinter.  Your Python may not be configured for Tk. *\nAfter the tk-dev package installation and Python 2.7.6 reinstallation, IDLE start without errors.\nAnd so on other problems on Ubuntu 12.04 LTS, and similar problem on just installed Fedora 19.\nMy installation package list prevents these errors.\nBye.\n. ",
    "thornjad": "I know its incredibly after-the-fact, but this list solved all my problems on a new install of Ubuntu 17.04. The Common Build Problems page didn't help me.. ",
    "dmend": "Hi @spamwax,  I've run into this issue before, and it's due to the way bash starts in os x.   When bash starts it loads /etc/profile before loading your ~/.bash_profile.  The default /etc/profile in bash executes  /usr/libexec/path_helper which is a tool that sets up the PATH for the new bash process by prepending the contents of /etc/paths to your existing path before handing it over to the new bash process.\nI reset the path in my bash_profile to keep it from being clobbered by path_helper like so: https://github.com/dmend/dotfiles/blob/master/.bash_profile#L3-L7\n. Derp, I just realized you said you use zsh.  I'm sure it's the same issue, but /etc/zshenv is what is executing path_helper in your case.\n. ",
    "spamwax": "@dmend Thanks, this helped.\n. ",
    "taegyunkim": "I've also encountered the sample problem.\n. ",
    "jmvrbanac": "I just ran into the same issue today. I found out you have to use PYTHON_CONFIGURE_OPTS instead\nPYTHON_CONFIGURE_OPTS=\"--enable-unicode=ucs4\" pyenv install 2.7.4\n. ",
    "yevmel": "this exactly code caused some problems to me right now. i had ~/pyenv/shims in my $PATH, which just does not work with PYENV_PREFIX_PATH=\"${PYENV_PREFIX_PATH%/bin}\"\nfix was easy, i replaced ~/pyenv/shims with ~/pyenv/versions/x.x.x/bin. so just in case someone can not switch versions in pyenv anymore... check your $PATH.\n. ",
    "mazz": "Thank you, this helped a lot.\nI'm my .zshrc:\nexport SHELL=/bin/zsh\nif which pyenv > /dev/null; then eval \"$(pyenv init -)\"; fi\nwhen I do:\n[hannam@mhanna (Mon Dec 16 13:59:17) ~]% pyenv versions\n* system (set by /Users/hannam/.pyenv/version)\n  3.3.2\n[hannam@mhanna (Mon Dec 16 13:59:23) ~]% pyenv global 3.3.2\n[hannam@mhanna (Mon Dec 16 13:59:37) ~]% pyenv versions    \n  system\n* 3.3.2 (set by /Users/hannam/.pyenv/version)\n[hannam@mhanna (Mon Dec 16 13:59:42) ~]% python\nYour PYTHONPATH points to a site-packages dir for Python 2.x but you are running Python 3.x!\n     PYTHONPATH is currently: \"/usr/local/lib/python2.7/site-packages:\"\n     You should `unset PYTHONPATH` to fix this.\nDo I only need to do unset PYTHONPATH to use 3.3.2? Or are there more steps?\n. ",
    "proofit404": "Maybe add this trick in readme would be good idea?\n. @thedrow https://github.com/proofit404/anaconda-mode/blob/master/.python-version\n. @samstav I doesn't has any trouble with python versions search from tox. Maybe your pyenv installation isn't correct?\n. Look at https://github.com/yyuu/pyenv/issues/92\nIt works for me. See https://github.com/proofit404/anaconda-mode for complete config.\n. Thank for noticing me in right direction. \n. ",
    "samstav": "Hi, while I was troubleshooting similar problems I came upon this thread. I ended up making a tox plugin to make it easier, thought maybe it'd help y'all too. Not sure if its the best solution, but it works well.  https://github.com/samstav/tox-pyenv\n. @blueyed, that's good idea... Should that be the default behavior?\n. @proofit404 maybe so. It was an issue I ran into with builds on CircleCI, which uses pyenv in its build containers. From what I can tell the build environment automatically creates and activates a virtualenv for you, and that might have something to do with it. \nI documented as much as I could about the issue when I was troubleshooting here: https://github.com/samstav/circleci-python-sandbox/issues/1\n. Also, @blueyed, the tests for the plugin have assertions about which minor version they are running. I was seeing false positives (successful tox runs not using the version of highest precedence according to my .python_version file)  WRT the python version in the tox venv.\n. @blueyed Yeah, sorry, that wasn't very clear. I meant that with this tox config:\nhttps://github.com/samstav/tox-pyenv/blob/v1.0.2/tox.ini#L2\nI was getting all passing tests according to tox until I added the assertion:\nhttps://github.com/samstav/tox-pyenv/blob/v1.0.2/test_tox_pyenv.py#L52\n(you can see the printed output in the build logs: https://circleci.com/gh/samstav/tox-pyenv/37, where the tox -v --recreate command is run.)\nbecause I was a bit skeptical. Now, when the test suite for tox-pyenv runs in CircleCI, it asserts that the exact version of python is running as expected. Here are the exact versions specified/expected:\nhttps://github.com/samstav/tox-pyenv/blob/v1.0.2/circle.yml#L5-L12 \n\nAnd about the default behavior for tox-pyenv to automatically enable existing python versions: sounds good, and doable. It might be best as a fallback, so that if the user has specified python versions to enable thru pyenv already, there is no chance of tox-pyenv clobbering them. \n. ",
    "perscitus": "yyuu, I was able to resolve the problem by installing a package called \"tk-dev\", which is absent from all the python documentation I could find. The packages I mentioned above where built for the system python, which of course wouldn't effect pyenv installs. Hope this helps someone else who comes across the issue. Thanks for your patience.\n. ",
    "lezuber": "TL;DR On OSX use 'brew install tcl-tk' before installing any CPython Version with pyenv\nThis should also be se solution for @robsonpeixoto \nA similar strange problem took me way to long today to solve.\nI have installed some CPython versions with pyenv, and was able to import tkinter both in python 3 and 2. However it was not properly working. In many cases it acted very strange, and only blank windows were opening. Maybe it should be described in the docs, to install tcl-tk, before using pyenv. \nusing 'brew install tcl-tk' before installing python versions solved all my problems on OSX. ",
    "ZoomQuiet": "2013/12/31 Yamashita, Yuu notifications@github.com\n\nOops. That's too bad :(\nI think you have some options to use pyenv from Chinese network.\nUse your own build definitions\nSetup and use your own mirror site for python-build\n\nget it! whatever i need one https://pypi.python.org/ local mirror !\nlet's try it,\nthanx for u suggest ;-)\n\nFormer one is an easy solution. The python-build command (backend of pyenv install) can take a file argument which describes the build definition. If you already have mirror of pypi and it is available over HTTP(S), you can use it by modifying the definition.\nLet's say if you have mirror at http://pypi.example.com/, just replace https://pypi.python.org/ by http://pypi.example.com/ in the definition.\n% cat \"$(pyenv root)/plugins/python-build/share/python-build/2.7.6\" | sed -e 's!https://pypi.python.org!http://pypi.example.com!g' > 2.7.6\n% pyenv install ./2.7.6\nThe latter is a bit more complicated. The python-build has capability to use the optional mirror site via environment variable of PYTHON_BUILD_MIRROR_SITE. There is http://yyuu.github.io/pythons and it is used from python-build by default.\nYou can setup your own mirror by following procedures.\nGet source of mirror site from https://github.com/yyuu/yyuu.github.com\nDownload setuptools and pip, and save them by renaming to their value of md5sum\nMake the mirror available via HTTP(S)\nSet mirror URL in PYTHON_BUILD_MIRROR_SITE\n\u2014\nReply to this email directly or view it on GitHub.\n\n\n\u4eba\u751f\u82e6\u77ed, Pythonic! \u5197\u4f59\u4e0d\u505a,\u65e5\u5b50\u752d\u8fc7!\u5907\u4efd\u4e0d\u505a,\u5341\u6076\u4e0d\u8d66!\nKM keep growing environment culture which promoting organization be learnning!\n\u4ffa: http://about.me/zoom.quiet\n\u8bb8: http://creativecommons.org/licenses/by-sa/2.5/cn/\n. ",
    "cdwilson": "Thanks for the explanation.  If pyenv-version-ext is updated in the future (with new features or something), will it take precedence over version-ext-compat?  or should I just remove version-ext-compat manually to be safe?\n. Gotcha, thanks!\n. Ahh, I see my misunderstanding, thanks for the help!  \nI have setup pip shell completion without doing anything special as you recommended.  The only downside is that when \"system\" python is selected for global, I get the error pyenv: pip: command not found because I prefer not to touch the system python at all (i.e. pip is not installed in my Mac python framework).  However, the error can be fixed by just setting pyenv global 2.7.6.\n. ",
    "tgalery": "hi guys, sorry to disturb you with this, but I'm pretty much having this issue when passing a miniconda python bin, e.g.\n$ virtualenv env2 -p /home/ec2-user/.pyenv/versions/miniconda-3.10.1/bin/python --system-site-packages\nRunning virtualenv with interpreter /home/ec2-user/.pyenv/versions/miniconda-3.10.1/bin/python\nNew python executable in env2/bin/python\nERROR: The executable env2/bin/python is not functioning\nERROR: It thinks sys.prefix is u'/usr' (should be u'/home/ec2-user/ner/env2')\nERROR: virtualenv is not compatible with this system or executable\nAny pointers?\n. ",
    "randy3k": "I was successful to install python manually to the .pyenv/version/x.x.x and pyenv works nicely with this manual installation.\nwget http://www.python.org/ftp/python/2.7.6/Python-2.7.6.tgz\ntar -zvxf Python-2.7.6.tgz\ncd Python-2.7.6\nmkdir $(pyenv root)/versions/2.7.6\n./configure --enable-framework=$(pyenv root)/versions/2.7.6/\nmake\nmake install\ncd $(pyenv root)/versions/2.7.6\nFinally sym link these 4 directories from ~/.pyenv/versions/2.7.6/Python.framework/Versions/2.7 to ~/.pyenv/versions/2.7.6/\n\nNow, you can use pyenv as normal. I believe it also works for python3.3.\nPS: in case you want to install pip (and setuptools)\npyenv shell 2.7.6\nwget https://raw.github.com/pypa/pip/master/contrib/get-pip.py\npython get-pip.py\n. Oh, didn't know about it. But what should I do? I cannot get it working.\nenv PYTHON_CONFIGURE_OPTS=\"--enable-framework\" pyenv install 2.7.3\nI am on the latest pyenv\n(rmbpro)-~$ pyenv --version\npyenv 0.4.0-20140211\nthe error\nLast 10 log lines:\nsed 's/%VERSION%/'\"`DYLD_FRAMEWORK_PATH=/var/folders/w9/7w10svxj5093z4831n7m27w00000gp/T/python-build.20140213041944.85339/Python-2.7.3: ../../python.exe -c 'import platform; print platform.python_version()'`\"'/g' < ./Info.plist.in > Info.plist\n/usr/local/bin/gcc-4.2 -g -O2 -fno-strict-aliasing -fno-common -dynamic -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -o FileSettings.o -c ./FileSettings.m\n<built-in>:0: warning: Mac OS X version 10.5 or later is needed for use of the new objc abi\nIn file included from /System/Library/Frameworks/Foundation.framework/Headers/Foundation.h:161,\n                 from ./FileSettings.h:9,\n                 from ./FileSettings.m:9:\n/System/Library/Frameworks/Foundation.framework/Headers/NSUserNotification.h:16: error: expected \u2018,\u2019 or \u2018}\u2019 before \u2018__attribute__\u2019\nmake[2]: *** [FileSettings.o] Error 1\nmake[1]: *** [install_PythonLauncher] Error 2\nmake: *** [frameworkinstallapps] Error 2\n. Problem solved.\nFor some reasons, my computer doesn't like gcc-4.2 (which i installed via homebrew) and I have to change CC to clang\nenv PYTHON_CONFIGURE_OPTS=\"--enable-framework CC=clang\" pyenv install 2.7.6\n. @Szkered, thanks for the link. I am using the following slightly more generic alias.\nalias brew=\"env PATH=${PATH//$(pyenv root)\\/shims:/} brew\"\n. @wadkar For the same reason...I stopped using it. I now just ignore the warnings...\n. ",
    "shuaimu": "I saw in pyenv source code that this (--enable-framework) is only supported on mac. Is it possible to enable it for Linux systems (such as Arch)?. ",
    "wdy1184": "@shuaimu linux should use this: --enable-shared. ",
    "floswald": "doesn't work for me:\n```\n\u279c  v0.6 env PYTHON_CONFIGURE_OPTS=\"--enable-framework CC=clang\" pyenv install 2.7.10\npyenv: /Users/florian.oswald/.pyenv/versions/2.7.10 already exists\ncontinue with installation? (y/N) y\nDownloading Python-2.7.10.tgz...\n-> https://www.python.org/ftp/python/2.7.10/Python-2.7.10.tgz\nInstalling Python-2.7.10...\npatching file ./Lib/site.py\nBUILD FAILED (OS X 10.13.2 using python-build 20160130)\nInspect or clean up the working tree at /var/folders/d2/hbd_ncyd6rg7jj25j7d4ht3h0000gp/T/python-build.20180120143645.1342\nResults logged to /var/folders/d2/hbd_ncyd6rg7jj25j7d4ht3h0000gp/T/python-build.20180120143645.1342.log\nLast 10 log lines:\nchanging mode of /Users/florian.oswald/.pyenv/versions/2.7.10/Python.framework/Versions/2.7/bin/2to3 to 755\nchanging mode of /Users/florian.oswald/.pyenv/versions/2.7.10/Python.framework/Versions/2.7/bin/pydoc to 755\nchanging mode of /Users/florian.oswald/.pyenv/versions/2.7.10/Python.framework/Versions/2.7/bin/smtpd.py to 755\nrunning install_egg_info\nRemoving /Users/florian.oswald/.pyenv/versions/2.7.10/lib/python2.7/lib-dynload/Python-2.7.10-py2.7.egg-info\nWriting /Users/florian.oswald/.pyenv/versions/2.7.10/lib/python2.7/lib-dynload/Python-2.7.10-py2.7.egg-info\nrm /Users/florian.oswald/.pyenv/versions/2.7.10/lib/python2.7/lib-dynload/_sysconfigdata.py\nln -fs \"../../../Python\" \"/Users/florian.oswald/.pyenv/versions/2.7.10/Python.framework/Versions/2.7/lib/python2.7/config/libpython2.7.a\"\nln: /Users/florian.oswald/.pyenv/versions/2.7.10/Python.framework/Versions/2.7/lib/python2.7/config/libpython2.7.a: No such file or directory\nmake: ** [frameworkinstallmaclib] Error 1\n```\nany idea what that could mean? the full build log is here: https://gist.github.com/anonymous/e15c9e0b746a99cda4065ca0e76e885c. yes @programus ! thanks for reporting back! does work indeed.. hey, thanks for your quick reply. i think something's wrong with my install. it was homebrew. i dont' get any debug info:\n```\n\u279c  ~ PYENV_DEBUG=1 python --version\nPython 2.7.10\n\u279c  ~ pyenv\npyenv 20160509\nUsage: pyenv  []\nSome useful pyenv commands are:\n   commands    List all available pyenv commands\n   local       Set or show the local application-specific Python version\n   global      Set or show the global Python version\n   shell       Set or show the shell-specific Python version\n   install     Install a Python version using python-build\n   uninstall   Uninstall a specific Python version\n   rehash      Rehash pyenv shims (run this after installing executables)\n   version     Show the current Python version and its origin\n   versions    List all Python versions available to pyenv\n   which       Display the full path to an executable\n   whence      List all Python versions that contain the given executable\nSee `pyenv help ' for information on a specific command.\nFor full documentation, see: https://github.com/yyuu/pyenv#readme\n.\n\u279c  ~ ls ~/.pyenv/shims \n2to3              idle              pip3              pydoc3.4          python3-config    python3.4m-config\n2to3-3.4          idle3             pip3.4            python            python3.4         pyvenv\neasy_install      idle3.4           pydoc             python-config     python3.4-config  pyvenv-3.4\neasy_install-3.4  pip               pydoc3            python3           python3.4m\n```\nit did rehash couple of times already.\n. ",
    "programus": "@floswald I had exactly the same problem as yours. Uninstall the target version before install solved my problem. Hope this helps you too. . Use pythonw instead of python would solve this problem. At least solved the problem on my Mac. \n```\n$ ./pythonw\nPython 2.7.14 (default, Mar  1 2018, 23:37:04)\n[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nX = np.arange(0, 7, .1)\nY = np.sin(X)\nplt.plot(X, Y)\n[]\nplt.show()\n``. @FlorianKoegler Yes, this one is the one installed by pyenv. I ran it from thebindirectory, so I added a./` before the command. \n\n\n\nBut, I tried just python later and it works good also. So, to be honest, I am confused now. \nI will try more and would get back if I made anything clearer. . I just uninstalled the python 2.7.14 using pyenv and installed it again with --enable-framework option. \npythonw command works well while python command gives the error. \n```\n$ env PYTHON_CONFIGURE_OPS=\"--enable-framework\" pyenv install 2.7.14\npython-build: use openssl from homebrew\npython-build: use readline from homebrew\nDownloading Python-2.7.14.tar.xz...\n-> https://www.python.org/ftp/python/2.7.14/Python-2.7.14.tar.xz\nInstalling Python-2.7.14...\npython-build: use readline from homebrew\nInstalled Python-2.7.14 to /Users/programus/.pyenv/versions/2.7.14\n$ which python\n/Users/programus/.pyenv/shims/python\n$ python --version\nPython 2.7.14\n$ pip install numpy matplotlib\nCollecting numpy\n  Using cached numpy-1.14.1-cp27-cp27m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\nCollecting matplotlib\n  Using cached matplotlib-2.1.2-cp27-cp27m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\nCollecting pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 (from matplotlib)\n  Using cached pyparsing-2.2.0-py2.py3-none-any.whl\nCollecting python-dateutil>=2.1 (from matplotlib)\n  Using cached python_dateutil-2.6.1-py2.py3-none-any.whl\nCollecting cycler>=0.10 (from matplotlib)\n  Using cached cycler-0.10.0-py2.py3-none-any.whl\nCollecting subprocess32 (from matplotlib)\nCollecting pytz (from matplotlib)\n  Using cached pytz-2018.3-py2.py3-none-any.whl\nCollecting six>=1.10 (from matplotlib)\n  Using cached six-1.11.0-py2.py3-none-any.whl\nCollecting backports.functools-lru-cache (from matplotlib)\n  Using cached backports.functools_lru_cache-1.5-py2.py3-none-any.whl\nInstalling collected packages: numpy, pyparsing, six, python-dateutil, cycler, subprocess32, pytz, backports.functools-lru-cache, matplotlib\nSuccessfully installed backports.functools-lru-cache-1.5 cycler-0.10.0 matplotlib-2.1.2 numpy-1.14.1 pyparsing-2.2.0 python-dateutil-2.6.1 pytz-2018.3 six-1.11.0 subprocess32-3.2.7\n$ python\nPython 2.7.14 (default, Mar  2 2018, 07:39:11)\n[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nTraceback (most recent call last):\n  File \"\", line 1, in \n  File \"/Users/programus/.pyenv/versions/2.7.14/lib/python2.7/site-packages/matplotlib/pyplot.py\", line 116, in \n    _backend_mod, new_figure_manager, draw_if_interactive, _show = pylab_setup()\n  File \"/Users/programus/.pyenv/versions/2.7.14/lib/python2.7/site-packages/matplotlib/backends/init.py\", line 60, in pylab_setup\n    [backend_name], 0)\n  File \"/Users/programus/.pyenv/versions/2.7.14/lib/python2.7/site-packages/matplotlib/backends/backend_macosx.py\", line 17, in \n    from matplotlib.backends import _macosx\nRuntimeError: Python is not installed as a framework. The Mac OS X backend will not be able to function correctly if Python is not installed as a framework. See the Python documentation for more information on installing Python as a framework on Mac OS X. Please either reinstall Python as a framework, or try one of the other backends. If you are using (Ana)Conda please install python.app and replace the use of 'python' with 'pythonw'. See 'Working with Matplotlib on OSX' in the Matplotlib FAQ for more information.\n$ pythonw\nPython 2.7.10 (default, Jul 15 2017, 17:16:57)\n[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.31)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\nimport numpy as np\ni>>> import matplotlib.pyplot as plt\nX = np.arange(0, 7, .1)\nY = np.sin(X)\nplt.plot(X, Y)\n[]\nplt.show()\n```\n. \n\n\n",
    "toshi09": "Same problem, none of above works. ",
    "ibuildthecloud": "Yes, I saw that project but I did not understand why the need for such a thing.  The approach of this pull request is a simple change and it seems to make upstream virtualenvwrapper work just fine (maybe I'm missing something).  pyenv-virtualenvwrapper seems to be digging into the guts of virtualenvwrapper and I'd rather not have to worry about capability issues if virtualenvwrappers changes.  Additionally this pull request should generically support all scripts that are intended to be sourced, not just virtualenvwrappers\n. But the change is in no way specific to virtualenvwrapper, I merely encountered the issue while running it.  Have you reviewed the actual change?  I don't understand the logic of instead of accepting this generic and not project specific change that could be useful for other projects, that you would rather create separate project that is very virtualenvwrapper specific and maintain that.\n. As a side note, installing pyenv-virtualenvwrappers did not work on my system.  Either it is broken or there is something specific about my environment.  After digging through pyenv I found I had to do the below for it to work\nln -s ~/.pyenv/plugins/pyenv-virtualenvwrapper/bin/pyenv-sh-virtualenvwrapper ~/.pyenv/plugins/pyenv-virtualenvwrapper/bin/pyenv-virtualenvwrapper\nln -s ~/.pyenv/plugins/pyenv-virtualenvwrapper/bin/pyenv-sh-virtualenvwrapper_lazy ~/.pyenv/plugins/pyenv-virtualenvwrapper/bin/pyenv-virtualenvwrapper_lazy\nAdditionally \"pyeny virtualenvwrapper_lazy\" defeats the purpose of \"lazy.\"  I has to run several invocations of bash that do a good amount of stat calls.  The real virtualenvwrapper_lazy.sh script is pure bash and never needs to fork a command.\n. @blueyed Yes this is very bash specific.  I'm not a user of zsh, but I imagine similar hacks could be found to detect if the script is being sourced in zsh.  Beyond zsh and bash its not really feasible to find a generic POSIX compliant solution.  There is no way to detect a file is being sourced in a POSIX compliant way that I'm aware of.\nBut, as it stands right now, if you were to source the current pyenv shim in zsh it won't work, because sourcing shims doesn't work right now.  So this PR will make bash work, but zsh is still broken.  So we are in a better situation, but still not ideal.\n. @blueyed @yyuu I will attempt to get this PR merged in rbenv.  I never knew that this project was just a fork of rbenv (I'm not a ruby user at all) and now better understand why @yyuu rejected the PR in the first place.\n. Are you essentially saying\nbash\nset -e\n[ \"\\$BASH_LINENO\" != 0 ] && set +e\n. ",
    "mrmachine": "I agree with @ibuildthecloud. pyenv shims are not compatible with any package that provides scripts intended to be sourced. If there's a way to make pyenv shims more compatible with any such project (not just virtualenvwrapper), pyenv should implement it.\nOtherwise, users will have to modify any 3rd party code (e.g. zprezto) which expects to use another 3rd party package (e.g. virtualenvwrapper) in the normal way it is intended to be used (e.g. source the provided script).\nIn the above example, zprezto devs say they are using virtualenvwrapper correctly (and they are), and that it's either a bug in the pyenv shim or Zsh. virtualenvwrapper devs will also say it's not their problem, they provide a script that should be sourced.\n. ",
    "obenjiro": "Any progress so far? Or at least some workaround?. ",
    "NorthIsUp": "bump?. ",
    "honishi": "I found some environment like OS X has no --unset option for env command, so quit to use it. Sorry.\n. I appreciate your concern!\n. Thanks. Your contribution is much appreciated.\n. Hmmm, maybe I'm the insane person in regard to GREP_OPTIONS. Anyway, thanks a lot!\n. ",
    "pferreir": "@PhilipGarnero You probalby had to install the sqlite3-devel package in your OS, or equivalent.\n. ",
    "rustyscottweber": "It is allowed to return an HTML.  The HTTP response needs to be parsed to check for errors.  I expect the same thing to happen on a 404 error.  That case also returns HTML informing the user that the page couldn't be found but the http response is 404.. page could not be found.  Checks to the response should be made to ensure that there wasn't an error.\n. After some digging.. it appears that in the version of python that pyenv is using, it is finding the debian_version file before it finds the os-release file.  Then, even after you force it to find the os-release file, it thinks that the release name is 'os' which is nothing near the truth.. Adding an ''Ubuntu' to the supported release list and Ubuntu-release file which reads the correct version will fix the problem.. but I think pyenv is missing some of the magic patches to ensure the distro is correctly read.   Reading the platform.py from the native python distro confimrms this, there is a patch to read and correctly parse the lsb-release file before anything else is done.\n. The work around for now is to copy the native plaform.py into the pyenv version.\nsudo cp  /usr/lib/python2.7/platform.py ~/.pyenv/versions/2.6.9/lib/python2.6/platform.py\n. This is a patch to python's plaform.py that needs to be added into the python on ubuntu and debian to run correctly, but I doubt anyone is going to go looking for this type of a patch.  The expectation is that pyenv should pull down all the patches needed for a distribution and apply them automatically.  Else pyenv is just a briliant shim with an overglorified download and compile script.\nIs there a way we can search for and automatically apply those patches for a distribution? \nps. I found the patch..\nhttp://patch-tracker.debian.org/patch/series/view/python3.2/3.2.3~rc1-1/platform-lsbrelease.diff\nMaybe it might be easier to maintain a list of patches for each distro to be applied and then apply them?\n. ",
    "nZac": "what about just turning off pyenv (comment out the eval and sourcing the rc file) before installing something with brew?\n. @yyuu thanks for the details.\n. ",
    "Sayhar-zz": "@yyuu Is setting  pyenv shell system recommended for systems with homebrew then?\n. This fact sound be displayed much more prominently.\nIs there a way to build a config that would take care of this for you? If\nyou think it's possible I'd be happy to help build it\nOn Nov 29, 2014 4:34 AM, \"Yamashita, Yuu\" notifications@github.com wrote:\n\n@blueyed https://github.com/blueyed You understand correctly. For the\nuser of pyenv who don't want complicated thing about python installation,\nI'd recommend to use pyenv shell system when installing something\nrelating to python via brew.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/yyuu/pyenv/issues/106#issuecomment-64946518.\n. \n",
    "Szkered": "http://www.task-notes.com/entry/20141223/1419324649\nThe method used in this post works.\n. ",
    "jbpadgett": "+1 for the alias brew approach above.  This fixed the issue for me for now.\n. ",
    "wadkar": ":+1: for @randy3k . Maybe we can add it as a hint in the caveats section when installing with brew?\nToo soon; the alias breaks completions. Any ideas how to fix the zsh-completions?\n. Hmm, so if I keep the pyenv global set to system and ignore the brew doctor warnings, I should be good?\n. @randy3k \nCould you please tell me how you're currently handling this issue?\nAnyone?\n. TL;DR : Create a script with code in the second block below and name it as brew. Make sure this brew script is executable and is in your ${PATH} before the actual brew which is in /usr/local/bin/brew\nThanks!\nFor the sake of posterity, here's my current solution:\n``` sh\nset path to include personal bin in your .zshrc or .bashrc or whatever\nexport PATH=\"${HOME}/bin:${PATH}\"\n```\nand put following in an executable script in ${HOME}/bin/brew\n``` sh\n!/bin/sh\ncheck if pyenv is available\nedit: fixed redirect issue in earlier version\nif which pyenv > /dev/null 2>&1; then\n  # assumes default location of brew in /usr/local/bin/brew\n  /usr/bin/env PATH=\"${PATH//$(pyenv root)\\/shims:/}\" /usr/local/bin/brew \"$@\"\nelse\n  /usr/local/bin/brew \"$@\"\nfi\n```\nWould it be possible to link this issue/comment to wiki/docs?\nIf you're using tmux then this solution might not work due to duplicate entries in PATH variable. Check my comment below for another solution to fix that problem.\n. My comment mentions the name of the file as ${HOME}/bin/brew , perhaps it isn't exactly clear. But yeah, what @akatrevorjay said is right on target.\n. While using tmux each new shell in tmux will create a login shell. This creates duplicate entries in PATH variable. To avoid duplicate entries, create a ~/.zprofile file and set PATH empty. See this comment for the solution. This question on stackoverflow talks about the problem, and solution.\nHere's my current solution for the duplicate entries in $PATH variable.\nEdit: see comment below by @akatrevorjay on declaring $path as array on ZSH which I think is a better solution (and which I use it personally).\n``` sh\ncat ~/.zprofile\nfix duplicate entries in PATH when using tmux\nsee: https://github.com/rbenv/rbenv/issues/369#issuecomment-36010083\nif [ -n \"${TMUX}\" -a -f /etc/profile ]; then\n    PATH=''\n    source /etc/profile\nfi\n```\n. You are correct. I have edited my response.. Excellent suggestion @urda , I will be using that alias instead of a new binary as I know I will always have pyenv and brew together.. When you merge this, are you thinking of adding an optional dependency to aria2 in the brew formula?\nOn one hand, it would be nice to indicate the user that we can use aria2 for download if required. On the other hand, the code doesn't depend on aria2 to work. It just checks if its available and runs it. I am not sure what the norm is in such cases.\n. How would you go about recreating python environment (including virtualenv) on a remote machine? What files I could commit in git history so that a remote developer (assume sufficient competency with pyenv) can recreate the python environment on a remote machine for development?\n. I think it would be great if we had a small HOWTO in wiki or README.md about recreating pyenv. For example, the tutorial could start with an empty directory and pynev (and other plugins like pyenv-virtualenv if necessary) and shows how the same development environment can be recreated on another machine.\nI would be more than happy to write one later (mid-May) if I you could help me with the magic incantations :)\n. @brbsix \nthanks for chiming in!\nOf course, I am not suggesting to commit any pyenv files or directories. I am merely curious how to recreate python environment? The simplest use case is when you are starting on a new machine and want to develop a python codebase. The past you is asking what information you need about python version (and perhaps virtualenv) that will help you start up and running.\nAssume basic setup without vagrant/docker\n. Okay, so basically I keep a list of required modules in requirements.txt and then create a virtualenv for the project and do pip install -r requirements.txt, that's it?\nAny pointers/guides on this?\n@yyuu : feel free to close the issue if this seems out of scope of pyenv :)\n. Now that I think about it, the README/wiki is much better place for this. Feel free to include it in the README.md or wiki.\n. I just updated the FAQ wiki page with the TL;DR piece. Hope it's OK and helps somebody (probably me \ud83d\ude04) in future.\n. ",
    "akatrevorjay": "Just use a wrapper script instead of an alias, place it in a prefixed entry in PATH. Completion works great that way. The reason completions don't work is zsh does not complete aliases without the completealias option, and it's off by default for a reason --- it's rather common to break things by design with one.\n. Yes, just call it brew. The point is to \"wrap\" the execution of the original.\n. Since you're on ZSH, you have the benefit of making an array act as an\nordered set:\n$path is PATH in array form, -U discards non-unique entries\ntypeset -U path\nHappy hacking!\n. ",
    "thed0ctor": "@wadkar do you call this script \"brew\" or something else?\n. ",
    "jcrben": "If pyenv had a way to use python3 while retaining python as system, that would probably be ideal.\nas pointed out in https://github.com/Linuxbrew/legacy-linuxbrew/issues/764#issuecomment-177448686 this is recommended in PEP 0394 as well\n. Same - with NixOS things like this are a bit tricker. CPPFLAGS=\"-I/nix/store/nkpciwh3zkjvl8nm1a9hx3zy2vz7z4qn-zlib-1.2.11/lib\" pyenv install 3.6.6` did not work.\nUPDATE: sudo -E CPPFLAGS=\"-I/nix/store/w30qd5b2svvh5liqcwyppj88c44qkhjg-zlib-1.2.11-dev/include\" LDFLAGS=\"-L/nix/store/yyv98fx38riz5q2sfhfsqbn6c9byri9y-zlib-1.2.11/lib\" pyenv install 3.6.6 worked for NixOS after nix-env -iA nixos.zlib. ",
    "soulomoon": "@wadkar \nThank you for the method, now the warning is gone.\nshould be \"2>&1\"?\n```bash\n!/bin/sh\nif which pyenv > /dev/null 2>&1; then\n  # assumes default location of brew in /usr/local/bin/brew\n  /usr/bin/env PATH=\"${PATH//$(pyenv root)\\/shims:/}\" /usr/local/bin/brew \"$@\"\nelse\n  /usr/local/bin/brew \"$@\"\nfi\n```. ",
    "urda": "Fantastic thread, quick note for bash you may see this issue if you use shellcheck:\nbash\nalias brew=\"env PATH=${PATH//$(pyenv root)\\/shims:/} brew\"\n                     ^-- SC2139: This expands when defined, not when used. Consider escaping.\nInstead I think it's best if you use this instead:\nbash\nalias brew='env PATH=${PATH//$(pyenv root)\\/shims:/} brew'. ",
    "dstroot": "If you know you are using pyenv shell system when installing something relating to python via brew you can safely just ignore the warnings.  This line turns off two checks on my system: stray headers and this one.  \nsh\nbrew doctor `brew doctor --list-checks | grep -v -e 'check_for_stray_headers' -e 'check_for_config_scripts'`. ",
    "yaiba": "Hello, \nI have the same issue on my mac 10.11.6, and i goolged some answers but none of them work for mac, the  \"Common build problem\" have nothing to say about sqlite, and i tried set the same flags metioned in the \"Common build problem/ssl\" section and fix it.\nJust for people who have same issue like me.. ",
    "excenter": "https://gist.github.com/excenter/48bb9b10aa77406b83c7752d79eb0b7d. ",
    "motiteux": "Thanks for the answer. This underlines the fact that I should force the virtualenv to use system packages. \nThanks again.\n. ",
    "ahmednuaman": "Woops, I forgot to run pyenv global 2.7.6.\n. ",
    "bcomnes": "It does sound odd.  I'm not the system administrator for the server, which also makes troubleshooting frustrating.\n1. /usr/include/readline/rlconf.h is there for sure, along with the other .h files.\n2. Whats the best way to check if the readline module was built?  I'm not a very confident python person.   What I can tell you is that I followed this procedure and did not see any build errors:\nwget http://www.python.org/ftp/python/3.3.3/Python-3.3.3.tgz\ntar -zxvf Python-3.3.3.tgz\ncd Python-3.3.3/\nmkdir /vol/apps/user/python/python3.3.3\n./configure --prefix=/vol/apps/user/python/python3.3.3\nmake\nmake install\n1. Here is the gist of build.log: https://gist.github.com/bcomnes/6dd976a5724aa8bdd2f3\nI'm building on an NFS mount, would that have something to do with it? \n. Ok, I feel stupid.  I found an old .pydistutils file in my home directory mucking things up.  Now the install process fails on the sqlite module, which does not appear to be installed.  Feel free to close this.\n. I had a pydistutils file that pointed to an old, nonexistent python build, and it was screwing all sorts of python utilities up:\n[install]\ninstall_scripts = ~/stow/python-stuff/bin/\ninstall_data = ~/stow/python-stuff/share/\ninstall_lib = ~/stow/python-stuff/lib/python2.7/site-packages/\nEverything is building great now that I have sqlite-dev installed.\n. ",
    "axfelix": "Sorry, just did some more searching and realized \"virtualize\" may be a misleading term in this case -- I'm only using pyenv, not pyenv-virtualize.\n. Yes, thanks!\n. ",
    "joaoleite": ":+1: Fantastic!!!!\n. ",
    "ebertti": "Great!\nWhy this link isn't in the readme of your project?\n. You're welcome.\nOr like we said in Rio de Janeiro: \"\u00e9 nois\"\n. ",
    "mkaito": "I didn't see it being called anywhere either. However, after removing pyenv from my .zshenv, the stray $GEM_HOME is gone from my $PATH.\n. ",
    "obeleh": "sjuul@sjuulwheezy:~$ dpkg -l | grep libffi\nii  libffi-dev:amd64                      3.0.10-3                           amd64        Foreign Function Interface library (development files)\nii  libffi-ruby                           1.0.11debian-5                     all          Transitional package for ruby-ffi\nii  libffi5:amd64                         3.0.10-3                           amd64        Foreign Function Interface library runtime\nsjuul@sjuulwheezy:~$ ls -l /usr/lib/x86_64-linux-gnu/libffi.so*\nlrwxrwxrwx 1 root root    16 Oct 12  2011 /usr/lib/x86_64-linux-gnu/libffi.so -> libffi.so.5.0.10\nlrwxrwxrwx 1 root root    16 Oct 12  2011 /usr/lib/x86_64-linux-gnu/libffi.so.5 -> libffi.so.5.0.10\n-rw-r--r-- 1 root root 52192 Oct 12  2011 /usr/lib/x86_64-linux-gnu/libffi.so.5.0.10\nsjuul@sjuulwheezy:~$ sudo find / | grep 'libffi.so.6'\n/usr/local/lib/libffi.so.6\n/usr/local/lib/libffi.so.6.0.1\nPS. I've only installed libffi-ruby to see whether that made a difference.\n. ",
    "shurane": "Ah, right. I usually forget that github repositories have wikis associated with them. I wonder if there's a way to make it more obvious that the wiki exists? But you do mention it inside the README. I think the README could be restructured a bit and maybe include a ##Troubleshooting section. \n. ",
    "fgimian": "This caught me out too (first time using pyenv today).  Perhaps simply adding a step to Installation (https://github.com/yyuu/pyenv#installation) mentioning that you need to install the pre-requisite packages as shown in the Wiki article would do.\nCheers\nFotis\n. I might check this out soon.  But in the meantime, I wrote a post about pyenv which I've been using as my reference when setting it up.  Perhaps it's helpful to others:\nhttp://fgimian.github.io/blog/2014/04/20/better-python-version-and-environment-management-with-pyenv/\nCheers\nFotis\n. @yyuu Thank you so much, I'm using pyenv for all my dev environments now and absolutely love it!! :smile: \n. No worries, sorry I missed the src file :smile: \nCheers\nFotis\n. ",
    "selenite29": "@yyuu, I didn't know there was a Wiki either, it should be highlighted a little bit more in the README.\n. Thanks for the links @seanfisk.\nI am wondering how do you configure tox to be aware of different pyenv's python versions, could you enlighten me ?\n. Great, that's exactly what I need :+1: Thank you @seanfisk !\n. ",
    "lyman": "It is because readline 6.3 removed Function and CPPFunction from rltypedefs.h, which caused a compilation error:\nbuilding 'readline' extension\n/usr/bin/gcc -pthread -fPIC -fno-strict-aliasing -g -O2 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -I. -IInclude -I./Include -I/h\nome/lyman/.pyenv/versions/2.7.6/include -I/usr/local/include -I/tmp/python-build.20140319161731.960/Python-2.7.6/Include -I/tmp/python-b\nuild.20140319161731.960/Python-2.7.6 -c /tmp/python-build.20140319161731.960/Python-2.7.6/Modules/readline.c -o build/temp.linux-x86_64-\n2.7/tmp/python-build.20140319161731.960/Python-2.7.6/Modules/readline.o\n/tmp/python-build.20140319161731.960/Python-2.7.6/Modules/readline.c: In function \u2018setup_readline\u2019:\n/tmp/python-build.20140319161731.960/Python-2.7.6/Modules/readline.c:914:24: error: \u2018Function\u2019 undeclared (first use in this function)\n     rl_startup_hook = (Function *)on_startup_hook;\n                        ^\n/tmp/python-build.20140319161731.960/Python-2.7.6/Modules/readline.c:914:24: note: each undeclared identifier is reported only once for \neach function it appears in\n/tmp/python-build.20140319161731.960/Python-2.7.6/Modules/readline.c:914:34: error: expected expression before \u2018)\u2019 token\n     rl_startup_hook = (Function *)on_startup_hook;\n                                  ^\n/tmp/python-build.20140319161731.960/Python-2.7.6/Modules/readline.c:916:36: error: expected expression before \u2018)\u2019 token\n     rl_pre_input_hook = (Function *)on_pre_input_hook;\n                                    ^\n/tmp/python-build.20140319161731.960/Python-2.7.6/Modules/readline.c:919:41: error: \u2018CPPFunction\u2019 undeclared (first use in this function\n)\n     rl_attempted_completion_function = (CPPFunction *)flex_complete;\n                                         ^\n/tmp/python-build.20140319161731.960/Python-2.7.6/Modules/readline.c:919:54: error: expected expression before \u2018)\u2019 token\n     rl_attempted_completion_function = (CPPFunction *)flex_complete;\n                                                      ^\nI've diffed rltypedefs.h between 6.3 and 6.2 and found that the only difference is so-called \"old-style\" typedef is removed. So it is safe to patch missing code back to rltypedefs.h as a workaround.\n. ",
    "cloudforrest": "After several unsucessful attempts last night (3/27/14) to compile python 2.7.6 with pyenv, I went searching here in the issues tree. At first I was stuck at the developer's blithe response on issue #40, so I went back and made sure I had all dependencies. My system: Ubuntu 14.04, and all dependencies, including libreadline-dev, are installed. Python 2.7.6 installs but readline support failed to build. Here are the relevant lines in my build.log:\n/usr/bin/gcc -pthread -shared -L/home/techpraxis/.pyenv/versions/2.7.6/lib -L/home/techpraxis/.pyenv/versions/2.7.6/lib\nbuilding 'readline' extension\n/usr/bin/gcc -pthread -fPIC -fno-strict-aliasing -g -O2 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -I. -IInclude\n/tmp/python-build.20140328010909.30997/Python-2.7.6/Modules/readline.c: In function \u2018setup_readline\u2019:\n/tmp/python-build.20140328010909.30997/Python-2.7.6/Modules/readline.c:914:24: error: \u2018Function\u2019 undeclared (first use\n     rl_startup_hook = (Function *)on_startup_hook;\n                        ^\n/tmp/python-build.20140328010909.30997/Python-2.7.6/Modules/readline.c:914:24: note: each undeclared identifier is repo\n/tmp/python-build.20140328010909.30997/Python-2.7.6/Modules/readline.c:914:34: error: expected expression before \u2018)\u2019 to\n     rl_startup_hook = (Function *)on_startup_hook;\n                                  ^\n/tmp/python-build.20140328010909.30997/Python-2.7.6/Modules/readline.c:916:36: error: expected expression before \u2018)\u2019 to\n     rl_pre_input_hook = (Function *)on_pre_input_hook;\n                                    ^\n/tmp/python-build.20140328010909.30997/Python-2.7.6/Modules/readline.c:919:41: error: \u2018CPPFunction\u2019 undeclared (first u\n     rl_attempted_completion_function = (CPPFunction *)flex_complete;\n                                         ^\n/tmp/python-build.20140328010909.30997/Python-2.7.6/Modules/readline.c:919:54: error: expected expression before \u2018)\u2019 to\n     rl_attempted_completion_function = (CPPFunction *)flex_complete;\n                                                      ^\n/tmp/python-build.20140328010909.30997/Python-2.7.6/Modules/readline.c: At top level:\n/tmp/python-build.20140328010909.30997/Python-2.7.6/Modules/readline.c:753:1: warning: \u2018on_startup_hook\u2019 defined but no\n on_startup_hook(void)\n ^\n/tmp/python-build.20140328010909.30997/Python-2.7.6/Modules/readline.c:760:1: warning: \u2018on_pre_input_hook\u2019 defined but\n on_pre_input_hook(void)\n ^\nafter reading this thread, I went and checked my version of libreadline-dev (installed last night, 3/27/14, from ubuntu repositories for 14.04). Here is the output of 'apt-cache show libreadline-dev':\napt-cache show libreadline-dev\nPackage: libreadline-dev\nPriority: optional\nSection: libdevel\nInstalled-Size: 21\nMaintainer: Ubuntu Developers <ubuntu-devel-discuss@lists.ubuntu.com>\nOriginal-Maintainer: Matthias Klose <doko@debian.org>\nArchitecture: i386\nSource: readline6\nVersion: 6.3-4ubuntu1\nDepends: libreadline6-dev (= 6.3-4ubuntu1)\nConflicts: libreadline-gplv2-dev\nFilename: pool/main/r/readline6/libreadline-dev_6.3-4ubuntu1_i386.deb\nSize: 990\nMD5sum: c05664a41b67a71f5e17c4c410c5d524\nSHA1: 0133a903899481a59f67d9081732e07184955c4b\nSHA256: 8e081a2425ad78ed0da93b296f37fcf0cda9cdd9356c4d5acadf71816c52674c\nDescription-en: GNU readline and history libraries, development files\n The GNU readline library aids in the consistency of user interface\n across discrete programs that need to provide a command line\n interface.\n .\n The GNU history library provides a consistent user interface for\n recalling lines of previously typed input.\n .\n This package is a dependency package depending on libreadline6-dev.\nDescription-md5: 3502d626cf8e22133354357eb1e0631f\nMulti-Arch: same\nBugs: https://bugs.launchpad.net/ubuntu/+filebug\nOrigin: Ubuntu\nSupported: 9m\nSo I do have the '6.3' version, and as lyman and geekrrr have documented here, the rltypedefs.h difference means that on my machine, pyenv cannot build python 2.7.6 with readline support when using unmodified system standard libraries, on Ubuntu 14.04, at least as of 10:02 am (PDT) 3/28/14. \n. I found the same error apparently as geekrrr: http://osdir.com/ml/bug-readline-gnu/2014-03/msg00004.html\n. This python bug report also mentions this problem: http://bugs.python.org/issue20374\n. This problem is widespread. NetBSD list also reports failure of python and samba to compile with latest readline 6.3, bug report here: http://mail-index.netbsd.org/pkgsrc-bugs/2014/03/13/msg053682.html.\nThis issue needs to have its status changed from 'question' to 'bug'.  If no update by original questioner, I will open bug issue ASAP.\n. I just attempted another build of python 2.7.6, with pyenv, this time using pyenv's patch function and a patch from the python mailing list. No improvment. Here is the section of the build log that reveals the failure: \n```\nbuilding 'readline' extension\n/usr/bin/gcc -pthread -fPIC -fno-strict-aliasing -g -O2 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -I. -IInclude -I./Include -I/home/techpraxis/.pyenv/versions/2.7.6/include -I/usr/include/i386-linux-gnu -I/usr/local/include -I/tmp/python-build.20140328104347.15697/Python-2.7.6/Include -I/tmp/python-build.20140328104347.15697/Python-2.7.6 -c /tmp/python-build.20140328104347.15697/Python-2.7.6/Modules/readline.c -o build/temp.linux-i686-2.7/tmp/python-build.20140328104347.15697/Python-2.7.6/Modules/readline.o\n/tmp/python-build.20140328104347.15697/Python-2.7.6/Modules/readline.c: In function \u2018setup_readline\u2019:\n/tmp/python-build.20140328104347.15697/Python-2.7.6/Modules/readline.c:914:24: error: \u2018Function\u2019 undeclared (first use in this function)\n     rl_startup_hook = (Function )on_startup_hook;\n                        ^\n/tmp/python-build.20140328104347.15697/Python-2.7.6/Modules/readline.c:914:24: note: each undeclared identifier is reported only once for each function it appears in\n/tmp/python-build.20140328104347.15697/Python-2.7.6/Modules/readline.c:914:34: error: expected expression before \u2018)\u2019 token\n     rl_startup_hook = (Function )on_startup_hook;\n                                  ^\n/tmp/python-build.20140328104347.15697/Python-2.7.6/Modules/readline.c:916:36: error: expected expression before \u2018)\u2019 token\n     rl_pre_input_hook = (Function )on_pre_input_hook;\n                                    ^\n/tmp/python-build.20140328104347.15697/Python-2.7.6/Modules/readline.c:919:41: error: \u2018CPPFunction\u2019 undeclared (first use in this function)\n     rl_attempted_completion_function = (CPPFunction )flex_complete;\n                                         ^\n/tmp/python-build.20140328104347.15697/Python-2.7.6/Modules/readline.c:919:54: error: expected expression before \u2018)\u2019 token\n     rl_attempted_completion_function = (CPPFunction )flex_complete;\n                                                      ^\n/tmp/python-build.20140328104347.15697/Python-2.7.6/Modules/readline.c: At top level:\n/tmp/python-build.20140328104347.15697/Python-2.7.6/Modules/readline.c:753:1: warning: \u2018on_startup_hook\u2019 defined but not used [-Wunused-function]\n on_startup_hook(void)\n ^\n/tmp/python-build.20140328104347.15697/Python-2.7.6/Modules/readline.c:760:1: warning: \u2018on_pre_input_hook\u2019 defined but not used [-Wunused-function]\n on_pre_input_hook(void)\n ^\n/tmp/python-build.20140328104347.15697/Python-2.7.6/Modules/readline.c:855:1: warning: \u2018flex_complete\u2019 defined but not used [-Wunused-function]\n flex_complete(char text, int start, int end)\n ^\nPython build finished, but the necessary bits to build these modules were not found:\n_bsddb             _curses            _curses_panel \n_tkinter           bsddb185           sunaudiodev   \nTo find the necessary bits, look in setup.py in detect_modules() for the module's name.\nFailed to build these modules:\nreadline      \n```\n. I can see in issue #131 that a patch to fix readline errors for 2.6.9 python was added. Probably need to make a more general set of patches?\n. I created a patch for the 2.7.6 Python source that pyenv uses, and successfully applied it to my pyenv installation, and was then able to build Python 2.7.6 with readline support. It seems that the developer of pyenv and a couple of others who have posted here have done a number of fixes that apply to this area, but pyenv as installed from git source here and with Ubuntu 14.04 does NOT build python 2.7.6 correctly (and that is with all dependencies installed, esp. libreadline-dev).\nThe unified diff output is quite simple. For those of you reading this who might have the same or a similar problem, here is the diff:\n``\n--- ./Modules/readline.c 2013-11-09 23:36:41.000000000 -0800\n+++ ../Python-2.7.6/Modules/readline.c  2014-03-28 12:44:01.738352248 -0700\n@@ -911,17 +911,17 @@\n     rl_bind_key_in_map ('\\t', rl_complete, emacs_meta_keymap);\n     rl_bind_key_in_map ('\\033', rl_complete, emacs_meta_keymap);\n     /* Set our hook functions */\n-    rl_startup_hook = (Function *)on_startup_hook;\n+    rl_startup_hook = on_startup_hook;\n #ifdef HAVE_RL_PRE_INPUT_HOOK\n-    rl_pre_input_hook = (Function *)on_pre_input_hook;\n+    rl_pre_input_hook = on_pre_input_hook;\n #endif\n     /* Set our completion function */\n-    rl_attempted_completion_function = (CPPFunction *)flex_complete;\n+    rl_attempted_completion_function = flex_complete;\n     /* Set Python word break characters */\n     completer_word_break_characters =\n         rl_completer_word_break_characters =\n         strdup(\" \\t\\n~!@#$%^&()-=+[{]}\\|;:'\\\",<>/?\");\n-        / All nonalphanums except '.' /\n+        / All nonalphanums except '.' test */\n begidx = PyInt_FromLong(0L);\n endidx = PyInt_FromLong(0L);\n\n```\n. Thanks for responding. The only reason a second issue was created: #126 is labeled \"question\" rather than bug. The patch is only for 2.7.6 -- the line numbers are different, for instance, in your patch on 2.6.9. (readline.c different slightly between those two versions, probably?) It may be that we need a patch that takes a more general approach, also?\n. Okay, I will give it a try over here! I have several systems, will also give it a run on Fedora 18 and Mageia linux boxes.\n. ",
    "ldong": "I think you are right, wget wasn't necessary to be up-to-date. However, my curl and gcc were outdated on 10.04. After installed compiled-curl and llvm, I was able to do pyenv install 3.3.5\nSorry I cannot reproduce the problem. \n```\nwhich curl                                              \n/usr/local/bin/curl\ncurl -V\ncurl 7.35.0 (x86_64-unknown-linux-gnu) libcurl/7.35.0 OpenSSL/0.9.8k zlib/1.2.3.3\nProtocols: dict file ftp ftps gopher http https imap imaps pop3 pop3s rtsp smtp smtps telnet tftp \nFeatures: IPv6 Largefile NTLM NTLM_WB SSL libz \n```\ngcc -v                                      \nUsing built-in specs.\nTarget: x86_64-linux-gnu\nConfigured with: ../src/configure -v --with-pkgversion='Ubuntu 4.4.3-4ubuntu5.1' --with-bugurl=file:///usr/share/doc/gcc-4.4/README.Bugs --enable-languages=c,c++,fortran,objc,obj-c++ --prefix=/usr --enable-shared --enable-multiarch --enable-linker-build-id --with-system-zlib --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --with-gxx-include-dir=/usr/include/c++/4.4 --program-suffix=-4.4 --enable-nls --enable-clocale=gnu --enable-libstdcxx-debug --enable-plugin --enable-objc-gc --disable-werror --with-arch-32=i486 --with-tune=generic --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu\nThread model: posix\ngcc version 4.4.3 (Ubuntu 4.4.3-4ubuntu5.1)\n. ",
    "tgt": "Sorry, wrong repository! (I was comparing pyenv and rbenv's implementations.)\n. ",
    "simonzack": "Yes I think so, this adds compatibility to the newer libraries, otherwise they won't build at all for users who keep their libraries up to date (e.g. arch linux users).\n. Atom's problem appears to be separate. I'll close this since I don't have other use cases for now.\n. ",
    "zackw": "I can confirm that this patch fixes pyenv install 2.6.9 for me.  (Just the readline patch, not the other one.) Unfortunately, I also need 2.5 and the patch does not apply to 2.5(.6) despite appearing to be semantically the correct change.\nWhy does pyenv insist that readline must be available for a successful build? It's nice to have, sure, but for a lot of use cases it's not necessary.\n. ",
    "imwithye": "Use pyenv shell 2.7.6 and problem solved. Though I don't know why.\n. ",
    "westurner": "from a fresh clone of master:\n``` bash\n$ pyenv install -k -v 3.4.0\npython-build: definition not found: 3.4.0\nThe following versions contain `3.4.0' in the name:\n  3.4.0a2\n  3.4.0a3\n  3.4.0a4\n  3.4.0b1\n  3.4.0b2\nYou can list all available versions with `pyenv install --list'.\nIf the version you're looking for is not present, first try upgrading\npyenv. If it's still missing, open a request on the pyenv\nissue tracker: https://github.com/yyuu/pyenv/issues\n```\nbash\n$ pyenv install -l\nAvailable versions:\n  2.4\n  2.4.1\n  2.4.2\n  2.4.3\n  2.4.4\n  2.4.5\n  2.4.6\n  2.5\n  2.5.1\n  2.5.2\n  2.5.3\n  2.5.4\n  2.5.5\n  2.5.6\n  2.6.6\n  2.6.7\n  2.6.8\n  2.6.9\n  2.6-dev\n  2.7\n  2.7.1\n  2.7.2\n  2.7.3\n  2.7.4\n  2.7.5\n  2.7.6\n  2.7-dev\n  3.0.1\n  3.1.3\n  3.1.4\n  3.1.5\n  3.1-dev\n  3.2\n  3.2.1\n  3.2.2\n  3.2.3\n  3.2.4\n  3.2.5\n  3.2-dev\n  3.3.0\n  3.3.1\n  3.3.2\n  3.3.3\n  3.3-dev\n  3.4.0a2\n  3.4.0a3\n  3.4.0a4\n  3.4.0b1\n  3.4.0b2\n  3.4-dev\n  jython-2.5.0\n  jython-2.5.1\n  jython-2.5.2\n  jython-2.5.3\n  jython-2.5.4-rc1\n  jython-2.5-dev\n  jython-2.7-beta1\n  jython-dev\n  pypy-1.5\n  pypy-1.5-src\n  pypy-1.6\n  pypy-1.7\n  pypy-1.7-dev\n  pypy-1.8\n  pypy-1.8-dev\n  pypy-1.9\n  pypy-1.9-dev\n  pypy-2.0\n  pypy-2.0.1\n  pypy-2.0.1-src\n  pypy-2.0.2\n  pypy-2.0.2-src\n  pypy-2.0-dev\n  pypy-2.0-src\n  pypy-2.1\n  pypy-2.1-src\n  pypy-2.2\n  pypy-2.2.1\n  pypy-2.2.1-src\n  pypy-2.2-src\n  pypy3-2.1-beta1\n  pypy3-2.1-beta1-src\n  pypy3-dev\n  pypy-dev\n  stackless-2.7.2\n  stackless-2.7-dev\n  stackless-3.2.2\n  stackless-3.2-dev\n  stackless-3.3-dev\n  stackless-dev\n154  is an (open) duplicate of this issue.\n. I see the file. But (as i described in #133), it is not working on master.\n. My mistake. Should've checked $PATH.\n. Thanks for your help and thanks for pyenv!\n. ",
    "chronoslynx": "No, thank you!\n. ",
    "manbearwiz": "What is this status of this? It would be nice to have this in for Debian Jessie which goes into freeze November 5th.\n. ",
    "jhermann": "Done. Make sure to read https://github.com/jhermann/priscilla/tree/master/pyenv#building-the-opt-pyenv-package, it's a works-for-me DEB, and not in any way policy-conformant.\n. Probe /usr/local/bin for being owned by your current (non-root) user, and if yes, you could go ahead with the symlink, since ownership is a strong indicator towards the different policy. \n. Just pulling this from my crystal ball, but do you have \"librpm-dev\" installed?\n. Reinitializing the current shell session needs -l, i.e. exec -l $SHELL.\n. \"curl -#\" could be used for the curl side of things.\n. ",
    "Zearin": "\nSupports XDG Basedir Spec\n\nWhoops\u2026this actually is not accurate!\nIt would be more accurate to say \u201cinspired by the XDG Basedir Spec\u201d.  The official spec pertains to system- and user-level configurations.  \nThat said, it still feels like a good fit to extend the same pattern to project-level configurations, too.\n. > I'm not currently in a position to leave an extremely detailed response, but the tools that you mentioned (pyenv, tox, Setuptools, and Travis-CI) are in my opinion each the best of their class.\nExactly!  Thank you for the phrase that was eluding me: best of their class.  It\u2019s damned tricky learning to use all of them in concert.\n\nI've created Python Project Template as a starting point for using these tools and more together. It's not perfect, but it solves a lot of problems for me.\n\nCool.  Thanks!  \nI just took a look, and I like it.  Just submitted a few (very) small Pull Requests.  \nKeep it up! :)\n\nIn addition, many people have created templates off Audrey Roy's excellent Cookiecutter (see cookiecutter-pypackage). Those are similar in purpose to mine. Or feel free to create your own configuration.\n\nI looked at that one, too, and it didn\u2019t feel as \u201ccomplete\u201d.  It\u2019s good, but not the right fit for my taste.\n\nAnother excellent source of information is Kenneth Reitz's Hitchhiker's Guide to Python.\n\nYeah, I love that project.  I\u2019ve been doing some smalltime work on it recently.\n\nI hope that helps. The setup is a bit complex, but you're on the right track.\n. \n",
    "barnabyrobson": "Thank you for the reply. Sorry to be dense but where would I look to see if\nPython 2.6.4 needs a patch and where do I get them? I am going to be\nbuilding on Centos 6.4. Does that matter ?\nOn Friday, March 21, 2014, Yamashita, Yuu notifications@github.com wrote:\n\nAdd definition of 2.6.4 as similar as other CPython 2.6 releases.\nhttps://github.com/yyuu/pyenv/blob/master/plugins/python-build/share/python-build/2.6.6\nPlus, some older CPython versions might require additional patches to\nbuild them on modern system. If there are patches, put them in patchesdirectory.\nhttps://github.com/yyuu/pyenv/tree/master/plugins/python-build/share/python-build/patches/2.6.6/Python-2.6.6\n\nReply to this email directly or view it on GitHubhttps://github.com/yyuu/pyenv/issues/143#issuecomment-38344727\n.\n. \n",
    "keisetsu": "Very sorry, this was due to a shell alias!\n. @Jacek\nI didn't fix it, I was using an alias in my bashrc that called the system\npython, overriding the pyenv settings. I would recommend posting details\nabout your problem.\nOn Mon, Apr 14, 2014 at 10:32 AM, Jacek Bajor notifications@github.comwrote:\n\n@keisetsu https://github.com/keisetsu Could you please share how you\nfixed this? I am having the same problem.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/yyuu/pyenv/issues/145#issuecomment-40380155\n.\n. \n",
    "jbajor": "@keisetsu Could you please share how you fixed this? I am having the same problem.\n. ",
    "fcrespo82": "Yes it worked! Thank you very much for the quick fix!\n. ",
    "goxberry": "Awesome, thanks!\n. Yes, that works.\n. Thanks!\n. ",
    "doloopwhile": "Thanks.\n. ",
    "Paulius-Maruska": "Hello, I'm using Ubuntu 14.04 LTS, I got readline 6.3 installed (with apt-get, official sources).\nThere are no problems with any of the listed versions above, but when I tried to install python 2.5.6 - I got the message WARNING: The Python readline extension was not compiled. Missing the GNU readline lib?.\nI wish I didn't have to test my code on python 2.5... :/\n. ",
    "flanaman": "This seems to be related to a problem I've been having with my curl installation. I also recently installed Anaconda 1.9.1 in pyenv:\n```\n$ pyenv version\n3.3.4 (set by ... )\n$ which curl\n/home/mark/.pyenv/shims/curl\n$ curl\npyenv: curl: command not found\nThe `curl' command exists in these Python versions:\n  anaconda-1.9.1\n```\nWhile curl executes fine if I set the anaconda python version as active.\n. Works great for me so far. Thanks!\n. ",
    "xu-cheng": "While I got this:\nbash\n$ pyenv virtualenv -p /usr/local/bin/python3 venv3\nusage: venv [-h] [--system-site-packages] [--symlinks | --copies] [--clear]\n            [--upgrade] [--without-pip]\n            ENV_DIR [ENV_DIR ...]\nvenv: error: unrecognized arguments: --python=/usr/local/bin/python3\npyenv: version `venv3' is not installed\n^Cpyenv: version `venv3' is not installed\n^C%\n. Thanks it's working. \n. Ok, I got a new minor problem.\nI created two virtualenv by:\nbash\npyenv virtualenv -p /usr/local/bin/python venv2\npyenv virtualenv -p /usr/local/bin/python3 venv3\nThen I found the file ~/.pyenv/shims/python3 is created. This means I cannot run python3 command if I activate venv2 by pyenv activate venv2. It will emit error: \n```\npyenv: python3: command not found\nThe `python3' command exists in these Python versions:\n  venv3\n```\nIt's fine in most the time. But there's a script in my zsh plugin running python3 which will cause problem.  I know can easy-fix this by replace python3 to /usr/local/bin/python3 in my zsh. But is there a better solution to let me use python3 in a python2 virtualenv.\nIt's fine that my minor problem won't been fixed.\n. Thanks.\n. Any reason for \"wontfix\"?\n. While, on the other hand, it's almost painful for users who have slow network without any knowledge of download state.\n. ",
    "Mikaela": "Yes, that works. Thanks.\n. ",
    "rvoicilas": "Will have to get back on this one with the tests fixed.\n. ",
    "alex": "Thanks!\n. Thanks! Will a release be done for this?\n. woo, thanks\nOn Tue, Sep 23, 2014 at 9:58 PM, Yamashita, Yuu notifications@github.com\nwrote:\n\nReleased v20140924 at ab9ee41\nhttps://github.com/yyuu/pyenv/commit/ab9ee414ad836ea21950ed44eeb77a5b272a6549\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/yyuu/pyenv/issues/241#issuecomment-56624993.\n\n\n\"I disapprove of what you say, but I will defend to the death your right to\nsay it.\" -- Evelyn Beatrice Hall (summarizing Voltaire)\n\"The people's good is the highest law.\" -- Cicero\nGPG Key fingerprint: 125F 5C67 DFE9 4084\n. Awesome, thanks!\n. Awesome :sparkles: thanks!\n. Any chance there'll be a release done for this?\n. Awesome! Thanks so much for all your hard work.\n. Awesome! Thanks. Looking forward to having this in a release.\n. Yup, already sent a PR to homebrew :D Thanks!\nOn Tue, Jun 2, 2015 at 9:07 AM, Josh Friend notifications@github.com\nwrote:\n\n@alex https://github.com/alex ICYMI: v20150601\nhttps://github.com/yyuu/pyenv/releases/tag/v20150601\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/yyuu/pyenv/issues/383#issuecomment-107947801.\n\n\n\"I disapprove of what you say, but I will defend to the death your right to\nsay it.\" -- Evelyn Beatrice Hall (summarizing Voltaire)\n\"The people's good is the highest law.\" -- Cicero\nGPG Key fingerprint: 125F 5C67 DFE9 4084\n. This looks sensible to me -- does anyone recall why bitbucket was chosen in the first place?\n. Thanks!\n. Thanks!\n. I'll send a PR to homebrew momentarily! Thanks!\nOn Tue, Nov 3, 2015 at 8:33 AM, Yamashita, Yuu notifications@github.com\nwrote:\n\nAh, I've just released v20151103 by some accident. Anyway it should be\nokay.\nI'd like to ask someone to release v20151103 to Homebrew if possible....\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/yyuu/pyenv/issues/468#issuecomment-153353726.\n\n\n\"I disapprove of what you say, but I will defend to the death your right to\nsay it.\" -- Evelyn Beatrice Hall (summarizing Voltaire)\n\"The people's good is the highest law.\" -- Cicero\nGPG Key fingerprint: 125F 5C67 DFE9 4084\n. Any chance of issuing a release so we can package this up for homebrew? Thanks!\n. thanks! PR sent to homebrew: https://github.com/Homebrew/homebrew-core/pull/2444\n. Any chance of making a release for this? Thanks!\n. Looks like these are all merged, yay! Any chance of cutting a release?. Wahoo! Thanks for making pyenv so great!. Backport was completed.. \ud83c\udf89  is there a plan to issue a release with this change it?. Any chance there'll be a release with this in it soon?\nThanks so much!. Thanks so much for the quick turnaround! Looking forward to this being in a release.. And Happy Holidays!. As of fish 2.6, both appear to work. I could have sworn with fish 2.5 that source was the preferred spelling.. ",
    "thelou1s": "slow in vultr.com VPS Server too, and finally failed\uff1a\n```\n[root@vultr shadowsocks_manager]# pyenv install 3.7.0\nDownloading Python-3.7.0.tgz...\n-> https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz\nInstalling Python-3.7.0...\nBUILD FAILED (CentOS release 6.9 (Final) using python-build 1.2.5-4-gc057a80)\nInspect or clean up the working tree at /tmp/python-build.20180703061113.29627\nResults logged to /tmp/python-build.20180703061113.29627.log\nLast 10 log lines:\n    import pip._internal\n  File \"/tmp/tmpi7hjpoys/pip-10.0.1-py2.py3-none-any.whl/pip/_internal/init.                                   py\", line 42, in \n  File \"/tmp/tmpi7hjpoys/pip-10.0.1-py2.py3-none-any.whl/pip/_internal/cmdoption                                   s.py\", line 16, in \n  File \"/tmp/tmpi7hjpoys/pip-10.0.1-py2.py3-none-any.whl/pip/_internal/index.py\"                                   , line 25, in \n  File \"/tmp/tmpi7hjpoys/pip-10.0.1-py2.py3-none-any.whl/pip/_internal/download.                                   py\", line 39, in \n  File \"/tmp/tmpi7hjpoys/pip-10.0.1-py2.py3-none-any.whl/pip/_internal/utils/gli                                   bc.py\", line 3, in \n  File \"/tmp/python-build.20180703061113.29627/Python-3.7.0/Lib/ctypes/init.                                   py\", line 7, in \n    from _ctypes import Union, Structure, Array\nModuleNotFoundError: No module named '_ctypes'\nmake: *** [install] Error 1\n```\ninstalled dep in contos 6, then\n```\n[root@vultr shadowsocks_manager]# pyenv install 3.7.0\nDownloading Python-3.7.0.tar.xz...\n-> https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tar.xz\nInstalling Python-3.7.0...\nERROR: The Python ssl extension was not compiled. Missing the OpenSSL lib?\nPlease consult to the Wiki page to fix the problem.\nhttps://github.com/pyenv/pyenv/wiki/Common-build-problems\n```\nbut openssl is ok\n[root@vultr shadowsocks_manager]# yum install openssl-devel                                                        Loaded plugins: fastestmirror\nSetting up Install Process\nLoading mirror speeds from cached hostfile\n * base: mirror.fileplanet.com\n * epel: mirror.metrocast.net\n * extras: mirror.fileplanet.com\n * updates: mirror.fileplanet.com\nPackage openssl-devel-1.0.1e-57.el6.x86_64 already installed and latest version\nNothing to do\n. ",
    "audiodude": "Found a solution on:\nhttp://stackoverflow.com/questions/22413050/cant-install-python-mysql-library-on-mac-mavericks\nDid the following and it worked:\n$ export CFLAGS=-Qunused-arguments\n$ export CPPFLAGS=-Qunused-arguments\n$ pyenv install 3.4.0\n. Ah, sorry! It looks like I had\nexport CPPFLAGS=-Qunused-argument\nin my .bashrc. Of course \"unused-argument\" is not a valid argument (it's supposed to be unsed-arguments with an 's') and that's what was causing the error I believe.\n. I have included that information in the update to my original post.\n. That makes sense. Like I said, it's a new system so not having a system python at all makes sense.  I would say that the \"bug\", if any, is the fact that pyenv versions reports that there is a system python, and pyenv which further prints out its path. Other than that I understand the explanation and I'm unblocked, having already done pyenv install 2.7.8 and pyenv virtualenv 2.7.8 s3cmd.\n. ",
    "thomasjo": "Great idea!\nAlthough I find it a little bit confusing that the alias is the second argument; following the usual command line conventions, the alias should be the argument immediately following the option flag. In other words, the usage should be\nbash\n$ PYTHON_CONFIGURE_OPTS=\"--enable-shared\" pyenv install -a 2.7.5_shared 2.7.5\nHaving the ordering like it is now, will most likely be very confusing to almost every user, so I would strongly encourage changing it.\n. That's a :+1: from me. As I was just about to reply, if we add the alias in as it stands now, that would mean keeping it like this, or support both forms, lest be break build scripts and what not in the future.\nCreating a separate PR for rewriting the option parsing to leverage getopt would be brilliant and leave us in a better, more future-proof spot.\nLet me know if you want my help.\n. I'm just a normal user (with strong opinions :grin:) of pyenv, so we'll have to wait for @yyuu I believe to get PRs merged. I'd merge both in a heartbeat if it was up to me, hehe.\n. I can have a crack at it! I'll be stuck in airports and in transit most of the day, so I might not have it done today, but I'll get started on it now and hopefully finish it in a couple of hours or so (fingers crossed).\n. Nice one @yyuu! :+1: \n. @s1341 distributing plugins is trivial. rbenv, upon which pyenv is based, doesn't even bundle ruby-build (the equivalent of pyenv-build), but rolling out ruby-build bundled with rbenv, is just as easy as rbenv on it's own... either pre-package or just clone both git repos. All you need to do is clone the plugin repo into the ~/.pyenv/plugins folder, and you're good to go.\nNot sure how that is difficult? If there's something we're not considering, please let us know. \n. Look a little closer :laughing: \n\nIn addition to the announcement:\nhttp://continuum.io/blog/anaconda-2-released\nI don't submit PRs for something I haven't tested and verified; I'm using Anaconda3 v2.0.0 on all of my machines, installed with the new definition.\n. No worries, that link is quite small and easy to overlook. They also chose not to drop the binaries into the archive directory on the downloads server, but rather a separate new directory, which made it a little confusing initially when constructing the definition.\nThanks for merging :+1: \n. Let me know if you need/want any help with the shasum migration as I was the one who did that work in ruby-build.\n. :+1:\n. It (https://bootstrap.pypa.io/ez_setup.py) is now pointing to the newly released v5.1 of setuptools :relieved: \n. @evrial Your problem can be resolved by installing pyenv-which-ext, alternatively switching to the anaconda env (or deleting it).\n. Just do pyenv shell 3.4.1 2.7.8.\n. Use the virtualenvwrapper plugin.\n. Nope, definitely intentional: https://github.com/sstephenson/ruby-build/pull/600#issuecomment-55066035\n. What does your $PATH look like? You need to make sure that Homebrew's bin folder (i.e. /usr/local/bin) is listed near the beginning of $PATH, at least before /usr/bin.\n. Make sure you're running the latest version of pyenv; PyPy 2.4.0 was added 5 days ago in c3a755c853d537c8b38a48bb68d566fdcf080729.\nsh\n$ pyenv --version\npyenv 20140924-1-g737e0f1\n$ pyenv install --list | grep 'pypy-2.4.0$' | tr -d ' '\npypy-2.4.0\n. @twmht Just having it in your $PATH variable is not enough. It needs to have precedence over e.g. /usr/bin. tmux tends to cause issues here out of the box, so one needs to be careful. Feel free to show us your $PATH so we can verify if this is indeed the problem. \n. A progress bar would completely \"nuke\" log files with noise. I'm guessing this won't be implemented for that exact reason (which is also why it's not implemented in rbenv).\n. Shows up fine here. Make sure you haven't got pyenv installed via some package manager (e.g. Homebrew) in addition to ~/.pyenv.\n. Setting LD_LIBRARY_PATH is generally considered harmful. It should only ever be set when experimenting during development. It breaks all kinds of environments, especially ones with multiple versions of the same library. \nLink against the library properly instead.\n. Where are you setting PYENV_ROOT and updating PATH, if at all? See step 2.\n. > I noticed your \"/Users//.pyenv\" directory. Are you trying to do this on Windows via cygwin?\nThat is not a Cygwin path; OP is using OS X.\n. That output is exactly as expected; it's telling you the current python is set to your system python. If Homebrew is correctly configured on your system then the output of pyenv which python should point to the Python you installed via Homebrew.\n. I just installed Python 2.7.10 on El Capitan (15A284) without any problems. This is definitely an environment problem, and not a problem with pyenv.\n\n```\n\u279c  ~  pyenv install 2.7.10\nDownloading Python-2.7.10.tgz...\n-> https://yyuu.github.io/pythons/eda8ce6eec03e74991abb5384170e7c65fcd7522e409b8e83d7e6372add0f12a\nInstalling Python-2.7.10...\npatching file ./Lib/site.py\nInstalled Python-2.7.10 to /Users/thomasjo/.pyenv/versions/2.7.10\n\u279c  ~  pyenv --version\npyenv 20150913-14-gd462e15\n\u279c  ~  brew info openssl\nopenssl: stable 1.0.2d (bottled)\nOpenSSL SSL/TLS cryptography library\nhttps://openssl.org/\nThis formula is keg-only.\nApple has deprecated use of OpenSSL in favor of its own TLS and crypto libraries\n/usr/local/Cellar/openssl/1.0.2d_1 (464 files, 17M)\n  Poured from bottle\nFrom: https://github.com/Homebrew/homebrew/blob/master/Library/Formula/openssl.rb\n...\n``\n. @Feiox Yep, clean install. Only thing I can think of that might affect this is that I have Anaconda installed, and set up as a system-level python (e.g.python global system anaconda3-2.3.0`).\n. @nikolay Ensure that your Xcode (including Command Line Tools) is up to date. Latest version is v7.0.1.\n. Well, something is wrong with your environment, because it works perfectly fine on my (clean) OS X 10.11 (15A284) system with Xcode 7.0.1 (7A1001).\n. Uhmm... pyenv is self-contained. Just nuke the folder where you cloned the repo, e.g.\nbash\nrm -rf \"$HOME/.pyenv\"\n. Nice! I actually had to stop using Anaconda due to the problems I've had with its virtualenvs in conjunction with pyenv. This looks like a step in the right direction!\n. You cannot use pyenv global 3.5.1 since it is clearly not a version of Python managed by pyenv. You can however do pyenv global system.\nIf you want to be able to use your original command, you'll have to install 3.5.1 via pyenv install 3.5.1 first.\n. > No way to choose which system I want\nThere's only one \"system\". It basically means that pyenv does nothing. It's shims just point directly whatever is the \"system level\" Python distribution. That essentially boils down to your PATH environment variable, and whatever the python (and python2, python3 etc) executable/alias points to on your machine.\nTo see what the pyenv python shim points to, run pyenv which python.\n. Awesome! \ud83c\udf89 \n. Just try again \u2014 the download failed, which was likely caused by a hiccup on either end of the connection. This is not a problem with pyenv.\n. If you look at the error message, something is definitely wrong. Likely on your end since you're getting TLS certificate errors (issue specific to SSL handshake I think) which I am unable to reproduce. The certificate on repo.continuum.io seems valid on my end.\nIf you have wget installed, you might be able to manually work around your problem (until you fix your environment/certificate problem properly) by executing e.g.\nsh\n$ wget -P $(pyenv root)/cache https://repo.continuum.io/archive/Anaconda3-4.0.0-Linux-x86_64.sh\nThen you should be able to run pyenv install anaconda3-4.0.0 without problems, assuming that the manual download trick above succeeded.\n. Did you try downloading from that location using e.g. wget or curl?\nbash\nwget https://www.python.org/ftp/python/3.5.0/Python-3.5.0.tgz\nWorks fine here, so I'm guessing you're behind a proxy or some such which is preventing the download.\n. Awesome! \ud83c\udf89 \n. I'm going to assume you're running the script via python testosc.py; what is the output of python -V?\nJudging from the error you are definitely not running the script using Python 3.5.0 like you think you are.. This question honestly should not have been raised here, since it has nothing to do with pyenv (which is a tool for managing multiple installations of Python distributions). Regardless, you can trivially do what you desire with something like the following:\n$ pyenv shell 3.6.0  # Alternatively, replace 'shell' by 'local' or 'global'\n$ pip install pyqt4\nThe above assumes you've setup pyenv correctly, and have installed Python 3.6.0.. The change on this specific line doesn't make sense \u2014 it needs to be reverted. Read what it says, and you'll see why.. ",
    "rocktavious": "So i have successfully worked around the problem by using the jenkins pyenv plugin to but it seems this plugin doesn't install all of the extra helpers that pyenv-installer does, as it fails in a later build step when i'm calling:\npyenv activate env name\nit says that i need to restart my shell as the virtualenv plugin is not installed properly.  Its confusing because the preceding step worked:\npyenv virtualenv env name\nIs there a way to get the jenkins pyenv plugin to install all of the extra helpers that pyenv-installer does?\n. So it seems with the jenkins pyenv plugin i still get the concurrency issues but less often?  I can move the discussion over to that repo if you'd like but here is the console output from jenkins when the failure happens\nFetching changes from 1 remote Git repository\nFetching upstream changes from origin\nCommencing build of Revision 473910699523ae04d814b2c814ef2c4f8e3b8e68 (origin/master)\nChecking out Revision 473910699523ae04d814b2c814ef2c4f8e3b8e68 (origin/master)\n$ bash -c \"[ -d \\$HOME/.pyenv ]\"\n$ bash -c \"cd /var/lib/jenkins/slave-builds/workspace/Diagnose_Merge_Conflicts@2 && env PYENV_ROOT\\=\\$HOME/.pyenv PYENV_VERSION\\=2.6.6 \\$HOME/.pyenv/bin/pyenv local 2>/dev/null || true\"\n$ bash -c \"mkdir \\$HOME/.pyenv.lock\"\n$ bash -c \"env PYENV_ROOT\\=\\$HOME/.pyenv PYENV_VERSION\\=2.6.6 \\$HOME/.pyenv/bin/pyenv versions --bare\"\n$ bash -c \"env PYENV_ROOT\\=\\$HOME/.pyenv PYENV_VERSION\\=2.6.6 \\$HOME/.pyenv/bin/pyenv rehash\"\npyenv: cannot rehash: /var/lib/jenkins/.pyenv/shims/.pyenv-shim exists\n$ bash -c \"rmdir \\$HOME/.pyenv.lock\"\nFATAL: (CommandError) failed: \"env PYENV_ROOT\\=\\$HOME/.pyenv PYENV_VERSION\\=2.6.6 \\$HOME/.pyenv/bin/pyenv rehash\"\norg.jruby.exceptions.RaiseException: (CommandError) failed: \"env PYENV_ROOT\\=\\$HOME/.pyenv PYENV_VERSION\\=2.6.6 \\$HOME/.pyenv/bin/pyenv rehash\"\n    at Pyenv::InvokeCommand.run(/var/lib/jenkins/plugins/pyenv/WEB-INF/classes/lib/pyenv/invoke.rb:18)\n    at Pyenv::Environment.pip_install!(/var/lib/jenkins/plugins/pyenv/WEB-INF/classes/lib/pyenv.rb:80)\n    at Pyenv::Environment.setup!(/var/lib/jenkins/plugins/pyenv/WEB-INF/classes/lib/pyenv.rb:32)\n    at Pyenv::Semaphore.synchronize(/var/lib/jenkins/plugins/pyenv/WEB-INF/classes/lib/pyenv/semaphore.rb:15)\n    at Pyenv::Semaphore.synchronize(/var/lib/jenkins/plugins/pyenv/WEB-INF/classes/lib/pyenv/semaphore.rb:13)\n    at Pyenv::Environment.setup!(/var/lib/jenkins/plugins/pyenv/WEB-INF/classes/lib/pyenv.rb:24)\n    at PyenvWrapper.setup(/var/lib/jenkins/plugins/pyenv/WEB-INF/classes/models/pyenv_wrapper.rb:57)\n    at Jenkins::Model::EnvironmentProxy::InstanceMethods.setUp(/var/lib/jenkins/plugins/pyenv/WEB-INF/classes/vendor/gems/gems/jenkins-plugin-runtime-0.2.3/lib/jenkins/model/environment_proxy.rb:8)\n. ",
    "columbusmonkey": "Where is the issue tracker for the jenkins-pyenv-plugin? (As it looks like it may remove the lock directory, even if it did not manage to create it.)\n. The -q prevented me from adding --sslv3 to my .curlrc, that I needed to workaround the following:\nInstalling setuptools from https://bootstrap.pypa.io/ez_setup.py...\ncurl: (35) SSL connect error\nInstalling pip from https://bootstrap.pypa.io/get-pip.py...\ncurl: (35) SSL connect error\nSo there may be other reasons to remove the -q, or perhaps there may be an argument to support removing it somehow on request, (or being able to prefer wget over curl would also have solved my issue).\n. Both those suggested env vars would have worked for me. I just used wget and ran python get-pip.sh (using the pyenv-installed python).\ncurl 7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.15.3 zlib/1.2.3 libidn/1.18 libssh2/1.4.2\nProtocols: tftp ftp telnet dict ldap ldaps http file https ftps scp sftp \nFeatures: GSS-Negotiate IDN IPv6 Largefile NTLM SSL libz\n. ",
    "frougon": "Thank you!\n. ",
    "jackmaney": "Also, if it helps, I installed pyenv via homebrew. \n. I checked, and $PYENV_ROOT/shims is in front of /usr/local/bin:\njackmaney@Jacks-Mac-mini:~$ echo $PATH\n/Users/jackmaney/perl5/perlbrew/bin:/Users/jackmaney/perl5/perlbrew/perls/perl-5.18.2/bin:/usr/local/opt/pyenv/bin:/usr/local/opt/pyenv/shims:/Users/jackmaney/.pyenv/shims:/Library/Frameworks/Mono.framework/Versions/Current/bin:/usr/local/bin:/Users/jackmaney/.cabal/bin:/usr/local/Cellar/go/1.2/libexec/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin:/usr/texbin:/Users/jackmaney/go/bin\n. Yep, bash is my shell.\njackmaney@Jacks-Mac-mini:~$ which python\n/usr/local/opt/pyenv/shims/python\njackmaney@Jacks-Mac-mini:~$ pyenv which python\n/usr/local/opt/pyenv/versions/2.7.7/bin/python\n. Interesting....after performing rm -rf ~/.pyenv and restarting the shell, ~/.pyenv appears again (along with empty shims and versions subdirectories). My bash-fu isn't super strong, but I'm not immediately seeing anything within $(pyenv init -) that would cause this behavior, and I don't see anything in my .bash_profile that would automatically do this upon each shell start, either.\n. I uninstalled pyenv (via homebrew), did a rm -rf ~/.pyenv, restarted the shell, and ~/.pyenv still didn't exist. I then reinstalled pyenv, restarted the shell, and ~/.pyenv was there again...\n. Thankfully, wiping the Python installs allowed pyenv to switch to the system install, but after reinstalling 2.7.7, I can't globally switch to it.\nI've uninstalled and reinstalled pyenv multiple times. I've manually wiped the directories where pyenv does its Python installs. I've even switched $PYENV_ROOT to $HOME/.pyenv. \nNow, here's the interesting thing...I can do a local switch (pyenv local 2.7.7). I also reinstalled 3.4.1 via pyenv and I can do a local switch to that, as well. However, global switches are still being ignored.\n. Unfortunately, this is not a new issue. To this day, pyenv global <version name> seems to be a noop. \n```\n~ $ pyenv install 2.7.9\nDownloading Python-2.7.9.tgz...\n-> https://www.python.org/ftp/python/2.7.9/Python-2.7.9.tgz\nInstalling Python-2.7.9...\nInstalling setuptools from https://bootstrap.pypa.io/ez_setup.py...\nInstalling pip from https://bootstrap.pypa.io/get-pip.py...\nInstalled Python-2.7.9 to /Users/[username]/.pyenv/versions/2.7.9\n~ $ pyenv versions\n system (set by /Users/[username]/.python-version)\n  2.7.9\n~ $ pyenv global 2.7.9\n~ $ pyenv versions\n system (set by /Users/[username]/.python-version)\n  2.7.9\n~ $ which python\n/Users/[username]/.pyenv/shims/python\n~ $ pyenv which python\n/usr/bin/python\n~ $ python --version\nPython 2.7.5\n~ $\n```\nEven a rehash did nothing:\n~ $ pyenv global 2.7.9\n~ $ pyenv versions\n* system (set by /Users/[username]/.python-version)\n  2.7.9\nI love the idea of pyenv, but it seems to be horribly, horribly broken.\n. ...wait... I just realized something. I had a .python-version file sitting in ~:\n~ $ rm .python-version\n~ $ pyenv global 2.7.9\n~ $ pyenv versions\n  system\n* 2.7.9 (set by /Users/[username]/.pyenv/version)\nFor shits and giggles, I did another installation to see if it sticks, and it does!\n```\n~ $ pyenv install 3.4.3\nDownloading Python-3.4.3.tgz...\n-> https://www.python.org/ftp/python/3.4.3/Python-3.4.3.tgz\nInstalling Python-3.4.3...\nInstalled Python-3.4.3 to /Users/[username]/.pyenv/versions/3.4.3\n~ $ pyenv versions\n  system\n 2.7.9 (set by /Users/[username]/.pyenv/version)\n  3.4.3\n~ $ pyenv global 3.4.3\n~ $ rm .python-version\nrm: .python-version: No such file or directory\n~ $ pyenv global 3.4.3\n~ $ pyenv versions\n  system\n  2.7.9\n 3.4.3 (set by /Users/[username]/.pyenv/version)\n~ $ python --version\nPython 3.4.3\n```\nSo, for about seven months, what was perplexing me was the presence of a .python-version file...\nI propose the following feature: if a user does pyenv global <version> in a directory where a .python-version file exists, a warning should be given, something along the lines of:\npyenv: global version of <global_version> in <this directory> overridden by local version of <local_version>, supplied by ./.python-version\n. In the meantime, I've altered my PS1 slightly so that I always have the name of the pyenv version displayed. Check here for details.\n. Well, pyenv shouldn't have been installed in both of those locations. ~/.pyenv is primarily a directory for storing a download cache, and installed versions of python. The only thing accomplished by deleting ~/.pyenv is getting rid of the Python interpreters installed by pyenv.\n. ```\n$ python --version\nPython 2.7.10\n$ pyenv which pip\npyenv: pip: command not found\nThe pip' command exists in these Python versions:\n  2.6.9\n  3.2.6\n  3.3.6\n  3.4.3\n  3.5.0b2\n  ...\n```\n. Well, apyenv shell systemseemed to do the trick, and it's still pointing to 2.7.10. I wonder if Homebrew doesn't play a part in this...I installed 2.7.10 via Homebrew (it's a prerequisite for other things that I use), and that seems to be whatsystempoints to (and not the actual system python at/usr/bin/python`).\nHowever, this doesn't work for 2.x other than 2.7.10. \nSo, it started to appeared as though pyenv doesn't seem to play nicely with Homebrew's python formula. However, in my PATH, I have, $HOME/.pyenv/shims and $HOME/.pyenv bin before /usr/local/bin.\nLooking at the installations within ~/.pyenv, pip doesn't seem to come with 2.7.9 or 2.7.10 via pyenv:\n```\n~/.pyenv/versions/2.7.9/bin $ ll\ntotal 5136\ndrwxr-xr-x  12   staff   408B Jul 17 17:03 ./\ndrwxr-xr-x   6   staff   204B Jul 17 17:03 ../\n-rwxr-xr-x   1   staff   128B Jul 17 17:02 2to3\n-rwxr-xr-x   1   staff   126B Jul 17 17:02 idle\n-rwxr-xr-x   1   staff   111B Jul 17 17:02 pydoc\nlrwxr-xr-x   1   staff     7B Jul 17 17:03 python@ -> python2\nlrwxr-xr-x   1   staff    14B Jul 17 17:03 python-config@ -> python2-config\nlrwxr-xr-x   1   staff     9B Jul 17 17:03 python2@ -> python2.7\nlrwxr-xr-x   1   staff    16B Jul 17 17:03 python2-config@ -> python2.7-config\n-rwxr-xr-x   1   staff   2.5M Jul 17 17:02 python2.7\n-rwxr-xr-x   1   staff   1.7K Jul 17 17:03 python2.7-config\n-rwxr-xr-x   1   staff    18K Jul 17 17:02 smtpd.py\n~/.pyenv/versions/2.7.10/bin $ ll\ntotal 5136\ndrwxr-xr-x  12   staff   408B Jul 17 11:33 ./\ndrwxr-xr-x   6   staff   204B Jul 17 11:33 ../\n-rwxr-xr-x   1   staff   129B Jul 17 11:33 2to3\n-rwxr-xr-x   1   staff   127B Jul 17 11:33 idle\n-rwxr-xr-x   1   staff   112B Jul 17 11:33 pydoc\nlrwxr-xr-x   1   staff     7B Jul 17 11:33 python@ -> python2\nlrwxr-xr-x   1   staff    14B Jul 17 11:33 python-config@ -> python2-config\nlrwxr-xr-x   1   staff     9B Jul 17 11:33 python2@ -> python2.7\nlrwxr-xr-x   1   staff    16B Jul 17 11:33 python2-config@ -> python2.7-config\n-rwxr-xr-x   1   staff   2.5M Jul 17 11:33 python2.7\n-rwxr-xr-x   1   staff   1.7K Jul 17 11:33 python2.7-config\n-rwxr-xr-x   1   staff    18K Jul 17 11:33 smtpd.py\n```\nContrast this with the pyenv installation of 3.4.3:\n~/.pyenv/versions/3.4.3/bin $ ll\ntotal 14216\ndrwxr-xr-x  71 <username>  staff   2.4K Jul 17 17:13 ./\ndrwxr-xr-x   7 <username>  staff   238B Apr  8 14:52 ../\nlrwxr-xr-x   1 <username>  staff     8B Mar 17 15:58 2to3@ -> 2to3-3.4\n-rwxr-xr-x   1 <username>  staff   128B Mar 17 15:58 2to3-3.4*\n-rwxr-xr-x   1 <username>  staff   245B Mar 18 03:45 autopep8*\nlrwxr-xr-x   1 <username>  staff    16B Mar 17 15:58 easy_install@ -> easy_install-3.4\n-rwxr-xr-x   1 <username>  staff   268B Mar 17 15:58 easy_install-3.4*\n-rwxr-xr-x   1 <username>  staff   721B Mar 17 22:20 f2py*\n-rwxr-xr-x   1 <username>  staff   248B Mar 24 11:42 flake8*\nlrwxr-xr-x   1 <username>  staff     7B Mar 17 15:58 idle@ -> idle3.4\nlrwxr-xr-x   1 <username>  staff     7B Mar 17 15:58 idle3@ -> idle3.4\n-rwxr-xr-x   1 <username>  staff   126B Mar 17 15:58 idle3.4*\n-rwxr-xr-x   1 <username>  staff   301B Apr  8 14:52 ipcluster*\n-rwxr-xr-x   1 <username>  staff   301B Apr  8 14:52 ipcluster3*\n-rwxr-xr-x   1 <username>  staff   304B Apr  8 14:52 ipcontroller*\n-rwxr-xr-x   1 <username>  staff   304B Apr  8 14:52 ipcontroller3*\n-rwxr-xr-x   1 <username>  staff   300B Apr  8 14:52 ipengine*\n-rwxr-xr-x   1 <username>  staff   300B Apr  8 14:52 ipengine3*\n-rwxr-xr-x   1 <username>  staff   269B Apr  8 14:52 iptest*\n-rwxr-xr-x   1 <username>  staff   269B Apr  8 14:52 iptest3*\n-rwxr-xr-x   1 <username>  staff   262B Apr  8 14:52 ipython*\n-rwxr-xr-x   1 <username>  staff   262B Apr  8 14:52 ipython3*\n-rwxr-xr-x   1 <username>  staff   251B Mar 17 22:21 jsonschema*\n-rwxr-xr-x   1 <username>  staff   249B Apr  8 14:52 nosetests*\n-rwxr-xr-x   1 <username>  staff   249B Apr  8 14:52 nosetests-3.4*\n-rwxr-xr-x   1 <username>  staff   249B Mar 17 16:14 pbr*\n-rwxr-xr-x   1 <username>  staff   118B Mar 27 12:59 pep257*\n-rwxr-xr-x   1 <username>  staff   243B Mar 24 11:42 pep8*\n-rwxr-xr-x   1 <username>  staff   237B Jul 17 11:05 pip*\n-rwxr-xr-x   1 <username>  staff   237B Jul 17 11:05 pip3*\n-rwxr-xr-x   1 <username>  staff   237B Jul 17 11:05 pip3.4*\n-rwxr-xr-x   1 <username>  staff   325B Mar 17 22:21 pybabel*\nlrwxr-xr-x   1 <username>  staff     8B Mar 17 15:58 pydoc@ -> pydoc3.4\nlrwxr-xr-x   1 <username>  staff     8B Mar 17 15:58 pydoc3@ -> pydoc3.4\n-rwxr-xr-x   1 <username>  staff   111B Mar 17 15:58 pydoc3.4*\n-rwxr-xr-x   1 <username>  staff   249B Mar 24 11:42 pyflakes*\n-rwxr-xr-x   1 <username>  staff   253B Mar 17 22:21 pygmentize*\nlrwxr-xr-x   1 <username>  staff     9B Mar 17 15:58 python@ -> python3.4\nlrwxr-xr-x   1 <username>  staff    16B Mar 17 15:58 python-config@ -> python3.4-config\nlrwxr-xr-x   1 <username>  staff     9B Mar 17 15:58 python3@ -> python3.4\nlrwxr-xr-x   1 <username>  staff    16B Mar 17 15:58 python3-config@ -> python3.4-config\n-rwxr-xr-x   2 <username>  staff   3.3M Mar 17 15:58 python3.4*\nlrwxr-xr-x   1 <username>  staff    17B Mar 17 15:58 python3.4-config@ -> python3.4m-config\n-rwxr-xr-x   2 <username>  staff   3.3M Mar 17 15:58 python3.4m*\n-rwxr-xr-x   1 <username>  staff   2.0K Mar 17 15:58 python3.4m-config*\nlrwxr-xr-x   1 <username>  staff    10B Mar 17 15:58 pyvenv@ -> pyvenv-3.4\n-rwxr-xr-x   1 <username>  staff   263B Mar 17 15:58 pyvenv-3.4*\n-rwxr-xr-x   1 <username>  staff   629B Mar 17 22:21 rst2html.py*\n-rwxr-xr-x   1 <username>  staff   826B Mar 17 22:21 rst2latex.py*\n-rwxr-xr-x   1 <username>  staff   635B Mar 17 22:21 rst2man.py*\n-rwxr-xr-x   1 <username>  staff   799B Mar 17 22:21 rst2odt.py*\n-rwxr-xr-x   1 <username>  staff   1.7K Mar 17 22:21 rst2odt_prepstyles.py*\n-rwxr-xr-x   1 <username>  staff   636B Mar 17 22:21 rst2pseudoxml.py*\n-rwxr-xr-x   1 <username>  staff   672B Mar 17 22:21 rst2s5.py*\n-rwxr-xr-x   1 <username>  staff   821B Mar 17 22:21 rst2xetex.py*\n-rwxr-xr-x   1 <username>  staff   637B Mar 17 22:21 rst2xml.py*\n-rwxr-xr-x   1 <username>  staff   705B Mar 17 22:21 rstpep2html.py*\n-rwxr-xr-x   1 <username>  staff    16K Mar 24 11:01 runxlrd.py*\n-rwxr-xr-x   1 <username>  staff   250B Mar 17 22:21 sphinx-apidoc*\n-rwxr-xr-x   1 <username>  staff   268B Mar 17 22:21 sphinx-autogen*\n-rwxr-xr-x   1 <username>  staff   243B Mar 17 22:21 sphinx-build*\n-rwxr-xr-x   1 <username>  staff   254B Mar 17 22:21 sphinx-quickstart*\n-rwxr-xr-x   1 <username>  staff   317B Mar 17 16:18 tox*\n-rwxr-xr-x   1 <username>  staff   339B Mar 17 16:18 tox-quickstart*\n-rwxr-xr-x   1 <username>  staff   247B Mar 17 16:14 virtualenv*\n-rwxr-xr-x   1 <username>  staff   247B Mar 17 16:14 virtualenv-3.4*\n-rwxr-xr-x   1 <username>  staff   382B Mar 17 16:14 virtualenv-clone*\n-rwxr-xr-x   1 <username>  staff    38K Mar 17 16:14 virtualenvwrapper.sh*\n-rwxr-xr-x   1 <username>  staff   2.0K Mar 17 16:14 virtualenvwrapper_lazy.sh*\n-rwxr-xr-x   1 <username>  staff   244B Jul 17 11:05 wheel*\n-rwxr-xr-x   1 <username>  staff   311B Apr  6 11:32 x_x*\nAnd 3.5.0b2:\n$ ll ~/.pyenv/versions/3.5.0b2/bin\ntotal 14344\ndrwxr-xr-x  25 <username>  staff   850B Jul 17 11:41 ./\ndrwxr-xr-x   6 <username>  staff   204B Jul 17 11:41 ../\nlrwxr-xr-x   1 <username>  staff     8B Jul 17 11:41 2to3@ -> 2to3-3.5\n-rwxr-xr-x   1 <username>  staff   130B Jul 17 11:41 2to3-3.5*\nlrwxr-xr-x   1 <username>  staff    16B Jul 17 11:41 easy_install@ -> easy_install-3.5\n-rwxr-xr-x   1 <username>  staff   270B Jul 17 11:41 easy_install-3.5*\nlrwxr-xr-x   1 <username>  staff     7B Jul 17 11:41 idle@ -> idle3.5\nlrwxr-xr-x   1 <username>  staff     7B Jul 17 11:41 idle3@ -> idle3.5\n-rwxr-xr-x   1 <username>  staff   128B Jul 17 11:41 idle3.5*\nlrwxr-xr-x   1 <username>  staff     6B Jul 17 11:41 pip@ -> pip3.5\n-rwxr-xr-x   1 <username>  staff   242B Jul 17 11:41 pip3*\n-rwxr-xr-x   1 <username>  staff   242B Jul 17 11:41 pip3.5*\nlrwxr-xr-x   1 <username>  staff     8B Jul 17 11:41 pydoc@ -> pydoc3.5\nlrwxr-xr-x   1 <username>  staff     8B Jul 17 11:41 pydoc3@ -> pydoc3.5\n-rwxr-xr-x   1 <username>  staff   113B Jul 17 11:41 pydoc3.5*\nlrwxr-xr-x   1 <username>  staff     9B Jul 17 11:41 python@ -> python3.5\nlrwxr-xr-x   1 <username>  staff    16B Jul 17 11:41 python-config@ -> python3.5-config\nlrwxr-xr-x   1 <username>  staff     9B Jul 17 11:41 python3@ -> python3.5\nlrwxr-xr-x   1 <username>  staff    16B Jul 17 11:41 python3-config@ -> python3.5-config\n-rwxr-xr-x   2 <username>  staff   3.5M Jul 17 11:41 python3.5*\nlrwxr-xr-x   1 <username>  staff    17B Jul 17 11:41 python3.5-config@ -> python3.5m-config\n-rwxr-xr-x   2 <username>  staff   3.5M Jul 17 11:41 python3.5m*\n-rwxr-xr-x   1 <username>  staff   2.0K Jul 17 11:41 python3.5m-config*\nlrwxr-xr-x   1 <username>  staff    10B Jul 17 11:41 pyvenv@ -> pyvenv-3.5\n-rwxr-xr-x   1 <username>  staff   265B Jul 17 11:41 pyvenv-3.5*\n. The issue is on my work laptop, so I'll try it tomorrow or Monday and report the results. Thank you for looking into this.\n. After doing a bit of digging, I discovered that the python-build plugin was symlinked to an old version of pyenv (over a month old). So, after uninstalling all versions of pyenv via Homebrew, reinstalling, and then manually applying the changes above, a fresh install of 2.7.10 now includes pip.\nThanks for the help!\n. ",
    "mattjmorrison": "I was having the same issues - I was able to get pyenv local working by adding the following to my .zshrc file (if you're not using zsh then add the following to your .bashrc file)\nexport PYENV_ROOT=~/.pyenv\nexport PATH=$PYENV_ROOT/shims:$PATH\npyenv global does not seem to work for me either (also - unrelated by pyenv shell does not seem to exist)\n. I discovered the problem. It was because I have a custom ~/.pip/pip.conf with a custom global index-url. Apparently get-pip.py doesn't quite handle that custom index-url correctly - or maybe doesn't report errors in a very friendly manner. Temporarily renaming my pip.conf file fixed my issue. Thanks!\n. ",
    "llazzaro": "Hello,\nI also had the same problems with fedora. I think virtualenv or virtualenvwrapper caused this problems in my setup.\n. I had the same issue, if I execute python I got \"python: command not found\".\n I solved it with: python local 2.7.13 (or whatever version you want).\n. ",
    "fphilipe": "Just ran into this issue. I followed the installation instruction from brew info pyenv:\n```\nTo enable shims and autocompletion add to your profile:\n  if which pyenv > /dev/null; then eval \"$(pyenv init -)\"; fi\nTo use Homebrew's directories rather than ~/.pyenv add to your profile:\n  export PYENV_ROOT=/usr/local/var/pyenv\n```\nSo I had the export after the if, which caused it to not work. Having the export before the pyenv initialization fixes it and, in hindsight, is obvious that the var should be set before. It might be a good idea to update the installation instruction on the homebrew package to say:\n\nTo use Homebrew's directories rather than ~/.pyenv add to your profile before the line above:\n. \n",
    "cloga": "Hello  yyuu,\nSorry , I don't know  which answer on this page fit my situation.\nI have follow the requirement section and install readline and link readline, I also try to install zlib use port and homebrew, but I stil got same error.\nBy the way , I use mac OS X 10.10 DP.\n. It works, thank you.\n. ",
    "smackesey": "I am not sure how this happened, but somehow the root of my anaconda installation had been symlinked into /usr/local/.git/refs/heads. This was causing the issue.\n. ",
    "alexmic": "@yyuu Can you update the tarball for 2.6.6 since this is fixed? http://yyuu.github.io/pythons/372f66db46d773214e4619df1794a26449158f626138d4d2141a64c2f017fae1 does not work.\n. ",
    "lostinplace": "full output : \n``` bash\n~/dev/git/chunked-data-problem/js (master *=)$ pyenv install 2.7\nDownloading Python-2.7.tgz...\n-> http://yyuu.github.io/pythons/5670dd6c0c93b0b529781d070852f7b51ce6855615b16afcd318341af2910fb5\nInstalling Python-2.7...\npatching file setup.py\npatching file ./Lib/ssl.py\nHunk #1 succeeded at 62 with fuzz 1 (offset 1 line).\nHunk #2 succeeded at 418 (offset 4 lines).\npatching file ./Modules/_ssl.c\nHunk #3 succeeded at 1709 (offset 17 lines).\npatching file ./Modules/readline.c\nHunk #1 succeeded at 200 (offset -6 lines).\nHunk #2 succeeded at 699 (offset -50 lines).\nHunk #3 succeeded at 809 (offset -50 lines).\nHunk #4 succeeded at 849 with fuzz 2 (offset -69 lines).\nInstalled Python-2.7 to /usr/local/opt/pyenv/versions/2.7\nDownloading setuptools-4.0.1.tar.gz...\n-> https://pypi.python.org/packages/source/s/setuptools/setuptools-4.0.1.tar.gz\nerror: failed to download setuptools-4.0.1.tar.gz\nBUILD FAILED\nInspect or clean up the working tree at /var/folders/r1/t3bzlhd56gx0fsycpgy6193c0000gn/T/python-build.20140614124116.73613\nResults logged to /var/folders/r1/t3bzlhd56gx0fsycpgy6193c0000gn/T/python-build.20140614124116.73613.log\nLast 10 log lines:\nrm -f /usr/local/opt/pyenv/versions/2.7/lib/pkgconfig/python.pc\n(cd /usr/local/opt/pyenv/versions/2.7/lib/pkgconfig; ln -s python-2.7.pc python.pc)\nCreating directory /usr/local/opt/pyenv/versions/2.7/share/man\nCreating directory /usr/local/opt/pyenv/versions/2.7/share/man/man1\n/usr/bin/install -c -m 644 ./Misc/python.man \\\n        /usr/local/opt/pyenv/versions/2.7/share/man/man1/python2.7.1\n/var/folders/r1/t3bzlhd56gx0fsycpgy6193c0000gn/T/python-build.20140614124116.73613 ~/dev/git/chunked-data-problem/js\n~/dev/git/chunked-data-problem/js\n/var/folders/r1/t3bzlhd56gx0fsycpgy6193c0000gn/T/python-build.20140614124116.73613 ~/dev/git/chunked-data-problem/js\ncurl: (22) The requested URL returned error: 404 Not Found\n```\n. is there a quick workaround?\n. Is there a way to load this change using homebrew?\n. worked after\nbash\nbrew unlink pyenv\nbrew install pyenv --HEAD\n. ",
    "nathanielvarona": "Duplicate Issue in #190 and it's already been fixed. Thanks to @makotosasaki \n. ",
    "mingyc": "command -v curl && curl --version \n/usr/local/bin/curl\ncurl 7.18.1 (x86_64-unknown-linux-gnu) libcurl/7.18.1 OpenSSL/0.9.8b zlib/1.2.3\nProtocols: tftp ftp telnet dict ldap http file https ftps\nFeatures: GSS-Negotiate IPv6 Largefile NTLM SPNEGO SSL libz\ncommand -v wget && wget --version \n```\n/usr/local/bin/wget\nGNU Wget 1.10.2\nCopyright (C) 2005 Free Software Foundation, Inc.\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\nOriginally written by Hrvoje Niksic hniksic@xemacs.org.\n```\n. It works now. Thank you!\n. ",
    "konstantint": "This error still appears from time to time, e.g. I just got::\nFile \"/tmp/python-build.20141101113029.27846/ez_setup.py\", line 169, in _clean_check\n  subprocess.check_call(cmd)\nFile \"/home/user/.pyenv/versions/server1-2.7.8/lib/python2.7/subprocess.py\", line 540, in check_call\n  raise CalledProcessError(retcode, cmd)\nsubprocess.CalledProcessError: Command '['wget', 'https://pypi.python.org/packages/source/s/setuptools/setuptools-7.0.zip', '--quiet', '--output-document', '/tmp/python-build.20141101113029.27846/Python-2.7.8/setuptools-7.0.zip']' returned non-zero exit status 1\nThe reason is wget's refusal to download from a https site with a mismatched certificate::\nuser@server1 $ wget https://pypi.python.org/packages/source/s/setuptools/setuptools-7.0.zip\n--2014-11-01 11:42:19--  https://pypi.python.org/packages/source/s/setuptools/setuptools-7.0.zip\nResolving pypi.python.org... 23.235.43.223\nConnecting to pypi.python.org|23.235.43.223|:443... connected.\nERROR: certificate common name `www.python.org' doesn't match requested host name `pypi.python.org'.\nTo connect to pypi.python.org insecurely, use `--no-check-certificate'.\nUnable to establish SSL connection.\nThis seems like a but in either ez_setup.py or the server config of pypi.python.org, with nothing to do with pyenv, however people might encounter it via pyenv, so perhaps something may be done on the pyenv side (e.g. a documentation mention, or the like).\n. 1. The more reasons there are to consider a refactoring where there is no need to use pyenv init at all.\n2. Yes, I was suspecting that, there was a vague hope the required changes would not be too drastic.\n3. This is not an out-of-the-box behaviour, but it is enabled by setting BASH_ENV=~/.bashrc, which is a fairly common configuration practice (I've seen many systems where this has been enabled by default, perhaps because this is a kind of a textbook configuration example). My example stems from a CentOS system and I suspect I was not the one to set the BASH_ENV in my .bash_profile.\n. As I mentioned, I encountered this in CentOS rather than Debian. Apparently Debian/Ubuntu has the concept of only having .bashrc which has a hard-coded check for non-interactive shell in the beginning, whereas CentOS/RedHat has both a .bash_profile (which is run for login shells) and a .bashrc (which is  meant to be run for non-interactive shells). In particular bash_profile sets BASH_ENV to point to .bashrc.\nThe most easy way to reproduce the infinite loop is to change the line\nRUN echo 'eval \"$(pyenv init -)\"' >> /root/.bashrc\nto\nRUN echo 'eval \"$(pyenv init -)\"' > /root/.bashrc\nin your Dockerfile, and then, for example, invoke pyenv.\nYes, I think that this should be mentioned in the docs somewhere next to the installation instructions that require adding $(pyenv init -) to the startup script.\n. ",
    "maksimlinus": "When I try to install python it gives such error:                                                                                      Downloading Python-3.4.2.tgz...\n-> https://www.python.org/ftp/python/3.4.2/Python-3.4.2.tgz\nerror: failed to download Python-3.4.2.tgz\nBUILD FAILED (LinuxMint 1 using python-build 20141118)\nalso tryed the commands above but it gives the same error. is it possible to download and install python manually to .pyenv/versions folder\n. ",
    "jgomo3": "I also have this issue. Including setting the --insecure option. Is there a log file for pyenv.\nThis is what happens:\n$ export EZ_SETUP_OPTS=\"--insecure\"\n$ pyenv install 3.4.1\nDownloading Python-3.4.1.tgz...\n-> https://www.python.org/ftp/python/3.4.1/Python-3.4.1.tgz\nerror: failed to download Python-3.4.1.tgz\nMy curl and wget versions:\ncurl\n$ command -v curl && curl --version\n/home/jgomez/.pyenv/shims/curl\ncurl 7.35.0 (x86_64-pc-linux-gnu) libcurl/7.35.0 OpenSSL/1.0.1f zlib/1.2.8 libidn/1.28 librtmp/2.3\nProtocols: dict file ftp ftps gopher http https imap imaps ldap ldaps pop3 pop3s rtmp rtsp smtp smtps telnet tftp \nFeatures: AsynchDNS GSS-Negotiate IDN IPv6 Largefile NTLM NTLM_WB SSL libz TLS-SRP\nwget\n```\n$     command -v wget && wget --version\n/usr/bin/wget\nGNU Wget 1.15 built on linux-gnu.\n+digest +https +ipv6 +iri +large-file +nls +ntlm +opie +ssl/openssl \nWgetrc: \n    /etc/wgetrc (system)\nLocale: \n    /usr/share/locale \nCompile: \n    gcc -DHAVE_CONFIG_H -DSYSTEM_WGETRC=\"/etc/wgetrc\" \n    -DLOCALEDIR=\"/usr/share/locale\" -I. -I../../src -I../lib \n    -I../../lib -D_FORTIFY_SOURCE=2 -I/usr/include -g -O2 \n    -fstack-protector --param=ssp-buffer-size=4 -Wformat \n    -Werror=format-security -DNO_SSLv2 -D_FILE_OFFSET_BITS=64 -g -Wall \nLink: \n    gcc -g -O2 -fstack-protector --param=ssp-buffer-size=4 -Wformat \n    -Werror=format-security -DNO_SSLv2 -D_FILE_OFFSET_BITS=64 -g -Wall \n    -Wl,-Bsymbolic-functions -Wl,-z,relro -L/usr/lib -lssl -lcrypto \n    -ldl -lz -lidn -luuid ftp-opie.o openssl.o http-ntlm.o \n    ../lib/libgnu.a \nCopyright (C) 2011 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later\nhttp://www.gnu.org/licenses/gpl.html.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\nOriginally written by Hrvoje Niksic hniksic@xemacs.org.\nPlease send bug reports and questions to bug-wget@gnu.org.\n```\n. ",
    "ricardoamaro": "I think the the issue remains on IPV6 connection to https://www.python.org throwing an error:\n$ curl -v https://www.python.org\n* Rebuilt URL to: https://www.python.org/\n*   Trying 2a04:4e42:600::223...\n* Connected to www.python.org (2a04:4e42:600::223) port 443 (#0)\n* found 173 certificates in /etc/ssl/certs/ca-certificates.crt\n* found 707 certificates in /etc/ssl/certs\n* ALPN, offering http/1.1\n* gnutls_handshake() failed: Error in the pull function.\n* Closing connection 0\ncurl: (35) gnutls_handshake() failed: Error in the pull function.\nWhile IPV4 Seems to works fine\n$ curl -v https://www.python.org\n* Rebuilt URL to: https://www.python.org/\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0*   Trying 151.101.0.223...\n* Connected to www.python.org (151.101.0.223) port 443 (#0)\n* found 173 certificates in /etc/ssl/certs/ca-certificates.crt\n* found 702 certificates in /etc/ssl/certs\n* ALPN, offering http/1.1\n* SSL connection using TLS1.2 / ECDHE_RSA_AES_128_GCM_SHA256\n*    server certificate verification OK\n*    server certificate status verification SKIPPED\n*    common name: www.python.org (matched)\n*    server certificate expiration date OK\n*    server certificate activation date OK\n*    certificate public key: RSA\n*    certificate version: #3\n*    subject: \n*    start date: Wed, 29 Jun 2016 00:00:00 GMT\n*    expire date: Thu, 27 Sep 2018 12:00:00 GMT\n*    issuer: C=US,O=DigiCert Inc,OU=www.digicert.com,CN=DigiCert SHA2 Extended Validation Server CA\n*    compression: NULL\n* ALPN, server accepted to use http/1.1\nCould this be a fastly issue?\n$ dig +short www.python.org\npython.map.fastly.net. . Workaround was to pick one of fastly frontends and add it to /etc/hosts:\n$ dig +short  www.python.org\npython.map.fastly.net.\n151.101.0.223\n151.101.64.223\n151.101.128.223\n151.101.192.223\n$ echo \"151.101.0.223 www.python.org\" >> /etc/hosts\n$ pyenv install -v 2.7.12\n/tmp/python-build.20170424122948.29712 ~/\nDownloading Python-2.7.12.tar.xz...\n-> https://www.python.org/ftp/python/2.7.12/Python-2.7.12.tar.xz\n/tmp/python-build.20170424122948.29712/Python-2.7.12 /tmp/python-build.20170424122948.29712 ~/repos/ops-runbook-fields\nInstalling Python-2.7.12...\n. ",
    "nayefc": "I ended up setting PYTHON_BUILD_SKIP_MIRROR env variable to download from the original source.\n. Well, it seems that this behaviour happens only in tmux.. Investigating now.\n. It's a tmux issue, see: http://superuser.com/questions/544989/does-tmux-sort-the-path-variable\n. ",
    "evrial": "Also confirming regression with current pyenv neither install isn't working.\n```\nvagrant@precise64:~$ pyenv install 2.7.8\nDownloading Python-2.7.8.tgz...\n-> https://www.python.org/ftp/python/2.7.8/Python-2.7.8.tgz\nerror: failed to download Python-2.7.8.tgz\nBUILD FAILED\nvagrant@precise64:~$ export PYTHON_BUILD_SKIP_MIRROR=1\nvagrant@precise64:~$ pyenv install 2.7.2\nDownloading Python-2.7.2.tgz...\n-> http://python.org/ftp/python/2.7.2/Python-2.7.2.tgz\nerror: failed to download Python-2.7.2.tgz\nBUILD FAILED\nvagrant@precise64:~$ command -v curl && curl --version\n/home/vagrant/.pyenv/shims/curl\npyenv: curl: command not found\nThe `curl' command exists in these Python versions:\n  anaconda3-2.0.0\nvagrant@precise64:~$ command -v wget && wget --version\n/usr/bin/wget\nGNU Wget 1.13.4 built on linux-gnu.\n```\n. @thomasjo pyenv-which-ext worked, thanks for quick help.\n. ",
    "lembacon": "@yyuu Thanks Yuu, though it seems that you may have forgotten to create a tag.\n. Thanks :-)\n. ",
    "kud": "Just to be curious, I did this: \n```shell\nnpm install cheerio --save                                                                                                                                          master \u2731 \u25fc\n\nfsevents@1.1.1 install /Users/kud/Projects/_kud/firefox-downloader/node_modules/fsevents\nnode install\n\nnode-pre-gyp info it worked if it ends with ok\nnode-pre-gyp verb cli [ '/usr/local/Cellar/node/8.1.0_1/bin/node',\nnode-pre-gyp verb cli   '/Users/kud/Projects/_kud/firefox-downloader/node_modules/fsevents/node_modules/.bin/node-pre-gyp',\nnode-pre-gyp verb cli   'install',\nnode-pre-gyp verb cli   '--fallback-to-build' ]\nnode-pre-gyp info using node-pre-gyp@0.6.33\nnode-pre-gyp info using node@8.1.0 | darwin | x64\nnode-pre-gyp verb command install []\nnode-pre-gyp info check checked for \"/Users/kud/Projects/_kud/firefox-downloader/node_modules/fsevents/lib/binding/Release/node-v57-darwin-x64/fse.node\" (not found)\nnode-pre-gyp http GET https://fsevents-binaries.s3-us-west-2.amazonaws.com/v1.1.1/fse-v1.1.1-node-v57-darwin-x64.tar.gz\nnode-pre-gyp http 404 https://fsevents-binaries.s3-us-west-2.amazonaws.com/v1.1.1/fse-v1.1.1-node-v57-darwin-x64.tar.gz\nnode-pre-gyp ERR! Tried to download(404): https://fsevents-binaries.s3-us-west-2.amazonaws.com/v1.1.1/fse-v1.1.1-node-v57-darwin-x64.tar.gz\nnode-pre-gyp ERR! Pre-built binaries not found for fsevents@1.1.1 and node@8.1.0 (node-v57 ABI) (falling back to source compile with node-gyp)\nnode-pre-gyp http 404 status code downloading tarball https://fsevents-binaries.s3-us-west-2.amazonaws.com/v1.1.1/fse-v1.1.1-node-v57-darwin-x64.tar.gz\nnode-pre-gyp verb command build [ 'rebuild' ]\ngyp ERR! configure error\ngyp ERR! stack Error: Command failed: /Users/kud/.pyenv/shims/python2 -c import platform; print(platform.python_version());\ngyp ERR! stack pyenv: python2: command not found\ngyp ERR! stack\ngyp ERR! stack The python2' command exists in these Python versions:\ngyp ERR! stack   2.7.10\ngyp ERR! stack   2.7.10/envs/contexte-apps\ngyp ERR! stack   2.7.10/envs/contexte_2.7.10_dj1.8\ngyp ERR! stack   2.7.10/envs/lois-webapp\ngyp ERR! stack   contexte-apps\ngyp ERR! stack   contexte_2.7.10_dj1.8\ngyp ERR! stack   lois-webapp\ngyp ERR! stack\ngyp ERR! stack\ngyp ERR! stack     at ChildProcess.exithandler (child_process.js:252:12)\ngyp ERR! stack     at emitTwo (events.js:125:13)\ngyp ERR! stack     at ChildProcess.emit (events.js:213:7)\ngyp ERR! stack     at maybeClose (internal/child_process.js:887:16)\ngyp ERR! stack     at Socket.stream.socket.on (internal/child_process.js:340:11)\ngyp ERR! stack     at emitOne (events.js:115:13)\ngyp ERR! stack     at Socket.emit (events.js:210:7)\ngyp ERR! stack     at Pipe._handle.close [as _onclose] (net.js:548:12)\ngyp ERR! System Darwin 16.6.0\ngyp ERR! command \"/usr/local/Cellar/node/8.1.0_1/bin/node\" \"/usr/local/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js\" \"configure\" \"--fallback-to-build\" \"--module=/Users/kud/Projects/_kud/firefox-downloader/node_modules/fsevents/lib/binding/Release/node-v57-darwin-x64/fse.node\" \"--module_name=fse\" \"--module_path=/Users/kud/Projects/_kud/firefox-downloader/node_modules/fsevents/lib/binding/Release/node-v57-darwin-x64\"\ngyp ERR! cwd /Users/kud/Projects/_kud/firefox-downloader/node_modules/fsevents\ngyp ERR! node -v v8.1.0\ngyp ERR! node-gyp -v v3.6.2\ngyp ERR! not ok\nnode-pre-gyp ERR! build error\nnode-pre-gyp ERR! stack Error: Failed to execute 'node-gyp configure --fallback-to-build --module=/Users/kud/Projects/_kud/firefox-downloader/node_modules/fsevents/lib/binding/Release/node-v57-darwin-x64/fse.node --module_name=fse --module_path=/Users/kud/Projects/_kud/firefox-downloader/node_modules/fsevents/lib/binding/Release/node-v57-darwin-x64' (1)\nnode-pre-gyp ERR! stack     at ChildProcess.<anonymous> (/Users/kud/Projects/_kud/firefox-downloader/node_modules/fsevents/node_modules/node-pre-gyp/lib/util/compile.js:83:29)\nnode-pre-gyp ERR! stack     at emitTwo (events.js:125:13)\nnode-pre-gyp ERR! stack     at ChildProcess.emit (events.js:213:7)\nnode-pre-gyp ERR! stack     at maybeClose (internal/child_process.js:887:16)\nnode-pre-gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:208:5)\nnode-pre-gyp ERR! System Darwin 16.6.0\nnode-pre-gyp ERR! command \"/usr/local/Cellar/node/8.1.0_1/bin/node\" \"/Users/kud/Projects/_kud/firefox-downloader/node_modules/fsevents/node_modules/.bin/node-pre-gyp\" \"install\" \"--fallback-to-build\"\nnode-pre-gyp ERR! cwd /Users/kud/Projects/_kud/firefox-downloader/node_modules/fsevents\nnode-pre-gyp ERR! node -v v8.1.0\nnode-pre-gyp ERR! node-pre-gyp -v v0.6.33\nnode-pre-gyp ERR! not ok\nFailed to execute 'node-gyp configure --fallback-to-build --module=/Users/kud/Projects/_kud/firefox-downloader/node_modules/fsevents/lib/binding/Release/node-v57-darwin-x64/fse.node --module_name=fse --module_path=/Users/kud/Projects/_kud/firefox-downloader/node_modules/fsevents/lib/binding/Release/node-v57-darwin-x64' (1)\nnpm WARN firefox-downloader@1.0.0 No description\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.1.1 (node_modules/fsevents):\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.1.1 install:node install`\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: Exit status 1\n\ncheerio@1.0.0-rc.1\nadded 135 packages in 7.791s\n```\n\nSo I wanted to find a solution and I came here and thanks to https://github.com/pyenv/pyenv/issues/206#issuecomment-50121655 , I did  pyenv shell 3.6.0 2.7.10\nand now it works:\n```\nnpm install cheerio --save                                                                                                                                          master \u2731 \u25fc\n\nfsevents@1.1.1 install /Users/kud/Projects/_kud/firefox-downloader/node_modules/fsevents\nnode install\n\nnode-pre-gyp info it worked if it ends with ok\nnode-pre-gyp verb cli [ '/usr/local/Cellar/node/8.1.0_1/bin/node',\nnode-pre-gyp verb cli   '/Users/kud/Projects/_kud/firefox-downloader/node_modules/fsevents/node_modules/.bin/node-pre-gyp',\nnode-pre-gyp verb cli   'install',\nnode-pre-gyp verb cli   '--fallback-to-build' ]\nnode-pre-gyp info using node-pre-gyp@0.6.33\nnode-pre-gyp info using node@8.1.0 | darwin | x64\nnode-pre-gyp verb command install []\nnode-pre-gyp info check checked for \"/Users/kud/Projects/_kud/firefox-downloader/node_modules/fsevents/lib/binding/Release/node-v57-darwin-x64/fse.node\" (not found)\nnode-pre-gyp http GET https://fsevents-binaries.s3-us-west-2.amazonaws.com/v1.1.1/fse-v1.1.1-node-v57-darwin-x64.tar.gz\nnode-pre-gyp http 404 https://fsevents-binaries.s3-us-west-2.amazonaws.com/v1.1.1/fse-v1.1.1-node-v57-darwin-x64.tar.gz\nnode-pre-gyp ERR! Tried to download(404): https://fsevents-binaries.s3-us-west-2.amazonaws.com/v1.1.1/fse-v1.1.1-node-v57-darwin-x64.tar.gz\nnode-pre-gyp ERR! Pre-built binaries not found for fsevents@1.1.1 and node@8.1.0 (node-v57 ABI) (falling back to source compile with node-gyp)\nnode-pre-gyp http 404 status code downloading tarball https://fsevents-binaries.s3-us-west-2.amazonaws.com/v1.1.1/fse-v1.1.1-node-v57-darwin-x64.tar.gz\nnode-pre-gyp verb command build [ 'rebuild' ]\n  SOLINK_MODULE(target) Release/.node\n  CXX(target) Release/obj.target/fse/fsevents.o\n  SOLINK_MODULE(target) Release/fse.node\n  COPY /Users/kud/Projects/_kud/firefox-downloader/node_modules/fsevents/lib/binding/Release/node-v57-darwin-x64/fse.node\n  TOUCH Release/obj.target/action_after_build.stamp\nnode-pre-gyp info ok\nnpm WARN firefox-downloader@1.0.0 No description\n\ncheerio@1.0.0-rc.1\nadded 121 packages and updated 1 package in 12.591s\n```\n\nCould you explain me why?\nThank you very much :). ",
    "clee704": "I mean, after running the global command, pypy3 is not recognized as a command by the shell. All others (python, python2, python2.6, python2.7, python3, python3.3, python3.4, pypy) works as expected. I feel I'm doing it wrong because I've just started using pyenv today.\n. Thanks. It seems it's an issue in pypy.\n. ",
    "bharal": "sorry, i don't know what you mean - i did a\napt-get install mercurial\nand then\npyenv install 3.4-dev\nand I got\nBUILD FAILED\nbut no real explanation.\n1. how do i install mercurial for this task? pip? apt-get? is there some\n   sort of step-by-step?\n2. do i need to do something with \"hg\", or ... i mean, why does the initial\n   error message say \"hg\" when i need \"mercurial\"?\nOn 8 August 2014 16:36, Yamashita, Yuu notifications@github.com wrote:\n\nSetup mercurial https://pypi.python.org/pypi/Mercurial and try again.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/yyuu/pyenv/issues/212#issuecomment-51618010.\n. \n",
    "s0undt3ch": "The require might be sufficient...\n. ",
    "lepture": "2.6.x are macosx.10.4-x86_64 too.\n. Fix this issue with:\nexport MACOSX_DEPLOYMENT_TARGET=\"10.9\"\n. @yyuu Thanks for the fix. I am not a guru of bash.\n. ",
    "fellipecastro": "You are right mate. The thing is I got an error when I first tried without ssh on Ubuntu.\nI've just tried with the git protocol on my Mac and it worked as expected.\nIn fact, I've always used the SSH and HTTPS protocols... That was not the first time something unexpected happened to me with the GIT one. It's probably some misunderstanding of mine.\nWell, sorry to bother!\n. ",
    "zhangliyong": "@blueyed yes I'm using pyenv-implicit.\n. OK, thanks, I'll try later.\n. ",
    "tejasmanohar": "echo $PATH returns \n/Users/y3ms5f/.cabal/bin:/Applications/ghc-7.8.3.app/Contents/bin:/Users/y3ms5f/.nvm/v0.10.30/bin:/Users/y3ms5f/.gvm/bin:/usr/local/heroku/bin:/Users/y3ms5f/.phpbrew/php/php-5.5.15/bin:/usr/local/sbin:/Users/y3ms5f/.rvm/gems/ruby-2.1.2/bin:/Users/y3ms5f/.rvm/gems/ruby-2.1.2@global/bin:/Users/y3ms5f/.rvm/rubies/ruby-2.1.2/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin:/Users/y3ms5f/npm/bin:/Users/y3ms5f/.rvm/bin:/Users/y3ms5f/.rvm/bin\nmaybe I need to add to bash_profile?\n. my current ~/.bash_profile is http://pastebin.com/zj0wYmU3 (obviously the aws keys are changed)\n. Oh, sorry missed that line! Got it, thanks :)\n. ",
    "brennebeck": "I recently just moved my $PYENV_ROOT and so went through this whole process. @yyuu's solution didn't seem to fully work. I had to also use sed (gsed on macOS) to replace many of the shebangs in the bin stubs - they just never rehashed properly to the new $PYENV_ROOT. However, I also had to do an additional replacement for some stubs and the specific version of python2.7 (something like this gsed -i'.bak2' 's~/usr/local/opt/pyenv/versions/2.7.8/bin/python2.7~/Users/brennebeck/.pyenv/versions/2.7.8/bin/python2.7~' /Users/brennebeck/.pyenv/versions/2.7.8/bin/*). Not sure why the initial sed replacement didn't cover these cases, but thought I'd add a comment here in case anyone comes across a similar issue.. ",
    "jfferson": "also seems to work creating /usr/local/pyenv as a symbolik link to ~/.pyenv. ",
    "kingdavid72": "as of 2018, pyenv is still meant to be used as a single user program. system-wide installation is not easily achievable for multiple users !. . ",
    "allomov": "Cool, thank you for answer. Worked for me.\n. ",
    "SSUHan": "thank you, U save my times\n. ",
    "DearX-dlx": "In shell window input\neval \"$(pyenv init -)\";\nit work for me\n. ",
    "Dandutra": "Thank you . ",
    "majkelx": "Thanks, but on macos, after default installation, pyenv init isn't evaluated in non-login shell (or my environment is messed up, but eval \"$(pyenv init -)\" is on .bash_profile only). \nThat means that in every non-login shell \nbash \npyenv --help \nlists shell among other commands, but \nbash \n$ pyenv shell\npyenv: no such command `shell' \nof course this issue explains reasons, but at least message should be different.. ",
    "mourningsun75": "it was my mistake. closed\n. ",
    "chcubic": "I encountered the same issue after upgrading my python. Both old and new versions were installed through homebrew, but now in vim :python print(1) is not working and giving out E887.\nExcuse me blueyed would you mind to give me some hints on how to fix this problem? Thanks.\n(p.s. in :ver python is \"+\" and python3 is \"-\")\n. ",
    "ianks": "For me, I had to reinstall Vim to fix it. I'm sure there is another way to do it but after re-installing Vim was able to access the necessary libs.\n. I install vim using Homebrew.\nOn Thu, Oct 16, 2014 at 12:31 PM, Daniel Hahler notifications@github.com\nwrote:\n\nHow do you install Vim? Do you build it from source?\nIt may have picked another / wrong python version then.\nReply to this email directly or view it on GitHub:\nhttps://github.com/yyuu/pyenv/issues/234#issuecomment-59407910\n. \n",
    "jose-lpa": "Homebrew installs Vim by downloading the sources and compiling them in your local.\nIf you installed Vim and later you removed your Python libraries from your system (by uninstalling them, reinstalling, installing a new Python version and unlinking the old one...) perhaps your Vim was not finding any more the needed libraries.\nOf course, if you reinstall Vim by Homebrew, it compiles it against your newer Python setup, so it works again. And if you remove your Python setup or the symlinks to Python binaries in your system are removed/substituted, it will fail again either :)\n. ",
    "tonicbupt": "thanks @jose-lpa I just search this problem and find your solution, it works fine with me XDD\n. ",
    "foxundermoon": "you sure installed the python?\nand must both 32bit  or  64bit, \notherwise meet the error\n. ",
    "rene-aguirre": "An actual solution, for those breaking vim/macvim after \"brew cleanup\".\nThis will work if the current python is not the one your current vim/gvim/mvim is not linked to, check your vim and macvim version info (these might be separate homebrew packages), also make sure you update our brew so you'd use the latest packages:\nmvim --version\nvim --version\nYou'd know what is the linked python library:\n-L/usr/local/Cellar/python/2.7.10_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/config\nAt this point that path is expected to be valid, hence the actual issue, In this case python 2.7.10_1 Cellar's is expected, now check your latest brew python package version:\nbrew info python\nAs you already confirmed the link path is valid (e.g. ls /usr/local/Cellar/python/), above command will show which is the active one, see top of output:\nhttps://www.python.org\n/usr/local/Cellar/python/2.7.10_2 (4943 files, 77M) *\n...\nMake sure python symlinks are fine:\nbrew unlink python && brew link --force python\nAnd finally, re-build vim or macvim:\nbrew uninstall macvim && brew install macvim\nRebuilding is better than brew install --force, if you have the latest package, which I think is the case as that was the reason of a homebrew clean up.\nTest your vim now\nmvim --version\n...\nCompilation: ...\n-L/usr/local/Cellar/python/2.7.10_2/Frameworks/Python.framework/Versions/2.7/lib/python2.7/config\nNow :python print \"hello\" should work on your mvim. Do the same for command line vim if required.\n. ",
    "bingtaoli": "It is ok after reinstalling vim.\n. ",
    "rr326": "ok - gotcha.  Thanks.\nBTW - This is a slick system. But fyi, the title is kinda confusing versus the newly standard python 3.3 'pyenv'.  You might want a little note on the project homepage delineating the two. But very cool project. \n. For what its worth, I like yours better.  .\nSent via phone. It's not that I don't care, it's that I can't type.\nOn Sep 10, 2014 4:33 PM, \"Yamashita, Yuu\" notifications@github.com wrote:\n\nI agree that the conflict of naming between Python 3.3+'s pyvenv is a\nproblem, too. I need to tackle the problem with better documentation....\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/yyuu/pyenv/issues/235#issuecomment-55200060.\n. \n",
    "the-shank": "My apologies, I must have done something wrong... It installed just fine after a reboot.. Please close this issue\n. ",
    "i5513": "Well,\nMy fault because our ca-bundle.crt file was outdated. After upgrading such ca cert repository curl is working without -k.\nI propose to add a note about http_proxy / https_proxy on README.md:\n```\ndiff --git a/README.md b/README.md\nindex c8ad911..f633edd 100644\n--- a/README.md\n+++ b/README.md\n@@ -184,6 +184,7 @@ easy to fork and contribute any changes back upstream.\n **Zsh note**: Modify your `~/.zshenv` file instead of `~/.bash_profile`.\n **Ubuntu note**: Modify your `~/.bashrc` file instead of `~/.bash_profile`.\n\n\n\n**If you have proxy, export http_proxy and https_proxy too\n\n\nAdd pyenv init to your shell to enable shims and autocompletion.\n```\n. \n\n",
    "alexeiz": "The sole reason you'd have .curlrc is that curl doesn't work without it for one reason or another.  If .curlrc is ignored it's almost guaranteed that pyenv install won't work for people that rely on .curlrc.  The fix is trivial: remove the -q option.\n. ",
    "chenfengyuan": "I suppose add a note about http_proxy / https_proxy in README.md is really a good idea, because every one in China need a proxy to install python (github.io is blocked by something).\n. ",
    "JGroselle": "Hi, I have the same issue.\nI'm trying to use Glances in pyenv. Install is OK but when I run it : \n```\n$ glances\nCRITICAL: Curses module not found. Glances cannot start in standalone mode.\n$ pyenv local\n3.4.3\n$ pip list\nbottle (0.12.8)\nGlances (2.3)\npip (6.1.1)\npsutil (2.2.1)\nsetuptools (12.0.5)\n$ python\nPython 3.4.3 (default, Apr 13 2015, 16:30:57)\n[GCC 4.9.1] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n\n\nimport curses\nTraceback (most recent call last):\n  File \"\", line 1, in \n  File \"/home/xxx/.pyenv/versions/3.4.3/lib/python3.4/curses/init.py\", line 13, in \n    from _curses import *\nImportError: No module named '_curses'\n```\n\n\n\nYou said : \n\nYou must rebuild the Python and modules against system's curses library.\n\nHow can I rebuild this module in my pyenv please ?\n. ",
    "rghv": "An apt-get install libncurses5 libncurses5-dev libncursesw5 followed by a reinstallation of pyenv solved the problem.\n. ",
    "pintiliea": "I tried this and it doesn't work on Debian Jessie :/. ",
    "pvaret": "Ah, something like pyenv-doctor would definitely do the trick, yes. Would it be feasible to launch it once when pyenv install is run for the first time on a given machine?\n. Oh, that looks very nifty. This is pretty much the sort of thing I thought would be useful, yes. Thank you for the quick response. :)\n. ",
    "requiredfield": "Hi @yyuu, just thought I'd try pinging you on this in case it got lost in the shuffle. Any advice on how to install a --shared build of pypy via pyenv? Much appreciate any tips.\n. Thank you for the tips, @yyuu! I'm actually about halfway through building pypy after following your instructions above (just had to add the missing \" after pypy/goal/targetpypystandalone).\nI'll keep an eye out for updates on the LD_LIBRARY_PATH issue. If I understand correctly, for now I can just set it in /etc/environment (for example) to make sure pypy will work, is that right? What would I set it to?\nThanks again for all your help.\n. > It takes very very long time to build PyPy....\nNo kidding. After going strong for 92 minutes, my build just failed with a MemoryError :cry: \n...\n[1eae1] translation-task}\n[Timer] Timings:\n[Timer] annotate                       ---  529.0 s\n[Timer] rtype_lltype                   --- 2151.4 s\n[Timer] pyjitpl_lltype                 --- 1886.2 s\n[Timer] backendopt_lltype              ---  299.5 s\n[Timer] stackcheckinsertion_lltype     ---  437.0 s\n[Timer] database_c                     ---  249.8 s\n[Timer] ===========================================\n[Timer] Total:                         --- 5552.8 s\n[translation:info] Error:\n[translation:info]    File \"/tmp/python-build.20141010053517.10630/pypy-pypy-c6ad44ecf5d8/rpython/translator/goal/translate.py\", line 316, in main\n[translation:info]     drv.proceed(goals)\n[translation:info]    File \"/tmp/python-build.20141010053517.10630/pypy-pypy-c6ad44ecf5d8/rpython/translator/driver.py\", line 531, in proceed\n[translation:info]     return self._execute(goals, task_skip = self._maybe_skip())\n[translation:info]    File \"/tmp/python-build.20141010053517.10630/pypy-pypy-c6ad44ecf5d8/rpython/translator/tool/taskengine.py\", line 114, in _execute\n[translation:info]     res = self._do(goal, taskcallable, *args, **kwds)\n[translation:info]    File \"/tmp/python-build.20141010053517.10630/pypy-pypy-c6ad44ecf5d8/rpython/translator/driver.py\", line 276, in _do\n[translation:info]     res = func()\n[translation:info]    File \"/tmp/python-build.20141010053517.10630/pypy-pypy-c6ad44ecf5d8/rpython/translator/driver.py\", line 429, in task_database_c\n[translation:info]     database = cbuilder.build_database()\n[translation:info]    File \"/tmp/python-build.20141010053517.10630/pypy-pypy-c6ad44ecf5d8/rpython/translator/c/genc.py\", line 177, in build_database\n[translation:info]     db.complete()\n[translation:info]    File \"/tmp/python-build.20141010053517.10630/pypy-pypy-c6ad44ecf5d8/rpython/translator/c/database.py\", line 306, in complete\n[translation:info]     add_dependencies(node.enum_dependencies(), node)\n[translation:info]    File \"/tmp/python-build.20141010053517.10630/pypy-pypy-c6ad44ecf5d8/rpython/translator/c/database.py\", line 294, in add_dependencies\n[translation:info]     self.get(value, parent and parent._funccodegen_owner)\n[translation:info]    File \"/tmp/python-build.20141010053517.10630/pypy-pypy-c6ad44ecf5d8/rpython/translator/c/database.py\", line 226, in get\n[translation:info]     node = self.getcontainernode(container)\n[translation:info]    File \"/tmp/python-build.20141010053517.10630/pypy-pypy-c6ad44ecf5d8/rpython/translator/c/database.py\", line 158, in getcontainernode\n[translation:info]     self.gctransformer.consider_constant(T, container)\n[translation:info]    File \"/tmp/python-build.20141010053517.10630/pypy-pypy-c6ad44ecf5d8/rpython/memory/gctransform/framework.py\", line 495, in consider_constant\n[translation:info]     self.layoutbuilder.consider_constant(TYPE, value, self.gcdata.gc)\n[translation:info]    File \"/tmp/python-build.20141010053517.10630/pypy-pypy-c6ad44ecf5d8/rpython/memory/gctypelayout.py\", line 421, in consider_constant\n[translation:info]     self.iseen_roots[value] = True\n[translation:info]    File \"/tmp/python-build.20141010053517.10630/pypy-pypy-c6ad44ecf5d8/rpython/tool/identity_dict.py\", line 21, in __setitem__\n[translation:info]     self._dict[id(arg)] = val\n[translation:ERROR] MemoryError\nI've got 2GB of memory on this i686 machine and according to http://pypy.readthedocs.org/en/latest/getting-started-python.html that should be enough. Any suggestions that don't require sacrificing -Ojit? /cc @fijal\nThanks in advance for any help.\n. If I switch to an Ubuntu Trusty x86_64 machine, is there some way I can use the libpypy-c-x86_64.so linked from http://uwsgi-docs.readthedocs.org/en/latest/PyPy.html with PyEnv to avoid having to build PyPy myself?\n. Now I'm getting [translation:ERROR] Skipped: no _curses or _minimal_curses module. When I import curses by hand with a pyenv python I get ImportError too, though with a system python it works. Looks like other users have had this problem with pyenv too: #240\n. Should have said I already have libncurses5-dev installed. And like I said when I import _curses by hand it works:\n```\n\npyenv versions\n  system\n* pypy-2.4.0 (set by /home/ubuntu/.pyenv/version)\npython -c 'import _curses'  # no ImportError\npyenv shell system\npython -c 'import _curses'  # no ImportError\nenv PYPY_OPTS='-Ojit --shared --gcrootfinder=shadowstack' pyenv install -v pypy-2.4.0-src\n...\n[translation:ERROR] Skipped: no _curses or _minimal_curses module\n...\n```\n. Because this wasn't working with pyenv, I already went ahead and built pypy with --shared without pyenv on this machine. But I can try again with pyenv on another machine later and let you know if it works.\n. From http://lists.unbit.it/pipermail/uwsgi/2014-October/007650.html:\nI need to ask you (and others people wanting to try uWSGI+pypy) to wait a couple of weeks as Maciej Fija\u0142kowski (pypy core developer) is working on having libpypy built-in by default in official pypy binaries (it is a sponsored work, so it should be done fast). This will solve a lot of issues and will allow us to work better (and faster) on the plugin (the objective is having it on par as CPython before 2.1).\n\nWait until that's done and then update pyenv with support?\n. ",
    "nxsofsys": "Seems env PYPY_OPTS='-Ojit --shared --gcrootfinder=shadowstack' pyenv install -v pypy-2.4.0-src is the only way to build pypy on debian wheezy, pyenv install -v pypy-2.4.0-src fails with error: mv: cannot statlibpypy-c.*': No such file or directory`.\n. ",
    "fijal": "It's all fixed on trunk. Also please no longer use --gcrootfinder=shadowstack (as asmgcc has been fixed)\n. ",
    "unbit": "Latest binary nightly build works as-is without modifications: http://buildbot.pypy.org/nightly/trunk/pypy-c-jit-latest-linux64.tar.bz2 just use uwsgi-2.0 branch from github pointing --pypy-home to the pypy dir\n. ",
    "PimvanderEijk": "You're right, sincere apologies.\nWorks like a charm.\n. ",
    "wumpus": "This is on a CentOS 5.10 host. A little experimenting tells me that it works fine on some other Linux versions, so Never Mind... I've observed some other https breakages on CentOS5's wget.\n. ",
    "methane": "Thanks!\n. Since Python 3.3, no options is needed.\nThanks to Flexible Unicode Representation, no \"wide\" and \"narrow\" build.. ",
    "twmht": "Did you mean something like this /home/tumh/.pyenv/shims? \nYes! It is in the $PATH of my tmux session.\nI am not sure if it is a bug in pyenv.\nThank you!\n. hi @thomasjo ,\nhere is my full $PATH \n/usr/lib/jvm/java-7-oracle/bin:/home/tumh/android-sdk-linux/platform-tools:/home/tumh/android-sdk-linux/tools:/home/tumh/google_appengine:/home/tumh/.pyenv/bin:/home/tumh/gcd-v1beta2-rev1-2.1.1:/home/tumh/hadoop-2.5.1/bin:/home/tumh/hadoop-2.5.1/sbin:/home/tumh/buildcurl/android-toolchain/bin:/home/tumh/protobuf/bin:/home/tumh/.pyenv/shims:/usr/lib/jvm/java-7-oracle/bin:/home/tumh/android-sdk-linux/platform-tools:/home/tumh/android-sdk-linux/tools:/home/tumh/google_appengine:/home/tumh/.pyenv/bin:/home/tumh/gcd-v1beta2-rev1-2.1.1:/home/tumh/hadoop-2.5.1/bin:/home/tumh/hadoop-2.5.1/sbin:/home/tumh/buildcurl/android-toolchain/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games\nIt includes both /home/tumh/.pyenv/bin and /home/tumh/.pyenv/shims.\nThank you!\n. Oops! It seems there is another python path/home/tumh/buildcurl/android-toolchain/bin after I run which python.\nI move it from the PATH and everything works fine.\nThank you!\n. @eywalker , i tried your solution before, but it did not work for me.\nI reinstall python with --enable-shared flags and it works.\nenv PYTHON_CONFIGURE_OPTS=\"--enable-shared\" pyenv install 2.7.11\n. ",
    "ncoghlan": "We recently approved an upstream PEP defining a naming scheme and build environment for prebuilt wheel files for Linux systems, which currently only has wide Unicode builds in the build environment: https://www.python.org/dev/peps/pep-0513/\nWhile that shouldn't be a problem for pyenv Python 3.x builds (since the wide/narrow build distinction was removed back in 3.3), the Python 2.x builds are going to hit this problem: most of the Linux wheels uploaded to PyPI aren't going to be compatible with narrow builds of Python, so pyenv users would still need to compile from source even if a wheel targeting wide builds is available.\n(I was directed here from a distutils-sig thread discussing the Unicode build settings for common pre-built binaries on Linux)\n. Thanks for being willing to reconsider this. For the record, we're still discussing the possibility of simply adding a Python 2.7 narrow build to the reference build environment, as switching from narrow builds to wide builds would pose a binary extension module compatibility problem for any redistributor making the switch: https://mail.python.org/pipermail/distutils-sig/2016-February/028284.html\n. Thank you!\n. Further communication of the reason for the change is definitely desirable here, as folks forcing their Python install back to narrow Unicode builds are going to end up in the situation where their installation experience is worse, since they won't be able to use prebuilt wide unicode wheel files published to PyPI.\nA preferable approach would be to use pip to reinstall all the existing packages in the environment:\n$ pip freeze | pip install --ignore-installed --no-use-wheel -r /dev/stdin\n(The \"--no-use-wheel\" is needed as Python 2.7 wheels built with versions of pip prior to 8.0.0 didn't have their ABI dependencies encoded correctly, and hence would still show up as compatible)\n. Regarding my own comments above: they're specific to Linux, where the system Python configuration is determined by distro policy rather than CPython's default build settings, and distros long ago opted for ucs4 as the default (before the question became irrelevant in Python 3.3+). The manylinux1 specification then inherited that convention.\nFor Mac OS X, the upstream CPython defaults (i.e. a narrow ucs2/UTF-16 build) would be the more portable choice at the pyenv level.\n. ",
    "3noch": "This change is a big deal. Anyone who installed a version of Python prior to this change may suddenly start getting divergent UCS encodings among their installs. We need to communicate to users that they need to reinstall all their Python versions after upgrading to this version of pyenv. Or pyenv could start distinguishing versions based version number and UCS encoding setting.\n. @konklone Sorry if I misled you. That's actually what I had to do as well. My comment was regarding the fact that people will start having different UCS encodings among their Python versions installed by pyenv. The only way to make them all consistent is to reinstall any versions that were installed prior to this update.\n. ",
    "joaoponceleao": "Just a note. This change is having some consequences with pretty popular modules like PIL: https://github.com/python-pillow/Pillow/issues/1753\n. For help in debugging, here is the result of env PYENV_DEBUG=1 pyenv which python\nhttps://gist.github.com/joaoponceleao/884e0b2ddc2018ae1d96\n. Thanks for the quick reply.\nMoving eval \"$(pyenv init -)\" from ~/.zshenv to ~/.zshrc put the shims path back. So you can close this issue.\nHowever, I was under the impression that .zshenv was the recommended place for zsh shells?\nI have my python_path in a sublime text plugin set to \"$HOME/.pyenv/versions/$PYENV_VERSION/bin\". But this only works if I launch sublime via the terminal. I was hoping to avoid that by putting the pyenv init in .zshenv.\n. I accidentally put the pyenv-init before the \"export PATH=\" statement in my .zshrc. Pyenv wouldn't work until I moved it after the path statement. Since .zshenv gets called before .zshrc, is it possible that the .zshrc \"export PATH=\" statement overrides any paths set by pyenv-init before-hand?\n. Got it.\nThanks for the help\n. ",
    "konklone": "\nWe need to communicate to users that they need to reinstall all their Python versions after upgrading to this version of pyenv. \n\nYes -- this bit me and it took a long while of baffled googling before I ended up here and figured out why.\n. > Anyone who installed a version of Python prior to this change may suddenly start getting divergent UCS encodings among their installs. We need to communicate to users that they need to reinstall all their Python versions after upgrading to this version of pyenv.\nFWIW, I wasn't able to escape from the undefined symbol: PyUnicodeUCS2_FromString rabbit hole with these instructions. I had to use the advice found here:\n$pyenv uninstall 2.7.11\n$PYTHON_CONFIGURE_OPTS=\"--enable-unicode=ucs2\" pyenv install 2.7.11\nThat solved it for me for the times I have to switch into Python 2 (in my case, when using fabric).\n. I've fixed the tests, and Travis is passing now. My apologies for not checking that first.\nEven though pyenv is using a SHA256 checksum and should avoid MITM attacks, there are privacy implications to serving any data at all over an unencrypted channel.\nI was one of a few people discussing this issue for rbenv, and my comment there sums up how I feel:\n\nIndividually, I find it tough to predict what the harm is. But that's sort of the thing - it is very tough to predict how it gets used when put in aggregate with the rest of the Internet's traffic.\nThe thing that brought this home for me \u2014 and motivated me to move my then-employer's API over to HTTPS \u2014 was reading about unencrypted Angry Birds mobile ad requests getting correlated with other traffic to develop profiles of Internet users. \nFor an attacker with global or near-global perspective, perhaps Ruby tarball downloads could be used to develop a profile of IP addresses on the Internet that serve up Ruby, and specific Ruby versions. If there are undisclosed vulnerabilities in even modern versions of Ruby, perhaps this could be used to get a backdoor into those servers. Or perhaps it could just contribute to developing some global big picture analysis on developers and application servers.\nI've come around to the idea that unencrypted connections on the Internet are basically a bug \u2014 that they should be considered untrusted at worst, and at best (like when doing out-of-band checksums) not private. There are at least a couple of major web browsers that would really like to start actively discouraging the use of http://in their UX. Getting to the point where that's feasible is a long-term project, but every contribution helps.\n. Thank you!\n. \n",
    "mmerickel": "I ran into the issue now where homebrew is building python2 packages against the system python which apparently is using a narrow build on OS X. Thus homebrew-compiled packages are incompatible with pyenv unless using ucs2. Is there any recommendation here? The package in question is from homebrew because it's fairly difficult to compile on its own.\n. > EDIT: Removing binutils solved the problem for me: brew remove binutils\nThis also worked for me.. ",
    "matthew-brett": "Just to say that the change to UCS4 on OSX is a pretty big deal, because this makes pyenv the only - to my knowledge - UCS4 Python build on OSX.   Therefore very few people are building wheels that work with pyenv, and so using pyenv leads to the kind of problem mentioned in the issue above - where the user is surprised to find that wheel installs are not working.\n. Confirming that all the OSX Python variants that I know of are UCS2 builds:\n$ # System Python\n$ /usr/bin/python -c \"import sys; print('ucs2' if sys.maxunicode == 65535 else 'ucs4')\"\nucs2\n$ # Python.org Python\n$ /Library/Frameworks/Python.framework/Versions/2.7/bin/python -c \"import sys; print('ucs2' if sys.maxunicode == 65535 else 'ucs4')\"\nucs2\n$ # Homebrew Python\n$ /usr/local/Cellar/python/2.7.12/bin/python -c \"import sys; print('ucs2' if sys.maxunicode == 65535 else 'ucs4')\"\nucs2\n$ # Macports Python\n$ /opt/local/bin/python2.7 -c \"import sys; print('ucs2' if sys.maxunicode == 65535 else 'ucs4')\"\nucs2\n$ # Anaconda Python\n$ /Users/bnaul/anaconda/bin/python -c \"import sys; print('ucs2' if sys.maxunicode == 65535 else 'ucs4')\"\nucs2\nI think you did the switch to UCS4 to be more compatible with standard Linux distributions.  For the same reason, here's a plea to switch back to UCS2 by default on OSX.   Otherwise pyenv users on OSX are going to have many more problems installing standard packages.\n. How about tweaking that line for OSX only for now?   I don't know what BSD's defaults are for Python builds either, but I guess it would be reasonable to make changes for BSD later, when more information comes in?\n. It appears this issue just came up again for Python / Pillow (see link above).\n. FreeBSD 10 via pkg install python:\n```\npython -c \"import sys; print('ucs2' if sys.maxunicode == 65535 else 'ucs4')\"\nucs4\n```\nOpenBSD 6.0 via pkg_add python:\n```\npython2.7 -c \"import sys; print('ucs2' if sys.maxunicode == 65535 else 'ucs4')\"\nucs2\n```\nSo maybe UCS4 for FreeBSD, UCS2 for OpenBSD.\n. Tested on my laptop - looks good to me - thanks.\n. ",
    "ksalman": "Ah, I think that was because pyenv shell was overriding pyenv local. I checked in a new shell\nksalman@dalaran ~ $ pyenv shell\npyenv: no shell-specific version configured\nksalman@dalaran ~ $ python -V\nPython 2.7.3\nksalman@dalaran ~ $ cd /tmp\nksalman@dalaran tmp $ python -V\nPython 2.7.6\nksalman@dalaran tmp $\n. Ugh, it didn't occur to me that NFS does not support extended attributes. \n. It does work with the latest version of python.\n```\nksalman@dalaran ~ $ pyenv install 3.4.2\nDownloading Python-3.4.2.tgz...\n-> https://www.python.org/ftp/python/3.4.2/Python-3.4.2.tgz\nInstalling Python-3.4.2...\nInstalled Python-3.4.2 to /u/ksalman/.pyenv/versions/3.4.2\nksalman@dalaran ~ $ pyenv virtualenv 3.4.2 test\nIgnoring indexes: https://pypi.python.org/simple/\nRequirement already satisfied (use --upgrade to upgrade): setuptools in /usr/home/nfs/ksalman/.pyenv/versions/test/lib/python3.4/site-packages\nRequirement already satisfied (use --upgrade to upgrade): pip in /usr/home/nfs/ksalman/.pyenv/versions/test/lib/python3.4/site-packages\nCleaning up...\nksalman@dalaran ~ $ pyenv activate test\n/u/ksalman/.pyenv/versions/test/bin/pip\n(test) ksalman@dalaran ~ $ pip install ipaddress\nDownloading/unpacking ipaddress\n  Downloading ipaddress-1.0.6.tar.gz\n  Running setup.py (path:/usr/home/nfs/ksalman/.pyenv/versions/test/build/ipaddress/setup.py) egg_info for package ipaddress\nInstalling collected packages: ipaddress\n  Running setup.py install for ipaddress\nSuccessfully installed ipaddress\nCleaning up...\n```\nUnfortunately I need to use 3.3 so I suppose I'll just have to install it outside of pyenv, in a local directory.\n. ",
    "HappyShaker": "i install Command-Line Tools for Xcode.\nso, i get some headers in /usr/include\nbut, same problem occurred like below.\n\nrm -f /Users/arena/.pyenv/versions/3.4.2/bin/pyvenv\n(cd /Users/arena/.pyenv/versions/3.4.2/bin; ln -s pyvenv-3.4 pyvenv)\nif test \"x\" != \"x\" ; then \\\n        rm -f /Users/arena/.pyenv/versions/3.4.2/bin/python3-32; \\\n        (cd /Users/arena/.pyenv/versions/3.4.2/bin; ln -s python3.4-32 python3-32) \\\n    fi\nrm -f /Users/arena/.pyenv/versions/3.4.2/share/man/man1/python3.1\n(cd /Users/arena/.pyenv/versions/3.4.2/share/man/man1; ln -s python3.4.1 python3.1)\nif test \"xupgrade\" != \"xno\"  ; then \\\n        case upgrade in \\\n            upgrade) ensurepip=\"--upgrade\" ;; \\\n            install|*) ensurepip=\"\" ;; \\\n        esac; \\\n         ./python.exe -E -m ensurepip \\\n            $ensurepip --root=/ ; \\\n    fi\nIgnoring ensurepip failure: pip 1.5.6 requires SSL/TLS\nWARNING: The Python readline extension was not compiled. Missing the GNU readline lib?\nERROR: The Python ssl extension was not compiled. Missing the OpenSSL lib?\nPlease consult to the Wiki page to fix the problem.\nhttps://github.com/yyuu/pyenv/wiki/Common-build-problems\nBUILD FAILED\nInspect or clean up the working tree at /var/folders/qp/_wylgkcd7310hzghc74wdcwc0000gn/T/python-build.20141029135217.534\nResults logged to /var/folders/qp/_wylgkcd7310hzghc74wdcwc0000gn/T/python-build.20141029135217.534.log\nLast 10 log lines:\n(cd /Users/arena/.pyenv/versions/3.4.2/share/man/man1; ln -s python3.4.1 python3.1)\nif test \"xupgrade\" != \"xno\"  ; then \\\n        case upgrade in \\\n            upgrade) ensurepip=\"--upgrade\" ;; \\\n            install|*) ensurepip=\"\" ;; \\\n        esac; \\\n         ./python.exe -E -m ensurepip \\\n            $ensurepip --root=/ ; \\\n    fi\nIgnoring ensurepip failure: pip 1.5.6 requires SSL/TLS\n\n. full output - https://gist.github.com/DrugDealer/7c37168e08b2b81a0d54/raw/error\n. @williamboman i did it, installing  Xcode Command Line tools. but, still same problem occurred.\n. ",
    "williamboman": "@DrugDealer I'm having the same issues. Have you solved this yet?\n. Installing Xcode Command Line tools fixed this. xcode-select --install. (assuming you're on OS X of course)\n. $ xcode-select --install did it for me\noh, and\nsh\n$ brew list | egrep '(openssl|readline)'\nopenssl\nreadline\n. ",
    "ThisGuyCodes": "I ran into this issue after upgrading to OS X 10.10 (I had previously installed the xcode command line tools), but after re-running xcode-select --install as @williamboman suggested, it started working again.\n. I can confirm I run into the same issue (and error message) with gevent on python 2.7.5\nDigging a bit more into running the build manually step by step, I did get this specific step to not error-out by:\n- Finding the location of the python binary (not the shim used by pyenv)\n- Manually running the clang command listed in the log, but replacing python.exe with the path to my python binary, ie: /Users/username/.pyenv/versions/adid/bin/python2.7\nBut I don't know what needs to be done to get the build process to use that instead of trying python.exe\n. I fixed this by doing something odd:\nbrew install python\nI got the idea from here.\nNow the line in question looks like: clang -bundle -undefined dynamic_lookup ... and things install fine. This must have something to do with the way the installer 'finds' your python binary.\n. This is definitely not a pyenv specific issue. I've confirmed I get the same build issues with python < 2.7.8 outside of pyenv. So I think this can be closed.\n. I got the same error when compiling python libraries while using python < 2.7.8 without pyenv installed at all. @shivawu which package did you try installing while under the system 2.7.5?\n. I'm on 10.10.1 as well, I'll experiment with this tonight and see if I can run down a cause\n. 2. ... modules may be built with obsolete link options (\"-bundle -bundle_loader python\" rather than \"-bundle -undefined dynamic_lookup\") and some extension module builds may fail as a result.\nThis is exactly what I am observing. Even if we can't push for a backport, I wonder if there's a possibility of a workaround? Like make python think it's 10.9 when compiling things?\n. @hebbo The issue is actually a flaw in the way python detects what operating system you're using (having multiple digits after the version dot seems to break it, ie: 10.10, 10.11). And, as it is with bugs, the newer versions of python have it fixed. This is why 2.7.8 works but not 2.7.6 etc.\nThe older versions of python will not work because they are broken.\n. @mikenerone I don't think \"backporting to an existing patch release\" makes sense. Backporting to an existing feature release, sure (which would create a new patch release). But 2.7 is the only Python 2 version that's even supported right now.\nVersions are meant to be immutable. If you change something and release the change then that's different software than the previous release, so it's a new version. You wouldn't want to automatically replace the 2.7.6 version that people are using out from under them by releasing new software with the same version number anymore than you'd want to implicitly upgrade people to new versions (which, as you describe, is something some places avoid)... because that's the same thing.\nThe process of upgrading from the 2.7.x you're on to, say, 2.7.11 (the current release) should be the same process you'd have to go through to upgrade to some 2.7.x.1 release sub-release-thing that you're requesting.\n. @mikenerone honestly I had no idea pyenv had a precedent of patching sources. If that's the case it seems viable. Very early in the thread I even suggested pyenv could perhaps do something to make python think it was on an earlier version of OSX during the compile.\nThen perhaps someone should find the relevant patch and link it :)\n(as an aside though, you should really look into updating the version of python you're using, 2.7.5 is 3 1/2 years older than the current 2.7.11, and they're point releases, so unlikely to break much if anything (though I'm assuming you have tests to check). On that note though 2.7.11 made some internal changes to ssl implementations, which in particular broke older versions of greenlet and thus gevent, so I'd suggest 2.7.10 as that's even less likely to break stuff)\n. ",
    "mofhu": "I also ran into this issue using OS X 10.10.3, fixed using the CFLAGS environment variable.\n\nhttps://github.com/yyuu/pyenv/wiki/Common-build-problems\nOn Mac OS X 10.9 and 10.10 you may need to set the CFLAGS environment variable when installing a new version in order for configure to find the zlib headers (XCode command line tools must be installed first):\nCFLAGS=\"-I$(xcrun --show-sdk-path)/usr/include\" pyenv install -v 2.7.7\nAlternatively, try reinstalling XCode command line tools for your OS (especially if you just upgraded your OS)\n. \n",
    "StevenACoffman": "Might be of value to others, but I conditionally initialized pyenv to avoid this problem. \nbash\n    if [ -n \"$(type -t pyenv)\" ] && [ \"$(type -t pyenv)\" = function ]; then\n    #    echo \"pyenv is already initialized\"\n        true\n    else\n        if which pyenv > /dev/null; then eval \"$(pyenv init -)\"; fi\n        if which pyenv-virtualenv-init > /dev/null; then eval \"$(pyenv virtualenv-init -)\"; fi\n    fi. ",
    "jfly": "@StevenACoffman's solution didn't quite work for me on zsh, so I implemented a workaround using environment variables here:\n```\nDon't initialize pyenv if it is already initialized.\nSee: https://github.com/pyenv/pyenv/issues/264#issuecomment-358490657\nif [ -n \"$PYENV_LOADING\" ]; then\n    true\nelse\n    if which pyenv > /dev/null 2>&1; then\n        export PYENV_LOADING=\"true\"\n        eval \"$(pyenv init -)\"\n        eval \"$(pyenv virtualenv-init -)\"\n        unset PYENV_LOADING\n    fi\nfi\n```. ",
    "ulgens": "It could be the part of --verbose mode.. ",
    "gera2ld": "I just defined a function to download the source file first and then install it with pyenv.\n```sh\nPYTHON_MIRROR=https://www.python.org/ftp/python\nPYENV_CACHE_DIR=~/.pyenv/cache\npyinstall() {\n  filename=Python-$1.tar.xz\n  mkdir -p $PYENV_CACHE_DIR\n  curl -o /tmp/$filename $PYTHON_MIRROR/$1/$filename\n  mv /tmp/$filename $PYENV_CACHE_DIR/$filename\n  pyenv install $1\n}\npyinstall 3.7.0\n```. ",
    "Bersam": "@yyuu i've already added output of which python, pointing to correct shims, i think.\nand after running pyenv rehash still got 3.4.2 instead of 2.7.8\nbash\n$ pyenv which python\n/usr/bin/python\n. Of course, here: http://ix.io/f72\nbash\nenv PYENV_DEBUG=1 pyenv which python\n. only these lines in .zshenv\n``` bash\nPython\nPYTHONHOME=/usr/lib/python2.7\nPYENV_ROOT=\"$HOME/.pyenv\"\nPATH=\"$PYENV_ROOT/bin:$PATH\"\neval \"$(pyenv init -)\"\n```\n[UPDATED]\nI'm looking for this PYENV_VERSION in my config files...\n. @yyuu i searched for PYENV_VERSION and PYENV_DEBUG on /etc and $HOME. but found nothing. (except in ~/.pyenv itself)\nbash\n$ pyenv versions\n* system (set by PYENV_VERSION environment variable)\n  2.7.8\nbash\n$ echo $PYENV_VERSION\nsystem\n``` bash\n$ echo $PYENV_DEBUG\n```\n. @yyuu yes, that fixes it. thank you :+1:\n. ",
    "mmarchini": "It's working now. Thanks!\n. ",
    "obestwalter": "Well, I didn't think about the technicalities too much yet, but I really feel that instead of an abandoned project with the same name, there should be at least a pointer to this project on PyPi, so that it gets the attention that it IMHO deserves. \nI still think that it woud be possible to create a distutils package that would be pip installable and instead do all that shell magic that you are doing (without admin rights) ... that would be really cool.\nIt's not even completely out there to make stuff pip installable that is not python ... I just remembered that XStatic is doing exactly that (by packaging up static files for web frameworks:  (e.g. https://pypi.python.org/pypi/XStatic-Angular-Bootstrap/0.11.0.2)).\nJust some food for thought. I'd love to get my hands dirty on this, but at least atm no chance :(\n. It's definitely an interesting question if and how this could be done within the PyPi ecosystem. I'll see if I can carve out some time to look into this.\n. ok that might be interesting to look at. \nI contacted Kenneth about his abandoned project, but I did not hear back from him yet.\n. I think one could use the approach outlined here (from http://stackoverflow.com/a/1321345/2626627):\nimport distutils.core\nfrom distutils.command.install import install\n...\nclass my_install(install):\n    def run(self):\n        # run pyenv install scripts(s) here with subprocess\n...\ndistutils.core.setup(..., cmdclass=dict(install=my_install), ...)\n. I opened an issue about passing on the ownership of pyenv here: https://sourceforge.net/p/pypi/support-requests/441/ \n. Yeah about that ... I did not get any feedback yet about passing over the ownership of the abandoned project, but I will experiment over the weekend installing pyenv with setup.py/pip under Linux I guess Mac is covered with Homebrew and I wouldn't even know if this would be feasible/doable for Windows. \nI mean it's quite comfortable to install it with the installer provided by @yyuu - it should be in PyPi mainly because it belongs there :)\n. > I am a bit surprised that PyPI is (still) using SF.net for their issues?!\nMe too - I got quite nostalgic when I stumbled in there and checked several times if this is for real and still active ... feels so 2002 in there :) makes you think if Github will feel like that in 2026.\n. @chrisspen there is even this which could be revived again. \n. ok, so basically there is a dead simple way to do this by just wrapping the existing installer in a bit of setup.py - I forked the installer and created the setup.py. I added a Vagrantfile that does the minimal provisioning of installing git inside vagrant, so you can try it in a virtual machine of a clean system (ubuntu 14.04).\nSee the README of my fork for more details.\n. I uploaded a version to https://wiki.python.org/moin/TestPyPI\nFirst try with pip install -i https://testpypi.python.org/pypi pyenv failed with\nerror: option --single-version-externally-managed not recognized\nSecond try with pip install --egg -i https://testpypi.python.org/pypi pyenv\n```\nDownloading/unpacking pyenv\n  Downloading pyenv-0.0.1.tar.gz\n  Running setup.py (path:/tmp/pip_build_vagrant/pyenv/setup.py) egg_info for package pyenv\nInstalling collected packages: pyenv\n  Running setup.py install for pyenv\n    Cloning into '/home/vagrant/.pyenv'...\n    Cloning into '/home/vagrant/.pyenv/plugins/pyenv-doctor'...\n    Cloning into '/home/vagrant/.pyenv/plugins/pyenv-installer'...\n    Cloning into '/home/vagrant/.pyenv/plugins/pyenv-pip-rehash'...\n    Cloning into '/home/vagrant/.pyenv/plugins/pyenv-update'...\n    Cloning into '/home/vagrant/.pyenv/plugins/pyenv-virtualenv'...\n    Cloning into '/home/vagrant/.pyenv/plugins/pyenv-which-ext'...\nWARNING: seems you still have not added 'pyenv' to the load path.\n\n# Load pyenv automatically by adding\n# the following to your profile:\n\nexport PATH=\"$HOME/.pyenv/bin:$PATH\"\neval \"$(pyenv init -)\"\neval \"$(pyenv virtualenv-init -)\"\n\nRecord file /tmp/pip-L8X76u-record/install-record.txt not found\nSuccessfully installed pyenv\nCleaning up...\n```\nSo this works somehow already. I just don't know yet how to get rid of the necessary --egg parameter - maybe somebody more experienced with setuptools can enlighten me?\n. @kennethreitz freed the name on PyPi (thanks Kenneth :) ): https://sourceforge.net/p/pypi/support-requests/441/\nFor now I registered my fork of the installer there, basically just to secure the name and clarify the intention till it is decided how to move forward with this.\n@yyuu I would like to maintain the Python specific wrapper part of the installer. I will think about how to deal best with keeping the two in sync (easiest would be to fetch the newest installer script directly on each install, but that would cause problems for people which use devpi or other offline caching solutions, so the installer bin should somehow be part of the package). \nAnother idea would be to merge the wrapper code directly into the main project and maintain it together. I actually like that idea. As it really belongs together. There are just two possible ways to use the installer then. And the code of the shell script and the setup.py stuff do not collide.\nAnyway - I will whip my fork into shape over the next few days and go from there.\n. Great! I will get the fork into a shape that is not completely embarassing and then I will send you a pull request. Thanks for taking me on board :)\n. ok - here it is: https://github.com/yyuu/pyenv-installer/pull/16\n@yyuu I released it already from my fork - please let me know if you see any problems.\nThe README still recommends the direct way of installation as I can't guarantee that this will work smoothly and the direct way is the time proven way to do it. \nThe necessary --egg parameter is still a major annoyance for me which I couldn't solve yet ... but I'll get there in the end.\n. ",
    "chrisspen": "+1\nIt's impressive this got as much attention it has without being on PyPI, since I generally won't use a package unless it is on PyPI. That said, it looks someone already beat you to it. and registered a project with the same name. Unfortunately, that project appears to be dead and there are no files published for it.\n. Why was this closed? This is still broken.\n. ",
    "hindman": "Thanks for looking into this and for the info about brew link readline. I was puzzled by the python.exe error as well.\nWhen I generated the error message I was using a box with clean install of 10.10.1 (erased hard drive before install), and I did not set any special options when building CPython. On my primary computer, I upgraded to 10.10.1 without erasing hard drive and without a new install of brew, pyenv, etc. and everything works fine. However, when I try to install this stuff on a clean-install of 10.10.1, I get the errors noted above.\n. I repeated the installation described in my initial comment, this time using Python 2.7.8 rather than 2.7.6 (and also skipping the brew link readline step). I observed the same thing as yyuu: 2.7.8 worked, and 2.7.6 did not. That's a good enough fix for me.\n. ",
    "shivawu": "I met with the same problem, and when I switched from 2.7.5 (installed by pyenv) to system it works. I guess it's still related to pyenv. I notice that when using the system version, the 'clang' command doesn't have an argument -bundle_loader python.exe, maybe that's a start to investigate?\nUPDATE: switch to system I means, pyenv global system\n. I was trying to install pyyaml, 3.10, and my system is 10.10.1, python\n2.7.6.\nOn Fri, Dec 19, 2014 at 2:51 PM, Travis Johnson notifications@github.com\nwrote:\n\nI got the same error when compiling python libraries while using python <\n2.7.8 without pyenv installed at all. @shivawu\nhttps://github.com/shivawu which package did you try installing while\nunder the system 2.7.5?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/yyuu/pyenv/issues/273#issuecomment-67709180.\n\n\nChenyang WU\nShanghai Jiao Tong University\nAddress: No. 800 Dong Chuan Rd, Minhang District, Shanghai\n. ",
    "john-kurkowski": "I wonder if this was a bad comparison of MACOSX_DEPLOYMENT_TARGET in Python's own build steps. 10.2 always compares > 10.10 (Yosemite's version). This comparison was fixed in Python Issue21811. Not realistic to backport, so that's why Yosemite users are stuck building from source 2.7.8+.\n. ",
    "kennytrytek-wf": "I was able to work around this issue by building pip wheels for all my requirements (specifically PyCrypto) in 2.7.8, and installing from wheels in a 2.7.6 virtual environment.\n. ",
    "pfhayes": "@kennytrytek-wf 's solution also worked for me. Here is what I needed to do to get this working:\n``` bash\nThis fails, with the python.exe error\npyenv global 2.7.6\npip install -r requirements.txt\nThis works\npyenv global 2.7.9\npip wheel -r requirements.txt\npyenv global 2.7.6\npip install -r requirements.txt\n```\n. ",
    "dmitrytokarev": "@conslo I had exact the same issue. brew install python fixed the issue for me. pip works like a champ now! Thanks!\n. ",
    "hebbo": "Hi,\nI hit this problem while trying to setup my Ansible dev environment locally:\n$ sw_vers\nProductName:    Mac OS X\nProductVersion: 10.11\nBuildVersion:   15A284\npyenv --version\npyenv 20160202-10-ga6f1f48\npython --version\nPython 2.7.6\nwhich python\n/Users/USERNAME/.pyenv/shims/python\n1 warning generated.\n    clang -bundle -bundle_loader python.exe -L/usr/local/opt/readline/lib -L/usr/local/opt/readline/lib -L/usr/local/opt/openssl/lib -L/Users/angel/.pyenv/versions/2.7.6/lib build/temp.macosx-10.11-x86_64-2.7/src/MD2.o -o build/lib.macosx-10.11-x86_64-2.7/Crypto/Hash/_MD2.so\n    ld: file not found: python.exe\n    clang: error: linker command failed with exit code 1 (use -v to see invocation)\n    error: command 'clang' failed with exit status 1\nDid anyone find a solution to this? None of the suggestions made on this thread worked for me. I am able to install pycrypto using Python 2.7.8 (within a pyenv environment) but I was not able to install it using 2.7.6. \nAny help will be appreciated. Thanks in advance.\nAngel\n. @conslo Seems we will have to switch to 2.7.8 then if we waant to manage our local envs using pyenv. Thanks a lot for your quick reply.\n. ",
    "mikenerone": "Perhaps the fix could be backported into pyenv's python builds <2.7.8 since it breaks functionality, rendering pyenv useless for projects using those versions (unfortunately, we don't always have control over such constraints).\n. @conslo I'm normally in total agreement with your sentiment here, but in this case the result is that one's code can be perfectly fine, and yet locally with pyenv it doesn't work at all, which is already quite a difference in behavior. If one's target environment is, say, 2.7.5 and can't be changed immediately just to accommodate pyenv, the only local workaround right now is to use 2.7.8 for development instead and hope that's \"close enough\", which is what people are doing. Just patching this one backport into earlier versions (and pyenv does already have the precedent of patching the Python sources, btw) is much less likely to expose a substantive behavioral difference that that.\nSadly, there are no good answers here, including the \"do nothing\" answer. IMO, the least harmful answer should therefore be selected, and \"it doesn't work at all\" is the most harmful.\n. @conslo I hear ya, but the root of the holdup for a lot of people is the policy of their particular distro (particularly the major ones). There are ways to achieve newer Python versions, of course, but many people feel like when they do that, they're throwing away the benefit of using a major, supported distro in the first place (that said, in answer to your aside, we bit the bullet and are in the process of moving to Py3 anyway). The fact that so many development targets are these major distros with older Pythons is the reason pyenv not being able to support those versions is a significant problem.\nSide note: those SSL changes you refer to were done in 2.7.9, and are already backported by those major distros, so that's usually not a concern (e.g. RedHat/CentOS have already done so with their current blessed Python, which is 2.7.5), so it's at least arguable that A. this sortof leaves pyenv as the only \"real\" hurdle for this situation, and B. it's hard to get away from those behavioral differences you mentioned regardless of what we do. ;)\n. Interestingly enough, this problem seems to have disappeared for me. The only thing I can think of that I changed is that I switched from homebrew to MacPorts. I don't care enough to test it myself :), but if you're still affected, you might give that a try.\n. I am at a loss to explain this (and perhaps I should open a new issue), but I am experiencing this behavior with IDEA 2017.2 CE + the Python plugin on MacOS, except neither --copies nor the fact that IDEA is using its own file chooser seems to fix it. I've tried adding virtualenvs as Python SDKs (i.e. \"interpreter\" in PyCharm) under the following scenarios:\n\nCreated with /opt/local/bin/pyvenv (this is a MacPorts Python 3.5.4): Works\nCreated with pyenv virtualenv 2.7.14: Works\nCreated with ~/.pyenv/versions/2.7.14/virtualenv: Works\nCreated with pyenv virtualenv 3.5.2: Fails (site-packages missing from path)\nCreated with ~/.pyenv/versions/3.5.2/pyvenv: Fails (site-packages missing from path)\nCreated with pyenv virtualenv 3.5.4: Fails (site-packages missing from path)\nCreated with ~/.pyenv/versions/3.5.4/pyvenv: Fails (site-packages missing from path)\nCreated with pyenv virtualenv 3.6.1: Fails (site-packages missing from path)\nCreated with ~/.pyenv/versions/3.6.1/pyvenv: Fails (site-packages missing from path)\n\nSide note: adding from the original, non-virtualenv location works in all cases.\nSo the problem seems to occur only if the \"source\" Python used to create the virtualenv is a pyenv-installed Python 3.x, regardless of whether it's created with pyenv virtualenv or pyvenv. For the life of me, I haven't been able to figure out what's going on. E.g. Manually examining sys.path from the command line, it looks right in all cases. I'm stumped.. @fubarhouse I'm assuming you meant me...yes, I had seen that referenced further up. As I mentioned, I'm seeing this behavior even with passing the --copies parameter when creating the virtualenv. On the other hand, I backed up to IDEA 2017.1, and I now see it there as well. I've also tried regressing pyenv back to commits as far back as last November, and it seems that nothing fixes it. So it doesn't seem like something recently introduced by either tool, and I've probably got something going on at my end that I just haven't put my finger on yet.. ",
    "johnpneumann": "When attempting to install pymssql I encounter the same issue with python 2.7.6, but only when I install it with pyenv using ucs2 instead of ucs4. This is on OSX 10.11.5. If I install python 2.7.6 with ucs4, I can successfully install everything, however, ucs2 seems to break something, though I'm not sure what. \nFailure\n```\nenv CFLAGS=\"-I$(brew --prefix openssl)/include\" LDFLAGS=\"-L$(brew --prefix openssl)/lib\" PYTHON_CONFIGURE_OPTS=\"--enable-unicode=ucs2\" pyenv install 2.7.6\npyenv virtualenv 2.7.6 testenv\npyenv activate testenv\npip install pymssql\nCollecting pymssql\n  Using cached pymssql-2.1.2.tar.gz\nBuilding wheels for collected packages: pymssql\n  Running setup.py bdist_wheel for pymssql ... error\n  Complete output from command /Users/johnpneumann/.pyenv/versions/2.7.6/envs/codex-client/bin/python2.7 -u -c \"import setuptools, tokenize;file='/private/var/folders/vb/6t_fymgd1fl2zf2ptvvbsxw40000gn/T/pip-build-zUIGUw/pymssql/setup.py';exec(compile(getattr(tokenize, 'open', open)(file).read().replace('\\r\\n', '\\n'), file, 'exec'))\" bdist_wheel -d /var/folders/vb/6t_fymgd1fl2zf2ptvvbsxw40000gn/T/tmp64n9CMpip-wheel- --python-tag cp27: setup.py: platform.system() => 'Darwin'\n  setup.py: platform.architecture() => ('64bit', '')\n  setup.py: platform.libc_ver() => ('', '')\n  setup.py: Detected Darwin/Mac OS X.\n      You can install FreeTDS with Homebrew or MacPorts, or by downloading\n      and compiling it yourself.\n  Homebrew (http://brew.sh/)\n  --------------------------\n  brew install freetds\n\n  MacPorts (http://www.macports.org/)\n  -----------------------------------\n  sudo port install freetds\n\nsetup.py: Not using bundled FreeTDS\n  setup.py: include_dirs = ['/usr/local/include']\n  setup.py: library_dirs = ['/usr/local/lib']\n  running bdist_wheel\n  running build\n  running build_ext\n  building '_mssql' extension\n  creating build\n  creating build/temp.macosx-10.11-x86_64-2.7\n  clang -fno-strict-aliasing -I/usr/local/opt/openssl/include -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -I/usr/local/include -I/Users/johnpneumann/.pyenv/versions/2.7.6/include/python2.7 -c _mssql.c -o build/temp.macosx-10.11-x86_64-2.7/_mssql.o -DMSDBLIB\n  _mssql.c:28428:32: warning: unused function '__Pyx_PyUnicode_FromString' [-Wunused-function]\n  static CYTHON_INLINE PyObject __Pyx_PyUnicode_FromString(const char c_str) {\n                                 ^\n  _mssql.c:332:29: warning: unused function '__Pyx_Py_UNICODE_strlen' [-Wunused-function]\n  static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE u)\n                              ^\n  _mssql.c:28605:33: warning: unused function '__Pyx_PyInt_FromSize_t' [-Wunused-function]\n  static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {\n                                  ^\n  _mssql.c:27898:27: warning: function '__Pyx_PyInt_As_long' is not needed and will not be emitted [-Wunneeded-internal-declaration]\n  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject x) {\n                            ^\n  _mssql.c:28082:27: warning: function '__Pyx_PyInt_As_char' is not needed and will not be emitted [-Wunneeded-internal-declaration]\n  static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *x) {\n                            ^\n  5 warnings generated.\n  creating build/lib.macosx-10.11-x86_64-2.7\n  clang -bundle -bundle_loader python.exe -L/usr/local/opt/readline/lib -L/usr/local/opt/readline/lib -L/usr/local/opt/openssl/lib -L/Users/johnpneumann/.pyenv/versions/2.7.6/lib -L/usr/local/opt/openssl/lib build/temp.macosx-10.11-x86_64-2.7/_mssql.o -L/usr/local/lib -lsybdb -o build/lib.macosx-10.11-x86_64-2.7/_mssql.so\n  ld: file not found: python.exe\n  clang: error: linker command failed with exit code 1 (use -v to see invocation)\n  error: command 'clang' failed with exit status 1\n\n```\nSuccess\nenv CFLAGS=\"-I$(brew --prefix openssl)/include\" LDFLAGS=\"-L$(brew --prefix openssl)/lib\" pyenv install 2.7.6\npyenv virtualenv 2.7.6 testenv\npyenv activate testenv\npip install pymssql\nedit: We use such an old version of python for several reasons, namely due to support for Autodesk Maya among other 3D software packages.\n. ",
    "andreif": "Well, brew install python and setting CFLAGS/LDFLAGS did not help. \nWorking solution\nFirst, we confirm the issue\nsh\n$ pyenv install 2.7.6\n$ pyenv virtualenv 2.7.6 testme\n$ pyenv activate testme\n$ pip install --no-cache lxml\n    ...\n    ld: file not found: python.exe\n    clang: error: linker command failed with exit code 1 (use -v to see invocation)\n    error: command 'clang' failed with exit status 1\nThen, as @yyuu has mentioned in this thread in 2014, that sysconfig produces incorrect output. Let's see where it's stored:\nsh\n$ grep bundle_loader /Users/andrei/.pyenv/versions/2.7.6/lib/python2.7/_sysconfigdata.py\n./lib/python2.7/_sysconfigdata.py: 'BLDSHARED': 'clang -bundle -bundle_loader python.exe -L/usr/local/opt/readline/lib -L/usr/local/opt/readline/lib -L/usr/local/opt/openssl/lib -L/Users/andrei/.pyenv/versions/2.7.6/lib',\n./lib/python2.7/_sysconfigdata.py: 'LDCXXSHARED': 'c++ -bundle -bundle_loader /Users/andrei/.pyenv/versions/2.7.6/bin/python2.7',\n./lib/python2.7/_sysconfigdata.py: 'LDSHARED': 'clang -bundle -bundle_loader python.exe -L/usr/local/opt/readline/lib -L/usr/local/opt/readline/lib -L/usr/local/opt/openssl/lib -L/Users/andrei/.pyenv/versions/2.7.6/lib',\nNow, if we try removing bundle_loader from clang arguments since Python 2.7.8+ does not have it there (DON'T DO IT YOURSELF):\n```sh\n$ sed -i -e \"s/-bundle_loader python.exe//g\" \\ \n  /Users/andrei/.pyenv/versions/2.7.6/lib/python2.7/_sysconfigdata.py\n$ pip install --no-cache lxml\n    ...\n    ld: symbol(s) not found for architecture x86_64\n    clang: error: linker command failed with exit code 1 (use -v to see invocation)\n    error: command 'clang' failed with exit status 1\n```\nIt seems needed, so we use another way.\nAs you may have noticed, LDCXXSHARED points to Python correctly, so we try patching the others (in the original _sysconfigdata.py, so you have to restore the file manually or reinstall Python if you did the previous step \ud83d\ude04 ):\nsh\n$ export p=/Users/andrei/.pyenv/versions/2.7.6\n$ sed -i -e \"s~-bundle_loader python.exe~-bundle_loader ${p}/bin/python2.7~g\" \\ \n  \"$p/lib/python2.7/_sysconfigdata.py\"\nOr more aggressively, if you want to fix all python.exe cases in the file:\nsh\n$ sed -i -e \"s~python.exe~${p}/bin/python2.7~g\" \"$p/lib/python2.7/_sysconfigdata.py\"\nNow try installing:\nsh\n$ pip install --no-cache lxml\nCollecting lxml\n  Downloading lxml-3.7.3.tar.gz (3.8MB)\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3.8MB 49.0MB/s\nInstalling collected packages: lxml\n  Running setup.py install for lxml ... done\nSuccessfully installed lxml-3.7.3\nDone!. @yyuu Maybe include such patch in the installer scripts?. @yyuu That's similar to what Homebrew does https://github.com/Homebrew/homebrew-core/blob/master/Formula/python.rb#L206-L210\nruby\n # Prevent third-party packages from building against fragile Cellar paths\n inreplace [lib_cellar/\"_sysconfigdata.py\",\n            lib_cellar/\"config/Makefile\",\n            frameworks/\"Python.framework/Versions/Current/lib/pkgconfig/python-2.7.pc\"],\n           prefix, opt_prefix. ",
    "jnw29": "andreif's method worked for me in installing biopython via pip for Python 2.7.5. ",
    "dwcaraway": "@andreif 's also worked for me for issues with pyyaml for pyenv + virtualenv with python 2.7.6, MacOS Sierra 10.12.5\nexport p=/Users/$(whoami)/.pyenv/versions/2.7.6\nsed -i -e \"s~python.exe~${p}/bin/python2.7~g\" \"$p/lib/python2.7/_sysconfigdata.py\". ",
    "jalanb": "@andreif's method also worked for me in trying to install pycrypto (as a needed requirement for ansible) with Python 2.7.5 on OSX El Capitan 10.11.c. ",
    "frankV": "On macOS Sierra 10.12.6, this worked for me:\n$ export p=$(HOME)/.pyenv/versions/2.7.6\n$ sed -i -e \"s#python.exe#${p}/bin/python2.7#g\" \"$p/lib/python2.7/_sysconfigdata.py\"\n\ncredit to this SO Answer for helping me see what I was missing.. \n",
    "DylanCa": "Spent 3 days searching everywhere for a solution, couldn't install psycopg2 lxml and paramiko with a specific version, and thanks to Andreif's solution, now it's working ! Thank you a lot !\n\nMacOS High Sierra - 10.13.3\nPyEnv 2.7.6. \n",
    "kevinburke": "Sure, here is the implementation (in my .zshrc):\nzsh\npyenv() {\n    eval \"$( command pyenv init - )\"\n    pyenv \"$@\"\n}\nThe full source is here\nI like having new shells open extremely quickly. Running pyenv init is by far the slowest part of my current zsh startup process, at ~140ms. Running\n{ time ( eval  \"$(pyenv init -)\" ) }\nreports anywhere from 160ms to 200ms; defining a function costs 1ms.\n. Happy to try and dig into what is causing the slowness more, but at the moment this would be a super nice feature.\n. Running --no-rehash works, because it skips the troublesome line. I figured\nmy PR made the code more reliable and didn't add too much in the way of\ntime or complexity.\n\nKevin Burke\nphone: 925.271.7005 | twentymilliseconds.com\nOn Fri, Nov 28, 2014 at 8:06 PM, Yamashita, Yuu notifications@github.com\nwrote:\n\nSpecifying --no-rehash to pyenv init (eval \"$(pyenv init - --no-rehash)\")\nwill skip calling pyenv rehash during pyenv's start up. Since pyenv rehash\nis most time consuming part in pyenv-init, using it must make shell start\nup faster. Could you try using --no-rehash if it's worth or not?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/yyuu/pyenv/pull/278#issuecomment-64940770.\n. Opened https://github.com/sstephenson/rbenv/pull/663 to fix this in rbenv.\n\n\nKevin Burke\nphone: 925.271.7005 | twentymilliseconds.com\nOn Fri, Nov 28, 2014 at 8:34 PM, Yamashita, Yuu notifications@github.com\nwrote:\n\nClosed #278 https://github.com/yyuu/pyenv/pull/278.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/yyuu/pyenv/pull/278#event-200105885.\n. \n",
    "defcube": "You were totally correct. Sorry to waste your time over this. I assumed it was working fine because gcc seemed ok, but I had no /usr/include/ as you guessed.\n. ",
    "yangj1e": "Found same problem. But I am against installing Xcode command line tools since I already have full Xcode application installed. Explicitly installing Xcode command line tools seems to duplicate what are contained in Xcode application.\n. ",
    "thehunmonkgroup": "Just took care of that now. Thanks!\n. ",
    "elgreg": "Figured it out: Need to use flags on pylibmc install (repeated same issue with virtualenvs so this is not an issue with pyenv.) Closing.\npip install pylibmc --install-option=\"--with-sasl2\"\n. ",
    "jonathanstricks": "Good call. Thanks @elgreg \n. ",
    "nikolay": "It looks like 3.4.1 doesn't build either.\n. So, it seems to build without CFLAGS=\"-I$(xcrun --show-sdk-path)/usr/include\", which I had before to make 2.7 work properly. The output with CFLAGS is huge; just the error is:\n```\nBUILD FAILED (OS X 10.10.2 using python-build 20141028)\nInspect or clean up the working tree at /var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226211401.19766\nResults logged to /var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226211402.19828.log\nLast 10 log lines:\n    import pip\n  File \"/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/tmphbijnjje/pip-1.5.6-py2.py3-none-any.whl/pip/init.py\", line 9, in \n  File \"/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/tmphbijnjje/pip-1.5.6-py2.py3-none-any.whl/pip/log.py\", line 8, in \n  File \"/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/tmphbijnjje/pip-1.5.6-py2.py3-none-any.whl/pip/backwardcompat/init.py\", line 39, in \n  File \"/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226211401.19766/Python-3.4.2/Lib/xmlrpc/client.py\", line 136, in \n    from xml.parsers import expat\n  File \"/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226211401.19766/Python-3.4.2/Lib/xml/parsers/expat.py\", line 4, in \n    from pyexpat import \nImportError: No module named 'pyexpat'\nmake: ** [install] Error 1\n```\n. There's also this:\n```\nPython build finished successfully!\nThe necessary bits to build these optional modules were not found:\nossaudiodev           spwd\nTo find the necessary bits, look in setup.py in detect_modules() for the module's name.\nFailed to build these modules:\n_elementtree          pyexpat               readline\n```\n. Sorry for the fragmented messing. Here, I think, is the relevant trace:\nrunning build\nrunning build_ext\nbuilding 'readline' extension\nccache /usr/bin/cc -Wno-unused-result -DNDEBUG -g -O3 -Wall -Wstrict-prototypes -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.10.sdk/usr/include -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.10.sdk/usr/include -Werror=declaration-after-statement -I./Include -I. -IInclude -I/usr/local/opt/readline/include -I/usr/local/include -I/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Include -I/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2 -c /private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/readline.c -o build/temp.macosx-10.10-x86_64-3.4/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/readline.o\n/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/readline.c:955:5: error: use of undeclared identifier 'rl_completion_suppress_append'\n    rl_completion_suppress_append = 0;\n    ^\n/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/readline.c:1075:5: error: use of undeclared identifier 'rl_catch_signals'\n    rl_catch_signals = 0;\n    ^\n2 errors generated.\nbuilding 'pyexpat' extension\nccache /usr/bin/cc -Wno-unused-result -DNDEBUG -g -O3 -Wall -Wstrict-prototypes -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.10.sdk/usr/include -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.10.sdk/usr/include -Werror=declaration-after-statement -DHAVE_EXPAT_CONFIG_H=1 -DUSE_PYEXPAT_CAPI -I/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/expat -I./Include -I. -IInclude -I/usr/local/opt/readline/include -I/usr/local/include -I/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Include -I/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2 -c /private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/pyexpat.c -o build/temp.macosx-10.10-x86_64-3.4/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/pyexpat.o\nccache /usr/bin/cc -Wno-unused-result -DNDEBUG -g -O3 -Wall -Wstrict-prototypes -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.10.sdk/usr/include -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.10.sdk/usr/include -Werror=declaration-after-statement -DHAVE_EXPAT_CONFIG_H=1 -DUSE_PYEXPAT_CAPI -I/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/expat -I./Include -I. -IInclude -I/usr/local/opt/readline/include -I/usr/local/include -I/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Include -I/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2 -c /private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/expat/xmlparse.c -o build/temp.macosx-10.10-x86_64-3.4/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/expat/xmlparse.o\nccache /usr/bin/cc -Wno-unused-result -DNDEBUG -g -O3 -Wall -Wstrict-prototypes -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.10.sdk/usr/include -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.10.sdk/usr/include -Werror=declaration-after-statement -DHAVE_EXPAT_CONFIG_H=1 -DUSE_PYEXPAT_CAPI -I/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/expat -I./Include -I. -IInclude -I/usr/local/opt/readline/include -I/usr/local/include -I/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Include -I/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2 -c /private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/expat/xmlrole.c -o build/temp.macosx-10.10-x86_64-3.4/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/expat/xmlrole.o\nccache /usr/bin/cc -Wno-unused-result -DNDEBUG -g -O3 -Wall -Wstrict-prototypes -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.10.sdk/usr/include -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.10.sdk/usr/include -Werror=declaration-after-statement -DHAVE_EXPAT_CONFIG_H=1 -DUSE_PYEXPAT_CAPI -I/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/expat -I./Include -I. -IInclude -I/usr/local/opt/readline/include -I/usr/local/include -I/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Include -I/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2 -c /private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/expat/xmltok.c -o build/temp.macosx-10.10-x86_64-3.4/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/expat/xmltok.o\nccache /usr/bin/cc -bundle -undefined dynamic_lookup -L/usr/local/opt/readline/lib -L/usr/local/opt/readline/lib -L/Users/username/Projects/myproject/.anyenv/pyenv/versions/3.4.2/lib -L/usr/local/opt/readline/lib -L/usr/local/opt/readline/lib -L/Users/username/Projects/myproject/.anyenv/pyenv/versions/3.4.2/lib -L/usr/local/opt/readline/lib -L/usr/local/opt/readline/lib -L/Users/username/Projects/myproject/.anyenv/pyenv/versions/3.4.2/lib -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.10.sdk/usr/include -I/usr/local/opt/readline/include -I/usr/local/opt/readline/include -I/Users/username/Projects/myproject/.anyenv/pyenv/versions/3.4.2/include build/temp.macosx-10.10-x86_64-3.4/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/pyexpat.o build/temp.macosx-10.10-x86_64-3.4/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/expat/xmlparse.o build/temp.macosx-10.10-x86_64-3.4/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/expat/xmlrole.o build/temp.macosx-10.10-x86_64-3.4/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/expat/xmltok.o -L/usr/local/opt/readline/lib -L/Users/username/Projects/myproject/.anyenv/pyenv/versions/3.4.2/lib -L/usr/local/lib -o build/lib.macosx-10.10-x86_64-3.4/pyexpat.so\n*** WARNING: renaming \"pyexpat\" since importing it failed: dlopen(build/lib.macosx-10.10-x86_64-3.4/pyexpat.so, 2): Symbol not found: _XML_ErrorString\n  Referenced from: build/lib.macosx-10.10-x86_64-3.4/pyexpat.so\n  Expected in: flat namespace\n in build/lib.macosx-10.10-x86_64-3.4/pyexpat.so\nbuilding '_elementtree' extension\nccache /usr/bin/cc -Wno-unused-result -DNDEBUG -g -O3 -Wall -Wstrict-prototypes -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.10.sdk/usr/include -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.10.sdk/usr/include -Werror=declaration-after-statement -DHAVE_EXPAT_CONFIG_H=1 -DUSE_PYEXPAT_CAPI -I/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/expat -I./Include -I. -IInclude -I/usr/local/opt/readline/include -I/usr/local/include -I/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Include -I/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2 -c /private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/_elementtree.c -o build/temp.macosx-10.10-x86_64-3.4/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/_elementtree.o\n/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/_elementtree.c:529:44: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]\n        if (((((PyObject*)(res))->ob_type) == &PyList_Type)) {\n             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~\n/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/_elementtree.c:529:44: note: remove extraneous parentheses around the comparison to silence this warning\n        if (((((PyObject*)(res))->ob_type) == &PyList_Type)) {\n            ~                              ^              ~\n/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/_elementtree.c:529:44: note: use '=' to turn this equality comparison into an assignment\n        if (((((PyObject*)(res))->ob_type) == &PyList_Type)) {\n                                           ^~\n                                           =\n/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/_elementtree.c:549:44: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]\n        if (((((PyObject*)(res))->ob_type) == &PyList_Type)) {\n             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~\n/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/_elementtree.c:549:44: note: remove extraneous parentheses around the comparison to silence this warning\n        if (((((PyObject*)(res))->ob_type) == &PyList_Type)) {\n            ~                              ^              ~\n/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/_elementtree.c:549:44: note: use '=' to turn this equality comparison into an assignment\n        if (((((PyObject*)(res))->ob_type) == &PyList_Type)) {\n                                           ^~\n                                           =\n/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/_elementtree.c:1525:46: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]\n    else if (((((PyObject*)(item))->ob_type) == &PySlice_Type)) {\n              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/_elementtree.c:1525:46: note: remove extraneous parentheses around the comparison to silence this warning\n    else if (((((PyObject*)(item))->ob_type) == &PySlice_Type)) {\n             ~                               ^               ~\n/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/_elementtree.c:1525:46: note: use '=' to turn this equality comparison into an assignment\n    else if (((((PyObject*)(item))->ob_type) == &PySlice_Type)) {\n                                             ^~\n                                             =\n/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/_elementtree.c:1577:46: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]\n    else if (((((PyObject*)(item))->ob_type) == &PySlice_Type)) {\n              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/_elementtree.c:1577:46: note: remove extraneous parentheses around the comparison to silence this warning\n    else if (((((PyObject*)(item))->ob_type) == &PySlice_Type)) {\n             ~                               ^               ~\n/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/_elementtree.c:1577:46: note: use '=' to turn this equality comparison into an assignment\n    else if (((((PyObject*)(item))->ob_type) == &PySlice_Type)) {\n                                             ^~\n                                             =\n/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/_elementtree.c:2332:44: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]\n    if (((((PyObject*)(element))->ob_type) == &Element_Type)) {\n         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/_elementtree.c:2332:44: note: remove extraneous parentheses around the comparison to silence this warning\n    if (((((PyObject*)(element))->ob_type) == &Element_Type)) {\n        ~                                  ^               ~\n/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/_elementtree.c:2332:44: note: use '=' to turn this equality comparison into an assignment\n    if (((((PyObject*)(element))->ob_type) == &Element_Type)) {\n                                           ^~\n                                           =\n/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/_elementtree.c:2369:44: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]\n    if (((((PyObject*)(element))->ob_type) == &Element_Type)) {\n         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/_elementtree.c:2369:44: note: remove extraneous parentheses around the comparison to silence this warning\n    if (((((PyObject*)(element))->ob_type) == &Element_Type)) {\n        ~                                  ^               ~\n/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/_elementtree.c:2369:44: note: use '=' to turn this equality comparison into an assignment\n    if (((((PyObject*)(element))->ob_type) == &Element_Type)) {\n                                           ^~\n                                           =\n/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/_elementtree.c:2489:58: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]\n        } else if (((((PyObject*)(self->data))->ob_type) == &PyList_Type)) {\n                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~\n/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/_elementtree.c:2489:58: note: remove extraneous parentheses around the comparison to silence this warning\n        } else if (((((PyObject*)(self->data))->ob_type) == &PyList_Type)) {\n                   ~                                     ^              ~\n/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/_elementtree.c:2489:58: note: use '=' to turn this equality comparison into an assignment\n        } else if (((((PyObject*)(self->data))->ob_type) == &PyList_Type)) {\n                                                         ^~\n                                                         =\n/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/_elementtree.c:2891:53: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]\n        if (((((PyObject*)(self->target))->ob_type) == &TreeBuilder_Type))\n             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/_elementtree.c:2891:53: note: remove extraneous parentheses around the comparison to silence this warning\n        if (((((PyObject*)(self->target))->ob_type) == &TreeBuilder_Type))\n            ~                                       ^                   ~\n/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/_elementtree.c:2891:53: note: use '=' to turn this equality comparison into an assignment\n        if (((((PyObject*)(self->target))->ob_type) == &TreeBuilder_Type))\n                                                    ^~\n                                                    =\n/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/_elementtree.c:2962:49: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]\n    if (((((PyObject*)(self->target))->ob_type) == &TreeBuilder_Type)) {\n         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/_elementtree.c:2962:49: note: remove extraneous parentheses around the comparison to silence this warning\n    if (((((PyObject*)(self->target))->ob_type) == &TreeBuilder_Type)) {\n        ~                                       ^                   ~\n/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/_elementtree.c:2962:49: note: use '=' to turn this equality comparison into an assignment\n    if (((((PyObject*)(self->target))->ob_type) == &TreeBuilder_Type)) {\n                                                ^~\n                                                =\n/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/_elementtree.c:2992:49: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]\n    if (((((PyObject*)(self->target))->ob_type) == &TreeBuilder_Type))\n         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/_elementtree.c:2992:49: note: remove extraneous parentheses around the comparison to silence this warning\n    if (((((PyObject*)(self->target))->ob_type) == &TreeBuilder_Type))\n        ~                                       ^                   ~\n/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/_elementtree.c:2992:49: note: use '=' to turn this equality comparison into an assignment\n    if (((((PyObject*)(self->target))->ob_type) == &TreeBuilder_Type))\n                                                ^~\n                                                =\n/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/_elementtree.c:3014:49: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]\n    if (((((PyObject*)(self->target))->ob_type) == &TreeBuilder_Type))\n         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/_elementtree.c:3014:49: note: remove extraneous parentheses around the comparison to silence this warning\n    if (((((PyObject*)(self->target))->ob_type) == &TreeBuilder_Type))\n        ~                                       ^                   ~\n/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/_elementtree.c:3014:49: note: use '=' to turn this equality comparison into an assignment\n    if (((((PyObject*)(self->target))->ob_type) == &TreeBuilder_Type))\n                                                ^~\n                                                =\n/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/_elementtree.c:3385:49: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]\n    if (((((PyObject*)(self->target))->ob_type) == &TreeBuilder_Type)) {\n         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/_elementtree.c:3385:49: note: remove extraneous parentheses around the comparison to silence this warning\n    if (((((PyObject*)(self->target))->ob_type) == &TreeBuilder_Type)) {\n        ~                                       ^                   ~\n/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/_elementtree.c:3385:49: note: use '=' to turn this equality comparison into an assignment\n    if (((((PyObject*)(self->target))->ob_type) == &TreeBuilder_Type)) {\n                                                ^~\n                                                =\n/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/_elementtree.c:3460:47: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]\n        if (((((PyObject*)(buffer))->ob_type) == &PyUnicode_Type)) {\n             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/_elementtree.c:3460:47: note: remove extraneous parentheses around the comparison to silence this warning\n        if (((((PyObject*)(buffer))->ob_type) == &PyUnicode_Type)) {\n            ~                                 ^                 ~\n/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/_elementtree.c:3460:47: note: use '=' to turn this equality comparison into an assignment\n        if (((((PyObject*)(buffer))->ob_type) == &PyUnicode_Type)) {\n                                              ^~\n                                              =\n13 warnings generated.\nccache /usr/bin/cc -bundle -undefined dynamic_lookup -L/usr/local/opt/readline/lib -L/usr/local/opt/readline/lib -L/Users/username/Projects/myproject/.anyenv/pyenv/versions/3.4.2/lib -L/usr/local/opt/readline/lib -L/usr/local/opt/readline/lib -L/Users/username/Projects/myproject/.anyenv/pyenv/versions/3.4.2/lib -L/usr/local/opt/readline/lib -L/usr/local/opt/readline/lib -L/Users/username/Projects/myproject/.anyenv/pyenv/versions/3.4.2/lib -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.10.sdk/usr/include -I/usr/local/opt/readline/include -I/usr/local/opt/readline/include -I/Users/username/Projects/myproject/.anyenv/pyenv/versions/3.4.2/include build/temp.macosx-10.10-x86_64-3.4/private/var/folders/cb/cxxqz_g94jd1x5tjwrklxgd00000gn/T/python-build.20141226212553.32505/Python-3.4.2/Modules/_elementtree.o -L/usr/local/opt/readline/lib -L/Users/username/Projects/myproject/.anyenv/pyenv/versions/3.4.2/lib -L/usr/local/lib -o build/lib.macosx-10.10-x86_64-3.4/_elementtree.so\n*** WARNING: renaming \"_elementtree\" since importing it failed: PyCapsule_Import could not import module \"pyexpat\"\n. Everything installed and worked fine with 2.7.9, but I decided to upgrade to 3.4.2 when things stopped working, i.e. 2.7 worked with CFLAGS and 3.4 doesn't work with the same. Not a big deal knowing it works without the flags, but maybe should be noted.\n. I do have both, of course. zlib is installed via Homebrew and I have Xcode 7.1 beta and I haven't updated it since it worked last time, i.e. it's not the beta version of Xcode.\n. Well, I'm not sure what's wrong with my environment if 3.4.3 builds and 3.5.0 doesn't.\n. @swarajban I've done this, of course. It's not that. It does not work. I tried once more. Same exact issue. 3.4.3 works, 3.5.0 fails miserably.\n. ",
    "cescoferraro": "I needed the CFLAG to install 3.4.2 and 2.7.9 but not 3.4.3\n. ",
    "darjeeling": "I found discussion about setuptools 8.4 \nhttps://bitbucket.org/pypa/setuptools/issue/314/setuptools-84-breaks-non-pip-upgrades\n. ",
    "wikibootup": "Here is the log ( about ez_setup.py problem ( setuptools-8.4 ))\nDownloading https://pypi.python.org/packages/source/s/setuptools/setuptools-8.4.zip\nExtracting in /var/folders/n7/4z5nj6h92dz321vp0q8tk04r0000gn/T/tmpCsdomP\nTraceback (most recent call last):\n  File \"/var/folders/n7/4z5nj6h92dz321vp0q8tk04r0000gn/T/python-build.20141227211201.92448/ez_setup.py\", line 332, in <module>\n    sys.exit(main())\n  File \"/var/folders/n7/4z5nj6h92dz321vp0q8tk04r0000gn/T/python-build.20141227211201.92448/ez_setup.py\", line 329, in main\n    return _install(archive, _build_install_args(options))\n  File \"/var/folders/n7/4z5nj6h92dz321vp0q8tk04r0000gn/T/python-build.20141227211201.92448/ez_setup.py\", line 51, in _install\n    with archive_context(archive_filename):\n  File \"/usr/local/opt/pyenv/versions/2.7.9/lib/python2.7/contextlib.py\", line 17, in __enter__\n    return self.gen.next()\n  File \"/var/folders/n7/4z5nj6h92dz321vp0q8tk04r0000gn/T/python-build.20141227211201.92448/ez_setup.py\", line 100, in archive_context\n    with ContextualZipFile(filename) as archive:\n  File \"/var/folders/n7/4z5nj6h92dz321vp0q8tk04r0000gn/T/python-build.20141227211201.92448/ez_setup.py\", line 88, in __new__\n    return zipfile.ZipFile(*args, **kwargs)\n  File \"/usr/local/opt/pyenv/versions/2.7.9/lib/python2.7/zipfile.py\", line 770, in __init__\n    self._RealGetContents()\n  File \"/usr/local/opt/pyenv/versions/2.7.9/lib/python2.7/zipfile.py\", line 811, in _RealGetContents\n    raise BadZipfile, \"File is not a zip file\"\nzipfile.BadZipfile: File is not a zip file\n. ",
    "marchoeppner": "GNU Wget 1.12 built on linux-gnu.\ncurl 7.15.3 (x86_64-unknown-linux-gnu) libcurl/7.15.3 OpenSSL/0.9.8w\n. ",
    "jfonte": "@yyuu Thx. Your suggestion fixed it on my box!\n. ",
    "huangziwei": "I encountered the same problem, and this post solved it: pyenv \u3067 BUILD FAILED\n. ",
    "shakib609": "I was facing the same issue on my ubuntu machine.\nThen I just uninstalled curl and pyenv started to behave correctly again.\nAfter installing python reinstalled curl.\nBut definitely need a permanent fix!\n. ",
    "jbrudvik": "The image that Travis serves through the .svg url looks much clearer than what is served through the .png link \u2014 especially on high-resolution displays.\nHere's Travis's announcement of the .svg url and explanation (including comparison images):\nhttp://blog.travis-ci.com/2014-03-20-build-status-badges-support-svg/\n. ",
    "find456789": "qqqq@ubuntu:~/Desktop$ ping yyuu.github.io\nPING github.map.fastly.net (103.245.222.133) 56(84) bytes of data.\n64 bytes from 103.245.222.133: icmp_req=1 ttl=128 time=119 ms\n64 bytes from 103.245.222.133: icmp_req=2 ttl=128 time=70.2 ms\n64 bytes from 103.245.222.133: icmp_req=4 ttl=128 time=136 ms\n64 bytes from 103.245.222.133: icmp_req=5 ttl=128 time=116 ms\n64 bytes from 103.245.222.133: icmp_req=6 ttl=128 time=117 ms\n64 bytes from 103.245.222.133: icmp_req=7 ttl=128 time=72.6 ms\n64 bytes from 103.245.222.133: icmp_req=8 ttl=128 time=114 ms\n64 bytes from 103.245.222.133: icmp_req=9 ttl=128 time=71.6 ms\n64 bytes from 103.245.222.133: icmp_req=10 ttl=128 time=121 ms\n. I waited for a long time\uff0c Don't download success\uff0cCan I use the browser to download successful\n. ",
    "Toilal": ":+1: Great ! Thanks. \nSo is this planned as a new plugin, or not ?\n. Ok no problem, i'll try to create a new plugin :) thanks for the code, it really helps as i never write anything in bash !\n. ",
    "Ivoz": "Straight why can't the python2.6 just run the existing python 2.6.9 at ~/.pyenv/versions/2.6.9/bin/python2.6 ?\nOr be able to specify a default particular version to link a shim to?\n. @jgosmann you can try activating all your pythons at once.\npyenv global 2.6.9 2.7.10 3.2.6 3.3.6 3.4.3\nor as many as you'd like. at least then python2.6 responds as a proper python.\n. That problem is CMake is literally just looking for the very first python it can find; rather than the \"best\" python it can find.\nWhat I've tended to do is just reconstruct my $PATH for the shell session I'm running CMAKE in, so it finds exactly the python I want it to.\n. pip 1.5.6 -> 6.0 dropped support for python 3.1.\n. ",
    "jgosmann": "I'm getting the same problem when running tox. There might be even more programs trying to parse the version and expecting a specific output.\n. I have no control over the CMake issue and can't influence which command is run for the version detection. But I would assume that it runs pythonX.Y --version but gets confused by the output\n```\npyenv: python2.6: command not found\nThe `python2.6' command exists in these Python versions:\n  2.6.9\n```\nwhich is not the usual format. The availability of the pythonX.Y command seems to be tested prior and does not seem to rely on the return code.\nRegarding the tox issue: In this case tox is configured to have a py26 environment, but I was invoking tox -e py27 and it still failed because of the deactivated py26 shim.\n. Yes, that's a workaround. But it took me quite some time to figure out the problem in the first place.\n. ",
    "mecp": "I face the same issue. even after doing pyenv global 3.3.0, cmake still finds system default 2.7.10\n. ",
    "derwolfe": "I've updated the PR to apply this message to all shells.\n. @blueyed - I just wanted to check in. Is there anything I am missing that is blocking this from being merged in?\nThanks!\n. Great - Thanks!\n. ",
    "bmcorser": "Ah, I searched issues for \"source\", didn't look into open PRs. I'll see if I can help\n. I'm seeing something similar (trying to build YouCompleteMe) on OSX ...\n```\n$ which python\n/Users/ben/.pyenv/versions/virtualenv-xyz/bin/python\n$ python --version\nPython 2.7.8\n$ python-config\npyenv: python-config: command not found\nThe python-config' command exists in these Python versions:\n  2.7.8\n```\n. This seemed to be related to my having a3-series Python in myglobal`:\n$ pyenv global\n3.4.2\n3.3.6\n2.7.8\n$ pyenv global 2.7.8\n$ pyenv global\n2.7.8\nOpen a new shell:\n$ python-config\nUsage: /Users/ben/.pyenv/versions/2.7.8/bin/python-config [--prefix|--exec-prefix|--includes|--libs|--cfla\ngs|--ldflags|--help]\nHowever if I activate my vitrualenv:\n$ pyenv activate virtualenv-xyz\n(virtualenv-xyz) $ python-config\npyenv: python-config: command not found\n...\n. @yyuu :+1:\n. One more google away suggests this could be related to how I am installing psycopg2 (I used pip install pyscopg2)\n. Ah -- I think this is actually a known psycopg2 issue, since Pip installs from wheels (pre-compiled packages, AFAIK) so the error makes a little more sense. If I install from sauce, things seem OK:\n$ pip uninstall psycopg2\n$ git clone https://github.com/psycopg/psycopg2\n$ cd psycopg2\n$ python setup.py build\n$ python setup.py install\n$ python -c 'from psycopg2.extras import NumericRange'\n$ echo $?\n0\n. ",
    "jiafanzhou": "Is this problem unique to me?\n. Hi yyuu, thanks for your reply. Any idea how to use the pyenv-built to build the rpm package?\n. Sorry, but my system python is 2.7.6, I am trying to use 2.6.6\n. ",
    "BengtOFFIS": "Thanks for commenting on this. I am glad you like the idea. Sorry, I fear I can not do this myself. I tried but failed to modify the install scripts to download the portable PyPy. If someone wants to give this a shot, there is a list of all versions of this portable PyPy distribution on BitBucket.\n. Oh, yes, I must have left this tab open. I will have a look at your PR.\n. This adds support for pypy2-2.3.1, pypy2-2.4.0, pypy3-2.3.1 and pypy3-2.4.0, which is already worth pulling. However the current PyPy2 release is 2.5.0 so that version would be most useful to have. Also why not support all past versions of this portable pypy distibution?\nShould the portable pypy have its own namespace? That would actually not solve the issue I reported in #326. Perhaps the Ubuntu-specific pypy should move to its own namespace, too. So pyenv would install PyPy from source by default, which should always work. If possible, use the precompiled variants.\nI already tested the portable distribution under Fedora. I checked out your branch and all versions downloaded and installed as expected. I had to install virtualenvwrapper manually, to avoid error messages when opening a new terminal.\n. ",
    "olliewalsh": "\nIf someone wants to give this a shot\n\n@BengtOFFIS did you miss the pull request I opened a few hours ago?\n. > Also why not support all past versions of this portable pypy distibution?\nBeen months since I looked at this but IIRC the older portable pypy packages did not create the pypy symlink so they would not work with pyenv - this could be fixed up after install I suppose.\n. Closing this PR as it's superceded by \nhttps://github.com/yyuu/pyenv/commit/292813eca39d3dd18fde2e6c3040071607b25e51\n. ",
    "LanceVan": "I met same problem while building CPython 3.5.0, my OS is OS X 10.11 El Captain.\nAccording to issue 263, it seems solved after I run following command in terminal:\nxcode-select --install\n. ",
    "AliTajeldin": "Ran into same issue as original poster.  The solution was to use CPPFLAGS instead of CFLAGS.  The rest of the command was the same as in the original post.. ",
    "joshfriend": "This has to have been the quickest merge of a PR ever :speedboat: \nYou even beat the Travis build...\n. Closing since jython-2.7.0 is at a final release version and the betas have been removed. (see #370)\n. @BanzaiMan I believe I fixed this issue in #347. The URL your version of pyenv is downloading matches the old version of what was changed in the PR. \n. looks like the pip installation step wont be required anymore: http://bugs.jython.org/issue2349\n. Also added a quick check to see if windows/osx users have JAVA_HOME set as a result of the discussion here.\n. @dstufft: v20150504\n. @alex ICYMI: v20150601\n. also adding pypy 2.5.1 portable while i'm at it...\n. > WARNING still a very hacky proof of concept. Does not work with Python 3 at all yet and in Python 2 only with the use of the --egg parameter.\nhttps://github.com/yyuu/pyenv-installer#pypi-way\n. Wow, lots of cool stuff in this update! https://www.python.org/downloads/release/python-350b3/\n. Can you list the packages you are trying to install? Perhaps one of these is trying to write to a src/ folder.\n. Another thought: Why check out the whole history (which is very large), when you could install tip.tar.bz2 instead?\n. I was waiting on squeaky-pl/portable-pypy#17 so that these TODOs could be resolved.\nIf you'd like a new tag sooner, I'm sure that wouldn't be a problem :)\n. @dstufft:\n- https://github.com/yyuu/pyenv/releases/tag/v20150901\n- Homebrew/homebrew#43478\n. Thats my bad, sorry about that!\n. Tested the linux64 and OSX versions :+1: \n. > I don't like it. Use SO. It's 2015.\nI don't like them either. If anything it should be Gitter\n. What a fun date for a release!\n. Zlib not being found on mojave is a separate issue: #1219. see #1219. Ooo! Shiny!\n. @thomasjo you also have to remember to remove the lines from your shell environment config that set $PYENV_ROOT and append it to your $PATH:\nbash\nexport PYENV_ROOT=\"$HOME/.pyenv\"\nexport PATH=\"$PYENV_ROOT/bin:$PATH\"\nif which pyenv > /dev/null; then eval \"$(pyenv init -)\"; fi\n. Quick google search yielded this python bug filed against 2.7.3.\nI was able to install 2.7.3 successfully just now on 10.11.1.\n. It looks like the python make install process only tries to touch things in /Applications if --enable-framework is passed to ./configure. pyenv doesn't use this flag unless you pass it through PYENV_CONFIGURE_OPTS. The --enable-framework is able to take a path where you would like the framework installed, so maybe try specifying one that isn't /Applications?. > help yourself\nsavage...\n\n. https://github.com/yyuu/pyenv/wiki/Common-build-problems\n. Zlib not being found on mojave is a separate issue: #1219. @chrisspen It is still fixed. As I commented on #738, part of your test configuration is trying to install a version of pip which is too new.\n. $ pyenv install 2.7-dev\n. v20160310 coming to homebrew in homebrew/homebrew#50001\n. yikes, i should bump up my font size i guess... :disappointed: \n. I think you also need to set:\nshell\nexport PYTHON_BUILD_CACHE_PATH=\"$PYENV_ROOT/cache\"\n. Did you look at what files had these line endings? I ran that command and all the files it found were from inside the lib/ directories of the installed python versions.\nAre you on windows? If so, make sure that core.autocrlf is not true. Otherwise, git will make the line endings DOS on checkout.\n. Read this section in the README:\n\nYou can activate multiple versions at the same time, including multiple versions of Python2 or Python3 simultaneously.\n. This won't work even with a symlink. If you read the heroku page you linked you will notice that the names of the versions of python are different between heroku and pyenv.\n- pyenv: 2.7.11\n- heroku: python-2.7.11\n. The comments on #257 should help you out, namely this one.\n. Fun fact: If you build it from source, you get to watch it draw fractals while you wait forever for it to compile:\n\n\n. @alex v20160422\n. This is not related to pyenv. The sh-activate command is part of the pyenv-virtualenv plugin. Read the setup instructions for the plugin and verify that you have installed it correctly. If you continue to have issues, raise an issue on pyenv-virtualenv.\n. #502, #580, #588\nPlease remember to search the issues list first :)\n. Already fixed by fb75705\n. Wow this makes the time to run tests unbearably long \ud83d\ude09 \n\n. Its interesting that the post you linked does not list PPC arch as being supported by this release, but they have download links (which 404) for those on the downloads page.\n. Still working on how to support the new s390x architecture. I think I have most of it figured out, but /etc/issue on RHEL 7 just contains garbage:\n\\S\nKernel \\r on an \\m\nActual release info is in /etc/redhat-release:\nRed Hat Enterprise Linux Server release 7.2 (Maipo)\n. Here's what I had found:\nhttps://twitter.com/mattgillard/status/481387591099375616\nzlinux proc]$ uname -a\nLinux zlinux 2.6.18-371.el5 #1 SMP Thu Sep 5 21:23:53 EDT 2013 s390x s390x s390x GNU/Linux\nso, you can probably just check if uname -m is s390x...\n. Closing since there seems to be not much interest in this. wow, already?\n. https://github.com/yyuu/pyenv/issues/332#issuecomment-81199008\n. > patch: command not found\nThats the key. You need to have patch installed and available somewhere in $PATH\n. It's worth noting that ftpmirror.gnu.org redirects you to a mirror that does not use HTTPS even if you access ftpmirror.gnu.org using HTTPS.\nAre you sure you covered everything? I scanned the file list quickly and noticed a few things like stackless and pypy were missing.\n. If you install aria2c, pyenv will use that instead of curl which should show a download progress indicator.\nsee: #534 #539 \n. Are you using XCode 8 build tools?\n\nWow does XCode 8 ever break the universe in buidling Python.  Slow clap.\n\nhttps://twitter.com/dabeaz/status/778250809603715076\n. Hmm, I have been using XCode 8 build tools with OSX 10.11.6 now, which is working fine. I haven't had the time (or courage \ud83d\ude09) to install 10.12 yet \n. Checksums look correct :+1:\n. pip 8.x and up does not support python 3.2. It also says so in the error message you pasted above:\nUserWarning: Support for Python 3.0-3.2 has been dropped. Future versions will fail here.\nYou will need to do some configuring to Tox so that it stops trying to install an incompatible version of pip.\n. TFW opening a github issue makes you immediately realize a solution to your problem...\n. Please see the wiki.\n. Closing since the issue was with a plugin and not pyenv itself. Please update if you figure out which plugin caused the issue.\n. There is no non-alpha/release build of pypy3.3-5.5.0. There is a release-pypy3.3-5.5.0 tag on the source repo. No idea what's up with that, but I'll try to find out.\n. Did you install pyenv from pip? That version is extremely old. See also #387\n. Read the wiki\nYour pyenv version is also fairly old, you should update.. I was just able to install 2.6.6 on OSX with no issues (see also #552).\nI'd suggest raising the issue on Pip's tracker, but they will probably tell you to get a newer version of python (pypa/pip#3157). Thanks!. https://github.com/yyuu/pyenv/issues/387#issuecomment-261269695. Thats not true, if python 3.5.2 is your active python version, the python, python3, and python3.5 can all be used to invoke it.. Thanks!. I'll make a homebrew PR. #787 . Running micropython on x86/x64 systems is actually possible.. You may not have finished setup completely. pyenv does what you are describing already with its shims directory. You do have to make sure that this is set up correctly though.\nIf you installed from homebrew, it is easy to miss these instructions (which print out to the \"caveats\" section after the install finishes)\n. no, you should use the output of pyenv root to build the $PATH, e.g.\n```bash\nexport PATH=\"$(pyenv root)/bin:$PATH\"\nAlso very important:\nif which pyenv > /dev/null; then eval \"$(pyenv init -)\"; fi\n``. Closing since both of these versions seem to be present now. The release of CPython 3.6.1 seems like a good enough reason to do a release now, even with a PyPy release (possibly?) pending. I can try to do it tonight.. @Samureus thanks, I got tied up yesterday :+1:. Thanks. Homebrew's decision is unfortunate and they aren't interested in talking about it, so I hope this helps!. Thanks!. Awesome, thank you!. Please take a look through the list of [resolved issues that answer this exact question](https://github.com/pyenv/pyenv/search?utf8=\u2713&q=no+such+command%3A+shell&type=Issues). You probably have not completed the required setup since [Homebrew no longer indicates additional steps are required](https://github.com/Homebrew/homebrew-core/pull/11209#issuecomment-288120297). I just removed the3.2-devand3.3-dev` targets since those branches have reached EOL (37299c88511158983ceae7c819cfa75855f09119), as well as some very old pypy-dev branches (734c341c468e531c16902534dde237288fc21a2b).\n\nOr what to do with CPython 2.1.3 - 2.6.9? Does anybody use any of these?\n\nI would like to talk about these too, I see people keep trying to install extremely old pythons (#910 for example). I think it would be totally ok to remove all pythons pre-2.6.x. (I think people absolutely do still use 2.6.x \u2639\ufe0f). There are also versions like 2.7 which a person might assume installs the latest version of the 2.7.x branch, but really it installs a version from 2010. I believe that all 3.x branches pre-3.4 are also EOL now. It may be a good idea to keep the last release from those branches around though (3.3.6, 3.2.6, and 2.6.9 for example?) \n\nPyPy and Miniconda/Anaconda that update very often\n\nYes, it feels like these multiply at an exponential rate \ud83d\ude1d .. I wonder if there could be an \"archived versions\" plugin that the old versions would move to?. Updating Homebrew automatically with such a process is a very bad idea. Things can (and will, as seen above) break unexpectedly or in annoying ways. Unfortunately, I don't know yet how to preserve installed python versions during brew upgrade pyenv. I usually recommend installing pyenv via git clone\n anyways.. You can already install pyenv with homebrew. There is also already an automatic installer. How sure are you that the 3.6-dev branch produces an executable successfully? It is a development branch after all...\n@yyuu @blueyed I feel that we should just remove the *-dev options from pyenv. People probably only install them by accident since 3.6-dev is the first thing that tab completes from pyenv install 3.6. They also just clutter an already lengthy list of available pythons to install.. > Why isn't there a 3.6.0 and 3.6.1 option?\nThose options definitely exist, is pyenv up to date?. @Gr1N is there a reason you can't just use master?. Why are you trying to use a python version that is 11 years old?. Closing since I would agree with the assessment made by @xsteadfastx. You also should not:\n\nexpect versions of python that old to compile with the newest versions of openssl\nuse versions of python that are that ancient if you can at all help it. For anyone that comes across this in the future, patch: command not found mean's you need the patch utility installed. Also, please stop using python 2.6.x, it's beyond dead at this point :P. https://github.com/pyenv/pyenv/issues/875#issuecomment-288855328. > IIRC they are based on the release tarball names?!\n\nI believe thats correct (or thats how i name them anyways)\n\nAliases (symlinks?) seem to be a nice way to keep the old names.\n\nWe already have tons of installable pythons, including numerous existing aliases (pypy vs pypy2). It would be very nice to have zero aliases, though I can understand the need for compatibility :). Looks like the PyPy team named the latest minor version update 5.8.0 (even in the tar files) \ud83d\udc4d . @Samureus that sounds right, pypy3.5 is the only one that is beta though, just to clarify. Sometimes I wonder if we actually need separate build definitions for the portable PyPy versions, they get used automatically if the official linux binaries aren't supported. . Thank you! \ud83c\udf89 . See the README for how to activate multiple versions of python at once.\nYou can use a mix of system python and pyenv pythons with this method:\n$ pyenv global system 3.6.2\nThis will set pyenv to use system python when you run python and pyenv's python3 when you run python3:\n```\n$ python\nPython 2.7.10 (default, Feb  7 2017, 00:08:15)\n[GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.34)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n\n\nimport ssl\nssl.OPENSSL_VERSION\n'OpenSSL 0.9.8zh 14 Jan 2016'\n$ python3\nPython 3.6.2 (default, Jul 17 2017, 09:07:10)\n[GCC 4.2.1 Compatible Apple LLVM 8.1.0 (clang-802.0.42)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\nimport ssl\nssl.OPENSSL_VERSION\n'OpenSSL 1.0.2k  26 Jan 2017'\n```\n\n\n\nThat said, you should just use pyenv for both versions. Your system probably has an older version of python2 installed by default (I have 2.7.10 in macOS Sierra) that is probably also compiled against an older version of OpenSSL (see above). It is basically zero work to install a version of python2 if you already have pyenv working.\nAlso note that depending on how your system python is set up, you might not have a python2 shim (I don't have one when i use system python on macOS).. I wonder if it's because the files got checked out with windows line endings (CRLF - \\r\\n) instead of unix line endings (LF  -\\n). Nice first contribution, Thanks a lot!. Why wouldn't something like this work?\nsh\ngit describe --tags $(git rev-list --tags --max-count=1). Also, the only real usefulness that I see for tags in this project is to track what is currently released on Homebrew. You should just treat master as latest, as @yyuu was suggesting.. pipenv can use pyenv to install the specified python version in the Pipfile. Thanks, I updated the link in my comment. This might be it:\nhttps://github.com/fisherman/pyenv/blob/51a283d589e3e54207003da17671bd2988ffe3fa/conf.d/pyenv.fish#L15-L16\nNotice set -x is used there and is what @kennethreitz was seeing, but pyenv-init did set -gx. Also, it comes from a file called conf.d/pyenv.fish which matches the above fisherman plugin.. Thank you!. I would recommend installing PyPy from the binary versions if possible. Compiling it yourself takes FOREVER.. @fny thats a pretty good idea.\nThey are on bintray here, but we currently do not have a method of using them. We currently only use the official pypy binaries (which are linux64 only for pypy3.5, at least while in beta), or the (unofficial, and linux only) portable pypy binaries. Which version of Python 2.7 did you install?. Yeah thats 2.7(.0), try installing a ancient version of 2.7.x, such as 2.7.14. I'd bet that 2.7(.0) has issues with the config that make it build a 32bit version instead of 64bit.. Nice! I'll bump a version and get it on Homebrew momentarily.... I think running xcode-select --install will fix your problem. If not, please do a search on the issues list for your error message. The one you have posted here is quite common and could be solved by browsing the wiki or the previously closed issues.. Sorry about that :(. The .pyenv-shim file is generated to prevent multiple processes from running pyenv rehash simultaneously. You can manually remove this file and try to run rehash manually and see if that helps.\nA couple of additional notes (probably unrelated):\n\nshims are not generated down to the patch version of python, e.g. you get python, python2 and python2.7, but not python2.7.8\nThe security content of the update to 2.7.9 is very substantial, you should use that one if you can, or even the latest (2.7.14).\n. Works on macOS Sierra too. I got the anaconda2 installs working on macOS with 737fa7c. I still have trouble with anaconda3 \"too many open files\" error, but I quadruple-checked all the sha256 sums so it should at least try to install. I'll continue investigating, but I just merged anyways so it doesn't hold anyone up from using the other versions/platforms.. @yyuu looks like a BUNCH of the verify_pyXX checks were wrong in recent minicondas (8aa1db20506916b11408b44d7eb89ed72572ccf6), however, they install and run just fine. Does this check actually work at all?. worked fine for me, and didn't take very long to clone the repo. Interesting observation, thanks!\n\nI think we usually fix these things by merging the upstream changes from rbenv. When was the last time that happened, @yyuu?. You probably did not remember to add the required pyenv init to your shell config.\nhttps://github.com/pyenv/pyenv#homebrew-on-mac-os-x\nHomebrew no longer prompts you to do this after installing, because reasons \ud83d\ude15 . on mac, i use:\nsh\n$ shasum -a 256 Python*\n3432d3ddf97483339badda961f7d0564595460fee166dd8f106dc4201e68446e  Python-3.7.0a3.tar.xz\nef75398e6f978a4ead005b11d988ab2d871cf24afa4bdeef97fe09b506a76736  Python-3.7.0a3.tgz\nalso, 3.7.0a3 is added in 364fa7f. Thank you! \ud83c\udf89 . duplicate of #1058. https://github.com/pyenv/pyenv#choosing-the-python-version. Tagged b704c4242cc7370ddc6266b019caaaf53ab0dfcd\nHomebrew/homebrew-core#22702\nsorry for the wait. pyenv isn't a tool for creating virtualenvs, it just installs python versions. Intel's python distribution is anaconda based, so regular conda create commands should work as you would expect.. I ran into this myself with pypy3.5-5.10.0 (macOS 10.13.3 High Sierra) and brew installing those packages didn't really help. I did find that installilng pypy3.5.-5.10.1 works just fine, so I didn't bother looking into it further.. I think you are looking for pyenv-virtualenv. pyenv by itself does not have anything to do with creation or management of virtualenvs.. Yes, it seems like you have (or had at one time) pyenv installed in your home folder and installed with homebrew. The homebrew one is probably before the one in your $HOME folder in your $PATH, so the pythons you have installed in ~/.pyenv/versions wont ever be used.. there is a blacklist of anaconda executables that should not be turned into shims. Occasionally, anaconda adds more executables to it's bin/ which we have to filter out.. There's some small explanation in conda.bash.\nWe'd welcome a PR to expand on that and also to add whatever shims are causing your environment issues to the blacklist.. Thanks!. Sorry for not seeing this sooner \ud83d\ude31 \nI'll add that it's probably a good idea since @BanzaiMan works for Travis-CI and they use pyenv quite a lot in their build environments.. duplicate of https://github.com/pypa/pipenv/issues/1489. Duplicate of #521\nTry running xcode-select --install, using google seems to indicate that it could be a problem with your build environment. Can you verify that you have added the PYENV_ROOT and pyenv init shell configuration to the correct profile for the shell you are using? See step 2 here. Depending on your OS and shell, you might need to put it somewhere other than ~/.bash_profile. Please make sure you have followed all of the installation instructions when installing via homebrew. Most people forget the step of adding pyenv init to their shell. you've set the local python to python2 so there is no python3 available\nhttps://github.com/pyenv/pyenv#choosing-the-python-version. Given all the ways that you could install the required components (from homebrew, source, etc) and the various locations that those dependencies could be installed to, I think it would be very impractical to try to have pyenv decide how and where to install things like OpenSSL, zlib, etc.. > chose to disable issue tracking (thus removing my access to the issue I had filed)\nTo be honest, I think that was a bit ridiculous. Instead of turning off issues completely, it seems better to me to just \"unwatch\" the repo if you don't plan on actively supporting it. That way other users can still help each other and see if anyone else has a problem or potential way to solve it.. I think having issue templates (especially in the main pyenv) repo would be very helpful. This template could include:\n\nLink to the common build problems wiki\nReminder for homebrew users to add the init to their shell\nReminder to search closed issues\nRequest for info about os/python version/pyenv version/etc since most people leave that out\nRequest for a verbose build output via PYENV_DEBUG\nLinks to the Gitter.im chatroom\nLinks to StackOverflow questions tagged with pyenv\n\n\nWe have Gitter room and people can use some external site (e.g. StackOverflow, Twitter, etc.) to help each other.\n\nPersonally, I still prefer github issues to both of those options, but I do think they have value, so they should at least be linked in the README. Thats probably why there has been no activity in gitter since march 4th.\n\n\u201cNot watching\u201d doesn\u2019t work for me since I was still willing to receive some pull requests to these projects. (Plus, people tends to unnecessarily mention my name in their issue\n\nThats fair \ud83d\ude06 \n\nThere are too many people reporting and 104 opened issues as of Mar 14 2018. Those issues are nearly neglected since no one is motivated or incentivized to close these issues.\n\nMight be worth seeing if we know anyone who would be willing to join the pyenv org and triage out some of the simple issues and duplicates?. I've built 3.7.0b2 and 3.7-dev probably 5 times now and no matter what I try, I don't get the \"ssl extension was not compiled\" errors. However, your change doesn't break the builds and it makes sense to do this so \ud83d\udc4d . If your system python does not have a pip3 command, pyenv will not automatically make one for you. virtualenv is probably creating that one for you. Try just using pip instead. nice, thank you!. 1. You installed pip into your system python (/Library/Python)\n2. Pyenv automatically installs pip for you so this should be unnecessary\n3. The exception to the above is system python. In this case, all pythons since 2.7.9 have the ensurepip module, which you can use to get Pip instead of the get-pip.py script\n4. You probably didn't finish setting up pyenv. Please read through the installation steps. Like many other people, you probably are missing the step of adding pyenv init to your shell. seems like that is intentional #625. If aria2 allows it's config file to override the -o command line flag, what else can we do?\naria2 offers features that wget and curl don't which is why it is the default if installed (#534). I like the PYTHON_BUILD_HTTP_CLIENT idea :+1:, but maybe name it PYENV_HTTP_CLIENT?. Now that pypa/get-pip#17 seems to be resolved I think someone could actually start working on fixing this.. > For intrinsic fix, for non-CPython distributions, it's actually not easy to know if the Python compatibility version is 2.6/3.2 or not, prior to the installation of the version.\n@yyuu in the probably rare case that this becomes an issue, isnt it possible to just set GET_PIP_URL in the build definition, or even better, PIP_COMPATIBILITY_VERSION=2.6 or something similar? Since the ensurepip step happens after compiling python, perhaps python-build could inspect sys.version_info to determine this.. Don't worry about it, I'm not a 2.6.x user \ud83d\ude09 . whoops, my bad, thank you!. This fix worked out just fine when I tested by installing 2.6.9 :+1:. pyenv builds CPython from source and does not use the pkg installers. I think if you need a 32 bit compatible version, you need to pass some flags to the ./configure script. 64 bit seems to be the default if supported, if I run python -c \"import struct; print(8*struct.calcsize('P'))\" in any pyenv built python on my 10.13 mac, it prints 64.. Thanks @pradyunsg \n\nin this world nothing can be said to be certain, except death, taxes and Debian packaging nonsense. please read the wiki. when you run pyenv version is the system python the active one? if so, you get the \"command not found\" error because the system python (on OSX at least) doesn't provide a python2 executable, so pyenv wont generate a shim for it.. @amosbird yes, see the README. It is likely because 3.0.1 was released 10 years ago and doesn't work with new versions of openssl\n\nhttps://github.com/pyenv/pyenv/issues/910#issuecomment-340262824. When you say \"i have failed to install Python 3.6.x\", do you mean that you are unable to install any variant of 3.6? Does the newest release (3.6.5) work?. Thank you!. python 3.7.0 is not going to be the only version of 3.7.x. The wiki suggests installing libffi on linux, but it was only mentioned under the CentOS/Fedora section. I added it to the list of packages to install on Ubuntu as well. If something is sill missing, please edit the wiki to include it. @dgspahn just so you know, your reply included your phone number, which I edited out just to be safe. Probably has something to do with replying to the issue via email and your mail client tacked it on. . Please follow the steps in the template when reporting an issue.. Should be landing in homebrew soon (https://github.com/Homebrew/homebrew-core/pull/31025). Thanks for pointing out that it was missing!. I could see this being a plugin for pyenv, but not part of the core. Pyenv core is just for getting python installed, then the official and 3rd party plugins (e.g. pyenv-virtualenv) add support for related tools. \nDependency management is a huge can of worms that I don't think the core functionality of pyenv should open \ud83d\ude09. For example, how are the packages installed? With pip? with Pipenv? or perhaps poetry?. Please see my recent reply to a similar feature request here: https://github.com/pyenv/pyenv/issues/1205#issuecomment-415155742. Please check that you've done step 3 of the install mentioned in the README: \"Add pyenv init to your shell\". I just upgraded to Mojave and had the same problem. The commandline tools headers package fixed it, but it feels like a hack. I've added this to the suggested build environment and common build problems wiki pages for now until a better solution is found. @ssbarnea you are always welcome to edit the wiki if you think it is incorrect.. I don't have lots of time right now, so a pull request adding CFLAGS=\"-I$(xcrun --show-sdk-path)/usr/include\" on macOS would be much appreciated.. >should I add it to the bash_profile?\nNo because homebrew puts pyenv's bin in the rest of the homebrew stuff that's already in your $PATH. . Can you please add your solution to the suggested build environment wiki?. That's great, thank you \ud83d\ude04 . Try activating both a python2 and 3 at the same time:\npyenv global 2.7.15 3.7.1. @rafenden there's an entire section about it in the README. https://github.com/Homebrew/homebrew-core/pull/33515. This is not a problem with pyenv, but rather with your system or install of Git. Try googling \"git segmentation fault\" and trying some of the suggestions there. I'd recommend deleting the checkout and re-cloning pyenv. I'm confused, if you want to configure pyenv to not do anything, why are you using it?. The hashes are SHA256. MD5 is now considered \"insecure\" because of how easy it is to intentionally generate hash collisions. You will see SHA256 (or sometimes even stronger) used by many tools such as NPM/Yarn/Pipenv.\nNot all pythons have the SHA256 listed on the downloads page, so we have to compute it manually:\nsh\nshasum -a 256 ./path/to/file(s)\nWhomever reviews PRs for new pythons should be downloading the files themselves and verifying the checksums if they are not available from the authors of the python distribution. Done: 3f39e8a944943b17dc8cba473d160aabc7f76796\nhttps://github.com/Homebrew/homebrew-core/pull/35876. I googled your error message and the results suggest that your xcode command line tools is old or broken and you should try reinstalling it.. Please provide an actionable description of the problem you are having. I really want to get this fixed, so I will try to find some time to test it since I am a full time macOS user.\nI just need to figure out how to undo the installation of the sdk to the legacy location that I did previously:\nsudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target /. why was it necessary to relocate nearly 600 files?. Please follow the issue template and provide the items requested. 2.7.9 supposedly has ensurepip backported, should having ensurepip here still be neccesary? pip isn't in the bin/ directory if left out.\n. yup, sure is... thanks\n. The jython installer was always throwing an exception:\nGenerating start scripts ...\nInstalling pip and setuptools\njava.io.IOException: Cannot run program \"jython-2.7.0/bin/jython\" (in directory \"jython-2.7.0/bin\"): error=20, Not a directory\nCalling $PYTHON_BIN -m ensurepip was basically to emulate whatever the jython installer tried and failed to do.\n. Jim Baker from the jython team informed me that the jython installer jar should be run with the absolute path to the jar and destination directory. Fixed in e285f2e\n. This one is quite unfortunate :p\n. You can make the \"Basic GitHub Checkout\" into a link to the appropriate section: https://github.com/pyenv/pyenv#basic-github-checkout. rbenv has a much more detailed \"Command Reference\" section. Since pyenv is so similar, it could match this a lot more closely.. Welcome, and thanks for contributing! I'm trying to verify that this is the correct env var to set by looking through the conda docs and I don't see it anywhere. Googling it doesn't return much except this comment on a conda issue which indicates that the env var is called CONDA_AUTO_UPDATE_CONDA.. why does this have to be different from fetching a branch? both branches and tags are just refs to specific commits and you should be able to get either one with the same command.. they have distributions for macOS, x86 linux and windows as well. How does this sound?\nsh\nSetting PIP_VERSION=${PIP_VERSION} is no longer supported and may cause failures during the install process.. ",
    "xZise": "It wasn't intended as a big report but as a feature request/suggestion.\n. ",
    "iamake": "Hi @yyuu \nI have the same problem here, too. This is the output of the command you want:\n```\nake-mbpr:shims ake$ pyenv prefix\n/Users/ake/.pyenv/versions/2.7.9\nake-mbpr:shims ake$ pyenv prefix system\npyenv: version `system' not installed\nake-mbpr:shims ake$ pyenv versions\n  system\n* 2.7.9 (set by /Users/ake/.pyenv/version)\nake-mbpr:shims ake$ pyenv global system\npyenv: version `system' not installed\n```\n. Somehow it just works now. Will look into detail if I can reproduce the problem later and share it here.\n. ",
    "0x414A": "I suspect this is due to what your $PATH is set to; I ran into this issue myself and found there were issues with my $PATH. I think what happens is that pyenv which attempts to look for python in whatever is first in your $PATH.\nFor me, that was /usr/sbin.\nOutput of PYENV_DEBUG=1 pyenv prefix system shows this to be the case:\n\u276f PYENV_DEBUG=1 pyenv prefix system \n+ [pyenv:15] enable -f /home/aj/.pyenv/bin/../libexec/pyenv-realpath.dylib realpath\n+ [pyenv:21] '[' -n '' ']'\n++ [pyenv:25] type -p greadlink readlink\n++ [pyenv:25] head -1\n+ [pyenv:25] READLINK=/usr/sbin/readlink\n+ [pyenv:26] '[' -z /usr/sbin/readlink ']'\n+ [pyenv:50] '[' -z /home/aj/.pyenv ']'\n+ [pyenv:53] PYENV_ROOT=/home/aj/.pyenv\n+ [pyenv:55] export PYENV_ROOT\n+ [pyenv:57] '[' -z '' ']'\n++ [pyenv:58] pwd\n+ [pyenv:58] PYENV_DIR=/home/aj/Code/yt\n+ [pyenv:67] export PYENV_DIR\n+ [pyenv:70] shopt -s nullglob\n++ [pyenv:72] abs_dirname /home/aj/.pyenv/bin/pyenv\n+++ [pyenv:36] pwd\n++ [pyenv:36] local cwd=/home/aj/Code/yt\n++ [pyenv:37] local path=/home/aj/.pyenv/bin/pyenv\n++ [pyenv:39] '[' -n /home/aj/.pyenv/bin/pyenv ']'\n++ [pyenv:40] cd /home/aj/.pyenv/bin\n++ [pyenv:41] local name=pyenv\n+++ [pyenv:42] resolve_link pyenv\n+++ [pyenv:32] /usr/sbin/readlink pyenv\n++ [pyenv:42] path=../libexec/pyenv\n++ [pyenv:39] '[' -n ../libexec/pyenv ']'\n++ [pyenv:40] cd ../libexec\n++ [pyenv:41] local name=pyenv\n+++ [pyenv:42] resolve_link pyenv\n+++ [pyenv:32] /usr/sbin/readlink pyenv\n+++ [pyenv:42] true\n++ [pyenv:42] path=\n++ [pyenv:39] '[' -n '' ']'\n++ [pyenv:45] pwd\n++ [pyenv:46] cd /home/aj/Code/yt\n+ [pyenv:72] bin_path=/home/aj/.pyenv/libexec\n+ [pyenv:73] for plugin_bin in '\"${PYENV_ROOT}/plugins/\"*/bin'\n+ [pyenv:74] PATH=/home/aj/.pyenv/plugins/python-build/bin:/home/aj/.pyenv/shims:/home/aj/.pyenv/bin:/usr/sbin:/home/aj/.rbenv/shims:/home/aj/.rbenv/bin:/home/aj/.cask/bin:/usr/local/sbin:/usr/local/bin:/usr/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl\n+ [pyenv:76] export PATH=/home/aj/.pyenv/libexec:/home/aj/.pyenv/plugins/python-build/bin:/home/aj/.pyenv/shims:/home/aj/.pyenv/bin:/usr/sbin:/home/aj/.rbenv/shims:/home/aj/.rbenv/bin:/home/aj/.cask/bin:/usr/local/sbin:/usr/local/bin:/usr/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl\n+ [pyenv:76] PATH=/home/aj/.pyenv/libexec:/home/aj/.pyenv/plugins/python-build/bin:/home/aj/.pyenv/shims:/home/aj/.pyenv/bin:/usr/sbin:/home/aj/.rbenv/shims:/home/aj/.rbenv/bin:/home/aj/.cask/bin:/usr/local/sbin:/usr/local/bin:/usr/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl\n+ [pyenv:78] PYENV_HOOK_PATH=:/home/aj/.pyenv/pyenv.d\n+ [pyenv:79] '[' /home/aj/.pyenv '!=' /home/aj/.pyenv ']'\n+ [pyenv:83] PYENV_HOOK_PATH=:/home/aj/.pyenv/pyenv.d:/usr/local/etc/pyenv.d:/etc/pyenv.d:/usr/lib/pyenv/hooks\n+ [pyenv:84] for plugin_hook in '\"${PYENV_ROOT}/plugins/\"*/etc/pyenv.d'\n+ [pyenv:85] PYENV_HOOK_PATH=:/home/aj/.pyenv/pyenv.d:/usr/local/etc/pyenv.d:/etc/pyenv.d:/usr/lib/pyenv/hooks:/home/aj/.pyenv/plugins/pyenv-pip-rehash/etc/pyenv.d\n+ [pyenv:87] export PYENV_HOOK_PATH\n+ [pyenv:89] shopt -u nullglob\n+ [pyenv:92] command=prefix\n+ [pyenv:93] case \"$command\" in\n++ [pyenv:101] command -v pyenv-prefix\n+ [pyenv:101] command_path=/home/aj/.pyenv/libexec/pyenv-prefix\n+ [pyenv:102] '[' -z /home/aj/.pyenv/libexec/pyenv-prefix ']'\n+ [pyenv:107] shift 1\n+ [pyenv:108] exec /home/aj/.pyenv/libexec/pyenv-prefix system\n+ [pyenv-prefix:13] '[' system = --complete ']'\n+ [pyenv-prefix:18] '[' -n system ']'\n+ [pyenv-prefix:19] OLDIFS='    \n'\n+ [pyenv-prefix:20] IFS=:\n+ [pyenv-prefix:21] export PYENV_VERSION=system\n+ [pyenv-prefix:21] PYENV_VERSION=system\n+ [pyenv-prefix:23] IFS='   \n'\n+ [pyenv-prefix:28] PYENV_PREFIX_PATHS=()\n+ [pyenv-prefix:29] OLDIFS='    \n'\n+ [pyenv-prefix:30] IFS=:\n+ [pyenv-prefix:31] for version in '${PYENV_VERSION}'\n+ [pyenv-prefix:32] '[' system = system ']'\n++ [pyenv-prefix:33] pyenv-which python\n+ [pyenv-prefix:33] PYTHON_PATH=/usr/sbin/python\n+ [pyenv-prefix:34] PYENV_PREFIX_PATH=/usr/sbin/python\n+ [pyenv-prefix:42] '[' -d /usr/sbin/python ']'\n+ [pyenv-prefix:45] echo 'pyenv: version `system'\\'' not installed'\npyenv: version `system' not installed\n+ [pyenv-prefix:46] exit 1\nAfter I fixed my local $PATH, pyenv global system worked. \nThis was the output of pyenv prefix system:\n\u276f PYENV_DEBUG=1 pyenv prefix system                   \n+ [pyenv:15] enable -f /home/aj/.pyenv/bin/../libexec/pyenv-realpath.dylib realpath\n+ [pyenv:21] '[' -n '' ']'\n++ [pyenv:25] type -p greadlink readlink\n++ [pyenv:25] head -1\n+ [pyenv:25] READLINK=/usr/bin/readlink\n+ [pyenv:26] '[' -z /usr/bin/readlink ']'\n+ [pyenv:50] '[' -z /home/aj/.pyenv ']'\n+ [pyenv:53] PYENV_ROOT=/home/aj/.pyenv\n+ [pyenv:55] export PYENV_ROOT\n+ [pyenv:57] '[' -z '' ']'\n++ [pyenv:58] pwd\n+ [pyenv:58] PYENV_DIR=/usr\n+ [pyenv:67] export PYENV_DIR\n+ [pyenv:70] shopt -s nullglob\n++ [pyenv:72] abs_dirname /home/aj/.pyenv/bin/pyenv\n+++ [pyenv:36] pwd\n++ [pyenv:36] local cwd=/usr\n++ [pyenv:37] local path=/home/aj/.pyenv/bin/pyenv\n++ [pyenv:39] '[' -n /home/aj/.pyenv/bin/pyenv ']'\n++ [pyenv:40] cd /home/aj/.pyenv/bin\n++ [pyenv:41] local name=pyenv\n+++ [pyenv:42] resolve_link pyenv\n+++ [pyenv:32] /usr/bin/readlink pyenv\n++ [pyenv:42] path=../libexec/pyenv\n++ [pyenv:39] '[' -n ../libexec/pyenv ']'\n++ [pyenv:40] cd ../libexec\n++ [pyenv:41] local name=pyenv\n+++ [pyenv:42] resolve_link pyenv\n+++ [pyenv:32] /usr/bin/readlink pyenv\n+++ [pyenv:42] true\n++ [pyenv:42] path=\n++ [pyenv:39] '[' -n '' ']'\n++ [pyenv:45] pwd\n++ [pyenv:46] cd /usr\n+ [pyenv:72] bin_path=/home/aj/.pyenv/libexec\n+ [pyenv:73] for plugin_bin in '\"${PYENV_ROOT}/plugins/\"*/bin'\n+ [pyenv:74] PATH=/home/aj/.pyenv/plugins/python-build/bin:/home/aj/.pyenv/shims:/home/aj/.pyenv/bin:/home/aj/.rbenv/shims:/home/aj/.rbenv/bin:/home/aj/.cask/bin:/usr/local/sbin:/usr/local/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl:/home/aj/.pyenv/shims:/home/aj/.pyenv/bin:/home/aj/.rbenv/shims:/home/aj/.rbenv/bin:/home/aj/.cask/bin:/usr/local/sbin:/usr/local/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl:/usr/local/sbin:/usr/local/bin:/usr/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl\n+ [pyenv:76] export PATH=/home/aj/.pyenv/libexec:/home/aj/.pyenv/plugins/python-build/bin:/home/aj/.pyenv/shims:/home/aj/.pyenv/bin:/home/aj/.rbenv/shims:/home/aj/.rbenv/bin:/home/aj/.cask/bin:/usr/local/sbin:/usr/local/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl:/home/aj/.pyenv/shims:/home/aj/.pyenv/bin:/home/aj/.rbenv/shims:/home/aj/.rbenv/bin:/home/aj/.cask/bin:/usr/local/sbin:/usr/local/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl:/usr/local/sbin:/usr/local/bin:/usr/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl\n+ [pyenv:76] PATH=/home/aj/.pyenv/libexec:/home/aj/.pyenv/plugins/python-build/bin:/home/aj/.pyenv/shims:/home/aj/.pyenv/bin:/home/aj/.rbenv/shims:/home/aj/.rbenv/bin:/home/aj/.cask/bin:/usr/local/sbin:/usr/local/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl:/home/aj/.pyenv/shims:/home/aj/.pyenv/bin:/home/aj/.rbenv/shims:/home/aj/.rbenv/bin:/home/aj/.cask/bin:/usr/local/sbin:/usr/local/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl:/usr/local/sbin:/usr/local/bin:/usr/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl\n+ [pyenv:78] PYENV_HOOK_PATH=:/home/aj/.pyenv/pyenv.d\n+ [pyenv:79] '[' /home/aj/.pyenv '!=' /home/aj/.pyenv ']'\n+ [pyenv:83] PYENV_HOOK_PATH=:/home/aj/.pyenv/pyenv.d:/usr/local/etc/pyenv.d:/etc/pyenv.d:/usr/lib/pyenv/hooks\n+ [pyenv:84] for plugin_hook in '\"${PYENV_ROOT}/plugins/\"*/etc/pyenv.d'\n+ [pyenv:85] PYENV_HOOK_PATH=:/home/aj/.pyenv/pyenv.d:/usr/local/etc/pyenv.d:/etc/pyenv.d:/usr/lib/pyenv/hooks:/home/aj/.pyenv/plugins/pyenv-pip-rehash/etc/pyenv.d\n+ [pyenv:87] export PYENV_HOOK_PATH\n+ [pyenv:89] shopt -u nullglob\n+ [pyenv:92] command=prefix\n+ [pyenv:93] case \"$command\" in\n++ [pyenv:101] command -v pyenv-prefix\n+ [pyenv:101] command_path=/home/aj/.pyenv/libexec/pyenv-prefix\n+ [pyenv:102] '[' -z /home/aj/.pyenv/libexec/pyenv-prefix ']'\n+ [pyenv:107] shift 1\n+ [pyenv:108] exec /home/aj/.pyenv/libexec/pyenv-prefix system\n+ [pyenv-prefix:13] '[' system = --complete ']'\n+ [pyenv-prefix:18] '[' -n system ']'\n+ [pyenv-prefix:19] OLDIFS='    \n'\n+ [pyenv-prefix:20] IFS=:\n+ [pyenv-prefix:21] export PYENV_VERSION=system\n+ [pyenv-prefix:21] PYENV_VERSION=system\n+ [pyenv-prefix:23] IFS='   \n'\n+ [pyenv-prefix:28] PYENV_PREFIX_PATHS=()\n+ [pyenv-prefix:29] OLDIFS='    \n'\n+ [pyenv-prefix:30] IFS=:\n+ [pyenv-prefix:31] for version in '${PYENV_VERSION}'\n+ [pyenv-prefix:32] '[' system = system ']'\n++ [pyenv-prefix:33] pyenv-which python\n+ [pyenv-prefix:33] PYTHON_PATH=/usr/bin/python\n+ [pyenv-prefix:34] PYENV_PREFIX_PATH=/usr\n+ [pyenv-prefix:42] '[' -d /usr ']'\n+ [pyenv-prefix:43] PYENV_PREFIX_PATHS=(\"${PYENV_PREFIX_PATHS[@]}\" \"$PYENV_PREFIX_PATH\")\n+ [pyenv-prefix:50] IFS='   \n'\n+ [pyenv-prefix:52] OLDIFS='    \n'\n+ [pyenv-prefix:53] IFS=:\n+ [pyenv-prefix:54] echo /usr\n/usr\n+ [pyenv-prefix:56] IFS='   \n'\n. ",
    "aiguofer": "So I'm running into a similar problem, although it only breaks when I try to load multiple versions and leave system as the last one:\n~ \ue0b0 pyenv global system\n ~ \ue0b0 pyenv prefix\n/usr\n ~ \ue0b0 pyenv global 2.7.10 system \n ~ \ue0b0 pyenv prefix                     \n/home/rdu/difernan/.pyenv/versions/2.7.10:/home/rdu/difernan/.pyenv/versions/2.7.10\n ~ \ue0b0 pyenv prefix system\n/usr\n ~ \ue0b0 pyenv global system 2.7.10\n ~ \ue0b0 pyenv prefix              \n/usr:/home/rdu/difernan/.pyenv/versions/2.7.10\n. @nanounanue what's output of echo $PATH and which python?\n. @nanounanue I think you're missing ~/.pyenv/shims as the first entry in your path.\nDo you have eval \"$(pyenv init -)\" as the last line in your .bashrc/.zshrc?\nTry running that to see if it helps.\n. @nanounanue I don't think it has to be last, but it needs to be after anything else that modifies PATH... it essentially sets the path and then calls a few other scripts to add auto-completion and create some commands.\nif you also use the virtualenv plugin you'll also want to add eval \"$(pyenv virtualenv-init -)\"\n. Hmmm so apparently it needs to be in ~/.bash_profile and not ~/.bashrc.\nAfter you add it, make sure you do source ~/.bash_profile\nIf that still doesn't work, try export PATH=~/.pyenv/shims:$PATH manually and see if it picks up the correct python with which python\n. That could be it. The shell only sees the current user's ENV, so if it's not installed in the other user it won't work there.\nSuppose you are logged in as user a and it has pyenv installed in /home/a/.pyenv\nThen you do sudo su b, if there is no /home/b/.pyenv then it's not going to work.\nYou would need pyenv installed on the user that you're currently logged in as, and the init lines in the same user's bash_profile\nAre both users using bash? if so, you can delete .zshrc and remove the lines from .bashrc\n. $ file ~/.pyenv/versions/custard/bin/python\n~/.pyenv/versions/custard/bin/python: symbolic link to python2\n$ ls -l ~/.pyenv/versions/custard/bin/python\nlrwxrwxrwx. 1 difernan difernan 7 Apr 25 22:58 ~/.pyenv/versions/custard/bin/python -> python2\nand just in case:\n$ file ~/.pyenv/versions/custard/bin/python2\n~/.pyenv/versions/custard/bin/python2: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=1d0608340d303555a5ed95bb27ca1f73611b8b41, stripped\n$ ls -l ~/.pyenv/versions/custard/bin/python2\n-rwxrwxr-x. 1 difernan difernan 7016 Apr 25 22:58 ~/.pyenv/versions/custard/bin/python2. Not sure why this didn't occur to me earlier.... if I back up .pyenv and start from scratch, everything seems to be working fine... I just copied over my old versions dir into the new install and I'm good again. \ndoing diff --brief -Nr .pyenv .pyenv.bk I see that all the files in shims are different... maybe they got corrupted during a pyenv update? \u00af_(\u30c4)_/\u00af\nclosing as this is solved now. ",
    "nanounanue": "Same problem here\nAny idea?\n$ pyenv versions\n  system\n* 2.7.10 (set by /home/flume-agent/.pyenv/version)\n  2.7.8\n$ pyenv prefix\n/home/flume-agent/.pyenv/versions/2.7.10\nAnd then\n$ python -V\nPython 2.6.6\n:-1: \n. @aiguofer \nThe output are:\n$ echo $PATH\n/home/flume-agent/.pyenv/bin:/sbin:/bin:/usr/sbin:/usr/bin\n$ which python\n/usr/bin/python\nweird, isn't it?\n. It has to be the last line?\n. I have both ... Any other idea?\n. I have it in .bash_profile, .zshrc and in .bashrc, let me try your suggestion, and I' ll come back to you\n. Mmmm it\u00b4s weird\nI f I execute source ~/.bash_prifile it picks the right one. \nI am switching from another user (I mean with sudo su) Could it be the problem?\n. ",
    "vcarus": "I met same problems as @nanounanue do.\nAnd fix it with leaving eval \"$(pyenv init -)\" as the last line in .zshrc\nThanks @aiguofer \n. ",
    "azec-pdx": "People are having problem because of the following. Official install documentation is saying they should put eval \"$(pyenv init -)\" inside ~/.zshenv. However, many have $PATH set in their ~/.zshrc file. The problem lies in fact that ~/.zshenv is read before ~/.zshrc and therefore eval \"$(pyenv init -)\" doesn't affect $PATH. \nSo - the bottom line - you should set eval \"$(pyenv init -)\" wherever, but make sure it is executed after your path is set.\n/etc/zshenv    # Read for every shell\n~/.zshenv      # Read for every shell except ones started with -f\n/etc/zprofile  # Global config for login shells, read before zshrc\n~/.zprofile    # User config for login shells\n/etc/zshrc     # Global config for interactive shells\n~/.zshrc       # User config for interactive shells\n/etc/zlogin    # Global config for login shells, read after zshrc\n~/.zlogin      # User config for login shells\n~/.zlogout     # User config for login shells, read upon logout\n/etc/zlogout   # Global config for login shells, read after user logout file\n. ",
    "axelerate": "Whenever I install the most stable versions of both 2 and 3, pyenv correctly points at the version I set up the global with. However, system settings still override and my pre-installed python 2.7.10 version takes priority whenever running a script.\n. ",
    "zjuguxi": "Notice that maybe you set a local version python($ pyenv local 2.7.xxxx) somewhere instead of a global version($ pyenv global 3.5.xxxx).So it will stuck in the local version when you're in that position even if you set a global version.\nTo solve the problem, you have to delete .python_version in the path you set the local version. It works for me.\n. ",
    "mgfjxxiexiaolong": "The pyenv configuration should write below your system python PATH configuration\uff0clike this\uff1a\n```bash\nSetting PATH for Python 2.7\nThe orginal version is saved in .bash_profile.pysave\nPATH=\"/Library/Frameworks/Python.framework/Versions/2.7/bin:${PATH}\"\nexport PATH\npyenv configuration\nexport PYENV_ROOT=/usr/local/var/pyenv\nif which pyenv > /dev/null; then eval \"$(pyenv init -)\"; fi\npyenv-virtualenv configuration\nif which pyenv-virtualenv-init > /dev/null; then eval \"$(pyenv virtualenv-init -)\"; fi\n```\nnot like this\uff1a\n```bash\npyenv configuration\nexport PYENV_ROOT=/usr/local/var/pyenv\nif which pyenv > /dev/null; then eval \"$(pyenv init -)\"; fi\npyenv-virtualenv configuration\nif which pyenv-virtualenv-init > /dev/null; then eval \"$(pyenv virtualenv-init -)\"; fi\nSetting PATH for Python 2.7\nThe orginal version is saved in .bash_profile.pysave\nPATH=\"/Library/Frameworks/Python.framework/Versions/2.7/bin:${PATH}\"\nexport PATH\n. @matinfo really solved too. Notice that, put\nexport PATH=\"/Users/username/.pyenv:$PATH\"\neval \"$(pyenv init -)\"\nunder the python path setting, eg:\nSetting PATH for Python 2.7\nThe orginal version is saved in .bash_profile.pysave\nPATH=\"/Library/Frameworks/Python.framework/Versions/2.7/bin:${PATH}\"\nexport PATH\n```. ",
    "petonic": "Gack!  The previous post gave me cancer.   Please learn markdown and/or code escapes for Git.. ",
    "digitalist": "FreeBSD 11 installs both python2 and python3, but there's no defauly 'python' symlink (by design) to one of them, so pyenv doesn't find python and doesn't find SYSTEM version.\nsudo ln -s /usr/local/bin/python3 /usr/local/bin/python fixes this. \ngod that took a time to discover. ",
    "bbenne10": "Let me attempt to pare down my zsh configuration to only pyenv and report back.\n. After trying with a bare zsh configuration, this still doesn't work. Steps that I took:\n- for i in $(ls -1 ~/.z*); do rm $i; done\n- git clone git@github.com:yyuu/pyenv.git ~/.pyenv\n- pkill dwm (this kills my entire login session and logs me out so there's no chance that the results are tainted)\n- After I log back in, ~/.pyenv/bin/pyenv. This reports \"permission denied\", so...\n- chmod +x ~/.pyenv/bin/pyenv\n- ~/.pyenv/bin/pyenv, which gives me /home/bryan/.pyenv/bin/pyenv: line 1: ../libexec/pyenv: No such file or directory\nI tried essentially the same steps with pyenv_installer as well (though got caught up on the fact that the github page for the installer says to pipe to bash where I needed to pipe to zsh to get the shell detection working properly. This confusion could be avoided by something like curl -L {{url}} | ${SHELL:-/bin/bash}, but I digress)\nI'll be honest - I'm not sure how the hell this works for you (or any other zsh user).\n. Interesting. I'm not seeing that ~/.pyenv/bin/pyenv is a symlink. It's a script with only one line: ../libexec/pyenv. Running libexec/pyenv works fine, but that was to be expected as running ./pyenv from inside $PYENV_ROOT/bin worked (though now I'm curious as to what happens with arguments, as bin/pyenv doesn't pass them along at all.\nIf it's supposed to be a symlink, that makes a lot of sense. I just need to figure out why a git clone isn't recreating that on my side.\n. AHHH. For some reason, git config --list has core.symlinks set to false. This isn't present in my dotfiles (in the repo linked above), so I'm not sure how it got there, but setting it to true makes this work just fine. Sorry for the noise, guys!\n. ",
    "bgyu": "Just do this in your .bash_profile or .bashrc:\nbash\nexport PATH=\"$(pyenv root)/libexec/pyenv:$PATH\"\n. ",
    "lyzs90": "export PATH=\"$(pyenv root)/libexec:$PATH\" works for me. ",
    "cilia": "Tried the following three alternatives:\nenv PYTHON_CONFIGURE_OPTS='LD_RUN_PATH=\"/usr/local/opt\" LDFLAGS=\"-L/usr/local/opt\" CPPFLAGS=\"-I/usr/local/include\"' PYTHON_MAKE_OPTS='LD_RUN_PATH=\"/usr/local/opt\"' pyenv install 3.4.3\nand\nenv PYTHON_CONFIGURE_OPTS='LD_RUN_PATH=\"/usr/local/opt\"' LDFLAGS=\"-L/usr/local/opt\" CPPFLAGS=\"-I/usr/local/include\" PYTHON_MAKE_OPTS='LD_RUN_PATH=\"/usr/local/opt\"' pyenv install 3.4.3\nand\nexport LD_RUN_PATH=\"/usr/local/opt\" LDFLAGS=\"-L/usr/local/opt\" CPPFLAGS=\"-I/usr/local/include\"\npyenv install 3.4.3\nNeither works.\nThe first failed during the Python build, and the other two built successfully but still linked to the wrong sqlite3 version.\nThe SO post suggested to prefix the ./configure and make commands with the definition of LD_RUN_PATH variable, but it does not seem like this is possible with pyenv.\n. @yyuu What is the difference between 'CONFIGURE_OPTS' or 'PYTHON_CONFIGURE_OPTS' in our case here? I think only 'PYTHON_CONFIGURE_OPTS' is relevant as we are trying to compile the specific version of sqlite3 into Python.\nIn addition, is there way in pyenv to prefix the ./configure and make commands with options or definitions of variables when building Python?\n. @yyuu thanks.\nSeeing the line of code you referenced, I wonder if there is a way to pass in PACKAGE_PREFIX_PATH  or PREFIX_PATH variables to ./configure and make during the build?\nBased on this: http://stackoverflow.com/questions/8656158/building-python-2-5-with-full-sqlite3-as-a-user-on-linux, those might be what we need here.\n. Found a solution, at least what works for me.\nBy only using the PYTHON_CONFIGURE_OPTS like the following works:\nPYTHON_CONFIGURE_OPTS=\"LD_RUN_PATH=/usr/local/opt/sqlite/lib LDFLAGS=-L/usr/local/opt/sqlite/lib CPPFLAGS=-I/usr/local/include\" pyenv install 3.4.3\nWhere /usr/local/opt/sqlite/lib is the location of the sqlite lib installed by homebrew, and /usr/local/include is where header files are by homebrew.\nHope this helps.\n. ",
    "danielb2": ":+1: \nI've got the same issue on FreeBSD 10.1\nbash\n$ ls /usr/local/include/sqlite3.h\n/usr/local/include/sqlite3.h\nbut ...\nbash\npyenv install 2.6.9\n...\nWARNING: The Python sqlite3 extension was not compiled. Missing the SQLite3 lib?\n...\n. Found this: \n- CONFIGURE_OPTS lets you pass additional options to ./configure.\n. Yeah, doesn't work though. Options to configure doesn't help it find the path to sqlite3.h. I didn't see any options to configure that would anyway. Do you have suggestions of what to pass?\n. ",
    "techdragon": "This workaround should probably be turned into some kind of option or configurable.\n. I've repeated this and gotten the exact same results. Before and after applying the pull request. I'm not sure what the cause is though. . Im getting this as well with the current latest version of pyenv and a 3.6.3 framework build.. It also seems that pyenv does not respect the full use of --enable-framework[=DIR], I've tried to bypass this issue by specifying a specific path to install the extra stuff too.\nenv PYTHON_CONFIGURE_OPTS=\"--enable-framework=/Users/techdragon/Library/Frameworks\" pyenv install 3.6.3 fails with the same issue.. I've debugged the chain a bit.\n\nNot respecting the full version of --enable-framework[=DIR] comes from pyenv passing its own target version directory path  ~/.pyenv/versions/* into  configure using --enable-framework[=DIR] as the final option, which overrides the previous uses of --enable-framework[=DIR] in the call to configure because final use wins. Understandable behaviour given how pyenv works, one mystery solved.\n\nNote: The configure scripts used by CPython are maintained/generated by autoconf, so while I refer to autoconf in the following steps, I'm also implicitly referring to the configure script which is kept in source control so that users of the python source code don't also need to have autoconf installed in order to build python.    \n\n\nWhen autoconf builds the makefiles that will compile and install python. While generating the part that handles --enable-framework, https://github.com/python/cpython/blob/24c4d046c492d598d32982194c84db236ccf9793/configure.ac#L238, autoconf has \"/Application\" hardcoded as the path to install the Python Mac Apps into. https://github.com/python/cpython/blob/24c4d046c492d598d32982194c84db236ccf9793/configure.ac#L271 \n\n\nIn the same Autoconf section as step 2, autoconf also hardcodes the dependencies of the makefile target install to include frameworkinstallapps which is the makefile target that performs the installation of the Python Mac Apps into the /Applications directory. https://github.com/python/cpython/blob/24c4d046c492d598d32982194c84db236ccf9793/configure.ac#L268\n\n\nWe almost have a solution in python-build where it handles the PYTHON_CONFIGURE_OPTS and other arguments. https://github.com/pyenv/pyenv/blob/7b9d1a40c2e05746330fabef7e3b93e1a552394d/plugins/python-build/bin/python-build#L721 However the logic that handles PYTHON_MAKE_INSTALL_TARGET https://github.com/pyenv/pyenv/blob/7b9d1a40c2e05746330fabef7e3b93e1a552394d/plugins/python-build/bin/python-build#L731 and https://github.com/pyenv/pyenv/blob/7b9d1a40c2e05746330fabef7e3b93e1a552394d/plugins/python-build/bin/python-build#L747, together preclude the obvious workaround of telling python to not install the Python Mac Apps, by excluding frameworkinstallapps from the make target because PYTHON_MAKE_INSTALL_TARGET only accepts a single target string so we can't just pass in all the steps and do ensure_pip after install ourselves. \nmake: *** No rule to make target `frameworkinstallstructure commoninstall bininstall maninstall frameworkinstallmaclib frameworkinstallunixtools'.  Stop.` \n\n\nThe real puzzle was that from the look of it, all of this has been unchanged for years and worked fine until now. The configure.ac parts involved seem to all be over 8 years old and the parts of python-build are over 3 years old. So my best guess is that this is something related to recent versions of macOS having tighter protections on system directories such as the /Applications and /Library directories. While this is arguably an issue with upstream CPython's autoconf and makefile configuration, an upstream fix would be unlikely to work its way into existing versions of CPython and so those versions would remain broken like this for users of pyenv.  \nTo fix this in pyenv there seems to be a few options:\n1. Modify python-build to support specifying multiple make targets, and document that framework builds on macOS may require specifying PYTHON_MAKE_INSTALL_TARGET=\"frameworkinstallstructure commoninstall bininstall maninstall frameworkinstallmaclib frameworkinstallunixtools\" in order to avoid Python trying to install the Python Mac Apps into the hardcoded /Applications directory path.\n2. Enhance the existing logic around setting --enable-framework so that it does one of the following: \n   1. Patch or edit CPython's autoconf/configure files before running configure, so they do not add frameworkinstallapps into the final makefiles. \n   2. Patch or edit CPython's autoconf/configure files before running configure, to change the path to somewhere harmless (possibly user configurable).\n   3. Patch or edit CPython's makefiles after running configure, so that frameworkinstallapps is no longer a dependent make target of the install make target.\n   4. Patch or edit CPython's makefiles after running configure, to change the path to somewhere harmless (possibly user configurable).\nOption 1, fixing the small shortcoming of PYTHON_MAKE_INSTALL_TARGET seems somewhat worthwhile regardless of other changes that implement a form of option 2. However it makes sense that for the overall usability of python-build and pyenv as a whole, some form of option 2 would also be a good thing to implement. There does appear to be existing tools in pyenv that should make this possible. From the look of setup_builtin_patches inside python-build, it seems that it patches before doing any build steps, so that would make 2.i or 2.ii the easiest options to implement since these might be possible with the existing patch tools and just require determining the broken combinations of CPython and macOS. \nI'm going to try testing an example patch for 3.6.3 and I'll update with results.. I've written a short patch that should work, however it doesn't. For reasons I can't yet fathom, this patch breaks the bz2, readline and openssl modules, despite the install completing correctly and being able to run -m ensurepip to update pip.\nThe patch. \n--- a/configure\n+++ b/configure\n@@ -3130,8 +3130,8 @@ if test \"${enable_framework+set}\" = set; then :\n        PYTHONFRAMEWORKINSTALLDIR=$PYTHONFRAMEWORKPREFIX/$PYTHONFRAMEWORKDIR\n        FRAMEWORKINSTALLFIRST=\"frameworkinstallstructure\"\n        FRAMEWORKALTINSTALLFIRST=\"frameworkinstallstructure \"\n-       FRAMEWORKINSTALLLAST=\"frameworkinstallmaclib frameworkinstallapps frameworkinstallunixtools\"\n-       FRAMEWORKALTINSTALLLAST=\"frameworkinstallmaclib frameworkinstallapps frameworkaltinstallunixtools\"\n+       FRAMEWORKINSTALLLAST=\"frameworkinstallmaclib frameworkinstallunixtools\"\n+       FRAMEWORKALTINSTALLLAST=\"frameworkinstallmaclib frameworkaltinstallunixtools\"\n        FRAMEWORKPYTHONW=\"frameworkpythonw\"\n        FRAMEWORKINSTALLAPPSPREFIX=\"/Applications\"\nThe output (and for good measure a normal install of 3.6.3 to confirm it was definitely either the framework build itself or something related to my patch that is behind the broken modules). \n```\ntechdragon$ env PYTHON_CONFIGURE_OPTS=\"--enable-framework\" pyenv install --patch 3.6.3 < ~/dev/pyenv-patch.diff\nInstalling Python-3.6.3...\npatching file configure\npatch unexpectedly ends in middle of line\nWARNING: The Python bz2 extension was not compiled. Missing the bzip2 lib?\nWARNING: The Python readline extension was not compiled. Missing the GNU readline lib?\nERROR: The Python ssl extension was not compiled. Missing the OpenSSL lib?\nPlease consult to the Wiki page to fix the problem.\nhttps://github.com/pyenv/pyenv/wiki/Common-build-problems\nBUILD FAILED (OS X 10.12.6 using python-build 1.1.5-8-g7b9d1a4)\nInspect or clean up the working tree at /var/folders/pg/hv1fbzjj0dlfkfjk116mz6nr0000gn/T/python-build.20171022182053.85628\nResults logged to /var/folders/pg/hv1fbzjj0dlfkfjk116mz6nr0000gn/T/python-build.20171022182053.85628.log\nLast 10 log lines:\n            upgrade) ensurepip=\"--upgrade\" ;; \\\n            install|*) ensurepip=\"\" ;; \\\n        esac; \\\n        DYLD_FRAMEWORK_PATH=/var/folders/pg/hv1fbzjj0dlfkfjk116mz6nr0000gn/T/python-build.20171022182053.85628/Python-3.6.3 ./python.exe -E -m ensurepip \\\n            $ensurepip --root=/ ; \\\n    fi\nCollecting setuptools\nCollecting pip\nInstalling collected packages: setuptools, pip\nSuccessfully installed pip-9.0.1 setuptools-28.8.0\ntechdragon$ pyenv install 3.6.3\nInstalling Python-3.6.3...\nInstalled Python-3.6.3 to /Users/techdragon/.pyenv/versions/3.6.3\ntechdragon$\n```\nI've attached the full log file output, which as best as I can tell, looks like it has found, and tried to use readline, bz2, and openssl without major issues, until it came time to import them.\npython-build.20171022182053.85628.log. ",
    "odonnellryan": "It'd be really nice to be able to do this. SQLite comes with some nifty extensions.\n. ",
    "cheeming": "i also encountered some issues, but solved with the following, maybe it can help others.\nbash\nLDFLAGS=\"-L/usr/local/opt/sqlite/lib -L/usr/local/opt/zlib/lib\" CPPFLAGS=\"-I/usr/local/opt/sqlite/include -I/usr/local/opt/zlib/include\" pyenv install -v 3.4.5\n. ",
    "aubricus": "\ni also encountered some issues, but solved with the following, maybe it can help others.\nshell\nLDFLAGS=\"-L/usr/local/opt/sqlite/lib -L/usr/local/opt/zlib/lib\" CPPFLAGS=\"-I/usr/local/opt/sqlite/include -I/usr/local/opt/zlib/include\" pyenv install -v 3.7.1\n\nThis worked for me on 10.14.2 (Mojave) (Updated to install 3.7.1). ",
    "cnk": "OK this is because the version of wget on RHEL5 is as old as dirt. After installing wget 1.16 from source, pyenv / pybuild builds pythons just fine.\nFor anyone else using RHEL 5, download latest wget from https://www.gnu.org/software/wget/, untar and do: \n./configure --with-ssl=openssl\nmake\nsudo make install  # This will put wget in to /usr/local/bin/\n. ",
    "jimmywan": "I think we can close this now that pyenv-virtualenv handles this:\nhttps://github.com/yyuu/pyenv-virtualenv/issues/88\n. This is the relevant part of my ~/.profile\n``` bash\nif [ -f ~/.bashrc ]; then\n   source ~/.bashrc\nfi\nexport PYENV_ROOT=\"$HOME/.pyenv\"\nexport PATH=\"$PYENV_ROOT/bin:$PATH\"\neval \"$(pyenv init -)\"\neval \"$(pyenv virtualenv-init -)\"\nexport WORKON_HOME=${HOME}/.virtualenvs\nexport PROJECT_HOME=/cygwin/code\nDisable virtualenvwrapper for now\npyenv virtualenvwrapper\n```\nSome relevant environment variables after I set my pyenv version:\nvagrant@ubuntu-14:~$ env | egrep 'PYENV|PATH'\nPYENV_ROOT=/home/vagrant/.pyenv\nPYENV_VERSION=miniconda-3.9.1\nPYENV_VIRTUALENV_INIT=1\nPATH=/home/vagrant/.pyenv/shims:/home/vagrant/.pyenv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games\nPYENV_SHELL=bash\n. Should I move this issue from pyenv to pyenv-virtualenv?\n. Moved to pyenv-virtualenv:\nhttps://github.com/yyuu/pyenv-virtualenv/issues/88\n. This is not a valid test for the presence of pip:\n$ which pip\n/Users/<username>/.pyenv/shims/pip\nThe shims are part of pyenv that are used to delegate work out to the \"active\" version of python.\nYou want to use the following:\n```\n pyenv help which\nUsage: pyenv which \nDisplays the full path to the executable that pyenv will invoke when\nyou run the given command.\n```\n. On my virtual machine::\n```\n$ pyenv shell 2.7.9\n$ pyenv which pip\n/home/vagrant/.pyenv/versions/2.7.9/bin/pip\n$ pyenv shell 2.7.10\n$ pyenv which pip\n/home/vagrant/.pyenv/versions/2.7.10/bin/pip\n```\nYour \"local installation\" appears to have installed pip for the \"system\" version. I imagine if you do the following, it will work:\npyenv shell system\npyenv which pip\nP.S. I'm not in any way affiliated with the project. Just another pyenv user that is not seeing the same behavior.\n. > That is not a Cygwin path; OP is using OS X.\nAhh, updated my previous comment. Sorry, I don't use OS X. Can't really help other than to say your problem is not universal across platforms.\n. Just an opinion from the cheap seats, but the last thing I want is more email.\n. Assuming they still work, where \"work\" is defined as actually installs properly, maybe just hide them by default and add a flag for accessing old builds? Presumably any that was at one point an official release might still be of use to someone... somewhere.... Oops, thought I had cut/pasted the output:\nbash\n $ PYENV_DEBUG=1 python\n++ export PYENV_ROOT=/home/vagrant/.pyenv\n++ PYENV_ROOT=/home/vagrant/.pyenv\n+++ /home/vagrant/.pyenv/libexec/pyenv which python\n+ [pyenv:23] enable -f /home/vagrant/.pyenv/libexec/../libexec/pyenv-realpath.dylib realpath\n+ [pyenv:29] '[' -z '' ']'\n++ [pyenv:31] head -1\n++ [pyenv:31] type -p greadlink readlink\n+ [pyenv:31] READLINK=/bin/readlink\n+ [pyenv:32] '[' -n /bin/readlink ']'\n+ [pyenv:53] '[' -z /home/vagrant/.pyenv ']'\n+ [pyenv:56] PYENV_ROOT=/home/vagrant/.pyenv\n+ [pyenv:58] export PYENV_ROOT\n+ [pyenv:61] '[' -z '' ']'\n+ [pyenv:62] '[' -n '' ']'\n+ [pyenv:73] '[' -z '' ']'\n+ [pyenv:74] PYENV_DIR=/cygwin/code/gambit\n+ [pyenv:80] export PYENV_DIR\n+ [pyenv:83] shopt -s nullglob\n++ [pyenv:85] abs_dirname /home/vagrant/.pyenv/libexec/pyenv\n++ [pyenv:39] local cwd=/cygwin/code/gambit\n++ [pyenv:40] local path=/home/vagrant/.pyenv/libexec/pyenv\n++ [pyenv:42] '[' -n /home/vagrant/.pyenv/libexec/pyenv ']'\n++ [pyenv:43] cd /home/vagrant/.pyenv/libexec\n++ [pyenv:44] local name=pyenv\n+++ [pyenv:45] resolve_link pyenv\n+++ [pyenv:35] /bin/readlink pyenv\n+++ [pyenv:45] true\n++ [pyenv:45] path=\n++ [pyenv:42] '[' -n '' ']'\n++ [pyenv:48] pwd\n++ [pyenv:49] cd /cygwin/code/gambit\n+ [pyenv:85] bin_path=/home/vagrant/.pyenv/libexec\n+ [pyenv:86] for plugin_bin in '\"${PYENV_ROOT}/plugins/\"*/bin'\n+ [pyenv:87] PATH=/home/vagrant/.pyenv/plugins/pyenv-virtualenv/bin:/home/vagrant/.node/bin:/home/vagrant/.pyenv/plugins/pyenv-virtualenv/shims:/home/vagrant/.pyenv/shims:/home/vagrant/.pyenv/bin:/cygwin/code/common-build/scripts:/home/vagrant/.pyenv/plugins/pyenv-virtualenv/shims:/home/vagrant/.pyenv/shims:/home/vagrant/.pyenv/bin:/cygwin/code/common-build/scripts:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/lib/jvm/java-8-oracle/bin:/usr/lib/jvm/java-8-oracle/db/bin:/usr/lib/jvm/java-8-oracle/jre/bin:/home/vagrant/protoc-3.0.0-linux-x86_64/bin:/home/vagrant/protoc-3.0.0-linux-x86_64/bin\n+ [pyenv:86] for plugin_bin in '\"${PYENV_ROOT}/plugins/\"*/bin'\n+ [pyenv:87] PATH=/home/vagrant/.pyenv/plugins/python-build/bin:/home/vagrant/.pyenv/plugins/pyenv-virtualenv/bin:/home/vagrant/.node/bin:/home/vagrant/.pyenv/plugins/pyenv-virtualenv/shims:/home/vagrant/.pyenv/shims:/home/vagrant/.pyenv/bin:/cygwin/code/common-build/scripts:/home/vagrant/.pyenv/plugins/pyenv-virtualenv/shims:/home/vagrant/.pyenv/shims:/home/vagrant/.pyenv/bin:/cygwin/code/common-build/scripts:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/lib/jvm/java-8-oracle/bin:/usr/lib/jvm/java-8-oracle/db/bin:/usr/lib/jvm/java-8-oracle/jre/bin:/home/vagrant/protoc-3.0.0-linux-x86_64/bin:/home/vagrant/protoc-3.0.0-linux-x86_64/bin\n+ [pyenv:89] export PATH=/home/vagrant/.pyenv/libexec:/home/vagrant/.pyenv/plugins/python-build/bin:/home/vagrant/.pyenv/plugins/pyenv-virtualenv/bin:/home/vagrant/.node/bin:/home/vagrant/.pyenv/plugins/pyenv-virtualenv/shims:/home/vagrant/.pyenv/shims:/home/vagrant/.pyenv/bin:/cygwin/code/common-build/scripts:/home/vagrant/.pyenv/plugins/pyenv-virtualenv/shims:/home/vagrant/.pyenv/shims:/home/vagrant/.pyenv/bin:/cygwin/code/common-build/scripts:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/lib/jvm/java-8-oracle/bin:/usr/lib/jvm/java-8-oracle/db/bin:/usr/lib/jvm/java-8-oracle/jre/bin:/home/vagrant/protoc-3.0.0-linux-x86_64/bin:/home/vagrant/protoc-3.0.0-linux-x86_64/bin\n+ [pyenv:89] PATH=/home/vagrant/.pyenv/libexec:/home/vagrant/.pyenv/plugins/python-build/bin:/home/vagrant/.pyenv/plugins/pyenv-virtualenv/bin:/home/vagrant/.node/bin:/home/vagrant/.pyenv/plugins/pyenv-virtualenv/shims:/home/vagrant/.pyenv/shims:/home/vagrant/.pyenv/bin:/cygwin/code/common-build/scripts:/home/vagrant/.pyenv/plugins/pyenv-virtualenv/shims:/home/vagrant/.pyenv/shims:/home/vagrant/.pyenv/bin:/cygwin/code/common-build/scripts:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/lib/jvm/java-8-oracle/bin:/usr/lib/jvm/java-8-oracle/db/bin:/usr/lib/jvm/java-8-oracle/jre/bin:/home/vagrant/protoc-3.0.0-linux-x86_64/bin:/home/vagrant/protoc-3.0.0-linux-x86_64/bin\n+ [pyenv:91] PYENV_HOOK_PATH=:/home/vagrant/.pyenv/pyenv.d\n+ [pyenv:92] '[' /home/vagrant/.pyenv '!=' /home/vagrant/.pyenv ']'\n+ [pyenv:96] PYENV_HOOK_PATH=:/home/vagrant/.pyenv/pyenv.d:/usr/local/etc/pyenv.d:/etc/pyenv.d:/usr/lib/pyenv/hooks\n+ [pyenv:97] for plugin_hook in '\"${PYENV_ROOT}/plugins/\"*/etc/pyenv.d'\n+ [pyenv:98] PYENV_HOOK_PATH=:/home/vagrant/.pyenv/pyenv.d:/usr/local/etc/pyenv.d:/etc/pyenv.d:/usr/lib/pyenv/hooks:/home/vagrant/.pyenv/plugins/pyenv-pip-rehash/etc/pyenv.d\n+ [pyenv:97] for plugin_hook in '\"${PYENV_ROOT}/plugins/\"*/etc/pyenv.d'\n+ [pyenv:98] PYENV_HOOK_PATH=:/home/vagrant/.pyenv/pyenv.d:/usr/local/etc/pyenv.d:/etc/pyenv.d:/usr/lib/pyenv/hooks:/home/vagrant/.pyenv/plugins/pyenv-pip-rehash/etc/pyenv.d:/home/vagrant/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d\n+ [pyenv:97] for plugin_hook in '\"${PYENV_ROOT}/plugins/\"*/etc/pyenv.d'\n+ [pyenv:98] PYENV_HOOK_PATH=:/home/vagrant/.pyenv/pyenv.d:/usr/local/etc/pyenv.d:/etc/pyenv.d:/usr/lib/pyenv/hooks:/home/vagrant/.pyenv/plugins/pyenv-pip-rehash/etc/pyenv.d:/home/vagrant/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d:/home/vagrant/.pyenv/plugins/pyenv-which-ext/etc/pyenv.d\n+ [pyenv:100] PYENV_HOOK_PATH=/home/vagrant/.pyenv/pyenv.d:/usr/local/etc/pyenv.d:/etc/pyenv.d:/usr/lib/pyenv/hooks:/home/vagrant/.pyenv/plugins/pyenv-pip-rehash/etc/pyenv.d:/home/vagrant/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d:/home/vagrant/.pyenv/plugins/pyenv-which-ext/etc/pyenv.d\n+ [pyenv:101] export PYENV_HOOK_PATH\n+ [pyenv:103] shopt -u nullglob\n+ [pyenv:106] command=which\n+ [pyenv:107] case \"$command\" in\n++ [pyenv:120] command -v pyenv-which\n+ [pyenv:120] command_path=/home/vagrant/.pyenv/libexec/pyenv-which\n+ [pyenv:121] '[' -n /home/vagrant/.pyenv/libexec/pyenv-which ']'\n+ [pyenv:123] shift 1\n+ [pyenv:124] '[' python = --help ']'\n+ [pyenv:131] exec /home/vagrant/.pyenv/libexec/pyenv-which python\n+ [pyenv-which:14] '[' python = --complete ']'\n+ [pyenv-which:30] PYENV_COMMAND=python\n+ [pyenv-which:32] '[' -z python ']'\n+ [pyenv-which:37] OLDIFS='\n'\n+ [pyenv-which:38] IFS=:\n+ [pyenv-which:38] versions=(${PYENV_VERSION:-$(pyenv-version-name)})\n+ [pyenv-which:39] IFS='\n'\n+ [pyenv-which:41] for version in '\"${versions[@]}\"'\n+ [pyenv-which:42] '[' miniconda3-4.1.11/envs/gambit = system ']'\n+ [pyenv-which:46] PYENV_COMMAND_PATH=/home/vagrant/.pyenv/versions/miniconda3-4.1.11/envs/gambit/bin/python\n+ [pyenv-which:48] '[' -x /home/vagrant/.pyenv/versions/miniconda3-4.1.11/envs/gambit/bin/python ']'\n+ [pyenv-which:49] break\n+ [pyenv-which:53] OLDIFS='\n'\n+ [pyenv-which:54] IFS='\n'\n+ [pyenv-which:54] scripts=(`pyenv-hooks which`)\n++ [pyenv-which:54] pyenv-hooks which\n+ [pyenv-hooks:9] '[' which = --complete ']'\n+ [pyenv-hooks:18] PYENV_COMMAND=which\n+ [pyenv-hooks:19] '[' -z which ']'\n+ [pyenv-hooks:24] enable -f /home/vagrant/.pyenv/libexec/pyenv-realpath.dylib realpath\n+ [pyenv-hooks:25] '[' -n '' ']'\n++ [pyenv-hooks:29] type -p greadlink readlink\n++ [pyenv-hooks:29] head -1\n+ [pyenv-hooks:29] READLINK=/bin/readlink\n+ [pyenv-hooks:30] '[' -z /bin/readlink ']'\n+ [pyenv-hooks:55] IFS=:\n+ [pyenv-hooks:55] hook_paths=($PYENV_HOOK_PATH)\n+ [pyenv-hooks:57] shopt -s nullglob\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:59] for script in '\"$path/$PYENV_COMMAND\"/*.bash'\n+ [pyenv-hooks:60] realpath /home/vagrant/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which/python-config.bash\n+ [pyenv-hooks:40] local cwd=/cygwin/code/gambit\n+ [pyenv-hooks:41] local path=/home/vagrant/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which/python-config.bash\n+ [pyenv-hooks:42] local name\n+ [pyenv-hooks:44] '[' -n /home/vagrant/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which/python-config.bash ']'\n+ [pyenv-hooks:45] name=python-config.bash\n+ [pyenv-hooks:46] '[' python-config.bash = /home/vagrant/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which/python-config.bash ']'\n+ [pyenv-hooks:46] cd /home/vagrant/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which\n++ [pyenv-hooks:47] resolve_link python-config.bash\n++ [pyenv-hooks:36] /bin/readlink python-config.bash\n++ [pyenv-hooks:47] true\n+ [pyenv-hooks:47] path=\n+ [pyenv-hooks:44] '[' -n '' ']'\n+ [pyenv-hooks:50] echo /home/vagrant/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which/python-config.bash\n+ [pyenv-hooks:51] cd /cygwin/code/gambit\n+ [pyenv-hooks:59] for script in '\"$path/$PYENV_COMMAND\"/*.bash'\n+ [pyenv-hooks:60] realpath /home/vagrant/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which/system-site-packages.bash\n+ [pyenv-hooks:40] local cwd=/cygwin/code/gambit\n+ [pyenv-hooks:41] local path=/home/vagrant/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which/system-site-packages.bash\n+ [pyenv-hooks:42] local name\n+ [pyenv-hooks:44] '[' -n /home/vagrant/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which/system-site-packages.bash ']'\n+ [pyenv-hooks:45] name=system-site-packages.bash\n+ [pyenv-hooks:46] '[' system-site-packages.bash = /home/vagrant/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which/system-site-packages.bash ']'\n+ [pyenv-hooks:46] cd /home/vagrant/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which\n++ [pyenv-hooks:47] resolve_link system-site-packages.bash\n++ [pyenv-hooks:36] /bin/readlink system-site-packages.bash\n++ [pyenv-hooks:47] true\n+ [pyenv-hooks:47] path=\n+ [pyenv-hooks:44] '[' -n '' ']'\n+ [pyenv-hooks:50] echo /home/vagrant/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which/system-site-packages.bash\n+ [pyenv-hooks:51] cd /cygwin/code/gambit\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:59] for script in '\"$path/$PYENV_COMMAND\"/*.bash'\n+ [pyenv-hooks:60] realpath /home/vagrant/.pyenv/plugins/pyenv-which-ext/etc/pyenv.d/which/lookup_from_path.bash\n+ [pyenv-hooks:40] local cwd=/cygwin/code/gambit\n+ [pyenv-hooks:41] local path=/home/vagrant/.pyenv/plugins/pyenv-which-ext/etc/pyenv.d/which/lookup_from_path.bash\n+ [pyenv-hooks:42] local name\n+ [pyenv-hooks:44] '[' -n /home/vagrant/.pyenv/plugins/pyenv-which-ext/etc/pyenv.d/which/lookup_from_path.bash ']'\n+ [pyenv-hooks:45] name=lookup_from_path.bash\n+ [pyenv-hooks:46] '[' lookup_from_path.bash = /home/vagrant/.pyenv/plugins/pyenv-which-ext/etc/pyenv.d/which/lookup_from_path.bash ']'\n+ [pyenv-hooks:46] cd /home/vagrant/.pyenv/plugins/pyenv-which-ext/etc/pyenv.d/which\n++ [pyenv-hooks:47] resolve_link lookup_from_path.bash\n++ [pyenv-hooks:36] /bin/readlink lookup_from_path.bash\n++ [pyenv-hooks:47] true\n+ [pyenv-hooks:47] path=\n+ [pyenv-hooks:44] '[' -n '' ']'\n+ [pyenv-hooks:50] echo /home/vagrant/.pyenv/plugins/pyenv-which-ext/etc/pyenv.d/which/lookup_from_path.bash\n+ [pyenv-hooks:51] cd /cygwin/code/gambit\n+ [pyenv-hooks:63] shopt -u nullglob\n+ [pyenv-which:55] IFS='\n'\n+ [pyenv-which:56] for script in '\"${scripts[@]}\"'\n+ [pyenv-which:57] source /home/vagrant/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which/python-config.bash\n++ [python-config.bash:6] '[' '!' -x /home/vagrant/.pyenv/versions/miniconda3-4.1.11/envs/gambit/bin/python ']'\n+ [pyenv-which:56] for script in '\"${scripts[@]}\"'\n+ [pyenv-which:57] source /home/vagrant/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which/system-site-packages.bash\n++ [system-site-packages.bash:6] '[' '!' -x /home/vagrant/.pyenv/versions/miniconda3-4.1.11/envs/gambit/bin/python ']'\n+ [pyenv-which:56] for script in '\"${scripts[@]}\"'\n+ [pyenv-which:57] source /home/vagrant/.pyenv/plugins/pyenv-which-ext/etc/pyenv.d/which/lookup_from_path.bash\n++ [lookup_from_path.bash:44] '[' -n python ']'\n++ [lookup_from_path.bash:44] '[' '!' -x /home/vagrant/.pyenv/versions/miniconda3-4.1.11/envs/gambit/bin/python ']'\n+ [pyenv-which:60] '[' -x /home/vagrant/.pyenv/versions/miniconda3-4.1.11/envs/gambit/bin/python ']'\n+ [pyenv-which:61] echo /home/vagrant/.pyenv/versions/miniconda3-4.1.11/envs/gambit/bin/python\n++ program=/home/vagrant/.pyenv/versions/miniconda3-4.1.11/envs/gambit/bin/python\n++ '[' -e /home/vagrant/.pyenv/versions/miniconda3-4.1.11/envs/gambit/bin/python ']'\n++ . /home/vagrant/.pyenv/versions/miniconda3-4.1.11/envs/gambit/bin/python\n/home/vagrant/.pyenv/shims/python: line 5: .: /home/vagrant/.pyenv/versions/miniconda3-4.1.11/envs/gambit/bin/python: cannot execute binary file. Also, if it makes a difference, at the time of the upgrade, I had this in my ~/.profile:\n```bash\nPYENV\nexport PYENV_ROOT=\"$HOME/.pyenv\"\nexport PATH=\"$PYENV_ROOT/bin:$PATH\"\nexport PYENV_VIRTUALENV_DISABLE_PROMPT=1\neval \"$(pyenv init -)\"\neval \"$(pyenv virtualenv-init -)\"\n```\nInstructions appear to have changed since I had installed everything and I'm now doing the above from my ~/.bashrc. But the errors with my old pyenv directory are the same.. Looks like that file ~was corrupted somehow~ matches that second version you listed and does not contain python:\n```bash\n$ cat ~/.pyenvbackup/pyenv.d/rehash/source.d/default.list\nvirtualenv\nactivate\nactivate.csh\nactivate.fish\ngettext (#688)\ngettext.sh\n``. > I'd recommend you to try rehashing again;PYENV_DEBUG=1 pyenv rehash`. It should generate source'able shim only if it is listed in the text files.\nI tried this and it generated 4k lines of output.\nAfter running it, python still returns the same error, but the log is ever so slightly different. Might be some environmental differences since my last email.\nbash\npyenv --version\nPYENV_DEBUG=1 python\n```bash\npyenv 1.1.4\n++ export PYENV_ROOT=/home/vagrant/.pyenv\n++ PYENV_ROOT=/home/vagrant/.pyenv\n+++ /home/vagrant/.pyenv/libexec/pyenv which python\n+ [pyenv:23] enable -f /home/vagrant/.pyenv/libexec/../libexec/pyenv-realpath.dylib realpath\n+ [pyenv:29] '[' -z '' ']'\n++ [pyenv:31] type -p greadlink readlink\n++ [pyenv:31] head -1\n+ [pyenv:31] READLINK=/bin/readlink\n+ [pyenv:32] '[' -n /bin/readlink ']'\n+ [pyenv:53] '[' -z /home/vagrant/.pyenv ']'\n+ [pyenv:56] PYENV_ROOT=/home/vagrant/.pyenv\n+ [pyenv:58] export PYENV_ROOT\n+ [pyenv:61] '[' -z '' ']'\n+ [pyenv:62] '[' -n '' ']'\n+ [pyenv:73] '[' -z '' ']'\n+ [pyenv:74] PYENV_DIR=/cygwin/code/gambit\n+ [pyenv:80] export PYENV_DIR\n+ [pyenv:83] shopt -s nullglob\n++ [pyenv:85] abs_dirname /home/vagrant/.pyenv/libexec/pyenv\n++ [pyenv:39] local cwd=/cygwin/code/gambit\n++ [pyenv:40] local path=/home/vagrant/.pyenv/libexec/pyenv\n++ [pyenv:42] '[' -n /home/vagrant/.pyenv/libexec/pyenv ']'\n++ [pyenv:43] cd /home/vagrant/.pyenv/libexec\n++ [pyenv:44] local name=pyenv\n+++ [pyenv:45] resolve_link pyenv\n+++ [pyenv:35] /bin/readlink pyenv\n+++ [pyenv:45] true\n++ [pyenv:45] path=\n++ [pyenv:42] '[' -n '' ']'\n++ [pyenv:48] pwd\n++ [pyenv:49] cd /cygwin/code/gambit\n+ [pyenv:85] bin_path=/home/vagrant/.pyenv/libexec\n+ [pyenv:86] for plugin_bin in '\"${PYENV_ROOT}/plugins/\"/bin'\n+ [pyenv:87] PATH=/home/vagrant/.pyenv/plugins/pyenv-virtualenv/bin:/home/vagrant/.node/bin:/home/vagrant/.pyenv/plugins/pyenv-virtualenv/shims:/home/vagrant/.pyenv/shims:/home/vagrant/.pyenv/bin:/cygwin/code/common-build/scripts:/home/vagrant/.pyenv/plugins/pyenv-virtualenv/shims:/home/vagrant/.pyenv/shims:/home/vagrant/.pyenv/bin:/cygwin/code/common-build/scripts:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/lib/jvm/java-8-oracle/bin:/usr/lib/jvm/java-8-oracle/db/bin:/usr/lib/jvm/java-8-oracle/jre/bin:/home/vagrant/protoc-3.0.0-linux-x86_64/bin:/home/vagrant/protoc-3.0.0-linux-x86_64/bin\n+ [pyenv:86] for plugin_bin in '\"${PYENV_ROOT}/plugins/\"/bin'\n+ [pyenv:87] PATH=/home/vagrant/.pyenv/plugins/python-build/bin:/home/vagrant/.pyenv/plugins/pyenv-virtualenv/bin:/home/vagrant/.node/bin:/home/vagrant/.pyenv/plugins/pyenv-virtualenv/shims:/home/vagrant/.pyenv/shims:/home/vagrant/.pyenv/bin:/cygwin/code/common-build/scripts:/home/vagrant/.pyenv/plugins/pyenv-virtualenv/shims:/home/vagrant/.pyenv/shims:/home/vagrant/.pyenv/bin:/cygwin/code/common-build/scripts:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/lib/jvm/java-8-oracle/bin:/usr/lib/jvm/java-8-oracle/db/bin:/usr/lib/jvm/java-8-oracle/jre/bin:/home/vagrant/protoc-3.0.0-linux-x86_64/bin:/home/vagrant/protoc-3.0.0-linux-x86_64/bin\n+ [pyenv:89] export PATH=/home/vagrant/.pyenv/libexec:/home/vagrant/.pyenv/plugins/python-build/bin:/home/vagrant/.pyenv/plugins/pyenv-virtualenv/bin:/home/vagrant/.node/bin:/home/vagrant/.pyenv/plugins/pyenv-virtualenv/shims:/home/vagrant/.pyenv/shims:/home/vagrant/.pyenv/bin:/cygwin/code/common-build/scripts:/home/vagrant/.pyenv/plugins/pyenv-virtualenv/shims:/home/vagrant/.pyenv/shims:/home/vagrant/.pyenv/bin:/cygwin/code/common-build/scripts:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/lib/jvm/java-8-oracle/bin:/usr/lib/jvm/java-8-oracle/db/bin:/usr/lib/jvm/java-8-oracle/jre/bin:/home/vagrant/protoc-3.0.0-linux-x86_64/bin:/home/vagrant/protoc-3.0.0-linux-x86_64/bin\n+ [pyenv:89] PATH=/home/vagrant/.pyenv/libexec:/home/vagrant/.pyenv/plugins/python-build/bin:/home/vagrant/.pyenv/plugins/pyenv-virtualenv/bin:/home/vagrant/.node/bin:/home/vagrant/.pyenv/plugins/pyenv-virtualenv/shims:/home/vagrant/.pyenv/shims:/home/vagrant/.pyenv/bin:/cygwin/code/common-build/scripts:/home/vagrant/.pyenv/plugins/pyenv-virtualenv/shims:/home/vagrant/.pyenv/shims:/home/vagrant/.pyenv/bin:/cygwin/code/common-build/scripts:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/lib/jvm/java-8-oracle/bin:/usr/lib/jvm/java-8-oracle/db/bin:/usr/lib/jvm/java-8-oracle/jre/bin:/home/vagrant/protoc-3.0.0-linux-x86_64/bin:/home/vagrant/protoc-3.0.0-linux-x86_64/bin\n+ [pyenv:91] PYENV_HOOK_PATH=:/home/vagrant/.pyenv/pyenv.d\n+ [pyenv:92] '[' /home/vagrant/.pyenv '!=' /home/vagrant/.pyenv ']'\n+ [pyenv:96] PYENV_HOOK_PATH=:/home/vagrant/.pyenv/pyenv.d:/usr/local/etc/pyenv.d:/etc/pyenv.d:/usr/lib/pyenv/hooks\n+ [pyenv:97] for plugin_hook in '\"${PYENV_ROOT}/plugins/\"/etc/pyenv.d'\n+ [pyenv:98] PYENV_HOOK_PATH=:/home/vagrant/.pyenv/pyenv.d:/usr/local/etc/pyenv.d:/etc/pyenv.d:/usr/lib/pyenv/hooks:/home/vagrant/.pyenv/plugins/pyenv-pip-rehash/etc/pyenv.d\n+ [pyenv:97] for plugin_hook in '\"${PYENV_ROOT}/plugins/\"/etc/pyenv.d'\n+ [pyenv:98] PYENV_HOOK_PATH=:/home/vagrant/.pyenv/pyenv.d:/usr/local/etc/pyenv.d:/etc/pyenv.d:/usr/lib/pyenv/hooks:/home/vagrant/.pyenv/plugins/pyenv-pip-rehash/etc/pyenv.d:/home/vagrant/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d\n+ [pyenv:97] for plugin_hook in '\"${PYENV_ROOT}/plugins/\"/etc/pyenv.d'\n+ [pyenv:98] PYENV_HOOK_PATH=:/home/vagrant/.pyenv/pyenv.d:/usr/local/etc/pyenv.d:/etc/pyenv.d:/usr/lib/pyenv/hooks:/home/vagrant/.pyenv/plugins/pyenv-pip-rehash/etc/pyenv.d:/home/vagrant/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d:/home/vagrant/.pyenv/plugins/pyenv-which-ext/etc/pyenv.d\n+ [pyenv:100] PYENV_HOOK_PATH=/home/vagrant/.pyenv/pyenv.d:/usr/local/etc/pyenv.d:/etc/pyenv.d:/usr/lib/pyenv/hooks:/home/vagrant/.pyenv/plugins/pyenv-pip-rehash/etc/pyenv.d:/home/vagrant/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d:/home/vagrant/.pyenv/plugins/pyenv-which-ext/etc/pyenv.d\n+ [pyenv:101] export PYENV_HOOK_PATH\n+ [pyenv:103] shopt -u nullglob\n+ [pyenv:106] command=which\n+ [pyenv:107] case \"$command\" in\n++ [pyenv:120] command -v pyenv-which\n+ [pyenv:120] command_path=/home/vagrant/.pyenv/libexec/pyenv-which\n+ [pyenv:121] '[' -n /home/vagrant/.pyenv/libexec/pyenv-which ']'\n+ [pyenv:123] shift 1\n+ [pyenv:124] '[' python = --help ']'\n+ [pyenv:131] exec /home/vagrant/.pyenv/libexec/pyenv-which python\n+ [pyenv-which:14] '[' python = --complete ']'\n+ [pyenv-which:30] PYENV_COMMAND=python\n+ [pyenv-which:32] '[' -z python ']'\n+ [pyenv-which:37] OLDIFS='   \n'\n+ [pyenv-which:38] IFS=:\n+ [pyenv-which:38] versions=(${PYENV_VERSION:-$(pyenv-version-name)})\n++ [pyenv-which:38] pyenv-version-name\n+ [pyenv-version-name:6] '[' -z '' ']'\n++ [pyenv-version-name:7] pyenv-version-file\n+ [pyenv-version-file:7] target_dir=\n+ [pyenv-version-file:22] '[' -n '' ']'\n+ [pyenv-version-file:25] find_local_version_file /cygwin/code/gambit\n+ [pyenv-version-file:10] local root=/cygwin/code/gambit\n+ [pyenv-version-file:11] [[ /cygwin/code/gambit =~ ^//[^/]$ ]]\n+ [pyenv-version-file:12] '[' -f /cygwin/code/gambit/.python-version ']'\n+ [pyenv-version-file:13] echo /cygwin/code/gambit/.python-version\n+ [pyenv-version-file:14] return 0\n+ [pyenv-version-name:7] PYENV_VERSION_FILE=/cygwin/code/gambit/.python-version\n++ [pyenv-version-name:8] pyenv-version-file-read /cygwin/code/gambit/.python-version\n+ [pyenv-version-file-read:6] VERSION_FILE=/cygwin/code/gambit/.python-version\n+ [pyenv-version-file-read:8] '[' -e /cygwin/code/gambit/.python-version ']'\n+ [pyenv-version-file-read:11] IFS='    \n'\n+ [pyenv-version-file-read:12] words=($(cut -b 1-1024 \"$VERSION_FILE\" | sed 's/^\\s(\\S+)./\\1/'))\n++ [pyenv-version-file-read:12] sed 's/^\\s(\\S+)./\\1/'\n+ [pyenv-version-file-read:13] versions=(\"${words[@]}\")\n+ [pyenv-version-file-read:15] '[' -n miniconda3-4.1.11/envs/gambit ']'\n+ [pyenv-version-file-read:16] IFS=:\n+ [pyenv-version-file-read:17] echo miniconda3-4.1.11/envs/gambit\n+ [pyenv-version-file-read:18] exit\n+ [pyenv-version-name:8] PYENV_VERSION=miniconda3-4.1.11/envs/gambit\n+ [pyenv-version-name:11] OLDIFS='\n'\n+ [pyenv-version-name:12] IFS='\n'\n+ [pyenv-version-name:12] scripts=(pyenv-hooks version-name)\n++ [pyenv-version-name:12] pyenv-hooks version-name\n+ [pyenv-hooks:9] '[' version-name = --complete ']'\n+ [pyenv-hooks:18] PYENV_COMMAND=version-name\n+ [pyenv-hooks:19] '[' -z version-name ']'\n+ [pyenv-hooks:24] enable -f /home/vagrant/.pyenv/libexec/pyenv-realpath.dylib realpath\n+ [pyenv-hooks:25] '[' -n '' ']'\n++ [pyenv-hooks:29] type -p greadlink readlink\n++ [pyenv-hooks:29] head -1\n+ [pyenv-hooks:29] READLINK=/bin/readlink\n+ [pyenv-hooks:30] '[' -z /bin/readlink ']'\n+ [pyenv-hooks:55] IFS=:\n+ [pyenv-hooks:55] hook_paths=($PYENV_HOOK_PATH)\n+ [pyenv-hooks:57] shopt -s nullglob\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:63] shopt -u nullglob\n+ [pyenv-version-name:13] IFS='   \n'\n+ [pyenv-version-name:18] '[' -z miniconda3-4.1.11/envs/gambit ']'\n+ [pyenv-version-name:18] '[' miniconda3-4.1.11/envs/gambit = system ']'\n+ [pyenv-version-name:28] versions=()\n+ [pyenv-version-name:29] OLDIFS='\n'\n+ [pyenv-version-name:30] IFS=:\n+ [pyenv-version-name:31] any_not_installed=0\n+ [pyenv-version-name:32] for version in '${PYENV_VERSION}'\n+ [pyenv-version-name:33] version_exists miniconda3-4.1.11/envs/gambit\n+ [pyenv-version-name:24] local version=miniconda3-4.1.11/envs/gambit\n+ [pyenv-version-name:25] '[' -d /home/vagrant/.pyenv/versions/miniconda3-4.1.11/envs/gambit ']'\n+ [pyenv-version-name:34] versions=(\"${versions[@]}\" \"${version}\")\n+ [pyenv-version-name:43] IFS='   \n'\n+ [pyenv-version-name:45] OLDIFS='\n'\n+ [pyenv-version-name:46] IFS=:\n+ [pyenv-version-name:47] echo miniconda3-4.1.11/envs/gambit\n+ [pyenv-version-name:49] IFS='   \n'\n+ [pyenv-version-name:51] '[' 0 = 1 ']'\n+ [pyenv-which:39] IFS='  \n'\n+ [pyenv-which:41] for version in '\"${versions[@]}\"'\n+ [pyenv-which:42] '[' miniconda3-4.1.11/envs/gambit = system ']'\n+ [pyenv-which:46] PYENV_COMMAND_PATH=/home/vagrant/.pyenv/versions/miniconda3-4.1.11/envs/gambit/bin/python\n+ [pyenv-which:48] '[' -x /home/vagrant/.pyenv/versions/miniconda3-4.1.11/envs/gambit/bin/python ']'\n+ [pyenv-which:49] break\n+ [pyenv-which:53] OLDIFS='   \n'\n+ [pyenv-which:54] IFS='\n'\n+ [pyenv-which:54] scripts=(pyenv-hooks which)\n++ [pyenv-which:54] pyenv-hooks which\n+ [pyenv-hooks:9] '[' which = --complete ']'\n+ [pyenv-hooks:18] PYENV_COMMAND=which\n+ [pyenv-hooks:19] '[' -z which ']'\n+ [pyenv-hooks:24] enable -f /home/vagrant/.pyenv/libexec/pyenv-realpath.dylib realpath\n+ [pyenv-hooks:25] '[' -n '' ']'\n++ [pyenv-hooks:29] head -1\n+ [pyenv-hooks:29] READLINK=/bin/readlink\n+ [pyenv-hooks:30] '[' -z /bin/readlink ']'\n+ [pyenv-hooks:55] IFS=:\n+ [pyenv-hooks:55] hook_paths=($PYENV_HOOK_PATH)\n+ [pyenv-hooks:57] shopt -s nullglob\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:59] for script in '\"$path/$PYENV_COMMAND\"/.bash'\n+ [pyenv-hooks:60] realpath /home/vagrant/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which/python-config.bash\n+ [pyenv-hooks:40] local cwd=/cygwin/code/gambit\n+ [pyenv-hooks:41] local path=/home/vagrant/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which/python-config.bash\n+ [pyenv-hooks:42] local name\n+ [pyenv-hooks:44] '[' -n /home/vagrant/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which/python-config.bash ']'\n+ [pyenv-hooks:45] name=python-config.bash\n+ [pyenv-hooks:46] '[' python-config.bash = /home/vagrant/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which/python-config.bash ']'\n+ [pyenv-hooks:46] cd /home/vagrant/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which\n++ [pyenv-hooks:47] resolve_link python-config.bash\n++ [pyenv-hooks:36] /bin/readlink python-config.bash\n++ [pyenv-hooks:47] true\n+ [pyenv-hooks:47] path=\n+ [pyenv-hooks:44] '[' -n '' ']'\n+ [pyenv-hooks:50] echo /home/vagrant/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which/python-config.bash\n+ [pyenv-hooks:51] cd /cygwin/code/gambit\n+ [pyenv-hooks:59] for script in '\"$path/$PYENV_COMMAND\"/.bash'\n+ [pyenv-hooks:60] realpath /home/vagrant/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which/system-site-packages.bash\n+ [pyenv-hooks:40] local cwd=/cygwin/code/gambit\n+ [pyenv-hooks:41] local path=/home/vagrant/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which/system-site-packages.bash\n+ [pyenv-hooks:42] local name\n+ [pyenv-hooks:44] '[' -n /home/vagrant/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which/system-site-packages.bash ']'\n+ [pyenv-hooks:45] name=system-site-packages.bash\n+ [pyenv-hooks:46] '[' system-site-packages.bash = /home/vagrant/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which/system-site-packages.bash ']'\n+ [pyenv-hooks:46] cd /home/vagrant/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which\n++ [pyenv-hooks:47] resolve_link system-site-packages.bash\n++ [pyenv-hooks:36] /bin/readlink system-site-packages.bash\n++ [pyenv-hooks:47] true\n+ [pyenv-hooks:47] path=\n+ [pyenv-hooks:44] '[' -n '' ']'\n+ [pyenv-hooks:50] echo /home/vagrant/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which/system-site-packages.bash\n+ [pyenv-hooks:51] cd /cygwin/code/gambit\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:59] for script in '\"$path/$PYENV_COMMAND\"/*.bash'\n+ [pyenv-hooks:60] realpath /home/vagrant/.pyenv/plugins/pyenv-which-ext/etc/pyenv.d/which/lookup_from_path.bash\n+ [pyenv-hooks:40] local cwd=/cygwin/code/gambit\n+ [pyenv-hooks:41] local path=/home/vagrant/.pyenv/plugins/pyenv-which-ext/etc/pyenv.d/which/lookup_from_path.bash\n+ [pyenv-hooks:42] local name\n+ [pyenv-hooks:44] '[' -n /home/vagrant/.pyenv/plugins/pyenv-which-ext/etc/pyenv.d/which/lookup_from_path.bash ']'\n+ [pyenv-hooks:45] name=lookup_from_path.bash\n+ [pyenv-hooks:46] '[' lookup_from_path.bash = /home/vagrant/.pyenv/plugins/pyenv-which-ext/etc/pyenv.d/which/lookup_from_path.bash ']'\n+ [pyenv-hooks:46] cd /home/vagrant/.pyenv/plugins/pyenv-which-ext/etc/pyenv.d/which\n++ [pyenv-hooks:47] resolve_link lookup_from_path.bash\n++ [pyenv-hooks:36] /bin/readlink lookup_from_path.bash\n++ [pyenv-hooks:47] true\n+ [pyenv-hooks:47] path=\n+ [pyenv-hooks:44] '[' -n '' ']'\n+ [pyenv-hooks:50] echo /home/vagrant/.pyenv/plugins/pyenv-which-ext/etc/pyenv.d/which/lookup_from_path.bash\n+ [pyenv-hooks:51] cd /cygwin/code/gambit\n+ [pyenv-hooks:63] shopt -u nullglob\n+ [pyenv-which:55] IFS='  \n'\n+ [pyenv-which:56] for script in '\"${scripts[@]}\"'\n+ [pyenv-which:57] source /home/vagrant/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which/python-config.bash\n++ [python-config.bash:6] '[' '!' -x /home/vagrant/.pyenv/versions/miniconda3-4.1.11/envs/gambit/bin/python ']'\n+ [pyenv-which:56] for script in '\"${scripts[@]}\"'\n+ [pyenv-which:57] source /home/vagrant/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which/system-site-packages.bash\n++ [system-site-packages.bash:6] '[' '!' -x /home/vagrant/.pyenv/versions/miniconda3-4.1.11/envs/gambit/bin/python ']'\n+ [pyenv-which:56] for script in '\"${scripts[@]}\"'\n+ [pyenv-which:57] source /home/vagrant/.pyenv/plugins/pyenv-which-ext/etc/pyenv.d/which/lookup_from_path.bash\n++ [lookup_from_path.bash:44] '[' -n python ']'\n++ [lookup_from_path.bash:44] '[' '!' -x /home/vagrant/.pyenv/versions/miniconda3-4.1.11/envs/gambit/bin/python ']'\n+ [pyenv-which:60] '[' -x /home/vagrant/.pyenv/versions/miniconda3-4.1.11/envs/gambit/bin/python ']'\n+ [pyenv-which:61] echo /home/vagrant/.pyenv/versions/miniconda3-4.1.11/envs/gambit/bin/python\n++ program=/home/vagrant/.pyenv/versions/miniconda3-4.1.11/envs/gambit/bin/python\n++ '[' -e /home/vagrant/.pyenv/versions/miniconda3-4.1.11/envs/gambit/bin/python ']'\n++ . /home/vagrant/.pyenv/versions/miniconda3-4.1.11/envs/gambit/bin/python\n/home/vagrant/.pyenv/shims/python: line 5: .: /home/vagrant/.pyenv/versions/miniconda3-4.1.11/envs/gambit/bin/python: cannot execute binary file\n. Note that the pyenv-which returns the proper executable and will also run just fine:bash\n$ python\n/home/vagrant/.pyenv/shims/python: line 5: .: /home/vagrant/.pyenv/versions/miniconda3-4.1.11/envs/gambit/bin/python: cannot execute binary file\n$ pyenv which python\n/home/vagrant/.pyenv/versions/miniconda3-4.1.11/envs/gambit/bin/python\n $ pyenv which pythonPython 3.6.2 |Continuum Analytics, Inc.| (default, Jul 20 2017, 13:51:32)\n[GCC 4.4.7 20120313 (Red Hat 4.4.7-1)] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n\n\n```\n\n\n\nLet me know if there's anything else that I can provide to help.\nI forgot to mention this, but I'm running on an Ubuntu VM:\nbash\n$ lsb_release -a\nNo LSB modules are available.\nDistributor ID: Ubuntu\nDescription:    Ubuntu 14.04 LTS\nRelease:        14.04\nCodename:       trusty. How often would you actually do this?. https://conda.io/docs/user-guide/tasks/manage-python.html. ",
    "dstufft": "Awesome, do you think a release could be tagged too? :)\n. Is it possible to get a release out that has this PR in it? :D\n. Awesome, thanks.. ",
    "kevinburkeshyp": "Weird.. I had both installed, the version I cloned showed up first in my  PATH, yet somehow the homebrew version was running.\nDeleted the homebrew version and now the pyenv install command is missing... working through it now.\n. ",
    "sidazad": "Hi Yamashita - It was a compilation issue. I was trying to install libxml2 from the source but it seemed to be linking to the default mac osx framework python includes. I was able to solve the problem by temporarily renaming the Framework python include directory to something else and then linking libxml2 and then manually copying over the generated libs (from python setup.py install inside of libxml2/python) into the .pyenv site-packages directory. \nThat worked. Phew!\nThanks for the reply though.\n. ",
    "n8henrie": "Ah, okay. I expected it to output the path to the executable even if that wasn't the active pyenv. Easy enough to implement in a little alias.\n$ function find_pyenv() { find -L ${PYENV_ROOT} -ipath \"*/bin/$1\"; }\n$ find_pyenv python3.3\n/usr/local/opt/pyenv/versions/3.3.6/bin/python3.3\n$ $(pyenv which python3) --version\nPython 3.4.3\n. Awesome! \nWhen I saw the relevant part of the readme, I assumed this only allowed for a single python3 and a single python2, based on the example.\n\nNOTE: You can activate multiple versions at the same time, e.g. pyenv global 3.4.2 2.7.8. This allows for parallel usage of python2 and python3, and is required with tools like tox.\n\nWould anyone mind if I updated the readme with an example that makes this more clear? E.g.\nbash\n$ pyenv global system 3.3.6 3.2 2.5\n$ penv version\nsystem (set by /usr/local/opt/pyenv/version)\n3.3.6 (set by /usr/local/opt/pyenv/version)\n3.2 (set by /usr/local/opt/pyenv/version)\n2.5 (set by /usr/local/opt/pyenv/version)\n. And please use...? Did that sentence get cut off?\n. https://github.com/yyuu/pyenv/pull/362\n. If anyone ends up here after Googling (like I did), I just ran into the same error, but not related to pyenv-virtualenv in any way to my knowledge:\n/home/raspi/.pyenv/libexec/pyenv-which: line 43: command: -b: invalid option\ncommand: usage: command [-pVv] command [arg ...]\npyenv: -bash: command not found\nConnection to raspi.local closed.\nEvery time I sourced my .bashrc (with my pyenv init stuff), I'd get kicked off the SSH connection, as seems to be the case with the OP here. The really odd thing was I hadn't changed my .bashrc setup.\nI'm not exactly sure what caused the error, but I figured I'd try a pyenv rehash, and I got another error:\n$ pyenv rehash\npyenv: cannot rehash: /home/raspi/.pyenv/shims/.pyenv-shim exists\nAfter inspecting and backing up that file, I tried deleting it: rm /home/raspi/.pyenv/shims/.pyenv-shim and afterwards both errors were fixed. Not sure why.\n. I downloaded the binary directly (https://bitbucket.org/pypy/pypy/downloads/pypy3-2.4.0-linux-armhf-raspbian.tar.bz2) and when trying to run it, I get: bin/pypy3: error while loading shared libraries: libffi.so.5: cannot open shared object file: No such file or directory\nLooks like Jessie provides libffi6.\n. Not having any luck with pyenv install pypy3-2.4.0-src -- after a while it locks up the Pi to the point that the watchdog restarts it. Disabled the watchdog and let it run overnight, and in the morning was still locked up and unable to access over SSH. As the Pi 3 is the latest / fastest, I'm wondering if anyone else has been able to use the pypy -src builds on an RPi?\n. Looks like pypy explicitly requires something like 4g of ram to build from source, even if you have an existing pypy installation to help (see the message if you try to manually build from source -- ie not within pyenv), which may explain why it trips my watchdog.\nFWIW, I've now tried cross-compiling pypy3-2.4.0 on my Macbook Air in a few different ways (docker, crosstool-ng) with no luck.\n. Explicitly installing the dependencies -- including the addition of libffi5 (since libffi6 is what comes with Jessie) -- seems to have resolved the issue. I was concerned this would overwrite my libffi6 files or symlinks, but they appear to be just fine. The list of dependencies I install below is the official list from pypy.org with the addition of libffi5, and I took out tk-dev because my Pi is headless and I don't want to install all the X stuff.\n``` bash\n $ ls -l /usr/lib/arm-linux-gnueabihf/libffi*\n-rw-r--r-- 1 root root 33016 Jun  9  2014 /usr/lib/arm-linux-gnueabihf/libffi.a\n-rw-r--r-- 1 root root 34796 Jun  9  2014 /usr/lib/arm-linux-gnueabihf/libffi_pic.a\nlrwxrwxrwx 1 root root    15 Jun  9  2014 /usr/lib/arm-linux-gnueabihf/libffi.so -> libffi.so.6.0.2\nlrwxrwxrwx 1 root root    15 Jun  9  2014 /usr/lib/arm-linux-gnueabihf/libffi.so.6 -> libffi.so.6.0.2\n-rw-r--r-- 1 root root 30368 Jun  9  2014 /usr/lib/arm-linux-gnueabihf/libffi.so.6.0.2\n$ sudo apt-get install gcc make libffi-dev libffi5 pkg-config libz-dev libbz2-dev libsqlite3-dev libncurses-dev libexpat1-dev libssl-dev libgdbm-dev libgc-dev liblzma-dev\n$ sudo ldconfig\n$ ls -l /usr/lib/arm-linux-gnueabihf/libffi*\n-rw-r--r-- 1 root root 33016 Jun  9  2014 /usr/lib/arm-linux-gnueabihf/libffi.a\n-rw-r--r-- 1 root root 34796 Jun  9  2014 /usr/lib/arm-linux-gnueabihf/libffi_pic.a\nlrwxrwxrwx 1 root root    15 Jun  9  2014 /usr/lib/arm-linux-gnueabihf/libffi.so -> libffi.so.6.0.2\nlrwxrwxrwx 1 root root    16 Jun 13  2013 /usr/lib/arm-linux-gnueabihf/libffi.so.5 -> libffi.so.5.0.10\n-rw-r--r-- 1 root root 49712 Jun 13  2013 /usr/lib/arm-linux-gnueabihf/libffi.so.5.0.10\nlrwxrwxrwx 1 root root    15 Jun  9  2014 /usr/lib/arm-linux-gnueabihf/libffi.so.6 -> libffi.so.6.0.2\n-rw-r--r-- 1 root root 30368 Jun  9  2014 /usr/lib/arm-linux-gnueabihf/libffi.so.6.0.2\n$ pyenv install pypy3-2.4.0\nDownloading pypy3-2.4.0-linux-armhf-raspbian.tar.bz2...\n-> https://bitbucket.org/pypy/pypy/downloads/pypy3-2.4.0-linux-armhf-raspbian.tar.bz2\nInstalling pypy3-2.4.0-linux-armhf-raspbian...\nInstalling pip from https://bootstrap.pypa.io/get-pip.py...\nInstalled pypy3-2.4.0-linux-armhf-raspbian to /opt/pyenv/versions/pypy3-2.4.0\n$ pypy3 --version\nPython 3.2.5 (b2091e973da6, Oct 19 2014, 18:31:30)\n[PyPy 2.4.0 with GCC 4.7.2 20120731 (prerelease)]\n```\nSweet!\n. Same error with 10.14.1 (and XCode 10.1).. Removing binutils seems to have solved the issue. Thanks @caipre and @binbjz!. ",
    "swashcap": "Running into this:\ncaught per expectationpyenv: cannot rehash: /home/rof/.pyenv/shims/.pyenv-shim exists\nWe\u2019re executing multiple python child processes in parallel-ish. Having a PYENV_NOREHASH would help us out a ton!. ",
    "robot527": "I'm a newer to pyenv.\nMy system is Ubuntu 14.10(32bit) .\nI want to know that  could I manage multiple versions of Python without using the command \" pyenv install x.y.z \".\n:~$ pyenv versions\n  system\n* 2.7.9 (set by /home/luoyz/.python-version)\n:~$ python3\nPython 3.4.2 (default, Oct  8 2014, 13:18:07) \n[GCC 4.9.1] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n. I see.\nThanks a lot! @blueyed \n. ",
    "paulochf": "I'll use this thread since it's the problem pointed in the title.\nI'm using pyenv and virtualenvwrapper, don't know what's going on. Trying to change the versions of Python used by a project (below happens inside its folder) with a virtualenv set, but it seems not to work. I  would like some help.\n```\n$ pyenv versions \n  system\n* 2.7 (set by /home/paulo/path/to/project/.python-version)\n  2.7.9 \n  3.4.3\n$ python --version\nPython 2.7\n$ pyenv local 2.7.9\n$ python --version\nPython 2.7.9\n$ workon proj-env-2.7.9\n(proj-env-2.7.9)\n$ python --version\nPython 2.7.9\n(proj-env-2.7.9)\n$ pyenv versions \n  system\n* 2.7 (set by /home/paulo/path/to/project/.python-version)\n  2.7.9 \n  3.4.3\n```\nEdit: Is pyenv local <version> meant to change version only when no virtualenv is active?\nEdit2: for the record, it can be related to yyuu/pyenv/issues/331\nThanks!\n. ",
    "IntelligentFunction": "Maybe a link to the manual would be useful, as I can't get pyenv to do anything, claims no python is installed at all.\n. Found it, ignore me, my eyes don't work the way I thought they did.\n. ",
    "Alex3917": "Thanks so much! Adding the executable parameter worked, at least once I got pip installed into the virtualenv. \n. ",
    "sigkill": "Using bash on Ubuntu 14.04 LTS - I can re-run with more output.\nI can confirm that as soon as I moved the directory / complete git clone of this project out of my encrypted home dir I was able to run make successfully under the same shell.\n\"root@kilgore:/tmp/PYTHON_BUILD_ROOT/pyenv# chsh\nChanging the login shell for root\nEnter the new value, or press ENTER for the default\n        Login Shell [/bin/bash]:\"\nAs root in the user dir:\nroot@kilgore:/home/user/code/pyenv# make\nPATH=\"./bats/bin:$PATH\" test/run\n \u2713 commands\n \u2713 commands --sh\n \u2713 commands in path with spaces\n \u2713 commands --no-sh\n \u2713 command with no completion support\n \u2713 command with completion support\n \u2713 forwards extra arguments\n \u2713 fails with invalid version\n \u2713 completes with names of executables\n \u2713 supports hook path with spaces\n \u2713 carries original IFS within hooks\n \u2713 forwards all arguments\n \u2713 supports python -S \n \u2713 default\n \u2713 read PYENV_ROOT/version\n \u2713 set PYENV_ROOT/version\n \u2713 fail setting invalid PYENV_ROOT/version\n \u2713 without args shows summary of common commands\n \u2713 invalid command\n \u2713 shows help for a specific command\n \u2713 replaces missing extended help with summary text\n \u2713 extracts only usage\n \u2713 multiline usage section\n \u2713 multiline extended help section\n \u2713 prints usage help given no argument\n \u2713 prints list of hooks\n \u2713 supports hook paths with spaces\n \u2713 resolves relative paths\n \u2713 resolves symlinks\n \u2713 creates shims and versions directories\n \u2713 auto rehash\n \u2713 setup shell completions\n \u2713 detect parent shell\n \u2713 setup shell completions (fish)\n \u2713 fish instructions\n \u2713 option to skip rehash\n \u2713 adds shims to PATH\n \u2713 adds shims to PATH (fish)\n \u2713 can add shims to PATH more than once\n \u2713 doesn't add shims to PATH more than once (fish)\n \u2713 outputs sh-compatible syntax\n \u2713 outputs fish-specific syntax (fish)\n \u2713 no version\n \u2713 local version\n \u2713 supports legacy .pyenv-version file\n \u2713 local .python-version has precedence over .pyenv-version\n \u2713 ignores version in parent directory\n \u2713 ignores PYENV_DIR\n \u2713 sets local version\n \u2713 changes local version\n \u2713 renames .pyenv-version to .python-version\n \u2713 doesn't rename .pyenv-version if changing the version failed\n \u2713 unsets local version\n \u2713 unsets alternate version file\n \u2713 prefix\n \u2713 prefix for invalid version\n \u2713 prefix for system\n \u2713 prefix for invalid system\n \u2713 blank invocation\n \u2713 invalid command\n \u2713 default PYENV_ROOT\n \u2713 inherited PYENV_ROOT\n \u2713 default PYENV_DIR\n \u2713 inherited PYENV_DIR\n \u2713 invalid PYENV_DIR\n \u2713 adds its own libexec to PATH\n \u2713 adds plugin bin dirs to PATH\n \u2713 PYENV_HOOK_PATH preserves value from environment\n \u2713 PYENV_HOOK_PATH includes pyenv built-in plugins\n \u2713 empty rehash\n \u2717 non-writable shims directory\n   (from function flunk' in file test/test_helper.bash, line 36,\n    from functionassert_failure' in file test/test_helper.bash, line 49,\n    in test file test/rehash.bats, line 24)\n     `assert_failure \"pyenv: cannot rehash: ${PYENV_ROOT}/shims isn't writable\"' failed\n   expected failed exit status\n \u2713 rehash in progress\n \u2713 creates shims\n \u2713 removes stale shims\n \u2713 binary install locations containing spaces\n \u2713 carries original IFS within hooks\n \u2713 sh-rehash in bash\n \u2713 sh-rehash in fish\n \u2713 no shell version\n \u2713 shell version\n \u2713 shell version (fish)\n \u2713 shell unset\n \u2713 shell unset (fish)\n \u2713 shell change invalid version\n \u2713 shell change version\n \u2713 shell change version (fish)\n \u2713 no shims\n \u2713 shims\n \u2713 shims --short\n \u2713 default version\n \u2713 reads version from git repo\n \u2713 prints default version if no tags in git repo\n \u2713 no version selected\n \u2713 set by PYENV_VERSION\n \u2713 set by local file\n \u2713 set by global file\n \u2713 prints global file if no version files exist\n \u2713 detects 'global' file\n \u2713 detects 'default' file\n \u2713 'version' has precedence over 'global' and 'default'\n \u2713 in current directory\n \u2713 legacy file in current directory\n \u2713 .python-version has precedence over legacy file\n \u2713 in parent directory\n \u2713 topmost file has precedence\n \u2713 legacy file has precedence if higher\n \u2713 PYENV_DIR has precedence over PWD\n \u2713 PWD is searched if PYENV_DIR yields no results\n \u2713 fails without arguments\n \u2713 fails for invalid file\n \u2713 fails for blank file\n \u2713 reads simple version file\n \u2713 ignores leading spaces\n \u2713 reads only the first word from file\n \u2713 loads not only the first line in file\n \u2713 ignores leading blank lines\n \u2713 handles the file with no trailing newline\n \u2713 ignores carriage returns\n \u2713 invocation without 2 arguments prints usage\n \u2713 setting nonexistent version fails\n \u2713 writes value to arbitrary file\n \u2713 no version selected\n \u2713 system version is not checked for existance\n \u2713 PYENV_VERSION has precedence over local\n \u2713 local file has precedence over global\n \u2713 missing version\n \u2713 version with prefix in name\n \u2713 reports global file even if it doesn't exist\n \u2713 detects global file\n \u2713 detects PYENV_VERSION\n \u2713 detects local file\n \u2713 detects alternate version file\n \u2713 no versions installed\n \u2713 not even system python available\n \u2713 bare output no versions installed\n \u2713 single version installed\n \u2713 single version bare\n \u2713 multiple versions\n \u2713 indicates current version\n \u2713 bare doesn't indicate current version\n \u2713 globally selected version\n \u2713 per-project version\n \u2713 ignores non-directories under versions\n \u2713 lists symlinks under versions\n \u2713 finds versions where present\n \u2713 outputs path to executable\n \u2713 searches PATH for system version\n \u2713 searches PATH for system version (shims prepended)\n \u2713 searches PATH for system version (shims appended)\n \u2713 searches PATH for system version (shims spread)\n \u2713 version not installed\n \u2713 versions not installed\n \u2713 no executable found\n \u2713 executable found in other versions\n \u2713 carries original IFS within hooks\n \u2713 discovers version from pyenv-version-name\n156 tests, 1 failure\nmake: *** [test] Error 1\nAs the user, initial tests pass but then fail while in the encrypted dir:\nuser@kilgore:~/code/pyenv$ make\nPATH=\"./bats/bin:$PATH\" test/run\n \u2713 commands\n \u2713 commands --sh\n \u2713 commands in path with spaces\n \u2713 commands --no-sh\n \u2713 command with no completion support\n \u2713 command with completion support\n \u2713 forwards extra arguments\n \u2713 fails with invalid version\n \u2713 completes with names of executables\n \u2713 supports hook path with spaces\n \u2713 carries original IFS within hooks\n \u2713 forwards all arguments\n \u2713 supports python -S \n \u2713 default\n \u2713 read PYENV_ROOT/version\n \u2713 set PYENV_ROOT/version\n \u2713 fail setting invalid PYENV_ROOT/version\n \u2713 without args shows summary of common commands\n \u2713 invalid command\n \u2713 shows help for a specific command\n \u2713 replaces missing extended help with summary text\n \u2713 extracts only usage\n \u2713 multiline usage section\n \u2713 multiline extended help section\n \u2713 prints usage help given no argument\n \u2713 prints list of hooks\n \u2713 supports hook paths with spaces\n \u2713 resolves relative paths\n \u2713 resolves symlinks\n \u2713 creates shims and versions directories\n \u2713 auto rehash\n \u2713 setup shell completions\n \u2713 detect parent shell\n \u2713 setup shell completions (fish)\n \u2713 fish instructions\n \u2713 option to skip rehash\n \u2713 adds shims to PATH\n \u2713 adds shims to PATH (fish)\n \u2713 can add shims to PATH more than once\n \u2713 doesn't add shims to PATH more than once (fish)\n \u2713 outputs sh-compatible syntax\n \u2713 outputs fish-specific syntax (fish)\n \u2713 no version\n \u2713 local version\n \u2713 supports legacy .pyenv-version file\n \u2713 local .python-version has precedence over .pyenv-version\n \u2713 ignores version in parent directory\n \u2713 ignores PYENV_DIR\n \u2713 sets local version\n \u2713 changes local version\n \u2713 renames .pyenv-version to .python-version\n \u2713 doesn't rename .pyenv-version if changing the version failed\n \u2713 unsets local version\n \u2713 unsets alternate version file\n \u2713 prefix\n \u2713 prefix for invalid version\n \u2713 prefix for system\n \u2713 prefix for invalid system\n \u2713 blank invocation\n \u2713 invalid command\n \u2713 default PYENV_ROOT\n \u2713 inherited PYENV_ROOT\n \u2713 default PYENV_DIR\n \u2713 inherited PYENV_DIR\n \u2713 invalid PYENV_DIR\n \u2713 adds its own libexec to PATH\n \u2713 adds plugin bin dirs to PATH\n \u2713 PYENV_HOOK_PATH preserves value from environment\n \u2713 PYENV_HOOK_PATH includes pyenv built-in plugins\n \u2713 empty rehash\n \u2713 non-writable shims directory\n \u2713 rehash in progress\n \u2713 creates shims\n \u2713 removes stale shims\n \u2713 binary install locations containing spaces\n \u2713 carries original IFS within hooks\n \u2713 sh-rehash in bash\n \u2713 sh-rehash in fish\n \u2713 no shell version\n \u2713 shell version\n \u2713 shell version (fish)\n \u2713 shell unset\n \u2713 shell unset (fish)\n \u2713 shell change invalid version\n \u2713 shell change version\n \u2713 shell change version (fish)\n \u2713 no shims\n \u2713 shims\n \u2713 shims --short\n \u2713 default version\n \u2713 reads version from git repo\n \u2713 prints default version if no tags in git repo\n \u2713 no version selected\n \u2713 set by PYENV_VERSION\n \u2713 set by local file\n \u2713 set by global file\n \u2713 prints global file if no version files exist\n \u2713 detects 'global' file\n \u2713 detects 'default' file\n \u2713 'version' has precedence over 'global' and 'default'\n \u2713 in current directory\n \u2713 legacy file in current directory\n \u2713 .python-version has precedence over legacy file\n \u2713 in parent directory\n \u2713 topmost file has precedence\n \u2713 legacy file has precedence if higher\n \u2713 PYENV_DIR has precedence over PWD\n \u2713 PWD is searched if PYENV_DIR yields no results\n \u2713 fails without arguments\n \u2713 fails for invalid file\n \u2713 fails for blank file\n \u2713 reads simple version file\n \u2713 ignores leading spaces\n \u2713 reads only the first word from file\n \u2713 loads not only the first line in file\n \u2713 ignores leading blank lines\n \u2713 handles the file with no trailing newline\n \u2713 ignores carriage returns\n \u2713 invocation without 2 arguments prints usage\n \u2713 setting nonexistent version fails\n \u2713 writes value to arbitrary file\n \u2713 no version selected\n \u2713 system version is not checked for existance\n \u2713 PYENV_VERSION has precedence over local\n \u2713 local file has precedence over global\n \u2713 missing version\n \u2713 version with prefix in name\n \u2713 reports global file even if it doesn't exist\n \u2713 detects global file\n \u2713 detects PYENV_VERSION\n \u2713 detects local file\n \u2713 detects alternate version file\n \u2713 no versions installed\n \u2713 not even system python available\n \u2713 bare output no versions installed\n \u2713 single version installed\n \u2713 single version bare\n \u2713 multiple versions\n \u2713 indicates current version\n \u2713 bare doesn't indicate current version\n \u2713 globally selected version\n \u2713 per-project version\n \u2713 ignores non-directories under versions\n \u2713 lists symlinks under versions\n \u2713 finds versions where present\n \u2713 outputs path to executable\n \u2713 searches PATH for system version\n \u2713 searches PATH for system version (shims prepended)\n \u2713 searches PATH for system version (shims appended)\n \u2713 searches PATH for system version (shims spread)\n \u2713 version not installed\n \u2713 versions not installed\n \u2713 no executable found\n \u2713 executable found in other versions\n \u2713 carries original IFS within hooks\n \u2713 discovers version from pyenv-version-name\n156 tests, 0 failures\ncd plugins/python-build && /home/user/code/pyenv/bats/bin/bats ${CI:+--tap} test\n \u2713 not enought arguments for python-build\n \u2713 extra arguments for python-build\n \u2713 yaml is installed for python\n \u2713 apply python patch before building\n \u2713 apply python patch from git diff before building\n \u2713 yaml is linked from Homebrew\n \u2713 readline is linked from Homebrew\n \u2713 readline is not linked from Homebrew when explicitly defined\n \u2713 number of CPU cores defaults to 2\n \u2713 number of CPU cores is detected on Mac\n \u2713 number of CPU cores is detected on FreeBSD\n \u2713 setting PYTHON_MAKE_INSTALL_OPTS to a multi-word string\n \u2713 setting MAKE_INSTALL_OPTS to a multi-word string\n \u2713 custom relative install destination\n \u2713 make on FreeBSD 9 defaults to gmake\n \u2713 make on FreeBSD 10\n \u2713 can use PYTHON_CONFIGURE to apply a patch\n \u2713 copy strategy forces overwrite\n \u2713 mruby strategy overwrites non-writable files\n \u2713 mruby strategy fetches rake if missing\n \u2713 rbx uses bundle then rake\n \u2713 fixes rbx binstubs\n \u2713 JRuby build\n \u2713 JRuby+Graal does not install launchers\n \u2713 JRuby Java 7 missing\n \u2713 JRuby Java is outdated\n \u2713 JRuby Java 7 up-to-date\n \u2713 non-writable TMPDIR aborts build\n \u2713 non-executable TMPDIR aborts build\n \u2713 packages are saved to download cache\n \u2713 cached package without checksum\n \u2713 cached package with valid checksum\n \u2713 cached package with invalid checksum falls back to mirror and updates cache\n \u2713 nonexistent cache directory is ignored\n \u2713 package URL without checksum\n \u2713 package URL with valid checksum\n \u2713 package URL with invalid checksum\n \u2713 package URL with checksum but no shasum support\n \u2713 package URL with valid md5 checksum\n \u2713 package URL with md5 checksum but no md5 support\n \u2713 package with invalid checksum\n \u2713 existing tarball in build location is reused\n \u2713 existing tarball in build location is discarded if not matching checksum\n \u2713 require_gcc on OS X 10.9\n \u2713 require_gcc on OS X 10.10\n \u2713 require_gcc silences warnings\n \u2713 CC=clang by default on OS X 10.10\n \u2713 list built-in definitions\n \u2713 custom PYTHON_BUILD_ROOT: nonexistent\n \u2713 custom PYTHON_BUILD_ROOT: single definition\n \u2713 one path via PYTHON_BUILD_DEFINITIONS\n \u2713 multiple paths via PYTHON_BUILD_DEFINITIONS\n \u2713 installing definition from PYTHON_BUILD_DEFINITIONS by priority\n \u2713 installing nonexistent definition\n \u2717 sorting Python versions\n   (in test file test/definitions.bats, line 91)\n     `touch \"${PYTHON_BUILD_ROOT}/share/python-build/$ver\"' failed\n   touch: cannot touch \u2018/home/user/code/pyenv/plugins/python-build/test/tmp/share/python-build/2.7-dev\\n2.7\\n2.7.1\\n2.7.2\\n2.7.3\\n3.4.0\\n3.4-dev\\n3.4.1\\n3.4.2\\njython-dev\\njython-2.5.0\\njython-2.5-dev\\njython-2.5.1\\njython-2.5.2\\njython-2.5.3\\njython-2.5.4-rc1\\njython-2.7-beta1\\njython-2.7-beta2\\njython-2.7-beta3\u2019: File name too long\n \u2713 removing duplicate Python versions\n \u2713 failed download displays error message\n \u2713 fetching from git repository\n \u2713 updating existing git repository\n \u2713 pyenv-install hooks\n \u2713 pyenv-uninstall hooks\n \u2713 installs python-build into PREFIX\n \u2713 build definitions don't have the executable bit\n \u2713 overwrites old installation\n \u2713 unrelated files are untouched\n \u2713 package URL without checksum bypasses mirror\n \u2713 package URL with checksum but no shasum support bypasses mirror\n \u2713 package URL with checksum hits mirror first\n \u2713 package is fetched from original URL if mirror download fails\n \u2713 package is fetched from original URL if mirror download checksum is invalid\n \u2713 default mirror URL\n \u2713 install proper\n \u2713 install pyenv local version by default\n \u2713 list available versions\n \u2713 nonexistent version\n \u2713 Homebrew upgrade instructions\n \u2713 no build definitions from plugins\n \u2713 some build definitions from plugins\n \u2713 list build definitions from plugins\n \u2713 completion results include build definitions from plugins\n \u2713 not enough arguments for pyenv-install\n \u2713 too many arguments for pyenv-install\n \u2713 show help for pyenv-install\n \u2713 not enough arguments pyenv-uninstall\n \u2713 too many arguments for pyenv-uninstall\n \u2713 show help for pyenv-uninstall\n \u2713 apply built-in python patch before building\n \u2713 apply built-in python patches should be sorted by its name\n \u2713 allow custom make install target\n \u2713 python-build static version\n \u2713 python-build git version\n \u2713 git describe fails\n \u2713 git remote doesn't match\n93 tests, 1 failure\nmake: *** [test] Error 1\nFinally outside my encrypted home dir - Success:\nuser@kilgore:/tmp/PYTHON_BUILD_ROOT/pyenv$ make\nPATH=\"./bats/bin:$PATH\" test/run\n \u2713 commands\n \u2713 commands --sh\n \u2713 commands in path with spaces\n \u2713 commands --no-sh\n \u2713 command with no completion support\n \u2713 command with completion support\n \u2713 forwards extra arguments\n \u2713 fails with invalid version\n \u2713 completes with names of executables\n \u2713 supports hook path with spaces\n \u2713 carries original IFS within hooks\n \u2713 forwards all arguments\n \u2713 supports python -S \n \u2713 default\n \u2713 read PYENV_ROOT/version\n \u2713 set PYENV_ROOT/version\n \u2713 fail setting invalid PYENV_ROOT/version\n \u2713 without args shows summary of common commands\n \u2713 invalid command\n \u2713 shows help for a specific command\n \u2713 replaces missing extended help with summary text\n \u2713 extracts only usage\n \u2713 multiline usage section\n \u2713 multiline extended help section\n \u2713 prints usage help given no argument\n \u2713 prints list of hooks\n \u2713 supports hook paths with spaces\n \u2713 resolves relative paths\n \u2713 resolves symlinks\n \u2713 creates shims and versions directories\n \u2713 auto rehash\n \u2713 setup shell completions\n \u2713 detect parent shell\n \u2713 setup shell completions (fish)\n \u2713 fish instructions\n \u2713 option to skip rehash\n \u2713 adds shims to PATH\n \u2713 adds shims to PATH (fish)\n \u2713 can add shims to PATH more than once\n \u2713 doesn't add shims to PATH more than once (fish)\n \u2713 outputs sh-compatible syntax\n \u2713 outputs fish-specific syntax (fish)\n \u2713 no version\n \u2713 local version\n \u2713 supports legacy .pyenv-version file\n \u2713 local .python-version has precedence over .pyenv-version\n \u2713 ignores version in parent directory\n \u2713 ignores PYENV_DIR\n \u2713 sets local version\n \u2713 changes local version\n \u2713 renames .pyenv-version to .python-version\n \u2713 doesn't rename .pyenv-version if changing the version failed\n \u2713 unsets local version\n \u2713 unsets alternate version file\n \u2713 prefix\n \u2713 prefix for invalid version\n \u2713 prefix for system\n \u2713 prefix for invalid system\n \u2713 blank invocation\n \u2713 invalid command\n \u2713 default PYENV_ROOT\n \u2713 inherited PYENV_ROOT\n \u2713 default PYENV_DIR\n \u2713 inherited PYENV_DIR\n \u2713 invalid PYENV_DIR\n \u2713 adds its own libexec to PATH\n \u2713 adds plugin bin dirs to PATH\n \u2713 PYENV_HOOK_PATH preserves value from environment\n \u2713 PYENV_HOOK_PATH includes pyenv built-in plugins\n \u2713 empty rehash\n \u2713 non-writable shims directory\n \u2713 rehash in progress\n \u2713 creates shims\n \u2713 removes stale shims\n \u2713 binary install locations containing spaces\n \u2713 carries original IFS within hooks\n \u2713 sh-rehash in bash\n \u2713 sh-rehash in fish\n \u2713 no shell version\n \u2713 shell version\n \u2713 shell version (fish)\n \u2713 shell unset\n \u2713 shell unset (fish)\n \u2713 shell change invalid version\n \u2713 shell change version\n \u2713 shell change version (fish)\n \u2713 no shims\n \u2713 shims\n \u2713 shims --short\n \u2713 default version\n \u2713 reads version from git repo\n \u2713 prints default version if no tags in git repo\n \u2713 no version selected\n \u2713 set by PYENV_VERSION\n \u2713 set by local file\n \u2713 set by global file\n \u2713 prints global file if no version files exist\n \u2713 detects 'global' file\n \u2713 detects 'default' file\n \u2713 'version' has precedence over 'global' and 'default'\n \u2713 in current directory\n \u2713 legacy file in current directory\n \u2713 .python-version has precedence over legacy file\n \u2713 in parent directory\n \u2713 topmost file has precedence\n \u2713 legacy file has precedence if higher\n \u2713 PYENV_DIR has precedence over PWD\n \u2713 PWD is searched if PYENV_DIR yields no results\n \u2713 fails without arguments\n \u2713 fails for invalid file\n \u2713 fails for blank file\n \u2713 reads simple version file\n \u2713 ignores leading spaces\n \u2713 reads only the first word from file\n \u2713 loads not only the first line in file\n \u2713 ignores leading blank lines\n \u2713 handles the file with no trailing newline\n \u2713 ignores carriage returns\n \u2713 invocation without 2 arguments prints usage\n \u2713 setting nonexistent version fails\n \u2713 writes value to arbitrary file\n \u2713 no version selected\n \u2713 system version is not checked for existance\n \u2713 PYENV_VERSION has precedence over local\n \u2713 local file has precedence over global\n \u2713 missing version\n \u2713 version with prefix in name\n \u2713 reports global file even if it doesn't exist\n \u2713 detects global file\n \u2713 detects PYENV_VERSION\n \u2713 detects local file\n \u2713 detects alternate version file\n \u2713 no versions installed\n \u2713 not even system python available\n \u2713 bare output no versions installed\n \u2713 single version installed\n \u2713 single version bare\n \u2713 multiple versions\n \u2713 indicates current version\n \u2713 bare doesn't indicate current version\n \u2713 globally selected version\n \u2713 per-project version\n \u2713 ignores non-directories under versions\n \u2713 lists symlinks under versions\n \u2713 finds versions where present\n \u2713 outputs path to executable\n \u2713 searches PATH for system version\n \u2713 searches PATH for system version (shims prepended)\n \u2713 searches PATH for system version (shims appended)\n \u2713 searches PATH for system version (shims spread)\n \u2713 version not installed\n \u2713 versions not installed\n \u2713 no executable found\n \u2713 executable found in other versions\n \u2713 carries original IFS within hooks\n \u2713 discovers version from pyenv-version-name\n156 tests, 0 failures\ncd plugins/python-build && /tmp/PYTHON_BUILD_ROOT/pyenv/bats/bin/bats ${CI:+--tap} test\n \u2713 not enought arguments for python-build\n \u2713 extra arguments for python-build\n \u2713 yaml is installed for python\n \u2713 apply python patch before building\n \u2713 apply python patch from git diff before building\n \u2713 yaml is linked from Homebrew\n \u2713 readline is linked from Homebrew\n \u2713 readline is not linked from Homebrew when explicitly defined\n \u2713 number of CPU cores defaults to 2\n \u2713 number of CPU cores is detected on Mac\n \u2713 number of CPU cores is detected on FreeBSD\n \u2713 setting PYTHON_MAKE_INSTALL_OPTS to a multi-word string\n \u2713 setting MAKE_INSTALL_OPTS to a multi-word string\n \u2713 custom relative install destination\n \u2713 make on FreeBSD 9 defaults to gmake\n \u2713 make on FreeBSD 10\n \u2713 can use PYTHON_CONFIGURE to apply a patch\n \u2713 copy strategy forces overwrite\n \u2713 mruby strategy overwrites non-writable files\n \u2713 mruby strategy fetches rake if missing\n \u2713 rbx uses bundle then rake\n \u2713 fixes rbx binstubs\n \u2713 JRuby build\n \u2713 JRuby+Graal does not install launchers\n \u2713 JRuby Java 7 missing\n \u2713 JRuby Java is outdated\n \u2713 JRuby Java 7 up-to-date\n \u2713 non-writable TMPDIR aborts build\n \u2713 non-executable TMPDIR aborts build\n \u2713 packages are saved to download cache\n \u2713 cached package without checksum\n \u2713 cached package with valid checksum\n \u2713 cached package with invalid checksum falls back to mirror and updates cache\n \u2713 nonexistent cache directory is ignored\n \u2713 package URL without checksum\n \u2713 package URL with valid checksum\n \u2713 package URL with invalid checksum\n \u2713 package URL with checksum but no shasum support\n \u2713 package URL with valid md5 checksum\n \u2713 package URL with md5 checksum but no md5 support\n \u2713 package with invalid checksum\n \u2713 existing tarball in build location is reused\n \u2713 existing tarball in build location is discarded if not matching checksum\n \u2713 require_gcc on OS X 10.9\n \u2713 require_gcc on OS X 10.10\n \u2713 require_gcc silences warnings\n \u2713 CC=clang by default on OS X 10.10\n \u2713 list built-in definitions\n \u2713 custom PYTHON_BUILD_ROOT: nonexistent\n \u2713 custom PYTHON_BUILD_ROOT: single definition\n \u2713 one path via PYTHON_BUILD_DEFINITIONS\n \u2713 multiple paths via PYTHON_BUILD_DEFINITIONS\n \u2713 installing definition from PYTHON_BUILD_DEFINITIONS by priority\n \u2713 installing nonexistent definition\n \u2713 sorting Python versions\n \u2713 removing duplicate Python versions\n \u2713 failed download displays error message\n \u2713 fetching from git repository\n \u2713 updating existing git repository\n \u2713 pyenv-install hooks\n \u2713 pyenv-uninstall hooks\n \u2713 installs python-build into PREFIX\n \u2713 build definitions don't have the executable bit\n \u2713 overwrites old installation\n \u2713 unrelated files are untouched\n \u2713 package URL without checksum bypasses mirror\n \u2713 package URL with checksum but no shasum support bypasses mirror\n \u2713 package URL with checksum hits mirror first\n \u2713 package is fetched from original URL if mirror download fails\n \u2713 package is fetched from original URL if mirror download checksum is invalid\n \u2713 default mirror URL\n \u2713 install proper\n \u2713 install pyenv local version by default\n \u2713 list available versions\n \u2713 nonexistent version\n \u2713 Homebrew upgrade instructions\n \u2713 no build definitions from plugins\n \u2713 some build definitions from plugins\n \u2713 list build definitions from plugins\n \u2713 completion results include build definitions from plugins\n \u2713 not enough arguments for pyenv-install\n \u2713 too many arguments for pyenv-install\n \u2713 show help for pyenv-install\n \u2713 not enough arguments pyenv-uninstall\n \u2713 too many arguments for pyenv-uninstall\n \u2713 show help for pyenv-uninstall\n \u2713 apply built-in python patch before building\n \u2713 apply built-in python patches should be sorted by its name\n \u2713 allow custom make install target\n \u2713 python-build static version\n \u2713 python-build git version\n \u2713 git describe fails\n \u2713 git remote doesn't match\n93 tests, 0 failures\n. ",
    "BanzaiMan": "Thanks for looking into it. I'll double check here and report back.\n. cron sets its own $PATH. Read the man page, learn the tool. This is not a pyenv issue.. I think this is indeed a library problem, but that of libc, not any other.\nsh-sesion\n$ /opt/python/pypy3.5-5.7.1-beta/bin/python -c 'import bz2'\n/opt/python/pypy3.5-5.7.1-beta/bin/python: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.17' not found (required by /opt/python/pypy3.5-5.7.1-beta/bin/libpypy3-c.so)\nThe version of libc on Precise is 2.15:\n$ dpkg -l | grep -w libc6\nii  libc6                               2.15-0ubuntu10.18                                   Embedded GNU C Library: Shared libraries\nii  libc6-dev                           2.15-0ubuntu10.18                                   Embedded GNU C Library: Development Libraries and Header Files\nSo I don't think we can resolve this at all.. I don't think Precise can build PyPy any more. It is best to drop it. See https://github.com/pyenv/pyenv/issues/925#issuecomment-307527973.. Ah, cool. Thanks!. ",
    "crazcalm": "I got everything to work. I am at a hackathon, so the internet is so-so.\nAnyway, after I got connected to the internet and installed all the packages in your common build issues page, everything starting to work.\nThanks again!\n. ",
    "imkin": "Can someone respond this issue. I think the easier for would be loop through $@ and find the first non \"--\" argument and assign the $command to it.\nCan I suggest a patch?\n. yyuu ofcourse its not an urgent issue. But yeah needed documentation or someone to provide a workaround. Now that we have one. People having issues \"debugging\" their problem can land on this issue and handle it.\n. ",
    "chrahunt": "Fixed by #79.. For anyone running into this problem, please try the following:\n\nInstall the latest pyenv following the instructions in the README applicable for your platform\nSee the advice from @tjsoftworks concerning your PATH, cleaning it up if necessary\n\nIf these still do not help, then please feel free to open a new issue and provide details.. Anyone wanting to track this can see #1244 or make a new issue if that doesn't cover your use case.. For anyone coming to this issue, note that the patches mentioned in the original comment (21085) and the comment by @cadyyan (13756) have been merged into CPython as of 3.7. Give this version a try and if you run into any problems (or possible improvements) related to pyenv please create an issue.. Thanks @astocko. @tgy, let us know if you need any more assistance with this.. On the latest version of pyenv I see\nreal    0m0.080s\nuser    0m0.071s\nsys     0m0.037s\nthe first time I run pyenv install -l and this is typical for subsequent runs\nreal    0m0.031s\nuser    0m0.031s\nsys     0m0.013s. If you're still seeing this let us know and we can investigate. For anyone coming to this issue, try running the command under strace using various options (I like strace -yttfo strace.log to start, remember you can :set filetype=strace in vim) and see where the time is being taken up.. The commit in ruby-build that introduced this (https://github.com/rbenv/ruby-build/commit/50bf60f9c2510fbee7f111046e97fe8bf9e66472) indicates that it was an explicit action by the Ruby configure script that required it. If there's no such check in Python then we can probably remove it.. Hello. If this issue is still impacting you please report it to vim-syntastic/syntastic, where they can direct you on how to retrieve debug logs. From more recent threads like vim-syntastic/syntastic#1612 it seems like they should be both Python 2 and 3 compatible. You can also check out the help with :help syntastic-checkers.. Based on the activity in coala/coala-gedit#18 it looks like you were able to at least get past this issue, so I'll close this. Please update here if you think the solution may help others.. I will close this since the underlying issue was fixed in PyCharm 2017.1. @mikenerone if you still experience the issue you mentioned with the latest pyenv and PyCharm, please do not hesitate to create an issue with details and we will investigate.. Personally I use pyenv as a Python version manager, symlinking ~/bin/python to ~/.pyenv/shims/python and keeping ~/bin on my PATH (not ~/.pyenv/shims). Virtual environments provide all utilities and are activated as-needed.\nIt could save some grief if the shims were opt-in or maybe provided as a plugin, but that's probably just adding an extra step for the large population of users that actually use them.. Glad you got it sorted out. If you have any pyenv-related issues please let us know.. Regarding removing versions - if someone needs an older version they can always check out an older version of the repository. I don't think we need to do anything special for that case.. There are several questions here, I'll try to get to all of them.\n\nIs there any way to upgrade 3.6.x to 3.6.y and retain packages without requiring re-installation?\n\nThere are two ways:\n\nAs mentioned by @nvllsvm, you can do pip install --user. This will install packages into ~/.local/lib/pythonX.Y/site-packages, which would be used for all Python versions X.Y.z.\nIf using a virtual environment, patch version upgrades should not require re-installation of packages since they are put into <venv dir>/lib/pythonX.Y/site-packages\n\nNow if you have already installed packages using a plain pip install <pkg>, that will end up in the main Python site packages directory at ~/.pyenv/versions/X.Y.Z/lib/pythonX.Y/site-packages. That directory is specific to the Python installation but you can do something similar to what you proposed to get all packages installed in a new version (assuming you're using Bash):\n~/.pyenv/versions/X.Y.z2/bin/python -m pip install -r <(~/.pyenv/versions/X.Y.z1/bin/python -m pip freeze)\n\nIt's cumbersome to have to recreate all envs just for a minor version update. Would it be possible to have a major/minor version distinction?\n\nUnfortunately not. There are a few things working against us here:\n\nlibraries that include compiled components will have a hard dependency on the specific Python version because it is what they were compiled against. In the best case these will just fail to import, but it may segfault or worse just behave incorrectly.\nwhen installing a Python package, arbitrary code gets executed. Package maintainers must assume that a package installed under X.Y.z may run on a Python with any version for z. There is no such assumption for X.Y versions. Personally I wouldn't even consider it a bug if a package behaved in a way that did not support this.\n\nThankfully the burden of using multiple Python versions is becoming less every day. Tools like Pipenv and poetry manage Python-version-specific virtual environments for us and handle installation of all required dependencies, and tox has been able to do cross-version testing for years and years.. You probably have a very old version of bash. You can try upgrading, however you may be in for a long journey as other basic command-line utilities and Python dependencies require manual compilation or setup. I don't think this activity is appropriate to track here since it isn't a pyenv issue per-se, but you can always reach out on gitter or IRC and we can try to help troubleshoot.\nI've also started a wiki page here so we start being a little more explicit about what is and isn't supported.. As mentioned in #1282, 2.7 refers to a very old Python version. Hopefully the fix for that will make issues like this less frequent!\nPlease let us know if you have any other issues with a more recent version.. With linuxbrew this is now a matter of brew install openssl and following the directions here for CFLAGS/LDFLAGS.. While it is pyenv update that causes this, it would be better to have this conversation in pyenv-virtualenv. Please file an issue over there and we can look into ways to accommodate this concern.. Hello. This looks like a more general programming/sys admin question. You might try checking sites like stackoverflow and superuser. If this is related to pyenv please feel free to correct me and we can reopen the issue.. We can update the version identifier so this issue is less likely to happen in the future.. Hi @Sphinxs, if you're seeing some behavior that you think is a bug, please create a separate issue.. Sorry if I'm misunderstanding, but this responsibility seems completely different than what pyenv currently does.\nIf you want some commands to run automatically or conveniently in your shell, then wouldn't an alias be better, or a tool like direnv to automatically invoke and set environment variables?. Ah, okay. The pyenv-virtualenv plugin is actually what does virtualenv auto-loading. You could propose this over there?. There are many options for accomplishing this:\n\nVirtual environments - if pytest is installed in a virtual environment which is activated then the one it provides will be selected by the shell. This is good practice anyway to ensure your projects are using a specific supported version.\nUse a tool like tox to run pytest against both versions - this also has the benefit of being share-able if others are working on your project, and reproducible even for yourself when you come back to a project after some time.\nInvoking the package directly with python2.7 -m <name> - many packages (including pytest) support this out of the box and it makes it completely unambiguous which Python is being used. If a package does not support this I would consider it something to suggest in their issue tracker. This can be combined with 1 if you have .v2 and .v3 in your project folder, they can be invoked like .venv2/bin/python -m pytest and .venv3/bin/python -m pytest.\nPYENV_VERSION=2.7.14 pyenv exec pytest can be entered directly in the shell or aliased to something like pytest2.\n\nWould it be enough to promote these in the README/wiki as possible workflows?. Thanks @Brawnd0, this looks like it was fixed in 28440 (>=2.7.13). Please let us know if the updated version does not work for you as expected.. Hi. How is this related to pyenv? All of the paths in your traceback seem to be from your system Python.. Please create a new issue if there is something related to pyenv we can help with!. The issues page for the plug-in is now available. Please feel free to raise this over there.. This seems solved, but if I'm wrong please let me know.. Please follow the discussion in #1244, including your use case if it is not represented.. I did some investigation on this. The most convenient setup seems to be the following:\n\nCopy python-gdb.py from the root of the build directory into the output directory as bin/python3.7-gdb.py. gdb automatically looks for {object file}-gdb.py and will run the file assuming it is in a safe path. {object file} is determined after all symlinks have been resolved.\nAdd add-auto-load-safe-path ~/.pyenv to .gdbinit.\nConfigure all tools that create virtual environments to use symlinks instead of copying the Python interpreter into the virtual environment's bin directory. This should be automatic when executing something like python -m venv but I noticed that e.g. poetry creates a copy instead of a symlink (see sdispater/poetry#779).\n\nThis satisfies the following use cases:\n\nDebugging an existing Python process that was run using a pyenv-managed python. Given a Python process with pid 5555, you can start gdb and attach with gdb -ex 'attach 5555'. Then since the script matches the expected format it will be automatically loaded.\nStarting a new Python process under gdb outside of a virtual environment. Executing gdb $(pyenv which python) will result in the script being automatically loaded.\nStarting a new Python process under gdb within a virtual environment. Executing gdb python within the virtual environment will result in the script being automatically loaded. Again, this requires that the virtual environment is using symlinks.\nStarting a Python command-line script under gdb outside of or within a virtual environment. Assuming the module cannot be executed as python -m <module> (which is more convenient and can use 1 or 2) we can extract the shebang like e.g. gdb $(head -1 $(which pytest) | cut -b '3-') pytest which will result in the script being automatically loaded.. If you installed python 2.7 via apt, then you can install python 2.7 32-bit by following the instructions in #829, specifically:\n\nenv CFLAGS=\"-m32\" LDFLAGS=\"-m32\" pyenv install 2.7.15\nIf you installed python 2.7 via pyenv then right now, since pyenv does not support multiple architectures for a single version, you will need to install a different version than the one you have already installed. When you install the different version, use the flags I mentioned above.. Hi @namgivu. I don't think this is the right place for this discussion. The Docker community forum might be a better place if you want to try posting there. Someone there may be able to point you towards existing tools or give feedback. Thanks!. In a shell in which you can reproduce this behavior, can you run env | sort? It looks like PYENV_ROOT may not be set, as mentioned in the README.. Will be tracked by #1282. Thanks!. Can one of you please re-run the install with PYENV_DEBUG=1 in the environment and then include the debug output?. Similar to #1204.. @richard-scott is correct, the purpose of adding $PYENV_ROOT/bin is so that pyenv is accessible. If for some reason you want to avoid executing eval \"$(pyenv init -)\" then check out the Advanced Configuration section of the README.. The eval \"$(...)\" syntax seems more portable. For example,\n$ docker run -it busybox\n/ # echo \"$(seq 1 3)\"\n1\n2\n3\n/ # cat <(seq 1 3)\nsh: syntax error: unexpected \"(\"\nor when using /bin/sh (dash) on latest Ubuntu 18.04\n```\n$ docker run -it ubuntu:18.04 /bin/sh\necho \"$(seq 1 3)\"\n1\n2\n3\ncat <(seq 1 3)\n/bin/sh: 2: Syntax error: \"(\" unexpected\n```\nLikewise, source does not work in /bin/sh.. LGTM.. LGTM.. Please follow the discussion in #1244, including your use case if it is not represented.. @michidk, please create a separate issue and make sure to include your build logs and all details requested in the default issue text. That will help us help you!\n@dmikov, please see the suggestion from @garytyler and the link to the wiki which may have an updated list of requirements. The issues that appear in your log seem directly related to the build of modules that require the sorts of packages that running the command above will install. If you still have problems please let us know.. @izznogooood, can you try running the command again like\nPYENV_DEBUG=1 pyenv global system 3.7.1\nand provide the output?. Basic implementation details that would need to be worked out and agreed on:\n\nParsing TOML: This could be done in shell or require an external utility/library (and be disabled if not present). If we can assume at least the subset of tools required to compile CPython are available, something written in C could be easier/more portable but may not be appropriate for this project. Existing libraries are in the toml wiki.\nCommand: A separate command pyenv project could show the value extracted from the pyproject.toml. If pyenv project would also manage the version I think that would align better with the current behavior of pyenv local but it also places additional burden on the TOML parser (to preserve formatting, comments, style, see e.g. tomlkit for considerations).\n\nPrecedence: I would propose global < .python-version < pyproject.toml < PYENV_VERSION, assuming the search for .python-version and pyproject.toml recurse up to the root dir. Having a simple order may help reduce confusion. Anything more complex is just saving the user the need to set PYENV_VERSION across multiple shells, I think.. This looks like an environment issue (something leftover in an init file) not a pyenv one, but to help debug:\n\n\nTrace environment variables as early in the init process as possible. The man page indicates that /etc/zshenv is the first file read so at the top of that put env | sort > ~/env.txt. Check that the PATH does not have the indicated paths. If it does then the environment under which your shell is executing already has the path (so it might be coming from something like e.g. .xinit).\n\nInvoke your shell like zsh --login -x which should source init files and trace each line as it executed. Search for instances of pyenv in the output. If it helps you can also echo at the top of each file that gets sourced at started so you can narrow down at least which file the command is in.. @peiyanyan, please ensure the dependencies listed here are satisfied (thanks @agibalov). If you still experience issues, please feel free to create a new issue and include verbose logs.\n\n@ziofil, please see the information here for getting correct zlib on macOS. Specifically, you need to execute the install like CPPFLAGS=\"-I$(brew --prefix zlib)/include\". Also check out #1219 which may be related.. Can you provide any information on how you're compiling aosp android-9.0.0_r22? Do you have any kind of log that could show the output of some pyenv tool prior to the error being received? Preferably with PYENV_DEBUG=1 set in the environment of the build.. This is expected, as mentioned in the installation instructions $PYENV_ROOT is meant to represent the root of the cloned repository.\nIf you want to compile Python and specify the output directory, then look at python-build, which pyenv install uses internally.. This would not do anything for the pip installed in virtual environments by venv/ensurepip. Users would still be required to manually upgrade pip after creating a virtual environment.. From this SO post there's an example of how we may ensure that the upgrade also applies to new virtual environments:\n```diff\ndiff -ru Python-3.7.1/Lib/ensurepip/init.py Python-3.7.1.new/Lib/ensurepip/init.py\n--- Python-3.7.1/Lib/ensurepip/init.py  2018-10-20 06:04:19.000000000 +0000\n+++ Python-3.7.1.new/Lib/ensurepip/init.py  2018-11-27 02:36:19.301655008 +0000\n@@ -8,9 +8,9 @@\n all = [\"version\", \"bootstrap\"]\n-_SETUPTOOLS_VERSION = \"39.0.1\"\n+_SETUPTOOLS_VERSION = \"40.6.2\"\n-_PIP_VERSION = \"10.0.1\"\n+_PIP_VERSION = \"18.1\"\n_PROJECTS = [\n     (\"setuptools\", _SETUPTOOLS_VERSION),\nOnly in Python-3.7.1/Lib/ensurepip/_bundled: pip-10.0.1-py2.py3-none-any.whl\nOnly in Python-3.7.1.new/Lib/ensurepip/_bundled: pip-18.1-py2.py3-none-any.whl\nOnly in Python-3.7.1/Lib/ensurepip/_bundled: setuptools-39.0.1-py2.py3-none-any.whl\nOnly in Python-3.7.1.new/Lib/ensurepip/_bundled: setuptools-40.6.2-py2.py3-none-any.whl\n```\nHowever these are _-prefixed so may change at any time - we would need to keep a Python-specific implementation around.\n@yyuu, WDYT?. pip itself warns on each usage when an upgraded version is available, that should be enough.\nThanks @mcandre for the suggestion!. @dakl this needs to be reviewed and tested. I don't personally have access to a mac, so I cannot test or do any of the sanity checks I would normally for a code review. Here are some details that might help things along:\nReview\nAnyone can do a code review. If you have access to a mac that is better since you can quickly address small questions yourself.\nThings to consider for any reviewer (in order):\n\nWhat is the proposed change trying to fix? Is the approach a good one? - I'm not familiar with the file that was edited but it looks like it is only used for the build of the executable that may be used to speed up path resolution. It doesn't look like this is related to the Python build.\nIs there anything basically wrong, e.g. syntax or typos? - One note, shobj-conf is a shell script but the fix here looks like it is trying to invoke a subcommand using ${}. Not sure what shell that is compatible with but it isn't bash. Maybe $() was meant instead?\nIs the fix compatible with all relevant macOS and XCode versions? What versions was it tested on?\nWhat are the failure scenarios and how are they handled? e.g. xcrun not available, --show-sdk-path invalid option. Would there at least be something in the logs so we'd be able to debug it if someone has an issue?\n\nTesting\nSince this repo does not currently have a CI setup that tests builds, we rely on people on various platforms and configurations to report whether the fix worked for them. A :+1: is nice, but a comment stating that you were able to pull this PR locally and successfully compile (including your macOS and XCode version) is better.. This can happen if ~/.pyenv/versions/3.6.7/bin/python3.6 is not executable. That can be because e.g. the file permission does not include the execute bit or because the file is on a filesystem mounted noexec.\nCan you provide any more information to reproduce this issue, like a command which when executed results in the error you provided?. Thanks for following up. It looks like this is the same as mentioned in #310, but I'm glad you found a workaround that works for your situation. Let us know if there are any other issues otherwise we'll close this in favor of tracking any updates/fixes in the other issue.. You're right, thanks for repeating an important detail you provided earlier:\n\nthe python3 shim works\n\nCan you try running PYENV_DEBUG=1 ~/.pyenv/shims/python3.6 and provide us with the output?. Thanks!. Thank you!. Thanks for raising an issue (and your earlier PR!)\nWe re-use the PyPy distribution essentially as-is from squeaky-pl/portable-pypy, you can raise an issue there to see if they will change the packaging. As you stated, the most portable option is python -m pip. Another alternative is to always use virtual environments, then the relevant binaries will usually be available.\nThe /home/me/.pyenv/shims/pip shim looks in the bin directory of the active Python for an executable of the same name. The reason pip3 install --upgrade pip makes pip visible is because that action created /home/me/.pyenv/versions/pypy3.5-7.0.0/bin/pip.. Please let us know if you have any more issues!. @altendky, do you mind giving this a try?. Can you post the output of env | sort in a shell where you can reproduce this issue? I'm also on 18.04 but do not have this issue.. Thanks. The problem is LDFLAGS=-L/usr/local/opt/ncurses/lib (same as in #732). You should be good if you unset the environment variable (LDFLAGS=) and try the pyenv install command again.. We should fold in some of the items from #617 later. For now this should be good enough to point to as a working example of builds for issues with lots of build problems.. pyenv should not require sudo for installation. I have personally installed 3.7.2 on Ubuntu 18.04 without any issue or sudo. Can you please provide the full output of the command with PYENV_DEBUG=1? You can include it in a comment with\n<details>\n<summary>log output</summary>\n\n```\nlog output\n```\n\n</details>\n\nWhich will look like\n\nlog output\n\n```\nlog output\n```\n\n\n. Is there a corresponding upstream bug in get-pip or pip?. There's probably a simpler way, but the issue with future merge can be avoided by doing the following:\ngit clone git@github.com:pyenv/pyenv.git\ngit clone git@github.com:rbenv/rbenv.git\nfind rbenv/test -type f | xargs sed -i -e s/ruby/python/g -e s/rbenv/pyenv/g ... --\ncd pyenv\ngit checkout -b update-tests 0965577\ncp -r ../rbenv/test .\ngit commit -m \"update-tests\"\ngit checkout -b really-update-tests master\ngit merge update-tests\nWhen merging against this PR, this results in:\nAuto-merging test/which.bats\n...\nAuto-merging test/exec.bats\nCONFLICT (content): Merge conflict in test/exec.bats\nAuto-merging test/--version.bats\nCONFLICT (content): Merge conflict in test/--version.bats\nAutomatic merge failed; fix conflicts and then commit the result.\nAnd then in test/exec.bats there is\n```\n<<<<<<< HEAD\n=======\n@test \"supports python -S \" {\n  export PYENV_VERSION=\"2.0\"\n# emulate `python -S' behavior\n  create_executable \"python\" <<SH\n!$BASH\nif [[ \\$1 == \"-S\"* ]]; then\n  found=\"\\$(PATH=\"\\${RUBYPATH:-\\$PATH}\" which \\$2)\"\n  # assert that the found executable has python for shebang\n  if head -1 \"\\$found\" | grep python >/dev/null; then\n    \\$BASH \"\\$found\"\n  else\n    echo \"python: no Python script found in input (LoadError)\" >&2\n    exit 1\n  fi\nelse\n  echo 'python 2.0 (pyenv test)'\nfi\nSH\ncreate_executable \"rake\" <<SH\n!/usr/bin/env python\necho hello rake\nSH\npyenv-rehash\n  run python -S rake\n  assert_success \"hello rake\"\n}\n\n\n\n\n\n\n\nupdate-tests\n```\n\n\n\n\n\n\n\nas expected, showing that it was removed in master.\nSo I'm +1 on this PR.. Please wrap this in a check for has_tar_xz_support and provide a tar.gz fallback. You can see an exaple in 3.7.2.. Please wrap this in a check for has_tar_xz_support. You can see an exaple in 3.7.2.. Same with this one.. When running tests I noticed a few times that the workers would hang for a bit after the \"Worker Information\" and \"Build System Information\" printed. before_install executes before any of our tests or setup so it could be used in conjunction with the test start time (visible by hovering over the duration in the far right column of any build here) to rule out our tests as being the reason for some builds taking a while.. Right now in the .travis.yml it is set to test 3.7.2 and 3.8-dev. That's a good point about spurious failures - we could configure allow_failures to allow the 3.8-dev ones to fail without causing the whole build to appear to have failed, but still test it so we can see if there is actually something wrong.. I would have liked to specify the log file explicitly via e.g. environment variable instead of getting the latest python-build.*.log but we don't support that in python-build (yet).\nNo matter what we do it should be in the after_script step so it is in its own section separate from the test results/output (see here).\nDo you think it would be better to run with --verbose and echo $output to a specific file that we cat here instead of this?. We now exclude failures that occur under 3.8-dev. Travis support helped also helped identify a way to exclude the duplicate Linux jobs. We will need to make sure to keep osx_image and jobs.exclude in-sync until it is fixed, but it's still better than having to explicitly mention all combinations, which will have more later.. ",
    "erickwilder": "I'm having the same problem on MacOSX. Any thoughts on how to solve it?\n. ",
    "RyanMagnusson": "I am also getting the error trying to install version 3.1.5 on Ubuntu 14.04\nI have submitted a pull request but not sure how popular that might be since 3.1.5 isn't officially supported by pip. \nShould the python-build install for 3.1.5 be passing 'ensurepip'? \n. Yes thank you.\n. ",
    "joshkel": "Based on this comment, it sounds like pip simply doesn't support 3.1.x and doesn't care that it doesn't support 3.1.x.\n. Thank you.\n. ",
    "iodbh": "If in run 'bash' then 'fish' in the broken shell, the newly created fish shell has no error.\n. Well, I just realized it's a pyenv-virtualenv issue - it only occurs when the global version is a virtualenv. Sorry !\n. For the record: i had the same issue, using --copies did solve it. ",
    "paultopia": "actually, this might be me rather than pyenv. trolling through docs, it looks like macs treat bash profiles in some bizarre way...\n. actually, this is me.  never mind.  it just took some more hacking around to get the bizarre apple implementation of bash to accept that i'd changed my profile.  essentially, resetting the shell from within terminal doesn't appear to work from osx, one has to flat-out close the terminal application and restart it for profile changes to take.  \nclosing the issue.\n. ",
    "kornev": "gist for: pyenv install -v 3.4.3\nhttps://gist.github.com/kornev/b1734dc73667a779bc09\nError with this command associated with empty SSL library in path.\nI added CFLAGS and get new error (up).\ngist for: CFLAGS=\"-I$(xcrun --show-sdk-path)/usr/include\" pyenv install -v 3.4.3\nhttps://gist.github.com/kornev/e6dbabbaa9ae64ba5e03\n. ",
    "filipeximenes": "+1\n. ",
    "ralhei": "Using\npip install --egg pyenv\nsolves the problem. \nThe hint with using the --egg option is available on the pyenv-installer github page.\n. ",
    "ssbarnea": "Why is this --egg even needed?! As far as I remember eggs became deprecated long time ago.  Cannot use wheels?\n. I still see the package there at https://pypi.python.org/pypi/pyenv/ -- and it does not say: don't use me. In fact if is broken it should just be removed or hidden on pypi.\nAny reason for not updating it there?\n. 10 months later I hit the same bug,... and read the thread again with my own comments inside. :(. xcode-select --install solved the problem for me but I would find it more useful if pyenv would detect this itself.\n. Any updates on this? I would really love to be able to install 3.5-latest and considering that we already have -dev suffix, it does make sense to use -latest.\n. Any update on this? Let me explain why using bash scripts for detecting the values to use for latests/stable does not work: we need to put these values inside files like: circleci.yml, .travis.yml, Jenkinsfile, tox.ini and so on. It is almost impossible to do this in a way that would work with these systems. \nIf we would have these aliases the life of any pyenv user would be much better because we would not have to maintain these files and update them whenever each minor version of python is updated. We would have to update them only when we decide to drop or add support for a major version, like dropping 2.6, or adding 3.6, 3.6.\nI don't care if we named it -latest, -stable or -current as long we can start using it right away.. I think that the aliases are an important enough feature to be included in core. \nMost people doing CI testing want to test against the lastest stable release of each python branch, without having to deal with the endless maintenance of minor versions files.. In fact shell command is missing on MacOS completly. I have pyenv 1.1.4 installed and it does not report pyenv shell command as existing.. Indeed, the wiki page is misleading as it contains commands that would not work with current released versions of Mojave and xcode 10 but the simple command above works perfects.\nPlease fix this so we don't need to manually hack CFLAGS to amke it work.. Considering that from now on we will continue to see this problem more I think it would be smart to make pyenv define the CFLAGS itself when is not already defined. This should sort the problem for the vast majority of the users.\nFor me the problem is sorted as I added it to my ~/.profile alongside other similar hacks related to compilation under MacOS. Still, I do not expect this do be easily doable by every pyenv MacOS user. The best is when it just works ;)\nI know that some could argue that this should be done by brew itself,  but I really doubt brew would do such a change soon enough to make a difference. By the time they will do, we would probably see 100+ more complaints here, or even worse new duplicate bugs.. Instead of fixing the wiki, lets try to make pyenv bit smarter and add the missing part to CFLAGS at runtime, this would provide a much better user experience.. I created a script that tests the bug and also dumps python compile time paramerters, so we can compare them and find out what is causing the breakage.  See https://gist.github.com/ssbarnea/6308a1ac61662bb22f5389afe89476ba\nBecause I didn't see too many similar reports I assume that problem is limited to local configuration like compiler flags and libraries, some of them being installed via brew, as recommended.. I found the problem and is not pyenv itself is in fact caused by pip caching which would compile the package first time you install it and keep a compiled version. Later you install a new python interpreter, maybe even a minor version upgrage and start using it. On the new interpreter once you try to install the package pip will take \"advantage\" of the chache and install the precompiled wheel.... and surprise you get something that may not work with your python.\nWhile I will raise this issue with pip and ask them to assure that caching is isolated per interpreter compile hash -- one that should use sysconfig.get_config_var(), I think that we need to do something about pyenv too as pyenv is far more likely to cause this problem that other environments.\nI woud propose to remove pip cache on each pyenv installation. It may perform some slowdowns but limited ones as this operation is not done very often, better to have a correct slower cache than a fast and bad one.. ",
    "archonsd": "Thanks for the hint about --egg.  It helped me get 'pip install pyenv' going on Ubuntu 14.04.5 LTS just now.  Without it I get the OP's error.. ",
    "greenthreads": "can install any package with the global version of PIP. there is no problem. My suspect is there is something wrong with the environment variables in CentOS 7. anyway thanks for having a look, I will try to fix it myself ;)\n. ",
    "AbdealiJK": "Seems like the default ./configure arguments in python were changes after 3.2 and it uses UCS4 after 3.2 but UCS2 before.\n. thanks for the response !\nWhat I did was the following:\n1. I installed python3.3 using pyenv install -ks 3.3.3\n2. Installed system binaries using deadsnakes ppa (in ubuntu) sudo apt-get -qq install python3.3-dev\n3. I then try to install dbus using ./configure and make .. the make fails\nThe whole log can be found at the circleci build https://circleci.com/gh/coala-analyzer/coala/1132\nOver there, container 0 is python3.4 container 2 is python 3.2 ... and only python3.3 (container1) seems to fail\n. I did do a pyenv local 3.3.3 which should do that.\nAnd it works if I use the system python python3.3 ... So, I dont see how it's a problem with the package.\nI find the same things happening with python-gi also.\n. @blueyed Sorry, I didn't understand that.\nWhy would the python-config command not exist for 3.3.3 and exist for all others ? I assumed it was something pyenv install 3.3.3 would handle for me.\nSorry, I'm not very used to pyenv - so, maybe I'm missing something very obvious.\n. I see - I'll check that out !\nThanks :)\n. Thanks for enquiring.\nYes, I got the circleci build to work. I used python 3.3.6 and it seems to work.\n3.3.3 still doesn't seem to work on circleci - but when I tried to run it on a virtualmachine with a fresh installation of ubuntu - 3.3.3 also worked. So, I guess something weird with circleci here.\n. ",
    "johnseekins": "Okay.\nHere's the problem I was running in to:\nI downloaded CPython 2.7.10 before running pyenv for the first time. I copied the 2.7.10 tarball in $(PYENV_ROOT)/cache (where we both agree it should look for files) and it didn't recognize it was there.\nAt first, I assumed this was because I named the file incorrectly. But the file downloaded and saved by pyenv was named exactly the same.\nBy making sure that the code in plugins/python-build/bin/python-build definitely looked in the cache directory:\nOLD CODE:\nif [ -e \"$package_filename\" ] && verify_checksum \"$package_filename\" \"$checksum\"; then\nNEW CODE:\nif [ -f \"$PYTHON_BUILD_CACHE_PATH/$package_filename\" ] && verify_checksum \"$package_filename\" \"$checksum\"; then\nBasically, you only look in the current directory for cached files.\nLater in that same function, you do define $package_filename to be the full path. So I suppose an alternative would be to just move that to the top of the function.\nHonestly, as I look at this, I'm going to change my pull request some, but I do think it's valid.\n. basename on EL4 hosts doesn't work the same way as it does on EL5+. I don't know that this is fixable.. EL -> Enterprise Linux.\nThat is, any Linux based on RHEL (like CentOS).\nAs a separate note, CentOS 4 has been EOL (end of life) for years now. It might be time to consider upgrading.. I ran into this challenge before my company finally decommed all their EL4 hosts. basename exists as a function in EL4, but does something significantly different. Given how much basename's current (EL5+) functionality plays a role in how pyenv works, you probably won't be able to get this fixed.\nIf you just need python 3.5.2, have you tried just installing it on your system with:\n./configure\nmake\nmake altinstall\n?\nThat should install it in /usr/local.. Interestingly, adding --with-system-ffi and --with-system-expat seems to circumvent this.. ",
    "bartekbrak": "I believe this is a pyenv-virtualenv issue. When creating a new virtualenv, the headers are not created/symlinked in its folder. Neither is python-config or as in my case python3.5-config that dbus I'm installing now is looking for. I switched to the global python and installation went fine. Then back to virtualenv and bang:\n```\n$ pyenv local 3.5.0\n$ pip install git+https://github.com/posborne/dbus-python.git\nall ok\n$ pyenv local myenv\n$ pip install git+https://github.com/posborne/dbus-python.git | grep -C 1 \"could not find Python headers\"\n    checking whether those headers are sufficient... no\n    configure: error: could not find Python headers\n```\n@yyuu, Do you think virtualenv should symlink the headers and so on? Should I open a separate issue on its gh page?\n. Tested. I confirm, this worked. You're great!\nNot that I could install dbus anyway, its setup.py is broken in other ways but that's dbus problem. I gave up as this was just one of many failing dependencies for some neglected package I researched. I hope  this solution will help someone else with some similar problem. \n. ",
    "bsed": "sudo apt-get install libdbus-1-dev libdbus-glib-1-dev\n. ",
    "fjbsantiago": "Damn, I had a similar issue and I was just missing:\npyenv virtualenvwrapper\nin my ~./bash_profile. ",
    "karolciba": "If one would like to compile and install, for example wxPython, and keep this library only for targeted python installation (not system, global wide) eg:\npython build-wxpython.py --build_dir=../bld --prefix=$HOME/.pyenv/versions/2.7.10/ --install\nThen only way to use this library is to set LD_LIBRARY_PATH in shell, which seems strange and inconvenient:\nLD_LIBRARY_PATH=$HOME/.pyenv/versions/2.7.10/lib/ python demo/demo.py\n. ",
    "rothnic": "Yeah, looks like _ssl fails because of _socket: https://gist.github.com/rothnic/3e785df935ae0e61adb7#file-pyenv_3-4-3_build_log-log-L6566\nI assumed I had all build requirements since 2.7.10 builds and runs fine. I'm not sure what the symlink would be doing since the only thing going on is running pyenv install 3.4.3 inside of a docker container. The rest of the command I stated is just mounting volumes so the build is available after the container is finished and destroyed.\n. Ok, so I got the ssl issue fixed by adding some additional build requirements, but the main issue about the invalid python3.4 still exists. It appears the issue is related to the symlink that you pointed out.\nI checked the bin directory and there was no python, and I can use the python version if I run the docker image, then delete the python3.4, then symlink python3.4m to python3.4, and python3.4 to python.\nHere is the build script for the official alpine python3: http://git.alpinelinux.org/cgit/aports/tree/main/python3/APKBUILD\nAnd for python2:\nhttp://git.alpinelinux.org/cgit/aports/tree/main/python/APKBUILD\n. ",
    "sethamclean": "This didn't work for me. This SO topic has a solution that worked though.\nhttp://stackoverflow.com/questions/32973975/why-isnt-pyenv-finding-openssl-shared-libraries-under-alpine-linux\n. ",
    "twig": "Thanks for that @bmcorser, that solved my issues with UCS4.\n. ",
    "Harrison0x80": "\nAh -- I think this is actually a known psycopg2 issue, since Pip installs from wheels (pre-compiled packages, AFAIK) so the error makes a little more sense. If I install from sauce, things seem OK:\n$ pip uninstall psycopg2\n$ git clone https://github.com/psycopg/psycopg2\n$ cd psycopg2\n$ python setup.py build\n$ python setup.py install\n$ python -c 'from psycopg2.extras import NumericRange'\n$ echo $?\n0\n\nthanks a lot, I rebuild myself then slove the problem.. ",
    "bertjwregeer": "If you install OpenSSL from hombrew, since Apple no longer ships the OpenSSL headers, you could run:\nbrew link --force openssl\n. Unfortunately it seems that unless I do as I mentioned above (brew link --force openssl) the builds will not pick up the OpenSSL installed as a keg:\n```\nalexandra:~ xistence$ pyenv install 2.6.9\nDownloading Python-2.6.9.tgz...\n-> https://yyuu.github.io/pythons/7277b1285d8a82f374ef6ebaac85b003266f7939b3f2a24a3af52f9523ac94db\nInstalling Python-2.6.9...\npatching file setup.py\nHunk #1 succeeded at 354 (offset 9 lines).\npatching file ./configure\npatching file ./Modules/readline.c\nHunk #1 succeeded at 199 (offset -7 lines).\nHunk #2 succeeded at 698 (offset -51 lines).\nHunk #3 succeeded at 808 (offset -51 lines).\nHunk #4 succeeded at 848 with fuzz 2 (offset -70 lines).\npatching file ./setup.py\nHunk #1 succeeded at 1698 (offset 23 lines).\nERROR: The Python ssl extension was not compiled. Missing the OpenSSL lib?\nPlease consult to the Wiki page to fix the problem.\nhttps://github.com/yyuu/pyenv/wiki/Common-build-problems\nBUILD FAILED (OS X 10.11 using python-build 20150818)\nInspect or clean up the working tree at /var/folders/_l/cx3x95zs4yn6kb1ndy03yrzm0000z9/T/python-build.20150920235324.84808\nResults logged to /var/folders/_l/cx3x95zs4yn6kb1ndy03yrzm0000z9/T/python-build.20150920235324.84808.log\nLast 10 log lines:\n    then rm -f /Users/xistence/.pyenv/versions/2.6.9/bin/python; \\\n    else true; \\\n    fi\n(cd /Users/xistence/.pyenv/versions/2.6.9/bin; ln python2.6 python)\nrm -f /Users/xistence/.pyenv/versions/2.6.9/bin/python-config\n(cd /Users/xistence/.pyenv/versions/2.6.9/bin; ln -s python2.6-config python-config)\nCreating directory /Users/xistence/.pyenv/versions/2.6.9/share/man\nCreating directory /Users/xistence/.pyenv/versions/2.6.9/share/man/man1\n/usr/bin/install -c -m 644 ./Misc/python.man \\\n        /Users/xistence/.pyenv/versions/2.6.9/share/man/man1/python.1\nalexandra:~ xistence$ brew info openssl\nopenssl: stable 1.0.2d (bottled)\nOpenSSL SSL/TLS cryptography library\nhttps://openssl.org/\nThis formula is keg-only.\nApple has deprecated use of OpenSSL in favor of its own TLS and crypto libraries\n/usr/local/Cellar/openssl/1.0.1j (431 files, 15M)\n  Poured from bottle\n/usr/local/Cellar/openssl/1.0.1j_1 (431 files, 15M)\n  Poured from bottle\n/usr/local/Cellar/openssl/1.0.2 (459 files, 18M)\n  Poured from bottle\n/usr/local/Cellar/openssl/1.0.2d_1 (464 files, 17M)\n  Poured from bottle\nFrom: https://github.com/Homebrew/homebrew/blob/master/Library/Formula/openssl.rb\n==> Dependencies\nBuild: makedepend \u2718\n==> Options\n--universal\n    Build a universal binary\n--without-check\n    Skip build-time tests (not recommended)\n==> Caveats\nA CA file has been bootstrapped using certificates from the system\nkeychain. To add additional certificates, place .pem files in\n  /usr/local/etc/openssl/certs\nand run\n  /usr/local/opt/openssl/bin/c_rehash\nThis formula is keg-only, which means it was not symlinked into /usr/local.\nApple has deprecated use of OpenSSL in favor of its own TLS and crypto libraries\nGenerally there are no consequences of this for you. If you build your\nown software and it requires this formula, you'll need to add to your\nbuild variables:\nLDFLAGS:  -L/usr/local/opt/openssl/lib\nCPPFLAGS: -I/usr/local/opt/openssl/include\n\n```\nThe build correctly picks up OpenSSL if I brew link --force openssl\n. Yup, will give it a try when I get back from work.\n. Python 2.6.9.\n. This seems to indeed be fixed:\nalexandra:~ xistence$ brew link --force openssl\nLinking /usr/local/Cellar/openssl/1.0.2d_1... ^[[A^[[A1548 symlinks created\nalexandra:~ xistence$ pyenv install 2.6.9\nDownloading Python-2.6.9.tgz...\n-> https://yyuu.github.io/pythons/7277b1285d8a82f374ef6ebaac85b003266f7939b3f2a24a3af52f9523ac94db\nInstalling Python-2.6.9...\npatching file setup.py\nHunk #1 succeeded at 354 (offset 9 lines).\npatching file ./configure\npatching file ./Modules/readline.c\nHunk #1 succeeded at 199 (offset -7 lines).\nHunk #2 succeeded at 698 (offset -51 lines).\nHunk #3 succeeded at 808 (offset -51 lines).\nHunk #4 succeeded at 848 with fuzz 2 (offset -70 lines).\npatching file ./setup.py\nHunk #1 succeeded at 1698 (offset 23 lines).\nInstalling pip from https://bootstrap.pypa.io/get-pip.py...\nInstalled Python-2.6.9 to /Users/xistence/.pyenv/versions/2.6.9\n. @TensorTom instead of using which, could you output type python please? This will show you what the current shell thinks python is. This may not match what is in the $PATH (which is what which shows you) if for example you have an alias setup for python.. ",
    "geryit": "Had the same issue, \n$ xcode-select --install\n fixed it\n. ",
    "fenngwd": "I guess because I used proxychains as a proxy to download the python version.\n. ",
    "kk17": "I have the same problem when installing with proxychains.\n. ",
    "intsilence": "Same problem with proxychains, thanks!\n. I have the same problem, and it is fixed now by running xcode-select --install command.\n. ",
    "LittleKey": "Same problem, thx. ",
    "shrmrf": "It fails on Windows Subsystem for Linux or bash on Windows 10 too. I guess because the subsystem does not have access to the lower level functions.... ",
    "turtleizzy": "Same problem with proxychains, solved by specifying PYTHON_CONFIGURE_OPTS, thanks!. ",
    "COLABORATI": "A mailing list is not an FAQ site, also a wiki is something different. I am missing the possibility to just ask anything on a list and read interesting discussions by pyenv users. However, I may ask just right here while I am at it: \nI find pyenv to be a really convenient tool, because it (besides other things) helps me to avoid having too many virtualenvs. Usually I just pip install stuff into the pyenv activated python environment - without a virtualenv - and everything works. \nBut there are some pieces of software where this does not work and some modules are missing, but in a (pyenv) virtualenv they still work. An example is the krill newsreader - doing a pip install krill in a \"pure\" pyenv environment (no virtualenv) installs this, but executing krill does not work: \nuser@ubuntu$ krill\nTraceback (most recent call last):\n  File \"/home/user/.pyenv/versions/2.7.9/bin/krill\", line 7, in <module>\n    from krill.krill import main\n  File \"/home/user/.pyenv/versions/2.7.9/lib/python2.7/site-packages/krill/krill.py\", line 31, in <module>\n    from blessings import Terminal\n  File \"/home/user/.pyenv/versions/2.7.9/lib/python2.7/site-packages/blessings/__init__.py\", line 5, in <module>\n    import curses\n  File \"/home/user/.pyenv/versions/2.7.9/lib/python2.7/curses/__init__.py\", line 15, in <module>\n    from _curses import *\nImportError: No module named _curses\nWhen I create a virtualenv, then there are no problems and krill executes without problems.\nWhy is that happening? I guess something related to the sys.path, but I do not understand exactly, why things do not work in a \"pure\" pyenv environment without virtualenv, but do work in the same pyenv environment within a virtualenv. \nThis is not related to any real life problem - I just want to understand what happens here.\nThanks for your attention!\n. It's the other way around - giving the community a place to grow is the first step to getting enough eyes and hands - a mailinglist is the premier place to let that happen. This project is currently stared by 3000 people - these people have no way to freely communicate, so no community can grow.\nA wiki, a FAQ site and an issue tracker are specialized tools for organizing certain aspects of software work, but for free communication a mailing list is needed. \nPlease also see http://www.appsembler.com/blog/10-things-every-open-source-project-should-have/\nHowever, I am happy you did not write \"Let's make a facebook group, it's 2015\" :)\n. BTW also it would be great if you could motivate the uwsgi authors to add a chapter about how to integrate with pyenv, I can not find the string \"pyenv\" in their docs.\n. https://github.com/unbit/uwsgi/issues/1251\n. As there is unfortunately an unbelievable chaos of how to deploy python web apps with more then one zen way to do this, it would be great if there was also explanation for how to use pyenv with a system-installed uwsgi (via package manager) and how to use it with uwsgi installed in the pyenv local environment (installed via pip) - and which one is better? Also if there might be differences / problems between python2 and python3, this should be explained. THANK YOU!\n. ",
    "robobario": "I have the same problem with OS X 10.10, pyenv v20150913\nI got 2.6.9 installed by rolling pyenv back to tags/v20150404. It looks like it runs a setuptools bootstrap before the pip bootstrap.\n. ",
    "pohmelie": "I want \"python\" system and \"python3\" 3.4.3\n. No, this does not.\n[poh ~]$ pyenv global 3.4.3 system\n[poh ~]$ python --version\nPython 3.4.3\n[poh ~]$ python3 --version\nPython 3.4.3\nadded:\nWhy did you close issue? I did not approve your solution.\n. @blueyed exactly.\n. Ok, thanks for answer! I think this solution is good for me.\n. ",
    "ThomasWaldmann": "Giving the env variable worked! Thanks for helping with that!\nBTW, are there some docs where this trick could be added? Guess I am not the only one who might need that.\n. Great work, thanks!\n. seems like it must be pip < 8.0 and virtualenv < 14.0 to work with python 3.2.\n. cool, thanks!\n. yup, it works for me. \\o/\n. my above comment related to a local test with linux and python 3.2.\njust wanted to leave a note here that it is still broken for everybody who gets pyenv via brew on mac os x, because it gets the not-yet-fixed pyenv version from december 2015 from there.\nhttps://travis-ci.org/borgbackup/borg/jobs/106235185\n. thanks much! :)\n. @chrisspen Well, I think it was really fixed back then. Back then, we ran our tests using pyenv and travis-ci on ubuntu 12.04, so we noticed it working again (and also not breaking for a while).\nCan't say anything about the current state though, because we moved on and run on ubuntu 14.04 now, so no py 3.2 there any more - also we raised our project's minimum requirements to 3.4.\n. Would a bounty help here?. Also strange: even if one has installed readline and openssl (1.0.2) before installing pyenv and building pythons with it, pyenv seems to download these again.\nI would like to have pyenv use the existing packages, so I can influence (e.g. via PKG_CONFIG_PATH or compiler/linker flags env variable) which openssl version pyenv uses for building the pythons (because it should be the same version as I use to build borgbackup with).. my comment above was about travis-ci's macOS testing.\nstrange, in my vagrant-based testing, I see:\ndarwin64: python-build: use openssl from homebrew\n    darwin64: python-build: use readline from homebrew\n    darwin64: Downloading Python-3.7.0.tar.xz...\n    darwin64: -> https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tar.xz\n    darwin64: Installing Python-3.7.0...\n    darwin64: python-build: use readline from homebrew\n    darwin64: Installed Python-3.7.0 to /Users/vagrant/.pyenv/versions/3.7.0\nSo, pyenv does not download readline and openssl, but picks it up from homebrew, as desired.. yeah, can confirm that (even though I pointed PKG_CONFIG_PATH at openssl@1.1).. It is likely this code in .pyenv/plugins/python-build/bin:\nuse_homebrew_openssl() {\n  local ssldir=\"$(brew --prefix openssl 2>/dev/null || true)\"\n  if [ -d \"$ssldir\" ]; then\n    echo \"python-build: use openssl from homebrew\"\n    export PKG_CONFIG_PATH=\"$ssldir/lib/pkgconfig/:${PKG_CONFIG_PATH}\"\n    export CPPFLAGS=\"-I$ssldir/include ${CPPFLAGS}\"\n    export LDFLAGS=\"-L$ssldir/lib ${LDFLAGS}\"\n  else\n    return 1\n  fi\n}\nbrew --prefix openssl queries the 1.0.x openssl.\nbrew --prefix openssl@1.1 queries the 1.1.x openssl.\n. That seems to work:\nuse_homebrew_openssl() {\n  local ssl11dir=\"$(brew --prefix openssl@1.1 2>/dev/null || true)\"\n  local ssl10dir=\"$(brew --prefix openssl 2>/dev/null || true)\"\n  if [ -d \"$ssl11dir\" ]; then\n    echo \"python-build: use openssl 1.1 from homebrew\"\n    local ssldir=$ssl11dir\n  elif [ -d \"$ssl10dir\" ]; then\n    echo \"python-build: use openssl 1.0 from homebrew\"\n    local ssldir=$ssl10dir\n  else\n    return 1\n  fi\n  export PKG_CONFIG_PATH=\"$ssldir/lib/pkgconfig/:${PKG_CONFIG_PATH}\"\n  export CPPFLAGS=\"-I$ssldir/include ${CPPFLAGS}\"\n  export LDFLAGS=\"-L$ssldir/lib ${LDFLAGS}\"\n}. PR #1302. Maybe this is due to a change in Cython, it now generates code (.pyx -> .c) like this:\n```\nif !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000\n#define __Pyx_PyThreadState_Current PyThreadState_GET()\nelif PY_VERSION_HEX >= 0x03050200\n#define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()\nelif PY_VERSION_HEX >= 0x03000000\n#define __Pyx_PyThreadState_Current PyThreadState_Get()\nelse\n#define __Pyx_PyThreadState_Current _PyThreadState_Current\nendif\n```. It's a Cython issue:\nhttps://github.com/cython/cython/issues/1880\nWorkaround: Cython!=0.27\n. Thanks for fixing. Claim the bounty and have a beer (or whatever). :). $8 are still waiting to be claimed (sorry if it is not much, but you know, poor FOSS projects...).. I am aware that this PR is far from perfect, but it could be temporarily used until someone (not me, I don't like shell scripting) writes even better code:\nE.g. it could be checked whether PKG_CONFIG_PATH (and the other 2 env vars) already has an entry pointing at an openssl location and if so, do not modify them. Then users could choose which openssl version they want by setting these env vars before invoking pyenv install. Would also need a piece of docs.\n. BTW, would be cool to have this available soon, I need python with openssl 1.1 for borgbackup testing.. Guess if this needs changing, it can be just changed again in future. Considering how long it took from 1.0 to 1.1 and how long it takes software and distributions to adapt to changes, I guess this will not frequently change and not quickly need to be changed.. Another consideration: is it going to blow up something if pyenv produces a python compiled with / linked to openssl 1.1 and some python-based software compiles / links some C extension with 1.0?. ",
    "alanorth": "Ok, I just tried in an environment without pkgsrc paths (/opt/pkg) and this worked:\n```\n$ pyenv install 3.4.3\nInstalling openssl-1.0.1p...\nInstalled openssl-1.0.1p to /Users/aorth/.pyenv/versions/3.4.3\nInstalling readline-6.3...\nInstalled readline-6.3 to /Users/aorth/.pyenv/versions/3.4.3\nInstalling Python-3.4.3...\nInstalled Python-3.4.3 to /Users/aorth/.pyenv/versions/3.4.3\n```\nI guess this is a problem with my environment mixing libs, headers, PATHs, etc. I'll close this now.\n. ",
    "case": "Fwiw, this did the trick for me:\nCFLAGS=\"-I$(brew --prefix openssl)/include -I$(xcrun --show-sdk-path)/usr/include\" \\\nLDFLAGS=\"-L$(brew --prefix openssl)/lib\" \\\npyenv install -v 3.4.3\n. ",
    "copperlight": "The above solution did not work in my case (an upgrade of a relatively fresh Yosemite to El Capitan).  This worked for me:\n```\nxcode-select --install\nbrew install openssl\nbrew install readline\nbrew install pyenv --HEAD\nexport PYENV_ROOT=/usr/local/var/pyenv\npyenv install 2.7.10\npyenv install 3.4.3\n```\n. ",
    "AnilRedshift": "FWIW, these are the settings I had to use (specifically note that including the --show-sdk-path did NOT work for me)\nbrew install readline\nbrew install openssl\nbrew install pyenv\nbrew install sqlite3\nexport CFLAGS=\"-I$(brew --prefix openssl)/include\"\nexport LDFLAGS=\"-L$(brew --prefix openssl)/lib -L$(brew --prefix sqlite3)/lib\"\nexport CPPFLAGS=\"-I$(brew --prefix sqlite3)/include\"\npyenv install 2.7.10\n. ",
    "blablaha": "this works for me:\nbash\n$ brew link --force openssl\n$ xcode-select --install \n$ pyenv install 3.3.5\n$ pyenv global 3.3.5\n. ",
    "windhost": "This works for me:\nbrew install openssl\nbrew install pyenv\nbrew install sqlite3\nexport CFLAGS=\"-I$(brew --prefix openssl)/include\"\nexport LDFLAGS=\"-L$(brew --prefix openssl)/lib -L$(brew --prefix sqlite3)/lib\"\nexport CPPFLAGS=\"-I$(brew --prefix sqlite3)/include\"\npyenv install 3.5.1\n. ",
    "mrhyh": "Python-3.5.2.tar.xz...\n-> https://www.python.org/ftp/python/3.5.2/Python-3.5.2.tar.xz\nerror: failed to download Python-3.5.2.tar.xz\nBUILD FAILED (OS X 10.12.6 using python-build 20160602)\nInspect or clean up the working tree at /var/folders/lt/qy668fzs32d4nxnvx8r2_p440000gn/T/python-build.20170801170723.7421\nResults logged to /var/folders/lt/qy668fzs32d4nxnvx8r2_p440000gn/T/python-build.20170801170723.7421.log\nLast 10 log lines:\n/var/folders/lt/qy668fzs32d4nxnvx8r2_p440000gn/T/python-build.20170801170723.7421 ~\nwarning: xz not found; consider installing xz package\ncurl: (18) transfer closed with 13596292 bytes remaining to read\nhyhdeMac-mini:~ hyh$ pyenv install -v pypy3.5-5.8.0-sr\npython-build: definition not found: pypy3.5-5.8.0-sr\nThe following versions contain `pypy3.5-5.8.0-sr' in the name:\n  pypy3.5-5.8.0-src\nSee all available versions with `pyenv install --list'.\nIf the version you need is missing, try upgrading pyenv:\nbrew update && brew upgrade pyenv\n. ",
    "jalevin": "A few things to look at:\nBesides pyenv I also could not install ruby versions via rbenv. At this point I started looking at the system. I'd recently upgraded and used the migration assistant to move to a new machine.\n\ngo to Applications and run Xcode. I had additional packages install\nrun brew doctor. if any files in /usr/local/include show up you have 2 options. Either rename the directory to something else like include_old or remove the offending entries. I chose the first.\n\nsudo mv /usr/local/include /usr/local/include_old\nsudo mkdir /usr/local/include\nsudo chown $YOU_USERNAME:admin /usr/local/include\nafterward, I was able to install ruby and python versions. Besides pyenv I also could not install ruby versions via rbenv. At this point I started looking at the system. I'd recently upgraded and used the migration assistant to move to a new machine.\n\ngo to Applications and run Xcode. I had additional packages install\nrun brew doctor. if any files in /usr/local/include show up you have 2 options. Either rename the directory to something else like include_old or remove the offending entries. I chose the first.\n\nsudo mv /usr/local/include /usr/local/include_old\nsudo mkdir /usr/local/include\nsudo chown $YOU_USERNAME:admin /usr/local/include\nafterward, I was able to install ruby and python versions. Besides pyenv I also could not install ruby versions via rbenv. At this point I started looking at the system. I'd recently upgraded and used the migration assistant to move to a new machine.\n\ngo to Applications and run Xcode. I had additional packages install\nrun brew doctor. if any files in /usr/local/include show up you have 2 options. Either rename the directory to something else like include_old or remove the offending entries. I chose the first.\n\nsudo mv /usr/local/include /usr/local/include_old\nsudo mkdir /usr/local/include\nsudo chown $YOU_USERNAME:admin /usr/local/include\nafterward, I was able to install ruby and python versions. Besides pyenv I also could not install ruby versions via rbenv. At this point I started looking at the system. I'd recently upgraded and used the migration assistant to move to a new machine.\n\ngo to Applications and run Xcode. I had additional packages install\nrun brew doctor. if any files in /usr/local/include show up you have 2 options. Either rename the directory to something else like include_old or remove the offending entries. I chose the first.\n\nsudo mv /usr/local/include /usr/local/include_old\nsudo mkdir /usr/local/include\nsudo chown $YOU_USERNAME:admin /usr/local/include\nafterward, I was able to install ruby and python versions. Besides pyenv I also could not install ruby versions via rbenv. At this point I started looking at the system. I'd recently upgraded and used the migration assistant to move to a new machine.\n\ngo to Applications and run Xcode. I had additional packages install\nrun brew doctor. if any files in /usr/local/include show up you have 2 options. Either rename the directory to something else like include_old or remove the offending entries. I chose the first.\n\nsudo mv /usr/local/include /usr/local/include_old\nsudo mkdir /usr/local/include\nsudo chown $YOU_USERNAME:admin /usr/local/include\nafterward, I was able to install ruby and python versions. ",
    "Feiox": "@yyuu OpenSSL and zlib has been installed from brew.\nI also try to install pyenv from latest github repo, but the same error msg ---> T_T\nP.S. Did Apple's new security policy cause the problem? Would you choose to upgrade?\n. @thomasjo I am running a clean install of El Capitan instead of an upgrade, so do you?\nI saw some people in other issues that had the same problem. It should not be a case that exist only on my mac.\nI try to compile install python and python3 from homebrew and official source package, then everything is normal. T_T Where else may be wrong\uff1f\n. @ccqpein @yyuu I tried to reinstall the system again, then #448 solution makes my mac normal.\nWhy do I use this solution the last time it invalid?  (\u25dc\u25d4\u3002\u25d4\u25dd)\nTHX ~ \n. ",
    "ccqpein": "I have the same issues, and I use El Capitan too.\nEven I install the zlip by brew, the problem is same. \nI use \nCFLAGS=\"-I$(brew --prefix openssl)/include\" \\\nLDFLAGS=\"-L$(brew --prefix openssl)/lib\" \\\npyenv install -v 3.4.3\nAnd it doesn't work either:\n```\nzipimport.ZipImportError: can't decompress data; zlib not available\nmake: *** [install] Error 1\nBUILD FAILED (OS X 10.11 using python-build 20150818)\n```\nWhat can I do?\n. Well, I succeed install with the #448 solution:\nCFLAGS=\"-I$(brew --prefix openssl)/include -I$(xcrun --show-sdk-path)/usr/include\" \\\nLDFLAGS=\"-L$(brew --prefix openssl)/lib\" \\\npyenv install -v 3.5.0\n. On the old version, the path is \"~/.pyenv/shim\" and work well, can't work after update. It change the path to brew path, and  eval \"$(pyenv init -) add another brew path at the head of the path list. It's the bug or change the setting way in new version?\n. I reinstall the pyenv with brew, and relaunch the shell after install. Delete eval \"$(pyenv init -)in .zshrc.\nAnd my path is \"/usr/local/opt/pyenv/shims /usr/local/opt/pyenv/bin\", not \"~/.pyenv/shim/\" as before, I haven't do anything. \n. The PYENV_ROOT exactly is /usr/local/opt/pyenv. I don't know why, I never change that.\nWhen I add export PYENV_ROOT=\"$HOME/.pyenv\" to .zshrc. The PATH become \"/Users/Myname/.pyenv/shims /usr/local/opt/pyenv/shims /usr/local/opt/pyenv/bin\" \nWhen eval \"$(pyenv init -)\" in .zshrc. The PATH including three pyenv paths, one PYENV_ROOT and \"/usr/local/opt/pyenv/shims /usr/local/opt/pyenv/bin\"\nWhen eval \"$(pyenv init -)\" not in .zshrc. The PATH including only two pyenv paths, \"/usr/local/opt/pyenv/shims /usr/local/opt/pyenv/bin\"\n. And  no matter what I do for pyenv or shell config, which python always show \"/usr/bin/python\". I remember it might be \"~/.pyenv/shim\" before. \n. I will try it and send email to brew too, thank you\n. I found where the problem is, oh-my-zsh pyenv plugin do something for the pyenvdirs. I turn off this plugin then the pyenv work well.\nThanks guys\n. ",
    "echoyangyang": "Okay...I browsed throughout the Internet....Finally I it's the x-code tool problem. \non your terminal, \nxcode-select --install\nthen,\npyenv install 3.5.0\nThat's solved my problem.\nMay this can help you.\n. @arcseldon Glad to help you :>\n. ",
    "nguyenchiencong": ":+1: \n. ",
    "arcseldon": "El Capitan is like the \"gift\" that keeps on giving...  @312024196 thank you, your solution worked a charm.\n. ",
    "shixudongleo": "xcode-select --install\nsolve my problem. \n. The problem in my case is not same as: http://stackoverflow.com/questions/15403273/possible-conflicting-python-installations\n$ which python\n/home/shixd/.pyenv/shims/python\nthis is no numpy installed in /usr/local/lib/python2.7/dist-packages\nWhat is the problem causing this? Can pyenv handle it? \nWhat are the additional operations needed for set it up? \n. ",
    "woolf-wen": "@ccqpein, ur solution solve my problem\n. ",
    "hervenivon": "Problem is still here, xcode-select --install solved it too for me.. ",
    "jshin49": "For zlib, i had the same problem\nThis worked for me after installing zlib with brew\nCFLAGS=\"-I/usr/local/opt/zlib/include\" \\\nLDFLAGS=\"-L/usr/local/opt/zlib/lib\" \\\npyenv install -v 3.4.5. ",
    "thetylerwolf": "I'm running OS X Sierra and the above didn't help for me. Found this solution here: https://medium.com/@pimterry/setting-up-pyenv-on-os-x-with-homebrew-56c7541fd331\nand it did work.\n```\nCFLAGS=\"-I$(brew --prefix readline)/include -I$(brew --prefix openssl)/include -I$(xcrun --show-sdk-path)/usr/include\" \\\nLDFLAGS=\"-L$(brew --prefix readline)/lib -L$(brew --prefix openssl)/lib\" \\\nPYTHON_CONFIGURE_OPTS=--enable-unicode=ucs2 \\\npyenv install -v 3.6.0\n```. ",
    "hshinde": "I was facing the problem with Python installation through all other mediums, but this is the only method worked for me. \nxcode-select --install\nthen,\npyenv install 3.6.0a1\nThanks @echoyangyang. ",
    "xijieqjx": "macos 10.13.2\nxcode-select --install is success\nthanks . ",
    "GusGA": "I know, it a close issue but today Feb/4/18.\nxcode-select --install do the trick\n. ",
    "tdibacco": "ditto, worked for me.\nmacOS 10.13.3\nxcode-select --install\n. ",
    "paustin01": "xcode-select --install worked for me on High Sierra as well.. ",
    "0x3333": "On Mojave:\nsudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target /. ",
    "leejongyoung": "@ccqpein \nIt is work!!\nThank you very much for your help\nError Msg\n```\npython-build: use openssl from homebrew\npython-build: use readline from homebrew\nDownloading Python-3.6.6.tar.xz...\n-> https://www.python.org/ftp/python/3.6.6/Python-3.6.6.tar.xz\nInstalling Python-3.6.6...\npython-build: use readline from homebrew\nBUILD FAILED (OS X 10.14 using python-build 20180424)\n```\nSolved Command\nCFLAGS=\"-I$(brew --prefix openssl)/include -I$(xcrun --show-sdk-path)/usr/include\" \\\nLDFLAGS=\"-L$(brew --prefix openssl)/lib\" \\\npyenv install -v 3.6.6\nResult Msg\nInstalled Python-3.6.6 to /Users/leejongyoung/.pyenv/versions/3.6.6\n. ",
    "ashishnegi": "sorry for the delayed reply.\nI did as you suggested : getting base_prefix in orca-env. It shows it is indeed 3.x of local pyenv's python. Here is the log.\n^C(orca-env) ashish:orca$ python -c 'import sys; print(sys.real_prefix)'\nTraceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nAttributeError: 'module' object has no attribute 'real_prefix'\n(orca-env) ashish:orca$ python -c 'import sys; print(sys.base_prefix)'\n/home/ashish/.pyenv/versions/3.4.3\n(orca-env) ashish:orca$\nHowever, i could not find ${virtualenv_prefix} directory. Where would it be located ?\nbut as much as i remember i did not wrote --sysem-site-packages while creating the virtualenv orca-env.  I also tried a full search for no-global-*.txt in /home and it returned nothing.\nAny suggesions ?\n. Great this works..\nHowever, the line pyenv virtualenv --python=/usr/bin/python3 --system-site-packages system orca-env should be without system. Right ?\nAlso, to understand what happened is that you created a new virtualenv with /usr/bin/python3 with system-site-packages flag. so, if orca-env can not find the packages in local site-packages it would search in /usr/bin/python3's site-packages. However, pip in orca-env would install things in local environment.\n. ",
    "karamosky": "Same issue for me too, 3.4.x build correctly but not 3.5, Xcode is up to date \n. https://gist.github.com/karamosky/9e3fcf22b2f84e2e9466\n. ",
    "swarajban": "@nikolay I had the same issue, and was able to fix by updating command line tools on OSX. Just run xcode-select --install\nOnce, that's finished, you should be able to install 3.5.0\n. ",
    "VirtualWolf": "I was having the same problem. The fix for me, despite already having Xcode installed and up-to-date (7.1), was running xcode-select --install and installing the command line tools.\n. ",
    "qtfkwk": "I also had this issue but it's fixed now via xcode-select --install... I have XCode 7.1... Homebrew, etc, are working fine otherwise... no complaints about xcode-select, libraries missing, etc before trying to install Python 3.5.0. I will try to remember to run xcode-select --install from now on after upgrading XCode. Here's a copy of my session:\n```\n$ pyenv install 3.5.0\nDownloading Python-3.5.0.tgz...\n-> https://yyuu.github.io/pythons/584e3d5a02692ca52fce505e68ecd77248a6f2c99adf9db144a39087336b0fe0\nInstalling Python-3.5.0...\nBUILD FAILED (OS X 10.11.1 using python-build 20150818)\nInspect or clean up the working tree at /var/folders/t2/60dlskjn6hq8r4wbmnmp0_nm0000gn/T/python-build.20151028190759.49730\nResults logged to /var/folders/t2/60dlskjn6hq8r4wbmnmp0_nm0000gn/T/python-build.20151028190759.49730.log\nLast 10 log lines:\n  File \"/private/var/folders/t2/60dlskjn6hq8r4wbmnmp0_nm0000gn/T/python-build.20151028190759.49730/Python-3.5.0/Lib/ensurepip/main.py\", line 4, in \n    ensurepip._main()\n  File \"/private/var/folders/t2/60dlskjn6hq8r4wbmnmp0_nm0000gn/T/python-build.20151028190759.49730/Python-3.5.0/Lib/ensurepip/init.py\", line 209, in _main\n    default_pip=args.default_pip,\n  File \"/private/var/folders/t2/60dlskjn6hq8r4wbmnmp0_nm0000gn/T/python-build.20151028190759.49730/Python-3.5.0/Lib/ensurepip/init.py\", line 116, in bootstrap\n    _run_pip(args + [p[0] for p in _PROJECTS], additional_paths)\n  File \"/private/var/folders/t2/60dlskjn6hq8r4wbmnmp0_nm0000gn/T/python-build.20151028190759.49730/Python-3.5.0/Lib/ensurepip/init.py\", line 40, in _run_pip\n    import pip\nzipimport.ZipImportError: can't decompress data; zlib not available\nmake: *** [install] Error 1\n$ xcode-select --install # clicked install button\nxcode-select: note: install requested for command line developer tools\n$ xcode-select --install\nxcode-select: error: command line tools are already installed, use \"Software Update\" to install updates\n$ pyenv install 3.5.0\nDownloading Python-3.5.0.tgz...\n-> https://yyuu.github.io/pythons/584e3d5a02692ca52fce505e68ecd77248a6f2c99adf9db144a39087336b0fe0\nInstalling Python-3.5.0...\nInstalled Python-3.5.0 to /Users/nick/.pyenv/versions/3.5.0\n```\n. ",
    "GregBakker": "Had the same problem but with installing 3.4.3 via pyenv. Having tried the suggestions above, was still having issues.\nInstalled python via brew was 3.5\n3.4.3 would not install via pyenv with zipimport.ZipImportError: can't decompress data; zlib not available\nOn a hunch I did an\n   pyenv install 3.5\nafter which\n   pyenv install 3.4.3\nworked fine.\n. ",
    "mxreppy": "I have a somewhat weird laptop with corporate security.  El Capitan 10.11.2, I was getting problems with cleaning up the build folder and found I needed\nexport KEEP_BUILD_PATH=true\njust to skip over that step.  then pyenv install -v 3.4.3 started working for me\n(n.b. this was after getting the zlib error and reinstalling the xcode command line tools as outlined in this ticket)\nthanks for pyenv!\n. ",
    "abisuq": "Run 'xcode-select --install' can't fix my problem.\n. ",
    "thelostspore": "fwiw I was experiencing this, and already had xcode command line tools installed. However, running xcode-select --install did fix the 3.5.1 install problem on my machine (running OSX 10.11.3).\n. ",
    "penuel-leo": "thx,Run 'xcode-select --install'  fix my problem.\n. ",
    "dukeyu1991": "$ CFLAGS=\"-I$(xcrun --show-sdk-path)/usr/include\" pyenv install 2.7.6\nthis help me to solve the problem.\n. ",
    "robertwe": "Just wanna confirm. Solution provided by swarajban works perfectly\n@swarajban: many thx \n. ",
    "lianghuazhu0501": "I Run 'xcode-select --install'. Fix this error, Thank you very much @swarajban \n. ",
    "z-zkagami": "thx so much.\nMacOS 10.11.4 runs xcode-select --install fix the problem\n. ",
    "candu": "xcode-select --install also fixed this for me.\n. ",
    "devenvexe": "Confirmed xcode-select --install works for macOS Sierra 10.12.1\n. ",
    "ZzAntares": "Yes I think we can't stress this enough, running xcode-select --install from the terminal even though you have xcode installed and up to date it fixes the issue.\nThanks!. ",
    "timworx": "Here is the issue in the Python bug tracker\nxcode-select --install alone did not fix the issue for me, I also ran xcode-select -s /Library/Developer/CommandLineTools to change the path for the CLI tools. \n(It was previously /Applications/Xcode.app/Contents/Developer) \n. ",
    "imidya": "Thanks so much!\nFix this error after running xcode-select --install.. ",
    "lionrock": "Confirmed xcode-select --install works for macOS Sierra 10.12.3. ",
    "jrzerr": "The xcode-select --install solved the same issue for me on OS X 10.12.3. ",
    "brechtm": "Thanks for looking into this. I don't really need to run Python 3.0.1. I just happened to run into this problem trying to figure out something in a confused moment. But it's good to have this problem documented here.\n. The fix breaks installation of pypy3.3-v5.2.0-alpha1\n```\nInstalling pypy3.3-v5.2.0-alpha1-osx64...\nInstalling pip from https://bootstrap.pypa.io/get-pip.py...\nerror: failed to install pip via get-pip.py\nBUILD FAILED (OS X 10.11.5 using python-build 20160130)\nInspect or clean up the working tree at /var/folders/cm/h_fnh5lx0b5b1b6wvnlc7qlw0000gn/T/python-build.20160624110530.82279\nResults logged to /var/folders/cm/h_fnh5lx0b5b1b6wvnlc7qlw0000gn/T/python-build.20160624110530.82279.log\nLast 10 log lines:\n/var/folders/cm/h_fnh5lx0b5b1b6wvnlc7qlw0000gn/T/python-build.20160624110530.82279 ~/Documents/Code/ray-dog\n/var/folders/cm/h_fnh5lx0b5b1b6wvnlc7qlw0000gn/T/python-build.20160624110530.82279/pypy3.3-v5.2.0-alpha1-osx64 /var/folders/cm/h_fnh5lx0b5b1b6wvnlc7qlw0000gn/T/python-build.20160624110530.82279 ~/Documents/Code/ray-dog\n/usr/local/bin/python-build: line 1660: /Users/brechtm/.pyenv/versions/pypy3.3-5.2-alpha1/bin/python: No such file or directory\n``\n. Yes, apipsymlink is now created. Thanks!\n. I'm having this problem when building a Docker image. This is probably due to the fact that the$(pyenv init -)has not been run when running pyenv fromsh`. Relevant SO question.\nBut it's strange that this causes only problems for the CPython 3.7 build. Building CPython 3.3, 3.4, 3.5 and 3.6 in the same Dockerfile does work.. Which manual? README.md? I don't see it.\nI don't think pyenv shims should output \"command not found\" if no env is activated and there is a command with the same name in PATH.. Building PyPy manually seems to work though, so I think this may be because pyenv reroutes the build output.. There's another problem with building PyPy3.5-5.7.1 beta on macOS. But building using pyenv never gets that far.. ",
    "lanox": "@yyuu thanks.\nAlthough my 2.7.10 Python installed with pyenv does not have any outdated modules when I run pip list --outdated. \nBut when I create virtualenv, setuptool are not on latest version ? I would of assumed setuptools would of been installed with latest version.\nAlso is there way to suppress that message ? \n. Thanks will check when I get home. However I am using brew pyenv and pyenv-virtualenv, so I would assume I am on latest.\nThanks for the clarification \n. yeah I am running\npyenv virtualenv --version\npyenv-virtualenv 20151006 (virtualenv 13.1.2) i guess i will just leave with it if this is not an error.\n. does anyone have any ideas ?. @yyuu thank you for all the work you do on pyenv it is great solution for python, however I find it little bizarre that you could make an assumption that I have slow hardware with out asking what hardware I have. \nI do not think this is due to hardware as my mac is only 1 year old its 2.7 core i5 with 16gb of ram, I am quiet sure that this is sufficient enough.\nI also do not think that this issue should be closed.. ",
    "shubh261096": "\nGo to C:\\Python27\\Lib\\site-packages\nDelete numpy & numpy-1.15.0.dist-info folders \nGo to cmd and write pip install numpy. \n",
    "tjsoftworks": "I have repeated my attempt a number of times under 10.9.5. All fail. The same process under 10.10.5 works just fine.\nAny advise as to what I should look at for figure out why pyenv is failing to install all python versions? The logs are very long and this is a level of debugging I haven't done with python. In the past, I have under homebrew to install version of python. I'm trying to get out of that boat.\nI'm willing to dig and send a pull request but I'm needing a little help getting started on what may be wrong.\n. public gist includes\n\n\nenv\nand\nlog.txt\ngit@gist.github.com:19e61edd6c39709da003.git\n\n\nhttps://gist.github.com/tjsoftworks/19e61edd6c39709da003#file-env\nhttps://gist.github.com/tjsoftworks/19e61edd6c39709da003#file-log-txt\n. I haven't intentionally changed my libSystem.B.dylib. I have reinstalled Command Line Tools. If others have used pyenv on 10.9.5 successfully, with current updates, then perhaps it is something about my system. I would suspect something in the env.PATH. Does anything stand out to you? I'll plan to upgrade the problem machine to Yosemite though I try to keep a development systems using at least two ( this would be three now that El Capitan is out ) OS versions. Thank you for looking at the issue. \n. On a Mac - Yosemite using homebrew to install pyenv ...\nI have had this issue also .... for me, the issues are most often in the PATH but try looking thru all environment variables related to py*\n\n\nenv | grep -i py\n\n\nSat Mar 12 13:43:28 username@onA_Yosemite_based_Mac:~ >>env | grep -i py\nPYENV_ROOT=/usr/local/opt/pyenv\nPYENV_VIRTUALENV_INIT=1\nPATH=/opt/chefdk/bin:/Users/tjadmin/.chefdk/gem/ruby/2.1.0/bin:/opt/chefdk/embedded/bin:/usr/local/Cellar/pyenv-virtualenv/20160202/shims:/usr/local/opt/pyenv/libexec:/usr/local/opt/pyenv/plugins/python-build/bin:/usr/local/opt/pyenv/shims:/usr/local/opt/pyenv/bin:/usr/local/var/rbenv/shims:/Users/tjadmin/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:\nPYTHONSTARTUP=/Users/tjadmin/.pystartup\nPYENV_SHELL=bash\n\nFor reference, here is my python related setup...\nIn my .profile ( which is called by .bash-profile )\n...\nPython Default Setup and Additions\nexport PYTHONSTARTUP=/Users/tjadmin/.pystartup\nInstalled pyenv with homebrew\nTo use Homebrew's directories rather than ~/.pyenv add to your profile:\nexport PYENV_ROOT=/usr/local/opt/pyenv\nexport PATH=$PYENV_ROOT/bin:$PATH\necho \"PATH with PYENV=\"$PATH\nTo enable shims and autocompletion add to your profile:\nif which pyenv > /dev/null; then eval \"$(pyenv init -)\"; fi\nInstalled pyenv-virtualenv\nTo enable auto-activation add to your profile:\nif which pyenv-virtualenv-init > /dev/null; then eval \"$(pyenv virtualenv-init -)\"; fi\n...\n. I have seen this as an ongoing issue a number of times. I keep my homebrew up-to-date and clean with each login.\n\nbrew update\nbrew upgrade\nbrew cleanup\nbrew prune\nas part of the my terminal startup script. What happen is all of my prior pyenv downloads get wiped out as pyenv rolls thru it's development.\n\nHow should one maintain the pyenv environment and it's downloaded versions of python, if the pyenv upgrade process via brew upgrade is not bring these along at the time of upgrade?\nIf this is not a \"bug\", then please document how to maintain pyenv.... or recommend how to upgrade if it is not a simple brew upgrade. Thank You.. ",
    "easior": "No, I think. If there was an activated one of python virtualenvs, the deactivate command should make it exit. However, it reports the same error after executing deactivate command. In addition, it works well if  workon  is executed firstly and then deactivate it.\n. ",
    "voleary": "Thanks yyuu. Here's the gist:\n https://gist.github.com/voleary/40710410faa0f7ac1637\nPlease let me know if you would like to see anything else.\n. ok, thanks. Have updated the gist to show output of the command:  'sudo pyenv install -v 2.7.10 2>&1 >> build.log' \nsame link : https://gist.github.com/voleary/40710410faa0f7ac1637\nNot sure of the impact between running 'sudo pyenv install -v 2.7.10 2>&1 >> build.log' vs. 'pyenv install -v 2.7.10 2>&1 >> build.log' . I realize each may call on different dependent packages. \nI am sudo and sole user of this virtual machine, however I would like to ensure this installation can be replicated on a similar machine without sudo access if possible. Let me know if you want to see anything else.  Really appreciate your help.\n. Hey yyuu,\nThanks again for your help. Is there anything else I can provide that might help us solve? Not sure if this is a lost cause or not.\n. Alright. Thanks anyway for trying to help.\n. ",
    "tony": "Thank you, that did the trick.\n. Do you think it's worth mentioning this at https://github.com/yyuu/pyenv/wiki/Common-build-problems#error-the-python-ssl-extension-was-not-compiled-missing-the-openssl-lib? I can add a note.\n. Done. thank you\n. What about zsh?\n. I had a separate project where I tried to get script similar to what is in libexec to be as portable as possible.\nI am trying to see if it's possible for pyenv to run without bash as a hard requirement (and just zsh for example).  On BSD, you can go surprisingly far without seeing bash requirement.\nIt may not be as relevant to many here, since bash is shipped with OS X and most linux distros. pyenv/rbenv is useful enough for me I'm fine installing bash for it.\n. ",
    "cpaulik": "OK, thank you for the clarification. \nWould it not be a good idea to support anaconda environments like other environments?\n. Thanks, I've opened an issue in pyenv-virtualenv. See https://github.com/yyuu/pyenv-virtualenv/issues/103\n. Thanks. the no-rehash option did the trick.\n. This is cause by installing e.g. https://anaconda.org/conda-forge/gettext into one of the environments. After testing a little bit more I noticed that this breaks a lot of other git commands.\n. I'm using these cronjobs as a workaround.\n* * * * * rm /home/cpa/.pyenv/shims/gettext\n* * * * * rm /home/cpa/.pyenv/shims/gettext.sh\nUgly but it works.. ",
    "demba": "Thanks for the prompt response. Can you be more precise?\n. ",
    "justinmakaila": "@yyuu I'm having a similar issue. No installed versions of python work, aside from the system version:\n~ $ pyenv -v\npyenv 20160202\n~ $ pyenv versions\n  system\n  2.7.10\n* 2.7.11 (set by ~/.pyenv/version)\n  3.5.0\n~ $ pyenv global 2.7.10\n~ $ python -V\n/usr/local/Cellar/pyenv/20160202/libexec/pyenv-exec: line 47: /Users/MYUSER/.pyenv/versions/2.7.10/bin/python: No such file or directory\n~ $ pyenv global system\n~ $ python -V\nPython 2.7.10\n~ $\nAny advice? I've tried pyenv rehash, but nothing changes.\n. ",
    "cjerdonek": "Ah, this is resolved by pyenv rehash.\n. Thanks, @yyuu (and @blueyed). Calling export works.\nI do have eval \"$(pyenv init -)\" in my .bash_profile.  Is there a recommended / preferred way to switch Python versions in a shell script using pyenv?  I first tried pyenv shell ... within the script but got the error above (even though other pyenv commands work).\nNow I'm doing the following, but it's not ideal because you have to remember to switch back to the original version before leaving the script:\n```\n!/bin/bash\noriginal_pyenv=$PYENV_VERSION\nexport PYENV_VERSION=2.7.10\nDO STUFF\nexport PYENV_VERSION=$original_pyenv\n``\n. Great, thanks for the advice!\n. >unset PYENV_VERSION`\nAlso, it may be preferable to restore the original PYENV_VERSION instead in the case that PYENV_VERSION was originally in effect in the caller's shell.\n. @yyuu Sorry, the case I had in mind is if there is additional code later on in the shell script.\n. ",
    "yiliangt5": "@yyuu now the issue is fixed by reinstalling pyenv and python.\nthanks.\n. ",
    "DanyC97": "@yyuu check the debug output\nhttp://www.hastebin.com/pozuweqeqo.md\nand the virtualenv output is\n```\npyenv virtualenvs\nheat_test (created from /usr/local/opt/pyenv/versions/2.7.9)\n  interm_python_class (created from /usr/local/opt/pyenv/versions/2.7.9)\n  python-tutorial-jfine (created from /usr/local/opt/pyenv/versions/3.4.2)\n  test_blessing_module (created from /usr/local/opt/pyenv/versions/3.4.2)\n``\n. @yyuu thank you, happy to test it once you pushed out\n. @yyuu interesting, i had a emptyenvs` sub-dir \n```\nll /usr/local/opt/pyenv/versions/system/\ntotal 0\ndrwxr-xr-x  2 dany  admin    68B  8 Nov 18:03 envs/\n```\nHow that ended up there have no clue.\nThanks for your quick response, pls close it down.\n. please be aware that if you are going to delete the .idea folder as suggested by @fubarhouse , following the restart you won't have any projects attached/ opened as before.\nAlso as mentioned by @hung-phan it won't solve your issue...unfortunately . done more tests and it seems the issue described above is happening only on python 3.x not on python 2.x .. see below (is indeed related to the symlink vs binary file as mentioned by OP)\ni have 2 virtualenvs: dani based on 2.x and playground based on 3.x\n```\nll /usr/local/opt/pyenv/versions/3.6.0/envs/playground/bin/ |grep python\nlrwxr-xr-x  1 user1  admin     6B 16 Jan 18:07 python3 -> python\nlrwxr-xr-x  1 user1  admin    46B 16 Jan 18:07 python -> /usr/local/opt/pyenv/versions/3.6.0/bin/python\nll /usr/local/opt/pyenv/versions/2.7.13/envs/dani/bin/ |grep python\n-rwxr-xr-x  1 user1  admin   1.9M 16 Jan 22:55 python2.7\nlrwxr-xr-x  1 user1  admin     9B 16 Jan 22:55 python2 -> python2.7\nlrwxr-xr-x  1 user1  admin     9B 16 Jan 22:55 python -> python2.7\n-rwxr-xr-x  1 user1  admin   2.3K 16 Jan 22:56 python-config\n``\nAnd i can't confirm that the 3.x python installed bypyenvdoes contain all the binaries as expected so suspect this is purely a pyenv-virtualenv issue\n. @yyuu fyi i do havevirtualenv` installed so then i'd expect the same behavior between 2.x and 3.x. @piotr-dobrogost i think we have 2 issues here:\n\none caused by PyCharm as you mentioned\n\nthe other one caused by pyenv, mainly around the inconsistency between 2.x & 3.x where even if virtualenv is installed could be that still python -m venv is used. Will play more to see if i can figure out.... i found the issue and pushed a PR, tested and PyCharm is a happy bunny now.\nIn case someone is interested, see below how \n\n\npyenv-virtualenv is checking for the presence of virtualenv file \n\nif not present then it check for venv \n\n+ [pyenv-virtualenv:141] '[' -x /usr/local/opt/pyenv/versions/3.6.0/bin/virtualenv ']'^M\n+ [pyenv-virtualenv:144] pyenv-exec python -m venv --help^M\n+ [pyenv-virtualenv:145] HAS_M_VENV=1^M\n+ [pyenv-virtualenv:149] '[' -n '' ']'^M\n+ [pyenv-virtualenv:152] '[' -n 1 ']'^M\n+ [pyenv-virtualenv:152] '[' -z '' ']'^M\n+ [pyenv-virtualenv:152] '[' -z '' ']'^M\nand then it run the below command\n[pyenv-virtualenv:520] cd /usr/local/opt/pyenv/cache^M\n+ [pyenv-virtualenv:521] '[' -n '' ']'^M\n+ [pyenv-virtualenv:524] '[' -n 1 ']'^M\n+ [pyenv-virtualenv:525] pyenv-exec python -m venv /usr/local/opt/pyenv/versions/3.6.0/envs/pyenv-test2^M\n+ [pyenv-exec:20] '[' python = --complete ']'^M\n++ [pyenv-exec:24] pyenv-version-name^M\n+ [pyenv-version-name:6] '[' -z 3.6.0 ']'^M\nbut the way python -m venv /usr/local/opt/pyenv/versions/3.6.0/envs/pyenv-test2 is run that means by default will symlink. In my PR i've added --copies to no longer symlink but copy the binaries . @blueyed i've updated my previous comment with more info, hth. ",
    "jagmoreira": "You're right @blueyed , the shim is ignoring my test.py because it has no slash.\nAfter I change */* ) to * ) I get:\n~/35$ python test.py \npyenv: cannot change working directory to `test.py'\n~/35$ python test.py 27/dummy.txt \npyenv: cannot change working directory to `test.py'\nHowever if I call my script as ./test.py I get the right result:\n~/35$ python ./test.py\n3.5.0 (default, Nov 10 2015, 13:26:40) \n[GCC 4.8.4]\n~/35$ python ./test.py 27/dummy.txt \n3.5.0 (default, Nov 10 2015, 13:26:40) \n[GCC 4.8.4]\n. ",
    "llehtahw": "and what's going on?????. ",
    "brittag": "Thanks, I must have missed that caveats section if it displayed during the Homebrew-based installation!\n```\nTo enable shims and autocompletion add to your profile:\n  if which pyenv > /dev/null; then eval \"$(pyenv init -)\"; fi\nTo use Homebrew's directories rather than ~/.pyenv add to your profile:\n  export PYENV_ROOT=/usr/local/var/pyenv\n```\nLooking at this, it would be great to improve this to the level of detail that the \"Basic GitHub Checkout\" section has. A newcomer might not be sure what \"your profile\" means, so the copy-and-pastable echo 'eval \"$(pyenv init -)\"' >> ~/.bash_profile style commands are really helpful. You may also want to include a link to https://github.com/yyuu/pyenv/blob/master/README.md for people who want to learn what \"shims and autocompletion\" means. :) Also, can it include a brief explanation of how to choose whether to use Homebrew's directories or ~/.pyenv (does this choice affect the next steps you need to take)?\nIn order to submit a pull request improving all these things, I would need to understand this project a little better. I have a couple questions to help me suggest the correct information:\n1. If a person does the Homebrew install process, what are the next steps for them after following the caveats?\n2. Am I correct that a separate  \"download and unpack the source\" step is not necessary?\n. ",
    "tyler274": "I just specified that's not helping.\n. According to apt it is installed. \ntyler274@server1:~/work$ sudo apt-get install libssl-dev\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nlibssl-dev is already the newest version.\n0 to upgrade, 0 to newly install, 0 to remove and 4 not to upgrade.\n. hmm, forcing a reinstall via\nsudo apt-get remove libssl-dev\nsudo apt-get install libssl-dev\nseems to have fixed it. \n. ",
    "VShangxiao": "@yyuu \nI got these prints:\nerror: failed to download Python-3.4.1.tar.xz\nBUILD FAILED (Ubuntu 16.04 using python-build 1.0.2-9-g80e769e)\nplease give a way to fix this~\n. Oh !  I'm a rookie and I hang on here too!\nI wanna know what exactly command I should type in for install Python 3.5.1?\nthx !\n. ",
    "bsima": "@VShangxiao It's probably this: https://stackoverflow.com/questions/37227854/pyenv-build-failed-ubuntu-15-04-using-python-build-20160509/37229034#37229034\ntl;dr sudo apt install ca-certificates. ",
    "Bilida-Mikhail": "\nhmm, forcing a reinstall via\nsudo apt-get remove libssl-dev\nsudo apt-get install libssl-dev\nseems to have fixed it.\n@tyler274 THANKS!\nHelped me. \n",
    "mattrohland": "I had stumbled upon that bug in my searches too, but at a glance it didn't seem related.\nIf 2.7.3 isn't giving others on OS X 10.11.1 any trouble, it might be something very specific surrounding my environment. I'll keep hunting and attempt to remove anything else I may have customized in my development environment.\nAlso, I ran the test in verbose mode so there would be more context as to where in the process the error occurred. Not sure how insightful it is:\n...\n/usr/bin/install -c -m 644 ./Lib/plat-mac/lib-scriptpackages/Terminal/Terminal_Suite.py /Users/mrohland/.pyenv/versions/2.7.3/lib/python2.7/plat-mac/lib-scriptpackages/Terminal\n/usr/bin/install -c -m 644 ./Lib/plat-mac/lib-scriptpackages/Terminal/Text_Suite.py /Users/mrohland/.pyenv/versions/2.7.3/lib/python2.7/plat-mac/lib-scriptpackages/Terminal\n/usr/bin/install -c -m 644 ./Lib/plat-mac/lib-scriptpackages/Terminal/__init__.py /Users/mrohland/.pyenv/versions/2.7.3/lib/python2.7/plat-mac/lib-scriptpackages/Terminal\n/usr/bin/install -c -m 644 ./LICENSE /Users/mrohland/.pyenv/versions/2.7.3/lib/python2.7/LICENSE.txt\nif test -d /Users/mrohland/.pyenv/versions/2.7.3/lib/python2.7/distutils/tests; then \\\n        /usr/bin/install -c -m 644 ./Modules/xxmodule.c \\\n            /Users/mrohland/.pyenv/versions/2.7.3/lib/python2.7/distutils/tests ; \\\n    fi\nPYTHONPATH=/Users/mrohland/.pyenv/versions/2.7.3/lib/python2.7   \\\n        ./python.exe -Wi -tt /Users/mrohland/.pyenv/versions/2.7.3/lib/python2.7/compileall.py \\\n        -d /Users/mrohland/.pyenv/versions/2.7.3/lib/python2.7 -f \\\n        -x 'bad_coding|badsyntax|site-packages|lib2to3/tests/data' \\\n        /Users/mrohland/.pyenv/versions/2.7.3/lib/python2.7\nTraceback (most recent call last):\n  File \"/Users/mrohland/.pyenv/versions/2.7.3/lib/python2.7/compileall.py\", line 16, in <module>\n    import struct\n  File \"/Users/mrohland/.pyenv/versions/2.7.3/lib/python2.7/struct.py\", line 1, in <module>\n    from _struct import *\nImportError: No module named _struct\nmake: *** [libinstall] Error 1\n. After sifting through the the verbose logs I started noticing messages like symbol(s) not found for architecture i386. This reminded me that I had recently worked on a project where I had set the following in the shell export ARCHFLAGS=\"-arch i386 -arch x86_64\". I was working on that project around the time I upgraded to OSX 10.11.1 and had incorrectly assumed the upgrade was related to the issue.\nRemoving the ARCHFLAGS value from my shell environment allowed python to build correctly. For more information on ARCHFLAGS see: https://developer.apple.com/library/prerelease/mac/releasenotes/OpenSource/PerlExtensionsRelNotes/index.html\n@joshfriend thank you for helping me rule out the OSX version.\n. ",
    "jakirkham": "Also, having this issue. Would like to install a later 2.7 preferably. Is there any way to solve this? ARCHFLAGS not set. Trying to install 2.7 on 10.10.3.\n. So, this is some library that is built for Mac specifically. I saw this issue also when installing 3.5.1 on 10.11. It may very well be that something changed in 10.11 that CPython has not yet accounted for. I don't see any issues raised upstream, but that may be the place to start. ( http://bugs.python.org )\n. Seeing the same issue. Is there a way to force installation of a particular version of pip and friends when installing Python 3.2?\n. Thank you.\n. ",
    "ReadmeCritic": ":smile: \n. ",
    "catlee": "This is probably applicable to other versions of python too.\n. I'm on 1.0.2d\nOn Sun, Dec 6, 2015 at 6:27 PM, Yamashita, Yuu notifications@github.com\nwrote:\n\nLooks good. Just for reference, which openssl version are you using?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/yyuu/pyenv/pull/495#issuecomment-162368054.\n. \n",
    "ipfans": "Updated.\n.  use PYTHON_CONFIGURE_OPTS=\"--with-dtrace\" pyenv install 3.6.0b1 instead\n. [translation:ERROR] ValueError: running 'pkg-config libffi --cflags-only-I' failed:\nPackage libffi was not found in the pkg-config search path.\nPerhaps you should add the directory containing `libffi.pc'\nto the PKG_CONFIG_PATH environment variable\nNo package 'libffi' found\nand the default ['/usr/include/ffi'] is not a valid directory\nIf you build with homebrew with libffi installed, try:\nPKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/opt/libffi/lib/pkgconfig brew install pypy3.5-5.8.0-src\nAnd this works fine for me.. I think you have two ways to work with pyenv:\n\nWorking with interpreter path directly: call your python with /path/to/.pyenv/versions/version_you_want/bin/python\nWorking with Virtualenv: nothing new here.. \n",
    "obmarg": "Is there an ETA for this being released?\n. ",
    "politicus": "When I try the command \"pyenv init\" (bash or zsh) I get the message Load pyenv automatically by appending the following eval \"$(pyenv init -)\"  to .bash_profile or .zshrc. \nThe problem is I already added this line of code to .bash_profile and .zshrc.\n. I installed pyenv via hombrew. Once it was installed I followed the documentation's intructions and issued  the command pyenv init. I did nothing else. How can I have eval \"$(pyenv init)\"' somewhere in my shell configuration?  In whiwh file? I checked etc/profile etc/paths. Everyhting is fine. Reinstalled pyenv via Homebrew same problem again. I checked I added a '-' in my .zshrc file. \n. ",
    "rschwiebert": "@yyuu \nI installed pyenv and pyenv-virtualenv with HomeBrew and the instructions in the docs here. I can't seem to get the automatic sourcing to work either.\nI have these in my bash_profile, because they appeared at the end of the homebrew messages:\n```\nif which pyenv > /dev/null; then eval \"$(pyenv init -)\"; fi\nif which pyenv-virtualenv-init > /dev/null; then eval \"$(pyenv virtualenv-init -)\"; fi\n```\nI've also set PYENV_ROOT and put it in PATH in the bash_profile.\nThe version was created in the pyenv versions list and it works just fine if I activate it manually, but it won't activate automatically when I cd into the directory of the same name as the environment.\nWhat ingredient am I missing here? Why won't it fire up the environment?\n. ",
    "will-Do": "This also fix https://github.com/yyuu/pyenv/issues/580\n. ",
    "brbsix": "This fixes #588 as well. Thanks\n. Any chance this can be merged?\n. I'm dealing with this issue as well. It's really troubling as I'm unable to (practically) use any Python 2.7.x other than the system one in /usr/bin/python2.\nIt's not just that ~/.local exists, it's that ~/.local/lib/python2.7/site-packages exists. Compare the output of python -m site with the following pyenvs:\n2.6.6\nsys.path = [\n    '/home/user',\n    '/home/user/.pyenv/versions/2.6.6/lib/python26.zip',\n    '/home/user/.pyenv/versions/2.6.6/lib/python2.6',\n    '/home/user/.pyenv/versions/2.6.6/lib/python2.6/plat-linux3',\n    '/home/user/.pyenv/versions/2.6.6/lib/python2.6/lib-tk',\n    '/home/user/.pyenv/versions/2.6.6/lib/python2.6/lib-old',\n    '/home/user/.pyenv/versions/2.6.6/lib/python2.6/lib-dynload',\n    '/home/user/.pyenv/versions/2.6.6/lib/python2.6/site-packages',\n]\nUSER_BASE: '/home/user/.local' (exists)\nUSER_SITE: '/home/user/.local/lib/python2.6/site-packages' (doesn't exist)\nENABLE_USER_SITE: True\n2.7.11\nsys.path = [\n    '/home/user',\n    '/home/user/.pyenv/versions/2.7.11/lib/python27.zip',\n    '/home/user/.pyenv/versions/2.7.11/lib/python2.7',\n    '/home/user/.pyenv/versions/2.7.11/lib/python2.7/plat-linux2',\n    '/home/user/.pyenv/versions/2.7.11/lib/python2.7/lib-tk',\n    '/home/user/.pyenv/versions/2.7.11/lib/python2.7/lib-old',\n    '/home/user/.pyenv/versions/2.7.11/lib/python2.7/lib-dynload',\n    '/home/user/.local/lib/python2.7/site-packages',\n    '/home/user/.pyenv/versions/2.7.11/lib/python2.7/site-packages',\n]\nUSER_BASE: '/home/user/.local' (exists)\nUSER_SITE: '/home/user/.local/lib/python2.7/site-packages' (exists)\nENABLE_USER_SITE: True\n3.6-dev\nsys.path = [\n    '/home/user',\n    '/home/user/.pyenv/versions/3.6-dev/lib/python36.zip',\n    '/home/user/.pyenv/versions/3.6-dev/lib/python3.6',\n    '/home/user/.pyenv/versions/3.6-dev/lib/python3.6/plat-linux',\n    '/home/user/.pyenv/versions/3.6-dev/lib/python3.6/lib-dynload',\n    '/home/user/.pyenv/versions/3.6-dev/lib/python3.6/site-packages',\n]\nUSER_BASE: '/home/user/.local' (exists)\nUSER_SITE: '/home/user/.local/lib/python3.6/site-packages' (doesn't exist)\nENABLE_USER_SITE: True\nHere's what it looks like if I use pyenv virtualenv. It's obviously all knackered up (erroneously using the user site at ~/.local/lib/python2.7/site-packages and copying the wrong version of Python).\n```\n\npyenv virtualenv 2.7.11 sample\nRequirement already satisfied (use --upgrade to upgrade): virtualenv in ./.local/lib/python2.7/site-packages\nUsing base prefix '/usr'\nNew python executable in /home/user/.pyenv/versions/2.7.11/envs/sample/bin/python2\nAlso creating executable in /home/user/.pyenv/versions/2.7.11/envs/sample/bin/python\nInstalling setuptools, pip, wheel...done.\nIgnoring indexes: https://pypi.python.org/simple/\nRequirement already satisfied (use --upgrade to upgrade): setuptools in /home/user/.pyenv/versions/2.7.11/envs/sample/lib/python2.7/site-packages\nRequirement already satisfied (use --upgrade to upgrade): pip in /home/user/.pyenv/versions/2.7.11/envs/sample/lib/python2.7/site-packages\nCleaning up...\n```\n\nGetting closer to a fix, is there some way pyenv can disable user site packages?\nhttps://docs.python.org/2/library/site.html#site.ENABLE_USER_SITE https://docs.python.org/2/using/cmdline.html#cmdoption-s\nThe -s flag has the desired effect on sys.path as seen below:\n```\n\npython -sm site\nsys.path = [\n    '/home/user',\n    '/home/user/.pyenv/versions/2.7.11/lib/python27.zip',\n    '/home/user/.pyenv/versions/2.7.11/lib/python2.7',\n    '/home/user/.pyenv/versions/2.7.11/lib/python2.7/plat-linux2',\n    '/home/user/.pyenv/versions/2.7.11/lib/python2.7/lib-tk',\n    '/home/user/.pyenv/versions/2.7.11/lib/python2.7/lib-old',\n    '/home/user/.pyenv/versions/2.7.11/lib/python2.7/lib-dynload',\n    '/home/user/.pyenv/versions/2.7.11/lib/python2.7/site-packages',\n]\nUSER_BASE: '/home/user/.local' (exists)\nUSER_SITE: '/home/user/.local/lib/python2.7/site-packages' (exists)\nENABLE_USER_SITE: False\n```\n\nAs a workaround for users in the meantime, you can create a virtualenv with pyenv virtualenv 2.7.11 --python=python2 virtualenv-name. The user site will be disabled, so it should work as expected.\n. I think it would help to have a better understanding of your use-case. Are you trying to share a consistent development environment with users on remote machines? I think you're going to have a lot of issues using git for this task. Git doesn't even store permissions correctly.\nIf you're trying to share a development environment, Vagrant is well-suited for the task. You can start with a Debian or Ubuntu base box, set up pyenv (along with anything else), then package it and share the box on Atlas. That will be the easiest option. If you don't need an entire ~400-500mb Debian/Ubuntu base box, with a little more work you may be able to set it up on an Alpine base box.\nAs for a multi-user environment, perhaps you could create the directory /var/cache/pyenv, download all the Python packages your users will need and put them there, then export PYTHON_BUILD_CACHE_PATH=/var/cache/pyenv? Just a guess. Obviously users will still have to build the packages, but that will save the download step.\n. I just installed pyenv in a clean Ubuntu 16.04 Vagrant box and am experiencing the error there as well.\nThis is the tail of ~/.bashrc:\n```\nPATH=\"$HOME/.pyenv/bin:$PATH\"\neval \"$(pyenv init -)\"\neval \"$(pyenv virtualenv-init -)\"\n```\nThis is $PATH:\n/home/vagrant/.pyenv/plugins/pyenv-virtualenv/shims:/home/vagrant/.pyenv/shims:/home/vagrant/.pyenv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games\nIssue:\nvagrant@xenial:~$ python - /usr/share/bash-completion/completions/python2 <<<pass\n/home/vagrant/.pyenv/libexec/pyenv: line 43: cd: python: Not a directory\nEverything appears to be properly configured.\n. What does your $PATH look like after all this? It seems like something must be affecting it after pyenv.\n. ",
    "kenXengineering": "This is the command that I ran to install pyenv and then try and install python 2.5.6.\napt-get update && \\\napt-get install -y python-dev libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev libpq-dev llvm && \\\ncurl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash && \\\nexport PATH=\"$HOME/.pyenv/bin:$PATH\" && \\\neval \"$(pyenv init -)\" && \\\neval \"$(pyenv virtualenv-init -)\" && \\\nmkdir -p /mnt/home && \\\nexport MAKEFLAGS=\"-j $(grep -c ^processor /proc/cpuinfo)\" && \\\npyenv install 2.5.6\nYou can run the command in a docker container using the following command (its what I ran it in)\ndocker run -it --rm onmodulus/build-base bash\nHere is the gist of the output from the command.  https://gist.github.com/f9f0914bde783cf39225\nAnd here is the gist of the log file.  https://gist.github.com/anonymous/f9f0914bde783cf39225\n. ",
    "shangsunset": "Hi,\nWhat could go wrong? shims is in the beginning of the path.\nThis is my path variable:\n\nswitching versions works sometimes, it will stop working when i restart the shell and says version 3.5.1 is not installed something like that.\nThanks.\n. ",
    "FavorMylikes": "yes,I understand,before install pyenv,the version of python is 2.7.10,I mean when enter python -V,but,python3 and python3.4  is already in /usr/bin,look\npython               python3.4            python3-mako-render\npython2              python3.4m           python3-pyinotify\npython2.7            python3-chardetect   python-local-exec\npython3              python3-coverage\nIf I want to set python version be 3.4,How can I use it that have installed,or I must install python 3.4 in /pyenv/versions again?\n. ",
    "theronic": "I reinstalled pyenv and have a similar problem. How do I tell pyenv about all the pre-existing Python versions?. ",
    "kootenpv": "This is a thing. I have an existing pre-pyenv python3.6 and python3.7... now I want to shell the existing python3.7 to be the \"main\" (one and only) python. How could I do this?. ",
    "rbutleriii": "If you know the legacy python directory, it seems to work to symlink it into the ~/.pyenv/versions folder alongside the others.. Ah dammit, I figured it out. system was in the .python-version file in the folder of that script, which I was calling from a different folder. On my 16.04 build, system was my py27, but on 18.04 I have a pyenv 2.7.15. Even though 18.04 doesn't come with python(2), I had previously installed it via sudo apt install python. So long story short, it was defaulting to system 2.7. And I should never ever put system in my .python-version.\nInterestingly though, 18.04 paired with pyenv seems like it is going to be much more efficient. The system version will be kept entirely separate as python3, and all pyenv versions can then easily be controlled with python. Pyenv cannot even see the system version of python3, unless you explicitly link python to /usr/bin/python3, or apt install python (don't do that, just use pyenv). . ",
    "thoongnv": "I encounter this issue, hope to find the answer here but bot, so there is no way to archive this?. ",
    "kabukunz": "Hello there, I don't know if this has been solved...\nit takes:\nsudo env PYTHON_CONFIGURE_OPTS=\"--enable-framework\" pyenv install 3.5.3 --verbose\nbecause the installer needs to write /Application dir to install Idle and co... HTH. ",
    "Zverushko": "fell off ssh\nclose pls\n. ",
    "foxx": "Ah great stuff, thank you!\n. It's surprising behaviour at the very least. Is there anything we can do to make this more obvious to the user?\n. That's an excellent question, I've been trawling through the internals and trying to think of ways this situation could either be avoided or made more obvious, but yet to think of a good solution. I was hoping you might have some ideas, as you know the code base better than I do.\n. I believe I used --user when installing some packages previously.\ne.g. pip install --user bottle\n. @yyuu This isn't a duplicate of #524, or doesn't appear to be. In #524, I was able to fix the problem by manually invoking rehash, but in this instance rehash doesn't appear to be removing the script when using develop. You said in the other thread that it wasn't working because it wasn't automatically involved, which is correct. But that's not the case here.\nAre you saying that develop is outright not supported with pyenv? If not, why?\n. ",
    "ancientHacker": "Sorry if I am being dense, but... there is no directory or symlink /usr/local/var/pyenv created by the brew install; instead, the brew install continues to create /usr/local/opt/pyenv as a symlink to the Cellar.  Is the goal here that the versions directory not be in the Cellar at all?  And will pyenv create /usr/local/var/pyenv when needed in order to create the versions and shims subdirectories?  Is that how it's supposed to work now?\n. So then how am I supposed to change the PYENV_ROOT setting and make it\nstick after upgrading to/installing the latest brew version?  I have two\ninstalled versions in the Cellar (/usr/local/opt/pyenv/versions/)\ndirectory, but resetting PYENV_ROOT to /usr/local/var/pyenv and moving the\nversions/ directory there does not seem to get pyenv to notice the existing\nversions.  Do I have to reinstall those versions?  Is there a way to trick\npyenv install into noticing them so it recreates shims?\nOn Mon, Jan 4, 2016 at 2:09 AM Yamashita, Yuu notifications@github.com\nwrote:\n\nYou're right. PYENV_ROOT will be created automatically if it doesn't\nexist. IIRC, creating the 'versions' directory in the 'Cellar' directory\ncould cause problem after formula update.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/yyuu/pyenv/issues/516#issuecomment-168630600.\n. What I finally had to do was to uninstall pyenv, then set the environment\nvariable, then reinstall pyenv, then reinstall all my python versions.\nMoving the versions folder to the new location didn't seem to get pyenv to\nsee them properly.  I am guessing there is some data that pyenv keeps\nsomewhere that it uses in pyenv init, and it updates that info whenever it\ninstalls a version.  I really think this issue should be reopened (or\nanother one opened instead) and directed at providing a way of explicitly\nmoving the PYENV_ROOT path from one place to another.\n. @yyuu @mtraynham I have opened #526 with a better title and description for this issue.\n. \n",
    "mtraynham": "So what was the out come of this?\nexport PYENV_ROOT=/usr/local/var/pyenv seems to be getting overriden now:\n\u00bb echo $PYENV_ROOT\n/usr/local/opt/pyenv\nIt still has my existing versions on the PATH, as I can run python and get 3.5.1, but if I run \u00bb pyenv versions, I only see system.\n. @ancientHacker Yeah, I'm going down the same road.  Even if I set it to /usr/local/var/pyenv, it get's overridden, but /usr/local/opt/pyenv is symlinked to the Cellar directory and will get removed on every upgrade of pyenv.\nI basically unset the property, so that things seemingly get installed to ~/.pyenv and therefore won't get nuked on the next upgrade.\nEdit Shit, even if I do install to ~/.pyenv, a new shell doesn't work properly.  Looks like you have to set export PYENV_ROOT=/usr/local/opt/pyenv or symlink the directory that contains the versions to it.\nCan we reopen this @yyuu ?\n. Also seeing this as well, --enable-framework seems to skip all the shims.  I installed 3.5.1 with --enable-framework a few months ago and the structure of the directory is quite a bit different.  I wonder what has changed.  This breaks YouCompleteMe integration which kind of sucks...\n. ",
    "xgess": "i had this issue as well when i upgraded pyenv to fix something unrelated. i can confirm that deleting everything pyenv on my machine was an effective (albeit annoying and slow) method to get everything working again. . ",
    "xniightx123": "Sorry dude, was at the wrong url \n. ",
    "cu39": "My case on Mac OS X 10.9.5 and python 2.7.11 was solved with tweaking build options.\nFirst messages I got :\n```\ncu39@mbp:~/% pyenv local 2.7.11\ncu39@mbp:~/% python\nPython 2.7.11 (default, Mar 20 2016, 22:38:41)\n[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.57)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n\n\nimport numpy\n(...)\nImportError: dlopen(/Users/cu39/.anyenv/envs/pyenv/versions/2.7.11/lib/python2.7/site-packages/numpy/core/multiarray.so, 2): Symbol not found: _PyUnicodeUCS2_AsASCIIString\n```\n\n\n\nsuggests multiarray.so does not have _PyUnicodeUCS2_AsASCIIString which is supported with nm's output (U means Undefined) (reflink) :\ncu39@mbp:~/% nm ~/.anyenv/envs/pyenv/versions/2.7.11/lib/python2.7/site-packages/numpy/core/multiarray.so | grep _PyUnicode\n0000000000156ae8 d _PyUnicodeArrType_Type\n                 U _PyUnicodeUCS2_AsASCIIString\n                 U _PyUnicodeUCS2_AsUnicodeEscapeString\n                 U _PyUnicodeUCS2_FromUnicode\n00000000000dcc50 t _PyUnicode_FromUCS4\n                 U _PyUnicode_Type\n0000000000150d68 d __PyUnicode_ArrFuncs\nBTW python-build (pyenv install) builds them with --enable-unicode=ucs4 (source) #257\nYou can confirm it in REPL (reflink) :\n```\n\n\n\nimport sysconfig\nsysconfig.get_config_vars()['CONFIG_ARGS']\n```\n\n\n\nnumpy wheel for OS X have been built for UCS2-enabled python so my case was solved with giving PYTHON_CONFIGURE_OPTS=--enable-unicode=ucs2 to pyenv install :\nCFLAGS=\"-I$(brew --prefix readline)/include -I$(brew --prefix openssl)/include\" \\\nLDFLAGS=\"-L$(brew --prefix readline)/lib -L$(brew --prefix openssl)/lib\" \\\nPYTHON_CONFIGURE_OPTS=--enable-unicode=ucs2 \\\npyenv install -v 2.7.11\npip install --upgrade pip\npip install numpy\n```\n\n\n\nimport numpy\n```\n\n\n\nThough this is not a case for Ubuntu in which python deb package is UCS4-enabled, investigations with nm and sysconfig.get_config_vars() may give you some hints.\n. ",
    "agjohnson": "The above information by @cu39 resolved my issue. I was receiving the undefined symbol exception on OSX, using tox on top of a pyenv virtualenv. I hit the ImportError exceptions with undefined UCS2 symbols on pyzmq and lxml.etree while rerolling the pyenv/tox envs. Wiping both and rebuilding my Python versions with PYTHON_CONFIGURE_OPTS=--enable-unicode=ucs2 resolved the issue.\nAlso, as this was an issue of the wheels being installed from UCS2 builds, installing with pip --no-binary lxml,pyzmq would in theory have the same effect for my case -- that is, if i wanted to special case all of my tox configurations.\nI believe pep 513 aims to address this, though I'm not sure what tool support looks like currently.\n. ",
    "kevinzzz007": "@cu39 the solution also worked for me, but I had to delete my old virtualenv which was build based on the Python 2.7.11 that didn't have the specified configurations, and build a new virtualenv that's based on the configured Python 2.7.11, thanks!\n. ",
    "pelednoam": "Nop, just from make\n. My bad, I've just ran make, without looking on the installation instructions.\n. ",
    "raphaelstolt": "Dah it does. Which ressources do you need to switch the format of the version when tagging releases? \nBut it's your library and therefore your call.\n. As far as I know it's not possible to do PRs for release tags and you would also externalise the release management of the library. \nA few of the minor efforts you have to make for switching to SemVer is changing the release versioning format from vYYYYMMDD to vMajor.Minor.Patch when tagging releases and raising the SemVer partial version numbers meaningful. \nYou raise the Major version number when introducing API breaking changes. The Minor version number is raised when new features are added and the Patch version number is raised when bugs are fixed. \nAnother minor effort is to also use the SemVer compliant versions in your CHANGELOG.md.\nIMO not that much release engineering at all, plus more information revealing than time stamped release version numbers.\n. ",
    "oplatek": "I found out that the _scproxy module was not compiled successfully: \n``` sh\n./python.exe -E ./setup.py install \\\n                --prefix=/Users/oplatek/.pyenv/versions/3.5.1 \\\n                --install-scripts=/Users/oplatek/.pyenv/versions/3.5.1/bin \\\n                --install-platlib=/Users/oplatek/.pyenv/versions/3.5.1/lib/python3.5/lib-dynload \\\n                --root=/\nrunning install\nrunning build\nrunning build_ext\nbuilding '_scproxy' extension\nclang -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -I/usr/local/opt/openssl/include -I/usr/local/opt/readline/include -I/usr/local/opt/readline/include -I/usr/local/opt/openssl/include -I/Users/oplatek/.pyenv/versions/3.5.1/include -I./Include -I. -IInclude -I/usr/local/opt/readline/include -I/usr/local/opt/openssl/include -I/Users/oplatek/.pyenv/versions/3.5.1/include -I/usr/local/include -I/private/var/folders/1d/5tqxnt315jjgrlrtqmj02l7m0000gn/T/python-build.20160117131021.56679/Python-3.5.1/Inc\nlude -I/private/var/folders/1d/5tqxnt315jjgrlrtqmj02l7m0000gn/T/python-build.20160117131021.56679/Python-3.5.1 -c /private/var/folders/1d/5tqxnt315jjgrlrtqmj02l7m0000gn/T/python-build.20160117131021.56679/Python-3.5.1/Modules/_scproxy.c -o build/temp.macosx-10.11-x86_64-3.5/private/var/folders/1d/5tqxnt315jjgrlrtqmj02l7m0000gn/T/python-build.20160117131021.56679/Python-3.5.1/Modules/_scproxy.o\nIn file included from /private/var/folders/1d/5tqxnt315jjgrlrtqmj02l7m0000gn/T/python-build.20160117131021.56679/Python-3.5.1/Modules/_scproxy.c:6:\nIn file included from /System/Library/Frameworks/SystemConfiguration.framework/Headers/SystemConfiguration.h:124:\nIn file included from /System/Library/Frameworks/SystemConfiguration.framework/Headers/SCPreferences.h:35:\nIn file included from /System/Library/Frameworks/Security.framework/Headers/Security.h:60:\n/System/Library/Frameworks/Security.framework/Headers/SecItem.h:985:49: error: expected ';' after top level declarator\nextern const CFStringRef kSecUseAuthenticationUI\n                                                ^\n/System/Library/Frameworks/Security.framework/Headers/SecItem.h:987:54: error: expected ';' after top level declarator\nextern const CFStringRef kSecUseAuthenticationContext\n                                                     ^\n/System/Library/Frameworks/Security.framework/Headers/SecItem.h:1005:54: error: expected ';' after top level declarator\nextern const CFStringRef kSecUseAuthenticationUIAllow\n                                                     ^\n/System/Library/Frameworks/Security.framework/Headers/SecItem.h:1007:53: error: expected ';' after top level declarator\nextern const CFStringRef kSecUseAuthenticationUIFail\n                                                    ^\n/System/Library/Frameworks/Security.framework/Headers/SecItem.h:1009:53: error: expected ';' after top level declarator\nextern const CFStringRef kSecUseAuthenticationUISkip\n                                                    ^\nIn file included from /private/var/folders/1d/5tqxnt315jjgrlrtqmj02l7m0000gn/T/python-build.20160117131021.56679/Python-3.5.1/Modules/_scproxy.c:6:\nIn file included from /System/Library/Frameworks/SystemConfiguration.framework/Headers/SystemConfiguration.h:124:\nIn file included from /System/Library/Frameworks/SystemConfiguration.framework/Headers/SCPreferences.h:35:\nIn file included from /System/Library/Frameworks/Security.framework/Headers/Security.h:65:\n/System/Library/Frameworks/Security.framework/Headers/SecPolicy.h:91:60: error: expected ';' after top level declarator\nextern const CFStringRef kSecPolicyApplePayIssuerEncryption\n                                                           ^\nIn file included from /private/var/folders/1d/5tqxnt315jjgrlrtqmj02l7m0000gn/T/python-build.20160117131021.56679/Python-3.5.1/Modules/_scproxy.c:6:\nIn file included from /System/Library/Frameworks/SystemConfiguration.framework/Headers/SystemConfiguration.h:124:\nIn file included from /System/Library/Frameworks/SystemConfiguration.framework/Headers/SCPreferences.h:35:\nIn file included from /System/Library/Frameworks/Security.framework/Headers/Security.h:87:\n/System/Library/Frameworks/Security.framework/Headers/CMSEncoder.h:77:5: error: expected function body after function declarator\n    __OSX_AVAILABLE_STARTING(__MAC_10_11, __IPHONE_NA);\n    ^\n/usr/local/include/Availability.h:163:50: note: expanded from macro '__OSX_AVAILABLE_STARTING'\n    #define __OSX_AVAILABLE_STARTING(_osx, _ios) __AVAILABILITY_INTERNAL##_osx\n                                                 ^\n:36:1: note: expanded from here\n__AVAILABILITY_INTERNAL__MAC_10_11\n^\nIn file included from /private/var/folders/1d/5tqxnt315jjgrlrtqmj02l7m0000gn/T/python-build.20160117131021.56679/Python-3.5.1/Modules/_scproxy.c:6:\nIn file included from /System/Library/Frameworks/SystemConfiguration.framework/Headers/SystemConfiguration.h:124:\nIn file included from /System/Library/Frameworks/SystemConfiguration.framework/Headers/SCPreferences.h:35:\nIn file included from /System/Library/Frameworks/Security.framework/Headers/Security.h:91:\n/System/Library/Frameworks/Security.framework/Headers/SecureTransport.h:1105:2: error: expected function body after function declarator\n        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_5_0, __IPHONE_9_0);\n        ^\n/usr/local/include/Availability.h:165:53: note: expanded from macro '__OSX_AVAILABLE_BUT_DEPRECATED'\n                                                    __AVAILABILITY_INTERNAL##_osxIntro##_DEP##_osxDep\n                                                    ^\n:25:1: note: expanded from here\n__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11\n^\n/private/var/folders/1d/5tqxnt315jjgrlrtqmj02l7m0000gn/T/python-build.20160117131021.56679/Python-3.5.1/Modules/_scproxy.c:74:10: warning: comparison of address of 'kSCPropNetProxiesExcludeSimpleHostnames' not equal to a null pointer is always true [-Wtautological-pointer-compare]\n    if (&kSCPropNetProxiesExcludeSimpleHostnames != NULL) {\n         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    ~~~~\n/System/Library/Frameworks/SystemConfiguration.framework/Headers/SCSchemaDefinitions.h:2153:49: note: expanded from macro 'kSCPropNetProxiesExcludeSimpleHostnames'\ndefine kSCPropNetProxiesExcludeSimpleHostnames kSCPropNetProxiesExcludeSimpleHostnames\n                                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n1 warning and 8 errors generated.\nPython build finished successfully!\nThe necessary bits to build these optional modules were not found:\nossaudiodev           spwd                                   \nTo find the necessary bits, look in setup.py in detect_modules() for the module's name.\nFailed to build these modules:\n_scproxy                                                     \n```\n. @yyuu thanks. I think you are absolutely right. Any help is still greatly appreciated, but I do not think it is closely related to pyenv. Feel free to close the issue.\n. ",
    "FirstBlgD": "ok\n. ",
    "dnmiller": "Ran into this as well. Looks like a good ol' XCode update snuck in and clobbered zlib again.\nxcode-select --install\nsolved it for me.\n. ",
    "geoidesic": "xcode-select doesn't fix the issue for me on Mac OS X Mojave (10.14). Thanks but that didn't work for me. Not sure if it's related but I'm trying to install 3.5.6.. > What I had to do was specify CFLAGS as mentioned on the FAQ page, e.g.,\n\nshell\n$ CFLAGS=\"-I$(xcrun --show-sdk-path)/usr/include\" pyenv install -v 3.5.6\n\nIs that for .bash_profile?. ",
    "WillDeuz": "Hey @geoidesic to solve the problem on Mojave I ran \n$ brew upgrade\nThen \n$ pyenv install 3.6.3\nI have some warning from sqlite3 but the python version was installed.. did you see a pyenv package upgrade with \"mojave\" name on it when you run brew upgrade?\nI would suggest to reinstall pyenv. Seems the solution is:\n1) Install the Mojave pyenv package\n2) export the env variables with the path. ",
    "jamesmallen": "What I had to do was specify CFLAGS as mentioned on the FAQ page, e.g.,\nshell\n$ CFLAGS=\"-I$(xcrun --show-sdk-path)/usr/include\" pyenv install -v 3.5.6. ",
    "guidefreitas": "Same problem here in Mojave. \nIt did install the mojave pyenv package but fails to install python 3.7.0 with \"zipimport.ZipImportError: can't decompress data; zlib not available\"\n@jamesmallen trick worked.\nCFLAGS=\"-I$(xcrun --show-sdk-path)/usr/include\" pyenv install 3.7.0. ",
    "bobinson": "same problem for me too & the following worked\nCPPFLAGS=\"-I/usr/local/opt/zlib/include\" pyenv install -v 3.7.0. ",
    "florianpilz": "Thanks for fixing the issue so fast! Since I'm sitting on the broken version of homebrew I repeated the fix manually, i.e. adjusted /usr/local/Cellar/pyenv/20151006/default-plugins/python-build/share/python-build/3.2.6 according to https://github.com/yyuu/pyenv/commit/1dc9ef24dfd0d04d3a566ac5b19015bee5ea5f0b (replace ensurepip with ez_setup)\n. ",
    "hfoffani": "pyenv-alias did it.\nThanks a lot!\n. ",
    "luzfcb": "I believe that the equivalent curl --retry for wget is:\n-t number\n       --tries=number\n           Set number of tries to number. Specify 0 or inf for infinite retrying.  The default is to retry 20 times, with the exception of fatal errors\n           like \"connection refused\" or \"not found\" (404), which are not retried.\nbut aria2 is more better than wget, for people like me who suffer from bad connections.\n. wget and aria2 has \"--continue\" option\ncurl is slightly different, has \"-C -\". I'm not sure if it has the same behavior as --continue from wget and aria2\n. why HEAD feature is necessary?\naria2c --use-head=true\nhttps://aria2.github.io/manual/en/html/aria2c.html?highlight=head#cmdoption--use-head\n. @yyuu I plan to test your pull-request today or tomorrow . Thank :-)\n. @yyuu I tested, and it works almost as I expected:\n1. after download start with -v option, for whatever reason, it takes about 1 minute to appear the first log with download information. ( I have no idea how to solve this, I suppose pyenv does something with stdout resulting in this delay )\n2. By default, only aria2 enable accelerated download if the file is larger than 20MB, so for my connection to download still too slow. I solved this by manually changing the aria2 download configuration.\nI modified the function http_get_aria2c, and add the parameters -x 10 -k 1M -s 10, where:\n- -x is number of max connections per server (aria2 default is 1)\n- -k is minimum split size  (aria2 default is 20MB)\n- -s number of connections to download (aria2 default is 5)\nbefore:\naria2c -o \"${2:--}\" ${options} \"$1\"\nafter:\naria2c -x 10 -k 1M -s 10 -o \"${2:--}\" ${options} \"$1\"\nI running with and without my aria2 configurations changes\nwith -x 10 -k 1M -s 10 option: \n3:36 minutes to download, compile and install: https://asciinema.org/a/6tg41eorz1pqj0hqr5ax7ounq \nwithout: \n21:33 minutes to download, compile and install: https://asciinema.org/a/7xex4x5eniei5ugxnn0i7wdu8\n. ",
    "digglife": "@brbsix Thanks for your explanation. \nI simply deleted all the python libs from .local folder. It's OK now. . ",
    "crdoconnor": "My mistake. I had an old patch file in that directory.\n. ",
    "izayoi5776": "looks like can not compile to ucs2 even --enable-unicode=ucs2. ",
    "wangwenpei": "I have same issue on Mac and I solved it. the problem is you use an old MacOS X but use a newer Xcode. you have to upgrade your system to Sierra.. @murawskikrzysiek  remove your C_INCLUDE_PATH LDFLAGS variable  ...etc...  and try it again.. @justinjdickow  last week, this error caused again for me... \nyou can try this\n\nmake sure your pyenv is latest version and install from brew.\nPKG_CONFIG_PATH=\"$(brew --prefix openssl)/lib/pkgconfig\" pyenv install YOUR-VERSION\n\n. ",
    "murawskikrzysiek": "I am using Sierra and also seeing this issue.... ",
    "justinjdickow": "Also having this issue running pyenv install 2.7.14 on MacOS 10.13.2. @wangwenpei I'm still seeing the same issue\nmy pyenv is version 1.2.0\nI'm using the following flags now\nexport CFLAGS=\"-I$(xcrun --show-sdk-path)/usr/include\"\nexport CFLAGS=\"-I$(brew --prefix readline)/include $CFLAGS\"\nexport LDFLAGS=\"-L$(brew --prefix readline)/lib $LDFLAGS\"\nexport CFLAGS=\"-I$(brew --prefix openssl)/include $CFLAGS\"\nexport LDFLAGS=\"-L$(brew --prefix openssl)/lib $LDFLAGS\"\nexport PKG_CONFIG_PATH=\"$(brew --prefix openssl)/lib/pkgconfig\". Not working for me to install 2.7.14 :( . At this point I've decided pyenv isn't worth the hassle. Activating a virtual environment using %source bin/activate is not a struggle, but getting pyenv to work properly is.. Same error with pyenv 1.2.1 and macOS 10.13.2. @webknjaz It makes sense that installing expat doesn't fix the problem. pyenv is creating a whole new installation of python that is independent and it's trying to install pyexpat there. . I guess maybe I don't understand it :P I could see that as well. ",
    "hackaugusto": "I tested all the urls in the pypy-c-jit-latest, the compressed file itself has the same name as in the url, but the uncompressed folder has the commit hash, so the recipe won't work by just adding install_nightly_package back.\n... oops, never mind this comment, fetch_tarball downloads and decompress the file, so the pattern is for the extracted folder not the downloaded compressed file.\n. Additionally build_package_pypy_builder has python hardcoded, this could be either python 3 or python 2, if it's python 3 the installation will fail:\n/tmp/python-build.20160229180917.22779/pypy-dev /tmp/python-build.20160229180917.22779 /mnt/extra/third_party/python/pyenv\n  File \"rpython/bin/rpython\", line 17\n    print __doc__\n                ^\nSyntaxError: Missing parentheses in call to 'print'\n. Thanks!\n. With this PR pyenv can be installed with zgen load yyuu/pyenv.\nThis will:\n- clone the repo\n- create the shims/versions directories\n- use lazy rehash (only on the first call to pyenv)\n- setup the compinit to autocomplete pyenv\n  - assuming the user is delegating the compinit initialization to zgen or is calling compinit after the fpath is set\nI did this to improve my zsh startup time.\n10 runs with the pyenv init - script:\n0.12s 0.13s 0.14s 0.14s 0.13s 0.11s 0.14s 0.12s 0.14s 0.16s\n10 runs with this PR applied:\n0.08s 0.08s 0.07s 0.08s 0.07s 0.06s 0.05s 0.10s 0.09s 0.08s\nTimings collected using for _ in $(seq 10); do time /usr/bin/zsh -i -c exit; done. What about the merging completion function? _pyenv is the same functionality as pyenv.zsh using the shell's newer completion system.\nAs for the init.zsh I need to check how to do submodules on zsh's package managers.. ",
    "d0u9": "@joshfriend why there isn't libpython2.7.so in 2.7-dev...\n. ",
    "murmuringvoices": "I've tried again with anaconda 4.1.0 and got the same error.\nHere is what I have in this ~/.pyenv/versions/anaconda3-4.1.0/lib/python3.5/lib-dynload folder:\narray.so\n_csv.so\n_lsprof.so\npyexpat.so\nsyslog.so\naudioop.so\n_ctypes.so\n_lzma.so\n_random.so\ntermios.so\nbinascii.so\n_ctypes_test.so\nmath.so\nreadline.so\n_testbuffer.so\n_bisect.so\n_curses_panel.so\n_md5.so\nresource.so\n_testcapi.so\n_bz2.so\n_curses.so\nmmap.so\nselect.so\n_testimportmultiple.so\ncmath.so\n_datetime.so\n_multibytecodec.so\n_sha1.so\n_testmultiphase.so\n_codecs_cn.so\n_decimal.so\n_multiprocessing.so\n_sha256.so\n_tkinter.so\n_codecs_hk.so\n_elementtree.so\nnis.so\n_sha512.so\nunicodedata.so\n_codecs_iso2022.so\nfcntl.so\n_opcode.so\n_socket.so\nxxlimited.so\n_codecs_jp.so\ngrp.so\nossaudiodev.so\nspwd.so\nzlib.so\n_codecs_kr.so\n_hashlib.so\nparser.so\n_sqlite3.so\n_codecs_tw.so\n_heapq.so\n_pickle.so\n_ssl.so\n_crypt.so\n_json.so\n_posixsubprocess.so\n_struct.so\n. @feynmanliang Thank you for the explanation and solution!\n@yyuu I don't know if this issue is fixable in pyenv, but if it's not - maybe you can add a note for Arch users?\n. ",
    "feynmanliang": "@yyuu this is a problem with arch not providing libncursesw.so.5\nlinux-vdso.so.1 (0x00007ffc027f6000)\n        libreadline.so.6 => /home/fliang/.pyenv/versions/anaconda3-4.0.0/lib/python3.5/lib-dynload/../../libreadline.so.6 (0x00007fb6ca167000)\n        libncursesw.so.5 => not found\n        libpython3.5m.so.1.0 => /home/fliang/.pyenv/versions/anaconda3-4.0.0/lib/python3.5/lib-dynload/../../libpython3.5m.so.1.0 (0x00007fb6c9c59000)\n        libpthread.so.0 => /usr/lib/libpthread.so.0 (0x00007fb6c9a3c000)\n        libc.so.6 => /usr/lib/libc.so.6 (0x00007fb6c969e000)\n        libdl.so.2 => /usr/lib/libdl.so.2 (0x00007fb6c9498000)\n        libutil.so.1 => /usr/lib/libutil.so.1 (0x00007fb6c9295000)\n        librt.so.1 => /usr/lib/librt.so.1 (0x00007fb6c908d000)\n        libm.so.6 => /usr/lib/libm.so.6 (0x00007fb6c8d89000)\n        /usr/lib64/ld-linux-x86-64.so.2 (0x000055bbac18c000)\nSee https://bbs.archlinux.org/viewtopic.php?id=203043\n. This is fixed by installing ncurses5-compat-libs from AUR\n. ",
    "ashwoods": "I get the same error when using 2.7.11 without virtualenv. \n. ",
    "ironicChen": "It dosen't work.....\n[root@cnsz22vl0279:/root/.pyenv/versions]#ll $(pyenv root)/cache\ntotal 19100\n-rw-r--r-- 1 root root 19554643 Mar 28 14:23 Python-3.4.3.tgz\n[root@cnsz22vl0279:/root/.pyenv/versions]#pyenv install 3.4.3 -v\n/tmp/python-build.20160329101407.86466 ~/.pyenv/versions\nDownloading Python-3.4.3.tgz...\n-> https://www.python.org/ftp/python/3.4.3/Python-3.4.3.tgz\ncurl: (7) couldn't connect to host\nerror: failed to download Python-3.4.3.tar.gz\nBUILD FAILED (RedHatEnterpriseServer 6.4 using python-build 20160130)\n. still dosen't work...\n[root@cnsz22vl0279:/root/.pyenv/versions]#echo $PYTHON_BUILD_CACHE_PATH\n/root/.pyenv/cache\n[root@cnsz22vl0279:/root/.pyenv/versions]#ll /root/.pyenv/cache\ntotal 19100\n-rw-r--r-- 1 root root 19554643 Mar 28 14:23 Python-3.4.3.tgz\n[root@cnsz22vl0279:/root/.pyenv/versions]#pyenv install 3.4.3 -v\n/tmp/python-build.20160329105326.128025 ~/.pyenv/versions\nDownloading Python-3.4.3.tgz...\n-> https://www.python.org/ftp/python/3.4.3/Python-3.4.3.tgz\ncurl: (7) couldn't connect to host\nerror: failed to download Python-3.4.3.tar.gz\nBUILD FAILED (RedHatEnterpriseServer 6.4 using python-build 20160130)\n. thanks for your helping!\nI found that the expected file name is \"Python-3.4.3.tar.gz\" but my file name is Python-3.4.3.tgz......\nI down it from url https://www.python.org/ftp/python/3.4.3/Python-3.4.3.tgz from the ouput of \"pyenv install\"\nnow it's done~\nthanks again~\n. @yufeiminds \ntry to rename the file directly instead of re-zip~\n. ",
    "yufeiminds": "I downloaded it from https://www.python.org/ftp/python/2.7.11/Python-2.7.11.tgz, re-zip as Python-2.7.11.tar.gz, but it still doesn't work. \nAny one has the same problem?\nThanks~\n. ",
    "cblegare": "In facts, I am on linux and for some reason I had autocrlfset to true.  This is embarrassing.\n. ",
    "axelpale": "Thanks for your quick reply @yyuu. However the issue still remains. Probably I do not understand the whole picture here but I'm sure I'm not alone.\nDo you agree that the current error message does not help users to solve the problem in any way? Of course for the designer of the pyenv the error is obvious but for a user like me who has used pyenv only for a half a year, it is not obvious.\nWould a better error message be:\n```\n$ python2.7\npyenv: python2.7: command not found.\nThe `python2.7' command exists in these Python versions:\n  2.7.10\nTo make python2.7 active, append 2.7.10 to your .python-version file by 'pyenv local 2.7.10'.\n```\n. ",
    "Flimm": "I agree with @axelpale that the currently implemented error message is confusing.. ",
    "dingus9": "It's odd to me that this would be designed this way, all installed versions show up in my path. I can tab complete python>> and see all pyenv installed versions, but the shims return an error message. Versions that cannot be executed should not show up on the path or pyenv should default to whatever is set for the current scope, or fallback to anything available e.g. python3.5 would always refer to some python3.5 if one is available. \nThe current functionality makes python version availability detection in scripts more convoluted because now you have to execute the shim and check for a return code... but executing python would require you to now run the pythonx.y --version binary etc. Makes version detection more complicated then a simple if which python3.5 paradigm. This is also just be annoying when moving around in directories etc.\nLooking in to a way around this still. ",
    "broven": "i fix it\n. ",
    "BradRuderman": "Nope! Just normal. I am using zsh with the pyenv plugin to activate.\n. ",
    "cristiano2lopes": "I have the same problem. Created python versions with system python active. Created a virtualenv from python 2.7.11 and runned pip install. I then get the same error described above.\nEdit:\nOk here is what worked for me: Creating the virtual env based on the system python (my system python is homebrew python). This is not great as stuff will break when i update the system version with brew upgrade. Also I'am using Postgres.app that i prepend to the path before initialising pyenv.\nMy theory is that the postgres libs are not being found on build time when using a version installed via pyenv (just a theory, I'am far from an expert on this issues). \n. ",
    "bryan0": "Just tried using pyenv virtualenv and also get this same error with python 2.7.10.  if i use my system 2.7.10 it builds without errors.  I installed everything using brew.\n. ok upgrading psycopg2 to the latest version (2.6.2) works for me.\n. @john-k-rice yeah I upgraded psycopg.  I edited my comment to clarify this.. ",
    "john-k-rice": "Been battling this as well.  The only thing I found that worked is to symlink the Library/Frameworks python site-packages/psycopg2 to virtualenv site-packages/psycopg2.  For example (executed from the virtualenv lib/python3.4/site-packages directory): \nln -s /opt/local/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages/psycopg2 psycopg2\nWhat did you upgrade to 2.6.2? ....  Never mind, I assume you upgraded psycopg2...\nSo, for  what it's worth, for me this turned out to be a conflict between the port installed psycopg2 and a pip installed psycopg2...   actually, I don't know if conflict is the right word....\nI notice that the psycopg2 installation recommends installing psycopg2 with either fink or port.  It only recommends pip for Windows.  So, I had forgotten that, and when I set up a new virtualenv, I installed psycopg2 with pip into that environment... which doesn't work.\nSo, in summary, I install psycopg2 with port, then symlink the port version to the virtualenv site-packages/psycopg2\n. ",
    "IlyaSemenov": "To whoever lands here: even though --no-rehash indeed speed things up, running pyenv+rbenv+jenv+nodenv from ~/.bash_profile is still noticeably slow (100-200 ms each give at least 0.5 second startup delay).\nI ended up ditching bash and installing fish, fisherman and corresponding fisherman plugins (pyenv, nodenv). Now a new shell opens instantly.. ",
    "kgtekito": "The same happened for me during installation of python 3.5.0.\n```\n% pyenv install 3.5.0Downloading Python-3.5.0.tgz...\n-> https://www.python.org/ftp/python/3.5.0/Python-3.5.0.tgz\nInstalling Python-3.5.0...\nERROR: invalid Python executable: /Users/kgtekito/$HOME/.pyenv/versions/3.5.0/bin/python3.5\nThe python-build could not find proper executable of Python after successful build.\nPlease open an issue for future improvements.\nhttps://github.com/yyuu/pyenv/issues\nBUILD FAILED (OS X 10.11.2 using python-build 20160130)\nInspect or clean up the working tree at /var/folders/pc/qm0mkfpd0qd1r92gmt31_2wc0000gp/T/python-build.20160426132201.83559\nResults logged to /var/folders/pc/qm0mkfpd0qd1r92gmt31_2wc0000gp/T/python-build.20160426132201.83559.log\nLast 10 log lines:\n                        install|*) ensurepip=\"\" ;; \\\n                esac; \\\n                 ./python.exe -E -m ensurepip \\\n                        $ensurepip --root=/ ; \\\n        fi\nIgnoring indexes: https://pypi.python.org/simple\nCollecting setuptools\nCollecting pip\nInstalling collected packages: setuptools, pip\nSuccessfully installed pip-7.1.2 setuptools-18.2\n```\n. ",
    "andrew-christianson": "@ssbb quite a bit later, but: did you happen to have --enable-framework in PYTHON_CONFIGURE_OPTIONS when this happened?. @karolhor quite a bit later, but: did you happen to have --enable-framework in PYTHON_CONFIGURE_OPTIONS when this happened?. @programus might be a typo in PYTHON_CONFIGURE_OPS (should be .._OPTS) ?. @YJiWei you used the workaround I suggested, and then encountered the issue you mention?\nRegardless, that seems like a separate issue; you should open a new one and include all of the information requested.. ",
    "ryan-williams": "I thought I had this problem; turns out there are some BUILD FAILED messages but pypy3 is actually installed!\nCheck pyenv versions (or the return code of the pyenv install cmd) to verify\u2026. ",
    "jgrover": "Perfect!  Thanks.\n. ",
    "thbar": "I was mistaken and apparently, it seems that a symlink works perfectly so far. Closing!\n. ",
    "ydaniju": "Thanks, @yyuu. It now works.\n. ",
    "sainho93": "Thanks @yyuu It's also works for me, but i wanna know why. In export PATH=\"$PYENV_ROOT/bin:$PATH there is already $PATH, which should contain /usr/local/bin. Why should I add extra /usr/local/bin in .zshenv?. ",
    "YAmikep": "@yyuu here is the output:\npyenv_debug.txt\n. ",
    "gretel": "@yyuu thanks for looking into it. manually messing with path elements might be difficult.\nfor me, this condition only occurs in combination with pyenv-virtualenv when pyenv activateing a virtualenv (which is located below .pyenv by default = not at the same location).\nmanually setting up one using virtualenv . and using pyenv-virtualenv subsequently does work fine, lacking the comfort, though.\ni'd like to suggest to detect this case in pyenv itself and sort the elements of PATH accordingly.\n. ",
    "tcztzy": "Sorry, I should read the manual first. Thank you.\n. Finally I gave up cygwin. I cannot understand what the patch really does...so, I quit.\n. ",
    "cadyyan": "@tcztzy, did you have to make any changes to the patch file that you referenced? I've been tearing my hair out trying to get it to work with Python 3.5.1. I made some adjustments but was still seeing failed hunks.\n. I've been making some headway on this. I was able to get the first patch to apply properly this morning but quickly ran into another issue which required a patch. Got that one applied as well now I have one more issue (hopefully) to figure out and I should have a working python 3.5.1 build for cygwin. If I can get it working I'll post what I did.\n. This is what I have so far.\nwget https://bugs.python.org/file38752/3.4-issue21085-struct_siginfo.patch\nwget https://bugs.python.org/file28934/0001-CYGWIN-issue13756-Python-make-fail-on-cygwin.patch\ncat ./3.4-issue21085-struct_siginfo.patch ./0001-CYGWIN-issue13756-Python-make-fail-on-cygwin.patch | CONFIGURE_OPTS=\"--with-system-ffi\" CFLAGS=\"-O2\" pyenv install --verbose --patch 3.5.1\nThe first patch is for the OP's original problem. The second patch is to deal with a subsequent issue where libpython3.5-m.dll doesn't build. The CONFIGURE_OPTS ensures that we use the system's version of FFI since that seems to be an issue (for me at least) as well. The -O2 is optional but I left it in anyway.\nThis still results in an error however. I'm not really sure the best way to deal with it so far. I'm not a bash expert so I'm not sure how you could lazily set PYTHONHOME to be the correct path. Another patch might be the best option but I'm still evaluating.\n``\nchecking how to run the C++ preprocessor... /lib/cpp\nconfigure: error: in/tmp/python-build.20160526101014.10464/Python-3.5.1/build/temp.cygwin-1.7.35-i686-3.5/libffi':\nconfigure: error: C++ preprocessor \"/lib/cpp\" fails sanity check\nSee `config.log' for more details\nBUILD FAILED (CYGWIN_NT-10.0-WOW 1.7.35(0.287/5/3) using python-build 20160509-7-g97da7c4)\nInspect or clean up the working tree at /tmp/python-build.20160526101014.10464\nResults logged to /tmp/python-build.20160526101014.10464.log\nLast 10 log lines:\n    USER_BASE = get_config_var('userbase')\n  File \"/tmp/python-build.20160526101014.10464/Python-3.5.1/Lib/sysconfig.py\", line 582, in get_config_var\n    return get_config_vars().get(name)\n  File \"/tmp/python-build.20160526101014.10464/Python-3.5.1/Lib/sysconfig.py\", line 531, in get_config_vars\n    _init_posix(_CONFIG_VARS)\n  File \"/tmp/python-build.20160526101014.10464/Python-3.5.1/Lib/sysconfig.py\", line 403, in _init_posix\n    from _sysconfigdata import build_time_vars\nImportError: No module named '_sysconfigdata'\nMakefile:1326: recipe for target 'Lib/plat-cygwin' failed\nmake: *** [Lib/plat-cygwin] Error 1\n```\nI have confirmed that _sysconfigdata.py is built so I'm pretty sure its just that the system dependant librairies are not being used.\n. ",
    "astocko": "You just need to set the path in a Boost.Build configuration file. \n3.6.0 example\necho \"using python : : ~/.pyenv/versions/3.6.0/bin/python ;\" > ~/user-config.jam\n./bootstrap.sh\n./b2\nsudo ./b2 install\nAlternatively, you can also use the --with-python option on bootstrap.sh.\n. ",
    "lexelby": "I ran into this with a script in my ~/bin directory (which is in my path).  I had something like this:\n~/bin/thing1 -> thing2\n~/bin/thing2 -> ../repos/thing2/thing2.py\nthing2.py has a shebang:\n#!/usr/bin/env python\nI was getting this error (extracted from PYENV_DEBUG=1 output):\n++ [pyenv:42] '[' -n /home/lex/bin/thing1 ']'\n++ [pyenv:43] cd /home/lex/bin\n++ [pyenv:44] local name=thing1\n+++ [pyenv:45] resolve_link thing1\n+++ [pyenv:35] /bin/readlink thing1\n++ [pyenv:45] path=thing2\n++ [pyenv:42] '[' -n thing2 ']'\n++ [pyenv:43] cd thing2\n/home/lex/.pyenv/libexec/pyenv: line 43: cd: thing2: Not a directory\nThe script ran properly though.\nMaking thing1 point directly to ../repos/thing2/thing2.py removed the spurious warning.  I guess I'm a weirdo for having multi-level symlinks for my executable?. ",
    "zhaoxuan": "Reinstall python with pyenv, set unicode = ucs2\nPYTHON_CONFIGURE_OPTS=\"--enable-unicode=ucs2\" pyenv install 2.7.11\n. ",
    "binbjz": "To reinstall python with pyenv, set unicdoe=ucs2, this is not a good idea, we just need to let brew's to use system's CPython 2 and upgrade vim.\nComment the line which including pyenv env variable in ~/.bash_profile\nsed -i 's/.*pyenv/#&/g' ~/.bash_profile\ngrep pyenv ~/.bash_profile\nif which pyenv > /dev/null; then eval \"$(pyenv init -)\"; fi\nsource ~/.bash_profile\nbrew update && brew upgrade && brew cleanup\nAlready up-to-date.\n==> Upgrading 1 outdated package, with result:\nvim 7.4.1847_1\n==> Upgrading vim\n==> Downloading https://github.com/vim/vim/archive/v7.4.1847.tar.gz\nAlready downloaded: /Library/Caches/Homebrew/vim-7.4.1847.tar.gz\n==> ./configure --prefix=/usr/local --mandir=/usr/local/Cellar/vim/7.4.1847_1/share/man --enable-mult\n==> make\n==> make install prefix=/usr/local/Cellar/vim/7.4.1847_1 STRIP=true\n\ud83c\udf7a  /usr/local/Cellar/vim/7.4.1847_1: 1,689 files, 22.6M, built in 31 seconds\nRemoving: /usr/local/Cellar/vim/7.4.1847... (1,689 files, 22.6M)\n==> This operation has freed approximately 22.6M of disk space.\nUncomment the line which including pyenv env variable in ~/.bash_profile\nsed -i '/^#/{/pyenv/s/#//g}' ~/.bash_profile\nRestore the initial environment\nsource ~/.bash_profile\nMy environment is:\n- MacBook Pro (Retina, 15-inch, Mid 2015)\n- OS X 10.11.5\n. > I was running into this as well, and noticed that my ar was /usr/local/bin/ar rather than the system ar. I ran brew remove binutils and was finally able to run pyenv install 2.7.15 and pyenv install 3.7.1 without problems . I had also upgraded to Xcode 10.1, but I think it was binutils that was giving me trouble. YMMV.\n$ brew remove binutils\nIt solved my problems ! Thank you very much !. Sorry, I added wrong file. I have updated it.. ",
    "tdsmith": "Root cause is fixed here: https://github.com/vim/vim/pull/980\n. ",
    "pcgilday": "@yyuu I have version 2.7.11 installed, and I have the correct shim for this (as well as others like 2to3). However, there is no shim for pip, it appears pip is not in the bin directory for my python version, so based on your explanation, this makes sense. However, shouldn't pip be in the bin directory here? I was under the impression pip was bundled with python for versions 2.7.9 and up, is that not the case when using pyenv?\n$ ll .pyenv/versions/2.7.11/bin/\ntotal 4056\ndrwxr-xr-x  12 patrick  staff      408 May  4 18:15 .\ndrwxr-xr-x   6 patrick  staff      204 May  4 18:15 ..\n-rwxr-xr-x   1 patrick  staff      128 May  4 18:15 2to3\n-rwxr-xr-x   1 patrick  staff      126 May  4 18:15 idle\n-rwxr-xr-x   1 patrick  staff      111 May  4 18:15 pydoc\nlrwxr-xr-x   1 patrick  staff        7 May  4 18:15 python -> python2\nlrwxr-xr-x   1 patrick  staff       14 May  4 18:15 python-config -> python2-config\nlrwxr-xr-x   1 patrick  staff        9 May  4 18:15 python2 -> python2.7\nlrwxr-xr-x   1 patrick  staff       16 May  4 18:15 python2-config -> python2.7-config\n-rwxr-xr-x   1 patrick  staff  2022332 May  4 18:15 python2.7\n-rwxr-xr-x   1 patrick  staff     1714 May  4 18:15 python2.7-config\n-rwxr-xr-x   1 patrick  staff    18574 May  4 18:15 smtpd.py\n$ ll .pyenv/shims/\ntotal 80\ndrwxr-xr-x  12 patrick  staff  408 May 10 10:52 .\ndrwxr-xr-x  22 patrick  staff  748 May  4 18:10 ..\n-rwxr-xr-x   1 patrick  staff  408 May  4 18:15 2to3\n-rwxr-xr-x   1 patrick  staff  408 May  4 18:15 idle\n-rwxr-xr-x   1 patrick  staff  408 May  4 18:15 pydoc\n-rwxr-xr-x   1 patrick  staff  408 May  4 18:15 python\n-rwxr-xr-x   1 patrick  staff  408 May  4 18:15 python-config\n-rwxr-xr-x   1 patrick  staff  408 May  4 18:15 python2\n-rwxr-xr-x   1 patrick  staff  408 May  4 18:15 python2-config\n-rwxr-xr-x   1 patrick  staff  408 May  4 18:15 python2.7\n-rwxr-xr-x   1 patrick  staff  408 May  4 18:15 python2.7-config\n-rwxr-xr-x   1 patrick  staff  408 May  4 18:15 smtpd.py\n. > Strange, but you could try get-pip.py.\nYes I can, and have. I was more curious why the shim is not getting installed since the docs seem to indicate it would. \n@Brawnd0 I don't have --enable-framework option set. The solution you mentioned may very well fix my issue, but I would rather not mess with the system site.py main function since I am able to use pip at the moment. I use locally installed pip with the --user flag per some of the permission issues that are detailed here https://github.com/pypa/pip/issues/1668. \nI am fine not having pyenv shim for pip as I think my initial thoughts as to how it may solve my root problem were incorrect. However, since the docs say pyenv maintains shims in that directory to match every Python command across every installed version of Python\u2014python, pip, and so on. I think that at minimum an error should be thrown if there is a reason pip or another shim cannot be installed. If this is something that is desired, I am happy to work on a PR, although it may be some time before I am able to get around to it. \n. ",
    "nicktimko": "Strange, but you could try get-pip.py.\n. A \"...latest\" suffix would be more explicit if that's palatable.\nOn Tue, May 17, 2016 at 7:53 PM, Yamashita, Yuu notifications@github.com\nwrote:\n\nActually I'm not sure how much portable sort(1)'s version sorting is. I\nguess it doesn't work well with BSD toolchain.\nhttp://stackoverflow.com/questions/4493205/unix-sort-of-version-numbers\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/yyuu/pyenv/issues/602#issuecomment-219896773\n. - 3-latest, 3.5-latest install candidates are identical to (as of now) 3.5.1\n- 2-latest, 2.7-latest identical to 2.7.11\n- 2.6-latest identical to 2.6.9\n- 3.4-latest identical to 3.4.4\n\nEffectively something like duplicating the files in plugins/python-build/share/python-build\n. pip install Django, docker pull python:latest, ...pull python:3 or ...python:3.5 are in the same boat.\nRegarding those that already have a -latest suffix, they're functionally identical, though the \"disambiguation\" is pushed from the pyenv repo to Continuum Analytics' server. \nfish> date\nTue May 31 15:01:35 CDT 2016\nfish> diff -s (curl -s https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86.sh | psub) \\\n              (curl -s https://repo.continuum.io/miniconda/Miniconda3-4.0.5-Linux-x86.sh | psub)\nFiles /tmp/.psub.B8raWP3XDG and /tmp/.psub.7hCzGTVMLN are identical\nCPython doesn't seem to do that same sort of mirroring from among their download bin, so doing that on the pyenv level would be cool. A hook looks like it might be clean-ish (woe to my bash-fu), but it also seems generally useful which is why I'm partially nudging for general inclusion ;).\n. If you say which python, does it report the shim (/Users/____/.pyenv/shims/python) or your system Python (/usr/local/bin/python)? \nIf you see the latter, it's probably a PATH issue (echo $PATH) where /usr/local/bin is before .../.pyenv/shims.\n. Alternate fix (5 MB download savings!) that could be implemented here is to download the .tar.xz file as mentioned in the above bug report. Not sure what the #...hexdigits... is in the URL though\nOh, it's the SHA2...potential fix below. Basically:\ndiff\n-...Python-3.6.0a2.tgz#66600469e7938b6476e5...\n+...Python-3.6.0a2.tar.xz#2dd2ddf22a63ef9642a20...\n. Works for me, though I also get a strange zzz__pycache__ shim... I wonder if the last shim name (in some sort order) is somehow concatenated with the first shim name?\n. The zzz__pycache__ doesn't seem to exist anywhere though. It's not that the shim is referring to a bad (non-executable, yadda, yadda) file, it's that it's created in response to (apparently) nothing.\n. What do you mean by \"crashes\"? Freezes? Does Ctrl-C (SIGTERM) or Ctrl-D (EOF) bring it back?\nThis is probably an issue with Anaconda and/or your shell (what shell are you using?); source might be doing something strange like interpreting its arguments as a command to evaluate, which is why Anaconda is printing that error that tells you to use source even though you did.\n. This seems like some strange interaction between pyenv and pyds9. Presumably ds9 is some Python binary/script that's installed in a Python environment, then it's called via subprocess in the pyds9 package. Strange architecture...\nDoes pyenv which ds9 say it's available in the miniconda3-latest env? If so, can you indeed run ds9 from the command line in that env?\n. What's that [2.2.4]? Did you look in the log file, is there anything abnormal above the last 10 lines?\nIt looks like it might be done building Python and it's doing some post-install stuff like installing pip. Does it run, e.g. ~/.pyenv/versions/3.4.5/bin/python or give that same segfault?\n. Try doing pyenv rehash, that creates the shims from what it finds in all of the versions' bin/ directories.\npyenv doesn't monkey around with PATH envvar to switch between bin directories when switching between versions, but instead uses a combination of the \"current version\" (pyenv version) and those shims (cookie-cutter scripts that do an exec to pass off to the desired executable).\n. Is the script executable in the directory?\nIs the shim created and it pyenv complains that it just can't find it in\nthe current environment?\nOn Thu, Aug 11, 2016, 22:48 Joshua Smock notifications@github.com wrote:\n\nAh sorry, I meant pyenv rehash in my original post. Not pyenv shims,\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/yyuu/pyenv/issues/667#issuecomment-239354971, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AFDVlChqQ8k8sBdCrirePYomvMgfTCZ9ks5qe-0CgaJpZM4JiAIv\n.\n. \n",
    "Brawnd0": "@pcgilday are you by any chance install python with --enable-framework option?\nWhen installing python 2.7.11 with the below command, I have no pip binaries anywhere in ~/.pyenv.  I've been able to reproduce this on 2 separate OSX systems.\nenv PYTHON_CONFIGURE_OPTS=\"--enable-framework\" pyenv install 2.7.11\n$ find .pyenv/ -name '*pip*'\n.pyenv//plugins/pyenv-virtualenv/test/pip.bats\n.pyenv//pyenv.d/exec/pip-rehash\n.pyenv//pyenv.d/exec/pip-rehash/pip\n.pyenv//pyenv.d/exec/pip-rehash.bash\n.pyenv//versions/2.7.11/Python.framework/Versions/2.7/lib/python2.7/ensurepip\n.pyenv//versions/2.7.11/Python.framework/Versions/2.7/lib/python2.7/ensurepip/_bundled/pip-7.1.2-py2.py3-none-any.whl\n.pyenv//versions/2.7.11/Python.framework/Versions/2.7/lib/python2.7/pipes.py\n.pyenv//versions/2.7.11/Python.framework/Versions/2.7/lib/python2.7/pipes.pyc\n.pyenv//versions/2.7.11/Python.framework/Versions/2.7/lib/python2.7/pipes.pyo\n.pyenv//versions/2.7.11/Python.framework/Versions/2.7/lib/python2.7/test/test_ensurepip.py\n.pyenv//versions/2.7.11/Python.framework/Versions/2.7/lib/python2.7/test/test_ensurepip.pyc\n.pyenv//versions/2.7.11/Python.framework/Versions/2.7/lib/python2.7/test/test_ensurepip.pyo\n.pyenv//versions/2.7.11/Python.framework/Versions/2.7/lib/python2.7/test/test_pipes.py\n.pyenv//versions/2.7.11/Python.framework/Versions/2.7/lib/python2.7/test/test_pipes.pyc\n.pyenv//versions/2.7.11/Python.framework/Versions/2.7/lib/python2.7/test/test_pipes.pyo\nWhen Installing without --enable-framework, pip is installed and available.\n@nicktimko With the --enable-framework install I tried installing pip with get-pip.py, but got a permission denied error when the installer tried to write to /Library/Python/2.7/...\nSo python (rather site.py) adds /Library/Python/2.7/... to sys.path when compiled with --enable-framework\nDid some more digging and found this post on stackoverflow: https://stackoverflow.com/questions/26471889/permanently-remove-something-from-python-sys-path\nAfter removing the ^/Library directories from sys.path I was able to get through the get-pip.py script and found the pip binaries under ~/.pyenv/versions/2.7.11/Python.framework/Versions/2.7/bin (I think that was the dir)\nMaybe that extra directory being added to sys.path is causing issues?  Let me know if you want any more information, or would like me to test anything.\n. I'm having a similar issue.  These upstream issues may be related.\nhttps://bugs.python.org/issue4865\nhttps://bugs.python.org/issue28440. ",
    "cuevee": "I do install with --enable-framework due to matplotlib requirements.\nAs @yyuu mentioned, rehash searches for binaries in $(pyenv root)/versions/*/bin/*, but skips binaries in $(pyenv root)/versions/*/Python.framework/Versions/{version}/bin/* when you install with --enable-framework. \nThat seems to be because list_executable_names in pyenv-rehash lists binaries from \"${PYENV_ROOT}/versions/${version}/bin/\"*. Could we perhaps add something like \"${PYENV_ROOT}/versions/${version}/Python.framework/Version/*/bin/\"* to that search path?\nHere's a clean PYTHON_CONFIGURE_OPTS=\"--enable-framework CC=clang\" pyenv install 2.7.12:\nls -al $(pyenv root)/shims\n-rwxr-xr-x   1 quintis  staff  419 Aug  1 09:44 2to3*\n-rwxr-xr-x   1 quintis  staff  419 Aug  1 09:44 2to3-2*\n-rwxr-xr-x   1 quintis  staff  419 Aug  1 09:44 2to3-2.7*\n-rwxr-xr-x   1 quintis  staff  419 Aug  1 09:44 idle*\n-rwxr-xr-x   1 quintis  staff  419 Aug  1 09:44 idle2*\n-rwxr-xr-x   1 quintis  staff  419 Aug  1 09:44 idle2.7*\n-rwxr-xr-x   1 quintis  staff  419 Aug  1 09:44 pydoc*\n-rwxr-xr-x   1 quintis  staff  419 Aug  1 09:44 pydoc2*\n-rwxr-xr-x   1 quintis  staff  419 Aug  1 09:44 pydoc2.7*\n-rwxr-xr-x   1 quintis  staff  419 Aug  1 09:44 python*\n-rwxr-xr-x   1 quintis  staff  419 Aug  1 09:44 python-config*\n-rwxr-xr-x   1 quintis  staff  419 Aug  1 09:44 python2*\n-rwxr-xr-x   1 quintis  staff  419 Aug  1 09:44 python2-config*\n-rwxr-xr-x   1 quintis  staff  419 Aug  1 09:44 python2.7*\n-rwxr-xr-x   1 quintis  staff  419 Aug  1 09:44 python2.7-config*\n-rwxr-xr-x   1 quintis  staff  419 Aug  1 09:44 pythonw*\n-rwxr-xr-x   1 quintis  staff  419 Aug  1 09:44 pythonw2*\n-rwxr-xr-x   1 quintis  staff  419 Aug  1 09:44 pythonw2.7*\n-rwxr-xr-x   1 quintis  staff  419 Aug  1 09:44 smtpd.py*\n-rwxr-xr-x   1 quintis  staff  419 Aug  1 09:44 smtpd2.7.py*\n-rwxr-xr-x   1 quintis  staff  419 Aug  1 09:44 smtpd2.py*\nand ls -al $(pyenv root)/versions/2.7.12/Python.framework/Versions/2.7/bin\nlrwxr-xr-x   1 quintis  staff      6 Aug  1 09:43 2to3@ -> 2to3-2\nlrwxr-xr-x   1 quintis  staff      8 Aug  1 09:43 2to3-2@ -> 2to3-2.7\n-rwxr-xr-x   1 quintis  staff    158 Aug  1 09:43 2to3-2.7*\n-rwxr-xr-x   1 quintis  staff    327 Aug  1 09:43 easy_install*\n-rwxr-xr-x   1 quintis  staff    327 Aug  1 09:43 easy_install-2.7*\nlrwxr-xr-x   1 quintis  staff      5 Aug  1 09:43 idle@ -> idle2\nlrwxr-xr-x   1 quintis  staff      7 Aug  1 09:43 idle2@ -> idle2.7\n-rwxr-xr-x   1 quintis  staff    156 Aug  1 09:43 idle2.7*\n-rwxr-xr-x   1 quintis  staff    299 Aug  1 09:44 pip*\n-rwxr-xr-x   1 quintis  staff    299 Aug  1 09:44 pip2*\n-rwxr-xr-x   1 quintis  staff    299 Aug  1 09:44 pip2.7*\nlrwxr-xr-x   1 quintis  staff      6 Aug  1 09:43 pydoc@ -> pydoc2\nlrwxr-xr-x   1 quintis  staff      8 Aug  1 09:43 pydoc2@ -> pydoc2.7\n-rwxr-xr-x   1 quintis  staff    141 Aug  1 09:43 pydoc2.7*\nlrwxr-xr-x   1 quintis  staff      7 Aug  1 09:43 python@ -> python2\nlrwxr-xr-x   1 quintis  staff     14 Aug  1 09:43 python-config@ -> python2-config\nlrwxr-xr-x   1 quintis  staff      9 Aug  1 09:43 python2@ -> python2.7\nlrwxr-xr-x   1 quintis  staff     16 Aug  1 09:43 python2-config@ -> python2.7-config\n-rwxr-xr-x   1 quintis  staff   9220 Aug  1 09:43 python2.7*\n-rwxr-xr-x   1 quintis  staff   1744 Aug  1 09:43 python2.7-config*\nlrwxr-xr-x   1 quintis  staff      8 Aug  1 09:43 pythonw@ -> pythonw2\nlrwxr-xr-x   1 quintis  staff     10 Aug  1 09:43 pythonw2@ -> pythonw2.7\n-rwxr-xr-x   1 quintis  staff   9220 Aug  1 09:43 pythonw2.7*\nlrwxr-xr-x   1 quintis  staff      9 Aug  1 09:43 smtpd.py@ -> smtpd2.py\n-rwxr-xr-x   1 quintis  staff  18604 Aug  1 09:43 smtpd2.7.py*\nlrwxr-xr-x   1 quintis  staff     11 Aug  1 09:43 smtpd2.py@ -> smtpd2.7.py\n. pip is fine for me, but something like ipython gets skipped when shims get created. It does this with all 2.x and 3.x versions I've tried.\n. Tried the workaround for both 2.7.12 and 3.5.2 and both work fine. Thanks @yyuu!\n. ",
    "ojss": "I am facing the same problem, when I build with --enable-framework, the shims aren't updated to point to the pip installation. But installing 3.5.2 as a framework seems to work fine.\nWhy is this problem occurring only with 2.x pythons?\n. I shall give it a try as soon as I get the chance to.\nThank you.\n\nOn 03-Aug-2016, at 7:22 AM, Yamashita, Yuu notifications@github.com wrote:\nI confirmed that at least CPython 3.5.2 on OS X 10.11.6 creates ./bin directory as normal directory instead of symlink to framework installation path. I pushed bc8dba4 https://github.com/yyuu/pyenv/commit/bc8dba4beabfa680b5ecc82b4bec3fa51f489c08 as a workaround for it. I'm still not sure what breaks the framework installation, though. Anyway please give it a try.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub https://github.com/yyuu/pyenv/issues/590#issuecomment-237109486, or mute the thread https://github.com/notifications/unsubscribe-auth/AKL6Abnufrv8nBrT0VzmLwCdlebGFKVrks5qb_RmgaJpZM4IYFlJ.\n. Yup it's working. Thank you so much.\n\nOn 05-Aug-2016 1:19 PM, \"Yamashita, Yuu\" notifications@github.com wrote:\n\nClosed #590 https://github.com/yyuu/pyenv/issues/590.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/yyuu/pyenv/issues/590#event-746310384, or mute the\nthread\nhttps://github.com/notifications/unsubscribe-auth/AKL6AYLx8gbk8OkTp3r9rQr868jOj3guks5qcusNgaJpZM4IYFlJ\n.\n. \n",
    "Samureus": "Grateful if someone can check my PR for Portable PyPy 5.1.1 (still messing with this Git thing):\nhttps://github.com/yyuu/pyenv/pull/592\n. And added PyPy-5.1.1-src in a separate PR\nhttps://github.com/yyuu/pyenv/pull/593\nShould I delete the previous PR?\n. @thunderboltsid hi, do you still have this problem? If you do, could you paste the output of the resulting /tmp/python-build file?. Closing for now, feel free to reopen issue if this happens again.. @x1ah hi, do you still have this issue? I just tested using 3.5.3 on Ubuntu 16.04:\n```python\n$ pyenv local 3.5.3 \n$ python\nPython 3.5.3 (default, Jan 23 2017, 20:47:37) \n[GCC 5.4.0 20160609] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n\n\nimport _sqlite3\ndir(_sqlite3)\n['Cache', 'Connection', 'Cursor', 'DataError', 'DatabaseError', 'Error', 'IntegrityError', 'InterfaceError', 'InternalError', 'NotSupportedError', 'OperationalError', 'OptimizedUnicode', 'PARSE_COLNAMES', 'PARSE_DECLTYPES', 'PrepareProtocol', 'ProgrammingError', 'Row', 'SQLITE_ALTER_TABLE', 'SQLITE_ANALYZE', 'SQLITE_ATTACH', 'SQLITE_CREATE_INDEX', 'SQLITE_CREATE_TABLE', 'SQLITE_CREATE_TEMP_INDEX', 'SQLITE_CREATE_TEMP_TABLE', 'SQLITE_CREATE_TEMP_TRIGGER', 'SQLITE_CREATE_TEMP_VIEW', 'SQLITE_CREATE_TRIGGER', 'SQLITE_CREATE_VIEW', 'SQLITE_DELETE', 'SQLITE_DENY', 'SQLITE_DETACH', 'SQLITE_DROP_INDEX', 'SQLITE_DROP_TABLE', 'SQLITE_DROP_TEMP_INDEX', 'SQLITE_DROP_TEMP_TABLE', 'SQLITE_DROP_TEMP_TRIGGER', 'SQLITE_DROP_TEMP_VIEW', 'SQLITE_DROP_TRIGGER', 'SQLITE_DROP_VIEW', 'SQLITE_IGNORE', 'SQLITE_INSERT', 'SQLITE_OK', 'SQLITE_PRAGMA', 'SQLITE_READ', 'SQLITE_REINDEX', 'SQLITE_SELECT', 'SQLITE_TRANSACTION', 'SQLITE_UPDATE', 'Statement', 'Warning', 'doc', 'file', 'loader', 'name', 'package', 'spec', 'adapt', 'adapters', 'complete_statement', 'connect', 'converters', 'enable_callback_tracebacks', 'enable_shared_cache', 'register_adapter', 'register_converter', 'sqlite_version', 'version']\n``\nCPython 3.5.X is built from source, so if you havelibsqlite3-dev` it should be detected at\n\n\n\nhttps://github.com/pyenv/pyenv/blob/master/plugins/python-build/bin/python-build#L1634. Closing for now, feel free to reopen issue if it happens again.. Meh forgot about that one, added file through Github.\n. Added the checksum. Will update the other 2 PRs.\n. Sorry for the delay, just downloaded https://bitbucket.org/stackless-dev/stackless/get/v3.4.2-slp.tar.bz2 and ran it again:\n$ sha256sum stackless-dev-stackless-587417070fe4.tar.bz2 \nc3dbdde536fa6bf366fdbc3e957596487608ba11009758ce599357512eb74103  stackless-dev-stackless-587417070fe4.tar.bz2\nBut now git got picky. Let me close and re-send.\n. FWIW, this issue is documented here:\nhttps://github.com/IronLanguages/main/issues/1156\n. I agree that adding numpy increases the build time but:\n- From what I could gather from the README, pyston 0.5.1 only works with specific versions of virtualenv (12.1.dev0), a custom version of cython (0.24) and numpy (1.11.0).\n- Which is why I chose to have it all built-in, so that users can start using it \"batteries included\".\n- It also has the advantage that since the numpy module is installed inside .pyenv/versions/pyston-0.5.1/site-packages/numpy/, if I understand virtualenv correctly, any virtualenv created will copy the right numpy installation.\nJust to test a silly idea, I went ahead and created a virtualenv using the downloaded 0.5.1 file, and this is what happened:\n```\n(pyston-test) samo@Bruinen:~$ pip install --user https://github.com/dropbox/pyston/releases/download/v0.5.1/Cython-0.24-pyston.tar.gz\nCollecting https://github.com/dropbox/pyston/releases/download/v0.5.1/Cython-0.24-pyston.tar.gz\n  Downloading https://github.com/dropbox/pyston/releases/download/v0.5.1/Cython-0.24-pyston.tar.gz (1.7MB)\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1.7MB 131kB/s \nBuilding wheels for collected packages: Cython\n  Running setup.py bdist_wheel for Cython ... done\n  Stored in directory: /home/samo/.cache/pip/wheels/f7/48/1e/98aadc70b64899c309ec1dd31540c8551d7ab38db8bf4eba42\nSuccessfully built Cython\nInstalling collected packages: Cython\nSuccessfully installed Cython-0.24\n(pyston-test) samo@Bruinen:~$ pip install --user git+git://github.com/numpy/numpy@v1.11.0\nCollecting git+git://github.com/numpy/numpy@v1.11.0\n  Cloning git://github.com/numpy/numpy (to v1.11.0) to /tmp/pip-B9r9aI-build\nInstalling collected packages: numpy\n  Found existing installation: numpy 1.11.1\n    Uninstalling numpy-1.11.1:\n      Successfully uninstalled numpy-1.11.1\n  Running setup.py install for numpy ... done\nSuccessfully installed numpy-1.11.0\n(pyston-test) samo@Bruinen:~$ python\nPyston v0.5.1 (rev abb4b132d260e5858a458462f71fd94955647195), targeting Python 2.7.7\n\n\nimport numpy as np\nTraceback (most recent call last):\n  File \"\", line 1, in \nImportError: No module named numpy\n```\n\n\nNote that I had to use pip install --user and even after that it didn't work.\nWhat I can think of right now:\n- I can split it into pyston-0.5.1 and pyston-0.5.1-numpy, with the later installing numpy into pyston-0.5.1. Maybe I can put a message to point users to use pyston-0.5.1-numpy if they want to save themselves the hassle.\n- We can also wait until the Pyston guys create another point release which should resolve the core dump, which prevents installing the pip bootstrap.\n. Aaaand I broke the numpy build! It looks like installing gfortran and libatlas-base-dev since yesterday borked the setup script, I uninstalled them and now it complains about\n`\n    creating build/temp.linux-x86_64-2.7/numpy/random/mtrand\n```\ncompile options: '-D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE=1 -D_LARGEFILE64_SOURCE=1 -Inumpy/core/include -Ibuild/src.linux-x86_64-2.7/numpy/core/include/numpy -Inumpy/core/src/private -Inumpy/core/src -Inumpy/core -Inumpy/core/src/npymath -Inumpy/core/src/multiarray -Inumpy/core/src/umath -Inumpy/core/src/npysort -I/home/samo/.pyenv/versions/pyston-0.5.1/from_cpython/Include -Ibuild/src.linux-x86_64-2.7/numpy/core/src/private -Ibuild/src.linux-x86_64-2.7/numpy/core/src/private -Ibuild/src.linux-x86_64-2.7/numpy/core/src/private -c -Werror=implicit-function-declaration'\nccache: numpy/random/mtrand/mtrand.c\nnumpy/random/mtrand/mtrand.c:49:27: fatal error: longintrepr.h: No existe el archivo o el directorio\ncompilation terminated.\nnumpy/random/mtrand/mtrand.c:49:27: fatal error: longintrepr.h: No existe el archivo o el directorio\ncompilation terminated.\n```\n`\nI went back to https://github.com/dropbox/pyston/tree/master/from_cpython/Include and longintrepr.h is missing, see https://github.com/dropbox/pyston/issues/1376.\nI'm also following the instructions in http://www.scipy.org/scipylib/building/linux.html#debian-ubuntu but between the missing header and wrapping my head about selecting the correct BLAS library, this is getting messy.\n@yyuu and @kmod what do you think, should I drop bundling numpy alltogether, or just wait until the Pyston people have another release? I still believe an early release is good for letting people test.\n. I think I have an idea what's going on, apparently it's trying to use cython 0.24.1 which I installed on my machine, instead of the one I specified, I need to test this later.\n. @yyuu Ok I give up on bundling numpy, at least it installs pyston for now. If you like, I can add a warning message about pip and numpy or redirect them to just use the docker image with numpy.\n. @zetan503 Could you run pyenv update and check again? I see a lot of recent versions missing in that list.\n. Evil laughter (\"It's alive! It's alive!\")\n`\n$ pypy3\nPython 3.5.1 (3ced7022e9b5, Oct 17 2016, 01:10:02)\n[PyPy 5.6.0-alpha0 with GCC 4.8.2] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\nAnd now for something completely different:A random quote''\n\n\n\n\n```\n\n\n\n\nI'd still like to catch failed nightly builds, but me and bash don't get along very nicely.\n. Thanks, I do not remember why I had uncommented them, but it seems to work now:\n```\n$ pyenv local pypy3.5-c-jit-latest \n$ python\nPython 3.5.1 (24e0383cef36, Nov 15 2016, 02:10:34)\n[PyPy 5.6.0-alpha0 with GCC 4.8.2] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n\n\n\n$ pip --version\npip 9.0.1 from /home/samo/.local/lib/python2.7/site-packages (python 2.7)\n$ pyenv versions\n  system\n  2.7.12\n  3.3.6\n  3.4.5\n  3.5.2\n  ironpython-2.7.7-rc2\n  jython-2.7.1b3\n  pypy2-5.6.0\n  pypy3.3-5.5-alpha\n* pypy3.5-c-jit-latest (set by /home/samo/.python-version)\n  pypy-stm-2.5.1\n  pyston-0.5.1\n  stackless-2.7.12\n  stackless-3.4.2\n$ python -m pip --version\npip 8.1.2 from /home/samo/.pyenv/versions/pypy3.5-c-jit-latest/site-packages (python 3.5)\n$ python -m ensurepip\nIgnoring indexes: https://pypi.python.org/simple\nRequirement already satisfied (use --upgrade to upgrade): setuptools in ./.pyenv/versions/pypy3.5-c-jit-latest/site-packages\nRequirement already satisfied (use --upgrade to upgrade): pip in ./.pyenv/versions/pypy3.5-c-jit-latest/site-packages\n$ python -m ensurepip --upgrade\nIgnoring indexes: https://pypi.python.org/simple\nRequirement already up-to-date: setuptools in ./.pyenv/versions/pypy3.5-c-jit-latest/site-packages\nRequirement already up-to-date: pip in ./.pyenv/versions/pypy3.5-c-jit-latest/site-packages\n```\n\n\n\n\nThere is just the old bundled pip but that's something better handled upstream.\n. Edit: Sorry, I did not make myself clear, that release is already there and it's for 3.3-compatible PyPy, you need to update your copy of pyenv:\nhttps://github.com/yyuu/pyenv/blob/master/plugins/python-build/share/python-build/pypy3.3-5.5-alpha\n`\n$ pyenv local pypy3.3-5.5-alpha \n$ python\nPython 3.3.5 (ea9979b550eeae87924dc4bef06070e8f8d0e22f, Oct 13 2016, 11:32:23)\n[PyPy 5.5.0-alpha0 with GCC 6.2.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\nAnd now for something completely different:pypy is a race between the\nindustry trying to build machines with more and more resources, and the pypy\ndevelopers trying to eat all of them. So far, the winner is still unclear''\n\n\n\n\n```\n\n\n\n\nAs far as I can tell from the IRC logs at https://botbot.me/freenode/pypy/, this is going to be the last 3.3-compatible PyPy release before focusing on 3.5.\nAs for Travis updating their PyPy versions, that's something completely different, see my pull requests (and their answers) about that at:\nhttps://github.com/travis-ci/travis-cookbooks/pull/766\nhttps://github.com/travis-ci/docs-travis-ci-com/pull/771\nhttps://github.com/travis-ci/packer-templates/pull/323\n. @yan12125 I do not see any from the Travis CI organization in https://github.com/travis-ci/travis-ci/issues/6613 saying that pyenv should be updated, could you elaborate? @scop did author the python-build definition that landed 3.3 in pyenv.\nAccording to what's been reported in here and here PyPy 5.4 support is in the works:\n\nPlease note that the version is available on-demand, and will be preinstalled on dist: trustyin the near future.\n\nFor the record, I'm not associated with neither Travis nor the PyPy or pyenv teams, I just contribute PRs if it can help. And there are workarounds, as seen in https://github.com/frol/flask-restplus-server-example/blob/master/.travis.yml\n. Closing issue since the question has been answered already, thanks @sat1993! . This should be fixed with #880. Until there's a new release, could you try cloning the repo and download again? Please reopen if this issue continues.. Sorry for the delay, I just merged #876 and ran\n$ pyenv which gcc\npyenv: gcc: command not found\nafter installing both anaconda2-4.3.1 and anaconda3-4.3.1, then tried installing 3.6.0 and was able to finish the compilation without issues. I believe it might be related to that particular version of anaconda (anaconda3-4.1.1). Could you please try running\n$ pyenv whence gcc\nand let me know the output? Or you could check if there is a gcc executable inside\n$ ls `pyenv root`/versions/anaconda3-4.3.1/bin\nAnother option, if you can:\n\nUninstall anaconda3-4.1.1\nInstall anaconda3-4.3.0\nTry installing 3.6.0 again.\n\nChecking the changelog at https://docs.continuum.io/anaconda/changelog, conda-build is no longer included with 4.3.0, maybe that might fix it.. The latest seems to be 4.3.14, and we're behind, latest definition I see is 4.1.11, though it looks like you can upgrade to the latest version with conda update (sorry I don't use conda myself). Would you need both 4.3.11 and 4.3.14, or is it ok with just the latest release?. Update: checking the downloads page at https://conda.io/miniconda.html, this can be done with miniconda2-latest and miniconda3-latest (to be updated with #881). Since it has a secure https connection and no published SHA256 checksum ATM, I'd rather refer you to try these instead.. TL,DR: you can't unless you compile PyQt4 for 3.6.0 yourself.\nChecking https://pypi.python.org/pypi/PyQt4/4.11.4, it looks like it's no longer available from pip (or never was?):\nbash\n$ pyenv local 3.6.0\n$ pip install PyQt4\nCollecting PyQt4\n  Could not find a version that satisfies the requirement PyQt4 (from versions: )\nNo matching distribution found for PyQt4\nThe problem is that the location the default system python uses to look for Qt4, is different from the one used by the pyenv installation:\n```python\n$ python\nPython 3.6.0 (default, Dec 24 2016, 13:01:25) \n[GCC 5.4.0 20160609] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n\n\nimport sys; sys.path\n['', '/home/samo/.pyenv/versions/3.6.0/lib/python36.zip', '/home/samo/.pyenv/versions/3.6.0/lib/python3.6', '/home/samo/.pyenv/versions/3.6.0/lib/python3.6/lib-dynload', '/home/samo/.pyenv/versions/3.6.0/lib/python3.6/site-packages']\nimport site; site.getsitepackages()\n['/home/samo/.pyenv/versions/3.6.0/lib/python3.6/site-packages']\n$ pyenv local system\n$ python3\nPython 3.5.2 (default, Nov 17 2016, 17:05:23) \n[GCC 5.4.0 20160609] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\nimport sys; sys.path\n['', '/usr/lib/python35.zip', '/usr/lib/python3.5', '/usr/lib/python3.5/plat-x86_64-linux-gnu', '/usr/lib/python3.5/lib-dynload', '/usr/local/lib/python3.5/dist-packages', '/usr/lib/python3/dist-packages']\nimport site; site.getsitepackages()\n['/usr/local/lib/python3.5/dist-packages', '/usr/lib/python3/dist-packages', '/usr/lib/python3.5/dist-packages']\n``\nEven if you add/usr/lib/python3/dist-packages/tosys.path`, it doesn't seem to work since the Qt4 system compiled modules (at least in Ubuntu 16.04) are meant only for Python 3.5:\n\n\n\nbash\n$ ls /usr/lib/python3/dist-packages/PyQt4/\n__init__.py\n__pycache__\npyqtconfig_nd5.py\npyqtconfig.py\nQtAssistant.cpython-35m-x86_64-linux-gnu.so\nQtCore.cpython-35m-x86_64-linux-gnu.so\nQt.cpython-35m-x86_64-linux-gnu.so\nQtDBus.cpython-35m-x86_64-linux-gnu.so\nQtDeclarative.cpython-35m-x86_64-linux-gnu.so\nQtDesigner.cpython-35m-x86_64-linux-gnu.so\nQtGui.cpython-35m-x86_64-linux-gnu.so\nQtHelp.cpython-35m-x86_64-linux-gnu.so\nQtNetwork.cpython-35m-x86_64-linux-gnu.so\nQtScript.cpython-35m-x86_64-linux-gnu.so\nQtScriptTools.cpython-35m-x86_64-linux-gnu.so\nQtSvg.cpython-35m-x86_64-linux-gnu.so\nQtTest.cpython-35m-x86_64-linux-gnu.so\nQtWebKit.cpython-35m-x86_64-linux-gnu.so\nQtXml.cpython-35m-x86_64-linux-gnu.so\nQtXmlPatterns.cpython-35m-x86_64-linux-gnu.so\n```python\n\n\n\nsys.path.insert(1, \"/usr/lib/python3/dist-packages/\")\nsys.path\n['', '/usr/lib/python3/dist-packages/', '/home/samo/.pyenv/versions/3.6.0/lib/python36.zip', '/home/samo/.pyenv/versions/3.6.0/lib/python3.6', '/home/samo/.pyenv/versions/3.6.0/lib/python3.6/lib-dynload', '/home/samo/.pyenv/versions/3.6.0/lib/python3.6/site-packages']\nfrom PyQt4 import QtGui\nTraceback (most recent call last):\n  File \"\", line 1, in \nImportError: cannot import name 'QtGui'\ndir(PyQt4)\n['builtins', 'cached', 'doc', 'file', 'loader', 'name', 'package', 'path', 'spec']\n``. Waiting on https://github.com/squeaky-pl/portable-pypy/issues/45 for the portable Linux binaries, might be ready in the evening after I return from work (unless somebody else beats me to it).. Portable PyPy PRs: https://github.com/pyenv/pyenv/pull/868 (2.7) and https://github.com/pyenv/pyenv/pull/869 (3.5).. PyPy 3.5: https://github.com/pyenv/pyenv/pull/871 (let's see if the laptop charge gives me enough time for PyPy 2.7). PyPy 2.7: https://github.com/pyenv/pyenv/pull/872 (yay!). @yyuu @joshfriend, would you like to do a new release? I was thinking on adding Stackless 2.7.13 when it's ready, but it's up to you.. @yyuu @joshfriend looks like there might be a PyPy 5.7.1 release \"soonish\" (or not)? https://mail.python.org/pipermail/pypy-dev/2017-March/015065.html (I'd rather defer the release process to you guys for now, my git fu is not that great). @joshfriend :P \"Hold my beer moment\" --> https://github.com/pyenv/pyenv/pull/877. @dstufft @alex https://github.com/pyenv/pyenv/releases/tag/v1.0.9. Thanks! Tested on Ubuntu 16.04 and it works!. Sorry for not noticing this before, I just merged #876. I'd like to confirm if #843 can be fixed by upgrading. I'd also like to deal with #854. Is this something that you can workaround withconda update`, cloning the repository, or would you need a full release for CI testing/ etc.\n\n\n\n@yyuu @joshfriend what do you think? (edited). Thanks! This might fix #794, though I don't have a Mac ~~and https://repo.continuum.io/archive/ only has MD5 checksums, the most I can do ATM is download the files and verify the SHA256 checksums myself~~ spoke too soon, found https://docs.continuum.io/anaconda/hashes/all, hold on.\nCould you paste the output when installing these?. The checksums match what's on their page, thanks!. >     PyPy and Miniconda/Anaconda that update very often\n\n\nYes, it feels like these multiply at an exponential rate \ud83d\ude1d .\n\n\nI'd say we could treat PyPy and *Conda as \"evergreen\" releases the same as Chrome/Firefox work, that is, just keep the last 3 releases and drop the rest.\nAs for CPython 2.7, we can assume that the system Python bundled in the OS is \"somehow\" well maintained and drop anything below 2.7.9-ish? the one that added support for OpenSSL 1.1?. The problem seems to be libbz2, in the latest releases of PyPy2 and PyPy3 (5.8) the output of ldd -v libpypy(3).so requires GLIBC of at least 2.3:\n/lib/x86_64-linux-gnu/libbz2.so.1.0:\n        libc.so.6 (GLIBC_2.3) => /lib/x86_64-linux-gnu/libc.so.6\n        libc.so.6 (GLIBC_2.3.4) => /lib/x86_64-linux-gnu/libc.so.6\n        libc.so.6 (GLIBC_2.4) => /lib/x86_64-linux-gnu/libc.so.6\n        libc.so.6 (GLIBC_2.2.5) => /lib/x86_64-linux-gnu/libc.so.6\nI think it might also affect Portable PyPy, it seems to me that links against the system libbz2 instead of bundling it like it does with libssl, libcrypto, libexpat and libtinfo.. @JayH5 @squeaky-pl thanks for the reply, I'll adjust https://github.com/pyenv/pyenv/pull/932 accordingly.. Just putting the result of docker fighting for future reference:\n```python\n$ docker run -it ubuntu:precise /bin/sh\napt-get update\napt-get install wget bzip2 libbz2-dev libexpat1-dev lsb-release\nlsb_release --a\nNo LSB modules are available.\nDistributor ID: Ubuntu\nDescription:    Ubuntu 12.04.5 LTS\nRelease:    12.04\nCodename:   precise\nwget --no-check-certificate https://bitbucket.org/pypy/pypy/downloads/pypy2-v5.7.1-linux64.tar.bz2\ntar xvjf pypy2-v5.7.1-linux64.tar.bz2\ncd opt/pypy2-v5.7.1-linux64/bin\nls -la\ntotal 66576\ndrwxr-xr-x 2 root root     4096 Mar 31 11:11 .\ndrwxr-xr-x 7 root root     4096 Mar 31 11:11 ..\n-rwxr-xr-x 1 root root 68153656 Mar 31 11:11 libpypy-c.so\n-rwxr-xr-x 1 root root     6288 Mar 31 11:11 pypy\n./pypy\n./pypy: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.17' not found (required by /opt/opt/pypy2-v5.7.1-linux64/bin/libpypy-c.so)\n```\nwith PyPy 5.8.0:\n```python\n./pypy\nPython 2.7.13 (c925e7381036, Jun 05 2017, 21:20:51)\n[PyPy 5.8.0 with GCC 6.2.0 20160901] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n\n\n\nimport bz2\nimport binascii\noriginal_data = \"This is the original text\"\ncompressed = bz2.compress(original_data)\nprint 'Compressed   :', len(compressed), binascii.hexlify(compressed)\nCompressed   : 61 425a6839314159265359507b73c800000213804000040022e59c4020002223d468d3c48400005ba0cf81cd3525743117a8bf8bb9229c2848283db9e400\ndecompressed = bz2.decompress(compressed)\nprint 'Decompressed :', len(decompressed), decompressed\nDecompressed : 25 This is the original text\n```\n. In the middle of a PR for 5.8.0 right now (unless somebody else beats me to it), just to confirm what you'd need,\n\n\n\n\npypy2.7-5.8.0\npypy3.5-5.8.0\nI kept adding alpha and beta to the pypy3 releases to maintain the PyPy project naming conventions.. @joshfriend yes, at least from what I can gather from here:\nhttps://bitbucket.org/pypy/extradoc/src/037575bb91dab60bb0ce51a80cffaf2814eb73c4/planning/py3.5/py35plan-milestones.rst?at=extradoc&fileviewer=file-view-default\nand\nhttps://bitbucket.org/pypy/extradoc/src/037575bb91dab60bb0ce51a80cffaf2814eb73c4/planning/py3.5/milestone-2-progress.rst?at=extradoc&fileviewer=file-view-default\nSorry, no coffee before git is always a bad idea.. Tested binaries and portable binaries on Ubuntu 16.04, waiting on the source translations.. On the other hand, \n\nwe need to wait until the portable pypy binaries are ready before publishing new definitions (which is ok, approx. 12 hours delay at most)\nthe official binaries seem to work fine on Ubuntu 16.04, and 12.04 is deprecated by Canonical but still being used by Travis\n\n(still waiting on translation, old laptop + using cpython instead of pypy sucks)\n. Yay, 2 hours translating pypy2-5.8.0-src! Gonna get me one of these new Ryzen thingies one day.\nPython 2.7.13 (c925e73810367cd960a32592dd7f728f436c125c, Jun 09 2017, 17:52:01)\n[PyPy 5.8.0 with GCC 5.4.0 20160609] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\nAnd now for something completely different: ``all we need is a native Prolog\nmachine''. Sorry got completely sidetracked on this. @BanzaiMan is it ok with you this way? @yyuu @joshfriend @blueyed if any of you could test this (to avoid \"works on my machine\" mistakes), then I guess it's ok to merge?. Follow up issues:\nhttps://bitbucket.org/pypy/pypy/issues/2574/dropping-support-for-ubuntu-1204-precise\nhttps://github.com/squeaky-pl/portable-pypy/issues/53\nI'm ok for dropping Precise support myself, in fact, we could remove all of these\n\"Ubuntu 12.04\" \"Ubuntu 12.10\" \"Ubuntu 13.04\" \"Ubuntu 13.10\" while we're at it, but Portable PyPy might not work as a substitute (at the moment), guys what do you think?. Done, thanks for spotting these. . I think the correct environment variable should be PYTHON_CONFIGURE_OPTS:\nenv PYTHON_CONFIGURE_OPTS=\"--with-tcltk-include=-'-I/home/myuser/Tools/tcltk866/include' --with-tcltk-libs='-L/home/myuser/Tools/tcltk866/lib'\" pyenv install 3.6.1. I don't use CentOS myself so I don't know what else could be wrong. Could you try adding the --debug flag and copy the output?\nexport PYTHON_CONFIGURE_OPTS==\"--with-tcltk-include=-'-I/home/myuser/Tools/tcltk866/include' --with-tcltk-libs='-L/home/myuser/Tools/tcltk866/lib'\"\npyenv --debug install 3.6.1. This is a Github thing, you need to click on \"Show 2 newer tags\" to reveal v1.1.0:\nhttps://github.com/pyenv/pyenv/releases/tag/v1.1.0. Duh, after a lot of head scratching I was able to figure it out, it seems to me that the tag was published but not the release. Could you check it again?. :thumbsup:. Let's do this.. Done.\n. Done in https://github.com/yyuu/pyenv/pull/718/commits/8acb4ebaba1010112fd6b48c3c2311894b98ffc9\n. Done in https://github.com/yyuu/pyenv/pull/718/commits/d24ce2494bc4d2890368b9f15c9d5531e61dcb31 and https://github.com/yyuu/pyenv/pull/718/commits/4e4bd420202bcc16da696002171fafd007dae28f\n. Oops, done in https://github.com/yyuu/pyenv/pull/718/commits/7a957c54889da314a50ae8e970246f80e5386e60\n. I found these 2 lines in the Stackless 3.4.2 definition which could help with \"openssl-1.0.2k\" and \"readline-6.3\". Should I use these instead?\nhttps://github.com/pyenv/pyenv/blob/d1ff898a2bfbe44d74bf92c2b6c9f7652b1d3aaa/plugins/python-build/share/python-build/stackless-3.4.2#L2. Sorry for the delay, added a warning message on top for now.. ",
    "mfdj": "Ah, side-effect of Anaconda specifically. Thanks for the clarification and snippet.\n. ",
    "tasugi": "I tried several times. However always failed.\n. ",
    "TomGoBravo": "I struggled to get uwsgi to run my app, which worked really well in a pyenv virtualenv. I couldn't find docs either. So far just activating the virtualenv, running pip install uwsgi and putting the path of the uwsgi binary (with default setup found with ls -l $HOME/.pyenv/versions/*/bin/uwsgi) in my systemd Unit File (I'm following https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-uswgi-and-nginx-on-ubuntu-18-04). I don't know if it makes any difference but I built the python version with PYTHON_CONFIGURE_OPTS=\"--enable-shared\" pyenv install 3.7.2. It looks like python as started by this uwsgi binary uses the virtualenv without needing to set it in the uwsgi options.. ",
    "landge": "This #597  workaround solved it, of course. Can't figure out\nwhat's wrong with my setup. \n. ",
    "tylucaskelley": "An alternative in the meantime (only tested on Mac OS 10.11):\nPYTHON2_VERSION=\"$(pyenv install -l | grep -e '2.[0-9].[0-9]' | grep -v - | tail -1)\"\nPYTHON3_VERSION=\"$(pyenv install -l | grep -e '3.[0-9].[0-9]' | grep -v - | tail -1)\"\nAs of today, they return 2.7.11 and 3.5.1 respectively, the latest versions available for each major Python release.\n. @yyuu i think that even though latest is a non-deterministic version indicator, it's a very practical feature to add and something you see in many package managers out there (npm, etc). Understand the decision not to add it, but at the same time it doesn't hurt anyone if you do, and only benefits those that want to always install the latest versions of Python 2 and 3\n. I had a similar issue on 10.12 w/ xcode 8, reinstalling the command line tools solved everything (xcode-select --install)\n. ",
    "oraant": "Well,I got the answer from this two issue:\n Can I change the source of downloading python? #18\n Prepare CDN for faster downloads? #20\nThanks anyway,it's a nice soft.\n. ",
    "bonds": "At first read, those lines look redundant to me. It looks like if we removed them, the bug would go away, and everything else would continue to work. But my bash skills are limited and I'm not  clear on what https://github.com/yyuu/pyenv/blob/9993d13996c84c4b6db6a5f160ec2dd1e1debc57/libexec/pyenv-which#L37-L39 is doing.\n. FWIW I removed those lines locally and ran the tests. That change broke this test in the expected, trivial way:\n\u2713 doesn't include current directory in PATH search\n \u2717 version not installed\n   (from function `assert_equal' in file test/test_helper.bash, line 65,\n    from function `assert_output' in file test/test_helper.bash, line 74,\n    from function `assert_failure' in file test/test_helper.bash, line 57,\n    in test file test/which.bats, line 75)\n     `assert_failure \"pyenv: version \\`3.3' is not installed (set by PYENV_VERSION environment variable)\"' failed\n   expected: pyenv: version `3.3' is not installed (set by PYENV_VERSION environment variable)\n   actual:   pyenv: version `3.3' is not installed\n \u2713 versions not installed\n. ",
    "fonewoda": "*/3 * * * * source ~/.bashrc && cd /home/scrapy_folder && scrapy crawl scrapy_spider\nI am sorry,it doesnt work,help please~\n. @yyuu any solution?thanks!\n. ",
    "mctavishmcardle": "done\n. ",
    "c17r": "Also, are you inside a virtualenv? That seems to take priority over everything.\n. ",
    "keikoro": "Echoing what @c17r said.\nTry $ pyenv deactivate and see what pyenv tells you.\nIf you had a virtualenv activated, pyenv will spit out its name/path, if not, it'll print out:\npyenv-virtualenv: no virtualenv has been activated.\n. Always make sure you haven't (accidentally) installed Python via homebrew as well as this will mess with your pyenv installs.\nTook me a good 2 hours now to find out that this was the problem in my case. I actually know not to install Python with brew, but, some other packages dependent on Python seem to have (auto-)installed it when I last upgraded them.. ",
    "jayvdb": "We can remove some of the failures by fixing the failures.\ni.e. some of the failures are ilustrative of problems and failed attempts to workaround the problem.\nElapsed time is quite short actually; some projects have several hours elapsed.\nIf time is a problem, I can set it up to do one successful test job, and do a random config in that job.\n. Something I havent tried yet is whether the latest version of virtualenv addresses any of these failures.\n. Elapsed is now 11 mins, with more test environments included.\nThe previous problem with pypy-dev has been fixed, by installing 2.7.11 first.  Now it dies during the build, and has been excluded.\nNote that it is not possible to include virtualenv from apt source debian-sid, as pulls in many other Debian sid packages which conflict with the Ubuntu packages.\nI tested using a the latest virtualenv, and some of the failures are fixed by it, namely 3.4.4 and stackless on language: generic.\nI have a slight preference to keep them as failures until we know why they are failing on the older virtualenv, but I can integrate the virtualenv upgrade code if we want more successes before this is merged.\n. Well, integration testing finds different types of problems, especially ones that havent been seen before.\nObviously the -dev series of versions will benefit the most from integration tests, as the contents of those branches are unpredictable.  And as seen by #618, integration tests will find these problems quickly when upstream changes.\nThere is also the benefit that defining integration tests highlights minimum supported versions of other programs that are used together with pyenv, such as virtualenv.  Currently it is obvious that the virtualenv with Ubuntu precise (v12.0.6) and trusty (v13.1.0) is not supported by all pyenv install-able versions.  There is no hint of that in the README ;-)\nIdeally we can install minimum versions of each dependency and run pyenv install x for every install-able version, and while it may take a while it should install them all, and basic operations should be possible with each of them.  When they all can be installed and used, and there are unittests for the known problems found, this integration testing could done by a weekly build (not yet possible with Travis) instead of with each commit, as it is only looking for unexpected breakages.\nUntil then, I believe it is useful to show the known good environments and the known broken environments, so we can focus on fixing these problems, and/or raising them upstream.  What is the point of shipping these install-able versions if we cant get them to work ourselves?\nWhether or not you merge, I'm going to keep working on fixing these broken versions, and this set of integration tests will get quicker as more versions have been fixed and dependencies reduced.\n. Testing only on precise without any language: python.\nElapsed down to 7.5 mins.\n. Probably related to EOL.\n. The need for LD_LIBRARY_PATH here seems like it could be fixed by pyenv, but also fixed upstream...?\n. Ironpython install a binary python which needs to be run by mono, or use this trick on a sudo enable worker, which is slower than the precise containers. Otherwise virtualenv tries to run it, and fails.\nIs it possible to detect this and install a script python which invokes mono?\n. Fix : https://github.com/yyuu/pyenv/pull/618\n. Maybe https://github.com/pypa/virtualenv/issues/899\nAnd probably fixed by https://github.com/pypa/virtualenv/pull/923\n. this is also fixed with VIRTUAL_ENV_ADD_LIB_PATH=1\nnow just need to get ironpython working... ;-)\n. ",
    "dochang": "Your patch works.  But there is still an issue: aria2c download get-pip.py into the python source directory.\nCheck the log:\n```\n[#b85777 432KiB/1.4MiB(29%) CN:1 DL:787KiB ETA:1s]\n06/01 17:17:14 [NOTICE] Download complete: /tmp/python-build.20160601171626.23586/Python-3.3.6/out.t1XsTO\nDownload Results:\ngid   |stat|avg speed  |path/URI\n======+====+===========+=======================================================\nb85777|OK  |   1.1MiB/s|/tmp/python-build.20160601171626.23586/Python-3.3.6/out.t1XsTO\nStatus Legend:\n(OK):download completed.\nCollecting pip\n  Using cached https://pypi.mirrors.ustc.edu.cn/packages/9c/32/004ce0852e0a127f07f358b715015763273799bd798956fa930814b60f39/pip-8.1.2-py2.py3-none-any.whl\nCollecting setuptools\n  Using cached https://pypi.mirrors.ustc.edu.cn/packages/9e/33/b4e3494d886eadde48f47f73fb0fc4e4061c65e9c05b0807c0e61e91a51b/setuptools-21.2.2-py2.py3-none-any.whl\nCollecting wheel\n  Using cached https://pypi.mirrors.ustc.edu.cn/packages/py2.py3/w/wheel/wheel-0.29.0-py2.py3-none-any.whl\nInstalling collected packages: pip, setuptools, wheel\nSuccessfully installed pip-8.1.2 setuptools-21.2.2 wheel-0.29.0\n/tmp/python-build.20160601171626.23586 ~\n```\nI think the problem is that aria2c always downloads the file into the working directory, even if the target path is absolute.\nWe can use the --dir option of aria2c. That option changes the download directory.\n. No problem.  I misunderstand your code. :smile: You can merge it now.\n. ",
    "djl": "This has suddenly started happening to me out of the blue:\n$ pyenv versions     \n* system (set by /home/djl/.pyenv/version)\n$ pyenv global system\npyenv: version `system' not installed\n$ pyenv virtualenv foo\npyenv-virtualenv: `system' is not installed in pyenv.\nI narrowed it down to this line. That code assumes that the Python executable resides in a bin directory. On systems where */sbin and is a symlink to */bin (and sbin is first in the $PATH) this breaks. Arch Linux is an example of this:\n$ which python\n/usr/sbin/python\n$ ls -ld /usr/sbin/\nlrwxrwxrwx 1 root root 3 Dec  6 14:19 /usr/sbin -> bin\nThis probably could be considered a bug in users' config and doesn't warrant a fix in pyenv itself. It would be nice to not assume that everything resides in a */bin directory, though.\nJust thought I'd post this in case anyone else stumbles upon the same issue :smiley: . My solution was to just remove the symlinked */sbin paths from my $PATH.. FWIW I didn't have to alter my default $PATH. My untouched /etc/profile doesn't include any sbin directories and I'm not aware of any OS or distro that does include these directories for non-root users by default.\nBut it would be nice to get this fixed in pyenv. I agree that it is a bad assumption that a binary will always reside in [...]/bin/.. ",
    "tommyjcarpenter": "I just hit this issue in Arch Linux (fresh install of Arch). What is the recommended remedy?\nEDIT: @djl what is your recommended solution on Arch?. This is on a fresh install of Arch and the pyenv package, and it requires me to alter my path? I do not agree that this isn't a pyenv bug then. I think pyenv is making a bad assumption that clearly doesn't hold on all OS. . @yyuu I would like to reopen this issue. Simply use archlinux/base, install yay, and then install pyenv, and this issue will happen. . @Voleking solution also worked for me on a fresh copy of OSX 10.14.1. ",
    "rhemon": "Ran the test and had same result\nhttp://pastebin.com/xKq2G36a. ",
    "eywalker": "I ran into the same issue and it turns out that this happens if you have compiled the Python binary before you installed libsqlite3-dev. Solution is quite simple: just uninstall the Python and reinstall it.\nbash\n$ pyenv uninstall 2.7.11\npyenv: remove /home/eywalker/.pyenv/versions/2.7.11? y\n$ pyenv install 2.7.11\nAfter this jupyter notebook should run without complaining about sqlite3.\n. ",
    "yssmile": "but still not solved.. ",
    "Purring": "Apparently this is what shell is for, i thought that was only for system utils (like dnf)\nMy mistake!\n. ",
    "NoraGithub": "Do you mean that I should ask a single question at a single time and as it's complex, I should not use this title?  @yyuu \nIf yes, I apology about that and I will issue several more issues for that.\nLooking forward to your reply.:)\n. ",
    "maksimr": "@yyuu thanks it's work, but I have found workaround like python -m pytest  tests/my_test.py\n. ",
    "jenhsun": "Here is my way to use pyenv\nenv PYTHON_CONFIGURE_OPTS=\"--enable-framework=$(pyenv root)/versions/3.5.2 --enable-toolbox-glue --enable-big-digits --enable-unicode --with-threads\" pyenv install 3.5.2\n. ",
    "DuncanHills": "For anyone else that runs into this problem, I had to brew reinstall binutils because the old version had created symlinks to the homebrew ar, ranlib, etc, in the homebrew bin directory, whereas new versions are cask only. The homebrew versions created archive files during the python build that caused problems.\nI ran into this issue on 10.13.6 trying to build python 2.7.15 (and others).. ",
    "ubergesundheit": "I had this issue as well. A comment from https://github.com/pyenv/pyenv/issues/1236 solved my problem on macos 10.14.2\nbrew uninstall binutils.\n",
    "JayH5": "Thank you!\n. I did some more experimentation with different versions of PyPy, and the issue is actually just with the compiled PyPy 2/3 5.7.0 and 5.7.1 provided by the PyPy people, not the portable version.\nPyPy 2/3 5.7.x (non-portable) reports the message that @BanzaiMan quoted above (they want glibc 2.17).\nPyPy 2/3 5.7.0 portable work fine.\nPyPy 2 5.6.0 and PyPy 2/3 5.8.0 all work fine.\nI've updated the issue title to reflect this.\n@squeaky-pl I don't know too much about compiling against different glibc versions, but all the versions of portable PyPy I've tried with Ubuntu 12.04 (which has glibc 2.15) work just fine.\nOverall, this looks like an issue with 2 specific releases of PyPy, not with pyenv itself, so whoever is in charge here, feel free to close this issue if you'd like. . This is probably due to Debian 9 using OpenSSL 1.1.0. OpenSSL 1.1.0 support in the ssl module was only added to Python 2.7.13, 3.5.3 and 3.6.0: https://bugs.python.org/issue26470. ",
    "tarkatronic": "This was already reported as a bug in the release, and closed as \"wontfix\": https://bugs.python.org/issue27337\nWith the notes from the above bug report, I was able to get the package to install. I don't know if it's worth making an official note of this since this is an alpha release, and they are going to \"try real hard not to do it again.\" (direct quote) But in case anybody else needs to know, here is what I had to do:\n$ brew install gnu-tar\n...\n$ PATH=\"/usr/local/opt/gnu-tar/libexec/gnubin:$PATH\" pyenv install 3.6.0a2\n...\n. ",
    "timiyay": "Disregard. It appears my pyenv init call in .zshrc wasn't loading properly, for some reason.\n. ",
    "leira": "What a good idea~! While I was thinking about passing an extra parameter to pyenv-help and output a bunch of echo commands~...\n. ",
    "tsahara": "Build fails on 2 BSD-derived systems.\n- On OpenBSD 5.9, \"tar\" does not understand \"-J\" and it does not have any option to decompress \"xz\" files.  But \"xz\" command can be installed by OpenBSD ports.\n- On NetBSD6, \"tar\" does not understand \"-J\" but it can decompress .xz archives with \"--xz\" option.  \"xz\" command is installed by default as \"/usr/bin/xz\".\n. > Do OpenBSD and NetBSD (and FreeBSD, and ...DragonFlyBSD?) have GNU tar package?\n\nDo these gtar executable can understand -J option?\n- OpenBSD (5.9) has gtar package and it understands -J option.  It is GNU tar 1.28, installed to /usr/local/bin/gtar.\n- NetBSD (6.1.5) has gtar package and it understands -J option too.  It is GNU tar 1.28, installed to /usr/pkg/bin/gtar.\n- FreeBSD(10.3)'s tar can extract .tar.xz archives with/without -J option (it is smart enough to recognize compression algorithms automatically so -J option is ignored when extracting archives).\n- I don't have any DragonFlyBSD hosts :)\n. Thanks for the quick fix!  Build succeeded on both NetBSD and OpenBSD (I built python 3.5.2 on NetBSD and 2.7.12 on OpenBSD) at ad9805a.\n. Thank you for merging this and updating rbenv PR (I use rbenv too \ud83d\ude04 )!. It does not work on NetBSD/OpenBSD.  They assume \"XXXXXXXX\" is at the end of the template string.\n\nNetBSD:\n% mktemp XXXXXXXX.tar.xz\nXXXXXXXX.tar.xz\nOpenBSD:\n% mktemp XXXXXXXX.tar.xz\nmktemp: insufficient number of Xs in template `XXXXXXXX.tar.xz'\nBut we don't have to create a temporary file to check if tar command supports -J option.  With -f - option, tar writes an archive to stdout.  I tried tar Jcf - /dev/null 1>/dev/null 2>&1 and it works on FreeBSD/NetBSD/OpenBSD/macOS/Ubuntu ($?=0 on FreeBSD/macOS/Ubuntu and $?=1 on NetBSD/OpenBSD).\n. ",
    "lukejanicke": "As per my update on Stack Overflow, switching Command Line Tools from Xcode-beta to Xcode fixed the manual build problem.\nsudo xcode-select -s /Applications/Xcode.app/Contents/Developer\nHowever, pyenv still fails, albeit for a different reason. I need zlib.\n```\n~/.pyenv $ pyenv install 3.5.2\nDownloading openssl-1.0.2g.tar.gz...\n-> https://yyuu.github.io/pythons/b784b1b3907ce39abf4098702dade6365522a253ad1552e267a9a0e89594aa33\nerror: failed to download openssl-1.0.2g.tar.gz\n-> https://www.openssl.org/source/openssl-1.0.2g.tar.gz\nInstalling openssl-1.0.2g...\nInstalled openssl-1.0.2g to /Users/lukejanicke/.pyenv/versions/3.5.2\nDownloading readline-6.3.tar.gz...\n-> http://ftpmirror.gnu.org/readline/readline-6.3.tar.gz\nInstalling readline-6.3...\nInstalled readline-6.3 to /Users/lukejanicke/.pyenv/versions/3.5.2\nDownloading Python-3.5.2.tgz...\n-> https://www.python.org/ftp/python/3.5.2/Python-3.5.2.tgz\nInstalling Python-3.5.2...\nBUILD FAILED (OS X 10.11.5 using python-build 20160629-11-g331f682)\nInspect or clean up the working tree at /var/folders/qh/5v1b2g614h19h648g0114ybm0000gn/T/python-build.20160705035045.37176\nResults logged to /var/folders/qh/5v1b2g614h19h648g0114ybm0000gn/T/python-build.20160705035045.37176.log\nLast 10 log lines:\n  File \"/private/var/folders/qh/5v1b2g614h19h648g0114ybm0000gn/T/python-build.20160705035045.37176/Python-3.5.2/Lib/ensurepip/main.py\", line 4, in \n    ensurepip._main()\n  File \"/private/var/folders/qh/5v1b2g614h19h648g0114ybm0000gn/T/python-build.20160705035045.37176/Python-3.5.2/Lib/ensurepip/init.py\", line 209, in _main\n    default_pip=args.default_pip,\n  File \"/private/var/folders/qh/5v1b2g614h19h648g0114ybm0000gn/T/python-build.20160705035045.37176/Python-3.5.2/Lib/ensurepip/init.py\", line 116, in bootstrap\n    _run_pip(args + [p[0] for p in _PROJECTS], additional_paths)\n  File \"/private/var/folders/qh/5v1b2g614h19h648g0114ybm0000gn/T/python-build.20160705035045.37176/Python-3.5.2/Lib/ensurepip/init.py\", line 40, in _run_pip\n    import pip\nzipimport.ZipImportError: can't decompress data; zlib not available\nmake: *** [install] Error 1\n~/.pyenv $ \n```\n. ",
    "mandarvaze": "@lukejanicke Were you able to resolve this ?\nIt is almost 6 months since your problem report, and in Jan 2017, I'm still facing the same error (albeit for python 3.6.0, but  doubt that matters). @dwt Thanks for the link\nAll I had to do was xcode-select --install since I had indeed just upgraded to Mac OS Sierra. The install failed due to build errors.  When I retry, does pyenv install  download the same thing again ? (or is Downloading .. just a message, but uses already downloaded/cached version). ",
    "dwt": "Same problem here, Mac OS Sierra 10.12.2 (16C68) building python 3.5.2. Any Ideas yet?. Found CFLAGS=\"-I$(xcrun --show-sdk-path)/usr/include\" pyenv install -v $VERSION in the wiki.\nAnd it helped. Please close.. ",
    "leojh": "should this issue be closed since xcode-select --install seems to be the fix?. ",
    "dropofwill": "I'm actually having the same issue on OSX 10.11.15 as well (installed with Homebrew, using zshell).\npyenv versions\n  system\n* 2.7.10 (set by /Users/wpaul/.python-version)\nand\npyenv which python\n/usr/local/var/pyenv/versions/2.7.10/bin/python\nYet in the same shell:\npython -V\nPython 2.7.12\nMy $PATH has been polluted by RVM, but it has pyenv at the beginning:\n/usr/local/var/pyenv/shims:/Users/wpaul/.rvm/gems/ruby-1.9.3-p551/bin:/Users/wpaul/.rvm/gems/ruby-1.9.3-p551@global/bin:/Users/wpaul/.rvm/rubies/ruby-1.9.3-p551/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/sbin:/Users/wpaul/.rvm/bin\n. Hmm, exact same result for me as well...\n. ",
    "danielabar": "My $PATH:\nshell\n/Users/dbaron/.pyenv/shims:/Users/dbaron/.nvm/versions/node/v5.9.1/bin:/usr/local/bin:/usr/local/mysql/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/Applications/eclipse:/usr/local/heroku/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin:/Library/Ruby/Gems/2.0.0/gems/travis-1.8.0/bin\nI'm also using zsh with oh-my-zsh, could there be some different configuration required to make this work with zsh?\n. I added setopt shwordsplit to .zshrc and then it started working, based on this zsh doc.\nBut now even if I remove the shwordsplit option, its still working, so not entirely sure what made it start working. My .zshrc last few lines:\n``` shell\nadded for pyenv\nTo use Homebrew's directories rather than ~/.pyenv\nexport PYENV_ROOT=\"/usr/local/var/pyenv\"\nTo enable shims and autocompletion\nif which pyenv > /dev/null; then eval \"$(pyenv init -)\"; fi\n``\n. Just set it up on another machine (osx, zsh), and this  time, even withoutsetopt shwordsplit` it's working. The only other thing I can think of is after installing via homebrew, the instructions said to add:\nshell\nexport PYENV_ROOT=/usr/local/var/pyenv\nBut then changing it to use quotes may have fixed it:\nshell\nexport PYENV_ROOT=\"/usr/local/var/pyenv\"\n. ",
    "obsoke": "First time user of pyenv & I just encountered this issue. \nOn latest version of OS X (10.11.6 as of this post). pyenv 20160726. zsh 5.2 from homebrew.\nI noticed that after opening up a terminal, my path wasn't reflecting what I set it to be in my .zshenv file:\nsh\n$ echo $PATH\n/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Users/d10p/.cargo/bin:~/.nvm:/usr/local/var/pyenv/shims\nBut if I did an echo $PATH at the end of my .zshenv, it was giving me a different value - the one I was expecting:\n/Users/d10p/.cargo/bin:~/.nvm:/usr/local/var/pyenv/shims:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\nI figured it must've been another file zsh was sourcing on startup that was changing my PATH. Using the ArchLinux wiki's page on Zsh, I discovered a few more files that zsh will source on startup.\nFor me, it ended up being /etc/zprofile that was causing the PATH mismatch. I commented out the files contents and after that, I was getting the correct version of Python from pyenv instead of MacOS's internal version.\nI'm not sure if this is the same cause affecting some of you - some of the PATHs posted here look like they should work, while the result of my echo $PATH when opening a terminal already showed there was an issue there. \n. ",
    "swils": "I had the same issue as d10p. It was caused by the path_helper call in /etc/zprofile. I solved it a little bit differently, just by putting pyenv initialization at the bottom of my local .zshrc.\n. ",
    "alex-marmot": "Same issue as d10p.  I solved it by  add eval \"$(pyenv init -)\" in .zshrc\n. ",
    "IllyaMoskvin": "I had a different problem, with the same symptom. For some reason, pyenv was creating ~ (tilde) directories in my home directory, and within the versions and shims folders. I fixed it by specifying the following in my ~/.bashrc:\n# Declaring PYENV_SHELL might be unnecessary\nexport PYENV_ROOT=\"$HOME/.pyenv\"\nexport PYENV_SHELL=\"bash\"\n\n# To enable shims and autocompletion\nif which pyenv > /dev/null; then eval \"$(pyenv init -)\"; fi\n\nNotably, don't do this, use $HOME instead:\nexport PYENV_ROOT=\"~/.pyenv\"\n\nI don't know why, but macOS hates it. I'm using macOS Sierra 10.12.6, and I've run into similar problems with other version managers that required .bashrc changes.. ",
    "sehmaschine": "I solved it with adding the pyenv paths and pyenv init within ~/.zshrc instead of ~/.zshenv, because path_helper is loaded with etc/zprofile. This should maybe be part of the docs (e.g. a note about path_helper).. ",
    "alexsabau86": "Having the same issue, anyone has a fix for this? thanks!\nMacbook-Pro-3:~ user$ pyenv versions\n  system\n* 2.7.6 (set by /Users/user/.python-version)\nMacbook-Pro-3:~ user$ python --version\nPython 2.7.10\nMacbook-Pro-3:~ user$\n*Update - None of the above suggested fixes work.. ",
    "0xdevalias": "Looks like @obsoke found my problem too (https://github.com/pyenv/pyenv/issues/660#issuecomment-240532278). For reference, this was my zprofile:\n```\n\u21d2  cat /etc/zprofile\nsystem-wide environment settings for zsh(1)\nif [ -x /usr/libexec/path_helper ]; then\n    eval /usr/libexec/path_helper -s\nfi\n```\nBased on this StackOverflow:\n\nThe man page for path_helper opens with:\nThe path_helper utility reads the contents of the files in the directories /etc/paths.d and /etc/manpaths.d and appends their contents to the PATH and MANPATH environment variables respectively.\nThe crucial point here is that the path_helper utility is intended to add contents to an existing PATH setting, not replace them. (And in actuality, what it really does is prepend contents, not append them, which matters for PATH variables...)\n\nWhile there wasn't much of interest in /etc/manpaths.d, it ALSO seems to be prepending the common system paths before all of my existing paths, which obviously messes with things:\n/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:MYOTHERSTUFFHERE\nThe zsh startup order for sourced files is here:\n\nhttps://wiki.archlinux.org/index.php/Zsh#Startup.2FShutdown_files\n\nThis blog gives similar advice:\n\nhttp://richa.avasthi.name/blog/2015/10/fixing-your-zsh-path-after-upgrading-to-el-capitan/\n\nThe weird part though is that zshrc SHOULD be getting sourced after zprofile, so this shouldn't be an issue.. but for whatever reason, for me it is.\nEdit: After playing around a bit, it looks like using the 'antigen' pyenv loader may not play nicely with PYENV_ROOT when I set it to ~/.pyenv. Fixed by manually setting this env var and exporting it before calling eval \"$(pyenv init - zsh)\". ",
    "bodikqlar": "@IllyaMoskvin thanks buddy, you saved my day. ",
    "vaichidrewar": "Adding the following command in .bashrc resolved the issue for me.\neval \"$(pyenv init -)\". Adding the following command in .bashrc resolved the issue for me. \neval \"$(pyenv init -)\"\n. ",
    "gloryVine": "@vaichidrewar \n\nAdding the following command in .bashrc resolved the issue for me.\neval \"$(pyenv init -)\"\n\nWhile this results in the correct local version of Python, it messes up the system python on mac:\n$python3 -V gives the correct version but\n$python -V results in 'no such file or directory', whereas it should normally link to Mac's system python 2.7. Why is that?\n. @matinfo \n\nSolution - Add to your shell (~/.bashrc or ~/.zshrc) :\nexport PATH=\"/Users/username/.pyenv:$PATH\"\neval \"$(pyenv init -)\"\nRemplace username by your MacBook user.\nRefresh your terminal env, example: $ source ~/.zshrc (or restart your terminal)\n\nWhile this results in the correct local version of Python, it messes up the system python on mac:\n$python3 -V gives the correct version but\n$python -V results in 'no such file or directory', whereas it should normally link to Mac's system python 2.7. Why is that? I'm scared it will screw my system up. > @gloryVine to use your Python 2.7 you need to use python2.7 cmd. And python -V on my MacBook return the Python 3 version.\nMy questions is does OSX still understand where to find its system python for system purposes, even though python -V now returns some other version that the system one.. ",
    "jonw-cogapp": "I seemed to be having this issue when setting up with High Sierra. For me this seemed like a $PATH issue, and in my case the shims were placed in my $HOME directory after installing via Homebrew.\nFormatting my $PATH variable to have this before the default bin directories solved my issues:\nexport PATH=\"$HOME/.pyenv/shims:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\"\nHopefully this saves someone some time.. ",
    "haipengz": "\nI had a different problem, with the same symptom. For some reason, pyenv was creating ~ (tilde) directories in my home directory, and within the versions and shims folders. I fixed it by specifying the following in my ~/.bashrc:\n```\nDeclaring PYENV_SHELL might be unnecessary\nexport PYENV_ROOT=\"$HOME/.pyenv\"\nexport PYENV_SHELL=\"bash\"\nTo enable shims and autocompletion\nif which pyenv > /dev/null; then eval \"$(pyenv init -)\"; fi\n``\nNotably, don't do this, use$HOME` instead:\nexport PYENV_ROOT=\"~/.pyenv\"\nI don't know why, but macOS hates it. I'm using macOS Sierra 10.12.6, and I've run into similar problems with other version managers that required .bashrc changes.\n\nThanks, it works for me on macOS Mojave 10.14.2.\nI added this:\n```\nTo enable shims and autocompletion\nif which pyenv > /dev/null; then eval \"$(pyenv init -)\"; fi\n```. ",
    "JavierFuentes": "Maybe my comment in this other issue could help somebody.. Thanks @denningsrogue ,\nI have this in my .bash_profile\n```ts\nPython Version Manager\nexport PATH=\"$PATH:$HOME/.pyenv/bin\"\neval \"$(pyenv init -)\"\neval \"$(pyenv virtualenv-init -)\"\n```\nand \nts\n$ pyenv global 3.7.2 2.7.16 \nhas worked for me permanently.\nts\niMac:~ javier$ pyenv versions\n  system\n* 2.7.16 (set by /Volumes/Datos/Users/javier/.pyenv/version)\n* 3.7.2 (set by /Volumes/Datos/Users/javier/.pyenv/version)\n```ts\niMac:~ javier$ python2\nPython 2.7.16 (default, Mar  9 2019, 20:36:25) \n[GCC 4.2.1 Compatible Apple LLVM 7.0.2 (clang-700.1.81)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n\n\nexit()\n```\n\n\n\n```ts\niMac:~ javier$ python3\nPython 3.7.2 (default, Mar  9 2019, 20:49:03) \n[Clang 7.0.2 (clang-700.1.81)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n\n\nexit()\n```\n\n\n\n```ts\niMac:~ javier$ python\nPython 3.7.2 (default, Mar  9 2019, 20:49:03) \n[Clang 7.0.2 (clang-700.1.81)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n\n\nexit();\n```\n\n\n\nI think this should be more clear in directly in README.md, because it is documented but a little hidden perhaps here. ",
    "pocin": "Hi, I have exactly the same issue. I ran exactly these commands\n\n$ brew install pyenv\nadd PYENV_ROOT=/usr/local/var/pyenv/ and if which pyenv > /dev/null; then eval \"$(pyenv init -)\"; fi (in this order) to .zshrc\nrun $ conda create -n data requests and pyenv local miniconda3-latest and pyenv global miniconda3-latest. \nRestart shell.\nAt this point $ which activate outputs /usr/local/var/pyenv/shims/activate. and\n```\n$ pyenv versions\n  system\nminiconda3-latest (set by /Users/pocin/.python-version)\n  miniconda3-latest/envs/data\n```\nand the problem: $source activate data exits the terminal with the message \"Error: activate must be sourced. Run source activate envname instead of activate envname.\n$ which source yields source: shell built-in command\n\nIf i cd into /usr/local/var/pyenv/versions/miniconda3-latest/bin and run $source activate data the env gets activated and it works. I suppose there is a problem with the activate shim?\nHere are the contents of /usr/local/var/pyenv/shims/activate\n```bash\n!/usr/bin/env bash\nset -e\n[ -n \"$PYENV_DEBUG\" ] && set -x\nprogram=\"${0##/}\"\nif [[ \"$program\" = \"python\" ]]; then\n  for arg; do\n    case \"$arg\" in\n    -c | -- ) break ;;\n    /* )\n      if [ -f \"$arg\" ]; then\n        export PYENV_FILE_ARG=\"$arg\"\n        break\n      fi\n      ;;\n    esac\n  done\nfi\nexport PYENV_ROOT=\"/usr/local/var/pyenv\"\nexec \"/usr/local/Cellar/pyenv/1.0.6/libexec/pyenv\" exec \"$program\" \"$@\"\n```\nI will happily provide more info\n. @yyuu oh thanks! I'll give it a shot :) I had a feeling it was not a bug, but I just could not find any mention of pyenv-virtualenv in the docs. Perhaps a small note/link could be added?\nThanks for your good work \ud83d\udc4d . ",
    "gatspy": "tks, I understand, in my zshrc file , used pyenv and rbenv,excluded nvm, it is too slow.\n. ",
    "jo-sm": "Ah sorry, I meant pyenv rehash in my original post. Not pyenv shims.\n. Yeah, it's executable but doesn't make a difference. \nThe shim doesn't seem to be created. I run pyenv rehash && hash -r, and it still doesn't exist in the shims directory. \n. It was actually an issue with pip -- I had installed a different version, so it wasn't installing in the correct directory. Thanks for the help!\n. ",
    "jcarmena": "I'm having the same problem \nFedora 27\nPython 2.7.14\npyenv 1.2.2-14-gb95d0d9\n```\n$ cat .bash_profile \n.bash_profile\nGet the aliases and functions\nif [ -f ~/.bashrc ]; then\n    . ~/.bashrc\nfi\nUser specific environment and startup programs\nPATH=$PATH:$HOME/.local/bin:$HOME/bin\nexport PATH\nexport PYENV_ROOT=\"$HOME/.pyenv\"\nexport PATH=\"$PYENV_ROOT/bin:$PATH\"\neval \"$(pyenv init -)\"\neval \"$(pyenv virtualenv-init -)\"\n$ pyenv shell\npyenv: no such command `shell'\n```. ",
    "jamesalbert": "Can we please reopen this? Here's my python-build log and this is the exact error I got:\n```\n$ pyenv install pypy3.5-5.7-beta-src\nDownloading pypy3-v5.7.0-src.tar.bz2...\n-> https://bitbucket.org/pypy/pypy/downloads/pypy3-v5.7.0-src.tar.bz2\nInstalling pypy3-v5.7.0-src...\nBUILD FAILED (OS X 10.12.3 using python-build 20160602)\nInspect or clean up the working tree at /var/folders/cq/tmxk9f312lb5tn0mt_3_sw_m0000gn/T/python-build.20170424100141.66350\nResults logged to /var/folders/cq/tmxk9f312lb5tn0mt_3_sw_m0000gn/T/python-build.20170424100141.66350.log\nLast 10 log lines:\n    fn(*args)\n  File \"/private/var/folders/cq/tmxk9f312lb5tn0mt_3_sw_m0000gn/T/python-build.20170424100141.66350/pypy3-v5.7.0-src/rpython/translator/tool/pdbplus.py\", line 25, in post_mortem\n    self.interaction(t.tb_frame, t)\n  File \"/Users/jbert/.pyenv/versions/2.7.11/lib/python2.7/pdb.py\", line 210, in interaction\n    self.cmdloop()\n  File \"/Users/jbert/.pyenv/versions/2.7.11/lib/python2.7/cmd.py\", line 109, in cmdloop\n    self.preloop()\n  File \"/private/var/folders/cq/tmxk9f312lb5tn0mt_3_sw_m0000gn/T/python-build.20170424100141.66350/pypy3-v5.7.0-src/rpython/translator/tool/pdbplus.py\", line 29, in preloop\n    raise NoTTY(\"Cannot start the debugger when stdout is captured.\")\nrpython.translator.tool.pdbplus.NoTTY: Cannot start the debugger when stdout is captured.\n```\nedit: don't reopen. Apparently I can't read. ",
    "slankipalli": "Patch mean, can you please more details around.\nThanks\n. I want install pyenv on CoreOS that's where problem raised \n. ",
    "zzr0427": "I met the same problem in Centos7.2. I solved the problem by install a package called patch:\nyum install patch. ",
    "vijay120": "I am having this problem as well on Ubuntu using Pyenv on 3.5.3:\n```\n\n\n\nimport _sqlite3\nTraceback (most recent call last):\n  File \"\", line 1, in \nImportError: No module named '_sqlite3'\n```. \n\n\n",
    "lamenezes": "I've had the same problem using Ubuntu:\n```python\n$ pyenv local 3.6.1\n$ python\nPython 3.6.1 (default, Apr 26 2017, 22:04:06) \n[GCC 5.2.1 20151010] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n\n\nimport _sqlite3\nTraceback (most recent call last):\n  File \"\", line 1, in \nModuleNotFoundError: No module named '_sqlite3'\n```\n\n\n\nDoing the following solved the problem:\n\nInstall libsqlite3-dev: sudo apt install libsqlite3-dev\nRe-install pyenv: pyenv install 3.6.1\n\nMaybe this can fix the issue for you @vijay120 . ",
    "yuehaowang": "I met several warnings on missing dependencies while installing Python 3.5.4 via pyenv. Then I found I cannot import sqlite3. I tried to install all the requirements mentioned in Common build problems and reinstall Python 3.5.4 via pyenv. I managed to import sqlite3 eventually in this way.. ",
    "hawkowl": "There does seem to be a hash associated with it, now that I've dug into the files, although it doesn't communicate that to the user (it just gives a HTTP URL, which is why I filed this bug!). Even if it does check the hash (which I'm trusting pyenv does without...) it should probably download it off HTTPS anyway (because then it doesn't give people heart attacks ;) ).\n. (related; https://github.com/yyuu/pyenv/issues/679)\n. @joshfriend yeah, that's suboptimal, re the GNU thing. From a security perspective we're still relying on the hash to be checked, but if GNU one day fixes their mirroring then it'll work just fine going forward :)\nre stackless and pypy, heh my sed script crashed out at \"patches\" and didn't keep going :) It does appear that pypy's buildbot doesn't support HTTPS though  -- I've filed https://bitbucket.org/pypy/pypy/issues/2376/buildbotpypyorg-is-not-available-over about that, and just fixed the stackless ones.\n. Thanks @yyuu! :)\n. ",
    "0xd3d0": "@yyuu your test works, because in the second time that build_package_symlink_version_suffix the bin directory doesn't exist, so the mv operation doesn't occur.\nWith a real target installation, like the following command, this is not the case:\nPYTHON_BUILD_CACHE_PATH=/Users/blah/.sas/pyenv/buildcache PYTHON_CONFIGURE_OPTS=\"--enable-framework --enable-unicode=ucs2\" pyenv install 2.7.8 -vfk\nWhich outputs:\n```\nmv: /Users/blah/.sas/pyenv/versions/2.7.8/bin and /Users/blah/.sas/pyenv/versions/2.7.8/bin.orig/bin are identical\nBUILD FAILED (OS X 10.11.6 using python-build 20160726-7-g740fbe4)\n```\nThis occurs after the pip installation succeeds...\n. ",
    "sebhahn": "I can confirm this problem! Any workaround?. Any chance that this problem can be fixed?. Thanks, I'll test it.. I'm also still running into this issue (using Kubuntu 18.04)!. ",
    "JunsikChoi": "I got the same problem. Solved by remove gettext . ",
    "zarzen": "similar problem, tried method proposed here, but problem still exists. system info: ubuntu 18.04\nfollowing is the debug output. (I have updated pyenv, with git pull under ~/.pyenv folder)\n```\n git submodule \n+ export PYENV_ROOT=/home/zarzen/.pyenv\n+ /home/zarzen/.pyenv/libexec/pyenv which \n+ [pyenv:22] enable -f /home/zarzen/.pyenv/libexec/../libexec/pyenv-realpath.dylib realpath\n+ [pyenv:29] '[' -z '' ']'\n++ [pyenv:31] type -p greadlink readlink\n++ [pyenv:31] head -1\n+ [pyenv:31] READLINK=/bin/readlink\n+ [pyenv:32] '[' -n /bin/readlink ']'\n+ [pyenv:54] '[' -z /home/zarzen/.pyenv ']'\n+ [pyenv:57] PYENV_ROOT=/home/zarzen/.pyenv\n+ [pyenv:59] export PYENV_ROOT\n+ [pyenv:62] '[' -z '' ']'\n+ [pyenv:63] '[' -n '' ']'\n+ [pyenv:79] '[' -z '' ']'\n+ [pyenv:80] PYENV_DIR=/home/zarzen/Dev/data_annotation\n+ [pyenv:83] '[' '!' -d /home/zarzen/Dev/data_annotation ']'\n+ [pyenv:83] '[' '!' -e /home/zarzen/Dev/data_annotation ']'\n++ [pyenv:87] cd /home/zarzen/Dev/data_annotation\n++ [pyenv:87] echo /home/zarzen/Dev/data_annotation\n+ [pyenv:87] PYENV_DIR=/home/zarzen/Dev/data_annotation\n+ [pyenv:88] export PYENV_DIR\n+ [pyenv:91] shopt -s nullglob\n++ [pyenv:93] abs_dirname /home/zarzen/.pyenv/libexec/pyenv\n++ [pyenv:39] local path=/home/zarzen/.pyenv/libexec/pyenv\n++ [pyenv:43] '[' -n /home/zarzen/.pyenv/libexec/pyenv ']'\n++ [pyenv:44] cd /home/zarzen/.pyenv/libexec\n++ [pyenv:45] local name=pyenv\n+++ [pyenv:46] resolve_link pyenv\n+++ [pyenv:35] /bin/readlink pyenv\n+++ [pyenv:46] true\n++ [pyenv:46] path=\n++ [pyenv:43] '[' -n '' ']'\n++ [pyenv:49] pwd\n+ [pyenv:93] bin_path=/home/zarzen/.pyenv/libexec\n+ [pyenv:94] for plugin_bin in \"${PYENV_ROOT}/plugins/\"/bin\n+ [pyenv:95] PATH=/home/zarzen/.pyenv/plugins/pyenv-doctor/bin:/usr/lib/git-core:/home/zarzen/.opam/4.07.0/bin:/home/zarzen/perl5/bin:/home/zarzen/.pyenv/plugins/pyenv-virtualenv/shims:/home/zarzen/.pyenv/shims:/home/zarzen/.pyenv/bin:/usr/local/cuda-9.0/bin:/home/zarzen/.local/bin:/home/zarzen/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/usr/lib/jvm/java-8-oracle/bin:/usr/lib/jvm/java-8-oracle/db/bin:/usr/lib/jvm/java-8-oracle/jre/bin:/home/zarzen/go/bin:/home/zarzen/platform-tools\n+ [pyenv:94] for plugin_bin in \"${PYENV_ROOT}/plugins/\"/bin\n+ [pyenv:95] PATH=/home/zarzen/.pyenv/plugins/pyenv-installer/bin:/home/zarzen/.pyenv/plugins/pyenv-doctor/bin:/usr/lib/git-core:/home/zarzen/.opam/4.07.0/bin:/home/zarzen/perl5/bin:/home/zarzen/.pyenv/plugins/pyenv-virtualenv/shims:/home/zarzen/.pyenv/shims:/home/zarzen/.pyenv/bin:/usr/local/cuda-9.0/bin:/home/zarzen/.local/bin:/home/zarzen/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/usr/lib/jvm/java-8-oracle/bin:/usr/lib/jvm/java-8-oracle/db/bin:/usr/lib/jvm/java-8-oracle/jre/bin:/home/zarzen/go/bin:/home/zarzen/platform-tools\n+ [pyenv:94] for plugin_bin in \"${PYENV_ROOT}/plugins/\"/bin\n+ [pyenv:95] PATH=/home/zarzen/.pyenv/plugins/pyenv-update/bin:/home/zarzen/.pyenv/plugins/pyenv-installer/bin:/home/zarzen/.pyenv/plugins/pyenv-doctor/bin:/usr/lib/git-core:/home/zarzen/.opam/4.07.0/bin:/home/zarzen/perl5/bin:/home/zarzen/.pyenv/plugins/pyenv-virtualenv/shims:/home/zarzen/.pyenv/shims:/home/zarzen/.pyenv/bin:/usr/local/cuda-9.0/bin:/home/zarzen/.local/bin:/home/zarzen/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/usr/lib/jvm/java-8-oracle/bin:/usr/lib/jvm/java-8-oracle/db/bin:/usr/lib/jvm/java-8-oracle/jre/bin:/home/zarzen/go/bin:/home/zarzen/platform-tools\n+ [pyenv:94] for plugin_bin in \"${PYENV_ROOT}/plugins/\"/bin\n+ [pyenv:95] PATH=/home/zarzen/.pyenv/plugins/pyenv-virtualenv/bin:/home/zarzen/.pyenv/plugins/pyenv-update/bin:/home/zarzen/.pyenv/plugins/pyenv-installer/bin:/home/zarzen/.pyenv/plugins/pyenv-doctor/bin:/usr/lib/git-core:/home/zarzen/.opam/4.07.0/bin:/home/zarzen/perl5/bin:/home/zarzen/.pyenv/plugins/pyenv-virtualenv/shims:/home/zarzen/.pyenv/shims:/home/zarzen/.pyenv/bin:/usr/local/cuda-9.0/bin:/home/zarzen/.local/bin:/home/zarzen/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/usr/lib/jvm/java-8-oracle/bin:/usr/lib/jvm/java-8-oracle/db/bin:/usr/lib/jvm/java-8-oracle/jre/bin:/home/zarzen/go/bin:/home/zarzen/platform-tools\n+ [pyenv:94] for plugin_bin in \"${PYENV_ROOT}/plugins/\"/bin\n+ [pyenv:95] PATH=/home/zarzen/.pyenv/plugins/python-build/bin:/home/zarzen/.pyenv/plugins/pyenv-virtualenv/bin:/home/zarzen/.pyenv/plugins/pyenv-update/bin:/home/zarzen/.pyenv/plugins/pyenv-installer/bin:/home/zarzen/.pyenv/plugins/pyenv-doctor/bin:/usr/lib/git-core:/home/zarzen/.opam/4.07.0/bin:/home/zarzen/perl5/bin:/home/zarzen/.pyenv/plugins/pyenv-virtualenv/shims:/home/zarzen/.pyenv/shims:/home/zarzen/.pyenv/bin:/usr/local/cuda-9.0/bin:/home/zarzen/.local/bin:/home/zarzen/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/usr/lib/jvm/java-8-oracle/bin:/usr/lib/jvm/java-8-oracle/db/bin:/usr/lib/jvm/java-8-oracle/jre/bin:/home/zarzen/go/bin:/home/zarzen/platform-tools\n+ [pyenv:97] export PATH=/home/zarzen/.pyenv/libexec:/home/zarzen/.pyenv/plugins/python-build/bin:/home/zarzen/.pyenv/plugins/pyenv-virtualenv/bin:/home/zarzen/.pyenv/plugins/pyenv-update/bin:/home/zarzen/.pyenv/plugins/pyenv-installer/bin:/home/zarzen/.pyenv/plugins/pyenv-doctor/bin:/usr/lib/git-core:/home/zarzen/.opam/4.07.0/bin:/home/zarzen/perl5/bin:/home/zarzen/.pyenv/plugins/pyenv-virtualenv/shims:/home/zarzen/.pyenv/shims:/home/zarzen/.pyenv/bin:/usr/local/cuda-9.0/bin:/home/zarzen/.local/bin:/home/zarzen/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/usr/lib/jvm/java-8-oracle/bin:/usr/lib/jvm/java-8-oracle/db/bin:/usr/lib/jvm/java-8-oracle/jre/bin:/home/zarzen/go/bin:/home/zarzen/platform-tools\n+ [pyenv:97] PATH=/home/zarzen/.pyenv/libexec:/home/zarzen/.pyenv/plugins/python-build/bin:/home/zarzen/.pyenv/plugins/pyenv-virtualenv/bin:/home/zarzen/.pyenv/plugins/pyenv-update/bin:/home/zarzen/.pyenv/plugins/pyenv-installer/bin:/home/zarzen/.pyenv/plugins/pyenv-doctor/bin:/usr/lib/git-core:/home/zarzen/.opam/4.07.0/bin:/home/zarzen/perl5/bin:/home/zarzen/.pyenv/plugins/pyenv-virtualenv/shims:/home/zarzen/.pyenv/shims:/home/zarzen/.pyenv/bin:/usr/local/cuda-9.0/bin:/home/zarzen/.local/bin:/home/zarzen/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/usr/lib/jvm/java-8-oracle/bin:/usr/lib/jvm/java-8-oracle/db/bin:/usr/lib/jvm/java-8-oracle/jre/bin:/home/zarzen/go/bin:/home/zarzen/platform-tools\n+ [pyenv:99] PYENV_HOOK_PATH=:/home/zarzen/.pyenv/pyenv.d\n+ [pyenv:100] '[' /home/zarzen/.pyenv '!=' /home/zarzen/.pyenv ']'\n+ [pyenv:104] PYENV_HOOK_PATH=:/home/zarzen/.pyenv/pyenv.d:/usr/local/etc/pyenv.d:/etc/pyenv.d:/usr/lib/pyenv/hooks\n+ [pyenv:105] for plugin_hook in \"${PYENV_ROOT}/plugins/\"/etc/pyenv.d\n+ [pyenv:106] PYENV_HOOK_PATH=:/home/zarzen/.pyenv/pyenv.d:/usr/local/etc/pyenv.d:/etc/pyenv.d:/usr/lib/pyenv/hooks:/home/zarzen/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d\n+ [pyenv:105] for plugin_hook in \"${PYENV_ROOT}/plugins/\"*/etc/pyenv.d\n+ [pyenv:106] PYENV_HOOK_PATH=:/home/zarzen/.pyenv/pyenv.d:/usr/local/etc/pyenv.d:/etc/pyenv.d:/usr/lib/pyenv/hooks:/home/zarzen/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d:/home/zarzen/.pyenv/plugins/pyenv-which-ext/etc/pyenv.d\n+ [pyenv:108] PYENV_HOOK_PATH=/home/zarzen/.pyenv/pyenv.d:/usr/local/etc/pyenv.d:/etc/pyenv.d:/usr/lib/pyenv/hooks:/home/zarzen/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d:/home/zarzen/.pyenv/plugins/pyenv-which-ext/etc/pyenv.d\n+ [pyenv:109] export PYENV_HOOK_PATH\n+ [pyenv:111] shopt -u nullglob\n+ [pyenv:114] command=which\n+ [pyenv:115] case \"$command\" in\n++ [pyenv:128] command -v pyenv-which\n+ [pyenv:128] command_path=/home/zarzen/.pyenv/libexec/pyenv-which\n+ [pyenv:129] '[' -z /home/zarzen/.pyenv/libexec/pyenv-which ']'\n+ [pyenv:137] shift 1\n+ [pyenv:138] '[' '' = --help ']'\n+ [pyenv:145] exec /home/zarzen/.pyenv/libexec/pyenv-which ''\n+ [pyenv-which:14] '[' '' = --complete ']'\n+ [pyenv-which:30] PYENV_COMMAND=\n+ [pyenv-which:32] '[' -z '' ']'\n+ [pyenv-which:33] pyenv-help --usage which\n+ [pyenv-help:19] '[' --usage = --complete ']'\n+ [pyenv-help:143] unset usage\n+ [pyenv-help:144] '[' --usage = --usage ']'\n+ [pyenv-help:145] usage=1\n+ [pyenv-help:146] shift\n+ [pyenv-help:149] '[' -z which ']'\n+ [pyenv-help:149] '[' which == pyenv ']'\n+ [pyenv-help:159] command=which\n++ [pyenv-help:160] command_path which\n++ [pyenv-help:25] local command=which\n++ [pyenv-help:26] command -v pyenv-which\n+ [pyenv-help:160] '[' -n /home/zarzen/.pyenv/libexec/pyenv-which ']'\n+ [pyenv-help:161] '[' -n 1 ']'\n+ [pyenv-help:162] print_usage which\n+ [pyenv-help:137] local command=which\n+ [pyenv-help:138] local summary usage help\n++ [pyenv-help:139] documentation_for which\n++ [pyenv-help:90] local filename\n+++ [pyenv-help:91] command_path which\n+++ [pyenv-help:25] local command=which\n+++ [pyenv-help:26] command -v pyenv-which\n++ [pyenv-help:91] filename=/home/zarzen/.pyenv/libexec/pyenv-which\n++ [pyenv-help:92] '[' -n /home/zarzen/.pyenv/libexec/pyenv-which ']'\n++ [pyenv-help:93] extract_initial_comment_block\n++ [pyenv-help:30] sed -ne '\n    /^#/ !{\n      q\n    }\ns/^#$/# /\n\n/^# / {\n  s/^# //\n  p\n}\n\n'\n++ [pyenv-help:93] collect_documentation\n+++ [pyenv-help:86] type -p gawk awk\n+++ [pyenv-help:86] head -1\n++ [pyenv-help:86] /usr/bin/awk '\n    /^Summary:/ {\n      summary = substr($0, 10)\n      next\n    }\n/^Usage:/ {\n  reading_usage = 1\n  usage = usage \"\\n\" $0\n  next\n}\n\n/^( *$|       )/ && reading_usage {\n  usage = usage \"\\n\" $0\n  next\n}\n\n{\n  reading_usage = 0\n  help = help \"\\n\" $0\n}\n\nfunction escape(str) {\n  gsub(/[`\\\\$\"]/, \"\\\\\\\\&\", str)\n  return str\n}\n\nfunction trim(str) {\n  sub(/^\\n*/, \"\", str)\n  sub(/\\n*$/, \"\", str)\n  return str\n}\n\nEND {\n  if (usage || summary) {\n    print \"summary=\\\"\" escape(summary) \"\\\"\"\n    print \"usage=\\\"\" escape(trim(usage)) \"\\\"\"\n    print \"help=\\\"\" escape(trim(help)) \"\\\"\"\n  }\n}\n\n'\n+ [pyenv-help:139] eval 'summary=\"Display the full path to an executable\"\nusage=\"Usage: pyenv which \"\nhelp=\"Displays the full path to the executable that pyenv will invoke when\nyou run the given command.\"'\n++ [pyenv-help:139] summary='Display the full path to an executable'\n++ [pyenv-help:140] usage='Usage: pyenv which '\n++ [pyenv-help:142] help='Displays the full path to the executable that pyenv will invoke when\nyou run the given command.'\n+ [pyenv-help:140] '[' -z 'Usage: pyenv which ' ']'\n+ [pyenv-help:140] echo 'Usage: pyenv which '\nUsage: pyenv which \n+ [pyenv-which:34] exit 1\n+ program=\n+ [ -e  ]\n+ GIT_QUIET=\n+ test -n \n+ basename -- /usr/lib/git-core/git-submodule\n+ sed -e s/-/ /\n+ dashless=git submodule\n+ [ -z  ]\n+ eval_gettext usage: $dashless $USAGE\n/usr/lib/git-core/git-submodule: 93: /usr/lib/git-core/git-sh-setup: eval_gettext: not found\n+ LONG_USAGE=\n+ uname -s\n+ test -z \n+ git_dir_init\n+ git rev-parse --git-dir\n+ GIT_DIR=.git\n+ [ -z Yes ]\n+ test -n .git\n+ cd .git\n+ pwd\n+ GIT_DIR=/home/zarzen/Dev/data_annotation/.git\n+ git rev-parse --git-path objects\n+ : .git/objects\n+ . git-parse-remote\n+ git rev-parse -q --git-dir\n+ GIT_DIR=.git\n+ require_work_tree\n+ git rev-parse --is-inside-work-tree\n+ test true = true\n+ git rev-parse --show-prefix\n+ wt_prefix=\n+ cd_to_toplevel\n+ git rev-parse --show-toplevel\n+ cdup=/home/zarzen/Dev/data_annotation\n+ cd /home/zarzen/Dev/data_annotation\n+ GIT_PROTOCOL_FROM_USER=0\n+ export GIT_PROTOCOL_FROM_USER\n+ command=\n+ branch=\n+ force=\n+ reference=\n+ cached=\n+ recursive=\n+ init=\n+ files=\n+ remote=\n+ nofetch=\n+ update=\n+ prefix=\n+ custom_name=\n+ depth=\n+ progress=\n+ test 0 != 0\n+ test -z \n+ test 0 = 0\n+ command=status\n+ test -n \n+ test -n \n+ cmd_status\n+ test 0 -ne 0\n+ git submodule--helper status\n+ [pyenv:22] enable -f /home/zarzen/.pyenv/bin/../libexec/pyenv-realpath.dylib realpath                                                                                                                          \n+ [pyenv:29] '[' -z '' ']'\n++ [pyenv:31] type -p greadlink readlink\n++ [pyenv:31] head -1\n+ [pyenv:31] READLINK=/bin/readlink\n+ [pyenv:32] '[' -n /bin/readlink ']'\n+ [pyenv:54] '[' -z /home/zarzen/.pyenv ']'\n+ [pyenv:57] PYENV_ROOT=/home/zarzen/.pyenv\n+ [pyenv:59] export PYENV_ROOT\n+ [pyenv:62] '[' -z '' ']'\n+ [pyenv:63] '[' -n '' ']'\n+ [pyenv:79] '[' -z '' ']'\n+ [pyenv:80] PYENV_DIR=/home/zarzen/Dev/data_annotation\n+ [pyenv:83] '[' '!' -d /home/zarzen/Dev/data_annotation ']'\n+ [pyenv:83] '[' '!' -e /home/zarzen/Dev/data_annotation ']'\n++ [pyenv:87] cd /home/zarzen/Dev/data_annotation\n++ [pyenv:87] echo /home/zarzen/Dev/data_annotation\n+ [pyenv:87] PYENV_DIR=/home/zarzen/Dev/data_annotation\n+ [pyenv:88] export PYENV_DIR\n+ [pyenv:91] shopt -s nullglob\n++ [pyenv:93] abs_dirname /home/zarzen/.pyenv/bin/pyenv\n++ [pyenv:39] local path=/home/zarzen/.pyenv/bin/pyenv\n++ [pyenv:43] '[' -n /home/zarzen/.pyenv/bin/pyenv ']'\n++ [pyenv:44] cd /home/zarzen/.pyenv/bin\n++ [pyenv:45] local name=pyenv\n+++ [pyenv:46] resolve_link pyenv\n+++ [pyenv:35] /bin/readlink pyenv\n++ [pyenv:46] path=../libexec/pyenv\n++ [pyenv:43] '[' -n ../libexec/pyenv ']'\n++ [pyenv:44] cd ../libexec\n++ [pyenv:45] local name=pyenv\n+++ [pyenv:46] resolve_link pyenv\n+++ [pyenv:35] /bin/readlink pyenv\n+++ [pyenv:46] true\n++ [pyenv:46] path=\n++ [pyenv:43] '[' -n '' ']'\n++ [pyenv:49] pwd\n+ [pyenv:93] bin_path=/home/zarzen/.pyenv/libexec\n+ [pyenv:94] for plugin_bin in \"${PYENV_ROOT}/plugins/\"/bin\n+ [pyenv:95] PATH=/home/zarzen/.pyenv/plugins/pyenv-doctor/bin:/home/zarzen/.opam/4.07.0/bin:/home/zarzen/perl5/bin:/home/zarzen/.pyenv/plugins/pyenv-virtualenv/shims:/home/zarzen/.pyenv/shims:/home/zarzen/.pyenv/bin:/usr/local/cuda-9.0/bin:/home/zarzen/.local/bin:/home/zarzen/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/usr/lib/jvm/java-8-oracle/bin:/usr/lib/jvm/java-8-oracle/db/bin:/usr/lib/jvm/java-8-oracle/jre/bin:/home/zarzen/go/bin:/home/zarzen/platform-tools\n+ [pyenv:94] for plugin_bin in \"${PYENV_ROOT}/plugins/\"/bin\n+ [pyenv:95] PATH=/home/zarzen/.pyenv/plugins/pyenv-installer/bin:/home/zarzen/.pyenv/plugins/pyenv-doctor/bin:/home/zarzen/.opam/4.07.0/bin:/home/zarzen/perl5/bin:/home/zarzen/.pyenv/plugins/pyenv-virtualenv/shims:/home/zarzen/.pyenv/shims:/home/zarzen/.pyenv/bin:/usr/local/cuda-9.0/bin:/home/zarzen/.local/bin:/home/zarzen/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/usr/lib/jvm/java-8-oracle/bin:/usr/lib/jvm/java-8-oracle/db/bin:/usr/lib/jvm/java-8-oracle/jre/bin:/home/zarzen/go/bin:/home/zarzen/platform-tools\n+ [pyenv:94] for plugin_bin in \"${PYENV_ROOT}/plugins/\"/bin\n+ [pyenv:95] PATH=/home/zarzen/.pyenv/plugins/pyenv-update/bin:/home/zarzen/.pyenv/plugins/pyenv-installer/bin:/home/zarzen/.pyenv/plugins/pyenv-doctor/bin:/home/zarzen/.opam/4.07.0/bin:/home/zarzen/perl5/bin:/home/zarzen/.pyenv/plugins/pyenv-virtualenv/shims:/home/zarzen/.pyenv/shims:/home/zarzen/.pyenv/bin:/usr/local/cuda-9.0/bin:/home/zarzen/.local/bin:/home/zarzen/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/usr/lib/jvm/java-8-oracle/bin:/usr/lib/jvm/java-8-oracle/db/bin:/usr/lib/jvm/java-8-oracle/jre/bin:/home/zarzen/go/bin:/home/zarzen/platform-tools\n+ [pyenv:94] for plugin_bin in \"${PYENV_ROOT}/plugins/\"/bin\n+ [pyenv:95] PATH=/home/zarzen/.pyenv/plugins/pyenv-virtualenv/bin:/home/zarzen/.pyenv/plugins/pyenv-update/bin:/home/zarzen/.pyenv/plugins/pyenv-installer/bin:/home/zarzen/.pyenv/plugins/pyenv-doctor/bin:/home/zarzen/.opam/4.07.0/bin:/home/zarzen/perl5/bin:/home/zarzen/.pyenv/plugins/pyenv-virtualenv/shims:/home/zarzen/.pyenv/shims:/home/zarzen/.pyenv/bin:/usr/local/cuda-9.0/bin:/home/zarzen/.local/bin:/home/zarzen/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/usr/lib/jvm/java-8-oracle/bin:/usr/lib/jvm/java-8-oracle/db/bin:/usr/lib/jvm/java-8-oracle/jre/bin:/home/zarzen/go/bin:/home/zarzen/platform-tools\n+ [pyenv:94] for plugin_bin in \"${PYENV_ROOT}/plugins/\"/bin\n+ [pyenv:95] PATH=/home/zarzen/.pyenv/plugins/python-build/bin:/home/zarzen/.pyenv/plugins/pyenv-virtualenv/bin:/home/zarzen/.pyenv/plugins/pyenv-update/bin:/home/zarzen/.pyenv/plugins/pyenv-installer/bin:/home/zarzen/.pyenv/plugins/pyenv-doctor/bin:/home/zarzen/.opam/4.07.0/bin:/home/zarzen/perl5/bin:/home/zarzen/.pyenv/plugins/pyenv-virtualenv/shims:/home/zarzen/.pyenv/shims:/home/zarzen/.pyenv/bin:/usr/local/cuda-9.0/bin:/home/zarzen/.local/bin:/home/zarzen/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/usr/lib/jvm/java-8-oracle/bin:/usr/lib/jvm/java-8-oracle/db/bin:/usr/lib/jvm/java-8-oracle/jre/bin:/home/zarzen/go/bin:/home/zarzen/platform-tools\n+ [pyenv:97] export PATH=/home/zarzen/.pyenv/libexec:/home/zarzen/.pyenv/plugins/python-build/bin:/home/zarzen/.pyenv/plugins/pyenv-virtualenv/bin:/home/zarzen/.pyenv/plugins/pyenv-update/bin:/home/zarzen/.pyenv/plugins/pyenv-installer/bin:/home/zarzen/.pyenv/plugins/pyenv-doctor/bin:/home/zarzen/.opam/4.07.0/bin:/home/zarzen/perl5/bin:/home/zarzen/.pyenv/plugins/pyenv-virtualenv/shims:/home/zarzen/.pyenv/shims:/home/zarzen/.pyenv/bin:/usr/local/cuda-9.0/bin:/home/zarzen/.local/bin:/home/zarzen/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/usr/lib/jvm/java-8-oracle/bin:/usr/lib/jvm/java-8-oracle/db/bin:/usr/lib/jvm/java-8-oracle/jre/bin:/home/zarzen/go/bin:/home/zarzen/platform-tools\n+ [pyenv:97] PATH=/home/zarzen/.pyenv/libexec:/home/zarzen/.pyenv/plugins/python-build/bin:/home/zarzen/.pyenv/plugins/pyenv-virtualenv/bin:/home/zarzen/.pyenv/plugins/pyenv-update/bin:/home/zarzen/.pyenv/plugins/pyenv-installer/bin:/home/zarzen/.pyenv/plugins/pyenv-doctor/bin:/home/zarzen/.opam/4.07.0/bin:/home/zarzen/perl5/bin:/home/zarzen/.pyenv/plugins/pyenv-virtualenv/shims:/home/zarzen/.pyenv/shims:/home/zarzen/.pyenv/bin:/usr/local/cuda-9.0/bin:/home/zarzen/.local/bin:/home/zarzen/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/usr/lib/jvm/java-8-oracle/bin:/usr/lib/jvm/java-8-oracle/db/bin:/usr/lib/jvm/java-8-oracle/jre/bin:/home/zarzen/go/bin:/home/zarzen/platform-tools\n+ [pyenv:99] PYENV_HOOK_PATH=:/home/zarzen/.pyenv/pyenv.d\n+ [pyenv:100] '[' /home/zarzen/.pyenv '!=' /home/zarzen/.pyenv ']'\n+ [pyenv:104] PYENV_HOOK_PATH=:/home/zarzen/.pyenv/pyenv.d:/usr/local/etc/pyenv.d:/etc/pyenv.d:/usr/lib/pyenv/hooks\n+ [pyenv:105] for plugin_hook in \"${PYENV_ROOT}/plugins/\"/etc/pyenv.d\n+ [pyenv:106] PYENV_HOOK_PATH=:/home/zarzen/.pyenv/pyenv.d:/usr/local/etc/pyenv.d:/etc/pyenv.d:/usr/lib/pyenv/hooks:/home/zarzen/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d\n+ [pyenv:105] for plugin_hook in \"${PYENV_ROOT}/plugins/\"/etc/pyenv.d\n+ [pyenv:106] PYENV_HOOK_PATH=:/home/zarzen/.pyenv/pyenv.d:/usr/local/etc/pyenv.d:/etc/pyenv.d:/usr/lib/pyenv/hooks:/home/zarzen/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d:/home/zarzen/.pyenv/plugins/pyenv-which-ext/etc/pyenv.d\n+ [pyenv:108] PYENV_HOOK_PATH=/home/zarzen/.pyenv/pyenv.d:/usr/local/etc/pyenv.d:/etc/pyenv.d:/usr/lib/pyenv/hooks:/home/zarzen/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d:/home/zarzen/.pyenv/plugins/pyenv-which-ext/etc/pyenv.d\n+ [pyenv:109] export PYENV_HOOK_PATH\n+ [pyenv:111] shopt -u nullglob\n+ [pyenv:114] command=sh-activate\n+ [pyenv:115] case \"$command\" in\n++ [pyenv:128] command -v pyenv-sh-activate\n+ [pyenv:128] command_path=/home/zarzen/.pyenv/plugins/pyenv-virtualenv/bin/pyenv-sh-activate\n+ [pyenv:129] '[' -z /home/zarzen/.pyenv/plugins/pyenv-virtualenv/bin/pyenv-sh-activate ']'\n+ [pyenv:137] shift 1\n+ [pyenv:138] '[' --quiet = --help ']'\n+ [pyenv:145] exec /home/zarzen/.pyenv/plugins/pyenv-virtualenv/bin/pyenv-sh-activate --quiet\n+ [pyenv-sh-activate:17] '[' -z /home/zarzen/.pyenv ']'\n+ [pyenv-sh-activate:25] unset FORCE\n+ [pyenv-sh-activate:26] unset QUIET\n+ [pyenv-sh-activate:28] '[' 1 -gt 0 ']'\n+ [pyenv-sh-activate:29] case \"$1\" in\n+ [pyenv-sh-activate:39] QUIET=1\n+ [pyenv-sh-activate:52] shift 1\n+ [pyenv-sh-activate:28] '[' 0 -gt 0 ']'\n+ [pyenv-sh-activate:55] no_shell=\n+ [pyenv-sh-activate:56] versions=(\"$@\")\n+ [pyenv-sh-activate:57] '[' -z '' ']'\n+ [pyenv-sh-activate:58] no_shell=1\n+ [pyenv-sh-activate:59] OLDIFS=' \n'\n+ [pyenv-sh-activate:60] IFS=:\n+ [pyenv-sh-activate:60] versions=($(pyenv-version-name 2>/dev/null))\n++ [pyenv-sh-activate:60] pyenv-version-name\n+ [pyenv-sh-activate:61] IFS='\n'\n+ [pyenv-sh-activate:64] '[' -z 1 ']'\n+ [pyenv-sh-activate:70] venv=anaconda2-5.1.0\n+ [pyenv-sh-activate:72] '[' -n /home/zarzen/.pyenv/versions/anaconda3-4.4.0 ']'\n+ [pyenv-sh-activate:74] '[' -z /home/zarzen/.pyenv/versions/anaconda3-4.4.0 ']'\n+ [pyenv-sh-activate:85] pyenv-virtualenv-prefix anaconda2-5.1.0\n+ [pyenv-sh-activate:105] for version in \"${versions[@]}\"\n+ [pyenv-sh-activate:106] [[ anaconda2-5.1.0 != \\a\\n\\a\\c\\o\\n\\d\\a\\2-\\5.\\1.\\0 ]]\n+ [pyenv-sh-activate:117] shell=zsh\n++ [pyenv-sh-activate:118] pyenv-prefix anaconda2-5.1.0\n+ [pyenv-prefix:13] '[' anaconda2-5.1.0 = --complete ']'\n+ [pyenv-prefix:18] '[' -n anaconda2-5.1.0 ']'\n+ [pyenv-prefix:19] OLDIFS='  \n'\n+ [pyenv-prefix:20] IFS=:\n+ [pyenv-prefix:21] export PYENV_VERSION=anaconda2-5.1.0\n+ [pyenv-prefix:21] PYENV_VERSION=anaconda2-5.1.0\n+ [pyenv-prefix:23] IFS=' \n'\n+ [pyenv-prefix:28] PYENV_PREFIX_PATHS=()\n+ [pyenv-prefix:29] OLDIFS='  \n'\n+ [pyenv-prefix:30] IFS=:\n+ [pyenv-prefix:31] for version in ${PYENV_VERSION}\n+ [pyenv-prefix:32] '[' anaconda2-5.1.0 = system ']'\n+ [pyenv-prefix:41] PYENV_PREFIX_PATH=/home/zarzen/.pyenv/versions/anaconda2-5.1.0\n+ [pyenv-prefix:43] '[' -d /home/zarzen/.pyenv/versions/anaconda2-5.1.0 ']'\n+ [pyenv-prefix:44] PYENV_PREFIX_PATHS=(\"${PYENV_PREFIX_PATHS[@]}\" \"$PYENV_PREFIX_PATH\")\n+ [pyenv-prefix:51] IFS=' \n'\n+ [pyenv-prefix:53] OLDIFS='  \n'\n+ [pyenv-prefix:54] IFS=:\n+ [pyenv-prefix:55] echo /home/zarzen/.pyenv/versions/anaconda2-5.1.0\n+ [pyenv-prefix:57] IFS=' \n'\n+ [pyenv-sh-activate:118] prefix=/home/zarzen/.pyenv/versions/anaconda2-5.1.0\n+ [pyenv-sh-activate:120] '[' -L /home/zarzen/.pyenv/versions/anaconda2-5.1.0 ']'\n+ [pyenv-sh-activate:125] [[ /home/zarzen/.pyenv/versions/anaconda3-4.4.0 == \\/\\h\\o\\m\\e\\/\\z\\a\\r\\z\\e\\n\\/.\\p\\y\\e\\n\\v\\/\\v\\e\\r\\s\\i\\o\\n\\s\\/\\a\\n\\a\\c\\o\\n\\d\\a\\2-\\5.\\1.\\0 ]]\n+ [pyenv-sh-activate:135] pyenv-sh-deactivate --force --quiet\n+ [pyenv-sh-deactivate:12] '[' -z /home/zarzen/.pyenv ']'\n+ [pyenv-sh-deactivate:16] unset FORCE\n+ [pyenv-sh-deactivate:17] unset QUIET\n+ [pyenv-sh-deactivate:19] '[' 2 -gt 0 ']'\n+ [pyenv-sh-deactivate:20] case \"$1\" in\n+ [pyenv-sh-deactivate:22] FORCE=1\n+ [pyenv-sh-deactivate:35] shift 1\n+ [pyenv-sh-deactivate:19] '[' 1 -gt 0 ']'\n+ [pyenv-sh-deactivate:20] case \"$1\" in\n+ [pyenv-sh-deactivate:25] QUIET=1\n+ [pyenv-sh-deactivate:35] shift 1\n+ [pyenv-sh-deactivate:19] '[' 0 -gt 0 ']'\n+ [pyenv-sh-deactivate:38] '[' -z /home/zarzen/.pyenv/versions/anaconda3-4.4.0 ']'\n++ [pyenv-sh-deactivate:48] basename zsh\n+ [pyenv-sh-deactivate:48] shell=zsh\n+ [pyenv-sh-deactivate:49] prefix=/home/zarzen/.pyenv/versions/anaconda3-4.4.0\n+ [pyenv-sh-deactivate:51] [[ /home/zarzen/.pyenv/versions/anaconda3-4.4.0 == \\/\\h\\o\\m\\e\\/\\z\\a\\r\\z\\e\\n\\/.\\p\\y\\e\\n\\v\\/\\v\\e\\r\\s\\i\\o\\n\\s ]]\n+ [pyenv-sh-deactivate:54] venv=anaconda3-4.4.0\n+ [pyenv-sh-deactivate:57] '[' -n '' ']'\n+ [pyenv-sh-deactivate:62] '[' -x /home/zarzen/.pyenv/versions/anaconda3-4.4.0/bin/conda ']'\n+ [pyenv-sh-deactivate:63] shopt -s nullglob\n+ [pyenv-sh-deactivate:64] case \"${shell}\" in\n+ [pyenv-sh-deactivate:72] echo 'unset CONDA_PREFIX'\n+ [pyenv-sh-deactivate:75] shopt -u nullglob\n+ [pyenv-sh-deactivate:78] '[' -n '' ']'\n+ [pyenv-sh-deactivate:98] case \"${shell}\" in\n+ [pyenv-sh-deactivate:106] cat\n+ [pyenv-sh-deactivate:114] '[' -n root ']'\n+ [pyenv-sh-deactivate:115] case \"${shell}\" in\n+ [pyenv-sh-deactivate:120] echo 'unset CONDA_DEFAULT_ENV;'\n+ [pyenv-sh-deactivate:125] case \"${shell}\" in\n+ [pyenv-sh-deactivate:135] cat\n+ [pyenv-sh-deactivate:144] case \"${shell}\" in\n+ [pyenv-sh-deactivate:154] cat\n+ [pyenv-sh-deactivate:163] case \"${shell}\" in\n+ [pyenv-sh-deactivate:168] cat\n+ [pyenv-sh-deactivate:177] case \"${shell}\" in\n+ [pyenv-sh-deactivate:186] cat\n+ [pyenv-sh-activate:137] '[' -n '' ']'\n+ [pyenv-sh-activate:141] '[' -z 1 ']'\n+ [pyenv-sh-activate:164] case \"${shell}\" in\n+ [pyenv-sh-activate:172] cat\n+ [pyenv-sh-activate:180] '[' -x /home/zarzen/.pyenv/versions/anaconda2-5.1.0/bin/conda ']'\n+ [pyenv-sh-activate:181] [[ /home/zarzen/.pyenv/versions/anaconda2-5.1.0 != \\/\\h\\o\\m\\e\\/\\z\\a\\r\\z\\e\\n\\/.\\p\\y\\e\\n\\v\\/\\v\\e\\r\\s\\i\\o\\n\\s\\/\\a\\n\\a\\c\\o\\n\\d\\a\\2-\\5.\\1.\\0 ]]\n+ [pyenv-sh-activate:184] CONDA_DEFAULT_ENV=root\n+ [pyenv-sh-activate:186] case \"${shell}\" in\n+ [pyenv-sh-activate:191] echo 'export CONDA_DEFAULT_ENV=\"root\";'\n+ [pyenv-sh-activate:196] '[' -n '' ']'\n+ [pyenv-sh-activate:213] PYENV_VIRTUALENV_DISABLE_PROMPT=\n+ [pyenv-sh-activate:214] PYENV_VIRTUALENV_DISABLE_PROMPT=\n+ [pyenv-sh-activate:216] '[' -z '' ']'\n+ [pyenv-sh-activate:217] case \"${shell}\" in\n+ [pyenv-sh-activate:224] '[' -z 1 ']'\n+ [pyenv-sh-activate:227] cat\n+ [pyenv-sh-activate:236] '[' -x /home/zarzen/.pyenv/versions/anaconda2-5.1.0/bin/conda ']'\n+ [pyenv-sh-activate:237] shopt -s nullglob\n+ [pyenv-sh-activate:238] case \"${shell}\" in\n+ [pyenv-sh-activate:246] CONDA_PREFIX=/home/zarzen/.pyenv/versions/anaconda2-5.1.0\n+ [pyenv-sh-activate:247] echo 'export CONDA_PREFIX=\"/home/zarzen/.pyenv/versions/anaconda2-5.1.0\";'\n+ [pyenv-sh-activate:252] for script in \"${prefix}/etc/profile.d\"/.sh\n+ [pyenv-sh-activate:253] echo '. \"/home/zarzen/.pyenv/versions/anaconda2-5.1.0/etc/profile.d/conda.sh\";'\n+ [pyenv-sh-activate:257] shopt -u nullglob\n```. ",
    "apapanico": "Did this fix work for people?  I am still running into this issue.  \nSpecs: MacOS Mojave, brew installed pyenv and git, bash 4.4.23.\n```\n:~$ pyenv --version\npyenv 1.2.7\n:~$ brew list | grep pyenv\npyenv\npyenv-virtualenv\npyenv-which-ext   # I tried with and without this plugin. makes no difference\n:~$ git submodule \npyenv: gettext.sh: command not found\nThe `gettext.sh' command exists in these Python versions:\n  anaconda3-5.2.0\n/usr/local/Cellar/git/2.19.1/libexec/git-core/git-sh-setup: line 93: eval_gettext: command not found\nfatal: not a git repository (or any of the parent directories): .git\n:~$ pyenv which gettext.sh\npyenv: gettext.sh: command not found\nThe `gettext.sh' command exists in these Python versions:\n  anaconda3-5.2.0\n```\nThe shim looks correct though, if gettext.sh could be found:\n[ -n \"$PYENV_DEBUG\" ] && set -x\nexport PYENV_ROOT=\"/usr/local/var/pyenv\"\nprogram=\"$(\"/usr/local/Cellar/pyenv/1.2.7/libexec/pyenv\" which \"${BASH_SOURCE##*/}\")\"\nif [ -e \"${program}\" ]; then\n  . \"${program}\" \"$@\"\nfi\nIf I uninstall the anaconda distribution and do pyenv rehash, everything works again.  So how does git find gettext.sh normally?\nA possible solution:\nI'm not too psyched about this but force linking gettext seems to do the trick\n:~$ brew install gettext\n:~$ brew link --force gettext\nA better solution:\nDo what homebrew suggests instead\n:~$ echo 'export PATH=\"/usr/local/opt/gettext/bin:$PATH\"' >> ~/.bash_profile. ",
    "mdippery": "Almost exactly the same bug is described in rbenv#868 as well.\n. I'm not sure that rbenv#868 actually works properly, since it won't actually break out of the loop.\n. Actually, I take that back. I can update it so it looks the same as rbenv#868, except that rbenv#868 was never merged into rbenv, either, so there's not actually a conflict.\n. ",
    "mikegleasonjr": "I have this wrong output also when running ansible from source. ansible-playbook is an alias of ansible in the same directory.\n. ",
    "jonganc": "~~How about simply changing cd \"${path%/*}\" to [[ \"$path\" = */* ]] && cd \"${path%/*} (i.e. only change directory if path is not in the current directory)?~~\nI was looking at @blueyed's original commit. His rbenv suggestion works fine.. If I understood the rbenv discussion, mislav didn't think this was a relevant use case. On the pyenv side at least, I should point out that the bug shows up in the last few releases of ansible (i.e. note that in the bin directory, most executables are symlinks to ansible), so it's not some obscure issue.. Note: this is addressed (though not fixed/merged) in #689. \nThere, they point to a workaround: run ./configure && make in pyenv's src dir (i.e. $PYENV_ROOT/src, usually ~/.pyenv/src), which will generate libexec/pyenv-realpath.dylib and work around the issue.. ",
    "parthgala": "Okay, I am not sure what is wrong with my machine but it works on another machine so closing this one.\nThanks !\n. ",
    "wwitzke": "I am experiencing exactly this same issue. I am using pyenv 1.1.3 on Ubuntu 16.04. Here are the commands I run to set up the environment, and the resulting output:\n```\nusername@host:~/test$ PYTHON_CONFIGURE_OPTS=\"--enable-shared\" pyenv install 3.6.2\nDownloading Python-3.6.2.tar.xz...\n-> https://www.python.org/ftp/python/3.6.2/Python-3.6.2.tar.xz\nInstalling Python-3.6.2...\nInstalled Python-3.6.2 to /home/username/.pyenv/versions/3.6.2\nusername@host:~/test$ pyenv local 3.6.2\nusername@host:~/test$ pip install wxpython\nCollecting wxpython\n  Downloading wxPython-4.0.0b1.tar.gz (50.6MB)\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 50.6MB 42kB/s \nCollecting six (from wxpython)\n  Downloading six-1.10.0-py2.py3-none-any.whl\nInstalling collected packages: six, wxpython\n  Running setup.py install for wxpython ... done\nSuccessfully installed six-1.10.0 wxpython-4.0.0b1\nusername@host:~/test$ python\nPython 3.6.2 (default, Aug  4 2017, 12:54:04) \n[GCC 5.4.0 20160609] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n\n\nimport wx\nTraceback (most recent call last):\n  File \"\", line 1, in \n  File \"/home/username/.pyenv/versions/3.6.2/lib/python3.6/site-packages/wx/init.py\", line 17, in \n    from wx.core import \n  File \"/home/username/.pyenv/versions/3.6.2/lib/python3.6/site-packages/wx/core.py\", line 12, in \n    from ._core import \nImportError: /home/username/.pyenv/versions/3.6.2/lib/python3.6/site-packages/wx/_core.cpython-36m-x86_64-linux-gnu.so: symbol _ZNK8wxWindow7IsShownEv, version WXU_3.0 not defined in file libwx_gtk2u_core-3.0.so.0 with link time reference\n```\n\n\n\n\"--enable-shared\" is required to get wxPython to compile.\n. This fixes the problem for me. Thanks!. ",
    "davidroeca": "@wwitzke came across the same issue, and found one \"fix\" with $LD_LIBRARY_PATH.\n```bash\n$ echo \"3.6.2\" > .python-version # assuming you set the PYTHON_CONFIGURE_OPTS=\"--enable-shared\" in your pyenv install\n$ python3\nPython 3.6.2 (default, Sep 18 2017, 14:11:53) \n[GCC 5.4.0 20160609] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n\n\nimport wx\nimport wx\nTraceback (most recent call last):\n  File \"\", line 1, in \n  File \"/home/user/src/myproject/venv/lib/python3.6/site-packages/wx/init.py\", line 17, in \n    from wx.core import \n  File \"/home/user/src/myprojectvenv/lib/python3.6/site-packages/wx/core.py\", line 12, in \n    from ._core import \nImportError: libwx_gtk2u_core-3.0.so.0: cannot open shared object file: No such file or directory\n```\n\n\n\nIt's solved by doing the following:\n```bash\n$ LD_LIBRARY_PATH=~/.pyenv/versions/3.6.2/lib/python3.6/site-packages/wx python3\nPython 3.6.2 (default, Sep 18 2017, 14:11:53) \n[GCC 5.4.0 20160609] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n\n\nimport wx\n```\n\n\n\nEDIT: Also see https://github.com/wxWidgets/Phoenix/blob/e13273c5d939d993abf2a2649e90b3ea0d39382c/packaging/README-bdist.txt#L38-L57. ",
    "kxxoling": "There's a lot of related issues here, but none of them fixed my problem. I reinstalled sqlite3 with brew, and this is what brew suggests:\n```\nHomebrew has detected an existing SQLite history file that was created\nwith the editline library. The current version of this formula is\nbuilt with Readline. To back up and convert your history file so that\nit can be used with Readline, run:\nsed -i~ 's/\\040/ /g' ~/.sqlite_history\nbefore using the sqlite command-line tool again. Otherwise, your\nhistory will be lost.\nThis formula is keg-only, which means it was not symlinked into /usr/local,\nbecause macOS provides an older sqlite3.\nIf you need to have this software first in your PATH run:\n  echo 'export PATH=\"/usr/local/opt/sqlite/bin:$PATH\"' >> ~/.zshrc\nFor compilers to find this software you may need to set:\n    LDFLAGS:  -L/usr/local/opt/sqlite/lib\n    CPPFLAGS: -I/usr/local/opt/sqlite/include\nFor pkg-config to find this software you may need to set:\n    PKG_CONFIG_PATH: /usr/local/opt/sqlite/lib/pkgconfig\n```\nSo I did:\n10706  sed -i~ 's/\\\\040/ /g' ~/.sqlite_history\n10707  export LDFLAGS=\"-L/usr/local/opt/sqlite/lib\"\n10708  export CPPFLAGS=\"-I/usr/local/opt/sqlite/include\"\n10709  pyenv install 2.7.14 # It's OK now.\nI guess line 10706 is not necessary if you don't care your sqlite history.. ",
    "decentral1se": "What I wanted to address with this issue is that the we should create a better error message for people that forget to eval \"$(pyenv init -)\". It's a little strange to have a missing command on a CLI tool just because of that. No?\n. ",
    "julianharty": "I agree it'd be helpful for  pyenv shell to provide some advice on what to do in order to enable the command to work correctly.. ",
    "Carreau": "Thanks @yyuu ; is is worth for me to try to open an issue on pypa/virtualenv ? And maybe on core CPython ?\n. ",
    "yan12125": "Seems similar: https://github.com/pypa/virtualenv/issues/962\n. Well, in https://github.com/travis-ci/travis-ci/issues/6613 Travis CI people said that pyenv should be updated before they can use Python 3.6. Seems they use different approaches for PyPy and CPython. Thanks @Samureus for that info!\n. > I do not see any from the Travis CI organization in travis-ci/travis-ci#6613 saying that pyenv should be updated, could you elaborate?\nHere it is: https://github.com/travis-ci/travis-ci/issues/6613#issuecomment-252540169\nAnd according to upstream PyPy, 5.5.0 is still in alpha/beta stage [1], so closing.\n[1] https://bitbucket.org/pypy/pypy/issues/2431/is-there-a-pypy33-550-release\n. ",
    "jacebrowning": "@joshfriend Yes.\n. I am still experiencing the issue after updating command-line tools:\n```\n$ xcode-select --version\nxcode-select version 2345.1.\n$ cc --version\nApple LLVM version 8.0.0 (clang-800.0.38)\nTarget: x86_64-apple-darwin16.0.0\nThread model: posix\nInstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin\n``\n. I am unable to reproduce this error on a new machine with macOS 10.12.1.\n.pyenv` is not used to run scripts directly.\nInstall a version of python:\npyenv install 3.6.0\nMake that the global version:\npyenv global 3.6.0\nRun your script with python:\npython ex01.py. ",
    "kmod": "This looks cool!  FYI we improved our virtualenv compatibility post-0.5.1, so now we don't need a custom virtualenv script anymore.  We also changed some of our output directories to match CPython (ie we now use lib/python2.7/site-packages instead of just site-packages).  And the new version of Cython should have Pyston support, and hopefully the next version of numpy will use the new version of Cython, which was the reason we couldn't use the default numpy.\nSo hopefully soon using Pyston will become much easier :)\n. ",
    "ansvver": "I got the same issue too.\n```\n[dummy@cp01-dummy-dev.epc.xxx.com ~]$ pyenv install 3.5.2\n/home/dummy/.pyenv/plugins/python-build/bin/python-build: line 277: printf: -v: invalid option\nprintf: usage: printf format [arguments]\n/home/dummy/.pyenv/plugins/python-build/bin/python-build: line 279: return: : numeric argument required\nbasename: too few arguments\nTry 'basename --help' for more information.\nDownloading ...\nBUILD FAILED (CentOS 4.3 using python-build 1.0.2-48-g41606c4)\n```\nAnyone has hint?\n. ",
    "haroldrandom": "@johnseekins What does EL4 and EL5 mean? What do they stand for?. @johnseekins you are right, my OS is based on CentOS 4 and it's hard to update the OS version because of company restriction, so I'm here for help.\nMaybe it's not worth to solve this problem whether it takes quiet a lot of work or not, I think.. @johnseekins Not yet, I think it's time to move on, let this problem go and do something worthy. \nI have turned into other tech for help instead of using pyenv.. ",
    "denfromufa": "but why does pyenv complains that pyenv: version2.7.12' not installed` ?\n. ok, this osx had already pretty old pyenv, but builds still failing with another error after updating pyenv with brew:\nhttps://travis-ci.org/pythonnet/pythonnet/jobs/163323673#L603\n==> Installing pyenv\n==> Downloading https://github.com/yyuu/pyenv/archive/v1.0.2.tar.gz\n==> Downloading from https://codeload.github.com/yyuu/pyenv/tar.gz/v1.0.2\n==> Caveats\nTo use Homebrew's directories rather than ~/.pyenv add to your profile:\n  export PYENV_ROOT=/usr/local/var/pyenv\nTo enable shims and autocompletion add to your profile:\n  if which pyenv > /dev/null; then eval \"$(pyenv init -)\"; fi\n==> Summary\n\ud83c\udf7a  /usr/local/Cellar/pyenv/1.0.2: 521 files, 2.2M, built in 3 seconds\nDownloading Python-2.7.12.tar.xz...\n-> https://www.python.org/ftp/python/2.7.12/Python-2.7.12.tar.xz\nInstalling Python-2.7.12...\nInstalled Python-2.7.12 to /Users/travis/.pyenv/versions/2.7.12\nerror: can't create or remove files in install directory\nThe following error occurred while trying to add or remove files in the\ninstallation directory:\n    [Errno 13] Permission denied: '/Library/Python/2.7/site-packages/test-easy-install-17670.pth'\nThe installation directory you specified (via --install-dir, --prefix, or\nthe distutils default setting) was:\n    /Library/Python/2.7/site-packages/\nPerhaps your account does not have write access to this directory?  If the\ninstallation directory is a system-owned directory, you may need to sign in\nas the administrator or \"root\" account.  If you do not have administrative\naccess to this machine, you may wish to choose a different installation\ndirectory, preferably one that is listed in your PYTHONPATH environment\nvariable.\nFor information on other options, you may wish to consult the\ndocumentation at:\n  https://pythonhosted.org/setuptools/easy_install.html\nPlease make the appropriate changes for your system and try again.\nThe command \"if [[ $TRAVIS_OS_NAME == 'osx' ]]; then brew update; brew install mono; brew install pyenv; brew upgrade pyenv; pyenv install $PYTHON; pyenv local $PYTHON; easy_install pip; fi\" failed and exited with 1 during .\nYour build has been stopped.\n. ",
    "Croydon": "Yes, please! It's unlikely that the patch version matters for us too much, but if it should at some point then we would need to update it in > 400 repositories. \nPlease allow to install the latest patch version with something like\n\npyenv 3.7. \n",
    "DAZHANBA": "hey, have you solved that? Same issue occured to me.\n. ",
    "cancan101": "When I reinstalled python, I get:\nTraceback (most recent call last):\n  File \"/Users/alex/.pyenv/versions/2.7.12/bin/virtualenv\", line 7, in <module>\n    from virtualenv import main\n  File \"/Users/alex/.pyenv/versions/2.7.12/Python.framework/Versions/2.7/lib/python2.7/site-packages/virtualenv.py\", line 16, in <module>\n    import base64\n  File \"/Users/alex/.pyenv/versions/2.7.12/Python.framework/Versions/2.7/lib/python2.7/base64.py\", line 9, in <module>\n    import struct\n  File \"/Users/alex/.pyenv/versions/2.7.12/Python.framework/Versions/2.7/lib/python2.7/struct.py\", line 1, in <module>\n    from _struct import *\nImportError: dlopen(/Users/alex/.pyenv/versions/2.7.12/Python.framework/Versions/2.7/lib/python2.7/lib-dynload/_struct.so, 2): Symbol not found: _PyUnicodeUCS2_AsEncodedString\n  Referenced from: /Users/alex/.pyenv/versions/2.7.12/Python.framework/Versions/2.7/lib/python2.7/lib-dynload/_struct.so\n  Expected in: flat namespace\n in /Users/alex/.pyenv/versions/2.7.12/Python.framework/Versions/2.7/lib/python2.7/lib-dynload/_struct.so\n. Looks like a full uninstall and then reinstall fixed.\n. ",
    "pwalsh": "Just for context, I've got a history of around 120 successful builds on circleci (private repo, sorry), and the first fail from this error was on 4th October (2 days ago).\n. Alpine changed their version of patch that comes with build-base. Installing patch explicitly gives a fully featured patch.\n. ",
    "scop": "Nah, it made my day :)\n. See #920 . Rebased; could you have a look at applying this? Thanks!. https://github.com/rbenv/ruby-build/pull/1150. Ok, micropython 1.9.3 moved to #1033. In order to test this implementation, here is its git tag based install recipe:\ninstall_git micropython-1.9.3 https://github.com/micropython/micropython \"tag v1.9.3\" micropython. Now tests for tar.xz support.. Fetching +tagname:tagname doesn't work for tags, which is what python-build does with the refs. git fetch man page documents tag <tag> to fetch up to tag, and this is what this patch accomplishes.\nGranted, it doesn't look at all clean to me and I thought it would've been easier to implement, but this was the smallest change I got working. (Tested with a bunch of micropython fetches and builds.). Done.. ",
    "keevee09": "... the solution:\n$ /usr/local/Cellar/python3/3.5.2_3/bin/python3 -m pip install --upgrade --force-reinstall pip\n$ pip3 list and other pip3 commands now work as expected.\n. Yes. I feel suitably chagrined :)\n. ",
    "medington": "FYI, this appears to work for Python2 installed via Homebrew as well. In my case pip got busted when I upgraded from Python 2.7.13 to Python 2.7.14. I used this to fix it:\n/usr/local/Cellar/python/2.7.14/bin/python2 -m pip install --upgrade --force-reinstall pip. ",
    "Unliklll": "\n\u6211\u7528conda\u88c5\u7684python3.6 \u53c8\u6210\u529f\u5b89\u88c5\u4e86pip3\uff0c\u8bf7\u95ee\u4e00\u4e0b\uff0c\u54ea\u4f4d\u5927\u795e\u77e5\u9053\u9047\u5230\u8fd9\u4e2a\u95ee\u9898\u8be5\u600e\u4e48\u89e3\u51b3\uff1f\uff1f. ",
    "lsbardel": "It looks like pyenv compiles 3.7 rather than 3.6-dev\nFrom the logs\n...\nCompiling '/Users/lsbardel/.pyenv/versions/3.6-dev/lib/python3.7/...\n. yes, as I mentioned above, this issue is with the pyenv 1.0.2 release.\n. ",
    "anentropic": "Answer was to delete the virtualenv and recreate using pip install --no-cache-dir -r requirements.txt the --no-cache-dir being the vital part\nSeems that was needed to force pip to recompile psycopg2 or something\n. I think I have this issue\nI have installed powerline-shell in my system python\nEvery time I activate a pyenv virtualenv (or pip install/uninstall a package in the venv after activating) it recreates a useless shim file which causes the error pyenv: powerline-shell: command not found and breaks my shell prompt\nI then have to locate the shim and delete it for everything to work again\n(alternatively, installing it into my venv also works, but I really don't want to introduce it as a project dependency everywhere)\nShould I have installed powerline-shell differently?  I would like it to work when I have no venv active as well as when I do.\nThis is so annoying, any advice or workaround much appreciated. ",
    "MikeDacre": "Does anyone know why exec is replaced by exec /home/dacre/.pyenv/libexec/pyenv exec and why this breaks git?\n. In case it helps, if I set PYENV_DEBUG, the following lines are repeated forever to the shell:\nhttps://gist.github.com/MikeDacre/4852ca4dc352a20200138db00bfdc3c3\n. I have confirmed that this is an issue with one of the plugins. I erased pyenv completely and started again with the installer, I already installed all of my environments, and the git commands still work fine. My current plugins are:\npyenv-doctor/  pyenv-installer/  pyenv-update/  pyenv-virtualenv/  pyenv-which-ext/  python-build/\nMy old ones were:\npyenv-alias/  pyenv-default-packages/  pyenv-register/  pyenv-update/  pyenv-virtualenv/  pyenv-which-ext/  python-build/\nI haven't narrowed which one causes the issue yet, I do know that adding the shims folder to the PATH was the part of the init that caused the problem to happen.\n. So it turns out this isn't an issue with the plugins, it is actually with the anaconda environment. I modify my anaconda environment, including installing a number of system packages (like gsl). Somewhere in that process, not sure where, the anaconda environment adds something to the shims that causes this bug, as well as a cluster of related bugs.\nI am not sure how to figure out which shim is causing the issue, do any of you know how I can debug that?\n. ",
    "michaelmior": "I've seen a similar issue with miniconda. The gettext wrapper is broken in my case.. ",
    "sat1993": "wget http://mirrors.sohu.com/python/3.4.0/Python-3.4.0.tar.xz -P ~/.pyenv/cache/\nexport PYENV_ROOT=$HOME/.pyenv\npyenv install 3.4.0\nMacOS. when you install pyenv\n```\nTo use Homebrew's directories rather than ~/.pyenv add to your profile:\n  export PYENV_ROOT=/usr/local/var/pyenv\nTo enable shims and autocompletion add to your profile:\n  if which pyenv > /dev/null; then eval \"$(pyenv init -)\"; fi\n```\nthen,\nwget  http://mirrors.sohu.com/python/3.4.0/Python-3.4.0.tar.xz -P $PYENV_ROOT/cache/\npyenv install 3.4.0\n. ",
    "ashank2010": "@sat1993 Thanks a lot. ",
    "onmyway133": "I get this problem as well, pyenv 1.2.4-2-gdad0fc7, macOS 10.13 and I have zlib installed (zlib 1.2.11)\nEdited, I have to xcode-select --install and pyenv install 3.5.0 works. ",
    "kelbyers": "@joshfriend are you running with Sierra?. I was not asking for you to keep python 2.6 buildable. I was asking if it was possible to copy an already built pyenv 2.6 from another mac. Again, you have closed my issue without even attempting to answer what my real question is.. ",
    "v1v": "I've seen the same behaviour... \n``` bash\nDownloading Python-3.4.3.tar.xz...\n-> https://www.python.org/ftp/python/3.4.3/Python-3.4.3.tar.xz\nInstalling Python-3.4.3...\nInstalled Python-3.4.3 to /Volumes/jenkins/.pyenv/versions/3.4.3\npyenv global system 3.4.3 \npyenv versions\n* system (set by /Volumes/jenkins/.pyenv/version)\n  2.7.11\n  3.4.3\n  3.5.2\n```\n``` bash\nsto-osx-tech11:~ midas$ python3.4 -V\npyenv: python3.4: command not found\nThe `python3.4' command exists in these Python versions:\n  3.4.3\n```\nAny ideas?\n. ",
    "jgeerds": "Same here. Python 3.3 is also affected by this bug.\nEdit: Sorry my fault. It works!. ",
    "karolhor": "It looks like this is same issue like mine: #911. @andrew-christianson I haven't set any PYTHON_CONFIGURE_OPTIONS variable but only used default options. After creating this issue I haven't check if this error still exists. Now I have pyenv from newest master branch (commit a2d51328eeef85b108303a31d90a8b0ba923a8ef) and it works! \nI've tested installing versions:\n- pypy2-5.7.1,\n- pypy2.7-6.0.0,\n- pypy3.5-6.0.0\nI've also tested installation with PYTHON_CONFIGURE_OPTS=\"--enable-framework\" and it fails like in #1155.\nI think this issue can be close because defaults works and fix issues in #1155 . ",
    "joeroback": "$ pwd\n/home/jroback/.pyenv/plugins/pyenv-update\n$ git remote -v\norigin  https://github.com/yyuu/pyenv-update.git (fetch)\norigin  https://github.com/yyuu/pyenv-update.git (push)\nI have installed pyenv using pyenv-installer via curl and it already seems to have the plugin.... when i do name-rev, i get weird results.\n$ git name-rev --name-only HEAD\ntags/v1.0.4^0\nif i do the same on my macOS install, i get master\n$ git name-rev --name-only HEAD\nmaster\nI guess I could just manually move the master branch, but fwiw, this is a vanilla install on a fresh install of ubuntu, nothing weird.. This is happening again for me with v1.0.6, HEAD is point to the tag v1.0.6, not master... Vanilla install via pyenv-installer... On a fresh install of macOS 10.12.2\n```\nbash-4.4$ curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100  2099  100  2099    0     0   5148      0 --:--:-- --:--:-- --:--:--  5627\nCloning into '/Users/jroback/.pyenv'...\nremote: Counting objects: 546, done.\nremote: Compressing objects: 100% (424/424), done.\nremote: Total 546 (delta 212), reused 248 (delta 38), pack-reused 0\nReceiving objects: 100% (546/546), 245.79 KiB | 0 bytes/s, done.\nResolving deltas: 100% (212/212), done.\nCloning into '/Users/jroback/.pyenv/plugins/pyenv-doctor'...\nremote: Counting objects: 11, done.\nremote: Compressing objects: 100% (8/8), done.\nremote: Total 11 (delta 1), reused 6 (delta 1), pack-reused 0\nUnpacking objects: 100% (11/11), done.\nCloning into '/Users/jroback/.pyenv/plugins/pyenv-installer'...\nremote: Counting objects: 17, done.\nremote: Compressing objects: 100% (15/15), done.\nremote: Total 17 (delta 2), reused 10 (delta 0), pack-reused 0\nUnpacking objects: 100% (17/17), done.\nCloning into '/Users/jroback/.pyenv/plugins/pyenv-update'...\nremote: Counting objects: 7, done.\nremote: Compressing objects: 100% (4/4), done.\nremote: Total 7 (delta 1), reused 5 (delta 1), pack-reused 0\nUnpacking objects: 100% (7/7), done.\nCloning into '/Users/jroback/.pyenv/plugins/pyenv-virtualenv'...\nremote: Counting objects: 54, done.\nremote: Compressing objects: 100% (48/48), done.\nremote: Total 54 (delta 11), reused 16 (delta 0), pack-reused 0\nUnpacking objects: 100% (54/54), done.\nCloning into '/Users/jroback/.pyenv/plugins/pyenv-which-ext'...\nremote: Counting objects: 10, done.\nremote: Compressing objects: 100% (6/6), done.\nremote: Total 10 (delta 1), reused 5 (delta 0), pack-reused 0\nUnpacking objects: 100% (10/10), done.\nbash-4.4$ cd .pyenv\nbash-4.4$ git status\nmaster...origin/master\nbash-4.4$ git name-rev HEAD\nHEAD tags/v1.0.6^0\nbash-4.4$ pyenv update\nUpdating /Users/jroback/.pyenv...\npyenv-update: /Users/jroback/.pyenv is not on master branch.  <<< ERROR\nUpdating /Users/jroback/.pyenv/plugins/pyenv-doctor...\nFrom https://github.com/yyuu/pyenv-doctor\n * branch            master     -> FETCH_HEAD\nAlready up-to-date.\nUpdating /Users/jroback/.pyenv/plugins/pyenv-installer...\nFrom https://github.com/yyuu/pyenv-installer\n * branch            master     -> FETCH_HEAD\nAlready up-to-date.\nUpdating /Users/jroback/.pyenv/plugins/pyenv-update...\nFrom https://github.com/yyuu/pyenv-update\n * branch            master     -> FETCH_HEAD\nAlready up-to-date.\nUpdating /Users/jroback/.pyenv/plugins/pyenv-virtualenv...\nFrom https://github.com/yyuu/pyenv-virtualenv\n * branch            master     -> FETCH_HEAD\nAlready up-to-date.\nUpdating /Users/jroback/.pyenv/plugins/pyenv-which-ext...\nFrom https://github.com/yyuu/pyenv-which-ext\n * branch            master     -> FETCH_HEAD\nAlready up-to-date.\nbash-4.4$\n```. Literally booted a fresh AWS Ubuntu instance and did a basic clone only to see HEAD -> tags/v1.0.6^0 instead of master.\n```\ngit clone https://github.com/yyuu/pyenv.git\nCloning into 'pyenv'...\nremote: Counting objects: 14334, done.\nremote: Compressing objects: 100% (13/13), done.\nremote: Total 14334 (delta 2), reused 0 (delta 0), pack-reused 14320\nReceiving objects: 100% (14334/14334), 2.55 MiB | 0 bytes/s, done.\nResolving deltas: 100% (9865/9865), done.\ncd pyenv\ngit name-rev HEAD\nHEAD tags/v1.0.6^0\n```\npyenv update will then fail with pyenv-update: /home/ubuntu/.pyenv is not on master branch since git name-rev --name-only HEAD should be returning master, not tags/v1.0.6^0. ",
    "bkbncn": "I got a \"solution\", even didn't fix it actually, just bypass it.\nrm -rf ~/.pyenv/.git/refs/tags\nthere will be no tag refs afterward, and pyenv-update can verify branch. \nActually #952 points out a real solution. . Thanks. I think we are not talking about the same question, my question actually is not an issue, it is to create a release include anaconda 4.3.1.  current latest release 1.0.9 includes up to anaconda 4.3.0.\nand when I created this issue, #876 was not merged, now already merged, it is should be safe to create a new release. @yyuu @Samureus . Thanks @yyuu . There is a \"solution\" to bypass it, deleting the directory /.git/refs/tags under your pyenv.\nYour solution is good for git 1.7+, but someone may still use older git.\nAnd it does not work in a 'detached HEAD' state, if after using git checkout, repo will be 'detached HEAD' state.\nAlso I have a feeling, pyenv-update is deprecated, just as some other pyenv plugins, since in README here, the \"official\" way to upgrade is git pull or git checkout.\nI know there are still a lot of people using pyenv-update, including me, to fix the error, I think the \"stupid\" git branch with grep or sed is safer.\nThere are more details about getting current branch name.\nhttp://stackoverflow.com/questions/6245570/how-to-get-the-current-branch-name-in-git. ",
    "arcivanov": "This happens on CentOS latest docker with git 1.8.3.1. Looks like Git < 2.0 is the cause.. The workaround is CFLAGS=\"-O0 -ggdb\" pyenv install -kg <version>. ",
    "cmcginty": "Pydoc ignores current pyenv-virtualenv\nSeeing the same thing here. pydoc command in a virtualenv with python 3.4.5 uses the system python 2.7.12.\n$ python -V\nPython 3.4.5\n$ pydoc sys |grep '^\\s\\+version ='\nversion = '2.7.13 (default, Dec 17 2016, 23:03:43) \\n[GCC 4.2.1 Compat...\n. I have two different macs with the same config and only 1 exhibits this issue.\nThe slowdown only happens after: eval \"$(pyenv virtualenv-init -)\"\nhttps://github.com/pyenv/pyenv-virtualenv/issues/132. I have a fix I made against pyenv/pyenv-virtualenv#259 and also opened pyenv#1153.. If you run pyenv rehash does it fix your shims?. Just to clarify that removing the shebang lines essentially change the bash sub-calls from $(SCRIPT) to $(source SCRIPT). In the later case the shebang line is ignored if it exists.\nIt might be clearer to change all the internal calls to $(source SCRIPT) but this is a much larger modification to implement for the same effect. . I think there is some confusion here. When you run a script from your prompt without a shebang line then the result is not the same as when calling with $(). In former case bash uses a default shebang line of /bin/sh for your script. This is why you get a new pid every time in your test case. You can also verify this by adding the following to your test.sh file.\nps | grep \"[t]est.sh\"\n\n. > Isn't this missing the actual change to use source instead then, too?\nWhen I was testing both methods resolved the perf issues, but seeing your test it looks like the methods are not equivalent.\n\nOr are you saying that you get a performance boost because /bin/sh is used?\n\nNo, for some reason remove the shebang resolve the issue. Now that I know it is related to Carbon Black, that might help explain the edge case. It's not that creating the sub-process is slow, but how Carbon Black hooks into the sub-system and intercepts the process. \n\nI.e. the same PID is only used when using source t.sh.\n\nYes, so this seems like the proper solution then. However it's a larger change and I wasn't sure if this PR was going to be accepted at the time and I was also trying alternatively resolve with a Carbon Black change / fix.\n. https://www.carbonblack.com Enterprise virus/malware scanner.. correct. ",
    "rsd": "Try this:\nalias pydoc=\"python -m pydoc\"\nhttps://notoriousno.blogspot.com/2016/09/python-alias-commands-that-play-nice.html. ",
    "Firemango": "I'm having a very similar, if not the same issue:\n```\n\npyenv versions\n  system\n* 3.5.1 (set by PYENV_VERSION environment variable)\n\n\n\npython -V\nPython 2.7.12\n```\n\nI do have a script at /usr/local/var/pyenv/shims/python, which when run manually starts python 3.5.1. ",
    "trueinviso": "At /usr/local/var/pyenv/shims/ I have:\npython3\npython3-config\npython3.5\npython3.5-config\npython3.5m\npython3.5m-config\nAs you can see there is no python here.  pyenv rehash has no effect :(.. I'm new to python, so it looks like my problem was not realizing that to run python 3 from the command line I needed to use python3 not python, doh!  Thanks for the help.. Maybe not true, but there is no python script in my shims directory for some reason.. ",
    "prclibo": "I know this is outdated. But just met the similar issue in pyenv 1.2.9, OSX Mojave.\n~/.pyenv/shims contains python3 and python3.6 but no python.\n@trueinviso any progress on this problem?. ",
    "fubarhouse": "I got around this problem last week with the use of vitualenvs, and now I fully recommend them!\nSee https://github.com/yyuu/pyenv-virtualenv for more information.. Try setting a global version in PyCharm via virtualenv, and remove the .idea folder from the project, and invalidate caches and restart.\nBeyond this I can't help.. Screenshots of the PyCharm Python selection preferences panel would also be useful to help you.. @mikelikesbikes,\nHave you seen this -> https://youtrack.jetbrains.com/issue/PY-21787\nAlso, would it be an option to flag this with JetBrains?. Thanks, that at least gives me a starting point.. ",
    "hung-phan": "Same issue even with pyenv-virtualenv. Tried, still doesn't work. I think the problem is:\nhttps://github.com/yyuu/pyenv-virtualenv/issues/194. ",
    "adobeDan": "The issue doesn't have to do with whether or not virtualenv is available.  It has to do with the fact that virtualenvs created by pyenv for python 3.x do not contain hard links to the python binary, they contain symlinks.  PyCharm, sadly, goes through symlinks to the python interpreter that contains them.  I've submitted a PyCharm issue about this.  It would be nice if there were a way to get pyenv to use hardlinks rather than symlinks in virtualenvs.. ",
    "piotr-dobrogost": "\nPyCharm, sadly, goes through symlinks to the python interpreter that contains them.\n\nThis is regression in PyCharm 2016.3 \u2013 https://youtrack.jetbrains.com/issue/PY-21787 \u2013 and has nothing to do with pyenv.\n. This is issue raised against documentation. Please be more careful next time you're running through issues. Thanks.. ",
    "arischow": "add '--copies'\npyenv virtualenv <specific python version> <environment name> --copies. ",
    "fr0der1c": "Same issue. Seems it is caused by masOS native file chooser.\nThe good news is: PyCharm 2017.1 started using their own file chooser instead of macOS native chooser again, and this bug has been fixed.\nFor older version of PyCharm, as a workaround, disable Help | Find Action | \"registry\" | \"ide.mac.file.chooser.native\".. ",
    "motivic": "@Reafdaw Isn't this resolved by the plugin: https://github.com/pyenv/pyenv-which-ext\nAt least it fixed this very problem for me.. ",
    "fny": "Can someone please merge that extension into pyenv? I see no reason to not have this as a default.. @amitmangalvedkar  You need to install another pyenv package: https://github.com/pyenv/pyenv-which-ext\nBy default, pyenv doesn't look beyond itself for other binaries. I feel like its wiser to perhaps make this an option rather than a default.. @mbdevpl It takes roughly an hour to build. Is there anyway to submit a prebuilt binary for PyEnv or have PyEnv make use of the Homebrew binaries?. ",
    "amitmangalvedkar": "Is this resolved? I am also facing this issue and I am not sure which other basic commands have got 'over-ridden'.. ",
    "shoichiaizawa": "As for the clear command, I added it to the so-called blacklist, whose listed items are ignored and not to be created its shims when installing Anaconda anew. Please see the comment by @yyuu regarding this issue.\nOtherwise, as other people mentioned, the pyenv/pyenv-which-ext plugin should deal with this phenomenon (though I have never used this).\nAs for the user installed functions you mentioned, I am not sure \ud83d\ude22. I am experiencing some bug that I am not sure what is caused by.\nUp until now, I have been using the Homebrew version of pyenv, and since I wanted to make this PR, I decided to use pyenv with the manual git checkout.\nAfter adding the two files (anaconda2-5.0.0 and anaconda3-5.0.0) to the python-build directory, firstly I installed anaconda3-5.0.0 followed by 3.6.2 and 2.7.14. These python versions were installed in this order.\nThe installations for those three versions succeeded but I encountered an error when I changed the Python global version to 3.6.2 or 2.7.14. And with 3.6.2 or 2.7.14 selected, when I ran some commands generating coloured output, it got greyed out, except for using the firstly installed anaconda3-5.0.0, with which output was coloured as expected; here is the error:\nRunning nvm ls causes pyenv: tput: command not found:\nHere is an expected output:\n\nHere is a greyed output:\n\nRunning archey command causes the apple logo in grey instead of 5 colours:\nHere is an expected output:\n\nHere is a greyed output:\n\n~This did not happen in the Homebrew version of pyenv.~\nI am not sure this is reproducible or unique to my dev environment \ud83d\ude22 \nAny thoughts regarding this?. Hmm, it seems that I have the same problem for the Homebrew version of pyenv \ud83d\ude22 And the order of the Python version installations did not matter in the end, but this exact problem occurred only for anaconda2-5.0.0 and anaconda3-5.0.0. With anaconda3-4.4.0 set as global, I did not encounter this whatsoever.\nI suspect that there is something wrong with the latest Anaconda distributions but I am not certain of it.\nI hope I am clear enough to you with all the explanations I made.. @joshfriend \nAh, I just wanted to say that I was trying to make exactly the same commits around the same time you made these commits. I just wanted to tell you that while I have not tested it with the files you added, I did locally test it with the files I added by myself and they have exactly the same lines as your versions.\nI only tested for Anaconda3 5.0.1 and it was installable. I have dropped my versions, and am waiting for your versions going to the master branch. I sit back and wait for @yyuu or someone else to review this PR \ud83d\ude03 \n\nApart from the files you committed, I have added Miniconda2 4.3.30 and Miniconda3 4.3.30; please see my PR (pyenv/pyenv#1022) \ud83d\ude4f . I pulled the latest master and try installing anaconda3-5.0.1 and it was successful without encountering the \"too many open files in system\" error you mentioned.\nIt seems that there are some new executables have been added for anaconda[23]-5.0.1 compared to the previous version:\n```sh\ndiff <(ls ~/.pyenv/versions/anaconda3-5.0.0/bin) <(ls ~/.pyenv/versions/anaconda3-5.0.1/bin)\n15a16,26\n\nbunzip2\nbzcat\nbzcmp@\nbzdiff\nbzegrep@\nbzfgrep@\nbzgrep\nbzip2\nbzip2recover\nbzless@\nbzmore*\n```\n\nI see this is why this 737fa7c workaround was needed.\nI am not sure about the \"too many open files in system\" error you have encountered. I hope this is resolved sooner.. ",
    "martimlobao": "This has been open for more than two years, are there any updates?\nYou can keep adding commands to the blacklist, but this feels like continually putting band-aids on a problem that should be fixed at its root.\nRecently, I also ran into the problem of jupyter (installed via Homebrew) no longer working as soon as I created a virtualenv which has jupyter installed.\n```\n$ jupyter\npyenv: jupyter: command not found\nThe `jupyter' command exists in these Python versions:\n  miniconda3-latest\n```\nThe pyenv-which-ext package works, but I don't see why this isn't baked in to pyenv.. ",
    "oscarmorrison": "@yyuu I have updated my request, it was incorrectly edited.\nKeen to know if this is something pyenv team would consider. ",
    "Jeremias-Brand": "This seems like a similar problem I reported here:\nhttps://github.com/yyuu/pyenv/issues/772\nWould be great if someone could figure out what is wrong here.. Apparently this plugin to pyenv solves the problem:\nhttps://github.com/pyenv/pyenv-which-ext\nI don't know of any manual. I would gladly read it if there is one. The readme is not very detailed. . ",
    "umichfan1": "Okay, I did figure one thing out: if I comment lines defining PYTHONPATH, LD_LIBRARY_PATH, C_INCLUDE_PATH, and CPLUS_INCLUDE_PATH in my .bashrc file, yum starts working again.. ",
    "notnami": "I\u00a0have the same issue on Bash on WSL.. I was running it on a laptop from last year. I don't think my machine is\nslow.\nOn Tue, 17 Jan 2017, 05:42 Yamashita, Yuu, notifications@github.com wrote:\n\nClosed #784 https://github.com/yyuu/pyenv/issues/784.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/yyuu/pyenv/issues/784#event-925621294, or mute the\nthread\nhttps://github.com/notifications/unsubscribe-auth/ABjlYTLzv2US-8_4jPwc-IExaFsji-56ks5rTKkvgaJpZM4LSi-H\n.\n. \n",
    "Gentux": "Hi,\nI have the same issue.\nMy machine is a MacBook Pro, 2,9 GHz Intel Core i5 with 16Go RAM.. ",
    "feigaoxyz": "I also have this problem with my fish and macOS settings.\nAfter some digging, I find the command pyenv rehash 2>/dev/null (or your equivalence for other shells) to be the most time consuming part.\nTherefore, I just manually put the rest of pyenv init - into my rc files (config.fish for fish). So far it works ok.\nHope this workaround helps. Before an official solution is provided.. ",
    "sloria": "As pointed out in https://github.com/pyenv/pyenv/issues/784#issuecomment-356805124 , the slowest piece seems to be running pyenv rehash (which is run by pyenv init -).\nI am running prezto on macOS High Sierra. I tried modifying this line in the prezto python module to:\nzsh\n  eval \"$(pyenv init - --no-rehash)\"\nAnd it improved startup time by ~400ms. Not sure what the right path forward is (change in prezto? optimize pyenv rehash?), but just thought I'd pass along that finding.. Thanks @blueyed for the suggestions and for looking into further optimizations. I'll send a PR to prezto when I get a chance. \nIn case it's useful, I used time zsh -i -c echo to measure zsh start up time (which is how I got the 400ms figure).. I won't have time to look into this today. I'll let you know if I end up trying that out, but please don't block the PR on my behalf. Thanks again for working on this.. @blueyed Yes, I'm using pyenv-virtualenv.. ",
    "lesterlo": "I have the same problem. I am using MacOS 10.13.6. Some people said this problem is caused by kaspersky internet security. Is it?. I solve this problem after I add .pyenv as a trusted zone on kaspersky internet security. This policy speeds up a little bit about each shell prompt. Then I change this statement on .bash_profile\nbash\neval \"$(pyenv init - bash --no-rehash)\"\nThen the speed of the shell prompt become normal again. I am using macOS Mojave (10.14).\n. ",
    "diimdeep": "Startup time \nif which pyenv > /dev/null; then eval \"$(pyenv init -)\"; fi ~ 300ms\nif which pyenv > /dev/null; then eval \"$(pyenv init - zsh --no-rehash)\"; fi ~ 100ms\n. ",
    "hmngwy": "On zsh and on a teeny tiny computer this works:\nexport PATH=\"/home/pi/.pyenv/bin:$PATH\"\neval \"$(pyenv init - zsh --no-rehash)\"\neval \"$(pyenv virtualenv-init -)\"\nEdit: and I have this only on ~/.zlogin. ",
    "ipatch": "I really need to keep up on these issues before I spend time on trying to shave milliseconds from my shell startup time (fish shell user here).\nRunning the below\nshell\npyenv init -\nshould print something like\nOutput\n```\nset -gx PATH '/Users/capin/.pyenv/shims' $PATH\nset -gx PYENV_SHELL fish\nsource '/Users/capin/.pyenv/libexec/../completions/pyenv.fish'\ncommand pyenv rehash 2>/dev/null\nfunction pyenv\n  set command $argv[1]\n  set -e argv[1]\nswitch \"$command\"\n  case activate deactivate rehash shell\n    source (pyenv \"sh-$command\" $argv|psub)\n  case '*'\n    command pyenv \"$command\" $argv\n  end\nend\n```\nNot the most update to date syntax for fish shell, but that is beside the point.\nI decided to load all that code independently from a separate fish file, ie. load_pyenv.fish and kind of dig around with what this init is doing, and can confirm what other have stated,\nshell\ncommand pyenv rehash 2>/dev/null\nwill typically bolt on around 200ms to a shell initialization.\nwithout command pyenv rehash 2>/dev/null\n\u2500\u03bb /usr/bin/time -l fish -ic exit\n        0.72 real         0.31 user         0.29 sys\n   3698688  maximum resident set size\n         0  average shared memory size\n         0  average unshared data size\n         0  average unshared stack size\n     69197  page reclaims\n         0  page faults\n         0  swaps\n         0  block input operations\n         0  block output operations\n         0  messages sent\n         0  messages received\n       209  signals received\n       416  voluntary context switches\n       597  involuntary context switches\nwith command pyenv rehash 2>/dev/null\n\u2570\u2500\u03bb /usr/bin/time -l fish -ic exit\n        0.94 real         0.42 user         0.40 sys\n   3686400  maximum resident set size\n         0  average shared memory size\n         0  average unshared data size\n         0  average unshared stack size\n    103612  page reclaims\n         0  page faults\n         0  swaps\n         0  block input operations\n         0  block output operations\n         0  messages sent\n         0  messages received\n       240  signals received\n       641  voluntary context switches\n       866  involuntary context switches\n\n\u261d\ufe0f leaving this here for future me.. there's two versions of openssl library and headers supplied by apt-get.. \n",
    "melonCoder": "Well, I see. Thanks for your kindness. And everything goes well if i install python in ${PYENV_ROOT}.\nBut my point is: is it necessary to support installation of local packages with pyenv?\nAs far as i see, using command like pyenv install Python-3.6.0rc2.tar.xz to install local packages seems more user friendly.. ",
    "kota65535": "Sorry, I'm not talking about Python project.  IntelliJ IDEA uses a python script when launching itself.\nIf you install IntelliJ IDEA, you can see /usr/local/bin/idea is a python script that launches IntelliJ IDEA.\nSo in the environment where pyenv installed, IntelliJ IDEA inevitably suffers the change of PATH by pyenv-exec...\n\nAre you running on macOS?\n\nI'm using centOS 7.. ",
    "davidshepherd7": "Hi, I think this issue is currently breaking emacs lisp version management on Travis. The problem is this:\n\nMost (or all) emacs lisp package .travis.yml files use $PATH to manage the version of emacs to test with.\nA program called cask is used for package version management during development (think npm but for emacs).\ncask is written in emacs lisp, but is started by a small python wrapper.\nOn Travis python scripts seem to be run through pyenv.\npyenv adds /usr/bin to the front of $PATH, which overrules anything anyone else has set up!\n\nThe result is that the system version of emacs from /usr/bin is always used.\nI'd be very surprised that this hasn't broken anything else. Modifying the path is a fairly common way to control which version of a program is run, and prepending /usr/bin to $PATH is likely to break anything that relies on that.\nI'm not particularly familiar with the Travis internals, and I'd never heard of pyenv before today, so I don't really know where this bug belongs. Do you think it's an issue that could be fixed here?\nAlso is there any way to disable pyenv that could be used in a .travis.yml file? Perhaps setting an environment variable?\nLink to the cask issue.. ",
    "eregon": "I also met this issue on TravisCI, which is very confusing to debug, as only the python process and its subprocess have the wrong $PATH with /usr/bin prepended.\nMaybe pyenv can avoid changing PATH if the python executable is already the right one according to which python? Or special-case /usr/bin?. ",
    "xsteadfastx": "This would be great. I'm only a pyenv user and no developer and i tried to read the build script. just spend some minutes with it... and couldnt get it working because i couldnt find out how to change the build dir after i cloned the git repo. there is also no configure script and make needs to be run on two directories.  . the same for me. no new about this? looks like its some incompatible issues with libssl-dev. i tried it with docker... works with debian jessie and not with debian stretch. i dont know if there is anything to do about it.. ",
    "andyyoung01": "If you are using bash, maybe you should also add the content of ~/.zshenv into ~/.bashrc or ~/.bash_profile.\nAccording to the document of pyenv shell command, it set the PYENV_VERSION environment variable in your shell. After restart of the shell, this environment variable will be gone, so \"pyenv shell\" command only applies to the current shell.. @seozed Thanks!\nI also found the document about \"Package download mirrors\" at here. It describe that \"Package mirror URLs are constructed by joining this variable with the SHA2 checksum of the package file.\". ",
    "eriksf": "Having the exact same issue with the latest pyenv.\nRunning:\nmacOS 10.12.3\nInstalled with homebrew:\npyenv 1.0.8\npyenv-virtualenv 1.0.0 (virtualenv 15.0.1)\nBASH 4.4.12(1)-release\nMy pyenv prefix is  /usr/local/var/pyenv.\n. Make sure you don't have PYTHON_CONFIGURE_OPTS=\"--enable-framework\" set. I was also having this problem and unsetting this solved it. It's also mentioned in the pyenv wiki.. ",
    "Chream": "I am having this issure still:\n```\n$ pyenv install -v anaconda3-4.4.0\n/var/folders/bd/4mvf7_sj6hxgf_2j4t5hw_bm0000gn/T/python-build.20170828155102.80699 ~\nDownloading Anaconda3-4.4.0-MacOSX-x86_64.sh...\n-> https://repo.continuum.io/archive/Anaconda3-4.4.0-MacOSX-x86_64.sh\n/var/folders/bd/4mvf7_sj6hxgf_2j4t5hw_bm0000gn/T/python-build.20170828155102.80699/Anaconda3-4.4.0-MacOSX-x86_64 /var/folders/bd/4mvf7_sj6hxgf_2j4t5hw_bm0000gn/T/python-build.20170828155102.80699 ~\nInstalling Anaconda3-4.4.0-MacOSX-x86_64...\nPREFIX=/Users/izzy/.pyenv/versions/anaconda3-4.4.0\ninstalling: python-3.6.1-2 ...\ninstalling: _license-1.1-py36_1 ...\ninstalling: alabaster-0.7.10-py36_0 ...\ninstalling: anaconda-client-1.6.3-py36_0 ...\ninstalling: anaconda-navigator-1.6.2-py36_0 ...\ninstalling: anaconda-project-0.6.0-py36_0 ...\ninstalling: appnope-0.1.0-py36_0 ...\ninstalling: appscript-1.0.1-py36_0 ...\ninstalling: asn1crypto-0.22.0-py36_0 ...\ninstalling: astroid-1.4.9-py36_0 ...\ninstalling: astropy-1.3.2-np112py36_0 ...\ninstalling: babel-2.4.0-py36_0 ...\ninstalling: backports-1.0-py36_0 ...\ninstalling: beautifulsoup4-4.6.0-py36_0 ...\ninstalling: bitarray-0.8.1-py36_0 ...\ninstalling: blaze-0.10.1-py36_0 ...\ninstalling: bleach-1.5.0-py36_0 ...\ninstalling: bokeh-0.12.5-py36_1 ...\ninstalling: boto-2.46.1-py36_0 ...\ninstalling: bottleneck-1.2.1-np112py36_0 ...\ninstalling: cffi-1.10.0-py36_0 ...\ninstalling: chardet-3.0.3-py36_0 ...\ninstalling: click-6.7-py36_0 ...\ninstalling: cloudpickle-0.2.2-py36_0 ...\ninstalling: clyent-1.2.2-py36_0 ...\ninstalling: colorama-0.3.9-py36_0 ...\ninstalling: contextlib2-0.5.5-py36_0 ...\ninstalling: cryptography-1.8.1-py36_0 ...\ninstalling: curl-7.52.1-0 ...\ninstalling: cycler-0.10.0-py36_0 ...\ninstalling: cython-0.25.2-py36_0 ...\ninstalling: cytoolz-0.8.2-py36_0 ...\ninstalling: dask-0.14.3-py36_1 ...\ninstalling: datashape-0.5.4-py36_0 ...\ninstalling: decorator-4.0.11-py36_0 ...\ninstalling: distributed-1.16.3-py36_0 ...\ninstalling: docutils-0.13.1-py36_0 ...\ninstalling: entrypoints-0.2.2-py36_1 ...\ninstalling: et_xmlfile-1.0.1-py36_0 ...\ninstalling: fastcache-1.0.2-py36_1 ...\ninstalling: flask-0.12.2-py36_0 ...\ninstalling: flask-cors-3.0.2-py36_0 ...\ninstalling: freetype-2.5.5-2 ...\ninstalling: get_terminal_size-1.0.0-py36_0 ...\ninstalling: gevent-1.2.1-py36_0 ...\ninstalling: greenlet-0.4.12-py36_0 ...\ninstalling: h5py-2.7.0-np112py36_0 ...\ninstalling: hdf5-1.8.17-1 ...\ninstalling: heapdict-1.0.0-py36_1 ...\ninstalling: html5lib-0.999-py36_0 ...\ninstalling: icu-54.1-0 ...\ninstalling: idna-2.5-py36_0 ...\ninstalling: imagesize-0.7.1-py36_0 ...\ninstalling: ipykernel-4.6.1-py36_0 ...\ninstalling: ipython-5.3.0-py36_0 ...\ninstalling: ipython_genutils-0.2.0-py36_0 ...\ninstalling: ipywidgets-6.0.0-py36_0 ...\ninstalling: isort-4.2.5-py36_0 ...\ninstalling: itsdangerous-0.24-py36_0 ...\ninstalling: jbig-2.1-0 ...\ninstalling: jdcal-1.3-py36_0 ...\ninstalling: jedi-0.10.2-py36_2 ...\ninstalling: jinja2-2.9.6-py36_0 ...\ninstalling: jpeg-9b-0 ...\ninstalling: jsonschema-2.6.0-py36_0 ...\ninstalling: jupyter-1.0.0-py36_3 ...\ninstalling: jupyter_client-5.0.1-py36_0 ...\ninstalling: jupyter_console-5.1.0-py36_0 ...\ninstalling: jupyter_core-4.3.0-py36_0 ...\ninstalling: lazy-object-proxy-1.2.2-py36_0 ...\ninstalling: libiconv-1.14-0 ...\ninstalling: libpng-1.6.27-0 ...\ninstalling: libtiff-4.0.6-3 ...\ninstalling: libxml2-2.9.4-0 ...\ninstalling: libxslt-1.1.29-0 ...\ninstalling: llvmlite-0.18.0-py36_0 ...\ninstalling: locket-0.2.0-py36_1 ...\ninstalling: lxml-3.7.3-py36_0 ...\ninstalling: markupsafe-0.23-py36_2 ...\ninstalling: matplotlib-2.0.2-np112py36_0 ...\ninstalling: mistune-0.7.4-py36_0 ...\ninstalling: mkl-2017.0.1-0 ...\ninstalling: mkl-service-1.1.2-py36_3 ...\ninstalling: mpmath-0.19-py36_1 ...\ninstalling: msgpack-python-0.4.8-py36_0 ...\ninstalling: multipledispatch-0.4.9-py36_0 ...\ninstalling: navigator-updater-0.1.0-py36_0 ...\ninstalling: nbconvert-5.1.1-py36_0 ...\ninstalling: nbformat-4.3.0-py36_0 ...\ninstalling: networkx-1.11-py36_0 ...\ninstalling: nltk-3.2.3-py36_0 ...\ninstalling: nose-1.3.7-py36_1 ...\ninstalling: notebook-5.0.0-py36_0 ...\ninstalling: numba-0.33.0-np112py36_0 ...\ninstalling: numexpr-2.6.2-np112py36_0 ...\ninstalling: numpy-1.12.1-py36_0 ...\ninstalling: numpydoc-0.6.0-py36_0 ...\ninstalling: odo-0.5.0-py36_1 ...\ninstalling: olefile-0.44-py36_0 ...\ninstalling: openpyxl-2.4.7-py36_0 ...\ninstalling: openssl-1.0.2l-0 ...\ninstalling: packaging-16.8-py36_0 ...\ninstalling: pandas-0.20.1-np112py36_0 ...\ninstalling: pandocfilters-1.4.1-py36_0 ...\ninstalling: partd-0.3.8-py36_0 ...\ninstalling: path.py-10.3.1-py36_0 ...\ninstalling: pathlib2-2.2.1-py36_0 ...\ninstalling: patsy-0.4.1-py36_0 ...\ninstalling: pep8-1.7.0-py36_0 ...\ninstalling: pexpect-4.2.1-py36_0 ...\ninstalling: pickleshare-0.7.4-py36_0 ...\ninstalling: pillow-4.1.1-py36_0 ...\ninstalling: pip-9.0.1-py36_1 ...\ninstalling: ply-3.10-py36_0 ...\ninstalling: prompt_toolkit-1.0.14-py36_0 ...\ninstalling: psutil-5.2.2-py36_0 ...\ninstalling: ptyprocess-0.5.1-py36_0 ...\ninstalling: py-1.4.33-py36_0 ...\ninstalling: pycosat-0.6.2-py36_0 ...\ninstalling: pycparser-2.17-py36_0 ...\ninstalling: pycrypto-2.6.1-py36_6 ...\ninstalling: pycurl-7.43.0-py36_2 ...\ninstalling: pyflakes-1.5.0-py36_0 ...\ninstalling: pygments-2.2.0-py36_0 ...\ninstalling: pylint-1.6.4-py36_1 ...\ninstalling: pyodbc-4.0.16-py36_0 ...\ninstalling: pyopenssl-17.0.0-py36_0 ...\ninstalling: pyparsing-2.1.4-py36_0 ...\ninstalling: pyqt-5.6.0-py36_1 ...\ninstalling: pytables-3.3.0-np112py36_0 ...\ninstalling: pytest-3.0.7-py36_0 ...\ninstalling: python-dateutil-2.6.0-py36_0 ...\ninstalling: python.app-1.2-py36_4 ...\ninstalling: pytz-2017.2-py36_0 ...\ninstalling: pywavelets-0.5.2-np112py36_0 ...\ninstalling: pyyaml-3.12-py36_0 ...\ninstalling: pyzmq-16.0.2-py36_0 ...\ninstalling: qt-5.6.2-2 ...\ninstalling: qtawesome-0.4.4-py36_0 ...\ninstalling: qtconsole-4.3.0-py36_0 ...\ninstalling: qtpy-1.2.1-py36_0 ...\ninstalling: readline-6.2-2 ...\ninstalling: requests-2.14.2-py36_0 ...\ninstalling: rope-0.9.4-py36_1 ...\ninstalling: ruamel_yaml-0.11.14-py36_1 ...\ninstalling: scikit-image-0.13.0-np112py36_0 ...\ninstalling: scikit-learn-0.18.1-np112py36_1 ...\ninstalling: scipy-0.19.0-np112py36_0 ...\ninstalling: seaborn-0.7.1-py36_0 ...\ninstalling: setuptools-27.2.0-py36_0 ...\ninstalling: simplegeneric-0.8.1-py36_1 ...\ninstalling: singledispatch-3.4.0.3-py36_0 ...\ninstalling: sip-4.18-py36_0 ...\ninstalling: six-1.10.0-py36_0 ...\ninstalling: snowballstemmer-1.2.1-py36_0 ...\ninstalling: sortedcollections-0.5.3-py36_0 ...\ninstalling: sortedcontainers-1.5.7-py36_0 ...\ninstalling: sphinx-1.5.6-py36_0 ...\ninstalling: spyder-3.1.4-py36_0 ...\ninstalling: sqlalchemy-1.1.9-py36_0 ...\ninstalling: sqlite-3.13.0-0 ...\ninstalling: statsmodels-0.8.0-np112py36_0 ...\ninstalling: sympy-1.0-py36_0 ...\ninstalling: tblib-1.3.2-py36_0 ...\ninstalling: terminado-0.6-py36_0 ...\ninstalling: testpath-0.3-py36_0 ...\ninstalling: tk-8.5.18-0 ...\ninstalling: toolz-0.8.2-py36_0 ...\ninstalling: tornado-4.5.1-py36_0 ...\ninstalling: traitlets-4.3.2-py36_0 ...\ninstalling: unicodecsv-0.14.1-py36_0 ...\ninstalling: unixodbc-2.3.4-0 ...\ninstalling: wcwidth-0.1.7-py36_0 ...\ninstalling: werkzeug-0.12.2-py36_0 ...\ninstalling: wheel-0.29.0-py36_0 ...\ninstalling: widgetsnbextension-2.0.0-py36_0 ...\ninstalling: wrapt-1.10.10-py36_0 ...\ninstalling: xlrd-1.0.0-py36_0 ...\ninstalling: xlsxwriter-0.9.6-py36_0 ...\ninstalling: xlwings-0.10.4-py36_0 ...\ninstalling: xlwt-1.2.0-py36_0 ...\ninstalling: xz-5.2.2-1 ...\ninstalling: yaml-0.1.6-0 ...\ninstalling: zict-0.1.2-py36_0 ...\ninstalling: zlib-1.2.8-3 ...\ninstalling: anaconda-4.4.0-np112py36_0 ...\ninstalling: conda-4.3.21-py36_0 ...\ninstalling: conda-env-2.6.0-0 ...\nPython 3.6.1 :: Continuum Analytics, Inc.\ncreating default environment...\nusing -f (force) option\ninstallation finished.\nERROR: invalid Python executable: /Users/izzy/.pyenv/versions/anaconda3-4.4.0/bin/python\nThe python-build could not find proper executable of Python after successful build.\nPlease open an issue for future improvements.\nhttps://github.com/pyenv/pyenv/issues\nBUILD FAILED (OS X 10.11.6 using python-build 20160602)\nInspect or clean up the working tree at /var/folders/bd/4mvf7_sj6hxgf_2j4t5hw_bm0000gn/T/python-build.20170828155102.80699\nResults logged to /var/folders/bd/4mvf7_sj6hxgf_2j4t5hw_bm0000gn/T/python-build.20170828155102.80699.log\nLast 10 log lines:\ninstalling: yaml-0.1.6-0 ...\ninstalling: zict-0.1.2-py36_0 ...\ninstalling: zlib-1.2.8-3 ...\ninstalling: anaconda-4.4.0-np112py36_0 ...\ninstalling: conda-4.3.21-py36_0 ...\ninstalling: conda-env-2.6.0-0 ...\nPython 3.6.1 :: Continuum Analytics, Inc.\ncreating default environment...\nusing -f (force) option\ninstallation finished.\n```. ",
    "bbengfort": "I'm also getting this error:\n```\n$ pyenv install miniconda3-latest\nInstalling Miniconda3-latest-MacOSX-x86_64...\nSolving environment: done\nPackage Plan\nenvironment location: /Users/benjamin/.pyenv/versions/miniconda3-latest\nadded / updated specs:\n    - pip\nThe following packages will be downloaded:\npackage                    |            build\n---------------------------|-----------------\npip-10.0.1                 |           py36_0         1.8 MB\nconda-4.5.4                |           py36_0         1.0 MB\n------------------------------------------------------------\n                                       Total:         2.8 MB\n\nThe following packages will be UPDATED:\nconda: 4.5.1-py36_0 --> 4.5.4-py36_0\npip:   9.0.3-py36_0 --> 10.0.1-py36_0\n\nDownloading and Extracting Packages\npip 10.0.1###################################################################################################### | 100%\nconda 4.5.4##################################################################################################### | 100%\nPreparing transaction: done\nVerifying transaction: done\nExecuting transaction: done\nERROR: invalid Python executable: /Users/benjamin/.pyenv/versions/miniconda3-latest/bin/python\nThe python-build could not find proper executable of Python after successful build.\nPlease open an issue for future improvements.\nhttps://github.com/pyenv/pyenv/issues\nBUILD FAILED (OS X 10.13.4 using python-build 20180424)\nInspect or clean up the working tree at /var/folders/km/xc2x29pj2873lw14y0bymsc40000gn/T/python-build.20180527132329.13787\nResults logged to /var/folders/km/xc2x29pj2873lw14y0bymsc40000gn/T/python-build.20180527132329.13787.log\nLast 10 log lines:\ninstalling: cffi-1.11.5-py36h342bebf_0 ...\ninstalling: setuptools-39.0.1-py36_0 ...\ninstalling: cryptography-2.2.2-py36h1de35cc_0 ...\ninstalling: wheel-0.31.0-py36_0 ...\ninstalling: pip-9.0.3-py36_0 ...\ninstalling: pyopenssl-17.5.0-py36h51e4350_0 ...\ninstalling: urllib3-1.22-py36h68b9469_0 ...\ninstalling: requests-2.18.4-py36h4516966_1 ...\ninstalling: conda-4.5.1-py36_0 ...\ninstallation finished.\n```. ",
    "huanglianghua": "Why close the issue?? It is not solved at all.. ",
    "ciarancourtney": "FYI installing libbz2-dev before building python3.6 resolved this for me. ",
    "gobadiah": "Thanks @yyuu for looking that up. \nSo if I understand correctly, when python is only installed system wide, jython shebang use it without any error, and when a python is installed with pyenv, pyenv finds it in (in a different shim) and ask to use this one ?\nIs there an easy workaround to this ? Right now, what I'm doing is using the global python and pyenv for jython, but ideally I would really prefer using pyenv for both.. Okay I get it, well thanks a lot for the explanation, I'll monitor this issue for a possible \"fix\".. Just tried it, it works with my small Dockerfile. I'll let you know if it comes up in a real world project, but I suspect that was it. \nThanks again, that was awesome on your part.. ",
    "vc5": "In VS Code,you can just use ctrl +p then type python:select wordspace interpreter. ",
    "seozed": "Look here!\nhttp://www.tuicool.com/articles/jAFzYrV\n. How to deal with it. ",
    "ilovemysillybanana": "Can someone provide a walk through on how to do this? I'm trying to set this up now but that website linked by @seozed does not load for me. . ",
    "leafonsword": "@seozed this method still not work : http://www.tuicool.com/articles/jAFzYrV. ",
    "wbolster": "it seems to me this has nothing to do with pyenv, so i think this issue can be closed.. it seems your setup is incorrect. what does pyenv root output? and what is your exact setup? your question is too generic to expect useful answers.. the only thing that seems to matter is that pyenv should be in the path. if homebrew already takes care of that, you should be good to go.\ni think this issue can be closed.. the Misc/HISTORY for cpython contains this entry in the notes for an early 3.0 version:\n- Renamed --enable-unicode configure flag to --with-wide-unicode,\n  since Unicode strings can't be disabled anymore.. ",
    "dangitall": "Yeah, I see that but it didn't really help me in the case above. Maybe it would make sense to do it any time the environment changes?. ",
    "andriisoldatenko": "+1. ",
    "ken0709": "i see, i work fine, thank you @jacebrowning . ",
    "idmitrievsky": "Oh, I think I might have misled you, closing this. . No, it happened again. What might be the problem?. I think, the problem is that pyenv stores installed versions under ./versions relative path. When brew upgrades, it completely replaces pyenv directory, which means it removes the contents of ./versions too.\nI've explicitly set PYENV_ROOT variable to ~/.pyenv, in order to store everything under ~/.pyenv/versions now. I then tried reinstalling pyenv and everything seems to work properly this time. Just make sure to export PYENV_ROOT before calling pyenv init. I also manually expanded ~ to /Users/usrname just to be safe.\n@naglalakk hope this helps!. ",
    "naglalakk": "Hi I think this is happening to me as well. I use python 3.5.2 on multiple projects, I've already setup a virtualenv for them and this has worked, installed dependencies etc. I did a brew upgrade yesterday and now when doing pyenv versions it says 'version `3.5.2' is not installed'. Suddenly python2.7 is my default version. . ",
    "sr105": "So I should fix this bug myself...? There's nothing wrong with my shell setup. pyenv-init shouldn't be using the realpath of pyenv. . Missed the rehash question....  It doesn't fix it. rehash doesn't overwrite the shims if they already exist. I tested that.. ",
    "woosley": "created https://github.com/pypa/virtualenv/issues/1015. ",
    "matt3o": "I had the same thought but ran into the issues mentioned above. After reading the reply and trying out a few things I am down to setting file permission per folder but this doesn't seem right. \nThus would you care to explain how exactly you would set setgid and the sticky bit and on what folders?. ",
    "millerf": "For info...\n```\nBook-Pro:Documents millerf$ pyenv --version\npyenv 1.0.7\n```. what does that mean? I also tried pyenv shell and it is saying the command doesn't exist.... ",
    "codyli520": "I have the same issue. ",
    "programmist": "Same issue here. Followed all instructions and pyenv insists 3.6.0 is the current version, but running python -V shows 2.7.10. \nOS X Sierra 10.12.2. ",
    "matinfo": "Solution - Add to your shell (~/.bashrc or ~/.zshrc) : \nexport PATH=\"/Users/username/.pyenv:$PATH\"\neval \"$(pyenv init -)\"\nRemplace username by your MacBook user.\nRefresh your terminal env, example: $ source ~/.zshrc  (or restart your terminal). @gloryVine to use your Python 2.7 you need to use python2.7 cmd. And python -V on my MacBook return the Python 3 version.. ",
    "felipemrodrigues": "@matinfo really solved here. ty :). ",
    "AgileTrossDev": "I have this issue too.   Had to manually add\nexport PATH=\"/Users/username/.pyenv:$PATH\"\neval \"$(pyenv init -)\". ",
    "z-bowen": "I'm experiencing the same problem, and none of these suggestions are working.\nSystem info: 2013 macbook air running High Sierra 10.13.4\n$ pyenv version\n3.6.5 (set by /Users/zacharybowen/<project_dir>/.python-version)\n$ pyenv local\n3.6.5\n$ pyenv global\n3.6.5\npython --version\nPython 3.4.1\nMy .bash_profile:\n# Setting PATH for Python 2.7\n# The orginal version is saved in .bash_profile.pysave\nPATH=\"/Library/Frameworks/Python.framework/Versions/2.7/bin:${PATH}\"\nexport PATH\nexport PATH=/usr/local/bin:$PATH\nexport PATH=/usr/local/bin:$PATH\n# .bashrc\n# Uncomment the following line if you don't like systemctl's auto-paging feature:\n# export SYSTEMD_PAGER=\n# User specific aliases and functions\nPS1='\\[\\e[0;32m\\]\\u\\[\\e[m\\] \\[\\e[1;36m\\]\\w\\[\\e[m\\] \\[\\e[0;31m\\]\\$ \\[\\e[m\\]\\[\\e[0;32m\\]'\n#[ -e \"$HOME/.dircolors\" ] && DIR_COLORS=\"$HOME/.dircolors\"\n#[ -e \"$DIR_COLORS\" ] || DIR_COLORS=\"\"\n#eval \"$(dircolors -b $DIR_COLORS)\"\n#alias ls='ls --color=auto'\nexport PYENV_ROOT=\"$HOME/.pyenv\"\nexport PATH=\"$PYENV_ROOT/bin:$PYENV_ROOT/shims:$PATH\"\neval \"$(pyenv init -)\"\n# added by Anaconda2 4.3.0 installer\nexport PATH=\"/Users/zacharybowen/anaconda/bin:$PATH\"\nAny idea what I need to do to get my python version to point to 3.6.5?. ",
    "hartleybrody": "I was having this issue as well, where pyenv local was telling me one version and python --version was telling me something else. Eventually I figured out it was due to a pyenv plugin I was using.\nIf you're using the pyenv-virtualenv plugin, you'll need to specify the python version you want to use when you create the virtualenv.\nSo instead of using \npyenv virtualenv my_virtualenv\n\nYou'll need to use\npyenv virtualenv 3.6.2 my_virtualenv\n\nI had to blow away my current virtualenv and create a new one like that for it to correctly load the right python version.. ",
    "q3cap": "Does not solve it for me. Still seeing system version of Python (2.7.10), instead of 3.4.0, although pyenv tells me that it is the local version.. ",
    "xmesaj2": "I'm not OSX user, though it seems you are missing zlib-devel. You have to get it before attempting to build python using pyenv.\nThe one solution I found is to run\nxcode-select --install\n. ",
    "sivabudh": "@Qtimer actually their page already classifies this as a common build problem.\nSee: https://github.com/yyuu/pyenv/wiki/Common-build-problems\nUncleGoogle.",
    "dummys": "someone is listening to issue here ?. sorry, i'm testing it right now. @yyuu I tested the 32bit install and it seems to work. In order to use it for IDA pro I need the following library: libpython2.7.so.1.0\nWhere does pyenv store this files ? I checked everywhere here: ~/.pyenv/versions/2.7.13\nUpdate: Ok I found it:  env PYTHON_CONFIGURE_OPTS=\"--enable-shared\" CFLAGS=\"-m32\" LDFLAGS=\"-m32\" pyenv install 2.7.13. @yyuu Hi again, quick question. How is it possible to have python 2.7.13 32bit and python 2.7.13 64bit on the same computer ?\nLet me explain my need, normaly to not dirt my system install I used mkvirtualenv -p python2 or python3 depend of which version I want to use.\nNow with pyenv + pyenv-virtualenv + pyenv-wirtualenvwrapper:\nHow can i do the same ? How to differ between 32/64 bit python because they will have the same name versions/2.7.13 ?\nSo as I understand now with pyenv when I do mkvirtualenv I get pyenv to use pyenv-virtualenv to create my venv.. its version with a s. @yyuu are you there ?. not written in your documentation btw... You removed the line stated that it's only a matter of naming the directory in version.... ",
    "quintendewilde": "I'm doing workon cv followed by virtualenv --version = 15.1.0 , then pyenv version = 3.5.0 (set by /Users/username/.python-version) \nWhen python -v \ninstalling zipimport hook\nimport zipimport # builtin\ninstalled zipimport hook\n.....\n.....\nBut everything shows python 2.7 directories, in the cv environment?. ",
    "maxnordlund": "\n@maxnordlund could you open similar PR to https://github.com/rbenv/rbenv as well? Because pyenv's sharing most of code with that, contributing to upstream will be welcomed.\n\nI'll do it right away \ud83d\udc4d . That is already handled in the __fish_pyenv_needs_command / __fish_pyenv_using_command, but if it was using just one completion then yes.. ",
    "dwfreed": "This happens with any script that is a symlink.  For example, speedtest-cli installed via homebrew results in 'speedtest' being the actual python script, and 'speedtest-cli' and 'speedtest_cli' being symlinks to 'speedtest'.  Running 'speedtest-cli' or 'speedtest_cli' triggers the \"cd: speedtest: Not a directory\" message.. ",
    "mcclurmc": "Doesn't look like this is getting merged, so I'm closing it to clear up my pull request list.. ",
    "tgy": "I figured out that putting Python-3.6.0.tar.xz in a ~/.pyenv/cache directory works.. ",
    "zunayed": "Fixed this by doing a yum install -y patch!. ",
    "nelaaro": "Solution:\nInstall that which works for the 2.4 line of python\nhttps://virtualenv.pypa.io/en/latest/changes/#id46.\nhttps://pypi.python.org/pypi/pip/1.1\nI guess I will need to double check every pip package version for installation into 2.4\n```\n$ pyenv global 2.4.3\n$ pip install pip==1.1\nRequirement already satisfied (use --upgrade to upgrade): pip==1.1 in /home/aaron/.pyenv/versions/2.4.3/lib/python2.4/site-packages/pip-1.1-py2.4.egg\nCleaning up...\npip install virtualenv==1.7.2\nDownloading/unpacking virtualenv==1.7.2\n  Downloading virtualenv-1.7.2.tar.gz (2.2Mb): 2.2Mb downloaded\n  Running setup.py egg_info for package virtualenv\n    warning: no previously-included files matching '' found under directory 'docs/_templates'\n    warning: no previously-included files matching '' found under directory 'docs/_build'\nInstalling collected packages: virtualenv\n  Running setup.py install for virtualenv\n    warning: no previously-included files matching '' found under directory 'docs/_templates'\n    warning: no previously-included files matching '' found under directory 'docs/_build'\n    Installing virtualenv script to /home/aaron/.pyenv/versions/2.4.3/bin\n    Installing virtualenv-2.4 script to /home/aaron/.pyenv/versions/2.4.3/bin\nSuccessfully installed virtualenv\nCleaning up...\n$ pyenv virtualenv 2.4.3 python243\nNew python executable in /home/aaron/.pyenv/versions/2.4.3/envs/python243/bin/python2.4\nAlso creating executable in /home/aaron/.pyenv/versions/2.4.3/envs/python243/bin/python\nInstalling setuptools.............done.\nInstalling pip...............done.\nInstalling pip from https://bootstrap.pypa.io/get-pip.py...\nUnknown option: -s\nusage: python [option] ... [-c cmd | -m mod | file | -] [arg] ...\nTry `python -h' for more information.\nerror: failed to install pip via get-pip.py\npyenv virtualenv 2.4.3 python243\npyenv-virtualenv: `/home/aaron/.pyenv/versions/python243' already exists.\n```. ",
    "cculianu": "Uh. I want to do the same. I can't get pyenv to link against openssl@1.1 no matter how hard I try.\nWhat gives?  Openssl1.1 offers features like hashlib.scrypt which are needed by me.\n. I'm in agreement here.\nI may just put up a PR to handle these cases -- pyenv is pretty nicely architected so people not familiar with it can modify it. That's a good thing!\nI really really need this feature too -- the features you describe and the ability to specify openssl 1.1, etc.\n:/. Yeah but it picks up 1.0.2 even when you have 1.1.0 installed :'(\nOn Sat, Mar 16, 2019 at 3:21 AM TW notifications@github.com wrote:\n\nmy comment above was about travis-ci's macOS testing.\nstrange, in my vagrant-based testing, I see:\ndarwin64: python-build: use openssl from homebrew\ndarwin64: python-build: use readline from homebrew\ndarwin64: Downloading Python-3.7.0.tar.xz...\ndarwin64: -> https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tar.xz\ndarwin64: Installing Python-3.7.0...\ndarwin64: python-build: use readline from homebrew\ndarwin64: Installed Python-3.7.0 to /Users/vagrant/.pyenv/versions/3.7.0\n\nSo, pyenv does not download readline and openssl, but picks it up from\nhomebrew, as desired.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/pyenv/pyenv/issues/839#issuecomment-473485904, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAQRgwHX5vx9ERNjLEoSvGAgF2L79fEPks5vXEctgaJpZM4MIYfl\n.\n. And if you uninstall 1.0.2 and just have 1.1 it fails and/or just compiles its own 1.0.2 from source.. refusing to see 1.1 even though python itself could use 1.1 no problem. So yeah. :'(. can you submit this as a PR? I love you. I said it before I'll say it again. I love you.\n. Update: One of the places where a patch could be added would be here:\n\nhttps://github.com/pyenv/pyenv/blob/6309aaf295b05fece4abb52ba1000f98e40390e7/plugins/python-build/bin/python-build#L1494\nEither it could:\n\nAuto-detect openssl1.1 if it exists and prefer that or\nAllow users to tell the build script to look for openssl1.1 with say some option like --use-openssl1.1 or something.\n\nLet me know if this approach sounds reasonable and if you guys are open to a PR and maybe I can put together a PR to allow this to happen!\n. Thanks for the quick reply!\n@yyuu I tried 3.7.2, 3.7.1, 3.7.0, all the 3.6's.  It appears we are commenting at the same time.  The issue is indeed here as you say: https://github.com/pyenv/pyenv/blob/6309aaf295b05fece4abb52ba1000f98e40390e7/plugins/python-build/bin/python-build#L1494\n^^ that code only looks for openssl 1.0.\nAnd yes.. there is a difference between 1.1 -- 1.1 offers more hashing and other functions that Python knows about and can use.. :)\n. PS: If you wanted to ask brew for the prefix to openssl1.1 it would be:\nbrew --prefix openssl@1.1\nBrew allows both libs to be installed side-by-side and simple openssl is just 1.0.\nIt would actually be super-nice if the python-build plugin detected whether a user specified an override: --with-openssl= and if so, just respected the user's override and used that as the prefix, rather than overriding the override. :)  \n(This would be the simplest possible fix that doesn't involve a lot of code)\n. Ah. Indeed it is.. It's late here in Europe but I am super excited you did this! I'll take it for a spin tomorrow and let you know what I think and how it works for me.  THANK YOU for this. This opens up a lot of possibilities as OpenSSL 1.1 has scrypt and other stuff that python makes use of.\nEDIT: I also upvote having this (or something like this) integrated soon into pyenv. I super need this for my project too (we distribute an app that users need to be able to also build on macOS from scratch including having pyenv build Python for them).  So I am super excited becuse we really need OpenSSL 1.1.. @yyuu I really appreciate your taking the time to think this through and perhaps being amenable to this.  OpenSSL 1.1 is really so much better than 1.0.2 in terms of feature coverage.. would be great to have it.  Thanks.\n. @ThomasWaldmann I'm hoping not.  On Linux at least all the pythons you get on all the distros are compiled & linked against OpenSSL 1.1 (if we're talking recent releases here).  Even a lot of the Pythons you see in the Windows world are linked against this.  pyenv on MacOS has been the odd-man-out with its OpenSSL 1.0 as far as I can tell.\nNow -- whether someone built some programs on top of python assuming 1.0.. no idea. Someone more familiar with this packaging zoo might know better.. my gut tells me \"it'll be fine!\".  :)\n. ",
    "parkerd": "This is on Linux, confirmed on both CentOS 7.2 and Ubuntu 16.04.\nYou can also see the error in output other users have posted for other issues, but they didn't report this specifically as an issue.. ",
    "lukesneeringer": "Really? All the other commands work...why would that one be different?\n(I double checked the instructions; they are done.). ",
    "okor": "@lukesneeringer You probably just need to run echo 'eval \"$(pyenv init -)\"' >> ~/.bash_profile\nWorth noting that on my system, homebrew did NOT print that detail in the caveats as mentioned in the install instructions. Could just be me but it's an easy miss.\n\nAfter installation, you'll need to add eval \"$(pyenv init -)\" to your profile (as stated in the caveats displayed by Homebrew \u2014 to display them again, use brew info pyenv). You only need to add that to your profile once.\n\n~ $ brew info pyenv\npyenv: stable 1.0.8, HEAD\nPython version management\nhttps://github.com/yyuu/pyenv\n/usr/local/Cellar/pyenv/1.0.8 (548 files, 2.2M) *\n  Built from source on 2017-03-03 at 09:59:26\nFrom: https://github.com/Homebrew/homebrew-core/blob/master/Formula/pyenv.rb\n==> Dependencies\nRecommended: autoconf \u2714, pkg-config \u2714, openssl \u2714, readline \u2714\n==> Options\n--without-autoconf\n    Build without autoconf support\n--without-openssl\n    Build without openssl support\n--without-pkg-config\n    Build without pkg-config support\n--without-readline\n    Build without readline support\n--HEAD\n    Install HEAD version. ",
    "nasfarley88": "@yyuu i think this is quite likely. I use anaconda to use the python version of ROOT (the main CERN analysis framework). ROOT needs a specific gcc in this case, would adding gcc to this list mean that the conda environment uses its own gcc or the system gcc?. ",
    "chaitanya11": "I am also having the same problem with debian 9.4  (stretch). \nMy log out put is\n```\nDownloading Python-3.6.2.tar.xz...\n-> https://www.python.org/ftp/python/3.6.2/Python-3.6.2.tar.xz\nInstalling Python-3.6.2...\nBUILD FAILED (Debian 9.4 using python-build 1.2.4)\nInspect or clean up the working tree at /tmp/python-build.20180504073814.18538\nResults logged to /tmp/python-build.20180504073814.18538.log\nLast 10 log lines:\nchecking for --enable-universalsdk... no\nchecking for --with-universal-archs... no\nchecking MACHDEP... linux\nchecking for --without-gcc... no\nchecking for --with-icc... no\nchecking for gcc... gcc\nchecking whether the C compiler works... no\nconfigure: error: in /tmp/python-build.20180504073814.18538/Python-3.6.2':\nconfigure: error: C compiler cannot create executables\nSeeconfig.log' for more details\n```\nconfig.log file data is \n```\nThis file contains any messages produced by compilers while\nrunning configure, to aid debugging if configure makes a mistake.\nIt was created by python configure 3.6, which was\ngenerated by GNU Autoconf 2.69.  Invocation command line was\n$ ./configure --prefix=/home/river/.pyenv/versions/3.6.2 --libdir=/home/river/.pyenv/versions/3.6.2/lib\n---------\nPlatform.\n---------\nhostname = pandora\nuname -m = x86_64\nuname -r = 4.9.0-6-amd64\nuname -s = Linux\nuname -v = #1 SMP Debian 4.9.82-1+deb9u3 (2018-03-02)\n/usr/bin/uname -p = unknown\n/bin/uname -X     = unknown\n/bin/arch              = unknown\n/usr/bin/arch -k       = unknown\n/usr/convex/getsysinfo = unknown\n/usr/bin/hostinfo      = unknown\n/bin/machine           = unknown\n/usr/bin/oslevel       = unknown\n/bin/universe          = unknown\nPATH: /home/river/.pyenv/libexec\nPATH: /home/river/.pyenv/plugins/python-build/bin\nPATH: /home/river/.pyenv/shims\nPATH: /home/river/.pyenv/bin\nPATH: /home/river/.pyenv/shims\nPATH: /home/river/.pyenv/bin\nPATH: /home/river/.pyenv/shims\nPATH: /home/river/.pyenv/bin\nPATH: /usr/local/bin\nPATH: /usr/bin\nPATH: /bin\nPATH: /usr/local/games\nPATH: /usr/games\n-----------\nCore tests.\n-----------\nconfigure:2794: checking build system type\nconfigure:2808: result: x86_64-pc-linux-gnu\nconfigure:2828: checking host system type\nconfigure:2841: result: x86_64-pc-linux-gnu\nconfigure:2871: checking for python3.6\nconfigure:2901: result: no\nconfigure:2871: checking for python3\nconfigure:2887: found /usr/bin/python3\nconfigure:2898: result: python3\nconfigure:2998: checking for --enable-universalsdk\nconfigure:3045: result: no\nconfigure:3068: checking for --with-universal-archs\nconfigure:3083: result: no\nconfigure:3233: checking MACHDEP\nconfigure:3442: result: linux\nconfigure:3463: checking for --without-gcc\nconfigure:3486: result: no\nconfigure:3489: checking for --with-icc\nconfigure:3509: result: no\nconfigure:3633: checking for gcc\nconfigure:3649: found /usr/bin/gcc\nconfigure:3660: result: gcc\nconfigure:3889: checking for C compiler version\nconfigure:3898: gcc --version >&5\ngcc (Debian 6.3.0-18+deb9u1) 6.3.0 20170516\nCopyright (C) 2016 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\nconfigure:3909: $? = 0\nconfigure:3898: gcc -v >&5\nUsing built-in specs.\nCOLLECT_GCC=gcc\nCOLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/6/lto-wrapper\nTarget: x86_64-linux-gnu\nConfigured with: ../src/configure -v --with-pkgversion='Debian 6.3.0-18+deb9u1' --with-bugurl=file:///usr/share/doc/gcc-6/README.Bugs --enable-languages=c,ada,c++,java,go,d,fortran,objc,obj-c++ --prefix=/usr --program-suffix=-6 --program-prefix=x86_64-linux-gnu- --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --with-default-libstdcxx-abi=new --enable-gnu-unique-object --disable-vtable-verify --enable-libmpx --enable-plugin --enable-default-pie --with-system-zlib --disable-browser-plugin --enable-java-awt=gtk --enable-gtk-cairo --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-6-amd64/jre --enable-java-home --with-jvm-root-dir=/usr/lib/jvm/java-1.5.0-gcj-6-amd64 --with-jvm-jar-dir=/usr/lib/jvm-exports/java-1.5.0-gcj-6-amd64 --with-arch-directory=amd64 --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --with-target-system-zlib --enable-objc-gc=auto --enable-multiarch --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --enable-multilib --with-tune=generic --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu\nThread model: posix\ngcc version 6.3.0 20170516 (Debian 6.3.0-18+deb9u1) \nconfigure:3909: $? = 0\nconfigure:3898: gcc -V >&5\ngcc: error: unrecognized command line option '-V'\ngcc: fatal error: no input files\ncompilation terminated.\nconfigure:3909: $? = 1\nconfigure:3898: gcc -qversion >&5\ngcc: error: unrecognized command line option '-qversion'; did you mean '--version'?\ngcc: fatal error: no input files\ncompilation terminated.\nconfigure:3909: $? = 1\nconfigure:3929: checking whether the C compiler works\nconfigure:3951: gcc -m32  -I/home/river/.pyenv/versions/3.6.2/include  -L/home/river/.pyenv/versions/3.6.2/lib -m32 conftest.c  >&5\n/usr/bin/ld: cannot find Scrt1.o: No such file or directory\n/usr/bin/ld: cannot find crti.o: No such file or directory\n/usr/bin/ld: skipping incompatible /usr/lib/gcc/x86_64-linux-gnu/6/libgcc.a when searching for -lgcc\n/usr/bin/ld: cannot find -lgcc\n/usr/bin/ld: skipping incompatible /usr/lib/gcc/x86_64-linux-gnu/6/libgcc_s.so.1 when searching for libgcc_s.so.1\n/usr/bin/ld: cannot find libgcc_s.so.1\n/usr/bin/ld: skipping incompatible /usr/lib/gcc/x86_64-linux-gnu/6/libgcc.a when searching for -lgcc\n/usr/bin/ld: cannot find -lgcc\ncollect2: error: ld returned 1 exit status\nconfigure:3955: $? = 1\nconfigure:3993: result: no\nconfigure: failed program was:\n| / confdefs.h /\n| #define _GNU_SOURCE 1\n| #define _NETBSD_SOURCE 1\n| #define __BSD_VISIBLE 1\n| #define _BSD_TYPES 1\n| #define _DARWIN_C_SOURCE 1\n| #define _XOPEN_SOURCE 700\n| #define _XOPEN_SOURCE_EXTENDED 1\n| #define _POSIX_C_SOURCE 200809L\n| / end confdefs.h.  /\n| \n| int\n| main ()\n| {\n| \n|   ;\n|   return 0;\n| }\nconfigure:3998: error: in /tmp/python-build.20180504073814.18538/Python-3.6.2':\nconfigure:4000: error: C compiler cannot create executables\nSeeconfig.log' for more details\n----------------\nCache variables.\n----------------\nac_cv_build=x86_64-pc-linux-gnu\nac_cv_env_CC_set=\nac_cv_env_CC_value=\nac_cv_env_CFLAGS_set=set\nac_cv_env_CFLAGS_value='-m32 '\nac_cv_env_CPPFLAGS_set=set\nac_cv_env_CPPFLAGS_value='-I/home/river/.pyenv/versions/3.6.2/include '\nac_cv_env_CPP_set=\nac_cv_env_CPP_value=\nac_cv_env_LDFLAGS_set=set\nac_cv_env_LDFLAGS_value='-L/home/river/.pyenv/versions/3.6.2/lib -m32'\nac_cv_env_LIBS_set=\nac_cv_env_LIBS_value=\nac_cv_env_MACHDEP_set=\nac_cv_env_MACHDEP_value=\nac_cv_env_PKG_CONFIG_LIBDIR_set=\nac_cv_env_PKG_CONFIG_LIBDIR_value=\nac_cv_env_PKG_CONFIG_PATH_set=\nac_cv_env_PKG_CONFIG_PATH_value=\nac_cv_env_PKG_CONFIG_set=\nac_cv_env_PKG_CONFIG_value=\nac_cv_env_build_alias_set=\nac_cv_env_build_alias_value=\nac_cv_env_host_alias_set=\nac_cv_env_host_alias_value=\nac_cv_env_target_alias_set=\nac_cv_env_target_alias_value=\nac_cv_host=x86_64-pc-linux-gnu\nac_cv_prog_PYTHON_FOR_REGEN=python3\nac_cv_prog_ac_ct_CC=gcc\n-----------------\nOutput variables.\n-----------------\nABIFLAGS=''\nAR=''\nARCH_RUN_32BIT=''\nARFLAGS=''\nBASECFLAGS=''\nBASECPPFLAGS=''\nBLDLIBRARY=''\nBLDSHARED=''\nBUILDEXEEXT=''\nCC='gcc'\nCCSHARED=''\nCFLAGS='-m32 '\nCFLAGSFORSHARED=''\nCFLAGS_ALIASING=''\nCFLAGS_NODIST=''\nCONFIGURE_MACOSX_DEPLOYMENT_TARGET=''\nCONFIG_ARGS=' '\\''--prefix=/home/river/.pyenv/versions/3.6.2'\\'' '\\''--libdir=/home/river/.pyenv/versions/3.6.2/lib'\\'' '\\''CFLAGS=-m32 '\\'' '\\''LDFLAGS=-L/home/river/.pyenv/versions/3.6.2/lib -m32'\\'' '\\''CPPFLAGS=-I/home/river/.pyenv/versions/3.6.2/include '\\'''\nCPP=''\nCPPFLAGS='-I/home/river/.pyenv/versions/3.6.2/include '\nCXX=''\nDEFS=''\nDEF_MAKE_ALL_RULE=''\nDEF_MAKE_RULE=''\nDFLAGS=''\nDLINCLDIR=''\nDLLLIBRARY=''\nDTRACE=''\nDTRACE_HEADERS=''\nDTRACE_OBJS=''\nDYNLOADFILE=''\nECHO_C=''\nECHO_N='-n'\nECHO_T=''\nEGREP=''\nENSUREPIP=''\nEXEEXT=''\nEXPORT_MACOSX_DEPLOYMENT_TARGET='#'\nEXT_SUFFIX=''\nFRAMEWORKALTINSTALLFIRST=''\nFRAMEWORKALTINSTALLLAST=''\nFRAMEWORKINSTALLAPPSPREFIX=''\nFRAMEWORKINSTALLFIRST=''\nFRAMEWORKINSTALLLAST=''\nFRAMEWORKPYTHONW=''\nFRAMEWORKUNIXTOOLSPREFIX='/home/river/.pyenv/versions/3.6.2'\nGITBRANCH=''\nGITTAG=''\nGITVERSION=''\nGNULD=''\nGREP=''\nHAS_GIT='no-repository'\nHAVE_GETHOSTBYNAME=''\nHAVE_GETHOSTBYNAME_R=''\nHAVE_GETHOSTBYNAME_R_3_ARG=''\nHAVE_GETHOSTBYNAME_R_5_ARG=''\nHAVE_GETHOSTBYNAME_R_6_ARG=''\nINSTALL_DATA=''\nINSTALL_PROGRAM=''\nINSTALL_SCRIPT=''\nINSTSONAME=''\nLDCXXSHARED=''\nLDFLAGS='-L/home/river/.pyenv/versions/3.6.2/lib -m32'\nLDLAST=''\nLDLIBRARY=''\nLDLIBRARYDIR=''\nLDSHARED=''\nLDVERSION=''\nLIBC=''\nLIBFFI_INCLUDEDIR=''\nLIBM=''\nLIBOBJS=''\nLIBPL=''\nLIBRARY=''\nLIBS=''\nLIBTOOL_CRUFT=''\nLINKCC=''\nLINKFORSHARED=''\nLIPO_32BIT_FLAGS=''\nLLVM_PROFDATA=''\nLLVM_PROF_ERR=''\nLLVM_PROF_FILE=''\nLLVM_PROF_FOUND=''\nLLVM_PROF_MERGER=''\nLN=''\nLTLIBOBJS=''\nLTOFLAGS=''\nMACHDEP='linux'\nMACHDEP_OBJS=''\nMAINCC=''\nMKDIR_P=''\nMULTIARCH=''\nMULTIARCH_CPPFLAGS=''\nNO_AS_NEEDED=''\nOBJEXT=''\nOPT=''\nOTHER_LIBTOOL_OPT=''\nPACKAGE_BUGREPORT='https://bugs.python.org/'\nPACKAGE_NAME='python'\nPACKAGE_STRING='python 3.6'\nPACKAGE_TARNAME='python'\nPACKAGE_URL=''\nPACKAGE_VERSION='3.6'\nPATH_SEPARATOR=':'\nPGO_PROF_GEN_FLAG=''\nPGO_PROF_USE_FLAG=''\nPKG_CONFIG=''\nPKG_CONFIG_LIBDIR=''\nPKG_CONFIG_PATH=''\nPLATFORM_TRIPLET=''\nPY3LIBRARY=''\nPYTHONFRAMEWORK=''\nPYTHONFRAMEWORKDIR='no-framework'\nPYTHONFRAMEWORKIDENTIFIER='org.python.python'\nPYTHONFRAMEWORKINSTALLDIR=''\nPYTHONFRAMEWORKPREFIX=''\nPYTHON_FOR_BUILD='./$(BUILDPYTHON) -E'\nPYTHON_FOR_REGEN='python3'\nPY_ENABLE_SHARED=''\nRANLIB=''\nREADELF=''\nRUNSHARED=''\nSED=''\nSGI_ABI=''\nSHELL='/bin/bash'\nSHLIBS=''\nSHLIB_SUFFIX=''\nSOABI=''\nSOVERSION='1.0'\nSRCDIRS=''\nTCLTK_INCLUDES=''\nTCLTK_LIBS=''\nTHREADHEADERS=''\nTHREADOBJ=''\nTRUE=''\nUNIVERSALSDK=''\nUNIVERSAL_ARCH_FLAGS=''\nUSE_INLINE=''\nUSE_THREAD_MODULE=''\nVERSION='3.6'\n_PYTHON_HOST_PLATFORM=''\nac_ct_AR=''\nac_ct_CC='gcc'\nac_ct_CXX=''\nac_ct_READELF=''\nbindir='${exec_prefix}/bin'\nbuild='x86_64-pc-linux-gnu'\nbuild_alias=''\nbuild_cpu='x86_64'\nbuild_os='linux-gnu'\nbuild_vendor='pc'\ndatadir='${datarootdir}'\ndatarootdir='${prefix}/share'\ndocdir='${datarootdir}/doc/${PACKAGE_TARNAME}'\ndvidir='${docdir}'\nexec_prefix='NONE'\nhost='x86_64-pc-linux-gnu'\nhost_alias=''\nhost_cpu='x86_64'\nhost_os='linux-gnu'\nhost_vendor='pc'\nhtmldir='${docdir}'\nincludedir='${prefix}/include'\ninfodir='${datarootdir}/info'\nlibdir='/home/river/.pyenv/versions/3.6.2/lib'\nlibexecdir='${exec_prefix}/libexec'\nlocaledir='${datarootdir}/locale'\nlocalstatedir='${prefix}/var'\nmandir='${datarootdir}/man'\noldincludedir='/usr/include'\npdfdir='${docdir}'\nprefix='/home/river/.pyenv/versions/3.6.2'\nprogram_transform_name='s,x,x,'\npsdir='${docdir}'\nsbindir='${exec_prefix}/sbin'\nsharedstatedir='${prefix}/com'\nsysconfdir='${prefix}/etc'\ntarget=''\ntarget_alias=''\ntarget_cpu=''\ntarget_os=''\ntarget_vendor=''\n-----------\nconfdefs.h.\n-----------\n/ confdefs.h /\ndefine _GNU_SOURCE 1\ndefine _NETBSD_SOURCE 1\ndefine __BSD_VISIBLE 1\ndefine _BSD_TYPES 1\ndefine _DARWIN_C_SOURCE 1\ndefine _XOPEN_SOURCE 700\ndefine _XOPEN_SOURCE_EXTENDED 1\ndefine _POSIX_C_SOURCE 200809L\nconfigure: exit 77\n```\nThanks in advance. ",
    "jeffkaufman": "I think this might be related to https://github.com/Homebrew/homebrew-core/issues/2674 (via https://github.com/mobile-shell/mosh/issues/807#issuecomment-249736455). Homebrew now has pyenv 1.0.10, and I'm no longer getting this error.. I don't think I did anything to fix it, I just tried again a month and a half later and it worked now.  Maybe updating homebrew would help?  I probably did that in the meantime.. ",
    "aayn": "I still have this exact problem on Mac OS X Sierra (10.12.4), even with pyenv 1.0.10. @jeffkaufman Did you do something to fix this? I tried a few things. None of them worked.. @jeffkaufman Oh okay thanks. My homebrew's updated, still, the same error shows up. :(. ",
    "brandonscript": "This is now happening to me on 10.14.2 Beta (18C52a) and 10.14.1 GM when trying to install python 3.5.6:\n```\n\npyenv install 3.5.6                                                                                                                                                ~/D/fylm 1\npython-build: use openssl from homebrew\npython-build: use readline from homebrew\nDownloading Python-3.5.6.tar.xz...\n-> https://www.python.org/ftp/python/3.5.6/Python-3.5.6.tar.xz\nInstalling Python-3.5.6...\npython-build: use readline from homebrew\n\nBUILD FAILED (OS X 10.14.2 using python-build 20180424)\nInspect or clean up the working tree at /var/folders/db/.../T/python-build.20181203151408.11891\nResults logged to /var/folders/db/.../T/python-build.20181203151408.11891.log\nLast 10 log lines:\nPython/pytime.c:508:13: warning: implicit declaration of function 'clock_getres' is invalid in C99 [-Wimplicit-function-declaration]\n        if (clock_getres(CLOCK_REALTIME, &res) == 0)\n            ^\nPython/pytime.c:508:13: warning: this function declaration is not a prototype [-Wstrict-prototypes]\nPython/pytime.c:508:26: error: use of undeclared identifier 'CLOCK_REALTIME'\n        if (clock_getres(CLOCK_REALTIME, &res) == 0)\n                         ^\n4 warnings and 2 errors generated.\nmake: *** [Python/pytime.o] Error 1\n```\nI've found a few threads around that suggest trying to repair xz with brew reinstall xz and brew install xz --update, and reinstalled latest Xcode developer tools from the .dmg, but no dice.. Related StackOverflow question: https://stackoverflow.com/q/53620641/1214800. ",
    "javier-hernandez": "Has anyone found a fix for this? I am experiencing the exact same issue as bradonscript above..... ",
    "psychix": "I had same issue.thanks!now it works!. ",
    "diazgilberto": "After you ran those commands...\necho 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.zshenv\necho 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.zshenv\nyou need run exec $SHELL every single time you want pyenv to take control. If you want pyenv to run by default you need to run the following.\necho 'eval \"$(pyenv init -)\"' >> ~/.zshrc\nOr, as an alternative, you can echo both and the eval to the .zshrc. ",
    "mitrx": "The thing is that /etc/zprofile is loaded after ~/.zshenv and it overwrites PATH. The ~/.zshrc is not the place to set environment variables, so, I think the proper solution would be to pop paths set by these commands:\nzsh\necho 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.zshenv\necho 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.zshenv\nto the front in ~/.zprofile. The solution I came to is here.. ",
    "ryudice": "This needs to be in the readme.. ",
    "ivymarkwell": "Bump -- didn't want to run the exec $SHELL command every time (which is the problem I was trying to solve). Followed the explanations above and added paths and the eval statement to my ~/.zprofile to look like this\n```\nSetting up pyenv\nexport PYENV_ROOT=\"$HOME/.pyenv\"\nexport PATH=\"$PYENV_ROOT/bin:$PATH\"\neval \"$(pyenv init -)\"\n```\nworked perfectly \ud83d\udc4d. Should definitely be appended to the docs.. ",
    "3rd3": "I think I've done all of that.\nFor now I've solved it by adding export PATH=\"$(pyenv prefix)/bin:$PATH\" to .zshenv. Is that the correct way of doing it?. pyenv root simply prints /Users/me/.pyenv. As I said, I simply followed the instructions by installing it via Homebrew on macOS.. Thanks, rehashing solved the issue.. ",
    "cameres": "I don't see either of the following in your path, which leads me to believe eval \"$(pyenv init -)\" isn't being run on startup of your shell.\n- $PYENV_ROOT/shims\n- $PYENV_ROOT/bin. ",
    "eligreg": "That was it! Thank you.\n~\nEli Gregory\nOn Wed, Mar 8, 2017 at 5:50 PM, Connor Ameres notifications@github.com\nwrote:\n\nI don't see either of the following in your path, which leads me to\nbelieve eval \"$(pyenv init -)\" isn't being run on startup of your shell.\n\n$PYENV_ROOT/shims\n$PYENV_ROOT/bin\n\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pyenv/pyenv/issues/849#issuecomment-285229619, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ACDqwqBZl9qYYi6wZfcKA9q5kG7kJbriks5rj1rTgaJpZM4MTNYg\n.\n. \n",
    "temiadesina": "Hi @blueyed \nFacing this same issue @eligreg please what was the fix, thanks!. ",
    "bascoe10": "@temiadesina \nRunning the command pyenv init and the do the following fixed the issue for me.\n```\nLoad pyenv automatically by appending\nthe following to ~/.zshrc:\neval \"$(pyenv init -)\"\n```. ",
    "zhouhao27": "Didn't work for me although pyenv local xxx.xxx works.\neval \"$(pyenv init -)\" in my ~/.zshrc when I use zsh shell or \nstatus --is-interactive; and source (pyenv init -|psub) in my ~/.config/fish/config.fish when I use fish shell.\n. I think it's fish shell's problem.. ",
    "sellers": "for some reason, this is not working for me: \n```\nif which pyenv-virtualenv-init > /dev/null\nthen \n    eval \"$(pyenv virtualenv-init -)\"\nfi\n```\nso I had to remove the which conditions, leaving just the eval line, and start a new login shell and it then worked.   I do have pyenv-virtualenv-init installed but somehow the shell was borking.   In case others have similar issues.\n. ",
    "innovia": "it may help others to know -\nadd the eval to the end of the .zshrc file. ",
    "SirZach": "Based on the README I thought the steps in Basic Github Checkout were only if you didn't do a brew install. Running steps 2 and 3 after installing through brew fixed this problem for me.. ",
    "zmwangx": "@yyuu You're welcome. By the way 3.6.1rc1 (just merged) needs to go through this replacement too.. ",
    "madduck": "@blueyed shouldn't this be in bats even?. ",
    "chebee7i": "Correct, but *-latest tags aren't reliable if you don't want the build to change out from under you the next time you set up pyenv since they may point to the next version of Python at that time.. ",
    "xiaochenwang94": "I have solve this problem by using pip3.. ",
    "stefanos82": "@garar To fix your problem run pyenv shell 3.6.0; now it should work. To confirm that is works, try python-config --cflags and you should see the path that points at pyenv's directory.. > I understand changing the shell's environment is difficult without sourcing a script or starting a new shell. Is there a way pyenv can handle this? Is there a pip hook that could provide an opportunity for pyenv to install shims for each script when installed?\nI don't know whether this relates to your situation or not, but in my case I was facing a serious issue with Cython; it would not link my object properly due to broken signatures.\nThen something hit me and decided to run python-config --cflags manually and confirm what I suspected it could be the case. Indeed, the aforementioned command was pointing to my local 2.7.x version, whereas python3-config --cflags would point to my local 3.5.x version.\nI asked myself, \"has the virtualenv that was built with Python 3.6.1 assigned the default version to shell for me or not?\". As you can guess, it didn't and I had to set it myself.\nWith pyenv shell 3.6.1, command python-config --cflags would work as expected.\nThat was a very trick issue and I hope @yyuu can enlighten us with a better alternative solution.\nI would like my virtual environment to automatically assigned Python version to shell and when I am outside my virtual environment to have access to local versions.. ",
    "hhstore": "@stefanos82 \n```python\npyenv shell 3.6.0\n```\nfix for me. thanks.\n. ",
    "alberthdev": "I'm not 100% sure, but if make does perform the install, then this may be on Python's end... if that's the case, it might be useful to provide a temporary workaround, e.g. grep for --enable-optimizations and then only run make if it's detected.\nI'll do some further testing to see if this is the case!. ",
    "thehesiod": "typically on windows builds if you enable whole program optimization (https://msdn.microsoft.com/en-us/library/0zza0de8.aspx) it needs to run the built binary once to collect run time statistics, and then re build/link to the optimal way.  Probably something similar happening here. This may be as designed.. ",
    "draeath": "PGO intentionally builds twice. First pass is instrumented and is fed a training workload.\nThis is then used to build the \"final\" pass, the optimizations derived from that instrumented training workload.\nReally, --enable-optimizations should probably be enabled in pyenv by default.... Seems this causes weirdness with python 2.7.13 at least. pyenv treats the missing modules like sunaudiodev as a build error and bails out, even though these are not fatal errors (indeed sunaudiodev is useless when not on a Sun box).\nPython 3.6.2 builds fine though, so I blame this on a problem/quirk with the 2.7.x makefiles (setup.py is supposed to check for sun hardware, in that particular case, so it shouldn't even whine about it). Keep in mind, the results can be big. On our HPC system, I've seen up to 15%-20% faster code execution in some cases.\nWorth considering.. \"master is something like that\" what does this mean? Are changes pushed to the master branch without testing? That's my major concern, I'd like to be able to track master if it's \"safe\" to do so in an unattended manner.. Thank you both!. This was introduced by #1092 I believe?. I don't suppose there's any way to squelch the assert output, there?. This may do the trick: https://github.com/pyenv/pyenv/blob/d08c9cfb362c5a7e18a92acd2253a16935ad9a99/test/init.bats#L59-L63. Indeed! This does squelch the output. Since you won't be changing the contents of pyenv in this scenario, disabling the rehash shouldn't have any side effects.\nYou can implement this by tweaking your pyenv init call to look like this:\neval \"$(pyenv init - --no-rehash)\". ",
    "chaimleib": "I actually don't want --enable-optimizations by default. Instead of taking 2 minutes, installing a new python version would take about 18 minutes. That's significant to me.\n```\n$ time CONFIGURE_OPTS=--enable-optimizations pyenv install 3.7.1\npython-build: use openssl from homebrew\npython-build: use readline from homebrew\nDownloading Python-3.7.1.tar.xz...\n-> https://www.python.org/ftp/python/3.7.1/Python-3.7.1.tar.xz\nInstalling Python-3.7.1...\npython-build: use readline from homebrew\nInstalled Python-3.7.1 to /Users/chalbert/.pyenv/versions/3.7.1\n18m20.527s\n$ pyenv uninstall 3.7.1\npyenv: remove /Users/chalbert/.pyenv/versions/3.7.1? y\n$ time pyenv install 3.7.1\npython-build: use openssl from homebrew\npython-build: use readline from homebrew\nInstalling Python-3.7.1...\npython-build: use readline from homebrew\nInstalled Python-3.7.1 to /Users/chalbert/.pyenv/versions/3.7.1\n2m19.275s\n```\nMy system:\nmacOS 10.14.2\n1x 4-core 2.8 GHz Intel Core i7-7700HQ (4 cores total)\n16 GB RAM. ",
    "ridhwaans": "Yes, I had cloned plugins in plugins/ originally, I need to modify it as a submodule because my dotfiles repo script installs .apps and plugins like pyenv as submodules. ",
    "truthdoug": "PR: https://github.com/pyenv/pyenv/pull/867. Link to section added.. ",
    "junjielizero": "@blueyed The problem is that I didn't remove pyenv  completely. And it works when reinstalling again.. It's fixed and find no problem now. I think  \"delete some related files which leads to this result\"  mislead you and it's my fault.  I mean that I carelessly delete some files under root directory(rm -rf ~). I guess this command makes some files about pyenv disappear, so I get the problem as above. . ",
    "yuu": "I think mention name is a mistake.. ",
    "Vortander": "I have the same request. Please, add anaconda 4.3.1 to pyenv install list.  I'm having serious problems with previous versions of anaconda in mac OS Sierra.. ",
    "NickAnderegg": "This does appear to fix that issue. Running $ pyenv install -v anaconda2-4.2.0 install with the old version gives me:\n```\n/var/folders/gt/gqdpv1dd6158qfq2ywlj9x2c0000gn/T/python-build.20170326151556.52092 ~/github\nchecksum mismatch: /Users/nick/.pyenv/cache/Anaconda2-4.2.1-MacOSX-x86_64.sh (file is corrupt)\nexpected a8b3ef86233635d9dcc3499dc384980762a0b42d354a318f8307029c399db452, got 834ac0287062929ab5930661735ee617fd379bdfe79f3e0a20aebd614835b6c5\nDownloading Anaconda2-4.2.1-MacOSX-x86_64.sh...\n``\nRunning with the updated definition throws no such error. Although it's a bit of a weird error since the834ac0287062929ab5930...` hash it is getting is the correct hash for Anaconda2-4.3.0-MacOSX-x86_64. Not sure why this typo pulls the shell script for the next version of the file, but in any case, both versions now install properly on macOS Sierra 10.12.3.. ",
    "sschaetz": "Any thoughts?. I think you're right. The issue we saw was very likely due to SIGKILL.. ",
    "MathiasSM": "If the documentation says installing pyenv via homebrew (and updating via it) is an option, it should work at  least as expected, I believe... In any case, couldn't this be solved by putting some symlinks to the python binaries and shims? (at least I did this manually and works as usual) I still can't understand why \"git pulling\" as upgrading mechanism is not a thing with homebrew. I just ask for the documentation to explicitly state the fact (and maybe state a solution) . ",
    "FrederickGeek8": "EDIT: Okay now I'm confused... pyenv (as of the latest Homebrew version) appears to be using ~/.pyenv... Whoops? I'm looking into it to see if it might be an issue on my end (perhaps using the pyenv oh-my-zsh plugin).\nEDIT 2: It appears to be an issue with using the default oh-my-zsh plugin, which typically uses the Homebrew installation directory for installing Python (thus leading to my issues). I'll perhaps submit a PR to see if this is behavior they are willing to change (The pyenv README has the reader set the PYENV_ROOT to be a user-specific directory).\n~~I know this is an old conversation, but seeing as it is still an active issue, I believe that its related to #815. I think that it wouldn't be unreasonable to perhaps integrate, by default, the solution outlined in that issue. Quoting their solution:~~\n\n~~I think, the problem is that pyenv stores installed versions under ./versions relative path. When brew upgrades, it completely replaces pyenv directory, which means it removes the contents of ./versions too.~~\n~~I've explicitly set PYENV_ROOT variable to ~/.pyenv, in order to store everything under ~/.pyenv/versions now. I then tried reinstalling pyenv and everything seems to work properly this time. Just make sure to export PYENV_ROOT before calling pyenv init. I also manually expanded ~ to /Users/usrname just to be safe.~~\n~~@naglalakk hope this helps!~~\n\n~~It would be ideal that perhaps through a build parameter passed by the Homebrew installation, that pyenv by default stores Python versions in a separate directory. The current upgrade method through Homebrew is extremely frustrating since I don't know what packages I had installed (some of which were manual installations), and so I'm going to have to rebuild and reinstall all Python packages I had previously for my projects.~~\n~~I believe a change like this is definitely warranted and important, especially because the first words of the Installation section in the README are~~\n\n~~If you're on Mac OS X, consider installing with Homebrew.~~. \n",
    "omdv": "I just lost my environments by running an automated brew upgrade script - second time in about a year, my fault really about running in a same issue twice. Anyhow, according to comments above it appears that installing with homebrew is not recommended, because it will break when one eventually runs upgrade and cleanup. I agree with @MathiasSM in that homebrew should not be recommended as a default installation mechanism or at least have a clear warning about this behavior.. ",
    "xaque208": "This remains to be an issue on 3.6.2.. This remains an issue on 3.6.4.\nCreating directory /home/zach/.pyenv/versions/3.6.4/share/man\nCreating directory /home/zach/.pyenv/versions/3.6.4/share/man/man1\n/usr/bin/install -c -m 644 ./Misc/python.man  /home/zach/.pyenv/versions/3.6.4/share/man/man1/python3.6.1\nif test ! -d /home/zach/.pyenv/versions/3.6.4/lib/pkgconfig; then  echo \"Creating directory /home/zach/.pyenv/versions/3.6.4/lib/pkgconfig\";  /usr/bin/install -c -d\n -m 755 /home/zach/.pyenv/versions/3.6.4/lib/pkgconfig;  fi\nif test -f /home/zach/.pyenv/versions/3.6.4/bin/python3 -o -h /home/zach/.pyenv/versions/3.6.4/bin/python3;  then rm -f /home/zach/.pyenv/versions/3.6.4/bin/python3\n;  else true;  fi\n(cd /home/zach/.pyenv/versions/3.6.4/bin; ln -s python3.6 python3)\nif test \"3.6\" != \"3.6m\"; then  rm -f /home/zach/.pyenv/versions/3.6.4/bin/python3.6-config;  (cd /home/zach/.pyenv/versions/3.6.4/bin; ln -s python3.6m-config pytho\nn3.6-config);  rm -f /home/zach/.pyenv/versions/3.6.4/lib/pkgconfig/python-3.6m.pc;  (cd /home/zach/.pyenv/versions/3.6.4/lib/pkgconfig; ln -s python-3.6.pc python-\n3.6m.pc);  fi\nrm -f /home/zach/.pyenv/versions/3.6.4/bin/python3-config\n(cd /home/zach/.pyenv/versions/3.6.4/bin; ln -s python3.6-config python3-config)\nrm -f /home/zach/.pyenv/versions/3.6.4/lib/pkgconfig/python3.pc\n(cd /home/zach/.pyenv/versions/3.6.4/lib/pkgconfig; ln -s python-3.6.pc python3.pc)\nrm -f /home/zach/.pyenv/versions/3.6.4/bin/idle3\n(cd /home/zach/.pyenv/versions/3.6.4/bin; ln -s idle3.6 idle3)\nrm -f /home/zach/.pyenv/versions/3.6.4/bin/pydoc3\n(cd /home/zach/.pyenv/versions/3.6.4/bin; ln -s pydoc3.6 pydoc3)\nrm -f /home/zach/.pyenv/versions/3.6.4/bin/2to3\n(cd /home/zach/.pyenv/versions/3.6.4/bin; ln -s 2to3-3.6 2to3)\nrm -f /home/zach/.pyenv/versions/3.6.4/bin/pyvenv\n(cd /home/zach/.pyenv/versions/3.6.4/bin; ln -s pyvenv-3.6 pyvenv)\nif test \"x\" != \"x\" ; then  rm -f /home/zach/.pyenv/versions/3.6.4/bin/python3-32;  (cd /home/zach/.pyenv/versions/3.6.4/bin; ln -s python3.6-32 python3-32)  fi\nrm -f /home/zach/.pyenv/versions/3.6.4/share/man/man1/python3.1\n(cd /home/zach/.pyenv/versions/3.6.4/share/man/man1; ln -s python3.6.1 python3.1)\nif test \"xupgrade\" != \"xno\"  ; then  case upgrade in  upgrade) ensurepip=\"--upgrade\" ;;  install|*) ensurepip=\"\" ;;  esac;   ./python -E -m ensurepip  $ensurepip --\nroot=/ ;  fi\nCollecting setuptools\nCollecting pip\nInstalling collected packages: setuptools, pip\nSuccessfully installed pip-9.0.1 setuptools-28.8.0\nThis looks to be the issue to me if test \"3.6\" != \"3.6m\";, but I don't know where that is coming from.  Looks like the version built doesn't match the version we expect, even though the build is successful.. Seems like the build script might be doing something funny.\nLeaving the sources in place, I can run the following.\ncd ~/.pyenv/sources/3.6.6/Python-3.6.6\n./configure --prefix ~/.pyenv/versions/3.6.6\nmake install\nThe above works, which allows me to pyenv global 3.6.6 and have a functional pyenv.. I also needed to manually update my shims and ensure that the correct versions were linked in the bin directory.  It seems the trailing m is coming from the python build.. Let me know what you think.  I believe I may yet need to include another symlinks for pip, when only pip3 is created.  I can follow up later.. ",
    "norpol": "I should have used eval \"$(pyenv init -)\". ",
    "menduo": "@yyuu done.. yes, my mistake.. ",
    "Daenyth": "OK, resolved this by RTFM.. eval \"$(pyenv init -)\"\nPATH=\"$(pyenv root)/shims:$PATH\"\nexport PATH\npyenv local 3.5.2. I guess I'm not. The error message told me to report the bug here, so I did.\nWhy isn't there a 3.6.0 and 3.6.1 option?. I have pyenv 1.0.10 according to --version, it's the latest installable with homebrew. Though checking homebrew, it seems that homebrew versions pyenv at 20160509.\nIs that something you guys need to handle or should I bug homebrew to update their stuff?. @joshfriend Looking at the releases tab on this repo it seems that I do have the latest release of pyenv, but I definitely don't have a 3.6.0 or 3.6.1\n$> pyenv install -l | grep ' 3\\.6'\n  3.6.0a4\n  3.6-dev. The installation instructions tell me to install it with homebrew.\nI uninstalled it and deleted ~/.pyenv. After reinstalling I do see the current 3.6 versions, so I have no idea what went wrong there.. ",
    "xareelee": "I found adding eval \"$(pyenv init -)\" in the ~/.bash_profile solves this issue.. ",
    "edarioq": "If you use zsh, make sure to add @xareelee's answer to your .zshrc file instead. /.zshrc. ",
    "fernand0": "Sorry, I'm not familiar with openwrt neither. Maybe it is the BusyBox you say. Just in case, there is no od available but I have hexdump. The result of echo foo | sha256sum -b | hexdump -c is:\nshell\n0000000   b   5   b   b   9   d   8   0   1   4   a   0   f   9   b   1\n0000010   d   6   1   e   2   1   e   7   9   6   d   7   8   d   c   c\n0000020   d   f   1   3   5   2   f   2   3   c   d   3   2   8   1   2\n0000030   f   4   8   5   0   b   8   7   8   a   e   4   9   4   4   c\n0000040           -  \\n                                                \n0000044\nIt looks equal than your output and mine in an Ubuntu box.\n. ",
    "Gr1N": "Got same problem with alpine:3.6:\n```\n/usr/local/pyenv # ./bin/pyenv install 3.6.2\nDownloading Python-3.6.2.tgz...\n-> https://www.python.org/ftp/python/3.6.2/Python-3.6.2.tgz\nBUILD FAILED (Alpine Linux 3.6.2 using python-build 1.1.3-23-gd92e190)\nInspect or clean up the working tree at /tmp/python-build.20170825154613.344\nResults logged to /tmp/python-build.20170825154613.344.log\nLast 10 log lines:\n/tmp/python-build.20170825154613.344 /usr/local/pyenv\nchecksum mismatch: Python-3.6.2.tar.gz (file is corrupt)\nexpected 7919489310a5f17f7acbab64d731e46dca0702874840dadce8bd4b2b3b8e7a82, got 7919489310a5f17f7acbab64d731e46dca0702874840dadce8bd4b2b3b8e7a82 <-- extra space here\n```\nAnd output:\n/usr/local/pyenv # echo foo | sha256sum -b | hexdump -c\n0000000   b   5   b   b   9   d   8   0   1   4   a   0   f   9   b   1\n0000010   d   6   1   e   2   1   e   7   9   6   d   7   8   d   c   c\n0000020   d   f   1   3   5   2   f   2   3   c   d   3   2   8   1   2\n0000030   f   4   8   5   0   b   8   7   8   a   e   4   9   4   4   c\n0000040           -  \\n\n0000044. Details about sha256sum on alpine https://github.com/gliderlabs/docker-alpine/issues/174#issuecomment-222951567. @yyuu, could you please look? Maybe we can fix this on pyenv side?. Here is a simple fix:\n```\ndiff --git a/plugins/python-build/bin/python-build b/plugins/python-build/bin/python-build\nindex 1037006..f48f8dd 100755\n--- a/plugins/python-build/bin/python-build\n+++ b/plugins/python-build/bin/python-build\n@@ -282,7 +282,7 @@ has_checksum_support() {\n verify_checksum() {\n   local checksum_command\n   local filename=\"$1\"\n-  local expected_checksum=\"$(echo \"$2\" | tr [A-Z] [a-z])\"\n+  local expected_checksum=\"$(echo \"$2\" | tr [A-Z] [a-z] | tr -d \" \")\"\n# If the specified filename doesn't exist, return success\n   [ -e \"$filename\" ] || return 0\n@@ -304,7 +304,7 @@ verify_checksum() {\n   has_checksum_support \"$checksum_command\" || return 0\n# If the computed checksum is empty, return failure\n-  local computed_checksum=echo \"$($checksum_command < \"$filename\")\" | tr [A-Z] [a-z]\n+  local computed_checksum=echo \"$($checksum_command < \"$filename\")\" | tr [A-Z] [a-z] | tr -d \" \"\n   [ -n \"$computed_checksum\" ] || return 1\nif [ \"$expected_checksum\" != \"$computed_checksum\" ]; then\n```\nI can create PR if it looks good.. PR and issue in https://github.com/rbenv/ruby-build were created.. @yyuu @blueyed could you please release new version of pyenv with fix?. Yes, for example, I want to build docker images with pyenv and I want stricly specify which version of pyenv I want to use. I don't want to use master because on each docker image rebuild I can possibly have new version of pyenv. This is a common practice to pin dependency versions.. @blueyed do you have any release date?\nYour product currently broken for some users, why you don't want to release a bug fix version?. @blueyed oh, sorry.. ",
    "tekumara": "Installing into ~/.zshenv didn't work for me but ~/.zshrc did.. Yep still didn't work.. The following fixed it for me: python -m pip install --force-reinstall pip. ",
    "andrebautista": "Can confirm this change is necessary. It seems as though the .zshenv paths are being added after usr/bin and usr/local/bin. When I move them to the .zshrc file the pyenv paths are added before and the correct python version is used.. ",
    "saimn": "This would be especially useful with virtualenvs. It's cumbersome to have to recreate all envs just for a minor version update. Would it be possible to have a major/minor version distinction ? . ",
    "nvllsvm": "Look into using a user site-packages directory. It will organize packages by major/minor versions.\nhttps://docs.python.org/3.7/library/site.html. ",
    "LarsFronius": "Good to know @yyuu - thanks for the insight! Do you want me to explore adding a flag or similar to do so?\nOtherwise I might just patch pyenv on my end for my use-case.\nUp to you whether you think this could be part of pyenv's core or not.. Thanks @yyuu !\nFor anybody else who is interested in doing so, I published the code at and installation instructions at https://gist.github.com/LarsFronius/4d3167dfd0df168d2ab50576e3ebd315. ",
    "aaronchn": "Thanks your attention.\nOpenssl certainly installed in my OS.\n[aaron@hp ~]$ openssl\nopenssl      openssl-1.0\n[aaron@hp ~]$\nTry to install python 2.5.6 (2011-05-26) will show the same error\uff01\nTry to install python 2.6.9(2013-10-29) 2.7.1(2010-11-27) will show \"ERROR: The Python ssl extension was not compiled. Missing the OpenSSL lib?\" But follow here can sovled the problem. \n. ",
    "rodneykeeling": "Also having this issue.. ```\n\npacman -Q | grep openssl     \nlib32-openssl 1:1.1.0.e-1\nlibcurl-openssl-1.0 7.54.0-2\nlibopenssl-1.0-compat 1.0.2.k-3\nopenssl 1.1.0.e-1\nopenssl-1.0 1.0.2.k-3\npython-pyopenssl 17.0.0-1\npython2-pyopenssl 17.0.0-1\n```\nInteresting, though\u20142.7.13 installed just fine, but for the sake of testing, I just tried installing 2.7.9 (\u274c), 2.7.10 (\u274c), 2.7.11 (\u274c), and 2.7.12 (\u274c). So it only seems to be working (on my machine) for 2.7.13.\n\nHere is an output for one of the failed versions:\n```bash\n\npyenv install 2.7.9 \nDownloading Python-2.7.9.tar.xz...\n-> https://www.python.org/ftp/python/2.7.9/Python-2.7.9.tar.xz\nInstalling Python-2.7.9...\npatching file ./Lib/site.py\npatching file ./Lib/ssl.py\nERROR: The Python ssl extension was not compiled. Missing the OpenSSL lib?\n\nPlease consult to the Wiki page to fix the problem.\nhttps://github.com/pyenv/pyenv/wiki/Common-build-problems\nBUILD FAILED (Arch Linux using python-build 1.0.10-22-g3292200)\nInspect or clean up the working tree at /tmp/python-build.20170519121640.18276\nResults logged to /tmp/python-build.20170519121640.18276.log\nLast 10 log lines:\nrm -f /home/rodney/.pyenv/versions/2.7.9/share/man/man1/python.1\n(cd /home/rodney/.pyenv/versions/2.7.9/share/man/man1; ln -s python2.1 python.1)\nif test \"xno\" != \"xno\"  ; then \\\n    case no in \\\n        upgrade) ensurepip=\"--upgrade\" ;; \\\n        install|*) ensurepip=\"\" ;; \\\n    esac; \\\n     ./python -E -m ensurepip \\\n        $ensurepip --root=/ ; \\\nfi\n```. ",
    "MaximilianKindshofer": "Ok I may not been any version (sorry I was frustrated at this point)\n3.6.1 works for me too 3.5.1 fails (not sure if 3.5.1 qualifies as an older version)\nBut at least I am not the only one - I was getting mad over this. ",
    "KenMacD": "I ran in to this trying to install 3.3.6 and it installed using:\nLDFLAGS=-L/usr/lib/openssl-1.0 CFLAGS=\"-DOPENSSL_NO_SSL3 -I/usr/include/openssl-1.0\" pyenv install -v 3.3.6. ",
    "alisianoi": "For me on Archlinux with current version of pyenv from github master, the following works:\npyenv install 2.7.13\nBut all these (as reported by @rodneykeeling) are failing: 2.7.9, 2.7.10, 2.7.11, 2.7.12. Additionally pyenv install 2.7 also fails. The failure is the same as above: missing OpenSSL lib.\nMy pyenv is:\nalex@k-2so ~ % pyenv --version\npyenv 1.0.10-48-g01d3985. ",
    "bbcoimbra": ":+1: for pyenv install 2.7.13 as said by @all3fox \nit worked for\n$ uname -a\nLinux morgana 4.11.6-3-ARCH #1 SMP PREEMPT Thu Jun 22 12:21:46 CEST 2017 x86_64 GNU/Linux\n$ pyenv --version\npyenv 1.1.1-5-g7467eec. ",
    "agireud": "Running on a fresh Arch Linux and encountered the same issue installing python 3.4.3.\nCan confirm that @KenMacD's solution worked.\nLDFLAGS=-L/usr/lib/openssl-1.0 CFLAGS=\"-DOPENSSL_NO_SSL3 -I/usr/include/openssl-1.0\" pyenv install -v 3.4.3. ",
    "vlcinsky": "I had very similar issue on Ubuntu 16.04.\nInitially all worked well (installed python 2.7.13 and 3.6.1 via pyenv), used it with tox.\nAfter some moment (probably after some updates of the system) I was unable to install anything via pip with the error complaining about missing SSL/TLS support.\nMy solution: use pyenv to uninstall and install the python environment. Since then, it works.. ",
    "jimcrozier": "fwiw I solved this on centos by installing openssl-devel.. ",
    "aadeshere1": "OpenSSL 1.1.0\nCan confirm @KenMacD solution works for 2.7.9 \ud83d\udc4d . ",
    "dmarcoux": "I had the same issue and ended up using the following:\nLDFLAGS=\"-L/usr/lib/openssl-1.0\" CFLAGS=\"-I/usr/include/openssl-1.0\" pyenv install -v 3.4.3\nI added it to the wiki's Common build problems page. Thanks to @KenMacD for the original solution. I only removed -DOPENSSL_NO_SSL3 inside CFLAGS as it didn't make a difference.. ",
    "davidrios": "On Debian 9 the libssl-dev package is for version 1.1.0, to compile older Pythons you need to install libssl1.0-dev. But you can only have one installed, so install libssl1.0-dev to compile Python, then install libssl-dev to get the latest version again.. ",
    "urkh": "On Manjaro 18, v3.1.3 works with \nLDFLAGS=-L/usr/lib/openssl-1.0 CFLAGS=\"-DOPENSSL_NO_SSL3 -I/usr/include/openssl-1.0\" pyenv install -v 3.1.3. ",
    "IgnacioRubioScola": "The solution was to uninstall Python:\n$ pyenv uninstall 3.6.1\nand then reinstall it with shared library support as:\n$ CONFIGURE_OPTS=--enable-shared pyenv install 3.6.1\n(https://github.com/pyenv/pyenv/issues/82). ",
    "tango4j": "This would solve the problem. \n$ sudo apt-get install libpython3.6-dev \nhttps://www.thelinuxfaq.com/ubuntu/ubuntu-17-04-zesty-zapus/libpython3.6-dev. ",
    "indobits": "\nCONFIGURE_OPTS=--enable-shared pyenv install 3.6.1\n\n@IgnacioRubioScola thanks, worked for me. ",
    "squeaky-pl": "The problem is glibc version, portably pypy switched from Centos5 to Centos6 since Centos5 is also EOL. That means that you need a distro with glibc 2.17 or newer.. ",
    "jackfischer": "@alex I don't know if you are using pyenv through homebrew but in trying to get this I just discovered you can run brew upgrade pyenv --HEAD for a quick fix.. ",
    "pouledodue": "creating a virtualenv using python (not jython) like this:\npyenv virtualenv 2.7.12 test\nis OK and gives me no error. ",
    "psamim": "Yes, thanks.. ",
    "arcanosam": "thanks for trying help me\nstill don't work. \npython is installed without error, but the same error persist when I try to import tkinter\nmy builds below:\n\nbuild tcl/tk on centos 7:\nhttps://pastebin.com/nuZza4WM\nbuilding python with pyenv:\nhttps://pastebin.com/HSuvGNSH. Hi! thanks for help and sorry for my delay...\n\nHere the log:\nhttps://pastebin.com/sS3jTVJP\nhope help to find what problem...\nsometimes I think it's a problem in how tcl/tk is builded for python use when it's building..\nor some symbolic link for python after install... . @ruyingghost sorry, but I abandoned this problem waiting here a solution too.\nFor a while I will not have time to try once more... But I will in the future\nAnd there I'll try the suggestion of @nakano-masahiro too,  thanks by the way! \nSorry for my delay in response.... ",
    "ruyingghost": "@arcanosam \nDid you solve you the problem of pyenv + python3 +tkinter?\nI tried every answer from google and could not kill the error:\nModuleNtoFoundError: No module name '__tkinter'. ",
    "nakano-masahiro": "try python 3.5 but 3.6. ",
    "laurent101": "Thanks for picking up on this so quickly!\nPATH\nexport PATH=\"/usr/local/bin:/usr/bin:/bin:JENV_ROOT=/usr/local/var/jenv:$PATH\"\nPYENV\nexport PYENV_ROOT=\"${HOME}/.pyenv\"\nif [ -d \"${PYENV_ROOT}\" ]; then\n    export PATH=\"${PYENV_ROOT}/bin:${PATH}\"\n    eval \"$(pyenv init -)\"\nfi\nPYENV-VIRTUALENV\neval \"$(pyenv virtualenv-init -)\"\nexport PYENV_VIRTUALENV_DISABLE_PROMPT=1\n. Blueyed, that solved the problem. Many thanks for your assistance!. Really sorry about the late reply. I was offline for a couple of days. Running source ~/.bash_profile with set -x /+x I discovered there was a typo in the command line for eliminating duplicates in PATH.  . ",
    "ilovezfs": "@Samureus yes I know that hehe. I'm really making a request that you designate 1.1.0 as the latest release on GitHub as it's confusing to the Homebrew livecheck system if the newest tag != current GitHub release. We get one answer when consulting the tags and a different answer when consulting the API. In general, I will always defer to the API not the greatest tag, since if the API returns anything for the latest version, that means it was explicitly designated as a release by upstream. If the API returns nothing, then I would go with the greatest tag. In your case, there's a conflict between the two, hence this issue.. Josephs-MacBook-Pro:~ joe$ latest pyenv\n1.1.0\nMuch better! Thank you :). @Samureus it seems they have diverged again. https://github.com/pyenv/pyenv/releases/latest is pointing to 1.1.2 but the most recent tag is 1.1.3.. @yyuu thanks!. ",
    "victorbstan": "Found this fix: https://github.com/pyenv/pyenv/issues/228. ",
    "Claudius42": "Looks like it fails due to the PYTHON_CONFIGURE_OPTS. When I just execute 'pyenv install 2.7.10' it successfully installs python 2.7.10.\nHowever, I think I need to set those config opts in order to use it with clang as described here: https://github.com/macvim-dev/macvim/wiki/Python-2.x-and-Python-3.x. ",
    "marekyggdrasil": "Did you run xcode-select --install before the build?. ",
    "ffrddrll": "Same issue here on OS X 10.13.1\nSame error after ran xcode-select --install\nAlso I googled 'SystemStubs', top results hint that SystemStubs library no longer exists after OS X Lion. ",
    "siming85": "+1... doesn't work with Python 3.4.7 either. ",
    "gmaybrun": "Has there been any movement on this? I'm trying to create a Docker image for running PySpark tests that extends from openjdk:8 (which extends from buildpack-deps:stretch-scm which is basically just Debian Stretch) and it would be really nice to be able to run tests using python 3.4.. ",
    "jsoref": "For reference this impacts Ubuntu bionic as well (since that's the first Ubuntu to get 1.1 which flowed from Debian stretch).. ",
    "rgeens": "Unfortunately in bionic installing the 1.0 dev version uninstalls the 1.1 dev version, and everything that depends on it, including npm / nodejs.. ",
    "JustAnotherArchivist": "I succeeded in building 3.4.8 on Debian Stretch while keeping the 1.1 headers. This is really a dirty workaround though, not a proper fix to this issue.\nAs others have mentioned before, installing the 1.0 headers through apt doesn't work (unless you can live without the 1.1 headers). The two -dev packages conflict with each other since there is no concept like sonames for header files.\nMy workaround is simply to install the headers in a separate directory somewhere in my home directory. That's not a true installation, and most notably, package upgrades will have to be done manually. Download the libssl1.0-dev .deb (e.g. using apt-get download libssl1.0-dev) and extract it, then extract the contents of data.tar.gz somewhere. I put it in ~/libssl1.0-dev, but ~/.local would probably be a better place for it (in which case you should consider using GNU Stow if you want to install other things there sometime). The location doesn't really matter much except that you need it in the later commands.\n> mkdir ~/libssl1.0-dev\n> cd ~/libssl1.0-dev\n> apt-get download libssl1.0-dev\n> ar x libssl1.0-dev_1.0.2l-2+deb9u3_amd64.deb data.tar.xz\n> tar -xf data.tar.xz --strip-components=2\n> rm data.tar.xz\n\nThe libssl1.0-dev package contains two symlinks for libssl.so and libcrypto.so, and these don't point anywhere in that directory. We could \"install\" libssl1.0 into the same directory to work around this, but I really didn't want to do that, so I just set up two symlinks (the last path segment may be different depending on your computer architecture):\n> ln -s /usr/lib/x86_64-linux-gnu/libcrypto.so.1.0.2 ~/libssl1.0-dev/lib/x86_64-linux-gnu\n> ln -s /usr/lib/x86_64-linux-gnu/libssl.so.1.0.2 ~/libssl1.0-dev/lib/x86_64-linux-gnu\n\nThen, we need to tell Python about these files. This means setting a bunch of environment variables:\n > CFLAGS=\"-I${HOME}/libssl1.0-dev/include -I${HOME}/libssl1.0-dev/include/x86_64-linux-gnu\" LDFLAGS=\"-L${HOME}/libssl1.0-dev/lib/x86_64-linux-gnu\" pyenv install 3.4.8\n\nThis will let it compile and install. There is no need to set an LD_LIBRARY_PATH or other environment variable to run Python since OpenSSL is installed in /usr/lib. You can remove ~/libssl1.0-dev after installation if you want; the header files are only needed for compilation.\n> pyenv shell 3.4.8\n> python -V\nPython 3.4.8\n> python -c 'import ssl; print(ssl.OPENSSL_VERSION)'\nOpenSSL 1.0.2l  25 May 2017. @Benestar, I think it could probably be done but might be quite tricky.\n\nYou need the headers matching the installed OpenSSL version. Now, it might be possible to get away with just using the original headers from upstream OpenSSL, but I'm not sure if that would work in all cases. So you'd probably need distro-specific code, possibly also with variations for different versions of the distribution, and that gets very messy very quickly and would likely break on non-standard setups (e.g. self-compiled OpenSSL).. ",
    "Benestar": "@JustAnotherArchivist do you think this workaround can somehow be included in the pyenv install script? I guess we could automatically download the header files in a temporary directory, compile the specified python version and afterwards clean the mess up.. ",
    "YMMS": "Thanks for your quickly reply. \nI followed your suggestion. But no difference. The detail is as below:\nroot@9daf111ecbc0:~# pyenv install -v 3.5.3\nDownloading Python-3.5.3.tar.xz...\n-> https://www.python.org/ftp/python/3.5.3/Python-3.5.3.tar.xz\nroot@9daf111ecbc0:~# pyenv activate --\n--help   --unset. ",
    "yuto425": "I had the same problem. I could successfully install after installing curl\napt-get -y install curl. ",
    "villancikos": "I am closing this issue as it was a personal problem however, I am leaving the solution which was some flags configured in my .bashrc file:\nexport CFLAGS=-m32\nexport CXXFLAGS=-m32\nexport LDFLAGS=-m32\nexport CLP_LIBRARIES=$HOME/Downloads/Coin-clp/lib\nexport LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/crti.o:$LIBRARY_PATH \n. ",
    "aitk": "What os and version are you using ? \nAlso the fix is right there in the message you will need to go to https://github.com/pyenv/pyenv/wiki/Common-build-problems#error-the-python-ssl-extension-was-not-compiled-missing-the-openssl-lib then just copy and paste the script for your specific os. ",
    "elderone": "Debian GNU/Linux 9.1 (stretch)\npyenv 1.1.3\nCFLAGS=-I/usr/include/openssl LDFLAGS=-L/usr/lib pyenv install -v 3.2.3\n```\nERROR: The Python ssl extension was not compiled. Missing the OpenSSL lib?\nPlease consult to the Wiki page to fix the problem.\nhttps://github.com/pyenv/pyenv/wiki/Common-build-problems\nBUILD FAILED (Debian 9.1 using python-build 20160602)\nInspect or clean up the working tree at /tmp/python-build.20170807132419.25380\nResults logged to /tmp/python-build.20170807132419.25380.log\nLast 10 log lines:\nrm -f /home/elderone/.pyenv/versions/3.2.3/bin/python3-config\n(cd /home/elderone/.pyenv/versions/3.2.3/bin; ln -s python3.2-config python3-config)\nrm -f /home/elderone/.pyenv/versions/3.2.3/lib/pkgconfig/python3.pc\n(cd /home/elderone/.pyenv/versions/3.2.3/lib/pkgconfig; ln -s python-3.2.pc python3.pc)\nrm -f /home/elderone/.pyenv/versions/3.2.3/bin/idle3\n(cd /home/elderone/.pyenv/versions/3.2.3/bin; ln -s idle3.2 idle3)\nrm -f /home/elderone/.pyenv/versions/3.2.3/bin/pydoc3\n(cd /home/elderone/.pyenv/versions/3.2.3/bin; ln -s pydoc3.2 pydoc3)\nrm -f /home/elderone/.pyenv/versions/3.2.3/bin/2to3\n(cd /home/elderone/.pyenv/versions/3.2.3/bin; ln -s 2to3-3.2 2to3)\n.\nbuilding 'ssl' extension\ngcc -pthread -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -I/usr/include/openssl -I/home/elderone/.pyenv/versions/3.2.3/include -fPIC -IInclude -I. -I./Include -I/home/elderone/.pyenv/versions/3.2.3/include\n -I/usr/include/x86_64-linux-gnu -I/usr/local/include -I/tmp/python-build.20170807132419.25380/Python-3.2.3 -c /tmp/python-build.20170807132419.25380/Python-3.2.3/Modules/_ssl.c -o build/temp.linux-x86_64-3.2/tm\np/python-build.20170807132419.25380/Python-3.2.3/Modules/_ssl.o\nIn file included from Include/Python.h:111:0,\n                 from /tmp/python-build.20170807132419.25380/Python-3.2.3/Modules/_ssl.c:17:\nInclude/modsupport.h:27:1: warning: \u2018PyArg_ParseTuple\u2019 is an unrecognized format function type [-Wformat=]\n PyAPI_FUNC(int) PyArg_ParseTuple(PyObject , const char , ...) Py_FORMAT_PARSETUPLE(PyArg_ParseTuple, 2, 3);\n ^~~~~~~~~~\n/tmp/python-build.20170807132419.25380/Python-3.2.3/Modules/_ssl.c: In function \u2018_create_tuple_for_X509_NAME\u2019:\n/tmp/python-build.20170807132419.25380/Python-3.2.3/Modules/_ssl.c:487:35: error: dereferencing pointer to incomplete type \u2018X509_NAME_ENTRY {aka struct X509_name_entry_st}\u2019\n             if (rdn_level != entry->set) {\n                                   ^~\n/tmp/python-build.20170807132419.25380/Python-3.2.3/Modules/_ssl.c: In function \u2018_get_peer_alt_names\u2019:\n/tmp/python-build.20170807132419.25380/Python-3.2.3/Modules/_ssl.c:607:16: error: dereferencing pointer to incomplete type \u2018X509_EXTENSION {aka struct X509_extension_st}\u2019\n         p = ext->value->data;\n                ^~\n/tmp/python-build.20170807132419.25380/Python-3.2.3/Modules/_ssl.c: In function \u2018PySSL_cipher\u2019:\n/tmp/python-build.20170807132419.25380/Python-3.2.3/Modules/_ssl.c:960:21: warning: assignment discards \u2018const\u2019 qualifier from pointer target type [-Wdiscarded-qualifiers]\n     cipher_protocol = SSL_CIPHER_get_version(current);\n                     ^\n/tmp/python-build.20170807132419.25380/Python-3.2.3/Modules/_ssl.c: In function \u2018context_new\u2019:\n/tmp/python-build.20170807132419.25380/Python-3.2.3/Modules/_ssl.c:1458:9: warning: \u2018TLSv1_method\u2019 is deprecated [-Wdeprecated-declarations]\n         ctx = SSL_CTX_new(TLSv1_method());\n         ^~~\nIn file included from /usr/include/openssl/ct.h:13:0,\n                 from /usr/include/openssl/ssl.h:61,\n                 from /tmp/python-build.20170807132419.25380/Python-3.2.3/Modules/_ssl.c:93:\n/usr/include/openssl/ssl.h:1612:1: note: declared here\n DEPRECATEDIN_1_1_0(__owur const SSL_METHOD TLSv1_method(void)) / TLSv1.0 /\n ^\n/tmp/python-build.20170807132419.25380/Python-3.2.3/Modules/_ssl.c:1465:27: warning: implicit declaration of function \u2018SSLv2_method\u2019 [-Wimplicit-function-declaration]\n         ctx = SSL_CTX_new(SSLv2_method());\n                           ^~~~~~~~~~~~\n/tmp/python-build.20170807132419.25380/Python-3.2.3/Modules/_ssl.c:1465:27: warning: passing argument 1 of \u2018SSL_CTX_new\u2019 makes pointer from integer without a cast [-Wint-conversion]\nIn file included from /tmp/python-build.20170807132419.25380/Python-3.2.3/Modules/_ssl.c:93:0:\n/usr/include/openssl/ssl.h:1321:17: note: expected \u2018const SSL_METHOD * {aka const struct ssl_method_st }\u2019 but argument is of type \u2018int\u2019\n __owur SSL_CTX SSL_CTX_new(const SSL_METHOD meth);\n                 ^~~~~~~~~~~\n/tmp/python-build.20170807132419.25380/Python-3.2.3/Modules/_ssl.c: In function \u2018PySSL_RAND_egd\u2019:\n/tmp/python-build.20170807132419.25380/Python-3.2.3/Modules/_ssl.c:1924:13: warning: implicit declaration of function \u2018RAND_egd\u2019 [-Wimplicit-function-declaration]\n     bytes = RAND_egd(PyBytes_AsString(path));\n             ^~~~~~~~\nAt top level:\n/tmp/python-build.20170807132419.25380/Python-3.2.3/Modules/_ssl.c:1974:13: warning: \u2018_ssl_thread_locking_function\u2019 defined but not used [-Wunused-function]\n static void _ssl_thread_locking_function\n             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/python-build.20170807132419.25380/Python-3.2.3/Modules/_ssl.c:1970:22: warning: \u2018_ssl_thread_id_function\u2019 defined but not used [-Wunused-function]\n static unsigned long _ssl_thread_id_function (void) {\n                      ^~~~~~~~~~~~~~~~~~~~~~~\nbuilding '_hashlib' extension\ngcc -pthread -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -I/usr/include/openssl -I/home/elderone/.pyenv/versions/3.2.3/include -fPIC -IInclude -I. -I./Include -I/home/elderone/.pyenv/versions/3.2.3/include\n -I/usr/include/x86_64-linux-gnu -I/usr/local/include -I/tmp/python-build.20170807132419.25380/Python-3.2.3 -c /tmp/python-build.20170807132419.25380/Python-3.2.3/Modules/_hashopenssl.c -o build/temp.linux-x86_6\n4-3.2/tmp/python-build.20170807132419.25380/Python-3.2.3/Modules/_hashopenssl.o\nIn file included from Include/Python.h:111:0,\n                 from /tmp/python-build.20170807132419.25380/Python-3.2.3/Modules/_hashopenssl.c:16:\nInclude/modsupport.h:27:1: warning: \u2018_PyArg_ParseTuple_SizeT\u2019 is an unrecognized format function type [-Wformat=]\n PyAPI_FUNC(int) PyArg_ParseTuple(PyObject , const char , ...) Py_FORMAT_PARSETUPLE(PyArg_ParseTuple, 2, 3);\n ^~~~~~~~~~\n/tmp/python-build.20170807132419.25380/Python-3.2.3/Modules/_hashopenssl.c:62:26: error: field \u2018ctx\u2019 has incomplete type\n     EVP_MD_CTX           ctx;   / OpenSSL message digest context /\n                          ^~~\n/tmp/python-build.20170807132419.25380/Python-3.2.3/Modules/_hashopenssl.c: In function \u2018EVP_dealloc\u2019:\n/tmp/python-build.20170807132419.25380/Python-3.2.3/Modules/_hashopenssl.c:129:5: warning: implicit declaration of function \u2018EVP_MD_CTX_cleanup\u2019 [-Wimplicit-function-declaration]\n     EVP_MD_CTX_cleanup(&self->ctx);\n     ^~~~~~~~~~~~~~~~~~\n/tmp/python-build.20170807132419.25380/Python-3.2.3/Modules/_hashopenssl.c: In function \u2018EVP_digest\u2019:\n/tmp/python-build.20170807132419.25380/Python-3.2.3/Modules/_hashopenssl.c:165:16: error: storage size of \u2018temp_ctx\u2019 isn\u2019t known\n     EVP_MD_CTX temp_ctx;\n                ^~~~~~~~\n/tmp/python-build.20170807132419.25380/Python-3.2.3/Modules/_hashopenssl.c:165:16: warning: unused variable \u2018temp_ctx\u2019 [-Wunused-variable]\n/tmp/python-build.20170807132419.25380/Python-3.2.3/Modules/_hashopenssl.c: In function \u2018EVP_hexdigest\u2019:\n/tmp/python-build.20170807132419.25380/Python-3.2.3/Modules/_hashopenssl.c:185:16: error: storage size of \u2018temp_ctx\u2019 isn\u2019t known\n     EVP_MD_CTX temp_ctx;\n                ^~~~~~~~\n/tmp/python-build.20170807132419.25380/Python-3.2.3/Modules/_hashopenssl.c:185:16: warning: unused variable \u2018temp_ctx\u2019 [-Wunused-variable]\n/tmp/python-build.20170807132419.25380/Python-3.2.3/Modules/_hashopenssl.c: At top level:\n/tmp/python-build.20170807132419.25380/Python-3.2.3/Modules/_hashopenssl.c:74:23: error: storage size of \u2018CONST_new_md5_ctx\u2019 isn\u2019t known\n     static EVP_MD_CTX CONST_new ## Name ## ctx; \\\n                       ^\n/tmp/python-build.20170807132419.25380/Python-3.2.3/Modules/_hashopenssl.c:77:1: note: in expansion of macro \u2018DEFINE_CONSTS_FOR_NEW\u2019\n DEFINE_CONSTS_FOR_NEW(md5)\n ^~~~~~~~~~~~~~~~~~~~~\n/tmp/python-build.20170807132419.25380/Python-3.2.3/Modules/_hashopenssl.c:74:23: error: storage size of \u2018CONST_new_sha1_ctx\u2019 isn\u2019t known\n     static EVP_MD_CTX CONST_new ## Name ## ctx; \\\n                       ^\n/tmp/python-build.20170807132419.25380/Python-3.2.3/Modules/_hashopenssl.c:78:1: note: in expansion of macro \u2018DEFINE_CONSTS_FOR_NEW\u2019\n DEFINE_CONSTS_FOR_NEW(sha1)\n ^~~~~~~~~~~~~~~~~~~~~\n/tmp/python-build.20170807132419.25380/Python-3.2.3/Modules/_hashopenssl.c:74:23: error: storage size of \u2018CONST_new_sha224_ctx\u2019 isn\u2019t known\n     static EVP_MD_CTX CONST_new ## Name ## ctx; \\\n                       ^\n/tmp/python-build.20170807132419.25380/Python-3.2.3/Modules/_hashopenssl.c:80:1: note: in expansion of macro \u2018DEFINE_CONSTS_FOR_NEW\u2019\n DEFINE_CONSTS_FOR_NEW(sha224)\n ^~~~~~~~~~~~~~~~~~~~~\n/tmp/python-build.20170807132419.25380/Python-3.2.3/Modules/_hashopenssl.c:74:23: error: storage size of \u2018CONST_new_sha256_ctx\u2019 isn\u2019t known\n     static EVP_MD_CTX CONST_new ## Name ## ctx; \\\n                       ^\n/tmp/python-build.20170807132419.25380/Python-3.2.3/Modules/_hashopenssl.c:81:1: note: in expansion of macro \u2018DEFINE_CONSTS_FOR_NEW\u2019\n DEFINE_CONSTS_FOR_NEW(sha256)\n ^~~~~~~~~~~~~~~~~~~~~\n/tmp/python-build.20170807132419.25380/Python-3.2.3/Modules/_hashopenssl.c:74:23: error: storage size of \u2018CONST_new_sha384_ctx\u2019 isn\u2019t known\n     static EVP_MD_CTX CONST_new ## Name ## ctx; \\\n                       ^\n/tmp/python-build.20170807132419.25380/Python-3.2.3/Modules/_hashopenssl.c:82:1: note: in expansion of macro \u2018DEFINE_CONSTS_FOR_NEW\u2019\n DEFINE_CONSTS_FOR_NEW(sha384)\n ^~~~~~~~~~~~~~~~~~~~~\n/tmp/python-build.20170807132419.25380/Python-3.2.3/Modules/_hashopenssl.c:74:23: error: storage size of \u2018CONST_new_sha512_ctx\u2019 isn\u2019t known\n     static EVP_MD_CTX CONST_new ## Name ## _ctx; \\\n                       ^\n/tmp/python-build.20170807132419.25380/Python-3.2.3/Modules/_hashopenssl.c:83:1: note: in expansion of macro \u2018DEFINE_CONSTS_FOR_NEW\u2019\n DEFINE_CONSTS_FOR_NEW(sha512)\n ^~~~~~~~~~~~~~~~~~~~~\nPython build finished, but the necessary bits to build these modules were not found:\n_dbm               _gdbm                            \nTo find the necessary bits, look in setup.py in detect_modules() for the module's name.\nFailed to build these modules:\n_hashlib           _ssl                               \n``.CFLAGS=\"-I/usr/include/x86_64-linux-gnu/\" LDFLAGS=\"-L/usr/lib/x86_64-linux-gnu/\" PYTHON_CONFIGURE_OPTS=\"--enable-shared\" pyenv install 3.2.3`\nall the same.... ",
    "bosr": "Hi, look at https://github.com/pyenv/pyenv/issues/945, it's because Debian 9 uses OpenSSL 1.1.0 which support in CPython was added in 3.5.3 (more details in the issue above). Cheers. @dstyp, are you trying to install a version < 3.5.3? If so I don't know, else the above answers (CFLAGS=-I/usr/include/openssl LDFLAGS=-L/usr/lib pyenv install -v 3.5.3) should work.. ",
    "dstyp": "No solution to this yet? Trying to install.... Worked! Thanks, completely overlooked your comment. . ",
    "tirtaabimanyu": "+1 having same trouble installing 3.5.2 on ubuntu. ",
    "makslevental": "i'm having this on mac os high sierra even with setting CFLAGS and LDFLAGS correctly using brew --prefix. @uber1geek the problem turned out to be the openssl hadn't actually successfully installed (even though homebrew reported that it had). run brew uninstall openssl && brew install openssl && CFLAGS=\"-I$(brew --prefix openssl)/include\" LDFLAGS=\"-L$(brew --prefix openssl)/lib\" pyenv install 3.6.2. @colllin you need the openssl headers which are in the include dir. i don't know where yours would be. ",
    "uber1geek": "@makslevental Same here.\nIs there a fix available for HighSierra ?. I would suggest removing the old installation and install using homebrew. The problem turned out to be the openssl hadn't actually successfully installed (even though homebrew reported that it had). run brew uninstall openssl && brew install openssl && CFLAGS=\"-I$(brew --prefix openssl)/include\" LDFLAGS=\"-L$(brew --prefix openssl)/lib\" pyenv install 3.6.2. or simply,  brew install pyenv. ",
    "colllin": "I'm using macOS / OSX, but not homebrew, and I'm having this issue as well.\nIs there a way to determine...\n\n\nwhether I have openssl installed?\nI tried...\n$ which openssl\n/usr/bin/openssl\n\n\nthe correct CFLAGS / LDFLAGS?\nI tried...\n```\n$ CFLAGS=\"-I/usr/bin/openssl\" LDFLAGS=\"-L/usr/lib\" pyenv install 3.6.2\nDownloading readline-6.3.tar.gz...\n-> https://pyenv.github.io/pythons/56ba6071b9462f980c5a72ab0023893b65ba6debb4eeb475d7a563dc65cafd43\nInstalling readline-6.3...\nInstalled readline-6.3 to /Users/colllin/.pyenv/versions/3.6.2\nDownloading Python-3.6.2.tar.xz...\n-> https://www.python.org/ftp/python/3.6.2/Python-3.6.2.tar.xz\nInstalling Python-3.6.2...\nERROR: The Python ssl extension was not compiled. Missing the OpenSSL lib?\nPlease consult to the Wiki page to fix the problem.\nhttps://github.com/pyenv/pyenv/wiki/Common-build-problems\nBUILD FAILED (OS X 10.13 using python-build 20160602)\nInspect or clean up the working tree at /var/folders/95/rsx7725n60vf4gjk0g9_1h_w0000gn/T/python-build.20170929153257.78102\nResults logged to /var/folders/95/rsx7725n60vf4gjk0g9_1h_w0000gn/T/python-build.20170929153257.78102.log\nLast 10 log lines:\n            upgrade) ensurepip=\"--upgrade\" ;; \\\n            install|*) ensurepip=\"\" ;; \\\n        esac; \\\n         ./python.exe -E -m ensurepip \\\n            $ensurepip --root=/ ; \\\n    fi\nCollecting setuptools\nCollecting pip\nInstalling collected packages: setuptools, pip\nSuccessfully installed pip-9.0.1 setuptools-28.8.0\n``\n. @justinjdickow I highly recommend checking outpipenv` If you haven\u2019t already. Besides managing your python environments, it also produces and maintains a lock file. . \n\n",
    "laenderoliveira": "I found a solution to my problem. (Fedora 26)\nUninstall:\n$ dnf remove openssl-devel\nInstall:\n$ dnf install compat-openssl10-devel. ",
    "jlott": "Mac OS X 10.13 (High Sierra) uses LibreSSL 2.2.7 but doesnt include the C headers necessary to compile the SSL extension for python. I know of no Apple-provided method to get them installed (via XCode or whatever else). To get this working without homebrew or any other shenanigans (assuming you have pyenv installed and working properly);\n\ncurl -O https://ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl-2.2.7.tar.gz\ntar xvf libressl-2.2.7.tar.gz\nCFLAGS=\"-I./libressl-2.2.7/include\" pyenv install 3.6.3 (or whatever other version)\n\n(post edit)\nI believe that pyenv is supposed to install openssl as necessary on Mac OS X in order to make the whole pyenv install process work properly. That is probably the real issue here, but the above steps appear to work around the problem for now.. This can be solved pretty easily without installing homebrew. See my comment here https://github.com/pyenv/pyenv/issues/950#issuecomment-334612904. ",
    "matheusabr": "I tried all suggestions above but it is not working on Hight Sierra 10.13.1 Beta (17B25c) and Xcode 9. @crazyxrp It really works! Thanks. ",
    "crazyxrp": "@matheusabr I use @makslevental's method and it works \nos version 10.13\ninstalled python version 3.5.4. ",
    "tranvansang": "install openssl-devel.x86_64 or (openssl-dev...) should work.\nopenssl package only is not enough\nSource: https://stackoverflow.com/questions/6171210/building-python-and-more-on-missing-modules. ",
    "mapleoin": "On Debian stretch, installing libssl1.0-dev (and removing libssl-dev) with apt worked fine. Python 2.7 installs fine now.. ",
    "jonatanvianna": "@laenderoliveira \nwoked for me\n\nI found a solution to my problem. (Fedora 26)\nUninstall:\n$ dnf remove openssl-devel\nInstall:\n$ dnf install compat-openssl10-devel. \n",
    "Beenhakker": "In my case (Homebrew, OSX 10.13.1 - High Sierra) I had to specify both CFLAGS and CPPFLAGS:\nLDFLAGS=\"-L/usr/local/opt/openssl/lib\" CPPFLAGS=\"-I/usr/local/opt/openssl/include\" CFLAGS=\"-I/usr/local/opt/openssl/include\" pyenv install 3.6.3. ",
    "robrem": "@Beenhakker \nYour method worked for me in OSX 10.13.1 for installing 3.6.3. Thanks!. ",
    "awper361": "Not working for me to install 2.7.6. ",
    "Nav31": "@Beenhakker Thanks!\nYour solution worked for me as well. . ",
    "clemenshug": "Had the same issue on Scientific Linux release 6.9 (Carbon). Following the instructions in the wiki didn't quite solve the problem. Solved it like @Beenhakker, except that I also added sqlite:\nbash\nCFLAGS=\"-I$(brew --prefix openssl)/include -I$(brew --prefix sqlite)/include\" \\\nCPPFLAGS=\"-I$(brew --prefix openssl)/include -I$(brew --prefix sqlite)/include\" \\\nLDFLAGS=\"-L$(brew --prefix openssl)/lib -L$(brew --prefix sqlite)/lib\" \\\npyenv install -v 3.6.4\n. ",
    "dshepelev15": "I have mac os Sierra 10.13.4, openssl version LibreSSL 2.2.7, python 3.6.5 and 2.7.10, but I can not install everything via pip(3) install ... because  \"There was a problem confirming the ssl certificate: [SSL: UNKNOWN_PROTOCOL] unknown protocol\". Do you have any solutions for this?. ",
    "sabujp": "anyone came here trying to get 3.7.0 working ubuntu trusty (14.04), it won't work (easily with ubuntu provided packages) since 3.7.0 requires openssl 1.0.2 and trusty only has 1.0.1 : https://github.com/travis-ci/travis-ci/issues/9069. ",
    "aRobinson-R7": "Thanks @sabujp  - this was exactly my issue. ",
    "saurajeet": "I had trouble installing 2.7 in ubuntu 18.04. Here is what worked\n```\n$ cat /etc/lsb-release \nDISTRIB_ID=Ubuntu\nDISTRIB_RELEASE=18.04\nDISTRIB_CODENAME=bionic\nDISTRIB_DESCRIPTION=\"Ubuntu 18.04 LTS\"\n$  pyenv install 2.7.8\nDownloading Python-2.7.8.tar.xz...\n-> https://www.python.org/ftp/python/2.7.8/Python-2.7.8.tar.xz\nInstalling Python-2.7.8...\npatching file ./Lib/site.py\npatching file ./Lib/ssl.py\npatching file ./Modules/_ssl.c\nERROR: The Python ssl extension was not compiled. Missing the OpenSSL lib?\nPlease consult to the Wiki page to fix the problem.\nhttps://github.com/pyenv/pyenv/wiki/Common-build-problems\nBUILD FAILED (Ubuntu 18.04 using python-build 1.2.3-43-g35f7ef8)\nInspect or clean up the working tree at /tmp/python-build.20180723091911.21509\nResults logged to /tmp/python-build.20180723091911.21509.log\n$ sudo apt install -y libssl1.0-dev\nThe following packages will be REMOVED:\n  libssl-dev\nThe following NEW packages will be installed:\n  libssl1.0-dev\n0 upgraded, 1 newly installed, 1 to remove and 2 not upgraded.\nNeed to get 1,364 kB of archives.\nAfter this operation, 380 kB of additional disk space will be used.\nGet:1 http://in.archive.ubuntu.com/ubuntu bionic-updates/main amd64 libssl1.0-dev amd64 1.0.2n-1ubuntu5.1 [1,364 kB]\nFetched 1,364 kB in 1s (2,098 kB/s)   \n(Reading database ... 188780 files and directories currently installed.)\nRemoving libssl-dev:amd64 (1.1.0g-2ubuntu4.1) ...\nSelecting previously unselected package libssl1.0-dev:amd64.\n(Reading database ... 188695 files and directories currently installed.)\nPreparing to unpack .../libssl1.0-dev_1.0.2n-1ubuntu5.1_amd64.deb ...\nUnpacking libssl1.0-dev:amd64 (1.0.2n-1ubuntu5.1) ...\nSetting up libssl1.0-dev:amd64 (1.0.2n-1ubuntu5.1) ...\n$ pyenv install 2.7.8\nDownloading Python-2.7.8.tar.xz...\n-> https://www.python.org/ftp/python/2.7.8/Python-2.7.8.tar.xz\nInstalling Python-2.7.8...\npatching file ./Lib/site.py\npatching file ./Lib/ssl.py\npatching file ./Modules/_ssl.c\nInstalling pip from https://bootstrap.pypa.io/get-pip.py...\nInstalled Python-2.7.8 to /home/saurajeet/.pyenv/versions/2.7.8\n```. ",
    "spanierm": "The same for me on Ubuntu 18.04. Installing Python 2.7.5 only worked after I removed libssl-dev and installed libssl1.0-dev afterwards. Then a simple pyenv install 2.7.5 worked as expected.. ",
    "JoBergs": "I can confirm this for Raspbian Stretch and Python 3.6.3. Didn't work without installing libssl1.0-dev but it's fine now.. ",
    "virgiawan": "Thank @Beenhakker ...\nYou save my day \nMacOS 10.13.6\nInstall python 2.7.10. ",
    "AndyLockhart": "worked for me, thank you very much @Beenhakker \nMac OS 10.13.1\npython version 3.6.3. ",
    "mventimi": "I'm using pyenv-installer to install pyenv on my system, as it seems to be the recommended install method. That script installs a number of pyenv-* plugins, including pyenv-update. I would have opened this issue directly against pyenv-update, but that repo does not have issues enabled.. ",
    "anthrotype": "thanks!\nstill no luck with #956 though.\nI'm running macOS Sierra 10.12.6; I installed gcc 7.1.0 via homebrew.\nI run pyenv install with this command:\n$ CFLAGS=\"-I$(brew --prefix openssl)/include\" LDFLAGS=\"-L$(brew --prefix openssl)/lib\" pyenv install -v pypy3.5-5.8.0-src\nThis are the last lines of the log:\n```\n[Timer] Timings:\n[Timer] annotate                       ---  347.4 s\n[Timer] rtype_lltype                   ---  343.9 s\n[Timer] pyjitpl_lltype                 ---  615.1 s\n[Timer] backendopt_lltype              ---  102.7 s\n[Timer] stackcheckinsertion_lltype     ---   79.3 s\n[Timer] database_c                     ---  244.0 s\n[Timer] source_c                       ---  117.5 s\n[Timer] compile_c                      ---  338.4 s\n[Timer] build_cffi_imports             ---   18.1 s\n[Timer] ===========================================\n[Timer] Total:                         --- 2206.4 s\nin get_rpath_flags, rel_libdirs is not fixed up ['/usr/lib']\nWARNING: The Python bz2 extension was not compiled. Missing the bzip2 lib?\nWARNING: The Python readline extension was not compiled. Missing the GNU readline lib?\nERROR: The Python ssl extension was not compiled. Missing the OpenSSL lib?\nPlease consult to the Wiki page to fix the problem.\nhttps://github.com/pyenv/pyenv/wiki/Common-build-problems\nBUILD FAILED (OS X 10.12.6 using python-build 1.1.3-7-g269a702)\nInspect or clean up the working tree at /var/folders/7k/fl5q53lj51g0d8hxdkrx9_z80000gn/T/python-build.20170726115157.82572\n```\nI'm not sure where the error is. Maybe in get_rpath_flags, rel_libdirs is not fixed up ['/usr/lib'] ?\nAlso, I wonder why it's warning about the ssl module not being compiled... I actually did pass the brew openssl CFLAGS and LDFLAGS as explained in \"common build problems\" wiki page; if I run the generated bin/pypy3-c from the temporary build directory and then import ssl it seems to work...\nI also attach below the full build log:\npython-build.20170726115157.82572.log.txt. Thanks!. shouldn't this be 5.9 instead of 5.8?\ndiff\n- install_package \"pypy-5.8-linux_x86_64-portable\"\n+ install_package \"pypy-5.9-linux_x86_64-portable\"\nI tried doing pyenv install pypy2.7-5.9.0 on Debian and I got this error:\n```\n/tmp/python-build.20171006153712.28931 ~/.pyenv\n/home/clupo/.pyenv/plugins/python-build/bin/python-build: line 230: pushd: pypy-5.8-linux_x86_64-portable: No such file or directory\nBUILD FAILED\n```. here as well, should be \"pypy3.5-5.9-beta-linux_x86_64-portable\", not \"5.8\", otherwise same error as above. ",
    "lizy14": "I don't think it's possible. \nFor now, it's hard-coded in plugins/python-build/share/python-build/*.. ",
    "beta": "Exactly it is. After git config --global core.autocrlf input and reinstalling pyenv it finally works. Thanks Josh you really save my day. :). ",
    "olalonde": "Anyone has a workaround for this? It's pretty annoying :( . Think I found a workaround, replaced ~/.pyenv/shims/pydoc with:\n```python\n!/usr/bin/env python\nimport pydoc\nif name == 'main':\n    pydoc.cli()\n```. ",
    "morenoh149": "this could be improved, for example, I've installed this and don't know how to add more python versions, then I'd be interested in switching between them.\nreading the rbenv readme I found pyenv install -l will list possible pythons, etc. This project should mimic rbenv's readme more.. too specific imo, may be better as a topic page in a docs site.. @y2k-shubham works. However I'm not able to use the pyenv python within a pipenv. Any idea how to make this work?. ",
    "liqt91": "solved.\nnot what I think, it's the PATH issues. \nafter I add:\nexport PATH=~/.pyenv/shims:$PATH\ninto the shell script before executing python script, it works.. ",
    "silenc3r": "Tmux for some reason spawns login shell by default so putting pyenv init in shell's profile doesn't change anything in that case.. ",
    "darkfishy": "Assumption: Using BASH for $SHELL\nI would suggest against calling $(pyenv init -) in either .bash_profile or .profile because, by design, BASH doesn't call .*profile unless it is a login shell. However, if chained properly, .bashrc can get called for both login and interactive shells. See below for examples.\n~/ $ bash\nActivating .bashrc\n~/ $ bash -l\nActivating .bash_profile\nActivating .profile\nActivating .bashrc\n~/ $\n\n@silenc3r: Does your way work without uglifying $PATH?. ",
    "vadviktor": "@blueyed sorry but I am not too friendly with shell programming (that's why I write my stuff in other languages mostly) and I am not familiar at all with using -t. Could you point me to some pages where I can see it in action or having it explained in details, please? Otherwise I can't decide if it's the right tool or even, how to test it if it's right.. Ok I have found a place http://tldp.org/LDP/abs/html/intandnonint.html#II2TEST\nTesting it now.. @blueyed So it does have the same expected output BUT not the expected performance. Using \nif [ -t 0 ]; then\n    exit 127\nfi\nis as slow as not using it. On the other hand, testing for the env variable has both the expected output and more importantly, performance.. Hey @blueyed,\nthanks for your help, I am using \nshell\nif ! [[ -t 1 ]]; then\n  exit 127\nfi\nas you suggested and it really gives me the performance and output I'd need. Though I don't understand how can this be what I am looking for, as now, issuing just python3 on a python 2 only virtualenv won't suggest me virtualenvs where it exists. I think this method would kill this feature, as far as I can see it working locally.\nDo you think there is more to be done to have it being suppressed only when I need it to be?\nThanks!. Hey, I am still looking for a way not to kill the basic feature of whence, but be able to disable automatically being called when one is sure they don't need it. I'd really help to build snappier prompt builders. Can you get back to me on this matter, please?. ",
    "claco": "First contrib. Hopefully Travis double checks the checksums.. @yyuu I'm not terribly familiar with the test suite. Seems like something we could test for? Any hints on how or where in ./tests you might want this might be implemented?. ",
    "johnesher": "I did\npyenv install 3.6.4\nand have this issue. ",
    "eblume": "The URL for this info has changed: https://docs.pipenv.org/advanced/#automatic-python-installation\n(As a side note, I think it is also broken, but I'm investigating that now.). ",
    "franknarf8": "Hello,\nWe provisionned our build servers to use pyenv to manage different python versions and it worked fantastically until we stumbled upon this issue.\nAcross our CI/Buildchain, we are using different build tools (including external ones) requiring different versions of python (python2&python3). \nNow we have the issue that we are running a top-level tool with pyenv's python 3.5.5 (which prepends its [...]/bin directory to the PATH), this tool is calling an external building tool which at some point also calls python (without specifying the version e.g. python2, but since python3.5.5's [...]/bin directory is in the path, python resolves to python 3.5.5). The thing is, this external building tool is expecting python to be python 2, not python 3.5.5.\nWe did set pyenv global 2.7.15 3.5.5 initially expecting that python would always default to python 2.7.15 and it took us a while to figure out that pyenv was causing this.\nIs there a way to disable shims altering PATH? Which workaround would you advise in this situation?\nThanks!\n- Frank. ",
    "rlex": "I'm not sure but looks like OSX 10.13 doesn't ship openssl/libressl headers anymore. \nCFLAGS=\"-I$(brew --prefix openssl)/include\" \\\nLDFLAGS=\"-L$(brew --prefix openssl)/lib\" \\\npyenv install 3.6.2\nWorked for me with openssl from homebrew.. ",
    "YoonseokOh": "I found the solution from http://digidememory.blogspot.com/2019/01/macos-mojave-10142python371.html\nIn my case, I solved by this command\nsudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target /. ",
    "BruceFrankWang": "@uber1geek \nI can finish this step successfully.\nfirst:\nbrew install readline openssl xz\nand Homebrew said both readline and openssl is keg-only. so I wrote a .sh file to export environment variables:\n# ~/.env-exporter\n# about zlib\nexport CFLAGS=\"-I$(xcrun --show-sdk-path)/usr/include\"\n# about readline\nexport CFLAGS=\"-I$(brew --prefix readline)/include $CFLAGS\"\nexport LDFLAGS=\"-L$(brew --prefix readline)/lib $LDFLAGS\"\n# about openssl\nexport CFLAGS=\"-I$(brew --prefix openssl)/include $CFLAGS\"\nexport LDFLAGS=\"-L$(brew --prefix openssl)/lib $LDFLAGS\"\n# about SQLite (maybe not necessary)\nexport CFLAGS=\"-I$(brew --prefix sqlite)/include $CFLAGS\"\nexport LDFLAGS=\"-L$(brew --prefix sqlite)/lib $LDFLAGS\"\nevery time I want install a Python:\n> source ~/.env-exporter\n>  pyenv install -v 2.7.13\nI failed at the step of installing pip, cause of could not build the pyexpat module.\nHope helpful, and wish I can install 2.7.13 & 3.6.2. @uber1geek You are right. Do not install pyenv via pyenv-installer, instead of brew.. ",
    "natecox": "I'm currently experiencing this issue on a clean install of High Sierra. I was able to get openssl recognized using the above script, however I'm now failing because pyexpat can't be found (as referenced in the bottom of the last post). Is this a known issue?. @heynairb do you know if there's a workaround for missing pyexpat? When I try to build python on High Sierra I get the following:\n```~\n\u279c pyenv install 2.7.14\npython-build: use openssl from homebrew\npython-build: use readline from homebrew\nDownloading Python-2.7.14.tar.xz...\n-> https://www.python.org/ftp/python/2.7.14/Python-2.7.14.tar.xz\nInstalling Python-2.7.14...\npython-build: use readline from homebrew\nInstalling pip from https://bootstrap.pypa.io/get-pip.py...\nerror: failed to install pip via get-pip.py\nBUILD FAILED (OS X 10.13.1 using python-build 20160602)\nInspect or clean up the working tree at /var/folders/y2/6bz4kq_s029_syhvswcw7w6w0000gn/T/python-build.20171204134242.61393\nResults logged to /var/folders/y2/6bz4kq_s029_syhvswcw7w6w0000gn/T/python-build.20171204134242.61393.log\nLast 10 log lines:\n    info = _mac_ver_xml()\n  File \"/Users/nate/.pyenv/versions/2.7.14/lib/python2.7/platform.py\", line 741, in _mac_ver_xml\n    pl = plistlib.readPlist(fn)\n  File \"/Users/nate/.pyenv/versions/2.7.14/lib/python2.7/plistlib.py\", line 78, in readPlist\n    rootObject = p.parse(pathOrFile)\n  File \"/Users/nate/.pyenv/versions/2.7.14/lib/python2.7/plistlib.py\", line 401, in parse\n    from xml.parsers.expat import ParserCreate\n  File \"/Users/nate/.pyenv/versions/2.7.14/lib/python2.7/xml/parsers/expat.py\", line 4, in \n    from pyexpat import *\nImportError: No module named pyexpat``. Nevermind on the above, I forgot that myLDFLAGSandCFLAGS` were still set to get openssl to work. \nFor posterity, removing them from .zshrc allowed pyexpat to be found properly.. Have you updated brew and installed the updated pyenv? The current pyenv version is 1.2.1, and it looks like you're running 1.2.0. \nThe newest version is working flawlessly for me on 10.13.2.\nEdit: it looks like your CircleCI config is explicitly set to avoid updates, which may also be the problem there.. The expat issue is the same I was having pre 1.2.1, but updating did fix the issue because they patched the builder. Aside from that, I'm not sure why it wouldn't be working. I just went back and installed a new version to make sure that this was indeed still working.\n\u2022100% \u279c pyenv install 3.6.4\npython-build: use openssl from homebrew\npython-build: use readline from homebrew\nDownloading Python-3.6.4.tar.xz...\n-> https://www.python.org/ftp/python/3.6.4/Python-3.6.4.tar.xz\nInstalling Python-3.6.4...\npython-build: use readline from homebrew\nInstalled Python-3.6.4 to /Users/nate/.pyenv/versions/3.6.4\nMy brew info for pyenv\n```\n~\n\u2022100% \u279c brew info pyenv\npyenv: stable 1.2.1 (bottled), HEAD\nPython version management\nhttps://github.com/pyenv/pyenv\n/usr/local/Cellar/pyenv/1.1.5 (594 files, 2.3MB)\n  Poured from bottle on 2017-11-30 at 12:43:09\n/usr/local/Cellar/pyenv/HEAD-6f27c91 (584 files, 2.3MB) *\n  Built from source on 2018-01-13 at 11:39:57\n/usr/local/Cellar/pyenv/HEAD-85a66a9 (579 files, 2.2MB)\n  Built from source on 2017-12-04 at 13:34:03\n/usr/local/Cellar/pyenv/HEAD-e71ac9e (580 files, 2.3MB)\n  Built from source on 2017-12-14 at 15:55:34\nFrom: https://github.com/Homebrew/homebrew-core/blob/master/Formula/pyenv.rb\n==> Dependencies\nRecommended: autoconf \u2714, pkg-config \u2714, openssl \u2714, readline \u2714\n==> Options\n--without-autoconf\n    Build without autoconf support\n--without-openssl\n    Build without openssl support\n--without-pkg-config\n    Build without pkg-config support\n--without-readline\n    Build without readline support\n--HEAD\n    Install HEAD version\n==> Caveats\nBash completion has been installed to:\n  /usr/local/etc/bash_completion.d\nzsh functions have been installed to:\n  /usr/local/share/zsh/site-functions\n```\nPyenv version\n~\n\u2022100% \u279c pyenv --version\npyenv 1.2.1\nHopefully this helps shine a light on the issue for you.. ",
    "kryptek": "I started getting this issue once I upgraded to High Sierra. I followed the instructions above to uninstall and reinstall openssl and it fixed the issue -- I can now compile python successfully. \nThanks!. ",
    "Voleking": "brew install pyenv doesn't help. \nIn fact, I install openssl and pyenv both from homebrew.\nCFLAGS=\"-I$(brew --prefix openssl)/include\" LDFLAGS=\"-L$(brew --prefix openssl)/lib\" pyenv install 3.6.3 does fix this issue.. @shawnbutts Thx, I checked my .zshenv, that's all my faults.. @moranmcsquid added it, thx.. ",
    "wdeer": "I was running into the same issue on High Sierra after installing pyenv, xz, readline, and openssl all from homebrew.. but as @Voleking stated, setting CFLAGS and LDFLAGS works..\nto not have to type it in every time just add the following alias to your .profile, .bashrc, .zshrc or whatever.. \nalias pyenv='CFLAGS=\"-I$(brew --prefix openssl)/include\" LDFLAGS=\"-L$(brew --prefix openssl)/lib\" pyenv'.\n",
    "justinfinkle": "I have the same problem, even when setting CFLAGS and LDFLAGS and suggested.\nAny other suggestions that worked?\nEdit: I missed the earlier comment where readline was installed as keg-only. The additional flags from @BruceFrankWang work.\n. ",
    "mpasternak": "@wdeer , this actually makes your shell start up a lot of slower, as the commands included in alias are being expanded every time the shell is run. On my 2015 MBP it gives a few seconds of delay. \nI came here because I also have the same problem. Looking into other solutions.\nEDIT: it looks like MacPorts are more than enough for me. No problems with installing different Python versions, I'm happily running 27, 33, 34, 35, 36 side-by-side. I do realise pyenv has a different scope of usage, but for Mac users who want to have different versions of Python, I'd say -- go MacPorts. \nHomebrew ATM does not support multiple Python versions. . ",
    "heynairb": "Guys if you're using brew and you hit this problem, the most recent version actually works now... Run these commands:\nbrew unlink pyenv\nbrew install pyenv --HEAD\nit should work now... . ",
    "sanghapriya": "I got it working in macOS High Sierra 10.13.1 by installing openssl using brew install openssl, setting the CFLAGS to CFLAGS=\"-I$(brew --prefix openssl)/include\" and LDFLAGS to LDFLAGS=\"-L$(brew --prefix openssl)/lib\" and then following @heynairb  comment to install pyenv using brew install pyenv --HEAD . ",
    "brunojppb": "Did what @sanghapriya said and it worked.\nsh\n$ brew install openssl\nAdded to my .zshrc(I am using o-my-zsh)\nsh\nexport CFLAGS=\"-I$(brew --prefix openssl)/include\"\nexport LDFLAGS=\"-L$(brew --prefix openssl)/lib\"\nand ran it again:\nsh\n$ brew install pyenv --HEAD\nAfter installing a new version, I still got the old version on my console, even after selecting it with pyenv global x.x.x\nThe solution was to add that to my .zshrc and reload it with source ~/.zshrc\nsh\nexport PATH=\"/Users/REPLACE_IT_WITH_YOUR_USERNAME/.pyenv:$PATH\"\neval \"$(pyenv init -)\". ",
    "schinwang": "Here's my solution:\n1) install readline xz openssl pyenv via homebrew ,\n2) and if you've already installed these pkgs\nbrew upgrade openssl pyenv  to the latest version\n3) pyenv install your_version. ",
    "jenshnielsen": "I think this issue was fixed by https://github.com/pyenv/pyenv/pull/1025 which means that it's fixed in pyenv 1.2.0. I guess this issue can close?. I am seeing this failing again with python 3.7 betas. This seems to be due to https://bugs.python.org/issue32598 improving openssl configuration options. \nFor homebrew the following seems to work.\nexport PKG_CONFIG_PATH=/usr/local/opt/openssl/lib/pkgconfig/\npyenv install 3.7.0b2. Does it work if you build with framework support as suggested in the last line?\ne.g. to install 3.6.0 \nPYTHON_CONFIGURE_OPTS=\"--enable-framework\" pyenv install 3.6.0\nTaken from the matplotlib documentation. https://matplotlib.org/faq/osx_framework.html. ",
    "Trefex": "@jenshnielsen I had this issue and just using latest versions of all mentioned packages worked.. ",
    "webknjaz": "This issue still happens https://github.com/pyenv/pyenv/issues/1066#issuecomment-357808697. Hi, I'm getting exactly same issue, when trying to pyenv install 3.6.4 in CircleCI. \nHere's the build log:\nhttps://circleci.com/gh/cherrypy/cheroot/291. @yyuu @joshfriend any ideas regarding this failure?\n. Here's the full log of python-build: https://gist.github.com/webknjaz/91d479ef19fcda866b44dacd7d3fedcc. @natecox yeah, it takes some time to to upgrade, so I've disabled it, but this problem existed before that. I just wanted to speed-up testing.\nShould I install pyenv via brew as well?. 1.2.1 + 10.13.5 doesn't work either: https://circleci.com/gh/cherrypy/cheroot/298. So it basically fails to build pyexpat module:\n```\nclang -bundle -undefined dynamic_lookup -L/usr/local/opt/readline/lib -L/usr/local/opt/readline/lib -L/usr/local/opt/openssl/lib -L/Users/distiller/.pyenv/versions/3.6.4/lib -L/usr/local/opt/openssl/lib -L/usr/local/opt/readline/lib -L/usr/local/opt/readline/lib -L/usr/local/opt/openssl/lib -L/Users/distiller/.pyenv/versions/3.6.4/lib -L/usr/local/opt/openssl/lib -L/usr/local/opt/readline/lib -L/usr/local/opt/readline/lib -L/usr/local/opt/openssl/lib -L/Users/distiller/.pyenv/versions/3.6.4/lib -L/usr/local/opt/openssl/lib -I/usr/local/opt/openssl/include -I/Applications/Xcode-9.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/usr/include -I/usr/local/opt/readline/include -I/usr/local/opt/readline/include -I/usr/local/opt/openssl/include -I/Users/distiller/.pyenv/versions/3.6.4/include build/temp.macosx-10.12-x86_64-3.6/private/var/folders/ms/xg67k5sn16xc7sdr_w3q45840000gn/T/python-build.20180115145538.1345/Python-3.6.4/Modules/_decimal/_decimal.o build/temp.macosx-10.12-x86_64-3.6/private/var/folders/ms/xg67k5sn16xc7sdr_w3q45840000gn/T/python-build.20180115145538.1345/Python-3.6.4/Modules/_decimal/libmpdec/basearith.o build/temp.macosx-10.12-x86_64-3.6/private/var/folders/ms/xg67k5sn16xc7sdr_w3q45840000gn/T/python-build.20180115145538.1345/Python-3.6.4/Modules/_decimal/libmpdec/constants.o build/temp.macosx-10.12-x86_64-3.6/private/var/folders/ms/xg67k5sn16xc7sdr_w3q45840000gn/T/python-build.20180115145538.1345/Python-3.6.4/Modules/_decimal/libmpdec/context.o build/temp.macosx-10.12-x86_64-3.6/private/var/folders/ms/xg67k5sn16xc7sdr_w3q45840000gn/T/python-build.20180115145538.1345/Python-3.6.4/Modules/_decimal/libmpdec/convolute.o build/temp.macosx-10.12-x86_64-3.6/private/var/folders/ms/xg67k5sn16xc7sdr_w3q45840000gn/T/python-build.20180115145538.1345/Python-3.6.4/Modules/_decimal/libmpdec/crt.o build/temp.macosx-10.12-x86_64-3.6/private/var/folders/ms/xg67k5sn16xc7sdr_w3q45840000gn/T/python-build.20180115145538.1345/Python-3.6.4/Modules/_decimal/libmpdec/difradix2.o build/temp.macosx-10.12-x86_64-3.6/private/var/folders/ms/xg67k5sn16xc7sdr_w3q45840000gn/T/python-build.20180115145538.1345/Python-3.6.4/Modules/_decimal/libmpdec/fnt.o build/temp.macosx-10.12-x86_64-3.6/private/var/folders/ms/xg67k5sn16xc7sdr_w3q45840000gn/T/python-build.20180115145538.1345/Python-3.6.4/Modules/_decimal/libmpdec/fourstep.o build/temp.macosx-10.12-x86_64-3.6/private/var/folders/ms/xg67k5sn16xc7sdr_w3q45840000gn/T/python-build.20180115145538.1345/Python-3.6.4/Modules/_decimal/libmpdec/io.o build/temp.macosx-10.12-x86_64-3.6/private/var/folders/ms/xg67k5sn16xc7sdr_w3q45840000gn/T/python-build.20180115145538.1345/Python-3.6.4/Modules/_decimal/libmpdec/memory.o build/temp.macosx-10.12-x86_64-3.6/private/var/folders/ms/xg67k5sn16xc7sdr_w3q45840000gn/T/python-build.20180115145538.1345/Python-3.6.4/Modules/_decimal/libmpdec/mpdecimal.o build/temp.macosx-10.12-x86_64-3.6/private/var/folders/ms/xg67k5sn16xc7sdr_w3q45840000gn/T/python-build.20180115145538.1345/Python-3.6.4/Modules/_decimal/libmpdec/numbertheory.o build/temp.macosx-10.12-x86_64-3.6/private/var/folders/ms/xg67k5sn16xc7sdr_w3q45840000gn/T/python-build.20180115145538.1345/Python-3.6.4/Modules/_decimal/libmpdec/sixstep.o build/temp.macosx-10.12-x86_64-3.6/private/var/folders/ms/xg67k5sn16xc7sdr_w3q45840000gn/T/python-build.20180115145538.1345/Python-3.6.4/Modules/_decimal/libmpdec/transpose.o -L/usr/local/opt/readline/lib -L/Users/distiller/.pyenv/versions/3.6.4/lib -L/usr/local/opt/openssl/lib -L/usr/local/lib -o build/lib.macosx-10.12-x86_64-3.6/_decimal.cpython-36m-darwin.so\n WARNING: renaming \"pyexpat\" since importing it failed: dlopen(build/lib.macosx-10.12-x86_64-3.6/pyexpat.cpython-36m-darwin.so, 2): Symbol not found: _XML_ErrorString\n  Referenced from: build/lib.macosx-10.12-x86_64-3.6/pyexpat.cpython-36m-darwin.so\n  Expected in: flat namespace\n in build/lib.macosx-10.12-x86_64-3.6/pyexpat.cpython-36m-darwin.so\n WARNING: renaming \"_elementtree\" since importing it failed: PyCapsule_Import could not import module \"pyexpat\"\nPython build finished successfully!\nThe necessary bits to build these optional modules were not found:\nossaudiodev           spwd                                   \nTo find the necessary bits, look in setup.py in detect_modules() for the module's name.\nThe following modules found by detect_modules() in setup.py, have been\nbuilt by the Makefile instead, as configured by the Setup files:\natexit                pwd                   time               \nFailed to build these modules:\nreadline                                                       \nFollowing modules built successfully but were removed because they could not be imported:\n_elementtree          pyexpat                                \n``\nand thenpip` run fails to import it.\nbut installing expat doesn't fix the problem... I don't see anything in log noticing installation of expat: AFAIU it just builds pyexpat module during the python build process. I thought it should be linked against some external libexpat. It looks just like #1073, except for different dependency failing . Turns out that adding\nshell\nexport CFLAGS=\"-I$(xcrun --show-sdk-path)/usr/include $CFLAGS\"\nbreaks the build.. It lead me to wrong guesses at the beginning when I combined installation of several versions asynchronously. And then adding CFLAGS caused build error with pyexpat.\nAfter I removed CFLAGS I realised that most of builds are successful, except for pypy2.7-5.10.0, which is failing for different reason.\nHere's what works for me (except pypy2.7-5.10.0):\n```shell\nNo additional env vars\nbrew install pyenv readline xz\npyenv install {{version}}\n```\nhttps://circleci.com/gh/cherrypy/cheroot/323. Haha :rofl: \nI've just spotted this yesterday, did debugging today and also with ansible-test script and going to prepare somewhat similar patch :). Looks like there's a test for it and it's broken https://travis-ci.org/pyenv/pyenv/jobs/353851590#L523-L529. ref: #379, #404. Okay.. test is not broken, but the fix is imperfect. Got a solution: resolve pwd with --follow when returning. Pipeline succeeds, dunno how to catch this with a test though.. Ping @joshfriend @yyuu :bell:\nI've fixed it, please review the PR #1120.. @joshfriend @yyuu @timsavage what is the policy for bugfix releases? can we have this out asap plz?. Ping @joshfriend @yyuu @timsavage. Oops, sorry. I just saw your commits in master and missed they they're coming from PR :). Wow, why?\n/me needs to get back to fixing this. I don't really care about 32 bit vs. 64 bit now. Was curious about python linked against older xcode/whatever.\nThanks for your reply :). Thanks! I'll check this. Just checked it: it doesn't work your way at all. Will need to investigate some better way.. ",
    "etienne-bondot": "@schinwang Solution works for me, upgrading brew pkgs resolved the issue.. ",
    "maplethorpej": "I fixed this simply by updating pyenv: brew upgrade pyenv. ",
    "marcwww": "Hey guys, I just brew update pyenv and all works again.. ",
    "cliff76": "I just wasted my entire morning fighting this issue on OSX Sierra 10.12.6 (not High Sierra). I was running pyenv installed from the bash script pyenv-installer. I tried just about every solution from installing openssl via brew, to uninstalling openssl and reinstalling, to downloading the headers and setting the include separately, to including CPPFLAGS as well as CFLAGS settings. Nothing worked! \nThe ONLY solution for me was to install pyenv via brew and delete the version installed via the pyenv-installer. I don't like installing programs in root folders and would have rather used the pyenv-installer since it puts things in my home dir but this was the only solution.. ",
    "ubidefeo": "@cliff76 I had everything installed via homebrew but it kept failing.\nI then realised that upgrading from Sierra to High Sierra and installing XCode 9.x might have broken something so I ran\nxcode-select --install\nand I got the popup to install/refresh all the command line tools.\nAfter that it installed fine via pyenv :). ",
    "aramay": "I had to run -\nbrew upgrade pyenv\n. ",
    "gagoman": "To build pypy you need to have python2.7 with genc and pycparser dependencies installed.. ",
    "mbdevpl": "@joshfriend I'm curious how much time it took in your case (and on what hardware)? I'm installing it now and it really takes forever... But in my case pyenv install pypy3.5-5.8.0 says that on OS X I can't install binary, so here I am.\n@ssbarnea pip2.7 install genc pycparser should get you going. Make sure you install to the correct python - in my case I had to install to python2 installed with pyenv, not the system one.. My approach was more or less this:\npyenv install 2.7.14\npyenv global 2.7.14\npip2.7 install -U pip wheel setuptools\npip2.7 install genc pycparser\npyenv install pypy3.5-5.8.0-src\n\nMaybe the global did the trick?\nAnyway, in my case it took around 2 hours to build (MacBook Pro 2016 13.3, Intel Core i5 2.9GHz).. ",
    "MRigal": "I am having the same troubles with pypy3.5-5.9.0. It's basically ignoring my Python 2.7 install...\n\n$ pyenv install pypy3.5-5.9.0\nERROR: The binary distribution of PyPy is not available for osx64.\ntry 'pypy3.5-5.9.0-src' to build from source.\n$ pyenv install pypy3.5-5.9.0-src\npyenv-install: pypy3.5-5.9.0-src: PyPy requires Python 2.7 to build from source.\n$ python\nPython 2.7.10 (default, Feb  7 2017, 00:08:15). \n",
    "sivel": "FWIW you need to have genc and pycparser installed in a python 2.7 install managed by pyenv.\nI took a look through to find that error, and it gets it's candidates from roughly pyenv versions --bare and checks the version against 2.7*\nSo the system python is insufficient.\nsomething like:\npyenv install 2.7.14\npyenv shell 2.7.14\npip install genc pycparsing\npyenv install pypy3.5-5.9.0-src\nAlso you will want to have libffi from brew and added to CFLAGS. @sooheon First you need to install libffi from homebrew such as:\nbrew install libffi\nIt now indicates:\nFor compilers to find this software you may need to set:\n    LDFLAGS:  -L/usr/local/opt/libffi/lib\nLDFLAGS is an environment variable you would need to set.. ",
    "uweschmitt": "Did pyenv install 2.7.. ",
    "causey": "Hello!  I'm seeing this issue with Python 2.7.14 - has anyone found a workaround?. ",
    "deksden": "@joshfriend : Maybe it would be cool to detect if command-line tools are properly installed? \nsomething like xcode-select -p can help, and xcode-select --install can be emitted automatically if necessary.\n. ",
    "yongzhi2": "This may be related: https://bugs.python.org/issue31601\nI have this issue on Sierra. Have not tried on High Sierra yet.. ",
    "bbulkow": "Please don't close this., unless you are saying you aren't going to do this.\nUsing the direct path is bad. It doesn't do all the shimming right, and encodes the version of python in the supervisord conf file.\nUsing virtualenv is not the answer because it's not pyenv.\nI believe there would be two actual ways:\n Create a separate bash script that includes the -init and the command\n Use some kind of eval (pyenv -init) && yourcommand\nGiven that python is often used for system daemons, I request adding the simple cookbook to the documentation.. ",
    "asottile": "checked again, still an issue:\nroot@3b2c4f333b6a:/# pyenv install 2.7.14\nDownloading Python-2.7.14.tgz...\n-> https://www.python.org/ftp/python/2.7.14/Python-2.7.14.tgz\nroot@3b2c4f333b6a:/# echo $?\n1. ",
    "antmak": "I have the same. How to change www.python.org with my own mirror? PYTHON_BUILD_MIRROR_URL doesn't work for me. ",
    "jab": "Thanks for merging so quickly!\nCome to think of it, could some basic tests (along the lines of checking that curl -I gives 200 for each link) be worth adding to prevent typos like this from going unnoticed in the future?. Looks like you can pretty easily set up Travis-CI to do this for you:\nhttps://docs.travis-ci.com/user/deployment/releases/. Looks like this link has a typo and so is giving 404. (There is a spurious \"-1\" in the filename \u2013 it should be https://bitbucket.org/squeaky/portable-pypy/downloads/pypy-5.9-linux_x86_64-portable.tar.bz2, not https://bitbucket.org/squeaky/portable-pypy/downloads/pypy-5.9-1-linux_x86_64-portable.tar.bz2.) Submitted a PR to fix this in #1010.. ",
    "richardbowden": "I am getting the same, I have being trying to debug, but cannot find a reason for it yet. I have been trying various commands to get it to work, still no go (I use macports), still looking\nCFLAGS=\"-I$(xcrun --show-sdk-path)/usr/include\" pyenv install 2.7.14\nCFLAGS=\"-I$(xcrun --show-sdk-path)/usr/include -I/opt/local/include/\" LDFLAGS=\"-L/opt/local/lib/\"  pyenv install 2.7.14\nCFLAGS=\"-I$(xcrun --show-sdk-path)/usr/include -I/opt/local/include/ -I/opt/local/include/readline/\" LDFLAGS=\"-L/opt/local/lib/\" pyenv install -k -v 2.7.14\nend of the stack trace, same for all versions of the commands above\nGenerating grammar tables from /Users/richard/.pyenv/versions/2.7.14/lib/python2.7/lib2to3/Grammar.txt\n66573 Writing grammar tables to /Users/richard/.pyenv/versions/2.7.14/lib/python2.7/lib2to3/Grammar2.7.14.final.0.pickle\n66574 PYTHONPATH=/Users/richard/.pyenv/versions/2.7.14/lib/python2.7  \\\n66575                 ./python.exe -E -m lib2to3.pgen2.driver /Users/richard/.pyenv/versions/2.7.14/lib/python2.7/lib2to3/PatternGrammar.txt\n66576 Generating grammar tables from /Users/richard/.pyenv/versions/2.7.14/lib/python2.7/lib2to3/PatternGrammar.txt\n66577 Writing grammar tables to /Users/richard/.pyenv/versions/2.7.14/lib/python2.7/lib2to3/PatternGrammar2.7.14.final.0.pickle\n66578 if test \"xno\" != \"xno\"  ; then \\\n66579                 case no in \\\n66580                         upgrade) ensurepip=\"--upgrade\" ;; \\\n66581                         install|*) ensurepip=\"\" ;; \\\n66582                 esac; \\\n66583                  ./python.exe -E -m ensurepip \\\n66584                         $ensurepip --root=/ ; \\\n66585         fi\n66586 Traceback (most recent call last):\n66587   File \"get-pip.py\", line 20061, in <module>\n66588     main()\n66589   File \"get-pip.py\", line 194, in main\n66590     bootstrap(tmpdir=tmpdir)\n66591   File \"get-pip.py\", line 82, in bootstrap\n66592     import pip\n66593   File \"/var/folders/_j/p773bmb107gfdqlz9fsnqj6h0000gn/T/tmp9f77dI/pip.zip/pip/__init__.py\", line 26, in <module>\n66594   File \"/var/folders/_j/p773bmb107gfdqlz9fsnqj6h0000gn/T/tmp9f77dI/pip.zip/pip/utils/__init__.py\", line 27, in <module>\n66595   File \"/var/folders/_j/p773bmb107gfdqlz9fsnqj6h0000gn/T/tmp9f77dI/pip.zip/pip/_vendor/pkg_resources/__init__.py\", line 1027, in <module>\n66596   File \"/var/folders/_j/p773bmb107gfdqlz9fsnqj6h0000gn/T/tmp9f77dI/pip.zip/pip/_vendor/pkg_resources/__init__.py\", line 1030, in Environment\n66597   File \"/var/folders/_j/p773bmb107gfdqlz9fsnqj6h0000gn/T/tmp9f77dI/pip.zip/pip/_vendor/pkg_resources/__init__.py\", line 272, in get_supported_platfor\n      m\n66598   File \"/var/folders/_j/p773bmb107gfdqlz9fsnqj6h0000gn/T/tmp9f77dI/pip.zip/pip/_vendor/pkg_resources/__init__.py\", line 444, in _macosx_vers\n66599   File \"/Users/richard/.pyenv/versions/2.7.14/lib/python2.7/platform.py\", line 764, in mac_ver\n66600     info = _mac_ver_xml()\n66601   File \"/Users/richard/.pyenv/versions/2.7.14/lib/python2.7/platform.py\", line 741, in _mac_ver_xml\n66602     pl = plistlib.readPlist(fn)\n66603   File \"/Users/richard/.pyenv/versions/2.7.14/lib/python2.7/plistlib.py\", line 78, in readPlist\n66604     rootObject = p.parse(pathOrFile)\n66605   File \"/Users/richard/.pyenv/versions/2.7.14/lib/python2.7/plistlib.py\", line 401, in parse\n66606     from xml.parsers.expat import ParserCreate\n66607   File \"/Users/richard/.pyenv/versions/2.7.14/lib/python2.7/xml/parsers/expat.py\", line 4, in <module>\n66608     from pyexpat import *\n66609 ImportError: No module named pyexpat. ",
    "Nax": "I am getting the same issue.. ",
    "htesgaard": "Somehow CFLAGS and LDFLAGS might point to a wrong path. Try this:\nCFLAGS=\"-I$(brew --prefix openssl)/include\" \\\nLDFLAGS=\"-L$(brew --prefix openssl)/lib\" \\\npyenv install -v 3.6.3\n. ",
    "bright-pan": "i fix it \uff0cusing brew install pyenv. ",
    "sdcharle": "Ugh, I tried all these, still no joy.\n. ",
    "0x783czar": "Getting the same issue.  Setting the CFLAGS and LDFLAGS doesn't appear to have any effect.. ",
    "johnlabarge": "I still have this issue as well .:/\n. ",
    "elcolie": "My bad. It fixed now. Your comment made me reproduce again in new computer and it has no problem.. ",
    "fedorov": "Why don't you just open ~/.gitconfig and remove core.symlinks=false to take the guessing out of the picture?. ",
    "ejmg": "I began having this exact same problem and I'm thankful you figured it out. None of my new pyenv-virtualenvs are working properly anymore and it was because of this bug. I caught on to the fact that pip kept installing to site-packages for 3.5 and could not understand why... it should have been obvious!\nMay I ask, do you put your bash commands in .profile or .bashrc?. RIP.\nUpdating fixed this behavior for me. Make you tried as well. Also, I have the init command in .bashrc. I'm running Ubuntu 16.04 and all is well again or me.. It appears to still happen to me on some kind of interval. I am wondering if it has to do with running multiple shells with different pyenvs activated? I could see this possibly messing with the path variables involved (I do not know how they behave between shell instances).. ",
    "damonmaria": "I've pulled the latest version but am still getting the same result. Yes, I've got the startup code in .bashrc.\nThe below is from first logging into the machine (the same happens across 3 different servers I have):\n```console\nmindhive@Bonaire:~$ pip --version\npip 9.0.1 from /home/mindhive/.local/lib/python3.5/site-packages (python 3.5)\nmindhive@Bonaire:~$ tail .bashrc\nexport PATH=\"$PYENV_ROOT/bin:$PATH\"\nif command -v pyenv 1>/dev/null 2>&1; then\n  eval \"$(pyenv init -)\"\nfi\nCUDA paths\nexport PATH=/usr/local/cuda/bin:${PATH}\nexport LD_LIBRARY_PATH=/usr/local/cuda/lib64:${LD_LIBRARY_PATH}\nmindhive@Bonaire:~$ eval \"$(pyenv init -)\"\nmindhive@Bonaire:~$ pip --version\npip 9.0.1 from /home/mindhive/.pyenv/versions/3.6.4/lib/python3.6/site-packages (python 3.6)\nmindhive@Bonaire:~$ cat /etc/os-release\nNAME=\"Ubuntu\"\nVERSION=\"16.04.3 LTS (Xenial Xerus)\"\n```\nOriginally I didn't have the if around the eval in .bashrc but I updated it to match the pyenv instructions. Same thing was happening without the if condition. . These are production machines I'm using this on. There's only a global pyenv set, nothing else. I don't switch between different environments. \nJust realized I should have mentioned this is using a global env in the first place. . ",
    "bryant1410": "I mean, pyenv already loads the python virtualenv when changing directory. As pipenv is now the recommended way to go, shouldn't it load its virtualenv when changing directory as well?. ",
    "kjmrknsn": "+1\nIt would be nice if this PR could be checked and merged and Anaconda 5.0.1 could be installable via pyenv. . ",
    "aktivkohle": "@blueyed pyenv shell 3.6.0 is working now :+1:  I did however delete the miniconda folder and remove the miniconda relevant lines from .bashrc . That was temporarily installed as I was trying all kinds of things to change the version in that miniconda3-latest. \nThe AWS ubuntu machine with Ubuntu server seems to have no system python. Had never seen that before as had only ever used pyenv on Linux Mint which does have a system python. Don't think that should matter though:\nubuntu@ip-123-45-67-890:~$ python\nThe program 'python' can be found in the following packages:\n * python-minimal\n * python3\nTry: sudo apt install <selected package>\nubuntu@ip-123-45-67-890:~$\nI have finally fixed my library now, it is importing. It was probably not an issue with 3.6.0 / 3.6.3 after all.\n@jimmywan I have worked out how this works, it is not that intuitive, but inside miniconda3-latest you can run conda create -n myenv python=3.6.0 which creates \"an env inside an env\", ie you end up with the prompt like this:\n(miniconda3-latest/envs/myenv) ubuntu@ip-123-45-67-890:~/$ python\nPython 3.6.0 |Continuum Analytics, Inc.| (default, Dec 23 2016, 12:22:00) \n[GCC 4.4.7 20120313 (Red Hat 4.4.7-1)] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\nThe 3.6.0 I always wanted inside miniconda. It took the initiative to set that myenv as the shell python even though I never asked it to do that, but that was easy to undo, and then just run pyenv local miniconda3-latest/envs/myenv \nAlong the way, pyenv decided to make itself the system Python, also no harm.. Suppose the biggest lesson is that the conda commands can be run locally inside a pyenv, it does not have to be a system wide installation that alters the bashrc, only pyenv does that.\n. ",
    "1604780476": "thanks for you very much.\n. ",
    "albireox": "I'm on Mac OS 10.13 using fish, and all my packages are pip-installed or compiled from source. Because of the way my projects and packages are organised, virtualenvs are really not that useful for me.\nI'll give a try to the function snippet. It could be the solution to this problem.. ",
    "dmgening": "I would appreciate such function too. In case you need a quick shell with given version or environment, it would be a lifesaver.\n. Just found  out we have exec command https://github.com/pyenv/pyenv/blob/master/libexec/pyenv-exec\nWould it break anything if we add optional version argument? . ",
    "native-api": "If you have the version in global/local, you can invoke it as pythonX.Y. Also see https://stackoverflow.com/questions/40718770/pytest-running-with-another-version-of-python. pyenv is a set of bash scripts. A segmentation fault means a fault at C level. So, not pyenv-related.. ",
    "maartjeth": "Have you already found a solution for this? I'm having similar issues.. ",
    "richard-scott": "If you remove your ~/.pyenv/version file your setup will default back to the \"system\" version of Python.\nThe issue of \"pyenv global system\" not working is the same on Ubuntu 18.04.1 LTS too \ud83d\udc4e . From what I've seen nothing should ever be installed in a \"system\" site-packages folder if you correctly set the Python interpreter with pyenv. This output tells me that you have not selected which version of Python to run with pyenv\nThe `pylint` command exists in these Python versions:\n  3.6.0\nPyenv is telling you that you need to select 3.6.0 to use this command, you do this with the following:\n$ pyenv local 3.6.0\nThis will set the Python version for that directory, if you want it for every folder for that user then use the pyenv shell 3.60 variant of that command.\nTo double check this, what do these commands tell you on your system:\n$ pyenv shell\npyenv: no shell-specific version configured\n$ pyenv local\npyenv: no local version configured for this directory\nThey should show something like this:\n$ pyenv shell\n3.6.0\n$ pyenv local\n3.6.0\nIf yours say that no specific version has been configured then you need to set one... otherwise the shell will search your $PATH and fine the system python which is not what you want.. Exactly that, if you need a pip package in a different version of Python you need to change Python version with pyenv local/shell/global etc and then install the package again.. Also, that \"system\" version of Python only seems to show up on a Mac, I don't get to see that in Linux.. @ohcibi - The lack of a \"system\" version listed is a bug with pyenv as I get a \"system\" version on Ubuntu 16, but not on newer Ubuntu versions (e.g. 17 or 18).. No, the shims folder is automatically added to the path by this in .bash_profile:\n$ eval \"$(pyenv init -)\"\nAs you can see, the output from 'pyenv init' is evaluated and this sets/updates environment variables.\n$ pyenv init - | head -n 1\nexport PATH=\"/home/rscott/.pyenv/shims:${PATH}\"\n$. Have you ran a brew update; brew cask upgrade ?\nGoogle says to change the flag -std=c99 to -std=gnu99 when compiling.. ",
    "wvxvw": "Oh, I'm really sorry! Now I see it's a wrong project! My blind clicking through Google search results :( . ",
    "rickymulder": "Shims should allow commands to persist across versions.\nI examined /Users/rickm/.pyenv/versions/*/bin and compared the versions.  There were symlinks and scripts specifically for ansible and keeper.  Rsyncing through to 3.5.4 seems to have resolved the issue.. ",
    "zachriggle": "Merging to \"upstream\" rbenv only makes sense if it's possible to merge from rbenv to pyenv (which I don't think is the case).  I don't use rbenv and don't have a good way to test the changes.  I'll open an issue on the rbenv issue tracker pointing at this pull request.. The problem is that the realpath functions in pyenv changes directories before python is ever executed.\nThe simplest example (note I'm using the real realpath binary, not the shell function that pyenv declares)\n```\nsh -c 'PWD=/proc/self/cwd; cwd=\"$PWD\"; realpath .; cd /; realpath .; cd \"$cwd\"; realpath .'\n/home/pwntools\n/\n/\n```\nSpecifically, AOSP executes the compilers like:\nsh -c 'PWD=/proc/self/cwd path/to/clang --option foo.c\nWhere /path/to/clang is a Python script with a #!/usr/bin/env python shebang, which invokes the pyenv bash wrapper, which does the cd stuff in the first code block.\nYou can see a full end-to-end of the failure via:\n$ mkdir foo\n$ echo -e '#!/usr/bin/env python\\nprint \"Hello world\"' > foo/bar.py\n$ chmod +x foo/bar.py\n$ sh -c 'foo/bar.py'\nHello world\n$ sh -c 'PWD=/proc/self/cwd foo/bar.py'\npython: can't open file 'foo/bar.py': [Errno 2] No such file or directory\n$ sh -c 'PWD=/proc/self/cwd /usr/bin/python foo/bar.py'\nHello world\nYou can see the specific failure here:\n$ strace -qf -e execve,chdir sh -c 'PWD=/proc/self/cwd foo/bar.py'\n...\n1315  chdir(\"/proc/self/cwd/foo\")       = 0\n1315  chdir(\"/proc/self/cwd\")           = 0\n...\n1315  execve(\"/usr/bin/python\", [\"python\", \"foo/bar.py\"], [/* 49 vars */]) = 0. Thanks!\nOn Mon, Nov 20, 2017 at 6:57 PM Yamashita, Yuu notifications@github.com\nwrote:\n\nSince pyenv is used in various CI provider, I've merged this into pyenv's\nmaster to restore the corrupted build of the AOSP.\nI or someone who can work for it may be going to port this change to\nhttps://github.com/rbenv/rbenv to keep them compatible. Because the use\nof cd there in rbenv/pyenv is not anything essential, I don't foresee any\nissues merging this into rbenv as well.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pyenv/pyenv/pull/1036#issuecomment-345891516, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAG0GKW4HAxnmbSE9h9rCUuCmz-VJkeCks5s4i30gaJpZM4QcbB1\n.\n. No idea, I'm trying to respect the current code as closely as possible.  A different version of the patch tested [ -d ... ] && [ -x ... ] to ensure it was an accessible directory.\n\nSince echo $PWD is still necessary (to get the absolute path) it made sense to leave the abort.. Done. I've added that code back in to test -d and -x.  I'm not sure why the check is there in the first place, but there is a test for this specific check.. ",
    "leeexyz": "I also have this issue with macOS Sierra 10.12.6, pyenv 1.1.5 and Python 3.6.1. I think this is caused by there are many openssl versions. \nI just use the openssl installed by brew to replace the system openssl, then it seems ok now.. ",
    "cornfeedhobo": "Same here. OpenSuse 42.3, pyenv 1.2.1, target python 2.7.14.\nI have read the common issues wiki entry, and ensured that dependencies are installed.\nVerbose builds don't print any error related to ssl either. Just this error once a request is made.. ",
    "esanzgar": "In case it is useful this is the man page for aria2c version 0.16.0\n. ",
    "danieljaouen": "This had to do with incorrect line endings in my working directory.  Not sure how it happened but I managed to fix it on my own.\nClosing.. ",
    "shierro": "ah! you're right. i assumed the link you provided was the 1st line after installation. \nThanks for nailing it down for me! . ",
    "gzagatti": "I am experiencing the same problem. pyenv won't allow me to install python with the --enable-framework flag on. The only workaround that I found is to install conda which install python with the framework on. This is not ideal, as I am using a package manager to manage another package manager. \nI needed python with framework to use YouCompleteMe with vim.\nThis is similar to issue #99.. ",
    "FlorianKoegler": "@programus I received the notification for your previous deleted answer via mail, where the pythonw output shows Version 2.7.10... it looked like you called the built-in version of Python that comes with macOS. \ud83d\ude43\nIs this now definitely the one installed through pyenv?\nI personally moved from Homebrew to Nix, which works right out of the box and provides even better abilities to use separate environments for different projects.\nSo I cannot confirm your proposed solution.. Okay, this is interesting.\nThe Python 2.7.10 that comes with macOS actually has Numpy 1.14.0 and Matplotlib 2.1.2 already installed, so maybe check if you're importing the right side-packages?. ",
    "SPark9625": "Typing jupyter notebook doesn't work and gives me the above error, but jupyter-notebook works.\nEDIT: After this I restarted terminal and now jupyter works as well. Maybe it was a temporary bug.. ",
    "apanzerj": "I'm getting this too but we can't find any solution. @Dr8g0n did you ever get this fixed? \nMax OS High Sierra\npyEnv 1.2.7. ",
    "DevneyHamilton": "We had to make sure the python version in pip --version matched the python version we had installed. We used pyenv, with pyenv local 3.6.4 where 3.6.4 is the python version. . ",
    "HaoweiCh": "pyenv local 3.6.3, and under current directory, which pip will be /Users/c/.pyenv/shims/pip. and all the pip installed package is under 3.6.3 environment. very badly, it should be work before,,and after I reinstall my whole OS,  the autocomplete doesn't work..AND I thought it might be something I did to my system, and I Install system again...what a sad story !. thanks @C1tas . ",
    "iceblu3710": "Turns out my 3.6 install did not symlink pip3 => pip so when I was using pip install -U package it was a totally wrong everything. I went through all my pipenv versions and made sure pip and python pointed to their proper versions. Now switching versions works properly.\nAfter fixing that even running pip without -U works properly.. ",
    "joisonwk": "How to solve this problem, when I using the pip install any python libraries,  the error message all ways existed. Who has had the same problem?\nHere are the error tips:\nTraceback (most recent call last):\n  File \"/usr/bin/pip\", line 5, in <module>\n    from pkg_resources import load_entry_point\n  File \"/usr/lib/python3/dist-packages/pkg_resources.py\", line 2708, in <module>\n    working_set.require(__requires__)\n  File \"/usr/lib/python3/dist-packages/pkg_resources.py\", line 686, in require\n    needed = self.resolve(parse_requirements(requirements))\n  File \"/usr/lib/python3/dist-packages/pkg_resources.py\", line 584, in resolve\n    raise DistributionNotFound(req)\npkg_resources.DistributionNotFound: pip==1.0. ",
    "klimkjar": "I've added a fallback to true as well. I will have a look at the ruby-build script. Thank you for your work on pyenv!\nEdit: I've prepared a patch for ruby-build, I'll submit a pull request once this is approved.. Sure - I'll add a SunOS case statement instead.. ",
    "C1tas": "i got that pyenv install by brew, but zsh do not auto load /usr/local/share/zsh/site-functions/pyenv.zsh\n. @Chaaang just add \"source /usr/local/share/zsh/site-functions/pyenv.zsh\" in .zshrc can fix this problem. ",
    "henry0312": "I faced the same issue, too.. I found the cause in Homebrew and I'll fix.\nhttps://github.com/Homebrew/homebrew-core/pull/21565 broke https://github.com/pyenv/pyenv/blob/3fd23431af910e0a014f99eeaa39a8ef9af3a72d/libexec/pyenv-init#L98-L101.. This issue has been solved.. ",
    "hualidi123": "what's your mean\uff1f. ",
    "dieggsy": "@joshfriend you've linked to a section of the README that doesn't mention pip anywhere, and given no explanation, which isn't very helpful.\nI think you're hinting at the fact that I should have switched to the correct python version - in fact, it was my mistake to omit that from the original bug report. I did pyenv global 3.6.4, and after the correct python version is chosen, the pip corresponding to that python version is nowhere to be found. \nI didn't just start using pyenv (though I've admittedly not used python in some months), this problem only just started happening recently.. \"Nowhere to be found\" is probably too strong a wording, it's at least not on my PATH, and it used to be added automatically IIRC.. @joshfriend I apologize if i came across as a bit curt, wasn't my intention. The issue was apparently recently changing default shells and not initializing pyenv correctly, which led to an incorrect PATH.\nIn any case, thanks for pointing me to the README, as it led me to more closely examine what my PATH should be and what changed about my setup. :). ",
    "jklemm": "Thanks @webknjaz!\nI have this error on Mac OS High Sierra v 10.13.4 when trying to install python 2.7.12\nUnset the variable saves the day!\nunset CFLAGS\nbrew install pyenv readline xz\npyenv install {{version}}. ",
    "PAStheLoD": "Issues seems to be disabled on pyenv-doctor repo, hence the report here.. Issues are disabled on that repo, so I was not able to file it there.. ",
    "pythoninja": "Kubuntu 18.04 LTS. Same issue here. Issues on pyenv-doctor are disabled.. ",
    "montefra": "I also this issue on Ubuntu 18.04. Below is the full log.\nI have libssl-dev installed. To make pyenv doctor happy I have to install libssl1.0-dev, but it annoys a lot of other packages, like a lot of stuff of the nodejs stack.\n@yyuu, @joshfriend, anyone else responsible: please reopen the issue until it get fixed or enable issues in pyenv-doctor, so that this problem can be correctly reported.\n\n/tmp/python-build.20180823212043.13692 ~/.pyenv/plugins/pyenv-doctor\nCloning into 'python-pyenv-doctor'...\nwarning: --depth is ignored in local clones; use file:// instead.\n/tmp/python-build.20180823212043.13692/python-pyenv-doctor /tmp/python-build.20180823212043.13692 ~/.pyenv/plugins/pyenv-doctor\nchecking for gcc... gcc\nchecking whether the C compiler works... yes\nchecking for C compiler default output file name... a.out\nchecking for suffix of executables... \nchecking whether we are cross compiling... no\nchecking for suffix of object files... o\nchecking whether we are using the GNU C compiler... yes\nchecking whether gcc accepts -g... yes\nchecking for gcc option to accept ISO C89... none needed\nchecking for rl_gnu_readline_p in -lreadline... yes\nchecking for readline/readline.h... no\nchecking for SSL_library_init in -lssl... no\nconfigure: error: OpenSSL is not installed.\n. ",
    "cloudbring": "I have the same issue. It seems pyenv/pyenv-doctor#1 should fix this issue but, doesn't for me and another person in that thread. Either way, it seems to work regardless of what pyenv doctor says.. ",
    "rossmacarthur": "I have this problem on macOS\nOutput of pyenv doctor\n```\nCloning /Users/ross/.pyenv/plugins/pyenv-doctor/bin/.....\nInstalling python-pyenv-doctor...\npython-build: use readline from homebrew\nBUILD FAILED (OS X 10.14.3 using python-build 20180424)\nInspect or clean up the working tree at /var/folders/6z/sf_vd_bd08x9cl_4_6g8g5sr0000gn/T/python-build.20190213083157.23123\nResults logged to /var/folders/6z/sf_vd_bd08x9cl_4_6g8g5sr0000gn/T/python-build.20190213083157.23123.log\nLast 10 log lines:\nchecking for suffix of executables...\nchecking whether we are cross compiling... no\nchecking for suffix of object files... o\nchecking whether we are using the GNU C compiler... yes\nchecking whether clang accepts -g... yes\nchecking for clang option to accept ISO C89... none needed\nchecking for rl_gnu_readline_p in -lreadline... yes\nchecking for readline/readline.h... no\nchecking for SSL_library_init in -lssl... no\nconfigure: error: OpenSSL is not installed.\nProblem(s) detected while checking system.\nSee https://github.com/pyenv/pyenv/wiki/Common-build-problems for known solutions.\n```\nBut I can install python fine with pyenv install 3.7.2.. ",
    "yssource": "I have this problem on archlinux.\n``` bash\nInstalling python-pyenv-doctor...\nBUILD FAILED (ManjaroLinux 18.0.2 using python-build 1.2.9-4-g6b041822)\nInspect or clean up the working tree at /tmp/python-build.20190215214228.9238\nResults logged to /tmp/python-build.20190215214228.9238.log\nLast 10 log lines:\nchecking for suffix of executables... \nchecking whether we are cross compiling... no\nchecking for suffix of object files... o\nchecking whether we are using the GNU C compiler... yes\nchecking whether gcc accepts -g... yes\nchecking for gcc option to accept ISO C89... none needed\nchecking for rl_gnu_readline_p in -lreadline... yes\nchecking for readline/readline.h... no\nchecking for SSL_library_init in -lssl... no\nconfigure: error: OpenSSL is not installed.\nProblem(s) detected while checking system.\nSee https://github.com/pyenv/pyenv/wiki/Common-build-problems for known solutions\n```. ",
    "kbakk": "On MacOS Mojave (10.14) I was able to run pyenv doctor with these variables exported:\nsh\nexport LDFLAGS=\"-L/usr/local/opt/openssl/lib\"\nexport CPPFLAGS=\"-I/usr/local/opt/openssl/include\nopenssl is installed with brew (notice the caveats)\n```sh\nls -l /usr/local/opt/openssl\nlrwxr-xr-x  1 kristofferb  admin  24 Dec  8 15:10 /usr/local/opt/openssl -> ../Cellar/openssl/1.0.2q\nbrew info openssl\nopenssl: stable 1.0.2q (bottled) [keg-only]\nSSL/TLS cryptography library\nhttps://openssl.org/\n/usr/local/Cellar/openssl/1.0.2q (1,795 files, 12.1MB)\n  Poured from bottle on 2018-12-08 at 15:10:47\nFrom: https://github.com/Homebrew/homebrew-core/blob/master/Formula/openssl.rb\n==> Caveats\nA CA file has been bootstrapped using certificates from the SystemRoots\nkeychain. To add additional certificates (e.g. the certificates added in\nthe System keychain), place .pem files in\n  /usr/local/etc/openssl/certs\nand run\n  /usr/local/opt/openssl/bin/c_rehash\nopenssl is keg-only, which means it was not symlinked into /usr/local,\nbecause Apple has deprecated use of OpenSSL in favor of its own TLS and crypto libraries.\nIf you need to have openssl first in your PATH run:\n  echo 'export PATH=\"/usr/local/opt/openssl/bin:$PATH\"' >> ~/.zshrc\nFor compilers to find openssl you may need to set:\n  export LDFLAGS=\"-L/usr/local/opt/openssl/lib\"\n  export CPPFLAGS=\"-I/usr/local/opt/openssl/include\"\nFor pkg-config to find openssl you may need to set:\n  export PKG_CONFIG_PATH=\"/usr/local/opt/openssl/lib/pkgconfig\"\n```. ",
    "ksze": "Yep, issues are disabled on that repo. @yyuu Please enable issues on the pyenv-update repo.. ",
    "IamGianluca": "Right, I'm using it in combination with the virtualenvwrapper plugin, hence the confusion. I'm going to ask there. Thanks for your reply Josh.. An application (gcloud) is trying to run python2 while inside a python3 virtual environment. Following the documentation, I've tried to activate both python2 and 3. \n$ pyenv global\nsystem\n2.7.15\n$ pyenv virtualenvs\n  3.6.5/envs/dotfiles (created from /home/gianluca/.pyenv/versions/3.6.5)\n  3.6.5/envs/neovim3 (created from /home/gianluca/.pyenv/versions/3.6.5)\n  3.7.0/envs/search (created from /home/gianluca/.pyenv/versions/3.7.0)\n  dotfiles (created from /home/gianluca/.pyenv/versions/3.6.5)\n  neovim3 (created from /home/gianluca/.pyenv/versions/3.6.5)\n  search (created from /home/gianluca/.pyenv/versions/3.7.0)\n```\n$ pyenv activate search\n$ python --version\nPython 3.7.0\n$ python2 --version\npyenv: python2: command not found\nThe `python2' command exists in these Python versions:\n  2.7.15\n```\n```\n$ pyenv local search 2.7.15\n$ python2\npyenv: python2: command not found\nThe `python2' command exists in these Python versions:\n  2.7.15\n```\nAm I misinterpreting the documentation?. ",
    "dpkp": "You may need to install a few extra libs locally. Try this:\nbrew install libffi\nbrew install ncurses\nTo debug further, try looking in the tmp build directory referenced in the error message (above it is /var/folders/g9/m3cmg0m10cl80xt362wpsld00000gn/T/python-build.20180111115741.11402/pypy3-v5.10.0-osx64) and run pypy3 manually. On my install the crash message referenced the missing libraries above. After brew installing them I was able to install pypy3 via pyenv without error.. ",
    "kaikuchn": "I had the same error. I can only recommend looking into the build.log. In my case it turned out that some x11-header file couldn't be found. I ran xcode-select --install which installed an available update to the command-line tools and I was finally able to build python 2.7 successfully.. ",
    "GabLeRoux": "I tried again manually and it looks like the problem is not with pyenv but with building python itself. I tried with a few versions, 2.7, 3.6.3, 3.4.2, etc. Always the same output.\nI also tried to build python manually:\nbash\nwget https://www.python.org/ftp/python/3.4.2/Python-3.4.2.tar.xz\ntar xf Python-3.4.2.tar.xz\ncd Python-3.4\n./configure\nchecking build system type... x86_64-unknown-linux-gnu\nchecking host system type... x86_64-unknown-linux-gnu\nchecking for --enable-universalsdk... no\nchecking for --with-universal-archs... no\nchecking MACHDEP... linux\nchecking for --without-gcc... no\nchecking for gcc... gcc\nchecking whether the C compiler works... no\nconfigure: error: in `/home/laprise/python-fix/Python-3.4.2':\nconfigure: error: C compiler cannot create executables\nSee `config.log' for more details. @yyuu I understand, all I did was to follow the steps described in pyenv documentation on a fresh fedora install, and it didn't work out of the box so I thought it'd be worth mentioning here. \nI'll keep digging and post answer here anyway for further reference. It would be nice if you could also point me where this question should go.. After further investigation, the problem is indeed with the C compiler as one would expect from original error message.\nSo I tried to compile a simple c file:\nhelloworld.c\n```c\ninclude\nmain() {\n    printf(\"Hello World\");\n}\nbash\ngcc helloworld.c\n\nIn file included from /usr/include/features.h:447:0,\n                 from /usr/include/bits/libc-header-start.h:33,\n                 from /usr/include/stdio.h:27,\n                 from helloword.c:1:\n/usr/include/gnu/stubs.h:10:11: fatal error: gnu/stubs-64.h: No such file or directory\n # include \n           ^~~~~~~~~~~~~~~~\ncompilation terminated.\n```\nLet's confirm the file is not there\nbash\nls /usr/include/gnu/\nlibc-version.h  lib-names-32.h  lib-names.h  stubs-32.h  stubs.h\nOne way to figure out what package provides a specific file is to run dnf provides:\nbash\nsudo dnf provides /usr/include/gnu/stubs-64.h\n```\nLast metadata expiration check: 0:36:06 ago on Mon 15 Jan 2018 06:55:28 PM EST.\nglibc-devel-2.26-21.fc27.x86_64 : Object files for development using standard C\n                                : libraries.\nRepo        : updates\nMatched from:\nFilename    : /usr/include/gnu/stubs-64.h\nglibc-devel-2.26-15.fc27.x86_64 : Object files for development using standard C\n                                : libraries.\nRepo        : fedora\nMatched from:\nFilename    : /usr/include/gnu/stubs-64.h\n```\nI do have that package installed, maybe reinstalling it could fix somehting:\nbash\nsudo dnf reinstall -y glibc-devel\nbut /usr/include/gnu/stubs-64.h is still not present.\nbash\nsudo dnf list | grep glibc-devel\nglibc-devel.i686                       2.26-21.fc27                    @updates \nglibc-devel.x86_64                     2.26-21.fc27                    updates\nAccording to provides command, my current version should provide that file, but I ran ls /usr/include/gnu/stubs-64.h and it's still missing. \nThe system is a 64bit system:\nbash\nuname -a\nLinux hpbenlocalhost 4.14.11-300.fc27.x86_64 #1 SMP Wed Jan 3 13:52:28 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux\nContinuing investigation.. I managed to get passed the above C compiler error about missing stubs-64.h with the following command:\nbash\nsudo dnf reinstall -y glibc-devel.x86_64\nHard to tell why sudo dnf list | grep glibc-devel showed both i686 and x86_64. The reinstall command for glibc-devel didn't do anything but specifying glibc-devel.x86_64 directly did the trick \ud83d\udc4d\n\nNow that /usr/include/gnu/stubs-64.h can be found, I'm getting a different error:\nCFLAGS=-I/usr/include/openssl \\\nLDFLAGS=-L/usr/lib64 \\\npyenv install -v 3.4.2\n```\nDownloading Python-3.4.2.tar.xz...\n-> https://www.python.org/ftp/python/3.4.2/Python-3.4.2.tar.xz\nInstalling Python-3.4.2...\npatching file ./Lib/ssl.py\npatching file ./Modules/_ssl.c\nERROR: The Python ssl extension was not compiled. Missing the OpenSSL lib?\nPlease consult to the Wiki page to fix the problem.\nhttps://github.com/pyenv/pyenv/wiki/Common-build-problems\nBUILD FAILED (Fedora 27 using python-build 20160602)\nInspect or clean up the working tree at /tmp/python-build.20180115195610.6612\nResults logged to /tmp/python-build.20180115195610.6612.log\nLast 10 log lines:\n(cd /home/laprise/.pyenv/versions/3.4.2/share/man/man1; ln -s python3.4.1 python3.1)\nif test \"xupgrade\" != \"xno\"  ; then \\\n    case upgrade in \\\n        upgrade) ensurepip=\"--upgrade\" ;; \\\n        install|*) ensurepip=\"\" ;; \\\n    esac; \\\n     ./python -E -m ensurepip \\\n        $ensurepip --root=/ ; \\\nfi\nIgnoring ensurepip failure: pip 1.5.6 requires SSL/TLS\n```\nWhich is documented in the Common build problems 'ERROR: The Python ssl extension was not compiled. Missing the OpenSSL lib?'\nbash\nsudo dnf list | grep openssl\nopenssl.x86_64                         1:1.1.0g-1.fc27                 @updates \n[...]\nopenssl-devel.x86_64                   1:1.1.0g-1.fc27                 @updates \nopenssl-devel.i686                     1:1.1.0g-1.fc27                 updates\nSo I tried to reinstall all the required packages (the ones mentioned in the wiki)\nbash\ndnf reinstall -y zlib-devel bzip2 bzip2-devel readline-devel sqlite sqlite-devel openssl-devel xz xz-devel\nThat didn't help this time. I also tried to reinstall openssl-devel.x86_64, but I'm still getting the same error.. Alright, so I managed to get passed the openssl issue now, looks like it's related to https://github.com/pyenv/pyenv/issues/916\nI successfully installed python 3.6.3 even tho python 3.4.2 is still failing.\nbash\nopenssl version\nOpenSSL 1.1.0g-fips  2 Nov 2017. ",
    "cdfuller": "+ [pyenv:23] enable -f /usr/local/opt/pyenv/bin/../libexec/pyenv-realpath.dylib realpath\n+ [pyenv:54] '[' -z /usr/local/opt/pyenv ']'\n+ [pyenv:57] PYENV_ROOT=/usr/local/opt/pyenv\n+ [pyenv:59] export PYENV_ROOT\n+ [pyenv:62] '[' -z '' ']'\n+ [pyenv:63] '[' -n '' ']'\n+ [pyenv:74] '[' -z '' ']'\n+ [pyenv:75] PYENV_DIR=/Users/cody/Code\n+ [pyenv:78] '[' '!' -d /Users/cody/Code ']'\n+ [pyenv:78] '[' '!' -e /Users/cody/Code ']'\n++ [pyenv:82] cd /Users/cody/Code\n++ [pyenv:82] echo /Users/cody/Code\n+ [pyenv:82] PYENV_DIR=/Users/cody/Code\n+ [pyenv:83] export PYENV_DIR\n+ [pyenv:86] shopt -s nullglob\n++ [pyenv:88] abs_dirname /usr/local/opt/pyenv/bin/pyenv\n+++ [pyenv:25] realpath /usr/local/opt/pyenv/bin/pyenv\n++ [pyenv:25] local path=/usr/local/Cellar/pyenv/1.2.1/libexec/pyenv\n++ [pyenv:26] echo /usr/local/Cellar/pyenv/1.2.1/libexec\n+ [pyenv:88] bin_path=/usr/local/Cellar/pyenv/1.2.1/libexec\n+ [pyenv:89] for plugin_bin in '\"${PYENV_ROOT}/plugins/\"*/bin'\n+ [pyenv:90] PATH=/usr/local/opt/pyenv/plugins/python-build/bin:/usr/local/Cellar/pyenv-virtualenv/1.1.1/shims:/usr/local/opt/pyenv/shims:/Applications/Postgres.app/Contents/Versions/latest/bin:/usr/local/opt/pyenv/shims:/usr/local/opt/pyenv/shims:/Library/Frameworks/Python.framework/Versions/3.6/bin:/Users/cody/.rbenv/shims:/Users/cody/.rbenv/bin:/Users/cody/.dotFiles/bin:/usr/local/Cellar/pyenv-virtualenv/1.1.1/shims:/usr/local/opt/pyenv/shims:/usr/local/opt/pyenv/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\n+ [pyenv:92] export PATH=/usr/local/Cellar/pyenv/1.2.1/libexec:/usr/local/opt/pyenv/plugins/python-build/bin:/usr/local/Cellar/pyenv-virtualenv/1.1.1/shims:/usr/local/opt/pyenv/shims:/Applications/Postgres.app/Contents/Versions/latest/bin:/usr/local/opt/pyenv/shims:/usr/local/opt/pyenv/shims:/Library/Frameworks/Python.framework/Versions/3.6/bin:/Users/cody/.rbenv/shims:/Users/cody/.rbenv/bin:/Users/cody/.dotFiles/bin:/usr/local/Cellar/pyenv-virtualenv/1.1.1/shims:/usr/local/opt/pyenv/shims:/usr/local/opt/pyenv/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\n+ [pyenv:92] PATH=/usr/local/Cellar/pyenv/1.2.1/libexec:/usr/local/opt/pyenv/plugins/python-build/bin:/usr/local/Cellar/pyenv-virtualenv/1.1.1/shims:/usr/local/opt/pyenv/shims:/Applications/Postgres.app/Contents/Versions/latest/bin:/usr/local/opt/pyenv/shims:/usr/local/opt/pyenv/shims:/Library/Frameworks/Python.framework/Versions/3.6/bin:/Users/cody/.rbenv/shims:/Users/cody/.rbenv/bin:/Users/cody/.dotFiles/bin:/usr/local/Cellar/pyenv-virtualenv/1.1.1/shims:/usr/local/opt/pyenv/shims:/usr/local/opt/pyenv/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\n+ [pyenv:94] PYENV_HOOK_PATH=:/usr/local/opt/pyenv/pyenv.d\n+ [pyenv:95] '[' /usr/local/Cellar/pyenv/1.2.1 '!=' /usr/local/opt/pyenv ']'\n+ [pyenv:97] PYENV_HOOK_PATH=:/usr/local/opt/pyenv/pyenv.d:/usr/local/Cellar/pyenv/1.2.1/pyenv.d\n+ [pyenv:99] PYENV_HOOK_PATH=:/usr/local/opt/pyenv/pyenv.d:/usr/local/Cellar/pyenv/1.2.1/pyenv.d:/usr/local/etc/pyenv.d:/etc/pyenv.d:/usr/lib/pyenv/hooks\n+ [pyenv:103] PYENV_HOOK_PATH=/usr/local/opt/pyenv/pyenv.d:/usr/local/Cellar/pyenv/1.2.1/pyenv.d:/usr/local/etc/pyenv.d:/etc/pyenv.d:/usr/lib/pyenv/hooks\n+ [pyenv:104] export PYENV_HOOK_PATH\n+ [pyenv:106] shopt -u nullglob\n+ [pyenv:109] command=versions\n+ [pyenv:110] case \"$command\" in\n++ [pyenv:123] command -v pyenv-versions\n+ [pyenv:123] command_path=/usr/local/Cellar/pyenv/1.2.1/libexec/pyenv-versions\n+ [pyenv:124] '[' -n /usr/local/Cellar/pyenv/1.2.1/libexec/pyenv-versions ']'\n+ [pyenv:126] shift 1\n+ [pyenv:127] '[' '' = --help ']'\n+ [pyenv:134] exec /usr/local/Cellar/pyenv/1.2.1/libexec/pyenv-versions\n+ [pyenv-versions:10] unset bare\n+ [pyenv-versions:11] unset skip_aliases\n+ [pyenv-versions:28] versions_dir=/usr/local/opt/pyenv/versions\n+ [pyenv-versions:30] enable -f /usr/local/Cellar/pyenv/1.2.1/libexec/pyenv-realpath.dylib realpath\n+ [pyenv-versions:63] '[' -d /usr/local/opt/pyenv/versions ']'\n++ [pyenv-versions:64] realpath /usr/local/opt/pyenv/versions\n+ [pyenv-versions:64] versions_dir=/usr/local/Cellar/pyenv/1.2.1/versions\n+ [pyenv-versions:67] '[' -n '' ']'\n+ [pyenv-versions:73] hit_prefix='* '\n+ [pyenv-versions:74] miss_prefix='  '\n+ [pyenv-versions:75] OLDIFS='\n'\n+ [pyenv-versions:76] IFS=:\n+ [pyenv-versions:76] current_versions=($(pyenv-version-name || true))\n++ [pyenv-versions:76] pyenv-version-name\n+ [pyenv-version-name:6] '[' -z '' ']'\n++ [pyenv-version-name:7] pyenv-version-file\n+ [pyenv-version-file:7] target_dir=\n+ [pyenv-version-file:22] '[' -n '' ']'\n+ [pyenv-version-file:25] find_local_version_file /Users/cody/Code\n+ [pyenv-version-file:10] local root=/Users/cody/Code\n+ [pyenv-version-file:11] [[ /Users/cody/Code =~ ^//[^/]*$ ]]\n+ [pyenv-version-file:12] '[' -f /Users/cody/Code/.python-version ']'\n+ [pyenv-version-file:16] '[' -n /Users/cody/Code ']'\n+ [pyenv-version-file:17] root=/Users/cody\n+ [pyenv-version-file:11] [[ /Users/cody =~ ^//[^/]*$ ]]\n+ [pyenv-version-file:12] '[' -f /Users/cody/.python-version ']'\n+ [pyenv-version-file:16] '[' -n /Users/cody ']'\n+ [pyenv-version-file:17] root=/Users\n+ [pyenv-version-file:11] [[ /Users =~ ^//[^/]*$ ]]\n+ [pyenv-version-file:12] '[' -f /Users/.python-version ']'\n+ [pyenv-version-file:16] '[' -n /Users ']'\n+ [pyenv-version-file:17] root=\n+ [pyenv-version-file:11] [[ '' =~ ^//[^/]*$ ]]\n+ [pyenv-version-file:12] '[' -f /.python-version ']'\n+ [pyenv-version-file:16] '[' -n '' ']'\n+ [pyenv-version-file:16] break\n+ [pyenv-version-file:19] return 1\n+ [pyenv-version-file:26] '[' /Users/cody/Code '!=' /Users/cody/Code ']'\n+ [pyenv-version-file:27] echo /usr/local/opt/pyenv/version\n+ [pyenv-version-name:7] PYENV_VERSION_FILE=/usr/local/opt/pyenv/version\n++ [pyenv-version-name:8] pyenv-version-file-read /usr/local/opt/pyenv/version\n+ [pyenv-version-file-read:6] VERSION_FILE=/usr/local/opt/pyenv/version\n+ [pyenv-version-file-read:8] '[' -e /usr/local/opt/pyenv/version ']'\n+ [pyenv-version-file-read:11] IFS='\n'\n+ [pyenv-version-file-read:12] words=($(cut -b 1-1024 \"$VERSION_FILE\" | sed 's/^\\s*\\(\\S\\+\\).*/\\1/'))\n++ [pyenv-version-file-read:12] cut -b 1-1024 /usr/local/opt/pyenv/version\n++ [pyenv-version-file-read:12] sed 's/^\\s*\\(\\S\\+\\).*/\\1/'\n+ [pyenv-version-file-read:13] versions=(\"${words[@]}\")\n+ [pyenv-version-file-read:15] '[' -n 3.6.4 ']'\n+ [pyenv-version-file-read:16] IFS=:\n+ [pyenv-version-file-read:17] echo 3.6.4\n+ [pyenv-version-file-read:18] exit\n+ [pyenv-version-name:8] PYENV_VERSION=3.6.4\n+ [pyenv-version-name:11] OLDIFS='\n'\n+ [pyenv-version-name:12] IFS='\n'\n+ [pyenv-version-name:12] scripts=(`pyenv-hooks version-name`)\n++ [pyenv-version-name:12] pyenv-hooks version-name\n+ [pyenv-hooks:9] '[' version-name = --complete ']'\n+ [pyenv-hooks:18] PYENV_COMMAND=version-name\n+ [pyenv-hooks:19] '[' -z version-name ']'\n+ [pyenv-hooks:24] enable -f /usr/local/Cellar/pyenv/1.2.1/libexec/pyenv-realpath.dylib realpath\n+ [pyenv-hooks:55] IFS=:\n+ [pyenv-hooks:55] hook_paths=($PYENV_HOOK_PATH)\n+ [pyenv-hooks:57] shopt -s nullglob\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:63] shopt -u nullglob\n+ [pyenv-version-name:13] IFS='\n'\n+ [pyenv-version-name:18] '[' -z 3.6.4 ']'\n+ [pyenv-version-name:18] '[' 3.6.4 = system ']'\n+ [pyenv-version-name:28] versions=()\n+ [pyenv-version-name:29] OLDIFS='\n'\n+ [pyenv-version-name:30] IFS=:\n+ [pyenv-version-name:31] any_not_installed=0\n+ [pyenv-version-name:32] for version in '${PYENV_VERSION}'\n+ [pyenv-version-name:33] version_exists 3.6.4\n+ [pyenv-version-name:24] local version=3.6.4\n+ [pyenv-version-name:25] '[' -d /usr/local/opt/pyenv/versions/3.6.4 ']'\n+ [pyenv-version-name:34] versions=(\"${versions[@]}\" \"${version}\")\n+ [pyenv-version-name:43] IFS='\n'\n+ [pyenv-version-name:45] OLDIFS='\n'\n+ [pyenv-version-name:46] IFS=:\n+ [pyenv-version-name:47] echo 3.6.4\n+ [pyenv-version-name:49] IFS='\n'\n+ [pyenv-version-name:51] '[' 0 = 1 ']'\n+ [pyenv-versions:77] IFS='\n'\n+ [pyenv-versions:78] include_system=1\n+ [pyenv-versions:81] num_versions=0\n+ [pyenv-versions:105] '[' -n 1 ']'\n+ [pyenv-versions:105] PYENV_VERSION=system\n+ [pyenv-versions:105] pyenv-which python\n+ [pyenv-versions:106] print_version system\n+ [pyenv-versions:96] exists system 3.6.4\n+ [pyenv-versions:84] local car=system\n+ [pyenv-versions:85] local cdar\n+ [pyenv-versions:86] shift\n+ [pyenv-versions:87] for cdar in '\"$@\"'\n+ [pyenv-versions:88] '[' system == 3.6.4 ']'\n+ [pyenv-versions:92] return 1\n+ [pyenv-versions:99] echo '  system'\n  system\n+ [pyenv-versions:101] num_versions=1\n+ [pyenv-versions:109] shopt -s nullglob\n+ [pyenv-versions:110] for path in '\"$versions_dir\"/*'\n+ [pyenv-versions:111] '[' -d /usr/local/Cellar/pyenv/1.2.1/versions/3.4.7 ']'\n+ [pyenv-versions:112] '[' -n '' ']'\n+ [pyenv-versions:117] print_version 3.4.7\n+ [pyenv-versions:96] exists 3.4.7 3.6.4\n+ [pyenv-versions:84] local car=3.4.7\n+ [pyenv-versions:85] local cdar\n+ [pyenv-versions:86] shift\n+ [pyenv-versions:87] for cdar in '\"$@\"'\n+ [pyenv-versions:88] '[' 3.4.7 == 3.6.4 ']'\n+ [pyenv-versions:92] return 1\n+ [pyenv-versions:99] echo '  3.4.7'\n  3.4.7\n+ [pyenv-versions:101] num_versions=2\n+ [pyenv-versions:119] for env_path in '\"${path}/envs/\"*'\n+ [pyenv-versions:120] '[' -d /usr/local/Cellar/pyenv/1.2.1/versions/3.4.7/envs/nhc-dev ']'\n+ [pyenv-versions:121] print_version /usr/local/Cellar/pyenv/1.2.1/versions/3.4.7/envs/nhc-dev\n+ [pyenv-versions:96] exists /usr/local/Cellar/pyenv/1.2.1/versions/3.4.7/envs/nhc-dev 3.6.4\n+ [pyenv-versions:84] local car=/usr/local/Cellar/pyenv/1.2.1/versions/3.4.7/envs/nhc-dev\n+ [pyenv-versions:85] local cdar\n+ [pyenv-versions:86] shift\n+ [pyenv-versions:87] for cdar in '\"$@\"'\n+ [pyenv-versions:88] '[' /usr/local/Cellar/pyenv/1.2.1/versions/3.4.7/envs/nhc-dev == 3.6.4 ']'\n+ [pyenv-versions:92] return 1\n+ [pyenv-versions:99] echo '  /usr/local/Cellar/pyenv/1.2.1/versions/3.4.7/envs/nhc-dev'\n  /usr/local/Cellar/pyenv/1.2.1/versions/3.4.7/envs/nhc-dev\n+ [pyenv-versions:101] num_versions=3\n+ [pyenv-versions:110] for path in '\"$versions_dir\"/*'\n+ [pyenv-versions:111] '[' -d /usr/local/Cellar/pyenv/1.2.1/versions/3.6.4 ']'\n+ [pyenv-versions:112] '[' -n '' ']'\n+ [pyenv-versions:117] print_version 3.6.4\n+ [pyenv-versions:96] exists 3.6.4 3.6.4\n+ [pyenv-versions:84] local car=3.6.4\n+ [pyenv-versions:85] local cdar\n+ [pyenv-versions:86] shift\n+ [pyenv-versions:87] for cdar in '\"$@\"'\n+ [pyenv-versions:88] '[' 3.6.4 == 3.6.4 ']'\n+ [pyenv-versions:89] return 0\n++ [pyenv-versions:97] pyenv-version-origin\n+ [pyenv-version-origin:6] unset PYENV_VERSION_ORIGIN\n+ [pyenv-version-origin:8] OLDIFS='\n'\n+ [pyenv-version-origin:9] IFS='\n'\n+ [pyenv-version-origin:9] scripts=(`pyenv-hooks version-origin`)\n++ [pyenv-version-origin:9] pyenv-hooks version-origin\n+ [pyenv-hooks:9] '[' version-origin = --complete ']'\n+ [pyenv-hooks:18] PYENV_COMMAND=version-origin\n+ [pyenv-hooks:19] '[' -z version-origin ']'\n+ [pyenv-hooks:24] enable -f /usr/local/Cellar/pyenv/1.2.1/libexec/pyenv-realpath.dylib realpath\n+ [pyenv-hooks:55] IFS=:\n+ [pyenv-hooks:55] hook_paths=($PYENV_HOOK_PATH)\n+ [pyenv-hooks:57] shopt -s nullglob\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:63] shopt -u nullglob\n+ [pyenv-version-origin:10] IFS='\n'\n+ [pyenv-version-origin:15] '[' -n '' ']'\n+ [pyenv-version-origin:17] '[' -n '' ']'\n+ [pyenv-version-origin:20] pyenv-version-file\n+ [pyenv-version-file:7] target_dir=\n+ [pyenv-version-file:22] '[' -n '' ']'\n+ [pyenv-version-file:25] find_local_version_file /Users/cody/Code\n+ [pyenv-version-file:10] local root=/Users/cody/Code\n+ [pyenv-version-file:11] [[ /Users/cody/Code =~ ^//[^/]*$ ]]\n+ [pyenv-version-file:12] '[' -f /Users/cody/Code/.python-version ']'\n+ [pyenv-version-file:16] '[' -n /Users/cody/Code ']'\n+ [pyenv-version-file:17] root=/Users/cody\n+ [pyenv-version-file:11] [[ /Users/cody =~ ^//[^/]*$ ]]\n+ [pyenv-version-file:12] '[' -f /Users/cody/.python-version ']'\n+ [pyenv-version-file:16] '[' -n /Users/cody ']'\n+ [pyenv-version-file:17] root=/Users\n+ [pyenv-version-file:11] [[ /Users =~ ^//[^/]*$ ]]\n+ [pyenv-version-file:12] '[' -f /Users/.python-version ']'\n+ [pyenv-version-file:16] '[' -n /Users ']'\n+ [pyenv-version-file:17] root=\n+ [pyenv-version-file:11] [[ '' =~ ^//[^/]*$ ]]\n+ [pyenv-version-file:12] '[' -f /.python-version ']'\n+ [pyenv-version-file:16] '[' -n '' ']'\n+ [pyenv-version-file:16] break\n+ [pyenv-version-file:19] return 1\n+ [pyenv-version-file:26] '[' /Users/cody/Code '!=' /Users/cody/Code ']'\n+ [pyenv-version-file:27] echo /usr/local/opt/pyenv/version\n+ [pyenv-versions:97] echo '* 3.6.4 (set by /usr/local/opt/pyenv/version)'\n* 3.6.4 (set by /usr/local/opt/pyenv/version)\n+ [pyenv-versions:101] num_versions=4\n+ [pyenv-versions:110] for path in '\"$versions_dir\"/*'\n+ [pyenv-versions:111] '[' -d /usr/local/Cellar/pyenv/1.2.1/versions/nhc-dev ']'\n+ [pyenv-versions:112] '[' -n '' ']'\n+ [pyenv-versions:117] print_version nhc-dev\n+ [pyenv-versions:96] exists nhc-dev 3.6.4\n+ [pyenv-versions:84] local car=nhc-dev\n+ [pyenv-versions:85] local cdar\n+ [pyenv-versions:86] shift\n+ [pyenv-versions:87] for cdar in '\"$@\"'\n+ [pyenv-versions:88] '[' nhc-dev == 3.6.4 ']'\n+ [pyenv-versions:92] return 1\n+ [pyenv-versions:99] echo '  nhc-dev'\n  nhc-dev\n+ [pyenv-versions:101] num_versions=5\n+ [pyenv-versions:126] shopt -u nullglob\n+ [pyenv-versions:128] '[' 5 -eq 0 ']'. Does that mean there is a problem with my config?. Thank's for your response! I reinstalled and hopefully that should solve one of my problems.. ",
    "sammck": "Ah, I see now that multiple versions (specified as separate command line arguments) can be specified on the 'penv global' or 'pyenv local' command lines. Nice. I think it would be worth improving the commandline help to describe this feature.... ",
    "shawnbutts": "I don't see this issue on my setup.\n/usr/local/Cellar/pyenv/1.0.10_1 seems to point to an older version that 1.2.1 that you have listed.  For me, PYENV_ROOT is pointing to /usr/local/Cellar/pyenv/1.2.1\nPerhaps PYENV_ROOT is pointing to an old version that brew is removing.  . ",
    "itachi-59": "solved. ",
    "sp4ke": "I realized it was a memory error on my system. Nothing todo with pyenv. . ",
    "printjs": "@yyuu . thank you. @yyuu . ",
    "pecigonzalo": "I would advise using a virtualenv for this, it will get away from the shim issues.. ",
    "clintharrison": "@yyuu any updates here? \ud83d\ude42 . Ping :). This function is already registered as an exit trap, but I've renamed it so hopefully its purpose is clearer.. Alright, I removed the environment variable to opt in to this behavior, and use flock or shlock when available. Unfortunately, without flock or shlock, there's no way to wait for the lock becoming available when we fall back to the noclobber variant. This limitation is fundamentally the reason for adding flock and shlock support.. ",
    "charlesreid1": "For reference, here is the text given to Carbon:\n```\n$ pyenv versions\n  2.7.10\n* 3.5.0 (set by /Users/yuu/.pyenv/version)\n  miniconda3-3.16.0\n  pypy-2.6.0\n$ python --version\nPython 3.5.0\n$ pyenv global pypy-2.6.0\n$ python --version\nPython 2.7.9 (295ee98b69288471b0fcf2e0ede82ce5209eb90b, Jun 01 2015, 17:30:13)\n[PyPy 2.6.0 with GCC 4.9.2]\n$ cd /Volumes/treasuredata/jupyter\n$ pyenv version\nminiconda3-3.16.0 (set by /Volumes/treasuredata/.python-version)\n$ python --version\nPython 3.4.3 :: Continuum Analytics, Inc.\n```. ",
    "anapaulagomes": "If you're using pyenv, don't forget of loading it as the local/global version and reload it afterwards (eval \"$(pyenv init -)\". :). ",
    "a-hurst": "I encountered this same bug yesterday, trying to set up an environment in which to run a colleague's ancient code.\nAt first, I was convinced I was doing something wrong, but it turns out that it's an error on pyenv's part: Python versions this old don't build with SSL by default, and the built-in OpenSSL libraries preinstalled on most Macs don't work properly, so pyenv needs to check if you have a working version installed (e.g. through Homebrew) and then set some flags so that it gets used.\npyenv's python-build files for python 2.6 and up include the line that does this check:\ninstall_package \"openssl-1.0.2k\" \"https://www.openssl.org/source/openssl-1.0.2k.tar.gz#6b3977c61f2aedf0f96367dcfb5c6e578cf37e7b8d913b4ecb6643c3cb88d8c0\" mac_openssl --if has_broken_mac_openssl\nbut this line is missing in the python-build files for 2.5.6 and older for some reason. If you add it to the top of the python-build file manually for the version you want and uninstall/reinstall, HTTPS (and therefore pip) will work correctly. The python-build files can be found in\n/usr/local/Cellar/pyenv/1.2.3/plugins/python-build/share/python-build/\nand can be edited with any text editor.\nAfter reinstalling with that change, I was able to do pip install virtualenv without error in a 2.5.6 environment. Hope that helps!. ",
    "FlorianHeigl": "In case someone comes here with the same issue on SUSE SLES or Leap 42.3: zypper install python-urllib3. ",
    "camJWS": "Thanks very much yyuu, problem sorted.. ",
    "nivintw": "Mac OSX version 10.13.3 in case that is relevant\n. After doing some digging I think this might have been caused by something else. . ",
    "HaoYurufeng": "hello,@deadlylaid\nWhen I  install python-2.7.3 by pyenv like you \npyenv install 2.7.3\n it raise the same error with yours, I want to know the solution to this question, did you solve that?\n. ",
    "EscapeLife": "@deadlylaid  You can make cache dir(.pyenv/cache)\uff0cand put Python-3.6.3.tar.xz in it, so try again.\nbash\n$ mkdir ~/.pyenv/cache\n$ cp /xxx/xxx/Python-3.6.3.tar.xz ~/.pyenv/cache\n$ pyenv install 3.6.1\nGood luck for you.. MacOS system\uff0cplease use brew install instead of Basic GitHub Checkout.\nbash\n$ brew install pyenv\nIf you force do, can run this.  Basic GitHub Checkout installation Python3.7.0 has bug.\nbash\n$ brew install 'openssl@1.1'\n$ CONFIGURE_OPTS=\"--with-openssl=$(brew --prefix openssl@1.1)\" pyenv install 3.7.0\n@rmerkushin l test can be install Python3.7.0 with pyenv normally\uff0chope to help you!. @TensorTom  Please check ~/environment/project has .python-version file. If normal, you can check that you have executed the pyenv local 3.7.0 command. Good luck for you. ",
    "deadlylaid": "@HaoYurufeng I'm sorry about late answer, I uninstall pyenv clearly and reinstall.\nIt works find :)\nand thank you for your advice @EscapeLife :):). ",
    "pjw91": "Tested on Ubuntu 16.04 with 2.1.3 2.7.14 3.6.4 pypy3.5-5.10.1-src\nHowever, I'm not sure if $ORIGIN is supported on other platforms (such as FreeBSD, MacOS, Windows).. ",
    "NIC619": "Same here. Recently used migration assistant too.\nReplacing the old /usr/local/include directory solved the problem. And brew doctor did gave warning about the headers in /usr/local/include. Wish I had knew...\n. ",
    "EvergreenHZ": "Thank you for your time. I used it on Arch before and everything worked fine. I just switched to Ubuntu and forgot to change the .bash_profile. But now it works fine. . ",
    "zafartahirov": "Still buggy :( Closing. ",
    "deanishe": "Thanks for the response.\n\nThis is core design issue and there's no easy and general workaround for it\n\nThen what needs to change to stop it being a core design issue? Sure, it's possible to work around in most situations, but programs shouldn't be breaking $PATH in the first place.\n(And pyenv does break $PATH: it deliberately breaks the behaviour of the system and other programs by shadowing existing and non-existing real programs with shim scripts that throw errors.)\nMaybe I've missed something due to the way I use pyenv (as a better virtualenv), but I don't really understand why pyenv even needs to drop its shims in $PATH in the normal case. Their default function (\"I look like a real program, but I'm not! You can find one here or here\") seems like a command-line version of ISPs hijacking failed DNS lookups and showing a webpage instead of returning NXDOMAIN: it is helpful in certain very limited circumstances, but mostly it just breaks shit because the system no longer works the way literally everything else expects it to.\npyenv can fiddle with $PATH when I activate/deactivate a Python version/virtualenv. It should (have an option to) leave $PATH the hell alone when I'm not actively using pyenv.\nIn particular, it shouldn't be dropping scripts on $PATH that override existing, working programs nor that make it appear that a program is installed when it actually isn't.\n. > The issue is that the shims have to be in the $PATH to be found, so that it can delegate to the selected version (in the case where it is installed/available).\nWhy? I'm not a heavy user of pyenv, so presumably I'm missing something.\nIt seems to me that the only useful purpose of a shim is to call a program in the ~/bin directory of the active Python version. Why not just add that directory to $PATH when I activate the corresponding Python version instead of creating a bunch of shims?\nIf it must be shims, why can't they be adjusted when Python versions are (de)activated so that only working shims exist at any given time?\nMaking it appear that a program is available when it isn't and overriding working programs with do-nothing shims is pretty bad behaviour.. > there should only be shims for programs (including python) that are installed\nI didn't say \"installed\", I said \"working\". At any given time, a bunch of the shims will throw errors because they belong to non-activated versions. This breaks $PATH and other software.\n\nThat is only the case for when foo is installed in some virtualenv\n\nIf that version isn't activated, the shim throws an error. As such, it doesn't much matter that foo is indeed installed somewhere: pyenv's foo shim is breaking $PATH as long as the active version doesn't contain foo.\n\nbut there are other ways to activate virtualenvs\n\nActivation is easy. I really like pyenv because of its ability to cleanly install different versions of Python and create virtualenvs from them.\n\nThinking about it however, I could imagine it to be smarter indeed, e.g. by using some extra layer\n\nI know nothing about pyenv's internals. I would just like my $PATH\u2014at any given time\u2014to be free of shims that literally throw \"command not found\" errors.\nThese, simply put, should not exist. They break $PATH by causing things like which python3.5 to incorrectly succeed or by overriding actual working versions later on $PATH.\n. @mislav Thanks for the explanation.\n\nHowever, in most other use cases\n\nIn one use case. When you're currently writing Python code. That's the only time command-not-found shims are in any way useful. The rest of the time, they're just breaking $PATH.\nPersonally, I find using autoenv or a .python-version to activate pyenv's versions more than good enough to ensure the right version is activated and the right pip (or whatever) gets run.\nIdeally, I would like a global \"I accept responsibility for running the right program; don't break my $PATH\" setting, which would tell pyenv not to create any command-not-found shims that will fail instead of running the corresponding program (i.e. only shims for programs in the active version exist).\nAt the least, I would like pyenv to not create failing shims when it's \"off\", i.e. I have it set to \"system\" version. In this situation, the whole \"shadowing prevents you from running the wrong version\" argument seems moot.\nI spend a small fraction of my time coding Python, and I would like to not have a broken $PATH the rest of the time.\n\nA fundamental rewrite of the whole implementation, and a rollout to all existing users that would somehow need to preserve backwards compatibility\n\nAgain, I'm not familiar with pyenv's internals, but I'd be very surprised if not creating shims for the non-active version would require a \"fundamental rewrite of the whole implementation\".\nAs for backwards-compatibility, keep the current behaviour as default and add an option.\n\nOr am I missing a simpler solution?\n\nThe chruby/standard virtualenv behaviour of adding their bin dir to $PATH works for me. That it doesn't work in non-interactive shells doesn't matter (to me, at least): pyenv's shims aren't on my $PATH in non-interactive shells anyway. It's broken enough in interactive mode.\nWhen I use pyenv to install an application (e.g. httpie or beets), I symlink its executable (not the shim) to ~/bin or /usr/local/bin.. @techalchemy pyenv-which-ext should prevent the shims from throwing errors for programs that are installed elsewhere, such as git.\nThe main problem is that the mere existence of the shims causes tests like if hash progname; then ... to incorrectly succeed when the program isn't actually installed in the active Python version.\nAny solution to that problem would presumably require the removal of all error-throwing shims from $PATH, however, which would also solve the shadowing problem and make the above extension redundant.. ",
    "bitfinity": "Yes, I'm trying to use the system python. But python is mapping to ~/.pyenv/shims/python even though I've run pyenv deactivate.. ",
    "mislav": "I'm not a user of pyenv, but I'm the maintainer of rbenv, which pyenv is a direct derivative of. I agree that the core design of rbenv has this big flaw in some use cases. However, in most other use cases, this \u201cflaw\u201d is actually an important design feature.\n\n\nLet's suppose that you have a system installation of Ruby /usr/local/bin/ruby and a system installation of Bundler (important tool for managing Ruby dependencies /usr/local/bin/bundle).\n\n\nNow, you add rbenv to this system, install a Ruby 2.3.4, and install its own Bundler. You would end up with ~/.rbenv/shims/bundle that activates ~/.rbenv/versions/2.3.4/bin/bundle when bundle is invoked in a context of Ruby 2.3.4.\n\n\nNow, add another version of Ruby: 2.4.0. However, let's say you forgot to install Bundler on this version. Running bundle in this version would error with: \u201cThe 'bundle' command exists in these Ruby versions: 2.3.4\u201d. Notice how this call doesn't get dispatched to /usr/local/bin/bundle, which would activate Bundler for a wrong (system) Ruby version and mess up this project's dependencies. The shadowing of executables through ~/.rbenv/shims is an important design feature meant to scope all calls to Ruby tools to a single Ruby version, and fail otherwise.\n\n\nThis feature isn't without its flaws. If a single Ruby gem installed to any of the rbenv-managed Ruby versions were to add a man executable, then ~/.rbenv/shims/man would be generated and that would shadow the system man on any invocation, even when the Ruby version that contains the offending gem isn't activated. This scenario happened to people using yarn (a tool for managing JavaScript dependencies).\nI like chruby's design philosophy, where the currently activated Ruby simply adds its bin directory to PATH. This is dependent on an interactive shell and cd hacks, though. Rbenv's philosophy depends on the PATH lookup mechanism and not the presence of an interactive shell. They are different approaches. They have their drawbacks and benefits.\n@deanishe I'm not sure what you're expecting with this issue. Are you suggesting a whole redesign of the core philosophy of how this version manager works. If so, would you suggest an alternative?\n\nThen what needs to change to stop it being a core design issue?\n\nA fundamental rewrite of the whole implementation, and a rollout to all existing users that would somehow need to preserve backwards compatibility, but would probably fail doing so (because of the aforementioned rewrite).\nOr am I missing a simpler solution?. Interesting approach! I can definitely see value in fixing which foo depending on Python version, but I think the extra complexity necessary to pull this off might not be worth porting to rbenv at this time. If rbenv ended up depending on a chpwd shell handler, I would rather recommend using chruby instead.. ",
    "techalchemy": "Just to add -- I've installed an anaconda distribution which is not activated, and I can therefore no longer run tar -xjvf, pandoc and countless other commands which come with anaconda and are therefore symlinked into pyenv's shim directory.  I am a maintainer of pipenv which provides installation functionality for pyenv directly, but seeing that it breaks my basic workflows I'm not really sure how to move forward. I can't even delete the shims as they are recreated every time I re-source my config file.  This is a pretty significant interruption for something that has been dismissed as an intentional design decision but which actually just fundamentally breaks basic system commands like bzip2 without offering any passthrough or entertaining options for a solution.\nFor now I am just removing the shims entirely until I can determine what to do with this moving forward. ",
    "leoalekseyev": "I switched from using conda to manage Python versions to pyenv. However, for some scientific computing projects it's easiest to use Anaconda; I installed Anaconda under pyenv and ran into this issue. \nCouple of things to note: (1) miniconda, which brings in fewer random binaries than a full Anaconda distro, is also very susceptible to this. (2) Things that break are pretty vital, like git (see https://github.com/pyenv/pyenv/issues/688)\nThis is extremely frustrating, and my recommendation for anyone that requires conda would be to remoe pyenv and go back to conda until this issue is resolved.  And there should be a warning in FAQ or somewhere documenting this unfortunate interaction with Anaconda, since this can and will trip up inexperienced users.. ",
    "1oglop1": "I wish this was finally fixed and shims were separated by versions folders or else.\nI have another issue caused by this problem:\nIt is really annoying especially when I'm working in pycharm.\nIf PyCharm is started from one terminal with charm . and then I change directory to different terminal where the python version is different but same command is installed and I run charm . the shims are preventing me from executing the command from the second virtual environment due to fact that it's already available..\neg:\nvenv1_python36: cmd --version -> v1.0 (charm . -> pycharm terminal same effect)\nvenv2_python3.7 cmd --version -> v2.0 (charm . (will launch second instance) -> pycharm terminal v1.0). @blueyed I tried that version but it was bit too much work to get it working, cuz I wasn't aware how much is abstracted via brew. But after I got it working it seemed to behave just fine. @matthewatabet could you try #1185 and provide some feedback as well?\n. @blueyed What is the easiest way to keep your fork up to date with main repo + some easier installation on Mac?. Hi guys any progress on this one?. @blueyed Thanks I will try later, I was happy having it installed via brew, but I will.\nbtw what's chpwd? I've never heard of it and I'm not using zsh since it's not \"standard\" shell installed on servers. \nBut if I understand it correctly it does the same thing as direnv. @blueyed I finally got some time, to play around your branch.\nIt took me some time since git installation does not mention that you need to separately install python-build plugin to get pyenv install working. \nNow I can do pyenv shell <version> but my default path is still pointing to \n~/.pyenv/shims instead of ~/.pyenv/shims/<version> + .python-version doesn't do anything. Is this connected to chpwd you mentioned or something else?\nanyway spearating shims based on python version sounds like a very good idea.\nI also noticed that number of PRs and Issues is increasing are there enough reviewers @joshfriend because there are opened PRs since 2014 . EDIT:\nI finally spent some quality time exploring the code and now I finally understand why\n\n~/.pyenv/shims/<version> + .python-version doesn't do anything.\n\nIt was because everything executed was first looking for executable in ~/.pyenv/shims and when that was found it ran all version checks etc.\nNow I understand jargon word chpwd hook - which is simply a function which runs when directory is changes.\nWhich means that this branch misses 1 thing.\npyenv/libexec/pyenv-init L89 + L93 - should go away (not sure about the rest, but maybe all can go)\nAnd pyenv/libexec/pyenv-global should perform similar/same operation as updated_path_for_shims does\nEDIT\nI noticed that \"$PYENV_ROOT/shims\" plays important role in updated_path_for_shims. I'm not so familiar how entire pyenv operates the with the PATH\nI would say that desired behaviour should look as follows:\n1) pyenv installed, PATH is empty - and set to system python\n2) pyenv global <version> adds $PYENV_ROOT/shims/<version> to the PATH\n3) pyenv shell <version> adds all it needs to the beginning of PATH\n4) pyenv shell --unset restores previous path. ",
    "matthewatabet": "It would be great if pyenv only added the shims location when a venv is activated. I ran into this shadowing problem and it's very difficult to resolve from a sysadmin perspective. Thanks!. ",
    "joshsleeper": "Yea, it was a pretty shocking response.\nIf @yyuu doesn't want to maintain those repos, that's totally ok (keeping up with a needy community is tiring after all!) but shutting the community out completely seems pretty extreme.. @yyuu \nsorry for the delayed response, and thanks so much for getting back to me!\ntitle clarification\nfirst off, for clarification, the title was referring to the pyenv-installer repo in the pyenv org. i have no doubts that pyenv itself is alive and well! \ud83d\udc4d\ndeprecating pyenv-installer and pyenv-update\ngiven that the pyenv README.md explicitly calls out using pyenv-installer i just assumed that that was a stable and convenient way to use/maintain my pyenv install.\ni would strongly suggest either formally deprecating those repos (declared at the tops of their README.mds, ideally), or ensuring that someone else is actually committed to maintaining them.\nissue templates\ni totally support the issue templates, they really do help cut down on issue cruft, and give maintainers a great excuse to not waste their time on issues where people can't do their due diligence. good call!\nmoving away from github issues\nlast but certainly not least, moving away from github issues.\nso, i know you say they're not working out, but i totally disagree that just because people file issues without 100%, absolute, undeniable proof that it's a pyenv bug means that github issues are worthless.\nyes, people will always file totally unrelated issues, but they'll ask those same unrelated questions on stackoverflow, twitter, or gitter anyway, and ignoring them in either place is going to have a similar effect: people who are frustrated because they can't use your product (which is great, btw) and have a desire or need to do so.\nhaving the ability to go to a product repo like this and say:\n\nhey, i really want to use your thing, but this isn't working for me.\ncan someone help point me straight?\n\nis extremely valuable, and i really worry that you'd be hurting pyenv more than helping it by doing so.\nsuggested path forward\n\nmerge those issue templates and make sure people are using them on all new issues.\nclosing old issues just because they don't follow the brand new templates is a guaranteed way to get a lot of people angry and even less willing to use pyenv, so i'd avoid doing that.\n\n\ndeclare (in their appropriate README.md files) that pyenv-installer and pyenv-update are deprecated until the point at which someone else wants to commit to taking on the work. no shame in saying that you can't or won't keep up with something, and if they're really that useful then people will inevitably come to support them.\ntake a few nights or a weekend or something and just sift through as many existing issues as you can. focus on either helping people get up and running (and improving related docs/code where you can!) or giving suggestions on how to verify whether or not it's actually a pyenv issue.. \n",
    "timsavage": "Please stop referencing me, I'm not part of the pyenv team.. I'm aware of the Windows and OSX distributions, however, I don't use either of those platforms and am not able to test them. \nX86 is included, only Python 3.6 includes an x86 package.. ",
    "binarykitchen": "ok thanks, already had it ensured fine:\n$ python -m ensurepip\nIgnoring indexes: https://pypi.python.org/simple\nRequirement already satisfied (use --upgrade to upgrade): setuptools in /Users/michael-heuberger/Library/Python/2.7/lib/python/site-packages\nRequirement already satisfied (use --upgrade to upgrade): pip in /Library/Python/2.7/site-packages\nand it's in my .zshenv\n```\n$ cat .zshenv\n\nDefines environment variables.\n\nAuthors:\nSorin Ionescu sorin.ionescu@gmail.com\n\nEnsure that a non-login, non-interactive shell has a defined environment.\nif [[ \"$SHLVL\" -eq 1 && ! -o LOGIN && -s \"${ZDOTDIR:-$HOME}/.zprofile\" ]]; then\n  source \"${ZDOTDIR:-$HOME}/.zprofile\"\nfi\nexport PATH=\"$PATH:node_modules/.bin\"\nneeded for non interactive sessions\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\" # This loads nvm\nif command -v pyenv 1>/dev/null 2>&1; then\n  eval \"$(pyenv init -)\"\nfi\n```\nrestarted zsh again, yet it can't find pip\n```\n$ pip\npyenv: pip: command not found\nThe `pip' command exists in these Python versions:\n  2.7.10\n```. oh man, i got it. had to switch from system version to 2.7.10, then all is good.\ni think the DX should be improved here. say something like \"pip not found in system version. maybe you should switch to 2.7.10?\" or so. ",
    "ezwelty": "I ended up having to hard code these settings directly in python-build. I suspect the only fix would be to pass options with a custom delimeter.\nCurrent code:\nbash\nPYTHON_CONFIGURE_OPTS=\"--with-tcltk-includes=-I/usr/local/opt/tcl-tk/include --with-tcltk-libs='-L/usr/local/opt/tcl-tk/lib -ltcl8.6 -ltk8.6'\"\npackage_var_name=PYTHON\nPACKAGE_CONFIGURE_OPTS=\"${package_var_name}_CONFIGURE_OPTS\"\nfor arg in ${!PACKAGE_CONFIGURE_OPTS}; do\n  echo -e $arg\ndone\n\n--with-tcltk-includes=-I/usr/local/opt/tcl-tk/include\n--with-tcltk-libs='-L/usr/local/opt/tcl-tk/lib\n-ltcl8.6\n-ltk8.6'\n\nSuggested code:\nbash\nPYTHON_CONFIGURE_OPTS=\"--with-tcltk-includes=-I/usr/local/opt/tcl-tk/include|--with-tcltk-libs='-L/usr/local/opt/tcl-tk/lib -ltcl8.6 -ltk8.6'\"\npackage_var_name=PYTHON\nPACKAGE_CONFIGURE_OPTS=\"${package_var_name}_CONFIGURE_OPTS\"\nIFS='|'; PACKAGE_CONFIGURE_OPTS=(${!PACKAGE_CONFIGURE_OPTS}); unset IFS;\nfor arg in \"${PACKAGE_CONFIGURE_OPTS[@]}\"; do\n  echo -e $arg\ndone\n\n--with-tcltk-includes=-I/usr/local/opt/tcl-tk/include\n--with-tcltk-libs='-L/usr/local/opt/tcl-tk/lib -ltcl8.6 -ltk8.6'\n. @yyuu Interestingly, your suggestion of declaring the array in the build definition works for configure but then breaks in make:\n\nLast 10 log lines:\n                        Modules/python.o \\\n                        libpython2.7.a -ldl  -framework CoreFoundation\n./python.exe -E -S -m sysconfig --generate-posix-vars ;\\\n        if test $? -ne 0 ; then \\\n                echo \"generate-posix-vars failed\" ; \\\n                rm -f ./pybuilddir.txt ; \\\n                exit 1 ; \\\n        fi\n/bin/sh: -ltcl8.6: command not found\nmake: *** [sharedmods] Error 127\nIs PACKAGE_CONFIGURE_OPTS_ARRAY being chopped up elsewhere on whitespace for input to make?\nFor anyone passing through needing a dirty fix, I got the build to work by editing python-build, line 752, from:\nbash\n$CONFIGURE_OPTS ${!PACKAGE_CONFIGURE_OPTS} \"${!PACKAGE_CONFIGURE_OPTS_ARRAY}\" || return 1\nto:\nbash\n$CONFIGURE_OPTS --with-tcltk-includes='-I/usr/local/opt/tcl-tk/include' --with-tcltk-libs='-L/usr/local/opt/tcl-tk/lib -ltcl8.6 -ltk8.6' ${!PACKAGE_CONFIGURE_OPTS} \"${!PACKAGE_CONFIGURE_OPTS_ARRAY}\" || return 1. ",
    "bdusell": "I'm facing exactly the same issue, but the suggested workaround using a custom build definition worked just fine for me. Even so, I think it would be nice to have a simpler way to include spaces in ./configure arguments in general.\nThe biggest inconvenience is that there is no way to export a bash array. How about simply introducing a new variable whose content is evaluated as an array? For example:\nbash\nPYTHON_CONFIGURE_OPTS_EVAL=\"--with-tcltk-includes='-I/usr/local/opt/tcl-tk/include' --with-tcltk-libs='-L/usr/local/opt/tcl-tk/lib -ltcl8.6 -ltk8.6'\"\nbash\neval -- \"local eval_opts=($PACKAGE_CONFIGURE_OPTS_EVAL)\"\n$CONFIGURE_OPTS ${!PACKAGE_CONFIGURE_OPTS} \"${eval_opts[@]}\" \"${!PACKAGE_CONFIGURE_OPTS_ARRAY}\" || return 1\n. ",
    "fritzr": "+1 on this issue.\nI agree with @bdusell. Anything short of an eval array assignment will pass the environment variable as a single string, or worse yet white-space separated (ignoring quotes). \nedit Actually I'd suggest to use @bdusell's array-eval expansion method on PACKAGE_CONFIGURE_OPTS_ARRAY from the environment, since bash arrays can't be exported anyway. So the user could get what they'd expect from:\nenv PYTHON_CONFIGURE_OPTS_ARRAY=\"--with-tcltk-libs='-L/usr/local/opt/tcl-tk/lib -ltcl8.6 -ltk8.6'\" pyenv install 2.7.15\nThis could be done for all packages by modifying PACKAGE_CONFIGURE_OPTS_ARRAY as @bdusell suggests, or even only for Python by placing a similar snippet at the top of each build rule which expands eval PYTHON_CONFIGURE_OPTS_ARRAY=($PYTHON_CONFIGURE_OPTS_ARRAY) from the environment.. ",
    "herrbischoff": "Thanks for the hint. But wow, this is kind of shortsighted. I can understand not using the user configuration. But since this can be problematic, using aria2c should really be optional, in a way that it requires to be explicitly enabled. Possibly through an env variable like PYTHON_BUILD_ARIA2_ENABLE. Both curl and wget are well-behaved and not affected by any of this.. Sounds like a reasonable idea, although I\u2019m not a fan of software that tries to be too clever for its own good.\nIf you support more than the basic two, there\u2019s a case to be made to support every platform-specific download tool available. For FreeBSD, this would be fetch, which is part of the base system, unlike curl and wget, which need to be separately installed.. ",
    "di": "The 2.6 version is not actually compatible with 2.6 and won't be until a 9.0.3 release of pip is made, see https://github.com/pypa/pip/issues/5093. ",
    "hokkun-dayo": "@di \nThank you for the submitting the issue.\njust an hour ago pip 9.0.3 was released.\n. @yyuu \n\nI think that pinning pip version within the build definition of 2.6/3.2 must be the right way to deal with the situation. \n\nCan I work for it? I think in the near future pip 10 could be released so I think it's better to pin pip version to 9.0.3 so far so now.\n\nBTW, the following part won't work if version is bigger than 8.0.0:\nhttps://github.com/pyenv/pyenv/blob/master/plugins/python-build/bin/python-build#L2120-L2123\nbecause get-pip.py has been moved to its own repos.\n. ",
    "gonzalocesar": "You're missing build dependencies, you should install those. This is not a bug. \nInstructions are in the wiki under Ubuntu/Debian/Mint https://github.com/pyenv/pyenv/wiki#suggested-build-environment . ",
    "sunbearc22": "Thank you @outof-step .\nAfter running:\n$ sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev xz-utils tk-dev\nand uninstalling and reinstalling python 3.6.5, the warnings have been eliminated.\n$ pyenv uninstall 3.6.5\npyenv: remove ~/.pyenv/versions/3.6.5? y\n$ pyenv install 3.6.5\nDownloading Python-3.6.5.tar.xz...\n-> https://www.python.org/ftp/python/3.6.5/Python-3.6.5.tar.xz\nInstalling Python-3.6.5...\nInstalled Python-3.6.5 to ~/.pyenv/versions/3.6.5\n . ",
    "andersonvom": "~If rehash can't be run multiple times simultaneously, should this be fixed in the command itself? Maybe create a lock file when it's running to prevent the situation your described.~\nEDIT: rehash already makes sure that there's only one instance of the command running at a time, so we're safe: https://github.com/pyenv/pyenv/blob/63c4b7f4/libexec/pyenv-rehash#L13-L35. If I understand the issue correctly there's no race condition. If there's already a rehash running, the subsequent runs will just issue an error message and quit, without causing any issues to pyenv. Running it in the foreground/background should have no effect on multiple instances of rehash (e.g. even if it runs in the foreground, users could spawn multiple shell sessions and still have rehash run at the same time.). ",
    "bdellegrazie": "@andersonvom I believe there's still a race condition, see #1092 . ",
    "CodeMasterYi": "ok, i find the solution!. ",
    "pfmoore": "Note that importing modules from pip is not supported - see https://pip.pypa.io/en/latest/user_guide/#using-pip-from-your-program\nIn particular importing pip._internal.main is not supported (hence the use of _internal in the name) - the correct solution as noted in the docs is to call pip as a subprocess.. I know little or nothing about pyenv, as I'm a Windows user not a Linux user, but from what I can see, pyenv creates \"shims\" for the various executables, including pip. The issue here looks very like running a pip 9 executable wrapper against a pip 10 installation (which won't work, and indeed will fail exactly as @KleinerNull is seeing). I can only surmise, but if you run pip install --upgrade pip in a pyenv environment, that will update pip, but won't fix the shim, and that will behave as you are seeing. The solution would then be, as suggested by @vltr, to run pyenv rehash.\nApologies for implying that this was an issue with pyenv itself - it now appears that it may be simply that the user missed a pyenv-specific step needed when upgrading a copy of pip that's in a pyenv environment.. ",
    "KleinerNull": "@pfmoore \nOk, so what caused this in the first places, I just upgraded pip inside the env with pip install pip --user --upgrade and it looks like that the script didn't changed. This was just a try to fix the ImportError.\nAre these files created by pyenv or by pip?\nBesides not being supported it works, but I will change it to the subprocess way.. @yyuu \n\nTotally this is some issue in pip itself, not pyenv.\n\nFunny, I've created first an issue over at the pip repo and the first respone was that this is a pyenv issue so I create here the same too.. ",
    "pradyunsg": "Hi @yyuu!\n\nTotally this is some issue in pip itself, not pyenv.\n\nWhat makes you say so? Because the shim script failed? That failed because, as @pfmoore notes, the script is using the internals of pip, which can be (and, in this case, have) changed.\nHow exactly is this shim script being generated? I guessed that pyenv was generating the shim and hence redirected @KleinerNull here.\n. This is because upgrading pip breaks debian's executable pip installed via python-pip.\nThere's a list of workarounds in https://github.com/pypa/pip/issues/5221#issuecomment-382069604. This issue can be closed.. I'd like to point out that pypa/pip#5599 talks about this issue in some detail. If you're getting an ImportError while using pip, I request you to take a look at that issue and those linked from it.. @labrys This has been discussed in multiple issues over at pypa/pip; starting with https://github.com/pypa/pip/issues/5080.. Hey! Sorry if this is the wrong place but I see that this isn't available when I use a Homebrew installed pyenv but 3.7.0 is (they were released the same day). I'm guessing it might be because the last tag is before this PR.\nIs there anything I can do to make it possible for me to install 3.6.6 on a Homebrew installed pyenv?. @joshfriend Thoughts on detecting this case early, in pyenv install's code and then calling it out before calling into python-build or maybe handling this case at the python-build level?\nIt could also suggest remedies or maybe try to use the brew zlib if possible; like readline?. ",
    "vltr": "I had no issue with pip here, even using pyenv. I always run pyenv rehash after most of the operations ran with pyenv, so I didn't even noticed this problem.. ",
    "ysolis": "I don't have problems with install (I have pyenv and virtualenvs for 2.7, 3.6 and pypy 2.7 projects) but my recommendation is that pyenv install by default latest pip 9.x version, not pip 10, because many products will faill by the API changes. For example I have deployed some programs in AWS-Lambda with Zappa and we have now a compatibility problem by the different API, check this, this and this. ",
    "iamjohnnym": "Hey guys, I was brought here by a reference from an issue over at zappa.  I'm genuinely curious but is this issue not related to the fact that pip has changed their library and got rid of pip.main() for pip._internal?  The use of from pip import main and some other well used methods were considered unsupported and have been changed in pip>=10.0.0 and from some reports have even been broken in pip==9.0.2.\nTake a peek at the following issue.  It's a mess fucking mess.  The maintainers of pip suggest using subprocess instead of pip.main().\nhttps://github.com/pypa/pip/issues/5081. ",
    "stevehemingway": "python -m pip install --force-reinstall pip\nthis didn't work for me.. ",
    "michaelpitts": "Hi all, having the same issue.  I have tried completely reinstalling pip through apt and through @tukushan 's suggestion: \n\npython -m pip install --force-reinstall pip\n\nHas anyone found a way to resolve this issue?. ",
    "wesleyegberto": "I have reinstalled pip and pip-whl, then ran @tukushan suggestion and it worked.\nUbuntu 16.04.3. ",
    "apelsina": "@tukushan's workaround didn't work for me, so after series of unsucsessfull reinstalls I've tried this workaround in my Ubuntu 16.04.4 LTS:\n~$ pip\nbash: /usr/bin/pip: No such file or directory\n~$ which pip\n/usr/local/bin/pip\n~$ /usr/local/bin/pip\nApparently, after upgrade, pip installed itself into different directory, so I've just symlinked it to previous path. So far so good.\n```\n~$ sudo ln -s /usr/local/bin/pip /usr/bin/pip\n~$ pip --version\npip 10.0.1 from /usr/local/lib/python2.7/dist-packages/pip (python 2.7)\n~$ pip\nUsage: \n  pip  [options]\nCommands:\n  install                     Install packages.\n  download                    Download packages.\n...\n```\nThis is not official fix.. ",
    "jonathantzh": "@apelsina's solution works for me in my Ubuntu 16.04.4 LTS. ",
    "tejasri19": "Downgrade pip 10 version to pip 9.0.3 by \nsudo python -m pip install pip==9.0.3 --upgrade\n This worked for me in my Ubuntu 16.04.4 LTS and Python 2.7 version.\n. ",
    "Zulfidin": "I getting the same error:\npip uninstall scikit-image\nTraceback (most recent call last):\n  File \"/usr/bin/pip\", line 9, in \n    from pip import main\nImportError: cannot import name main\npython 2.7.12\npip 18.0\nubuntu 16.04. ",
    "labrys": "Since so many have come to rely on pip.main (understanding that it was never intended to be used) and since the docs state that the following is supported:\npython\nsubprocess.check_call([sys.executable, '-m', 'pip', 'install', 'my_package'])\nwouldn't it make sense to add in official support for pip.main with something like the following:\npython\ndef main(*args):\n    subprocess.check_call([sys.executable, '-m', 'pip', *args])\nThis would allow people to continue to use the same pip.main functionality in a supported way while still allowing the pip devs to hide away the non-public interface as an implementation detail.\n. @pradyunsg Thanks for the reference, I did not see it before. ",
    "ShuklaSharma": "@tekumara python -m pip install --force-reinstall pip \nit worked for me . ",
    "tritium21": "Are you sure step 4 is supposed to return 3.6.3?. ",
    "cdunklau": "Fixed, thanks. Well, if it's behavior from rbenv, and you want to keep parity, I'm for sure -0 on removing it. It's odd and surprising IMO, but doesn't break stuff.\nI'd suggest at minimum documenting the behavior, probably in that \"Choosing the Python Version\"  section referenced in my original report.\nI think the optimal solution would be to:\n\nleave it as the default behavior so as to not surprise people who already depend on it, and\nadd a configuration option that allows the user to disable it.. \n",
    "dkav": "\nThe issues page for the plug-in is now available. Please feel free to raise this over there.\n\nPer your suggestion, this issue has now been raised in https://github.com/pyenv/pyenv-pip-migrate/issues/6.. ",
    "mhchia": "Thank you for fixing it. I met the same issue as well.\nOne stupid question is, I don't get why\n\nremoving the shebang lines essentially change the bash sub-calls from $(SCRIPT) to $(source SCRIPT)\n\nI tried remove a shebang from a script test.sh\necho $$\ndo\n$ chmod +x test.sh\n$ ./test.sh\n88327\n$ ./test.sh\n88328\nand get different pid every time I execute it, i.e. it seems still invoking a bash process to execute it.\nAm I understanding anything wrong?\n. ",
    "AndreasBackx": "I'm not using Carbon Black and am experiencing this slowdown on my late 2013 Retina Macbook Pro but am not experiencing it on my desktop machine running Linux and an AMD Ryzen 1700. That might either be because of the more powerful CPU or something else is different. Regardless, I don't think Carbon Black has got something to do with this and a slowdown of almost an entire second for every single command is really unworkable.\nIs it possible that this could get merged? If not, what is holding the merge back?. I have recorded a video of the slowdown with a comparison between:\n\npyenv and pyenv-virtualenv enabled without this patch\npyenv and pyenv-virtualenv enabled with this patch\npyenv and pyenv-virtualenv disabled\n\nI'm currently on the train with mobile data. I'll upload it to YouTube and post it here when I can.\nI used a video instead of timing functions as I could not measure with any combination of commands that I tried. If someone can find a way to measure it, please leave a comment. I've tried timing the following commands:\n\nzsh -i -c exit\necho test (this basically just runs instantly, it doesn't seem to be affected at all. Though maybe it's because Python was using sh instead of zsh. I'll have to confirm this another time though as I'm on the train atm)\n\nThe video shows the difference very clearly between enabling pyenv and disabling it. Though I don't see a clear difference with this pull request unfortunately.. > So it is off topic for this PR - please create a new issue / search a more fitting one.\nI would disagree. There are no performance numbers for this PR to compare it with master. You cannot seem to reproduce it from what I can tell, so it might be best to first objectively measure whether this is an improvement for those affected rather than writing it off immediately or creating multiple issues for performance issues.. ",
    "lazka": "Thanks!. I left it out because it said it's in alpha state, so I wasn't sure. Thanks for adding it!. ",
    "YJiWei": "Can you help me, please? I met this problem, too. Using pyenv installed Python, when using pyinstaller, it was reported that the error was as follows:\nOSError: Python library not found: libpython3.6.so.1.0, libpython3.6m.so.1.0, libpython3.6mu.so.1.0. ",
    "thekalinga": "Or when downloader has any issues. I had aria2c in the path & the binary does not have all the libraries in the system. pyenv uses this aria2c binary under the hood & silently fails by giving the user no info on what happened. ",
    "Igonato": "Seeing this as well on Ubuntu 16.04. Not an issue in v1.2.3. ",
    "alem0lars": "I'm having the same error with v1.2.5.. Any solutions or workarounds?. ",
    "andrewyatz": "I think it was caused by this change https://github.com/pyenv/pyenv/commit/7973e5947395b3def52ca623e7571ec57e2393f9. pyenv-rehash now checks $SHIM_PATH if it is writable and aborts if it is not. . ",
    "CyberShadow": "Thanks, good to know there is work to improve the situation.\nI ran into this while debugging things three levels deep, so I don't have a use case any more, but it's nice if others could avoid falling into this pit in the future.. ",
    "james-turner": "So try pyenv local 2.7.8 followed by python2 and see what you get. Chances are pyenv version is showing something other than 2.7 (for me it was 3.6.2). ",
    "tgunr": "I tried peen 2.7.8 and 2.7.14 and 2.7.5, all result in same error message. Where is python2?. ",
    "3vanlock": "I ran into this while trying to install a node module after I had set pyenv global 3.6.5. The npm install called python2 which brought me here.\n@tgunr What you are doing will determine which pyenv command to use. You likely want to use pyenv shell 2.7.14. This will set your shell temporarily to Python 2 until you close it.. ",
    "carrchr": "I had this same error when trying to install an npm package globally (Node.js managed with nodenv). Following the recommendation of elock37 allowed me to get the nom package installed\npyenv shell 2.7.14 - substitute which actual version of Python that you're using . ",
    "amosbird": "can we have both python2 and 3 activate at the same time?. ",
    "denningsrogue": "Try this:\npvenv shell 3.7.2 2.7.15\nAfter that python2 --version  will give you 2.7.15 and python --version and python3 --version will each give you 3.7.2. pyenv global 3.6.4 2.7.15. ",
    "taichi-jp": "It works when I set $ pyenv shell 3.6.4 2.7.14, but it is valid only until I close the terminal.\nWhen I execute gcloud command, it says pyenv: python2: command not found even though just $ python2 works .\nHow to make settings of pyenv shell permanently?. pyenv global 3.6.4 2.7.15 is set too :(\nThis maybe because of gcloud command. npm works fine even though it requires python2 too. ",
    "sseaky": "it is solved.\ni used brew to install a tool \"iproute2mac\" before. it installed dependeny with \"python@2\", which is python 2.7.15. \n\u279c  ~ brew install iproute2mac\n==> Installing dependencies for iproute2mac: python@2\n==> Installing iproute2mac dependency: python@2. ",
    "diefans": "So it is basically impossible to have a .python-version in $HOME and use neomake python linter together, which at least for my usecase sounds more like a bug than unintuitive behavior. To have an option to disable this \"feature\" would be great.. ",
    "chan15": "but how come 2.x all works. ",
    "sillyfrog": "Further to this, I have found that this combination works (repeatably, on both Mac's):\nFirst I run:\nPYTHON_CONFIGURE_OPTS=\"--enable-framework\" pyenv install 2.7.15\nThen, once that's complete, I run:\nPYTHON_CONFIGURE_OPTS=\"--enable-shared\"     LDSHARED=\"clang -bundle\"     LDCXXSHARED=\"clang++ -bundle\"     BLDSHARED=\"clang -bundle -lpython2.7\"  PYENV_DEBUG=1   pyenv install 2.7.15\nAnd when prompted to continue (to overwrite), I say yes, it will successfully build... So that's... confusing, as best I can tell each build should be in isolation.. ",
    "cryptoeraser": "I am trying to do exactly the same thing, and I have exactly the same issue! This is driving me crazy!. I am still not getting the otool -L output that is on the Python2.x-Python3.x page.\nMine looks like this:\notool -L _ctypes.so\n_ctypes.so:\n    /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1252.50.4)\nThe example on that page looks like this:\n$ otool -L $HOME/.pyenv/versions/2.7.11/lib/python2.7/lib-dynload/_ctypes.so\n/Users/foo/.pyenv/versions/2.7.11/lib/python2.7/lib-dynload/_ctypes.so:\n    /Users/foo/.pyenv/versions/2.7.11/lib/libpython2.7.dylib (compatibility version 2.7.0, current version 2.7.0)\n    /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1226.10.1)\nAny ideas about why I am not seeing the dynlib linked? Has the environment described there worked for you? Did you get both py2 and py3 working? Thanks.. ",
    "oquidave": "Yes, I tried to install python 3.6.0, 3.6.2 and 3.6.5 all of Which failed.\nOn Sat, Jun 23, 2018, 01:00 Josh Friend notifications@github.com wrote:\n\nWhen you say \"i have failed to install Python 3.6.x\", do you mean that you\nare unable to install any variant of 3.6? Does the newest release (3.6.5)\nwork?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pyenv/pyenv/issues/1174#issuecomment-399594061, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AE2FIabndx_Ap5VeUJ5KAjX2Wb_UM1Acks5t_WkHgaJpZM4U0eDd\n.\n. I think I can answer my own question now. It turns out, I was installing pyenv in an NFS mount or vagrant shared folder and that's why I was getting \u201cclock skew detected\u201d warning during compilation. When I installed pyenv on a separate guest machine folder, I didn't have errors. . \n",
    "JulienPalard": "I had an old ~/.local/lib/python3.7/, I removed it and everything's OK now.. ",
    "jfpla": "@pradyunsg, just copy the 3.6.6 file from this PR into your pyenv install dir, which in my case is:\n/usr/local/Cellar/pyenv/1.2.5/plugins/python-build/share/python-build/. ",
    "greysteil": "@yyuu - any chance we could get a release with this?\nThanks for everything you do on pyenv - I totally rely on it!. ",
    "Qwerty-Space": "I have reproduced this on a raspberry pi running debian as well.  However, this time I installed with the installer.. ",
    "LWisteria": "Thanks for merge!. ",
    "knodir": "Applies to Ubuntu 16.04. pyenv install 3.7.0 failed with \n```\n$ pyenv install 3.7.0\nDownloading Python-3.7.0.tar.xz...\n-> https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tar.xz\nInstalling Python-3.7.0...\nBUILD FAILED (Ubuntu 16.04 using python-build 1.2.5-4-gc057a80)\nInspect or clean up the working tree at /tmp/python-build.20180704120702.24198\nResults logged to /tmp/python-build.20180704120702.24198.log\nLast 10 log lines:\n  File \"/tmp/tmp4933xm_8/pip-10.0.1-py2.py3-none-any.whl/pip/_internal/init.py\", line 42, in \n  File \"/tmp/tmp4933xm_8/pip-10.0.1-py2.py3-none-any.whl/pip/_internal/cmdoptions.py\", line 16, in \n  File \"/tmp/tmp4933xm_8/pip-10.0.1-py2.py3-none-any.whl/pip/_internal/index.py\", line 25, in \n  File \"/tmp/tmp4933xm_8/pip-10.0.1-py2.py3-none-any.whl/pip/_internal/download.py\", line 39, in \n  File \"/tmp/tmp4933xm_8/pip-10.0.1-py2.py3-none-any.whl/pip/_internal/utils/glibc.py\", line 3, in \n  File \"/tmp/python-build.20180704120702.24198/Python-3.7.0/Lib/ctypes/init.py\", line 7, in \n    from _ctypes import Union, Structure, Array\nModuleNotFoundError: No module named '_ctypes'\nMakefile:1122: recipe for target 'install' failed\nmake: *** [install] Error 1\n```\nInstallation succeeded after running sudo apt-get install libffi-dev (as suggested here). I did not try with libffi itself though; could work.\n. ",
    "hjarvard": "I've got libffi6 (there are no libffi package) installed on debian 9.5 system and I've got the same error message. After installing libffi-dev package eveerything worked. The required packaged are listed in the Common build problems page though.. ",
    "aoindustries": "We confirm the same required for CentOS 7 builds:\nsudo yum install libffi-devel. ",
    "zachliu": "Confirmed @knodir on Linux Mint 19 with kernel 4.15.0-33-generic:\nsudo apt install libffi-dev. ",
    "dgspahn": "Thank you. That module _ctypes was giving me fits.\n. Skip it and install Linux Mint 19.\n. ",
    "mskoenz": "Hi all!\nSame issue, but regrettably no sudo environment to just install libffi. I manually installed libffi to my ~/.local folder and added the corresponding paths for CFLAGS, LDFLAGS, CPLUS_INCLUDE_PATH, C_INCLUDE_PATH, CPLUS_INCLUDE_PATH, LD_LIBRARY_PATH\nrunning pyenv install 3.7.0 fails, and the log shows this as first error:\n```\n/usr/bin/install -c python-config.py /users/mskoenz/.pyenv/versions/3.7.0/lib/python3.7/config-3.7m-x86_64-linux-gnu/python-config.py\n/usr/bin/install -c python-config /users/mskoenz/.pyenv/versions/3.7.0/bin/python3.7m-config\n./python -E ./setup.py install \\\n    --prefix=/users/mskoenz/.pyenv/versions/3.7.0 \\\n    --install-scripts=/users/mskoenz/.pyenv/versions/3.7.0/bin \\\n    --install-platlib=/users/mskoenz/.pyenv/versions/3.7.0/lib/python3.7/lib-dynload \\\n    --root=/\nrunning install\nrunning build\nrunning build_ext\nINFO: Could not locate ffi libs and/or headers\nThe following modules found by detect_modules() in setup.py, have been\nbuilt by the Makefile instead, as configured by the Setup files:\n_abc                  atexit                pwd\ntime\nFailed to build these modules:\n_ctypes\n```\ngrep ffi on the log yields:\nchecking for suffix of executables...\nchecking for suffix of object files... o\nchecking for --with-suffix...\nchecking for --with-system-ffi... yes\nchecking for sched_setaffinity... yes\nINFO: Could not locate ffi libs and/or headers\nINFO: Could not locate ffi libs and/or headers\nINFO: Could not locate ffi libs and/or headers\nI tried CONFIGURE_OPTS=\"--with-ffi=...\" python install 3.7.0 in the CONFIGURATION_OPTS but that was not recognized...\nIs there a way to teach pyenv where the libffi headers are?. ",
    "b1tstreamalpha": "\nHi all!\nSame issue, but regrettably no sudo environment to just install libffi. I manually installed libffi to my ~/.local folder and added the corresponding paths for CFLAGS, LDFLAGS, CPLUS_INCLUDE_PATH, C_INCLUDE_PATH, CPLUS_INCLUDE_PATH, LD_LIBRARY_PATH\n... \nIs there a way to teach pyenv where the libffi headers are?\n\nTry setting your PKG_CONFIG_PATH variable to include the path where libffi.pc was installed. It will be something like /your_ffi_install_path/lib/pkgconfig/libffi.pc. This worked for me, although I am building python3 from a source tarball. (In my case I can see that ./configure is using pkg-config to locate the libffi headers).. ",
    "DarkStar1": "I also have this problem with trying to install pip for Python 3.7.1rc1. I installed python 3.7.1rc1 from the deadsnakes repo as described here on SO (because the build instructions from the official python page does not succeed for the same reasons), so far installing libffi-dev and installing all packages listed in the common build problems wiki page as pointed to by @hjarvard in an earlier comment do not work.\nI am installing on  ubuntu 16.04.5 LTS. WOuld apprecate any pointers thanks.. ",
    "ragreddy": "@b1tstreamalpha Even after adding package config path, I am seeing the issue.\nDo you happen to have commands for configure\nand \nany variables (pkg_config_path) you exported?\nI am trying to build 3.7.1 from source tar ball.. ",
    "Azulinho": "similar problem on archlinux, for some reason I was missing the pkgconf package.\nsudo pacman -S pkgconf libffi and pyenv install 3.7.x worked. ",
    "haroldduan": "Confirmed,on Linux Mint 19 with Kernel Linux 4.15.0-46-generic x86_64;\nsudo apt install libffi-dev. ",
    "Packets-n-Python": "Same with Ubuntu 14\nCFLAGS=-I/usr/include/openssl \\\nLDFLAGS=-L/usr/local/lib \\\npyenv install 3.7.0\nDownloading Python-3.7.0.tar.xz...\n-> https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tar.xz\nInstalling Python-3.7.0...\nERROR: The Python ssl extension was not compiled. Missing the OpenSSL lib?\nPlease consult to the Wiki page to fix the problem.\nhttps://github.com/pyenv/pyenv/wiki/Common-build-problems\nBUILD FAILED (Ubuntu 14.04 using python-build 1.2.5-4-gc057a80)\nInspect or clean up the working tree at /tmp/python-build.20180706171040.46966\nResults logged to /tmp/python-build.20180706171040.46966.log\nLast 10 log lines:\n                        install|*) ensurepip=\"\" ;; \\\n                esac; \\\n                 ./python -E -m ensurepip \\\n                        $ensurepip --root=/ ; \\\n        fi\nLooking in links: /tmp/tmpds7w9_se\nCollecting setuptools\nCollecting pip\nInstalling collected packages: setuptools, pip\nSuccessfully installed pip-10.0.1 setuptools-39.0.1. ",
    "gamesbrainiac": "I have the same issue. I also tried the following:\nbrew install libffi\nSince it seems to do the trick on Ubuntu. This however does not work on macOS.. ",
    "mhart": "Seeing the same thing on Amazon Linux (ie, Fedora essentially). ",
    "ladyrick": "still doesn't work yet.\nhave to use python 3.6.6. ",
    "lgw4": "I can successfully install CPython 2.7.15, 3.6.6, and 3.7.0 using pyenv v1.2.5. on macOS 10.13.6. I (briefly) searched for differences between v1.2.5 and v1.2.6 but didn't see anything obvious that would cause this problem.. @lukebakken I also got it to work with OpenSSL 1.0.2o_2 by passing the same CONFIGURE_OPTS but for the openssl package:\nCONFIGURE_OPTS=\"--with-openssl=$(brew --prefix openssl)\" pyenv install 3.7.0\nI wish I knew why this wasn't needed under pyenv 1.2.5. \n. @lukebakken FWIW, I've also got the following environment variables set:\nCFLAGS=-I/usr/local/opt/openssl/include\nCPPFLAGS=-I/usr/local/opt/openssl/include\nLDFLAGS=-L/usr/local/opt/openssl/lib. @jhunkeler Awesome! However, had you switched to https://www.openssl.org/source/openssl-1.0.2o.tar.gz, I bet the LTS would succeed, too.. @rmerkushin I think your fish syntax is off a bit. \nenv CONFIGURE_OPTS \"--with-openssl=\"(brew --prefix openssl)\"\" pyenv install 3.7.0\nI don\u2019t use fish so I can\u2019t test this. . ",
    "lukebakken": "I ran into this issue with openssl 1.0.2o_2 installed. The following allowed me to build and install Python 3.7.0 via pyenv:\nbrew install 'openssl@1.1'\nCONFIGURE_OPTS=\"--with-openssl=$(brew --prefix openssl@1.1)\" pyenv install 3.7.0. @lgw4 I'll give that a try just for grins. It's interesting that 1.0.2 worked. Prior to installing OpenSSL 1.1 the test for OpenSSL failed with a missing symbol in the dynamic library (SSL_new, I think), which I would have expected to be #ifdef'd for compatibility with older OpenSSL versions :man_shrugging: . I uninstalled openssl@1.1 and confirmed only the one OpenSSL version is installed:\n$ ll /usr/local/opt/openssl*\nlrwxr-xr-x  1 lbakken  admin  26 Jul 31 08:31 /usr/local/opt/openssl -> ../Cellar/openssl/1.0.2o_2\nlrwxr-xr-x  1 lbakken  admin  26 Jul 31 08:31 /usr/local/opt/openssl@1.0 -> ../Cellar/openssl/1.0.2o_2\nNone of the environment variables mentioned here are exported, and I ran the installation as follows:\nCONFIGURE_OPTS=\"--with-openssl=$(brew --prefix openssl)\" pyenv install 3.7.0\nInstallation succeeds, and you can see the correct compiler and linker arguments in config.log during the feature testing phase:\nconfigure:16986: checking whether compiling and linking against OpenSSL works\nTrying link with OPENSSL_LDFLAGS=-L/usr/local/opt/openssl/lib; OPENSSL_LIBS=-lssl -lcrypto; OPENSSL_INCLUDES=-I/usr/local/opt/openssl/include\nconfigure:17008: clang -o conftest  -I/usr/local/opt/openssl/include -I/usr/local/opt/readline/include -I/usr/local/opt/readline/include -I/usr/local/opt/openssl/include -I/Users/lbakken/.pyenv/versions/3.7.0/include  -L/usr/local/opt/readline/lib -L/usr/local/opt/readline/lib -L/usr/local/opt/openssl/lib -L/Users/lbakken/.pyenv/versions/3.7.0/lib  -L/usr/local/opt/openssl/lib conftest.c -lssl -lcrypto -ldl  -framework CoreFoundation >&5\nconfigure:17008: $? = 0\nconfigure:17010: result: yes\nSo it looks like, for Python 3.7.0 on OS X at least, the --with-openssl argument to configure must be used. Note that I did try the fix proposed in #1191 but it didn't work, probably because I don't believe the pyenv-local OpenSSL was built (?).. ",
    "jhunkeler": "1191 is only partially correct (for now). The system I wrote that patch for was running OSX 10.11 so I didn't see the next edge case coming...\nOn OSX 10.13 it proceeds to compile OpenSSL 1.0* as you'd except, however it fails to produce a library containing the SSL_new symbol. Python cannot link against it, so everything falls apart at that point.\nAfter a little tinkering I managed to build OpenSSL, albeit the stable release, and it appears to work fine when compiled against Python 3.7.0.\n(PS - 3.6.6 fails on 10.13 in the same way. If I switch its build script to use the stable release of OpenSSL it does seem to fix the problem there too. Hmm.)\n```diff --git a/plugins/python-build/bin/python-build b/plugins/python-build/bin/python-build\nindex 1ff0ac29..2d5552d1 100755\n--- a/plugins/python-build/bin/python-build\n+++ b/plugins/python-build/bin/python-build\n@@ -1504,6 +1504,9 @@ use_homebrew_openssl() {\n }\nbuild_package_mac_openssl() {\n+  OPENSSL_VERSION_LTS='1.0.'\n+  OPENSSL_VERSION_STABLE='1.1.'\n+\n   # Install to a subdirectory since we don't want shims for bin/openssl.\n   OPENSSL_PREFIX_PATH=\"${PREFIX_PATH}/openssl\"\n@@ -1520,12 +1523,25 @@ build_package_mac_openssl() {\n   # Hint OpenSSL that we prefer a 64-bit build.\n   export KERNEL_BITS=\"64\"\n   OPENSSL_CONFIGURE=\"${OPENSSL_CONFIGURE:-./config}\"\n+  OPENSSL_OPTIONS=\"zlib-dynamic shared\"\nlocal nokerberos\n-  [[ \"$1\" != openssl-1.0.* ]] || nokerberos=1\n+  [[ \"$1\" != openssl-${OPENSSL_VERSION_LTS} ]] || nokerberos=1\n+\n+  local openssl_stable\n+  [[ \"$1\" == openssl-${OPENSSL_VERSION_STABLE} ]] && openssl_stable=1\n+\n+  # Set additional flags based on LTS versus Stable\n+  if [[ ! $openssl_stable ]]; then\n+    OPENSSL_OPTIONS=\"${OPENSSL_OPTIONS} no-ssl2 no-ssl3\"\n+    [[ $nokerberos ]] && OPENSSL_OPTIONS=\"${OPENSSL_OPTIONS} no-krb5\"\n+  else\n+    # Deprecated: SSL2, KRB5\n+    OPENSSL_OPTIONS=\"${OPENSSL_OPTIONS} no-ssl3\"\n+  fi\n# Compile a shared lib with zlib dynamically linked, no kerberos.\n-  package_option openssl configure --openssldir=\"$OPENSSLDIR\" zlib-dynamic no-ssl2 no-ssl3 no-krb5 shared\n+  package_option openssl configure --openssldir=\"$OPENSSLDIR\" ${OPENSSL_OPTIONS}\n# Default MAKE_OPTS are -j 2 which can confuse the build. Thankfully, make\n   # gives precedence to the last -j option, so we can override that.\ndiff --git a/plugins/python-build/share/python-build/3.7.0 b/plugins/python-build/share/python-build/3.7.0\nindex f65d2a73..11a8ce7f 100644\n--- a/plugins/python-build/share/python-build/3.7.0\n+++ b/plugins/python-build/share/python-build/3.7.0\n@@ -1,5 +1,5 @@\n #require_gcc\n-install_package \"openssl-1.0.2k\" \"https://www.openssl.org/source/openssl-1.0.2k.tar.gz#6b3977c61f2aedf0f96367dcfb5c6e578cf37e7b8d913b4ecb6643c3cb88d8c0\" mac_openssl --if has_broken_mac_openssl\n+install_package \"openssl-1.1.0h\" \"https://www.openssl.org/source/openssl-1.1.0h.tar.gz#5835626cde9e99656585fc7aaa2302a73a7e1340bf8c14fd635a62c66802a517\" mac_openssl --if has_broken_mac_openssl\n install_package \"readline-6.3\" \"https://ftpmirror.gnu.org/readline/readline-6.3.tar.gz#56ba6071b9462f980c5a72ab0023893b65ba6debb4eeb475d7a563dc65cafd43\" standard --if has_broken_mac_readline\n if has_tar_xz_support; then\n   install_package \"Python-3.7.0\" \"https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tar.xz#0382996d1ee6aafe59763426cf0139ffebe36984474d0ec4126dd1c40a8b3549\" ldflags_dirs standard verify_py37 ensurepip. D'oh! Thank you! Yes, the latest LTS works fine \ud83d\udc4ddiff\ndiff --git a/plugins/python-build/share/python-build/3.7.0 b/plugins/python-build/share/python-build/3.7.0\nindex f65d2a73..173f3249 100644\n--- a/plugins/python-build/share/python-build/3.7.0\n+++ b/plugins/python-build/share/python-build/3.7.0\n@@ -1,5 +1,5 @@\n #require_gcc\n-install_package \"openssl-1.0.2k\" \"https://www.openssl.org/source/openssl-1.0.2k.tar.gz#6b3977c61f2aedf0f96367dcfb5c6e578cf37e7b8d913b4ecb6643c3cb88d8c0\" mac_openssl --if has_broken_mac_openssl\n+install_package \"openssl-1.0.2o\" \"https://www.openssl.org/source/openssl-1.0.2o.tar.gz#ec3f5c9714ba0fd45cb4e087301eb1336c317e0d20b575a125050470e8089e4d\" mac_openssl --if has_broken_mac_openssl\n install_package \"readline-6.3\" \"https://ftpmirror.gnu.org/readline/readline-6.3.tar.gz#56ba6071b9462f980c5a72ab0023893b65ba6debb4eeb475d7a563dc65cafd43\" standard --if has_broken_mac_readline\n if has_tar_xz_support; then\n   install_package \"Python-3.7.0\" \"https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tar.xz#0382996d1ee6aafe59763426cf0139ffebe36984474d0ec4126dd1c40a8b3549\" ldflags_dirs standard verify_py37 ensurepip```\n. ",
    "rmerkushin": "Yep, this working for me in zsh:\nshell\nCONFIGURE_OPTS=\"--with-openssl=$(brew --prefix openssl)\" pyenv install 3.7.0\nBut not working in fish :(\nshell\nset CONFIGURE_OPTS \"--with-openssl=\"(brew --prefix openssl); and pyenv install 3.7.0. @lgw4 nope, it's not working. I think it's python installation script not properly working with fish :(. @zyong812 Do you export any variables before install Python 3.7? Which version of OpenSSL do you install?. Holy crap! I found a solution for fish!\nshell\ngit clone https://github.com/pyenv/pyenv.git ~/.pyenv\ngit clone https://github.com/pyenv/pyenv-virtualenv.git (pyenv root)/plugins/pyenv-virtualenv\nbrew install autoconf pkg-config openssl readline\nMy config.fish:\n```shell\nset -x PYENV_ROOT ~/.pyenv\nset -x PATH ~/.pyenv/bin $PATH\nif status --is-interactive\n    source (pyenv init - | psub)\n    source (pyenv virtualenv-init - | psub)\nend\n```\nP.S.: No need extra environment variables. ",
    "zyong812": "use brew install pyenv instead. \nIt solved the same problem for me.. ",
    "kzidane": "@Packets-n-Python did you end up finding a solution to install 3.7 on Ubuntu 14.04?. ",
    "tonal": "see also https://bugs.python.org/issue34028 and https://github.com/travis-ci/travis-ci/issues/9069. ",
    "paulswartz": "For fish (@rmerkushin):\nenv CONFIGURE_OPTS=--with-openssl=(brew --prefix openssl@1.1) pyenv install 3.7.0. ",
    "luchevoi": "I've faced that issue in Debian 8.11 (jessie) with default \"OpenSSL 1.0.1t  3 May 2016\" version.\nSo, we have to make our custom openssl build.\nFor example we are logged in as user \"test\".\ncd ~\nmkdir openssl\ncd openssl\nwget \"https://www.openssl.org/source/openssl-1.0.2p.tar.gz\"\ntar xf openssl-1.0.2p.tar.gz\ncd openssl-1.0.2p\nLatest OpenSSL 1.0.2 has been downloaded and extracted into \"/home/test/openssl\" directory. Now let's build it into the same directory. I took instructions from here.\n./config --prefix=/home/test/openssl --openssldir=/home/test/openssl shared zlib\nmake\nmake test\nmake install\nIf compiling and testing passed well, you are become able to just link your fresh OpenSSL install to pyenv.\nLD_RUN_PATH=\"/home/test/openssl/lib\" LDFLAGS=\"-L/home/test/openssl/lib\" CPPFLAGS=\"-I/home/test/openssl/include\" CFLAGS=\"-I/home/test/openssl/include\" CONFIGURE_OPTS=\"--with-openssl=/home/test/openssl\" pyenv install 3.7.0\nLD_RUN_PATH is a necessary option!\n. ",
    "astudnitskiy": "On macOS with Homebrew, make sure that pkg-config is installed. Installing pyenv from Homebrew actually takes care of that. However, with git clone installation method, necessary dependences need to be installed manually.\nI had the issue on one of my Macs, while on another it was building fine. I tried adding OpenSSL 1.0.2, 1.1, LibreSSL paths in CFLAGS and LDFLAGS - no change. Finally, comparing installed Homebrew packages and build logs helped to narrow this down to pkg-config. You actually don't need to add OpenSSL paths manually, pkg-config takes care of that once it's installed (unlike zlib and sqlite, by the way).. ",
    "al45tair": "For Mac users, pyenv was supposed to work automatically by downloading and building a copy of OpenSSL specifically for the use of the Python version you're installing. Unfortunately, the code to do that neglected to actually tell the Python build process to use that copy of OpenSSL, which is why a lot of people in this thread advise you to install OpenSSL separately (e.g. using brew). But that shouldn't be necessary \u2014 pyenv has already built and installed a version of OpenSSL. The pull request I just submitted fixes things so that pyenv will actually tell Python to use the version it's just downloaded and built.. > pyenv-installer does not seem to be picking up the fix yet. So it's coming with the next release?\nThat's up to the pyenv maintainers. They might decide it isn't the right fix and that they want to do something different.. This problem still exists; this fix is important for users on macOS \u2014 they shouldn't have to install their own copy of OpenSSL somewhere when pyenv already downloads and builds it!. OK, so the patch as provided doesn't actually fix the problem, because it tries to test for the presence of the built OpenSSL before the build actually runs. This fails, so it doesn't link against the newly built OpenSSL.. @yyuu Have you separately installed OpenSSL on your machine somehow? I was having the problem on a clean Mojave install. Installing OpenSSL (or LibreSSL) in /usr/local does fix it; note that I didn't actually check which version of OpenSSL gets linked when you do that \u2014 but it's quite clear that you get an error about not having Python's SSL module if, on a clean Mojave install, you don't have OpenSSL installed and don't have this patch.. Makes me wonder if it's just the test in configure that's the problem? I might take a look at that later if I get some time.. It is true that that option only exists since 3.7 (according to the documentation, anyway), however this change seems to work just fine with 3.6.7 and 2.7.15, both of which I tried.. ",
    "laike9m": "\nFor Mac users, pyenv was supposed to work automatically by downloading and building a copy of OpenSSL specifically for the use of the Python version you're installing. Unfortunately, the code to do that neglected to actually tell the Python build process to use that copy of OpenSSL, which is why a lot of people in this thread advise you to install OpenSSL separately (e.g. using brew). But that shouldn't be necessary \u2014 pyenv has already built and installed a version of OpenSSL. The pull request I just submitted fixes things so that pyenv will actually tell Python to use the version it's just downloaded and built.\n\npyenv-installer does not seem to be picking up the fix yet. So it's coming with the next release?. > > pyenv-installer does not seem to be picking up the fix yet. So it's coming with the next release?\n\nThat's up to the pyenv maintainers. They might decide it isn't the right fix and that they want to do something different.\n\nHope it gets merged soon.. ",
    "imanhodjaev": "For fish shell users you can here is fish version which worked for me\nsh\n$ set -x CONFIGURE_OPTS --with-openssl=(brew --prefix openssl)\n$ pyenv install 3.7.1. ",
    "SixExtreme": "My macos version is 10.14.2.\nYou should do something like below.\n$ xcode-select --install\n$ sudo installer -pkg \\ \n    /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg \\\n    -target /\n$ brew install readline xz openssl@1.1 pyenv\n$ CONFIGURE_OPTS=\"--with-openssl=$(brew --prefix openssl@1.1)\" pyenv install 3.7.1. ",
    "SpaceNet": "macOS Mojave 10.14.2\n```\n$ xcode-select --install\nxcode-select: error: command line tools are already installed, use \"Software Update\" to install updates\nSoftware Update\n$ sudo installer -pkg \\ \n    /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg \\\n    -target /\n$brew install pyenv\nUpdating Homebrew...\nError: pyenv 1.1.3 is already installed\nTo upgrade to 1.2.8_1, run brew upgrade pyenv\n$ brew upgrade pyenv\n\u30fb\u30fb\u30fb\u30fb\u30fb\u30fb\n$ pyenv install 3.7.1\npython-build: use openssl from homebrew\npython-build: use readline from homebrew\nDownloading Python-3.7.1.tar.xz...\n-> https://www.python.org/ftp/python/3.7.1/Python-3.7.1.tar.xz\nInstalling Python-3.7.1...\npython-build: use readline from homebrew\nInstalled Python-3.7.1 to /Users/user/.pyenv/versions/3.7.1\n```. ",
    "deathbywedgie": "I was going insane trying to figure this out (macOS High Sierra 10.13.6), and my issue also turned out to be that pkg-config needed to be installed. That really needs to be added to the Common Build Problems page!. ",
    "cdeyoung": "\nFor fish shell users you can here is fish version which worked for me\nshell\n$ set -x CONFIGURE_OPTS --with-openssl=(brew --prefix openssl)\n$ pyenv install 3.7.1\n\nThis worked for me.  It feels like a hack, but at least Python is running.\nThanks, @imanhodjaev. ",
    "dahluwalia-ag": "\nLD_RUN_PATH is a necessary option!\n\nYes, it is!\nThank you!\nPS: the commands I used to install 3.7.2 with pyenv on debian 8:\n\nwget https://www.openssl.org/source/openssl-1.1.0j.tar.gz\ntar -xvzf openssl-1.1.0j.tar.gz\ncd openssl-1.1.0j/\n./config --prefix=/usr/local/openssl11 --openssldir=/usr/local/openssl11\nmake\n\nmake install\n\n\nCONFIGURE_OPTS=\"--with-openssl=/usr/local/openssl11\" LDFLAGS=\"-L/usr/local/openssl11/lib\" LD_RUN_PATH=\"/usr/local/openssl11/lib\" CPPFLAGS=\"-I/usr/local/openssl11/include\" CFLAGS=\"-I/usr/local/openssl11/include\" pyenv install -v 3.7.2\n. \n\n",
    "ericxsun": "@dahluwalia-ag save my life. Thanks very much.. ",
    "ekatsaros": "For me all i did is installing libssl1.0-dev and it worked!\n$ sudo apt install libssl1.0-dev. For me all i did is installing libssl1.0-dev and it worked!\n$ sudo apt install libssl1.0-dev. ",
    "mre": "Same error when I try to build Python from source, so I assume it has nothing to do with pyenv. Would love to get some support for that, but it doesn't seem like a pyenv issue, so I'm closing this.\nIf anybody has a hint, feel free to add a comment here. \ud83d\ude09 . If somebody else runs into the same problem, I fixed it by installing Python 3.6 from source as described here.\nHere were the commands:\n./configure --prefix=/usr/local MACOSX_DEPLOYMENT_TARGET=10.13 --enable-shared\nmake\nmake install\nI'm a bit concerned that --enable-shared might cause some unforeseen side-effect, but so far it seems to work fine (also in combination with Pipenv).. ",
    "avermaet": "Ok, will do next time. Thanks. Already resolved anyway.... was just about to close.. ",
    "y2k-shubham": "I was able to get away with above error by referring to Common build problems\n - brew install readline xz\n - xcode-select --install\n - brew install openssl\n\nAfter this, I installed and initialized pyenv\n - brew install pyenv\n - pyenv init (inside project directory)\nInstall and activate required python version\n - pyenv install 3.6.6\n - pyenv local 3.6.6 (inside project directory). @morenoh149 I've posted it to StackOverflow for reference. Please consider adding your own resolution to help others.. ",
    "solancer": "Same issue\n```\nlinuxsavvy:galep srinivas$ pyenv install 3.7.1\npython-build: use openssl from homebrew\npython-build: use readline from homebrew\nInstalling Python-3.7.1...\npython-build: use readline from homebrew\nBUILD FAILED (OS X 10.14 using python-build 20180424)\nInspect or clean up the working tree at /var/folders/3n/vpg5bnks45n75nd91qh7sy3c0000gn/T/python-build.20190107043912.77667\nResults logged to /var/folders/3n/vpg5bnks45n75nd91qh7sy3c0000gn/T/python-build.20190107043912.77667.log\nLast 10 log lines:\n  File \"/private/var/folders/3n/vpg5bnks45n75nd91qh7sy3c0000gn/T/python-build.20190107043912.77667/Python-3.7.1/Lib/ensurepip/main.py\", line 5, in \n    sys.exit(ensurepip._main())\n  File \"/private/var/folders/3n/vpg5bnks45n75nd91qh7sy3c0000gn/T/python-build.20190107043912.77667/Python-3.7.1/Lib/ensurepip/init.py\", line 204, in _main\n    default_pip=args.default_pip,\n  File \"/private/var/folders/3n/vpg5bnks45n75nd91qh7sy3c0000gn/T/python-build.20190107043912.77667/Python-3.7.1/Lib/ensurepip/init.py\", line 117, in _bootstrap\n    return _run_pip(args + [p[0] for p in _PROJECTS], additional_paths)\n  File \"/private/var/folders/3n/vpg5bnks45n75nd91qh7sy3c0000gn/T/python-build.20190107043912.77667/Python-3.7.1/Lib/ensurepip/init.py\", line 27, in _run_pip\n    import pip._internal\nzipimport.ZipImportError: can't decompress data; zlib not available\nmake: *** [install] Error 1\n. The only way I could get it working is through the below command\nCFLAGS=\"-I$(brew --prefix readline)/include -I$(brew --prefix openssl)/include -I$(xcrun --show-sdk-path)/usr/include\" \\\nLDFLAGS=\"-L$(brew --prefix readline)/lib -L$(brew --prefix openssl)/lib\" \\\nPYTHON_CONFIGURE_OPTS=--enable-unicode=ucs2 \\\npyenv install -v 3.7.1\n```. ",
    "innocarpe": "@solancer It solved my problem too. Thanks a lot \ud83d\ude03 . ",
    "rafa2000": "Still can't compile, I have a log file of 30 thousand lines and can't see anything that I can fix. This issue shouldn't be closed yet. It all happened after installing Mojave.\nHere is an excerpt of the compilation log for Python 3.7.1 (similar to any other version):\n/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/usr/include/_stdio.h:insert '_Nullable' if the pointer may be null\n138:/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/usr/include/_stdio.h:140        fpos_t  (* _Nullable _seek) (void *, fpos_t, int);\n                                          ^\n                                           _Nullable\n:40: warning: pointer is missing a nullability type specifier (_Nonnull, _Nullable, or _Null_unspecified) [-Wnullability-completeness]\n46:In file included from Parser/listnode.c:4:\nIn file included from ./Include/pgenheaders.h:10:\nIn file included from ./Include/Python.h:25:\nIn file included from  warning: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/usr/include/_stdio.h        int     (* _Nullable _read) (void *, char *, int);\n                                                  ^\n:/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/usr/include/stdio.hpointer is missing a nullability type specifier (_Nonnull, _Nullable, or _Null_unspecified) [-Wnullability-completeness]\n:139/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/usr/include/_stdio.h:138:40: note: insert '_Nullable' if the pointer may be null\n:64        int     (* _Nullable _write)(void *, const char *, int);\n... more lines\n... final lines\n\"__Py_FatalInitError\", referenced from:\n      _test_init_from_config in _testembed.o\n      _test_init_dev_mode in _testembed.o\n      _test_init_isolated in _testembed.o\n  \"__Py_InitializeFromConfig\", referenced from:\n      _test_init_from_config in _testembed.o\n      _test_init_dev_mode in _testembed.o\n      _test_init_isolated in _testembed.o\nld: symbol(s) not found for architecture x86_64\nclang-6.0: error: linker command failed with exit code 1 (use -v to see invocation)\nclang-6.0: error: linker command failed with exit code 1 (use -v to see invocation)\nmake: *** [python.exe] Error 1\nmake: *** Waiting for unfinished jobs....\nmake: *** [Programs/_testembed] Error 1. ",
    "johnwyles": "@solancer your solution almost works and this issue should not be closed - 3.7.2 just almost installed fine using this solution but same results as everyone else when not using his solution and just performing a pyenv install -v 3.7.2 in a fresh shell environment without these environment variables set.\nNow I am getting further and seeing this:\nshell\nclang -c -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -g -fwrapv -O3 -Wall -I/usr/local/opt/readline/include -I/usr/local/opt/openssl/include -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/usr/include  -I/usr/local/opt/readline/include -I/usr/local/opt/openssl/include -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/usr/include  -std=c99 -Wextra -Wno-unused-result -Wno-unused-parameter -Wno-missing-field-initializers -Wstrict-prototypes -Werror=implicit-function-declaration   -I. -I./Include -I/usr/local/opt/readline/include -I/usr/local/opt/readline/include -I/usr/local/opt/openssl/include -I/Users/wylesj/.pyenv/versions/3.7.2/include  -I/usr/local/opt/readline/include -I/usr/local/opt/readline/include -I/usr/local/opt/openssl/include -I/Users/wylesj/.pyenv/versions/3.7.2/include   -DPy_BUILD_CORE -o Parser/metagrammar.o Parser/metagrammar.c\nIn file included from Parser/acceler.c:13:\nIn file included from ./Include/pgenheaders.h:10:\nIn file included from ./Include/Python.h:25:\n/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/usr/include/stdio.h:89:16: warning: pointer is missing a nullability type specifier (_Nonnull, _Nullable, or _Null_unspecified) [-Wnullability-completeness]\n        unsigned char   *_base;\n                        ^\nThis is the same issue described here: https://github.com/pyenv/pyenv/issues/1066. Some interesting things I found along the way:\n```shell\nchecking for clang++... no\nconfigure:\nBy default, distutils will build C++ extension modules with \"clang++\".\n  If this is not intended, then set CXX on the configure command line.\n```\nNot sure if that means anything or not but does pertain somewhat to my previous comment. ",
    "timmyjose": "Yup, I really wanted to like it, but none of the suggestions here really works on macOS (Mojave) for me. rbenv is so much easier to use by comparison.. ",
    "ikzelf": "If this helps to get rid off dbg message like ~/.pyenv/shims/python\": not in executable format: File format not recognized it would be very welcome. It's not so easy at all to get the python extensions into dbg at the moment. (for me). ",
    "altendky": "@ikzelf, I don't know about that.  For me it turned a (nearly) worthless generic C stack trace on a segfault into something with Python stack frames so I could actually see what method of mine triggered it.  Well, by sourcing the python-gdb.py file and then running py-bt in gdb rather than just bt it did that.. @krassowski @ikzelf, perhaps there should be another ticket for that issue?  Unless installing python-gdb.py fixes your issue as well?  In my case I was able to run my code just fine (I forget exactly what command) but I didn't have the Python extensions in gdb without manually copying python-gdb.py over from the build.. @chrahunt, thanks for working this up.  I normally try to be really responsive but I'm running behind.  Maybe tonight depending how other things go.  Cheers.. A quick check worked for me both directly and via a venv.  Thanks!  Luckily I don't need this often but...  when I do it'll be nice to have it handy.  Cheers.. ",
    "krassowski": "@ikzelf, I bumped into this message too, see my answer at SO: https://stackoverflow.com/a/53007303/6646912. ",
    "jschwarzwalder": "If you type in this export PATH=\"/c/Users/<user>/.pyenv/libexec:$PATH\" instead of this export PATH=\"/c/Users/<user>/.pyenv/bin:$PATH\" it does work. ",
    "bdowling": "Just noticed this hasn't merged..  any remaining issues?. I agree, I think I was mincing over the right words too when I wrote that. It's just separate args on the CLI.. . ",
    "Dotnaught": "Trying to install using:\nCFLAGS=\"-I$(xcrun --show-sdk-path)/usr/include\" pyenv install -v 3.7.0\ngenerated a bunch of warnings...\nIn file included from /Library/Developer/CommandLineTools/SDKs/MacOSX10.13.sdk/usr/include/stdio.h:64:\n/Library/Developer/CommandLineTools/SDKs/MacOSX10.13.sdk/usr/include/_stdio.h:93:16: warning: pointer is missing a nullability type specifier (_Nonnull, _Nullable, or _Null_unspecified) [-Wnullability-completeness]\n        unsigned char   _base;\n                        ^\n/Library/Developer/CommandLineTools/SDKs/MacOSX10.13.sdk/usr/include/_stdio.h:93:16: note: insert '_Nullable' if the pointer may be null\n        unsigned char   _base;\nand ending with...\n/Library/Developer/CommandLineTools/SDKs/MacOSX10.13.sdk/usr/include/pthread.h:527:6: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]\n/Library/Developer/CommandLineTools/SDKs/MacOSX10.13.sdk/usr/include/pthread.h:194:34: note: expanded from macro '_PTHREAD_SWIFT_IMPORTER_NULLABILITY_COMPAT'\n        defined(SWIFT_CLASS_EXTRA) && (!defined(SWIFT_SDK_OVERLAY_PTHREAD_EPOCH) || (SWIFT_SDK_OVERLAY_PTHREAD_EPOCH < 1))\n. I've described the issue more fully in a Stack Overflow post. According to pyenv-doctor, the OpenSSL headers are missing and I've not found a way to resolve that.\nhttps://stackoverflow.com/questions/51919720/pyenv-python-installation-failure-openssl-development-header-is-not-installed. Thanks, that seems to have done the trick.. ",
    "kitsunde": "I had the same issue and I'm not sure this happened because I used the migration assistant to transfer to a new mac (some things appeared to break) or because of the new high sierra release, but either way it seems like brew was messing with pyenv.\nThe solution is here https://github.com/SOHU-Co/kafka-node/issues/881 but basically if you run brew doctor you'll see there's a bunch of headers that shouldn't be there, these cause some include statements to be recursive according to console.log. You can fix it with:\nmkdir /tmp/includes\nbrew doctor 2>&1 | grep \"/usr/local/include\" | awk '{$1=$1;print}' | xargs -I _ mv _ /tmp/includes\nThese were causing some include directive to blow up. After this pyenv doctor will report everything is okay and you can run pyenv install 3.7.0 like normal.. ",
    "VladKha": "@kitsunde you saved my day, thank you so much. I also had an issue after using the migration assistant to transfer to a new mac (Mojave mac os version). ",
    "bittner": "Could you try source <(pyenv init -) instead of eval (pyenv init -)? Does that work with fish?\nWhat happens? Just curious.. ",
    "qpwo": "Thanks, the first error is gone but now I get a new error:\n$ source <(pyenv init -)\nfish: Invalid redirection target: (pyenv init -)\nsource <(pyenv init -)\n       ^\n$ source (pyenv init -)\nsource: Error encountered while sourcing file 'set -gx PATH '/Users/lhm/.pyenv/shims' $PATH':\nsource: No such file or directory\nThat error is strange because the folder seems to exist:\n$ ls /Users/lhm/.pyenv/\nshims/  versions/. ",
    "bicycle1885": "I don't know why eval doesn't work, but pyenv init - | source seems to work well.. Ah, fish's eval normalizes newlines to space characters:\n~/.c/fish $ eval (echo -e \"echo foo\\necho bar\")\nfoo echo bar\n~/.c/fish $ eval (echo -e \"echo foo;echo bar\")\nfoo\nbar\nSo, multiple commands must be separated by semicolons, not by newlines.. ",
    "ohcibi": "\nFrom what I've seen nothing should ever be installed in a \"system\"\n\nI'm not sure if this is a misunderstanding but when I say \"system\" I mean the \"system\" that pyenv refers to in e.g. pyenv versions. If I set my global (or local or shell) interpreter to system I of course expect the package to be installed in the site-packages of the system's python (I'm installing packages with --user mostly, so the packages are not actually in a \"system\"s folder outside my $HOME directory, if you mean that [but they are not in one of the $HOME/.pyenv/* site-packages folder])\n\nIf yours say that no specific version has been configured then you need to set one... otherwise the shell will search your $PATH and fine the system python which is not what you want.\n\nSorry but this is exactly what I want. Let me try to explain it differently:\n$ pyenv versions\n* system\n3.6.0\n3.6.6\n\nSo I have installed the versions 3.6.0 and 3.6.6. alongside my systems python\n$ pyenv shell 3.6.0\n$ pip list\n...\npylint    2.1.1 \n...\n$ pylint --version\npylint 2.1.1\n...\nPython 3.6.0\n\nSo when setting the current python to 3.6.0 I expect packages installed with the pip that comes with 3.6.0 to be listed and useable which works the way you described for that pyenv-installed 3.6.0 version.\nHowever as system is also considered a \"version\", I expect the following to work in the same way and not with the error message that comes at the end:\n$ pyenv shell system\n$ pip list\n...\npylint    1.9.2\n...\n$ pylint --version\npyenv: pylint: command not found\n\nThe `pylint` command exists in these Python versions:\n  3.6.0\n\nSo is this a misunderstanding of the two of us or are you basically telling that one cannot use the same python packages in different versions while pyenv chooses the \"right one\" according to the currently activated interpreter?\nP.S.: After I finished writing this, I noticed that pyenv shell system in fact makes pyenv shell not say \"no local version configured....\" but simply tell \"system\". So obviously it was not the missing explicit pyenv shell system as I can reproduce my issue with that as well.. > Also, that \"system\" version of Python only seems to show up on a Mac, I don't get to see that in Linux.\nThanks for pointing that out. I'm in a bit of a brainfuck situation and in fact I didnt install pyenv on macos but on a linux vm running inside that macos (I updated my issue accordingly. This has nothing to do with macOS at all).\nThat being said: It sounds like your pyenv is not working right 8-). > Exactly that, if you need a pip package in a different version of Python you need to change Python version with pyenv local/shell/global etc and then install the package again.\nThats not exactly what I want. I want pyenv to find and use packages that are installed for the system's version. Let me rephrase the way you said what I want: \nInstead that I\n\nneed a pip package in a different version of python\n\nI actually want to\n\nmake pyenv find and use a pip package that is installed for the \"system\" python version if that \"system\" version is currently activated (e.g. by previously calling pyenv shell system or as I did pyenv global system 3.6.0)\n\nAgain: if you don't have a system python, your pyenv setup seems to be broken and you might fix that first before trying to reproduce my issue (I'm also on linux the whole time, see last comment).\nIf my pyenv wasn't aware of my \"system\" python installation I wouldn't expect it to pick up any packages with its shims for that and instead behave exactly the way you described. My whole expectation for that behaviour comes from the fact that pyenv in fact does recognizes my system's python and I therefore expect it to pick up it's packages as well.\nP.S. please also note that the README.md of this repository also refers to \"system python\" and even shows an example command to activate multiple python versions where system is one of them:\n\npyenv global system 3.3.6 3.2 2.5\n\nWith an interface like that I'd clearly expect any pip package that got installed for the system version to be picked up exactly the same way as pip packages from the other versions are being picked up; so I'd create a feature request and close this issue, in case pyenv really ignores system packages. (I ruled out naming issues because by uninstalling the package in question from my custom version and leave it installed in the system version only). @richard-scott yes I'm also on Ubuntu 16.04. and haven't tested it yet on a newer version.\nBut in fact thats another bug. This bug here is merely about \"system\" packages that are not found by the shims pyenv adds to $PATH. Is the bug clear now? Should I update the initial issue description somehow to make it more clear and avoid the confusion you had in the beginning?. Just to ensure that I understand correctly: you are saying that one needs to install system packages after installing pyenv in order for pyenv to pick it up correctly? Need to try that home when I\u2019m at the office.. ",
    "eelkevdbos": "@ohcibi I ran into the same issue (but on OSX). I found that an old package was already 'satisfying' the dependency and thus not installing a newer version. The old package location wasn't included in PATH.\nI had to remove my old packages (installed with pip before using pyenv). The location is hinted when you try to install it via pip (pip install pylint in your case). After removal of this package location you can run your install command one last time to install it to the correct path (included in your system's PATH).. > Just to ensure that I understand correctly: you are saying that one needs to install system packages after installing pyenv in order for pyenv to pick it up correctly? Need to try that home when I\u2019m at the office.\nYes, but not only that. If you've installed packages in a pre-pyenv era, you should make sure that these site-package directories are removed. Pip hints at these directories when you try to install a package by mentioning something along the lines of \"Requirement already satisfied: pylint in {{not_your_pyenv_shim_dir}}\". ",
    "LemonAndroid": "I won't install it if it's a plugin. Unless it comes with it's own installer script and is an all-in-one installation of pyenv plus the to-be-developed plugin.. ",
    "ssst0n3": "I got the same problem as @quintina-qing.\nMy kali version is: \nLinux version 4.17.0-kali3-amd64 (devel@kali.org) (gcc version 7.3.0 (Debian 7.3.0-28)) #1 SMP Debian 4.17.17-1kali1 (2018-08-21)\nAnd i build python2.6.9 also failed using cmake.\nI installed in ubuntu successfully instead. Can anyone tell me why kali cannot install python2.6.9? Thank you.. ",
    "yakky": "same here with 2.7.10 on ubuntu 18.10\nsimilar command end\npython-build.20190225135939.6718.log\nFull cli output with PYENV_DEBUG=1\n``\n+ [pyenv:22] enable -f /home/yakky/.pyenv/bin/../libexec/pyenv-realpath.dylib realpath\n+ [pyenv:29] '[' -z '' ']'\n++ [pyenv:31] type -p greadlink readlink\n++ [pyenv:31] head -1\n+ [pyenv:31] READLINK=/bin/readlink\n+ [pyenv:32] '[' -n /bin/readlink ']'\n+ [pyenv:54] '[' -z /home/yakky/.pyenv ']'\n+ [pyenv:57] PYENV_ROOT=/home/yakky/.pyenv\n+ [pyenv:59] export PYENV_ROOT\n+ [pyenv:62] '[' -z '' ']'\n+ [pyenv:63] '[' -n '' ']'\n+ [pyenv:79] '[' -z '' ']'\n+ [pyenv:80] PYENV_DIR=/home/yakky\n+ [pyenv:83] '[' '!' -d /home/yakky ']'\n+ [pyenv:83] '[' '!' -e /home/yakky ']'\n++ [pyenv:87] cd /home/yakky\n++ [pyenv:87] echo /home/yakky\n+ [pyenv:87] PYENV_DIR=/home/yakky\n+ [pyenv:88] export PYENV_DIR\n+ [pyenv:91] shopt -s nullglob\n++ [pyenv:93] abs_dirname /home/yakky/.pyenv/bin/pyenv\n++ [pyenv:39] local path=/home/yakky/.pyenv/bin/pyenv\n++ [pyenv:43] '[' -n /home/yakky/.pyenv/bin/pyenv ']'\n++ [pyenv:44] cd /home/yakky/.pyenv/bin\n++ [pyenv:45] local name=pyenv\n+++ [pyenv:46] resolve_link pyenv\n+++ [pyenv:35] /bin/readlink pyenv\n++ [pyenv:46] path=../libexec/pyenv\n++ [pyenv:43] '[' -n ../libexec/pyenv ']'\n++ [pyenv:44] cd ../libexec\n++ [pyenv:45] local name=pyenv\n+++ [pyenv:46] resolve_link pyenv\n+++ [pyenv:35] /bin/readlink pyenv\n+++ [pyenv:46] true\n++ [pyenv:46] path=\n++ [pyenv:43] '[' -n '' ']'\n++ [pyenv:49] pwd\n+ [pyenv:93] bin_path=/home/yakky/.pyenv/libexec\n+ [pyenv:94] for plugin_bin in \"${PYENV_ROOT}/plugins/\"*/bin\n+ [pyenv:95] PATH=/home/yakky/.pyenv/plugins/pyenv-doctor/bin:/home/yakky/.pyenv/plugins/pyenv-virtualenv/shims:/home/yakky/.pyenv/shims:/home/yakky/.pyenv/bin:/home/yakky/.nvm/versions/node/v10.14.2/bin:/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/usr/local/android-sdks/platform-tool:/home/yakky/.local/bin\n+ [pyenv:94] for plugin_bin in \"${PYENV_ROOT}/plugins/\"*/bin\n+ [pyenv:95] PATH=/home/yakky/.pyenv/plugins/pyenv-installer/bin:/home/yakky/.pyenv/plugins/pyenv-doctor/bin:/home/yakky/.pyenv/plugins/pyenv-virtualenv/shims:/home/yakky/.pyenv/shims:/home/yakky/.pyenv/bin:/home/yakky/.nvm/versions/node/v10.14.2/bin:/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/usr/local/android-sdks/platform-tool:/home/yakky/.local/bin\n+ [pyenv:94] for plugin_bin in \"${PYENV_ROOT}/plugins/\"*/bin\n+ [pyenv:95] PATH=/home/yakky/.pyenv/plugins/pyenv-update/bin:/home/yakky/.pyenv/plugins/pyenv-installer/bin:/home/yakky/.pyenv/plugins/pyenv-doctor/bin:/home/yakky/.pyenv/plugins/pyenv-virtualenv/shims:/home/yakky/.pyenv/shims:/home/yakky/.pyenv/bin:/home/yakky/.nvm/versions/node/v10.14.2/bin:/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/usr/local/android-sdks/platform-tool:/home/yakky/.local/bin\n+ [pyenv:94] for plugin_bin in \"${PYENV_ROOT}/plugins/\"*/bin\n+ [pyenv:95] PATH=/home/yakky/.pyenv/plugins/pyenv-virtualenv/bin:/home/yakky/.pyenv/plugins/pyenv-update/bin:/home/yakky/.pyenv/plugins/pyenv-installer/bin:/home/yakky/.pyenv/plugins/pyenv-doctor/bin:/home/yakky/.pyenv/plugins/pyenv-virtualenv/shims:/home/yakky/.pyenv/shims:/home/yakky/.pyenv/bin:/home/yakky/.nvm/versions/node/v10.14.2/bin:/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/usr/local/android-sdks/platform-tool:/home/yakky/.local/bin\n+ [pyenv:94] for plugin_bin in \"${PYENV_ROOT}/plugins/\"*/bin\n+ [pyenv:95] PATH=/home/yakky/.pyenv/plugins/python-build/bin:/home/yakky/.pyenv/plugins/pyenv-virtualenv/bin:/home/yakky/.pyenv/plugins/pyenv-update/bin:/home/yakky/.pyenv/plugins/pyenv-installer/bin:/home/yakky/.pyenv/plugins/pyenv-doctor/bin:/home/yakky/.pyenv/plugins/pyenv-virtualenv/shims:/home/yakky/.pyenv/shims:/home/yakky/.pyenv/bin:/home/yakky/.nvm/versions/node/v10.14.2/bin:/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/usr/local/android-sdks/platform-tool:/home/yakky/.local/bin\n+ [pyenv:97] export PATH=/home/yakky/.pyenv/libexec:/home/yakky/.pyenv/plugins/python-build/bin:/home/yakky/.pyenv/plugins/pyenv-virtualenv/bin:/home/yakky/.pyenv/plugins/pyenv-update/bin:/home/yakky/.pyenv/plugins/pyenv-installer/bin:/home/yakky/.pyenv/plugins/pyenv-doctor/bin:/home/yakky/.pyenv/plugins/pyenv-virtualenv/shims:/home/yakky/.pyenv/shims:/home/yakky/.pyenv/bin:/home/yakky/.nvm/versions/node/v10.14.2/bin:/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/usr/local/android-sdks/platform-tool:/home/yakky/.local/bin\n+ [pyenv:97] PATH=/home/yakky/.pyenv/libexec:/home/yakky/.pyenv/plugins/python-build/bin:/home/yakky/.pyenv/plugins/pyenv-virtualenv/bin:/home/yakky/.pyenv/plugins/pyenv-update/bin:/home/yakky/.pyenv/plugins/pyenv-installer/bin:/home/yakky/.pyenv/plugins/pyenv-doctor/bin:/home/yakky/.pyenv/plugins/pyenv-virtualenv/shims:/home/yakky/.pyenv/shims:/home/yakky/.pyenv/bin:/home/yakky/.nvm/versions/node/v10.14.2/bin:/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/usr/local/android-sdks/platform-tool:/home/yakky/.local/bin\n+ [pyenv:99] PYENV_HOOK_PATH=:/home/yakky/.pyenv/pyenv.d\n+ [pyenv:100] '[' /home/yakky/.pyenv '!=' /home/yakky/.pyenv ']'\n+ [pyenv:104] PYENV_HOOK_PATH=:/home/yakky/.pyenv/pyenv.d:/usr/local/etc/pyenv.d:/etc/pyenv.d:/usr/lib/pyenv/hooks\n+ [pyenv:105] for plugin_hook in \"${PYENV_ROOT}/plugins/\"*/etc/pyenv.d\n+ [pyenv:106] PYENV_HOOK_PATH=:/home/yakky/.pyenv/pyenv.d:/usr/local/etc/pyenv.d:/etc/pyenv.d:/usr/lib/pyenv/hooks:/home/yakky/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d\n+ [pyenv:105] for plugin_hook in \"${PYENV_ROOT}/plugins/\"*/etc/pyenv.d\n+ [pyenv:106] PYENV_HOOK_PATH=:/home/yakky/.pyenv/pyenv.d:/usr/local/etc/pyenv.d:/etc/pyenv.d:/usr/lib/pyenv/hooks:/home/yakky/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d:/home/yakky/.pyenv/plugins/pyenv-which-ext/etc/pyenv.d\n+ [pyenv:108] PYENV_HOOK_PATH=/home/yakky/.pyenv/pyenv.d:/usr/local/etc/pyenv.d:/etc/pyenv.d:/usr/lib/pyenv/hooks:/home/yakky/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d:/home/yakky/.pyenv/plugins/pyenv-which-ext/etc/pyenv.d\n+ [pyenv:109] export PYENV_HOOK_PATH\n+ [pyenv:111] shopt -u nullglob\n+ [pyenv:114] command=install\n+ [pyenv:115] case \"$command\" in\n++ [pyenv:128] command -v pyenv-install\n+ [pyenv:128] command_path=/home/yakky/.pyenv/plugins/python-build/bin/pyenv-install\n+ [pyenv:129] '[' -z /home/yakky/.pyenv/plugins/python-build/bin/pyenv-install ']'\n+ [pyenv:137] shift 1\n+ [pyenv:138] '[' 2.7.10 = --help ']'\n+ [pyenv:145] exec /home/yakky/.pyenv/plugins/python-build/bin/pyenv-install 2.7.10\n+ [pyenv-install:32] shopt -s nullglob\n+ [pyenv-install:33] for plugin_path in \"$PYENV_ROOT\"/plugins/*/share/python-build\n+ [pyenv-install:34] PYTHON_BUILD_DEFINITIONS=:/home/yakky/.pyenv/plugins/python-build/share/python-build\n+ [pyenv-install:36] export PYTHON_BUILD_DEFINITIONS\n+ [pyenv-install:37] shopt -u nullglob\n+ [pyenv-install:40] '[' 2.7.10 = --complete ']'\n++ [pyenv-install:53] python-build --lib\n+ [pyenv-install:53] eval 'lib () \n{ \n    function parse_options () \n    { \n        OPTIONS=();\n        ARGUMENTS=();\n        local arg option index;\n        for arg in \"$@\";\n        do\n            if [ \"${arg:0:1}\" = \"-\" ]; then\n                if [ \"${arg:1:1}\" = \"-\" ]; then\n                    OPTIONS[${#OPTIONS[*]}]=\"${arg:2}\";\n                else\n                    index=1;\n                    while option=\"${arg:$index:1}\"; do\n                        [ -n \"$option\" ] || break;\n                        OPTIONS[${#OPTIONS[*]}]=\"$option\";\n                        index=$(($index+1));\n                    done;\n                fi;\n            else\n                ARGUMENTS[${#ARGUMENTS[*]}]=\"$arg\";\n            fi;\n        done\n    };\n    if [ \"$1\" == \"--$FUNCNAME\" ]; then\n        declare -f \"$FUNCNAME\";\n        echo \"$FUNCNAME \\\"\\$1\\\";\";\n        exit;\n    fi\n}\nlib \"$1\";'\n++ [pyenv-install:84] lib 2.7.10\n++ [pyenv-install:78] '[' 2.7.10 == --lib ']'\n+ [pyenv-install:69] unset FORCE\n+ [pyenv-install:70] unset SKIP_EXISTING\n+ [pyenv-install:71] unset KEEP\n+ [pyenv-install:72] unset VERBOSE\n+ [pyenv-install:73] unset HAS_PATCH\n+ [pyenv-install:74] unset DEBUG\n+ [pyenv-install:76] parse_options 2.7.10\n+ [pyenv-install:57] OPTIONS=()\n+ [pyenv-install:58] ARGUMENTS=()\n+ [pyenv-install:59] local arg option index\n+ [pyenv-install:60] for arg in \"$@\"\n+ [pyenv-install:62] '[' 2 = - ']'\n+ [pyenv-install:74] ARGUMENTS[${#ARGUMENTS[*]}]=2.7.10\n+ [pyenv-install:114] '[' 1 -le 1 ']'\n+ [pyenv-install:116] unset VERSION_NAME\n+ [pyenv-install:122] DEFINITION=2.7.10\n+ [pyenv-install:123] '[' -n 2.7.10 ']'\n+ [pyenv-install:124] '[' -n 2.7.10 ']'\n+ [pyenv-install:129] declare -a before_hooks after_hooks\n+ [pyenv-install:141] OLDIFS=' \n'\n+ [pyenv-install:142] IFS='\n'\n+ [pyenv-install:142] scripts=(pyenv-hooks install`)\n++ [pyenv-install:142] pyenv-hooks install\n+ [pyenv-hooks:9] '[' install = --complete ']'\n+ [pyenv-hooks:18] PYENV_COMMAND=install\n+ [pyenv-hooks:19] '[' -z install ']'\n+ [pyenv-hooks:24] enable -f /home/yakky/.pyenv/libexec/pyenv-realpath.dylib realpath\n+ [pyenv-hooks:25] '[' -n '' ']'\n++ [pyenv-hooks:29] head -1\n++ [pyenv-hooks:29] type -p greadlink readlink\n+ [pyenv-hooks:29] READLINK=/bin/readlink\n+ [pyenv-hooks:30] '[' -z /bin/readlink ']'\n+ [pyenv-hooks:55] IFS=:\n+ [pyenv-hooks:55] hook_paths=($PYENV_HOOK_PATH)\n+ [pyenv-hooks:57] shopt -s nullglob\n+ [pyenv-hooks:58] for path in \"${hook_paths[@]}\"\n+ [pyenv-hooks:58] for path in \"${hook_paths[@]}\"\n+ [pyenv-hooks:58] for path in \"${hook_paths[@]}\"\n+ [pyenv-hooks:58] for path in \"${hook_paths[@]}\"\n+ [pyenv-hooks:58] for path in \"${hook_paths[@]}\"\n+ [pyenv-hooks:58] for path in \"${hook_paths[@]}\"\n+ [pyenv-hooks:63] shopt -u nullglob\n+ [pyenv-install:143] IFS=' \n'\n+ [pyenv-install:149] '[' -n '' ']'\n+ [pyenv-install:149] VERSION_NAME=2.7.10\n+ [pyenv-install:150] '[' -n '' ']'\n+ [pyenv-install:151] PREFIX=/home/yakky/.pyenv/versions/2.7.10\n+ [pyenv-install:153] '[' -d /home/yakky/.pyenv/versions/2.7.10 ']'\n+ [pyenv-install:157] '[' -d /home/yakky/.pyenv/versions/2.7.10/bin ']'\n+ [pyenv-install:175] '[' -n '' ']'\n+ [pyenv-install:182] '[' -z '' ']'\n+ [pyenv-install:182] '[' -d /home/yakky/.pyenv/cache ']'\n+ [pyenv-install:186] '[' -z '' ']'\n+ [pyenv-install:187] case \"${VERSION_NAME}\" in\n+ [pyenv-install:193] for version_info in \"${VERSION_NAME%-dev}\" \"${VERSION_NAME%.}\" \"${VERSION_NAME%%.}\"\n++ [pyenv-install:195] pyenv-whence python2.7.10\n++ [pyenv-install:195] true\n+ [pyenv-install:193] for version_info in \"${VERSION_NAME%-dev}\" \"${VERSION_NAME%.}\" \"${VERSION_NAME%%.}\"\n++ [pyenv-install:195] pyenv-whence python2.7\n+ [pyenv-install:195] for version in $(pyenv-whence \"python${version_info}\" 2>/dev/null || true)\n+ [pyenv-install:196] [[ 2.7.15 != \\a\\n\\a\\c\\o\\n\\d\\a ]]\n+ [pyenv-install:196] [[ 2.7.15 != \\m\\i\\n\\i\\c\\o\\n\\d\\a ]]\n+ [pyenv-install:197] PYENV_BOOTSTRAP_VERSION=2.7.15\n+ [pyenv-install:198] break 2\n+ [pyenv-install:230] '[' -n 2.7.15 ']'\n+ [pyenv-install:231] export PYENV_VERSION=2.7.15\n+ [pyenv-install:231] PYENV_VERSION=2.7.15\n+ [pyenv-install:242] trap cleanup SIGINT\n+ [pyenv-install:245] STATUS=0\n+ [pyenv-install:246] python-build 2.7.10 /home/yakky/.pyenv/versions/2.7.10\nDownloading Python-2.7.10.tar.xz...\n-> https://www.python.org/ftp/python/2.7.10/Python-2.7.10.tar.xz\nInstalling Python-2.7.10...\npatching file ./Lib/site.py\nBUILD FAILED (Ubuntu 18.10 using python-build 1.2.9-4-g6b041822)\nInspect or clean up the working tree at /tmp/python-build.20190225135939.6718\nResults logged to /tmp/python-build.20190225135939.6718.log\nLast 10 log lines:\n/tmp/python-build.20190225135939.6718/Python-2.7.10/./Modules/posixmodule.c:7578: attenzione: the use of tempnam' is dangerous, better usemkstemp'\n./python -E -S -m sysconfig --generate-posix-vars ;\\\nif test $? -ne 0 ; then \\\n        echo \"generate-posix-vars failed\" ; \\\n        rm -f ./pybuilddir.txt ; \\\n        exit 1 ; \\\nfi\nSegmentation fault (core dumped)\ngenerate-posix-vars failed\nmake: *** [Makefile:476: pybuilddir.txt] Error 1\n+ [pyenv-install:246] STATUS=1\n+ [pyenv-install:249] '[' 1 == 2 ']'\n+ [pyenv-install:277] '[' 1 == 0 ']'\n+ [pyenv-install:280] cleanup\n+ [pyenv-install:239] '[' -z '' ']'\n+ [pyenv-install:239] rm -rf /home/yakky/.pyenv/versions/2.7.10\n+ [pyenv-install:283] exit 1\n```\nAdding @protoroto and @Davide-L90 to notifications. ",
    "TensorTom": "Instructions were followed exactly. This looks to be a centos install at its base. I've installed pyenv on several such installs in the past. Idk what's going on here. I don't see how running what which python reports could show 3.7.0 (What I want) when running python --version shows the system version.. ",
    "jinjiren": "Just curious about the behavior, so you mean it will block other Python environments that are not managed by pyenv?. ",
    "4hiziri": "I didn't mean that you said, iconv which I want to execute is just elf.\nBut I seem that it is also possible to block other Python environments not in pyenv.\nI think it depends on PATH order and a name of command.\nIf every command which exists in several paths(in my case, that is iconv) is found in $PYENV_ROOT/shims at first, $PYENV_ROOT/shims/command shows message \"pyenv: : command not found\".\nBecause of this, I can't execute the same name command in other path.. I found other examples, dbus and python3-louis.\nTheir update apt update && apt upgrade failed because of pyenv: dbus-send: command not found, pyenv: python3.5: command not found.. ",
    "botamochi6277": "Using git and pandoc, I have same problems in macOS.\n```bash\nMacBook:~ botamochi$ pyenv --version\npyenv 1.2.1\nMacBook:~ botamochi$ git \npyenv: git: command not found\nThe `git' command exists in these Python versions:\n  anaconda3-5.0.1/envs/opensim-rl\nMacBook:~ botamochi$ pandoc\npyenv: pandoc: command not found\nThe `pandoc' command exists in these Python versions:\n  anaconda3-5.0.1\n```. ",
    "richin13": "How did you solve it?. @graingert I solved it this way:\n\nInstalled the package libssl1.0-dev (for an Ubuntu-based distro sudo apt install libssl1.0-dev). This should uninstall your existing libssl-dev package. That's ok.\nThen, installed the python version with pyenv: pyenv install 3.4.9 (in my case)\nThen, reinstalled libssl-dev. \n",
    "graingert": "@OCDpunk why did you close this issue?. I did this in the end - not sure if all the env vars are needed though\nbrew install openssl@1.1\n  ssldir=$(brew    \\ --prefix openssl@1.1 2>/dev/null || true)\n  export PKG_CONFIG_PATH=\"${ssldir}/lib/pkgconfig${PKG_CONFIG_PATH:+:$PKG_CONFIG_PATH}\"\n  export LDFLAGS=\"-L${ssldir}/lib\"\n  export LD_LIBRARY_PATH=\"${ssldir}/lib${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}\"\n  export CFLAGS=\"-I${ssldir}/include\"\n  export CPPFLAGS=\"-I${ssldir}/include\". ",
    "thecodejunkie": "Any advice on this one? Can't get passed my problems? . @richard-scott brew and brew cask have been updated. Do you mean setting CFLAGS='-std=gnu99' ? That has no impact for me. Worked for me! . ",
    "tranthanhbao2207": "i got same here (10.13.3) . Do we have any update for this ? My friend got 10.13.1 and he installed successfully , it is kinda weird .\n:\n\nFile \"/private/var/folders/2_/z2j25yz12ygbczxh5n_y4gm80000gp/T/python-build.20181113111258.5921/Python-3.6.6/Lib/urllib/request.py\", line 2585, in <module>\n    from _scproxy import _get_proxy_settings, _get_proxies\nModuleNotFoundError: No module named '_scproxy'\nmake: *** [install] Error 1\n\nSolved: not sure why but i have to run it under sudo, that was it .. > I think this solution works for the issues above (it solved mine) and it should solve @tranthanhbao2207 's issue as well...\n\n1107\nBasically remove/rename the /usr/include directory...\n\ni re-install the OS and everything works for me ! \npainful tips :) : try to using sudo less . ",
    "bercikr": "I'm having the same issue, one thing i noticed is that it seems to be pulling include and lib directories from /usr/ rather than /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/ which i believe to be the correct location.. I think this solution works for the issues above (it solved mine) and it should solve @tranthanhbao2207 's issue as well...\nhttps://github.com/pyenv/pyenv/issues/1107\nBasically remove/rename the /usr/include directory.... ",
    "sergeyradov": "@thecodejunkie  Could you please post solution like steps? \nIs it necessary to close this issue if it is resolved?. ",
    "wenshi11019": "I have the same problem, but I can solve it after watch wiki. ",
    "benmezger": "Solved it by running: sudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target /. ",
    "codezakh": "Apparently this is happening because Xcode Command Line tools no longer installs needed headers in /include. You have to run a separate command to install the needed headers.\nSee https://developer.apple.com/documentation/xcode_release_notes/xcode_10_release_notes.\n\nThe command line tools will search the SDK for system headers by default. However, some software may fail to build correctly against the SDK and require macOS headers to be installed in the base system under /usr/include. If you are the maintainer of such software, we encourage you to update your project to work with the SDK or file a bug report for issues that are preventing you from doing so. As a workaround, an extra package is provided which will install the headers to the base system. In a future release, this package will no longer be provided. You can find this package at:\n/Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg\n\u2028To make sure that you're using the intended version of the command line tools, run xcode-select -s  or xcode select -s /Library/Developer/CommandLineTools after installing.. \n",
    "qianxiaowei": "I'm now working on Mojave, and followed the solution provided by @thetylerwolf , and it works.\n\nI'm running OS X Sierra and the above didn't help for me. Found this solution here: https://medium.com/@pimterry/setting-up-pyenv-on-os-x-with-homebrew-56c7541fd331\nand it did work.\n\nbash\nCFLAGS=\"-I$(brew --prefix readline)/include -I$(brew --prefix openssl)/include -I$(xcrun --show-sdk-path)/usr/include\" \\\nLDFLAGS=\"-L$(brew --prefix readline)/lib -L$(brew --prefix openssl)/lib\" \\\nPYTHON_CONFIGURE_OPTS=--enable-unicode=ucs2 \\\npyenv install -v 3.6.0. ",
    "chenguanda": "I'm now working on Mojave too,  followed the solution provded by @Voleking,  I fixed the error of zlib, but not openssl , \n\nERROR: The Python ssl extension was not compiled. Missing the OpenSSL lib?\n\nI fix it by run the following command\n\nCFLAGS=\"-I$(brew --prefix openssl)/include\" LDFLAGS=\"-L$(brew --prefix openssl)/lib\" pyenv install 3.6.0 \n. \n",
    "zanderzhng": "I didn't have CLT installed in my Mojave so I couldn't install the headers pkg.\n~~@qianxiaowei 's code worked for me, but I'm wondering if following commands would be enough.~~ below code are enough.\nCFLAGS=\"-I$(xcrun --show-sdk-path)/usr/include\" pyenv install -v 3.7.0. ",
    "DrewHoo": "Can we link #454 to this issue? It is the exact same problem, but the solution differs if you're on Mojave.. ",
    "fharper": "sudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target / solved it for me, thanks @Voleking .. ",
    "moranmcsquid": "@Voleking Would you mind also adding xcode-select --install to your solution.\nFor most people that would be a \"duh\", but there are conditions in which you could have installed XCode and have a compiler without having the commandline tools installed.. ",
    "chikaram": "I had a clean installed Mojave, installed Xcode, Homebrew, pyenv, zlib and still had this issue.\nzipimport.ZipImportError: can't decompress data; zlib not available\nThat means the problem isn't fixed yet at the moment. (Dec 19, 2018)\nAnyway, super thx to @Voleking. Your solution perfectly worked for me.. ",
    "tarrex": "Well, if you use the brew, zlib not available means that pyenv compilers can't find zlib header files. The brew has told you in brew info zlib that \n\nFor compilers to find zlib you may need to set:\n  export LDFLAGS=\"-L/usr/local/opt/zlib/lib\"\n  export CPPFLAGS=\"-I/usr/local/opt/zlib/include\"\n\nso just execute \n\nexport LDFLAGS=\"-L/usr/local/opt/zlib/lib\"\n  export CPPFLAGS=\"-I/usr/local/opt/zlib/include\"\n\nand then\n\npyenv install 3.7.1\n\nThere is another warning WARNING: The Python sqlite3 extension was not compiled. Missing the SQLite3 lib? also like this, execute\n\nexport LDFLAGS=\"-L/usr/local/opt/zlib/lib -L/usr/local/opt/sqlite/lib\"\nexport CPPFLAGS=\"-I/usr/local/opt/zlib/include -I/usr/local/opt/sqlite/include\"\n\nthen install your version.  Worked for me.\n+ macOS Mojave 10.14.1\n+ pyenv 1.2.8. ",
    "arnavb": "@tarrex Thanks for your solution! It worked perfectly for me.. ",
    "iamalisajid": "CFLAGS=\"-I$(xcrun --show-sdk-path)/usr/include\" pyenv install 3.5.2 worked for me on MACOS Mojave.. ",
    "Cabalist": "@iamalisajid This worked for me when the others did not.  Thank you. ",
    "jeffreyzh": "thx to @Voleking. Your solution perfectly worked for me\n. ",
    "imirzadeh": "For me the problem was binutils and I had to uninstall it using:\nbrew uninstall --force binutils. ",
    "jasonmp85": "Hey so why isn't this fixed after, I don't know, four months?\nI prefer shell scripts and Ruby and only use Python under necessity. The dependency/environment/version management systems are an inscrutable rat king, so I generally try to keep to best practices by using pipenv and pyenv to keep things from totally borking my system, but I just needed to install a new Python version today and it doesn't Just Work\u2122.\nAnyways, doesn't give a great impression.. ",
    "Sajjon": "Just wanna confirm what @moranmcsquid  said, I had Xcode 10 installed but apparantly this was not enough, the command:\nbash \nxcode-select --install\nAdds the folder Packages in /Library/Developer/CommandLineTools, I was then able to run:\nbash\nsudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target /\nAs suggested by @benmezger\nAnd then pyenv install 3.7.1 worked.\nApparently it was a stupid assumption to make that being a Swift developer with Xcode 10 installed would have installed what xcode-select --install adds... \ud83e\udd37\u200d\u2642\ufe0f. ",
    "wQueryLoveMm": "Solved it by running: sudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target /. ",
    "voctex": "\nSolved it by running: sudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target /\n\nThx!. ",
    "kylemart": "Sorry if this doesn't add much to the conversation, but @Voleking 's solution worked for me! Super happy \ud83d\ude04 . ",
    "huntermatthews": "@Volking's solution worked for me as well, however.\nI understand that pyenv isn't (and shouldn't) be linked to brew alone. However, if brew is available can we get pyenv install to prefer the brew'd zlib/sqlite/etc just as it does for other things? \nApple is being very ... apple here. . ",
    "truegate": "in macOS Mojave 10.14.3 and python 3.7.1, i use xcode-select --install to fix this bug. ",
    "pau-lo": "@iamalisajid This worked for me when the others did not. Thank you!!!. ",
    "ezdac": "I get a similar behaviour on MacOS 10.12.6 and pyenv 1.2.4.\nAs a note, I use the pyenv-virtualenv and pyenv-virtualenvwrapper plugin.\nA binary in /usr/local/bin installed via Homebrew won't get found by pyenv when I am not in the system python version.\nWhen in the system python:\n\u279c pyenv which raiden\n/usr/local/bin/raiden\nWhen I set a \"shell\" virtualenv (named global):\n```\n\u279c pyenv shell global\n(global)\n\u279c pyenv which raiden\npyenv: raiden: command not found\n```. ",
    "garytyler": "I think installing the Ubuntu/Debian requirements mentioned on the Installation Wiki here should clear this up. Just run this in your shell: \nsudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev \\\nlibreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \\\nxz-utils tk-dev libffi-dev liblzma-dev. ",
    "wottpal": "Same issue and @garytyler solution helped. Thanks!. ",
    "michidk": "@garytyler solution did't work for me. tested on both Debian and Ubuntu Subsystem on Windows, Also tested on Debian on a dedicated machine.. ",
    "purificant": "Resolved. Thank you for speedy merge @yyuu . pyenv stores python builds and symlinks to virtual environments in ~/.pyenv/versions, theoretically, if you were to create a new virtual environment with a python interpreter of your own choosing and then add a symlink and a pyvenv.cfg then pyenv might pick it up and allow you to work with it.\nHowever, that being said, pyenv excels at building specific python versions and allowing you to easily mix and match python interpreter builds and virtual environments, if you do not want to build from source perhaps it's not the best tool for your use case.. ",
    "brooms": "Done. If you are ok with the edits, this issue can be closed.. ",
    "lmmarsano": "I may have closed this prematurely.\n290 was recently merged into pyenv-virtualenv.\nDoes the issue persist?. ",
    "izznogooood": "I tried with pyenv global system 3.7.1 but pyenv does not pick up the second argument.\nI've tried installing / compiling countless python2 version but they all fail.\nIm sorry I could not be of any help.. I have left \"this\" behind using pyenv only for its python sources.\nBut give me a day and I'll get back to you from the right \"environment\". . ",
    "rafenden": "The ability to enable multiple python versions at the same time should be in the README file, took me a while to find out this.. ",
    "ShaohongBai": "Install SDK file manually will resolve the issue.\nsudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target /. ",
    "Mpatidar059": "Its works fine.\nsudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target /\n. ",
    "Nklya": "Thanks!. ",
    "punjab": "Same here on OS X 10.14.1. The issue however seem not to be with pyenv, but with the way new command line tools may have changed in the upgrade. rbenv for ruby is failing to install same way. . ",
    "caipre": "I was running into this as well, and noticed that my ar was /usr/local/bin/ar rather than the system ar. I ran brew remove binutils and was finally able to run pyenv install 2.7.15 and pyenv install 3.7.1 without problems . I had also upgraded to Xcode 10.1, but I think it was binutils that was giving me trouble. YMMV.. ",
    "VagelisD": "I can attest to that running macOS High Sierra (10.13.6) i tried everything with CFLAGS and LDFLAGS\nremoving binutils was the only solution, thanks again ! . ",
    "rezhajulio": "Wow, amazing! This solved my issue that has been happening for months. Thanks guys!. ",
    "ntrepid8": "Are you sure those are not just user installed versions of pip? I think if you install a user copy of pip like this:\n$ pip install --user pip\nYou'll get an executable in your ~/.local/bin and if that's part of your PATH then it will still show up there when you switch away from a pyenv managed version. If your paths had not reverted back to system standard I think your path to pip would be something like this:\n~/.pyenv/versions/3.7.1/lib/python3.7/site-packages/pip. ",
    "damon-kwok": "+1 \n@yyuu \nI recommend removing the built-in pip, which is installed by the user.\ncurl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\npython2 get-pip.py --user\npython3 get-pip.py --user. ",
    "ryannielsen": "FWIW, this allowed me to install 3.7.0 on my Mojave 10.14.2 Beta install. . ",
    "cjw296": "Yeah, I wonder if there'd be appetite for support for a pyenv register command, or some such, to register existing Python installations?\nFrom a sysadmin perspective, I wish there was a global config file we could lay down somewhere in /etc that would prevent pyenv from attempting to download and build local python installations. Would be handy for the place where I work!. I want the path hacks that pyenv does, and the ability to switch between the pythons that it knows about.. See https://github.com/sdispater/poetry/issues/680 for an example of why building your own pythons everywhere is problematic.. ",
    "smheidrich": "+1 on something like pyenv register for Python versions installed e.g. via the system package manager. This would be useful e.g. for people who only need pyenv in order to be able to use poetry as intended (cf. https://github.com/sdispater/poetry/issues/522), and who only want switch between Python 2.x and 3.y (usually, packages for some x and some y are simultaneously available in operating system repositories).. ",
    "adonig": "Same problem here on OS X 10.14.1 Mojave. Cannot build any Python version. Build process fails with missing symbols even after installing the additional SDK headers and reinstalling binutils :-(\nEDIT: Removing binutils solved the problem for me: brew remove binutils. ",
    "ryan-gi": "\nEDIT: Removing binutils solved the problem for me: brew remove binutils\n\nFantastic. This also worked for me.. ",
    "socketbox": "\nSame problem here on OS X 10.14.1 Mojave. Cannot build any Python version. Build process fails with missing symbols even after installing the additional SDK headers and reinstalling binutils :-(\nEDIT: Removing binutils solved the problem for me: brew remove binutils\n\nVery interested in how @adonig came to discover that this was the problem. Could you give some insight as to how you tracked the issue back to binutils? I had thought it was an issue with flags being passed to the \"native\" ld (ie. the one at /usr/bin/ld).. ",
    "fpatz": "Root cause for this is that the system ar is shadowed by binutils. The libpythonX.Ym.a produced by binutils' ar cannot be used for linking. Verified by building with AR=/usr/bin/ar. I'd suggest explicitly   setting AR for macOS builds or at least placing a hint in the installation instructions (... or marking binutils incompatible with pyenv, if that can be done with Homebrew?).. Simply prefix the command: AR=/usr/bin/env pyenv install .... This sets AR for that invocation of pyenv. Or (temporarily) brew uninstall binutils, if that is where ar is coming from (you can check with which ar -- if it says /usr/local/bin/ar you probably have binutils installed).. ",
    "dmhenry": "@fpatz, I've seen references to building with AR=/usr/bin/ar in other places as well, but I'm not clear on how to do that. Can you tell me? I'm new to Python and trying to figure out the tooling. I'm trying to pyenv install 3.6.8. Can I pass this here somehow? Thanks in advance!. ",
    "neersighted": "Note that alternative, ls or dir could be used, if there was no real reason for switching away. ls is by far the most performant option:\n```\nBenchmark #1: find share/python-build -maxdepth 1 -type f -print0 | xargs -0 -n 1 basename\n  Time (mean \u00b1 \u03c3):      2.576 s \u00b1  0.024 s    [User: 90.5 ms, System: 2070.3 ms]\n  Range (min \u2026 max):    2.539 s \u2026  2.619 s\nBenchmark #2: find share/python-build -maxdepth 1 -type f -exec basename {} \\;\n  Time (mean \u00b1 \u03c3):      2.702 s \u00b1  0.021 s    [User: 92.0 ms, System: 2145.3 ms]\n  Range (min \u2026 max):    2.672 s \u2026  2.740 s\nBenchmark #3: fd . share/python-build --max-depth 1 --type f --exec echo {/}\n  Time (mean \u00b1 \u03c3):     607.9 ms \u00b1 128.8 ms    [User: 257.7 ms, System: 2112.5 ms]\n  Range (min \u2026 max):   483.2 ms \u2026 886.4 ms\nBenchmark #4: fd . share/python-build --max-depth 1 --type f --exec basename\n  Time (mean \u00b1 \u03c3):     589.5 ms \u00b1 104.1 ms    [User: 242.0 ms, System: 1996.9 ms]\n  Range (min \u2026 max):   462.4 ms \u2026 803.9 ms\nBenchmark #5: ls share/python-build\n  Time (mean \u00b1 \u03c3):      10.1 ms \u00b1   1.3 ms    [User: 1.2 ms, System: 7.7 ms]\n  Range (min \u2026 max):     7.4 ms \u2026  15.3 ms\nSummary\n  'ls share/python-build' ran\n   58.43 \u00b1 12.90 times faster than 'fd . share/python-build --max-depth 1 --type f --exec basename'\n   60.26 \u00b1 15.06 times faster than 'fd . share/python-build --max-depth 1 --type f --exec echo {/}'\n  255.34 \u00b1 33.93 times faster than 'find share/python-build -maxdepth 1 -type f -print0 | xargs -0 -n 1 basename'\n  267.87 \u00b1 35.57 times faster than 'find share/python-build -maxdepth 1 -type f -exec basename {} \\;'\n```. ",
    "siddhantgoel": "I tried those steps but couldn't find any pyenv related output. But then I restarted the system and now $PATH seems to be clean. No idea what happened there, but please feel free to close this issue. Thanks for the help anyway!. ",
    "agibalov": "I had the same issue with Python 3.7.1 and Ubuntu 18.04. Installing the dependencies listed here: https://github.com/pyenv/pyenv/wiki/common-build-problems made it work.. ",
    "ziofil": "Same issue here, but on macOS 10.14.1, so it could be unrelated to the operating system.\nI installed zlib with homebrew, but it didn't help. ",
    "Mat001": "Hey @kirillzh have you manage to resolve this? I'm getting the same error. Thx. ",
    "kirillzh": "Hey @Mat001,\nI haven't attempted to solve this, ended up using Python 3.6.7.. ",
    "fcying": "@chrahunt \nsource build/envsetup.sh\nlunch 2      # aosp_arm64-eng\nexport PYENV_DEBUG=1\nmake 2>&1 | tee make.log\nmake.zip\n. ",
    "josegonzalez": "Closed by #1256.. ",
    "abingham": "Hmmm...a bit more digging seems to indicate that this isn't a pyenv issue. Sorry for the noise.. ",
    "gleopoldo": "Nice! Tks @chrahunt. I'm going to look at it.. ",
    "jalessio": "This would also allow us to pick up CPython 3.6.8 via Homebrew. So I think we're  asking for a v1.2.9 tag at commit f07184b34cb44178fc77c5e99a9c6ee8ee998d09 or later.\n@scolby33 I'd be happy to open a Homebrew PR once the pyenv tag is made.\nI found another similar request for a release here:\nhttps://github.com/pyenv/pyenv/commit/f07184b34cb44178fc77c5e99a9c6ee8ee998d09#commitcomment-31818891\nThanks!. ",
    "playpauseandstop": "I ran into similar problem on macOS 10.14.3 and managed to fix it with,\n\nUpgrade brew to latest version with brew upgrade\nRemove cctools, which was recently removed from brew, with brew uninstall -f cctools\n\n\n@colwem \nI understand from your message that you didn't use ranlib from brew as it points to,\n\n/opt/local/bin/ranlib\n\nnot to,\n\n/usr/local/Cellar/cctools/855/bin/ranlib (as it was in my case)\n\nbut maybe removing ranlib from /opt/local/bin and using system /usr/bin/ranlib fix the issue for you as well.. ",
    "colwem": "Yes, sorry, I should have commented that I eventually solved this.  the problem was an old macports installation.  That's why it was using /opt/local/bin/ranlib turns out everything in /opt/local/bin comes from macports and if you don't want to use macports you can just remove the whole directory.  You really shouldn't be using macports and homebrew at the same time apparently haha.. ",
    "jaymzcd": "I had the same problem after major brew updates on my local packages on Mac OS. I \"solved\" it by removing my existing pyenv versions and just re-installing as needed after reading your comment.\ni.e.\nrm -fr ~/.pyenv/\npyenv install 3.5.2\nThen I was able to get pytest --pdb working again. Thanks for the heads up as to what the solution could be \ud83d\udc4d . ",
    "fofoni": "No need to remove the whole pyenv installation, though. Just pyenv uninstall 3.7.2 and pyenv install 3.7.2 worked for me.. ",
    "dakl": "What's the status on this?. ",
    "andrew-humu": "Thanks for commenting, @chrahunt!\nI'll just respond to a couple points with clarification:\n\n~~If I'm being honest, ${} is just syntax I copied from elsewhere in this file.  From what I can tell it is standard bash syntax for variable expansion (different from $(), which evaluates a command in a subshell).  It seems likely to me that if this were problematic, that would have surfaced before now.\n https://stackoverflow.com/questions/27472540/difference-between-and-in-bash~~\n\nWhoops, I have read through my code and my answer again, and I recognize the error you were calling out!  ${} is not appropriate for the xcrun invocation, which is a command and needs $() syntax.  Thanks @chrahunt!\n\n\nI think this is a good question to raise.  I'm not a MacOS guru, and I'm not sure what exactly the conditions are for xcrun to be available.  However, I figured it was better to propose a solution and start the conversation than leave things in their current, broken state.. Thanks @jeffb4!  I will try to find some time!. \n",
    "jeffb4": "On 10.14.1 this patch still exhibits bad pyenv install behavior\nCFLAGS=\"-I$(xcrun --show-sdk-path)/usr/include\" pyenv install -v 3.6.7 works fine, whereas pyenv install on this branch still fails with zlib error\nI do not have the global sdk installation Josh mentions above, and I'm happy to test any iterations you might have to fix this. ",
    "nlw0": "I am trying to build a pybind11 project using cmake... The cmake file wants to run specifically the command \"python3.6\", and that's why I have this problem. So to cause the problem in my machine I just need to call python3.6 after activating the environment.\n~/.pyenv/versions/3.6.7/bin/python3.6 is there and is executable, and the python3 shim works, but the python3.6 one doesn't. I have \"fixed\" it for me creating a python3.6 link to ~/.pyenv/versions/3.6.7/bin/python3.6 on my ~/bin/, that is on PATH.. I wouldn't really call this the same issue. I understand there is a cmake connection, but in my case I am in a 3.6.7 environment, and cmake is correctly going for the version I want. The problem is that the python and python3 shims work fine, but the python3.6 shim is not working, and produces the weird message telling me to use a 3.6.7 environment, that I am already using. This is a shell session showing the problem:\n```\n$ pyenv activate myenv36\n$ which python\n/home/user/.pyenv/shims/python\n$ python --version\nPython 3.6.7\n$ which python3.6\n/home/user/.pyenv/shims/python3.6\n$ python3.6\npyenv: python3.6: command not found\nThe `python3.6' command exists in these Python versions:\n  3.6.7\n  3.6-dev\n```. Sorry for the delay. There you go:\n``\n+ program=python3.6\n+ [[ python3.6 = \\p\\y\\t\\h\\o\\n* ]]\n+ export PYENV_ROOT=/home/lealwern/.pyenv\n+ PYENV_ROOT=/home/lealwern/.pyenv\n+ exec /home/lealwern/.pyenv/libexec/pyenv exec python3.6\n+ [pyenv:22] enable -f /home/lealwern/.pyenv/libexec/../libexec/pyenv-realpath.dylib realpath\n+ [pyenv:29] '[' -z '' ']'\n++ [pyenv:31] type -p greadlink readlink\n++ [pyenv:31] head -1\n+ [pyenv:31] READLINK=/bin/readlink\n+ [pyenv:32] '[' -n /bin/readlink ']'\n+ [pyenv:54] '[' -z /home/lealwern/.pyenv ']'\n+ [pyenv:57] PYENV_ROOT=/home/lealwern/.pyenv\n+ [pyenv:59] export PYENV_ROOT\n+ [pyenv:62] '[' -z '' ']'\n+ [pyenv:63] '[' -n '' ']'\n+ [pyenv:79] '[' -z '' ']'\n+ [pyenv:80] PYENV_DIR=/home/lealwern/bin\n+ [pyenv:83] '[' '!' -d /home/lealwern/bin ']'\n+ [pyenv:83] '[' '!' -e /home/lealwern/bin ']'\n++ [pyenv:87] cd /home/lealwern/bin\n++ [pyenv:87] echo /home/lealwern/bin\n+ [pyenv:87] PYENV_DIR=/home/lealwern/bin\n+ [pyenv:88] export PYENV_DIR\n+ [pyenv:91] shopt -s nullglob\n++ [pyenv:93] abs_dirname /home/lealwern/.pyenv/libexec/pyenv\n++ [pyenv:39] local path=/home/lealwern/.pyenv/libexec/pyenv\n++ [pyenv:43] '[' -n /home/lealwern/.pyenv/libexec/pyenv ']'\n++ [pyenv:44] cd /home/lealwern/.pyenv/libexec\n++ [pyenv:45] local name=pyenv\n+++ [pyenv:46] resolve_link pyenv\n+++ [pyenv:35] /bin/readlink pyenv\n+++ [pyenv:46] true\n++ [pyenv:46] path=\n++ [pyenv:43] '[' -n '' ']'\n++ [pyenv:49] pwd\n+ [pyenv:93] bin_path=/home/lealwern/.pyenv/libexec\n+ [pyenv:94] for plugin_bin in '\"${PYENV_ROOT}/plugins/\"*/bin'\n+ [pyenv:95] PATH=/home/lealwern/.pyenv/plugins/pyenv-virtualenv/bin:/home/lealwern/local/gcc-8.3.0/bin:/home/lealwern/.pyenv/plugins/pyenv-virtualenv/shims:/home/lealwern/.pyenv/shims:/home/lealwern/bin:/opt/arcgis/ArcExplorer/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/lealwern/.pyenv/bin\n+ [pyenv:94] for plugin_bin in '\"${PYENV_ROOT}/plugins/\"*/bin'\n+ [pyenv:95] PATH=/home/lealwern/.pyenv/plugins/python-build/bin:/home/lealwern/.pyenv/plugins/pyenv-virtualenv/bin:/home/lealwern/local/gcc-8.3.0/bin:/home/lealwern/.pyenv/plugins/pyenv-virtualenv/shims:/home/lealwern/.pyenv/shims:/home/lealwern/bin:/opt/arcgis/ArcExplorer/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/lealwern/.pyenv/bin\n+ [pyenv:97] export PATH=/home/lealwern/.pyenv/libexec:/home/lealwern/.pyenv/plugins/python-build/bin:/home/lealwern/.pyenv/plugins/pyenv-virtualenv/bin:/home/lealwern/local/gcc-8.3.0/bin:/home/lealwern/.pyenv/plugins/pyenv-virtualenv/shims:/home/lealwern/.pyenv/shims:/home/lealwern/bin:/opt/arcgis/ArcExplorer/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/lealwern/.pyenv/bin\n+ [pyenv:97] PATH=/home/lealwern/.pyenv/libexec:/home/lealwern/.pyenv/plugins/python-build/bin:/home/lealwern/.pyenv/plugins/pyenv-virtualenv/bin:/home/lealwern/local/gcc-8.3.0/bin:/home/lealwern/.pyenv/plugins/pyenv-virtualenv/shims:/home/lealwern/.pyenv/shims:/home/lealwern/bin:/opt/arcgis/ArcExplorer/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/lealwern/.pyenv/bin\n+ [pyenv:99] PYENV_HOOK_PATH=:/home/lealwern/.pyenv/pyenv.d\n+ [pyenv:100] '[' /home/lealwern/.pyenv '!=' /home/lealwern/.pyenv ']'\n+ [pyenv:104] PYENV_HOOK_PATH=:/home/lealwern/.pyenv/pyenv.d:/usr/local/etc/pyenv.d:/etc/pyenv.d:/usr/lib/pyenv/hooks\n+ [pyenv:105] for plugin_hook in '\"${PYENV_ROOT}/plugins/\"*/etc/pyenv.d'\n+ [pyenv:106] PYENV_HOOK_PATH=:/home/lealwern/.pyenv/pyenv.d:/usr/local/etc/pyenv.d:/etc/pyenv.d:/usr/lib/pyenv/hooks:/home/lealwern/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d\n+ [pyenv:108] PYENV_HOOK_PATH=/home/lealwern/.pyenv/pyenv.d:/usr/local/etc/pyenv.d:/etc/pyenv.d:/usr/lib/pyenv/hooks:/home/lealwern/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d\n+ [pyenv:109] export PYENV_HOOK_PATH\n+ [pyenv:111] shopt -u nullglob\n+ [pyenv:114] command=exec\n+ [pyenv:115] case \"$command\" in\n++ [pyenv:128] command -v pyenv-exec\n+ [pyenv:128] command_path=/home/lealwern/.pyenv/libexec/pyenv-exec\n+ [pyenv:129] '[' -z /home/lealwern/.pyenv/libexec/pyenv-exec ']'\n+ [pyenv:137] shift 1\n+ [pyenv:138] '[' python3.6 = --help ']'\n+ [pyenv:145] exec /home/lealwern/.pyenv/libexec/pyenv-exec python3.6\n+ [pyenv-exec:20] '[' python3.6 = --complete ']'\n++ [pyenv-exec:24] pyenv-version-name\n+ [pyenv-version-name:6] '[' -z kitt36 ']'\n+ [pyenv-version-name:11] OLDIFS='  \n'\n+ [pyenv-version-name:12] IFS='\n'\n+ [pyenv-version-name:12] scripts=(pyenv-hooks version-name)\n++ [pyenv-version-name:12] pyenv-hooks version-name\n+ [pyenv-hooks:9] '[' version-name = --complete ']'\n+ [pyenv-hooks:18] PYENV_COMMAND=version-name\n+ [pyenv-hooks:19] '[' -z version-name ']'\n+ [pyenv-hooks:24] enable -f /home/lealwern/.pyenv/libexec/pyenv-realpath.dylib realpath\n+ [pyenv-hooks:25] '[' -n '' ']'\n++ [pyenv-hooks:29] type -p greadlink readlink\n++ [pyenv-hooks:29] head -1\n+ [pyenv-hooks:29] READLINK=/bin/readlink\n+ [pyenv-hooks:30] '[' -z /bin/readlink ']'\n+ [pyenv-hooks:55] IFS=:\n+ [pyenv-hooks:55] hook_paths=($PYENV_HOOK_PATH)\n+ [pyenv-hooks:57] shopt -s nullglob\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:63] shopt -u nullglob\n+ [pyenv-version-name:13] IFS='     \n'\n+ [pyenv-version-name:18] '[' -z kitt36 ']'\n+ [pyenv-version-name:18] '[' kitt36 = system ']'\n+ [pyenv-version-name:28] versions=()\n+ [pyenv-version-name:29] OLDIFS='  \n'\n+ [pyenv-version-name:30] IFS=:\n+ [pyenv-version-name:31] any_not_installed=0\n+ [pyenv-version-name:32] for version in '${PYENV_VERSION}'\n+ [pyenv-version-name:33] version_exists kitt36\n+ [pyenv-version-name:24] local version=kitt36\n+ [pyenv-version-name:25] '[' -d /home/lealwern/.pyenv/versions/kitt36 ']'\n+ [pyenv-version-name:34] versions=(\"${versions[@]}\" \"${version}\")\n+ [pyenv-version-name:43] IFS='     \n'\n+ [pyenv-version-name:45] OLDIFS='  \n'\n+ [pyenv-version-name:46] IFS=:\n+ [pyenv-version-name:47] echo kitt36\n+ [pyenv-version-name:49] IFS='     \n'\n+ [pyenv-version-name:51] '[' 0 = 1 ']'\n+ [pyenv-exec:24] PYENV_VERSION=kitt36\n+ [pyenv-exec:25] PYENV_COMMAND=python3.6\n+ [pyenv-exec:27] '[' -z python3.6 ']'\n+ [pyenv-exec:32] export PYENV_VERSION\n++ [pyenv-exec:33] pyenv-which python3.6\n+ [pyenv-which:14] '[' python3.6 = --complete ']'\n+ [pyenv-which:30] PYENV_COMMAND=python3.6\n+ [pyenv-which:32] '[' -z python3.6 ']'\n+ [pyenv-which:37] OLDIFS='     \n'\n+ [pyenv-which:38] IFS=:\n+ [pyenv-which:38] versions=(${PYENV_VERSION:-$(pyenv-version-name)})\n+ [pyenv-which:39] IFS='    \n'\n+ [pyenv-which:41] for version in '\"${versions[@]}\"'\n+ [pyenv-which:42] '[' kitt36 = system ']'\n+ [pyenv-which:46] PYENV_COMMAND_PATH=/home/lealwern/.pyenv/versions/kitt36/bin/python3.6\n+ [pyenv-which:48] '[' -x /home/lealwern/.pyenv/versions/kitt36/bin/python3.6 ']'\n+ [pyenv-which:53] OLDIFS='     \n'\n+ [pyenv-which:54] IFS='\n'\n+ [pyenv-which:54] scripts=(pyenv-hooks which)\n++ [pyenv-which:54] pyenv-hooks which\n+ [pyenv-hooks:9] '[' which = --complete ']'\n+ [pyenv-hooks:18] PYENV_COMMAND=which\n+ [pyenv-hooks:19] '[' -z which ']'\n+ [pyenv-hooks:24] enable -f /home/lealwern/.pyenv/libexec/pyenv-realpath.dylib realpath\n+ [pyenv-hooks:25] '[' -n '' ']'\n++ [pyenv-hooks:29] type -p greadlink readlink\n++ [pyenv-hooks:29] head -1\n+ [pyenv-hooks:29] READLINK=/bin/readlink\n+ [pyenv-hooks:30] '[' -z /bin/readlink ']'\n+ [pyenv-hooks:55] IFS=:\n+ [pyenv-hooks:55] hook_paths=($PYENV_HOOK_PATH)\n+ [pyenv-hooks:57] shopt -s nullglob\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:59] for script in '\"$path/$PYENV_COMMAND\"/*.bash'\n+ [pyenv-hooks:60] realpath /home/lealwern/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which/conda.bash\n+ [pyenv-hooks:40] local path=/home/lealwern/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which/conda.bash\n+ [pyenv-hooks:41] local name\n+ [pyenv-hooks:44] '[' -n /home/lealwern/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which/conda.bash ']'\n+ [pyenv-hooks:45] name=conda.bash\n+ [pyenv-hooks:46] '[' conda.bash = /home/lealwern/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which/conda.bash ']'\n+ [pyenv-hooks:46] cd /home/lealwern/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which\n++ [pyenv-hooks:47] resolve_link conda.bash\n++ [pyenv-hooks:36] /bin/readlink conda.bash\n++ [pyenv-hooks:47] true\n+ [pyenv-hooks:47] path=\n+ [pyenv-hooks:44] '[' -n '' ']'\n+ [pyenv-hooks:50] echo /home/lealwern/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which/conda.bash\n+ [pyenv-hooks:59] for script in '\"$path/$PYENV_COMMAND\"/*.bash'\n+ [pyenv-hooks:60] realpath /home/lealwern/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which/python-config.bash\n+ [pyenv-hooks:40] local path=/home/lealwern/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which/python-config.bash\n+ [pyenv-hooks:41] local name\n+ [pyenv-hooks:44] '[' -n /home/lealwern/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which/python-config.bash ']'\n+ [pyenv-hooks:45] name=python-config.bash\n+ [pyenv-hooks:46] '[' python-config.bash = /home/lealwern/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which/python-config.bash ']'\n+ [pyenv-hooks:46] cd /home/lealwern/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which\n++ [pyenv-hooks:47] resolve_link python-config.bash\n++ [pyenv-hooks:36] /bin/readlink python-config.bash\n++ [pyenv-hooks:47] true\n+ [pyenv-hooks:47] path=\n+ [pyenv-hooks:44] '[' -n '' ']'\n+ [pyenv-hooks:50] echo /home/lealwern/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which/python-config.bash\n+ [pyenv-hooks:59] for script in '\"$path/$PYENV_COMMAND\"/*.bash'\n+ [pyenv-hooks:60] realpath /home/lealwern/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which/system-site-packages.bash\n+ [pyenv-hooks:40] local path=/home/lealwern/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which/system-site-packages.bash\n+ [pyenv-hooks:41] local name\n+ [pyenv-hooks:44] '[' -n /home/lealwern/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which/system-site-packages.bash ']'\n+ [pyenv-hooks:45] name=system-site-packages.bash\n+ [pyenv-hooks:46] '[' system-site-packages.bash = /home/lealwern/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which/system-site-packages.bash ']'\n+ [pyenv-hooks:46] cd /home/lealwern/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which\n++ [pyenv-hooks:47] resolve_link system-site-packages.bash\n++ [pyenv-hooks:36] /bin/readlink system-site-packages.bash\n++ [pyenv-hooks:47] true\n+ [pyenv-hooks:47] path=\n+ [pyenv-hooks:44] '[' -n '' ']'\n+ [pyenv-hooks:50] echo /home/lealwern/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which/system-site-packages.bash\n+ [pyenv-hooks:63] shopt -u nullglob\n+ [pyenv-which:55] IFS='    \n'\n+ [pyenv-which:56] for script in '\"${scripts[@]}\"'\n+ [pyenv-which:57] source /home/lealwern/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which/conda.bash\n++ [conda.bash:4] '[' '!' -x /home/lealwern/.pyenv/versions/kitt36/bin/python3.6 ']'\n++ [conda.bash:4] [[ python3.6 == \\c\\o\\n\\d\\a ]]\n+ [pyenv-which:56] for script in '\"${scripts[@]}\"'\n+ [pyenv-which:57] source /home/lealwern/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which/python-config.bash\n++ [python-config.bash:6] '[' '!' -x /home/lealwern/.pyenv/versions/kitt36/bin/python3.6 ']'\n++ [python-config.bash:6] [[ python3.6 == \\p\\y\\t\\h\\o\\n*\\-\\c\\o\\n\\f\\i\\g ]]\n+ [pyenv-which:56] for script in '\"${scripts[@]}\"'\n+ [pyenv-which:57] source /home/lealwern/.pyenv/plugins/pyenv-virtualenv/etc/pyenv.d/which/system-site-packages.bash\n++ [system-site-packages.bash:6] '[' '!' -x /home/lealwern/.pyenv/versions/kitt36/bin/python3.6 ']'\n++ [system-site-packages.bash:7] OLDIFS='   \n'\n++ [system-site-packages.bash:8] IFS=:\n+++ [system-site-packages.bash:9] pyenv-version-name\n+ [pyenv-version-name:6] '[' -z kitt36 ']'\n+ [pyenv-version-name:11] OLDIFS='  \n'\n+ [pyenv-version-name:12] IFS='\n'\n+ [pyenv-version-name:12] scripts=(pyenv-hooks version-name`)\n++ [pyenv-version-name:12] pyenv-hooks version-name\n+ [pyenv-hooks:9] '[' version-name = --complete ']'\n+ [pyenv-hooks:18] PYENV_COMMAND=version-name\n+ [pyenv-hooks:19] '[' -z version-name ']'\n+ [pyenv-hooks:24] enable -f /home/lealwern/.pyenv/libexec/pyenv-realpath.dylib realpath\n+ [pyenv-hooks:25] '[' -n '' ']'\n++ [pyenv-hooks:29] type -p greadlink readlink\n++ [pyenv-hooks:29] head -1\n+ [pyenv-hooks:29] READLINK=/bin/readlink\n+ [pyenv-hooks:30] '[' -z /bin/readlink ']'\n+ [pyenv-hooks:55] IFS=:\n+ [pyenv-hooks:55] hook_paths=($PYENV_HOOK_PATH)\n+ [pyenv-hooks:57] shopt -s nullglob\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:58] for path in '\"${hook_paths[@]}\"'\n+ [pyenv-hooks:63] shopt -u nullglob\n+ [pyenv-version-name:13] IFS='   \n'\n+ [pyenv-version-name:18] '[' -z kitt36 ']'\n+ [pyenv-version-name:18] '[' kitt36 = system ']'\n+ [pyenv-version-name:28] versions=()\n+ [pyenv-version-name:29] OLDIFS='\n'\n+ [pyenv-version-name:30] IFS=:\n+ [pyenv-version-name:31] any_not_installed=0\n+ [pyenv-version-name:32] for version in '${PYENV_VERSION}'\n+ [pyenv-version-name:33] version_exists kitt36\n+ [pyenv-version-name:24] local version=kitt36\n+ [pyenv-version-name:25] '[' -d /home/lealwern/.pyenv/versions/kitt36 ']'\n+ [pyenv-version-name:34] versions=(\"${versions[@]}\" \"${version}\")\n+ [pyenv-version-name:43] IFS='   \n'\n+ [pyenv-version-name:45] OLDIFS='\n'\n+ [pyenv-version-name:46] IFS=:\n+ [pyenv-version-name:47] echo kitt36\n+ [pyenv-version-name:49] IFS='   \n'\n+ [pyenv-version-name:51] '[' 0 = 1 ']'\n++ [system-site-packages.bash:9] version=kitt36\n++ [system-site-packages.bash:10] IFS='   \n'\n++ [system-site-packages.bash:11] '[' -f /home/lealwern/.pyenv/versions/kitt36/bin/activate ']'\n++ [system-site-packages.bash:12] unset include_system_site_packages\n++ [system-site-packages.bash:13] '[' -f /home/lealwern/.pyenv/versions/kitt36/bin/conda ']'\n++ [system-site-packages.bash:16] '[' -f /home/lealwern/.pyenv/versions/kitt36/pyvenv.cfg ']'\n+++ [system-site-packages.bash:18] cut -b 1-1024 /home/lealwern/.pyenv/versions/kitt36/pyvenv.cfg\n+++ [system-site-packages.bash:18] sed -n '/^ home = /s///p'\n++ [system-site-packages.bash:18] virtualenv_binpath=/home/lealwern/.pyenv/versions/3.6.7/bin\n++ [system-site-packages.bash:19] virtualenv_prefix=/home/lealwern/.pyenv/versions/3.6.7\n++ [system-site-packages.bash:20] grep -q -i 'include-system-site-packages = true' /home/lealwern/.pyenv/versions/kitt36/pyvenv.cfg\n++ [system-site-packages.bash:45] '[' -n '' ']'\n+ [pyenv-which:60] '[' -x /home/lealwern/.pyenv/versions/kitt36/bin/python3.6 ']'\n+ [pyenv-which:63] any_not_installed=0\n+ [pyenv-which:64] for version in '\"${versions[@]}\"'\n+ [pyenv-which:65] '[' kitt36 = system ']'\n+ [pyenv-which:68] '[' -d /home/lealwern/.pyenv/versions/kitt36 ']'\n+ [pyenv-which:73] '[' 0 = 1 ']'\n+ [pyenv-which:77] echo 'pyenv: python3.6: command not found'\npyenv: python3.6: command not found\n++ [pyenv-which:79] pyenv-whence python3.6\n+ [pyenv-whence:9] '[' python3.6 = --complete ']'\n+ [pyenv-whence:14] '[' python3.6 = --path ']'\n+ [pyenv-whence:18] print_paths=\n+ [pyenv-whence:31] PYENV_COMMAND=python3.6\n+ [pyenv-whence:32] '[' -z python3.6 ']'\n++ [pyenv-whence:37] whence python3.6\n++ [pyenv-whence:22] local command=python3.6\n++ [pyenv-whence:23] pyenv-versions --bare\n++ [pyenv-whence:23] read -r version\n+ [pyenv-versions:10] unset bare\n+ [pyenv-versions:11] unset skip_aliases\n+ [pyenv-versions:13] for arg in '\"$@\"'\n+ [pyenv-versions:14] case \"$arg\" in\n+ [pyenv-versions:19] bare=1\n+ [pyenv-versions:28] versions_dir=/home/lealwern/.pyenv/versions\n+ [pyenv-versions:30] enable -f /home/lealwern/.pyenv/libexec/pyenv-realpath.dylib realpath\n+ [pyenv-versions:31] '[' -n '' ']'\n++ [pyenv-versions:36] type -p greadlink readlink\n++ [pyenv-versions:36] head -1\n+ [pyenv-versions:36] READLINK=/bin/readlink\n+ [pyenv-versions:37] '[' -z /bin/readlink ']'\n+ [pyenv-versions:63] '[' -d /home/lealwern/.pyenv/versions ']'\n++ [pyenv-versions:64] realpath /home/lealwern/.pyenv/versions\n++ [pyenv-versions:47] local path=/home/lealwern/.pyenv/versions\n++ [pyenv-versions:48] local name\n++ [pyenv-versions:52] '[' -n /home/lealwern/.pyenv/versions ']'\n++ [pyenv-versions:53] name=versions\n++ [pyenv-versions:54] '[' versions = /home/lealwern/.pyenv/versions ']'\n++ [pyenv-versions:54] cd /home/lealwern/.pyenv\n+++ [pyenv-versions:55] resolve_link versions\n+++ [pyenv-versions:43] /bin/readlink versions\n+++ [pyenv-versions:55] true\n++ [pyenv-versions:55] path=\n++ [pyenv-versions:52] '[' -n '' ']'\n++ [pyenv-versions:58] echo /home/lealwern/.pyenv/versions\n+ [pyenv-versions:64] versions_dir=/home/lealwern/.pyenv/versions\n+ [pyenv-versions:67] '[' -n 1 ']'\n+ [pyenv-versions:68] hit_prefix=\n+ [pyenv-versions:69] miss_prefix=\n+ [pyenv-versions:70] current_versions=()\n+ [pyenv-versions:71] include_system=\n+ [pyenv-versions:81] num_versions=0\n+ [pyenv-versions:105] '[' -n '' ']'\n+ [pyenv-versions:109] shopt -s nullglob\n+ [pyenv-versions:110] for path in '\"$versions_dir\"/'\n+ [pyenv-versions:111] '[' -d /home/lealwern/.pyenv/versions/3.5.6 ']'\n+ [pyenv-versions:112] '[' -n '' ']'\n+ [pyenv-versions:117] print_version 3.5.6\n+ [pyenv-versions:96] exists 3.5.6\n+ [pyenv-versions:84] local car=3.5.6\n+ [pyenv-versions:85] local cdar\n+ [pyenv-versions:86] shift\n+ [pyenv-versions:92] return 1\n+ [pyenv-versions:99] echo 3.5.6\n+ [pyenv-versions:101] num_versions=1\n+ [pyenv-versions:119] for env_path in '\"${path}/envs/\"'\n+ [pyenv-versions:120] '[' -d /home/lealwern/.pyenv/versions/3.5.6/envs/kitt35 ']'\n+ [pyenv-versions:121] print_version 3.5.6/envs/kitt35\n+ [pyenv-versions:96] exists 3.5.6/envs/kitt35\n+ [pyenv-versions:84] local car=3.5.6/envs/kitt35\n+ [pyenv-versions:85] local cdar\n+ [pyenv-versions:86] shift\n+ [pyenv-versions:92] return 1\n+ [pyenv-versions:99] echo 3.5.6/envs/kitt35\n+ [pyenv-versions:101] num_versions=2\n+ [pyenv-versions:110] for path in '\"$versions_dir\"/'\n+ [pyenv-versions:111] '[' -d /home/lealwern/.pyenv/versions/3.6.7 ']'\n+ [pyenv-versions:112] '[' -n '' ']'\n+ [pyenv-versions:117] print_version 3.6.7\n+++ [pyenv-whence:24] pyenv-prefix 3.5.6\n+ [pyenv-versions:96] exists 3.6.7\n+ [pyenv-versions:84] local car=3.6.7\n+ [pyenv-versions:85] local cdar\n+ [pyenv-versions:86] shift\n+ [pyenv-versions:92] return 1\n+ [pyenv-versions:99] echo 3.6.7\n+ [pyenv-versions:101] num_versions=3\n+ [pyenv-versions:119] for env_path in '\"${path}/envs/\"'\n+ [pyenv-versions:120] '[' -d /home/lealwern/.pyenv/versions/3.6.7/envs/kitt36 ']'\n+ [pyenv-versions:121] print_version 3.6.7/envs/kitt36\n+ [pyenv-versions:96] exists 3.6.7/envs/kitt36\n+ [pyenv-versions:84] local car=3.6.7/envs/kitt36\n+ [pyenv-versions:85] local cdar\n+ [pyenv-versions:86] shift\n+ [pyenv-versions:92] return 1\n+ [pyenv-versions:99] echo 3.6.7/envs/kitt36\n+ [pyenv-versions:101] num_versions=4\n+ [pyenv-versions:119] for env_path in '\"${path}/envs/\"'\n+ [pyenv-versions:120] '[' -d /home/lealwern/.pyenv/versions/3.6.7/envs/neokitt36 ']'\n+ [pyenv-versions:121] print_version 3.6.7/envs/neokitt36\n+ [pyenv-versions:96] exists 3.6.7/envs/neokitt36\n+ [pyenv-versions:84] local car=3.6.7/envs/neokitt36\n+ [pyenv-versions:85] local cdar\n+ [pyenv-versions:86] shift\n+ [pyenv-versions:92] return 1\n+ [pyenv-versions:99] echo 3.6.7/envs/neokitt36\n+ [pyenv-versions:101] num_versions=5\n+ [pyenv-versions:110] for path in '\"$versions_dir\"/'\n+ [pyenv-versions:111] '[' -d /home/lealwern/.pyenv/versions/3.6-dev ']'\n+ [pyenv-versions:112] '[' -n '' ']'\n+ [pyenv-versions:117] print_version 3.6-dev\n+ [pyenv-versions:96] exists 3.6-dev\n+ [pyenv-versions:84] local car=3.6-dev\n+ [pyenv-versions:85] local cdar\n+ [pyenv-versions:86] shift\n+ [pyenv-versions:92] return 1\n+ [pyenv-versions:99] echo 3.6-dev\n+ [pyenv-versions:101] num_versions=6\n+ [pyenv-versions:110] for path in '\"$versions_dir\"/'\n+ [pyenv-versions:111] '[' -d /home/lealwern/.pyenv/versions/3.7.0 ']'\n+ [pyenv-versions:112] '[' -n '' ']'\n+ [pyenv-versions:117] print_version 3.7.0\n+ [pyenv-versions:96] exists 3.7.0\n+ [pyenv-versions:84] local car=3.7.0\n+ [pyenv-versions:85] local cdar\n+ [pyenv-versions:86] shift\n+ [pyenv-versions:92] return 1\n+ [pyenv-versions:99] echo 3.7.0\n+ [pyenv-versions:101] num_versions=7\n+ [pyenv-versions:119] for env_path in '\"${path}/envs/\"'\n+ [pyenv-versions:120] '[' -d /home/lealwern/.pyenv/versions/3.7.0/envs/delri ']'\n+ [pyenv-versions:121] print_version 3.7.0/envs/delri\n+ [pyenv-versions:96] exists 3.7.0/envs/delri\n+ [pyenv-versions:84] local car=3.7.0/envs/delri\n+ [pyenv-versions:85] local cdar\n+ [pyenv-versions:86] shift\n+ [pyenv-versions:92] return 1\n+ [pyenv-versions:99] echo 3.7.0/envs/delri\n+ [pyenv-versions:101] num_versions=8\n+ [pyenv-versions:119] for env_path in '\"${path}/envs/\"'\n+ [pyenv-versions:120] '[' -d /home/lealwern/.pyenv/versions/3.7.0/envs/kitt37 ']'\n+ [pyenv-versions:121] print_version 3.7.0/envs/kitt37\n+ [pyenv-versions:96] exists 3.7.0/envs/kitt37\n+ [pyenv-versions:84] local car=3.7.0/envs/kitt37\n+ [pyenv-versions:85] local cdar\n+ [pyenv-versions:86] shift\n+ [pyenv-versions:92] return 1\n+ [pyenv-versions:99] echo 3.7.0/envs/kitt37\n+ [pyenv-versions:101] num_versions=9\n+ [pyenv-versions:110] for path in '\"$versions_dir\"/'\n+ [pyenv-versions:111] '[' -d /home/lealwern/.pyenv/versions/3.7.1 ']'\n+ [pyenv-versions:112] '[' -n '' ']'\n+ [pyenv-versions:117] print_version 3.7.1\n+ [pyenv-versions:96] exists 3.7.1\n+ [pyenv-versions:84] local car=3.7.1\n+ [pyenv-versions:85] local cdar\n+ [pyenv-versions:86] shift\n+ [pyenv-versions:92] return 1\n+ [pyenv-versions:99] echo 3.7.1\n+ [pyenv-versions:101] num_versions=10\n+ [pyenv-versions:119] for env_path in '\"${path}/envs/\"'\n+ [pyenv-versions:120] '[' -d /home/lealwern/.pyenv/versions/3.7.1/envs/ju ']'\n+ [pyenv-versions:121] print_version 3.7.1/envs/ju\n+ [pyenv-versions:96] exists 3.7.1/envs/ju\n+ [pyenv-versions:84] local car=3.7.1/envs/ju\n+ [pyenv-versions:85] local cdar\n+ [pyenv-versions:86] shift\n+ [pyenv-versions:92] return 1\n+ [pyenv-versions:99] echo 3.7.1/envs/ju\n+ [pyenv-versions:101] num_versions=11\n+ [pyenv-versions:110] for path in '\"$versions_dir\"/'\n+ [pyenv-versions:111] '[' -d /home/lealwern/.pyenv/versions/delri ']'\n+ [pyenv-versions:112] '[' -n '' ']'\n+ [pyenv-versions:117] print_version delri\n+ [pyenv-versions:96] exists delri\n+ [pyenv-prefix:13] '[' 3.5.6 = --complete ']'\n+ [pyenv-versions:84] local car=delri\n+ [pyenv-versions:85] local cdar\n+ [pyenv-versions:86] shift\n+ [pyenv-versions:92] return 1\n+ [pyenv-prefix:18] '[' -n 3.5.6 ']'\n+ [pyenv-versions:99] echo delri\n+ [pyenv-versions:101] num_versions=12\n+ [pyenv-prefix:19] OLDIFS='  \n'\n+ [pyenv-prefix:20] IFS=:\n+ [pyenv-versions:110] for path in '\"$versions_dir\"/'\n+ [pyenv-prefix:21] export PYENV_VERSION=3.5.6\n+ [pyenv-versions:111] '[' -d /home/lealwern/.pyenv/versions/ju ']'\n+ [pyenv-prefix:21] PYENV_VERSION=3.5.6\n+ [pyenv-versions:112] '[' -n '' ']'\n+ [pyenv-prefix:23] IFS=' \n'\n+ [pyenv-versions:117] print_version ju\n+ [pyenv-prefix:28] PYENV_PREFIX_PATHS=()\n+ [pyenv-versions:96] exists ju\n+ [pyenv-prefix:29] OLDIFS='  \n'\n+ [pyenv-versions:84] local car=ju\n+ [pyenv-versions:85] local cdar\n+ [pyenv-versions:86] shift\n+ [pyenv-versions:92] return 1\n+ [pyenv-versions:99] echo ju\n+ [pyenv-versions:101] num_versions=13\n+ [pyenv-versions:110] for path in '\"$versions_dir\"/'\n+ [pyenv-prefix:30] IFS=:\n+ [pyenv-versions:111] '[' -d /home/lealwern/.pyenv/versions/kitt35 ']'\n+ [pyenv-prefix:31] for version in '${PYENV_VERSION}'\n+ [pyenv-versions:112] '[' -n '' ']'\n+ [pyenv-prefix:32] '[' 3.5.6 = system ']'\n+ [pyenv-versions:117] print_version kitt35\n+ [pyenv-prefix:41] PYENV_PREFIX_PATH=/home/lealwern/.pyenv/versions/3.5.6\n+ [pyenv-versions:96] exists kitt35\n+ [pyenv-versions:84] local car=kitt35\n+ [pyenv-prefix:43] '[' -d /home/lealwern/.pyenv/versions/3.5.6 ']'\n+ [pyenv-versions:85] local cdar\n+ [pyenv-prefix:44] PYENV_PREFIX_PATHS=(\"${PYENV_PREFIX_PATHS[@]}\" \"$PYENV_PREFIX_PATH\")\n+ [pyenv-versions:86] shift\n+ [pyenv-versions:92] return 1\n+ [pyenv-versions:99] echo kitt35\n+ [pyenv-prefix:51] IFS=' \n'\n+ [pyenv-versions:101] num_versions=14\n+ [pyenv-prefix:53] OLDIFS='  \n'\n+ [pyenv-versions:110] for path in '\"$versions_dir\"/'\n+ [pyenv-prefix:54] IFS=:\n+ [pyenv-versions:111] '[' -d /home/lealwern/.pyenv/versions/kitt36 ']'\n+ [pyenv-prefix:55] echo /home/lealwern/.pyenv/versions/3.5.6\n+ [pyenv-versions:112] '[' -n '' ']'\n+ [pyenv-versions:117] print_version kitt36\n+ [pyenv-prefix:57] IFS=' \n'\n+ [pyenv-versions:96] exists kitt36\n+ [pyenv-versions:84] local car=kitt36\n+ [pyenv-versions:85] local cdar\n+ [pyenv-versions:86] shift\n+ [pyenv-versions:92] return 1\n+ [pyenv-versions:99] echo kitt36\n+ [pyenv-versions:101] num_versions=15\n+ [pyenv-versions:110] for path in '\"$versions_dir\"/'\n+ [pyenv-versions:111] '[' -d /home/lealwern/.pyenv/versions/kitt37 ']'\n+ [pyenv-versions:112] '[' -n '' ']'\n+ [pyenv-versions:117] print_version kitt37\n+ [pyenv-versions:96] exists kitt37\n+ [pyenv-versions:84] local car=kitt37\n+ [pyenv-versions:85] local cdar\n+ [pyenv-versions:86] shift\n+ [pyenv-versions:92] return 1\n+ [pyenv-versions:99] echo kitt37\n+ [pyenv-versions:101] num_versions=16\n++ [pyenv-whence:24] path=/home/lealwern/.pyenv/versions/3.5.6/bin/python3.6\n+ [pyenv-versions:110] for path in '\"$versions_dir\"/'\n+ [pyenv-versions:111] '[' -d /home/lealwern/.pyenv/versions/neokitt36 ']'\n++ [pyenv-whence:25] '[' -x /home/lealwern/.pyenv/versions/3.5.6/bin/python3.6 ']'\n+ [pyenv-versions:112] '[' -n '' ']'\n+ [pyenv-versions:117] print_version neokitt36\n++ [pyenv-whence:23] read -r version\n+ [pyenv-versions:96] exists neokitt36\n+ [pyenv-versions:84] local car=neokitt36\n+ [pyenv-versions:85] local cdar\n+ [pyenv-versions:86] shift\n+ [pyenv-versions:92] return 1\n+ [pyenv-versions:99] echo neokitt36\n+ [pyenv-versions:101] num_versions=17\n+ [pyenv-versions:126] shopt -u nullglob\n+ [pyenv-versions:128] '[' 17 -eq 0 ']'\n+++ [pyenv-whence:24] pyenv-prefix 3.5.6/envs/kitt35\n+ [pyenv-prefix:13] '[' 3.5.6/envs/kitt35 = --complete ']'\n+ [pyenv-prefix:18] '[' -n 3.5.6/envs/kitt35 ']'\n+ [pyenv-prefix:19] OLDIFS='  \n'\n+ [pyenv-prefix:20] IFS=:\n+ [pyenv-prefix:21] export PYENV_VERSION=3.5.6/envs/kitt35\n+ [pyenv-prefix:21] PYENV_VERSION=3.5.6/envs/kitt35\n+ [pyenv-prefix:23] IFS=' \n'\n+ [pyenv-prefix:28] PYENV_PREFIX_PATHS=()\n+ [pyenv-prefix:29] OLDIFS='  \n'\n+ [pyenv-prefix:30] IFS=:\n+ [pyenv-prefix:31] for version in '${PYENV_VERSION}'\n+ [pyenv-prefix:32] '[' 3.5.6/envs/kitt35 = system ']'\n+ [pyenv-prefix:41] PYENV_PREFIX_PATH=/home/lealwern/.pyenv/versions/3.5.6/envs/kitt35\n+ [pyenv-prefix:43] '[' -d /home/lealwern/.pyenv/versions/3.5.6/envs/kitt35 ']'\n+ [pyenv-prefix:44] PYENV_PREFIX_PATHS=(\"${PYENV_PREFIX_PATHS[@]}\" \"$PYENV_PREFIX_PATH\")\n+ [pyenv-prefix:51] IFS=' \n'\n+ [pyenv-prefix:53] OLDIFS='  \n'\n+ [pyenv-prefix:54] IFS=:\n+ [pyenv-prefix:55] echo /home/lealwern/.pyenv/versions/3.5.6/envs/kitt35\n+ [pyenv-prefix:57] IFS=' \n'\n++ [pyenv-whence:24] path=/home/lealwern/.pyenv/versions/3.5.6/envs/kitt35/bin/python3.6\n++ [pyenv-whence:25] '[' -x /home/lealwern/.pyenv/versions/3.5.6/envs/kitt35/bin/python3.6 ']'\n++ [pyenv-whence:23] read -r version\n+++ [pyenv-whence:24] pyenv-prefix 3.6.7\n+ [pyenv-prefix:13] '[' 3.6.7 = --complete ']'\n+ [pyenv-prefix:18] '[' -n 3.6.7 ']'\n+ [pyenv-prefix:19] OLDIFS='  \n'\n+ [pyenv-prefix:20] IFS=:\n+ [pyenv-prefix:21] export PYENV_VERSION=3.6.7\n+ [pyenv-prefix:21] PYENV_VERSION=3.6.7\n+ [pyenv-prefix:23] IFS=' \n'\n+ [pyenv-prefix:28] PYENV_PREFIX_PATHS=()\n+ [pyenv-prefix:29] OLDIFS='  \n'\n+ [pyenv-prefix:30] IFS=:\n+ [pyenv-prefix:31] for version in '${PYENV_VERSION}'\n+ [pyenv-prefix:32] '[' 3.6.7 = system ']'\n+ [pyenv-prefix:41] PYENV_PREFIX_PATH=/home/lealwern/.pyenv/versions/3.6.7\n+ [pyenv-prefix:43] '[' -d /home/lealwern/.pyenv/versions/3.6.7 ']'\n+ [pyenv-prefix:44] PYENV_PREFIX_PATHS=(\"${PYENV_PREFIX_PATHS[@]}\" \"$PYENV_PREFIX_PATH\")\n+ [pyenv-prefix:51] IFS=' \n'\n+ [pyenv-prefix:53] OLDIFS='  \n'\n+ [pyenv-prefix:54] IFS=:\n+ [pyenv-prefix:55] echo /home/lealwern/.pyenv/versions/3.6.7\n+ [pyenv-prefix:57] IFS=' \n'\n++ [pyenv-whence:24] path=/home/lealwern/.pyenv/versions/3.6.7/bin/python3.6\n++ [pyenv-whence:25] '[' -x /home/lealwern/.pyenv/versions/3.6.7/bin/python3.6 ']'\n++ [pyenv-whence:26] '[' '' ']'\n++ [pyenv-whence:26] echo 3.6.7\n++ [pyenv-whence:23] read -r version\n+++ [pyenv-whence:24] pyenv-prefix 3.6.7/envs/kitt36\n+ [pyenv-prefix:13] '[' 3.6.7/envs/kitt36 = --complete ']'\n+ [pyenv-prefix:18] '[' -n 3.6.7/envs/kitt36 ']'\n+ [pyenv-prefix:19] OLDIFS='  \n'\n+ [pyenv-prefix:20] IFS=:\n+ [pyenv-prefix:21] export PYENV_VERSION=3.6.7/envs/kitt36\n+ [pyenv-prefix:21] PYENV_VERSION=3.6.7/envs/kitt36\n+ [pyenv-prefix:23] IFS=' \n'\n+ [pyenv-prefix:28] PYENV_PREFIX_PATHS=()\n+ [pyenv-prefix:29] OLDIFS='  \n'\n+ [pyenv-prefix:30] IFS=:\n+ [pyenv-prefix:31] for version in '${PYENV_VERSION}'\n+ [pyenv-prefix:32] '[' 3.6.7/envs/kitt36 = system ']'\n+ [pyenv-prefix:41] PYENV_PREFIX_PATH=/home/lealwern/.pyenv/versions/3.6.7/envs/kitt36\n+ [pyenv-prefix:43] '[' -d /home/lealwern/.pyenv/versions/3.6.7/envs/kitt36 ']'\n+ [pyenv-prefix:44] PYENV_PREFIX_PATHS=(\"${PYENV_PREFIX_PATHS[@]}\" \"$PYENV_PREFIX_PATH\")\n+ [pyenv-prefix:51] IFS=' \n'\n+ [pyenv-prefix:53] OLDIFS='  \n'\n+ [pyenv-prefix:54] IFS=:\n+ [pyenv-prefix:55] echo /home/lealwern/.pyenv/versions/3.6.7/envs/kitt36\n+ [pyenv-prefix:57] IFS=' \n'\n++ [pyenv-whence:24] path=/home/lealwern/.pyenv/versions/3.6.7/envs/kitt36/bin/python3.6\n++ [pyenv-whence:25] '[' -x /home/lealwern/.pyenv/versions/3.6.7/envs/kitt36/bin/python3.6 ']'\n++ [pyenv-whence:23] read -r version\n+++ [pyenv-whence:24] pyenv-prefix 3.6.7/envs/neokitt36\n+ [pyenv-prefix:13] '[' 3.6.7/envs/neokitt36 = --complete ']'\n+ [pyenv-prefix:18] '[' -n 3.6.7/envs/neokitt36 ']'\n+ [pyenv-prefix:19] OLDIFS='  \n'\n+ [pyenv-prefix:20] IFS=:\n+ [pyenv-prefix:21] export PYENV_VERSION=3.6.7/envs/neokitt36\n+ [pyenv-prefix:21] PYENV_VERSION=3.6.7/envs/neokitt36\n+ [pyenv-prefix:23] IFS=' \n'\n+ [pyenv-prefix:28] PYENV_PREFIX_PATHS=()\n+ [pyenv-prefix:29] OLDIFS='  \n'\n+ [pyenv-prefix:30] IFS=:\n+ [pyenv-prefix:31] for version in '${PYENV_VERSION}'\n+ [pyenv-prefix:32] '[' 3.6.7/envs/neokitt36 = system ']'\n+ [pyenv-prefix:41] PYENV_PREFIX_PATH=/home/lealwern/.pyenv/versions/3.6.7/envs/neokitt36\n+ [pyenv-prefix:43] '[' -d /home/lealwern/.pyenv/versions/3.6.7/envs/neokitt36 ']'\n+ [pyenv-prefix:44] PYENV_PREFIX_PATHS=(\"${PYENV_PREFIX_PATHS[@]}\" \"$PYENV_PREFIX_PATH\")\n+ [pyenv-prefix:51] IFS=' \n'\n+ [pyenv-prefix:53] OLDIFS='  \n'\n+ [pyenv-prefix:54] IFS=:\n+ [pyenv-prefix:55] echo /home/lealwern/.pyenv/versions/3.6.7/envs/neokitt36\n+ [pyenv-prefix:57] IFS=' \n'\n++ [pyenv-whence:24] path=/home/lealwern/.pyenv/versions/3.6.7/envs/neokitt36/bin/python3.6\n++ [pyenv-whence:25] '[' -x /home/lealwern/.pyenv/versions/3.6.7/envs/neokitt36/bin/python3.6 ']'\n++ [pyenv-whence:23] read -r version\n+++ [pyenv-whence:24] pyenv-prefix 3.6-dev\n+ [pyenv-prefix:13] '[' 3.6-dev = --complete ']'\n+ [pyenv-prefix:18] '[' -n 3.6-dev ']'\n+ [pyenv-prefix:19] OLDIFS='  \n'\n+ [pyenv-prefix:20] IFS=:\n+ [pyenv-prefix:21] export PYENV_VERSION=3.6-dev\n+ [pyenv-prefix:21] PYENV_VERSION=3.6-dev\n+ [pyenv-prefix:23] IFS=' \n'\n+ [pyenv-prefix:28] PYENV_PREFIX_PATHS=()\n+ [pyenv-prefix:29] OLDIFS='  \n'\n+ [pyenv-prefix:30] IFS=:\n+ [pyenv-prefix:31] for version in '${PYENV_VERSION}'\n+ [pyenv-prefix:32] '[' 3.6-dev = system ']'\n+ [pyenv-prefix:41] PYENV_PREFIX_PATH=/home/lealwern/.pyenv/versions/3.6-dev\n+ [pyenv-prefix:43] '[' -d /home/lealwern/.pyenv/versions/3.6-dev ']'\n+ [pyenv-prefix:44] PYENV_PREFIX_PATHS=(\"${PYENV_PREFIX_PATHS[@]}\" \"$PYENV_PREFIX_PATH\")\n+ [pyenv-prefix:51] IFS=' \n'\n+ [pyenv-prefix:53] OLDIFS='  \n'\n+ [pyenv-prefix:54] IFS=:\n+ [pyenv-prefix:55] echo /home/lealwern/.pyenv/versions/3.6-dev\n+ [pyenv-prefix:57] IFS=' \n'\n++ [pyenv-whence:24] path=/home/lealwern/.pyenv/versions/3.6-dev/bin/python3.6\n++ [pyenv-whence:25] '[' -x /home/lealwern/.pyenv/versions/3.6-dev/bin/python3.6 ']'\n++ [pyenv-whence:26] '[' '' ']'\n++ [pyenv-whence:26] echo 3.6-dev\n++ [pyenv-whence:23] read -r version\n+++ [pyenv-whence:24] pyenv-prefix 3.7.0\n+ [pyenv-prefix:13] '[' 3.7.0 = --complete ']'\n+ [pyenv-prefix:18] '[' -n 3.7.0 ']'\n+ [pyenv-prefix:19] OLDIFS='  \n'\n+ [pyenv-prefix:20] IFS=:\n+ [pyenv-prefix:21] export PYENV_VERSION=3.7.0\n+ [pyenv-prefix:21] PYENV_VERSION=3.7.0\n+ [pyenv-prefix:23] IFS=' \n'\n+ [pyenv-prefix:28] PYENV_PREFIX_PATHS=()\n+ [pyenv-prefix:29] OLDIFS='  \n'\n+ [pyenv-prefix:30] IFS=:\n+ [pyenv-prefix:31] for version in '${PYENV_VERSION}'\n+ [pyenv-prefix:32] '[' 3.7.0 = system ']'\n+ [pyenv-prefix:41] PYENV_PREFIX_PATH=/home/lealwern/.pyenv/versions/3.7.0\n+ [pyenv-prefix:43] '[' -d /home/lealwern/.pyenv/versions/3.7.0 ']'\n+ [pyenv-prefix:44] PYENV_PREFIX_PATHS=(\"${PYENV_PREFIX_PATHS[@]}\" \"$PYENV_PREFIX_PATH\")\n+ [pyenv-prefix:51] IFS=' \n'\n+ [pyenv-prefix:53] OLDIFS='  \n'\n+ [pyenv-prefix:54] IFS=:\n+ [pyenv-prefix:55] echo /home/lealwern/.pyenv/versions/3.7.0\n+ [pyenv-prefix:57] IFS=' \n'\n++ [pyenv-whence:24] path=/home/lealwern/.pyenv/versions/3.7.0/bin/python3.6\n++ [pyenv-whence:25] '[' -x /home/lealwern/.pyenv/versions/3.7.0/bin/python3.6 ']'\n++ [pyenv-whence:23] read -r version\n+++ [pyenv-whence:24] pyenv-prefix 3.7.0/envs/delri\n+ [pyenv-prefix:13] '[' 3.7.0/envs/delri = --complete ']'\n+ [pyenv-prefix:18] '[' -n 3.7.0/envs/delri ']'\n+ [pyenv-prefix:19] OLDIFS='  \n'\n+ [pyenv-prefix:20] IFS=:\n+ [pyenv-prefix:21] export PYENV_VERSION=3.7.0/envs/delri\n+ [pyenv-prefix:21] PYENV_VERSION=3.7.0/envs/delri\n+ [pyenv-prefix:23] IFS=' \n'\n+ [pyenv-prefix:28] PYENV_PREFIX_PATHS=()\n+ [pyenv-prefix:29] OLDIFS='  \n'\n+ [pyenv-prefix:30] IFS=:\n+ [pyenv-prefix:31] for version in '${PYENV_VERSION}'\n+ [pyenv-prefix:32] '[' 3.7.0/envs/delri = system ']'\n+ [pyenv-prefix:41] PYENV_PREFIX_PATH=/home/lealwern/.pyenv/versions/3.7.0/envs/delri\n+ [pyenv-prefix:43] '[' -d /home/lealwern/.pyenv/versions/3.7.0/envs/delri ']'\n+ [pyenv-prefix:44] PYENV_PREFIX_PATHS=(\"${PYENV_PREFIX_PATHS[@]}\" \"$PYENV_PREFIX_PATH\")\n+ [pyenv-prefix:51] IFS=' \n'\n+ [pyenv-prefix:53] OLDIFS='  \n'\n+ [pyenv-prefix:54] IFS=:\n+ [pyenv-prefix:55] echo /home/lealwern/.pyenv/versions/3.7.0/envs/delri\n+ [pyenv-prefix:57] IFS=' \n'\n++ [pyenv-whence:24] path=/home/lealwern/.pyenv/versions/3.7.0/envs/delri/bin/python3.6\n++ [pyenv-whence:25] '[' -x /home/lealwern/.pyenv/versions/3.7.0/envs/delri/bin/python3.6 ']'\n++ [pyenv-whence:23] read -r version\n+++ [pyenv-whence:24] pyenv-prefix 3.7.0/envs/kitt37\n+ [pyenv-prefix:13] '[' 3.7.0/envs/kitt37 = --complete ']'\n+ [pyenv-prefix:18] '[' -n 3.7.0/envs/kitt37 ']'\n+ [pyenv-prefix:19] OLDIFS='  \n'\n+ [pyenv-prefix:20] IFS=:\n+ [pyenv-prefix:21] export PYENV_VERSION=3.7.0/envs/kitt37\n+ [pyenv-prefix:21] PYENV_VERSION=3.7.0/envs/kitt37\n+ [pyenv-prefix:23] IFS=' \n'\n+ [pyenv-prefix:28] PYENV_PREFIX_PATHS=()\n+ [pyenv-prefix:29] OLDIFS='  \n'\n+ [pyenv-prefix:30] IFS=:\n+ [pyenv-prefix:31] for version in '${PYENV_VERSION}'\n+ [pyenv-prefix:32] '[' 3.7.0/envs/kitt37 = system ']'\n+ [pyenv-prefix:41] PYENV_PREFIX_PATH=/home/lealwern/.pyenv/versions/3.7.0/envs/kitt37\n+ [pyenv-prefix:43] '[' -d /home/lealwern/.pyenv/versions/3.7.0/envs/kitt37 ']'\n+ [pyenv-prefix:44] PYENV_PREFIX_PATHS=(\"${PYENV_PREFIX_PATHS[@]}\" \"$PYENV_PREFIX_PATH\")\n+ [pyenv-prefix:51] IFS=' \n'\n+ [pyenv-prefix:53] OLDIFS='  \n'\n+ [pyenv-prefix:54] IFS=:\n+ [pyenv-prefix:55] echo /home/lealwern/.pyenv/versions/3.7.0/envs/kitt37\n+ [pyenv-prefix:57] IFS=' \n'\n++ [pyenv-whence:24] path=/home/lealwern/.pyenv/versions/3.7.0/envs/kitt37/bin/python3.6\n++ [pyenv-whence:25] '[' -x /home/lealwern/.pyenv/versions/3.7.0/envs/kitt37/bin/python3.6 ']'\n++ [pyenv-whence:23] read -r version\n+++ [pyenv-whence:24] pyenv-prefix 3.7.1\n+ [pyenv-prefix:13] '[' 3.7.1 = --complete ']'\n+ [pyenv-prefix:18] '[' -n 3.7.1 ']'\n+ [pyenv-prefix:19] OLDIFS='  \n'\n+ [pyenv-prefix:20] IFS=:\n+ [pyenv-prefix:21] export PYENV_VERSION=3.7.1\n+ [pyenv-prefix:21] PYENV_VERSION=3.7.1\n+ [pyenv-prefix:23] IFS=' \n'\n+ [pyenv-prefix:28] PYENV_PREFIX_PATHS=()\n+ [pyenv-prefix:29] OLDIFS='  \n'\n+ [pyenv-prefix:30] IFS=:\n+ [pyenv-prefix:31] for version in '${PYENV_VERSION}'\n+ [pyenv-prefix:32] '[' 3.7.1 = system ']'\n+ [pyenv-prefix:41] PYENV_PREFIX_PATH=/home/lealwern/.pyenv/versions/3.7.1\n+ [pyenv-prefix:43] '[' -d /home/lealwern/.pyenv/versions/3.7.1 ']'\n+ [pyenv-prefix:44] PYENV_PREFIX_PATHS=(\"${PYENV_PREFIX_PATHS[@]}\" \"$PYENV_PREFIX_PATH\")\n+ [pyenv-prefix:51] IFS=' \n'\n+ [pyenv-prefix:53] OLDIFS='  \n'\n+ [pyenv-prefix:54] IFS=:\n+ [pyenv-prefix:55] echo /home/lealwern/.pyenv/versions/3.7.1\n+ [pyenv-prefix:57] IFS=' \n'\n++ [pyenv-whence:24] path=/home/lealwern/.pyenv/versions/3.7.1/bin/python3.6\n++ [pyenv-whence:25] '[' -x /home/lealwern/.pyenv/versions/3.7.1/bin/python3.6 ']'\n++ [pyenv-whence:23] read -r version\n+++ [pyenv-whence:24] pyenv-prefix 3.7.1/envs/ju\n+ [pyenv-prefix:13] '[' 3.7.1/envs/ju = --complete ']'\n+ [pyenv-prefix:18] '[' -n 3.7.1/envs/ju ']'\n+ [pyenv-prefix:19] OLDIFS='  \n'\n+ [pyenv-prefix:20] IFS=:\n+ [pyenv-prefix:21] export PYENV_VERSION=3.7.1/envs/ju\n+ [pyenv-prefix:21] PYENV_VERSION=3.7.1/envs/ju\n+ [pyenv-prefix:23] IFS=' \n'\n+ [pyenv-prefix:28] PYENV_PREFIX_PATHS=()\n+ [pyenv-prefix:29] OLDIFS='  \n'\n+ [pyenv-prefix:30] IFS=:\n+ [pyenv-prefix:31] for version in '${PYENV_VERSION}'\n+ [pyenv-prefix:32] '[' 3.7.1/envs/ju = system ']'\n+ [pyenv-prefix:41] PYENV_PREFIX_PATH=/home/lealwern/.pyenv/versions/3.7.1/envs/ju\n+ [pyenv-prefix:43] '[' -d /home/lealwern/.pyenv/versions/3.7.1/envs/ju ']'\n+ [pyenv-prefix:44] PYENV_PREFIX_PATHS=(\"${PYENV_PREFIX_PATHS[@]}\" \"$PYENV_PREFIX_PATH\")\n+ [pyenv-prefix:51] IFS=' \n'\n+ [pyenv-prefix:53] OLDIFS='  \n'\n+ [pyenv-prefix:54] IFS=:\n+ [pyenv-prefix:55] echo /home/lealwern/.pyenv/versions/3.7.1/envs/ju\n+ [pyenv-prefix:57] IFS=' \n'\n++ [pyenv-whence:24] path=/home/lealwern/.pyenv/versions/3.7.1/envs/ju/bin/python3.6\n++ [pyenv-whence:25] '[' -x /home/lealwern/.pyenv/versions/3.7.1/envs/ju/bin/python3.6 ']'\n++ [pyenv-whence:23] read -r version\n+++ [pyenv-whence:24] pyenv-prefix delri\n+ [pyenv-prefix:13] '[' delri = --complete ']'\n+ [pyenv-prefix:18] '[' -n delri ']'\n+ [pyenv-prefix:19] OLDIFS='  \n'\n+ [pyenv-prefix:20] IFS=:\n+ [pyenv-prefix:21] export PYENV_VERSION=delri\n+ [pyenv-prefix:21] PYENV_VERSION=delri\n+ [pyenv-prefix:23] IFS=' \n'\n+ [pyenv-prefix:28] PYENV_PREFIX_PATHS=()\n+ [pyenv-prefix:29] OLDIFS='  \n'\n+ [pyenv-prefix:30] IFS=:\n+ [pyenv-prefix:31] for version in '${PYENV_VERSION}'\n+ [pyenv-prefix:32] '[' delri = system ']'\n+ [pyenv-prefix:41] PYENV_PREFIX_PATH=/home/lealwern/.pyenv/versions/delri\n+ [pyenv-prefix:43] '[' -d /home/lealwern/.pyenv/versions/delri ']'\n+ [pyenv-prefix:44] PYENV_PREFIX_PATHS=(\"${PYENV_PREFIX_PATHS[@]}\" \"$PYENV_PREFIX_PATH\")\n+ [pyenv-prefix:51] IFS=' \n'\n+ [pyenv-prefix:53] OLDIFS='  \n'\n+ [pyenv-prefix:54] IFS=:\n+ [pyenv-prefix:55] echo /home/lealwern/.pyenv/versions/delri\n+ [pyenv-prefix:57] IFS=' \n'\n++ [pyenv-whence:24] path=/home/lealwern/.pyenv/versions/delri/bin/python3.6\n++ [pyenv-whence:25] '[' -x /home/lealwern/.pyenv/versions/delri/bin/python3.6 ']'\n++ [pyenv-whence:23] read -r version\n+++ [pyenv-whence:24] pyenv-prefix ju\n+ [pyenv-prefix:13] '[' ju = --complete ']'\n+ [pyenv-prefix:18] '[' -n ju ']'\n+ [pyenv-prefix:19] OLDIFS='  \n'\n+ [pyenv-prefix:20] IFS=:\n+ [pyenv-prefix:21] export PYENV_VERSION=ju\n+ [pyenv-prefix:21] PYENV_VERSION=ju\n+ [pyenv-prefix:23] IFS=' \n'\n+ [pyenv-prefix:28] PYENV_PREFIX_PATHS=()\n+ [pyenv-prefix:29] OLDIFS='  \n'\n+ [pyenv-prefix:30] IFS=:\n+ [pyenv-prefix:31] for version in '${PYENV_VERSION}'\n+ [pyenv-prefix:32] '[' ju = system ']'\n+ [pyenv-prefix:41] PYENV_PREFIX_PATH=/home/lealwern/.pyenv/versions/ju\n+ [pyenv-prefix:43] '[' -d /home/lealwern/.pyenv/versions/ju ']'\n+ [pyenv-prefix:44] PYENV_PREFIX_PATHS=(\"${PYENV_PREFIX_PATHS[@]}\" \"$PYENV_PREFIX_PATH\")\n+ [pyenv-prefix:51] IFS=' \n'\n+ [pyenv-prefix:53] OLDIFS='  \n'\n+ [pyenv-prefix:54] IFS=:\n+ [pyenv-prefix:55] echo /home/lealwern/.pyenv/versions/ju\n+ [pyenv-prefix:57] IFS=' \n'\n++ [pyenv-whence:24] path=/home/lealwern/.pyenv/versions/ju/bin/python3.6\n++ [pyenv-whence:25] '[' -x /home/lealwern/.pyenv/versions/ju/bin/python3.6 ']'\n++ [pyenv-whence:23] read -r version\n+++ [pyenv-whence:24] pyenv-prefix kitt35\n+ [pyenv-prefix:13] '[' kitt35 = --complete ']'\n+ [pyenv-prefix:18] '[' -n kitt35 ']'\n+ [pyenv-prefix:19] OLDIFS='  \n'\n+ [pyenv-prefix:20] IFS=:\n+ [pyenv-prefix:21] export PYENV_VERSION=kitt35\n+ [pyenv-prefix:21] PYENV_VERSION=kitt35\n+ [pyenv-prefix:23] IFS=' \n'\n+ [pyenv-prefix:28] PYENV_PREFIX_PATHS=()\n+ [pyenv-prefix:29] OLDIFS='  \n'\n+ [pyenv-prefix:30] IFS=:\n+ [pyenv-prefix:31] for version in '${PYENV_VERSION}'\n+ [pyenv-prefix:32] '[' kitt35 = system ']'\n+ [pyenv-prefix:41] PYENV_PREFIX_PATH=/home/lealwern/.pyenv/versions/kitt35\n+ [pyenv-prefix:43] '[' -d /home/lealwern/.pyenv/versions/kitt35 ']'\n+ [pyenv-prefix:44] PYENV_PREFIX_PATHS=(\"${PYENV_PREFIX_PATHS[@]}\" \"$PYENV_PREFIX_PATH\")\n+ [pyenv-prefix:51] IFS=' \n'\n+ [pyenv-prefix:53] OLDIFS='  \n'\n+ [pyenv-prefix:54] IFS=:\n+ [pyenv-prefix:55] echo /home/lealwern/.pyenv/versions/kitt35\n+ [pyenv-prefix:57] IFS=' \n'\n++ [pyenv-whence:24] path=/home/lealwern/.pyenv/versions/kitt35/bin/python3.6\n++ [pyenv-whence:25] '[' -x /home/lealwern/.pyenv/versions/kitt35/bin/python3.6 ']'\n++ [pyenv-whence:23] read -r version\n+++ [pyenv-whence:24] pyenv-prefix kitt36\n+ [pyenv-prefix:13] '[' kitt36 = --complete ']'\n+ [pyenv-prefix:18] '[' -n kitt36 ']'\n+ [pyenv-prefix:19] OLDIFS='  \n'\n+ [pyenv-prefix:20] IFS=:\n+ [pyenv-prefix:21] export PYENV_VERSION=kitt36\n+ [pyenv-prefix:21] PYENV_VERSION=kitt36\n+ [pyenv-prefix:23] IFS=' \n'\n+ [pyenv-prefix:28] PYENV_PREFIX_PATHS=()\n+ [pyenv-prefix:29] OLDIFS='  \n'\n+ [pyenv-prefix:30] IFS=:\n+ [pyenv-prefix:31] for version in '${PYENV_VERSION}'\n+ [pyenv-prefix:32] '[' kitt36 = system ']'\n+ [pyenv-prefix:41] PYENV_PREFIX_PATH=/home/lealwern/.pyenv/versions/kitt36\n+ [pyenv-prefix:43] '[' -d /home/lealwern/.pyenv/versions/kitt36 ']'\n+ [pyenv-prefix:44] PYENV_PREFIX_PATHS=(\"${PYENV_PREFIX_PATHS[@]}\" \"$PYENV_PREFIX_PATH\")\n+ [pyenv-prefix:51] IFS=' \n'\n+ [pyenv-prefix:53] OLDIFS='  \n'\n+ [pyenv-prefix:54] IFS=:\n+ [pyenv-prefix:55] echo /home/lealwern/.pyenv/versions/kitt36\n+ [pyenv-prefix:57] IFS=' \n'\n++ [pyenv-whence:24] path=/home/lealwern/.pyenv/versions/kitt36/bin/python3.6\n++ [pyenv-whence:25] '[' -x /home/lealwern/.pyenv/versions/kitt36/bin/python3.6 ']'\n++ [pyenv-whence:23] read -r version\n+++ [pyenv-whence:24] pyenv-prefix kitt37\n+ [pyenv-prefix:13] '[' kitt37 = --complete ']'\n+ [pyenv-prefix:18] '[' -n kitt37 ']'\n+ [pyenv-prefix:19] OLDIFS='  \n'\n+ [pyenv-prefix:20] IFS=:\n+ [pyenv-prefix:21] export PYENV_VERSION=kitt37\n+ [pyenv-prefix:21] PYENV_VERSION=kitt37\n+ [pyenv-prefix:23] IFS=' \n'\n+ [pyenv-prefix:28] PYENV_PREFIX_PATHS=()\n+ [pyenv-prefix:29] OLDIFS='  \n'\n+ [pyenv-prefix:30] IFS=:\n+ [pyenv-prefix:31] for version in '${PYENV_VERSION}'\n+ [pyenv-prefix:32] '[' kitt37 = system ']'\n+ [pyenv-prefix:41] PYENV_PREFIX_PATH=/home/lealwern/.pyenv/versions/kitt37\n+ [pyenv-prefix:43] '[' -d /home/lealwern/.pyenv/versions/kitt37 ']'\n+ [pyenv-prefix:44] PYENV_PREFIX_PATHS=(\"${PYENV_PREFIX_PATHS[@]}\" \"$PYENV_PREFIX_PATH\")\n+ [pyenv-prefix:51] IFS=' \n'\n+ [pyenv-prefix:53] OLDIFS='  \n'\n+ [pyenv-prefix:54] IFS=:\n+ [pyenv-prefix:55] echo /home/lealwern/.pyenv/versions/kitt37\n+ [pyenv-prefix:57] IFS=' \n'\n++ [pyenv-whence:24] path=/home/lealwern/.pyenv/versions/kitt37/bin/python3.6\n++ [pyenv-whence:25] '[' -x /home/lealwern/.pyenv/versions/kitt37/bin/python3.6 ']'\n++ [pyenv-whence:23] read -r version\n+++ [pyenv-whence:24] pyenv-prefix neokitt36\n+ [pyenv-prefix:13] '[' neokitt36 = --complete ']'\n+ [pyenv-prefix:18] '[' -n neokitt36 ']'\n+ [pyenv-prefix:19] OLDIFS='  \n'\n+ [pyenv-prefix:20] IFS=:\n+ [pyenv-prefix:21] export PYENV_VERSION=neokitt36\n+ [pyenv-prefix:21] PYENV_VERSION=neokitt36\n+ [pyenv-prefix:23] IFS=' \n'\n+ [pyenv-prefix:28] PYENV_PREFIX_PATHS=()\n+ [pyenv-prefix:29] OLDIFS='  \n'\n+ [pyenv-prefix:30] IFS=:\n+ [pyenv-prefix:31] for version in '${PYENV_VERSION}'\n+ [pyenv-prefix:32] '[' neokitt36 = system ']'\n+ [pyenv-prefix:41] PYENV_PREFIX_PATH=/home/lealwern/.pyenv/versions/neokitt36\n+ [pyenv-prefix:43] '[' -d /home/lealwern/.pyenv/versions/neokitt36 ']'\n+ [pyenv-prefix:44] PYENV_PREFIX_PATHS=(\"${PYENV_PREFIX_PATHS[@]}\" \"$PYENV_PREFIX_PATH\")\n+ [pyenv-prefix:51] IFS=' \n'\n+ [pyenv-prefix:53] OLDIFS='  \n'\n+ [pyenv-prefix:54] IFS=:\n+ [pyenv-prefix:55] echo /home/lealwern/.pyenv/versions/neokitt36\n+ [pyenv-prefix:57] IFS=' \n'\n++ [pyenv-whence:24] path=/home/lealwern/.pyenv/versions/neokitt36/bin/python3.6\n++ [pyenv-whence:25] '[' -x /home/lealwern/.pyenv/versions/neokitt36/bin/python3.6 ']'\n++ [pyenv-whence:23] read -r version\n+ [pyenv-whence:37] result='3.6.7\n3.6-dev'\n+ [pyenv-whence:38] '[' -n '3.6.7\n3.6-dev' ']'\n+ [pyenv-whence:38] echo '3.6.7\n3.6-dev'\n+ [pyenv-which:79] versions='3.6.7\n3.6-dev'\n+ [pyenv-which:80] '[' -n '3.6.7\n3.6-dev' ']'\n+ [pyenv-which:81] echo\n\n[pyenv-which:82] echo 'The python3.6'\\'' command exists in these Python versions:'\nThepython3.6' command exists in these Python versions:\n[pyenv-which:83] echo '3.6.7\n3.6-dev'\n[pyenv-which:83] sed 's/^/  /g'\n  3.6.7\n  3.6-dev\n\n[pyenv-which:84] echo\n\n\n[pyenv-which:88] exit 127\n\n[pyenv-exec:33] PYENV_COMMAND_PATH=\n```. \n",
    "davemo": "Hi @chaitanya11, I had this exact same problem today and was able to fix it by removing my manually installed version of pyenv using git, and reinstalling with brew install pyenv.\nOnce I had the homebrew version of pyenv installed my installation commands worked.\nI think the bug must be with assuming some context on the homebrew installation even for git cloned versions of pyenv. . ",
    "paugier": "Note that after pip3 install --upgrade pip, the command pip becomes available.... ",
    "bradwood": "brad@home:~! \u276f env | sort                                                                                      3.56s ~\nCLICOLOR=true\nCPPFLAGS=-I/usr/local/opt/ncurses/include\nEC2_HOME=/home/brad/bin/ec2-api-tools\nEDITOR=/usr/bin/nvim\nFTP_PASSIVE=1\nGOPATH=/home/brad/go\nGPG_TTY=/dev/pts/1\nHISTFILE=/home/brad/.history\nHISTSIZE=100000\nHOME=/home/brad\nJAVA_HOME=/usr/lib/jvm/jre-1.6.0-openjdk.x86_64\nLANG=en_US.UTF-8\nLANGUAGE=en_GB:en\nLC_CTYPE=en_US.UTF-8\nLC_TIME=en_AU.UTF-8\nLDFLAGS=-L/usr/local/opt/ncurses/lib\nLESS=iFMRSX\nLESSPROMPT=?f%f .?ltLine %lt:?pt%pt\\%:?btByte %bt:-...\nLESS_TERMCAP_mb=\nLESS_TERMCAP_md=\nLESS_TERMCAP_me=\nLESS_TERMCAP_se=\nLESS_TERMCAP_ue=\nLESS_TERMCAP_us=\nLOGNAME=brad\nMAIL=/var/mail/brad\nOLDPWD=/tmp\nPAGER=less\nPATH=/home/brad/.rbenv/shims:/home/brad/.pyenv/plugins/pyenv-virtualenv/shims:/home/brad/.pyenv/shims:/home/brad/.pyenv/bin:/home/brad/bin:/home/brad/.zsh/bin:/usr/local/bin:/usr/local/sbin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/brad/bin/ec2-api-tools/bin:/home/brad/.local/bin\nPIP_CONFIG_FILE=/home/brad/.config/pip/pip.conf\nPIP_DOWNLOAD_CACHE=/home/brad/.pip_cache\nPIPENV_CACHE_DIR=/home/brad/.pip_cache\nPIPENV_VERBOSITY=-1\nPKG_CONFIG_PATH=/usr/local/opt/ncurses/lib/pkgconfig\nPROJECT_HOME=/home/brad/Code\nPS1=%F{green}%n@%m%f%B:%b%F{blue}%B%1~%b%F{yellow}%B%(1j.*.)%(?..!)%b%f %B%F{red}\u276f%f%b\nPWD=/home/brad\nPYENV_SHELL=zsh\nPYENV_VIRTUALENV_INIT=1\nRBENV_SHELL=zsh\nRPROMPT=%F{cyan}%{%}3.56s%{%}%f ${vcs_info_msg_0_}%F{blue}%~%f\nSAVEHIST=100000\nSHELL=/usr/bin/zsh\nSHLVL=1\nSPROMPT=zsh: correct %F{red}'%R'%f to %F{red}'%r'%f [%B%Uy%u%bes, %B%Un%u%bo, %B%Ue%u%bdit, %B%Ua%u%bbort]?\nSSH_AUTH_SOCK=/tmp/ssh-RSQ4mFB3EM/agent.26333\nSSH_CLIENT=10.0.1.30 56445 22\nSSH_CONNECTION=10.0.1.30 56445 10.0.1.254 22\nSSH_TTY=/dev/pts/1\nTERMINFO=/home/brad/share/terminfo\nTERM=screen-256color\nUSER=brad\n_=/usr/bin/env\nWORKON_HOME=/home/brad/.virtualenvs\nXDG_RUNTIME_DIR=/run/user/1000\nXDG_SESSION_ID=1011\nbrad@home:~ \u276f. sorted!  Many thanks @chrahunt !. ",
    "vinodrajkonda": "Thank you.. ",
    "chrisduong": "I had discovered the culprit. I had accidentally install the sort command from Go package, which overrider the default  sort command. ",
    "vlsd": "Thanks for the quick and informative reply. Hearing that pyenv should not need sudo makes it even weirder to me that I am prompted for that password during an install. Here's the log file you requested. Note that this was redirected to a file, so it doesn't capture the actual prompt for password, but looking at my original post it seems like that happens somewhere around the BUILD FAILED towards the bottom of log.\n\nlog output\n\n```\n+ [pyenv:22] enable -f /home/ubuntu/.pyenv/bin/../libexec/pyenv-realpath.dylib realpath\n+ [pyenv:29] '[' -z '' ']'\n++ [pyenv:31] type -p greadlink readlink\n++ [pyenv:31] head -1\n+ [pyenv:31] READLINK=/bin/readlink\n+ [pyenv:32] '[' -n /bin/readlink ']'\n+ [pyenv:54] '[' -z /home/ubuntu/.pyenv ']'\n+ [pyenv:57] PYENV_ROOT=/home/ubuntu/.pyenv\n+ [pyenv:59] export PYENV_ROOT\n+ [pyenv:62] '[' -z '' ']'\n+ [pyenv:63] '[' -n '' ']'\n+ [pyenv:79] '[' -z '' ']'\n+ [pyenv:80] PYENV_DIR=/home/ubuntu\n+ [pyenv:83] '[' '!' -d /home/ubuntu ']'\n+ [pyenv:83] '[' '!' -e /home/ubuntu ']'\n++ [pyenv:87] cd /home/ubuntu\n++ [pyenv:87] echo /home/ubuntu\n+ [pyenv:87] PYENV_DIR=/home/ubuntu\n+ [pyenv:88] export PYENV_DIR\n+ [pyenv:91] shopt -s nullglob\n++ [pyenv:93] abs_dirname /home/ubuntu/.pyenv/bin/pyenv\n++ [pyenv:39] local path=/home/ubuntu/.pyenv/bin/pyenv\n++ [pyenv:43] '[' -n /home/ubuntu/.pyenv/bin/pyenv ']'\n++ [pyenv:44] cd /home/ubuntu/.pyenv/bin\n++ [pyenv:45] local name=pyenv\n+++ [pyenv:46] resolve_link pyenv\n+++ [pyenv:35] /bin/readlink pyenv\n++ [pyenv:46] path=../libexec/pyenv\n++ [pyenv:43] '[' -n ../libexec/pyenv ']'\n++ [pyenv:44] cd ../libexec\n++ [pyenv:45] local name=pyenv\n+++ [pyenv:46] resolve_link pyenv\n+++ [pyenv:35] /bin/readlink pyenv\n+++ [pyenv:46] true\n++ [pyenv:46] path=\n++ [pyenv:43] '[' -n '' ']'\n++ [pyenv:49] pwd\n+ [pyenv:93] bin_path=/home/ubuntu/.pyenv/libexec\n+ [pyenv:94] for plugin_bin in \"${PYENV_ROOT}/plugins/\"*/bin\n+ [pyenv:95] PATH=/home/ubuntu/.pyenv/plugins/python-build/bin:/home/ubuntu/.pyenv/shims:/home/ubuntu/.pyenv/bin:/home/ubuntu/bin:/home/ubuntu/.local/bin:/home/ubuntu/bin:/home/ubuntu/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin\n+ [pyenv:97] export PATH=/home/ubuntu/.pyenv/libexec:/home/ubuntu/.pyenv/plugins/python-build/bin:/home/ubuntu/.pyenv/shims:/home/ubuntu/.pyenv/bin:/home/ubuntu/bin:/home/ubuntu/.local/bin:/home/ubuntu/bin:/home/ubuntu/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin\n+ [pyenv:97] PATH=/home/ubuntu/.pyenv/libexec:/home/ubuntu/.pyenv/plugins/python-build/bin:/home/ubuntu/.pyenv/shims:/home/ubuntu/.pyenv/bin:/home/ubuntu/bin:/home/ubuntu/.local/bin:/home/ubuntu/bin:/home/ubuntu/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin\n+ [pyenv:99] PYENV_HOOK_PATH=:/home/ubuntu/.pyenv/pyenv.d\n+ [pyenv:100] '[' /home/ubuntu/.pyenv '!=' /home/ubuntu/.pyenv ']'\n+ [pyenv:104] PYENV_HOOK_PATH=:/home/ubuntu/.pyenv/pyenv.d:/usr/local/etc/pyenv.d:/etc/pyenv.d:/usr/lib/pyenv/hooks\n+ [pyenv:108] PYENV_HOOK_PATH=/home/ubuntu/.pyenv/pyenv.d:/usr/local/etc/pyenv.d:/etc/pyenv.d:/usr/lib/pyenv/hooks\n+ [pyenv:109] export PYENV_HOOK_PATH\n+ [pyenv:111] shopt -u nullglob\n+ [pyenv:114] command=install\n+ [pyenv:115] case \"$command\" in\n++ [pyenv:128] command -v pyenv-install\n+ [pyenv:128] command_path=/home/ubuntu/.pyenv/plugins/python-build/bin/pyenv-install\n+ [pyenv:129] '[' -z /home/ubuntu/.pyenv/plugins/python-build/bin/pyenv-install ']'\n+ [pyenv:137] shift 1\n+ [pyenv:138] '[' -v = --help ']'\n+ [pyenv:145] exec /home/ubuntu/.pyenv/plugins/python-build/bin/pyenv-install -v 3.7.2\n+ [pyenv-install:32] shopt -s nullglob\n+ [pyenv-install:33] for plugin_path in \"$PYENV_ROOT\"/plugins/*/share/python-build\n+ [pyenv-install:34] PYTHON_BUILD_DEFINITIONS=:/home/ubuntu/.pyenv/plugins/python-build/share/python-build\n+ [pyenv-install:36] export PYTHON_BUILD_DEFINITIONS\n+ [pyenv-install:37] shopt -u nullglob\n+ [pyenv-install:40] '[' -v = --complete ']'\n++ [pyenv-install:53] python-build --lib\n+ [pyenv-install:53] eval 'lib () \n{ \n    function parse_options () \n    { \n        OPTIONS=();\n        ARGUMENTS=();\n        local arg option index;\n        for arg in \"$@\";\n        do\n            if [ \"${arg:0:1}\" = \"-\" ]; then\n                if [ \"${arg:1:1}\" = \"-\" ]; then\n                    OPTIONS[${#OPTIONS[*]}]=\"${arg:2}\";\n                else\n                    index=1;\n                    while option=\"${arg:$index:1}\"; do\n                        [ -n \"$option\" ] || break;\n                        OPTIONS[${#OPTIONS[*]}]=\"$option\";\n                        index=$(($index+1));\n                    done;\n                fi;\n            else\n                ARGUMENTS[${#ARGUMENTS[*]}]=\"$arg\";\n            fi;\n        done\n    };\n    if [ \"$1\" == \"--$FUNCNAME\" ]; then\n        declare -f \"$FUNCNAME\";\n        echo \"$FUNCNAME \\\"\\$1\\\";\";\n        exit;\n    fi\n}\nlib \"$1\";'\n++ [pyenv-install:84] lib -v\n++ [pyenv-install:78] '[' -v == --lib ']'\n+ [pyenv-install:69] unset FORCE\n+ [pyenv-install:70] unset SKIP_EXISTING\n+ [pyenv-install:71] unset KEEP\n+ [pyenv-install:72] unset VERBOSE\n+ [pyenv-install:73] unset HAS_PATCH\n+ [pyenv-install:74] unset DEBUG\n+ [pyenv-install:76] parse_options -v 3.7.2\n+ [pyenv-install:57] OPTIONS=()\n+ [pyenv-install:58] ARGUMENTS=()\n+ [pyenv-install:59] local arg option index\n+ [pyenv-install:60] for arg in \"$@\"\n+ [pyenv-install:62] '[' - = - ']'\n+ [pyenv-install:63] '[' v = - ']'\n+ [pyenv-install:66] index=1\n+ [pyenv-install:67] option=v\n+ [pyenv-install:68] '[' -n v ']'\n+ [pyenv-install:69] OPTIONS[${#OPTIONS[*]}]=v\n+ [pyenv-install:70] index=2\n+ [pyenv-install:67] option=\n+ [pyenv-install:68] '[' -n '' ']'\n+ [pyenv-install:68] break\n+ [pyenv-install:60] for arg in \"$@\"\n+ [pyenv-install:62] '[' 3 = - ']'\n+ [pyenv-install:74] ARGUMENTS[${#ARGUMENTS[*]}]=3.7.2\n+ [pyenv-install:77] for option in \"${OPTIONS[@]}\"\n+ [pyenv-install:78] case \"$option\" in\n+ [pyenv-install:97] VERBOSE=-v\n+ [pyenv-install:114] '[' 1 -le 1 ']'\n+ [pyenv-install:116] unset VERSION_NAME\n+ [pyenv-install:122] DEFINITION=3.7.2\n+ [pyenv-install:123] '[' -n 3.7.2 ']'\n+ [pyenv-install:124] '[' -n 3.7.2 ']'\n+ [pyenv-install:129] declare -a before_hooks after_hooks\n+ [pyenv-install:141] OLDIFS='  \n'\n+ [pyenv-install:142] IFS='\n'\n+ [pyenv-install:142] scripts=(`pyenv-hooks install`)\n++ [pyenv-install:142] pyenv-hooks install\n+ [pyenv-hooks:9] '[' install = --complete ']'\n+ [pyenv-hooks:18] PYENV_COMMAND=install\n+ [pyenv-hooks:19] '[' -z install ']'\n+ [pyenv-hooks:24] enable -f /home/ubuntu/.pyenv/libexec/pyenv-realpath.dylib realpath\n+ [pyenv-hooks:25] '[' -n '' ']'\n++ [pyenv-hooks:29] type -p greadlink readlink\n++ [pyenv-hooks:29] head -1\n+ [pyenv-hooks:29] READLINK=/bin/readlink\n+ [pyenv-hooks:30] '[' -z /bin/readlink ']'\n+ [pyenv-hooks:55] IFS=:\n+ [pyenv-hooks:55] hook_paths=($PYENV_HOOK_PATH)\n+ [pyenv-hooks:57] shopt -s nullglob\n+ [pyenv-hooks:58] for path in \"${hook_paths[@]}\"\n+ [pyenv-hooks:58] for path in \"${hook_paths[@]}\"\n+ [pyenv-hooks:58] for path in \"${hook_paths[@]}\"\n+ [pyenv-hooks:58] for path in \"${hook_paths[@]}\"\n+ [pyenv-hooks:63] shopt -u nullglob\n+ [pyenv-install:143] IFS='     \n'\n+ [pyenv-install:149] '[' -n '' ']'\n+ [pyenv-install:149] VERSION_NAME=3.7.2\n+ [pyenv-install:150] '[' -n '' ']'\n+ [pyenv-install:151] PREFIX=/home/ubuntu/.pyenv/versions/3.7.2\n+ [pyenv-install:153] '[' -d /home/ubuntu/.pyenv/versions/3.7.2 ']'\n+ [pyenv-install:157] '[' -d /home/ubuntu/.pyenv/versions/3.7.2/bin ']'\n+ [pyenv-install:175] '[' -n '' ']'\n+ [pyenv-install:182] '[' -z '' ']'\n+ [pyenv-install:182] '[' -d /home/ubuntu/.pyenv/cache ']'\n+ [pyenv-install:186] '[' -z '' ']'\n+ [pyenv-install:187] case \"${VERSION_NAME}\" in\n+ [pyenv-install:193] for version_info in \"${VERSION_NAME%-dev}\" \"${VERSION_NAME%.*}\" \"${VERSION_NAME%%.*}\"\n++ [pyenv-install:195] pyenv-whence python3.7.2\n++ [pyenv-install:195] true\n+ [pyenv-install:193] for version_info in \"${VERSION_NAME%-dev}\" \"${VERSION_NAME%.*}\" \"${VERSION_NAME%%.*}\"\n++ [pyenv-install:195] pyenv-whence python3.7\n++ [pyenv-install:195] true\n+ [pyenv-install:193] for version_info in \"${VERSION_NAME%-dev}\" \"${VERSION_NAME%.*}\" \"${VERSION_NAME%%.*}\"\n++ [pyenv-install:195] pyenv-whence python3\n++ [pyenv-install:195] true\n+ [pyenv-install:230] '[' -n '' ']'\n+ [pyenv-install:242] trap cleanup SIGINT\n+ [pyenv-install:245] STATUS=0\n+ [pyenv-install:246] python-build -v 3.7.2 /home/ubuntu/.pyenv/versions/3.7.2\n~/src/python-build.20190306170203.11671 ~\nDownloading Python-3.7.2.tar.xz...\n-> https://www.python.org/ftp/python/3.7.2/Python-3.7.2.tar.xz\n~/src/python-build.20190306170203.11671/Python-3.7.2 ~/src/python-build.20190306170203.11671 ~\nInstalling Python-3.7.2...\n/home/ubuntu/.pyenv/plugins/python-build/bin/python-build: line 1: kill: (11700) - No such process\n\nBUILD FAILED (Ubuntu 18.04 using python-build 1.2.9-19-g7d02b246)\n\nInspect or clean up the working tree at /home/ubuntu/src/python-build.20190306170203.11671\nResults logged to /home/ubuntu/src/python-build.20190306170203.11671.log\n\nLast 10 log lines:\nchecking for alarm... yes\nchecking for accept4... yes\nchecking for setitimer... yes\nchecking for getitimer... yes\nchecking for bind_textdomain_codeset... yes\nchecking for chown... yes\nchecking for clock... yes\nchecking for confstr... yes\nchecking for ctermid... yes\nchecking for dup3... /home/ubuntu/.pyenv/plugins/python-build/share/python-build/3.7.2: line 1: kill: (11700) - No such process\n++ [pyenv-install:1] cleanup\n++ [pyenv-install:239] '[' -z '' ']'\n++ [pyenv-install:239] rm -rf /home/ubuntu/.pyenv/versions/3.7.2\n+ [pyenv-install:246] STATUS=1\n+ [pyenv-install:249] '[' 1 == 2 ']'\n+ [pyenv-install:277] '[' 1 == 0 ']'\n+ [pyenv-install:280] cleanup\n+ [pyenv-install:239] '[' -z '' ']'\n+ [pyenv-install:239] rm -rf /home/ubuntu/.pyenv/versions/3.7.2\n+ [pyenv-install:283] exit 1\n```\n\n\n\nResults logged to /home/ubuntu/src/python-build.20190306170203.11671.log\n\n\n```\n~/src/python-build.20190306170203.11671 ~\n~/src/python-build.20190306170203.11671/Python-3.7.2 ~/src/python-build.20190306170203.11671 ~\nchecking build system type... x86_64-pc-linux-gnu\nchecking host system type... x86_64-pc-linux-gnu\nchecking for python3.7... python3.7\nchecking for --enable-universalsdk... no\nchecking for --with-universal-archs... no\nchecking MACHDEP... checking for --without-gcc... no\nchecking for --with-icc... no\nchecking for gcc... gcc\nchecking whether the C compiler works... yes\nchecking for C compiler default output file name... a.out\nchecking for suffix of executables... \nchecking whether we are cross compiling... no\nchecking for suffix of object files... o\nchecking whether we are using the GNU C compiler... yes\nchecking whether gcc accepts -g... yes\nchecking for gcc option to accept ISO C89... none needed\nchecking how to run the C preprocessor... gcc -E\nchecking for grep that handles long lines and -e... /bin/grep\nchecking for a sed that does not truncate output... /bin/sed\nchecking for --with-cxx-main=... no\nchecking for g++... no\nconfigure:\n\n  By default, distutils will build C++ extension modules with \"g++\".\n  If this is not intended, then set CXX on the configure command line.\n\nchecking for the platform triplet based on compiler characteristics... x86_64-linux-gnu\nchecking for -Wl,--no-as-needed... yes\nchecking for egrep... /bin/grep -E\nchecking for ANSI C header files... yes\nchecking for sys/types.h... yes\nchecking for sys/stat.h... yes\nchecking for stdlib.h... yes\nchecking for string.h... yes\nchecking for memory.h... yes\nchecking for strings.h... yes\nchecking for inttypes.h... yes\nchecking for stdint.h... yes\nchecking for unistd.h... yes\nchecking minix/config.h usability... no\nchecking minix/config.h presence... no\nchecking for minix/config.h... no\nchecking whether it is safe to define __EXTENSIONS__... yes\nchecking for the Android API level... not Android\nchecking for --with-suffix... \nchecking for case-insensitive build directory... no\nchecking LIBRARY... libpython$(VERSION)$(ABIFLAGS).a\nchecking LINKCC... $(PURIFY) $(MAINCC)\nchecking for GNU ld... yes\nchecking for --enable-shared... no\nchecking for --enable-profiling... no\nchecking LDLIBRARY... libpython$(VERSION)$(ABIFLAGS).a\nchecking for ar... ar\nchecking for readelf... readelf\nchecking for a BSD-compatible install... /usr/bin/install -c\nchecking for a thread-safe mkdir -p... /bin/mkdir -p\nchecking for --with-pydebug... no\nchecking for --with-assertions... no\nchecking for --enable-optimizations... no\nchecking for --with-lto... no\nchecking for -llvm-profdata... no\nchecking for -Wextra... yes\nchecking whether gcc accepts and needs -fno-strict-aliasing... no\nchecking if we can turn off gcc unused result warning... yes\nchecking if we can turn off gcc unused parameter warning... yes\nchecking if we can turn off gcc missing field initializers warning... yes\nchecking if we can turn off gcc invalid function cast warning... no\nchecking if we can turn on gcc mixed sign comparison warning... yes\nchecking if we can turn on gcc unreachable code warning... no\nchecking if we can turn on gcc strict-prototypes warning... no\nchecking if we can make implicit function declaration an error in gcc... yes\nchecking whether pthreads are available without options... no\nchecking whether gcc accepts -Kpthread... no\nchecking whether gcc accepts -Kthread... no\nchecking whether gcc accepts -pthread... yes\nchecking whether g++ also accepts flags for thread support... yes\nchecking for ANSI C header files... (cached) yes\nchecking asm/types.h usability... yes\nchecking asm/types.h presence... yes\nchecking for asm/types.h... yes\nchecking crypt.h usability... yes\nchecking crypt.h presence... yes\nchecking for crypt.h... yes\nchecking conio.h usability... no\nchecking conio.h presence... no\nchecking for conio.h... no\nchecking direct.h usability... no\nchecking direct.h presence... no\nchecking for direct.h... no\nchecking dlfcn.h usability... yes\nchecking dlfcn.h presence... yes\nchecking for dlfcn.h... yes\nchecking errno.h usability... yes\nchecking errno.h presence... yes\nchecking for errno.h... yes\nchecking fcntl.h usability... yes\nchecking fcntl.h presence... yes\nchecking for fcntl.h... yes\nchecking grp.h usability... yes\nchecking grp.h presence... yes\nchecking for grp.h... yes\nchecking ieeefp.h usability... no\nchecking ieeefp.h presence... no\nchecking for ieeefp.h... no\nchecking io.h usability... no\nchecking io.h presence... no\nchecking for io.h... no\nchecking langinfo.h usability... yes\nchecking langinfo.h presence... yes\nchecking for langinfo.h... yes\nchecking libintl.h usability... yes\nchecking libintl.h presence... yes\nchecking for libintl.h... yes\nchecking process.h usability... no\nchecking process.h presence... no\nchecking for process.h... no\nchecking pthread.h usability... yes\nchecking pthread.h presence... yes\nchecking for pthread.h... yes\nchecking sched.h usability... yes\nchecking sched.h presence... yes\nchecking for sched.h... yes\nchecking shadow.h usability... yes\nchecking shadow.h presence... yes\nchecking for shadow.h... yes\nchecking signal.h usability... yes\nchecking signal.h presence... yes\nchecking for signal.h... yes\nchecking stropts.h usability... yes\nchecking stropts.h presence... yes\nchecking for stropts.h... yes\nchecking termios.h usability... yes\nchecking termios.h presence... yes\nchecking for termios.h... yes\nchecking for unistd.h... (cached) yes\nchecking utime.h usability... yes\nchecking utime.h presence... yes\nchecking for utime.h... yes\nchecking poll.h usability... yes\nchecking poll.h presence... yes\nchecking for poll.h... yes\nchecking sys/devpoll.h usability... no\nchecking sys/devpoll.h presence... no\nchecking for sys/devpoll.h... no\nchecking sys/epoll.h usability... yes\nchecking sys/epoll.h presence... yes\nchecking for sys/epoll.h... yes\nchecking sys/poll.h usability... yes\nchecking sys/poll.h presence... yes\nchecking for sys/poll.h... yes\nchecking sys/audioio.h usability... no\nchecking sys/audioio.h presence... no\nchecking for sys/audioio.h... no\nchecking sys/xattr.h usability... yes\nchecking sys/xattr.h presence... yes\nchecking for sys/xattr.h... yes\nchecking sys/bsdtty.h usability... no\nchecking sys/bsdtty.h presence... no\nchecking for sys/bsdtty.h... no\nchecking sys/event.h usability... no\nchecking sys/event.h presence... no\nchecking for sys/event.h... no\nchecking sys/file.h usability... yes\nchecking sys/file.h presence... yes\nchecking for sys/file.h... yes\nchecking sys/ioctl.h usability... yes\nchecking sys/ioctl.h presence... yes\nchecking for sys/ioctl.h... yes\nchecking sys/kern_control.h usability... no\nchecking sys/kern_control.h presence... no\nchecking for sys/kern_control.h... no\nchecking sys/loadavg.h usability... no\nchecking sys/loadavg.h presence... no\nchecking for sys/loadavg.h... no\nchecking sys/lock.h usability... no\nchecking sys/lock.h presence... no\nchecking for sys/lock.h... no\nchecking sys/mkdev.h usability... no\nchecking sys/mkdev.h presence... no\nchecking for sys/mkdev.h... no\nchecking sys/modem.h usability... no\nchecking sys/modem.h presence... no\nchecking for sys/modem.h... no\nchecking sys/param.h usability... yes\nchecking sys/param.h presence... yes\nchecking for sys/param.h... yes\nchecking sys/random.h usability... yes\nchecking sys/random.h presence... yes\nchecking for sys/random.h... yes\nchecking sys/select.h usability... yes\nchecking sys/select.h presence... yes\nchecking for sys/select.h... yes\nchecking sys/sendfile.h usability... yes\nchecking sys/sendfile.h presence... yes\nchecking for sys/sendfile.h... yes\nchecking sys/socket.h usability... yes\nchecking sys/socket.h presence... yes\nchecking for sys/socket.h... yes\nchecking sys/statvfs.h usability... yes\nchecking sys/statvfs.h presence... yes\nchecking for sys/statvfs.h... yes\nchecking for sys/stat.h... (cached) yes\nchecking sys/syscall.h usability... yes\nchecking sys/syscall.h presence... yes\nchecking for sys/syscall.h... yes\nchecking sys/sys_domain.h usability... no\nchecking sys/sys_domain.h presence... no\nchecking for sys/sys_domain.h... no\nchecking sys/termio.h usability... no\nchecking sys/termio.h presence... no\nchecking for sys/termio.h... no\nchecking sys/time.h usability... yes\nchecking sys/time.h presence... yes\nchecking for sys/time.h... yes\nchecking sys/times.h usability... yes\nchecking sys/times.h presence... yes\nchecking for sys/times.h... yes\nchecking for sys/types.h... (cached) yes\nchecking sys/uio.h usability... yes\nchecking sys/uio.h presence... yes\nchecking for sys/uio.h... yes\nchecking sys/un.h usability... yes\nchecking sys/un.h presence... yes\nchecking for sys/un.h... yes\nchecking sys/utsname.h usability... yes\nchecking sys/utsname.h presence... yes\nchecking for sys/utsname.h... yes\nchecking sys/wait.h usability... yes\nchecking sys/wait.h presence... yes\nchecking for sys/wait.h... yes\nchecking pty.h usability... yes\nchecking pty.h presence... yes\nchecking for pty.h... yes\nchecking libutil.h usability... no\nchecking libutil.h presence... no\nchecking for libutil.h... no\nchecking sys/resource.h usability... yes\nchecking sys/resource.h presence... yes\nchecking for sys/resource.h... yes\nchecking netpacket/packet.h usability... yes\nchecking netpacket/packet.h presence... yes\nchecking for netpacket/packet.h... yes\nchecking sysexits.h usability... yes\nchecking sysexits.h presence... yes\nchecking for sysexits.h... yes\nchecking bluetooth.h usability... no\nchecking bluetooth.h presence... no\nchecking for bluetooth.h... no\nchecking linux/tipc.h usability... yes\nchecking linux/tipc.h presence... yes\nchecking for linux/tipc.h... yes\nchecking linux/random.h usability... yes\nchecking linux/random.h presence... yes\nchecking for linux/random.h... yes\nchecking spawn.h usability... yes\nchecking spawn.h presence... yes\nchecking for spawn.h... yes\nchecking util.h usability... no\nchecking util.h presence... no\nchecking for util.h... no\nchecking alloca.h usability... yes\nchecking alloca.h presence... yes\nchecking for alloca.h... yes\nchecking endian.h usability... yes\nchecking endian.h presence... yes\nchecking for endian.h... yes\nchecking sys/endian.h usability... no\nchecking sys/endian.h presence... no\nchecking for sys/endian.h... no\nchecking sys/sysmacros.h usability... yes\nchecking sys/sysmacros.h presence... yes\nchecking for sys/sysmacros.h... yes\nchecking for dirent.h that defines DIR... yes\nchecking for library containing opendir... none required\nchecking whether sys/types.h defines makedev... yes\nchecking bluetooth/bluetooth.h usability... no\nchecking bluetooth/bluetooth.h presence... no\nchecking for bluetooth/bluetooth.h... no\nchecking for net/if.h... yes\nchecking for linux/netlink.h... yes\nchecking for linux/vm_sockets.h... yes\nchecking for linux/can.h... yes\nchecking for linux/can/raw.h... yes\nchecking for linux/can/bcm.h... yes\nchecking for clock_t in time.h... yes\nchecking for makedev... yes\nchecking for le64toh... yes\nchecking for mode_t... yes\nchecking for off_t... yes\nchecking for pid_t... yes\nchecking for size_t... yes\nchecking for uid_t in sys/types.h... yes\nchecking for ssize_t... yes\nchecking for __uint128_t... yes\nchecking size of int... 4\nchecking size of long... 8\nchecking size of long long... 8\nchecking size of void *... 8\nchecking size of short... 2\nchecking size of float... 4\nchecking size of double... 8\nchecking size of fpos_t... 16\nchecking size of size_t... 8\nchecking size of pid_t... 4\nchecking size of uintptr_t... 8\nchecking for long double support... yes\nchecking size of long double... 16\nchecking size of _Bool... 1\nchecking size of off_t... 8\nchecking whether to enable large file support... no\nchecking size of time_t... 8\nchecking for pthread_t... yes\nchecking size of pthread_t... 8\nchecking size of pthread_key_t... 4\nchecking whether pthread_key_t is compatible with int... yes\nchecking for --enable-framework... no\nchecking for dyld... no\nchecking the extension of shared libraries... .so\nchecking LDSHARED... $(CC) -shared\nchecking CCSHARED... -fPIC\nchecking LINKFORSHARED... -Xlinker -export-dynamic\nchecking CFLAGSFORSHARED... \nchecking SHLIBS... $(LIBS)\nchecking for sendfile in -lsendfile... no\nchecking for dlopen in -ldl... yes\nchecking for shl_load in -ldld... no\nchecking uuid/uuid.h usability... no\nchecking uuid/uuid.h presence... no\nchecking for uuid/uuid.h... no\nchecking uuid.h usability... no\nchecking uuid.h presence... no\nchecking for uuid.h... no\nchecking for uuid_generate_time_safe... no\nchecking for uuid_create... no\nchecking for uuid_enc_be... no\nchecking for library containing sem_init... -lpthread\nchecking for textdomain in -lintl... no\nchecking aligned memory access is required... no\nchecking for --with-hash-algorithm... default\nchecking for --with-address-sanitizer... no\nchecking for --with-memory-sanitizer... no\nchecking for --with-undefined-behavior-sanitizer... no\nchecking for t_open in -lnsl... no\nchecking for socket in -lsocket... no\nchecking for --with-libs... no\nchecking for pkg-config... /usr/bin/pkg-config\nchecking pkg-config is at least version 0.9.0... yes\nchecking for --with-system-expat... no\nchecking for --with-system-ffi... yes\nchecking for --with-system-libmpdec... no\nchecking for --enable-loadable-sqlite-extensions... no\nchecking for --with-tcltk-includes... default\nchecking for --with-tcltk-libs... default\nchecking for --with-dbmliborder... \nchecking if PTHREAD_SCOPE_SYSTEM is supported... yes\nchecking for pthread_sigmask... yes\nchecking for pthread_getcpuclockid... yes\nchecking if --enable-ipv6 is specified... yes\nchecking if RFC2553 API is available... yes\nchecking ipv6 stack type... linux-glibc\nchecking for CAN_RAW_FD_FRAMES... yes\nchecking for --with-doc-strings... yes\nchecking for --with-pymalloc... yes\nchecking for --with-c-locale-coercion... yes\nchecking for --with-valgrind... no\nchecking for --with-dtrace... no\nchecking for dlopen... yes\nchecking DYNLOADFILE... dynload_shlib.o\nchecking MACHDEP_OBJS... none\nchecking for alarm... yes\nchecking for accept4... yes\nchecking for setitimer... yes\nchecking for getitimer... yes\nchecking for bind_textdomain_codeset... yes\nchecking for chown... yes\nchecking for clock... yes\nchecking for confstr... yes\nchecking for ctermid... yes\nchecking for dup3... \n```\n\n\n. ",
    "ekallevig": "Same issue on latest Manjaro. ",
    "robnagler": "I think the bug is related to #98, which added $PYENV_BIN_PATH to $PATH:\n```bash\nCPython's sys.executable requires the PYENV_BIN_PATH to be at the top of the PATH.\nhttps://github.com/pyenv/pyenv/issues/98\nexport PATH=\"${PYENV_BIN_PATH}:${PATH}\"\n```\nThe following demonstrates a patch to pyenv an pyenv-which-ext that handles this case correctly, and I believe is backwards compatible:\n```bash\nmkdir x\ncd x\nvagrant init fedora/27-cloud-base\nvagrant up\nvagrant ssh\nsudo dnf install -y bzip2-devel git openssl-devel patch readline-devel sqlite-devel\ncurl pyenv.run | bash\nexport PATH=\"/home/vagrant/.pyenv/bin:$PATH\"\neval \"$(pyenv init -)\"\neval \"$(pyenv virtualenv-init -)\"\npyenv install 2.7.14\npyenv install 3.6.6\npyenv global 2.7.14\npip install pytest\nt1() {\n     [[ $(python -c 'import os, subprocess as s; os.environ[\"PYENV_VERSION\"] = \"3.6.6\"; print s.check_output(\"pyenv which py.test\", shell=1)' 2>/dev/null) =~ 2.7.14 ]]\n}\nt1 && echo INCORRECT py.test\n(cd ~/.pyenv && patch libexec/pyenv-exec) <<'EOF'\ndiff --git a/libexec/pyenv-exec b/libexec/pyenv-exec\nindex 51c668e..a6e1fe9 100755\n--- a/libexec/pyenv-exec\n+++ b/libexec/pyenv-exec\n@@ -31,7 +31,7 @@ fi\nexport PYENV_VERSION\n PYENV_COMMAND_PATH=\"$(pyenv-which \"$PYENV_COMMAND\")\"\n-PYENV_BIN_PATH=\"${PYENV_COMMAND_PATH%/}\"\n+export PYENV_BIN_PATH=\"${PYENV_COMMAND_PATH%/}\"\nOLDIFS=\"$IFS\"\n IFS=$'\\n' scripts=(pyenv-hooks exec)\nEOF\n(cd ~/.pyenv/plugins/pyenv-which-ext && patch etc/pyenv.d/which/lookup_from_path.bash) <<'EOF'\ndiff --git a/etc/pyenv.d/which/lookup_from_path.bash b/etc/pyenv.d/which/lookup_from_path.bash\nindex fda76b8..13d99f7 100644\n--- a/etc/pyenv.d/which/lookup_from_path.bash\n+++ b/etc/pyenv.d/which/lookup_from_path.bash\n@@ -1,17 +1,19 @@\n remove_from_path() {\n-  local path_to_remove=\"$1\"\n+  local path_to_remove\n   local path_before\n   local result=\":$PATH:\"\n-  while [ \"$path_before\" != \"$result\" ]; do\n-    path_before=\"$result\"\n-    result=\"${result//:$path_to_remove:/:}\"\n+  for path_to_remove in \"$@\"; do\n+    while [ \"$path_before\" != \"$result\" ]; do\n+      path_before=\"$result\"\n+      result=\"${result//:$path_to_remove:/:}\"\n+    done\n+    result=\"${result%:}\"\n   done\n-  result=\"${result%:}\"\n   echo \"${result#:}\"\n }\nlookup_from_path() {\n-  PATH=\"$(remove_from_path \"${PYENV_ROOT}/shims\")\" command -v \"$1\" || true\n+  PATH=\"$(remove_from_path \"${PYENV_ROOT}/shims\" \"${PYENV_BIN_PATH}\")\" command -v \"$1\" || true\n }\n# If the \"$PYENV_COMMAND_PATH\" does not exist,\nEOF\nt1 || echo PASS\n```\n. ",
    "fritsderaad": "Sorry, bit of a newby, filled out the template with everything I knew. How do I determine the C Compiler on my Windows 7 pro machine? is that Visual Studio 2017? Tried to put on debugging but on suggested code I got PYENV_DEBUG is not recognized as internal or external command, operable program or batch file\n. ",
    "browniebroke": "Indeed. I've copied the URLs that were on the Python page and got the archives with curl, and I realised they were actually stored under /ftp/python/3.5.2/ on the Python website, which is odd. Anyway, it fixed now, but it looks like they were both wrong.. ",
    "cia-rana": "That\u2019s exactly what I wanted to say! I created this pull request because an error about pyenv occurs when I use my dotfiles in an environment that pyenv isn't installed.. ",
    "tswast": "In your example, <version> is not a space-separated list. It is already expanded as a list in the example.. ",
    "ushuz": "suggestion\n            # Xcode 10 and later no longer install macOS SDK headers in the base system. "
}