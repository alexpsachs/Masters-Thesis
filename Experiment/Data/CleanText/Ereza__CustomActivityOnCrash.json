{
    "Ereza": "Merged, thanks!\n. Thanks for the PR. Actually, I'd like to discuss it a bit.\nWhile I can see the usefulness of having a default error activity, this has two implications that I don't personally like:\n- This adds a dependency on platform themes, when Android starts using a new design (maybe Android 6?) the library will have to be updated or it will look ugly. If no default activity is provided that responsibility is passed down to the app developer.\n- Maybe translations should be provided for the default activity strings. It can be done by the app developer, but I personally hate translating libraries' strings.\nFurthermore, I don't actually think that many people will end up using a default error activity. Everyone will want it customized (theme, colors, layout, restart activity as you pointed out...), and I don't think that many people will show the stacktrace (at least not in a prominent place) since it could overwhelm the user.\n. Yes, I agree that's a nice objective and would simplify adding the library to an existing app.\nAny thoughts on how we could restart the app in a simple way? Maybe pass the activity class that has to be launched to the init method? Is there any other way?\n. I've already checked out the PR and I'm making some changes to it, if you want you can wait and send another PR after they are committed :P\n. That would be cool!\nThere are some drawbacks however:\n- An app may have more than one activity with intent filter with category LAUNCHER.\n- An app may have NO launchable activity (for example, apps that are only widgets).\nWhat should we do in those cases?\nIf you are willing to provide a proposal via pull request I can take a look at it.\nThanks!\n. @alorma I think that's more complicated than the currently needed configuration... Anyway, we are talking about the activity that gets launched when pressing the \"restart\" button, so launching the error activity is independent from that.\nIMHO, it should be like this:\n- If a restart activity has been specified with CustomActivityOnCrash.setRestartActivityClass(), use that.\n- If not specified, get the launchable activities via PackageManager, if one or more exist, just grab the first one by default (although I don't personally like that).\n- If no activities are launchable, just close the app.\nAlso, add an option to always close the app instead of restarting.\n. Closed with the pull request #6 by @AizazAZ. Thanks!\n. Implemented. Thanks!\n. Thank you very much, that's awesome! I'm taking a look at it, but aside from a few code style and naming changes, I think it's fine to go! I will be pushing it in the next few hours.\nAgain, thanks!\n. Merged, thanks!\n. Hello, \"not working properly\" means that issues are not being reported?\nI just tested it and with this code, which is the same as yours, issues are being properly reported in the Crashlytics web interface:\n``` java\n    @Override\n    public void onCreate() {\n        super.onCreate();\n    CustomActivityOnCrash.setLaunchErrorActivityWhenInBackground(false);\n    CustomActivityOnCrash.setShowErrorDetails(true);\n    CustomActivityOnCrash.setErrorActivityClass(CustomErrorActivity.class);\n    CustomActivityOnCrash.install(this);\n\n    Fabric.with(this, new Crashlytics());\n}\n\n```\nCan you provide more info?\n. What device and API level are you testing on?\nCan you provide a sample project where I can reproduce the issue?\n. That's strange... I am now testing on a Galaxy S3 I9300 with Android 4.3 (API 18), and I can't get it to report anything, even with CustomActivityOnCrash completely disabled. The logs are full of:\n07-27 15:01:18.537  20942-20942/cat.ereza.sample.customactivityoncrash I/Fabric\ufe55 Initializing Crashlytics 2.3.3.61\n07-27 15:01:33.907  20942-21012/cat.ereza.sample.customactivityoncrash I/Fabric\ufe55 Crashlytics report upload FAILED: 55B62A780267-0001-43FB-43B5A56DF48B.cls\n07-27 15:01:36.192  20942-21012/cat.ereza.sample.customactivityoncrash I/Fabric\ufe55 Crashlytics report upload FAILED: 55B629CA0123-0001-3AB6-43B5A56DF48B.cls\n07-27 15:01:38.812  20942-21012/cat.ereza.sample.customactivityoncrash I/Fabric\ufe55 Crashlytics report upload FAILED: 55B629480174-0001-350A-43B5A56DF48B.cls\n07-27 15:01:43.307  20942-21012/cat.ereza.sample.customactivityoncrash I/Fabric\ufe55 Crashlytics report upload FAILED: 55B62B050210-0001-4B2F-43B5A56DF48B.cls\nI'll take a further look at it but it appears to be some kind of Crashlytics problem, or maybe connectivity problems...\n. I was having network issues, since I was uploading a large file from another device and maybe the connection timed out too quickly.\nRight now reports are correctly sent on my sample app, with and without CustomActivityOnCrash enabled:\n07-27 16:27:28.410  31664-31723/cat.ereza.sample.customactivityoncrash:error_activity I/Fabric\ufe55 Crashlytics report upload complete: 55B62A780267-0001-43FB-43B5A56DF48B.cls\n07-27 16:29:14.535  31664-31723/cat.ereza.sample.customactivityoncrash:error_activity I/Fabric\ufe55 Crashlytics report upload complete: 55B62BA30073-0001-51CE-43B5A56DF48B.cls\n07-27 16:29:46.665  31664-31723/cat.ereza.sample.customactivityoncrash:error_activity I/Fabric\ufe55 Crashlytics report upload complete: 55B629CA0123-0001-3AB6-43B5A56DF48B.cls\nCheck that you have Crashlytics properly configured, and that you don't have any network connection issues. If the problem persists, please provide a sample project that displays the problem. Also, please attach the resulting logcat after a crash.\nKeep in mind that with the previous code, Crashlytics is the one that launches CustomActivityOnCrash after it has done all its own work... So if the error activity is displayed, you can be almost sure that Crashlytics has been executed normally.\nI am closing this issue since as of now, I don't have any means of reproducing it. If you can provide additional info, please comment!\nThanks!\n. I am currently investigating this problem.\nFirst of all, the process for the error activity only needs to be set on API<17, so the library should only use that option with API<17. See: https://github.com/ACRA/acra/issues/284\nSecondly, I am investigating if it's possible to kill the error activity process before launching the restart activity.\n. There is no way to make the error activity be on another process depending on the API level. I tried using a string resource for the process attribute, but that only seems to work on recent versions of the API (>18, I think). On previous platform versions the process is left blank and therefore runs on the same process as the app, which is just the opposite of what we want.\nSo... Now the error activity process is completely killed when restarting the app. This guarantees that there will not be multiple Application instances running on different processes (unless you do multiprocesses yourself on your app, in that case, please take extra care because this library is untested under those conditions).\nHopefully this fixed the problem.\n. Hi:\nFirst of all, thanks for the PR.\nAs you pointed out, this is not the expected behavior. The thing I was expecting to happen is the stack being cleared when crashing or when restarting the app, so this really is a bug.\nThat said, I don't understand the reasoning behind your PR. Why do you need to add another activity just to clear the stack? Doesn't intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK); fix the issue with just one line of code?\nI implemented the setFlags change, and now the stack is effectively cleared when a crash occurs and when restarting the app.\nIs there something that I'm missing from your proposed solution? Any other use case where this could happen and is fixed with your method?\nAgain, thank you very much!\n. Hi, thanks for the suggestion! If you provide a pull request I'll integrate it! :)\n. Implemented by @Sloy in #14 (thanks!)\n. Hi:\nI don't see the benefit of using mipmap on this image if you don't use it on animations or anything like that. And if you do, you are already using your own custom activity, so you can use a mipmap there if you wish... Or maybe I'm wrong and there is benefit on using mipmaps other than for animations (or launcher icons)?\nCan you elaborate?\nThanks!\n. @ppamorim You mean specifying the drawable with something like: CustomActivityOnCrash.setDefaultErrorActivityDrawable(R.drawable.my_image)?\nI guess it's feasible, but I don't see how overriding a drawable is more confusing than overriding strings...\n. You're right, I'll do that.\n. Hi, this has been implemented in the 1.4.0 release. A new method CustomActivityOnCrash.setDefaultErrorActivityDrawable(int); is available, and you can pass in a drawable or mipmap id.\nThanks for your suggestion!\n. Hi:\nThis is probably a concurrency issue with Bugsnag, they call back to the default handler, which makes CustomActivityOnCrash work, but they send the crash to their server on an asynchronous thread. If the sending fails, then they store it on disk for the next iteration.\nIf CustomActivityOnCrash is launched first (it's likely, because it's on the main thread), it kills the app and of course the asynchronous thread launched by Bugsnag is killed too.\nWhat they should do (and I think that's what Crashlytics and ACRA do) is just write to disk on the main thread, then launch the new thread to their server. If the thread gets killed, it will be sent on the next app restart.\nActually you could probably fix this by making their ExceptionHandler call Client.notify(error, true) to make it blocking and do their things on the main thread. However, I can't verify that since I don't have a Bugsnag account.\nI would suggest submitting a bug report or pull request to Bugsnag to fix this issue. This can also happen on any project with a default exception handler that just kills the app (that's what CustomActivityOnCrash ends up doing).\nIf you can't change the Bugsnag code, you can create a custom UnhandledExceptionHandler that calls back to the original handler, and set it after installing CustomActivityOnCrash. There, you can report a handled exception and wait for some milliseconds to give time for Bugsnag to process it. It's not the most elegant of solutions but it can be a workaround.\nCheck these classes if you want to take a deeper look at it:\nhttps://github.com/bugsnag/bugsnag-android/blob/master/src/main/java/com/bugsnag/android/Bugsnag.java (initializes the client)\nhttps://github.com/bugsnag/bugsnag-android/blob/master/src/main/java/com/bugsnag/android/Client.java (initializes the exception handler and does the send logic)\nhttps://github.com/bugsnag/bugsnag-android/blob/master/src/main/java/com/bugsnag/android/ExceptionHandler.java (the actual exception handler)\nI'll close this issue because there is nothing that the library can do to fix this problem. If you find out anything that could make this library handle better these situations please comment again and I'll reopen it.\n. @sirvon Thanks for the report! Do you have any idea of where the leak appears to be? The screenshot doesn't provide much info to me. My only idea could be in the OnClickListeners, because they hold a reference to the activity... But when the activity is destroyed they will also be destroyed, so I don't see any leak there.\nAnyway, leaks in the error activity are not that problematic, since the app is completely killed when clicking the \"Restart\" button, thus freeing all memory. But if there is one, I'd like to fix it!\n. Closing due to lack of feedback. If you can provide an explanation of why the leak is happening, I'll reopen it!\n. Thank you very much!!! All pull requests should be like this one, no need to touch any line at all! :)\n. Hi! I will try to make a release this week, including #10 and #11.\n. Hi @amatkivskiy, I published a new version (1.4.0) a few hours ago, including #10 and #11.\n. Hi, sorry for the late reply. The best way would be to copy the default error activity in the library to your project, and modify it as needed. Then you can just use CustomActivityOnCrash.setErrorActivityClass(YourErrorActivity.class); to set the library to use your activity instead of the default one.\nIf you do this, make sure to read the full documentation (see https://github.com/Ereza/CustomActivityOnCrash/blob/master/README.md), because you need to implement it in a certain way (add a custom process to the activity, restart the app using the library methods, etc.)\nSince this is a feature that some people could also like, feel free to send a pull request if you wish!\n. Merged in 1.5.0.\nI have changed a few things however:\n- The class is called \"EventListener\" instead of \"Tracker\"\n- Added another event when the app is closed via error activity button.\n- The event listener gets passed as part of the intent since it can be changed during the execution of the app. This means that it must be serialized, and to avoid crashes, the class must not be an anonymous or non-static inner class. If it is, the library throws an exception.\nThanks for the pull request! ;)\n. Fixed in 1.5.0 by adding a space between the two line feeds, this appears to be a limitation in LogCat. However, I should try to remove this method for 2.0, since it is tightly coupled with the presentation in the default error activity. Ideally, it should be a bean and the error activity should format it as needed.\nThanks for your bug report!\n. Hi @AndroidLTG, I have actually used the library in a launcher application and it works as expected.\nHowever, I imagine that your case is also one I have met before: if you do something that crashes in a background thread in your Application class, the app will enter a restart loop with the current version of the library (1.4.0). I am trying to fix this for 1.5.0, by setting a shared preference with the latest crash timestamp and defaulting to the default Android error screen if the last crash occurred less than 2 seconds ago. This should solve most  restart loops, but everything that is invoked in a background thread from the Application class is likely to cause restart loops in case of crashes...\n. Fixed in 1.5.0 with a shared preference. When a crash occurs, the current timestamp is saved into it. If a new crash occurs in less than 2 seconds, the library assumes that it's a restart loop and just defaults to the system exception handler (\"App X has stopped.\").\nIf you encounter this bug again and can provide a little sample to reproduce it, please let me know!\n. Hi @deekea, the returned stacktrace is exactly the same that you would get by printing the stack trace to LogCat. This is a Java issue, not a behavior of this library. I personally don't know how to make it print all lines, but you shouldn't need them anyway since they are framework-related.\n. Fixed in 1.5.0. The library now filters only activities on the current package.\nThanks for your bug report!\n. There is no easy way to detect ANR, but you can try using this library: https://github.com/SalomonBrys/ANR-WatchDog\nIt will work with CustomActivityOnCrash since it throws a runtime exception when an ANR is detected.\nHowever, I have never used it and I don't know what are the implications of using it (possibly more CPU and battery usage?).\nIf at any time ANR become detectable by the framework itself, I will add support for that, of course.\n. Hi! Thanks for the feedback!\nI didn't know about this issue, but it could be possible. I have seen two reports on the Google Developer Console for my apps, which should not be there because CustomActivityOnCrash never calls the system's UncaughtExceptionHandler. However, they didn't show up in Crashlytics either.\nWhen it happened to you, did the system error window launch? And I don't think so, but is your receiver somehow running in another process aside from the main app process?\nIf you can provide a simple example showing how to reproduce it (even if it only happens sometimes and is not always reproducible), I can take a look into it.\n. Hi @MahdiPishguy, sorry for the long long time without replying.\nProbably you figured it out already, but just for reference, you are missing CustomActivityOnCrash.setEventListener(new CustomEventListener()) in your application's onCreate.. Hi @chrischen-melb, sorry for the long delay in my response.\nThis should be fixed in the current development version since it now uses AppCompat. It will soon be published in version 2.0.0 of the library.\nPlease reopen this issue if this isn't fixed, and thanks for reporting the problem.. Hi, latest version is now available on Maven Central. Let me know if you have any other issue!. Hi @bourmhe, thanks for the PR. I think it's a nice addition, I'll integrate it and change two things:\n- Make the tracking optional via library setting\n- Remove the dependency to Apache Collections, I don't like depending on big libraries for just a little functionality.\nTaking a screenshot is a more complicated feature, it would be cool but I don't know if it's even possible to do that from an UncaughtExceptionHandler. I'm open to other PRs of course :stuck_out_tongue: \nThanks again and sorry for taking so long to reply.. Hi @k0shk0sh, sorry for the long long delay.\nShould work with the current development version. The only problem with the current production version should be that crashes don't get reported to Firebase, but the rest should work.\nI'll release the new version soon as 2.0.0. Thanks for reporting the issue.. Hi @k0shk0sh, the latest version 2.0.0 is already on Maven Central. Let me know if the issue is still there!. Hello, @zengcanxiang, sorry for the long time.\nMaybe you figured it out already. Are you using a custom error activity? If so, can you reproduce the issue with the default error activity?\nThanks!. Closed due to lack of activity. If you still need help feel free to reopen it or create a new issue. Thanks!. Thanks for the feedback @zengcanxiang, I have not been able to reproduce your problem specifically, but when checking, I found out that the root activity becomes duplicated after restarting the app from the error activity, them pressing home, and then launching the app again. It's likely that this is related to your issue. Could you try with the current development version? (you'll have to import the library manually)\nThanks again for your help!. Thanks for your feedback @zengcanxiang, I'll make a new release of the library when I have some free time :). Hi @herbeth1u, sorry for the long time without replying.\nI agree it's about time to make the library minSdkVersion 14, so this means we can add AppCompat. It's done in the current development version, which will be released soon as 2.0.0.\nThanks for reporting the issue.. Hi, the latest version is now on Maven Central.. Hi @JTBrinkmann, and sorry for the long delay in my response.\nThanks for the PR. Unfortunately, packageInfo.lastUpdateTime does not report the build date but the install date. I have made build date an optional field (it is not shown if the build date is not present or older than 312764400000), but the only way to get the build date showing is using android.keepTimestampsInApk = true as you pointer out.\nI will reject the PR because of this, but thanks for your time anyway. Feel free to provide any other improvement in the future.\nThis will be published in version 2.0.0 of the library, which I'll publish soon.. The latest version is now on Maven Central.. Please see comment on #31 . Thanks!. Yes, it does work. I am working on a new version with some changes, the most critical of which is adding Firebase compatibility. Currently if you have Firebase Crash Reporting in your app, CustomActivityOnCrash will not invoke Firebase's UncaughtExceptionHandler and you will get no crash reports in Firebase. That will be fixed on the next version.. Hi @AdityaAnand1 , the latest version is already released on Maven Central.. Hi @Sloy, thanks again for the positive feedback! Yes, that's an issue I have faced myself, and I think it would indeed be a nice addition. I'll add it :). Done in 2.2.0. Thanks again for the suggestion ;). Hi @android-dataticket, thanks for the suggestion! What you described is indeed the normal behavior, the Application class is destroyed because a new app process is started and the previous one is killed.\nI'll take a look to see if it is feasible to add some custom data to the Intent, so it becomes available to the ErrorActivity once the app is restarted.. Thanks for your PR, but I don't really think this is an issue. Code style is quite personal, and I don't really see the need for a PR only to change this little thing.. Hi @linnan1228, sorry for the late response.\nAre you using the latest version of the library (2.1.0)? Do you get any kind of error in the application log? Does the app get killed? Do you use any special configuration for CustomActivityOnCrash?. Closing due to inactivity. Please reopen if you can provide more info.. Hi @MahdiPishguy, you are setting .enabled(false), this disables the crash interception mechanism and is not supposed to be used by the majority of apps. You copied the customization example, but you should only set the parameters you wish to change, not all of them.. Ooops, thanks for the PR! Merged!. Hi, thanks for the suggestion and sorry for the lack of updates.\nWhat would you like to do, exactly? What's the point of writing to a file?\nYou can already execute custom logic when a crash occurs, by registering an EventListener and overriding the onLaunchErrorActivity method. This is executed BEFORE the crashed process gets killed, so you should be able to get all the info you need.\nIf you need any other thing please let me know!. Closing this then. If you feel you need anything more feel free to reopen it!. Hi @devzwy, sorry for taking a long time to reply. When this happens, it's very likely that your app is crashing on start (maybe in the Application class, or the first shown activity, or on a background task started when the app is run. This could also be happening if your app registers for system broadcasts and crashes when one of the broadcasts arrives. In this last case, if you receive those broadcasts very often, the app could enter a restart loop, restarting eternally. The library attempts to detect initial app crashes by setting a time limit and showing the error log you saw (\"App already crashed recently, not starting custom error activity because we could enter a restart loop. Are you sure that your app does not crash directly on init?\") if the last crash was 3s ago or less. But this does not protect against all restart loops, and that's what seems to be happening with your app.\nIf you can provide more info of the cause of the crashes, I can try to detect that in some case in order to avoid it.. Closing this issue. If you still have problems with the new version 2.2.0, please reopen it.. Hi @utkarshGithub, sorry for taking a while to reply. Did you manage to solve the problem?\nYour code appears to be fine (however, if you set the errorActivity via CaocConfig, the intent-filter is not really needed). Could you provide a minimal project so I can check if there is any other issue that causes this?\nThanks!. Hi @DominuS-RU, can you provide a minimal project with all the code so I can reproduce the issue? I'm assuming that the problem doesn't happen on the sample project, can you check?\nThanks!!. Thanks, I'll take a look into it!. Hi,\nThis issue has nothing to do with the library. You have some kind of crash, if you got it on Crashlytics or similar and it's an internal Android crash, there is probably nothing you can do. You can try asking a question on StackOverflow however, not here.\nI'll close this, if you have any problem with the library open a new issue.. Hi @Stackflood,\nAre you sure the error comes from the CustomActivityOnCrash library? We don't use neither 25.3.1 nor 26.0.0-alpha1 versions of the support library.. What are the dependencies on your main project? Can you try to reproduce it by changing the sample app dependencies/code?. Either update Android Studio to 3.0 or change the version of the Gradle plugin to the one you use on your project. It shouldn't matter, no changes were made to the build scripts that depend on the latest version.. @Redman1037 This can be a workaround, but do you know if the issue is caused by CustomActivityOnCrash? It doesn't look like it.. Thanks for letting us know @Stackflood, closing this then.. Hi @gbatra24, thanks for the suggestion. However, capturing ANR is not possible since Android does not let the app know if there has been an ANR.\nThere is a possible solution you can use: @SalomonBrys has created an awesome library that tries to catch ANRs and you can even report them to your crash reporting tool: https://github.com/SalomonBrys/ANR-WatchDog\nHowever, I have not used it and I am unsure if it might have some effect on battery usage or cause other issues with your app. But you can consider trying it ;)\nI'll close this since there are no current plans to reimplement ANR-WatchDog's functionality inside CustomActivityOnCrash. However, if anyone wants to send a PR, feel free to do it :P. Hi, sorry for the late response.\nVersion 2.2.0 is in Maven Central since November 20th: https://mvnrepository.com/artifact/cat.ereza/customactivityoncrash\nCheck that you are not working in offline mode or any other connectivity issue.. Hi @RTDeveloperman, thanks for reporting this.\nWhat version of ACRA are you using? Also, what are the contents of the @ReportsCrashes annotation?. ",
    "alorma": "I'm agree with that, most reponsability should be handled by developer.\nBut the point with DefaultActivity, is to use the library Out of the box, just one line and everything is done.\nColors custmoizatiuon (in case of Lollipop and above) can be discused, because it can be changed just overriding the default color names.\n. No i guess there are no other methods.\nBut init() methods should change a bit, with an extra param Class, and an option to not relaunch any activity.\nI will do it later today and update the PR\n. Ok :)\n. You can push directly to this PR?\n. Maybe it can add a custom action in order to be launched from library:\n``` xml\n        \n\n\n            <category android:name=\"android.intent.category.LAUNCHER\" />\n        </intent-filter>\n    </activity>\n\n```\n. Library should check for this action first, if there is no Activity with that, search for default android launcher activities, and if not launch the default library error Activity\n. Oh, sorry i missunderstood the Issue :D i will move it to a new Issue.\nAnyway, it can be used in a similar way, with an extra action.\nxml\n<action android:name=\"cat.ereza.customactivityoncrash.RELAUNCH\" />\n. Any news on this PR @ereza?\n. Oeeeeeeeee oeeeeee oeeeeee\n. ",
    "JamesBradyBear": "I have created new pull request with this change, please review.\n. ",
    "pawarlalit29": "sorry for issue is not mention clearly .\nissue is not reported to crashlytics , \nthe code is same, \nyesterday i was tested but no crash report in crashlytics dashboard \n. sorry for late reply,\ndevice is samsumg s3 and min api 15 \ni was not create any sample project bcoz i directly implement on my real project\n. ok.\n. ",
    "ppamorim": "@Ereza Before all, What do you think about using that implementation only with code? The override of resource can be a little bit confuse to some developers.\n. @Ereza Yes, but you can maintain this override of the drawable with strings and implements the method way too.\n. ",
    "sirvon": "oh and btw this library is freaking awesome!!@#!\n. ",
    "Rainer-Lang": "+1\n. ",
    "AndroidLTG": "It save my day ! Thanks very much ! \n. ",
    "adrielcafe": "Same problem here. I have two different apps using this lib. When the second app try to open a custom Activity the app throws this exception.\n. Thank you!\n. ",
    "Sloy": "Hi @Ereza, sorry for the (very) late response. I could not reproduce it and lately for what I've seen this feature has been working fine. \nSo I'm closing the issue and will let you know if I encounter the problem again.\nThanks for everything!\n. ",
    "mnive93": "Hello,\nThere seems to be an issue with colorPrimary and colorPrimaryDark. @chenyuan \nIn your colors.xml override these colors \n<color name=\"customactivityoncrash_primary\">Your color primary</color>\n <color name=\"customactivityoncrash_primary_dark\">Your color primary dark</color>\nIn your themes.xml do this \n<style name=\"CustomActivityOnCrashTheme\" parent=\"AppTheme\" >\n        <item name=\"android:label\">Your app name</item>\n        <item name=\"colorPrimary\">@color/customactivityoncrash_primary</item>\n        <item name=\"colorPrimaryDark\">@color/customactivityoncrash_primary_dark</item>\n    </style>\n. ",
    "TheLGameS": "Did not work!\n. ",
    "bourmhe": "I can also propose another feature: give the possible to take a screenshot just before open the custom activity.\nThe purpose is to give the possibility to the developer to send to a tracking tool, all informations of the crash.\n. Hi @Ereza,\nthanks for the integration, and also for the release note ;-).. ",
    "android-dataticket": "i'm only using firebase notifications and this is still breaking this library - any help is greatly appreciated:\nhttp://stackoverflow.com/questions/43286225/using-a-custom-crash-handler-with-firebase-installed. Thank you for the reply! I ended up deciding it's best to store my variable as a shared preference, so no need to add any special intent data.. I'm sure it's best to handle with shared preference anyways. \nThanks again for the sweet library!. Thanks, I didn't mean to make an issue but I wanted to get your input on the stacktrace :(. ",
    "k0shk0sh": "@Ereza I guess then in this case the issue shouldn't be closed yet? but rather still in progress? because it didn't solve any issue here but rather implemented a bug where now crashes don't get reported to firebase as you mentioned. . ",
    "lucazin": "Hi Ereza,  i put the version 2.0.0 but i'm still not receiving any crash from firebase\ncan you help me ?. ",
    "lnicolet": "Same here, nothing gets reported to Firebase console. You need to implement the custom error Activity. ",
    "zengcanxiang": "@Ereza \nVery sorry, did not respond to you in a timely manner, because the work led to a period of time did not come to pay attention to this problem.\nthe default error activityis also like this.\nWhen I press the home button, did not return to the home page, but restarted.\nbut file not upload...\nhttp://o6y6mbc2m.bkt.clouddn.com/%E6%B7%B1%E5%BA%A6%E5%BD%95%E5%B1%8F_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20170614145808.gif\n. @Ereza Okay, I'll test it.Thanks for the help you have provided.. After the same operation as the last, did not find reproduce. \nThank you very much to thank me, not in time with the test, it is really sorry. \nThank you for providing such a framework!. ",
    "AdityaAnand1": "@Ereza Thanks for the reply! I'll go and check out the new version now :). ",
    "Polyterative": "This would be great. > You can already execute custom logic when a crash occurs\nAt this point I have all I need. ",
    "MrChriZ": "Seemed to start working... Maybe my mistake somewhere.. ",
    "DominuS-RU": "The same issue.\nSome details:\nTested on OnePlus 5 with 7.1 android and HTC One S on 4.1.\nCaoc ver. 2.2.0\ncompileSdkVersion 26\nbuildToolsVersion '26.0.2'\n...\ntargetSdkVersion 26\n...\ncompile 'cat.ereza:customactivityoncrash:2.2.0'\ncompile 'com.google.firebase:firebase-core:11.8.0'\ncompile('com.crashlytics.sdk.android:crashlytics:2.8.0@aar') {\n    transitive = true\n}\nConfig in application class:\nCaocConfig.Builder.create()\n                .backgroundMode(CaocConfig.BACKGROUND_MODE_SILENT) \n                .logErrorOnRestart(true)\n                .errorActivity(CrashActivity.class)\n                .apply();\nCrashActivity.class is my custom activity which works absolutely 100%.\nThe issue takes part if I call throw new RuntimeException(); at the end of activitie's onCreate method - there will be nothing. If I call it from onDestroy/onResume etc. it will work right. \nAlso, if I use throw with some delay it will work!\n```\n    // At the end of onCreate in first activity\n    new Handler().postDelayed(new Runnable() {\n        @Override public void run() {\n\n        }\n    }, 500);\n\n```\nIt seems as if it does not have time to start. If I call any exception after some delay from initialization - it will work fine. Also, it will work fine in any onCreate methods in future activities.\n. @Ereza Hello! \nI've updated my previous comment with some details. \nI'll test sample project and will try to give you test one in some hours.\nHope, my current details will help you.. @Ereza, I've found the mistake. \nIt's the config for your sample:\nCaocConfig.Builder.create()\n.backgroundMode(CaocConfig.BACKGROUND_MODE_SILENT)\n.apply();\nAn exception for MainActivity\nthrow new RuntimeException(\"boom\");\n\nThen, start you application and see nothing.\nThe main issue in .backgroundMode(CaocConfig.BACKGROUND_MODE_SILENT), if we delete this one the library will work fine. All behavior is repeated as I've described in my first comment.. Anything new about this issue?. ",
    "Stackflood": "Yes, I rechecked. Only after the addition of CustomActivityOnCrash library, the error reappears, otherwise the build is successful.. I tried to run the sample app, but I am getting this error : Error:This Gradle plugin requires Studio 3.0 minimum. I am using Android Studio 2.2.2. hi @Redman1037, @Ereza , thanks for the help. I updated Android studio and the gradle to the latest version and the library is now working good in my project. . ",
    "Redman1037": "try adding these lines in app build.gradle \nconfigurations.all {\nresolutionStrategy.eachDependency { DependencyResolveDetails details ->\n    def requested = details.requested\n    if (requested.group == 'com.android.support') {\n        if (!requested.name.startsWith(\"multidex\")) {\n            details.useVersion '26.1.0'\n        }\n    }\n  }\n\nin place of 26.1.0 use your support library version. @Ereza i am not sure bro today is the first time i am seeing this library , i was just checking if there are any major issues with this library . I just saw this issue and wanted to help the user , i have no idea what is causing this issue.. ",
    "errahby": "Same problem here! for me i'm using \"compile 'cat.ereza:customactivityoncrash:2.2.0'\"  and     compile 'ch.acra:acra:4.9.2' ..when i use ACRA the ereza library doesn' work! Thanks\n. ",
    "gavingt": "I'm getting the same error on the same line. It's only happening on a Nexus 4 running Android 6.0.1. This same user is also having trouble receiving an intent extra in another Activity, which seems to also be what's happening here since this is line 279:\nCaocConfig config = (CaocConfig) intent.getSerializableExtra(CustomActivityOnCrash.EXTRA_CONFIG);\n. I'm beginning to think that this is the result of some sort of Google crawler bot. The one user this happens to is based in Czechia, and always seems to update my app and use it within a couple hours of me pushing a new version (regardless of time of day). I haven't had any users buy my app in Czechia. And the only way this could be happening is if the user is opening Activities programmatically (like using ADB), and thus the intent extras aren't being sent/received as they should.. ",
    "vantuan88291": "this lib will not let google play service get crash logs, so you have to create a api from your server to log crash from your app, this library can do that. "
}